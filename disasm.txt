
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 03 78 00 00       	call   c0007823 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 54 fb 01 c0       	mov    eax,0xc001fb54
c0000025:	3d 54 fb 01 c0       	cmp    eax,0xc001fb54
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 54 fb 01 c0       	push   0xc001fb54
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 54 fb 01 c0       	mov    eax,0xc001fb54
c0000051:	2d 54 fb 01 c0       	sub    eax,0xc001fb54
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 54 fb 01 c0       	push   0xc001fb54
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d 80 fd 01 c0 00 	cmp    BYTE PTR ds:0xc001fd80,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 88 cd 01 c0       	mov    ebx,0xc001cd88
c0000097:	81 eb 84 cd 01 c0    	sub    ebx,0xc001cd84
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 84 cd 01 c0       	mov    esi,0xc001cd84
c00000a6:	a1 84 fd 01 c0       	mov    eax,ds:0xc001fd84
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 84 fd 01 c0       	mov    ds:0xc001fd84,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 84 fd 01 c0       	mov    eax,ds:0xc001fd84
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 54 fb 01 c0       	push   0xc001fb54
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 80 fd 01 c0 01 	mov    BYTE PTR ds:0xc001fd80,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 88 fd 01 c0       	push   0xc001fd88
c0000108:	68 54 fb 01 c0       	push   0xc001fb54
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 24                	jne    c00002cc <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 74 2d 01 00       	call   c0013024 <changeTSS>
c00002b0:	e8 62 04 01 00       	call   c0010717 <KiCheckSignalZ>
c00002b5:	3d 00 00 00 00       	cmp    eax,0x0
c00002ba:	74 07                	je     c00002c3 <commonThreadSwitch.skipHandlers>
c00002bc:	68 01 00 00 00       	push   0x1
c00002c1:	ff d0                	call   eax

c00002c3 <commonThreadSwitch.skipHandlers>:
c00002c3:	5d                   	pop    ebp
c00002c4:	5f                   	pop    edi
c00002c5:	5e                   	pop    esi
c00002c6:	5a                   	pop    edx
c00002c7:	59                   	pop    ecx
c00002c8:	5b                   	pop    ebx
c00002c9:	58                   	pop    eax
c00002ca:	9d                   	popf   
c00002cb:	c3                   	ret    

c00002cc <commonThreadSwitch.firstTime>:
c00002cc:	fa                   	cli    
c00002cd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002d0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002d5:	60                   	pusha  
c00002d6:	e8 0d a0 00 00       	call   c000a2e8 <mapVASFirstTime>
c00002db:	61                   	popa   
c00002dc:	89 c4                	mov    esp,eax
c00002de:	56                   	push   esi
c00002df:	52                   	push   edx
c00002e0:	e8 3f 2d 01 00       	call   c0013024 <changeTSS>
c00002e5:	5a                   	pop    edx
c00002e6:	5e                   	pop    esi
c00002e7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002ee:	5d                   	pop    ebp
c00002ef:	5f                   	pop    edi
c00002f0:	5e                   	pop    esi
c00002f1:	59                   	pop    ecx
c00002f2:	59                   	pop    ecx
c00002f3:	5b                   	pop    ebx
c00002f4:	58                   	pop    eax
c00002f5:	81 c4 04 00 00 00    	add    esp,0x4
c00002fb:	6a 02                	push   0x2
c00002fd:	9d                   	popf   
c00002fe:	52                   	push   edx
c00002ff:	e8 48 32 01 00       	call   c001354c <taskStartupFunction>
c0000304:	5a                   	pop    edx
c0000305:	50                   	push   eax
c0000306:	ff d2                	call   edx
c0000308:	e8 97 38 01 00       	call   c0013ba4 <taskReturned>
c000030d:	e9 fb ff ff ff       	jmp    c000030d <commonThreadSwitch.firstTime+0x41>

c0000312 <asmQuickAcquireLock>:
c0000312:	55                   	push   ebp
c0000313:	89 e5                	mov    ebp,esp
c0000315:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000318 <asmQuickAcquireLock.retry>:
c0000318:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000031d:	72 02                	jb     c0000321 <asmQuickAcquireLock.spin_with_pause>
c000031f:	fa                   	cli    
c0000320:	c3                   	ret    

c0000321 <asmQuickAcquireLock.spin_with_pause>:
c0000321:	f3 90                	pause  
c0000323:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000329:	75 f6                	jne    c0000321 <asmQuickAcquireLock.spin_with_pause>
c000032b:	e9 e8 ff ff ff       	jmp    c0000318 <asmQuickAcquireLock.retry>

c0000330 <asmQuickReleaseLock>:
c0000330:	55                   	push   ebp
c0000331:	89 e5                	mov    ebp,esp
c0000333:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000033a:	5d                   	pop    ebp
c000033b:	c3                   	ret    

c000033c <asmAcquireLock>:
c000033c:	55                   	push   ebp
c000033d:	89 e5                	mov    ebp,esp
c000033f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000342 <asmAcquireLock.retry>:
c0000342:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000347:	72 05                	jb     c000034e <asmAcquireLock.spin_with_pause>
c0000349:	9c                   	pushf  
c000034a:	58                   	pop    eax
c000034b:	fa                   	cli    
c000034c:	5d                   	pop    ebp
c000034d:	c3                   	ret    

c000034e <asmAcquireLock.spin_with_pause>:
c000034e:	f3 90                	pause  
c0000350:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000356:	75 f6                	jne    c000034e <asmAcquireLock.spin_with_pause>
c0000358:	e9 e5 ff ff ff       	jmp    c0000342 <asmAcquireLock.retry>

c000035d <asmReleaseLock>:
c000035d:	55                   	push   ebp
c000035e:	89 e5                	mov    ebp,esp
c0000360:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000363:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000366:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000036c:	52                   	push   edx
c000036d:	9d                   	popf   
c000036e:	5d                   	pop    ebp
c000036f:	c3                   	ret    

c0000370 <loadGDT>:
c0000370:	0f 01 15 80 0b 02 c0 	lgdtd  ds:0xc0020b80
c0000377:	66 b8 10 00          	mov    ax,0x10
c000037b:	66 8e d8             	mov    ds,ax
c000037e:	66 8e c0             	mov    es,ax
c0000381:	66 8e e0             	mov    fs,ax
c0000384:	66 8e e8             	mov    gs,ax
c0000387:	66 8e d0             	mov    ss,ax
c000038a:	e9 00 00 00 00       	jmp    c000038f <flush2>

c000038f <flush2>:
c000038f:	c3                   	ret    

c0000390 <memcpy>:
c0000390:	e9 c1 fd 00 00       	jmp    c0010156 <__not_memcpy>
c0000395:	66 90                	xchg   ax,ax
c0000397:	66 90                	xchg   ax,ax
c0000399:	66 90                	xchg   ax,ax
c000039b:	66 90                	xchg   ax,ax
c000039d:	66 90                	xchg   ax,ax
c000039f:	90                   	nop

c00003a0 <memcmp>:
c00003a0:	56                   	push   esi
c00003a1:	53                   	push   ebx
c00003a2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003ae:	85 f6                	test   esi,esi
c00003b0:	74 1c                	je     c00003ce <memcmp+0x2e>
c00003b2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b6:	38 cb                	cmp    bl,cl
c00003b8:	75 26                	jne    c00003e0 <memcmp+0x40>
c00003ba:	01 c6                	add    esi,eax
c00003bc:	eb 0a                	jmp    c00003c8 <memcmp+0x28>
c00003be:	66 90                	xchg   ax,ax
c00003c0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c4:	38 d9                	cmp    cl,bl
c00003c6:	75 18                	jne    c00003e0 <memcmp+0x40>
c00003c8:	40                   	inc    eax
c00003c9:	42                   	inc    edx
c00003ca:	39 f0                	cmp    eax,esi
c00003cc:	75 f2                	jne    c00003c0 <memcmp+0x20>
c00003ce:	31 c0                	xor    eax,eax
c00003d0:	5b                   	pop    ebx
c00003d1:	5e                   	pop    esi
c00003d2:	c3                   	ret    
c00003d3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003e0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003e6:	31 c0                	xor    eax,eax
c00003e8:	88 c8                	mov    al,cl
c00003ea:	29 d8                	sub    eax,ebx
c00003ec:	5b                   	pop    ebx
c00003ed:	5e                   	pop    esi
c00003ee:	c3                   	ret    
c00003ef:	90                   	nop

c00003f0 <memmove>:
c00003f0:	55                   	push   ebp
c00003f1:	57                   	push   edi
c00003f2:	56                   	push   esi
c00003f3:	53                   	push   ebx
c00003f4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003f8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000400:	39 dd                	cmp    ebp,ebx
c0000402:	0f 83 98 00 00 00    	jae    c00004a0 <memmove+0xb0>
c0000408:	85 d2                	test   edx,edx
c000040a:	0f 84 7c 00 00 00    	je     c000048c <memmove+0x9c>
c0000410:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000413:	8d 75 04             	lea    esi,[ebp+0x4]
c0000416:	39 cd                	cmp    ebp,ecx
c0000418:	0f 93 c1             	setae  cl
c000041b:	39 f3                	cmp    ebx,esi
c000041d:	0f 93 c0             	setae  al
c0000420:	89 c6                	mov    esi,eax
c0000422:	09 ce                	or     esi,ecx
c0000424:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000427:	89 f0                	mov    eax,esi
c0000429:	83 f9 0c             	cmp    ecx,0xc
c000042c:	0f 97 c1             	seta   cl
c000042f:	84 c8                	test   al,cl
c0000431:	0f 84 89 00 00 00    	je     c00004c0 <memmove+0xd0>
c0000437:	89 e9                	mov    ecx,ebp
c0000439:	09 d9                	or     ecx,ebx
c000043b:	83 e1 03             	and    ecx,0x3
c000043e:	0f 85 7c 00 00 00    	jne    c00004c0 <memmove+0xd0>
c0000444:	89 d7                	mov    edi,edx
c0000446:	89 d9                	mov    ecx,ebx
c0000448:	83 e7 fc             	and    edi,0xfffffffc
c000044b:	89 ee                	mov    esi,ebp
c000044d:	01 df                	add    edi,ebx
c000044f:	90                   	nop
c0000450:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000452:	83 c6 04             	add    esi,0x4
c0000455:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000458:	83 c1 04             	add    ecx,0x4
c000045b:	39 f9                	cmp    ecx,edi
c000045d:	75 f1                	jne    c0000450 <memmove+0x60>
c000045f:	89 d1                	mov    ecx,edx
c0000461:	89 d7                	mov    edi,edx
c0000463:	83 e1 fc             	and    ecx,0xfffffffc
c0000466:	29 cf                	sub    edi,ecx
c0000468:	01 cb                	add    ebx,ecx
c000046a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000046e:	39 ca                	cmp    edx,ecx
c0000470:	74 1a                	je     c000048c <memmove+0x9c>
c0000472:	8a 03                	mov    al,BYTE PTR [ebx]
c0000474:	83 ff 01             	cmp    edi,0x1
c0000477:	88 06                	mov    BYTE PTR [esi],al
c0000479:	74 11                	je     c000048c <memmove+0x9c>
c000047b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000047e:	83 ff 02             	cmp    edi,0x2
c0000481:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000484:	74 06                	je     c000048c <memmove+0x9c>
c0000486:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000489:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000048c:	5b                   	pop    ebx
c000048d:	89 e8                	mov    eax,ebp
c000048f:	5e                   	pop    esi
c0000490:	5f                   	pop    edi
c0000491:	5d                   	pop    ebp
c0000492:	c3                   	ret    
c0000493:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000499:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004a0:	76 ea                	jbe    c000048c <memmove+0x9c>
c00004a2:	85 d2                	test   edx,edx
c00004a4:	74 e6                	je     c000048c <memmove+0x9c>
c00004a6:	4b                   	dec    ebx
c00004a7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004b0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004b3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004b6:	4a                   	dec    edx
c00004b7:	75 f7                	jne    c00004b0 <memmove+0xc0>
c00004b9:	5b                   	pop    ebx
c00004ba:	89 e8                	mov    eax,ebp
c00004bc:	5e                   	pop    esi
c00004bd:	5f                   	pop    edi
c00004be:	5d                   	pop    ebp
c00004bf:	c3                   	ret    
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	41                   	inc    ecx
c00004d3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d6:	43                   	inc    ebx
c00004d7:	39 d1                	cmp    ecx,edx
c00004d9:	75 f5                	jne    c00004d0 <memmove+0xe0>
c00004db:	eb af                	jmp    c000048c <memmove+0x9c>
c00004dd:	8d 76 00             	lea    esi,[esi+0x0]

c00004e0 <memset>:
c00004e0:	57                   	push   edi
c00004e1:	53                   	push   ebx
c00004e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004e6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004ea:	85 d2                	test   edx,edx
c00004ec:	74 1f                	je     c000050d <memset+0x2d>
c00004ee:	31 c0                	xor    eax,eax
c00004f0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004f4:	88 c4                	mov    ah,al
c00004f6:	89 c1                	mov    ecx,eax
c00004f8:	c1 e1 10             	shl    ecx,0x10
c00004fb:	09 c8                	or     eax,ecx
c00004fd:	83 fa 04             	cmp    edx,0x4
c0000500:	73 1e                	jae    c0000520 <memset+0x40>
c0000502:	85 d2                	test   edx,edx
c0000504:	74 07                	je     c000050d <memset+0x2d>
c0000506:	88 03                	mov    BYTE PTR [ebx],al
c0000508:	f6 c2 02             	test   dl,0x2
c000050b:	75 30                	jne    c000053d <memset+0x5d>
c000050d:	89 d8                	mov    eax,ebx
c000050f:	5b                   	pop    ebx
c0000510:	5f                   	pop    edi
c0000511:	c3                   	ret    
c0000512:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000519:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000520:	89 03                	mov    DWORD PTR [ebx],eax
c0000522:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000525:	89 d9                	mov    ecx,ebx
c0000527:	83 e7 fc             	and    edi,0xfffffffc
c000052a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000052e:	29 f9                	sub    ecx,edi
c0000530:	01 d1                	add    ecx,edx
c0000532:	c1 e9 02             	shr    ecx,0x2
c0000535:	fc                   	cld    
c0000536:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000538:	89 d8                	mov    eax,ebx
c000053a:	5b                   	pop    ebx
c000053b:	5f                   	pop    edi
c000053c:	c3                   	ret    
c000053d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000542:	eb c9                	jmp    c000050d <memset+0x2d>
c0000544:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000054a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000550 <strlen>:
c0000550:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000554:	31 c0                	xor    eax,eax
c0000556:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000559:	74 15                	je     c0000570 <strlen+0x20>
c000055b:	90                   	nop
c000055c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000560:	40                   	inc    eax
c0000561:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000565:	75 f9                	jne    c0000560 <strlen+0x10>
c0000567:	c3                   	ret    
c0000568:	90                   	nop
c0000569:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000570:	c3                   	ret    
c0000571:	eb 0d                	jmp    c0000580 <strpbrk>
c0000573:	90                   	nop
c0000574:	90                   	nop
c0000575:	90                   	nop
c0000576:	90                   	nop
c0000577:	90                   	nop
c0000578:	90                   	nop
c0000579:	90                   	nop
c000057a:	90                   	nop
c000057b:	90                   	nop
c000057c:	90                   	nop
c000057d:	90                   	nop
c000057e:	90                   	nop
c000057f:	90                   	nop

c0000580 <strpbrk>:
c0000580:	57                   	push   edi
c0000581:	56                   	push   esi
c0000582:	53                   	push   ebx
c0000583:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000587:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000058b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000058d:	84 db                	test   bl,bl
c000058f:	74 21                	je     c00005b2 <strpbrk+0x32>
c0000591:	8a 07                	mov    al,BYTE PTR [edi]
c0000593:	84 c0                	test   al,al
c0000595:	74 14                	je     c00005ab <strpbrk+0x2b>
c0000597:	38 d8                	cmp    al,bl
c0000599:	74 19                	je     c00005b4 <strpbrk+0x34>
c000059b:	89 fa                	mov    edx,edi
c000059d:	eb 05                	jmp    c00005a4 <strpbrk+0x24>
c000059f:	90                   	nop
c00005a0:	38 d9                	cmp    cl,bl
c00005a2:	74 10                	je     c00005b4 <strpbrk+0x34>
c00005a4:	42                   	inc    edx
c00005a5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005a7:	84 c9                	test   cl,cl
c00005a9:	75 f5                	jne    c00005a0 <strpbrk+0x20>
c00005ab:	46                   	inc    esi
c00005ac:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005ae:	84 db                	test   bl,bl
c00005b0:	75 e1                	jne    c0000593 <strpbrk+0x13>
c00005b2:	31 f6                	xor    esi,esi
c00005b4:	89 f0                	mov    eax,esi
c00005b6:	5b                   	pop    ebx
c00005b7:	5e                   	pop    esi
c00005b8:	5f                   	pop    edi
c00005b9:	c3                   	ret    
c00005ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005c0 <strtok>:
c00005c0:	56                   	push   esi
c00005c1:	53                   	push   ebx
c00005c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ca:	85 db                	test   ebx,ebx
c00005cc:	75 07                	jne    c00005d5 <strtok+0x15>
c00005ce:	eb 30                	jmp    c0000600 <strtok+0x40>
c00005d0:	43                   	inc    ebx
c00005d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005d5:	56                   	push   esi
c00005d6:	53                   	push   ebx
c00005d7:	e8 a4 ff ff ff       	call   c0000580 <strpbrk>
c00005dc:	5a                   	pop    edx
c00005dd:	a3 a0 fd 01 c0       	mov    ds:0xc001fda0,eax
c00005e2:	59                   	pop    ecx
c00005e3:	39 d8                	cmp    eax,ebx
c00005e5:	74 e9                	je     c00005d0 <strtok+0x10>
c00005e7:	85 c0                	test   eax,eax
c00005e9:	74 1f                	je     c000060a <strtok+0x4a>
c00005eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005ee:	8d 50 01             	lea    edx,[eax+0x1]
c00005f1:	89 d8                	mov    eax,ebx
c00005f3:	89 15 a0 fd 01 c0    	mov    DWORD PTR ds:0xc001fda0,edx
c00005f9:	5b                   	pop    ebx
c00005fa:	5e                   	pop    esi
c00005fb:	c3                   	ret    
c00005fc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000600:	8b 1d a0 fd 01 c0    	mov    ebx,DWORD PTR ds:0xc001fda0
c0000606:	85 db                	test   ebx,ebx
c0000608:	75 cb                	jne    c00005d5 <strtok+0x15>
c000060a:	31 c0                	xor    eax,eax
c000060c:	5b                   	pop    ebx
c000060d:	5e                   	pop    esi
c000060e:	c3                   	ret    
c000060f:	90                   	nop

c0000610 <strcpy>:
c0000610:	53                   	push   ebx
c0000611:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000615:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000619:	89 c3                	mov    ebx,eax
c000061b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000061d:	84 d2                	test   dl,dl
c000061f:	74 19                	je     c000063a <strcpy+0x2a>
c0000621:	eb 0d                	jmp    c0000630 <strcpy+0x20>
c0000623:	90                   	nop
c0000624:	90                   	nop
c0000625:	90                   	nop
c0000626:	90                   	nop
c0000627:	90                   	nop
c0000628:	90                   	nop
c0000629:	90                   	nop
c000062a:	90                   	nop
c000062b:	90                   	nop
c000062c:	90                   	nop
c000062d:	90                   	nop
c000062e:	90                   	nop
c000062f:	90                   	nop
c0000630:	88 13                	mov    BYTE PTR [ebx],dl
c0000632:	41                   	inc    ecx
c0000633:	43                   	inc    ebx
c0000634:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000636:	84 d2                	test   dl,dl
c0000638:	75 f6                	jne    c0000630 <strcpy+0x20>
c000063a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000063d:	5b                   	pop    ebx
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strncpy>:
c0000640:	57                   	push   edi
c0000641:	56                   	push   esi
c0000642:	53                   	push   ebx
c0000643:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000647:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000064f:	85 ff                	test   edi,edi
c0000651:	74 3e                	je     c0000691 <strncpy+0x51>
c0000653:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000655:	8d 47 ff             	lea    eax,[edi-0x1]
c0000658:	8d 4a 01             	lea    ecx,[edx+0x1]
c000065b:	88 1a                	mov    BYTE PTR [edx],bl
c000065d:	84 db                	test   bl,bl
c000065f:	74 3f                	je     c00006a0 <strncpy+0x60>
c0000661:	85 c0                	test   eax,eax
c0000663:	74 2c                	je     c0000691 <strncpy+0x51>
c0000665:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000668:	8d 47 fe             	lea    eax,[edi-0x2]
c000066b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000066e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000671:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000674:	84 db                	test   bl,bl
c0000676:	75 15                	jne    c000068d <strncpy+0x4d>
c0000678:	eb 26                	jmp    c00006a0 <strncpy+0x60>
c000067a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000680:	47                   	inc    edi
c0000681:	41                   	inc    ecx
c0000682:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000685:	48                   	dec    eax
c0000686:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000689:	84 db                	test   bl,bl
c000068b:	74 13                	je     c00006a0 <strncpy+0x60>
c000068d:	85 c0                	test   eax,eax
c000068f:	75 ef                	jne    c0000680 <strncpy+0x40>
c0000691:	5b                   	pop    ebx
c0000692:	89 d0                	mov    eax,edx
c0000694:	5e                   	pop    esi
c0000695:	5f                   	pop    edi
c0000696:	c3                   	ret    
c0000697:	89 f6                	mov    esi,esi
c0000699:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006a0:	85 c0                	test   eax,eax
c00006a2:	74 ed                	je     c0000691 <strncpy+0x51>
c00006a4:	83 f8 04             	cmp    eax,0x4
c00006a7:	73 17                	jae    c00006c0 <strncpy+0x80>
c00006a9:	85 c0                	test   eax,eax
c00006ab:	74 e4                	je     c0000691 <strncpy+0x51>
c00006ad:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006b0:	a8 02                	test   al,0x2
c00006b2:	74 dd                	je     c0000691 <strncpy+0x51>
c00006b4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006bb:	eb d4                	jmp    c0000691 <strncpy+0x51>
c00006bd:	8d 76 00             	lea    esi,[esi+0x0]
c00006c0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006c6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006c9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006d1:	83 e7 fc             	and    edi,0xfffffffc
c00006d4:	29 f9                	sub    ecx,edi
c00006d6:	01 c1                	add    ecx,eax
c00006d8:	c1 e9 02             	shr    ecx,0x2
c00006db:	fc                   	cld    
c00006dc:	31 c0                	xor    eax,eax
c00006de:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006e0:	89 d0                	mov    eax,edx
c00006e2:	5b                   	pop    ebx
c00006e3:	5e                   	pop    esi
c00006e4:	5f                   	pop    edi
c00006e5:	c3                   	ret    
c00006e6:	8d 76 00             	lea    esi,[esi+0x0]
c00006e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006f0 <strcmp>:
c00006f0:	56                   	push   esi
c00006f1:	53                   	push   ebx
c00006f2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006f6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006fa:	8a 16                	mov    dl,BYTE PTR [esi]
c00006fc:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006fe:	38 d1                	cmp    cl,dl
c0000700:	75 1d                	jne    c000071f <strcmp+0x2f>
c0000702:	84 c9                	test   cl,cl
c0000704:	74 2a                	je     c0000730 <strcmp+0x40>
c0000706:	b8 01 00 00 00       	mov    eax,0x1
c000070b:	eb 08                	jmp    c0000715 <strcmp+0x25>
c000070d:	8d 76 00             	lea    esi,[esi+0x0]
c0000710:	40                   	inc    eax
c0000711:	84 d2                	test   dl,dl
c0000713:	74 1b                	je     c0000730 <strcmp+0x40>
c0000715:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000718:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000071b:	38 ca                	cmp    dl,cl
c000071d:	74 f1                	je     c0000710 <strcmp+0x20>
c000071f:	31 c0                	xor    eax,eax
c0000721:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000727:	88 d0                	mov    al,dl
c0000729:	5b                   	pop    ebx
c000072a:	29 c8                	sub    eax,ecx
c000072c:	5e                   	pop    esi
c000072d:	c3                   	ret    
c000072e:	66 90                	xchg   ax,ax
c0000730:	31 c0                	xor    eax,eax
c0000732:	5b                   	pop    ebx
c0000733:	5e                   	pop    esi
c0000734:	c3                   	ret    
c0000735:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000739:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000740 <strchr>:
c0000740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000744:	8a 10                	mov    dl,BYTE PTR [eax]
c0000746:	84 d2                	test   dl,dl
c0000748:	74 21                	je     c000076b <strchr+0x2b>
c000074a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000074e:	38 ca                	cmp    dl,cl
c0000750:	75 12                	jne    c0000764 <strchr+0x24>
c0000752:	eb 1a                	jmp    c000076e <strchr+0x2e>
c0000754:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000075a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000760:	38 ca                	cmp    dl,cl
c0000762:	74 09                	je     c000076d <strchr+0x2d>
c0000764:	40                   	inc    eax
c0000765:	8a 10                	mov    dl,BYTE PTR [eax]
c0000767:	84 d2                	test   dl,dl
c0000769:	75 f5                	jne    c0000760 <strchr+0x20>
c000076b:	31 c0                	xor    eax,eax
c000076d:	c3                   	ret    
c000076e:	c3                   	ret    
c000076f:	90                   	nop

c0000770 <strncmp>:
c0000770:	57                   	push   edi
c0000771:	56                   	push   esi
c0000772:	53                   	push   ebx
c0000773:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000777:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000077b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000077f:	85 ff                	test   edi,edi
c0000781:	74 2f                	je     c00007b2 <strncmp+0x42>
c0000783:	8a 16                	mov    dl,BYTE PTR [esi]
c0000785:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000787:	38 d1                	cmp    cl,dl
c0000789:	75 35                	jne    c00007c0 <strncmp+0x50>
c000078b:	8d 46 01             	lea    eax,[esi+0x1]
c000078e:	84 c9                	test   cl,cl
c0000790:	74 20                	je     c00007b2 <strncmp+0x42>
c0000792:	01 fe                	add    esi,edi
c0000794:	eb 17                	jmp    c00007ad <strncmp+0x3d>
c0000796:	8d 76 00             	lea    esi,[esi+0x0]
c0000799:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007a0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007a2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007a4:	38 ca                	cmp    dl,cl
c00007a6:	75 18                	jne    c00007c0 <strncmp+0x50>
c00007a8:	40                   	inc    eax
c00007a9:	84 d2                	test   dl,dl
c00007ab:	74 05                	je     c00007b2 <strncmp+0x42>
c00007ad:	43                   	inc    ebx
c00007ae:	39 c6                	cmp    esi,eax
c00007b0:	75 ee                	jne    c00007a0 <strncmp+0x30>
c00007b2:	5b                   	pop    ebx
c00007b3:	31 c0                	xor    eax,eax
c00007b5:	5e                   	pop    esi
c00007b6:	5f                   	pop    edi
c00007b7:	c3                   	ret    
c00007b8:	90                   	nop
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	5b                   	pop    ebx
c00007c1:	31 c0                	xor    eax,eax
c00007c3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007c9:	88 d0                	mov    al,dl
c00007cb:	5e                   	pop    esi
c00007cc:	29 c8                	sub    eax,ecx
c00007ce:	5f                   	pop    edi
c00007cf:	c3                   	ret    

c00007d0 <strcat>:
c00007d0:	56                   	push   esi
c00007d1:	53                   	push   ebx
c00007d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007da:	89 c3                	mov    ebx,eax
c00007dc:	eb 04                	jmp    c00007e2 <strcat+0x12>
c00007de:	66 90                	xchg   ax,ax
c00007e0:	89 d3                	mov    ebx,edx
c00007e2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007e5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x10>
c00007eb:	31 d2                	xor    edx,edx
c00007ed:	8d 76 00             	lea    esi,[esi+0x0]
c00007f0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007f3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007f6:	42                   	inc    edx
c00007f7:	84 c9                	test   cl,cl
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x20>
c00007fb:	5b                   	pop    ebx
c00007fc:	5e                   	pop    esi
c00007fd:	c3                   	ret    
c00007fe:	66 90                	xchg   ax,ax

c0000800 <strncat>:
c0000800:	56                   	push   esi
c0000801:	53                   	push   ebx
c0000802:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000806:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000080a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000080e:	85 f6                	test   esi,esi
c0000810:	74 2e                	je     c0000840 <strncat+0x40>
c0000812:	89 c2                	mov    edx,eax
c0000814:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000081a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000820:	42                   	inc    edx
c0000821:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000825:	75 f9                	jne    c0000820 <strncat+0x20>
c0000827:	01 ce                	add    esi,ecx
c0000829:	eb 0a                	jmp    c0000835 <strncat+0x35>
c000082b:	90                   	nop
c000082c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000830:	39 f1                	cmp    ecx,esi
c0000832:	74 1c                	je     c0000850 <strncat+0x50>
c0000834:	42                   	inc    edx
c0000835:	41                   	inc    ecx
c0000836:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000839:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000083c:	84 db                	test   bl,bl
c000083e:	75 f0                	jne    c0000830 <strncat+0x30>
c0000840:	5b                   	pop    ebx
c0000841:	5e                   	pop    esi
c0000842:	c3                   	ret    
c0000843:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000850:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000853:	5b                   	pop    ebx
c0000854:	5e                   	pop    esi
c0000855:	c3                   	ret    
c0000856:	8d 76 00             	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000860 <strstr>:
c0000860:	57                   	push   edi
c0000861:	56                   	push   esi
c0000862:	53                   	push   ebx
c0000863:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000867:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000086b:	57                   	push   edi
c000086c:	e8 df fc ff ff       	call   c0000550 <strlen>
c0000871:	59                   	pop    ecx
c0000872:	85 c0                	test   eax,eax
c0000874:	74 3a                	je     c00008b0 <strstr+0x50>
c0000876:	89 c6                	mov    esi,eax
c0000878:	eb 16                	jmp    c0000890 <strstr+0x30>
c000087a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000880:	56                   	push   esi
c0000881:	57                   	push   edi
c0000882:	53                   	push   ebx
c0000883:	e8 18 fb ff ff       	call   c00003a0 <memcmp>
c0000888:	83 c4 0c             	add    esp,0xc
c000088b:	85 c0                	test   eax,eax
c000088d:	74 21                	je     c00008b0 <strstr+0x50>
c000088f:	43                   	inc    ebx
c0000890:	53                   	push   ebx
c0000891:	e8 ba fc ff ff       	call   c0000550 <strlen>
c0000896:	5a                   	pop    edx
c0000897:	39 f0                	cmp    eax,esi
c0000899:	73 e5                	jae    c0000880 <strstr+0x20>
c000089b:	5b                   	pop    ebx
c000089c:	31 c0                	xor    eax,eax
c000089e:	5e                   	pop    esi
c000089f:	5f                   	pop    edi
c00008a0:	c3                   	ret    
c00008a1:	eb 0d                	jmp    c00008b0 <strstr+0x50>
c00008a3:	90                   	nop
c00008a4:	90                   	nop
c00008a5:	90                   	nop
c00008a6:	90                   	nop
c00008a7:	90                   	nop
c00008a8:	90                   	nop
c00008a9:	90                   	nop
c00008aa:	90                   	nop
c00008ab:	90                   	nop
c00008ac:	90                   	nop
c00008ad:	90                   	nop
c00008ae:	90                   	nop
c00008af:	90                   	nop
c00008b0:	89 d8                	mov    eax,ebx
c00008b2:	5b                   	pop    ebx
c00008b3:	5e                   	pop    esi
c00008b4:	5f                   	pop    edi
c00008b5:	c3                   	ret    
c00008b6:	8d 76 00             	lea    esi,[esi+0x0]
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008c0 <toupper>:
c00008c0:	31 d2                	xor    edx,edx
c00008c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c6:	88 c2                	mov    dl,al
c00008c8:	f6 82 a0 cd 01 c0 02 	test   BYTE PTR [edx-0x3ffe3260],0x2
c00008cf:	74 03                	je     c00008d4 <toupper+0x14>
c00008d1:	83 e8 20             	sub    eax,0x20
c00008d4:	c3                   	ret    
c00008d5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008e0 <tolower>:
c00008e0:	31 d2                	xor    edx,edx
c00008e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008e6:	88 c2                	mov    dl,al
c00008e8:	f6 82 a0 cd 01 c0 01 	test   BYTE PTR [edx-0x3ffe3260],0x1
c00008ef:	74 03                	je     c00008f4 <tolower+0x14>
c00008f1:	83 c0 20             	add    eax,0x20
c00008f4:	c3                   	ret    
c00008f5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000900 <simple_strtoul>:
c0000900:	55                   	push   ebp
c0000901:	57                   	push   edi
c0000902:	56                   	push   esi
c0000903:	53                   	push   ebx
c0000904:	83 ec 08             	sub    esp,0x8
c0000907:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000090b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000090f:	90                   	nop
c0000910:	31 d2                	xor    edx,edx
c0000912:	8a 01                	mov    al,BYTE PTR [ecx]
c0000914:	88 c2                	mov    dl,al
c0000916:	f6 82 a0 cd 01 c0 08 	test   BYTE PTR [edx-0x3ffe3260],0x8
c000091d:	75 04                	jne    c0000923 <simple_strtoul+0x23>
c000091f:	3c 09                	cmp    al,0x9
c0000921:	75 0d                	jne    c0000930 <simple_strtoul+0x30>
c0000923:	41                   	inc    ecx
c0000924:	eb ea                	jmp    c0000910 <simple_strtoul+0x10>
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000930:	3c 2d                	cmp    al,0x2d
c0000932:	0f 84 48 01 00 00    	je     c0000a80 <simple_strtoul+0x180>
c0000938:	3c 2b                	cmp    al,0x2b
c000093a:	0f 84 e0 00 00 00    	je     c0000a20 <simple_strtoul+0x120>
c0000940:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000948:	85 f6                	test   esi,esi
c000094a:	0f 85 e1 00 00 00    	jne    c0000a31 <simple_strtoul+0x131>
c0000950:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000953:	80 fa 30             	cmp    dl,0x30
c0000956:	0f 84 75 01 00 00    	je     c0000ad1 <simple_strtoul+0x1d1>
c000095c:	be 0a 00 00 00       	mov    esi,0xa
c0000961:	84 d2                	test   dl,dl
c0000963:	0f 84 9f 01 00 00    	je     c0000b08 <simple_strtoul+0x208>
c0000969:	31 ed                	xor    ebp,ebp
c000096b:	31 ff                	xor    edi,edi
c000096d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000974:	eb 35                	jmp    c00009ab <simple_strtoul+0xab>
c0000976:	8d 76 00             	lea    esi,[esi+0x0]
c0000979:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000980:	83 eb 30             	sub    ebx,0x30
c0000983:	39 f3                	cmp    ebx,esi
c0000985:	73 59                	jae    c00009e0 <simple_strtoul+0xe0>
c0000987:	31 d2                	xor    edx,edx
c0000989:	89 d8                	mov    eax,ebx
c000098b:	f7 d0                	not    eax
c000098d:	f7 f6                	div    esi
c000098f:	39 f8                	cmp    eax,edi
c0000991:	0f 82 c9 00 00 00    	jb     c0000a60 <simple_strtoul+0x160>
c0000997:	0f af fe             	imul   edi,esi
c000099a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009a1:	01 df                	add    edi,ebx
c00009a3:	41                   	inc    ecx
c00009a4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009a7:	84 d2                	test   dl,dl
c00009a9:	74 35                	je     c00009e0 <simple_strtoul+0xe0>
c00009ab:	31 db                	xor    ebx,ebx
c00009ad:	88 d3                	mov    bl,dl
c00009af:	f6 83 a0 cd 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3260],0x4
c00009b6:	75 c8                	jne    c0000980 <simple_strtoul+0x80>
c00009b8:	52                   	push   edx
c00009b9:	e8 02 ff ff ff       	call   c00008c0 <toupper>
c00009be:	31 d2                	xor    edx,edx
c00009c0:	5b                   	pop    ebx
c00009c1:	88 c2                	mov    dl,al
c00009c3:	f6 82 a0 cd 01 c0 01 	test   BYTE PTR [edx-0x3ffe3260],0x1
c00009ca:	74 14                	je     c00009e0 <simple_strtoul+0xe0>
c00009cc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009cf:	39 f3                	cmp    ebx,esi
c00009d1:	72 b4                	jb     c0000987 <simple_strtoul+0x87>
c00009d3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e4:	85 c0                	test   eax,eax
c00009e6:	74 18                	je     c0000a00 <simple_strtoul+0x100>
c00009e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009eb:	09 f8                	or     eax,edi
c00009ed:	0f 85 7d 00 00 00    	jne    c0000a70 <simple_strtoul+0x170>
c00009f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009fb:	31 ff                	xor    edi,edi
c00009fd:	89 30                	mov    DWORD PTR [eax],esi
c00009ff:	90                   	nop
c0000a00:	4d                   	dec    ebp
c0000a01:	75 05                	jne    c0000a08 <simple_strtoul+0x108>
c0000a03:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a08:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a0d:	75 02                	jne    c0000a11 <simple_strtoul+0x111>
c0000a0f:	f7 df                	neg    edi
c0000a11:	83 c4 08             	add    esp,0x8
c0000a14:	89 f8                	mov    eax,edi
c0000a16:	5b                   	pop    ebx
c0000a17:	5e                   	pop    esi
c0000a18:	5f                   	pop    edi
c0000a19:	5d                   	pop    ebp
c0000a1a:	c3                   	ret    
c0000a1b:	90                   	nop
c0000a1c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a20:	41                   	inc    ecx
c0000a21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a29:	85 f6                	test   esi,esi
c0000a2b:	0f 84 1f ff ff ff    	je     c0000950 <simple_strtoul+0x50>
c0000a31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a34:	83 f8 22             	cmp    eax,0x22
c0000a37:	77 7b                	ja     c0000ab4 <simple_strtoul+0x1b4>
c0000a39:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a3c:	83 fe 08             	cmp    esi,0x8
c0000a3f:	0f 84 b3 00 00 00    	je     c0000af8 <simple_strtoul+0x1f8>
c0000a45:	83 fe 10             	cmp    esi,0x10
c0000a48:	0f 85 13 ff ff ff    	jne    c0000961 <simple_strtoul+0x61>
c0000a4e:	80 fa 30             	cmp    dl,0x30
c0000a51:	74 3b                	je     c0000a8e <simple_strtoul+0x18e>
c0000a53:	be 10 00 00 00       	mov    esi,0x10
c0000a58:	e9 04 ff ff ff       	jmp    c0000961 <simple_strtoul+0x61>
c0000a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a60:	bd 01 00 00 00       	mov    ebp,0x1
c0000a65:	31 ff                	xor    edi,edi
c0000a67:	e9 37 ff ff ff       	jmp    c00009a3 <simple_strtoul+0xa3>
c0000a6c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a74:	89 08                	mov    DWORD PTR [eax],ecx
c0000a76:	eb 88                	jmp    c0000a00 <simple_strtoul+0x100>
c0000a78:	90                   	nop
c0000a79:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a80:	41                   	inc    ecx
c0000a81:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a89:	e9 ba fe ff ff       	jmp    c0000948 <simple_strtoul+0x48>
c0000a8e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a92:	88 04 24             	mov    BYTE PTR [esp],al
c0000a95:	50                   	push   eax
c0000a96:	e8 45 fe ff ff       	call   c00008e0 <tolower>
c0000a9b:	5e                   	pop    esi
c0000a9c:	83 f8 78             	cmp    eax,0x78
c0000a9f:	0f 84 88 00 00 00    	je     c0000b2d <simple_strtoul+0x22d>
c0000aa5:	41                   	inc    ecx
c0000aa6:	be 10 00 00 00       	mov    esi,0x10
c0000aab:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000aaf:	e9 ad fe ff ff       	jmp    c0000961 <simple_strtoul+0x61>
c0000ab4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ab8:	85 ff                	test   edi,edi
c0000aba:	74 5e                	je     c0000b1a <simple_strtoul+0x21a>
c0000abc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ac0:	85 c9                	test   ecx,ecx
c0000ac2:	75 50                	jne    c0000b14 <simple_strtoul+0x214>
c0000ac4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aca:	31 ff                	xor    edi,edi
c0000acc:	e9 37 ff ff ff       	jmp    c0000a08 <simple_strtoul+0x108>
c0000ad1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ad5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ad8:	50                   	push   eax
c0000ad9:	e8 02 fe ff ff       	call   c00008e0 <tolower>
c0000ade:	5d                   	pop    ebp
c0000adf:	83 f8 78             	cmp    eax,0x78
c0000ae2:	74 3d                	je     c0000b21 <simple_strtoul+0x221>
c0000ae4:	41                   	inc    ecx
c0000ae5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ae9:	80 fa 30             	cmp    dl,0x30
c0000aec:	74 13                	je     c0000b01 <simple_strtoul+0x201>
c0000aee:	be 08 00 00 00       	mov    esi,0x8
c0000af3:	e9 69 fe ff ff       	jmp    c0000961 <simple_strtoul+0x61>
c0000af8:	80 fa 30             	cmp    dl,0x30
c0000afb:	0f 85 60 fe ff ff    	jne    c0000961 <simple_strtoul+0x61>
c0000b01:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b05:	41                   	inc    ecx
c0000b06:	eb e6                	jmp    c0000aee <simple_strtoul+0x1ee>
c0000b08:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b0c:	85 d2                	test   edx,edx
c0000b0e:	74 0a                	je     c0000b1a <simple_strtoul+0x21a>
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b18:	89 30                	mov    DWORD PTR [eax],esi
c0000b1a:	31 ff                	xor    edi,edi
c0000b1c:	e9 e7 fe ff ff       	jmp    c0000a08 <simple_strtoul+0x108>
c0000b21:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b25:	83 c1 02             	add    ecx,0x2
c0000b28:	e9 21 ff ff ff       	jmp    c0000a4e <simple_strtoul+0x14e>
c0000b2d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b31:	be 10 00 00 00       	mov    esi,0x10
c0000b36:	83 c1 02             	add    ecx,0x2
c0000b39:	e9 23 fe ff ff       	jmp    c0000961 <simple_strtoul+0x61>

c0000b3e <largebin_index>:
c0000b3e:	89 c2                	mov    edx,eax
c0000b40:	c1 ea 08             	shr    edx,0x8
c0000b43:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b49:	77 10                	ja     c0000b5b <largebin_index+0x1d>
c0000b4b:	0f bd d2             	bsr    edx,edx
c0000b4e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b51:	d3 e8                	shr    eax,cl
c0000b53:	83 e0 03             	and    eax,0x3
c0000b56:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b5a:	c3                   	ret    
c0000b5b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b60:	c3                   	ret    

c0000b61 <malloc_init_state>:
c0000b61:	53                   	push   ebx
c0000b62:	8d 50 34             	lea    edx,[eax+0x34]
c0000b65:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b6b:	89 d1                	mov    ecx,edx
c0000b6d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b70:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b73:	83 c2 08             	add    edx,0x8
c0000b76:	39 da                	cmp    edx,ebx
c0000b78:	75 f3                	jne    c0000b6d <malloc_init_state+0xc>
c0000b7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b7c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b86:	83 e2 03             	and    edx,0x3
c0000b89:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b93:	83 ca 48             	or     edx,0x48
c0000b96:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000ba0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000baa:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bb1:	89 10                	mov    DWORD PTR [eax],edx
c0000bb3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bb6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bc0:	5b                   	pop    ebx
c0000bc1:	c3                   	ret    

c0000bc2 <malloc_consolidate>:
c0000bc2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bc4:	85 d2                	test   edx,edx
c0000bc6:	0f 84 d8 00 00 00    	je     c0000ca4 <malloc_consolidate+0xe2>
c0000bcc:	55                   	push   ebp
c0000bcd:	83 e2 fd             	and    edx,0xfffffffd
c0000bd0:	57                   	push   edi
c0000bd1:	89 c5                	mov    ebp,eax
c0000bd3:	56                   	push   esi
c0000bd4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bd7:	53                   	push   ebx
c0000bd8:	83 ec 10             	sub    esp,0x10
c0000bdb:	89 10                	mov    DWORD PTR [eax],edx
c0000bdd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000be1:	c1 ea 03             	shr    edx,0x3
c0000be4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000be8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bec:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bef:	85 d2                	test   edx,edx
c0000bf1:	0f 84 98 00 00 00    	je     c0000c8f <malloc_consolidate+0xcd>
c0000bf7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bfe:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c01:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c04:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c08:	89 f9                	mov    ecx,edi
c0000c0a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c0d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c10:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c13:	83 e3 fc             	and    ebx,0xfffffffc
c0000c16:	83 e7 01             	and    edi,0x1
c0000c19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c1c:	75 14                	jne    c0000c32 <malloc_consolidate+0x70>
c0000c1e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c20:	29 fa                	sub    edx,edi
c0000c22:	01 f9                	add    ecx,edi
c0000c24:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c27:	89 fb                	mov    ebx,edi
c0000c29:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c2c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c2f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c32:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c35:	74 40                	je     c0000c77 <malloc_consolidate+0xb5>
c0000c37:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c3a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c3d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c41:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c44:	83 e7 01             	and    edi,0x1
c0000c47:	75 0e                	jne    c0000c57 <malloc_consolidate+0x95>
c0000c49:	01 d9                	add    ecx,ebx
c0000c4b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c4e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c51:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c54:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c57:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c5a:	89 ce                	mov    esi,ecx
c0000c5c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c5f:	83 ce 01             	or     esi,0x1
c0000c62:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c65:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c68:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c6b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c6f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c72:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c75:	eb 0c                	jmp    c0000c83 <malloc_consolidate+0xc1>
c0000c77:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c7a:	83 c9 01             	or     ecx,0x1
c0000c7d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c80:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c87:	85 d2                	test   edx,edx
c0000c89:	0f 85 6f ff ff ff    	jne    c0000bfe <malloc_consolidate+0x3c>
c0000c8f:	83 c5 04             	add    ebp,0x4
c0000c92:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c96:	0f 85 50 ff ff ff    	jne    c0000bec <malloc_consolidate+0x2a>
c0000c9c:	83 c4 10             	add    esp,0x10
c0000c9f:	5b                   	pop    ebx
c0000ca0:	5e                   	pop    esi
c0000ca1:	5f                   	pop    edi
c0000ca2:	5d                   	pop    ebp
c0000ca3:	c3                   	ret    
c0000ca4:	e9 b8 fe ff ff       	jmp    c0000b61 <malloc_init_state>

c0000ca9 <dlfree>:
c0000ca9:	57                   	push   edi
c0000caa:	56                   	push   esi
c0000cab:	53                   	push   ebx
c0000cac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cb0:	85 db                	test   ebx,ebx
c0000cb2:	0f 84 e2 00 00 00    	je     c0000d9a <dlfree+0xf1>
c0000cb8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cbb:	8b 0d c0 fd 01 c0    	mov    ecx,DWORD PTR ds:0xc001fdc0
c0000cc1:	89 f0                	mov    eax,esi
c0000cc3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cc6:	83 e0 fc             	and    eax,0xfffffffc
c0000cc9:	39 c1                	cmp    ecx,eax
c0000ccb:	72 24                	jb     c0000cf1 <dlfree+0x48>
c0000ccd:	83 c9 03             	or     ecx,0x3
c0000cd0:	c1 e8 03             	shr    eax,0x3
c0000cd3:	89 0d c0 fd 01 c0    	mov    DWORD PTR ds:0xc001fdc0,ecx
c0000cd9:	83 e8 02             	sub    eax,0x2
c0000cdc:	8b 0c 85 c4 fd 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe023c]
c0000ce3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ce5:	89 14 85 c4 fd 01 c0 	mov    DWORD PTR [eax*4-0x3ffe023c],edx
c0000cec:	e9 a9 00 00 00       	jmp    c0000d9a <dlfree+0xf1>
c0000cf1:	83 e6 02             	and    esi,0x2
c0000cf4:	0f 85 a0 00 00 00    	jne    c0000d9a <dlfree+0xf1>
c0000cfa:	83 c9 01             	or     ecx,0x1
c0000cfd:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d00:	89 0d c0 fd 01 c0    	mov    DWORD PTR ds:0xc001fdc0,ecx
c0000d06:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d09:	83 e1 fc             	and    ecx,0xfffffffc
c0000d0c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d10:	75 13                	jne    c0000d25 <dlfree+0x7c>
c0000d12:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d15:	29 da                	sub    edx,ebx
c0000d17:	01 d8                	add    eax,ebx
c0000d19:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d1c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d1f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d22:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d25:	39 35 ec fd 01 c0    	cmp    DWORD PTR ds:0xc001fdec,esi
c0000d2b:	74 40                	je     c0000d6d <dlfree+0xc4>
c0000d2d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d31:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d34:	80 e3 01             	and    bl,0x1
c0000d37:	75 0e                	jne    c0000d47 <dlfree+0x9e>
c0000d39:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d3c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d3f:	01 c8                	add    eax,ecx
c0000d41:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d44:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d47:	8b 0d fc fd 01 c0    	mov    ecx,DWORD PTR ds:0xc001fdfc
c0000d4d:	c7 42 0c f4 fd 01 c0 	mov    DWORD PTR [edx+0xc],0xc001fdf4
c0000d54:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d57:	89 15 fc fd 01 c0    	mov    DWORD PTR ds:0xc001fdfc,edx
c0000d5d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d60:	89 c1                	mov    ecx,eax
c0000d62:	83 c9 01             	or     ecx,0x1
c0000d65:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d68:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d6b:	eb 10                	jmp    c0000d7d <dlfree+0xd4>
c0000d6d:	01 c8                	add    eax,ecx
c0000d6f:	89 c1                	mov    ecx,eax
c0000d71:	83 c9 01             	or     ecx,0x1
c0000d74:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d77:	89 15 ec fd 01 c0    	mov    DWORD PTR ds:0xc001fdec,edx
c0000d7d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d82:	76 16                	jbe    c0000d9a <dlfree+0xf1>
c0000d84:	f6 05 c0 fd 01 c0 02 	test   BYTE PTR ds:0xc001fdc0,0x2
c0000d8b:	74 0d                	je     c0000d9a <dlfree+0xf1>
c0000d8d:	5b                   	pop    ebx
c0000d8e:	b8 c0 fd 01 c0       	mov    eax,0xc001fdc0
c0000d93:	5e                   	pop    esi
c0000d94:	5f                   	pop    edi
c0000d95:	e9 28 fe ff ff       	jmp    c0000bc2 <malloc_consolidate>
c0000d9a:	5b                   	pop    ebx
c0000d9b:	5e                   	pop    esi
c0000d9c:	5f                   	pop    edi
c0000d9d:	c3                   	ret    

c0000d9e <sYSMALLOc>:
c0000d9e:	55                   	push   ebp
c0000d9f:	57                   	push   edi
c0000da0:	56                   	push   esi
c0000da1:	53                   	push   ebx
c0000da2:	89 d3                	mov    ebx,edx
c0000da4:	83 ec 2c             	sub    esp,0x2c
c0000da7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dab:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000db1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000db4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000db7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dbb:	74 1f                	je     c0000ddc <sYSMALLOc+0x3e>
c0000dbd:	89 d8                	mov    eax,ebx
c0000dbf:	e8 fe fd ff ff       	call   c0000bc2 <malloc_consolidate>
c0000dc4:	83 ec 0c             	sub    esp,0xc
c0000dc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dcb:	83 e8 07             	sub    eax,0x7
c0000dce:	50                   	push   eax
c0000dcf:	e8 30 02 00 00       	call   c0001004 <dlmalloc>
c0000dd4:	83 c4 10             	add    esp,0x10
c0000dd7:	e9 20 02 00 00       	jmp    c0000ffc <sYSMALLOc+0x25e>
c0000ddc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ddf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000de5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000de8:	83 e0 fc             	and    eax,0xfffffffc
c0000deb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000def:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000df3:	83 c0 10             	add    eax,0x10
c0000df6:	01 c1                	add    ecx,eax
c0000df8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dfc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e03:	74 04                	je     c0000e09 <sYSMALLOc+0x6b>
c0000e05:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e09:	f7 da                	neg    edx
c0000e0b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e0f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e13:	21 d1                	and    ecx,edx
c0000e15:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e19:	7f 07                	jg     c0000e22 <sYSMALLOc+0x84>
c0000e1b:	31 c0                	xor    eax,eax
c0000e1d:	e9 da 01 00 00       	jmp    c0000ffc <sYSMALLOc+0x25e>
c0000e22:	83 ec 0c             	sub    esp,0xc
c0000e25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e29:	e8 72 68 00 00       	call   c00076a0 <sbrk>
c0000e2e:	83 c4 10             	add    esp,0x10
c0000e31:	89 c6                	mov    esi,eax
c0000e33:	83 f8 ff             	cmp    eax,0xffffffff
c0000e36:	74 e3                	je     c0000e1b <sYSMALLOc+0x7d>
c0000e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e3c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e40:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e43:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e49:	39 f1                	cmp    ecx,esi
c0000e4b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e51:	75 13                	jne    c0000e66 <sYSMALLOc+0xc8>
c0000e53:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e57:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e5b:	83 c8 01             	or     eax,0x1
c0000e5e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e61:	e9 3e 01 00 00       	jmp    c0000fa4 <sYSMALLOc+0x206>
c0000e66:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e6c:	88 d0                	mov    al,dl
c0000e6e:	83 e0 01             	and    eax,0x1
c0000e71:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e76:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e7a:	0f 95 c0             	setne  al
c0000e7d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e81:	39 f1                	cmp    ecx,esi
c0000e83:	76 12                	jbe    c0000e97 <sYSMALLOc+0xf9>
c0000e85:	84 c0                	test   al,al
c0000e87:	74 0e                	je     c0000e97 <sYSMALLOc+0xf9>
c0000e89:	83 e2 fe             	and    edx,0xfffffffe
c0000e8c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e92:	e9 83 00 00 00       	jmp    c0000f1a <sYSMALLOc+0x17c>
c0000e97:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e9c:	74 7c                	je     c0000f1a <sYSMALLOc+0x17c>
c0000e9e:	84 c0                	test   al,al
c0000ea0:	74 0c                	je     c0000eae <sYSMALLOc+0x110>
c0000ea2:	89 f0                	mov    eax,esi
c0000ea4:	29 c8                	sub    eax,ecx
c0000ea6:	01 e8                	add    eax,ebp
c0000ea8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eae:	89 f2                	mov    edx,esi
c0000eb0:	83 e2 07             	and    edx,0x7
c0000eb3:	74 0c                	je     c0000ec1 <sYSMALLOc+0x123>
c0000eb5:	b8 08 00 00 00       	mov    eax,0x8
c0000eba:	29 d0                	sub    eax,edx
c0000ebc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ebf:	eb 04                	jmp    c0000ec5 <sYSMALLOc+0x127>
c0000ec1:	89 f5                	mov    ebp,esi
c0000ec3:	31 c0                	xor    eax,eax
c0000ec5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ec9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ecd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ed1:	01 c1                	add    ecx,eax
c0000ed3:	83 ec 0c             	sub    esp,0xc
c0000ed6:	01 f1                	add    ecx,esi
c0000ed8:	01 ca                	add    edx,ecx
c0000eda:	29 c8                	sub    eax,ecx
c0000edc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ee0:	01 c2                	add    edx,eax
c0000ee2:	52                   	push   edx
c0000ee3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ee7:	e8 b4 67 00 00       	call   c00076a0 <sbrk>
c0000eec:	83 c4 10             	add    esp,0x10
c0000eef:	83 f8 ff             	cmp    eax,0xffffffff
c0000ef2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef6:	75 0f                	jne    c0000f07 <sYSMALLOc+0x169>
c0000ef8:	83 ec 0c             	sub    esp,0xc
c0000efb:	6a 00                	push   0x0
c0000efd:	e8 9e 67 00 00       	call   c00076a0 <sbrk>
c0000f02:	83 c4 10             	add    esp,0x10
c0000f05:	eb 30                	jmp    c0000f37 <sYSMALLOc+0x199>
c0000f07:	39 c6                	cmp    esi,eax
c0000f09:	76 33                	jbe    c0000f3e <sYSMALLOc+0x1a0>
c0000f0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f0f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f16:	01 f0                	add    eax,esi
c0000f18:	eb 1d                	jmp    c0000f37 <sYSMALLOc+0x199>
c0000f1a:	83 ec 0c             	sub    esp,0xc
c0000f1d:	89 f5                	mov    ebp,esi
c0000f1f:	6a 00                	push   0x0
c0000f21:	e8 7a 67 00 00       	call   c00076a0 <sbrk>
c0000f26:	89 c2                	mov    edx,eax
c0000f28:	29 f2                	sub    edx,esi
c0000f2a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f2e:	83 c4 10             	add    esp,0x10
c0000f31:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f37:	31 d2                	xor    edx,edx
c0000f39:	83 f8 ff             	cmp    eax,0xffffffff
c0000f3c:	74 66                	je     c0000fa4 <sYSMALLOc+0x206>
c0000f3e:	29 e8                	sub    eax,ebp
c0000f40:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f43:	01 d0                	add    eax,edx
c0000f45:	83 c8 01             	or     eax,0x1
c0000f48:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f4b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f51:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f56:	74 4c                	je     c0000fa4 <sYSMALLOc+0x206>
c0000f58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f5c:	83 e8 0c             	sub    eax,0xc
c0000f5f:	83 e0 f8             	and    eax,0xfffffff8
c0000f62:	89 c2                	mov    edx,eax
c0000f64:	83 ca 01             	or     edx,0x1
c0000f67:	83 f8 0f             	cmp    eax,0xf
c0000f6a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f6d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f75:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f7d:	76 25                	jbe    c0000fa4 <sYSMALLOc+0x206>
c0000f7f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f85:	83 ec 0c             	sub    esp,0xc
c0000f88:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f92:	83 c7 08             	add    edi,0x8
c0000f95:	57                   	push   edi
c0000f96:	e8 0e fd ff ff       	call   c0000ca9 <dlfree>
c0000f9b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fa1:	83 c4 10             	add    esp,0x10
c0000fa4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000faa:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fb0:	73 06                	jae    c0000fb8 <sYSMALLOc+0x21a>
c0000fb2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fb8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fbe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fc4:	73 06                	jae    c0000fcc <sYSMALLOc+0x22e>
c0000fc6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fcc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fcf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fd2:	83 e2 fc             	and    edx,0xfffffffc
c0000fd5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fd9:	0f 82 3c fe ff ff    	jb     c0000e1b <sYSMALLOc+0x7d>
c0000fdf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fe3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fe6:	29 fa                	sub    edx,edi
c0000fe8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000feb:	83 ca 01             	or     edx,0x1
c0000fee:	89 fb                	mov    ebx,edi
c0000ff0:	83 c0 08             	add    eax,0x8
c0000ff3:	83 cb 01             	or     ebx,0x1
c0000ff6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ff9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ffc:	83 c4 2c             	add    esp,0x2c
c0000fff:	5b                   	pop    ebx
c0001000:	5e                   	pop    esi
c0001001:	5f                   	pop    edi
c0001002:	5d                   	pop    ebp
c0001003:	c3                   	ret    

c0001004 <dlmalloc>:
c0001004:	55                   	push   ebp
c0001005:	57                   	push   edi
c0001006:	56                   	push   esi
c0001007:	53                   	push   ebx
c0001008:	83 ec 1c             	sub    esp,0x1c
c000100b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000100f:	83 f8 df             	cmp    eax,0xffffffdf
c0001012:	0f 87 70 03 00 00    	ja     c0001388 <dlmalloc+0x384>
c0001018:	83 c0 0b             	add    eax,0xb
c000101b:	be 10 00 00 00       	mov    esi,0x10
c0001020:	83 f8 0f             	cmp    eax,0xf
c0001023:	76 05                	jbe    c000102a <dlmalloc+0x26>
c0001025:	83 e0 f8             	and    eax,0xfffffff8
c0001028:	89 c6                	mov    esi,eax
c000102a:	8b 3d c0 fd 01 c0    	mov    edi,DWORD PTR ds:0xc001fdc0
c0001030:	f7 c7 01 00 00 00    	test   edi,0x1
c0001036:	75 17                	jne    c000104f <dlmalloc+0x4b>
c0001038:	85 ff                	test   edi,edi
c000103a:	0f 85 05 03 00 00    	jne    c0001345 <dlmalloc+0x341>
c0001040:	b8 c0 fd 01 c0       	mov    eax,0xc001fdc0
c0001045:	e8 78 fb ff ff       	call   c0000bc2 <malloc_consolidate>
c000104a:	e9 f6 02 00 00       	jmp    c0001345 <dlmalloc+0x341>
c000104f:	39 f7                	cmp    edi,esi
c0001051:	72 1f                	jb     c0001072 <dlmalloc+0x6e>
c0001053:	89 f2                	mov    edx,esi
c0001055:	c1 ea 03             	shr    edx,0x3
c0001058:	83 ea 02             	sub    edx,0x2
c000105b:	8b 04 95 c4 fd 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe023c]
c0001062:	85 c0                	test   eax,eax
c0001064:	74 0c                	je     c0001072 <dlmalloc+0x6e>
c0001066:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001069:	89 0c 95 c4 fd 01 c0 	mov    DWORD PTR [edx*4-0x3ffe023c],ecx
c0001070:	eb 30                	jmp    c00010a2 <dlmalloc+0x9e>
c0001072:	89 f0                	mov    eax,esi
c0001074:	81 fe ff 00 00 00    	cmp    esi,0xff
c000107a:	77 2e                	ja     c00010aa <dlmalloc+0xa6>
c000107c:	c1 e8 03             	shr    eax,0x3
c000107f:	8d 14 c5 f4 fd 01 c0 	lea    edx,[eax*8-0x3ffe020c]
c0001086:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000108a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000108d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001090:	39 c3                	cmp    ebx,eax
c0001092:	74 2e                	je     c00010c2 <dlmalloc+0xbe>
c0001094:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001097:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000109c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000109f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010a2:	83 c0 08             	add    eax,0x8
c00010a5:	e9 e0 02 00 00       	jmp    c000138a <dlmalloc+0x386>
c00010aa:	e8 8f fa ff ff       	call   c0000b3e <largebin_index>
c00010af:	83 e7 02             	and    edi,0x2
c00010b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010b6:	74 0a                	je     c00010c2 <dlmalloc+0xbe>
c00010b8:	b8 c0 fd 01 c0       	mov    eax,0xc001fdc0
c00010bd:	e8 00 fb ff ff       	call   c0000bc2 <malloc_consolidate>
c00010c2:	8d 46 10             	lea    eax,[esi+0x10]
c00010c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010c9:	8b 1d 00 fe 01 c0    	mov    ebx,DWORD PTR ds:0xc001fe00
c00010cf:	81 fb f4 fd 01 c0    	cmp    ebx,0xc001fdf4
c00010d5:	0f 84 13 01 00 00    	je     c00011ee <dlmalloc+0x1ea>
c00010db:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010de:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010e1:	83 e7 fc             	and    edi,0xfffffffc
c00010e4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010ea:	77 4c                	ja     c0001138 <dlmalloc+0x134>
c00010ec:	3d f4 fd 01 c0       	cmp    eax,0xc001fdf4
c00010f1:	75 45                	jne    c0001138 <dlmalloc+0x134>
c00010f3:	39 1d f0 fd 01 c0    	cmp    DWORD PTR ds:0xc001fdf0,ebx
c00010f9:	75 3d                	jne    c0001138 <dlmalloc+0x134>
c00010fb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ff:	73 37                	jae    c0001138 <dlmalloc+0x134>
c0001101:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001104:	89 fa                	mov    edx,edi
c0001106:	a3 fc fd 01 c0       	mov    ds:0xc001fdfc,eax
c000110b:	a3 00 fe 01 c0       	mov    ds:0xc001fe00,eax
c0001110:	a3 f0 fd 01 c0       	mov    ds:0xc001fdf0,eax
c0001115:	29 f2                	sub    edx,esi
c0001117:	c7 40 08 f4 fd 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fdf4
c000111e:	c7 40 0c f4 fd 01 c0 	mov    DWORD PTR [eax+0xc],0xc001fdf4
c0001125:	83 ce 01             	or     esi,0x1
c0001128:	89 d1                	mov    ecx,edx
c000112a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000112d:	83 c9 01             	or     ecx,0x1
c0001130:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001133:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001136:	eb 15                	jmp    c000114d <dlmalloc+0x149>
c0001138:	a3 00 fe 01 c0       	mov    ds:0xc001fe00,eax
c000113d:	39 fe                	cmp    esi,edi
c000113f:	c7 40 08 f4 fd 01 c0 	mov    DWORD PTR [eax+0x8],0xc001fdf4
c0001146:	75 0d                	jne    c0001155 <dlmalloc+0x151>
c0001148:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000114d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001150:	e9 35 02 00 00       	jmp    c000138a <dlmalloc+0x386>
c0001155:	89 f8                	mov    eax,edi
c0001157:	81 ff ff 00 00 00    	cmp    edi,0xff
c000115d:	77 19                	ja     c0001178 <dlmalloc+0x174>
c000115f:	c1 e8 03             	shr    eax,0x3
c0001162:	8d 14 00             	lea    edx,[eax+eax*1]
c0001165:	83 c2 0d             	add    edx,0xd
c0001168:	8d 2c 95 b8 fd 01 c0 	lea    ebp,[edx*4-0x3ffe0248]
c000116f:	8b 14 95 c0 fd 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0240]
c0001176:	eb 46                	jmp    c00011be <dlmalloc+0x1ba>
c0001178:	e8 c1 f9 ff ff       	call   c0000b3e <largebin_index>
c000117d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001180:	83 c2 0d             	add    edx,0xd
c0001183:	8d 0c 95 c0 fd 01 c0 	lea    ecx,[edx*4-0x3ffe0240]
c000118a:	8b 14 95 c0 fd 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0240]
c0001191:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001194:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001198:	89 d5                	mov    ebp,edx
c000119a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000119e:	74 1e                	je     c00011be <dlmalloc+0x1ba>
c00011a0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011a3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011a6:	77 12                	ja     c00011ba <dlmalloc+0x1b6>
c00011a8:	83 cf 01             	or     edi,0x1
c00011ab:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011ae:	76 05                	jbe    c00011b5 <dlmalloc+0x1b1>
c00011b0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011b3:	eb f6                	jmp    c00011ab <dlmalloc+0x1a7>
c00011b5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011b8:	eb 04                	jmp    c00011be <dlmalloc+0x1ba>
c00011ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011be:	89 c7                	mov    edi,eax
c00011c0:	88 c1                	mov    cl,al
c00011c2:	c1 ff 05             	sar    edi,0x5
c00011c5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011c9:	bf 01 00 00 00       	mov    edi,0x1
c00011ce:	d3 e7                	shl    edi,cl
c00011d0:	89 f8                	mov    eax,edi
c00011d2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011d6:	09 04 bd f4 00 02 c0 	or     DWORD PTR [edi*4-0x3ffdff0c],eax
c00011dd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011e0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011e3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011e6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011e9:	e9 db fe ff ff       	jmp    c00010c9 <dlmalloc+0xc5>
c00011ee:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011f4:	76 78                	jbe    c000126e <dlmalloc+0x26a>
c00011f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011fa:	8d 04 c5 f4 fd 01 c0 	lea    eax,[eax*8-0x3ffe020c]
c0001201:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001204:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001207:	39 ca                	cmp    edx,ecx
c0001209:	74 63                	je     c000126e <dlmalloc+0x26a>
c000120b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000120e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001211:	83 e3 fc             	and    ebx,0xfffffffc
c0001214:	39 de                	cmp    esi,ebx
c0001216:	77 52                	ja     c000126a <dlmalloc+0x266>
c0001218:	89 df                	mov    edi,ebx
c000121a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000121d:	29 f7                	sub    edi,esi
c000121f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001222:	01 d3                	add    ebx,edx
c0001224:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001227:	83 ff 0f             	cmp    edi,0xf
c000122a:	8d 42 08             	lea    eax,[edx+0x8]
c000122d:	77 09                	ja     c0001238 <dlmalloc+0x234>
c000122f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001233:	e9 52 01 00 00       	jmp    c000138a <dlmalloc+0x386>
c0001238:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000123b:	83 ce 01             	or     esi,0x1
c000123e:	89 0d fc fd 01 c0    	mov    DWORD PTR ds:0xc001fdfc,ecx
c0001244:	89 0d 00 fe 01 c0    	mov    DWORD PTR ds:0xc001fe00,ecx
c000124a:	c7 41 08 f4 fd 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001fdf4
c0001251:	c7 41 0c f4 fd 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001fdf4
c0001258:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000125b:	89 fa                	mov    edx,edi
c000125d:	83 ca 01             	or     edx,0x1
c0001260:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001263:	89 3b                	mov    DWORD PTR [ebx],edi
c0001265:	e9 20 01 00 00       	jmp    c000138a <dlmalloc+0x386>
c000126a:	89 c2                	mov    edx,eax
c000126c:	eb 99                	jmp    c0001207 <dlmalloc+0x203>
c000126e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001272:	b8 01 00 00 00       	mov    eax,0x1
c0001277:	41                   	inc    ecx
c0001278:	89 cb                	mov    ebx,ecx
c000127a:	8d 14 cd ec fd 01 c0 	lea    edx,[ecx*8-0x3ffe0214]
c0001281:	c1 eb 05             	shr    ebx,0x5
c0001284:	d3 e0                	shl    eax,cl
c0001286:	8b 3c 9d f4 00 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdff0c]
c000128d:	39 f8                	cmp    eax,edi
c000128f:	77 04                	ja     c0001295 <dlmalloc+0x291>
c0001291:	85 c0                	test   eax,eax
c0001293:	75 26                	jne    c00012bb <dlmalloc+0x2b7>
c0001295:	43                   	inc    ebx
c0001296:	83 fb 02             	cmp    ebx,0x2
c0001299:	0f 87 a6 00 00 00    	ja     c0001345 <dlmalloc+0x341>
c000129f:	8b 3c 9d f4 00 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdff0c]
c00012a6:	85 ff                	test   edi,edi
c00012a8:	74 eb                	je     c0001295 <dlmalloc+0x291>
c00012aa:	89 d8                	mov    eax,ebx
c00012ac:	c1 e0 06             	shl    eax,0x6
c00012af:	8d 14 85 ec fd 01 c0 	lea    edx,[eax*4-0x3ffe0214]
c00012b6:	b8 01 00 00 00       	mov    eax,0x1
c00012bb:	85 f8                	test   eax,edi
c00012bd:	75 07                	jne    c00012c6 <dlmalloc+0x2c2>
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	01 c0                	add    eax,eax
c00012c4:	eb f5                	jmp    c00012bb <dlmalloc+0x2b7>
c00012c6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012c9:	39 ca                	cmp    edx,ecx
c00012cb:	75 14                	jne    c00012e1 <dlmalloc+0x2dd>
c00012cd:	89 c1                	mov    ecx,eax
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	f7 d1                	not    ecx
c00012d4:	01 c0                	add    eax,eax
c00012d6:	21 cf                	and    edi,ecx
c00012d8:	89 3c 9d f4 00 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdff0c],edi
c00012df:	eb ac                	jmp    c000128d <dlmalloc+0x289>
c00012e1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012e4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012e7:	83 e0 fc             	and    eax,0xfffffffc
c00012ea:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012ed:	89 c3                	mov    ebx,eax
c00012ef:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012f2:	29 f3                	sub    ebx,esi
c00012f4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012f7:	83 fb 0f             	cmp    ebx,0xf
c00012fa:	8d 41 08             	lea    eax,[ecx+0x8]
c00012fd:	77 09                	ja     c0001308 <dlmalloc+0x304>
c00012ff:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001303:	e9 82 00 00 00       	jmp    c000138a <dlmalloc+0x386>
c0001308:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000130b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001311:	89 3d fc fd 01 c0    	mov    DWORD PTR ds:0xc001fdfc,edi
c0001317:	89 3d 00 fe 01 c0    	mov    DWORD PTR ds:0xc001fe00,edi
c000131d:	c7 47 08 f4 fd 01 c0 	mov    DWORD PTR [edi+0x8],0xc001fdf4
c0001324:	c7 47 0c f4 fd 01 c0 	mov    DWORD PTR [edi+0xc],0xc001fdf4
c000132b:	77 06                	ja     c0001333 <dlmalloc+0x32f>
c000132d:	89 3d f0 fd 01 c0    	mov    DWORD PTR ds:0xc001fdf0,edi
c0001333:	83 ce 01             	or     esi,0x1
c0001336:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001339:	89 d9                	mov    ecx,ebx
c000133b:	83 c9 01             	or     ecx,0x1
c000133e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001341:	89 1a                	mov    DWORD PTR [edx],ebx
c0001343:	eb 45                	jmp    c000138a <dlmalloc+0x386>
c0001345:	a1 ec fd 01 c0       	mov    eax,ds:0xc001fdec
c000134a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000134d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001350:	83 e2 fc             	and    edx,0xfffffffc
c0001353:	39 d1                	cmp    ecx,edx
c0001355:	77 1e                	ja     c0001375 <dlmalloc+0x371>
c0001357:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000135a:	89 f3                	mov    ebx,esi
c000135c:	89 0d ec fd 01 c0    	mov    DWORD PTR ds:0xc001fdec,ecx
c0001362:	83 cb 01             	or     ebx,0x1
c0001365:	29 f2                	sub    edx,esi
c0001367:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000136a:	83 ca 01             	or     edx,0x1
c000136d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001370:	e9 2d fd ff ff       	jmp    c00010a2 <dlmalloc+0x9e>
c0001375:	83 c4 1c             	add    esp,0x1c
c0001378:	89 f0                	mov    eax,esi
c000137a:	5b                   	pop    ebx
c000137b:	ba c0 fd 01 c0       	mov    edx,0xc001fdc0
c0001380:	5e                   	pop    esi
c0001381:	5f                   	pop    edi
c0001382:	5d                   	pop    ebp
c0001383:	e9 16 fa ff ff       	jmp    c0000d9e <sYSMALLOc>
c0001388:	31 c0                	xor    eax,eax
c000138a:	83 c4 1c             	add    esp,0x1c
c000138d:	5b                   	pop    ebx
c000138e:	5e                   	pop    esi
c000138f:	5f                   	pop    edi
c0001390:	5d                   	pop    ebp
c0001391:	c3                   	ret    

c0001392 <iALLOc>:
c0001392:	55                   	push   ebp
c0001393:	89 c5                	mov    ebp,eax
c0001395:	57                   	push   edi
c0001396:	56                   	push   esi
c0001397:	53                   	push   ebx
c0001398:	83 ec 2c             	sub    esp,0x2c
c000139b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000139f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013a7:	83 3d c0 fd 01 c0 00 	cmp    DWORD PTR ds:0xc001fdc0,0x0
c00013ae:	75 12                	jne    c00013c2 <iALLOc+0x30>
c00013b0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013b4:	b8 c0 fd 01 c0       	mov    eax,0xc001fdc0
c00013b9:	e8 04 f8 ff ff       	call   c0000bc2 <malloc_consolidate>
c00013be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013c2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013c7:	74 12                	je     c00013db <iALLOc+0x49>
c00013c9:	85 ed                	test   ebp,ebp
c00013cb:	0f 84 64 01 00 00    	je     c0001535 <iALLOc+0x1a3>
c00013d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013d9:	eb 33                	jmp    c000140e <iALLOc+0x7c>
c00013db:	85 ed                	test   ebp,ebp
c00013dd:	75 14                	jne    c00013f3 <iALLOc+0x61>
c00013df:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013e7:	83 c4 2c             	add    esp,0x2c
c00013ea:	5b                   	pop    ebx
c00013eb:	5e                   	pop    esi
c00013ec:	5f                   	pop    edi
c00013ed:	5d                   	pop    ebp
c00013ee:	e9 11 fc ff ff       	jmp    c0001004 <dlmalloc>
c00013f3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013fa:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001402:	83 f8 0f             	cmp    eax,0xf
c0001405:	76 07                	jbe    c000140e <iALLOc+0x7c>
c0001407:	83 e0 f8             	and    eax,0xfffffff8
c000140a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000140e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001413:	75 09                	jne    c000141e <iALLOc+0x8c>
c0001415:	89 d0                	mov    eax,edx
c0001417:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000141a:	31 f6                	xor    esi,esi
c000141c:	eb 3b                	jmp    c0001459 <iALLOc+0xc7>
c000141e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001420:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001428:	83 c0 0b             	add    eax,0xb
c000142b:	83 f8 0f             	cmp    eax,0xf
c000142e:	76 07                	jbe    c0001437 <iALLOc+0xa5>
c0001430:	83 e0 f8             	and    eax,0xfffffff8
c0001433:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001437:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000143b:	0f af f5             	imul   esi,ebp
c000143e:	eb 25                	jmp    c0001465 <iALLOc+0xd3>
c0001440:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001442:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001445:	bb 10 00 00 00       	mov    ebx,0x10
c000144a:	83 f9 0f             	cmp    ecx,0xf
c000144d:	76 05                	jbe    c0001454 <iALLOc+0xc2>
c000144f:	83 e1 f8             	and    ecx,0xfffffff8
c0001452:	89 cb                	mov    ebx,ecx
c0001454:	01 de                	add    esi,ebx
c0001456:	83 c0 04             	add    eax,0x4
c0001459:	39 c7                	cmp    edi,eax
c000145b:	75 e3                	jne    c0001440 <iALLOc+0xae>
c000145d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001465:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001469:	8b 1d 14 01 02 c0    	mov    ebx,DWORD PTR ds:0xc0020114
c000146f:	83 ec 0c             	sub    esp,0xc
c0001472:	c7 05 14 01 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020114,0x0
c000147c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001480:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001484:	50                   	push   eax
c0001485:	e8 7a fb ff ff       	call   c0001004 <dlmalloc>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	89 1d 14 01 02 c0    	mov    DWORD PTR ds:0xc0020114,ebx
c0001493:	85 c0                	test   eax,eax
c0001495:	0f 84 92 00 00 00    	je     c000152d <iALLOc+0x19b>
c000149b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000149e:	8d 78 f8             	lea    edi,[eax-0x8]
c00014a1:	83 e3 fc             	and    ebx,0xfffffffc
c00014a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014a8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014ad:	74 1e                	je     c00014cd <iALLOc+0x13b>
c00014af:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014b3:	89 d9                	mov    ecx,ebx
c00014b5:	52                   	push   edx
c00014b6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ba:	83 e9 04             	sub    ecx,0x4
c00014bd:	51                   	push   ecx
c00014be:	6a 00                	push   0x0
c00014c0:	50                   	push   eax
c00014c1:	e8 1a f0 ff ff       	call   c00004e0 <memset>
c00014c6:	83 c4 10             	add    esp,0x10
c00014c9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014cd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014d2:	75 14                	jne    c00014e8 <iALLOc+0x156>
c00014d4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014d7:	29 f3                	sub    ebx,esi
c00014d9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014dc:	83 cb 01             	or     ebx,0x1
c00014df:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014e3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014e6:	89 f3                	mov    ebx,esi
c00014e8:	31 c0                	xor    eax,eax
c00014ea:	4d                   	dec    ebp
c00014eb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014ee:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014f2:	39 c5                	cmp    ebp,eax
c00014f4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014f7:	74 2c                	je     c0001525 <iALLOc+0x193>
c00014f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014fd:	85 c9                	test   ecx,ecx
c00014ff:	75 15                	jne    c0001516 <iALLOc+0x184>
c0001501:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001504:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001507:	b9 10 00 00 00       	mov    ecx,0x10
c000150c:	83 fe 0f             	cmp    esi,0xf
c000150f:	76 05                	jbe    c0001516 <iALLOc+0x184>
c0001511:	83 e6 f8             	and    esi,0xfffffff8
c0001514:	89 f1                	mov    ecx,esi
c0001516:	89 ce                	mov    esi,ecx
c0001518:	29 cb                	sub    ebx,ecx
c000151a:	83 ce 01             	or     esi,0x1
c000151d:	40                   	inc    eax
c000151e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001521:	01 cf                	add    edi,ecx
c0001523:	eb c6                	jmp    c00014eb <iALLOc+0x159>
c0001525:	83 cb 01             	or     ebx,0x1
c0001528:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000152b:	eb 08                	jmp    c0001535 <iALLOc+0x1a3>
c000152d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001535:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001539:	83 c4 2c             	add    esp,0x2c
c000153c:	5b                   	pop    ebx
c000153d:	5e                   	pop    esi
c000153e:	5f                   	pop    edi
c000153f:	5d                   	pop    ebp
c0001540:	c3                   	ret    

c0001541 <dlrealloc>:
c0001541:	55                   	push   ebp
c0001542:	57                   	push   edi
c0001543:	56                   	push   esi
c0001544:	53                   	push   ebx
c0001545:	83 ec 1c             	sub    esp,0x1c
c0001548:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000154c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001550:	85 db                	test   ebx,ebx
c0001552:	75 10                	jne    c0001564 <dlrealloc+0x23>
c0001554:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001558:	83 c4 1c             	add    esp,0x1c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	e9 a0 fa ff ff       	jmp    c0001004 <dlmalloc>
c0001564:	83 f8 df             	cmp    eax,0xffffffdf
c0001567:	76 07                	jbe    c0001570 <dlrealloc+0x2f>
c0001569:	31 db                	xor    ebx,ebx
c000156b:	e9 6a 01 00 00       	jmp    c00016da <dlrealloc+0x199>
c0001570:	83 c0 0b             	add    eax,0xb
c0001573:	bd 10 00 00 00       	mov    ebp,0x10
c0001578:	83 f8 0f             	cmp    eax,0xf
c000157b:	76 05                	jbe    c0001582 <dlrealloc+0x41>
c000157d:	83 e0 f8             	and    eax,0xfffffff8
c0001580:	89 c5                	mov    ebp,eax
c0001582:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001585:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001588:	89 c6                	mov    esi,eax
c000158a:	83 e6 fc             	and    esi,0xfffffffc
c000158d:	a8 02                	test   al,0x2
c000158f:	75 d8                	jne    c0001569 <dlrealloc+0x28>
c0001591:	39 f5                	cmp    ebp,esi
c0001593:	0f 86 04 01 00 00    	jbe    c000169d <dlrealloc+0x15c>
c0001599:	8d 14 37             	lea    edx,[edi+esi*1]
c000159c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000159f:	39 15 ec fd 01 c0    	cmp    DWORD PTR ds:0xc001fdec,edx
c00015a5:	75 33                	jne    c00015da <dlrealloc+0x99>
c00015a7:	83 e1 fc             	and    ecx,0xfffffffc
c00015aa:	01 f1                	add    ecx,esi
c00015ac:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015b0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015b3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015b7:	77 49                	ja     c0001602 <dlrealloc+0xc1>
c00015b9:	01 ef                	add    edi,ebp
c00015bb:	83 e0 01             	and    eax,0x1
c00015be:	09 e8                	or     eax,ebp
c00015c0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015c3:	89 3d ec fd 01 c0    	mov    DWORD PTR ds:0xc001fdec,edi
c00015c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015cd:	29 e8                	sub    eax,ebp
c00015cf:	83 c8 01             	or     eax,0x1
c00015d2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015d5:	e9 00 01 00 00       	jmp    c00016da <dlrealloc+0x199>
c00015da:	89 c8                	mov    eax,ecx
c00015dc:	83 e0 fe             	and    eax,0xfffffffe
c00015df:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015e4:	75 1c                	jne    c0001602 <dlrealloc+0xc1>
c00015e6:	83 e1 fc             	and    ecx,0xfffffffc
c00015e9:	01 f1                	add    ecx,esi
c00015eb:	39 cd                	cmp    ebp,ecx
c00015ed:	77 13                	ja     c0001602 <dlrealloc+0xc1>
c00015ef:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015f2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015f5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015f8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015fb:	89 ce                	mov    esi,ecx
c00015fd:	e9 9b 00 00 00       	jmp    c000169d <dlrealloc+0x15c>
c0001602:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001606:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001609:	83 ec 0c             	sub    esp,0xc
c000160c:	50                   	push   eax
c000160d:	e8 f2 f9 ff ff       	call   c0001004 <dlmalloc>
c0001612:	83 c4 10             	add    esp,0x10
c0001615:	85 c0                	test   eax,eax
c0001617:	0f 84 4c ff ff ff    	je     c0001569 <dlrealloc+0x28>
c000161d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001620:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001624:	39 ca                	cmp    edx,ecx
c0001626:	75 0a                	jne    c0001632 <dlrealloc+0xf1>
c0001628:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000162b:	83 e0 fc             	and    eax,0xfffffffc
c000162e:	01 c6                	add    esi,eax
c0001630:	eb 6b                	jmp    c000169d <dlrealloc+0x15c>
c0001632:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001635:	83 f9 27             	cmp    ecx,0x27
c0001638:	76 08                	jbe    c0001642 <dlrealloc+0x101>
c000163a:	89 de                	mov    esi,ebx
c000163c:	89 c7                	mov    edi,eax
c000163e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001640:	eb 43                	jmp    c0001685 <dlrealloc+0x144>
c0001642:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001644:	83 f9 13             	cmp    ecx,0x13
c0001647:	89 10                	mov    DWORD PTR [eax],edx
c0001649:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000164c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000164f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001652:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001655:	76 2e                	jbe    c0001685 <dlrealloc+0x144>
c0001657:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000165a:	83 f9 1b             	cmp    ecx,0x1b
c000165d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001660:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001663:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001666:	76 1d                	jbe    c0001685 <dlrealloc+0x144>
c0001668:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000166b:	83 f9 23             	cmp    ecx,0x23
c000166e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001671:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001674:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001677:	76 0c                	jbe    c0001685 <dlrealloc+0x144>
c0001679:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000167c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000167f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001682:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001685:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001689:	83 ec 0c             	sub    esp,0xc
c000168c:	53                   	push   ebx
c000168d:	e8 17 f6 ff ff       	call   c0000ca9 <dlfree>
c0001692:	83 c4 10             	add    esp,0x10
c0001695:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001699:	89 c3                	mov    ebx,eax
c000169b:	eb 3d                	jmp    c00016da <dlrealloc+0x199>
c000169d:	89 f2                	mov    edx,esi
c000169f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016a2:	29 ea                	sub    edx,ebp
c00016a4:	83 e1 01             	and    ecx,0x1
c00016a7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016aa:	83 fa 0f             	cmp    edx,0xf
c00016ad:	77 0b                	ja     c00016ba <dlrealloc+0x179>
c00016af:	09 ce                	or     esi,ecx
c00016b1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016b4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016b8:	eb 20                	jmp    c00016da <dlrealloc+0x199>
c00016ba:	01 ef                	add    edi,ebp
c00016bc:	83 ec 0c             	sub    esp,0xc
c00016bf:	09 cd                	or     ebp,ecx
c00016c1:	83 ca 01             	or     edx,0x1
c00016c4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016c7:	83 c7 08             	add    edi,0x8
c00016ca:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016cd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d1:	57                   	push   edi
c00016d2:	e8 d2 f5 ff ff       	call   c0000ca9 <dlfree>
c00016d7:	83 c4 10             	add    esp,0x10
c00016da:	83 c4 1c             	add    esp,0x1c
c00016dd:	89 d8                	mov    eax,ebx
c00016df:	5b                   	pop    ebx
c00016e0:	5e                   	pop    esi
c00016e1:	5f                   	pop    edi
c00016e2:	5d                   	pop    ebp
c00016e3:	c3                   	ret    

c00016e4 <dlmemalign>:
c00016e4:	55                   	push   ebp
c00016e5:	57                   	push   edi
c00016e6:	56                   	push   esi
c00016e7:	53                   	push   ebx
c00016e8:	83 ec 0c             	sub    esp,0xc
c00016eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016f3:	83 fa 08             	cmp    edx,0x8
c00016f6:	77 10                	ja     c0001708 <dlmemalign+0x24>
c00016f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016fc:	83 c4 0c             	add    esp,0xc
c00016ff:	5b                   	pop    ebx
c0001700:	5e                   	pop    esi
c0001701:	5f                   	pop    edi
c0001702:	5d                   	pop    ebp
c0001703:	e9 fc f8 ff ff       	jmp    c0001004 <dlmalloc>
c0001708:	bf 10 00 00 00       	mov    edi,0x10
c000170d:	83 fa 0f             	cmp    edx,0xf
c0001710:	76 13                	jbe    c0001725 <dlmemalign+0x41>
c0001712:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001715:	85 d1                	test   ecx,edx
c0001717:	75 04                	jne    c000171d <dlmemalign+0x39>
c0001719:	89 d7                	mov    edi,edx
c000171b:	eb 08                	jmp    c0001725 <dlmemalign+0x41>
c000171d:	39 d7                	cmp    edi,edx
c000171f:	73 04                	jae    c0001725 <dlmemalign+0x41>
c0001721:	01 ff                	add    edi,edi
c0001723:	eb f8                	jmp    c000171d <dlmemalign+0x39>
c0001725:	83 f8 df             	cmp    eax,0xffffffdf
c0001728:	76 07                	jbe    c0001731 <dlmemalign+0x4d>
c000172a:	31 c0                	xor    eax,eax
c000172c:	e9 ce 00 00 00       	jmp    c00017ff <dlmemalign+0x11b>
c0001731:	83 c0 0b             	add    eax,0xb
c0001734:	bd 10 00 00 00       	mov    ebp,0x10
c0001739:	83 f8 0f             	cmp    eax,0xf
c000173c:	76 05                	jbe    c0001743 <dlmemalign+0x5f>
c000173e:	83 e0 f8             	and    eax,0xfffffff8
c0001741:	89 c5                	mov    ebp,eax
c0001743:	83 ec 0c             	sub    esp,0xc
c0001746:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000174a:	50                   	push   eax
c000174b:	e8 b4 f8 ff ff       	call   c0001004 <dlmalloc>
c0001750:	83 c4 10             	add    esp,0x10
c0001753:	89 c1                	mov    ecx,eax
c0001755:	85 c0                	test   eax,eax
c0001757:	74 d1                	je     c000172a <dlmemalign+0x46>
c0001759:	31 d2                	xor    edx,edx
c000175b:	8d 70 f8             	lea    esi,[eax-0x8]
c000175e:	f7 f7                	div    edi
c0001760:	85 d2                	test   edx,edx
c0001762:	74 62                	je     c00017c6 <dlmemalign+0xe2>
c0001764:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001768:	89 f8                	mov    eax,edi
c000176a:	f7 d8                	neg    eax
c000176c:	21 c3                	and    ebx,eax
c000176e:	83 eb 08             	sub    ebx,0x8
c0001771:	89 d8                	mov    eax,ebx
c0001773:	29 f0                	sub    eax,esi
c0001775:	83 f8 0f             	cmp    eax,0xf
c0001778:	77 02                	ja     c000177c <dlmemalign+0x98>
c000177a:	01 fb                	add    ebx,edi
c000177c:	89 d8                	mov    eax,ebx
c000177e:	29 f0                	sub    eax,esi
c0001780:	89 c6                	mov    esi,eax
c0001782:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001785:	89 c2                	mov    edx,eax
c0001787:	83 e2 fc             	and    edx,0xfffffffc
c000178a:	29 f2                	sub    edx,esi
c000178c:	a8 02                	test   al,0x2
c000178e:	74 10                	je     c00017a0 <dlmemalign+0xbc>
c0001790:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001793:	83 ca 02             	or     edx,0x2
c0001796:	8d 43 08             	lea    eax,[ebx+0x8]
c0001799:	89 33                	mov    DWORD PTR [ebx],esi
c000179b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000179e:	eb 5f                	jmp    c00017ff <dlmemalign+0x11b>
c00017a0:	83 ec 0c             	sub    esp,0xc
c00017a3:	89 d0                	mov    eax,edx
c00017a5:	83 c8 01             	or     eax,0x1
c00017a8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ab:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017b0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017b3:	83 e0 01             	and    eax,0x1
c00017b6:	09 f0                	or     eax,esi
c00017b8:	89 de                	mov    esi,ebx
c00017ba:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017bd:	51                   	push   ecx
c00017be:	e8 e6 f4 ff ff       	call   c0000ca9 <dlfree>
c00017c3:	83 c4 10             	add    esp,0x10
c00017c6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017c9:	a8 02                	test   al,0x2
c00017cb:	75 2f                	jne    c00017fc <dlmemalign+0x118>
c00017cd:	83 e0 fc             	and    eax,0xfffffffc
c00017d0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017d3:	39 c2                	cmp    edx,eax
c00017d5:	73 25                	jae    c00017fc <dlmemalign+0x118>
c00017d7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017da:	83 ec 0c             	sub    esp,0xc
c00017dd:	29 e8                	sub    eax,ebp
c00017df:	83 c2 08             	add    edx,0x8
c00017e2:	83 c8 01             	or     eax,0x1
c00017e5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017e8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017eb:	83 e0 01             	and    eax,0x1
c00017ee:	09 c5                	or     ebp,eax
c00017f0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017f3:	52                   	push   edx
c00017f4:	e8 b0 f4 ff ff       	call   c0000ca9 <dlfree>
c00017f9:	83 c4 10             	add    esp,0x10
c00017fc:	8d 46 08             	lea    eax,[esi+0x8]
c00017ff:	83 c4 0c             	add    esp,0xc
c0001802:	5b                   	pop    ebx
c0001803:	5e                   	pop    esi
c0001804:	5f                   	pop    edi
c0001805:	5d                   	pop    ebp
c0001806:	c3                   	ret    

c0001807 <dlcalloc>:
c0001807:	53                   	push   ebx
c0001808:	83 ec 14             	sub    esp,0x14
c000180b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000180f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001814:	50                   	push   eax
c0001815:	e8 ea f7 ff ff       	call   c0001004 <dlmalloc>
c000181a:	83 c4 10             	add    esp,0x10
c000181d:	89 c3                	mov    ebx,eax
c000181f:	85 c0                	test   eax,eax
c0001821:	74 77                	je     c000189a <dlcalloc+0x93>
c0001823:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001826:	89 d0                	mov    eax,edx
c0001828:	83 e0 fc             	and    eax,0xfffffffc
c000182b:	80 e2 02             	and    dl,0x2
c000182e:	75 5a                	jne    c000188a <dlcalloc+0x83>
c0001830:	83 e8 04             	sub    eax,0x4
c0001833:	83 f8 27             	cmp    eax,0x27
c0001836:	76 03                	jbe    c000183b <dlcalloc+0x34>
c0001838:	51                   	push   ecx
c0001839:	eb 53                	jmp    c000188e <dlcalloc+0x87>
c000183b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001841:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001848:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000184f:	83 f8 13             	cmp    eax,0x13
c0001852:	76 46                	jbe    c000189a <dlcalloc+0x93>
c0001854:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000185b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001862:	83 f8 1b             	cmp    eax,0x1b
c0001865:	76 33                	jbe    c000189a <dlcalloc+0x93>
c0001867:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000186e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001875:	83 f8 23             	cmp    eax,0x23
c0001878:	76 20                	jbe    c000189a <dlcalloc+0x93>
c000187a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001881:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001888:	eb 10                	jmp    c000189a <dlcalloc+0x93>
c000188a:	83 e8 08             	sub    eax,0x8
c000188d:	52                   	push   edx
c000188e:	50                   	push   eax
c000188f:	6a 00                	push   0x0
c0001891:	53                   	push   ebx
c0001892:	e8 49 ec ff ff       	call   c00004e0 <memset>
c0001897:	83 c4 10             	add    esp,0x10
c000189a:	89 d8                	mov    eax,ebx
c000189c:	83 c4 08             	add    esp,0x8
c000189f:	5b                   	pop    ebx
c00018a0:	c3                   	ret    

c00018a1 <dlcfree>:
c00018a1:	e9 03 f4 ff ff       	jmp    c0000ca9 <dlfree>

c00018a6 <dlindependent_calloc>:
c00018a6:	83 ec 28             	sub    esp,0x28
c00018a9:	b9 03 00 00 00       	mov    ecx,0x3
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	e8 cb fa ff ff       	call   c0001392 <iALLOc>
c00018c7:	83 c4 2c             	add    esp,0x2c
c00018ca:	c3                   	ret    

c00018cb <dlindependent_comalloc>:
c00018cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018d3:	31 c9                	xor    ecx,ecx
c00018d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018dd:	e9 b0 fa ff ff       	jmp    c0001392 <iALLOc>

c00018e2 <dlvalloc>:
c00018e2:	83 ec 0c             	sub    esp,0xc
c00018e5:	83 3d c0 fd 01 c0 00 	cmp    DWORD PTR ds:0xc001fdc0,0x0
c00018ec:	75 0a                	jne    c00018f8 <dlvalloc+0x16>
c00018ee:	b8 c0 fd 01 c0       	mov    eax,0xc001fdc0
c00018f3:	e8 ca f2 ff ff       	call   c0000bc2 <malloc_consolidate>
c00018f8:	50                   	push   eax
c00018f9:	50                   	push   eax
c00018fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018fe:	ff 35 1c 01 02 c0    	push   DWORD PTR ds:0xc002011c
c0001904:	e8 db fd ff ff       	call   c00016e4 <dlmemalign>
c0001909:	83 c4 1c             	add    esp,0x1c
c000190c:	c3                   	ret    

c000190d <dlpvalloc>:
c000190d:	83 ec 0c             	sub    esp,0xc
c0001910:	83 3d c0 fd 01 c0 00 	cmp    DWORD PTR ds:0xc001fdc0,0x0
c0001917:	75 0a                	jne    c0001923 <dlpvalloc+0x16>
c0001919:	b8 c0 fd 01 c0       	mov    eax,0xc001fdc0
c000191e:	e8 9f f2 ff ff       	call   c0000bc2 <malloc_consolidate>
c0001923:	a1 1c 01 02 c0       	mov    eax,ds:0xc002011c
c0001928:	89 c1                	mov    ecx,eax
c000192a:	52                   	push   edx
c000192b:	f7 d9                	neg    ecx
c000192d:	52                   	push   edx
c000192e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001932:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001936:	21 ca                	and    edx,ecx
c0001938:	52                   	push   edx
c0001939:	50                   	push   eax
c000193a:	e8 a5 fd ff ff       	call   c00016e4 <dlmemalign>
c000193f:	83 c4 1c             	add    esp,0x1c
c0001942:	c3                   	ret    

c0001943 <dlmalloc_trim>:
c0001943:	b8 c0 fd 01 c0       	mov    eax,0xc001fdc0
c0001948:	e8 75 f2 ff ff       	call   c0000bc2 <malloc_consolidate>
c000194d:	31 c0                	xor    eax,eax
c000194f:	c3                   	ret    

c0001950 <dlmalloc_usable_size>:
c0001950:	53                   	push   ebx
c0001951:	31 c0                	xor    eax,eax
c0001953:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001957:	85 c9                	test   ecx,ecx
c0001959:	74 24                	je     c000197f <dlmalloc_usable_size+0x2f>
c000195b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000195e:	f6 c2 02             	test   dl,0x2
c0001961:	74 08                	je     c000196b <dlmalloc_usable_size+0x1b>
c0001963:	83 e2 fc             	and    edx,0xfffffffc
c0001966:	8d 42 f8             	lea    eax,[edx-0x8]
c0001969:	eb 14                	jmp    c000197f <dlmalloc_usable_size+0x2f>
c000196b:	89 d3                	mov    ebx,edx
c000196d:	31 c0                	xor    eax,eax
c000196f:	83 e3 fe             	and    ebx,0xfffffffe
c0001972:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001977:	74 06                	je     c000197f <dlmalloc_usable_size+0x2f>
c0001979:	83 e2 fc             	and    edx,0xfffffffc
c000197c:	8d 42 fc             	lea    eax,[edx-0x4]
c000197f:	5b                   	pop    ebx
c0001980:	c3                   	ret    

c0001981 <dlmallinfo>:
c0001981:	55                   	push   ebp
c0001982:	57                   	push   edi
c0001983:	56                   	push   esi
c0001984:	53                   	push   ebx
c0001985:	83 ec 08             	sub    esp,0x8
c0001988:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000198c:	83 3d ec fd 01 c0 00 	cmp    DWORD PTR ds:0xc001fdec,0x0
c0001993:	75 0a                	jne    c000199f <dlmallinfo+0x1e>
c0001995:	b8 c0 fd 01 c0       	mov    eax,0xc001fdc0
c000199a:	e8 23 f2 ff ff       	call   c0000bc2 <malloc_consolidate>
c000199f:	a1 ec fd 01 c0       	mov    eax,ds:0xc001fdec
c00019a4:	31 ed                	xor    ebp,ebp
c00019a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019a9:	31 c9                	xor    ecx,ecx
c00019ab:	83 e0 fc             	and    eax,0xfffffffc
c00019ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019b2:	31 c0                	xor    eax,eax
c00019b4:	8b 14 85 c4 fd 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe023c]
c00019bb:	85 d2                	test   edx,edx
c00019bd:	74 0e                	je     c00019cd <dlmallinfo+0x4c>
c00019bf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019c2:	45                   	inc    ebp
c00019c3:	83 e6 fc             	and    esi,0xfffffffc
c00019c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019c9:	01 f1                	add    ecx,esi
c00019cb:	eb ee                	jmp    c00019bb <dlmallinfo+0x3a>
c00019cd:	40                   	inc    eax
c00019ce:	83 f8 0a             	cmp    eax,0xa
c00019d1:	75 e1                	jne    c00019b4 <dlmallinfo+0x33>
c00019d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019d7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019de:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019e1:	b8 f4 fd 01 c0       	mov    eax,0xc001fdf4
c00019e6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019e9:	39 f0                	cmp    eax,esi
c00019eb:	74 10                	je     c00019fd <dlmallinfo+0x7c>
c00019ed:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019f0:	ff 04 24             	inc    DWORD PTR [esp]
c00019f3:	83 e7 fc             	and    edi,0xfffffffc
c00019f6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019f9:	01 fa                	add    edx,edi
c00019fb:	eb ec                	jmp    c00019e9 <dlmallinfo+0x68>
c00019fd:	83 c0 08             	add    eax,0x8
c0001a00:	3d ec 00 02 c0       	cmp    eax,0xc00200ec
c0001a05:	75 df                	jne    c00019e6 <dlmallinfo+0x65>
c0001a07:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a0a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a0d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a10:	a1 28 01 02 c0       	mov    eax,ds:0xc0020128
c0001a15:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a18:	89 03                	mov    DWORD PTR [ebx],eax
c0001a1a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a1d:	8b 35 10 01 02 c0    	mov    esi,DWORD PTR ds:0xc0020110
c0001a23:	29 d0                	sub    eax,edx
c0001a25:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a28:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a2b:	8b 35 24 01 02 c0    	mov    esi,DWORD PTR ds:0xc0020124
c0001a31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a35:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a38:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a3b:	8b 35 34 01 02 c0    	mov    esi,DWORD PTR ds:0xc0020134
c0001a41:	89 d8                	mov    eax,ebx
c0001a43:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a46:	83 c4 08             	add    esp,0x8
c0001a49:	5b                   	pop    ebx
c0001a4a:	5e                   	pop    esi
c0001a4b:	5f                   	pop    edi
c0001a4c:	5d                   	pop    ebp
c0001a4d:	c2 04 00             	ret    0x4

c0001a50 <dlmalloc_stats>:
c0001a50:	83 ec 30             	sub    esp,0x30
c0001a53:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a57:	50                   	push   eax
c0001a58:	e8 24 ff ff ff       	call   c0001981 <dlmallinfo>
c0001a5d:	83 c4 30             	add    esp,0x30
c0001a60:	c3                   	ret    

c0001a61 <dlmallopt>:
c0001a61:	56                   	push   esi
c0001a62:	b8 c0 fd 01 c0       	mov    eax,0xc001fdc0
c0001a67:	53                   	push   ebx
c0001a68:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a70:	e8 4d f1 ff ff       	call   c0000bc2 <malloc_consolidate>
c0001a75:	8d 46 04             	lea    eax,[esi+0x4]
c0001a78:	83 f8 05             	cmp    eax,0x5
c0001a7b:	77 67                	ja     c0001ae4 <dlmallopt+0x83>
c0001a7d:	ff 24 85 a4 ce 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe315c]
c0001a84:	83 fb 50             	cmp    ebx,0x50
c0001a87:	77 5b                	ja     c0001ae4 <dlmallopt+0x83>
c0001a89:	ba 08 00 00 00       	mov    edx,0x8
c0001a8e:	85 db                	test   ebx,ebx
c0001a90:	74 12                	je     c0001aa4 <dlmallopt+0x43>
c0001a92:	83 c3 0b             	add    ebx,0xb
c0001a95:	ba 10 00 00 00       	mov    edx,0x10
c0001a9a:	83 fb 0f             	cmp    ebx,0xf
c0001a9d:	76 05                	jbe    c0001aa4 <dlmallopt+0x43>
c0001a9f:	89 da                	mov    edx,ebx
c0001aa1:	83 e2 f8             	and    edx,0xfffffff8
c0001aa4:	a1 c0 fd 01 c0       	mov    eax,ds:0xc001fdc0
c0001aa9:	83 e0 03             	and    eax,0x3
c0001aac:	09 d0                	or     eax,edx
c0001aae:	a3 c0 fd 01 c0       	mov    ds:0xc001fdc0,eax
c0001ab3:	eb 31                	jmp    c0001ae6 <dlmallopt+0x85>
c0001ab5:	89 1d 04 01 02 c0    	mov    DWORD PTR ds:0xc0020104,ebx
c0001abb:	eb 06                	jmp    c0001ac3 <dlmallopt+0x62>
c0001abd:	89 1d 08 01 02 c0    	mov    DWORD PTR ds:0xc0020108,ebx
c0001ac3:	be 01 00 00 00       	mov    esi,0x1
c0001ac8:	eb 1c                	jmp    c0001ae6 <dlmallopt+0x85>
c0001aca:	89 1d 0c 01 02 c0    	mov    DWORD PTR ds:0xc002010c,ebx
c0001ad0:	eb f1                	jmp    c0001ac3 <dlmallopt+0x62>
c0001ad2:	31 f6                	xor    esi,esi
c0001ad4:	85 db                	test   ebx,ebx
c0001ad6:	75 0e                	jne    c0001ae6 <dlmallopt+0x85>
c0001ad8:	c7 05 14 01 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020114,0x0
c0001ae2:	eb df                	jmp    c0001ac3 <dlmallopt+0x62>
c0001ae4:	31 f6                	xor    esi,esi
c0001ae6:	89 f0                	mov    eax,esi
c0001ae8:	5b                   	pop    ebx
c0001ae9:	5e                   	pop    esi
c0001aea:	c3                   	ret    
c0001aeb:	90                   	nop

c0001aec <isblank>:
c0001aec:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001af1:	74 09                	je     c0001afc <isblank+0x10>
c0001af3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001af8:	75 0a                	jne    c0001b04 <isblank+0x18>
c0001afa:	66 90                	xchg   ax,ax
c0001afc:	b8 01 00 00 00       	mov    eax,0x1
c0001b01:	c3                   	ret    
c0001b02:	66 90                	xchg   ax,ax
c0001b04:	b8 00 00 00 00       	mov    eax,0x0
c0001b09:	c3                   	ret    
c0001b0a:	66 90                	xchg   ax,ax

c0001b0c <iscntrl>:
c0001b0c:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b11:	7e 09                	jle    c0001b1c <iscntrl+0x10>
c0001b13:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b18:	75 0a                	jne    c0001b24 <iscntrl+0x18>
c0001b1a:	66 90                	xchg   ax,ax
c0001b1c:	b8 01 00 00 00       	mov    eax,0x1
c0001b21:	c3                   	ret    
c0001b22:	66 90                	xchg   ax,ax
c0001b24:	b8 00 00 00 00       	mov    eax,0x0
c0001b29:	c3                   	ret    
c0001b2a:	66 90                	xchg   ax,ax

c0001b2c <isdigit>:
c0001b2c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b31:	7e 0d                	jle    c0001b40 <isdigit+0x14>
c0001b33:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b38:	7f 06                	jg     c0001b40 <isdigit+0x14>
c0001b3a:	b8 01 00 00 00       	mov    eax,0x1
c0001b3f:	c3                   	ret    
c0001b40:	b8 00 00 00 00       	mov    eax,0x0
c0001b45:	c3                   	ret    
c0001b46:	66 90                	xchg   ax,ax

c0001b48 <islower>:
c0001b48:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b4d:	7e 0d                	jle    c0001b5c <islower+0x14>
c0001b4f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b54:	7f 06                	jg     c0001b5c <islower+0x14>
c0001b56:	b8 01 00 00 00       	mov    eax,0x1
c0001b5b:	c3                   	ret    
c0001b5c:	b8 00 00 00 00       	mov    eax,0x0
c0001b61:	c3                   	ret    
c0001b62:	66 90                	xchg   ax,ax

c0001b64 <isspace>:
c0001b64:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b69:	7c 19                	jl     c0001b84 <isspace+0x20>
c0001b6b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b70:	7e 0a                	jle    c0001b7c <isspace+0x18>
c0001b72:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b77:	75 0b                	jne    c0001b84 <isspace+0x20>
c0001b79:	8d 76 00             	lea    esi,[esi+0x0]
c0001b7c:	b8 01 00 00 00       	mov    eax,0x1
c0001b81:	c3                   	ret    
c0001b82:	66 90                	xchg   ax,ax
c0001b84:	b8 00 00 00 00       	mov    eax,0x0
c0001b89:	c3                   	ret    
c0001b8a:	66 90                	xchg   ax,ax

c0001b8c <isupper>:
c0001b8c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b91:	7e 0d                	jle    c0001ba0 <isupper+0x14>
c0001b93:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b98:	7f 06                	jg     c0001ba0 <isupper+0x14>
c0001b9a:	b8 01 00 00 00       	mov    eax,0x1
c0001b9f:	c3                   	ret    
c0001ba0:	b8 00 00 00 00       	mov    eax,0x0
c0001ba5:	c3                   	ret    
c0001ba6:	66 90                	xchg   ax,ax

c0001ba8 <isalpha>:
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 db ff ff ff       	call   c0001b8c <isupper>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	75 10                	jne    c0001bc8 <isalpha+0x20>
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 87 ff ff ff       	call   c0001b48 <islower>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	74 08                	je     c0001bd0 <isalpha+0x28>
c0001bc8:	b8 01 00 00 00       	mov    eax,0x1
c0001bcd:	c3                   	ret    
c0001bce:	66 90                	xchg   ax,ax
c0001bd0:	b8 00 00 00 00       	mov    eax,0x0
c0001bd5:	c3                   	ret    
c0001bd6:	66 90                	xchg   ax,ax

c0001bd8 <isalnum>:
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 c7 ff ff ff       	call   c0001ba8 <isalpha>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	75 10                	jne    c0001bf8 <isalnum+0x20>
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 3b ff ff ff       	call   c0001b2c <isdigit>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	74 08                	je     c0001c00 <isalnum+0x28>
c0001bf8:	b8 01 00 00 00       	mov    eax,0x1
c0001bfd:	c3                   	ret    
c0001bfe:	66 90                	xchg   ax,ax
c0001c00:	b8 00 00 00 00       	mov    eax,0x0
c0001c05:	c3                   	ret    
c0001c06:	66 90                	xchg   ax,ax

c0001c08 <ispunct>:
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 c7 ff ff ff       	call   c0001bd8 <isalnum>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 28                	jne    c0001c40 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 43 ff ff ff       	call   c0001b64 <isspace>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 18                	jne    c0001c40 <ispunct+0x38>
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 db fe ff ff       	call   c0001b0c <iscntrl>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 08                	jne    c0001c40 <ispunct+0x38>
c0001c38:	b8 01 00 00 00       	mov    eax,0x1
c0001c3d:	c3                   	ret    
c0001c3e:	66 90                	xchg   ax,ax
c0001c40:	b8 00 00 00 00       	mov    eax,0x0
c0001c45:	c3                   	ret    
c0001c46:	66 90                	xchg   ax,ax

c0001c48 <isgraph>:
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 87 ff ff ff       	call   c0001bd8 <isalnum>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	75 10                	jne    c0001c68 <isgraph+0x20>
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 a7 ff ff ff       	call   c0001c08 <ispunct>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	74 08                	je     c0001c70 <isgraph+0x28>
c0001c68:	b8 01 00 00 00       	mov    eax,0x1
c0001c6d:	c3                   	ret    
c0001c6e:	66 90                	xchg   ax,ax
c0001c70:	b8 00 00 00 00       	mov    eax,0x0
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax

c0001c78 <isprint>:
c0001c78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c7c:	e8 c7 ff ff ff       	call   c0001c48 <isgraph>
c0001c81:	83 c4 04             	add    esp,0x4
c0001c84:	85 c0                	test   eax,eax
c0001c86:	75 08                	jne    c0001c90 <isprint+0x18>
c0001c88:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c8d:	75 09                	jne    c0001c98 <isprint+0x20>
c0001c8f:	90                   	nop
c0001c90:	b8 01 00 00 00       	mov    eax,0x1
c0001c95:	c3                   	ret    
c0001c96:	66 90                	xchg   ax,ax
c0001c98:	b8 00 00 00 00       	mov    eax,0x0
c0001c9d:	c3                   	ret    
c0001c9e:	66 90                	xchg   ax,ax

c0001ca0 <isxdigit>:
c0001ca0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ca4:	e8 83 fe ff ff       	call   c0001b2c <isdigit>
c0001ca9:	83 c4 04             	add    esp,0x4
c0001cac:	85 c0                	test   eax,eax
c0001cae:	75 20                	jne    c0001cd0 <isxdigit+0x30>
c0001cb0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cb5:	7e 09                	jle    c0001cc0 <isxdigit+0x20>
c0001cb7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cbc:	7e 12                	jle    c0001cd0 <isxdigit+0x30>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cc5:	7e 11                	jle    c0001cd8 <isxdigit+0x38>
c0001cc7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001ccc:	7f 0a                	jg     c0001cd8 <isxdigit+0x38>
c0001cce:	66 90                	xchg   ax,ax
c0001cd0:	b8 01 00 00 00       	mov    eax,0x1
c0001cd5:	c3                   	ret    
c0001cd6:	66 90                	xchg   ax,ax
c0001cd8:	b8 00 00 00 00       	mov    eax,0x0
c0001cdd:	c3                   	ret    

c0001cde <disk_status>:
c0001cde:	31 c0                	xor    eax,eax
c0001ce0:	c3                   	ret    

c0001ce1 <disk_initialize>:
c0001ce1:	31 c0                	xor    eax,eax
c0001ce3:	c3                   	ret    

c0001ce4 <disk_read>:
c0001ce4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ce9:	0f b6 04 85 80 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc080]
c0001cf1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cf5:	e9 3a 52 01 00       	jmp    c0016f34 <fatWrapperReadDisk>

c0001cfa <disk_write>:
c0001cfa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cff:	0f b6 04 85 80 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc080]
c0001d07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d0b:	e9 68 52 01 00       	jmp    c0016f78 <fatWrapperWriteDisk>

c0001d10 <disk_ioctl>:
c0001d10:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d19:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d1e:	0f b6 04 85 80 3f 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc080]
c0001d26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d2a:	e9 8d 52 01 00       	jmp    c0016fbc <fatWrapperIoctl>

c0001d2f <ld_word>:
c0001d2f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d33:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d36:	c1 e2 08             	shl    edx,0x8
c0001d39:	09 d0                	or     eax,edx
c0001d3b:	c3                   	ret    

c0001d3c <ld_dword>:
c0001d3c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d40:	89 d1                	mov    ecx,edx
c0001d42:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d46:	c1 e1 08             	shl    ecx,0x8
c0001d49:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d4c:	09 ca                	or     edx,ecx
c0001d4e:	c1 e2 08             	shl    edx,0x8
c0001d51:	09 d0                	or     eax,edx
c0001d53:	c3                   	ret    

c0001d54 <st_word>:
c0001d54:	66 89 10             	mov    WORD PTR [eax],dx
c0001d57:	c3                   	ret    

c0001d58 <st_dword>:
c0001d58:	89 10                	mov    DWORD PTR [eax],edx
c0001d5a:	c3                   	ret    

c0001d5b <mem_cpy>:
c0001d5b:	85 c9                	test   ecx,ecx
c0001d5d:	74 10                	je     c0001d6f <mem_cpy+0x14>
c0001d5f:	57                   	push   edi
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	56                   	push   esi
c0001d63:	89 c7                	mov    edi,eax
c0001d65:	89 d6                	mov    esi,edx
c0001d67:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d68:	39 f9                	cmp    ecx,edi
c0001d6a:	75 fb                	jne    c0001d67 <mem_cpy+0xc>
c0001d6c:	5e                   	pop    esi
c0001d6d:	5f                   	pop    edi
c0001d6e:	c3                   	ret    
c0001d6f:	c3                   	ret    

c0001d70 <mem_set>:
c0001d70:	01 c1                	add    ecx,eax
c0001d72:	40                   	inc    eax
c0001d73:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d76:	39 c8                	cmp    eax,ecx
c0001d78:	75 f8                	jne    c0001d72 <mem_set+0x2>
c0001d7a:	c3                   	ret    

c0001d7b <mem_cmp>:
c0001d7b:	57                   	push   edi
c0001d7c:	56                   	push   esi
c0001d7d:	89 c6                	mov    esi,eax
c0001d7f:	53                   	push   ebx
c0001d80:	46                   	inc    esi
c0001d81:	42                   	inc    edx
c0001d82:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d86:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d8a:	29 fb                	sub    ebx,edi
c0001d8c:	89 cf                	mov    edi,ecx
c0001d8e:	29 f7                	sub    edi,esi
c0001d90:	01 c7                	add    edi,eax
c0001d92:	74 04                	je     c0001d98 <mem_cmp+0x1d>
c0001d94:	85 db                	test   ebx,ebx
c0001d96:	74 e8                	je     c0001d80 <mem_cmp+0x5>
c0001d98:	89 d8                	mov    eax,ebx
c0001d9a:	5b                   	pop    ebx
c0001d9b:	5e                   	pop    esi
c0001d9c:	5f                   	pop    edi
c0001d9d:	c3                   	ret    

c0001d9e <chk_chr>:
c0001d9e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001da1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001da4:	74 07                	je     c0001dad <chk_chr+0xf>
c0001da6:	39 d1                	cmp    ecx,edx
c0001da8:	74 03                	je     c0001dad <chk_chr+0xf>
c0001daa:	40                   	inc    eax
c0001dab:	eb f1                	jmp    c0001d9e <chk_chr>
c0001dad:	89 c8                	mov    eax,ecx
c0001daf:	c3                   	ret    

c0001db0 <dbc_1st>:
c0001db0:	31 c0                	xor    eax,eax
c0001db2:	c3                   	ret    

c0001db3 <dbc_2nd>:
c0001db3:	31 c0                	xor    eax,eax
c0001db5:	c3                   	ret    

c0001db6 <tchar2uni>:
c0001db6:	57                   	push   edi
c0001db7:	89 c7                	mov    edi,eax
c0001db9:	56                   	push   esi
c0001dba:	53                   	push   ebx
c0001dbb:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dbd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dbf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dc2:	84 c9                	test   cl,cl
c0001dc4:	78 0a                	js     c0001dd0 <tchar2uni+0x1a>
c0001dc6:	0f b6 d1             	movzx  edx,cl
c0001dc9:	89 f3                	mov    ebx,esi
c0001dcb:	e9 9f 00 00 00       	jmp    c0001e6f <tchar2uni+0xb9>
c0001dd0:	88 ca                	mov    dl,cl
c0001dd2:	83 e2 e0             	and    edx,0xffffffe0
c0001dd5:	80 fa c0             	cmp    dl,0xc0
c0001dd8:	75 0c                	jne    c0001de6 <tchar2uni+0x30>
c0001dda:	89 ca                	mov    edx,ecx
c0001ddc:	b9 01 00 00 00       	mov    ecx,0x1
c0001de1:	83 e2 1f             	and    edx,0x1f
c0001de4:	eb 2e                	jmp    c0001e14 <tchar2uni+0x5e>
c0001de6:	88 ca                	mov    dl,cl
c0001de8:	83 e2 f0             	and    edx,0xfffffff0
c0001deb:	80 fa e0             	cmp    dl,0xe0
c0001dee:	75 0c                	jne    c0001dfc <tchar2uni+0x46>
c0001df0:	89 ca                	mov    edx,ecx
c0001df2:	b9 02 00 00 00       	mov    ecx,0x2
c0001df7:	83 e2 0f             	and    edx,0xf
c0001dfa:	eb 18                	jmp    c0001e14 <tchar2uni+0x5e>
c0001dfc:	88 ca                	mov    dl,cl
c0001dfe:	83 e2 f8             	and    edx,0xfffffff8
c0001e01:	88 d0                	mov    al,dl
c0001e03:	83 ca ff             	or     edx,0xffffffff
c0001e06:	3c f0                	cmp    al,0xf0
c0001e08:	75 6c                	jne    c0001e76 <tchar2uni+0xc0>
c0001e0a:	89 ca                	mov    edx,ecx
c0001e0c:	b9 03 00 00 00       	mov    ecx,0x3
c0001e11:	83 e2 07             	and    edx,0x7
c0001e14:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e18:	46                   	inc    esi
c0001e19:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e1c:	88 c8                	mov    al,cl
c0001e1e:	83 e0 c0             	and    eax,0xffffffc0
c0001e21:	3c 80                	cmp    al,0x80
c0001e23:	75 4e                	jne    c0001e73 <tchar2uni+0xbd>
c0001e25:	c1 e2 06             	shl    edx,0x6
c0001e28:	83 e1 3f             	and    ecx,0x3f
c0001e2b:	09 ca                	or     edx,ecx
c0001e2d:	39 de                	cmp    esi,ebx
c0001e2f:	75 e7                	jne    c0001e18 <tchar2uni+0x62>
c0001e31:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e34:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e3a:	77 37                	ja     c0001e73 <tchar2uni+0xbd>
c0001e3c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e42:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e48:	76 29                	jbe    c0001e73 <tchar2uni+0xbd>
c0001e4a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e50:	76 1d                	jbe    c0001e6f <tchar2uni+0xb9>
c0001e52:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e58:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e5e:	c1 e1 06             	shl    ecx,0x6
c0001e61:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e67:	09 ca                	or     edx,ecx
c0001e69:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e6f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e71:	eb 03                	jmp    c0001e76 <tchar2uni+0xc0>
c0001e73:	83 ca ff             	or     edx,0xffffffff
c0001e76:	5b                   	pop    ebx
c0001e77:	89 d0                	mov    eax,edx
c0001e79:	5e                   	pop    esi
c0001e7a:	5f                   	pop    edi
c0001e7b:	c3                   	ret    

c0001e7c <put_utf>:
c0001e7c:	53                   	push   ebx
c0001e7d:	83 f8 7f             	cmp    eax,0x7f
c0001e80:	89 c3                	mov    ebx,eax
c0001e82:	b0 00                	mov    al,0x0
c0001e84:	77 11                	ja     c0001e97 <put_utf+0x1b>
c0001e86:	85 c9                	test   ecx,ecx
c0001e88:	0f 84 e5 00 00 00    	je     c0001f73 <put_utf+0xf7>
c0001e8e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e90:	b0 01                	mov    al,0x1
c0001e92:	e9 dc 00 00 00       	jmp    c0001f73 <put_utf+0xf7>
c0001e97:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e9d:	77 23                	ja     c0001ec2 <put_utf+0x46>
c0001e9f:	83 f9 01             	cmp    ecx,0x1
c0001ea2:	0f 86 cb 00 00 00    	jbe    c0001f73 <put_utf+0xf7>
c0001ea8:	89 d8                	mov    eax,ebx
c0001eaa:	83 e3 3f             	and    ebx,0x3f
c0001ead:	c1 e8 06             	shr    eax,0x6
c0001eb0:	83 cb 80             	or     ebx,0xffffff80
c0001eb3:	83 c8 c0             	or     eax,0xffffffc0
c0001eb6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001eb9:	88 02                	mov    BYTE PTR [edx],al
c0001ebb:	b0 02                	mov    al,0x2
c0001ebd:	e9 b1 00 00 00       	jmp    c0001f73 <put_utf+0xf7>
c0001ec2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ec8:	77 40                	ja     c0001f0a <put_utf+0x8e>
c0001eca:	83 f9 02             	cmp    ecx,0x2
c0001ecd:	0f 86 a0 00 00 00    	jbe    c0001f73 <put_utf+0xf7>
c0001ed3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ed9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001edf:	0f 86 8e 00 00 00    	jbe    c0001f73 <put_utf+0xf7>
c0001ee5:	89 d8                	mov    eax,ebx
c0001ee7:	c1 e8 0c             	shr    eax,0xc
c0001eea:	83 c8 e0             	or     eax,0xffffffe0
c0001eed:	88 02                	mov    BYTE PTR [edx],al
c0001eef:	89 d8                	mov    eax,ebx
c0001ef1:	83 e3 3f             	and    ebx,0x3f
c0001ef4:	c1 e8 06             	shr    eax,0x6
c0001ef7:	83 cb 80             	or     ebx,0xffffff80
c0001efa:	83 e0 3f             	and    eax,0x3f
c0001efd:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f00:	83 c8 80             	or     eax,0xffffff80
c0001f03:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f06:	b0 03                	mov    al,0x3
c0001f08:	eb 69                	jmp    c0001f73 <put_utf+0xf7>
c0001f0a:	83 f9 03             	cmp    ecx,0x3
c0001f0d:	76 64                	jbe    c0001f73 <put_utf+0xf7>
c0001f0f:	89 d9                	mov    ecx,ebx
c0001f11:	0f b7 c3             	movzx  eax,bx
c0001f14:	66 31 c9             	xor    cx,cx
c0001f17:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f1d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f23:	c1 e9 06             	shr    ecx,0x6
c0001f26:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f2c:	77 43                	ja     c0001f71 <put_utf+0xf5>
c0001f2e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f34:	77 3b                	ja     c0001f71 <put_utf+0xf5>
c0001f36:	09 cb                	or     ebx,ecx
c0001f38:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f3e:	89 d8                	mov    eax,ebx
c0001f40:	c1 e8 12             	shr    eax,0x12
c0001f43:	83 c8 f0             	or     eax,0xfffffff0
c0001f46:	88 02                	mov    BYTE PTR [edx],al
c0001f48:	89 d8                	mov    eax,ebx
c0001f4a:	c1 e8 0c             	shr    eax,0xc
c0001f4d:	83 e0 3f             	and    eax,0x3f
c0001f50:	83 c8 80             	or     eax,0xffffff80
c0001f53:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f56:	89 d8                	mov    eax,ebx
c0001f58:	83 e3 3f             	and    ebx,0x3f
c0001f5b:	c1 e8 06             	shr    eax,0x6
c0001f5e:	83 cb 80             	or     ebx,0xffffff80
c0001f61:	83 e0 3f             	and    eax,0x3f
c0001f64:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f67:	83 c8 80             	or     eax,0xffffff80
c0001f6a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f6d:	b0 04                	mov    al,0x4
c0001f6f:	eb 02                	jmp    c0001f73 <put_utf+0xf7>
c0001f71:	31 c0                	xor    eax,eax
c0001f73:	5b                   	pop    ebx
c0001f74:	c3                   	ret    

c0001f75 <clst2sect>:
c0001f75:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f78:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f7b:	83 ea 02             	sub    edx,0x2
c0001f7e:	39 ca                	cmp    edx,ecx
c0001f80:	76 0d                	jbe    c0001f8f <clst2sect+0x1a>
c0001f82:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f86:	0f af d1             	imul   edx,ecx
c0001f89:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f8c:	89 d0                	mov    eax,edx
c0001f8e:	c3                   	ret    
c0001f8f:	31 c0                	xor    eax,eax
c0001f91:	c3                   	ret    

c0001f92 <pick_lfn>:
c0001f92:	55                   	push   ebp
c0001f93:	57                   	push   edi
c0001f94:	56                   	push   esi
c0001f95:	89 d6                	mov    esi,edx
c0001f97:	53                   	push   ebx
c0001f98:	89 c3                	mov    ebx,eax
c0001f9a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f9d:	e8 8d fd ff ff       	call   c0001d2f <ld_word>
c0001fa2:	66 85 c0             	test   ax,ax
c0001fa5:	74 04                	je     c0001fab <pick_lfn+0x19>
c0001fa7:	31 c0                	xor    eax,eax
c0001fa9:	eb 5c                	jmp    c0002007 <pick_lfn+0x75>
c0001fab:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fae:	bd 01 00 00 00       	mov    ebp,0x1
c0001fb3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fb6:	31 ff                	xor    edi,edi
c0001fb8:	49                   	dec    ecx
c0001fb9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fbc:	0f b6 87 00 d0 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3000]
c0001fc3:	01 f0                	add    eax,esi
c0001fc5:	e8 65 fd ff ff       	call   c0001d2f <ld_word>
c0001fca:	66 85 ed             	test   bp,bp
c0001fcd:	74 11                	je     c0001fe0 <pick_lfn+0x4e>
c0001fcf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fd5:	77 d0                	ja     c0001fa7 <pick_lfn+0x15>
c0001fd7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fdb:	89 c5                	mov    ebp,eax
c0001fdd:	41                   	inc    ecx
c0001fde:	eb 04                	jmp    c0001fe4 <pick_lfn+0x52>
c0001fe0:	66 40                	inc    ax
c0001fe2:	75 c3                	jne    c0001fa7 <pick_lfn+0x15>
c0001fe4:	47                   	inc    edi
c0001fe5:	83 ff 0d             	cmp    edi,0xd
c0001fe8:	75 d2                	jne    c0001fbc <pick_lfn+0x2a>
c0001fea:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fed:	74 13                	je     c0002002 <pick_lfn+0x70>
c0001fef:	66 85 ed             	test   bp,bp
c0001ff2:	74 0e                	je     c0002002 <pick_lfn+0x70>
c0001ff4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ffa:	77 ab                	ja     c0001fa7 <pick_lfn+0x15>
c0001ffc:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0002002:	b8 01 00 00 00       	mov    eax,0x1
c0002007:	5b                   	pop    ebx
c0002008:	5e                   	pop    esi
c0002009:	5f                   	pop    edi
c000200a:	5d                   	pop    ebp
c000200b:	c3                   	ret    

c000200c <put_lfn>:
c000200c:	55                   	push   ebp
c000200d:	31 ed                	xor    ebp,ebp
c000200f:	57                   	push   edi
c0002010:	89 d7                	mov    edi,edx
c0002012:	56                   	push   esi
c0002013:	31 f6                	xor    esi,esi
c0002015:	53                   	push   ebx
c0002016:	83 ec 08             	sub    esp,0x8
c0002019:	89 04 24             	mov    DWORD PTR [esp],eax
c000201c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002020:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002024:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000202a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000202d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002030:	31 d2                	xor    edx,edx
c0002032:	e8 1d fd ff ff       	call   c0001d54 <st_word>
c0002037:	0f b6 d9             	movzx  ebx,cl
c000203a:	4b                   	dec    ebx
c000203b:	6b db 0d             	imul   ebx,ebx,0xd
c000203e:	66 83 fe ff          	cmp    si,0xffff
c0002042:	74 08                	je     c000204c <put_lfn+0x40>
c0002044:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002047:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000204b:	43                   	inc    ebx
c000204c:	0f b6 85 00 d0 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3000]
c0002053:	0f b7 d6             	movzx  edx,si
c0002056:	01 f8                	add    eax,edi
c0002058:	e8 f7 fc ff ff       	call   c0001d54 <st_word>
c000205d:	66 85 f6             	test   si,si
c0002060:	75 03                	jne    c0002065 <put_lfn+0x59>
c0002062:	83 ce ff             	or     esi,0xffffffff
c0002065:	45                   	inc    ebp
c0002066:	83 fd 0d             	cmp    ebp,0xd
c0002069:	75 d3                	jne    c000203e <put_lfn+0x32>
c000206b:	66 46                	inc    si
c000206d:	74 0a                	je     c0002079 <put_lfn+0x6d>
c000206f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002072:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002077:	75 09                	jne    c0002082 <put_lfn+0x76>
c0002079:	88 c8                	mov    al,cl
c000207b:	83 c8 40             	or     eax,0x40
c000207e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002082:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002086:	88 07                	mov    BYTE PTR [edi],al
c0002088:	83 c4 08             	add    esp,0x8
c000208b:	5b                   	pop    ebx
c000208c:	5e                   	pop    esi
c000208d:	5f                   	pop    edi
c000208e:	5d                   	pop    ebp
c000208f:	c3                   	ret    

c0002090 <gen_numname>:
c0002090:	57                   	push   edi
c0002091:	89 cf                	mov    edi,ecx
c0002093:	56                   	push   esi
c0002094:	b9 0b 00 00 00       	mov    ecx,0xb
c0002099:	53                   	push   ebx
c000209a:	89 c6                	mov    esi,eax
c000209c:	83 ec 10             	sub    esp,0x10
c000209f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020a3:	e8 b3 fc ff ff       	call   c0001d5b <mem_cpy>
c00020a8:	83 fb 05             	cmp    ebx,0x5
c00020ab:	76 2d                	jbe    c00020da <gen_numname+0x4a>
c00020ad:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020b0:	66 85 c0             	test   ax,ax
c00020b3:	74 25                	je     c00020da <gen_numname+0x4a>
c00020b5:	83 c7 02             	add    edi,0x2
c00020b8:	ba 10 00 00 00       	mov    edx,0x10
c00020bd:	01 db                	add    ebx,ebx
c00020bf:	89 c1                	mov    ecx,eax
c00020c1:	66 d1 e8             	shr    ax,1
c00020c4:	83 e1 01             	and    ecx,0x1
c00020c7:	01 cb                	add    ebx,ecx
c00020c9:	0f ba e3 10          	bt     ebx,0x10
c00020cd:	73 06                	jae    c00020d5 <gen_numname+0x45>
c00020cf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020d5:	4a                   	dec    edx
c00020d6:	75 e5                	jne    c00020bd <gen_numname+0x2d>
c00020d8:	eb d3                	jmp    c00020ad <gen_numname+0x1d>
c00020da:	b8 07 00 00 00       	mov    eax,0x7
c00020df:	88 d9                	mov    cl,bl
c00020e1:	83 e1 0f             	and    ecx,0xf
c00020e4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020e7:	80 fa 39             	cmp    dl,0x39
c00020ea:	76 03                	jbe    c00020ef <gen_numname+0x5f>
c00020ec:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ef:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020f2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020f6:	89 da                	mov    edx,ebx
c00020f8:	c1 ea 04             	shr    edx,0x4
c00020fb:	83 fb 0f             	cmp    ebx,0xf
c00020fe:	76 06                	jbe    c0002106 <gen_numname+0x76>
c0002100:	89 c8                	mov    eax,ecx
c0002102:	89 d3                	mov    ebx,edx
c0002104:	eb d9                	jmp    c00020df <gen_numname+0x4f>
c0002106:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000210b:	31 d2                	xor    edx,edx
c000210d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002110:	8d 04 16             	lea    eax,[esi+edx*1]
c0002113:	39 ca                	cmp    edx,ecx
c0002115:	73 18                	jae    c000212f <gen_numname+0x9f>
c0002117:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000211a:	3c 20                	cmp    al,0x20
c000211c:	74 11                	je     c000212f <gen_numname+0x9f>
c000211e:	e8 8d fc ff ff       	call   c0001db0 <dbc_1st>
c0002123:	85 c0                	test   eax,eax
c0002125:	74 05                	je     c000212c <gen_numname+0x9c>
c0002127:	39 d3                	cmp    ebx,edx
c0002129:	74 04                	je     c000212f <gen_numname+0x9f>
c000212b:	42                   	inc    edx
c000212c:	42                   	inc    edx
c000212d:	eb e1                	jmp    c0002110 <gen_numname+0x80>
c000212f:	b0 20                	mov    al,0x20
c0002131:	83 f9 07             	cmp    ecx,0x7
c0002134:	77 05                	ja     c000213b <gen_numname+0xab>
c0002136:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000213a:	41                   	inc    ecx
c000213b:	42                   	inc    edx
c000213c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002140:	83 fa 07             	cmp    edx,0x7
c0002143:	76 ea                	jbe    c000212f <gen_numname+0x9f>
c0002145:	83 c4 10             	add    esp,0x10
c0002148:	5b                   	pop    ebx
c0002149:	5e                   	pop    esi
c000214a:	5f                   	pop    edi
c000214b:	c3                   	ret    

c000214c <sum_sfn>:
c000214c:	31 c9                	xor    ecx,ecx
c000214e:	31 d2                	xor    edx,edx
c0002150:	d0 ca                	ror    dl,1
c0002152:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002155:	41                   	inc    ecx
c0002156:	83 f9 0b             	cmp    ecx,0xb
c0002159:	75 f5                	jne    c0002150 <sum_sfn+0x4>
c000215b:	88 d0                	mov    al,dl
c000215d:	c3                   	ret    

c000215e <get_ldnumber>:
c000215e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002160:	85 d2                	test   edx,edx
c0002162:	74 14                	je     c0002178 <get_ldnumber+0x1a>
c0002164:	56                   	push   esi
c0002165:	53                   	push   ebx
c0002166:	89 d3                	mov    ebx,edx
c0002168:	43                   	inc    ebx
c0002169:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000216c:	80 f9 1f             	cmp    cl,0x1f
c000216f:	76 0d                	jbe    c000217e <get_ldnumber+0x20>
c0002171:	80 f9 3a             	cmp    cl,0x3a
c0002174:	75 f2                	jne    c0002168 <get_ldnumber+0xa>
c0002176:	eb 0a                	jmp    c0002182 <get_ldnumber+0x24>
c0002178:	83 c9 ff             	or     ecx,0xffffffff
c000217b:	89 c8                	mov    eax,ecx
c000217d:	c3                   	ret    
c000217e:	31 c9                	xor    ecx,ecx
c0002180:	eb 24                	jmp    c00021a6 <get_ldnumber+0x48>
c0002182:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002185:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002188:	80 f9 09             	cmp    cl,0x9
c000218b:	77 16                	ja     c00021a3 <get_ldnumber+0x45>
c000218d:	83 c2 02             	add    edx,0x2
c0002190:	83 c9 ff             	or     ecx,0xffffffff
c0002193:	39 d3                	cmp    ebx,edx
c0002195:	75 0f                	jne    c00021a6 <get_ldnumber+0x48>
c0002197:	89 f2                	mov    edx,esi
c0002199:	89 18                	mov    DWORD PTR [eax],ebx
c000219b:	0f be ca             	movsx  ecx,dl
c000219e:	83 e9 30             	sub    ecx,0x30
c00021a1:	eb 03                	jmp    c00021a6 <get_ldnumber+0x48>
c00021a3:	83 c9 ff             	or     ecx,0xffffffff
c00021a6:	89 c8                	mov    eax,ecx
c00021a8:	5b                   	pop    ebx
c00021a9:	5e                   	pop    esi
c00021aa:	c3                   	ret    

c00021ab <validate>:
c00021ab:	56                   	push   esi
c00021ac:	53                   	push   ebx
c00021ad:	89 d6                	mov    esi,edx
c00021af:	51                   	push   ecx
c00021b0:	85 c0                	test   eax,eax
c00021b2:	75 09                	jne    c00021bd <validate+0x12>
c00021b4:	b8 09 00 00 00       	mov    eax,0x9
c00021b9:	31 c9                	xor    ecx,ecx
c00021bb:	eb 2f                	jmp    c00021ec <validate+0x41>
c00021bd:	89 c3                	mov    ebx,eax
c00021bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00021c1:	85 c0                	test   eax,eax
c00021c3:	74 ef                	je     c00021b4 <validate+0x9>
c00021c5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021c8:	74 ea                	je     c00021b4 <validate+0x9>
c00021ca:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021ce:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021d2:	75 e0                	jne    c00021b4 <validate+0x9>
c00021d4:	83 ec 0c             	sub    esp,0xc
c00021d7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021db:	50                   	push   eax
c00021dc:	e8 fd fa ff ff       	call   c0001cde <disk_status>
c00021e1:	83 c4 10             	add    esp,0x10
c00021e4:	a8 01                	test   al,0x1
c00021e6:	75 cc                	jne    c00021b4 <validate+0x9>
c00021e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021ea:	31 c0                	xor    eax,eax
c00021ec:	89 0e                	mov    DWORD PTR [esi],ecx
c00021ee:	5a                   	pop    edx
c00021ef:	5b                   	pop    ebx
c00021f0:	5e                   	pop    esi
c00021f1:	c3                   	ret    

c00021f2 <sync_window>:
c00021f2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021f6:	74 58                	je     c0002250 <sync_window+0x5e>
c00021f8:	56                   	push   esi
c00021f9:	53                   	push   ebx
c00021fa:	8d 70 34             	lea    esi,[eax+0x34]
c00021fd:	51                   	push   ecx
c00021fe:	89 c3                	mov    ebx,eax
c0002200:	6a 01                	push   0x1
c0002202:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002205:	56                   	push   esi
c0002206:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000220a:	50                   	push   eax
c000220b:	e8 ea fa ff ff       	call   c0001cfa <disk_write>
c0002210:	83 c4 10             	add    esp,0x10
c0002213:	ba 01 00 00 00       	mov    edx,0x1
c0002218:	85 c0                	test   eax,eax
c000221a:	75 2e                	jne    c000224a <sync_window+0x58>
c000221c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000221f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002222:	89 c1                	mov    ecx,eax
c0002224:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002228:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000222b:	39 d1                	cmp    ecx,edx
c000222d:	73 19                	jae    c0002248 <sync_window+0x56>
c000222f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002233:	75 13                	jne    c0002248 <sync_window+0x56>
c0002235:	6a 01                	push   0x1
c0002237:	01 d0                	add    eax,edx
c0002239:	50                   	push   eax
c000223a:	56                   	push   esi
c000223b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000223f:	50                   	push   eax
c0002240:	e8 b5 fa ff ff       	call   c0001cfa <disk_write>
c0002245:	83 c4 10             	add    esp,0x10
c0002248:	31 d2                	xor    edx,edx
c000224a:	89 d0                	mov    eax,edx
c000224c:	5a                   	pop    edx
c000224d:	5b                   	pop    ebx
c000224e:	5e                   	pop    esi
c000224f:	c3                   	ret    
c0002250:	31 d2                	xor    edx,edx
c0002252:	89 d0                	mov    eax,edx
c0002254:	c3                   	ret    

c0002255 <move_window>:
c0002255:	57                   	push   edi
c0002256:	56                   	push   esi
c0002257:	31 f6                	xor    esi,esi
c0002259:	53                   	push   ebx
c000225a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000225d:	74 32                	je     c0002291 <move_window+0x3c>
c000225f:	89 c3                	mov    ebx,eax
c0002261:	89 d7                	mov    edi,edx
c0002263:	e8 8a ff ff ff       	call   c00021f2 <sync_window>
c0002268:	89 c6                	mov    esi,eax
c000226a:	85 c0                	test   eax,eax
c000226c:	75 23                	jne    c0002291 <move_window+0x3c>
c000226e:	6a 01                	push   0x1
c0002270:	8d 43 34             	lea    eax,[ebx+0x34]
c0002273:	57                   	push   edi
c0002274:	50                   	push   eax
c0002275:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002279:	50                   	push   eax
c000227a:	e8 65 fa ff ff       	call   c0001ce4 <disk_read>
c000227f:	83 c4 10             	add    esp,0x10
c0002282:	85 c0                	test   eax,eax
c0002284:	74 08                	je     c000228e <move_window+0x39>
c0002286:	be 01 00 00 00       	mov    esi,0x1
c000228b:	83 cf ff             	or     edi,0xffffffff
c000228e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002291:	89 f0                	mov    eax,esi
c0002293:	5b                   	pop    ebx
c0002294:	5e                   	pop    esi
c0002295:	5f                   	pop    edi
c0002296:	c3                   	ret    

c0002297 <check_fs>:
c0002297:	53                   	push   ebx
c0002298:	89 c3                	mov    ebx,eax
c000229a:	83 ec 08             	sub    esp,0x8
c000229d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022a1:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00022a8:	e8 a8 ff ff ff       	call   c0002255 <move_window>
c00022ad:	ba 04 00 00 00       	mov    edx,0x4
c00022b2:	85 c0                	test   eax,eax
c00022b4:	75 68                	jne    c000231e <check_fs+0x87>
c00022b6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022bc:	e8 6e fa ff ff       	call   c0001d2f <ld_word>
c00022c1:	ba 03 00 00 00       	mov    edx,0x3
c00022c6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ca:	75 52                	jne    c000231e <check_fs+0x87>
c00022cc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022cf:	8d 50 18             	lea    edx,[eax+0x18]
c00022d2:	80 fa 01             	cmp    dl,0x1
c00022d5:	76 09                	jbe    c00022e0 <check_fs+0x49>
c00022d7:	ba 02 00 00 00       	mov    edx,0x2
c00022dc:	3c eb                	cmp    al,0xeb
c00022de:	75 3e                	jne    c000231e <check_fs+0x87>
c00022e0:	ba 54 f0 01 c0       	mov    edx,0xc001f054
c00022e5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022e8:	b9 03 00 00 00       	mov    ecx,0x3
c00022ed:	e8 89 fa ff ff       	call   c0001d7b <mem_cmp>
c00022f2:	31 d2                	xor    edx,edx
c00022f4:	85 c0                	test   eax,eax
c00022f6:	74 26                	je     c000231e <check_fs+0x87>
c00022f8:	ba bc ce 01 c0       	mov    edx,0xc001cebc
c00022fd:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002303:	b9 05 00 00 00       	mov    ecx,0x5
c0002308:	e8 6e fa ff ff       	call   c0001d7b <mem_cmp>
c000230d:	31 d2                	xor    edx,edx
c000230f:	85 c0                	test   eax,eax
c0002311:	74 0b                	je     c000231e <check_fs+0x87>
c0002313:	31 d2                	xor    edx,edx
c0002315:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002319:	0f 95 c2             	setne  dl
c000231c:	01 d2                	add    edx,edx
c000231e:	89 d0                	mov    eax,edx
c0002320:	83 c4 08             	add    esp,0x8
c0002323:	5b                   	pop    ebx
c0002324:	c3                   	ret    

c0002325 <find_volume>:
c0002325:	55                   	push   ebp
c0002326:	57                   	push   edi
c0002327:	56                   	push   esi
c0002328:	89 c6                	mov    esi,eax
c000232a:	53                   	push   ebx
c000232b:	89 d3                	mov    ebx,edx
c000232d:	83 ec 2c             	sub    esp,0x2c
c0002330:	31 d2                	xor    edx,edx
c0002332:	e8 60 ff ff ff       	call   c0002297 <check_fs>
c0002337:	83 f8 02             	cmp    eax,0x2
c000233a:	74 06                	je     c0002342 <find_volume+0x1d>
c000233c:	77 62                	ja     c00023a0 <find_volume+0x7b>
c000233e:	85 db                	test   ebx,ebx
c0002340:	74 5e                	je     c00023a0 <find_volume+0x7b>
c0002342:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002346:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000234c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002352:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002356:	89 cf                	mov    edi,ecx
c0002358:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000235c:	89 e8                	mov    eax,ebp
c000235e:	83 c5 10             	add    ebp,0x10
c0002361:	e8 d6 f9 ff ff       	call   c0001d3c <ld_dword>
c0002366:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000236a:	89 01                	mov    DWORD PTR [ecx],eax
c000236c:	83 c1 04             	add    ecx,0x4
c000236f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002373:	75 e3                	jne    c0002358 <find_volume+0x33>
c0002375:	31 ed                	xor    ebp,ebp
c0002377:	85 db                	test   ebx,ebx
c0002379:	74 03                	je     c000237e <find_volume+0x59>
c000237b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000237e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002381:	b8 03 00 00 00       	mov    eax,0x3
c0002386:	85 d2                	test   edx,edx
c0002388:	74 0c                	je     c0002396 <find_volume+0x71>
c000238a:	89 f0                	mov    eax,esi
c000238c:	e8 06 ff ff ff       	call   c0002297 <check_fs>
c0002391:	83 f8 01             	cmp    eax,0x1
c0002394:	76 0a                	jbe    c00023a0 <find_volume+0x7b>
c0002396:	85 db                	test   ebx,ebx
c0002398:	75 06                	jne    c00023a0 <find_volume+0x7b>
c000239a:	45                   	inc    ebp
c000239b:	83 fd 03             	cmp    ebp,0x3
c000239e:	76 de                	jbe    c000237e <find_volume+0x59>
c00023a0:	83 c4 2c             	add    esp,0x2c
c00023a3:	5b                   	pop    ebx
c00023a4:	5e                   	pop    esi
c00023a5:	5f                   	pop    edi
c00023a6:	5d                   	pop    ebp
c00023a7:	c3                   	ret    

c00023a8 <mount_volume>:
c00023a8:	55                   	push   ebp
c00023a9:	89 d5                	mov    ebp,edx
c00023ab:	57                   	push   edi
c00023ac:	89 cf                	mov    edi,ecx
c00023ae:	56                   	push   esi
c00023af:	53                   	push   ebx
c00023b0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023b5:	83 ec 2c             	sub    esp,0x2c
c00023b8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023be:	e8 9b fd ff ff       	call   c000215e <get_ldnumber>
c00023c3:	85 c0                	test   eax,eax
c00023c5:	0f 88 d6 02 00 00    	js     c00026a1 <mount_volume+0x2f9>
c00023cb:	8b 34 85 60 01 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdfea0]
c00023d2:	89 c2                	mov    edx,eax
c00023d4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023d9:	85 f6                	test   esi,esi
c00023db:	0f 84 c0 02 00 00    	je     c00026a1 <mount_volume+0x2f9>
c00023e1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023e4:	83 e7 fe             	and    edi,0xfffffffe
c00023e7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023ea:	74 3a                	je     c0002426 <mount_volume+0x7e>
c00023ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023f0:	83 ec 0c             	sub    esp,0xc
c00023f3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023f7:	50                   	push   eax
c00023f8:	e8 e1 f8 ff ff       	call   c0001cde <disk_status>
c00023fd:	83 c4 10             	add    esp,0x10
c0002400:	a8 01                	test   al,0x1
c0002402:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002406:	75 1e                	jne    c0002426 <mount_volume+0x7e>
c0002408:	31 db                	xor    ebx,ebx
c000240a:	89 f9                	mov    ecx,edi
c000240c:	84 c9                	test   cl,cl
c000240e:	0f 84 8d 02 00 00    	je     c00026a1 <mount_volume+0x2f9>
c0002414:	a8 04                	test   al,0x4
c0002416:	0f 84 85 02 00 00    	je     c00026a1 <mount_volume+0x2f9>
c000241c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002421:	e9 7b 02 00 00       	jmp    c00026a1 <mount_volume+0x2f9>
c0002426:	83 ec 0c             	sub    esp,0xc
c0002429:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000242c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000242f:	0f b6 c2             	movzx  eax,dl
c0002432:	bb 03 00 00 00       	mov    ebx,0x3
c0002437:	50                   	push   eax
c0002438:	e8 a4 f8 ff ff       	call   c0001ce1 <disk_initialize>
c000243d:	83 c4 10             	add    esp,0x10
c0002440:	a8 01                	test   al,0x1
c0002442:	0f 85 59 02 00 00    	jne    c00026a1 <mount_volume+0x2f9>
c0002448:	89 f9                	mov    ecx,edi
c000244a:	84 c9                	test   cl,cl
c000244c:	74 04                	je     c0002452 <mount_volume+0xaa>
c000244e:	a8 04                	test   al,0x4
c0002450:	75 ca                	jne    c000241c <mount_volume+0x74>
c0002452:	31 d2                	xor    edx,edx
c0002454:	89 f0                	mov    eax,esi
c0002456:	bb 01 00 00 00       	mov    ebx,0x1
c000245b:	e8 c5 fe ff ff       	call   c0002325 <find_volume>
c0002460:	83 f8 04             	cmp    eax,0x4
c0002463:	0f 84 38 02 00 00    	je     c00026a1 <mount_volume+0x2f9>
c0002469:	83 f8 01             	cmp    eax,0x1
c000246c:	76 0a                	jbe    c0002478 <mount_volume+0xd0>
c000246e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002473:	e9 29 02 00 00       	jmp    c00026a1 <mount_volume+0x2f9>
c0002478:	8d 46 3f             	lea    eax,[esi+0x3f]
c000247b:	e8 af f8 ff ff       	call   c0001d2f <ld_word>
c0002480:	66 3d 00 02          	cmp    ax,0x200
c0002484:	75 e8                	jne    c000246e <mount_volume+0xc6>
c0002486:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002489:	e8 a1 f8 ff ff       	call   c0001d2f <ld_word>
c000248e:	0f b7 c0             	movzx  eax,ax
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	85 c0                	test   eax,eax
c0002497:	75 0c                	jne    c00024a5 <mount_volume+0xfd>
c0002499:	8d 46 58             	lea    eax,[esi+0x58]
c000249c:	e8 9b f8 ff ff       	call   c0001d3c <ld_dword>
c00024a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a5:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00024a8:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024b3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024b6:	89 e8                	mov    eax,ebp
c00024b8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024bb:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024be:	3c 01                	cmp    al,0x1
c00024c0:	77 ac                	ja     c000246e <mount_volume+0xc6>
c00024c2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024c6:	89 c3                	mov    ebx,eax
c00024c8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024cc:	66 85 c0             	test   ax,ax
c00024cf:	74 9d                	je     c000246e <mount_volume+0xc6>
c00024d1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024d4:	85 d8                	test   eax,ebx
c00024d6:	75 96                	jne    c000246e <mount_volume+0xc6>
c00024d8:	8d 46 45             	lea    eax,[esi+0x45]
c00024db:	e8 4f f8 ff ff       	call   c0001d2f <ld_word>
c00024e0:	89 c7                	mov    edi,eax
c00024e2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024e6:	a8 0f                	test   al,0xf
c00024e8:	75 84                	jne    c000246e <mount_volume+0xc6>
c00024ea:	8d 46 47             	lea    eax,[esi+0x47]
c00024ed:	e8 3d f8 ff ff       	call   c0001d2f <ld_word>
c00024f2:	0f b7 d0             	movzx  edx,ax
c00024f5:	85 d2                	test   edx,edx
c00024f7:	75 0a                	jne    c0002503 <mount_volume+0x15b>
c00024f9:	8d 46 54             	lea    eax,[esi+0x54]
c00024fc:	e8 3b f8 ff ff       	call   c0001d3c <ld_dword>
c0002501:	89 c2                	mov    edx,eax
c0002503:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002507:	8d 46 42             	lea    eax,[esi+0x42]
c000250a:	e8 20 f8 ff ff       	call   c0001d2f <ld_word>
c000250f:	66 85 c0             	test   ax,ax
c0002512:	0f 84 56 ff ff ff    	je     c000246e <mount_volume+0xc6>
c0002518:	89 e9                	mov    ecx,ebp
c000251a:	0f b7 c0             	movzx  eax,ax
c000251d:	0f b6 e9             	movzx  ebp,cl
c0002520:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002524:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002528:	89 f8                	mov    eax,edi
c000252a:	0f af cd             	imul   ecx,ebp
c000252d:	66 c1 e8 04          	shr    ax,0x4
c0002531:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002535:	0f b7 c0             	movzx  eax,ax
c0002538:	01 c8                	add    eax,ecx
c000253a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000253e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002542:	39 c2                	cmp    edx,eax
c0002544:	0f 82 24 ff ff ff    	jb     c000246e <mount_volume+0xc6>
c000254a:	29 c2                	sub    edx,eax
c000254c:	89 d5                	mov    ebp,edx
c000254e:	89 d0                	mov    eax,edx
c0002550:	31 d2                	xor    edx,edx
c0002552:	f7 f3                	div    ebx
c0002554:	39 dd                	cmp    ebp,ebx
c0002556:	0f 82 12 ff ff ff    	jb     c000246e <mount_volume+0xc6>
c000255c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002561:	0f 87 07 ff ff ff    	ja     c000246e <mount_volume+0xc6>
c0002567:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000256c:	0f 86 1f 01 00 00    	jbe    c0002691 <mount_volume+0x2e9>
c0002572:	bb 03 00 00 00       	mov    ebx,0x3
c0002577:	8d 68 02             	lea    ebp,[eax+0x2]
c000257a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000257e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002582:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002586:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002589:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000258c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002590:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002593:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002597:	83 fb 03             	cmp    ebx,0x3
c000259a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000259d:	75 21                	jne    c00025c0 <mount_volume+0x218>
c000259f:	8d 46 5e             	lea    eax,[esi+0x5e]
c00025a2:	e8 88 f7 ff ff       	call   c0001d2f <ld_word>
c00025a7:	66 09 c7             	or     di,ax
c00025aa:	0f 85 be fe ff ff    	jne    c000246e <mount_volume+0xc6>
c00025b0:	8d 46 60             	lea    eax,[esi+0x60]
c00025b3:	c1 e5 02             	shl    ebp,0x2
c00025b6:	e8 81 f7 ff ff       	call   c0001d3c <ld_dword>
c00025bb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025be:	eb 22                	jmp    c00025e2 <mount_volume+0x23a>
c00025c0:	66 85 ff             	test   di,di
c00025c3:	0f 84 a5 fe ff ff    	je     c000246e <mount_volume+0xc6>
c00025c9:	01 c8                	add    eax,ecx
c00025cb:	83 fb 02             	cmp    ebx,0x2
c00025ce:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025d1:	75 04                	jne    c00025d7 <mount_volume+0x22f>
c00025d3:	01 ed                	add    ebp,ebp
c00025d5:	eb 0b                	jmp    c00025e2 <mount_volume+0x23a>
c00025d7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025db:	83 e5 01             	and    ebp,0x1
c00025de:	d1 e8                	shr    eax,1
c00025e0:	01 c5                	add    ebp,eax
c00025e2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025e8:	c1 ed 09             	shr    ebp,0x9
c00025eb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025ef:	0f 87 79 fe ff ff    	ja     c000246e <mount_volume+0xc6>
c00025f5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025fc:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002603:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002607:	83 fb 03             	cmp    ebx,0x3
c000260a:	75 6e                	jne    c000267a <mount_volume+0x2d2>
c000260c:	8d 46 64             	lea    eax,[esi+0x64]
c000260f:	e8 1b f7 ff ff       	call   c0001d2f <ld_word>
c0002614:	66 48                	dec    ax
c0002616:	75 62                	jne    c000267a <mount_volume+0x2d2>
c0002618:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000261c:	89 f0                	mov    eax,esi
c000261e:	42                   	inc    edx
c000261f:	e8 31 fc ff ff       	call   c0002255 <move_window>
c0002624:	85 c0                	test   eax,eax
c0002626:	75 52                	jne    c000267a <mount_volume+0x2d2>
c0002628:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000262c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002632:	e8 f8 f6 ff ff       	call   c0001d2f <ld_word>
c0002637:	66 3d 55 aa          	cmp    ax,0xaa55
c000263b:	75 3d                	jne    c000267a <mount_volume+0x2d2>
c000263d:	8d 46 34             	lea    eax,[esi+0x34]
c0002640:	e8 f7 f6 ff ff       	call   c0001d3c <ld_dword>
c0002645:	3d 52 52 61 41       	cmp    eax,0x41615252
c000264a:	75 2e                	jne    c000267a <mount_volume+0x2d2>
c000264c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002652:	e8 e5 f6 ff ff       	call   c0001d3c <ld_dword>
c0002657:	3d 72 72 41 61       	cmp    eax,0x61417272
c000265c:	75 1c                	jne    c000267a <mount_volume+0x2d2>
c000265e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002664:	e8 d3 f6 ff ff       	call   c0001d3c <ld_dword>
c0002669:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000266c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002672:	e8 c5 f6 ff ff       	call   c0001d3c <ld_dword>
c0002677:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000267a:	66 a1 40 01 02 c0    	mov    ax,ds:0xc0020140
c0002680:	88 1e                	mov    BYTE PTR [esi],bl
c0002682:	40                   	inc    eax
c0002683:	31 db                	xor    ebx,ebx
c0002685:	66 a3 40 01 02 c0    	mov    ds:0xc0020140,ax
c000268b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000268f:	eb 10                	jmp    c00026a1 <mount_volume+0x2f9>
c0002691:	31 db                	xor    ebx,ebx
c0002693:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002698:	0f 97 c3             	seta   bl
c000269b:	43                   	inc    ebx
c000269c:	e9 d6 fe ff ff       	jmp    c0002577 <mount_volume+0x1cf>
c00026a1:	83 c4 2c             	add    esp,0x2c
c00026a4:	89 d8                	mov    eax,ebx
c00026a6:	5b                   	pop    ebx
c00026a7:	5e                   	pop    esi
c00026a8:	5f                   	pop    edi
c00026a9:	5d                   	pop    ebp
c00026aa:	c3                   	ret    

c00026ab <put_fat>:
c00026ab:	55                   	push   ebp
c00026ac:	bd 02 00 00 00       	mov    ebp,0x2
c00026b1:	57                   	push   edi
c00026b2:	56                   	push   esi
c00026b3:	53                   	push   ebx
c00026b4:	83 ec 1c             	sub    esp,0x1c
c00026b7:	83 fa 01             	cmp    edx,0x1
c00026ba:	0f 86 31 01 00 00    	jbe    c00027f1 <put_fat+0x146>
c00026c0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026c3:	0f 86 28 01 00 00    	jbe    c00027f1 <put_fat+0x146>
c00026c9:	89 c6                	mov    esi,eax
c00026cb:	89 cf                	mov    edi,ecx
c00026cd:	8a 00                	mov    al,BYTE PTR [eax]
c00026cf:	89 d3                	mov    ebx,edx
c00026d1:	3c 02                	cmp    al,0x2
c00026d3:	0f 84 ac 00 00 00    	je     c0002785 <put_fat+0xda>
c00026d9:	3c 03                	cmp    al,0x3
c00026db:	0f 84 d1 00 00 00    	je     c00027b2 <put_fat+0x107>
c00026e1:	fe c8                	dec    al
c00026e3:	0f 85 08 01 00 00    	jne    c00027f1 <put_fat+0x146>
c00026e9:	89 d1                	mov    ecx,edx
c00026eb:	89 f0                	mov    eax,esi
c00026ed:	d1 e9                	shr    ecx,1
c00026ef:	01 d1                	add    ecx,edx
c00026f1:	89 ca                	mov    edx,ecx
c00026f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026f7:	c1 ea 09             	shr    edx,0x9
c00026fa:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026fd:	e8 53 fb ff ff       	call   c0002255 <move_window>
c0002702:	89 c5                	mov    ebp,eax
c0002704:	85 c0                	test   eax,eax
c0002706:	0f 85 e5 00 00 00    	jne    c00027f1 <put_fat+0x146>
c000270c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002710:	8d 46 34             	lea    eax,[esi+0x34]
c0002713:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002717:	8d 41 01             	lea    eax,[ecx+0x1]
c000271a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002720:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002724:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002728:	89 f8                	mov    eax,edi
c000272a:	83 e3 01             	and    ebx,0x1
c000272d:	74 0c                	je     c000273b <put_fat+0x90>
c000272f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002731:	89 f8                	mov    eax,edi
c0002733:	83 e2 0f             	and    edx,0xf
c0002736:	c1 e0 04             	shl    eax,0x4
c0002739:	09 d0                	or     eax,edx
c000273b:	88 01                	mov    BYTE PTR [ecx],al
c000273d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002741:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002745:	c1 ea 09             	shr    edx,0x9
c0002748:	89 f0                	mov    eax,esi
c000274a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000274d:	e8 03 fb ff ff       	call   c0002255 <move_window>
c0002752:	89 c5                	mov    ebp,eax
c0002754:	85 c0                	test   eax,eax
c0002756:	0f 85 95 00 00 00    	jne    c00027f1 <put_fat+0x146>
c000275c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002760:	25 ff 01 00 00       	and    eax,0x1ff
c0002765:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002769:	85 db                	test   ebx,ebx
c000276b:	74 07                	je     c0002774 <put_fat+0xc9>
c000276d:	c1 ef 04             	shr    edi,0x4
c0002770:	89 f9                	mov    ecx,edi
c0002772:	eb 0d                	jmp    c0002781 <put_fat+0xd6>
c0002774:	8a 08                	mov    cl,BYTE PTR [eax]
c0002776:	c1 ef 08             	shr    edi,0x8
c0002779:	83 e1 f0             	and    ecx,0xfffffff0
c000277c:	83 e7 0f             	and    edi,0xf
c000277f:	09 f9                	or     ecx,edi
c0002781:	88 08                	mov    BYTE PTR [eax],cl
c0002783:	eb 27                	jmp    c00027ac <put_fat+0x101>
c0002785:	c1 ea 08             	shr    edx,0x8
c0002788:	89 f0                	mov    eax,esi
c000278a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000278d:	e8 c3 fa ff ff       	call   c0002255 <move_window>
c0002792:	89 c5                	mov    ebp,eax
c0002794:	85 c0                	test   eax,eax
c0002796:	75 59                	jne    c00027f1 <put_fat+0x146>
c0002798:	01 db                	add    ebx,ebx
c000279a:	0f b7 d7             	movzx  edx,di
c000279d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00027a3:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00027a7:	e8 a8 f5 ff ff       	call   c0001d54 <st_word>
c00027ac:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027b0:	eb 3f                	jmp    c00027f1 <put_fat+0x146>
c00027b2:	c1 ea 07             	shr    edx,0x7
c00027b5:	89 f0                	mov    eax,esi
c00027b7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027ba:	e8 96 fa ff ff       	call   c0002255 <move_window>
c00027bf:	89 c5                	mov    ebp,eax
c00027c1:	85 c0                	test   eax,eax
c00027c3:	75 2c                	jne    c00027f1 <put_fat+0x146>
c00027c5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027cb:	c1 e3 02             	shl    ebx,0x2
c00027ce:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027d4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 5d f5 ff ff       	call   c0001d3c <ld_dword>
c00027df:	25 00 00 00 f0       	and    eax,0xf0000000
c00027e4:	09 f8                	or     eax,edi
c00027e6:	89 c2                	mov    edx,eax
c00027e8:	89 d8                	mov    eax,ebx
c00027ea:	e8 69 f5 ff ff       	call   c0001d58 <st_dword>
c00027ef:	eb bb                	jmp    c00027ac <put_fat+0x101>
c00027f1:	83 c4 1c             	add    esp,0x1c
c00027f4:	89 e8                	mov    eax,ebp
c00027f6:	5b                   	pop    ebx
c00027f7:	5e                   	pop    esi
c00027f8:	5f                   	pop    edi
c00027f9:	5d                   	pop    ebp
c00027fa:	c3                   	ret    

c00027fb <dir_clear>:
c00027fb:	55                   	push   ebp
c00027fc:	57                   	push   edi
c00027fd:	56                   	push   esi
c00027fe:	89 c6                	mov    esi,eax
c0002800:	53                   	push   ebx
c0002801:	83 ec 1c             	sub    esp,0x1c
c0002804:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002808:	e8 e5 f9 ff ff       	call   c00021f2 <sync_window>
c000280d:	85 c0                	test   eax,eax
c000280f:	0f 85 c0 00 00 00    	jne    c00028d5 <dir_clear+0xda>
c0002815:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002819:	89 f0                	mov    eax,esi
c000281b:	e8 55 f7 ff ff       	call   c0001f75 <clst2sect>
c0002820:	31 d2                	xor    edx,edx
c0002822:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002825:	89 c5                	mov    ebp,eax
c0002827:	b9 00 02 00 00       	mov    ecx,0x200
c000282c:	8d 46 34             	lea    eax,[esi+0x34]
c000282f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002833:	e8 38 f5 ff ff       	call   c0001d70 <mem_set>
c0002838:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000283c:	c1 e3 09             	shl    ebx,0x9
c000283f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002845:	76 1b                	jbe    c0002862 <dir_clear+0x67>
c0002847:	bb 00 80 00 00       	mov    ebx,0x8000
c000284c:	eb 14                	jmp    c0002862 <dir_clear+0x67>
c000284e:	83 ec 0c             	sub    esp,0xc
c0002851:	53                   	push   ebx
c0002852:	e8 25 32 00 00       	call   c0005a7c <ff_memalloc>
c0002857:	83 c4 10             	add    esp,0x10
c000285a:	89 c7                	mov    edi,eax
c000285c:	85 c0                	test   eax,eax
c000285e:	75 7c                	jne    c00028dc <dir_clear+0xe1>
c0002860:	d1 eb                	shr    ebx,1
c0002862:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002868:	77 e4                	ja     c000284e <dir_clear+0x53>
c000286a:	31 db                	xor    ebx,ebx
c000286c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002870:	39 d8                	cmp    eax,ebx
c0002872:	76 53                	jbe    c00028c7 <dir_clear+0xcc>
c0002874:	6a 01                	push   0x1
c0002876:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002879:	50                   	push   eax
c000287a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000287e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002882:	50                   	push   eax
c0002883:	e8 72 f4 ff ff       	call   c0001cfa <disk_write>
c0002888:	83 c4 10             	add    esp,0x10
c000288b:	85 c0                	test   eax,eax
c000288d:	75 38                	jne    c00028c7 <dir_clear+0xcc>
c000288f:	43                   	inc    ebx
c0002890:	eb da                	jmp    c000286c <dir_clear+0x71>
c0002892:	52                   	push   edx
c0002893:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002896:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000289a:	50                   	push   eax
c000289b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000289f:	57                   	push   edi
c00028a0:	50                   	push   eax
c00028a1:	e8 54 f4 ff ff       	call   c0001cfa <disk_write>
c00028a6:	83 c4 10             	add    esp,0x10
c00028a9:	85 c0                	test   eax,eax
c00028ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028af:	75 0a                	jne    c00028bb <dir_clear+0xc0>
c00028b1:	01 d3                	add    ebx,edx
c00028b3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028b7:	39 d8                	cmp    eax,ebx
c00028b9:	77 d7                	ja     c0002892 <dir_clear+0x97>
c00028bb:	83 ec 0c             	sub    esp,0xc
c00028be:	57                   	push   edi
c00028bf:	e8 d0 31 00 00       	call   c0005a94 <ff_memfree>
c00028c4:	83 c4 10             	add    esp,0x10
c00028c7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028cb:	39 d8                	cmp    eax,ebx
c00028cd:	0f 95 c0             	setne  al
c00028d0:	0f b6 c0             	movzx  eax,al
c00028d3:	eb 19                	jmp    c00028ee <dir_clear+0xf3>
c00028d5:	b8 01 00 00 00       	mov    eax,0x1
c00028da:	eb 12                	jmp    c00028ee <dir_clear+0xf3>
c00028dc:	89 d9                	mov    ecx,ebx
c00028de:	31 d2                	xor    edx,edx
c00028e0:	e8 8b f4 ff ff       	call   c0001d70 <mem_set>
c00028e5:	89 da                	mov    edx,ebx
c00028e7:	31 db                	xor    ebx,ebx
c00028e9:	c1 ea 09             	shr    edx,0x9
c00028ec:	eb c5                	jmp    c00028b3 <dir_clear+0xb8>
c00028ee:	83 c4 1c             	add    esp,0x1c
c00028f1:	5b                   	pop    ebx
c00028f2:	5e                   	pop    esi
c00028f3:	5f                   	pop    edi
c00028f4:	5d                   	pop    ebp
c00028f5:	c3                   	ret    

c00028f6 <create_name>:
c00028f6:	55                   	push   ebp
c00028f7:	89 d5                	mov    ebp,edx
c00028f9:	57                   	push   edi
c00028fa:	89 c7                	mov    edi,eax
c00028fc:	56                   	push   esi
c00028fd:	31 f6                	xor    esi,esi
c00028ff:	53                   	push   ebx
c0002900:	83 ec 3c             	sub    esp,0x3c
c0002903:	8b 02                	mov    eax,DWORD PTR [edx]
c0002905:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002909:	8b 07                	mov    eax,DWORD PTR [edi]
c000290b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000290e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002912:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002916:	e8 9b f4 ff ff       	call   c0001db6 <tchar2uni>
c000291b:	89 c3                	mov    ebx,eax
c000291d:	83 f8 ff             	cmp    eax,0xffffffff
c0002920:	75 0a                	jne    c000292c <create_name+0x36>
c0002922:	b8 06 00 00 00       	mov    eax,0x6
c0002927:	e9 9e 02 00 00       	jmp    c0002bca <create_name+0x2d4>
c000292c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002931:	76 0c                	jbe    c000293f <create_name+0x49>
c0002933:	c1 e8 10             	shr    eax,0x10
c0002936:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000293a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000293e:	46                   	inc    esi
c000293f:	66 83 fb 1f          	cmp    bx,0x1f
c0002943:	76 4f                	jbe    c0002994 <create_name+0x9e>
c0002945:	66 83 fb 5c          	cmp    bx,0x5c
c0002949:	74 35                	je     c0002980 <create_name+0x8a>
c000294b:	66 83 fb 2f          	cmp    bx,0x2f
c000294f:	74 2f                	je     c0002980 <create_name+0x8a>
c0002951:	66 83 fb 7f          	cmp    bx,0x7f
c0002955:	77 11                	ja     c0002968 <create_name+0x72>
c0002957:	0f b7 d3             	movzx  edx,bx
c000295a:	b8 c2 ce 01 c0       	mov    eax,0xc001cec2
c000295f:	e8 3a f4 ff ff       	call   c0001d9e <chk_chr>
c0002964:	85 c0                	test   eax,eax
c0002966:	75 ba                	jne    c0002922 <create_name+0x2c>
c0002968:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000296e:	77 b2                	ja     c0002922 <create_name+0x2c>
c0002970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002974:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002978:	46                   	inc    esi
c0002979:	eb 97                	jmp    c0002912 <create_name+0x1c>
c000297b:	40                   	inc    eax
c000297c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002980:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002984:	8a 10                	mov    dl,BYTE PTR [eax]
c0002986:	80 fa 2f             	cmp    dl,0x2f
c0002989:	74 f0                	je     c000297b <create_name+0x85>
c000298b:	80 fa 5c             	cmp    dl,0x5c
c000298e:	74 eb                	je     c000297b <create_name+0x85>
c0002990:	31 db                	xor    ebx,ebx
c0002992:	eb 02                	jmp    c0002996 <create_name+0xa0>
c0002994:	b3 04                	mov    bl,0x4
c0002996:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000299a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000299d:	85 f6                	test   esi,esi
c000299f:	74 18                	je     c00029b9 <create_name+0xc3>
c00029a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029a5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029aa:	66 83 f8 20          	cmp    ax,0x20
c00029ae:	74 06                	je     c00029b6 <create_name+0xc0>
c00029b0:	66 83 f8 2e          	cmp    ax,0x2e
c00029b4:	75 03                	jne    c00029b9 <create_name+0xc3>
c00029b6:	4e                   	dec    esi
c00029b7:	eb e4                	jmp    c000299d <create_name+0xa7>
c00029b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029bd:	31 ed                	xor    ebp,ebp
c00029bf:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029c5:	85 f6                	test   esi,esi
c00029c7:	0f 84 55 ff ff ff    	je     c0002922 <create_name+0x2c>
c00029cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029d1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029d4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029d8:	66 83 f8 20          	cmp    ax,0x20
c00029dc:	75 04                	jne    c00029e2 <create_name+0xec>
c00029de:	89 d5                	mov    ebp,edx
c00029e0:	eb eb                	jmp    c00029cd <create_name+0xd7>
c00029e2:	85 ed                	test   ebp,ebp
c00029e4:	75 06                	jne    c00029ec <create_name+0xf6>
c00029e6:	66 83 f8 2e          	cmp    ax,0x2e
c00029ea:	75 08                	jne    c00029f4 <create_name+0xfe>
c00029ec:	83 cb 03             	or     ebx,0x3
c00029ef:	eb 03                	jmp    c00029f4 <create_name+0xfe>
c00029f1:	4e                   	dec    esi
c00029f2:	74 0c                	je     c0002a00 <create_name+0x10a>
c00029f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029f8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029fe:	75 f1                	jne    c00029f1 <create_name+0xfb>
c0002a00:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a05:	8d 47 20             	lea    eax,[edi+0x20]
c0002a08:	ba 20 00 00 00       	mov    edx,0x20
c0002a0d:	e8 5e f3 ff ff       	call   c0001d70 <mem_set>
c0002a12:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a1a:	31 c9                	xor    ecx,ecx
c0002a1c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a21:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a24:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a2c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a30:	66 85 ed             	test   bp,bp
c0002a33:	0f 84 30 01 00 00    	je     c0002b69 <create_name+0x273>
c0002a39:	66 83 fd 20          	cmp    bp,0x20
c0002a3d:	74 10                	je     c0002a4f <create_name+0x159>
c0002a3f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a43:	75 13                	jne    c0002a58 <create_name+0x162>
c0002a45:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a49:	0f 84 6b 01 00 00    	je     c0002bba <create_name+0x2c4>
c0002a4f:	83 cb 03             	or     ebx,0x3
c0002a52:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a56:	eb c9                	jmp    c0002a21 <create_name+0x12b>
c0002a58:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a5c:	73 0b                	jae    c0002a69 <create_name+0x173>
c0002a5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a62:	75 47                	jne    c0002aab <create_name+0x1b5>
c0002a64:	e9 51 01 00 00       	jmp    c0002bba <create_name+0x2c4>
c0002a69:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a6e:	75 10                	jne    c0002a80 <create_name+0x18a>
c0002a70:	83 cb 03             	or     ebx,0x3
c0002a73:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a7b:	e9 e9 00 00 00       	jmp    c0002b69 <create_name+0x273>
c0002a80:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a84:	74 0d                	je     c0002a93 <create_name+0x19d>
c0002a86:	83 cb 03             	or     ebx,0x3
c0002a89:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a8d:	0f 87 d6 00 00 00    	ja     c0002b69 <create_name+0x273>
c0002a93:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a9c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002aa4:	b9 08 00 00 00       	mov    ecx,0x8
c0002aa9:	eb a7                	jmp    c0002a52 <create_name+0x15c>
c0002aab:	66 83 fd 7f          	cmp    bp,0x7f
c0002aaf:	76 68                	jbe    c0002b19 <create_name+0x223>
c0002ab1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ab5:	88 da                	mov    dl,bl
c0002ab7:	83 ca 02             	or     edx,0x2
c0002aba:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002abe:	50                   	push   eax
c0002abf:	50                   	push   eax
c0002ac0:	68 b5 01 00 00       	push   0x1b5
c0002ac5:	55                   	push   ebp
c0002ac6:	e8 e1 2f 00 00       	call   c0005aac <ff_uni2oem>
c0002acb:	83 c4 10             	add    esp,0x10
c0002ace:	89 c5                	mov    ebp,eax
c0002ad0:	a8 80                	test   al,0x80
c0002ad2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ad6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ada:	74 0c                	je     c0002ae8 <create_name+0x1f2>
c0002adc:	83 e5 7f             	and    ebp,0x7f
c0002adf:	0f b6 ad 80 cf 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe3080]
c0002ae6:	eb 2a                	jmp    c0002b12 <create_name+0x21c>
c0002ae8:	66 3d ff 00          	cmp    ax,0xff
c0002aec:	76 24                	jbe    c0002b12 <create_name+0x21c>
c0002aee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002af2:	48                   	dec    eax
c0002af3:	39 c8                	cmp    eax,ecx
c0002af5:	77 0c                	ja     c0002b03 <create_name+0x20d>
c0002af7:	83 cb 03             	or     ebx,0x3
c0002afa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002afe:	e9 4f ff ff ff       	jmp    c0002a52 <create_name+0x15c>
c0002b03:	89 e8                	mov    eax,ebp
c0002b05:	88 d3                	mov    bl,dl
c0002b07:	66 c1 e8 08          	shr    ax,0x8
c0002b0b:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b0f:	41                   	inc    ecx
c0002b10:	eb 4b                	jmp    c0002b5d <create_name+0x267>
c0002b12:	88 d3                	mov    bl,dl
c0002b14:	66 85 ed             	test   bp,bp
c0002b17:	74 19                	je     c0002b32 <create_name+0x23c>
c0002b19:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b1d:	0f b7 d5             	movzx  edx,bp
c0002b20:	b8 cb ce 01 c0       	mov    eax,0xc001cecb
c0002b25:	e8 74 f2 ff ff       	call   c0001d9e <chk_chr>
c0002b2a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b2e:	85 c0                	test   eax,eax
c0002b30:	74 0a                	je     c0002b3c <create_name+0x246>
c0002b32:	83 cb 03             	or     ebx,0x3
c0002b35:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b3a:	eb 21                	jmp    c0002b5d <create_name+0x267>
c0002b3c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 07                	ja     c0002b4c <create_name+0x256>
c0002b45:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b4a:	eb 11                	jmp    c0002b5d <create_name+0x267>
c0002b4c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b4f:	66 83 f8 19          	cmp    ax,0x19
c0002b53:	77 08                	ja     c0002b5d <create_name+0x267>
c0002b55:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b5a:	83 ed 20             	sub    ebp,0x20
c0002b5d:	89 e8                	mov    eax,ebp
c0002b5f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b63:	41                   	inc    ecx
c0002b64:	e9 e9 fe ff ff       	jmp    c0002a52 <create_name+0x15c>
c0002b69:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b6d:	75 04                	jne    c0002b73 <create_name+0x27d>
c0002b6f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b73:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b78:	75 05                	jne    c0002b7f <create_name+0x289>
c0002b7a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b7f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b83:	83 e0 0c             	and    eax,0xc
c0002b86:	3c 0c                	cmp    al,0xc
c0002b88:	74 0b                	je     c0002b95 <create_name+0x29f>
c0002b8a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b8e:	83 e0 03             	and    eax,0x3
c0002b91:	3c 03                	cmp    al,0x3
c0002b93:	75 05                	jne    c0002b9a <create_name+0x2a4>
c0002b95:	83 cb 02             	or     ebx,0x2
c0002b98:	eb 19                	jmp    c0002bb3 <create_name+0x2bd>
c0002b9a:	f6 c3 02             	test   bl,0x2
c0002b9d:	75 14                	jne    c0002bb3 <create_name+0x2bd>
c0002b9f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002ba4:	74 03                	je     c0002ba9 <create_name+0x2b3>
c0002ba6:	83 cb 10             	or     ebx,0x10
c0002ba9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002bae:	74 03                	je     c0002bb3 <create_name+0x2bd>
c0002bb0:	83 cb 08             	or     ebx,0x8
c0002bb3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002bb6:	31 c0                	xor    eax,eax
c0002bb8:	eb 10                	jmp    c0002bca <create_name+0x2d4>
c0002bba:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002bbf:	0f 85 ce fe ff ff    	jne    c0002a93 <create_name+0x19d>
c0002bc5:	e9 a6 fe ff ff       	jmp    c0002a70 <create_name+0x17a>
c0002bca:	83 c4 3c             	add    esp,0x3c
c0002bcd:	5b                   	pop    ebx
c0002bce:	5e                   	pop    esi
c0002bcf:	5f                   	pop    edi
c0002bd0:	5d                   	pop    ebp
c0002bd1:	c3                   	ret    

c0002bd2 <cmp_lfn>:
c0002bd2:	55                   	push   ebp
c0002bd3:	57                   	push   edi
c0002bd4:	89 d7                	mov    edi,edx
c0002bd6:	56                   	push   esi
c0002bd7:	53                   	push   ebx
c0002bd8:	83 ec 1c             	sub    esp,0x1c
c0002bdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bdf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002be2:	e8 48 f1 ff ff       	call   c0001d2f <ld_word>
c0002be7:	66 85 c0             	test   ax,ax
c0002bea:	74 07                	je     c0002bf3 <cmp_lfn+0x21>
c0002bec:	31 c0                	xor    eax,eax
c0002bee:	e9 9a 00 00 00       	jmp    c0002c8d <cmp_lfn+0xbb>
c0002bf3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002bf5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bfa:	83 e3 3f             	and    ebx,0x3f
c0002bfd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002c05:	4b                   	dec    ebx
c0002c06:	6b db 0d             	imul   ebx,ebx,0xd
c0002c09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002c0d:	0f b6 80 00 d0 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3000]
c0002c14:	01 f8                	add    eax,edi
c0002c16:	e8 14 f1 ff ff       	call   c0001d2f <ld_word>
c0002c1b:	66 85 ed             	test   bp,bp
c0002c1e:	89 c6                	mov    esi,eax
c0002c20:	74 3c                	je     c0002c5e <cmp_lfn+0x8c>
c0002c22:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c28:	77 c2                	ja     c0002bec <cmp_lfn+0x1a>
c0002c2a:	83 ec 0c             	sub    esp,0xc
c0002c2d:	0f b7 c0             	movzx  eax,ax
c0002c30:	50                   	push   eax
c0002c31:	e8 8e 2f 00 00       	call   c0005bc4 <ff_wtoupper>
c0002c36:	89 c5                	mov    ebp,eax
c0002c38:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c3b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c3f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c43:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c47:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c4a:	e8 75 2f 00 00       	call   c0005bc4 <ff_wtoupper>
c0002c4f:	83 c4 10             	add    esp,0x10
c0002c52:	39 c5                	cmp    ebp,eax
c0002c54:	75 96                	jne    c0002bec <cmp_lfn+0x1a>
c0002c56:	89 f5                	mov    ebp,esi
c0002c58:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c5c:	eb 04                	jmp    c0002c62 <cmp_lfn+0x90>
c0002c5e:	66 46                	inc    si
c0002c60:	75 8a                	jne    c0002bec <cmp_lfn+0x1a>
c0002c62:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c66:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c6b:	75 9c                	jne    c0002c09 <cmp_lfn+0x37>
c0002c6d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c70:	74 16                	je     c0002c88 <cmp_lfn+0xb6>
c0002c72:	66 85 ed             	test   bp,bp
c0002c75:	74 11                	je     c0002c88 <cmp_lfn+0xb6>
c0002c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c7b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c80:	0f 94 c0             	sete   al
c0002c83:	0f b6 c0             	movzx  eax,al
c0002c86:	eb 05                	jmp    c0002c8d <cmp_lfn+0xbb>
c0002c88:	b8 01 00 00 00       	mov    eax,0x1
c0002c8d:	83 c4 1c             	add    esp,0x1c
c0002c90:	5b                   	pop    ebx
c0002c91:	5e                   	pop    esi
c0002c92:	5f                   	pop    edi
c0002c93:	5d                   	pop    ebp
c0002c94:	c3                   	ret    

c0002c95 <sync_fs>:
c0002c95:	56                   	push   esi
c0002c96:	53                   	push   ebx
c0002c97:	53                   	push   ebx
c0002c98:	89 c3                	mov    ebx,eax
c0002c9a:	e8 53 f5 ff ff       	call   c00021f2 <sync_window>
c0002c9f:	85 c0                	test   eax,eax
c0002ca1:	0f 85 9a 00 00 00    	jne    c0002d41 <sync_fs+0xac>
c0002ca7:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002caa:	75 7b                	jne    c0002d27 <sync_fs+0x92>
c0002cac:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002cb0:	75 75                	jne    c0002d27 <sync_fs+0x92>
c0002cb2:	b9 00 02 00 00       	mov    ecx,0x200
c0002cb7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002cba:	31 d2                	xor    edx,edx
c0002cbc:	89 f0                	mov    eax,esi
c0002cbe:	e8 ad f0 ff ff       	call   c0001d70 <mem_set>
c0002cc3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cc9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cce:	e8 81 f0 ff ff       	call   c0001d54 <st_word>
c0002cd3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cd8:	89 f0                	mov    eax,esi
c0002cda:	e8 79 f0 ff ff       	call   c0001d58 <st_dword>
c0002cdf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002ce5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cea:	e8 69 f0 ff ff       	call   c0001d58 <st_dword>
c0002cef:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002cf2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002cf8:	e8 5b f0 ff ff       	call   c0001d58 <st_dword>
c0002cfd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d00:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d06:	e8 4d f0 ff ff       	call   c0001d58 <st_dword>
c0002d0b:	6a 01                	push   0x1
c0002d0d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d10:	40                   	inc    eax
c0002d11:	50                   	push   eax
c0002d12:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d15:	56                   	push   esi
c0002d16:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1a:	50                   	push   eax
c0002d1b:	e8 da ef ff ff       	call   c0001cfa <disk_write>
c0002d20:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d24:	83 c4 10             	add    esp,0x10
c0002d27:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d2b:	51                   	push   ecx
c0002d2c:	6a 00                	push   0x0
c0002d2e:	6a 00                	push   0x0
c0002d30:	50                   	push   eax
c0002d31:	e8 da ef ff ff       	call   c0001d10 <disk_ioctl>
c0002d36:	83 c4 10             	add    esp,0x10
c0002d39:	85 c0                	test   eax,eax
c0002d3b:	0f 95 c0             	setne  al
c0002d3e:	0f b6 c0             	movzx  eax,al
c0002d41:	5a                   	pop    edx
c0002d42:	5b                   	pop    ebx
c0002d43:	5e                   	pop    esi
c0002d44:	c3                   	ret    

c0002d45 <create_partition>:
c0002d45:	55                   	push   ebp
c0002d46:	0f b6 c0             	movzx  eax,al
c0002d49:	57                   	push   edi
c0002d4a:	56                   	push   esi
c0002d4b:	53                   	push   ebx
c0002d4c:	83 ec 40             	sub    esp,0x40
c0002d4f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d53:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d57:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d5b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d5f:	50                   	push   eax
c0002d60:	6a 01                	push   0x1
c0002d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d66:	e8 a5 ef ff ff       	call   c0001d10 <disk_ioctl>
c0002d6b:	83 c4 10             	add    esp,0x10
c0002d6e:	85 c0                	test   eax,eax
c0002d70:	0f 85 69 01 00 00    	jne    c0002edf <create_partition+0x19a>
c0002d76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d7a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d83:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d88:	31 d2                	xor    edx,edx
c0002d8a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d93:	f7 f3                	div    ebx
c0002d95:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d9a:	76 0c                	jbe    c0002da8 <create_partition+0x63>
c0002d9c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002da0:	49                   	dec    ecx
c0002da1:	75 e5                	jne    c0002d88 <create_partition+0x43>
c0002da3:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002da8:	b9 00 02 00 00       	mov    ecx,0x200
c0002dad:	31 d2                	xor    edx,edx
c0002daf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002db3:	e8 b8 ef ff ff       	call   c0001d70 <mem_set>
c0002db8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dc1:	31 d2                	xor    edx,edx
c0002dc3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dcb:	f7 f1                	div    ecx
c0002dcd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dda:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002de0:	85 c9                	test   ecx,ecx
c0002de2:	75 34                	jne    c0002e18 <create_partition+0xd3>
c0002de4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002de8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ded:	05 fe 01 00 00       	add    eax,0x1fe
c0002df2:	e8 5d ef ff ff       	call   c0001d54 <st_word>
c0002df7:	6a 01                	push   0x1
c0002df9:	6a 00                	push   0x0
c0002dfb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002dff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002e03:	e8 f2 ee ff ff       	call   c0001cfa <disk_write>
c0002e08:	83 c4 10             	add    esp,0x10
c0002e0b:	85 c0                	test   eax,eax
c0002e0d:	0f 95 c0             	setne  al
c0002e10:	0f b6 c0             	movzx  eax,al
c0002e13:	e9 cc 00 00 00       	jmp    c0002ee4 <create_partition+0x19f>
c0002e18:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e1c:	76 c6                	jbe    c0002de4 <create_partition+0x9f>
c0002e1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e22:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e26:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e29:	83 fe 64             	cmp    esi,0x64
c0002e2c:	77 0d                	ja     c0002e3b <create_partition+0xf6>
c0002e2e:	74 07                	je     c0002e37 <create_partition+0xf2>
c0002e30:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e35:	eb 04                	jmp    c0002e3b <create_partition+0xf6>
c0002e37:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e3b:	31 c0                	xor    eax,eax
c0002e3d:	89 f2                	mov    edx,esi
c0002e3f:	01 ca                	add    edx,ecx
c0002e41:	0f 92 c0             	setb   al
c0002e44:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e48:	77 04                	ja     c0002e4e <create_partition+0x109>
c0002e4a:	85 c0                	test   eax,eax
c0002e4c:	74 08                	je     c0002e56 <create_partition+0x111>
c0002e4e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e52:	29 ce                	sub    esi,ecx
c0002e54:	eb 04                	jmp    c0002e5a <create_partition+0x115>
c0002e56:	85 f6                	test   esi,esi
c0002e58:	74 8a                	je     c0002de4 <create_partition+0x9f>
c0002e5a:	89 ca                	mov    edx,ecx
c0002e5c:	89 d8                	mov    eax,ebx
c0002e5e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e63:	e8 f0 ee ff ff       	call   c0001d58 <st_dword>
c0002e68:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e6b:	89 f2                	mov    edx,esi
c0002e6d:	83 c3 10             	add    ebx,0x10
c0002e70:	e8 e3 ee ff ff       	call   c0001d58 <st_dword>
c0002e75:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e7a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e7e:	31 d2                	xor    edx,edx
c0002e80:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e83:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e87:	89 c8                	mov    eax,ecx
c0002e89:	01 f1                	add    ecx,esi
c0002e8b:	f7 f5                	div    ebp
c0002e8d:	89 d5                	mov    ebp,edx
c0002e8f:	31 d2                	xor    edx,edx
c0002e91:	45                   	inc    ebp
c0002e92:	f7 f7                	div    edi
c0002e94:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e97:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e9a:	89 c2                	mov    edx,eax
c0002e9c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e9f:	c1 ea 02             	shr    edx,0x2
c0002ea2:	83 e2 c0             	and    edx,0xffffffc0
c0002ea5:	09 ea                	or     edx,ebp
c0002ea7:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002eac:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002eaf:	31 d2                	xor    edx,edx
c0002eb1:	f7 f5                	div    ebp
c0002eb3:	89 d6                	mov    esi,edx
c0002eb5:	31 d2                	xor    edx,edx
c0002eb7:	46                   	inc    esi
c0002eb8:	f7 f7                	div    edi
c0002eba:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ebd:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ec0:	89 c7                	mov    edi,eax
c0002ec2:	c1 ef 02             	shr    edi,0x2
c0002ec5:	83 e7 c0             	and    edi,0xffffffc0
c0002ec8:	09 fe                	or     esi,edi
c0002eca:	89 f2                	mov    edx,esi
c0002ecc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ecf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ed4:	0f 85 06 ff ff ff    	jne    c0002de0 <create_partition+0x9b>
c0002eda:	e9 05 ff ff ff       	jmp    c0002de4 <create_partition+0x9f>
c0002edf:	b8 01 00 00 00       	mov    eax,0x1
c0002ee4:	83 c4 3c             	add    esp,0x3c
c0002ee7:	5b                   	pop    ebx
c0002ee8:	5e                   	pop    esi
c0002ee9:	5f                   	pop    edi
c0002eea:	5d                   	pop    ebp
c0002eeb:	c3                   	ret    

c0002eec <get_fileinfo>:
c0002eec:	55                   	push   ebp
c0002eed:	57                   	push   edi
c0002eee:	56                   	push   esi
c0002eef:	53                   	push   ebx
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ef5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ef9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002efd:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f01:	0f 84 c1 01 00 00    	je     c00030c8 <get_fileinfo+0x1dc>
c0002f07:	89 d3                	mov    ebx,edx
c0002f09:	89 c6                	mov    esi,eax
c0002f0b:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f0f:	74 6a                	je     c0002f7b <get_fileinfo+0x8f>
c0002f11:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f19:	31 ed                	xor    ebp,ebp
c0002f1b:	31 ff                	xor    edi,edi
c0002f1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f25:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f28:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f2c:	66 85 d2             	test   dx,dx
c0002f2f:	74 3e                	je     c0002f6f <get_fileinfo+0x83>
c0002f31:	66 85 ed             	test   bp,bp
c0002f34:	75 0c                	jne    c0002f42 <get_fileinfo+0x56>
c0002f36:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f3c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f40:	76 22                	jbe    c0002f64 <get_fileinfo+0x78>
c0002f42:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f47:	89 e8                	mov    eax,ebp
c0002f49:	29 f9                	sub    ecx,edi
c0002f4b:	c1 e0 10             	shl    eax,0x10
c0002f4e:	09 d0                	or     eax,edx
c0002f50:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f54:	e8 23 ef ff ff       	call   c0001e7c <put_utf>
c0002f59:	84 c0                	test   al,al
c0002f5b:	74 10                	je     c0002f6d <get_fileinfo+0x81>
c0002f5d:	0f b6 c0             	movzx  eax,al
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	01 c7                	add    edi,eax
c0002f64:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f69:	89 d5                	mov    ebp,edx
c0002f6b:	eb b0                	jmp    c0002f1d <get_fileinfo+0x31>
c0002f6d:	31 ff                	xor    edi,edi
c0002f6f:	66 85 ed             	test   bp,bp
c0002f72:	74 02                	je     c0002f76 <get_fileinfo+0x8a>
c0002f74:	31 ff                	xor    edi,edi
c0002f76:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f7b:	31 ff                	xor    edi,edi
c0002f7d:	31 c9                	xor    ecx,ecx
c0002f7f:	83 f9 0a             	cmp    ecx,0xa
c0002f82:	0f 87 ad 00 00 00    	ja     c0003035 <get_fileinfo+0x149>
c0002f88:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f8b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f8e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f92:	66 83 fa 20          	cmp    dx,0x20
c0002f96:	0f 84 92 00 00 00    	je     c000302e <get_fileinfo+0x142>
c0002f9c:	66 83 fa 05          	cmp    dx,0x5
c0002fa0:	75 05                	jne    c0002fa7 <get_fileinfo+0xbb>
c0002fa2:	ba e5 00 00 00       	mov    edx,0xe5
c0002fa7:	83 ff 0b             	cmp    edi,0xb
c0002faa:	77 0b                	ja     c0002fb7 <get_fileinfo+0xcb>
c0002fac:	83 fd 09             	cmp    ebp,0x9
c0002faf:	75 06                	jne    c0002fb7 <get_fileinfo+0xcb>
c0002fb1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fb6:	47                   	inc    edi
c0002fb7:	0f b7 c2             	movzx  eax,dx
c0002fba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fbe:	e8 ed ed ff ff       	call   c0001db0 <dbc_1st>
c0002fc3:	85 c0                	test   eax,eax
c0002fc5:	74 2f                	je     c0002ff6 <get_fileinfo+0x10a>
c0002fc7:	83 fd 08             	cmp    ebp,0x8
c0002fca:	74 2a                	je     c0002ff6 <get_fileinfo+0x10a>
c0002fcc:	83 fd 0b             	cmp    ebp,0xb
c0002fcf:	74 25                	je     c0002ff6 <get_fileinfo+0x10a>
c0002fd1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fd4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fd8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fdc:	e8 d2 ed ff ff       	call   c0001db3 <dbc_2nd>
c0002fe1:	85 c0                	test   eax,eax
c0002fe3:	74 11                	je     c0002ff6 <get_fileinfo+0x10a>
c0002fe5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fe9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fee:	c1 e2 08             	shl    edx,0x8
c0002ff1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002ff4:	09 c2                	or     edx,eax
c0002ff6:	0f b7 d2             	movzx  edx,dx
c0002ff9:	50                   	push   eax
c0002ffa:	50                   	push   eax
c0002ffb:	68 b5 01 00 00       	push   0x1b5
c0003000:	52                   	push   edx
c0003001:	e8 46 2b 00 00       	call   c0005b4c <ff_oem2uni>
c0003006:	83 c4 10             	add    esp,0x10
c0003009:	66 85 c0             	test   ax,ax
c000300c:	75 04                	jne    c0003012 <get_fileinfo+0x126>
c000300e:	31 ff                	xor    edi,edi
c0003010:	eb 23                	jmp    c0003035 <get_fileinfo+0x149>
c0003012:	b9 0c 00 00 00       	mov    ecx,0xc
c0003017:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000301b:	29 f9                	sub    ecx,edi
c000301d:	0f b7 c0             	movzx  eax,ax
c0003020:	e8 57 ee ff ff       	call   c0001e7c <put_utf>
c0003025:	84 c0                	test   al,al
c0003027:	74 e5                	je     c000300e <get_fileinfo+0x122>
c0003029:	0f b6 c0             	movzx  eax,al
c000302c:	01 c7                	add    edi,eax
c000302e:	89 e9                	mov    ecx,ebp
c0003030:	e9 4a ff ff ff       	jmp    c0002f7f <get_fileinfo+0x93>
c0003035:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000303a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000303e:	75 54                	jne    c0003094 <get_fileinfo+0x1a8>
c0003040:	85 ff                	test   edi,edi
c0003042:	75 0b                	jne    c000304f <get_fileinfo+0x163>
c0003044:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003048:	ba 01 00 00 00       	mov    edx,0x1
c000304d:	eb 33                	jmp    c0003082 <get_fileinfo+0x196>
c000304f:	b1 08                	mov    cl,0x8
c0003051:	31 d2                	xor    edx,edx
c0003053:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003059:	84 c0                	test   al,al
c000305b:	74 25                	je     c0003082 <get_fileinfo+0x196>
c000305d:	66 83 f8 2e          	cmp    ax,0x2e
c0003061:	74 16                	je     c0003079 <get_fileinfo+0x18d>
c0003063:	8d 78 bf             	lea    edi,[eax-0x41]
c0003066:	66 83 ff 19          	cmp    di,0x19
c000306a:	77 0f                	ja     c000307b <get_fileinfo+0x18f>
c000306c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000306f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003072:	74 07                	je     c000307b <get_fileinfo+0x18f>
c0003074:	83 c0 20             	add    eax,0x20
c0003077:	eb 02                	jmp    c000307b <get_fileinfo+0x18f>
c0003079:	b1 10                	mov    cl,0x10
c000307b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000307f:	42                   	inc    edx
c0003080:	eb d1                	jmp    c0003053 <get_fileinfo+0x167>
c0003082:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003087:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000308a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000308e:	75 04                	jne    c0003094 <get_fileinfo+0x1a8>
c0003090:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003094:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003097:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000309a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000309d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030a0:	83 c0 1c             	add    eax,0x1c
c00030a3:	e8 94 ec ff ff       	call   c0001d3c <ld_dword>
c00030a8:	89 03                	mov    DWORD PTR [ebx],eax
c00030aa:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ad:	83 c0 16             	add    eax,0x16
c00030b0:	e8 7a ec ff ff       	call   c0001d2f <ld_word>
c00030b5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030b9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bc:	83 c0 18             	add    eax,0x18
c00030bf:	e8 6b ec ff ff       	call   c0001d2f <ld_word>
c00030c4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030c8:	83 c4 1c             	add    esp,0x1c
c00030cb:	5b                   	pop    ebx
c00030cc:	5e                   	pop    esi
c00030cd:	5f                   	pop    edi
c00030ce:	5d                   	pop    ebp
c00030cf:	c3                   	ret    

c00030d0 <ld_clust.isra.0>:
c00030d0:	56                   	push   esi
c00030d1:	89 c6                	mov    esi,eax
c00030d3:	53                   	push   ebx
c00030d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030d7:	89 d3                	mov    ebx,edx
c00030d9:	e8 51 ec ff ff       	call   c0001d2f <ld_word>
c00030de:	0f b7 c8             	movzx  ecx,ax
c00030e1:	89 f0                	mov    eax,esi
c00030e3:	3c 03                	cmp    al,0x3
c00030e5:	75 0d                	jne    c00030f4 <ld_clust.isra.0+0x24>
c00030e7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030ea:	e8 40 ec ff ff       	call   c0001d2f <ld_word>
c00030ef:	c1 e0 10             	shl    eax,0x10
c00030f2:	09 c1                	or     ecx,eax
c00030f4:	89 c8                	mov    eax,ecx
c00030f6:	5b                   	pop    ebx
c00030f7:	5e                   	pop    esi
c00030f8:	c3                   	ret    

c00030f9 <st_clust.isra.1>:
c00030f9:	56                   	push   esi
c00030fa:	89 c6                	mov    esi,eax
c00030fc:	53                   	push   ebx
c00030fd:	89 d3                	mov    ebx,edx
c00030ff:	0f b7 d1             	movzx  edx,cx
c0003102:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003105:	e8 4a ec ff ff       	call   c0001d54 <st_word>
c000310a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000310d:	75 0f                	jne    c000311e <st_clust.isra.1+0x25>
c000310f:	c1 e9 10             	shr    ecx,0x10
c0003112:	8d 43 14             	lea    eax,[ebx+0x14]
c0003115:	89 ca                	mov    edx,ecx
c0003117:	5b                   	pop    ebx
c0003118:	5e                   	pop    esi
c0003119:	e9 36 ec ff ff       	jmp    c0001d54 <st_word>
c000311e:	5b                   	pop    ebx
c000311f:	5e                   	pop    esi
c0003120:	c3                   	ret    

c0003121 <get_fat.isra.2>:
c0003121:	b9 01 00 00 00       	mov    ecx,0x1
c0003126:	83 fa 01             	cmp    edx,0x1
c0003129:	0f 86 f1 00 00 00    	jbe    c0003220 <get_fat.isra.2+0xff>
c000312f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003132:	0f 83 e8 00 00 00    	jae    c0003220 <get_fat.isra.2+0xff>
c0003138:	55                   	push   ebp
c0003139:	57                   	push   edi
c000313a:	89 c7                	mov    edi,eax
c000313c:	56                   	push   esi
c000313d:	89 d6                	mov    esi,edx
c000313f:	53                   	push   ebx
c0003140:	83 ec 0c             	sub    esp,0xc
c0003143:	8a 00                	mov    al,BYTE PTR [eax]
c0003145:	3c 02                	cmp    al,0x2
c0003147:	74 78                	je     c00031c1 <get_fat.isra.2+0xa0>
c0003149:	3c 03                	cmp    al,0x3
c000314b:	0f 84 97 00 00 00    	je     c00031e8 <get_fat.isra.2+0xc7>
c0003151:	fe c8                	dec    al
c0003153:	0f 85 bd 00 00 00    	jne    c0003216 <get_fat.isra.2+0xf5>
c0003159:	89 d3                	mov    ebx,edx
c000315b:	89 f8                	mov    eax,edi
c000315d:	d1 eb                	shr    ebx,1
c000315f:	01 d3                	add    ebx,edx
c0003161:	89 da                	mov    edx,ebx
c0003163:	c1 ea 09             	shr    edx,0x9
c0003166:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003169:	e8 e7 f0 ff ff       	call   c0002255 <move_window>
c000316e:	85 c0                	test   eax,eax
c0003170:	74 08                	je     c000317a <get_fat.isra.2+0x59>
c0003172:	83 c9 ff             	or     ecx,0xffffffff
c0003175:	e9 9c 00 00 00       	jmp    c0003216 <get_fat.isra.2+0xf5>
c000317a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000317d:	89 f8                	mov    eax,edi
c000317f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003185:	89 ea                	mov    edx,ebp
c0003187:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000318b:	c1 ea 09             	shr    edx,0x9
c000318e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003191:	e8 bf f0 ff ff       	call   c0002255 <move_window>
c0003196:	85 c0                	test   eax,eax
c0003198:	75 d8                	jne    c0003172 <get_fat.isra.2+0x51>
c000319a:	0f b6 c3             	movzx  eax,bl
c000319d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00031a3:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00031a8:	c1 e3 08             	shl    ebx,0x8
c00031ab:	09 c3                	or     ebx,eax
c00031ad:	89 d9                	mov    ecx,ebx
c00031af:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031b5:	83 e6 01             	and    esi,0x1
c00031b8:	74 5c                	je     c0003216 <get_fat.isra.2+0xf5>
c00031ba:	89 d9                	mov    ecx,ebx
c00031bc:	c1 e9 04             	shr    ecx,0x4
c00031bf:	eb 55                	jmp    c0003216 <get_fat.isra.2+0xf5>
c00031c1:	c1 ea 08             	shr    edx,0x8
c00031c4:	89 f8                	mov    eax,edi
c00031c6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031c9:	e8 87 f0 ff ff       	call   c0002255 <move_window>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 a0                	jne    c0003172 <get_fat.isra.2+0x51>
c00031d2:	01 f6                	add    esi,esi
c00031d4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031da:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031de:	e8 4c eb ff ff       	call   c0001d2f <ld_word>
c00031e3:	0f b7 c8             	movzx  ecx,ax
c00031e6:	eb 2e                	jmp    c0003216 <get_fat.isra.2+0xf5>
c00031e8:	c1 ea 07             	shr    edx,0x7
c00031eb:	89 f8                	mov    eax,edi
c00031ed:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031f0:	e8 60 f0 ff ff       	call   c0002255 <move_window>
c00031f5:	85 c0                	test   eax,eax
c00031f7:	0f 85 75 ff ff ff    	jne    c0003172 <get_fat.isra.2+0x51>
c00031fd:	c1 e6 02             	shl    esi,0x2
c0003200:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003206:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000320a:	e8 2d eb ff ff       	call   c0001d3c <ld_dword>
c000320f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003214:	89 c1                	mov    ecx,eax
c0003216:	83 c4 0c             	add    esp,0xc
c0003219:	89 c8                	mov    eax,ecx
c000321b:	5b                   	pop    ebx
c000321c:	5e                   	pop    esi
c000321d:	5f                   	pop    edi
c000321e:	5d                   	pop    ebp
c000321f:	c3                   	ret    
c0003220:	89 c8                	mov    eax,ecx
c0003222:	c3                   	ret    

c0003223 <dir_sdi>:
c0003223:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003229:	0f 87 b6 00 00 00    	ja     c00032e5 <dir_sdi+0xc2>
c000322f:	55                   	push   ebp
c0003230:	57                   	push   edi
c0003231:	56                   	push   esi
c0003232:	53                   	push   ebx
c0003233:	89 d3                	mov    ebx,edx
c0003235:	83 ec 1c             	sub    esp,0x1c
c0003238:	f6 c2 1f             	test   dl,0x1f
c000323b:	74 0a                	je     c0003247 <dir_sdi+0x24>
c000323d:	b8 02 00 00 00       	mov    eax,0x2
c0003242:	e9 96 00 00 00       	jmp    c00032dd <dir_sdi+0xba>
c0003247:	89 c6                	mov    esi,eax
c0003249:	8b 38                	mov    edi,DWORD PTR [eax]
c000324b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000324e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003251:	85 c9                	test   ecx,ecx
c0003253:	75 23                	jne    c0003278 <dir_sdi+0x55>
c0003255:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003258:	76 07                	jbe    c0003261 <dir_sdi+0x3e>
c000325a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000325d:	85 c0                	test   eax,eax
c000325f:	75 15                	jne    c0003276 <dir_sdi+0x53>
c0003261:	89 da                	mov    edx,ebx
c0003263:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003267:	c1 ea 05             	shr    edx,0x5
c000326a:	39 c2                	cmp    edx,eax
c000326c:	73 cf                	jae    c000323d <dir_sdi+0x1a>
c000326e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003271:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003274:	eb 3d                	jmp    c00032b3 <dir_sdi+0x90>
c0003276:	89 c1                	mov    ecx,eax
c0003278:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000327c:	c1 e5 09             	shl    ebp,0x9
c000327f:	89 ca                	mov    edx,ecx
c0003281:	39 eb                	cmp    ebx,ebp
c0003283:	72 1c                	jb     c00032a1 <dir_sdi+0x7e>
c0003285:	8b 06                	mov    eax,DWORD PTR [esi]
c0003287:	e8 95 fe ff ff       	call   c0003121 <get_fat.isra.2>
c000328c:	89 c1                	mov    ecx,eax
c000328e:	83 f8 ff             	cmp    eax,0xffffffff
c0003291:	74 45                	je     c00032d8 <dir_sdi+0xb5>
c0003293:	83 f8 01             	cmp    eax,0x1
c0003296:	76 a5                	jbe    c000323d <dir_sdi+0x1a>
c0003298:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000329b:	76 a0                	jbe    c000323d <dir_sdi+0x1a>
c000329d:	29 eb                	sub    ebx,ebp
c000329f:	eb de                	jmp    c000327f <dir_sdi+0x5c>
c00032a1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00032a5:	89 f8                	mov    eax,edi
c00032a7:	e8 c9 ec ff ff       	call   c0001f75 <clst2sect>
c00032ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032b0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032b3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032b6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032b9:	85 d2                	test   edx,edx
c00032bb:	74 80                	je     c000323d <dir_sdi+0x1a>
c00032bd:	89 d8                	mov    eax,ebx
c00032bf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032c5:	c1 e8 09             	shr    eax,0x9
c00032c8:	01 d0                	add    eax,edx
c00032ca:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032cd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032d1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032d4:	31 c0                	xor    eax,eax
c00032d6:	eb 05                	jmp    c00032dd <dir_sdi+0xba>
c00032d8:	b8 01 00 00 00       	mov    eax,0x1
c00032dd:	83 c4 1c             	add    esp,0x1c
c00032e0:	5b                   	pop    ebx
c00032e1:	5e                   	pop    esi
c00032e2:	5f                   	pop    edi
c00032e3:	5d                   	pop    ebp
c00032e4:	c3                   	ret    
c00032e5:	b8 02 00 00 00       	mov    eax,0x2
c00032ea:	c3                   	ret    

c00032eb <create_chain>:
c00032eb:	55                   	push   ebp
c00032ec:	89 c5                	mov    ebp,eax
c00032ee:	57                   	push   edi
c00032ef:	89 d7                	mov    edi,edx
c00032f1:	56                   	push   esi
c00032f2:	53                   	push   ebx
c00032f3:	83 ec 1c             	sub    esp,0x1c
c00032f6:	85 d2                	test   edx,edx
c00032f8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032fa:	75 0e                	jne    c000330a <create_chain+0x1f>
c00032fc:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ff:	85 c9                	test   ecx,ecx
c0003301:	74 34                	je     c0003337 <create_chain+0x4c>
c0003303:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003306:	77 34                	ja     c000333c <create_chain+0x51>
c0003308:	eb 2d                	jmp    c0003337 <create_chain+0x4c>
c000330a:	89 f0                	mov    eax,esi
c000330c:	e8 10 fe ff ff       	call   c0003121 <get_fat.isra.2>
c0003311:	89 c3                	mov    ebx,eax
c0003313:	83 f8 01             	cmp    eax,0x1
c0003316:	77 0a                	ja     c0003322 <create_chain+0x37>
c0003318:	bb 01 00 00 00       	mov    ebx,0x1
c000331d:	e9 f9 00 00 00       	jmp    c000341b <create_chain+0x130>
c0003322:	83 f8 ff             	cmp    eax,0xffffffff
c0003325:	0f 84 ed 00 00 00    	je     c0003418 <create_chain+0x12d>
c000332b:	89 f9                	mov    ecx,edi
c000332d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003330:	76 0a                	jbe    c000333c <create_chain+0x51>
c0003332:	e9 e4 00 00 00       	jmp    c000341b <create_chain+0x130>
c0003337:	b9 01 00 00 00       	mov    ecx,0x1
c000333c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003340:	75 07                	jne    c0003349 <create_chain+0x5e>
c0003342:	31 db                	xor    ebx,ebx
c0003344:	e9 d2 00 00 00       	jmp    c000341b <create_chain+0x130>
c0003349:	39 f9                	cmp    ecx,edi
c000334b:	75 46                	jne    c0003393 <create_chain+0xa8>
c000334d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003350:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003353:	77 05                	ja     c000335a <create_chain+0x6f>
c0003355:	bb 02 00 00 00       	mov    ebx,0x2
c000335a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000335e:	89 da                	mov    edx,ebx
c0003360:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003363:	e8 b9 fd ff ff       	call   c0003121 <get_fat.isra.2>
c0003368:	83 f8 01             	cmp    eax,0x1
c000336b:	74 ab                	je     c0003318 <create_chain+0x2d>
c000336d:	83 f8 ff             	cmp    eax,0xffffffff
c0003370:	0f 84 a2 00 00 00    	je     c0003418 <create_chain+0x12d>
c0003376:	85 c0                	test   eax,eax
c0003378:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000337c:	74 11                	je     c000338f <create_chain+0xa4>
c000337e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003381:	83 f8 01             	cmp    eax,0x1
c0003384:	76 0d                	jbe    c0003393 <create_chain+0xa8>
c0003386:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003389:	73 08                	jae    c0003393 <create_chain+0xa8>
c000338b:	89 c1                	mov    ecx,eax
c000338d:	eb 04                	jmp    c0003393 <create_chain+0xa8>
c000338f:	85 db                	test   ebx,ebx
c0003391:	75 3d                	jne    c00033d0 <create_chain+0xe5>
c0003393:	89 cb                	mov    ebx,ecx
c0003395:	43                   	inc    ebx
c0003396:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003399:	77 0a                	ja     c00033a5 <create_chain+0xba>
c000339b:	83 f9 01             	cmp    ecx,0x1
c000339e:	76 a2                	jbe    c0003342 <create_chain+0x57>
c00033a0:	bb 02 00 00 00       	mov    ebx,0x2
c00033a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033a9:	89 da                	mov    edx,ebx
c00033ab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00033ae:	e8 6e fd ff ff       	call   c0003121 <get_fat.isra.2>
c00033b3:	85 c0                	test   eax,eax
c00033b5:	74 19                	je     c00033d0 <create_chain+0xe5>
c00033b7:	83 f8 01             	cmp    eax,0x1
c00033ba:	0f 84 58 ff ff ff    	je     c0003318 <create_chain+0x2d>
c00033c0:	40                   	inc    eax
c00033c1:	74 55                	je     c0003418 <create_chain+0x12d>
c00033c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033c7:	39 cb                	cmp    ebx,ecx
c00033c9:	75 ca                	jne    c0003395 <create_chain+0xaa>
c00033cb:	e9 72 ff ff ff       	jmp    c0003342 <create_chain+0x57>
c00033d0:	83 c9 ff             	or     ecx,0xffffffff
c00033d3:	89 da                	mov    edx,ebx
c00033d5:	89 f0                	mov    eax,esi
c00033d7:	e8 cf f2 ff ff       	call   c00026ab <put_fat>
c00033dc:	85 c0                	test   eax,eax
c00033de:	75 31                	jne    c0003411 <create_chain+0x126>
c00033e0:	85 ff                	test   edi,edi
c00033e2:	75 16                	jne    c00033fa <create_chain+0x10f>
c00033e4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033e7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033ea:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033ed:	8d 57 fe             	lea    edx,[edi-0x2]
c00033f0:	39 d0                	cmp    eax,edx
c00033f2:	77 17                	ja     c000340b <create_chain+0x120>
c00033f4:	48                   	dec    eax
c00033f5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033f8:	eb 11                	jmp    c000340b <create_chain+0x120>
c00033fa:	89 d9                	mov    ecx,ebx
c00033fc:	89 fa                	mov    edx,edi
c00033fe:	89 f0                	mov    eax,esi
c0003400:	e8 a6 f2 ff ff       	call   c00026ab <put_fat>
c0003405:	85 c0                	test   eax,eax
c0003407:	74 db                	je     c00033e4 <create_chain+0xf9>
c0003409:	eb 06                	jmp    c0003411 <create_chain+0x126>
c000340b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000340f:	eb 0a                	jmp    c000341b <create_chain+0x130>
c0003411:	48                   	dec    eax
c0003412:	0f 85 00 ff ff ff    	jne    c0003318 <create_chain+0x2d>
c0003418:	83 cb ff             	or     ebx,0xffffffff
c000341b:	83 c4 1c             	add    esp,0x1c
c000341e:	89 d8                	mov    eax,ebx
c0003420:	5b                   	pop    ebx
c0003421:	5e                   	pop    esi
c0003422:	5f                   	pop    edi
c0003423:	5d                   	pop    ebp
c0003424:	c3                   	ret    

c0003425 <remove_chain>:
c0003425:	55                   	push   ebp
c0003426:	57                   	push   edi
c0003427:	56                   	push   esi
c0003428:	89 d6                	mov    esi,edx
c000342a:	53                   	push   ebx
c000342b:	83 ec 0c             	sub    esp,0xc
c000342e:	83 fa 01             	cmp    edx,0x1
c0003431:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003433:	76 65                	jbe    c000349a <remove_chain+0x75>
c0003435:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003438:	76 60                	jbe    c000349a <remove_chain+0x75>
c000343a:	89 c5                	mov    ebp,eax
c000343c:	89 ca                	mov    edx,ecx
c000343e:	85 c9                	test   ecx,ecx
c0003440:	74 0e                	je     c0003450 <remove_chain+0x2b>
c0003442:	83 c9 ff             	or     ecx,0xffffffff
c0003445:	89 d8                	mov    eax,ebx
c0003447:	e8 5f f2 ff ff       	call   c00026ab <put_fat>
c000344c:	85 c0                	test   eax,eax
c000344e:	75 56                	jne    c00034a6 <remove_chain+0x81>
c0003450:	89 f2                	mov    edx,esi
c0003452:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003455:	e8 c7 fc ff ff       	call   c0003121 <get_fat.isra.2>
c000345a:	89 c7                	mov    edi,eax
c000345c:	85 c0                	test   eax,eax
c000345e:	75 04                	jne    c0003464 <remove_chain+0x3f>
c0003460:	31 c0                	xor    eax,eax
c0003462:	eb 42                	jmp    c00034a6 <remove_chain+0x81>
c0003464:	83 f8 01             	cmp    eax,0x1
c0003467:	74 31                	je     c000349a <remove_chain+0x75>
c0003469:	83 f8 ff             	cmp    eax,0xffffffff
c000346c:	74 33                	je     c00034a1 <remove_chain+0x7c>
c000346e:	31 c9                	xor    ecx,ecx
c0003470:	89 f2                	mov    edx,esi
c0003472:	89 d8                	mov    eax,ebx
c0003474:	e8 32 f2 ff ff       	call   c00026ab <put_fat>
c0003479:	85 c0                	test   eax,eax
c000347b:	75 29                	jne    c00034a6 <remove_chain+0x81>
c000347d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003480:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003483:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003486:	39 c8                	cmp    eax,ecx
c0003488:	73 08                	jae    c0003492 <remove_chain+0x6d>
c000348a:	40                   	inc    eax
c000348b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000348f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003492:	89 fe                	mov    esi,edi
c0003494:	39 fa                	cmp    edx,edi
c0003496:	77 b8                	ja     c0003450 <remove_chain+0x2b>
c0003498:	eb c6                	jmp    c0003460 <remove_chain+0x3b>
c000349a:	b8 02 00 00 00       	mov    eax,0x2
c000349f:	eb 05                	jmp    c00034a6 <remove_chain+0x81>
c00034a1:	b8 01 00 00 00       	mov    eax,0x1
c00034a6:	83 c4 0c             	add    esp,0xc
c00034a9:	5b                   	pop    ebx
c00034aa:	5e                   	pop    esi
c00034ab:	5f                   	pop    edi
c00034ac:	5d                   	pop    ebp
c00034ad:	c3                   	ret    

c00034ae <dir_next>:
c00034ae:	55                   	push   ebp
c00034af:	57                   	push   edi
c00034b0:	56                   	push   esi
c00034b1:	53                   	push   ebx
c00034b2:	83 ec 1c             	sub    esp,0x1c
c00034b5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034b8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ba:	83 c7 20             	add    edi,0x20
c00034bd:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034c3:	76 07                	jbe    c00034cc <dir_next+0x1e>
c00034c5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034cc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034cf:	b9 04 00 00 00       	mov    ecx,0x4
c00034d4:	85 f6                	test   esi,esi
c00034d6:	0f 84 cd 00 00 00    	je     c00035a9 <dir_next+0xfb>
c00034dc:	89 c3                	mov    ebx,eax
c00034de:	89 d1                	mov    ecx,edx
c00034e0:	89 f8                	mov    eax,edi
c00034e2:	25 ff 01 00 00       	and    eax,0x1ff
c00034e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034eb:	0f 85 a8 00 00 00    	jne    c0003599 <dir_next+0xeb>
c00034f1:	46                   	inc    esi
c00034f2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034f5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034f8:	85 d2                	test   edx,edx
c00034fa:	75 22                	jne    c000351e <dir_next+0x70>
c00034fc:	89 fa                	mov    edx,edi
c00034fe:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003502:	c1 ea 05             	shr    edx,0x5
c0003505:	39 c2                	cmp    edx,eax
c0003507:	0f 82 8c 00 00 00    	jb     c0003599 <dir_next+0xeb>
c000350d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003514:	b9 04 00 00 00       	mov    ecx,0x4
c0003519:	e9 8b 00 00 00       	jmp    c00035a9 <dir_next+0xfb>
c000351e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003522:	89 fe                	mov    esi,edi
c0003524:	48                   	dec    eax
c0003525:	c1 ee 09             	shr    esi,0x9
c0003528:	85 f0                	test   eax,esi
c000352a:	75 6d                	jne    c0003599 <dir_next+0xeb>
c000352c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003530:	89 e8                	mov    eax,ebp
c0003532:	e8 ea fb ff ff       	call   c0003121 <get_fat.isra.2>
c0003537:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000353b:	89 c6                	mov    esi,eax
c000353d:	83 f8 01             	cmp    eax,0x1
c0003540:	77 07                	ja     c0003549 <dir_next+0x9b>
c0003542:	b9 02 00 00 00       	mov    ecx,0x2
c0003547:	eb 60                	jmp    c00035a9 <dir_next+0xfb>
c0003549:	83 f8 ff             	cmp    eax,0xffffffff
c000354c:	75 07                	jne    c0003555 <dir_next+0xa7>
c000354e:	b9 01 00 00 00       	mov    ecx,0x1
c0003553:	eb 54                	jmp    c00035a9 <dir_next+0xfb>
c0003555:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003558:	77 30                	ja     c000358a <dir_next+0xdc>
c000355a:	85 c9                	test   ecx,ecx
c000355c:	74 af                	je     c000350d <dir_next+0x5f>
c000355e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003561:	89 d8                	mov    eax,ebx
c0003563:	e8 83 fd ff ff       	call   c00032eb <create_chain>
c0003568:	b9 07 00 00 00       	mov    ecx,0x7
c000356d:	89 c6                	mov    esi,eax
c000356f:	85 c0                	test   eax,eax
c0003571:	74 36                	je     c00035a9 <dir_next+0xfb>
c0003573:	83 f8 01             	cmp    eax,0x1
c0003576:	74 ca                	je     c0003542 <dir_next+0x94>
c0003578:	83 f8 ff             	cmp    eax,0xffffffff
c000357b:	74 d1                	je     c000354e <dir_next+0xa0>
c000357d:	89 c2                	mov    edx,eax
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 75 f2 ff ff       	call   c00027fb <dir_clear>
c0003586:	85 c0                	test   eax,eax
c0003588:	75 c4                	jne    c000354e <dir_next+0xa0>
c000358a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000358d:	89 f2                	mov    edx,esi
c000358f:	89 e8                	mov    eax,ebp
c0003591:	e8 df e9 ff ff       	call   c0001f75 <clst2sect>
c0003596:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003599:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000359d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00035a0:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00035a4:	31 c9                	xor    ecx,ecx
c00035a6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00035a9:	83 c4 1c             	add    esp,0x1c
c00035ac:	89 c8                	mov    eax,ecx
c00035ae:	5b                   	pop    ebx
c00035af:	5e                   	pop    esi
c00035b0:	5f                   	pop    edi
c00035b1:	5d                   	pop    ebp
c00035b2:	c3                   	ret    

c00035b3 <dir_alloc>:
c00035b3:	55                   	push   ebp
c00035b4:	89 c5                	mov    ebp,eax
c00035b6:	57                   	push   edi
c00035b7:	89 d7                	mov    edi,edx
c00035b9:	56                   	push   esi
c00035ba:	31 d2                	xor    edx,edx
c00035bc:	53                   	push   ebx
c00035bd:	83 ec 0c             	sub    esp,0xc
c00035c0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035c2:	e8 5c fc ff ff       	call   c0003223 <dir_sdi>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 37                	jne    c0003602 <dir_alloc+0x4f>
c00035cb:	31 db                	xor    ebx,ebx
c00035cd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035d0:	89 f0                	mov    eax,esi
c00035d2:	e8 7e ec ff ff       	call   c0002255 <move_window>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 27                	jne    c0003602 <dir_alloc+0x4f>
c00035db:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035de:	8a 12                	mov    dl,BYTE PTR [edx]
c00035e0:	84 d2                	test   dl,dl
c00035e2:	74 05                	je     c00035e9 <dir_alloc+0x36>
c00035e4:	80 fa e5             	cmp    dl,0xe5
c00035e7:	75 07                	jne    c00035f0 <dir_alloc+0x3d>
c00035e9:	43                   	inc    ebx
c00035ea:	39 fb                	cmp    ebx,edi
c00035ec:	75 04                	jne    c00035f2 <dir_alloc+0x3f>
c00035ee:	eb 1c                	jmp    c000360c <dir_alloc+0x59>
c00035f0:	31 db                	xor    ebx,ebx
c00035f2:	ba 01 00 00 00       	mov    edx,0x1
c00035f7:	89 e8                	mov    eax,ebp
c00035f9:	e8 b0 fe ff ff       	call   c00034ae <dir_next>
c00035fe:	85 c0                	test   eax,eax
c0003600:	74 cb                	je     c00035cd <dir_alloc+0x1a>
c0003602:	83 f8 04             	cmp    eax,0x4
c0003605:	75 05                	jne    c000360c <dir_alloc+0x59>
c0003607:	b8 07 00 00 00       	mov    eax,0x7
c000360c:	83 c4 0c             	add    esp,0xc
c000360f:	5b                   	pop    ebx
c0003610:	5e                   	pop    esi
c0003611:	5f                   	pop    edi
c0003612:	5d                   	pop    ebp
c0003613:	c3                   	ret    

c0003614 <dir_read>:
c0003614:	55                   	push   ebp
c0003615:	57                   	push   edi
c0003616:	bf ff ff ff ff       	mov    edi,0xffffffff
c000361b:	56                   	push   esi
c000361c:	be 04 00 00 00       	mov    esi,0x4
c0003621:	53                   	push   ebx
c0003622:	89 c3                	mov    ebx,eax
c0003624:	83 ec 1c             	sub    esp,0x1c
c0003627:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000362b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000362d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003632:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003635:	85 d2                	test   edx,edx
c0003637:	0f 84 d8 00 00 00    	je     c0003715 <dir_read+0x101>
c000363d:	89 e8                	mov    eax,ebp
c000363f:	e8 11 ec ff ff       	call   c0002255 <move_window>
c0003644:	89 c6                	mov    esi,eax
c0003646:	85 c0                	test   eax,eax
c0003648:	0f 85 d2 00 00 00    	jne    c0003720 <dir_read+0x10c>
c000364e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003651:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003653:	84 c9                	test   cl,cl
c0003655:	0f 84 c0 00 00 00    	je     c000371b <dir_read+0x107>
c000365b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000365e:	83 e0 3f             	and    eax,0x3f
c0003661:	80 f9 2e             	cmp    cl,0x2e
c0003664:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003668:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000366b:	0f 84 8a 00 00 00    	je     c00036fb <dir_read+0xe7>
c0003671:	80 f9 e5             	cmp    cl,0xe5
c0003674:	0f 84 81 00 00 00    	je     c00036fb <dir_read+0xe7>
c000367a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000367e:	83 e0 1f             	and    eax,0x1f
c0003681:	83 f8 08             	cmp    eax,0x8
c0003684:	0f 94 c0             	sete   al
c0003687:	0f b6 c0             	movzx  eax,al
c000368a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000368e:	75 6b                	jne    c00036fb <dir_read+0xe7>
c0003690:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003695:	75 44                	jne    c00036db <dir_read+0xc7>
c0003697:	f6 c1 40             	test   cl,0x40
c000369a:	74 12                	je     c00036ae <dir_read+0x9a>
c000369c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000369f:	83 e1 bf             	and    ecx,0xffffffbf
c00036a2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00036a6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00036a9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00036ac:	eb 06                	jmp    c00036b4 <dir_read+0xa0>
c00036ae:	89 f8                	mov    eax,edi
c00036b0:	38 c8                	cmp    al,cl
c00036b2:	75 47                	jne    c00036fb <dir_read+0xe7>
c00036b4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036b8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036bd:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036c0:	75 3e                	jne    c0003700 <dir_read+0xec>
c00036c2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036c9:	e8 c4 e8 ff ff       	call   c0001f92 <pick_lfn>
c00036ce:	85 c0                	test   eax,eax
c00036d0:	74 2e                	je     c0003700 <dir_read+0xec>
c00036d2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036d6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036d9:	eb 25                	jmp    c0003700 <dir_read+0xec>
c00036db:	89 f8                	mov    eax,edi
c00036dd:	84 c0                	test   al,al
c00036df:	75 11                	jne    c00036f2 <dir_read+0xde>
c00036e1:	89 d0                	mov    eax,edx
c00036e3:	e8 64 ea ff ff       	call   c000214c <sum_sfn>
c00036e8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036ec:	75 04                	jne    c00036f2 <dir_read+0xde>
c00036ee:	31 f6                	xor    esi,esi
c00036f0:	eb 35                	jmp    c0003727 <dir_read+0x113>
c00036f2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036f9:	eb 2c                	jmp    c0003727 <dir_read+0x113>
c00036fb:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003700:	31 d2                	xor    edx,edx
c0003702:	89 d8                	mov    eax,ebx
c0003704:	e8 a5 fd ff ff       	call   c00034ae <dir_next>
c0003709:	89 c6                	mov    esi,eax
c000370b:	85 c0                	test   eax,eax
c000370d:	0f 84 1f ff ff ff    	je     c0003632 <dir_read+0x1e>
c0003713:	eb 0b                	jmp    c0003720 <dir_read+0x10c>
c0003715:	85 f6                	test   esi,esi
c0003717:	74 d5                	je     c00036ee <dir_read+0xda>
c0003719:	eb 05                	jmp    c0003720 <dir_read+0x10c>
c000371b:	be 04 00 00 00       	mov    esi,0x4
c0003720:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003727:	83 c4 1c             	add    esp,0x1c
c000372a:	89 f0                	mov    eax,esi
c000372c:	5b                   	pop    ebx
c000372d:	5e                   	pop    esi
c000372e:	5f                   	pop    edi
c000372f:	5d                   	pop    ebp
c0003730:	c3                   	ret    

c0003731 <dir_remove>:
c0003731:	57                   	push   edi
c0003732:	56                   	push   esi
c0003733:	53                   	push   ebx
c0003734:	89 c3                	mov    ebx,eax
c0003736:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003739:	8b 30                	mov    esi,DWORD PTR [eax]
c000373b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000373e:	83 fa ff             	cmp    edx,0xffffffff
c0003741:	74 09                	je     c000374c <dir_remove+0x1b>
c0003743:	e8 db fa ff ff       	call   c0003223 <dir_sdi>
c0003748:	85 c0                	test   eax,eax
c000374a:	75 34                	jne    c0003780 <dir_remove+0x4f>
c000374c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000374f:	89 f0                	mov    eax,esi
c0003751:	e8 ff ea ff ff       	call   c0002255 <move_window>
c0003756:	85 c0                	test   eax,eax
c0003758:	75 1c                	jne    c0003776 <dir_remove+0x45>
c000375a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000375d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003760:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003764:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003767:	73 17                	jae    c0003780 <dir_remove+0x4f>
c0003769:	31 d2                	xor    edx,edx
c000376b:	89 d8                	mov    eax,ebx
c000376d:	e8 3c fd ff ff       	call   c00034ae <dir_next>
c0003772:	85 c0                	test   eax,eax
c0003774:	74 d6                	je     c000374c <dir_remove+0x1b>
c0003776:	83 f8 04             	cmp    eax,0x4
c0003779:	75 05                	jne    c0003780 <dir_remove+0x4f>
c000377b:	b8 02 00 00 00       	mov    eax,0x2
c0003780:	5b                   	pop    ebx
c0003781:	5e                   	pop    esi
c0003782:	5f                   	pop    edi
c0003783:	c3                   	ret    

c0003784 <dir_find>:
c0003784:	55                   	push   ebp
c0003785:	31 d2                	xor    edx,edx
c0003787:	57                   	push   edi
c0003788:	56                   	push   esi
c0003789:	53                   	push   ebx
c000378a:	89 c3                	mov    ebx,eax
c000378c:	83 ec 1c             	sub    esp,0x1c
c000378f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003791:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003795:	89 d8                	mov    eax,ebx
c0003797:	e8 87 fa ff ff       	call   c0003223 <dir_sdi>
c000379c:	89 c6                	mov    esi,eax
c000379e:	85 c0                	test   eax,eax
c00037a0:	0f 85 02 01 00 00    	jne    c00038a8 <dir_find+0x124>
c00037a6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037ad:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037b7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037be:	e8 92 ea ff ff       	call   c0002255 <move_window>
c00037c3:	89 c6                	mov    esi,eax
c00037c5:	85 c0                	test   eax,eax
c00037c7:	0f 85 db 00 00 00    	jne    c00038a8 <dir_find+0x124>
c00037cd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037d0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037d3:	84 c9                	test   cl,cl
c00037d5:	0f 84 c8 00 00 00    	je     c00038a3 <dir_find+0x11f>
c00037db:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037de:	88 d0                	mov    al,dl
c00037e0:	83 e0 3f             	and    eax,0x3f
c00037e3:	80 f9 e5             	cmp    cl,0xe5
c00037e6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037e9:	0f 84 93 00 00 00    	je     c0003882 <dir_find+0xfe>
c00037ef:	80 e2 08             	and    dl,0x8
c00037f2:	74 0a                	je     c00037fe <dir_find+0x7a>
c00037f4:	3c 0f                	cmp    al,0xf
c00037f6:	0f 85 86 00 00 00    	jne    c0003882 <dir_find+0xfe>
c00037fc:	eb 04                	jmp    c0003802 <dir_find+0x7e>
c00037fe:	3c 0f                	cmp    al,0xf
c0003800:	75 54                	jne    c0003856 <dir_find+0xd2>
c0003802:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003806:	0f 85 82 00 00 00    	jne    c000388e <dir_find+0x10a>
c000380c:	f6 c1 40             	test   cl,0x40
c000380f:	74 12                	je     c0003823 <dir_find+0x9f>
c0003811:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003814:	83 e1 bf             	and    ecx,0xffffffbf
c0003817:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000381b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000381e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003821:	eb 06                	jmp    c0003829 <dir_find+0xa5>
c0003823:	89 f8                	mov    eax,edi
c0003825:	38 c8                	cmp    al,cl
c0003827:	75 60                	jne    c0003889 <dir_find+0x105>
c0003829:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000382d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003832:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003835:	75 57                	jne    c000388e <dir_find+0x10a>
c0003837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000383b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000383f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003842:	89 ea                	mov    edx,ebp
c0003844:	e8 89 f3 ff ff       	call   c0002bd2 <cmp_lfn>
c0003849:	85 c0                	test   eax,eax
c000384b:	74 41                	je     c000388e <dir_find+0x10a>
c000384d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003851:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003854:	eb 38                	jmp    c000388e <dir_find+0x10a>
c0003856:	89 f8                	mov    eax,edi
c0003858:	84 c0                	test   al,al
c000385a:	75 0d                	jne    c0003869 <dir_find+0xe5>
c000385c:	89 e8                	mov    eax,ebp
c000385e:	e8 e9 e8 ff ff       	call   c000214c <sum_sfn>
c0003863:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003867:	74 3f                	je     c00038a8 <dir_find+0x124>
c0003869:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000386d:	75 13                	jne    c0003882 <dir_find+0xfe>
c000386f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003872:	b9 0b 00 00 00       	mov    ecx,0xb
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 fd e4 ff ff       	call   c0001d7b <mem_cmp>
c000387e:	85 c0                	test   eax,eax
c0003880:	74 26                	je     c00038a8 <dir_find+0x124>
c0003882:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003889:	bf ff ff ff ff       	mov    edi,0xffffffff
c000388e:	31 d2                	xor    edx,edx
c0003890:	89 d8                	mov    eax,ebx
c0003892:	e8 17 fc ff ff       	call   c00034ae <dir_next>
c0003897:	89 c6                	mov    esi,eax
c0003899:	85 c0                	test   eax,eax
c000389b:	0f 84 16 ff ff ff    	je     c00037b7 <dir_find+0x33>
c00038a1:	eb 05                	jmp    c00038a8 <dir_find+0x124>
c00038a3:	be 04 00 00 00       	mov    esi,0x4
c00038a8:	83 c4 1c             	add    esp,0x1c
c00038ab:	89 f0                	mov    eax,esi
c00038ad:	5b                   	pop    ebx
c00038ae:	5e                   	pop    esi
c00038af:	5f                   	pop    edi
c00038b0:	5d                   	pop    ebp
c00038b1:	c3                   	ret    

c00038b2 <follow_path>:
c00038b2:	56                   	push   esi
c00038b3:	53                   	push   ebx
c00038b4:	89 c3                	mov    ebx,eax
c00038b6:	83 ec 14             	sub    esp,0x14
c00038b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00038bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038c3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038c5:	80 fa 5c             	cmp    dl,0x5c
c00038c8:	75 07                	jne    c00038d1 <follow_path+0x1f>
c00038ca:	40                   	inc    eax
c00038cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038cf:	eb ee                	jmp    c00038bf <follow_path+0xd>
c00038d1:	80 fa 2f             	cmp    dl,0x2f
c00038d4:	74 f4                	je     c00038ca <follow_path+0x18>
c00038d6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038dd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038e0:	77 3e                	ja     c0003920 <follow_path+0x6e>
c00038e2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038e6:	31 d2                	xor    edx,edx
c00038e8:	89 d8                	mov    eax,ebx
c00038ea:	e8 34 f9 ff ff       	call   c0003223 <dir_sdi>
c00038ef:	eb 4f                	jmp    c0003940 <follow_path+0x8e>
c00038f1:	89 d8                	mov    eax,ebx
c00038f3:	e8 8c fe ff ff       	call   c0003784 <dir_find>
c00038f8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038fb:	85 c0                	test   eax,eax
c00038fd:	75 32                	jne    c0003931 <follow_path+0x7f>
c00038ff:	80 e2 04             	and    dl,0x4
c0003902:	75 3c                	jne    c0003940 <follow_path+0x8e>
c0003904:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003908:	74 31                	je     c000393b <follow_path+0x89>
c000390a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000390d:	25 ff 01 00 00       	and    eax,0x1ff
c0003912:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003916:	8a 06                	mov    al,BYTE PTR [esi]
c0003918:	e8 b3 f7 ff ff       	call   c00030d0 <ld_clust.isra.0>
c000391d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003920:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003924:	89 d8                	mov    eax,ebx
c0003926:	e8 cb ef ff ff       	call   c00028f6 <create_name>
c000392b:	85 c0                	test   eax,eax
c000392d:	74 c2                	je     c00038f1 <follow_path+0x3f>
c000392f:	eb 0f                	jmp    c0003940 <follow_path+0x8e>
c0003931:	83 f8 04             	cmp    eax,0x4
c0003934:	75 0a                	jne    c0003940 <follow_path+0x8e>
c0003936:	80 e2 04             	and    dl,0x4
c0003939:	75 05                	jne    c0003940 <follow_path+0x8e>
c000393b:	b8 05 00 00 00       	mov    eax,0x5
c0003940:	83 c4 14             	add    esp,0x14
c0003943:	5b                   	pop    ebx
c0003944:	5e                   	pop    esi
c0003945:	c3                   	ret    

c0003946 <dir_register>:
c0003946:	55                   	push   ebp
c0003947:	57                   	push   edi
c0003948:	56                   	push   esi
c0003949:	be 06 00 00 00       	mov    esi,0x6
c000394e:	53                   	push   ebx
c000394f:	83 ec 2c             	sub    esp,0x2c
c0003952:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003956:	0f 85 65 01 00 00    	jne    c0003ac1 <dir_register+0x17b>
c000395c:	8b 38                	mov    edi,DWORD PTR [eax]
c000395e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003966:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003969:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000396d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003972:	74 06                	je     c000397a <dir_register+0x34>
c0003974:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003978:	eb ef                	jmp    c0003969 <dir_register+0x23>
c000397a:	89 c3                	mov    ebx,eax
c000397c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003981:	8d 40 20             	lea    eax,[eax+0x20]
c0003984:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003988:	89 c2                	mov    edx,eax
c000398a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000398e:	e8 c8 e3 ff ff       	call   c0001d5b <mem_cpy>
c0003993:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003998:	74 48                	je     c00039e2 <dir_register+0x9c>
c000399a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000399e:	bd 01 00 00 00       	mov    ebp,0x1
c00039a3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00039a6:	55                   	push   ebp
c00039a7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00039ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039af:	e8 dc e6 ff ff       	call   c0002090 <gen_numname>
c00039b4:	58                   	pop    eax
c00039b5:	89 d8                	mov    eax,ebx
c00039b7:	e8 c8 fd ff ff       	call   c0003784 <dir_find>
c00039bc:	89 c6                	mov    esi,eax
c00039be:	85 c0                	test   eax,eax
c00039c0:	75 10                	jne    c00039d2 <dir_register+0x8c>
c00039c2:	45                   	inc    ebp
c00039c3:	83 fd 64             	cmp    ebp,0x64
c00039c6:	75 db                	jne    c00039a3 <dir_register+0x5d>
c00039c8:	be 07 00 00 00       	mov    esi,0x7
c00039cd:	e9 ef 00 00 00       	jmp    c0003ac1 <dir_register+0x17b>
c00039d2:	83 f8 04             	cmp    eax,0x4
c00039d5:	0f 85 e6 00 00 00    	jne    c0003ac1 <dir_register+0x17b>
c00039db:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039df:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039e2:	bd 01 00 00 00       	mov    ebp,0x1
c00039e7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039ec:	74 13                	je     c0003a01 <dir_register+0xbb>
c00039ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039f2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039f7:	83 c0 0c             	add    eax,0xc
c00039fa:	31 d2                	xor    edx,edx
c00039fc:	f7 f1                	div    ecx
c00039fe:	8d 68 01             	lea    ebp,[eax+0x1]
c0003a01:	89 ea                	mov    edx,ebp
c0003a03:	89 d8                	mov    eax,ebx
c0003a05:	e8 a9 fb ff ff       	call   c00035b3 <dir_alloc>
c0003a0a:	89 c6                	mov    esi,eax
c0003a0c:	85 c0                	test   eax,eax
c0003a0e:	0f 85 ad 00 00 00    	jne    c0003ac1 <dir_register+0x17b>
c0003a14:	4d                   	dec    ebp
c0003a15:	74 6a                	je     c0003a81 <dir_register+0x13b>
c0003a17:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a1a:	89 e8                	mov    eax,ebp
c0003a1c:	c1 e0 05             	shl    eax,0x5
c0003a1f:	29 c2                	sub    edx,eax
c0003a21:	89 d8                	mov    eax,ebx
c0003a23:	e8 fb f7 ff ff       	call   c0003223 <dir_sdi>
c0003a28:	89 c6                	mov    esi,eax
c0003a2a:	85 c0                	test   eax,eax
c0003a2c:	0f 85 8f 00 00 00    	jne    c0003ac1 <dir_register+0x17b>
c0003a32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a36:	e8 11 e7 ff ff       	call   c000214c <sum_sfn>
c0003a3b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a3f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a42:	89 f8                	mov    eax,edi
c0003a44:	e8 0c e8 ff ff       	call   c0002255 <move_window>
c0003a49:	89 c6                	mov    esi,eax
c0003a4b:	85 c0                	test   eax,eax
c0003a4d:	75 72                	jne    c0003ac1 <dir_register+0x17b>
c0003a4f:	83 ec 0c             	sub    esp,0xc
c0003a52:	89 e8                	mov    eax,ebp
c0003a54:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a59:	0f b6 c8             	movzx  ecx,al
c0003a5c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a5f:	52                   	push   edx
c0003a60:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a63:	e8 a4 e5 ff ff       	call   c000200c <put_lfn>
c0003a68:	31 d2                	xor    edx,edx
c0003a6a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a6e:	89 d8                	mov    eax,ebx
c0003a70:	e8 39 fa ff ff       	call   c00034ae <dir_next>
c0003a75:	83 c4 10             	add    esp,0x10
c0003a78:	89 c6                	mov    esi,eax
c0003a7a:	85 c0                	test   eax,eax
c0003a7c:	75 43                	jne    c0003ac1 <dir_register+0x17b>
c0003a7e:	4d                   	dec    ebp
c0003a7f:	75 be                	jne    c0003a3f <dir_register+0xf9>
c0003a81:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a84:	89 f8                	mov    eax,edi
c0003a86:	e8 ca e7 ff ff       	call   c0002255 <move_window>
c0003a8b:	89 c6                	mov    esi,eax
c0003a8d:	85 c0                	test   eax,eax
c0003a8f:	75 30                	jne    c0003ac1 <dir_register+0x17b>
c0003a91:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a94:	b9 20 00 00 00       	mov    ecx,0x20
c0003a99:	31 d2                	xor    edx,edx
c0003a9b:	e8 d0 e2 ff ff       	call   c0001d70 <mem_set>
c0003aa0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003aa3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003aa7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003aac:	e8 aa e2 ff ff       	call   c0001d5b <mem_cpy>
c0003ab1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ab4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ab7:	83 e0 18             	and    eax,0x18
c0003aba:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003abd:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ac1:	83 c4 2c             	add    esp,0x2c
c0003ac4:	89 f0                	mov    eax,esi
c0003ac6:	5b                   	pop    ebx
c0003ac7:	5e                   	pop    esi
c0003ac8:	5f                   	pop    edi
c0003ac9:	5d                   	pop    ebp
c0003aca:	c3                   	ret    

c0003acb <f_mount>:
c0003acb:	53                   	push   ebx
c0003acc:	83 ec 18             	sub    esp,0x18
c0003acf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ad3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ad7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003adb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003adf:	e8 7a e6 ff ff       	call   c000215e <get_ldnumber>
c0003ae4:	89 c2                	mov    edx,eax
c0003ae6:	b8 0b 00 00 00       	mov    eax,0xb
c0003aeb:	85 d2                	test   edx,edx
c0003aed:	78 39                	js     c0003b28 <f_mount+0x5d>
c0003aef:	8b 04 95 60 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfea0]
c0003af6:	85 c0                	test   eax,eax
c0003af8:	74 03                	je     c0003afd <f_mount+0x32>
c0003afa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003afd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b01:	85 c0                	test   eax,eax
c0003b03:	74 03                	je     c0003b08 <f_mount+0x3d>
c0003b05:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b0c:	89 04 95 60 01 02 c0 	mov    DWORD PTR [edx*4-0x3ffdfea0],eax
c0003b13:	31 c0                	xor    eax,eax
c0003b15:	84 db                	test   bl,bl
c0003b17:	74 0f                	je     c0003b28 <f_mount+0x5d>
c0003b19:	31 c9                	xor    ecx,ecx
c0003b1b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b1f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b23:	e8 80 e8 ff ff       	call   c00023a8 <mount_volume>
c0003b28:	83 c4 18             	add    esp,0x18
c0003b2b:	5b                   	pop    ebx
c0003b2c:	c3                   	ret    

c0003b2d <f_open>:
c0003b2d:	55                   	push   ebp
c0003b2e:	b8 09 00 00 00       	mov    eax,0x9
c0003b33:	57                   	push   edi
c0003b34:	56                   	push   esi
c0003b35:	53                   	push   ebx
c0003b36:	83 ec 5c             	sub    esp,0x5c
c0003b39:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b3d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b41:	85 db                	test   ebx,ebx
c0003b43:	0f 84 a7 02 00 00    	je     c0003df0 <f_open+0x2c3>
c0003b49:	89 fe                	mov    esi,edi
c0003b4b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b4f:	83 e6 3f             	and    esi,0x3f
c0003b52:	89 f0                	mov    eax,esi
c0003b54:	0f b6 c8             	movzx  ecx,al
c0003b57:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b5b:	e8 48 e8 ff ff       	call   c00023a8 <mount_volume>
c0003b60:	85 c0                	test   eax,eax
c0003b62:	0f 85 82 02 00 00    	jne    c0003dea <f_open+0x2bd>
c0003b68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b6c:	83 ec 0c             	sub    esp,0xc
c0003b6f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b73:	68 00 02 00 00       	push   0x200
c0003b78:	e8 ff 1e 00 00       	call   c0005a7c <ff_memalloc>
c0003b7d:	83 c4 10             	add    esp,0x10
c0003b80:	89 c5                	mov    ebp,eax
c0003b82:	b8 11 00 00 00       	mov    eax,0x11
c0003b87:	85 ed                	test   ebp,ebp
c0003b89:	0f 84 61 02 00 00    	je     c0003df0 <f_open+0x2c3>
c0003b8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b93:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b97:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b9a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b9e:	e8 0f fd ff ff       	call   c00038b2 <follow_path>
c0003ba3:	85 c0                	test   eax,eax
c0003ba5:	75 0c                	jne    c0003bb3 <f_open+0x86>
c0003ba7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003bac:	79 05                	jns    c0003bb3 <f_open+0x86>
c0003bae:	b8 06 00 00 00       	mov    eax,0x6
c0003bb3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003bb9:	0f 84 de 00 00 00    	je     c0003c9d <f_open+0x170>
c0003bbf:	85 c0                	test   eax,eax
c0003bc1:	74 1e                	je     c0003be1 <f_open+0xb4>
c0003bc3:	83 f8 04             	cmp    eax,0x4
c0003bc6:	0f 85 06 02 00 00    	jne    c0003dd2 <f_open+0x2a5>
c0003bcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bd0:	83 ce 08             	or     esi,0x8
c0003bd3:	e8 6e fd ff ff       	call   c0003946 <dir_register>
c0003bd8:	85 c0                	test   eax,eax
c0003bda:	74 2f                	je     c0003c0b <f_open+0xde>
c0003bdc:	e9 f1 01 00 00       	jmp    c0003dd2 <f_open+0x2a5>
c0003be1:	b8 07 00 00 00       	mov    eax,0x7
c0003be6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003beb:	0f 85 e1 01 00 00    	jne    c0003dd2 <f_open+0x2a5>
c0003bf1:	b8 08 00 00 00       	mov    eax,0x8
c0003bf6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bfc:	0f 85 d0 01 00 00    	jne    c0003dd2 <f_open+0x2a5>
c0003c02:	83 e7 08             	and    edi,0x8
c0003c05:	0f 84 bf 00 00 00    	je     c0003cca <f_open+0x19d>
c0003c0b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003c0f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c13:	89 ca                	mov    edx,ecx
c0003c15:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c19:	8a 00                	mov    al,BYTE PTR [eax]
c0003c1b:	e8 b0 f4 ff ff       	call   c00030d0 <ld_clust.isra.0>
c0003c20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c24:	89 c7                	mov    edi,eax
c0003c26:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c2b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c2e:	e8 25 e1 ff ff       	call   c0001d58 <st_dword>
c0003c33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c37:	31 c9                	xor    ecx,ecx
c0003c39:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c41:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c45:	e8 af f4 ff ff       	call   c00030f9 <st_clust.isra.1>
c0003c4a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c4e:	31 d2                	xor    edx,edx
c0003c50:	83 c0 1c             	add    eax,0x1c
c0003c53:	e8 00 e1 ff ff       	call   c0001d58 <st_dword>
c0003c58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c5c:	85 ff                	test   edi,edi
c0003c5e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c62:	74 66                	je     c0003cca <f_open+0x19d>
c0003c64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c68:	31 c9                	xor    ecx,ecx
c0003c6a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c6d:	89 fa                	mov    edx,edi
c0003c6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c73:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c77:	e8 a9 f7 ff ff       	call   c0003425 <remove_chain>
c0003c7c:	85 c0                	test   eax,eax
c0003c7e:	0f 85 4e 01 00 00    	jne    c0003dd2 <f_open+0x2a5>
c0003c84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c88:	4f                   	dec    edi
c0003c89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c8d:	e8 c3 e5 ff ff       	call   c0002255 <move_window>
c0003c92:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c96:	85 c0                	test   eax,eax
c0003c98:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c9b:	eb 27                	jmp    c0003cc4 <f_open+0x197>
c0003c9d:	85 c0                	test   eax,eax
c0003c9f:	0f 85 2d 01 00 00    	jne    c0003dd2 <f_open+0x2a5>
c0003ca5:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003ca9:	b8 04 00 00 00       	mov    eax,0x4
c0003cae:	f6 c2 10             	test   dl,0x10
c0003cb1:	0f 85 1b 01 00 00    	jne    c0003dd2 <f_open+0x2a5>
c0003cb7:	83 e7 02             	and    edi,0x2
c0003cba:	74 0e                	je     c0003cca <f_open+0x19d>
c0003cbc:	b8 07 00 00 00       	mov    eax,0x7
c0003cc1:	80 e2 01             	and    dl,0x1
c0003cc4:	0f 85 08 01 00 00    	jne    c0003dd2 <f_open+0x2a5>
c0003cca:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cd0:	74 03                	je     c0003cd5 <f_open+0x1a8>
c0003cd2:	83 ce 40             	or     esi,0x40
c0003cd5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cd9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003cdd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003ce0:	89 fa                	mov    edx,edi
c0003ce2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ce6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003ce9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cec:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cee:	e8 dd f3 ff ff       	call   c00030d0 <ld_clust.isra.0>
c0003cf3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003cf6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003cf9:	e8 3e e0 ff ff       	call   c0001d3c <ld_dword>
c0003cfe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d02:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d05:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003d07:	31 d2                	xor    edx,edx
c0003d09:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003d0d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d11:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d15:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d1c:	89 f0                	mov    eax,esi
c0003d1e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d25:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d28:	b9 00 02 00 00       	mov    ecx,0x200
c0003d2d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d34:	e8 37 e0 ff ff       	call   c0001d70 <mem_set>
c0003d39:	83 e6 20             	and    esi,0x20
c0003d3c:	75 07                	jne    c0003d45 <f_open+0x218>
c0003d3e:	31 c0                	xor    eax,eax
c0003d40:	e9 8d 00 00 00       	jmp    c0003dd2 <f_open+0x2a5>
c0003d45:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d48:	85 ff                	test   edi,edi
c0003d4a:	74 f2                	je     c0003d3e <f_open+0x211>
c0003d4c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d53:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d56:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d5a:	c1 e6 09             	shl    esi,0x9
c0003d5d:	39 fe                	cmp    esi,edi
c0003d5f:	73 1c                	jae    c0003d7d <f_open+0x250>
c0003d61:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d63:	29 f7                	sub    edi,esi
c0003d65:	e8 b7 f3 ff ff       	call   c0003121 <get_fat.isra.2>
c0003d6a:	89 c2                	mov    edx,eax
c0003d6c:	83 f8 01             	cmp    eax,0x1
c0003d6f:	76 10                	jbe    c0003d81 <f_open+0x254>
c0003d71:	83 f8 ff             	cmp    eax,0xffffffff
c0003d74:	75 e7                	jne    c0003d5d <f_open+0x230>
c0003d76:	b8 01 00 00 00       	mov    eax,0x1
c0003d7b:	eb 09                	jmp    c0003d86 <f_open+0x259>
c0003d7d:	31 c0                	xor    eax,eax
c0003d7f:	eb 05                	jmp    c0003d86 <f_open+0x259>
c0003d81:	b8 02 00 00 00       	mov    eax,0x2
c0003d86:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d89:	85 c0                	test   eax,eax
c0003d8b:	75 45                	jne    c0003dd2 <f_open+0x2a5>
c0003d8d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d93:	74 a9                	je     c0003d3e <f_open+0x211>
c0003d95:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d99:	89 f0                	mov    eax,esi
c0003d9b:	e8 d5 e1 ff ff       	call   c0001f75 <clst2sect>
c0003da0:	89 c2                	mov    edx,eax
c0003da2:	b8 02 00 00 00       	mov    eax,0x2
c0003da7:	85 d2                	test   edx,edx
c0003da9:	74 27                	je     c0003dd2 <f_open+0x2a5>
c0003dab:	89 f9                	mov    ecx,edi
c0003dad:	c1 e9 09             	shr    ecx,0x9
c0003db0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003db3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003db6:	6a 01                	push   0x1
c0003db8:	50                   	push   eax
c0003db9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dbd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003dc1:	50                   	push   eax
c0003dc2:	e8 1d df ff ff       	call   c0001ce4 <disk_read>
c0003dc7:	83 c4 10             	add    esp,0x10
c0003dca:	85 c0                	test   eax,eax
c0003dcc:	0f 95 c0             	setne  al
c0003dcf:	0f b6 c0             	movzx  eax,al
c0003dd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dd6:	83 ec 0c             	sub    esp,0xc
c0003dd9:	55                   	push   ebp
c0003dda:	e8 b5 1c 00 00       	call   c0005a94 <ff_memfree>
c0003ddf:	83 c4 10             	add    esp,0x10
c0003de2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003de6:	85 c0                	test   eax,eax
c0003de8:	74 06                	je     c0003df0 <f_open+0x2c3>
c0003dea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003df0:	83 c4 5c             	add    esp,0x5c
c0003df3:	5b                   	pop    ebx
c0003df4:	5e                   	pop    esi
c0003df5:	5f                   	pop    edi
c0003df6:	5d                   	pop    ebp
c0003df7:	c3                   	ret    

c0003df8 <f_read>:
c0003df8:	55                   	push   ebp
c0003df9:	57                   	push   edi
c0003dfa:	56                   	push   esi
c0003dfb:	53                   	push   ebx
c0003dfc:	83 ec 2c             	sub    esp,0x2c
c0003dff:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e03:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e07:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e0d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e11:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e15:	89 d8                	mov    eax,ebx
c0003e17:	e8 8f e3 ff ff       	call   c00021ab <validate>
c0003e1c:	89 c5                	mov    ebp,eax
c0003e1e:	85 c0                	test   eax,eax
c0003e20:	0f 85 c7 01 00 00    	jne    c0003fed <f_read+0x1f5>
c0003e26:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e2a:	85 ed                	test   ebp,ebp
c0003e2c:	0f 85 bb 01 00 00    	jne    c0003fed <f_read+0x1f5>
c0003e32:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e36:	0f 84 ac 01 00 00    	je     c0003fe8 <f_read+0x1f0>
c0003e3c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e3f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e42:	89 c7                	mov    edi,eax
c0003e44:	39 f0                	cmp    eax,esi
c0003e46:	0f 86 ad 00 00 00    	jbe    c0003ef9 <f_read+0x101>
c0003e4c:	89 f7                	mov    edi,esi
c0003e4e:	e9 a6 00 00 00       	jmp    c0003ef9 <f_read+0x101>
c0003e53:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e56:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e5c:	0f 85 5b 01 00 00    	jne    c0003fbd <f_read+0x1c5>
c0003e62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e66:	89 d1                	mov    ecx,edx
c0003e68:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e6c:	c1 e9 09             	shr    ecx,0x9
c0003e6f:	48                   	dec    eax
c0003e70:	21 c8                	and    eax,ecx
c0003e72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e76:	0f 84 8a 00 00 00    	je     c0003f06 <f_read+0x10e>
c0003e7c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e80:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e83:	89 c8                	mov    eax,ecx
c0003e85:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e89:	e8 e7 e0 ff ff       	call   c0001f75 <clst2sect>
c0003e8e:	85 c0                	test   eax,eax
c0003e90:	0f 84 88 00 00 00    	je     c0003f1e <f_read+0x126>
c0003e96:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003ea2:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003ea8:	0f 86 bd 00 00 00    	jbe    c0003f6b <f_read+0x173>
c0003eae:	89 fe                	mov    esi,edi
c0003eb0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003eb4:	c1 ee 09             	shr    esi,0x9
c0003eb7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ebb:	01 f2                	add    edx,esi
c0003ebd:	39 c2                	cmp    edx,eax
c0003ebf:	76 06                	jbe    c0003ec7 <f_read+0xcf>
c0003ec1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ec5:	89 c6                	mov    esi,eax
c0003ec7:	56                   	push   esi
c0003ec8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ecc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ed0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ed4:	50                   	push   eax
c0003ed5:	e8 0a de ff ff       	call   c0001ce4 <disk_read>
c0003eda:	83 c4 10             	add    esp,0x10
c0003edd:	85 c0                	test   eax,eax
c0003edf:	75 50                	jne    c0003f31 <f_read+0x139>
c0003ee1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ee5:	78 60                	js     c0003f47 <f_read+0x14f>
c0003ee7:	c1 e6 09             	shl    esi,0x9
c0003eea:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003eee:	29 f7                	sub    edi,esi
c0003ef0:	01 30                	add    DWORD PTR [eax],esi
c0003ef2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ef6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ef9:	85 ff                	test   edi,edi
c0003efb:	0f 85 52 ff ff ff    	jne    c0003e53 <f_read+0x5b>
c0003f01:	e9 e7 00 00 00       	jmp    c0003fed <f_read+0x1f5>
c0003f06:	85 d2                	test   edx,edx
c0003f08:	75 05                	jne    c0003f0f <f_read+0x117>
c0003f0a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f0d:	eb 0a                	jmp    c0003f19 <f_read+0x121>
c0003f0f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f12:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f14:	e8 08 f2 ff ff       	call   c0003121 <get_fat.isra.2>
c0003f19:	83 f8 01             	cmp    eax,0x1
c0003f1c:	77 0e                	ja     c0003f2c <f_read+0x134>
c0003f1e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f22:	bd 02 00 00 00       	mov    ebp,0x2
c0003f27:	e9 c1 00 00 00       	jmp    c0003fed <f_read+0x1f5>
c0003f2c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f2f:	75 0e                	jne    c0003f3f <f_read+0x147>
c0003f31:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f35:	bd 01 00 00 00       	mov    ebp,0x1
c0003f3a:	e9 ae 00 00 00       	jmp    c0003fed <f_read+0x1f5>
c0003f3f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f42:	e9 35 ff ff ff       	jmp    c0003e7c <f_read+0x84>
c0003f47:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f4a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f4e:	39 f0                	cmp    eax,esi
c0003f50:	73 95                	jae    c0003ee7 <f_read+0xef>
c0003f52:	c1 e0 09             	shl    eax,0x9
c0003f55:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f58:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f5c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f61:	e8 f5 dd ff ff       	call   c0001d5b <mem_cpy>
c0003f66:	e9 7c ff ff ff       	jmp    c0003ee7 <f_read+0xef>
c0003f6b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f6e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f72:	74 42                	je     c0003fb6 <f_read+0x1be>
c0003f74:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f77:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f7b:	79 19                	jns    c0003f96 <f_read+0x19e>
c0003f7d:	6a 01                	push   0x1
c0003f7f:	50                   	push   eax
c0003f80:	56                   	push   esi
c0003f81:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f85:	50                   	push   eax
c0003f86:	e8 6f dd ff ff       	call   c0001cfa <disk_write>
c0003f8b:	83 c4 10             	add    esp,0x10
c0003f8e:	85 c0                	test   eax,eax
c0003f90:	75 9f                	jne    c0003f31 <f_read+0x139>
c0003f92:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f96:	6a 01                	push   0x1
c0003f98:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f9c:	56                   	push   esi
c0003f9d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fa1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fa5:	50                   	push   eax
c0003fa6:	e8 39 dd ff ff       	call   c0001ce4 <disk_read>
c0003fab:	83 c4 10             	add    esp,0x10
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	0f 85 7b ff ff ff    	jne    c0003f31 <f_read+0x139>
c0003fb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fba:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fbd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fc0:	ba 00 02 00 00       	mov    edx,0x200
c0003fc5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fca:	89 fe                	mov    esi,edi
c0003fcc:	29 c2                	sub    edx,eax
c0003fce:	39 d7                	cmp    edi,edx
c0003fd0:	76 02                	jbe    c0003fd4 <f_read+0x1dc>
c0003fd2:	89 d6                	mov    esi,edx
c0003fd4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fd8:	89 f1                	mov    ecx,esi
c0003fda:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fde:	e8 78 dd ff ff       	call   c0001d5b <mem_cpy>
c0003fe3:	e9 02 ff ff ff       	jmp    c0003eea <f_read+0xf2>
c0003fe8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fed:	83 c4 2c             	add    esp,0x2c
c0003ff0:	89 e8                	mov    eax,ebp
c0003ff2:	5b                   	pop    ebx
c0003ff3:	5e                   	pop    esi
c0003ff4:	5f                   	pop    edi
c0003ff5:	5d                   	pop    ebp
c0003ff6:	c3                   	ret    

c0003ff7 <f_write>:
c0003ff7:	55                   	push   ebp
c0003ff8:	57                   	push   edi
c0003ff9:	56                   	push   esi
c0003ffa:	53                   	push   ebx
c0003ffb:	83 ec 2c             	sub    esp,0x2c
c0003ffe:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004002:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004006:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000400c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004010:	89 d8                	mov    eax,ebx
c0004012:	e8 94 e1 ff ff       	call   c00021ab <validate>
c0004017:	89 c5                	mov    ebp,eax
c0004019:	85 c0                	test   eax,eax
c000401b:	0f 85 00 02 00 00    	jne    c0004221 <f_write+0x22a>
c0004021:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004025:	85 ed                	test   ebp,ebp
c0004027:	0f 85 f4 01 00 00    	jne    c0004221 <f_write+0x22a>
c000402d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004031:	0f 84 e5 01 00 00    	je     c000421c <f_write+0x225>
c0004037:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000403a:	89 c7                	mov    edi,eax
c000403c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004040:	0f 83 ea 00 00 00    	jae    c0004130 <f_write+0x139>
c0004046:	f7 d0                	not    eax
c0004048:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000404c:	e9 df 00 00 00       	jmp    c0004130 <f_write+0x139>
c0004051:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004054:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000405a:	0f 85 8b 01 00 00    	jne    c00041eb <f_write+0x1f4>
c0004060:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004064:	89 d1                	mov    ecx,edx
c0004066:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000406a:	c1 e9 09             	shr    ecx,0x9
c000406d:	48                   	dec    eax
c000406e:	21 c8                	and    eax,ecx
c0004070:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004074:	0f 84 c3 00 00 00    	je     c000413d <f_write+0x146>
c000407a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000407e:	0f 88 18 01 00 00    	js     c000419c <f_write+0x1a5>
c0004084:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004088:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000408b:	89 c8                	mov    eax,ecx
c000408d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004091:	e8 df de ff ff       	call   c0001f75 <clst2sect>
c0004096:	85 c0                	test   eax,eax
c0004098:	0f 84 c8 00 00 00    	je     c0004166 <f_write+0x16f>
c000409e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00040a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040a6:	01 c7                	add    edi,eax
c00040a8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040b0:	0f 86 0d 01 00 00    	jbe    c00041c3 <f_write+0x1cc>
c00040b6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ba:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040be:	c1 ee 09             	shr    esi,0x9
c00040c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040c5:	01 f2                	add    edx,esi
c00040c7:	39 c2                	cmp    edx,eax
c00040c9:	76 06                	jbe    c00040d1 <f_write+0xda>
c00040cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040cf:	89 c6                	mov    esi,eax
c00040d1:	56                   	push   esi
c00040d2:	57                   	push   edi
c00040d3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040db:	50                   	push   eax
c00040dc:	e8 19 dc ff ff       	call   c0001cfa <disk_write>
c00040e1:	83 c4 10             	add    esp,0x10
c00040e4:	85 c0                	test   eax,eax
c00040e6:	0f 85 8d 00 00 00    	jne    c0004179 <f_write+0x182>
c00040ec:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ef:	29 fa                	sub    edx,edi
c00040f1:	39 f2                	cmp    edx,esi
c00040f3:	73 18                	jae    c000410d <f_write+0x116>
c00040f5:	c1 e2 09             	shl    edx,0x9
c00040f8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040fb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ff:	b9 00 02 00 00       	mov    ecx,0x200
c0004104:	e8 52 dc ff ff       	call   c0001d5b <mem_cpy>
c0004109:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000410d:	c1 e6 09             	shl    esi,0x9
c0004110:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004114:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004118:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000411c:	01 30                	add    DWORD PTR [eax],esi
c000411e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004121:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004124:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004127:	39 f0                	cmp    eax,esi
c0004129:	73 02                	jae    c000412d <f_write+0x136>
c000412b:	89 f0                	mov    eax,esi
c000412d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004130:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004135:	0f 85 16 ff ff ff    	jne    c0004051 <f_write+0x5a>
c000413b:	eb 1b                	jmp    c0004158 <f_write+0x161>
c000413d:	85 d2                	test   edx,edx
c000413f:	75 09                	jne    c000414a <f_write+0x153>
c0004141:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004144:	85 c0                	test   eax,eax
c0004146:	75 19                	jne    c0004161 <f_write+0x16a>
c0004148:	eb 03                	jmp    c000414d <f_write+0x156>
c000414a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000414d:	89 d8                	mov    eax,ebx
c000414f:	e8 97 f1 ff ff       	call   c00032eb <create_chain>
c0004154:	85 c0                	test   eax,eax
c0004156:	75 09                	jne    c0004161 <f_write+0x16a>
c0004158:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000415c:	e9 c0 00 00 00       	jmp    c0004221 <f_write+0x22a>
c0004161:	83 f8 01             	cmp    eax,0x1
c0004164:	75 0e                	jne    c0004174 <f_write+0x17d>
c0004166:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000416a:	bd 02 00 00 00       	mov    ebp,0x2
c000416f:	e9 ad 00 00 00       	jmp    c0004221 <f_write+0x22a>
c0004174:	83 f8 ff             	cmp    eax,0xffffffff
c0004177:	75 0e                	jne    c0004187 <f_write+0x190>
c0004179:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000417d:	bd 01 00 00 00       	mov    ebp,0x1
c0004182:	e9 9a 00 00 00       	jmp    c0004221 <f_write+0x22a>
c0004187:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000418a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000418e:	0f 85 e6 fe ff ff    	jne    c000407a <f_write+0x83>
c0004194:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004197:	e9 de fe ff ff       	jmp    c000407a <f_write+0x83>
c000419c:	6a 01                	push   0x1
c000419e:	8d 43 28             	lea    eax,[ebx+0x28]
c00041a1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00041a4:	50                   	push   eax
c00041a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041ad:	50                   	push   eax
c00041ae:	e8 47 db ff ff       	call   c0001cfa <disk_write>
c00041b3:	83 c4 10             	add    esp,0x10
c00041b6:	85 c0                	test   eax,eax
c00041b8:	75 bf                	jne    c0004179 <f_write+0x182>
c00041ba:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041be:	e9 c1 fe ff ff       	jmp    c0004084 <f_write+0x8d>
c00041c3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041c6:	74 20                	je     c00041e8 <f_write+0x1f1>
c00041c8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041cb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041ce:	76 18                	jbe    c00041e8 <f_write+0x1f1>
c00041d0:	6a 01                	push   0x1
c00041d2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041d5:	57                   	push   edi
c00041d6:	50                   	push   eax
c00041d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041db:	50                   	push   eax
c00041dc:	e8 03 db ff ff       	call   c0001ce4 <disk_read>
c00041e1:	83 c4 10             	add    esp,0x10
c00041e4:	85 c0                	test   eax,eax
c00041e6:	75 91                	jne    c0004179 <f_write+0x182>
c00041e8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041eb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041ee:	ba 00 02 00 00       	mov    edx,0x200
c00041f3:	25 ff 01 00 00       	and    eax,0x1ff
c00041f8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041fc:	29 c2                	sub    edx,eax
c00041fe:	39 d6                	cmp    esi,edx
c0004200:	76 02                	jbe    c0004204 <f_write+0x20d>
c0004202:	89 d6                	mov    esi,edx
c0004204:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004208:	89 f1                	mov    ecx,esi
c000420a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000420e:	e8 48 db ff ff       	call   c0001d5b <mem_cpy>
c0004213:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004217:	e9 f4 fe ff ff       	jmp    c0004110 <f_write+0x119>
c000421c:	bd 07 00 00 00       	mov    ebp,0x7
c0004221:	83 c4 2c             	add    esp,0x2c
c0004224:	89 e8                	mov    eax,ebp
c0004226:	5b                   	pop    ebx
c0004227:	5e                   	pop    esi
c0004228:	5f                   	pop    edi
c0004229:	5d                   	pop    ebp
c000422a:	c3                   	ret    

c000422b <f_sync>:
c000422b:	56                   	push   esi
c000422c:	53                   	push   ebx
c000422d:	83 ec 14             	sub    esp,0x14
c0004230:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004234:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004238:	89 d8                	mov    eax,ebx
c000423a:	e8 6c df ff ff       	call   c00021ab <validate>
c000423f:	85 c0                	test   eax,eax
c0004241:	0f 85 93 00 00 00    	jne    c00042da <f_sync+0xaf>
c0004247:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000424a:	f6 c2 40             	test   dl,0x40
c000424d:	0f 84 87 00 00 00    	je     c00042da <f_sync+0xaf>
c0004253:	84 d2                	test   dl,dl
c0004255:	79 29                	jns    c0004280 <f_sync+0x55>
c0004257:	6a 01                	push   0x1
c0004259:	8d 43 28             	lea    eax,[ebx+0x28]
c000425c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000425f:	50                   	push   eax
c0004260:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004264:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004268:	50                   	push   eax
c0004269:	e8 8c da ff ff       	call   c0001cfa <disk_write>
c000426e:	83 c4 10             	add    esp,0x10
c0004271:	89 c2                	mov    edx,eax
c0004273:	b8 01 00 00 00       	mov    eax,0x1
c0004278:	85 d2                	test   edx,edx
c000427a:	75 5e                	jne    c00042da <f_sync+0xaf>
c000427c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004280:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004283:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004287:	e8 c9 df ff ff       	call   c0002255 <move_window>
c000428c:	85 c0                	test   eax,eax
c000428e:	75 4a                	jne    c00042da <f_sync+0xaf>
c0004290:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004293:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004297:	89 f2                	mov    edx,esi
c0004299:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000429c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000429e:	e8 56 ee ff ff       	call   c00030f9 <st_clust.isra.1>
c00042a3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042a6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00042a9:	e8 aa da ff ff       	call   c0001d58 <st_dword>
c00042ae:	8d 46 16             	lea    eax,[esi+0x16]
c00042b1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042b6:	e8 9d da ff ff       	call   c0001d58 <st_dword>
c00042bb:	8d 46 12             	lea    eax,[esi+0x12]
c00042be:	31 d2                	xor    edx,edx
c00042c0:	e8 8f da ff ff       	call   c0001d54 <st_word>
c00042c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042d1:	e8 bf e9 ff ff       	call   c0002c95 <sync_fs>
c00042d6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042da:	83 c4 14             	add    esp,0x14
c00042dd:	5b                   	pop    ebx
c00042de:	5e                   	pop    esi
c00042df:	c3                   	ret    

c00042e0 <f_close>:
c00042e0:	53                   	push   ebx
c00042e1:	83 ec 24             	sub    esp,0x24
c00042e4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042e8:	53                   	push   ebx
c00042e9:	e8 3d ff ff ff       	call   c000422b <f_sync>
c00042ee:	83 c4 10             	add    esp,0x10
c00042f1:	85 c0                	test   eax,eax
c00042f3:	75 15                	jne    c000430a <f_close+0x2a>
c00042f5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042f9:	89 d8                	mov    eax,ebx
c00042fb:	e8 ab de ff ff       	call   c00021ab <validate>
c0004300:	85 c0                	test   eax,eax
c0004302:	75 06                	jne    c000430a <f_close+0x2a>
c0004304:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000430a:	83 c4 18             	add    esp,0x18
c000430d:	5b                   	pop    ebx
c000430e:	c3                   	ret    

c000430f <f_lseek>:
c000430f:	55                   	push   ebp
c0004310:	57                   	push   edi
c0004311:	56                   	push   esi
c0004312:	53                   	push   ebx
c0004313:	83 ec 2c             	sub    esp,0x2c
c0004316:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000431a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000431e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004322:	89 d8                	mov    eax,ebx
c0004324:	e8 82 de ff ff       	call   c00021ab <validate>
c0004329:	89 c5                	mov    ebp,eax
c000432b:	85 c0                	test   eax,eax
c000432d:	0f 85 79 01 00 00    	jne    c00044ac <f_lseek+0x19d>
c0004333:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004337:	85 ed                	test   ebp,ebp
c0004339:	0f 85 6d 01 00 00    	jne    c00044ac <f_lseek+0x19d>
c000433f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004342:	39 f0                	cmp    eax,esi
c0004344:	73 08                	jae    c000434e <f_lseek+0x3f>
c0004346:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000434a:	75 02                	jne    c000434e <f_lseek+0x3f>
c000434c:	89 c6                	mov    esi,eax
c000434e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004351:	85 f6                	test   esi,esi
c0004353:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000435a:	75 07                	jne    c0004363 <f_lseek+0x54>
c000435c:	31 f6                	xor    esi,esi
c000435e:	e9 e2 00 00 00       	jmp    c0004445 <f_lseek+0x136>
c0004363:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004367:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000436b:	c1 e7 09             	shl    edi,0x9
c000436e:	85 c9                	test   ecx,ecx
c0004370:	74 28                	je     c000439a <f_lseek+0x8b>
c0004372:	49                   	dec    ecx
c0004373:	31 d2                	xor    edx,edx
c0004375:	8d 46 ff             	lea    eax,[esi-0x1]
c0004378:	f7 f7                	div    edi
c000437a:	31 d2                	xor    edx,edx
c000437c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004380:	89 c8                	mov    eax,ecx
c0004382:	f7 f7                	div    edi
c0004384:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004388:	72 10                	jb     c000439a <f_lseek+0x8b>
c000438a:	89 f8                	mov    eax,edi
c000438c:	f7 d8                	neg    eax
c000438e:	21 c1                	and    ecx,eax
c0004390:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004393:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004396:	29 ce                	sub    esi,ecx
c0004398:	eb 3c                	jmp    c00043d6 <f_lseek+0xc7>
c000439a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000439d:	85 c0                	test   eax,eax
c000439f:	75 32                	jne    c00043d3 <f_lseek+0xc4>
c00043a1:	31 d2                	xor    edx,edx
c00043a3:	89 d8                	mov    eax,ebx
c00043a5:	e8 41 ef ff ff       	call   c00032eb <create_chain>
c00043aa:	83 f8 01             	cmp    eax,0x1
c00043ad:	75 0e                	jne    c00043bd <f_lseek+0xae>
c00043af:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043b3:	bd 02 00 00 00       	mov    ebp,0x2
c00043b8:	e9 ef 00 00 00       	jmp    c00044ac <f_lseek+0x19d>
c00043bd:	83 f8 ff             	cmp    eax,0xffffffff
c00043c0:	75 0e                	jne    c00043d0 <f_lseek+0xc1>
c00043c2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043c6:	bd 01 00 00 00       	mov    ebp,0x1
c00043cb:	e9 dc 00 00 00       	jmp    c00044ac <f_lseek+0x19d>
c00043d0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043d3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043d6:	85 c0                	test   eax,eax
c00043d8:	74 82                	je     c000435c <f_lseek+0x4d>
c00043da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043dd:	39 fe                	cmp    esi,edi
c00043df:	76 3d                	jbe    c000441e <f_lseek+0x10f>
c00043e1:	01 fa                	add    edx,edi
c00043e3:	29 fe                	sub    esi,edi
c00043e5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043e8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043ec:	89 c2                	mov    edx,eax
c00043ee:	74 0d                	je     c00043fd <f_lseek+0xee>
c00043f0:	89 d8                	mov    eax,ebx
c00043f2:	e8 f4 ee ff ff       	call   c00032eb <create_chain>
c00043f7:	85 c0                	test   eax,eax
c00043f9:	75 09                	jne    c0004404 <f_lseek+0xf5>
c00043fb:	eb 1f                	jmp    c000441c <f_lseek+0x10d>
c00043fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ff:	e8 1d ed ff ff       	call   c0003121 <get_fat.isra.2>
c0004404:	83 f8 ff             	cmp    eax,0xffffffff
c0004407:	74 b9                	je     c00043c2 <f_lseek+0xb3>
c0004409:	83 f8 01             	cmp    eax,0x1
c000440c:	76 a1                	jbe    c00043af <f_lseek+0xa0>
c000440e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004412:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004415:	76 98                	jbe    c00043af <f_lseek+0xa0>
c0004417:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000441a:	eb be                	jmp    c00043da <f_lseek+0xcb>
c000441c:	31 f6                	xor    esi,esi
c000441e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004421:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004427:	0f 84 2f ff ff ff    	je     c000435c <f_lseek+0x4d>
c000442d:	89 c2                	mov    edx,eax
c000442f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004433:	e8 3d db ff ff       	call   c0001f75 <clst2sect>
c0004438:	85 c0                	test   eax,eax
c000443a:	0f 84 6f ff ff ff    	je     c00043af <f_lseek+0xa0>
c0004440:	c1 ee 09             	shr    esi,0x9
c0004443:	01 c6                	add    esi,eax
c0004445:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004448:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000444b:	76 07                	jbe    c0004454 <f_lseek+0x145>
c000444d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004450:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004454:	a9 ff 01 00 00       	test   eax,0x1ff
c0004459:	74 51                	je     c00044ac <f_lseek+0x19d>
c000445b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000445e:	39 f0                	cmp    eax,esi
c0004460:	74 4a                	je     c00044ac <f_lseek+0x19d>
c0004462:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004465:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004469:	79 21                	jns    c000448c <f_lseek+0x17d>
c000446b:	6a 01                	push   0x1
c000446d:	50                   	push   eax
c000446e:	57                   	push   edi
c000446f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004473:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004477:	50                   	push   eax
c0004478:	e8 7d d8 ff ff       	call   c0001cfa <disk_write>
c000447d:	83 c4 10             	add    esp,0x10
c0004480:	85 c0                	test   eax,eax
c0004482:	0f 85 3a ff ff ff    	jne    c00043c2 <f_lseek+0xb3>
c0004488:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000448c:	6a 01                	push   0x1
c000448e:	56                   	push   esi
c000448f:	57                   	push   edi
c0004490:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004494:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004498:	50                   	push   eax
c0004499:	e8 46 d8 ff ff       	call   c0001ce4 <disk_read>
c000449e:	83 c4 10             	add    esp,0x10
c00044a1:	85 c0                	test   eax,eax
c00044a3:	0f 85 19 ff ff ff    	jne    c00043c2 <f_lseek+0xb3>
c00044a9:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00044ac:	83 c4 2c             	add    esp,0x2c
c00044af:	89 e8                	mov    eax,ebp
c00044b1:	5b                   	pop    ebx
c00044b2:	5e                   	pop    esi
c00044b3:	5f                   	pop    edi
c00044b4:	5d                   	pop    ebp
c00044b5:	c3                   	ret    

c00044b6 <f_opendir>:
c00044b6:	56                   	push   esi
c00044b7:	b8 09 00 00 00       	mov    eax,0x9
c00044bc:	53                   	push   ebx
c00044bd:	83 ec 24             	sub    esp,0x24
c00044c0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044c4:	85 db                	test   ebx,ebx
c00044c6:	0f 84 af 00 00 00    	je     c000457b <f_opendir+0xc5>
c00044cc:	31 c9                	xor    ecx,ecx
c00044ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044d2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044d6:	e8 cd de ff ff       	call   c00023a8 <mount_volume>
c00044db:	85 c0                	test   eax,eax
c00044dd:	0f 85 92 00 00 00    	jne    c0004575 <f_opendir+0xbf>
c00044e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044e7:	83 ec 0c             	sub    esp,0xc
c00044ea:	89 03                	mov    DWORD PTR [ebx],eax
c00044ec:	68 00 02 00 00       	push   0x200
c00044f1:	e8 86 15 00 00       	call   c0005a7c <ff_memalloc>
c00044f6:	83 c4 10             	add    esp,0x10
c00044f9:	89 c6                	mov    esi,eax
c00044fb:	b8 11 00 00 00       	mov    eax,0x11
c0004500:	85 f6                	test   esi,esi
c0004502:	74 77                	je     c000457b <f_opendir+0xc5>
c0004504:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004508:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000450c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000450f:	89 d8                	mov    eax,ebx
c0004511:	e8 9c f3 ff ff       	call   c00038b2 <follow_path>
c0004516:	85 c0                	test   eax,eax
c0004518:	75 37                	jne    c0004551 <f_opendir+0x9b>
c000451a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000451e:	78 1c                	js     c000453c <f_opendir+0x86>
c0004520:	b8 05 00 00 00       	mov    eax,0x5
c0004525:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004529:	74 26                	je     c0004551 <f_opendir+0x9b>
c000452b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000452e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004532:	8a 00                	mov    al,BYTE PTR [eax]
c0004534:	e8 97 eb ff ff       	call   c00030d0 <ld_clust.isra.0>
c0004539:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000453c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004540:	31 d2                	xor    edx,edx
c0004542:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004546:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000454a:	89 d8                	mov    eax,ebx
c000454c:	e8 d2 ec ff ff       	call   c0003223 <dir_sdi>
c0004551:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004555:	83 ec 0c             	sub    esp,0xc
c0004558:	56                   	push   esi
c0004559:	e8 36 15 00 00       	call   c0005a94 <ff_memfree>
c000455e:	83 c4 10             	add    esp,0x10
c0004561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004565:	83 f8 04             	cmp    eax,0x4
c0004568:	74 06                	je     c0004570 <f_opendir+0xba>
c000456a:	85 c0                	test   eax,eax
c000456c:	74 0d                	je     c000457b <f_opendir+0xc5>
c000456e:	eb 05                	jmp    c0004575 <f_opendir+0xbf>
c0004570:	b8 05 00 00 00       	mov    eax,0x5
c0004575:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000457b:	83 c4 24             	add    esp,0x24
c000457e:	5b                   	pop    ebx
c000457f:	5e                   	pop    esi
c0004580:	c3                   	ret    

c0004581 <f_closedir>:
c0004581:	53                   	push   ebx
c0004582:	83 ec 18             	sub    esp,0x18
c0004585:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004589:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000458d:	89 d8                	mov    eax,ebx
c000458f:	e8 17 dc ff ff       	call   c00021ab <validate>
c0004594:	85 c0                	test   eax,eax
c0004596:	75 06                	jne    c000459e <f_closedir+0x1d>
c0004598:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000459e:	83 c4 18             	add    esp,0x18
c00045a1:	5b                   	pop    ebx
c00045a2:	c3                   	ret    

c00045a3 <f_readdir>:
c00045a3:	57                   	push   edi
c00045a4:	56                   	push   esi
c00045a5:	53                   	push   ebx
c00045a6:	83 ec 20             	sub    esp,0x20
c00045a9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045ad:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045b1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045b5:	89 d8                	mov    eax,ebx
c00045b7:	e8 ef db ff ff       	call   c00021ab <validate>
c00045bc:	85 c0                	test   eax,eax
c00045be:	75 6e                	jne    c000462e <f_readdir+0x8b>
c00045c0:	85 ff                	test   edi,edi
c00045c2:	75 0b                	jne    c00045cf <f_readdir+0x2c>
c00045c4:	31 d2                	xor    edx,edx
c00045c6:	89 d8                	mov    eax,ebx
c00045c8:	e8 56 ec ff ff       	call   c0003223 <dir_sdi>
c00045cd:	eb 5f                	jmp    c000462e <f_readdir+0x8b>
c00045cf:	83 ec 0c             	sub    esp,0xc
c00045d2:	68 00 02 00 00       	push   0x200
c00045d7:	e8 a0 14 00 00       	call   c0005a7c <ff_memalloc>
c00045dc:	83 c4 10             	add    esp,0x10
c00045df:	89 c6                	mov    esi,eax
c00045e1:	b8 11 00 00 00       	mov    eax,0x11
c00045e6:	85 f6                	test   esi,esi
c00045e8:	74 44                	je     c000462e <f_readdir+0x8b>
c00045ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045ee:	31 d2                	xor    edx,edx
c00045f0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 1a f0 ff ff       	call   c0003614 <dir_read>
c00045fa:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ff:	75 19                	jne    c000461a <f_readdir+0x77>
c0004601:	89 fa                	mov    edx,edi
c0004603:	89 d8                	mov    eax,ebx
c0004605:	e8 e2 e8 ff ff       	call   c0002eec <get_fileinfo>
c000460a:	31 d2                	xor    edx,edx
c000460c:	89 d8                	mov    eax,ebx
c000460e:	e8 9b ee ff ff       	call   c00034ae <dir_next>
c0004613:	83 f8 04             	cmp    eax,0x4
c0004616:	75 02                	jne    c000461a <f_readdir+0x77>
c0004618:	31 c0                	xor    eax,eax
c000461a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000461e:	83 ec 0c             	sub    esp,0xc
c0004621:	56                   	push   esi
c0004622:	e8 6d 14 00 00       	call   c0005a94 <ff_memfree>
c0004627:	83 c4 10             	add    esp,0x10
c000462a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000462e:	83 c4 20             	add    esp,0x20
c0004631:	5b                   	pop    ebx
c0004632:	5e                   	pop    esi
c0004633:	5f                   	pop    edi
c0004634:	c3                   	ret    

c0004635 <f_stat>:
c0004635:	57                   	push   edi
c0004636:	31 c9                	xor    ecx,ecx
c0004638:	56                   	push   esi
c0004639:	53                   	push   ebx
c000463a:	83 ec 30             	sub    esp,0x30
c000463d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004641:	89 e2                	mov    edx,esp
c0004643:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004647:	e8 5c dd ff ff       	call   c00023a8 <mount_volume>
c000464c:	89 c3                	mov    ebx,eax
c000464e:	85 c0                	test   eax,eax
c0004650:	75 59                	jne    c00046ab <f_stat+0x76>
c0004652:	83 ec 0c             	sub    esp,0xc
c0004655:	bb 11 00 00 00       	mov    ebx,0x11
c000465a:	68 00 02 00 00       	push   0x200
c000465f:	e8 18 14 00 00       	call   c0005a7c <ff_memalloc>
c0004664:	83 c4 10             	add    esp,0x10
c0004667:	89 c6                	mov    esi,eax
c0004669:	85 c0                	test   eax,eax
c000466b:	74 3e                	je     c00046ab <f_stat+0x76>
c000466d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004670:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004674:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004677:	89 e0                	mov    eax,esp
c0004679:	e8 34 f2 ff ff       	call   c00038b2 <follow_path>
c000467e:	89 c3                	mov    ebx,eax
c0004680:	85 c0                	test   eax,eax
c0004682:	75 1b                	jne    c000469f <f_stat+0x6a>
c0004684:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004689:	78 0f                	js     c000469a <f_stat+0x65>
c000468b:	85 ff                	test   edi,edi
c000468d:	74 10                	je     c000469f <f_stat+0x6a>
c000468f:	89 fa                	mov    edx,edi
c0004691:	89 e0                	mov    eax,esp
c0004693:	e8 54 e8 ff ff       	call   c0002eec <get_fileinfo>
c0004698:	eb 05                	jmp    c000469f <f_stat+0x6a>
c000469a:	bb 06 00 00 00       	mov    ebx,0x6
c000469f:	83 ec 0c             	sub    esp,0xc
c00046a2:	56                   	push   esi
c00046a3:	e8 ec 13 00 00       	call   c0005a94 <ff_memfree>
c00046a8:	83 c4 10             	add    esp,0x10
c00046ab:	83 c4 30             	add    esp,0x30
c00046ae:	89 d8                	mov    eax,ebx
c00046b0:	5b                   	pop    ebx
c00046b1:	5e                   	pop    esi
c00046b2:	5f                   	pop    edi
c00046b3:	c3                   	ret    

c00046b4 <f_getfree>:
c00046b4:	55                   	push   ebp
c00046b5:	31 c9                	xor    ecx,ecx
c00046b7:	57                   	push   edi
c00046b8:	56                   	push   esi
c00046b9:	53                   	push   ebx
c00046ba:	83 ec 2c             	sub    esp,0x2c
c00046bd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046c1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046c5:	e8 de dc ff ff       	call   c00023a8 <mount_volume>
c00046ca:	89 c7                	mov    edi,eax
c00046cc:	85 c0                	test   eax,eax
c00046ce:	0f 85 d8 00 00 00    	jne    c00047ac <f_getfree+0xf8>
c00046d4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046d8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046dc:	89 30                	mov    DWORD PTR [eax],esi
c00046de:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046e1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046e4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046e7:	39 d0                	cmp    eax,edx
c00046e9:	77 0b                	ja     c00046f6 <f_getfree+0x42>
c00046eb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ef:	89 01                	mov    DWORD PTR [ecx],eax
c00046f1:	e9 b6 00 00 00       	jmp    c00047ac <f_getfree+0xf8>
c00046f6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046f9:	75 29                	jne    c0004724 <f_getfree+0x70>
c00046fb:	bd 02 00 00 00       	mov    ebp,0x2
c0004700:	31 db                	xor    ebx,ebx
c0004702:	89 ea                	mov    edx,ebp
c0004704:	89 f0                	mov    eax,esi
c0004706:	e8 16 ea ff ff       	call   c0003121 <get_fat.isra.2>
c000470b:	83 f8 ff             	cmp    eax,0xffffffff
c000470e:	74 7b                	je     c000478b <f_getfree+0xd7>
c0004710:	83 f8 01             	cmp    eax,0x1
c0004713:	74 7d                	je     c0004792 <f_getfree+0xde>
c0004715:	83 d3 00             	adc    ebx,0x0
c0004718:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000471c:	45                   	inc    ebp
c000471d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004720:	77 e0                	ja     c0004702 <f_getfree+0x4e>
c0004722:	eb 77                	jmp    c000479b <f_getfree+0xe7>
c0004724:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004727:	31 db                	xor    ebx,ebx
c0004729:	31 f6                	xor    esi,esi
c000472b:	85 f6                	test   esi,esi
c000472d:	75 18                	jne    c0004747 <f_getfree+0x93>
c000472f:	8d 42 01             	lea    eax,[edx+0x1]
c0004732:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004736:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000473a:	e8 16 db ff ff       	call   c0002255 <move_window>
c000473f:	85 c0                	test   eax,eax
c0004741:	75 56                	jne    c0004799 <f_getfree+0xe5>
c0004743:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004747:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000474b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000474f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004753:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004756:	75 11                	jne    c0004769 <f_getfree+0xb5>
c0004758:	e8 d2 d5 ff ff       	call   c0001d2f <ld_word>
c000475d:	66 83 f8 01          	cmp    ax,0x1
c0004761:	83 d3 00             	adc    ebx,0x0
c0004764:	83 c6 02             	add    esi,0x2
c0004767:	eb 13                	jmp    c000477c <f_getfree+0xc8>
c0004769:	e8 ce d5 ff ff       	call   c0001d3c <ld_dword>
c000476e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004773:	83 f8 01             	cmp    eax,0x1
c0004776:	83 d3 00             	adc    ebx,0x0
c0004779:	83 c6 04             	add    esi,0x4
c000477c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004782:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004786:	4d                   	dec    ebp
c0004787:	75 a2                	jne    c000472b <f_getfree+0x77>
c0004789:	eb 10                	jmp    c000479b <f_getfree+0xe7>
c000478b:	bf 01 00 00 00       	mov    edi,0x1
c0004790:	eb 09                	jmp    c000479b <f_getfree+0xe7>
c0004792:	bf 02 00 00 00       	mov    edi,0x2
c0004797:	eb 02                	jmp    c000479b <f_getfree+0xe7>
c0004799:	89 c7                	mov    edi,eax
c000479b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000479f:	89 18                	mov    DWORD PTR [eax],ebx
c00047a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047a5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00047a8:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00047ac:	83 c4 2c             	add    esp,0x2c
c00047af:	89 f8                	mov    eax,edi
c00047b1:	5b                   	pop    ebx
c00047b2:	5e                   	pop    esi
c00047b3:	5f                   	pop    edi
c00047b4:	5d                   	pop    ebp
c00047b5:	c3                   	ret    

c00047b6 <f_truncate>:
c00047b6:	56                   	push   esi
c00047b7:	53                   	push   ebx
c00047b8:	83 ec 14             	sub    esp,0x14
c00047bb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047bf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047c3:	89 d8                	mov    eax,ebx
c00047c5:	e8 e1 d9 ff ff       	call   c00021ab <validate>
c00047ca:	89 c6                	mov    esi,eax
c00047cc:	85 c0                	test   eax,eax
c00047ce:	0f 85 be 00 00 00    	jne    c0004892 <f_truncate+0xdc>
c00047d4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047d8:	85 f6                	test   esi,esi
c00047da:	0f 85 b2 00 00 00    	jne    c0004892 <f_truncate+0xdc>
c00047e0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047e4:	0f 84 a3 00 00 00    	je     c000488d <f_truncate+0xd7>
c00047ea:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047ed:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047f0:	0f 83 9c 00 00 00    	jae    c0004892 <f_truncate+0xdc>
c00047f6:	85 c0                	test   eax,eax
c00047f8:	75 15                	jne    c000480f <f_truncate+0x59>
c00047fa:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047fd:	31 c9                	xor    ecx,ecx
c00047ff:	89 d8                	mov    eax,ebx
c0004801:	e8 1f ec ff ff       	call   c0003425 <remove_chain>
c0004806:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000480d:	eb 35                	jmp    c0004844 <f_truncate+0x8e>
c000480f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004812:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004814:	e8 08 e9 ff ff       	call   c0003121 <get_fat.isra.2>
c0004819:	89 c2                	mov    edx,eax
c000481b:	b8 01 00 00 00       	mov    eax,0x1
c0004820:	83 fa ff             	cmp    edx,0xffffffff
c0004823:	74 1f                	je     c0004844 <f_truncate+0x8e>
c0004825:	b8 02 00 00 00       	mov    eax,0x2
c000482a:	83 fa 01             	cmp    edx,0x1
c000482d:	74 15                	je     c0004844 <f_truncate+0x8e>
c000482f:	31 c0                	xor    eax,eax
c0004831:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004835:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004838:	76 0a                	jbe    c0004844 <f_truncate+0x8e>
c000483a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000483d:	89 d8                	mov    eax,ebx
c000483f:	e8 e1 eb ff ff       	call   c0003425 <remove_chain>
c0004844:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004847:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000484a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000484d:	83 ca 40             	or     edx,0x40
c0004850:	85 c0                	test   eax,eax
c0004852:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004855:	75 2f                	jne    c0004886 <f_truncate+0xd0>
c0004857:	84 d2                	test   dl,dl
c0004859:	79 37                	jns    c0004892 <f_truncate+0xdc>
c000485b:	6a 01                	push   0x1
c000485d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004860:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004863:	50                   	push   eax
c0004864:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004868:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000486c:	50                   	push   eax
c000486d:	e8 88 d4 ff ff       	call   c0001cfa <disk_write>
c0004872:	83 c4 10             	add    esp,0x10
c0004875:	85 c0                	test   eax,eax
c0004877:	75 08                	jne    c0004881 <f_truncate+0xcb>
c0004879:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000487d:	31 f6                	xor    esi,esi
c000487f:	eb 11                	jmp    c0004892 <f_truncate+0xdc>
c0004881:	b8 01 00 00 00       	mov    eax,0x1
c0004886:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004889:	89 c6                	mov    esi,eax
c000488b:	eb 05                	jmp    c0004892 <f_truncate+0xdc>
c000488d:	be 07 00 00 00       	mov    esi,0x7
c0004892:	89 f0                	mov    eax,esi
c0004894:	83 c4 14             	add    esp,0x14
c0004897:	5b                   	pop    ebx
c0004898:	5e                   	pop    esi
c0004899:	c3                   	ret    

c000489a <f_unlink>:
c000489a:	55                   	push   ebp
c000489b:	b9 02 00 00 00       	mov    ecx,0x2
c00048a0:	57                   	push   edi
c00048a1:	56                   	push   esi
c00048a2:	53                   	push   ebx
c00048a3:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00048a9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048ad:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048b4:	e8 ef da ff ff       	call   c00023a8 <mount_volume>
c00048b9:	85 c0                	test   eax,eax
c00048bb:	0f 85 f0 00 00 00    	jne    c00049b1 <f_unlink+0x117>
c00048c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048c5:	83 ec 0c             	sub    esp,0xc
c00048c8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048cc:	68 00 02 00 00       	push   0x200
c00048d1:	e8 a6 11 00 00       	call   c0005a7c <ff_memalloc>
c00048d6:	83 c4 10             	add    esp,0x10
c00048d9:	89 c3                	mov    ebx,eax
c00048db:	b8 11 00 00 00       	mov    eax,0x11
c00048e0:	85 db                	test   ebx,ebx
c00048e2:	0f 84 c9 00 00 00    	je     c00049b1 <f_unlink+0x117>
c00048e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048ec:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048f3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048f6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048fa:	e8 b3 ef ff ff       	call   c00038b2 <follow_path>
c00048ff:	85 c0                	test   eax,eax
c0004901:	0f 85 96 00 00 00    	jne    c000499d <f_unlink+0x103>
c0004907:	b8 06 00 00 00       	mov    eax,0x6
c000490c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004911:	0f 88 86 00 00 00    	js     c000499d <f_unlink+0x103>
c0004917:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000491c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004922:	74 07                	je     c000492b <f_unlink+0x91>
c0004924:	b8 07 00 00 00       	mov    eax,0x7
c0004929:	eb 72                	jmp    c000499d <f_unlink+0x103>
c000492b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000492f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004933:	8a 07                	mov    al,BYTE PTR [edi]
c0004935:	e8 96 e7 ff ff       	call   c00030d0 <ld_clust.isra.0>
c000493a:	83 e5 10             	and    ebp,0x10
c000493d:	89 c6                	mov    esi,eax
c000493f:	75 0f                	jne    c0004950 <f_unlink+0xb6>
c0004941:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004945:	e8 e7 ed ff ff       	call   c0003731 <dir_remove>
c000494a:	85 c0                	test   eax,eax
c000494c:	74 2f                	je     c000497d <f_unlink+0xe3>
c000494e:	eb 4d                	jmp    c000499d <f_unlink+0x103>
c0004950:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004954:	31 d2                	xor    edx,edx
c0004956:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000495a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495e:	e8 c0 e8 ff ff       	call   c0003223 <dir_sdi>
c0004963:	85 c0                	test   eax,eax
c0004965:	75 36                	jne    c000499d <f_unlink+0x103>
c0004967:	31 d2                	xor    edx,edx
c0004969:	8d 44 24 50          	lea    eax,[esp+0x50]
c000496d:	e8 a2 ec ff ff       	call   c0003614 <dir_read>
c0004972:	85 c0                	test   eax,eax
c0004974:	74 ae                	je     c0004924 <f_unlink+0x8a>
c0004976:	83 f8 04             	cmp    eax,0x4
c0004979:	75 22                	jne    c000499d <f_unlink+0x103>
c000497b:	eb c4                	jmp    c0004941 <f_unlink+0xa7>
c000497d:	85 f6                	test   esi,esi
c000497f:	75 0b                	jne    c000498c <f_unlink+0xf2>
c0004981:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004985:	e8 0b e3 ff ff       	call   c0002c95 <sync_fs>
c000498a:	eb 11                	jmp    c000499d <f_unlink+0x103>
c000498c:	31 c9                	xor    ecx,ecx
c000498e:	89 f2                	mov    edx,esi
c0004990:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004994:	e8 8c ea ff ff       	call   c0003425 <remove_chain>
c0004999:	85 c0                	test   eax,eax
c000499b:	74 e4                	je     c0004981 <f_unlink+0xe7>
c000499d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049a1:	83 ec 0c             	sub    esp,0xc
c00049a4:	53                   	push   ebx
c00049a5:	e8 ea 10 00 00       	call   c0005a94 <ff_memfree>
c00049aa:	83 c4 10             	add    esp,0x10
c00049ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049b1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049b7:	5b                   	pop    ebx
c00049b8:	5e                   	pop    esi
c00049b9:	5f                   	pop    edi
c00049ba:	5d                   	pop    ebp
c00049bb:	c3                   	ret    

c00049bc <f_mkdir>:
c00049bc:	57                   	push   edi
c00049bd:	b9 02 00 00 00       	mov    ecx,0x2
c00049c2:	56                   	push   esi
c00049c3:	53                   	push   ebx
c00049c4:	83 ec 50             	sub    esp,0x50
c00049c7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049cb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049cf:	e8 d4 d9 ff ff       	call   c00023a8 <mount_volume>
c00049d4:	89 c3                	mov    ebx,eax
c00049d6:	85 c0                	test   eax,eax
c00049d8:	0f 85 70 01 00 00    	jne    c0004b4e <f_mkdir+0x192>
c00049de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049e2:	bb 11 00 00 00       	mov    ebx,0x11
c00049e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049eb:	83 ec 0c             	sub    esp,0xc
c00049ee:	68 00 02 00 00       	push   0x200
c00049f3:	e8 84 10 00 00       	call   c0005a7c <ff_memalloc>
c00049f8:	83 c4 10             	add    esp,0x10
c00049fb:	89 c7                	mov    edi,eax
c00049fd:	85 c0                	test   eax,eax
c00049ff:	0f 84 49 01 00 00    	je     c0004b4e <f_mkdir+0x192>
c0004a05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a09:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a0d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a10:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a14:	e8 99 ee ff ff       	call   c00038b2 <follow_path>
c0004a19:	89 c3                	mov    ebx,eax
c0004a1b:	85 c0                	test   eax,eax
c0004a1d:	74 3e                	je     c0004a5d <f_mkdir+0xa1>
c0004a1f:	83 f8 04             	cmp    eax,0x4
c0004a22:	75 3e                	jne    c0004a62 <f_mkdir+0xa6>
c0004a24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a28:	31 d2                	xor    edx,edx
c0004a2a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a2e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a32:	e8 b4 e8 ff ff       	call   c00032eb <create_chain>
c0004a37:	89 c6                	mov    esi,eax
c0004a39:	85 c0                	test   eax,eax
c0004a3b:	74 0c                	je     c0004a49 <f_mkdir+0x8d>
c0004a3d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a42:	83 f8 01             	cmp    eax,0x1
c0004a45:	74 07                	je     c0004a4e <f_mkdir+0x92>
c0004a47:	eb 2a                	jmp    c0004a73 <f_mkdir+0xb7>
c0004a49:	bb 07 00 00 00       	mov    ebx,0x7
c0004a4e:	31 c9                	xor    ecx,ecx
c0004a50:	89 f2                	mov    edx,esi
c0004a52:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a56:	e8 ca e9 ff ff       	call   c0003425 <remove_chain>
c0004a5b:	eb 05                	jmp    c0004a62 <f_mkdir+0xa6>
c0004a5d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a62:	83 ec 0c             	sub    esp,0xc
c0004a65:	57                   	push   edi
c0004a66:	e8 29 10 00 00       	call   c0005a94 <ff_memfree>
c0004a6b:	83 c4 10             	add    esp,0x10
c0004a6e:	e9 db 00 00 00       	jmp    c0004b4e <f_mkdir+0x192>
c0004a73:	bb 01 00 00 00       	mov    ebx,0x1
c0004a78:	83 f8 ff             	cmp    eax,0xffffffff
c0004a7b:	74 d1                	je     c0004a4e <f_mkdir+0x92>
c0004a7d:	89 f2                	mov    edx,esi
c0004a7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a83:	e8 73 dd ff ff       	call   c00027fb <dir_clear>
c0004a88:	89 c3                	mov    ebx,eax
c0004a8a:	85 c0                	test   eax,eax
c0004a8c:	75 c0                	jne    c0004a4e <f_mkdir+0x92>
c0004a8e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a97:	ba 20 00 00 00       	mov    edx,0x20
c0004a9c:	83 c0 34             	add    eax,0x34
c0004a9f:	e8 cc d2 ff ff       	call   c0001d70 <mem_set>
c0004aa4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004aad:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ab1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004ab5:	83 c0 4a             	add    eax,0x4a
c0004ab8:	e8 9b d2 ff ff       	call   c0001d58 <st_dword>
c0004abd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ac1:	89 f1                	mov    ecx,esi
c0004ac3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac6:	e8 2e e6 ff ff       	call   c00030f9 <st_clust.isra.1>
c0004acb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004acf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ad4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ad7:	83 c0 54             	add    eax,0x54
c0004ada:	e8 7c d2 ff ff       	call   c0001d5b <mem_cpy>
c0004adf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ae7:	8d 50 54             	lea    edx,[eax+0x54]
c0004aea:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004aee:	e8 06 e6 ff ff       	call   c00030f9 <st_clust.isra.1>
c0004af3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004afb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aff:	e8 42 ee ff ff       	call   c0003946 <dir_register>
c0004b04:	89 c3                	mov    ebx,eax
c0004b06:	85 c0                	test   eax,eax
c0004b08:	0f 85 40 ff ff ff    	jne    c0004a4e <f_mkdir+0x92>
c0004b0e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b12:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b17:	83 c0 16             	add    eax,0x16
c0004b1a:	e8 39 d2 ff ff       	call   c0001d58 <st_dword>
c0004b1f:	89 f1                	mov    ecx,esi
c0004b21:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b29:	e8 cb e5 ff ff       	call   c00030f9 <st_clust.isra.1>
c0004b2e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b32:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b3a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	e8 4e e1 ff ff       	call   c0002c95 <sync_fs>
c0004b47:	89 c3                	mov    ebx,eax
c0004b49:	e9 14 ff ff ff       	jmp    c0004a62 <f_mkdir+0xa6>
c0004b4e:	83 c4 50             	add    esp,0x50
c0004b51:	89 d8                	mov    eax,ebx
c0004b53:	5b                   	pop    ebx
c0004b54:	5e                   	pop    esi
c0004b55:	5f                   	pop    edi
c0004b56:	c3                   	ret    

c0004b57 <f_rename>:
c0004b57:	57                   	push   edi
c0004b58:	56                   	push   esi
c0004b59:	53                   	push   ebx
c0004b5a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b60:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b67:	e8 f2 d5 ff ff       	call   c000215e <get_ldnumber>
c0004b6c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b71:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b75:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b7c:	e8 27 d8 ff ff       	call   c00023a8 <mount_volume>
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 85 7a 01 00 00    	jne    c0004d03 <f_rename+0x1ac>
c0004b89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b8d:	83 ec 0c             	sub    esp,0xc
c0004b90:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b94:	68 00 02 00 00       	push   0x200
c0004b99:	e8 de 0e 00 00       	call   c0005a7c <ff_memalloc>
c0004b9e:	83 c4 10             	add    esp,0x10
c0004ba1:	89 c6                	mov    esi,eax
c0004ba3:	b8 11 00 00 00       	mov    eax,0x11
c0004ba8:	85 f6                	test   esi,esi
c0004baa:	0f 84 53 01 00 00    	je     c0004d03 <f_rename+0x1ac>
c0004bb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bb4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bbb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bbe:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bc2:	e8 eb ec ff ff       	call   c00038b2 <follow_path>
c0004bc7:	85 c0                	test   eax,eax
c0004bc9:	0f 85 20 01 00 00    	jne    c0004cef <f_rename+0x198>
c0004bcf:	b8 06 00 00 00       	mov    eax,0x6
c0004bd4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bd9:	0f 85 10 01 00 00    	jne    c0004cef <f_rename+0x198>
c0004bdf:	b9 20 00 00 00       	mov    ecx,0x20
c0004be4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004be8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bec:	e8 6a d1 ff ff       	call   c0001d5b <mem_cpy>
c0004bf1:	b9 30 00 00 00       	mov    ecx,0x30
c0004bf6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 58 d1 ff ff       	call   c0001d5b <mem_cpy>
c0004c03:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004c0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c0e:	e8 9f ec ff ff       	call   c00038b2 <follow_path>
c0004c13:	85 c0                	test   eax,eax
c0004c15:	75 20                	jne    c0004c37 <f_rename+0xe0>
c0004c17:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c1b:	b8 08 00 00 00       	mov    eax,0x8
c0004c20:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c24:	0f 85 c5 00 00 00    	jne    c0004cef <f_rename+0x198>
c0004c2a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c2e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c35:	eb 03                	jmp    c0004c3a <f_rename+0xe3>
c0004c37:	83 f8 04             	cmp    eax,0x4
c0004c3a:	0f 85 af 00 00 00    	jne    c0004cef <f_rename+0x198>
c0004c40:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c44:	e8 fd ec ff ff       	call   c0003946 <dir_register>
c0004c49:	85 c0                	test   eax,eax
c0004c4b:	0f 85 9e 00 00 00    	jne    c0004cef <f_rename+0x198>
c0004c51:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c58:	b9 13 00 00 00       	mov    ecx,0x13
c0004c5d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c60:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c64:	e8 f2 d0 ff ff       	call   c0001d5b <mem_cpy>
c0004c69:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c6d:	a8 10                	test   al,0x10
c0004c6f:	75 03                	jne    c0004c74 <f_rename+0x11d>
c0004c71:	83 c8 20             	or     eax,0x20
c0004c74:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c7b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c7f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c83:	74 54                	je     c0004cd9 <f_rename+0x182>
c0004c85:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c89:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c8d:	74 4a                	je     c0004cd9 <f_rename+0x182>
c0004c8f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c93:	89 da                	mov    edx,ebx
c0004c95:	8a 07                	mov    al,BYTE PTR [edi]
c0004c97:	e8 34 e4 ff ff       	call   c00030d0 <ld_clust.isra.0>
c0004c9c:	89 c2                	mov    edx,eax
c0004c9e:	89 f8                	mov    eax,edi
c0004ca0:	e8 d0 d2 ff ff       	call   c0001f75 <clst2sect>
c0004ca5:	89 c2                	mov    edx,eax
c0004ca7:	b8 02 00 00 00       	mov    eax,0x2
c0004cac:	85 d2                	test   edx,edx
c0004cae:	74 3f                	je     c0004cef <f_rename+0x198>
c0004cb0:	89 f8                	mov    eax,edi
c0004cb2:	e8 9e d5 ff ff       	call   c0002255 <move_window>
c0004cb7:	85 c0                	test   eax,eax
c0004cb9:	75 34                	jne    c0004cef <f_rename+0x198>
c0004cbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cbf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cc3:	75 14                	jne    c0004cd9 <f_rename+0x182>
c0004cc5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cc8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004ccc:	e8 28 e4 ff ff       	call   c00030f9 <st_clust.isra.1>
c0004cd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cd5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cd9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004cdd:	e8 4f ea ff ff       	call   c0003731 <dir_remove>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	75 09                	jne    c0004cef <f_rename+0x198>
c0004ce6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cea:	e8 a6 df ff ff       	call   c0002c95 <sync_fs>
c0004cef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cf3:	83 ec 0c             	sub    esp,0xc
c0004cf6:	56                   	push   esi
c0004cf7:	e8 98 0d 00 00       	call   c0005a94 <ff_memfree>
c0004cfc:	83 c4 10             	add    esp,0x10
c0004cff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d03:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004d09:	5b                   	pop    ebx
c0004d0a:	5e                   	pop    esi
c0004d0b:	5f                   	pop    edi
c0004d0c:	c3                   	ret    

c0004d0d <f_chmod>:
c0004d0d:	57                   	push   edi
c0004d0e:	b9 02 00 00 00       	mov    ecx,0x2
c0004d13:	56                   	push   esi
c0004d14:	53                   	push   ebx
c0004d15:	83 ec 50             	sub    esp,0x50
c0004d18:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d1c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d20:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d24:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d28:	e8 7b d6 ff ff       	call   c00023a8 <mount_volume>
c0004d2d:	85 c0                	test   eax,eax
c0004d2f:	75 7e                	jne    c0004daf <f_chmod+0xa2>
c0004d31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d35:	83 ec 0c             	sub    esp,0xc
c0004d38:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d3c:	68 00 02 00 00       	push   0x200
c0004d41:	e8 36 0d 00 00       	call   c0005a7c <ff_memalloc>
c0004d46:	83 c4 10             	add    esp,0x10
c0004d49:	89 c6                	mov    esi,eax
c0004d4b:	b8 11 00 00 00       	mov    eax,0x11
c0004d50:	85 f6                	test   esi,esi
c0004d52:	74 5b                	je     c0004daf <f_chmod+0xa2>
c0004d54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d58:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d5c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d5f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d63:	e8 4a eb ff ff       	call   c00038b2 <follow_path>
c0004d68:	85 c0                	test   eax,eax
c0004d6a:	75 2f                	jne    c0004d9b <f_chmod+0x8e>
c0004d6c:	b8 06 00 00 00       	mov    eax,0x6
c0004d71:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d76:	75 23                	jne    c0004d9b <f_chmod+0x8e>
c0004d78:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d7c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d7f:	21 fb                	and    ebx,edi
c0004d81:	83 e3 27             	and    ebx,0x27
c0004d84:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d87:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d8e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d96:	e8 fa de ff ff       	call   c0002c95 <sync_fs>
c0004d9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d9f:	83 ec 0c             	sub    esp,0xc
c0004da2:	56                   	push   esi
c0004da3:	e8 ec 0c 00 00       	call   c0005a94 <ff_memfree>
c0004da8:	83 c4 10             	add    esp,0x10
c0004dab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004daf:	83 c4 50             	add    esp,0x50
c0004db2:	5b                   	pop    ebx
c0004db3:	5e                   	pop    esi
c0004db4:	5f                   	pop    edi
c0004db5:	c3                   	ret    

c0004db6 <f_utime>:
c0004db6:	56                   	push   esi
c0004db7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dbc:	53                   	push   ebx
c0004dbd:	83 ec 54             	sub    esp,0x54
c0004dc0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004dc4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dc8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dcc:	e8 d7 d5 ff ff       	call   c00023a8 <mount_volume>
c0004dd1:	85 c0                	test   eax,eax
c0004dd3:	0f 85 85 00 00 00    	jne    c0004e5e <f_utime+0xa8>
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	83 ec 0c             	sub    esp,0xc
c0004de0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004de4:	68 00 02 00 00       	push   0x200
c0004de9:	e8 8e 0c 00 00       	call   c0005a7c <ff_memalloc>
c0004dee:	83 c4 10             	add    esp,0x10
c0004df1:	89 c3                	mov    ebx,eax
c0004df3:	b8 11 00 00 00       	mov    eax,0x11
c0004df8:	85 db                	test   ebx,ebx
c0004dfa:	74 62                	je     c0004e5e <f_utime+0xa8>
c0004dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e00:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e04:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004e07:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e0b:	e8 a2 ea ff ff       	call   c00038b2 <follow_path>
c0004e10:	85 c0                	test   eax,eax
c0004e12:	75 36                	jne    c0004e4a <f_utime+0x94>
c0004e14:	b8 06 00 00 00       	mov    eax,0x6
c0004e19:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e1e:	75 2a                	jne    c0004e4a <f_utime+0x94>
c0004e20:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e24:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e28:	c1 e2 10             	shl    edx,0x10
c0004e2b:	09 c2                	or     edx,eax
c0004e2d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e31:	83 c0 16             	add    eax,0x16
c0004e34:	e8 1f cf ff ff       	call   c0001d58 <st_dword>
c0004e39:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e45:	e8 4b de ff ff       	call   c0002c95 <sync_fs>
c0004e4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4e:	83 ec 0c             	sub    esp,0xc
c0004e51:	53                   	push   ebx
c0004e52:	e8 3d 0c 00 00       	call   c0005a94 <ff_memfree>
c0004e57:	83 c4 10             	add    esp,0x10
c0004e5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e5e:	83 c4 54             	add    esp,0x54
c0004e61:	5b                   	pop    ebx
c0004e62:	5e                   	pop    esi
c0004e63:	c3                   	ret    

c0004e64 <f_getlabel>:
c0004e64:	55                   	push   ebp
c0004e65:	31 c9                	xor    ecx,ecx
c0004e67:	57                   	push   edi
c0004e68:	56                   	push   esi
c0004e69:	53                   	push   ebx
c0004e6a:	83 ec 5c             	sub    esp,0x5c
c0004e6d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e71:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e75:	e8 2e d5 ff ff       	call   c00023a8 <mount_volume>
c0004e7a:	89 c6                	mov    esi,eax
c0004e7c:	85 c0                	test   eax,eax
c0004e7e:	0f 85 27 01 00 00    	jne    c0004fab <f_getlabel+0x147>
c0004e84:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e89:	0f 84 d1 00 00 00    	je     c0004f60 <f_getlabel+0xfc>
c0004e8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e93:	31 d2                	xor    edx,edx
c0004e95:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e99:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004ea1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ea5:	e8 79 e3 ff ff       	call   c0003223 <dir_sdi>
c0004eaa:	85 c0                	test   eax,eax
c0004eac:	0f 85 a2 00 00 00    	jne    c0004f54 <f_getlabel+0xf0>
c0004eb2:	ba 01 00 00 00       	mov    edx,0x1
c0004eb7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ebb:	e8 54 e7 ff ff       	call   c0003614 <dir_read>
c0004ec0:	85 c0                	test   eax,eax
c0004ec2:	0f 85 8c 00 00 00    	jne    c0004f54 <f_getlabel+0xf0>
c0004ec8:	31 db                	xor    ebx,ebx
c0004eca:	31 c9                	xor    ecx,ecx
c0004ecc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ed0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ed3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ed8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004edd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ee1:	e8 ca ce ff ff       	call   c0001db0 <dbc_1st>
c0004ee6:	85 c0                	test   eax,eax
c0004ee8:	74 16                	je     c0004f00 <f_getlabel+0x9c>
c0004eea:	83 ff 0b             	cmp    edi,0xb
c0004eed:	74 11                	je     c0004f00 <f_getlabel+0x9c>
c0004eef:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ef4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ef8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004efb:	c1 e0 08             	shl    eax,0x8
c0004efe:	09 c2                	or     edx,eax
c0004f00:	0f b7 d2             	movzx  edx,dx
c0004f03:	50                   	push   eax
c0004f04:	50                   	push   eax
c0004f05:	68 b5 01 00 00       	push   0x1b5
c0004f0a:	52                   	push   edx
c0004f0b:	e8 3c 0c 00 00       	call   c0005b4c <ff_oem2uni>
c0004f10:	83 c4 10             	add    esp,0x10
c0004f13:	66 85 c0             	test   ax,ax
c0004f16:	74 25                	je     c0004f3d <f_getlabel+0xd9>
c0004f18:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f1c:	0f b7 c0             	movzx  eax,ax
c0004f1f:	01 da                	add    edx,ebx
c0004f21:	b9 04 00 00 00       	mov    ecx,0x4
c0004f26:	e8 51 cf ff ff       	call   c0001e7c <put_utf>
c0004f2b:	84 c0                	test   al,al
c0004f2d:	74 0e                	je     c0004f3d <f_getlabel+0xd9>
c0004f2f:	0f b6 c0             	movzx  eax,al
c0004f32:	01 c3                	add    ebx,eax
c0004f34:	83 ff 0b             	cmp    edi,0xb
c0004f37:	74 06                	je     c0004f3f <f_getlabel+0xdb>
c0004f39:	89 f9                	mov    ecx,edi
c0004f3b:	eb 8f                	jmp    c0004ecc <f_getlabel+0x68>
c0004f3d:	31 db                	xor    ebx,ebx
c0004f3f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f43:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f46:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f4a:	74 14                	je     c0004f60 <f_getlabel+0xfc>
c0004f4c:	4b                   	dec    ebx
c0004f4d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f50:	74 f1                	je     c0004f43 <f_getlabel+0xdf>
c0004f52:	eb 0c                	jmp    c0004f60 <f_getlabel+0xfc>
c0004f54:	83 f8 04             	cmp    eax,0x4
c0004f57:	75 50                	jne    c0004fa9 <f_getlabel+0x145>
c0004f59:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f5d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f60:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f65:	74 44                	je     c0004fab <f_getlabel+0x147>
c0004f67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f6b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f6e:	e8 e2 d2 ff ff       	call   c0002255 <move_window>
c0004f73:	89 c6                	mov    esi,eax
c0004f75:	85 c0                	test   eax,eax
c0004f77:	75 32                	jne    c0004fab <f_getlabel+0x147>
c0004f79:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f7d:	b8 43 00 00 00       	mov    eax,0x43
c0004f82:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f84:	80 f9 03             	cmp    cl,0x3
c0004f87:	74 0f                	je     c0004f98 <f_getlabel+0x134>
c0004f89:	31 c0                	xor    eax,eax
c0004f8b:	80 f9 04             	cmp    cl,0x4
c0004f8e:	0f 94 c0             	sete   al
c0004f91:	48                   	dec    eax
c0004f92:	83 e0 c3             	and    eax,0xffffffc3
c0004f95:	83 c0 64             	add    eax,0x64
c0004f98:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f9c:	e8 9b cd ff ff       	call   c0001d3c <ld_dword>
c0004fa1:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004fa5:	89 07                	mov    DWORD PTR [edi],eax
c0004fa7:	eb 02                	jmp    c0004fab <f_getlabel+0x147>
c0004fa9:	89 c6                	mov    esi,eax
c0004fab:	83 c4 5c             	add    esp,0x5c
c0004fae:	89 f0                	mov    eax,esi
c0004fb0:	5b                   	pop    ebx
c0004fb1:	5e                   	pop    esi
c0004fb2:	5f                   	pop    edi
c0004fb3:	5d                   	pop    ebp
c0004fb4:	c3                   	ret    

c0004fb5 <f_setlabel>:
c0004fb5:	56                   	push   esi
c0004fb6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fbb:	53                   	push   ebx
c0004fbc:	83 ec 54             	sub    esp,0x54
c0004fbf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fc3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fc7:	e8 dc d3 ff ff       	call   c00023a8 <mount_volume>
c0004fcc:	89 c6                	mov    esi,eax
c0004fce:	85 c0                	test   eax,eax
c0004fd0:	0f 85 67 01 00 00    	jne    c000513d <f_setlabel+0x188>
c0004fd6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fdb:	ba 20 00 00 00       	mov    edx,0x20
c0004fe0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fe4:	31 db                	xor    ebx,ebx
c0004fe6:	e8 85 cd ff ff       	call   c0001d70 <mem_set>
c0004feb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fef:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ff2:	76 5b                	jbe    c000504f <f_setlabel+0x9a>
c0004ff4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ff8:	e8 b9 cd ff ff       	call   c0001db6 <tchar2uni>
c0004ffd:	3d ff ff 00 00       	cmp    eax,0xffff
c0005002:	76 0a                	jbe    c000500e <f_setlabel+0x59>
c0005004:	be 06 00 00 00       	mov    esi,0x6
c0005009:	e9 2f 01 00 00       	jmp    c000513d <f_setlabel+0x188>
c000500e:	83 ec 0c             	sub    esp,0xc
c0005011:	50                   	push   eax
c0005012:	e8 ad 0b 00 00       	call   c0005bc4 <ff_wtoupper>
c0005017:	5a                   	pop    edx
c0005018:	59                   	pop    ecx
c0005019:	68 b5 01 00 00       	push   0x1b5
c000501e:	50                   	push   eax
c000501f:	e8 88 0a 00 00       	call   c0005aac <ff_uni2oem>
c0005024:	83 c4 10             	add    esp,0x10
c0005027:	89 c6                	mov    esi,eax
c0005029:	66 85 c0             	test   ax,ax
c000502c:	74 d6                	je     c0005004 <f_setlabel+0x4f>
c000502e:	0f b7 d0             	movzx  edx,ax
c0005031:	b8 50 cf 01 c0       	mov    eax,0xc001cf50
c0005036:	e8 63 cd ff ff       	call   c0001d9e <chk_chr>
c000503b:	85 c0                	test   eax,eax
c000503d:	75 c5                	jne    c0005004 <f_setlabel+0x4f>
c000503f:	66 81 fe ff 00       	cmp    si,0xff
c0005044:	0f 87 c9 00 00 00    	ja     c0005113 <f_setlabel+0x15e>
c000504a:	e9 e4 00 00 00       	jmp    c0005133 <f_setlabel+0x17e>
c000504f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005054:	74 ae                	je     c0005004 <f_setlabel+0x4f>
c0005056:	85 db                	test   ebx,ebx
c0005058:	74 0e                	je     c0005068 <f_setlabel+0xb3>
c000505a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000505d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005062:	75 04                	jne    c0005068 <f_setlabel+0xb3>
c0005064:	89 c3                	mov    ebx,eax
c0005066:	eb ee                	jmp    c0005056 <f_setlabel+0xa1>
c0005068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000506c:	31 d2                	xor    edx,edx
c000506e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005072:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000507a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000507e:	e8 a0 e1 ff ff       	call   c0003223 <dir_sdi>
c0005083:	89 c6                	mov    esi,eax
c0005085:	85 c0                	test   eax,eax
c0005087:	0f 85 b0 00 00 00    	jne    c000513d <f_setlabel+0x188>
c000508d:	ba 01 00 00 00       	mov    edx,0x1
c0005092:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005096:	e8 79 e5 ff ff       	call   c0003614 <dir_read>
c000509b:	85 c0                	test   eax,eax
c000509d:	75 18                	jne    c00050b7 <f_setlabel+0x102>
c000509f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050a3:	85 db                	test   ebx,ebx
c00050a5:	74 0b                	je     c00050b2 <f_setlabel+0xfd>
c00050a7:	b9 0b 00 00 00       	mov    ecx,0xb
c00050ac:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050b0:	eb 47                	jmp    c00050f9 <f_setlabel+0x144>
c00050b2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050b5:	eb 47                	jmp    c00050fe <f_setlabel+0x149>
c00050b7:	83 f8 04             	cmp    eax,0x4
c00050ba:	75 53                	jne    c000510f <f_setlabel+0x15a>
c00050bc:	85 db                	test   ebx,ebx
c00050be:	74 7d                	je     c000513d <f_setlabel+0x188>
c00050c0:	ba 01 00 00 00       	mov    edx,0x1
c00050c5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050c9:	e8 e5 e4 ff ff       	call   c00035b3 <dir_alloc>
c00050ce:	89 c6                	mov    esi,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	75 69                	jne    c000513d <f_setlabel+0x188>
c00050d4:	b9 20 00 00 00       	mov    ecx,0x20
c00050d9:	31 d2                	xor    edx,edx
c00050db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050df:	e8 8c cc ff ff       	call   c0001d70 <mem_set>
c00050e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050ed:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050f1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050f5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050f9:	e8 5d cc ff ff       	call   c0001d5b <mem_cpy>
c00050fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005102:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005106:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000510a:	e8 86 db ff ff       	call   c0002c95 <sync_fs>
c000510f:	89 c6                	mov    esi,eax
c0005111:	eb 2a                	jmp    c000513d <f_setlabel+0x188>
c0005113:	83 fb 09             	cmp    ebx,0x9
c0005116:	0f 87 e8 fe ff ff    	ja     c0005004 <f_setlabel+0x4f>
c000511c:	89 f0                	mov    eax,esi
c000511e:	66 c1 e8 08          	shr    ax,0x8
c0005122:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005126:	43                   	inc    ebx
c0005127:	89 f0                	mov    eax,esi
c0005129:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000512d:	43                   	inc    ebx
c000512e:	e9 b8 fe ff ff       	jmp    c0004feb <f_setlabel+0x36>
c0005133:	83 fb 0a             	cmp    ebx,0xa
c0005136:	76 ef                	jbe    c0005127 <f_setlabel+0x172>
c0005138:	e9 c7 fe ff ff       	jmp    c0005004 <f_setlabel+0x4f>
c000513d:	89 f0                	mov    eax,esi
c000513f:	83 c4 54             	add    esp,0x54
c0005142:	5b                   	pop    ebx
c0005143:	5e                   	pop    esi
c0005144:	c3                   	ret    

c0005145 <f_expand>:
c0005145:	55                   	push   ebp
c0005146:	57                   	push   edi
c0005147:	56                   	push   esi
c0005148:	53                   	push   ebx
c0005149:	83 ec 2c             	sub    esp,0x2c
c000514c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005150:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005154:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005158:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000515c:	89 d8                	mov    eax,ebx
c000515e:	e8 48 d0 ff ff       	call   c00021ab <validate>
c0005163:	89 c6                	mov    esi,eax
c0005165:	85 c0                	test   eax,eax
c0005167:	0f 85 2e 01 00 00    	jne    c000529b <f_expand+0x156>
c000516d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005171:	85 f6                	test   esi,esi
c0005173:	0f 85 22 01 00 00    	jne    c000529b <f_expand+0x156>
c0005179:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000517e:	75 0a                	jne    c000518a <f_expand+0x45>
c0005180:	be 07 00 00 00       	mov    esi,0x7
c0005185:	e9 11 01 00 00       	jmp    c000529b <f_expand+0x156>
c000518a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000518e:	75 f0                	jne    c0005180 <f_expand+0x3b>
c0005190:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005194:	74 ea                	je     c0005180 <f_expand+0x3b>
c0005196:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000519a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000519e:	c1 e1 09             	shl    ecx,0x9
c00051a1:	8d 41 ff             	lea    eax,[ecx-0x1]
c00051a4:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00051a8:	0f 95 c0             	setne  al
c00051ab:	31 d2                	xor    edx,edx
c00051ad:	0f b6 c0             	movzx  eax,al
c00051b0:	89 c7                	mov    edi,eax
c00051b2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051b6:	f7 f1                	div    ecx
c00051b8:	01 f8                	add    eax,edi
c00051ba:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051c1:	83 ff 01             	cmp    edi,0x1
c00051c4:	76 05                	jbe    c00051cb <f_expand+0x86>
c00051c6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051c9:	77 05                	ja     c00051d0 <f_expand+0x8b>
c00051cb:	bf 02 00 00 00       	mov    edi,0x2
c00051d0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051d3:	89 fd                	mov    ebp,edi
c00051d5:	31 c9                	xor    ecx,ecx
c00051d7:	89 ea                	mov    edx,ebp
c00051d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051df:	45                   	inc    ebp
c00051e0:	e8 3c df ff ff       	call   c0003121 <get_fat.isra.2>
c00051e5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051ed:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051f0:	77 05                	ja     c00051f7 <f_expand+0xb2>
c00051f2:	bd 02 00 00 00       	mov    ebp,0x2
c00051f7:	83 f8 01             	cmp    eax,0x1
c00051fa:	74 20                	je     c000521c <f_expand+0xd7>
c00051fc:	83 f8 ff             	cmp    eax,0xffffffff
c00051ff:	74 22                	je     c0005223 <f_expand+0xde>
c0005201:	85 c0                	test   eax,eax
c0005203:	75 09                	jne    c000520e <f_expand+0xc9>
c0005205:	41                   	inc    ecx
c0005206:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000520a:	75 07                	jne    c0005213 <f_expand+0xce>
c000520c:	eb 1c                	jmp    c000522a <f_expand+0xe5>
c000520e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005211:	31 c9                	xor    ecx,ecx
c0005213:	39 fd                	cmp    ebp,edi
c0005215:	75 c0                	jne    c00051d7 <f_expand+0x92>
c0005217:	e9 64 ff ff ff       	jmp    c0005180 <f_expand+0x3b>
c000521c:	be 02 00 00 00       	mov    esi,0x2
c0005221:	eb 78                	jmp    c000529b <f_expand+0x156>
c0005223:	be 01 00 00 00       	mov    esi,0x1
c0005228:	eb 71                	jmp    c000529b <f_expand+0x156>
c000522a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000522f:	74 2b                	je     c000525c <f_expand+0x117>
c0005231:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005234:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005238:	85 ed                	test   ebp,ebp
c000523a:	74 24                	je     c0005260 <f_expand+0x11b>
c000523c:	83 c9 ff             	or     ecx,0xffffffff
c000523f:	83 fd 01             	cmp    ebp,0x1
c0005242:	74 03                	je     c0005247 <f_expand+0x102>
c0005244:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005247:	89 fa                	mov    edx,edi
c0005249:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000524d:	e8 59 d4 ff ff       	call   c00026ab <put_fat>
c0005252:	85 c0                	test   eax,eax
c0005254:	75 43                	jne    c0005299 <f_expand+0x154>
c0005256:	89 f8                	mov    eax,edi
c0005258:	4d                   	dec    ebp
c0005259:	47                   	inc    edi
c000525a:	eb dc                	jmp    c0005238 <f_expand+0xf3>
c000525c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000525f:	48                   	dec    eax
c0005260:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005264:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005269:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000526c:	74 2d                	je     c000529b <f_expand+0x156>
c000526e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005272:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005275:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005278:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000527c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000527f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005282:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005288:	39 c8                	cmp    eax,ecx
c000528a:	77 0f                	ja     c000529b <f_expand+0x156>
c000528c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005290:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005294:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005297:	eb 02                	jmp    c000529b <f_expand+0x156>
c0005299:	89 c6                	mov    esi,eax
c000529b:	83 c4 2c             	add    esp,0x2c
c000529e:	89 f0                	mov    eax,esi
c00052a0:	5b                   	pop    ebx
c00052a1:	5e                   	pop    esi
c00052a2:	5f                   	pop    edi
c00052a3:	5d                   	pop    ebp
c00052a4:	c3                   	ret    

c00052a5 <f_mkfs>:
c00052a5:	55                   	push   ebp
c00052a6:	57                   	push   edi
c00052a7:	bf 0b 00 00 00       	mov    edi,0xb
c00052ac:	56                   	push   esi
c00052ad:	53                   	push   ebx
c00052ae:	83 ec 4c             	sub    esp,0x4c
c00052b1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052b5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052b9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052bd:	e8 9c ce ff ff       	call   c000215e <get_ldnumber>
c00052c2:	85 c0                	test   eax,eax
c00052c4:	0f 88 a6 07 00 00    	js     c0005a70 <f_mkfs+0x7cb>
c00052ca:	8b 14 85 60 01 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdfea0]
c00052d1:	85 d2                	test   edx,edx
c00052d3:	74 03                	je     c00052d8 <f_mkfs+0x33>
c00052d5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052d8:	85 db                	test   ebx,ebx
c00052da:	75 05                	jne    c00052e1 <f_mkfs+0x3c>
c00052dc:	bb 40 cf 01 c0       	mov    ebx,0xc001cf40
c00052e1:	83 ec 0c             	sub    esp,0xc
c00052e4:	0f b6 c0             	movzx  eax,al
c00052e7:	bf 03 00 00 00       	mov    edi,0x3
c00052ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052f4:	e8 e8 c9 ff ff       	call   c0001ce1 <disk_initialize>
c00052f9:	83 c4 10             	add    esp,0x10
c00052fc:	a8 01                	test   al,0x1
c00052fe:	0f 85 6c 07 00 00    	jne    c0005a70 <f_mkfs+0x7cb>
c0005304:	bf 0a 00 00 00       	mov    edi,0xa
c0005309:	a8 04                	test   al,0x4
c000530b:	0f 85 5f 07 00 00    	jne    c0005a70 <f_mkfs+0x7cb>
c0005311:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005314:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005318:	85 c0                	test   eax,eax
c000531a:	75 20                	jne    c000533c <f_mkfs+0x97>
c000531c:	51                   	push   ecx
c000531d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005321:	50                   	push   eax
c0005322:	6a 03                	push   0x3
c0005324:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005328:	e8 e3 c9 ff ff       	call   c0001d10 <disk_ioctl>
c000532d:	83 c4 10             	add    esp,0x10
c0005330:	85 c0                	test   eax,eax
c0005332:	74 08                	je     c000533c <f_mkfs+0x97>
c0005334:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000533c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005340:	8d 42 ff             	lea    eax,[edx-0x1]
c0005343:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005348:	77 04                	ja     c000534e <f_mkfs+0xa9>
c000534a:	85 c2                	test   edx,eax
c000534c:	74 08                	je     c0005356 <f_mkfs+0xb1>
c000534e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005356:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005359:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000535d:	48                   	dec    eax
c000535e:	3c 01                	cmp    al,0x1
c0005360:	76 05                	jbe    c0005367 <f_mkfs+0xc2>
c0005362:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005367:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000536a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000536e:	48                   	dec    eax
c000536f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005374:	77 07                	ja     c000537d <f_mkfs+0xd8>
c0005376:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000537b:	74 08                	je     c0005385 <f_mkfs+0xe0>
c000537d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005385:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005388:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000538e:	77 07                	ja     c0005397 <f_mkfs+0xf2>
c0005390:	8d 47 ff             	lea    eax,[edi-0x1]
c0005393:	85 f8                	test   eax,edi
c0005395:	74 02                	je     c0005399 <f_mkfs+0xf4>
c0005397:	31 ff                	xor    edi,edi
c0005399:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00053a1:	77 0a                	ja     c00053ad <f_mkfs+0x108>
c00053a3:	bf 11 00 00 00       	mov    edi,0x11
c00053a8:	e9 c3 06 00 00       	jmp    c0005a70 <f_mkfs+0x7cb>
c00053ad:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00053af:	89 ee                	mov    esi,ebp
c00053b1:	85 ed                	test   ebp,ebp
c00053b3:	75 1b                	jne    c00053d0 <f_mkfs+0x12b>
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053bc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053c1:	50                   	push   eax
c00053c2:	e8 b5 06 00 00       	call   c0005a7c <ff_memalloc>
c00053c7:	83 c4 10             	add    esp,0x10
c00053ca:	89 c6                	mov    esi,eax
c00053cc:	85 c0                	test   eax,eax
c00053ce:	74 d3                	je     c00053a3 <f_mkfs+0xfe>
c00053d0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053d8:	52                   	push   edx
c00053d9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053dd:	50                   	push   eax
c00053de:	6a 01                	push   0x1
c00053e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053e4:	e8 27 c9 ff ff       	call   c0001d10 <disk_ioctl>
c00053e9:	83 c4 10             	add    esp,0x10
c00053ec:	85 c0                	test   eax,eax
c00053ee:	0f 85 25 06 00 00    	jne    c0005a19 <f_mkfs+0x774>
c00053f4:	88 d8                	mov    al,bl
c00053f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053fe:	24 08                	and    al,0x8
c0005400:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005404:	75 18                	jne    c000541e <f_mkfs+0x179>
c0005406:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000540a:	83 f8 3f             	cmp    eax,0x3f
c000540d:	76 0f                	jbe    c000541e <f_mkfs+0x179>
c000540f:	83 e8 3f             	sub    eax,0x3f
c0005412:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000541a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000541e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005422:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005426:	83 f8 7f             	cmp    eax,0x7f
c0005429:	0f 86 52 02 00 00    	jbe    c0005681 <f_mkfs+0x3dc>
c000542f:	b9 80 00 00 00       	mov    ecx,0x80
c0005434:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000543a:	77 05                	ja     c0005441 <f_mkfs+0x19c>
c000543c:	89 f9                	mov    ecx,edi
c000543e:	c1 e9 09             	shr    ecx,0x9
c0005441:	88 d8                	mov    al,bl
c0005443:	83 e0 01             	and    eax,0x1
c0005446:	80 e3 02             	and    bl,0x2
c0005449:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000544d:	74 0a                	je     c0005459 <f_mkfs+0x1b4>
c000544f:	84 c0                	test   al,al
c0005451:	0f 84 4c 01 00 00    	je     c00055a3 <f_mkfs+0x2fe>
c0005457:	eb 38                	jmp    c0005491 <f_mkfs+0x1ec>
c0005459:	bf 13 00 00 00       	mov    edi,0x13
c000545e:	84 c0                	test   al,al
c0005460:	75 2f                	jne    c0005491 <f_mkfs+0x1ec>
c0005462:	e9 c9 05 00 00       	jmp    c0005a30 <f_mkfs+0x78b>
c0005467:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000546c:	0f 85 08 02 00 00    	jne    c000567a <f_mkfs+0x3d5>
c0005472:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005477:	0f 86 e1 01 00 00    	jbe    c000565e <f_mkfs+0x3b9>
c000547d:	85 c9                	test   ecx,ecx
c000547f:	0f 85 bd 05 00 00    	jne    c0005a42 <f_mkfs+0x79d>
c0005485:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005488:	83 f9 40             	cmp    ecx,0x40
c000548b:	0f 87 c1 05 00 00    	ja     c0005a52 <f_mkfs+0x7ad>
c0005491:	89 cf                	mov    edi,ecx
c0005493:	85 c9                	test   ecx,ecx
c0005495:	75 1d                	jne    c00054b4 <f_mkfs+0x20f>
c0005497:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000549b:	ba 20 cf 01 c0       	mov    edx,0xc001cf20
c00054a0:	c1 eb 0c             	shr    ebx,0xc
c00054a3:	bf 01 00 00 00       	mov    edi,0x1
c00054a8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00054ab:	66 85 c0             	test   ax,ax
c00054ae:	0f 85 5f 01 00 00    	jne    c0005613 <f_mkfs+0x36e>
c00054b4:	31 d2                	xor    edx,edx
c00054b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054ba:	f7 f7                	div    edi
c00054bc:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054c1:	0f 86 5e 01 00 00    	jbe    c0005625 <f_mkfs+0x380>
c00054c7:	83 c0 02             	add    eax,0x2
c00054ca:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054cf:	01 c0                	add    eax,eax
c00054d1:	05 ff 01 00 00       	add    eax,0x1ff
c00054d6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054e9:	c1 e0 05             	shl    eax,0x5
c00054ec:	c1 e8 09             	shr    eax,0x9
c00054ef:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054f3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005500:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000550c:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005511:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005515:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005519:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000551d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005521:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005525:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005529:	f7 d8                	neg    eax
c000552b:	21 c3                	and    ebx,eax
c000552d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005531:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005536:	0f 85 fc 00 00 00    	jne    c0005638 <f_mkfs+0x393>
c000553c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005540:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005544:	89 f8                	mov    eax,edi
c0005546:	c1 e0 04             	shl    eax,0x4
c0005549:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000554d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005551:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005555:	0f 82 26 01 00 00    	jb     c0005681 <f_mkfs+0x3dc>
c000555b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000555f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005563:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005567:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000556c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005570:	29 d0                	sub    eax,edx
c0005572:	31 d2                	xor    edx,edx
c0005574:	f7 f7                	div    edi
c0005576:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000557b:	89 c3                	mov    ebx,eax
c000557d:	0f 85 e4 fe ff ff    	jne    c0005467 <f_mkfs+0x1c2>
c0005583:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005588:	0f 87 02 01 00 00    	ja     c0005690 <f_mkfs+0x3eb>
c000558e:	85 c9                	test   ecx,ecx
c0005590:	0f 85 eb 00 00 00    	jne    c0005681 <f_mkfs+0x3dc>
c0005596:	83 ff 01             	cmp    edi,0x1
c0005599:	0f 86 e2 00 00 00    	jbe    c0005681 <f_mkfs+0x3dc>
c000559f:	89 f9                	mov    ecx,edi
c00055a1:	d1 e9                	shr    ecx,1
c00055a3:	89 cb                	mov    ebx,ecx
c00055a5:	85 c9                	test   ecx,ecx
c00055a7:	75 26                	jne    c00055cf <f_mkfs+0x32a>
c00055a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00055ad:	ba 30 cf 01 c0       	mov    edx,0xc001cf30
c00055b2:	c1 eb 11             	shr    ebx,0x11
c00055b5:	b9 01 00 00 00       	mov    ecx,0x1
c00055ba:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055bd:	66 85 c0             	test   ax,ax
c00055c0:	74 0b                	je     c00055cd <f_mkfs+0x328>
c00055c2:	83 c2 02             	add    edx,0x2
c00055c5:	39 d8                	cmp    eax,ebx
c00055c7:	77 04                	ja     c00055cd <f_mkfs+0x328>
c00055c9:	01 c9                	add    ecx,ecx
c00055cb:	eb ed                	jmp    c00055ba <f_mkfs+0x315>
c00055cd:	31 db                	xor    ebx,ebx
c00055cf:	31 d2                	xor    edx,edx
c00055d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055d5:	f7 f1                	div    ecx
c00055d7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055de:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055e3:	c1 ea 09             	shr    edx,0x9
c00055e6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055eb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055ef:	0f 87 8c 00 00 00    	ja     c0005681 <f_mkfs+0x3dc>
c00055f5:	89 cf                	mov    edi,ecx
c00055f7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ff:	89 d9                	mov    ecx,ebx
c0005601:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005609:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000560e:	e9 e0 fe ff ff       	jmp    c00054f3 <f_mkfs+0x24e>
c0005613:	83 c2 02             	add    edx,0x2
c0005616:	39 d8                	cmp    eax,ebx
c0005618:	0f 87 96 fe ff ff    	ja     c00054b4 <f_mkfs+0x20f>
c000561e:	01 ff                	add    edi,edi
c0005620:	e9 83 fe ff ff       	jmp    c00054a8 <f_mkfs+0x203>
c0005625:	8d 04 40             	lea    eax,[eax+eax*2]
c0005628:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000562d:	40                   	inc    eax
c000562e:	d1 e8                	shr    eax,1
c0005630:	83 c0 03             	add    eax,0x3
c0005633:	e9 99 fe ff ff       	jmp    c00054d1 <f_mkfs+0x22c>
c0005638:	31 d2                	xor    edx,edx
c000563a:	89 d8                	mov    eax,ebx
c000563c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005640:	85 d2                	test   edx,edx
c0005642:	74 09                	je     c000564d <f_mkfs+0x3a8>
c0005644:	4b                   	dec    ebx
c0005645:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005649:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000564d:	89 d8                	mov    eax,ebx
c000564f:	31 d2                	xor    edx,edx
c0005651:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005655:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005659:	e9 e6 fe ff ff       	jmp    c0005544 <f_mkfs+0x29f>
c000565e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005663:	77 2b                	ja     c0005690 <f_mkfs+0x3eb>
c0005665:	85 c9                	test   ecx,ecx
c0005667:	75 18                	jne    c0005681 <f_mkfs+0x3dc>
c0005669:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000566c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005672:	0f 86 19 fe ff ff    	jbe    c0005491 <f_mkfs+0x1ec>
c0005678:	eb 07                	jmp    c0005681 <f_mkfs+0x3dc>
c000567a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000567f:	76 0a                	jbe    c000568b <f_mkfs+0x3e6>
c0005681:	bf 0e 00 00 00       	mov    edi,0xe
c0005686:	e9 a5 03 00 00       	jmp    c0005a30 <f_mkfs+0x78b>
c000568b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005690:	31 d2                	xor    edx,edx
c0005692:	b9 00 02 00 00       	mov    ecx,0x200
c0005697:	89 f0                	mov    eax,esi
c0005699:	e8 d2 c6 ff ff       	call   c0001d70 <mem_set>
c000569e:	b9 0b 00 00 00       	mov    ecx,0xb
c00056a3:	ba d2 ce 01 c0       	mov    edx,0xc001ced2
c00056a8:	89 f0                	mov    eax,esi
c00056aa:	e8 ac c6 ff ff       	call   c0001d5b <mem_cpy>
c00056af:	8d 46 0b             	lea    eax,[esi+0xb]
c00056b2:	ba 00 02 00 00       	mov    edx,0x200
c00056b7:	e8 98 c6 ff ff       	call   c0001d54 <st_word>
c00056bc:	89 f8                	mov    eax,edi
c00056be:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056c3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056c6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056c9:	e8 86 c6 ff ff       	call   c0001d54 <st_word>
c00056ce:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056d2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056d7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056da:	75 08                	jne    c00056e4 <f_mkfs+0x43f>
c00056dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056e8:	8d 46 11             	lea    eax,[esi+0x11]
c00056eb:	e8 64 c6 ff ff       	call   c0001d54 <st_word>
c00056f0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056f4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056fa:	77 0a                	ja     c0005706 <f_mkfs+0x461>
c00056fc:	8d 46 13             	lea    eax,[esi+0x13]
c00056ff:	e8 50 c6 ff ff       	call   c0001d54 <st_word>
c0005704:	eb 08                	jmp    c000570e <f_mkfs+0x469>
c0005706:	8d 46 20             	lea    eax,[esi+0x20]
c0005709:	e8 4a c6 ff ff       	call   c0001d58 <st_dword>
c000570e:	8d 46 18             	lea    eax,[esi+0x18]
c0005711:	ba 3f 00 00 00       	mov    edx,0x3f
c0005716:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000571a:	e8 35 c6 ff ff       	call   c0001d54 <st_word>
c000571f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005722:	ba ff 00 00 00       	mov    edx,0xff
c0005727:	e8 28 c6 ff ff       	call   c0001d54 <st_word>
c000572c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000572f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005733:	e8 20 c6 ff ff       	call   c0001d58 <st_dword>
c0005738:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000573d:	75 57                	jne    c0005796 <f_mkfs+0x4f1>
c000573f:	8d 46 43             	lea    eax,[esi+0x43]
c0005742:	ba 00 00 21 50       	mov    edx,0x50210000
c0005747:	e8 0c c6 ff ff       	call   c0001d58 <st_dword>
c000574c:	8d 46 24             	lea    eax,[esi+0x24]
c000574f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005753:	e8 00 c6 ff ff       	call   c0001d58 <st_dword>
c0005758:	8d 46 2c             	lea    eax,[esi+0x2c]
c000575b:	ba 02 00 00 00       	mov    edx,0x2
c0005760:	e8 f3 c5 ff ff       	call   c0001d58 <st_dword>
c0005765:	8d 46 30             	lea    eax,[esi+0x30]
c0005768:	ba 01 00 00 00       	mov    edx,0x1
c000576d:	e8 e2 c5 ff ff       	call   c0001d54 <st_word>
c0005772:	8d 46 32             	lea    eax,[esi+0x32]
c0005775:	ba 06 00 00 00       	mov    edx,0x6
c000577a:	e8 d5 c5 ff ff       	call   c0001d54 <st_word>
c000577f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005783:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005787:	8d 46 47             	lea    eax,[esi+0x47]
c000578a:	b9 13 00 00 00       	mov    ecx,0x13
c000578f:	ba de ce 01 c0       	mov    edx,0xc001cede
c0005794:	eb 2f                	jmp    c00057c5 <f_mkfs+0x520>
c0005796:	8d 46 27             	lea    eax,[esi+0x27]
c0005799:	ba 00 00 21 50       	mov    edx,0x50210000
c000579e:	e8 b5 c5 ff ff       	call   c0001d58 <st_dword>
c00057a3:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00057a8:	8d 46 16             	lea    eax,[esi+0x16]
c00057ab:	e8 a4 c5 ff ff       	call   c0001d54 <st_word>
c00057b0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057b4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057b8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057bb:	b9 13 00 00 00       	mov    ecx,0x13
c00057c0:	ba f2 ce 01 c0       	mov    edx,0xc001cef2
c00057c5:	e8 91 c5 ff ff       	call   c0001d5b <mem_cpy>
c00057ca:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057d0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057d9:	e8 76 c5 ff ff       	call   c0001d54 <st_word>
c00057de:	6a 01                	push   0x1
c00057e0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057e4:	56                   	push   esi
c00057e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057e9:	e8 0c c5 ff ff       	call   c0001cfa <disk_write>
c00057ee:	83 c4 10             	add    esp,0x10
c00057f1:	85 c0                	test   eax,eax
c00057f3:	0f 85 20 02 00 00    	jne    c0005a19 <f_mkfs+0x774>
c00057f9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057fe:	0f 85 98 00 00 00    	jne    c000589c <f_mkfs+0x5f7>
c0005804:	6a 01                	push   0x1
c0005806:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000580a:	83 c0 06             	add    eax,0x6
c000580d:	50                   	push   eax
c000580e:	56                   	push   esi
c000580f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005813:	e8 e2 c4 ff ff       	call   c0001cfa <disk_write>
c0005818:	b9 00 02 00 00       	mov    ecx,0x200
c000581d:	31 d2                	xor    edx,edx
c000581f:	89 f0                	mov    eax,esi
c0005821:	e8 4a c5 ff ff       	call   c0001d70 <mem_set>
c0005826:	ba 52 52 61 41       	mov    edx,0x41615252
c000582b:	89 f0                	mov    eax,esi
c000582d:	e8 26 c5 ff ff       	call   c0001d58 <st_dword>
c0005832:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005838:	ba 72 72 41 61       	mov    edx,0x61417272
c000583d:	e8 16 c5 ff ff       	call   c0001d58 <st_dword>
c0005842:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005845:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000584b:	e8 08 c5 ff ff       	call   c0001d58 <st_dword>
c0005850:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005856:	ba 02 00 00 00       	mov    edx,0x2
c000585b:	e8 f8 c4 ff ff       	call   c0001d58 <st_dword>
c0005860:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005865:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000586b:	e8 e4 c4 ff ff       	call   c0001d54 <st_word>
c0005870:	6a 01                	push   0x1
c0005872:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005876:	83 c0 07             	add    eax,0x7
c0005879:	50                   	push   eax
c000587a:	56                   	push   esi
c000587b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000587f:	e8 76 c4 ff ff       	call   c0001cfa <disk_write>
c0005884:	83 c4 20             	add    esp,0x20
c0005887:	6a 01                	push   0x1
c0005889:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000588d:	40                   	inc    eax
c000588e:	50                   	push   eax
c000588f:	56                   	push   esi
c0005890:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005894:	e8 61 c4 ff ff       	call   c0001cfa <disk_write>
c0005899:	83 c4 10             	add    esp,0x10
c000589c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00058a0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00058a4:	c1 e8 09             	shr    eax,0x9
c00058a7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00058ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058b1:	31 d2                	xor    edx,edx
c00058b3:	31 db                	xor    ebx,ebx
c00058b5:	89 f0                	mov    eax,esi
c00058b7:	e8 b4 c4 ff ff       	call   c0001d70 <mem_set>
c00058bc:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058c1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058c9:	0f 94 c3             	sete   bl
c00058cc:	4b                   	dec    ebx
c00058cd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058d3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058d9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058de:	75 21                	jne    c0005901 <f_mkfs+0x65c>
c00058e0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058e5:	89 f0                	mov    eax,esi
c00058e7:	e8 6c c4 ff ff       	call   c0001d58 <st_dword>
c00058ec:	8d 46 04             	lea    eax,[esi+0x4]
c00058ef:	83 ca ff             	or     edx,0xffffffff
c00058f2:	e8 61 c4 ff ff       	call   c0001d58 <st_dword>
c00058f7:	8d 46 08             	lea    eax,[esi+0x8]
c00058fa:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ff:	eb 04                	jmp    c0005905 <f_mkfs+0x660>
c0005901:	89 da                	mov    edx,ebx
c0005903:	89 f0                	mov    eax,esi
c0005905:	e8 4e c4 ff ff       	call   c0001d58 <st_dword>
c000590a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000590e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005912:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005916:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000591a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000591e:	76 08                	jbe    c0005928 <f_mkfs+0x683>
c0005920:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005924:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005928:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000592c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005930:	56                   	push   esi
c0005931:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005935:	e8 c0 c3 ff ff       	call   c0001cfa <disk_write>
c000593a:	83 c4 10             	add    esp,0x10
c000593d:	85 c0                	test   eax,eax
c000593f:	0f 85 d4 00 00 00    	jne    c0005a19 <f_mkfs+0x774>
c0005945:	b9 00 02 00 00       	mov    ecx,0x200
c000594a:	31 d2                	xor    edx,edx
c000594c:	89 f0                	mov    eax,esi
c000594e:	e8 1d c4 ff ff       	call   c0001d70 <mem_set>
c0005953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005957:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000595b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000595f:	75 b1                	jne    c0005912 <f_mkfs+0x66d>
c0005961:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005965:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000596d:	40                   	inc    eax
c000596e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005972:	0f 87 61 ff ff ff    	ja     c00058d9 <f_mkfs+0x634>
c0005978:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000597d:	74 04                	je     c0005983 <f_mkfs+0x6de>
c000597f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005983:	89 fb                	mov    ebx,edi
c0005985:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005989:	76 04                	jbe    c000598f <f_mkfs+0x6ea>
c000598b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000598f:	53                   	push   ebx
c0005990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005994:	56                   	push   esi
c0005995:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005999:	e8 5c c3 ff ff       	call   c0001cfa <disk_write>
c000599e:	83 c4 10             	add    esp,0x10
c00059a1:	85 c0                	test   eax,eax
c00059a3:	75 74                	jne    c0005a19 <f_mkfs+0x774>
c00059a5:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00059a9:	29 df                	sub    edi,ebx
c00059ab:	75 d6                	jne    c0005983 <f_mkfs+0x6de>
c00059ad:	b1 0c                	mov    cl,0xc
c00059af:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059b4:	74 18                	je     c00059ce <f_mkfs+0x729>
c00059b6:	b1 06                	mov    cl,0x6
c00059b8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059c0:	77 0c                	ja     c00059ce <f_mkfs+0x729>
c00059c2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059c7:	0f 94 c1             	sete   cl
c00059ca:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059ce:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059d3:	75 2d                	jne    c0005a02 <f_mkfs+0x75d>
c00059d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059d9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059e5:	0f b6 c9             	movzx  ecx,cl
c00059e8:	83 ec 0c             	sub    esp,0xc
c00059eb:	56                   	push   esi
c00059ec:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059f4:	e8 4c d3 ff ff       	call   c0002d45 <create_partition>
c00059f9:	83 c4 10             	add    esp,0x10
c00059fc:	89 c7                	mov    edi,eax
c00059fe:	85 c0                	test   eax,eax
c0005a00:	75 2e                	jne    c0005a30 <f_mkfs+0x78b>
c0005a02:	31 ff                	xor    edi,edi
c0005a04:	50                   	push   eax
c0005a05:	6a 00                	push   0x0
c0005a07:	6a 00                	push   0x0
c0005a09:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005a0d:	e8 fe c2 ff ff       	call   c0001d10 <disk_ioctl>
c0005a12:	83 c4 10             	add    esp,0x10
c0005a15:	85 c0                	test   eax,eax
c0005a17:	74 17                	je     c0005a30 <f_mkfs+0x78b>
c0005a19:	85 ed                	test   ebp,ebp
c0005a1b:	75 0c                	jne    c0005a29 <f_mkfs+0x784>
c0005a1d:	83 ec 0c             	sub    esp,0xc
c0005a20:	56                   	push   esi
c0005a21:	e8 6e 00 00 00       	call   c0005a94 <ff_memfree>
c0005a26:	83 c4 10             	add    esp,0x10
c0005a29:	bf 01 00 00 00       	mov    edi,0x1
c0005a2e:	eb 40                	jmp    c0005a70 <f_mkfs+0x7cb>
c0005a30:	85 ed                	test   ebp,ebp
c0005a32:	75 3c                	jne    c0005a70 <f_mkfs+0x7cb>
c0005a34:	83 ec 0c             	sub    esp,0xc
c0005a37:	56                   	push   esi
c0005a38:	e8 57 00 00 00       	call   c0005a94 <ff_memfree>
c0005a3d:	83 c4 10             	add    esp,0x10
c0005a40:	eb 2e                	jmp    c0005a70 <f_mkfs+0x7cb>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 56 fb ff ff    	jne    c00055a3 <f_mkfs+0x2fe>
c0005a4d:	e9 2f fc ff ff       	jmp    c0005681 <f_mkfs+0x3dc>
c0005a52:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a57:	0f 85 4c fb ff ff    	jne    c00055a9 <f_mkfs+0x304>
c0005a5d:	89 cf                	mov    edi,ecx
c0005a5f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a65:	0f 86 49 fa ff ff    	jbe    c00054b4 <f_mkfs+0x20f>
c0005a6b:	e9 11 fc ff ff       	jmp    c0005681 <f_mkfs+0x3dc>
c0005a70:	83 c4 4c             	add    esp,0x4c
c0005a73:	89 f8                	mov    eax,edi
c0005a75:	5b                   	pop    ebx
c0005a76:	5e                   	pop    esi
c0005a77:	5f                   	pop    edi
c0005a78:	5d                   	pop    ebp
c0005a79:	c3                   	ret    
c0005a7a:	66 90                	xchg   ax,ax

c0005a7c <ff_memalloc>:
c0005a7c:	83 ec 0c             	sub    esp,0xc
c0005a7f:	83 ec 0c             	sub    esp,0xc
c0005a82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a86:	e8 3e 1d 00 00       	call   c00077c9 <malloc>
c0005a8b:	83 c4 10             	add    esp,0x10
c0005a8e:	83 c4 0c             	add    esp,0xc
c0005a91:	c3                   	ret    
c0005a92:	66 90                	xchg   ax,ax

c0005a94 <ff_memfree>:
c0005a94:	83 ec 0c             	sub    esp,0xc
c0005a97:	83 ec 0c             	sub    esp,0xc
c0005a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a9e:	e8 36 1d 00 00       	call   c00077d9 <free>
c0005aa3:	83 c4 10             	add    esp,0x10
c0005aa6:	90                   	nop
c0005aa7:	83 c4 0c             	add    esp,0xc
c0005aaa:	c3                   	ret    
c0005aab:	90                   	nop

c0005aac <ff_uni2oem>:
c0005aac:	83 ec 14             	sub    esp,0x14
c0005aaf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ab3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ab7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005abe:	c7 44 24 0c 20 d3 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d320
c0005ac6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005acb:	77 0b                	ja     c0005ad8 <ff_uni2oem+0x2c>
c0005acd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ad1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ad6:	eb 68                	jmp    c0005b40 <ff_uni2oem+0x94>
c0005ad8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ae0:	77 5e                	ja     c0005b40 <ff_uni2oem+0x94>
c0005ae2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ae8:	75 56                	jne    c0005b40 <ff_uni2oem+0x94>
c0005aea:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005af1:	eb 0d                	jmp    c0005b00 <ff_uni2oem+0x54>
c0005af3:	90                   	nop
c0005af4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005af9:	40                   	inc    eax
c0005afa:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aff:	90                   	nop
c0005b00:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005b06:	77 24                	ja     c0005b2c <ff_uni2oem+0x80>
c0005b08:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b0d:	25 ff ff 00 00       	and    eax,0xffff
c0005b12:	01 c0                	add    eax,eax
c0005b14:	89 c2                	mov    edx,eax
c0005b16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b1a:	01 d0                	add    eax,edx
c0005b1c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b1f:	25 ff ff 00 00       	and    eax,0xffff
c0005b24:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b28:	75 ca                	jne    c0005af4 <ff_uni2oem+0x48>
c0005b2a:	66 90                	xchg   ax,ax
c0005b2c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b31:	83 e8 80             	sub    eax,0xffffff80
c0005b34:	25 ff 00 00 00       	and    eax,0xff
c0005b39:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b3e:	66 90                	xchg   ax,ax
c0005b40:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b45:	83 c4 14             	add    esp,0x14
c0005b48:	c3                   	ret    
c0005b49:	8d 76 00             	lea    esi,[esi+0x0]

c0005b4c <ff_oem2uni>:
c0005b4c:	83 ec 18             	sub    esp,0x18
c0005b4f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b57:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b5c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b60:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b67:	c7 44 24 10 20 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d320
c0005b6f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b75:	77 0d                	ja     c0005b84 <ff_oem2uni+0x38>
c0005b77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b7b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b80:	eb 36                	jmp    c0005bb8 <ff_oem2uni+0x6c>
c0005b82:	66 90                	xchg   ax,ax
c0005b84:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b8a:	75 2c                	jne    c0005bb8 <ff_oem2uni+0x6c>
c0005b8c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b93:	77 23                	ja     c0005bb8 <ff_oem2uni+0x6c>
c0005b95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b99:	25 ff ff 00 00       	and    eax,0xffff
c0005b9e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005ba3:	01 c0                	add    eax,eax
c0005ba5:	89 c2                	mov    edx,eax
c0005ba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bab:	01 d0                	add    eax,edx
c0005bad:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bb0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bb8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bbd:	83 c4 18             	add    esp,0x18
c0005bc0:	c3                   	ret    
c0005bc1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bc4 <ff_wtoupper>:
c0005bc4:	83 ec 10             	sub    esp,0x10
c0005bc7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bcf:	0f 87 77 01 00 00    	ja     c0005d4c <ff_wtoupper+0x188>
c0005bd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bd9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bde:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005be5:	77 09                	ja     c0005bf0 <ff_wtoupper+0x2c>
c0005be7:	b8 20 d1 01 c0       	mov    eax,0xc001d120
c0005bec:	eb 0a                	jmp    c0005bf8 <ff_wtoupper+0x34>
c0005bee:	66 90                	xchg   ax,ax
c0005bf0:	b8 60 d0 01 c0       	mov    eax,0xc001d060
c0005bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c00:	8d 50 02             	lea    edx,[eax+0x2]
c0005c03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c07:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c0a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005c0f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c15:	0f 84 21 01 00 00    	je     c0005d3c <ff_wtoupper+0x178>
c0005c1b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c20:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c25:	0f 82 11 01 00 00    	jb     c0005d3c <ff_wtoupper+0x178>
c0005c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c2f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c36:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c39:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c3e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c43:	66 c1 e8 08          	shr    ax,0x8
c0005c47:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c4c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c53:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c58:	31 d2                	xor    edx,edx
c0005c5a:	66 89 c2             	mov    dx,ax
c0005c5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c61:	31 c9                	xor    ecx,ecx
c0005c63:	66 89 c1             	mov    cx,ax
c0005c66:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c6b:	25 ff ff 00 00       	and    eax,0xffff
c0005c70:	01 c8                	add    eax,ecx
c0005c72:	39 c2                	cmp    edx,eax
c0005c74:	0f 8d 9a 00 00 00    	jge    c0005d14 <ff_wtoupper+0x150>
c0005c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c7e:	25 ff ff 00 00       	and    eax,0xffff
c0005c83:	83 f8 08             	cmp    eax,0x8
c0005c86:	0f 87 ac 00 00 00    	ja     c0005d38 <ff_wtoupper+0x174>
c0005c8c:	8b 04 85 20 d0 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2fe0]
c0005c93:	ff e0                	jmp    eax
c0005c95:	8d 76 00             	lea    esi,[esi+0x0]
c0005c98:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c9d:	31 d2                	xor    edx,edx
c0005c9f:	66 89 c2             	mov    dx,ax
c0005ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005ca6:	25 ff ff 00 00       	and    eax,0xffff
c0005cab:	29 c2                	sub    edx,eax
c0005cad:	89 d0                	mov    eax,edx
c0005caf:	01 c0                	add    eax,eax
c0005cb1:	89 c2                	mov    edx,eax
c0005cb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cb7:	01 d0                	add    eax,edx
c0005cb9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cbc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cc1:	eb 4d                	jmp    c0005d10 <ff_wtoupper+0x14c>
c0005cc3:	90                   	nop
c0005cc4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cc9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005ccd:	83 e0 01             	and    eax,0x1
c0005cd0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cd5:	eb 39                	jmp    c0005d10 <ff_wtoupper+0x14c>
c0005cd7:	90                   	nop
c0005cd8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cde:	eb 30                	jmp    c0005d10 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005ce6:	eb 28                	jmp    c0005d10 <ff_wtoupper+0x14c>
c0005ce8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cee:	eb 20                	jmp    c0005d10 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005cf6:	eb 18                	jmp    c0005d10 <ff_wtoupper+0x14c>
c0005cf8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cfe:	eb 10                	jmp    c0005d10 <ff_wtoupper+0x14c>
c0005d00:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005d06:	eb 08                	jmp    c0005d10 <ff_wtoupper+0x14c>
c0005d08:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005d0f:	90                   	nop
c0005d10:	eb 26                	jmp    c0005d38 <ff_wtoupper+0x174>
c0005d12:	66 90                	xchg   ax,ax
c0005d14:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d1a:	0f 85 dc fe ff ff    	jne    c0005bfc <ff_wtoupper+0x38>
c0005d20:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d25:	25 ff ff 00 00       	and    eax,0xffff
c0005d2a:	01 c0                	add    eax,eax
c0005d2c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d30:	e9 c7 fe ff ff       	jmp    c0005bfc <ff_wtoupper+0x38>
c0005d35:	8d 76 00             	lea    esi,[esi+0x0]
c0005d38:	90                   	nop
c0005d39:	8d 76 00             	lea    esi,[esi+0x0]
c0005d3c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d41:	25 ff ff 00 00       	and    eax,0xffff
c0005d46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d4a:	66 90                	xchg   ax,ax
c0005d4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d50:	83 c4 10             	add    esp,0x10
c0005d53:	c3                   	ret    

c0005d54 <utf2ucs>:
c0005d54:	57                   	push   edi
c0005d55:	31 c9                	xor    ecx,ecx
c0005d57:	56                   	push   esi
c0005d58:	89 d7                	mov    edi,edx
c0005d5a:	53                   	push   ebx
c0005d5b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d5f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d63:	89 de                	mov    esi,ebx
c0005d65:	c1 fe 08             	sar    esi,0x8
c0005d68:	89 f2                	mov    edx,esi
c0005d6a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d6d:	41                   	inc    ecx
c0005d6e:	85 db                	test   ebx,ebx
c0005d70:	75 e9                	jne    c0005d5b <utf2ucs+0x7>
c0005d72:	5b                   	pop    ebx
c0005d73:	5e                   	pop    esi
c0005d74:	5f                   	pop    edi
c0005d75:	c3                   	ret    

c0005d76 <ucs2utfn>:
c0005d76:	83 e1 fe             	and    ecx,0xfffffffe
c0005d79:	01 d1                	add    ecx,edx
c0005d7b:	39 d1                	cmp    ecx,edx
c0005d7d:	75 04                	jne    c0005d83 <ucs2utfn+0xd>
c0005d7f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d82:	c3                   	ret    
c0005d83:	57                   	push   edi
c0005d84:	56                   	push   esi
c0005d85:	53                   	push   ebx
c0005d86:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d89:	83 c2 02             	add    edx,0x2
c0005d8c:	89 de                	mov    esi,ebx
c0005d8e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d92:	c1 e6 08             	shl    esi,0x8
c0005d95:	09 f3                	or     ebx,esi
c0005d97:	83 fb 3b             	cmp    ebx,0x3b
c0005d9a:	74 51                	je     c0005ded <ucs2utfn+0x77>
c0005d9c:	83 fb 7f             	cmp    ebx,0x7f
c0005d9f:	7f 05                	jg     c0005da6 <ucs2utfn+0x30>
c0005da1:	88 18                	mov    BYTE PTR [eax],bl
c0005da3:	40                   	inc    eax
c0005da4:	eb 43                	jmp    c0005de9 <ucs2utfn+0x73>
c0005da6:	89 de                	mov    esi,ebx
c0005da8:	89 df                	mov    edi,ebx
c0005daa:	c1 fe 06             	sar    esi,0x6
c0005dad:	83 e7 3f             	and    edi,0x3f
c0005db0:	83 cf 80             	or     edi,0xffffff80
c0005db3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005db9:	7f 12                	jg     c0005dcd <ucs2utfn+0x57>
c0005dbb:	89 f3                	mov    ebx,esi
c0005dbd:	83 c0 02             	add    eax,0x2
c0005dc0:	83 cb c0             	or     ebx,0xffffffc0
c0005dc3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dc6:	89 fb                	mov    ebx,edi
c0005dc8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dcb:	eb 1c                	jmp    c0005de9 <ucs2utfn+0x73>
c0005dcd:	c1 fb 0c             	sar    ebx,0xc
c0005dd0:	83 e6 3f             	and    esi,0x3f
c0005dd3:	83 cb e0             	or     ebx,0xffffffe0
c0005dd6:	83 c0 03             	add    eax,0x3
c0005dd9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005ddc:	89 f3                	mov    ebx,esi
c0005dde:	83 cb 80             	or     ebx,0xffffff80
c0005de1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005de4:	89 fb                	mov    ebx,edi
c0005de6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005de9:	39 d1                	cmp    ecx,edx
c0005deb:	75 99                	jne    c0005d86 <ucs2utfn+0x10>
c0005ded:	5b                   	pop    ebx
c0005dee:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005df1:	5e                   	pop    esi
c0005df2:	5f                   	pop    edi
c0005df3:	c3                   	ret    

c0005df4 <isjoliet>:
c0005df4:	31 d2                	xor    edx,edx
c0005df6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005df9:	75 22                	jne    c0005e1d <isjoliet+0x29>
c0005dfb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005dff:	75 1c                	jne    c0005e1d <isjoliet+0x29>
c0005e01:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005e04:	ba 02 00 00 00       	mov    edx,0x2
c0005e09:	3c 43                	cmp    al,0x43
c0005e0b:	74 10                	je     c0005e1d <isjoliet+0x29>
c0005e0d:	ba 03 00 00 00       	mov    edx,0x3
c0005e12:	3c 45                	cmp    al,0x45
c0005e14:	74 07                	je     c0005e1d <isjoliet+0x29>
c0005e16:	31 d2                	xor    edx,edx
c0005e18:	3c 40                	cmp    al,0x40
c0005e1a:	0f 94 c2             	sete   dl
c0005e1d:	89 d0                	mov    eax,edx
c0005e1f:	c3                   	ret    

c0005e20 <htohl_32>:
c0005e20:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e22:	c3                   	ret    

c0005e23 <iso_733>:
c0005e23:	eb fb                	jmp    c0005e20 <htohl_32>

c0005e25 <bclear_cache>:
c0005e25:	31 c0                	xor    eax,eax
c0005e27:	8b 14 85 e0 fc 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0320]
c0005e2e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e34:	8b 14 85 40 fd 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe02c0]
c0005e3b:	40                   	inc    eax
c0005e3c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e42:	83 f8 10             	cmp    eax,0x10
c0005e45:	75 e0                	jne    c0005e27 <bclear_cache+0x2>
c0005e47:	c3                   	ret    

c0005e48 <bgrad_cache>:
c0005e48:	83 fa 0e             	cmp    edx,0xe
c0005e4b:	77 16                	ja     c0005e63 <bgrad_cache+0x1b>
c0005e4d:	53                   	push   ebx
c0005e4e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e51:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e55:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e58:	42                   	inc    edx
c0005e59:	83 fa 0f             	cmp    edx,0xf
c0005e5c:	75 f3                	jne    c0005e51 <bgrad_cache+0x9>
c0005e5e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e61:	5b                   	pop    ebx
c0005e62:	c3                   	ret    
c0005e63:	c3                   	ret    

c0005e64 <bclear>:
c0005e64:	eb bf                	jmp    c0005e25 <bclear_cache>

c0005e66 <iso_break_all>:
c0005e66:	31 c0                	xor    eax,eax
c0005e68:	c7 80 90 02 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdfd70],0x1
c0005e72:	05 94 00 00 00       	add    eax,0x94
c0005e77:	3d 40 09 00 00       	cmp    eax,0x940
c0005e7c:	75 ea                	jne    c0005e68 <iso_break_all+0x2>
c0005e7e:	c3                   	ret    

c0005e7f <ucscompare>:
c0005e7f:	55                   	push   ebp
c0005e80:	57                   	push   edi
c0005e81:	89 c7                	mov    edi,eax
c0005e83:	56                   	push   esi
c0005e84:	89 d6                	mov    esi,edx
c0005e86:	53                   	push   ebx
c0005e87:	31 d2                	xor    edx,edx
c0005e89:	83 ec 1c             	sub    esp,0x1c
c0005e8c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e90:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e95:	c1 e3 08             	shl    ebx,0x8
c0005e98:	09 c3                	or     ebx,eax
c0005e9a:	39 ca                	cmp    edx,ecx
c0005e9c:	7d 42                	jge    c0005ee0 <ucscompare+0x61>
c0005e9e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005ea2:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005ea7:	c1 e0 08             	shl    eax,0x8
c0005eaa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005eae:	09 e8                	or     eax,ebp
c0005eb0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005eb4:	83 f8 3b             	cmp    eax,0x3b
c0005eb7:	74 27                	je     c0005ee0 <ucscompare+0x61>
c0005eb9:	83 ec 0c             	sub    esp,0xc
c0005ebc:	50                   	push   eax
c0005ebd:	e8 1e aa ff ff       	call   c00008e0 <tolower>
c0005ec2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005ec5:	89 c5                	mov    ebp,eax
c0005ec7:	e8 14 aa ff ff       	call   c00008e0 <tolower>
c0005ecc:	83 c4 10             	add    esp,0x10
c0005ecf:	39 c5                	cmp    ebp,eax
c0005ed1:	75 20                	jne    c0005ef3 <ucscompare+0x74>
c0005ed3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ed7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005edb:	83 c2 02             	add    edx,0x2
c0005ede:	eb ac                	jmp    c0005e8c <ucscompare+0xd>
c0005ee0:	85 db                	test   ebx,ebx
c0005ee2:	0f 95 c2             	setne  dl
c0005ee5:	31 c0                	xor    eax,eax
c0005ee7:	83 fb 2f             	cmp    ebx,0x2f
c0005eea:	0f 95 c0             	setne  al
c0005eed:	21 d0                	and    eax,edx
c0005eef:	f7 d8                	neg    eax
c0005ef1:	eb 03                	jmp    c0005ef6 <ucscompare+0x77>
c0005ef3:	83 c8 ff             	or     eax,0xffffffff
c0005ef6:	83 c4 1c             	add    esp,0x1c
c0005ef9:	5b                   	pop    ebx
c0005efa:	5e                   	pop    esi
c0005efb:	5f                   	pop    edi
c0005efc:	5d                   	pop    ebp
c0005efd:	c3                   	ret    

c0005efe <fncompare>:
c0005efe:	55                   	push   ebp
c0005eff:	57                   	push   edi
c0005f00:	89 c7                	mov    edi,eax
c0005f02:	56                   	push   esi
c0005f03:	89 ce                	mov    esi,ecx
c0005f05:	53                   	push   ebx
c0005f06:	31 db                	xor    ebx,ebx
c0005f08:	83 ec 1c             	sub    esp,0x1c
c0005f0b:	39 d3                	cmp    ebx,edx
c0005f0d:	7d 43                	jge    c0005f52 <fncompare+0x54>
c0005f0f:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f13:	3c 3b                	cmp    al,0x3b
c0005f15:	74 3b                	je     c0005f52 <fncompare+0x54>
c0005f17:	3c 2e                	cmp    al,0x2e
c0005f19:	75 0e                	jne    c0005f29 <fncompare+0x2b>
c0005f1b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f1e:	39 d9                	cmp    ecx,ebx
c0005f20:	74 30                	je     c0005f52 <fncompare+0x54>
c0005f22:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f27:	74 29                	je     c0005f52 <fncompare+0x54>
c0005f29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	50                   	push   eax
c0005f31:	e8 aa a9 ff ff       	call   c00008e0 <tolower>
c0005f36:	89 c5                	mov    ebp,eax
c0005f38:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f3f:	e8 9c a9 ff ff       	call   c00008e0 <tolower>
c0005f44:	83 c4 10             	add    esp,0x10
c0005f47:	39 c5                	cmp    ebp,eax
c0005f49:	75 1d                	jne    c0005f68 <fncompare+0x6a>
c0005f4b:	43                   	inc    ebx
c0005f4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f50:	eb b9                	jmp    c0005f0b <fncompare+0xd>
c0005f52:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f55:	84 d2                	test   dl,dl
c0005f57:	0f 95 c1             	setne  cl
c0005f5a:	31 c0                	xor    eax,eax
c0005f5c:	80 fa 2f             	cmp    dl,0x2f
c0005f5f:	0f 95 c0             	setne  al
c0005f62:	21 c8                	and    eax,ecx
c0005f64:	f7 d8                	neg    eax
c0005f66:	eb 03                	jmp    c0005f6b <fncompare+0x6d>
c0005f68:	83 c8 ff             	or     eax,0xffffffff
c0005f6b:	83 c4 1c             	add    esp,0x1c
c0005f6e:	5b                   	pop    ebx
c0005f6f:	5e                   	pop    esi
c0005f70:	5f                   	pop    edi
c0005f71:	5d                   	pop    ebp
c0005f72:	c3                   	ret    

c0005f73 <isoReadDiscSector>:
c0005f73:	83 ec 0c             	sub    esp,0xc
c0005f76:	0f be 05 20 fd 01 c0 	movsx  eax,BYTE PTR ds:0xc001fd20
c0005f7d:	50                   	push   eax
c0005f7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f8a:	e8 81 18 01 00       	call   c0017810 <isoReadDiscSectorHelper>
c0005f8f:	83 c4 1c             	add    esp,0x1c
c0005f92:	c3                   	ret    

c0005f93 <bread_cache>:
c0005f93:	55                   	push   ebp
c0005f94:	57                   	push   edi
c0005f95:	89 d7                	mov    edi,edx
c0005f97:	56                   	push   esi
c0005f98:	ba 0f 00 00 00       	mov    edx,0xf
c0005f9d:	53                   	push   ebx
c0005f9e:	89 c6                	mov    esi,eax
c0005fa0:	83 ec 0c             	sub    esp,0xc
c0005fa3:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005fa6:	39 38                	cmp    DWORD PTR [eax],edi
c0005fa8:	74 3c                	je     c0005fe6 <bread_cache+0x53>
c0005faa:	4a                   	dec    edx
c0005fab:	83 fa ff             	cmp    edx,0xffffffff
c0005fae:	75 f3                	jne    c0005fa3 <bread_cache+0x10>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fb5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fb8:	74 08                	je     c0005fc2 <bread_cache+0x2f>
c0005fba:	43                   	inc    ebx
c0005fbb:	83 fb 10             	cmp    ebx,0x10
c0005fbe:	75 f2                	jne    c0005fb2 <bread_cache+0x1f>
c0005fc0:	31 db                	xor    ebx,ebx
c0005fc2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fc5:	50                   	push   eax
c0005fc6:	6a 01                	push   0x1
c0005fc8:	57                   	push   edi
c0005fc9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fcc:	83 c0 04             	add    eax,0x4
c0005fcf:	50                   	push   eax
c0005fd0:	e8 9e ff ff ff       	call   c0005f73 <isoReadDiscSector>
c0005fd5:	83 c4 10             	add    esp,0x10
c0005fd8:	83 c9 ff             	or     ecx,0xffffffff
c0005fdb:	85 c0                	test   eax,eax
c0005fdd:	78 13                	js     c0005ff2 <bread_cache+0x5f>
c0005fdf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fe2:	89 da                	mov    edx,ebx
c0005fe4:	89 38                	mov    DWORD PTR [eax],edi
c0005fe6:	89 f0                	mov    eax,esi
c0005fe8:	e8 5b fe ff ff       	call   c0005e48 <bgrad_cache>
c0005fed:	b9 0f 00 00 00       	mov    ecx,0xf
c0005ff2:	83 c4 0c             	add    esp,0xc
c0005ff5:	89 c8                	mov    eax,ecx
c0005ff7:	5b                   	pop    ebx
c0005ff8:	5e                   	pop    esi
c0005ff9:	5f                   	pop    edi
c0005ffa:	5d                   	pop    ebp
c0005ffb:	c3                   	ret    

c0005ffc <biread>:
c0005ffc:	89 c2                	mov    edx,eax
c0005ffe:	b8 40 fd 01 c0       	mov    eax,0xc001fd40
c0006003:	eb 8e                	jmp    c0005f93 <bread_cache>

c0006005 <bdread>:
c0006005:	89 c2                	mov    edx,eax
c0006007:	b8 e0 fc 01 c0       	mov    eax,0xc001fce0
c000600c:	eb 85                	jmp    c0005f93 <bread_cache>

c000600e <strnicmp>:
c000600e:	55                   	push   ebp
c000600f:	57                   	push   edi
c0006010:	56                   	push   esi
c0006011:	31 f6                	xor    esi,esi
c0006013:	53                   	push   ebx
c0006014:	83 ec 0c             	sub    esp,0xc
c0006017:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000601b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000601f:	74 42                	je     c0006063 <strnicmp+0x55>
c0006021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006025:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006029:	84 c0                	test   al,al
c000602b:	74 36                	je     c0006063 <strnicmp+0x55>
c000602d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006030:	84 d2                	test   dl,dl
c0006032:	74 2f                	je     c0006063 <strnicmp+0x55>
c0006034:	38 d0                	cmp    al,dl
c0006036:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006039:	75 04                	jne    c000603f <strnicmp+0x31>
c000603b:	89 ee                	mov    esi,ebp
c000603d:	eb dc                	jmp    c000601b <strnicmp+0xd>
c000603f:	83 ec 0c             	sub    esp,0xc
c0006042:	50                   	push   eax
c0006043:	e8 98 a8 ff ff       	call   c00008e0 <tolower>
c0006048:	89 c7                	mov    edi,eax
c000604a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000604e:	89 ee                	mov    esi,ebp
c0006050:	89 04 24             	mov    DWORD PTR [esp],eax
c0006053:	e8 88 a8 ff ff       	call   c00008e0 <tolower>
c0006058:	83 c4 10             	add    esp,0x10
c000605b:	29 c7                	sub    edi,eax
c000605d:	89 f8                	mov    eax,edi
c000605f:	74 ba                	je     c000601b <strnicmp+0xd>
c0006061:	eb 02                	jmp    c0006065 <strnicmp+0x57>
c0006063:	31 c0                	xor    eax,eax
c0006065:	83 c4 0c             	add    esp,0xc
c0006068:	5b                   	pop    ebx
c0006069:	5e                   	pop    esi
c000606a:	5f                   	pop    edi
c000606b:	5d                   	pop    ebp
c000606c:	c3                   	ret    

c000606d <find_object>:
c000606d:	55                   	push   ebp
c000606e:	89 c5                	mov    ebp,eax
c0006070:	57                   	push   edi
c0006071:	56                   	push   esi
c0006072:	53                   	push   ebx
c0006073:	89 d3                	mov    ebx,edx
c0006075:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000607b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006082:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006086:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000608a:	83 3d 74 0b 02 c0 00 	cmp    DWORD PTR ds:0xc0020b74,0x0
c0006091:	74 0b                	je     c000609e <find_object+0x31>
c0006093:	89 ea                	mov    edx,ebp
c0006095:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006099:	e8 b6 fc ff ff       	call   c0005d54 <utf2ucs>
c000609e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00060a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00060a5:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00060aa:	7e 11                	jle    c00060bd <find_object+0x50>
c00060ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060b0:	e8 47 ff ff ff       	call   c0005ffc <biread>
c00060b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060b9:	85 c0                	test   eax,eax
c00060bb:	79 07                	jns    c00060c4 <find_object+0x57>
c00060bd:	31 db                	xor    ebx,ebx
c00060bf:	e9 5b 01 00 00       	jmp    c000621f <find_object+0x1b2>
c00060c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060d0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060d4:	8b 04 85 40 fd 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe02c0]
c00060db:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060df:	8a 03                	mov    al,BYTE PTR [ebx]
c00060e1:	84 c0                	test   al,al
c00060e3:	75 0e                	jne    c00060f3 <find_object+0x86>
c00060e5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060e9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060f1:	eb b2                	jmp    c00060a5 <find_object+0x38>
c00060f3:	8b 35 74 0b 02 c0    	mov    esi,DWORD PTR ds:0xc0020b74
c00060f9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060fd:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006101:	89 ca                	mov    edx,ecx
c0006103:	85 f6                	test   esi,esi
c0006105:	74 2b                	je     c0006132 <find_object+0xc5>
c0006107:	8d 43 21             	lea    eax,[ebx+0x21]
c000610a:	8d 54 24 20          	lea    edx,[esp+0x20]
c000610e:	e8 6c fd ff ff       	call   c0005e7f <ucscompare>
c0006113:	85 c0                	test   eax,eax
c0006115:	0f 84 c1 00 00 00    	je     c00061dc <find_object+0x16f>
c000611b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000611e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006122:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000612a:	0f 8e dc 00 00 00    	jle    c000620c <find_object+0x19f>
c0006130:	eb b3                	jmp    c00060e5 <find_object+0x78>
c0006132:	0f b6 f0             	movzx  esi,al
c0006135:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006139:	29 ce                	sub    esi,ecx
c000613b:	80 e2 01             	and    dl,0x1
c000613e:	74 05                	je     c0006145 <find_object+0xd8>
c0006140:	83 ee 21             	sub    esi,0x21
c0006143:	eb 55                	jmp    c000619a <find_object+0x12d>
c0006145:	47                   	inc    edi
c0006146:	83 ee 22             	sub    esi,0x22
c0006149:	eb 4f                	jmp    c000619a <find_object+0x12d>
c000614b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000614e:	48                   	dec    eax
c000614f:	3c 01                	cmp    al,0x1
c0006151:	77 4c                	ja     c000619f <find_object+0x132>
c0006153:	50                   	push   eax
c0006154:	6a 02                	push   0x2
c0006156:	68 20 d4 01 c0       	push   0xc001d420
c000615b:	57                   	push   edi
c000615c:	e8 0f a6 ff ff       	call   c0000770 <strncmp>
c0006161:	83 c4 10             	add    esp,0x10
c0006164:	85 c0                	test   eax,eax
c0006166:	75 2a                	jne    c0006192 <find_object+0x125>
c0006168:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000616c:	8d 42 fb             	lea    eax,[edx-0x5]
c000616f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006173:	50                   	push   eax
c0006174:	8d 47 05             	lea    eax,[edi+0x5]
c0006177:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000617b:	50                   	push   eax
c000617c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006180:	50                   	push   eax
c0006181:	e8 ba a4 ff ff       	call   c0000640 <strncpy>
c0006186:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000618a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000618f:	83 c4 10             	add    esp,0x10
c0006192:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006196:	29 c6                	sub    esi,eax
c0006198:	01 c7                	add    edi,eax
c000619a:	83 fe 03             	cmp    esi,0x3
c000619d:	7f ac                	jg     c000614b <find_object+0xde>
c000619f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00061a4:	7e 40                	jle    c00061e6 <find_object+0x179>
c00061a6:	51                   	push   ecx
c00061a7:	51                   	push   ecx
c00061a8:	6a 2f                	push   0x2f
c00061aa:	55                   	push   ebp
c00061ab:	e8 90 a5 ff ff       	call   c0000740 <strchr>
c00061b0:	83 c4 10             	add    esp,0x10
c00061b3:	85 c0                	test   eax,eax
c00061b5:	74 04                	je     c00061bb <find_object+0x14e>
c00061b7:	29 e8                	sub    eax,ebp
c00061b9:	eb 0c                	jmp    c00061c7 <find_object+0x15a>
c00061bb:	83 ec 0c             	sub    esp,0xc
c00061be:	55                   	push   ebp
c00061bf:	e8 8c a3 ff ff       	call   c0000550 <strlen>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	52                   	push   edx
c00061c8:	50                   	push   eax
c00061c9:	55                   	push   ebp
c00061ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061ce:	50                   	push   eax
c00061cf:	e8 3a fe ff ff       	call   c000600e <strnicmp>
c00061d4:	83 c4 10             	add    esp,0x10
c00061d7:	e9 37 ff ff ff       	jmp    c0006113 <find_object+0xa6>
c00061dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061e0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061e4:	eb 1e                	jmp    c0006204 <find_object+0x197>
c00061e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00061ed:	89 e9                	mov    ecx,ebp
c00061ef:	e8 0a fd ff ff       	call   c0005efe <fncompare>
c00061f4:	85 c0                	test   eax,eax
c00061f6:	0f 85 1f ff ff ff    	jne    c000611b <find_object+0xae>
c00061fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006200:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0006204:	0f 85 11 ff ff ff    	jne    c000611b <find_object+0xae>
c000620a:	eb 13                	jmp    c000621f <find_object+0x1b2>
c000620c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006210:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006214:	0f 8f b2 fe ff ff    	jg     c00060cc <find_object+0x5f>
c000621a:	e9 c6 fe ff ff       	jmp    c00060e5 <find_object+0x78>
c000621f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006225:	89 d8                	mov    eax,ebx
c0006227:	5b                   	pop    ebx
c0006228:	5e                   	pop    esi
c0006229:	5f                   	pop    edi
c000622a:	5d                   	pop    ebp
c000622b:	c3                   	ret    

c000622c <find_object_path>:
c000622c:	55                   	push   ebp
c000622d:	57                   	push   edi
c000622e:	89 d7                	mov    edi,edx
c0006230:	56                   	push   esi
c0006231:	89 c6                	mov    esi,eax
c0006233:	53                   	push   ebx
c0006234:	89 cb                	mov    ebx,ecx
c0006236:	83 ec 0c             	sub    esp,0xc
c0006239:	50                   	push   eax
c000623a:	50                   	push   eax
c000623b:	6a 2f                	push   0x2f
c000623d:	56                   	push   esi
c000623e:	e8 fd a4 ff ff       	call   c0000740 <strchr>
c0006243:	83 c4 10             	add    esp,0x10
c0006246:	89 c5                	mov    ebp,eax
c0006248:	85 c0                	test   eax,eax
c000624a:	74 3a                	je     c0006286 <find_object_path+0x5a>
c000624c:	39 ee                	cmp    esi,ebp
c000624e:	74 31                	je     c0006281 <find_object_path+0x55>
c0006250:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006253:	e8 cb fb ff ff       	call   c0005e23 <iso_733>
c0006258:	89 c2                	mov    edx,eax
c000625a:	8d 43 02             	lea    eax,[ebx+0x2]
c000625d:	e8 c1 fb ff ff       	call   c0005e23 <iso_733>
c0006262:	83 ec 0c             	sub    esp,0xc
c0006265:	89 c1                	mov    ecx,eax
c0006267:	52                   	push   edx
c0006268:	89 f0                	mov    eax,esi
c000626a:	ba 01 00 00 00       	mov    edx,0x1
c000626f:	e8 f9 fd ff ff       	call   c000606d <find_object>
c0006274:	83 c4 10             	add    esp,0x10
c0006277:	89 c3                	mov    ebx,eax
c0006279:	85 c0                	test   eax,eax
c000627b:	75 04                	jne    c0006281 <find_object_path+0x55>
c000627d:	31 db                	xor    ebx,ebx
c000627f:	eb 36                	jmp    c00062b7 <find_object_path+0x8b>
c0006281:	8d 75 01             	lea    esi,[ebp+0x1]
c0006284:	eb b3                	jmp    c0006239 <find_object_path+0xd>
c0006286:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006289:	74 28                	je     c00062b3 <find_object_path+0x87>
c000628b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000628e:	e8 90 fb ff ff       	call   c0005e23 <iso_733>
c0006293:	89 c2                	mov    edx,eax
c0006295:	8d 43 02             	lea    eax,[ebx+0x2]
c0006298:	e8 86 fb ff ff       	call   c0005e23 <iso_733>
c000629d:	83 ec 0c             	sub    esp,0xc
c00062a0:	89 c1                	mov    ecx,eax
c00062a2:	52                   	push   edx
c00062a3:	89 f0                	mov    eax,esi
c00062a5:	89 fa                	mov    edx,edi
c00062a7:	e8 c1 fd ff ff       	call   c000606d <find_object>
c00062ac:	83 c4 10             	add    esp,0x10
c00062af:	89 c3                	mov    ebx,eax
c00062b1:	eb 04                	jmp    c00062b7 <find_object_path+0x8b>
c00062b3:	85 ff                	test   edi,edi
c00062b5:	74 c6                	je     c000627d <find_object_path+0x51>
c00062b7:	83 c4 0c             	add    esp,0xc
c00062ba:	89 d8                	mov    eax,ebx
c00062bc:	5b                   	pop    ebx
c00062bd:	5e                   	pop    esi
c00062be:	5f                   	pop    edi
c00062bf:	5d                   	pop    ebp
c00062c0:	c3                   	ret    

c00062c1 <stricmp>:
c00062c1:	57                   	push   edi
c00062c2:	56                   	push   esi
c00062c3:	31 f6                	xor    esi,esi
c00062c5:	53                   	push   ebx
c00062c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ca:	83 ec 0c             	sub    esp,0xc
c00062cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062d9:	50                   	push   eax
c00062da:	e8 e1 a5 ff ff       	call   c00008c0 <toupper>
c00062df:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e2:	e8 f9 a5 ff ff       	call   c00008e0 <tolower>
c00062e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062ea:	89 c3                	mov    ebx,eax
c00062ec:	e8 cf a5 ff ff       	call   c00008c0 <toupper>
c00062f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062f4:	e8 e7 a5 ff ff       	call   c00008e0 <tolower>
c00062f9:	83 c4 10             	add    esp,0x10
c00062fc:	39 c3                	cmp    ebx,eax
c00062fe:	75 05                	jne    c0006305 <stricmp+0x44>
c0006300:	46                   	inc    esi
c0006301:	85 db                	test   ebx,ebx
c0006303:	75 c1                	jne    c00062c6 <stricmp+0x5>
c0006305:	29 c3                	sub    ebx,eax
c0006307:	89 d8                	mov    eax,ebx
c0006309:	5b                   	pop    ebx
c000630a:	5e                   	pop    esi
c000630b:	5f                   	pop    edi
c000630c:	c3                   	ret    

c000630d <iso_open>:
c000630d:	57                   	push   edi
c000630e:	31 c0                	xor    eax,eax
c0006310:	56                   	push   esi
c0006311:	b9 40 0b 02 c0       	mov    ecx,0xc0020b40
c0006316:	53                   	push   ebx
c0006317:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000631c:	0f 95 c0             	setne  al
c000631f:	89 c2                	mov    edx,eax
c0006321:	89 c6                	mov    esi,eax
c0006323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006327:	e8 00 ff ff ff       	call   c000622c <find_object_path>
c000632c:	83 ca ff             	or     edx,0xffffffff
c000632f:	85 c0                	test   eax,eax
c0006331:	74 5e                	je     c0006391 <iso_open+0x84>
c0006333:	89 c1                	mov    ecx,eax
c0006335:	31 d2                	xor    edx,edx
c0006337:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000633d:	83 bf 00 02 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdfe00],0x0
c0006344:	75 42                	jne    c0006388 <iso_open+0x7b>
c0006346:	8d 41 02             	lea    eax,[ecx+0x2]
c0006349:	c7 87 00 02 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdfe00],0xffffffff
c0006353:	e8 cb fa ff ff       	call   c0005e23 <iso_733>
c0006358:	89 b7 04 02 02 c0    	mov    DWORD PTR [edi-0x3ffdfdfc],esi
c000635e:	89 87 00 02 02 c0    	mov    DWORD PTR [edi-0x3ffdfe00],eax
c0006364:	c7 87 08 02 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdfdf8],0x0
c000636e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006371:	e8 ad fa ff ff       	call   c0005e23 <iso_733>
c0006376:	c7 87 90 02 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdfd70],0x0
c0006380:	89 87 0c 02 02 c0    	mov    DWORD PTR [edi-0x3ffdfdf4],eax
c0006386:	eb 09                	jmp    c0006391 <iso_open+0x84>
c0006388:	42                   	inc    edx
c0006389:	83 fa 10             	cmp    edx,0x10
c000638c:	75 a9                	jne    c0006337 <iso_open+0x2a>
c000638e:	83 ca ff             	or     edx,0xffffffff
c0006391:	5b                   	pop    ebx
c0006392:	89 d0                	mov    eax,edx
c0006394:	5e                   	pop    esi
c0006395:	5f                   	pop    edi
c0006396:	c3                   	ret    

c0006397 <iso_close>:
c0006397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000639b:	83 f8 0f             	cmp    eax,0xf
c000639e:	7f 10                	jg     c00063b0 <iso_close+0x19>
c00063a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00063a6:	c7 80 00 02 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfe00],0x0
c00063b0:	e9 70 fa ff ff       	jmp    c0005e25 <bclear_cache>

c00063b5 <iso_read>:
c00063b5:	55                   	push   ebp
c00063b6:	57                   	push   edi
c00063b7:	56                   	push   esi
c00063b8:	53                   	push   ebx
c00063b9:	83 ec 1c             	sub    esp,0x1c
c00063bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063c0:	83 fd 0f             	cmp    ebp,0xf
c00063c3:	7e 0a                	jle    c00063cf <iso_read+0x1a>
c00063c5:	83 c8 ff             	or     eax,0xffffffff
c00063c8:	89 c2                	mov    edx,eax
c00063ca:	e9 f4 00 00 00       	jmp    c00064c3 <iso_read+0x10e>
c00063cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063d5:	83 bd 00 02 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdfe00],0x0
c00063dc:	74 e7                	je     c00063c5 <iso_read+0x10>
c00063de:	8b 95 90 02 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdfd70]
c00063e4:	85 d2                	test   edx,edx
c00063e6:	75 dd                	jne    c00063c5 <iso_read+0x10>
c00063e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063ed:	0f 84 cd 00 00 00    	je     c00064c0 <iso_read+0x10b>
c00063f3:	8b 85 08 02 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdfdf8]
c00063f9:	8b 8d 0c 02 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdfdf4]
c00063ff:	29 c1                	sub    ecx,eax
c0006401:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006405:	76 04                	jbe    c000640b <iso_read+0x56>
c0006407:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000640b:	85 c9                	test   ecx,ecx
c000640d:	0f 84 ad 00 00 00    	je     c00064c0 <iso_read+0x10b>
c0006413:	89 c6                	mov    esi,eax
c0006415:	bb 00 08 00 00       	mov    ebx,0x800
c000641a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006420:	c1 e8 0b             	shr    eax,0xb
c0006423:	29 f3                	sub    ebx,esi
c0006425:	03 85 00 02 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdfe00]
c000642b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006431:	7e 3f                	jle    c0006472 <iso_read+0xbd>
c0006433:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006439:	75 37                	jne    c0006472 <iso_read+0xbd>
c000643b:	be 20 00 00 00       	mov    esi,0x20
c0006440:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006446:	7f 05                	jg     c000644d <iso_read+0x98>
c0006448:	89 ce                	mov    esi,ecx
c000644a:	c1 fe 0b             	sar    esi,0xb
c000644d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006451:	89 f3                	mov    ebx,esi
c0006453:	c1 e3 0b             	shl    ebx,0xb
c0006456:	52                   	push   edx
c0006457:	56                   	push   esi
c0006458:	50                   	push   eax
c0006459:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000645d:	e8 11 fb ff ff       	call   c0005f73 <isoReadDiscSector>
c0006462:	83 c4 10             	add    esp,0x10
c0006465:	85 c0                	test   eax,eax
c0006467:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000646b:	7f 3e                	jg     c00064ab <iso_read+0xf6>
c000646d:	e9 53 ff ff ff       	jmp    c00063c5 <iso_read+0x10>
c0006472:	39 cb                	cmp    ebx,ecx
c0006474:	7e 02                	jle    c0006478 <iso_read+0xc3>
c0006476:	89 cb                	mov    ebx,ecx
c0006478:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000647c:	e8 84 fb ff ff       	call   c0006005 <bdread>
c0006481:	85 c0                	test   eax,eax
c0006483:	0f 88 3c ff ff ff    	js     c00063c5 <iso_read+0x10>
c0006489:	8b 0c 85 e0 fc 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0320]
c0006490:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006494:	8b 85 08 02 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdfdf8]
c000649a:	25 ff 07 00 00       	and    eax,0x7ff
c000649f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00064a3:	89 d9                	mov    ecx,ebx
c00064a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00064a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00064ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00064af:	01 9d 08 02 02 c0    	add    DWORD PTR [ebp-0x3ffdfdf8],ebx
c00064b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064b9:	01 da                	add    edx,ebx
c00064bb:	e9 28 ff ff ff       	jmp    c00063e8 <iso_read+0x33>
c00064c0:	89 d0                	mov    eax,edx
c00064c2:	99                   	cdq    
c00064c3:	83 c4 1c             	add    esp,0x1c
c00064c6:	5b                   	pop    ebx
c00064c7:	5e                   	pop    esi
c00064c8:	5f                   	pop    edi
c00064c9:	5d                   	pop    ebp
c00064ca:	c3                   	ret    

c00064cb <iso_seek>:
c00064cb:	55                   	push   ebp
c00064cc:	83 c8 ff             	or     eax,0xffffffff
c00064cf:	57                   	push   edi
c00064d0:	89 c2                	mov    edx,eax
c00064d2:	56                   	push   esi
c00064d3:	53                   	push   ebx
c00064d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064e0:	83 fe 0f             	cmp    esi,0xf
c00064e3:	7f 65                	jg     c000654a <iso_seek+0x7f>
c00064e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064eb:	8d 8d 00 02 02 c0    	lea    ecx,[ebp-0x3ffdfe00]
c00064f1:	83 bd 00 02 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdfe00],0x0
c00064f8:	74 50                	je     c000654a <iso_seek+0x7f>
c00064fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006501:	75 47                	jne    c000654a <iso_seek+0x7f>
c0006503:	83 fb 01             	cmp    ebx,0x1
c0006506:	74 0e                	je     c0006516 <iso_seek+0x4b>
c0006508:	83 fb 02             	cmp    ebx,0x2
c000650b:	74 0e                	je     c000651b <iso_seek+0x50>
c000650d:	85 db                	test   ebx,ebx
c000650f:	75 39                	jne    c000654a <iso_seek+0x7f>
c0006511:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006514:	eb 0d                	jmp    c0006523 <iso_seek+0x58>
c0006516:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006519:	eb 08                	jmp    c0006523 <iso_seek+0x58>
c000651b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000651e:	01 f8                	add    eax,edi
c0006520:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006523:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006529:	8b 88 0c 02 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdfdf4]
c000652f:	05 00 02 02 c0       	add    eax,0xc0020200
c0006534:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006537:	76 03                	jbe    c000653c <iso_seek+0x71>
c0006539:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000653c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006542:	8b 82 08 02 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdfdf8]
c0006548:	31 d2                	xor    edx,edx
c000654a:	5b                   	pop    ebx
c000654b:	5e                   	pop    esi
c000654c:	5f                   	pop    edi
c000654d:	5d                   	pop    ebp
c000654e:	c3                   	ret    

c000654f <iso_tell>:
c000654f:	83 c8 ff             	or     eax,0xffffffff
c0006552:	53                   	push   ebx
c0006553:	89 c2                	mov    edx,eax
c0006555:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006559:	83 f9 0f             	cmp    ecx,0xf
c000655c:	7f 20                	jg     c000657e <iso_tell+0x2f>
c000655e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006564:	83 bb 00 02 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdfe00],0x0
c000656b:	74 11                	je     c000657e <iso_tell+0x2f>
c000656d:	83 bb 90 02 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdfd70],0x0
c0006574:	75 08                	jne    c000657e <iso_tell+0x2f>
c0006576:	8b 83 08 02 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdfdf8]
c000657c:	31 d2                	xor    edx,edx
c000657e:	5b                   	pop    ebx
c000657f:	c3                   	ret    

c0006580 <iso_total>:
c0006580:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006584:	83 c8 ff             	or     eax,0xffffffff
c0006587:	83 fa 0f             	cmp    edx,0xf
c000658a:	7f 1e                	jg     c00065aa <iso_total+0x2a>
c000658c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006592:	83 ba 00 02 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdfe00],0x0
c0006599:	74 0f                	je     c00065aa <iso_total+0x2a>
c000659b:	83 ba 90 02 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdfd70],0x0
c00065a2:	75 06                	jne    c00065aa <iso_total+0x2a>
c00065a4:	8b 82 0c 02 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdfdf4]
c00065aa:	c3                   	ret    

c00065ab <fn_postprocess>:
c00065ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00065af:	89 d0                	mov    eax,edx
c00065b1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065b3:	80 f9 3b             	cmp    cl,0x3b
c00065b6:	74 07                	je     c00065bf <fn_postprocess+0x14>
c00065b8:	84 c9                	test   cl,cl
c00065ba:	74 03                	je     c00065bf <fn_postprocess+0x14>
c00065bc:	40                   	inc    eax
c00065bd:	eb f2                	jmp    c00065b1 <fn_postprocess+0x6>
c00065bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065c2:	39 d0                	cmp    eax,edx
c00065c4:	76 0a                	jbe    c00065d0 <fn_postprocess+0x25>
c00065c6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ca:	75 04                	jne    c00065d0 <fn_postprocess+0x25>
c00065cc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065d0:	c3                   	ret    

c00065d1 <iso_readdir>:
c00065d1:	55                   	push   ebp
c00065d2:	57                   	push   edi
c00065d3:	56                   	push   esi
c00065d4:	53                   	push   ebx
c00065d5:	83 ec 1c             	sub    esp,0x1c
c00065d8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065dd:	7e 07                	jle    c00065e6 <iso_readdir+0x15>
c00065df:	31 c0                	xor    eax,eax
c00065e1:	e9 d4 01 00 00       	jmp    c00067ba <iso_readdir+0x1e9>
c00065e6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065ee:	8d b0 00 02 02 c0    	lea    esi,[eax-0x3ffdfe00]
c00065f4:	83 b8 00 02 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdfe00],0x0
c00065fb:	74 e2                	je     c00065df <iso_readdir+0xe>
c00065fd:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c0006601:	74 dc                	je     c00065df <iso_readdir+0xe>
c0006603:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c000660a:	75 d3                	jne    c00065df <iso_readdir+0xe>
c000660c:	31 db                	xor    ebx,ebx
c000660e:	83 c8 ff             	or     eax,0xffffffff
c0006611:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006614:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006617:	73 3c                	jae    c0006655 <iso_readdir+0x84>
c0006619:	c1 ea 0b             	shr    edx,0xb
c000661c:	8b 06                	mov    eax,DWORD PTR [esi]
c000661e:	01 d0                	add    eax,edx
c0006620:	e8 d7 f9 ff ff       	call   c0005ffc <biread>
c0006625:	85 c0                	test   eax,eax
c0006627:	78 b6                	js     c00065df <iso_readdir+0xe>
c0006629:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000662c:	8b 1c 85 40 fd 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe02c0]
c0006633:	89 d1                	mov    ecx,edx
c0006635:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000663b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000663f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006642:	75 11                	jne    c0006655 <iso_readdir+0x84>
c0006644:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000664a:	81 c2 00 08 00 00    	add    edx,0x800
c0006650:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006653:	eb bc                	jmp    c0006611 <iso_readdir+0x40>
c0006655:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000665d:	8b b2 08 02 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdfdf8]
c0006663:	81 c2 00 02 02 c0    	add    edx,0xc0020200
c0006669:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000666c:	0f 83 6d ff ff ff    	jae    c00065df <iso_readdir+0xe>
c0006672:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006676:	75 38                	jne    c00066b0 <iso_readdir+0xdf>
c0006678:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000667c:	75 32                	jne    c00066b0 <iso_readdir+0xdf>
c000667e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006681:	8b 1c 85 40 fd 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe02c0]
c0006688:	01 f1                	add    ecx,esi
c000668a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000668d:	89 c8                	mov    eax,ecx
c000668f:	25 ff 07 00 00       	and    eax,0x7ff
c0006694:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006699:	01 c8                	add    eax,ecx
c000669b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000669e:	25 ff 07 00 00       	and    eax,0x7ff
c00066a3:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c00066a7:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c00066aa:	0f 84 2f ff ff ff    	je     c00065df <iso_readdir+0xe>
c00066b0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066b8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066bc:	8d 53 21             	lea    edx,[ebx+0x21]
c00066bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066c3:	8d a8 18 02 02 c0    	lea    ebp,[eax-0x3ffdfde8]
c00066c9:	83 3d 74 0b 02 c0 00 	cmp    DWORD PTR ds:0xc0020b74,0x0
c00066d0:	74 0c                	je     c00066de <iso_readdir+0x10d>
c00066d2:	89 e8                	mov    eax,ebp
c00066d4:	e8 9d f6 ff ff       	call   c0005d76 <ucs2utfn>
c00066d9:	e9 9e 00 00 00       	jmp    c000677c <iso_readdir+0x1ab>
c00066de:	56                   	push   esi
c00066df:	51                   	push   ecx
c00066e0:	52                   	push   edx
c00066e1:	55                   	push   ebp
c00066e2:	e8 59 9f ff ff       	call   c0000640 <strncpy>
c00066e7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066ef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066f2:	c6 84 07 18 02 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdfde8],0x0
c00066fa:	e8 ac fe ff ff       	call   c00065ab <fn_postprocess>
c00066ff:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c0006703:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c0006706:	83 c4 10             	add    esp,0x10
c0006709:	29 c6                	sub    esi,eax
c000670b:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c000670f:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006713:	74 05                	je     c000671a <iso_readdir+0x149>
c0006715:	83 ee 21             	sub    esi,0x21
c0006718:	eb 04                	jmp    c000671e <iso_readdir+0x14d>
c000671a:	47                   	inc    edi
c000671b:	83 ee 22             	sub    esi,0x22
c000671e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006726:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000672a:	83 fe 03             	cmp    esi,0x3
c000672d:	7e 4d                	jle    c000677c <iso_readdir+0x1ab>
c000672f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006732:	48                   	dec    eax
c0006733:	3c 01                	cmp    al,0x1
c0006735:	77 45                	ja     c000677c <iso_readdir+0x1ab>
c0006737:	52                   	push   edx
c0006738:	6a 02                	push   0x2
c000673a:	68 20 d4 01 c0       	push   0xc001d420
c000673f:	57                   	push   edi
c0006740:	e8 2b a0 ff ff       	call   c0000770 <strncmp>
c0006745:	83 c4 10             	add    esp,0x10
c0006748:	85 c0                	test   eax,eax
c000674a:	75 26                	jne    c0006772 <iso_readdir+0x1a1>
c000674c:	50                   	push   eax
c000674d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006751:	83 e8 05             	sub    eax,0x5
c0006754:	50                   	push   eax
c0006755:	8d 47 05             	lea    eax,[edi+0x5]
c0006758:	50                   	push   eax
c0006759:	55                   	push   ebp
c000675a:	e8 e1 9e ff ff       	call   c0000640 <strncpy>
c000675f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006763:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006767:	83 c4 10             	add    esp,0x10
c000676a:	c6 84 08 13 02 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdfded],0x0
c0006772:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006776:	29 c6                	sub    esi,eax
c0006778:	01 c7                	add    edi,eax
c000677a:	eb ae                	jmp    c000672a <iso_readdir+0x159>
c000677c:	83 c8 ff             	or     eax,0xffffffff
c000677f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006783:	89 c2                	mov    edx,eax
c0006785:	75 0a                	jne    c0006791 <iso_readdir+0x1c0>
c0006787:	8d 43 0a             	lea    eax,[ebx+0xa]
c000678a:	e8 94 f6 ff ff       	call   c0005e23 <iso_733>
c000678f:	31 d2                	xor    edx,edx
c0006791:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006799:	89 81 10 02 02 c0    	mov    DWORD PTR [ecx-0x3ffdfdf0],eax
c000679f:	89 91 14 02 02 c0    	mov    DWORD PTR [ecx-0x3ffdfdec],edx
c00067a5:	81 c1 00 02 02 c0    	add    ecx,0xc0020200
c00067ab:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c00067ae:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b5:	05 10 02 02 c0       	add    eax,0xc0020210
c00067ba:	83 c4 1c             	add    esp,0x1c
c00067bd:	5b                   	pop    ebx
c00067be:	5e                   	pop    esi
c00067bf:	5f                   	pop    edi
c00067c0:	5d                   	pop    ebp
c00067c1:	c3                   	ret    

c00067c2 <iso_reset>:
c00067c2:	e8 9f f6 ff ff       	call   c0005e66 <iso_break_all>
c00067c7:	e8 98 f6 ff ff       	call   c0005e64 <bclear>
c00067cc:	31 c0                	xor    eax,eax
c00067ce:	c3                   	ret    

c00067cf <init_percd>:
c00067cf:	57                   	push   edi
c00067d0:	56                   	push   esi
c00067d1:	53                   	push   ebx
c00067d2:	bb 01 00 00 00       	mov    ebx,0x1
c00067d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067db:	a2 20 fd 01 c0       	mov    ds:0xc001fd20,al
c00067e0:	e8 dd ff ff ff       	call   c00067c2 <iso_reset>
c00067e5:	c7 05 74 0b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020b74,0x0
c00067ef:	a1 6c 0b 02 c0       	mov    eax,ds:0xc0020b6c
c00067f4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067f8:	e8 ff f7 ff ff       	call   c0005ffc <biread>
c00067fd:	89 c6                	mov    esi,eax
c00067ff:	85 c0                	test   eax,eax
c0006801:	0f 88 ba 00 00 00    	js     c00068c1 <init_percd+0xf2>
c0006807:	8b 04 85 40 fd 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe02c0]
c000680e:	83 c0 04             	add    eax,0x4
c0006811:	52                   	push   edx
c0006812:	6a 06                	push   0x6
c0006814:	68 23 d4 01 c0       	push   0xc001d423
c0006819:	50                   	push   eax
c000681a:	e8 81 9b ff ff       	call   c00003a0 <memcmp>
c000681f:	83 c4 10             	add    esp,0x10
c0006822:	85 c0                	test   eax,eax
c0006824:	74 08                	je     c000682e <init_percd+0x5f>
c0006826:	43                   	inc    ebx
c0006827:	83 fb 04             	cmp    ebx,0x4
c000682a:	75 c3                	jne    c00067ef <init_percd+0x20>
c000682c:	eb 1a                	jmp    c0006848 <init_percd+0x79>
c000682e:	8b 04 b5 40 fd 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe02c0]
c0006835:	83 c0 5c             	add    eax,0x5c
c0006838:	e8 b7 f5 ff ff       	call   c0005df4 <isjoliet>
c000683d:	a3 74 0b 02 c0       	mov    ds:0xc0020b74,eax
c0006842:	85 c0                	test   eax,eax
c0006844:	74 e0                	je     c0006826 <init_percd+0x57>
c0006846:	eb 3e                	jmp    c0006886 <init_percd+0xb7>
c0006848:	83 3d 74 0b 02 c0 00 	cmp    DWORD PTR ds:0xc0020b74,0x0
c000684f:	75 35                	jne    c0006886 <init_percd+0xb7>
c0006851:	a1 6c 0b 02 c0       	mov    eax,ds:0xc0020b6c
c0006856:	83 c0 10             	add    eax,0x10
c0006859:	e8 9e f7 ff ff       	call   c0005ffc <biread>
c000685e:	89 c6                	mov    esi,eax
c0006860:	85 c0                	test   eax,eax
c0006862:	78 5f                	js     c00068c3 <init_percd+0xf4>
c0006864:	83 cb ff             	or     ebx,0xffffffff
c0006867:	50                   	push   eax
c0006868:	8b 04 b5 40 fd 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe02c0]
c000686f:	6a 06                	push   0x6
c0006871:	83 c0 04             	add    eax,0x4
c0006874:	68 2a d4 01 c0       	push   0xc001d42a
c0006879:	50                   	push   eax
c000687a:	e8 21 9b ff ff       	call   c00003a0 <memcmp>
c000687f:	83 c4 10             	add    esp,0x10
c0006882:	85 c0                	test   eax,eax
c0006884:	75 3d                	jne    c00068c3 <init_percd+0xf4>
c0006886:	8b 34 b5 40 fd 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe02c0]
c000688d:	bf 40 0b 02 c0       	mov    edi,0xc0020b40
c0006892:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006898:	b9 22 00 00 00       	mov    ecx,0x22
c000689d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000689f:	b8 42 0b 02 c0       	mov    eax,0xc0020b42
c00068a4:	31 db                	xor    ebx,ebx
c00068a6:	e8 78 f5 ff ff       	call   c0005e23 <iso_733>
c00068ab:	a3 68 0b 02 c0       	mov    ds:0xc0020b68,eax
c00068b0:	b8 4a 0b 02 c0       	mov    eax,0xc0020b4a
c00068b5:	e8 69 f5 ff ff       	call   c0005e23 <iso_733>
c00068ba:	a3 64 0b 02 c0       	mov    ds:0xc0020b64,eax
c00068bf:	eb 02                	jmp    c00068c3 <init_percd+0xf4>
c00068c1:	89 c3                	mov    ebx,eax
c00068c3:	89 d8                	mov    eax,ebx
c00068c5:	5b                   	pop    ebx
c00068c6:	5e                   	pop    esi
c00068c7:	5f                   	pop    edi
c00068c8:	c3                   	ret    

c00068c9 <iso_ioctl>:
c00068c9:	e8 f4 fe ff ff       	call   c00067c2 <iso_reset>
c00068ce:	31 c0                	xor    eax,eax
c00068d0:	c3                   	ret    

c00068d1 <fs_iso9660_init>:
c00068d1:	53                   	push   ebx
c00068d2:	31 db                	xor    ebx,ebx
c00068d4:	83 ec 0c             	sub    esp,0xc
c00068d7:	68 40 09 00 00       	push   0x940
c00068dc:	6a 00                	push   0x0
c00068de:	68 00 02 02 c0       	push   0xc0020200
c00068e3:	e8 f8 9b ff ff       	call   c00004e0 <memset>
c00068e8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068ef:	c7 05 00 02 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0020200,0xffffffff
c00068f9:	e8 cb 0e 00 00       	call   c00077c9 <malloc>
c00068fe:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006905:	a3 70 0b 02 c0       	mov    ds:0xc0020b70,eax
c000690a:	e8 ba 0e 00 00       	call   c00077c9 <malloc>
c000690f:	83 c4 10             	add    esp,0x10
c0006912:	a3 e0 01 02 c0       	mov    ds:0xc00201e0,eax
c0006917:	83 ec 0c             	sub    esp,0xc
c000691a:	68 04 08 00 00       	push   0x804
c000691f:	e8 a5 0e 00 00       	call   c00077c9 <malloc>
c0006924:	89 04 9d 40 fd 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe02c0],eax
c000692b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006931:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006938:	e8 8c 0e 00 00       	call   c00077c9 <malloc>
c000693d:	83 c4 10             	add    esp,0x10
c0006940:	89 04 9d e0 fc 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0320],eax
c0006947:	43                   	inc    ebx
c0006948:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000694e:	83 fb 10             	cmp    ebx,0x10
c0006951:	75 c4                	jne    c0006917 <fs_iso9660_init+0x46>
c0006953:	31 c0                	xor    eax,eax
c0006955:	83 c4 08             	add    esp,0x8
c0006958:	5b                   	pop    ebx
c0006959:	c3                   	ret    

c000695a <fs_iso9660_shutdown>:
c000695a:	53                   	push   ebx
c000695b:	31 db                	xor    ebx,ebx
c000695d:	83 ec 08             	sub    esp,0x8
c0006960:	83 ec 0c             	sub    esp,0xc
c0006963:	ff 34 9d 40 fd 01 c0 	push   DWORD PTR [ebx*4-0x3ffe02c0]
c000696a:	e8 6a 0e 00 00       	call   c00077d9 <free>
c000696f:	58                   	pop    eax
c0006970:	ff 34 9d e0 fc 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0320]
c0006977:	43                   	inc    ebx
c0006978:	e8 5c 0e 00 00       	call   c00077d9 <free>
c000697d:	83 c4 10             	add    esp,0x10
c0006980:	83 fb 10             	cmp    ebx,0x10
c0006983:	75 db                	jne    c0006960 <fs_iso9660_shutdown+0x6>
c0006985:	a1 70 0b 02 c0       	mov    eax,ds:0xc0020b70
c000698a:	85 c0                	test   eax,eax
c000698c:	74 0c                	je     c000699a <fs_iso9660_shutdown+0x40>
c000698e:	83 ec 0c             	sub    esp,0xc
c0006991:	50                   	push   eax
c0006992:	e8 42 0e 00 00       	call   c00077d9 <free>
c0006997:	83 c4 10             	add    esp,0x10
c000699a:	a1 e0 01 02 c0       	mov    eax,ds:0xc00201e0
c000699f:	85 c0                	test   eax,eax
c00069a1:	74 0c                	je     c00069af <fs_iso9660_shutdown+0x55>
c00069a3:	83 ec 0c             	sub    esp,0xc
c00069a6:	50                   	push   eax
c00069a7:	e8 2d 0e 00 00       	call   c00077d9 <free>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	c7 05 e0 01 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00201e0,0x0
c00069b9:	c7 05 70 0b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020b70,0x0
c00069c3:	31 c0                	xor    eax,eax
c00069c5:	83 c4 08             	add    esp,0x8
c00069c8:	5b                   	pop    ebx
c00069c9:	c3                   	ret    

c00069ca <Computer::close(int, int, void*)>:
c00069ca:	57                   	push   edi
c00069cb:	56                   	push   esi
c00069cc:	53                   	push   ebx
c00069cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069d5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069d9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069df:	83 ec 0c             	sub    esp,0xc
c00069e2:	50                   	push   eax
c00069e3:	e8 5e 50 00 00       	call   c000ba46 <Device::closeAll()>
c00069e8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069ee:	83 c4 10             	add    esp,0x10
c00069f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069f3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069f7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ff:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006a03:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006a07:	5b                   	pop    ebx
c0006a08:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006a0b:	5e                   	pop    esi
c0006a0c:	5f                   	pop    edi
c0006a0d:	ff e0                	jmp    eax

c0006a0f <Krnl::firstTask()>:
c0006a0f:	53                   	push   ebx
c0006a10:	83 ec 14             	sub    esp,0x14
c0006a13:	fb                   	sti    
c0006a14:	68 31 d4 01 c0       	push   0xc001d431
c0006a19:	e8 d5 90 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c0006a1e:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006a25:	e8 9f 0d 00 00       	call   c00077c9 <malloc>
c0006a2a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a31:	89 c3                	mov    ebx,eax
c0006a33:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c0006a38:	50                   	push   eax
c0006a39:	68 4a d4 01 c0       	push   0xc001d44a
c0006a3e:	6a 01                	push   0x1
c0006a40:	53                   	push   ebx
c0006a41:	e8 2e c9 00 00       	call   c0013374 <Process::Process(bool, char const*, Process*, char**)>
c0006a46:	83 c4 20             	add    esp,0x20
c0006a49:	68 ff 00 00 00       	push   0xff
c0006a4e:	6a 00                	push   0x0
c0006a50:	68 1f 72 00 c0       	push   0xc000721f
c0006a55:	53                   	push   ebx
c0006a56:	e8 41 cb 00 00       	call   c001359c <Process::createThread(void (*)(void*), void*, int)>
c0006a5b:	8b 15 50 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e50
c0006a61:	6a 7a                	push   0x7a
c0006a63:	6a 00                	push   0x0
c0006a65:	68 f0 3f 01 c0       	push   0xc0013ff0
c0006a6a:	52                   	push   edx
c0006a6b:	e8 2c cb 00 00       	call   c001359c <Process::createThread(void (*)(void*), void*, int)>
c0006a70:	83 c4 14             	add    esp,0x14
c0006a73:	a3 08 3e 02 c0       	mov    ds:0xc0023e08,eax
c0006a78:	68 48 d5 01 c0       	push   0xc001d548
c0006a7d:	c6 05 7d 0b 02 c0 01 	mov    BYTE PTR ds:0xc0020b7d,0x1
c0006a84:	e8 6a 90 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c0006a89:	e8 41 d9 00 00       	call   c00143cf <Vm::initialise8086()>
c0006a8e:	e8 f7 3d 00 00       	call   c000a88a <Fs::initVFS()>
c0006a93:	c7 04 24 57 d4 01 c0 	mov    DWORD PTR [esp],0xc001d457
c0006a9a:	e8 54 90 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c0006a9f:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0006aa4:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006aaa:	8b 10                	mov    edx,DWORD PTR [eax]
c0006aac:	6a 00                	push   0x0
c0006aae:	6a 00                	push   0x0
c0006ab0:	6a 00                	push   0x0
c0006ab2:	50                   	push   eax
c0006ab3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006ab6:	83 c4 14             	add    esp,0x14
c0006ab9:	68 48 d5 01 c0       	push   0xc001d548
c0006abe:	e8 30 90 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c0006ac3:	e8 06 95 00 00       	call   c000ffce <Krnl::loadSystemEnv()>
c0006ac8:	e8 63 97 00 00       	call   c0010230 <Krnl::setupPowerManager()>
c0006acd:	83 c4 0c             	add    esp,0xc
c0006ad0:	6a 3a                	push   0x3a
c0006ad2:	68 71 d4 01 c0       	push   0xc001d471
c0006ad7:	68 7a d4 01 c0       	push   0xc001d47a
c0006adc:	e8 2a ae 00 00       	call   c001190b <Reg::readIntWithDefault(char*, char*, int)>
c0006ae1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ae4:	e8 af 48 00 00       	call   c000b398 <User::loadClockSettings(int)>
c0006ae9:	c7 04 24 6c d5 01 c0 	mov    DWORD PTR [esp],0xc001d56c
c0006af0:	e8 fe 8f 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c0006af5:	59                   	pop    ecx
c0006af6:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0006afb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006b01:	53                   	push   ebx
c0006b02:	e8 3d 4f 00 00       	call   c000ba44 <Device::loadDriversForAll()>
c0006b07:	c7 04 24 82 d4 01 c0 	mov    DWORD PTR [esp],0xc001d482
c0006b0e:	e8 e0 8f 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c0006b13:	58                   	pop    eax
c0006b14:	8b 1d 78 0b 02 c0    	mov    ebx,DWORD PTR ds:0xc0020b78
c0006b1a:	5a                   	pop    edx
c0006b1b:	6a 01                	push   0x1
c0006b1d:	68 93 d4 01 c0       	push   0xc001d493
c0006b22:	e8 6b c2 00 00       	call   c0012d92 <Thr::loadDLL(char const*, bool)>
c0006b27:	59                   	pop    ecx
c0006b28:	5a                   	pop    edx
c0006b29:	53                   	push   ebx
c0006b2a:	50                   	push   eax
c0006b2b:	e8 93 c4 00 00       	call   c0012fc3 <Thr::executeDLL(unsigned long, void*)>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	83 ec 0c             	sub    esp,0xc
c0006b36:	6a 02                	push   0x2
c0006b38:	e8 7b ce 00 00       	call   c00139b8 <blockTask(TaskState)>
c0006b3d:	83 c4 10             	add    esp,0x10
c0006b40:	eb f1                	jmp    c0006b33 <Krnl::firstTask()+0x124>

c0006b42 <Computer::Computer()>:
c0006b42:	83 ec 0c             	sub    esp,0xc
c0006b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b49:	83 ec 08             	sub    esp,0x8
c0006b4c:	68 af d4 01 c0       	push   0xc001d4af
c0006b51:	50                   	push   eax
c0006b52:	e8 69 4f 00 00       	call   c000bac0 <Device::Device(char const*)>
c0006b57:	83 c4 10             	add    esp,0x10
c0006b5a:	ba b8 d5 01 c0       	mov    edx,0xc001d5b8
c0006b5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b63:	89 10                	mov    DWORD PTR [eax],edx
c0006b65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b69:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b77:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b85:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b8b:	83 ca 04             	or     edx,0x4
c0006b8e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b98:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b9e:	31 d2                	xor    edx,edx
c0006ba0:	88 c2                	mov    dl,al
c0006ba2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba6:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006bad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bb7:	31 d2                	xor    edx,edx
c0006bb9:	88 c2                	mov    dl,al
c0006bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bbf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bce:	8d 50 01             	lea    edx,[eax+0x1]
c0006bd1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bd5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bdb:	31 d2                	xor    edx,edx
c0006bdd:	88 c2                	mov    dl,al
c0006bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006be3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006be7:	83 e1 3f             	and    ecx,0x3f
c0006bea:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bee:	90                   	nop
c0006bef:	83 c4 0c             	add    esp,0xc
c0006bf2:	c3                   	ret    
c0006bf3:	90                   	nop

c0006bf4 <Computer::setBootMessage(char const*)>:
c0006bf4:	c3                   	ret    
c0006bf5:	90                   	nop

c0006bf6 <Computer::detectFeatures()>:
c0006bf6:	55                   	push   ebp
c0006bf7:	57                   	push   edi
c0006bf8:	56                   	push   esi
c0006bf9:	53                   	push   ebx
c0006bfa:	83 ec 1c             	sub    esp,0x1c
c0006bfd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006c01:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006c0b:	e8 e9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c10:	85 c0                	test   eax,eax
c0006c12:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c18:	0f 95 c2             	setne  dl
c0006c1b:	83 e0 fd             	and    eax,0xfffffffd
c0006c1e:	01 d2                	add    edx,edx
c0006c20:	09 d0                	or     eax,edx
c0006c22:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c28:	a8 02                	test   al,0x2
c0006c2a:	75 46                	jne    c0006c72 <Computer::detectFeatures()+0x7c>
c0006c2c:	f6 05 91 0b 02 c0 04 	test   BYTE PTR ds:0xc0020b91,0x4
c0006c33:	74 07                	je     c0006c3c <Computer::detectFeatures()+0x46>
c0006c35:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c3c:	e8 45 51 01 00       	call   c001bd86 <x87Detect>
c0006c41:	83 e0 01             	and    eax,0x1
c0006c44:	c1 e0 04             	shl    eax,0x4
c0006c47:	88 c2                	mov    dl,al
c0006c49:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c4f:	83 e0 ef             	and    eax,0xffffffef
c0006c52:	09 d0                	or     eax,edx
c0006c54:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c5a:	a8 10                	test   al,0x10
c0006c5c:	0f 85 2a 01 00 00    	jne    c0006d8c <Computer::detectFeatures()+0x196>
c0006c62:	84 c0                	test   al,al
c0006c64:	0f 88 45 01 00 00    	js     c0006daf <Computer::detectFeatures()+0x1b9>
c0006c6a:	83 c4 1c             	add    esp,0x1c
c0006c6d:	5b                   	pop    ebx
c0006c6e:	5e                   	pop    esi
c0006c6f:	5f                   	pop    edi
c0006c70:	5d                   	pop    ebp
c0006c71:	c3                   	ret    
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	6a 20                	push   0x20
c0006c77:	e8 a4 83 00 00       	call   c000f020 <CPU::cpuidCheckEDX(unsigned int)>
c0006c7c:	83 e0 01             	and    eax,0x1
c0006c7f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c86:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c8c:	83 e0 f7             	and    eax,0xfffffff7
c0006c8f:	09 d0                	or     eax,edx
c0006c91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c97:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c9e:	e8 7d 83 00 00       	call   c000f020 <CPU::cpuidCheckEDX(unsigned int)>
c0006ca3:	83 e0 01             	and    eax,0x1
c0006ca6:	88 c2                	mov    dl,al
c0006ca8:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cae:	83 e0 fe             	and    eax,0xfffffffe
c0006cb1:	09 d0                	or     eax,edx
c0006cb3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006cb9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cc0:	e8 5b 83 00 00       	call   c000f020 <CPU::cpuidCheckEDX(unsigned int)>
c0006cc5:	c1 e0 07             	shl    eax,0x7
c0006cc8:	88 c2                	mov    dl,al
c0006cca:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cd0:	83 e0 7f             	and    eax,0x7f
c0006cd3:	09 d0                	or     eax,edx
c0006cd5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006cdb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006ce2:	e8 39 83 00 00       	call   c000f020 <CPU::cpuidCheckEDX(unsigned int)>
c0006ce7:	83 c4 10             	add    esp,0x10
c0006cea:	83 e0 01             	and    eax,0x1
c0006ced:	c1 e0 05             	shl    eax,0x5
c0006cf0:	88 c2                	mov    dl,al
c0006cf2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cf8:	83 e0 df             	and    eax,0xffffffdf
c0006cfb:	09 d0                	or     eax,edx
c0006cfd:	f7 05 90 0b 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0020b90,0x401
c0006d07:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0d:	0f 84 c2 00 00 00    	je     c0006dd5 <Computer::detectFeatures()+0x1df>
c0006d13:	83 e0 fe             	and    eax,0xfffffffe
c0006d16:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d1c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d22:	88 c2                	mov    dl,al
c0006d24:	83 e2 09             	and    edx,0x9
c0006d27:	fe ca                	dec    dl
c0006d29:	75 09                	jne    c0006d34 <Computer::detectFeatures()+0x13e>
c0006d2b:	83 e0 fe             	and    eax,0xfffffffe
c0006d2e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d34:	83 ec 0c             	sub    esp,0xc
c0006d37:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d3b:	50                   	push   eax
c0006d3c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d40:	55                   	push   ebp
c0006d41:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d45:	57                   	push   edi
c0006d46:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d4a:	56                   	push   esi
c0006d4b:	68 00 00 00 80       	push   0x80000000
c0006d50:	e8 47 82 00 00       	call   c000ef9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d55:	83 c4 20             	add    esp,0x20
c0006d58:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d5f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d63:	0f 86 c3 fe ff ff    	jbe    c0006c2c <Computer::detectFeatures()+0x36>
c0006d69:	83 ec 0c             	sub    esp,0xc
c0006d6c:	50                   	push   eax
c0006d6d:	55                   	push   ebp
c0006d6e:	57                   	push   edi
c0006d6f:	56                   	push   esi
c0006d70:	68 01 00 00 80       	push   0x80000001
c0006d75:	e8 22 82 00 00       	call   c000ef9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d7a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d84:	83 c4 20             	add    esp,0x20
c0006d87:	e9 a0 fe ff ff       	jmp    c0006c2c <Computer::detectFeatures()+0x36>
c0006d8c:	e8 af 4f 01 00       	call   c001bd40 <absolutelyNoChanceInHell>
c0006d91:	88 c2                	mov    dl,al
c0006d93:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d99:	c1 e2 07             	shl    edx,0x7
c0006d9c:	83 e0 7f             	and    eax,0x7f
c0006d9f:	09 d0                	or     eax,edx
c0006da1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006da7:	84 c0                	test   al,al
c0006da9:	0f 89 bb fe ff ff    	jns    c0006c6a <Computer::detectFeatures()+0x74>
c0006daf:	e8 0c 4d 01 00       	call   c001bac0 <avxDetect>
c0006db4:	83 e0 01             	and    eax,0x1
c0006db7:	c1 e0 05             	shl    eax,0x5
c0006dba:	88 c2                	mov    dl,al
c0006dbc:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006dc2:	83 e0 df             	and    eax,0xffffffdf
c0006dc5:	09 d0                	or     eax,edx
c0006dc7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dcd:	83 c4 1c             	add    esp,0x1c
c0006dd0:	5b                   	pop    ebx
c0006dd1:	5e                   	pop    esi
c0006dd2:	5f                   	pop    edi
c0006dd3:	5d                   	pop    ebp
c0006dd4:	c3                   	ret    
c0006dd5:	83 ec 0c             	sub    esp,0xc
c0006dd8:	68 00 02 00 00       	push   0x200
c0006ddd:	e8 3e 82 00 00       	call   c000f020 <CPU::cpuidCheckEDX(unsigned int)>
c0006de2:	83 c4 10             	add    esp,0x10
c0006de5:	83 e0 01             	and    eax,0x1
c0006de8:	88 c2                	mov    dl,al
c0006dea:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006df0:	83 e0 fe             	and    eax,0xfffffffe
c0006df3:	09 d0                	or     eax,edx
c0006df5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dfb:	e9 1c ff ff ff       	jmp    c0006d1c <Computer::detectFeatures()+0x126>

c0006e00 <Computer::displayFeatures()>:
c0006e00:	c3                   	ret    
c0006e01:	90                   	nop

c0006e02 <Computer::rdmsr(unsigned int)>:
c0006e02:	83 ec 0c             	sub    esp,0xc
c0006e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e09:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e10:	74 0a                	je     c0006e1c <Computer::rdmsr(unsigned int)+0x1a>
c0006e12:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e16:	0f 32                	rdmsr  
c0006e18:	83 c4 0c             	add    esp,0xc
c0006e1b:	c3                   	ret    
c0006e1c:	83 ec 0c             	sub    esp,0xc
c0006e1f:	68 b8 d4 01 c0       	push   0xc001d4b8
c0006e24:	e8 42 93 00 00       	call   c001016b <KePanic(char const*)>
c0006e29:	83 c4 10             	add    esp,0x10
c0006e2c:	eb e4                	jmp    c0006e12 <Computer::rdmsr(unsigned int)+0x10>

c0006e2e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e2e:	57                   	push   edi
c0006e2f:	56                   	push   esi
c0006e30:	52                   	push   edx
c0006e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e35:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e39:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e3d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e44:	74 0e                	je     c0006e54 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e46:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e4a:	89 f0                	mov    eax,esi
c0006e4c:	89 fa                	mov    edx,edi
c0006e4e:	0f 30                	wrmsr  
c0006e50:	58                   	pop    eax
c0006e51:	5e                   	pop    esi
c0006e52:	5f                   	pop    edi
c0006e53:	c3                   	ret    
c0006e54:	83 ec 0c             	sub    esp,0xc
c0006e57:	68 be d4 01 c0       	push   0xc001d4be
c0006e5c:	e8 0a 93 00 00       	call   c001016b <KePanic(char const*)>
c0006e61:	83 c4 10             	add    esp,0x10
c0006e64:	eb e0                	jmp    c0006e46 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e66 <Computer::shutdown()>:
c0006e66:	83 ec 0c             	sub    esp,0xc
c0006e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e6f:	6a 00                	push   0x0
c0006e71:	6a 00                	push   0x0
c0006e73:	6a 00                	push   0x0
c0006e75:	50                   	push   eax
c0006e76:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e79:	83 c4 1c             	add    esp,0x1c
c0006e7c:	c3                   	ret    
c0006e7d:	90                   	nop

c0006e7e <Computer::restart()>:
c0006e7e:	83 ec 0c             	sub    esp,0xc
c0006e81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e85:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e87:	6a 00                	push   0x0
c0006e89:	6a 00                	push   0x0
c0006e8b:	6a 01                	push   0x1
c0006e8d:	50                   	push   eax
c0006e8e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e91:	83 c4 1c             	add    esp,0x1c
c0006e94:	c3                   	ret    
c0006e95:	90                   	nop

c0006e96 <Computer::sleep()>:
c0006e96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006ea0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006ea4:	e9 ef 7b 00 00       	jmp    c000ea98 <ACPI::sleep()>
c0006ea9:	90                   	nop

c0006eaa <Computer::nmiEnabled()>:
c0006eaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eae:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006eb4:	c3                   	ret    
c0006eb5:	90                   	nop

c0006eb6 <Computer::readCMOS(unsigned char)>:
c0006eb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eba:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006ec1:	19 c0                	sbb    eax,eax
c0006ec3:	83 e0 80             	and    eax,0xffffff80
c0006ec6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eca:	e6 70                	out    0x70,al
c0006ecc:	e4 71                	in     al,0x71
c0006ece:	c3                   	ret    
c0006ecf:	90                   	nop

c0006ed0 <Computer::enableNMI(bool)>:
c0006ed0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ed4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ed8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ede:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ee6:	eb ce                	jmp    c0006eb6 <Computer::readCMOS(unsigned char)>

c0006ee8 <Computer::open(int, int, void*)>:
c0006ee8:	56                   	push   esi
c0006ee9:	53                   	push   ebx
c0006eea:	83 ec 10             	sub    esp,0x10
c0006eed:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ef1:	f6 05 90 0b 02 c0 04 	test   BYTE PTR ds:0xc0020b90,0x4
c0006ef8:	68 c4 d4 01 c0       	push   0xc001d4c4
c0006efd:	0f 94 05 c0 f7 01 c0 	sete   BYTE PTR ds:0xc001f7c0
c0006f04:	e8 ea 8b 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c0006f09:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f10:	e8 b4 08 00 00       	call   c00077c9 <malloc>
c0006f15:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f18:	89 c6                	mov    esi,eax
c0006f1a:	e8 11 77 00 00       	call   c000e630 <ACPI::ACPI()>
c0006f1f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f25:	58                   	pop    eax
c0006f26:	5a                   	pop    edx
c0006f27:	56                   	push   esi
c0006f28:	53                   	push   ebx
c0006f29:	e8 fa 49 00 00       	call   c000b928 <Device::addChild(Device*)>
c0006f2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f31:	e8 c0 fc ff ff       	call   c0006bf6 <Computer::detectFeatures()>
c0006f36:	59                   	pop    ecx
c0006f37:	5e                   	pop    esi
c0006f38:	6a 01                	push   0x1
c0006f3a:	53                   	push   ebx
c0006f3b:	e8 90 ff ff ff       	call   c0006ed0 <Computer::enableNMI(bool)>
c0006f40:	c7 04 24 dc d4 01 c0 	mov    DWORD PTR [esp],0xc001d4dc
c0006f47:	e8 a7 8b 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c0006f4c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f53:	e8 71 08 00 00       	call   c00077c9 <malloc>
c0006f58:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f5b:	89 c6                	mov    esi,eax
c0006f5d:	e8 76 81 00 00       	call   c000f0d8 <CPU::CPU()>
c0006f62:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f68:	58                   	pop    eax
c0006f69:	5a                   	pop    edx
c0006f6a:	56                   	push   esi
c0006f6b:	53                   	push   ebx
c0006f6c:	e8 b7 49 00 00       	call   c000b928 <Device::addChild(Device*)>
c0006f71:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f77:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f7d:	51                   	push   ecx
c0006f7e:	6a 00                	push   0x0
c0006f80:	6a 00                	push   0x0
c0006f82:	50                   	push   eax
c0006f83:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f86:	83 c4 14             	add    esp,0x14
c0006f89:	68 8c d5 01 c0       	push   0xc001d58c
c0006f8e:	e8 60 8b 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c0006f93:	e8 6e e5 00 00       	call   c0015506 <HalInitialiseCoprocessor()>
c0006f98:	c7 04 24 f6 d4 01 c0 	mov    DWORD PTR [esp],0xc001d4f6
c0006f9f:	e8 4f 8b 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c0006fa4:	c7 04 24 0f 6a 00 c0 	mov    DWORD PTR [esp],0xc0006a0f
c0006fab:	e8 04 c7 00 00       	call   c00136b4 <setupMultitasking(void (*)())>
c0006fb0:	83 c4 14             	add    esp,0x14
c0006fb3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fb8:	5b                   	pop    ebx
c0006fb9:	5e                   	pop    esi
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::disableNMI()>:
c0006fbc:	6a 00                	push   0x0
c0006fbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fc2:	50                   	push   eax
c0006fc3:	e8 08 ff ff ff       	call   c0006ed0 <Computer::enableNMI(bool)>
c0006fc8:	5a                   	pop    edx
c0006fc9:	59                   	pop    ecx
c0006fca:	c3                   	ret    
c0006fcb:	90                   	nop

c0006fcc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fd0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fd7:	19 c0                	sbb    eax,eax
c0006fd9:	83 e0 80             	and    eax,0xffffff80
c0006fdc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fe0:	e6 70                	out    0x70,al
c0006fe2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fe6:	e6 71                	out    0x71,al
c0006fe8:	c3                   	ret    
c0006fe9:	90                   	nop

c0006fea <Computer::handleNMI()>:
c0006fea:	56                   	push   esi
c0006feb:	53                   	push   ebx
c0006fec:	83 ec 10             	sub    esp,0x10
c0006fef:	e4 92                	in     al,0x92
c0006ff1:	89 c6                	mov    esi,eax
c0006ff3:	e4 61                	in     al,0x61
c0006ff5:	68 11 d5 01 c0       	push   0xc001d511
c0006ffa:	88 c3                	mov    bl,al
c0006ffc:	e8 e7 34 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0007001:	83 c4 10             	add    esp,0x10
c0007004:	83 e6 10             	and    esi,0x10
c0007007:	75 0d                	jne    c0007016 <Computer::handleNMI()+0x2c>
c0007009:	f6 c3 40             	test   bl,0x40
c000700c:	75 1d                	jne    c000702b <Computer::handleNMI()+0x41>
c000700e:	84 db                	test   bl,bl
c0007010:	78 2d                	js     c000703f <Computer::handleNMI()+0x55>
c0007012:	58                   	pop    eax
c0007013:	5b                   	pop    ebx
c0007014:	5e                   	pop    esi
c0007015:	c3                   	ret    
c0007016:	83 ec 0c             	sub    esp,0xc
c0007019:	68 22 d5 01 c0       	push   0xc001d522
c000701e:	e8 48 91 00 00       	call   c001016b <KePanic(char const*)>
c0007023:	83 c4 10             	add    esp,0x10
c0007026:	f6 c3 40             	test   bl,0x40
c0007029:	74 e3                	je     c000700e <Computer::handleNMI()+0x24>
c000702b:	83 ec 0c             	sub    esp,0xc
c000702e:	68 2f d5 01 c0       	push   0xc001d52f
c0007033:	e8 33 91 00 00       	call   c001016b <KePanic(char const*)>
c0007038:	83 c4 10             	add    esp,0x10
c000703b:	84 db                	test   bl,bl
c000703d:	79 d3                	jns    c0007012 <Computer::handleNMI()+0x28>
c000703f:	c7 44 24 10 39 d5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d539
c0007047:	5a                   	pop    edx
c0007048:	5b                   	pop    ebx
c0007049:	5e                   	pop    esi
c000704a:	e9 1c 91 00 00       	jmp    c001016b <KePanic(char const*)>
c000704f:	90                   	nop

c0007050 <GDTEntry::setBase(unsigned int)>:
c0007050:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007054:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007058:	89 c1                	mov    ecx,eax
c000705a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000705e:	c1 e9 10             	shr    ecx,0x10
c0007061:	c1 e8 18             	shr    eax,0x18
c0007064:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007067:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000706a:	c3                   	ret    
c000706b:	90                   	nop

c000706c <GDTEntry::setLimit(unsigned int)>:
c000706c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007070:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007074:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007077:	66 89 01             	mov    WORD PTR [ecx],ax
c000707a:	83 e2 f0             	and    edx,0xfffffff0
c000707d:	c1 e8 10             	shr    eax,0x10
c0007080:	83 e0 0f             	and    eax,0xf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007088:	c3                   	ret    
c0007089:	90                   	nop

c000708a <GDT::GDT()>:
c000708a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000708e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007094:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007098:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000709e:	90                   	nop
c000709f:	c3                   	ret    

c00070a0 <GDT::addEntry(GDTEntry)>:
c00070a0:	53                   	push   ebx
c00070a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070a5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00070a9:	8b 02                	mov    eax,DWORD PTR [edx]
c00070ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00070af:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070b3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070ba:	c1 e0 03             	shl    eax,0x3
c00070bd:	89 0a                	mov    DWORD PTR [edx],ecx
c00070bf:	5b                   	pop    ebx
c00070c0:	c3                   	ret    
c00070c1:	90                   	nop

c00070c2 <GDT::getNumberOfEntries()>:
c00070c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070c8:	c3                   	ret    
c00070c9:	90                   	nop

c00070ca <GDT::flush()>:
c00070ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00070d0:	83 c0 04             	add    eax,0x4
c00070d3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070da:	a3 82 0b 02 c0       	mov    ds:0xc0020b82,eax
c00070df:	66 89 15 80 0b 02 c0 	mov    WORD PTR ds:0xc0020b80,dx
c00070e6:	e9 85 92 ff ff       	jmp    c0000370 <loadGDT>
c00070eb:	90                   	nop

c00070ec <GDT::setup()>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	53                   	push   ebx
c00070ef:	83 ec 30             	sub    esp,0x30
c00070f2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070f6:	6a 00                	push   0x0
c00070f8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070fc:	56                   	push   esi
c00070fd:	e8 4e ff ff ff       	call   c0007050 <GDTEntry::setBase(unsigned int)>
c0007102:	6a 00                	push   0x0
c0007104:	56                   	push   esi
c0007105:	e8 62 ff ff ff       	call   c000706c <GDTEntry::setLimit(unsigned int)>
c000710a:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007112:	6a 00                	push   0x0
c0007114:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007118:	56                   	push   esi
c0007119:	e8 32 ff ff ff       	call   c0007050 <GDTEntry::setBase(unsigned int)>
c000711e:	68 ff ff ff 00       	push   0xffffff
c0007123:	56                   	push   esi
c0007124:	e8 43 ff ff ff       	call   c000706c <GDTEntry::setLimit(unsigned int)>
c0007129:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000712d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007131:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007135:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007139:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000713e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007143:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007147:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000714b:	89 f8                	mov    eax,edi
c000714d:	89 fa                	mov    edx,edi
c000714f:	80 e4 f7             	and    ah,0xf7
c0007152:	80 ce 60             	or     dh,0x60
c0007155:	89 c7                	mov    edi,eax
c0007157:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000715b:	80 cc 60             	or     ah,0x60
c000715e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007162:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007166:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000716a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000716e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007172:	83 c4 20             	add    esp,0x20
c0007175:	6a 00                	push   0x0
c0007177:	8d 44 24 24          	lea    eax,[esp+0x24]
c000717b:	50                   	push   eax
c000717c:	e8 cf fe ff ff       	call   c0007050 <GDTEntry::setBase(unsigned int)>
c0007181:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007185:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007189:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000718e:	6a 00                	push   0x0
c0007190:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007194:	50                   	push   eax
c0007195:	e8 b6 fe ff ff       	call   c0007050 <GDTEntry::setBase(unsigned int)>
c000719a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000719f:	83 c4 0c             	add    esp,0xc
c00071a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071aa:	53                   	push   ebx
c00071ab:	e8 f0 fe ff ff       	call   c00070a0 <GDT::addEntry(GDTEntry)>
c00071b0:	83 c4 0c             	add    esp,0xc
c00071b3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071bb:	53                   	push   ebx
c00071bc:	e8 df fe ff ff       	call   c00070a0 <GDT::addEntry(GDTEntry)>
c00071c1:	83 c4 0c             	add    esp,0xc
c00071c4:	57                   	push   edi
c00071c5:	56                   	push   esi
c00071c6:	53                   	push   ebx
c00071c7:	e8 d4 fe ff ff       	call   c00070a0 <GDT::addEntry(GDTEntry)>
c00071cc:	83 c4 0c             	add    esp,0xc
c00071cf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071d3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071d7:	53                   	push   ebx
c00071d8:	e8 c3 fe ff ff       	call   c00070a0 <GDT::addEntry(GDTEntry)>
c00071dd:	83 c4 0c             	add    esp,0xc
c00071e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071e8:	53                   	push   ebx
c00071e9:	e8 b2 fe ff ff       	call   c00070a0 <GDT::addEntry(GDTEntry)>
c00071ee:	83 c4 0c             	add    esp,0xc
c00071f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071f9:	53                   	push   ebx
c00071fa:	e8 a1 fe ff ff       	call   c00070a0 <GDT::addEntry(GDTEntry)>
c00071ff:	83 c4 0c             	add    esp,0xc
c0007202:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0007206:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000720a:	53                   	push   ebx
c000720b:	e8 90 fe ff ff       	call   c00070a0 <GDT::addEntry(GDTEntry)>
c0007210:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007213:	e8 b2 fe ff ff       	call   c00070ca <GDT::flush()>
c0007218:	83 c4 40             	add    esp,0x40
c000721b:	5b                   	pop    ebx
c000721c:	5e                   	pop    esi
c000721d:	5f                   	pop    edi
c000721e:	c3                   	ret    

c000721f <idleFunction(void*)>:
c000721f:	83 ec 0c             	sub    esp,0xc
c0007222:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0007227:	48                   	dec    eax
c0007228:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c000722d:	75 01                	jne    c0007230 <idleFunction(void*)+0x11>
c000722f:	fb                   	sti    
c0007230:	e8 ab df 00 00       	call   c00151e0 <HalSystemIdle()>
c0007235:	e8 08 51 01 00       	call   c001c342 <idleCommon()>
c000723a:	eb f4                	jmp    c0007230 <idleFunction(void*)+0x11>

c000723c <IDTEntry::IDTEntry(bool)>:
c000723c:	83 ec 04             	sub    esp,0x4
c000723f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007243:	88 04 24             	mov    BYTE PTR [esp],al
c0007246:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007250:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007254:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 f0             	and    edx,0xfffffff0
c0007262:	83 ca 0e             	or     edx,0xe
c0007265:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007268:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000726c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000726f:	83 e2 ef             	and    edx,0xffffffef
c0007272:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007275:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007279:	74 05                	je     c0007280 <IDTEntry::IDTEntry(bool)+0x44>
c000727b:	b2 03                	mov    dl,0x3
c000727d:	eb 05                	jmp    c0007284 <IDTEntry::IDTEntry(bool)+0x48>
c000727f:	90                   	nop
c0007280:	b2 00                	mov    dl,0x0
c0007282:	66 90                	xchg   ax,ax
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	83 e2 03             	and    edx,0x3
c000728b:	88 d1                	mov    cl,dl
c000728d:	c1 e1 05             	shl    ecx,0x5
c0007290:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007293:	83 e2 9f             	and    edx,0xffffff9f
c0007296:	09 ca                	or     edx,ecx
c0007298:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000729b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00072a2:	83 ca 80             	or     edx,0xffffff80
c00072a5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00072a8:	90                   	nop
c00072a9:	83 c4 04             	add    esp,0x4
c00072ac:	c3                   	ret    
c00072ad:	90                   	nop

c00072ae <IDTEntry::setOffset(unsigned int)>:
c00072ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072b6:	66 89 02             	mov    WORD PTR [edx],ax
c00072b9:	c1 e8 10             	shr    eax,0x10
c00072bc:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072c0:	c3                   	ret    
c00072c1:	90                   	nop
c00072c2:	66 90                	xchg   ax,ax

c00072c4 <IDT::IDT()>:
c00072c4:	90                   	nop
c00072c5:	c3                   	ret    

c00072c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ca:	83 c0 30             	add    eax,0x30
c00072cd:	c3                   	ret    

c00072ce <IDT::addEntry(IDTEntry, int)>:
c00072ce:	53                   	push   ebx
c00072cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072d7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072df:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072e2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072e6:	5b                   	pop    ebx
c00072e7:	c3                   	ret    

c00072e8 <IDT::addEntry(int, void (*)(), bool)>:
c00072e8:	53                   	push   ebx
c00072e9:	83 ec 10             	sub    esp,0x10
c00072ec:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072f1:	50                   	push   eax
c00072f2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072f6:	53                   	push   ebx
c00072f7:	e8 40 ff ff ff       	call   c000723c <IDTEntry::IDTEntry(bool)>
c00072fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007300:	53                   	push   ebx
c0007301:	e8 a8 ff ff ff       	call   c00072ae <IDTEntry::setOffset(unsigned int)>
c0007306:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000730a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007312:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007316:	e8 b3 ff ff ff       	call   c00072ce <IDT::addEntry(IDTEntry, int)>
c000731b:	83 c4 30             	add    esp,0x30
c000731e:	5b                   	pop    ebx
c000731f:	c3                   	ret    

c0007320 <IDT::flush()>:
c0007320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007324:	66 c7 05 88 0b 02 c0 ff 07 	mov    WORD PTR ds:0xc0020b88,0x7ff
c000732d:	a3 8a 0b 02 c0       	mov    ds:0xc0020b8a,eax
c0007332:	0f 01 1d 88 0b 02 c0 	lidtd  ds:0xc0020b88
c0007339:	c3                   	ret    

c000733a <IDT::setup()>:
c000733a:	57                   	push   edi
c000733b:	56                   	push   esi
c000733c:	53                   	push   ebx
c000733d:	83 ec 10             	sub    esp,0x10
c0007340:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007344:	6a 00                	push   0x0
c0007346:	68 50 bb 01 c0       	push   0xc001bb50
c000734b:	6a 00                	push   0x0
c000734d:	53                   	push   ebx
c000734e:	e8 95 ff ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007353:	6a 00                	push   0x0
c0007355:	68 60 bb 01 c0       	push   0xc001bb60
c000735a:	6a 01                	push   0x1
c000735c:	53                   	push   ebx
c000735d:	e8 86 ff ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007362:	83 c4 20             	add    esp,0x20
c0007365:	6a 00                	push   0x0
c0007367:	68 6a bb 01 c0       	push   0xc001bb6a
c000736c:	6a 02                	push   0x2
c000736e:	53                   	push   ebx
c000736f:	e8 74 ff ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007374:	6a 00                	push   0x0
c0007376:	68 74 bb 01 c0       	push   0xc001bb74
c000737b:	6a 03                	push   0x3
c000737d:	53                   	push   ebx
c000737e:	e8 65 ff ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007383:	83 c4 20             	add    esp,0x20
c0007386:	6a 00                	push   0x0
c0007388:	68 7e bb 01 c0       	push   0xc001bb7e
c000738d:	6a 04                	push   0x4
c000738f:	53                   	push   ebx
c0007390:	e8 53 ff ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007395:	6a 00                	push   0x0
c0007397:	68 88 bb 01 c0       	push   0xc001bb88
c000739c:	6a 05                	push   0x5
c000739e:	53                   	push   ebx
c000739f:	e8 44 ff ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00073a4:	83 c4 20             	add    esp,0x20
c00073a7:	6a 00                	push   0x0
c00073a9:	68 92 bb 01 c0       	push   0xc001bb92
c00073ae:	6a 06                	push   0x6
c00073b0:	53                   	push   ebx
c00073b1:	e8 32 ff ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00073b6:	6a 00                	push   0x0
c00073b8:	68 9c bb 01 c0       	push   0xc001bb9c
c00073bd:	6a 07                	push   0x7
c00073bf:	53                   	push   ebx
c00073c0:	e8 23 ff ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00073c5:	83 c4 20             	add    esp,0x20
c00073c8:	6a 00                	push   0x0
c00073ca:	68 a6 bb 01 c0       	push   0xc001bba6
c00073cf:	6a 08                	push   0x8
c00073d1:	53                   	push   ebx
c00073d2:	e8 11 ff ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00073d7:	6a 00                	push   0x0
c00073d9:	68 ae bb 01 c0       	push   0xc001bbae
c00073de:	6a 09                	push   0x9
c00073e0:	53                   	push   ebx
c00073e1:	e8 02 ff ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00073e6:	83 c4 20             	add    esp,0x20
c00073e9:	6a 00                	push   0x0
c00073eb:	68 b8 bb 01 c0       	push   0xc001bbb8
c00073f0:	6a 0a                	push   0xa
c00073f2:	53                   	push   ebx
c00073f3:	e8 f0 fe ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00073f8:	6a 00                	push   0x0
c00073fa:	68 c0 bb 01 c0       	push   0xc001bbc0
c00073ff:	6a 0b                	push   0xb
c0007401:	53                   	push   ebx
c0007402:	e8 e1 fe ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007407:	83 c4 20             	add    esp,0x20
c000740a:	6a 00                	push   0x0
c000740c:	68 c8 bb 01 c0       	push   0xc001bbc8
c0007411:	6a 0c                	push   0xc
c0007413:	53                   	push   ebx
c0007414:	e8 cf fe ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007419:	6a 00                	push   0x0
c000741b:	68 d0 bb 01 c0       	push   0xc001bbd0
c0007420:	6a 0d                	push   0xd
c0007422:	53                   	push   ebx
c0007423:	e8 c0 fe ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007428:	83 c4 20             	add    esp,0x20
c000742b:	6a 00                	push   0x0
c000742d:	68 d8 bb 01 c0       	push   0xc001bbd8
c0007432:	6a 0e                	push   0xe
c0007434:	53                   	push   ebx
c0007435:	e8 ae fe ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c000743a:	6a 00                	push   0x0
c000743c:	68 e0 bb 01 c0       	push   0xc001bbe0
c0007441:	6a 0f                	push   0xf
c0007443:	53                   	push   ebx
c0007444:	e8 9f fe ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007449:	83 c4 20             	add    esp,0x20
c000744c:	6a 00                	push   0x0
c000744e:	68 ea bb 01 c0       	push   0xc001bbea
c0007453:	6a 10                	push   0x10
c0007455:	53                   	push   ebx
c0007456:	e8 8d fe ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c000745b:	6a 00                	push   0x0
c000745d:	68 f4 bb 01 c0       	push   0xc001bbf4
c0007462:	6a 11                	push   0x11
c0007464:	53                   	push   ebx
c0007465:	e8 7e fe ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c000746a:	83 c4 20             	add    esp,0x20
c000746d:	6a 00                	push   0x0
c000746f:	68 fe bb 01 c0       	push   0xc001bbfe
c0007474:	6a 12                	push   0x12
c0007476:	53                   	push   ebx
c0007477:	e8 6c fe ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c000747c:	6a 01                	push   0x1
c000747e:	68 98 bc 01 c0       	push   0xc001bc98
c0007483:	6a 60                	push   0x60
c0007485:	53                   	push   ebx
c0007486:	e8 5d fe ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c000748b:	83 c4 20             	add    esp,0x20
c000748e:	6a 00                	push   0x0
c0007490:	68 9f bc 01 c0       	push   0xc001bc9f
c0007495:	6a 20                	push   0x20
c0007497:	53                   	push   ebx
c0007498:	e8 4b fe ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c000749d:	6a 00                	push   0x0
c000749f:	68 8a bc 01 c0       	push   0xc001bc8a
c00074a4:	6a 21                	push   0x21
c00074a6:	53                   	push   ebx
c00074a7:	e8 3c fe ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00074ac:	83 c4 20             	add    esp,0x20
c00074af:	6a 00                	push   0x0
c00074b1:	68 91 bc 01 c0       	push   0xc001bc91
c00074b6:	6a 22                	push   0x22
c00074b8:	53                   	push   ebx
c00074b9:	e8 2a fe ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00074be:	6a 00                	push   0x0
c00074c0:	68 08 bc 01 c0       	push   0xc001bc08
c00074c5:	6a 23                	push   0x23
c00074c7:	53                   	push   ebx
c00074c8:	e8 1b fe ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00074cd:	83 c4 20             	add    esp,0x20
c00074d0:	6a 00                	push   0x0
c00074d2:	68 12 bc 01 c0       	push   0xc001bc12
c00074d7:	6a 24                	push   0x24
c00074d9:	53                   	push   ebx
c00074da:	e8 09 fe ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00074df:	6a 00                	push   0x0
c00074e1:	68 1c bc 01 c0       	push   0xc001bc1c
c00074e6:	6a 25                	push   0x25
c00074e8:	53                   	push   ebx
c00074e9:	e8 fa fd ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00074ee:	83 c4 20             	add    esp,0x20
c00074f1:	6a 00                	push   0x0
c00074f3:	68 26 bc 01 c0       	push   0xc001bc26
c00074f8:	6a 26                	push   0x26
c00074fa:	53                   	push   ebx
c00074fb:	e8 e8 fd ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007500:	6a 00                	push   0x0
c0007502:	68 30 bc 01 c0       	push   0xc001bc30
c0007507:	6a 27                	push   0x27
c0007509:	53                   	push   ebx
c000750a:	e8 d9 fd ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c000750f:	83 c4 20             	add    esp,0x20
c0007512:	6a 00                	push   0x0
c0007514:	68 3a bc 01 c0       	push   0xc001bc3a
c0007519:	6a 28                	push   0x28
c000751b:	53                   	push   ebx
c000751c:	e8 c7 fd ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007521:	6a 00                	push   0x0
c0007523:	68 44 bc 01 c0       	push   0xc001bc44
c0007528:	6a 29                	push   0x29
c000752a:	53                   	push   ebx
c000752b:	e8 b8 fd ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007530:	83 c4 20             	add    esp,0x20
c0007533:	6a 00                	push   0x0
c0007535:	68 4e bc 01 c0       	push   0xc001bc4e
c000753a:	6a 2a                	push   0x2a
c000753c:	53                   	push   ebx
c000753d:	e8 a6 fd ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007542:	6a 00                	push   0x0
c0007544:	68 58 bc 01 c0       	push   0xc001bc58
c0007549:	6a 2b                	push   0x2b
c000754b:	53                   	push   ebx
c000754c:	e8 97 fd ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007551:	83 c4 20             	add    esp,0x20
c0007554:	6a 00                	push   0x0
c0007556:	68 62 bc 01 c0       	push   0xc001bc62
c000755b:	6a 2c                	push   0x2c
c000755d:	53                   	push   ebx
c000755e:	e8 85 fd ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007563:	6a 00                	push   0x0
c0007565:	68 6c bc 01 c0       	push   0xc001bc6c
c000756a:	6a 2d                	push   0x2d
c000756c:	53                   	push   ebx
c000756d:	e8 76 fd ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007572:	83 c4 20             	add    esp,0x20
c0007575:	6a 00                	push   0x0
c0007577:	68 76 bc 01 c0       	push   0xc001bc76
c000757c:	6a 2e                	push   0x2e
c000757e:	53                   	push   ebx
c000757f:	e8 64 fd ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007584:	6a 00                	push   0x0
c0007586:	68 80 bc 01 c0       	push   0xc001bc80
c000758b:	6a 2f                	push   0x2f
c000758d:	53                   	push   ebx
c000758e:	e8 55 fd ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007593:	83 c4 20             	add    esp,0x20
c0007596:	6a 00                	push   0x0
c0007598:	68 d6 bc 01 c0       	push   0xc001bcd6
c000759d:	6a 30                	push   0x30
c000759f:	53                   	push   ebx
c00075a0:	e8 43 fd ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00075a5:	6a 00                	push   0x0
c00075a7:	68 e0 bc 01 c0       	push   0xc001bce0
c00075ac:	6a 31                	push   0x31
c00075ae:	53                   	push   ebx
c00075af:	e8 34 fd ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00075b4:	83 c4 20             	add    esp,0x20
c00075b7:	6a 00                	push   0x0
c00075b9:	68 ea bc 01 c0       	push   0xc001bcea
c00075be:	6a 32                	push   0x32
c00075c0:	53                   	push   ebx
c00075c1:	e8 22 fd ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00075c6:	6a 00                	push   0x0
c00075c8:	68 f4 bc 01 c0       	push   0xc001bcf4
c00075cd:	6a 33                	push   0x33
c00075cf:	53                   	push   ebx
c00075d0:	e8 13 fd ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00075d5:	83 c4 20             	add    esp,0x20
c00075d8:	6a 00                	push   0x0
c00075da:	68 fe bc 01 c0       	push   0xc001bcfe
c00075df:	6a 34                	push   0x34
c00075e1:	53                   	push   ebx
c00075e2:	e8 01 fd ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00075e7:	6a 00                	push   0x0
c00075e9:	68 08 bd 01 c0       	push   0xc001bd08
c00075ee:	6a 35                	push   0x35
c00075f0:	53                   	push   ebx
c00075f1:	e8 f2 fc ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c00075f6:	83 c4 20             	add    esp,0x20
c00075f9:	6a 00                	push   0x0
c00075fb:	68 12 bd 01 c0       	push   0xc001bd12
c0007600:	6a 36                	push   0x36
c0007602:	53                   	push   ebx
c0007603:	e8 e0 fc ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007608:	6a 00                	push   0x0
c000760a:	68 1c bd 01 c0       	push   0xc001bd1c
c000760f:	6a 37                	push   0x37
c0007611:	53                   	push   ebx
c0007612:	e8 d1 fc ff ff       	call   c00072e8 <IDT::addEntry(int, void (*)(), bool)>
c0007617:	83 c4 1c             	add    esp,0x1c
c000761a:	6a 03                	push   0x3
c000761c:	6a 02                	push   0x2
c000761e:	ff 35 70 0c 02 c0    	push   DWORD PTR ds:0xc0020c70
c0007624:	e8 05 24 00 00       	call   c0009a2e <VAS::allocatePages(int, int)>
c0007629:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007630:	89 c6                	mov    esi,eax
c0007632:	e8 92 01 00 00       	call   c00077c9 <malloc>
c0007637:	81 c6 00 20 00 00    	add    esi,0x2000
c000763d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007640:	89 c7                	mov    edi,eax
c0007642:	e8 91 15 00 00       	call   c0008bd8 <TSS::TSS()>
c0007647:	83 c4 0c             	add    esp,0xc
c000764a:	68 a6 bb 01 c0       	push   0xc001bba6
c000764f:	56                   	push   esi
c0007650:	57                   	push   edi
c0007651:	e8 c6 15 00 00       	call   c0008c1c <TSS::setup(unsigned long, unsigned long)>
c0007656:	89 c6                	mov    esi,eax
c0007658:	58                   	pop    eax
c0007659:	5a                   	pop    edx
c000765a:	6a 00                	push   0x0
c000765c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007660:	50                   	push   eax
c0007661:	e8 d6 fb ff ff       	call   c000723c <IDTEntry::IDTEntry(bool)>
c0007666:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000766a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000766f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007676:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000767c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007680:	80 ce 05             	or     dh,0x5
c0007683:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007686:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000768a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007691:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007694:	e8 87 fc ff ff       	call   c0007320 <IDT::flush()>
c0007699:	83 c4 20             	add    esp,0x20
c000769c:	5b                   	pop    ebx
c000769d:	5e                   	pop    esi
c000769e:	5f                   	pop    edi
c000769f:	c3                   	ret    

c00076a0 <sbrk>:
c00076a0:	55                   	push   ebp
c00076a1:	57                   	push   edi
c00076a2:	56                   	push   esi
c00076a3:	53                   	push   ebx
c00076a4:	83 ec 1c             	sub    esp,0x1c
c00076a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00076ab:	85 c0                	test   eax,eax
c00076ad:	74 5f                	je     c000770e <sbrk+0x6e>
c00076af:	78 64                	js     c0007715 <sbrk+0x75>
c00076b1:	8b 15 a4 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f7a4
c00076b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076bb:	05 ff 0f 00 00       	add    eax,0xfff
c00076c0:	89 c5                	mov    ebp,eax
c00076c2:	78 69                	js     c000772d <sbrk+0x8d>
c00076c4:	c1 fd 0c             	sar    ebp,0xc
c00076c7:	bb 00 00 00 00       	mov    ebx,0x0
c00076cc:	8b 35 70 0c 02 c0    	mov    esi,DWORD PTR ds:0xc0020c70
c00076d2:	8b 3d a4 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f7a4
c00076d8:	e8 c8 03 00 00       	call   c0007aa5 <Phys::allocatePage()>
c00076dd:	68 01 04 00 00       	push   0x401
c00076e2:	57                   	push   edi
c00076e3:	50                   	push   eax
c00076e4:	56                   	push   esi
c00076e5:	e8 40 22 00 00       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c00076ea:	81 05 a4 f7 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f7a4,0x1000
c00076f4:	43                   	inc    ebx
c00076f5:	83 c4 10             	add    esp,0x10
c00076f8:	39 dd                	cmp    ebp,ebx
c00076fa:	75 d0                	jne    c00076cc <sbrk+0x2c>
c00076fc:	0f 20 d8             	mov    eax,cr3
c00076ff:	0f 22 d8             	mov    cr3,eax
c0007702:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007706:	83 c4 1c             	add    esp,0x1c
c0007709:	5b                   	pop    ebx
c000770a:	5e                   	pop    esi
c000770b:	5f                   	pop    edi
c000770c:	5d                   	pop    ebp
c000770d:	c3                   	ret    
c000770e:	a1 a4 f7 01 c0       	mov    eax,ds:0xc001f7a4
c0007713:	eb f1                	jmp    c0007706 <sbrk+0x66>
c0007715:	83 ec 08             	sub    esp,0x8
c0007718:	50                   	push   eax
c0007719:	68 dc d5 01 c0       	push   0xc001d5dc
c000771e:	e8 c5 2d 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0007723:	83 c4 10             	add    esp,0x10
c0007726:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000772b:	eb d9                	jmp    c0007706 <sbrk+0x66>
c000772d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007733:	eb 8f                	jmp    c00076c4 <sbrk+0x24>

c0007735 <mmap>:
c0007735:	83 ec 18             	sub    esp,0x18
c0007738:	68 0c d6 01 c0       	push   0xc001d60c
c000773d:	e8 29 8a 00 00       	call   c001016b <KePanic(char const*)>
c0007742:	b8 00 00 00 00       	mov    eax,0x0
c0007747:	83 c4 1c             	add    esp,0x1c
c000774a:	c3                   	ret    

c000774b <munmap>:
c000774b:	83 ec 18             	sub    esp,0x18
c000774e:	68 11 d6 01 c0       	push   0xc001d611
c0007753:	e8 13 8a 00 00       	call   c001016b <KePanic(char const*)>
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	83 c4 1c             	add    esp,0x1c
c0007760:	c3                   	ret    

c0007761 <liballoc_lock()>:
c0007761:	fa                   	cli    
c0007762:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c0007768:	b8 00 00 00 00       	mov    eax,0x0
c000776d:	c3                   	ret    

c000776e <liballoc_unlock()>:
c000776e:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0007773:	48                   	dec    eax
c0007774:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0007779:	75 01                	jne    c000777c <liballoc_unlock()+0xe>
c000777b:	fb                   	sti    
c000777c:	b8 00 00 00 00       	mov    eax,0x0
c0007781:	c3                   	ret    

c0007782 <liballoc_alloc(int)>:
c0007782:	83 ec 10             	sub    esp,0x10
c0007785:	6a 01                	push   0x1
c0007787:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000778b:	ff 35 70 0c 02 c0    	push   DWORD PTR ds:0xc0020c70
c0007791:	e8 98 22 00 00       	call   c0009a2e <VAS::allocatePages(int, int)>
c0007796:	83 c4 1c             	add    esp,0x1c
c0007799:	c3                   	ret    

c000779a <liballoc_free(void*, int)>:
c000779a:	83 ec 14             	sub    esp,0x14
c000779d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00077a1:	ff 35 70 0c 02 c0    	push   DWORD PTR ds:0xc0020c70
c00077a7:	e8 3e 1f 00 00       	call   c00096ea <VAS::freeAllocatedPages(unsigned long)>
c00077ac:	b8 00 00 00 00       	mov    eax,0x0
c00077b1:	83 c4 1c             	add    esp,0x1c
c00077b4:	c3                   	ret    

c00077b5 <realloc>:
c00077b5:	83 ec 14             	sub    esp,0x14
c00077b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 7c 9d ff ff       	call   c0001541 <dlrealloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <malloc>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 2f 98 ff ff       	call   c0001004 <dlmalloc>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <free>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 c4 94 ff ff       	call   c0000ca9 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <rfree>:
c00077e9:	83 ec 18             	sub    esp,0x18
c00077ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077f0:	e8 b4 94 ff ff       	call   c0000ca9 <dlfree>
c00077f5:	83 c4 1c             	add    esp,0x1c
c00077f8:	c3                   	ret    

c00077f9 <calloc>:
c00077f9:	56                   	push   esi
c00077fa:	53                   	push   ebx
c00077fb:	83 ec 10             	sub    esp,0x10
c00077fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007802:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007807:	53                   	push   ebx
c0007808:	e8 bc ff ff ff       	call   c00077c9 <malloc>
c000780d:	89 c6                	mov    esi,eax
c000780f:	83 c4 0c             	add    esp,0xc
c0007812:	53                   	push   ebx
c0007813:	6a 00                	push   0x0
c0007815:	50                   	push   eax
c0007816:	e8 c5 8c ff ff       	call   c00004e0 <memset>
c000781b:	89 f0                	mov    eax,esi
c000781d:	83 c4 14             	add    esp,0x14
c0007820:	5b                   	pop    ebx
c0007821:	5e                   	pop    esi
c0007822:	c3                   	ret    

c0007823 <KeEntryPoint>:
c0007823:	57                   	push   edi
c0007824:	bf f9 03 00 00       	mov    edi,0x3f9
c0007829:	56                   	push   esi
c000782a:	89 fa                	mov    edx,edi
c000782c:	53                   	push   ebx
c000782d:	31 f6                	xor    esi,esi
c000782f:	83 ec 2c             	sub    esp,0x2c
c0007832:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007837:	a3 90 0b 02 c0       	mov    ds:0xc0020b90,eax
c000783c:	89 f0                	mov    eax,esi
c000783e:	ee                   	out    dx,al
c000783f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007844:	b0 80                	mov    al,0x80
c0007846:	89 da                	mov    edx,ebx
c0007848:	ee                   	out    dx,al
c0007849:	b1 03                	mov    cl,0x3
c000784b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007850:	88 c8                	mov    al,cl
c0007852:	ee                   	out    dx,al
c0007853:	89 f0                	mov    eax,esi
c0007855:	89 fa                	mov    edx,edi
c0007857:	ee                   	out    dx,al
c0007858:	88 c8                	mov    al,cl
c000785a:	89 da                	mov    edx,ebx
c000785c:	ee                   	out    dx,al
c000785d:	b0 c7                	mov    al,0xc7
c000785f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007864:	ee                   	out    dx,al
c0007865:	b0 0b                	mov    al,0xb
c0007867:	ba fc 03 00 00       	mov    edx,0x3fc
c000786c:	ee                   	out    dx,al
c000786d:	68 18 d6 01 c0       	push   0xc001d618
c0007872:	e8 71 2c 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0007877:	e8 09 82 00 00       	call   c000fa85 <KeDisplaySplashScreen()>
c000787c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007881:	05 ff 0f 00 00       	add    eax,0xfff
c0007886:	25 00 f0 ff ff       	and    eax,0xfffff000
c000788b:	89 04 24             	mov    DWORD PTR [esp],eax
c000788e:	e8 64 03 00 00       	call   c0007bf7 <Phys::physicalMemorySetup(unsigned int)>
c0007893:	e8 bc 1b 00 00       	call   c0009454 <Virt::virtualMemorySetup()>
c0007898:	58                   	pop    eax
c0007899:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000789d:	53                   	push   ebx
c000789e:	e8 6d 1c 00 00       	call   c0009510 <VAS::VAS()>
c00078a3:	89 1d 70 0c 02 c0    	mov    DWORD PTR ds:0xc0020c70,ebx
c00078a9:	e8 2c 4a 01 00       	call   c001c2da <_init>
c00078ae:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078b5:	e8 0f ff ff ff       	call   c00077c9 <malloc>
c00078ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00078bd:	89 c6                	mov    esi,eax
c00078bf:	e8 7e f2 ff ff       	call   c0006b42 <Computer::Computer()>
c00078c4:	6a 00                	push   0x0
c00078c6:	89 35 78 0b 02 c0    	mov    DWORD PTR ds:0xc0020b78,esi
c00078cc:	6a 00                	push   0x0
c00078ce:	6a 00                	push   0x0
c00078d0:	56                   	push   esi
c00078d1:	e8 12 f6 ff ff       	call   c0006ee8 <Computer::open(int, int, void*)>
c00078d6:	83 c4 14             	add    esp,0x14
c00078d9:	53                   	push   ebx
c00078da:	e8 e7 1e 00 00       	call   c00097c6 <VAS::~VAS()>
c00078df:	83 c4 30             	add    esp,0x30
c00078e2:	5b                   	pop    ebx
c00078e3:	5e                   	pop    esi
c00078e4:	5f                   	pop    edi
c00078e5:	c3                   	ret    

c00078e6 <Phys::allocateDMA(unsigned long)>:
c00078e6:	55                   	push   ebp
c00078e7:	31 ed                	xor    ebp,ebp
c00078e9:	57                   	push   edi
c00078ea:	56                   	push   esi
c00078eb:	53                   	push   ebx
c00078ec:	31 db                	xor    ebx,ebx
c00078ee:	83 ec 1c             	sub    esp,0x1c
c00078f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078f5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078fd:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007903:	31 c0                	xor    eax,eax
c0007905:	c1 ef 0c             	shr    edi,0xc
c0007908:	eb 19                	jmp    c0007923 <Phys::allocateDMA(unsigned long)+0x3d>
c000790a:	85 c0                	test   eax,eax
c000790c:	75 06                	jne    c0007914 <Phys::allocateDMA(unsigned long)+0x2e>
c000790e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007912:	89 dd                	mov    ebp,ebx
c0007914:	8d 70 01             	lea    esi,[eax+0x1]
c0007917:	39 f7                	cmp    edi,esi
c0007919:	74 33                	je     c000794e <Phys::allocateDMA(unsigned long)+0x68>
c000791b:	89 f0                	mov    eax,esi
c000791d:	43                   	inc    ebx
c000791e:	83 fb 0f             	cmp    ebx,0xf
c0007921:	7f 11                	jg     c0007934 <Phys::allocateDMA(unsigned long)+0x4e>
c0007923:	80 bb ac 0b 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdf454],0x0
c000792a:	74 de                	je     c000790a <Phys::allocateDMA(unsigned long)+0x24>
c000792c:	31 c0                	xor    eax,eax
c000792e:	43                   	inc    ebx
c000792f:	83 fb 0f             	cmp    ebx,0xf
c0007932:	7e ef                	jle    c0007923 <Phys::allocateDMA(unsigned long)+0x3d>
c0007934:	83 ec 0c             	sub    esp,0xc
c0007937:	68 30 d6 01 c0       	push   0xc001d630
c000793c:	e8 2a 88 00 00       	call   c001016b <KePanic(char const*)>
c0007941:	83 c4 10             	add    esp,0x10
c0007944:	31 c0                	xor    eax,eax
c0007946:	83 c4 1c             	add    esp,0x1c
c0007949:	5b                   	pop    ebx
c000794a:	5e                   	pop    esi
c000794b:	5f                   	pop    edi
c000794c:	5d                   	pop    ebp
c000794d:	c3                   	ret    
c000794e:	89 e9                	mov    ecx,ebp
c0007950:	c1 f9 04             	sar    ecx,0x4
c0007953:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007957:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000795b:	89 ca                	mov    edx,ecx
c000795d:	4a                   	dec    edx
c000795e:	79 03                	jns    c0007963 <Phys::allocateDMA(unsigned long)+0x7d>
c0007960:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007963:	c1 fa 04             	sar    edx,0x4
c0007966:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000796a:	74 08                	je     c0007974 <Phys::allocateDMA(unsigned long)+0x8e>
c000796c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007970:	31 c0                	xor    eax,eax
c0007972:	eb ba                	jmp    c000792e <Phys::allocateDMA(unsigned long)+0x48>
c0007974:	85 f6                	test   esi,esi
c0007976:	74 15                	je     c000798d <Phys::allocateDMA(unsigned long)+0xa7>
c0007978:	8d 95 ac 0b 02 c0    	lea    edx,[ebp-0x3ffdf454]
c000797e:	8d 84 05 ad 0b 02 c0 	lea    eax,[ebp+eax*1-0x3ffdf453]
c0007985:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007988:	42                   	inc    edx
c0007989:	39 d0                	cmp    eax,edx
c000798b:	75 f8                	jne    c0007985 <Phys::allocateDMA(unsigned long)+0x9f>
c000798d:	01 3d a4 0b 02 c0    	add    DWORD PTR ds:0xc0020ba4,edi
c0007993:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007997:	85 c0                	test   eax,eax
c0007999:	74 17                	je     c00079b2 <Phys::allocateDMA(unsigned long)+0xcc>
c000799b:	83 ec 0c             	sub    esp,0xc
c000799e:	68 30 d6 01 c0       	push   0xc001d630
c00079a3:	e8 c3 87 00 00       	call   c001016b <KePanic(char const*)>
c00079a8:	83 c4 10             	add    esp,0x10
c00079ab:	89 f0                	mov    eax,esi
c00079ad:	e9 6b ff ff ff       	jmp    c000791d <Phys::allocateDMA(unsigned long)+0x37>
c00079b2:	c1 e5 0c             	shl    ebp,0xc
c00079b5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079bb:	eb 89                	jmp    c0007946 <Phys::allocateDMA(unsigned long)+0x60>

c00079bd <Phys::freeDMA(unsigned long, unsigned long)>:
c00079bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079c1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079cb:	c1 ea 0c             	shr    edx,0xc
c00079ce:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079d3:	29 15 a4 0b 02 c0    	sub    DWORD PTR ds:0xc0020ba4,edx
c00079d9:	c1 e8 0c             	shr    eax,0xc
c00079dc:	85 d2                	test   edx,edx
c00079de:	74 0f                	je     c00079ef <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079e0:	05 ac 0b 02 c0       	add    eax,0xc0020bac
c00079e5:	01 c2                	add    edx,eax
c00079e7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079ea:	40                   	inc    eax
c00079eb:	39 d0                	cmp    eax,edx
c00079ed:	75 f8                	jne    c00079e7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079ef:	c3                   	ret    

c00079f0 <Phys::setPageState(unsigned long, bool)>:
c00079f0:	56                   	push   esi
c00079f1:	ba 01 00 00 00       	mov    edx,0x1
c00079f6:	53                   	push   ebx
c00079f7:	8b 35 a8 f7 01 c0    	mov    esi,DWORD PTR ds:0xc001f7a8
c00079fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007a01:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007a05:	89 c8                	mov    eax,ecx
c0007a07:	83 e1 07             	and    ecx,0x7
c0007a0a:	c1 e8 03             	shr    eax,0x3
c0007a0d:	d3 e3                	shl    ebx,cl
c0007a0f:	01 c6                	add    esi,eax
c0007a11:	d3 e2                	shl    edx,cl
c0007a13:	f7 d2                	not    edx
c0007a15:	20 16                	and    BYTE PTR [esi],dl
c0007a17:	03 05 a8 f7 01 c0    	add    eax,DWORD PTR ds:0xc001f7a8
c0007a1d:	08 18                	or     BYTE PTR [eax],bl
c0007a1f:	5b                   	pop    ebx
c0007a20:	5e                   	pop    esi
c0007a21:	c3                   	ret    

c0007a22 <Phys::getPageState(unsigned long)>:
c0007a22:	53                   	push   ebx
c0007a23:	8b 15 a8 f7 01 c0    	mov    edx,DWORD PTR ds:0xc001f7a8
c0007a29:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a2d:	31 db                	xor    ebx,ebx
c0007a2f:	89 c8                	mov    eax,ecx
c0007a31:	83 e1 07             	and    ecx,0x7
c0007a34:	c1 e8 03             	shr    eax,0x3
c0007a37:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a3a:	89 d8                	mov    eax,ebx
c0007a3c:	5b                   	pop    ebx
c0007a3d:	d3 f8                	sar    eax,cl
c0007a3f:	83 e0 01             	and    eax,0x1
c0007a42:	c3                   	ret    

c0007a43 <Phys::freePage(unsigned long)>:
c0007a43:	53                   	push   ebx
c0007a44:	83 ec 08             	sub    esp,0x8
c0007a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a4b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a51:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a57:	76 3a                	jbe    c0007a93 <Phys::freePage(unsigned long)+0x50>
c0007a59:	c1 e8 0c             	shr    eax,0xc
c0007a5c:	50                   	push   eax
c0007a5d:	89 c3                	mov    ebx,eax
c0007a5f:	e8 be ff ff ff       	call   c0007a22 <Phys::getPageState(unsigned long)>
c0007a64:	5a                   	pop    edx
c0007a65:	84 c0                	test   al,al
c0007a67:	74 19                	je     c0007a82 <Phys::freePage(unsigned long)+0x3f>
c0007a69:	83 ec 08             	sub    esp,0x8
c0007a6c:	ff 0d a4 0b 02 c0    	dec    DWORD PTR ds:0xc0020ba4
c0007a72:	6a 00                	push   0x0
c0007a74:	53                   	push   ebx
c0007a75:	e8 76 ff ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007a7a:	83 c4 10             	add    esp,0x10
c0007a7d:	83 c4 08             	add    esp,0x8
c0007a80:	5b                   	pop    ebx
c0007a81:	c3                   	ret    
c0007a82:	c7 44 24 10 d5 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d6d5
c0007a8a:	83 c4 08             	add    esp,0x8
c0007a8d:	5b                   	pop    ebx
c0007a8e:	e9 d8 86 00 00       	jmp    c001016b <KePanic(char const*)>
c0007a93:	68 00 10 00 00       	push   0x1000
c0007a98:	50                   	push   eax
c0007a99:	e8 1f ff ff ff       	call   c00079bd <Phys::freeDMA(unsigned long, unsigned long)>
c0007a9e:	59                   	pop    ecx
c0007a9f:	5b                   	pop    ebx
c0007aa0:	83 c4 08             	add    esp,0x8
c0007aa3:	5b                   	pop    ebx
c0007aa4:	c3                   	ret    

c0007aa5 <Phys::allocatePage()>:
c0007aa5:	56                   	push   esi
c0007aa6:	53                   	push   ebx
c0007aa7:	83 ec 14             	sub    esp,0x14
c0007aaa:	8b 35 98 0b 02 c0    	mov    esi,DWORD PTR ds:0xc0020b98
c0007ab0:	89 f3                	mov    ebx,esi
c0007ab2:	eb 0a                	jmp    c0007abe <Phys::allocatePage()+0x19>
c0007ab4:	89 1d 98 0b 02 c0    	mov    DWORD PTR ds:0xc0020b98,ebx
c0007aba:	39 de                	cmp    esi,ebx
c0007abc:	74 24                	je     c0007ae2 <Phys::allocatePage()+0x3d>
c0007abe:	53                   	push   ebx
c0007abf:	e8 5e ff ff ff       	call   c0007a22 <Phys::getPageState(unsigned long)>
c0007ac4:	5a                   	pop    edx
c0007ac5:	84 c0                	test   al,al
c0007ac7:	74 5f                	je     c0007b28 <Phys::allocatePage()+0x83>
c0007ac9:	43                   	inc    ebx
c0007aca:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ad0:	75 e2                	jne    c0007ab4 <Phys::allocatePage()+0xf>
c0007ad2:	31 db                	xor    ebx,ebx
c0007ad4:	c7 05 98 0b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020b98,0x0
c0007ade:	39 de                	cmp    esi,ebx
c0007ae0:	75 dc                	jne    c0007abe <Phys::allocatePage()+0x19>
c0007ae2:	83 ec 0c             	sub    esp,0xc
c0007ae5:	80 35 bc 0b 02 c0 01 	xor    BYTE PTR ds:0xc0020bbc,0x1
c0007aec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007af1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007af4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007afa:	50                   	push   eax
c0007afb:	e8 08 27 00 00       	call   c000a208 <VAS::scanForEviction()>
c0007b00:	83 c4 10             	add    esp,0x10
c0007b03:	85 c0                	test   eax,eax
c0007b05:	75 3f                	jne    c0007b46 <Phys::allocatePage()+0xa1>
c0007b07:	83 ec 0c             	sub    esp,0xc
c0007b0a:	68 58 d6 01 c0       	push   0xc001d658
c0007b0f:	e8 57 86 00 00       	call   c001016b <KePanic(char const*)>
c0007b14:	83 c4 10             	add    esp,0x10
c0007b17:	8b 1d 98 0b 02 c0    	mov    ebx,DWORD PTR ds:0xc0020b98
c0007b1d:	53                   	push   ebx
c0007b1e:	e8 ff fe ff ff       	call   c0007a22 <Phys::getPageState(unsigned long)>
c0007b23:	5a                   	pop    edx
c0007b24:	84 c0                	test   al,al
c0007b26:	75 a1                	jne    c0007ac9 <Phys::allocatePage()+0x24>
c0007b28:	6a 01                	push   0x1
c0007b2a:	53                   	push   ebx
c0007b2b:	e8 c0 fe ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007b30:	a1 98 0b 02 c0       	mov    eax,ds:0xc0020b98
c0007b35:	5a                   	pop    edx
c0007b36:	ff 05 a4 0b 02 c0    	inc    DWORD PTR ds:0xc0020ba4
c0007b3c:	c1 e0 0c             	shl    eax,0xc
c0007b3f:	59                   	pop    ecx
c0007b40:	83 c4 14             	add    esp,0x14
c0007b43:	5b                   	pop    ebx
c0007b44:	5e                   	pop    esi
c0007b45:	c3                   	ret    
c0007b46:	83 ec 08             	sub    esp,0x8
c0007b49:	89 c2                	mov    edx,eax
c0007b4b:	6a 01                	push   0x1
c0007b4d:	c1 ea 0c             	shr    edx,0xc
c0007b50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b54:	52                   	push   edx
c0007b55:	e8 96 fe ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007b5a:	83 c4 10             	add    esp,0x10
c0007b5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b61:	eb dd                	jmp    c0007b40 <Phys::allocatePage()+0x9b>

c0007b63 <Phys::allocateContiguousPages(int)>:
c0007b63:	57                   	push   edi
c0007b64:	56                   	push   esi
c0007b65:	53                   	push   ebx
c0007b66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b6a:	fa                   	cli    
c0007b6b:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c0007b71:	31 db                	xor    ebx,ebx
c0007b73:	85 db                	test   ebx,ebx
c0007b75:	75 11                	jne    c0007b88 <Phys::allocateContiguousPages(int)+0x25>
c0007b77:	e8 29 ff ff ff       	call   c0007aa5 <Phys::allocatePage()>
c0007b7c:	83 fe 01             	cmp    esi,0x1
c0007b7f:	89 c7                	mov    edi,eax
c0007b81:	74 21                	je     c0007ba4 <Phys::allocateContiguousPages(int)+0x41>
c0007b83:	bb 01 00 00 00       	mov    ebx,0x1
c0007b88:	e8 18 ff ff ff       	call   c0007aa5 <Phys::allocatePage()>
c0007b8d:	89 da                	mov    edx,ebx
c0007b8f:	c1 e2 0c             	shl    edx,0xc
c0007b92:	01 fa                	add    edx,edi
c0007b94:	39 c2                	cmp    edx,eax
c0007b96:	74 20                	je     c0007bb8 <Phys::allocateContiguousPages(int)+0x55>
c0007b98:	bb 01 00 00 00       	mov    ebx,0x1
c0007b9d:	89 c7                	mov    edi,eax
c0007b9f:	83 fe 01             	cmp    esi,0x1
c0007ba2:	75 e4                	jne    c0007b88 <Phys::allocateContiguousPages(int)+0x25>
c0007ba4:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0007ba9:	48                   	dec    eax
c0007baa:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0007baf:	75 01                	jne    c0007bb2 <Phys::allocateContiguousPages(int)+0x4f>
c0007bb1:	fb                   	sti    
c0007bb2:	89 f8                	mov    eax,edi
c0007bb4:	5b                   	pop    ebx
c0007bb5:	5e                   	pop    esi
c0007bb6:	5f                   	pop    edi
c0007bb7:	c3                   	ret    
c0007bb8:	43                   	inc    ebx
c0007bb9:	39 f3                	cmp    ebx,esi
c0007bbb:	75 b6                	jne    c0007b73 <Phys::allocateContiguousPages(int)+0x10>
c0007bbd:	eb e5                	jmp    c0007ba4 <Phys::allocateContiguousPages(int)+0x41>

c0007bbf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007bbf:	56                   	push   esi
c0007bc0:	53                   	push   ebx
c0007bc1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bc5:	39 1d 9c 0b 02 c0    	cmp    DWORD PTR ds:0xc0020b9c,ebx
c0007bcb:	73 06                	jae    c0007bd3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bcd:	89 1d 9c 0b 02 c0    	mov    DWORD PTR ds:0xc0020b9c,ebx
c0007bd3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bd7:	c1 eb 0c             	shr    ebx,0xc
c0007bda:	c1 e8 0c             	shr    eax,0xc
c0007bdd:	39 d8                	cmp    eax,ebx
c0007bdf:	73 13                	jae    c0007bf4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007be1:	6a 00                	push   0x0
c0007be3:	8d 70 01             	lea    esi,[eax+0x1]
c0007be6:	50                   	push   eax
c0007be7:	e8 04 fe ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007bec:	5a                   	pop    edx
c0007bed:	89 f0                	mov    eax,esi
c0007bef:	59                   	pop    ecx
c0007bf0:	39 f3                	cmp    ebx,esi
c0007bf2:	75 ed                	jne    c0007be1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007bf4:	5b                   	pop    ebx
c0007bf5:	5e                   	pop    esi
c0007bf6:	c3                   	ret    

c0007bf7 <Phys::physicalMemorySetup(unsigned int)>:
c0007bf7:	55                   	push   ebp
c0007bf8:	57                   	push   edi
c0007bf9:	56                   	push   esi
c0007bfa:	53                   	push   ebx
c0007bfb:	31 db                	xor    ebx,ebx
c0007bfd:	83 ec 40             	sub    esp,0x40
c0007c00:	6a 10                	push   0x10
c0007c02:	6a 00                	push   0x0
c0007c04:	68 ac 0b 02 c0       	push   0xc0020bac
c0007c09:	e8 d2 88 ff ff       	call   c00004e0 <memset>
c0007c0e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c12:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c17:	05 00 10 00 00       	add    eax,0x1000
c0007c1c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c20:	5a                   	pop    edx
c0007c21:	59                   	pop    ecx
c0007c22:	50                   	push   eax
c0007c23:	68 eb d6 01 c0       	push   0xc001d6eb
c0007c28:	e8 bb 28 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0007c2d:	83 c4 10             	add    esp,0x10
c0007c30:	83 ec 08             	sub    esp,0x8
c0007c33:	6a 01                	push   0x1
c0007c35:	53                   	push   ebx
c0007c36:	43                   	inc    ebx
c0007c37:	e8 b4 fd ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007c3c:	83 c4 10             	add    esp,0x10
c0007c3f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c45:	75 e9                	jne    c0007c30 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c47:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c4d:	66 85 c0             	test   ax,ax
c0007c50:	0f 84 97 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c56:	89 c7                	mov    edi,eax
c0007c58:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c60:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c66:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c6b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c6f:	eb 15                	jmp    c0007c86 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c71:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c75:	83 c3 18             	add    ebx,0x18
c0007c78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c7c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c80:	0f 84 77 01 00 00    	je     c0007dfd <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c86:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c89:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c8c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c93:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c97:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c99:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c9c:	01 f0                	add    eax,esi
c0007c9e:	55                   	push   ebp
c0007c9f:	11 fa                	adc    edx,edi
c0007ca1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ca5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007cad:	50                   	push   eax
c0007cae:	56                   	push   esi
c0007caf:	68 88 d6 01 c0       	push   0xc001d688
c0007cb4:	e8 2f 28 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0007cb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cbd:	83 c4 10             	add    esp,0x10
c0007cc0:	09 f8                	or     eax,edi
c0007cc2:	0f 85 35 01 00 00    	jne    c0007dfd <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cc8:	4d                   	dec    ebp
c0007cc9:	75 a6                	jne    c0007c71 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007ccb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007ccf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cd4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cd8:	39 f2                	cmp    edx,esi
c0007cda:	89 c1                	mov    ecx,eax
c0007cdc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007ce4:	19 f9                	sbb    ecx,edi
c0007ce6:	0f 82 a7 00 00 00    	jb     c0007d93 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007cf0:	89 c1                	mov    ecx,eax
c0007cf2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007cf6:	0f 83 97 00 00 00    	jae    c0007d93 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cfc:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007d01:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d05:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d09:	39 fa                	cmp    edx,edi
c0007d0b:	19 e8                	sbb    eax,ebp
c0007d0d:	0f 82 9a 01 00 00    	jb     c0007ead <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d13:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d17:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d1b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d21:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d26:	83 d5 ff             	adc    ebp,0xffffffff
c0007d29:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d2d:	31 c0                	xor    eax,eax
c0007d2f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d33:	39 fa                	cmp    edx,edi
c0007d35:	89 c1                	mov    ecx,eax
c0007d37:	19 e9                	sbb    ecx,ebp
c0007d39:	0f 83 32 ff ff ff    	jae    c0007c71 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d3f:	be 00 00 08 00       	mov    esi,0x80000
c0007d44:	51                   	push   ecx
c0007d45:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d49:	57                   	push   edi
c0007d4a:	56                   	push   esi
c0007d4b:	68 ac d6 01 c0       	push   0xc001d6ac
c0007d50:	e8 93 27 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0007d55:	5d                   	pop    ebp
c0007d56:	58                   	pop    eax
c0007d57:	57                   	push   edi
c0007d58:	56                   	push   esi
c0007d59:	e8 61 fe ff ff       	call   c0007bbf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d5e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d62:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d66:	83 c4 0c             	add    esp,0xc
c0007d69:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d6d:	03 05 a8 0b 02 c0    	add    eax,DWORD PTR ds:0xc0020ba8
c0007d73:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d7a:	a3 a8 0b 02 c0       	mov    ds:0xc0020ba8,eax
c0007d7f:	52                   	push   edx
c0007d80:	50                   	push   eax
c0007d81:	68 11 d7 01 c0       	push   0xc001d711
c0007d86:	e8 5d 27 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0007d8b:	83 c4 10             	add    esp,0x10
c0007d8e:	e9 de fe ff ff       	jmp    c0007c71 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d93:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d9b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d9f:	39 ea                	cmp    edx,ebp
c0007da1:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007da5:	0f 82 c6 fe ff ff    	jb     c0007c71 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dab:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007db0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007db4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007db8:	0f 83 b3 fe ff ff    	jae    c0007c71 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dbe:	39 ee                	cmp    esi,ebp
c0007dc0:	89 f8                	mov    eax,edi
c0007dc2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007dc6:	0f 83 78 ff ff ff    	jae    c0007d44 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dd4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dd8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007ddc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007de0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007de4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007de8:	e9 57 ff ff ff       	jmp    c0007d44 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ded:	83 ec 0c             	sub    esp,0xc
c0007df0:	68 03 d7 01 c0       	push   0xc001d703
c0007df5:	e8 71 83 00 00       	call   c001016b <KePanic(char const*)>
c0007dfa:	83 c4 10             	add    esp,0x10
c0007dfd:	83 ec 08             	sub    esp,0x8
c0007e00:	bb 60 00 00 00       	mov    ebx,0x60
c0007e05:	6a 00                	push   0x0
c0007e07:	6a 06                	push   0x6
c0007e09:	e8 e2 fb ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007e0e:	58                   	pop    eax
c0007e0f:	5a                   	pop    edx
c0007e10:	6a 00                	push   0x0
c0007e12:	6a 07                	push   0x7
c0007e14:	e8 d7 fb ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007e19:	83 05 a8 0b 02 c0 02 	add    DWORD PTR ds:0xc0020ba8,0x2
c0007e20:	83 c4 10             	add    esp,0x10
c0007e23:	83 ec 08             	sub    esp,0x8
c0007e26:	6a 00                	push   0x0
c0007e28:	53                   	push   ebx
c0007e29:	43                   	inc    ebx
c0007e2a:	e8 c1 fb ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007e2f:	83 c4 10             	add    esp,0x10
c0007e32:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e38:	75 e9                	jne    c0007e23 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e3a:	a1 a8 0b 02 c0       	mov    eax,ds:0xc0020ba8
c0007e3f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e44:	83 c0 20             	add    eax,0x20
c0007e47:	a3 a8 0b 02 c0       	mov    ds:0xc0020ba8,eax
c0007e4c:	eb 22                	jmp    c0007e70 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e4e:	83 ec 08             	sub    esp,0x8
c0007e51:	6a 00                	push   0x0
c0007e53:	53                   	push   ebx
c0007e54:	43                   	inc    ebx
c0007e55:	e8 96 fb ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007e5a:	a1 a8 0b 02 c0       	mov    eax,ds:0xc0020ba8
c0007e5f:	83 c4 10             	add    esp,0x10
c0007e62:	40                   	inc    eax
c0007e63:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e69:	a3 a8 0b 02 c0       	mov    ds:0xc0020ba8,eax
c0007e6e:	74 07                	je     c0007e77 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e70:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e75:	7e d7                	jle    c0007e4e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e77:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e7c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e81:	7f 22                	jg     c0007ea5 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e83:	83 ec 08             	sub    esp,0x8
c0007e86:	6a 00                	push   0x0
c0007e88:	53                   	push   ebx
c0007e89:	43                   	inc    ebx
c0007e8a:	e8 61 fb ff ff       	call   c00079f0 <Phys::setPageState(unsigned long, bool)>
c0007e8f:	a1 a8 0b 02 c0       	mov    eax,ds:0xc0020ba8
c0007e94:	83 c4 10             	add    esp,0x10
c0007e97:	40                   	inc    eax
c0007e98:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e9e:	a3 a8 0b 02 c0       	mov    ds:0xc0020ba8,eax
c0007ea3:	75 d7                	jne    c0007e7c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007ea5:	83 c4 3c             	add    esp,0x3c
c0007ea8:	5b                   	pop    ebx
c0007ea9:	5e                   	pop    esi
c0007eaa:	5f                   	pop    edi
c0007eab:	5d                   	pop    ebp
c0007eac:	c3                   	ret    
c0007ead:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007eb5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ebd:	e9 51 fe ff ff       	jmp    c0007d13 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007ec2 <Pipe::isAtty()>:
c0007ec2:	31 c0                	xor    eax,eax
c0007ec4:	c3                   	ret    
c0007ec5:	90                   	nop

c0007ec6 <Pipe::~Pipe()>:
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	ba 70 d7 01 c0       	mov    edx,0xc001d770
c0007ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ed2:	89 10                	mov    DWORD PTR [eax],edx
c0007ed4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ed8:	83 ec 0c             	sub    esp,0xc
c0007edb:	50                   	push   eax
c0007edc:	e8 53 11 00 00       	call   c0009034 <UnixFile::~UnixFile()>
c0007ee1:	83 c4 10             	add    esp,0x10
c0007ee4:	90                   	nop
c0007ee5:	83 c4 0c             	add    esp,0xc
c0007ee8:	c3                   	ret    
c0007ee9:	90                   	nop

c0007eea <Pipe::~Pipe()>:
c0007eea:	83 ec 0c             	sub    esp,0xc
c0007eed:	83 ec 0c             	sub    esp,0xc
c0007ef0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef4:	e8 cd ff ff ff       	call   c0007ec6 <Pipe::~Pipe()>
c0007ef9:	83 c4 10             	add    esp,0x10
c0007efc:	83 ec 08             	sub    esp,0x8
c0007eff:	6a 20                	push   0x20
c0007f01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f05:	e8 e8 24 00 00       	call   c000a3f2 <operator delete(void*, unsigned long)>
c0007f0a:	83 c4 10             	add    esp,0x10
c0007f0d:	83 c4 0c             	add    esp,0xc
c0007f10:	c3                   	ret    
c0007f11:	90                   	nop

c0007f12 <Pipe::write(unsigned long long, void*, int*)>:
c0007f12:	55                   	push   ebp
c0007f13:	57                   	push   edi
c0007f14:	56                   	push   esi
c0007f15:	53                   	push   ebx
c0007f16:	83 ec 1c             	sub    esp,0x1c
c0007f19:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f21:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f24:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f2b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f2f:	89 d8                	mov    eax,ebx
c0007f31:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f34:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f38:	89 d6                	mov    esi,edx
c0007f3a:	89 d7                	mov    edi,edx
c0007f3c:	c1 ff 1f             	sar    edi,0x1f
c0007f3f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f42:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f46:	c1 f8 1f             	sar    eax,0x1f
c0007f49:	39 f3                	cmp    ebx,esi
c0007f4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f53:	19 f8                	sbb    eax,edi
c0007f55:	b8 01 00 00 00       	mov    eax,0x1
c0007f5a:	72 6e                	jb     c0007fca <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f5c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f5f:	01 d0                	add    eax,edx
c0007f61:	99                   	cdq    
c0007f62:	f7 fb                	idiv   ebx
c0007f64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f68:	29 d3                	sub    ebx,edx
c0007f6a:	89 d7                	mov    edi,edx
c0007f6c:	89 de                	mov    esi,ebx
c0007f6e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f71:	c1 fb 1f             	sar    ebx,0x1f
c0007f74:	39 f2                	cmp    edx,esi
c0007f76:	19 d8                	sbb    eax,ebx
c0007f78:	b8 00 00 00 00       	mov    eax,0x0
c0007f7d:	72 04                	jb     c0007f83 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f7f:	89 d0                	mov    eax,edx
c0007f81:	29 f0                	sub    eax,esi
c0007f83:	89 d3                	mov    ebx,edx
c0007f85:	29 c3                	sub    ebx,eax
c0007f87:	74 0b                	je     c0007f94 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f89:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f8c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f90:	89 d9                	mov    ecx,ebx
c0007f92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f94:	85 c0                	test   eax,eax
c0007f96:	74 0d                	je     c0007fa5 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f98:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f9c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f9f:	89 de                	mov    esi,ebx
c0007fa1:	89 c1                	mov    ecx,eax
c0007fa3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007fa5:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007fa8:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007fad:	75 10                	jne    c0007fbf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007faf:	83 ec 0c             	sub    esp,0xc
c0007fb2:	68 2d d7 01 c0       	push   0xc001d72d
c0007fb7:	e8 af 81 00 00       	call   c001016b <KePanic(char const*)>
c0007fbc:	83 c4 10             	add    esp,0x10
c0007fbf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fc3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fc6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fc8:	31 c0                	xor    eax,eax
c0007fca:	83 c4 1c             	add    esp,0x1c
c0007fcd:	5b                   	pop    ebx
c0007fce:	5e                   	pop    esi
c0007fcf:	5f                   	pop    edi
c0007fd0:	5d                   	pop    ebp
c0007fd1:	c3                   	ret    

c0007fd2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fd2:	55                   	push   ebp
c0007fd3:	57                   	push   edi
c0007fd4:	56                   	push   esi
c0007fd5:	53                   	push   ebx
c0007fd6:	83 ec 1c             	sub    esp,0x1c
c0007fd9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fdd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fe1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fe5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fe8:	89 c8                	mov    eax,ecx
c0007fea:	99                   	cdq    
c0007feb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fef:	74 24                	je     c0008015 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007ff1:	39 f9                	cmp    ecx,edi
c0007ff3:	89 d1                	mov    ecx,edx
c0007ff5:	19 f1                	sbb    ecx,esi
c0007ff7:	73 1c                	jae    c0008015 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007ff9:	fa                   	cli    
c0007ffa:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c0008000:	e8 b7 b7 00 00       	call   c00137bc <schedule()>
c0008005:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000800a:	48                   	dec    eax
c000800b:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0008010:	75 d3                	jne    c0007fe5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008012:	fb                   	sti    
c0008013:	eb d0                	jmp    c0007fe5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008015:	39 f8                	cmp    eax,edi
c0008017:	89 d1                	mov    ecx,edx
c0008019:	89 3c 24             	mov    DWORD PTR [esp],edi
c000801c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008020:	19 f1                	sbb    ecx,esi
c0008022:	73 07                	jae    c000802b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008024:	89 04 24             	mov    DWORD PTR [esp],eax
c0008027:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000802b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000802e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008031:	29 f7                	sub    edi,esi
c0008033:	89 f8                	mov    eax,edi
c0008035:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008039:	99                   	cdq    
c000803a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000803d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008041:	19 d0                	sbb    eax,edx
c0008043:	73 07                	jae    c000804c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008045:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000804c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000804f:	89 ea                	mov    edx,ebp
c0008051:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008055:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000805a:	74 0d                	je     c0008069 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000805c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000805f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008063:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008067:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008069:	85 d2                	test   edx,edx
c000806b:	74 11                	je     c000807e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000806d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008071:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008074:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008078:	89 d1                	mov    ecx,edx
c000807a:	89 c7                	mov    edi,eax
c000807c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000807e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008081:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008084:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008087:	99                   	cdq    
c0008088:	89 f7                	mov    edi,esi
c000808a:	03 04 24             	add    eax,DWORD PTR [esp]
c000808d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008091:	c1 ff 1f             	sar    edi,0x1f
c0008094:	57                   	push   edi
c0008095:	56                   	push   esi
c0008096:	52                   	push   edx
c0008097:	50                   	push   eax
c0008098:	e8 23 41 01 00       	call   c001c1c0 <__umoddi3>
c000809d:	83 c4 10             	add    esp,0x10
c00080a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00080a3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00080a8:	75 10                	jne    c00080ba <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00080aa:	83 ec 0c             	sub    esp,0xc
c00080ad:	68 4a d7 01 c0       	push   0xc001d74a
c00080b2:	e8 b4 80 00 00       	call   c001016b <KePanic(char const*)>
c00080b7:	83 c4 10             	add    esp,0x10
c00080ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080c1:	89 10                	mov    DWORD PTR [eax],edx
c00080c3:	83 c4 1c             	add    esp,0x1c
c00080c6:	31 c0                	xor    eax,eax
c00080c8:	5b                   	pop    ebx
c00080c9:	5e                   	pop    esi
c00080ca:	5f                   	pop    edi
c00080cb:	5d                   	pop    ebp
c00080cc:	c3                   	ret    
c00080cd:	90                   	nop

c00080ce <Pipe::Pipe(int)>:
c00080ce:	83 ec 0c             	sub    esp,0xc
c00080d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080d5:	83 ec 08             	sub    esp,0x8
c00080d8:	6a 00                	push   0x0
c00080da:	50                   	push   eax
c00080db:	e8 72 0d 00 00       	call   c0008e52 <UnixFile::UnixFile(int)>
c00080e0:	83 c4 10             	add    esp,0x10
c00080e3:	ba 70 d7 01 c0       	mov    edx,0xc001d770
c00080e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ec:	89 10                	mov    DWORD PTR [eax],edx
c00080ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080f6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080fd:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0008104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008108:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000810f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	50                   	push   eax
c0008117:	e8 ad f6 ff ff       	call   c00077c9 <malloc>
c000811c:	83 c4 10             	add    esp,0x10
c000811f:	89 c2                	mov    edx,eax
c0008121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008125:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000812c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008130:	90                   	nop
c0008131:	83 c4 0c             	add    esp,0xc
c0008134:	c3                   	ret    
c0008135:	90                   	nop

c0008136 <VgaText::isAtty()>:
c0008136:	b0 01                	mov    al,0x1
c0008138:	c3                   	ret    
c0008139:	90                   	nop

c000813a <VgaText::~VgaText()>:
c000813a:	83 ec 0c             	sub    esp,0xc
c000813d:	ba 04 d8 01 c0       	mov    edx,0xc001d804
c0008142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008146:	89 10                	mov    DWORD PTR [eax],edx
c0008148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000814c:	83 ec 0c             	sub    esp,0xc
c000814f:	50                   	push   eax
c0008150:	e8 df 0e 00 00       	call   c0009034 <UnixFile::~UnixFile()>
c0008155:	83 c4 10             	add    esp,0x10
c0008158:	90                   	nop
c0008159:	83 c4 0c             	add    esp,0xc
c000815c:	c3                   	ret    
c000815d:	90                   	nop

c000815e <VgaText::~VgaText()>:
c000815e:	83 ec 0c             	sub    esp,0xc
c0008161:	83 ec 0c             	sub    esp,0xc
c0008164:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008168:	e8 cd ff ff ff       	call   c000813a <VgaText::~VgaText()>
c000816d:	83 c4 10             	add    esp,0x10
c0008170:	83 ec 08             	sub    esp,0x8
c0008173:	68 34 01 00 00       	push   0x134
c0008178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000817c:	e8 71 22 00 00       	call   c000a3f2 <operator delete(void*, unsigned long)>
c0008181:	83 c4 10             	add    esp,0x10
c0008184:	83 c4 0c             	add    esp,0xc
c0008187:	c3                   	ret    

c0008188 <VgaText::read(unsigned long long, void*, int*)>:
c0008188:	83 ec 10             	sub    esp,0x10
c000818b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000818f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008197:	e8 ac 45 00 00       	call   c000c748 <readKeyboard(VgaText*, char*, unsigned long)>
c000819c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00081a0:	89 02                	mov    DWORD PTR [edx],eax
c00081a2:	31 c0                	xor    eax,eax
c00081a4:	83 c4 1c             	add    esp,0x1c
c00081a7:	c3                   	ret    

c00081a8 <setTerminalScrollLock(bool)>:
c00081a8:	c3                   	ret    

c00081a9 <doTerminalCycle()>:
c00081a9:	c3                   	ret    

c00081aa <addToTerminalCycle(VgaText*)>:
c00081aa:	c3                   	ret    

c00081ab <scrollTerminalScrollLock(int)>:
c00081ab:	c3                   	ret    

c00081ac <VgaText::updateTitle()>:
c00081ac:	c3                   	ret    
c00081ad:	90                   	nop

c00081ae <VgaText::load()>:
c00081ae:	c3                   	ret    
c00081af:	90                   	nop

c00081b0 <VgaText::updateCursor()>:
c00081b0:	83 ec 14             	sub    esp,0x14
c00081b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081b7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081ba:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081bd:	e8 d6 e1 00 00       	call   c0016398 <HalConsoleCursorUpdate(int, int)>
c00081c2:	83 c4 1c             	add    esp,0x1c
c00081c5:	c3                   	ret    

c00081c6 <VgaText::doANSI_SGR(int)>:
c00081c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081ce:	85 d2                	test   edx,edx
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x17>
c00081d2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081d5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081d8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081db:	eb 59                	jmp    c0008236 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 07             	cmp    edx,0x7
c00081e0:	75 0b                	jne    c00081ed <VgaText::doANSI_SGR(int)+0x27>
c00081e2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081e5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081e8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081eb:	eb 49                	jmp    c0008236 <VgaText::doANSI_SGR(int)+0x70>
c00081ed:	83 fa 1b             	cmp    edx,0x1b
c00081f0:	74 e0                	je     c00081d2 <VgaText::doANSI_SGR(int)+0xc>
c00081f2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081f5:	83 f9 07             	cmp    ecx,0x7
c00081f8:	77 09                	ja     c0008203 <VgaText::doANSI_SGR(int)+0x3d>
c00081fa:	8b 14 8d e0 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0820]
c0008201:	eb 20                	jmp    c0008223 <VgaText::doANSI_SGR(int)+0x5d>
c0008203:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008206:	83 f9 07             	cmp    ecx,0x7
c0008209:	77 09                	ja     c0008214 <VgaText::doANSI_SGR(int)+0x4e>
c000820b:	8b 14 8d e0 f7 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0820]
c0008212:	eb 22                	jmp    c0008236 <VgaText::doANSI_SGR(int)+0x70>
c0008214:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008217:	83 f9 07             	cmp    ecx,0x7
c000821a:	77 0b                	ja     c0008227 <VgaText::doANSI_SGR(int)+0x61>
c000821c:	8b 14 95 98 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0968]
c0008223:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008226:	c3                   	ret    
c0008227:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000822a:	83 f9 07             	cmp    ecx,0x7
c000822d:	77 0a                	ja     c0008239 <VgaText::doANSI_SGR(int)+0x73>
c000822f:	8b 14 95 70 f6 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0990]
c0008236:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008239:	c3                   	ret    

c000823a <VgaText::setDefaultBgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008245:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultFgColour(VgaColour)>:
c000824a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000824e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008252:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008255:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008258:	c3                   	ret    
c0008259:	90                   	nop

c000825a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000825a:	53                   	push   ebx
c000825b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000825f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008263:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008267:	51                   	push   ecx
c0008268:	e8 cd ff ff ff       	call   c000823a <VgaText::setDefaultBgColour(VgaColour)>
c000826d:	58                   	pop    eax
c000826e:	5a                   	pop    edx
c000826f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008273:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008277:	5b                   	pop    ebx
c0008278:	eb d0                	jmp    c000824a <VgaText::setDefaultFgColour(VgaColour)>

c000827a <VgaText::setTitleTextColour(VgaColour)>:
c000827a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008282:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008285:	c3                   	ret    

c0008286 <VgaText::setTitleColour(VgaColour)>:
c0008286:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000828a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000828e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008291:	c3                   	ret    

c0008292 <VgaText::setTitle(char*)>:
c0008292:	c3                   	ret    
c0008293:	90                   	nop

c0008294 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008294:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008298:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000829d:	83 e0 0f             	and    eax,0xf
c00082a0:	c1 e2 04             	shl    edx,0x4
c00082a3:	09 d0                	or     eax,edx
c00082a5:	c3                   	ret    

c00082a6 <VgaText::scrollScreen()>:
c00082a6:	55                   	push   ebp
c00082a7:	b9 01 00 00 00       	mov    ecx,0x1
c00082ac:	57                   	push   edi
c00082ad:	56                   	push   esi
c00082ae:	53                   	push   ebx
c00082af:	83 ec 0c             	sub    esp,0xc
c00082b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082b6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082bc:	31 ff                	xor    edi,edi
c00082be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082c1:	83 f9 18             	cmp    ecx,0x18
c00082c4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082c7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082ce:	75 27                	jne    c00082f7 <VgaText::scrollScreen()+0x51>
c00082d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082d3:	01 f5                	add    ebp,esi
c00082d5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082db:	74 16                	je     c00082f3 <VgaText::scrollScreen()+0x4d>
c00082dd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082e1:	50                   	push   eax
c00082e2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082e6:	50                   	push   eax
c00082e7:	e8 a8 ff ff ff       	call   c0008294 <VgaText::combineColours(unsigned char, unsigned char)>
c00082ec:	5a                   	pop    edx
c00082ed:	5a                   	pop    edx
c00082ee:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082f1:	eb 04                	jmp    c00082f7 <VgaText::scrollScreen()+0x51>
c00082f3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082f7:	47                   	inc    edi
c00082f8:	46                   	inc    esi
c00082f9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ff:	75 bd                	jne    c00082be <VgaText::scrollScreen()+0x18>
c0008301:	41                   	inc    ecx
c0008302:	83 f9 19             	cmp    ecx,0x19
c0008305:	75 af                	jne    c00082b6 <VgaText::scrollScreen()+0x10>
c0008307:	39 1d c4 0b 02 c0    	cmp    DWORD PTR ds:0xc0020bc4,ebx
c000830d:	75 1f                	jne    c000832e <VgaText::scrollScreen()+0x88>
c000830f:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008313:	74 05                	je     c000831a <VgaText::scrollScreen()+0x74>
c0008315:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008318:	eb 14                	jmp    c000832e <VgaText::scrollScreen()+0x88>
c000831a:	50                   	push   eax
c000831b:	50                   	push   eax
c000831c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008320:	50                   	push   eax
c0008321:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008325:	50                   	push   eax
c0008326:	e8 f9 de 00 00       	call   c0016224 <HalConsoleScroll(int, int)>
c000832b:	83 c4 10             	add    esp,0x10
c000832e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008332:	83 c4 0c             	add    esp,0xc
c0008335:	5b                   	pop    ebx
c0008336:	5e                   	pop    esi
c0008337:	5f                   	pop    edi
c0008338:	5d                   	pop    ebp
c0008339:	e9 72 fe ff ff       	jmp    c00081b0 <VgaText::updateCursor()>

c000833e <VgaText::combineCharAndColour(char, unsigned char)>:
c000833e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008343:	c1 e0 08             	shl    eax,0x8
c0008346:	89 c2                	mov    edx,eax
c0008348:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000834d:	09 d0                	or     eax,edx
c000834f:	c3                   	ret    

c0008350 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008350:	55                   	push   ebp
c0008351:	57                   	push   edi
c0008352:	56                   	push   esi
c0008353:	53                   	push   ebx
c0008354:	83 ec 1c             	sub    esp,0x1c
c0008357:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000835b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000835f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008363:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008367:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000836b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000836f:	0f b6 c3             	movzx  eax,bl
c0008372:	50                   	push   eax
c0008373:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008378:	50                   	push   eax
c0008379:	e8 16 ff ff ff       	call   c0008294 <VgaText::combineColours(unsigned char, unsigned char)>
c000837e:	5a                   	pop    edx
c000837f:	0f b6 c0             	movzx  eax,al
c0008382:	59                   	pop    ecx
c0008383:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008388:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000838c:	50                   	push   eax
c000838d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008391:	e8 a8 ff ff ff       	call   c000833e <VgaText::combineCharAndColour(char, unsigned char)>
c0008396:	5a                   	pop    edx
c0008397:	66 6b d7 50          	imul   dx,di,0x50
c000839b:	59                   	pop    ecx
c000839c:	01 f2                	add    edx,esi
c000839e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00083a1:	0f b7 d2             	movzx  edx,dx
c00083a4:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00083a8:	39 2d c4 0b 02 c0    	cmp    DWORD PTR ds:0xc0020bc4,ebp
c00083ae:	75 28                	jne    c00083d8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083b4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083b8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083bc:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083c0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083cc:	83 c4 1c             	add    esp,0x1c
c00083cf:	5b                   	pop    ebx
c00083d0:	5e                   	pop    esi
c00083d1:	5f                   	pop    edi
c00083d2:	5d                   	pop    ebp
c00083d3:	e9 54 df 00 00       	jmp    c001632c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083d8:	83 c4 1c             	add    esp,0x1c
c00083db:	5b                   	pop    ebx
c00083dc:	5e                   	pop    esi
c00083dd:	5f                   	pop    edi
c00083de:	5d                   	pop    ebp
c00083df:	c3                   	ret    

c00083e0 <VgaText::getCursorX()>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083e7:	c3                   	ret    

c00083e8 <VgaText::getCursorY()>:
c00083e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083ef:	c3                   	ret    

c00083f0 <VgaText::setCursor(int, int)>:
c00083f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083f8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ff:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008402:	e9 a9 fd ff ff       	jmp    c00081b0 <VgaText::updateCursor()>

c0008407 <setActiveTerminal(VgaText*)>:
c0008407:	53                   	push   ebx
c0008408:	83 ec 08             	sub    esp,0x8
c000840b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000840f:	85 db                	test   ebx,ebx
c0008411:	75 11                	jne    c0008424 <setActiveTerminal(VgaText*)+0x1d>
c0008413:	c7 44 24 10 84 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d784
c000841b:	83 c4 08             	add    esp,0x8
c000841e:	5b                   	pop    ebx
c000841f:	e9 47 7d 00 00       	jmp    c001016b <KePanic(char const*)>
c0008424:	a1 c4 0b 02 c0       	mov    eax,ds:0xc0020bc4
c0008429:	85 c0                	test   eax,eax
c000842b:	74 0c                	je     c0008439 <setActiveTerminal(VgaText*)+0x32>
c000842d:	83 ec 0c             	sub    esp,0xc
c0008430:	50                   	push   eax
c0008431:	e8 7a fd ff ff       	call   c00081b0 <VgaText::updateCursor()>
c0008436:	83 c4 10             	add    esp,0x10
c0008439:	89 1d c4 0b 02 c0    	mov    DWORD PTR ds:0xc0020bc4,ebx
c000843f:	50                   	push   eax
c0008440:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008443:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008446:	53                   	push   ebx
c0008447:	e8 a4 ff ff ff       	call   c00083f0 <VgaText::setCursor(int, int)>
c000844c:	83 c4 18             	add    esp,0x18
c000844f:	5b                   	pop    ebx
c0008450:	c3                   	ret    
c0008451:	90                   	nop

c0008452 <VgaText::clearScreen()>:
c0008452:	57                   	push   edi
c0008453:	56                   	push   esi
c0008454:	31 f6                	xor    esi,esi
c0008456:	53                   	push   ebx
c0008457:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000845b:	52                   	push   edx
c000845c:	6a 00                	push   0x0
c000845e:	6a 00                	push   0x0
c0008460:	53                   	push   ebx
c0008461:	e8 8a ff ff ff       	call   c00083f0 <VgaText::setCursor(int, int)>
c0008466:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000846d:	83 c4 10             	add    esp,0x10
c0008470:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008473:	7e 20                	jle    c0008495 <VgaText::clearScreen()+0x43>
c0008475:	31 ff                	xor    edi,edi
c0008477:	50                   	push   eax
c0008478:	50                   	push   eax
c0008479:	56                   	push   esi
c000847a:	57                   	push   edi
c000847b:	47                   	inc    edi
c000847c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000847f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008482:	6a 20                	push   0x20
c0008484:	53                   	push   ebx
c0008485:	e8 c6 fe ff ff       	call   c0008350 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000848a:	83 c4 20             	add    esp,0x20
c000848d:	83 ff 50             	cmp    edi,0x50
c0008490:	75 e5                	jne    c0008477 <VgaText::clearScreen()+0x25>
c0008492:	46                   	inc    esi
c0008493:	eb db                	jmp    c0008470 <VgaText::clearScreen()+0x1e>
c0008495:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000849c:	5b                   	pop    ebx
c000849d:	5e                   	pop    esi
c000849e:	5f                   	pop    edi
c000849f:	c3                   	ret    

c00084a0 <VgaText::setCursorX(int)>:
c00084a0:	83 ec 10             	sub    esp,0x10
c00084a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00084aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084ae:	50                   	push   eax
c00084af:	e8 3c ff ff ff       	call   c00083f0 <VgaText::setCursor(int, int)>
c00084b4:	83 c4 1c             	add    esp,0x1c
c00084b7:	c3                   	ret    

c00084b8 <VgaText::setCursorY(int)>:
c00084b8:	83 ec 10             	sub    esp,0x10
c00084bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084c3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084c6:	50                   	push   eax
c00084c7:	e8 24 ff ff ff       	call   c00083f0 <VgaText::setCursor(int, int)>
c00084cc:	83 c4 1c             	add    esp,0x1c
c00084cf:	c3                   	ret    

c00084d0 <VgaText::incrementCursor(bool)>:
c00084d0:	56                   	push   esi
c00084d1:	53                   	push   ebx
c00084d2:	51                   	push   ecx
c00084d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084de:	40                   	inc    eax
c00084df:	83 f8 50             	cmp    eax,0x50
c00084e2:	74 05                	je     c00084e9 <VgaText::incrementCursor(bool)+0x19>
c00084e4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084e7:	eb 24                	jmp    c000850d <VgaText::incrementCursor(bool)+0x3d>
c00084e9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084ec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084f3:	8d 50 01             	lea    edx,[eax+0x1]
c00084f6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084f9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084fc:	75 0f                	jne    c000850d <VgaText::incrementCursor(bool)+0x3d>
c00084fe:	83 ec 0c             	sub    esp,0xc
c0008501:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008504:	53                   	push   ebx
c0008505:	e8 9c fd ff ff       	call   c00082a6 <VgaText::scrollScreen()>
c000850a:	83 c4 10             	add    esp,0x10
c000850d:	89 f0                	mov    eax,esi
c000850f:	84 c0                	test   al,al
c0008511:	74 0c                	je     c000851f <VgaText::incrementCursor(bool)+0x4f>
c0008513:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008517:	5a                   	pop    edx
c0008518:	5b                   	pop    ebx
c0008519:	5e                   	pop    esi
c000851a:	e9 91 fc ff ff       	jmp    c00081b0 <VgaText::updateCursor()>
c000851f:	58                   	pop    eax
c0008520:	5b                   	pop    ebx
c0008521:	5e                   	pop    esi
c0008522:	c3                   	ret    
c0008523:	90                   	nop

c0008524 <VgaText::decrementCursor(bool)>:
c0008524:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008528:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000852c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000852f:	85 c0                	test   eax,eax
c0008531:	74 04                	je     c0008537 <VgaText::decrementCursor(bool)+0x13>
c0008533:	48                   	dec    eax
c0008534:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008537:	84 c9                	test   cl,cl
c0008539:	74 09                	je     c0008544 <VgaText::decrementCursor(bool)+0x20>
c000853b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000853f:	e9 6c fc ff ff       	jmp    c00081b0 <VgaText::updateCursor()>
c0008544:	c3                   	ret    
c0008545:	90                   	nop

c0008546 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008546:	53                   	push   ebx
c0008547:	83 ec 08             	sub    esp,0x8
c000854a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000854e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008552:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008556:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000855a:	3c 07                	cmp    al,0x7
c000855c:	75 21                	jne    c000857f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000855e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008566:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000856e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008576:	83 c4 08             	add    esp,0x8
c0008579:	5b                   	pop    ebx
c000857a:	e9 c0 2d 00 00       	jmp    c000b33f <Krnl::beep(int, int, bool)>
c000857f:	3c 0d                	cmp    al,0xd
c0008581:	75 09                	jne    c000858c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	eb 2c                	jmp    c00085b8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000858c:	3c 0a                	cmp    al,0xa
c000858e:	75 31                	jne    c00085c1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008590:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008593:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000859a:	8d 50 01             	lea    edx,[eax+0x1]
c000859d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00085a0:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00085a3:	75 0f                	jne    c00085b4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c00085a5:	83 ec 0c             	sub    esp,0xc
c00085a8:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00085ab:	53                   	push   ebx
c00085ac:	e8 f5 fc ff ff       	call   c00082a6 <VgaText::scrollScreen()>
c00085b1:	83 c4 10             	add    esp,0x10
c00085b4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085b8:	83 c4 08             	add    esp,0x8
c00085bb:	5b                   	pop    ebx
c00085bc:	e9 ef fb ff ff       	jmp    c00081b0 <VgaText::updateCursor()>
c00085c1:	3c 08                	cmp    al,0x8
c00085c3:	75 25                	jne    c00085ea <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085c5:	50                   	push   eax
c00085c6:	50                   	push   eax
c00085c7:	6a 01                	push   0x1
c00085c9:	53                   	push   ebx
c00085ca:	e8 55 ff ff ff       	call   c0008524 <VgaText::decrementCursor(bool)>
c00085cf:	5a                   	pop    edx
c00085d0:	59                   	pop    ecx
c00085d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085d4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085da:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085dd:	6a 20                	push   0x20
c00085df:	53                   	push   ebx
c00085e0:	e8 6b fd ff ff       	call   c0008350 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085e5:	83 c4 28             	add    esp,0x28
c00085e8:	5b                   	pop    ebx
c00085e9:	c3                   	ret    
c00085ea:	83 ec 08             	sub    esp,0x8
c00085ed:	0f be c0             	movsx  eax,al
c00085f0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085f3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085f6:	51                   	push   ecx
c00085f7:	52                   	push   edx
c00085f8:	50                   	push   eax
c00085f9:	53                   	push   ebx
c00085fa:	e8 51 fd ff ff       	call   c0008350 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ff:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008603:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000860b:	83 c4 28             	add    esp,0x28
c000860e:	5b                   	pop    ebx
c000860f:	e9 bc fe ff ff       	jmp    c00084d0 <VgaText::incrementCursor(bool)>

c0008614 <VgaText::putchar(char)>:
c0008614:	56                   	push   esi
c0008615:	53                   	push   ebx
c0008616:	83 ec 14             	sub    esp,0x14
c0008619:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000861d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008621:	3c 5b                	cmp    al,0x5b
c0008623:	75 18                	jne    c000863d <VgaText::putchar(char)+0x29>
c0008625:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008629:	74 1f                	je     c000864a <VgaText::putchar(char)+0x36>
c000862b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008631:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008638:	e9 bd 00 00 00       	jmp    c00086fa <VgaText::putchar(char)+0xe6>
c000863d:	3c 1b                	cmp    al,0x1b
c000863f:	75 09                	jne    c000864a <VgaText::putchar(char)+0x36>
c0008641:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008645:	e9 b0 00 00 00       	jmp    c00086fa <VgaText::putchar(char)+0xe6>
c000864a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000864d:	84 c9                	test   cl,cl
c000864f:	0f 84 92 00 00 00    	je     c00086e7 <VgaText::putchar(char)+0xd3>
c0008655:	8d 50 c0             	lea    edx,[eax-0x40]
c0008658:	80 fa 3e             	cmp    dl,0x3e
c000865b:	77 76                	ja     c00086d3 <VgaText::putchar(char)+0xbf>
c000865d:	3c 6d                	cmp    al,0x6d
c000865f:	75 47                	jne    c00086a8 <VgaText::putchar(char)+0x94>
c0008661:	31 f6                	xor    esi,esi
c0008663:	31 d2                	xor    edx,edx
c0008665:	31 c0                	xor    eax,eax
c0008667:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000866a:	7e 2d                	jle    c0008699 <VgaText::putchar(char)+0x85>
c000866c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008671:	80 fa 3b             	cmp    dl,0x3b
c0008674:	75 17                	jne    c000868d <VgaText::putchar(char)+0x79>
c0008676:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000867a:	50                   	push   eax
c000867b:	53                   	push   ebx
c000867c:	e8 45 fb ff ff       	call   c00081c6 <VgaText::doANSI_SGR(int)>
c0008681:	59                   	pop    ecx
c0008682:	31 d2                	xor    edx,edx
c0008684:	58                   	pop    eax
c0008685:	31 c0                	xor    eax,eax
c0008687:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000868b:	eb 09                	jmp    c0008696 <VgaText::putchar(char)+0x82>
c000868d:	6b c0 0a             	imul   eax,eax,0xa
c0008690:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008694:	88 ca                	mov    dl,cl
c0008696:	46                   	inc    esi
c0008697:	eb ce                	jmp    c0008667 <VgaText::putchar(char)+0x53>
c0008699:	84 d2                	test   dl,dl
c000869b:	74 2e                	je     c00086cb <VgaText::putchar(char)+0xb7>
c000869d:	50                   	push   eax
c000869e:	53                   	push   ebx
c000869f:	e8 22 fb ff ff       	call   c00081c6 <VgaText::doANSI_SGR(int)>
c00086a4:	58                   	pop    eax
c00086a5:	5a                   	pop    edx
c00086a6:	eb 23                	jmp    c00086cb <VgaText::putchar(char)+0xb7>
c00086a8:	3c 4a                	cmp    al,0x4a
c00086aa:	75 1f                	jne    c00086cb <VgaText::putchar(char)+0xb7>
c00086ac:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086b0:	75 19                	jne    c00086cb <VgaText::putchar(char)+0xb7>
c00086b2:	83 ec 0c             	sub    esp,0xc
c00086b5:	53                   	push   ebx
c00086b6:	e8 97 fd ff ff       	call   c0008452 <VgaText::clearScreen()>
c00086bb:	83 c4 0c             	add    esp,0xc
c00086be:	6a 00                	push   0x0
c00086c0:	6a 00                	push   0x0
c00086c2:	53                   	push   ebx
c00086c3:	e8 28 fd ff ff       	call   c00083f0 <VgaText::setCursor(int, int)>
c00086c8:	83 c4 10             	add    esp,0x10
c00086cb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086d1:	eb 27                	jmp    c00086fa <VgaText::putchar(char)+0xe6>
c00086d3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086d6:	83 fa 0e             	cmp    edx,0xe
c00086d9:	7f 1f                	jg     c00086fa <VgaText::putchar(char)+0xe6>
c00086db:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086de:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086e1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086e5:	eb 13                	jmp    c00086fa <VgaText::putchar(char)+0xe6>
c00086e7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086ea:	0f be c0             	movsx  eax,al
c00086ed:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086f0:	50                   	push   eax
c00086f1:	53                   	push   ebx
c00086f2:	e8 4f fe ff ff       	call   c0008546 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086f7:	83 c4 10             	add    esp,0x10
c00086fa:	83 c4 14             	add    esp,0x14
c00086fd:	5b                   	pop    ebx
c00086fe:	5e                   	pop    esi
c00086ff:	c3                   	ret    

c0008700 <VgaText::putx(unsigned int)>:
c0008700:	57                   	push   edi
c0008701:	b9 11 00 00 00       	mov    ecx,0x11
c0008706:	56                   	push   esi
c0008707:	be 92 d7 01 c0       	mov    esi,0xc001d792
c000870c:	53                   	push   ebx
c000870d:	83 ec 20             	sub    esp,0x20
c0008710:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008714:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008718:	fc                   	cld    
c0008719:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000871b:	be 08 00 00 00       	mov    esi,0x8
c0008720:	50                   	push   eax
c0008721:	50                   	push   eax
c0008722:	89 d8                	mov    eax,ebx
c0008724:	c1 e3 04             	shl    ebx,0x4
c0008727:	c1 e8 1c             	shr    eax,0x1c
c000872a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000872f:	50                   	push   eax
c0008730:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008734:	e8 db fe ff ff       	call   c0008614 <VgaText::putchar(char)>
c0008739:	83 c4 10             	add    esp,0x10
c000873c:	4e                   	dec    esi
c000873d:	75 e1                	jne    c0008720 <VgaText::putx(unsigned int)+0x20>
c000873f:	83 c4 20             	add    esp,0x20
c0008742:	5b                   	pop    ebx
c0008743:	5e                   	pop    esi
c0008744:	5f                   	pop    edi
c0008745:	c3                   	ret    

c0008746 <VgaText::puts(char const*)>:
c0008746:	53                   	push   ebx
c0008747:	83 ec 08             	sub    esp,0x8
c000874a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000874e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008751:	84 c0                	test   al,al
c0008753:	74 12                	je     c0008767 <VgaText::puts(char const*)+0x21>
c0008755:	43                   	inc    ebx
c0008756:	51                   	push   ecx
c0008757:	51                   	push   ecx
c0008758:	50                   	push   eax
c0008759:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000875d:	e8 b2 fe ff ff       	call   c0008614 <VgaText::putchar(char)>
c0008762:	83 c4 10             	add    esp,0x10
c0008765:	eb e7                	jmp    c000874e <VgaText::puts(char const*)+0x8>
c0008767:	83 c4 08             	add    esp,0x8
c000876a:	5b                   	pop    ebx
c000876b:	c3                   	ret    

c000876c <VgaText::write(unsigned long long, void*, int*)>:
c000876c:	55                   	push   ebp
c000876d:	57                   	push   edi
c000876e:	56                   	push   esi
c000876f:	53                   	push   ebx
c0008770:	83 ec 0c             	sub    esp,0xc
c0008773:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008777:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000877b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000877f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008786:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008789:	39 eb                	cmp    ebx,ebp
c000878b:	74 13                	je     c00087a0 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000878d:	43                   	inc    ebx
c000878e:	50                   	push   eax
c000878f:	50                   	push   eax
c0008790:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008794:	50                   	push   eax
c0008795:	56                   	push   esi
c0008796:	e8 79 fe ff ff       	call   c0008614 <VgaText::putchar(char)>
c000879b:	83 c4 10             	add    esp,0x10
c000879e:	eb e9                	jmp    c0008789 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00087a0:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00087a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00087ab:	89 38                	mov    DWORD PTR [eax],edi
c00087ad:	83 c4 0c             	add    esp,0xc
c00087b0:	31 c0                	xor    eax,eax
c00087b2:	5b                   	pop    ebx
c00087b3:	5e                   	pop    esi
c00087b4:	5f                   	pop    edi
c00087b5:	5d                   	pop    ebp
c00087b6:	c3                   	ret    
c00087b7:	90                   	nop

c00087b8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087b8:	55                   	push   ebp
c00087b9:	57                   	push   edi
c00087ba:	56                   	push   esi
c00087bb:	53                   	push   ebx
c00087bc:	83 ec 0c             	sub    esp,0xc
c00087bf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087c3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087cf:	50                   	push   eax
c00087d0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087d5:	50                   	push   eax
c00087d6:	e8 b9 fa ff ff       	call   c0008294 <VgaText::combineColours(unsigned char, unsigned char)>
c00087db:	5a                   	pop    edx
c00087dc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087e1:	59                   	pop    ecx
c00087e2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087e5:	89 c5                	mov    ebp,eax
c00087e7:	0f b7 f6             	movzx  esi,si
c00087ea:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087ee:	01 f6                	add    esi,esi
c00087f0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087f3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087f6:	84 c0                	test   al,al
c00087f8:	0f 84 f4 00 00 00    	je     c00088f2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087fe:	3c 0d                	cmp    al,0xd
c0008800:	75 0c                	jne    c000880e <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008802:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008809:	e9 de 00 00 00       	jmp    c00088ec <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c000880e:	3c 0a                	cmp    al,0xa
c0008810:	75 45                	jne    c0008857 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008812:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008815:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000881c:	8d 48 01             	lea    ecx,[eax+0x1]
c000881f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008822:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008825:	75 0f                	jne    c0008836 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008827:	83 ec 0c             	sub    esp,0xc
c000882a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000882d:	53                   	push   ebx
c000882e:	e8 73 fa ff ff       	call   c00082a6 <VgaText::scrollScreen()>
c0008833:	83 c4 10             	add    esp,0x10
c0008836:	83 ec 0c             	sub    esp,0xc
c0008839:	53                   	push   ebx
c000883a:	e8 71 f9 ff ff       	call   c00081b0 <VgaText::updateCursor()>
c000883f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008844:	83 c4 10             	add    esp,0x10
c0008847:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000884a:	0f b7 f6             	movzx  esi,si
c000884d:	01 f6                	add    esi,esi
c000884f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008852:	e9 95 00 00 00       	jmp    c00088ec <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008857:	3c 08                	cmp    al,0x8
c0008859:	75 35                	jne    c0008890 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000885b:	51                   	push   ecx
c000885c:	51                   	push   ecx
c000885d:	6a 01                	push   0x1
c000885f:	53                   	push   ebx
c0008860:	e8 bf fc ff ff       	call   c0008524 <VgaText::decrementCursor(bool)>
c0008865:	5e                   	pop    esi
c0008866:	58                   	pop    eax
c0008867:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000886a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000886d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008870:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008873:	6a 20                	push   0x20
c0008875:	53                   	push   ebx
c0008876:	e8 d5 fa ff ff       	call   c0008350 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000887b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008880:	83 c4 20             	add    esp,0x20
c0008883:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008886:	0f b7 f6             	movzx  esi,si
c0008889:	01 f6                	add    esi,esi
c000888b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000888e:	eb 5c                	jmp    c00088ec <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008890:	52                   	push   edx
c0008891:	52                   	push   edx
c0008892:	89 ea                	mov    edx,ebp
c0008894:	0f b6 ca             	movzx  ecx,dl
c0008897:	51                   	push   ecx
c0008898:	50                   	push   eax
c0008899:	e8 a0 fa ff ff       	call   c000833e <VgaText::combineCharAndColour(char, unsigned char)>
c000889e:	83 c4 10             	add    esp,0x10
c00088a1:	66 89 06             	mov    WORD PTR [esi],ax
c00088a4:	39 1d c4 0b 02 c0    	cmp    DWORD PTR ds:0xc0020bc4,ebx
c00088aa:	75 1d                	jne    c00088c9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c00088ac:	83 ec 0c             	sub    esp,0xc
c00088af:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088b2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088b5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088b9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088bd:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088c0:	50                   	push   eax
c00088c1:	e8 66 da 00 00       	call   c001632c <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088c6:	83 c4 20             	add    esp,0x20
c00088c9:	83 c6 02             	add    esi,0x2
c00088cc:	50                   	push   eax
c00088cd:	50                   	push   eax
c00088ce:	6a 00                	push   0x0
c00088d0:	53                   	push   ebx
c00088d1:	e8 fa fb ff ff       	call   c00084d0 <VgaText::incrementCursor(bool)>
c00088d6:	83 c4 10             	add    esp,0x10
c00088d9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088dd:	75 0d                	jne    c00088ec <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088df:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088e4:	0f b7 f6             	movzx  esi,si
c00088e7:	01 f6                	add    esi,esi
c00088e9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088ec:	47                   	inc    edi
c00088ed:	e9 01 ff ff ff       	jmp    c00087f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088f2:	83 ec 0c             	sub    esp,0xc
c00088f5:	53                   	push   ebx
c00088f6:	e8 b5 f8 ff ff       	call   c00081b0 <VgaText::updateCursor()>
c00088fb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008902:	83 c4 1c             	add    esp,0x1c
c0008905:	5b                   	pop    ebx
c0008906:	5e                   	pop    esi
c0008907:	5f                   	pop    edi
c0008908:	5d                   	pop    ebp
c0008909:	c3                   	ret    

c000890a <VgaText::VgaText(char const*)>:
c000890a:	56                   	push   esi
c000890b:	53                   	push   ebx
c000890c:	83 ec 04             	sub    esp,0x4
c000890f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	6a 00                	push   0x0
c0008918:	50                   	push   eax
c0008919:	e8 34 05 00 00       	call   c0008e52 <UnixFile::UnixFile(int)>
c000891e:	83 c4 10             	add    esp,0x10
c0008921:	ba 04 d8 01 c0       	mov    edx,0xc001d804
c0008926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892a:	89 10                	mov    DWORD PTR [eax],edx
c000892c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008930:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000894a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000894e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008956:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000895d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008961:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008968:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008977:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000897e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008982:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008989:	83 ec 0c             	sub    esp,0xc
c000898c:	6a 01                	push   0x1
c000898e:	e8 02 09 00 00       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	89 c2                	mov    edx,eax
c0008998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000899c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000899f:	8b 1d 70 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c70
c00089a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ac:	89 c6                	mov    esi,eax
c00089ae:	e8 f2 f0 ff ff       	call   c0007aa5 <Phys::allocatePage()>
c00089b3:	68 05 0c 00 00       	push   0xc05
c00089b8:	56                   	push   esi
c00089b9:	50                   	push   eax
c00089ba:	53                   	push   ebx
c00089bb:	e8 6a 0f 00 00       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ca:	83 ec 04             	sub    esp,0x4
c00089cd:	68 a0 0f 00 00       	push   0xfa0
c00089d2:	6a 00                	push   0x0
c00089d4:	50                   	push   eax
c00089d5:	e8 06 7b ff ff       	call   c00004e0 <memset>
c00089da:	83 c4 10             	add    esp,0x10
c00089dd:	83 ec 04             	sub    esp,0x4
c00089e0:	6a 00                	push   0x0
c00089e2:	6a 07                	push   0x7
c00089e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e8:	e8 6d f8 ff ff       	call   c000825a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089ed:	83 c4 10             	add    esp,0x10
c00089f0:	83 ec 04             	sub    esp,0x4
c00089f3:	6a 00                	push   0x0
c00089f5:	6a 00                	push   0x0
c00089f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fb:	e8 f0 f9 ff ff       	call   c00083f0 <VgaText::setCursor(int, int)>
c0008a00:	83 c4 10             	add    esp,0x10
c0008a03:	83 ec 0c             	sub    esp,0xc
c0008a06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a0a:	e8 43 fa ff ff       	call   c0008452 <VgaText::clearScreen()>
c0008a0f:	83 c4 10             	add    esp,0x10
c0008a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a16:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a1e:	05 82 00 00 00       	add    eax,0x82
c0008a23:	83 ec 04             	sub    esp,0x4
c0008a26:	6a 30                	push   0x30
c0008a28:	6a 00                	push   0x0
c0008a2a:	50                   	push   eax
c0008a2b:	e8 b0 7a ff ff       	call   c00004e0 <memset>
c0008a30:	83 c4 10             	add    esp,0x10
c0008a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a37:	05 b2 00 00 00       	add    eax,0xb2
c0008a3c:	83 ec 04             	sub    esp,0x4
c0008a3f:	68 80 00 00 00       	push   0x80
c0008a44:	6a 00                	push   0x0
c0008a46:	50                   	push   eax
c0008a47:	e8 94 7a ff ff       	call   c00004e0 <memset>
c0008a4c:	83 c4 10             	add    esp,0x10
c0008a4f:	90                   	nop
c0008a50:	83 c4 04             	add    esp,0x4
c0008a53:	5b                   	pop    ebx
c0008a54:	5e                   	pop    esi
c0008a55:	c3                   	ret    

c0008a56 <VgaText::receiveKey(unsigned char)>:
c0008a56:	57                   	push   edi
c0008a57:	56                   	push   esi
c0008a58:	53                   	push   ebx
c0008a59:	83 ec 10             	sub    esp,0x10
c0008a5c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a60:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a64:	89 f0                	mov    eax,esi
c0008a66:	84 c0                	test   al,al
c0008a68:	0f 84 3b 01 00 00    	je     c0008ba9 <VgaText::receiveKey(unsigned char)+0x153>
c0008a6e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a74:	3c 08                	cmp    al,0x8
c0008a76:	75 68                	jne    c0008ae0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a78:	83 ec 0c             	sub    esp,0xc
c0008a7b:	57                   	push   edi
c0008a7c:	e8 cf 7a ff ff       	call   c0000550 <strlen>
c0008a81:	83 c4 10             	add    esp,0x10
c0008a84:	85 c0                	test   eax,eax
c0008a86:	0f 84 be 00 00 00    	je     c0008b4a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a8c:	50                   	push   eax
c0008a8d:	50                   	push   eax
c0008a8e:	6a 08                	push   0x8
c0008a90:	53                   	push   ebx
c0008a91:	e8 7e fb ff ff       	call   c0008614 <VgaText::putchar(char)>
c0008a96:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a99:	e8 b2 7a ff ff       	call   c0000550 <strlen>
c0008a9e:	83 c4 10             	add    esp,0x10
c0008aa1:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008aa8:	3c 0d                	cmp    al,0xd
c0008aaa:	0f 95 c1             	setne  cl
c0008aad:	3c 18                	cmp    al,0x18
c0008aaf:	0f 9e c2             	setle  dl
c0008ab2:	84 d1                	test   cl,dl
c0008ab4:	74 17                	je     c0008acd <VgaText::receiveKey(unsigned char)+0x77>
c0008ab6:	83 e8 08             	sub    eax,0x8
c0008ab9:	3c 02                	cmp    al,0x2
c0008abb:	76 10                	jbe    c0008acd <VgaText::receiveKey(unsigned char)+0x77>
c0008abd:	50                   	push   eax
c0008abe:	50                   	push   eax
c0008abf:	68 a3 d7 01 c0       	push   0xc001d7a3
c0008ac4:	53                   	push   ebx
c0008ac5:	e8 7c fc ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0008aca:	83 c4 10             	add    esp,0x10
c0008acd:	83 ec 0c             	sub    esp,0xc
c0008ad0:	57                   	push   edi
c0008ad1:	e8 7a 7a ff ff       	call   c0000550 <strlen>
c0008ad6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ade:	eb 67                	jmp    c0008b47 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ae0:	3c 18                	cmp    al,0x18
c0008ae2:	0f 96 c2             	setbe  dl
c0008ae5:	3c 0d                	cmp    al,0xd
c0008ae7:	0f 95 c0             	setne  al
c0008aea:	84 c2                	test   dl,al
c0008aec:	74 30                	je     c0008b1e <VgaText::receiveKey(unsigned char)+0xc8>
c0008aee:	8d 46 f7             	lea    eax,[esi-0x9]
c0008af1:	3c 01                	cmp    al,0x1
c0008af3:	76 29                	jbe    c0008b1e <VgaText::receiveKey(unsigned char)+0xc8>
c0008af5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008afb:	68 a9 d7 01 c0       	push   0xc001d7a9
c0008b00:	53                   	push   ebx
c0008b01:	e8 b2 fc ff ff       	call   c00087b8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008b06:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b09:	8d 46 40             	lea    eax,[esi+0x40]
c0008b0c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b0f:	0f b6 c0             	movzx  eax,al
c0008b12:	50                   	push   eax
c0008b13:	53                   	push   ebx
c0008b14:	e8 2d fa ff ff       	call   c0008546 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b19:	83 c4 20             	add    esp,0x20
c0008b1c:	eb 11                	jmp    c0008b2f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b1e:	89 f0                	mov    eax,esi
c0008b20:	51                   	push   ecx
c0008b21:	0f be c0             	movsx  eax,al
c0008b24:	51                   	push   ecx
c0008b25:	50                   	push   eax
c0008b26:	53                   	push   ebx
c0008b27:	e8 e8 fa ff ff       	call   c0008614 <VgaText::putchar(char)>
c0008b2c:	83 c4 10             	add    esp,0x10
c0008b2f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b34:	89 f0                	mov    eax,esi
c0008b36:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b3a:	52                   	push   edx
c0008b3b:	52                   	push   edx
c0008b3c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b40:	50                   	push   eax
c0008b41:	57                   	push   edi
c0008b42:	e8 89 7c ff ff       	call   c00007d0 <strcat>
c0008b47:	83 c4 10             	add    esp,0x10
c0008b4a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b51:	75 06                	jne    c0008b59 <VgaText::receiveKey(unsigned char)+0x103>
c0008b53:	89 f0                	mov    eax,esi
c0008b55:	3c 0a                	cmp    al,0xa
c0008b57:	75 50                	jne    c0008ba9 <VgaText::receiveKey(unsigned char)+0x153>
c0008b59:	83 ec 0c             	sub    esp,0xc
c0008b5c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b62:	53                   	push   ebx
c0008b63:	e8 e8 79 ff ff       	call   c0000550 <strlen>
c0008b68:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b6b:	89 c6                	mov    esi,eax
c0008b6d:	e8 de 79 ff ff       	call   c0000550 <strlen>
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b79:	3d 80 00 00 00       	cmp    eax,0x80
c0008b7e:	76 10                	jbe    c0008b90 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b80:	83 ec 0c             	sub    esp,0xc
c0008b83:	68 af d7 01 c0       	push   0xc001d7af
c0008b88:	e8 de 75 00 00       	call   c001016b <KePanic(char const*)>
c0008b8d:	83 c4 10             	add    esp,0x10
c0008b90:	50                   	push   eax
c0008b91:	50                   	push   eax
c0008b92:	57                   	push   edi
c0008b93:	53                   	push   ebx
c0008b94:	e8 37 7c ff ff       	call   c00007d0 <strcat>
c0008b99:	83 c4 0c             	add    esp,0xc
c0008b9c:	6a 30                	push   0x30
c0008b9e:	6a 00                	push   0x0
c0008ba0:	57                   	push   edi
c0008ba1:	e8 3a 79 ff ff       	call   c00004e0 <memset>
c0008ba6:	83 c4 10             	add    esp,0x10
c0008ba9:	83 c4 10             	add    esp,0x10
c0008bac:	5b                   	pop    ebx
c0008bad:	5e                   	pop    esi
c0008bae:	5f                   	pop    edi
c0008baf:	c3                   	ret    

c0008bb0 <VgaText::doUpdate()>:
c0008bb0:	c3                   	ret    

c0008bb1 <newTerminal(char*)>:
c0008bb1:	83 ec 28             	sub    esp,0x28
c0008bb4:	68 34 01 00 00       	push   0x134
c0008bb9:	e8 0b ec ff ff       	call   c00077c9 <malloc>
c0008bbe:	5a                   	pop    edx
c0008bbf:	59                   	pop    ecx
c0008bc0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bc4:	50                   	push   eax
c0008bc5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bc9:	e8 3c fd ff ff       	call   c000890a <VgaText::VgaText(char const*)>
c0008bce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bd2:	83 c4 2c             	add    esp,0x2c
c0008bd5:	c3                   	ret    
c0008bd6:	66 90                	xchg   ax,ax

c0008bd8 <TSS::TSS()>:
c0008bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bdc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008be3:	90                   	nop
c0008be4:	c3                   	ret    
c0008be5:	90                   	nop
c0008be6:	66 90                	xchg   ax,ax

c0008be8 <TSS::setESP(unsigned long)>:
c0008be8:	55                   	push   ebp
c0008be9:	89 e5                	mov    ebp,esp
c0008beb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008bf1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008bf4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008bf7:	90                   	nop
c0008bf8:	5d                   	pop    ebp
c0008bf9:	c3                   	ret    
c0008bfa:	66 90                	xchg   ax,ax

c0008bfc <TSS::flush()>:
c0008bfc:	55                   	push   ebp
c0008bfd:	89 e5                	mov    ebp,esp
c0008bff:	83 ec 10             	sub    esp,0x10
c0008c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0008c07:	83 c8 03             	or     eax,0x3
c0008c0a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008c0e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c12:	66 89 d0             	mov    ax,dx
c0008c15:	0f 00 d8             	ltr    ax
c0008c18:	90                   	nop
c0008c19:	c9                   	leave  
c0008c1a:	c3                   	ret    
c0008c1b:	90                   	nop

c0008c1c <TSS::setup(unsigned long, unsigned long)>:
c0008c1c:	55                   	push   ebp
c0008c1d:	89 e5                	mov    ebp,esp
c0008c1f:	83 ec 18             	sub    esp,0x18
c0008c22:	83 ec 0c             	sub    esp,0xc
c0008c25:	6a 68                	push   0x68
c0008c27:	e8 9d eb ff ff       	call   c00077c9 <malloc>
c0008c2c:	83 c4 10             	add    esp,0x10
c0008c2f:	89 c2                	mov    edx,eax
c0008c31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c3d:	83 ec 04             	sub    esp,0x4
c0008c40:	6a 68                	push   0x68
c0008c42:	6a 00                	push   0x0
c0008c44:	50                   	push   eax
c0008c45:	e8 96 78 ff ff       	call   c00004e0 <memset>
c0008c4a:	83 c4 10             	add    esp,0x10
c0008c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c50:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c53:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c6b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c77:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c83:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c8c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c9b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ca1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008cad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cb3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008cb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cc2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ccb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cce:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce4:	0f 20 da             	mov    edx,cr3
c0008ce7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cea:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008ced:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008cf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	50                   	push   eax
c0008cfa:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfd:	50                   	push   eax
c0008cfe:	e8 4d e3 ff ff       	call   c0007050 <GDTEntry::setBase(unsigned int)>
c0008d03:	83 c4 10             	add    esp,0x10
c0008d06:	83 ec 08             	sub    esp,0x8
c0008d09:	6a 68                	push   0x68
c0008d0b:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008d0e:	50                   	push   eax
c0008d0f:	e8 58 e3 ff ff       	call   c000706c <GDTEntry::setLimit(unsigned int)>
c0008d14:	83 c4 10             	add    esp,0x10
c0008d17:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d1b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d1e:	83 e0 0f             	and    eax,0xf
c0008d21:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d24:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d27:	83 c8 40             	or     eax,0x40
c0008d2a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d2d:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0008d32:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d38:	05 78 01 00 00       	add    eax,0x178
c0008d3d:	83 ec 04             	sub    esp,0x4
c0008d40:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d43:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d46:	50                   	push   eax
c0008d47:	e8 54 e3 ff ff       	call   c00070a0 <GDT::addEntry(GDTEntry)>
c0008d4c:	83 c4 10             	add    esp,0x10
c0008d4f:	89 c2                	mov    edx,eax
c0008d51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d54:	89 10                	mov    DWORD PTR [eax],edx
c0008d56:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0008d5b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d61:	05 78 01 00 00       	add    eax,0x178
c0008d66:	83 ec 0c             	sub    esp,0xc
c0008d69:	50                   	push   eax
c0008d6a:	e8 5b e3 ff ff       	call   c00070ca <GDT::flush()>
c0008d6f:	83 c4 10             	add    esp,0x10
c0008d72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d75:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d77:	c9                   	leave  
c0008d78:	c3                   	ret    
c0008d79:	90                   	nop

c0008d7a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d85:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d8a:	75 08                	jne    c0008d94 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d8c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d92:	eb 38                	jmp    c0008dcc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d94:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d99:	75 17                	jne    c0008db2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008da0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008da3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008da9:	8b 10                	mov    edx,DWORD PTR [eax]
c0008dab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008daf:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008db2:	89 c1                	mov    ecx,eax
c0008db4:	83 e1 fd             	and    ecx,0xfffffffd
c0008db7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dbd:	74 cd                	je     c0008d8c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008dc4:	83 e0 ef             	and    eax,0xffffffef
c0008dc7:	83 f8 08             	cmp    eax,0x8
c0008dca:	76 c0                	jbe    c0008d8c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dcc:	31 c0                	xor    eax,eax
c0008dce:	c3                   	ret    
c0008dcf:	90                   	nop

c0008dd0 <ReservedFilename::isAtty()>:
c0008dd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dd4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dd7:	31 c0                	xor    eax,eax
c0008dd9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008ddf:	74 09                	je     c0008dea <ReservedFilename::isAtty()+0x1a>
c0008de1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008de7:	0f 94 c0             	sete   al
c0008dea:	c3                   	ret    
c0008deb:	90                   	nop

c0008dec <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008df0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008df4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008df7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008dfb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e00:	75 08                	jne    c0008e0a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008e02:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e08:	eb 3d                	jmp    c0008e47 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e0a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e0f:	75 17                	jne    c0008e28 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e19:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e21:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e25:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e28:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e2d:	75 04                	jne    c0008e33 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e2f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e31:	eb 14                	jmp    c0008e47 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e33:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e38:	74 c8                	je     c0008e02 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e3a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e3f:	83 e0 ef             	and    eax,0xffffffef
c0008e42:	83 f8 08             	cmp    eax,0x8
c0008e45:	76 bb                	jbe    c0008e02 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e47:	31 c0                	xor    eax,eax
c0008e49:	c3                   	ret    

c0008e4a <UnixFile::getFileDescriptor()>:
c0008e4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e51:	c3                   	ret    

c0008e52 <UnixFile::UnixFile(int)>:
c0008e52:	53                   	push   ebx
c0008e53:	83 ec 28             	sub    esp,0x28
c0008e56:	ba cc d8 01 c0       	mov    edx,0xc001d8cc
c0008e5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e5f:	89 10                	mov    DWORD PTR [eax],edx
c0008e61:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e69:	0f 8f 8c 01 00 00    	jg     c0008ffb <UnixFile::UnixFile(int)+0x1a9>
c0008e6f:	a1 20 f8 01 c0       	mov    eax,ds:0xc001f820
c0008e74:	8d 50 01             	lea    edx,[eax+0x1]
c0008e77:	89 15 20 f8 01 c0    	mov    DWORD PTR ds:0xc001f820,edx
c0008e7d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e81:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e84:	83 ec 08             	sub    esp,0x8
c0008e87:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e8b:	68 58 0c 02 c0       	push   0xc0020c58
c0008e90:	e8 13 35 01 00       	call   c001c3a8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e95:	83 c4 10             	add    esp,0x10
c0008e98:	a0 54 0c 02 c0       	mov    al,ds:0xc0020c54
c0008e9d:	83 f0 01             	xor    eax,0x1
c0008ea0:	84 c0                	test   al,al
c0008ea2:	0f 84 54 01 00 00    	je     c0008ffc <UnixFile::UnixFile(int)+0x1aa>
c0008ea8:	c6 05 54 0c 02 c0 01 	mov    BYTE PTR ds:0xc0020c54,0x1
c0008eaf:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008eb7:	83 ec 0c             	sub    esp,0xc
c0008eba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008ebe:	e8 06 e9 ff ff       	call   c00077c9 <malloc>
c0008ec3:	83 c4 10             	add    esp,0x10
c0008ec6:	89 c3                	mov    ebx,eax
c0008ec8:	83 ec 08             	sub    esp,0x8
c0008ecb:	68 03 ff ff 0f       	push   0xfffff03
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 2c 01 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	89 1d 4c 0c 02 c0    	mov    DWORD PTR ds:0xc0020c4c,ebx
c0008edf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ee7:	83 ec 0c             	sub    esp,0xc
c0008eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008eee:	e8 d6 e8 ff ff       	call   c00077c9 <malloc>
c0008ef3:	83 c4 10             	add    esp,0x10
c0008ef6:	89 c3                	mov    ebx,eax
c0008ef8:	83 ec 08             	sub    esp,0x8
c0008efb:	68 01 ff ff 0f       	push   0xfffff01
c0008f00:	53                   	push   ebx
c0008f01:	e8 fc 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008f06:	83 c4 10             	add    esp,0x10
c0008f09:	89 1d 50 0c 02 c0    	mov    DWORD PTR ds:0xc0020c50,ebx
c0008f0f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f17:	83 ec 0c             	sub    esp,0xc
c0008f1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f1e:	e8 a6 e8 ff ff       	call   c00077c9 <malloc>
c0008f23:	83 c4 10             	add    esp,0x10
c0008f26:	89 c3                	mov    ebx,eax
c0008f28:	83 ec 08             	sub    esp,0x8
c0008f2b:	68 00 ff ff 0f       	push   0xfffff00
c0008f30:	53                   	push   ebx
c0008f31:	e8 cc 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	89 1d 44 0c 02 c0    	mov    DWORD PTR ds:0xc0020c44,ebx
c0008f3f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f47:	83 ec 0c             	sub    esp,0xc
c0008f4a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f4e:	e8 76 e8 ff ff       	call   c00077c9 <malloc>
c0008f53:	83 c4 10             	add    esp,0x10
c0008f56:	89 c3                	mov    ebx,eax
c0008f58:	83 ec 08             	sub    esp,0x8
c0008f5b:	68 02 ff ff 0f       	push   0xfffff02
c0008f60:	53                   	push   ebx
c0008f61:	e8 9c 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008f66:	83 c4 10             	add    esp,0x10
c0008f69:	89 1d 48 0c 02 c0    	mov    DWORD PTR ds:0xc0020c48,ebx
c0008f6f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f77:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f7c:	7f 7e                	jg     c0008ffc <UnixFile::UnixFile(int)+0x1aa>
c0008f7e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f86:	83 ec 0c             	sub    esp,0xc
c0008f89:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f8d:	e8 37 e8 ff ff       	call   c00077c9 <malloc>
c0008f92:	83 c4 10             	add    esp,0x10
c0008f95:	89 c3                	mov    ebx,eax
c0008f97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f9b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008fa0:	83 ec 08             	sub    esp,0x8
c0008fa3:	50                   	push   eax
c0008fa4:	53                   	push   ebx
c0008fa5:	e8 58 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008faa:	83 c4 10             	add    esp,0x10
c0008fad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fb1:	89 1c 85 20 0c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf3e0],ebx
c0008fb8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fc0:	83 ec 0c             	sub    esp,0xc
c0008fc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fc7:	e8 fd e7 ff ff       	call   c00077c9 <malloc>
c0008fcc:	83 c4 10             	add    esp,0x10
c0008fcf:	89 c3                	mov    ebx,eax
c0008fd1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fd5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fda:	83 ec 08             	sub    esp,0x8
c0008fdd:	50                   	push   eax
c0008fde:	53                   	push   ebx
c0008fdf:	e8 1e 00 00 00       	call   c0009002 <ReservedFilename::ReservedFilename(int)>
c0008fe4:	83 c4 10             	add    esp,0x10
c0008fe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008feb:	89 1c 85 e0 0b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf420],ebx
c0008ff2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008ff6:	e9 7c ff ff ff       	jmp    c0008f77 <UnixFile::UnixFile(int)+0x125>
c0008ffb:	90                   	nop
c0008ffc:	83 c4 28             	add    esp,0x28
c0008fff:	5b                   	pop    ebx
c0009000:	c3                   	ret    
c0009001:	90                   	nop

c0009002 <ReservedFilename::ReservedFilename(int)>:
c0009002:	83 ec 0c             	sub    esp,0xc
c0009005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009009:	83 ec 08             	sub    esp,0x8
c000900c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009010:	50                   	push   eax
c0009011:	e8 3c fe ff ff       	call   c0008e52 <UnixFile::UnixFile(int)>
c0009016:	83 c4 10             	add    esp,0x10
c0009019:	ba e8 d8 01 c0       	mov    edx,0xc001d8e8
c000901e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009022:	89 10                	mov    DWORD PTR [eax],edx
c0009024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009028:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000902c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000902f:	90                   	nop
c0009030:	83 c4 0c             	add    esp,0xc
c0009033:	c3                   	ret    

c0009034 <UnixFile::~UnixFile()>:
c0009034:	83 ec 1c             	sub    esp,0x1c
c0009037:	ba cc d8 01 c0       	mov    edx,0xc001d8cc
c000903c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009040:	89 10                	mov    DWORD PTR [eax],edx
c0009042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009046:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009049:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000904e:	7f 73                	jg     c00090c3 <UnixFile::~UnixFile()+0x8f>
c0009050:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009058:	83 ec 0c             	sub    esp,0xc
c000905b:	68 58 0c 02 c0       	push   0xc0020c58
c0009060:	e8 17 34 01 00       	call   c001c47c <LinkedList<UnixFile>::getFirstElement()>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000906c:	83 ec 0c             	sub    esp,0xc
c000906f:	68 58 0c 02 c0       	push   0xc0020c58
c0009074:	e8 0b 34 01 00       	call   c001c484 <LinkedList<UnixFile>::removeFirst()>
c0009079:	83 c4 10             	add    esp,0x10
c000907c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009080:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009084:	74 40                	je     c00090c6 <UnixFile::~UnixFile()+0x92>
c0009086:	83 ec 08             	sub    esp,0x8
c0009089:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000908d:	68 58 0c 02 c0       	push   0xc0020c58
c0009092:	e8 11 33 01 00       	call   c001c3a8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009097:	83 c4 10             	add    esp,0x10
c000909a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000909e:	8d 50 01             	lea    edx,[eax+0x1]
c00090a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090a5:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00090aa:	0f 94 c0             	sete   al
c00090ad:	84 c0                	test   al,al
c00090af:	74 a7                	je     c0009058 <UnixFile::~UnixFile()+0x24>
c00090b1:	83 ec 0c             	sub    esp,0xc
c00090b4:	68 a4 d8 01 c0       	push   0xc001d8a4
c00090b9:	e8 ad 70 00 00       	call   c001016b <KePanic(char const*)>
c00090be:	83 c4 10             	add    esp,0x10
c00090c1:	eb 95                	jmp    c0009058 <UnixFile::~UnixFile()+0x24>
c00090c3:	90                   	nop
c00090c4:	eb 01                	jmp    c00090c7 <UnixFile::~UnixFile()+0x93>
c00090c6:	90                   	nop
c00090c7:	90                   	nop
c00090c8:	83 c4 1c             	add    esp,0x1c
c00090cb:	c3                   	ret    

c00090cc <UnixFile::~UnixFile()>:
c00090cc:	83 ec 0c             	sub    esp,0xc
c00090cf:	83 ec 0c             	sub    esp,0xc
c00090d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d6:	e8 59 ff ff ff       	call   c0009034 <UnixFile::~UnixFile()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	83 ec 08             	sub    esp,0x8
c00090e1:	6a 0c                	push   0xc
c00090e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e7:	e8 06 13 00 00       	call   c000a3f2 <operator delete(void*, unsigned long)>
c00090ec:	83 c4 10             	add    esp,0x10
c00090ef:	83 c4 0c             	add    esp,0xc
c00090f2:	c3                   	ret    
c00090f3:	90                   	nop

c00090f4 <ReservedFilename::~ReservedFilename()>:
c00090f4:	83 ec 0c             	sub    esp,0xc
c00090f7:	ba e8 d8 01 c0       	mov    edx,0xc001d8e8
c00090fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009100:	89 10                	mov    DWORD PTR [eax],edx
c0009102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009106:	83 ec 0c             	sub    esp,0xc
c0009109:	50                   	push   eax
c000910a:	e8 25 ff ff ff       	call   c0009034 <UnixFile::~UnixFile()>
c000910f:	83 c4 10             	add    esp,0x10
c0009112:	90                   	nop
c0009113:	83 c4 0c             	add    esp,0xc
c0009116:	c3                   	ret    
c0009117:	90                   	nop

c0009118 <ReservedFilename::~ReservedFilename()>:
c0009118:	83 ec 0c             	sub    esp,0xc
c000911b:	83 ec 0c             	sub    esp,0xc
c000911e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009122:	e8 cd ff ff ff       	call   c00090f4 <ReservedFilename::~ReservedFilename()>
c0009127:	83 c4 10             	add    esp,0x10
c000912a:	83 ec 08             	sub    esp,0x8
c000912d:	6a 0c                	push   0xc
c000912f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009133:	e8 ba 12 00 00       	call   c000a3f2 <operator delete(void*, unsigned long)>
c0009138:	83 c4 10             	add    esp,0x10
c000913b:	83 c4 0c             	add    esp,0xc
c000913e:	c3                   	ret    

c000913f <getFromFileDescriptor(int)>:
c000913f:	53                   	push   ebx
c0009140:	83 ec 08             	sub    esp,0x8
c0009143:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009147:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000914d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009153:	7f 2c                	jg     c0009181 <getFromFileDescriptor(int)+0x42>
c0009155:	83 ec 0c             	sub    esp,0xc
c0009158:	68 58 0c 02 c0       	push   0xc0020c58
c000915d:	e8 1a 33 01 00       	call   c001c47c <LinkedList<UnixFile>::getFirstElement()>
c0009162:	83 c4 10             	add    esp,0x10
c0009165:	85 c0                	test   eax,eax
c0009167:	75 04                	jne    c000916d <getFromFileDescriptor(int)+0x2e>
c0009169:	31 c0                	xor    eax,eax
c000916b:	eb 6e                	jmp    c00091db <getFromFileDescriptor(int)+0x9c>
c000916d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009170:	74 69                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c0009172:	52                   	push   edx
c0009173:	52                   	push   edx
c0009174:	50                   	push   eax
c0009175:	68 58 0c 02 c0       	push   0xc0020c58
c000917a:	e8 a7 33 01 00       	call   c001c526 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000917f:	eb e1                	jmp    c0009162 <getFromFileDescriptor(int)+0x23>
c0009181:	a1 4c 0c 02 c0       	mov    eax,ds:0xc0020c4c
c0009186:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000918c:	74 4d                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c000918e:	a1 50 0c 02 c0       	mov    eax,ds:0xc0020c50
c0009193:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009199:	74 40                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c000919b:	a1 48 0c 02 c0       	mov    eax,ds:0xc0020c48
c00091a0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00091a6:	74 33                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c00091a8:	a1 44 0c 02 c0       	mov    eax,ds:0xc0020c44
c00091ad:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091b3:	74 26                	je     c00091db <getFromFileDescriptor(int)+0x9c>
c00091b5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091bb:	83 f8 08             	cmp    eax,0x8
c00091be:	77 09                	ja     c00091c9 <getFromFileDescriptor(int)+0x8a>
c00091c0:	8b 04 85 20 0c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf3e0]
c00091c7:	eb 12                	jmp    c00091db <getFromFileDescriptor(int)+0x9c>
c00091c9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091cf:	83 fb 08             	cmp    ebx,0x8
c00091d2:	77 95                	ja     c0009169 <getFromFileDescriptor(int)+0x2a>
c00091d4:	8b 04 9d e0 0b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdf420]
c00091db:	83 c4 08             	add    esp,0x8
c00091de:	5b                   	pop    ebx
c00091df:	c3                   	ret    

c00091e0 <__static_initialization_and_destruction_0(int, int)>:
c00091e0:	83 ec 0c             	sub    esp,0xc
c00091e3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091e8:	75 34                	jne    c000921e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091ea:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091f2:	75 2a                	jne    c000921e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091f4:	83 ec 0c             	sub    esp,0xc
c00091f7:	68 58 0c 02 c0       	push   0xc0020c58
c00091fc:	e8 65 31 01 00       	call   c001c366 <LinkedList<UnixFile>::LinkedList()>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	83 ec 04             	sub    esp,0x4
c0009207:	68 a0 f7 01 c0       	push   0xc001f7a0
c000920c:	68 58 0c 02 c0       	push   0xc0020c58
c0009211:	68 64 c3 01 c0       	push   0xc001c364
c0009216:	e8 87 11 00 00       	call   c000a3a2 <__cxa_atexit>
c000921b:	83 c4 10             	add    esp,0x10
c000921e:	90                   	nop
c000921f:	83 c4 0c             	add    esp,0xc
c0009222:	c3                   	ret    

c0009223 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009223:	83 ec 0c             	sub    esp,0xc
c0009226:	83 ec 08             	sub    esp,0x8
c0009229:	68 ff ff 00 00       	push   0xffff
c000922e:	6a 01                	push   0x1
c0009230:	e8 ab ff ff ff       	call   c00091e0 <__static_initialization_and_destruction_0(int, int)>
c0009235:	83 c4 10             	add    esp,0x10
c0009238:	83 c4 0c             	add    esp,0xc
c000923b:	c3                   	ret    

c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000923c:	53                   	push   ebx
c000923d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009241:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009245:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000924b:	89 c8                	mov    eax,ecx
c000924d:	d1 e8                	shr    eax,1
c000924f:	03 05 28 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f828
c0009255:	83 e1 01             	and    ecx,0x1
c0009258:	8a 10                	mov    dl,BYTE PTR [eax]
c000925a:	75 09                	jne    c0009265 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000925c:	83 e2 f0             	and    edx,0xfffffff0
c000925f:	09 da                	or     edx,ebx
c0009261:	88 10                	mov    BYTE PTR [eax],dl
c0009263:	5b                   	pop    ebx
c0009264:	c3                   	ret    
c0009265:	c1 e3 04             	shl    ebx,0x4
c0009268:	83 e2 0f             	and    edx,0xf
c000926b:	09 da                	or     edx,ebx
c000926d:	88 10                	mov    BYTE PTR [eax],dl
c000926f:	5b                   	pop    ebx
c0009270:	c3                   	ret    

c0009271 <Virt::getPageState(unsigned long)>:
c0009271:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009275:	8b 0d 28 f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f828
c000927b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009281:	89 d0                	mov    eax,edx
c0009283:	d1 e8                	shr    eax,1
c0009285:	83 e2 01             	and    edx,0x1
c0009288:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000928b:	75 04                	jne    c0009291 <Virt::getPageState(unsigned long)+0x20>
c000928d:	83 e0 0f             	and    eax,0xf
c0009290:	c3                   	ret    
c0009291:	c0 e8 04             	shr    al,0x4
c0009294:	c3                   	ret    

c0009295 <Virt::allocateKernelVirtualPages(int)>:
c0009295:	55                   	push   ebp
c0009296:	31 ed                	xor    ebp,ebp
c0009298:	57                   	push   edi
c0009299:	56                   	push   esi
c000929a:	53                   	push   ebx
c000929b:	31 db                	xor    ebx,ebx
c000929d:	83 ec 1c             	sub    esp,0x1c
c00092a0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00092a4:	8b 3d 24 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f824
c00092aa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00092af:	57                   	push   edi
c00092b0:	e8 bc ff ff ff       	call   c0009271 <Virt::getPageState(unsigned long)>
c00092b5:	5a                   	pop    edx
c00092b6:	84 c0                	test   al,al
c00092b8:	75 3a                	jne    c00092f4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092ba:	85 db                	test   ebx,ebx
c00092bc:	75 02                	jne    c00092c0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092be:	89 fd                	mov    ebp,edi
c00092c0:	43                   	inc    ebx
c00092c1:	39 f3                	cmp    ebx,esi
c00092c3:	74 5a                	je     c000931f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092c5:	47                   	inc    edi
c00092c6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092cc:	76 31                	jbe    c00092ff <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092ce:	c7 05 24 f8 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f824,0xc8000
c00092d8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092dd:	75 28                	jne    c0009307 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092df:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092e4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092e9:	57                   	push   edi
c00092ea:	e8 82 ff ff ff       	call   c0009271 <Virt::getPageState(unsigned long)>
c00092ef:	5a                   	pop    edx
c00092f0:	84 c0                	test   al,al
c00092f2:	74 c6                	je     c00092ba <Virt::allocateKernelVirtualPages(int)+0x25>
c00092f4:	31 db                	xor    ebx,ebx
c00092f6:	47                   	inc    edi
c00092f7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092fd:	77 cf                	ja     c00092ce <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ff:	89 3d 24 f8 01 c0    	mov    DWORD PTR ds:0xc001f824,edi
c0009305:	eb a8                	jmp    c00092af <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009307:	83 ec 0c             	sub    esp,0xc
c000930a:	68 fc d8 01 c0       	push   0xc001d8fc
c000930f:	e8 57 6e 00 00       	call   c001016b <KePanic(char const*)>
c0009314:	8b 3d 24 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f824
c000931a:	83 c4 10             	add    esp,0x10
c000931d:	eb 90                	jmp    c00092af <Virt::allocateKernelVirtualPages(int)+0x1a>
c000931f:	89 2d 24 f8 01 c0    	mov    DWORD PTR ds:0xc001f824,ebp
c0009325:	4b                   	dec    ebx
c0009326:	74 5f                	je     c0009387 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009328:	85 f6                	test   esi,esi
c000932a:	74 3d                	je     c0009369 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000932c:	89 e8                	mov    eax,ebp
c000932e:	31 db                	xor    ebx,ebx
c0009330:	8d 7e ff             	lea    edi,[esi-0x1]
c0009333:	eb 14                	jmp    c0009349 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009335:	6a 01                	push   0x1
c0009337:	43                   	inc    ebx
c0009338:	50                   	push   eax
c0009339:	e8 fe fe ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000933e:	58                   	pop    eax
c000933f:	39 f3                	cmp    ebx,esi
c0009341:	5a                   	pop    edx
c0009342:	74 25                	je     c0009369 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009344:	a1 24 f8 01 c0       	mov    eax,ds:0xc001f824
c0009349:	8d 50 01             	lea    edx,[eax+0x1]
c000934c:	85 db                	test   ebx,ebx
c000934e:	89 15 24 f8 01 c0    	mov    DWORD PTR ds:0xc001f824,edx
c0009354:	74 20                	je     c0009376 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009356:	39 df                	cmp    edi,ebx
c0009358:	75 db                	jne    c0009335 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000935a:	6a 03                	push   0x3
c000935c:	43                   	inc    ebx
c000935d:	50                   	push   eax
c000935e:	e8 d9 fe ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009363:	59                   	pop    ecx
c0009364:	39 f3                	cmp    ebx,esi
c0009366:	58                   	pop    eax
c0009367:	75 db                	jne    c0009344 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009369:	83 c4 1c             	add    esp,0x1c
c000936c:	89 e8                	mov    eax,ebp
c000936e:	5b                   	pop    ebx
c000936f:	c1 e0 0c             	shl    eax,0xc
c0009372:	5e                   	pop    esi
c0009373:	5f                   	pop    edi
c0009374:	5d                   	pop    ebp
c0009375:	c3                   	ret    
c0009376:	6a 02                	push   0x2
c0009378:	bb 01 00 00 00       	mov    ebx,0x1
c000937d:	50                   	push   eax
c000937e:	e8 b9 fe ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009383:	58                   	pop    eax
c0009384:	5a                   	pop    edx
c0009385:	eb bd                	jmp    c0009344 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009387:	6a 04                	push   0x4
c0009389:	8d 45 01             	lea    eax,[ebp+0x1]
c000938c:	55                   	push   ebp
c000938d:	a3 24 f8 01 c0       	mov    ds:0xc001f824,eax
c0009392:	e8 a5 fe ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009397:	59                   	pop    ecx
c0009398:	89 e8                	mov    eax,ebp
c000939a:	5b                   	pop    ebx
c000939b:	c1 e0 0c             	shl    eax,0xc
c000939e:	83 c4 1c             	add    esp,0x1c
c00093a1:	5b                   	pop    ebx
c00093a2:	5e                   	pop    esi
c00093a3:	5f                   	pop    edi
c00093a4:	5d                   	pop    ebp
c00093a5:	c3                   	ret    

c00093a6 <Virt::freeSwapfilePage(unsigned long)>:
c00093a6:	53                   	push   ebx
c00093a7:	8b 15 6c 0c 02 c0    	mov    edx,DWORD PTR ds:0xc0020c6c
c00093ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093b1:	b8 01 00 00 00       	mov    eax,0x1
c00093b6:	89 cb                	mov    ebx,ecx
c00093b8:	d3 e0                	shl    eax,cl
c00093ba:	c1 eb 05             	shr    ebx,0x5
c00093bd:	f7 d0                	not    eax
c00093bf:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093c2:	5b                   	pop    ebx
c00093c3:	c3                   	ret    

c00093c4 <Virt::swapIDToSector(unsigned long)>:
c00093c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093c8:	0f af 05 2c f8 01 c0 	imul   eax,DWORD PTR ds:0xc001f82c
c00093cf:	03 05 34 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f834
c00093d5:	c3                   	ret    

c00093d6 <Virt::allocateSwapfilePage()>:
c00093d6:	55                   	push   ebp
c00093d7:	31 d2                	xor    edx,edx
c00093d9:	57                   	push   edi
c00093da:	56                   	push   esi
c00093db:	53                   	push   ebx
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	8b 0d 2c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f82c
c00093e5:	a1 30 f8 01 c0       	mov    eax,ds:0xc001f830
c00093ea:	f7 f1                	div    ecx
c00093ec:	39 0d 30 f8 01 c0    	cmp    DWORD PTR ds:0xc001f830,ecx
c00093f2:	72 2d                	jb     c0009421 <Virt::allocateSwapfilePage()+0x4b>
c00093f4:	8b 35 6c 0c 02 c0    	mov    esi,DWORD PTR ds:0xc0020c6c
c00093fa:	8b 16                	mov    edx,DWORD PTR [esi]
c00093fc:	f6 c2 01             	test   dl,0x1
c00093ff:	74 3c                	je     c000943d <Virt::allocateSwapfilePage()+0x67>
c0009401:	31 c9                	xor    ecx,ecx
c0009403:	bf 01 00 00 00       	mov    edi,0x1
c0009408:	eb 12                	jmp    c000941c <Virt::allocateSwapfilePage()+0x46>
c000940a:	89 fd                	mov    ebp,edi
c000940c:	89 ca                	mov    edx,ecx
c000940e:	d3 e5                	shl    ebp,cl
c0009410:	c1 ea 05             	shr    edx,0x5
c0009413:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009416:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009418:	85 ea                	test   edx,ebp
c000941a:	74 2a                	je     c0009446 <Virt::allocateSwapfilePage()+0x70>
c000941c:	41                   	inc    ecx
c000941d:	39 c8                	cmp    eax,ecx
c000941f:	77 e9                	ja     c000940a <Virt::allocateSwapfilePage()+0x34>
c0009421:	83 ec 0c             	sub    esp,0xc
c0009424:	68 63 da 01 c0       	push   0xc001da63
c0009429:	e8 3d 6d 00 00       	call   c001016b <KePanic(char const*)>
c000942e:	83 c4 10             	add    esp,0x10
c0009431:	31 c9                	xor    ecx,ecx
c0009433:	83 c4 0c             	add    esp,0xc
c0009436:	89 c8                	mov    eax,ecx
c0009438:	5b                   	pop    ebx
c0009439:	5e                   	pop    esi
c000943a:	5f                   	pop    edi
c000943b:	5d                   	pop    ebp
c000943c:	c3                   	ret    
c000943d:	89 f3                	mov    ebx,esi
c000943f:	bd 01 00 00 00       	mov    ebp,0x1
c0009444:	31 c9                	xor    ecx,ecx
c0009446:	09 ea                	or     edx,ebp
c0009448:	89 c8                	mov    eax,ecx
c000944a:	89 13                	mov    DWORD PTR [ebx],edx
c000944c:	83 c4 0c             	add    esp,0xc
c000944f:	5b                   	pop    ebx
c0009450:	5e                   	pop    esi
c0009451:	5f                   	pop    edi
c0009452:	5d                   	pop    ebp
c0009453:	c3                   	ret    

c0009454 <Virt::virtualMemorySetup()>:
c0009454:	53                   	push   ebx
c0009455:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000945a:	6a 0f                	push   0xf
c000945c:	53                   	push   ebx
c000945d:	43                   	inc    ebx
c000945e:	e8 d9 fd ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009463:	58                   	pop    eax
c0009464:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000946a:	5a                   	pop    edx
c000946b:	75 ed                	jne    c000945a <Virt::virtualMemorySetup()+0x6>
c000946d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009472:	6a 00                	push   0x0
c0009474:	53                   	push   ebx
c0009475:	43                   	inc    ebx
c0009476:	e8 c1 fd ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000947b:	59                   	pop    ecx
c000947c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009482:	58                   	pop    eax
c0009483:	75 ed                	jne    c0009472 <Virt::virtualMemorySetup()+0x1e>
c0009485:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000948a:	6a 0f                	push   0xf
c000948c:	53                   	push   ebx
c000948d:	43                   	inc    ebx
c000948e:	e8 a9 fd ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009493:	58                   	pop    eax
c0009494:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000949a:	5a                   	pop    edx
c000949b:	75 ed                	jne    c000948a <Virt::virtualMemorySetup()+0x36>
c000949d:	5b                   	pop    ebx
c000949e:	c3                   	ret    

c000949f <Virt::setupPageSwapping(int)>:
c000949f:	53                   	push   ebx
c00094a0:	83 ec 0c             	sub    esp,0xc
c00094a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00094a7:	a1 e8 30 02 c0       	mov    eax,ds:0xc00230e8
c00094ac:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094b2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094b4:	53                   	push   ebx
c00094b5:	c1 e3 0b             	shl    ebx,0xb
c00094b8:	68 7a da 01 c0       	push   0xc001da7a
c00094bd:	50                   	push   eax
c00094be:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094c1:	89 1d 30 f8 01 c0    	mov    DWORD PTR ds:0xc001f830,ebx
c00094c7:	c6 05 38 f8 01 c0 43 	mov    BYTE PTR ds:0xc001f838,0x43
c00094ce:	c1 eb 08             	shr    ebx,0x8
c00094d1:	a3 34 f8 01 c0       	mov    ds:0xc001f834,eax
c00094d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094d9:	c7 05 2c f8 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f82c,0x8
c00094e3:	e8 e1 e2 ff ff       	call   c00077c9 <malloc>
c00094e8:	83 c4 0c             	add    esp,0xc
c00094eb:	89 c1                	mov    ecx,eax
c00094ed:	a3 6c 0c 02 c0       	mov    ds:0xc0020c6c,eax
c00094f2:	31 d2                	xor    edx,edx
c00094f4:	a1 30 f8 01 c0       	mov    eax,ds:0xc001f830
c00094f9:	f7 35 2c f8 01 c0    	div    DWORD PTR ds:0xc001f82c
c00094ff:	c1 e8 05             	shr    eax,0x5
c0009502:	50                   	push   eax
c0009503:	6a 00                	push   0x0
c0009505:	51                   	push   ecx
c0009506:	e8 d5 6f ff ff       	call   c00004e0 <memset>
c000950b:	83 c4 18             	add    esp,0x18
c000950e:	5b                   	pop    ebx
c000950f:	c3                   	ret    

c0009510 <VAS::VAS()>:
c0009510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009514:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000951b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000951f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952a:	a3 70 0c 02 c0       	mov    ds:0xc0020c70,eax
c000952f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009533:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009537:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000953b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000953e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009542:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009549:	90                   	nop
c000954a:	c3                   	ret    
c000954b:	90                   	nop

c000954c <VAS::VAS(VAS*)>:
c000954c:	83 ec 0c             	sub    esp,0xc
c000954f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009553:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000955a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000955e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009565:	83 ec 0c             	sub    esp,0xc
c0009568:	68 1c d9 01 c0       	push   0xc001d91c
c000956d:	e8 f9 6b 00 00       	call   c001016b <KePanic(char const*)>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	90                   	nop
c0009576:	83 c4 0c             	add    esp,0xc
c0009579:	c3                   	ret    

c000957a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000957a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000957e:	89 c2                	mov    edx,eax
c0009580:	c1 e8 0a             	shr    eax,0xa
c0009583:	c1 ea 16             	shr    edx,0x16
c0009586:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000958b:	19 c9                	sbb    ecx,ecx
c000958d:	c1 e2 0c             	shl    edx,0xc
c0009590:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009596:	25 fc 0f 00 00       	and    eax,0xffc
c000959b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00095a2:	01 d0                	add    eax,edx
c00095a4:	c3                   	ret    
c00095a5:	90                   	nop

c00095a6 <VAS::getPageTableEntry(unsigned long)>:
c00095a6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00095aa:	89 ca                	mov    edx,ecx
c00095ac:	c1 e9 0a             	shr    ecx,0xa
c00095af:	c1 ea 16             	shr    edx,0x16
c00095b2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00095b8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00095be:	c1 e0 0c             	shl    eax,0xc
c00095c1:	8d 04 08             	lea    eax,[eax+ecx*1]
c00095c4:	c3                   	ret    

c00095c5 <Virt::freeKernelVirtualPages(unsigned long)>:
c00095c5:	57                   	push   edi
c00095c6:	56                   	push   esi
c00095c7:	be 01 00 00 00       	mov    esi,0x1
c00095cc:	53                   	push   ebx
c00095cd:	83 ec 10             	sub    esp,0x10
c00095d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00095d4:	c1 eb 0c             	shr    ebx,0xc
c00095d7:	eb 3f                	jmp    c0009618 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00095d9:	83 ec 08             	sub    esp,0x8
c00095dc:	a1 70 0c 02 c0       	mov    eax,ds:0xc0020c70
c00095e1:	57                   	push   edi
c00095e2:	50                   	push   eax
c00095e3:	e8 be ff ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c00095e8:	83 c4 10             	add    esp,0x10
c00095eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00095ed:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095f1:	f6 c4 04             	test   ah,0x4
c00095f4:	75 60                	jne    c0009656 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095f6:	80 fa 04             	cmp    dl,0x4
c00095f9:	74 79                	je     c0009674 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095fb:	80 fa 02             	cmp    dl,0x2
c00095fe:	0f 84 89 00 00 00    	je     c000968d <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009604:	80 fa 03             	cmp    dl,0x3
c0009607:	0f 84 ae 00 00 00    	je     c00096bb <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c000960d:	fe ca                	dec    dl
c000960f:	0f 84 93 00 00 00    	je     c00096a8 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009615:	43                   	inc    ebx
c0009616:	31 f6                	xor    esi,esi
c0009618:	53                   	push   ebx
c0009619:	89 df                	mov    edi,ebx
c000961b:	e8 51 fc ff ff       	call   c0009271 <Virt::getPageState(unsigned long)>
c0009620:	c1 e7 0c             	shl    edi,0xc
c0009623:	5a                   	pop    edx
c0009624:	84 c0                	test   al,al
c0009626:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000962a:	75 ad                	jne    c00095d9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000962c:	83 ec 0c             	sub    esp,0xc
c000962f:	68 91 da 01 c0       	push   0xc001da91
c0009634:	e8 32 6b 00 00       	call   c001016b <KePanic(char const*)>
c0009639:	5a                   	pop    edx
c000963a:	59                   	pop    ecx
c000963b:	57                   	push   edi
c000963c:	8b 3d 70 0c 02 c0    	mov    edi,DWORD PTR ds:0xc0020c70
c0009642:	57                   	push   edi
c0009643:	e8 5e ff ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c0009648:	83 c4 10             	add    esp,0x10
c000964b:	8b 00                	mov    eax,DWORD PTR [eax]
c000964d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009651:	f6 c4 04             	test   ah,0x4
c0009654:	74 bf                	je     c0009615 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009656:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000965a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000965f:	83 ec 0c             	sub    esp,0xc
c0009662:	50                   	push   eax
c0009663:	e8 db e3 ff ff       	call   c0007a43 <Phys::freePage(unsigned long)>
c0009668:	83 c4 10             	add    esp,0x10
c000966b:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000966f:	80 fa 04             	cmp    dl,0x4
c0009672:	75 87                	jne    c00095fb <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009674:	89 f0                	mov    eax,esi
c0009676:	84 c0                	test   al,al
c0009678:	75 47                	jne    c00096c1 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000967a:	c7 44 24 20 40 d9 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d940
c0009682:	83 c4 10             	add    esp,0x10
c0009685:	5b                   	pop    ebx
c0009686:	5e                   	pop    esi
c0009687:	5f                   	pop    edi
c0009688:	e9 de 6a 00 00       	jmp    c001016b <KePanic(char const*)>
c000968d:	89 f0                	mov    eax,esi
c000968f:	84 c0                	test   al,al
c0009691:	75 15                	jne    c00096a8 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009693:	83 ec 0c             	sub    esp,0xc
c0009696:	68 ad da 01 c0       	push   0xc001daad
c000969b:	e8 cb 6a 00 00       	call   c001016b <KePanic(char const*)>
c00096a0:	83 c4 10             	add    esp,0x10
c00096a3:	e9 6d ff ff ff       	jmp    c0009615 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096a8:	83 ec 08             	sub    esp,0x8
c00096ab:	6a 00                	push   0x0
c00096ad:	53                   	push   ebx
c00096ae:	e8 89 fb ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096b3:	83 c4 10             	add    esp,0x10
c00096b6:	e9 5a ff ff ff       	jmp    c0009615 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096bb:	89 f0                	mov    eax,esi
c00096bd:	84 c0                	test   al,al
c00096bf:	75 15                	jne    c00096d6 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c00096c1:	83 ec 08             	sub    esp,0x8
c00096c4:	6a 00                	push   0x0
c00096c6:	53                   	push   ebx
c00096c7:	e8 70 fb ff ff       	call   c000923c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096cc:	83 c4 10             	add    esp,0x10
c00096cf:	83 c4 10             	add    esp,0x10
c00096d2:	5b                   	pop    ebx
c00096d3:	5e                   	pop    esi
c00096d4:	5f                   	pop    edi
c00096d5:	c3                   	ret    
c00096d6:	c7 44 24 20 c9 da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dac9
c00096de:	83 c4 10             	add    esp,0x10
c00096e1:	5b                   	pop    ebx
c00096e2:	5e                   	pop    esi
c00096e3:	5f                   	pop    edi
c00096e4:	e9 82 6a 00 00       	jmp    c001016b <KePanic(char const*)>
c00096e9:	90                   	nop

c00096ea <VAS::freeAllocatedPages(unsigned long)>:
c00096ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096f2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096f6:	74 09                	je     c0009701 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096f8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096fc:	e9 c4 fe ff ff       	jmp    c00095c5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009701:	c7 44 24 04 64 d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d964
c0009709:	e9 da 0d 00 00       	jmp    c000a4e8 <Dbg::kprintf(char const*, ...)>

c000970e <VAS::virtualToPhysical(unsigned long)>:
c000970e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009712:	50                   	push   eax
c0009713:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009717:	52                   	push   edx
c0009718:	e8 89 fe ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c000971d:	59                   	pop    ecx
c000971e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009720:	5a                   	pop    edx
c0009721:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009726:	c3                   	ret    
c0009727:	90                   	nop

c0009728 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009728:	55                   	push   ebp
c0009729:	57                   	push   edi
c000972a:	56                   	push   esi
c000972b:	53                   	push   ebx
c000972c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009730:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009734:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009738:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000973c:	85 db                	test   ebx,ebx
c000973e:	7e 22                	jle    c0009762 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009740:	c1 e3 0c             	shl    ebx,0xc
c0009743:	01 f3                	add    ebx,esi
c0009745:	56                   	push   esi
c0009746:	81 c6 00 10 00 00    	add    esi,0x1000
c000974c:	55                   	push   ebp
c000974d:	e8 54 fe ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c0009752:	5a                   	pop    edx
c0009753:	59                   	pop    ecx
c0009754:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009756:	21 f9                	and    ecx,edi
c0009758:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000975c:	39 f3                	cmp    ebx,esi
c000975e:	89 08                	mov    DWORD PTR [eax],ecx
c0009760:	75 e3                	jne    c0009745 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0009762:	5b                   	pop    ebx
c0009763:	5e                   	pop    esi
c0009764:	5f                   	pop    edi
c0009765:	5d                   	pop    ebp
c0009766:	c3                   	ret    
c0009767:	90                   	nop

c0009768 <VAS::setToWriteCombining(unsigned long, int)>:
c0009768:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000976d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009773:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000977a:	75 01                	jne    c000977d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000977c:	c3                   	ret    
c000977d:	68 80 00 00 00       	push   0x80
c0009782:	6a ff                	push   0xffffffff
c0009784:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009788:	50                   	push   eax
c0009789:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000978d:	52                   	push   edx
c000978e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009792:	51                   	push   ecx
c0009793:	e8 90 ff ff ff       	call   c0009728 <VAS::reflagRange(unsigned long, int, int, int)>
c0009798:	83 c4 14             	add    esp,0x14
c000979b:	c3                   	ret    

c000979c <VAS::mapOtherVASIn(bool, VAS*)>:
c000979c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00097a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097a5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00097a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097ac:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00097af:	19 c0                	sbb    eax,eax
c00097b1:	83 ca 03             	or     edx,0x3
c00097b4:	83 e0 fc             	and    eax,0xfffffffc
c00097b7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00097be:	0f 20 d8             	mov    eax,cr3
c00097c1:	0f 22 d8             	mov    cr3,eax
c00097c4:	c3                   	ret    
c00097c5:	90                   	nop

c00097c6 <VAS::~VAS()>:
c00097c6:	83 ec 2c             	sub    esp,0x2c
c00097c9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00097d1:	fa                   	cli    
c00097d2:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c00097d7:	40                   	inc    eax
c00097d8:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c00097dd:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00097e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097e7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097ed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097f1:	6a 01                	push   0x1
c00097f3:	50                   	push   eax
c00097f4:	e8 a3 ff ff ff       	call   c000979c <VAS::mapOtherVASIn(bool, VAS*)>
c00097f9:	83 c4 0c             	add    esp,0xc
c00097fc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009804:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000980c:	0f 8f d4 00 00 00    	jg     c00098e6 <VAS::~VAS()+0x120>
c0009812:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009816:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009819:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000981d:	c1 e2 02             	shl    edx,0x2
c0009820:	01 d0                	add    eax,edx
c0009822:	8b 00                	mov    eax,DWORD PTR [eax]
c0009824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000982c:	83 e0 01             	and    eax,0x1
c000982f:	0f 84 a8 00 00 00    	je     c00098dd <VAS::~VAS()+0x117>
c0009835:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000983d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009845:	7f 72                	jg     c00098b9 <VAS::~VAS()+0xf3>
c0009847:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000984b:	c1 e0 0a             	shl    eax,0xa
c000984e:	89 c2                	mov    edx,eax
c0009850:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009854:	01 d0                	add    eax,edx
c0009856:	c1 e0 0c             	shl    eax,0xc
c0009859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000985d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009862:	8b 00                	mov    eax,DWORD PTR [eax]
c0009864:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009867:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000986d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009871:	6a 01                	push   0x1
c0009873:	50                   	push   eax
c0009874:	e8 01 fd ff ff       	call   c000957a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009879:	83 c4 0c             	add    esp,0xc
c000987c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009880:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009884:	8b 00                	mov    eax,DWORD PTR [eax]
c0009886:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000988a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000988e:	25 01 04 00 00       	and    eax,0x401
c0009893:	3d 01 04 00 00       	cmp    eax,0x401
c0009898:	75 19                	jne    c00098b3 <VAS::~VAS()+0xed>
c000989a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000989e:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098a3:	83 ec 0c             	sub    esp,0xc
c00098a6:	50                   	push   eax
c00098a7:	e8 97 e1 ff ff       	call   c0007a43 <Phys::freePage(unsigned long)>
c00098ac:	83 c4 10             	add    esp,0x10
c00098af:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098b3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098b7:	eb 84                	jmp    c000983d <VAS::~VAS()+0x77>
c00098b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098bd:	25 00 04 00 00       	and    eax,0x400
c00098c2:	74 19                	je     c00098dd <VAS::~VAS()+0x117>
c00098c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098cd:	83 ec 0c             	sub    esp,0xc
c00098d0:	50                   	push   eax
c00098d1:	e8 6d e1 ff ff       	call   c0007a43 <Phys::freePage(unsigned long)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098dd:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098e1:	e9 1e ff ff ff       	jmp    c0009804 <VAS::~VAS()+0x3e>
c00098e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098ea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098ed:	83 ec 0c             	sub    esp,0xc
c00098f0:	50                   	push   eax
c00098f1:	e8 cf fc ff ff       	call   c00095c5 <Virt::freeKernelVirtualPages(unsigned long)>
c00098f6:	83 c4 10             	add    esp,0x10
c00098f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009900:	83 ec 0c             	sub    esp,0xc
c0009903:	50                   	push   eax
c0009904:	e8 3a e1 ff ff       	call   c0007a43 <Phys::freePage(unsigned long)>
c0009909:	83 c4 10             	add    esp,0x10
c000990c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009910:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0009915:	48                   	dec    eax
c0009916:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c000991b:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0009920:	85 c0                	test   eax,eax
c0009922:	75 01                	jne    c0009925 <VAS::~VAS()+0x15f>
c0009924:	fb                   	sti    
c0009925:	90                   	nop
c0009926:	83 c4 2c             	add    esp,0x2c
c0009929:	c3                   	ret    

c000992a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000992a:	55                   	push   ebp
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	83 ec 1c             	sub    esp,0x1c
c0009931:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009935:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009939:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000993f:	77 0b                	ja     c000994c <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009941:	0f 20 d8             	mov    eax,cr3
c0009944:	0f 20 d8             	mov    eax,cr3
c0009947:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000994a:	75 47                	jne    c0009993 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000994c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009950:	09 d8                	or     eax,ebx
c0009952:	a9 ff 0f 00 00       	test   eax,0xfff
c0009957:	75 57                	jne    c00099b0 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009959:	89 de                	mov    esi,ebx
c000995b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000995e:	c1 ee 16             	shr    esi,0x16
c0009961:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009968:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000996c:	74 54                	je     c00099c2 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000996e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009972:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009978:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000997c:	c1 e6 0c             	shl    esi,0xc
c000997f:	c1 eb 0a             	shr    ebx,0xa
c0009982:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009988:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000998b:	83 c4 1c             	add    esp,0x1c
c000998e:	5b                   	pop    ebx
c000998f:	5e                   	pop    esi
c0009990:	5f                   	pop    edi
c0009991:	5d                   	pop    ebp
c0009992:	c3                   	ret    
c0009993:	83 ec 0c             	sub    esp,0xc
c0009996:	68 88 d9 01 c0       	push   0xc001d988
c000999b:	e8 48 0b 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00099a7:	09 d8                	or     eax,ebx
c00099a9:	a9 ff 0f 00 00       	test   eax,0xfff
c00099ae:	74 a9                	je     c0009959 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099b0:	83 ec 0c             	sub    esp,0xc
c00099b3:	68 f0 d9 01 c0       	push   0xc001d9f0
c00099b8:	e8 ae 67 00 00       	call   c001016b <KePanic(char const*)>
c00099bd:	83 c4 10             	add    esp,0x10
c00099c0:	eb 97                	jmp    c0009959 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099c6:	e8 da e0 ff ff       	call   c0007aa5 <Phys::allocatePage()>
c00099cb:	83 ec 0c             	sub    esp,0xc
c00099ce:	89 c5                	mov    ebp,eax
c00099d0:	8b 0d 70 0c 02 c0    	mov    ecx,DWORD PTR ds:0xc0020c70
c00099d6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099da:	6a 01                	push   0x1
c00099dc:	e8 b4 f8 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c00099e1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099e8:	6a 01                	push   0x1
c00099ea:	50                   	push   eax
c00099eb:	55                   	push   ebp
c00099ec:	81 cd 07 04 00 00    	or     ebp,0x407
c00099f2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099f6:	51                   	push   ecx
c00099f7:	e8 28 02 00 00       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099fc:	83 c4 1c             	add    esp,0x1c
c00099ff:	68 00 10 00 00       	push   0x1000
c0009a04:	6a 00                	push   0x0
c0009a06:	50                   	push   eax
c0009a07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a0b:	e8 d0 6a ff ff       	call   c00004e0 <memset>
c0009a10:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a14:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a17:	e8 a9 fb ff ff       	call   c00095c5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009a1c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a20:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a23:	83 c4 10             	add    esp,0x10
c0009a26:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a29:	e9 40 ff ff ff       	jmp    c000996e <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a2e <VAS::allocatePages(int, int)>:
c0009a2e:	55                   	push   ebp
c0009a2f:	57                   	push   edi
c0009a30:	56                   	push   esi
c0009a31:	53                   	push   ebx
c0009a32:	83 ec 1c             	sub    esp,0x1c
c0009a35:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a39:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0009a3e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a44:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a4a:	83 e0 01             	and    eax,0x1
c0009a4d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a51:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a55:	0f 85 cc 00 00 00    	jne    c0009b27 <VAS::allocatePages(int, int)+0xf9>
c0009a5b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a62:	85 c0                	test   eax,eax
c0009a64:	0f 84 a1 00 00 00    	je     c0009b0b <VAS::allocatePages(int, int)+0xdd>
c0009a6a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a6e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a72:	c1 e6 0c             	shl    esi,0xc
c0009a75:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a79:	85 c0                	test   eax,eax
c0009a7b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a7e:	7e 33                	jle    c0009ab3 <VAS::allocatePages(int, int)+0x85>
c0009a80:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a84:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a88:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a8e:	e8 12 e0 ff ff       	call   c0007aa5 <Phys::allocatePage()>
c0009a93:	55                   	push   ebp
c0009a94:	53                   	push   ebx
c0009a95:	50                   	push   eax
c0009a96:	57                   	push   edi
c0009a97:	e8 8e fe ff ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a9c:	83 c4 10             	add    esp,0x10
c0009a9f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009aa4:	74 03                	je     c0009aa9 <VAS::allocatePages(int, int)+0x7b>
c0009aa6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009aa9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009aaf:	39 de                	cmp    esi,ebx
c0009ab1:	75 db                	jne    c0009a8e <VAS::allocatePages(int, int)+0x60>
c0009ab3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ab8:	75 12                	jne    c0009acc <VAS::allocatePages(int, int)+0x9e>
c0009aba:	0f 20 d8             	mov    eax,cr3
c0009abd:	0f 22 d8             	mov    cr3,eax
c0009ac0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ac4:	83 c4 1c             	add    esp,0x1c
c0009ac7:	5b                   	pop    ebx
c0009ac8:	5e                   	pop    esi
c0009ac9:	5f                   	pop    edi
c0009aca:	5d                   	pop    ebp
c0009acb:	c3                   	ret    
c0009acc:	c1 ee 0a             	shr    esi,0xa
c0009acf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ad3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ad9:	c1 eb 0a             	shr    ebx,0xa
c0009adc:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ae2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ae8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009aee:	39 c3                	cmp    ebx,eax
c0009af0:	77 ce                	ja     c0009ac0 <VAS::allocatePages(int, int)+0x92>
c0009af2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009af5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009afb:	39 d8                	cmp    eax,ebx
c0009afd:	73 f3                	jae    c0009af2 <VAS::allocatePages(int, int)+0xc4>
c0009aff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b03:	83 c4 1c             	add    esp,0x1c
c0009b06:	5b                   	pop    ebx
c0009b07:	5e                   	pop    esi
c0009b08:	5f                   	pop    edi
c0009b09:	5d                   	pop    ebp
c0009b0a:	c3                   	ret    
c0009b0b:	83 ec 0c             	sub    esp,0xc
c0009b0e:	68 14 da 01 c0       	push   0xc001da14
c0009b13:	e8 53 66 00 00       	call   c001016b <KePanic(char const*)>
c0009b18:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b1f:	83 c4 10             	add    esp,0x10
c0009b22:	e9 43 ff ff ff       	jmp    c0009a6a <VAS::allocatePages(int, int)+0x3c>
c0009b27:	83 ec 0c             	sub    esp,0xc
c0009b2a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b2e:	51                   	push   ecx
c0009b2f:	e8 61 f7 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0009b34:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b38:	83 c4 10             	add    esp,0x10
c0009b3b:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b40:	0f 87 9b 00 00 00    	ja     c0009be1 <VAS::allocatePages(int, int)+0x1b3>
c0009b46:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b4a:	85 d2                	test   edx,edx
c0009b4c:	7e 3c                	jle    c0009b8a <VAS::allocatePages(int, int)+0x15c>
c0009b4e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b52:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b56:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b5a:	c1 e5 0c             	shl    ebp,0xc
c0009b5d:	81 ce 00 04 00 00    	or     esi,0x400
c0009b63:	01 dd                	add    ebp,ebx
c0009b65:	e8 3b df ff ff       	call   c0007aa5 <Phys::allocatePage()>
c0009b6a:	56                   	push   esi
c0009b6b:	53                   	push   ebx
c0009b6c:	50                   	push   eax
c0009b6d:	57                   	push   edi
c0009b6e:	e8 b7 fd ff ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b73:	83 c4 10             	add    esp,0x10
c0009b76:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b7b:	74 03                	je     c0009b80 <VAS::allocatePages(int, int)+0x152>
c0009b7d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b80:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b86:	39 dd                	cmp    ebp,ebx
c0009b88:	75 db                	jne    c0009b65 <VAS::allocatePages(int, int)+0x137>
c0009b8a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b8f:	0f 84 25 ff ff ff    	je     c0009aba <VAS::allocatePages(int, int)+0x8c>
c0009b95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b9d:	89 d3                	mov    ebx,edx
c0009b9f:	c1 e0 0c             	shl    eax,0xc
c0009ba2:	c1 eb 0a             	shr    ebx,0xa
c0009ba5:	01 d0                	add    eax,edx
c0009ba7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bad:	c1 e8 0a             	shr    eax,0xa
c0009bb0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bb6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bbb:	2d 00 00 40 00       	sub    eax,0x400000
c0009bc0:	39 c3                	cmp    ebx,eax
c0009bc2:	0f 87 f8 fe ff ff    	ja     c0009ac0 <VAS::allocatePages(int, int)+0x92>
c0009bc8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bcb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bd1:	39 d8                	cmp    eax,ebx
c0009bd3:	73 f3                	jae    c0009bc8 <VAS::allocatePages(int, int)+0x19a>
c0009bd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bd9:	83 c4 1c             	add    esp,0x1c
c0009bdc:	5b                   	pop    ebx
c0009bdd:	5e                   	pop    esi
c0009bde:	5f                   	pop    edi
c0009bdf:	5d                   	pop    ebp
c0009be0:	c3                   	ret    
c0009be1:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0009be6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bec:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009bf3:	0f 84 4d ff ff ff    	je     c0009b46 <VAS::allocatePages(int, int)+0x118>
c0009bf9:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009c01:	e9 40 ff ff ff       	jmp    c0009b46 <VAS::allocatePages(int, int)+0x118>

c0009c06 <VAS::setCPUSpecific(unsigned long)>:
c0009c06:	83 ec 0c             	sub    esp,0xc
c0009c09:	6a 05                	push   0x5
c0009c0b:	68 00 00 40 c2       	push   0xc2400000
c0009c10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c14:	50                   	push   eax
c0009c15:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c19:	52                   	push   edx
c0009c1a:	e8 0b fd ff ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c1f:	83 c4 1c             	add    esp,0x1c
c0009c22:	c3                   	ret    
c0009c23:	90                   	nop

c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c24:	55                   	push   ebp
c0009c25:	57                   	push   edi
c0009c26:	56                   	push   esi
c0009c27:	53                   	push   ebx
c0009c28:	83 ec 1c             	sub    esp,0x1c
c0009c2b:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0009c30:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c3a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c3e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c44:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c48:	83 e0 01             	and    eax,0x1
c0009c4b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c53:	85 c0                	test   eax,eax
c0009c55:	7e 39                	jle    c0009c90 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c5b:	89 f3                	mov    ebx,esi
c0009c5d:	c1 e0 0c             	shl    eax,0xc
c0009c60:	01 f0                	add    eax,esi
c0009c62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c66:	55                   	push   ebp
c0009c67:	53                   	push   ebx
c0009c68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c6c:	29 f0                	sub    eax,esi
c0009c6e:	01 d8                	add    eax,ebx
c0009c70:	50                   	push   eax
c0009c71:	57                   	push   edi
c0009c72:	e8 b3 fc ff ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c77:	83 c4 10             	add    esp,0x10
c0009c7a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c7f:	74 03                	je     c0009c84 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c81:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c84:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c8a:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c8e:	75 d6                	jne    c0009c66 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c90:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c95:	75 10                	jne    c0009ca7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c97:	0f 20 d8             	mov    eax,cr3
c0009c9a:	0f 22 d8             	mov    cr3,eax
c0009c9d:	83 c4 1c             	add    esp,0x1c
c0009ca0:	89 f0                	mov    eax,esi
c0009ca2:	5b                   	pop    ebx
c0009ca3:	5e                   	pop    esi
c0009ca4:	5f                   	pop    edi
c0009ca5:	5d                   	pop    ebp
c0009ca6:	c3                   	ret    
c0009ca7:	89 f3                	mov    ebx,esi
c0009ca9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009cad:	c1 eb 0a             	shr    ebx,0xa
c0009cb0:	c1 e0 0c             	shl    eax,0xc
c0009cb3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009cb9:	01 f0                	add    eax,esi
c0009cbb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009cc1:	c1 e8 0a             	shr    eax,0xa
c0009cc4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cc9:	2d 00 00 40 00       	sub    eax,0x400000
c0009cce:	39 c3                	cmp    ebx,eax
c0009cd0:	77 cb                	ja     c0009c9d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009cd2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009cd5:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cdb:	39 d8                	cmp    eax,ebx
c0009cdd:	73 f3                	jae    c0009cd2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009cdf:	83 c4 1c             	add    esp,0x1c
c0009ce2:	89 f0                	mov    eax,esi
c0009ce4:	5b                   	pop    ebx
c0009ce5:	5e                   	pop    esi
c0009ce6:	5f                   	pop    edi
c0009ce7:	5d                   	pop    ebp
c0009ce8:	c3                   	ret    
c0009ce9:	90                   	nop

c0009cea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009cea:	55                   	push   ebp
c0009ceb:	57                   	push   edi
c0009cec:	56                   	push   esi
c0009ced:	53                   	push   ebx
c0009cee:	83 ec 1c             	sub    esp,0x1c
c0009cf1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009cf5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009cf9:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009cfd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d01:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d06:	75 4a                	jne    c0009d52 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d08:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d0c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d0f:	c1 eb 16             	shr    ebx,0x16
c0009d12:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d19:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d1d:	74 4d                	je     c0009d6c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d23:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d27:	c1 e8 0a             	shr    eax,0xa
c0009d2a:	80 fa 01             	cmp    dl,0x1
c0009d2d:	19 d2                	sbb    edx,edx
c0009d2f:	c1 e3 0c             	shl    ebx,0xc
c0009d32:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d36:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d3c:	25 fc 0f 00 00       	and    eax,0xffc
c0009d41:	01 d8                	add    eax,ebx
c0009d43:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d4a:	83 c4 1c             	add    esp,0x1c
c0009d4d:	5b                   	pop    ebx
c0009d4e:	5e                   	pop    esi
c0009d4f:	5f                   	pop    edi
c0009d50:	5d                   	pop    ebp
c0009d51:	c3                   	ret    
c0009d52:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d56:	83 ec 0c             	sub    esp,0xc
c0009d59:	68 40 da 01 c0       	push   0xc001da40
c0009d5e:	e8 08 64 00 00       	call   c001016b <KePanic(char const*)>
c0009d63:	83 c4 10             	add    esp,0x10
c0009d66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d6a:	eb 9c                	jmp    c0009d08 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d70:	e8 30 dd ff ff       	call   c0007aa5 <Phys::allocatePage()>
c0009d75:	83 ec 0c             	sub    esp,0xc
c0009d78:	89 c5                	mov    ebp,eax
c0009d7a:	8b 0d 70 0c 02 c0    	mov    ecx,DWORD PTR ds:0xc0020c70
c0009d80:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d84:	6a 01                	push   0x1
c0009d86:	e8 0a f5 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0009d8b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d92:	6a 01                	push   0x1
c0009d94:	50                   	push   eax
c0009d95:	55                   	push   ebp
c0009d96:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d9c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009da0:	51                   	push   ecx
c0009da1:	e8 7e fe ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009da6:	83 c4 1c             	add    esp,0x1c
c0009da9:	68 00 10 00 00       	push   0x1000
c0009dae:	6a 00                	push   0x0
c0009db0:	50                   	push   eax
c0009db1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009db5:	e8 26 67 ff ff       	call   c00004e0 <memset>
c0009dba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009dbe:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009dc1:	e8 ff f7 ff ff       	call   c00095c5 <Virt::freeKernelVirtualPages(unsigned long)>
c0009dc6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009dc9:	83 c4 10             	add    esp,0x10
c0009dcc:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009dcf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009dd3:	e9 47 ff ff ff       	jmp    c0009d1f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009dd8 <VAS::VAS(bool)>:
c0009dd8:	53                   	push   ebx
c0009dd9:	83 ec 28             	sub    esp,0x28
c0009ddc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009de0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009de4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009de8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009def:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009df3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009dfa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009dfe:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e02:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e05:	e8 9b dc ff ff       	call   c0007aa5 <Phys::allocatePage()>
c0009e0a:	89 c2                	mov    edx,eax
c0009e0c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e10:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e13:	8b 1d 70 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c70
c0009e19:	83 ec 0c             	sub    esp,0xc
c0009e1c:	6a 01                	push   0x1
c0009e1e:	e8 72 f4 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0009e23:	83 c4 10             	add    esp,0x10
c0009e26:	89 c2                	mov    edx,eax
c0009e28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e2c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e2f:	83 ec 0c             	sub    esp,0xc
c0009e32:	6a 03                	push   0x3
c0009e34:	6a 01                	push   0x1
c0009e36:	52                   	push   edx
c0009e37:	50                   	push   eax
c0009e38:	53                   	push   ebx
c0009e39:	e8 e6 fd ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e3e:	83 c4 20             	add    esp,0x20
c0009e41:	89 c2                	mov    edx,eax
c0009e43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e47:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e4a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e52:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e5a:	7f 1c                	jg     c0009e78 <VAS::VAS(bool)+0xa0>
c0009e5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e60:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e67:	c1 e2 02             	shl    edx,0x2
c0009e6a:	01 d0                	add    eax,edx
c0009e6c:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e72:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e76:	eb da                	jmp    c0009e52 <VAS::VAS(bool)+0x7a>
c0009e78:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009e80:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009e88:	7f 7a                	jg     c0009f04 <VAS::VAS(bool)+0x12c>
c0009e8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e8e:	2d 00 02 00 00       	sub    eax,0x200
c0009e93:	c1 e0 0c             	shl    eax,0xc
c0009e96:	83 c8 03             	or     eax,0x3
c0009e99:	89 c2                	mov    edx,eax
c0009e9b:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0009ea0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ea6:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009eac:	83 e0 10             	and    eax,0x10
c0009eaf:	84 c0                	test   al,al
c0009eb1:	74 07                	je     c0009eba <VAS::VAS(bool)+0xe2>
c0009eb3:	b8 00 01 00 00       	mov    eax,0x100
c0009eb8:	eb 05                	jmp    c0009ebf <VAS::VAS(bool)+0xe7>
c0009eba:	b8 00 00 00 00       	mov    eax,0x0
c0009ebf:	09 d0                	or     eax,edx
c0009ec1:	89 c1                	mov    ecx,eax
c0009ec3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ec7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009eca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ece:	c1 e2 02             	shl    edx,0x2
c0009ed1:	01 d0                	add    eax,edx
c0009ed3:	89 ca                	mov    edx,ecx
c0009ed5:	89 10                	mov    DWORD PTR [eax],edx
c0009ed7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009edb:	2d 40 03 00 00       	sub    eax,0x340
c0009ee0:	83 f8 7f             	cmp    eax,0x7f
c0009ee3:	77 16                	ja     c0009efb <VAS::VAS(bool)+0x123>
c0009ee5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ee9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009eec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ef0:	c1 e2 02             	shl    edx,0x2
c0009ef3:	01 d0                	add    eax,edx
c0009ef5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009efb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009eff:	e9 7c ff ff ff       	jmp    c0009e80 <VAS::VAS(bool)+0xa8>
c0009f04:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0009f09:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f0f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f15:	83 e0 10             	and    eax,0x10
c0009f18:	84 c0                	test   al,al
c0009f1a:	74 07                	je     c0009f23 <VAS::VAS(bool)+0x14b>
c0009f1c:	b8 03 41 00 00       	mov    eax,0x4103
c0009f21:	eb 05                	jmp    c0009f28 <VAS::VAS(bool)+0x150>
c0009f23:	b8 03 40 00 00       	mov    eax,0x4003
c0009f28:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f2c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f2f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f35:	89 02                	mov    DWORD PTR [edx],eax
c0009f37:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0009f3c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f42:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f48:	83 ec 08             	sub    esp,0x8
c0009f4b:	50                   	push   eax
c0009f4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f50:	e8 b1 fc ff ff       	call   c0009c06 <VAS::setCPUSpecific(unsigned long)>
c0009f55:	83 c4 10             	add    esp,0x10
c0009f58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f5c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f5f:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0009f64:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f6a:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f70:	83 e0 10             	and    eax,0x10
c0009f73:	84 c0                	test   al,al
c0009f75:	74 07                	je     c0009f7e <VAS::VAS(bool)+0x1a6>
c0009f77:	b8 00 01 00 00       	mov    eax,0x100
c0009f7c:	eb 05                	jmp    c0009f83 <VAS::VAS(bool)+0x1ab>
c0009f7e:	b8 00 00 00 00       	mov    eax,0x0
c0009f83:	09 c2                	or     edx,eax
c0009f85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f8c:	05 fc 0f 00 00       	add    eax,0xffc
c0009f91:	83 ca 03             	or     edx,0x3
c0009f94:	89 10                	mov    DWORD PTR [eax],edx
c0009f96:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0009f9b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fa1:	83 ec 0c             	sub    esp,0xc
c0009fa4:	50                   	push   eax
c0009fa5:	e8 12 1c 00 00       	call   c000bbbc <Device::getName()>
c0009faa:	83 c4 10             	add    esp,0x10
c0009fad:	83 ec 08             	sub    esp,0x8
c0009fb0:	68 e3 da 01 c0       	push   0xc001dae3
c0009fb5:	50                   	push   eax
c0009fb6:	e8 35 67 ff ff       	call   c00006f0 <strcmp>
c0009fbb:	83 c4 10             	add    esp,0x10
c0009fbe:	85 c0                	test   eax,eax
c0009fc0:	0f 94 c0             	sete   al
c0009fc3:	84 c0                	test   al,al
c0009fc5:	0f 84 87 00 00 00    	je     c000a052 <VAS::VAS(bool)+0x27a>
c0009fcb:	fa                   	cli    
c0009fcc:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0009fd1:	40                   	inc    eax
c0009fd2:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0009fd7:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0009fdc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fe2:	05 7c 09 00 00       	add    eax,0x97c
c0009fe7:	83 ec 0c             	sub    esp,0xc
c0009fea:	50                   	push   eax
c0009feb:	e8 d6 d2 ff ff       	call   c00072c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009ff0:	83 c4 10             	add    esp,0x10
c0009ff3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ff8:	89 c3                	mov    ebx,eax
c0009ffa:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0009fff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a005:	05 7c 09 00 00       	add    eax,0x97c
c000a00a:	83 ec 0c             	sub    esp,0xc
c000a00d:	50                   	push   eax
c000a00e:	e8 b3 d2 ff ff       	call   c00072c6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a013:	83 c4 10             	add    esp,0x10
c000a016:	83 ec 08             	sub    esp,0x8
c000a019:	50                   	push   eax
c000a01a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a01e:	e8 83 f5 ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c000a023:	83 c4 10             	add    esp,0x10
c000a026:	8b 00                	mov    eax,DWORD PTR [eax]
c000a028:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a02d:	6a 11                	push   0x11
c000a02f:	53                   	push   ebx
c000a030:	50                   	push   eax
c000a031:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a035:	e8 f0 f8 ff ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a03a:	83 c4 10             	add    esp,0x10
c000a03d:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000a042:	48                   	dec    eax
c000a043:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c000a048:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000a04d:	85 c0                	test   eax,eax
c000a04f:	75 01                	jne    c000a052 <VAS::VAS(bool)+0x27a>
c000a051:	fb                   	sti    
c000a052:	90                   	nop
c000a053:	83 c4 28             	add    esp,0x28
c000a056:	5b                   	pop    ebx
c000a057:	c3                   	ret    

c000a058 <VAS::evict(unsigned long)>:
c000a058:	55                   	push   ebp
c000a059:	57                   	push   edi
c000a05a:	56                   	push   esi
c000a05b:	53                   	push   ebx
c000a05c:	83 ec 1c             	sub    esp,0x1c
c000a05f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a063:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a06b:	e8 66 f3 ff ff       	call   c00093d6 <Virt::allocateSwapfilePage()>
c000a070:	8b 0d 2c f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f82c
c000a076:	89 c7                	mov    edi,eax
c000a078:	85 c9                	test   ecx,ecx
c000a07a:	7e 3e                	jle    c000a0ba <VAS::evict(unsigned long)+0x62>
c000a07c:	89 ee                	mov    esi,ebp
c000a07e:	31 db                	xor    ebx,ebx
c000a080:	83 ec 0c             	sub    esp,0xc
c000a083:	57                   	push   edi
c000a084:	e8 3b f3 ff ff       	call   c00093c4 <Virt::swapIDToSector(unsigned long)>
c000a089:	89 34 24             	mov    DWORD PTR [esp],esi
c000a08c:	01 d8                	add    eax,ebx
c000a08e:	6a 01                	push   0x1
c000a090:	31 d2                	xor    edx,edx
c000a092:	43                   	inc    ebx
c000a093:	52                   	push   edx
c000a094:	81 c6 00 02 00 00    	add    esi,0x200
c000a09a:	50                   	push   eax
c000a09b:	0f be 05 38 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f838
c000a0a2:	8b 14 85 dc 2f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd024]
c000a0a9:	52                   	push   edx
c000a0aa:	e8 cd 2b 00 00       	call   c000cc7c <LogicalDisk::write(unsigned long long, int, void*)>
c000a0af:	83 c4 20             	add    esp,0x20
c000a0b2:	39 1d 2c f8 01 c0    	cmp    DWORD PTR ds:0xc001f82c,ebx
c000a0b8:	7f c6                	jg     c000a080 <VAS::evict(unsigned long)+0x28>
c000a0ba:	83 ec 08             	sub    esp,0x8
c000a0bd:	c1 e7 0b             	shl    edi,0xb
c000a0c0:	55                   	push   ebp
c000a0c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0c5:	50                   	push   eax
c000a0c6:	e8 db f4 ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c000a0cb:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0cd:	89 d1                	mov    ecx,edx
c000a0cf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a0d5:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a0db:	09 cf                	or     edi,ecx
c000a0dd:	89 38                	mov    DWORD PTR [eax],edi
c000a0df:	89 14 24             	mov    DWORD PTR [esp],edx
c000a0e2:	ff 05 68 0c 02 c0    	inc    DWORD PTR ds:0xc0020c68
c000a0e8:	e8 56 d9 ff ff       	call   c0007a43 <Phys::freePage(unsigned long)>
c000a0ed:	0f 20 d8             	mov    eax,cr3
c000a0f0:	0f 22 d8             	mov    cr3,eax
c000a0f3:	a1 64 0c 02 c0       	mov    eax,ds:0xc0020c64
c000a0f8:	c7 44 24 40 f1 da 01 c0 	mov    DWORD PTR [esp+0x40],0xc001daf1
c000a100:	8d 50 01             	lea    edx,[eax+0x1]
c000a103:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a107:	89 15 64 0c 02 c0    	mov    DWORD PTR ds:0xc0020c64,edx
c000a10d:	83 c4 2c             	add    esp,0x2c
c000a110:	5b                   	pop    ebx
c000a111:	5e                   	pop    esi
c000a112:	5f                   	pop    edi
c000a113:	5d                   	pop    ebp
c000a114:	e9 cf 03 00 00       	jmp    c000a4e8 <Dbg::kprintf(char const*, ...)>
c000a119:	90                   	nop

c000a11a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a11a:	55                   	push   ebp
c000a11b:	57                   	push   edi
c000a11c:	56                   	push   esi
c000a11d:	53                   	push   ebx
c000a11e:	83 ec 14             	sub    esp,0x14
c000a121:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a125:	53                   	push   ebx
c000a126:	68 02 db 01 c0       	push   0xc001db02
c000a12b:	e8 b8 03 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a139:	74 21                	je     c000a15c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a13b:	83 ec 08             	sub    esp,0x8
c000a13e:	53                   	push   ebx
c000a13f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a143:	57                   	push   edi
c000a144:	e8 5d f4 ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 c6                	mov    esi,eax
c000a14e:	85 c0                	test   eax,eax
c000a150:	74 0a                	je     c000a15c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a152:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a154:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a15a:	74 0a                	je     c000a166 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a15c:	31 c0                	xor    eax,eax
c000a15e:	83 c4 0c             	add    esp,0xc
c000a161:	5b                   	pop    ebx
c000a162:	5e                   	pop    esi
c000a163:	5f                   	pop    edi
c000a164:	5d                   	pop    ebp
c000a165:	c3                   	ret    
c000a166:	e8 3a d9 ff ff       	call   c0007aa5 <Phys::allocatePage()>
c000a16b:	c1 ed 0b             	shr    ebp,0xb
c000a16e:	8b 16                	mov    edx,DWORD PTR [esi]
c000a170:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a176:	09 c2                	or     edx,eax
c000a178:	81 ca 01 08 00 00    	or     edx,0x801
c000a17e:	89 16                	mov    DWORD PTR [esi],edx
c000a180:	8b 35 2c f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f82c
c000a186:	85 f6                	test   esi,esi
c000a188:	7e 3e                	jle    c000a1c8 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a18a:	89 df                	mov    edi,ebx
c000a18c:	31 f6                	xor    esi,esi
c000a18e:	83 ec 0c             	sub    esp,0xc
c000a191:	55                   	push   ebp
c000a192:	e8 2d f2 ff ff       	call   c00093c4 <Virt::swapIDToSector(unsigned long)>
c000a197:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a19a:	01 f0                	add    eax,esi
c000a19c:	6a 01                	push   0x1
c000a19e:	31 d2                	xor    edx,edx
c000a1a0:	46                   	inc    esi
c000a1a1:	52                   	push   edx
c000a1a2:	81 c7 00 02 00 00    	add    edi,0x200
c000a1a8:	50                   	push   eax
c000a1a9:	0f be 05 38 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f838
c000a1b0:	8b 0c 85 dc 2f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd024]
c000a1b7:	51                   	push   ecx
c000a1b8:	e8 53 2a 00 00       	call   c000cc10 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1bd:	83 c4 20             	add    esp,0x20
c000a1c0:	39 35 2c f8 01 c0    	cmp    DWORD PTR ds:0xc001f82c,esi
c000a1c6:	7f c6                	jg     c000a18e <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a1c8:	a1 68 0c 02 c0       	mov    eax,ds:0xc0020c68
c000a1cd:	48                   	dec    eax
c000a1ce:	52                   	push   edx
c000a1cf:	a3 68 0c 02 c0       	mov    ds:0xc0020c68,eax
c000a1d4:	50                   	push   eax
c000a1d5:	53                   	push   ebx
c000a1d6:	68 15 db 01 c0       	push   0xc001db15
c000a1db:	e8 08 03 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000a1e0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a1e3:	e8 be f1 ff ff       	call   c00093a6 <Virt::freeSwapfilePage(unsigned long)>
c000a1e8:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000a1ed:	83 c4 10             	add    esp,0x10
c000a1f0:	48                   	dec    eax
c000a1f1:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c000a1f6:	85 c0                	test   eax,eax
c000a1f8:	75 01                	jne    c000a1fb <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a1fa:	fb                   	sti    
c000a1fb:	0f 20 d8             	mov    eax,cr3
c000a1fe:	0f 22 d8             	mov    cr3,eax
c000a201:	b0 01                	mov    al,0x1
c000a203:	e9 56 ff ff ff       	jmp    c000a15e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a208 <VAS::scanForEviction()>:
c000a208:	57                   	push   edi
c000a209:	31 ff                	xor    edi,edi
c000a20b:	56                   	push   esi
c000a20c:	53                   	push   ebx
c000a20d:	83 ec 10             	sub    esp,0x10
c000a210:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a214:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a217:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a21d:	75 0e                	jne    c000a22d <VAS::scanForEviction()+0x25>
c000a21f:	89 da                	mov    edx,ebx
c000a221:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a224:	c1 ea 16             	shr    edx,0x16
c000a227:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a22b:	74 4e                	je     c000a27b <VAS::scanForEviction()+0x73>
c000a22d:	53                   	push   ebx
c000a22e:	56                   	push   esi
c000a22f:	e8 72 f3 ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c000a234:	5a                   	pop    edx
c000a235:	8b 10                	mov    edx,DWORD PTR [eax]
c000a237:	59                   	pop    ecx
c000a238:	89 d1                	mov    ecx,edx
c000a23a:	81 e1 01 08 00 00    	and    ecx,0x801
c000a240:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a246:	74 3e                	je     c000a286 <VAS::scanForEviction()+0x7e>
c000a248:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a24e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a254:	76 2b                	jbe    c000a281 <VAS::scanForEviction()+0x79>
c000a256:	47                   	inc    edi
c000a257:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a25e:	83 ff 03             	cmp    edi,0x3
c000a261:	74 32                	je     c000a295 <VAS::scanForEviction()+0x8d>
c000a263:	31 db                	xor    ebx,ebx
c000a265:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a26b:	75 c0                	jne    c000a22d <VAS::scanForEviction()+0x25>
c000a26d:	89 da                	mov    edx,ebx
c000a26f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a272:	c1 ea 16             	shr    edx,0x16
c000a275:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a279:	75 b2                	jne    c000a22d <VAS::scanForEviction()+0x25>
c000a27b:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a281:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a284:	eb 91                	jmp    c000a217 <VAS::scanForEviction()+0xf>
c000a286:	f6 c2 20             	test   dl,0x20
c000a289:	74 13                	je     c000a29e <VAS::scanForEviction()+0x96>
c000a28b:	83 e2 df             	and    edx,0xffffffdf
c000a28e:	89 10                	mov    DWORD PTR [eax],edx
c000a290:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a293:	eb b3                	jmp    c000a248 <VAS::scanForEviction()+0x40>
c000a295:	83 c4 10             	add    esp,0x10
c000a298:	31 c0                	xor    eax,eax
c000a29a:	5b                   	pop    ebx
c000a29b:	5e                   	pop    esi
c000a29c:	5f                   	pop    edi
c000a29d:	c3                   	ret    
c000a29e:	83 ec 08             	sub    esp,0x8
c000a2a1:	89 d0                	mov    eax,edx
c000a2a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2ac:	53                   	push   ebx
c000a2ad:	68 2a db 01 c0       	push   0xc001db2a
c000a2b2:	e8 31 02 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000a2b7:	58                   	pop    eax
c000a2b8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2bb:	5a                   	pop    edx
c000a2bc:	51                   	push   ecx
c000a2bd:	56                   	push   esi
c000a2be:	e8 95 fd ff ff       	call   c000a058 <VAS::evict(unsigned long)>
c000a2c3:	5b                   	pop    ebx
c000a2c4:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a2c7:	5f                   	pop    edi
c000a2c8:	50                   	push   eax
c000a2c9:	68 3e db 01 c0       	push   0xc001db3e
c000a2ce:	e8 15 02 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000a2d3:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a2da:	83 c4 10             	add    esp,0x10
c000a2dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2e1:	83 c4 10             	add    esp,0x10
c000a2e4:	5b                   	pop    ebx
c000a2e5:	5e                   	pop    esi
c000a2e6:	5f                   	pop    edi
c000a2e7:	c3                   	ret    

c000a2e8 <mapVASFirstTime>:
c000a2e8:	55                   	push   ebp
c000a2e9:	57                   	push   edi
c000a2ea:	56                   	push   esi
c000a2eb:	53                   	push   ebx
c000a2ec:	83 ec 0c             	sub    esp,0xc
c000a2ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a2f4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a2f7:	4a                   	dec    edx
c000a2f8:	0f 84 8c 00 00 00    	je     c000a38a <mapVASFirstTime+0xa2>
c000a2fe:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a301:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a304:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a309:	c1 e5 15             	shl    ebp,0x15
c000a30c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a311:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a317:	29 eb                	sub    ebx,ebp
c000a319:	29 ef                	sub    edi,ebp
c000a31b:	e8 85 d7 ff ff       	call   c0007aa5 <Phys::allocatePage()>
c000a320:	83 ec 0c             	sub    esp,0xc
c000a323:	68 03 04 00 00       	push   0x403
c000a328:	6a 01                	push   0x1
c000a32a:	53                   	push   ebx
c000a32b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a331:	50                   	push   eax
c000a332:	56                   	push   esi
c000a333:	e8 ec f8 ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a338:	83 c4 20             	add    esp,0x20
c000a33b:	39 fb                	cmp    ebx,edi
c000a33d:	75 dc                	jne    c000a31b <mapVASFirstTime+0x33>
c000a33f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a344:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a349:	29 eb                	sub    ebx,ebp
c000a34b:	29 ef                	sub    edi,ebp
c000a34d:	e8 53 d7 ff ff       	call   c0007aa5 <Phys::allocatePage()>
c000a352:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a356:	19 d2                	sbb    edx,edx
c000a358:	83 ec 0c             	sub    esp,0xc
c000a35b:	83 e2 04             	and    edx,0x4
c000a35e:	81 c2 03 04 00 00    	add    edx,0x403
c000a364:	52                   	push   edx
c000a365:	6a 01                	push   0x1
c000a367:	53                   	push   ebx
c000a368:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a36e:	50                   	push   eax
c000a36f:	56                   	push   esi
c000a370:	e8 af f8 ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a375:	83 c4 20             	add    esp,0x20
c000a378:	39 df                	cmp    edi,ebx
c000a37a:	75 d1                	jne    c000a34d <mapVASFirstTime+0x65>
c000a37c:	0f 20 d8             	mov    eax,cr3
c000a37f:	0f 22 d8             	mov    cr3,eax
c000a382:	83 c4 0c             	add    esp,0xc
c000a385:	5b                   	pop    ebx
c000a386:	5e                   	pop    esi
c000a387:	5f                   	pop    edi
c000a388:	5d                   	pop    ebp
c000a389:	c3                   	ret    
c000a38a:	83 ec 0c             	sub    esp,0xc
c000a38d:	68 51 db 01 c0       	push   0xc001db51
c000a392:	e8 51 01 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000a397:	83 c4 10             	add    esp,0x10
c000a39a:	83 c4 0c             	add    esp,0xc
c000a39d:	5b                   	pop    ebx
c000a39e:	5e                   	pop    esi
c000a39f:	5f                   	pop    edi
c000a3a0:	5d                   	pop    ebp
c000a3a1:	c3                   	ret    

c000a3a2 <__cxa_atexit>:
c000a3a2:	31 c0                	xor    eax,eax
c000a3a4:	c3                   	ret    

c000a3a5 <__cxa_finalize>:
c000a3a5:	c3                   	ret    

c000a3a6 <__stack_chk_fail>:
c000a3a6:	55                   	push   ebp
c000a3a7:	89 e5                	mov    ebp,esp
c000a3a9:	83 ec 10             	sub    esp,0x10
c000a3ac:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a3af:	68 6a db 01 c0       	push   0xc001db6a
c000a3b4:	e8 2f 01 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000a3b9:	58                   	pop    eax
c000a3ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3bd:	5a                   	pop    edx
c000a3be:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a3c1:	68 6a db 01 c0       	push   0xc001db6a
c000a3c6:	e8 1d 01 00 00       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000a3cb:	c7 04 24 72 db 01 c0 	mov    DWORD PTR [esp],0xc001db72
c000a3d2:	e8 94 5d 00 00       	call   c001016b <KePanic(char const*)>
c000a3d7:	83 c4 10             	add    esp,0x10
c000a3da:	c9                   	leave  
c000a3db:	c3                   	ret    

c000a3dc <__cxa_pure_virtual>:
c000a3dc:	83 ec 18             	sub    esp,0x18
c000a3df:	68 8a db 01 c0       	push   0xc001db8a
c000a3e4:	e8 82 5d 00 00       	call   c001016b <KePanic(char const*)>
c000a3e9:	83 c4 1c             	add    esp,0x1c
c000a3ec:	c3                   	ret    

c000a3ed <operator new[](unsigned long)>:
c000a3ed:	e9 d7 d3 ff ff       	jmp    c00077c9 <malloc>

c000a3f2 <operator delete(void*, unsigned long)>:
c000a3f2:	e9 f2 d3 ff ff       	jmp    c00077e9 <rfree>

c000a3f7 <operator delete[](void*)>:
c000a3f7:	e9 ed d3 ff ff       	jmp    c00077e9 <rfree>

c000a3fc <operator delete[](void*, unsigned long)>:
c000a3fc:	e9 e8 d3 ff ff       	jmp    c00077e9 <rfree>

c000a401 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a401:	55                   	push   ebp
c000a402:	b9 04 00 00 00       	mov    ecx,0x4
c000a407:	57                   	push   edi
c000a408:	56                   	push   esi
c000a409:	be 93 d7 01 c0       	mov    esi,0xc001d793
c000a40e:	53                   	push   ebx
c000a40f:	83 ec 20             	sub    esp,0x20
c000a412:	a1 92 d7 01 c0       	mov    eax,ds:0xc001d792
c000a417:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a41b:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a41f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a423:	a1 9f d7 01 c0       	mov    eax,ds:0xc001d79f
c000a428:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a42c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a430:	fc                   	cld    
c000a431:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a433:	89 ee                	mov    esi,ebp
c000a435:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a439:	eb 02                	jmp    c000a43d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a43b:	89 c6                	mov    esi,eax
c000a43d:	31 d2                	xor    edx,edx
c000a43f:	41                   	inc    ecx
c000a440:	89 f0                	mov    eax,esi
c000a442:	f7 f3                	div    ebx
c000a444:	39 de                	cmp    esi,ebx
c000a446:	73 f3                	jae    c000a43b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a448:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a44b:	eb 02                	jmp    c000a44f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a44d:	89 c5                	mov    ebp,eax
c000a44f:	31 d2                	xor    edx,edx
c000a451:	49                   	dec    ecx
c000a452:	89 e8                	mov    eax,ebp
c000a454:	f7 f3                	div    ebx
c000a456:	39 dd                	cmp    ebp,ebx
c000a458:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a45c:	88 11                	mov    BYTE PTR [ecx],dl
c000a45e:	73 ed                	jae    c000a44d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a460:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a464:	83 c4 20             	add    esp,0x20
c000a467:	5b                   	pop    ebx
c000a468:	5e                   	pop    esi
c000a469:	5f                   	pop    edi
c000a46a:	5d                   	pop    ebp
c000a46b:	c3                   	ret    

c000a46c <Dbg::logc(char)>:
c000a46c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a470:	f6 05 90 0b 02 c0 10 	test   BYTE PTR ds:0xc0020b90,0x10
c000a477:	75 12                	jne    c000a48b <Dbg::logc(char)+0x1f>
c000a479:	ba fd 03 00 00       	mov    edx,0x3fd
c000a47e:	ec                   	in     al,dx
c000a47f:	a8 20                	test   al,0x20
c000a481:	74 fb                	je     c000a47e <Dbg::logc(char)+0x12>
c000a483:	ba f8 03 00 00       	mov    edx,0x3f8
c000a488:	88 c8                	mov    al,cl
c000a48a:	ee                   	out    dx,al
c000a48b:	c3                   	ret    

c000a48c <Dbg::logs(char*)>:
c000a48c:	53                   	push   ebx
c000a48d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a491:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a494:	84 c0                	test   al,al
c000a496:	74 0f                	je     c000a4a7 <Dbg::logs(char*)+0x1b>
c000a498:	50                   	push   eax
c000a499:	43                   	inc    ebx
c000a49a:	e8 cd ff ff ff       	call   c000a46c <Dbg::logc(char)>
c000a49f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a4a2:	5a                   	pop    edx
c000a4a3:	84 c0                	test   al,al
c000a4a5:	75 f1                	jne    c000a498 <Dbg::logs(char*)+0xc>
c000a4a7:	5b                   	pop    ebx
c000a4a8:	c3                   	ret    

c000a4a9 <Dbg::logWriteInt(unsigned int)>:
c000a4a9:	83 ec 10             	sub    esp,0x10
c000a4ac:	6a 0a                	push   0xa
c000a4ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4b2:	50                   	push   eax
c000a4b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4b7:	50                   	push   eax
c000a4b8:	e8 44 ff ff ff       	call   c000a401 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4bd:	50                   	push   eax
c000a4be:	e8 c9 ff ff ff       	call   c000a48c <Dbg::logs(char*)>
c000a4c3:	83 c4 20             	add    esp,0x20
c000a4c6:	c3                   	ret    

c000a4c7 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a4c7:	83 ec 10             	sub    esp,0x10
c000a4ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4ce:	50                   	push   eax
c000a4cf:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4d3:	50                   	push   eax
c000a4d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4d8:	52                   	push   edx
c000a4d9:	e8 23 ff ff ff       	call   c000a401 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4de:	50                   	push   eax
c000a4df:	e8 a8 ff ff ff       	call   c000a48c <Dbg::logs(char*)>
c000a4e4:	83 c4 20             	add    esp,0x20
c000a4e7:	c3                   	ret    

c000a4e8 <Dbg::kprintf(char const*, ...)>:
c000a4e8:	55                   	push   ebp
c000a4e9:	57                   	push   edi
c000a4ea:	56                   	push   esi
c000a4eb:	53                   	push   ebx
c000a4ec:	83 ec 0c             	sub    esp,0xc
c000a4ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a4f3:	f6 05 90 0b 02 c0 10 	test   BYTE PTR ds:0xc0020b90,0x10
c000a4fa:	74 08                	je     c000a504 <Dbg::kprintf(char const*, ...)+0x1c>
c000a4fc:	83 c4 0c             	add    esp,0xc
c000a4ff:	5b                   	pop    ebx
c000a500:	5e                   	pop    esi
c000a501:	5f                   	pop    edi
c000a502:	5d                   	pop    ebp
c000a503:	c3                   	ret    
c000a504:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a508:	31 ff                	xor    edi,edi
c000a50a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a50e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a511:	84 c0                	test   al,al
c000a513:	74 e7                	je     c000a4fc <Dbg::kprintf(char const*, ...)+0x14>
c000a515:	8d 77 01             	lea    esi,[edi+0x1]
c000a518:	3c 25                	cmp    al,0x25
c000a51a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a51d:	75 47                	jne    c000a566 <Dbg::kprintf(char const*, ...)+0x7e>
c000a51f:	83 c7 02             	add    edi,0x2
c000a522:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a525:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a528:	83 e8 25             	sub    eax,0x25
c000a52b:	3c 53                	cmp    al,0x53
c000a52d:	0f 87 d2 00 00 00    	ja     c000a605 <Dbg::kprintf(char const*, ...)+0x11d>
c000a533:	25 ff 00 00 00       	and    eax,0xff
c000a538:	ff 24 85 a0 db 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2460]
c000a53f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a543:	89 c8                	mov    eax,ecx
c000a545:	83 c1 04             	add    ecx,0x4
c000a548:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a54c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a54e:	55                   	push   ebp
c000a54f:	e8 55 ff ff ff       	call   c000a4a9 <Dbg::logWriteInt(unsigned int)>
c000a554:	58                   	pop    eax
c000a555:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a558:	84 c0                	test   al,al
c000a55a:	74 a0                	je     c000a4fc <Dbg::kprintf(char const*, ...)+0x14>
c000a55c:	8d 77 01             	lea    esi,[edi+0x1]
c000a55f:	3c 25                	cmp    al,0x25
c000a561:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a564:	74 b9                	je     c000a51f <Dbg::kprintf(char const*, ...)+0x37>
c000a566:	50                   	push   eax
c000a567:	89 f7                	mov    edi,esi
c000a569:	e8 fe fe ff ff       	call   c000a46c <Dbg::logc(char)>
c000a56e:	89 ee                	mov    esi,ebp
c000a570:	58                   	pop    eax
c000a571:	eb e2                	jmp    c000a555 <Dbg::kprintf(char const*, ...)+0x6d>
c000a573:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a577:	89 c8                	mov    eax,ecx
c000a579:	83 c1 04             	add    ecx,0x4
c000a57c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a57e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a582:	50                   	push   eax
c000a583:	e8 04 ff ff ff       	call   c000a48c <Dbg::logs(char*)>
c000a588:	58                   	pop    eax
c000a589:	eb ca                	jmp    c000a555 <Dbg::kprintf(char const*, ...)+0x6d>
c000a58b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a58f:	89 d0                	mov    eax,edx
c000a591:	83 c2 04             	add    edx,0x4
c000a594:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a598:	8b 00                	mov    eax,DWORD PTR [eax]
c000a59a:	50                   	push   eax
c000a59b:	e8 09 ff ff ff       	call   c000a4a9 <Dbg::logWriteInt(unsigned int)>
c000a5a0:	58                   	pop    eax
c000a5a1:	eb b2                	jmp    c000a555 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5a7:	89 d0                	mov    eax,edx
c000a5a9:	83 c2 04             	add    edx,0x4
c000a5ac:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a5af:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5b3:	50                   	push   eax
c000a5b4:	e8 b3 fe ff ff       	call   c000a46c <Dbg::logc(char)>
c000a5b9:	58                   	pop    eax
c000a5ba:	eb 99                	jmp    c000a555 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5bc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5c0:	89 c8                	mov    eax,ecx
c000a5c2:	83 c1 04             	add    ecx,0x4
c000a5c5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5c9:	6a 10                	push   0x10
c000a5cb:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a5cd:	51                   	push   ecx
c000a5ce:	e8 f4 fe ff ff       	call   c000a4c7 <Dbg::logWriteIntBase(unsigned int, int)>
c000a5d3:	5d                   	pop    ebp
c000a5d4:	58                   	pop    eax
c000a5d5:	e9 7b ff ff ff       	jmp    c000a555 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5de:	89 d0                	mov    eax,edx
c000a5e0:	83 c2 08             	add    edx,0x8
c000a5e3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5e7:	6a 10                	push   0x10
c000a5e9:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5eb:	50                   	push   eax
c000a5ec:	e8 d6 fe ff ff       	call   c000a4c7 <Dbg::logWriteIntBase(unsigned int, int)>
c000a5f1:	58                   	pop    eax
c000a5f2:	5a                   	pop    edx
c000a5f3:	e9 5d ff ff ff       	jmp    c000a555 <Dbg::kprintf(char const*, ...)+0x6d>
c000a5f8:	6a 25                	push   0x25
c000a5fa:	e8 6d fe ff ff       	call   c000a46c <Dbg::logc(char)>
c000a5ff:	5a                   	pop    edx
c000a600:	e9 50 ff ff ff       	jmp    c000a555 <Dbg::kprintf(char const*, ...)+0x6d>
c000a605:	6a 25                	push   0x25
c000a607:	e8 60 fe ff ff       	call   c000a46c <Dbg::logc(char)>
c000a60c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a610:	50                   	push   eax
c000a611:	e8 56 fe ff ff       	call   c000a46c <Dbg::logc(char)>
c000a616:	5a                   	pop    edx
c000a617:	59                   	pop    ecx
c000a618:	e9 38 ff ff ff       	jmp    c000a555 <Dbg::kprintf(char const*, ...)+0x6d>
c000a61d:	90                   	nop

c000a61e <File::read(unsigned long long, void*, int*)>:
c000a61e:	53                   	push   ebx
c000a61f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a623:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a627:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a62e:	3c 19                	cmp    al,0x19
c000a630:	77 35                	ja     c000a667 <File::read(unsigned long long, void*, int*)+0x49>
c000a632:	8b 04 85 e0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf20]
c000a639:	85 c0                	test   eax,eax
c000a63b:	74 2a                	je     c000a667 <File::read(unsigned long long, void*, int*)+0x49>
c000a63d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a643:	85 c0                	test   eax,eax
c000a645:	74 20                	je     c000a667 <File::read(unsigned long long, void*, int*)+0x49>
c000a647:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a64b:	74 21                	je     c000a66e <File::read(unsigned long long, void*, int*)+0x50>
c000a64d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a64f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a653:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a659:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a65d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a661:	5b                   	pop    ebx
c000a662:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a665:	ff e0                	jmp    eax
c000a667:	b8 0b 00 00 00       	mov    eax,0xb
c000a66c:	eb 05                	jmp    c000a673 <File::read(unsigned long long, void*, int*)+0x55>
c000a66e:	b8 05 00 00 00       	mov    eax,0x5
c000a673:	5b                   	pop    ebx
c000a674:	c3                   	ret    
c000a675:	90                   	nop

c000a676 <File::write(unsigned long long, void*, int*)>:
c000a676:	53                   	push   ebx
c000a677:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a67b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a67f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a686:	3c 19                	cmp    al,0x19
c000a688:	77 35                	ja     c000a6bf <File::write(unsigned long long, void*, int*)+0x49>
c000a68a:	8b 04 85 e0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf20]
c000a691:	85 c0                	test   eax,eax
c000a693:	74 2a                	je     c000a6bf <File::write(unsigned long long, void*, int*)+0x49>
c000a695:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a69b:	85 c0                	test   eax,eax
c000a69d:	74 20                	je     c000a6bf <File::write(unsigned long long, void*, int*)+0x49>
c000a69f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6a3:	74 21                	je     c000a6c6 <File::write(unsigned long long, void*, int*)+0x50>
c000a6a5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6a7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6ab:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6b9:	5b                   	pop    ebx
c000a6ba:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a6bd:	ff e0                	jmp    eax
c000a6bf:	b8 0b 00 00 00       	mov    eax,0xb
c000a6c4:	eb 05                	jmp    c000a6cb <File::write(unsigned long long, void*, int*)+0x55>
c000a6c6:	b8 05 00 00 00       	mov    eax,0x5
c000a6cb:	5b                   	pop    ebx
c000a6cc:	c3                   	ret    
c000a6cd:	90                   	nop

c000a6ce <Directory::read(unsigned long long, void*, int*)>:
c000a6ce:	53                   	push   ebx
c000a6cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6d7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6de:	3c 19                	cmp    al,0x19
c000a6e0:	77 35                	ja     c000a717 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6e2:	8b 04 85 e0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf20]
c000a6e9:	85 c0                	test   eax,eax
c000a6eb:	74 2a                	je     c000a717 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6ed:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6f3:	85 c0                	test   eax,eax
c000a6f5:	74 20                	je     c000a717 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6f7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6fb:	74 21                	je     c000a71e <Directory::read(unsigned long long, void*, int*)+0x50>
c000a6fd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6ff:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a703:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a709:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a70d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a711:	5b                   	pop    ebx
c000a712:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a715:	ff e0                	jmp    eax
c000a717:	b8 0b 00 00 00       	mov    eax,0xb
c000a71c:	eb 05                	jmp    c000a723 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a71e:	b8 05 00 00 00       	mov    eax,0x5
c000a723:	5b                   	pop    ebx
c000a724:	c3                   	ret    
c000a725:	90                   	nop

c000a726 <Directory::write(unsigned long long, void*, int*)>:
c000a726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a72a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a731:	b8 0b 00 00 00       	mov    eax,0xb
c000a736:	80 fa 19             	cmp    dl,0x19
c000a739:	77 18                	ja     c000a753 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a73b:	8b 14 95 e0 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf20]
c000a742:	85 d2                	test   edx,edx
c000a744:	74 0d                	je     c000a753 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a746:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a74d:	19 c0                	sbb    eax,eax
c000a74f:	83 e0 0a             	and    eax,0xa
c000a752:	40                   	inc    eax
c000a753:	c3                   	ret    

c000a754 <File::isAtty()>:
c000a754:	31 c0                	xor    eax,eax
c000a756:	c3                   	ret    
c000a757:	90                   	nop

c000a758 <Directory::isAtty()>:
c000a758:	31 c0                	xor    eax,eax
c000a75a:	c3                   	ret    
c000a75b:	90                   	nop

c000a75c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a75c:	b8 0a 00 00 00       	mov    eax,0xa
c000a761:	c3                   	ret    

c000a762 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a762:	b8 0a 00 00 00       	mov    eax,0xa
c000a767:	c3                   	ret    

c000a768 <Filesystem::allocateSwapfile(char const*, int)>:
c000a768:	31 c0                	xor    eax,eax
c000a76a:	31 d2                	xor    edx,edx
c000a76c:	c3                   	ret    
c000a76d:	90                   	nop

c000a76e <File::~File()>:
c000a76e:	83 ec 0c             	sub    esp,0xc
c000a771:	ba 60 dd 01 c0       	mov    edx,0xc001dd60
c000a776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a77a:	89 10                	mov    DWORD PTR [eax],edx
c000a77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a780:	83 ec 0c             	sub    esp,0xc
c000a783:	50                   	push   eax
c000a784:	e8 ab e8 ff ff       	call   c0009034 <UnixFile::~UnixFile()>
c000a789:	83 c4 10             	add    esp,0x10
c000a78c:	90                   	nop
c000a78d:	83 c4 0c             	add    esp,0xc
c000a790:	c3                   	ret    
c000a791:	90                   	nop

c000a792 <File::~File()>:
c000a792:	83 ec 0c             	sub    esp,0xc
c000a795:	83 ec 0c             	sub    esp,0xc
c000a798:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a79c:	e8 cd ff ff ff       	call   c000a76e <File::~File()>
c000a7a1:	83 c4 10             	add    esp,0x10
c000a7a4:	83 ec 08             	sub    esp,0x8
c000a7a7:	68 14 01 00 00       	push   0x114
c000a7ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7b0:	e8 3d fc ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000a7b5:	83 c4 10             	add    esp,0x10
c000a7b8:	83 c4 0c             	add    esp,0xc
c000a7bb:	c3                   	ret    

c000a7bc <Directory::~Directory()>:
c000a7bc:	83 ec 0c             	sub    esp,0xc
c000a7bf:	ba 7c dd 01 c0       	mov    edx,0xc001dd7c
c000a7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c8:	89 10                	mov    DWORD PTR [eax],edx
c000a7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7ce:	83 ec 0c             	sub    esp,0xc
c000a7d1:	50                   	push   eax
c000a7d2:	e8 5d e8 ff ff       	call   c0009034 <UnixFile::~UnixFile()>
c000a7d7:	83 c4 10             	add    esp,0x10
c000a7da:	90                   	nop
c000a7db:	83 c4 0c             	add    esp,0xc
c000a7de:	c3                   	ret    
c000a7df:	90                   	nop

c000a7e0 <Directory::~Directory()>:
c000a7e0:	83 ec 0c             	sub    esp,0xc
c000a7e3:	83 ec 0c             	sub    esp,0xc
c000a7e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ea:	e8 cd ff ff ff       	call   c000a7bc <Directory::~Directory()>
c000a7ef:	83 c4 10             	add    esp,0x10
c000a7f2:	83 ec 08             	sub    esp,0x8
c000a7f5:	68 14 01 00 00       	push   0x114
c000a7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7fe:	e8 ef fb ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000a803:	83 c4 10             	add    esp,0x10
c000a806:	83 c4 0c             	add    esp,0xc
c000a809:	c3                   	ret    

c000a80a <Filesystem::Filesystem()>:
c000a80a:	ba f8 dc 01 c0       	mov    edx,0xc001dcf8
c000a80f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a813:	89 10                	mov    DWORD PTR [eax],edx
c000a815:	8b 15 74 0c 02 c0    	mov    edx,DWORD PTR ds:0xc0020c74
c000a81b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a81f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a822:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a826:	a3 74 0c 02 c0       	mov    ds:0xc0020c74,eax
c000a82b:	90                   	nop
c000a82c:	c3                   	ret    
c000a82d:	90                   	nop

c000a82e <Filesystem::~Filesystem()>:
c000a82e:	ba f8 dc 01 c0       	mov    edx,0xc001dcf8
c000a833:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a837:	89 10                	mov    DWORD PTR [eax],edx
c000a839:	90                   	nop
c000a83a:	c3                   	ret    
c000a83b:	90                   	nop

c000a83c <Filesystem::~Filesystem()>:
c000a83c:	83 ec 0c             	sub    esp,0xc
c000a83f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a843:	e8 e6 ff ff ff       	call   c000a82e <Filesystem::~Filesystem()>
c000a848:	83 c4 04             	add    esp,0x4
c000a84b:	83 ec 08             	sub    esp,0x8
c000a84e:	6a 08                	push   0x8
c000a850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a854:	e8 99 fb ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000a859:	83 c4 10             	add    esp,0x10
c000a85c:	83 c4 0c             	add    esp,0xc
c000a85f:	c3                   	ret    

c000a860 <Fs::getcwd(Process*, char*, int)>:
c000a860:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a864:	31 c0                	xor    eax,eax
c000a866:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a869:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a86d:	7d 15                	jge    c000a884 <Fs::getcwd(Process*, char*, int)+0x24>
c000a86f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a873:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a87a:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a87d:	84 c9                	test   cl,cl
c000a87f:	74 06                	je     c000a887 <Fs::getcwd(Process*, char*, int)+0x27>
c000a881:	40                   	inc    eax
c000a882:	eb e2                	jmp    c000a866 <Fs::getcwd(Process*, char*, int)+0x6>
c000a884:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a887:	31 c0                	xor    eax,eax
c000a889:	c3                   	ret    

c000a88a <Fs::initVFS()>:
c000a88a:	83 ec 18             	sub    esp,0x18
c000a88d:	6a 08                	push   0x8
c000a88f:	e8 35 cf ff ff       	call   c00077c9 <malloc>
c000a894:	89 04 24             	mov    DWORD PTR [esp],eax
c000a897:	e8 3c c8 00 00       	call   c00170d8 <FAT::FAT()>
c000a89c:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a8a3:	e8 21 cf ff ff       	call   c00077c9 <malloc>
c000a8a8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8ab:	e8 84 d5 00 00       	call   c0017e34 <ISO9660::ISO9660()>
c000a8b0:	83 c4 1c             	add    esp,0x1c
c000a8b3:	c3                   	ret    

c000a8b4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a8b4:	55                   	push   ebp
c000a8b5:	57                   	push   edi
c000a8b6:	56                   	push   esi
c000a8b7:	53                   	push   ebx
c000a8b8:	81 ec 10 04 00 00    	sub    esp,0x410
c000a8be:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a8c5:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a8cc:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a8d3:	68 00 04 00 00       	push   0x400
c000a8d8:	6a 00                	push   0x0
c000a8da:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a8de:	56                   	push   esi
c000a8df:	e8 fc 5b ff ff       	call   c00004e0 <memset>
c000a8e4:	83 c4 10             	add    esp,0x10
c000a8e7:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a8eb:	75 0b                	jne    c000a8f8 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a8ed:	50                   	push   eax
c000a8ee:	50                   	push   eax
c000a8ef:	57                   	push   edi
c000a8f0:	56                   	push   esi
c000a8f1:	e8 1a 5d ff ff       	call   c0000610 <strcpy>
c000a8f6:	eb 41                	jmp    c000a939 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a8f8:	8a 07                	mov    al,BYTE PTR [edi]
c000a8fa:	3c 5c                	cmp    al,0x5c
c000a8fc:	74 04                	je     c000a902 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a8fe:	3c 2f                	cmp    al,0x2f
c000a900:	75 18                	jne    c000a91a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a902:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a905:	3c 60                	cmp    al,0x60
c000a907:	7e 03                	jle    c000a90c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a909:	83 e8 20             	sub    eax,0x20
c000a90c:	88 04 24             	mov    BYTE PTR [esp],al
c000a90f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a916:	50                   	push   eax
c000a917:	50                   	push   eax
c000a918:	eb 18                	jmp    c000a932 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a91a:	50                   	push   eax
c000a91b:	50                   	push   eax
c000a91c:	55                   	push   ebp
c000a91d:	56                   	push   esi
c000a91e:	e8 ed 5c ff ff       	call   c0000610 <strcpy>
c000a923:	5a                   	pop    edx
c000a924:	59                   	pop    ecx
c000a925:	68 b6 eb 01 c0       	push   0xc001ebb6
c000a92a:	56                   	push   esi
c000a92b:	e8 a0 5e ff ff       	call   c00007d0 <strcat>
c000a930:	5d                   	pop    ebp
c000a931:	58                   	pop    eax
c000a932:	57                   	push   edi
c000a933:	56                   	push   esi
c000a934:	e8 97 5e ff ff       	call   c00007d0 <strcat>
c000a939:	83 c4 10             	add    esp,0x10
c000a93c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a93f:	3c 60                	cmp    al,0x60
c000a941:	7e 03                	jle    c000a946 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a943:	83 e8 20             	sub    eax,0x20
c000a946:	88 04 24             	mov    BYTE PTR [esp],al
c000a949:	88 03                	mov    BYTE PTR [ebx],al
c000a94b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a952:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a958:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a95c:	bf 03 00 00 00       	mov    edi,0x3
c000a961:	b8 03 00 00 00       	mov    eax,0x3
c000a966:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a969:	84 d2                	test   dl,dl
c000a96b:	0f 84 91 00 00 00    	je     c000aa02 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a971:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a974:	80 fa 5c             	cmp    dl,0x5c
c000a977:	74 05                	je     c000a97e <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a979:	80 fa 2f             	cmp    dl,0x2f
c000a97c:	75 12                	jne    c000a990 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a97e:	89 c5                	mov    ebp,eax
c000a980:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a985:	74 09                	je     c000a990 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a987:	40                   	inc    eax
c000a988:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a98c:	89 cf                	mov    edi,ecx
c000a98e:	eb d6                	jmp    c000a966 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a990:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a995:	75 5b                	jne    c000a9f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a997:	80 fa 2e             	cmp    dl,0x2e
c000a99a:	75 56                	jne    c000a9f2 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a99c:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a9a0:	74 19                	je     c000a9bb <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a9a2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9a7:	74 53                	je     c000a9fc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9a9:	89 f9                	mov    ecx,edi
c000a9ab:	41                   	inc    ecx
c000a9ac:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9af:	80 fa 2f             	cmp    dl,0x2f
c000a9b2:	74 f7                	je     c000a9ab <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9b4:	80 fa 5c             	cmp    dl,0x5c
c000a9b7:	74 f2                	je     c000a9ab <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9b9:	eb d1                	jmp    c000a98c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9bb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9c0:	74 3a                	je     c000a9fc <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9c2:	83 f8 03             	cmp    eax,0x3
c000a9c5:	74 c5                	je     c000a98c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9c7:	41                   	inc    ecx
c000a9c8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9cb:	80 fa 2f             	cmp    dl,0x2f
c000a9ce:	74 f7                	je     c000a9c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9d0:	80 fa 5c             	cmp    dl,0x5c
c000a9d3:	74 f2                	je     c000a9c7 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9d5:	48                   	dec    eax
c000a9d6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9da:	75 06                	jne    c000a9e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9dc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9e0:	eb f3                	jmp    c000a9d5 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000a9e2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9e6:	74 07                	je     c000a9ef <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000a9e8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9ec:	48                   	dec    eax
c000a9ed:	eb f3                	jmp    c000a9e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9ef:	40                   	inc    eax
c000a9f0:	eb 9a                	jmp    c000a98c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9f2:	80 fa 2f             	cmp    dl,0x2f
c000a9f5:	74 95                	je     c000a98c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9f7:	80 fa 5c             	cmp    dl,0x5c
c000a9fa:	74 90                	je     c000a98c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9fc:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000a9ff:	40                   	inc    eax
c000aa00:	eb 8a                	jmp    c000a98c <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aa02:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aa06:	83 ec 0c             	sub    esp,0xc
c000aa09:	53                   	push   ebx
c000aa0a:	e8 41 5b ff ff       	call   c0000550 <strlen>
c000aa0f:	83 c4 10             	add    esp,0x10
c000aa12:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aa17:	75 26                	jne    c000aa3f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aa19:	83 ec 0c             	sub    esp,0xc
c000aa1c:	53                   	push   ebx
c000aa1d:	e8 2e 5b ff ff       	call   c0000550 <strlen>
c000aa22:	83 c4 10             	add    esp,0x10
c000aa25:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aa2a:	74 26                	je     c000aa52 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aa2c:	83 ec 0c             	sub    esp,0xc
c000aa2f:	53                   	push   ebx
c000aa30:	e8 1b 5b ff ff       	call   c0000550 <strlen>
c000aa35:	83 c4 10             	add    esp,0x10
c000aa38:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aa3d:	eb c7                	jmp    c000aa06 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aa3f:	83 ec 0c             	sub    esp,0xc
c000aa42:	53                   	push   ebx
c000aa43:	e8 08 5b ff ff       	call   c0000550 <strlen>
c000aa48:	83 c4 10             	add    esp,0x10
c000aa4b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa50:	74 c7                	je     c000aa19 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aa52:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aa58:	5b                   	pop    ebx
c000aa59:	5e                   	pop    esi
c000aa5a:	5f                   	pop    edi
c000aa5b:	5d                   	pop    ebp
c000aa5c:	c3                   	ret    
c000aa5d:	90                   	nop

c000aa5e <File::File(char const*, Process*)>:
c000aa5e:	83 ec 0c             	sub    esp,0xc
c000aa61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa65:	83 ec 08             	sub    esp,0x8
c000aa68:	6a 00                	push   0x0
c000aa6a:	50                   	push   eax
c000aa6b:	e8 e2 e3 ff ff       	call   c0008e52 <UnixFile::UnixFile(int)>
c000aa70:	83 c4 10             	add    esp,0x10
c000aa73:	ba 60 dd 01 c0       	mov    edx,0xc001dd60
c000aa78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa7c:	89 10                	mov    DWORD PTR [eax],edx
c000aa7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aa82:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aa88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa8c:	83 c0 0d             	add    eax,0xd
c000aa8f:	83 ec 04             	sub    esp,0x4
c000aa92:	52                   	push   edx
c000aa93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa97:	50                   	push   eax
c000aa98:	e8 17 fe ff ff       	call   c000a8b4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aa9d:	83 c4 10             	add    esp,0x10
c000aaa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aaa7:	8d 50 bf             	lea    edx,[eax-0x41]
c000aaaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaae:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aac0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aac6:	25 ff 00 00 00       	and    eax,0xff
c000aacb:	8b 04 85 e0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf20]
c000aad2:	85 c0                	test   eax,eax
c000aad4:	74 42                	je     c000ab18 <File::File(char const*, Process*)+0xba>
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aae0:	25 ff 00 00 00       	and    eax,0xff
c000aae5:	8b 04 85 e0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf20]
c000aaec:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aaf2:	85 c0                	test   eax,eax
c000aaf4:	75 22                	jne    c000ab18 <File::File(char const*, Process*)+0xba>
c000aaf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aafa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ab00:	25 ff 00 00 00       	and    eax,0xff
c000ab05:	8b 04 85 e0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf20]
c000ab0c:	83 ec 0c             	sub    esp,0xc
c000ab0f:	50                   	push   eax
c000ab10:	e8 39 20 00 00       	call   c000cb4e <LogicalDisk::mount()>
c000ab15:	83 c4 10             	add    esp,0x10
c000ab18:	90                   	nop
c000ab19:	83 c4 0c             	add    esp,0xc
c000ab1c:	c3                   	ret    
c000ab1d:	90                   	nop

c000ab1e <File::open(FileOpenMode)>:
c000ab1e:	53                   	push   ebx
c000ab1f:	b8 0b 00 00 00       	mov    eax,0xb
c000ab24:	83 ec 08             	sub    esp,0x8
c000ab27:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab2b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ab32:	80 fa 19             	cmp    dl,0x19
c000ab35:	77 40                	ja     c000ab77 <File::open(FileOpenMode)+0x59>
c000ab37:	8b 14 95 e0 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf20]
c000ab3e:	85 d2                	test   edx,edx
c000ab40:	74 35                	je     c000ab77 <File::open(FileOpenMode)+0x59>
c000ab42:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab48:	85 d2                	test   edx,edx
c000ab4a:	74 2b                	je     c000ab77 <File::open(FileOpenMode)+0x59>
c000ab4c:	b8 06 00 00 00       	mov    eax,0x6
c000ab51:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ab55:	75 20                	jne    c000ab77 <File::open(FileOpenMode)+0x59>
c000ab57:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab59:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ab5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab63:	51                   	push   ecx
c000ab64:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ab67:	51                   	push   ecx
c000ab68:	52                   	push   edx
c000ab69:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ab6c:	83 c4 10             	add    esp,0x10
c000ab6f:	85 c0                	test   eax,eax
c000ab71:	75 04                	jne    c000ab77 <File::open(FileOpenMode)+0x59>
c000ab73:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ab77:	83 c4 08             	add    esp,0x8
c000ab7a:	5b                   	pop    ebx
c000ab7b:	c3                   	ret    

c000ab7c <File::close()>:
c000ab7c:	53                   	push   ebx
c000ab7d:	b8 0b 00 00 00       	mov    eax,0xb
c000ab82:	83 ec 08             	sub    esp,0x8
c000ab85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ab89:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ab90:	80 fa 19             	cmp    dl,0x19
c000ab93:	77 41                	ja     c000abd6 <File::close()+0x5a>
c000ab95:	8b 1c 95 e0 30 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdcf20]
c000ab9c:	85 db                	test   ebx,ebx
c000ab9e:	74 36                	je     c000abd6 <File::close()+0x5a>
c000aba0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000aba7:	74 2d                	je     c000abd6 <File::close()+0x5a>
c000aba9:	b8 05 00 00 00       	mov    eax,0x5
c000abae:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000abb2:	74 22                	je     c000abd6 <File::close()+0x5a>
c000abb4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000abb8:	8b 04 95 e0 30 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcf20]
c000abbf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000abc5:	53                   	push   ebx
c000abc6:	53                   	push   ebx
c000abc7:	8b 10                	mov    edx,DWORD PTR [eax]
c000abc9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000abcf:	50                   	push   eax
c000abd0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000abd3:	83 c4 10             	add    esp,0x10
c000abd6:	83 c4 08             	add    esp,0x8
c000abd9:	5b                   	pop    ebx
c000abda:	c3                   	ret    
c000abdb:	90                   	nop

c000abdc <File::seek(unsigned long long)>:
c000abdc:	56                   	push   esi
c000abdd:	53                   	push   ebx
c000abde:	b8 0b 00 00 00       	mov    eax,0xb
c000abe3:	51                   	push   ecx
c000abe4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000abe8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000abec:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000abf3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000abf7:	80 fa 19             	cmp    dl,0x19
c000abfa:	77 31                	ja     c000ac2d <File::seek(unsigned long long)+0x51>
c000abfc:	8b 14 95 e0 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf20]
c000ac03:	85 d2                	test   edx,edx
c000ac05:	74 26                	je     c000ac2d <File::seek(unsigned long long)+0x51>
c000ac07:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac0d:	85 d2                	test   edx,edx
c000ac0f:	74 1c                	je     c000ac2d <File::seek(unsigned long long)+0x51>
c000ac11:	b8 05 00 00 00       	mov    eax,0x5
c000ac16:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ac1a:	74 11                	je     c000ac2d <File::seek(unsigned long long)+0x51>
c000ac1c:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac1e:	53                   	push   ebx
c000ac1f:	51                   	push   ecx
c000ac20:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ac26:	52                   	push   edx
c000ac27:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	5a                   	pop    edx
c000ac2e:	5b                   	pop    ebx
c000ac2f:	5e                   	pop    esi
c000ac30:	c3                   	ret    
c000ac31:	90                   	nop

c000ac32 <File::tell(unsigned long long*)>:
c000ac32:	83 ec 0c             	sub    esp,0xc
c000ac35:	b8 0b 00 00 00       	mov    eax,0xb
c000ac3a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac3e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac45:	80 fa 19             	cmp    dl,0x19
c000ac48:	77 34                	ja     c000ac7e <File::tell(unsigned long long*)+0x4c>
c000ac4a:	8b 14 95 e0 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf20]
c000ac51:	85 d2                	test   edx,edx
c000ac53:	74 29                	je     c000ac7e <File::tell(unsigned long long*)+0x4c>
c000ac55:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac5b:	85 d2                	test   edx,edx
c000ac5d:	74 1f                	je     c000ac7e <File::tell(unsigned long long*)+0x4c>
c000ac5f:	b8 05 00 00 00       	mov    eax,0x5
c000ac64:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac68:	74 14                	je     c000ac7e <File::tell(unsigned long long*)+0x4c>
c000ac6a:	50                   	push   eax
c000ac6b:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac71:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac77:	52                   	push   edx
c000ac78:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ac7b:	83 c4 10             	add    esp,0x10
c000ac7e:	83 c4 0c             	add    esp,0xc
c000ac81:	c3                   	ret    

c000ac82 <File::rewind()>:
c000ac82:	83 ec 10             	sub    esp,0x10
c000ac85:	6a 00                	push   0x0
c000ac87:	6a 00                	push   0x0
c000ac89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac8d:	e8 4a ff ff ff       	call   c000abdc <File::seek(unsigned long long)>
c000ac92:	83 c4 1c             	add    esp,0x1c
c000ac95:	c3                   	ret    

c000ac96 <File::unlink()>:
c000ac96:	83 ec 0c             	sub    esp,0xc
c000ac99:	b8 0b 00 00 00       	mov    eax,0xb
c000ac9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aca2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aca9:	80 f9 19             	cmp    cl,0x19
c000acac:	77 2f                	ja     c000acdd <File::unlink()+0x47>
c000acae:	8b 0c 8d e0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf20]
c000acb5:	85 c9                	test   ecx,ecx
c000acb7:	74 24                	je     c000acdd <File::unlink()+0x47>
c000acb9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000acbf:	85 c9                	test   ecx,ecx
c000acc1:	74 1a                	je     c000acdd <File::unlink()+0x47>
c000acc3:	b8 06 00 00 00       	mov    eax,0x6
c000acc8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000accc:	75 0f                	jne    c000acdd <File::unlink()+0x47>
c000acce:	83 c2 0d             	add    edx,0xd
c000acd1:	50                   	push   eax
c000acd2:	50                   	push   eax
c000acd3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000acd5:	52                   	push   edx
c000acd6:	51                   	push   ecx
c000acd7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000acda:	83 c4 10             	add    esp,0x10
c000acdd:	83 c4 0c             	add    esp,0xc
c000ace0:	c3                   	ret    
c000ace1:	90                   	nop

c000ace2 <File::rename(char const*)>:
c000ace2:	83 ec 0c             	sub    esp,0xc
c000ace5:	b8 0b 00 00 00       	mov    eax,0xb
c000acea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000acee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000acf5:	80 f9 19             	cmp    cl,0x19
c000acf8:	77 32                	ja     c000ad2c <File::rename(char const*)+0x4a>
c000acfa:	8b 0c 8d e0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf20]
c000ad01:	85 c9                	test   ecx,ecx
c000ad03:	74 27                	je     c000ad2c <File::rename(char const*)+0x4a>
c000ad05:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad0b:	85 c9                	test   ecx,ecx
c000ad0d:	74 1d                	je     c000ad2c <File::rename(char const*)+0x4a>
c000ad0f:	b8 06 00 00 00       	mov    eax,0x6
c000ad14:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad18:	75 12                	jne    c000ad2c <File::rename(char const*)+0x4a>
c000ad1a:	83 c2 0d             	add    edx,0xd
c000ad1d:	50                   	push   eax
c000ad1e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad24:	52                   	push   edx
c000ad25:	51                   	push   ecx
c000ad26:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ad29:	83 c4 10             	add    esp,0x10
c000ad2c:	83 c4 0c             	add    esp,0xc
c000ad2f:	c3                   	ret    

c000ad30 <File::chfatattr(unsigned char, unsigned char)>:
c000ad30:	57                   	push   edi
c000ad31:	b8 0b 00 00 00       	mov    eax,0xb
c000ad36:	56                   	push   esi
c000ad37:	53                   	push   ebx
c000ad38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad3c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad40:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad47:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ad4b:	80 f9 19             	cmp    cl,0x19
c000ad4e:	77 37                	ja     c000ad87 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad50:	8b 0c 8d e0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf20]
c000ad57:	85 c9                	test   ecx,ecx
c000ad59:	74 2c                	je     c000ad87 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad5b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad61:	85 c9                	test   ecx,ecx
c000ad63:	74 22                	je     c000ad87 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad65:	b8 06 00 00 00       	mov    eax,0x6
c000ad6a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad6e:	75 17                	jne    c000ad87 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad70:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ad72:	89 f0                	mov    eax,esi
c000ad74:	83 c2 0d             	add    edx,0xd
c000ad77:	0f b6 f0             	movzx  esi,al
c000ad7a:	0f b6 db             	movzx  ebx,bl
c000ad7d:	56                   	push   esi
c000ad7e:	53                   	push   ebx
c000ad7f:	52                   	push   edx
c000ad80:	51                   	push   ecx
c000ad81:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ad84:	83 c4 10             	add    esp,0x10
c000ad87:	5b                   	pop    ebx
c000ad88:	5e                   	pop    esi
c000ad89:	5f                   	pop    edi
c000ad8a:	c3                   	ret    
c000ad8b:	90                   	nop

c000ad8c <File::exists()>:
c000ad8c:	83 ec 0c             	sub    esp,0xc
c000ad8f:	31 c0                	xor    eax,eax
c000ad91:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad95:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad9c:	80 f9 19             	cmp    cl,0x19
c000ad9f:	77 24                	ja     c000adc5 <File::exists()+0x39>
c000ada1:	8b 0c 8d e0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf20]
c000ada8:	85 c9                	test   ecx,ecx
c000adaa:	74 19                	je     c000adc5 <File::exists()+0x39>
c000adac:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adb2:	85 c9                	test   ecx,ecx
c000adb4:	74 0f                	je     c000adc5 <File::exists()+0x39>
c000adb6:	83 c2 0d             	add    edx,0xd
c000adb9:	50                   	push   eax
c000adba:	50                   	push   eax
c000adbb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adbd:	52                   	push   edx
c000adbe:	51                   	push   ecx
c000adbf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000adc2:	83 c4 10             	add    esp,0x10
c000adc5:	83 c4 0c             	add    esp,0xc
c000adc8:	c3                   	ret    
c000adc9:	90                   	nop

c000adca <File::stat(unsigned long long*, bool*)>:
c000adca:	56                   	push   esi
c000adcb:	53                   	push   ebx
c000adcc:	50                   	push   eax
c000adcd:	b8 0b 00 00 00       	mov    eax,0xb
c000add2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000add6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adda:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ade1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ade5:	80 f9 19             	cmp    cl,0x19
c000ade8:	77 3d                	ja     c000ae27 <File::stat(unsigned long long*, bool*)+0x5d>
c000adea:	8b 0c 8d e0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf20]
c000adf1:	85 c9                	test   ecx,ecx
c000adf3:	74 32                	je     c000ae27 <File::stat(unsigned long long*, bool*)+0x5d>
c000adf5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adfb:	85 c9                	test   ecx,ecx
c000adfd:	74 28                	je     c000ae27 <File::stat(unsigned long long*, bool*)+0x5d>
c000adff:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae01:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae05:	74 13                	je     c000ae1a <File::stat(unsigned long long*, bool*)+0x50>
c000ae07:	83 ec 04             	sub    esp,0x4
c000ae0a:	56                   	push   esi
c000ae0b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ae11:	51                   	push   ecx
c000ae12:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ae15:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ae18:	eb 0a                	jmp    c000ae24 <File::stat(unsigned long long*, bool*)+0x5a>
c000ae1a:	53                   	push   ebx
c000ae1b:	83 c2 0d             	add    edx,0xd
c000ae1e:	56                   	push   esi
c000ae1f:	52                   	push   edx
c000ae20:	51                   	push   ecx
c000ae21:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ae24:	83 c4 10             	add    esp,0x10
c000ae27:	5a                   	pop    edx
c000ae28:	5b                   	pop    ebx
c000ae29:	5e                   	pop    esi
c000ae2a:	c3                   	ret    

c000ae2b <Fs::setcwd(Process*, char*)>:
c000ae2b:	55                   	push   ebp
c000ae2c:	57                   	push   edi
c000ae2d:	56                   	push   esi
c000ae2e:	53                   	push   ebx
c000ae2f:	81 ec 20 02 00 00    	sub    esp,0x220
c000ae35:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ae3c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000ae42:	57                   	push   edi
c000ae43:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000ae4a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ae4e:	56                   	push   esi
c000ae4f:	e8 60 fa ff ff       	call   c000a8b4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000ae54:	89 34 24             	mov    DWORD PTR [esp],esi
c000ae57:	e8 f4 56 ff ff       	call   c0000550 <strlen>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	83 f8 02             	cmp    eax,0x2
c000ae62:	77 15                	ja     c000ae79 <Fs::setcwd(Process*, char*)+0x4e>
c000ae64:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000ae69:	83 eb 41             	sub    ebx,0x41
c000ae6c:	8b 04 9d e0 30 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdcf20]
c000ae73:	85 c0                	test   eax,eax
c000ae75:	75 1c                	jne    c000ae93 <Fs::setcwd(Process*, char*)+0x68>
c000ae77:	eb 2f                	jmp    c000aea8 <Fs::setcwd(Process*, char*)+0x7d>
c000ae79:	83 ec 0c             	sub    esp,0xc
c000ae7c:	56                   	push   esi
c000ae7d:	e8 ce 56 ff ff       	call   c0000550 <strlen>
c000ae82:	83 c4 10             	add    esp,0x10
c000ae85:	83 f8 03             	cmp    eax,0x3
c000ae88:	75 57                	jne    c000aee1 <Fs::setcwd(Process*, char*)+0xb6>
c000ae8a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000ae8f:	75 50                	jne    c000aee1 <Fs::setcwd(Process*, char*)+0xb6>
c000ae91:	eb d1                	jmp    c000ae64 <Fs::setcwd(Process*, char*)+0x39>
c000ae93:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000ae9a:	75 0c                	jne    c000aea8 <Fs::setcwd(Process*, char*)+0x7d>
c000ae9c:	83 ec 0c             	sub    esp,0xc
c000ae9f:	50                   	push   eax
c000aea0:	e8 a9 1c 00 00       	call   c000cb4e <LogicalDisk::mount()>
c000aea5:	83 c4 10             	add    esp,0x10
c000aea8:	b8 03 00 00 00       	mov    eax,0x3
c000aead:	83 fb 19             	cmp    ebx,0x19
c000aeb0:	0f 87 c6 00 00 00    	ja     c000af7c <Fs::setcwd(Process*, char*)+0x151>
c000aeb6:	8b 14 9d e0 30 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdcf20]
c000aebd:	b8 05 00 00 00       	mov    eax,0x5
c000aec2:	85 d2                	test   edx,edx
c000aec4:	0f 84 b2 00 00 00    	je     c000af7c <Fs::setcwd(Process*, char*)+0x151>
c000aeca:	b8 06 00 00 00       	mov    eax,0x6
c000aecf:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000aed6:	0f 85 92 00 00 00    	jne    c000af6e <Fs::setcwd(Process*, char*)+0x143>
c000aedc:	e9 9b 00 00 00       	jmp    c000af7c <Fs::setcwd(Process*, char*)+0x151>
c000aee1:	83 ec 0c             	sub    esp,0xc
c000aee4:	68 14 01 00 00       	push   0x114
c000aee9:	e8 db c8 ff ff       	call   c00077c9 <malloc>
c000aeee:	83 c4 0c             	add    esp,0xc
c000aef1:	89 c3                	mov    ebx,eax
c000aef3:	55                   	push   ebp
c000aef4:	56                   	push   esi
c000aef5:	50                   	push   eax
c000aef6:	e8 63 fb ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c000aefb:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000af00:	83 c4 0c             	add    esp,0xc
c000af03:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000af07:	50                   	push   eax
c000af08:	8d 44 24 10          	lea    eax,[esp+0x10]
c000af0c:	50                   	push   eax
c000af0d:	53                   	push   ebx
c000af0e:	e8 b7 fe ff ff       	call   c000adca <File::stat(unsigned long long*, bool*)>
c000af13:	83 c4 10             	add    esp,0x10
c000af16:	83 f8 02             	cmp    eax,0x2
c000af19:	74 04                	je     c000af1f <Fs::setcwd(Process*, char*)+0xf4>
c000af1b:	85 c0                	test   eax,eax
c000af1d:	74 1c                	je     c000af3b <Fs::setcwd(Process*, char*)+0x110>
c000af1f:	b8 01 00 00 00       	mov    eax,0x1
c000af24:	85 db                	test   ebx,ebx
c000af26:	74 54                	je     c000af7c <Fs::setcwd(Process*, char*)+0x151>
c000af28:	83 ec 0c             	sub    esp,0xc
c000af2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af2d:	53                   	push   ebx
c000af2e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af31:	83 c4 10             	add    esp,0x10
c000af34:	b8 01 00 00 00       	mov    eax,0x1
c000af39:	eb 41                	jmp    c000af7c <Fs::setcwd(Process*, char*)+0x151>
c000af3b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000af40:	75 1c                	jne    c000af5e <Fs::setcwd(Process*, char*)+0x133>
c000af42:	b8 02 00 00 00       	mov    eax,0x2
c000af47:	85 db                	test   ebx,ebx
c000af49:	74 31                	je     c000af7c <Fs::setcwd(Process*, char*)+0x151>
c000af4b:	83 ec 0c             	sub    esp,0xc
c000af4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af50:	53                   	push   ebx
c000af51:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af54:	83 c4 10             	add    esp,0x10
c000af57:	b8 02 00 00 00       	mov    eax,0x2
c000af5c:	eb 1e                	jmp    c000af7c <Fs::setcwd(Process*, char*)+0x151>
c000af5e:	85 db                	test   ebx,ebx
c000af60:	74 0c                	je     c000af6e <Fs::setcwd(Process*, char*)+0x143>
c000af62:	83 ec 0c             	sub    esp,0xc
c000af65:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af67:	53                   	push   ebx
c000af68:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af6b:	83 c4 10             	add    esp,0x10
c000af6e:	50                   	push   eax
c000af6f:	50                   	push   eax
c000af70:	56                   	push   esi
c000af71:	57                   	push   edi
c000af72:	e8 99 56 ff ff       	call   c0000610 <strcpy>
c000af77:	83 c4 10             	add    esp,0x10
c000af7a:	31 c0                	xor    eax,eax
c000af7c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000af82:	5b                   	pop    ebx
c000af83:	5e                   	pop    esi
c000af84:	5f                   	pop    edi
c000af85:	5d                   	pop    ebp
c000af86:	c3                   	ret    
c000af87:	90                   	nop

c000af88 <Directory::Directory(char const*, Process*)>:
c000af88:	83 ec 0c             	sub    esp,0xc
c000af8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af8f:	83 ec 08             	sub    esp,0x8
c000af92:	6a 00                	push   0x0
c000af94:	50                   	push   eax
c000af95:	e8 b8 de ff ff       	call   c0008e52 <UnixFile::UnixFile(int)>
c000af9a:	83 c4 10             	add    esp,0x10
c000af9d:	ba 7c dd 01 c0       	mov    edx,0xc001dd7c
c000afa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa6:	89 10                	mov    DWORD PTR [eax],edx
c000afa8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000afac:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000afb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb6:	83 c0 0d             	add    eax,0xd
c000afb9:	83 ec 04             	sub    esp,0x4
c000afbc:	52                   	push   edx
c000afbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afc1:	50                   	push   eax
c000afc2:	e8 ed f8 ff ff       	call   c000a8b4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afce:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000afd1:	8d 50 bf             	lea    edx,[eax-0x41]
c000afd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd8:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000afde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000afe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afea:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aff0:	25 ff 00 00 00       	and    eax,0xff
c000aff5:	8b 04 85 e0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf20]
c000affc:	85 c0                	test   eax,eax
c000affe:	74 42                	je     c000b042 <Directory::Directory(char const*, Process*)+0xba>
c000b000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b004:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b00a:	25 ff 00 00 00       	and    eax,0xff
c000b00f:	8b 04 85 e0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf20]
c000b016:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b01c:	85 c0                	test   eax,eax
c000b01e:	75 22                	jne    c000b042 <Directory::Directory(char const*, Process*)+0xba>
c000b020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b024:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b02a:	25 ff 00 00 00       	and    eax,0xff
c000b02f:	8b 04 85 e0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf20]
c000b036:	83 ec 0c             	sub    esp,0xc
c000b039:	50                   	push   eax
c000b03a:	e8 0f 1b 00 00       	call   c000cb4e <LogicalDisk::mount()>
c000b03f:	83 c4 10             	add    esp,0x10
c000b042:	90                   	nop
c000b043:	83 c4 0c             	add    esp,0xc
c000b046:	c3                   	ret    
c000b047:	90                   	nop

c000b048 <Directory::open()>:
c000b048:	53                   	push   ebx
c000b049:	b8 0b 00 00 00       	mov    eax,0xb
c000b04e:	83 ec 08             	sub    esp,0x8
c000b051:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b055:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b05c:	80 fa 19             	cmp    dl,0x19
c000b05f:	77 3d                	ja     c000b09e <Directory::open()+0x56>
c000b061:	8b 14 95 e0 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf20]
c000b068:	85 d2                	test   edx,edx
c000b06a:	74 32                	je     c000b09e <Directory::open()+0x56>
c000b06c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b072:	85 d2                	test   edx,edx
c000b074:	74 28                	je     c000b09e <Directory::open()+0x56>
c000b076:	b8 06 00 00 00       	mov    eax,0x6
c000b07b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b07f:	75 1d                	jne    c000b09e <Directory::open()+0x56>
c000b081:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b087:	50                   	push   eax
c000b088:	8b 02                	mov    eax,DWORD PTR [edx]
c000b08a:	51                   	push   ecx
c000b08b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b08e:	51                   	push   ecx
c000b08f:	52                   	push   edx
c000b090:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b093:	83 c4 10             	add    esp,0x10
c000b096:	85 c0                	test   eax,eax
c000b098:	75 04                	jne    c000b09e <Directory::open()+0x56>
c000b09a:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b09e:	83 c4 08             	add    esp,0x8
c000b0a1:	5b                   	pop    ebx
c000b0a2:	c3                   	ret    
c000b0a3:	90                   	nop

c000b0a4 <Directory::close()>:
c000b0a4:	53                   	push   ebx
c000b0a5:	b8 0b 00 00 00       	mov    eax,0xb
c000b0aa:	83 ec 08             	sub    esp,0x8
c000b0ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0b1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0b8:	80 fa 19             	cmp    dl,0x19
c000b0bb:	77 41                	ja     c000b0fe <Directory::close()+0x5a>
c000b0bd:	8b 1c 95 e0 30 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdcf20]
c000b0c4:	85 db                	test   ebx,ebx
c000b0c6:	74 36                	je     c000b0fe <Directory::close()+0x5a>
c000b0c8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b0cf:	74 2d                	je     c000b0fe <Directory::close()+0x5a>
c000b0d1:	b8 05 00 00 00       	mov    eax,0x5
c000b0d6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0da:	74 22                	je     c000b0fe <Directory::close()+0x5a>
c000b0dc:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b0e0:	8b 04 95 e0 30 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcf20]
c000b0e7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0ed:	53                   	push   ebx
c000b0ee:	53                   	push   ebx
c000b0ef:	8b 10                	mov    edx,DWORD PTR [eax]
c000b0f1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b0f7:	50                   	push   eax
c000b0f8:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b0fb:	83 c4 10             	add    esp,0x10
c000b0fe:	83 c4 08             	add    esp,0x8
c000b101:	5b                   	pop    ebx
c000b102:	c3                   	ret    
c000b103:	90                   	nop

c000b104 <Directory::unlink()>:
c000b104:	83 ec 0c             	sub    esp,0xc
c000b107:	b8 0b 00 00 00       	mov    eax,0xb
c000b10c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b110:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b117:	80 f9 19             	cmp    cl,0x19
c000b11a:	77 2f                	ja     c000b14b <Directory::unlink()+0x47>
c000b11c:	8b 0c 8d e0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf20]
c000b123:	85 c9                	test   ecx,ecx
c000b125:	74 24                	je     c000b14b <Directory::unlink()+0x47>
c000b127:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b12d:	85 c9                	test   ecx,ecx
c000b12f:	74 1a                	je     c000b14b <Directory::unlink()+0x47>
c000b131:	b8 06 00 00 00       	mov    eax,0x6
c000b136:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b13a:	75 0f                	jne    c000b14b <Directory::unlink()+0x47>
c000b13c:	83 c2 0d             	add    edx,0xd
c000b13f:	50                   	push   eax
c000b140:	50                   	push   eax
c000b141:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b143:	52                   	push   edx
c000b144:	51                   	push   ecx
c000b145:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b148:	83 c4 10             	add    esp,0x10
c000b14b:	83 c4 0c             	add    esp,0xc
c000b14e:	c3                   	ret    
c000b14f:	90                   	nop

c000b150 <Directory::rename(char const*)>:
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	b8 0b 00 00 00       	mov    eax,0xb
c000b158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b15c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b163:	80 f9 19             	cmp    cl,0x19
c000b166:	77 32                	ja     c000b19a <Directory::rename(char const*)+0x4a>
c000b168:	8b 0c 8d e0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf20]
c000b16f:	85 c9                	test   ecx,ecx
c000b171:	74 27                	je     c000b19a <Directory::rename(char const*)+0x4a>
c000b173:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b179:	85 c9                	test   ecx,ecx
c000b17b:	74 1d                	je     c000b19a <Directory::rename(char const*)+0x4a>
c000b17d:	b8 06 00 00 00       	mov    eax,0x6
c000b182:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b186:	75 12                	jne    c000b19a <Directory::rename(char const*)+0x4a>
c000b188:	83 c2 0d             	add    edx,0xd
c000b18b:	50                   	push   eax
c000b18c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b18e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b192:	52                   	push   edx
c000b193:	51                   	push   ecx
c000b194:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b197:	83 c4 10             	add    esp,0x10
c000b19a:	83 c4 0c             	add    esp,0xc
c000b19d:	c3                   	ret    

c000b19e <Directory::exists()>:
c000b19e:	83 ec 0c             	sub    esp,0xc
c000b1a1:	31 c0                	xor    eax,eax
c000b1a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b1a7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1ae:	80 f9 19             	cmp    cl,0x19
c000b1b1:	77 24                	ja     c000b1d7 <Directory::exists()+0x39>
c000b1b3:	8b 0c 8d e0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf20]
c000b1ba:	85 c9                	test   ecx,ecx
c000b1bc:	74 19                	je     c000b1d7 <Directory::exists()+0x39>
c000b1be:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1c4:	85 c9                	test   ecx,ecx
c000b1c6:	74 0f                	je     c000b1d7 <Directory::exists()+0x39>
c000b1c8:	83 c2 0d             	add    edx,0xd
c000b1cb:	50                   	push   eax
c000b1cc:	50                   	push   eax
c000b1cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1cf:	52                   	push   edx
c000b1d0:	51                   	push   ecx
c000b1d1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b1d4:	83 c4 10             	add    esp,0x10
c000b1d7:	83 c4 0c             	add    esp,0xc
c000b1da:	c3                   	ret    
c000b1db:	90                   	nop

c000b1dc <Directory::read(dirent*)>:
c000b1dc:	83 ec 1c             	sub    esp,0x1c
c000b1df:	b8 0b 00 00 00       	mov    eax,0xb
c000b1e4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1e8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1ef:	80 fa 19             	cmp    dl,0x19
c000b1f2:	77 30                	ja     c000b224 <Directory::read(dirent*)+0x48>
c000b1f4:	8b 14 95 e0 30 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf20]
c000b1fb:	85 d2                	test   edx,edx
c000b1fd:	74 25                	je     c000b224 <Directory::read(dirent*)+0x48>
c000b1ff:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b206:	74 1c                	je     c000b224 <Directory::read(dirent*)+0x48>
c000b208:	83 ec 0c             	sub    esp,0xc
c000b20b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b20d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b211:	52                   	push   edx
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	6a 00                	push   0x0
c000b218:	68 10 01 00 00       	push   0x110
c000b21d:	51                   	push   ecx
c000b21e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b221:	83 c4 20             	add    esp,0x20
c000b224:	83 c4 1c             	add    esp,0x1c
c000b227:	c3                   	ret    

c000b228 <Directory::create()>:
c000b228:	83 ec 0c             	sub    esp,0xc
c000b22b:	b8 0b 00 00 00       	mov    eax,0xb
c000b230:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b234:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b23b:	80 f9 19             	cmp    cl,0x19
c000b23e:	77 2f                	ja     c000b26f <Directory::create()+0x47>
c000b240:	8b 0c 8d e0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf20]
c000b247:	85 c9                	test   ecx,ecx
c000b249:	74 24                	je     c000b26f <Directory::create()+0x47>
c000b24b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b251:	85 c9                	test   ecx,ecx
c000b253:	74 1a                	je     c000b26f <Directory::create()+0x47>
c000b255:	b8 06 00 00 00       	mov    eax,0x6
c000b25a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b25e:	75 0f                	jne    c000b26f <Directory::create()+0x47>
c000b260:	83 c2 0d             	add    edx,0xd
c000b263:	50                   	push   eax
c000b264:	50                   	push   eax
c000b265:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b267:	52                   	push   edx
c000b268:	51                   	push   ecx
c000b269:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b26c:	83 c4 10             	add    esp,0x10
c000b26f:	83 c4 0c             	add    esp,0xc
c000b272:	c3                   	ret    
c000b273:	90                   	nop

c000b274 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b274:	b8 0a 00 00 00       	mov    eax,0xa
c000b279:	c3                   	ret    
c000b27a:	66 90                	xchg   ax,ax

c000b27c <Bus::Bus(char const*)>:
c000b27c:	83 ec 0c             	sub    esp,0xc
c000b27f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b283:	83 ec 08             	sub    esp,0x8
c000b286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b28a:	50                   	push   eax
c000b28b:	e8 30 08 00 00       	call   c000bac0 <Device::Device(char const*)>
c000b290:	83 c4 10             	add    esp,0x10
c000b293:	ba 98 dd 01 c0       	mov    edx,0xc001dd98
c000b298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b29c:	89 10                	mov    DWORD PTR [eax],edx
c000b29e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2a2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b2ac:	90                   	nop
c000b2ad:	83 c4 0c             	add    esp,0xc
c000b2b0:	c3                   	ret    
c000b2b1:	90                   	nop
c000b2b2:	66 90                	xchg   ax,ax

c000b2b4 <Bus::~Bus()>:
c000b2b4:	83 ec 0c             	sub    esp,0xc
c000b2b7:	ba 98 dd 01 c0       	mov    edx,0xc001dd98
c000b2bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2c0:	89 10                	mov    DWORD PTR [eax],edx
c000b2c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2c6:	83 ec 0c             	sub    esp,0xc
c000b2c9:	50                   	push   eax
c000b2ca:	e8 5b 05 00 00       	call   c000b82a <Device::~Device()>
c000b2cf:	83 c4 10             	add    esp,0x10
c000b2d2:	90                   	nop
c000b2d3:	83 c4 0c             	add    esp,0xc
c000b2d6:	c3                   	ret    
c000b2d7:	90                   	nop

c000b2d8 <Bus::~Bus()>:
c000b2d8:	83 ec 0c             	sub    esp,0xc
c000b2db:	83 ec 0c             	sub    esp,0xc
c000b2de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2e2:	e8 cd ff ff ff       	call   c000b2b4 <Bus::~Bus()>
c000b2e7:	83 c4 10             	add    esp,0x10
c000b2ea:	83 ec 08             	sub    esp,0x8
c000b2ed:	68 58 01 00 00       	push   0x158
c000b2f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2f6:	e8 f7 f0 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000b2fb:	83 c4 10             	add    esp,0x10
c000b2fe:	83 c4 0c             	add    esp,0xc
c000b301:	c3                   	ret    

c000b302 <beepThread(void*)>:
c000b302:	83 ec 0c             	sub    esp,0xc
c000b305:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000b30a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b30e:	48                   	dec    eax
c000b30f:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c000b314:	75 01                	jne    c000b317 <beepThread(void*)+0x15>
c000b316:	fb                   	sti    
c000b317:	83 ec 0c             	sub    esp,0xc
c000b31a:	6b c2 0a             	imul   eax,edx,0xa
c000b31d:	50                   	push   eax
c000b31e:	e8 99 87 00 00       	call   c0013abc <milliTenthSleep(unsigned int)>
c000b323:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b32a:	e8 3f a5 00 00       	call   c001586e <HalMakeBeep(int)>
c000b32f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b337:	83 c4 1c             	add    esp,0x1c
c000b33a:	e9 79 86 00 00       	jmp    c00139b8 <blockTask(TaskState)>

c000b33f <Krnl::beep(int, int, bool)>:
c000b33f:	56                   	push   esi
c000b340:	53                   	push   ebx
c000b341:	83 ec 10             	sub    esp,0x10
c000b344:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b348:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b34c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b350:	e8 19 a5 00 00       	call   c001586e <HalMakeBeep(int)>
c000b355:	83 c4 10             	add    esp,0x10
c000b358:	89 f0                	mov    eax,esi
c000b35a:	84 c0                	test   al,al
c000b35c:	74 1e                	je     c000b37c <Krnl::beep(int, int, bool)+0x3d>
c000b35e:	83 ec 0c             	sub    esp,0xc
c000b361:	6b db 0a             	imul   ebx,ebx,0xa
c000b364:	53                   	push   ebx
c000b365:	e8 52 87 00 00       	call   c0013abc <milliTenthSleep(unsigned int)>
c000b36a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b372:	83 c4 14             	add    esp,0x14
c000b375:	5b                   	pop    ebx
c000b376:	5e                   	pop    esi
c000b377:	e9 f2 a4 00 00       	jmp    c001586e <HalMakeBeep(int)>
c000b37c:	68 e6 00 00 00       	push   0xe6
c000b381:	53                   	push   ebx
c000b382:	68 02 b3 00 c0       	push   0xc000b302
c000b387:	ff 35 50 3e 02 c0    	push   DWORD PTR ds:0xc0023e50
c000b38d:	e8 0a 82 00 00       	call   c001359c <Process::createThread(void (*)(void*), void*, int)>
c000b392:	83 c4 14             	add    esp,0x14
c000b395:	5b                   	pop    ebx
c000b396:	5e                   	pop    esi
c000b397:	c3                   	ret    

c000b398 <User::loadClockSettings(int)>:
c000b398:	53                   	push   ebx
c000b399:	83 ec 14             	sub    esp,0x14
c000b39c:	68 14 01 00 00       	push   0x114
c000b3a1:	e8 23 c4 ff ff       	call   c00077c9 <malloc>
c000b3a6:	83 c4 0c             	add    esp,0xc
c000b3a9:	89 c3                	mov    ebx,eax
c000b3ab:	ff 35 50 3e 02 c0    	push   DWORD PTR ds:0xc0023e50
c000b3b1:	68 bc dd 01 c0       	push   0xc001ddbc
c000b3b6:	50                   	push   eax
c000b3b7:	e8 a2 f6 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c000b3bc:	58                   	pop    eax
c000b3bd:	5a                   	pop    edx
c000b3be:	6a 01                	push   0x1
c000b3c0:	53                   	push   ebx
c000b3c1:	e8 58 f7 ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c000b3c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3c9:	e8 ae f7 ff ff       	call   c000ab7c <File::close()>
c000b3ce:	83 c4 10             	add    esp,0x10
c000b3d1:	85 db                	test   ebx,ebx
c000b3d3:	74 0f                	je     c000b3e4 <User::loadClockSettings(int)+0x4c>
c000b3d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3d7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b3de:	83 c4 08             	add    esp,0x8
c000b3e1:	5b                   	pop    ebx
c000b3e2:	ff e0                	jmp    eax
c000b3e4:	83 c4 08             	add    esp,0x8
c000b3e7:	5b                   	pop    ebx
c000b3e8:	c3                   	ret    
c000b3e9:	90                   	nop

c000b3ea <Clock::Clock(char const*)>:
c000b3ea:	83 ec 0c             	sub    esp,0xc
c000b3ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f1:	83 ec 08             	sub    esp,0x8
c000b3f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f8:	50                   	push   eax
c000b3f9:	e8 c2 06 00 00       	call   c000bac0 <Device::Device(char const*)>
c000b3fe:	83 c4 10             	add    esp,0x10
c000b401:	ba e4 dd 01 c0       	mov    edx,0xc001dde4
c000b406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40a:	89 10                	mov    DWORD PTR [eax],edx
c000b40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b410:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b41a:	90                   	nop
c000b41b:	83 c4 0c             	add    esp,0xc
c000b41e:	c3                   	ret    
c000b41f:	90                   	nop

c000b420 <Clock::~Clock()>:
c000b420:	83 ec 0c             	sub    esp,0xc
c000b423:	ba e4 dd 01 c0       	mov    edx,0xc001dde4
c000b428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42c:	89 10                	mov    DWORD PTR [eax],edx
c000b42e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b432:	83 ec 0c             	sub    esp,0xc
c000b435:	50                   	push   eax
c000b436:	e8 ef 03 00 00       	call   c000b82a <Device::~Device()>
c000b43b:	83 c4 10             	add    esp,0x10
c000b43e:	90                   	nop
c000b43f:	83 c4 0c             	add    esp,0xc
c000b442:	c3                   	ret    
c000b443:	90                   	nop

c000b444 <Clock::~Clock()>:
c000b444:	83 ec 0c             	sub    esp,0xc
c000b447:	83 ec 0c             	sub    esp,0xc
c000b44a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b44e:	e8 cd ff ff ff       	call   c000b420 <Clock::~Clock()>
c000b453:	83 c4 10             	add    esp,0x10
c000b456:	83 ec 08             	sub    esp,0x8
c000b459:	68 58 01 00 00       	push   0x158
c000b45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b462:	e8 8b ef ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000b467:	83 c4 10             	add    esp,0x10
c000b46a:	83 c4 0c             	add    esp,0xc
c000b46d:	c3                   	ret    

c000b46e <Clock::timeInSecondsLocal()>:
c000b46e:	53                   	push   ebx
c000b46f:	83 ec 14             	sub    esp,0x14
c000b472:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b476:	8b 10                	mov    edx,DWORD PTR [eax]
c000b478:	50                   	push   eax
c000b479:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b47c:	0f b6 0d 78 0c 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020c78
c000b483:	03 0d 7c 0c 02 c0    	add    ecx,DWORD PTR ds:0xc0020c7c
c000b489:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b48f:	89 cb                	mov    ebx,ecx
c000b491:	c1 fb 1f             	sar    ebx,0x1f
c000b494:	01 c8                	add    eax,ecx
c000b496:	11 da                	adc    edx,ebx
c000b498:	83 c4 10             	add    esp,0x10
c000b49b:	31 c9                	xor    ecx,ecx
c000b49d:	80 3d 79 0c 02 c0 00 	cmp    BYTE PTR ds:0xc0020c79,0x0
c000b4a4:	74 05                	je     c000b4ab <Clock::timeInSecondsLocal()+0x3d>
c000b4a6:	b9 08 07 00 00       	mov    ecx,0x708
c000b4ab:	31 db                	xor    ebx,ebx
c000b4ad:	01 c8                	add    eax,ecx
c000b4af:	11 da                	adc    edx,ebx
c000b4b1:	83 c4 08             	add    esp,0x8
c000b4b4:	5b                   	pop    ebx
c000b4b5:	c3                   	ret    

c000b4b6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b4b6:	57                   	push   edi
c000b4b7:	56                   	push   esi
c000b4b8:	53                   	push   ebx
c000b4b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b4bd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4c1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b4c7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b4ca:	0f b6 05 78 0c 02 c0 	movzx  eax,BYTE PTR ds:0xc0020c78
c000b4d1:	03 05 7c 0c 02 c0    	add    eax,DWORD PTR ds:0xc0020c7c
c000b4d7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b4dd:	99                   	cdq    
c000b4de:	29 c6                	sub    esi,eax
c000b4e0:	19 d7                	sbb    edi,edx
c000b4e2:	89 f0                	mov    eax,esi
c000b4e4:	89 fa                	mov    edx,edi
c000b4e6:	31 f6                	xor    esi,esi
c000b4e8:	80 3d 79 0c 02 c0 00 	cmp    BYTE PTR ds:0xc0020c79,0x0
c000b4ef:	74 05                	je     c000b4f6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b4f1:	be 08 07 00 00       	mov    esi,0x708
c000b4f6:	31 ff                	xor    edi,edi
c000b4f8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b4fc:	29 f0                	sub    eax,esi
c000b4fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b502:	19 fa                	sbb    edx,edi
c000b504:	89 d8                	mov    eax,ebx
c000b506:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b50a:	5b                   	pop    ebx
c000b50b:	5e                   	pop    esi
c000b50c:	5f                   	pop    edi
c000b50d:	ff e0                	jmp    eax

c000b50f <datetimeToSeconds(datetime_t)>:
c000b50f:	55                   	push   ebp
c000b510:	57                   	push   edi
c000b511:	56                   	push   esi
c000b512:	53                   	push   ebx
c000b513:	83 ec 14             	sub    esp,0x14
c000b516:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b51a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b51e:	89 d3                	mov    ebx,edx
c000b520:	0f b6 c6             	movzx  eax,dh
c000b523:	c1 eb 10             	shr    ebx,0x10
c000b526:	48                   	dec    eax
c000b527:	66 81 eb 6c 07       	sub    bx,0x76c
c000b52c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b530:	0f b6 f5             	movzx  esi,ch
c000b533:	89 cf                	mov    edi,ecx
c000b535:	6b f6 3c             	imul   esi,esi,0x3c
c000b538:	c1 ef 10             	shr    edi,0x10
c000b53b:	0f b6 c9             	movzx  ecx,cl
c000b53e:	89 f8                	mov    eax,edi
c000b540:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b546:	0f b6 f8             	movzx  edi,al
c000b549:	0f b6 d2             	movzx  edx,dl
c000b54c:	01 fe                	add    esi,edi
c000b54e:	01 f1                	add    ecx,esi
c000b550:	0f b7 f3             	movzx  esi,bx
c000b553:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b557:	c1 f9 1f             	sar    ecx,0x1f
c000b55a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b55f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b563:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b568:	8b 0c 8d 20 de 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe21e0]
c000b56f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b573:	76 29                	jbe    c000b59e <datetimeToSeconds(datetime_t)+0x8f>
c000b575:	f6 c3 03             	test   bl,0x3
c000b578:	75 24                	jne    c000b59e <datetimeToSeconds(datetime_t)+0x8f>
c000b57a:	31 d2                	xor    edx,edx
c000b57c:	bf 64 00 00 00       	mov    edi,0x64
c000b581:	89 d8                	mov    eax,ebx
c000b583:	66 f7 f7             	div    di
c000b586:	66 85 d2             	test   dx,dx
c000b589:	75 12                	jne    c000b59d <datetimeToSeconds(datetime_t)+0x8e>
c000b58b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b591:	bf 90 01 00 00       	mov    edi,0x190
c000b596:	99                   	cdq    
c000b597:	f7 ff                	idiv   edi
c000b599:	85 d2                	test   edx,edx
c000b59b:	75 01                	jne    c000b59e <datetimeToSeconds(datetime_t)+0x8f>
c000b59d:	41                   	inc    ecx
c000b59e:	66 83 fb 46          	cmp    bx,0x46
c000b5a2:	76 45                	jbe    c000b5e9 <datetimeToSeconds(datetime_t)+0xda>
c000b5a4:	bb 46 00 00 00       	mov    ebx,0x46
c000b5a9:	bf 64 00 00 00       	mov    edi,0x64
c000b5ae:	bd 90 01 00 00       	mov    ebp,0x190
c000b5b3:	b8 6d 01 00 00       	mov    eax,0x16d
c000b5b8:	f6 c3 03             	test   bl,0x3
c000b5bb:	75 23                	jne    c000b5e0 <datetimeToSeconds(datetime_t)+0xd1>
c000b5bd:	89 d8                	mov    eax,ebx
c000b5bf:	99                   	cdq    
c000b5c0:	f7 ff                	idiv   edi
c000b5c2:	b8 6e 01 00 00       	mov    eax,0x16e
c000b5c7:	85 d2                	test   edx,edx
c000b5c9:	75 15                	jne    c000b5e0 <datetimeToSeconds(datetime_t)+0xd1>
c000b5cb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b5d1:	99                   	cdq    
c000b5d2:	f7 fd                	idiv   ebp
c000b5d4:	31 c0                	xor    eax,eax
c000b5d6:	85 d2                	test   edx,edx
c000b5d8:	0f 94 c0             	sete   al
c000b5db:	05 6d 01 00 00       	add    eax,0x16d
c000b5e0:	01 c1                	add    ecx,eax
c000b5e2:	43                   	inc    ebx
c000b5e3:	39 f3                	cmp    ebx,esi
c000b5e5:	7c cc                	jl     c000b5b3 <datetimeToSeconds(datetime_t)+0xa4>
c000b5e7:	eb 3b                	jmp    c000b624 <datetimeToSeconds(datetime_t)+0x115>
c000b5e9:	74 39                	je     c000b624 <datetimeToSeconds(datetime_t)+0x115>
c000b5eb:	b8 45 00 00 00       	mov    eax,0x45
c000b5f0:	89 c2                	mov    edx,eax
c000b5f2:	83 e2 03             	and    edx,0x3
c000b5f5:	39 f0                	cmp    eax,esi
c000b5f7:	7e 13                	jle    c000b60c <datetimeToSeconds(datetime_t)+0xfd>
c000b5f9:	85 d2                	test   edx,edx
c000b5fb:	0f 94 c2             	sete   dl
c000b5fe:	48                   	dec    eax
c000b5ff:	0f b6 d2             	movzx  edx,dl
c000b602:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b608:	29 d1                	sub    ecx,edx
c000b60a:	eb e4                	jmp    c000b5f0 <datetimeToSeconds(datetime_t)+0xe1>
c000b60c:	b8 6d 01 00 00       	mov    eax,0x16d
c000b611:	85 d2                	test   edx,edx
c000b613:	75 0d                	jne    c000b622 <datetimeToSeconds(datetime_t)+0x113>
c000b615:	31 c0                	xor    eax,eax
c000b617:	66 85 db             	test   bx,bx
c000b61a:	0f 95 c0             	setne  al
c000b61d:	05 6d 01 00 00       	add    eax,0x16d
c000b622:	29 c1                	sub    ecx,eax
c000b624:	b8 80 51 01 00       	mov    eax,0x15180
c000b629:	f7 e9                	imul   ecx
c000b62b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b62f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b633:	83 c4 14             	add    esp,0x14
c000b636:	5b                   	pop    ebx
c000b637:	5e                   	pop    esi
c000b638:	5f                   	pop    edi
c000b639:	5d                   	pop    ebp
c000b63a:	c3                   	ret    
c000b63b:	90                   	nop

c000b63c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b63c:	57                   	push   edi
c000b63d:	56                   	push   esi
c000b63e:	53                   	push   ebx
c000b63f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b643:	8b 06                	mov    eax,DWORD PTR [esi]
c000b645:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b648:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b64c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b650:	e8 ba fe ff ff       	call   c000b50f <datetimeToSeconds(datetime_t)>
c000b655:	59                   	pop    ecx
c000b656:	0f b6 0d 78 0c 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020c78
c000b65d:	5b                   	pop    ebx
c000b65e:	03 0d 7c 0c 02 c0    	add    ecx,DWORD PTR ds:0xc0020c7c
c000b664:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b66a:	89 cb                	mov    ebx,ecx
c000b66c:	c1 fb 1f             	sar    ebx,0x1f
c000b66f:	29 c8                	sub    eax,ecx
c000b671:	19 da                	sbb    edx,ebx
c000b673:	31 c9                	xor    ecx,ecx
c000b675:	80 3d 79 0c 02 c0 00 	cmp    BYTE PTR ds:0xc0020c79,0x0
c000b67c:	74 05                	je     c000b683 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b67e:	b9 08 07 00 00       	mov    ecx,0x708
c000b683:	31 db                	xor    ebx,ebx
c000b685:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b689:	29 c8                	sub    eax,ecx
c000b68b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b68f:	19 da                	sbb    edx,ebx
c000b691:	89 f8                	mov    eax,edi
c000b693:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b697:	5b                   	pop    ebx
c000b698:	5e                   	pop    esi
c000b699:	5f                   	pop    edi
c000b69a:	ff e0                	jmp    eax

c000b69c <secondsToDatetime(unsigned long long)>:
c000b69c:	55                   	push   ebp
c000b69d:	57                   	push   edi
c000b69e:	56                   	push   esi
c000b69f:	53                   	push   ebx
c000b6a0:	83 ec 1c             	sub    esp,0x1c
c000b6a3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b6a7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b6ab:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b6af:	6a 00                	push   0x0
c000b6b1:	68 80 51 01 00       	push   0x15180
c000b6b6:	55                   	push   ebp
c000b6b7:	57                   	push   edi
c000b6b8:	e8 03 0a 01 00       	call   c001c0c0 <__udivdi3>
c000b6bd:	83 c4 10             	add    esp,0x10
c000b6c0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b6c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6ca:	6a 00                	push   0x0
c000b6cc:	68 80 51 01 00       	push   0x15180
c000b6d1:	55                   	push   ebp
c000b6d2:	57                   	push   edi
c000b6d3:	bf 10 0e 00 00       	mov    edi,0xe10
c000b6d8:	e8 e3 0a 01 00       	call   c001c1c0 <__umoddi3>
c000b6dd:	83 c4 10             	add    esp,0x10
c000b6e0:	99                   	cdq    
c000b6e1:	f7 ff                	idiv   edi
c000b6e3:	bf 3c 00 00 00       	mov    edi,0x3c
c000b6e8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b6eb:	89 d0                	mov    eax,edx
c000b6ed:	99                   	cdq    
c000b6ee:	f7 ff                	idiv   edi
c000b6f0:	85 db                	test   ebx,ebx
c000b6f2:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b6f5:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b6f8:	79 11                	jns    c000b70b <secondsToDatetime(unsigned long long)+0x6f>
c000b6fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b6fe:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b704:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b709:	eb 07                	jmp    c000b712 <secondsToDatetime(unsigned long long)+0x76>
c000b70b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b710:	89 d8                	mov    eax,ebx
c000b712:	bf b4 05 00 00       	mov    edi,0x5b4
c000b717:	99                   	cdq    
c000b718:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b71d:	f7 f9                	idiv   ecx
c000b71f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b724:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b728:	31 d2                	xor    edx,edx
c000b72a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b732:	01 c3                	add    ebx,eax
c000b734:	89 d8                	mov    eax,ebx
c000b736:	f7 f1                	div    ecx
c000b738:	31 d2                	xor    edx,edx
c000b73a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b73d:	89 d8                	mov    eax,ebx
c000b73f:	f7 f7                	div    edi
c000b741:	31 d2                	xor    edx,edx
c000b743:	29 c1                	sub    ecx,eax
c000b745:	89 d8                	mov    eax,ebx
c000b747:	f7 f5                	div    ebp
c000b749:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b74e:	29 c1                	sub    ecx,eax
c000b750:	31 d2                	xor    edx,edx
c000b752:	89 c8                	mov    eax,ecx
c000b754:	f7 f5                	div    ebp
c000b756:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b75b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b75f:	31 d2                	xor    edx,edx
c000b761:	89 c8                	mov    eax,ecx
c000b763:	f7 f5                	div    ebp
c000b765:	31 d2                	xor    edx,edx
c000b767:	01 c3                	add    ebx,eax
c000b769:	89 c8                	mov    eax,ecx
c000b76b:	f7 f7                	div    edi
c000b76d:	bf 99 00 00 00       	mov    edi,0x99
c000b772:	29 c3                	sub    ebx,eax
c000b774:	31 d2                	xor    edx,edx
c000b776:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b77e:	29 c3                	sub    ebx,eax
c000b780:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b783:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b786:	bb 05 00 00 00       	mov    ebx,0x5
c000b78b:	83 c1 02             	add    ecx,0x2
c000b78e:	89 c8                	mov    eax,ecx
c000b790:	f7 f7                	div    edi
c000b792:	31 d2                	xor    edx,edx
c000b794:	89 c7                	mov    edi,eax
c000b796:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b79c:	83 c0 02             	add    eax,0x2
c000b79f:	f7 f3                	div    ebx
c000b7a1:	89 eb                	mov    ebx,ebp
c000b7a3:	29 c3                	sub    ebx,eax
c000b7a5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b7ab:	88 1e                	mov    BYTE PTR [esi],bl
c000b7ad:	19 c0                	sbb    eax,eax
c000b7af:	31 d2                	xor    edx,edx
c000b7b1:	83 e0 0c             	and    eax,0xc
c000b7b4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b7b8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b7c0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b7c4:	83 f9 01             	cmp    ecx,0x1
c000b7c7:	0f 96 c2             	setbe  dl
c000b7ca:	41                   	inc    ecx
c000b7cb:	01 d0                	add    eax,edx
c000b7cd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b7d0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b7d4:	83 c4 1c             	add    esp,0x1c
c000b7d7:	89 f0                	mov    eax,esi
c000b7d9:	5b                   	pop    ebx
c000b7da:	5e                   	pop    esi
c000b7db:	5f                   	pop    edi
c000b7dc:	5d                   	pop    ebp
c000b7dd:	c2 04 00             	ret    0x4

c000b7e0 <Clock::timeInDatetimeLocal()>:
c000b7e0:	53                   	push   ebx
c000b7e1:	83 ec 14             	sub    esp,0x14
c000b7e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b7e8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7ec:	e8 7d fc ff ff       	call   c000b46e <Clock::timeInSecondsLocal()>
c000b7f1:	83 c4 0c             	add    esp,0xc
c000b7f4:	52                   	push   edx
c000b7f5:	50                   	push   eax
c000b7f6:	53                   	push   ebx
c000b7f7:	e8 a0 fe ff ff       	call   c000b69c <secondsToDatetime(unsigned long long)>
c000b7fc:	89 d8                	mov    eax,ebx
c000b7fe:	83 c4 14             	add    esp,0x14
c000b801:	5b                   	pop    ebx
c000b802:	c2 04 00             	ret    0x4
c000b805:	90                   	nop

c000b806 <Device::hibernate()>:
c000b806:	c3                   	ret    
c000b807:	90                   	nop

c000b808 <Device::wake()>:
c000b808:	c3                   	ret    
c000b809:	90                   	nop

c000b80a <Device::detect()>:
c000b80a:	c3                   	ret    
c000b80b:	90                   	nop

c000b80c <Device::disableLegacy()>:
c000b80c:	c3                   	ret    
c000b80d:	90                   	nop

c000b80e <Device::powerSaving(PowerSavingLevel)>:
c000b80e:	c3                   	ret    
c000b80f:	90                   	nop

c000b810 <DriverlessDevice::close(int, int, void*)>:
c000b810:	31 c0                	xor    eax,eax
c000b812:	c3                   	ret    
c000b813:	90                   	nop

c000b814 <DriverlessDevice::detect()>:
c000b814:	c3                   	ret    
c000b815:	90                   	nop

c000b816 <DriverlessDevice::open(int, int, void*)>:
c000b816:	83 ec 18             	sub    esp,0x18
c000b819:	68 50 de 01 c0       	push   0xc001de50
c000b81e:	e8 48 49 00 00       	call   c001016b <KePanic(char const*)>
c000b823:	83 c8 ff             	or     eax,0xffffffff
c000b826:	83 c4 1c             	add    esp,0x1c
c000b829:	c3                   	ret    

c000b82a <Device::~Device()>:
c000b82a:	ba b0 de 01 c0       	mov    edx,0xc001deb0
c000b82f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b833:	89 10                	mov    DWORD PTR [eax],edx
c000b835:	90                   	nop
c000b836:	c3                   	ret    
c000b837:	90                   	nop

c000b838 <Device::~Device()>:
c000b838:	83 ec 0c             	sub    esp,0xc
c000b83b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b83f:	e8 e6 ff ff ff       	call   c000b82a <Device::~Device()>
c000b844:	83 c4 04             	add    esp,0x4
c000b847:	83 ec 08             	sub    esp,0x8
c000b84a:	68 58 01 00 00       	push   0x158
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	e8 9a eb ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	83 c4 0c             	add    esp,0xc
c000b85e:	c3                   	ret    
c000b85f:	90                   	nop

c000b860 <Device::findAndLoadDriver()>:
c000b860:	c7 44 24 04 6e de 01 c0 	mov    DWORD PTR [esp+0x4],0xc001de6e
c000b868:	e9 7b ec ff ff       	jmp    c000a4e8 <Dbg::kprintf(char const*, ...)>
c000b86d:	90                   	nop

c000b86e <Device::preOpenPCI(PCIDeviceInfo)>:
c000b86e:	57                   	push   edi
c000b86f:	b9 09 00 00 00       	mov    ecx,0x9
c000b874:	56                   	push   esi
c000b875:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b879:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b87d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b887:	81 c7 18 01 00 00    	add    edi,0x118
c000b88d:	fc                   	cld    
c000b88e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b890:	5e                   	pop    esi
c000b891:	5f                   	pop    edi
c000b892:	c3                   	ret    
c000b893:	90                   	nop

c000b894 <Device::preOpenACPI(void*, char*, char*)>:
c000b894:	57                   	push   edi
c000b895:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b89a:	56                   	push   esi
c000b89b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b89f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8a3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b8ad:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b8b3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b8b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b8bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8bf:	b9 0e 00 00 00       	mov    ecx,0xe
c000b8c4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b8ca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b8ce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8d0:	5e                   	pop    esi
c000b8d1:	5f                   	pop    edi
c000b8d2:	c3                   	ret    
c000b8d3:	90                   	nop

c000b8d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b8d4:	53                   	push   ebx
c000b8d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b8dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8e1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8e5:	0f b6 c0             	movzx  eax,al
c000b8e8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b8ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b8f4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b8f8:	5b                   	pop    ebx
c000b8f9:	e9 a6 05 00 00       	jmp    c000bea4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b8fe <Device::getParent()>:
c000b8fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b902:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b908:	c3                   	ret    
c000b909:	90                   	nop

c000b90a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b90a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b90e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b912:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b917:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b91b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b91f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b923:	e9 e8 06 00 00       	jmp    c000c010 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b928 <Device::addChild(Device*)>:
c000b928:	53                   	push   ebx
c000b929:	83 ec 08             	sub    esp,0x8
c000b92c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b930:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b934:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b93a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b940:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b942:	85 d2                	test   edx,edx
c000b944:	74 04                	je     c000b94a <Device::addChild(Device*)+0x22>
c000b946:	89 d3                	mov    ebx,edx
c000b948:	eb f6                	jmp    c000b940 <Device::addChild(Device*)+0x18>
c000b94a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b94d:	83 ec 0c             	sub    esp,0xc
c000b950:	6a 08                	push   0x8
c000b952:	e8 72 be ff ff       	call   c00077c9 <malloc>
c000b957:	89 03                	mov    DWORD PTR [ebx],eax
c000b959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b95f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b966:	83 c4 18             	add    esp,0x18
c000b969:	5b                   	pop    ebx
c000b96a:	c3                   	ret    
c000b96b:	90                   	nop

c000b96c <Device::removeAllChildren()>:
c000b96c:	56                   	push   esi
c000b96d:	53                   	push   ebx
c000b96e:	52                   	push   edx
c000b96f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b973:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b979:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b97c:	74 17                	je     c000b995 <Device::removeAllChildren()+0x29>
c000b97e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b981:	85 c0                	test   eax,eax
c000b983:	74 0c                	je     c000b991 <Device::removeAllChildren()+0x25>
c000b985:	83 ec 0c             	sub    esp,0xc
c000b988:	8b 10                	mov    edx,DWORD PTR [eax]
c000b98a:	50                   	push   eax
c000b98b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b98e:	83 c4 10             	add    esp,0x10
c000b991:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b993:	eb e4                	jmp    c000b979 <Device::removeAllChildren()+0xd>
c000b995:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b99b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b9a1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b9a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9ae:	58                   	pop    eax
c000b9af:	5b                   	pop    ebx
c000b9b0:	5e                   	pop    esi
c000b9b1:	c3                   	ret    

c000b9b2 <Device::hibernateAll()>:
c000b9b2:	53                   	push   ebx
c000b9b3:	83 ec 14             	sub    esp,0x14
c000b9b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9bc:	53                   	push   ebx
c000b9bd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b9c0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9c6:	83 c4 10             	add    esp,0x10
c000b9c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9cc:	74 0f                	je     c000b9dd <Device::hibernateAll()+0x2b>
c000b9ce:	83 ec 0c             	sub    esp,0xc
c000b9d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9d4:	e8 d9 ff ff ff       	call   c000b9b2 <Device::hibernateAll()>
c000b9d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9db:	eb e9                	jmp    c000b9c6 <Device::hibernateAll()+0x14>
c000b9dd:	83 c4 08             	add    esp,0x8
c000b9e0:	5b                   	pop    ebx
c000b9e1:	c3                   	ret    

c000b9e2 <Device::wakeAll()>:
c000b9e2:	53                   	push   ebx
c000b9e3:	83 ec 14             	sub    esp,0x14
c000b9e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9ec:	53                   	push   ebx
c000b9ed:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000b9f0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9f6:	83 c4 10             	add    esp,0x10
c000b9f9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9fc:	74 0f                	je     c000ba0d <Device::wakeAll()+0x2b>
c000b9fe:	83 ec 0c             	sub    esp,0xc
c000ba01:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba04:	e8 d9 ff ff ff       	call   c000b9e2 <Device::wakeAll()>
c000ba09:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba0b:	eb e9                	jmp    c000b9f6 <Device::wakeAll()+0x14>
c000ba0d:	83 c4 08             	add    esp,0x8
c000ba10:	5b                   	pop    ebx
c000ba11:	c3                   	ret    

c000ba12 <Device::detectAll()>:
c000ba12:	53                   	push   ebx
c000ba13:	83 ec 14             	sub    esp,0x14
c000ba16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba1c:	53                   	push   ebx
c000ba1d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ba20:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba2c:	74 0f                	je     c000ba3d <Device::detectAll()+0x2b>
c000ba2e:	83 ec 0c             	sub    esp,0xc
c000ba31:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba34:	e8 d9 ff ff ff       	call   c000ba12 <Device::detectAll()>
c000ba39:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba3b:	eb e9                	jmp    c000ba26 <Device::detectAll()+0x14>
c000ba3d:	83 c4 08             	add    esp,0x8
c000ba40:	5b                   	pop    ebx
c000ba41:	c3                   	ret    

c000ba42 <Device::disableLegacyAll()>:
c000ba42:	c3                   	ret    
c000ba43:	90                   	nop

c000ba44 <Device::loadDriversForAll()>:
c000ba44:	c3                   	ret    
c000ba45:	90                   	nop

c000ba46 <Device::closeAll()>:
c000ba46:	53                   	push   ebx
c000ba47:	83 ec 08             	sub    esp,0x8
c000ba4a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba50:	6a 00                	push   0x0
c000ba52:	6a 00                	push   0x0
c000ba54:	6a 00                	push   0x0
c000ba56:	53                   	push   ebx
c000ba57:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba5a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba60:	83 c4 10             	add    esp,0x10
c000ba63:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba66:	74 0f                	je     c000ba77 <Device::closeAll()+0x31>
c000ba68:	83 ec 0c             	sub    esp,0xc
c000ba6b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba6e:	e8 d3 ff ff ff       	call   c000ba46 <Device::closeAll()>
c000ba73:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba75:	eb e9                	jmp    c000ba60 <Device::closeAll()+0x1a>
c000ba77:	83 c4 08             	add    esp,0x8
c000ba7a:	5b                   	pop    ebx
c000ba7b:	c3                   	ret    

c000ba7c <Device::powerSavingAll(PowerSavingLevel)>:
c000ba7c:	56                   	push   esi
c000ba7d:	53                   	push   ebx
c000ba7e:	83 ec 0c             	sub    esp,0xc
c000ba81:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ba89:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba8b:	56                   	push   esi
c000ba8c:	53                   	push   ebx
c000ba8d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ba90:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba96:	83 c4 10             	add    esp,0x10
c000ba99:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba9c:	74 0f                	je     c000baad <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ba9e:	52                   	push   edx
c000ba9f:	52                   	push   edx
c000baa0:	56                   	push   esi
c000baa1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000baa4:	e8 d3 ff ff ff       	call   c000ba7c <Device::powerSavingAll(PowerSavingLevel)>
c000baa9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baab:	eb e9                	jmp    c000ba96 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000baad:	58                   	pop    eax
c000baae:	5b                   	pop    ebx
c000baaf:	5e                   	pop    esi
c000bab0:	c3                   	ret    
c000bab1:	90                   	nop

c000bab2 <Device::setName(char const*)>:
c000bab2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000baba:	e9 51 4b ff ff       	jmp    c0000610 <strcpy>
c000babf:	90                   	nop

c000bac0 <Device::Device(char const*)>:
c000bac0:	83 ec 1c             	sub    esp,0x1c
c000bac3:	ba b0 de 01 c0       	mov    edx,0xc001deb0
c000bac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bacc:	89 10                	mov    DWORD PTR [eax],edx
c000bace:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000badc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000baea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baee:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000baf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bafc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb06:	83 ec 08             	sub    esp,0x8
c000bb09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb11:	e8 9c ff ff ff       	call   c000bab2 <Device::setName(char const*)>
c000bb16:	83 c4 10             	add    esp,0x10
c000bb19:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bb21:	83 ec 0c             	sub    esp,0xc
c000bb24:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb28:	e8 9c bc ff ff       	call   c00077c9 <malloc>
c000bb2d:	83 c4 10             	add    esp,0x10
c000bb30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb3d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb41:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bb47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb4b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb51:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb5b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb61:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb6c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bb73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb77:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bb7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb82:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb90:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb9e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbac:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bbb6:	90                   	nop
c000bbb7:	83 c4 1c             	add    esp,0x1c
c000bbba:	c3                   	ret    
c000bbbb:	90                   	nop

c000bbbc <Device::getName()>:
c000bbbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbc0:	05 d0 00 00 00       	add    eax,0xd0
c000bbc5:	c3                   	ret    

c000bbc6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bbc6:	83 ec 0c             	sub    esp,0xc
c000bbc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbcd:	83 ec 08             	sub    esp,0x8
c000bbd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbd4:	50                   	push   eax
c000bbd5:	e8 e6 fe ff ff       	call   c000bac0 <Device::Device(char const*)>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	ba dc de 01 c0       	mov    edx,0xc001dedc
c000bbe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbe6:	89 10                	mov    DWORD PTR [eax],edx
c000bbe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbec:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bbf6:	90                   	nop
c000bbf7:	83 c4 0c             	add    esp,0xc
c000bbfa:	c3                   	ret    
c000bbfb:	90                   	nop

c000bbfc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bbfc:	57                   	push   edi
c000bbfd:	56                   	push   esi
c000bbfe:	53                   	push   ebx
c000bbff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc03:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bc07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc0b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bc11:	75 0c                	jne    c000bc1f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bc13:	52                   	push   edx
c000bc14:	52                   	push   edx
c000bc15:	53                   	push   ebx
c000bc16:	56                   	push   esi
c000bc17:	e8 56 09 01 00       	call   c001c572 <LinkedList<Device>::addElement(Device*)>
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc25:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc28:	74 12                	je     c000bc3c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bc2a:	50                   	push   eax
c000bc2b:	57                   	push   edi
c000bc2c:	56                   	push   esi
c000bc2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc30:	e8 c7 ff ff ff       	call   c000bbfc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc35:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc37:	83 c4 10             	add    esp,0x10
c000bc3a:	eb e9                	jmp    c000bc25 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bc3c:	5b                   	pop    ebx
c000bc3d:	5e                   	pop    esi
c000bc3e:	5f                   	pop    edi
c000bc3f:	c3                   	ret    

c000bc40 <getDevicesOfType(DeviceType)>:
c000bc40:	53                   	push   ebx
c000bc41:	83 ec 14             	sub    esp,0x14
c000bc44:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc48:	53                   	push   ebx
c000bc49:	e8 00 0a 01 00       	call   c001c64e <LinkedList<Device>::LinkedList()>
c000bc4e:	83 c4 0c             	add    esp,0xc
c000bc51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc55:	53                   	push   ebx
c000bc56:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c000bc5c:	e8 9b ff ff ff       	call   c000bbfc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc61:	89 d8                	mov    eax,ebx
c000bc63:	83 c4 18             	add    esp,0x18
c000bc66:	5b                   	pop    ebx
c000bc67:	c2 04 00             	ret    0x4
c000bc6a:	66 90                	xchg   ax,ax

c000bc6c <HardDiskController::HardDiskController(char const*)>:
c000bc6c:	83 ec 0c             	sub    esp,0xc
c000bc6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc73:	83 ec 08             	sub    esp,0x8
c000bc76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc7a:	50                   	push   eax
c000bc7b:	e8 40 fe ff ff       	call   c000bac0 <Device::Device(char const*)>
c000bc80:	83 c4 10             	add    esp,0x10
c000bc83:	ba 08 df 01 c0       	mov    edx,0xc001df08
c000bc88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc8c:	89 10                	mov    DWORD PTR [eax],edx
c000bc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc92:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bc9c:	90                   	nop
c000bc9d:	83 c4 0c             	add    esp,0xc
c000bca0:	c3                   	ret    
c000bca1:	90                   	nop
c000bca2:	66 90                	xchg   ax,ax

c000bca4 <HardDiskController::~HardDiskController()>:
c000bca4:	83 ec 0c             	sub    esp,0xc
c000bca7:	ba 08 df 01 c0       	mov    edx,0xc001df08
c000bcac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb0:	89 10                	mov    DWORD PTR [eax],edx
c000bcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb6:	83 ec 0c             	sub    esp,0xc
c000bcb9:	50                   	push   eax
c000bcba:	e8 6b fb ff ff       	call   c000b82a <Device::~Device()>
c000bcbf:	83 c4 10             	add    esp,0x10
c000bcc2:	90                   	nop
c000bcc3:	83 c4 0c             	add    esp,0xc
c000bcc6:	c3                   	ret    
c000bcc7:	90                   	nop

c000bcc8 <HardDiskController::~HardDiskController()>:
c000bcc8:	83 ec 0c             	sub    esp,0xc
c000bccb:	83 ec 0c             	sub    esp,0xc
c000bcce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcd2:	e8 cd ff ff ff       	call   c000bca4 <HardDiskController::~HardDiskController()>
c000bcd7:	83 c4 10             	add    esp,0x10
c000bcda:	83 ec 08             	sub    esp,0x8
c000bcdd:	68 58 01 00 00       	push   0x158
c000bce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce6:	e8 07 e7 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000bceb:	83 c4 10             	add    esp,0x10
c000bcee:	83 c4 0c             	add    esp,0xc
c000bcf1:	c3                   	ret    

c000bcf2 <PhysicalDisk::eject()>:
c000bcf2:	83 c8 ff             	or     eax,0xffffffff
c000bcf5:	c3                   	ret    

c000bcf6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bcf6:	83 ec 0c             	sub    esp,0xc
c000bcf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcfd:	83 ec 08             	sub    esp,0x8
c000bd00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd04:	50                   	push   eax
c000bd05:	e8 b6 fd ff ff       	call   c000bac0 <Device::Device(char const*)>
c000bd0a:	83 c4 10             	add    esp,0x10
c000bd0d:	ba 34 df 01 c0       	mov    edx,0xc001df34
c000bd12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd16:	89 10                	mov    DWORD PTR [eax],edx
c000bd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd1c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bd23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd27:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bd2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd32:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bd3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd44:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bd4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd4e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bd58:	90                   	nop
c000bd59:	83 c4 0c             	add    esp,0xc
c000bd5c:	c3                   	ret    
c000bd5d:	90                   	nop

c000bd5e <PhysicalDisk::startCache()>:
c000bd5e:	56                   	push   esi
c000bd5f:	53                   	push   ebx
c000bd60:	83 ec 10             	sub    esp,0x10
c000bd63:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd67:	6a 44                	push   0x44
c000bd69:	e8 5b ba ff ff       	call   c00077c9 <malloc>
c000bd6e:	89 c6                	mov    esi,eax
c000bd70:	58                   	pop    eax
c000bd71:	5a                   	pop    edx
c000bd72:	53                   	push   ebx
c000bd73:	56                   	push   esi
c000bd74:	e8 eb 15 00 00       	call   c000d364 <VCache::VCache(PhysicalDisk*)>
c000bd79:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bd7f:	83 c4 14             	add    esp,0x14
c000bd82:	5b                   	pop    ebx
c000bd83:	5e                   	pop    esi
c000bd84:	c3                   	ret    
c000bd85:	90                   	nop

c000bd86 <PhysicalDisk::~PhysicalDisk()>:
c000bd86:	83 ec 0c             	sub    esp,0xc
c000bd89:	ba 34 df 01 c0       	mov    edx,0xc001df34
c000bd8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd92:	89 10                	mov    DWORD PTR [eax],edx
c000bd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd98:	83 ec 0c             	sub    esp,0xc
c000bd9b:	50                   	push   eax
c000bd9c:	e8 89 fa ff ff       	call   c000b82a <Device::~Device()>
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	90                   	nop
c000bda5:	83 c4 0c             	add    esp,0xc
c000bda8:	c3                   	ret    
c000bda9:	90                   	nop

c000bdaa <PhysicalDisk::~PhysicalDisk()>:
c000bdaa:	83 ec 0c             	sub    esp,0xc
c000bdad:	83 ec 0c             	sub    esp,0xc
c000bdb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdb4:	e8 cd ff ff ff       	call   c000bd86 <PhysicalDisk::~PhysicalDisk()>
c000bdb9:	83 c4 10             	add    esp,0x10
c000bdbc:	83 ec 08             	sub    esp,0x8
c000bdbf:	68 6c 01 00 00       	push   0x16c
c000bdc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdc8:	e8 25 e6 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000bdcd:	83 c4 10             	add    esp,0x10
c000bdd0:	83 c4 0c             	add    esp,0xc
c000bdd3:	c3                   	ret    

c000bdd4 <int_handler>:
c000bdd4:	55                   	push   ebp
c000bdd5:	57                   	push   edi
c000bdd6:	56                   	push   esi
c000bdd7:	53                   	push   ebx
c000bdd8:	83 ec 0c             	sub    esp,0xc
c000bddb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bddf:	80 3d f8 35 02 c0 00 	cmp    BYTE PTR ds:0xc00235f8,0x0
c000bde6:	74 0b                	je     c000bdf3 <int_handler+0x1f>
c000bde8:	fa                   	cli    
c000bde9:	f4                   	hlt    
c000bdea:	80 3d f8 35 02 c0 00 	cmp    BYTE PTR ds:0xc00235f8,0x0
c000bdf1:	75 f5                	jne    c000bde8 <int_handler+0x14>
c000bdf3:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bdf6:	8d 46 e0             	lea    eax,[esi-0x20]
c000bdf9:	83 f8 17             	cmp    eax,0x17
c000bdfc:	76 3e                	jbe    c000be3c <int_handler+0x68>
c000bdfe:	c1 e6 04             	shl    esi,0x4
c000be01:	31 db                	xor    ebx,ebx
c000be03:	8d ae 80 1c 02 c0    	lea    ebp,[esi-0x3ffde380]
c000be09:	81 c6 80 0c 02 c0    	add    esi,0xc0020c80
c000be0f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000be13:	85 c0                	test   eax,eax
c000be15:	74 13                	je     c000be2a <int_handler+0x56>
c000be17:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000be1a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000be1e:	74 2a                	je     c000be4a <int_handler+0x76>
c000be20:	83 ec 08             	sub    esp,0x8
c000be23:	52                   	push   edx
c000be24:	57                   	push   edi
c000be25:	ff d0                	call   eax
c000be27:	83 c4 10             	add    esp,0x10
c000be2a:	43                   	inc    ebx
c000be2b:	83 fb 04             	cmp    ebx,0x4
c000be2e:	75 df                	jne    c000be0f <int_handler+0x3b>
c000be30:	83 c4 0c             	add    esp,0xc
c000be33:	31 c0                	xor    eax,eax
c000be35:	5b                   	pop    ebx
c000be36:	31 d2                	xor    edx,edx
c000be38:	5e                   	pop    esi
c000be39:	5f                   	pop    edi
c000be3a:	5d                   	pop    ebp
c000be3b:	c3                   	ret    
c000be3c:	83 ec 0c             	sub    esp,0xc
c000be3f:	50                   	push   eax
c000be40:	e8 66 9a 00 00       	call   c00158ab <HalEndOfInterrupt(int)>
c000be45:	83 c4 10             	add    esp,0x10
c000be48:	eb b4                	jmp    c000bdfe <int_handler+0x2a>
c000be4a:	83 ec 08             	sub    esp,0x8
c000be4d:	52                   	push   edx
c000be4e:	57                   	push   edi
c000be4f:	ff d0                	call   eax
c000be51:	83 c4 10             	add    esp,0x10
c000be54:	83 c4 0c             	add    esp,0xc
c000be57:	5b                   	pop    ebx
c000be58:	5e                   	pop    esi
c000be59:	5f                   	pop    edi
c000be5a:	5d                   	pop    ebp
c000be5b:	c3                   	ret    

c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000be5c:	56                   	push   esi
c000be5d:	31 c0                	xor    eax,eax
c000be5f:	53                   	push   ebx
c000be60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000be64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be68:	89 ca                	mov    edx,ecx
c000be6a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be6e:	c1 e2 04             	shl    edx,0x4
c000be71:	83 bc 82 80 1c 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffde380],0x0
c000be79:	74 15                	je     c000be90 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000be7b:	40                   	inc    eax
c000be7c:	83 f8 04             	cmp    eax,0x4
c000be7f:	75 f0                	jne    c000be71 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000be81:	c7 44 24 0c 64 df 01 c0 	mov    DWORD PTR [esp+0xc],0xc001df64
c000be89:	5b                   	pop    ebx
c000be8a:	5e                   	pop    esi
c000be8b:	e9 db 42 00 00       	jmp    c001016b <KePanic(char const*)>
c000be90:	8d 04 88             	lea    eax,[eax+ecx*4]
c000be93:	89 1c 85 80 1c 02 c0 	mov    DWORD PTR [eax*4-0x3ffde380],ebx
c000be9a:	89 34 85 80 0c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf380],esi
c000bea1:	5b                   	pop    ebx
c000bea2:	5e                   	pop    esi
c000bea3:	c3                   	ret    

c000bea4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bea4:	57                   	push   edi
c000bea5:	8b 15 78 0b 02 c0    	mov    edx,DWORD PTR ds:0xc0020b78
c000beab:	56                   	push   esi
c000beac:	53                   	push   ebx
c000bead:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000beb1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000beb5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bebc:	74 5b                	je     c000bf19 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bebe:	89 c7                	mov    edi,eax
c000bec0:	84 c0                	test   al,al
c000bec2:	74 24                	je     c000bee8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bec4:	83 fe 0f             	cmp    esi,0xf
c000bec7:	0f 8f d9 00 00 00    	jg     c000bfa6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000becd:	8a 86 40 f8 01 c0    	mov    al,BYTE PTR [esi-0x3ffe07c0]
c000bed3:	25 ff 00 00 00       	and    eax,0xff
c000bed8:	66 8b bc 00 20 34 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdcbe0]
c000bee0:	89 c6                	mov    esi,eax
c000bee2:	66 d1 ef             	shr    di,1
c000bee5:	83 e7 01             	and    edi,0x1
c000bee8:	83 ec 08             	sub    esp,0x8
c000beeb:	a1 20 48 02 c0       	mov    eax,ds:0xc0024820
c000bef0:	31 db                	xor    ebx,ebx
c000bef2:	50                   	push   eax
c000bef3:	68 71 df 01 c0       	push   0xc001df71
c000bef8:	e8 eb e5 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	a1 20 48 02 c0       	mov    eax,ds:0xc0024820
c000bf05:	85 c0                	test   eax,eax
c000bf07:	7f 51                	jg     c000bf5a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bf09:	83 ec 0c             	sub    esp,0xc
c000bf0c:	68 88 df 01 c0       	push   0xc001df88
c000bf11:	e8 55 42 00 00       	call   c001016b <KePanic(char const*)>
c000bf16:	83 c4 10             	add    esp,0x10
c000bf19:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bf1c:	31 d2                	xor    edx,edx
c000bf1e:	89 c8                	mov    eax,ecx
c000bf20:	c1 e0 04             	shl    eax,0x4
c000bf23:	8b 9c 90 80 1c 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffde380]
c000bf2a:	85 db                	test   ebx,ebx
c000bf2c:	0f 84 8b 00 00 00    	je     c000bfbd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bf32:	42                   	inc    edx
c000bf33:	83 fa 04             	cmp    edx,0x4
c000bf36:	75 eb                	jne    c000bf23 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bf38:	83 ec 0c             	sub    esp,0xc
c000bf3b:	68 dc df 01 c0       	push   0xc001dfdc
c000bf40:	e8 26 42 00 00       	call   c001016b <KePanic(char const*)>
c000bf45:	83 c4 10             	add    esp,0x10
c000bf48:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf4d:	5b                   	pop    ebx
c000bf4e:	5e                   	pop    esi
c000bf4f:	5f                   	pop    edi
c000bf50:	c3                   	ret    
c000bf51:	43                   	inc    ebx
c000bf52:	39 1d 20 48 02 c0    	cmp    DWORD PTR ds:0xc0024820,ebx
c000bf58:	7e af                	jle    c000bf09 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bf5a:	83 ec 08             	sub    esp,0x8
c000bf5d:	8b 04 9d 40 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb7c0]
c000bf64:	56                   	push   esi
c000bf65:	50                   	push   eax
c000bf66:	e8 2d f6 00 00       	call   c001b598 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bf6b:	83 c4 10             	add    esp,0x10
c000bf6e:	84 c0                	test   al,al
c000bf70:	74 df                	je     c000bf51 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bf72:	81 e7 ff 00 00 00    	and    edi,0xff
c000bf78:	50                   	push   eax
c000bf79:	8d 46 20             	lea    eax,[esi+0x20]
c000bf7c:	57                   	push   edi
c000bf7d:	25 ff 00 00 00       	and    eax,0xff
c000bf82:	6a 00                	push   0x0
c000bf84:	50                   	push   eax
c000bf85:	89 f0                	mov    eax,esi
c000bf87:	6a 00                	push   0x0
c000bf89:	25 ff 00 00 00       	and    eax,0xff
c000bf8e:	6a 00                	push   0x0
c000bf90:	50                   	push   eax
c000bf91:	8b 04 9d 40 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb7c0]
c000bf98:	50                   	push   eax
c000bf99:	e8 74 f7 00 00       	call   c001b712 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bf9e:	83 c4 20             	add    esp,0x20
c000bfa1:	e9 73 ff ff ff       	jmp    c000bf19 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfa6:	83 ec 0c             	sub    esp,0xc
c000bfa9:	31 ff                	xor    edi,edi
c000bfab:	68 a4 df 01 c0       	push   0xc001dfa4
c000bfb0:	e8 b6 41 00 00       	call   c001016b <KePanic(char const*)>
c000bfb5:	83 c4 10             	add    esp,0x10
c000bfb8:	e9 2b ff ff ff       	jmp    c000bee8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfbd:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bfc0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bfc4:	89 14 85 80 1c 02 c0 	mov    DWORD PTR [eax*4-0x3ffde380],edx
c000bfcb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bfcf:	5b                   	pop    ebx
c000bfd0:	89 14 85 80 0c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdf380],edx
c000bfd7:	89 f0                	mov    eax,esi
c000bfd9:	5e                   	pop    esi
c000bfda:	5f                   	pop    edi
c000bfdb:	c3                   	ret    

c000bfdc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000bfdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfe0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bfe4:	c1 e0 04             	shl    eax,0x4
c000bfe7:	8d 50 10             	lea    edx,[eax+0x10]
c000bfea:	39 88 80 1c 02 c0    	cmp    DWORD PTR [eax-0x3ffde380],ecx
c000bff0:	74 08                	je     c000bffa <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000bff2:	83 c0 04             	add    eax,0x4
c000bff5:	39 d0                	cmp    eax,edx
c000bff7:	75 f1                	jne    c000bfea <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000bff9:	c3                   	ret    
c000bffa:	c7 80 80 1c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde380],0x0
c000c004:	c7 80 80 0c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf380],0x0
c000c00e:	eb e2                	jmp    c000bff2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c010 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c010:	53                   	push   ebx
c000c011:	83 ec 08             	sub    esp,0x8
c000c014:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c018:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c01d:	74 0e                	je     c000c02d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c01f:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000c024:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c02b:	75 37                	jne    c000c064 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c02d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c031:	83 c0 20             	add    eax,0x20
c000c034:	c1 e0 04             	shl    eax,0x4
c000c037:	8d 50 10             	lea    edx,[eax+0x10]
c000c03a:	39 98 80 1c 02 c0    	cmp    DWORD PTR [eax-0x3ffde380],ebx
c000c040:	74 0c                	je     c000c04e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c042:	83 c0 04             	add    eax,0x4
c000c045:	39 d0                	cmp    eax,edx
c000c047:	75 f1                	jne    c000c03a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c049:	83 c4 08             	add    esp,0x8
c000c04c:	5b                   	pop    ebx
c000c04d:	c3                   	ret    
c000c04e:	c7 80 80 1c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde380],0x0
c000c058:	c7 80 80 0c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf380],0x0
c000c062:	eb de                	jmp    c000c042 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c064:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c069:	7f 12                	jg     c000c07d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c06b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c06f:	31 c0                	xor    eax,eax
c000c071:	8a 81 40 f8 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe07c0]
c000c077:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c07b:	eb b0                	jmp    c000c02d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c07d:	83 ec 0c             	sub    esp,0xc
c000c080:	68 95 df 01 c0       	push   0xc001df95
c000c085:	e8 e1 40 00 00       	call   c001016b <KePanic(char const*)>
c000c08a:	83 c4 10             	add    esp,0x10
c000c08d:	eb 9e                	jmp    c000c02d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c08f <setupINTS()>:
c000c08f:	31 c0                	xor    eax,eax
c000c091:	c7 80 80 1c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde380],0x0
c000c09b:	c7 80 80 0c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf380],0x0
c000c0a5:	c7 80 84 1c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde37c],0x0
c000c0af:	c7 80 84 0c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf37c],0x0
c000c0b9:	c7 80 88 1c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde378],0x0
c000c0c3:	c7 80 88 0c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf378],0x0
c000c0cd:	c7 80 8c 1c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde374],0x0
c000c0d7:	c7 80 8c 0c 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdf374],0x0
c000c0e1:	83 c0 10             	add    eax,0x10
c000c0e4:	3d 00 10 00 00       	cmp    eax,0x1000
c000c0e9:	75 a6                	jne    c000c091 <setupINTS()+0x2>
c000c0eb:	c3                   	ret    

c000c0ec <convertLegacyIRQNumber(int)>:
c000c0ec:	83 ec 0c             	sub    esp,0xc
c000c0ef:	8b 15 78 0b 02 c0    	mov    edx,DWORD PTR ds:0xc0020b78
c000c0f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c100:	74 0f                	je     c000c111 <convertLegacyIRQNumber(int)+0x25>
c000c102:	83 f8 0f             	cmp    eax,0xf
c000c105:	7f 0e                	jg     c000c115 <convertLegacyIRQNumber(int)+0x29>
c000c107:	31 c9                	xor    ecx,ecx
c000c109:	8a 88 40 f8 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe07c0]
c000c10f:	89 c8                	mov    eax,ecx
c000c111:	83 c4 0c             	add    esp,0xc
c000c114:	c3                   	ret    
c000c115:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c119:	83 ec 0c             	sub    esp,0xc
c000c11c:	68 a4 df 01 c0       	push   0xc001dfa4
c000c121:	e8 45 40 00 00       	call   c001016b <KePanic(char const*)>
c000c126:	83 c4 10             	add    esp,0x10
c000c129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c12d:	83 c4 0c             	add    esp,0xc
c000c130:	c3                   	ret    
c000c131:	90                   	nop

c000c132 <startGUI(void*)>:
c000c132:	55                   	push   ebp
c000c133:	89 e5                	mov    ebp,esp
c000c135:	53                   	push   ebx
c000c136:	83 ec 04             	sub    esp,0x4
c000c139:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000c13e:	48                   	dec    eax
c000c13f:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c000c144:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000c149:	85 c0                	test   eax,eax
c000c14b:	75 01                	jne    c000c14e <startGUI(void*)+0x1c>
c000c14d:	fb                   	sti    
c000c14e:	8b 1d 78 0b 02 c0    	mov    ebx,DWORD PTR ds:0xc0020b78
c000c154:	83 ec 08             	sub    esp,0x8
c000c157:	6a 01                	push   0x1
c000c159:	68 01 e0 01 c0       	push   0xc001e001
c000c15e:	e8 2f 6c 00 00       	call   c0012d92 <Thr::loadDLL(char const*, bool)>
c000c163:	83 c4 10             	add    esp,0x10
c000c166:	83 ec 08             	sub    esp,0x8
c000c169:	53                   	push   ebx
c000c16a:	50                   	push   eax
c000c16b:	e8 53 6e 00 00       	call   c0012fc3 <Thr::executeDLL(unsigned long, void*)>
c000c170:	83 c4 10             	add    esp,0x10
c000c173:	8b 1d 78 0b 02 c0    	mov    ebx,DWORD PTR ds:0xc0020b78
c000c179:	83 ec 08             	sub    esp,0x8
c000c17c:	6a 01                	push   0x1
c000c17e:	68 1b e0 01 c0       	push   0xc001e01b
c000c183:	e8 0a 6c 00 00       	call   c0012d92 <Thr::loadDLL(char const*, bool)>
c000c188:	83 c4 10             	add    esp,0x10
c000c18b:	83 ec 08             	sub    esp,0x8
c000c18e:	53                   	push   ebx
c000c18f:	50                   	push   eax
c000c190:	e8 2e 6e 00 00       	call   c0012fc3 <Thr::executeDLL(unsigned long, void*)>
c000c195:	83 c4 10             	add    esp,0x10
c000c198:	90                   	nop
c000c199:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c19c:	c9                   	leave  
c000c19d:	c3                   	ret    

c000c19e <startGUIVESA(void*)>:
c000c19e:	55                   	push   ebp
c000c19f:	89 e5                	mov    ebp,esp
c000c1a1:	53                   	push   ebx
c000c1a2:	83 ec 04             	sub    esp,0x4
c000c1a5:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000c1aa:	48                   	dec    eax
c000c1ab:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c000c1b0:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000c1b5:	85 c0                	test   eax,eax
c000c1b7:	75 01                	jne    c000c1ba <startGUIVESA(void*)+0x1c>
c000c1b9:	fb                   	sti    
c000c1ba:	8b 1d 78 0b 02 c0    	mov    ebx,DWORD PTR ds:0xc0020b78
c000c1c0:	83 ec 08             	sub    esp,0x8
c000c1c3:	6a 01                	push   0x1
c000c1c5:	68 39 e0 01 c0       	push   0xc001e039
c000c1ca:	e8 c3 6b 00 00       	call   c0012d92 <Thr::loadDLL(char const*, bool)>
c000c1cf:	83 c4 10             	add    esp,0x10
c000c1d2:	83 ec 08             	sub    esp,0x8
c000c1d5:	53                   	push   ebx
c000c1d6:	50                   	push   eax
c000c1d7:	e8 e7 6d 00 00       	call   c0012fc3 <Thr::executeDLL(unsigned long, void*)>
c000c1dc:	83 c4 10             	add    esp,0x10
c000c1df:	8b 1d 78 0b 02 c0    	mov    ebx,DWORD PTR ds:0xc0020b78
c000c1e5:	83 ec 08             	sub    esp,0x8
c000c1e8:	6a 01                	push   0x1
c000c1ea:	68 1b e0 01 c0       	push   0xc001e01b
c000c1ef:	e8 9e 6b 00 00       	call   c0012d92 <Thr::loadDLL(char const*, bool)>
c000c1f4:	83 c4 10             	add    esp,0x10
c000c1f7:	83 ec 08             	sub    esp,0x8
c000c1fa:	53                   	push   ebx
c000c1fb:	50                   	push   eax
c000c1fc:	e8 c2 6d 00 00       	call   c0012fc3 <Thr::executeDLL(unsigned long, void*)>
c000c201:	83 c4 10             	add    esp,0x10
c000c204:	90                   	nop
c000c205:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c208:	c9                   	leave  
c000c209:	c3                   	ret    

c000c20a <sendKeyToTerminal(unsigned char)>:
c000c20a:	55                   	push   ebp
c000c20b:	89 e5                	mov    ebp,esp
c000c20d:	83 ec 28             	sub    esp,0x28
c000c210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c213:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c216:	8b 15 c4 0b 02 c0    	mov    edx,DWORD PTR ds:0xc0020bc4
c000c21c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c21f:	25 ff 00 00 00       	and    eax,0xff
c000c224:	83 ec 08             	sub    esp,0x8
c000c227:	50                   	push   eax
c000c228:	52                   	push   edx
c000c229:	e8 28 c8 ff ff       	call   c0008a56 <VgaText::receiveKey(unsigned char)>
c000c22e:	83 c4 10             	add    esp,0x10
c000c231:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c235:	74 0a                	je     c000c241 <sendKeyToTerminal(unsigned char)+0x37>
c000c237:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c23b:	0f 85 8f 00 00 00    	jne    c000c2d0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c241:	fa                   	cli    
c000c242:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000c247:	40                   	inc    eax
c000c248:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c000c24d:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c000c252:	40                   	inc    eax
c000c253:	a3 24 3e 02 c0       	mov    ds:0xc0023e24,eax
c000c258:	a1 80 2c 02 c0       	mov    eax,ds:0xc0022c80
c000c25d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c260:	c7 05 80 2c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022c80,0x0
c000c26a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c26e:	74 1f                	je     c000c28f <sendKeyToTerminal(unsigned char)+0x85>
c000c270:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c273:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c276:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c279:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c27c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c27f:	83 ec 0c             	sub    esp,0xc
c000c282:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c285:	e8 f6 79 00 00       	call   c0013c80 <unblockTask(ThreadControlBlock*)>
c000c28a:	83 c4 10             	add    esp,0x10
c000c28d:	eb db                	jmp    c000c26a <sendKeyToTerminal(unsigned char)+0x60>
c000c28f:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c000c294:	48                   	dec    eax
c000c295:	a3 24 3e 02 c0       	mov    ds:0xc0023e24,eax
c000c29a:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c000c29f:	85 c0                	test   eax,eax
c000c2a1:	75 18                	jne    c000c2bb <sendKeyToTerminal(unsigned char)+0xb1>
c000c2a3:	a1 20 3e 02 c0       	mov    eax,ds:0xc0023e20
c000c2a8:	85 c0                	test   eax,eax
c000c2aa:	74 0f                	je     c000c2bb <sendKeyToTerminal(unsigned char)+0xb1>
c000c2ac:	c7 05 20 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e20,0x0
c000c2b6:	e8 01 75 00 00       	call   c00137bc <schedule()>
c000c2bb:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000c2c0:	48                   	dec    eax
c000c2c1:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c000c2c6:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000c2cb:	85 c0                	test   eax,eax
c000c2cd:	75 01                	jne    c000c2d0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c2cf:	fb                   	sti    
c000c2d0:	90                   	nop
c000c2d1:	c9                   	leave  
c000c2d2:	c3                   	ret    

c000c2d3 <sendKeyboardToken(KeyboardToken)>:
c000c2d3:	55                   	push   ebp
c000c2d4:	89 e5                	mov    ebp,esp
c000c2d6:	83 ec 18             	sub    esp,0x18
c000c2d9:	e8 dd 3e 00 00       	call   c00101bb <Krnl::userIOReceived()>
c000c2de:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c2e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2e4:	25 ff ff 00 00       	and    eax,0xffff
c000c2e9:	83 f2 01             	xor    edx,0x1
c000c2ec:	88 90 a0 2c 02 c0    	mov    BYTE PTR [eax-0x3ffdd360],dl
c000c2f2:	a1 88 2c 02 c0       	mov    eax,ds:0xc0022c88
c000c2f7:	85 c0                	test   eax,eax
c000c2f9:	74 24                	je     c000c31f <sendKeyboardToken(KeyboardToken)+0x4c>
c000c2fb:	8b 0d 88 2c 02 c0    	mov    ecx,DWORD PTR ds:0xc0022c88
c000c301:	83 ec 04             	sub    esp,0x4
c000c304:	68 a0 2c 02 c0       	push   0xc0022ca0
c000c309:	83 ec 08             	sub    esp,0x8
c000c30c:	89 e2                	mov    edx,esp
c000c30e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c311:	89 02                	mov    DWORD PTR [edx],eax
c000c313:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c316:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c31a:	ff d1                	call   ecx
c000c31c:	83 c4 10             	add    esp,0x10
c000c31f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c323:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c326:	a0 a8 30 02 c0       	mov    al,ds:0xc00230a8
c000c32b:	38 c2                	cmp    dl,al
c000c32d:	74 1e                	je     c000c34d <sendKeyboardToken(KeyboardToken)+0x7a>
c000c32f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c332:	a2 a8 30 02 c0       	mov    ds:0xc00230a8,al
c000c337:	a0 a8 30 02 c0       	mov    al,ds:0xc00230a8
c000c33c:	25 ff 00 00 00       	and    eax,0xff
c000c341:	83 ec 0c             	sub    esp,0xc
c000c344:	50                   	push   eax
c000c345:	e8 5e be ff ff       	call   c00081a8 <setTerminalScrollLock(bool)>
c000c34a:	83 c4 10             	add    esp,0x10
c000c34d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c350:	84 c0                	test   al,al
c000c352:	0f 84 ae 00 00 00    	je     c000c406 <sendKeyboardToken(KeyboardToken)+0x133>
c000c358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c35b:	66 3d 10 03          	cmp    ax,0x310
c000c35f:	75 06                	jne    c000c367 <sendKeyboardToken(KeyboardToken)+0x94>
c000c361:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c367:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c36a:	66 3d 11 03          	cmp    ax,0x311
c000c36e:	75 06                	jne    c000c376 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c370:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c379:	66 3d 12 03          	cmp    ax,0x312
c000c37d:	75 06                	jne    c000c385 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c37f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c388:	66 3d 13 03          	cmp    ax,0x313
c000c38c:	75 06                	jne    c000c394 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c38e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c397:	66 3d 14 03          	cmp    ax,0x314
c000c39b:	75 06                	jne    c000c3a3 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c39d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c3a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3a6:	66 3d 15 03          	cmp    ax,0x315
c000c3aa:	75 06                	jne    c000c3b2 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c3ac:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c3b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3b5:	66 3d 16 03          	cmp    ax,0x316
c000c3b9:	75 06                	jne    c000c3c1 <sendKeyboardToken(KeyboardToken)+0xee>
c000c3bb:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c3c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3c4:	66 3d 17 03          	cmp    ax,0x317
c000c3c8:	75 06                	jne    c000c3d0 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c3ca:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c3d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3d3:	66 3d 18 03          	cmp    ax,0x318
c000c3d7:	75 06                	jne    c000c3df <sendKeyboardToken(KeyboardToken)+0x10c>
c000c3d9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c3df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3e2:	66 3d 19 03          	cmp    ax,0x319
c000c3e6:	75 06                	jne    c000c3ee <sendKeyboardToken(KeyboardToken)+0x11b>
c000c3e8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c3ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f1:	66 3d 1a 03          	cmp    ax,0x31a
c000c3f5:	0f 85 c9 00 00 00    	jne    c000c4c4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3fb:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c401:	e9 be 00 00 00       	jmp    c000c4c4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c406:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c409:	66 3d 10 03          	cmp    ax,0x310
c000c40d:	75 0a                	jne    c000c419 <sendKeyboardToken(KeyboardToken)+0x146>
c000c40f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c415:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c41c:	66 3d 11 03          	cmp    ax,0x311
c000c420:	75 0a                	jne    c000c42c <sendKeyboardToken(KeyboardToken)+0x159>
c000c422:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c428:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c42c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c42f:	66 3d 12 03          	cmp    ax,0x312
c000c433:	75 0a                	jne    c000c43f <sendKeyboardToken(KeyboardToken)+0x16c>
c000c435:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c43b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c43f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c442:	66 3d 13 03          	cmp    ax,0x313
c000c446:	75 0a                	jne    c000c452 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c448:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c44e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c455:	66 3d 14 03          	cmp    ax,0x314
c000c459:	75 0a                	jne    c000c465 <sendKeyboardToken(KeyboardToken)+0x192>
c000c45b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c461:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c468:	66 3d 15 03          	cmp    ax,0x315
c000c46c:	75 0a                	jne    c000c478 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c46e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c474:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c47b:	66 3d 16 03          	cmp    ax,0x316
c000c47f:	75 0a                	jne    c000c48b <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c481:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c487:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c48b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c48e:	66 3d 17 03          	cmp    ax,0x317
c000c492:	75 0a                	jne    c000c49e <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c494:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c49a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c49e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a1:	66 3d 18 03          	cmp    ax,0x318
c000c4a5:	75 0a                	jne    c000c4b1 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c4a7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c4ad:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b4:	66 3d 19 03          	cmp    ax,0x319
c000c4b8:	75 0a                	jne    c000c4c4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4ba:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c4c0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c7:	66 3d 00 02          	cmp    ax,0x200
c000c4cb:	75 2c                	jne    c000c4f9 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4cd:	a0 a0 30 02 c0       	mov    al,ds:0xc00230a0
c000c4d2:	83 f0 01             	xor    eax,0x1
c000c4d5:	84 c0                	test   al,al
c000c4d7:	74 20                	je     c000c4f9 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4d9:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c000c4de:	6a 01                	push   0x1
c000c4e0:	6a 00                	push   0x0
c000c4e2:	68 32 c1 00 c0       	push   0xc000c132
c000c4e7:	50                   	push   eax
c000c4e8:	e8 af 70 00 00       	call   c001359c <Process::createThread(void (*)(void*), void*, int)>
c000c4ed:	83 c4 10             	add    esp,0x10
c000c4f0:	c6 05 a0 30 02 c0 01 	mov    BYTE PTR ds:0xc00230a0,0x1
c000c4f7:	eb 33                	jmp    c000c52c <sendKeyboardToken(KeyboardToken)+0x259>
c000c4f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4fc:	66 3d 01 02          	cmp    ax,0x201
c000c500:	75 2a                	jne    c000c52c <sendKeyboardToken(KeyboardToken)+0x259>
c000c502:	a0 a0 30 02 c0       	mov    al,ds:0xc00230a0
c000c507:	83 f0 01             	xor    eax,0x1
c000c50a:	84 c0                	test   al,al
c000c50c:	74 1e                	je     c000c52c <sendKeyboardToken(KeyboardToken)+0x259>
c000c50e:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c000c513:	6a 01                	push   0x1
c000c515:	6a 00                	push   0x0
c000c517:	68 9e c1 00 c0       	push   0xc000c19e
c000c51c:	50                   	push   eax
c000c51d:	e8 7a 70 00 00       	call   c001359c <Process::createThread(void (*)(void*), void*, int)>
c000c522:	83 c4 10             	add    esp,0x10
c000c525:	c6 05 a0 30 02 c0 01 	mov    BYTE PTR ds:0xc00230a0,0x1
c000c52c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c52f:	66 3d 1d 03          	cmp    ax,0x31d
c000c533:	75 06                	jne    c000c53b <sendKeyboardToken(KeyboardToken)+0x268>
c000c535:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c53b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c53e:	66 3d 1c 03          	cmp    ax,0x31c
c000c542:	75 06                	jne    c000c54a <sendKeyboardToken(KeyboardToken)+0x277>
c000c544:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c54a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c54d:	66 3d 1b 03          	cmp    ax,0x31b
c000c551:	75 06                	jne    c000c559 <sendKeyboardToken(KeyboardToken)+0x286>
c000c553:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c55c:	66 3d 1e 03          	cmp    ax,0x31e
c000c560:	75 06                	jne    c000c568 <sendKeyboardToken(KeyboardToken)+0x295>
c000c562:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c56b:	66 3d 1f 03          	cmp    ax,0x31f
c000c56f:	75 06                	jne    c000c577 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c571:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c57a:	66 3d 1a 03          	cmp    ax,0x31a
c000c57e:	75 06                	jne    c000c586 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c580:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c586:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c58a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c58d:	83 f0 01             	xor    eax,0x1
c000c590:	84 c0                	test   al,al
c000c592:	74 7b                	je     c000c60f <sendKeyboardToken(KeyboardToken)+0x33c>
c000c594:	a0 a1 2d 02 c0       	mov    al,ds:0xc0022da1
c000c599:	84 c0                	test   al,al
c000c59b:	74 43                	je     c000c5e0 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c59d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5a1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c5a5:	74 2d                	je     c000c5d4 <sendKeyboardToken(KeyboardToken)+0x301>
c000c5a7:	8b 15 a4 30 02 c0    	mov    edx,DWORD PTR ds:0xc00230a4
c000c5ad:	89 d0                	mov    eax,edx
c000c5af:	c1 e0 02             	shl    eax,0x2
c000c5b2:	01 d0                	add    eax,edx
c000c5b4:	01 c0                	add    eax,eax
c000c5b6:	a3 a4 30 02 c0       	mov    ds:0xc00230a4,eax
c000c5bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5be:	25 ff ff 00 00       	and    eax,0xffff
c000c5c3:	8d 50 d0             	lea    edx,[eax-0x30]
c000c5c6:	a1 a4 30 02 c0       	mov    eax,ds:0xc00230a4
c000c5cb:	01 d0                	add    eax,edx
c000c5cd:	a3 a4 30 02 c0       	mov    ds:0xc00230a4,eax
c000c5d2:	eb 71                	jmp    c000c645 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5d4:	c7 05 a4 30 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00230a4,0x0
c000c5de:	eb 65                	jmp    c000c645 <sendKeyboardToken(KeyboardToken)+0x372>
c000c5e0:	a1 a4 30 02 c0       	mov    eax,ds:0xc00230a4
c000c5e5:	85 c0                	test   eax,eax
c000c5e7:	74 1a                	je     c000c603 <sendKeyboardToken(KeyboardToken)+0x330>
c000c5e9:	a1 a4 30 02 c0       	mov    eax,ds:0xc00230a4
c000c5ee:	25 ff 00 00 00       	and    eax,0xff
c000c5f3:	83 ec 0c             	sub    esp,0xc
c000c5f6:	50                   	push   eax
c000c5f7:	e8 0e fc ff ff       	call   c000c20a <sendKeyToTerminal(unsigned char)>
c000c5fc:	83 c4 10             	add    esp,0x10
c000c5ff:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c603:	c7 05 a4 30 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00230a4,0x0
c000c60d:	eb 36                	jmp    c000c645 <sendKeyboardToken(KeyboardToken)+0x372>
c000c60f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c612:	66 3d 01 01          	cmp    ax,0x101
c000c616:	75 2d                	jne    c000c645 <sendKeyboardToken(KeyboardToken)+0x372>
c000c618:	a1 a4 30 02 c0       	mov    eax,ds:0xc00230a4
c000c61d:	85 c0                	test   eax,eax
c000c61f:	74 1a                	je     c000c63b <sendKeyboardToken(KeyboardToken)+0x368>
c000c621:	a1 a4 30 02 c0       	mov    eax,ds:0xc00230a4
c000c626:	25 ff 00 00 00       	and    eax,0xff
c000c62b:	83 ec 0c             	sub    esp,0xc
c000c62e:	50                   	push   eax
c000c62f:	e8 d6 fb ff ff       	call   c000c20a <sendKeyToTerminal(unsigned char)>
c000c634:	83 c4 10             	add    esp,0x10
c000c637:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c63b:	c7 05 a4 30 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00230a4,0x0
c000c645:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c648:	83 f0 01             	xor    eax,0x1
c000c64b:	84 c0                	test   al,al
c000c64d:	74 4e                	je     c000c69d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c64f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c652:	83 f0 01             	xor    eax,0x1
c000c655:	84 c0                	test   al,al
c000c657:	74 44                	je     c000c69d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c659:	a0 a0 2d 02 c0       	mov    al,ds:0xc0022da0
c000c65e:	83 f0 01             	xor    eax,0x1
c000c661:	84 c0                	test   al,al
c000c663:	74 38                	je     c000c69d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c668:	66 83 f8 1f          	cmp    ax,0x1f
c000c66c:	76 09                	jbe    c000c677 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c66e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c671:	66 83 f8 7e          	cmp    ax,0x7e
c000c675:	76 12                	jbe    c000c689 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67a:	66 83 f8 0a          	cmp    ax,0xa
c000c67e:	74 09                	je     c000c689 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c683:	66 83 f8 08          	cmp    ax,0x8
c000c687:	75 14                	jne    c000c69d <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c68c:	25 ff 00 00 00       	and    eax,0xff
c000c691:	83 ec 0c             	sub    esp,0xc
c000c694:	50                   	push   eax
c000c695:	e8 70 fb ff ff       	call   c000c20a <sendKeyToTerminal(unsigned char)>
c000c69a:	83 c4 10             	add    esp,0x10
c000c69d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c6a0:	83 f0 01             	xor    eax,0x1
c000c6a3:	84 c0                	test   al,al
c000c6a5:	74 51                	je     c000c6f8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6a7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6aa:	83 f0 01             	xor    eax,0x1
c000c6ad:	84 c0                	test   al,al
c000c6af:	74 47                	je     c000c6f8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6b1:	a0 a0 2d 02 c0       	mov    al,ds:0xc0022da0
c000c6b6:	84 c0                	test   al,al
c000c6b8:	74 3e                	je     c000c6f8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6bd:	66 83 f8 3f          	cmp    ax,0x3f
c000c6c1:	76 35                	jbe    c000c6f8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c6:	66 83 f8 7f          	cmp    ax,0x7f
c000c6ca:	77 2c                	ja     c000c6f8 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6cf:	88 c2                	mov    dl,al
c000c6d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6d4:	66 83 f8 5f          	cmp    ax,0x5f
c000c6d8:	76 04                	jbe    c000c6de <sendKeyboardToken(KeyboardToken)+0x40b>
c000c6da:	b0 20                	mov    al,0x20
c000c6dc:	eb 02                	jmp    c000c6e0 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c6de:	b0 00                	mov    al,0x0
c000c6e0:	29 c2                	sub    edx,eax
c000c6e2:	88 d0                	mov    al,dl
c000c6e4:	83 e8 40             	sub    eax,0x40
c000c6e7:	25 ff 00 00 00       	and    eax,0xff
c000c6ec:	83 ec 0c             	sub    esp,0xc
c000c6ef:	50                   	push   eax
c000c6f0:	e8 15 fb ff ff       	call   c000c20a <sendKeyToTerminal(unsigned char)>
c000c6f5:	83 c4 10             	add    esp,0x10
c000c6f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6fb:	66 3d 00 03          	cmp    ax,0x300
c000c6ff:	75 0f                	jne    c000c710 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c701:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c704:	83 f0 01             	xor    eax,0x1
c000c707:	84 c0                	test   al,al
c000c709:	74 05                	je     c000c710 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c70b:	e8 99 ba ff ff       	call   c00081a9 <doTerminalCycle()>
c000c710:	90                   	nop
c000c711:	c9                   	leave  
c000c712:	c3                   	ret    

c000c713 <clearInternalKeybuffer(VgaText*)>:
c000c713:	55                   	push   ebp
c000c714:	89 e5                	mov    ebp,esp
c000c716:	83 ec 08             	sub    esp,0x8
c000c719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c71c:	05 b2 00 00 00       	add    eax,0xb2
c000c721:	83 ec 0c             	sub    esp,0xc
c000c724:	50                   	push   eax
c000c725:	e8 26 3e ff ff       	call   c0000550 <strlen>
c000c72a:	83 c4 10             	add    esp,0x10
c000c72d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c730:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c736:	83 ec 04             	sub    esp,0x4
c000c739:	50                   	push   eax
c000c73a:	6a 00                	push   0x0
c000c73c:	52                   	push   edx
c000c73d:	e8 9e 3d ff ff       	call   c00004e0 <memset>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	90                   	nop
c000c746:	c9                   	leave  
c000c747:	c3                   	ret    

c000c748 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c748:	55                   	push   ebp
c000c749:	89 e5                	mov    ebp,esp
c000c74b:	83 ec 18             	sub    esp,0x18
c000c74e:	a1 88 2c 02 c0       	mov    eax,ds:0xc0022c88
c000c753:	85 c0                	test   eax,eax
c000c755:	74 2a                	je     c000c781 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c757:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c75d:	8b 0d 88 2c 02 c0    	mov    ecx,DWORD PTR ds:0xc0022c88
c000c763:	83 ec 04             	sub    esp,0x4
c000c766:	68 a0 2c 02 c0       	push   0xc0022ca0
c000c76b:	83 ec 08             	sub    esp,0x8
c000c76e:	89 e2                	mov    edx,esp
c000c770:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c773:	89 02                	mov    DWORD PTR [edx],eax
c000c775:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c778:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c77c:	ff d1                	call   ecx
c000c77e:	83 c4 10             	add    esp,0x10
c000c781:	fb                   	sti    
c000c782:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c789:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c78d:	0f 84 db 00 00 00    	je     c000c86e <readKeyboard(VgaText*, char*, unsigned long)+0x126>
c000c793:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c796:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c79c:	84 c0                	test   al,al
c000c79e:	75 28                	jne    c000c7c8 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c7a0:	fa                   	cli    
c000c7a1:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000c7a6:	40                   	inc    eax
c000c7a7:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c000c7ac:	e8 0b 70 00 00       	call   c00137bc <schedule()>
c000c7b1:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000c7b6:	48                   	dec    eax
c000c7b7:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c000c7bc:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000c7c1:	85 c0                	test   eax,eax
c000c7c3:	75 ce                	jne    c000c793 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7c5:	fb                   	sti    
c000c7c6:	eb cb                	jmp    c000c793 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c7cb:	8d 50 01             	lea    edx,[eax+0x1]
c000c7ce:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c7d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7d4:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c7da:	88 10                	mov    BYTE PTR [eax],dl
c000c7dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7df:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7e5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c7e8:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c7ec:	75 2e                	jne    c000c81c <readKeyboard(VgaText*, char*, unsigned long)+0xd4>
c000c7ee:	83 ec 0c             	sub    esp,0xc
c000c7f1:	68 54 e0 01 c0       	push   0xc001e054
c000c7f6:	e8 ed dc ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000c7fb:	83 c4 10             	add    esp,0x10
c000c7fe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c803:	8b 00                	mov    eax,DWORD PTR [eax]
c000c805:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c808:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c80e:	83 ec 08             	sub    esp,0x8
c000c811:	6a 02                	push   0x2
c000c813:	50                   	push   eax
c000c814:	e8 fb 3c 00 00       	call   c0010514 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c819:	83 c4 10             	add    esp,0x10
c000c81c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c81f:	05 b2 00 00 00       	add    eax,0xb2
c000c824:	83 ec 0c             	sub    esp,0xc
c000c827:	50                   	push   eax
c000c828:	e8 23 3d ff ff       	call   c0000550 <strlen>
c000c82d:	83 c4 10             	add    esp,0x10
c000c830:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c833:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c839:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c83c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c83f:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c845:	83 ec 04             	sub    esp,0x4
c000c848:	50                   	push   eax
c000c849:	51                   	push   ecx
c000c84a:	52                   	push   edx
c000c84b:	e8 a0 3b ff ff       	call   c00003f0 <memmove>
c000c850:	83 c4 10             	add    esp,0x10
c000c853:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c856:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c859:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c85d:	74 0a                	je     c000c869 <readKeyboard(VgaText*, char*, unsigned long)+0x121>
c000c85f:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c863:	0f 85 20 ff ff ff    	jne    c000c789 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c869:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c86c:	eb 03                	jmp    c000c871 <readKeyboard(VgaText*, char*, unsigned long)+0x129>
c000c86e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c871:	c9                   	leave  
c000c872:	c3                   	ret    
c000c873:	90                   	nop

c000c874 <Keyboard::Keyboard(char const*)>:
c000c874:	83 ec 0c             	sub    esp,0xc
c000c877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c87b:	83 ec 08             	sub    esp,0x8
c000c87e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c882:	50                   	push   eax
c000c883:	e8 38 f2 ff ff       	call   c000bac0 <Device::Device(char const*)>
c000c888:	83 c4 10             	add    esp,0x10
c000c88b:	ba 6c e0 01 c0       	mov    edx,0xc001e06c
c000c890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c894:	89 10                	mov    DWORD PTR [eax],edx
c000c896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c89a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c8a4:	c6 05 84 2c 02 c0 01 	mov    BYTE PTR ds:0xc0022c84,0x1
c000c8ab:	90                   	nop
c000c8ac:	83 c4 0c             	add    esp,0xc
c000c8af:	c3                   	ret    

c000c8b0 <Keyboard::~Keyboard()>:
c000c8b0:	83 ec 0c             	sub    esp,0xc
c000c8b3:	ba 6c e0 01 c0       	mov    edx,0xc001e06c
c000c8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8bc:	89 10                	mov    DWORD PTR [eax],edx
c000c8be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8c2:	83 ec 0c             	sub    esp,0xc
c000c8c5:	50                   	push   eax
c000c8c6:	e8 5f ef ff ff       	call   c000b82a <Device::~Device()>
c000c8cb:	83 c4 10             	add    esp,0x10
c000c8ce:	90                   	nop
c000c8cf:	83 c4 0c             	add    esp,0xc
c000c8d2:	c3                   	ret    
c000c8d3:	90                   	nop

c000c8d4 <Keyboard::~Keyboard()>:
c000c8d4:	83 ec 0c             	sub    esp,0xc
c000c8d7:	83 ec 0c             	sub    esp,0xc
c000c8da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8de:	e8 cd ff ff ff       	call   c000c8b0 <Keyboard::~Keyboard()>
c000c8e3:	83 c4 10             	add    esp,0x10
c000c8e6:	83 ec 08             	sub    esp,0x8
c000c8e9:	68 5c 01 00 00       	push   0x15c
c000c8ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f2:	e8 fb da ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000c8f7:	83 c4 10             	add    esp,0x10
c000c8fa:	83 c4 0c             	add    esp,0xc
c000c8fd:	c3                   	ret    

c000c8fe <LogicalDisk::close(int, int, void*)>:
c000c8fe:	83 c8 ff             	or     eax,0xffffffff
c000c901:	c3                   	ret    

c000c902 <LogicalDisk::~LogicalDisk()>:
c000c902:	83 ec 0c             	sub    esp,0xc
c000c905:	ba e4 e0 01 c0       	mov    edx,0xc001e0e4
c000c90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c90e:	89 10                	mov    DWORD PTR [eax],edx
c000c910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c914:	83 ec 0c             	sub    esp,0xc
c000c917:	50                   	push   eax
c000c918:	e8 0d ef ff ff       	call   c000b82a <Device::~Device()>
c000c91d:	83 c4 10             	add    esp,0x10
c000c920:	90                   	nop
c000c921:	83 c4 0c             	add    esp,0xc
c000c924:	c3                   	ret    
c000c925:	90                   	nop

c000c926 <LogicalDisk::~LogicalDisk()>:
c000c926:	83 ec 0c             	sub    esp,0xc
c000c929:	83 ec 0c             	sub    esp,0xc
c000c92c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c930:	e8 cd ff ff ff       	call   c000c902 <LogicalDisk::~LogicalDisk()>
c000c935:	83 c4 10             	add    esp,0x10
c000c938:	83 ec 08             	sub    esp,0x8
c000c93b:	68 74 01 00 00       	push   0x174
c000c940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c944:	e8 a9 da ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000c949:	83 c4 10             	add    esp,0x10
c000c94c:	83 c4 0c             	add    esp,0xc
c000c94f:	c3                   	ret    

c000c950 <LogicalDisk::open(int, int, void*)>:
c000c950:	83 ec 18             	sub    esp,0x18
c000c953:	68 98 e0 01 c0       	push   0xc001e098
c000c958:	e8 0e 38 00 00       	call   c001016b <KePanic(char const*)>
c000c95d:	83 c8 ff             	or     eax,0xffffffff
c000c960:	83 c4 1c             	add    esp,0x1c
c000c963:	c3                   	ret    

c000c964 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c964:	53                   	push   ebx
c000c965:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c969:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c96d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c971:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c977:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c97d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c983:	77 10                	ja     c000c995 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c985:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c98b:	89 d3                	mov    ebx,edx
c000c98d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c993:	72 05                	jb     c000c99a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c995:	83 c8 ff             	or     eax,0xffffffff
c000c998:	89 c2                	mov    edx,eax
c000c99a:	5b                   	pop    ebx
c000c99b:	c3                   	ret    

c000c99c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c99c:	56                   	push   esi
c000c99d:	83 c8 ff             	or     eax,0xffffffff
c000c9a0:	53                   	push   ebx
c000c9a1:	89 c2                	mov    edx,eax
c000c9a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c9a7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c9ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c9af:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c9b5:	77 27                	ja     c000c9de <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c9b7:	89 d8                	mov    eax,ebx
c000c9b9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c9bf:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c9c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c9ca:	89 c2                	mov    edx,eax
c000c9cc:	73 10                	jae    c000c9de <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c9ce:	89 c8                	mov    eax,ecx
c000c9d0:	89 da                	mov    edx,ebx
c000c9d2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c9d8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000c9de:	5b                   	pop    ebx
c000c9df:	5e                   	pop    esi
c000c9e0:	c3                   	ret    
c000c9e1:	90                   	nop

c000c9e2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c9e2:	83 ec 1c             	sub    esp,0x1c
c000c9e5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c9f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c9f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000c9fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ca04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca08:	83 ec 08             	sub    esp,0x8
c000ca0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0f:	50                   	push   eax
c000ca10:	e8 ab f0 ff ff       	call   c000bac0 <Device::Device(char const*)>
c000ca15:	83 c4 10             	add    esp,0x10
c000ca18:	ba e4 e0 01 c0       	mov    edx,0xc001e0e4
c000ca1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca21:	89 10                	mov    DWORD PTR [eax],edx
c000ca23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca27:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca32:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca3d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ca47:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca53:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ca59:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ca5f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ca66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca6a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ca70:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ca76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ca7e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ca84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca88:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ca92:	90                   	nop
c000ca93:	83 c4 1c             	add    esp,0x1c
c000ca96:	c3                   	ret    
c000ca97:	90                   	nop

c000ca98 <LogicalDisk::assignDriveLetter()>:
c000ca98:	55                   	push   ebp
c000ca99:	57                   	push   edi
c000ca9a:	56                   	push   esi
c000ca9b:	53                   	push   ebx
c000ca9c:	83 ec 14             	sub    esp,0x14
c000ca9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000caa3:	8b 3d c0 30 02 c0    	mov    edi,DWORD PTR ds:0xc00230c0
c000caa9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000caaf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cab3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cab9:	8b 3d c4 30 02 c0    	mov    edi,DWORD PTR ds:0xc00230c4
c000cabf:	3c 01                	cmp    al,0x1
c000cac1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cac5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cac9:	19 c0                	sbb    eax,eax
c000cacb:	83 e0 02             	and    eax,0x2
c000cace:	83 c0 41             	add    eax,0x41
c000cad1:	0f be e8             	movsx  ebp,al
c000cad4:	3c 43                	cmp    al,0x43
c000cad6:	75 10                	jne    c000cae8 <LogicalDisk::assignDriveLetter()+0x50>
c000cad8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cadf:	75 5d                	jne    c000cb3e <LogicalDisk::assignDriveLetter()+0xa6>
c000cae1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cae6:	75 56                	jne    c000cb3e <LogicalDisk::assignDriveLetter()+0xa6>
c000cae8:	8d 75 bf             	lea    esi,[ebp-0x41]
c000caeb:	ba 01 00 00 00       	mov    edx,0x1
c000caf0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000caf4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000caf8:	d3 e2                	shl    edx,cl
c000cafa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cafe:	89 d7                	mov    edi,edx
c000cb00:	89 d6                	mov    esi,edx
c000cb02:	c1 ff 1f             	sar    edi,0x1f
c000cb05:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cb09:	21 f9                	and    ecx,edi
c000cb0b:	09 d1                	or     ecx,edx
c000cb0d:	75 2f                	jne    c000cb3e <LogicalDisk::assignDriveLetter()+0xa6>
c000cb0f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cb13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cb17:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cb1d:	09 f2                	or     edx,esi
c000cb1f:	89 15 c0 30 02 c0    	mov    DWORD PTR ds:0xc00230c0,edx
c000cb25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb29:	09 fa                	or     edx,edi
c000cb2b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cb2f:	89 15 c4 30 02 c0    	mov    DWORD PTR ds:0xc00230c4,edx
c000cb35:	89 1c bd e0 30 02 c0 	mov    DWORD PTR [edi*4-0x3ffdcf20],ebx
c000cb3c:	eb 08                	jmp    c000cb46 <LogicalDisk::assignDriveLetter()+0xae>
c000cb3e:	45                   	inc    ebp
c000cb3f:	40                   	inc    eax
c000cb40:	3c 5b                	cmp    al,0x5b
c000cb42:	75 90                	jne    c000cad4 <LogicalDisk::assignDriveLetter()+0x3c>
c000cb44:	31 c0                	xor    eax,eax
c000cb46:	83 c4 14             	add    esp,0x14
c000cb49:	5b                   	pop    ebx
c000cb4a:	5e                   	pop    esi
c000cb4b:	5f                   	pop    edi
c000cb4c:	5d                   	pop    ebp
c000cb4d:	c3                   	ret    

c000cb4e <LogicalDisk::mount()>:
c000cb4e:	56                   	push   esi
c000cb4f:	53                   	push   ebx
c000cb50:	53                   	push   ebx
c000cb51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb55:	8b 1d 74 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c74
c000cb5b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cb65:	85 db                	test   ebx,ebx
c000cb67:	74 27                	je     c000cb90 <LogicalDisk::mount()+0x42>
c000cb69:	51                   	push   ecx
c000cb6a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cb71:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cb73:	83 e8 41             	sub    eax,0x41
c000cb76:	50                   	push   eax
c000cb77:	56                   	push   esi
c000cb78:	53                   	push   ebx
c000cb79:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cb7c:	83 c4 10             	add    esp,0x10
c000cb7f:	84 c0                	test   al,al
c000cb81:	74 08                	je     c000cb8b <LogicalDisk::mount()+0x3d>
c000cb83:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cb89:	eb 07                	jmp    c000cb92 <LogicalDisk::mount()+0x44>
c000cb8b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cb8e:	eb d5                	jmp    c000cb65 <LogicalDisk::mount()+0x17>
c000cb90:	31 c0                	xor    eax,eax
c000cb92:	5a                   	pop    edx
c000cb93:	5b                   	pop    ebx
c000cb94:	5e                   	pop    esi
c000cb95:	c3                   	ret    

c000cb96 <LogicalDisk::unmount()>:
c000cb96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb9a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cba4:	c3                   	ret    
c000cba5:	90                   	nop

c000cba6 <LogicalDisk::eject()>:
c000cba6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbaa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cbb0:	8b 10                	mov    edx,DWORD PTR [eax]
c000cbb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cbb6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cbb9:	90                   	nop

c000cbba <LogicalDisk::unassignDriveLetter()>:
c000cbba:	57                   	push   edi
c000cbbb:	56                   	push   esi
c000cbbc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cbc0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cbc7:	84 c9                	test   cl,cl
c000cbc9:	75 0f                	jne    c000cbda <LogicalDisk::unassignDriveLetter()+0x20>
c000cbcb:	c7 44 24 0c bc e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e0bc
c000cbd3:	5e                   	pop    esi
c000cbd4:	5f                   	pop    edi
c000cbd5:	e9 91 35 00 00       	jmp    c001016b <KePanic(char const*)>
c000cbda:	83 e9 41             	sub    ecx,0x41
c000cbdd:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cbe4:	b8 01 00 00 00       	mov    eax,0x1
c000cbe9:	c7 04 8d e0 30 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdcf20],0x0
c000cbf4:	d3 e0                	shl    eax,cl
c000cbf6:	89 c7                	mov    edi,eax
c000cbf8:	f7 d0                	not    eax
c000cbfa:	c1 ff 1f             	sar    edi,0x1f
c000cbfd:	21 05 c0 30 02 c0    	and    DWORD PTR ds:0xc00230c0,eax
c000cc03:	89 fe                	mov    esi,edi
c000cc05:	f7 d6                	not    esi
c000cc07:	21 35 c4 30 02 c0    	and    DWORD PTR ds:0xc00230c4,esi
c000cc0d:	5e                   	pop    esi
c000cc0e:	5f                   	pop    edi
c000cc0f:	c3                   	ret    

c000cc10 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cc10:	57                   	push   edi
c000cc11:	56                   	push   esi
c000cc12:	53                   	push   ebx
c000cc13:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc1b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc23:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc29:	77 41                	ja     c000cc6c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cc2b:	99                   	cdq    
c000cc2c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc32:	01 c8                	add    eax,ecx
c000cc34:	11 da                	adc    edx,ebx
c000cc36:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc3c:	19 d7                	sbb    edi,edx
c000cc3e:	72 33                	jb     c000cc73 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cc40:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc46:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc4c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc50:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc54:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc5a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc64:	5b                   	pop    ebx
c000cc65:	5e                   	pop    esi
c000cc66:	5f                   	pop    edi
c000cc67:	e9 4e 0a 00 00       	jmp    c000d6ba <VCache::read(unsigned long long, int, void*)>
c000cc6c:	b8 05 00 00 00       	mov    eax,0x5
c000cc71:	eb 05                	jmp    c000cc78 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cc73:	b8 07 00 00 00       	mov    eax,0x7
c000cc78:	5b                   	pop    ebx
c000cc79:	5e                   	pop    esi
c000cc7a:	5f                   	pop    edi
c000cc7b:	c3                   	ret    

c000cc7c <LogicalDisk::write(unsigned long long, int, void*)>:
c000cc7c:	57                   	push   edi
c000cc7d:	56                   	push   esi
c000cc7e:	53                   	push   ebx
c000cc7f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc87:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc8f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc95:	77 41                	ja     c000ccd8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cc97:	99                   	cdq    
c000cc98:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc9e:	01 c8                	add    eax,ecx
c000cca0:	11 da                	adc    edx,ebx
c000cca2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cca8:	19 d7                	sbb    edi,edx
c000ccaa:	72 33                	jb     c000ccdf <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ccac:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ccb2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ccb8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ccbc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ccc0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ccc6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cccc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccd0:	5b                   	pop    ebx
c000ccd1:	5e                   	pop    esi
c000ccd2:	5f                   	pop    edi
c000ccd3:	e9 cc 08 00 00       	jmp    c000d5a4 <VCache::write(unsigned long long, int, void*)>
c000ccd8:	b8 05 00 00 00       	mov    eax,0x5
c000ccdd:	eb 05                	jmp    c000cce4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ccdf:	b8 07 00 00 00       	mov    eax,0x7
c000cce4:	5b                   	pop    ebx
c000cce5:	5e                   	pop    esi
c000cce6:	5f                   	pop    edi
c000cce7:	c3                   	ret    

c000cce8 <Mouse::Mouse(char const*)>:
c000cce8:	83 ec 0c             	sub    esp,0xc
c000cceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccef:	83 ec 08             	sub    esp,0x8
c000ccf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf6:	50                   	push   eax
c000ccf7:	e8 c4 ed ff ff       	call   c000bac0 <Device::Device(char const*)>
c000ccfc:	83 c4 10             	add    esp,0x10
c000ccff:	ba 10 e1 01 c0       	mov    edx,0xc001e110
c000cd04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd08:	89 10                	mov    DWORD PTR [eax],edx
c000cd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd0e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cd18:	90                   	nop
c000cd19:	83 c4 0c             	add    esp,0xc
c000cd1c:	c3                   	ret    
c000cd1d:	90                   	nop
c000cd1e:	66 90                	xchg   ax,ax

c000cd20 <Mouse::~Mouse()>:
c000cd20:	83 ec 0c             	sub    esp,0xc
c000cd23:	ba 10 e1 01 c0       	mov    edx,0xc001e110
c000cd28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd2c:	89 10                	mov    DWORD PTR [eax],edx
c000cd2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd32:	83 ec 0c             	sub    esp,0xc
c000cd35:	50                   	push   eax
c000cd36:	e8 ef ea ff ff       	call   c000b82a <Device::~Device()>
c000cd3b:	83 c4 10             	add    esp,0x10
c000cd3e:	90                   	nop
c000cd3f:	83 c4 0c             	add    esp,0xc
c000cd42:	c3                   	ret    
c000cd43:	90                   	nop

c000cd44 <Mouse::~Mouse()>:
c000cd44:	83 ec 0c             	sub    esp,0xc
c000cd47:	83 ec 0c             	sub    esp,0xc
c000cd4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd4e:	e8 cd ff ff ff       	call   c000cd20 <Mouse::~Mouse()>
c000cd53:	83 c4 10             	add    esp,0x10
c000cd56:	83 ec 08             	sub    esp,0x8
c000cd59:	68 58 01 00 00       	push   0x158
c000cd5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd62:	e8 8b d6 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	83 c4 0c             	add    esp,0xc
c000cd6d:	c3                   	ret    

c000cd6e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cd6e:	55                   	push   ebp
c000cd6f:	57                   	push   edi
c000cd70:	56                   	push   esi
c000cd71:	53                   	push   ebx
c000cd72:	81 ec 28 01 00 00    	sub    esp,0x128
c000cd78:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cd7f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cd86:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cd8d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cd94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd98:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd9c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cda3:	e8 14 ee ff ff       	call   c000bbbc <Device::getName()>
c000cda8:	5a                   	pop    edx
c000cda9:	59                   	pop    ecx
c000cdaa:	50                   	push   eax
c000cdab:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cdaf:	55                   	push   ebp
c000cdb0:	e8 5b 38 ff ff       	call   c0000610 <strcpy>
c000cdb5:	5b                   	pop    ebx
c000cdb6:	58                   	pop    eax
c000cdb7:	68 34 e1 01 c0       	push   0xc001e134
c000cdbc:	55                   	push   ebp
c000cdbd:	e8 0e 3a ff ff       	call   c00007d0 <strcat>
c000cdc2:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cdc9:	e8 fb a9 ff ff       	call   c00077c9 <malloc>
c000cdce:	83 c4 0c             	add    esp,0xc
c000cdd1:	89 c3                	mov    ebx,eax
c000cdd3:	57                   	push   edi
c000cdd4:	56                   	push   esi
c000cdd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cddd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cde4:	55                   	push   ebp
c000cde5:	50                   	push   eax
c000cde6:	e8 f7 fb ff ff       	call   c000c9e2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cdeb:	83 c4 14             	add    esp,0x14
c000cdee:	53                   	push   ebx
c000cdef:	e8 a4 fc ff ff       	call   c000ca98 <LogicalDisk::assignDriveLetter()>
c000cdf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cdf7:	e8 52 fd ff ff       	call   c000cb4e <LogicalDisk::mount()>
c000cdfc:	58                   	pop    eax
c000cdfd:	5a                   	pop    edx
c000cdfe:	53                   	push   ebx
c000cdff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ce06:	e8 1d eb ff ff       	call   c000b928 <Device::addChild(Device*)>
c000ce0b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ce11:	5b                   	pop    ebx
c000ce12:	5e                   	pop    esi
c000ce13:	5f                   	pop    edi
c000ce14:	5d                   	pop    ebp
c000ce15:	c3                   	ret    

c000ce16 <createPartitionsForDisk(PhysicalDisk*)>:
c000ce16:	55                   	push   ebp
c000ce17:	57                   	push   edi
c000ce18:	56                   	push   esi
c000ce19:	53                   	push   ebx
c000ce1a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000ce20:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000ce27:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000ce2d:	3d 00 02 00 00       	cmp    eax,0x200
c000ce32:	74 27                	je     c000ce5b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ce34:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ce3a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ce40:	83 ec 10             	sub    esp,0x10
c000ce43:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ce47:	99                   	cdq    
c000ce48:	c1 e6 0a             	shl    esi,0xa
c000ce4b:	52                   	push   edx
c000ce4c:	89 fd                	mov    ebp,edi
c000ce4e:	50                   	push   eax
c000ce4f:	55                   	push   ebp
c000ce50:	56                   	push   esi
c000ce51:	e8 6a f2 00 00       	call   c001c0c0 <__udivdi3>
c000ce56:	e9 b1 00 00 00       	jmp    c000cf0c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce5b:	83 ec 0c             	sub    esp,0xc
c000ce5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce60:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ce64:	56                   	push   esi
c000ce65:	6a 01                	push   0x1
c000ce67:	6a 00                	push   0x0
c000ce69:	6a 00                	push   0x0
c000ce6b:	53                   	push   ebx
c000ce6c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ce6f:	83 c4 20             	add    esp,0x20
c000ce72:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ce7a:	75 0a                	jne    c000ce86 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ce7c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ce84:	74 2c                	je     c000ceb2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ce86:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce8c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce92:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce98:	83 ec 10             	sub    esp,0x10
c000ce9b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce9f:	89 f7                	mov    edi,esi
c000cea1:	c1 e0 0a             	shl    eax,0xa
c000cea4:	c1 ff 1f             	sar    edi,0x1f
c000cea7:	57                   	push   edi
c000cea8:	56                   	push   esi
c000cea9:	52                   	push   edx
c000ceaa:	50                   	push   eax
c000ceab:	e8 10 f2 00 00       	call   c001c0c0 <__udivdi3>
c000ceb0:	eb 5a                	jmp    c000cf0c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ceb2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ceb9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cec0:	83 e1 7f             	and    ecx,0x7f
c000cec3:	83 e0 7f             	and    eax,0x7f
c000cec6:	01 c1                	add    ecx,eax
c000cec8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cecf:	83 e0 7f             	and    eax,0x7f
c000ced2:	01 c1                	add    ecx,eax
c000ced4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cedb:	83 e0 7f             	and    eax,0x7f
c000cede:	00 c1                	add    cl,al
c000cee0:	74 41                	je     c000cf23 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000cee2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cee8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ceee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cef4:	83 ec 10             	sub    esp,0x10
c000cef7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cefb:	89 f7                	mov    edi,esi
c000cefd:	c1 e0 0a             	shl    eax,0xa
c000cf00:	c1 ff 1f             	sar    edi,0x1f
c000cf03:	57                   	push   edi
c000cf04:	56                   	push   esi
c000cf05:	52                   	push   edx
c000cf06:	50                   	push   eax
c000cf07:	e8 b4 f1 00 00       	call   c001c0c0 <__udivdi3>
c000cf0c:	83 c4 14             	add    esp,0x14
c000cf0f:	52                   	push   edx
c000cf10:	50                   	push   eax
c000cf11:	6a 00                	push   0x0
c000cf13:	6a 00                	push   0x0
c000cf15:	53                   	push   ebx
c000cf16:	e8 53 fe ff ff       	call   c000cd6e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000cf1b:	83 c4 20             	add    esp,0x20
c000cf1e:	e9 79 01 00 00       	jmp    c000d09c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cf23:	89 f0                	mov    eax,esi
c000cf25:	31 f6                	xor    esi,esi
c000cf27:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cf2e:	75 02                	jne    c000cf32 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cf30:	89 f1                	mov    ecx,esi
c000cf32:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cf39:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cf40:	c1 e2 08             	shl    edx,0x8
c000cf43:	c1 e7 10             	shl    edi,0x10
c000cf46:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cf4e:	09 fa                	or     edx,edi
c000cf50:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cf58:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cf5f:	83 c0 10             	add    eax,0x10
c000cf62:	09 fa                	or     edx,edi
c000cf64:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cf6b:	c1 e7 18             	shl    edi,0x18
c000cf6e:	09 fa                	or     edx,edi
c000cf70:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cf77:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cf7b:	c1 e7 10             	shl    edi,0x10
c000cf7e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cf85:	c1 e2 08             	shl    edx,0x8
c000cf88:	09 fa                	or     edx,edi
c000cf8a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cf91:	09 fa                	or     edx,edi
c000cf93:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cf9a:	c1 e7 18             	shl    edi,0x18
c000cf9d:	09 fa                	or     edx,edi
c000cf9f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cfa3:	46                   	inc    esi
c000cfa4:	83 fe 04             	cmp    esi,0x4
c000cfa7:	0f 85 7a ff ff ff    	jne    c000cf27 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cfad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfb1:	83 f0 01             	xor    eax,0x1
c000cfb4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cfb8:	75 57                	jne    c000d011 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cfba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cfbe:	83 f0 01             	xor    eax,0x1
c000cfc1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cfc5:	75 4a                	jne    c000d011 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cfc7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cfcb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cfd3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cfdb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cfe1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cfe7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cfed:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cff1:	89 f7                	mov    edi,esi
c000cff3:	c1 e0 0a             	shl    eax,0xa
c000cff6:	c1 ff 1f             	sar    edi,0x1f
c000cff9:	57                   	push   edi
c000cffa:	56                   	push   esi
c000cffb:	52                   	push   edx
c000cffc:	50                   	push   eax
c000cffd:	e8 be f0 00 00       	call   c001c0c0 <__udivdi3>
c000d002:	83 c4 10             	add    esp,0x10
c000d005:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d009:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d011:	84 c9                	test   cl,cl
c000d013:	74 53                	je     c000d068 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d015:	0f b6 c9             	movzx  ecx,cl
c000d018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d01c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d020:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d024:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d028:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d02c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d030:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d034:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d044:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d048:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d04c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d050:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d054:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d058:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d05c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d060:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d064:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d068:	31 ed                	xor    ebp,ebp
c000d06a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d06e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d072:	89 f8                	mov    eax,edi
c000d074:	09 f0                	or     eax,esi
c000d076:	74 1e                	je     c000d096 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d078:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d07c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d080:	89 d1                	mov    ecx,edx
c000d082:	09 c1                	or     ecx,eax
c000d084:	74 10                	je     c000d096 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d086:	83 ec 0c             	sub    esp,0xc
c000d089:	57                   	push   edi
c000d08a:	56                   	push   esi
c000d08b:	52                   	push   edx
c000d08c:	50                   	push   eax
c000d08d:	53                   	push   ebx
c000d08e:	e8 db fc ff ff       	call   c000cd6e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d093:	83 c4 20             	add    esp,0x20
c000d096:	45                   	inc    ebp
c000d097:	83 fd 04             	cmp    ebp,0x4
c000d09a:	75 ce                	jne    c000d06a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d09c:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d0a2:	5b                   	pop    ebx
c000d0a3:	5e                   	pop    esi
c000d0a4:	5f                   	pop    edi
c000d0a5:	5d                   	pop    ebp
c000d0a6:	c3                   	ret    
c000d0a7:	90                   	nop

c000d0a8 <Serial::Serial(char const*)>:
c000d0a8:	83 ec 0c             	sub    esp,0xc
c000d0ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0af:	83 ec 08             	sub    esp,0x8
c000d0b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b6:	50                   	push   eax
c000d0b7:	e8 04 ea ff ff       	call   c000bac0 <Device::Device(char const*)>
c000d0bc:	83 c4 10             	add    esp,0x10
c000d0bf:	ba 48 e1 01 c0       	mov    edx,0xc001e148
c000d0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c8:	89 10                	mov    DWORD PTR [eax],edx
c000d0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ce:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d0d8:	90                   	nop
c000d0d9:	83 c4 0c             	add    esp,0xc
c000d0dc:	c3                   	ret    
c000d0dd:	90                   	nop
c000d0de:	66 90                	xchg   ax,ax

c000d0e0 <Serial::~Serial()>:
c000d0e0:	83 ec 0c             	sub    esp,0xc
c000d0e3:	ba 48 e1 01 c0       	mov    edx,0xc001e148
c000d0e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0ec:	89 10                	mov    DWORD PTR [eax],edx
c000d0ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0f2:	83 ec 0c             	sub    esp,0xc
c000d0f5:	50                   	push   eax
c000d0f6:	e8 2f e7 ff ff       	call   c000b82a <Device::~Device()>
c000d0fb:	83 c4 10             	add    esp,0x10
c000d0fe:	90                   	nop
c000d0ff:	83 c4 0c             	add    esp,0xc
c000d102:	c3                   	ret    
c000d103:	90                   	nop

c000d104 <Serial::~Serial()>:
c000d104:	83 ec 0c             	sub    esp,0xc
c000d107:	83 ec 0c             	sub    esp,0xc
c000d10a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d10e:	e8 cd ff ff ff       	call   c000d0e0 <Serial::~Serial()>
c000d113:	83 c4 10             	add    esp,0x10
c000d116:	83 ec 08             	sub    esp,0x8
c000d119:	68 58 01 00 00       	push   0x158
c000d11e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d122:	e8 cb d2 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000d127:	83 c4 10             	add    esp,0x10
c000d12a:	83 c4 0c             	add    esp,0xc
c000d12d:	c3                   	ret    
c000d12e:	66 90                	xchg   ax,ax

c000d130 <Timer::Timer(char const*)>:
c000d130:	83 ec 0c             	sub    esp,0xc
c000d133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d137:	83 ec 08             	sub    esp,0x8
c000d13a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d13e:	50                   	push   eax
c000d13f:	e8 7c e9 ff ff       	call   c000bac0 <Device::Device(char const*)>
c000d144:	83 c4 10             	add    esp,0x10
c000d147:	ba 8c e1 01 c0       	mov    edx,0xc001e18c
c000d14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d150:	89 10                	mov    DWORD PTR [eax],edx
c000d152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d156:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d160:	90                   	nop
c000d161:	83 c4 0c             	add    esp,0xc
c000d164:	c3                   	ret    
c000d165:	90                   	nop
c000d166:	66 90                	xchg   ax,ax

c000d168 <Timer::~Timer()>:
c000d168:	83 ec 0c             	sub    esp,0xc
c000d16b:	ba 8c e1 01 c0       	mov    edx,0xc001e18c
c000d170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d174:	89 10                	mov    DWORD PTR [eax],edx
c000d176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d17a:	83 ec 0c             	sub    esp,0xc
c000d17d:	50                   	push   eax
c000d17e:	e8 a7 e6 ff ff       	call   c000b82a <Device::~Device()>
c000d183:	83 c4 10             	add    esp,0x10
c000d186:	90                   	nop
c000d187:	83 c4 0c             	add    esp,0xc
c000d18a:	c3                   	ret    
c000d18b:	90                   	nop

c000d18c <Timer::~Timer()>:
c000d18c:	83 ec 0c             	sub    esp,0xc
c000d18f:	83 ec 0c             	sub    esp,0xc
c000d192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d196:	e8 cd ff ff ff       	call   c000d168 <Timer::~Timer()>
c000d19b:	83 c4 10             	add    esp,0x10
c000d19e:	83 ec 08             	sub    esp,0x8
c000d1a1:	68 5c 01 00 00       	push   0x15c
c000d1a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1aa:	e8 43 d2 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000d1af:	83 c4 10             	add    esp,0x10
c000d1b2:	83 c4 0c             	add    esp,0xc
c000d1b5:	c3                   	ret    

c000d1b6 <Timer::read()>:
c000d1b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d1c0:	c3                   	ret    

c000d1c1 <setupTimer(int)>:
c000d1c1:	53                   	push   ebx
c000d1c2:	83 ec 14             	sub    esp,0x14
c000d1c5:	68 5c 01 00 00       	push   0x15c
c000d1ca:	e8 fa a5 ff ff       	call   c00077c9 <malloc>
c000d1cf:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1d2:	89 c3                	mov    ebx,eax
c000d1d4:	e8 57 e8 00 00       	call   c001ba30 <PIT::PIT()>
c000d1d9:	58                   	pop    eax
c000d1da:	5a                   	pop    edx
c000d1db:	53                   	push   ebx
c000d1dc:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c000d1e2:	e8 41 e7 ff ff       	call   c000b928 <Device::addChild(Device*)>
c000d1e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d1e9:	6a 00                	push   0x0
c000d1eb:	6a 00                	push   0x0
c000d1ed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d1f1:	53                   	push   ebx
c000d1f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d1f5:	89 d8                	mov    eax,ebx
c000d1f7:	83 c4 28             	add    esp,0x28
c000d1fa:	5b                   	pop    ebx
c000d1fb:	c3                   	ret    

c000d1fc <timerHandler(unsigned int)>:
c000d1fc:	56                   	push   esi
c000d1fd:	53                   	push   ebx
c000d1fe:	51                   	push   ecx
c000d1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d203:	01 05 4c 31 02 c0    	add    DWORD PTR ds:0xc002314c,eax
c000d209:	80 3d 7d 0b 02 c0 00 	cmp    BYTE PTR ds:0xc0020b7d,0x0
c000d210:	0f 84 4a 01 00 00    	je     c000d360 <timerHandler(unsigned int)+0x164>
c000d216:	fa                   	cli    
c000d217:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c000d21d:	83 ec 0c             	sub    esp,0xc
c000d220:	ff 05 24 3e 02 c0    	inc    DWORD PTR ds:0xc0023e24
c000d226:	68 38 3e 02 c0       	push   0xc0023e38
c000d22b:	e8 60 f4 00 00       	call   c001c690 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	84 c0                	test   al,al
c000d235:	0f 85 a1 00 00 00    	jne    c000d2dc <timerHandler(unsigned int)+0xe0>
c000d23b:	83 ec 0c             	sub    esp,0xc
c000d23e:	68 38 3e 02 c0       	push   0xc0023e38
c000d243:	e8 64 f4 00 00       	call   c001c6ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d248:	83 c4 10             	add    esp,0x10
c000d24b:	89 c6                	mov    esi,eax
c000d24d:	8d 76 00             	lea    esi,[esi+0x0]
c000d250:	83 ec 0c             	sub    esp,0xc
c000d253:	68 38 3e 02 c0       	push   0xc0023e38
c000d258:	e8 4f f4 00 00       	call   c001c6ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d25d:	c7 04 24 38 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e38
c000d264:	89 c3                	mov    ebx,eax
c000d266:	e8 49 f4 00 00       	call   c001c6b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d26b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d26e:	83 c4 10             	add    esp,0x10
c000d271:	3b 05 4c 31 02 c0    	cmp    eax,DWORD PTR ds:0xc002314c
c000d277:	77 23                	ja     c000d29c <timerHandler(unsigned int)+0xa0>
c000d279:	83 ec 0c             	sub    esp,0xc
c000d27c:	53                   	push   ebx
c000d27d:	e8 fe 69 00 00       	call   c0013c80 <unblockTask(ThreadControlBlock*)>
c000d282:	83 c4 10             	add    esp,0x10
c000d285:	39 de                	cmp    esi,ebx
c000d287:	75 27                	jne    c000d2b0 <timerHandler(unsigned int)+0xb4>
c000d289:	83 ec 0c             	sub    esp,0xc
c000d28c:	68 38 3e 02 c0       	push   0xc0023e38
c000d291:	e8 16 f4 00 00       	call   c001c6ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d296:	89 c6                	mov    esi,eax
c000d298:	eb 12                	jmp    c000d2ac <timerHandler(unsigned int)+0xb0>
c000d29a:	66 90                	xchg   ax,ax
c000d29c:	52                   	push   edx
c000d29d:	52                   	push   edx
c000d29e:	53                   	push   ebx
c000d29f:	68 38 3e 02 c0       	push   0xc0023e38
c000d2a4:	e8 c3 f4 00 00       	call   c001c76c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d2a9:	8d 76 00             	lea    esi,[esi+0x0]
c000d2ac:	83 c4 10             	add    esp,0x10
c000d2af:	90                   	nop
c000d2b0:	83 ec 0c             	sub    esp,0xc
c000d2b3:	68 38 3e 02 c0       	push   0xc0023e38
c000d2b8:	e8 d3 f3 00 00       	call   c001c690 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	84 c0                	test   al,al
c000d2c2:	75 18                	jne    c000d2dc <timerHandler(unsigned int)+0xe0>
c000d2c4:	83 ec 0c             	sub    esp,0xc
c000d2c7:	68 38 3e 02 c0       	push   0xc0023e38
c000d2cc:	e8 db f3 00 00       	call   c001c6ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2d1:	83 c4 10             	add    esp,0x10
c000d2d4:	39 f0                	cmp    eax,esi
c000d2d6:	0f 85 74 ff ff ff    	jne    c000d250 <timerHandler(unsigned int)+0x54>
c000d2dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d2e1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d2e5:	74 41                	je     c000d328 <timerHandler(unsigned int)+0x12c>
c000d2e7:	80 3d 7c 0b 02 c0 00 	cmp    BYTE PTR ds:0xc0020b7c,0x0
c000d2ee:	74 38                	je     c000d328 <timerHandler(unsigned int)+0x12c>
c000d2f0:	fa                   	cli    
c000d2f1:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c000d2f7:	a1 4c 31 02 c0       	mov    eax,ds:0xc002314c
c000d2fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d302:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d305:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d30b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d30e:	72 08                	jb     c000d318 <timerHandler(unsigned int)+0x11c>
c000d310:	e8 a7 64 00 00       	call   c00137bc <schedule()>
c000d315:	8d 76 00             	lea    esi,[esi+0x0]
c000d318:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000d31d:	48                   	dec    eax
c000d31e:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c000d323:	75 03                	jne    c000d328 <timerHandler(unsigned int)+0x12c>
c000d325:	fb                   	sti    
c000d326:	66 90                	xchg   ax,ax
c000d328:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c000d32d:	48                   	dec    eax
c000d32e:	a3 24 3e 02 c0       	mov    ds:0xc0023e24,eax
c000d333:	75 1b                	jne    c000d350 <timerHandler(unsigned int)+0x154>
c000d335:	83 3d 20 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e20,0x0
c000d33c:	74 12                	je     c000d350 <timerHandler(unsigned int)+0x154>
c000d33e:	c7 05 20 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e20,0x0
c000d348:	e8 6f 64 00 00       	call   c00137bc <schedule()>
c000d34d:	8d 76 00             	lea    esi,[esi+0x0]
c000d350:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c000d355:	48                   	dec    eax
c000d356:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c000d35b:	75 03                	jne    c000d360 <timerHandler(unsigned int)+0x164>
c000d35d:	fb                   	sti    
c000d35e:	66 90                	xchg   ax,ax
c000d360:	58                   	pop    eax
c000d361:	5b                   	pop    ebx
c000d362:	5e                   	pop    esi
c000d363:	c3                   	ret    

c000d364 <VCache::VCache(PhysicalDisk*)>:
c000d364:	53                   	push   ebx
c000d365:	83 ec 18             	sub    esp,0x18
c000d368:	ba bc e1 01 c0       	mov    edx,0xc001e1bc
c000d36d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d371:	89 10                	mov    DWORD PTR [eax],edx
c000d373:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d377:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d37e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d382:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d389:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d38d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d394:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d39b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d39f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d3a6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d3ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3b1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d3b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3bc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d3c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3c4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d3cb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d3d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3d6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d3da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3de:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d3e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3e6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d3ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ee:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d3f5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d3fd:	83 ec 0c             	sub    esp,0xc
c000d400:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d404:	e8 c0 a3 ff ff       	call   c00077c9 <malloc>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	89 c3                	mov    ebx,eax
c000d40e:	83 ec 0c             	sub    esp,0xc
c000d411:	53                   	push   ebx
c000d412:	e8 71 61 00 00       	call   c0013588 <Mutex::Mutex()>
c000d417:	83 c4 10             	add    esp,0x10
c000d41a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d41e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d421:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d425:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d429:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d42c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d430:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d437:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d43b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d445:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d448:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d44c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d452:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d458:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d45c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d45f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d466:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d46a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d46e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d474:	05 00 01 00 00       	add    eax,0x100
c000d479:	c1 e0 04             	shl    eax,0x4
c000d47c:	83 ec 0c             	sub    esp,0xc
c000d47f:	50                   	push   eax
c000d480:	e8 44 a3 ff ff       	call   c00077c9 <malloc>
c000d485:	83 c4 10             	add    esp,0x10
c000d488:	89 c2                	mov    edx,eax
c000d48a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d48e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d491:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d495:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d49c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4a0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d4a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d4a8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d4ae:	c1 e0 06             	shl    eax,0x6
c000d4b1:	83 ec 0c             	sub    esp,0xc
c000d4b4:	50                   	push   eax
c000d4b5:	e8 0f a3 ff ff       	call   c00077c9 <malloc>
c000d4ba:	83 c4 10             	add    esp,0x10
c000d4bd:	89 c2                	mov    edx,eax
c000d4bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4c3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d4c6:	90                   	nop
c000d4c7:	83 c4 18             	add    esp,0x18
c000d4ca:	5b                   	pop    ebx
c000d4cb:	c3                   	ret    

c000d4cc <VCache::invalidateReadBuffer()>:
c000d4cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d4d0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d4d6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d4da:	c3                   	ret    
c000d4db:	90                   	nop

c000d4dc <VCache::writeWriteBuffer()>:
c000d4dc:	53                   	push   ebx
c000d4dd:	83 ec 08             	sub    esp,0x8
c000d4e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4e4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d4e8:	74 1e                	je     c000d508 <VCache::writeWriteBuffer()+0x2c>
c000d4ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d4ed:	83 ec 0c             	sub    esp,0xc
c000d4f0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4f2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d4f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d4f8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d4fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4fe:	50                   	push   eax
c000d4ff:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d502:	83 c4 20             	add    esp,0x20
c000d505:	8d 76 00             	lea    esi,[esi+0x0]
c000d508:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d50f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d516:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d51a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d521:	83 c4 08             	add    esp,0x8
c000d524:	5b                   	pop    ebx
c000d525:	c3                   	ret    
c000d526:	66 90                	xchg   ax,ax

c000d528 <VCache::~VCache()>:
c000d528:	83 ec 0c             	sub    esp,0xc
c000d52b:	ba bc e1 01 c0       	mov    edx,0xc001e1bc
c000d530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d534:	89 10                	mov    DWORD PTR [eax],edx
c000d536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d53a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d53d:	84 c0                	test   al,al
c000d53f:	74 0f                	je     c000d550 <VCache::~VCache()+0x28>
c000d541:	83 ec 0c             	sub    esp,0xc
c000d544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d548:	e8 8f ff ff ff       	call   c000d4dc <VCache::writeWriteBuffer()>
c000d54d:	83 c4 10             	add    esp,0x10
c000d550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d554:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d557:	83 ec 0c             	sub    esp,0xc
c000d55a:	50                   	push   eax
c000d55b:	e8 79 a2 ff ff       	call   c00077d9 <free>
c000d560:	83 c4 10             	add    esp,0x10
c000d563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d567:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d56a:	83 ec 0c             	sub    esp,0xc
c000d56d:	50                   	push   eax
c000d56e:	e8 66 a2 ff ff       	call   c00077d9 <free>
c000d573:	83 c4 10             	add    esp,0x10
c000d576:	90                   	nop
c000d577:	83 c4 0c             	add    esp,0xc
c000d57a:	c3                   	ret    
c000d57b:	90                   	nop

c000d57c <VCache::~VCache()>:
c000d57c:	83 ec 0c             	sub    esp,0xc
c000d57f:	83 ec 0c             	sub    esp,0xc
c000d582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d586:	e8 9d ff ff ff       	call   c000d528 <VCache::~VCache()>
c000d58b:	83 c4 10             	add    esp,0x10
c000d58e:	83 ec 08             	sub    esp,0x8
c000d591:	6a 44                	push   0x44
c000d593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d597:	e8 56 ce ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000d59c:	83 c4 10             	add    esp,0x10
c000d59f:	83 c4 0c             	add    esp,0xc
c000d5a2:	c3                   	ret    
c000d5a3:	90                   	nop

c000d5a4 <VCache::write(unsigned long long, int, void*)>:
c000d5a4:	55                   	push   ebp
c000d5a5:	57                   	push   edi
c000d5a6:	56                   	push   esi
c000d5a7:	53                   	push   ebx
c000d5a8:	83 ec 1c             	sub    esp,0x1c
c000d5ab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d5af:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d5b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5b7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d5bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d5bf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d5c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d5c7:	31 c0                	xor    eax,eax
c000d5c9:	8d 76 00             	lea    esi,[esi+0x0]
c000d5cc:	39 e8                	cmp    eax,ebp
c000d5ce:	7d 18                	jge    c000d5e8 <VCache::write(unsigned long long, int, void*)+0x44>
c000d5d0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d5d3:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d5d9:	0f af c8             	imul   ecx,eax
c000d5dc:	89 ca                	mov    edx,ecx
c000d5de:	01 f2                	add    edx,esi
c000d5e0:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d5e2:	40                   	inc    eax
c000d5e3:	eb e7                	jmp    c000d5cc <VCache::write(unsigned long long, int, void*)+0x28>
c000d5e5:	8d 76 00             	lea    esi,[esi+0x0]
c000d5e8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d5ec:	74 0a                	je     c000d5f8 <VCache::write(unsigned long long, int, void*)+0x54>
c000d5ee:	53                   	push   ebx
c000d5ef:	e8 d8 fe ff ff       	call   c000d4cc <VCache::invalidateReadBuffer()>
c000d5f4:	58                   	pop    eax
c000d5f5:	8d 76 00             	lea    esi,[esi+0x0]
c000d5f8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d5fc:	74 5a                	je     c000d658 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d5fe:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d601:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d605:	89 f8                	mov    eax,edi
c000d607:	99                   	cdq    
c000d608:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d60b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d60e:	31 c1                	xor    ecx,eax
c000d610:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d614:	31 d0                	xor    eax,edx
c000d616:	09 c1                	or     ecx,eax
c000d618:	75 32                	jne    c000d64c <VCache::write(unsigned long long, int, void*)+0xa8>
c000d61a:	83 fd 01             	cmp    ebp,0x1
c000d61d:	75 2d                	jne    c000d64c <VCache::write(unsigned long long, int, void*)+0xa8>
c000d61f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d622:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d628:	0f af f9             	imul   edi,ecx
c000d62b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d62e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d630:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d633:	40                   	inc    eax
c000d634:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d637:	83 f8 40             	cmp    eax,0x40
c000d63a:	75 74                	jne    c000d6b0 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d63c:	83 ec 0c             	sub    esp,0xc
c000d63f:	53                   	push   ebx
c000d640:	e8 97 fe ff ff       	call   c000d4dc <VCache::writeWriteBuffer()>
c000d645:	83 c4 10             	add    esp,0x10
c000d648:	eb 66                	jmp    c000d6b0 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d64a:	66 90                	xchg   ax,ax
c000d64c:	83 ec 0c             	sub    esp,0xc
c000d64f:	53                   	push   ebx
c000d650:	e8 87 fe ff ff       	call   c000d4dc <VCache::writeWriteBuffer()>
c000d655:	83 c4 10             	add    esp,0x10
c000d658:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d65b:	83 fd 3f             	cmp    ebp,0x3f
c000d65e:	7f 24                	jg     c000d684 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d660:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d664:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d667:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d66a:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d66e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d672:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d675:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d678:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d67e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d680:	eb 2e                	jmp    c000d6b0 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d682:	66 90                	xchg   ax,ax
c000d684:	8b 10                	mov    edx,DWORD PTR [eax]
c000d686:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d68a:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d68e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d692:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d696:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d69a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d69e:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d6a2:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d6a5:	83 c4 1c             	add    esp,0x1c
c000d6a8:	5b                   	pop    ebx
c000d6a9:	5e                   	pop    esi
c000d6aa:	5f                   	pop    edi
c000d6ab:	5d                   	pop    ebp
c000d6ac:	ff e0                	jmp    eax
c000d6ae:	66 90                	xchg   ax,ax
c000d6b0:	83 c4 1c             	add    esp,0x1c
c000d6b3:	31 c0                	xor    eax,eax
c000d6b5:	5b                   	pop    ebx
c000d6b6:	5e                   	pop    esi
c000d6b7:	5f                   	pop    edi
c000d6b8:	5d                   	pop    ebp
c000d6b9:	c3                   	ret    

c000d6ba <VCache::read(unsigned long long, int, void*)>:
c000d6ba:	55                   	push   ebp
c000d6bb:	57                   	push   edi
c000d6bc:	56                   	push   esi
c000d6bd:	53                   	push   ebx
c000d6be:	83 ec 1c             	sub    esp,0x1c
c000d6c1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d6c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d6c9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d6cd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d6d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6d5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d6d9:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d6dd:	74 0d                	je     c000d6ec <VCache::read(unsigned long long, int, void*)+0x32>
c000d6df:	83 ec 0c             	sub    esp,0xc
c000d6e2:	55                   	push   ebp
c000d6e3:	e8 f4 fd ff ff       	call   c000d4dc <VCache::writeWriteBuffer()>
c000d6e8:	83 c4 10             	add    esp,0x10
c000d6eb:	90                   	nop
c000d6ec:	83 ec 0c             	sub    esp,0xc
c000d6ef:	55                   	push   ebp
c000d6f0:	e8 d7 fd ff ff       	call   c000d4cc <VCache::invalidateReadBuffer()>
c000d6f5:	83 c4 0c             	add    esp,0xc
c000d6f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6fb:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d701:	6a 00                	push   0x0
c000d703:	53                   	push   ebx
c000d704:	e8 d7 2d ff ff       	call   c00004e0 <memset>
c000d709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d70c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d710:	8b 10                	mov    edx,DWORD PTR [eax]
c000d712:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d716:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d71a:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d71e:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d722:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d726:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d729:	83 c4 2c             	add    esp,0x2c
c000d72c:	5b                   	pop    ebx
c000d72d:	5e                   	pop    esi
c000d72e:	5f                   	pop    edi
c000d72f:	5d                   	pop    ebp
c000d730:	ff e0                	jmp    eax

c000d732 <Video::putrect(int, int, int, int, unsigned int)>:
c000d732:	55                   	push   ebp
c000d733:	57                   	push   edi
c000d734:	56                   	push   esi
c000d735:	53                   	push   ebx
c000d736:	83 ec 1c             	sub    esp,0x1c
c000d739:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d73d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d741:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d745:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d749:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d74d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d751:	01 df                	add    edi,ebx
c000d753:	39 fb                	cmp    ebx,edi
c000d755:	7d 1f                	jge    c000d776 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d757:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d75b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d75f:	7d 12                	jge    c000d773 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d761:	8b 16                	mov    edx,DWORD PTR [esi]
c000d763:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d767:	53                   	push   ebx
c000d768:	55                   	push   ebp
c000d769:	45                   	inc    ebp
c000d76a:	56                   	push   esi
c000d76b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d76e:	83 c4 10             	add    esp,0x10
c000d771:	eb e8                	jmp    c000d75b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d773:	43                   	inc    ebx
c000d774:	eb dd                	jmp    c000d753 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d776:	83 c4 1c             	add    esp,0x1c
c000d779:	5b                   	pop    ebx
c000d77a:	5e                   	pop    esi
c000d77b:	5f                   	pop    edi
c000d77c:	5d                   	pop    ebp
c000d77d:	c3                   	ret    

c000d77e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d77e:	55                   	push   ebp
c000d77f:	57                   	push   edi
c000d780:	31 ff                	xor    edi,edi
c000d782:	56                   	push   esi
c000d783:	53                   	push   ebx
c000d784:	83 ec 1c             	sub    esp,0x1c
c000d787:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d78b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d78f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d796:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d79f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d7a3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d7a7:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d7aa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d7ae:	01 f9                	add    ecx,edi
c000d7b0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d7b4:	7d 2f                	jge    c000d7e5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d7b6:	31 f6                	xor    esi,esi
c000d7b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d7bc:	01 f2                	add    edx,esi
c000d7be:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d7c2:	7d 1a                	jge    c000d7de <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d7c4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7c7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d7ca:	46                   	inc    esi
c000d7cb:	51                   	push   ecx
c000d7cc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d7d0:	52                   	push   edx
c000d7d1:	55                   	push   ebp
c000d7d2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d7d5:	83 c4 10             	add    esp,0x10
c000d7d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7dc:	eb da                	jmp    c000d7b8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d7de:	47                   	inc    edi
c000d7df:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d7e3:	eb c5                	jmp    c000d7aa <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d7e5:	83 c4 1c             	add    esp,0x1c
c000d7e8:	5b                   	pop    ebx
c000d7e9:	5e                   	pop    esi
c000d7ea:	5f                   	pop    edi
c000d7eb:	5d                   	pop    ebp
c000d7ec:	c3                   	ret    
c000d7ed:	90                   	nop

c000d7ee <Video::blit(unsigned int*, int, int, int, int)>:
c000d7ee:	55                   	push   ebp
c000d7ef:	57                   	push   edi
c000d7f0:	56                   	push   esi
c000d7f1:	53                   	push   ebx
c000d7f2:	83 ec 1c             	sub    esp,0x1c
c000d7f5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d7f9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d7fd:	85 c0                	test   eax,eax
c000d7ff:	79 02                	jns    c000d803 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d801:	31 c0                	xor    eax,eax
c000d803:	c1 e0 02             	shl    eax,0x2
c000d806:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d80a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d80e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d812:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d816:	39 d8                	cmp    eax,ebx
c000d818:	7e 49                	jle    c000d863 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d81a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d820:	7c 41                	jl     c000d863 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d822:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d826:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d82a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d82e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d832:	39 f9                	cmp    ecx,edi
c000d834:	7e 22                	jle    c000d858 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d836:	83 c5 04             	add    ebp,0x4
c000d839:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d83f:	7c 14                	jl     c000d855 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d841:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d843:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d846:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d84a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d84e:	56                   	push   esi
c000d84f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d852:	83 c4 10             	add    esp,0x10
c000d855:	47                   	inc    edi
c000d856:	eb d2                	jmp    c000d82a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d858:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d85c:	43                   	inc    ebx
c000d85d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d861:	eb ab                	jmp    c000d80e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d863:	83 c4 1c             	add    esp,0x1c
c000d866:	5b                   	pop    ebx
c000d867:	5e                   	pop    esi
c000d868:	5f                   	pop    edi
c000d869:	5d                   	pop    ebp
c000d86a:	c3                   	ret    
c000d86b:	90                   	nop

c000d86c <Video::clearScreen(unsigned int)>:
c000d86c:	57                   	push   edi
c000d86d:	56                   	push   esi
c000d86e:	53                   	push   ebx
c000d86f:	31 db                	xor    ebx,ebx
c000d871:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d875:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d87b:	7e 1f                	jle    c000d89c <Video::clearScreen(unsigned int)+0x30>
c000d87d:	31 ff                	xor    edi,edi
c000d87f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d885:	7e 12                	jle    c000d899 <Video::clearScreen(unsigned int)+0x2d>
c000d887:	8b 06                	mov    eax,DWORD PTR [esi]
c000d889:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d88d:	53                   	push   ebx
c000d88e:	57                   	push   edi
c000d88f:	47                   	inc    edi
c000d890:	56                   	push   esi
c000d891:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d894:	83 c4 10             	add    esp,0x10
c000d897:	eb e6                	jmp    c000d87f <Video::clearScreen(unsigned int)+0x13>
c000d899:	43                   	inc    ebx
c000d89a:	eb d9                	jmp    c000d875 <Video::clearScreen(unsigned int)+0x9>
c000d89c:	5b                   	pop    ebx
c000d89d:	5e                   	pop    esi
c000d89e:	5f                   	pop    edi
c000d89f:	c3                   	ret    

c000d8a0 <Video::putpixel(int, int, unsigned int)>:
c000d8a0:	c7 44 24 04 c4 e1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e1c4
c000d8a8:	e9 be 28 00 00       	jmp    c001016b <KePanic(char const*)>
c000d8ad:	90                   	nop

c000d8ae <Video::Video(char const*)>:
c000d8ae:	83 ec 0c             	sub    esp,0xc
c000d8b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8b5:	83 ec 08             	sub    esp,0x8
c000d8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8bc:	50                   	push   eax
c000d8bd:	e8 fe e1 ff ff       	call   c000bac0 <Device::Device(char const*)>
c000d8c2:	83 c4 10             	add    esp,0x10
c000d8c5:	ba 34 e2 01 c0       	mov    edx,0xc001e234
c000d8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8ce:	89 10                	mov    DWORD PTR [eax],edx
c000d8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8d4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d8de:	90                   	nop
c000d8df:	83 c4 0c             	add    esp,0xc
c000d8e2:	c3                   	ret    
c000d8e3:	90                   	nop

c000d8e4 <Video::~Video()>:
c000d8e4:	83 ec 0c             	sub    esp,0xc
c000d8e7:	ba 34 e2 01 c0       	mov    edx,0xc001e234
c000d8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8f0:	89 10                	mov    DWORD PTR [eax],edx
c000d8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8f6:	83 ec 0c             	sub    esp,0xc
c000d8f9:	50                   	push   eax
c000d8fa:	e8 2b df ff ff       	call   c000b82a <Device::~Device()>
c000d8ff:	83 c4 10             	add    esp,0x10
c000d902:	90                   	nop
c000d903:	83 c4 0c             	add    esp,0xc
c000d906:	c3                   	ret    
c000d907:	90                   	nop

c000d908 <Video::~Video()>:
c000d908:	83 ec 0c             	sub    esp,0xc
c000d90b:	83 ec 0c             	sub    esp,0xc
c000d90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d912:	e8 cd ff ff ff       	call   c000d8e4 <Video::~Video()>
c000d917:	83 c4 10             	add    esp,0x10
c000d91a:	83 ec 08             	sub    esp,0x8
c000d91d:	68 64 01 00 00       	push   0x164
c000d922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d926:	e8 c7 ca ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c000d92b:	83 c4 10             	add    esp,0x10
c000d92e:	83 c4 0c             	add    esp,0xc
c000d931:	c3                   	ret    

c000d932 <Video::isMonochrome()>:
c000d932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d936:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d93c:	c3                   	ret    
c000d93d:	90                   	nop

c000d93e <Video::getWidth()>:
c000d93e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d942:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d948:	c3                   	ret    
c000d949:	90                   	nop

c000d94a <Video::getHeight()>:
c000d94a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d94e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d954:	c3                   	ret    
c000d955:	90                   	nop

c000d956 <Video::drawCursor(int, int, unsigned char*, int)>:
c000d956:	55                   	push   ebp
c000d957:	57                   	push   edi
c000d958:	56                   	push   esi
c000d959:	53                   	push   ebx
c000d95a:	83 ec 2c             	sub    esp,0x2c
c000d95d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d961:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d965:	83 f8 01             	cmp    eax,0x1
c000d968:	19 c9                	sbb    ecx,ecx
c000d96a:	31 db                	xor    ebx,ebx
c000d96c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d970:	89 cd                	mov    ebp,ecx
c000d972:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d97a:	f7 d5                	not    ebp
c000d97c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d982:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d986:	01 d8                	add    eax,ebx
c000d988:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d98c:	56                   	push   esi
c000d98d:	e8 b8 ff ff ff       	call   c000d94a <Video::getHeight()>
c000d992:	59                   	pop    ecx
c000d993:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d997:	7e 70                	jle    c000da09 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d999:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d99d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d9a1:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d9a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d9a8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d9ac:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d9b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9b7:	89 f8                	mov    eax,edi
c000d9b9:	83 c0 20             	add    eax,0x20
c000d9bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d9c0:	56                   	push   esi
c000d9c1:	e8 78 ff ff ff       	call   c000d93e <Video::getWidth()>
c000d9c6:	5a                   	pop    edx
c000d9c7:	39 c7                	cmp    edi,eax
c000d9c9:	7d 34                	jge    c000d9ff <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d9cb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d9d0:	74 05                	je     c000d9d7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d9d2:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9d4:	55                   	push   ebp
c000d9d5:	eb 0d                	jmp    c000d9e4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d9d7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000d9dc:	74 12                	je     c000d9f0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000d9de:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d9e8:	57                   	push   edi
c000d9e9:	56                   	push   esi
c000d9ea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d9ed:	83 c4 10             	add    esp,0x10
c000d9f0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000d9f4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000d9f8:	47                   	inc    edi
c000d9f9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000d9fd:	75 c1                	jne    c000d9c0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000d9ff:	43                   	inc    ebx
c000da00:	83 fb 20             	cmp    ebx,0x20
c000da03:	0f 85 79 ff ff ff    	jne    c000d982 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000da09:	83 c4 2c             	add    esp,0x2c
c000da0c:	5b                   	pop    ebx
c000da0d:	5e                   	pop    esi
c000da0e:	5f                   	pop    edi
c000da0f:	5d                   	pop    ebp
c000da10:	c3                   	ret    
c000da11:	90                   	nop

c000da12 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000da12:	55                   	push   ebp
c000da13:	57                   	push   edi
c000da14:	56                   	push   esi
c000da15:	53                   	push   ebx
c000da16:	83 ec 28             	sub    esp,0x28
c000da19:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000da1d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000da21:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000da25:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000da29:	c1 e6 08             	shl    esi,0x8
c000da2c:	01 c6                	add    esi,eax
c000da2e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000da32:	c1 e0 08             	shl    eax,0x8
c000da35:	01 d0                	add    eax,edx
c000da37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da3f:	0f af c6             	imul   eax,esi
c000da42:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000da49:	50                   	push   eax
c000da4a:	e8 7a 9d ff ff       	call   c00077c9 <malloc>
c000da4f:	83 c4 10             	add    esp,0x10
c000da52:	89 c7                	mov    edi,eax
c000da54:	85 c0                	test   eax,eax
c000da56:	75 10                	jne    c000da68 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	68 e5 e1 01 c0       	push   0xc001e1e5
c000da60:	e8 06 27 00 00       	call   c001016b <KePanic(char const*)>
c000da65:	83 c4 10             	add    esp,0x10
c000da68:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000da6b:	ba 12 00 00 00       	mov    edx,0x12
c000da70:	84 c0                	test   al,al
c000da72:	74 11                	je     c000da85 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000da74:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000da78:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000da7c:	c1 fa 03             	sar    edx,0x3
c000da7f:	0f af d1             	imul   edx,ecx
c000da82:	83 c2 12             	add    edx,0x12
c000da85:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000da89:	74 04                	je     c000da8f <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000da8b:	85 f6                	test   esi,esi
c000da8d:	75 12                	jne    c000daa1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000da8f:	83 ec 0c             	sub    esp,0xc
c000da92:	68 f5 e1 01 c0       	push   0xc001e1f5
c000da97:	e8 4c ca ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000da9c:	e9 b8 00 00 00       	jmp    c000db59 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000daa1:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000daa5:	80 f9 02             	cmp    cl,0x2
c000daa8:	0f 85 96 00 00 00    	jne    c000db44 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000daae:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dab3:	75 0e                	jne    c000dac3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dab5:	84 c0                	test   al,al
c000dab7:	75 0a                	jne    c000dac3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dab9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dabc:	83 e8 18             	sub    eax,0x18
c000dabf:	a8 f7                	test   al,0xf7
c000dac1:	74 0a                	je     c000dacd <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dac3:	83 ec 0c             	sub    esp,0xc
c000dac6:	68 0a e2 01 c0       	push   0xc001e20a
c000dacb:	eb 7f                	jmp    c000db4c <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dacd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dad5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dadd:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dae1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dae9:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000daed:	75 0c                	jne    c000dafb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000daef:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000daf4:	c1 e0 18             	shl    eax,0x18
c000daf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dafb:	45                   	inc    ebp
c000dafc:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000db01:	c1 e1 10             	shl    ecx,0x10
c000db04:	89 c8                	mov    eax,ecx
c000db06:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000db0b:	c1 e1 08             	shl    ecx,0x8
c000db0e:	09 c1                	or     ecx,eax
c000db10:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000db14:	09 c1                	or     ecx,eax
c000db16:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000db1a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000db1e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000db22:	c1 f8 03             	sar    eax,0x3
c000db25:	01 c2                	add    edx,eax
c000db27:	89 e8                	mov    eax,ebp
c000db29:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000db2d:	39 c6                	cmp    esi,eax
c000db2f:	7f b0                	jg     c000dae1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000db31:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000db35:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db39:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000db3c:	7e 22                	jle    c000db60 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000db3e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000db42:	eb 99                	jmp    c000dadd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000db44:	50                   	push   eax
c000db45:	50                   	push   eax
c000db46:	51                   	push   ecx
c000db47:	68 18 e2 01 c0       	push   0xc001e218
c000db4c:	e8 97 c9 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000db51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db54:	e8 80 9c ff ff       	call   c00077d9 <free>
c000db59:	83 c4 10             	add    esp,0x10
c000db5c:	31 ff                	xor    edi,edi
c000db5e:	eb 0f                	jmp    c000db6f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000db60:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000db64:	89 30                	mov    DWORD PTR [eax],esi
c000db66:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db6a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db6d:	89 30                	mov    DWORD PTR [eax],esi
c000db6f:	83 c4 1c             	add    esp,0x1c
c000db72:	89 f8                	mov    eax,edi
c000db74:	5b                   	pop    ebx
c000db75:	5e                   	pop    esi
c000db76:	5f                   	pop    edi
c000db77:	5d                   	pop    ebp
c000db78:	c3                   	ret    
c000db79:	90                   	nop

c000db7a <Video::putTGA(int, int, unsigned char*, int)>:
c000db7a:	55                   	push   ebp
c000db7b:	57                   	push   edi
c000db7c:	56                   	push   esi
c000db7d:	53                   	push   ebx
c000db7e:	83 ec 28             	sub    esp,0x28
c000db81:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000db85:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db89:	50                   	push   eax
c000db8a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db8e:	50                   	push   eax
c000db8f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db93:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db97:	56                   	push   esi
c000db98:	e8 75 fe ff ff       	call   c000da12 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000db9d:	83 c4 20             	add    esp,0x20
c000dba0:	85 c0                	test   eax,eax
c000dba2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dba6:	74 35                	je     c000dbdd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dba8:	89 c7                	mov    edi,eax
c000dbaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dbae:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dbb2:	39 d8                	cmp    eax,ebx
c000dbb4:	7e 27                	jle    c000dbdd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dbb6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dbba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbbe:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dbc2:	39 e8                	cmp    eax,ebp
c000dbc4:	7e 14                	jle    c000dbda <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dbc6:	8b 06                	mov    eax,DWORD PTR [esi]
c000dbc8:	83 c7 04             	add    edi,0x4
c000dbcb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dbce:	53                   	push   ebx
c000dbcf:	55                   	push   ebp
c000dbd0:	45                   	inc    ebp
c000dbd1:	56                   	push   esi
c000dbd2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dbd5:	83 c4 10             	add    esp,0x10
c000dbd8:	eb e0                	jmp    c000dbba <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dbda:	43                   	inc    ebx
c000dbdb:	eb cd                	jmp    c000dbaa <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dbdd:	83 c4 1c             	add    esp,0x1c
c000dbe0:	5b                   	pop    ebx
c000dbe1:	5e                   	pop    esi
c000dbe2:	5f                   	pop    edi
c000dbe3:	5d                   	pop    ebp
c000dbe4:	c3                   	ret    
c000dbe5:	66 90                	xchg   ax,ax
c000dbe7:	90                   	nop

c000dbe8 <ACPI::close(int, int, void*)>:
c000dbe8:	83 ec 1c             	sub    esp,0x1c
c000dbeb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dbf3:	74 0b                	je     c000dc00 <ACPI::close(int, int, void*)+0x18>
c000dbf5:	b8 00 00 00 00       	mov    eax,0x0
c000dbfa:	e9 9d 00 00 00       	jmp    c000dc9c <ACPI::close(int, int, void*)+0xb4>
c000dbff:	90                   	nop
c000dc00:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dc05:	75 29                	jne    c000dc30 <ACPI::close(int, int, void*)+0x48>
c000dc07:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c000dc0c:	85 c0                	test   eax,eax
c000dc0e:	74 08                	je     c000dc18 <ACPI::close(int, int, void*)+0x30>
c000dc10:	a1 68 31 02 c0       	mov    eax,ds:0xc0023168
c000dc15:	ff d0                	call   eax
c000dc17:	90                   	nop
c000dc18:	83 ec 0c             	sub    esp,0xc
c000dc1b:	68 74 e2 01 c0       	push   0xc001e274
c000dc20:	e8 46 25 00 00       	call   c001016b <KePanic(char const*)>
c000dc25:	83 c4 10             	add    esp,0x10
c000dc28:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc2d:	eb 6d                	jmp    c000dc9c <ACPI::close(int, int, void*)+0xb4>
c000dc2f:	90                   	nop
c000dc30:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dc35:	75 5d                	jne    c000dc94 <ACPI::close(int, int, void*)+0xac>
c000dc37:	a1 64 31 02 c0       	mov    eax,ds:0xc0023164
c000dc3c:	85 c0                	test   eax,eax
c000dc3e:	74 08                	je     c000dc48 <ACPI::close(int, int, void*)+0x60>
c000dc40:	a1 64 31 02 c0       	mov    eax,ds:0xc0023164
c000dc45:	ff d0                	call   eax
c000dc47:	90                   	nop
c000dc48:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dc4d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc50:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dc54:	25 ff 00 00 00       	and    eax,0xff
c000dc59:	83 e0 02             	and    eax,0x2
c000dc5c:	74 1e                	je     c000dc7c <ACPI::close(int, int, void*)+0x94>
c000dc5e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dc65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc69:	89 c2                	mov    edx,eax
c000dc6b:	ec                   	in     al,dx
c000dc6c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dc70:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dc74:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dc78:	eb d6                	jmp    c000dc50 <ACPI::close(int, int, void*)+0x68>
c000dc7a:	66 90                	xchg   ax,ax
c000dc7c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dc83:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dc88:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dc8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc90:	ee                   	out    dx,al
c000dc91:	8d 76 00             	lea    esi,[esi+0x0]
c000dc94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc99:	8d 76 00             	lea    esi,[esi+0x0]
c000dc9c:	83 c4 1c             	add    esp,0x1c
c000dc9f:	c3                   	ret    

c000dca0 <findRSDP()>:
c000dca0:	83 ec 1c             	sub    esp,0x1c
c000dca3:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000dca8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dcae:	83 e0 04             	and    eax,0x4
c000dcb1:	84 c0                	test   al,al
c000dcb3:	75 07                	jne    c000dcbc <findRSDP()+0x1c>
c000dcb5:	b8 00 00 00 00       	mov    eax,0x0
c000dcba:	eb 70                	jmp    c000dd2c <findRSDP()+0x8c>
c000dcbc:	a1 a8 0b 02 c0       	mov    eax,ds:0xc0020ba8
c000dcc1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dcc6:	7f 1c                	jg     c000dce4 <findRSDP()+0x44>
c000dcc8:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000dccd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dcd3:	83 e2 fb             	and    edx,0xfffffffb
c000dcd6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dcdc:	b8 00 00 00 00       	mov    eax,0x0
c000dce1:	eb 49                	jmp    c000dd2c <findRSDP()+0x8c>
c000dce3:	90                   	nop
c000dce4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dcec:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dcf4:	77 2e                	ja     c000dd24 <findRSDP()+0x84>
c000dcf6:	83 ec 04             	sub    esp,0x4
c000dcf9:	6a 08                	push   0x8
c000dcfb:	68 0f e3 01 c0       	push   0xc001e30f
c000dd00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd04:	e8 97 26 ff ff       	call   c00003a0 <memcmp>
c000dd09:	83 c4 10             	add    esp,0x10
c000dd0c:	85 c0                	test   eax,eax
c000dd0e:	0f 94 c0             	sete   al
c000dd11:	84 c0                	test   al,al
c000dd13:	74 07                	je     c000dd1c <findRSDP()+0x7c>
c000dd15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd19:	eb 11                	jmp    c000dd2c <findRSDP()+0x8c>
c000dd1b:	90                   	nop
c000dd1c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dd21:	eb c9                	jmp    c000dcec <findRSDP()+0x4c>
c000dd23:	90                   	nop
c000dd24:	b8 00 00 00 00       	mov    eax,0x0
c000dd29:	8d 76 00             	lea    esi,[esi+0x0]
c000dd2c:	83 c4 1c             	add    esp,0x1c
c000dd2f:	c3                   	ret    

c000dd30 <loadACPITables(unsigned char*)>:
c000dd30:	57                   	push   edi
c000dd31:	56                   	push   esi
c000dd32:	53                   	push   ebx
c000dd33:	83 ec 60             	sub    esp,0x60
c000dd36:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000dd3b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd41:	83 e0 04             	and    eax,0x4
c000dd44:	84 c0                	test   al,al
c000dd46:	0f 84 3c 02 00 00    	je     c000df88 <loadACPITables(unsigned char*)+0x258>
c000dd4c:	a0 80 33 02 c0       	mov    al,ds:0xc0023380
c000dd51:	84 c0                	test   al,al
c000dd53:	74 77                	je     c000ddcc <loadACPITables(unsigned char*)+0x9c>
c000dd55:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd59:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dd5d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd64:	83 e8 24             	sub    eax,0x24
c000dd67:	c1 e8 03             	shr    eax,0x3
c000dd6a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dd6e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dd76:	66 90                	xchg   ax,ax
c000dd78:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd7c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dd80:	0f 8d b6 00 00 00    	jge    c000de3c <loadACPITables(unsigned char*)+0x10c>
c000dd86:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd8a:	83 c0 24             	add    eax,0x24
c000dd8d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dd91:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dd95:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dd99:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd9d:	c1 e0 03             	shl    eax,0x3
c000dda0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dda4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dda8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ddab:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddad:	89 c1                	mov    ecx,eax
c000ddaf:	a1 6c 31 02 c0       	mov    eax,ds:0xc002316c
c000ddb4:	8d 50 01             	lea    edx,[eax+0x1]
c000ddb7:	89 15 6c 31 02 c0    	mov    DWORD PTR ds:0xc002316c,edx
c000ddbd:	89 ca                	mov    edx,ecx
c000ddbf:	89 14 c5 84 31 02 c0 	mov    DWORD PTR [eax*8-0x3ffdce7c],edx
c000ddc6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000ddca:	eb ac                	jmp    c000dd78 <loadACPITables(unsigned char*)+0x48>
c000ddcc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddd0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddd4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ddd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dddb:	83 e8 24             	sub    eax,0x24
c000ddde:	c1 e8 02             	shr    eax,0x2
c000dde1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dde5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000dded:	8d 76 00             	lea    esi,[esi+0x0]
c000ddf0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ddf4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ddf8:	7d 42                	jge    c000de3c <loadACPITables(unsigned char*)+0x10c>
c000ddfa:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddfe:	83 c0 24             	add    eax,0x24
c000de01:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000de05:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000de09:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000de0d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de11:	c1 e0 02             	shl    eax,0x2
c000de14:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000de18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de1c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de1e:	a1 6c 31 02 c0       	mov    eax,ds:0xc002316c
c000de23:	8d 50 01             	lea    edx,[eax+0x1]
c000de26:	89 15 6c 31 02 c0    	mov    DWORD PTR ds:0xc002316c,edx
c000de2c:	89 ca                	mov    edx,ecx
c000de2e:	89 14 c5 84 31 02 c0 	mov    DWORD PTR [eax*8-0x3ffdce7c],edx
c000de35:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000de39:	eb b5                	jmp    c000ddf0 <loadACPITables(unsigned char*)+0xc0>
c000de3b:	90                   	nop
c000de3c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000de44:	a1 6c 31 02 c0       	mov    eax,ds:0xc002316c
c000de49:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000de4d:	0f 8d 39 01 00 00    	jge    c000df8c <loadACPITables(unsigned char*)+0x25c>
c000de53:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de57:	8b 04 c5 84 31 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdce7c]
c000de5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de66:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000de6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de6e:	25 ff 0f 00 00       	and    eax,0xfff
c000de73:	89 c6                	mov    esi,eax
c000de75:	8b 1d 70 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c70
c000de7b:	83 ec 0c             	sub    esp,0xc
c000de7e:	6a 01                	push   0x1
c000de80:	e8 10 b4 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c000de85:	83 c4 10             	add    esp,0x10
c000de88:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000de8c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000de92:	83 ec 0c             	sub    esp,0xc
c000de95:	6a 01                	push   0x1
c000de97:	6a 01                	push   0x1
c000de99:	50                   	push   eax
c000de9a:	52                   	push   edx
c000de9b:	53                   	push   ebx
c000de9c:	e8 83 bd ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dea1:	83 c4 20             	add    esp,0x20
c000dea4:	09 f0                	or     eax,esi
c000dea6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000deaa:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000deae:	c1 e0 03             	shl    eax,0x3
c000deb1:	05 80 31 02 c0       	add    eax,0xc0023180
c000deb6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000deba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000debe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dec2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000deca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dece:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ded6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000deda:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dede:	89 c6                	mov    esi,eax
c000dee0:	89 d7                	mov    edi,edx
c000dee2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dee4:	89 c8                	mov    eax,ecx
c000dee6:	89 fa                	mov    edx,edi
c000dee8:	89 f3                	mov    ebx,esi
c000deea:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000deee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000def2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000def6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000defa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000defd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000df01:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000df05:	05 00 10 00 00       	add    eax,0x1000
c000df0a:	c1 e8 0c             	shr    eax,0xc
c000df0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000df11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df15:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df1d:	25 ff 0f 00 00       	and    eax,0xfff
c000df22:	89 c6                	mov    esi,eax
c000df24:	8b 1d 70 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c70
c000df2a:	83 ec 0c             	sub    esp,0xc
c000df2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000df31:	e8 5f b3 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c000df36:	83 c4 10             	add    esp,0x10
c000df39:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df3d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df43:	83 ec 0c             	sub    esp,0xc
c000df46:	6a 01                	push   0x1
c000df48:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000df4c:	50                   	push   eax
c000df4d:	52                   	push   edx
c000df4e:	53                   	push   ebx
c000df4f:	e8 d0 bc ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df54:	83 c4 20             	add    esp,0x20
c000df57:	09 f0                	or     eax,esi
c000df59:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df61:	83 ec 0c             	sub    esp,0xc
c000df64:	50                   	push   eax
c000df65:	e8 5b b6 ff ff       	call   c00095c5 <Virt::freeKernelVirtualPages(unsigned long)>
c000df6a:	83 c4 10             	add    esp,0x10
c000df6d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df71:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000df75:	89 14 c5 84 31 02 c0 	mov    DWORD PTR [eax*8-0x3ffdce7c],edx
c000df7c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000df80:	e9 bf fe ff ff       	jmp    c000de44 <loadACPITables(unsigned char*)+0x114>
c000df85:	8d 76 00             	lea    esi,[esi+0x0]
c000df88:	90                   	nop
c000df89:	8d 76 00             	lea    esi,[esi+0x0]
c000df8c:	83 c4 60             	add    esp,0x60
c000df8f:	5b                   	pop    ebx
c000df90:	5e                   	pop    esi
c000df91:	5f                   	pop    edi
c000df92:	c3                   	ret    
c000df93:	90                   	nop

c000df94 <findRSDT(unsigned char*)>:
c000df94:	57                   	push   edi
c000df95:	56                   	push   esi
c000df96:	53                   	push   ebx
c000df97:	83 ec 50             	sub    esp,0x50
c000df9a:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000df9f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dfa5:	83 e0 04             	and    eax,0x4
c000dfa8:	84 c0                	test   al,al
c000dfaa:	75 0c                	jne    c000dfb8 <findRSDT(unsigned char*)+0x24>
c000dfac:	b8 00 00 00 00       	mov    eax,0x0
c000dfb1:	e9 26 01 00 00       	jmp    c000e0dc <findRSDT(unsigned char*)+0x148>
c000dfb6:	66 90                	xchg   ax,ax
c000dfb8:	89 e0                	mov    eax,esp
c000dfba:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dfbe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dfc2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dfc6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000dfce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dfd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfd6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dfda:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000dfde:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dfe2:	89 c6                	mov    esi,eax
c000dfe4:	89 d7                	mov    edi,edx
c000dfe6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dfe8:	89 c8                	mov    eax,ecx
c000dfea:	89 fa                	mov    edx,edi
c000dfec:	89 f3                	mov    ebx,esi
c000dfee:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000dff2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dff6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dffa:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dffe:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e002:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e00a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e00e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e012:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e01a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e01e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e022:	25 ff 0f 00 00       	and    eax,0xfff
c000e027:	89 c6                	mov    esi,eax
c000e029:	8b 1d 70 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c70
c000e02f:	83 ec 0c             	sub    esp,0xc
c000e032:	6a 02                	push   0x2
c000e034:	e8 5c b2 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c000e039:	83 c4 10             	add    esp,0x10
c000e03c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e040:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e046:	83 ec 0c             	sub    esp,0xc
c000e049:	6a 01                	push   0x1
c000e04b:	6a 02                	push   0x2
c000e04d:	50                   	push   eax
c000e04e:	52                   	push   edx
c000e04f:	53                   	push   ebx
c000e050:	e8 cf bb ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e055:	83 c4 20             	add    esp,0x20
c000e058:	09 f0                	or     eax,esi
c000e05a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e05e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e062:	25 ff 0f 00 00       	and    eax,0xfff
c000e067:	89 c6                	mov    esi,eax
c000e069:	8b 1d 70 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c70
c000e06f:	83 ec 0c             	sub    esp,0xc
c000e072:	6a 02                	push   0x2
c000e074:	e8 1c b2 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c000e079:	83 c4 10             	add    esp,0x10
c000e07c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e080:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	6a 01                	push   0x1
c000e08b:	6a 02                	push   0x2
c000e08d:	50                   	push   eax
c000e08e:	52                   	push   edx
c000e08f:	53                   	push   ebx
c000e090:	e8 8f bb ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e095:	83 c4 20             	add    esp,0x20
c000e098:	09 f0                	or     eax,esi
c000e09a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e09e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e0a3:	75 13                	jne    c000e0b8 <findRSDT(unsigned char*)+0x124>
c000e0a5:	c6 05 80 33 02 c0 00 	mov    BYTE PTR ds:0xc0023380,0x0
c000e0ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e0b0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0b4:	eb 22                	jmp    c000e0d8 <findRSDT(unsigned char*)+0x144>
c000e0b6:	66 90                	xchg   ax,ax
c000e0b8:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e0bd:	75 11                	jne    c000e0d0 <findRSDT(unsigned char*)+0x13c>
c000e0bf:	c6 05 80 33 02 c0 01 	mov    BYTE PTR ds:0xc0023380,0x1
c000e0c6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e0ca:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0ce:	eb 08                	jmp    c000e0d8 <findRSDT(unsigned char*)+0x144>
c000e0d0:	b8 00 00 00 00       	mov    eax,0x0
c000e0d5:	eb 05                	jmp    c000e0dc <findRSDT(unsigned char*)+0x148>
c000e0d7:	90                   	nop
c000e0d8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0dc:	83 c4 50             	add    esp,0x50
c000e0df:	5b                   	pop    ebx
c000e0e0:	5e                   	pop    esi
c000e0e1:	5f                   	pop    edi
c000e0e2:	c3                   	ret    
c000e0e3:	90                   	nop

c000e0e4 <findDataTable(unsigned char*, char*)>:
c000e0e4:	83 ec 1c             	sub    esp,0x1c
c000e0e7:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000e0ec:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0f2:	83 e0 04             	and    eax,0x4
c000e0f5:	84 c0                	test   al,al
c000e0f7:	75 07                	jne    c000e100 <findDataTable(unsigned char*, char*)+0x1c>
c000e0f9:	b8 00 00 00 00       	mov    eax,0x0
c000e0fe:	eb 58                	jmp    c000e158 <findDataTable(unsigned char*, char*)+0x74>
c000e100:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e108:	a1 6c 31 02 c0       	mov    eax,ds:0xc002316c
c000e10d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e111:	7d 3d                	jge    c000e150 <findDataTable(unsigned char*, char*)+0x6c>
c000e113:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e117:	c1 e0 03             	shl    eax,0x3
c000e11a:	05 80 31 02 c0       	add    eax,0xc0023180
c000e11f:	83 ec 04             	sub    esp,0x4
c000e122:	6a 04                	push   0x4
c000e124:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e128:	50                   	push   eax
c000e129:	e8 72 22 ff ff       	call   c00003a0 <memcmp>
c000e12e:	83 c4 10             	add    esp,0x10
c000e131:	85 c0                	test   eax,eax
c000e133:	0f 94 c0             	sete   al
c000e136:	84 c0                	test   al,al
c000e138:	74 0e                	je     c000e148 <findDataTable(unsigned char*, char*)+0x64>
c000e13a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e13e:	8b 04 c5 84 31 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdce7c]
c000e145:	eb 11                	jmp    c000e158 <findDataTable(unsigned char*, char*)+0x74>
c000e147:	90                   	nop
c000e148:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e14c:	eb ba                	jmp    c000e108 <findDataTable(unsigned char*, char*)+0x24>
c000e14e:	66 90                	xchg   ax,ax
c000e150:	b8 00 00 00 00       	mov    eax,0x0
c000e155:	8d 76 00             	lea    esi,[esi+0x0]
c000e158:	83 c4 1c             	add    esp,0x1c
c000e15b:	c3                   	ret    

c000e15c <scanMADT()>:
c000e15c:	53                   	push   ebx
c000e15d:	83 ec 38             	sub    esp,0x38
c000e160:	a1 90 0b 02 c0       	mov    eax,ds:0xc0020b90
c000e165:	25 00 04 00 00       	and    eax,0x400
c000e16a:	74 14                	je     c000e180 <scanMADT()+0x24>
c000e16c:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000e171:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e177:	83 e2 fb             	and    edx,0xfffffffb
c000e17a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e180:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000e185:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e18b:	83 e0 04             	and    eax,0x4
c000e18e:	84 c0                	test   al,al
c000e190:	0f 84 8a 04 00 00    	je     c000e620 <scanMADT()+0x4c4>
c000e196:	e8 05 fb ff ff       	call   c000dca0 <findRSDP()>
c000e19b:	a3 8c 33 02 c0       	mov    ds:0xc002338c,eax
c000e1a0:	a1 8c 33 02 c0       	mov    eax,ds:0xc002338c
c000e1a5:	85 c0                	test   eax,eax
c000e1a7:	75 1b                	jne    c000e1c4 <scanMADT()+0x68>
c000e1a9:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000e1ae:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1b4:	83 e2 fb             	and    edx,0xfffffffb
c000e1b7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1bd:	e9 66 04 00 00       	jmp    c000e628 <scanMADT()+0x4cc>
c000e1c2:	66 90                	xchg   ax,ax
c000e1c4:	a1 8c 33 02 c0       	mov    eax,ds:0xc002338c
c000e1c9:	83 ec 0c             	sub    esp,0xc
c000e1cc:	50                   	push   eax
c000e1cd:	e8 c2 fd ff ff       	call   c000df94 <findRSDT(unsigned char*)>
c000e1d2:	83 c4 10             	add    esp,0x10
c000e1d5:	a3 88 33 02 c0       	mov    ds:0xc0023388,eax
c000e1da:	a1 88 33 02 c0       	mov    eax,ds:0xc0023388
c000e1df:	85 c0                	test   eax,eax
c000e1e1:	75 19                	jne    c000e1fc <scanMADT()+0xa0>
c000e1e3:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000e1e8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1ee:	83 e2 fb             	and    edx,0xfffffffb
c000e1f1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1f7:	e9 2c 04 00 00       	jmp    c000e628 <scanMADT()+0x4cc>
c000e1fc:	a1 88 33 02 c0       	mov    eax,ds:0xc0023388
c000e201:	83 ec 0c             	sub    esp,0xc
c000e204:	50                   	push   eax
c000e205:	e8 26 fb ff ff       	call   c000dd30 <loadACPITables(unsigned char*)>
c000e20a:	83 c4 10             	add    esp,0x10
c000e20d:	a1 88 33 02 c0       	mov    eax,ds:0xc0023388
c000e212:	83 ec 08             	sub    esp,0x8
c000e215:	68 18 e3 01 c0       	push   0xc001e318
c000e21a:	50                   	push   eax
c000e21b:	e8 c4 fe ff ff       	call   c000e0e4 <findDataTable(unsigned char*, char*)>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e227:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e22c:	75 1a                	jne    c000e248 <scanMADT()+0xec>
c000e22e:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000e233:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e239:	83 e2 fe             	and    edx,0xfffffffe
c000e23c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e242:	e9 e1 03 00 00       	jmp    c000e628 <scanMADT()+0x4cc>
c000e247:	90                   	nop
c000e248:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e250:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e254:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e257:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e25b:	0f 87 c7 03 00 00    	ja     c000e628 <scanMADT()+0x4cc>
c000e261:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e269:	0f 87 b9 03 00 00    	ja     c000e628 <scanMADT()+0x4cc>
c000e26f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e273:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e277:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e27b:	8d 50 01             	lea    edx,[eax+0x1]
c000e27e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e282:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e286:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e28a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e28e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e292:	8d 50 01             	lea    edx,[eax+0x1]
c000e295:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e299:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e29d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e2a1:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e2a5:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e2aa:	0f 86 74 03 00 00    	jbe    c000e624 <scanMADT()+0x4c8>
c000e2b0:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e2b5:	75 5d                	jne    c000e314 <scanMADT()+0x1b8>
c000e2b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2bb:	8d 50 01             	lea    edx,[eax+0x1]
c000e2be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2c2:	8a 15 80 35 02 c0    	mov    dl,BYTE PTR ds:0xc0023580
c000e2c8:	81 e2 ff 00 00 00    	and    edx,0xff
c000e2ce:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2d2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e2d6:	88 82 c0 35 02 c0    	mov    BYTE PTR [edx-0x3ffdca40],al
c000e2dc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e2e0:	8d 42 01             	lea    eax,[edx+0x1]
c000e2e3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e2e7:	a0 80 35 02 c0       	mov    al,ds:0xc0023580
c000e2ec:	8d 48 01             	lea    ecx,[eax+0x1]
c000e2ef:	88 0d 80 35 02 c0    	mov    BYTE PTR ds:0xc0023580,cl
c000e2f5:	25 ff 00 00 00       	and    eax,0xff
c000e2fa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2fe:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e302:	88 90 a0 35 02 c0    	mov    BYTE PTR [eax-0x3ffdca60],dl
c000e308:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e30d:	e9 f6 02 00 00       	jmp    c000e608 <scanMADT()+0x4ac>
c000e312:	66 90                	xchg   ax,ax
c000e314:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e319:	0f 85 29 01 00 00    	jne    c000e448 <scanMADT()+0x2ec>
c000e31f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e323:	8d 50 01             	lea    edx,[eax+0x1]
c000e326:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e32a:	8a 15 40 34 02 c0    	mov    dl,BYTE PTR ds:0xc0023440
c000e330:	81 e2 ff 00 00 00    	and    edx,0xff
c000e336:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e33a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e33e:	88 82 60 34 02 c0    	mov    BYTE PTR [edx-0x3ffdcba0],al
c000e344:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e348:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e34c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e350:	01 d0                	add    eax,edx
c000e352:	83 c0 2c             	add    eax,0x2c
c000e355:	8a 00                	mov    al,BYTE PTR [eax]
c000e357:	31 d2                	xor    edx,edx
c000e359:	88 c2                	mov    dl,al
c000e35b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e35f:	8d 48 01             	lea    ecx,[eax+0x1]
c000e362:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e366:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e36a:	25 ff 00 00 00       	and    eax,0xff
c000e36f:	c1 e0 08             	shl    eax,0x8
c000e372:	89 d1                	mov    ecx,edx
c000e374:	09 c1                	or     ecx,eax
c000e376:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e37a:	8d 50 02             	lea    edx,[eax+0x2]
c000e37d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e381:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e385:	25 ff 00 00 00       	and    eax,0xff
c000e38a:	c1 e0 10             	shl    eax,0x10
c000e38d:	09 c1                	or     ecx,eax
c000e38f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e393:	8d 50 03             	lea    edx,[eax+0x3]
c000e396:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e39a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e39e:	25 ff 00 00 00       	and    eax,0xff
c000e3a3:	c1 e0 18             	shl    eax,0x18
c000e3a6:	09 c1                	or     ecx,eax
c000e3a8:	89 ca                	mov    edx,ecx
c000e3aa:	a0 40 34 02 c0       	mov    al,ds:0xc0023440
c000e3af:	25 ff 00 00 00       	and    eax,0xff
c000e3b4:	89 14 85 80 34 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcb80],edx
c000e3bb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e3c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3c4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3c8:	01 d0                	add    eax,edx
c000e3ca:	83 c0 2c             	add    eax,0x2c
c000e3cd:	8a 00                	mov    al,BYTE PTR [eax]
c000e3cf:	31 d2                	xor    edx,edx
c000e3d1:	88 c2                	mov    dl,al
c000e3d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3d7:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3de:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e3e2:	25 ff 00 00 00       	and    eax,0xff
c000e3e7:	c1 e0 08             	shl    eax,0x8
c000e3ea:	89 d1                	mov    ecx,edx
c000e3ec:	09 c1                	or     ecx,eax
c000e3ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3f2:	8d 50 02             	lea    edx,[eax+0x2]
c000e3f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3f9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3fd:	25 ff 00 00 00       	and    eax,0xff
c000e402:	c1 e0 10             	shl    eax,0x10
c000e405:	09 c1                	or     ecx,eax
c000e407:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e40b:	8d 50 03             	lea    edx,[eax+0x3]
c000e40e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e412:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e416:	25 ff 00 00 00       	and    eax,0xff
c000e41b:	c1 e0 18             	shl    eax,0x18
c000e41e:	09 c1                	or     ecx,eax
c000e420:	89 ca                	mov    edx,ecx
c000e422:	a0 40 34 02 c0       	mov    al,ds:0xc0023440
c000e427:	25 ff 00 00 00       	and    eax,0xff
c000e42c:	89 14 85 00 35 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcb00],edx
c000e433:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e438:	a0 40 34 02 c0       	mov    al,ds:0xc0023440
c000e43d:	40                   	inc    eax
c000e43e:	a2 40 34 02 c0       	mov    ds:0xc0023440,al
c000e443:	e9 c0 01 00 00       	jmp    c000e608 <scanMADT()+0x4ac>
c000e448:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e44d:	0f 85 fd 00 00 00    	jne    c000e550 <scanMADT()+0x3f4>
c000e453:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e457:	8d 50 01             	lea    edx,[eax+0x1]
c000e45a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e45e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e462:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e466:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e46a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e46e:	8d 50 01             	lea    edx,[eax+0x1]
c000e471:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e475:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e479:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e47d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e481:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e485:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e489:	01 d0                	add    eax,edx
c000e48b:	83 c0 2c             	add    eax,0x2c
c000e48e:	8a 00                	mov    al,BYTE PTR [eax]
c000e490:	31 d2                	xor    edx,edx
c000e492:	88 c2                	mov    dl,al
c000e494:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e498:	8d 48 01             	lea    ecx,[eax+0x1]
c000e49b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e49f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e4a3:	25 ff 00 00 00       	and    eax,0xff
c000e4a8:	c1 e0 08             	shl    eax,0x8
c000e4ab:	89 d1                	mov    ecx,edx
c000e4ad:	09 c1                	or     ecx,eax
c000e4af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4b3:	8d 50 02             	lea    edx,[eax+0x2]
c000e4b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4ba:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4be:	25 ff 00 00 00       	and    eax,0xff
c000e4c3:	c1 e0 10             	shl    eax,0x10
c000e4c6:	09 c1                	or     ecx,eax
c000e4c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4cc:	8d 50 03             	lea    edx,[eax+0x3]
c000e4cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4d3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4d7:	25 ff 00 00 00       	and    eax,0xff
c000e4dc:	c1 e0 18             	shl    eax,0x18
c000e4df:	09 c8                	or     eax,ecx
c000e4e1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4e5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4f2:	01 d0                	add    eax,edx
c000e4f4:	83 c0 2c             	add    eax,0x2c
c000e4f7:	8a 00                	mov    al,BYTE PTR [eax]
c000e4f9:	25 ff 00 00 00       	and    eax,0xff
c000e4fe:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e502:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e505:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e509:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e50d:	81 e2 ff 00 00 00    	and    edx,0xff
c000e513:	c1 e2 08             	shl    edx,0x8
c000e516:	09 d0                	or     eax,edx
c000e518:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e51d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e522:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e526:	25 ff 00 00 00       	and    eax,0xff
c000e52b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e52f:	88 90 40 f8 01 c0    	mov    BYTE PTR [eax-0x3ffe07c0],dl
c000e535:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e539:	31 d2                	xor    edx,edx
c000e53b:	88 c2                	mov    dl,al
c000e53d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e542:	66 89 84 12 20 34 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdcbe0],ax
c000e54a:	e9 b9 00 00 00       	jmp    c000e608 <scanMADT()+0x4ac>
c000e54f:	90                   	nop
c000e550:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e555:	0f 85 a1 00 00 00    	jne    c000e5fc <scanMADT()+0x4a0>
c000e55b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e55f:	8d 50 01             	lea    edx,[eax+0x1]
c000e562:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e566:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e56a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e56e:	25 ff 00 00 00       	and    eax,0xff
c000e573:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e577:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e57b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e57f:	01 d0                	add    eax,edx
c000e581:	83 c0 2c             	add    eax,0x2c
c000e584:	8a 00                	mov    al,BYTE PTR [eax]
c000e586:	31 d2                	xor    edx,edx
c000e588:	88 c2                	mov    dl,al
c000e58a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e58e:	8d 48 01             	lea    ecx,[eax+0x1]
c000e591:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e595:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e599:	25 ff 00 00 00       	and    eax,0xff
c000e59e:	c1 e0 08             	shl    eax,0x8
c000e5a1:	09 d0                	or     eax,edx
c000e5a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5a7:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e5ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5b0:	8d 50 01             	lea    edx,[eax+0x1]
c000e5b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5bb:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5bf:	25 ff 00 00 00       	and    eax,0xff
c000e5c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5cc:	c1 e0 08             	shl    eax,0x8
c000e5cf:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e5d3:	89 c1                	mov    ecx,eax
c000e5d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5d9:	c1 e0 18             	shl    eax,0x18
c000e5dc:	89 c3                	mov    ebx,eax
c000e5de:	a1 90 33 02 c0       	mov    eax,ds:0xc0023390
c000e5e3:	8d 50 01             	lea    edx,[eax+0x1]
c000e5e6:	89 15 90 33 02 c0    	mov    DWORD PTR ds:0xc0023390,edx
c000e5ec:	09 d9                	or     ecx,ebx
c000e5ee:	89 ca                	mov    edx,ecx
c000e5f0:	89 14 85 a0 33 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcc60],edx
c000e5f7:	eb 0f                	jmp    c000e608 <scanMADT()+0x4ac>
c000e5f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e5fc:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e601:	75 05                	jne    c000e608 <scanMADT()+0x4ac>
c000e603:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e608:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e60c:	31 d2                	xor    edx,edx
c000e60e:	88 c2                	mov    dl,al
c000e610:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e614:	01 d0                	add    eax,edx
c000e616:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e61a:	e9 31 fc ff ff       	jmp    c000e250 <scanMADT()+0xf4>
c000e61f:	90                   	nop
c000e620:	90                   	nop
c000e621:	eb 05                	jmp    c000e628 <scanMADT()+0x4cc>
c000e623:	90                   	nop
c000e624:	90                   	nop
c000e625:	8d 76 00             	lea    esi,[esi+0x0]
c000e628:	83 c4 38             	add    esp,0x38
c000e62b:	5b                   	pop    ebx
c000e62c:	c3                   	ret    
c000e62d:	90                   	nop
c000e62e:	66 90                	xchg   ax,ax

c000e630 <ACPI::ACPI()>:
c000e630:	83 ec 0c             	sub    esp,0xc
c000e633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e637:	83 ec 08             	sub    esp,0x8
c000e63a:	68 1d e3 01 c0       	push   0xc001e31d
c000e63f:	50                   	push   eax
c000e640:	e8 7b d4 ff ff       	call   c000bac0 <Device::Device(char const*)>
c000e645:	83 c4 10             	add    esp,0x10
c000e648:	ba 54 e4 01 c0       	mov    edx,0xc001e454
c000e64d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e651:	89 10                	mov    DWORD PTR [eax],edx
c000e653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e657:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e662:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e670:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e67a:	e8 dd fa ff ff       	call   c000e15c <scanMADT()>
c000e67f:	90                   	nop
c000e680:	83 c4 0c             	add    esp,0xc
c000e683:	c3                   	ret    

c000e684 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e684:	83 ec 2c             	sub    esp,0x2c
c000e687:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e68b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e68f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e693:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e697:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e69c:	88 d0                	mov    al,dl
c000e69e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e6a2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e6a7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6af:	90                   	nop
c000e6b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6b4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e6ba:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e6be:	0f 8d 9c 00 00 00    	jge    c000e760 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e6c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6cc:	83 c2 2a             	add    edx,0x2a
c000e6cf:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e6d3:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e6d8:	75 7a                	jne    c000e754 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6e2:	83 c2 2a             	add    edx,0x2a
c000e6e5:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e6e9:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e6ed:	75 65                	jne    c000e754 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6ef:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e6f4:	74 3a                	je     c000e730 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e6f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6fa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6fe:	83 c2 2a             	add    edx,0x2a
c000e701:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e705:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e709:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e70c:	39 c2                	cmp    edx,eax
c000e70e:	74 10                	je     c000e720 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e710:	83 ec 0c             	sub    esp,0xc
c000e713:	68 98 e2 01 c0       	push   0xc001e298
c000e718:	e8 4e 1a 00 00       	call   c001016b <KePanic(char const*)>
c000e71d:	83 c4 10             	add    esp,0x10
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	68 22 e3 01 c0       	push   0xc001e322
c000e728:	e8 3e 1a 00 00       	call   c001016b <KePanic(char const*)>
c000e72d:	83 c4 10             	add    esp,0x10
c000e730:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e734:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e738:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e73c:	83 c2 2a             	add    edx,0x2a
c000e73f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e743:	8b 02                	mov    eax,DWORD PTR [edx]
c000e745:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e748:	89 01                	mov    DWORD PTR [ecx],eax
c000e74a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e74d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e752:	66 90                	xchg   ax,ax
c000e754:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e758:	e9 53 ff ff ff       	jmp    c000e6b0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e75d:	8d 76 00             	lea    esi,[esi+0x0]
c000e760:	90                   	nop
c000e761:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e765:	83 c4 2c             	add    esp,0x2c
c000e768:	c2 04 00             	ret    0x4
c000e76b:	90                   	nop

c000e76c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e76c:	83 ec 1c             	sub    esp,0x1c
c000e76f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e773:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e777:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e77b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e780:	88 c8                	mov    al,cl
c000e782:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e786:	88 d0                	mov    al,dl
c000e788:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e78c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e790:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e79a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e79d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e7a1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e7a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7a9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7af:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e7b3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e7b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7ba:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e7bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7c3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7c9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e7cd:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d4:	83 c2 2a             	add    edx,0x2a
c000e7d7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e7db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7df:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7e9:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e7ec:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e7f0:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e7f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7f8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7fe:	8d 50 01             	lea    edx,[eax+0x1]
c000e801:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e805:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e80b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e80f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e815:	3d 00 02 00 00       	cmp    eax,0x200
c000e81a:	75 10                	jne    c000e82c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e81c:	83 ec 0c             	sub    esp,0xc
c000e81f:	68 31 e3 01 c0       	push   0xc001e331
c000e824:	e8 42 19 00 00       	call   c001016b <KePanic(char const*)>
c000e829:	83 c4 10             	add    esp,0x10
c000e82c:	90                   	nop
c000e82d:	83 c4 1c             	add    esp,0x1c
c000e830:	c3                   	ret    
c000e831:	90                   	nop
c000e832:	66 90                	xchg   ax,ax

c000e834 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e834:	b8 00 00 00 00       	mov    eax,0x0
c000e839:	c3                   	ret    
c000e83a:	66 90                	xchg   ax,ax

c000e83c <ACPI::detectPCI()>:
c000e83c:	53                   	push   ebx
c000e83d:	83 ec 28             	sub    esp,0x28
c000e840:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e845:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e84a:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000e84f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e855:	83 e0 04             	and    eax,0x4
c000e858:	84 c0                	test   al,al
c000e85a:	74 2c                	je     c000e888 <ACPI::detectPCI()+0x4c>
c000e85c:	a1 88 33 02 c0       	mov    eax,ds:0xc0023388
c000e861:	83 ec 08             	sub    esp,0x8
c000e864:	68 4e e3 01 c0       	push   0xc001e34e
c000e869:	50                   	push   eax
c000e86a:	e8 75 f8 ff ff       	call   c000e0e4 <findDataTable(unsigned char*, char*)>
c000e86f:	83 c4 10             	add    esp,0x10
c000e872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e876:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e87b:	74 0b                	je     c000e888 <ACPI::detectPCI()+0x4c>
c000e87d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e882:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e887:	90                   	nop
c000e888:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e890:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e894:	8a 00                	mov    al,BYTE PTR [eax]
c000e896:	3c 01                	cmp    al,0x1
c000e898:	75 0e                	jne    c000e8a8 <ACPI::detectPCI()+0x6c>
c000e89a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e89f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8a4:	eb 2a                	jmp    c000e8d0 <ACPI::detectPCI()+0x94>
c000e8a6:	66 90                	xchg   ax,ax
c000e8a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8ac:	8a 00                	mov    al,BYTE PTR [eax]
c000e8ae:	3c 02                	cmp    al,0x2
c000e8b0:	75 1e                	jne    c000e8d0 <ACPI::detectPCI()+0x94>
c000e8b2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8b7:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8bc:	74 12                	je     c000e8d0 <ACPI::detectPCI()+0x94>
c000e8be:	83 ec 0c             	sub    esp,0xc
c000e8c1:	68 c8 e2 01 c0       	push   0xc001e2c8
c000e8c6:	e8 a0 18 00 00       	call   c001016b <KePanic(char const*)>
c000e8cb:	83 c4 10             	add    esp,0x10
c000e8ce:	66 90                	xchg   ax,ax
c000e8d0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e8d4:	83 f0 01             	xor    eax,0x1
c000e8d7:	84 c0                	test   al,al
c000e8d9:	74 41                	je     c000e91c <ACPI::detectPCI()+0xe0>
c000e8db:	e8 50 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e8e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8e4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e8e9:	75 0d                	jne    c000e8f8 <ACPI::detectPCI()+0xbc>
c000e8eb:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8f0:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8f5:	eb 25                	jmp    c000e91c <ACPI::detectPCI()+0xe0>
c000e8f7:	90                   	nop
c000e8f8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e8fd:	75 1d                	jne    c000e91c <ACPI::detectPCI()+0xe0>
c000e8ff:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e904:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e909:	74 11                	je     c000e91c <ACPI::detectPCI()+0xe0>
c000e90b:	83 ec 0c             	sub    esp,0xc
c000e90e:	68 c8 e2 01 c0       	push   0xc001e2c8
c000e913:	e8 53 18 00 00       	call   c001016b <KePanic(char const*)>
c000e918:	83 c4 10             	add    esp,0x10
c000e91b:	90                   	nop
c000e91c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e921:	0f 84 85 00 00 00    	je     c000e9ac <ACPI::detectPCI()+0x170>
c000e927:	83 ec 0c             	sub    esp,0xc
c000e92a:	68 53 e3 01 c0       	push   0xc001e353
c000e92f:	e8 bf 11 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c000e934:	83 c4 10             	add    esp,0x10
c000e937:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e93f:	83 ec 0c             	sub    esp,0xc
c000e942:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e946:	e8 7e 8e ff ff       	call   c00077c9 <malloc>
c000e94b:	83 c4 10             	add    esp,0x10
c000e94e:	89 c3                	mov    ebx,eax
c000e950:	83 ec 0c             	sub    esp,0xc
c000e953:	53                   	push   ebx
c000e954:	e8 09 9b 00 00       	call   c0018462 <PCI::PCI()>
c000e959:	83 c4 10             	add    esp,0x10
c000e95c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e960:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e964:	83 ec 08             	sub    esp,0x8
c000e967:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e96b:	50                   	push   eax
c000e96c:	e8 b7 cf ff ff       	call   c000b928 <Device::addChild(Device*)>
c000e971:	83 c4 10             	add    esp,0x10
c000e974:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e978:	8b 00                	mov    eax,DWORD PTR [eax]
c000e97a:	83 c0 08             	add    eax,0x8
c000e97d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e97f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e984:	74 0a                	je     c000e990 <ACPI::detectPCI()+0x154>
c000e986:	ba 01 00 00 00       	mov    edx,0x1
c000e98b:	eb 0b                	jmp    c000e998 <ACPI::detectPCI()+0x15c>
c000e98d:	8d 76 00             	lea    esi,[esi+0x0]
c000e990:	ba 02 00 00 00       	mov    edx,0x2
c000e995:	8d 76 00             	lea    esi,[esi+0x0]
c000e998:	6a 00                	push   0x0
c000e99a:	6a 00                	push   0x0
c000e99c:	52                   	push   edx
c000e99d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e9a1:	ff d0                	call   eax
c000e9a3:	83 c4 10             	add    esp,0x10
c000e9a6:	e9 91 00 00 00       	jmp    c000ea3c <ACPI::detectPCI()+0x200>
c000e9ab:	90                   	nop
c000e9ac:	83 ec 0c             	sub    esp,0xc
c000e9af:	68 6b e3 01 c0       	push   0xc001e36b
c000e9b4:	e8 3a 11 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c000e9b9:	83 c4 10             	add    esp,0x10
c000e9bc:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e9c3:	83 ec 0c             	sub    esp,0xc
c000e9c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e9ca:	e8 fa 8d ff ff       	call   c00077c9 <malloc>
c000e9cf:	83 c4 10             	add    esp,0x10
c000e9d2:	89 c3                	mov    ebx,eax
c000e9d4:	83 ec 0c             	sub    esp,0xc
c000e9d7:	53                   	push   ebx
c000e9d8:	e8 b1 a5 00 00       	call   c0018f8e <IDE::IDE()>
c000e9dd:	83 c4 10             	add    esp,0x10
c000e9e0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e9e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9e8:	83 ec 08             	sub    esp,0x8
c000e9eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9ef:	50                   	push   eax
c000e9f0:	e8 33 cf ff ff       	call   c000b928 <Device::addChild(Device*)>
c000e9f5:	83 c4 10             	add    esp,0x10
c000e9f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9fc:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ea06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea0a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ea13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea17:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ea20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea24:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea26:	83 c0 08             	add    eax,0x8
c000ea29:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea2b:	6a 00                	push   0x0
c000ea2d:	6a 00                	push   0x0
c000ea2f:	6a 00                	push   0x0
c000ea31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea35:	ff d0                	call   eax
c000ea37:	83 c4 10             	add    esp,0x10
c000ea3a:	66 90                	xchg   ax,ax
c000ea3c:	90                   	nop
c000ea3d:	83 c4 28             	add    esp,0x28
c000ea40:	5b                   	pop    ebx
c000ea41:	c3                   	ret    
c000ea42:	66 90                	xchg   ax,ax

c000ea44 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ea44:	83 ec 1c             	sub    esp,0x1c
c000ea47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ea4b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ea4e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea52:	8b 15 78 0b 02 c0    	mov    edx,DWORD PTR ds:0xc0020b78
c000ea58:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea5c:	25 ff 00 00 00       	and    eax,0xff
c000ea61:	83 ec 08             	sub    esp,0x8
c000ea64:	50                   	push   eax
c000ea65:	52                   	push   edx
c000ea66:	e8 4b 84 ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c000ea6b:	83 c4 10             	add    esp,0x10
c000ea6e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ea72:	8b 15 78 0b 02 c0    	mov    edx,DWORD PTR ds:0xc0020b78
c000ea78:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea7c:	25 ff 00 00 00       	and    eax,0xff
c000ea81:	83 ec 04             	sub    esp,0x4
c000ea84:	6a 01                	push   0x1
c000ea86:	50                   	push   eax
c000ea87:	52                   	push   edx
c000ea88:	e8 3f 85 ff ff       	call   c0006fcc <Computer::writeCMOS(unsigned char, unsigned char)>
c000ea8d:	83 c4 10             	add    esp,0x10
c000ea90:	90                   	nop
c000ea91:	83 c4 1c             	add    esp,0x1c
c000ea94:	c3                   	ret    
c000ea95:	90                   	nop
c000ea96:	66 90                	xchg   ax,ax

c000ea98 <ACPI::sleep()>:
c000ea98:	83 ec 0c             	sub    esp,0xc
c000ea9b:	a1 60 31 02 c0       	mov    eax,ds:0xc0023160
c000eaa0:	85 c0                	test   eax,eax
c000eaa2:	74 08                	je     c000eaac <ACPI::sleep()+0x14>
c000eaa4:	a1 60 31 02 c0       	mov    eax,ds:0xc0023160
c000eaa9:	ff d0                	call   eax
c000eaab:	90                   	nop
c000eaac:	90                   	nop
c000eaad:	83 c4 0c             	add    esp,0xc
c000eab0:	c3                   	ret    
c000eab1:	90                   	nop
c000eab2:	66 90                	xchg   ax,ax

c000eab4 <ACPI::open(int, int, void*)>:
c000eab4:	57                   	push   edi
c000eab5:	56                   	push   esi
c000eab6:	53                   	push   ebx
c000eab7:	81 ec 70 01 00 00    	sub    esp,0x170
c000eabd:	83 ec 0c             	sub    esp,0xc
c000eac0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eac7:	e8 70 fd ff ff       	call   c000e83c <ACPI::detectPCI()>
c000eacc:	83 c4 10             	add    esp,0x10
c000eacf:	83 ec 0c             	sub    esp,0xc
c000ead2:	68 f0 e2 01 c0       	push   0xc001e2f0
c000ead7:	e8 17 10 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c000eadc:	83 c4 10             	add    esp,0x10
c000eadf:	83 ec 0c             	sub    esp,0xc
c000eae2:	68 80 e3 01 c0       	push   0xc001e380
c000eae7:	e8 2f 38 00 00       	call   c001231b <Thr::loadKernelSymbolTable(char const*)>
c000eaec:	83 c4 10             	add    esp,0x10
c000eaef:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eaf7:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eb02:	83 ec 0c             	sub    esp,0xc
c000eb05:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eb0c:	e8 b8 8c ff ff       	call   c00077c9 <malloc>
c000eb11:	83 c4 10             	add    esp,0x10
c000eb14:	89 c3                	mov    ebx,eax
c000eb16:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c000eb1b:	83 ec 04             	sub    esp,0x4
c000eb1e:	50                   	push   eax
c000eb1f:	68 9e e3 01 c0       	push   0xc001e39e
c000eb24:	53                   	push   ebx
c000eb25:	e8 34 bf ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c000eb2a:	83 c4 10             	add    esp,0x10
c000eb2d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eb34:	83 ec 08             	sub    esp,0x8
c000eb37:	6a 01                	push   0x1
c000eb39:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb40:	e8 d9 bf ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c000eb45:	83 c4 10             	add    esp,0x10
c000eb48:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eb4f:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eb57:	75 17                	jne    c000eb70 <ACPI::open(int, int, void*)+0xbc>
c000eb59:	83 ec 0c             	sub    esp,0xc
c000eb5c:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb63:	e8 14 c0 ff ff       	call   c000ab7c <File::close()>
c000eb68:	83 c4 10             	add    esp,0x10
c000eb6b:	eb 0b                	jmp    c000eb78 <ACPI::open(int, int, void*)+0xc4>
c000eb6d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb70:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eb78:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eb80:	74 1e                	je     c000eba0 <ACPI::open(int, int, void*)+0xec>
c000eb82:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eb89:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb8b:	83 c0 08             	add    eax,0x8
c000eb8e:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb90:	83 ec 0c             	sub    esp,0xc
c000eb93:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb9a:	ff d0                	call   eax
c000eb9c:	83 c4 10             	add    esp,0x10
c000eb9f:	90                   	nop
c000eba0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000eba7:	83 f0 01             	xor    eax,0x1
c000ebaa:	84 c0                	test   al,al
c000ebac:	74 42                	je     c000ebf0 <ACPI::open(int, int, void*)+0x13c>
c000ebae:	83 ec 0c             	sub    esp,0xc
c000ebb1:	68 bc e3 01 c0       	push   0xc001e3bc
c000ebb6:	e8 38 0f 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c000ebbb:	83 c4 10             	add    esp,0x10
c000ebbe:	83 ec 04             	sub    esp,0x4
c000ebc1:	6a 0c                	push   0xc
c000ebc3:	68 d7 e3 01 c0       	push   0xc001e3d7
c000ebc8:	68 e8 e3 01 c0       	push   0xc001e3e8
c000ebcd:	e8 39 2d 00 00       	call   c001190b <Reg::readIntWithDefault(char*, char*, int)>
c000ebd2:	83 c4 10             	add    esp,0x10
c000ebd5:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ebdc:	83 ec 0c             	sub    esp,0xc
c000ebdf:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ebe6:	e8 b4 a8 ff ff       	call   c000949f <Virt::setupPageSwapping(int)>
c000ebeb:	83 c4 10             	add    esp,0x10
c000ebee:	66 90                	xchg   ax,ax
c000ebf0:	83 ec 0c             	sub    esp,0xc
c000ebf3:	68 57 d4 01 c0       	push   0xc001d457
c000ebf8:	e8 f6 0e 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c000ebfd:	83 c4 10             	add    esp,0x10
c000ec00:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ec07:	83 ec 08             	sub    esp,0x8
c000ec0a:	6a 12                	push   0x12
c000ec0c:	50                   	push   eax
c000ec0d:	e8 2e d0 ff ff       	call   c000bc40 <getDevicesOfType(DeviceType)>
c000ec12:	83 c4 0c             	add    esp,0xc
c000ec15:	8d 76 00             	lea    esi,[esi+0x0]
c000ec18:	83 ec 0c             	sub    esp,0xc
c000ec1b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec22:	50                   	push   eax
c000ec23:	e8 74 dc 00 00       	call   c001c89c <LinkedList<Device>::isEmpty()>
c000ec28:	83 c4 10             	add    esp,0x10
c000ec2b:	83 f0 01             	xor    eax,0x1
c000ec2e:	84 c0                	test   al,al
c000ec30:	0f 84 46 01 00 00    	je     c000ed7c <ACPI::open(int, int, void*)+0x2c8>
c000ec36:	83 ec 0c             	sub    esp,0xc
c000ec39:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec40:	50                   	push   eax
c000ec41:	e8 72 dc 00 00       	call   c001c8b8 <LinkedList<Device>::getFirstElement()>
c000ec46:	83 c4 10             	add    esp,0x10
c000ec49:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ec50:	83 ec 0c             	sub    esp,0xc
c000ec53:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec5a:	50                   	push   eax
c000ec5b:	e8 60 dc 00 00       	call   c001c8c0 <LinkedList<Device>::removeFirst()>
c000ec60:	83 c4 10             	add    esp,0x10
c000ec63:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ec6a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ec71:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ec78:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ec7c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ec82:	ba 09 00 00 00       	mov    edx,0x9
c000ec87:	fc                   	cld    
c000ec88:	89 c7                	mov    edi,eax
c000ec8a:	89 de                	mov    esi,ebx
c000ec8c:	89 d1                	mov    ecx,edx
c000ec8e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ec97:	50                   	push   eax
c000ec98:	83 ec 24             	sub    esp,0x24
c000ec9b:	89 e0                	mov    eax,esp
c000ec9d:	89 c3                	mov    ebx,eax
c000ec9f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000eca3:	ba 09 00 00 00       	mov    edx,0x9
c000eca8:	89 df                	mov    edi,ebx
c000ecaa:	89 c6                	mov    esi,eax
c000ecac:	89 d1                	mov    ecx,edx
c000ecae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ecb0:	e8 8f 9c 00 00       	call   c0018944 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ecb5:	83 c4 30             	add    esp,0x30
c000ecb8:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ecbf:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ecc7:	0f 84 4b ff ff ff    	je     c000ec18 <ACPI::open(int, int, void*)+0x164>
c000eccd:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ecd8:	83 ec 0c             	sub    esp,0xc
c000ecdb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ece2:	e8 e2 8a ff ff       	call   c00077c9 <malloc>
c000ece7:	83 c4 10             	add    esp,0x10
c000ecea:	89 c3                	mov    ebx,eax
c000ecec:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c000ecf1:	83 ec 04             	sub    esp,0x4
c000ecf4:	50                   	push   eax
c000ecf5:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ecfc:	53                   	push   ebx
c000ecfd:	e8 5c bd ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c000ed02:	83 c4 10             	add    esp,0x10
c000ed05:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ed0c:	83 ec 0c             	sub    esp,0xc
c000ed0f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed16:	e8 71 c0 ff ff       	call   c000ad8c <File::exists()>
c000ed1b:	83 c4 10             	add    esp,0x10
c000ed1e:	84 c0                	test   al,al
c000ed20:	74 2a                	je     c000ed4c <ACPI::open(int, int, void*)+0x298>
c000ed22:	83 ec 08             	sub    esp,0x8
c000ed25:	6a 01                	push   0x1
c000ed27:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed2e:	e8 5f 40 00 00       	call   c0012d92 <Thr::loadDLL(char const*, bool)>
c000ed33:	83 c4 10             	add    esp,0x10
c000ed36:	83 ec 08             	sub    esp,0x8
c000ed39:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed40:	50                   	push   eax
c000ed41:	e8 7d 42 00 00       	call   c0012fc3 <Thr::executeDLL(unsigned long, void*)>
c000ed46:	83 c4 10             	add    esp,0x10
c000ed49:	8d 76 00             	lea    esi,[esi+0x0]
c000ed4c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ed54:	0f 84 be fe ff ff    	je     c000ec18 <ACPI::open(int, int, void*)+0x164>
c000ed5a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ed61:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed63:	83 c0 08             	add    eax,0x8
c000ed66:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed68:	83 ec 0c             	sub    esp,0xc
c000ed6b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed72:	ff d0                	call   eax
c000ed74:	83 c4 10             	add    esp,0x10
c000ed77:	e9 9c fe ff ff       	jmp    c000ec18 <ACPI::open(int, int, void*)+0x164>
c000ed7c:	83 ec 0c             	sub    esp,0xc
c000ed7f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed86:	50                   	push   eax
c000ed87:	e8 0c db 00 00       	call   c001c898 <LinkedList<Device>::~LinkedList()>
c000ed8c:	83 c4 10             	add    esp,0x10
c000ed8f:	8b 1d 78 0b 02 c0    	mov    ebx,DWORD PTR ds:0xc0020b78
c000ed95:	83 ec 08             	sub    esp,0x8
c000ed98:	6a 01                	push   0x1
c000ed9a:	68 ef e3 01 c0       	push   0xc001e3ef
c000ed9f:	e8 ee 3f 00 00       	call   c0012d92 <Thr::loadDLL(char const*, bool)>
c000eda4:	83 c4 10             	add    esp,0x10
c000eda7:	83 ec 08             	sub    esp,0x8
c000edaa:	53                   	push   ebx
c000edab:	50                   	push   eax
c000edac:	e8 12 42 00 00       	call   c0012fc3 <Thr::executeDLL(unsigned long, void*)>
c000edb1:	83 c4 10             	add    esp,0x10
c000edb4:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000edb9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000edbf:	83 e0 04             	and    eax,0x4
c000edc2:	84 c0                	test   al,al
c000edc4:	0f 84 16 01 00 00    	je     c000eee0 <ACPI::open(int, int, void*)+0x42c>
c000edca:	83 ec 0c             	sub    esp,0xc
c000edcd:	68 0c e4 01 c0       	push   0xc001e40c
c000edd2:	e8 1c 0d 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c000edd7:	83 c4 10             	add    esp,0x10
c000edda:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000ede5:	83 ec 0c             	sub    esp,0xc
c000ede8:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000edef:	e8 d5 89 ff ff       	call   c00077c9 <malloc>
c000edf4:	83 c4 10             	add    esp,0x10
c000edf7:	89 c3                	mov    ebx,eax
c000edf9:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c000edfe:	83 ec 04             	sub    esp,0x4
c000ee01:	50                   	push   eax
c000ee02:	68 29 e4 01 c0       	push   0xc001e429
c000ee07:	53                   	push   ebx
c000ee08:	e8 51 bc ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c000ee0d:	83 c4 10             	add    esp,0x10
c000ee10:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ee17:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee1f:	74 1b                	je     c000ee3c <ACPI::open(int, int, void*)+0x388>
c000ee21:	83 ec 0c             	sub    esp,0xc
c000ee24:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee2b:	e8 5c bf ff ff       	call   c000ad8c <File::exists()>
c000ee30:	83 c4 10             	add    esp,0x10
c000ee33:	84 c0                	test   al,al
c000ee35:	74 05                	je     c000ee3c <ACPI::open(int, int, void*)+0x388>
c000ee37:	b0 01                	mov    al,0x1
c000ee39:	eb 05                	jmp    c000ee40 <ACPI::open(int, int, void*)+0x38c>
c000ee3b:	90                   	nop
c000ee3c:	b0 00                	mov    al,0x0
c000ee3e:	66 90                	xchg   ax,ax
c000ee40:	84 c0                	test   al,al
c000ee42:	74 28                	je     c000ee6c <ACPI::open(int, int, void*)+0x3b8>
c000ee44:	83 ec 08             	sub    esp,0x8
c000ee47:	6a 01                	push   0x1
c000ee49:	68 29 e4 01 c0       	push   0xc001e429
c000ee4e:	e8 3f 3f 00 00       	call   c0012d92 <Thr::loadDLL(char const*, bool)>
c000ee53:	83 c4 10             	add    esp,0x10
c000ee56:	83 ec 08             	sub    esp,0x8
c000ee59:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ee60:	50                   	push   eax
c000ee61:	e8 5d 41 00 00       	call   c0012fc3 <Thr::executeDLL(unsigned long, void*)>
c000ee66:	83 c4 10             	add    esp,0x10
c000ee69:	8d 76 00             	lea    esi,[esi+0x0]
c000ee6c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee74:	74 2a                	je     c000eea0 <ACPI::open(int, int, void*)+0x3ec>
c000ee76:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee7e:	74 20                	je     c000eea0 <ACPI::open(int, int, void*)+0x3ec>
c000ee80:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ee87:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee89:	83 c0 08             	add    eax,0x8
c000ee8c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee8e:	83 ec 0c             	sub    esp,0xc
c000ee91:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee98:	ff d0                	call   eax
c000ee9a:	83 c4 10             	add    esp,0x10
c000ee9d:	8d 76 00             	lea    esi,[esi+0x0]
c000eea0:	a1 88 33 02 c0       	mov    eax,ds:0xc0023388
c000eea5:	83 ec 08             	sub    esp,0x8
c000eea8:	68 46 e4 01 c0       	push   0xc001e446
c000eead:	50                   	push   eax
c000eeae:	e8 31 f2 ff ff       	call   c000e0e4 <findDataTable(unsigned char*, char*)>
c000eeb3:	83 c4 10             	add    esp,0x10
c000eeb6:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000eebd:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000eec5:	74 19                	je     c000eee0 <ACPI::open(int, int, void*)+0x42c>
c000eec7:	83 ec 08             	sub    esp,0x8
c000eeca:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eed1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eed8:	e8 67 fb ff ff       	call   c000ea44 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000eedd:	83 c4 10             	add    esp,0x10
c000eee0:	b8 00 00 00 00       	mov    eax,0x0
c000eee5:	81 c4 70 01 00 00    	add    esp,0x170
c000eeeb:	5b                   	pop    ebx
c000eeec:	5e                   	pop    esi
c000eeed:	5f                   	pop    edi
c000eeee:	c3                   	ret    
c000eeef:	90                   	nop

c000eef0 <CPU::close(int, int, void*)>:
c000eef0:	31 c0                	xor    eax,eax
c000eef2:	c3                   	ret    
c000eef3:	90                   	nop

c000eef4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000eef4:	60                   	pusha  
c000eef5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eef9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eefd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ef01:	9c                   	pushf  
c000ef02:	fa                   	cli    
c000ef03:	0f 09                	wbinvd 
c000ef05:	0f 30                	wrmsr  
c000ef07:	9d                   	popf   
c000ef08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ef0c:	89 02                	mov    DWORD PTR [edx],eax
c000ef0e:	61                   	popa   
c000ef0f:	c3                   	ret    

c000ef10 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ef10:	60                   	pusha  
c000ef11:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef15:	9c                   	pushf  
c000ef16:	fa                   	cli    
c000ef17:	0f 09                	wbinvd 
c000ef19:	31 c0                	xor    eax,eax
c000ef1b:	31 d2                	xor    edx,edx
c000ef1d:	0f 32                	rdmsr  
c000ef1f:	9d                   	popf   
c000ef20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef24:	89 02                	mov    DWORD PTR [edx],eax
c000ef26:	61                   	popa   
c000ef27:	c3                   	ret    

c000ef28 <CPU::AMD_K6_writeback(int, int, int)>:
c000ef28:	56                   	push   esi
c000ef29:	53                   	push   ebx
c000ef2a:	83 ec 10             	sub    esp,0x10
c000ef2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef31:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ef36:	75 5d                	jne    c000ef95 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef38:	83 f8 08             	cmp    eax,0x8
c000ef3b:	75 09                	jne    c000ef46 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ef3d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ef42:	7e 13                	jle    c000ef57 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef44:	eb 30                	jmp    c000ef76 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef46:	83 f8 06             	cmp    eax,0x6
c000ef49:	7c 4a                	jl     c000ef95 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef4b:	83 f8 07             	cmp    eax,0x7
c000ef4e:	7e 07                	jle    c000ef57 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef50:	83 f8 09             	cmp    eax,0x9
c000ef53:	74 21                	je     c000ef76 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef55:	eb 3e                	jmp    c000ef95 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef57:	89 e6                	mov    esi,esp
c000ef59:	8b 1d 9c 0b 02 c0    	mov    ebx,DWORD PTR ds:0xc0020b9c
c000ef5f:	56                   	push   esi
c000ef60:	c1 eb 15             	shr    ebx,0x15
c000ef63:	68 82 00 00 c0       	push   0xc0000082
c000ef68:	83 e3 7e             	and    ebx,0x7e
c000ef6b:	e8 a0 ff ff ff       	call   c000ef10 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef70:	56                   	push   esi
c000ef71:	6a 00                	push   0x0
c000ef73:	53                   	push   ebx
c000ef74:	eb 12                	jmp    c000ef88 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ef76:	89 e3                	mov    ebx,esp
c000ef78:	53                   	push   ebx
c000ef79:	68 82 00 00 c0       	push   0xc0000082
c000ef7e:	e8 8d ff ff ff       	call   c000ef10 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef83:	53                   	push   ebx
c000ef84:	6a 00                	push   0x0
c000ef86:	6a 00                	push   0x0
c000ef88:	68 82 00 00 c0       	push   0xc0000082
c000ef8d:	e8 62 ff ff ff       	call   c000eef4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ef92:	83 c4 18             	add    esp,0x18
c000ef95:	83 c4 10             	add    esp,0x10
c000ef98:	5b                   	pop    ebx
c000ef99:	5e                   	pop    esi
c000ef9a:	c3                   	ret    
c000ef9b:	90                   	nop

c000ef9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ef9c:	55                   	push   ebp
c000ef9d:	57                   	push   edi
c000ef9e:	56                   	push   esi
c000ef9f:	53                   	push   ebx
c000efa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efa4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000efa8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000efac:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000efb0:	39 05 50 f8 01 c0    	cmp    DWORD PTR ds:0xc001f850,eax
c000efb6:	75 23                	jne    c000efdb <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000efb8:	a1 ec 35 02 c0       	mov    eax,ds:0xc00235ec
c000efbd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000efc1:	89 06                	mov    DWORD PTR [esi],eax
c000efc3:	a1 e8 35 02 c0       	mov    eax,ds:0xc00235e8
c000efc8:	89 07                	mov    DWORD PTR [edi],eax
c000efca:	a1 e4 35 02 c0       	mov    eax,ds:0xc00235e4
c000efcf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000efd2:	a1 e0 35 02 c0       	mov    eax,ds:0xc00235e0
c000efd7:	89 02                	mov    DWORD PTR [edx],eax
c000efd9:	eb 3f                	jmp    c000f01a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000efdb:	31 c9                	xor    ecx,ecx
c000efdd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efe1:	0f a2                	cpuid  
c000efe3:	89 06                	mov    DWORD PTR [esi],eax
c000efe5:	89 1f                	mov    DWORD PTR [edi],ebx
c000efe7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efeb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000efee:	89 10                	mov    DWORD PTR [eax],edx
c000eff0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eff4:	a3 50 f8 01 c0       	mov    ds:0xc001f850,eax
c000eff9:	8b 06                	mov    eax,DWORD PTR [esi]
c000effb:	a3 ec 35 02 c0       	mov    ds:0xc00235ec,eax
c000f000:	8b 07                	mov    eax,DWORD PTR [edi]
c000f002:	a3 e8 35 02 c0       	mov    ds:0xc00235e8,eax
c000f007:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f00a:	a3 e4 35 02 c0       	mov    ds:0xc00235e4,eax
c000f00f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f013:	8b 00                	mov    eax,DWORD PTR [eax]
c000f015:	a3 e0 35 02 c0       	mov    ds:0xc00235e0,eax
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	5f                   	pop    edi
c000f01d:	5d                   	pop    ebp
c000f01e:	c3                   	ret    
c000f01f:	90                   	nop

c000f020 <CPU::cpuidCheckEDX(unsigned int)>:
c000f020:	83 ec 10             	sub    esp,0x10
c000f023:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f027:	50                   	push   eax
c000f028:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f02c:	50                   	push   eax
c000f02d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f031:	50                   	push   eax
c000f032:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f036:	50                   	push   eax
c000f037:	6a 01                	push   0x1
c000f039:	e8 5e ff ff ff       	call   c000ef9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f03e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f042:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f046:	0f 95 c0             	setne  al
c000f049:	83 c4 24             	add    esp,0x24
c000f04c:	c3                   	ret    
c000f04d:	90                   	nop

c000f04e <CPU::cpuidCheckECX(unsigned int)>:
c000f04e:	83 ec 10             	sub    esp,0x10
c000f051:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f055:	50                   	push   eax
c000f056:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f05a:	50                   	push   eax
c000f05b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f05f:	50                   	push   eax
c000f060:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f064:	50                   	push   eax
c000f065:	6a 01                	push   0x1
c000f067:	e8 30 ff ff ff       	call   c000ef9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f06c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f070:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f074:	0f 95 c0             	setne  al
c000f077:	83 c4 24             	add    esp,0x24
c000f07a:	c3                   	ret    
c000f07b:	90                   	nop

c000f07c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f07c:	83 ec 10             	sub    esp,0x10
c000f07f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f083:	50                   	push   eax
c000f084:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f088:	50                   	push   eax
c000f089:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f08d:	50                   	push   eax
c000f08e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f092:	50                   	push   eax
c000f093:	6a 07                	push   0x7
c000f095:	e8 02 ff ff ff       	call   c000ef9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f09a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f09e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f0a2:	0f 95 c0             	setne  al
c000f0a5:	83 c4 24             	add    esp,0x24
c000f0a8:	c3                   	ret    
c000f0a9:	90                   	nop

c000f0aa <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f0aa:	83 ec 10             	sub    esp,0x10
c000f0ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0b1:	50                   	push   eax
c000f0b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0b6:	50                   	push   eax
c000f0b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0bb:	50                   	push   eax
c000f0bc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0c0:	50                   	push   eax
c000f0c1:	6a 07                	push   0x7
c000f0c3:	e8 d4 fe ff ff       	call   c000ef9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0cc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f0d0:	0f 95 c0             	setne  al
c000f0d3:	83 c4 24             	add    esp,0x24
c000f0d6:	c3                   	ret    
c000f0d7:	90                   	nop

c000f0d8 <CPU::CPU()>:
c000f0d8:	83 ec 0c             	sub    esp,0xc
c000f0db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0df:	83 ec 08             	sub    esp,0x8
c000f0e2:	68 69 e5 01 c0       	push   0xc001e569
c000f0e7:	50                   	push   eax
c000f0e8:	e8 d3 c9 ff ff       	call   c000bac0 <Device::Device(char const*)>
c000f0ed:	83 c4 10             	add    esp,0x10
c000f0f0:	ba f0 e5 01 c0       	mov    edx,0xc001e5f0
c000f0f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0f9:	89 10                	mov    DWORD PTR [eax],edx
c000f0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0ff:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f109:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f10d:	05 78 01 00 00       	add    eax,0x178
c000f112:	83 ec 0c             	sub    esp,0xc
c000f115:	50                   	push   eax
c000f116:	e8 6f 7f ff ff       	call   c000708a <GDT::GDT()>
c000f11b:	83 c4 10             	add    esp,0x10
c000f11e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f122:	05 7c 09 00 00       	add    eax,0x97c
c000f127:	83 ec 0c             	sub    esp,0xc
c000f12a:	50                   	push   eax
c000f12b:	e8 94 81 ff ff       	call   c00072c4 <IDT::IDT()>
c000f130:	83 c4 10             	add    esp,0x10
c000f133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f137:	05 7c 11 00 00       	add    eax,0x117c
c000f13c:	83 ec 0c             	sub    esp,0xc
c000f13f:	50                   	push   eax
c000f140:	e8 93 9a ff ff       	call   c0008bd8 <TSS::TSS()>
c000f145:	83 c4 10             	add    esp,0x10
c000f148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f14c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f153:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f157:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f161:	90                   	nop
c000f162:	83 c4 0c             	add    esp,0xc
c000f165:	c3                   	ret    

c000f166 <CPU::displayFeatures()>:
c000f166:	c3                   	ret    
c000f167:	90                   	nop

c000f168 <CPU::detectFeatures()>:
c000f168:	55                   	push   ebp
c000f169:	57                   	push   edi
c000f16a:	56                   	push   esi
c000f16b:	53                   	push   ebx
c000f16c:	83 ec 30             	sub    esp,0x30
c000f16f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f173:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f17d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f184:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f18a:	6a 0d                	push   0xd
c000f18c:	6a 00                	push   0x0
c000f18e:	55                   	push   ebp
c000f18f:	e8 4c 13 ff ff       	call   c00004e0 <memset>
c000f194:	83 c4 10             	add    esp,0x10
c000f197:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000f19c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f1a3:	0f 84 d5 05 00 00    	je     c000f77e <CPU::detectFeatures()+0x616>
c000f1a9:	83 ec 0c             	sub    esp,0xc
c000f1ac:	89 ef                	mov    edi,ebp
c000f1ae:	6a 10                	push   0x10
c000f1b0:	e8 6b fe ff ff       	call   c000f020 <CPU::cpuidCheckEDX(unsigned int)>
c000f1b5:	83 e0 01             	and    eax,0x1
c000f1b8:	8d 14 00             	lea    edx,[eax+eax*1]
c000f1bb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1c1:	83 e0 fd             	and    eax,0xfffffffd
c000f1c4:	09 d0                	or     eax,edx
c000f1c6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1cc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f1d3:	e8 48 fe ff ff       	call   c000f020 <CPU::cpuidCheckEDX(unsigned int)>
c000f1d8:	83 e0 01             	and    eax,0x1
c000f1db:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f1e2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1e8:	83 e0 fb             	and    eax,0xfffffffb
c000f1eb:	09 d0                	or     eax,edx
c000f1ed:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1f3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f1fa:	e8 21 fe ff ff       	call   c000f020 <CPU::cpuidCheckEDX(unsigned int)>
c000f1ff:	83 e0 01             	and    eax,0x1
c000f202:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f209:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f20f:	83 e0 f7             	and    eax,0xfffffff7
c000f212:	09 d0                	or     eax,edx
c000f214:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f21a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f221:	e8 fa fd ff ff       	call   c000f020 <CPU::cpuidCheckEDX(unsigned int)>
c000f226:	83 e0 01             	and    eax,0x1
c000f229:	c1 e0 04             	shl    eax,0x4
c000f22c:	88 c2                	mov    dl,al
c000f22e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f234:	83 e0 ef             	and    eax,0xffffffef
c000f237:	09 d0                	or     eax,edx
c000f239:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f23f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f246:	e8 d5 fd ff ff       	call   c000f020 <CPU::cpuidCheckEDX(unsigned int)>
c000f24b:	83 e0 01             	and    eax,0x1
c000f24e:	c1 e0 05             	shl    eax,0x5
c000f251:	88 c2                	mov    dl,al
c000f253:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f259:	83 e0 df             	and    eax,0xffffffdf
c000f25c:	09 d0                	or     eax,edx
c000f25e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f264:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f26b:	e8 b0 fd ff ff       	call   c000f020 <CPU::cpuidCheckEDX(unsigned int)>
c000f270:	83 e0 01             	and    eax,0x1
c000f273:	8d 14 00             	lea    edx,[eax+eax*1]
c000f276:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f27c:	83 e0 fd             	and    eax,0xfffffffd
c000f27f:	09 d0                	or     eax,edx
c000f281:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f287:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f28e:	e8 8d fd ff ff       	call   c000f020 <CPU::cpuidCheckEDX(unsigned int)>
c000f293:	83 e0 01             	and    eax,0x1
c000f296:	c1 e0 06             	shl    eax,0x6
c000f299:	88 c2                	mov    dl,al
c000f29b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f2a1:	83 e0 bf             	and    eax,0xffffffbf
c000f2a4:	09 d0                	or     eax,edx
c000f2a6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f2ac:	58                   	pop    eax
c000f2ad:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2b1:	50                   	push   eax
c000f2b2:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2b6:	50                   	push   eax
c000f2b7:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f2bb:	56                   	push   esi
c000f2bc:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2c0:	50                   	push   eax
c000f2c1:	6a 00                	push   0x0
c000f2c3:	e8 d4 fc ff ff       	call   c000ef9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2c8:	b8 04 00 00 00       	mov    eax,0x4
c000f2cd:	89 c1                	mov    ecx,eax
c000f2cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2d1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f2d7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f2db:	89 c1                	mov    ecx,eax
c000f2dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2df:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f2e5:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f2e9:	89 c1                	mov    ecx,eax
c000f2eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2ed:	83 c4 18             	add    esp,0x18
c000f2f0:	68 78 e4 01 c0       	push   0xc001e478
c000f2f5:	55                   	push   ebp
c000f2f6:	e8 f5 13 ff ff       	call   c00006f0 <strcmp>
c000f2fb:	83 c4 10             	add    esp,0x10
c000f2fe:	85 c0                	test   eax,eax
c000f300:	75 0f                	jne    c000f311 <CPU::detectFeatures()+0x1a9>
c000f302:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f30c:	e9 22 02 00 00       	jmp    c000f533 <CPU::detectFeatures()+0x3cb>
c000f311:	50                   	push   eax
c000f312:	50                   	push   eax
c000f313:	68 85 e4 01 c0       	push   0xc001e485
c000f318:	55                   	push   ebp
c000f319:	e8 d2 13 ff ff       	call   c00006f0 <strcmp>
c000f31e:	83 c4 10             	add    esp,0x10
c000f321:	85 c0                	test   eax,eax
c000f323:	74 dd                	je     c000f302 <CPU::detectFeatures()+0x19a>
c000f325:	50                   	push   eax
c000f326:	50                   	push   eax
c000f327:	68 92 e4 01 c0       	push   0xc001e492
c000f32c:	55                   	push   ebp
c000f32d:	e8 be 13 ff ff       	call   c00006f0 <strcmp>
c000f332:	83 c4 10             	add    esp,0x10
c000f335:	85 c0                	test   eax,eax
c000f337:	74 2a                	je     c000f363 <CPU::detectFeatures()+0x1fb>
c000f339:	50                   	push   eax
c000f33a:	50                   	push   eax
c000f33b:	68 9f e4 01 c0       	push   0xc001e49f
c000f340:	55                   	push   ebp
c000f341:	e8 aa 13 ff ff       	call   c00006f0 <strcmp>
c000f346:	83 c4 10             	add    esp,0x10
c000f349:	85 c0                	test   eax,eax
c000f34b:	74 16                	je     c000f363 <CPU::detectFeatures()+0x1fb>
c000f34d:	50                   	push   eax
c000f34e:	50                   	push   eax
c000f34f:	68 ac e4 01 c0       	push   0xc001e4ac
c000f354:	55                   	push   ebp
c000f355:	e8 96 13 ff ff       	call   c00006f0 <strcmp>
c000f35a:	83 c4 10             	add    esp,0x10
c000f35d:	85 c0                	test   eax,eax
c000f35f:	74 48                	je     c000f3a9 <CPU::detectFeatures()+0x241>
c000f361:	eb 0f                	jmp    c000f372 <CPU::detectFeatures()+0x20a>
c000f363:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f36d:	e9 c1 01 00 00       	jmp    c000f533 <CPU::detectFeatures()+0x3cb>
c000f372:	50                   	push   eax
c000f373:	50                   	push   eax
c000f374:	68 b9 e4 01 c0       	push   0xc001e4b9
c000f379:	55                   	push   ebp
c000f37a:	e8 71 13 ff ff       	call   c00006f0 <strcmp>
c000f37f:	83 c4 10             	add    esp,0x10
c000f382:	85 c0                	test   eax,eax
c000f384:	74 23                	je     c000f3a9 <CPU::detectFeatures()+0x241>
c000f386:	57                   	push   edi
c000f387:	57                   	push   edi
c000f388:	68 c6 e4 01 c0       	push   0xc001e4c6
c000f38d:	55                   	push   ebp
c000f38e:	e8 5d 13 ff ff       	call   c00006f0 <strcmp>
c000f393:	83 c4 10             	add    esp,0x10
c000f396:	85 c0                	test   eax,eax
c000f398:	75 1e                	jne    c000f3b8 <CPU::detectFeatures()+0x250>
c000f39a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f3a4:	e9 8a 01 00 00       	jmp    c000f533 <CPU::detectFeatures()+0x3cb>
c000f3a9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f3b3:	e9 7b 01 00 00       	jmp    c000f533 <CPU::detectFeatures()+0x3cb>
c000f3b8:	56                   	push   esi
c000f3b9:	56                   	push   esi
c000f3ba:	68 d3 e4 01 c0       	push   0xc001e4d3
c000f3bf:	55                   	push   ebp
c000f3c0:	e8 2b 13 ff ff       	call   c00006f0 <strcmp>
c000f3c5:	83 c4 10             	add    esp,0x10
c000f3c8:	85 c0                	test   eax,eax
c000f3ca:	75 0f                	jne    c000f3db <CPU::detectFeatures()+0x273>
c000f3cc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f3d6:	e9 58 01 00 00       	jmp    c000f533 <CPU::detectFeatures()+0x3cb>
c000f3db:	51                   	push   ecx
c000f3dc:	51                   	push   ecx
c000f3dd:	68 92 e4 01 c0       	push   0xc001e492
c000f3e2:	55                   	push   ebp
c000f3e3:	e8 08 13 ff ff       	call   c00006f0 <strcmp>
c000f3e8:	83 c4 10             	add    esp,0x10
c000f3eb:	85 c0                	test   eax,eax
c000f3ed:	75 0f                	jne    c000f3fe <CPU::detectFeatures()+0x296>
c000f3ef:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f3f9:	e9 35 01 00 00       	jmp    c000f533 <CPU::detectFeatures()+0x3cb>
c000f3fe:	52                   	push   edx
c000f3ff:	52                   	push   edx
c000f400:	68 e0 e4 01 c0       	push   0xc001e4e0
c000f405:	55                   	push   ebp
c000f406:	e8 e5 12 ff ff       	call   c00006f0 <strcmp>
c000f40b:	83 c4 10             	add    esp,0x10
c000f40e:	85 c0                	test   eax,eax
c000f410:	75 0f                	jne    c000f421 <CPU::detectFeatures()+0x2b9>
c000f412:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f41c:	e9 12 01 00 00       	jmp    c000f533 <CPU::detectFeatures()+0x3cb>
c000f421:	50                   	push   eax
c000f422:	50                   	push   eax
c000f423:	68 ed e4 01 c0       	push   0xc001e4ed
c000f428:	55                   	push   ebp
c000f429:	e8 c2 12 ff ff       	call   c00006f0 <strcmp>
c000f42e:	83 c4 10             	add    esp,0x10
c000f431:	85 c0                	test   eax,eax
c000f433:	75 0f                	jne    c000f444 <CPU::detectFeatures()+0x2dc>
c000f435:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f43f:	e9 ef 00 00 00       	jmp    c000f533 <CPU::detectFeatures()+0x3cb>
c000f444:	50                   	push   eax
c000f445:	50                   	push   eax
c000f446:	68 fa e4 01 c0       	push   0xc001e4fa
c000f44b:	55                   	push   ebp
c000f44c:	e8 9f 12 ff ff       	call   c00006f0 <strcmp>
c000f451:	83 c4 10             	add    esp,0x10
c000f454:	85 c0                	test   eax,eax
c000f456:	75 0f                	jne    c000f467 <CPU::detectFeatures()+0x2ff>
c000f458:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f462:	e9 cc 00 00 00       	jmp    c000f533 <CPU::detectFeatures()+0x3cb>
c000f467:	50                   	push   eax
c000f468:	50                   	push   eax
c000f469:	68 07 e5 01 c0       	push   0xc001e507
c000f46e:	55                   	push   ebp
c000f46f:	e8 7c 12 ff ff       	call   c00006f0 <strcmp>
c000f474:	83 c4 10             	add    esp,0x10
c000f477:	85 c0                	test   eax,eax
c000f479:	75 0f                	jne    c000f48a <CPU::detectFeatures()+0x322>
c000f47b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f485:	e9 a9 00 00 00       	jmp    c000f533 <CPU::detectFeatures()+0x3cb>
c000f48a:	50                   	push   eax
c000f48b:	50                   	push   eax
c000f48c:	68 14 e5 01 c0       	push   0xc001e514
c000f491:	55                   	push   ebp
c000f492:	e8 59 12 ff ff       	call   c00006f0 <strcmp>
c000f497:	83 c4 10             	add    esp,0x10
c000f49a:	85 c0                	test   eax,eax
c000f49c:	75 0f                	jne    c000f4ad <CPU::detectFeatures()+0x345>
c000f49e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f4a8:	e9 86 00 00 00       	jmp    c000f533 <CPU::detectFeatures()+0x3cb>
c000f4ad:	50                   	push   eax
c000f4ae:	50                   	push   eax
c000f4af:	68 21 e5 01 c0       	push   0xc001e521
c000f4b4:	55                   	push   ebp
c000f4b5:	e8 36 12 ff ff       	call   c00006f0 <strcmp>
c000f4ba:	83 c4 10             	add    esp,0x10
c000f4bd:	85 c0                	test   eax,eax
c000f4bf:	75 0c                	jne    c000f4cd <CPU::detectFeatures()+0x365>
c000f4c1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f4cb:	eb 66                	jmp    c000f533 <CPU::detectFeatures()+0x3cb>
c000f4cd:	50                   	push   eax
c000f4ce:	50                   	push   eax
c000f4cf:	68 2e e5 01 c0       	push   0xc001e52e
c000f4d4:	55                   	push   ebp
c000f4d5:	e8 16 12 ff ff       	call   c00006f0 <strcmp>
c000f4da:	83 c4 10             	add    esp,0x10
c000f4dd:	85 c0                	test   eax,eax
c000f4df:	75 0c                	jne    c000f4ed <CPU::detectFeatures()+0x385>
c000f4e1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f4eb:	eb 46                	jmp    c000f533 <CPU::detectFeatures()+0x3cb>
c000f4ed:	57                   	push   edi
c000f4ee:	57                   	push   edi
c000f4ef:	68 3b e5 01 c0       	push   0xc001e53b
c000f4f4:	55                   	push   ebp
c000f4f5:	e8 f6 11 ff ff       	call   c00006f0 <strcmp>
c000f4fa:	83 c4 10             	add    esp,0x10
c000f4fd:	85 c0                	test   eax,eax
c000f4ff:	74 e0                	je     c000f4e1 <CPU::detectFeatures()+0x379>
c000f501:	56                   	push   esi
c000f502:	56                   	push   esi
c000f503:	68 48 e5 01 c0       	push   0xc001e548
c000f508:	55                   	push   ebp
c000f509:	e8 e2 11 ff ff       	call   c00006f0 <strcmp>
c000f50e:	83 c4 10             	add    esp,0x10
c000f511:	85 c0                	test   eax,eax
c000f513:	74 cc                	je     c000f4e1 <CPU::detectFeatures()+0x379>
c000f515:	51                   	push   ecx
c000f516:	51                   	push   ecx
c000f517:	68 55 e5 01 c0       	push   0xc001e555
c000f51c:	55                   	push   ebp
c000f51d:	e8 ce 11 ff ff       	call   c00006f0 <strcmp>
c000f522:	83 c4 10             	add    esp,0x10
c000f525:	85 c0                	test   eax,eax
c000f527:	74 b8                	je     c000f4e1 <CPU::detectFeatures()+0x379>
c000f529:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f533:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f538:	0f 86 be 00 00 00    	jbe    c000f5fc <CPU::detectFeatures()+0x494>
c000f53e:	83 ec 0c             	sub    esp,0xc
c000f541:	68 80 00 00 00       	push   0x80
c000f546:	e8 31 fb ff ff       	call   c000f07c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f54b:	83 e0 01             	and    eax,0x1
c000f54e:	c1 e0 06             	shl    eax,0x6
c000f551:	88 c2                	mov    dl,al
c000f553:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f559:	83 e0 bf             	and    eax,0xffffffbf
c000f55c:	09 d0                	or     eax,edx
c000f55e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f564:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f56b:	e8 0c fb ff ff       	call   c000f07c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f570:	83 e0 01             	and    eax,0x1
c000f573:	c1 e0 04             	shl    eax,0x4
c000f576:	88 c2                	mov    dl,al
c000f578:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f57e:	83 e0 ef             	and    eax,0xffffffef
c000f581:	09 d0                	or     eax,edx
c000f583:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f589:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f590:	e8 e7 fa ff ff       	call   c000f07c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f595:	c1 e0 07             	shl    eax,0x7
c000f598:	88 c2                	mov    dl,al
c000f59a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f5a0:	83 e0 7f             	and    eax,0x7f
c000f5a3:	09 d0                	or     eax,edx
c000f5a5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f5ab:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f5b2:	e8 f3 fa ff ff       	call   c000f0aa <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5b7:	83 e0 01             	and    eax,0x1
c000f5ba:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f5c1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f5c7:	83 e0 f7             	and    eax,0xfffffff7
c000f5ca:	09 d0                	or     eax,edx
c000f5cc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f5d2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f5d9:	e8 cc fa ff ff       	call   c000f0aa <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5de:	83 c4 10             	add    esp,0x10
c000f5e1:	83 e0 01             	and    eax,0x1
c000f5e4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f5eb:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f5f1:	83 e0 fb             	and    eax,0xfffffffb
c000f5f4:	09 d0                	or     eax,edx
c000f5f6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f5fc:	83 ec 0c             	sub    esp,0xc
c000f5ff:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f603:	50                   	push   eax
c000f604:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f608:	50                   	push   eax
c000f609:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f60d:	56                   	push   esi
c000f60e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f612:	50                   	push   eax
c000f613:	6a 01                	push   0x1
c000f615:	e8 82 f9 ff ff       	call   c000ef9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f61a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f61e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f624:	88 ca                	mov    dl,cl
c000f626:	83 e0 f0             	and    eax,0xfffffff0
c000f629:	83 e2 0f             	and    edx,0xf
c000f62c:	09 d0                	or     eax,edx
c000f62e:	88 ca                	mov    dl,cl
c000f630:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f636:	c0 ea 04             	shr    dl,0x4
c000f639:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f63d:	0f b6 c2             	movzx  eax,dl
c000f640:	83 c4 20             	add    esp,0x20
c000f643:	c1 e0 06             	shl    eax,0x6
c000f646:	89 c7                	mov    edi,eax
c000f648:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f64e:	66 25 3f c0          	and    ax,0xc03f
c000f652:	09 f8                	or     eax,edi
c000f654:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f65b:	89 c8                	mov    eax,ecx
c000f65d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f664:	c1 e8 08             	shr    eax,0x8
c000f667:	83 e5 3f             	and    ebp,0x3f
c000f66a:	83 e0 0f             	and    eax,0xf
c000f66d:	89 c7                	mov    edi,eax
c000f66f:	c1 e7 06             	shl    edi,0x6
c000f672:	09 ef                	or     edi,ebp
c000f674:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f67b:	89 fa                	mov    edx,edi
c000f67d:	83 e5 c0             	and    ebp,0xffffffc0
c000f680:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f686:	88 c2                	mov    dl,al
c000f688:	c0 ea 02             	shr    dl,0x2
c000f68b:	89 d7                	mov    edi,edx
c000f68d:	09 ef                	or     edi,ebp
c000f68f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f695:	89 fa                	mov    edx,edi
c000f697:	83 e5 cf             	and    ebp,0xffffffcf
c000f69a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f6a0:	89 cf                	mov    edi,ecx
c000f6a2:	c1 ef 0c             	shr    edi,0xc
c000f6a5:	83 e7 03             	and    edi,0x3
c000f6a8:	c1 e7 04             	shl    edi,0x4
c000f6ab:	09 ef                	or     edi,ebp
c000f6ad:	3c 06                	cmp    al,0x6
c000f6af:	89 fa                	mov    edx,edi
c000f6b1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f6b7:	74 04                	je     c000f6bd <CPU::detectFeatures()+0x555>
c000f6b9:	3c 0f                	cmp    al,0xf
c000f6bb:	75 5c                	jne    c000f719 <CPU::detectFeatures()+0x5b1>
c000f6bd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f6c1:	89 cf                	mov    edi,ecx
c000f6c3:	c1 ef 10             	shr    edi,0x10
c000f6c6:	c1 e7 04             	shl    edi,0x4
c000f6c9:	09 fa                	or     edx,edi
c000f6cb:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f6d1:	0f b6 d2             	movzx  edx,dl
c000f6d4:	66 81 e7 3f c0       	and    di,0xc03f
c000f6d9:	c1 e2 06             	shl    edx,0x6
c000f6dc:	09 fa                	or     edx,edi
c000f6de:	3c 0f                	cmp    al,0xf
c000f6e0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f6e7:	75 30                	jne    c000f719 <CPU::detectFeatures()+0x5b1>
c000f6e9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f6ef:	c1 e9 14             	shr    ecx,0x14
c000f6f2:	83 e0 3f             	and    eax,0x3f
c000f6f5:	83 c1 0f             	add    ecx,0xf
c000f6f8:	88 ca                	mov    dl,cl
c000f6fa:	c0 e9 02             	shr    cl,0x2
c000f6fd:	c1 e2 06             	shl    edx,0x6
c000f700:	09 d0                	or     eax,edx
c000f702:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f708:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f70e:	83 e0 c0             	and    eax,0xffffffc0
c000f711:	09 c1                	or     ecx,eax
c000f713:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f719:	83 ec 0c             	sub    esp,0xc
c000f71c:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f723:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f727:	50                   	push   eax
c000f728:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f72c:	55                   	push   ebp
c000f72d:	56                   	push   esi
c000f72e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f732:	57                   	push   edi
c000f733:	68 00 00 00 80       	push   0x80000000
c000f738:	e8 5f f8 ff ff       	call   c000ef9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f73d:	83 c4 20             	add    esp,0x20
c000f740:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f748:	76 22                	jbe    c000f76c <CPU::detectFeatures()+0x604>
c000f74a:	83 ec 0c             	sub    esp,0xc
c000f74d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f751:	50                   	push   eax
c000f752:	55                   	push   ebp
c000f753:	56                   	push   esi
c000f754:	57                   	push   edi
c000f755:	68 01 00 00 80       	push   0x80000001
c000f75a:	e8 3d f8 ff ff       	call   c000ef9c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f75f:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f769:	83 c4 20             	add    esp,0x20
c000f76c:	52                   	push   edx
c000f76d:	52                   	push   edx
c000f76e:	68 61 e5 01 c0       	push   0xc001e561
c000f773:	53                   	push   ebx
c000f774:	e8 39 c3 ff ff       	call   c000bab2 <Device::setName(char const*)>
c000f779:	83 c4 10             	add    esp,0x10
c000f77c:	eb 67                	jmp    c000f7e5 <CPU::detectFeatures()+0x67d>
c000f77e:	50                   	push   eax
c000f77f:	50                   	push   eax
c000f780:	68 c6 e4 01 c0       	push   0xc001e4c6
c000f785:	55                   	push   ebp
c000f786:	e8 85 0e ff ff       	call   c0000610 <strcpy>
c000f78b:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f795:	e8 29 0a ff ff       	call   c00001c3 <is486>
c000f79a:	83 c4 10             	add    esp,0x10
c000f79d:	85 c0                	test   eax,eax
c000f79f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f7a5:	74 1d                	je     c000f7c4 <CPU::detectFeatures()+0x65c>
c000f7a7:	83 c8 07             	or     eax,0x7
c000f7aa:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f7b0:	0f 20 c0             	mov    eax,cr0
c000f7b3:	83 e0 14             	and    eax,0x14
c000f7b6:	83 f8 04             	cmp    eax,0x4
c000f7b9:	75 0e                	jne    c000f7c9 <CPU::detectFeatures()+0x661>
c000f7bb:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f7c2:	eb 21                	jmp    c000f7e5 <CPU::detectFeatures()+0x67d>
c000f7c4:	83 e0 f8             	and    eax,0xfffffff8
c000f7c7:	eb e1                	jmp    c000f7aa <CPU::detectFeatures()+0x642>
c000f7c9:	e8 d0 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7ce:	83 e0 01             	and    eax,0x1
c000f7d1:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7d4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7da:	83 e0 fd             	and    eax,0xfffffffd
c000f7dd:	09 d0                	or     eax,edx
c000f7df:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7e5:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f7ec:	74 0e                	je     c000f7fc <CPU::detectFeatures()+0x694>
c000f7ee:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000f7f3:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f7fa:	eb 20                	jmp    c000f81c <CPU::detectFeatures()+0x6b4>
c000f7fc:	e8 9d 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f801:	83 e0 01             	and    eax,0x1
c000f804:	8d 14 00             	lea    edx,[eax+eax*1]
c000f807:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f80d:	83 e0 fd             	and    eax,0xfffffffd
c000f810:	09 d0                	or     eax,edx
c000f812:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f818:	a8 02                	test   al,0x2
c000f81a:	75 d2                	jne    c000f7ee <CPU::detectFeatures()+0x686>
c000f81c:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f823:	83 c4 2c             	add    esp,0x2c
c000f826:	5b                   	pop    ebx
c000f827:	5e                   	pop    esi
c000f828:	5f                   	pop    edi
c000f829:	5d                   	pop    ebp
c000f82a:	c3                   	ret    
c000f82b:	90                   	nop

c000f82c <CPU::setupSMEP()>:
c000f82c:	0f 20 e0             	mov    eax,cr4
c000f82f:	0d 00 00 10 00       	or     eax,0x100000
c000f834:	0f 22 e0             	mov    cr4,eax
c000f837:	c3                   	ret    

c000f838 <CPU::setupUMIP()>:
c000f838:	0f 20 e0             	mov    eax,cr4
c000f83b:	80 cc 08             	or     ah,0x8
c000f83e:	0f 22 e0             	mov    cr4,eax
c000f841:	c3                   	ret    

c000f842 <CPU::setupTSC()>:
c000f842:	0f 20 e0             	mov    eax,cr4
c000f845:	83 c8 04             	or     eax,0x4
c000f848:	0f 22 e0             	mov    cr4,eax
c000f84b:	c3                   	ret    

c000f84c <CPU::setupLargePages()>:
c000f84c:	0f 20 e0             	mov    eax,cr4
c000f84f:	83 c8 10             	or     eax,0x10
c000f852:	0f 22 e0             	mov    cr4,eax
c000f855:	c3                   	ret    

c000f856 <CPU::setupPAT()>:
c000f856:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c000f85b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f862:	74 2c                	je     c000f890 <CPU::setupPAT()+0x3a>
c000f864:	53                   	push   ebx
c000f865:	83 ec 10             	sub    esp,0x10
c000f868:	68 77 02 00 00       	push   0x277
c000f86d:	50                   	push   eax
c000f86e:	e8 8f 75 ff ff       	call   c0006e02 <Computer::rdmsr(unsigned int)>
c000f873:	83 e2 f8             	and    edx,0xfffffff8
c000f876:	83 ca 01             	or     edx,0x1
c000f879:	52                   	push   edx
c000f87a:	50                   	push   eax
c000f87b:	68 77 02 00 00       	push   0x277
c000f880:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c000f886:	e8 a3 75 ff ff       	call   c0006e2e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f88b:	83 c4 28             	add    esp,0x28
c000f88e:	5b                   	pop    ebx
c000f88f:	c3                   	ret    
c000f890:	c3                   	ret    
c000f891:	90                   	nop

c000f892 <CPU::setupMTRR()>:
c000f892:	c3                   	ret    
c000f893:	90                   	nop

c000f894 <CPU::setupGlobalPages()>:
c000f894:	0f 20 e0             	mov    eax,cr4
c000f897:	0c 80                	or     al,0x80
c000f899:	0f 22 e0             	mov    cr4,eax
c000f89c:	c3                   	ret    
c000f89d:	90                   	nop

c000f89e <CPU::allowUsermodeDataAccess()>:
c000f89e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8a2:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f8a9:	74 03                	je     c000f8ae <CPU::allowUsermodeDataAccess()+0x10>
c000f8ab:	0f 01 cb             	stac   
c000f8ae:	c3                   	ret    
c000f8af:	90                   	nop

c000f8b0 <CPU::prohibitUsermodeDataAccess()>:
c000f8b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8b4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f8bb:	74 03                	je     c000f8c0 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f8bd:	0f 01 ca             	clac   
c000f8c0:	c3                   	ret    
c000f8c1:	90                   	nop

c000f8c2 <CPU::setupSMAP()>:
c000f8c2:	0f 20 e0             	mov    eax,cr4
c000f8c5:	0d 00 00 20 00       	or     eax,0x200000
c000f8ca:	0f 22 e0             	mov    cr4,eax
c000f8cd:	eb e1                	jmp    c000f8b0 <CPU::prohibitUsermodeDataAccess()>
c000f8cf:	90                   	nop

c000f8d0 <CPU::setupFeatures()>:
c000f8d0:	53                   	push   ebx
c000f8d1:	83 ec 08             	sub    esp,0x8
c000f8d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8d8:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f8df:	74 18                	je     c000f8f9 <CPU::setupFeatures()+0x29>
c000f8e1:	83 ec 0c             	sub    esp,0xc
c000f8e4:	68 6d e5 01 c0       	push   0xc001e56d
c000f8e9:	e8 fa ab ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000f8ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8f1:	e8 42 ff ff ff       	call   c000f838 <CPU::setupUMIP()>
c000f8f6:	83 c4 10             	add    esp,0x10
c000f8f9:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f900:	74 18                	je     c000f91a <CPU::setupFeatures()+0x4a>
c000f902:	83 ec 0c             	sub    esp,0xc
c000f905:	68 77 e5 01 c0       	push   0xc001e577
c000f90a:	e8 d9 ab ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000f90f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f912:	e8 2b ff ff ff       	call   c000f842 <CPU::setupTSC()>
c000f917:	83 c4 10             	add    esp,0x10
c000f91a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f921:	74 18                	je     c000f93b <CPU::setupFeatures()+0x6b>
c000f923:	83 ec 0c             	sub    esp,0xc
c000f926:	68 80 e5 01 c0       	push   0xc001e580
c000f92b:	e8 b8 ab ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000f930:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f933:	e8 14 ff ff ff       	call   c000f84c <CPU::setupLargePages()>
c000f938:	83 c4 10             	add    esp,0x10
c000f93b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f942:	74 18                	je     c000f95c <CPU::setupFeatures()+0x8c>
c000f944:	83 ec 0c             	sub    esp,0xc
c000f947:	68 89 e5 01 c0       	push   0xc001e589
c000f94c:	e8 97 ab ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000f951:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f954:	e8 3b ff ff ff       	call   c000f894 <CPU::setupGlobalPages()>
c000f959:	83 c4 10             	add    esp,0x10
c000f95c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f963:	74 18                	je     c000f97d <CPU::setupFeatures()+0xad>
c000f965:	83 ec 0c             	sub    esp,0xc
c000f968:	68 9b e5 01 c0       	push   0xc001e59b
c000f96d:	e8 76 ab ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c000f972:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f975:	e8 dc fe ff ff       	call   c000f856 <CPU::setupPAT()>
c000f97a:	83 c4 10             	add    esp,0x10
c000f97d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f984:	74 11                	je     c000f997 <CPU::setupFeatures()+0xc7>
c000f986:	c7 44 24 10 a4 e5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e5a4
c000f98e:	83 c4 08             	add    esp,0x8
c000f991:	5b                   	pop    ebx
c000f992:	e9 51 ab ff ff       	jmp    c000a4e8 <Dbg::kprintf(char const*, ...)>
c000f997:	83 c4 08             	add    esp,0x8
c000f99a:	5b                   	pop    ebx
c000f99b:	c3                   	ret    

c000f99c <CPU::open(int, int, void*)>:
c000f99c:	57                   	push   edi
c000f99d:	56                   	push   esi
c000f99e:	53                   	push   ebx
c000f99f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9a3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9a7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f9ad:	83 ec 0c             	sub    esp,0xc
c000f9b0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f9b6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f9bc:	50                   	push   eax
c000f9bd:	e8 2a 77 ff ff       	call   c00070ec <GDT::setup()>
c000f9c2:	83 c4 0c             	add    esp,0xc
c000f9c5:	6a 00                	push   0x0
c000f9c7:	68 ef be ad de       	push   0xdeadbeef
c000f9cc:	57                   	push   edi
c000f9cd:	e8 4a 92 ff ff       	call   c0008c1c <TSS::setup(unsigned long, unsigned long)>
c000f9d2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f9d5:	e8 22 92 ff ff       	call   c0008bfc <TSS::flush()>
c000f9da:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000f9e0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9e3:	e8 52 79 ff ff       	call   c000733a <IDT::setup()>
c000f9e8:	b8 00 04 00 00       	mov    eax,0x400
c000f9ed:	0f 23 f8             	mov    db7,eax
c000f9f0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000f9fa:	e8 a6 80 ff ff       	call   c0007aa5 <Phys::allocatePage()>
c000f9ff:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fa05:	89 30                	mov    DWORD PTR [eax],esi
c000fa07:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fa0d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fa10:	58                   	pop    eax
c000fa11:	5a                   	pop    edx
c000fa12:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fa18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fa1c:	e8 e5 a1 ff ff       	call   c0009c06 <VAS::setCPUSpecific(unsigned long)>
c000fa21:	c7 04 24 ae e5 01 c0 	mov    DWORD PTR [esp],0xc001e5ae
c000fa28:	e8 c6 00 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c000fa2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa30:	e8 33 f7 ff ff       	call   c000f168 <CPU::detectFeatures()>
c000fa35:	c7 04 24 d1 e5 01 c0 	mov    DWORD PTR [esp],0xc001e5d1
c000fa3c:	e8 b2 00 00 00       	call   c000faf3 <KeSetBootMessage(char const*)>
c000fa41:	e8 82 5c 00 00       	call   c00156c8 <HalInitialise()>
c000fa46:	a1 90 0b 02 c0       	mov    eax,ds:0xc0020b90
c000fa4b:	83 e0 10             	and    eax,0x10
c000fa4e:	83 f8 01             	cmp    eax,0x1
c000fa51:	19 c0                	sbb    eax,eax
c000fa53:	83 e0 46             	and    eax,0x46
c000fa56:	83 c0 1e             	add    eax,0x1e
c000fa59:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa5c:	e8 60 d7 ff ff       	call   c000d1c1 <setupTimer(int)>
c000fa61:	83 c4 10             	add    esp,0x10
c000fa64:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fa6a:	f6 05 90 0b 02 c0 20 	test   BYTE PTR ds:0xc0020b90,0x20
c000fa71:	74 0c                	je     c000fa7f <CPU::open(int, int, void*)+0xe3>
c000fa73:	83 ec 0c             	sub    esp,0xc
c000fa76:	53                   	push   ebx
c000fa77:	e8 54 fe ff ff       	call   c000f8d0 <CPU::setupFeatures()>
c000fa7c:	83 c4 10             	add    esp,0x10
c000fa7f:	5b                   	pop    ebx
c000fa80:	31 c0                	xor    eax,eax
c000fa82:	5e                   	pop    esi
c000fa83:	5f                   	pop    edi
c000fa84:	c3                   	ret    

c000fa85 <KeDisplaySplashScreen()>:
c000fa85:	55                   	push   ebp
c000fa86:	bd 05 00 00 00       	mov    ebp,0x5
c000fa8b:	57                   	push   edi
c000fa8c:	bf 60 f8 01 c0       	mov    edi,0xc001f860
c000fa91:	56                   	push   esi
c000fa92:	be 0a 00 00 00       	mov    esi,0xa
c000fa97:	53                   	push   ebx
c000fa98:	31 db                	xor    ebx,ebx
c000fa9a:	83 ec 0c             	sub    esp,0xc
c000fa9d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000faa0:	84 c0                	test   al,al
c000faa2:	74 47                	je     c000faeb <KeDisplaySplashScreen()+0x66>
c000faa4:	80 bb 96 f8 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe076a],0xdb
c000faab:	75 13                	jne    c000fac0 <KeDisplaySplashScreen()+0x3b>
c000faad:	0f b6 93 95 f8 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe076b]
c000fab4:	83 e2 fe             	and    edx,0xfffffffe
c000fab7:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fabd:	75 01                	jne    c000fac0 <KeDisplaySplashScreen()+0x3b>
c000fabf:	46                   	inc    esi
c000fac0:	3c 0d                	cmp    al,0xd
c000fac2:	74 24                	je     c000fae8 <KeDisplaySplashScreen()+0x63>
c000fac4:	3c 0a                	cmp    al,0xa
c000fac6:	75 0a                	jne    c000fad2 <KeDisplaySplashScreen()+0x4d>
c000fac8:	45                   	inc    ebp
c000fac9:	be 0a 00 00 00       	mov    esi,0xa
c000face:	31 db                	xor    ebx,ebx
c000fad0:	eb 16                	jmp    c000fae8 <KeDisplaySplashScreen()+0x63>
c000fad2:	83 ec 0c             	sub    esp,0xc
c000fad5:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fad8:	55                   	push   ebp
c000fad9:	43                   	inc    ebx
c000fada:	52                   	push   edx
c000fadb:	6a 00                	push   0x0
c000fadd:	6a 0e                	push   0xe
c000fadf:	50                   	push   eax
c000fae0:	e8 47 68 00 00       	call   c001632c <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fae5:	83 c4 20             	add    esp,0x20
c000fae8:	47                   	inc    edi
c000fae9:	eb b2                	jmp    c000fa9d <KeDisplaySplashScreen()+0x18>
c000faeb:	83 c4 0c             	add    esp,0xc
c000faee:	5b                   	pop    ebx
c000faef:	5e                   	pop    esi
c000faf0:	5f                   	pop    edi
c000faf1:	5d                   	pop    ebp
c000faf2:	c3                   	ret    

c000faf3 <KeSetBootMessage(char const*)>:
c000faf3:	57                   	push   edi
c000faf4:	56                   	push   esi
c000faf5:	53                   	push   ebx
c000faf6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fafc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fb03:	68 9e 00 00 00       	push   0x9e
c000fb08:	6a 00                	push   0x0
c000fb0a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fb0e:	56                   	push   esi
c000fb0f:	e8 cc 09 ff ff       	call   c00004e0 <memset>
c000fb14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb17:	e8 34 0a ff ff       	call   c0000550 <strlen>
c000fb1c:	ba 50 00 00 00       	mov    edx,0x50
c000fb21:	83 c4 10             	add    esp,0x10
c000fb24:	29 c2                	sub    edx,eax
c000fb26:	31 c9                	xor    ecx,ecx
c000fb28:	83 e2 fe             	and    edx,0xfffffffe
c000fb2b:	01 f2                	add    edx,esi
c000fb2d:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fb32:	84 c0                	test   al,al
c000fb34:	74 0a                	je     c000fb40 <KeSetBootMessage(char const*)+0x4d>
c000fb36:	80 cc 0f             	or     ah,0xf
c000fb39:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fb3d:	41                   	inc    ecx
c000fb3e:	eb ed                	jmp    c000fb2d <KeSetBootMessage(char const*)+0x3a>
c000fb40:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fb45:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fb4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb4c:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fb52:	5b                   	pop    ebx
c000fb53:	5e                   	pop    esi
c000fb54:	5f                   	pop    edi
c000fb55:	c3                   	ret    

c000fb56 <EnvVarContainer::getEnv(char const*)>:
c000fb56:	57                   	push   edi
c000fb57:	56                   	push   esi
c000fb58:	53                   	push   ebx
c000fb59:	31 db                	xor    ebx,ebx
c000fb5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb5f:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fb61:	7e 2b                	jle    c000fb8e <EnvVarContainer::getEnv(char const*)+0x38>
c000fb63:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fb6a:	50                   	push   eax
c000fb6b:	50                   	push   eax
c000fb6c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb6f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fb72:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb76:	e8 75 0b ff ff       	call   c00006f0 <strcmp>
c000fb7b:	83 c4 10             	add    esp,0x10
c000fb7e:	85 c0                	test   eax,eax
c000fb80:	75 09                	jne    c000fb8b <EnvVarContainer::getEnv(char const*)+0x35>
c000fb82:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb85:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fb89:	eb 05                	jmp    c000fb90 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fb8b:	43                   	inc    ebx
c000fb8c:	eb d1                	jmp    c000fb5f <EnvVarContainer::getEnv(char const*)+0x9>
c000fb8e:	31 c0                	xor    eax,eax
c000fb90:	5b                   	pop    ebx
c000fb91:	5e                   	pop    esi
c000fb92:	5f                   	pop    edi
c000fb93:	c3                   	ret    

c000fb94 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fb94:	55                   	push   ebp
c000fb95:	57                   	push   edi
c000fb96:	56                   	push   esi
c000fb97:	53                   	push   ebx
c000fb98:	83 ec 28             	sub    esp,0x28
c000fb9b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fb9f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fba3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fba7:	56                   	push   esi
c000fba8:	e8 a3 09 ff ff       	call   c0000550 <strlen>
c000fbad:	40                   	inc    eax
c000fbae:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbb1:	e8 13 7c ff ff       	call   c00077c9 <malloc>
c000fbb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbbd:	e8 8e 09 ff ff       	call   c0000550 <strlen>
c000fbc2:	40                   	inc    eax
c000fbc3:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbc6:	e8 fe 7b ff ff       	call   c00077c9 <malloc>
c000fbcb:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fbd2:	e8 79 09 ff ff       	call   c0000550 <strlen>
c000fbd7:	83 c4 0c             	add    esp,0xc
c000fbda:	40                   	inc    eax
c000fbdb:	50                   	push   eax
c000fbdc:	6a 00                	push   0x0
c000fbde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbe2:	e8 f9 08 ff ff       	call   c00004e0 <memset>
c000fbe7:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbea:	e8 61 09 ff ff       	call   c0000550 <strlen>
c000fbef:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fbf3:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbf6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbf8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbfb:	89 de                	mov    esi,ebx
c000fbfd:	e8 4e 09 ff ff       	call   c0000550 <strlen>
c000fc02:	83 c4 0c             	add    esp,0xc
c000fc05:	40                   	inc    eax
c000fc06:	50                   	push   eax
c000fc07:	6a 00                	push   0x0
c000fc09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc0d:	e8 ce 08 ff ff       	call   c00004e0 <memset>
c000fc12:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc15:	e8 36 09 ff ff       	call   c0000550 <strlen>
c000fc1a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fc1e:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc21:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc23:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fc26:	40                   	inc    eax
c000fc27:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fc2a:	c1 e0 03             	shl    eax,0x3
c000fc2d:	5a                   	pop    edx
c000fc2e:	59                   	pop    ecx
c000fc2f:	50                   	push   eax
c000fc30:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fc33:	e8 7d 7b ff ff       	call   c00077b5 <realloc>
c000fc38:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fc3c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fc3f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fc42:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fc46:	b9 08 00 00 00       	mov    ecx,0x8
c000fc4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc4d:	83 c4 2c             	add    esp,0x2c
c000fc50:	5b                   	pop    ebx
c000fc51:	5e                   	pop    esi
c000fc52:	5f                   	pop    edi
c000fc53:	5d                   	pop    ebp
c000fc54:	c3                   	ret    
c000fc55:	90                   	nop

c000fc56 <EnvVarContainer::deleteEnv(char const*)>:
c000fc56:	c3                   	ret    
c000fc57:	90                   	nop

c000fc58 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fc58:	55                   	push   ebp
c000fc59:	57                   	push   edi
c000fc5a:	56                   	push   esi
c000fc5b:	53                   	push   ebx
c000fc5c:	81 ec 38 01 00 00    	sub    esp,0x138
c000fc62:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fc69:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fc70:	68 14 01 00 00       	push   0x114
c000fc75:	e8 4f 7b ff ff       	call   c00077c9 <malloc>
c000fc7a:	83 c4 0c             	add    esp,0xc
c000fc7d:	89 c3                	mov    ebx,eax
c000fc7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fc82:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc89:	50                   	push   eax
c000fc8a:	e8 cf ad ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c000fc8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc92:	e8 f5 b0 ff ff       	call   c000ad8c <File::exists()>
c000fc97:	83 c4 10             	add    esp,0x10
c000fc9a:	84 c0                	test   al,al
c000fc9c:	75 31                	jne    c000fccf <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fc9e:	50                   	push   eax
c000fc9f:	50                   	push   eax
c000fca0:	6a 12                	push   0x12
c000fca2:	53                   	push   ebx
c000fca3:	e8 76 ae ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c000fca8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fcaa:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fcad:	89 34 24             	mov    DWORD PTR [esp],esi
c000fcb0:	e8 9b 08 ff ff       	call   c0000550 <strlen>
c000fcb5:	5a                   	pop    edx
c000fcb6:	31 d2                	xor    edx,edx
c000fcb8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fcbc:	51                   	push   ecx
c000fcbd:	56                   	push   esi
c000fcbe:	52                   	push   edx
c000fcbf:	50                   	push   eax
c000fcc0:	53                   	push   ebx
c000fcc1:	ff d7                	call   edi
c000fcc3:	83 c4 14             	add    esp,0x14
c000fcc6:	53                   	push   ebx
c000fcc7:	e8 b0 ae ff ff       	call   c000ab7c <File::close()>
c000fccc:	83 c4 10             	add    esp,0x10
c000fccf:	56                   	push   esi
c000fcd0:	31 f6                	xor    esi,esi
c000fcd2:	68 00 01 00 00       	push   0x100
c000fcd7:	6a 00                	push   0x0
c000fcd9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fcdd:	50                   	push   eax
c000fcde:	e8 fd 07 ff ff       	call   c00004e0 <memset>
c000fce3:	5f                   	pop    edi
c000fce4:	58                   	pop    eax
c000fce5:	6a 01                	push   0x1
c000fce7:	53                   	push   ebx
c000fce8:	e8 31 ae ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c000fced:	83 c4 10             	add    esp,0x10
c000fcf0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fcf8:	83 ec 0c             	sub    esp,0xc
c000fcfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fcfd:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fd01:	51                   	push   ecx
c000fd02:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fd06:	52                   	push   edx
c000fd07:	6a 00                	push   0x0
c000fd09:	6a 01                	push   0x1
c000fd0b:	53                   	push   ebx
c000fd0c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd0f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fd13:	83 c4 20             	add    esp,0x20
c000fd16:	3c 0d                	cmp    al,0xd
c000fd18:	0f 84 09 01 00 00    	je     c000fe27 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fd1e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd23:	0f 84 ef 00 00 00    	je     c000fe18 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd29:	3c 0a                	cmp    al,0xa
c000fd2b:	74 13                	je     c000fd40 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd2d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fd32:	74 0c                	je     c000fd40 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd34:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fd3a:	0f 8e d8 00 00 00    	jle    c000fe18 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd44:	83 ec 0c             	sub    esp,0xc
c000fd47:	8d 78 01             	lea    edi,[eax+0x1]
c000fd4a:	57                   	push   edi
c000fd4b:	e8 79 7a ff ff       	call   c00077c9 <malloc>
c000fd50:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fd54:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd58:	8d 56 04             	lea    edx,[esi+0x4]
c000fd5b:	89 14 24             	mov    DWORD PTR [esp],edx
c000fd5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd62:	e8 62 7a ff ff       	call   c00077c9 <malloc>
c000fd67:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fd6b:	83 c4 0c             	add    esp,0xc
c000fd6e:	57                   	push   edi
c000fd6f:	6a 00                	push   0x0
c000fd71:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd75:	e8 66 07 ff ff       	call   c00004e0 <memset>
c000fd7a:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd7e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fd82:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fd86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd88:	83 c4 0c             	add    esp,0xc
c000fd8b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd8f:	52                   	push   edx
c000fd90:	6a 00                	push   0x0
c000fd92:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fd96:	e8 45 07 ff ff       	call   c00004e0 <memset>
c000fd9b:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd9f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fda3:	89 34 24             	mov    DWORD PTR [esp],esi
c000fda6:	e8 a5 07 ff ff       	call   c0000550 <strlen>
c000fdab:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fdaf:	89 c1                	mov    ecx,eax
c000fdb1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fdb6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fdb9:	40                   	inc    eax
c000fdba:	83 c4 10             	add    esp,0x10
c000fdbd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fdc0:	85 d2                	test   edx,edx
c000fdc2:	75 0c                	jne    c000fdd0 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fdc4:	83 ec 0c             	sub    esp,0xc
c000fdc7:	6a 08                	push   0x8
c000fdc9:	e8 fb 79 ff ff       	call   c00077c9 <malloc>
c000fdce:	eb 0c                	jmp    c000fddc <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fdd0:	c1 e0 03             	shl    eax,0x3
c000fdd3:	51                   	push   ecx
c000fdd4:	51                   	push   ecx
c000fdd5:	50                   	push   eax
c000fdd6:	52                   	push   edx
c000fdd7:	e8 d9 79 ff ff       	call   c00077b5 <realloc>
c000fddc:	83 c4 10             	add    esp,0x10
c000fddf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fde2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fde5:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fde8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fdec:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fdf0:	b9 08 00 00 00       	mov    ecx,0x8
c000fdf5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdf7:	31 f6                	xor    esi,esi
c000fdf9:	50                   	push   eax
c000fdfa:	68 00 01 00 00       	push   0x100
c000fdff:	6a 00                	push   0x0
c000fe01:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fe05:	50                   	push   eax
c000fe06:	e8 d5 06 ff ff       	call   c00004e0 <memset>
c000fe0b:	83 c4 10             	add    esp,0x10
c000fe0e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe16:	eb 0f                	jmp    c000fe27 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe18:	3c 3d                	cmp    al,0x3d
c000fe1a:	74 07                	je     c000fe23 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fe1c:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fe20:	46                   	inc    esi
c000fe21:	eb 04                	jmp    c000fe27 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe23:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fe27:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe2c:	0f 85 c6 fe ff ff    	jne    c000fcf8 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fe32:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fe38:	5b                   	pop    ebx
c000fe39:	5e                   	pop    esi
c000fe3a:	5f                   	pop    edi
c000fe3b:	5d                   	pop    ebp
c000fe3c:	c3                   	ret    
c000fe3d:	90                   	nop

c000fe3e <EnvVarContainer::__loadSystem()>:
c000fe3e:	83 ec 10             	sub    esp,0x10
c000fe41:	68 c0 f9 01 c0       	push   0xc001f9c0
c000fe46:	68 14 e6 01 c0       	push   0xc001e614
c000fe4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe4f:	e8 04 fe ff ff       	call   c000fc58 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fe54:	83 c4 1c             	add    esp,0x1c
c000fe57:	c3                   	ret    

c000fe58 <EnvVarContainer::__loadUser()>:
c000fe58:	c3                   	ret    
c000fe59:	90                   	nop

c000fe5a <EnvVarContainer::EnvVarContainer(Process*)>:
c000fe5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe5e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fe64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe6c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fe6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe73:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe7a:	90                   	nop
c000fe7b:	c3                   	ret    

c000fe7c <EnvVarContainer::~EnvVarContainer()>:
c000fe7c:	83 ec 0c             	sub    esp,0xc
c000fe7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe83:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe86:	85 c0                	test   eax,eax
c000fe88:	74 1d                	je     c000fea7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe8e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe90:	85 c0                	test   eax,eax
c000fe92:	74 13                	je     c000fea7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe9b:	83 ec 0c             	sub    esp,0xc
c000fe9e:	50                   	push   eax
c000fe9f:	e8 35 79 ff ff       	call   c00077d9 <free>
c000fea4:	83 c4 10             	add    esp,0x10
c000fea7:	90                   	nop
c000fea8:	83 c4 0c             	add    esp,0xc
c000feab:	c3                   	ret    

c000feac <Krnl::getEnv(Process*, char const*)>:
c000feac:	53                   	push   ebx
c000fead:	83 ec 08             	sub    esp,0x8
c000feb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feb4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000feb8:	39 05 50 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e50,eax
c000febe:	74 04                	je     c000fec4 <Krnl::getEnv(Process*, char const*)+0x18>
c000fec0:	85 c0                	test   eax,eax
c000fec2:	75 0b                	jne    c000fecf <Krnl::getEnv(Process*, char const*)+0x23>
c000fec4:	a1 f0 35 02 c0       	mov    eax,ds:0xc00235f0
c000fec9:	85 c0                	test   eax,eax
c000fecb:	75 19                	jne    c000fee6 <Krnl::getEnv(Process*, char const*)+0x3a>
c000fecd:	eb 27                	jmp    c000fef6 <Krnl::getEnv(Process*, char const*)+0x4a>
c000fecf:	52                   	push   edx
c000fed0:	52                   	push   edx
c000fed1:	53                   	push   ebx
c000fed2:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fed8:	e8 79 fc ff ff       	call   c000fb56 <EnvVarContainer::getEnv(char const*)>
c000fedd:	83 c4 10             	add    esp,0x10
c000fee0:	85 c0                	test   eax,eax
c000fee2:	75 28                	jne    c000ff0c <Krnl::getEnv(Process*, char const*)+0x60>
c000fee4:	eb de                	jmp    c000fec4 <Krnl::getEnv(Process*, char const*)+0x18>
c000fee6:	52                   	push   edx
c000fee7:	52                   	push   edx
c000fee8:	53                   	push   ebx
c000fee9:	50                   	push   eax
c000feea:	e8 67 fc ff ff       	call   c000fb56 <EnvVarContainer::getEnv(char const*)>
c000feef:	83 c4 10             	add    esp,0x10
c000fef2:	85 c0                	test   eax,eax
c000fef4:	75 16                	jne    c000ff0c <Krnl::getEnv(Process*, char const*)+0x60>
c000fef6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000fefa:	a1 f4 35 02 c0       	mov    eax,ds:0xc00235f4
c000feff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff03:	83 c4 08             	add    esp,0x8
c000ff06:	5b                   	pop    ebx
c000ff07:	e9 4a fc ff ff       	jmp    c000fb56 <EnvVarContainer::getEnv(char const*)>
c000ff0c:	83 c4 08             	add    esp,0x8
c000ff0f:	5b                   	pop    ebx
c000ff10:	c3                   	ret    

c000ff11 <Krnl::setEnvSystem(char const*, char const*)>:
c000ff11:	83 ec 10             	sub    esp,0x10
c000ff14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff1c:	ff 35 f4 35 02 c0    	push   DWORD PTR ds:0xc00235f4
c000ff22:	e8 6d fc ff ff       	call   c000fb94 <EnvVarContainer::setEnv(char const*, char const*)>
c000ff27:	83 c4 1c             	add    esp,0x1c
c000ff2a:	c3                   	ret    

c000ff2b <Krnl::setEnvUser(char const*, char const*)>:
c000ff2b:	a1 f0 35 02 c0       	mov    eax,ds:0xc00235f0
c000ff30:	85 c0                	test   eax,eax
c000ff32:	74 15                	je     c000ff49 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ff34:	83 ec 10             	sub    esp,0x10
c000ff37:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff3f:	50                   	push   eax
c000ff40:	e8 4f fc ff ff       	call   c000fb94 <EnvVarContainer::setEnv(char const*, char const*)>
c000ff45:	83 c4 1c             	add    esp,0x1c
c000ff48:	c3                   	ret    
c000ff49:	c3                   	ret    

c000ff4a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ff4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff4e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ff54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff58:	e9 37 fc ff ff       	jmp    c000fb94 <EnvVarContainer::setEnv(char const*, char const*)>

c000ff5d <Krnl::deleteEnvSystem(char const*)>:
c000ff5d:	c3                   	ret    

c000ff5e <Krnl::deleteEnvUser(char const*)>:
c000ff5e:	c3                   	ret    

c000ff5f <Krnl::deleteEnvProcess(Process*, char const*)>:
c000ff5f:	c3                   	ret    

c000ff60 <Krnl::newProcessEnv(Process*)>:
c000ff60:	83 ec 28             	sub    esp,0x28
c000ff63:	6a 0c                	push   0xc
c000ff65:	e8 5f 78 ff ff       	call   c00077c9 <malloc>
c000ff6a:	5a                   	pop    edx
c000ff6b:	59                   	pop    ecx
c000ff6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff70:	50                   	push   eax
c000ff71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff75:	e8 e0 fe ff ff       	call   c000fe5a <EnvVarContainer::EnvVarContainer(Process*)>
c000ff7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff7e:	83 c4 2c             	add    esp,0x2c
c000ff81:	c3                   	ret    

c000ff82 <Krnl::copyProcessEnv(Process*, Process*)>:
c000ff82:	57                   	push   edi
c000ff83:	56                   	push   esi
c000ff84:	53                   	push   ebx
c000ff85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff89:	83 ec 0c             	sub    esp,0xc
c000ff8c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ff92:	6a 0c                	push   0xc
c000ff94:	e8 30 78 ff ff       	call   c00077c9 <malloc>
c000ff99:	89 c3                	mov    ebx,eax
c000ff9b:	58                   	pop    eax
c000ff9c:	5a                   	pop    edx
c000ff9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffa1:	53                   	push   ebx
c000ffa2:	e8 b3 fe ff ff       	call   c000fe5a <EnvVarContainer::EnvVarContainer(Process*)>
c000ffa7:	8b 07                	mov    eax,DWORD PTR [edi]
c000ffa9:	89 03                	mov    DWORD PTR [ebx],eax
c000ffab:	c1 e0 03             	shl    eax,0x3
c000ffae:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffb1:	e8 13 78 ff ff       	call   c00077c9 <malloc>
c000ffb6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ffb9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ffbb:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ffbe:	c1 e1 03             	shl    ecx,0x3
c000ffc1:	89 c7                	mov    edi,eax
c000ffc3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffc5:	83 c4 10             	add    esp,0x10
c000ffc8:	89 d8                	mov    eax,ebx
c000ffca:	5b                   	pop    ebx
c000ffcb:	5e                   	pop    esi
c000ffcc:	5f                   	pop    edi
c000ffcd:	c3                   	ret    

c000ffce <Krnl::loadSystemEnv()>:
c000ffce:	53                   	push   ebx
c000ffcf:	83 ec 14             	sub    esp,0x14
c000ffd2:	6a 0c                	push   0xc
c000ffd4:	e8 f0 77 ff ff       	call   c00077c9 <malloc>
c000ffd9:	89 c3                	mov    ebx,eax
c000ffdb:	58                   	pop    eax
c000ffdc:	5a                   	pop    edx
c000ffdd:	ff 35 50 3e 02 c0    	push   DWORD PTR ds:0xc0023e50
c000ffe3:	53                   	push   ebx
c000ffe4:	e8 71 fe ff ff       	call   c000fe5a <EnvVarContainer::EnvVarContainer(Process*)>
c000ffe9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffec:	89 1d f4 35 02 c0    	mov    DWORD PTR ds:0xc00235f4,ebx
c000fff2:	e8 47 fe ff ff       	call   c000fe3e <EnvVarContainer::__loadSystem()>
c000fff7:	83 c4 18             	add    esp,0x18
c000fffa:	5b                   	pop    ebx
c000fffb:	c3                   	ret    

c000fffc <Krnl::loadUserEnv()>:
c000fffc:	53                   	push   ebx
c000fffd:	83 ec 14             	sub    esp,0x14
c0010000:	6a 0c                	push   0xc
c0010002:	e8 c2 77 ff ff       	call   c00077c9 <malloc>
c0010007:	89 c3                	mov    ebx,eax
c0010009:	58                   	pop    eax
c001000a:	5a                   	pop    edx
c001000b:	ff 35 50 3e 02 c0    	push   DWORD PTR ds:0xc0023e50
c0010011:	53                   	push   ebx
c0010012:	e8 43 fe ff ff       	call   c000fe5a <EnvVarContainer::EnvVarContainer(Process*)>
c0010017:	89 1d f0 35 02 c0    	mov    DWORD PTR ds:0xc00235f0,ebx
c001001d:	83 c4 18             	add    esp,0x18
c0010020:	5b                   	pop    ebx
c0010021:	c3                   	ret    

c0010022 <Krnl::flushEnv()>:
c0010022:	c3                   	ret    

c0010023 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010027:	8b 15 f0 35 02 c0    	mov    edx,DWORD PTR ds:0xc00235f0
c001002d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010033:	a1 f4 35 02 c0       	mov    eax,ds:0xc00235f4
c0010038:	8b 00                	mov    eax,DWORD PTR [eax]
c001003a:	03 01                	add    eax,DWORD PTR [ecx]
c001003c:	85 d2                	test   edx,edx
c001003e:	74 02                	je     c0010042 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010040:	03 02                	add    eax,DWORD PTR [edx]
c0010042:	c3                   	ret    

c0010043 <Krnl::getProcessEnvPair(Process*, int)>:
c0010043:	57                   	push   edi
c0010044:	56                   	push   esi
c0010045:	8b 35 f0 35 02 c0    	mov    esi,DWORD PTR ds:0xc00235f0
c001004b:	53                   	push   ebx
c001004c:	85 f6                	test   esi,esi
c001004e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010052:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010056:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001005c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010060:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010062:	75 16                	jne    c001007a <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010064:	39 c2                	cmp    edx,eax
c0010066:	7c 16                	jl     c001007e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010068:	8b 0d f4 35 02 c0    	mov    ecx,DWORD PTR ds:0xc00235f4
c001006e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010070:	01 c6                	add    esi,eax
c0010072:	39 d6                	cmp    esi,edx
c0010074:	7e 3c                	jle    c00100b2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010076:	29 c2                	sub    edx,eax
c0010078:	eb 04                	jmp    c001007e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001007a:	39 c2                	cmp    edx,eax
c001007c:	7d 05                	jge    c0010083 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001007e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010081:	eb 20                	jmp    c00100a3 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010083:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010085:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010088:	39 d1                	cmp    ecx,edx
c001008a:	7e 04                	jle    c0010090 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001008c:	29 c2                	sub    edx,eax
c001008e:	eb 10                	jmp    c00100a0 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010090:	8b 35 f4 35 02 c0    	mov    esi,DWORD PTR ds:0xc00235f4
c0010096:	03 0e                	add    ecx,DWORD PTR [esi]
c0010098:	39 d1                	cmp    ecx,edx
c001009a:	7e 16                	jle    c00100b2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001009c:	29 c2                	sub    edx,eax
c001009e:	29 fa                	sub    edx,edi
c00100a0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00100a3:	8d 14 d0             	lea    edx,[eax+edx*8]
c00100a6:	8b 02                	mov    eax,DWORD PTR [edx]
c00100a8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00100ab:	89 03                	mov    DWORD PTR [ebx],eax
c00100ad:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00100b0:	eb 1d                	jmp    c00100cf <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00100b2:	83 ec 0c             	sub    esp,0xc
c00100b5:	68 36 e6 01 c0       	push   0xc001e636
c00100ba:	e8 ac 00 00 00       	call   c001016b <KePanic(char const*)>
c00100bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00100c5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00100cc:	83 c4 10             	add    esp,0x10
c00100cf:	89 d8                	mov    eax,ebx
c00100d1:	5b                   	pop    ebx
c00100d2:	5e                   	pop    esi
c00100d3:	5f                   	pop    edi
c00100d4:	c2 04 00             	ret    0x4

c00100d7 <CPU::current()>:
c00100d7:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c00100dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00100e2:	c3                   	ret    

c00100e3 <operator new(unsigned long)>:
c00100e3:	e9 e1 76 ff ff       	jmp    c00077c9 <malloc>

c00100e8 <operator delete(void*)>:
c00100e8:	e9 fc 76 ff ff       	jmp    c00077e9 <rfree>

c00100ed <disableIRQs()>:
c00100ed:	fa                   	cli    
c00100ee:	c3                   	ret    

c00100ef <enableIRQs()>:
c00100ef:	fb                   	sti    
c00100f0:	c3                   	ret    

c00100f1 <lockScheduler()>:
c00100f1:	fa                   	cli    
c00100f2:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c00100f8:	c3                   	ret    

c00100f9 <unlockScheduler()>:
c00100f9:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c00100fe:	48                   	dec    eax
c00100ff:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0010104:	75 01                	jne    c0010107 <unlockScheduler()+0xe>
c0010106:	fb                   	sti    
c0010107:	c3                   	ret    

c0010108 <lockStuff()>:
c0010108:	fa                   	cli    
c0010109:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c001010f:	ff 05 24 3e 02 c0    	inc    DWORD PTR ds:0xc0023e24
c0010115:	c3                   	ret    

c0010116 <unlockStuff()>:
c0010116:	83 ec 0c             	sub    esp,0xc
c0010119:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c001011e:	48                   	dec    eax
c001011f:	a3 24 3e 02 c0       	mov    ds:0xc0023e24,eax
c0010124:	75 18                	jne    c001013e <unlockStuff()+0x28>
c0010126:	83 3d 20 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e20,0x0
c001012d:	74 0f                	je     c001013e <unlockStuff()+0x28>
c001012f:	c7 05 20 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e20,0x0
c0010139:	e8 7e 36 00 00       	call   c00137bc <schedule()>
c001013e:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0010143:	48                   	dec    eax
c0010144:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0010149:	75 01                	jne    c001014c <unlockStuff()+0x36>
c001014b:	fb                   	sti    
c001014c:	83 c4 0c             	add    esp,0xc
c001014f:	c3                   	ret    

c0010150 <Virt::getAKernelVAS()>:
c0010150:	a1 70 0c 02 c0       	mov    eax,ds:0xc0020c70
c0010155:	c3                   	ret    

c0010156 <__not_memcpy>:
c0010156:	57                   	push   edi
c0010157:	56                   	push   esi
c0010158:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001015c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010160:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010164:	89 c7                	mov    edi,eax
c0010166:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010168:	5e                   	pop    esi
c0010169:	5f                   	pop    edi
c001016a:	c3                   	ret    

c001016b <KePanic(char const*)>:
c001016b:	c6 05 f8 35 02 c0 01 	mov    BYTE PTR ds:0xc00235f8,0x1
c0010172:	e9 3d 54 00 00       	jmp    c00155b4 <HalPanic(char const*)>

c0010177 <Krnl::powerThread(void*)>:
c0010177:	83 ec 0c             	sub    esp,0xc
c001017a:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c001017f:	48                   	dec    eax
c0010180:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0010185:	75 01                	jne    c0010188 <Krnl::powerThread(void*)+0x11>
c0010187:	fb                   	sti    
c0010188:	83 ec 0c             	sub    esp,0xc
c001018b:	c6 05 00 36 02 c0 00 	mov    BYTE PTR ds:0xc0023600,0x0
c0010192:	6a 0a                	push   0xa
c0010194:	e8 33 39 00 00       	call   c0013acc <sleep(unsigned int)>
c0010199:	83 05 44 36 02 c0 0a 	add    DWORD PTR ds:0xc0023644,0xa
c00101a0:	83 c4 10             	add    esp,0x10
c00101a3:	eb e3                	jmp    c0010188 <Krnl::powerThread(void*)+0x11>

c00101a5 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00101a5:	57                   	push   edi
c00101a6:	b9 09 00 00 00       	mov    ecx,0x9
c00101ab:	56                   	push   esi
c00101ac:	bf 20 36 02 c0       	mov    edi,0xc0023620
c00101b1:	fc                   	cld    
c00101b2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00101b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00101b8:	5e                   	pop    esi
c00101b9:	5f                   	pop    edi
c00101ba:	c3                   	ret    

c00101bb <Krnl::userIOReceived()>:
c00101bb:	c7 05 44 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023644,0x0
c00101c5:	c3                   	ret    

c00101c6 <Krnl::handlePowerButton()>:
c00101c6:	83 ec 0c             	sub    esp,0xc
c00101c9:	a1 20 36 02 c0       	mov    eax,ds:0xc0023620
c00101ce:	83 f8 02             	cmp    eax,0x2
c00101d1:	75 10                	jne    c00101e3 <Krnl::handlePowerButton()+0x1d>
c00101d3:	83 ec 0c             	sub    esp,0xc
c00101d6:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c00101dc:	e8 85 6c ff ff       	call   c0006e66 <Computer::shutdown()>
c00101e1:	eb 11                	jmp    c00101f4 <Krnl::handlePowerButton()+0x2e>
c00101e3:	48                   	dec    eax
c00101e4:	75 11                	jne    c00101f7 <Krnl::handlePowerButton()+0x31>
c00101e6:	83 ec 0c             	sub    esp,0xc
c00101e9:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c00101ef:	e8 a2 6c ff ff       	call   c0006e96 <Computer::sleep()>
c00101f4:	83 c4 10             	add    esp,0x10
c00101f7:	83 c4 0c             	add    esp,0xc
c00101fa:	c3                   	ret    

c00101fb <Krnl::handleSleepButton()>:
c00101fb:	83 ec 0c             	sub    esp,0xc
c00101fe:	a1 24 36 02 c0       	mov    eax,ds:0xc0023624
c0010203:	83 f8 02             	cmp    eax,0x2
c0010206:	75 10                	jne    c0010218 <Krnl::handleSleepButton()+0x1d>
c0010208:	83 ec 0c             	sub    esp,0xc
c001020b:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0010211:	e8 50 6c ff ff       	call   c0006e66 <Computer::shutdown()>
c0010216:	eb 11                	jmp    c0010229 <Krnl::handleSleepButton()+0x2e>
c0010218:	48                   	dec    eax
c0010219:	75 11                	jne    c001022c <Krnl::handleSleepButton()+0x31>
c001021b:	83 ec 0c             	sub    esp,0xc
c001021e:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0010224:	e8 6d 6c ff ff       	call   c0006e96 <Computer::sleep()>
c0010229:	83 c4 10             	add    esp,0x10
c001022c:	83 c4 0c             	add    esp,0xc
c001022f:	c3                   	ret    

c0010230 <Krnl::setupPowerManager()>:
c0010230:	83 ec 0c             	sub    esp,0xc
c0010233:	c7 05 44 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023644,0x0
c001023d:	68 f0 00 00 00       	push   0xf0
c0010242:	c6 05 00 36 02 c0 00 	mov    BYTE PTR ds:0xc0023600,0x0
c0010249:	6a 00                	push   0x0
c001024b:	68 77 01 01 c0       	push   0xc0010177
c0010250:	ff 35 50 3e 02 c0    	push   DWORD PTR ds:0xc0023e50
c0010256:	e8 41 33 00 00       	call   c001359c <Process::createThread(void (*)(void*), void*, int)>
c001025b:	c7 05 20 36 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0023620,0x2
c0010265:	c7 05 24 36 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023624,0x1
c001026f:	c7 05 28 36 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0023628,0x3
c0010279:	c7 05 2c 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002362c,0x0
c0010283:	c7 05 38 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023638,0x0
c001028d:	c7 05 30 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023630,0x0
c0010297:	c7 05 3c 36 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002363c,0x0
c00102a1:	c7 05 34 36 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023634,0x3c
c00102ab:	c7 05 40 36 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0023640,0x3c
c00102b5:	83 c4 1c             	add    esp,0x1c
c00102b8:	c3                   	ret    
c00102b9:	66 90                	xchg   ax,ax
c00102bb:	90                   	nop

c00102bc <KeResolveCompatibilitySymbol(char*)>:
c00102bc:	83 ec 0c             	sub    esp,0xc
c00102bf:	83 ec 08             	sub    esp,0x8
c00102c2:	68 50 e6 01 c0       	push   0xc001e650
c00102c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102cb:	e8 20 04 ff ff       	call   c00006f0 <strcmp>
c00102d0:	83 c4 10             	add    esp,0x10
c00102d3:	85 c0                	test   eax,eax
c00102d5:	0f 94 c0             	sete   al
c00102d8:	84 c0                	test   al,al
c00102da:	74 0c                	je     c00102e8 <KeResolveCompatibilitySymbol(char*)+0x2c>
c00102dc:	b8 78 0b 02 c0       	mov    eax,0xc0020b78
c00102e1:	e9 62 01 00 00       	jmp    c0010448 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102e6:	66 90                	xchg   ax,ax
c00102e8:	83 ec 08             	sub    esp,0x8
c00102eb:	68 59 e6 01 c0       	push   0xc001e659
c00102f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f4:	e8 f7 03 ff ff       	call   c00006f0 <strcmp>
c00102f9:	83 c4 10             	add    esp,0x10
c00102fc:	85 c0                	test   eax,eax
c00102fe:	0f 94 c0             	sete   al
c0010301:	84 c0                	test   al,al
c0010303:	74 0b                	je     c0010310 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010305:	b8 c0 c0 01 c0       	mov    eax,0xc001c0c0
c001030a:	e9 39 01 00 00       	jmp    c0010448 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001030f:	90                   	nop
c0010310:	83 ec 08             	sub    esp,0x8
c0010313:	68 63 e6 01 c0       	push   0xc001e663
c0010318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001031c:	e8 cf 03 ff ff       	call   c00006f0 <strcmp>
c0010321:	83 c4 10             	add    esp,0x10
c0010324:	85 c0                	test   eax,eax
c0010326:	0f 94 c0             	sete   al
c0010329:	84 c0                	test   al,al
c001032b:	74 0b                	je     c0010338 <KeResolveCompatibilitySymbol(char*)+0x7c>
c001032d:	b8 f4 bd 01 c0       	mov    eax,0xc001bdf4
c0010332:	e9 11 01 00 00       	jmp    c0010448 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010337:	90                   	nop
c0010338:	83 ec 08             	sub    esp,0x8
c001033b:	68 6c e6 01 c0       	push   0xc001e66c
c0010340:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010344:	e8 a7 03 ff ff       	call   c00006f0 <strcmp>
c0010349:	83 c4 10             	add    esp,0x10
c001034c:	85 c0                	test   eax,eax
c001034e:	0f 94 c0             	sete   al
c0010351:	84 c0                	test   al,al
c0010353:	74 0b                	je     c0010360 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010355:	b8 6b 01 01 c0       	mov    eax,0xc001016b
c001035a:	e9 e9 00 00 00       	jmp    c0010448 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001035f:	90                   	nop
c0010360:	83 ec 08             	sub    esp,0x8
c0010363:	68 7f e6 01 c0       	push   0xc001e67f
c0010368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001036c:	e8 7f 03 ff ff       	call   c00006f0 <strcmp>
c0010371:	83 c4 10             	add    esp,0x10
c0010374:	85 c0                	test   eax,eax
c0010376:	0f 94 c0             	sete   al
c0010379:	84 c0                	test   al,al
c001037b:	74 0b                	je     c0010388 <KeResolveCompatibilitySymbol(char*)+0xcc>
c001037d:	b8 f3 fa 00 c0       	mov    eax,0xc000faf3
c0010382:	e9 c1 00 00 00       	jmp    c0010448 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010387:	90                   	nop
c0010388:	83 ec 08             	sub    esp,0x8
c001038b:	68 9c e6 01 c0       	push   0xc001e69c
c0010390:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010394:	e8 57 03 ff ff       	call   c00006f0 <strcmp>
c0010399:	83 c4 10             	add    esp,0x10
c001039c:	85 c0                	test   eax,eax
c001039e:	0f 94 c0             	sete   al
c00103a1:	84 c0                	test   al,al
c00103a3:	74 0b                	je     c00103b0 <KeResolveCompatibilitySymbol(char*)+0xf4>
c00103a5:	b8 c0 c1 01 c0       	mov    eax,0xc001c1c0
c00103aa:	e9 99 00 00 00       	jmp    c0010448 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103af:	90                   	nop
c00103b0:	83 ec 08             	sub    esp,0x8
c00103b3:	68 a6 e6 01 c0       	push   0xc001e6a6
c00103b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103bc:	e8 2f 03 ff ff       	call   c00006f0 <strcmp>
c00103c1:	83 c4 10             	add    esp,0x10
c00103c4:	85 c0                	test   eax,eax
c00103c6:	0f 94 c0             	sete   al
c00103c9:	84 c0                	test   al,al
c00103cb:	74 07                	je     c00103d4 <KeResolveCompatibilitySymbol(char*)+0x118>
c00103cd:	b8 40 bf 01 c0       	mov    eax,0xc001bf40
c00103d2:	eb 74                	jmp    c0010448 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103d4:	83 ec 08             	sub    esp,0x8
c00103d7:	68 af e6 01 c0       	push   0xc001e6af
c00103dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103e0:	e8 0b 03 ff ff       	call   c00006f0 <strcmp>
c00103e5:	83 c4 10             	add    esp,0x10
c00103e8:	85 c0                	test   eax,eax
c00103ea:	0f 94 c0             	sete   al
c00103ed:	84 c0                	test   al,al
c00103ef:	74 07                	je     c00103f8 <KeResolveCompatibilitySymbol(char*)+0x13c>
c00103f1:	b8 7c 0b 02 c0       	mov    eax,0xc0020b7c
c00103f6:	eb 50                	jmp    c0010448 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103f8:	83 ec 08             	sub    esp,0x8
c00103fb:	68 c7 e6 01 c0       	push   0xc001e6c7
c0010400:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010404:	e8 e7 02 ff ff       	call   c00006f0 <strcmp>
c0010409:	83 c4 10             	add    esp,0x10
c001040c:	85 c0                	test   eax,eax
c001040e:	0f 94 c0             	sete   al
c0010411:	84 c0                	test   al,al
c0010413:	74 07                	je     c001041c <KeResolveCompatibilitySymbol(char*)+0x160>
c0010415:	b8 7c 0b 02 c0       	mov    eax,0xc0020b7c
c001041a:	eb 2c                	jmp    c0010448 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001041c:	83 ec 08             	sub    esp,0x8
c001041f:	68 d4 e6 01 c0       	push   0xc001e6d4
c0010424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010428:	e8 c3 02 ff ff       	call   c00006f0 <strcmp>
c001042d:	83 c4 10             	add    esp,0x10
c0010430:	85 c0                	test   eax,eax
c0010432:	0f 94 c0             	sete   al
c0010435:	84 c0                	test   al,al
c0010437:	74 07                	je     c0010440 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010439:	b8 7d 0b 02 c0       	mov    eax,0xc0020b7d
c001043e:	eb 08                	jmp    c0010448 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010440:	b8 00 00 00 00       	mov    eax,0x0
c0010445:	8d 76 00             	lea    esi,[esi+0x0]
c0010448:	83 c4 0c             	add    esp,0xc
c001044b:	c3                   	ret    

c001044c <KiDefaultSignalHandlerAbort(int)>:
c001044c:	c7 44 24 04 e1 e6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e6e1
c0010454:	e9 12 fd ff ff       	jmp    c001016b <KePanic(char const*)>

c0010459 <KiSigKill(int)>:
c0010459:	c7 44 24 04 fd e6 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e6fd
c0010461:	e9 05 fd ff ff       	jmp    c001016b <KePanic(char const*)>

c0010466 <KiDefaultSignalHandlerTerminate(int)>:
c0010466:	c7 44 24 04 37 00 00 00 	mov    DWORD PTR [esp+0x4],0x37
c001046e:	e9 6d 3c 00 00       	jmp    c00140e0 <terminateTask(int)>

c0010473 <KiDefaultSignalHandlerIgnore(int)>:
c0010473:	c3                   	ret    

c0010474 <KiDefaultSignalHandlerPause(int)>:
c0010474:	c7 44 24 04 07 e7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e707
c001047c:	e9 ea fc ff ff       	jmp    c001016b <KePanic(char const*)>

c0010481 <KiDefaultSignalHandlerResume(int)>:
c0010481:	c7 44 24 04 23 e7 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e723
c0010489:	e9 dd fc ff ff       	jmp    c001016b <KePanic(char const*)>

c001048e <KeDeinitSignals(SigHandlerBlock*)>:
c001048e:	e9 46 73 ff ff       	jmp    c00077d9 <free>

c0010493 <KeInitSignals()>:
c0010493:	53                   	push   ebx
c0010494:	83 ec 14             	sub    esp,0x14
c0010497:	68 c8 00 00 00       	push   0xc8
c001049c:	e8 28 73 ff ff       	call   c00077c9 <malloc>
c00104a1:	83 c4 0c             	add    esp,0xc
c00104a4:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00104ae:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00104b8:	89 c3                	mov    ebx,eax
c00104ba:	6a 20                	push   0x20
c00104bc:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00104c2:	6a 00                	push   0x0
c00104c4:	50                   	push   eax
c00104c5:	e8 16 00 ff ff       	call   c00004e0 <memset>
c00104ca:	83 c4 0c             	add    esp,0xc
c00104cd:	6a 44                	push   0x44
c00104cf:	6a 00                	push   0x0
c00104d1:	53                   	push   ebx
c00104d2:	e8 09 00 ff ff       	call   c00004e0 <memset>
c00104d7:	89 d8                	mov    eax,ebx
c00104d9:	83 c4 18             	add    esp,0x18
c00104dc:	5b                   	pop    ebx
c00104dd:	c3                   	ret    

c00104de <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00104de:	53                   	push   ebx
c00104df:	b8 01 00 00 00       	mov    eax,0x1
c00104e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104ec:	83 f9 10             	cmp    ecx,0x10
c00104ef:	7f 21                	jg     c0010512 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00104f1:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00104f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f8:	89 03                	mov    DWORD PTR [ebx],eax
c00104fa:	b8 01 00 00 00       	mov    eax,0x1
c00104ff:	d3 e0                	shl    eax,cl
c0010501:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010505:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010508:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010510:	31 c0                	xor    eax,eax
c0010512:	5b                   	pop    ebx
c0010513:	c3                   	ret    

c0010514 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010514:	55                   	push   ebp
c0010515:	57                   	push   edi
c0010516:	bf 08 00 00 00       	mov    edi,0x8
c001051b:	56                   	push   esi
c001051c:	53                   	push   ebx
c001051d:	83 ec 18             	sub    esp,0x18
c0010520:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010524:	68 40 e7 01 c0       	push   0xc001e740
c0010529:	e8 ba 9f ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001052e:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010535:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c001053b:	83 c4 10             	add    esp,0x10
c001053e:	31 c9                	xor    ecx,ecx
c0010540:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010544:	99                   	cdq    
c0010545:	f7 ff                	idiv   edi
c0010547:	8d 42 24             	lea    eax,[edx+0x24]
c001054a:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c001054e:	85 f6                	test   esi,esi
c0010550:	75 1a                	jne    c001056c <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0010552:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0010556:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c001055a:	50                   	push   eax
c001055b:	50                   	push   eax
c001055c:	52                   	push   edx
c001055d:	68 51 e7 01 c0       	push   0xc001e751
c0010562:	e8 81 9f ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010567:	83 c4 10             	add    esp,0x10
c001056a:	eb 1b                	jmp    c0010587 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c001056c:	41                   	inc    ecx
c001056d:	83 f9 08             	cmp    ecx,0x8
c0010570:	75 ce                	jne    c0010540 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0010572:	83 ec 0c             	sub    esp,0xc
c0010575:	be 01 00 00 00       	mov    esi,0x1
c001057a:	68 72 e7 01 c0       	push   0xc001e772
c001057f:	e8 64 9f ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010584:	83 c4 10             	add    esp,0x10
c0010587:	83 c4 0c             	add    esp,0xc
c001058a:	89 f0                	mov    eax,esi
c001058c:	5b                   	pop    ebx
c001058d:	5e                   	pop    esi
c001058e:	5f                   	pop    edi
c001058f:	5d                   	pop    ebp
c0010590:	c3                   	ret    

c0010591 <KeCheckSignal(SigHandlerBlock*)>:
c0010591:	55                   	push   ebp
c0010592:	57                   	push   edi
c0010593:	56                   	push   esi
c0010594:	31 f6                	xor    esi,esi
c0010596:	53                   	push   ebx
c0010597:	83 ec 18             	sub    esp,0x18
c001059a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001059e:	68 83 e7 01 c0       	push   0xc001e783
c00105a3:	e8 40 9f ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00105a8:	83 c4 10             	add    esp,0x10
c00105ab:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00105b2:	0f 84 55 01 00 00    	je     c001070d <KeCheckSignal(SigHandlerBlock*)+0x17c>
c00105b8:	83 ec 0c             	sub    esp,0xc
c00105bb:	bd 08 00 00 00       	mov    ebp,0x8
c00105c0:	68 94 e7 01 c0       	push   0xc001e794
c00105c5:	e8 1e 9f ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00105ca:	83 c4 10             	add    esp,0x10
c00105cd:	31 c9                	xor    ecx,ecx
c00105cf:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00105d5:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00105d8:	99                   	cdq    
c00105d9:	f7 fd                	idiv   ebp
c00105db:	8b bc 93 9c 00 00 00 	mov    edi,DWORD PTR [ebx+edx*4+0x9c]
c00105e2:	85 ff                	test   edi,edi
c00105e4:	0f 84 00 01 00 00    	je     c00106ea <KeCheckSignal(SigHandlerBlock*)+0x159>
c00105ea:	83 ec 0c             	sub    esp,0xc
c00105ed:	be 01 00 00 00       	mov    esi,0x1
c00105f2:	68 a5 e7 01 c0       	push   0xc001e7a5
c00105f7:	e8 ec 9e ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00105fc:	89 f9                	mov    ecx,edi
c00105fe:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010604:	d3 e6                	shl    esi,cl
c0010606:	83 c4 10             	add    esp,0x10
c0010609:	31 c9                	xor    ecx,ecx
c001060b:	ba 01 00 00 00       	mov    edx,0x1
c0010610:	89 d5                	mov    ebp,edx
c0010612:	d3 e5                	shl    ebp,cl
c0010614:	85 c5                	test   ebp,eax
c0010616:	74 13                	je     c001062b <KeCheckSignal(SigHandlerBlock*)+0x9a>
c0010618:	85 74 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],esi
c001061c:	74 0d                	je     c001062b <KeCheckSignal(SigHandlerBlock*)+0x9a>
c001061e:	83 ec 0c             	sub    esp,0xc
c0010621:	68 b6 e7 01 c0       	push   0xc001e7b6
c0010626:	e9 d8 00 00 00       	jmp    c0010703 <KeCheckSignal(SigHandlerBlock*)+0x172>
c001062b:	41                   	inc    ecx
c001062c:	83 f9 11             	cmp    ecx,0x11
c001062f:	75 df                	jne    c0010610 <KeCheckSignal(SigHandlerBlock*)+0x7f>
c0010631:	83 ec 0c             	sub    esp,0xc
c0010634:	68 c7 e7 01 c0       	push   0xc001e7c7
c0010639:	e8 aa 9e ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001063e:	8b 83 bc 00 00 00    	mov    eax,DWORD PTR [ebx+0xbc]
c0010644:	83 c4 10             	add    esp,0x10
c0010647:	8d 50 01             	lea    edx,[eax+0x1]
c001064a:	89 93 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],edx
c0010650:	c7 84 83 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+eax*4+0x9c],0x0
c001065b:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0010662:	09 b3 c0 00 00 00    	or     DWORD PTR [ebx+0xc0],esi
c0010668:	31 c0                	xor    eax,eax
c001066a:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010672:	74 09                	je     c001067d <KeCheckSignal(SigHandlerBlock*)+0xec>
c0010674:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001067b:	eb 06                	jmp    c0010683 <KeCheckSignal(SigHandlerBlock*)+0xf2>
c001067d:	40                   	inc    eax
c001067e:	83 f8 08             	cmp    eax,0x8
c0010681:	75 e7                	jne    c001066a <KeCheckSignal(SigHandlerBlock*)+0xd9>
c0010683:	83 ec 0c             	sub    esp,0xc
c0010686:	68 d8 e7 01 c0       	push   0xc001e7d8
c001068b:	e8 58 9e ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010690:	83 c4 10             	add    esp,0x10
c0010693:	8b 34 bb             	mov    esi,DWORD PTR [ebx+edi*4]
c0010696:	83 ff 09             	cmp    edi,0x9
c0010699:	75 14                	jne    c00106af <KeCheckSignal(SigHandlerBlock*)+0x11e>
c001069b:	83 ec 0c             	sub    esp,0xc
c001069e:	be 59 04 01 c0       	mov    esi,0xc0010459
c00106a3:	68 e9 e7 01 c0       	push   0xc001e7e9
c00106a8:	e8 3b 9e ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00106ad:	eb 36                	jmp    c00106e5 <KeCheckSignal(SigHandlerBlock*)+0x154>
c00106af:	83 fe 01             	cmp    esi,0x1
c00106b2:	75 0a                	jne    c00106be <KeCheckSignal(SigHandlerBlock*)+0x12d>
c00106b4:	83 ec 0c             	sub    esp,0xc
c00106b7:	68 fa e7 01 c0       	push   0xc001e7fa
c00106bc:	eb 45                	jmp    c0010703 <KeCheckSignal(SigHandlerBlock*)+0x172>
c00106be:	85 f6                	test   esi,esi
c00106c0:	75 16                	jne    c00106d8 <KeCheckSignal(SigHandlerBlock*)+0x147>
c00106c2:	83 ec 0c             	sub    esp,0xc
c00106c5:	68 0b e8 01 c0       	push   0xc001e80b
c00106ca:	e8 19 9e ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00106cf:	8b 34 bd 20 fa 01 c0 	mov    esi,DWORD PTR [edi*4-0x3ffe05e0]
c00106d6:	eb 0d                	jmp    c00106e5 <KeCheckSignal(SigHandlerBlock*)+0x154>
c00106d8:	83 ec 0c             	sub    esp,0xc
c00106db:	68 1c e8 01 c0       	push   0xc001e81c
c00106e0:	e8 03 9e ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00106e5:	83 c4 10             	add    esp,0x10
c00106e8:	eb 23                	jmp    c001070d <KeCheckSignal(SigHandlerBlock*)+0x17c>
c00106ea:	46                   	inc    esi
c00106eb:	41                   	inc    ecx
c00106ec:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00106f2:	83 f9 08             	cmp    ecx,0x8
c00106f5:	0f 85 d4 fe ff ff    	jne    c00105cf <KeCheckSignal(SigHandlerBlock*)+0x3e>
c00106fb:	83 ec 0c             	sub    esp,0xc
c00106fe:	68 2d e8 01 c0       	push   0xc001e82d
c0010703:	e8 e0 9d ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010708:	31 f6                	xor    esi,esi
c001070a:	83 c4 10             	add    esp,0x10
c001070d:	83 c4 0c             	add    esp,0xc
c0010710:	89 f0                	mov    eax,esi
c0010712:	5b                   	pop    ebx
c0010713:	5e                   	pop    esi
c0010714:	5f                   	pop    edi
c0010715:	5d                   	pop    ebp
c0010716:	c3                   	ret    

c0010717 <KiCheckSignalZ>:
c0010717:	83 ec 18             	sub    esp,0x18
c001071a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001071f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010722:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010728:	e8 64 fe ff ff       	call   c0010591 <KeCheckSignal(SigHandlerBlock*)>
c001072d:	83 c4 1c             	add    esp,0x1c
c0010730:	c3                   	ret    

c0010731 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010731:	56                   	push   esi
c0010732:	53                   	push   ebx
c0010733:	bb 01 00 00 00       	mov    ebx,0x1
c0010738:	52                   	push   edx
c0010739:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001073d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010741:	d3 e3                	shl    ebx,cl
c0010743:	83 f9 10             	cmp    ecx,0x10
c0010746:	7f 08                	jg     c0010750 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010748:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c001074e:	75 10                	jne    c0010760 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010750:	83 ec 0c             	sub    esp,0xc
c0010753:	68 3e e8 01 c0       	push   0xc001e83e
c0010758:	e8 0e fa ff ff       	call   c001016b <KePanic(char const*)>
c001075d:	83 c4 10             	add    esp,0x10
c0010760:	f7 d3                	not    ebx
c0010762:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010768:	58                   	pop    eax
c0010769:	5b                   	pop    ebx
c001076a:	5e                   	pop    esi
c001076b:	c3                   	ret    

c001076c <SysSeekDir(regs*)>:
c001076c:	31 c0                	xor    eax,eax
c001076e:	31 d2                	xor    edx,edx
c0010770:	c3                   	ret    

c0010771 <SysTellDir(regs*)>:
c0010771:	31 c0                	xor    eax,eax
c0010773:	31 d2                	xor    edx,edx
c0010775:	c3                   	ret    

c0010776 <SysVerify(regs*)>:
c0010776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001077a:	31 d2                	xor    edx,edx
c001077c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001077f:	c3                   	ret    

c0010780 <SysGetArgc(regs*)>:
c0010780:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010785:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010788:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001078e:	99                   	cdq    
c001078f:	c3                   	ret    

c0010790 <SysTTYName(regs*)>:
c0010790:	b8 01 00 00 00       	mov    eax,0x1
c0010795:	31 d2                	xor    edx,edx
c0010797:	c3                   	ret    

c0010798 <SysFormatDisk(regs*)>:
c0010798:	56                   	push   esi
c0010799:	53                   	push   ebx
c001079a:	50                   	push   eax
c001079b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001079f:	8b 1d 74 0c 02 c0    	mov    ebx,DWORD PTR ds:0xc0020c74
c00107a5:	eb 28                	jmp    c00107cf <SysFormatDisk(regs*)+0x37>
c00107a7:	83 ec 0c             	sub    esp,0xc
c00107aa:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00107ad:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00107b0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00107b2:	51                   	push   ecx
c00107b3:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c00107b6:	51                   	push   ecx
c00107b7:	50                   	push   eax
c00107b8:	8b 04 85 e0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf20]
c00107bf:	50                   	push   eax
c00107c0:	53                   	push   ebx
c00107c1:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00107c4:	83 c4 20             	add    esp,0x20
c00107c7:	83 f8 08             	cmp    eax,0x8
c00107ca:	75 12                	jne    c00107de <SysFormatDisk(regs*)+0x46>
c00107cc:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00107cf:	85 db                	test   ebx,ebx
c00107d1:	75 d4                	jne    c00107a7 <SysFormatDisk(regs*)+0xf>
c00107d3:	59                   	pop    ecx
c00107d4:	b8 03 00 00 00       	mov    eax,0x3
c00107d9:	31 d2                	xor    edx,edx
c00107db:	5b                   	pop    ebx
c00107dc:	5e                   	pop    esi
c00107dd:	c3                   	ret    
c00107de:	85 c0                	test   eax,eax
c00107e0:	74 1b                	je     c00107fd <SysFormatDisk(regs*)+0x65>
c00107e2:	83 f8 09             	cmp    eax,0x9
c00107e5:	74 0b                	je     c00107f2 <SysFormatDisk(regs*)+0x5a>
c00107e7:	59                   	pop    ecx
c00107e8:	b8 02 00 00 00       	mov    eax,0x2
c00107ed:	31 d2                	xor    edx,edx
c00107ef:	5b                   	pop    ebx
c00107f0:	5e                   	pop    esi
c00107f1:	c3                   	ret    
c00107f2:	59                   	pop    ecx
c00107f3:	b8 01 00 00 00       	mov    eax,0x1
c00107f8:	31 d2                	xor    edx,edx
c00107fa:	5b                   	pop    ebx
c00107fb:	5e                   	pop    esi
c00107fc:	c3                   	ret    
c00107fd:	59                   	pop    ecx
c00107fe:	31 c0                	xor    eax,eax
c0010800:	31 d2                	xor    edx,edx
c0010802:	5b                   	pop    ebx
c0010803:	5e                   	pop    esi
c0010804:	c3                   	ret    

c0010805 <SysSetDiskVolumeLabel(regs*)>:
c0010805:	56                   	push   esi
c0010806:	53                   	push   ebx
c0010807:	53                   	push   ebx
c0010808:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001080c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001080f:	83 f8 19             	cmp    eax,0x19
c0010812:	77 2d                	ja     c0010841 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010814:	8b 0c 85 e0 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcf20]
c001081b:	85 c9                	test   ecx,ecx
c001081d:	74 22                	je     c0010841 <SysSetDiskVolumeLabel(regs*)+0x3c>
c001081f:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010822:	85 db                	test   ebx,ebx
c0010824:	74 1b                	je     c0010841 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010826:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c001082c:	85 d2                	test   edx,edx
c001082e:	74 11                	je     c0010841 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010830:	8b 32                	mov    esi,DWORD PTR [edx]
c0010832:	53                   	push   ebx
c0010833:	50                   	push   eax
c0010834:	51                   	push   ecx
c0010835:	52                   	push   edx
c0010836:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010839:	83 c4 10             	add    esp,0x10
c001083c:	99                   	cdq    
c001083d:	59                   	pop    ecx
c001083e:	5b                   	pop    ebx
c001083f:	5e                   	pop    esi
c0010840:	c3                   	ret    
c0010841:	59                   	pop    ecx
c0010842:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010847:	ba ff ff ff ff       	mov    edx,0xffffffff
c001084c:	5b                   	pop    ebx
c001084d:	5e                   	pop    esi
c001084e:	c3                   	ret    

c001084f <SysGetDiskVolumeLabel(regs*)>:
c001084f:	57                   	push   edi
c0010850:	56                   	push   esi
c0010851:	53                   	push   ebx
c0010852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010856:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010859:	83 fa 19             	cmp    edx,0x19
c001085c:	77 38                	ja     c0010896 <SysGetDiskVolumeLabel(regs*)+0x47>
c001085e:	8b 0c 95 e0 30 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdcf20]
c0010865:	85 c9                	test   ecx,ecx
c0010867:	74 2d                	je     c0010896 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010869:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001086c:	85 db                	test   ebx,ebx
c001086e:	74 26                	je     c0010896 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010870:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010873:	85 f6                	test   esi,esi
c0010875:	74 1f                	je     c0010896 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010877:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c001087d:	85 c0                	test   eax,eax
c001087f:	74 15                	je     c0010896 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010881:	83 ec 0c             	sub    esp,0xc
c0010884:	8b 38                	mov    edi,DWORD PTR [eax]
c0010886:	56                   	push   esi
c0010887:	53                   	push   ebx
c0010888:	52                   	push   edx
c0010889:	51                   	push   ecx
c001088a:	50                   	push   eax
c001088b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001088e:	83 c4 20             	add    esp,0x20
c0010891:	99                   	cdq    
c0010892:	5b                   	pop    ebx
c0010893:	5e                   	pop    esi
c0010894:	5f                   	pop    edi
c0010895:	c3                   	ret    
c0010896:	5b                   	pop    ebx
c0010897:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001089c:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108a1:	5e                   	pop    esi
c00108a2:	5f                   	pop    edi
c00108a3:	c3                   	ret    

c00108a4 <SysShutdown(regs*)>:
c00108a4:	83 ec 0c             	sub    esp,0xc
c00108a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108ae:	85 c0                	test   eax,eax
c00108b0:	74 18                	je     c00108ca <SysShutdown(regs*)+0x26>
c00108b2:	83 f8 01             	cmp    eax,0x1
c00108b5:	74 38                	je     c00108ef <SysShutdown(regs*)+0x4b>
c00108b7:	83 f8 02             	cmp    eax,0x2
c00108ba:	74 24                	je     c00108e0 <SysShutdown(regs*)+0x3c>
c00108bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108c1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108c6:	83 c4 0c             	add    esp,0xc
c00108c9:	c3                   	ret    
c00108ca:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c00108cf:	8b 10                	mov    edx,DWORD PTR [eax]
c00108d1:	6a 00                	push   0x0
c00108d3:	6a 00                	push   0x0
c00108d5:	6a 00                	push   0x0
c00108d7:	50                   	push   eax
c00108d8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00108db:	83 c4 10             	add    esp,0x10
c00108de:	eb dc                	jmp    c00108bc <SysShutdown(regs*)+0x18>
c00108e0:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c00108e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00108e7:	6a 00                	push   0x0
c00108e9:	6a 00                	push   0x0
c00108eb:	6a 01                	push   0x1
c00108ed:	eb e8                	jmp    c00108d7 <SysShutdown(regs*)+0x33>
c00108ef:	a1 60 31 02 c0       	mov    eax,ds:0xc0023160
c00108f4:	85 c0                	test   eax,eax
c00108f6:	74 02                	je     c00108fa <SysShutdown(regs*)+0x56>
c00108f8:	ff d0                	call   eax
c00108fa:	31 c0                	xor    eax,eax
c00108fc:	31 d2                	xor    edx,edx
c00108fe:	83 c4 0c             	add    esp,0xc
c0010901:	c3                   	ret    

c0010902 <SysRealpath(regs*)>:
c0010902:	83 ec 0c             	sub    esp,0xc
c0010905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010909:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001090c:	85 d2                	test   edx,edx
c001090e:	74 07                	je     c0010917 <SysRealpath(regs*)+0x15>
c0010910:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010913:	85 c0                	test   eax,eax
c0010915:	75 0b                	jne    c0010922 <SysRealpath(regs*)+0x20>
c0010917:	b8 01 00 00 00       	mov    eax,0x1
c001091c:	31 d2                	xor    edx,edx
c001091e:	83 c4 0c             	add    esp,0xc
c0010921:	c3                   	ret    
c0010922:	51                   	push   ecx
c0010923:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010929:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001092c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010932:	51                   	push   ecx
c0010933:	52                   	push   edx
c0010934:	50                   	push   eax
c0010935:	e8 7a 9f ff ff       	call   c000a8b4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001093a:	83 c4 10             	add    esp,0x10
c001093d:	31 c0                	xor    eax,eax
c001093f:	31 d2                	xor    edx,edx
c0010941:	83 c4 0c             	add    esp,0xc
c0010944:	c3                   	ret    

c0010945 <SysReadDir(regs*)>:
c0010945:	53                   	push   ebx
c0010946:	83 ec 18             	sub    esp,0x18
c0010949:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001094d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010950:	83 f8 02             	cmp    eax,0x2
c0010953:	76 61                	jbe    c00109b6 <SysReadDir(regs*)+0x71>
c0010955:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001095c:	77 49                	ja     c00109a7 <SysReadDir(regs*)+0x62>
c001095e:	83 ec 0c             	sub    esp,0xc
c0010961:	50                   	push   eax
c0010962:	e8 d8 87 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010967:	83 c4 10             	add    esp,0x10
c001096a:	85 c0                	test   eax,eax
c001096c:	74 39                	je     c00109a7 <SysReadDir(regs*)+0x62>
c001096e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010976:	83 ec 0c             	sub    esp,0xc
c0010979:	8b 10                	mov    edx,DWORD PTR [eax]
c001097b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001097f:	51                   	push   ecx
c0010980:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010983:	51                   	push   ecx
c0010984:	6a 00                	push   0x0
c0010986:	68 10 01 00 00       	push   0x110
c001098b:	50                   	push   eax
c001098c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001098f:	83 c4 20             	add    esp,0x20
c0010992:	85 c0                	test   eax,eax
c0010994:	74 29                	je     c00109bf <SysReadDir(regs*)+0x7a>
c0010996:	83 f8 07             	cmp    eax,0x7
c0010999:	74 1b                	je     c00109b6 <SysReadDir(regs*)+0x71>
c001099b:	b8 02 00 00 00       	mov    eax,0x2
c00109a0:	31 d2                	xor    edx,edx
c00109a2:	83 c4 18             	add    esp,0x18
c00109a5:	5b                   	pop    ebx
c00109a6:	c3                   	ret    
c00109a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109ac:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109b1:	83 c4 18             	add    esp,0x18
c00109b4:	5b                   	pop    ebx
c00109b5:	c3                   	ret    
c00109b6:	b8 01 00 00 00       	mov    eax,0x1
c00109bb:	31 d2                	xor    edx,edx
c00109bd:	eb e3                	jmp    c00109a2 <SysReadDir(regs*)+0x5d>
c00109bf:	31 c0                	xor    eax,eax
c00109c1:	31 d2                	xor    edx,edx
c00109c3:	eb dd                	jmp    c00109a2 <SysReadDir(regs*)+0x5d>

c00109c5 <SysIsATTY(regs*)>:
c00109c5:	83 ec 0c             	sub    esp,0xc
c00109c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109cf:	83 f8 02             	cmp    eax,0x2
c00109d2:	76 07                	jbe    c00109db <SysIsATTY(regs*)+0x16>
c00109d4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00109d9:	75 28                	jne    c0010a03 <SysIsATTY(regs*)+0x3e>
c00109db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00109e9:	85 c0                	test   eax,eax
c00109eb:	74 26                	je     c0010a13 <SysIsATTY(regs*)+0x4e>
c00109ed:	83 ec 0c             	sub    esp,0xc
c00109f0:	8b 10                	mov    edx,DWORD PTR [eax]
c00109f2:	50                   	push   eax
c00109f3:	ff 12                	call   DWORD PTR [edx]
c00109f5:	31 d2                	xor    edx,edx
c00109f7:	25 ff 00 00 00       	and    eax,0xff
c00109fc:	83 c4 10             	add    esp,0x10
c00109ff:	83 c4 0c             	add    esp,0xc
c0010a02:	c3                   	ret    
c0010a03:	83 ec 0c             	sub    esp,0xc
c0010a06:	50                   	push   eax
c0010a07:	e8 33 87 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010a0c:	83 c4 10             	add    esp,0x10
c0010a0f:	85 c0                	test   eax,eax
c0010a11:	75 da                	jne    c00109ed <SysIsATTY(regs*)+0x28>
c0010a13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a18:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a1d:	83 c4 0c             	add    esp,0xc
c0010a20:	c3                   	ret    

c0010a21 <SysSeek(regs*)>:
c0010a21:	53                   	push   ebx
c0010a22:	83 ec 08             	sub    esp,0x8
c0010a25:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a29:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a2c:	8d 50 fd             	lea    edx,[eax-0x3]
c0010a2f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010a35:	77 34                	ja     c0010a6b <SysSeek(regs*)+0x4a>
c0010a37:	83 ec 0c             	sub    esp,0xc
c0010a3a:	50                   	push   eax
c0010a3b:	e8 ff 86 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010a40:	83 c4 0c             	add    esp,0xc
c0010a43:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010a46:	31 db                	xor    ebx,ebx
c0010a48:	53                   	push   ebx
c0010a49:	51                   	push   ecx
c0010a4a:	50                   	push   eax
c0010a4b:	e8 8c a1 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c0010a50:	83 c4 10             	add    esp,0x10
c0010a53:	85 c0                	test   eax,eax
c0010a55:	0f 95 c0             	setne  al
c0010a58:	31 d2                	xor    edx,edx
c0010a5a:	25 ff 00 00 00       	and    eax,0xff
c0010a5f:	f7 d8                	neg    eax
c0010a61:	83 d2 00             	adc    edx,0x0
c0010a64:	83 c4 08             	add    esp,0x8
c0010a67:	f7 da                	neg    edx
c0010a69:	5b                   	pop    ebx
c0010a6a:	c3                   	ret    
c0010a6b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a70:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a75:	83 c4 08             	add    esp,0x8
c0010a78:	5b                   	pop    ebx
c0010a79:	c3                   	ret    

c0010a7a <SysTell(regs*)>:
c0010a7a:	53                   	push   ebx
c0010a7b:	83 ec 08             	sub    esp,0x8
c0010a7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010a82:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010a85:	83 f8 02             	cmp    eax,0x2
c0010a88:	76 50                	jbe    c0010ada <SysTell(regs*)+0x60>
c0010a8a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010a8f:	76 19                	jbe    c0010aaa <SysTell(regs*)+0x30>
c0010a91:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010a94:	31 d2                	xor    edx,edx
c0010a96:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010a9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010aa3:	31 c0                	xor    eax,eax
c0010aa5:	83 c4 08             	add    esp,0x8
c0010aa8:	5b                   	pop    ebx
c0010aa9:	c3                   	ret    
c0010aaa:	83 ec 0c             	sub    esp,0xc
c0010aad:	50                   	push   eax
c0010aae:	e8 8c 86 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010ab3:	5a                   	pop    edx
c0010ab4:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010ab7:	59                   	pop    ecx
c0010ab8:	53                   	push   ebx
c0010ab9:	50                   	push   eax
c0010aba:	e8 73 a1 ff ff       	call   c000ac32 <File::tell(unsigned long long*)>
c0010abf:	83 c4 10             	add    esp,0x10
c0010ac2:	85 c0                	test   eax,eax
c0010ac4:	0f 95 c0             	setne  al
c0010ac7:	31 d2                	xor    edx,edx
c0010ac9:	25 ff 00 00 00       	and    eax,0xff
c0010ace:	f7 d8                	neg    eax
c0010ad0:	83 d2 00             	adc    edx,0x0
c0010ad3:	83 c4 08             	add    esp,0x8
c0010ad6:	f7 da                	neg    edx
c0010ad8:	5b                   	pop    ebx
c0010ad9:	c3                   	ret    
c0010ada:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010adf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ae4:	83 c4 08             	add    esp,0x8
c0010ae7:	5b                   	pop    ebx
c0010ae8:	c3                   	ret    

c0010ae9 <SysSize(regs*)>:
c0010ae9:	53                   	push   ebx
c0010aea:	83 ec 18             	sub    esp,0x18
c0010aed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010af1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010af4:	83 f8 02             	cmp    eax,0x2
c0010af7:	76 56                	jbe    c0010b4f <SysSize(regs*)+0x66>
c0010af9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010afe:	76 19                	jbe    c0010b19 <SysSize(regs*)+0x30>
c0010b00:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b03:	31 d2                	xor    edx,edx
c0010b05:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b0b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b12:	31 c0                	xor    eax,eax
c0010b14:	83 c4 18             	add    esp,0x18
c0010b17:	5b                   	pop    ebx
c0010b18:	c3                   	ret    
c0010b19:	83 ec 0c             	sub    esp,0xc
c0010b1c:	50                   	push   eax
c0010b1d:	e8 1d 86 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010b22:	83 c4 0c             	add    esp,0xc
c0010b25:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010b29:	52                   	push   edx
c0010b2a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010b2d:	52                   	push   edx
c0010b2e:	50                   	push   eax
c0010b2f:	e8 96 a2 ff ff       	call   c000adca <File::stat(unsigned long long*, bool*)>
c0010b34:	83 c4 10             	add    esp,0x10
c0010b37:	85 c0                	test   eax,eax
c0010b39:	0f 95 c0             	setne  al
c0010b3c:	31 d2                	xor    edx,edx
c0010b3e:	25 ff 00 00 00       	and    eax,0xff
c0010b43:	f7 d8                	neg    eax
c0010b45:	83 d2 00             	adc    edx,0x0
c0010b48:	83 c4 18             	add    esp,0x18
c0010b4b:	f7 da                	neg    edx
c0010b4d:	5b                   	pop    ebx
c0010b4e:	c3                   	ret    
c0010b4f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b54:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b59:	83 c4 18             	add    esp,0x18
c0010b5c:	5b                   	pop    ebx
c0010b5d:	c3                   	ret    

c0010b5e <SysSizeFromFilename(regs*)>:
c0010b5e:	57                   	push   edi
c0010b5f:	56                   	push   esi
c0010b60:	53                   	push   ebx
c0010b61:	83 ec 20             	sub    esp,0x20
c0010b64:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010b68:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010b6b:	83 fb 02             	cmp    ebx,0x2
c0010b6e:	0f 86 8c 00 00 00    	jbe    c0010c00 <SysSizeFromFilename(regs*)+0xa2>
c0010b74:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010b7a:	76 1b                	jbe    c0010b97 <SysSizeFromFilename(regs*)+0x39>
c0010b7c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010b7f:	31 d2                	xor    edx,edx
c0010b81:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b87:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b8e:	83 c4 20             	add    esp,0x20
c0010b91:	31 c0                	xor    eax,eax
c0010b93:	5b                   	pop    ebx
c0010b94:	5e                   	pop    esi
c0010b95:	5f                   	pop    edi
c0010b96:	c3                   	ret    
c0010b97:	83 ec 0c             	sub    esp,0xc
c0010b9a:	68 14 01 00 00       	push   0x114
c0010b9f:	e8 25 6c ff ff       	call   c00077c9 <malloc>
c0010ba4:	83 c4 0c             	add    esp,0xc
c0010ba7:	89 c7                	mov    edi,eax
c0010ba9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bb1:	50                   	push   eax
c0010bb2:	53                   	push   ebx
c0010bb3:	57                   	push   edi
c0010bb4:	e8 a5 9e ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0010bb9:	83 c4 0c             	add    esp,0xc
c0010bbc:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010bc0:	50                   	push   eax
c0010bc1:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010bc4:	52                   	push   edx
c0010bc5:	57                   	push   edi
c0010bc6:	e8 ff a1 ff ff       	call   c000adca <File::stat(unsigned long long*, bool*)>
c0010bcb:	83 c4 10             	add    esp,0x10
c0010bce:	85 ff                	test   edi,edi
c0010bd0:	74 14                	je     c0010be6 <SysSizeFromFilename(regs*)+0x88>
c0010bd2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bd6:	8b 17                	mov    edx,DWORD PTR [edi]
c0010bd8:	83 ec 0c             	sub    esp,0xc
c0010bdb:	57                   	push   edi
c0010bdc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010bdf:	83 c4 10             	add    esp,0x10
c0010be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010be6:	85 c0                	test   eax,eax
c0010be8:	0f 95 c0             	setne  al
c0010beb:	31 d2                	xor    edx,edx
c0010bed:	25 ff 00 00 00       	and    eax,0xff
c0010bf2:	f7 d8                	neg    eax
c0010bf4:	83 d2 00             	adc    edx,0x0
c0010bf7:	83 c4 20             	add    esp,0x20
c0010bfa:	f7 da                	neg    edx
c0010bfc:	5b                   	pop    ebx
c0010bfd:	5e                   	pop    esi
c0010bfe:	5f                   	pop    edi
c0010bff:	c3                   	ret    
c0010c00:	83 c4 20             	add    esp,0x20
c0010c03:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c08:	5b                   	pop    ebx
c0010c09:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c0e:	5e                   	pop    esi
c0010c0f:	5f                   	pop    edi
c0010c10:	c3                   	ret    

c0010c11 <SysClose(regs*)>:
c0010c11:	53                   	push   ebx
c0010c12:	83 ec 08             	sub    esp,0x8
c0010c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c19:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010c1c:	83 f8 02             	cmp    eax,0x2
c0010c1f:	76 41                	jbe    c0010c62 <SysClose(regs*)+0x51>
c0010c21:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010c27:	83 fa 01             	cmp    edx,0x1
c0010c2a:	76 2d                	jbe    c0010c59 <SysClose(regs*)+0x48>
c0010c2c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010c31:	77 2f                	ja     c0010c62 <SysClose(regs*)+0x51>
c0010c33:	83 ec 0c             	sub    esp,0xc
c0010c36:	50                   	push   eax
c0010c37:	e8 03 85 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010c3c:	89 c3                	mov    ebx,eax
c0010c3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c41:	e8 36 9f ff ff       	call   c000ab7c <File::close()>
c0010c46:	83 c4 10             	add    esp,0x10
c0010c49:	85 db                	test   ebx,ebx
c0010c4b:	74 0c                	je     c0010c59 <SysClose(regs*)+0x48>
c0010c4d:	83 ec 0c             	sub    esp,0xc
c0010c50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c52:	53                   	push   ebx
c0010c53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010c56:	83 c4 10             	add    esp,0x10
c0010c59:	31 c0                	xor    eax,eax
c0010c5b:	31 d2                	xor    edx,edx
c0010c5d:	83 c4 08             	add    esp,0x8
c0010c60:	5b                   	pop    ebx
c0010c61:	c3                   	ret    
c0010c62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c67:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c6c:	83 c4 08             	add    esp,0x8
c0010c6f:	5b                   	pop    ebx
c0010c70:	c3                   	ret    

c0010c71 <SysOpenDir(regs*)>:
c0010c71:	57                   	push   edi
c0010c72:	56                   	push   esi
c0010c73:	53                   	push   ebx
c0010c74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c78:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c7b:	85 c0                	test   eax,eax
c0010c7d:	0f 84 e7 00 00 00    	je     c0010d6a <SysOpenDir(regs*)+0xf9>
c0010c83:	83 ec 0c             	sub    esp,0xc
c0010c86:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c89:	56                   	push   esi
c0010c8a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010c8d:	57                   	push   edi
c0010c8e:	50                   	push   eax
c0010c8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010c92:	50                   	push   eax
c0010c93:	68 50 e8 01 c0       	push   0xc001e850
c0010c98:	e8 4b 98 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010c9d:	83 c4 18             	add    esp,0x18
c0010ca0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ca3:	50                   	push   eax
c0010ca4:	68 76 e8 01 c0       	push   0xc001e876
c0010ca9:	e8 3a 98 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010cae:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010cb5:	e8 0f 6b ff ff       	call   c00077c9 <malloc>
c0010cba:	83 c4 0c             	add    esp,0xc
c0010cbd:	89 c6                	mov    esi,eax
c0010cbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010cc4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010cc7:	50                   	push   eax
c0010cc8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ccb:	50                   	push   eax
c0010ccc:	56                   	push   esi
c0010ccd:	e8 b6 a2 ff ff       	call   c000af88 <Directory::Directory(char const*, Process*)>
c0010cd2:	c7 04 24 6a f6 01 c0 	mov    DWORD PTR [esp],0xc001f66a
c0010cd9:	e8 0a 98 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010cde:	83 c4 10             	add    esp,0x10
c0010ce1:	85 f6                	test   esi,esi
c0010ce3:	0f 84 8f 00 00 00    	je     c0010d78 <SysOpenDir(regs*)+0x107>
c0010ce9:	83 ec 0c             	sub    esp,0xc
c0010cec:	68 8b e8 01 c0       	push   0xc001e88b
c0010cf1:	e8 f2 97 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010cf6:	58                   	pop    eax
c0010cf7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010cfa:	5a                   	pop    edx
c0010cfb:	51                   	push   ecx
c0010cfc:	68 8f e8 01 c0       	push   0xc001e88f
c0010d01:	e8 e2 97 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010d06:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d09:	e8 3a a3 ff ff       	call   c000b048 <Directory::open()>
c0010d0e:	c7 04 24 2b d6 01 c0 	mov    DWORD PTR [esp],0xc001d62b
c0010d15:	89 c7                	mov    edi,eax
c0010d17:	e8 cc 97 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010d1c:	83 c4 10             	add    esp,0x10
c0010d1f:	85 ff                	test   edi,edi
c0010d21:	75 37                	jne    c0010d5a <SysOpenDir(regs*)+0xe9>
c0010d23:	83 ec 0c             	sub    esp,0xc
c0010d26:	68 a0 e8 01 c0       	push   0xc001e8a0
c0010d2b:	e8 b8 97 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010d30:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d33:	e8 12 81 ff ff       	call   c0008e4a <UnixFile::getFileDescriptor()>
c0010d38:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010d3b:	89 02                	mov    DWORD PTR [edx],eax
c0010d3d:	c1 f8 1f             	sar    eax,0x1f
c0010d40:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010d43:	c7 04 24 a4 e8 01 c0 	mov    DWORD PTR [esp],0xc001e8a4
c0010d4a:	e8 99 97 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010d4f:	83 c4 10             	add    esp,0x10
c0010d52:	31 c0                	xor    eax,eax
c0010d54:	5b                   	pop    ebx
c0010d55:	31 d2                	xor    edx,edx
c0010d57:	5e                   	pop    esi
c0010d58:	5f                   	pop    edi
c0010d59:	c3                   	ret    
c0010d5a:	83 ec 0c             	sub    esp,0xc
c0010d5d:	68 9c e8 01 c0       	push   0xc001e89c
c0010d62:	e8 81 97 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0010d67:	83 c4 10             	add    esp,0x10
c0010d6a:	5b                   	pop    ebx
c0010d6b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d70:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d75:	5e                   	pop    esi
c0010d76:	5f                   	pop    edi
c0010d77:	c3                   	ret    
c0010d78:	83 ec 0c             	sub    esp,0xc
c0010d7b:	68 87 e8 01 c0       	push   0xc001e887
c0010d80:	eb e0                	jmp    c0010d62 <SysOpenDir(regs*)+0xf1>

c0010d82 <SysCloseDir(regs*)>:
c0010d82:	53                   	push   ebx
c0010d83:	83 ec 08             	sub    esp,0x8
c0010d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d8a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010d8d:	8d 50 fd             	lea    edx,[eax-0x3]
c0010d90:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010d96:	77 2f                	ja     c0010dc7 <SysCloseDir(regs*)+0x45>
c0010d98:	83 ec 0c             	sub    esp,0xc
c0010d9b:	50                   	push   eax
c0010d9c:	e8 9e 83 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0010da1:	89 c3                	mov    ebx,eax
c0010da3:	89 04 24             	mov    DWORD PTR [esp],eax
c0010da6:	e8 f9 a2 ff ff       	call   c000b0a4 <Directory::close()>
c0010dab:	83 c4 10             	add    esp,0x10
c0010dae:	85 db                	test   ebx,ebx
c0010db0:	74 0c                	je     c0010dbe <SysCloseDir(regs*)+0x3c>
c0010db2:	83 ec 0c             	sub    esp,0xc
c0010db5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010db7:	53                   	push   ebx
c0010db8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010dbb:	83 c4 10             	add    esp,0x10
c0010dbe:	31 c0                	xor    eax,eax
c0010dc0:	31 d2                	xor    edx,edx
c0010dc2:	83 c4 08             	add    esp,0x8
c0010dc5:	5b                   	pop    ebx
c0010dc6:	c3                   	ret    
c0010dc7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010dcc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010dd1:	83 c4 08             	add    esp,0x8
c0010dd4:	5b                   	pop    ebx
c0010dd5:	c3                   	ret    

c0010dd6 <SysMakeDir(regs*)>:
c0010dd6:	56                   	push   esi
c0010dd7:	53                   	push   ebx
c0010dd8:	83 ec 10             	sub    esp,0x10
c0010ddb:	68 14 01 00 00       	push   0x114
c0010de0:	e8 e4 69 ff ff       	call   c00077c9 <malloc>
c0010de5:	83 c4 0c             	add    esp,0xc
c0010de8:	89 c3                	mov    ebx,eax
c0010dea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010def:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010df2:	56                   	push   esi
c0010df3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010df7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010dfa:	50                   	push   eax
c0010dfb:	53                   	push   ebx
c0010dfc:	e8 87 a1 ff ff       	call   c000af88 <Directory::Directory(char const*, Process*)>
c0010e01:	83 c4 10             	add    esp,0x10
c0010e04:	85 db                	test   ebx,ebx
c0010e06:	74 32                	je     c0010e3a <SysMakeDir(regs*)+0x64>
c0010e08:	83 ec 0c             	sub    esp,0xc
c0010e0b:	53                   	push   ebx
c0010e0c:	e8 17 a4 ff ff       	call   c000b228 <Directory::create()>
c0010e11:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e14:	89 c6                	mov    esi,eax
c0010e16:	e8 89 a2 ff ff       	call   c000b0a4 <Directory::close()>
c0010e1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010e20:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e23:	83 c4 10             	add    esp,0x10
c0010e26:	31 c0                	xor    eax,eax
c0010e28:	59                   	pop    ecx
c0010e29:	85 f6                	test   esi,esi
c0010e2b:	5b                   	pop    ebx
c0010e2c:	0f 95 c0             	setne  al
c0010e2f:	5e                   	pop    esi
c0010e30:	31 d2                	xor    edx,edx
c0010e32:	f7 d8                	neg    eax
c0010e34:	83 d2 00             	adc    edx,0x0
c0010e37:	f7 da                	neg    edx
c0010e39:	c3                   	ret    
c0010e3a:	59                   	pop    ecx
c0010e3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e40:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e45:	5b                   	pop    ebx
c0010e46:	5e                   	pop    esi
c0010e47:	c3                   	ret    

c0010e48 <SysWait(regs*)>:
c0010e48:	83 ec 10             	sub    esp,0x10
c0010e4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e4f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010e52:	52                   	push   edx
c0010e53:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010e56:	51                   	push   ecx
c0010e57:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e5a:	50                   	push   eax
c0010e5b:	e8 88 2b 00 00       	call   c00139e8 <waitTask(int, int*, int)>
c0010e60:	83 c4 1c             	add    esp,0x1c
c0010e63:	99                   	cdq    
c0010e64:	c3                   	ret    

c0010e65 <SysNotImpl(regs*)>:
c0010e65:	83 ec 18             	sub    esp,0x18
c0010e68:	68 a8 e8 01 c0       	push   0xc001e8a8
c0010e6d:	e8 f9 f2 ff ff       	call   c001016b <KePanic(char const*)>
c0010e72:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e77:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e7c:	83 c4 1c             	add    esp,0x1c
c0010e7f:	c3                   	ret    

c0010e80 <SysPanic(regs*)>:
c0010e80:	83 ec 18             	sub    esp,0x18
c0010e83:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e87:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010e8a:	50                   	push   eax
c0010e8b:	e8 db f2 ff ff       	call   c001016b <KePanic(char const*)>
c0010e90:	b8 01 00 00 00       	mov    eax,0x1
c0010e95:	31 d2                	xor    edx,edx
c0010e97:	83 c4 1c             	add    esp,0x1c
c0010e9a:	c3                   	ret    

c0010e9b <SysRmdir(regs*)>:
c0010e9b:	56                   	push   esi
c0010e9c:	53                   	push   ebx
c0010e9d:	83 ec 20             	sub    esp,0x20
c0010ea0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ea4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010ea7:	68 14 01 00 00       	push   0x114
c0010eac:	e8 18 69 ff ff       	call   c00077c9 <malloc>
c0010eb1:	83 c4 0c             	add    esp,0xc
c0010eb4:	89 c3                	mov    ebx,eax
c0010eb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ebb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ebe:	50                   	push   eax
c0010ebf:	56                   	push   esi
c0010ec0:	53                   	push   ebx
c0010ec1:	e8 98 9b ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0010ec6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ec9:	e8 c8 9d ff ff       	call   c000ac96 <File::unlink()>
c0010ece:	83 c4 10             	add    esp,0x10
c0010ed1:	85 db                	test   ebx,ebx
c0010ed3:	74 14                	je     c0010ee9 <SysRmdir(regs*)+0x4e>
c0010ed5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ed9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010edb:	83 ec 0c             	sub    esp,0xc
c0010ede:	53                   	push   ebx
c0010edf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ee2:	83 c4 10             	add    esp,0x10
c0010ee5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010ee9:	85 c0                	test   eax,eax
c0010eeb:	0f 95 c0             	setne  al
c0010eee:	31 d2                	xor    edx,edx
c0010ef0:	25 ff 00 00 00       	and    eax,0xff
c0010ef5:	f7 d8                	neg    eax
c0010ef7:	83 d2 00             	adc    edx,0x0
c0010efa:	83 c4 14             	add    esp,0x14
c0010efd:	f7 da                	neg    edx
c0010eff:	5b                   	pop    ebx
c0010f00:	5e                   	pop    esi
c0010f01:	c3                   	ret    

c0010f02 <SysUnlink(regs*)>:
c0010f02:	56                   	push   esi
c0010f03:	53                   	push   ebx
c0010f04:	83 ec 20             	sub    esp,0x20
c0010f07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f0b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f0e:	68 14 01 00 00       	push   0x114
c0010f13:	e8 b1 68 ff ff       	call   c00077c9 <malloc>
c0010f18:	83 c4 0c             	add    esp,0xc
c0010f1b:	89 c3                	mov    ebx,eax
c0010f1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f22:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f25:	50                   	push   eax
c0010f26:	56                   	push   esi
c0010f27:	53                   	push   ebx
c0010f28:	e8 31 9b ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0010f2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f30:	e8 61 9d ff ff       	call   c000ac96 <File::unlink()>
c0010f35:	83 c4 10             	add    esp,0x10
c0010f38:	85 db                	test   ebx,ebx
c0010f3a:	74 14                	je     c0010f50 <SysUnlink(regs*)+0x4e>
c0010f3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f40:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f42:	83 ec 0c             	sub    esp,0xc
c0010f45:	53                   	push   ebx
c0010f46:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f49:	83 c4 10             	add    esp,0x10
c0010f4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f50:	85 c0                	test   eax,eax
c0010f52:	0f 95 c0             	setne  al
c0010f55:	31 d2                	xor    edx,edx
c0010f57:	25 ff 00 00 00       	and    eax,0xff
c0010f5c:	f7 d8                	neg    eax
c0010f5e:	83 d2 00             	adc    edx,0x0
c0010f61:	83 c4 14             	add    esp,0x14
c0010f64:	f7 da                	neg    edx
c0010f66:	5b                   	pop    ebx
c0010f67:	5e                   	pop    esi
c0010f68:	c3                   	ret    

c0010f69 <SysGetArgv(regs*)>:
c0010f69:	83 ec 0c             	sub    esp,0xc
c0010f6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010f70:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010f73:	85 c0                	test   eax,eax
c0010f75:	78 2c                	js     c0010fa3 <SysGetArgv(regs*)+0x3a>
c0010f77:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010f7d:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010f80:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010f86:	7d 1b                	jge    c0010fa3 <SysGetArgv(regs*)+0x3a>
c0010f88:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010f8f:	85 c0                	test   eax,eax
c0010f91:	74 18                	je     c0010fab <SysGetArgv(regs*)+0x42>
c0010f93:	83 ec 08             	sub    esp,0x8
c0010f96:	50                   	push   eax
c0010f97:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010f9a:	50                   	push   eax
c0010f9b:	e8 70 f6 fe ff       	call   c0000610 <strcpy>
c0010fa0:	83 c4 10             	add    esp,0x10
c0010fa3:	31 c0                	xor    eax,eax
c0010fa5:	31 d2                	xor    edx,edx
c0010fa7:	83 c4 0c             	add    esp,0xc
c0010faa:	c3                   	ret    
c0010fab:	b8 01 00 00 00       	mov    eax,0x1
c0010fb0:	31 d2                	xor    edx,edx
c0010fb2:	83 c4 0c             	add    esp,0xc
c0010fb5:	c3                   	ret    

c0010fb6 <SysUSleep(regs*)>:
c0010fb6:	83 ec 1c             	sub    esp,0x1c
c0010fb9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010fbd:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010fc0:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010fc3:	6a 00                	push   0x0
c0010fc5:	6a 64                	push   0x64
c0010fc7:	52                   	push   edx
c0010fc8:	50                   	push   eax
c0010fc9:	e8 f2 b0 00 00       	call   c001c0c0 <__udivdi3>
c0010fce:	83 c4 14             	add    esp,0x14
c0010fd1:	50                   	push   eax
c0010fd2:	e8 e5 2a 00 00       	call   c0013abc <milliTenthSleep(unsigned int)>
c0010fd7:	31 c0                	xor    eax,eax
c0010fd9:	31 d2                	xor    edx,edx
c0010fdb:	83 c4 1c             	add    esp,0x1c
c0010fde:	c3                   	ret    

c0010fdf <SysSpawn(regs*)>:
c0010fdf:	56                   	push   esi
c0010fe0:	53                   	push   ebx
c0010fe1:	50                   	push   eax
c0010fe2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fe6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010fe9:	85 c0                	test   eax,eax
c0010feb:	75 08                	jne    c0010ff5 <SysSpawn(regs*)+0x16>
c0010fed:	59                   	pop    ecx
c0010fee:	31 c0                	xor    eax,eax
c0010ff0:	31 d2                	xor    edx,edx
c0010ff2:	5b                   	pop    ebx
c0010ff3:	5e                   	pop    esi
c0010ff4:	c3                   	ret    
c0010ff5:	83 ec 0c             	sub    esp,0xc
c0010ff8:	68 24 07 00 00       	push   0x724
c0010ffd:	e8 c7 67 ff ff       	call   c00077c9 <malloc>
c0011002:	83 c4 10             	add    esp,0x10
c0011005:	89 c6                	mov    esi,eax
c0011007:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001100a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001100d:	85 c0                	test   eax,eax
c001100f:	75 33                	jne    c0011044 <SysSpawn(regs*)+0x65>
c0011011:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011016:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011019:	52                   	push   edx
c001101a:	50                   	push   eax
c001101b:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c001101e:	53                   	push   ebx
c001101f:	56                   	push   esi
c0011020:	e8 43 21 00 00       	call   c0013168 <Process::Process(char const*, Process*, char**)>
c0011025:	83 c4 10             	add    esp,0x10
c0011028:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001102f:	75 bc                	jne    c0010fed <SysSpawn(regs*)+0xe>
c0011031:	83 ec 0c             	sub    esp,0xc
c0011034:	56                   	push   esi
c0011035:	e8 5a 26 00 00       	call   c0013694 <Process::createUserThread()>
c001103a:	8b 06                	mov    eax,DWORD PTR [esi]
c001103c:	83 c4 10             	add    esp,0x10
c001103f:	99                   	cdq    
c0011040:	59                   	pop    ecx
c0011041:	5b                   	pop    ebx
c0011042:	5e                   	pop    esi
c0011043:	c3                   	ret    
c0011044:	31 c0                	xor    eax,eax
c0011046:	eb d1                	jmp    c0011019 <SysSpawn(regs*)+0x3a>

c0011048 <SysGetEnv(regs*)>:
c0011048:	57                   	push   edi
c0011049:	56                   	push   esi
c001104a:	53                   	push   ebx
c001104b:	83 ec 1c             	sub    esp,0x1c
c001104e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011052:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011057:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001105a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001105d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011060:	50                   	push   eax
c0011061:	e8 bd ef ff ff       	call   c0010023 <Krnl::getProcessTotalEnvCount(Process*)>
c0011066:	83 c4 10             	add    esp,0x10
c0011069:	39 c7                	cmp    edi,eax
c001106b:	7c 14                	jl     c0011081 <SysGetEnv(regs*)+0x39>
c001106d:	85 f6                	test   esi,esi
c001106f:	75 0b                	jne    c001107c <SysGetEnv(regs*)+0x34>
c0011071:	83 c4 10             	add    esp,0x10
c0011074:	31 c0                	xor    eax,eax
c0011076:	5b                   	pop    ebx
c0011077:	31 d2                	xor    edx,edx
c0011079:	5e                   	pop    esi
c001107a:	5f                   	pop    edi
c001107b:	c3                   	ret    
c001107c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001107f:	eb f0                	jmp    c0011071 <SysGetEnv(regs*)+0x29>
c0011081:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011085:	52                   	push   edx
c0011086:	57                   	push   edi
c0011087:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001108d:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0011090:	51                   	push   ecx
c0011091:	50                   	push   eax
c0011092:	e8 ac ef ff ff       	call   c0010043 <Krnl::getProcessEnvPair(Process*, int)>
c0011097:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001109a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001109e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00110a2:	83 c4 0c             	add    esp,0xc
c00110a5:	85 db                	test   ebx,ebx
c00110a7:	75 23                	jne    c00110cc <SysGetEnv(regs*)+0x84>
c00110a9:	83 ec 0c             	sub    esp,0xc
c00110ac:	50                   	push   eax
c00110ad:	e8 9e f4 fe ff       	call   c0000550 <strlen>
c00110b2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00110b5:	89 c3                	mov    ebx,eax
c00110b7:	e8 94 f4 fe ff       	call   c0000550 <strlen>
c00110bc:	31 d2                	xor    edx,edx
c00110be:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00110c2:	83 c4 10             	add    esp,0x10
c00110c5:	83 c4 10             	add    esp,0x10
c00110c8:	5b                   	pop    ebx
c00110c9:	5e                   	pop    esi
c00110ca:	5f                   	pop    edi
c00110cb:	c3                   	ret    
c00110cc:	83 ec 08             	sub    esp,0x8
c00110cf:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110d2:	50                   	push   eax
c00110d3:	56                   	push   esi
c00110d4:	e8 37 f5 fe ff       	call   c0000610 <strcpy>
c00110d9:	58                   	pop    eax
c00110da:	5a                   	pop    edx
c00110db:	68 c2 e8 01 c0       	push   0xc001e8c2
c00110e0:	56                   	push   esi
c00110e1:	e8 ea f6 fe ff       	call   c00007d0 <strcat>
c00110e6:	59                   	pop    ecx
c00110e7:	5b                   	pop    ebx
c00110e8:	57                   	push   edi
c00110e9:	56                   	push   esi
c00110ea:	e8 e1 f6 fe ff       	call   c00007d0 <strcat>
c00110ef:	83 c4 10             	add    esp,0x10
c00110f2:	e9 7a ff ff ff       	jmp    c0011071 <SysGetEnv(regs*)+0x29>

c00110f7 <SysSetFatAttrib(regs*)>:
c00110f7:	57                   	push   edi
c00110f8:	56                   	push   esi
c00110f9:	53                   	push   ebx
c00110fa:	83 ec 1c             	sub    esp,0x1c
c00110fd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011101:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011104:	68 14 01 00 00       	push   0x114
c0011109:	e8 bb 66 ff ff       	call   c00077c9 <malloc>
c001110e:	83 c4 0c             	add    esp,0xc
c0011111:	89 c3                	mov    ebx,eax
c0011113:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011118:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001111b:	50                   	push   eax
c001111c:	57                   	push   edi
c001111d:	53                   	push   ebx
c001111e:	e8 3b 99 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0011123:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011126:	83 c4 0c             	add    esp,0xc
c0011129:	0f b6 d4             	movzx  edx,ah
c001112c:	25 ff 00 00 00       	and    eax,0xff
c0011131:	52                   	push   edx
c0011132:	50                   	push   eax
c0011133:	53                   	push   ebx
c0011134:	e8 f7 9b ff ff       	call   c000ad30 <File::chfatattr(unsigned char, unsigned char)>
c0011139:	83 c4 10             	add    esp,0x10
c001113c:	85 db                	test   ebx,ebx
c001113e:	74 14                	je     c0011154 <SysSetFatAttrib(regs*)+0x5d>
c0011140:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011144:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011146:	83 ec 0c             	sub    esp,0xc
c0011149:	53                   	push   ebx
c001114a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001114d:	83 c4 10             	add    esp,0x10
c0011150:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011154:	85 c0                	test   eax,eax
c0011156:	0f 95 c0             	setne  al
c0011159:	31 d2                	xor    edx,edx
c001115b:	25 ff 00 00 00       	and    eax,0xff
c0011160:	f7 d8                	neg    eax
c0011162:	83 d2 00             	adc    edx,0x0
c0011165:	83 c4 10             	add    esp,0x10
c0011168:	f7 da                	neg    edx
c001116a:	5b                   	pop    ebx
c001116b:	5e                   	pop    esi
c001116c:	5f                   	pop    edi
c001116d:	c3                   	ret    

c001116e <SysPipe(regs*)>:
c001116e:	57                   	push   edi
c001116f:	56                   	push   esi
c0011170:	53                   	push   ebx
c0011171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011175:	83 ec 0c             	sub    esp,0xc
c0011178:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001117b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001117e:	6a 20                	push   0x20
c0011180:	e8 44 66 ff ff       	call   c00077c9 <malloc>
c0011185:	89 c3                	mov    ebx,eax
c0011187:	58                   	pop    eax
c0011188:	5a                   	pop    edx
c0011189:	68 00 50 00 00       	push   0x5000
c001118e:	53                   	push   ebx
c001118f:	e8 3a 6f ff ff       	call   c00080ce <Pipe::Pipe(int)>
c0011194:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011197:	e8 ae 7c ff ff       	call   c0008e4a <UnixFile::getFileDescriptor()>
c001119c:	89 07                	mov    DWORD PTR [edi],eax
c001119e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00111a1:	e8 a4 7c ff ff       	call   c0008e4a <UnixFile::getFileDescriptor()>
c00111a6:	83 c4 10             	add    esp,0x10
c00111a9:	89 06                	mov    DWORD PTR [esi],eax
c00111ab:	31 d2                	xor    edx,edx
c00111ad:	5b                   	pop    ebx
c00111ae:	31 c0                	xor    eax,eax
c00111b0:	5e                   	pop    esi
c00111b1:	5f                   	pop    edi
c00111b2:	c3                   	ret    

c00111b3 <SysGetUnixTime(regs*)>:
c00111b3:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c00111b8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00111be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00111c2:	e9 a7 a2 ff ff       	jmp    c000b46e <Clock::timeInSecondsLocal()>

c00111c7 <string_ends_with(char const*, char const*)>:
c00111c7:	57                   	push   edi
c00111c8:	56                   	push   esi
c00111c9:	53                   	push   ebx
c00111ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111ce:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00111d2:	83 ec 0c             	sub    esp,0xc
c00111d5:	53                   	push   ebx
c00111d6:	e8 75 f3 fe ff       	call   c0000550 <strlen>
c00111db:	89 3c 24             	mov    DWORD PTR [esp],edi
c00111de:	89 c6                	mov    esi,eax
c00111e0:	e8 6b f3 fe ff       	call   c0000550 <strlen>
c00111e5:	83 c4 10             	add    esp,0x10
c00111e8:	39 c6                	cmp    esi,eax
c00111ea:	7d 06                	jge    c00111f2 <string_ends_with(char const*, char const*)+0x2b>
c00111ec:	5b                   	pop    ebx
c00111ed:	31 c0                	xor    eax,eax
c00111ef:	5e                   	pop    esi
c00111f0:	5f                   	pop    edi
c00111f1:	c3                   	ret    
c00111f2:	83 ec 08             	sub    esp,0x8
c00111f5:	29 c6                	sub    esi,eax
c00111f7:	57                   	push   edi
c00111f8:	01 f3                	add    ebx,esi
c00111fa:	53                   	push   ebx
c00111fb:	e8 f0 f4 fe ff       	call   c00006f0 <strcmp>
c0011200:	83 c4 10             	add    esp,0x10
c0011203:	85 c0                	test   eax,eax
c0011205:	5b                   	pop    ebx
c0011206:	0f 94 c0             	sete   al
c0011209:	5e                   	pop    esi
c001120a:	25 ff 00 00 00       	and    eax,0xff
c001120f:	5f                   	pop    edi
c0011210:	c3                   	ret    

c0011211 <SysOpen(regs*)>:
c0011211:	56                   	push   esi
c0011212:	53                   	push   ebx
c0011213:	81 ec 04 01 00 00    	sub    esp,0x104
c0011219:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011220:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011223:	85 d2                	test   edx,edx
c0011225:	0f 84 cc 01 00 00    	je     c00113f7 <SysOpen(regs*)+0x1e6>
c001122b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001122e:	85 c0                	test   eax,eax
c0011230:	0f 84 c1 01 00 00    	je     c00113f7 <SysOpen(regs*)+0x1e6>
c0011236:	83 ec 08             	sub    esp,0x8
c0011239:	50                   	push   eax
c001123a:	68 c4 e8 01 c0       	push   0xc001e8c4
c001123f:	e8 a4 92 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0011244:	83 c4 0c             	add    esp,0xc
c0011247:	68 d1 e8 01 c0       	push   0xc001e8d1
c001124c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001124f:	50                   	push   eax
c0011250:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011254:	56                   	push   esi
c0011255:	e8 5a 96 ff ff       	call   c000a8b4 <Fs::standardiseFiles(char*, char const*, char const*)>
c001125a:	89 34 24             	mov    DWORD PTR [esp],esi
c001125d:	e8 ee f2 fe ff       	call   c0000550 <strlen>
c0011262:	83 c4 10             	add    esp,0x10
c0011265:	48                   	dec    eax
c0011266:	74 1d                	je     c0011285 <SysOpen(regs*)+0x74>
c0011268:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001126b:	eb 0f                	jmp    c001127c <SysOpen(regs*)+0x6b>
c001126d:	80 fa 3a             	cmp    dl,0x3a
c0011270:	74 0f                	je     c0011281 <SysOpen(regs*)+0x70>
c0011272:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011276:	48                   	dec    eax
c0011277:	74 0c                	je     c0011285 <SysOpen(regs*)+0x74>
c0011279:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001127c:	80 fa 2e             	cmp    dl,0x2e
c001127f:	75 ec                	jne    c001126d <SysOpen(regs*)+0x5c>
c0011281:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011285:	83 ec 08             	sub    esp,0x8
c0011288:	68 d5 e8 01 c0       	push   0xc001e8d5
c001128d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011290:	50                   	push   eax
c0011291:	e8 31 ff ff ff       	call   c00111c7 <string_ends_with(char const*, char const*)>
c0011296:	83 c4 10             	add    esp,0x10
c0011299:	85 c0                	test   eax,eax
c001129b:	74 1d                	je     c00112ba <SysOpen(regs*)+0xa9>
c001129d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00112a0:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00112a6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00112ad:	81 c4 04 01 00 00    	add    esp,0x104
c00112b3:	31 c0                	xor    eax,eax
c00112b5:	31 d2                	xor    edx,edx
c00112b7:	5b                   	pop    ebx
c00112b8:	5e                   	pop    esi
c00112b9:	c3                   	ret    
c00112ba:	83 ec 08             	sub    esp,0x8
c00112bd:	68 da e8 01 c0       	push   0xc001e8da
c00112c2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112c5:	50                   	push   eax
c00112c6:	e8 fc fe ff ff       	call   c00111c7 <string_ends_with(char const*, char const*)>
c00112cb:	83 c4 10             	add    esp,0x10
c00112ce:	85 c0                	test   eax,eax
c00112d0:	75 cb                	jne    c001129d <SysOpen(regs*)+0x8c>
c00112d2:	83 ec 08             	sub    esp,0x8
c00112d5:	68 d6 e8 01 c0       	push   0xc001e8d6
c00112da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112dd:	50                   	push   eax
c00112de:	e8 0d f4 fe ff       	call   c00006f0 <strcmp>
c00112e3:	83 c4 10             	add    esp,0x10
c00112e6:	85 c0                	test   eax,eax
c00112e8:	74 b3                	je     c001129d <SysOpen(regs*)+0x8c>
c00112ea:	83 ec 08             	sub    esp,0x8
c00112ed:	68 d5 e8 01 c0       	push   0xc001e8d5
c00112f2:	56                   	push   esi
c00112f3:	e8 cf fe ff ff       	call   c00111c7 <string_ends_with(char const*, char const*)>
c00112f8:	83 c4 10             	add    esp,0x10
c00112fb:	85 c0                	test   eax,eax
c00112fd:	75 9e                	jne    c001129d <SysOpen(regs*)+0x8c>
c00112ff:	83 ec 08             	sub    esp,0x8
c0011302:	68 df e8 01 c0       	push   0xc001e8df
c0011307:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001130a:	50                   	push   eax
c001130b:	e8 b7 fe ff ff       	call   c00111c7 <string_ends_with(char const*, char const*)>
c0011310:	83 c4 10             	add    esp,0x10
c0011313:	85 c0                	test   eax,eax
c0011315:	0f 85 ef 00 00 00    	jne    c001140a <SysOpen(regs*)+0x1f9>
c001131b:	83 ec 08             	sub    esp,0x8
c001131e:	68 e4 e8 01 c0       	push   0xc001e8e4
c0011323:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011326:	50                   	push   eax
c0011327:	e8 9b fe ff ff       	call   c00111c7 <string_ends_with(char const*, char const*)>
c001132c:	83 c4 10             	add    esp,0x10
c001132f:	85 c0                	test   eax,eax
c0011331:	0f 85 d3 00 00 00    	jne    c001140a <SysOpen(regs*)+0x1f9>
c0011337:	83 ec 08             	sub    esp,0x8
c001133a:	68 e0 e8 01 c0       	push   0xc001e8e0
c001133f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011342:	51                   	push   ecx
c0011343:	e8 a8 f3 fe ff       	call   c00006f0 <strcmp>
c0011348:	83 c4 10             	add    esp,0x10
c001134b:	85 c0                	test   eax,eax
c001134d:	0f 84 b7 00 00 00    	je     c001140a <SysOpen(regs*)+0x1f9>
c0011353:	83 ec 08             	sub    esp,0x8
c0011356:	68 df e8 01 c0       	push   0xc001e8df
c001135b:	56                   	push   esi
c001135c:	e8 66 fe ff ff       	call   c00111c7 <string_ends_with(char const*, char const*)>
c0011361:	83 c4 10             	add    esp,0x10
c0011364:	85 c0                	test   eax,eax
c0011366:	0f 85 9e 00 00 00    	jne    c001140a <SysOpen(regs*)+0x1f9>
c001136c:	83 ec 0c             	sub    esp,0xc
c001136f:	68 14 01 00 00       	push   0x114
c0011374:	e8 50 64 ff ff       	call   c00077c9 <malloc>
c0011379:	83 c4 0c             	add    esp,0xc
c001137c:	89 c6                	mov    esi,eax
c001137e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011383:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011386:	50                   	push   eax
c0011387:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001138a:	52                   	push   edx
c001138b:	56                   	push   esi
c001138c:	e8 cd 96 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0011391:	83 c4 10             	add    esp,0x10
c0011394:	85 f6                	test   esi,esi
c0011396:	74 5f                	je     c00113f7 <SysOpen(regs*)+0x1e6>
c0011398:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001139b:	89 d0                	mov    eax,edx
c001139d:	25 ff 00 00 00       	and    eax,0xff
c00113a2:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00113a5:	89 d0                	mov    eax,edx
c00113a7:	83 e0 01             	and    eax,0x1
c00113aa:	f6 c2 02             	test   dl,0x2
c00113ad:	74 03                	je     c00113b2 <SysOpen(regs*)+0x1a1>
c00113af:	83 c8 02             	or     eax,0x2
c00113b2:	f6 c2 04             	test   dl,0x4
c00113b5:	74 03                	je     c00113ba <SysOpen(regs*)+0x1a9>
c00113b7:	83 c8 04             	or     eax,0x4
c00113ba:	f6 c2 08             	test   dl,0x8
c00113bd:	74 03                	je     c00113c2 <SysOpen(regs*)+0x1b1>
c00113bf:	83 c8 0a             	or     eax,0xa
c00113c2:	83 e2 10             	and    edx,0x10
c00113c5:	74 03                	je     c00113ca <SysOpen(regs*)+0x1b9>
c00113c7:	83 c8 12             	or     eax,0x12
c00113ca:	83 ec 08             	sub    esp,0x8
c00113cd:	50                   	push   eax
c00113ce:	56                   	push   esi
c00113cf:	e8 4a 97 ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c00113d4:	83 c4 10             	add    esp,0x10
c00113d7:	85 c0                	test   eax,eax
c00113d9:	75 1c                	jne    c00113f7 <SysOpen(regs*)+0x1e6>
c00113db:	83 ec 0c             	sub    esp,0xc
c00113de:	56                   	push   esi
c00113df:	e8 66 7a ff ff       	call   c0008e4a <UnixFile::getFileDescriptor()>
c00113e4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00113e7:	83 c4 10             	add    esp,0x10
c00113ea:	89 02                	mov    DWORD PTR [edx],eax
c00113ec:	c1 f8 1f             	sar    eax,0x1f
c00113ef:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00113f2:	e9 b6 fe ff ff       	jmp    c00112ad <SysOpen(regs*)+0x9c>
c00113f7:	81 c4 04 01 00 00    	add    esp,0x104
c00113fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011402:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011407:	5b                   	pop    ebx
c0011408:	5e                   	pop    esi
c0011409:	c3                   	ret    
c001140a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001140d:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011413:	e9 8e fe ff ff       	jmp    c00112a6 <SysOpen(regs*)+0x95>

c0011418 <KeSystemCall(regs*, void*)>:
c0011418:	53                   	push   ebx
c0011419:	83 ec 10             	sub    esp,0x10
c001141c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011420:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0011423:	68 e9 e8 01 c0       	push   0xc001e8e9
c0011428:	e8 bb 90 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001142d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011430:	83 c4 10             	add    esp,0x10
c0011433:	83 f8 32             	cmp    eax,0x32
c0011436:	77 16                	ja     c001144e <KeSystemCall(regs*, void*)+0x36>
c0011438:	8b 14 85 80 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0580]
c001143f:	85 d2                	test   edx,edx
c0011441:	74 0b                	je     c001144e <KeSystemCall(regs*, void*)+0x36>
c0011443:	83 ec 0c             	sub    esp,0xc
c0011446:	53                   	push   ebx
c0011447:	ff d2                	call   edx
c0011449:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001144c:	eb 0d                	jmp    c001145b <KeSystemCall(regs*, void*)+0x43>
c001144e:	52                   	push   edx
c001144f:	52                   	push   edx
c0011450:	50                   	push   eax
c0011451:	68 f9 e8 01 c0       	push   0xc001e8f9
c0011456:	e8 8d 90 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001145b:	83 c4 10             	add    esp,0x10
c001145e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011463:	31 d2                	xor    edx,edx
c0011465:	83 c4 08             	add    esp,0x8
c0011468:	5b                   	pop    ebx
c0011469:	c3                   	ret    

c001146a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001146a:	55                   	push   ebp
c001146b:	57                   	push   edi
c001146c:	56                   	push   esi
c001146d:	53                   	push   ebx
c001146e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011474:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001147b:	8a 1e                	mov    bl,BYTE PTR [esi]
c001147d:	8d 6e 01             	lea    ebp,[esi+0x1]
c0011480:	80 fb 40             	cmp    bl,0x40
c0011483:	75 1b                	jne    c00114a0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0011485:	8a 16                	mov    dl,BYTE PTR [esi]
c0011487:	84 d2                	test   dl,dl
c0011489:	0f 84 f1 00 00 00    	je     c0011580 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001148f:	8d 46 01             	lea    eax,[esi+0x1]
c0011492:	80 fa 3a             	cmp    dl,0x3a
c0011495:	74 04                	je     c001149b <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0011497:	89 c6                	mov    esi,eax
c0011499:	eb ea                	jmp    c0011485 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001149b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001149e:	89 c6                	mov    esi,eax
c00114a0:	50                   	push   eax
c00114a1:	6a 40                	push   0x40
c00114a3:	6a 00                	push   0x0
c00114a5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00114a9:	50                   	push   eax
c00114aa:	e8 31 f0 fe ff       	call   c00004e0 <memset>
c00114af:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00114b6:	31 c0                	xor    eax,eax
c00114b8:	83 c4 10             	add    esp,0x10
c00114bb:	8a 0f                	mov    cl,BYTE PTR [edi]
c00114bd:	84 c9                	test   cl,cl
c00114bf:	0f 84 bb 00 00 00    	je     c0011580 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114c5:	3d c7 00 00 00       	cmp    eax,0xc7
c00114ca:	0f 8f b0 00 00 00    	jg     c0011580 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00114d0:	80 f9 0a             	cmp    cl,0xa
c00114d3:	0f 85 98 00 00 00    	jne    c0011571 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00114d9:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00114de:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00114e2:	a8 df                	test   al,0xdf
c00114e4:	0f 94 c1             	sete   cl
c00114e7:	3c 23                	cmp    al,0x23
c00114e9:	0f 94 c2             	sete   dl
c00114ec:	08 d1                	or     cl,dl
c00114ee:	75 4a                	jne    c001153a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114f0:	8d 50 f7             	lea    edx,[eax-0x9]
c00114f3:	80 fa 01             	cmp    dl,0x1
c00114f6:	76 42                	jbe    c001153a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00114f8:	3c 5b                	cmp    al,0x5b
c00114fa:	75 42                	jne    c001153e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00114fc:	80 fb 40             	cmp    bl,0x40
c00114ff:	75 39                	jne    c001153a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011501:	83 ec 0c             	sub    esp,0xc
c0011504:	8d 54 24 65          	lea    edx,[esp+0x65]
c0011508:	52                   	push   edx
c0011509:	e8 42 f0 fe ff       	call   c0000550 <strlen>
c001150e:	83 c4 10             	add    esp,0x10
c0011511:	83 f8 3f             	cmp    eax,0x3f
c0011514:	77 6a                	ja     c0011580 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011516:	50                   	push   eax
c0011517:	50                   	push   eax
c0011518:	8d 54 24 61          	lea    edx,[esp+0x61]
c001151c:	52                   	push   edx
c001151d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011521:	52                   	push   edx
c0011522:	e8 e9 f0 fe ff       	call   c0000610 <strcpy>
c0011527:	58                   	pop    eax
c0011528:	8d 54 24 24          	lea    edx,[esp+0x24]
c001152c:	52                   	push   edx
c001152d:	e8 1e f0 fe ff       	call   c0000550 <strlen>
c0011532:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0011537:	83 c4 10             	add    esp,0x10
c001153a:	31 d2                	xor    edx,edx
c001153c:	eb 3a                	jmp    c0011578 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001153e:	80 fb 40             	cmp    bl,0x40
c0011541:	74 06                	je     c0011549 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0011543:	8d 44 24 58          	lea    eax,[esp+0x58]
c0011547:	eb 20                	jmp    c0011569 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0011549:	50                   	push   eax
c001154a:	50                   	push   eax
c001154b:	55                   	push   ebp
c001154c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011550:	50                   	push   eax
c0011551:	e8 9a f1 fe ff       	call   c00006f0 <strcmp>
c0011556:	83 c4 10             	add    esp,0x10
c0011559:	85 c0                	test   eax,eax
c001155b:	75 dd                	jne    c001153a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001155d:	eb e4                	jmp    c0011543 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001155f:	8d 50 01             	lea    edx,[eax+0x1]
c0011562:	80 f9 3d             	cmp    cl,0x3d
c0011565:	74 1d                	je     c0011584 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0011567:	89 d0                	mov    eax,edx
c0011569:	8a 08                	mov    cl,BYTE PTR [eax]
c001156b:	84 c9                	test   cl,cl
c001156d:	75 f0                	jne    c001155f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001156f:	eb 0f                	jmp    c0011580 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011571:	8d 50 01             	lea    edx,[eax+0x1]
c0011574:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0011578:	47                   	inc    edi
c0011579:	89 d0                	mov    eax,edx
c001157b:	e9 3b ff ff ff       	jmp    c00114bb <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0011580:	31 c0                	xor    eax,eax
c0011582:	eb 33                	jmp    c00115b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0011584:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011588:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001158b:	50                   	push   eax
c001158c:	50                   	push   eax
c001158d:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011591:	50                   	push   eax
c0011592:	56                   	push   esi
c0011593:	e8 58 f1 fe ff       	call   c00006f0 <strcmp>
c0011598:	83 c4 10             	add    esp,0x10
c001159b:	85 c0                	test   eax,eax
c001159d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00115a1:	75 97                	jne    c001153a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115a3:	51                   	push   ecx
c00115a4:	51                   	push   ecx
c00115a5:	52                   	push   edx
c00115a6:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00115ad:	e8 5e f0 fe ff       	call   c0000610 <strcpy>
c00115b2:	83 c4 10             	add    esp,0x10
c00115b5:	b0 01                	mov    al,0x1
c00115b7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00115bd:	5b                   	pop    ebx
c00115be:	5e                   	pop    esi
c00115bf:	5f                   	pop    edi
c00115c0:	5d                   	pop    ebp
c00115c1:	c3                   	ret    

c00115c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00115c2:	57                   	push   edi
c00115c3:	56                   	push   esi
c00115c4:	53                   	push   ebx
c00115c5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00115cb:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00115d2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00115d9:	53                   	push   ebx
c00115da:	e8 71 ef fe ff       	call   c0000550 <strlen>
c00115df:	89 34 24             	mov    DWORD PTR [esp],esi
c00115e2:	89 c7                	mov    edi,eax
c00115e4:	e8 67 ef fe ff       	call   c0000550 <strlen>
c00115e9:	83 c4 10             	add    esp,0x10
c00115ec:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00115f0:	3d ff 00 00 00       	cmp    eax,0xff
c00115f5:	0f 87 d3 00 00 00    	ja     c00116ce <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00115fb:	57                   	push   edi
c00115fc:	57                   	push   edi
c00115fd:	56                   	push   esi
c00115fe:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0011602:	56                   	push   esi
c0011603:	e8 08 f0 fe ff       	call   c0000610 <strcpy>
c0011608:	58                   	pop    eax
c0011609:	5a                   	pop    edx
c001160a:	68 b6 eb 01 c0       	push   0xc001ebb6
c001160f:	56                   	push   esi
c0011610:	e8 bb f1 fe ff       	call   c00007d0 <strcat>
c0011615:	59                   	pop    ecx
c0011616:	5f                   	pop    edi
c0011617:	53                   	push   ebx
c0011618:	56                   	push   esi
c0011619:	e8 b2 f1 fe ff       	call   c00007d0 <strcat>
c001161e:	58                   	pop    eax
c001161f:	5a                   	pop    edx
c0011620:	68 0d e9 01 c0       	push   0xc001e90d
c0011625:	56                   	push   esi
c0011626:	e8 a5 f1 fe ff       	call   c00007d0 <strcat>
c001162b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011632:	e8 92 61 ff ff       	call   c00077c9 <malloc>
c0011637:	83 c4 0c             	add    esp,0xc
c001163a:	89 c3                	mov    ebx,eax
c001163c:	ff 35 50 3e 02 c0    	push   DWORD PTR ds:0xc0023e50
c0011642:	56                   	push   esi
c0011643:	50                   	push   eax
c0011644:	e8 15 94 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0011649:	83 c4 10             	add    esp,0x10
c001164c:	85 db                	test   ebx,ebx
c001164e:	74 7e                	je     c00116ce <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011650:	51                   	push   ecx
c0011651:	51                   	push   ecx
c0011652:	6a 01                	push   0x1
c0011654:	53                   	push   ebx
c0011655:	e8 c4 94 ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c001165a:	83 c4 10             	add    esp,0x10
c001165d:	85 c0                	test   eax,eax
c001165f:	74 08                	je     c0011669 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011661:	83 ec 0c             	sub    esp,0xc
c0011664:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011666:	53                   	push   ebx
c0011667:	eb 5f                	jmp    c00116c8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011669:	52                   	push   edx
c001166a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001166e:	50                   	push   eax
c001166f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011673:	50                   	push   eax
c0011674:	53                   	push   ebx
c0011675:	e8 50 97 ff ff       	call   c000adca <File::stat(unsigned long long*, bool*)>
c001167a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001167e:	83 c4 10             	add    esp,0x10
c0011681:	89 c1                	mov    ecx,eax
c0011683:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0011687:	74 31                	je     c00116ba <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011689:	83 ec 0c             	sub    esp,0xc
c001168c:	50                   	push   eax
c001168d:	e8 37 61 ff ff       	call   c00077c9 <malloc>
c0011692:	89 c6                	mov    esi,eax
c0011694:	58                   	pop    eax
c0011695:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011697:	8d 54 24 20          	lea    edx,[esp+0x20]
c001169b:	52                   	push   edx
c001169c:	56                   	push   esi
c001169d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116a5:	53                   	push   ebx
c00116a6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00116a9:	83 c4 20             	add    esp,0x20
c00116ac:	85 c0                	test   eax,eax
c00116ae:	75 0a                	jne    c00116ba <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00116b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116b4:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00116b8:	74 18                	je     c00116d2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00116ba:	83 ec 0c             	sub    esp,0xc
c00116bd:	53                   	push   ebx
c00116be:	e8 b9 94 ff ff       	call   c000ab7c <File::close()>
c00116c3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116cb:	83 c4 10             	add    esp,0x10
c00116ce:	31 c0                	xor    eax,eax
c00116d0:	eb 3b                	jmp    c001170d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00116d2:	83 ec 0c             	sub    esp,0xc
c00116d5:	53                   	push   ebx
c00116d6:	e8 a1 94 ff ff       	call   c000ab7c <File::close()>
c00116db:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116dd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00116e0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00116e3:	83 c4 0c             	add    esp,0xc
c00116e6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116ed:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00116f4:	56                   	push   esi
c00116f5:	e8 70 fd ff ff       	call   c001146a <Reg::findLineFromLoadedData(char*, char*, char*)>
c00116fa:	89 34 24             	mov    DWORD PTR [esp],esi
c00116fd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011701:	e8 d3 60 ff ff       	call   c00077d9 <free>
c0011706:	83 c4 10             	add    esp,0x10
c0011709:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001170d:	81 c4 20 01 00 00    	add    esp,0x120
c0011713:	5b                   	pop    ebx
c0011714:	5e                   	pop    esi
c0011715:	5f                   	pop    edi
c0011716:	c3                   	ret    

c0011717 <Reg::getLine(char*, char*, char*)>:
c0011717:	57                   	push   edi
c0011718:	56                   	push   esi
c0011719:	53                   	push   ebx
c001171a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001171e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011722:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011726:	57                   	push   edi
c0011727:	56                   	push   esi
c0011728:	53                   	push   ebx
c0011729:	68 12 e9 01 c0       	push   0xc001e912
c001172e:	e8 8f fe ff ff       	call   c00115c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011733:	83 c4 10             	add    esp,0x10
c0011736:	84 c0                	test   al,al
c0011738:	75 10                	jne    c001174a <Reg::getLine(char*, char*, char*)+0x33>
c001173a:	57                   	push   edi
c001173b:	56                   	push   esi
c001173c:	53                   	push   ebx
c001173d:	68 37 e9 01 c0       	push   0xc001e937
c0011742:	e8 7b fe ff ff       	call   c00115c2 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011747:	83 c4 10             	add    esp,0x10
c001174a:	5b                   	pop    ebx
c001174b:	5e                   	pop    esi
c001174c:	5f                   	pop    edi
c001174d:	c3                   	ret    

c001174e <Reg::readInt(char*, char*, int*)>:
c001174e:	55                   	push   ebp
c001174f:	57                   	push   edi
c0011750:	56                   	push   esi
c0011751:	53                   	push   ebx
c0011752:	81 ec f0 00 00 00    	sub    esp,0xf0
c0011758:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001175c:	57                   	push   edi
c001175d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011764:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001176b:	e8 a7 ff ff ff       	call   c0011717 <Reg::getLine(char*, char*, char*)>
c0011770:	83 c4 10             	add    esp,0x10
c0011773:	84 c0                	test   al,al
c0011775:	0f 84 b3 00 00 00    	je     c001182e <Reg::readInt(char*, char*, int*)+0xe0>
c001177b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001177f:	80 fa 2b             	cmp    dl,0x2b
c0011782:	74 0c                	je     c0011790 <Reg::readInt(char*, char*, int*)+0x42>
c0011784:	80 fa 2d             	cmp    dl,0x2d
c0011787:	75 0e                	jne    c0011797 <Reg::readInt(char*, char*, int*)+0x49>
c0011789:	ba 01 00 00 00       	mov    edx,0x1
c001178e:	eb 0b                	jmp    c001179b <Reg::readInt(char*, char*, int*)+0x4d>
c0011790:	ba 01 00 00 00       	mov    edx,0x1
c0011795:	eb 02                	jmp    c0011799 <Reg::readInt(char*, char*, int*)+0x4b>
c0011797:	31 d2                	xor    edx,edx
c0011799:	31 c0                	xor    eax,eax
c001179b:	be 0a 00 00 00       	mov    esi,0xa
c00117a0:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00117a5:	75 20                	jne    c00117c7 <Reg::readInt(char*, char*, int*)+0x79>
c00117a7:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00117ab:	80 f9 78             	cmp    cl,0x78
c00117ae:	75 0a                	jne    c00117ba <Reg::readInt(char*, char*, int*)+0x6c>
c00117b0:	83 c2 02             	add    edx,0x2
c00117b3:	be 10 00 00 00       	mov    esi,0x10
c00117b8:	eb 0d                	jmp    c00117c7 <Reg::readInt(char*, char*, int*)+0x79>
c00117ba:	80 f9 62             	cmp    cl,0x62
c00117bd:	75 08                	jne    c00117c7 <Reg::readInt(char*, char*, int*)+0x79>
c00117bf:	83 c2 02             	add    edx,0x2
c00117c2:	be 02 00 00 00       	mov    esi,0x2
c00117c7:	01 d7                	add    edi,edx
c00117c9:	31 d2                	xor    edx,edx
c00117cb:	8a 1f                	mov    bl,BYTE PTR [edi]
c00117cd:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00117d1:	80 fb 0d             	cmp    bl,0xd
c00117d4:	0f 94 c3             	sete   bl
c00117d7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117dc:	0f 94 c1             	sete   cl
c00117df:	08 cb                	or     bl,cl
c00117e1:	75 3a                	jne    c001181d <Reg::readInt(char*, char*, int*)+0xcf>
c00117e3:	0f af d6             	imul   edx,esi
c00117e6:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00117eb:	83 fe 10             	cmp    esi,0x10
c00117ee:	75 26                	jne    c0011816 <Reg::readInt(char*, char*, int*)+0xc8>
c00117f0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00117f4:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00117f7:	89 e9                	mov    ecx,ebp
c00117f9:	80 f9 05             	cmp    cl,0x5
c00117fc:	77 06                	ja     c0011804 <Reg::readInt(char*, char*, int*)+0xb6>
c00117fe:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0011802:	eb 16                	jmp    c001181a <Reg::readInt(char*, char*, int*)+0xcc>
c0011804:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011808:	83 e9 61             	sub    ecx,0x61
c001180b:	80 f9 05             	cmp    cl,0x5
c001180e:	77 06                	ja     c0011816 <Reg::readInt(char*, char*, int*)+0xc8>
c0011810:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0011814:	eb 04                	jmp    c001181a <Reg::readInt(char*, char*, int*)+0xcc>
c0011816:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001181a:	47                   	inc    edi
c001181b:	eb ae                	jmp    c00117cb <Reg::readInt(char*, char*, int*)+0x7d>
c001181d:	84 c0                	test   al,al
c001181f:	74 02                	je     c0011823 <Reg::readInt(char*, char*, int*)+0xd5>
c0011821:	f7 da                	neg    edx
c0011823:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001182a:	89 10                	mov    DWORD PTR [eax],edx
c001182c:	88 d8                	mov    al,bl
c001182e:	81 c4 ec 00 00 00    	add    esp,0xec
c0011834:	5b                   	pop    ebx
c0011835:	5e                   	pop    esi
c0011836:	5f                   	pop    edi
c0011837:	5d                   	pop    ebp
c0011838:	c3                   	ret    

c0011839 <Reg::readString(char*, char*, char*, int)>:
c0011839:	57                   	push   edi
c001183a:	56                   	push   esi
c001183b:	53                   	push   ebx
c001183c:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011842:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0011849:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001184d:	57                   	push   edi
c001184e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011855:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001185c:	e8 b6 fe ff ff       	call   c0011717 <Reg::getLine(char*, char*, char*)>
c0011861:	83 c4 10             	add    esp,0x10
c0011864:	89 c6                	mov    esi,eax
c0011866:	84 c0                	test   al,al
c0011868:	74 44                	je     c00118ae <Reg::readString(char*, char*, char*, int)+0x75>
c001186a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011871:	31 c0                	xor    eax,eax
c0011873:	4a                   	dec    edx
c0011874:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0011877:	84 c9                	test   cl,cl
c0011879:	74 0f                	je     c001188a <Reg::readString(char*, char*, char*, int)+0x51>
c001187b:	39 c2                	cmp    edx,eax
c001187d:	7e 0b                	jle    c001188a <Reg::readString(char*, char*, char*, int)+0x51>
c001187f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011882:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0011887:	40                   	inc    eax
c0011888:	eb ea                	jmp    c0011874 <Reg::readString(char*, char*, char*, int)+0x3b>
c001188a:	83 ec 0c             	sub    esp,0xc
c001188d:	53                   	push   ebx
c001188e:	e8 bd ec fe ff       	call   c0000550 <strlen>
c0011893:	83 c4 10             	add    esp,0x10
c0011896:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001189b:	75 11                	jne    c00118ae <Reg::readString(char*, char*, char*, int)+0x75>
c001189d:	83 ec 0c             	sub    esp,0xc
c00118a0:	53                   	push   ebx
c00118a1:	e8 aa ec fe ff       	call   c0000550 <strlen>
c00118a6:	83 c4 10             	add    esp,0x10
c00118a9:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00118ae:	81 c4 d0 00 00 00    	add    esp,0xd0
c00118b4:	89 f0                	mov    eax,esi
c00118b6:	5b                   	pop    ebx
c00118b7:	5e                   	pop    esi
c00118b8:	5f                   	pop    edi
c00118b9:	c3                   	ret    

c00118ba <Reg::readBool(char*, char*, bool*)>:
c00118ba:	83 ec 20             	sub    esp,0x20
c00118bd:	8d 44 24 10          	lea    eax,[esp+0x10]
c00118c1:	50                   	push   eax
c00118c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118ca:	e8 7f fe ff ff       	call   c001174e <Reg::readInt(char*, char*, int*)>
c00118cf:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00118d4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00118d8:	0f 95 02             	setne  BYTE PTR [edx]
c00118db:	83 c4 2c             	add    esp,0x2c
c00118de:	c3                   	ret    

c00118df <Reg::readBoolWithDefault(char*, char*, bool)>:
c00118df:	53                   	push   ebx
c00118e0:	83 ec 1c             	sub    esp,0x1c
c00118e3:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00118e7:	8d 44 24 13          	lea    eax,[esp+0x13]
c00118eb:	50                   	push   eax
c00118ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00118f4:	e8 c1 ff ff ff       	call   c00118ba <Reg::readBool(char*, char*, bool*)>
c00118f9:	83 c4 10             	add    esp,0x10
c00118fc:	84 c0                	test   al,al
c00118fe:	74 04                	je     c0011904 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0011900:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0011904:	88 d8                	mov    al,bl
c0011906:	83 c4 18             	add    esp,0x18
c0011909:	5b                   	pop    ebx
c001190a:	c3                   	ret    

c001190b <Reg::readIntWithDefault(char*, char*, int)>:
c001190b:	53                   	push   ebx
c001190c:	83 ec 1c             	sub    esp,0x1c
c001190f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011913:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011917:	50                   	push   eax
c0011918:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001191c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011920:	e8 29 fe ff ff       	call   c001174e <Reg::readInt(char*, char*, int*)>
c0011925:	83 c4 10             	add    esp,0x10
c0011928:	84 c0                	test   al,al
c001192a:	74 04                	je     c0011930 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001192c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011930:	89 d8                	mov    eax,ebx
c0011932:	83 c4 18             	add    esp,0x18
c0011935:	5b                   	pop    ebx
c0011936:	c3                   	ret    

c0011937 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0011937:	57                   	push   edi
c0011938:	56                   	push   esi
c0011939:	56                   	push   esi
c001193a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001193e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011942:	56                   	push   esi
c0011943:	57                   	push   edi
c0011944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001194c:	e8 e8 fe ff ff       	call   c0011839 <Reg::readString(char*, char*, char*, int)>
c0011951:	83 c4 10             	add    esp,0x10
c0011954:	84 c0                	test   al,al
c0011956:	75 1a                	jne    c0011972 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011958:	51                   	push   ecx
c0011959:	56                   	push   esi
c001195a:	6a 00                	push   0x0
c001195c:	57                   	push   edi
c001195d:	e8 7e eb fe ff       	call   c00004e0 <memset>
c0011962:	8d 4e ff             	lea    ecx,[esi-0x1]
c0011965:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011969:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001196b:	83 c4 10             	add    esp,0x10
c001196e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011972:	89 f8                	mov    eax,edi
c0011974:	5a                   	pop    edx
c0011975:	5e                   	pop    esi
c0011976:	5f                   	pop    edi
c0011977:	c3                   	ret    

c0011978 <SysEject(regs*)>:
c0011978:	83 ec 0c             	sub    esp,0xc
c001197b:	83 ca ff             	or     edx,0xffffffff
c001197e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011982:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011985:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001198a:	83 e9 41             	sub    ecx,0x41
c001198d:	83 f9 19             	cmp    ecx,0x19
c0011990:	77 18                	ja     c00119aa <SysEject(regs*)+0x32>
c0011992:	8b 0c 8d e0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf20]
c0011999:	85 c9                	test   ecx,ecx
c001199b:	74 0d                	je     c00119aa <SysEject(regs*)+0x32>
c001199d:	83 ec 0c             	sub    esp,0xc
c00119a0:	51                   	push   ecx
c00119a1:	e8 00 b2 ff ff       	call   c000cba6 <LogicalDisk::eject()>
c00119a6:	83 c4 10             	add    esp,0x10
c00119a9:	99                   	cdq    
c00119aa:	83 c4 0c             	add    esp,0xc
c00119ad:	c3                   	ret    

c00119ae <SysExit(regs*)>:
c00119ae:	83 ec 18             	sub    esp,0x18
c00119b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00119b5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119b8:	e8 23 27 00 00       	call   c00140e0 <terminateTask(int)>
c00119bd:	83 c8 ff             	or     eax,0xffffffff
c00119c0:	83 c4 1c             	add    esp,0x1c
c00119c3:	89 c2                	mov    edx,eax
c00119c5:	c3                   	ret    

c00119c6 <SysGetCwd(regs*)>:
c00119c6:	83 ec 10             	sub    esp,0x10
c00119c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00119cd:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00119d0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00119d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119d8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00119db:	e8 80 8e ff ff       	call   c000a860 <Fs::getcwd(Process*, char*, int)>
c00119e0:	83 c4 1c             	add    esp,0x1c
c00119e3:	99                   	cdq    
c00119e4:	c3                   	ret    

c00119e5 <SysGetPID(regs*)>:
c00119e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00119ef:	99                   	cdq    
c00119f0:	c3                   	ret    

c00119f1 <SysGetRAMData(regs*)>:
c00119f1:	8b 0d a8 0b 02 c0    	mov    ecx,DWORD PTR ds:0xc0020ba8
c00119f7:	69 05 a4 0b 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020ba4,0xc8
c0011a01:	99                   	cdq    
c0011a02:	f7 f9                	idiv   ecx
c0011a04:	c1 e0 18             	shl    eax,0x18
c0011a07:	09 c8                	or     eax,ecx
c0011a09:	99                   	cdq    
c0011a0a:	c3                   	ret    

c0011a0b <SysGetVGAPtr(regs*)>:
c0011a0b:	55                   	push   ebp
c0011a0c:	57                   	push   edi
c0011a0d:	56                   	push   esi
c0011a0e:	53                   	push   ebx
c0011a0f:	83 ec 18             	sub    esp,0x18
c0011a12:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011a16:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011a19:	e8 c2 21 00 00       	call   c0013be0 <Thr::processFromPID(int)>
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	89 c1                	mov    ecx,eax
c0011a23:	b8 01 00 00 00       	mov    eax,0x1
c0011a28:	85 c9                	test   ecx,ecx
c0011a2a:	74 57                	je     c0011a83 <SysGetVGAPtr(regs*)+0x78>
c0011a2c:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011a32:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011a36:	74 0c                	je     c0011a44 <SysGetVGAPtr(regs*)+0x39>
c0011a38:	83 ec 0c             	sub    esp,0xc
c0011a3b:	55                   	push   ebp
c0011a3c:	e8 c6 69 ff ff       	call   c0008407 <setActiveTerminal(VgaText*)>
c0011a41:	83 c4 10             	add    esp,0x10
c0011a44:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011a47:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011a4a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011a4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a51:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011a54:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a57:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011a5d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a60:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011a63:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011a69:	50                   	push   eax
c0011a6a:	50                   	push   eax
c0011a6b:	68 52 e9 01 c0       	push   0xc001e952
c0011a70:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a73:	05 a8 0f 00 00       	add    eax,0xfa8
c0011a78:	50                   	push   eax
c0011a79:	e8 92 eb fe ff       	call   c0000610 <strcpy>
c0011a7e:	83 c4 10             	add    esp,0x10
c0011a81:	31 c0                	xor    eax,eax
c0011a83:	83 c4 0c             	add    esp,0xc
c0011a86:	31 d2                	xor    edx,edx
c0011a88:	5b                   	pop    ebx
c0011a89:	5e                   	pop    esi
c0011a8a:	5f                   	pop    edi
c0011a8b:	5d                   	pop    ebp
c0011a8c:	c3                   	ret    

c0011a8d <SysLoadDLL(regs*)>:
c0011a8d:	56                   	push   esi
c0011a8e:	53                   	push   ebx
c0011a8f:	31 d2                	xor    edx,edx
c0011a91:	51                   	push   ecx
c0011a92:	b8 01 00 00 00       	mov    eax,0x1
c0011a97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011a9b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011a9f:	0f 84 8c 00 00 00    	je     c0011b31 <SysLoadDLL(regs*)+0xa4>
c0011aa5:	83 ec 0c             	sub    esp,0xc
c0011aa8:	68 14 01 00 00       	push   0x114
c0011aad:	e8 17 5d ff ff       	call   c00077c9 <malloc>
c0011ab2:	83 c4 0c             	add    esp,0xc
c0011ab5:	89 c3                	mov    ebx,eax
c0011ab7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011abc:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011abf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011ac2:	53                   	push   ebx
c0011ac3:	e8 96 8f ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0011ac8:	83 c4 10             	add    esp,0x10
c0011acb:	31 d2                	xor    edx,edx
c0011acd:	b8 02 00 00 00       	mov    eax,0x2
c0011ad2:	85 db                	test   ebx,ebx
c0011ad4:	74 5b                	je     c0011b31 <SysLoadDLL(regs*)+0xa4>
c0011ad6:	83 ec 0c             	sub    esp,0xc
c0011ad9:	53                   	push   ebx
c0011ada:	e8 ad 92 ff ff       	call   c000ad8c <File::exists()>
c0011adf:	83 c4 10             	add    esp,0x10
c0011ae2:	84 c0                	test   al,al
c0011ae4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ae6:	75 11                	jne    c0011af9 <SysLoadDLL(regs*)+0x6c>
c0011ae8:	83 ec 0c             	sub    esp,0xc
c0011aeb:	53                   	push   ebx
c0011aec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011aef:	83 c4 10             	add    esp,0x10
c0011af2:	b8 03 00 00 00       	mov    eax,0x3
c0011af7:	eb 36                	jmp    c0011b2f <SysLoadDLL(regs*)+0xa2>
c0011af9:	83 ec 0c             	sub    esp,0xc
c0011afc:	53                   	push   ebx
c0011afd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b00:	58                   	pop    eax
c0011b01:	5a                   	pop    edx
c0011b02:	6a 00                	push   0x0
c0011b04:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011b07:	e8 86 12 00 00       	call   c0012d92 <Thr::loadDLL(char const*, bool)>
c0011b0c:	83 c4 10             	add    esp,0x10
c0011b0f:	89 c1                	mov    ecx,eax
c0011b11:	31 d2                	xor    edx,edx
c0011b13:	b8 04 00 00 00       	mov    eax,0x4
c0011b18:	85 c9                	test   ecx,ecx
c0011b1a:	74 15                	je     c0011b31 <SysLoadDLL(regs*)+0xa4>
c0011b1c:	53                   	push   ebx
c0011b1d:	53                   	push   ebx
c0011b1e:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0011b24:	51                   	push   ecx
c0011b25:	e8 99 14 00 00       	call   c0012fc3 <Thr::executeDLL(unsigned long, void*)>
c0011b2a:	83 c4 10             	add    esp,0x10
c0011b2d:	31 c0                	xor    eax,eax
c0011b2f:	31 d2                	xor    edx,edx
c0011b31:	59                   	pop    ecx
c0011b32:	5b                   	pop    ebx
c0011b33:	5e                   	pop    esi
c0011b34:	c3                   	ret    

c0011b35 <SysRead(regs*)>:
c0011b35:	57                   	push   edi
c0011b36:	56                   	push   esi
c0011b37:	53                   	push   ebx
c0011b38:	83 ec 10             	sub    esp,0x10
c0011b3b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b3f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b42:	83 f8 02             	cmp    eax,0x2
c0011b45:	77 10                	ja     c0011b57 <SysRead(regs*)+0x22>
c0011b47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b4c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b4f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011b55:	eb 0e                	jmp    c0011b65 <SysRead(regs*)+0x30>
c0011b57:	83 ec 0c             	sub    esp,0xc
c0011b5a:	50                   	push   eax
c0011b5b:	e8 df 75 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0011b60:	83 c4 10             	add    esp,0x10
c0011b63:	89 c1                	mov    ecx,eax
c0011b65:	83 c8 ff             	or     eax,0xffffffff
c0011b68:	85 c9                	test   ecx,ecx
c0011b6a:	89 c2                	mov    edx,eax
c0011b6c:	74 28                	je     c0011b96 <SysRead(regs*)+0x61>
c0011b6e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b76:	31 ff                	xor    edi,edi
c0011b78:	83 ec 0c             	sub    esp,0xc
c0011b7b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011b7d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011b81:	52                   	push   edx
c0011b82:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011b85:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011b88:	57                   	push   edi
c0011b89:	56                   	push   esi
c0011b8a:	51                   	push   ecx
c0011b8b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011b8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b92:	83 c4 20             	add    esp,0x20
c0011b95:	99                   	cdq    
c0011b96:	83 c4 10             	add    esp,0x10
c0011b99:	5b                   	pop    ebx
c0011b9a:	5e                   	pop    esi
c0011b9b:	5f                   	pop    edi
c0011b9c:	c3                   	ret    

c0011b9d <SysRegisterSignal(regs*)>:
c0011b9d:	83 ec 18             	sub    esp,0x18
c0011ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011ba4:	6a 00                	push   0x0
c0011ba6:	6a 00                	push   0x0
c0011ba8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011bab:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011bae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bb3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bb6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011bbc:	e8 1d e9 ff ff       	call   c00104de <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011bc1:	83 c4 2c             	add    esp,0x2c
c0011bc4:	99                   	cdq    
c0011bc5:	c3                   	ret    

c0011bc6 <SysSbrk(regs*)>:
c0011bc6:	56                   	push   esi
c0011bc7:	53                   	push   ebx
c0011bc8:	83 ec 0c             	sub    esp,0xc
c0011bcb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011bcf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011bd2:	68 5c e9 01 c0       	push   0xc001e95c
c0011bd7:	e8 0c 89 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0011bdc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011be1:	8b 5b 20             	mov    ebx,DWORD PTR [ebx+0x20]
c0011be4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011be7:	83 c4 10             	add    esp,0x10
c0011bea:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011bf0:	85 db                	test   ebx,ebx
c0011bf2:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011bf5:	74 02                	je     c0011bf9 <SysSbrk(regs*)+0x33>
c0011bf7:	79 06                	jns    c0011bff <SysSbrk(regs*)+0x39>
c0011bf9:	89 f0                	mov    eax,esi
c0011bfb:	31 d2                	xor    edx,edx
c0011bfd:	eb 2a                	jmp    c0011c29 <SysSbrk(regs*)+0x63>
c0011bff:	83 c8 ff             	or     eax,0xffffffff
c0011c02:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011c08:	89 c2                	mov    edx,eax
c0011c0a:	77 1d                	ja     c0011c29 <SysSbrk(regs*)+0x63>
c0011c0c:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011c12:	50                   	push   eax
c0011c13:	c1 ea 0c             	shr    edx,0xc
c0011c16:	68 07 0c 00 00       	push   0xc07
c0011c1b:	52                   	push   edx
c0011c1c:	51                   	push   ecx
c0011c1d:	e8 0c 7e ff ff       	call   c0009a2e <VAS::allocatePages(int, int)>
c0011c22:	89 f0                	mov    eax,esi
c0011c24:	31 d2                	xor    edx,edx
c0011c26:	83 c4 10             	add    esp,0x10
c0011c29:	59                   	pop    ecx
c0011c2a:	5b                   	pop    ebx
c0011c2b:	5e                   	pop    esi
c0011c2c:	c3                   	ret    

c0011c2d <SysSetCwd(regs*)>:
c0011c2d:	83 ec 14             	sub    esp,0x14
c0011c30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c34:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c3c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011c3f:	e8 e7 91 ff ff       	call   c000ae2b <Fs::setcwd(Process*, char*)>
c0011c44:	83 c4 1c             	add    esp,0x1c
c0011c47:	99                   	cdq    
c0011c48:	c3                   	ret    

c0011c49 <SysSetTime(regs*)>:
c0011c49:	55                   	push   ebp
c0011c4a:	31 c9                	xor    ecx,ecx
c0011c4c:	57                   	push   edi
c0011c4d:	bd 0c 00 00 00       	mov    ebp,0xc
c0011c52:	56                   	push   esi
c0011c53:	53                   	push   ebx
c0011c54:	31 db                	xor    ebx,ebx
c0011c56:	83 ec 10             	sub    esp,0x10
c0011c59:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011c5d:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011c60:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011c63:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011c66:	89 c2                	mov    edx,eax
c0011c68:	66 81 ef 6c 07       	sub    di,0x76c
c0011c6d:	83 e2 1f             	and    edx,0x1f
c0011c70:	c1 e7 10             	shl    edi,0x10
c0011c73:	42                   	inc    edx
c0011c74:	c1 e8 05             	shr    eax,0x5
c0011c77:	88 d1                	mov    cl,dl
c0011c79:	31 d2                	xor    edx,edx
c0011c7b:	f7 f5                	div    ebp
c0011c7d:	89 dd                	mov    ebp,ebx
c0011c7f:	88 d5                	mov    ch,dl
c0011c81:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011c87:	0f b7 c1             	movzx  eax,cx
c0011c8a:	31 d2                	xor    edx,edx
c0011c8c:	09 f8                	or     eax,edi
c0011c8e:	bf 3c 00 00 00       	mov    edi,0x3c
c0011c93:	89 c1                	mov    ecx,eax
c0011c95:	89 f0                	mov    eax,esi
c0011c97:	f7 f7                	div    edi
c0011c99:	c1 e2 10             	shl    edx,0x10
c0011c9c:	09 d5                	or     ebp,edx
c0011c9e:	31 d2                	xor    edx,edx
c0011ca0:	89 eb                	mov    ebx,ebp
c0011ca2:	f7 f7                	div    edi
c0011ca4:	bf 10 0e 00 00       	mov    edi,0xe10
c0011ca9:	88 d7                	mov    bh,dl
c0011cab:	89 f0                	mov    eax,esi
c0011cad:	31 d2                	xor    edx,edx
c0011caf:	f7 f7                	div    edi
c0011cb1:	bf 18 00 00 00       	mov    edi,0x18
c0011cb6:	31 d2                	xor    edx,edx
c0011cb8:	f7 f7                	div    edi
c0011cba:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0011cbf:	88 d3                	mov    bl,dl
c0011cc1:	53                   	push   ebx
c0011cc2:	51                   	push   ecx
c0011cc3:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011cc9:	e8 6e 99 ff ff       	call   c000b63c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011cce:	83 c4 1c             	add    esp,0x1c
c0011cd1:	83 f0 01             	xor    eax,0x1
c0011cd4:	5b                   	pop    ebx
c0011cd5:	0f b6 c0             	movzx  eax,al
c0011cd8:	5e                   	pop    esi
c0011cd9:	31 d2                	xor    edx,edx
c0011cdb:	5f                   	pop    edi
c0011cdc:	5d                   	pop    ebp
c0011cdd:	c3                   	ret    

c0011cde <SysTimezone(regs*)>:
c0011cde:	53                   	push   ebx
c0011cdf:	83 ec 08             	sub    esp,0x8
c0011ce2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ce6:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011cea:	75 17                	jne    c0011d03 <SysTimezone(regs*)+0x25>
c0011cec:	83 ec 0c             	sub    esp,0xc
c0011cef:	68 68 e9 01 c0       	push   0xc001e968
c0011cf4:	e8 ef 87 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0011cf9:	83 c8 ff             	or     eax,0xffffffff
c0011cfc:	83 c4 10             	add    esp,0x10
c0011cff:	89 c2                	mov    edx,eax
c0011d01:	eb 20                	jmp    c0011d23 <SysTimezone(regs*)+0x45>
c0011d03:	83 ec 0c             	sub    esp,0xc
c0011d06:	68 7d e9 01 c0       	push   0xc001e97d
c0011d0b:	e8 d8 87 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0011d10:	58                   	pop    eax
c0011d11:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011d14:	e8 7f 96 ff ff       	call   c000b398 <User::loadClockSettings(int)>
c0011d19:	83 c4 10             	add    esp,0x10
c0011d1c:	b8 01 00 00 00       	mov    eax,0x1
c0011d21:	31 d2                	xor    edx,edx
c0011d23:	83 c4 08             	add    esp,0x8
c0011d26:	5b                   	pop    ebx
c0011d27:	c3                   	ret    

c0011d28 <SysWrite(regs*)>:
c0011d28:	57                   	push   edi
c0011d29:	56                   	push   esi
c0011d2a:	53                   	push   ebx
c0011d2b:	83 ec 10             	sub    esp,0x10
c0011d2e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d32:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d35:	83 f8 02             	cmp    eax,0x2
c0011d38:	77 10                	ja     c0011d4a <SysWrite(regs*)+0x22>
c0011d3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d3f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d42:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011d48:	eb 0e                	jmp    c0011d58 <SysWrite(regs*)+0x30>
c0011d4a:	83 ec 0c             	sub    esp,0xc
c0011d4d:	50                   	push   eax
c0011d4e:	e8 ec 73 ff ff       	call   c000913f <getFromFileDescriptor(int)>
c0011d53:	83 c4 10             	add    esp,0x10
c0011d56:	89 c1                	mov    ecx,eax
c0011d58:	83 c8 ff             	or     eax,0xffffffff
c0011d5b:	85 c9                	test   ecx,ecx
c0011d5d:	89 c2                	mov    edx,eax
c0011d5f:	74 28                	je     c0011d89 <SysWrite(regs*)+0x61>
c0011d61:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d69:	31 ff                	xor    edi,edi
c0011d6b:	83 ec 0c             	sub    esp,0xc
c0011d6e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011d70:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d74:	52                   	push   edx
c0011d75:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011d78:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011d7b:	57                   	push   edi
c0011d7c:	56                   	push   esi
c0011d7d:	51                   	push   ecx
c0011d7e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d81:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d85:	83 c4 20             	add    esp,0x20
c0011d88:	99                   	cdq    
c0011d89:	83 c4 10             	add    esp,0x10
c0011d8c:	5b                   	pop    ebx
c0011d8d:	5e                   	pop    esi
c0011d8e:	5f                   	pop    edi
c0011d8f:	c3                   	ret    

c0011d90 <SysWsbe(regs*)>:
c0011d90:	57                   	push   edi
c0011d91:	b9 0b 00 00 00       	mov    ecx,0xb
c0011d96:	56                   	push   esi
c0011d97:	be bc e9 01 c0       	mov    esi,0xc001e9bc
c0011d9c:	53                   	push   ebx
c0011d9d:	83 ec 30             	sub    esp,0x30
c0011da0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011da4:	fc                   	cld    
c0011da5:	83 ec 0c             	sub    esp,0xc
c0011da8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011daa:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011dae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011db3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011db6:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011dbc:	8b 06                	mov    eax,DWORD PTR [esi]
c0011dbe:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011dc1:	57                   	push   edi
c0011dc2:	e8 89 e7 fe ff       	call   c0000550 <strlen>
c0011dc7:	5a                   	pop    edx
c0011dc8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011dcc:	52                   	push   edx
c0011dcd:	31 d2                	xor    edx,edx
c0011dcf:	57                   	push   edi
c0011dd0:	52                   	push   edx
c0011dd1:	50                   	push   eax
c0011dd2:	56                   	push   esi
c0011dd3:	ff d3                	call   ebx
c0011dd5:	83 c4 14             	add    esp,0x14
c0011dd8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011ddc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011ddf:	e8 fc 22 00 00       	call   c00140e0 <terminateTask(int)>
c0011de4:	83 c4 40             	add    esp,0x40
c0011de7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011dec:	5b                   	pop    ebx
c0011ded:	31 d2                	xor    edx,edx
c0011def:	5e                   	pop    esi
c0011df0:	5f                   	pop    edi
c0011df1:	c3                   	ret    

c0011df2 <SysYield(regs*)>:
c0011df2:	83 ec 0c             	sub    esp,0xc
c0011df5:	fa                   	cli    
c0011df6:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c0011dfc:	e8 bb 19 00 00       	call   c00137bc <schedule()>
c0011e01:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0011e06:	48                   	dec    eax
c0011e07:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0011e0c:	75 01                	jne    c0011e0f <SysYield(regs*)+0x1d>
c0011e0e:	fb                   	sti    
c0011e0f:	31 c0                	xor    eax,eax
c0011e11:	31 d2                	xor    edx,edx
c0011e13:	83 c4 0c             	add    esp,0xc
c0011e16:	c3                   	ret    

c0011e17 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011e17:	55                   	push   ebp
c0011e18:	57                   	push   edi
c0011e19:	56                   	push   esi
c0011e1a:	53                   	push   ebx
c0011e1b:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011e21:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011e29:	0f 95 c2             	setne  dl
c0011e2c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011e34:	0f 94 c0             	sete   al
c0011e37:	84 c2                	test   dl,al
c0011e39:	74 34                	je     c0011e6f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e3b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011e46:	74 27                	je     c0011e6f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011e48:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011e4f:	05 00 10 00 00       	add    eax,0x1000
c0011e54:	89 c1                	mov    ecx,eax
c0011e56:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e5b:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011e61:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011e68:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011e6f:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011e76:	83 ec 0c             	sub    esp,0xc
c0011e79:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011e7f:	6a 01                	push   0x1
c0011e81:	e8 0f 74 ff ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0011e86:	83 c4 10             	add    esp,0x10
c0011e89:	89 c3                	mov    ebx,eax
c0011e8b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011e91:	0f 86 25 01 00 00    	jbe    c0011fbc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011e97:	c1 ee 0c             	shr    esi,0xc
c0011e9a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011ea1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011ea5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011ead:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011eb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011eb8:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011ebf:	29 ef                	sub    edi,ebp
c0011ec1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011ec5:	0f 83 f8 00 00 00    	jae    c0011fc3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011ecb:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011ed1:	76 05                	jbe    c0011ed8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011ed3:	bf 00 10 00 00       	mov    edi,0x1000
c0011ed8:	83 ec 0c             	sub    esp,0xc
c0011edb:	31 d2                	xor    edx,edx
c0011edd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011ee4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011ee6:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011eea:	50                   	push   eax
c0011eeb:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011eef:	56                   	push   esi
c0011ef0:	52                   	push   edx
c0011ef1:	57                   	push   edi
c0011ef2:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011ef9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011efc:	83 c4 20             	add    esp,0x20
c0011eff:	85 c0                	test   eax,eax
c0011f01:	75 06                	jne    c0011f09 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011f03:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011f07:	74 13                	je     c0011f1c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011f09:	83 ec 0c             	sub    esp,0xc
c0011f0c:	53                   	push   ebx
c0011f0d:	e8 b3 76 ff ff       	call   c00095c5 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f12:	83 c4 10             	add    esp,0x10
c0011f15:	31 c0                	xor    eax,eax
c0011f17:	e9 7c 01 00 00       	jmp    c0012098 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011f1c:	fa                   	cli    
c0011f1d:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c0011f23:	e8 7d 5b ff ff       	call   c0007aa5 <Phys::allocatePage()>
c0011f28:	6a 07                	push   0x7
c0011f2a:	89 c7                	mov    edi,eax
c0011f2c:	53                   	push   ebx
c0011f2d:	50                   	push   eax
c0011f2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f33:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f36:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f3c:	e8 e9 79 ff ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f41:	83 c4 0c             	add    esp,0xc
c0011f44:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011f4b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f51:	6a 00                	push   0x0
c0011f53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f58:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f5b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f61:	e8 36 78 ff ff       	call   c000979c <VAS::mapOtherVASIn(bool, VAS*)>
c0011f66:	58                   	pop    eax
c0011f67:	5a                   	pop    edx
c0011f68:	68 07 0c 00 00       	push   0xc07
c0011f6d:	55                   	push   ebp
c0011f6e:	57                   	push   edi
c0011f6f:	89 df                	mov    edi,ebx
c0011f71:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011f78:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f7e:	6a 00                	push   0x0
c0011f80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f85:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f88:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011f8e:	e8 57 7d ff ff       	call   c0009cea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011f93:	b9 00 10 00 00       	mov    ecx,0x1000
c0011f98:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f9a:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0011f9f:	83 c4 20             	add    esp,0x20
c0011fa2:	48                   	dec    eax
c0011fa3:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0011fa8:	85 c0                	test   eax,eax
c0011faa:	75 01                	jne    c0011fad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011fac:	fb                   	sti    
c0011fad:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011fb3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011fb7:	e9 f1 fe ff ff       	jmp    c0011ead <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011fbc:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011fc3:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011fca:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011fd0:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011fd6:	0f 86 ae 00 00 00    	jbe    c001208a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011fdc:	fa                   	cli    
c0011fdd:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c0011fe3:	c1 ee 0c             	shr    esi,0xc
c0011fe6:	51                   	push   ecx
c0011fe7:	31 ff                	xor    edi,edi
c0011fe9:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011ff0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ff6:	6a 00                	push   0x0
c0011ff8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ffd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012000:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012006:	e8 91 77 ff ff       	call   c000979c <VAS::mapOtherVASIn(bool, VAS*)>
c001200b:	83 c4 10             	add    esp,0x10
c001200e:	e8 92 5a ff ff       	call   c0007aa5 <Phys::allocatePage()>
c0012013:	47                   	inc    edi
c0012014:	6a 07                	push   0x7
c0012016:	53                   	push   ebx
c0012017:	50                   	push   eax
c0012018:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001201c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012022:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0012025:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c001202b:	e8 fa 78 ff ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c0012030:	58                   	pop    eax
c0012031:	5a                   	pop    edx
c0012032:	68 07 0c 00 00       	push   0xc07
c0012037:	55                   	push   ebp
c0012038:	81 c5 00 10 00 00    	add    ebp,0x1000
c001203e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012042:	50                   	push   eax
c0012043:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001204a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012050:	6a 00                	push   0x0
c0012052:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012057:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001205a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012060:	e8 85 7c ff ff       	call   c0009cea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012065:	83 c4 1c             	add    esp,0x1c
c0012068:	68 00 10 00 00       	push   0x1000
c001206d:	6a 00                	push   0x0
c001206f:	53                   	push   ebx
c0012070:	e8 6b e4 fe ff       	call   c00004e0 <memset>
c0012075:	83 c4 10             	add    esp,0x10
c0012078:	39 fe                	cmp    esi,edi
c001207a:	77 92                	ja     c001200e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c001207c:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0012081:	48                   	dec    eax
c0012082:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0012087:	75 01                	jne    c001208a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012089:	fb                   	sti    
c001208a:	83 ec 0c             	sub    esp,0xc
c001208d:	53                   	push   ebx
c001208e:	e8 32 75 ff ff       	call   c00095c5 <Virt::freeKernelVirtualPages(unsigned long)>
c0012093:	83 c4 10             	add    esp,0x10
c0012096:	b0 01                	mov    al,0x1
c0012098:	81 c4 2c 10 00 00    	add    esp,0x102c
c001209e:	5b                   	pop    ebx
c001209f:	5e                   	pop    esi
c00120a0:	5f                   	pop    edi
c00120a1:	5d                   	pop    ebp
c00120a2:	c3                   	ret    

c00120a3 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00120a3:	55                   	push   ebp
c00120a4:	57                   	push   edi
c00120a5:	56                   	push   esi
c00120a6:	53                   	push   ebx
c00120a7:	83 ec 48             	sub    esp,0x48
c00120aa:	68 14 01 00 00       	push   0x114
c00120af:	e8 15 57 ff ff       	call   c00077c9 <malloc>
c00120b4:	83 c4 0c             	add    esp,0xc
c00120b7:	89 c6                	mov    esi,eax
c00120b9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00120bd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00120c1:	50                   	push   eax
c00120c2:	e8 97 89 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c00120c7:	58                   	pop    eax
c00120c8:	5a                   	pop    edx
c00120c9:	6a 01                	push   0x1
c00120cb:	56                   	push   esi
c00120cc:	e8 4d 8a ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c00120d1:	83 c4 10             	add    esp,0x10
c00120d4:	85 c0                	test   eax,eax
c00120d6:	0f 85 47 01 00 00    	jne    c0012223 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00120dc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00120e4:	83 ec 0c             	sub    esp,0xc
c00120e7:	6a 34                	push   0x34
c00120e9:	e8 db 56 ff ff       	call   c00077c9 <malloc>
c00120ee:	89 c3                	mov    ebx,eax
c00120f0:	58                   	pop    eax
c00120f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00120f3:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00120f7:	57                   	push   edi
c00120f8:	53                   	push   ebx
c00120f9:	6a 00                	push   0x0
c00120fb:	6a 34                	push   0x34
c00120fd:	56                   	push   esi
c00120fe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012101:	83 c4 20             	add    esp,0x20
c0012104:	85 c0                	test   eax,eax
c0012106:	0f 85 17 01 00 00    	jne    c0012223 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001210c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0012112:	0f 85 0b 01 00 00    	jne    c0012223 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012118:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001211b:	85 c0                	test   eax,eax
c001211d:	0f 84 00 01 00 00    	je     c0012223 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012123:	31 d2                	xor    edx,edx
c0012125:	55                   	push   ebp
c0012126:	52                   	push   edx
c0012127:	50                   	push   eax
c0012128:	56                   	push   esi
c0012129:	e8 ae 8a ff ff       	call   c000abdc <File::seek(unsigned long long)>
c001212e:	83 c4 10             	add    esp,0x10
c0012131:	85 c0                	test   eax,eax
c0012133:	0f 85 ea 00 00 00    	jne    c0012223 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012139:	83 ec 0c             	sub    esp,0xc
c001213c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001213f:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012143:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012147:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001214b:	0f af c2             	imul   eax,edx
c001214e:	50                   	push   eax
c001214f:	e8 75 56 ff ff       	call   c00077c9 <malloc>
c0012154:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012156:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001215a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001215d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012161:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012165:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012169:	0f af c2             	imul   eax,edx
c001216c:	99                   	cdq    
c001216d:	52                   	push   edx
c001216e:	50                   	push   eax
c001216f:	56                   	push   esi
c0012170:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012173:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0012176:	83 c4 20             	add    esp,0x20
c0012179:	85 c0                	test   eax,eax
c001217b:	0f 84 a2 00 00 00    	je     c0012223 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012181:	31 d2                	xor    edx,edx
c0012183:	51                   	push   ecx
c0012184:	52                   	push   edx
c0012185:	50                   	push   eax
c0012186:	56                   	push   esi
c0012187:	e8 50 8a ff ff       	call   c000abdc <File::seek(unsigned long long)>
c001218c:	83 c4 10             	add    esp,0x10
c001218f:	85 c0                	test   eax,eax
c0012191:	0f 85 8c 00 00 00    	jne    c0012223 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012197:	83 ec 0c             	sub    esp,0xc
c001219a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001219e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121a2:	31 ed                	xor    ebp,ebp
c00121a4:	0f af c2             	imul   eax,edx
c00121a7:	50                   	push   eax
c00121a8:	e8 1c 56 ff ff       	call   c00077c9 <malloc>
c00121ad:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00121af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00121b3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00121b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00121ba:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00121be:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00121c2:	0f af c2             	imul   eax,edx
c00121c5:	99                   	cdq    
c00121c6:	52                   	push   edx
c00121c7:	50                   	push   eax
c00121c8:	56                   	push   esi
c00121c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00121cc:	83 c4 20             	add    esp,0x20
c00121cf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00121d7:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00121db:	0f 86 80 00 00 00    	jbe    c0012261 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00121e1:	0f b7 fd             	movzx  edi,bp
c00121e4:	c1 e7 05             	shl    edi,0x5
c00121e7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00121eb:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00121ee:	75 6b                	jne    c001225b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00121f0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00121f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00121f7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00121fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121fe:	52                   	push   edx
c00121ff:	31 d2                	xor    edx,edx
c0012201:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012204:	52                   	push   edx
c0012205:	50                   	push   eax
c0012206:	56                   	push   esi
c0012207:	e8 d0 89 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c001220c:	83 c4 10             	add    esp,0x10
c001220f:	85 c0                	test   eax,eax
c0012211:	74 17                	je     c001222a <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0012213:	83 ec 0c             	sub    esp,0xc
c0012216:	68 e8 e9 01 c0       	push   0xc001e9e8
c001221b:	e8 c8 82 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0012220:	83 c4 10             	add    esp,0x10
c0012223:	31 c0                	xor    eax,eax
c0012225:	e9 87 00 00 00       	jmp    c00122b1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001222a:	83 ec 0c             	sub    esp,0xc
c001222d:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012230:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0012233:	50                   	push   eax
c0012234:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012238:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001223c:	56                   	push   esi
c001223d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012241:	e8 d1 fb ff ff       	call   c0011e17 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0012246:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001224a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001224e:	83 c4 20             	add    esp,0x20
c0012251:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012255:	73 04                	jae    c001225b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012257:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001225b:	45                   	inc    ebp
c001225c:	e9 76 ff ff ff       	jmp    c00121d7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012261:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0012265:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012269:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001226d:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0012273:	83 ec 0c             	sub    esp,0xc
c0012276:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c001227c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012281:	05 00 10 00 00       	add    eax,0x1000
c0012286:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012289:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001228d:	e8 47 55 ff ff       	call   c00077d9 <free>
c0012292:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012295:	e8 3f 55 ff ff       	call   c00077d9 <free>
c001229a:	58                   	pop    eax
c001229b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001229f:	e8 35 55 ff ff       	call   c00077d9 <free>
c00122a4:	89 34 24             	mov    DWORD PTR [esp],esi
c00122a7:	e8 d0 88 ff ff       	call   c000ab7c <File::close()>
c00122ac:	83 c4 10             	add    esp,0x10
c00122af:	b0 01                	mov    al,0x1
c00122b1:	83 c4 3c             	add    esp,0x3c
c00122b4:	5b                   	pop    ebx
c00122b5:	5e                   	pop    esi
c00122b6:	5f                   	pop    edi
c00122b7:	5d                   	pop    ebp
c00122b8:	c3                   	ret    

c00122b9 <Thr::runtimeReferenceHelper()>:
c00122b9:	83 ec 18             	sub    esp,0x18
c00122bc:	68 f0 e9 01 c0       	push   0xc001e9f0
c00122c1:	e8 22 82 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00122c6:	fa                   	cli    
c00122c7:	83 c4 10             	add    esp,0x10
c00122ca:	eb fe                	jmp    c00122ca <Thr::runtimeReferenceHelper()+0x11>

c00122cc <Thr::getAddressOfKernelSymbol(char const*)>:
c00122cc:	57                   	push   edi
c00122cd:	56                   	push   esi
c00122ce:	53                   	push   ebx
c00122cf:	31 db                	xor    ebx,ebx
c00122d1:	39 1d 00 3e 02 c0    	cmp    DWORD PTR ds:0xc0023e00,ebx
c00122d7:	7e 3c                	jle    c0012315 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00122d9:	8b 34 9d 80 3d 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc280]
c00122e0:	31 ff                	xor    edi,edi
c00122e2:	39 3c 9d 80 3c 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc380],edi
c00122e9:	7e 27                	jle    c0012312 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00122eb:	50                   	push   eax
c00122ec:	50                   	push   eax
c00122ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00122f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00122f3:	03 04 9d 00 3d 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc300]
c00122fa:	50                   	push   eax
c00122fb:	e8 f0 e3 fe ff       	call   c00006f0 <strcmp>
c0012300:	83 c4 10             	add    esp,0x10
c0012303:	85 c0                	test   eax,eax
c0012305:	75 05                	jne    c001230c <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0012307:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001230a:	eb 0b                	jmp    c0012317 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001230c:	83 c6 10             	add    esi,0x10
c001230f:	47                   	inc    edi
c0012310:	eb d0                	jmp    c00122e2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0012312:	43                   	inc    ebx
c0012313:	eb bc                	jmp    c00122d1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0012315:	31 c0                	xor    eax,eax
c0012317:	5b                   	pop    ebx
c0012318:	5e                   	pop    esi
c0012319:	5f                   	pop    edi
c001231a:	c3                   	ret    

c001231b <Thr::loadKernelSymbolTable(char const*)>:
c001231b:	55                   	push   ebp
c001231c:	57                   	push   edi
c001231d:	56                   	push   esi
c001231e:	53                   	push   ebx
c001231f:	83 ec 68             	sub    esp,0x68
c0012322:	8b 35 50 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023e50
c0012328:	68 14 01 00 00       	push   0x114
c001232d:	e8 97 54 ff ff       	call   c00077c9 <malloc>
c0012332:	83 c4 0c             	add    esp,0xc
c0012335:	89 c3                	mov    ebx,eax
c0012337:	56                   	push   esi
c0012338:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001233c:	50                   	push   eax
c001233d:	e8 1c 87 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0012342:	5e                   	pop    esi
c0012343:	5f                   	pop    edi
c0012344:	6a 01                	push   0x1
c0012346:	53                   	push   ebx
c0012347:	e8 d2 87 ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c001234c:	83 c4 10             	add    esp,0x10
c001234f:	85 c0                	test   eax,eax
c0012351:	74 0a                	je     c001235d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0012353:	83 ec 0c             	sub    esp,0xc
c0012356:	68 12 ea 01 c0       	push   0xc001ea12
c001235b:	eb 34                	jmp    c0012391 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001235d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0012365:	83 ec 0c             	sub    esp,0xc
c0012368:	6a 34                	push   0x34
c001236a:	e8 5a 54 ff ff       	call   c00077c9 <malloc>
c001236f:	59                   	pop    ecx
c0012370:	89 c7                	mov    edi,eax
c0012372:	8d 74 24 34          	lea    esi,[esp+0x34]
c0012376:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012378:	56                   	push   esi
c0012379:	57                   	push   edi
c001237a:	6a 00                	push   0x0
c001237c:	6a 34                	push   0x34
c001237e:	53                   	push   ebx
c001237f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012382:	83 c4 20             	add    esp,0x20
c0012385:	85 c0                	test   eax,eax
c0012387:	74 17                	je     c00123a0 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012389:	83 ec 0c             	sub    esp,0xc
c001238c:	68 29 ea 01 c0       	push   0xc001ea29
c0012391:	e8 d5 dd ff ff       	call   c001016b <KePanic(char const*)>
c0012396:	83 c4 10             	add    esp,0x10
c0012399:	31 c0                	xor    eax,eax
c001239b:	e9 31 02 00 00       	jmp    c00125d1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00123a0:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00123a6:	75 e1                	jne    c0012389 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123a8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00123ab:	85 c0                	test   eax,eax
c00123ad:	74 da                	je     c0012389 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123af:	52                   	push   edx
c00123b0:	31 d2                	xor    edx,edx
c00123b2:	52                   	push   edx
c00123b3:	50                   	push   eax
c00123b4:	53                   	push   ebx
c00123b5:	e8 22 88 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c00123ba:	83 c4 10             	add    esp,0x10
c00123bd:	85 c0                	test   eax,eax
c00123bf:	75 c8                	jne    c0012389 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00123c1:	83 ec 0c             	sub    esp,0xc
c00123c4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123c8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123cc:	31 ed                	xor    ebp,ebp
c00123ce:	0f af c2             	imul   eax,edx
c00123d1:	50                   	push   eax
c00123d2:	e8 f2 53 ff ff       	call   c00077c9 <malloc>
c00123d7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123dd:	89 34 24             	mov    DWORD PTR [esp],esi
c00123e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123e4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00123e8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00123ec:	0f af c2             	imul   eax,edx
c00123ef:	99                   	cdq    
c00123f0:	52                   	push   edx
c00123f1:	50                   	push   eax
c00123f2:	53                   	push   ebx
c00123f3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00123f6:	83 c4 20             	add    esp,0x20
c00123f9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012401:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012409:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012411:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012419:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001241d:	0f 86 aa 00 00 00    	jbe    c00124cd <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0012423:	0f b7 f5             	movzx  esi,bp
c0012426:	6b f6 28             	imul   esi,esi,0x28
c0012429:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001242d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012430:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012434:	50                   	push   eax
c0012435:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012439:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001243d:	8b 16                	mov    edx,DWORD PTR [esi]
c001243f:	6b c0 28             	imul   eax,eax,0x28
c0012442:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0012446:	89 d0                	mov    eax,edx
c0012448:	31 d2                	xor    edx,edx
c001244a:	52                   	push   edx
c001244b:	50                   	push   eax
c001244c:	53                   	push   ebx
c001244d:	e8 8a 87 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c0012452:	83 c4 0c             	add    esp,0xc
c0012455:	6a 20                	push   0x20
c0012457:	6a 00                	push   0x0
c0012459:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001245d:	52                   	push   edx
c001245e:	e8 7d e0 fe ff       	call   c00004e0 <memset>
c0012463:	58                   	pop    eax
c0012464:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012466:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001246a:	51                   	push   ecx
c001246b:	8d 54 24 40          	lea    edx,[esp+0x40]
c001246f:	52                   	push   edx
c0012470:	6a 00                	push   0x0
c0012472:	6a 1f                	push   0x1f
c0012474:	53                   	push   ebx
c0012475:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012478:	83 c4 18             	add    esp,0x18
c001247b:	68 40 ea 01 c0       	push   0xc001ea40
c0012480:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012484:	52                   	push   edx
c0012485:	e8 66 e2 fe ff       	call   c00006f0 <strcmp>
c001248a:	83 c4 10             	add    esp,0x10
c001248d:	85 c0                	test   eax,eax
c001248f:	75 0f                	jne    c00124a0 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012491:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012494:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012498:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001249c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124a0:	50                   	push   eax
c00124a1:	50                   	push   eax
c00124a2:	68 48 ea 01 c0       	push   0xc001ea48
c00124a7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00124ab:	50                   	push   eax
c00124ac:	e8 3f e2 fe ff       	call   c00006f0 <strcmp>
c00124b1:	83 c4 10             	add    esp,0x10
c00124b4:	85 c0                	test   eax,eax
c00124b6:	75 0f                	jne    c00124c7 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00124b8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00124c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00124c7:	45                   	inc    ebp
c00124c8:	e9 4c ff ff ff       	jmp    c0012419 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00124cd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00124d2:	75 10                	jne    c00124e4 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00124d4:	83 ec 0c             	sub    esp,0xc
c00124d7:	68 50 ea 01 c0       	push   0xc001ea50
c00124dc:	e8 8a dc ff ff       	call   c001016b <KePanic(char const*)>
c00124e1:	83 c4 10             	add    esp,0x10
c00124e4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00124e9:	75 10                	jne    c00124fb <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00124eb:	83 ec 0c             	sub    esp,0xc
c00124ee:	68 50 ea 01 c0       	push   0xc001ea50
c00124f3:	e8 73 dc ff ff       	call   c001016b <KePanic(char const*)>
c00124f8:	83 c4 10             	add    esp,0x10
c00124fb:	31 d2                	xor    edx,edx
c00124fd:	50                   	push   eax
c00124fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012502:	52                   	push   edx
c0012503:	50                   	push   eax
c0012504:	53                   	push   ebx
c0012505:	e8 d2 86 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c001250a:	5a                   	pop    edx
c001250b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001250f:	e8 b5 52 ff ff       	call   c00077c9 <malloc>
c0012514:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012518:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001251c:	31 c9                	xor    ecx,ecx
c001251e:	5e                   	pop    esi
c001251f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012521:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0012525:	55                   	push   ebp
c0012526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001252a:	51                   	push   ecx
c001252b:	52                   	push   edx
c001252c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012530:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0012534:	53                   	push   ebx
c0012535:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012538:	83 c4 14             	add    esp,0x14
c001253b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001253f:	e8 85 52 ff ff       	call   c00077c9 <malloc>
c0012544:	89 c6                	mov    esi,eax
c0012546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012548:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001254b:	56                   	push   esi
c001254c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012550:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012554:	51                   	push   ecx
c0012555:	52                   	push   edx
c0012556:	53                   	push   ebx
c0012557:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001255a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001255e:	8b 15 00 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e00
c0012564:	83 c4 1c             	add    esp,0x1c
c0012567:	c1 e8 04             	shr    eax,0x4
c001256a:	89 04 95 80 3c 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc380],eax
c0012571:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012575:	31 d2                	xor    edx,edx
c0012577:	52                   	push   edx
c0012578:	50                   	push   eax
c0012579:	53                   	push   ebx
c001257a:	e8 5d 86 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c001257f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012581:	31 d2                	xor    edx,edx
c0012583:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012586:	56                   	push   esi
c0012587:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001258b:	52                   	push   edx
c001258c:	50                   	push   eax
c001258d:	53                   	push   ebx
c001258e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012591:	83 c4 14             	add    esp,0x14
c0012594:	53                   	push   ebx
c0012595:	e8 e2 85 ff ff       	call   c000ab7c <File::close()>
c001259a:	5d                   	pop    ebp
c001259b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001259f:	e8 35 52 ff ff       	call   c00077d9 <free>
c00125a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00125a7:	e8 2d 52 ff ff       	call   c00077d9 <free>
c00125ac:	a1 00 3e 02 c0       	mov    eax,ds:0xc0023e00
c00125b1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00125b5:	8d 50 01             	lea    edx,[eax+0x1]
c00125b8:	89 0c 85 80 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc280],ecx
c00125bf:	89 34 85 00 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc300],esi
c00125c6:	89 15 00 3e 02 c0    	mov    DWORD PTR ds:0xc0023e00,edx
c00125cc:	83 c4 10             	add    esp,0x10
c00125cf:	b0 01                	mov    al,0x1
c00125d1:	83 c4 5c             	add    esp,0x5c
c00125d4:	5b                   	pop    ebx
c00125d5:	5e                   	pop    esi
c00125d6:	5f                   	pop    edi
c00125d7:	5d                   	pop    ebp
c00125d8:	c3                   	ret    

c00125d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00125d9:	55                   	push   ebp
c00125da:	57                   	push   edi
c00125db:	56                   	push   esi
c00125dc:	53                   	push   ebx
c00125dd:	81 ec 68 03 00 00    	sub    esp,0x368
c00125e3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00125ea:	8b 1d 50 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023e50
c00125f0:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00125f4:	68 14 01 00 00       	push   0x114
c00125f9:	e8 cb 51 ff ff       	call   c00077c9 <malloc>
c00125fe:	83 c4 0c             	add    esp,0xc
c0012601:	89 c5                	mov    ebp,eax
c0012603:	53                   	push   ebx
c0012604:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001260b:	50                   	push   eax
c001260c:	e8 4d 84 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0012611:	5e                   	pop    esi
c0012612:	5f                   	pop    edi
c0012613:	6a 01                	push   0x1
c0012615:	55                   	push   ebp
c0012616:	e8 03 85 ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c001261b:	83 c4 10             	add    esp,0x10
c001261e:	85 c0                	test   eax,eax
c0012620:	0f 85 a7 06 00 00    	jne    c0012ccd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012626:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001262e:	83 ec 0c             	sub    esp,0xc
c0012631:	6a 34                	push   0x34
c0012633:	e8 91 51 ff ff       	call   c00077c9 <malloc>
c0012638:	5b                   	pop    ebx
c0012639:	89 c7                	mov    edi,eax
c001263b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001263f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012642:	53                   	push   ebx
c0012643:	57                   	push   edi
c0012644:	6a 00                	push   0x0
c0012646:	6a 34                	push   0x34
c0012648:	55                   	push   ebp
c0012649:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001264c:	83 c4 20             	add    esp,0x20
c001264f:	85 c0                	test   eax,eax
c0012651:	0f 85 76 06 00 00    	jne    c0012ccd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012657:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001265d:	0f 85 6a 06 00 00    	jne    c0012ccd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012663:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012666:	85 c0                	test   eax,eax
c0012668:	0f 84 5f 06 00 00    	je     c0012ccd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001266e:	31 d2                	xor    edx,edx
c0012670:	51                   	push   ecx
c0012671:	52                   	push   edx
c0012672:	50                   	push   eax
c0012673:	55                   	push   ebp
c0012674:	e8 63 85 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c0012679:	83 c4 10             	add    esp,0x10
c001267c:	85 c0                	test   eax,eax
c001267e:	0f 85 49 06 00 00    	jne    c0012ccd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012684:	83 ec 0c             	sub    esp,0xc
c0012687:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001268a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001268e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012692:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012696:	0f af c2             	imul   eax,edx
c0012699:	50                   	push   eax
c001269a:	e8 2a 51 ff ff       	call   c00077c9 <malloc>
c001269f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126a9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00126ad:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00126b1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00126b5:	0f af c2             	imul   eax,edx
c00126b8:	99                   	cdq    
c00126b9:	52                   	push   edx
c00126ba:	50                   	push   eax
c00126bb:	55                   	push   ebp
c00126bc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00126bf:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00126c2:	83 c4 20             	add    esp,0x20
c00126c5:	85 c0                	test   eax,eax
c00126c7:	0f 84 00 06 00 00    	je     c0012ccd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126cd:	52                   	push   edx
c00126ce:	31 d2                	xor    edx,edx
c00126d0:	52                   	push   edx
c00126d1:	50                   	push   eax
c00126d2:	55                   	push   ebp
c00126d3:	e8 04 85 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c00126d8:	83 c4 10             	add    esp,0x10
c00126db:	85 c0                	test   eax,eax
c00126dd:	0f 85 ea 05 00 00    	jne    c0012ccd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126e3:	83 ec 0c             	sub    esp,0xc
c00126e6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00126ea:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00126ee:	31 f6                	xor    esi,esi
c00126f0:	0f af c2             	imul   eax,edx
c00126f3:	50                   	push   eax
c00126f4:	e8 d0 50 ff ff       	call   c00077c9 <malloc>
c00126f9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00126fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012700:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012703:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012707:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001270b:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001270f:	0f af c2             	imul   eax,edx
c0012712:	99                   	cdq    
c0012713:	52                   	push   edx
c0012714:	50                   	push   eax
c0012715:	55                   	push   ebp
c0012716:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012719:	83 c4 20             	add    esp,0x20
c001271c:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012720:	0f 86 8a 00 00 00    	jbe    c00127b0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0012726:	0f b7 de             	movzx  ebx,si
c0012729:	c1 e3 05             	shl    ebx,0x5
c001272c:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012730:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0012733:	75 75                	jne    c00127aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0012735:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012738:	31 d2                	xor    edx,edx
c001273a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001273e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012741:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012745:	50                   	push   eax
c0012746:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012749:	52                   	push   edx
c001274a:	50                   	push   eax
c001274b:	55                   	push   ebp
c001274c:	e8 8b 84 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c0012751:	83 c4 10             	add    esp,0x10
c0012754:	85 c0                	test   eax,eax
c0012756:	0f 85 71 05 00 00    	jne    c0012ccd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001275c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012763:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012766:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001276a:	31 d2                	xor    edx,edx
c001276c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012770:	83 ec 0c             	sub    esp,0xc
c0012773:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012777:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001277e:	50                   	push   eax
c001277f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012783:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012787:	52                   	push   edx
c0012788:	50                   	push   eax
c0012789:	55                   	push   ebp
c001278a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001278d:	83 c4 1c             	add    esp,0x1c
c0012790:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012793:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012796:	50                   	push   eax
c0012797:	6a 00                	push   0x0
c0012799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001279d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00127a1:	50                   	push   eax
c00127a2:	e8 39 dd fe ff       	call   c00004e0 <memset>
c00127a7:	83 c4 10             	add    esp,0x10
c00127aa:	46                   	inc    esi
c00127ab:	e9 6c ff ff ff       	jmp    c001271c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00127b0:	53                   	push   ebx
c00127b1:	31 db                	xor    ebx,ebx
c00127b3:	68 00 01 00 00       	push   0x100
c00127b8:	6a 00                	push   0x0
c00127ba:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00127be:	50                   	push   eax
c00127bf:	e8 1c dd fe ff       	call   c00004e0 <memset>
c00127c4:	83 c4 0c             	add    esp,0xc
c00127c7:	68 00 01 00 00       	push   0x100
c00127cc:	6a 00                	push   0x0
c00127ce:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00127d5:	50                   	push   eax
c00127d6:	e8 05 dd fe ff       	call   c00004e0 <memset>
c00127db:	83 c4 10             	add    esp,0x10
c00127de:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00127e6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00127ee:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00127f6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00127fe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012806:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001280a:	0f 86 30 01 00 00    	jbe    c0012940 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012810:	0f b7 f3             	movzx  esi,bx
c0012813:	6b f6 28             	imul   esi,esi,0x28
c0012816:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001281a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001281d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012821:	52                   	push   edx
c0012822:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012826:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001282a:	8b 06                	mov    eax,DWORD PTR [esi]
c001282c:	6b d2 28             	imul   edx,edx,0x28
c001282f:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0012833:	31 d2                	xor    edx,edx
c0012835:	52                   	push   edx
c0012836:	50                   	push   eax
c0012837:	55                   	push   ebp
c0012838:	e8 9f 83 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c001283d:	83 c4 0c             	add    esp,0xc
c0012840:	6a 20                	push   0x20
c0012842:	6a 00                	push   0x0
c0012844:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001284b:	51                   	push   ecx
c001284c:	e8 8f dc fe ff       	call   c00004e0 <memset>
c0012851:	59                   	pop    ecx
c0012852:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012855:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012859:	52                   	push   edx
c001285a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012861:	51                   	push   ecx
c0012862:	6a 00                	push   0x0
c0012864:	6a 1f                	push   0x1f
c0012866:	55                   	push   ebp
c0012867:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001286a:	83 c4 1c             	add    esp,0x1c
c001286d:	6a 09                	push   0x9
c001286f:	68 6a ea 01 c0       	push   0xc001ea6a
c0012874:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001287b:	51                   	push   ecx
c001287c:	e8 1f db fe ff       	call   c00003a0 <memcmp>
c0012881:	83 c4 10             	add    esp,0x10
c0012884:	85 c0                	test   eax,eax
c0012886:	75 21                	jne    c00128a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001288c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012890:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012894:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012898:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001289b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128a2:	89 d0                	mov    eax,edx
c00128a4:	40                   	inc    eax
c00128a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128a9:	50                   	push   eax
c00128aa:	6a 09                	push   0x9
c00128ac:	68 74 ea 01 c0       	push   0xc001ea74
c00128b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128b8:	50                   	push   eax
c00128b9:	e8 e2 da fe ff       	call   c00003a0 <memcmp>
c00128be:	83 c4 10             	add    esp,0x10
c00128c1:	85 c0                	test   eax,eax
c00128c3:	75 21                	jne    c00128e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00128c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00128cd:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00128d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128d5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00128d8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00128df:	89 d0                	mov    eax,edx
c00128e1:	40                   	inc    eax
c00128e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128e6:	50                   	push   eax
c00128e7:	50                   	push   eax
c00128e8:	68 40 ea 01 c0       	push   0xc001ea40
c00128ed:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00128f4:	50                   	push   eax
c00128f5:	e8 f6 dd fe ff       	call   c00006f0 <strcmp>
c00128fa:	83 c4 10             	add    esp,0x10
c00128fd:	85 c0                	test   eax,eax
c00128ff:	75 0f                	jne    c0012910 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012901:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012904:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012908:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001290c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012910:	50                   	push   eax
c0012911:	50                   	push   eax
c0012912:	68 48 ea 01 c0       	push   0xc001ea48
c0012917:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001291e:	50                   	push   eax
c001291f:	e8 cc dd fe ff       	call   c00006f0 <strcmp>
c0012924:	83 c4 10             	add    esp,0x10
c0012927:	85 c0                	test   eax,eax
c0012929:	75 0f                	jne    c001293a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001292b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001292e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012936:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001293a:	43                   	inc    ebx
c001293b:	e9 c6 fe ff ff       	jmp    c0012806 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012940:	31 d2                	xor    edx,edx
c0012942:	50                   	push   eax
c0012943:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012947:	52                   	push   edx
c0012948:	50                   	push   eax
c0012949:	55                   	push   ebp
c001294a:	e8 8d 82 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c001294f:	58                   	pop    eax
c0012950:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012954:	e8 70 4e ff ff       	call   c00077c9 <malloc>
c0012959:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001295c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012960:	31 d2                	xor    edx,edx
c0012962:	58                   	pop    eax
c0012963:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012967:	53                   	push   ebx
c0012968:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001296c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012970:	52                   	push   edx
c0012971:	50                   	push   eax
c0012972:	55                   	push   ebp
c0012973:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012976:	83 c4 14             	add    esp,0x14
c0012979:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001297d:	e8 47 4e ff ff       	call   c00077c9 <malloc>
c0012982:	31 d2                	xor    edx,edx
c0012984:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012988:	83 c4 0c             	add    esp,0xc
c001298b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001298f:	52                   	push   edx
c0012990:	50                   	push   eax
c0012991:	55                   	push   ebp
c0012992:	e8 45 82 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c0012997:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001299a:	31 d2                	xor    edx,edx
c001299c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001299f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00129a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00129a7:	52                   	push   edx
c00129a8:	50                   	push   eax
c00129a9:	55                   	push   ebp
c00129aa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00129ad:	83 c4 20             	add    esp,0x20
c00129b0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00129b8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00129bc:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00129c0:	0f 84 0b 03 00 00    	je     c0012cd1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00129c6:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00129cd:	31 d2                	xor    edx,edx
c00129cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129d3:	c1 e8 03             	shr    eax,0x3
c00129d6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00129da:	51                   	push   ecx
c00129db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00129df:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00129e3:	52                   	push   edx
c00129e4:	50                   	push   eax
c00129e5:	55                   	push   ebp
c00129e6:	e8 f1 81 ff ff       	call   c000abdc <File::seek(unsigned long long)>
c00129eb:	5b                   	pop    ebx
c00129ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00129f0:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00129f7:	e8 cd 4d ff ff       	call   c00077c9 <malloc>
c00129fc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00129ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a03:	31 d2                	xor    edx,edx
c0012a05:	5e                   	pop    esi
c0012a06:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012a0a:	50                   	push   eax
c0012a0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a0f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a13:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012a1a:	52                   	push   edx
c0012a1b:	50                   	push   eax
c0012a1c:	55                   	push   ebp
c0012a1d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a20:	83 c4 20             	add    esp,0x20
c0012a23:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012a2b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012a2f:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012a33:	0f 8d 7c 02 00 00    	jge    c0012cb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012a39:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012a3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a41:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012a46:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012a49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012a4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012a51:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012a55:	89 d8                	mov    eax,ebx
c0012a57:	c1 e8 08             	shr    eax,0x8
c0012a5a:	89 c6                	mov    esi,eax
c0012a5c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012a60:	c1 e6 04             	shl    esi,0x4
c0012a63:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012a67:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012a6a:	85 d2                	test   edx,edx
c0012a6c:	0f 85 bf 00 00 00    	jne    c0012b31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a72:	83 ec 0c             	sub    esp,0xc
c0012a75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a79:	03 06                	add    eax,DWORD PTR [esi]
c0012a7b:	50                   	push   eax
c0012a7c:	e8 4b f8 ff ff       	call   c00122cc <Thr::getAddressOfKernelSymbol(char const*)>
c0012a81:	83 c4 10             	add    esp,0x10
c0012a84:	89 c2                	mov    edx,eax
c0012a86:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012a8b:	85 c0                	test   eax,eax
c0012a8d:	0f 85 9e 00 00 00    	jne    c0012b31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012a93:	83 ec 0c             	sub    esp,0xc
c0012a96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012a9a:	03 06                	add    eax,DWORD PTR [esi]
c0012a9c:	50                   	push   eax
c0012a9d:	e8 1a d8 ff ff       	call   c00102bc <KeResolveCompatibilitySymbol(char*)>
c0012aa2:	83 c4 10             	add    esp,0x10
c0012aa5:	89 c2                	mov    edx,eax
c0012aa7:	85 c0                	test   eax,eax
c0012aa9:	0f 85 82 00 00 00    	jne    c0012b31 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012aaf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012ab3:	50                   	push   eax
c0012ab4:	50                   	push   eax
c0012ab5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ab9:	03 06                	add    eax,DWORD PTR [esi]
c0012abb:	50                   	push   eax
c0012abc:	68 7e ea 01 c0       	push   0xc001ea7e
c0012ac1:	e8 22 7a ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0012ac6:	58                   	pop    eax
c0012ac7:	5a                   	pop    edx
c0012ac8:	68 98 ea 01 c0       	push   0xc001ea98
c0012acd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012ad4:	50                   	push   eax
c0012ad5:	e8 36 db fe ff       	call   c0000610 <strcpy>
c0012ada:	59                   	pop    ecx
c0012adb:	58                   	pop    eax
c0012adc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ae0:	03 06                	add    eax,DWORD PTR [esi]
c0012ae2:	50                   	push   eax
c0012ae3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012aea:	50                   	push   eax
c0012aeb:	e8 e0 dc fe ff       	call   c00007d0 <strcat>
c0012af0:	58                   	pop    eax
c0012af1:	5a                   	pop    edx
c0012af2:	68 2e eb 01 c0       	push   0xc001eb2e
c0012af7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012afe:	50                   	push   eax
c0012aff:	e8 cc dc fe ff       	call   c00007d0 <strcat>
c0012b04:	83 c4 10             	add    esp,0x10
c0012b07:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b0c:	0f 84 5d 01 00 00    	je     c0012c6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b12:	83 ec 0c             	sub    esp,0xc
c0012b15:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b1c:	50                   	push   eax
c0012b1d:	e8 49 d6 ff ff       	call   c001016b <KePanic(char const*)>
c0012b22:	83 c4 10             	add    esp,0x10
c0012b25:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012b29:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012b2d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012b31:	80 fb 01             	cmp    bl,0x1
c0012b34:	0f 85 88 00 00 00    	jne    c0012bc2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012b3a:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012b41:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012b45:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012b49:	01 ce                	add    esi,ecx
c0012b4b:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012b51:	0f 94 c0             	sete   al
c0012b54:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012b5a:	0f 94 c3             	sete   bl
c0012b5d:	09 c3                	or     ebx,eax
c0012b5f:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b61:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012b66:	74 41                	je     c0012ba9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012b68:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012b6b:	84 db                	test   bl,bl
c0012b6d:	75 15                	jne    c0012b84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012b6f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012b73:	66 83 f8 0c          	cmp    ax,0xc
c0012b77:	76 05                	jbe    c0012b7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012b79:	b8 0c 00 00 00       	mov    eax,0xc
c0012b7e:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012b82:	76 37                	jbe    c0012bbb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012b84:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012b88:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012b8d:	0f 84 dc 00 00 00    	je     c0012c6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012b93:	83 ec 0c             	sub    esp,0xc
c0012b96:	68 af ea 01 c0       	push   0xc001eaaf
c0012b9b:	e8 cb d5 ff ff       	call   c001016b <KePanic(char const*)>
c0012ba0:	83 c4 10             	add    esp,0x10
c0012ba3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012ba7:	eb 12                	jmp    c0012bbb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012ba9:	01 c1                	add    ecx,eax
c0012bab:	84 db                	test   bl,bl
c0012bad:	75 0c                	jne    c0012bbb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012baf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bb3:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012bb7:	77 02                	ja     c0012bbb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012bb9:	01 d1                	add    ecx,edx
c0012bbb:	89 0e                	mov    DWORD PTR [esi],ecx
c0012bbd:	e9 ea 00 00 00       	jmp    c0012cac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012bc2:	80 fb 02             	cmp    bl,0x2
c0012bc5:	75 7c                	jne    c0012c43 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012bc7:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012bce:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012bd2:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012bd6:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012bdc:	74 20                	je     c0012bfe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012bde:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012be4:	74 18                	je     c0012bfe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012be6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012bea:	b9 0a 00 00 00       	mov    ecx,0xa
c0012bef:	66 83 f8 0e          	cmp    ax,0xe
c0012bf3:	77 03                	ja     c0012bf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012bf5:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012bf8:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012bfc:	76 1f                	jbe    c0012c1d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012bfe:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012c02:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c07:	74 66                	je     c0012c6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c09:	83 ec 0c             	sub    esp,0xc
c0012c0c:	68 cb ea 01 c0       	push   0xc001eacb
c0012c11:	e8 55 d5 ff ff       	call   c001016b <KePanic(char const*)>
c0012c16:	83 c4 10             	add    esp,0x10
c0012c19:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012c1d:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c1f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c24:	74 13                	je     c0012c39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012c26:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012c2a:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012c31:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012c35:	01 c8                	add    eax,ecx
c0012c37:	eb 04                	jmp    c0012c3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012c39:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012c3d:	01 c2                	add    edx,eax
c0012c3f:	89 16                	mov    DWORD PTR [esi],edx
c0012c41:	eb 69                	jmp    c0012cac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c43:	0f b6 db             	movzx  ebx,bl
c0012c46:	50                   	push   eax
c0012c47:	50                   	push   eax
c0012c48:	53                   	push   ebx
c0012c49:	68 e7 ea 01 c0       	push   0xc001eae7
c0012c4e:	e8 95 78 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0012c53:	83 c4 10             	add    esp,0x10
c0012c56:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c5b:	74 12                	je     c0012c6f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c5d:	83 ec 0c             	sub    esp,0xc
c0012c60:	68 f2 ea 01 c0       	push   0xc001eaf2
c0012c65:	e8 01 d5 ff ff       	call   c001016b <KePanic(char const*)>
c0012c6a:	83 c4 10             	add    esp,0x10
c0012c6d:	eb 3d                	jmp    c0012cac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c6f:	83 ec 0c             	sub    esp,0xc
c0012c72:	55                   	push   ebp
c0012c73:	e8 04 7f ff ff       	call   c000ab7c <File::close()>
c0012c78:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012c7b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c7e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c81:	59                   	pop    ecx
c0012c82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c86:	e8 4e 4b ff ff       	call   c00077d9 <free>
c0012c8b:	5b                   	pop    ebx
c0012c8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c90:	e8 44 4b ff ff       	call   c00077d9 <free>
c0012c95:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012c98:	e8 3c 4b ff ff       	call   c00077d9 <free>
c0012c9d:	5e                   	pop    esi
c0012c9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ca2:	e8 32 4b ff ff       	call   c00077d9 <free>
c0012ca7:	83 c4 10             	add    esp,0x10
c0012caa:	eb 21                	jmp    c0012ccd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012cac:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012cb0:	e9 76 fd ff ff       	jmp    c0012a2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012cb5:	83 ec 0c             	sub    esp,0xc
c0012cb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012cbc:	e8 18 4b ff ff       	call   c00077d9 <free>
c0012cc1:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012cc5:	83 c4 10             	add    esp,0x10
c0012cc8:	e9 eb fc ff ff       	jmp    c00129b8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012ccd:	31 c0                	xor    eax,eax
c0012ccf:	eb 33                	jmp    c0012d04 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012cd1:	83 ec 0c             	sub    esp,0xc
c0012cd4:	55                   	push   ebp
c0012cd5:	e8 a2 7e ff ff       	call   c000ab7c <File::close()>
c0012cda:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012cdd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ce0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ce3:	58                   	pop    eax
c0012ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ce8:	e8 ec 4a ff ff       	call   c00077d9 <free>
c0012ced:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012cf0:	e8 e4 4a ff ff       	call   c00077d9 <free>
c0012cf5:	5a                   	pop    edx
c0012cf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012cfa:	e8 da 4a ff ff       	call   c00077d9 <free>
c0012cff:	83 c4 10             	add    esp,0x10
c0012d02:	b0 01                	mov    al,0x1
c0012d04:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012d0a:	5b                   	pop    ebx
c0012d0b:	5e                   	pop    esi
c0012d0c:	5f                   	pop    edi
c0012d0d:	5d                   	pop    ebp
c0012d0e:	c3                   	ret    

c0012d0f <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012d0f:	56                   	push   esi
c0012d10:	31 d2                	xor    edx,edx
c0012d12:	53                   	push   ebx
c0012d13:	8b 1d 60 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023660
c0012d19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012d1d:	39 d3                	cmp    ebx,edx
c0012d1f:	7e 1b                	jle    c0012d3c <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012d21:	8b 04 95 80 38 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc780]
c0012d28:	39 c8                	cmp    eax,ecx
c0012d2a:	77 0d                	ja     c0012d39 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012d2c:	8b 34 95 80 36 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc980]
c0012d33:	01 c6                	add    esi,eax
c0012d35:	39 ce                	cmp    esi,ecx
c0012d37:	77 05                	ja     c0012d3e <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012d39:	42                   	inc    edx
c0012d3a:	eb e1                	jmp    c0012d1d <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012d3c:	31 c0                	xor    eax,eax
c0012d3e:	5b                   	pop    ebx
c0012d3f:	5e                   	pop    esi
c0012d40:	c3                   	ret    

c0012d41 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012d41:	53                   	push   ebx
c0012d42:	31 c0                	xor    eax,eax
c0012d44:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d48:	8b 1d 60 36 02 c0    	mov    ebx,DWORD PTR ds:0xc0023660
c0012d4e:	39 c3                	cmp    ebx,eax
c0012d50:	7e 22                	jle    c0012d74 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012d52:	8b 14 85 80 38 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc780]
c0012d59:	39 ca                	cmp    edx,ecx
c0012d5b:	77 14                	ja     c0012d71 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d5d:	03 14 85 80 36 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc980]
c0012d64:	39 ca                	cmp    edx,ecx
c0012d66:	76 09                	jbe    c0012d71 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012d68:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c0012d6f:	eb 05                	jmp    c0012d76 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012d71:	40                   	inc    eax
c0012d72:	eb da                	jmp    c0012d4e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012d74:	31 c0                	xor    eax,eax
c0012d76:	5b                   	pop    ebx
c0012d77:	c3                   	ret    

c0012d78 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012d78:	53                   	push   ebx
c0012d79:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012d7d:	53                   	push   ebx
c0012d7e:	e8 8c ff ff ff       	call   c0012d0f <Thr::getDriverBaseFromAddress(unsigned long)>
c0012d83:	5a                   	pop    edx
c0012d84:	31 d2                	xor    edx,edx
c0012d86:	85 c0                	test   eax,eax
c0012d88:	74 04                	je     c0012d8e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012d8a:	89 da                	mov    edx,ebx
c0012d8c:	29 c2                	sub    edx,eax
c0012d8e:	89 d0                	mov    eax,edx
c0012d90:	5b                   	pop    ebx
c0012d91:	c3                   	ret    

c0012d92 <Thr::loadDLL(char const*, bool)>:
c0012d92:	55                   	push   ebp
c0012d93:	57                   	push   edi
c0012d94:	56                   	push   esi
c0012d95:	53                   	push   ebx
c0012d96:	81 ec 34 01 00 00    	sub    esp,0x134
c0012d9c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012da3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012daa:	56                   	push   esi
c0012dab:	68 0a eb 01 c0       	push   0xc001eb0a
c0012db0:	e8 33 77 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0012db5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012dbc:	e8 08 4a ff ff       	call   c00077c9 <malloc>
c0012dc1:	83 c4 0c             	add    esp,0xc
c0012dc4:	89 c3                	mov    ebx,eax
c0012dc6:	ff 35 50 3e 02 c0    	push   DWORD PTR ds:0xc0023e50
c0012dcc:	56                   	push   esi
c0012dcd:	50                   	push   eax
c0012dce:	e8 8b 7c ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0012dd3:	83 c4 10             	add    esp,0x10
c0012dd6:	85 db                	test   ebx,ebx
c0012dd8:	75 3c                	jne    c0012e16 <Thr::loadDLL(char const*, bool)+0x84>
c0012dda:	89 f8                	mov    eax,edi
c0012ddc:	84 c0                	test   al,al
c0012dde:	0f 84 d2 01 00 00    	je     c0012fb6 <Thr::loadDLL(char const*, bool)+0x224>
c0012de4:	55                   	push   ebp
c0012de5:	55                   	push   ebp
c0012de6:	68 1b eb 01 c0       	push   0xc001eb1b
c0012deb:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012def:	55                   	push   ebp
c0012df0:	e8 1b d8 fe ff       	call   c0000610 <strcpy>
c0012df5:	58                   	pop    eax
c0012df6:	5a                   	pop    edx
c0012df7:	56                   	push   esi
c0012df8:	55                   	push   ebp
c0012df9:	e8 d2 d9 fe ff       	call   c00007d0 <strcat>
c0012dfe:	59                   	pop    ecx
c0012dff:	58                   	pop    eax
c0012e00:	68 2e eb 01 c0       	push   0xc001eb2e
c0012e05:	55                   	push   ebp
c0012e06:	e8 c5 d9 fe ff       	call   c00007d0 <strcat>
c0012e0b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e0e:	e8 58 d3 ff ff       	call   c001016b <KePanic(char const*)>
c0012e13:	83 c4 10             	add    esp,0x10
c0012e16:	51                   	push   ecx
c0012e17:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012e1b:	50                   	push   eax
c0012e1c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012e20:	50                   	push   eax
c0012e21:	53                   	push   ebx
c0012e22:	e8 a3 7f ff ff       	call   c000adca <File::stat(unsigned long long*, bool*)>
c0012e27:	83 c4 10             	add    esp,0x10
c0012e2a:	85 db                	test   ebx,ebx
c0012e2c:	74 0c                	je     c0012e3a <Thr::loadDLL(char const*, bool)+0xa8>
c0012e2e:	83 ec 0c             	sub    esp,0xc
c0012e31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e33:	53                   	push   ebx
c0012e34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012e37:	83 c4 10             	add    esp,0x10
c0012e3a:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012e3f:	75 0a                	jne    c0012e4b <Thr::loadDLL(char const*, bool)+0xb9>
c0012e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e45:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012e49:	75 3c                	jne    c0012e87 <Thr::loadDLL(char const*, bool)+0xf5>
c0012e4b:	89 f8                	mov    eax,edi
c0012e4d:	84 c0                	test   al,al
c0012e4f:	0f 84 49 01 00 00    	je     c0012f9e <Thr::loadDLL(char const*, bool)+0x20c>
c0012e55:	51                   	push   ecx
c0012e56:	51                   	push   ecx
c0012e57:	68 1b eb 01 c0       	push   0xc001eb1b
c0012e5c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012e60:	53                   	push   ebx
c0012e61:	e8 aa d7 fe ff       	call   c0000610 <strcpy>
c0012e66:	5d                   	pop    ebp
c0012e67:	58                   	pop    eax
c0012e68:	56                   	push   esi
c0012e69:	53                   	push   ebx
c0012e6a:	e8 61 d9 fe ff       	call   c00007d0 <strcat>
c0012e6f:	58                   	pop    eax
c0012e70:	5a                   	pop    edx
c0012e71:	68 2e eb 01 c0       	push   0xc001eb2e
c0012e76:	53                   	push   ebx
c0012e77:	e8 54 d9 fe ff       	call   c00007d0 <strcat>
c0012e7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012e7f:	e8 e7 d2 ff ff       	call   c001016b <KePanic(char const*)>
c0012e84:	83 c4 10             	add    esp,0x10
c0012e87:	52                   	push   edx
c0012e88:	6a 03                	push   0x3
c0012e8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e8e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012e92:	05 ff 0f 00 00       	add    eax,0xfff
c0012e97:	83 d2 00             	adc    edx,0x0
c0012e9a:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012e9e:	50                   	push   eax
c0012e9f:	ff 35 70 0c 02 c0    	push   DWORD PTR ds:0xc0020c70
c0012ea5:	e8 84 6b ff ff       	call   c0009a2e <VAS::allocatePages(int, int)>
c0012eaa:	59                   	pop    ecx
c0012eab:	89 c3                	mov    ebx,eax
c0012ead:	5d                   	pop    ebp
c0012eae:	50                   	push   eax
c0012eaf:	68 f6 d6 01 c0       	push   0xc001d6f6
c0012eb4:	e8 2f 76 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0012eb9:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ebc:	e8 8f d6 fe ff       	call   c0000550 <strlen>
c0012ec1:	8b 2d 60 36 02 c0    	mov    ebp,DWORD PTR ds:0xc0023660
c0012ec7:	40                   	inc    eax
c0012ec8:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ecb:	e8 f9 48 ff ff       	call   c00077c9 <malloc>
c0012ed0:	89 04 ad 80 3a 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc580],eax
c0012ed7:	58                   	pop    eax
c0012ed8:	a1 60 36 02 c0       	mov    eax,ds:0xc0023660
c0012edd:	5a                   	pop    edx
c0012ede:	56                   	push   esi
c0012edf:	ff 34 85 80 3a 02 c0 	push   DWORD PTR [eax*4-0x3ffdc580]
c0012ee6:	e8 25 d7 fe ff       	call   c0000610 <strcpy>
c0012eeb:	a1 60 36 02 c0       	mov    eax,ds:0xc0023660
c0012ef0:	8d 50 01             	lea    edx,[eax+0x1]
c0012ef3:	89 1c 85 80 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc780],ebx
c0012efa:	89 15 60 36 02 c0    	mov    DWORD PTR ds:0xc0023660,edx
c0012f00:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012f04:	83 c4 0c             	add    esp,0xc
c0012f07:	89 14 85 80 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc980],edx
c0012f0e:	6a 01                	push   0x1
c0012f10:	53                   	push   ebx
c0012f11:	56                   	push   esi
c0012f12:	e8 c2 f6 ff ff       	call   c00125d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012f17:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012f1b:	83 c4 10             	add    esp,0x10
c0012f1e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f23:	0f 85 89 00 00 00    	jne    c0012fb2 <Thr::loadDLL(char const*, bool)+0x220>
c0012f29:	89 f8                	mov    eax,edi
c0012f2b:	84 c0                	test   al,al
c0012f2d:	74 73                	je     c0012fa2 <Thr::loadDLL(char const*, bool)+0x210>
c0012f2f:	83 ec 0c             	sub    esp,0xc
c0012f32:	68 30 eb 01 c0       	push   0xc001eb30
c0012f37:	e8 2f d2 ff ff       	call   c001016b <KePanic(char const*)>
c0012f3c:	83 c4 10             	add    esp,0x10
c0012f3f:	eb 61                	jmp    c0012fa2 <Thr::loadDLL(char const*, bool)+0x210>
c0012f41:	50                   	push   eax
c0012f42:	50                   	push   eax
c0012f43:	89 e8                	mov    eax,ebp
c0012f45:	c1 e0 0c             	shl    eax,0xc
c0012f48:	01 d8                	add    eax,ebx
c0012f4a:	50                   	push   eax
c0012f4b:	ff 35 70 0c 02 c0    	push   DWORD PTR ds:0xc0020c70
c0012f51:	e8 50 66 ff ff       	call   c00095a6 <VAS::getPageTableEntry(unsigned long)>
c0012f56:	83 c4 10             	add    esp,0x10
c0012f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0012f5b:	a8 60                	test   al,0x60
c0012f5d:	75 11                	jne    c0012f70 <Thr::loadDLL(char const*, bool)+0x1de>
c0012f5f:	83 ec 0c             	sub    esp,0xc
c0012f62:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012f67:	50                   	push   eax
c0012f68:	e8 d6 4a ff ff       	call   c0007a43 <Phys::freePage(unsigned long)>
c0012f6d:	83 c4 10             	add    esp,0x10
c0012f70:	45                   	inc    ebp
c0012f71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f75:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012f79:	05 ff 0f 00 00       	add    eax,0xfff
c0012f7e:	bf 00 00 00 00       	mov    edi,0x0
c0012f83:	83 d2 00             	adc    edx,0x0
c0012f86:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012f8a:	c1 ea 0c             	shr    edx,0xc
c0012f8d:	39 c5                	cmp    ebp,eax
c0012f8f:	89 d1                	mov    ecx,edx
c0012f91:	89 f8                	mov    eax,edi
c0012f93:	19 c8                	sbb    eax,ecx
c0012f95:	72 aa                	jb     c0012f41 <Thr::loadDLL(char const*, bool)+0x1af>
c0012f97:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f9c:	75 18                	jne    c0012fb6 <Thr::loadDLL(char const*, bool)+0x224>
c0012f9e:	31 db                	xor    ebx,ebx
c0012fa0:	eb 14                	jmp    c0012fb6 <Thr::loadDLL(char const*, bool)+0x224>
c0012fa2:	83 ec 0c             	sub    esp,0xc
c0012fa5:	68 4f eb 01 c0       	push   0xc001eb4f
c0012faa:	e8 bc d1 ff ff       	call   c001016b <KePanic(char const*)>
c0012faf:	83 c4 10             	add    esp,0x10
c0012fb2:	31 ed                	xor    ebp,ebp
c0012fb4:	eb bb                	jmp    c0012f71 <Thr::loadDLL(char const*, bool)+0x1df>
c0012fb6:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012fbc:	89 d8                	mov    eax,ebx
c0012fbe:	5b                   	pop    ebx
c0012fbf:	5e                   	pop    esi
c0012fc0:	5f                   	pop    edi
c0012fc1:	5d                   	pop    ebp
c0012fc2:	c3                   	ret    

c0012fc3 <Thr::executeDLL(unsigned long, void*)>:
c0012fc3:	56                   	push   esi
c0012fc4:	53                   	push   ebx
c0012fc5:	52                   	push   edx
c0012fc6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012fca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012fce:	85 db                	test   ebx,ebx
c0012fd0:	75 10                	jne    c0012fe2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012fd2:	83 ec 0c             	sub    esp,0xc
c0012fd5:	68 6b eb 01 c0       	push   0xc001eb6b
c0012fda:	e8 8c d1 ff ff       	call   c001016b <KePanic(char const*)>
c0012fdf:	83 c4 10             	add    esp,0x10
c0012fe2:	50                   	push   eax
c0012fe3:	50                   	push   eax
c0012fe4:	53                   	push   ebx
c0012fe5:	68 95 eb 01 c0       	push   0xc001eb95
c0012fea:	e8 f9 74 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0012fef:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012ff3:	89 d8                	mov    eax,ebx
c0012ff5:	83 c4 14             	add    esp,0x14
c0012ff8:	5b                   	pop    ebx
c0012ff9:	5e                   	pop    esi
c0012ffa:	ff e0                	jmp    eax

c0012ffc <userModeEntryPoint(void*)>:
c0012ffc:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0013001:	48                   	dec    eax
c0013002:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0013007:	75 03                	jne    c001300c <userModeEntryPoint(void*)+0x10>
c0013009:	fb                   	sti    
c001300a:	66 90                	xchg   ax,ax
c001300c:	fb                   	sti    
c001300d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013012:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013015:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c001301b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001301f:	e9 1b d2 fe ff       	jmp    c000023f <goToUsermode>

c0013024 <changeTSS>:
c0013024:	83 ec 14             	sub    esp,0x14
c0013027:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001302c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001302f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0013034:	c1 e2 15             	shl    edx,0x15
c0013037:	29 d0                	sub    eax,edx
c0013039:	50                   	push   eax
c001303a:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c001303f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013045:	05 7c 11 00 00       	add    eax,0x117c
c001304a:	50                   	push   eax
c001304b:	e8 98 5b ff ff       	call   c0008be8 <TSS::setESP(unsigned long)>
c0013050:	83 c4 1c             	add    esp,0x1c
c0013053:	c3                   	ret    

c0013054 <switchToThread(ThreadControlBlock*)>:
c0013054:	57                   	push   edi
c0013055:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c001305a:	56                   	push   esi
c001305b:	85 c0                	test   eax,eax
c001305d:	53                   	push   ebx
c001305e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013062:	0f 85 90 00 00 00    	jne    c00130f8 <switchToThread(ThreadControlBlock*)+0xa4>
c0013068:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c001306b:	80 fa ff             	cmp    dl,0xff
c001306e:	0f 84 80 00 00 00    	je     c00130f4 <switchToThread(ThreadControlBlock*)+0xa0>
c0013074:	81 e2 ff 00 00 00    	and    edx,0xff
c001307a:	b8 00 04 00 00       	mov    eax,0x400
c001307f:	29 d0                	sub    eax,edx
c0013081:	d1 f8                	sar    eax,1
c0013083:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0013086:	66 90                	xchg   ax,ax
c0013088:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001308b:	e8 1d 26 00 00       	call   c00156ad <HalQueryPerformanceCounter()>
c0013090:	a3 68 3e 02 c0       	mov    ds:0xc0023e68,eax
c0013095:	89 15 6c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e6c,edx
c001309b:	89 c6                	mov    esi,eax
c001309d:	89 d7                	mov    edi,edx
c001309f:	2b 35 58 3e 02 c0    	sub    esi,DWORD PTR ds:0xc0023e58
c00130a5:	a3 58 3e 02 c0       	mov    ds:0xc0023e58,eax
c00130aa:	1b 3d 5c 3e 02 c0    	sbb    edi,DWORD PTR ds:0xc0023e5c
c00130b0:	89 35 60 3e 02 c0    	mov    DWORD PTR ds:0xc0023e60,esi
c00130b6:	89 3d 64 3e 02 c0    	mov    DWORD PTR ds:0xc0023e64,edi
c00130bc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00130c2:	89 15 5c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e5c,edx
c00130c8:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c00130cb:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c00130ce:	01 c6                	add    esi,eax
c00130d0:	11 d7                	adc    edi,edx
c00130d2:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c00130d5:	83 ec 0c             	sub    esp,0xc
c00130d8:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00130db:	53                   	push   ebx
c00130dc:	e8 96 d1 fe ff       	call   c0000277 <switchToThreadASM>
c00130e1:	0f 20 c0             	mov    eax,cr0
c00130e4:	83 c8 08             	or     eax,0x8
c00130e7:	0f 22 c0             	mov    cr0,eax
c00130ea:	83 c4 10             	add    esp,0x10
c00130ed:	5b                   	pop    ebx
c00130ee:	5e                   	pop    esi
c00130ef:	5f                   	pop    edi
c00130f0:	c3                   	ret    
c00130f1:	8d 76 00             	lea    esi,[esi+0x0]
c00130f4:	31 c0                	xor    eax,eax
c00130f6:	eb 90                	jmp    c0013088 <switchToThread(ThreadControlBlock*)+0x34>
c00130f8:	5b                   	pop    ebx
c00130f9:	c7 05 20 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023e20,0x1
c0013103:	5e                   	pop    esi
c0013104:	5f                   	pop    edi
c0013105:	c3                   	ret    
c0013106:	66 90                	xchg   ax,ax

c0013108 <Process::addArgs(char**)>:
c0013108:	57                   	push   edi
c0013109:	56                   	push   esi
c001310a:	53                   	push   ebx
c001310b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001310f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0013113:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c001311d:	85 ff                	test   edi,edi
c001311f:	74 43                	je     c0013164 <Process::addArgs(char**)+0x5c>
c0013121:	8b 07                	mov    eax,DWORD PTR [edi]
c0013123:	85 c0                	test   eax,eax
c0013125:	74 3d                	je     c0013164 <Process::addArgs(char**)+0x5c>
c0013127:	31 db                	xor    ebx,ebx
c0013129:	8d 76 00             	lea    esi,[esi+0x0]
c001312c:	83 ec 0c             	sub    esp,0xc
c001312f:	50                   	push   eax
c0013130:	e8 1b d4 fe ff       	call   c0000550 <strlen>
c0013135:	40                   	inc    eax
c0013136:	89 04 24             	mov    DWORD PTR [esp],eax
c0013139:	e8 8b 46 ff ff       	call   c00077c9 <malloc>
c001313e:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0013145:	5a                   	pop    edx
c0013146:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0013149:	59                   	pop    ecx
c001314a:	43                   	inc    ebx
c001314b:	52                   	push   edx
c001314c:	50                   	push   eax
c001314d:	e8 be d4 fe ff       	call   c0000610 <strcpy>
c0013152:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013158:	83 c4 10             	add    esp,0x10
c001315b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001315e:	85 c0                	test   eax,eax
c0013160:	75 ca                	jne    c001312c <Process::addArgs(char**)+0x24>
c0013162:	66 90                	xchg   ax,ax
c0013164:	5b                   	pop    ebx
c0013165:	5e                   	pop    esi
c0013166:	5f                   	pop    edi
c0013167:	c3                   	ret    

c0013168 <Process::Process(char const*, Process*, char**)>:
c0013168:	56                   	push   esi
c0013169:	53                   	push   ebx
c001316a:	83 ec 14             	sub    esp,0x14
c001316d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013171:	05 0c 02 00 00       	add    eax,0x20c
c0013176:	bb 07 00 00 00       	mov    ebx,0x7
c001317b:	89 c6                	mov    esi,eax
c001317d:	8d 76 00             	lea    esi,[esi+0x0]
c0013180:	85 db                	test   ebx,ebx
c0013182:	78 14                	js     c0013198 <Process::Process(char const*, Process*, char**)+0x30>
c0013184:	83 ec 0c             	sub    esp,0xc
c0013187:	56                   	push   esi
c0013188:	e8 3f 98 00 00       	call   c001c9cc <ThreadControlBlock::ThreadControlBlock()>
c001318d:	83 c4 10             	add    esp,0x10
c0013190:	83 c6 5f             	add    esi,0x5f
c0013193:	4b                   	dec    ebx
c0013194:	eb ea                	jmp    c0013180 <Process::Process(char const*, Process*, char**)+0x18>
c0013196:	66 90                	xchg   ax,ax
c0013198:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001319c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00131a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131a7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00131ae:	83 ec 0c             	sub    esp,0xc
c00131b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131b5:	e8 a6 cd ff ff       	call   c000ff60 <Krnl::newProcessEnv(Process*)>
c00131ba:	83 c4 10             	add    esp,0x10
c00131bd:	89 c2                	mov    edx,eax
c00131bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131c3:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00131c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131cd:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00131d6:	a1 4c fb 01 c0       	mov    eax,ds:0xc001fb4c
c00131db:	8d 50 01             	lea    edx,[eax+0x1]
c00131de:	89 15 4c fb 01 c0    	mov    DWORD PTR ds:0xc001fb4c,edx
c00131e4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00131e8:	89 02                	mov    DWORD PTR [edx],eax
c00131ea:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00131f2:	83 ec 0c             	sub    esp,0xc
c00131f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00131f9:	e8 cb 45 ff ff       	call   c00077c9 <malloc>
c00131fe:	83 c4 10             	add    esp,0x10
c0013201:	89 c3                	mov    ebx,eax
c0013203:	83 ec 08             	sub    esp,0x8
c0013206:	6a 00                	push   0x0
c0013208:	53                   	push   ebx
c0013209:	e8 ca 6b ff ff       	call   c0009dd8 <VAS::VAS(bool)>
c001320e:	83 c4 10             	add    esp,0x10
c0013211:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013215:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001321b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001321f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013229:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001322d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013231:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013237:	e8 57 d2 ff ff       	call   c0010493 <KeInitSignals()>
c001323c:	89 c2                	mov    edx,eax
c001323e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013242:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001324c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013252:	85 c0                	test   eax,eax
c0013254:	74 42                	je     c0013298 <Process::Process(char const*, Process*, char**)+0x130>
c0013256:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001325a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013260:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001326a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013274:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001327a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013280:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013284:	05 0c 01 00 00       	add    eax,0x10c
c0013289:	83 ec 08             	sub    esp,0x8
c001328c:	52                   	push   edx
c001328d:	50                   	push   eax
c001328e:	e8 7d d3 fe ff       	call   c0000610 <strcpy>
c0013293:	83 c4 10             	add    esp,0x10
c0013296:	eb 64                	jmp    c00132fc <Process::Process(char const*, Process*, char**)+0x194>
c0013298:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c00132a0:	83 ec 0c             	sub    esp,0xc
c00132a3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00132a7:	e8 1d 45 ff ff       	call   c00077c9 <malloc>
c00132ac:	83 c4 10             	add    esp,0x10
c00132af:	89 c3                	mov    ebx,eax
c00132b1:	83 ec 08             	sub    esp,0x8
c00132b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132b8:	53                   	push   ebx
c00132b9:	e8 4c 56 ff ff       	call   c000890a <VgaText::VgaText(char const*)>
c00132be:	83 c4 10             	add    esp,0x10
c00132c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132c5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00132cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132cf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00132d5:	83 ec 0c             	sub    esp,0xc
c00132d8:	50                   	push   eax
c00132d9:	e8 cc 4e ff ff       	call   c00081aa <addToTerminalCycle(VgaText*)>
c00132de:	83 c4 10             	add    esp,0x10
c00132e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132e5:	05 0c 01 00 00       	add    eax,0x10c
c00132ea:	83 ec 08             	sub    esp,0x8
c00132ed:	68 b4 eb 01 c0       	push   0xc001ebb4
c00132f2:	50                   	push   eax
c00132f3:	e8 18 d3 fe ff       	call   c0000610 <strcpy>
c00132f8:	83 c4 10             	add    esp,0x10
c00132fb:	90                   	nop
c00132fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013300:	83 c0 0c             	add    eax,0xc
c0013303:	83 ec 08             	sub    esp,0x8
c0013306:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001330a:	50                   	push   eax
c001330b:	e8 00 d3 fe ff       	call   c0000610 <strcpy>
c0013310:	83 c4 10             	add    esp,0x10
c0013313:	83 ec 08             	sub    esp,0x8
c0013316:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001331a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001331e:	e8 e5 fd ff ff       	call   c0013108 <Process::addArgs(char**)>
c0013323:	83 c4 10             	add    esp,0x10
c0013326:	83 ec 08             	sub    esp,0x8
c0013329:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001332d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013331:	e8 6d ed ff ff       	call   c00120a3 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0013336:	83 c4 10             	add    esp,0x10
c0013339:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001333d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013341:	83 f0 01             	xor    eax,0x1
c0013344:	88 c2                	mov    dl,al
c0013346:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001334a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013350:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013354:	25 ff 00 00 00       	and    eax,0xff
c0013359:	83 ec 08             	sub    esp,0x8
c001335c:	50                   	push   eax
c001335d:	68 0c ec 01 c0       	push   0xc001ec0c
c0013362:	e8 81 71 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0013367:	83 c4 10             	add    esp,0x10
c001336a:	90                   	nop
c001336b:	83 c4 14             	add    esp,0x14
c001336e:	5b                   	pop    ebx
c001336f:	5e                   	pop    esi
c0013370:	c3                   	ret    
c0013371:	90                   	nop
c0013372:	66 90                	xchg   ax,ax

c0013374 <Process::Process(bool, char const*, Process*, char**)>:
c0013374:	56                   	push   esi
c0013375:	53                   	push   ebx
c0013376:	83 ec 24             	sub    esp,0x24
c0013379:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001337d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013381:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013385:	05 0c 02 00 00       	add    eax,0x20c
c001338a:	bb 07 00 00 00       	mov    ebx,0x7
c001338f:	89 c6                	mov    esi,eax
c0013391:	8d 76 00             	lea    esi,[esi+0x0]
c0013394:	85 db                	test   ebx,ebx
c0013396:	78 14                	js     c00133ac <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013398:	83 ec 0c             	sub    esp,0xc
c001339b:	56                   	push   esi
c001339c:	e8 2b 96 00 00       	call   c001c9cc <ThreadControlBlock::ThreadControlBlock()>
c00133a1:	83 c4 10             	add    esp,0x10
c00133a4:	83 c6 5f             	add    esi,0x5f
c00133a7:	4b                   	dec    ebx
c00133a8:	eb ea                	jmp    c0013394 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00133aa:	66 90                	xchg   ax,ax
c00133ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133b0:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00133b7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133bb:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00133c2:	83 ec 0c             	sub    esp,0xc
c00133c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00133c9:	e8 92 cb ff ff       	call   c000ff60 <Krnl::newProcessEnv(Process*)>
c00133ce:	83 c4 10             	add    esp,0x10
c00133d1:	89 c2                	mov    edx,eax
c00133d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133d7:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00133dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00133e1:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00133ea:	a1 4c fb 01 c0       	mov    eax,ds:0xc001fb4c
c00133ef:	8d 50 01             	lea    edx,[eax+0x1]
c00133f2:	89 15 4c fb 01 c0    	mov    DWORD PTR ds:0xc001fb4c,edx
c00133f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00133fc:	89 02                	mov    DWORD PTR [edx],eax
c00133fe:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0013406:	83 ec 0c             	sub    esp,0xc
c0013409:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001340d:	e8 b7 43 ff ff       	call   c00077c9 <malloc>
c0013412:	83 c4 10             	add    esp,0x10
c0013415:	89 c3                	mov    ebx,eax
c0013417:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001341b:	25 ff 00 00 00       	and    eax,0xff
c0013420:	83 ec 08             	sub    esp,0x8
c0013423:	50                   	push   eax
c0013424:	53                   	push   ebx
c0013425:	e8 ae 69 ff ff       	call   c0009dd8 <VAS::VAS(bool)>
c001342a:	83 c4 10             	add    esp,0x10
c001342d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013431:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013437:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001343b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013445:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013449:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001344d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013453:	e8 3b d0 ff ff       	call   c0010493 <KeInitSignals()>
c0013458:	89 c2                	mov    edx,eax
c001345a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001345e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013464:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013468:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001346e:	85 c0                	test   eax,eax
c0013470:	74 42                	je     c00134b4 <Process::Process(bool, char const*, Process*, char**)+0x140>
c0013472:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013476:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001347c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013482:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013486:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001348c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013490:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013496:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001349c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134a0:	05 0c 01 00 00       	add    eax,0x10c
c00134a5:	83 ec 08             	sub    esp,0x8
c00134a8:	52                   	push   edx
c00134a9:	50                   	push   eax
c00134aa:	e8 61 d1 fe ff       	call   c0000610 <strcpy>
c00134af:	83 c4 10             	add    esp,0x10
c00134b2:	eb 64                	jmp    c0013518 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c00134b4:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c00134bc:	83 ec 0c             	sub    esp,0xc
c00134bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00134c3:	e8 01 43 ff ff       	call   c00077c9 <malloc>
c00134c8:	83 c4 10             	add    esp,0x10
c00134cb:	89 c3                	mov    ebx,eax
c00134cd:	83 ec 08             	sub    esp,0x8
c00134d0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00134d4:	53                   	push   ebx
c00134d5:	e8 30 54 ff ff       	call   c000890a <VgaText::VgaText(char const*)>
c00134da:	83 c4 10             	add    esp,0x10
c00134dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134e1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00134e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00134f1:	83 ec 0c             	sub    esp,0xc
c00134f4:	50                   	push   eax
c00134f5:	e8 b0 4c ff ff       	call   c00081aa <addToTerminalCycle(VgaText*)>
c00134fa:	83 c4 10             	add    esp,0x10
c00134fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013501:	05 0c 01 00 00       	add    eax,0x10c
c0013506:	83 ec 08             	sub    esp,0x8
c0013509:	68 b4 eb 01 c0       	push   0xc001ebb4
c001350e:	50                   	push   eax
c001350f:	e8 fc d0 fe ff       	call   c0000610 <strcpy>
c0013514:	83 c4 10             	add    esp,0x10
c0013517:	90                   	nop
c0013518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001351c:	83 c0 0c             	add    eax,0xc
c001351f:	83 ec 08             	sub    esp,0x8
c0013522:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013526:	50                   	push   eax
c0013527:	e8 e4 d0 fe ff       	call   c0000610 <strcpy>
c001352c:	83 c4 10             	add    esp,0x10
c001352f:	83 ec 08             	sub    esp,0x8
c0013532:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013536:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001353a:	e8 c9 fb ff ff       	call   c0013108 <Process::addArgs(char**)>
c001353f:	83 c4 10             	add    esp,0x10
c0013542:	90                   	nop
c0013543:	83 c4 24             	add    esp,0x24
c0013546:	5b                   	pop    ebx
c0013547:	5e                   	pop    esi
c0013548:	c3                   	ret    
c0013549:	8d 76 00             	lea    esi,[esi+0x0]

c001354c <taskStartupFunction>:
c001354c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013551:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013554:	c3                   	ret    
c0013555:	90                   	nop
c0013556:	66 90                	xchg   ax,ax

c0013558 <Semaphore::Semaphore(int)>:
c0013558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001355c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013560:	89 10                	mov    DWORD PTR [eax],edx
c0013562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013566:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001356d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013571:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001357c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013583:	90                   	nop
c0013584:	c3                   	ret    
c0013585:	90                   	nop
c0013586:	66 90                	xchg   ax,ax

c0013588 <Mutex::Mutex()>:
c0013588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001358c:	6a 01                	push   0x1
c001358e:	50                   	push   eax
c001358f:	e8 c4 ff ff ff       	call   c0013558 <Semaphore::Semaphore(int)>
c0013594:	83 c4 08             	add    esp,0x8
c0013597:	90                   	nop
c0013598:	c3                   	ret    
c0013599:	90                   	nop
c001359a:	66 90                	xchg   ax,ax

c001359c <Process::createThread(void (*)(void*), void*, int)>:
c001359c:	57                   	push   edi
c001359d:	31 c9                	xor    ecx,ecx
c001359f:	56                   	push   esi
c00135a0:	53                   	push   ebx
c00135a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135a5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00135ac:	89 f2                	mov    edx,esi
c00135ae:	66 90                	xchg   ax,ax
c00135b0:	31 c0                	xor    eax,eax
c00135b2:	66 89 d0             	mov    ax,dx
c00135b5:	83 e2 01             	and    edx,0x1
c00135b8:	74 12                	je     c00135cc <Process::createThread(void (*)(void*), void*, int)+0x30>
c00135ba:	d1 f8                	sar    eax,1
c00135bc:	41                   	inc    ecx
c00135bd:	89 c2                	mov    edx,eax
c00135bf:	83 f9 10             	cmp    ecx,0x10
c00135c2:	75 ec                	jne    c00135b0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00135c4:	31 db                	xor    ebx,ebx
c00135c6:	89 d8                	mov    eax,ebx
c00135c8:	5b                   	pop    ebx
c00135c9:	5e                   	pop    esi
c00135ca:	5f                   	pop    edi
c00135cb:	c3                   	ret    
c00135cc:	b8 01 00 00 00       	mov    eax,0x1
c00135d1:	d3 e0                	shl    eax,cl
c00135d3:	09 c6                	or     esi,eax
c00135d5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00135d8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00135df:	01 c0                	add    eax,eax
c00135e1:	01 c8                	add    eax,ecx
c00135e3:	8d 04 80             	lea    eax,[eax+eax*4]
c00135e6:	01 d8                	add    eax,ebx
c00135e8:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00135ef:	75 0b                	jne    c00135fc <Process::createThread(void (*)(void*), void*, int)+0x60>
c00135f1:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00135fb:	90                   	nop
c00135fc:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013602:	83 ec 08             	sub    esp,0x8
c0013605:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013608:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001360b:	01 c0                	add    eax,eax
c001360d:	01 c8                	add    eax,ecx
c001360f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013612:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013615:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001361b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013621:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013625:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001362b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013631:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013638:	89 ca                	mov    edx,ecx
c001363a:	f7 da                	neg    edx
c001363c:	c1 e2 15             	shl    edx,0x15
c001363f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013645:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001364b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001364f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013659:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001365f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013663:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013669:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0013673:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001367d:	53                   	push   ebx
c001367e:	68 44 3e 02 c0       	push   0xc0023e44
c0013683:	e8 e4 90 00 00       	call   c001c76c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013688:	83 c4 10             	add    esp,0x10
c001368b:	89 d8                	mov    eax,ebx
c001368d:	5b                   	pop    ebx
c001368e:	5e                   	pop    esi
c001368f:	5f                   	pop    edi
c0013690:	c3                   	ret    
c0013691:	90                   	nop
c0013692:	66 90                	xchg   ax,ax

c0013694 <Process::createUserThread()>:
c0013694:	83 ec 0c             	sub    esp,0xc
c0013697:	68 80 00 00 00       	push   0x80
c001369c:	6a 00                	push   0x0
c001369e:	68 fc 2f 01 c0       	push   0xc0012ffc
c00136a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136a7:	50                   	push   eax
c00136a8:	e8 ef fe ff ff       	call   c001359c <Process::createThread(void (*)(void*), void*, int)>
c00136ad:	83 c4 1c             	add    esp,0x1c
c00136b0:	c3                   	ret    
c00136b1:	8d 76 00             	lea    esi,[esi+0x0]

c00136b4 <setupMultitasking(void (*)())>:
c00136b4:	56                   	push   esi
c00136b5:	53                   	push   ebx
c00136b6:	53                   	push   ebx
c00136b7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00136bb:	eb 13                	jmp    c00136d0 <setupMultitasking(void (*)())+0x1c>
c00136bd:	8d 76 00             	lea    esi,[esi+0x0]
c00136c0:	83 ec 0c             	sub    esp,0xc
c00136c3:	68 44 3e 02 c0       	push   0xc0023e44
c00136c8:	e8 e7 8f 00 00       	call   c001c6b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00136cd:	83 c4 10             	add    esp,0x10
c00136d0:	83 ec 0c             	sub    esp,0xc
c00136d3:	68 44 3e 02 c0       	push   0xc0023e44
c00136d8:	e8 b3 8f 00 00       	call   c001c690 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00136dd:	83 c4 10             	add    esp,0x10
c00136e0:	84 c0                	test   al,al
c00136e2:	74 dc                	je     c00136c0 <setupMultitasking(void (*)())+0xc>
c00136e4:	83 ec 0c             	sub    esp,0xc
c00136e7:	68 24 07 00 00       	push   0x724
c00136ec:	e8 d8 40 ff ff       	call   c00077c9 <malloc>
c00136f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00136f8:	89 c3                	mov    ebx,eax
c00136fa:	6a 00                	push   0x0
c00136fc:	68 b8 eb 01 c0       	push   0xc001ebb8
c0013701:	6a 01                	push   0x1
c0013703:	50                   	push   eax
c0013704:	e8 6b fc ff ff       	call   c0013374 <Process::Process(bool, char const*, Process*, char**)>
c0013709:	83 c4 14             	add    esp,0x14
c001370c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013712:	89 1d 50 3e 02 c0    	mov    DWORD PTR ds:0xc0023e50,ebx
c0013718:	50                   	push   eax
c0013719:	e8 e9 4c ff ff       	call   c0008407 <setActiveTerminal(VgaText*)>
c001371e:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013726:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013730:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013736:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013739:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013743:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013749:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001374f:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013759:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0013763:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001376d:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0013773:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013779:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0013783:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013789:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0013793:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013799:	5a                   	pop    edx
c001379a:	59                   	pop    ecx
c001379b:	68 b4 eb 01 c0       	push   0xc001ebb4
c00137a0:	50                   	push   eax
c00137a1:	e8 6a ce fe ff       	call   c0000610 <strcpy>
c00137a6:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00137ad:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00137b1:	83 c4 14             	add    esp,0x14
c00137b4:	5b                   	pop    ebx
c00137b5:	5e                   	pop    esi
c00137b6:	e9 ae ca fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00137bb:	90                   	nop

c00137bc <schedule()>:
c00137bc:	8b 15 24 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e24
c00137c2:	85 d2                	test   edx,edx
c00137c4:	74 0e                	je     c00137d4 <schedule()+0x18>
c00137c6:	c7 05 20 3e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023e20,0x1
c00137d0:	c3                   	ret    
c00137d1:	8d 76 00             	lea    esi,[esi+0x0]
c00137d4:	53                   	push   ebx
c00137d5:	83 ec 14             	sub    esp,0x14
c00137d8:	68 44 3e 02 c0       	push   0xc0023e44
c00137dd:	e8 ae 8e 00 00       	call   c001c690 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00137e2:	83 c4 10             	add    esp,0x10
c00137e5:	84 c0                	test   al,al
c00137e7:	75 3b                	jne    c0013824 <schedule()+0x68>
c00137e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137ee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00137f1:	4a                   	dec    edx
c00137f2:	74 38                	je     c001382c <schedule()+0x70>
c00137f4:	83 ec 0c             	sub    esp,0xc
c00137f7:	68 44 3e 02 c0       	push   0xc0023e44
c00137fc:	e8 ab 8e 00 00       	call   c001c6ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013801:	c7 04 24 44 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e44
c0013808:	89 c3                	mov    ebx,eax
c001380a:	e8 a5 8e 00 00       	call   c001c6b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001380f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013816:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013819:	e8 36 f8 ff ff       	call   c0013054 <switchToThread(ThreadControlBlock*)>
c001381e:	83 c4 10             	add    esp,0x10
c0013821:	8d 76 00             	lea    esi,[esi+0x0]
c0013824:	83 c4 08             	add    esp,0x8
c0013827:	5b                   	pop    ebx
c0013828:	c3                   	ret    
c0013829:	8d 76 00             	lea    esi,[esi+0x0]
c001382c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013833:	83 ec 08             	sub    esp,0x8
c0013836:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001383b:	50                   	push   eax
c001383c:	68 44 3e 02 c0       	push   0xc0023e44
c0013841:	e8 26 8f 00 00       	call   c001c76c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013846:	83 c4 10             	add    esp,0x10
c0013849:	eb a9                	jmp    c00137f4 <schedule()+0x38>
c001384b:	90                   	nop

c001384c <Semaphore::tryAcquire()>:
c001384c:	53                   	push   ebx
c001384d:	83 ec 08             	sub    esp,0x8
c0013850:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013854:	fa                   	cli    
c0013855:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c001385a:	8d 50 01             	lea    edx,[eax+0x1]
c001385d:	89 15 28 3e 02 c0    	mov    DWORD PTR ds:0xc0023e28,edx
c0013863:	8b 15 24 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e24
c0013869:	8d 5a 01             	lea    ebx,[edx+0x1]
c001386c:	89 1d 24 3e 02 c0    	mov    DWORD PTR ds:0xc0023e24,ebx
c0013872:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013875:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013877:	7c 33                	jl     c00138ac <Semaphore::tryAcquire()+0x60>
c0013879:	89 15 24 3e 02 c0    	mov    DWORD PTR ds:0xc0023e24,edx
c001387f:	85 d2                	test   edx,edx
c0013881:	75 0d                	jne    c0013890 <Semaphore::tryAcquire()+0x44>
c0013883:	8b 15 20 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023e20
c0013889:	85 d2                	test   edx,edx
c001388b:	75 6b                	jne    c00138f8 <Semaphore::tryAcquire()+0xac>
c001388d:	8d 76 00             	lea    esi,[esi+0x0]
c0013890:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0013895:	85 c0                	test   eax,eax
c0013897:	74 0b                	je     c00138a4 <Semaphore::tryAcquire()+0x58>
c0013899:	8d 76 00             	lea    esi,[esi+0x0]
c001389c:	31 c0                	xor    eax,eax
c001389e:	83 c4 08             	add    esp,0x8
c00138a1:	5b                   	pop    ebx
c00138a2:	c3                   	ret    
c00138a3:	90                   	nop
c00138a4:	fb                   	sti    
c00138a5:	83 c4 08             	add    esp,0x8
c00138a8:	5b                   	pop    ebx
c00138a9:	c3                   	ret    
c00138aa:	66 90                	xchg   ax,ax
c00138ac:	43                   	inc    ebx
c00138ad:	89 15 24 3e 02 c0    	mov    DWORD PTR ds:0xc0023e24,edx
c00138b3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00138b6:	85 d2                	test   edx,edx
c00138b8:	75 22                	jne    c00138dc <Semaphore::tryAcquire()+0x90>
c00138ba:	8b 0d 20 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e20
c00138c0:	85 c9                	test   ecx,ecx
c00138c2:	74 18                	je     c00138dc <Semaphore::tryAcquire()+0x90>
c00138c4:	c7 05 20 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e20,0x0
c00138ce:	e8 e9 fe ff ff       	call   c00137bc <schedule()>
c00138d3:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c00138d8:	48                   	dec    eax
c00138d9:	8d 76 00             	lea    esi,[esi+0x0]
c00138dc:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c00138e1:	85 c0                	test   eax,eax
c00138e3:	75 0b                	jne    c00138f0 <Semaphore::tryAcquire()+0xa4>
c00138e5:	fb                   	sti    
c00138e6:	b0 01                	mov    al,0x1
c00138e8:	83 c4 08             	add    esp,0x8
c00138eb:	5b                   	pop    ebx
c00138ec:	c3                   	ret    
c00138ed:	8d 76 00             	lea    esi,[esi+0x0]
c00138f0:	b0 01                	mov    al,0x1
c00138f2:	83 c4 08             	add    esp,0x8
c00138f5:	5b                   	pop    ebx
c00138f6:	c3                   	ret    
c00138f7:	90                   	nop
c00138f8:	c7 05 20 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e20,0x0
c0013902:	e8 b5 fe ff ff       	call   c00137bc <schedule()>
c0013907:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c001390c:	48                   	dec    eax
c001390d:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0013912:	85 c0                	test   eax,eax
c0013914:	75 86                	jne    c001389c <Semaphore::tryAcquire()+0x50>
c0013916:	eb 8c                	jmp    c00138a4 <Semaphore::tryAcquire()+0x58>

c0013918 <Semaphore::assertLocked(char const*)>:
c0013918:	83 ec 0c             	sub    esp,0xc
c001391b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001391f:	fa                   	cli    
c0013920:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c0013926:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c001392b:	8d 48 01             	lea    ecx,[eax+0x1]
c001392e:	89 0d 24 3e 02 c0    	mov    DWORD PTR ds:0xc0023e24,ecx
c0013934:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013936:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013939:	7c 29                	jl     c0013964 <Semaphore::assertLocked(char const*)+0x4c>
c001393b:	90                   	nop
c001393c:	a3 24 3e 02 c0       	mov    ds:0xc0023e24,eax
c0013941:	85 c0                	test   eax,eax
c0013943:	75 0b                	jne    c0013950 <Semaphore::assertLocked(char const*)+0x38>
c0013945:	a1 20 3e 02 c0       	mov    eax,ds:0xc0023e20
c001394a:	85 c0                	test   eax,eax
c001394c:	75 2e                	jne    c001397c <Semaphore::assertLocked(char const*)+0x64>
c001394e:	66 90                	xchg   ax,ax
c0013950:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0013955:	48                   	dec    eax
c0013956:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c001395b:	75 03                	jne    c0013960 <Semaphore::assertLocked(char const*)+0x48>
c001395d:	fb                   	sti    
c001395e:	66 90                	xchg   ax,ax
c0013960:	83 c4 0c             	add    esp,0xc
c0013963:	c3                   	ret    
c0013964:	83 ec 0c             	sub    esp,0xc
c0013967:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001396b:	52                   	push   edx
c001396c:	e8 fa c7 ff ff       	call   c001016b <KePanic(char const*)>
c0013971:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c0013976:	83 c4 10             	add    esp,0x10
c0013979:	48                   	dec    eax
c001397a:	eb c0                	jmp    c001393c <Semaphore::assertLocked(char const*)+0x24>
c001397c:	c7 05 20 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e20,0x0
c0013986:	e8 31 fe ff ff       	call   c00137bc <schedule()>
c001398b:	eb c3                	jmp    c0013950 <Semaphore::assertLocked(char const*)+0x38>
c001398d:	8d 76 00             	lea    esi,[esi+0x0]

c0013990 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013990:	83 ec 0c             	sub    esp,0xc
c0013993:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013998:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001399c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001399f:	e8 18 fe ff ff       	call   c00137bc <schedule()>
c00139a4:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c00139a9:	48                   	dec    eax
c00139aa:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c00139af:	75 03                	jne    c00139b4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00139b1:	fb                   	sti    
c00139b2:	66 90                	xchg   ax,ax
c00139b4:	83 c4 0c             	add    esp,0xc
c00139b7:	c3                   	ret    

c00139b8 <blockTask(TaskState)>:
c00139b8:	83 ec 0c             	sub    esp,0xc
c00139bb:	fa                   	cli    
c00139bc:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c00139c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00139ce:	e8 e9 fd ff ff       	call   c00137bc <schedule()>
c00139d3:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c00139d8:	48                   	dec    eax
c00139d9:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c00139de:	75 04                	jne    c00139e4 <blockTask(TaskState)+0x2c>
c00139e0:	fb                   	sti    
c00139e1:	8d 76 00             	lea    esi,[esi+0x0]
c00139e4:	83 c4 0c             	add    esp,0xc
c00139e7:	c3                   	ret    

c00139e8 <waitTask(int, int*, int)>:
c00139e8:	83 ec 18             	sub    esp,0x18
c00139eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139f0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00139f4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00139f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00139fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a00:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013a03:	6a 07                	push   0x7
c0013a05:	e8 ae ff ff ff       	call   c00139b8 <blockTask(TaskState)>
c0013a0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a0f:	83 c4 10             	add    esp,0x10
c0013a12:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013a15:	85 d2                	test   edx,edx
c0013a17:	74 0b                	je     c0013a24 <waitTask(int, int*, int)+0x3c>
c0013a19:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013a1c:	89 02                	mov    DWORD PTR [edx],eax
c0013a1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a23:	90                   	nop
c0013a24:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013a27:	83 c4 0c             	add    esp,0xc
c0013a2a:	c3                   	ret    
c0013a2b:	90                   	nop

c0013a2c <milliTenthSleepUntil(unsigned int)>:
c0013a2c:	83 ec 0c             	sub    esp,0xc
c0013a2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a33:	39 05 4c 31 02 c0    	cmp    DWORD PTR ds:0xc002314c,eax
c0013a39:	76 05                	jbe    c0013a40 <milliTenthSleepUntil(unsigned int)+0x14>
c0013a3b:	90                   	nop
c0013a3c:	83 c4 0c             	add    esp,0xc
c0013a3f:	c3                   	ret    
c0013a40:	fa                   	cli    
c0013a41:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c0013a47:	83 ec 08             	sub    esp,0x8
c0013a4a:	ff 05 24 3e 02 c0    	inc    DWORD PTR ds:0xc0023e24
c0013a50:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a56:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013a59:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013a5f:	52                   	push   edx
c0013a60:	68 38 3e 02 c0       	push   0xc0023e38
c0013a65:	e8 02 8d 00 00       	call   c001c76c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013a6a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013a71:	e8 42 ff ff ff       	call   c00139b8 <blockTask(TaskState)>
c0013a76:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c0013a7b:	83 c4 10             	add    esp,0x10
c0013a7e:	48                   	dec    eax
c0013a7f:	a3 24 3e 02 c0       	mov    ds:0xc0023e24,eax
c0013a84:	85 c0                	test   eax,eax
c0013a86:	75 0c                	jne    c0013a94 <milliTenthSleepUntil(unsigned int)+0x68>
c0013a88:	a1 20 3e 02 c0       	mov    eax,ds:0xc0023e20
c0013a8d:	85 c0                	test   eax,eax
c0013a8f:	75 17                	jne    c0013aa8 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013a91:	8d 76 00             	lea    esi,[esi+0x0]
c0013a94:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0013a99:	48                   	dec    eax
c0013a9a:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0013a9f:	75 9b                	jne    c0013a3c <milliTenthSleepUntil(unsigned int)+0x10>
c0013aa1:	fb                   	sti    
c0013aa2:	83 c4 0c             	add    esp,0xc
c0013aa5:	c3                   	ret    
c0013aa6:	66 90                	xchg   ax,ax
c0013aa8:	c7 05 20 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e20,0x0
c0013ab2:	e8 05 fd ff ff       	call   c00137bc <schedule()>
c0013ab7:	eb db                	jmp    c0013a94 <milliTenthSleepUntil(unsigned int)+0x68>
c0013ab9:	8d 76 00             	lea    esi,[esi+0x0]

c0013abc <milliTenthSleep(unsigned int)>:
c0013abc:	a1 4c 31 02 c0       	mov    eax,ds:0xc002314c
c0013ac1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013ac5:	e9 62 ff ff ff       	jmp    c0013a2c <milliTenthSleepUntil(unsigned int)>
c0013aca:	66 90                	xchg   ax,ax

c0013acc <sleep(unsigned int)>:
c0013acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ad0:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ad3:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ad6:	8d 04 80             	lea    eax,[eax+eax*4]
c0013ad9:	8d 04 80             	lea    eax,[eax+eax*4]
c0013adc:	c1 e0 04             	shl    eax,0x4
c0013adf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ae3:	eb d7                	jmp    c0013abc <milliTenthSleep(unsigned int)>
c0013ae5:	90                   	nop
c0013ae6:	66 90                	xchg   ax,ax

c0013ae8 <Semaphore::acquire()>:
c0013ae8:	83 ec 0c             	sub    esp,0xc
c0013aeb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aef:	fa                   	cli    
c0013af0:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c0013af5:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c0013afb:	8d 48 01             	lea    ecx,[eax+0x1]
c0013afe:	89 0d 24 3e 02 c0    	mov    DWORD PTR ds:0xc0023e24,ecx
c0013b04:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013b07:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013b09:	7d 2d                	jge    c0013b38 <Semaphore::acquire()+0x50>
c0013b0b:	41                   	inc    ecx
c0013b0c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013b0f:	90                   	nop
c0013b10:	a3 24 3e 02 c0       	mov    ds:0xc0023e24,eax
c0013b15:	85 c0                	test   eax,eax
c0013b17:	75 0b                	jne    c0013b24 <Semaphore::acquire()+0x3c>
c0013b19:	a1 20 3e 02 c0       	mov    eax,ds:0xc0023e20
c0013b1e:	85 c0                	test   eax,eax
c0013b20:	75 62                	jne    c0013b84 <Semaphore::acquire()+0x9c>
c0013b22:	66 90                	xchg   ax,ax
c0013b24:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0013b29:	48                   	dec    eax
c0013b2a:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0013b2f:	75 03                	jne    c0013b34 <Semaphore::acquire()+0x4c>
c0013b31:	fb                   	sti    
c0013b32:	66 90                	xchg   ax,ax
c0013b34:	83 c4 0c             	add    esp,0xc
c0013b37:	c3                   	ret    
c0013b38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b3d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013b44:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013b47:	85 c9                	test   ecx,ecx
c0013b49:	74 4d                	je     c0013b98 <Semaphore::acquire()+0xb0>
c0013b4b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013b4e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013b54:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013b57:	90                   	nop
c0013b58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b5d:	83 ec 0c             	sub    esp,0xc
c0013b60:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013b63:	68 34 ec 01 c0       	push   0xc001ec34
c0013b68:	e8 7b 69 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0013b6d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013b74:	e8 3f fe ff ff       	call   c00139b8 <blockTask(TaskState)>
c0013b79:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c0013b7e:	83 c4 10             	add    esp,0x10
c0013b81:	48                   	dec    eax
c0013b82:	eb 8c                	jmp    c0013b10 <Semaphore::acquire()+0x28>
c0013b84:	c7 05 20 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e20,0x0
c0013b8e:	e8 29 fc ff ff       	call   c00137bc <schedule()>
c0013b93:	eb 8f                	jmp    c0013b24 <Semaphore::acquire()+0x3c>
c0013b95:	8d 76 00             	lea    esi,[esi+0x0]
c0013b98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b9d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013ba0:	eb b6                	jmp    c0013b58 <Semaphore::acquire()+0x70>
c0013ba2:	66 90                	xchg   ax,ax

c0013ba4 <taskReturned>:
c0013ba4:	83 ec 18             	sub    esp,0x18
c0013ba7:	68 54 ec 01 c0       	push   0xc001ec54
c0013bac:	e8 ba c5 ff ff       	call   c001016b <KePanic(char const*)>
c0013bb1:	83 c4 10             	add    esp,0x10
c0013bb4:	83 ec 0c             	sub    esp,0xc
c0013bb7:	6a 02                	push   0x2
c0013bb9:	e8 fa fd ff ff       	call   c00139b8 <blockTask(TaskState)>
c0013bbe:	fa                   	cli    
c0013bbf:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c0013bc5:	e8 f2 fb ff ff       	call   c00137bc <schedule()>
c0013bca:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0013bcf:	83 c4 10             	add    esp,0x10
c0013bd2:	48                   	dec    eax
c0013bd3:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0013bd8:	85 c0                	test   eax,eax
c0013bda:	75 d8                	jne    c0013bb4 <taskReturned+0x10>
c0013bdc:	fb                   	sti    
c0013bdd:	eb d5                	jmp    c0013bb4 <taskReturned+0x10>
c0013bdf:	90                   	nop

c0013be0 <Thr::processFromPID(int)>:
c0013be0:	57                   	push   edi
c0013be1:	56                   	push   esi
c0013be2:	53                   	push   ebx
c0013be3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013be7:	fa                   	cli    
c0013be8:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c0013bee:	83 ec 0c             	sub    esp,0xc
c0013bf1:	68 44 3e 02 c0       	push   0xc0023e44
c0013bf6:	e8 b1 8a 00 00       	call   c001c6ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013bfb:	83 c4 10             	add    esp,0x10
c0013bfe:	89 c7                	mov    edi,eax
c0013c00:	eb 16                	jmp    c0013c18 <Thr::processFromPID(int)+0x38>
c0013c02:	66 90                	xchg   ax,ax
c0013c04:	83 ec 0c             	sub    esp,0xc
c0013c07:	68 44 3e 02 c0       	push   0xc0023e44
c0013c0c:	e8 9b 8a 00 00       	call   c001c6ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c11:	83 c4 10             	add    esp,0x10
c0013c14:	39 f8                	cmp    eax,edi
c0013c16:	74 4c                	je     c0013c64 <Thr::processFromPID(int)+0x84>
c0013c18:	83 ec 0c             	sub    esp,0xc
c0013c1b:	68 44 3e 02 c0       	push   0xc0023e44
c0013c20:	e8 87 8a 00 00       	call   c001c6ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c25:	c7 04 24 44 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e44
c0013c2c:	89 c3                	mov    ebx,eax
c0013c2e:	e8 81 8a 00 00       	call   c001c6b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013c33:	58                   	pop    eax
c0013c34:	5a                   	pop    edx
c0013c35:	53                   	push   ebx
c0013c36:	68 44 3e 02 c0       	push   0xc0023e44
c0013c3b:	e8 2c 8b 00 00       	call   c001c76c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013c40:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c43:	83 c4 10             	add    esp,0x10
c0013c46:	39 30                	cmp    DWORD PTR [eax],esi
c0013c48:	75 ba                	jne    c0013c04 <Thr::processFromPID(int)+0x24>
c0013c4a:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0013c4f:	48                   	dec    eax
c0013c50:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0013c55:	74 09                	je     c0013c60 <Thr::processFromPID(int)+0x80>
c0013c57:	90                   	nop
c0013c58:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c5b:	5b                   	pop    ebx
c0013c5c:	5e                   	pop    esi
c0013c5d:	5f                   	pop    edi
c0013c5e:	c3                   	ret    
c0013c5f:	90                   	nop
c0013c60:	fb                   	sti    
c0013c61:	eb f5                	jmp    c0013c58 <Thr::processFromPID(int)+0x78>
c0013c63:	90                   	nop
c0013c64:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0013c69:	48                   	dec    eax
c0013c6a:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0013c6f:	75 07                	jne    c0013c78 <Thr::processFromPID(int)+0x98>
c0013c71:	fb                   	sti    
c0013c72:	5b                   	pop    ebx
c0013c73:	5e                   	pop    esi
c0013c74:	5f                   	pop    edi
c0013c75:	c3                   	ret    
c0013c76:	66 90                	xchg   ax,ax
c0013c78:	5b                   	pop    ebx
c0013c79:	31 c0                	xor    eax,eax
c0013c7b:	5e                   	pop    esi
c0013c7c:	5f                   	pop    edi
c0013c7d:	c3                   	ret    
c0013c7e:	66 90                	xchg   ax,ax

c0013c80 <unblockTask(ThreadControlBlock*)>:
c0013c80:	53                   	push   ebx
c0013c81:	83 ec 08             	sub    esp,0x8
c0013c84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c88:	fa                   	cli    
c0013c89:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c0013c8f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c92:	85 c0                	test   eax,eax
c0013c94:	74 66                	je     c0013cfc <unblockTask(ThreadControlBlock*)+0x7c>
c0013c96:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013c99:	48                   	dec    eax
c0013c9a:	74 38                	je     c0013cd4 <unblockTask(ThreadControlBlock*)+0x54>
c0013c9c:	83 ec 0c             	sub    esp,0xc
c0013c9f:	68 44 3e 02 c0       	push   0xc0023e44
c0013ca4:	e8 03 8a 00 00       	call   c001c6ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ca9:	83 c4 10             	add    esp,0x10
c0013cac:	85 c0                	test   eax,eax
c0013cae:	75 1c                	jne    c0013ccc <unblockTask(ThreadControlBlock*)+0x4c>
c0013cb0:	eb 5e                	jmp    c0013d10 <unblockTask(ThreadControlBlock*)+0x90>
c0013cb2:	66 90                	xchg   ax,ax
c0013cb4:	83 ec 08             	sub    esp,0x8
c0013cb7:	50                   	push   eax
c0013cb8:	68 44 3e 02 c0       	push   0xc0023e44
c0013cbd:	e8 9a 8d 00 00       	call   c001ca5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013cc2:	83 c4 10             	add    esp,0x10
c0013cc5:	85 c0                	test   eax,eax
c0013cc7:	74 47                	je     c0013d10 <unblockTask(ThreadControlBlock*)+0x90>
c0013cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0013ccc:	39 c3                	cmp    ebx,eax
c0013cce:	75 e4                	jne    c0013cb4 <unblockTask(ThreadControlBlock*)+0x34>
c0013cd0:	eb 12                	jmp    c0013ce4 <unblockTask(ThreadControlBlock*)+0x64>
c0013cd2:	66 90                	xchg   ax,ax
c0013cd4:	83 ec 0c             	sub    esp,0xc
c0013cd7:	68 d6 eb 01 c0       	push   0xc001ebd6
c0013cdc:	e8 07 68 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0013ce1:	83 c4 10             	add    esp,0x10
c0013ce4:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0013ce9:	48                   	dec    eax
c0013cea:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0013cef:	75 03                	jne    c0013cf4 <unblockTask(ThreadControlBlock*)+0x74>
c0013cf1:	fb                   	sti    
c0013cf2:	66 90                	xchg   ax,ax
c0013cf4:	83 c4 08             	add    esp,0x8
c0013cf7:	5b                   	pop    ebx
c0013cf8:	c3                   	ret    
c0013cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0013cfc:	83 ec 0c             	sub    esp,0xc
c0013cff:	68 bf eb 01 c0       	push   0xc001ebbf
c0013d04:	e8 df 67 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0013d09:	83 c4 10             	add    esp,0x10
c0013d0c:	eb d6                	jmp    c0013ce4 <unblockTask(ThreadControlBlock*)+0x64>
c0013d0e:	66 90                	xchg   ax,ax
c0013d10:	83 ec 08             	sub    esp,0x8
c0013d13:	53                   	push   ebx
c0013d14:	68 44 3e 02 c0       	push   0xc0023e44
c0013d19:	e8 4e 8a 00 00       	call   c001c76c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d1e:	83 c4 10             	add    esp,0x10
c0013d21:	eb c1                	jmp    c0013ce4 <unblockTask(ThreadControlBlock*)+0x64>
c0013d23:	90                   	nop

c0013d24 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013d24:	55                   	push   ebp
c0013d25:	57                   	push   edi
c0013d26:	56                   	push   esi
c0013d27:	53                   	push   ebx
c0013d28:	83 ec 1c             	sub    esp,0x1c
c0013d2b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013d2f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d32:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013d38:	85 ed                	test   ebp,ebp
c0013d3a:	7e 24                	jle    c0013d60 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013d3c:	31 f6                	xor    esi,esi
c0013d3e:	66 90                	xchg   ax,ax
c0013d40:	83 ec 0c             	sub    esp,0xc
c0013d43:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013d4a:	46                   	inc    esi
c0013d4b:	57                   	push   edi
c0013d4c:	e8 88 3a ff ff       	call   c00077d9 <free>
c0013d51:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d54:	83 c4 10             	add    esp,0x10
c0013d57:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013d5d:	7f e1                	jg     c0013d40 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013d5f:	90                   	nop
c0013d60:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013d6a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013d6f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013d72:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013d75:	d3 c0                	rol    eax,cl
c0013d77:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013d7e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013d81:	89 f7                	mov    edi,esi
c0013d83:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013d8b:	0f 85 77 01 00 00    	jne    c0013f08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013d91:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013d97:	85 ed                	test   ebp,ebp
c0013d99:	74 1d                	je     c0013db8 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013d9b:	83 ec 0c             	sub    esp,0xc
c0013d9e:	55                   	push   ebp
c0013d9f:	e8 d8 c0 ff ff       	call   c000fe7c <EnvVarContainer::~EnvVarContainer()>
c0013da4:	59                   	pop    ecx
c0013da5:	5e                   	pop    esi
c0013da6:	6a 0c                	push   0xc
c0013da8:	55                   	push   ebp
c0013da9:	e8 44 66 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c0013dae:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013db1:	83 c4 10             	add    esp,0x10
c0013db4:	89 f7                	mov    edi,esi
c0013db6:	66 90                	xchg   ax,ax
c0013db8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013dbe:	85 c0                	test   eax,eax
c0013dc0:	0f 84 b6 00 00 00    	je     c0013e7c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013dc6:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013dc9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013dcd:	31 c9                	xor    ecx,ecx
c0013dcf:	eb 17                	jmp    c0013de8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013dd1:	8d 76 00             	lea    esi,[esi+0x0]
c0013dd4:	41                   	inc    ecx
c0013dd5:	83 f9 10             	cmp    ecx,0x10
c0013dd8:	0f 84 9e 00 00 00    	je     c0013e7c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013dde:	66 90                	xchg   ax,ax
c0013de0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013de6:	66 90                	xchg   ax,ax
c0013de8:	31 d2                	xor    edx,edx
c0013dea:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013df1:	d3 fa                	sar    edx,cl
c0013df3:	83 e2 01             	and    edx,0x1
c0013df6:	74 dc                	je     c0013dd4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013df8:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013dfb:	01 d2                	add    edx,edx
c0013dfd:	01 ca                	add    edx,ecx
c0013dff:	8d 14 92             	lea    edx,[edx+edx*4]
c0013e02:	01 d0                	add    eax,edx
c0013e04:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013e0a:	83 fd 07             	cmp    ebp,0x7
c0013e0d:	75 c5                	jne    c0013dd4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e0f:	05 40 02 00 00       	add    eax,0x240
c0013e14:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013e17:	83 fd ff             	cmp    ebp,0xffffffff
c0013e1a:	0f 8c f0 00 00 00    	jl     c0013f10 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013e20:	0f 84 ae 01 00 00    	je     c0013fd4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013e26:	85 ed                	test   ebp,ebp
c0013e28:	0f 84 92 01 00 00    	je     c0013fc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013e2e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013e30:	75 a2                	jne    c0013dd4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013e32:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e38:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e3c:	01 d0                	add    eax,edx
c0013e3e:	66 90                	xchg   ax,ax
c0013e40:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013e44:	83 ec 0c             	sub    esp,0xc
c0013e47:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013e4d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e50:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013e56:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013e5d:	50                   	push   eax
c0013e5e:	e8 1d fe ff ff       	call   c0013c80 <unblockTask(ThreadControlBlock*)>
c0013e63:	83 c4 10             	add    esp,0x10
c0013e66:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e69:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013e6d:	89 f7                	mov    edi,esi
c0013e6f:	41                   	inc    ecx
c0013e70:	83 f9 10             	cmp    ecx,0x10
c0013e73:	0f 85 67 ff ff ff    	jne    c0013de0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013e79:	8d 76 00             	lea    esi,[esi+0x0]
c0013e7c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013e82:	85 c0                	test   eax,eax
c0013e84:	74 62                	je     c0013ee8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013e86:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013e8c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013e92:	74 54                	je     c0013ee8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013e94:	83 ec 0c             	sub    esp,0xc
c0013e97:	68 44 3e 02 c0       	push   0xc0023e44
c0013e9c:	e8 0b 88 00 00       	call   c001c6ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ea1:	c7 04 24 44 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e44
c0013ea8:	89 c7                	mov    edi,eax
c0013eaa:	e8 e1 87 00 00       	call   c001c690 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013eaf:	83 c4 10             	add    esp,0x10
c0013eb2:	84 c0                	test   al,al
c0013eb4:	0f 84 ce 00 00 00    	je     c0013f88 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013eba:	66 90                	xchg   ax,ax
c0013ebc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ebf:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013ec5:	85 d2                	test   edx,edx
c0013ec7:	74 0f                	je     c0013ed8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013ec9:	83 ec 0c             	sub    esp,0xc
c0013ecc:	8b 02                	mov    eax,DWORD PTR [edx]
c0013ece:	52                   	push   edx
c0013ecf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ed2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ed5:	83 c4 10             	add    esp,0x10
c0013ed8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013ee2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ee8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013eee:	85 db                	test   ebx,ebx
c0013ef0:	74 16                	je     c0013f08 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013ef2:	83 ec 0c             	sub    esp,0xc
c0013ef5:	53                   	push   ebx
c0013ef6:	e8 cb 58 ff ff       	call   c00097c6 <VAS::~VAS()>
c0013efb:	58                   	pop    eax
c0013efc:	5a                   	pop    edx
c0013efd:	6a 14                	push   0x14
c0013eff:	53                   	push   ebx
c0013f00:	e8 ed 64 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c0013f05:	83 c4 10             	add    esp,0x10
c0013f08:	83 c4 1c             	add    esp,0x1c
c0013f0b:	5b                   	pop    ebx
c0013f0c:	5e                   	pop    esi
c0013f0d:	5f                   	pop    edi
c0013f0e:	5d                   	pop    ebp
c0013f0f:	c3                   	ret    
c0013f10:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f14:	83 ec 0c             	sub    esp,0xc
c0013f17:	68 88 ec 01 c0       	push   0xc001ec88
c0013f1c:	e8 4a c2 ff ff       	call   c001016b <KePanic(char const*)>
c0013f21:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f24:	83 c4 10             	add    esp,0x10
c0013f27:	89 f7                	mov    edi,esi
c0013f29:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f2d:	e9 a2 fe ff ff       	jmp    c0013dd4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013f32:	66 90                	xchg   ax,ax
c0013f34:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013f3a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013f40:	75 1e                	jne    c0013f60 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013f42:	83 ec 0c             	sub    esp,0xc
c0013f45:	68 f0 ec 01 c0       	push   0xc001ecf0
c0013f4a:	e8 99 65 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0013f4f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013f56:	e8 5d fa ff ff       	call   c00139b8 <blockTask(TaskState)>
c0013f5b:	83 c4 10             	add    esp,0x10
c0013f5e:	66 90                	xchg   ax,ax
c0013f60:	83 ec 08             	sub    esp,0x8
c0013f63:	56                   	push   esi
c0013f64:	68 44 3e 02 c0       	push   0xc0023e44
c0013f69:	e8 fe 87 00 00       	call   c001c76c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f6e:	c7 04 24 44 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e44
c0013f75:	e8 32 87 00 00       	call   c001c6ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f7a:	83 c4 10             	add    esp,0x10
c0013f7d:	39 f8                	cmp    eax,edi
c0013f7f:	0f 84 37 ff ff ff    	je     c0013ebc <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013f85:	8d 76 00             	lea    esi,[esi+0x0]
c0013f88:	83 ec 0c             	sub    esp,0xc
c0013f8b:	68 44 3e 02 c0       	push   0xc0023e44
c0013f90:	e8 17 87 00 00       	call   c001c6ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f95:	c7 04 24 44 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e44
c0013f9c:	89 c6                	mov    esi,eax
c0013f9e:	e8 11 87 00 00       	call   c001c6b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013fa3:	83 c4 10             	add    esp,0x10
c0013fa6:	39 f3                	cmp    ebx,esi
c0013fa8:	74 b6                	je     c0013f60 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013faa:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013fad:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fb0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013fb6:	75 a8                	jne    c0013f60 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013fb8:	e9 77 ff ff ff       	jmp    c0013f34 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0013fc0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fc4:	83 ec 0c             	sub    esp,0xc
c0013fc7:	68 bc ec 01 c0       	push   0xc001ecbc
c0013fcc:	e9 4b ff ff ff       	jmp    c0013f1c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0013fd4:	8b 36                	mov    esi,DWORD PTR [esi]
c0013fd6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fda:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013fdd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013fe0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013fe6:	01 d7                	add    edi,edx
c0013fe8:	89 f8                	mov    eax,edi
c0013fea:	e9 51 fe ff ff       	jmp    c0013e40 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013fef:	90                   	nop

c0013ff0 <cleanerTaskFunction(void*)>:
c0013ff0:	53                   	push   ebx
c0013ff1:	83 ec 08             	sub    esp,0x8
c0013ff4:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0013ff9:	48                   	dec    eax
c0013ffa:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0013fff:	75 03                	jne    c0014004 <cleanerTaskFunction(void*)+0x14>
c0014001:	fb                   	sti    
c0014002:	66 90                	xchg   ax,ax
c0014004:	fa                   	cli    
c0014005:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c001400a:	80 3d 0c 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e0c,0x0
c0014011:	8d 50 01             	lea    edx,[eax+0x1]
c0014014:	89 15 28 3e 02 c0    	mov    DWORD PTR ds:0xc0023e28,edx
c001401a:	0f 84 ac 00 00 00    	je     c00140cc <cleanerTaskFunction(void*)+0xdc>
c0014020:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0014025:	85 c0                	test   eax,eax
c0014027:	75 03                	jne    c001402c <cleanerTaskFunction(void*)+0x3c>
c0014029:	fb                   	sti    
c001402a:	66 90                	xchg   ax,ax
c001402c:	c6 05 0c 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e0c,0x0
c0014033:	fa                   	cli    
c0014034:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c001403a:	ff 05 24 3e 02 c0    	inc    DWORD PTR ds:0xc0023e24
c0014040:	fa                   	cli    
c0014041:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c0014047:	eb 2b                	jmp    c0014074 <cleanerTaskFunction(void*)+0x84>
c0014049:	8d 76 00             	lea    esi,[esi+0x0]
c001404c:	83 ec 0c             	sub    esp,0xc
c001404f:	68 2c 3e 02 c0       	push   0xc0023e2c
c0014054:	e8 53 86 00 00       	call   c001c6ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014059:	c7 04 24 2c 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e2c
c0014060:	89 c3                	mov    ebx,eax
c0014062:	e8 4d 86 00 00       	call   c001c6b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014067:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001406a:	e8 b5 fc ff ff       	call   c0013d24 <cleanupTerminatedTask(ThreadControlBlock*)>
c001406f:	83 c4 10             	add    esp,0x10
c0014072:	66 90                	xchg   ax,ax
c0014074:	83 ec 0c             	sub    esp,0xc
c0014077:	68 2c 3e 02 c0       	push   0xc0023e2c
c001407c:	e8 0f 86 00 00       	call   c001c690 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014081:	83 c4 10             	add    esp,0x10
c0014084:	84 c0                	test   al,al
c0014086:	74 c4                	je     c001404c <cleanerTaskFunction(void*)+0x5c>
c0014088:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c001408d:	48                   	dec    eax
c001408e:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0014093:	75 03                	jne    c0014098 <cleanerTaskFunction(void*)+0xa8>
c0014095:	fb                   	sti    
c0014096:	66 90                	xchg   ax,ax
c0014098:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c001409d:	48                   	dec    eax
c001409e:	a3 24 3e 02 c0       	mov    ds:0xc0023e24,eax
c00140a3:	0f 85 4b ff ff ff    	jne    c0013ff4 <cleanerTaskFunction(void*)+0x4>
c00140a9:	a1 20 3e 02 c0       	mov    eax,ds:0xc0023e20
c00140ae:	85 c0                	test   eax,eax
c00140b0:	0f 84 3e ff ff ff    	je     c0013ff4 <cleanerTaskFunction(void*)+0x4>
c00140b6:	c7 05 20 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e20,0x0
c00140c0:	e8 f7 f6 ff ff       	call   c00137bc <schedule()>
c00140c5:	e9 2a ff ff ff       	jmp    c0013ff4 <cleanerTaskFunction(void*)+0x4>
c00140ca:	66 90                	xchg   ax,ax
c00140cc:	83 ec 0c             	sub    esp,0xc
c00140cf:	6a 02                	push   0x2
c00140d1:	e8 ba f8 ff ff       	call   c0013990 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00140d6:	83 c4 10             	add    esp,0x10
c00140d9:	e9 4e ff ff ff       	jmp    c001402c <cleanerTaskFunction(void*)+0x3c>
c00140de:	66 90                	xchg   ax,ax

c00140e0 <terminateTask(int)>:
c00140e0:	83 ec 14             	sub    esp,0x14
c00140e3:	fa                   	cli    
c00140e4:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c00140ea:	ff 05 24 3e 02 c0    	inc    DWORD PTR ds:0xc0023e24
c00140f0:	fa                   	cli    
c00140f1:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c00140f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00140fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014100:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0014103:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014108:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001410b:	50                   	push   eax
c001410c:	68 2c 3e 02 c0       	push   0xc0023e2c
c0014111:	e8 56 86 00 00       	call   c001c76c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014116:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001411b:	83 c4 10             	add    esp,0x10
c001411e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0014125:	a1 08 3e 02 c0       	mov    eax,ds:0xc0023e08
c001412a:	85 c0                	test   eax,eax
c001412c:	74 5e                	je     c001418c <terminateTask(int)+0xac>
c001412e:	83 ec 0c             	sub    esp,0xc
c0014131:	c6 05 0c 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e0c,0x1
c0014138:	50                   	push   eax
c0014139:	e8 42 fb ff ff       	call   c0013c80 <unblockTask(ThreadControlBlock*)>
c001413e:	83 c4 10             	add    esp,0x10
c0014141:	8d 76 00             	lea    esi,[esi+0x0]
c0014144:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0014149:	48                   	dec    eax
c001414a:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c001414f:	75 03                	jne    c0014154 <terminateTask(int)+0x74>
c0014151:	fb                   	sti    
c0014152:	66 90                	xchg   ax,ax
c0014154:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c0014159:	48                   	dec    eax
c001415a:	a3 24 3e 02 c0       	mov    ds:0xc0023e24,eax
c001415f:	75 0b                	jne    c001416c <terminateTask(int)+0x8c>
c0014161:	83 3d 20 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023e20,0x0
c0014168:	75 36                	jne    c00141a0 <terminateTask(int)+0xc0>
c001416a:	66 90                	xchg   ax,ax
c001416c:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0014171:	48                   	dec    eax
c0014172:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0014177:	75 03                	jne    c001417c <terminateTask(int)+0x9c>
c0014179:	fb                   	sti    
c001417a:	66 90                	xchg   ax,ax
c001417c:	fa                   	cli    
c001417d:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c0014183:	90                   	nop
c0014184:	e8 33 f6 ff ff       	call   c00137bc <schedule()>
c0014189:	eb e1                	jmp    c001416c <terminateTask(int)+0x8c>
c001418b:	90                   	nop
c001418c:	83 ec 0c             	sub    esp,0xc
c001418f:	68 ed eb 01 c0       	push   0xc001ebed
c0014194:	e8 4f 63 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0014199:	83 c4 10             	add    esp,0x10
c001419c:	eb a6                	jmp    c0014144 <terminateTask(int)+0x64>
c001419e:	66 90                	xchg   ax,ax
c00141a0:	c7 05 20 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e20,0x0
c00141aa:	eb d8                	jmp    c0014184 <terminateTask(int)+0xa4>

c00141ac <Thr::terminateFromIRQ(int)>:
c00141ac:	83 ec 18             	sub    esp,0x18
c00141af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141b3:	50                   	push   eax
c00141b4:	e8 27 ff ff ff       	call   c00140e0 <terminateTask(int)>
c00141b9:	90                   	nop
c00141ba:	66 90                	xchg   ax,ax

c00141bc <Semaphore::release()>:
c00141bc:	83 ec 0c             	sub    esp,0xc
c00141bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141c3:	fa                   	cli    
c00141c4:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c00141c9:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c00141cf:	8d 48 01             	lea    ecx,[eax+0x1]
c00141d2:	89 0d 24 3e 02 c0    	mov    DWORD PTR ds:0xc0023e24,ecx
c00141d8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00141db:	85 c9                	test   ecx,ecx
c00141dd:	74 41                	je     c0014220 <Semaphore::release()+0x64>
c00141df:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00141e2:	83 ec 0c             	sub    esp,0xc
c00141e5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00141e8:	51                   	push   ecx
c00141e9:	e8 92 fa ff ff       	call   c0013c80 <unblockTask(ThreadControlBlock*)>
c00141ee:	a1 24 3e 02 c0       	mov    eax,ds:0xc0023e24
c00141f3:	83 c4 10             	add    esp,0x10
c00141f6:	48                   	dec    eax
c00141f7:	90                   	nop
c00141f8:	a3 24 3e 02 c0       	mov    ds:0xc0023e24,eax
c00141fd:	85 c0                	test   eax,eax
c00141ff:	75 0b                	jne    c001420c <Semaphore::release()+0x50>
c0014201:	a1 20 3e 02 c0       	mov    eax,ds:0xc0023e20
c0014206:	85 c0                	test   eax,eax
c0014208:	75 1e                	jne    c0014228 <Semaphore::release()+0x6c>
c001420a:	66 90                	xchg   ax,ax
c001420c:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0014211:	48                   	dec    eax
c0014212:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0014217:	75 03                	jne    c001421c <Semaphore::release()+0x60>
c0014219:	fb                   	sti    
c001421a:	66 90                	xchg   ax,ax
c001421c:	83 c4 0c             	add    esp,0xc
c001421f:	c3                   	ret    
c0014220:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0014223:	eb d3                	jmp    c00141f8 <Semaphore::release()+0x3c>
c0014225:	8d 76 00             	lea    esi,[esi+0x0]
c0014228:	c7 05 20 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e20,0x0
c0014232:	e8 85 f5 ff ff       	call   c00137bc <schedule()>
c0014237:	eb d3                	jmp    c001420c <Semaphore::release()+0x50>
c0014239:	8d 76 00             	lea    esi,[esi+0x0]

c001423c <__static_initialization_and_destruction_0(int, int)>:
c001423c:	83 ec 0c             	sub    esp,0xc
c001423f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014244:	0f 85 8e 00 00 00    	jne    c00142d8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001424a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0014252:	0f 85 80 00 00 00    	jne    c00142d8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014258:	83 ec 0c             	sub    esp,0xc
c001425b:	68 44 3e 02 c0       	push   0xc0023e44
c0014260:	e8 b3 87 00 00       	call   c001ca18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014265:	83 c4 10             	add    esp,0x10
c0014268:	83 ec 04             	sub    esp,0x4
c001426b:	68 a0 f7 01 c0       	push   0xc001f7a0
c0014270:	68 44 3e 02 c0       	push   0xc0023e44
c0014275:	68 c8 c9 01 c0       	push   0xc001c9c8
c001427a:	e8 23 61 ff ff       	call   c000a3a2 <__cxa_atexit>
c001427f:	83 c4 10             	add    esp,0x10
c0014282:	83 ec 0c             	sub    esp,0xc
c0014285:	68 38 3e 02 c0       	push   0xc0023e38
c001428a:	e8 89 87 00 00       	call   c001ca18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001428f:	83 c4 10             	add    esp,0x10
c0014292:	83 ec 04             	sub    esp,0x4
c0014295:	68 a0 f7 01 c0       	push   0xc001f7a0
c001429a:	68 38 3e 02 c0       	push   0xc0023e38
c001429f:	68 c8 c9 01 c0       	push   0xc001c9c8
c00142a4:	e8 f9 60 ff ff       	call   c000a3a2 <__cxa_atexit>
c00142a9:	83 c4 10             	add    esp,0x10
c00142ac:	83 ec 0c             	sub    esp,0xc
c00142af:	68 2c 3e 02 c0       	push   0xc0023e2c
c00142b4:	e8 5f 87 00 00       	call   c001ca18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00142b9:	83 c4 10             	add    esp,0x10
c00142bc:	83 ec 04             	sub    esp,0x4
c00142bf:	68 a0 f7 01 c0       	push   0xc001f7a0
c00142c4:	68 2c 3e 02 c0       	push   0xc0023e2c
c00142c9:	68 c8 c9 01 c0       	push   0xc001c9c8
c00142ce:	e8 cf 60 ff ff       	call   c000a3a2 <__cxa_atexit>
c00142d3:	83 c4 10             	add    esp,0x10
c00142d6:	66 90                	xchg   ax,ax
c00142d8:	90                   	nop
c00142d9:	83 c4 0c             	add    esp,0xc
c00142dc:	c3                   	ret    
c00142dd:	8d 76 00             	lea    esi,[esi+0x0]

c00142e0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00142e0:	83 ec 0c             	sub    esp,0xc
c00142e3:	83 ec 08             	sub    esp,0x8
c00142e6:	68 ff ff 00 00       	push   0xffff
c00142eb:	6a 01                	push   0x1
c00142ed:	e8 4a ff ff ff       	call   c001423c <__static_initialization_and_destruction_0(int, int)>
c00142f2:	83 c4 10             	add    esp,0x10
c00142f5:	83 c4 0c             	add    esp,0xc
c00142f8:	c3                   	ret    

c00142f9 <Vm::inbv(unsigned short)>:
c00142f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00142fd:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014302:	75 06                	jne    c001430a <Vm::inbv(unsigned short)+0x11>
c0014304:	a0 8c 3e 02 c0       	mov    al,ds:0xc0023e8c
c0014309:	c3                   	ret    
c001430a:	ec                   	in     al,dx
c001430b:	c3                   	ret    

c001430c <Vm::outbv(unsigned short, unsigned char)>:
c001430c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014310:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014314:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014319:	75 25                	jne    c0014340 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001431b:	8b 0d 8c 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e8c
c0014321:	8d 51 01             	lea    edx,[ecx+0x1]
c0014324:	88 81 a0 3e 02 c0    	mov    BYTE PTR [ecx-0x3ffdc160],al
c001432a:	89 15 8c 3e 02 c0    	mov    DWORD PTR ds:0xc0023e8c,edx
c0014330:	83 fa 20             	cmp    edx,0x20
c0014333:	75 0c                	jne    c0014341 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014335:	c7 05 8c 3e 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0023e8c,0x1f
c001433f:	c3                   	ret    
c0014340:	ee                   	out    dx,al
c0014341:	c3                   	ret    

c0014342 <Vm::realToLinear(unsigned short, unsigned short)>:
c0014342:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014347:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001434c:	c1 e0 04             	shl    eax,0x4
c001434f:	01 d0                	add    eax,edx
c0014351:	c3                   	ret    

c0014352 <Vm::getSegment(unsigned int)>:
c0014352:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014356:	c1 e8 10             	shr    eax,0x10
c0014359:	c3                   	ret    

c001435a <Vm::getOffset(unsigned int)>:
c001435a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001435e:	c3                   	ret    

c001435f <Vm::mainloop2()>:
c001435f:	83 ec 18             	sub    esp,0x18
c0014362:	fa                   	cli    
c0014363:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c0014369:	6a 02                	push   0x2
c001436b:	c6 05 85 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e85,0x1
c0014372:	e8 19 f6 ff ff       	call   c0013990 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014377:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001437c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014380:	52                   	push   edx
c0014381:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0014385:	52                   	push   edx
c0014386:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001438a:	52                   	push   edx
c001438b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001438f:	50                   	push   eax
c0014390:	e8 7a be fe ff       	call   c000020f <goToVM86>
c0014395:	83 c4 2c             	add    esp,0x2c
c0014398:	c3                   	ret    

c0014399 <Vm::mainVm8086Loop(void*)>:
c0014399:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c001439e:	48                   	dec    eax
c001439f:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c00143a4:	75 01                	jne    c00143a7 <Vm::mainVm8086Loop(void*)+0xe>
c00143a6:	fb                   	sti    
c00143a7:	eb b6                	jmp    c001435f <Vm::mainloop2()>

c00143a9 <Vm::mainloop3(unsigned long)>:
c00143a9:	83 ec 18             	sub    esp,0x18
c00143ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00143b0:	fa                   	cli    
c00143b1:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c00143b7:	6a 02                	push   0x2
c00143b9:	c6 05 84 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023e84,0x1
c00143c0:	a3 80 3e 02 c0       	mov    ds:0xc0023e80,eax
c00143c5:	e8 c6 f5 ff ff       	call   c0013990 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00143ca:	83 c4 1c             	add    esp,0x1c
c00143cd:	eb 90                	jmp    c001435f <Vm::mainloop2()>

c00143cf <Vm::initialise8086()>:
c00143cf:	83 ec 0c             	sub    esp,0xc
c00143d2:	68 80 00 00 00       	push   0x80
c00143d7:	6a 00                	push   0x0
c00143d9:	68 99 43 01 c0       	push   0xc0014399
c00143de:	ff 35 50 3e 02 c0    	push   DWORD PTR ds:0xc0023e50
c00143e4:	e8 b3 f1 ff ff       	call   c001359c <Process::createThread(void (*)(void*), void*, int)>
c00143e9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00143f0:	a3 88 3e 02 c0       	mov    ds:0xc0023e88,eax
c00143f5:	68 00 01 00 00       	push   0x100
c00143fa:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c00143ff:	6a 00                	push   0x0
c0014401:	6a 00                	push   0x0
c0014403:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014409:	e8 16 58 ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001440e:	83 c4 2c             	add    esp,0x2c
c0014411:	c3                   	ret    

c0014412 <Vm::finish8086()>:
c0014412:	53                   	push   ebx
c0014413:	83 ec 08             	sub    esp,0x8
c0014416:	fa                   	cli    
c0014417:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c001441d:	80 3d 84 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e84,0x0
c0014424:	75 15                	jne    c001443b <Vm::finish8086()+0x29>
c0014426:	e8 91 f3 ff ff       	call   c00137bc <schedule()>
c001442b:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0014430:	48                   	dec    eax
c0014431:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0014436:	75 de                	jne    c0014416 <Vm::finish8086()+0x4>
c0014438:	fb                   	sti    
c0014439:	eb db                	jmp    c0014416 <Vm::finish8086()+0x4>
c001443b:	83 ec 0c             	sub    esp,0xc
c001443e:	8b 1d 80 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023e80
c0014444:	ff 35 88 3e 02 c0    	push   DWORD PTR ds:0xc0023e88
c001444a:	c6 05 84 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e84,0x0
c0014451:	e8 2a f8 ff ff       	call   c0013c80 <unblockTask(ThreadControlBlock*)>
c0014456:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c001445b:	83 c4 10             	add    esp,0x10
c001445e:	8d 50 ff             	lea    edx,[eax-0x1]
c0014461:	89 15 28 3e 02 c0    	mov    DWORD PTR ds:0xc0023e28,edx
c0014467:	85 d2                	test   edx,edx
c0014469:	75 01                	jne    c001446c <Vm::finish8086()+0x5a>
c001446b:	fb                   	sti    
c001446c:	89 d8                	mov    eax,ebx
c001446e:	83 c4 08             	add    esp,0x8
c0014471:	5b                   	pop    ebx
c0014472:	c3                   	ret    

c0014473 <Vm::getOutput8086(unsigned char*)>:
c0014473:	57                   	push   edi
c0014474:	8b 0d 8c 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023e8c
c001447a:	56                   	push   esi
c001447b:	be a0 3e 02 c0       	mov    esi,0xc0023ea0
c0014480:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014484:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014486:	a1 8c 3e 02 c0       	mov    eax,ds:0xc0023e8c
c001448b:	5e                   	pop    esi
c001448c:	c7 05 8c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e8c,0x0
c0014496:	5f                   	pop    edi
c0014497:	c3                   	ret    

c0014498 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014498:	55                   	push   ebp
c0014499:	57                   	push   edi
c001449a:	56                   	push   esi
c001449b:	53                   	push   ebx
c001449c:	83 ec 0c             	sub    esp,0xc
c001449f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00144a3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00144a7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00144ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00144af:	fa                   	cli    
c00144b0:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c00144b6:	80 3d 85 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023e85,0x0
c00144bd:	75 15                	jne    c00144d4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00144bf:	e8 f8 f2 ff ff       	call   c00137bc <schedule()>
c00144c4:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c00144c9:	48                   	dec    eax
c00144ca:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c00144cf:	75 de                	jne    c00144af <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00144d1:	fb                   	sti    
c00144d2:	eb db                	jmp    c00144af <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00144d4:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c00144d9:	c7 05 8c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e8c,0x0
c00144e3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00144e7:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00144eb:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00144ef:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00144f3:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00144f7:	0f b7 ff             	movzx  edi,di
c00144fa:	0f b7 f6             	movzx  esi,si
c00144fd:	50                   	push   eax
c00144fe:	6a 20                	push   0x20
c0014500:	6a 00                	push   0x0
c0014502:	68 a0 3e 02 c0       	push   0xc0023ea0
c0014507:	e8 d4 bf fe ff       	call   c00004e0 <memset>
c001450c:	5a                   	pop    edx
c001450d:	59                   	pop    ecx
c001450e:	57                   	push   edi
c001450f:	56                   	push   esi
c0014510:	e8 2d fe ff ff       	call   c0014342 <Vm::realToLinear(unsigned short, unsigned short)>
c0014515:	83 c4 10             	add    esp,0x10
c0014518:	89 c7                	mov    edi,eax
c001451a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001451e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014522:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014524:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0014529:	c6 05 85 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e85,0x0
c0014530:	48                   	dec    eax
c0014531:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0014536:	75 01                	jne    c0014539 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014538:	fb                   	sti    
c0014539:	83 ec 0c             	sub    esp,0xc
c001453c:	ff 35 88 3e 02 c0    	push   DWORD PTR ds:0xc0023e88
c0014542:	e8 39 f7 ff ff       	call   c0013c80 <unblockTask(ThreadControlBlock*)>
c0014547:	83 c4 1c             	add    esp,0x1c
c001454a:	b0 01                	mov    al,0x1
c001454c:	5b                   	pop    ebx
c001454d:	5e                   	pop    esi
c001454e:	5f                   	pop    edi
c001454f:	5d                   	pop    ebp
c0014550:	c3                   	ret    

c0014551 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014551:	55                   	push   ebp
c0014552:	57                   	push   edi
c0014553:	56                   	push   esi
c0014554:	53                   	push   ebx
c0014555:	83 ec 2c             	sub    esp,0x2c
c0014558:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001455c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014560:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014564:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014568:	fa                   	cli    
c0014569:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c001456f:	0f b6 35 85 3e 02 c0 	movzx  esi,BYTE PTR ds:0xc0023e85
c0014576:	89 f0                	mov    eax,esi
c0014578:	84 c0                	test   al,al
c001457a:	75 1d                	jne    c0014599 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001457c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014580:	e8 37 f2 ff ff       	call   c00137bc <schedule()>
c0014585:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c001458a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001458e:	48                   	dec    eax
c001458f:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0014594:	75 d2                	jne    c0014568 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014596:	fb                   	sti    
c0014597:	eb cf                	jmp    c0014568 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014599:	a1 88 3e 02 c0       	mov    eax,ds:0xc0023e88
c001459e:	c7 05 8c 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023e8c,0x0
c00145a8:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00145ac:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00145b0:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00145b4:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00145b8:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00145bc:	50                   	push   eax
c00145bd:	6a 20                	push   0x20
c00145bf:	6a 00                	push   0x0
c00145c1:	68 a0 3e 02 c0       	push   0xc0023ea0
c00145c6:	e8 15 bf fe ff       	call   c00004e0 <memset>
c00145cb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00145d2:	e8 f2 31 ff ff       	call   c00077c9 <malloc>
c00145d7:	83 c4 0c             	add    esp,0xc
c00145da:	89 c3                	mov    ebx,eax
c00145dc:	ff 35 50 3e 02 c0    	push   DWORD PTR ds:0xc0023e50
c00145e2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00145e6:	50                   	push   eax
c00145e7:	e8 72 64 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c00145ec:	83 c4 10             	add    esp,0x10
c00145ef:	85 db                	test   ebx,ebx
c00145f1:	75 0a                	jne    c00145fd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00145f3:	83 ec 0c             	sub    esp,0xc
c00145f6:	68 18 ed 01 c0       	push   0xc001ed18
c00145fb:	eb 3e                	jmp    c001463b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00145fd:	50                   	push   eax
c00145fe:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014602:	50                   	push   eax
c0014603:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014607:	50                   	push   eax
c0014608:	53                   	push   ebx
c0014609:	e8 bc 67 ff ff       	call   c000adca <File::stat(unsigned long long*, bool*)>
c001460e:	83 c4 10             	add    esp,0x10
c0014611:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014616:	74 0a                	je     c0014622 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014618:	83 ec 0c             	sub    esp,0xc
c001461b:	68 2c ed 01 c0       	push   0xc001ed2c
c0014620:	eb 19                	jmp    c001463b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014622:	51                   	push   ecx
c0014623:	51                   	push   ecx
c0014624:	6a 01                	push   0x1
c0014626:	53                   	push   ebx
c0014627:	e8 f2 64 ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c001462c:	83 c4 10             	add    esp,0x10
c001462f:	85 c0                	test   eax,eax
c0014631:	74 24                	je     c0014657 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014633:	83 ec 0c             	sub    esp,0xc
c0014636:	68 45 ed 01 c0       	push   0xc001ed45
c001463b:	e8 2b bb ff ff       	call   c001016b <KePanic(char const*)>
c0014640:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0014645:	83 c4 10             	add    esp,0x10
c0014648:	48                   	dec    eax
c0014649:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c001464e:	85 c0                	test   eax,eax
c0014650:	75 01                	jne    c0014653 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0014652:	fb                   	sti    
c0014653:	31 f6                	xor    esi,esi
c0014655:	eb 58                	jmp    c00146af <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0014657:	0f b7 ed             	movzx  ebp,bp
c001465a:	50                   	push   eax
c001465b:	0f b7 ff             	movzx  edi,di
c001465e:	50                   	push   eax
c001465f:	55                   	push   ebp
c0014660:	57                   	push   edi
c0014661:	e8 dc fc ff ff       	call   c0014342 <Vm::realToLinear(unsigned short, unsigned short)>
c0014666:	5a                   	pop    edx
c0014667:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014669:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001466d:	51                   	push   ecx
c001466e:	50                   	push   eax
c001466f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014673:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014677:	53                   	push   ebx
c0014678:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001467b:	83 c4 14             	add    esp,0x14
c001467e:	53                   	push   ebx
c001467f:	e8 f8 64 ff ff       	call   c000ab7c <File::close()>
c0014684:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0014689:	83 c4 10             	add    esp,0x10
c001468c:	48                   	dec    eax
c001468d:	c6 05 85 3e 02 c0 00 	mov    BYTE PTR ds:0xc0023e85,0x0
c0014694:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0014699:	85 c0                	test   eax,eax
c001469b:	75 01                	jne    c001469e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001469d:	fb                   	sti    
c001469e:	83 ec 0c             	sub    esp,0xc
c00146a1:	ff 35 88 3e 02 c0    	push   DWORD PTR ds:0xc0023e88
c00146a7:	e8 d4 f5 ff ff       	call   c0013c80 <unblockTask(ThreadControlBlock*)>
c00146ac:	83 c4 10             	add    esp,0x10
c00146af:	83 c4 2c             	add    esp,0x2c
c00146b2:	89 f0                	mov    eax,esi
c00146b4:	5b                   	pop    ebx
c00146b5:	5e                   	pop    esi
c00146b6:	5f                   	pop    edi
c00146b7:	5d                   	pop    ebp
c00146b8:	c3                   	ret    

c00146b9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00146b9:	57                   	push   edi
c00146ba:	56                   	push   esi
c00146bb:	53                   	push   ebx
c00146bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00146c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00146c8:	83 e8 06             	sub    eax,0x6
c00146cb:	0f b7 c0             	movzx  eax,ax
c00146ce:	50                   	push   eax
c00146cf:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00146d4:	50                   	push   eax
c00146d5:	e8 68 fc ff ff       	call   c0014342 <Vm::realToLinear(unsigned short, unsigned short)>
c00146da:	5a                   	pop    edx
c00146db:	5e                   	pop    esi
c00146dc:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00146df:	8d 56 fa             	lea    edx,[esi-0x6]
c00146e2:	81 e2 ff ff 00 00    	and    edx,0xffff
c00146e8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00146eb:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00146ee:	83 c2 02             	add    edx,0x2
c00146f1:	66 89 10             	mov    WORD PTR [eax],dx
c00146f4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00146f7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00146fb:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00146fe:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014702:	89 d6                	mov    esi,edx
c0014704:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001470a:	66 81 e6 ff fd       	and    si,0xfdff
c001470f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014713:	74 07                	je     c001471c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014715:	89 d6                	mov    esi,edx
c0014717:	66 81 ce 00 02       	or     si,0x200
c001471c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014720:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014725:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014729:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014731:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014734:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001473c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001473f:	5b                   	pop    ebx
c0014740:	5e                   	pop    esi
c0014741:	5f                   	pop    edi
c0014742:	c3                   	ret    

c0014743 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014743:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014748:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001474d:	c1 e0 04             	shl    eax,0x4
c0014750:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014753:	c3                   	ret    

c0014754 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014754:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014759:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001475e:	c1 e0 04             	shl    eax,0x4
c0014761:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014765:	c3                   	ret    

c0014766 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0014766:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001476b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014770:	c1 e0 04             	shl    eax,0x4
c0014773:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014776:	c3                   	ret    

c0014777 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014777:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001477c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014781:	c1 e0 04             	shl    eax,0x4
c0014784:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014788:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001478b:	c3                   	ret    

c001478c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001478c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014791:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014796:	c1 e0 04             	shl    eax,0x4
c0014799:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001479d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00147a1:	c3                   	ret    

c00147a2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00147a2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147a7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147ac:	c1 e0 04             	shl    eax,0x4
c00147af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147b3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00147b6:	c3                   	ret    

c00147b7 <Vm::faultHandler(regs*)>:
c00147b7:	55                   	push   ebp
c00147b8:	57                   	push   edi
c00147b9:	56                   	push   esi
c00147ba:	53                   	push   ebx
c00147bb:	83 ec 1c             	sub    esp,0x1c
c00147be:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00147c2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00147c5:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00147c9:	0f b7 f8             	movzx  edi,ax
c00147cc:	52                   	push   edx
c00147cd:	0f b7 c0             	movzx  eax,ax
c00147d0:	50                   	push   eax
c00147d1:	e8 6c fb ff ff       	call   c0014342 <Vm::realToLinear(unsigned short, unsigned short)>
c00147d6:	5a                   	pop    edx
c00147d7:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00147da:	59                   	pop    ecx
c00147db:	89 c1                	mov    ecx,eax
c00147dd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00147e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147e4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00147ed:	0f b7 c5             	movzx  eax,bp
c00147f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147f4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00147f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147fc:	e8 41 fb ff ff       	call   c0014342 <Vm::realToLinear(unsigned short, unsigned short)>
c0014801:	5e                   	pop    esi
c0014802:	be 06 00 00 00       	mov    esi,0x6
c0014807:	5a                   	pop    edx
c0014808:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001480d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014812:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014815:	80 fa 9d             	cmp    dl,0x9d
c0014818:	0f 84 2c 02 00 00    	je     c0014a4a <Vm::faultHandler(regs*)+0x293>
c001481e:	0f 87 91 00 00 00    	ja     c00148b5 <Vm::faultHandler(regs*)+0xfe>
c0014824:	80 fa 66             	cmp    dl,0x66
c0014827:	0f 84 98 01 00 00    	je     c00149c5 <Vm::faultHandler(regs*)+0x20e>
c001482d:	77 47                	ja     c0014876 <Vm::faultHandler(regs*)+0xbf>
c001482f:	80 fa 36             	cmp    dl,0x36
c0014832:	0f 84 80 01 00 00    	je     c00149b8 <Vm::faultHandler(regs*)+0x201>
c0014838:	77 1a                	ja     c0014854 <Vm::faultHandler(regs*)+0x9d>
c001483a:	80 fa 26             	cmp    dl,0x26
c001483d:	0f 84 4e 01 00 00    	je     c0014991 <Vm::faultHandler(regs*)+0x1da>
c0014843:	80 fa 2e             	cmp    dl,0x2e
c0014846:	0f 85 e2 05 00 00    	jne    c0014e2e <Vm::faultHandler(regs*)+0x677>
c001484c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001484f:	31 f6                	xor    esi,esi
c0014851:	41                   	inc    ecx
c0014852:	eb be                	jmp    c0014812 <Vm::faultHandler(regs*)+0x5b>
c0014854:	80 fa 64             	cmp    dl,0x64
c0014857:	0f 84 41 01 00 00    	je     c001499e <Vm::faultHandler(regs*)+0x1e7>
c001485d:	0f 87 48 01 00 00    	ja     c00149ab <Vm::faultHandler(regs*)+0x1f4>
c0014863:	80 fa 3e             	cmp    dl,0x3e
c0014866:	0f 85 c2 05 00 00    	jne    c0014e2e <Vm::faultHandler(regs*)+0x677>
c001486c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001486f:	be 01 00 00 00       	mov    esi,0x1
c0014874:	eb db                	jmp    c0014851 <Vm::faultHandler(regs*)+0x9a>
c0014876:	80 fa 6d             	cmp    dl,0x6d
c0014879:	0f 84 ec 02 00 00    	je     c0014b6b <Vm::faultHandler(regs*)+0x3b4>
c001487f:	77 17                	ja     c0014898 <Vm::faultHandler(regs*)+0xe1>
c0014881:	80 fa 67             	cmp    dl,0x67
c0014884:	0f 84 48 01 00 00    	je     c00149d2 <Vm::faultHandler(regs*)+0x21b>
c001488a:	80 fa 6c             	cmp    dl,0x6c
c001488d:	0f 84 69 02 00 00    	je     c0014afc <Vm::faultHandler(regs*)+0x345>
c0014893:	e9 96 05 00 00       	jmp    c0014e2e <Vm::faultHandler(regs*)+0x677>
c0014898:	80 fa 6f             	cmp    dl,0x6f
c001489b:	0f 84 f4 03 00 00    	je     c0014c95 <Vm::faultHandler(regs*)+0x4de>
c00148a1:	0f 82 59 03 00 00    	jb     c0014c00 <Vm::faultHandler(regs*)+0x449>
c00148a7:	80 fa 9c             	cmp    dl,0x9c
c00148aa:	0f 84 2f 01 00 00    	je     c00149df <Vm::faultHandler(regs*)+0x228>
c00148b0:	e9 79 05 00 00       	jmp    c0014e2e <Vm::faultHandler(regs*)+0x677>
c00148b5:	80 fa ec             	cmp    dl,0xec
c00148b8:	0f 84 14 05 00 00    	je     c0014dd2 <Vm::faultHandler(regs*)+0x61b>
c00148be:	77 7b                	ja     c001493b <Vm::faultHandler(regs*)+0x184>
c00148c0:	80 fa e4             	cmp    dl,0xe4
c00148c3:	0f 84 93 04 00 00    	je     c0014d5c <Vm::faultHandler(regs*)+0x5a5>
c00148c9:	77 53                	ja     c001491e <Vm::faultHandler(regs*)+0x167>
c00148cb:	80 fa cd             	cmp    dl,0xcd
c00148ce:	0f 84 d9 01 00 00    	je     c0014aad <Vm::faultHandler(regs*)+0x2f6>
c00148d4:	80 fa cf             	cmp    dl,0xcf
c00148d7:	0f 85 51 05 00 00    	jne    c0014e2e <Vm::faultHandler(regs*)+0x677>
c00148dd:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00148e0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00148e3:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00148e7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00148ea:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00148ee:	81 ca 00 02 02 00    	or     edx,0x20200
c00148f4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00148f7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00148fb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014901:	66 c1 e8 09          	shr    ax,0x9
c0014905:	83 e0 01             	and    eax,0x1
c0014908:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001490b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001490e:	83 c0 06             	add    eax,0x6
c0014911:	25 ff ff 00 00       	and    eax,0xffff
c0014916:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014919:	e9 0c 05 00 00       	jmp    c0014e2a <Vm::faultHandler(regs*)+0x673>
c001491e:	80 fa e6             	cmp    dl,0xe6
c0014921:	0f 84 7f 04 00 00    	je     c0014da6 <Vm::faultHandler(regs*)+0x5ef>
c0014927:	0f 82 4b 04 00 00    	jb     c0014d78 <Vm::faultHandler(regs*)+0x5c1>
c001492d:	80 fa e7             	cmp    dl,0xe7
c0014930:	0f 84 87 04 00 00    	je     c0014dbd <Vm::faultHandler(regs*)+0x606>
c0014936:	e9 f3 04 00 00       	jmp    c0014e2e <Vm::faultHandler(regs*)+0x677>
c001493b:	80 fa ef             	cmp    dl,0xef
c001493e:	0f 84 d1 04 00 00    	je     c0014e15 <Vm::faultHandler(regs*)+0x65e>
c0014944:	77 28                	ja     c001496e <Vm::faultHandler(regs*)+0x1b7>
c0014946:	80 fa ed             	cmp    dl,0xed
c0014949:	0f 84 9f 04 00 00    	je     c0014dee <Vm::faultHandler(regs*)+0x637>
c001494f:	80 fa ee             	cmp    dl,0xee
c0014952:	0f 85 d6 04 00 00    	jne    c0014e2e <Vm::faultHandler(regs*)+0x677>
c0014958:	50                   	push   eax
c0014959:	50                   	push   eax
c001495a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001495e:	50                   	push   eax
c001495f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014963:	50                   	push   eax
c0014964:	e8 a3 f9 ff ff       	call   c001430c <Vm::outbv(unsigned short, unsigned char)>
c0014969:	e9 9f 04 00 00       	jmp    c0014e0d <Vm::faultHandler(regs*)+0x656>
c001496e:	80 fa fa             	cmp    dl,0xfa
c0014971:	0f 84 69 01 00 00    	je     c0014ae0 <Vm::faultHandler(regs*)+0x329>
c0014977:	80 fa fb             	cmp    dl,0xfb
c001497a:	0f 84 6e 01 00 00    	je     c0014aee <Vm::faultHandler(regs*)+0x337>
c0014980:	80 fa f3             	cmp    dl,0xf3
c0014983:	0f 85 a5 04 00 00    	jne    c0014e2e <Vm::faultHandler(regs*)+0x677>
c0014989:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001498c:	e9 c0 fe ff ff       	jmp    c0014851 <Vm::faultHandler(regs*)+0x9a>
c0014991:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014994:	be 02 00 00 00       	mov    esi,0x2
c0014999:	e9 b3 fe ff ff       	jmp    c0014851 <Vm::faultHandler(regs*)+0x9a>
c001499e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149a1:	be 03 00 00 00       	mov    esi,0x3
c00149a6:	e9 a6 fe ff ff       	jmp    c0014851 <Vm::faultHandler(regs*)+0x9a>
c00149ab:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149ae:	be 04 00 00 00       	mov    esi,0x4
c00149b3:	e9 99 fe ff ff       	jmp    c0014851 <Vm::faultHandler(regs*)+0x9a>
c00149b8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149bb:	be 05 00 00 00       	mov    esi,0x5
c00149c0:	e9 8c fe ff ff       	jmp    c0014851 <Vm::faultHandler(regs*)+0x9a>
c00149c5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149c8:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00149cd:	e9 7f fe ff ff       	jmp    c0014851 <Vm::faultHandler(regs*)+0x9a>
c00149d2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149d5:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00149da:	e9 72 fe ff ff       	jmp    c0014851 <Vm::faultHandler(regs*)+0x9a>
c00149df:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00149e2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00149e6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149eb:	74 30                	je     c0014a1d <Vm::faultHandler(regs*)+0x266>
c00149ed:	83 e9 04             	sub    ecx,0x4
c00149f0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00149f6:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00149fc:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00149ff:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a02:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a08:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a0c:	0f 84 15 04 00 00    	je     c0014e27 <Vm::faultHandler(regs*)+0x670>
c0014a12:	80 ce 02             	or     dh,0x2
c0014a15:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014a18:	e9 0a 04 00 00       	jmp    c0014e27 <Vm::faultHandler(regs*)+0x670>
c0014a1d:	83 e9 02             	sub    ecx,0x2
c0014a20:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014a26:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014a29:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a2d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014a33:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014a37:	74 05                	je     c0014a3e <Vm::faultHandler(regs*)+0x287>
c0014a39:	80 ce 02             	or     dh,0x2
c0014a3c:	eb 03                	jmp    c0014a41 <Vm::faultHandler(regs*)+0x28a>
c0014a3e:	80 e6 fd             	and    dh,0xfd
c0014a41:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014a45:	e9 dd 03 00 00       	jmp    c0014e27 <Vm::faultHandler(regs*)+0x670>
c0014a4a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a4f:	74 2a                	je     c0014a7b <Vm::faultHandler(regs*)+0x2c4>
c0014a51:	8b 10                	mov    edx,DWORD PTR [eax]
c0014a53:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014a59:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a5f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a62:	8b 00                	mov    eax,DWORD PTR [eax]
c0014a64:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a6a:	c1 e8 09             	shr    eax,0x9
c0014a6d:	83 e0 01             	and    eax,0x1
c0014a70:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a73:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a76:	83 c0 04             	add    eax,0x4
c0014a79:	eb 25                	jmp    c0014aa0 <Vm::faultHandler(regs*)+0x2e9>
c0014a7b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014a7e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014a84:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014a87:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014a8a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a90:	66 c1 e8 09          	shr    ax,0x9
c0014a94:	83 e0 01             	and    eax,0x1
c0014a97:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014a9a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014a9d:	83 c0 02             	add    eax,0x2
c0014aa0:	25 ff ff 00 00       	and    eax,0xffff
c0014aa5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014aa8:	e9 7a 03 00 00       	jmp    c0014e27 <Vm::faultHandler(regs*)+0x670>
c0014aad:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ab1:	3c ee                	cmp    al,0xee
c0014ab3:	75 10                	jne    c0014ac5 <Vm::faultHandler(regs*)+0x30e>
c0014ab5:	83 ec 0c             	sub    esp,0xc
c0014ab8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014abb:	e8 e9 f8 ff ff       	call   c00143a9 <Vm::mainloop3(unsigned long)>
c0014ac0:	e9 4b 03 00 00       	jmp    c0014e10 <Vm::faultHandler(regs*)+0x659>
c0014ac5:	83 ec 0c             	sub    esp,0xc
c0014ac8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014acc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ad0:	51                   	push   ecx
c0014ad1:	50                   	push   eax
c0014ad2:	53                   	push   ebx
c0014ad3:	e8 e1 fb ff ff       	call   c00146b9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014ad8:	83 c4 20             	add    esp,0x20
c0014adb:	e9 4a 03 00 00       	jmp    c0014e2a <Vm::faultHandler(regs*)+0x673>
c0014ae0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ae5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014ae9:	e9 39 03 00 00       	jmp    c0014e27 <Vm::faultHandler(regs*)+0x670>
c0014aee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014af3:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014af7:	e9 2b 03 00 00       	jmp    c0014e27 <Vm::faultHandler(regs*)+0x670>
c0014afc:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014aff:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b04:	74 2b                	je     c0014b31 <Vm::faultHandler(regs*)+0x37a>
c0014b06:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014b0d:	76 22                	jbe    c0014b31 <Vm::faultHandler(regs*)+0x37a>
c0014b0f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b13:	50                   	push   eax
c0014b14:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b18:	50                   	push   eax
c0014b19:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b1d:	50                   	push   eax
c0014b1e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b22:	50                   	push   eax
c0014b23:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b27:	50                   	push   eax
c0014b28:	6a 6c                	push   0x6c
c0014b2a:	6a 6c                	push   0x6c
c0014b2c:	e9 b9 01 00 00       	jmp    c0014cea <Vm::faultHandler(regs*)+0x533>
c0014b31:	83 ec 0c             	sub    esp,0xc
c0014b34:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014b38:	0f b7 f6             	movzx  esi,si
c0014b3b:	50                   	push   eax
c0014b3c:	e8 b8 f7 ff ff       	call   c00142f9 <Vm::inbv(unsigned short)>
c0014b41:	83 c4 0c             	add    esp,0xc
c0014b44:	0f b6 c0             	movzx  eax,al
c0014b47:	50                   	push   eax
c0014b48:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014b4c:	50                   	push   eax
c0014b4d:	56                   	push   esi
c0014b4e:	e8 24 fc ff ff       	call   c0014777 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014b53:	83 c4 10             	add    esp,0x10
c0014b56:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b59:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014b5d:	74 03                	je     c0014b62 <Vm::faultHandler(regs*)+0x3ab>
c0014b5f:	48                   	dec    eax
c0014b60:	eb 01                	jmp    c0014b63 <Vm::faultHandler(regs*)+0x3ac>
c0014b62:	40                   	inc    eax
c0014b63:	0f b7 c0             	movzx  eax,ax
c0014b66:	e9 8d 00 00 00       	jmp    c0014bf8 <Vm::faultHandler(regs*)+0x441>
c0014b6b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014b6e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014b71:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014b76:	74 29                	je     c0014ba1 <Vm::faultHandler(regs*)+0x3ea>
c0014b78:	3d ff ff 00 00       	cmp    eax,0xffff
c0014b7d:	76 22                	jbe    c0014ba1 <Vm::faultHandler(regs*)+0x3ea>
c0014b7f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014b83:	50                   	push   eax
c0014b84:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014b88:	50                   	push   eax
c0014b89:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014b8d:	50                   	push   eax
c0014b8e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014b92:	50                   	push   eax
c0014b93:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b97:	50                   	push   eax
c0014b98:	6a 6d                	push   0x6d
c0014b9a:	6a 6d                	push   0x6d
c0014b9c:	e9 49 01 00 00       	jmp    c0014cea <Vm::faultHandler(regs*)+0x533>
c0014ba1:	0f b7 c8             	movzx  ecx,ax
c0014ba4:	0f b7 f6             	movzx  esi,si
c0014ba7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014baa:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014baf:	74 20                	je     c0014bd1 <Vm::faultHandler(regs*)+0x41a>
c0014bb1:	ed                   	in     eax,dx
c0014bb2:	55                   	push   ebp
c0014bb3:	50                   	push   eax
c0014bb4:	51                   	push   ecx
c0014bb5:	56                   	push   esi
c0014bb6:	e8 e7 fb ff ff       	call   c00147a2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014bbb:	83 c4 10             	add    esp,0x10
c0014bbe:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014bc1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014bc5:	74 05                	je     c0014bcc <Vm::faultHandler(regs*)+0x415>
c0014bc7:	83 e8 04             	sub    eax,0x4
c0014bca:	eb 27                	jmp    c0014bf3 <Vm::faultHandler(regs*)+0x43c>
c0014bcc:	83 c0 04             	add    eax,0x4
c0014bcf:	eb 22                	jmp    c0014bf3 <Vm::faultHandler(regs*)+0x43c>
c0014bd1:	66 ed                	in     ax,dx
c0014bd3:	0f b7 c0             	movzx  eax,ax
c0014bd6:	57                   	push   edi
c0014bd7:	50                   	push   eax
c0014bd8:	51                   	push   ecx
c0014bd9:	56                   	push   esi
c0014bda:	e8 ad fb ff ff       	call   c001478c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014bdf:	83 c4 10             	add    esp,0x10
c0014be2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014be5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014be9:	74 05                	je     c0014bf0 <Vm::faultHandler(regs*)+0x439>
c0014beb:	83 e8 02             	sub    eax,0x2
c0014bee:	eb 03                	jmp    c0014bf3 <Vm::faultHandler(regs*)+0x43c>
c0014bf0:	83 c0 02             	add    eax,0x2
c0014bf3:	25 ff ff 00 00       	and    eax,0xffff
c0014bf8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014bfb:	e9 27 02 00 00       	jmp    c0014e27 <Vm::faultHandler(regs*)+0x670>
c0014c00:	8d 46 ff             	lea    eax,[esi-0x1]
c0014c03:	3c 05                	cmp    al,0x5
c0014c05:	77 24                	ja     c0014c2b <Vm::faultHandler(regs*)+0x474>
c0014c07:	0f b6 c0             	movzx  eax,al
c0014c0a:	ff 24 85 b8 ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1248]
c0014c11:	0f b7 fd             	movzx  edi,bp
c0014c14:	eb 15                	jmp    c0014c2b <Vm::faultHandler(regs*)+0x474>
c0014c16:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014c1a:	eb 0f                	jmp    c0014c2b <Vm::faultHandler(regs*)+0x474>
c0014c1c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014c20:	eb 09                	jmp    c0014c2b <Vm::faultHandler(regs*)+0x474>
c0014c22:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014c26:	eb 03                	jmp    c0014c2b <Vm::faultHandler(regs*)+0x474>
c0014c28:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014c2b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c2e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c33:	74 29                	je     c0014c5e <Vm::faultHandler(regs*)+0x4a7>
c0014c35:	3d ff ff 00 00       	cmp    eax,0xffff
c0014c3a:	76 22                	jbe    c0014c5e <Vm::faultHandler(regs*)+0x4a7>
c0014c3c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c40:	50                   	push   eax
c0014c41:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c45:	50                   	push   eax
c0014c46:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c4a:	50                   	push   eax
c0014c4b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c4f:	50                   	push   eax
c0014c50:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c54:	50                   	push   eax
c0014c55:	6a 6e                	push   0x6e
c0014c57:	6a 6e                	push   0x6e
c0014c59:	e9 8c 00 00 00       	jmp    c0014cea <Vm::faultHandler(regs*)+0x533>
c0014c5e:	0f b7 c0             	movzx  eax,ax
c0014c61:	52                   	push   edx
c0014c62:	52                   	push   edx
c0014c63:	50                   	push   eax
c0014c64:	57                   	push   edi
c0014c65:	e8 d9 fa ff ff       	call   c0014743 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014c6a:	59                   	pop    ecx
c0014c6b:	0f b6 c0             	movzx  eax,al
c0014c6e:	5e                   	pop    esi
c0014c6f:	50                   	push   eax
c0014c70:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014c74:	50                   	push   eax
c0014c75:	e8 92 f6 ff ff       	call   c001430c <Vm::outbv(unsigned short, unsigned char)>
c0014c7a:	83 c4 10             	add    esp,0x10
c0014c7d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014c80:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c84:	74 03                	je     c0014c89 <Vm::faultHandler(regs*)+0x4d2>
c0014c86:	48                   	dec    eax
c0014c87:	eb 01                	jmp    c0014c8a <Vm::faultHandler(regs*)+0x4d3>
c0014c89:	40                   	inc    eax
c0014c8a:	0f b7 c0             	movzx  eax,ax
c0014c8d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014c90:	e9 92 01 00 00       	jmp    c0014e27 <Vm::faultHandler(regs*)+0x670>
c0014c95:	8d 46 ff             	lea    eax,[esi-0x1]
c0014c98:	3c 05                	cmp    al,0x5
c0014c9a:	77 1f                	ja     c0014cbb <Vm::faultHandler(regs*)+0x504>
c0014c9c:	0f b6 c0             	movzx  eax,al
c0014c9f:	ff 24 85 d0 ed 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1230]
c0014ca6:	89 ef                	mov    edi,ebp
c0014ca8:	eb 11                	jmp    c0014cbb <Vm::faultHandler(regs*)+0x504>
c0014caa:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014cad:	eb 0c                	jmp    c0014cbb <Vm::faultHandler(regs*)+0x504>
c0014caf:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014cb2:	eb 07                	jmp    c0014cbb <Vm::faultHandler(regs*)+0x504>
c0014cb4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014cb7:	eb 02                	jmp    c0014cbb <Vm::faultHandler(regs*)+0x504>
c0014cb9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014cbb:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014cbe:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014cc3:	74 37                	je     c0014cfc <Vm::faultHandler(regs*)+0x545>
c0014cc5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014ccb:	76 2f                	jbe    c0014cfc <Vm::faultHandler(regs*)+0x545>
c0014ccd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014cd1:	50                   	push   eax
c0014cd2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014cd6:	50                   	push   eax
c0014cd7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014cdb:	50                   	push   eax
c0014cdc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014ce0:	50                   	push   eax
c0014ce1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ce5:	50                   	push   eax
c0014ce6:	6a 6f                	push   0x6f
c0014ce8:	6a 6f                	push   0x6f
c0014cea:	68 5e ed 01 c0       	push   0xc001ed5e
c0014cef:	e8 f4 57 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0014cf4:	83 c4 20             	add    esp,0x20
c0014cf7:	e9 86 01 00 00       	jmp    c0014e82 <Vm::faultHandler(regs*)+0x6cb>
c0014cfc:	0f b7 d7             	movzx  edx,di
c0014cff:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014d02:	0f b7 c6             	movzx  eax,si
c0014d05:	81 e1 00 04 00 00    	and    ecx,0x400
c0014d0b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014d0e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d13:	74 1d                	je     c0014d32 <Vm::faultHandler(regs*)+0x57b>
c0014d15:	55                   	push   ebp
c0014d16:	55                   	push   ebp
c0014d17:	50                   	push   eax
c0014d18:	52                   	push   edx
c0014d19:	e8 48 fa ff ff       	call   c0014766 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014d1e:	83 c4 10             	add    esp,0x10
c0014d21:	89 fa                	mov    edx,edi
c0014d23:	ef                   	out    dx,eax
c0014d24:	85 c9                	test   ecx,ecx
c0014d26:	74 05                	je     c0014d2d <Vm::faultHandler(regs*)+0x576>
c0014d28:	83 ee 04             	sub    esi,0x4
c0014d2b:	eb 21                	jmp    c0014d4e <Vm::faultHandler(regs*)+0x597>
c0014d2d:	83 c6 04             	add    esi,0x4
c0014d30:	eb 1c                	jmp    c0014d4e <Vm::faultHandler(regs*)+0x597>
c0014d32:	55                   	push   ebp
c0014d33:	55                   	push   ebp
c0014d34:	50                   	push   eax
c0014d35:	52                   	push   edx
c0014d36:	e8 19 fa ff ff       	call   c0014754 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014d3b:	83 c4 10             	add    esp,0x10
c0014d3e:	89 fa                	mov    edx,edi
c0014d40:	66 ef                	out    dx,ax
c0014d42:	85 c9                	test   ecx,ecx
c0014d44:	74 05                	je     c0014d4b <Vm::faultHandler(regs*)+0x594>
c0014d46:	83 ee 02             	sub    esi,0x2
c0014d49:	eb 03                	jmp    c0014d4e <Vm::faultHandler(regs*)+0x597>
c0014d4b:	83 c6 02             	add    esi,0x2
c0014d4e:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014d54:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014d57:	e9 cb 00 00 00       	jmp    c0014e27 <Vm::faultHandler(regs*)+0x670>
c0014d5c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014d63:	83 ec 0c             	sub    esp,0xc
c0014d66:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d6a:	50                   	push   eax
c0014d6b:	e8 89 f5 ff ff       	call   c00142f9 <Vm::inbv(unsigned short)>
c0014d70:	0f b6 c0             	movzx  eax,al
c0014d73:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014d76:	eb 3f                	jmp    c0014db7 <Vm::faultHandler(regs*)+0x600>
c0014d78:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014d7d:	74 07                	je     c0014d86 <Vm::faultHandler(regs*)+0x5cf>
c0014d7f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d83:	ed                   	in     eax,dx
c0014d84:	eb 14                	jmp    c0014d9a <Vm::faultHandler(regs*)+0x5e3>
c0014d86:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014d89:	66 31 f6             	xor    si,si
c0014d8c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014d8f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014d93:	66 ed                	in     ax,dx
c0014d95:	0f b7 c0             	movzx  eax,ax
c0014d98:	09 f0                	or     eax,esi
c0014d9a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014d9d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014da1:	e9 84 00 00 00       	jmp    c0014e2a <Vm::faultHandler(regs*)+0x673>
c0014da6:	52                   	push   edx
c0014da7:	52                   	push   edx
c0014da8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014dac:	50                   	push   eax
c0014dad:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014db1:	50                   	push   eax
c0014db2:	e8 55 f5 ff ff       	call   c001430c <Vm::outbv(unsigned short, unsigned char)>
c0014db7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014dbb:	eb 53                	jmp    c0014e10 <Vm::faultHandler(regs*)+0x659>
c0014dbd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014dc0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014dc4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014dc9:	74 03                	je     c0014dce <Vm::faultHandler(regs*)+0x617>
c0014dcb:	ef                   	out    dx,eax
c0014dcc:	eb cf                	jmp    c0014d9d <Vm::faultHandler(regs*)+0x5e6>
c0014dce:	66 ef                	out    dx,ax
c0014dd0:	eb cb                	jmp    c0014d9d <Vm::faultHandler(regs*)+0x5e6>
c0014dd2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014dd9:	83 ec 0c             	sub    esp,0xc
c0014ddc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014de0:	50                   	push   eax
c0014de1:	e8 13 f5 ff ff       	call   c00142f9 <Vm::inbv(unsigned short)>
c0014de6:	0f b6 c0             	movzx  eax,al
c0014de9:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014dec:	eb 1f                	jmp    c0014e0d <Vm::faultHandler(regs*)+0x656>
c0014dee:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014df1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014df6:	74 03                	je     c0014dfb <Vm::faultHandler(regs*)+0x644>
c0014df8:	ed                   	in     eax,dx
c0014df9:	eb 0d                	jmp    c0014e08 <Vm::faultHandler(regs*)+0x651>
c0014dfb:	66 ed                	in     ax,dx
c0014dfd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014e00:	0f b7 c0             	movzx  eax,ax
c0014e03:	66 31 d2             	xor    dx,dx
c0014e06:	09 d0                	or     eax,edx
c0014e08:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014e0b:	eb 1a                	jmp    c0014e27 <Vm::faultHandler(regs*)+0x670>
c0014e0d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e10:	83 c4 10             	add    esp,0x10
c0014e13:	eb 15                	jmp    c0014e2a <Vm::faultHandler(regs*)+0x673>
c0014e15:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e18:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014e1b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e20:	74 03                	je     c0014e25 <Vm::faultHandler(regs*)+0x66e>
c0014e22:	ef                   	out    dx,eax
c0014e23:	eb 02                	jmp    c0014e27 <Vm::faultHandler(regs*)+0x670>
c0014e25:	66 ef                	out    dx,ax
c0014e27:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014e2a:	b0 01                	mov    al,0x1
c0014e2c:	eb 56                	jmp    c0014e84 <Vm::faultHandler(regs*)+0x6cd>
c0014e2e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014e32:	50                   	push   eax
c0014e33:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014e37:	50                   	push   eax
c0014e38:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014e3c:	50                   	push   eax
c0014e3d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014e41:	50                   	push   eax
c0014e42:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e46:	50                   	push   eax
c0014e47:	52                   	push   edx
c0014e48:	52                   	push   edx
c0014e49:	68 8b ed 01 c0       	push   0xc001ed8b
c0014e4e:	e8 95 56 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0014e53:	83 c4 20             	add    esp,0x20
c0014e56:	83 ec 0c             	sub    esp,0xc
c0014e59:	6a 60                	push   0x60
c0014e5b:	e8 99 f4 ff ff       	call   c00142f9 <Vm::inbv(unsigned short)>
c0014e60:	83 c4 10             	add    esp,0x10
c0014e63:	3c 1c                	cmp    al,0x1c
c0014e65:	74 04                	je     c0014e6b <Vm::faultHandler(regs*)+0x6b4>
c0014e67:	3c 5a                	cmp    al,0x5a
c0014e69:	75 eb                	jne    c0014e56 <Vm::faultHandler(regs*)+0x69f>
c0014e6b:	3c 5a                	cmp    al,0x5a
c0014e6d:	74 04                	je     c0014e73 <Vm::faultHandler(regs*)+0x6bc>
c0014e6f:	3c 1c                	cmp    al,0x1c
c0014e71:	75 0f                	jne    c0014e82 <Vm::faultHandler(regs*)+0x6cb>
c0014e73:	83 ec 0c             	sub    esp,0xc
c0014e76:	6a 60                	push   0x60
c0014e78:	e8 7c f4 ff ff       	call   c00142f9 <Vm::inbv(unsigned short)>
c0014e7d:	83 c4 10             	add    esp,0x10
c0014e80:	eb e9                	jmp    c0014e6b <Vm::faultHandler(regs*)+0x6b4>
c0014e82:	31 c0                	xor    eax,eax
c0014e84:	83 c4 1c             	add    esp,0x1c
c0014e87:	5b                   	pop    ebx
c0014e88:	5e                   	pop    esi
c0014e89:	5f                   	pop    edi
c0014e8a:	5d                   	pop    ebp
c0014e8b:	c3                   	ret    

c0014e8c <noCopro(unsigned long)>:
c0014e8c:	c3                   	ret    

c0014e8d <nmiHandler(regs*, void*)>:
c0014e8d:	83 ec 0c             	sub    esp,0xc
c0014e90:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0014e95:	83 ec 0c             	sub    esp,0xc
c0014e98:	50                   	push   eax
c0014e99:	e8 4c 21 ff ff       	call   c0006fea <Computer::handleNMI()>
c0014e9e:	83 c4 10             	add    esp,0x10
c0014ea1:	90                   	nop
c0014ea2:	83 c4 0c             	add    esp,0xc
c0014ea5:	c3                   	ret    

c0014ea6 <doubleFault(regs*, void*)>:
c0014ea6:	55                   	push   ebp
c0014ea7:	89 e5                	mov    ebp,esp
c0014ea9:	83 ec 08             	sub    esp,0x8
c0014eac:	83 ec 0c             	sub    esp,0xc
c0014eaf:	68 e8 ed 01 c0       	push   0xc001ede8
c0014eb4:	e8 b2 b2 ff ff       	call   c001016b <KePanic(char const*)>
c0014eb9:	83 c4 10             	add    esp,0x10
c0014ebc:	90                   	nop
c0014ebd:	c9                   	leave  
c0014ebe:	c3                   	ret    

c0014ebf <displayDebugInfo(regs*)>:
c0014ebf:	83 ec 1c             	sub    esp,0x1c
c0014ec2:	0f 20 c0             	mov    eax,cr0
c0014ec5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ec9:	0f 20 d0             	mov    eax,cr2
c0014ecc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ed0:	0f 20 d8             	mov    eax,cr3
c0014ed3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ed7:	0f 20 e0             	mov    eax,cr4
c0014eda:	89 04 24             	mov    DWORD PTR [esp],eax
c0014edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ee1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014ee4:	83 ec 08             	sub    esp,0x8
c0014ee7:	50                   	push   eax
c0014ee8:	68 04 ee 01 c0       	push   0xc001ee04
c0014eed:	e8 f6 55 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0014ef2:	83 c4 10             	add    esp,0x10
c0014ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ef9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014efc:	83 ec 08             	sub    esp,0x8
c0014eff:	50                   	push   eax
c0014f00:	68 f5 ed 01 c0       	push   0xc001edf5
c0014f05:	e8 de 55 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0014f0a:	83 c4 10             	add    esp,0x10
c0014f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f11:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f14:	83 ec 08             	sub    esp,0x8
c0014f17:	50                   	push   eax
c0014f18:	68 00 ee 01 c0       	push   0xc001ee00
c0014f1d:	e8 c6 55 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0014f22:	83 c4 10             	add    esp,0x10
c0014f25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f29:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f2c:	83 ec 08             	sub    esp,0x8
c0014f2f:	50                   	push   eax
c0014f30:	68 0f ee 01 c0       	push   0xc001ee0f
c0014f35:	e8 ae 55 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0014f3a:	83 c4 10             	add    esp,0x10
c0014f3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f41:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014f44:	83 ec 08             	sub    esp,0x8
c0014f47:	50                   	push   eax
c0014f48:	68 1a ee 01 c0       	push   0xc001ee1a
c0014f4d:	e8 96 55 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0014f52:	83 c4 10             	add    esp,0x10
c0014f55:	83 ec 08             	sub    esp,0x8
c0014f58:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f5c:	68 25 ee 01 c0       	push   0xc001ee25
c0014f61:	e8 82 55 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0014f66:	83 c4 10             	add    esp,0x10
c0014f69:	83 ec 08             	sub    esp,0x8
c0014f6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014f70:	68 30 ee 01 c0       	push   0xc001ee30
c0014f75:	e8 6e 55 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0014f7a:	83 c4 10             	add    esp,0x10
c0014f7d:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c0014f82:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f88:	83 ec 0c             	sub    esp,0xc
c0014f8b:	50                   	push   eax
c0014f8c:	e8 76 34 ff ff       	call   c0008407 <setActiveTerminal(VgaText*)>
c0014f91:	83 c4 10             	add    esp,0x10
c0014f94:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c0014f99:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f9f:	83 ec 08             	sub    esp,0x8
c0014fa2:	68 3b ee 01 c0       	push   0xc001ee3b
c0014fa7:	50                   	push   eax
c0014fa8:	e8 99 37 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0014fad:	83 c4 10             	add    esp,0x10
c0014fb0:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c0014fb5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fbb:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014fc0:	8b 12                	mov    edx,DWORD PTR [edx]
c0014fc2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014fc5:	83 c2 0c             	add    edx,0xc
c0014fc8:	83 ec 08             	sub    esp,0x8
c0014fcb:	52                   	push   edx
c0014fcc:	50                   	push   eax
c0014fcd:	e8 74 37 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0014fd2:	83 c4 10             	add    esp,0x10
c0014fd5:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c0014fda:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fe0:	83 ec 08             	sub    esp,0x8
c0014fe3:	68 44 ee 01 c0       	push   0xc001ee44
c0014fe8:	50                   	push   eax
c0014fe9:	e8 58 37 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0014fee:	83 c4 10             	add    esp,0x10
c0014ff1:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c0014ff6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ffc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015000:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0015003:	83 ec 08             	sub    esp,0x8
c0015006:	52                   	push   edx
c0015007:	50                   	push   eax
c0015008:	e8 f3 36 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c001500d:	83 c4 10             	add    esp,0x10
c0015010:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c0015015:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001501b:	83 ec 08             	sub    esp,0x8
c001501e:	68 4c ee 01 c0       	push   0xc001ee4c
c0015023:	50                   	push   eax
c0015024:	e8 1d 37 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0015029:	83 c4 10             	add    esp,0x10
c001502c:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c0015031:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015037:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001503b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001503e:	83 ec 08             	sub    esp,0x8
c0015041:	52                   	push   edx
c0015042:	50                   	push   eax
c0015043:	e8 b8 36 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c0015048:	83 c4 10             	add    esp,0x10
c001504b:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c0015050:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015056:	83 ec 08             	sub    esp,0x8
c0015059:	68 54 ee 01 c0       	push   0xc001ee54
c001505e:	50                   	push   eax
c001505f:	e8 e2 36 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0015064:	83 c4 10             	add    esp,0x10
c0015067:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c001506c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015072:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015076:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0015079:	83 ec 08             	sub    esp,0x8
c001507c:	52                   	push   edx
c001507d:	50                   	push   eax
c001507e:	e8 7d 36 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c0015083:	83 c4 10             	add    esp,0x10
c0015086:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c001508b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015091:	83 ec 08             	sub    esp,0x8
c0015094:	68 5c ee 01 c0       	push   0xc001ee5c
c0015099:	50                   	push   eax
c001509a:	e8 a7 36 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c001509f:	83 c4 10             	add    esp,0x10
c00150a2:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c00150a7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150ad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150b1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00150b4:	83 ec 08             	sub    esp,0x8
c00150b7:	52                   	push   edx
c00150b8:	50                   	push   eax
c00150b9:	e8 42 36 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c00150be:	83 c4 10             	add    esp,0x10
c00150c1:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c00150c6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150cc:	83 ec 08             	sub    esp,0x8
c00150cf:	68 64 ee 01 c0       	push   0xc001ee64
c00150d4:	50                   	push   eax
c00150d5:	e8 6c 36 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00150da:	83 c4 10             	add    esp,0x10
c00150dd:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c00150e2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150e8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150ec:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00150ef:	83 ec 08             	sub    esp,0x8
c00150f2:	52                   	push   edx
c00150f3:	50                   	push   eax
c00150f4:	e8 07 36 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c00150f9:	83 c4 10             	add    esp,0x10
c00150fc:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c0015101:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015107:	83 ec 08             	sub    esp,0x8
c001510a:	68 6c ee 01 c0       	push   0xc001ee6c
c001510f:	50                   	push   eax
c0015110:	e8 31 36 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0015115:	83 c4 10             	add    esp,0x10
c0015118:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c001511d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015123:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015127:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001512a:	83 ec 08             	sub    esp,0x8
c001512d:	52                   	push   edx
c001512e:	50                   	push   eax
c001512f:	e8 cc 35 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c0015134:	83 c4 10             	add    esp,0x10
c0015137:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c001513c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015142:	83 ec 08             	sub    esp,0x8
c0015145:	68 74 ee 01 c0       	push   0xc001ee74
c001514a:	50                   	push   eax
c001514b:	e8 f6 35 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0015150:	83 c4 10             	add    esp,0x10
c0015153:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c0015158:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001515e:	83 ec 08             	sub    esp,0x8
c0015161:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015165:	50                   	push   eax
c0015166:	e8 95 35 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c001516b:	83 c4 10             	add    esp,0x10
c001516e:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c0015173:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015179:	83 ec 08             	sub    esp,0x8
c001517c:	68 7d ee 01 c0       	push   0xc001ee7d
c0015181:	50                   	push   eax
c0015182:	e8 bf 35 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0015187:	83 c4 10             	add    esp,0x10
c001518a:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c001518f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015195:	83 ec 08             	sub    esp,0x8
c0015198:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001519c:	50                   	push   eax
c001519d:	e8 5e 35 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c00151a2:	83 c4 10             	add    esp,0x10
c00151a5:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c00151aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151b0:	83 ec 08             	sub    esp,0x8
c00151b3:	68 85 ee 01 c0       	push   0xc001ee85
c00151b8:	50                   	push   eax
c00151b9:	e8 88 35 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00151be:	83 c4 10             	add    esp,0x10
c00151c1:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c00151c6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151cc:	83 ec 08             	sub    esp,0x8
c00151cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00151d3:	50                   	push   eax
c00151d4:	e8 27 35 ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c00151d9:	83 c4 10             	add    esp,0x10
c00151dc:	fa                   	cli    
c00151dd:	f4                   	hlt    
c00151de:	eb fe                	jmp    c00151de <displayDebugInfo(regs*)+0x31f>

c00151e0 <HalSystemIdle()>:
c00151e0:	56                   	push   esi
c00151e1:	53                   	push   ebx
c00151e2:	83 ec 14             	sub    esp,0x14
c00151e5:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c00151ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00151f0:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00151f6:	83 e0 04             	and    eax,0x4
c00151f9:	84 c0                	test   al,al
c00151fb:	0f 95 c0             	setne  al
c00151fe:	84 c0                	test   al,al
c0015200:	74 4c                	je     c001524e <HalSystemIdle()+0x6e>
c0015202:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0015207:	83 ec 08             	sub    esp,0x8
c001520a:	68 e1 00 00 00       	push   0xe1
c001520f:	50                   	push   eax
c0015210:	e8 ed 1b ff ff       	call   c0006e02 <Computer::rdmsr(unsigned int)>
c0015215:	83 c4 10             	add    esp,0x10
c0015218:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001521c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015220:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0015225:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015229:	83 e2 02             	and    edx,0x2
c001522c:	89 d3                	mov    ebx,edx
c001522e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015232:	83 e2 00             	and    edx,0x0
c0015235:	89 d6                	mov    esi,edx
c0015237:	56                   	push   esi
c0015238:	53                   	push   ebx
c0015239:	68 e1 00 00 00       	push   0xe1
c001523e:	50                   	push   eax
c001523f:	e8 ea 1b ff ff       	call   c0006e2e <Computer::wrmsr(unsigned int, unsigned long long)>
c0015244:	83 c4 10             	add    esp,0x10
c0015247:	e8 48 af fe ff       	call   c0000194 <doTPAUSE>
c001524c:	eb 01                	jmp    c001524f <HalSystemIdle()+0x6f>
c001524e:	f4                   	hlt    
c001524f:	90                   	nop
c0015250:	83 c4 14             	add    esp,0x14
c0015253:	5b                   	pop    ebx
c0015254:	5e                   	pop    esi
c0015255:	c3                   	ret    

c0015256 <displayProgramFault(char const*)>:
c0015256:	83 ec 0c             	sub    esp,0xc
c0015259:	83 ec 0c             	sub    esp,0xc
c001525c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015260:	e8 83 52 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0015265:	83 c4 10             	add    esp,0x10
c0015268:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001526d:	8b 00                	mov    eax,DWORD PTR [eax]
c001526f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015272:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015278:	85 c0                	test   eax,eax
c001527a:	74 21                	je     c001529d <displayProgramFault(char const*)+0x47>
c001527c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015281:	8b 00                	mov    eax,DWORD PTR [eax]
c0015283:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015286:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001528c:	6a 04                	push   0x4
c001528e:	6a 0f                	push   0xf
c0015290:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015294:	50                   	push   eax
c0015295:	e8 1e 35 ff ff       	call   c00087b8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001529a:	83 c4 10             	add    esp,0x10
c001529d:	90                   	nop
c001529e:	83 c4 0c             	add    esp,0xc
c00152a1:	c3                   	ret    

c00152a2 <gpFault(regs*, void*)>:
c00152a2:	83 ec 1c             	sub    esp,0x1c
c00152a5:	c7 05 d0 3e 02 c0 b7 47 01 c0 	mov    DWORD PTR ds:0xc0023ed0,0xc00147b7
c00152af:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c00152b4:	85 c0                	test   eax,eax
c00152b6:	74 1c                	je     c00152d4 <gpFault(regs*, void*)+0x32>
c00152b8:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c00152bd:	83 ec 0c             	sub    esp,0xc
c00152c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152c4:	ff d0                	call   eax
c00152c6:	83 c4 10             	add    esp,0x10
c00152c9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00152cd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00152d2:	75 2e                	jne    c0015302 <gpFault(regs*, void*)+0x60>
c00152d4:	83 ec 0c             	sub    esp,0xc
c00152d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00152db:	e8 df fb ff ff       	call   c0014ebf <displayDebugInfo(regs*)>
c00152e0:	83 c4 10             	add    esp,0x10
c00152e3:	83 ec 0c             	sub    esp,0xc
c00152e6:	68 8d ee 01 c0       	push   0xc001ee8d
c00152eb:	e8 66 ff ff ff       	call   c0015256 <displayProgramFault(char const*)>
c00152f0:	83 c4 10             	add    esp,0x10
c00152f3:	83 ec 0c             	sub    esp,0xc
c00152f6:	6a 00                	push   0x0
c00152f8:	e8 af ee ff ff       	call   c00141ac <Thr::terminateFromIRQ(int)>
c00152fd:	83 c4 10             	add    esp,0x10
c0015300:	eb 01                	jmp    c0015303 <gpFault(regs*, void*)+0x61>
c0015302:	90                   	nop
c0015303:	83 c4 1c             	add    esp,0x1c
c0015306:	c3                   	ret    

c0015307 <pgFault(regs*, void*)>:
c0015307:	83 ec 1c             	sub    esp,0x1c
c001530a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001530e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015311:	0f 20 d0             	mov    eax,cr2
c0015314:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001531c:	83 ec 04             	sub    esp,0x4
c001531f:	52                   	push   edx
c0015320:	50                   	push   eax
c0015321:	68 6c ef 01 c0       	push   0xc001ef6c
c0015326:	e8 bd 51 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001532b:	83 c4 10             	add    esp,0x10
c001532e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015333:	8b 00                	mov    eax,DWORD PTR [eax]
c0015335:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015338:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001533e:	0f 20 d2             	mov    edx,cr2
c0015341:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015345:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015349:	83 ec 08             	sub    esp,0x8
c001534c:	52                   	push   edx
c001534d:	50                   	push   eax
c001534e:	e8 c7 4d ff ff       	call   c000a11a <VAS::tryLoadBackOffDisk(unsigned long)>
c0015353:	83 c4 10             	add    esp,0x10
c0015356:	84 c0                	test   al,al
c0015358:	75 2e                	jne    c0015388 <pgFault(regs*, void*)+0x81>
c001535a:	83 ec 0c             	sub    esp,0xc
c001535d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015361:	e8 59 fb ff ff       	call   c0014ebf <displayDebugInfo(regs*)>
c0015366:	83 c4 10             	add    esp,0x10
c0015369:	83 ec 0c             	sub    esp,0xc
c001536c:	68 a6 ee 01 c0       	push   0xc001eea6
c0015371:	e8 e0 fe ff ff       	call   c0015256 <displayProgramFault(char const*)>
c0015376:	83 c4 10             	add    esp,0x10
c0015379:	83 ec 0c             	sub    esp,0xc
c001537c:	6a 00                	push   0x0
c001537e:	e8 29 ee ff ff       	call   c00141ac <Thr::terminateFromIRQ(int)>
c0015383:	83 c4 10             	add    esp,0x10
c0015386:	eb 01                	jmp    c0015389 <pgFault(regs*, void*)+0x82>
c0015388:	90                   	nop
c0015389:	83 c4 1c             	add    esp,0x1c
c001538c:	c3                   	ret    

c001538d <otherISRHandler(regs*, void*)>:
c001538d:	83 ec 0c             	sub    esp,0xc
c0015390:	83 ec 0c             	sub    esp,0xc
c0015393:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015397:	e8 23 fb ff ff       	call   c0014ebf <displayDebugInfo(regs*)>
c001539c:	83 c4 10             	add    esp,0x10
c001539f:	83 ec 0c             	sub    esp,0xc
c00153a2:	68 94 ef 01 c0       	push   0xc001ef94
c00153a7:	e8 aa fe ff ff       	call   c0015256 <displayProgramFault(char const*)>
c00153ac:	83 c4 10             	add    esp,0x10
c00153af:	83 ec 0c             	sub    esp,0xc
c00153b2:	6a 00                	push   0x0
c00153b4:	e8 f3 ed ff ff       	call   c00141ac <Thr::terminateFromIRQ(int)>
c00153b9:	83 c4 10             	add    esp,0x10
c00153bc:	90                   	nop
c00153bd:	83 c4 0c             	add    esp,0xc
c00153c0:	c3                   	ret    

c00153c1 <opcodeFault(regs*, void*)>:
c00153c1:	55                   	push   ebp
c00153c2:	89 e5                	mov    ebp,esp
c00153c4:	83 ec 08             	sub    esp,0x8
c00153c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ca:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153cd:	83 ec 08             	sub    esp,0x8
c00153d0:	50                   	push   eax
c00153d1:	68 b1 ee 01 c0       	push   0xc001eeb1
c00153d6:	e8 0d 51 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00153db:	83 c4 10             	add    esp,0x10
c00153de:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c00153e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153e9:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00153ef:	84 c0                	test   al,al
c00153f1:	74 21                	je     c0015414 <opcodeFault(regs*, void*)+0x53>
c00153f3:	83 ec 0c             	sub    esp,0xc
c00153f6:	68 bc ef 01 c0       	push   0xc001efbc
c00153fb:	e8 e8 50 ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0015400:	83 c4 10             	add    esp,0x10
c0015403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015406:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015409:	8d 50 19             	lea    edx,[eax+0x19]
c001540c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015412:	eb 2b                	jmp    c001543f <opcodeFault(regs*, void*)+0x7e>
c0015414:	83 ec 0c             	sub    esp,0xc
c0015417:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001541a:	e8 a0 fa ff ff       	call   c0014ebf <displayDebugInfo(regs*)>
c001541f:	83 c4 10             	add    esp,0x10
c0015422:	83 ec 0c             	sub    esp,0xc
c0015425:	68 bf ee 01 c0       	push   0xc001eebf
c001542a:	e8 27 fe ff ff       	call   c0015256 <displayProgramFault(char const*)>
c001542f:	83 c4 10             	add    esp,0x10
c0015432:	83 ec 0c             	sub    esp,0xc
c0015435:	6a 00                	push   0x0
c0015437:	e8 70 ed ff ff       	call   c00141ac <Thr::terminateFromIRQ(int)>
c001543c:	83 c4 10             	add    esp,0x10
c001543f:	c9                   	leave  
c0015440:	c3                   	ret    

c0015441 <i386SaveCoprocessor(void*)>:
c0015441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015445:	83 c0 3f             	add    eax,0x3f
c0015448:	83 e0 c0             	and    eax,0xffffffc0
c001544b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001544f:	ff 25 cc 3e 02 c0    	jmp    DWORD PTR ds:0xc0023ecc

c0015455 <i386LoadCoprocessor(void*)>:
c0015455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015459:	83 c0 3f             	add    eax,0x3f
c001545c:	83 e0 c0             	and    eax,0xffffffc0
c001545f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015463:	ff 25 c8 3e 02 c0    	jmp    DWORD PTR ds:0xc0023ec8

c0015469 <x87EmulHandler(regs*, void*)>:
c0015469:	53                   	push   ebx
c001546a:	83 ec 08             	sub    esp,0x8
c001546d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015472:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0015476:	74 10                	je     c0015488 <x87EmulHandler(regs*, void*)+0x1f>
c0015478:	83 ec 0c             	sub    esp,0xc
c001547b:	68 cc ee 01 c0       	push   0xc001eecc
c0015480:	e8 e6 ac ff ff       	call   c001016b <KePanic(char const*)>
c0015485:	83 c4 10             	add    esp,0x10
c0015488:	0f 20 c0             	mov    eax,cr0
c001548b:	a8 08                	test   al,0x8
c001548d:	74 59                	je     c00154e8 <x87EmulHandler(regs*, void*)+0x7f>
c001548f:	0f 06                	clts   
c0015491:	a1 c4 3e 02 c0       	mov    eax,ds:0xc0023ec4
c0015496:	85 c0                	test   eax,eax
c0015498:	74 0e                	je     c00154a8 <x87EmulHandler(regs*, void*)+0x3f>
c001549a:	83 ec 0c             	sub    esp,0xc
c001549d:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00154a0:	e8 9c ff ff ff       	call   c0015441 <i386SaveCoprocessor(void*)>
c00154a5:	83 c4 10             	add    esp,0x10
c00154a8:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00154ae:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00154b2:	75 12                	jne    c00154c6 <x87EmulHandler(regs*, void*)+0x5d>
c00154b4:	83 ec 0c             	sub    esp,0xc
c00154b7:	68 40 02 00 00       	push   0x240
c00154bc:	e8 08 23 ff ff       	call   c00077c9 <malloc>
c00154c1:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00154c4:	eb 10                	jmp    c00154d6 <x87EmulHandler(regs*, void*)+0x6d>
c00154c6:	83 ec 0c             	sub    esp,0xc
c00154c9:	a1 c4 3e 02 c0       	mov    eax,ds:0xc0023ec4
c00154ce:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00154d1:	e8 7f ff ff ff       	call   c0015455 <i386LoadCoprocessor(void*)>
c00154d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154db:	83 c4 10             	add    esp,0x10
c00154de:	a3 c4 3e 02 c0       	mov    ds:0xc0023ec4,eax
c00154e3:	83 c4 08             	add    esp,0x8
c00154e6:	5b                   	pop    ebx
c00154e7:	c3                   	ret    
c00154e8:	83 ec 0c             	sub    esp,0xc
c00154eb:	68 e0 ee 01 c0       	push   0xc001eee0
c00154f0:	e8 f3 4f ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00154f5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00154fd:	83 c4 18             	add    esp,0x18
c0015500:	5b                   	pop    ebx
c0015501:	e9 a6 ec ff ff       	jmp    c00141ac <Thr::terminateFromIRQ(int)>

c0015506 <HalInitialiseCoprocessor()>:
c0015506:	83 ec 10             	sub    esp,0x10
c0015509:	c7 05 c4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ec4,0x0
c0015513:	6a 00                	push   0x0
c0015515:	68 69 54 01 c0       	push   0xc0015469
c001551a:	6a 07                	push   0x7
c001551c:	e8 3b 69 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015521:	e8 9a 65 00 00       	call   c001bac0 <avxDetect>
c0015526:	83 c4 10             	add    esp,0x10
c0015529:	85 c0                	test   eax,eax
c001552b:	74 1c                	je     c0015549 <HalInitialiseCoprocessor()+0x43>
c001552d:	c7 05 cc 3e 02 c0 ea ba 01 c0 	mov    DWORD PTR ds:0xc0023ecc,0xc001baea
c0015537:	c7 05 c8 3e 02 c0 fb ba 01 c0 	mov    DWORD PTR ds:0xc0023ec8,0xc001bafb
c0015541:	83 c4 0c             	add    esp,0xc
c0015544:	e9 c3 65 00 00       	jmp    c001bb0c <avxInit>
c0015549:	e8 f2 67 00 00       	call   c001bd40 <absolutelyNoChanceInHell>
c001554e:	85 c0                	test   eax,eax
c0015550:	74 1c                	je     c001556e <HalInitialiseCoprocessor()+0x68>
c0015552:	c7 05 cc 3e 02 c0 58 bd 01 c0 	mov    DWORD PTR ds:0xc0023ecc,0xc001bd58
c001555c:	c7 05 c8 3e 02 c0 60 bd 01 c0 	mov    DWORD PTR ds:0xc0023ec8,0xc001bd60
c0015566:	83 c4 0c             	add    esp,0xc
c0015569:	e9 fa 67 00 00       	jmp    c001bd68 <sseInit>
c001556e:	e8 13 68 00 00       	call   c001bd86 <x87Detect>
c0015573:	85 c0                	test   eax,eax
c0015575:	74 1c                	je     c0015593 <HalInitialiseCoprocessor()+0x8d>
c0015577:	c7 05 cc 3e 02 c0 a1 bd 01 c0 	mov    DWORD PTR ds:0xc0023ecc,0xc001bda1
c0015581:	c7 05 c8 3e 02 c0 a8 bd 01 c0 	mov    DWORD PTR ds:0xc0023ec8,0xc001bda8
c001558b:	83 c4 0c             	add    esp,0xc
c001558e:	e9 1c 68 00 00       	jmp    c001bdaf <x87Init>
c0015593:	c7 05 cc 3e 02 c0 8c 4e 01 c0 	mov    DWORD PTR ds:0xc0023ecc,0xc0014e8c
c001559d:	c7 05 c8 3e 02 c0 8c 4e 01 c0 	mov    DWORD PTR ds:0xc0023ec8,0xc0014e8c
c00155a7:	0f 20 c0             	mov    eax,cr0
c00155aa:	83 c8 04             	or     eax,0x4
c00155ad:	0f 22 c0             	mov    cr0,eax
c00155b0:	83 c4 0c             	add    esp,0xc
c00155b3:	c3                   	ret    

c00155b4 <HalPanic(char const*)>:
c00155b4:	53                   	push   ebx
c00155b5:	83 ec 10             	sub    esp,0x10
c00155b8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00155bc:	fa                   	cli    
c00155bd:	53                   	push   ebx
c00155be:	68 f6 ee 01 c0       	push   0xc001eef6
c00155c3:	e8 20 4f ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c00155c8:	83 c4 0c             	add    esp,0xc
c00155cb:	6a 01                	push   0x1
c00155cd:	6a 0f                	push   0xf
c00155cf:	ff 35 c4 0b 02 c0    	push   DWORD PTR ds:0xc0020bc4
c00155d5:	e8 80 2c ff ff       	call   c000825a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00155da:	58                   	pop    eax
c00155db:	ff 35 c4 0b 02 c0    	push   DWORD PTR ds:0xc0020bc4
c00155e1:	e8 6c 2e ff ff       	call   c0008452 <VgaText::clearScreen()>
c00155e6:	5a                   	pop    edx
c00155e7:	59                   	pop    ecx
c00155e8:	68 a8 d7 01 c0       	push   0xc001d7a8
c00155ed:	ff 35 c4 0b 02 c0    	push   DWORD PTR ds:0xc0020bc4
c00155f3:	e8 9a 2c ff ff       	call   c0008292 <VgaText::setTitle(char*)>
c00155f8:	83 c4 0c             	add    esp,0xc
c00155fb:	6a 01                	push   0x1
c00155fd:	6a 0f                	push   0xf
c00155ff:	ff 35 c4 0b 02 c0    	push   DWORD PTR ds:0xc0020bc4
c0015605:	e8 50 2c ff ff       	call   c000825a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001560a:	58                   	pop    eax
c001560b:	5a                   	pop    edx
c001560c:	68 0f ef 01 c0       	push   0xc001ef0f
c0015611:	ff 35 c4 0b 02 c0    	push   DWORD PTR ds:0xc0020bc4
c0015617:	e8 2a 31 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c001561c:	83 c4 0c             	add    esp,0xc
c001561f:	6a 0f                	push   0xf
c0015621:	6a 01                	push   0x1
c0015623:	ff 35 c4 0b 02 c0    	push   DWORD PTR ds:0xc0020bc4
c0015629:	e8 2c 2c ff ff       	call   c000825a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001562e:	59                   	pop    ecx
c001562f:	58                   	pop    eax
c0015630:	68 18 ef 01 c0       	push   0xc001ef18
c0015635:	ff 35 c4 0b 02 c0    	push   DWORD PTR ds:0xc0020bc4
c001563b:	e8 06 31 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0015640:	83 c4 0c             	add    esp,0xc
c0015643:	6a 01                	push   0x1
c0015645:	6a 0f                	push   0xf
c0015647:	ff 35 c4 0b 02 c0    	push   DWORD PTR ds:0xc0020bc4
c001564d:	e8 08 2c ff ff       	call   c000825a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015652:	58                   	pop    eax
c0015653:	5a                   	pop    edx
c0015654:	68 5c ef 01 c0       	push   0xc001ef5c
c0015659:	ff 35 c4 0b 02 c0    	push   DWORD PTR ds:0xc0020bc4
c001565f:	e8 e2 30 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0015664:	59                   	pop    ecx
c0015665:	58                   	pop    eax
c0015666:	68 25 ef 01 c0       	push   0xc001ef25
c001566b:	ff 35 c4 0b 02 c0    	push   DWORD PTR ds:0xc0020bc4
c0015671:	e8 d0 30 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0015676:	58                   	pop    eax
c0015677:	5a                   	pop    edx
c0015678:	68 5f ef 01 c0       	push   0xc001ef5f
c001567d:	ff 35 c4 0b 02 c0    	push   DWORD PTR ds:0xc0020bc4
c0015683:	e8 be 30 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0015688:	59                   	pop    ecx
c0015689:	58                   	pop    eax
c001568a:	53                   	push   ebx
c001568b:	ff 35 c4 0b 02 c0    	push   DWORD PTR ds:0xc0020bc4
c0015691:	e8 b0 30 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0015696:	58                   	pop    eax
c0015697:	5a                   	pop    edx
c0015698:	68 5c ef 01 c0       	push   0xc001ef5c
c001569d:	ff 35 c4 0b 02 c0    	push   DWORD PTR ds:0xc0020bc4
c00156a3:	e8 9e 30 ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00156a8:	83 c4 10             	add    esp,0x10
c00156ab:	eb fe                	jmp    c00156ab <HalPanic(char const*)+0xf7>

c00156ad <HalQueryPerformanceCounter()>:
c00156ad:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c00156b2:	31 d2                	xor    edx,edx
c00156b4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00156ba:	31 c0                	xor    eax,eax
c00156bc:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00156c3:	74 02                	je     c00156c7 <HalQueryPerformanceCounter()+0x1a>
c00156c5:	0f 31                	rdtsc  
c00156c7:	c3                   	ret    

c00156c8 <HalInitialise()>:
c00156c8:	53                   	push   ebx
c00156c9:	83 ec 08             	sub    esp,0x8
c00156cc:	e8 be 69 ff ff       	call   c000c08f <setupINTS()>
c00156d1:	80 3d 40 34 02 c0 00 	cmp    BYTE PTR ds:0xc0023440,0x0
c00156d8:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c00156dd:	75 07                	jne    c00156e6 <HalInitialise()+0x1e>
c00156df:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00156e6:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00156ec:	83 e0 01             	and    eax,0x1
c00156ef:	a2 c0 3e 02 c0       	mov    ds:0xc0023ec0,al
c00156f4:	e8 a7 02 00 00       	call   c00159a0 <picOpen()>
c00156f9:	80 3d c0 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ec0,0x0
c0015700:	74 0a                	je     c001570c <HalInitialise()+0x44>
c0015702:	e8 e1 01 00 00       	call   c00158e8 <picDisable()>
c0015707:	e8 26 5d 00 00       	call   c001b432 <apicOpen()>
c001570c:	bb 0f 00 00 00       	mov    ebx,0xf
c0015711:	50                   	push   eax
c0015712:	6a 00                	push   0x0
c0015714:	68 8d 53 01 c0       	push   0xc001538d
c0015719:	6a 00                	push   0x0
c001571b:	e8 3c 67 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015720:	83 c4 0c             	add    esp,0xc
c0015723:	6a 00                	push   0x0
c0015725:	68 8d 53 01 c0       	push   0xc001538d
c001572a:	6a 01                	push   0x1
c001572c:	e8 2b 67 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015731:	83 c4 0c             	add    esp,0xc
c0015734:	6a 00                	push   0x0
c0015736:	68 8d 4e 01 c0       	push   0xc0014e8d
c001573b:	6a 02                	push   0x2
c001573d:	e8 1a 67 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015742:	83 c4 0c             	add    esp,0xc
c0015745:	6a 00                	push   0x0
c0015747:	68 8d 53 01 c0       	push   0xc001538d
c001574c:	6a 03                	push   0x3
c001574e:	e8 09 67 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015753:	83 c4 0c             	add    esp,0xc
c0015756:	6a 00                	push   0x0
c0015758:	68 8d 53 01 c0       	push   0xc001538d
c001575d:	6a 04                	push   0x4
c001575f:	e8 f8 66 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015764:	83 c4 0c             	add    esp,0xc
c0015767:	6a 00                	push   0x0
c0015769:	68 8d 53 01 c0       	push   0xc001538d
c001576e:	6a 05                	push   0x5
c0015770:	e8 e7 66 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015775:	83 c4 0c             	add    esp,0xc
c0015778:	6a 00                	push   0x0
c001577a:	68 c1 53 01 c0       	push   0xc00153c1
c001577f:	6a 06                	push   0x6
c0015781:	e8 d6 66 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015786:	83 c4 0c             	add    esp,0xc
c0015789:	6a 00                	push   0x0
c001578b:	68 a6 4e 01 c0       	push   0xc0014ea6
c0015790:	6a 08                	push   0x8
c0015792:	e8 c5 66 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015797:	83 c4 0c             	add    esp,0xc
c001579a:	6a 00                	push   0x0
c001579c:	68 8d 53 01 c0       	push   0xc001538d
c00157a1:	6a 09                	push   0x9
c00157a3:	e8 b4 66 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157a8:	83 c4 0c             	add    esp,0xc
c00157ab:	6a 00                	push   0x0
c00157ad:	68 8d 53 01 c0       	push   0xc001538d
c00157b2:	6a 0a                	push   0xa
c00157b4:	e8 a3 66 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157b9:	83 c4 0c             	add    esp,0xc
c00157bc:	6a 00                	push   0x0
c00157be:	68 8d 53 01 c0       	push   0xc001538d
c00157c3:	6a 0b                	push   0xb
c00157c5:	e8 92 66 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157ca:	83 c4 0c             	add    esp,0xc
c00157cd:	6a 00                	push   0x0
c00157cf:	68 a2 52 01 c0       	push   0xc00152a2
c00157d4:	6a 0d                	push   0xd
c00157d6:	e8 81 66 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157db:	83 c4 0c             	add    esp,0xc
c00157de:	6a 00                	push   0x0
c00157e0:	68 07 53 01 c0       	push   0xc0015307
c00157e5:	6a 0e                	push   0xe
c00157e7:	e8 70 66 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157ec:	83 c4 10             	add    esp,0x10
c00157ef:	50                   	push   eax
c00157f0:	6a 00                	push   0x0
c00157f2:	68 8d 53 01 c0       	push   0xc001538d
c00157f7:	53                   	push   ebx
c00157f8:	43                   	inc    ebx
c00157f9:	e8 5e 66 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157fe:	83 c4 10             	add    esp,0x10
c0015801:	83 fb 1e             	cmp    ebx,0x1e
c0015804:	75 e9                	jne    c00157ef <HalInitialise()+0x127>
c0015806:	50                   	push   eax
c0015807:	6a 00                	push   0x0
c0015809:	68 18 14 01 c0       	push   0xc0011418
c001580e:	6a 60                	push   0x60
c0015810:	e8 47 66 ff ff       	call   c000be5c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015815:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c001581a:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0015824:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c001582b:	e8 99 1f ff ff       	call   c00077c9 <malloc>
c0015830:	89 04 24             	mov    DWORD PTR [esp],eax
c0015833:	89 c3                	mov    ebx,eax
c0015835:	e8 2e 09 00 00       	call   c0016168 <RTC::RTC()>
c001583a:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0015844:	5a                   	pop    edx
c0015845:	59                   	pop    ecx
c0015846:	53                   	push   ebx
c0015847:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c001584d:	e8 d6 60 ff ff       	call   c000b928 <Device::addChild(Device*)>
c0015852:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015854:	6a 00                	push   0x0
c0015856:	6a 00                	push   0x0
c0015858:	6a 00                	push   0x0
c001585a:	53                   	push   ebx
c001585b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001585e:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0015863:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015869:	83 c4 28             	add    esp,0x28
c001586c:	5b                   	pop    ebx
c001586d:	c3                   	ret    

c001586e <HalMakeBeep(int)>:
c001586e:	53                   	push   ebx
c001586f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015873:	85 db                	test   ebx,ebx
c0015875:	75 07                	jne    c001587e <HalMakeBeep(int)+0x10>
c0015877:	e4 61                	in     al,0x61
c0015879:	83 e0 fc             	and    eax,0xfffffffc
c001587c:	eb 26                	jmp    c00158a4 <HalMakeBeep(int)+0x36>
c001587e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015883:	99                   	cdq    
c0015884:	f7 fb                	idiv   ebx
c0015886:	89 c1                	mov    ecx,eax
c0015888:	b0 b6                	mov    al,0xb6
c001588a:	e6 43                	out    0x43,al
c001588c:	88 c8                	mov    al,cl
c001588e:	e6 42                	out    0x42,al
c0015890:	89 c8                	mov    eax,ecx
c0015892:	c1 e8 08             	shr    eax,0x8
c0015895:	e6 42                	out    0x42,al
c0015897:	e4 61                	in     al,0x61
c0015899:	88 c2                	mov    dl,al
c001589b:	83 ca 03             	or     edx,0x3
c001589e:	38 c2                	cmp    dl,al
c00158a0:	74 04                	je     c00158a6 <HalMakeBeep(int)+0x38>
c00158a2:	88 d0                	mov    al,dl
c00158a4:	e6 61                	out    0x61,al
c00158a6:	5b                   	pop    ebx
c00158a7:	c3                   	ret    

c00158a8 <HalGetRand()>:
c00158a8:	31 c0                	xor    eax,eax
c00158aa:	c3                   	ret    

c00158ab <HalEndOfInterrupt(int)>:
c00158ab:	80 3d c0 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ec0,0x0
c00158b2:	74 23                	je     c00158d7 <HalEndOfInterrupt(int)+0x2c>
c00158b4:	83 ec 14             	sub    esp,0x14
c00158b7:	6a 1b                	push   0x1b
c00158b9:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c00158bf:	e8 3e 15 ff ff       	call   c0006e02 <Computer::rdmsr(unsigned int)>
c00158c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00158c9:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00158d3:	83 c4 1c             	add    esp,0x1c
c00158d6:	c3                   	ret    
c00158d7:	e9 54 02 00 00       	jmp    c0015b30 <picEOI(int)>

c00158dc <HalRestart()>:
c00158dc:	c3                   	ret    

c00158dd <HalShutdown()>:
c00158dd:	c3                   	ret    

c00158de <HalSleep()>:
c00158de:	c3                   	ret    
c00158df:	90                   	nop

c00158e0 <picIoWait()>:
c00158e0:	eb 00                	jmp    c00158e2 <picIoWait()+0x2>
c00158e2:	eb 00                	jmp    c00158e4 <picIoWait()+0x4>
c00158e4:	90                   	nop
c00158e5:	c3                   	ret    
c00158e6:	66 90                	xchg   ax,ax

c00158e8 <picDisable()>:
c00158e8:	83 ec 10             	sub    esp,0x10
c00158eb:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00158f2:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00158f7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00158fb:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015900:	ee                   	out    dx,al
c0015901:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0015908:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001590d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015911:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0015916:	ee                   	out    dx,al
c0015917:	90                   	nop
c0015918:	83 c4 10             	add    esp,0x10
c001591b:	c3                   	ret    

c001591c <picGetIRQReg(int)>:
c001591c:	83 ec 10             	sub    esp,0x10
c001591f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015923:	25 ff 00 00 00       	and    eax,0xff
c0015928:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001592f:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0015933:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015937:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001593c:	ee                   	out    dx,al
c001593d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015941:	25 ff 00 00 00       	and    eax,0xff
c0015946:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001594d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015951:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015955:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001595a:	ee                   	out    dx,al
c001595b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015962:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015967:	89 c2                	mov    edx,eax
c0015969:	ec                   	in     al,dx
c001596a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001596e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015972:	25 ff 00 00 00       	and    eax,0xff
c0015977:	c1 e0 08             	shl    eax,0x8
c001597a:	89 c1                	mov    ecx,eax
c001597c:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015983:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015988:	89 c2                	mov    edx,eax
c001598a:	ec                   	in     al,dx
c001598b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001598f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015993:	25 ff 00 00 00       	and    eax,0xff
c0015998:	09 c8                	or     eax,ecx
c001599a:	83 c4 10             	add    esp,0x10
c001599d:	c3                   	ret    
c001599e:	66 90                	xchg   ax,ax

c00159a0 <picOpen()>:
c00159a0:	83 ec 50             	sub    esp,0x50
c00159a3:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00159aa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00159af:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00159b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00159b7:	ee                   	out    dx,al
c00159b8:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00159bf:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00159c4:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00159c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00159cc:	ee                   	out    dx,al
c00159cd:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00159d5:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00159dd:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00159e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00159e8:	89 c2                	mov    edx,eax
c00159ea:	ec                   	in     al,dx
c00159eb:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00159ef:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00159f3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00159f7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00159fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a02:	89 c2                	mov    edx,eax
c0015a04:	ec                   	in     al,dx
c0015a05:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015a09:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015a0d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015a11:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015a18:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015a1d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015a21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a25:	ee                   	out    dx,al
c0015a26:	e8 b5 fe ff ff       	call   c00158e0 <picIoWait()>
c0015a2b:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015a32:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015a37:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015a3b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015a3f:	ee                   	out    dx,al
c0015a40:	e8 9b fe ff ff       	call   c00158e0 <picIoWait()>
c0015a45:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015a49:	25 ff 00 00 00       	and    eax,0xff
c0015a4e:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015a55:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015a59:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015a5d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a61:	ee                   	out    dx,al
c0015a62:	e8 79 fe ff ff       	call   c00158e0 <picIoWait()>
c0015a67:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015a6b:	25 ff 00 00 00       	and    eax,0xff
c0015a70:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015a77:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015a7b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015a7f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015a83:	ee                   	out    dx,al
c0015a84:	e8 57 fe ff ff       	call   c00158e0 <picIoWait()>
c0015a89:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015a90:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015a95:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015a99:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015a9d:	ee                   	out    dx,al
c0015a9e:	e8 3d fe ff ff       	call   c00158e0 <picIoWait()>
c0015aa3:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015aaa:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015aaf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015ab3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015ab7:	ee                   	out    dx,al
c0015ab8:	e8 23 fe ff ff       	call   c00158e0 <picIoWait()>
c0015abd:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015ac4:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015ac9:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015acd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015ad1:	ee                   	out    dx,al
c0015ad2:	e8 09 fe ff ff       	call   c00158e0 <picIoWait()>
c0015ad7:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015ade:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015ae3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015ae7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015aeb:	ee                   	out    dx,al
c0015aec:	e8 ef fd ff ff       	call   c00158e0 <picIoWait()>
c0015af1:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015af5:	25 ff 00 00 00       	and    eax,0xff
c0015afa:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015b01:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015b05:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015b09:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015b0d:	ee                   	out    dx,al
c0015b0e:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015b12:	25 ff 00 00 00       	and    eax,0xff
c0015b17:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015b1e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015b22:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015b26:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015b2a:	ee                   	out    dx,al
c0015b2b:	90                   	nop
c0015b2c:	83 c4 50             	add    esp,0x50
c0015b2f:	c3                   	ret    

c0015b30 <picEOI(int)>:
c0015b30:	83 ec 10             	sub    esp,0x10
c0015b33:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b38:	75 22                	jne    c0015b5c <picEOI(int)+0x2c>
c0015b3a:	6a 0b                	push   0xb
c0015b3c:	e8 db fd ff ff       	call   c001591c <picGetIRQReg(int)>
c0015b41:	83 c4 04             	add    esp,0x4
c0015b44:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015b49:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015b4e:	25 ff ff 00 00       	and    eax,0xffff
c0015b53:	25 80 00 00 00       	and    eax,0x80
c0015b58:	74 72                	je     c0015bcc <picEOI(int)+0x9c>
c0015b5a:	66 90                	xchg   ax,ax
c0015b5c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015b61:	75 31                	jne    c0015b94 <picEOI(int)+0x64>
c0015b63:	6a 0b                	push   0xb
c0015b65:	e8 b2 fd ff ff       	call   c001591c <picGetIRQReg(int)>
c0015b6a:	83 c4 04             	add    esp,0x4
c0015b6d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015b72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b76:	66 85 c0             	test   ax,ax
c0015b79:	78 19                	js     c0015b94 <picEOI(int)+0x64>
c0015b7b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015b82:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015b87:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015b8b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015b90:	ee                   	out    dx,al
c0015b91:	eb 3d                	jmp    c0015bd0 <picEOI(int)+0xa0>
c0015b93:	90                   	nop
c0015b94:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015b99:	7e 19                	jle    c0015bb4 <picEOI(int)+0x84>
c0015b9b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015ba2:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015ba7:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015bab:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015bb0:	ee                   	out    dx,al
c0015bb1:	8d 76 00             	lea    esi,[esi+0x0]
c0015bb4:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015bbb:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015bc0:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015bc4:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015bc9:	ee                   	out    dx,al
c0015bca:	eb 04                	jmp    c0015bd0 <picEOI(int)+0xa0>
c0015bcc:	90                   	nop
c0015bcd:	8d 76 00             	lea    esi,[esi+0x0]
c0015bd0:	83 c4 10             	add    esp,0x10
c0015bd3:	c3                   	ret    

c0015bd4 <RTC::open(int, int, void*)>:
c0015bd4:	31 c0                	xor    eax,eax
c0015bd6:	c3                   	ret    
c0015bd7:	90                   	nop

c0015bd8 <RTC::close(int, int, void*)>:
c0015bd8:	31 c0                	xor    eax,eax
c0015bda:	c3                   	ret    
c0015bdb:	90                   	nop

c0015bdc <RTC::timeInSecondsUTC()>:
c0015bdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015be0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015be6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015bec:	c3                   	ret    
c0015bed:	90                   	nop

c0015bee <RTC::timeInDatetimeUTC()>:
c0015bee:	53                   	push   ebx
c0015bef:	83 ec 14             	sub    esp,0x14
c0015bf2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015bf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bfa:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bfc:	50                   	push   eax
c0015bfd:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015c00:	83 c4 0c             	add    esp,0xc
c0015c03:	52                   	push   edx
c0015c04:	50                   	push   eax
c0015c05:	53                   	push   ebx
c0015c06:	e8 91 5a ff ff       	call   c000b69c <secondsToDatetime(unsigned long long)>
c0015c0b:	89 d8                	mov    eax,ebx
c0015c0d:	83 c4 14             	add    esp,0x14
c0015c10:	5b                   	pop    ebx
c0015c11:	c2 04 00             	ret    0x4

c0015c14 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015c14:	56                   	push   esi
c0015c15:	53                   	push   ebx
c0015c16:	83 ec 14             	sub    esp,0x14
c0015c19:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c1f:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015c22:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015c26:	52                   	push   edx
c0015c27:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c2f:	50                   	push   eax
c0015c30:	e8 67 5a ff ff       	call   c000b69c <secondsToDatetime(unsigned long long)>
c0015c35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c39:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c3d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015c41:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015c45:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015c49:	89 f0                	mov    eax,esi
c0015c4b:	83 c4 20             	add    esp,0x20
c0015c4e:	5b                   	pop    ebx
c0015c4f:	5e                   	pop    esi
c0015c50:	ff e0                	jmp    eax

c0015c52 <RTC::~RTC()>:
c0015c52:	83 ec 0c             	sub    esp,0xc
c0015c55:	ba fc ef 01 c0       	mov    edx,0xc001effc
c0015c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c5e:	89 10                	mov    DWORD PTR [eax],edx
c0015c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c64:	83 ec 0c             	sub    esp,0xc
c0015c67:	50                   	push   eax
c0015c68:	e8 b3 57 ff ff       	call   c000b420 <Clock::~Clock()>
c0015c6d:	83 c4 10             	add    esp,0x10
c0015c70:	90                   	nop
c0015c71:	83 c4 0c             	add    esp,0xc
c0015c74:	c3                   	ret    
c0015c75:	90                   	nop

c0015c76 <RTC::~RTC()>:
c0015c76:	83 ec 0c             	sub    esp,0xc
c0015c79:	83 ec 0c             	sub    esp,0xc
c0015c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c80:	e8 cd ff ff ff       	call   c0015c52 <RTC::~RTC()>
c0015c85:	83 c4 10             	add    esp,0x10
c0015c88:	83 ec 08             	sub    esp,0x8
c0015c8b:	68 60 01 00 00       	push   0x160
c0015c90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c94:	e8 59 47 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c0015c99:	83 c4 10             	add    esp,0x10
c0015c9c:	83 c4 0c             	add    esp,0xc
c0015c9f:	c3                   	ret    

c0015ca0 <RTC::get_update_in_progress_flag()>:
c0015ca0:	83 ec 14             	sub    esp,0x14
c0015ca3:	6a 0a                	push   0xa
c0015ca5:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015cab:	e8 06 12 ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c0015cb0:	83 c4 1c             	add    esp,0x1c
c0015cb3:	c0 e8 07             	shr    al,0x7
c0015cb6:	c3                   	ret    
c0015cb7:	90                   	nop

c0015cb8 <RTC::completeRTCRefresh()>:
c0015cb8:	55                   	push   ebp
c0015cb9:	57                   	push   edi
c0015cba:	56                   	push   esi
c0015cbb:	53                   	push   ebx
c0015cbc:	83 ec 2c             	sub    esp,0x2c
c0015cbf:	8b 1d 4c 31 02 c0    	mov    ebx,DWORD PTR ds:0xc002314c
c0015cc5:	83 ec 0c             	sub    esp,0xc
c0015cc8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015ccc:	e8 cf ff ff ff       	call   c0015ca0 <RTC::get_update_in_progress_flag()>
c0015cd1:	83 c4 10             	add    esp,0x10
c0015cd4:	84 c0                	test   al,al
c0015cd6:	74 0e                	je     c0015ce6 <RTC::completeRTCRefresh()+0x2e>
c0015cd8:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015cde:	3b 05 4c 31 02 c0    	cmp    eax,DWORD PTR ds:0xc002314c
c0015ce4:	73 df                	jae    c0015cc5 <RTC::completeRTCRefresh()+0xd>
c0015ce6:	55                   	push   ebp
c0015ce7:	55                   	push   ebp
c0015ce8:	6a 00                	push   0x0
c0015cea:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015cf0:	e8 c1 11 ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c0015cf5:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015cf9:	58                   	pop    eax
c0015cfa:	5a                   	pop    edx
c0015cfb:	6a 02                	push   0x2
c0015cfd:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015d03:	e8 ae 11 ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c0015d08:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015d0c:	59                   	pop    ecx
c0015d0d:	5b                   	pop    ebx
c0015d0e:	6a 04                	push   0x4
c0015d10:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015d16:	e8 9b 11 ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c0015d1b:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015d1f:	5e                   	pop    esi
c0015d20:	5f                   	pop    edi
c0015d21:	6a 07                	push   0x7
c0015d23:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015d29:	e8 88 11 ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c0015d2e:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015d32:	5d                   	pop    ebp
c0015d33:	58                   	pop    eax
c0015d34:	6a 08                	push   0x8
c0015d36:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015d3c:	e8 75 11 ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c0015d41:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015d45:	58                   	pop    eax
c0015d46:	5a                   	pop    edx
c0015d47:	6a 09                	push   0x9
c0015d49:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015d4f:	e8 62 11 ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c0015d54:	83 c4 10             	add    esp,0x10
c0015d57:	0f b6 e8             	movzx  ebp,al
c0015d5a:	8b 1d 4c 31 02 c0    	mov    ebx,DWORD PTR ds:0xc002314c
c0015d60:	83 ec 0c             	sub    esp,0xc
c0015d63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d67:	e8 34 ff ff ff       	call   c0015ca0 <RTC::get_update_in_progress_flag()>
c0015d6c:	83 c4 10             	add    esp,0x10
c0015d6f:	84 c0                	test   al,al
c0015d71:	74 0e                	je     c0015d81 <RTC::completeRTCRefresh()+0xc9>
c0015d73:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d79:	3b 05 4c 31 02 c0    	cmp    eax,DWORD PTR ds:0xc002314c
c0015d7f:	73 df                	jae    c0015d60 <RTC::completeRTCRefresh()+0xa8>
c0015d81:	50                   	push   eax
c0015d82:	50                   	push   eax
c0015d83:	6a 00                	push   0x0
c0015d85:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015d8b:	e8 26 11 ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c0015d90:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015d94:	58                   	pop    eax
c0015d95:	5a                   	pop    edx
c0015d96:	6a 02                	push   0x2
c0015d98:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015d9e:	e8 13 11 ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c0015da3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015da7:	59                   	pop    ecx
c0015da8:	5b                   	pop    ebx
c0015da9:	6a 04                	push   0x4
c0015dab:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015db1:	e8 00 11 ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c0015db6:	5e                   	pop    esi
c0015db7:	88 c3                	mov    bl,al
c0015db9:	5f                   	pop    edi
c0015dba:	6a 07                	push   0x7
c0015dbc:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015dc2:	e8 ef 10 ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c0015dc7:	89 c6                	mov    esi,eax
c0015dc9:	58                   	pop    eax
c0015dca:	5a                   	pop    edx
c0015dcb:	6a 08                	push   0x8
c0015dcd:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015dd3:	e8 de 10 ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c0015dd8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015ddc:	59                   	pop    ecx
c0015ddd:	5f                   	pop    edi
c0015dde:	6a 09                	push   0x9
c0015de0:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015de6:	e8 cb 10 ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c0015deb:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015def:	0f b6 f8             	movzx  edi,al
c0015df2:	83 c4 10             	add    esp,0x10
c0015df5:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015df9:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015dfd:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015e01:	89 f1                	mov    ecx,esi
c0015e03:	0f 94 c0             	sete   al
c0015e06:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015e0a:	0f 94 c2             	sete   dl
c0015e0d:	21 d0                	and    eax,edx
c0015e0f:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015e13:	0f 94 c2             	sete   dl
c0015e16:	21 c2                	and    edx,eax
c0015e18:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015e1c:	0f 94 c0             	sete   al
c0015e1f:	21 d0                	and    eax,edx
c0015e21:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015e25:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015e29:	0f 94 c1             	sete   cl
c0015e2c:	84 c8                	test   al,cl
c0015e2e:	75 29                	jne    c0015e59 <RTC::completeRTCRefresh()+0x1a1>
c0015e30:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015e34:	89 fd                	mov    ebp,edi
c0015e36:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015e3a:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015e3e:	89 f0                	mov    eax,esi
c0015e40:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015e44:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e48:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e4c:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e50:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015e54:	e9 01 ff ff ff       	jmp    c0015d5a <RTC::completeRTCRefresh()+0xa2>
c0015e59:	39 fd                	cmp    ebp,edi
c0015e5b:	75 d3                	jne    c0015e30 <RTC::completeRTCRefresh()+0x178>
c0015e5d:	55                   	push   ebp
c0015e5e:	55                   	push   ebp
c0015e5f:	6a 0b                	push   0xb
c0015e61:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015e67:	e8 4a 10 ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c0015e6c:	83 c4 10             	add    esp,0x10
c0015e6f:	89 c5                	mov    ebp,eax
c0015e71:	a8 04                	test   al,0x4
c0015e73:	75 78                	jne    c0015eed <RTC::completeRTCRefresh()+0x235>
c0015e75:	b1 0a                	mov    cl,0xa
c0015e77:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015e7b:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015e7f:	83 e2 0f             	and    edx,0xf
c0015e82:	c0 e8 04             	shr    al,0x4
c0015e85:	c1 ef 04             	shr    edi,0x4
c0015e88:	f6 e1                	mul    cl
c0015e8a:	6b ff 0a             	imul   edi,edi,0xa
c0015e8d:	01 d0                	add    eax,edx
c0015e8f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015e93:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015e97:	83 e2 0f             	and    edx,0xf
c0015e9a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015e9e:	c0 e8 04             	shr    al,0x4
c0015ea1:	f6 e1                	mul    cl
c0015ea3:	01 d0                	add    eax,edx
c0015ea5:	88 da                	mov    dl,bl
c0015ea7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015eab:	83 e2 0f             	and    edx,0xf
c0015eae:	88 d8                	mov    al,bl
c0015eb0:	83 e3 80             	and    ebx,0xffffff80
c0015eb3:	c0 e8 04             	shr    al,0x4
c0015eb6:	83 e0 07             	and    eax,0x7
c0015eb9:	f6 e1                	mul    cl
c0015ebb:	01 d0                	add    eax,edx
c0015ebd:	89 f2                	mov    edx,esi
c0015ebf:	09 c3                	or     ebx,eax
c0015ec1:	83 e2 0f             	and    edx,0xf
c0015ec4:	89 f0                	mov    eax,esi
c0015ec6:	c0 e8 04             	shr    al,0x4
c0015ec9:	f6 e1                	mul    cl
c0015ecb:	8d 34 02             	lea    esi,[edx+eax*1]
c0015ece:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015ed2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015ed6:	83 e2 0f             	and    edx,0xf
c0015ed9:	c0 e8 04             	shr    al,0x4
c0015edc:	f6 e1                	mul    cl
c0015ede:	01 d0                	add    eax,edx
c0015ee0:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015ee4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ee8:	83 e0 0f             	and    eax,0xf
c0015eeb:	01 c7                	add    edi,eax
c0015eed:	83 e5 02             	and    ebp,0x2
c0015ef0:	75 14                	jne    c0015f06 <RTC::completeRTCRefresh()+0x24e>
c0015ef2:	84 db                	test   bl,bl
c0015ef4:	79 10                	jns    c0015f06 <RTC::completeRTCRefresh()+0x24e>
c0015ef6:	83 e3 7f             	and    ebx,0x7f
c0015ef9:	b9 18 00 00 00       	mov    ecx,0x18
c0015efe:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015f01:	99                   	cdq    
c0015f02:	f7 f9                	idiv   ecx
c0015f04:	88 d3                	mov    bl,dl
c0015f06:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015f0c:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015f12:	77 06                	ja     c0015f1a <RTC::completeRTCRefresh()+0x262>
c0015f14:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015f1a:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015f1f:	31 d2                	xor    edx,edx
c0015f21:	c1 e1 10             	shl    ecx,0x10
c0015f24:	89 d7                	mov    edi,edx
c0015f26:	c1 e5 10             	shl    ebp,0x10
c0015f29:	31 c0                	xor    eax,eax
c0015f2b:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015f31:	09 cf                	or     edi,ecx
c0015f33:	89 fa                	mov    edx,edi
c0015f35:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015f39:	88 da                	mov    dl,bl
c0015f3b:	89 f3                	mov    ebx,esi
c0015f3d:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015f41:	88 d8                	mov    al,bl
c0015f43:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015f47:	0f b7 c8             	movzx  ecx,ax
c0015f4a:	09 e9                	or     ecx,ebp
c0015f4c:	89 c8                	mov    eax,ecx
c0015f4e:	51                   	push   ecx
c0015f4f:	51                   	push   ecx
c0015f50:	52                   	push   edx
c0015f51:	50                   	push   eax
c0015f52:	e8 b8 55 ff ff       	call   c000b50f <datetimeToSeconds(datetime_t)>
c0015f57:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015f5b:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015f61:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015f67:	83 c4 3c             	add    esp,0x3c
c0015f6a:	5b                   	pop    ebx
c0015f6b:	5e                   	pop    esi
c0015f6c:	5f                   	pop    edi
c0015f6d:	5d                   	pop    ebp
c0015f6e:	c3                   	ret    
c0015f6f:	90                   	nop

c0015f70 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015f70:	55                   	push   ebp
c0015f71:	57                   	push   edi
c0015f72:	56                   	push   esi
c0015f73:	53                   	push   ebx
c0015f74:	83 ec 30             	sub    esp,0x30
c0015f77:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015f7b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015f7f:	6a 00                	push   0x0
c0015f81:	6a 00                	push   0x0
c0015f83:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015f89:	e8 3e 10 ff ff       	call   c0006fcc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015f8e:	83 c4 0c             	add    esp,0xc
c0015f91:	6a 00                	push   0x0
c0015f93:	6a 02                	push   0x2
c0015f95:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015f9b:	e8 2c 10 ff ff       	call   c0006fcc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015fa0:	31 d2                	xor    edx,edx
c0015fa2:	89 f9                	mov    ecx,edi
c0015fa4:	89 f8                	mov    eax,edi
c0015fa6:	c1 e9 10             	shr    ecx,0x10
c0015fa9:	0f b6 c4             	movzx  eax,ah
c0015fac:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015fb0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015fb4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015fb8:	b9 64 00 00 00       	mov    ecx,0x64
c0015fbd:	89 f0                	mov    eax,esi
c0015fbf:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015fc3:	89 f0                	mov    eax,esi
c0015fc5:	0f b6 c4             	movzx  eax,ah
c0015fc8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015fcc:	89 f0                	mov    eax,esi
c0015fce:	c1 e8 10             	shr    eax,0x10
c0015fd1:	66 f7 f1             	div    cx
c0015fd4:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015fd9:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015fde:	59                   	pop    ecx
c0015fdf:	5b                   	pop    ebx
c0015fe0:	89 fb                	mov    ebx,edi
c0015fe2:	6a 0b                	push   0xb
c0015fe4:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0015fea:	e8 c7 0e ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c0015fef:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015ff3:	83 c4 10             	add    esp,0x10
c0015ff6:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015ffb:	75 74                	jne    c0016071 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015ffd:	b2 0a                	mov    dl,0xa
c0015fff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016003:	0f b6 c1             	movzx  eax,cl
c0016006:	f6 f2                	div    dl
c0016008:	88 c3                	mov    bl,al
c001600a:	88 e0                	mov    al,ah
c001600c:	c1 e3 04             	shl    ebx,0x4
c001600f:	09 c3                	or     ebx,eax
c0016011:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0016016:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c001601a:	f6 f2                	div    dl
c001601c:	88 c1                	mov    cl,al
c001601e:	88 e0                	mov    al,ah
c0016020:	c1 e1 04             	shl    ecx,0x4
c0016023:	09 c1                	or     ecx,eax
c0016025:	89 f8                	mov    eax,edi
c0016027:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001602b:	0f b6 c0             	movzx  eax,al
c001602e:	f6 f2                	div    dl
c0016030:	88 c3                	mov    bl,al
c0016032:	88 e0                	mov    al,ah
c0016034:	c1 e3 04             	shl    ebx,0x4
c0016037:	09 c3                	or     ebx,eax
c0016039:	89 f0                	mov    eax,esi
c001603b:	0f b6 c0             	movzx  eax,al
c001603e:	f6 f2                	div    dl
c0016040:	88 c1                	mov    cl,al
c0016042:	88 e0                	mov    al,ah
c0016044:	c1 e1 04             	shl    ecx,0x4
c0016047:	09 c1                	or     ecx,eax
c0016049:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001604e:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0016052:	f6 f2                	div    dl
c0016054:	88 c1                	mov    cl,al
c0016056:	88 e0                	mov    al,ah
c0016058:	c1 e1 04             	shl    ecx,0x4
c001605b:	09 c1                	or     ecx,eax
c001605d:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0016062:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0016066:	f6 f2                	div    dl
c0016068:	89 c5                	mov    ebp,eax
c001606a:	88 e0                	mov    al,ah
c001606c:	c1 e5 04             	shl    ebp,0x4
c001606f:	09 c5                	or     ebp,eax
c0016071:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0016076:	75 17                	jne    c001608f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016078:	80 fb 0b             	cmp    bl,0xb
c001607b:	76 0c                	jbe    c0016089 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c001607d:	80 eb 0c             	sub    bl,0xc
c0016080:	75 02                	jne    c0016084 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0016082:	b3 0c                	mov    bl,0xc
c0016084:	83 cb 80             	or     ebx,0xffffff80
c0016087:	eb 06                	jmp    c001608f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016089:	84 db                	test   bl,bl
c001608b:	75 02                	jne    c001608f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001608d:	b3 0c                	mov    bl,0xc
c001608f:	0f b6 db             	movzx  ebx,bl
c0016092:	50                   	push   eax
c0016093:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016098:	50                   	push   eax
c0016099:	6a 00                	push   0x0
c001609b:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c00160a1:	e8 26 0f ff ff       	call   c0006fcc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160a6:	83 c4 0c             	add    esp,0xc
c00160a9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00160ae:	50                   	push   eax
c00160af:	6a 02                	push   0x2
c00160b1:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c00160b7:	e8 10 0f ff ff       	call   c0006fcc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160bc:	83 c4 0c             	add    esp,0xc
c00160bf:	53                   	push   ebx
c00160c0:	6a 04                	push   0x4
c00160c2:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c00160c8:	e8 ff 0e ff ff       	call   c0006fcc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160cd:	83 c4 0c             	add    esp,0xc
c00160d0:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00160d5:	50                   	push   eax
c00160d6:	6a 07                	push   0x7
c00160d8:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c00160de:	e8 e9 0e ff ff       	call   c0006fcc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160e3:	83 c4 0c             	add    esp,0xc
c00160e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00160eb:	50                   	push   eax
c00160ec:	6a 08                	push   0x8
c00160ee:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c00160f4:	e8 d3 0e ff ff       	call   c0006fcc <Computer::writeCMOS(unsigned char, unsigned char)>
c00160f9:	83 c4 0c             	add    esp,0xc
c00160fc:	89 e8                	mov    eax,ebp
c00160fe:	0f b6 e8             	movzx  ebp,al
c0016101:	55                   	push   ebp
c0016102:	6a 09                	push   0x9
c0016104:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c001610a:	e8 bd 0e ff ff       	call   c0006fcc <Computer::writeCMOS(unsigned char, unsigned char)>
c001610f:	5a                   	pop    edx
c0016110:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016114:	e8 9f fb ff ff       	call   c0015cb8 <RTC::completeRTCRefresh()>
c0016119:	83 c4 3c             	add    esp,0x3c
c001611c:	b0 01                	mov    al,0x1
c001611e:	5b                   	pop    ebx
c001611f:	5e                   	pop    esi
c0016120:	5f                   	pop    edi
c0016121:	5d                   	pop    ebp
c0016122:	c3                   	ret    

c0016123 <rtcIRQHandler(regs*, void*)>:
c0016123:	53                   	push   ebx
c0016124:	83 ec 10             	sub    esp,0x10
c0016127:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001612b:	6a 0c                	push   0xc
c001612d:	ff 35 78 0b 02 c0    	push   DWORD PTR ds:0xc0020b78
c0016133:	e8 7e 0d ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c0016138:	83 c4 10             	add    esp,0x10
c001613b:	84 c0                	test   al,al
c001613d:	79 24                	jns    c0016163 <rtcIRQHandler(regs*, void*)+0x40>
c001613f:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0016146:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001614d:	66 ff 05 d4 3e 02 c0 	inc    WORD PTR ds:0xc0023ed4
c0016154:	75 0d                	jne    c0016163 <rtcIRQHandler(regs*, void*)+0x40>
c0016156:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001615a:	83 c4 08             	add    esp,0x8
c001615d:	5b                   	pop    ebx
c001615e:	e9 55 fb ff ff       	jmp    c0015cb8 <RTC::completeRTCRefresh()>
c0016163:	83 c4 08             	add    esp,0x8
c0016166:	5b                   	pop    ebx
c0016167:	c3                   	ret    

c0016168 <RTC::RTC()>:
c0016168:	83 ec 1c             	sub    esp,0x1c
c001616b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001616f:	83 ec 08             	sub    esp,0x8
c0016172:	68 df ef 01 c0       	push   0xc001efdf
c0016177:	50                   	push   eax
c0016178:	e8 6d 52 ff ff       	call   c000b3ea <Clock::Clock(char const*)>
c001617d:	83 c4 10             	add    esp,0x10
c0016180:	ba fc ef 01 c0       	mov    edx,0xc001effc
c0016185:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016189:	89 10                	mov    DWORD PTR [eax],edx
c001618b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001618f:	83 ec 0c             	sub    esp,0xc
c0016192:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016196:	6a 01                	push   0x1
c0016198:	68 23 61 01 c0       	push   0xc0016123
c001619d:	6a 08                	push   0x8
c001619f:	50                   	push   eax
c00161a0:	e8 2f 57 ff ff       	call   c000b8d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00161a5:	83 c4 20             	add    esp,0x20
c00161a8:	89 c2                	mov    edx,eax
c00161aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161ae:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00161b4:	fa                   	cli    
c00161b5:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c00161ba:	40                   	inc    eax
c00161bb:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c00161c0:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c00161c5:	83 ec 08             	sub    esp,0x8
c00161c8:	6a 0b                	push   0xb
c00161ca:	50                   	push   eax
c00161cb:	e8 e6 0c ff ff       	call   c0006eb6 <Computer::readCMOS(unsigned char)>
c00161d0:	83 c4 10             	add    esp,0x10
c00161d3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00161d7:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c00161dc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00161e0:	83 ca 10             	or     edx,0x10
c00161e3:	81 e2 ff 00 00 00    	and    edx,0xff
c00161e9:	83 ec 04             	sub    esp,0x4
c00161ec:	52                   	push   edx
c00161ed:	6a 0b                	push   0xb
c00161ef:	50                   	push   eax
c00161f0:	e8 d7 0d ff ff       	call   c0006fcc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161f5:	83 c4 10             	add    esp,0x10
c00161f8:	83 ec 0c             	sub    esp,0xc
c00161fb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161ff:	e8 b4 fa ff ff       	call   c0015cb8 <RTC::completeRTCRefresh()>
c0016204:	83 c4 10             	add    esp,0x10
c0016207:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c001620c:	48                   	dec    eax
c001620d:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c0016212:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c0016217:	85 c0                	test   eax,eax
c0016219:	75 01                	jne    c001621c <RTC::RTC()+0xb4>
c001621b:	fb                   	sti    
c001621c:	90                   	nop
c001621d:	83 c4 1c             	add    esp,0x1c
c0016220:	c3                   	ret    
c0016221:	66 90                	xchg   ax,ax
c0016223:	90                   	nop

c0016224 <HalConsoleScroll(int, int)>:
c0016224:	83 ec 10             	sub    esp,0x10
c0016227:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001622f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0016237:	90                   	nop
c0016238:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001623d:	0f 8f e1 00 00 00    	jg     c0016324 <HalConsoleScroll(int, int)+0x100>
c0016243:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001624b:	90                   	nop
c001624c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0016254:	0f 8f be 00 00 00    	jg     c0016318 <HalConsoleScroll(int, int)+0xf4>
c001625a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001625e:	89 d0                	mov    eax,edx
c0016260:	c1 e0 02             	shl    eax,0x2
c0016263:	01 d0                	add    eax,edx
c0016265:	c1 e0 05             	shl    eax,0x5
c0016268:	89 c2                	mov    edx,eax
c001626a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001626e:	01 d0                	add    eax,edx
c0016270:	89 c2                	mov    edx,eax
c0016272:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016276:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016279:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001627d:	89 d0                	mov    eax,edx
c001627f:	c1 e0 02             	shl    eax,0x2
c0016282:	01 d0                	add    eax,edx
c0016284:	c1 e0 05             	shl    eax,0x5
c0016287:	89 c2                	mov    edx,eax
c0016289:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001628d:	01 d0                	add    eax,edx
c001628f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0016295:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016299:	01 c2                	add    edx,eax
c001629b:	8a 01                	mov    al,BYTE PTR [ecx]
c001629d:	88 02                	mov    BYTE PTR [edx],al
c001629f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00162a4:	75 66                	jne    c001630c <HalConsoleScroll(int, int)+0xe8>
c00162a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162aa:	83 e0 01             	and    eax,0x1
c00162ad:	74 39                	je     c00162e8 <HalConsoleScroll(int, int)+0xc4>
c00162af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00162b3:	83 e0 0f             	and    eax,0xf
c00162b6:	88 c2                	mov    dl,al
c00162b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162bc:	c1 e0 04             	shl    eax,0x4
c00162bf:	88 d1                	mov    cl,dl
c00162c1:	09 c1                	or     ecx,eax
c00162c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162c7:	89 d0                	mov    eax,edx
c00162c9:	c1 e0 02             	shl    eax,0x2
c00162cc:	01 d0                	add    eax,edx
c00162ce:	c1 e0 05             	shl    eax,0x5
c00162d1:	89 c2                	mov    edx,eax
c00162d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162d7:	01 d0                	add    eax,edx
c00162d9:	89 c2                	mov    edx,eax
c00162db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162df:	01 d0                	add    eax,edx
c00162e1:	88 ca                	mov    dl,cl
c00162e3:	88 10                	mov    BYTE PTR [eax],dl
c00162e5:	eb 25                	jmp    c001630c <HalConsoleScroll(int, int)+0xe8>
c00162e7:	90                   	nop
c00162e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00162ec:	89 d0                	mov    eax,edx
c00162ee:	c1 e0 02             	shl    eax,0x2
c00162f1:	01 d0                	add    eax,edx
c00162f3:	c1 e0 05             	shl    eax,0x5
c00162f6:	89 c2                	mov    edx,eax
c00162f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00162fc:	01 d0                	add    eax,edx
c00162fe:	89 c2                	mov    edx,eax
c0016300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016304:	01 d0                	add    eax,edx
c0016306:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0016309:	8d 76 00             	lea    esi,[esi+0x0]
c001630c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0016310:	e9 37 ff ff ff       	jmp    c001624c <HalConsoleScroll(int, int)+0x28>
c0016315:	8d 76 00             	lea    esi,[esi+0x0]
c0016318:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001631c:	e9 17 ff ff ff       	jmp    c0016238 <HalConsoleScroll(int, int)+0x14>
c0016321:	8d 76 00             	lea    esi,[esi+0x0]
c0016324:	90                   	nop
c0016325:	83 c4 10             	add    esp,0x10
c0016328:	c3                   	ret    
c0016329:	8d 76 00             	lea    esi,[esi+0x0]

c001632c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001632c:	83 ec 14             	sub    esp,0x14
c001632f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016333:	88 04 24             	mov    BYTE PTR [esp],al
c0016336:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016339:	25 ff 00 00 00       	and    eax,0xff
c001633e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016342:	89 d1                	mov    ecx,edx
c0016344:	83 e1 0f             	and    ecx,0xf
c0016347:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001634b:	c1 e2 04             	shl    edx,0x4
c001634e:	81 e2 ff 00 00 00    	and    edx,0xff
c0016354:	09 ca                	or     edx,ecx
c0016356:	c1 e2 08             	shl    edx,0x8
c0016359:	09 d0                	or     eax,edx
c001635b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016360:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0016368:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001636c:	89 d0                	mov    eax,edx
c001636e:	c1 e0 02             	shl    eax,0x2
c0016371:	01 d0                	add    eax,edx
c0016373:	c1 e0 04             	shl    eax,0x4
c0016376:	89 c2                	mov    edx,eax
c0016378:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001637c:	01 d0                	add    eax,edx
c001637e:	01 c0                	add    eax,eax
c0016380:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0016384:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016388:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001638d:	66 89 02             	mov    WORD PTR [edx],ax
c0016390:	90                   	nop
c0016391:	83 c4 14             	add    esp,0x14
c0016394:	c3                   	ret    
c0016395:	8d 76 00             	lea    esi,[esi+0x0]

c0016398 <HalConsoleCursorUpdate(int, int)>:
c0016398:	83 ec 20             	sub    esp,0x20
c001639b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001639f:	89 c2                	mov    edx,eax
c00163a1:	89 d0                	mov    eax,edx
c00163a3:	c1 e0 02             	shl    eax,0x2
c00163a6:	01 d0                	add    eax,edx
c00163a8:	c1 e0 04             	shl    eax,0x4
c00163ab:	89 c2                	mov    edx,eax
c00163ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00163b1:	01 d0                	add    eax,edx
c00163b3:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00163b8:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00163bf:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00163c4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00163c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163cc:	ee                   	out    dx,al
c00163cd:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00163d2:	25 ff 00 00 00       	and    eax,0xff
c00163d7:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00163de:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00163e2:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00163e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00163ea:	ee                   	out    dx,al
c00163eb:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00163f2:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00163f7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00163fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00163ff:	ee                   	out    dx,al
c0016400:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016405:	66 c1 e8 08          	shr    ax,0x8
c0016409:	25 ff 00 00 00       	and    eax,0xff
c001640e:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0016415:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016419:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001641d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016421:	ee                   	out    dx,al
c0016422:	90                   	nop
c0016423:	83 c4 20             	add    esp,0x20
c0016426:	c3                   	ret    
c0016427:	90                   	nop

c0016428 <FAT::getName()>:
c0016428:	b8 30 f0 01 c0       	mov    eax,0xc001f030
c001642d:	c3                   	ret    
c001642e:	66 90                	xchg   ax,ax

c0016430 <FAT::tell(void*, unsigned long long*)>:
c0016430:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016435:	75 09                	jne    c0016440 <FAT::tell(void*, unsigned long long*)+0x10>
c0016437:	b8 04 00 00 00       	mov    eax,0x4
c001643c:	c3                   	ret    
c001643d:	8d 76 00             	lea    esi,[esi+0x0]
c0016440:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016445:	75 09                	jne    c0016450 <FAT::tell(void*, unsigned long long*)+0x20>
c0016447:	b8 04 00 00 00       	mov    eax,0x4
c001644c:	c3                   	ret    
c001644d:	8d 76 00             	lea    esi,[esi+0x0]
c0016450:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016454:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0016457:	ba 00 00 00 00       	mov    edx,0x0
c001645c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016460:	89 01                	mov    DWORD PTR [ecx],eax
c0016462:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016465:	b8 00 00 00 00       	mov    eax,0x0
c001646a:	c3                   	ret    
c001646b:	90                   	nop

c001646c <FAT::stat(void*, unsigned long long*)>:
c001646c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016471:	75 09                	jne    c001647c <FAT::stat(void*, unsigned long long*)+0x10>
c0016473:	b8 04 00 00 00       	mov    eax,0x4
c0016478:	c3                   	ret    
c0016479:	8d 76 00             	lea    esi,[esi+0x0]
c001647c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016481:	75 09                	jne    c001648c <FAT::stat(void*, unsigned long long*)+0x20>
c0016483:	b8 04 00 00 00       	mov    eax,0x4
c0016488:	c3                   	ret    
c0016489:	8d 76 00             	lea    esi,[esi+0x0]
c001648c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016490:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0016493:	ba 00 00 00 00       	mov    edx,0x0
c0016498:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001649c:	89 01                	mov    DWORD PTR [ecx],eax
c001649e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00164a1:	b8 00 00 00 00       	mov    eax,0x0
c00164a6:	c3                   	ret    
c00164a7:	90                   	nop

c00164a8 <FAT::~FAT()>:
c00164a8:	83 ec 0c             	sub    esp,0xc
c00164ab:	ba 7c f0 01 c0       	mov    edx,0xc001f07c
c00164b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b4:	89 10                	mov    DWORD PTR [eax],edx
c00164b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ba:	83 ec 0c             	sub    esp,0xc
c00164bd:	50                   	push   eax
c00164be:	e8 6b 43 ff ff       	call   c000a82e <Filesystem::~Filesystem()>
c00164c3:	83 c4 10             	add    esp,0x10
c00164c6:	90                   	nop
c00164c7:	83 c4 0c             	add    esp,0xc
c00164ca:	c3                   	ret    
c00164cb:	90                   	nop

c00164cc <FAT::~FAT()>:
c00164cc:	83 ec 0c             	sub    esp,0xc
c00164cf:	83 ec 0c             	sub    esp,0xc
c00164d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164d6:	e8 cd ff ff ff       	call   c00164a8 <FAT::~FAT()>
c00164db:	83 c4 10             	add    esp,0x10
c00164de:	83 ec 08             	sub    esp,0x8
c00164e1:	6a 08                	push   0x8
c00164e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164e7:	e8 06 3f ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c00164ec:	83 c4 10             	add    esp,0x10
c00164ef:	83 c4 0c             	add    esp,0xc
c00164f2:	c3                   	ret    
c00164f3:	90                   	nop

c00164f4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00164f4:	83 ec 1c             	sub    esp,0x1c
c00164f7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00164fe:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0016503:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016507:	8b 04 85 00 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc100]
c001650e:	83 f8 ff             	cmp    eax,0xffffffff
c0016511:	75 35                	jne    c0016548 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0016513:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016517:	88 c2                	mov    dl,al
c0016519:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c001651e:	01 d0                	add    eax,edx
c0016520:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016524:	8b 15 e0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ee0
c001652a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001652e:	89 14 85 00 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc100],edx
c0016535:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c001653a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001653e:	89 14 85 80 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc080],edx
c0016545:	eb 19                	jmp    c0016560 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0016547:	90                   	nop
c0016548:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001654c:	88 c2                	mov    dl,al
c001654e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016552:	8b 04 85 00 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc100]
c0016559:	01 d0                	add    eax,edx
c001655b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001655f:	90                   	nop
c0016560:	83 ec 04             	sub    esp,0x4
c0016563:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016567:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001656b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001656f:	50                   	push   eax
c0016570:	e8 ef e8 fe ff       	call   c0004e64 <f_getlabel>
c0016575:	83 c4 10             	add    esp,0x10
c0016578:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001657c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016581:	75 09                	jne    c001658c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0016583:	b8 00 00 00 00       	mov    eax,0x0
c0016588:	eb 0a                	jmp    c0016594 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001658a:	66 90                	xchg   ax,ax
c001658c:	b8 01 00 00 00       	mov    eax,0x1
c0016591:	8d 76 00             	lea    esi,[esi+0x0]
c0016594:	83 c4 1c             	add    esp,0x1c
c0016597:	c3                   	ret    

c0016598 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016598:	57                   	push   edi
c0016599:	83 ec 58             	sub    esp,0x58
c001659c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00165a4:	8d 54 24 10          	lea    edx,[esp+0x10]
c00165a8:	b8 00 00 00 00       	mov    eax,0x0
c00165ad:	b9 0f 00 00 00       	mov    ecx,0xf
c00165b2:	fc                   	cld    
c00165b3:	89 d7                	mov    edi,edx
c00165b5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00165b7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165bb:	8b 04 85 00 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc100]
c00165c2:	83 f8 ff             	cmp    eax,0xffffffff
c00165c5:	75 35                	jne    c00165fc <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00165c7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00165cb:	88 c2                	mov    dl,al
c00165cd:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c00165d2:	01 d0                	add    eax,edx
c00165d4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00165d8:	8b 15 e0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ee0
c00165de:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00165e2:	89 14 85 00 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc100],edx
c00165e9:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c00165ee:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00165f2:	89 14 85 80 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc080],edx
c00165f9:	eb 19                	jmp    c0016614 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00165fb:	90                   	nop
c00165fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016600:	88 c2                	mov    dl,al
c0016602:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016606:	8b 04 85 00 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc100]
c001660d:	01 d0                	add    eax,edx
c001660f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016613:	90                   	nop
c0016614:	83 ec 08             	sub    esp,0x8
c0016617:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001661b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001661f:	50                   	push   eax
c0016620:	e8 ab a1 fe ff       	call   c00007d0 <strcat>
c0016625:	83 c4 10             	add    esp,0x10
c0016628:	83 ec 0c             	sub    esp,0xc
c001662b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001662f:	50                   	push   eax
c0016630:	e8 80 e9 fe ff       	call   c0004fb5 <f_setlabel>
c0016635:	83 c4 10             	add    esp,0x10
c0016638:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001663c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016641:	75 09                	jne    c001664c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0016643:	b8 00 00 00 00       	mov    eax,0x0
c0016648:	eb 0a                	jmp    c0016654 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001664a:	66 90                	xchg   ax,ax
c001664c:	b8 01 00 00 00       	mov    eax,0x1
c0016651:	8d 76 00             	lea    esi,[esi+0x0]
c0016654:	83 c4 58             	add    esp,0x58
c0016657:	5f                   	pop    edi
c0016658:	c3                   	ret    
c0016659:	90                   	nop
c001665a:	66 90                	xchg   ax,ax

c001665c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001665c:	83 ec 2c             	sub    esp,0x2c
c001665f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016667:	83 ec 08             	sub    esp,0x8
c001666a:	68 54 f0 01 c0       	push   0xc001f054
c001666f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016673:	e8 78 a0 fe ff       	call   c00006f0 <strcmp>
c0016678:	83 c4 10             	add    esp,0x10
c001667b:	85 c0                	test   eax,eax
c001667d:	0f 94 c0             	sete   al
c0016680:	84 c0                	test   al,al
c0016682:	74 10                	je     c0016694 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016684:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001668c:	e9 b3 00 00 00       	jmp    c0016744 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016691:	8d 76 00             	lea    esi,[esi+0x0]
c0016694:	83 ec 08             	sub    esp,0x8
c0016697:	68 46 f0 01 c0       	push   0xc001f046
c001669c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166a0:	e8 4b a0 fe ff       	call   c00006f0 <strcmp>
c00166a5:	83 c4 10             	add    esp,0x10
c00166a8:	85 c0                	test   eax,eax
c00166aa:	0f 94 c0             	sete   al
c00166ad:	84 c0                	test   al,al
c00166af:	74 0f                	je     c00166c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00166b1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166b9:	e9 86 00 00 00       	jmp    c0016744 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166be:	66 90                	xchg   ax,ax
c00166c0:	83 ec 08             	sub    esp,0x8
c00166c3:	68 4c f0 01 c0       	push   0xc001f04c
c00166c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166cc:	e8 1f a0 fe ff       	call   c00006f0 <strcmp>
c00166d1:	83 c4 10             	add    esp,0x10
c00166d4:	85 c0                	test   eax,eax
c00166d6:	0f 94 c0             	sete   al
c00166d9:	84 c0                	test   al,al
c00166db:	74 0b                	je     c00166e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00166dd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00166e5:	eb 5d                	jmp    c0016744 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00166e7:	90                   	nop
c00166e8:	83 ec 08             	sub    esp,0x8
c00166eb:	68 bc ce 01 c0       	push   0xc001cebc
c00166f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00166f4:	e8 f7 9f fe ff       	call   c00006f0 <strcmp>
c00166f9:	83 c4 10             	add    esp,0x10
c00166fc:	85 c0                	test   eax,eax
c00166fe:	0f 94 c0             	sete   al
c0016701:	84 c0                	test   al,al
c0016703:	74 0b                	je     c0016710 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0016705:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001670d:	eb 35                	jmp    c0016744 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001670f:	90                   	nop
c0016710:	83 ec 08             	sub    esp,0x8
c0016713:	68 52 f0 01 c0       	push   0xc001f052
c0016718:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001671c:	e8 cf 9f fe ff       	call   c00006f0 <strcmp>
c0016721:	83 c4 10             	add    esp,0x10
c0016724:	85 c0                	test   eax,eax
c0016726:	0f 94 c0             	sete   al
c0016729:	84 c0                	test   al,al
c001672b:	74 0b                	je     c0016738 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001672d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0016735:	eb 0d                	jmp    c0016744 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016737:	90                   	nop
c0016738:	b8 08 00 00 00       	mov    eax,0x8
c001673d:	e9 ea 00 00 00       	jmp    c001682c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016742:	66 90                	xchg   ax,ax
c0016744:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001674b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016750:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016754:	8b 04 85 00 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc100]
c001675b:	83 f8 ff             	cmp    eax,0xffffffff
c001675e:	75 34                	jne    c0016794 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016760:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016764:	88 c2                	mov    dl,al
c0016766:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c001676b:	01 d0                	add    eax,edx
c001676d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016771:	8b 15 e0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ee0
c0016777:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001677b:	89 14 85 00 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc100],edx
c0016782:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c0016787:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001678b:	89 14 85 80 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc080],edx
c0016792:	eb 18                	jmp    c00167ac <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016794:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016798:	88 c2                	mov    dl,al
c001679a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001679e:	8b 04 85 00 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc100]
c00167a5:	01 d0                	add    eax,edx
c00167a7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00167ab:	90                   	nop
c00167ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167b0:	88 04 24             	mov    BYTE PTR [esp],al
c00167b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00167b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167bb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00167c3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00167c8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00167d0:	83 ec 0c             	sub    esp,0xc
c00167d3:	68 00 20 00 00       	push   0x2000
c00167d8:	e8 ec 0f ff ff       	call   c00077c9 <malloc>
c00167dd:	83 c4 10             	add    esp,0x10
c00167e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167e4:	68 00 20 00 00       	push   0x2000
c00167e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167ed:	8d 44 24 08          	lea    eax,[esp+0x8]
c00167f1:	50                   	push   eax
c00167f2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00167f6:	50                   	push   eax
c00167f7:	e8 a9 ea fe ff       	call   c00052a5 <f_mkfs>
c00167fc:	83 c4 10             	add    esp,0x10
c00167ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016803:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0016808:	75 0a                	jne    c0016814 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001680a:	b8 00 00 00 00       	mov    eax,0x0
c001680f:	eb 1b                	jmp    c001682c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016811:	8d 76 00             	lea    esi,[esi+0x0]
c0016814:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0016819:	75 09                	jne    c0016824 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001681b:	b8 09 00 00 00       	mov    eax,0x9
c0016820:	eb 0a                	jmp    c001682c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c0016822:	66 90                	xchg   ax,ax
c0016824:	b8 01 00 00 00       	mov    eax,0x1
c0016829:	8d 76 00             	lea    esi,[esi+0x0]
c001682c:	83 c4 2c             	add    esp,0x2c
c001682f:	c3                   	ret    

c0016830 <FAT::tryMount(LogicalDisk*, int)>:
c0016830:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0016836:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c001683b:	83 f8 14             	cmp    eax,0x14
c001683e:	75 18                	jne    c0016858 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016840:	83 ec 0c             	sub    esp,0xc
c0016843:	68 58 f0 01 c0       	push   0xc001f058
c0016848:	e8 1e 99 ff ff       	call   c001016b <KePanic(char const*)>
c001684d:	83 c4 10             	add    esp,0x10
c0016850:	b0 00                	mov    al,0x0
c0016852:	e9 e9 01 00 00       	jmp    c0016a40 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016857:	90                   	nop
c0016858:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001685f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016865:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001686b:	3d 00 02 00 00       	cmp    eax,0x200
c0016870:	74 0a                	je     c001687c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0016872:	b0 00                	mov    al,0x0
c0016874:	e9 c7 01 00 00       	jmp    c0016a40 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016879:	8d 76 00             	lea    esi,[esi+0x0]
c001687c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016884:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001688b:	8b 04 85 00 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc100]
c0016892:	83 f8 ff             	cmp    eax,0xffffffff
c0016895:	74 09                	je     c00168a0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016897:	b0 01                	mov    al,0x1
c0016899:	e9 a2 01 00 00       	jmp    c0016a40 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001689e:	66 90                	xchg   ax,ax
c00168a0:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00168aa:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00168b2:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00168b9:	88 c2                	mov    dl,al
c00168bb:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c00168c0:	01 d0                	add    eax,edx
c00168c2:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00168c9:	8b 15 e0 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023ee0
c00168cf:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00168d6:	89 14 85 00 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc100],edx
c00168dd:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c00168e2:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00168e9:	89 14 85 80 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc080],edx
c00168f0:	83 ec 0c             	sub    esp,0xc
c00168f3:	68 34 02 00 00       	push   0x234
c00168f8:	e8 cc 0e ff ff       	call   c00077c9 <malloc>
c00168fd:	83 c4 10             	add    esp,0x10
c0016900:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0016907:	83 ec 04             	sub    esp,0x4
c001690a:	6a 00                	push   0x0
c001690c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016913:	50                   	push   eax
c0016914:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001691b:	e8 ab d1 fe ff       	call   c0003acb <f_mount>
c0016920:	83 c4 10             	add    esp,0x10
c0016923:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001692a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0016932:	74 1c                	je     c0016950 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0016934:	83 ec 0c             	sub    esp,0xc
c0016937:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001693e:	e8 a6 0e ff ff       	call   c00077e9 <rfree>
c0016943:	83 c4 10             	add    esp,0x10
c0016946:	b0 00                	mov    al,0x0
c0016948:	e9 f3 00 00 00       	jmp    c0016a40 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001694d:	8d 76 00             	lea    esi,[esi+0x0]
c0016950:	83 ec 04             	sub    esp,0x4
c0016953:	68 00 01 00 00       	push   0x100
c0016958:	6a 00                	push   0x0
c001695a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016961:	50                   	push   eax
c0016962:	e8 79 9b fe ff       	call   c00004e0 <memset>
c0016967:	83 c4 10             	add    esp,0x10
c001696a:	83 ec 08             	sub    esp,0x8
c001696d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016974:	50                   	push   eax
c0016975:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001697c:	50                   	push   eax
c001697d:	e8 4e 9e fe ff       	call   c00007d0 <strcat>
c0016982:	83 c4 10             	add    esp,0x10
c0016985:	83 ec 08             	sub    esp,0x8
c0016988:	68 66 f0 01 c0       	push   0xc001f066
c001698d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016994:	50                   	push   eax
c0016995:	e8 36 9e fe ff       	call   c00007d0 <strcat>
c001699a:	83 c4 10             	add    esp,0x10
c001699d:	83 ec 04             	sub    esp,0x4
c00169a0:	6a 01                	push   0x1
c00169a2:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00169a9:	50                   	push   eax
c00169aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00169ae:	50                   	push   eax
c00169af:	e8 79 d1 fe ff       	call   c0003b2d <f_open>
c00169b4:	83 c4 10             	add    esp,0x10
c00169b7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00169be:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00169c5:	85 c0                	test   eax,eax
c00169c7:	74 0b                	je     c00169d4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00169c9:	78 31                	js     c00169fc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00169cb:	83 e8 04             	sub    eax,0x4
c00169ce:	83 f8 01             	cmp    eax,0x1
c00169d1:	77 29                	ja     c00169fc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00169d3:	90                   	nop
c00169d4:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00169dc:	83 ec 0c             	sub    esp,0xc
c00169df:	8d 44 24 14          	lea    eax,[esp+0x14]
c00169e3:	50                   	push   eax
c00169e4:	e8 f7 d8 fe ff       	call   c00042e0 <f_close>
c00169e9:	83 c4 10             	add    esp,0x10
c00169ec:	90                   	nop
c00169ed:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c00169f5:	74 41                	je     c0016a38 <FAT::tryMount(LogicalDisk*, int)+0x208>
c00169f7:	eb 33                	jmp    c0016a2c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00169f9:	8d 76 00             	lea    esi,[esi+0x0]
c00169fc:	83 ec 0c             	sub    esp,0xc
c00169ff:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016a06:	e8 de 0d ff ff       	call   c00077e9 <rfree>
c0016a0b:	83 c4 10             	add    esp,0x10
c0016a0e:	83 ec 04             	sub    esp,0x4
c0016a11:	6a 00                	push   0x0
c0016a13:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a1a:	50                   	push   eax
c0016a1b:	6a 00                	push   0x0
c0016a1d:	e8 a9 d0 fe ff       	call   c0003acb <f_mount>
c0016a22:	83 c4 10             	add    esp,0x10
c0016a25:	b0 00                	mov    al,0x0
c0016a27:	eb 17                	jmp    c0016a40 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016a29:	8d 76 00             	lea    esi,[esi+0x0]
c0016a2c:	a1 e0 3e 02 c0       	mov    eax,ds:0xc0023ee0
c0016a31:	40                   	inc    eax
c0016a32:	a3 e0 3e 02 c0       	mov    ds:0xc0023ee0,eax
c0016a37:	90                   	nop
c0016a38:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016a3f:	90                   	nop
c0016a40:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016a46:	c3                   	ret    
c0016a47:	90                   	nop

c0016a48 <FAT::allocateSwapfile(char const*, int)>:
c0016a48:	55                   	push   ebp
c0016a49:	57                   	push   edi
c0016a4a:	56                   	push   esi
c0016a4b:	53                   	push   ebx
c0016a4c:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016a52:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016a5d:	83 ec 0c             	sub    esp,0xc
c0016a60:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016a67:	e8 5d 0d ff ff       	call   c00077c9 <malloc>
c0016a6c:	83 c4 10             	add    esp,0x10
c0016a6f:	89 c7                	mov    edi,eax
c0016a71:	a1 50 3e 02 c0       	mov    eax,ds:0xc0023e50
c0016a76:	83 ec 04             	sub    esp,0x4
c0016a79:	50                   	push   eax
c0016a7a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016a81:	57                   	push   edi
c0016a82:	e8 d7 3f ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c0016a87:	83 c4 10             	add    esp,0x10
c0016a8a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016a91:	83 ec 04             	sub    esp,0x4
c0016a94:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016a98:	50                   	push   eax
c0016a99:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016a9d:	50                   	push   eax
c0016a9e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016aa5:	e8 20 43 ff ff       	call   c000adca <File::stat(unsigned long long*, bool*)>
c0016aaa:	83 c4 10             	add    esp,0x10
c0016aad:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016ab4:	c1 e0 14             	shl    eax,0x14
c0016ab7:	89 c7                	mov    edi,eax
c0016ab9:	89 c5                	mov    ebp,eax
c0016abb:	c1 fd 1f             	sar    ebp,0x1f
c0016abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ac2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016ac6:	89 f9                	mov    ecx,edi
c0016ac8:	31 c1                	xor    ecx,eax
c0016aca:	89 cb                	mov    ebx,ecx
c0016acc:	89 e9                	mov    ecx,ebp
c0016ace:	31 d1                	xor    ecx,edx
c0016ad0:	89 ce                	mov    esi,ecx
c0016ad2:	89 f0                	mov    eax,esi
c0016ad4:	09 d8                	or     eax,ebx
c0016ad6:	0f 84 9c 00 00 00    	je     c0016b78 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016adc:	83 ec 0c             	sub    esp,0xc
c0016adf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016ae6:	e8 ab 41 ff ff       	call   c000ac96 <File::unlink()>
c0016aeb:	83 c4 10             	add    esp,0x10
c0016aee:	83 ec 08             	sub    esp,0x8
c0016af1:	6a 12                	push   0x12
c0016af3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016afa:	e8 1f 40 ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c0016aff:	83 c4 10             	add    esp,0x10
c0016b02:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b09:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016b0f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016b16:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b1d:	c1 e0 14             	shl    eax,0x14
c0016b20:	83 ec 04             	sub    esp,0x4
c0016b23:	6a 01                	push   0x1
c0016b25:	50                   	push   eax
c0016b26:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016b2d:	e8 13 e6 fe ff       	call   c0005145 <f_expand>
c0016b32:	83 c4 10             	add    esp,0x10
c0016b35:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b3e:	83 c0 10             	add    eax,0x10
c0016b41:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b43:	83 ec 0c             	sub    esp,0xc
c0016b46:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016b4a:	52                   	push   edx
c0016b4b:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016b4f:	52                   	push   edx
c0016b50:	6a 00                	push   0x0
c0016b52:	68 00 04 00 00       	push   0x400
c0016b57:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016b5e:	ff d0                	call   eax
c0016b60:	83 c4 20             	add    esp,0x20
c0016b63:	83 ec 0c             	sub    esp,0xc
c0016b66:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b6d:	e8 0a 40 ff ff       	call   c000ab7c <File::close()>
c0016b72:	83 c4 10             	add    esp,0x10
c0016b75:	8d 76 00             	lea    esi,[esi+0x0]
c0016b78:	83 ec 08             	sub    esp,0x8
c0016b7b:	6a 01                	push   0x1
c0016b7d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b84:	e8 95 3f ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c0016b89:	83 c4 10             	add    esp,0x10
c0016b8c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016b93:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b95:	83 c0 0c             	add    eax,0xc
c0016b98:	8b 00                	mov    eax,DWORD PTR [eax]
c0016b9a:	83 ec 0c             	sub    esp,0xc
c0016b9d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016ba1:	52                   	push   edx
c0016ba2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016ba6:	52                   	push   edx
c0016ba7:	6a 00                	push   0x0
c0016ba9:	6a 04                	push   0x4
c0016bab:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016bb2:	ff d0                	call   eax
c0016bb4:	83 c4 20             	add    esp,0x20
c0016bb7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bbe:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016bc4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016bcb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016bd2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016bd5:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016bdc:	83 ec 0c             	sub    esp,0xc
c0016bdf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016be6:	e8 91 3f ff ff       	call   c000ab7c <File::close()>
c0016beb:	83 c4 10             	add    esp,0x10
c0016bee:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016bf5:	ba 00 00 00 00       	mov    edx,0x0
c0016bfa:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016c00:	5b                   	pop    ebx
c0016c01:	5e                   	pop    esi
c0016c02:	5f                   	pop    edi
c0016c03:	5d                   	pop    ebp
c0016c04:	c3                   	ret    
c0016c05:	90                   	nop
c0016c06:	66 90                	xchg   ax,ax

c0016c08 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016c08:	57                   	push   edi
c0016c09:	56                   	push   esi
c0016c0a:	53                   	push   ebx
c0016c0b:	81 ec 50 02 00 00    	sub    esp,0x250
c0016c11:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016c19:	74 0d                	je     c0016c28 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016c1b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016c23:	75 0f                	jne    c0016c34 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016c25:	8d 76 00             	lea    esi,[esi+0x0]
c0016c28:	b8 04 00 00 00       	mov    eax,0x4
c0016c2d:	e9 36 01 00 00       	jmp    c0016d68 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016c32:	66 90                	xchg   ax,ax
c0016c34:	83 ec 08             	sub    esp,0x8
c0016c37:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016c3e:	50                   	push   eax
c0016c3f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016c46:	e8 58 d9 fe ff       	call   c00045a3 <f_readdir>
c0016c4b:	83 c4 10             	add    esp,0x10
c0016c4e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016c55:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016c5c:	83 ec 0c             	sub    esp,0xc
c0016c5f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016c66:	83 c0 16             	add    eax,0x16
c0016c69:	50                   	push   eax
c0016c6a:	e8 e1 98 fe ff       	call   c0000550 <strlen>
c0016c6f:	83 c4 10             	add    esp,0x10
c0016c72:	ba 00 00 00 00       	mov    edx,0x0
c0016c77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c7b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016c7f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016c86:	25 ff 00 00 00       	and    eax,0xff
c0016c8b:	83 e0 10             	and    eax,0x10
c0016c8e:	74 08                	je     c0016c98 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016c90:	b8 02 00 00 00       	mov    eax,0x2
c0016c95:	eb 09                	jmp    c0016ca0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016c97:	90                   	nop
c0016c98:	b8 01 00 00 00       	mov    eax,0x1
c0016c9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016ca0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ca4:	83 ec 08             	sub    esp,0x8
c0016ca7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016cae:	83 c0 16             	add    eax,0x16
c0016cb1:	50                   	push   eax
c0016cb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016cb6:	83 c0 10             	add    eax,0x10
c0016cb9:	50                   	push   eax
c0016cba:	e8 51 99 fe ff       	call   c0000610 <strcpy>
c0016cbf:	83 c4 10             	add    esp,0x10
c0016cc2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016cc9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016cd0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016cd4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016cdb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016ce2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016ce9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016cf0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016cf7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016cfe:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016d05:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016d0c:	89 c6                	mov    esi,eax
c0016d0e:	89 d7                	mov    edi,edx
c0016d10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d12:	89 c8                	mov    eax,ecx
c0016d14:	89 fa                	mov    edx,edi
c0016d16:	89 f3                	mov    ebx,esi
c0016d18:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016d1f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016d26:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016d2d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016d34:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016d3a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016d41:	84 c0                	test   al,al
c0016d43:	75 07                	jne    c0016d4c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016d45:	b8 07 00 00 00       	mov    eax,0x7
c0016d4a:	eb 1c                	jmp    c0016d68 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d4c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016d53:	85 c0                	test   eax,eax
c0016d55:	75 09                	jne    c0016d60 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016d57:	b8 00 00 00 00       	mov    eax,0x0
c0016d5c:	eb 0a                	jmp    c0016d68 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016d5e:	66 90                	xchg   ax,ax
c0016d60:	b8 01 00 00 00       	mov    eax,0x1
c0016d65:	8d 76 00             	lea    esi,[esi+0x0]
c0016d68:	81 c4 50 02 00 00    	add    esp,0x250
c0016d6e:	5b                   	pop    ebx
c0016d6f:	5e                   	pop    esi
c0016d70:	5f                   	pop    edi
c0016d71:	c3                   	ret    
c0016d72:	66 90                	xchg   ax,ax

c0016d74 <FAT::read(void*, unsigned long, void*, int*)>:
c0016d74:	83 ec 1c             	sub    esp,0x1c
c0016d77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016d7c:	74 0a                	je     c0016d88 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016d7e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016d83:	75 0b                	jne    c0016d90 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016d85:	8d 76 00             	lea    esi,[esi+0x0]
c0016d88:	b8 04 00 00 00       	mov    eax,0x4
c0016d8d:	eb 41                	jmp    c0016dd0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016d8f:	90                   	nop
c0016d90:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d94:	50                   	push   eax
c0016d95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016d99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016d9d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016da1:	e8 52 d0 fe ff       	call   c0003df8 <f_read>
c0016da6:	83 c4 10             	add    esp,0x10
c0016da9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016dad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016db1:	89 c2                	mov    edx,eax
c0016db3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016db7:	89 10                	mov    DWORD PTR [eax],edx
c0016db9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dbd:	85 c0                	test   eax,eax
c0016dbf:	75 07                	jne    c0016dc8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016dc1:	b8 00 00 00 00       	mov    eax,0x0
c0016dc6:	eb 08                	jmp    c0016dd0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016dc8:	b8 01 00 00 00       	mov    eax,0x1
c0016dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0016dd0:	83 c4 1c             	add    esp,0x1c
c0016dd3:	c3                   	ret    

c0016dd4 <FAT::write(void*, unsigned long, void*, int*)>:
c0016dd4:	83 ec 1c             	sub    esp,0x1c
c0016dd7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ddc:	74 0a                	je     c0016de8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016dde:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016de3:	75 0b                	jne    c0016df0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016de5:	8d 76 00             	lea    esi,[esi+0x0]
c0016de8:	b8 04 00 00 00       	mov    eax,0x4
c0016ded:	eb 41                	jmp    c0016e30 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016def:	90                   	nop
c0016df0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016df4:	50                   	push   eax
c0016df5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016df9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016dfd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e01:	e8 f1 d1 fe ff       	call   c0003ff7 <f_write>
c0016e06:	83 c4 10             	add    esp,0x10
c0016e09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e11:	89 c2                	mov    edx,eax
c0016e13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e17:	89 10                	mov    DWORD PTR [eax],edx
c0016e19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e1d:	85 c0                	test   eax,eax
c0016e1f:	75 07                	jne    c0016e28 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016e21:	b8 00 00 00 00       	mov    eax,0x0
c0016e26:	eb 08                	jmp    c0016e30 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e28:	b8 01 00 00 00       	mov    eax,0x1
c0016e2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e30:	83 c4 1c             	add    esp,0x1c
c0016e33:	c3                   	ret    

c0016e34 <FAT::close(void*)>:
c0016e34:	83 ec 1c             	sub    esp,0x1c
c0016e37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e3c:	75 0a                	jne    c0016e48 <FAT::close(void*)+0x14>
c0016e3e:	b8 04 00 00 00       	mov    eax,0x4
c0016e43:	eb 3f                	jmp    c0016e84 <FAT::close(void*)+0x50>
c0016e45:	8d 76 00             	lea    esi,[esi+0x0]
c0016e48:	83 ec 0c             	sub    esp,0xc
c0016e4b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e4f:	e8 8c d4 fe ff       	call   c00042e0 <f_close>
c0016e54:	83 c4 10             	add    esp,0x10
c0016e57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e5b:	83 ec 0c             	sub    esp,0xc
c0016e5e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e62:	e8 72 09 ff ff       	call   c00077d9 <free>
c0016e67:	83 c4 10             	add    esp,0x10
c0016e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e6e:	85 c0                	test   eax,eax
c0016e70:	75 0a                	jne    c0016e7c <FAT::close(void*)+0x48>
c0016e72:	b8 00 00 00 00       	mov    eax,0x0
c0016e77:	eb 0b                	jmp    c0016e84 <FAT::close(void*)+0x50>
c0016e79:	8d 76 00             	lea    esi,[esi+0x0]
c0016e7c:	b8 01 00 00 00       	mov    eax,0x1
c0016e81:	8d 76 00             	lea    esi,[esi+0x0]
c0016e84:	83 c4 1c             	add    esp,0x1c
c0016e87:	c3                   	ret    

c0016e88 <FAT::closeDir(void*)>:
c0016e88:	83 ec 1c             	sub    esp,0x1c
c0016e8b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e90:	75 0a                	jne    c0016e9c <FAT::closeDir(void*)+0x14>
c0016e92:	b8 04 00 00 00       	mov    eax,0x4
c0016e97:	eb 3f                	jmp    c0016ed8 <FAT::closeDir(void*)+0x50>
c0016e99:	8d 76 00             	lea    esi,[esi+0x0]
c0016e9c:	83 ec 0c             	sub    esp,0xc
c0016e9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ea3:	e8 d9 d6 fe ff       	call   c0004581 <f_closedir>
c0016ea8:	83 c4 10             	add    esp,0x10
c0016eab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016eaf:	83 ec 0c             	sub    esp,0xc
c0016eb2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016eb6:	e8 1e 09 ff ff       	call   c00077d9 <free>
c0016ebb:	83 c4 10             	add    esp,0x10
c0016ebe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ec2:	85 c0                	test   eax,eax
c0016ec4:	75 0a                	jne    c0016ed0 <FAT::closeDir(void*)+0x48>
c0016ec6:	b8 00 00 00 00       	mov    eax,0x0
c0016ecb:	eb 0b                	jmp    c0016ed8 <FAT::closeDir(void*)+0x50>
c0016ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ed0:	b8 01 00 00 00       	mov    eax,0x1
c0016ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ed8:	83 c4 1c             	add    esp,0x1c
c0016edb:	c3                   	ret    

c0016edc <FAT::seek(void*, unsigned long long)>:
c0016edc:	83 ec 2c             	sub    esp,0x2c
c0016edf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ee3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ee7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016eeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016eef:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016ef4:	75 0a                	jne    c0016f00 <FAT::seek(void*, unsigned long long)+0x24>
c0016ef6:	b8 04 00 00 00       	mov    eax,0x4
c0016efb:	eb 33                	jmp    c0016f30 <FAT::seek(void*, unsigned long long)+0x54>
c0016efd:	8d 76 00             	lea    esi,[esi+0x0]
c0016f00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f04:	83 ec 08             	sub    esp,0x8
c0016f07:	50                   	push   eax
c0016f08:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f0c:	e8 fe d3 fe ff       	call   c000430f <f_lseek>
c0016f11:	83 c4 10             	add    esp,0x10
c0016f14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016f18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016f1c:	85 c0                	test   eax,eax
c0016f1e:	75 08                	jne    c0016f28 <FAT::seek(void*, unsigned long long)+0x4c>
c0016f20:	b8 00 00 00 00       	mov    eax,0x0
c0016f25:	eb 09                	jmp    c0016f30 <FAT::seek(void*, unsigned long long)+0x54>
c0016f27:	90                   	nop
c0016f28:	b8 01 00 00 00       	mov    eax,0x1
c0016f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f30:	83 c4 2c             	add    esp,0x2c
c0016f33:	c3                   	ret    

c0016f34 <fatWrapperReadDisk>:
c0016f34:	53                   	push   ebx
c0016f35:	83 ec 18             	sub    esp,0x18
c0016f38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f3c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f40:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f44:	25 ff 00 00 00       	and    eax,0xff
c0016f49:	8b 0c 85 e0 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcf20]
c0016f50:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f54:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f58:	ba 00 00 00 00       	mov    edx,0x0
c0016f5d:	83 ec 0c             	sub    esp,0xc
c0016f60:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f64:	53                   	push   ebx
c0016f65:	52                   	push   edx
c0016f66:	50                   	push   eax
c0016f67:	51                   	push   ecx
c0016f68:	e8 a3 5c ff ff       	call   c000cc10 <LogicalDisk::read(unsigned long long, int, void*)>
c0016f6d:	83 c4 20             	add    esp,0x20
c0016f70:	83 c4 18             	add    esp,0x18
c0016f73:	5b                   	pop    ebx
c0016f74:	c3                   	ret    
c0016f75:	8d 76 00             	lea    esi,[esi+0x0]

c0016f78 <fatWrapperWriteDisk>:
c0016f78:	53                   	push   ebx
c0016f79:	83 ec 18             	sub    esp,0x18
c0016f7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f80:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016f84:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016f88:	25 ff 00 00 00       	and    eax,0xff
c0016f8d:	8b 0c 85 e0 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcf20]
c0016f94:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f9c:	ba 00 00 00 00       	mov    edx,0x0
c0016fa1:	83 ec 0c             	sub    esp,0xc
c0016fa4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016fa8:	53                   	push   ebx
c0016fa9:	52                   	push   edx
c0016faa:	50                   	push   eax
c0016fab:	51                   	push   ecx
c0016fac:	e8 cb 5c ff ff       	call   c000cc7c <LogicalDisk::write(unsigned long long, int, void*)>
c0016fb1:	83 c4 20             	add    esp,0x20
c0016fb4:	83 c4 18             	add    esp,0x18
c0016fb7:	5b                   	pop    ebx
c0016fb8:	c3                   	ret    
c0016fb9:	8d 76 00             	lea    esi,[esi+0x0]

c0016fbc <fatWrapperIoctl>:
c0016fbc:	53                   	push   ebx
c0016fbd:	83 ec 28             	sub    esp,0x28
c0016fc0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016fc4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016fc8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016fcc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016fd0:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016fd5:	75 35                	jne    c001700c <fatWrapperIoctl+0x50>
c0016fd7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fdb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fdf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fe3:	25 ff 00 00 00       	and    eax,0xff
c0016fe8:	8b 04 85 e0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf20]
c0016fef:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016ff5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016ffb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016fff:	66 89 02             	mov    WORD PTR [edx],ax
c0017002:	b8 00 00 00 00       	mov    eax,0x0
c0017007:	e9 c4 00 00 00       	jmp    c00170d0 <fatWrapperIoctl+0x114>
c001700c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0017011:	75 75                	jne    c0017088 <fatWrapperIoctl+0xcc>
c0017013:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017017:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001701b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001701f:	25 ff 00 00 00       	and    eax,0xff
c0017024:	8b 04 85 e0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf20]
c001702b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017031:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017037:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001703d:	89 c8                	mov    eax,ecx
c001703f:	89 da                	mov    edx,ebx
c0017041:	0f a4 c2 0a          	shld   edx,eax,0xa
c0017045:	c1 e0 0a             	shl    eax,0xa
c0017048:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001704c:	81 e1 ff 00 00 00    	and    ecx,0xff
c0017052:	8b 0c 8d e0 30 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcf20]
c0017059:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001705f:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0017065:	89 cb                	mov    ebx,ecx
c0017067:	c1 fb 1f             	sar    ebx,0x1f
c001706a:	53                   	push   ebx
c001706b:	51                   	push   ecx
c001706c:	52                   	push   edx
c001706d:	50                   	push   eax
c001706e:	e8 4d 50 00 00       	call   c001c0c0 <__udivdi3>
c0017073:	83 c4 10             	add    esp,0x10
c0017076:	89 c2                	mov    edx,eax
c0017078:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001707c:	89 10                	mov    DWORD PTR [eax],edx
c001707e:	b8 00 00 00 00       	mov    eax,0x0
c0017083:	eb 4b                	jmp    c00170d0 <fatWrapperIoctl+0x114>
c0017085:	8d 76 00             	lea    esi,[esi+0x0]
c0017088:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001708d:	75 09                	jne    c0017098 <fatWrapperIoctl+0xdc>
c001708f:	b8 00 00 00 00       	mov    eax,0x0
c0017094:	eb 3a                	jmp    c00170d0 <fatWrapperIoctl+0x114>
c0017096:	66 90                	xchg   ax,ax
c0017098:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001709d:	75 19                	jne    c00170b8 <fatWrapperIoctl+0xfc>
c001709f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170ab:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00170b1:	b8 00 00 00 00       	mov    eax,0x0
c00170b6:	eb 18                	jmp    c00170d0 <fatWrapperIoctl+0x114>
c00170b8:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00170bd:	75 09                	jne    c00170c8 <fatWrapperIoctl+0x10c>
c00170bf:	b8 00 00 00 00       	mov    eax,0x0
c00170c4:	eb 0a                	jmp    c00170d0 <fatWrapperIoctl+0x114>
c00170c6:	66 90                	xchg   ax,ax
c00170c8:	b8 04 00 00 00       	mov    eax,0x4
c00170cd:	8d 76 00             	lea    esi,[esi+0x0]
c00170d0:	83 c4 28             	add    esp,0x28
c00170d3:	5b                   	pop    ebx
c00170d4:	c3                   	ret    
c00170d5:	90                   	nop
c00170d6:	66 90                	xchg   ax,ax

c00170d8 <FAT::FAT()>:
c00170d8:	83 ec 1c             	sub    esp,0x1c
c00170db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170df:	83 ec 0c             	sub    esp,0xc
c00170e2:	50                   	push   eax
c00170e3:	e8 22 37 ff ff       	call   c000a80a <Filesystem::Filesystem()>
c00170e8:	83 c4 10             	add    esp,0x10
c00170eb:	ba 7c f0 01 c0       	mov    edx,0xc001f07c
c00170f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f4:	89 10                	mov    DWORD PTR [eax],edx
c00170f6:	c7 05 e0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ee0,0x0
c0017100:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017108:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001710d:	7f 15                	jg     c0017124 <FAT::FAT()+0x4c>
c001710f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017113:	c7 04 85 00 3f 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc100],0xffffffff
c001711e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017122:	eb e4                	jmp    c0017108 <FAT::FAT()+0x30>
c0017124:	90                   	nop
c0017125:	83 c4 1c             	add    esp,0x1c
c0017128:	c3                   	ret    
c0017129:	90                   	nop
c001712a:	66 90                	xchg   ax,ax

c001712c <FAT::fixFilepath(char*)>:
c001712c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017130:	8a 00                	mov    al,BYTE PTR [eax]
c0017132:	3c 40                	cmp    al,0x40
c0017134:	7e 2e                	jle    c0017164 <FAT::fixFilepath(char*)+0x38>
c0017136:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001713a:	8a 00                	mov    al,BYTE PTR [eax]
c001713c:	83 e8 41             	sub    eax,0x41
c001713f:	88 c2                	mov    dl,al
c0017141:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017145:	88 10                	mov    BYTE PTR [eax],dl
c0017147:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001714b:	8a 00                	mov    al,BYTE PTR [eax]
c001714d:	0f be c0             	movsx  eax,al
c0017150:	8b 04 85 00 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc100]
c0017157:	83 c0 30             	add    eax,0x30
c001715a:	88 c2                	mov    dl,al
c001715c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017160:	88 10                	mov    BYTE PTR [eax],dl
c0017162:	66 90                	xchg   ax,ax
c0017164:	90                   	nop
c0017165:	c3                   	ret    
c0017166:	66 90                	xchg   ax,ax

c0017168 <FAT::open(char const*, void**, FileOpenMode)>:
c0017168:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001716e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017176:	74 0c                	je     c0017184 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017178:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017180:	75 0e                	jne    c0017190 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0017182:	66 90                	xchg   ax,ax
c0017184:	b8 04 00 00 00       	mov    eax,0x4
c0017189:	e9 0a 01 00 00       	jmp    c0017298 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001718e:	66 90                	xchg   ax,ax
c0017190:	83 ec 08             	sub    esp,0x8
c0017193:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001719a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001719e:	50                   	push   eax
c001719f:	e8 6c 94 fe ff       	call   c0000610 <strcpy>
c00171a4:	83 c4 10             	add    esp,0x10
c00171a7:	83 ec 08             	sub    esp,0x8
c00171aa:	8d 44 24 10          	lea    eax,[esp+0x10]
c00171ae:	50                   	push   eax
c00171af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00171b6:	e8 71 ff ff ff       	call   c001712c <FAT::fixFilepath(char*)>
c00171bb:	83 c4 10             	add    esp,0x10
c00171be:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00171c6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171cd:	83 e0 01             	and    eax,0x1
c00171d0:	74 0a                	je     c00171dc <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00171d2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00171da:	66 90                	xchg   ax,ax
c00171dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171e3:	83 e0 04             	and    eax,0x4
c00171e6:	74 10                	je     c00171f8 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c00171e8:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00171f0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00171f8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00171ff:	83 e0 02             	and    eax,0x2
c0017202:	74 08                	je     c001720c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0017204:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001720c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017213:	83 e0 08             	and    eax,0x8
c0017216:	74 08                	je     c0017220 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0017218:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0017220:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017227:	83 e0 10             	and    eax,0x10
c001722a:	74 08                	je     c0017234 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001722c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0017234:	83 ec 0c             	sub    esp,0xc
c0017237:	68 28 02 00 00       	push   0x228
c001723c:	e8 88 05 ff ff       	call   c00077c9 <malloc>
c0017241:	83 c4 10             	add    esp,0x10
c0017244:	89 c2                	mov    edx,eax
c0017246:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001724d:	89 10                	mov    DWORD PTR [eax],edx
c001724f:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0017256:	31 d2                	xor    edx,edx
c0017258:	88 c2                	mov    dl,al
c001725a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017261:	8b 00                	mov    eax,DWORD PTR [eax]
c0017263:	83 ec 04             	sub    esp,0x4
c0017266:	52                   	push   edx
c0017267:	8d 54 24 10          	lea    edx,[esp+0x10]
c001726b:	52                   	push   edx
c001726c:	50                   	push   eax
c001726d:	e8 bb c8 fe ff       	call   c0003b2d <f_open>
c0017272:	83 c4 10             	add    esp,0x10
c0017275:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001727c:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0017284:	74 0a                	je     c0017290 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0017286:	b8 01 00 00 00       	mov    eax,0x1
c001728b:	eb 0b                	jmp    c0017298 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001728d:	8d 76 00             	lea    esi,[esi+0x0]
c0017290:	b8 00 00 00 00       	mov    eax,0x0
c0017295:	8d 76 00             	lea    esi,[esi+0x0]
c0017298:	81 c4 1c 01 00 00    	add    esp,0x11c
c001729e:	c3                   	ret    
c001729f:	90                   	nop

c00172a0 <FAT::openDir(char const*, void**)>:
c00172a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172ae:	74 0c                	je     c00172bc <FAT::openDir(char const*, void**)+0x1c>
c00172b0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00172b8:	75 0e                	jne    c00172c8 <FAT::openDir(char const*, void**)+0x28>
c00172ba:	66 90                	xchg   ax,ax
c00172bc:	b8 04 00 00 00       	mov    eax,0x4
c00172c1:	e9 82 00 00 00       	jmp    c0017348 <FAT::openDir(char const*, void**)+0xa8>
c00172c6:	66 90                	xchg   ax,ax
c00172c8:	83 ec 08             	sub    esp,0x8
c00172cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172d6:	50                   	push   eax
c00172d7:	e8 34 93 fe ff       	call   c0000610 <strcpy>
c00172dc:	83 c4 10             	add    esp,0x10
c00172df:	83 ec 08             	sub    esp,0x8
c00172e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172e6:	50                   	push   eax
c00172e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00172ee:	e8 39 fe ff ff       	call   c001712c <FAT::fixFilepath(char*)>
c00172f3:	83 c4 10             	add    esp,0x10
c00172f6:	83 ec 0c             	sub    esp,0xc
c00172f9:	6a 30                	push   0x30
c00172fb:	e8 c9 04 ff ff       	call   c00077c9 <malloc>
c0017300:	83 c4 10             	add    esp,0x10
c0017303:	89 c2                	mov    edx,eax
c0017305:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001730c:	89 10                	mov    DWORD PTR [eax],edx
c001730e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017315:	8b 00                	mov    eax,DWORD PTR [eax]
c0017317:	83 ec 08             	sub    esp,0x8
c001731a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001731e:	52                   	push   edx
c001731f:	50                   	push   eax
c0017320:	e8 91 d1 fe ff       	call   c00044b6 <f_opendir>
c0017325:	83 c4 10             	add    esp,0x10
c0017328:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001732f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0017337:	74 07                	je     c0017340 <FAT::openDir(char const*, void**)+0xa0>
c0017339:	b8 01 00 00 00       	mov    eax,0x1
c001733e:	eb 08                	jmp    c0017348 <FAT::openDir(char const*, void**)+0xa8>
c0017340:	b8 00 00 00 00       	mov    eax,0x0
c0017345:	8d 76 00             	lea    esi,[esi+0x0]
c0017348:	81 c4 1c 01 00 00    	add    esp,0x11c
c001734e:	c3                   	ret    
c001734f:	90                   	nop

c0017350 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017350:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017356:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001735e:	75 0c                	jne    c001736c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017360:	b8 04 00 00 00       	mov    eax,0x4
c0017365:	e9 d6 00 00 00       	jmp    c0017440 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001736a:	66 90                	xchg   ax,ax
c001736c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0017374:	75 0a                	jne    c0017380 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0017376:	b8 04 00 00 00       	mov    eax,0x4
c001737b:	e9 c0 00 00 00       	jmp    c0017440 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017380:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017388:	75 0a                	jne    c0017394 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001738a:	b8 04 00 00 00       	mov    eax,0x4
c001738f:	e9 ac 00 00 00       	jmp    c0017440 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017394:	83 ec 08             	sub    esp,0x8
c0017397:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001739e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00173a5:	50                   	push   eax
c00173a6:	e8 65 92 fe ff       	call   c0000610 <strcpy>
c00173ab:	83 c4 10             	add    esp,0x10
c00173ae:	83 ec 08             	sub    esp,0x8
c00173b1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00173b8:	50                   	push   eax
c00173b9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00173c0:	e8 67 fd ff ff       	call   c001712c <FAT::fixFilepath(char*)>
c00173c5:	83 c4 10             	add    esp,0x10
c00173c8:	83 ec 08             	sub    esp,0x8
c00173cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00173cf:	50                   	push   eax
c00173d0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00173d7:	50                   	push   eax
c00173d8:	e8 58 d2 fe ff       	call   c0004635 <f_stat>
c00173dd:	83 c4 10             	add    esp,0x10
c00173e0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00173e7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00173ee:	85 c0                	test   eax,eax
c00173f0:	74 0a                	je     c00173fc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00173f2:	83 f8 04             	cmp    eax,0x4
c00173f5:	74 39                	je     c0017430 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00173f7:	eb 3f                	jmp    c0017438 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00173f9:	8d 76 00             	lea    esi,[esi+0x0]
c00173fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017400:	25 ff 00 00 00       	and    eax,0xff
c0017405:	83 e0 10             	and    eax,0x10
c0017408:	0f 95 c2             	setne  dl
c001740b:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0017412:	88 10                	mov    BYTE PTR [eax],dl
c0017414:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017418:	ba 00 00 00 00       	mov    edx,0x0
c001741d:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0017424:	89 01                	mov    DWORD PTR [ecx],eax
c0017426:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017429:	b8 00 00 00 00       	mov    eax,0x0
c001742e:	eb 10                	jmp    c0017440 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017430:	b8 02 00 00 00       	mov    eax,0x2
c0017435:	eb 09                	jmp    c0017440 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017437:	90                   	nop
c0017438:	b8 01 00 00 00       	mov    eax,0x1
c001743d:	8d 76 00             	lea    esi,[esi+0x0]
c0017440:	81 c4 2c 02 00 00    	add    esp,0x22c
c0017446:	c3                   	ret    
c0017447:	90                   	nop

c0017448 <FAT::unlink(char const*)>:
c0017448:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001744e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017456:	75 08                	jne    c0017460 <FAT::unlink(char const*)+0x18>
c0017458:	b8 04 00 00 00       	mov    eax,0x4
c001745d:	eb 61                	jmp    c00174c0 <FAT::unlink(char const*)+0x78>
c001745f:	90                   	nop
c0017460:	83 ec 08             	sub    esp,0x8
c0017463:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001746a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001746e:	50                   	push   eax
c001746f:	e8 9c 91 fe ff       	call   c0000610 <strcpy>
c0017474:	83 c4 10             	add    esp,0x10
c0017477:	83 ec 08             	sub    esp,0x8
c001747a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001747e:	50                   	push   eax
c001747f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017486:	e8 a1 fc ff ff       	call   c001712c <FAT::fixFilepath(char*)>
c001748b:	83 c4 10             	add    esp,0x10
c001748e:	83 ec 0c             	sub    esp,0xc
c0017491:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017495:	50                   	push   eax
c0017496:	e8 ff d3 fe ff       	call   c000489a <f_unlink>
c001749b:	83 c4 10             	add    esp,0x10
c001749e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00174a5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00174ac:	85 c0                	test   eax,eax
c00174ae:	75 08                	jne    c00174b8 <FAT::unlink(char const*)+0x70>
c00174b0:	b8 00 00 00 00       	mov    eax,0x0
c00174b5:	eb 09                	jmp    c00174c0 <FAT::unlink(char const*)+0x78>
c00174b7:	90                   	nop
c00174b8:	b8 01 00 00 00       	mov    eax,0x1
c00174bd:	8d 76 00             	lea    esi,[esi+0x0]
c00174c0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00174c6:	c3                   	ret    
c00174c7:	90                   	nop

c00174c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00174c8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00174ce:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00174d5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00174dc:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00174e0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00174e4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00174ec:	75 0a                	jne    c00174f8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00174ee:	b8 04 00 00 00       	mov    eax,0x4
c00174f3:	e9 54 01 00 00       	jmp    c001764c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00174f8:	83 ec 08             	sub    esp,0x8
c00174fb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0017502:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017506:	50                   	push   eax
c0017507:	e8 04 91 fe ff       	call   c0000610 <strcpy>
c001750c:	83 c4 10             	add    esp,0x10
c001750f:	83 ec 08             	sub    esp,0x8
c0017512:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017516:	50                   	push   eax
c0017517:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001751e:	e8 09 fc ff ff       	call   c001712c <FAT::fixFilepath(char*)>
c0017523:	83 c4 10             	add    esp,0x10
c0017526:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001752e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0017536:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001753a:	25 ff 00 00 00       	and    eax,0xff
c001753f:	83 e0 01             	and    eax,0x1
c0017542:	74 08                	je     c001754c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0017544:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001754c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017550:	25 ff 00 00 00       	and    eax,0xff
c0017555:	83 e0 02             	and    eax,0x2
c0017558:	74 0a                	je     c0017564 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c001755a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0017562:	66 90                	xchg   ax,ax
c0017564:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017568:	25 ff 00 00 00       	and    eax,0xff
c001756d:	83 e0 04             	and    eax,0x4
c0017570:	74 0a                	je     c001757c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c0017572:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001757a:	66 90                	xchg   ax,ax
c001757c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017580:	25 ff 00 00 00       	and    eax,0xff
c0017585:	83 e0 08             	and    eax,0x8
c0017588:	74 0a                	je     c0017594 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c001758a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0017592:	66 90                	xchg   ax,ax
c0017594:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017598:	25 ff 00 00 00       	and    eax,0xff
c001759d:	83 e0 01             	and    eax,0x1
c00175a0:	74 0a                	je     c00175ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00175a2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00175aa:	66 90                	xchg   ax,ax
c00175ac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175b0:	25 ff 00 00 00       	and    eax,0xff
c00175b5:	83 e0 02             	and    eax,0x2
c00175b8:	74 0a                	je     c00175c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00175ba:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00175c2:	66 90                	xchg   ax,ax
c00175c4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175c8:	25 ff 00 00 00       	and    eax,0xff
c00175cd:	83 e0 04             	and    eax,0x4
c00175d0:	74 0a                	je     c00175dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00175d2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00175da:	66 90                	xchg   ax,ax
c00175dc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175e0:	25 ff 00 00 00       	and    eax,0xff
c00175e5:	83 e0 08             	and    eax,0x8
c00175e8:	74 0a                	je     c00175f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00175ea:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00175f2:	66 90                	xchg   ax,ax
c00175f4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00175fb:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0017602:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0017609:	31 d2                	xor    edx,edx
c001760b:	88 c2                	mov    dl,al
c001760d:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0017614:	25 ff 00 00 00       	and    eax,0xff
c0017619:	83 ec 04             	sub    esp,0x4
c001761c:	52                   	push   edx
c001761d:	50                   	push   eax
c001761e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017622:	50                   	push   eax
c0017623:	e8 e5 d6 fe ff       	call   c0004d0d <f_chmod>
c0017628:	83 c4 10             	add    esp,0x10
c001762b:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0017632:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017639:	85 c0                	test   eax,eax
c001763b:	75 07                	jne    c0017644 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c001763d:	b8 00 00 00 00       	mov    eax,0x0
c0017642:	eb 08                	jmp    c001764c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0017644:	b8 01 00 00 00       	mov    eax,0x1
c0017649:	8d 76 00             	lea    esi,[esi+0x0]
c001764c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017652:	c3                   	ret    
c0017653:	90                   	nop

c0017654 <FAT::rename(char const*, char const*)>:
c0017654:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001765a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0017662:	74 0c                	je     c0017670 <FAT::rename(char const*, char const*)+0x1c>
c0017664:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001766c:	75 0e                	jne    c001767c <FAT::rename(char const*, char const*)+0x28>
c001766e:	66 90                	xchg   ax,ax
c0017670:	b8 04 00 00 00       	mov    eax,0x4
c0017675:	e9 9e 00 00 00       	jmp    c0017718 <FAT::rename(char const*, char const*)+0xc4>
c001767a:	66 90                	xchg   ax,ax
c001767c:	83 ec 08             	sub    esp,0x8
c001767f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017686:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001768d:	50                   	push   eax
c001768e:	e8 7d 8f fe ff       	call   c0000610 <strcpy>
c0017693:	83 c4 10             	add    esp,0x10
c0017696:	83 ec 08             	sub    esp,0x8
c0017699:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00176a0:	50                   	push   eax
c00176a1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176a8:	e8 7f fa ff ff       	call   c001712c <FAT::fixFilepath(char*)>
c00176ad:	83 c4 10             	add    esp,0x10
c00176b0:	83 ec 08             	sub    esp,0x8
c00176b3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00176ba:	8d 44 24 18          	lea    eax,[esp+0x18]
c00176be:	50                   	push   eax
c00176bf:	e8 4c 8f fe ff       	call   c0000610 <strcpy>
c00176c4:	83 c4 10             	add    esp,0x10
c00176c7:	83 ec 08             	sub    esp,0x8
c00176ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176ce:	50                   	push   eax
c00176cf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00176d6:	e8 51 fa ff ff       	call   c001712c <FAT::fixFilepath(char*)>
c00176db:	83 c4 10             	add    esp,0x10
c00176de:	83 ec 08             	sub    esp,0x8
c00176e1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00176e5:	50                   	push   eax
c00176e6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00176ed:	50                   	push   eax
c00176ee:	e8 64 d4 fe ff       	call   c0004b57 <f_rename>
c00176f3:	83 c4 10             	add    esp,0x10
c00176f6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00176fd:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0017704:	85 c0                	test   eax,eax
c0017706:	75 08                	jne    c0017710 <FAT::rename(char const*, char const*)+0xbc>
c0017708:	b8 00 00 00 00       	mov    eax,0x0
c001770d:	eb 09                	jmp    c0017718 <FAT::rename(char const*, char const*)+0xc4>
c001770f:	90                   	nop
c0017710:	b8 01 00 00 00       	mov    eax,0x1
c0017715:	8d 76 00             	lea    esi,[esi+0x0]
c0017718:	81 c4 1c 02 00 00    	add    esp,0x21c
c001771e:	c3                   	ret    
c001771f:	90                   	nop

c0017720 <FAT::mkdir(char const*)>:
c0017720:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017726:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001772e:	75 08                	jne    c0017738 <FAT::mkdir(char const*)+0x18>
c0017730:	b8 04 00 00 00       	mov    eax,0x4
c0017735:	eb 61                	jmp    c0017798 <FAT::mkdir(char const*)+0x78>
c0017737:	90                   	nop
c0017738:	83 ec 08             	sub    esp,0x8
c001773b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017742:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017746:	50                   	push   eax
c0017747:	e8 c4 8e fe ff       	call   c0000610 <strcpy>
c001774c:	83 c4 10             	add    esp,0x10
c001774f:	83 ec 08             	sub    esp,0x8
c0017752:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017756:	50                   	push   eax
c0017757:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001775e:	e8 c9 f9 ff ff       	call   c001712c <FAT::fixFilepath(char*)>
c0017763:	83 c4 10             	add    esp,0x10
c0017766:	83 ec 0c             	sub    esp,0xc
c0017769:	8d 44 24 18          	lea    eax,[esp+0x18]
c001776d:	50                   	push   eax
c001776e:	e8 49 d2 fe ff       	call   c00049bc <f_mkdir>
c0017773:	83 c4 10             	add    esp,0x10
c0017776:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001777d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017784:	85 c0                	test   eax,eax
c0017786:	75 08                	jne    c0017790 <FAT::mkdir(char const*)+0x70>
c0017788:	b8 00 00 00 00       	mov    eax,0x0
c001778d:	eb 09                	jmp    c0017798 <FAT::mkdir(char const*)+0x78>
c001778f:	90                   	nop
c0017790:	b8 01 00 00 00       	mov    eax,0x1
c0017795:	8d 76 00             	lea    esi,[esi+0x0]
c0017798:	81 c4 1c 01 00 00    	add    esp,0x11c
c001779e:	c3                   	ret    
c001779f:	90                   	nop

c00177a0 <FAT::exists(char const*)>:
c00177a0:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00177a6:	83 ec 08             	sub    esp,0x8
c00177a9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00177b0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00177b4:	50                   	push   eax
c00177b5:	e8 56 8e fe ff       	call   c0000610 <strcpy>
c00177ba:	83 c4 10             	add    esp,0x10
c00177bd:	83 ec 08             	sub    esp,0x8
c00177c0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00177c4:	50                   	push   eax
c00177c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00177cc:	e8 5b f9 ff ff       	call   c001712c <FAT::fixFilepath(char*)>
c00177d1:	83 c4 10             	add    esp,0x10
c00177d4:	83 ec 08             	sub    esp,0x8
c00177d7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00177de:	50                   	push   eax
c00177df:	8d 44 24 10          	lea    eax,[esp+0x10]
c00177e3:	50                   	push   eax
c00177e4:	e8 4c ce fe ff       	call   c0004635 <f_stat>
c00177e9:	83 c4 10             	add    esp,0x10
c00177ec:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00177f3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00177fa:	85 c0                	test   eax,eax
c00177fc:	75 06                	jne    c0017804 <FAT::exists(char const*)+0x64>
c00177fe:	b0 01                	mov    al,0x1
c0017800:	eb 06                	jmp    c0017808 <FAT::exists(char const*)+0x68>
c0017802:	66 90                	xchg   ax,ax
c0017804:	b0 00                	mov    al,0x0
c0017806:	66 90                	xchg   ax,ax
c0017808:	81 c4 2c 02 00 00    	add    esp,0x22c
c001780e:	c3                   	ret    
c001780f:	90                   	nop

c0017810 <isoReadDiscSectorHelper>:
c0017810:	83 ec 2c             	sub    esp,0x2c
c0017813:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017817:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001781b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0017820:	83 e8 41             	sub    eax,0x41
c0017823:	8b 0c 85 e0 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcf20]
c001782a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001782e:	ba 00 00 00 00       	mov    edx,0x0
c0017833:	83 ec 0c             	sub    esp,0xc
c0017836:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001783a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001783e:	52                   	push   edx
c001783f:	50                   	push   eax
c0017840:	51                   	push   ecx
c0017841:	e8 ca 53 ff ff       	call   c000cc10 <LogicalDisk::read(unsigned long long, int, void*)>
c0017846:	83 c4 20             	add    esp,0x20
c0017849:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001784d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017852:	74 0c                	je     c0017860 <isoReadDiscSectorHelper+0x50>
c0017854:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017858:	c1 e0 0b             	shl    eax,0xb
c001785b:	eb 0b                	jmp    c0017868 <isoReadDiscSectorHelper+0x58>
c001785d:	8d 76 00             	lea    esi,[esi+0x0]
c0017860:	b8 00 00 00 00       	mov    eax,0x0
c0017865:	8d 76 00             	lea    esi,[esi+0x0]
c0017868:	83 c4 2c             	add    esp,0x2c
c001786b:	c3                   	ret    

c001786c <iso_kprintf>:
c001786c:	83 ec 0c             	sub    esp,0xc
c001786f:	a1 c4 0b 02 c0       	mov    eax,ds:0xc0020bc4
c0017874:	83 ec 08             	sub    esp,0x8
c0017877:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001787b:	50                   	push   eax
c001787c:	e8 c5 0e ff ff       	call   c0008746 <VgaText::puts(char const*)>
c0017881:	83 c4 10             	add    esp,0x10
c0017884:	90                   	nop
c0017885:	83 c4 0c             	add    esp,0xc
c0017888:	c3                   	ret    
c0017889:	8d 76 00             	lea    esi,[esi+0x0]

c001788c <iso_kprintfd>:
c001788c:	83 ec 0c             	sub    esp,0xc
c001788f:	a1 c4 0b 02 c0       	mov    eax,ds:0xc0020bc4
c0017894:	83 ec 08             	sub    esp,0x8
c0017897:	68 dc f0 01 c0       	push   0xc001f0dc
c001789c:	50                   	push   eax
c001789d:	e8 a4 0e ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00178a2:	83 c4 10             	add    esp,0x10
c00178a5:	a1 c4 0b 02 c0       	mov    eax,ds:0xc0020bc4
c00178aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00178ae:	83 ec 08             	sub    esp,0x8
c00178b1:	52                   	push   edx
c00178b2:	50                   	push   eax
c00178b3:	e8 48 0e ff ff       	call   c0008700 <VgaText::putx(unsigned int)>
c00178b8:	83 c4 10             	add    esp,0x10
c00178bb:	a1 c4 0b 02 c0       	mov    eax,ds:0xc0020bc4
c00178c0:	83 ec 08             	sub    esp,0x8
c00178c3:	68 5d ef 01 c0       	push   0xc001ef5d
c00178c8:	50                   	push   eax
c00178c9:	e8 78 0e ff ff       	call   c0008746 <VgaText::puts(char const*)>
c00178ce:	83 c4 10             	add    esp,0x10
c00178d1:	90                   	nop
c00178d2:	83 c4 0c             	add    esp,0xc
c00178d5:	c3                   	ret    

c00178d6 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00178d6:	b8 08 00 00 00       	mov    eax,0x8
c00178db:	c3                   	ret    

c00178dc <ISO9660::getName()>:
c00178dc:	b8 df f0 01 c0       	mov    eax,0xc001f0df
c00178e1:	c3                   	ret    

c00178e2 <ISO9660::closeDir(void*)>:
c00178e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00178e8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00178eb:	90                   	nop

c00178ec <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00178ec:	b8 01 00 00 00       	mov    eax,0x1
c00178f1:	c3                   	ret    

c00178f2 <ISO9660::unlink(char const*)>:
c00178f2:	b8 01 00 00 00       	mov    eax,0x1
c00178f7:	c3                   	ret    

c00178f8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00178f8:	b8 03 00 00 00       	mov    eax,0x3
c00178fd:	c3                   	ret    

c00178fe <ISO9660::rename(char const*, char const*)>:
c00178fe:	b8 01 00 00 00       	mov    eax,0x1
c0017903:	c3                   	ret    

c0017904 <ISO9660::mkdir(char const*)>:
c0017904:	b8 01 00 00 00       	mov    eax,0x1
c0017909:	c3                   	ret    

c001790a <ISO9660::~ISO9660()>:
c001790a:	83 ec 0c             	sub    esp,0xc
c001790d:	ba 30 f1 01 c0       	mov    edx,0xc001f130
c0017912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017916:	89 10                	mov    DWORD PTR [eax],edx
c0017918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001791c:	83 ec 0c             	sub    esp,0xc
c001791f:	50                   	push   eax
c0017920:	e8 09 2f ff ff       	call   c000a82e <Filesystem::~Filesystem()>
c0017925:	83 c4 10             	add    esp,0x10
c0017928:	90                   	nop
c0017929:	83 c4 0c             	add    esp,0xc
c001792c:	c3                   	ret    
c001792d:	90                   	nop

c001792e <ISO9660::~ISO9660()>:
c001792e:	83 ec 0c             	sub    esp,0xc
c0017931:	83 ec 0c             	sub    esp,0xc
c0017934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017938:	e8 cd ff ff ff       	call   c001790a <ISO9660::~ISO9660()>
c001793d:	83 c4 10             	add    esp,0x10
c0017940:	83 ec 08             	sub    esp,0x8
c0017943:	6a 08                	push   0x8
c0017945:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017949:	e8 a4 2a ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001794e:	83 c4 10             	add    esp,0x10
c0017951:	83 c4 0c             	add    esp,0xc
c0017954:	c3                   	ret    
c0017955:	90                   	nop

c0017956 <ISO9660::exists(char const*)>:
c0017956:	83 ec 18             	sub    esp,0x18
c0017959:	68 fa f0 01 c0       	push   0xc001f0fa
c001795e:	e8 08 88 ff ff       	call   c001016b <KePanic(char const*)>
c0017963:	31 c0                	xor    eax,eax
c0017965:	83 c4 1c             	add    esp,0x1c
c0017968:	c3                   	ret    
c0017969:	90                   	nop

c001796a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001796a:	56                   	push   esi
c001796b:	53                   	push   ebx
c001796c:	50                   	push   eax
c001796d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017971:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017975:	85 db                	test   ebx,ebx
c0017977:	0f 84 82 00 00 00    	je     c00179ff <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c001797d:	85 f6                	test   esi,esi
c001797f:	74 7e                	je     c00179ff <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017981:	ba 03 00 00 00       	mov    edx,0x3
c0017986:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001798b:	75 77                	jne    c0017a04 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c001798d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017990:	3a 05 e0 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023fe0
c0017996:	74 34                	je     c00179cc <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017998:	83 ec 0c             	sub    esp,0xc
c001799b:	50                   	push   eax
c001799c:	e8 2e ee fe ff       	call   c00067cf <init_percd>
c00179a1:	83 c4 10             	add    esp,0x10
c00179a4:	ba 0b 00 00 00       	mov    edx,0xb
c00179a9:	40                   	inc    eax
c00179aa:	74 58                	je     c0017a04 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179ac:	80 3d e0 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fe0,0x0
c00179b3:	74 10                	je     c00179c5 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c00179b5:	83 ec 0c             	sub    esp,0xc
c00179b8:	68 18 f1 01 c0       	push   0xc001f118
c00179bd:	e8 a9 87 ff ff       	call   c001016b <KePanic(char const*)>
c00179c2:	83 c4 10             	add    esp,0x10
c00179c5:	8a 03                	mov    al,BYTE PTR [ebx]
c00179c7:	a2 e0 3f 02 c0       	mov    ds:0xc0023fe0,al
c00179cc:	83 ec 0c             	sub    esp,0xc
c00179cf:	0f be 05 e0 3f 02 c0 	movsx  eax,BYTE PTR ds:0xc0023fe0
c00179d6:	83 c3 03             	add    ebx,0x3
c00179d9:	50                   	push   eax
c00179da:	e8 f0 ed fe ff       	call   c00067cf <init_percd>
c00179df:	59                   	pop    ecx
c00179e0:	58                   	pop    eax
c00179e1:	6a 00                	push   0x0
c00179e3:	53                   	push   ebx
c00179e4:	e8 24 e9 fe ff       	call   c000630d <iso_open>
c00179e9:	83 c4 10             	add    esp,0x10
c00179ec:	ba 01 00 00 00       	mov    edx,0x1
c00179f1:	83 f8 ff             	cmp    eax,0xffffffff
c00179f4:	74 0e                	je     c0017a04 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179f6:	83 c0 64             	add    eax,0x64
c00179f9:	31 d2                	xor    edx,edx
c00179fb:	89 06                	mov    DWORD PTR [esi],eax
c00179fd:	eb 05                	jmp    c0017a04 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00179ff:	ba 04 00 00 00       	mov    edx,0x4
c0017a04:	89 d0                	mov    eax,edx
c0017a06:	5a                   	pop    edx
c0017a07:	5b                   	pop    ebx
c0017a08:	5e                   	pop    esi
c0017a09:	c3                   	ret    

c0017a0a <ISO9660::openDir(char const*, void**)>:
c0017a0a:	56                   	push   esi
c0017a0b:	53                   	push   ebx
c0017a0c:	50                   	push   eax
c0017a0d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a11:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a15:	85 db                	test   ebx,ebx
c0017a17:	74 76                	je     c0017a8f <ISO9660::openDir(char const*, void**)+0x85>
c0017a19:	85 f6                	test   esi,esi
c0017a1b:	74 72                	je     c0017a8f <ISO9660::openDir(char const*, void**)+0x85>
c0017a1d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a20:	3a 05 e0 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023fe0
c0017a26:	74 34                	je     c0017a5c <ISO9660::openDir(char const*, void**)+0x52>
c0017a28:	83 ec 0c             	sub    esp,0xc
c0017a2b:	50                   	push   eax
c0017a2c:	e8 9e ed fe ff       	call   c00067cf <init_percd>
c0017a31:	83 c4 10             	add    esp,0x10
c0017a34:	ba 0b 00 00 00       	mov    edx,0xb
c0017a39:	40                   	inc    eax
c0017a3a:	74 58                	je     c0017a94 <ISO9660::openDir(char const*, void**)+0x8a>
c0017a3c:	80 3d e0 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fe0,0x0
c0017a43:	74 10                	je     c0017a55 <ISO9660::openDir(char const*, void**)+0x4b>
c0017a45:	83 ec 0c             	sub    esp,0xc
c0017a48:	68 18 f1 01 c0       	push   0xc001f118
c0017a4d:	e8 19 87 ff ff       	call   c001016b <KePanic(char const*)>
c0017a52:	83 c4 10             	add    esp,0x10
c0017a55:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a57:	a2 e0 3f 02 c0       	mov    ds:0xc0023fe0,al
c0017a5c:	83 ec 0c             	sub    esp,0xc
c0017a5f:	0f be 05 e0 3f 02 c0 	movsx  eax,BYTE PTR ds:0xc0023fe0
c0017a66:	83 c3 03             	add    ebx,0x3
c0017a69:	50                   	push   eax
c0017a6a:	e8 60 ed fe ff       	call   c00067cf <init_percd>
c0017a6f:	59                   	pop    ecx
c0017a70:	58                   	pop    eax
c0017a71:	6a 01                	push   0x1
c0017a73:	53                   	push   ebx
c0017a74:	e8 94 e8 fe ff       	call   c000630d <iso_open>
c0017a79:	83 c4 10             	add    esp,0x10
c0017a7c:	ba 01 00 00 00       	mov    edx,0x1
c0017a81:	83 f8 ff             	cmp    eax,0xffffffff
c0017a84:	74 0e                	je     c0017a94 <ISO9660::openDir(char const*, void**)+0x8a>
c0017a86:	83 c0 64             	add    eax,0x64
c0017a89:	31 d2                	xor    edx,edx
c0017a8b:	89 06                	mov    DWORD PTR [esi],eax
c0017a8d:	eb 05                	jmp    c0017a94 <ISO9660::openDir(char const*, void**)+0x8a>
c0017a8f:	ba 04 00 00 00       	mov    edx,0x4
c0017a94:	89 d0                	mov    eax,edx
c0017a96:	5a                   	pop    edx
c0017a97:	5b                   	pop    ebx
c0017a98:	5e                   	pop    esi
c0017a99:	c3                   	ret    

c0017a9a <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017a9a:	53                   	push   ebx
c0017a9b:	83 ec 08             	sub    esp,0x8
c0017a9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017aa2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017aa6:	85 c0                	test   eax,eax
c0017aa8:	74 25                	je     c0017acf <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017aaa:	85 db                	test   ebx,ebx
c0017aac:	74 21                	je     c0017acf <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017aae:	83 e8 64             	sub    eax,0x64
c0017ab1:	52                   	push   edx
c0017ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ab6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017aba:	50                   	push   eax
c0017abb:	e8 f5 e8 fe ff       	call   c00063b5 <iso_read>
c0017ac0:	83 c4 10             	add    esp,0x10
c0017ac3:	89 03                	mov    DWORD PTR [ebx],eax
c0017ac5:	09 d0                	or     eax,edx
c0017ac7:	0f 94 c0             	sete   al
c0017aca:	0f b6 c0             	movzx  eax,al
c0017acd:	eb 05                	jmp    c0017ad4 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017acf:	b8 04 00 00 00       	mov    eax,0x4
c0017ad4:	83 c4 08             	add    esp,0x8
c0017ad7:	5b                   	pop    ebx
c0017ad8:	c3                   	ret    
c0017ad9:	90                   	nop

c0017ada <ISO9660::seek(void*, unsigned long long)>:
c0017ada:	57                   	push   edi
c0017adb:	56                   	push   esi
c0017adc:	b8 04 00 00 00       	mov    eax,0x4
c0017ae1:	51                   	push   ecx
c0017ae2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017ae6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017aea:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017aee:	85 d2                	test   edx,edx
c0017af0:	74 1c                	je     c0017b0e <ISO9660::seek(void*, unsigned long long)+0x34>
c0017af2:	6a 00                	push   0x0
c0017af4:	83 ea 64             	sub    edx,0x64
c0017af7:	57                   	push   edi
c0017af8:	56                   	push   esi
c0017af9:	52                   	push   edx
c0017afa:	e8 cc e9 fe ff       	call   c00064cb <iso_seek>
c0017aff:	83 c4 10             	add    esp,0x10
c0017b02:	31 f0                	xor    eax,esi
c0017b04:	31 fa                	xor    edx,edi
c0017b06:	09 d0                	or     eax,edx
c0017b08:	0f 95 c0             	setne  al
c0017b0b:	0f b6 c0             	movzx  eax,al
c0017b0e:	5a                   	pop    edx
c0017b0f:	5e                   	pop    esi
c0017b10:	5f                   	pop    edi
c0017b11:	c3                   	ret    

c0017b12 <ISO9660::tell(void*, unsigned long long*)>:
c0017b12:	53                   	push   ebx
c0017b13:	83 ec 08             	sub    esp,0x8
c0017b16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b1a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b1e:	85 c0                	test   eax,eax
c0017b20:	74 1c                	je     c0017b3e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b22:	85 db                	test   ebx,ebx
c0017b24:	74 18                	je     c0017b3e <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017b26:	83 ec 0c             	sub    esp,0xc
c0017b29:	83 e8 64             	sub    eax,0x64
c0017b2c:	50                   	push   eax
c0017b2d:	e8 1d ea fe ff       	call   c000654f <iso_tell>
c0017b32:	83 c4 10             	add    esp,0x10
c0017b35:	89 03                	mov    DWORD PTR [ebx],eax
c0017b37:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017b3a:	31 c0                	xor    eax,eax
c0017b3c:	eb 05                	jmp    c0017b43 <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017b3e:	b8 04 00 00 00       	mov    eax,0x4
c0017b43:	83 c4 08             	add    esp,0x8
c0017b46:	5b                   	pop    ebx
c0017b47:	c3                   	ret    

c0017b48 <ISO9660::stat(void*, unsigned long long*)>:
c0017b48:	53                   	push   ebx
c0017b49:	83 ec 08             	sub    esp,0x8
c0017b4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b50:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b54:	85 c0                	test   eax,eax
c0017b56:	74 20                	je     c0017b78 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b58:	85 db                	test   ebx,ebx
c0017b5a:	74 1c                	je     c0017b78 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017b5c:	83 ec 0c             	sub    esp,0xc
c0017b5f:	83 e8 64             	sub    eax,0x64
c0017b62:	50                   	push   eax
c0017b63:	e8 18 ea fe ff       	call   c0006580 <iso_total>
c0017b68:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017b6f:	89 03                	mov    DWORD PTR [ebx],eax
c0017b71:	83 c4 10             	add    esp,0x10
c0017b74:	31 c0                	xor    eax,eax
c0017b76:	eb 05                	jmp    c0017b7d <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017b78:	b8 04 00 00 00       	mov    eax,0x4
c0017b7d:	83 c4 08             	add    esp,0x8
c0017b80:	5b                   	pop    ebx
c0017b81:	c3                   	ret    

c0017b82 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017b82:	55                   	push   ebp
c0017b83:	57                   	push   edi
c0017b84:	56                   	push   esi
c0017b85:	53                   	push   ebx
c0017b86:	83 ec 0c             	sub    esp,0xc
c0017b89:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017b8d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017b91:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017b95:	85 ff                	test   edi,edi
c0017b97:	0f 94 c2             	sete   dl
c0017b9a:	85 f6                	test   esi,esi
c0017b9c:	0f 94 c0             	sete   al
c0017b9f:	08 c2                	or     dl,al
c0017ba1:	0f 85 9e 00 00 00    	jne    c0017c45 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017ba7:	85 db                	test   ebx,ebx
c0017ba9:	0f 84 96 00 00 00    	je     c0017c45 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017baf:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017bb2:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017bb8:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017bbf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017bc2:	3a 05 e0 3f 02 c0    	cmp    al,BYTE PTR ds:0xc0023fe0
c0017bc8:	74 34                	je     c0017bfe <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017bca:	83 ec 0c             	sub    esp,0xc
c0017bcd:	50                   	push   eax
c0017bce:	e8 fc eb fe ff       	call   c00067cf <init_percd>
c0017bd3:	83 c4 10             	add    esp,0x10
c0017bd6:	ba 0b 00 00 00       	mov    edx,0xb
c0017bdb:	40                   	inc    eax
c0017bdc:	74 6c                	je     c0017c4a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017bde:	80 3d e0 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fe0,0x0
c0017be5:	74 10                	je     c0017bf7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017be7:	83 ec 0c             	sub    esp,0xc
c0017bea:	68 18 f1 01 c0       	push   0xc001f118
c0017bef:	e8 77 85 ff ff       	call   c001016b <KePanic(char const*)>
c0017bf4:	83 c4 10             	add    esp,0x10
c0017bf7:	8a 03                	mov    al,BYTE PTR [ebx]
c0017bf9:	a2 e0 3f 02 c0       	mov    ds:0xc0023fe0,al
c0017bfe:	83 c3 03             	add    ebx,0x3
c0017c01:	52                   	push   edx
c0017c02:	52                   	push   edx
c0017c03:	6a 00                	push   0x0
c0017c05:	53                   	push   ebx
c0017c06:	e8 02 e7 fe ff       	call   c000630d <iso_open>
c0017c0b:	83 c4 10             	add    esp,0x10
c0017c0e:	89 c5                	mov    ebp,eax
c0017c10:	83 f8 ff             	cmp    eax,0xffffffff
c0017c13:	75 0f                	jne    c0017c24 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017c15:	50                   	push   eax
c0017c16:	50                   	push   eax
c0017c17:	6a 01                	push   0x1
c0017c19:	53                   	push   ebx
c0017c1a:	e8 ee e6 fe ff       	call   c000630d <iso_open>
c0017c1f:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017c22:	eb 1a                	jmp    c0017c3e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017c24:	83 ec 0c             	sub    esp,0xc
c0017c27:	50                   	push   eax
c0017c28:	e8 53 e9 fe ff       	call   c0006580 <iso_total>
c0017c2d:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c34:	89 06                	mov    DWORD PTR [esi],eax
c0017c36:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c39:	e8 59 e7 fe ff       	call   c0006397 <iso_close>
c0017c3e:	83 c4 10             	add    esp,0x10
c0017c41:	31 d2                	xor    edx,edx
c0017c43:	eb 05                	jmp    c0017c4a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017c45:	ba 04 00 00 00       	mov    edx,0x4
c0017c4a:	83 c4 0c             	add    esp,0xc
c0017c4d:	89 d0                	mov    eax,edx
c0017c4f:	5b                   	pop    ebx
c0017c50:	5e                   	pop    esi
c0017c51:	5f                   	pop    edi
c0017c52:	5d                   	pop    ebp
c0017c53:	c3                   	ret    

c0017c54 <ISO9660::close(void*)>:
c0017c54:	83 ec 0c             	sub    esp,0xc
c0017c57:	b8 04 00 00 00       	mov    eax,0x4
c0017c5c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c60:	85 d2                	test   edx,edx
c0017c62:	74 11                	je     c0017c75 <ISO9660::close(void*)+0x21>
c0017c64:	83 ec 0c             	sub    esp,0xc
c0017c67:	83 ea 64             	sub    edx,0x64
c0017c6a:	52                   	push   edx
c0017c6b:	e8 27 e7 fe ff       	call   c0006397 <iso_close>
c0017c70:	83 c4 10             	add    esp,0x10
c0017c73:	31 c0                	xor    eax,eax
c0017c75:	83 c4 0c             	add    esp,0xc
c0017c78:	c3                   	ret    
c0017c79:	90                   	nop

c0017c7a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017c7a:	55                   	push   ebp
c0017c7b:	57                   	push   edi
c0017c7c:	56                   	push   esi
c0017c7d:	53                   	push   ebx
c0017c7e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017c84:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017c8b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017c92:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017c99:	85 c0                	test   eax,eax
c0017c9b:	0f 84 96 00 00 00    	je     c0017d37 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017ca1:	85 db                	test   ebx,ebx
c0017ca3:	0f 84 8e 00 00 00    	je     c0017d37 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017ca9:	83 ec 0c             	sub    esp,0xc
c0017cac:	83 e8 64             	sub    eax,0x64
c0017caf:	50                   	push   eax
c0017cb0:	e8 1c e9 fe ff       	call   c00065d1 <iso_readdir>
c0017cb5:	83 c4 10             	add    esp,0x10
c0017cb8:	89 c6                	mov    esi,eax
c0017cba:	85 c0                	test   eax,eax
c0017cbc:	75 18                	jne    c0017cd6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017cbe:	52                   	push   edx
c0017cbf:	68 10 01 00 00       	push   0x110
c0017cc4:	6a 00                	push   0x0
c0017cc6:	57                   	push   edi
c0017cc7:	e8 14 88 fe ff       	call   c00004e0 <memset>
c0017ccc:	83 c4 10             	add    esp,0x10
c0017ccf:	b8 01 00 00 00       	mov    eax,0x1
c0017cd4:	eb 66                	jmp    c0017d3c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017cd6:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017cdc:	8d 68 08             	lea    ebp,[eax+0x8]
c0017cdf:	83 ec 0c             	sub    esp,0xc
c0017ce2:	55                   	push   ebp
c0017ce3:	e8 68 88 fe ff       	call   c0000550 <strlen>
c0017ce8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017cf0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017cf4:	83 c4 10             	add    esp,0x10
c0017cf7:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017cfb:	75 0a                	jne    c0017d07 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017cfd:	b8 02 00 00 00       	mov    eax,0x2
c0017d02:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017d05:	74 05                	je     c0017d0c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017d07:	b8 01 00 00 00       	mov    eax,0x1
c0017d0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d10:	50                   	push   eax
c0017d11:	50                   	push   eax
c0017d12:	55                   	push   ebp
c0017d13:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017d17:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017d1b:	50                   	push   eax
c0017d1c:	e8 ef 88 fe ff       	call   c0000610 <strcpy>
c0017d21:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017d28:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d2a:	31 c0                	xor    eax,eax
c0017d2c:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017d32:	83 c4 10             	add    esp,0x10
c0017d35:	eb 05                	jmp    c0017d3c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d37:	b8 04 00 00 00       	mov    eax,0x4
c0017d3c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017d42:	5b                   	pop    ebx
c0017d43:	5e                   	pop    esi
c0017d44:	5f                   	pop    edi
c0017d45:	5d                   	pop    ebp
c0017d46:	c3                   	ret    

c0017d47 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017d47:	57                   	push   edi
c0017d48:	56                   	push   esi
c0017d49:	53                   	push   ebx
c0017d4a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017d4e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017d52:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017d56:	39 35 e4 3f 02 c0    	cmp    DWORD PTR ds:0xc0023fe4,esi
c0017d5c:	75 08                	jne    c0017d66 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017d5e:	38 1d 50 fb 01 c0    	cmp    BYTE PTR ds:0xc001fb50,bl
c0017d64:	74 4a                	je     c0017db0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017d66:	83 ec 0c             	sub    esp,0xc
c0017d69:	31 d2                	xor    edx,edx
c0017d6b:	68 00 40 02 c0       	push   0xc0024000
c0017d70:	0f be c3             	movsx  eax,bl
c0017d73:	6a 01                	push   0x1
c0017d75:	52                   	push   edx
c0017d76:	56                   	push   esi
c0017d77:	ff 34 85 dc 2f 02 c0 	push   DWORD PTR [eax*4-0x3ffdd024]
c0017d7e:	e8 8d 4e ff ff       	call   c000cc10 <LogicalDisk::read(unsigned long long, int, void*)>
c0017d83:	83 c4 20             	add    esp,0x20
c0017d86:	85 c0                	test   eax,eax
c0017d88:	75 0e                	jne    c0017d98 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017d8a:	89 35 e4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fe4,esi
c0017d90:	88 1d 50 fb 01 c0    	mov    BYTE PTR ds:0xc001fb50,bl
c0017d96:	eb 18                	jmp    c0017db0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017d98:	50                   	push   eax
c0017d99:	68 00 08 00 00       	push   0x800
c0017d9e:	6a 00                	push   0x0
c0017da0:	57                   	push   edi
c0017da1:	e8 3a 87 fe ff       	call   c00004e0 <memset>
c0017da6:	83 c4 10             	add    esp,0x10
c0017da9:	b8 01 00 00 00       	mov    eax,0x1
c0017dae:	eb 0e                	jmp    c0017dbe <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017db0:	be 00 40 02 c0       	mov    esi,0xc0024000
c0017db5:	b9 00 08 00 00       	mov    ecx,0x800
c0017dba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017dbc:	31 c0                	xor    eax,eax
c0017dbe:	5b                   	pop    ebx
c0017dbf:	5e                   	pop    esi
c0017dc0:	5f                   	pop    edi
c0017dc1:	c3                   	ret    

c0017dc2 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017dc2:	53                   	push   ebx
c0017dc3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017dc9:	c7 05 e4 3f 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023fe4,0xdeadbeef
c0017dd3:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017dda:	8d 58 41             	lea    ebx,[eax+0x41]
c0017ddd:	0f be db             	movsx  ebx,bl
c0017de0:	53                   	push   ebx
c0017de1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017de5:	50                   	push   eax
c0017de6:	6a 10                	push   0x10
c0017de8:	e8 5a ff ff ff       	call   c0017d47 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017ded:	83 c4 10             	add    esp,0x10
c0017df0:	31 d2                	xor    edx,edx
c0017df2:	85 c0                	test   eax,eax
c0017df4:	75 33                	jne    c0017e29 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017df6:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017dfb:	75 2c                	jne    c0017e29 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017dfd:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017e02:	75 25                	jne    c0017e29 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e04:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017e09:	75 1e                	jne    c0017e29 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e0b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017e10:	75 17                	jne    c0017e29 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e12:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017e17:	75 10                	jne    c0017e29 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017e19:	83 ec 0c             	sub    esp,0xc
c0017e1c:	53                   	push   ebx
c0017e1d:	e8 ad e9 fe ff       	call   c00067cf <init_percd>
c0017e22:	83 c4 10             	add    esp,0x10
c0017e25:	40                   	inc    eax
c0017e26:	0f 95 c2             	setne  dl
c0017e29:	88 d0                	mov    al,dl
c0017e2b:	81 c4 08 08 00 00    	add    esp,0x808
c0017e31:	5b                   	pop    ebx
c0017e32:	c3                   	ret    
c0017e33:	90                   	nop

c0017e34 <ISO9660::ISO9660()>:
c0017e34:	83 ec 0c             	sub    esp,0xc
c0017e37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e3b:	83 ec 0c             	sub    esp,0xc
c0017e3e:	50                   	push   eax
c0017e3f:	e8 c6 29 ff ff       	call   c000a80a <Filesystem::Filesystem()>
c0017e44:	83 c4 10             	add    esp,0x10
c0017e47:	ba 30 f1 01 c0       	mov    edx,0xc001f130
c0017e4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e50:	89 10                	mov    DWORD PTR [eax],edx
c0017e52:	e8 7a ea fe ff       	call   c00068d1 <fs_iso9660_init>
c0017e57:	90                   	nop
c0017e58:	83 c4 0c             	add    esp,0xc
c0017e5b:	c3                   	ret    

c0017e5c <SoundCard::beginPlayback()>:
c0017e5c:	c7 44 24 04 90 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f190
c0017e64:	e9 02 83 ff ff       	jmp    c001016b <KePanic(char const*)>
c0017e69:	90                   	nop

c0017e6a <SoundCard::stopPlayback()>:
c0017e6a:	c7 44 24 04 90 f1 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f190
c0017e72:	e9 f4 82 ff ff       	jmp    c001016b <KePanic(char const*)>
c0017e77:	90                   	nop

c0017e78 <SoundCard::SoundCard(char const*)>:
c0017e78:	83 ec 1c             	sub    esp,0x1c
c0017e7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e7f:	83 ec 08             	sub    esp,0x8
c0017e82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e86:	50                   	push   eax
c0017e87:	e8 34 3c ff ff       	call   c000bac0 <Device::Device(char const*)>
c0017e8c:	83 c4 10             	add    esp,0x10
c0017e8f:	ba dc f1 01 c0       	mov    edx,0xc001f1dc
c0017e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e98:	89 10                	mov    DWORD PTR [eax],edx
c0017e9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e9e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017ea5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ea9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017eb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017ec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017ecf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017edd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017ee5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017eea:	7f 19                	jg     c0017f05 <SoundCard::SoundCard(char const*)+0x8d>
c0017eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ef0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ef4:	83 c2 54             	add    edx,0x54
c0017ef7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017eff:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017f03:	eb e0                	jmp    c0017ee5 <SoundCard::SoundCard(char const*)+0x6d>
c0017f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f09:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f10:	90                   	nop
c0017f11:	83 c4 1c             	add    esp,0x1c
c0017f14:	c3                   	ret    
c0017f15:	90                   	nop

c0017f16 <SoundCard::~SoundCard()>:
c0017f16:	83 ec 0c             	sub    esp,0xc
c0017f19:	ba dc f1 01 c0       	mov    edx,0xc001f1dc
c0017f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f22:	89 10                	mov    DWORD PTR [eax],edx
c0017f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f28:	83 ec 0c             	sub    esp,0xc
c0017f2b:	50                   	push   eax
c0017f2c:	e8 f9 38 ff ff       	call   c000b82a <Device::~Device()>
c0017f31:	83 c4 10             	add    esp,0x10
c0017f34:	90                   	nop
c0017f35:	83 c4 0c             	add    esp,0xc
c0017f38:	c3                   	ret    
c0017f39:	90                   	nop

c0017f3a <SoundCard::~SoundCard()>:
c0017f3a:	83 ec 0c             	sub    esp,0xc
c0017f3d:	83 ec 0c             	sub    esp,0xc
c0017f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f44:	e8 cd ff ff ff       	call   c0017f16 <SoundCard::~SoundCard()>
c0017f49:	83 c4 10             	add    esp,0x10
c0017f4c:	83 ec 08             	sub    esp,0x8
c0017f4f:	68 e8 01 00 00       	push   0x1e8
c0017f54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017f58:	e8 95 24 ff ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c0017f5d:	83 c4 10             	add    esp,0x10
c0017f60:	83 c4 0c             	add    esp,0xc
c0017f63:	c3                   	ret    

c0017f64 <SoundCard::configureRates(int, int, int)>:
c0017f64:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017f68:	31 c0                	xor    eax,eax
c0017f6a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017f71:	75 20                	jne    c0017f93 <SoundCard::configureRates(int, int, int)+0x2f>
c0017f73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f77:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017f7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f81:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017f87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f8b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017f91:	b0 01                	mov    al,0x1
c0017f93:	c3                   	ret    

c0017f94 <SoundCard::getSamples16(int, short*)>:
c0017f94:	55                   	push   ebp
c0017f95:	57                   	push   edi
c0017f96:	31 ff                	xor    edi,edi
c0017f98:	56                   	push   esi
c0017f99:	53                   	push   ebx
c0017f9a:	31 db                	xor    ebx,ebx
c0017f9c:	83 ec 10             	sub    esp,0x10
c0017f9f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017fa3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017fa7:	8d 04 36             	lea    eax,[esi+esi*1]
c0017faa:	50                   	push   eax
c0017fab:	6a 00                	push   0x0
c0017fad:	55                   	push   ebp
c0017fae:	e8 2d 85 fe ff       	call   c00004e0 <memset>
c0017fb3:	83 c4 10             	add    esp,0x10
c0017fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fba:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017fc1:	85 c0                	test   eax,eax
c0017fc3:	74 1b                	je     c0017fe0 <SoundCard::getSamples16(int, short*)+0x4c>
c0017fc5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017fc9:	75 15                	jne    c0017fe0 <SoundCard::getSamples16(int, short*)+0x4c>
c0017fcb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017fcf:	55                   	push   ebp
c0017fd0:	56                   	push   esi
c0017fd1:	50                   	push   eax
c0017fd2:	e8 ed 02 00 00       	call   c00182c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017fd7:	83 c4 10             	add    esp,0x10
c0017fda:	39 c7                	cmp    edi,eax
c0017fdc:	7d 02                	jge    c0017fe0 <SoundCard::getSamples16(int, short*)+0x4c>
c0017fde:	89 c7                	mov    edi,eax
c0017fe0:	43                   	inc    ebx
c0017fe1:	83 fb 20             	cmp    ebx,0x20
c0017fe4:	75 d0                	jne    c0017fb6 <SoundCard::getSamples16(int, short*)+0x22>
c0017fe6:	83 c4 0c             	add    esp,0xc
c0017fe9:	89 f8                	mov    eax,edi
c0017feb:	5b                   	pop    ebx
c0017fec:	5e                   	pop    esi
c0017fed:	5f                   	pop    edi
c0017fee:	5d                   	pop    ebp
c0017fef:	c3                   	ret    

c0017ff0 <SoundCard::getSamples32(int, int*)>:
c0017ff0:	55                   	push   ebp
c0017ff1:	57                   	push   edi
c0017ff2:	31 ff                	xor    edi,edi
c0017ff4:	56                   	push   esi
c0017ff5:	31 f6                	xor    esi,esi
c0017ff7:	53                   	push   ebx
c0017ff8:	83 ec 10             	sub    esp,0x10
c0017ffb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fff:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018003:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018007:	c1 e0 02             	shl    eax,0x2
c001800a:	50                   	push   eax
c001800b:	6a 00                	push   0x0
c001800d:	55                   	push   ebp
c001800e:	e8 cd 84 fe ff       	call   c00004e0 <memset>
c0018013:	83 c4 10             	add    esp,0x10
c0018016:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001801d:	85 c0                	test   eax,eax
c001801f:	74 1b                	je     c001803c <SoundCard::getSamples32(int, int*)+0x4c>
c0018021:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018025:	75 15                	jne    c001803c <SoundCard::getSamples32(int, int*)+0x4c>
c0018027:	53                   	push   ebx
c0018028:	55                   	push   ebp
c0018029:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001802d:	50                   	push   eax
c001802e:	e8 55 03 00 00       	call   c0018388 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0018033:	83 c4 10             	add    esp,0x10
c0018036:	39 c6                	cmp    esi,eax
c0018038:	7d 02                	jge    c001803c <SoundCard::getSamples32(int, int*)+0x4c>
c001803a:	89 c6                	mov    esi,eax
c001803c:	47                   	inc    edi
c001803d:	83 ff 20             	cmp    edi,0x20
c0018040:	75 d4                	jne    c0018016 <SoundCard::getSamples32(int, int*)+0x26>
c0018042:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0018048:	85 f6                	test   esi,esi
c001804a:	75 0f                	jne    c001805b <SoundCard::getSamples32(int, int*)+0x6b>
c001804c:	84 c0                	test   al,al
c001804e:	74 1b                	je     c001806b <SoundCard::getSamples32(int, int*)+0x7b>
c0018050:	83 ec 0c             	sub    esp,0xc
c0018053:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018055:	53                   	push   ebx
c0018056:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018059:	eb 0d                	jmp    c0018068 <SoundCard::getSamples32(int, int*)+0x78>
c001805b:	84 c0                	test   al,al
c001805d:	75 0c                	jne    c001806b <SoundCard::getSamples32(int, int*)+0x7b>
c001805f:	83 ec 0c             	sub    esp,0xc
c0018062:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018064:	53                   	push   ebx
c0018065:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018068:	83 c4 10             	add    esp,0x10
c001806b:	83 c4 0c             	add    esp,0xc
c001806e:	89 f0                	mov    eax,esi
c0018070:	5b                   	pop    ebx
c0018071:	5e                   	pop    esi
c0018072:	5f                   	pop    edi
c0018073:	5d                   	pop    ebp
c0018074:	c3                   	ret    
c0018075:	90                   	nop

c0018076 <SoundCard::addChannel(SoundPort*)>:
c0018076:	83 ec 0c             	sub    esp,0xc
c0018079:	31 c0                	xor    eax,eax
c001807b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001807f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0018087:	74 1b                	je     c00180a4 <SoundCard::addChannel(SoundPort*)+0x2e>
c0018089:	40                   	inc    eax
c001808a:	83 f8 20             	cmp    eax,0x20
c001808d:	75 f0                	jne    c001807f <SoundCard::addChannel(SoundPort*)+0x9>
c001808f:	83 ec 0c             	sub    esp,0xc
c0018092:	68 b5 f1 01 c0       	push   0xc001f1b5
c0018097:	e8 cf 80 ff ff       	call   c001016b <KePanic(char const*)>
c001809c:	83 c4 10             	add    esp,0x10
c001809f:	83 c8 ff             	or     eax,0xffffffff
c00180a2:	eb 0b                	jmp    c00180af <SoundCard::addChannel(SoundPort*)+0x39>
c00180a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00180a8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c00180af:	83 c4 0c             	add    esp,0xc
c00180b2:	c3                   	ret    
c00180b3:	90                   	nop

c00180b4 <SoundCard::removeChannel(int)>:
c00180b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180bc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c00180c7:	c3                   	ret    

c00180c8 <SoundPort::SoundPort(int, int, int, int)>:
c00180c8:	83 ec 0c             	sub    esp,0xc
c00180cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180cf:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00180d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180da:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c00180de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00180e6:	89 10                	mov    DWORD PTR [eax],edx
c00180e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00180f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180f7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00180fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00180fe:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0018103:	75 13                	jne    c0018118 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0018105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018109:	8b 00                	mov    eax,DWORD PTR [eax]
c001810b:	05 a0 0f 00 00       	add    eax,0xfa0
c0018110:	01 c0                	add    eax,eax
c0018112:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018116:	66 90                	xchg   ax,ax
c0018118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001811c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018120:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0018123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018127:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001812e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018132:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018135:	c1 e0 02             	shl    eax,0x2
c0018138:	83 ec 0c             	sub    esp,0xc
c001813b:	50                   	push   eax
c001813c:	e8 88 f6 fe ff       	call   c00077c9 <malloc>
c0018141:	83 c4 10             	add    esp,0x10
c0018144:	89 c2                	mov    edx,eax
c0018146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001814a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001814d:	90                   	nop
c001814e:	83 c4 0c             	add    esp,0xc
c0018151:	c3                   	ret    
c0018152:	66 90                	xchg   ax,ax

c0018154 <SoundPort::~SoundPort()>:
c0018154:	83 ec 0c             	sub    esp,0xc
c0018157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001815b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001815e:	85 c0                	test   eax,eax
c0018160:	74 1e                	je     c0018180 <SoundPort::~SoundPort()+0x2c>
c0018162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018166:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018169:	83 ec 0c             	sub    esp,0xc
c001816c:	50                   	push   eax
c001816d:	e8 67 f6 fe ff       	call   c00077d9 <free>
c0018172:	83 c4 10             	add    esp,0x10
c0018175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018179:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018180:	90                   	nop
c0018181:	83 c4 0c             	add    esp,0xc
c0018184:	c3                   	ret    
c0018185:	90                   	nop
c0018186:	66 90                	xchg   ax,ax

c0018188 <SoundPort::unpause()>:
c0018188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001818c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0018190:	c3                   	ret    
c0018191:	90                   	nop
c0018192:	66 90                	xchg   ax,ax

c0018194 <SoundPort::pause()>:
c0018194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018198:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001819c:	c3                   	ret    
c001819d:	90                   	nop
c001819e:	66 90                	xchg   ax,ax

c00181a0 <SoundPort::getBufferUsed()>:
c00181a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00181a7:	c3                   	ret    

c00181a8 <SoundPort::getBufferSize()>:
c00181a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00181ac:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00181af:	c3                   	ret    

c00181b0 <SoundPort::buffer16(short*, int)>:
c00181b0:	55                   	push   ebp
c00181b1:	57                   	push   edi
c00181b2:	56                   	push   esi
c00181b3:	53                   	push   ebx
c00181b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00181b8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c00181bc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00181bf:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c00181c2:	74 68                	je     c001822c <SoundPort::buffer16(short*, int)+0x7c>
c00181c4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00181c8:	85 c9                	test   ecx,ecx
c00181ca:	7e 60                	jle    c001822c <SoundPort::buffer16(short*, int)+0x7c>
c00181cc:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c00181d0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00181d3:	c1 e1 0f             	shl    ecx,0xf
c00181d6:	8d 70 01             	lea    esi,[eax+0x1]
c00181d9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00181dc:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c00181df:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00181e2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00181e5:	74 4d                	je     c0018234 <SoundPort::buffer16(short*, int)+0x84>
c00181e7:	31 f6                	xor    esi,esi
c00181e9:	eb 21                	jmp    c001820c <SoundPort::buffer16(short*, int)+0x5c>
c00181eb:	90                   	nop
c00181ec:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00181f1:	8d 79 01             	lea    edi,[ecx+0x1]
c00181f4:	c1 e3 0f             	shl    ebx,0xf
c00181f7:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00181fa:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00181fd:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0018200:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018203:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018206:	74 1c                	je     c0018224 <SoundPort::buffer16(short*, int)+0x74>
c0018208:	89 c6                	mov    esi,eax
c001820a:	66 90                	xchg   ax,ax
c001820c:	8d 46 01             	lea    eax,[esi+0x1]
c001820f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0018213:	75 d7                	jne    c00181ec <SoundPort::buffer16(short*, int)+0x3c>
c0018215:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018219:	8d 76 00             	lea    esi,[esi+0x0]
c001821c:	5b                   	pop    ebx
c001821d:	5e                   	pop    esi
c001821e:	5f                   	pop    edi
c001821f:	5d                   	pop    ebp
c0018220:	c3                   	ret    
c0018221:	8d 76 00             	lea    esi,[esi+0x0]
c0018224:	5b                   	pop    ebx
c0018225:	8d 46 02             	lea    eax,[esi+0x2]
c0018228:	5e                   	pop    esi
c0018229:	5f                   	pop    edi
c001822a:	5d                   	pop    ebp
c001822b:	c3                   	ret    
c001822c:	5b                   	pop    ebx
c001822d:	31 c0                	xor    eax,eax
c001822f:	5e                   	pop    esi
c0018230:	5f                   	pop    edi
c0018231:	5d                   	pop    ebp
c0018232:	c3                   	ret    
c0018233:	90                   	nop
c0018234:	b8 01 00 00 00       	mov    eax,0x1
c0018239:	eb e1                	jmp    c001821c <SoundPort::buffer16(short*, int)+0x6c>
c001823b:	90                   	nop

c001823c <SoundPort::buffer32(int*, int)>:
c001823c:	55                   	push   ebp
c001823d:	57                   	push   edi
c001823e:	56                   	push   esi
c001823f:	53                   	push   ebx
c0018240:	51                   	push   ecx
c0018241:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018245:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018249:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001824c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018250:	89 04 24             	mov    DWORD PTR [esp],eax
c0018253:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018256:	74 5c                	je     c00182b4 <SoundPort::buffer32(int*, int)+0x78>
c0018258:	85 c0                	test   eax,eax
c001825a:	7e 58                	jle    c00182b4 <SoundPort::buffer32(int*, int)+0x78>
c001825c:	8d 71 01             	lea    esi,[ecx+0x1]
c001825f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018262:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018265:	8b 37                	mov    esi,DWORD PTR [edi]
c0018267:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001826a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001826d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018270:	74 4a                	je     c00182bc <SoundPort::buffer32(int*, int)+0x80>
c0018272:	31 f6                	xor    esi,esi
c0018274:	eb 1e                	jmp    c0018294 <SoundPort::buffer32(int*, int)+0x58>
c0018276:	66 90                	xchg   ax,ax
c0018278:	8d 69 01             	lea    ebp,[ecx+0x1]
c001827b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001827e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018281:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018284:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018288:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001828b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001828e:	74 18                	je     c00182a8 <SoundPort::buffer32(int*, int)+0x6c>
c0018290:	89 de                	mov    esi,ebx
c0018292:	66 90                	xchg   ax,ax
c0018294:	8d 5e 01             	lea    ebx,[esi+0x1]
c0018297:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001829a:	75 dc                	jne    c0018278 <SoundPort::buffer32(int*, int)+0x3c>
c001829c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001829f:	90                   	nop
c00182a0:	5a                   	pop    edx
c00182a1:	5b                   	pop    ebx
c00182a2:	5e                   	pop    esi
c00182a3:	5f                   	pop    edi
c00182a4:	5d                   	pop    ebp
c00182a5:	c3                   	ret    
c00182a6:	66 90                	xchg   ax,ax
c00182a8:	5a                   	pop    edx
c00182a9:	8d 46 02             	lea    eax,[esi+0x2]
c00182ac:	5b                   	pop    ebx
c00182ad:	5e                   	pop    esi
c00182ae:	5f                   	pop    edi
c00182af:	5d                   	pop    ebp
c00182b0:	c3                   	ret    
c00182b1:	8d 76 00             	lea    esi,[esi+0x0]
c00182b4:	5a                   	pop    edx
c00182b5:	31 c0                	xor    eax,eax
c00182b7:	5b                   	pop    ebx
c00182b8:	5e                   	pop    esi
c00182b9:	5f                   	pop    edi
c00182ba:	5d                   	pop    ebp
c00182bb:	c3                   	ret    
c00182bc:	b8 01 00 00 00       	mov    eax,0x1
c00182c1:	eb dd                	jmp    c00182a0 <SoundPort::buffer32(int*, int)+0x64>
c00182c3:	90                   	nop

c00182c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c00182c4:	57                   	push   edi
c00182c5:	56                   	push   esi
c00182c6:	53                   	push   ebx
c00182c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00182cb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00182cf:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c00182d5:	39 03                	cmp    DWORD PTR [ebx],eax
c00182d7:	74 13                	je     c00182ec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c00182d9:	83 ec 0c             	sub    esp,0xc
c00182dc:	68 08 f2 01 c0       	push   0xc001f208
c00182e1:	e8 85 7e ff ff       	call   c001016b <KePanic(char const*)>
c00182e6:	83 c4 10             	add    esp,0x10
c00182e9:	8d 76 00             	lea    esi,[esi+0x0]
c00182ec:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00182f2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00182f5:	74 11                	je     c0018308 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00182f7:	83 ec 0c             	sub    esp,0xc
c00182fa:	68 47 f2 01 c0       	push   0xc001f247
c00182ff:	e8 67 7e ff ff       	call   c001016b <KePanic(char const*)>
c0018304:	83 c4 10             	add    esp,0x10
c0018307:	90                   	nop
c0018308:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001830e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0018311:	74 11                	je     c0018324 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0018313:	83 ec 0c             	sub    esp,0xc
c0018316:	68 47 f2 01 c0       	push   0xc001f247
c001831b:	e8 4b 7e ff ff       	call   c001016b <KePanic(char const*)>
c0018320:	83 c4 10             	add    esp,0x10
c0018323:	90                   	nop
c0018324:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018327:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001832b:	7e 07                	jle    c0018334 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001832d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018331:	8d 76 00             	lea    esi,[esi+0x0]
c0018334:	85 f6                	test   esi,esi
c0018336:	7e 2c                	jle    c0018364 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0018338:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001833c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001833f:	31 c9                	xor    ecx,ecx
c0018341:	01 d7                	add    edi,edx
c0018343:	90                   	nop
c0018344:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0018347:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001834a:	85 c0                	test   eax,eax
c001834c:	79 06                	jns    c0018354 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001834e:	05 ff 7f 00 00       	add    eax,0x7fff
c0018353:	90                   	nop
c0018354:	c1 f8 0f             	sar    eax,0xf
c0018357:	83 c1 04             	add    ecx,0x4
c001835a:	66 01 02             	add    WORD PTR [edx],ax
c001835d:	83 c2 02             	add    edx,0x2
c0018360:	39 d7                	cmp    edi,edx
c0018362:	75 e0                	jne    c0018344 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018364:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0018367:	50                   	push   eax
c0018368:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001836b:	29 f0                	sub    eax,esi
c001836d:	c1 e0 02             	shl    eax,0x2
c0018370:	50                   	push   eax
c0018371:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018374:	50                   	push   eax
c0018375:	52                   	push   edx
c0018376:	e8 75 80 fe ff       	call   c00003f0 <memmove>
c001837b:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001837e:	83 c4 10             	add    esp,0x10
c0018381:	89 f0                	mov    eax,esi
c0018383:	5b                   	pop    ebx
c0018384:	5e                   	pop    esi
c0018385:	5f                   	pop    edi
c0018386:	c3                   	ret    
c0018387:	90                   	nop

c0018388 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018388:	57                   	push   edi
c0018389:	56                   	push   esi
c001838a:	53                   	push   ebx
c001838b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001838f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018393:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018397:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001839d:	39 06                	cmp    DWORD PTR [esi],eax
c001839f:	74 13                	je     c00183b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c00183a1:	83 ec 0c             	sub    esp,0xc
c00183a4:	68 28 f2 01 c0       	push   0xc001f228
c00183a9:	e8 bd 7d ff ff       	call   c001016b <KePanic(char const*)>
c00183ae:	83 c4 10             	add    esp,0x10
c00183b1:	8d 76 00             	lea    esi,[esi+0x0]
c00183b4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c00183ba:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c00183bd:	74 11                	je     c00183d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c00183bf:	83 ec 0c             	sub    esp,0xc
c00183c2:	68 63 f2 01 c0       	push   0xc001f263
c00183c7:	e8 9f 7d ff ff       	call   c001016b <KePanic(char const*)>
c00183cc:	83 c4 10             	add    esp,0x10
c00183cf:	90                   	nop
c00183d0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c00183d6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c00183d9:	74 11                	je     c00183ec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c00183db:	83 ec 0c             	sub    esp,0xc
c00183de:	68 63 f2 01 c0       	push   0xc001f263
c00183e3:	e8 83 7d ff ff       	call   c001016b <KePanic(char const*)>
c00183e8:	83 c4 10             	add    esp,0x10
c00183eb:	90                   	nop
c00183ec:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00183ef:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00183f3:	7e 07                	jle    c00183fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00183f5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00183f9:	8d 76 00             	lea    esi,[esi+0x0]
c00183fc:	85 ff                	test   edi,edi
c00183fe:	7e 1c                	jle    c001841c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0018400:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0018407:	31 c0                	xor    eax,eax
c0018409:	8d 76 00             	lea    esi,[esi+0x0]
c001840c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001840f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0018412:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0018415:	83 c0 04             	add    eax,0x4
c0018418:	39 c1                	cmp    ecx,eax
c001841a:	75 f0                	jne    c001840c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001841c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001841f:	50                   	push   eax
c0018420:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018423:	29 f8                	sub    eax,edi
c0018425:	c1 e0 02             	shl    eax,0x2
c0018428:	50                   	push   eax
c0018429:	8d 04 ba             	lea    eax,[edx+edi*4]
c001842c:	50                   	push   eax
c001842d:	52                   	push   edx
c001842e:	e8 bd 7f fe ff       	call   c00003f0 <memmove>
c0018433:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0018436:	83 c4 10             	add    esp,0x10
c0018439:	89 f8                	mov    eax,edi
c001843b:	5b                   	pop    ebx
c001843c:	5e                   	pop    esi
c001843d:	5f                   	pop    edi
c001843e:	c3                   	ret    
c001843f:	90                   	nop

c0018440 <PCI::open(int, int, void*)>:
c0018440:	83 ec 18             	sub    esp,0x18
c0018443:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018447:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001844b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018451:	8b 10                	mov    edx,DWORD PTR [eax]
c0018453:	50                   	push   eax
c0018454:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0018457:	31 c0                	xor    eax,eax
c0018459:	83 c4 1c             	add    esp,0x1c
c001845c:	c3                   	ret    
c001845d:	90                   	nop

c001845e <PCI::close(int, int, void*)>:
c001845e:	31 c0                	xor    eax,eax
c0018460:	c3                   	ret    
c0018461:	90                   	nop

c0018462 <PCI::PCI()>:
c0018462:	83 ec 0c             	sub    esp,0xc
c0018465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018469:	83 ec 08             	sub    esp,0x8
c001846c:	68 7f f2 01 c0       	push   0xc001f27f
c0018471:	50                   	push   eax
c0018472:	e8 05 2e ff ff       	call   c000b27c <Bus::Bus(char const*)>
c0018477:	83 c4 10             	add    esp,0x10
c001847a:	ba 28 f3 01 c0       	mov    edx,0xc001f328
c001847f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018483:	89 10                	mov    DWORD PTR [eax],edx
c0018485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018489:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0018493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018497:	a3 00 48 02 c0       	mov    ds:0xc0024800,eax
c001849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184a6:	31 d2                	xor    edx,edx
c00184a8:	88 c2                	mov    dl,al
c00184aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184ae:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00184b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184bf:	31 d2                	xor    edx,edx
c00184c1:	88 c2                	mov    dl,al
c00184c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184c7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00184cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184d0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00184d6:	8d 50 01             	lea    edx,[eax+0x1]
c00184d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184dd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00184e3:	31 d2                	xor    edx,edx
c00184e5:	88 c2                	mov    dl,al
c00184e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184eb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00184ef:	83 c9 c0             	or     ecx,0xffffffc0
c00184f2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00184f6:	90                   	nop
c00184f7:	83 c4 0c             	add    esp,0xc
c00184fa:	c3                   	ret    
c00184fb:	90                   	nop

c00184fc <PCI::readBAR8(unsigned int, int)>:
c00184fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018500:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018504:	f6 c2 01             	test   dl,0x1
c0018507:	74 07                	je     c0018510 <PCI::readBAR8(unsigned int, int)+0x14>
c0018509:	83 e2 fc             	and    edx,0xfffffffc
c001850c:	01 c2                	add    edx,eax
c001850e:	ec                   	in     al,dx
c001850f:	c3                   	ret    
c0018510:	83 e2 f0             	and    edx,0xfffffff0
c0018513:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0018516:	c3                   	ret    
c0018517:	90                   	nop

c0018518 <PCI::readBAR16(unsigned int, int)>:
c0018518:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001851c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018520:	f6 c2 01             	test   dl,0x1
c0018523:	74 08                	je     c001852d <PCI::readBAR16(unsigned int, int)+0x15>
c0018525:	83 e2 fc             	and    edx,0xfffffffc
c0018528:	01 c2                	add    edx,eax
c001852a:	66 ed                	in     ax,dx
c001852c:	c3                   	ret    
c001852d:	83 e2 f0             	and    edx,0xfffffff0
c0018530:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018534:	c3                   	ret    
c0018535:	90                   	nop

c0018536 <PCI::readBAR32(unsigned int, int)>:
c0018536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001853a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001853e:	f6 c2 01             	test   dl,0x1
c0018541:	74 07                	je     c001854a <PCI::readBAR32(unsigned int, int)+0x14>
c0018543:	83 e2 fc             	and    edx,0xfffffffc
c0018546:	01 c2                	add    edx,eax
c0018548:	ed                   	in     eax,dx
c0018549:	c3                   	ret    
c001854a:	83 e2 f0             	and    edx,0xfffffff0
c001854d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018550:	c3                   	ret    
c0018551:	90                   	nop

c0018552 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018552:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018556:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001855a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001855e:	f6 c2 01             	test   dl,0x1
c0018561:	74 07                	je     c001856a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0018563:	83 e2 fc             	and    edx,0xfffffffc
c0018566:	01 ca                	add    edx,ecx
c0018568:	ee                   	out    dx,al
c0018569:	c3                   	ret    
c001856a:	83 e2 f0             	and    edx,0xfffffff0
c001856d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018570:	c3                   	ret    
c0018571:	90                   	nop

c0018572 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018572:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018576:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001857a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001857e:	f6 c2 01             	test   dl,0x1
c0018581:	74 08                	je     c001858b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0018583:	83 e2 fc             	and    edx,0xfffffffc
c0018586:	01 ca                	add    edx,ecx
c0018588:	66 ef                	out    dx,ax
c001858a:	c3                   	ret    
c001858b:	83 e2 f0             	and    edx,0xfffffff0
c001858e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0018592:	c3                   	ret    
c0018593:	90                   	nop

c0018594 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018594:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018598:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001859c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00185a0:	f6 c2 01             	test   dl,0x1
c00185a3:	74 07                	je     c00185ac <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c00185a5:	83 e2 fc             	and    edx,0xfffffffc
c00185a8:	01 ca                	add    edx,ecx
c00185aa:	ef                   	out    dx,eax
c00185ab:	c3                   	ret    
c00185ac:	83 e2 f0             	and    edx,0xfffffff0
c00185af:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c00185b2:	c3                   	ret    
c00185b3:	90                   	nop

c00185b4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00185b4:	55                   	push   ebp
c00185b5:	57                   	push   edi
c00185b6:	56                   	push   esi
c00185b7:	53                   	push   ebx
c00185b8:	83 ec 0c             	sub    esp,0xc
c00185bb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00185bf:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00185c3:	89 f0                	mov    eax,esi
c00185c5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00185c9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00185cd:	3c 07                	cmp    al,0x7
c00185cf:	76 10                	jbe    c00185e1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00185d1:	83 ec 0c             	sub    esp,0xc
c00185d4:	68 87 f2 01 c0       	push   0xc001f287
c00185d9:	e8 8d 7b ff ff       	call   c001016b <KePanic(char const*)>
c00185de:	83 c4 10             	add    esp,0x10
c00185e1:	80 fb 0f             	cmp    bl,0xf
c00185e4:	76 10                	jbe    c00185f6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00185e6:	83 ec 0c             	sub    esp,0xc
c00185e9:	68 b7 f2 01 c0       	push   0xc001f2b7
c00185ee:	e8 78 7b ff ff       	call   c001016b <KePanic(char const*)>
c00185f3:	83 c4 10             	add    esp,0x10
c00185f6:	8d 04 36             	lea    eax,[esi+esi*1]
c00185f9:	ba f8 0c 00 00       	mov    edx,0xcf8
c00185fe:	83 c8 f0             	or     eax,0xfffffff0
c0018601:	ee                   	out    dx,al
c0018602:	ba fa 0c 00 00       	mov    edx,0xcfa
c0018607:	89 e8                	mov    eax,ebp
c0018609:	ee                   	out    dx,al
c001860a:	83 c4 0c             	add    esp,0xc
c001860d:	89 d8                	mov    eax,ebx
c001860f:	66 81 e7 fc 00       	and    di,0xfc
c0018614:	5b                   	pop    ebx
c0018615:	c1 e0 08             	shl    eax,0x8
c0018618:	5e                   	pop    esi
c0018619:	09 f8                	or     eax,edi
c001861b:	5f                   	pop    edi
c001861c:	66 0d 00 c0          	or     ax,0xc000
c0018620:	5d                   	pop    ebp
c0018621:	c3                   	ret    

c0018622 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018622:	57                   	push   edi
c0018623:	56                   	push   esi
c0018624:	53                   	push   ebx
c0018625:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018629:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001862d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0018633:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018637:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001863b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001863f:	83 ff 01             	cmp    edi,0x1
c0018642:	75 3e                	jne    c0018682 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018644:	89 de                	mov    esi,ebx
c0018646:	0f b6 c0             	movzx  eax,al
c0018649:	81 e6 fc 00 00 00    	and    esi,0xfc
c001864f:	c1 e0 10             	shl    eax,0x10
c0018652:	0f b6 c9             	movzx  ecx,cl
c0018655:	09 f0                	or     eax,esi
c0018657:	c1 e1 08             	shl    ecx,0x8
c001865a:	0f b6 d2             	movzx  edx,dl
c001865d:	09 c8                	or     eax,ecx
c001865f:	c1 e2 0b             	shl    edx,0xb
c0018662:	09 d0                	or     eax,edx
c0018664:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018669:	0d 00 00 00 80       	or     eax,0x80000000
c001866e:	ef                   	out    dx,eax
c001866f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018674:	ed                   	in     eax,dx
c0018675:	83 e3 02             	and    ebx,0x2
c0018678:	0f b6 cb             	movzx  ecx,bl
c001867b:	c1 e1 03             	shl    ecx,0x3
c001867e:	d3 e8                	shr    eax,cl
c0018680:	eb 43                	jmp    c00186c5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018682:	83 ff 02             	cmp    edi,0x2
c0018685:	75 2c                	jne    c00186b3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018687:	83 ec 0c             	sub    esp,0xc
c001868a:	0f b6 c9             	movzx  ecx,cl
c001868d:	0f b6 d2             	movzx  edx,dl
c0018690:	0f b6 fb             	movzx  edi,bl
c0018693:	0f b6 c0             	movzx  eax,al
c0018696:	57                   	push   edi
c0018697:	51                   	push   ecx
c0018698:	52                   	push   edx
c0018699:	50                   	push   eax
c001869a:	56                   	push   esi
c001869b:	e8 14 ff ff ff       	call   c00185b4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186a0:	89 c2                	mov    edx,eax
c00186a2:	ed                   	in     eax,dx
c00186a3:	83 e3 02             	and    ebx,0x2
c00186a6:	83 c4 20             	add    esp,0x20
c00186a9:	0f b6 cb             	movzx  ecx,bl
c00186ac:	c1 e1 03             	shl    ecx,0x3
c00186af:	d3 e8                	shr    eax,cl
c00186b1:	eb 12                	jmp    c00186c5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00186b3:	83 ec 0c             	sub    esp,0xc
c00186b6:	68 e7 f2 01 c0       	push   0xc001f2e7
c00186bb:	e8 ab 7a ff ff       	call   c001016b <KePanic(char const*)>
c00186c0:	83 c4 10             	add    esp,0x10
c00186c3:	31 c0                	xor    eax,eax
c00186c5:	5b                   	pop    ebx
c00186c6:	5e                   	pop    esi
c00186c7:	5f                   	pop    edi
c00186c8:	c3                   	ret    
c00186c9:	90                   	nop

c00186ca <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00186ca:	83 ec 18             	sub    esp,0x18
c00186cd:	6a 00                	push   0x0
c00186cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186d4:	50                   	push   eax
c00186d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186da:	50                   	push   eax
c00186db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186e0:	50                   	push   eax
c00186e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186e5:	e8 38 ff ff ff       	call   c0018622 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00186ea:	83 c4 2c             	add    esp,0x2c
c00186ed:	c3                   	ret    

c00186ee <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00186ee:	83 ec 18             	sub    esp,0x18
c00186f1:	6a 0e                	push   0xe
c00186f3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186f8:	50                   	push   eax
c00186f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00186fe:	50                   	push   eax
c00186ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018704:	50                   	push   eax
c0018705:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018709:	e8 14 ff ff ff       	call   c0018622 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001870e:	83 c4 2c             	add    esp,0x2c
c0018711:	0f b6 c0             	movzx  eax,al
c0018714:	c3                   	ret    
c0018715:	90                   	nop

c0018716 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0018716:	55                   	push   ebp
c0018717:	57                   	push   edi
c0018718:	56                   	push   esi
c0018719:	53                   	push   ebx
c001871a:	83 ec 18             	sub    esp,0x18
c001871d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0018722:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0018727:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001872c:	6a 0a                	push   0xa
c001872e:	56                   	push   esi
c001872f:	55                   	push   ebp
c0018730:	57                   	push   edi
c0018731:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018735:	e8 e8 fe ff ff       	call   c0018622 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001873a:	83 c4 14             	add    esp,0x14
c001873d:	89 c3                	mov    ebx,eax
c001873f:	6a 0a                	push   0xa
c0018741:	0f b6 db             	movzx  ebx,bl
c0018744:	56                   	push   esi
c0018745:	55                   	push   ebp
c0018746:	57                   	push   edi
c0018747:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001874b:	e8 d2 fe ff ff       	call   c0018622 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018750:	83 c4 2c             	add    esp,0x2c
c0018753:	25 00 ff 00 00       	and    eax,0xff00
c0018758:	09 d8                	or     eax,ebx
c001875a:	5b                   	pop    ebx
c001875b:	5e                   	pop    esi
c001875c:	5f                   	pop    edi
c001875d:	5d                   	pop    ebp
c001875e:	c3                   	ret    
c001875f:	90                   	nop

c0018760 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018760:	83 ec 18             	sub    esp,0x18
c0018763:	6a 08                	push   0x8
c0018765:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001876a:	50                   	push   eax
c001876b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018770:	50                   	push   eax
c0018771:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018776:	50                   	push   eax
c0018777:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001877b:	e8 a2 fe ff ff       	call   c0018622 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018780:	83 c4 2c             	add    esp,0x2c
c0018783:	0f b6 c4             	movzx  eax,ah
c0018786:	c3                   	ret    
c0018787:	90                   	nop

c0018788 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018788:	83 ec 18             	sub    esp,0x18
c001878b:	6a 08                	push   0x8
c001878d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018792:	50                   	push   eax
c0018793:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018798:	50                   	push   eax
c0018799:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001879e:	50                   	push   eax
c001879f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187a3:	e8 7a fe ff ff       	call   c0018622 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187a8:	83 c4 2c             	add    esp,0x2c
c00187ab:	c3                   	ret    

c00187ac <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00187ac:	83 ec 18             	sub    esp,0x18
c00187af:	6a 3c                	push   0x3c
c00187b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187b6:	50                   	push   eax
c00187b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187bc:	50                   	push   eax
c00187bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187c2:	50                   	push   eax
c00187c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187c7:	e8 56 fe ff ff       	call   c0018622 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187cc:	83 c4 2c             	add    esp,0x2c
c00187cf:	c3                   	ret    

c00187d0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00187d0:	83 ec 18             	sub    esp,0x18
c00187d3:	6a 18                	push   0x18
c00187d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187da:	50                   	push   eax
c00187db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187e0:	50                   	push   eax
c00187e1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187e6:	50                   	push   eax
c00187e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187eb:	e8 32 fe ff ff       	call   c0018622 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187f0:	83 c4 2c             	add    esp,0x2c
c00187f3:	0f b6 c4             	movzx  eax,ah
c00187f6:	c3                   	ret    
c00187f7:	90                   	nop

c00187f8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00187f8:	55                   	push   ebp
c00187f9:	57                   	push   edi
c00187fa:	56                   	push   esi
c00187fb:	53                   	push   ebx
c00187fc:	83 ec 28             	sub    esp,0x28
c00187ff:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0018803:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0018808:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001880d:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c0018812:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0018819:	8d 43 12             	lea    eax,[ebx+0x12]
c001881c:	83 c3 10             	add    ebx,0x10
c001881f:	0f b6 c0             	movzx  eax,al
c0018822:	0f b6 db             	movzx  ebx,bl
c0018825:	50                   	push   eax
c0018826:	51                   	push   ecx
c0018827:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001882b:	57                   	push   edi
c001882c:	55                   	push   ebp
c001882d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018831:	e8 ec fd ff ff       	call   c0018622 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018836:	83 c4 14             	add    esp,0x14
c0018839:	89 c6                	mov    esi,eax
c001883b:	53                   	push   ebx
c001883c:	c1 e6 10             	shl    esi,0x10
c001883f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018843:	51                   	push   ecx
c0018844:	57                   	push   edi
c0018845:	55                   	push   ebp
c0018846:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001884a:	e8 d3 fd ff ff       	call   c0018622 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001884f:	83 c4 3c             	add    esp,0x3c
c0018852:	0f b7 c0             	movzx  eax,ax
c0018855:	5b                   	pop    ebx
c0018856:	09 f0                	or     eax,esi
c0018858:	5e                   	pop    esi
c0018859:	5f                   	pop    edi
c001885a:	5d                   	pop    ebp
c001885b:	c3                   	ret    

c001885c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001885c:	55                   	push   ebp
c001885d:	57                   	push   edi
c001885e:	56                   	push   esi
c001885f:	53                   	push   ebx
c0018860:	83 ec 0c             	sub    esp,0xc
c0018863:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018867:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001886b:	89 f5                	mov    ebp,esi
c001886d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0018873:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018877:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001887b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001887f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018883:	83 f9 01             	cmp    ecx,0x1
c0018886:	75 5d                	jne    c00188e5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018888:	0f b6 c8             	movzx  ecx,al
c001888b:	0f b6 d2             	movzx  edx,dl
c001888e:	c1 e1 10             	shl    ecx,0x10
c0018891:	c1 e2 0b             	shl    edx,0xb
c0018894:	89 f0                	mov    eax,esi
c0018896:	25 fc 00 00 00       	and    eax,0xfc
c001889b:	09 c1                	or     ecx,eax
c001889d:	89 e8                	mov    eax,ebp
c001889f:	0f b6 c0             	movzx  eax,al
c00188a2:	c1 e0 08             	shl    eax,0x8
c00188a5:	09 c1                	or     ecx,eax
c00188a7:	09 d1                	or     ecx,edx
c00188a9:	ba f8 0c 00 00       	mov    edx,0xcf8
c00188ae:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00188b4:	89 c8                	mov    eax,ecx
c00188b6:	ef                   	out    dx,eax
c00188b7:	ba fc 0c 00 00       	mov    edx,0xcfc
c00188bc:	ed                   	in     eax,dx
c00188bd:	0f b7 db             	movzx  ebx,bx
c00188c0:	83 e6 02             	and    esi,0x2
c00188c3:	74 0a                	je     c00188cf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00188c5:	0f b7 d0             	movzx  edx,ax
c00188c8:	c1 e3 10             	shl    ebx,0x10
c00188cb:	09 d3                	or     ebx,edx
c00188cd:	eb 05                	jmp    c00188d4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00188cf:	66 31 c0             	xor    ax,ax
c00188d2:	09 c3                	or     ebx,eax
c00188d4:	ba f8 0c 00 00       	mov    edx,0xcf8
c00188d9:	89 c8                	mov    eax,ecx
c00188db:	ef                   	out    dx,eax
c00188dc:	ba fc 0c 00 00       	mov    edx,0xcfc
c00188e1:	89 d8                	mov    eax,ebx
c00188e3:	eb 41                	jmp    c0018926 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00188e5:	83 f9 02             	cmp    ecx,0x2
c00188e8:	75 45                	jne    c001892f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00188ea:	83 ec 0c             	sub    esp,0xc
c00188ed:	0f b6 d2             	movzx  edx,dl
c00188f0:	89 f1                	mov    ecx,esi
c00188f2:	0f b6 c0             	movzx  eax,al
c00188f5:	0f b6 f1             	movzx  esi,cl
c00188f8:	89 e9                	mov    ecx,ebp
c00188fa:	56                   	push   esi
c00188fb:	0f b6 c9             	movzx  ecx,cl
c00188fe:	51                   	push   ecx
c00188ff:	52                   	push   edx
c0018900:	50                   	push   eax
c0018901:	57                   	push   edi
c0018902:	e8 ad fc ff ff       	call   c00185b4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018907:	89 c2                	mov    edx,eax
c0018909:	ed                   	in     eax,dx
c001890a:	83 c4 20             	add    esp,0x20
c001890d:	0f b7 db             	movzx  ebx,bx
c0018910:	f6 c2 02             	test   dl,0x2
c0018913:	74 0c                	je     c0018921 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0018915:	0f b7 c8             	movzx  ecx,ax
c0018918:	89 d8                	mov    eax,ebx
c001891a:	c1 e0 10             	shl    eax,0x10
c001891d:	09 c8                	or     eax,ecx
c001891f:	eb 05                	jmp    c0018926 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018921:	66 31 c0             	xor    ax,ax
c0018924:	09 d8                	or     eax,ebx
c0018926:	ef                   	out    dx,eax
c0018927:	83 c4 0c             	add    esp,0xc
c001892a:	5b                   	pop    ebx
c001892b:	5e                   	pop    esi
c001892c:	5f                   	pop    edi
c001892d:	5d                   	pop    ebp
c001892e:	c3                   	ret    
c001892f:	c7 44 24 20 e7 f2 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f2e7
c0018937:	83 c4 0c             	add    esp,0xc
c001893a:	5b                   	pop    ebx
c001893b:	5e                   	pop    esi
c001893c:	5f                   	pop    edi
c001893d:	5d                   	pop    ebp
c001893e:	e9 28 78 ff ff       	jmp    c001016b <KePanic(char const*)>
c0018943:	90                   	nop

c0018944 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018944:	55                   	push   ebp
c0018945:	57                   	push   edi
c0018946:	56                   	push   esi
c0018947:	53                   	push   ebx
c0018948:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001894e:	80 3d 0c 48 02 c0 00 	cmp    BYTE PTR ds:0xc002480c,0x0
c0018955:	0f 85 84 00 00 00    	jne    c00189df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001895b:	83 ec 0c             	sub    esp,0xc
c001895e:	68 14 01 00 00       	push   0x114
c0018963:	e8 61 ee fe ff       	call   c00077c9 <malloc>
c0018968:	83 c4 0c             	add    esp,0xc
c001896b:	89 c3                	mov    ebx,eax
c001896d:	ff 35 50 3e 02 c0    	push   DWORD PTR ds:0xc0023e50
c0018973:	68 ed f2 01 c0       	push   0xc001f2ed
c0018978:	50                   	push   eax
c0018979:	e8 e0 20 ff ff       	call   c000aa5e <File::File(char const*, Process*)>
c001897e:	5a                   	pop    edx
c001897f:	59                   	pop    ecx
c0018980:	6a 01                	push   0x1
c0018982:	53                   	push   ebx
c0018983:	e8 96 21 ff ff       	call   c000ab1e <File::open(FileOpenMode)>
c0018988:	83 c4 0c             	add    esp,0xc
c001898b:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001898f:	50                   	push   eax
c0018990:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018994:	50                   	push   eax
c0018995:	53                   	push   ebx
c0018996:	e8 2f 24 ff ff       	call   c000adca <File::stat(unsigned long long*, bool*)>
c001899b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001899f:	40                   	inc    eax
c00189a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00189a3:	e8 21 ee fe ff       	call   c00077c9 <malloc>
c00189a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00189ac:	a3 08 48 02 c0       	mov    ds:0xc0024808,eax
c00189b1:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00189b5:	5e                   	pop    esi
c00189b6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00189b8:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00189bc:	51                   	push   ecx
c00189bd:	50                   	push   eax
c00189be:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00189c2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00189c6:	53                   	push   ebx
c00189c7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00189ca:	83 c4 14             	add    esp,0x14
c00189cd:	53                   	push   ebx
c00189ce:	e8 a9 21 ff ff       	call   c000ab7c <File::close()>
c00189d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189d7:	83 c4 10             	add    esp,0x10
c00189da:	a3 04 48 02 c0       	mov    ds:0xc0024804,eax
c00189df:	a1 04 48 02 c0       	mov    eax,ds:0xc0024804
c00189e4:	8b 15 08 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024808
c00189ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00189ed:	31 ff                	xor    edi,edi
c00189ef:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00189f7:	31 f6                	xor    esi,esi
c00189f9:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00189fe:	31 db                	xor    ebx,ebx
c0018a00:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018a08:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018a0d:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018a14:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018a18:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018a1f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018a23:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018a26:	0f 8e 6b 01 00 00    	jle    c0018b97 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018a2c:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018a2f:	d4 40                	aam    0x40
c0018a31:	d5 39                	aad    0x39
c0018a33:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a37:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018a3b:	d4 40                	aam    0x40
c0018a3d:	d5 39                	aad    0x39
c0018a3f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018a43:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018a47:	d4 40                	aam    0x40
c0018a49:	d5 39                	aad    0x39
c0018a4b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018a4f:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018a53:	d4 40                	aam    0x40
c0018a55:	d5 39                	aad    0x39
c0018a57:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018a5b:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018a5f:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018a63:	3c 56                	cmp    al,0x56
c0018a65:	74 45                	je     c0018aac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018a67:	d4 40                	aam    0x40
c0018a69:	d5 39                	aad    0x39
c0018a6b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a6e:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018a72:	0f b6 c9             	movzx  ecx,cl
c0018a75:	c1 e1 04             	shl    ecx,0x4
c0018a78:	d4 40                	aam    0x40
c0018a7a:	d5 39                	aad    0x39
c0018a7c:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018a7f:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018a83:	0f b6 db             	movzx  ebx,bl
c0018a86:	09 cb                	or     ebx,ecx
c0018a88:	c1 e3 04             	shl    ebx,0x4
c0018a8b:	d4 40                	aam    0x40
c0018a8d:	d5 39                	aad    0x39
c0018a8f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018a92:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018a96:	0f b6 c9             	movzx  ecx,cl
c0018a99:	09 cb                	or     ebx,ecx
c0018a9b:	c1 e3 04             	shl    ebx,0x4
c0018a9e:	89 d9                	mov    ecx,ebx
c0018aa0:	d4 40                	aam    0x40
c0018aa2:	d5 39                	aad    0x39
c0018aa4:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018aa7:	0f b6 db             	movzx  ebx,bl
c0018aaa:	09 cb                	or     ebx,ecx
c0018aac:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018ab0:	80 f9 44             	cmp    cl,0x44
c0018ab3:	74 47                	je     c0018afc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018ab5:	88 c8                	mov    al,cl
c0018ab7:	d4 40                	aam    0x40
c0018ab9:	d5 39                	aad    0x39
c0018abb:	83 e8 30             	sub    eax,0x30
c0018abe:	0f b6 e8             	movzx  ebp,al
c0018ac1:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018ac5:	c1 e5 04             	shl    ebp,0x4
c0018ac8:	d4 40                	aam    0x40
c0018aca:	d5 39                	aad    0x39
c0018acc:	83 e8 30             	sub    eax,0x30
c0018acf:	0f b6 f0             	movzx  esi,al
c0018ad2:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018ad6:	09 ee                	or     esi,ebp
c0018ad8:	c1 e6 04             	shl    esi,0x4
c0018adb:	d4 40                	aam    0x40
c0018add:	d5 39                	aad    0x39
c0018adf:	83 e8 30             	sub    eax,0x30
c0018ae2:	0f b6 e8             	movzx  ebp,al
c0018ae5:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018ae9:	09 ee                	or     esi,ebp
c0018aeb:	c1 e6 04             	shl    esi,0x4
c0018aee:	89 f5                	mov    ebp,esi
c0018af0:	d4 40                	aam    0x40
c0018af2:	d5 39                	aad    0x39
c0018af4:	83 e8 30             	sub    eax,0x30
c0018af7:	0f b6 f0             	movzx  esi,al
c0018afa:	09 ee                	or     esi,ebp
c0018afc:	83 c7 10             	add    edi,0x10
c0018aff:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018b03:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018b06:	3c 0a                	cmp    al,0xa
c0018b08:	74 09                	je     c0018b13 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018b0a:	45                   	inc    ebp
c0018b0b:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018b0e:	75 16                	jne    c0018b26 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018b10:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018b13:	3c 0a                	cmp    al,0xa
c0018b15:	0f 94 c0             	sete   al
c0018b18:	0f b6 c0             	movzx  eax,al
c0018b1b:	01 c7                	add    edi,eax
c0018b1d:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018b22:	75 0c                	jne    c0018b30 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018b24:	eb 15                	jmp    c0018b3b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018b26:	47                   	inc    edi
c0018b27:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018b2a:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018b2e:	eb d3                	jmp    c0018b03 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018b30:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018b35:	0f 85 e8 fe ff ff    	jne    c0018a23 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b3b:	80 f9 44             	cmp    cl,0x44
c0018b3e:	74 0b                	je     c0018b4b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018b40:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018b45:	0f 85 d8 fe ff ff    	jne    c0018a23 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b4b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018b4f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018b53:	c1 e1 04             	shl    ecx,0x4
c0018b56:	83 e8 30             	sub    eax,0x30
c0018b59:	09 c8                	or     eax,ecx
c0018b5b:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018b5f:	0f 85 be fe ff ff    	jne    c0018a23 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b65:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018b69:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018b6d:	c1 e1 04             	shl    ecx,0x4
c0018b70:	83 e8 30             	sub    eax,0x30
c0018b73:	09 c8                	or     eax,ecx
c0018b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018b79:	0f 85 a4 fe ff ff    	jne    c0018a23 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018b7f:	50                   	push   eax
c0018b80:	50                   	push   eax
c0018b81:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018b85:	50                   	push   eax
c0018b86:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018b8d:	e8 7e 7a fe ff       	call   c0000610 <strcpy>
c0018b92:	83 c4 10             	add    esp,0x10
c0018b95:	eb 15                	jmp    c0018bac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018b97:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018b9e:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018ba9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018bac:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018bb3:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018bb9:	5b                   	pop    ebx
c0018bba:	5e                   	pop    esi
c0018bbb:	5f                   	pop    edi
c0018bbc:	5d                   	pop    ebp
c0018bbd:	c3                   	ret    

c0018bbe <PCI::checkBus(unsigned char)>:
c0018bbe:	56                   	push   esi
c0018bbf:	53                   	push   ebx
c0018bc0:	31 f6                	xor    esi,esi
c0018bc2:	51                   	push   ecx
c0018bc3:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018bc7:	0f b6 c3             	movzx  eax,bl
c0018bca:	52                   	push   edx
c0018bcb:	56                   	push   esi
c0018bcc:	46                   	inc    esi
c0018bcd:	50                   	push   eax
c0018bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018bd2:	e8 f3 02 00 00       	call   c0018eca <PCI::checkDevice(unsigned char, unsigned char)>
c0018bd7:	83 c4 10             	add    esp,0x10
c0018bda:	83 fe 20             	cmp    esi,0x20
c0018bdd:	75 e8                	jne    c0018bc7 <PCI::checkBus(unsigned char)+0x9>
c0018bdf:	58                   	pop    eax
c0018be0:	5b                   	pop    ebx
c0018be1:	5e                   	pop    esi
c0018be2:	c3                   	ret    
c0018be3:	90                   	nop

c0018be4 <PCI::foundDevice(PCIDeviceInfo)>:
c0018be4:	55                   	push   ebp
c0018be5:	57                   	push   edi
c0018be6:	56                   	push   esi
c0018be7:	53                   	push   ebx
c0018be8:	83 ec 1c             	sub    esp,0x1c
c0018beb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018bef:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018bf5:	0f 84 52 01 00 00    	je     c0018d4d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018bfb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018bff:	66 81 f9 06 04       	cmp    cx,0x406
c0018c04:	75 2c                	jne    c0018c32 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018c06:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018c0b:	50                   	push   eax
c0018c0c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018c11:	50                   	push   eax
c0018c12:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018c17:	50                   	push   eax
c0018c18:	56                   	push   esi
c0018c19:	e8 b2 fb ff ff       	call   c00187d0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018c1e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018c22:	0f b6 c0             	movzx  eax,al
c0018c25:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018c29:	83 c4 2c             	add    esp,0x2c
c0018c2c:	5b                   	pop    ebx
c0018c2d:	5e                   	pop    esi
c0018c2e:	5f                   	pop    edi
c0018c2f:	5d                   	pop    ebp
c0018c30:	eb 8c                	jmp    c0018bbe <PCI::checkBus(unsigned char)>
c0018c32:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c36:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018c3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c40:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018c44:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018c48:	88 d3                	mov    bl,dl
c0018c4a:	85 c0                	test   eax,eax
c0018c4c:	74 33                	je     c0018c81 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018c4e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018c51:	85 d2                	test   edx,edx
c0018c53:	74 28                	je     c0018c7d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c55:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018c5b:	31 ef                	xor    edi,ebp
c0018c5d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018c63:	75 18                	jne    c0018c7d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c65:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018c69:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018c6f:	75 0c                	jne    c0018c7d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018c71:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018c77:	0f 84 d0 00 00 00    	je     c0018d4d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018c7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018c7f:	eb c9                	jmp    c0018c4a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018c81:	66 81 f9 01 06       	cmp    cx,0x601
c0018c86:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018c8a:	75 19                	jne    c0018ca5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018c8c:	83 ec 0c             	sub    esp,0xc
c0018c8f:	68 64 01 00 00       	push   0x164
c0018c94:	e8 30 eb fe ff       	call   c00077c9 <malloc>
c0018c99:	89 c5                	mov    ebp,eax
c0018c9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0018c9e:	e8 47 0e 00 00       	call   c0019aea <SATABus::SATABus()>
c0018ca3:	eb 1e                	jmp    c0018cc3 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018ca5:	66 81 f9 01 01       	cmp    cx,0x101
c0018caa:	75 60                	jne    c0018d0c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018cac:	83 ec 0c             	sub    esp,0xc
c0018caf:	68 70 02 00 00       	push   0x270
c0018cb4:	e8 10 eb fe ff       	call   c00077c9 <malloc>
c0018cb9:	89 c5                	mov    ebp,eax
c0018cbb:	89 04 24             	mov    DWORD PTR [esp],eax
c0018cbe:	e8 cb 02 00 00       	call   c0018f8e <IDE::IDE()>
c0018cc3:	58                   	pop    eax
c0018cc4:	5a                   	pop    edx
c0018cc5:	55                   	push   ebp
c0018cc6:	56                   	push   esi
c0018cc7:	e8 5c 2c ff ff       	call   c000b928 <Device::addChild(Device*)>
c0018ccc:	83 ec 1c             	sub    esp,0x1c
c0018ccf:	b9 09 00 00 00       	mov    ecx,0x9
c0018cd4:	fc                   	cld    
c0018cd5:	89 e7                	mov    edi,esp
c0018cd7:	89 de                	mov    esi,ebx
c0018cd9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018cdb:	55                   	push   ebp
c0018cdc:	e8 8d 2b ff ff       	call   c000b86e <Device::preOpenPCI(PCIDeviceInfo)>
c0018ce1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018ce4:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018ce8:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018cf0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018cf8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018d00:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018d03:	83 c4 4c             	add    esp,0x4c
c0018d06:	5b                   	pop    ebx
c0018d07:	5e                   	pop    esi
c0018d08:	5f                   	pop    edi
c0018d09:	5d                   	pop    ebp
c0018d0a:	ff e0                	jmp    eax
c0018d0c:	83 ec 0c             	sub    esp,0xc
c0018d0f:	68 58 01 00 00       	push   0x158
c0018d14:	e8 b0 ea fe ff       	call   c00077c9 <malloc>
c0018d19:	89 c5                	mov    ebp,eax
c0018d1b:	58                   	pop    eax
c0018d1c:	5a                   	pop    edx
c0018d1d:	68 06 f3 01 c0       	push   0xc001f306
c0018d22:	55                   	push   ebp
c0018d23:	e8 9e 2e ff ff       	call   c000bbc6 <DriverlessDevice::DriverlessDevice(char const*)>
c0018d28:	59                   	pop    ecx
c0018d29:	5f                   	pop    edi
c0018d2a:	55                   	push   ebp
c0018d2b:	56                   	push   esi
c0018d2c:	e8 f7 2b ff ff       	call   c000b928 <Device::addChild(Device*)>
c0018d31:	b9 09 00 00 00       	mov    ecx,0x9
c0018d36:	fc                   	cld    
c0018d37:	89 df                	mov    edi,ebx
c0018d39:	89 de                	mov    esi,ebx
c0018d3b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d3d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018d41:	83 c4 2c             	add    esp,0x2c
c0018d44:	5b                   	pop    ebx
c0018d45:	5e                   	pop    esi
c0018d46:	5f                   	pop    edi
c0018d47:	5d                   	pop    ebp
c0018d48:	e9 21 2b ff ff       	jmp    c000b86e <Device::preOpenPCI(PCIDeviceInfo)>
c0018d4d:	83 c4 1c             	add    esp,0x1c
c0018d50:	5b                   	pop    ebx
c0018d51:	5e                   	pop    esi
c0018d52:	5f                   	pop    edi
c0018d53:	5d                   	pop    ebp
c0018d54:	c3                   	ret    
c0018d55:	90                   	nop

c0018d56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018d56:	55                   	push   ebp
c0018d57:	57                   	push   edi
c0018d58:	56                   	push   esi
c0018d59:	53                   	push   ebx
c0018d5a:	83 ec 68             	sub    esp,0x68
c0018d5d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018d61:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018d68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018d6c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018d73:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018d78:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018d7c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018d83:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018d88:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018d8c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018d91:	6a 0c                	push   0xc
c0018d93:	57                   	push   edi
c0018d94:	53                   	push   ebx
c0018d95:	56                   	push   esi
c0018d96:	55                   	push   ebp
c0018d97:	e8 86 f8 ff ff       	call   c0018622 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018d9c:	83 c4 20             	add    esp,0x20
c0018d9f:	57                   	push   edi
c0018da0:	53                   	push   ebx
c0018da1:	56                   	push   esi
c0018da2:	55                   	push   ebp
c0018da3:	e8 6e f9 ff ff       	call   c0018716 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018da8:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018dad:	57                   	push   edi
c0018dae:	53                   	push   ebx
c0018daf:	56                   	push   esi
c0018db0:	55                   	push   ebp
c0018db1:	e8 f6 f9 ff ff       	call   c00187ac <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018db6:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018dba:	83 c4 14             	add    esp,0x14
c0018dbd:	6a 3c                	push   0x3c
c0018dbf:	57                   	push   edi
c0018dc0:	53                   	push   ebx
c0018dc1:	56                   	push   esi
c0018dc2:	55                   	push   ebp
c0018dc3:	e8 5a f8 ff ff       	call   c0018622 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018dc8:	0f b6 c4             	movzx  eax,ah
c0018dcb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018dcf:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018dd3:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018dd7:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c0018ddc:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018de2:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018de8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018dec:	83 c4 20             	add    esp,0x20
c0018def:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018df4:	74 30                	je     c0018e26 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018df6:	31 c0                	xor    eax,eax
c0018df8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018dfc:	7e 28                	jle    c0018e26 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018dfe:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018e06:	39 cb                	cmp    ebx,ecx
c0018e08:	75 19                	jne    c0018e23 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018e0a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018e12:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018e16:	75 0b                	jne    c0018e23 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018e18:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018e1f:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018e23:	40                   	inc    eax
c0018e24:	eb d2                	jmp    c0018df8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018e26:	31 d2                	xor    edx,edx
c0018e28:	83 ec 0c             	sub    esp,0xc
c0018e2b:	57                   	push   edi
c0018e2c:	53                   	push   ebx
c0018e2d:	56                   	push   esi
c0018e2e:	52                   	push   edx
c0018e2f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018e33:	55                   	push   ebp
c0018e34:	e8 bf f9 ff ff       	call   c00187f8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e39:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e3d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018e41:	42                   	inc    edx
c0018e42:	83 c4 20             	add    esp,0x20
c0018e45:	83 fa 06             	cmp    edx,0x6
c0018e48:	75 de                	jne    c0018e28 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018e4a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e4f:	83 ec 0c             	sub    esp,0xc
c0018e52:	86 e0                	xchg   al,ah
c0018e54:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018e59:	6a 02                	push   0x2
c0018e5b:	57                   	push   edi
c0018e5c:	53                   	push   ebx
c0018e5d:	56                   	push   esi
c0018e5e:	55                   	push   ebp
c0018e5f:	e8 be f7 ff ff       	call   c0018622 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e64:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018e69:	83 c4 20             	add    esp,0x20
c0018e6c:	57                   	push   edi
c0018e6d:	53                   	push   ebx
c0018e6e:	56                   	push   esi
c0018e6f:	55                   	push   ebp
c0018e70:	e8 eb f8 ff ff       	call   c0018760 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018e75:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018e79:	57                   	push   edi
c0018e7a:	53                   	push   ebx
c0018e7b:	56                   	push   esi
c0018e7c:	55                   	push   ebp
c0018e7d:	e8 48 f8 ff ff       	call   c00186ca <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018e82:	b9 09 00 00 00       	mov    ecx,0x9
c0018e87:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018e8c:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018e90:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018e94:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018e98:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018e9c:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018ea0:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018ea4:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018ea8:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018eac:	83 ec 0c             	sub    esp,0xc
c0018eaf:	fc                   	cld    
c0018eb0:	89 e7                	mov    edi,esp
c0018eb2:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018eb6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018eb8:	55                   	push   ebp
c0018eb9:	e8 26 fd ff ff       	call   c0018be4 <PCI::foundDevice(PCIDeviceInfo)>
c0018ebe:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018ec4:	5b                   	pop    ebx
c0018ec5:	5e                   	pop    esi
c0018ec6:	5f                   	pop    edi
c0018ec7:	5d                   	pop    ebp
c0018ec8:	c3                   	ret    
c0018ec9:	90                   	nop

c0018eca <PCI::checkDevice(unsigned char, unsigned char)>:
c0018eca:	55                   	push   ebp
c0018ecb:	57                   	push   edi
c0018ecc:	56                   	push   esi
c0018ecd:	53                   	push   ebx
c0018ece:	83 ec 0c             	sub    esp,0xc
c0018ed1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018ed5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018eda:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018edf:	6a 00                	push   0x0
c0018ee1:	56                   	push   esi
c0018ee2:	57                   	push   edi
c0018ee3:	55                   	push   ebp
c0018ee4:	e8 e1 f7 ff ff       	call   c00186ca <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ee9:	6a 00                	push   0x0
c0018eeb:	56                   	push   esi
c0018eec:	57                   	push   edi
c0018eed:	55                   	push   ebp
c0018eee:	e8 63 fe ff ff       	call   c0018d56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018ef3:	83 c4 20             	add    esp,0x20
c0018ef6:	6a 00                	push   0x0
c0018ef8:	56                   	push   esi
c0018ef9:	57                   	push   edi
c0018efa:	55                   	push   ebp
c0018efb:	e8 ee f7 ff ff       	call   c00186ee <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018f00:	83 c4 10             	add    esp,0x10
c0018f03:	84 c0                	test   al,al
c0018f05:	79 27                	jns    c0018f2e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018f07:	bb 01 00 00 00       	mov    ebx,0x1
c0018f0c:	53                   	push   ebx
c0018f0d:	56                   	push   esi
c0018f0e:	57                   	push   edi
c0018f0f:	55                   	push   ebp
c0018f10:	e8 b5 f7 ff ff       	call   c00186ca <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f15:	83 c4 10             	add    esp,0x10
c0018f18:	66 40                	inc    ax
c0018f1a:	74 0c                	je     c0018f28 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018f1c:	53                   	push   ebx
c0018f1d:	56                   	push   esi
c0018f1e:	57                   	push   edi
c0018f1f:	55                   	push   ebp
c0018f20:	e8 31 fe ff ff       	call   c0018d56 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018f25:	83 c4 10             	add    esp,0x10
c0018f28:	43                   	inc    ebx
c0018f29:	83 fb 08             	cmp    ebx,0x8
c0018f2c:	75 de                	jne    c0018f0c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018f2e:	83 c4 0c             	add    esp,0xc
c0018f31:	5b                   	pop    ebx
c0018f32:	5e                   	pop    esi
c0018f33:	5f                   	pop    edi
c0018f34:	5d                   	pop    ebp
c0018f35:	c3                   	ret    

c0018f36 <PCI::detect()>:
c0018f36:	56                   	push   esi
c0018f37:	53                   	push   ebx
c0018f38:	53                   	push   ebx
c0018f39:	31 db                	xor    ebx,ebx
c0018f3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018f3f:	6a 00                	push   0x0
c0018f41:	6a 00                	push   0x0
c0018f43:	6a 00                	push   0x0
c0018f45:	56                   	push   esi
c0018f46:	e8 a3 f7 ff ff       	call   c00186ee <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018f4b:	83 c4 10             	add    esp,0x10
c0018f4e:	a8 80                	test   al,0x80
c0018f50:	75 21                	jne    c0018f73 <PCI::detect()+0x3d>
c0018f52:	51                   	push   ecx
c0018f53:	51                   	push   ecx
c0018f54:	6a 00                	push   0x0
c0018f56:	56                   	push   esi
c0018f57:	e8 62 fc ff ff       	call   c0018bbe <PCI::checkBus(unsigned char)>
c0018f5c:	83 c4 10             	add    esp,0x10
c0018f5f:	eb 24                	jmp    c0018f85 <PCI::detect()+0x4f>
c0018f61:	52                   	push   edx
c0018f62:	52                   	push   edx
c0018f63:	53                   	push   ebx
c0018f64:	43                   	inc    ebx
c0018f65:	56                   	push   esi
c0018f66:	e8 53 fc ff ff       	call   c0018bbe <PCI::checkBus(unsigned char)>
c0018f6b:	83 c4 10             	add    esp,0x10
c0018f6e:	83 fb 08             	cmp    ebx,0x8
c0018f71:	74 12                	je     c0018f85 <PCI::detect()+0x4f>
c0018f73:	53                   	push   ebx
c0018f74:	6a 00                	push   0x0
c0018f76:	6a 00                	push   0x0
c0018f78:	56                   	push   esi
c0018f79:	e8 4c f7 ff ff       	call   c00186ca <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f7e:	83 c4 10             	add    esp,0x10
c0018f81:	66 40                	inc    ax
c0018f83:	74 dc                	je     c0018f61 <PCI::detect()+0x2b>
c0018f85:	58                   	pop    eax
c0018f86:	5b                   	pop    ebx
c0018f87:	5e                   	pop    esi
c0018f88:	c3                   	ret    
c0018f89:	90                   	nop

c0018f8a <IDE::close(int, int, void*)>:
c0018f8a:	83 c8 ff             	or     eax,0xffffffff
c0018f8d:	c3                   	ret    

c0018f8e <IDE::IDE()>:
c0018f8e:	83 ec 0c             	sub    esp,0xc
c0018f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f95:	83 ec 08             	sub    esp,0x8
c0018f98:	68 4c f3 01 c0       	push   0xc001f34c
c0018f9d:	50                   	push   eax
c0018f9e:	e8 c9 2c ff ff       	call   c000bc6c <HardDiskController::HardDiskController(char const*)>
c0018fa3:	83 c4 10             	add    esp,0x10
c0018fa6:	ba dc f3 01 c0       	mov    edx,0xc001f3dc
c0018fab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018faf:	89 10                	mov    DWORD PTR [eax],edx
c0018fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fb5:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018fbc:	90                   	nop
c0018fbd:	83 c4 0c             	add    esp,0xc
c0018fc0:	c3                   	ret    
c0018fc1:	90                   	nop

c0018fc2 <IDE::prepareInterrupt(unsigned char)>:
c0018fc2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018fc7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018fcb:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018fd3:	c3                   	ret    

c0018fd4 <selectDrive(unsigned char, unsigned char)>:
c0018fd4:	c3                   	ret    
c0018fd5:	90                   	nop

c0018fd6 <IDE::getBase(unsigned char)>:
c0018fd6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018fdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018fdf:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018fe7:	c3                   	ret    

c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018fe8:	55                   	push   ebp
c0018fe9:	57                   	push   edi
c0018fea:	56                   	push   esi
c0018feb:	53                   	push   ebx
c0018fec:	83 ec 1c             	sub    esp,0x1c
c0018fef:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018ff3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018ff7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018ffa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018ffe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019002:	80 f9 03             	cmp    cl,0x3
c0019005:	77 51                	ja     c0019058 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0019007:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001900b:	0f b6 f2             	movzx  esi,dl
c001900e:	0f b6 db             	movzx  ebx,bl
c0019011:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019014:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0019018:	83 ca 80             	or     edx,0xffffff80
c001901b:	0f b6 d2             	movzx  edx,dl
c001901e:	52                   	push   edx
c001901f:	6a 0c                	push   0xc
c0019021:	56                   	push   esi
c0019022:	57                   	push   edi
c0019023:	e8 c0 ff ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019028:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001902d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019031:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0019035:	ee                   	out    dx,al
c0019036:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001903b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001903f:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0019043:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019047:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001904f:	83 c4 2c             	add    esp,0x2c
c0019052:	5b                   	pop    ebx
c0019053:	5e                   	pop    esi
c0019054:	5f                   	pop    edi
c0019055:	5d                   	pop    ebp
c0019056:	eb 90                	jmp    c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019058:	80 fb 07             	cmp    bl,0x7
c001905b:	77 12                	ja     c001906f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001905d:	0f b6 d2             	movzx  edx,dl
c0019060:	0f b6 db             	movzx  ebx,bl
c0019063:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001906b:	89 da                	mov    edx,ebx
c001906d:	eb 2f                	jmp    c001909e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001906f:	80 fb 0d             	cmp    bl,0xd
c0019072:	77 13                	ja     c0019087 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019074:	0f b6 d2             	movzx  edx,dl
c0019077:	0f b6 db             	movzx  ebx,bl
c001907a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0019081:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019085:	eb 17                	jmp    c001909e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019087:	80 fb 15             	cmp    bl,0x15
c001908a:	77 13                	ja     c001909f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001908c:	0f b6 d2             	movzx  edx,dl
c001908f:	0f b6 db             	movzx  ebx,bl
c0019092:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001909a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001909e:	ee                   	out    dx,al
c001909f:	83 c4 1c             	add    esp,0x1c
c00190a2:	5b                   	pop    ebx
c00190a3:	5e                   	pop    esi
c00190a4:	5f                   	pop    edi
c00190a5:	5d                   	pop    ebp
c00190a6:	c3                   	ret    
c00190a7:	90                   	nop

c00190a8 <IDE::read(unsigned char, unsigned char)>:
c00190a8:	55                   	push   ebp
c00190a9:	57                   	push   edi
c00190aa:	56                   	push   esi
c00190ab:	53                   	push   ebx
c00190ac:	83 ec 1c             	sub    esp,0x1c
c00190af:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00190b3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00190b7:	8d 43 f8             	lea    eax,[ebx-0x8]
c00190ba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190be:	3c 03                	cmp    al,0x3
c00190c0:	77 43                	ja     c0019105 <IDE::read(unsigned char, unsigned char)+0x5d>
c00190c2:	0f b6 f2             	movzx  esi,dl
c00190c5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00190c8:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00190cc:	83 c8 80             	or     eax,0xffffff80
c00190cf:	0f b6 c0             	movzx  eax,al
c00190d2:	50                   	push   eax
c00190d3:	6a 0c                	push   0xc
c00190d5:	56                   	push   esi
c00190d6:	57                   	push   edi
c00190d7:	e8 0c ff ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190dc:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00190e1:	0f b6 c3             	movzx  eax,bl
c00190e4:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00190e8:	ec                   	in     al,dx
c00190e9:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00190ed:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00190f2:	52                   	push   edx
c00190f3:	6a 0c                	push   0xc
c00190f5:	56                   	push   esi
c00190f6:	57                   	push   edi
c00190f7:	e8 ec fe ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190fc:	83 c4 20             	add    esp,0x20
c00190ff:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019103:	eb 49                	jmp    c001914e <IDE::read(unsigned char, unsigned char)+0xa6>
c0019105:	80 fb 07             	cmp    bl,0x7
c0019108:	77 12                	ja     c001911c <IDE::read(unsigned char, unsigned char)+0x74>
c001910a:	0f b6 d2             	movzx  edx,dl
c001910d:	0f b6 c3             	movzx  eax,bl
c0019110:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0019118:	89 c2                	mov    edx,eax
c001911a:	eb 31                	jmp    c001914d <IDE::read(unsigned char, unsigned char)+0xa5>
c001911c:	80 fb 0d             	cmp    bl,0xd
c001911f:	77 13                	ja     c0019134 <IDE::read(unsigned char, unsigned char)+0x8c>
c0019121:	0f b6 d2             	movzx  edx,dl
c0019124:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001912b:	0f b6 d3             	movzx  edx,bl
c001912e:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0019132:	eb 19                	jmp    c001914d <IDE::read(unsigned char, unsigned char)+0xa5>
c0019134:	31 c0                	xor    eax,eax
c0019136:	80 fb 15             	cmp    bl,0x15
c0019139:	77 13                	ja     c001914e <IDE::read(unsigned char, unsigned char)+0xa6>
c001913b:	0f b6 d2             	movzx  edx,dl
c001913e:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0019146:	0f b6 d3             	movzx  edx,bl
c0019149:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001914d:	ec                   	in     al,dx
c001914e:	83 c4 1c             	add    esp,0x1c
c0019151:	5b                   	pop    ebx
c0019152:	5e                   	pop    esi
c0019153:	5f                   	pop    edi
c0019154:	5d                   	pop    ebp
c0019155:	c3                   	ret    

c0019156 <IDE::waitInterrupt(unsigned char)>:
c0019156:	57                   	push   edi
c0019157:	56                   	push   esi
c0019158:	31 f6                	xor    esi,esi
c001915a:	53                   	push   ebx
c001915b:	83 ec 10             	sub    esp,0x10
c001915e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0019162:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019166:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001916a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001916f:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0019176:	84 db                	test   bl,bl
c0019178:	75 33                	jne    c00191ad <IDE::waitInterrupt(unsigned char)+0x57>
c001917a:	52                   	push   edx
c001917b:	6a 0c                	push   0xc
c001917d:	50                   	push   eax
c001917e:	57                   	push   edi
c001917f:	e8 24 ff ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c0019184:	83 c4 10             	add    esp,0x10
c0019187:	a8 01                	test   al,0x1
c0019189:	75 2a                	jne    c00191b5 <IDE::waitInterrupt(unsigned char)+0x5f>
c001918b:	f7 c6 04 00 00 00    	test   esi,0x4
c0019191:	75 12                	jne    c00191a5 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019193:	83 fe 32             	cmp    esi,0x32
c0019196:	7e 0d                	jle    c00191a5 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019198:	83 ec 0c             	sub    esp,0xc
c001919b:	6a 64                	push   0x64
c001919d:	e8 1a a9 ff ff       	call   c0013abc <milliTenthSleep(unsigned int)>
c00191a2:	83 c4 10             	add    esp,0x10
c00191a5:	83 fe 3c             	cmp    esi,0x3c
c00191a8:	74 0b                	je     c00191b5 <IDE::waitInterrupt(unsigned char)+0x5f>
c00191aa:	46                   	inc    esi
c00191ab:	eb bd                	jmp    c001916a <IDE::waitInterrupt(unsigned char)+0x14>
c00191ad:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c00191b5:	83 c4 10             	add    esp,0x10
c00191b8:	88 d8                	mov    al,bl
c00191ba:	5b                   	pop    ebx
c00191bb:	5e                   	pop    esi
c00191bc:	5f                   	pop    edi
c00191bd:	c3                   	ret    

c00191be <ideChannel0IRQHandler(regs*, void*)>:
c00191be:	83 ec 10             	sub    esp,0x10
c00191c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191c5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00191cc:	6a 07                	push   0x7
c00191ce:	6a 00                	push   0x0
c00191d0:	50                   	push   eax
c00191d1:	e8 d2 fe ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c00191d6:	83 c4 1c             	add    esp,0x1c
c00191d9:	c3                   	ret    

c00191da <ideChannel1IRQHandler(regs*, void*)>:
c00191da:	83 ec 10             	sub    esp,0x10
c00191dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00191e1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00191e8:	6a 07                	push   0x7
c00191ea:	6a 01                	push   0x1
c00191ec:	50                   	push   eax
c00191ed:	e8 b6 fe ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c00191f2:	83 c4 1c             	add    esp,0x1c
c00191f5:	c3                   	ret    

c00191f6 <IDE::enableIRQs(unsigned char, bool)>:
c00191f6:	57                   	push   edi
c00191f7:	56                   	push   esi
c00191f8:	be 04 00 00 00       	mov    esi,0x4
c00191fd:	53                   	push   ebx
c00191fe:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0019203:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019207:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001920c:	0f 94 c0             	sete   al
c001920f:	01 c0                	add    eax,eax
c0019211:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0019218:	0f b6 c0             	movzx  eax,al
c001921b:	50                   	push   eax
c001921c:	6a 0c                	push   0xc
c001921e:	57                   	push   edi
c001921f:	53                   	push   ebx
c0019220:	e8 c3 fd ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019225:	83 c4 10             	add    esp,0x10
c0019228:	50                   	push   eax
c0019229:	6a 0c                	push   0xc
c001922b:	57                   	push   edi
c001922c:	53                   	push   ebx
c001922d:	e8 76 fe ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c0019232:	83 c4 10             	add    esp,0x10
c0019235:	4e                   	dec    esi
c0019236:	75 f0                	jne    c0019228 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0019238:	5b                   	pop    ebx
c0019239:	5e                   	pop    esi
c001923a:	5f                   	pop    edi
c001923b:	c3                   	ret    

c001923c <IDE::open(int, int, void*)>:
c001923c:	55                   	push   ebp
c001923d:	57                   	push   edi
c001923e:	56                   	push   esi
c001923f:	53                   	push   ebx
c0019240:	83 ec 1c             	sub    esp,0x1c
c0019243:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019247:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019250:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019259:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019260:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0019267:	0f 85 b0 02 00 00    	jne    c001951d <IDE::open(int, int, void*)+0x2e1>
c001926d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0019273:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0019277:	83 e0 7f             	and    eax,0x7f
c001927a:	3c 05                	cmp    al,0x5
c001927c:	74 04                	je     c0019282 <IDE::open(int, int, void*)+0x46>
c001927e:	3c 0f                	cmp    al,0xf
c0019280:	75 32                	jne    c00192b4 <IDE::open(int, int, void*)+0x78>
c0019282:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019288:	83 e0 fc             	and    eax,0xfffffffc
c001928b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019292:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019298:	83 e0 fc             	and    eax,0xfffffffc
c001929b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00192a2:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00192a8:	83 e0 fc             	and    eax,0xfffffffc
c00192ab:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00192b2:	eb 14                	jmp    c00192c8 <IDE::open(int, int, void*)+0x8c>
c00192b4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00192be:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00192c8:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00192cf:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00192d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192da:	89 c6                	mov    esi,eax
c00192dc:	bf f8 0c 00 00       	mov    edi,0xcf8
c00192e1:	c1 e6 10             	shl    esi,0x10
c00192e4:	89 e8                	mov    eax,ebp
c00192e6:	89 fa                	mov    edx,edi
c00192e8:	c1 e0 0b             	shl    eax,0xb
c00192eb:	09 f0                	or     eax,esi
c00192ed:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00192f4:	c1 e6 08             	shl    esi,0x8
c00192f7:	09 c6                	or     esi,eax
c00192f9:	89 f0                	mov    eax,esi
c00192fb:	0d 08 00 00 80       	or     eax,0x80000008
c0019300:	ef                   	out    dx,eax
c0019301:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0019306:	89 ca                	mov    edx,ecx
c0019308:	ed                   	in     eax,dx
c0019309:	c1 e8 10             	shr    eax,0x10
c001930c:	3d ff ff 00 00       	cmp    eax,0xffff
c0019311:	0f 84 f5 00 00 00    	je     c001940c <IDE::open(int, int, void*)+0x1d0>
c0019317:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001931d:	89 fa                	mov    edx,edi
c001931f:	89 f0                	mov    eax,esi
c0019321:	ef                   	out    dx,eax
c0019322:	b0 fe                	mov    al,0xfe
c0019324:	89 ca                	mov    edx,ecx
c0019326:	ee                   	out    dx,al
c0019327:	89 f0                	mov    eax,esi
c0019329:	89 fa                	mov    edx,edi
c001932b:	ef                   	out    dx,eax
c001932c:	89 ca                	mov    edx,ecx
c001932e:	ed                   	in     eax,dx
c001932f:	3c fe                	cmp    al,0xfe
c0019331:	0f 85 a9 00 00 00    	jne    c00193e0 <IDE::open(int, int, void*)+0x1a4>
c0019337:	8b 15 78 0b 02 c0    	mov    edx,DWORD PTR ds:0xc0020b78
c001933d:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0019344:	74 33                	je     c0019379 <IDE::open(int, int, void*)+0x13d>
c0019346:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001934c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019350:	40                   	inc    eax
c0019351:	83 ec 0c             	sub    esp,0xc
c0019354:	0f b6 c0             	movzx  eax,al
c0019357:	50                   	push   eax
c0019358:	55                   	push   ebp
c0019359:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001935d:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0019363:	51                   	push   ecx
c0019364:	e8 1b 53 ff ff       	call   c000e684 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019369:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001936e:	83 c4 1c             	add    esp,0x1c
c0019371:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019377:	eb 0a                	jmp    c0019383 <IDE::open(int, int, void*)+0x147>
c0019379:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0019383:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001938a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0019391:	c1 e1 10             	shl    ecx,0x10
c0019394:	c1 e0 08             	shl    eax,0x8
c0019397:	bf f8 0c 00 00       	mov    edi,0xcf8
c001939c:	09 c1                	or     ecx,eax
c001939e:	89 fa                	mov    edx,edi
c00193a0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00193a7:	c1 e0 0b             	shl    eax,0xb
c00193aa:	09 c1                	or     ecx,eax
c00193ac:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00193b2:	89 c8                	mov    eax,ecx
c00193b4:	ef                   	out    dx,eax
c00193b5:	be fc 0c 00 00       	mov    esi,0xcfc
c00193ba:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00193c0:	89 f2                	mov    edx,esi
c00193c2:	ee                   	out    dx,al
c00193c3:	89 c8                	mov    eax,ecx
c00193c5:	89 fa                	mov    edx,edi
c00193c7:	ef                   	out    dx,eax
c00193c8:	89 f2                	mov    edx,esi
c00193ca:	ed                   	in     eax,dx
c00193cb:	0f b6 c0             	movzx  eax,al
c00193ce:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00193d4:	74 46                	je     c001941c <IDE::open(int, int, void*)+0x1e0>
c00193d6:	83 ec 0c             	sub    esp,0xc
c00193d9:	68 64 f3 01 c0       	push   0xc001f364
c00193de:	eb 34                	jmp    c0019414 <IDE::open(int, int, void*)+0x1d8>
c00193e0:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c00193e9:	75 17                	jne    c0019402 <IDE::open(int, int, void*)+0x1c6>
c00193eb:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00193f0:	74 07                	je     c00193f9 <IDE::open(int, int, void*)+0x1bd>
c00193f2:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00193f7:	75 09                	jne    c0019402 <IDE::open(int, int, void*)+0x1c6>
c00193f9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0019400:	eb 1a                	jmp    c001941c <IDE::open(int, int, void*)+0x1e0>
c0019402:	83 ec 0c             	sub    esp,0xc
c0019405:	68 6c f3 01 c0       	push   0xc001f36c
c001940a:	eb 08                	jmp    c0019414 <IDE::open(int, int, void*)+0x1d8>
c001940c:	83 ec 0c             	sub    esp,0xc
c001940f:	68 9d f3 01 c0       	push   0xc001f39d
c0019414:	e8 52 6d ff ff       	call   c001016b <KePanic(char const*)>
c0019419:	83 c4 10             	add    esp,0x10
c001941c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0019423:	79 1a                	jns    c001943f <IDE::open(int, int, void*)+0x203>
c0019425:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001942b:	83 e0 fc             	and    eax,0xfffffffc
c001942e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0019435:	83 c0 08             	add    eax,0x8
c0019438:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001943f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019445:	89 c2                	mov    edx,eax
c0019447:	83 e2 0f             	and    edx,0xf
c001944a:	66 83 fa 08          	cmp    dx,0x8
c001944e:	75 0a                	jne    c001945a <IDE::open(int, int, void*)+0x21e>
c0019450:	83 e8 02             	sub    eax,0x2
c0019453:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001945a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019460:	89 c2                	mov    edx,eax
c0019462:	83 e2 0f             	and    edx,0xf
c0019465:	66 83 fa 08          	cmp    dx,0x8
c0019469:	75 0a                	jne    c0019475 <IDE::open(int, int, void*)+0x239>
c001946b:	83 e8 02             	sub    eax,0x2
c001946e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019475:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001947c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0019483:	89 d0                	mov    eax,edx
c0019485:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019488:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001948c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019490:	8d 4a 01             	lea    ecx,[edx+0x1]
c0019493:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019498:	0f b6 c9             	movzx  ecx,cl
c001949b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00194a2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00194a5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00194a9:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00194ad:	8d 50 02             	lea    edx,[eax+0x2]
c00194b0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00194b5:	0f b6 d2             	movzx  edx,dl
c00194b8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00194be:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00194c1:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00194c5:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00194c9:	8d 48 03             	lea    ecx,[eax+0x3]
c00194cc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00194d1:	0f b6 c9             	movzx  ecx,cl
c00194d4:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00194da:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00194dd:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00194e1:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00194e5:	8d 50 04             	lea    edx,[eax+0x4]
c00194e8:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00194ee:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00194f3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00194fa:	66 85 f6             	test   si,si
c00194fd:	74 5b                	je     c001955a <IDE::open(int, int, void*)+0x31e>
c00194ff:	0f b6 d2             	movzx  edx,dl
c0019502:	83 c0 05             	add    eax,0x5
c0019505:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019508:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001950c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0019510:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019516:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001951b:	eb 3d                	jmp    c001955a <IDE::open(int, int, void*)+0x31e>
c001951d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0019523:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001952a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019531:	66 05 06 02          	add    ax,0x206
c0019535:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001953c:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0019543:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001954a:	66 05 06 02          	add    ax,0x206
c001954e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019555:	e9 e5 fe ff ff       	jmp    c001943f <IDE::open(int, int, void*)+0x203>
c001955a:	50                   	push   eax
c001955b:	50                   	push   eax
c001955c:	6a 00                	push   0x0
c001955e:	53                   	push   ebx
c001955f:	e8 5e fa ff ff       	call   c0018fc2 <IDE::prepareInterrupt(unsigned char)>
c0019564:	5a                   	pop    edx
c0019565:	59                   	pop    ecx
c0019566:	6a 01                	push   0x1
c0019568:	53                   	push   ebx
c0019569:	e8 54 fa ff ff       	call   c0018fc2 <IDE::prepareInterrupt(unsigned char)>
c001956e:	83 c4 0c             	add    esp,0xc
c0019571:	6a 00                	push   0x0
c0019573:	6a 00                	push   0x0
c0019575:	53                   	push   ebx
c0019576:	e8 7b fc ff ff       	call   c00191f6 <IDE::enableIRQs(unsigned char, bool)>
c001957b:	83 c4 0c             	add    esp,0xc
c001957e:	6a 00                	push   0x0
c0019580:	6a 01                	push   0x1
c0019582:	53                   	push   ebx
c0019583:	e8 6e fc ff ff       	call   c00191f6 <IDE::enableIRQs(unsigned char, bool)>
c0019588:	83 c4 10             	add    esp,0x10
c001958b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0019592:	74 34                	je     c00195c8 <IDE::open(int, int, void*)+0x38c>
c0019594:	83 ec 0c             	sub    esp,0xc
c0019597:	53                   	push   ebx
c0019598:	6a 01                	push   0x1
c001959a:	68 be 91 01 c0       	push   0xc00191be
c001959f:	6a 0e                	push   0xe
c00195a1:	53                   	push   ebx
c00195a2:	e8 2d 23 ff ff       	call   c000b8d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195a7:	83 c4 14             	add    esp,0x14
c00195aa:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00195b0:	53                   	push   ebx
c00195b1:	6a 01                	push   0x1
c00195b3:	68 da 91 01 c0       	push   0xc00191da
c00195b8:	6a 0f                	push   0xf
c00195ba:	53                   	push   ebx
c00195bb:	e8 14 23 ff ff       	call   c000b8d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195c0:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00195c6:	eb 38                	jmp    c0019600 <IDE::open(int, int, void*)+0x3c4>
c00195c8:	83 ec 0c             	sub    esp,0xc
c00195cb:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00195d5:	53                   	push   ebx
c00195d6:	6a 00                	push   0x0
c00195d8:	68 be 91 01 c0       	push   0xc00191be
c00195dd:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00195e3:	53                   	push   ebx
c00195e4:	e8 eb 22 ff ff       	call   c000b8d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00195e9:	83 c4 14             	add    esp,0x14
c00195ec:	53                   	push   ebx
c00195ed:	6a 00                	push   0x0
c00195ef:	68 da 91 01 c0       	push   0xc00191da
c00195f4:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00195fa:	53                   	push   ebx
c00195fb:	e8 d4 22 ff ff       	call   c000b8d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019600:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019602:	83 c4 20             	add    esp,0x20
c0019605:	83 ec 0c             	sub    esp,0xc
c0019608:	53                   	push   ebx
c0019609:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001960c:	83 c4 0c             	add    esp,0xc
c001960f:	6a 07                	push   0x7
c0019611:	6a 00                	push   0x0
c0019613:	53                   	push   ebx
c0019614:	e8 8f fa ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c0019619:	83 c4 0c             	add    esp,0xc
c001961c:	6a 07                	push   0x7
c001961e:	6a 01                	push   0x1
c0019620:	53                   	push   ebx
c0019621:	e8 82 fa ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c0019626:	83 c4 0c             	add    esp,0xc
c0019629:	6a 01                	push   0x1
c001962b:	6a 00                	push   0x0
c001962d:	53                   	push   ebx
c001962e:	e8 c3 fb ff ff       	call   c00191f6 <IDE::enableIRQs(unsigned char, bool)>
c0019633:	83 c4 0c             	add    esp,0xc
c0019636:	6a 01                	push   0x1
c0019638:	6a 01                	push   0x1
c001963a:	53                   	push   ebx
c001963b:	e8 b6 fb ff ff       	call   c00191f6 <IDE::enableIRQs(unsigned char, bool)>
c0019640:	83 c4 2c             	add    esp,0x2c
c0019643:	31 c0                	xor    eax,eax
c0019645:	5b                   	pop    ebx
c0019646:	5e                   	pop    esi
c0019647:	5f                   	pop    edi
c0019648:	5d                   	pop    ebp
c0019649:	c3                   	ret    

c001964a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001964a:	55                   	push   ebp
c001964b:	57                   	push   edi
c001964c:	56                   	push   esi
c001964d:	53                   	push   ebx
c001964e:	83 ec 1c             	sub    esp,0x1c
c0019651:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019655:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019659:	8d 50 f8             	lea    edx,[eax-0x8]
c001965c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019660:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019664:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019668:	80 fa 03             	cmp    dl,0x3
c001966b:	77 5d                	ja     c00196ca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001966d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019671:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019675:	0f b6 db             	movzx  ebx,bl
c0019678:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001967b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001967f:	83 ca 80             	or     edx,0xffffff80
c0019682:	0f b6 d2             	movzx  edx,dl
c0019685:	52                   	push   edx
c0019686:	6a 0c                	push   0xc
c0019688:	53                   	push   ebx
c0019689:	56                   	push   esi
c001968a:	e8 59 f9 ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001968f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019694:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019698:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001969c:	0f b6 c0             	movzx  eax,al
c001969f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00196a3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00196a5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00196aa:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00196ae:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00196b2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00196b6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00196be:	83 c4 2c             	add    esp,0x2c
c00196c1:	5b                   	pop    ebx
c00196c2:	5e                   	pop    esi
c00196c3:	5f                   	pop    edi
c00196c4:	5d                   	pop    ebp
c00196c5:	e9 1e f9 ff ff       	jmp    c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00196ca:	3c 07                	cmp    al,0x7
c00196cc:	77 10                	ja     c00196de <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00196ce:	0f b6 db             	movzx  ebx,bl
c00196d1:	0f b6 d0             	movzx  edx,al
c00196d4:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00196dc:	eb 2d                	jmp    c001970b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00196de:	3c 0d                	cmp    al,0xd
c00196e0:	77 13                	ja     c00196f5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00196e2:	0f b6 db             	movzx  ebx,bl
c00196e5:	0f b6 c0             	movzx  eax,al
c00196e8:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00196ef:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00196f3:	eb 16                	jmp    c001970b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00196f5:	3c 15                	cmp    al,0x15
c00196f7:	77 14                	ja     c001970d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00196f9:	0f b6 db             	movzx  ebx,bl
c00196fc:	0f b6 c0             	movzx  eax,al
c00196ff:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0019707:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001970b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001970d:	83 c4 1c             	add    esp,0x1c
c0019710:	5b                   	pop    ebx
c0019711:	5e                   	pop    esi
c0019712:	5f                   	pop    edi
c0019713:	5d                   	pop    ebp
c0019714:	c3                   	ret    
c0019715:	90                   	nop

c0019716 <IDE::detect()>:
c0019716:	55                   	push   ebp
c0019717:	57                   	push   edi
c0019718:	56                   	push   esi
c0019719:	53                   	push   ebx
c001971a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019720:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0019727:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001972e:	0f 85 97 02 00 00    	jne    c00199cb <IDE::detect()+0x2b5>
c0019734:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001973b:	31 f6                	xor    esi,esi
c001973d:	31 ed                	xor    ebp,ebp
c001973f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019747:	89 e8                	mov    eax,ebp
c0019749:	c1 e0 06             	shl    eax,0x6
c001974c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019754:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019758:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001975c:	c1 e0 04             	shl    eax,0x4
c001975f:	83 c8 a0             	or     eax,0xffffffa0
c0019762:	0f b6 c0             	movzx  eax,al
c0019765:	50                   	push   eax
c0019766:	6a 06                	push   0x6
c0019768:	56                   	push   esi
c0019769:	53                   	push   ebx
c001976a:	e8 79 f8 ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001976f:	83 c4 0c             	add    esp,0xc
c0019772:	6a 0c                	push   0xc
c0019774:	56                   	push   esi
c0019775:	53                   	push   ebx
c0019776:	e8 2d f9 ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c001977b:	83 c4 0c             	add    esp,0xc
c001977e:	6a 0c                	push   0xc
c0019780:	56                   	push   esi
c0019781:	53                   	push   ebx
c0019782:	e8 21 f9 ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c0019787:	83 c4 0c             	add    esp,0xc
c001978a:	6a 0c                	push   0xc
c001978c:	56                   	push   esi
c001978d:	53                   	push   ebx
c001978e:	e8 15 f9 ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c0019793:	83 c4 0c             	add    esp,0xc
c0019796:	6a 0c                	push   0xc
c0019798:	56                   	push   esi
c0019799:	53                   	push   ebx
c001979a:	e8 09 f9 ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c001979f:	68 ec 00 00 00       	push   0xec
c00197a4:	6a 07                	push   0x7
c00197a6:	56                   	push   esi
c00197a7:	53                   	push   ebx
c00197a8:	e8 3b f8 ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00197ad:	83 c4 1c             	add    esp,0x1c
c00197b0:	6a 0c                	push   0xc
c00197b2:	56                   	push   esi
c00197b3:	53                   	push   ebx
c00197b4:	e8 ef f8 ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c00197b9:	83 c4 0c             	add    esp,0xc
c00197bc:	6a 0c                	push   0xc
c00197be:	56                   	push   esi
c00197bf:	53                   	push   ebx
c00197c0:	e8 e3 f8 ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c00197c5:	83 c4 0c             	add    esp,0xc
c00197c8:	6a 0c                	push   0xc
c00197ca:	56                   	push   esi
c00197cb:	53                   	push   ebx
c00197cc:	e8 d7 f8 ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c00197d1:	83 c4 0c             	add    esp,0xc
c00197d4:	6a 0c                	push   0xc
c00197d6:	56                   	push   esi
c00197d7:	53                   	push   ebx
c00197d8:	e8 cb f8 ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c00197dd:	83 c4 0c             	add    esp,0xc
c00197e0:	6a 0c                	push   0xc
c00197e2:	56                   	push   esi
c00197e3:	53                   	push   ebx
c00197e4:	e8 bf f8 ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c00197e9:	83 c4 10             	add    esp,0x10
c00197ec:	84 c0                	test   al,al
c00197ee:	0f 84 5f 01 00 00    	je     c0019953 <IDE::detect()+0x23d>
c00197f4:	31 ff                	xor    edi,edi
c00197f6:	50                   	push   eax
c00197f7:	6a 0c                	push   0xc
c00197f9:	56                   	push   esi
c00197fa:	53                   	push   ebx
c00197fb:	e8 a8 f8 ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c0019800:	83 c4 10             	add    esp,0x10
c0019803:	a8 01                	test   al,0x1
c0019805:	0f 85 69 01 00 00    	jne    c0019974 <IDE::detect()+0x25e>
c001980b:	84 c0                	test   al,al
c001980d:	78 04                	js     c0019813 <IDE::detect()+0xfd>
c001980f:	a8 08                	test   al,0x8
c0019811:	75 23                	jne    c0019836 <IDE::detect()+0x120>
c0019813:	47                   	inc    edi
c0019814:	81 ff 17 01 00 00    	cmp    edi,0x117
c001981a:	7e da                	jle    c00197f6 <IDE::detect()+0xe0>
c001981c:	83 ec 0c             	sub    esp,0xc
c001981f:	6a 32                	push   0x32
c0019821:	e8 96 a2 ff ff       	call   c0013abc <milliTenthSleep(unsigned int)>
c0019826:	83 c4 10             	add    esp,0x10
c0019829:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001982f:	75 c5                	jne    c00197f6 <IDE::detect()+0xe0>
c0019831:	e9 3e 01 00 00       	jmp    c0019974 <IDE::detect()+0x25e>
c0019836:	31 c9                	xor    ecx,ecx
c0019838:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001983c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019840:	83 ec 0c             	sub    esp,0xc
c0019843:	68 80 00 00 00       	push   0x80
c0019848:	57                   	push   edi
c0019849:	6a 00                	push   0x0
c001984b:	56                   	push   esi
c001984c:	53                   	push   ebx
c001984d:	e8 f8 fd ff ff       	call   c001964a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0019852:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019857:	89 e8                	mov    eax,ebp
c0019859:	89 d1                	mov    ecx,edx
c001985b:	c1 e0 06             	shl    eax,0x6
c001985e:	01 d8                	add    eax,ebx
c0019860:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019867:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001986e:	89 f2                	mov    edx,esi
c0019870:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019876:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001987a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019880:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019884:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001988b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0019893:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001989a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00198a2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00198a8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00198af:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00198b5:	8d 54 24 58          	lea    edx,[esp+0x58]
c00198b9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00198bd:	83 c4 20             	add    esp,0x20
c00198c0:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00198c3:	83 c0 02             	add    eax,0x2
c00198c6:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00198cc:	83 c7 02             	add    edi,0x2
c00198cf:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00198d2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00198d8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00198dc:	75 e2                	jne    c00198c0 <IDE::detect()+0x1aa>
c00198de:	89 e8                	mov    eax,ebp
c00198e0:	c1 e0 06             	shl    eax,0x6
c00198e3:	01 d8                	add    eax,ebx
c00198e5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00198eb:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00198f2:	66 c1 ea 09          	shr    dx,0x9
c00198f6:	83 e2 01             	and    edx,0x1
c00198f9:	84 c9                	test   cl,cl
c00198fb:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0019901:	75 22                	jne    c0019925 <IDE::detect()+0x20f>
c0019903:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001990a:	74 46                	je     c0019952 <IDE::detect()+0x23c>
c001990c:	83 ec 0c             	sub    esp,0xc
c001990f:	68 7c 01 00 00       	push   0x17c
c0019914:	e8 b0 de fe ff       	call   c00077c9 <malloc>
c0019919:	89 c7                	mov    edi,eax
c001991b:	89 04 24             	mov    DWORD PTR [esp],eax
c001991e:	e8 11 05 00 00       	call   c0019e34 <ATA::ATA()>
c0019923:	eb 17                	jmp    c001993c <IDE::detect()+0x226>
c0019925:	83 ec 0c             	sub    esp,0xc
c0019928:	68 84 01 00 00       	push   0x184
c001992d:	e8 97 de fe ff       	call   c00077c9 <malloc>
c0019932:	89 c7                	mov    edi,eax
c0019934:	89 04 24             	mov    DWORD PTR [esp],eax
c0019937:	e8 f0 0a 00 00       	call   c001a42c <ATAPI::ATAPI()>
c001993c:	5a                   	pop    edx
c001993d:	59                   	pop    ecx
c001993e:	57                   	push   edi
c001993f:	53                   	push   ebx
c0019940:	e8 e3 1f ff ff       	call   c000b928 <Device::addChild(Device*)>
c0019945:	8b 07                	mov    eax,DWORD PTR [edi]
c0019947:	53                   	push   ebx
c0019948:	55                   	push   ebp
c0019949:	6a 00                	push   0x0
c001994b:	57                   	push   edi
c001994c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001994f:	83 c4 20             	add    esp,0x20
c0019952:	45                   	inc    ebp
c0019953:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019958:	74 0d                	je     c0019967 <IDE::detect()+0x251>
c001995a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019962:	e9 e0 fd ff ff       	jmp    c0019747 <IDE::detect()+0x31>
c0019967:	4e                   	dec    esi
c0019968:	74 61                	je     c00199cb <IDE::detect()+0x2b5>
c001996a:	be 01 00 00 00       	mov    esi,0x1
c001996f:	e9 cb fd ff ff       	jmp    c001973f <IDE::detect()+0x29>
c0019974:	50                   	push   eax
c0019975:	6a 04                	push   0x4
c0019977:	56                   	push   esi
c0019978:	53                   	push   ebx
c0019979:	e8 2a f7 ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c001997e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019982:	83 c4 0c             	add    esp,0xc
c0019985:	6a 05                	push   0x5
c0019987:	56                   	push   esi
c0019988:	53                   	push   ebx
c0019989:	e8 1a f7 ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c001998e:	83 c4 10             	add    esp,0x10
c0019991:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019995:	80 fa 14             	cmp    dl,0x14
c0019998:	75 04                	jne    c001999e <IDE::detect()+0x288>
c001999a:	3c eb                	cmp    al,0xeb
c001999c:	eb 07                	jmp    c00199a5 <IDE::detect()+0x28f>
c001999e:	3c 96                	cmp    al,0x96
c00199a0:	75 b1                	jne    c0019953 <IDE::detect()+0x23d>
c00199a2:	80 fa 69             	cmp    dl,0x69
c00199a5:	75 ac                	jne    c0019953 <IDE::detect()+0x23d>
c00199a7:	68 a1 00 00 00       	push   0xa1
c00199ac:	6a 07                	push   0x7
c00199ae:	56                   	push   esi
c00199af:	53                   	push   ebx
c00199b0:	e8 33 f6 ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00199b5:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c00199bc:	e8 fb a0 ff ff       	call   c0013abc <milliTenthSleep(unsigned int)>
c00199c1:	83 c4 10             	add    esp,0x10
c00199c4:	b1 01                	mov    cl,0x1
c00199c6:	e9 6d fe ff ff       	jmp    c0019838 <IDE::detect()+0x122>
c00199cb:	81 c4 1c 02 00 00    	add    esp,0x21c
c00199d1:	5b                   	pop    ebx
c00199d2:	5e                   	pop    esi
c00199d3:	5f                   	pop    edi
c00199d4:	5d                   	pop    ebp
c00199d5:	c3                   	ret    

c00199d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00199d6:	55                   	push   ebp
c00199d7:	57                   	push   edi
c00199d8:	56                   	push   esi
c00199d9:	53                   	push   ebx
c00199da:	83 ec 1c             	sub    esp,0x1c
c00199dd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00199e1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00199e5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00199e9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00199ed:	88 c3                	mov    bl,al
c00199ef:	84 c0                	test   al,al
c00199f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199f5:	0f 84 81 00 00 00    	je     c0019a7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00199fb:	83 ec 0c             	sub    esp,0xc
c00199fe:	68 c7 f3 01 c0       	push   0xc001f3c7
c0019a03:	e8 e0 0a ff ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c0019a08:	83 c4 10             	add    esp,0x10
c0019a0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019a0f:	3c 01                	cmp    al,0x1
c0019a11:	74 63                	je     c0019a76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019a13:	3c 02                	cmp    al,0x2
c0019a15:	75 53                	jne    c0019a6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019a17:	01 f6                	add    esi,esi
c0019a19:	09 ee                	or     esi,ebp
c0019a1b:	50                   	push   eax
c0019a1c:	89 f0                	mov    eax,esi
c0019a1e:	6a 01                	push   0x1
c0019a20:	0f b6 f0             	movzx  esi,al
c0019a23:	c1 e6 06             	shl    esi,0x6
c0019a26:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019a2e:	50                   	push   eax
c0019a2f:	57                   	push   edi
c0019a30:	e8 73 f6 ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c0019a35:	83 c4 10             	add    esp,0x10
c0019a38:	a8 01                	test   al,0x1
c0019a3a:	74 02                	je     c0019a3e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019a3c:	b3 07                	mov    bl,0x7
c0019a3e:	a8 02                	test   al,0x2
c0019a40:	74 02                	je     c0019a44 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019a42:	b3 03                	mov    bl,0x3
c0019a44:	a8 04                	test   al,0x4
c0019a46:	74 02                	je     c0019a4a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019a48:	b3 14                	mov    bl,0x14
c0019a4a:	a8 08                	test   al,0x8
c0019a4c:	74 02                	je     c0019a50 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019a4e:	b3 03                	mov    bl,0x3
c0019a50:	a8 10                	test   al,0x10
c0019a52:	74 02                	je     c0019a56 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019a54:	b3 15                	mov    bl,0x15
c0019a56:	a8 20                	test   al,0x20
c0019a58:	74 02                	je     c0019a5c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019a5a:	b3 03                	mov    bl,0x3
c0019a5c:	a8 40                	test   al,0x40
c0019a5e:	74 02                	je     c0019a62 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019a60:	b3 16                	mov    bl,0x16
c0019a62:	84 c0                	test   al,al
c0019a64:	79 16                	jns    c0019a7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a66:	b3 0d                	mov    bl,0xd
c0019a68:	eb 12                	jmp    c0019a7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a6a:	3c 03                	cmp    al,0x3
c0019a6c:	74 0c                	je     c0019a7a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019a6e:	3c 04                	cmp    al,0x4
c0019a70:	75 0a                	jne    c0019a7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a72:	b3 08                	mov    bl,0x8
c0019a74:	eb 06                	jmp    c0019a7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a76:	b3 13                	mov    bl,0x13
c0019a78:	eb 02                	jmp    c0019a7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019a7a:	b3 17                	mov    bl,0x17
c0019a7c:	83 c4 1c             	add    esp,0x1c
c0019a7f:	88 d8                	mov    al,bl
c0019a81:	5b                   	pop    ebx
c0019a82:	5e                   	pop    esi
c0019a83:	5f                   	pop    edi
c0019a84:	5d                   	pop    ebp
c0019a85:	c3                   	ret    

c0019a86 <IDE::polling(unsigned char, unsigned int)>:
c0019a86:	55                   	push   ebp
c0019a87:	bd 04 00 00 00       	mov    ebp,0x4
c0019a8c:	57                   	push   edi
c0019a8d:	56                   	push   esi
c0019a8e:	53                   	push   ebx
c0019a8f:	83 ec 0c             	sub    esp,0xc
c0019a92:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019a96:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019a9a:	0f b6 f3             	movzx  esi,bl
c0019a9d:	52                   	push   edx
c0019a9e:	6a 0c                	push   0xc
c0019aa0:	56                   	push   esi
c0019aa1:	57                   	push   edi
c0019aa2:	e8 01 f6 ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c0019aa7:	83 c4 10             	add    esp,0x10
c0019aaa:	4d                   	dec    ebp
c0019aab:	75 ed                	jne    c0019a9a <IDE::polling(unsigned char, unsigned int)+0x14>
c0019aad:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019ab2:	50                   	push   eax
c0019ab3:	6a 0c                	push   0xc
c0019ab5:	56                   	push   esi
c0019ab6:	57                   	push   edi
c0019ab7:	e8 ec f5 ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c0019abc:	83 c4 10             	add    esp,0x10
c0019abf:	a8 01                	test   al,0x1
c0019ac1:	75 17                	jne    c0019ada <IDE::polling(unsigned char, unsigned int)+0x54>
c0019ac3:	a8 20                	test   al,0x20
c0019ac5:	75 0f                	jne    c0019ad6 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019ac7:	4b                   	dec    ebx
c0019ac8:	74 10                	je     c0019ada <IDE::polling(unsigned char, unsigned int)+0x54>
c0019aca:	84 c0                	test   al,al
c0019acc:	78 e4                	js     c0019ab2 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019ace:	a8 08                	test   al,0x8
c0019ad0:	74 e0                	je     c0019ab2 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019ad2:	31 c0                	xor    eax,eax
c0019ad4:	eb 06                	jmp    c0019adc <IDE::polling(unsigned char, unsigned int)+0x56>
c0019ad6:	b0 01                	mov    al,0x1
c0019ad8:	eb 02                	jmp    c0019adc <IDE::polling(unsigned char, unsigned int)+0x56>
c0019ada:	b0 02                	mov    al,0x2
c0019adc:	83 c4 0c             	add    esp,0xc
c0019adf:	5b                   	pop    ebx
c0019ae0:	5e                   	pop    esi
c0019ae1:	5f                   	pop    edi
c0019ae2:	5d                   	pop    ebp
c0019ae3:	c3                   	ret    

c0019ae4 <SATABus::close(int, int, void*)>:
c0019ae4:	31 c0                	xor    eax,eax
c0019ae6:	c3                   	ret    
c0019ae7:	90                   	nop

c0019ae8 <SATABus::detect()>:
c0019ae8:	c3                   	ret    
c0019ae9:	90                   	nop

c0019aea <SATABus::SATABus()>:
c0019aea:	83 ec 0c             	sub    esp,0xc
c0019aed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019af1:	83 ec 08             	sub    esp,0x8
c0019af4:	68 00 f4 01 c0       	push   0xc001f400
c0019af9:	50                   	push   eax
c0019afa:	e8 6d 21 ff ff       	call   c000bc6c <HardDiskController::HardDiskController(char const*)>
c0019aff:	83 c4 10             	add    esp,0x10
c0019b02:	ba 2c f4 01 c0       	mov    edx,0xc001f42c
c0019b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b0b:	89 10                	mov    DWORD PTR [eax],edx
c0019b0d:	83 ec 0c             	sub    esp,0xc
c0019b10:	6a 50                	push   0x50
c0019b12:	e8 4c e0 fe ff       	call   c0007b63 <Phys::allocateContiguousPages(int)>
c0019b17:	83 c4 10             	add    esp,0x10
c0019b1a:	89 c2                	mov    edx,eax
c0019b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b20:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019b26:	83 ec 0c             	sub    esp,0xc
c0019b29:	6a 50                	push   0x50
c0019b2b:	e8 65 f7 fe ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c0019b30:	83 c4 10             	add    esp,0x10
c0019b33:	89 c2                	mov    edx,eax
c0019b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019b39:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019b3f:	a1 70 0c 02 c0       	mov    eax,ds:0xc0020c70
c0019b44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b48:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019b4e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b52:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019b58:	83 ec 0c             	sub    esp,0xc
c0019b5b:	6a 03                	push   0x3
c0019b5d:	6a 50                	push   0x50
c0019b5f:	51                   	push   ecx
c0019b60:	52                   	push   edx
c0019b61:	50                   	push   eax
c0019b62:	e8 bd 00 ff ff       	call   c0009c24 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019b67:	83 c4 20             	add    esp,0x20
c0019b6a:	90                   	nop
c0019b6b:	83 c4 0c             	add    esp,0xc
c0019b6e:	c3                   	ret    
c0019b6f:	90                   	nop

c0019b70 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019b70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019b74:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019b77:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019b7a:	09 c2                	or     edx,eax
c0019b7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b80:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019b86:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019b88:	31 c0                	xor    eax,eax
c0019b8a:	c1 e9 08             	shr    ecx,0x8
c0019b8d:	83 e1 0f             	and    ecx,0xf
c0019b90:	39 c8                	cmp    eax,ecx
c0019b92:	74 0a                	je     c0019b9e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019b94:	f6 c2 01             	test   dl,0x1
c0019b97:	74 08                	je     c0019ba1 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019b99:	d1 ea                	shr    edx,1
c0019b9b:	40                   	inc    eax
c0019b9c:	eb f2                	jmp    c0019b90 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019b9e:	83 c8 ff             	or     eax,0xffffffff
c0019ba1:	c3                   	ret    

c0019ba2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019ba2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019ba6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019ba9:	89 c2                	mov    edx,eax
c0019bab:	c1 ea 08             	shr    edx,0x8
c0019bae:	83 e2 0f             	and    edx,0xf
c0019bb1:	fe ca                	dec    dl
c0019bb3:	75 31                	jne    c0019be6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019bb5:	83 e0 0f             	and    eax,0xf
c0019bb8:	3c 03                	cmp    al,0x3
c0019bba:	75 2a                	jne    c0019be6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019bbc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019bbf:	b8 02 00 00 00       	mov    eax,0x2
c0019bc4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019bca:	74 1c                	je     c0019be8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019bcc:	b8 04 00 00 00       	mov    eax,0x4
c0019bd1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019bd7:	74 0f                	je     c0019be8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019bd9:	31 c0                	xor    eax,eax
c0019bdb:	83 fa 03             	cmp    edx,0x3
c0019bde:	0f 94 c0             	sete   al
c0019be1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019be5:	c3                   	ret    
c0019be6:	31 c0                	xor    eax,eax
c0019be8:	c3                   	ret    
c0019be9:	90                   	nop

c0019bea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019bea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019bee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bf1:	0f ba e2 0f          	bt     edx,0xf
c0019bf5:	72 f7                	jb     c0019bee <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019bf7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019bfa:	83 ca 10             	or     edx,0x10
c0019bfd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c00:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c03:	83 ca 01             	or     edx,0x1
c0019c06:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c09:	c3                   	ret    

c0019c0a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019c0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c0e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c11:	83 e2 fe             	and    edx,0xfffffffe
c0019c14:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c17:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c1a:	83 e2 ef             	and    edx,0xffffffef
c0019c1d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019c20:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c23:	0f ba e2 0e          	bt     edx,0xe
c0019c27:	72 f7                	jb     c0019c20 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c29:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019c2c:	0f ba e2 0f          	bt     edx,0xf
c0019c30:	72 ee                	jb     c0019c20 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019c32:	c3                   	ret    
c0019c33:	90                   	nop

c0019c34 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019c34:	55                   	push   ebp
c0019c35:	57                   	push   edi
c0019c36:	56                   	push   esi
c0019c37:	53                   	push   ebx
c0019c38:	83 ec 1c             	sub    esp,0x1c
c0019c3b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c3f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019c43:	53                   	push   ebx
c0019c44:	56                   	push   esi
c0019c45:	e8 c0 ff ff ff       	call   c0019c0a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019c4a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019c4e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c54:	83 ec 0c             	sub    esp,0xc
c0019c57:	c1 e5 0a             	shl    ebp,0xa
c0019c5a:	01 e8                	add    eax,ebp
c0019c5c:	89 03                	mov    DWORD PTR [ebx],eax
c0019c5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c60:	68 00 04 00 00       	push   0x400
c0019c65:	6a 00                	push   0x0
c0019c67:	50                   	push   eax
c0019c68:	e8 73 68 fe ff       	call   c00004e0 <memset>
c0019c6d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019c73:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019c77:	01 e8                	add    eax,ebp
c0019c79:	83 c4 1c             	add    esp,0x1c
c0019c7c:	89 03                	mov    DWORD PTR [ebx],eax
c0019c7e:	c1 e2 08             	shl    edx,0x8
c0019c81:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019c88:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019c8e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019c94:	01 f8                	add    eax,edi
c0019c96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019c99:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019c9c:	68 00 01 00 00       	push   0x100
c0019ca1:	6a 00                	push   0x0
c0019ca3:	50                   	push   eax
c0019ca4:	e8 37 68 fe ff       	call   c00004e0 <memset>
c0019ca9:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019caf:	01 fa                	add    edx,edi
c0019cb1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019cb5:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019cb8:	c1 e7 0d             	shl    edi,0xd
c0019cbb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019cc2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019cc8:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cd2:	31 ff                	xor    edi,edi
c0019cd4:	83 c4 10             	add    esp,0x10
c0019cd7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019cdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ce1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019ce7:	83 c5 20             	add    ebp,0x20
c0019cea:	01 f8                	add    eax,edi
c0019cec:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019cef:	52                   	push   edx
c0019cf0:	68 00 01 00 00       	push   0x100
c0019cf5:	6a 00                	push   0x0
c0019cf7:	50                   	push   eax
c0019cf8:	e8 e3 67 fe ff       	call   c00004e0 <memset>
c0019cfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019d01:	83 c4 10             	add    esp,0x10
c0019d04:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019d0a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019d11:	01 f8                	add    eax,edi
c0019d13:	81 c7 00 01 00 00    	add    edi,0x100
c0019d19:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d1c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019d22:	75 b3                	jne    c0019cd7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019d24:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d2b:	50                   	push   eax
c0019d2c:	50                   	push   eax
c0019d2d:	53                   	push   ebx
c0019d2e:	56                   	push   esi
c0019d2f:	e8 b6 fe ff ff       	call   c0019bea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019d34:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019d3b:	83 c4 2c             	add    esp,0x2c
c0019d3e:	5b                   	pop    ebx
c0019d3f:	5e                   	pop    esi
c0019d40:	5f                   	pop    edi
c0019d41:	5d                   	pop    ebp
c0019d42:	c3                   	ret    
c0019d43:	90                   	nop

c0019d44 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019d44:	55                   	push   ebp
c0019d45:	57                   	push   edi
c0019d46:	56                   	push   esi
c0019d47:	53                   	push   ebx
c0019d48:	31 db                	xor    ebx,ebx
c0019d4a:	83 ec 0c             	sub    esp,0xc
c0019d4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019d51:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019d55:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019d58:	f7 c7 01 00 00 00    	test   edi,0x1
c0019d5e:	74 7a                	je     c0019dda <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019d60:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019d64:	89 d8                	mov    eax,ebx
c0019d66:	c1 e0 07             	shl    eax,0x7
c0019d69:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019d70:	55                   	push   ebp
c0019d71:	56                   	push   esi
c0019d72:	e8 2b fe ff ff       	call   c0019ba2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019d77:	5a                   	pop    edx
c0019d78:	83 f8 01             	cmp    eax,0x1
c0019d7b:	59                   	pop    ecx
c0019d7c:	75 21                	jne    c0019d9f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019d7e:	50                   	push   eax
c0019d7f:	53                   	push   ebx
c0019d80:	55                   	push   ebp
c0019d81:	56                   	push   esi
c0019d82:	e8 ad fe ff ff       	call   c0019c34 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019d87:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019d8e:	e8 36 da fe ff       	call   c00077c9 <malloc>
c0019d93:	89 c5                	mov    ebp,eax
c0019d95:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d98:	e8 43 0d 00 00       	call   c001aae0 <SATA::SATA()>
c0019d9d:	eb 24                	jmp    c0019dc3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019d9f:	83 f8 04             	cmp    eax,0x4
c0019da2:	75 36                	jne    c0019dda <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019da4:	51                   	push   ecx
c0019da5:	53                   	push   ebx
c0019da6:	55                   	push   ebp
c0019da7:	56                   	push   esi
c0019da8:	e8 87 fe ff ff       	call   c0019c34 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019dad:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019db4:	e8 10 da fe ff       	call   c00077c9 <malloc>
c0019db9:	89 c5                	mov    ebp,eax
c0019dbb:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dbe:	e8 79 10 00 00       	call   c001ae3c <SATAPI::SATAPI()>
c0019dc3:	58                   	pop    eax
c0019dc4:	5a                   	pop    edx
c0019dc5:	55                   	push   ebp
c0019dc6:	56                   	push   esi
c0019dc7:	e8 5c 1b ff ff       	call   c000b928 <Device::addChild(Device*)>
c0019dcc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019dcf:	56                   	push   esi
c0019dd0:	6a 00                	push   0x0
c0019dd2:	53                   	push   ebx
c0019dd3:	55                   	push   ebp
c0019dd4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019dd7:	83 c4 20             	add    esp,0x20
c0019dda:	d1 ef                	shr    edi,1
c0019ddc:	43                   	inc    ebx
c0019ddd:	83 fb 20             	cmp    ebx,0x20
c0019de0:	0f 85 72 ff ff ff    	jne    c0019d58 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019de6:	83 c4 0c             	add    esp,0xc
c0019de9:	5b                   	pop    ebx
c0019dea:	5e                   	pop    esi
c0019deb:	5f                   	pop    edi
c0019dec:	5d                   	pop    ebp
c0019ded:	c3                   	ret    

c0019dee <SATABus::open(int, int, void*)>:
c0019dee:	83 ec 14             	sub    esp,0x14
c0019df1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019df5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019dfb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019e01:	52                   	push   edx
c0019e02:	50                   	push   eax
c0019e03:	e8 3c ff ff ff       	call   c0019d44 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019e08:	31 c0                	xor    eax,eax
c0019e0a:	83 c4 1c             	add    esp,0x1c
c0019e0d:	c3                   	ret    

c0019e0e <ATA::close(int, int, void*)>:
c0019e0e:	83 ec 0c             	sub    esp,0xc
c0019e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e15:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019e1b:	85 c0                	test   eax,eax
c0019e1d:	74 0c                	je     c0019e2b <ATA::close(int, int, void*)+0x1d>
c0019e1f:	83 ec 0c             	sub    esp,0xc
c0019e22:	8b 10                	mov    edx,DWORD PTR [eax]
c0019e24:	50                   	push   eax
c0019e25:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019e28:	83 c4 10             	add    esp,0x10
c0019e2b:	31 c0                	xor    eax,eax
c0019e2d:	83 c4 0c             	add    esp,0xc
c0019e30:	c3                   	ret    
c0019e31:	90                   	nop

c0019e32 <ATA::powerSaving(PowerSavingLevel)>:
c0019e32:	c3                   	ret    
c0019e33:	90                   	nop

c0019e34 <ATA::ATA()>:
c0019e34:	83 ec 0c             	sub    esp,0xc
c0019e37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e3b:	83 ec 04             	sub    esp,0x4
c0019e3e:	68 00 02 00 00       	push   0x200
c0019e43:	68 f9 f4 01 c0       	push   0xc001f4f9
c0019e48:	50                   	push   eax
c0019e49:	e8 a8 1e ff ff       	call   c000bcf6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019e4e:	83 c4 10             	add    esp,0x10
c0019e51:	ba 6c f4 01 c0       	mov    edx,0xc001f46c
c0019e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e5a:	89 10                	mov    DWORD PTR [eax],edx
c0019e5c:	90                   	nop
c0019e5d:	83 c4 0c             	add    esp,0xc
c0019e60:	c3                   	ret    
c0019e61:	90                   	nop

c0019e62 <ATA::flush(bool)>:
c0019e62:	53                   	push   ebx
c0019e63:	83 ec 08             	sub    esp,0x8
c0019e66:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019e6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e6f:	19 c0                	sbb    eax,eax
c0019e71:	83 e0 fd             	and    eax,0xfffffffd
c0019e74:	05 ea 00 00 00       	add    eax,0xea
c0019e79:	50                   	push   eax
c0019e7a:	6a 07                	push   0x7
c0019e7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e83:	50                   	push   eax
c0019e84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e8a:	e8 59 f1 ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019e8f:	83 c4 0c             	add    esp,0xc
c0019e92:	6a 00                	push   0x0
c0019e94:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e9b:	50                   	push   eax
c0019e9c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ea2:	e8 df fb ff ff       	call   c0019a86 <IDE::polling(unsigned char, unsigned int)>
c0019ea7:	83 c4 18             	add    esp,0x18
c0019eaa:	5b                   	pop    ebx
c0019eab:	c3                   	ret    

c0019eac <ATA::readyForCommand()>:
c0019eac:	56                   	push   esi
c0019ead:	53                   	push   ebx
c0019eae:	53                   	push   ebx
c0019eaf:	31 db                	xor    ebx,ebx
c0019eb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019eb5:	51                   	push   ecx
c0019eb6:	6a 0c                	push   0xc
c0019eb8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019ebf:	50                   	push   eax
c0019ec0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019ec6:	e8 dd f1 ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c0019ecb:	83 c4 10             	add    esp,0x10
c0019ece:	a8 88                	test   al,0x88
c0019ed0:	74 1f                	je     c0019ef1 <ATA::readyForCommand()+0x45>
c0019ed2:	43                   	inc    ebx
c0019ed3:	83 fb 63             	cmp    ebx,0x63
c0019ed6:	7e dd                	jle    c0019eb5 <ATA::readyForCommand()+0x9>
c0019ed8:	83 ec 0c             	sub    esp,0xc
c0019edb:	6a 0a                	push   0xa
c0019edd:	e8 da 9b ff ff       	call   c0013abc <milliTenthSleep(unsigned int)>
c0019ee2:	83 c4 10             	add    esp,0x10
c0019ee5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019eeb:	75 c8                	jne    c0019eb5 <ATA::readyForCommand()+0x9>
c0019eed:	31 c0                	xor    eax,eax
c0019eef:	eb 02                	jmp    c0019ef3 <ATA::readyForCommand()+0x47>
c0019ef1:	b0 01                	mov    al,0x1
c0019ef3:	5a                   	pop    edx
c0019ef4:	5b                   	pop    ebx
c0019ef5:	5e                   	pop    esi
c0019ef6:	c3                   	ret    
c0019ef7:	90                   	nop

c0019ef8 <ATA::access(unsigned long long, int, void*, bool)>:
c0019ef8:	55                   	push   ebp
c0019ef9:	57                   	push   edi
c0019efa:	56                   	push   esi
c0019efb:	53                   	push   ebx
c0019efc:	83 ec 2c             	sub    esp,0x2c
c0019eff:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019f03:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019f07:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019f0b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f0f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019f13:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019f17:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019f1b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019f21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f25:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019f2b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019f2f:	c1 e0 06             	shl    eax,0x6
c0019f32:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019f3a:	74 5d                	je     c0019f99 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019f3c:	89 fa                	mov    edx,edi
c0019f3e:	89 f0                	mov    eax,esi
c0019f40:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019f44:	c1 ea 1c             	shr    edx,0x1c
c0019f47:	89 d1                	mov    ecx,edx
c0019f49:	09 c1                	or     ecx,eax
c0019f4b:	74 25                	je     c0019f72 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019f4d:	31 ed                	xor    ebp,ebp
c0019f4f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019f56:	89 fa                	mov    edx,edi
c0019f58:	89 f0                	mov    eax,esi
c0019f5a:	0f ad d0             	shrd   eax,edx,cl
c0019f5d:	d3 ea                	shr    edx,cl
c0019f5f:	f6 c1 20             	test   cl,0x20
c0019f62:	74 02                	je     c0019f66 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019f64:	89 d0                	mov    eax,edx
c0019f66:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019f6a:	45                   	inc    ebp
c0019f6b:	83 fd 06             	cmp    ebp,0x6
c0019f6e:	75 df                	jne    c0019f4f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019f70:	eb 76                	jmp    c0019fe8 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019f72:	89 f0                	mov    eax,esi
c0019f74:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019f79:	89 fa                	mov    edx,edi
c0019f7b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019f82:	0f ac d0 10          	shrd   eax,edx,0x10
c0019f86:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019f8b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019f8f:	c1 ee 18             	shr    esi,0x18
c0019f92:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019f97:	eb 56                	jmp    c0019fef <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019f99:	6a 00                	push   0x0
c0019f9b:	6a 3f                	push   0x3f
c0019f9d:	57                   	push   edi
c0019f9e:	56                   	push   esi
c0019f9f:	e8 1c 22 00 00       	call   c001c1c0 <__umoddi3>
c0019fa4:	83 c4 10             	add    esp,0x10
c0019fa7:	40                   	inc    eax
c0019fa8:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019fac:	6a 00                	push   0x0
c0019fae:	68 f0 03 00 00       	push   0x3f0
c0019fb3:	57                   	push   edi
c0019fb4:	56                   	push   esi
c0019fb5:	e8 06 21 00 00       	call   c001c0c0 <__udivdi3>
c0019fba:	83 c4 10             	add    esp,0x10
c0019fbd:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019fc2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019fc9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019fce:	6a 00                	push   0x0
c0019fd0:	6a 3f                	push   0x3f
c0019fd2:	57                   	push   edi
c0019fd3:	56                   	push   esi
c0019fd4:	e8 e7 20 00 00       	call   c001c0c0 <__udivdi3>
c0019fd9:	83 c4 10             	add    esp,0x10
c0019fdc:	89 c6                	mov    esi,eax
c0019fde:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019fe3:	83 e6 0f             	and    esi,0xf
c0019fe6:	eb 07                	jmp    c0019fef <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019fe8:	31 f6                	xor    esi,esi
c0019fea:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019fef:	bf 01 00 00 00       	mov    edi,0x1
c0019ff4:	50                   	push   eax
c0019ff5:	6a 00                	push   0x0
c0019ff7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ffe:	50                   	push   eax
c0019fff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a003:	e8 ee f1 ff ff       	call   c00191f6 <IDE::enableIRQs(unsigned char, bool)>
c001a008:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a00b:	e8 9c fe ff ff       	call   c0019eac <ATA::readyForCommand()>
c001a010:	83 c4 10             	add    esp,0x10
c001a013:	84 c0                	test   al,al
c001a015:	0f 84 4e 02 00 00    	je     c001a269 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a01b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a021:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a027:	c1 e0 04             	shl    eax,0x4
c001a02a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a031:	09 c6                	or     esi,eax
c001a033:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a038:	75 05                	jne    c001a03f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a03a:	83 ce a0             	or     esi,0xffffffa0
c001a03d:	eb 03                	jmp    c001a042 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a03f:	83 ce e0             	or     esi,0xffffffe0
c001a042:	89 f0                	mov    eax,esi
c001a044:	0f b6 f0             	movzx  esi,al
c001a047:	56                   	push   esi
c001a048:	6a 06                	push   0x6
c001a04a:	51                   	push   ecx
c001a04b:	52                   	push   edx
c001a04c:	e8 97 ef ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a051:	83 c4 10             	add    esp,0x10
c001a054:	6a 00                	push   0x0
c001a056:	6a 01                	push   0x1
c001a058:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a05f:	50                   	push   eax
c001a060:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a066:	e8 7d ef ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a06b:	83 c4 10             	add    esp,0x10
c001a06e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a073:	75 6e                	jne    c001a0e3 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a075:	6a 00                	push   0x0
c001a077:	6a 08                	push   0x8
c001a079:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a080:	50                   	push   eax
c001a081:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a087:	e8 5c ef ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a08c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a091:	50                   	push   eax
c001a092:	6a 09                	push   0x9
c001a094:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a09b:	50                   	push   eax
c001a09c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0a2:	e8 41 ef ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0a7:	83 c4 20             	add    esp,0x20
c001a0aa:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a0af:	50                   	push   eax
c001a0b0:	6a 0a                	push   0xa
c001a0b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0b9:	50                   	push   eax
c001a0ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0c0:	e8 23 ef ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0c5:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a0ca:	50                   	push   eax
c001a0cb:	6a 0b                	push   0xb
c001a0cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0d4:	50                   	push   eax
c001a0d5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0db:	e8 08 ef ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0e0:	83 c4 20             	add    esp,0x20
c001a0e3:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a0e8:	50                   	push   eax
c001a0e9:	6a 02                	push   0x2
c001a0eb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0f2:	50                   	push   eax
c001a0f3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a0f9:	e8 ea ee ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0fe:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a103:	50                   	push   eax
c001a104:	6a 03                	push   0x3
c001a106:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a10d:	50                   	push   eax
c001a10e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a114:	e8 cf ee ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a119:	83 c4 20             	add    esp,0x20
c001a11c:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a121:	50                   	push   eax
c001a122:	6a 04                	push   0x4
c001a124:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a12b:	50                   	push   eax
c001a12c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a132:	e8 b1 ee ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a137:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a13c:	50                   	push   eax
c001a13d:	6a 05                	push   0x5
c001a13f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a146:	50                   	push   eax
c001a147:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a14d:	e8 96 ee ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a152:	83 c4 20             	add    esp,0x20
c001a155:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a15a:	0f 94 c0             	sete   al
c001a15d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a162:	74 09                	je     c001a16d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a164:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a16b:	eb 07                	jmp    c001a174 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a16d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a174:	0f b6 c0             	movzx  eax,al
c001a177:	50                   	push   eax
c001a178:	6a 07                	push   0x7
c001a17a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a181:	50                   	push   eax
c001a182:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a188:	e8 5b ee ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a18d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a191:	83 c4 10             	add    esp,0x10
c001a194:	85 f6                	test   esi,esi
c001a196:	0f 84 ae 00 00 00    	je     c001a24a <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a19c:	50                   	push   eax
c001a19d:	6a 01                	push   0x1
c001a19f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1a6:	50                   	push   eax
c001a1a7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1ad:	e8 d4 f8 ff ff       	call   c0019a86 <IDE::polling(unsigned char, unsigned int)>
c001a1b2:	83 c4 10             	add    esp,0x10
c001a1b5:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a1bb:	84 c0                	test   al,al
c001a1bd:	74 20                	je     c001a1df <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a1bf:	0f b6 f8             	movzx  edi,al
c001a1c2:	0f b6 d2             	movzx  edx,dl
c001a1c5:	57                   	push   edi
c001a1c6:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a1cd:	50                   	push   eax
c001a1ce:	52                   	push   edx
c001a1cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1d5:	e8 fc f7 ff ff       	call   c00199d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a1da:	e9 87 00 00 00       	jmp    c001a266 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a1df:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a1e4:	74 33                	je     c001a219 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a1e6:	31 ed                	xor    ebp,ebp
c001a1e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a1ec:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a1f0:	50                   	push   eax
c001a1f1:	50                   	push   eax
c001a1f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1f9:	50                   	push   eax
c001a1fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a200:	e8 d1 ed ff ff       	call   c0018fd6 <IDE::getBase(unsigned char)>
c001a205:	89 c2                	mov    edx,eax
c001a207:	89 f8                	mov    eax,edi
c001a209:	66 ef                	out    dx,ax
c001a20b:	45                   	inc    ebp
c001a20c:	83 c4 10             	add    esp,0x10
c001a20f:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a215:	75 d1                	jne    c001a1e8 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a217:	eb 23                	jmp    c001a23c <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a219:	0f b6 d2             	movzx  edx,dl
c001a21c:	51                   	push   ecx
c001a21d:	51                   	push   ecx
c001a21e:	52                   	push   edx
c001a21f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a225:	e8 ac ed ff ff       	call   c0018fd6 <IDE::getBase(unsigned char)>
c001a22a:	b9 00 01 00 00       	mov    ecx,0x100
c001a22f:	89 c2                	mov    edx,eax
c001a231:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a235:	fc                   	cld    
c001a236:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a239:	83 c4 10             	add    esp,0x10
c001a23c:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a244:	4e                   	dec    esi
c001a245:	e9 4a ff ff ff       	jmp    c001a194 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a24a:	31 ff                	xor    edi,edi
c001a24c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a251:	74 16                	je     c001a269 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a253:	50                   	push   eax
c001a254:	50                   	push   eax
c001a255:	31 c0                	xor    eax,eax
c001a257:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a25c:	0f 94 c0             	sete   al
c001a25f:	50                   	push   eax
c001a260:	53                   	push   ebx
c001a261:	e8 fc fb ff ff       	call   c0019e62 <ATA::flush(bool)>
c001a266:	83 c4 10             	add    esp,0x10
c001a269:	83 c4 2c             	add    esp,0x2c
c001a26c:	89 f8                	mov    eax,edi
c001a26e:	5b                   	pop    ebx
c001a26f:	5e                   	pop    esi
c001a270:	5f                   	pop    edi
c001a271:	5d                   	pop    ebp
c001a272:	c3                   	ret    
c001a273:	90                   	nop

c001a274 <ATA::read(unsigned long long, int, void*)>:
c001a274:	57                   	push   edi
c001a275:	b8 04 00 00 00       	mov    eax,0x4
c001a27a:	56                   	push   esi
c001a27b:	53                   	push   ebx
c001a27c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a280:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a284:	8d 7a ff             	lea    edi,[edx-0x1]
c001a287:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a28b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a28f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a295:	77 25                	ja     c001a2bc <ATA::read(unsigned long long, int, void*)+0x48>
c001a297:	b8 06 00 00 00       	mov    eax,0x6
c001a29c:	85 f6                	test   esi,esi
c001a29e:	74 1c                	je     c001a2bc <ATA::read(unsigned long long, int, void*)+0x48>
c001a2a0:	50                   	push   eax
c001a2a1:	50                   	push   eax
c001a2a2:	6a 00                	push   0x0
c001a2a4:	56                   	push   esi
c001a2a5:	52                   	push   edx
c001a2a6:	53                   	push   ebx
c001a2a7:	51                   	push   ecx
c001a2a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2ac:	e8 47 fc ff ff       	call   c0019ef8 <ATA::access(unsigned long long, int, void*, bool)>
c001a2b1:	83 c4 20             	add    esp,0x20
c001a2b4:	85 c0                	test   eax,eax
c001a2b6:	0f 95 c0             	setne  al
c001a2b9:	0f b6 c0             	movzx  eax,al
c001a2bc:	5b                   	pop    ebx
c001a2bd:	5e                   	pop    esi
c001a2be:	5f                   	pop    edi
c001a2bf:	c3                   	ret    

c001a2c0 <ATA::write(unsigned long long, int, void*)>:
c001a2c0:	57                   	push   edi
c001a2c1:	b8 04 00 00 00       	mov    eax,0x4
c001a2c6:	56                   	push   esi
c001a2c7:	53                   	push   ebx
c001a2c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a2d0:	8d 7a ff             	lea    edi,[edx-0x1]
c001a2d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a2d7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a2db:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a2e1:	77 25                	ja     c001a308 <ATA::write(unsigned long long, int, void*)+0x48>
c001a2e3:	b8 06 00 00 00       	mov    eax,0x6
c001a2e8:	85 f6                	test   esi,esi
c001a2ea:	74 1c                	je     c001a308 <ATA::write(unsigned long long, int, void*)+0x48>
c001a2ec:	50                   	push   eax
c001a2ed:	50                   	push   eax
c001a2ee:	6a 01                	push   0x1
c001a2f0:	56                   	push   esi
c001a2f1:	52                   	push   edx
c001a2f2:	53                   	push   ebx
c001a2f3:	51                   	push   ecx
c001a2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2f8:	e8 fb fb ff ff       	call   c0019ef8 <ATA::access(unsigned long long, int, void*, bool)>
c001a2fd:	83 c4 20             	add    esp,0x20
c001a300:	85 c0                	test   eax,eax
c001a302:	0f 95 c0             	setne  al
c001a305:	0f b6 c0             	movzx  eax,al
c001a308:	5b                   	pop    ebx
c001a309:	5e                   	pop    esi
c001a30a:	5f                   	pop    edi
c001a30b:	c3                   	ret    

c001a30c <ATA::detectCHS()>:
c001a30c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a310:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a316:	c1 e0 06             	shl    eax,0x6
c001a319:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a31f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a329:	c7 44 24 04 50 f4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f450
c001a331:	e9 35 5e ff ff       	jmp    c001016b <KePanic(char const*)>

c001a336 <ATA::open(int, int, void*)>:
c001a336:	53                   	push   ebx
c001a337:	83 ec 08             	sub    esp,0x8
c001a33a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a33e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a342:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a346:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a34c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a352:	c1 e0 06             	shl    eax,0x6
c001a355:	01 d0                	add    eax,edx
c001a357:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a35e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a364:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a36b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a375:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a37b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a382:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a389:	75 0c                	jne    c001a397 <ATA::open(int, int, void*)+0x61>
c001a38b:	83 ec 0c             	sub    esp,0xc
c001a38e:	53                   	push   ebx
c001a38f:	e8 78 ff ff ff       	call   c001a30c <ATA::detectCHS()>
c001a394:	83 c4 10             	add    esp,0x10
c001a397:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a39d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a3a3:	c1 e0 06             	shl    eax,0x6
c001a3a6:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a3ad:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a3b7:	d1 e8                	shr    eax,1
c001a3b9:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a3bf:	6a 04                	push   0x4
c001a3c1:	6a 0c                	push   0xc
c001a3c3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3ca:	50                   	push   eax
c001a3cb:	52                   	push   edx
c001a3cc:	e8 17 ec ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3d1:	90                   	nop
c001a3d2:	90                   	nop
c001a3d3:	6a 00                	push   0x0
c001a3d5:	6a 0c                	push   0xc
c001a3d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3de:	50                   	push   eax
c001a3df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a3e5:	e8 fe eb ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3ea:	83 c4 14             	add    esp,0x14
c001a3ed:	53                   	push   ebx
c001a3ee:	e8 6b 19 ff ff       	call   c000bd5e <PhysicalDisk::startCache()>
c001a3f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3f6:	e8 1b 2a ff ff       	call   c000ce16 <createPartitionsForDisk(PhysicalDisk*)>
c001a3fb:	31 c0                	xor    eax,eax
c001a3fd:	83 c4 18             	add    esp,0x18
c001a400:	5b                   	pop    ebx
c001a401:	c3                   	ret    

c001a402 <ATAPI::write(unsigned long long, int, void*)>:
c001a402:	b8 03 00 00 00       	mov    eax,0x3
c001a407:	c3                   	ret    

c001a408 <ATAPI::close(int, int, void*)>:
c001a408:	83 ec 0c             	sub    esp,0xc
c001a40b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a40f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a415:	85 c0                	test   eax,eax
c001a417:	74 0c                	je     c001a425 <ATAPI::close(int, int, void*)+0x1d>
c001a419:	83 ec 0c             	sub    esp,0xc
c001a41c:	8b 10                	mov    edx,DWORD PTR [eax]
c001a41e:	50                   	push   eax
c001a41f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a422:	83 c4 10             	add    esp,0x10
c001a425:	31 c0                	xor    eax,eax
c001a427:	83 c4 0c             	add    esp,0xc
c001a42a:	c3                   	ret    
c001a42b:	90                   	nop

c001a42c <ATAPI::ATAPI()>:
c001a42c:	83 ec 0c             	sub    esp,0xc
c001a42f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a433:	83 ec 04             	sub    esp,0x4
c001a436:	68 00 08 00 00       	push   0x800
c001a43b:	68 99 f5 01 c0       	push   0xc001f599
c001a440:	50                   	push   eax
c001a441:	e8 b0 18 ff ff       	call   c000bcf6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a446:	83 c4 10             	add    esp,0x10
c001a449:	ba b4 f4 01 c0       	mov    edx,0xc001f4b4
c001a44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a452:	89 10                	mov    DWORD PTR [eax],edx
c001a454:	90                   	nop
c001a455:	83 c4 0c             	add    esp,0xc
c001a458:	c3                   	ret    
c001a459:	90                   	nop

c001a45a <ATAPI::readyForCommand()>:
c001a45a:	56                   	push   esi
c001a45b:	53                   	push   ebx
c001a45c:	53                   	push   ebx
c001a45d:	31 db                	xor    ebx,ebx
c001a45f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a463:	51                   	push   ecx
c001a464:	6a 0c                	push   0xc
c001a466:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a46d:	50                   	push   eax
c001a46e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a474:	e8 2f ec ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c001a479:	83 c4 10             	add    esp,0x10
c001a47c:	a8 88                	test   al,0x88
c001a47e:	74 25                	je     c001a4a5 <ATAPI::readyForCommand()+0x4b>
c001a480:	43                   	inc    ebx
c001a481:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a487:	7e da                	jle    c001a463 <ATAPI::readyForCommand()+0x9>
c001a489:	83 ec 0c             	sub    esp,0xc
c001a48c:	68 5e 01 00 00       	push   0x15e
c001a491:	e8 26 96 ff ff       	call   c0013abc <milliTenthSleep(unsigned int)>
c001a496:	83 c4 10             	add    esp,0x10
c001a499:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a49f:	75 c2                	jne    c001a463 <ATAPI::readyForCommand()+0x9>
c001a4a1:	31 c0                	xor    eax,eax
c001a4a3:	eb 02                	jmp    c001a4a7 <ATAPI::readyForCommand()+0x4d>
c001a4a5:	b0 01                	mov    al,0x1
c001a4a7:	5a                   	pop    edx
c001a4a8:	5b                   	pop    ebx
c001a4a9:	5e                   	pop    esi
c001a4aa:	c3                   	ret    
c001a4ab:	90                   	nop

c001a4ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a4ac:	55                   	push   ebp
c001a4ad:	57                   	push   edi
c001a4ae:	56                   	push   esi
c001a4af:	53                   	push   ebx
c001a4b0:	83 ec 20             	sub    esp,0x20
c001a4b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a4b7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a4bb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a4bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a4c3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a4c7:	6a 01                	push   0x1
c001a4c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4d0:	50                   	push   eax
c001a4d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4d7:	e8 1a ed ff ff       	call   c00191f6 <IDE::enableIRQs(unsigned char, bool)>
c001a4dc:	5e                   	pop    esi
c001a4dd:	58                   	pop    eax
c001a4de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a4e5:	50                   	push   eax
c001a4e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a4ec:	e8 d1 ea ff ff       	call   c0018fc2 <IDE::prepareInterrupt(unsigned char)>
c001a4f1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a4f4:	e8 61 ff ff ff       	call   c001a45a <ATAPI::readyForCommand()>
c001a4f9:	83 c4 10             	add    esp,0x10
c001a4fc:	84 c0                	test   al,al
c001a4fe:	75 0a                	jne    c001a50a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a500:	bb 01 00 00 00       	mov    ebx,0x1
c001a505:	e9 57 02 00 00       	jmp    c001a761 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a50a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a510:	c1 e0 04             	shl    eax,0x4
c001a513:	0f b6 c0             	movzx  eax,al
c001a516:	50                   	push   eax
c001a517:	6a 06                	push   0x6
c001a519:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a520:	50                   	push   eax
c001a521:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a527:	e8 bc ea ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a52c:	6a 00                	push   0x0
c001a52e:	6a 01                	push   0x1
c001a530:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a537:	50                   	push   eax
c001a538:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a53e:	e8 a5 ea ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a543:	83 c4 20             	add    esp,0x20
c001a546:	0f b6 c3             	movzx  eax,bl
c001a549:	0f b6 df             	movzx  ebx,bh
c001a54c:	50                   	push   eax
c001a54d:	6a 04                	push   0x4
c001a54f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a556:	50                   	push   eax
c001a557:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a55d:	e8 86 ea ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a562:	53                   	push   ebx
c001a563:	6a 05                	push   0x5
c001a565:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a56c:	50                   	push   eax
c001a56d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a573:	e8 70 ea ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a578:	83 c4 20             	add    esp,0x20
c001a57b:	68 a0 00 00 00       	push   0xa0
c001a580:	6a 07                	push   0x7
c001a582:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a589:	50                   	push   eax
c001a58a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a590:	e8 53 ea ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a595:	83 c4 0c             	add    esp,0xc
c001a598:	6a 01                	push   0x1
c001a59a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5a1:	50                   	push   eax
c001a5a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5a8:	e8 d9 f4 ff ff       	call   c0019a86 <IDE::polling(unsigned char, unsigned int)>
c001a5ad:	83 c4 10             	add    esp,0x10
c001a5b0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a5b6:	84 c0                	test   al,al
c001a5b8:	74 23                	je     c001a5dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a5ba:	0f b6 d8             	movzx  ebx,al
c001a5bd:	0f b6 d2             	movzx  edx,dl
c001a5c0:	53                   	push   ebx
c001a5c1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a5c8:	50                   	push   eax
c001a5c9:	52                   	push   edx
c001a5ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5d0:	e8 01 f4 ff ff       	call   c00199d6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a5d5:	83 c4 10             	add    esp,0x10
c001a5d8:	e9 84 01 00 00       	jmp    c001a761 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a5dd:	0f b6 d2             	movzx  edx,dl
c001a5e0:	53                   	push   ebx
c001a5e1:	53                   	push   ebx
c001a5e2:	52                   	push   edx
c001a5e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5e9:	e8 e8 e9 ff ff       	call   c0018fd6 <IDE::getBase(unsigned char)>
c001a5ee:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a5f2:	b9 06 00 00 00       	mov    ecx,0x6
c001a5f7:	89 c2                	mov    edx,eax
c001a5f9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a5fc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a600:	83 c4 10             	add    esp,0x10
c001a603:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a609:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a610:	85 db                	test   ebx,ebx
c001a612:	0f 84 ec 00 00 00    	je     c001a704 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a618:	51                   	push   ecx
c001a619:	51                   	push   ecx
c001a61a:	52                   	push   edx
c001a61b:	50                   	push   eax
c001a61c:	e8 35 eb ff ff       	call   c0019156 <IDE::waitInterrupt(unsigned char)>
c001a621:	83 c4 10             	add    esp,0x10
c001a624:	84 c0                	test   al,al
c001a626:	0f 84 d4 fe ff ff    	je     c001a500 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a62c:	56                   	push   esi
c001a62d:	56                   	push   esi
c001a62e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a635:	50                   	push   eax
c001a636:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a63c:	e8 81 e9 ff ff       	call   c0018fc2 <IDE::prepareInterrupt(unsigned char)>
c001a641:	83 c4 0c             	add    esp,0xc
c001a644:	6a 04                	push   0x4
c001a646:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a64d:	50                   	push   eax
c001a64e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a654:	e8 4f ea ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c001a659:	83 c4 0c             	add    esp,0xc
c001a65c:	89 c6                	mov    esi,eax
c001a65e:	6a 05                	push   0x5
c001a660:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a667:	50                   	push   eax
c001a668:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a66e:	e8 35 ea ff ff       	call   c00190a8 <IDE::read(unsigned char, unsigned char)>
c001a673:	89 f1                	mov    ecx,esi
c001a675:	0f b6 c0             	movzx  eax,al
c001a678:	0f b6 f1             	movzx  esi,cl
c001a67b:	c1 e0 08             	shl    eax,0x8
c001a67e:	09 c6                	or     esi,eax
c001a680:	d1 fe                	sar    esi,1
c001a682:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a686:	83 c4 10             	add    esp,0x10
c001a689:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a68e:	74 41                	je     c001a6d1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a690:	31 c9                	xor    ecx,ecx
c001a692:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a698:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a69f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a6a3:	75 0a                	jne    c001a6af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a6a5:	01 c9                	add    ecx,ecx
c001a6a7:	01 cd                	add    ebp,ecx
c001a6a9:	4b                   	dec    ebx
c001a6aa:	e9 54 ff ff ff       	jmp    c001a603 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a6af:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a6b4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a6b8:	51                   	push   ecx
c001a6b9:	51                   	push   ecx
c001a6ba:	52                   	push   edx
c001a6bb:	50                   	push   eax
c001a6bc:	e8 15 e9 ff ff       	call   c0018fd6 <IDE::getBase(unsigned char)>
c001a6c1:	89 c2                	mov    edx,eax
c001a6c3:	89 f0                	mov    eax,esi
c001a6c5:	66 ef                	out    dx,ax
c001a6c7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a6cb:	83 c4 10             	add    esp,0x10
c001a6ce:	41                   	inc    ecx
c001a6cf:	eb c1                	jmp    c001a692 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a6d1:	31 f6                	xor    esi,esi
c001a6d3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a6d9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a6e0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a6e4:	75 06                	jne    c001a6ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a6e6:	01 f6                	add    esi,esi
c001a6e8:	01 f5                	add    ebp,esi
c001a6ea:	eb bd                	jmp    c001a6a9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a6ec:	51                   	push   ecx
c001a6ed:	51                   	push   ecx
c001a6ee:	52                   	push   edx
c001a6ef:	50                   	push   eax
c001a6f0:	e8 e1 e8 ff ff       	call   c0018fd6 <IDE::getBase(unsigned char)>
c001a6f5:	89 c2                	mov    edx,eax
c001a6f7:	66 ed                	in     ax,dx
c001a6f9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a6fe:	83 c4 10             	add    esp,0x10
c001a701:	46                   	inc    esi
c001a702:	eb cf                	jmp    c001a6d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a704:	51                   	push   ecx
c001a705:	51                   	push   ecx
c001a706:	52                   	push   edx
c001a707:	50                   	push   eax
c001a708:	e8 49 ea ff ff       	call   c0019156 <IDE::waitInterrupt(unsigned char)>
c001a70d:	83 c4 10             	add    esp,0x10
c001a710:	84 c0                	test   al,al
c001a712:	0f 84 e8 fd ff ff    	je     c001a500 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a718:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a71d:	52                   	push   edx
c001a71e:	52                   	push   edx
c001a71f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a726:	50                   	push   eax
c001a727:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a72d:	e8 90 e8 ff ff       	call   c0018fc2 <IDE::prepareInterrupt(unsigned char)>
c001a732:	83 c4 10             	add    esp,0x10
c001a735:	50                   	push   eax
c001a736:	50                   	push   eax
c001a737:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a73e:	50                   	push   eax
c001a73f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a745:	e8 8c e8 ff ff       	call   c0018fd6 <IDE::getBase(unsigned char)>
c001a74a:	8d 50 07             	lea    edx,[eax+0x7]
c001a74d:	ec                   	in     al,dx
c001a74e:	83 c4 10             	add    esp,0x10
c001a751:	a8 88                	test   al,0x88
c001a753:	74 0a                	je     c001a75f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a755:	4b                   	dec    ebx
c001a756:	75 dd                	jne    c001a735 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a758:	bb 02 00 00 00       	mov    ebx,0x2
c001a75d:	eb 02                	jmp    c001a761 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a75f:	31 db                	xor    ebx,ebx
c001a761:	83 c4 1c             	add    esp,0x1c
c001a764:	89 d8                	mov    eax,ebx
c001a766:	5b                   	pop    ebx
c001a767:	5e                   	pop    esi
c001a768:	5f                   	pop    edi
c001a769:	5d                   	pop    ebp
c001a76a:	c3                   	ret    
c001a76b:	90                   	nop

c001a76c <ATAPI::diskRemoved()>:
c001a76c:	53                   	push   ebx
c001a76d:	83 ec 14             	sub    esp,0x14
c001a770:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a774:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a77b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a781:	e8 10 24 ff ff       	call   c000cb96 <LogicalDisk::unmount()>
c001a786:	58                   	pop    eax
c001a787:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a78d:	e8 4a 2d ff ff       	call   c000d4dc <VCache::writeWriteBuffer()>
c001a792:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a79c:	83 c4 18             	add    esp,0x18
c001a79f:	5b                   	pop    ebx
c001a7a0:	e9 27 2d ff ff       	jmp    c000d4cc <VCache::invalidateReadBuffer()>
c001a7a5:	90                   	nop

c001a7a6 <ATAPI::eject()>:
c001a7a6:	57                   	push   edi
c001a7a7:	b9 03 00 00 00       	mov    ecx,0x3
c001a7ac:	53                   	push   ebx
c001a7ad:	83 ec 14             	sub    esp,0x14
c001a7b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a7b4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a7b8:	fc                   	cld    
c001a7b9:	31 c0                	xor    eax,eax
c001a7bb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a7bd:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a7c2:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a7c7:	50                   	push   eax
c001a7c8:	50                   	push   eax
c001a7c9:	6a 00                	push   0x0
c001a7cb:	6a 00                	push   0x0
c001a7cd:	6a 00                	push   0x0
c001a7cf:	6a 02                	push   0x2
c001a7d1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a7d5:	50                   	push   eax
c001a7d6:	53                   	push   ebx
c001a7d7:	e8 d0 fc ff ff       	call   c001a4ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a7dc:	83 c4 14             	add    esp,0x14
c001a7df:	53                   	push   ebx
c001a7e0:	e8 87 ff ff ff       	call   c001a76c <ATAPI::diskRemoved()>
c001a7e5:	83 c4 24             	add    esp,0x24
c001a7e8:	31 c0                	xor    eax,eax
c001a7ea:	5b                   	pop    ebx
c001a7eb:	5f                   	pop    edi
c001a7ec:	c3                   	ret    
c001a7ed:	90                   	nop

c001a7ee <ATAPI::diskInserted()>:
c001a7ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7f2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a7f9:	c3                   	ret    

c001a7fa <ATAPI::detectMedia()>:
c001a7fa:	56                   	push   esi
c001a7fb:	53                   	push   ebx
c001a7fc:	83 ec 28             	sub    esp,0x28
c001a7ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a803:	6a 0c                	push   0xc
c001a805:	6a 00                	push   0x0
c001a807:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a80b:	56                   	push   esi
c001a80c:	e8 cf 5c fe ff       	call   c00004e0 <memset>
c001a811:	58                   	pop    eax
c001a812:	5a                   	pop    edx
c001a813:	6a 00                	push   0x0
c001a815:	6a 00                	push   0x0
c001a817:	6a 00                	push   0x0
c001a819:	6a 00                	push   0x0
c001a81b:	56                   	push   esi
c001a81c:	53                   	push   ebx
c001a81d:	e8 8a fc ff ff       	call   c001a4ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a822:	83 c4 1c             	add    esp,0x1c
c001a825:	6a 0c                	push   0xc
c001a827:	6a 00                	push   0x0
c001a829:	56                   	push   esi
c001a82a:	e8 b1 5c fe ff       	call   c00004e0 <memset>
c001a82f:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a834:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a839:	59                   	pop    ecx
c001a83a:	58                   	pop    eax
c001a83b:	6a 01                	push   0x1
c001a83d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a841:	50                   	push   eax
c001a842:	6a 00                	push   0x0
c001a844:	6a 12                	push   0x12
c001a846:	56                   	push   esi
c001a847:	53                   	push   ebx
c001a848:	e8 5f fc ff ff       	call   c001a4ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a84d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a851:	83 c4 20             	add    esp,0x20
c001a854:	83 e0 7f             	and    eax,0x7f
c001a857:	3c 70                	cmp    al,0x70
c001a859:	74 15                	je     c001a870 <ATAPI::detectMedia()+0x76>
c001a85b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a862:	75 0c                	jne    c001a870 <ATAPI::detectMedia()+0x76>
c001a864:	83 ec 0c             	sub    esp,0xc
c001a867:	53                   	push   ebx
c001a868:	e8 81 ff ff ff       	call   c001a7ee <ATAPI::diskInserted()>
c001a86d:	83 c4 10             	add    esp,0x10
c001a870:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a874:	83 e0 0f             	and    eax,0xf
c001a877:	3c 02                	cmp    al,0x2
c001a879:	75 1b                	jne    c001a896 <ATAPI::detectMedia()+0x9c>
c001a87b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a880:	75 2d                	jne    c001a8af <ATAPI::detectMedia()+0xb5>
c001a882:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a889:	74 24                	je     c001a8af <ATAPI::detectMedia()+0xb5>
c001a88b:	83 ec 0c             	sub    esp,0xc
c001a88e:	53                   	push   ebx
c001a88f:	e8 d8 fe ff ff       	call   c001a76c <ATAPI::diskRemoved()>
c001a894:	eb 16                	jmp    c001a8ac <ATAPI::detectMedia()+0xb2>
c001a896:	84 c0                	test   al,al
c001a898:	75 15                	jne    c001a8af <ATAPI::detectMedia()+0xb5>
c001a89a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a8a1:	75 0c                	jne    c001a8af <ATAPI::detectMedia()+0xb5>
c001a8a3:	83 ec 0c             	sub    esp,0xc
c001a8a6:	53                   	push   ebx
c001a8a7:	e8 42 ff ff ff       	call   c001a7ee <ATAPI::diskInserted()>
c001a8ac:	83 c4 10             	add    esp,0x10
c001a8af:	83 c4 24             	add    esp,0x24
c001a8b2:	5b                   	pop    ebx
c001a8b3:	5e                   	pop    esi
c001a8b4:	c3                   	ret    
c001a8b5:	90                   	nop

c001a8b6 <ATAPI::open(int, int, void*)>:
c001a8b6:	56                   	push   esi
c001a8b7:	53                   	push   ebx
c001a8b8:	50                   	push   eax
c001a8b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a8bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a8c1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a8c5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a8cb:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a8d1:	c1 e0 06             	shl    eax,0x6
c001a8d4:	01 d0                	add    eax,edx
c001a8d6:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a8dd:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a8e3:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a8ea:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a8f4:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a8fa:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a901:	6a 04                	push   0x4
c001a903:	6a 0c                	push   0xc
c001a905:	51                   	push   ecx
c001a906:	52                   	push   edx
c001a907:	e8 dc e6 ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a90c:	90                   	nop
c001a90d:	90                   	nop
c001a90e:	6a 00                	push   0x0
c001a910:	6a 0c                	push   0xc
c001a912:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a919:	50                   	push   eax
c001a91a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a920:	e8 c3 e6 ff ff       	call   c0018fe8 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a925:	83 c4 14             	add    esp,0x14
c001a928:	68 74 01 00 00       	push   0x174
c001a92d:	e8 97 ce fe ff       	call   c00077c9 <malloc>
c001a932:	83 c4 0c             	add    esp,0xc
c001a935:	89 c6                	mov    esi,eax
c001a937:	6a 00                	push   0x0
c001a939:	68 ff ff ff 7f       	push   0x7fffffff
c001a93e:	6a 00                	push   0x0
c001a940:	6a 00                	push   0x0
c001a942:	53                   	push   ebx
c001a943:	68 50 f6 01 c0       	push   0xc001f650
c001a948:	50                   	push   eax
c001a949:	e8 94 20 ff ff       	call   c000c9e2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a94e:	83 c4 14             	add    esp,0x14
c001a951:	56                   	push   esi
c001a952:	e8 41 21 ff ff       	call   c000ca98 <LogicalDisk::assignDriveLetter()>
c001a957:	5a                   	pop    edx
c001a958:	0f be c0             	movsx  eax,al
c001a95b:	59                   	pop    ecx
c001a95c:	50                   	push   eax
c001a95d:	68 9c f4 01 c0       	push   0xc001f49c
c001a962:	e8 81 fb fe ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001a967:	58                   	pop    eax
c001a968:	5a                   	pop    edx
c001a969:	56                   	push   esi
c001a96a:	53                   	push   ebx
c001a96b:	e8 b8 0f ff ff       	call   c000b928 <Device::addChild(Device*)>
c001a970:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a976:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a979:	e8 e0 13 ff ff       	call   c000bd5e <PhysicalDisk::startCache()>
c001a97e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a985:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a988:	e8 6d fe ff ff       	call   c001a7fa <ATAPI::detectMedia()>
c001a98d:	83 c4 14             	add    esp,0x14
c001a990:	31 c0                	xor    eax,eax
c001a992:	5b                   	pop    ebx
c001a993:	5e                   	pop    esi
c001a994:	c3                   	ret    
c001a995:	90                   	nop

c001a996 <ATAPI::read(unsigned long long, int, void*)>:
c001a996:	55                   	push   ebp
c001a997:	57                   	push   edi
c001a998:	56                   	push   esi
c001a999:	53                   	push   ebx
c001a99a:	83 ec 1c             	sub    esp,0x1c
c001a99d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a9a1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a9a5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a9a9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a9b0:	74 3c                	je     c001a9ee <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a9b2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a9b6:	b9 03 00 00 00       	mov    ecx,0x3
c001a9bb:	fc                   	cld    
c001a9bc:	31 c0                	xor    eax,eax
c001a9be:	0f ce                	bswap  esi
c001a9c0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a9c2:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a9c7:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a9cb:	89 e8                	mov    eax,ebp
c001a9cd:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a9d1:	50                   	push   eax
c001a9d2:	50                   	push   eax
c001a9d3:	55                   	push   ebp
c001a9d4:	c1 e5 0b             	shl    ebp,0xb
c001a9d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a9db:	6a 00                	push   0x0
c001a9dd:	55                   	push   ebp
c001a9de:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a9e2:	50                   	push   eax
c001a9e3:	53                   	push   ebx
c001a9e4:	e8 c3 fa ff ff       	call   c001a4ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a9e9:	83 c4 20             	add    esp,0x20
c001a9ec:	eb 1a                	jmp    c001aa08 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a9ee:	83 ec 0c             	sub    esp,0xc
c001a9f1:	53                   	push   ebx
c001a9f2:	e8 03 fe ff ff       	call   c001a7fa <ATAPI::detectMedia()>
c001a9f7:	83 c4 10             	add    esp,0x10
c001a9fa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aa01:	75 af                	jne    c001a9b2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001aa03:	b8 02 00 00 00       	mov    eax,0x2
c001aa08:	83 c4 1c             	add    esp,0x1c
c001aa0b:	5b                   	pop    ebx
c001aa0c:	5e                   	pop    esi
c001aa0d:	5f                   	pop    edi
c001aa0e:	5d                   	pop    ebp
c001aa0f:	c3                   	ret    

c001aa10 <SATA::close(int, int, void*)>:
c001aa10:	83 ec 0c             	sub    esp,0xc
c001aa13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa17:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aa1d:	85 c0                	test   eax,eax
c001aa1f:	74 0c                	je     c001aa2d <SATA::close(int, int, void*)+0x1d>
c001aa21:	83 ec 0c             	sub    esp,0xc
c001aa24:	8b 10                	mov    edx,DWORD PTR [eax]
c001aa26:	50                   	push   eax
c001aa27:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aa2a:	83 c4 10             	add    esp,0x10
c001aa2d:	31 c0                	xor    eax,eax
c001aa2f:	83 c4 0c             	add    esp,0xc
c001aa32:	c3                   	ret    
c001aa33:	90                   	nop

c001aa34 <SATA::powerSaving(PowerSavingLevel)>:
c001aa34:	c3                   	ret    
c001aa35:	90                   	nop

c001aa36 <SATA::open(int, int, void*)>:
c001aa36:	56                   	push   esi
c001aa37:	53                   	push   ebx
c001aa38:	50                   	push   eax
c001aa39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa41:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aa4b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001aa51:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001aa5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aa5f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001aa69:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001aa6f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001aa76:	e8 2a d0 fe ff       	call   c0007aa5 <Phys::allocatePage()>
c001aa7b:	89 c6                	mov    esi,eax
c001aa7d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001aa83:	81 c6 00 10 00 00    	add    esi,0x1000
c001aa89:	e8 17 d0 fe ff       	call   c0007aa5 <Phys::allocatePage()>
c001aa8e:	39 c6                	cmp    esi,eax
c001aa90:	74 10                	je     c001aaa2 <SATA::open(int, int, void*)+0x6c>
c001aa92:	83 ec 0c             	sub    esp,0xc
c001aa95:	68 e4 f4 01 c0       	push   0xc001f4e4
c001aa9a:	e8 cc 56 ff ff       	call   c001016b <KePanic(char const*)>
c001aa9f:	83 c4 10             	add    esp,0x10
c001aaa2:	83 ec 0c             	sub    esp,0xc
c001aaa5:	6a 02                	push   0x2
c001aaa7:	e8 e9 e7 fe ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c001aaac:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001aab2:	6a 03                	push   0x3
c001aab4:	50                   	push   eax
c001aab5:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001aabb:	ff 35 70 0c 02 c0    	push   DWORD PTR ds:0xc0020c70
c001aac1:	e8 64 ee fe ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c001aac6:	83 c4 14             	add    esp,0x14
c001aac9:	53                   	push   ebx
c001aaca:	e8 8f 12 ff ff       	call   c000bd5e <PhysicalDisk::startCache()>
c001aacf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aad2:	e8 3f 23 ff ff       	call   c000ce16 <createPartitionsForDisk(PhysicalDisk*)>
c001aad7:	83 c4 14             	add    esp,0x14
c001aada:	31 c0                	xor    eax,eax
c001aadc:	5b                   	pop    ebx
c001aadd:	5e                   	pop    esi
c001aade:	c3                   	ret    
c001aadf:	90                   	nop

c001aae0 <SATA::SATA()>:
c001aae0:	83 ec 0c             	sub    esp,0xc
c001aae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aae7:	83 ec 04             	sub    esp,0x4
c001aaea:	68 00 02 00 00       	push   0x200
c001aaef:	68 f8 f4 01 c0       	push   0xc001f4f8
c001aaf4:	50                   	push   eax
c001aaf5:	e8 fc 11 ff ff       	call   c000bcf6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aafa:	83 c4 10             	add    esp,0x10
c001aafd:	ba 68 f5 01 c0       	mov    edx,0xc001f568
c001ab02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab06:	89 10                	mov    DWORD PTR [eax],edx
c001ab08:	90                   	nop
c001ab09:	83 c4 0c             	add    esp,0xc
c001ab0c:	c3                   	ret    
c001ab0d:	90                   	nop

c001ab0e <SATA::access(unsigned long long, int, void*, bool)>:
c001ab0e:	55                   	push   ebp
c001ab0f:	57                   	push   edi
c001ab10:	56                   	push   esi
c001ab11:	53                   	push   ebx
c001ab12:	83 ec 2c             	sub    esp,0x2c
c001ab15:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ab19:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ab1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ab21:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ab25:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ab29:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001ab2e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab32:	7e 10                	jle    c001ab44 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001ab34:	83 ec 0c             	sub    esp,0xc
c001ab37:	68 08 f5 01 c0       	push   0xc001f508
c001ab3c:	e8 2a 56 ff ff       	call   c001016b <KePanic(char const*)>
c001ab41:	83 c4 10             	add    esp,0x10
c001ab44:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ab4a:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ab50:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ab56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab5a:	89 d0                	mov    eax,edx
c001ab5c:	c1 e0 07             	shl    eax,0x7
c001ab5f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ab63:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ab6d:	51                   	push   ecx
c001ab6e:	8d 42 02             	lea    eax,[edx+0x2]
c001ab71:	51                   	push   ecx
c001ab72:	c1 e0 07             	shl    eax,0x7
c001ab75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ab79:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ab7d:	50                   	push   eax
c001ab7e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ab84:	e8 e7 ef ff ff       	call   c0019b70 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ab89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ab8d:	83 c4 10             	add    esp,0x10
c001ab90:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ab95:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ab99:	0f 84 4f 01 00 00    	je     c001acee <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ab9f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aba3:	c1 e0 09             	shl    eax,0x9
c001aba6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001abab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001abaf:	74 0e                	je     c001abbf <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001abb1:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001abb7:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001abbb:	89 c1                	mov    ecx,eax
c001abbd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001abbf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001abc3:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001abc9:	8d 42 02             	lea    eax,[edx+0x2]
c001abcc:	c1 e0 07             	shl    eax,0x7
c001abcf:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001abd3:	8b 00                	mov    eax,DWORD PTR [eax]
c001abd5:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001abdb:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001abe1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001abe5:	c1 e1 05             	shl    ecx,0x5
c001abe8:	01 c8                	add    eax,ecx
c001abea:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001abee:	83 e1 01             	and    ecx,0x1
c001abf1:	89 ce                	mov    esi,ecx
c001abf3:	8a 08                	mov    cl,BYTE PTR [eax]
c001abf5:	c1 e6 06             	shl    esi,0x6
c001abf8:	83 e1 bf             	and    ecx,0xffffffbf
c001abfb:	09 f1                	or     ecx,esi
c001abfd:	88 08                	mov    BYTE PTR [eax],cl
c001abff:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ac01:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ac07:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ac0d:	89 08                	mov    DWORD PTR [eax],ecx
c001ac0f:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac15:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ac1b:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ac21:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ac24:	50                   	push   eax
c001ac25:	68 90 00 00 00       	push   0x90
c001ac2a:	6a 00                	push   0x0
c001ac2c:	56                   	push   esi
c001ac2d:	e8 ae 58 fe ff       	call   c00004e0 <memset>
c001ac32:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ac38:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ac3c:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ac42:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ac46:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac4a:	83 c4 10             	add    esp,0x10
c001ac4d:	48                   	dec    eax
c001ac4e:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ac53:	89 c1                	mov    ecx,eax
c001ac55:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ac5b:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ac60:	09 c8                	or     eax,ecx
c001ac62:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ac68:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ac6b:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ac72:	66 25 00 7f          	and    ax,0x7f00
c001ac76:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ac7a:	66 0d 27 80          	or     ax,0x8027
c001ac7e:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ac83:	66 89 06             	mov    WORD PTR [esi],ax
c001ac86:	19 c0                	sbb    eax,eax
c001ac88:	83 e0 f0             	and    eax,0xfffffff0
c001ac8b:	83 c0 35             	add    eax,0x35
c001ac8e:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ac91:	89 e8                	mov    eax,ebp
c001ac93:	c1 e8 10             	shr    eax,0x10
c001ac96:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ac99:	89 e8                	mov    eax,ebp
c001ac9b:	c1 e8 18             	shr    eax,0x18
c001ac9e:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001aca1:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001aca5:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001aca8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001acac:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001acaf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001acb3:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001acb7:	89 d6                	mov    esi,edx
c001acb9:	31 c0                	xor    eax,eax
c001acbb:	c1 e6 07             	shl    esi,0x7
c001acbe:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001acc2:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001acc8:	80 e1 88             	and    cl,0x88
c001accb:	74 0a                	je     c001acd7 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001accd:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001acd2:	74 0a                	je     c001acde <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001acd4:	40                   	inc    eax
c001acd5:	eb eb                	jmp    c001acc2 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001acd7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001acdc:	75 17                	jne    c001acf5 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001acde:	83 ec 0c             	sub    esp,0xc
c001ace1:	68 41 f5 01 c0       	push   0xc001f541
c001ace6:	e8 fd f7 fe ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001aceb:	83 c4 10             	add    esp,0x10
c001acee:	b8 01 00 00 00       	mov    eax,0x1
c001acf3:	eb 5d                	jmp    c001ad52 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001acf5:	b8 01 00 00 00       	mov    eax,0x1
c001acfa:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001acfe:	c1 e2 07             	shl    edx,0x7
c001ad01:	d3 e0                	shl    eax,cl
c001ad03:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ad07:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001ad0d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001ad13:	85 c8                	test   eax,ecx
c001ad15:	74 16                	je     c001ad2d <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ad17:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001ad1d:	0f ba e1 1e          	bt     ecx,0x1e
c001ad21:	73 ea                	jae    c001ad0d <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001ad23:	83 ec 0c             	sub    esp,0xc
c001ad26:	68 4f f5 01 c0       	push   0xc001f54f
c001ad2b:	eb b9                	jmp    c001ace6 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ad2d:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ad33:	0f ba e0 1e          	bt     eax,0x1e
c001ad37:	72 b5                	jb     c001acee <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ad39:	31 c0                	xor    eax,eax
c001ad3b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ad40:	75 10                	jne    c001ad52 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ad42:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001ad48:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ad4c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad52:	83 c4 2c             	add    esp,0x2c
c001ad55:	5b                   	pop    ebx
c001ad56:	5e                   	pop    esi
c001ad57:	5f                   	pop    edi
c001ad58:	5d                   	pop    ebp
c001ad59:	c3                   	ret    

c001ad5a <SATA::read(unsigned long long, int, void*)>:
c001ad5a:	57                   	push   edi
c001ad5b:	b8 04 00 00 00       	mov    eax,0x4
c001ad60:	56                   	push   esi
c001ad61:	53                   	push   ebx
c001ad62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad66:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad6a:	8d 7a ff             	lea    edi,[edx-0x1]
c001ad6d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ad71:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ad75:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ad7b:	77 25                	ja     c001ada2 <SATA::read(unsigned long long, int, void*)+0x48>
c001ad7d:	b8 06 00 00 00       	mov    eax,0x6
c001ad82:	85 f6                	test   esi,esi
c001ad84:	74 1c                	je     c001ada2 <SATA::read(unsigned long long, int, void*)+0x48>
c001ad86:	50                   	push   eax
c001ad87:	50                   	push   eax
c001ad88:	6a 00                	push   0x0
c001ad8a:	56                   	push   esi
c001ad8b:	52                   	push   edx
c001ad8c:	53                   	push   ebx
c001ad8d:	51                   	push   ecx
c001ad8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad92:	e8 77 fd ff ff       	call   c001ab0e <SATA::access(unsigned long long, int, void*, bool)>
c001ad97:	83 c4 20             	add    esp,0x20
c001ad9a:	85 c0                	test   eax,eax
c001ad9c:	0f 95 c0             	setne  al
c001ad9f:	0f b6 c0             	movzx  eax,al
c001ada2:	5b                   	pop    ebx
c001ada3:	5e                   	pop    esi
c001ada4:	5f                   	pop    edi
c001ada5:	c3                   	ret    

c001ada6 <SATA::write(unsigned long long, int, void*)>:
c001ada6:	55                   	push   ebp
c001ada7:	b8 04 00 00 00       	mov    eax,0x4
c001adac:	57                   	push   edi
c001adad:	56                   	push   esi
c001adae:	53                   	push   ebx
c001adaf:	83 ec 0c             	sub    esp,0xc
c001adb2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001adb6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001adba:	8d 73 ff             	lea    esi,[ebx-0x1]
c001adbd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001adc1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001adc5:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001adcb:	77 3d                	ja     c001ae0a <SATA::write(unsigned long long, int, void*)+0x64>
c001adcd:	b8 06 00 00 00       	mov    eax,0x6
c001add2:	85 ed                	test   ebp,ebp
c001add4:	74 34                	je     c001ae0a <SATA::write(unsigned long long, int, void*)+0x64>
c001add6:	c1 e3 09             	shl    ebx,0x9
c001add9:	01 eb                	add    ebx,ebp
c001addb:	89 d6                	mov    esi,edx
c001addd:	89 cf                	mov    edi,ecx
c001addf:	83 c6 01             	add    esi,0x1
c001ade2:	83 d7 00             	adc    edi,0x0
c001ade5:	50                   	push   eax
c001ade6:	50                   	push   eax
c001ade7:	6a 01                	push   0x1
c001ade9:	55                   	push   ebp
c001adea:	81 c5 00 02 00 00    	add    ebp,0x200
c001adf0:	6a 01                	push   0x1
c001adf2:	51                   	push   ecx
c001adf3:	52                   	push   edx
c001adf4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001adf8:	e8 11 fd ff ff       	call   c001ab0e <SATA::access(unsigned long long, int, void*, bool)>
c001adfd:	83 c4 20             	add    esp,0x20
c001ae00:	89 f2                	mov    edx,esi
c001ae02:	89 f9                	mov    ecx,edi
c001ae04:	39 dd                	cmp    ebp,ebx
c001ae06:	75 d3                	jne    c001addb <SATA::write(unsigned long long, int, void*)+0x35>
c001ae08:	31 c0                	xor    eax,eax
c001ae0a:	83 c4 0c             	add    esp,0xc
c001ae0d:	5b                   	pop    ebx
c001ae0e:	5e                   	pop    esi
c001ae0f:	5f                   	pop    edi
c001ae10:	5d                   	pop    ebp
c001ae11:	c3                   	ret    

c001ae12 <SATAPI::write(unsigned long long, int, void*)>:
c001ae12:	b8 03 00 00 00       	mov    eax,0x3
c001ae17:	c3                   	ret    

c001ae18 <SATAPI::close(int, int, void*)>:
c001ae18:	83 ec 0c             	sub    esp,0xc
c001ae1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae1f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ae25:	85 c0                	test   eax,eax
c001ae27:	74 0c                	je     c001ae35 <SATAPI::close(int, int, void*)+0x1d>
c001ae29:	83 ec 0c             	sub    esp,0xc
c001ae2c:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae2e:	50                   	push   eax
c001ae2f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ae32:	83 c4 10             	add    esp,0x10
c001ae35:	31 c0                	xor    eax,eax
c001ae37:	83 c4 0c             	add    esp,0xc
c001ae3a:	c3                   	ret    
c001ae3b:	90                   	nop

c001ae3c <SATAPI::SATAPI()>:
c001ae3c:	83 ec 0c             	sub    esp,0xc
c001ae3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae43:	83 ec 04             	sub    esp,0x4
c001ae46:	68 00 08 00 00       	push   0x800
c001ae4b:	68 98 f5 01 c0       	push   0xc001f598
c001ae50:	50                   	push   eax
c001ae51:	e8 a0 0e ff ff       	call   c000bcf6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ae56:	83 c4 10             	add    esp,0x10
c001ae59:	ba a0 f6 01 c0       	mov    edx,0xc001f6a0
c001ae5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae62:	89 10                	mov    DWORD PTR [eax],edx
c001ae64:	90                   	nop
c001ae65:	83 c4 0c             	add    esp,0xc
c001ae68:	c3                   	ret    
c001ae69:	90                   	nop

c001ae6a <SATAPI::diskRemoved()>:
c001ae6a:	c3                   	ret    
c001ae6b:	90                   	nop

c001ae6c <SATAPI::diskInserted()>:
c001ae6c:	83 ec 18             	sub    esp,0x18
c001ae6f:	68 a4 f5 01 c0       	push   0xc001f5a4
c001ae74:	e8 6f f6 fe ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001ae79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae7d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ae84:	83 c4 1c             	add    esp,0x1c
c001ae87:	c3                   	ret    

c001ae88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ae88:	55                   	push   ebp
c001ae89:	57                   	push   edi
c001ae8a:	56                   	push   esi
c001ae8b:	53                   	push   ebx
c001ae8c:	83 ec 38             	sub    esp,0x38
c001ae8f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ae93:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001ae97:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ae9b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ae9f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001aea3:	68 bc f5 01 c0       	push   0xc001f5bc
c001aea8:	e8 3b f6 fe ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001aead:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001aeb3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aeb9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aebd:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001aec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aec7:	83 c0 02             	add    eax,0x2
c001aeca:	c1 e0 07             	shl    eax,0x7
c001aecd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aed1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aed5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aed9:	c1 e0 07             	shl    eax,0x7
c001aedc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aee0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aee4:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aeee:	58                   	pop    eax
c001aeef:	5a                   	pop    edx
c001aef0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001aef4:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aefa:	e8 71 ec ff ff       	call   c0019b70 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aeff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001af03:	83 c4 10             	add    esp,0x10
c001af06:	b8 01 00 00 00       	mov    eax,0x1
c001af0b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001af10:	0f 84 49 02 00 00    	je     c001b15f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001af16:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001af20:	8b 00                	mov    eax,DWORD PTR [eax]
c001af22:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001af28:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001af2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001af32:	c1 e1 05             	shl    ecx,0x5
c001af35:	01 c8                	add    eax,ecx
c001af37:	8b 08                	mov    ecx,DWORD PTR [eax]
c001af39:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001af3f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001af45:	89 08                	mov    DWORD PTR [eax],ecx
c001af47:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001af4d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001af53:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001af59:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001af5c:	8d 7b 40             	lea    edi,[ebx+0x40]
c001af5f:	50                   	push   eax
c001af60:	68 90 00 00 00       	push   0x90
c001af65:	6a 00                	push   0x0
c001af67:	53                   	push   ebx
c001af68:	e8 73 55 fe ff       	call   c00004e0 <memset>
c001af6d:	b9 0c 00 00 00       	mov    ecx,0xc
c001af72:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001af76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af78:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001af7e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001af82:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001af88:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001af8c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001af90:	48                   	dec    eax
c001af91:	25 ff ff 3f 00       	and    eax,0x3fffff
c001af96:	89 c1                	mov    ecx,eax
c001af98:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001af9e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001afa3:	09 c8                	or     eax,ecx
c001afa5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001afab:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001afae:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001afb5:	66 25 00 7f          	and    ax,0x7f00
c001afb9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001afbd:	66 0d 27 80          	or     ax,0x8027
c001afc1:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001afc5:	66 89 03             	mov    WORD PTR [ebx],ax
c001afc8:	89 d0                	mov    eax,edx
c001afca:	c1 ea 18             	shr    edx,0x18
c001afcd:	c1 e8 10             	shr    eax,0x10
c001afd0:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001afd3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001afd6:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001afda:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001afdd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001afe1:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001afe4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001afe8:	83 c4 10             	add    esp,0x10
c001afeb:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001afef:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aff3:	31 c0                	xor    eax,eax
c001aff5:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001affb:	80 e1 88             	and    cl,0x88
c001affe:	74 0a                	je     c001b00a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001b000:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b005:	74 0a                	je     c001b011 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001b007:	40                   	inc    eax
c001b008:	eb eb                	jmp    c001aff5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001b00a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b00f:	75 43                	jne    c001b054 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001b011:	83 ec 0c             	sub    esp,0xc
c001b014:	68 d6 f5 01 c0       	push   0xc001f5d6
c001b019:	e8 ca f4 fe ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001b01e:	58                   	pop    eax
c001b01f:	5a                   	pop    edx
c001b020:	68 eb f5 01 c0       	push   0xc001f5eb
c001b025:	ff 35 c4 0b 02 c0    	push   DWORD PTR ds:0xc0020bc4
c001b02b:	e8 16 d7 fe ff       	call   c0008746 <VgaText::puts(char const*)>
c001b030:	59                   	pop    ecx
c001b031:	5b                   	pop    ebx
c001b032:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b036:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b03c:	e8 c9 eb ff ff       	call   c0019c0a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b041:	5e                   	pop    esi
c001b042:	5f                   	pop    edi
c001b043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b047:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b04d:	e8 98 eb ff ff       	call   c0019bea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b052:	eb 48                	jmp    c001b09c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b054:	be 01 00 00 00       	mov    esi,0x1
c001b059:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b05d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b061:	d3 e6                	shl    esi,cl
c001b063:	c1 e7 07             	shl    edi,0x7
c001b066:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b06c:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b071:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b075:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b07b:	85 c6                	test   esi,eax
c001b07d:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b083:	0f 84 a3 00 00 00    	je     c001b12c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b089:	0f ba e0 1e          	bt     eax,0x1e
c001b08d:	73 1a                	jae    c001b0a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b08f:	83 ec 0c             	sub    esp,0xc
c001b092:	68 fd f5 01 c0       	push   0xc001f5fd
c001b097:	e8 4c f4 fe ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001b09c:	83 c4 10             	add    esp,0x10
c001b09f:	b8 01 00 00 00       	mov    eax,0x1
c001b0a4:	e9 b6 00 00 00       	jmp    c001b15f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b0a9:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b0af:	83 f8 0d             	cmp    eax,0xd
c001b0b2:	77 0a                	ja     c001b0be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b0b4:	83 ec 0c             	sub    esp,0xc
c001b0b7:	68 c8 00 00 00       	push   0xc8
c001b0bc:	eb 28                	jmp    c001b0e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b0be:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b0c4:	83 f8 0d             	cmp    eax,0xd
c001b0c7:	77 0a                	ja     c001b0d3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b0c9:	83 ec 0c             	sub    esp,0xc
c001b0cc:	68 58 02 00 00       	push   0x258
c001b0d1:	eb 13                	jmp    c001b0e6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b0d3:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b0d9:	83 f8 06             	cmp    eax,0x6
c001b0dc:	77 10                	ja     c001b0ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b0de:	83 ec 0c             	sub    esp,0xc
c001b0e1:	68 dc 05 00 00       	push   0x5dc
c001b0e6:	e8 d1 89 ff ff       	call   c0013abc <milliTenthSleep(unsigned int)>
c001b0eb:	83 c4 10             	add    esp,0x10
c001b0ee:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b0f2:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b0f5:	75 06                	jne    c001b0fd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b0f7:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b0fb:	74 15                	je     c001b112 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b0fd:	83 fb 06             	cmp    ebx,0x6
c001b100:	77 10                	ja     c001b112 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b102:	83 ec 0c             	sub    esp,0xc
c001b105:	68 c4 09 00 00       	push   0x9c4
c001b10a:	e8 ad 89 ff ff       	call   c0013abc <milliTenthSleep(unsigned int)>
c001b10f:	83 c4 10             	add    esp,0x10
c001b112:	43                   	inc    ebx
c001b113:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b119:	0f 85 56 ff ff ff    	jne    c001b075 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b11f:	83 ec 0c             	sub    esp,0xc
c001b122:	68 10 f6 01 c0       	push   0xc001f610
c001b127:	e9 6b ff ff ff       	jmp    c001b097 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b12c:	0f ba e0 1e          	bt     eax,0x1e
c001b130:	73 0d                	jae    c001b13f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b132:	83 ec 0c             	sub    esp,0xc
c001b135:	68 24 f6 01 c0       	push   0xc001f624
c001b13a:	e9 58 ff ff ff       	jmp    c001b097 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b13f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b144:	74 17                	je     c001b15d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b146:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b14b:	74 10                	je     c001b15d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b14d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b153:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b157:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b15b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b15d:	31 c0                	xor    eax,eax
c001b15f:	83 c4 2c             	add    esp,0x2c
c001b162:	5b                   	pop    ebx
c001b163:	5e                   	pop    esi
c001b164:	5f                   	pop    edi
c001b165:	5d                   	pop    ebp
c001b166:	c3                   	ret    
c001b167:	90                   	nop

c001b168 <SATAPI::eject()>:
c001b168:	57                   	push   edi
c001b169:	b9 03 00 00 00       	mov    ecx,0x3
c001b16e:	83 ec 18             	sub    esp,0x18
c001b171:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b175:	fc                   	cld    
c001b176:	31 c0                	xor    eax,eax
c001b178:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b17a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b17f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b184:	50                   	push   eax
c001b185:	6a 00                	push   0x0
c001b187:	6a 00                	push   0x0
c001b189:	6a 00                	push   0x0
c001b18b:	6a 00                	push   0x0
c001b18d:	6a 02                	push   0x2
c001b18f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b193:	50                   	push   eax
c001b194:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b198:	e8 eb fc ff ff       	call   c001ae88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b19d:	31 c0                	xor    eax,eax
c001b19f:	83 c4 38             	add    esp,0x38
c001b1a2:	5f                   	pop    edi
c001b1a3:	c3                   	ret    

c001b1a4 <SATAPI::detectMedia()>:
c001b1a4:	53                   	push   ebx
c001b1a5:	83 ec 14             	sub    esp,0x14
c001b1a8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b1ac:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b1b2:	e8 25 23 ff ff       	call   c000d4dc <VCache::writeWriteBuffer()>
c001b1b7:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b1bd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b1c1:	83 c4 18             	add    esp,0x18
c001b1c4:	5b                   	pop    ebx
c001b1c5:	e9 02 23 ff ff       	jmp    c000d4cc <VCache::invalidateReadBuffer()>

c001b1ca <SATAPI::open(int, int, void*)>:
c001b1ca:	56                   	push   esi
c001b1cb:	53                   	push   ebx
c001b1cc:	51                   	push   ecx
c001b1cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b1d5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b1df:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b1e5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b1ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1f3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b1fd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b203:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b20a:	e8 96 c8 fe ff       	call   c0007aa5 <Phys::allocatePage()>
c001b20f:	89 c6                	mov    esi,eax
c001b211:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b217:	81 c6 00 10 00 00    	add    esi,0x1000
c001b21d:	e8 83 c8 fe ff       	call   c0007aa5 <Phys::allocatePage()>
c001b222:	39 c6                	cmp    esi,eax
c001b224:	74 10                	je     c001b236 <SATAPI::open(int, int, void*)+0x6c>
c001b226:	83 ec 0c             	sub    esp,0xc
c001b229:	68 39 f6 01 c0       	push   0xc001f639
c001b22e:	e8 38 4f ff ff       	call   c001016b <KePanic(char const*)>
c001b233:	83 c4 10             	add    esp,0x10
c001b236:	83 ec 0c             	sub    esp,0xc
c001b239:	6a 02                	push   0x2
c001b23b:	e8 55 e0 fe ff       	call   c0009295 <Virt::allocateKernelVirtualPages(int)>
c001b240:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b246:	6a 03                	push   0x3
c001b248:	50                   	push   eax
c001b249:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b24f:	ff 35 70 0c 02 c0    	push   DWORD PTR ds:0xc0020c70
c001b255:	e8 d0 e6 fe ff       	call   c000992a <VAS::mapPage(unsigned long, unsigned long, int)>
c001b25a:	83 c4 14             	add    esp,0x14
c001b25d:	68 74 01 00 00       	push   0x174
c001b262:	e8 62 c5 fe ff       	call   c00077c9 <malloc>
c001b267:	83 c4 0c             	add    esp,0xc
c001b26a:	89 c6                	mov    esi,eax
c001b26c:	6a 00                	push   0x0
c001b26e:	68 ff ff ff 7f       	push   0x7fffffff
c001b273:	6a 00                	push   0x0
c001b275:	6a 00                	push   0x0
c001b277:	53                   	push   ebx
c001b278:	68 4f f6 01 c0       	push   0xc001f64f
c001b27d:	50                   	push   eax
c001b27e:	e8 5f 17 ff ff       	call   c000c9e2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b283:	83 c4 14             	add    esp,0x14
c001b286:	56                   	push   esi
c001b287:	e8 0c 18 ff ff       	call   c000ca98 <LogicalDisk::assignDriveLetter()>
c001b28c:	5a                   	pop    edx
c001b28d:	0f be c0             	movsx  eax,al
c001b290:	59                   	pop    ecx
c001b291:	50                   	push   eax
c001b292:	68 9c f4 01 c0       	push   0xc001f49c
c001b297:	e8 4c f2 fe ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001b29c:	58                   	pop    eax
c001b29d:	5a                   	pop    edx
c001b29e:	56                   	push   esi
c001b29f:	53                   	push   ebx
c001b2a0:	e8 83 06 ff ff       	call   c000b928 <Device::addChild(Device*)>
c001b2a5:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b2ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2ae:	e8 ab 0a ff ff       	call   c000bd5e <PhysicalDisk::startCache()>
c001b2b3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b2ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2bd:	e8 e2 fe ff ff       	call   c001b1a4 <SATAPI::detectMedia()>
c001b2c2:	83 c4 14             	add    esp,0x14
c001b2c5:	31 c0                	xor    eax,eax
c001b2c7:	5b                   	pop    ebx
c001b2c8:	5e                   	pop    esi
c001b2c9:	c3                   	ret    

c001b2ca <SATAPI::read(unsigned long long, int, void*)>:
c001b2ca:	57                   	push   edi
c001b2cb:	56                   	push   esi
c001b2cc:	53                   	push   ebx
c001b2cd:	83 ec 3c             	sub    esp,0x3c
c001b2d0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b2d4:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b2d8:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b2dc:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b2e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b2e4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b2e8:	68 5d f6 01 c0       	push   0xc001f65d
c001b2ed:	e8 f6 f1 fe ff       	call   c000a4e8 <Dbg::kprintf(char const*, ...)>
c001b2f2:	83 c4 10             	add    esp,0x10
c001b2f5:	83 fe 04             	cmp    esi,0x4
c001b2f8:	7e 10                	jle    c001b30a <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b2fa:	83 ec 0c             	sub    esp,0xc
c001b2fd:	68 6e f6 01 c0       	push   0xc001f66e
c001b302:	e8 64 4e ff ff       	call   c001016b <KePanic(char const*)>
c001b307:	83 c4 10             	add    esp,0x10
c001b30a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b310:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b316:	51                   	push   ecx
c001b317:	50                   	push   eax
c001b318:	83 c0 02             	add    eax,0x2
c001b31b:	c1 e0 07             	shl    eax,0x7
c001b31e:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b324:	50                   	push   eax
c001b325:	52                   	push   edx
c001b326:	e8 09 e9 ff ff       	call   c0019c34 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b32b:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b32f:	b9 03 00 00 00       	mov    ecx,0x3
c001b334:	fc                   	cld    
c001b335:	31 c0                	xor    eax,eax
c001b337:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b339:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b33e:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b343:	83 c4 0c             	add    esp,0xc
c001b346:	6a 00                	push   0x0
c001b348:	6a 00                	push   0x0
c001b34a:	6a 00                	push   0x0
c001b34c:	6a 00                	push   0x0
c001b34e:	6a 02                	push   0x2
c001b350:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b354:	50                   	push   eax
c001b355:	53                   	push   ebx
c001b356:	e8 2d fb ff ff       	call   c001ae88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b35b:	83 c4 20             	add    esp,0x20
c001b35e:	85 c0                	test   eax,eax
c001b360:	75 44                	jne    c001b3a6 <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b362:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b366:	b9 03 00 00 00       	mov    ecx,0x3
c001b36b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b36d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b371:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b376:	0f c8                	bswap  eax
c001b378:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b37c:	89 f0                	mov    eax,esi
c001b37e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b382:	50                   	push   eax
c001b383:	56                   	push   esi
c001b384:	c1 e6 0b             	shl    esi,0xb
c001b387:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b38b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b38f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b393:	56                   	push   esi
c001b394:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b398:	50                   	push   eax
c001b399:	53                   	push   ebx
c001b39a:	e8 e9 fa ff ff       	call   c001ae88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b39f:	83 c4 20             	add    esp,0x20
c001b3a2:	85 c0                	test   eax,eax
c001b3a4:	74 14                	je     c001b3ba <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b3aa:	83 ec 0c             	sub    esp,0xc
c001b3ad:	53                   	push   ebx
c001b3ae:	e8 f1 fd ff ff       	call   c001b1a4 <SATAPI::detectMedia()>
c001b3b3:	83 c4 10             	add    esp,0x10
c001b3b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b3ba:	83 c4 30             	add    esp,0x30
c001b3bd:	5b                   	pop    ebx
c001b3be:	5e                   	pop    esi
c001b3bf:	5f                   	pop    edi
c001b3c0:	c3                   	ret    
c001b3c1:	90                   	nop

c001b3c2 <IOAPIC::close(int, int, void*)>:
c001b3c2:	b8 00 00 00 00       	mov    eax,0x0
c001b3c7:	c3                   	ret    

c001b3c8 <apicGetBase()>:
c001b3c8:	55                   	push   ebp
c001b3c9:	89 e5                	mov    ebp,esp
c001b3cb:	83 ec 18             	sub    esp,0x18
c001b3ce:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c001b3d3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b3d9:	83 e0 08             	and    eax,0x8
c001b3dc:	84 c0                	test   al,al
c001b3de:	75 07                	jne    c001b3e7 <apicGetBase()+0x1f>
c001b3e0:	b8 00 00 00 00       	mov    eax,0x0
c001b3e5:	eb 21                	jmp    c001b408 <apicGetBase()+0x40>
c001b3e7:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c001b3ec:	83 ec 08             	sub    esp,0x8
c001b3ef:	6a 1b                	push   0x1b
c001b3f1:	50                   	push   eax
c001b3f2:	e8 0b ba fe ff       	call   c0006e02 <Computer::rdmsr(unsigned int)>
c001b3f7:	83 c4 10             	add    esp,0x10
c001b3fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b3fd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b400:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b403:	25 00 00 ff ff       	and    eax,0xffff0000
c001b408:	c9                   	leave  
c001b409:	c3                   	ret    

c001b40a <IOAPIC::IOAPIC()>:
c001b40a:	83 ec 0c             	sub    esp,0xc
c001b40d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b411:	83 ec 08             	sub    esp,0x8
c001b414:	68 d0 f6 01 c0       	push   0xc001f6d0
c001b419:	50                   	push   eax
c001b41a:	e8 a1 06 ff ff       	call   c000bac0 <Device::Device(char const*)>
c001b41f:	83 c4 10             	add    esp,0x10
c001b422:	ba e0 f6 01 c0       	mov    edx,0xc001f6e0
c001b427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b42b:	89 10                	mov    DWORD PTR [eax],edx
c001b42d:	90                   	nop
c001b42e:	83 c4 0c             	add    esp,0xc
c001b431:	c3                   	ret    

c001b432 <apicOpen()>:
c001b432:	55                   	push   ebp
c001b433:	89 e5                	mov    ebp,esp
c001b435:	53                   	push   ebx
c001b436:	83 ec 34             	sub    esp,0x34
c001b439:	a0 60 48 02 c0       	mov    al,ds:0xc0024860
c001b43e:	83 f0 01             	xor    eax,0x1
c001b441:	84 c0                	test   al,al
c001b443:	0f 84 9d 00 00 00    	je     c001b4e6 <apicOpen()+0xb4>
c001b449:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b44d:	a0 40 34 02 c0       	mov    al,ds:0xc0023440
c001b452:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b455:	0f 83 84 00 00 00    	jae    c001b4df <apicOpen()+0xad>
c001b45b:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b462:	83 ec 0c             	sub    esp,0xc
c001b465:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b468:	e8 5c c3 fe ff       	call   c00077c9 <malloc>
c001b46d:	83 c4 10             	add    esp,0x10
c001b470:	89 c3                	mov    ebx,eax
c001b472:	83 ec 0c             	sub    esp,0xc
c001b475:	53                   	push   ebx
c001b476:	e8 8f ff ff ff       	call   c001b40a <IOAPIC::IOAPIC()>
c001b47b:	83 c4 10             	add    esp,0x10
c001b47e:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b481:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b484:	25 ff 00 00 00       	and    eax,0xff
c001b489:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b48c:	89 14 85 40 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7c0],edx
c001b493:	a1 20 48 02 c0       	mov    eax,ds:0xc0024820
c001b498:	40                   	inc    eax
c001b499:	a3 20 48 02 c0       	mov    ds:0xc0024820,eax
c001b49e:	a1 78 0b 02 c0       	mov    eax,ds:0xc0020b78
c001b4a3:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b4a9:	83 ec 08             	sub    esp,0x8
c001b4ac:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b4af:	50                   	push   eax
c001b4b0:	e8 73 04 ff ff       	call   c000b928 <Device::addChild(Device*)>
c001b4b5:	83 c4 10             	add    esp,0x10
c001b4b8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b4bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4bd:	83 c0 08             	add    eax,0x8
c001b4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c001b4c2:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b4c5:	25 ff 00 00 00       	and    eax,0xff
c001b4ca:	6a 00                	push   0x0
c001b4cc:	6a 00                	push   0x0
c001b4ce:	50                   	push   eax
c001b4cf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b4d2:	ff d2                	call   edx
c001b4d4:	83 c4 10             	add    esp,0x10
c001b4d7:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b4da:	e9 6e ff ff ff       	jmp    c001b44d <apicOpen()+0x1b>
c001b4df:	c6 05 60 48 02 c0 01 	mov    BYTE PTR ds:0xc0024860,0x1
c001b4e6:	e8 dd fe ff ff       	call   c001b3c8 <apicGetBase()>
c001b4eb:	05 f0 00 00 00       	add    eax,0xf0
c001b4f0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b4f3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b4f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4f8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b4fb:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b502:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b509:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b50c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b50f:	89 10                	mov    DWORD PTR [eax],edx
c001b511:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b518:	a1 90 33 02 c0       	mov    eax,ds:0xc0023390
c001b51d:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b520:	7d 70                	jge    c001b592 <apicOpen()+0x160>
c001b522:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b525:	8b 04 85 a0 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcc60]
c001b52c:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b52f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b532:	8b 04 85 a0 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcc60]
c001b539:	c1 e8 08             	shr    eax,0x8
c001b53c:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b540:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b543:	8b 04 85 a0 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcc60]
c001b54a:	c1 e8 18             	shr    eax,0x18
c001b54d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b550:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b554:	75 37                	jne    c001b58d <apicOpen()+0x15b>
c001b556:	e8 6d fe ff ff       	call   c001b3c8 <apicGetBase()>
c001b55b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b55f:	75 07                	jne    c001b568 <apicOpen()+0x136>
c001b561:	ba 60 03 00 00       	mov    edx,0x360
c001b566:	eb 05                	jmp    c001b56d <apicOpen()+0x13b>
c001b568:	ba 50 03 00 00       	mov    edx,0x350
c001b56d:	01 d0                	add    eax,edx
c001b56f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b572:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b575:	8b 00                	mov    eax,DWORD PTR [eax]
c001b577:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b57a:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b581:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b585:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b588:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b58b:	89 10                	mov    DWORD PTR [eax],edx
c001b58d:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b590:	eb 86                	jmp    c001b518 <apicOpen()+0xe6>
c001b592:	90                   	nop
c001b593:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b596:	c9                   	leave  
c001b597:	c3                   	ret    

c001b598 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b598:	55                   	push   ebp
c001b599:	89 e5                	mov    ebp,esp
c001b59b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b59e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b5a4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b5a7:	72 1d                	jb     c001b5c6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b5a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5ac:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b5b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5b5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b5bb:	01 d0                	add    eax,edx
c001b5bd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b5c0:	73 04                	jae    c001b5c6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b5c2:	b0 01                	mov    al,0x1
c001b5c4:	eb 02                	jmp    c001b5c8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b5c6:	b0 00                	mov    al,0x0
c001b5c8:	5d                   	pop    ebp
c001b5c9:	c3                   	ret    

c001b5ca <IOAPIC::read(int)>:
c001b5ca:	55                   	push   ebp
c001b5cb:	89 e5                	mov    ebp,esp
c001b5cd:	83 ec 10             	sub    esp,0x10
c001b5d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5d3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b5d9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b5dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b5df:	31 d2                	xor    edx,edx
c001b5e1:	88 c2                	mov    dl,al
c001b5e3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b5e6:	89 10                	mov    DWORD PTR [eax],edx
c001b5e8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b5eb:	83 c0 10             	add    eax,0x10
c001b5ee:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5f0:	c9                   	leave  
c001b5f1:	c3                   	ret    

c001b5f2 <IOAPIC::open(int, int, void*)>:
c001b5f2:	55                   	push   ebp
c001b5f3:	89 e5                	mov    ebp,esp
c001b5f5:	57                   	push   edi
c001b5f6:	56                   	push   esi
c001b5f7:	53                   	push   ebx
c001b5f8:	83 ec 04             	sub    esp,0x4
c001b5fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b5fe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b601:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b60a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b610:	8b 14 85 80 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb80]
c001b617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b61a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b620:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b623:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b629:	8b 14 85 00 35 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb00]
c001b630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b633:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b63c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b645:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b64b:	89 c6                	mov    esi,eax
c001b64d:	81 e6 ff 00 00 00    	and    esi,0xff
c001b653:	89 d0                	mov    eax,edx
c001b655:	ba 00 00 00 00       	mov    edx,0x0
c001b65a:	89 c7                	mov    edi,eax
c001b65c:	83 e7 ff             	and    edi,0xffffffff
c001b65f:	89 f9                	mov    ecx,edi
c001b661:	89 d0                	mov    eax,edx
c001b663:	25 ff 00 00 00       	and    eax,0xff
c001b668:	89 c3                	mov    ebx,eax
c001b66a:	89 c8                	mov    eax,ecx
c001b66c:	89 da                	mov    edx,ebx
c001b66e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b671:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b674:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b678:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b67c:	83 e0 00             	and    eax,0x0
c001b67f:	09 d0                	or     eax,edx
c001b681:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b685:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b688:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b68e:	8d 50 01             	lea    edx,[eax+0x1]
c001b691:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b694:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b69a:	31 d2                	xor    edx,edx
c001b69c:	88 c2                	mov    dl,al
c001b69e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6a1:	83 c2 08             	add    edx,0x8
c001b6a4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b6a8:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b6ae:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b6b4:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b6b8:	6a 01                	push   0x1
c001b6ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b6bd:	e8 08 ff ff ff       	call   c001b5ca <IOAPIC::read(int)>
c001b6c2:	83 c4 08             	add    esp,0x8
c001b6c5:	c1 f8 10             	sar    eax,0x10
c001b6c8:	25 ff 00 00 00       	and    eax,0xff
c001b6cd:	8d 50 01             	lea    edx,[eax+0x1]
c001b6d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6d3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b6d9:	b8 00 00 00 00       	mov    eax,0x0
c001b6de:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b6e1:	5b                   	pop    ebx
c001b6e2:	5e                   	pop    esi
c001b6e3:	5f                   	pop    edi
c001b6e4:	5d                   	pop    ebp
c001b6e5:	c3                   	ret    

c001b6e6 <IOAPIC::write(int, int)>:
c001b6e6:	55                   	push   ebp
c001b6e7:	89 e5                	mov    ebp,esp
c001b6e9:	83 ec 10             	sub    esp,0x10
c001b6ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6ef:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b6f5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b6f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b6fb:	31 d2                	xor    edx,edx
c001b6fd:	88 c2                	mov    dl,al
c001b6ff:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b702:	89 10                	mov    DWORD PTR [eax],edx
c001b704:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b707:	8d 50 10             	lea    edx,[eax+0x10]
c001b70a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b70d:	89 02                	mov    DWORD PTR [edx],eax
c001b70f:	90                   	nop
c001b710:	c9                   	leave  
c001b711:	c3                   	ret    

c001b712 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b712:	55                   	push   ebp
c001b713:	89 e5                	mov    ebp,esp
c001b715:	53                   	push   ebx
c001b716:	83 ec 2c             	sub    esp,0x2c
c001b719:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b71c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b71f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b722:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b725:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b728:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b72b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b72e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b731:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b734:	88 d8                	mov    al,bl
c001b736:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b739:	88 c8                	mov    al,cl
c001b73b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b73e:	88 d0                	mov    al,dl
c001b740:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b743:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b746:	25 ff 00 00 00       	and    eax,0xff
c001b74b:	83 c0 08             	add    eax,0x8
c001b74e:	01 c0                	add    eax,eax
c001b750:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b753:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b756:	25 ff 00 00 00       	and    eax,0xff
c001b75b:	83 c0 08             	add    eax,0x8
c001b75e:	01 c0                	add    eax,eax
c001b760:	40                   	inc    eax
c001b761:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b764:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b767:	50                   	push   eax
c001b768:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b76b:	e8 5a fe ff ff       	call   c001b5ca <IOAPIC::read(int)>
c001b770:	83 c4 08             	add    esp,0x8
c001b773:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b776:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b77d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b780:	c1 e0 18             	shl    eax,0x18
c001b783:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b786:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b789:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b78c:	52                   	push   edx
c001b78d:	50                   	push   eax
c001b78e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b791:	e8 50 ff ff ff       	call   c001b6e6 <IOAPIC::write(int, int)>
c001b796:	83 c4 0c             	add    esp,0xc
c001b799:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b79c:	50                   	push   eax
c001b79d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b7a0:	e8 25 fe ff ff       	call   c001b5ca <IOAPIC::read(int)>
c001b7a5:	83 c4 08             	add    esp,0x8
c001b7a8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b7ab:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b7b2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b7b9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b7c0:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b7c4:	74 09                	je     c001b7cf <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b7c6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b7cd:	eb 07                	jmp    c001b7d6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b7cf:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b7d6:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b7da:	74 09                	je     c001b7e5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b7dc:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b7e3:	eb 07                	jmp    c001b7ec <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b7e5:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b7ec:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b7f3:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b7f6:	25 ff 00 00 00       	and    eax,0xff
c001b7fb:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b7fe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b801:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b804:	52                   	push   edx
c001b805:	50                   	push   eax
c001b806:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b809:	e8 d8 fe ff ff       	call   c001b6e6 <IOAPIC::write(int, int)>
c001b80e:	83 c4 0c             	add    esp,0xc
c001b811:	90                   	nop
c001b812:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b815:	c9                   	leave  
c001b816:	c3                   	ret    
c001b817:	90                   	nop

c001b818 <APICTimer::close(int, int, void*)>:
c001b818:	b8 00 00 00 00       	mov    eax,0x0
c001b81d:	c3                   	ret    
c001b81e:	66 90                	xchg   ax,ax

c001b820 <apicTimerHandler(regs*, void*)>:
c001b820:	83 ec 0c             	sub    esp,0xc
c001b823:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b827:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b829:	b8 10 27 00 00       	mov    eax,0x2710
c001b82e:	ba 00 00 00 00       	mov    edx,0x0
c001b833:	f7 f1                	div    ecx
c001b835:	83 ec 0c             	sub    esp,0xc
c001b838:	50                   	push   eax
c001b839:	e8 be 19 ff ff       	call   c000d1fc <timerHandler(unsigned int)>
c001b83e:	83 c4 10             	add    esp,0x10
c001b841:	90                   	nop
c001b842:	83 c4 0c             	add    esp,0xc
c001b845:	c3                   	ret    
c001b846:	66 90                	xchg   ax,ax

c001b848 <APICTimer::open(int, int, void*)>:
c001b848:	83 ec 0c             	sub    esp,0xc
c001b84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b84f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b851:	83 c0 24             	add    eax,0x24
c001b854:	8b 00                	mov    eax,DWORD PTR [eax]
c001b856:	83 ec 08             	sub    esp,0x8
c001b859:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b85d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b861:	ff d0                	call   eax
c001b863:	83 c4 10             	add    esp,0x10
c001b866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b86a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b86e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b878:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b87c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b882:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b886:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b88c:	83 ec 0c             	sub    esp,0xc
c001b88f:	51                   	push   ecx
c001b890:	6a 01                	push   0x1
c001b892:	68 20 b8 01 c0       	push   0xc001b820
c001b897:	52                   	push   edx
c001b898:	50                   	push   eax
c001b899:	e8 36 00 ff ff       	call   c000b8d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b89e:	83 c4 20             	add    esp,0x20
c001b8a1:	89 c2                	mov    edx,eax
c001b8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b8ad:	b8 00 00 00 00       	mov    eax,0x0
c001b8b2:	83 c4 0c             	add    esp,0xc
c001b8b5:	c3                   	ret    
c001b8b6:	66 90                	xchg   ax,ax

c001b8b8 <APICTimer::write(int)>:
c001b8b8:	83 ec 0c             	sub    esp,0xc
c001b8bb:	83 ec 0c             	sub    esp,0xc
c001b8be:	68 04 f7 01 c0       	push   0xc001f704
c001b8c3:	e8 a3 48 ff ff       	call   c001016b <KePanic(char const*)>
c001b8c8:	83 c4 10             	add    esp,0x10
c001b8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8cf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b8d3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b8d9:	90                   	nop
c001b8da:	83 c4 0c             	add    esp,0xc
c001b8dd:	c3                   	ret    
c001b8de:	66 90                	xchg   ax,ax

c001b8e0 <APICTimer::APICTimer()>:
c001b8e0:	83 ec 0c             	sub    esp,0xc
c001b8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e7:	83 ec 08             	sub    esp,0x8
c001b8ea:	68 14 f7 01 c0       	push   0xc001f714
c001b8ef:	50                   	push   eax
c001b8f0:	e8 3b 18 ff ff       	call   c000d130 <Timer::Timer(char const*)>
c001b8f5:	83 c4 10             	add    esp,0x10
c001b8f8:	ba 28 f7 01 c0       	mov    edx,0xc001f728
c001b8fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b901:	89 10                	mov    DWORD PTR [eax],edx
c001b903:	90                   	nop
c001b904:	83 c4 0c             	add    esp,0xc
c001b907:	c3                   	ret    

c001b908 <PIT::write(int)>:
c001b908:	83 ec 10             	sub    esp,0x10
c001b90b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b90f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b913:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b919:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b91d:	a3 64 48 02 c0       	mov    ds:0xc0024864,eax
c001b922:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b927:	99                   	cdq    
c001b928:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b92c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b930:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b937:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b93c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b940:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b945:	ee                   	out    dx,al
c001b946:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b94a:	25 ff 00 00 00       	and    eax,0xff
c001b94f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b956:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b95a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b95e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b963:	ee                   	out    dx,al
c001b964:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b968:	c1 f8 08             	sar    eax,0x8
c001b96b:	25 ff 00 00 00       	and    eax,0xff
c001b970:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b977:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b97b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b97f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b984:	ee                   	out    dx,al
c001b985:	90                   	nop
c001b986:	83 c4 10             	add    esp,0x10
c001b989:	c3                   	ret    
c001b98a:	66 90                	xchg   ax,ax

c001b98c <pitHandler(regs*, void*)>:
c001b98c:	83 ec 0c             	sub    esp,0xc
c001b98f:	8b 0d 64 48 02 c0    	mov    ecx,DWORD PTR ds:0xc0024864
c001b995:	b8 10 27 00 00       	mov    eax,0x2710
c001b99a:	99                   	cdq    
c001b99b:	f7 f9                	idiv   ecx
c001b99d:	83 ec 0c             	sub    esp,0xc
c001b9a0:	50                   	push   eax
c001b9a1:	e8 56 18 ff ff       	call   c000d1fc <timerHandler(unsigned int)>
c001b9a6:	83 c4 10             	add    esp,0x10
c001b9a9:	90                   	nop
c001b9aa:	83 c4 0c             	add    esp,0xc
c001b9ad:	c3                   	ret    
c001b9ae:	66 90                	xchg   ax,ax

c001b9b0 <PIT::open(int, int, void*)>:
c001b9b0:	83 ec 0c             	sub    esp,0xc
c001b9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9b9:	83 c0 24             	add    eax,0x24
c001b9bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9be:	83 ec 08             	sub    esp,0x8
c001b9c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9c9:	ff d0                	call   eax
c001b9cb:	83 c4 10             	add    esp,0x10
c001b9ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d2:	83 ec 0c             	sub    esp,0xc
c001b9d5:	6a 00                	push   0x0
c001b9d7:	6a 01                	push   0x1
c001b9d9:	68 8c b9 01 c0       	push   0xc001b98c
c001b9de:	6a 00                	push   0x0
c001b9e0:	50                   	push   eax
c001b9e1:	e8 ee fe fe ff       	call   c000b8d4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b9e6:	83 c4 20             	add    esp,0x20
c001b9e9:	89 c2                	mov    edx,eax
c001b9eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9ef:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b9f5:	b8 00 00 00 00       	mov    eax,0x0
c001b9fa:	83 c4 0c             	add    esp,0xc
c001b9fd:	c3                   	ret    
c001b9fe:	66 90                	xchg   ax,ax

c001ba00 <PIT::close(int, int, void*)>:
c001ba00:	83 ec 0c             	sub    esp,0xc
c001ba03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba07:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ba11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba15:	6a 01                	push   0x1
c001ba17:	68 8c b9 01 c0       	push   0xc001b98c
c001ba1c:	6a 00                	push   0x0
c001ba1e:	50                   	push   eax
c001ba1f:	e8 e6 fe fe ff       	call   c000b90a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ba24:	83 c4 10             	add    esp,0x10
c001ba27:	b8 00 00 00 00       	mov    eax,0x0
c001ba2c:	83 c4 0c             	add    esp,0xc
c001ba2f:	c3                   	ret    

c001ba30 <PIT::PIT()>:
c001ba30:	83 ec 0c             	sub    esp,0xc
c001ba33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba37:	83 ec 08             	sub    esp,0x8
c001ba3a:	68 50 f7 01 c0       	push   0xc001f750
c001ba3f:	50                   	push   eax
c001ba40:	e8 eb 16 ff ff       	call   c000d130 <Timer::Timer(char const*)>
c001ba45:	83 c4 10             	add    esp,0x10
c001ba48:	ba 78 f7 01 c0       	mov    edx,0xc001f778
c001ba4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba51:	89 10                	mov    DWORD PTR [eax],edx
c001ba53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba57:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba5d:	31 d2                	xor    edx,edx
c001ba5f:	88 c2                	mov    dl,al
c001ba61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba65:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ba6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba70:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba76:	31 d2                	xor    edx,edx
c001ba78:	88 c2                	mov    dl,al
c001ba7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba7e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ba83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba87:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ba8d:	8d 50 01             	lea    edx,[eax+0x1]
c001ba90:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba94:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ba9a:	31 d2                	xor    edx,edx
c001ba9c:	88 c2                	mov    dl,al
c001ba9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001baa2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001baa6:	83 e1 3f             	and    ecx,0x3f
c001baa9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001baad:	90                   	nop
c001baae:	83 c4 0c             	add    esp,0xc
c001bab1:	c3                   	ret    
c001bab2:	66 90                	xchg   ax,ax
c001bab4:	66 90                	xchg   ax,ax
c001bab6:	66 90                	xchg   ax,ax
c001bab8:	66 90                	xchg   ax,ax
c001baba:	66 90                	xchg   ax,ax
c001babc:	66 90                	xchg   ax,ax
c001babe:	66 90                	xchg   ax,ax

c001bac0 <avxDetect>:
c001bac0:	b8 01 00 00 00       	mov    eax,0x1
c001bac5:	0f a2                	cpuid  
c001bac7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bacd:	74 15                	je     c001bae4 <avxDetect.noAVX>
c001bacf:	b8 01 00 00 00       	mov    eax,0x1
c001bad4:	0f a2                	cpuid  
c001bad6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001badc:	74 06                	je     c001bae4 <avxDetect.noAVX>
c001bade:	b8 01 00 00 00       	mov    eax,0x1
c001bae3:	c3                   	ret    

c001bae4 <avxDetect.noAVX>:
c001bae4:	b8 00 00 00 00       	mov    eax,0x0
c001bae9:	c3                   	ret    

c001baea <avxSave>:
c001baea:	53                   	push   ebx
c001baeb:	52                   	push   edx
c001baec:	31 c0                	xor    eax,eax
c001baee:	48                   	dec    eax
c001baef:	89 c2                	mov    edx,eax
c001baf1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001baf5:	0f ae 23             	xsave  [ebx]
c001baf8:	5a                   	pop    edx
c001baf9:	5b                   	pop    ebx
c001bafa:	c3                   	ret    

c001bafb <avxLoad>:
c001bafb:	53                   	push   ebx
c001bafc:	52                   	push   edx
c001bafd:	31 c0                	xor    eax,eax
c001baff:	48                   	dec    eax
c001bb00:	89 c2                	mov    edx,eax
c001bb02:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb06:	0f ae 2b             	xrstor [ebx]
c001bb09:	5a                   	pop    edx
c001bb0a:	5b                   	pop    ebx
c001bb0b:	c3                   	ret    

c001bb0c <avxInit>:
c001bb0c:	e8 57 02 00 00       	call   c001bd68 <sseInit>
c001bb11:	50                   	push   eax
c001bb12:	51                   	push   ecx
c001bb13:	0f 20 e0             	mov    eax,cr4
c001bb16:	0d 00 00 04 00       	or     eax,0x40000
c001bb1b:	0f 22 e0             	mov    cr4,eax
c001bb1e:	31 c9                	xor    ecx,ecx
c001bb20:	0f 01 d0             	xgetbv 
c001bb23:	0d 07 00 00 00       	or     eax,0x7
c001bb28:	0f 01 d1             	xsetbv 
c001bb2b:	59                   	pop    ecx
c001bb2c:	58                   	pop    eax
c001bb2d:	c3                   	ret    

c001bb2e <avxClose>:
c001bb2e:	c3                   	ret    

c001bb2f <wouldSheSayYes>:
c001bb2f:	c3                   	ret    
c001bb30:	49                   	dec    ecx
c001bb31:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bb35:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bb39:	75 20                	jne    c001bb5b <isr0+0xb>
c001bb3b:	4e                   	dec    esi
c001bb3c:	79 61                	jns    c001bb9f <isr7+0x3>
c001bb3e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bb43:	66 90                	xchg   ax,ax
c001bb45:	66 90                	xchg   ax,ax
c001bb47:	66 90                	xchg   ax,ax
c001bb49:	66 90                	xchg   ax,ax
c001bb4b:	66 90                	xchg   ax,ax
c001bb4d:	66 90                	xchg   ax,ax
c001bb4f:	90                   	nop

c001bb50 <isr0>:
c001bb50:	fa                   	cli    
c001bb51:	68 00 00 00 00       	push   0x0
c001bb56:	68 00 00 00 00       	push   0x0
c001bb5b:	e9 44 01 00 00       	jmp    c001bca4 <int_common_stub>

c001bb60 <isr1>:
c001bb60:	fa                   	cli    
c001bb61:	6a 00                	push   0x0
c001bb63:	6a 01                	push   0x1
c001bb65:	e9 3a 01 00 00       	jmp    c001bca4 <int_common_stub>

c001bb6a <isr2>:
c001bb6a:	fa                   	cli    
c001bb6b:	6a 00                	push   0x0
c001bb6d:	6a 02                	push   0x2
c001bb6f:	e9 30 01 00 00       	jmp    c001bca4 <int_common_stub>

c001bb74 <isr3>:
c001bb74:	fa                   	cli    
c001bb75:	6a 00                	push   0x0
c001bb77:	6a 03                	push   0x3
c001bb79:	e9 26 01 00 00       	jmp    c001bca4 <int_common_stub>

c001bb7e <isr4>:
c001bb7e:	fa                   	cli    
c001bb7f:	6a 00                	push   0x0
c001bb81:	6a 04                	push   0x4
c001bb83:	e9 1c 01 00 00       	jmp    c001bca4 <int_common_stub>

c001bb88 <isr5>:
c001bb88:	fa                   	cli    
c001bb89:	6a 00                	push   0x0
c001bb8b:	6a 05                	push   0x5
c001bb8d:	e9 12 01 00 00       	jmp    c001bca4 <int_common_stub>

c001bb92 <isr6>:
c001bb92:	fa                   	cli    
c001bb93:	6a 00                	push   0x0
c001bb95:	6a 06                	push   0x6
c001bb97:	e9 08 01 00 00       	jmp    c001bca4 <int_common_stub>

c001bb9c <isr7>:
c001bb9c:	fa                   	cli    
c001bb9d:	6a 00                	push   0x0
c001bb9f:	6a 07                	push   0x7
c001bba1:	e9 fe 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bba6 <isr8>:
c001bba6:	fa                   	cli    
c001bba7:	6a 08                	push   0x8
c001bba9:	e9 f6 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bbae <isr9>:
c001bbae:	fa                   	cli    
c001bbaf:	6a 00                	push   0x0
c001bbb1:	6a 09                	push   0x9
c001bbb3:	e9 ec 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bbb8 <isr10>:
c001bbb8:	fa                   	cli    
c001bbb9:	6a 0a                	push   0xa
c001bbbb:	e9 e4 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bbc0 <isr11>:
c001bbc0:	fa                   	cli    
c001bbc1:	6a 0b                	push   0xb
c001bbc3:	e9 dc 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bbc8 <isr12>:
c001bbc8:	fa                   	cli    
c001bbc9:	6a 0c                	push   0xc
c001bbcb:	e9 d4 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bbd0 <isr13>:
c001bbd0:	fa                   	cli    
c001bbd1:	6a 0d                	push   0xd
c001bbd3:	e9 cc 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bbd8 <isr14>:
c001bbd8:	fa                   	cli    
c001bbd9:	6a 0e                	push   0xe
c001bbdb:	e9 c4 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bbe0 <isr15>:
c001bbe0:	fa                   	cli    
c001bbe1:	6a 00                	push   0x0
c001bbe3:	6a 0f                	push   0xf
c001bbe5:	e9 ba 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bbea <isr16>:
c001bbea:	fa                   	cli    
c001bbeb:	6a 00                	push   0x0
c001bbed:	6a 10                	push   0x10
c001bbef:	e9 b0 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bbf4 <isr17>:
c001bbf4:	fa                   	cli    
c001bbf5:	6a 00                	push   0x0
c001bbf7:	6a 11                	push   0x11
c001bbf9:	e9 a6 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bbfe <isr18>:
c001bbfe:	fa                   	cli    
c001bbff:	6a 00                	push   0x0
c001bc01:	6a 12                	push   0x12
c001bc03:	e9 9c 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bc08 <irq3>:
c001bc08:	fa                   	cli    
c001bc09:	6a 00                	push   0x0
c001bc0b:	6a 23                	push   0x23
c001bc0d:	e9 92 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bc12 <irq4>:
c001bc12:	fa                   	cli    
c001bc13:	6a 00                	push   0x0
c001bc15:	6a 24                	push   0x24
c001bc17:	e9 88 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bc1c <irq5>:
c001bc1c:	fa                   	cli    
c001bc1d:	6a 00                	push   0x0
c001bc1f:	6a 25                	push   0x25
c001bc21:	e9 7e 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bc26 <irq6>:
c001bc26:	fa                   	cli    
c001bc27:	6a 00                	push   0x0
c001bc29:	6a 26                	push   0x26
c001bc2b:	e9 74 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bc30 <irq7>:
c001bc30:	fa                   	cli    
c001bc31:	6a 00                	push   0x0
c001bc33:	6a 27                	push   0x27
c001bc35:	e9 6a 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bc3a <irq8>:
c001bc3a:	fa                   	cli    
c001bc3b:	6a 00                	push   0x0
c001bc3d:	6a 28                	push   0x28
c001bc3f:	e9 60 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bc44 <irq9>:
c001bc44:	fa                   	cli    
c001bc45:	6a 00                	push   0x0
c001bc47:	6a 29                	push   0x29
c001bc49:	e9 56 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bc4e <irq10>:
c001bc4e:	fa                   	cli    
c001bc4f:	6a 00                	push   0x0
c001bc51:	6a 2a                	push   0x2a
c001bc53:	e9 4c 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bc58 <irq11>:
c001bc58:	fa                   	cli    
c001bc59:	6a 00                	push   0x0
c001bc5b:	6a 2b                	push   0x2b
c001bc5d:	e9 42 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bc62 <irq12>:
c001bc62:	fa                   	cli    
c001bc63:	6a 00                	push   0x0
c001bc65:	6a 2c                	push   0x2c
c001bc67:	e9 38 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bc6c <irq13>:
c001bc6c:	fa                   	cli    
c001bc6d:	6a 00                	push   0x0
c001bc6f:	6a 2d                	push   0x2d
c001bc71:	e9 2e 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bc76 <irq14>:
c001bc76:	fa                   	cli    
c001bc77:	6a 00                	push   0x0
c001bc79:	6a 2e                	push   0x2e
c001bc7b:	e9 24 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bc80 <irq15>:
c001bc80:	fa                   	cli    
c001bc81:	6a 00                	push   0x0
c001bc83:	6a 2f                	push   0x2f
c001bc85:	e9 1a 00 00 00       	jmp    c001bca4 <int_common_stub>

c001bc8a <irq1>:
c001bc8a:	fa                   	cli    
c001bc8b:	6a 00                	push   0x0
c001bc8d:	6a 21                	push   0x21
c001bc8f:	eb 13                	jmp    c001bca4 <int_common_stub>

c001bc91 <irq2>:
c001bc91:	fa                   	cli    
c001bc92:	6a 00                	push   0x0
c001bc94:	6a 22                	push   0x22
c001bc96:	eb 0c                	jmp    c001bca4 <int_common_stub>

c001bc98 <isr96>:
c001bc98:	6a 00                	push   0x0
c001bc9a:	6a 60                	push   0x60
c001bc9c:	fb                   	sti    
c001bc9d:	eb 05                	jmp    c001bca4 <int_common_stub>

c001bc9f <irq0>:
c001bc9f:	fa                   	cli    
c001bca0:	6a 00                	push   0x0
c001bca2:	6a 20                	push   0x20

c001bca4 <int_common_stub>:
c001bca4:	60                   	pusha  
c001bca5:	1e                   	push   ds
c001bca6:	06                   	push   es
c001bca7:	0f a0                	push   fs
c001bca9:	0f a8                	push   gs
c001bcab:	66 b8 10 00          	mov    ax,0x10
c001bcaf:	66 8e d8             	mov    ds,ax
c001bcb2:	66 8e c0             	mov    es,ax
c001bcb5:	66 8e e0             	mov    fs,ax
c001bcb8:	66 8e e8             	mov    gs,ax
c001bcbb:	54                   	push   esp
c001bcbc:	fc                   	cld    
c001bcbd:	e8 12 01 ff ff       	call   c000bdd4 <int_handler>
c001bcc2:	81 c4 04 00 00 00    	add    esp,0x4
c001bcc8:	0f a9                	pop    gs
c001bcca:	0f a1                	pop    fs
c001bccc:	07                   	pop    es
c001bccd:	1f                   	pop    ds
c001bcce:	61                   	popa   
c001bccf:	81 c4 08 00 00 00    	add    esp,0x8
c001bcd5:	cf                   	iret   

c001bcd6 <irq16>:
c001bcd6:	fa                   	cli    
c001bcd7:	6a 00                	push   0x0
c001bcd9:	6a 30                	push   0x30
c001bcdb:	e9 c4 ff ff ff       	jmp    c001bca4 <int_common_stub>

c001bce0 <irq17>:
c001bce0:	fa                   	cli    
c001bce1:	6a 00                	push   0x0
c001bce3:	6a 31                	push   0x31
c001bce5:	e9 ba ff ff ff       	jmp    c001bca4 <int_common_stub>

c001bcea <irq18>:
c001bcea:	fa                   	cli    
c001bceb:	6a 00                	push   0x0
c001bced:	6a 32                	push   0x32
c001bcef:	e9 b0 ff ff ff       	jmp    c001bca4 <int_common_stub>

c001bcf4 <irq19>:
c001bcf4:	fa                   	cli    
c001bcf5:	6a 00                	push   0x0
c001bcf7:	6a 33                	push   0x33
c001bcf9:	e9 a6 ff ff ff       	jmp    c001bca4 <int_common_stub>

c001bcfe <irq20>:
c001bcfe:	fa                   	cli    
c001bcff:	6a 00                	push   0x0
c001bd01:	6a 34                	push   0x34
c001bd03:	e9 9c ff ff ff       	jmp    c001bca4 <int_common_stub>

c001bd08 <irq21>:
c001bd08:	fa                   	cli    
c001bd09:	6a 00                	push   0x0
c001bd0b:	6a 35                	push   0x35
c001bd0d:	e9 92 ff ff ff       	jmp    c001bca4 <int_common_stub>

c001bd12 <irq22>:
c001bd12:	fa                   	cli    
c001bd13:	6a 00                	push   0x0
c001bd15:	6a 36                	push   0x36
c001bd17:	e9 88 ff ff ff       	jmp    c001bca4 <int_common_stub>

c001bd1c <irq23>:
c001bd1c:	fa                   	cli    
c001bd1d:	6a 00                	push   0x0
c001bd1f:	6a 37                	push   0x37
c001bd21:	e9 7e ff ff ff       	jmp    c001bca4 <int_common_stub>
c001bd26:	66 90                	xchg   ax,ax
c001bd28:	66 90                	xchg   ax,ax
c001bd2a:	66 90                	xchg   ax,ax
c001bd2c:	66 90                	xchg   ax,ax
c001bd2e:	66 90                	xchg   ax,ax

c001bd30 <i386GetRDRAND>:
c001bd30:	b9 64 00 00 00       	mov    ecx,0x64

c001bd35 <retry>:
c001bd35:	0f c7 f0             	rdrand eax
c001bd38:	72 05                	jb     c001bd3f <retry.done>
c001bd3a:	e2 f9                	loop   c001bd35 <retry>

c001bd3c <retry.fail>:
c001bd3c:	31 c0                	xor    eax,eax
c001bd3e:	c3                   	ret    

c001bd3f <retry.done>:
c001bd3f:	c3                   	ret    

c001bd40 <absolutelyNoChanceInHell>:
c001bd40:	b8 01 00 00 00       	mov    eax,0x1
c001bd45:	0f a2                	cpuid  
c001bd47:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001bd4d:	74 06                	je     c001bd55 <sseDetect.noSSE>
c001bd4f:	b8 01 00 00 00       	mov    eax,0x1
c001bd54:	c3                   	ret    

c001bd55 <sseDetect.noSSE>:
c001bd55:	31 c0                	xor    eax,eax
c001bd57:	c3                   	ret    

c001bd58 <sseSave>:
c001bd58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd5c:	0f ae 00             	fxsave [eax]
c001bd5f:	c3                   	ret    

c001bd60 <sseLoad>:
c001bd60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd64:	0f ae 08             	fxrstor [eax]
c001bd67:	c3                   	ret    

c001bd68 <sseInit>:
c001bd68:	e8 42 00 00 00       	call   c001bdaf <x87Init>
c001bd6d:	0f 20 e0             	mov    eax,cr4
c001bd70:	66 0d 00 06          	or     ax,0x600
c001bd74:	0f 22 e0             	mov    cr4,eax
c001bd77:	c3                   	ret    

c001bd78 <sseClose>:
c001bd78:	c3                   	ret    
c001bd79:	66 90                	xchg   ax,ax
c001bd7b:	66 90                	xchg   ax,ax
c001bd7d:	66 90                	xchg   ax,ax
c001bd7f:	90                   	nop

c001bd80 <value_37F>:
c001bd80:	7f 03                	jg     c001bd85 <value_37A+0x1>

c001bd82 <value_37E>:
c001bd82:	7e 03                	jle    c001bd87 <x87Detect+0x1>

c001bd84 <value_37A>:
c001bd84:	7a 03                	jp     c001bd89 <x87Detect+0x3>

c001bd86 <x87Detect>:
c001bd86:	b8 01 00 00 00       	mov    eax,0x1
c001bd8b:	0f a2                	cpuid  
c001bd8d:	f7 c2 01 00 00 00    	test   edx,0x1
c001bd93:	74 06                	je     c001bd9b <x87Detect.nox87>
c001bd95:	b8 01 00 00 00       	mov    eax,0x1
c001bd9a:	c3                   	ret    

c001bd9b <x87Detect.nox87>:
c001bd9b:	b8 00 00 00 00       	mov    eax,0x0
c001bda0:	c3                   	ret    

c001bda1 <x87Save>:
c001bda1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bda5:	dd 30                	fnsave [eax]
c001bda7:	c3                   	ret    

c001bda8 <x87Load>:
c001bda8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdac:	dd 20                	frstor [eax]
c001bdae:	c3                   	ret    

c001bdaf <x87Init>:
c001bdaf:	0f 20 c0             	mov    eax,cr0
c001bdb2:	66 25 fb ff          	and    ax,0xfffb
c001bdb6:	66 0d 22 00          	or     ax,0x22
c001bdba:	0f 22 c0             	mov    cr0,eax
c001bdbd:	db e3                	fninit 
c001bdbf:	0f 06                	clts   
c001bdc1:	d9 2d 84 bd 01 c0    	fldcw  WORD PTR ds:0xc001bd84
c001bdc7:	c3                   	ret    

c001bdc8 <x87Close>:
c001bdc8:	c3                   	ret    
c001bdc9:	66 90                	xchg   ax,ax
c001bdcb:	90                   	nop

c001bdcc <__do_global_ctors_aux>:
c001bdcc:	a1 7c cd 01 c0       	mov    eax,ds:0xc001cd7c
c001bdd1:	83 f8 ff             	cmp    eax,0xffffffff
c001bdd4:	74 1a                	je     c001bdf0 <__do_global_ctors_aux+0x24>
c001bdd6:	55                   	push   ebp
c001bdd7:	89 e5                	mov    ebp,esp
c001bdd9:	53                   	push   ebx
c001bdda:	52                   	push   edx
c001bddb:	bb 7c cd 01 c0       	mov    ebx,0xc001cd7c
c001bde0:	ff d0                	call   eax
c001bde2:	83 eb 04             	sub    ebx,0x4
c001bde5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bde7:	83 f8 ff             	cmp    eax,0xffffffff
c001bdea:	75 f4                	jne    c001bde0 <__do_global_ctors_aux+0x14>
c001bdec:	58                   	pop    eax
c001bded:	5b                   	pop    ebx
c001bdee:	5d                   	pop    ebp
c001bdef:	c3                   	ret    
c001bdf0:	c3                   	ret    
c001bdf1:	66 90                	xchg   ax,ax
c001bdf3:	90                   	nop

c001bdf4 <__divdi3>:
c001bdf4:	55                   	push   ebp
c001bdf5:	57                   	push   edi
c001bdf6:	56                   	push   esi
c001bdf7:	53                   	push   ebx
c001bdf8:	83 ec 1c             	sub    esp,0x1c
c001bdfb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bdff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be03:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001be06:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001be0a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001be0e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001be12:	85 db                	test   ebx,ebx
c001be14:	0f 88 8e 00 00 00    	js     c001bea8 <__divdi3+0xb4>
c001be1a:	89 dd                	mov    ebp,ebx
c001be1c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001be24:	89 d3                	mov    ebx,edx
c001be26:	85 d2                	test   edx,edx
c001be28:	79 0d                	jns    c001be37 <__divdi3+0x43>
c001be2a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001be2e:	f7 d8                	neg    eax
c001be30:	83 d2 00             	adc    edx,0x0
c001be33:	f7 da                	neg    edx
c001be35:	89 d3                	mov    ebx,edx
c001be37:	89 c7                	mov    edi,eax
c001be39:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001be3c:	85 db                	test   ebx,ebx
c001be3e:	75 48                	jne    c001be88 <__divdi3+0x94>
c001be40:	39 ef                	cmp    edi,ebp
c001be42:	76 24                	jbe    c001be68 <__divdi3+0x74>
c001be44:	89 ea                	mov    edx,ebp
c001be46:	f7 f7                	div    edi
c001be48:	89 c1                	mov    ecx,eax
c001be4a:	31 f6                	xor    esi,esi
c001be4c:	89 c8                	mov    eax,ecx
c001be4e:	89 f2                	mov    edx,esi
c001be50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001be54:	85 c9                	test   ecx,ecx
c001be56:	74 07                	je     c001be5f <__divdi3+0x6b>
c001be58:	f7 d8                	neg    eax
c001be5a:	83 d2 00             	adc    edx,0x0
c001be5d:	f7 da                	neg    edx
c001be5f:	83 c4 1c             	add    esp,0x1c
c001be62:	5b                   	pop    ebx
c001be63:	5e                   	pop    esi
c001be64:	5f                   	pop    edi
c001be65:	5d                   	pop    ebp
c001be66:	c3                   	ret    
c001be67:	90                   	nop
c001be68:	85 ff                	test   edi,edi
c001be6a:	75 0b                	jne    c001be77 <__divdi3+0x83>
c001be6c:	b8 01 00 00 00       	mov    eax,0x1
c001be71:	31 d2                	xor    edx,edx
c001be73:	f7 f3                	div    ebx
c001be75:	89 c7                	mov    edi,eax
c001be77:	31 d2                	xor    edx,edx
c001be79:	89 e8                	mov    eax,ebp
c001be7b:	f7 f7                	div    edi
c001be7d:	89 c6                	mov    esi,eax
c001be7f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001be82:	f7 f7                	div    edi
c001be84:	89 c1                	mov    ecx,eax
c001be86:	eb c4                	jmp    c001be4c <__divdi3+0x58>
c001be88:	39 eb                	cmp    ebx,ebp
c001be8a:	77 3c                	ja     c001bec8 <__divdi3+0xd4>
c001be8c:	0f bd f3             	bsr    esi,ebx
c001be8f:	83 f6 1f             	xor    esi,0x1f
c001be92:	75 40                	jne    c001bed4 <__divdi3+0xe0>
c001be94:	39 eb                	cmp    ebx,ebp
c001be96:	72 09                	jb     c001bea1 <__divdi3+0xad>
c001be98:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001be9b:	0f 87 97 00 00 00    	ja     c001bf38 <__divdi3+0x144>
c001bea1:	b9 01 00 00 00       	mov    ecx,0x1
c001bea6:	eb a4                	jmp    c001be4c <__divdi3+0x58>
c001bea8:	f7 d9                	neg    ecx
c001beaa:	83 d3 00             	adc    ebx,0x0
c001bead:	f7 db                	neg    ebx
c001beaf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001beb2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001beb6:	89 dd                	mov    ebp,ebx
c001beb8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bec0:	e9 5f ff ff ff       	jmp    c001be24 <__divdi3+0x30>
c001bec5:	8d 76 00             	lea    esi,[esi+0x0]
c001bec8:	31 f6                	xor    esi,esi
c001beca:	31 c9                	xor    ecx,ecx
c001becc:	e9 7b ff ff ff       	jmp    c001be4c <__divdi3+0x58>
c001bed1:	8d 76 00             	lea    esi,[esi+0x0]
c001bed4:	b8 20 00 00 00       	mov    eax,0x20
c001bed9:	29 f0                	sub    eax,esi
c001bedb:	89 f1                	mov    ecx,esi
c001bedd:	d3 e3                	shl    ebx,cl
c001bedf:	89 fa                	mov    edx,edi
c001bee1:	88 c1                	mov    cl,al
c001bee3:	d3 ea                	shr    edx,cl
c001bee5:	09 da                	or     edx,ebx
c001bee7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001beeb:	89 f1                	mov    ecx,esi
c001beed:	d3 e7                	shl    edi,cl
c001beef:	89 eb                	mov    ebx,ebp
c001bef1:	88 c1                	mov    cl,al
c001bef3:	d3 eb                	shr    ebx,cl
c001bef5:	89 f1                	mov    ecx,esi
c001bef7:	d3 e5                	shl    ebp,cl
c001bef9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001befc:	88 c1                	mov    cl,al
c001befe:	d3 ea                	shr    edx,cl
c001bf00:	09 d5                	or     ebp,edx
c001bf02:	89 e8                	mov    eax,ebp
c001bf04:	89 da                	mov    edx,ebx
c001bf06:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001bf0a:	89 d3                	mov    ebx,edx
c001bf0c:	89 c5                	mov    ebp,eax
c001bf0e:	f7 e7                	mul    edi
c001bf10:	39 d3                	cmp    ebx,edx
c001bf12:	72 18                	jb     c001bf2c <__divdi3+0x138>
c001bf14:	74 0a                	je     c001bf20 <__divdi3+0x12c>
c001bf16:	89 e9                	mov    ecx,ebp
c001bf18:	31 f6                	xor    esi,esi
c001bf1a:	e9 2d ff ff ff       	jmp    c001be4c <__divdi3+0x58>
c001bf1f:	90                   	nop
c001bf20:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bf23:	89 f1                	mov    ecx,esi
c001bf25:	d3 e7                	shl    edi,cl
c001bf27:	39 c7                	cmp    edi,eax
c001bf29:	73 eb                	jae    c001bf16 <__divdi3+0x122>
c001bf2b:	90                   	nop
c001bf2c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001bf2f:	31 f6                	xor    esi,esi
c001bf31:	e9 16 ff ff ff       	jmp    c001be4c <__divdi3+0x58>
c001bf36:	66 90                	xchg   ax,ax
c001bf38:	31 c9                	xor    ecx,ecx
c001bf3a:	e9 0d ff ff ff       	jmp    c001be4c <__divdi3+0x58>
c001bf3f:	90                   	nop

c001bf40 <__moddi3>:
c001bf40:	55                   	push   ebp
c001bf41:	57                   	push   edi
c001bf42:	56                   	push   esi
c001bf43:	53                   	push   ebx
c001bf44:	83 ec 2c             	sub    esp,0x2c
c001bf47:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bf4b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bf4f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bf53:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bf57:	85 db                	test   ebx,ebx
c001bf59:	0f 88 85 00 00 00    	js     c001bfe4 <__moddi3+0xa4>
c001bf5f:	89 de                	mov    esi,ebx
c001bf61:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bf69:	89 d7                	mov    edi,edx
c001bf6b:	85 d2                	test   edx,edx
c001bf6d:	79 09                	jns    c001bf78 <__moddi3+0x38>
c001bf6f:	f7 d8                	neg    eax
c001bf71:	83 d2 00             	adc    edx,0x0
c001bf74:	f7 da                	neg    edx
c001bf76:	89 d7                	mov    edi,edx
c001bf78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf7c:	89 cd                	mov    ebp,ecx
c001bf7e:	85 ff                	test   edi,edi
c001bf80:	75 52                	jne    c001bfd4 <__moddi3+0x94>
c001bf82:	89 c3                	mov    ebx,eax
c001bf84:	39 f0                	cmp    eax,esi
c001bf86:	76 24                	jbe    c001bfac <__moddi3+0x6c>
c001bf88:	89 c8                	mov    eax,ecx
c001bf8a:	89 f2                	mov    edx,esi
c001bf8c:	f7 f3                	div    ebx
c001bf8e:	89 d6                	mov    esi,edx
c001bf90:	89 f0                	mov    eax,esi
c001bf92:	31 d2                	xor    edx,edx
c001bf94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bf98:	85 c9                	test   ecx,ecx
c001bf9a:	74 07                	je     c001bfa3 <__moddi3+0x63>
c001bf9c:	f7 d8                	neg    eax
c001bf9e:	83 d2 00             	adc    edx,0x0
c001bfa1:	f7 da                	neg    edx
c001bfa3:	83 c4 2c             	add    esp,0x2c
c001bfa6:	5b                   	pop    ebx
c001bfa7:	5e                   	pop    esi
c001bfa8:	5f                   	pop    edi
c001bfa9:	5d                   	pop    ebp
c001bfaa:	c3                   	ret    
c001bfab:	90                   	nop
c001bfac:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bfb0:	85 db                	test   ebx,ebx
c001bfb2:	75 0d                	jne    c001bfc1 <__moddi3+0x81>
c001bfb4:	b8 01 00 00 00       	mov    eax,0x1
c001bfb9:	31 d2                	xor    edx,edx
c001bfbb:	f7 f7                	div    edi
c001bfbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfc1:	89 f0                	mov    eax,esi
c001bfc3:	31 d2                	xor    edx,edx
c001bfc5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bfc9:	f7 f7                	div    edi
c001bfcb:	89 e8                	mov    eax,ebp
c001bfcd:	f7 f7                	div    edi
c001bfcf:	89 d6                	mov    esi,edx
c001bfd1:	eb bd                	jmp    c001bf90 <__moddi3+0x50>
c001bfd3:	90                   	nop
c001bfd4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bfd8:	39 f7                	cmp    edi,esi
c001bfda:	76 20                	jbe    c001bffc <__moddi3+0xbc>
c001bfdc:	89 c8                	mov    eax,ecx
c001bfde:	89 f2                	mov    edx,esi
c001bfe0:	eb b2                	jmp    c001bf94 <__moddi3+0x54>
c001bfe2:	66 90                	xchg   ax,ax
c001bfe4:	f7 d9                	neg    ecx
c001bfe6:	83 d3 00             	adc    ebx,0x0
c001bfe9:	f7 db                	neg    ebx
c001bfeb:	89 de                	mov    esi,ebx
c001bfed:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001bff5:	e9 6f ff ff ff       	jmp    c001bf69 <__moddi3+0x29>
c001bffa:	66 90                	xchg   ax,ax
c001bffc:	0f bd c7             	bsr    eax,edi
c001bfff:	83 f0 1f             	xor    eax,0x1f
c001c002:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c006:	75 24                	jne    c001c02c <__moddi3+0xec>
c001c008:	39 f7                	cmp    edi,esi
c001c00a:	72 06                	jb     c001c012 <__moddi3+0xd2>
c001c00c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c010:	77 0c                	ja     c001c01e <__moddi3+0xde>
c001c012:	89 e9                	mov    ecx,ebp
c001c014:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c018:	19 fe                	sbb    esi,edi
c001c01a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c01e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c022:	89 f2                	mov    edx,esi
c001c024:	e9 6b ff ff ff       	jmp    c001bf94 <__moddi3+0x54>
c001c029:	8d 76 00             	lea    esi,[esi+0x0]
c001c02c:	b8 20 00 00 00       	mov    eax,0x20
c001c031:	89 c2                	mov    edx,eax
c001c033:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c037:	29 da                	sub    edx,ebx
c001c039:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c03d:	88 d9                	mov    cl,bl
c001c03f:	d3 e7                	shl    edi,cl
c001c041:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c045:	88 d1                	mov    cl,dl
c001c047:	d3 e8                	shr    eax,cl
c001c049:	09 c7                	or     edi,eax
c001c04b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c04f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c053:	89 d8                	mov    eax,ebx
c001c055:	88 d9                	mov    cl,bl
c001c057:	d3 e7                	shl    edi,cl
c001c059:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c05d:	89 f3                	mov    ebx,esi
c001c05f:	88 d1                	mov    cl,dl
c001c061:	d3 eb                	shr    ebx,cl
c001c063:	89 c7                	mov    edi,eax
c001c065:	88 c1                	mov    cl,al
c001c067:	d3 e6                	shl    esi,cl
c001c069:	89 e8                	mov    eax,ebp
c001c06b:	88 d1                	mov    cl,dl
c001c06d:	d3 e8                	shr    eax,cl
c001c06f:	09 f0                	or     eax,esi
c001c071:	89 f9                	mov    ecx,edi
c001c073:	d3 e5                	shl    ebp,cl
c001c075:	89 da                	mov    edx,ebx
c001c077:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c07b:	89 d3                	mov    ebx,edx
c001c07d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c081:	89 c6                	mov    esi,eax
c001c083:	89 d1                	mov    ecx,edx
c001c085:	39 d3                	cmp    ebx,edx
c001c087:	72 27                	jb     c001c0b0 <__moddi3+0x170>
c001c089:	74 21                	je     c001c0ac <__moddi3+0x16c>
c001c08b:	29 f5                	sub    ebp,esi
c001c08d:	19 cb                	sbb    ebx,ecx
c001c08f:	89 de                	mov    esi,ebx
c001c091:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c095:	d3 e6                	shl    esi,cl
c001c097:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c09b:	89 f9                	mov    ecx,edi
c001c09d:	d3 ed                	shr    ebp,cl
c001c09f:	09 ee                	or     esi,ebp
c001c0a1:	89 f0                	mov    eax,esi
c001c0a3:	d3 eb                	shr    ebx,cl
c001c0a5:	89 da                	mov    edx,ebx
c001c0a7:	e9 e8 fe ff ff       	jmp    c001bf94 <__moddi3+0x54>
c001c0ac:	39 c5                	cmp    ebp,eax
c001c0ae:	73 db                	jae    c001c08b <__moddi3+0x14b>
c001c0b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c0b4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c0b8:	89 d1                	mov    ecx,edx
c001c0ba:	89 c6                	mov    esi,eax
c001c0bc:	eb cd                	jmp    c001c08b <__moddi3+0x14b>
c001c0be:	66 90                	xchg   ax,ax

c001c0c0 <__udivdi3>:
c001c0c0:	55                   	push   ebp
c001c0c1:	57                   	push   edi
c001c0c2:	56                   	push   esi
c001c0c3:	53                   	push   ebx
c001c0c4:	83 ec 1c             	sub    esp,0x1c
c001c0c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c0cb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c0cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c0d3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c0d7:	85 d2                	test   edx,edx
c001c0d9:	75 41                	jne    c001c11c <__udivdi3+0x5c>
c001c0db:	39 f7                	cmp    edi,esi
c001c0dd:	76 15                	jbe    c001c0f4 <__udivdi3+0x34>
c001c0df:	89 e8                	mov    eax,ebp
c001c0e1:	89 f2                	mov    edx,esi
c001c0e3:	f7 f7                	div    edi
c001c0e5:	31 db                	xor    ebx,ebx
c001c0e7:	89 da                	mov    edx,ebx
c001c0e9:	83 c4 1c             	add    esp,0x1c
c001c0ec:	5b                   	pop    ebx
c001c0ed:	5e                   	pop    esi
c001c0ee:	5f                   	pop    edi
c001c0ef:	5d                   	pop    ebp
c001c0f0:	c3                   	ret    
c001c0f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c0f4:	89 f9                	mov    ecx,edi
c001c0f6:	85 ff                	test   edi,edi
c001c0f8:	75 0b                	jne    c001c105 <__udivdi3+0x45>
c001c0fa:	b8 01 00 00 00       	mov    eax,0x1
c001c0ff:	31 d2                	xor    edx,edx
c001c101:	f7 f7                	div    edi
c001c103:	89 c1                	mov    ecx,eax
c001c105:	31 d2                	xor    edx,edx
c001c107:	89 f0                	mov    eax,esi
c001c109:	f7 f1                	div    ecx
c001c10b:	89 c3                	mov    ebx,eax
c001c10d:	89 e8                	mov    eax,ebp
c001c10f:	f7 f1                	div    ecx
c001c111:	89 da                	mov    edx,ebx
c001c113:	83 c4 1c             	add    esp,0x1c
c001c116:	5b                   	pop    ebx
c001c117:	5e                   	pop    esi
c001c118:	5f                   	pop    edi
c001c119:	5d                   	pop    ebp
c001c11a:	c3                   	ret    
c001c11b:	90                   	nop
c001c11c:	39 f2                	cmp    edx,esi
c001c11e:	77 1c                	ja     c001c13c <__udivdi3+0x7c>
c001c120:	0f bd da             	bsr    ebx,edx
c001c123:	83 f3 1f             	xor    ebx,0x1f
c001c126:	75 24                	jne    c001c14c <__udivdi3+0x8c>
c001c128:	39 f2                	cmp    edx,esi
c001c12a:	72 08                	jb     c001c134 <__udivdi3+0x74>
c001c12c:	39 ef                	cmp    edi,ebp
c001c12e:	0f 87 84 00 00 00    	ja     c001c1b8 <__udivdi3+0xf8>
c001c134:	b8 01 00 00 00       	mov    eax,0x1
c001c139:	eb ac                	jmp    c001c0e7 <__udivdi3+0x27>
c001c13b:	90                   	nop
c001c13c:	31 db                	xor    ebx,ebx
c001c13e:	31 c0                	xor    eax,eax
c001c140:	89 da                	mov    edx,ebx
c001c142:	83 c4 1c             	add    esp,0x1c
c001c145:	5b                   	pop    ebx
c001c146:	5e                   	pop    esi
c001c147:	5f                   	pop    edi
c001c148:	5d                   	pop    ebp
c001c149:	c3                   	ret    
c001c14a:	66 90                	xchg   ax,ax
c001c14c:	b8 20 00 00 00       	mov    eax,0x20
c001c151:	29 d8                	sub    eax,ebx
c001c153:	88 d9                	mov    cl,bl
c001c155:	d3 e2                	shl    edx,cl
c001c157:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c15b:	89 fa                	mov    edx,edi
c001c15d:	88 c1                	mov    cl,al
c001c15f:	d3 ea                	shr    edx,cl
c001c161:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c165:	09 d1                	or     ecx,edx
c001c167:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c16b:	88 d9                	mov    cl,bl
c001c16d:	d3 e7                	shl    edi,cl
c001c16f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c173:	89 f7                	mov    edi,esi
c001c175:	88 c1                	mov    cl,al
c001c177:	d3 ef                	shr    edi,cl
c001c179:	88 d9                	mov    cl,bl
c001c17b:	d3 e6                	shl    esi,cl
c001c17d:	89 ea                	mov    edx,ebp
c001c17f:	88 c1                	mov    cl,al
c001c181:	d3 ea                	shr    edx,cl
c001c183:	09 d6                	or     esi,edx
c001c185:	89 f0                	mov    eax,esi
c001c187:	89 fa                	mov    edx,edi
c001c189:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c18d:	89 d7                	mov    edi,edx
c001c18f:	89 c6                	mov    esi,eax
c001c191:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c195:	39 d7                	cmp    edi,edx
c001c197:	72 13                	jb     c001c1ac <__udivdi3+0xec>
c001c199:	74 09                	je     c001c1a4 <__udivdi3+0xe4>
c001c19b:	89 f0                	mov    eax,esi
c001c19d:	31 db                	xor    ebx,ebx
c001c19f:	e9 43 ff ff ff       	jmp    c001c0e7 <__udivdi3+0x27>
c001c1a4:	88 d9                	mov    cl,bl
c001c1a6:	d3 e5                	shl    ebp,cl
c001c1a8:	39 c5                	cmp    ebp,eax
c001c1aa:	73 ef                	jae    c001c19b <__udivdi3+0xdb>
c001c1ac:	8d 46 ff             	lea    eax,[esi-0x1]
c001c1af:	31 db                	xor    ebx,ebx
c001c1b1:	e9 31 ff ff ff       	jmp    c001c0e7 <__udivdi3+0x27>
c001c1b6:	66 90                	xchg   ax,ax
c001c1b8:	31 c0                	xor    eax,eax
c001c1ba:	e9 28 ff ff ff       	jmp    c001c0e7 <__udivdi3+0x27>
c001c1bf:	90                   	nop

c001c1c0 <__umoddi3>:
c001c1c0:	55                   	push   ebp
c001c1c1:	57                   	push   edi
c001c1c2:	56                   	push   esi
c001c1c3:	53                   	push   ebx
c001c1c4:	83 ec 1c             	sub    esp,0x1c
c001c1c7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c1cb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c1cf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c1d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c1d7:	89 da                	mov    edx,ebx
c001c1d9:	85 c0                	test   eax,eax
c001c1db:	75 37                	jne    c001c214 <__umoddi3+0x54>
c001c1dd:	39 df                	cmp    edi,ebx
c001c1df:	76 13                	jbe    c001c1f4 <__umoddi3+0x34>
c001c1e1:	89 f0                	mov    eax,esi
c001c1e3:	f7 f7                	div    edi
c001c1e5:	89 d0                	mov    eax,edx
c001c1e7:	31 d2                	xor    edx,edx
c001c1e9:	83 c4 1c             	add    esp,0x1c
c001c1ec:	5b                   	pop    ebx
c001c1ed:	5e                   	pop    esi
c001c1ee:	5f                   	pop    edi
c001c1ef:	5d                   	pop    ebp
c001c1f0:	c3                   	ret    
c001c1f1:	8d 76 00             	lea    esi,[esi+0x0]
c001c1f4:	89 fd                	mov    ebp,edi
c001c1f6:	85 ff                	test   edi,edi
c001c1f8:	75 0b                	jne    c001c205 <__umoddi3+0x45>
c001c1fa:	b8 01 00 00 00       	mov    eax,0x1
c001c1ff:	31 d2                	xor    edx,edx
c001c201:	f7 f7                	div    edi
c001c203:	89 c5                	mov    ebp,eax
c001c205:	89 d8                	mov    eax,ebx
c001c207:	31 d2                	xor    edx,edx
c001c209:	f7 f5                	div    ebp
c001c20b:	89 f0                	mov    eax,esi
c001c20d:	f7 f5                	div    ebp
c001c20f:	89 d0                	mov    eax,edx
c001c211:	eb d4                	jmp    c001c1e7 <__umoddi3+0x27>
c001c213:	90                   	nop
c001c214:	89 f1                	mov    ecx,esi
c001c216:	39 d8                	cmp    eax,ebx
c001c218:	76 0a                	jbe    c001c224 <__umoddi3+0x64>
c001c21a:	89 f0                	mov    eax,esi
c001c21c:	83 c4 1c             	add    esp,0x1c
c001c21f:	5b                   	pop    ebx
c001c220:	5e                   	pop    esi
c001c221:	5f                   	pop    edi
c001c222:	5d                   	pop    ebp
c001c223:	c3                   	ret    
c001c224:	0f bd e8             	bsr    ebp,eax
c001c227:	83 f5 1f             	xor    ebp,0x1f
c001c22a:	75 1c                	jne    c001c248 <__umoddi3+0x88>
c001c22c:	39 d8                	cmp    eax,ebx
c001c22e:	72 04                	jb     c001c234 <__umoddi3+0x74>
c001c230:	39 f7                	cmp    edi,esi
c001c232:	77 08                	ja     c001c23c <__umoddi3+0x7c>
c001c234:	89 da                	mov    edx,ebx
c001c236:	29 fe                	sub    esi,edi
c001c238:	19 c2                	sbb    edx,eax
c001c23a:	89 f1                	mov    ecx,esi
c001c23c:	89 c8                	mov    eax,ecx
c001c23e:	83 c4 1c             	add    esp,0x1c
c001c241:	5b                   	pop    ebx
c001c242:	5e                   	pop    esi
c001c243:	5f                   	pop    edi
c001c244:	5d                   	pop    ebp
c001c245:	c3                   	ret    
c001c246:	66 90                	xchg   ax,ax
c001c248:	ba 20 00 00 00       	mov    edx,0x20
c001c24d:	29 ea                	sub    edx,ebp
c001c24f:	89 e9                	mov    ecx,ebp
c001c251:	d3 e0                	shl    eax,cl
c001c253:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c257:	89 f8                	mov    eax,edi
c001c259:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c25d:	88 d1                	mov    cl,dl
c001c25f:	d3 e8                	shr    eax,cl
c001c261:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c265:	09 c1                	or     ecx,eax
c001c267:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c26b:	89 e9                	mov    ecx,ebp
c001c26d:	d3 e7                	shl    edi,cl
c001c26f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c273:	89 d8                	mov    eax,ebx
c001c275:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c279:	88 d1                	mov    cl,dl
c001c27b:	d3 e8                	shr    eax,cl
c001c27d:	89 c7                	mov    edi,eax
c001c27f:	89 e9                	mov    ecx,ebp
c001c281:	d3 e3                	shl    ebx,cl
c001c283:	89 f0                	mov    eax,esi
c001c285:	88 d1                	mov    cl,dl
c001c287:	d3 e8                	shr    eax,cl
c001c289:	09 d8                	or     eax,ebx
c001c28b:	89 e9                	mov    ecx,ebp
c001c28d:	d3 e6                	shl    esi,cl
c001c28f:	89 f3                	mov    ebx,esi
c001c291:	89 fa                	mov    edx,edi
c001c293:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c297:	89 d1                	mov    ecx,edx
c001c299:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c29d:	89 c6                	mov    esi,eax
c001c29f:	89 d7                	mov    edi,edx
c001c2a1:	39 d1                	cmp    ecx,edx
c001c2a3:	72 27                	jb     c001c2cc <__umoddi3+0x10c>
c001c2a5:	74 21                	je     c001c2c8 <__umoddi3+0x108>
c001c2a7:	89 ca                	mov    edx,ecx
c001c2a9:	29 f3                	sub    ebx,esi
c001c2ab:	19 fa                	sbb    edx,edi
c001c2ad:	89 d0                	mov    eax,edx
c001c2af:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c2b3:	d3 e0                	shl    eax,cl
c001c2b5:	89 e9                	mov    ecx,ebp
c001c2b7:	d3 eb                	shr    ebx,cl
c001c2b9:	09 d8                	or     eax,ebx
c001c2bb:	d3 ea                	shr    edx,cl
c001c2bd:	83 c4 1c             	add    esp,0x1c
c001c2c0:	5b                   	pop    ebx
c001c2c1:	5e                   	pop    esi
c001c2c2:	5f                   	pop    edi
c001c2c3:	5d                   	pop    ebp
c001c2c4:	c3                   	ret    
c001c2c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c2c8:	39 c3                	cmp    ebx,eax
c001c2ca:	73 db                	jae    c001c2a7 <__umoddi3+0xe7>
c001c2cc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c2d0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c2d4:	89 d7                	mov    edi,edx
c001c2d6:	89 c6                	mov    esi,eax
c001c2d8:	eb cd                	jmp    c001c2a7 <__umoddi3+0xe7>

Disassembly of section .init:

c001c2da <_init>:
c001c2da:	55                   	push   ebp
c001c2db:	89 e5                	mov    ebp,esp
c001c2dd:	e8 12 3e fe ff       	call   c00000f4 <frame_dummy>
c001c2e2:	e8 e5 fa ff ff       	call   c001bdcc <__do_global_ctors_aux>
c001c2e7:	5d                   	pop    ebp
c001c2e8:	c3                   	ret    

Disassembly of section .fini:

c001c2e9 <_fini>:
c001c2e9:	55                   	push   ebp
c001c2ea:	89 e5                	mov    ebp,esp
c001c2ec:	e8 93 3d fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c2f1:	5d                   	pop    ebp
c001c2f2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c2f4 <Computer::~Computer()>:
c001c2f4:	83 ec 0c             	sub    esp,0xc
c001c2f7:	ba b8 d5 01 c0       	mov    edx,0xc001d5b8
c001c2fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c300:	89 10                	mov    DWORD PTR [eax],edx
c001c302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c306:	83 ec 0c             	sub    esp,0xc
c001c309:	50                   	push   eax
c001c30a:	e8 1b f5 fe ff       	call   c000b82a <Device::~Device()>
c001c30f:	83 c4 10             	add    esp,0x10
c001c312:	90                   	nop
c001c313:	83 c4 0c             	add    esp,0xc
c001c316:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c318 <Computer::~Computer()>:
c001c318:	83 ec 0c             	sub    esp,0xc
c001c31b:	83 ec 0c             	sub    esp,0xc
c001c31e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c322:	e8 cd ff ff ff       	call   c001c2f4 <Computer::~Computer()>
c001c327:	83 c4 10             	add    esp,0x10
c001c32a:	83 ec 08             	sub    esp,0x8
c001c32d:	68 70 01 00 00       	push   0x170
c001c332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c336:	e8 b7 e0 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001c33b:	83 c4 10             	add    esp,0x10
c001c33e:	83 c4 0c             	add    esp,0xc
c001c341:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c342 <idleCommon()>:
c001c342:	83 ec 0c             	sub    esp,0xc
c001c345:	fa                   	cli    
c001c346:	ff 05 28 3e 02 c0    	inc    DWORD PTR ds:0xc0023e28
c001c34c:	e8 6b 74 ff ff       	call   c00137bc <schedule()>
c001c351:	a1 28 3e 02 c0       	mov    eax,ds:0xc0023e28
c001c356:	48                   	dec    eax
c001c357:	a3 28 3e 02 c0       	mov    ds:0xc0023e28,eax
c001c35c:	75 01                	jne    c001c35f <idleCommon()+0x1d>
c001c35e:	fb                   	sti    
c001c35f:	83 c4 0c             	add    esp,0xc
c001c362:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c364 <LinkedList<UnixFile>::~LinkedList()>:
c001c364:	90                   	nop
c001c365:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c366 <LinkedList<UnixFile>::LinkedList()>:
c001c366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c36a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c374:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c37b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c37f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c38a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c394:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c39b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c39f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c3a6:	90                   	nop
c001c3a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c3a8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c3a8:	83 ec 0c             	sub    esp,0xc
c001c3ab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c3b0:	75 10                	jne    c001c3c2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c3b2:	83 ec 0c             	sub    esp,0xc
c001c3b5:	68 18 d8 01 c0       	push   0xc001d818
c001c3ba:	e8 ac 3d ff ff       	call   c001016b <KePanic(char const*)>
c001c3bf:	83 c4 10             	add    esp,0x10
c001c3c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3c8:	85 c0                	test   eax,eax
c001c3ca:	74 34                	je     c001c400 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3d3:	85 c0                	test   eax,eax
c001c3d5:	74 29                	je     c001c400 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c3d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3de:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c3e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c3fe:	eb 65                	jmp    c001c465 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c404:	8b 00                	mov    eax,DWORD PTR [eax]
c001c406:	85 c0                	test   eax,eax
c001c408:	75 4b                	jne    c001c455 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c40a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c40e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c411:	85 c0                	test   eax,eax
c001c413:	75 40                	jne    c001c455 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c415:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c419:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c41d:	89 10                	mov    DWORD PTR [eax],edx
c001c41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c423:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c427:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c42e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c431:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c43c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c43f:	85 c0                	test   eax,eax
c001c441:	74 22                	je     c001c465 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c443:	83 ec 0c             	sub    esp,0xc
c001c446:	68 3a d8 01 c0       	push   0xc001d83a
c001c44b:	e8 1b 3d ff ff       	call   c001016b <KePanic(char const*)>
c001c450:	83 c4 10             	add    esp,0x10
c001c453:	eb 10                	jmp    c001c465 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c455:	83 ec 0c             	sub    esp,0xc
c001c458:	68 44 d8 01 c0       	push   0xc001d844
c001c45d:	e8 09 3d ff ff       	call   c001016b <KePanic(char const*)>
c001c462:	83 c4 10             	add    esp,0x10
c001c465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c469:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c46c:	8d 50 01             	lea    edx,[eax+0x1]
c001c46f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c473:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c476:	90                   	nop
c001c477:	83 c4 0c             	add    esp,0xc
c001c47a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c47c <LinkedList<UnixFile>::getFirstElement()>:
c001c47c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c480:	8b 00                	mov    eax,DWORD PTR [eax]
c001c482:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c484 <LinkedList<UnixFile>::removeFirst()>:
c001c484:	83 ec 0c             	sub    esp,0xc
c001c487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c48b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c48d:	85 c0                	test   eax,eax
c001c48f:	75 12                	jne    c001c4a3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c491:	83 ec 0c             	sub    esp,0xc
c001c494:	68 50 d8 01 c0       	push   0xc001d850
c001c499:	e8 cd 3c ff ff       	call   c001016b <KePanic(char const*)>
c001c49e:	83 c4 10             	add    esp,0x10
c001c4a1:	eb 7e                	jmp    c001c521 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c4a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4ad:	85 c0                	test   eax,eax
c001c4af:	74 10                	je     c001c4c1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c4b1:	83 ec 0c             	sub    esp,0xc
c001c4b4:	68 9b d8 01 c0       	push   0xc001d89b
c001c4b9:	e8 ad 3c ff ff       	call   c001016b <KePanic(char const*)>
c001c4be:	83 c4 10             	add    esp,0x10
c001c4c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4ca:	85 c0                	test   eax,eax
c001c4cc:	75 33                	jne    c001c501 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c4ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4ea:	83 f8 01             	cmp    eax,0x1
c001c4ed:	74 21                	je     c001c510 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c4ef:	83 ec 0c             	sub    esp,0xc
c001c4f2:	68 74 d8 01 c0       	push   0xc001d874
c001c4f7:	e8 6f 3c ff ff       	call   c001016b <KePanic(char const*)>
c001c4fc:	83 c4 10             	add    esp,0x10
c001c4ff:	eb 0f                	jmp    c001c510 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c505:	8b 00                	mov    eax,DWORD PTR [eax]
c001c507:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c50e:	89 10                	mov    DWORD PTR [eax],edx
c001c510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c514:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c517:	8d 50 ff             	lea    edx,[eax-0x1]
c001c51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c521:	83 c4 0c             	add    esp,0xc
c001c524:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c526 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c526:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c52a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c52d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c52e <DriverlessDevice::~DriverlessDevice()>:
c001c52e:	ba dc de 01 c0       	mov    edx,0xc001dedc
c001c533:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c537:	89 10                	mov    DWORD PTR [eax],edx
c001c539:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c53d:	50                   	push   eax
c001c53e:	e8 e7 f2 fe ff       	call   c000b82a <Device::~Device()>
c001c543:	83 c4 04             	add    esp,0x4
c001c546:	90                   	nop
c001c547:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c548 <DriverlessDevice::~DriverlessDevice()>:
c001c548:	83 ec 0c             	sub    esp,0xc
c001c54b:	83 ec 0c             	sub    esp,0xc
c001c54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c552:	e8 d7 ff ff ff       	call   c001c52e <DriverlessDevice::~DriverlessDevice()>
c001c557:	83 c4 10             	add    esp,0x10
c001c55a:	83 ec 08             	sub    esp,0x8
c001c55d:	68 58 01 00 00       	push   0x158
c001c562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c566:	e8 87 de fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001c56b:	83 c4 10             	add    esp,0x10
c001c56e:	83 c4 0c             	add    esp,0xc
c001c571:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c572 <LinkedList<Device>::addElement(Device*)>:
c001c572:	83 ec 0c             	sub    esp,0xc
c001c575:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c57a:	75 10                	jne    c001c58c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c57c:	83 ec 0c             	sub    esp,0xc
c001c57f:	68 18 d8 01 c0       	push   0xc001d818
c001c584:	e8 e2 3b ff ff       	call   c001016b <KePanic(char const*)>
c001c589:	83 c4 10             	add    esp,0x10
c001c58c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c590:	8b 00                	mov    eax,DWORD PTR [eax]
c001c592:	85 c0                	test   eax,eax
c001c594:	74 3a                	je     c001c5d0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c59a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c59d:	85 c0                	test   eax,eax
c001c59f:	74 2f                	je     c001c5d0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c5a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5ac:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c5b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5ba:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c5bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5c1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5c4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c5ce:	eb 68                	jmp    c001c638 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c5d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5d6:	85 c0                	test   eax,eax
c001c5d8:	75 4e                	jne    c001c628 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c5da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5e1:	85 c0                	test   eax,eax
c001c5e3:	75 43                	jne    c001c628 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c5e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5ed:	89 10                	mov    DWORD PTR [eax],edx
c001c5ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c601:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c60b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c60f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c612:	85 c0                	test   eax,eax
c001c614:	74 22                	je     c001c638 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c616:	83 ec 0c             	sub    esp,0xc
c001c619:	68 3a d8 01 c0       	push   0xc001d83a
c001c61e:	e8 48 3b ff ff       	call   c001016b <KePanic(char const*)>
c001c623:	83 c4 10             	add    esp,0x10
c001c626:	eb 10                	jmp    c001c638 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c628:	83 ec 0c             	sub    esp,0xc
c001c62b:	68 44 d8 01 c0       	push   0xc001d844
c001c630:	e8 36 3b ff ff       	call   c001016b <KePanic(char const*)>
c001c635:	83 c4 10             	add    esp,0x10
c001c638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c63f:	8d 50 01             	lea    edx,[eax+0x1]
c001c642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c646:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c649:	90                   	nop
c001c64a:	83 c4 0c             	add    esp,0xc
c001c64d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c64e <LinkedList<Device>::LinkedList()>:
c001c64e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c652:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c65c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c663:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c667:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c66e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c672:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c67c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c683:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c687:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c68e:	90                   	nop
c001c68f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c690 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c694:	8b 00                	mov    eax,DWORD PTR [eax]
c001c696:	85 c0                	test   eax,eax
c001c698:	75 0e                	jne    c001c6a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c69a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c69e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6a1:	85 c0                	test   eax,eax
c001c6a3:	75 03                	jne    c001c6a8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c6a5:	b0 01                	mov    al,0x1
c001c6a7:	c3                   	ret    
c001c6a8:	b0 00                	mov    al,0x0
c001c6aa:	90                   	nop
c001c6ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c6ac <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c6ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c6b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c6b4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c6b4:	83 ec 0c             	sub    esp,0xc
c001c6b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6bd:	85 c0                	test   eax,eax
c001c6bf:	75 17                	jne    c001c6d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c6c1:	83 ec 0c             	sub    esp,0xc
c001c6c4:	68 50 d8 01 c0       	push   0xc001d850
c001c6c9:	e8 9d 3a ff ff       	call   c001016b <KePanic(char const*)>
c001c6ce:	83 c4 10             	add    esp,0x10
c001c6d1:	e9 92 00 00 00       	jmp    c001c768 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c6d6:	66 90                	xchg   ax,ax
c001c6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6df:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c6e2:	85 c0                	test   eax,eax
c001c6e4:	0f 95 c0             	setne  al
c001c6e7:	84 c0                	test   al,al
c001c6e9:	74 11                	je     c001c6fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c6eb:	83 ec 0c             	sub    esp,0xc
c001c6ee:	68 9b d8 01 c0       	push   0xc001d89b
c001c6f3:	e8 73 3a ff ff       	call   c001016b <KePanic(char const*)>
c001c6f8:	83 c4 10             	add    esp,0x10
c001c6fb:	90                   	nop
c001c6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c700:	8b 00                	mov    eax,DWORD PTR [eax]
c001c702:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c705:	85 c0                	test   eax,eax
c001c707:	0f 94 c0             	sete   al
c001c70a:	84 c0                	test   al,al
c001c70c:	74 36                	je     c001c744 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c712:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c727:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c72a:	83 f8 01             	cmp    eax,0x1
c001c72d:	74 25                	je     c001c754 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c72f:	83 ec 0c             	sub    esp,0xc
c001c732:	68 74 d8 01 c0       	push   0xc001d874
c001c737:	e8 2f 3a ff ff       	call   c001016b <KePanic(char const*)>
c001c73c:	83 c4 10             	add    esp,0x10
c001c73f:	eb 13                	jmp    c001c754 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c741:	8d 76 00             	lea    esi,[esi+0x0]
c001c744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c748:	8b 00                	mov    eax,DWORD PTR [eax]
c001c74a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c74d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c751:	89 10                	mov    DWORD PTR [eax],edx
c001c753:	90                   	nop
c001c754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c758:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c75b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c762:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c765:	8d 76 00             	lea    esi,[esi+0x0]
c001c768:	83 c4 0c             	add    esp,0xc
c001c76b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c76c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c76c:	83 ec 0c             	sub    esp,0xc
c001c76f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c774:	75 12                	jne    c001c788 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c776:	83 ec 0c             	sub    esp,0xc
c001c779:	68 18 d8 01 c0       	push   0xc001d818
c001c77e:	e8 e8 39 ff ff       	call   c001016b <KePanic(char const*)>
c001c783:	83 c4 10             	add    esp,0x10
c001c786:	66 90                	xchg   ax,ax
c001c788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c78e:	85 c0                	test   eax,eax
c001c790:	74 36                	je     c001c7c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c796:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c799:	85 c0                	test   eax,eax
c001c79b:	74 2b                	je     c001c7c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c79d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7a8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c7ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c7b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7bd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c7c4:	eb 6a                	jmp    c001c830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c7c6:	66 90                	xchg   ax,ax
c001c7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7ce:	85 c0                	test   eax,eax
c001c7d0:	75 4e                	jne    c001c820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7d9:	85 c0                	test   eax,eax
c001c7db:	75 43                	jne    c001c820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7e5:	89 10                	mov    DWORD PTR [eax],edx
c001c7e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7f9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c804:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c807:	85 c0                	test   eax,eax
c001c809:	74 25                	je     c001c830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c80b:	83 ec 0c             	sub    esp,0xc
c001c80e:	68 3a d8 01 c0       	push   0xc001d83a
c001c813:	e8 53 39 ff ff       	call   c001016b <KePanic(char const*)>
c001c818:	83 c4 10             	add    esp,0x10
c001c81b:	eb 13                	jmp    c001c830 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c81d:	8d 76 00             	lea    esi,[esi+0x0]
c001c820:	83 ec 0c             	sub    esp,0xc
c001c823:	68 44 d8 01 c0       	push   0xc001d844
c001c828:	e8 3e 39 ff ff       	call   c001016b <KePanic(char const*)>
c001c82d:	83 c4 10             	add    esp,0x10
c001c830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c834:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c837:	8d 50 01             	lea    edx,[eax+0x1]
c001c83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c83e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c841:	90                   	nop
c001c842:	83 c4 0c             	add    esp,0xc
c001c845:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c848 <ACPI::~ACPI()>:
c001c848:	83 ec 0c             	sub    esp,0xc
c001c84b:	ba 54 e4 01 c0       	mov    edx,0xc001e454
c001c850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c854:	89 10                	mov    DWORD PTR [eax],edx
c001c856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c85a:	83 ec 0c             	sub    esp,0xc
c001c85d:	50                   	push   eax
c001c85e:	e8 c7 ef fe ff       	call   c000b82a <Device::~Device()>
c001c863:	83 c4 10             	add    esp,0x10
c001c866:	90                   	nop
c001c867:	83 c4 0c             	add    esp,0xc
c001c86a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c86c <ACPI::~ACPI()>:
c001c86c:	83 ec 0c             	sub    esp,0xc
c001c86f:	83 ec 0c             	sub    esp,0xc
c001c872:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c876:	e8 cd ff ff ff       	call   c001c848 <ACPI::~ACPI()>
c001c87b:	83 c4 10             	add    esp,0x10
c001c87e:	83 ec 08             	sub    esp,0x8
c001c881:	68 64 12 00 00       	push   0x1264
c001c886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c88a:	e8 63 db fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001c88f:	83 c4 10             	add    esp,0x10
c001c892:	83 c4 0c             	add    esp,0xc
c001c895:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c898 <LinkedList<Device>::~LinkedList()>:
c001c898:	90                   	nop
c001c899:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c89c <LinkedList<Device>::isEmpty()>:
c001c89c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8a2:	85 c0                	test   eax,eax
c001c8a4:	75 0e                	jne    c001c8b4 <LinkedList<Device>::isEmpty()+0x18>
c001c8a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8ad:	85 c0                	test   eax,eax
c001c8af:	75 03                	jne    c001c8b4 <LinkedList<Device>::isEmpty()+0x18>
c001c8b1:	b0 01                	mov    al,0x1
c001c8b3:	c3                   	ret    
c001c8b4:	b0 00                	mov    al,0x0
c001c8b6:	90                   	nop
c001c8b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c8b8 <LinkedList<Device>::getFirstElement()>:
c001c8b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8be:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c8c0 <LinkedList<Device>::removeFirst()>:
c001c8c0:	83 ec 0c             	sub    esp,0xc
c001c8c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8c9:	85 c0                	test   eax,eax
c001c8cb:	75 17                	jne    c001c8e4 <LinkedList<Device>::removeFirst()+0x24>
c001c8cd:	83 ec 0c             	sub    esp,0xc
c001c8d0:	68 50 d8 01 c0       	push   0xc001d850
c001c8d5:	e8 91 38 ff ff       	call   c001016b <KePanic(char const*)>
c001c8da:	83 c4 10             	add    esp,0x10
c001c8dd:	e9 92 00 00 00       	jmp    c001c974 <LinkedList<Device>::removeFirst()+0xb4>
c001c8e2:	66 90                	xchg   ax,ax
c001c8e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8eb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c8f1:	85 c0                	test   eax,eax
c001c8f3:	74 13                	je     c001c908 <LinkedList<Device>::removeFirst()+0x48>
c001c8f5:	83 ec 0c             	sub    esp,0xc
c001c8f8:	68 9b d8 01 c0       	push   0xc001d89b
c001c8fd:	e8 69 38 ff ff       	call   c001016b <KePanic(char const*)>
c001c902:	83 c4 10             	add    esp,0x10
c001c905:	8d 76 00             	lea    esi,[esi+0x0]
c001c908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c90c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c90e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c914:	85 c0                	test   eax,eax
c001c916:	75 34                	jne    c001c94c <LinkedList<Device>::removeFirst()+0x8c>
c001c918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c91c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c926:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c92d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c931:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c934:	83 f8 01             	cmp    eax,0x1
c001c937:	74 27                	je     c001c960 <LinkedList<Device>::removeFirst()+0xa0>
c001c939:	83 ec 0c             	sub    esp,0xc
c001c93c:	68 74 d8 01 c0       	push   0xc001d874
c001c941:	e8 25 38 ff ff       	call   c001016b <KePanic(char const*)>
c001c946:	83 c4 10             	add    esp,0x10
c001c949:	eb 15                	jmp    c001c960 <LinkedList<Device>::removeFirst()+0xa0>
c001c94b:	90                   	nop
c001c94c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c950:	8b 00                	mov    eax,DWORD PTR [eax]
c001c952:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c95c:	89 10                	mov    DWORD PTR [eax],edx
c001c95e:	66 90                	xchg   ax,ax
c001c960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c964:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c967:	8d 50 ff             	lea    edx,[eax-0x1]
c001c96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c96e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c971:	8d 76 00             	lea    esi,[esi+0x0]
c001c974:	83 c4 0c             	add    esp,0xc
c001c977:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c978 <CPU::~CPU()>:
c001c978:	83 ec 0c             	sub    esp,0xc
c001c97b:	ba f0 e5 01 c0       	mov    edx,0xc001e5f0
c001c980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c984:	89 10                	mov    DWORD PTR [eax],edx
c001c986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c98a:	83 ec 0c             	sub    esp,0xc
c001c98d:	50                   	push   eax
c001c98e:	e8 97 ee fe ff       	call   c000b82a <Device::~Device()>
c001c993:	83 c4 10             	add    esp,0x10
c001c996:	90                   	nop
c001c997:	83 c4 0c             	add    esp,0xc
c001c99a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c99c <CPU::~CPU()>:
c001c99c:	83 ec 0c             	sub    esp,0xc
c001c99f:	83 ec 0c             	sub    esp,0xc
c001c9a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9a6:	e8 cd ff ff ff       	call   c001c978 <CPU::~CPU()>
c001c9ab:	83 c4 10             	add    esp,0x10
c001c9ae:	83 ec 08             	sub    esp,0x8
c001c9b1:	68 94 11 00 00       	push   0x1194
c001c9b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c9ba:	e8 33 da fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001c9bf:	83 c4 10             	add    esp,0x10
c001c9c2:	83 c4 0c             	add    esp,0xc
c001c9c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c9c8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c9c8:	90                   	nop
c001c9c9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c9cc <ThreadControlBlock::ThreadControlBlock()>:
c001c9cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9d0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c9d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9db:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c9e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9e6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c9ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9f1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c9f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9fc:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001ca03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca07:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001ca0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca0f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001ca13:	90                   	nop
c001ca14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ca18 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ca18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca31:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ca38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ca51:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ca58:	90                   	nop
c001ca59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ca5c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ca5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ca60:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ca63:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001ca64 <PCI::~PCI()>:
c001ca64:	83 ec 0c             	sub    esp,0xc
c001ca67:	ba 28 f3 01 c0       	mov    edx,0xc001f328
c001ca6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca70:	89 10                	mov    DWORD PTR [eax],edx
c001ca72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca76:	83 ec 0c             	sub    esp,0xc
c001ca79:	50                   	push   eax
c001ca7a:	e8 35 e8 fe ff       	call   c000b2b4 <Bus::~Bus()>
c001ca7f:	83 c4 10             	add    esp,0x10
c001ca82:	90                   	nop
c001ca83:	83 c4 0c             	add    esp,0xc
c001ca86:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ca88 <PCI::~PCI()>:
c001ca88:	83 ec 0c             	sub    esp,0xc
c001ca8b:	83 ec 0c             	sub    esp,0xc
c001ca8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ca92:	e8 cd ff ff ff       	call   c001ca64 <PCI::~PCI()>
c001ca97:	83 c4 10             	add    esp,0x10
c001ca9a:	83 ec 08             	sub    esp,0x8
c001ca9d:	68 5c 01 00 00       	push   0x15c
c001caa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caa6:	e8 47 d9 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001caab:	83 c4 10             	add    esp,0x10
c001caae:	83 c4 0c             	add    esp,0xc
c001cab1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cab2 <IDE::~IDE()>:
c001cab2:	83 ec 0c             	sub    esp,0xc
c001cab5:	ba dc f3 01 c0       	mov    edx,0xc001f3dc
c001caba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cabe:	89 10                	mov    DWORD PTR [eax],edx
c001cac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cac4:	83 ec 0c             	sub    esp,0xc
c001cac7:	50                   	push   eax
c001cac8:	e8 d7 f1 fe ff       	call   c000bca4 <HardDiskController::~HardDiskController()>
c001cacd:	83 c4 10             	add    esp,0x10
c001cad0:	90                   	nop
c001cad1:	83 c4 0c             	add    esp,0xc
c001cad4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cad6 <IDE::~IDE()>:
c001cad6:	83 ec 0c             	sub    esp,0xc
c001cad9:	83 ec 0c             	sub    esp,0xc
c001cadc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cae0:	e8 cd ff ff ff       	call   c001cab2 <IDE::~IDE()>
c001cae5:	83 c4 10             	add    esp,0x10
c001cae8:	83 ec 08             	sub    esp,0x8
c001caeb:	68 70 02 00 00       	push   0x270
c001caf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caf4:	e8 f9 d8 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001caf9:	83 c4 10             	add    esp,0x10
c001cafc:	83 c4 0c             	add    esp,0xc
c001caff:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cb00 <SATABus::~SATABus()>:
c001cb00:	83 ec 0c             	sub    esp,0xc
c001cb03:	ba 2c f4 01 c0       	mov    edx,0xc001f42c
c001cb08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb0c:	89 10                	mov    DWORD PTR [eax],edx
c001cb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb12:	83 ec 0c             	sub    esp,0xc
c001cb15:	50                   	push   eax
c001cb16:	e8 89 f1 fe ff       	call   c000bca4 <HardDiskController::~HardDiskController()>
c001cb1b:	83 c4 10             	add    esp,0x10
c001cb1e:	90                   	nop
c001cb1f:	83 c4 0c             	add    esp,0xc
c001cb22:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cb24 <SATABus::~SATABus()>:
c001cb24:	83 ec 0c             	sub    esp,0xc
c001cb27:	83 ec 0c             	sub    esp,0xc
c001cb2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb2e:	e8 cd ff ff ff       	call   c001cb00 <SATABus::~SATABus()>
c001cb33:	83 c4 10             	add    esp,0x10
c001cb36:	83 ec 08             	sub    esp,0x8
c001cb39:	68 64 01 00 00       	push   0x164
c001cb3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb42:	e8 ab d8 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cb47:	83 c4 10             	add    esp,0x10
c001cb4a:	83 c4 0c             	add    esp,0xc
c001cb4d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cb4e <ATA::~ATA()>:
c001cb4e:	83 ec 0c             	sub    esp,0xc
c001cb51:	ba 6c f4 01 c0       	mov    edx,0xc001f46c
c001cb56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb5a:	89 10                	mov    DWORD PTR [eax],edx
c001cb5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb60:	83 ec 0c             	sub    esp,0xc
c001cb63:	50                   	push   eax
c001cb64:	e8 1d f2 fe ff       	call   c000bd86 <PhysicalDisk::~PhysicalDisk()>
c001cb69:	83 c4 10             	add    esp,0x10
c001cb6c:	90                   	nop
c001cb6d:	83 c4 0c             	add    esp,0xc
c001cb70:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cb72 <ATA::~ATA()>:
c001cb72:	83 ec 0c             	sub    esp,0xc
c001cb75:	83 ec 0c             	sub    esp,0xc
c001cb78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb7c:	e8 cd ff ff ff       	call   c001cb4e <ATA::~ATA()>
c001cb81:	83 c4 10             	add    esp,0x10
c001cb84:	83 ec 08             	sub    esp,0x8
c001cb87:	68 7c 01 00 00       	push   0x17c
c001cb8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb90:	e8 5d d8 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cb95:	83 c4 10             	add    esp,0x10
c001cb98:	83 c4 0c             	add    esp,0xc
c001cb9b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001cb9c <ATAPI::~ATAPI()>:
c001cb9c:	83 ec 0c             	sub    esp,0xc
c001cb9f:	ba b4 f4 01 c0       	mov    edx,0xc001f4b4
c001cba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba8:	89 10                	mov    DWORD PTR [eax],edx
c001cbaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbae:	83 ec 0c             	sub    esp,0xc
c001cbb1:	50                   	push   eax
c001cbb2:	e8 cf f1 fe ff       	call   c000bd86 <PhysicalDisk::~PhysicalDisk()>
c001cbb7:	83 c4 10             	add    esp,0x10
c001cbba:	90                   	nop
c001cbbb:	83 c4 0c             	add    esp,0xc
c001cbbe:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001cbc0 <ATAPI::~ATAPI()>:
c001cbc0:	83 ec 0c             	sub    esp,0xc
c001cbc3:	83 ec 0c             	sub    esp,0xc
c001cbc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbca:	e8 cd ff ff ff       	call   c001cb9c <ATAPI::~ATAPI()>
c001cbcf:	83 c4 10             	add    esp,0x10
c001cbd2:	83 ec 08             	sub    esp,0x8
c001cbd5:	68 84 01 00 00       	push   0x184
c001cbda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbde:	e8 0f d8 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cbe3:	83 c4 10             	add    esp,0x10
c001cbe6:	83 c4 0c             	add    esp,0xc
c001cbe9:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001cbea <SATA::~SATA()>:
c001cbea:	83 ec 0c             	sub    esp,0xc
c001cbed:	ba 68 f5 01 c0       	mov    edx,0xc001f568
c001cbf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf6:	89 10                	mov    DWORD PTR [eax],edx
c001cbf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbfc:	83 ec 0c             	sub    esp,0xc
c001cbff:	50                   	push   eax
c001cc00:	e8 81 f1 fe ff       	call   c000bd86 <PhysicalDisk::~PhysicalDisk()>
c001cc05:	83 c4 10             	add    esp,0x10
c001cc08:	90                   	nop
c001cc09:	83 c4 0c             	add    esp,0xc
c001cc0c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cc0e <SATA::~SATA()>:
c001cc0e:	83 ec 0c             	sub    esp,0xc
c001cc11:	83 ec 0c             	sub    esp,0xc
c001cc14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc18:	e8 cd ff ff ff       	call   c001cbea <SATA::~SATA()>
c001cc1d:	83 c4 10             	add    esp,0x10
c001cc20:	83 ec 08             	sub    esp,0x8
c001cc23:	68 7c 01 00 00       	push   0x17c
c001cc28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc2c:	e8 c1 d7 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cc31:	83 c4 10             	add    esp,0x10
c001cc34:	83 c4 0c             	add    esp,0xc
c001cc37:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cc38 <SATAPI::~SATAPI()>:
c001cc38:	83 ec 0c             	sub    esp,0xc
c001cc3b:	ba a0 f6 01 c0       	mov    edx,0xc001f6a0
c001cc40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc44:	89 10                	mov    DWORD PTR [eax],edx
c001cc46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc4a:	83 ec 0c             	sub    esp,0xc
c001cc4d:	50                   	push   eax
c001cc4e:	e8 33 f1 fe ff       	call   c000bd86 <PhysicalDisk::~PhysicalDisk()>
c001cc53:	83 c4 10             	add    esp,0x10
c001cc56:	90                   	nop
c001cc57:	83 c4 0c             	add    esp,0xc
c001cc5a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cc5c <SATAPI::~SATAPI()>:
c001cc5c:	83 ec 0c             	sub    esp,0xc
c001cc5f:	83 ec 0c             	sub    esp,0xc
c001cc62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc66:	e8 cd ff ff ff       	call   c001cc38 <SATAPI::~SATAPI()>
c001cc6b:	83 c4 10             	add    esp,0x10
c001cc6e:	83 ec 08             	sub    esp,0x8
c001cc71:	68 84 01 00 00       	push   0x184
c001cc76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc7a:	e8 73 d7 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cc7f:	83 c4 10             	add    esp,0x10
c001cc82:	83 c4 0c             	add    esp,0xc
c001cc85:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cc86 <IOAPIC::~IOAPIC()>:
c001cc86:	83 ec 0c             	sub    esp,0xc
c001cc89:	ba e0 f6 01 c0       	mov    edx,0xc001f6e0
c001cc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc92:	89 10                	mov    DWORD PTR [eax],edx
c001cc94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc98:	83 ec 0c             	sub    esp,0xc
c001cc9b:	50                   	push   eax
c001cc9c:	e8 89 eb fe ff       	call   c000b82a <Device::~Device()>
c001cca1:	83 c4 10             	add    esp,0x10
c001cca4:	90                   	nop
c001cca5:	83 c4 0c             	add    esp,0xc
c001cca8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001ccaa <IOAPIC::~IOAPIC()>:
c001ccaa:	83 ec 0c             	sub    esp,0xc
c001ccad:	83 ec 0c             	sub    esp,0xc
c001ccb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccb4:	e8 cd ff ff ff       	call   c001cc86 <IOAPIC::~IOAPIC()>
c001ccb9:	83 c4 10             	add    esp,0x10
c001ccbc:	83 ec 08             	sub    esp,0x8
c001ccbf:	68 68 01 00 00       	push   0x168
c001ccc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccc8:	e8 25 d7 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cccd:	83 c4 10             	add    esp,0x10
c001ccd0:	83 c4 0c             	add    esp,0xc
c001ccd3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001ccd4 <APICTimer::~APICTimer()>:
c001ccd4:	83 ec 0c             	sub    esp,0xc
c001ccd7:	ba 28 f7 01 c0       	mov    edx,0xc001f728
c001ccdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce0:	89 10                	mov    DWORD PTR [eax],edx
c001cce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cce6:	83 ec 0c             	sub    esp,0xc
c001cce9:	50                   	push   eax
c001ccea:	e8 79 04 ff ff       	call   c000d168 <Timer::~Timer()>
c001ccef:	83 c4 10             	add    esp,0x10
c001ccf2:	90                   	nop
c001ccf3:	83 c4 0c             	add    esp,0xc
c001ccf6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ccf8 <APICTimer::~APICTimer()>:
c001ccf8:	83 ec 0c             	sub    esp,0xc
c001ccfb:	83 ec 0c             	sub    esp,0xc
c001ccfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd02:	e8 cd ff ff ff       	call   c001ccd4 <APICTimer::~APICTimer()>
c001cd07:	83 c4 10             	add    esp,0x10
c001cd0a:	83 ec 08             	sub    esp,0x8
c001cd0d:	68 60 01 00 00       	push   0x160
c001cd12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd16:	e8 d7 d6 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cd1b:	83 c4 10             	add    esp,0x10
c001cd1e:	83 c4 0c             	add    esp,0xc
c001cd21:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001cd24 <PIT::~PIT()>:
c001cd24:	83 ec 0c             	sub    esp,0xc
c001cd27:	ba 78 f7 01 c0       	mov    edx,0xc001f778
c001cd2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd30:	89 10                	mov    DWORD PTR [eax],edx
c001cd32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd36:	83 ec 0c             	sub    esp,0xc
c001cd39:	50                   	push   eax
c001cd3a:	e8 29 04 ff ff       	call   c000d168 <Timer::~Timer()>
c001cd3f:	83 c4 10             	add    esp,0x10
c001cd42:	90                   	nop
c001cd43:	83 c4 0c             	add    esp,0xc
c001cd46:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001cd48 <PIT::~PIT()>:
c001cd48:	83 ec 0c             	sub    esp,0xc
c001cd4b:	83 ec 0c             	sub    esp,0xc
c001cd4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd52:	e8 cd ff ff ff       	call   c001cd24 <PIT::~PIT()>
c001cd57:	83 c4 10             	add    esp,0x10
c001cd5a:	83 ec 08             	sub    esp,0x8
c001cd5d:	68 5c 01 00 00       	push   0x15c
c001cd62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd66:	e8 87 d6 fe ff       	call   c000a3f2 <operator delete(void*, unsigned long)>
c001cd6b:	83 c4 10             	add    esp,0x10
c001cd6e:	83 c4 0c             	add    esp,0xc
c001cd71:	c3                   	ret    
