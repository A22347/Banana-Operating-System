
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 19 9e 00 00       	call   c0009e39 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 85 32 02 00       	call   c00232aa <_init>
c0000025:	c3                   	ret    
c0000026:	bb 2e 3f 02 c0       	mov    ebx,0xc0023f2e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 3c 3f 02 c0    	cmp    ebx,0xc0023f3c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 86 02 c0       	mov    eax,0xc00286b8
c0000049:	3d b8 86 02 c0       	cmp    eax,0xc00286b8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 86 02 c0       	push   0xc00286b8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 86 02 c0       	mov    eax,0xc00286b8
c0000075:	2d b8 86 02 c0       	sub    eax,0xc00286b8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 86 02 c0       	push   0xc00286b8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 40 88 02 c0 00 	cmp    BYTE PTR ds:0xc0028840,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 44 3f 02 c0       	mov    ebx,0xc0023f44
c00000bb:	81 eb 40 3f 02 c0    	sub    ebx,0xc0023f40
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 40 3f 02 c0       	mov    esi,0xc0023f40
c00000ca:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 86 02 c0       	push   0xc00286b8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 48 88 02 c0       	push   0xc0028848
c000012c:	68 b8 86 02 c0       	push   0xc00286b8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <getRDRAND>:
c0000219:	b9 64 00 00 00       	mov    ecx,0x64

c000021e <retry>:
c000021e:	0f c7 f0             	rdrand eax
c0000221:	72 05                	jb     c0000228 <retry.done>
c0000223:	e2 f9                	loop   c000021e <retry>

c0000225 <retry.fail>:
c0000225:	31 c0                	xor    eax,eax
c0000227:	c3                   	ret    

c0000228 <retry.done>:
c0000228:	c3                   	ret    

c0000229 <detectCPUID>:
c0000229:	9c                   	pushf  
c000022a:	9c                   	pushf  
c000022b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000232:	9d                   	popf   
c0000233:	9c                   	pushf  
c0000234:	58                   	pop    eax
c0000235:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000238:	9d                   	popf   
c0000239:	25 00 00 20 00       	and    eax,0x200000
c000023e:	c3                   	ret    

c000023f <goToVM86>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000245:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000248:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000024b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000024e:	25 ff ff 00 00       	and    eax,0xffff
c0000253:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000259:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000025f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000265:	52                   	push   edx
c0000266:	51                   	push   ecx
c0000267:	68 02 02 02 00       	push   0x20202
c000026c:	53                   	push   ebx
c000026d:	50                   	push   eax
c000026e:	cf                   	iret   

c000026f <goToUsermode>:
c000026f:	55                   	push   ebp
c0000270:	89 e5                	mov    ebp,esp
c0000272:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000275:	66 b8 23 00          	mov    ax,0x23
c0000279:	66 8e d8             	mov    ds,ax
c000027c:	66 8e c0             	mov    es,ax
c000027f:	66 8e e0             	mov    fs,ax
c0000282:	66 8e e8             	mov    gs,ax
c0000285:	89 e0                	mov    eax,esp
c0000287:	68 23 00 00 00       	push   0x23
c000028c:	50                   	push   eax
c000028d:	68 02 02 00 00       	push   0x202
c0000292:	68 1b 00 00 00       	push   0x1b
c0000297:	53                   	push   ebx
c0000298:	cf                   	iret   

c0000299 <switchToThreadASMFirstTime>:
c0000299:	9c                   	pushf  
c000029a:	fa                   	cli    
c000029b:	50                   	push   eax
c000029c:	53                   	push   ebx
c000029d:	51                   	push   ecx
c000029e:	52                   	push   edx
c000029f:	56                   	push   esi
c00002a0:	57                   	push   edi
c00002a1:	55                   	push   ebp
c00002a2:	e9 11 00 00 00       	jmp    c00002b8 <commonThreadSwitch>

c00002a7 <switchToThreadASM>:
c00002a7:	9c                   	pushf  
c00002a8:	50                   	push   eax
c00002a9:	53                   	push   ebx
c00002aa:	51                   	push   ecx
c00002ab:	52                   	push   edx
c00002ac:	56                   	push   esi
c00002ad:	57                   	push   edi
c00002ae:	55                   	push   ebp
c00002af:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002b5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002b8 <commonThreadSwitch>:
c00002b8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002bc:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002c4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002c7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ca:	0f 20 d9             	mov    ecx,cr3
c00002cd:	39 c8                	cmp    eax,ecx
c00002cf:	74 03                	je     c00002d4 <commonThreadSwitch.doneVAS>
c00002d1:	0f 22 d8             	mov    cr3,eax

c00002d4 <commonThreadSwitch.doneVAS>:
c00002d4:	0f 20 c0             	mov    eax,cr0
c00002d7:	0c 08                	or     al,0x8
c00002d9:	0f 22 c0             	mov    cr0,eax
c00002dc:	85 d2                	test   edx,edx
c00002de:	75 11                	jne    c00002f1 <commonThreadSwitch.firstTime>
c00002e0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002e3:	e8 64 85 01 00       	call   c001884c <changeTSS>
c00002e8:	5d                   	pop    ebp
c00002e9:	5f                   	pop    edi
c00002ea:	5e                   	pop    esi
c00002eb:	5a                   	pop    edx
c00002ec:	59                   	pop    ecx
c00002ed:	5b                   	pop    ebx
c00002ee:	58                   	pop    eax
c00002ef:	9d                   	popf   
c00002f0:	c3                   	ret    

c00002f1 <commonThreadSwitch.firstTime>:
c00002f1:	fa                   	cli    
c00002f2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002f5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002fa:	60                   	pusha  
c00002fb:	e8 cc ca 00 00       	call   c000cdcc <mapVASFirstTime>
c0000300:	61                   	popa   
c0000301:	89 c4                	mov    esp,eax
c0000303:	56                   	push   esi
c0000304:	52                   	push   edx
c0000305:	e8 42 85 01 00       	call   c001884c <changeTSS>
c000030a:	5a                   	pop    edx
c000030b:	5e                   	pop    esi
c000030c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000313:	5d                   	pop    ebp
c0000314:	5f                   	pop    edi
c0000315:	5e                   	pop    esi
c0000316:	59                   	pop    ecx
c0000317:	59                   	pop    ecx
c0000318:	5b                   	pop    ebx
c0000319:	58                   	pop    eax
c000031a:	81 c4 04 00 00 00    	add    esp,0x4
c0000320:	6a 02                	push   0x2
c0000322:	9d                   	popf   
c0000323:	52                   	push   edx
c0000324:	e8 0b 8a 01 00       	call   c0018d34 <taskStartupFunction>
c0000329:	5a                   	pop    edx
c000032a:	50                   	push   eax
c000032b:	ff d2                	call   edx
c000032d:	e8 4e 90 01 00       	call   c0019380 <taskReturned>
c0000332:	e9 fb ff ff ff       	jmp    c0000332 <commonThreadSwitch.firstTime+0x41>

c0000337 <asmQuickAcquireLock>:
c0000337:	55                   	push   ebp
c0000338:	89 e5                	mov    ebp,esp
c000033a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000033d <asmQuickAcquireLock.retry>:
c000033d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000342:	72 02                	jb     c0000346 <asmQuickAcquireLock.spin_with_pause>
c0000344:	fa                   	cli    
c0000345:	c3                   	ret    

c0000346 <asmQuickAcquireLock.spin_with_pause>:
c0000346:	f3 90                	pause  
c0000348:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000034e:	75 f6                	jne    c0000346 <asmQuickAcquireLock.spin_with_pause>
c0000350:	e9 e8 ff ff ff       	jmp    c000033d <asmQuickAcquireLock.retry>

c0000355 <asmQuickReleaseLock>:
c0000355:	55                   	push   ebp
c0000356:	89 e5                	mov    ebp,esp
c0000358:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000035f:	5d                   	pop    ebp
c0000360:	c3                   	ret    

c0000361 <asmAcquireLock>:
c0000361:	55                   	push   ebp
c0000362:	89 e5                	mov    ebp,esp
c0000364:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000367 <asmAcquireLock.retry>:
c0000367:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000036c:	72 05                	jb     c0000373 <asmAcquireLock.spin_with_pause>
c000036e:	9c                   	pushf  
c000036f:	58                   	pop    eax
c0000370:	fa                   	cli    
c0000371:	5d                   	pop    ebp
c0000372:	c3                   	ret    

c0000373 <asmAcquireLock.spin_with_pause>:
c0000373:	f3 90                	pause  
c0000375:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000037b:	75 f6                	jne    c0000373 <asmAcquireLock.spin_with_pause>
c000037d:	e9 e5 ff ff ff       	jmp    c0000367 <asmAcquireLock.retry>

c0000382 <asmReleaseLock>:
c0000382:	55                   	push   ebp
c0000383:	89 e5                	mov    ebp,esp
c0000385:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000388:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000038b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000391:	52                   	push   edx
c0000392:	9d                   	popf   
c0000393:	5d                   	pop    ebp
c0000394:	c3                   	ret    

c0000395 <loadGDT>:
c0000395:	0f 01 15 90 8c 02 c0 	lgdtd  ds:0xc0028c90
c000039c:	66 b8 10 00          	mov    ax,0x10
c00003a0:	66 8e d8             	mov    ds,ax
c00003a3:	66 8e c0             	mov    es,ax
c00003a6:	66 8e e0             	mov    fs,ax
c00003a9:	66 8e e8             	mov    gs,ax
c00003ac:	66 8e d0             	mov    ss,ax
c00003af:	e9 00 00 00 00       	jmp    c00003b4 <flush2>

c00003b4 <flush2>:
c00003b4:	c3                   	ret    

c00003b5 <isr0>:
c00003b5:	fa                   	cli    
c00003b6:	68 00 00 00 00       	push   0x0
c00003bb:	68 00 00 00 00       	push   0x0
c00003c0:	e9 44 01 00 00       	jmp    c0000509 <int_common_stub>

c00003c5 <isr1>:
c00003c5:	fa                   	cli    
c00003c6:	6a 00                	push   0x0
c00003c8:	6a 01                	push   0x1
c00003ca:	e9 3a 01 00 00       	jmp    c0000509 <int_common_stub>

c00003cf <isr2>:
c00003cf:	fa                   	cli    
c00003d0:	6a 00                	push   0x0
c00003d2:	6a 02                	push   0x2
c00003d4:	e9 30 01 00 00       	jmp    c0000509 <int_common_stub>

c00003d9 <isr3>:
c00003d9:	fa                   	cli    
c00003da:	6a 00                	push   0x0
c00003dc:	6a 03                	push   0x3
c00003de:	e9 26 01 00 00       	jmp    c0000509 <int_common_stub>

c00003e3 <isr4>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 04                	push   0x4
c00003e8:	e9 1c 01 00 00       	jmp    c0000509 <int_common_stub>

c00003ed <isr5>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 05                	push   0x5
c00003f2:	e9 12 01 00 00       	jmp    c0000509 <int_common_stub>

c00003f7 <isr6>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 06                	push   0x6
c00003fc:	e9 08 01 00 00       	jmp    c0000509 <int_common_stub>

c0000401 <isr7>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 07                	push   0x7
c0000406:	e9 fe 00 00 00       	jmp    c0000509 <int_common_stub>

c000040b <isr8>:
c000040b:	fa                   	cli    
c000040c:	6a 08                	push   0x8
c000040e:	e9 f6 00 00 00       	jmp    c0000509 <int_common_stub>

c0000413 <isr9>:
c0000413:	fa                   	cli    
c0000414:	6a 00                	push   0x0
c0000416:	6a 09                	push   0x9
c0000418:	e9 ec 00 00 00       	jmp    c0000509 <int_common_stub>

c000041d <isr10>:
c000041d:	fa                   	cli    
c000041e:	6a 0a                	push   0xa
c0000420:	e9 e4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000425 <isr11>:
c0000425:	fa                   	cli    
c0000426:	6a 0b                	push   0xb
c0000428:	e9 dc 00 00 00       	jmp    c0000509 <int_common_stub>

c000042d <isr12>:
c000042d:	fa                   	cli    
c000042e:	6a 0c                	push   0xc
c0000430:	e9 d4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000435 <isr13>:
c0000435:	fa                   	cli    
c0000436:	6a 0d                	push   0xd
c0000438:	e9 cc 00 00 00       	jmp    c0000509 <int_common_stub>

c000043d <isr14>:
c000043d:	fa                   	cli    
c000043e:	6a 0e                	push   0xe
c0000440:	e9 c4 00 00 00       	jmp    c0000509 <int_common_stub>

c0000445 <isr15>:
c0000445:	fa                   	cli    
c0000446:	6a 00                	push   0x0
c0000448:	6a 0f                	push   0xf
c000044a:	e9 ba 00 00 00       	jmp    c0000509 <int_common_stub>

c000044f <isr16>:
c000044f:	fa                   	cli    
c0000450:	6a 00                	push   0x0
c0000452:	6a 10                	push   0x10
c0000454:	e9 b0 00 00 00       	jmp    c0000509 <int_common_stub>

c0000459 <isr17>:
c0000459:	fa                   	cli    
c000045a:	6a 00                	push   0x0
c000045c:	6a 11                	push   0x11
c000045e:	e9 a6 00 00 00       	jmp    c0000509 <int_common_stub>

c0000463 <isr18>:
c0000463:	fa                   	cli    
c0000464:	6a 00                	push   0x0
c0000466:	6a 12                	push   0x12
c0000468:	e9 9c 00 00 00       	jmp    c0000509 <int_common_stub>

c000046d <irq3>:
c000046d:	fa                   	cli    
c000046e:	6a 00                	push   0x0
c0000470:	6a 23                	push   0x23
c0000472:	e9 92 00 00 00       	jmp    c0000509 <int_common_stub>

c0000477 <irq4>:
c0000477:	fa                   	cli    
c0000478:	6a 00                	push   0x0
c000047a:	6a 24                	push   0x24
c000047c:	e9 88 00 00 00       	jmp    c0000509 <int_common_stub>

c0000481 <irq5>:
c0000481:	fa                   	cli    
c0000482:	6a 00                	push   0x0
c0000484:	6a 25                	push   0x25
c0000486:	e9 7e 00 00 00       	jmp    c0000509 <int_common_stub>

c000048b <irq6>:
c000048b:	fa                   	cli    
c000048c:	6a 00                	push   0x0
c000048e:	6a 26                	push   0x26
c0000490:	e9 74 00 00 00       	jmp    c0000509 <int_common_stub>

c0000495 <irq7>:
c0000495:	fa                   	cli    
c0000496:	6a 00                	push   0x0
c0000498:	6a 27                	push   0x27
c000049a:	e9 6a 00 00 00       	jmp    c0000509 <int_common_stub>

c000049f <irq8>:
c000049f:	fa                   	cli    
c00004a0:	6a 00                	push   0x0
c00004a2:	6a 28                	push   0x28
c00004a4:	e9 60 00 00 00       	jmp    c0000509 <int_common_stub>

c00004a9 <irq9>:
c00004a9:	fa                   	cli    
c00004aa:	6a 00                	push   0x0
c00004ac:	6a 29                	push   0x29
c00004ae:	e9 56 00 00 00       	jmp    c0000509 <int_common_stub>

c00004b3 <irq10>:
c00004b3:	fa                   	cli    
c00004b4:	6a 00                	push   0x0
c00004b6:	6a 2a                	push   0x2a
c00004b8:	e9 4c 00 00 00       	jmp    c0000509 <int_common_stub>

c00004bd <irq11>:
c00004bd:	fa                   	cli    
c00004be:	6a 00                	push   0x0
c00004c0:	6a 2b                	push   0x2b
c00004c2:	e9 42 00 00 00       	jmp    c0000509 <int_common_stub>

c00004c7 <irq12>:
c00004c7:	fa                   	cli    
c00004c8:	6a 00                	push   0x0
c00004ca:	6a 2c                	push   0x2c
c00004cc:	e9 38 00 00 00       	jmp    c0000509 <int_common_stub>

c00004d1 <irq13>:
c00004d1:	fa                   	cli    
c00004d2:	6a 00                	push   0x0
c00004d4:	6a 2d                	push   0x2d
c00004d6:	e9 2e 00 00 00       	jmp    c0000509 <int_common_stub>

c00004db <irq14>:
c00004db:	fa                   	cli    
c00004dc:	6a 00                	push   0x0
c00004de:	6a 2e                	push   0x2e
c00004e0:	e9 24 00 00 00       	jmp    c0000509 <int_common_stub>

c00004e5 <irq15>:
c00004e5:	fa                   	cli    
c00004e6:	6a 00                	push   0x0
c00004e8:	6a 2f                	push   0x2f
c00004ea:	e9 1a 00 00 00       	jmp    c0000509 <int_common_stub>

c00004ef <irq1>:
c00004ef:	fa                   	cli    
c00004f0:	6a 00                	push   0x0
c00004f2:	6a 21                	push   0x21
c00004f4:	eb 13                	jmp    c0000509 <int_common_stub>

c00004f6 <irq2>:
c00004f6:	fa                   	cli    
c00004f7:	6a 00                	push   0x0
c00004f9:	6a 22                	push   0x22
c00004fb:	eb 0c                	jmp    c0000509 <int_common_stub>

c00004fd <isr96>:
c00004fd:	6a 00                	push   0x0
c00004ff:	6a 60                	push   0x60
c0000501:	fb                   	sti    
c0000502:	eb 05                	jmp    c0000509 <int_common_stub>

c0000504 <irq0>:
c0000504:	fa                   	cli    
c0000505:	6a 00                	push   0x0
c0000507:	6a 20                	push   0x20

c0000509 <int_common_stub>:
c0000509:	60                   	pusha  
c000050a:	1e                   	push   ds
c000050b:	06                   	push   es
c000050c:	0f a0                	push   fs
c000050e:	0f a8                	push   gs
c0000510:	66 b8 10 00          	mov    ax,0x10
c0000514:	66 8e d8             	mov    ds,ax
c0000517:	66 8e c0             	mov    es,ax
c000051a:	66 8e e0             	mov    fs,ax
c000051d:	66 8e e8             	mov    gs,ax
c0000520:	54                   	push   esp
c0000521:	fc                   	cld    
c0000522:	e8 9e e9 00 00       	call   c000eec5 <int_handler>
c0000527:	81 c4 04 00 00 00    	add    esp,0x4
c000052d:	0f a9                	pop    gs
c000052f:	0f a1                	pop    fs
c0000531:	07                   	pop    es
c0000532:	1f                   	pop    ds
c0000533:	61                   	popa   
c0000534:	81 c4 08 00 00 00    	add    esp,0x8
c000053a:	cf                   	iret   

c000053b <irq16>:
c000053b:	fa                   	cli    
c000053c:	6a 00                	push   0x0
c000053e:	6a 30                	push   0x30
c0000540:	e9 c4 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000545 <irq17>:
c0000545:	fa                   	cli    
c0000546:	6a 00                	push   0x0
c0000548:	6a 31                	push   0x31
c000054a:	e9 ba ff ff ff       	jmp    c0000509 <int_common_stub>

c000054f <irq18>:
c000054f:	fa                   	cli    
c0000550:	6a 00                	push   0x0
c0000552:	6a 32                	push   0x32
c0000554:	e9 b0 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000559 <irq19>:
c0000559:	fa                   	cli    
c000055a:	6a 00                	push   0x0
c000055c:	6a 33                	push   0x33
c000055e:	e9 a6 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000563 <irq20>:
c0000563:	fa                   	cli    
c0000564:	6a 00                	push   0x0
c0000566:	6a 34                	push   0x34
c0000568:	e9 9c ff ff ff       	jmp    c0000509 <int_common_stub>

c000056d <irq21>:
c000056d:	fa                   	cli    
c000056e:	6a 00                	push   0x0
c0000570:	6a 35                	push   0x35
c0000572:	e9 92 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000577 <irq22>:
c0000577:	fa                   	cli    
c0000578:	6a 00                	push   0x0
c000057a:	6a 36                	push   0x36
c000057c:	e9 88 ff ff ff       	jmp    c0000509 <int_common_stub>

c0000581 <irq23>:
c0000581:	fa                   	cli    
c0000582:	6a 00                	push   0x0
c0000584:	6a 37                	push   0x37
c0000586:	e9 7e ff ff ff       	jmp    c0000509 <int_common_stub>

c000058b <memcpy>:
c000058b:	e9 7a 83 00 00       	jmp    c000890a <__not_memcpy>

c0000590 <memcmp>:
c0000590:	56                   	push   esi
c0000591:	53                   	push   ebx
c0000592:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000596:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000059a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000059e:	85 f6                	test   esi,esi
c00005a0:	74 1d                	je     c00005bf <memcmp+0x2f>
c00005a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a4:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a7:	38 cb                	cmp    bl,cl
c00005a9:	75 19                	jne    c00005c4 <memcmp+0x34>
c00005ab:	01 c6                	add    esi,eax
c00005ad:	eb 0a                	jmp    c00005b9 <memcmp+0x29>
c00005af:	90                   	nop
c00005b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005b2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005b5:	38 d9                	cmp    cl,bl
c00005b7:	75 0b                	jne    c00005c4 <memcmp+0x34>
c00005b9:	40                   	inc    eax
c00005ba:	42                   	inc    edx
c00005bb:	39 f0                	cmp    eax,esi
c00005bd:	75 f1                	jne    c00005b0 <memcmp+0x20>
c00005bf:	31 c0                	xor    eax,eax
c00005c1:	5b                   	pop    ebx
c00005c2:	5e                   	pop    esi
c00005c3:	c3                   	ret    
c00005c4:	0f b6 c1             	movzx  eax,cl
c00005c7:	29 d8                	sub    eax,ebx
c00005c9:	5b                   	pop    ebx
c00005ca:	5e                   	pop    esi
c00005cb:	c3                   	ret    

c00005cc <memmove>:
c00005cc:	55                   	push   ebp
c00005cd:	57                   	push   edi
c00005ce:	56                   	push   esi
c00005cf:	53                   	push   ebx
c00005d0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005d4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005dc:	39 dd                	cmp    ebp,ebx
c00005de:	0f 83 80 00 00 00    	jae    c0000664 <memmove+0x98>
c00005e4:	85 d2                	test   edx,edx
c00005e6:	74 74                	je     c000065c <memmove+0x90>
c00005e8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005eb:	8d 75 04             	lea    esi,[ebp+0x4]
c00005ee:	39 cd                	cmp    ebp,ecx
c00005f0:	0f 93 c1             	setae  cl
c00005f3:	39 f3                	cmp    ebx,esi
c00005f5:	0f 93 c0             	setae  al
c00005f8:	89 c6                	mov    esi,eax
c00005fa:	09 ce                	or     esi,ecx
c00005fc:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ff:	89 f0                	mov    eax,esi
c0000601:	83 f9 0c             	cmp    ecx,0xc
c0000604:	0f 97 c1             	seta   cl
c0000607:	84 c8                	test   al,cl
c0000609:	74 75                	je     c0000680 <memmove+0xb4>
c000060b:	89 e9                	mov    ecx,ebp
c000060d:	09 d9                	or     ecx,ebx
c000060f:	83 e1 03             	and    ecx,0x3
c0000612:	75 6c                	jne    c0000680 <memmove+0xb4>
c0000614:	89 d7                	mov    edi,edx
c0000616:	89 d9                	mov    ecx,ebx
c0000618:	83 e7 fc             	and    edi,0xfffffffc
c000061b:	89 ee                	mov    esi,ebp
c000061d:	01 df                	add    edi,ebx
c000061f:	90                   	nop
c0000620:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000622:	83 c6 04             	add    esi,0x4
c0000625:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000628:	83 c1 04             	add    ecx,0x4
c000062b:	39 f9                	cmp    ecx,edi
c000062d:	75 f1                	jne    c0000620 <memmove+0x54>
c000062f:	89 d1                	mov    ecx,edx
c0000631:	89 d7                	mov    edi,edx
c0000633:	83 e1 fc             	and    ecx,0xfffffffc
c0000636:	29 cf                	sub    edi,ecx
c0000638:	01 cb                	add    ebx,ecx
c000063a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000063e:	39 ca                	cmp    edx,ecx
c0000640:	74 1a                	je     c000065c <memmove+0x90>
c0000642:	8a 03                	mov    al,BYTE PTR [ebx]
c0000644:	83 ff 01             	cmp    edi,0x1
c0000647:	88 06                	mov    BYTE PTR [esi],al
c0000649:	74 11                	je     c000065c <memmove+0x90>
c000064b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000064e:	83 ff 02             	cmp    edi,0x2
c0000651:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000654:	74 06                	je     c000065c <memmove+0x90>
c0000656:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000659:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000065c:	5b                   	pop    ebx
c000065d:	89 e8                	mov    eax,ebp
c000065f:	5e                   	pop    esi
c0000660:	5f                   	pop    edi
c0000661:	5d                   	pop    ebp
c0000662:	c3                   	ret    
c0000663:	90                   	nop
c0000664:	76 f6                	jbe    c000065c <memmove+0x90>
c0000666:	85 d2                	test   edx,edx
c0000668:	74 f2                	je     c000065c <memmove+0x90>
c000066a:	4b                   	dec    ebx
c000066b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000066e:	66 90                	xchg   ax,ax
c0000670:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000673:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000676:	4a                   	dec    edx
c0000677:	75 f7                	jne    c0000670 <memmove+0xa4>
c0000679:	5b                   	pop    ebx
c000067a:	89 e8                	mov    eax,ebp
c000067c:	5e                   	pop    esi
c000067d:	5f                   	pop    edi
c000067e:	5d                   	pop    ebp
c000067f:	c3                   	ret    
c0000680:	01 ea                	add    edx,ebp
c0000682:	89 e9                	mov    ecx,ebp
c0000684:	8a 03                	mov    al,BYTE PTR [ebx]
c0000686:	41                   	inc    ecx
c0000687:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000068a:	43                   	inc    ebx
c000068b:	39 d1                	cmp    ecx,edx
c000068d:	75 f5                	jne    c0000684 <memmove+0xb8>
c000068f:	eb cb                	jmp    c000065c <memmove+0x90>
c0000691:	8d 76 00             	lea    esi,[esi+0x0]

c0000694 <memset>:
c0000694:	57                   	push   edi
c0000695:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000699:	85 c9                	test   ecx,ecx
c000069b:	74 0b                	je     c00006a8 <memset+0x14>
c000069d:	fc                   	cld    
c000069e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006a2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00006a6:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00006a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ac:	5f                   	pop    edi
c00006ad:	c3                   	ret    
c00006ae:	66 90                	xchg   ax,ax

c00006b0 <strlen>:
c00006b0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006b4:	31 c0                	xor    eax,eax
c00006b6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006b9:	74 09                	je     c00006c4 <strlen+0x14>
c00006bb:	90                   	nop
c00006bc:	40                   	inc    eax
c00006bd:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006c1:	75 f9                	jne    c00006bc <strlen+0xc>
c00006c3:	c3                   	ret    
c00006c4:	c3                   	ret    
c00006c5:	8d 76 00             	lea    esi,[esi+0x0]

c00006c8 <strpbrk>:
c00006c8:	57                   	push   edi
c00006c9:	56                   	push   esi
c00006ca:	53                   	push   ebx
c00006cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006cf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006d3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006d5:	84 db                	test   bl,bl
c00006d7:	74 21                	je     c00006fa <strpbrk+0x32>
c00006d9:	8a 07                	mov    al,BYTE PTR [edi]
c00006db:	84 c0                	test   al,al
c00006dd:	74 14                	je     c00006f3 <strpbrk+0x2b>
c00006df:	38 d8                	cmp    al,bl
c00006e1:	74 19                	je     c00006fc <strpbrk+0x34>
c00006e3:	89 fa                	mov    edx,edi
c00006e5:	eb 05                	jmp    c00006ec <strpbrk+0x24>
c00006e7:	90                   	nop
c00006e8:	38 d9                	cmp    cl,bl
c00006ea:	74 10                	je     c00006fc <strpbrk+0x34>
c00006ec:	42                   	inc    edx
c00006ed:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006ef:	84 c9                	test   cl,cl
c00006f1:	75 f5                	jne    c00006e8 <strpbrk+0x20>
c00006f3:	46                   	inc    esi
c00006f4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006f6:	84 db                	test   bl,bl
c00006f8:	75 e1                	jne    c00006db <strpbrk+0x13>
c00006fa:	31 f6                	xor    esi,esi
c00006fc:	89 f0                	mov    eax,esi
c00006fe:	5b                   	pop    ebx
c00006ff:	5e                   	pop    esi
c0000700:	5f                   	pop    edi
c0000701:	c3                   	ret    
c0000702:	66 90                	xchg   ax,ax

c0000704 <strtok>:
c0000704:	56                   	push   esi
c0000705:	53                   	push   ebx
c0000706:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000070a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000070e:	85 db                	test   ebx,ebx
c0000710:	75 07                	jne    c0000719 <strtok+0x15>
c0000712:	eb 2c                	jmp    c0000740 <strtok+0x3c>
c0000714:	43                   	inc    ebx
c0000715:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000719:	56                   	push   esi
c000071a:	53                   	push   ebx
c000071b:	e8 a8 ff ff ff       	call   c00006c8 <strpbrk>
c0000720:	5a                   	pop    edx
c0000721:	a3 60 88 02 c0       	mov    ds:0xc0028860,eax
c0000726:	59                   	pop    ecx
c0000727:	39 d8                	cmp    eax,ebx
c0000729:	74 e9                	je     c0000714 <strtok+0x10>
c000072b:	85 c0                	test   eax,eax
c000072d:	74 1b                	je     c000074a <strtok+0x46>
c000072f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000732:	8d 50 01             	lea    edx,[eax+0x1]
c0000735:	89 d8                	mov    eax,ebx
c0000737:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000073d:	5b                   	pop    ebx
c000073e:	5e                   	pop    esi
c000073f:	c3                   	ret    
c0000740:	8b 1d 60 88 02 c0    	mov    ebx,DWORD PTR ds:0xc0028860
c0000746:	85 db                	test   ebx,ebx
c0000748:	75 cf                	jne    c0000719 <strtok+0x15>
c000074a:	31 c0                	xor    eax,eax
c000074c:	5b                   	pop    ebx
c000074d:	5e                   	pop    esi
c000074e:	c3                   	ret    
c000074f:	90                   	nop

c0000750 <strcpy>:
c0000750:	53                   	push   ebx
c0000751:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000755:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000759:	89 c3                	mov    ebx,eax
c000075b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075d:	84 d2                	test   dl,dl
c000075f:	74 0d                	je     c000076e <strcpy+0x1e>
c0000761:	8d 76 00             	lea    esi,[esi+0x0]
c0000764:	88 13                	mov    BYTE PTR [ebx],dl
c0000766:	41                   	inc    ecx
c0000767:	43                   	inc    ebx
c0000768:	8a 11                	mov    dl,BYTE PTR [ecx]
c000076a:	84 d2                	test   dl,dl
c000076c:	75 f6                	jne    c0000764 <strcpy+0x14>
c000076e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000771:	5b                   	pop    ebx
c0000772:	c3                   	ret    
c0000773:	90                   	nop

c0000774 <strncpy>:
c0000774:	55                   	push   ebp
c0000775:	57                   	push   edi
c0000776:	56                   	push   esi
c0000777:	53                   	push   ebx
c0000778:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000077c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000780:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000784:	85 c0                	test   eax,eax
c0000786:	74 39                	je     c00007c1 <strncpy+0x4d>
c0000788:	8a 1e                	mov    bl,BYTE PTR [esi]
c000078a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000078d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000790:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000793:	84 db                	test   bl,bl
c0000795:	74 31                	je     c00007c8 <strncpy+0x54>
c0000797:	85 c9                	test   ecx,ecx
c0000799:	74 26                	je     c00007c1 <strncpy+0x4d>
c000079b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000079e:	8d 48 fe             	lea    ecx,[eax-0x2]
c00007a1:	8d 55 02             	lea    edx,[ebp+0x2]
c00007a4:	8d 46 02             	lea    eax,[esi+0x2]
c00007a7:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00007aa:	84 db                	test   bl,bl
c00007ac:	75 0f                	jne    c00007bd <strncpy+0x49>
c00007ae:	eb 18                	jmp    c00007c8 <strncpy+0x54>
c00007b0:	40                   	inc    eax
c00007b1:	42                   	inc    edx
c00007b2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007b5:	49                   	dec    ecx
c00007b6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 0b                	je     c00007c8 <strncpy+0x54>
c00007bd:	85 c9                	test   ecx,ecx
c00007bf:	75 ef                	jne    c00007b0 <strncpy+0x3c>
c00007c1:	5b                   	pop    ebx
c00007c2:	89 e8                	mov    eax,ebp
c00007c4:	5e                   	pop    esi
c00007c5:	5f                   	pop    edi
c00007c6:	5d                   	pop    ebp
c00007c7:	c3                   	ret    
c00007c8:	85 c9                	test   ecx,ecx
c00007ca:	74 f5                	je     c00007c1 <strncpy+0x4d>
c00007cc:	fc                   	cld    
c00007cd:	31 c0                	xor    eax,eax
c00007cf:	89 d7                	mov    edi,edx
c00007d1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007d3:	89 e8                	mov    eax,ebp
c00007d5:	5b                   	pop    ebx
c00007d6:	5e                   	pop    esi
c00007d7:	5f                   	pop    edi
c00007d8:	5d                   	pop    ebp
c00007d9:	c3                   	ret    
c00007da:	66 90                	xchg   ax,ax

c00007dc <strcmp>:
c00007dc:	56                   	push   esi
c00007dd:	53                   	push   ebx
c00007de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007e6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007e8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007eb:	38 d1                	cmp    cl,dl
c00007ed:	75 1d                	jne    c000080c <strcmp+0x30>
c00007ef:	84 c9                	test   cl,cl
c00007f1:	74 21                	je     c0000814 <strcmp+0x38>
c00007f3:	b8 01 00 00 00       	mov    eax,0x1
c00007f8:	eb 07                	jmp    c0000801 <strcmp+0x25>
c00007fa:	66 90                	xchg   ax,ax
c00007fc:	40                   	inc    eax
c00007fd:	84 d2                	test   dl,dl
c00007ff:	74 13                	je     c0000814 <strcmp+0x38>
c0000801:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000804:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c0000808:	38 ca                	cmp    dl,cl
c000080a:	74 f0                	je     c00007fc <strcmp+0x20>
c000080c:	0f b6 c2             	movzx  eax,dl
c000080f:	5b                   	pop    ebx
c0000810:	29 c8                	sub    eax,ecx
c0000812:	5e                   	pop    esi
c0000813:	c3                   	ret    
c0000814:	31 c0                	xor    eax,eax
c0000816:	5b                   	pop    ebx
c0000817:	5e                   	pop    esi
c0000818:	c3                   	ret    
c0000819:	8d 76 00             	lea    esi,[esi+0x0]

c000081c <strchr>:
c000081c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000820:	8a 10                	mov    dl,BYTE PTR [eax]
c0000822:	84 d2                	test   dl,dl
c0000824:	74 15                	je     c000083b <strchr+0x1f>
c0000826:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000082a:	38 ca                	cmp    dl,cl
c000082c:	75 06                	jne    c0000834 <strchr+0x18>
c000082e:	eb 0e                	jmp    c000083e <strchr+0x22>
c0000830:	38 ca                	cmp    dl,cl
c0000832:	74 09                	je     c000083d <strchr+0x21>
c0000834:	40                   	inc    eax
c0000835:	8a 10                	mov    dl,BYTE PTR [eax]
c0000837:	84 d2                	test   dl,dl
c0000839:	75 f5                	jne    c0000830 <strchr+0x14>
c000083b:	31 c0                	xor    eax,eax
c000083d:	c3                   	ret    
c000083e:	c3                   	ret    
c000083f:	90                   	nop

c0000840 <strncmp>:
c0000840:	57                   	push   edi
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000847:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000084f:	85 ff                	test   edi,edi
c0000851:	74 28                	je     c000087b <strncmp+0x3b>
c0000853:	8a 16                	mov    dl,BYTE PTR [esi]
c0000855:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000858:	38 d1                	cmp    cl,dl
c000085a:	75 28                	jne    c0000884 <strncmp+0x44>
c000085c:	8d 46 01             	lea    eax,[esi+0x1]
c000085f:	84 c9                	test   cl,cl
c0000861:	74 18                	je     c000087b <strncmp+0x3b>
c0000863:	01 fe                	add    esi,edi
c0000865:	eb 0f                	jmp    c0000876 <strncmp+0x36>
c0000867:	90                   	nop
c0000868:	8a 10                	mov    dl,BYTE PTR [eax]
c000086a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000086d:	38 ca                	cmp    dl,cl
c000086f:	75 13                	jne    c0000884 <strncmp+0x44>
c0000871:	40                   	inc    eax
c0000872:	84 d2                	test   dl,dl
c0000874:	74 05                	je     c000087b <strncmp+0x3b>
c0000876:	43                   	inc    ebx
c0000877:	39 c6                	cmp    esi,eax
c0000879:	75 ed                	jne    c0000868 <strncmp+0x28>
c000087b:	5b                   	pop    ebx
c000087c:	31 c0                	xor    eax,eax
c000087e:	5e                   	pop    esi
c000087f:	5f                   	pop    edi
c0000880:	c3                   	ret    
c0000881:	8d 76 00             	lea    esi,[esi+0x0]
c0000884:	5b                   	pop    ebx
c0000885:	0f b6 c2             	movzx  eax,dl
c0000888:	5e                   	pop    esi
c0000889:	29 c8                	sub    eax,ecx
c000088b:	5f                   	pop    edi
c000088c:	c3                   	ret    
c000088d:	8d 76 00             	lea    esi,[esi+0x0]

c0000890 <strcat>:
c0000890:	56                   	push   esi
c0000891:	53                   	push   ebx
c0000892:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000896:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000089a:	89 c3                	mov    ebx,eax
c000089c:	eb 04                	jmp    c00008a2 <strcat+0x12>
c000089e:	66 90                	xchg   ax,ax
c00008a0:	89 d3                	mov    ebx,edx
c00008a2:	8d 53 01             	lea    edx,[ebx+0x1]
c00008a5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x10>
c00008ab:	31 d2                	xor    edx,edx
c00008ad:	8d 76 00             	lea    esi,[esi+0x0]
c00008b0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008b3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008b6:	42                   	inc    edx
c00008b7:	84 c9                	test   cl,cl
c00008b9:	75 f5                	jne    c00008b0 <strcat+0x20>
c00008bb:	5b                   	pop    ebx
c00008bc:	5e                   	pop    esi
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strncat>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008ce:	85 f6                	test   esi,esi
c00008d0:	74 1e                	je     c00008f0 <strncat+0x30>
c00008d2:	89 c2                	mov    edx,eax
c00008d4:	42                   	inc    edx
c00008d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008d9:	75 f9                	jne    c00008d4 <strncat+0x14>
c00008db:	01 ce                	add    esi,ecx
c00008dd:	eb 06                	jmp    c00008e5 <strncat+0x25>
c00008df:	90                   	nop
c00008e0:	39 f1                	cmp    ecx,esi
c00008e2:	74 10                	je     c00008f4 <strncat+0x34>
c00008e4:	42                   	inc    edx
c00008e5:	41                   	inc    ecx
c00008e6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008e9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008ec:	84 db                	test   bl,bl
c00008ee:	75 f0                	jne    c00008e0 <strncat+0x20>
c00008f0:	5b                   	pop    ebx
c00008f1:	5e                   	pop    esi
c00008f2:	c3                   	ret    
c00008f3:	90                   	nop
c00008f4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008f7:	5b                   	pop    ebx
c00008f8:	5e                   	pop    esi
c00008f9:	c3                   	ret    
c00008fa:	66 90                	xchg   ax,ax

c00008fc <strstr>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000903:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000907:	57                   	push   edi
c0000908:	e8 a3 fd ff ff       	call   c00006b0 <strlen>
c000090d:	59                   	pop    ecx
c000090e:	85 c0                	test   eax,eax
c0000910:	74 2a                	je     c000093c <strstr+0x40>
c0000912:	89 c6                	mov    esi,eax
c0000914:	eb 12                	jmp    c0000928 <strstr+0x2c>
c0000916:	66 90                	xchg   ax,ax
c0000918:	56                   	push   esi
c0000919:	57                   	push   edi
c000091a:	53                   	push   ebx
c000091b:	e8 70 fc ff ff       	call   c0000590 <memcmp>
c0000920:	83 c4 0c             	add    esp,0xc
c0000923:	85 c0                	test   eax,eax
c0000925:	74 15                	je     c000093c <strstr+0x40>
c0000927:	43                   	inc    ebx
c0000928:	53                   	push   ebx
c0000929:	e8 82 fd ff ff       	call   c00006b0 <strlen>
c000092e:	5a                   	pop    edx
c000092f:	39 f0                	cmp    eax,esi
c0000931:	73 e5                	jae    c0000918 <strstr+0x1c>
c0000933:	5b                   	pop    ebx
c0000934:	31 c0                	xor    eax,eax
c0000936:	5e                   	pop    esi
c0000937:	5f                   	pop    edi
c0000938:	c3                   	ret    
c0000939:	8d 76 00             	lea    esi,[esi+0x0]
c000093c:	89 d8                	mov    eax,ebx
c000093e:	5b                   	pop    ebx
c000093f:	5e                   	pop    esi
c0000940:	5f                   	pop    edi
c0000941:	c3                   	ret    
c0000942:	66 90                	xchg   ax,ax

c0000944 <toupper>:
c0000944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000948:	0f b6 d0             	movzx  edx,al
c000094b:	f6 82 60 3f 02 c0 02 	test   BYTE PTR [edx-0x3ffdc0a0],0x2
c0000952:	74 03                	je     c0000957 <toupper+0x13>
c0000954:	83 e8 20             	sub    eax,0x20
c0000957:	c3                   	ret    

c0000958 <tolower>:
c0000958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000095c:	0f b6 d0             	movzx  edx,al
c000095f:	f6 82 60 3f 02 c0 01 	test   BYTE PTR [edx-0x3ffdc0a0],0x1
c0000966:	74 03                	je     c000096b <tolower+0x13>
c0000968:	83 c0 20             	add    eax,0x20
c000096b:	c3                   	ret    

c000096c <simple_strtoul>:
c000096c:	55                   	push   ebp
c000096d:	57                   	push   edi
c000096e:	56                   	push   esi
c000096f:	53                   	push   ebx
c0000970:	83 ec 08             	sub    esp,0x8
c0000973:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000977:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000097b:	90                   	nop
c000097c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000097f:	f6 82 60 3f 02 c0 08 	test   BYTE PTR [edx-0x3ffdc0a0],0x8
c0000986:	75 05                	jne    c000098d <simple_strtoul+0x21>
c0000988:	80 fa 09             	cmp    dl,0x9
c000098b:	75 03                	jne    c0000990 <simple_strtoul+0x24>
c000098d:	41                   	inc    ecx
c000098e:	eb ec                	jmp    c000097c <simple_strtoul+0x10>
c0000990:	80 fa 2d             	cmp    dl,0x2d
c0000993:	0f 84 1b 01 00 00    	je     c0000ab4 <simple_strtoul+0x148>
c0000999:	80 fa 2b             	cmp    dl,0x2b
c000099c:	0f 84 c2 00 00 00    	je     c0000a64 <simple_strtoul+0xf8>
c00009a2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009aa:	85 f6                	test   esi,esi
c00009ac:	0f 85 c3 00 00 00    	jne    c0000a75 <simple_strtoul+0x109>
c00009b2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009b4:	80 fa 30             	cmp    dl,0x30
c00009b7:	0f 84 47 01 00 00    	je     c0000b04 <simple_strtoul+0x198>
c00009bd:	be 0a 00 00 00       	mov    esi,0xa
c00009c2:	84 d2                	test   dl,dl
c00009c4:	0f 84 6f 01 00 00    	je     c0000b39 <simple_strtoul+0x1cd>
c00009ca:	31 ed                	xor    ebp,ebp
c00009cc:	31 ff                	xor    edi,edi
c00009ce:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009d5:	eb 2b                	jmp    c0000a02 <simple_strtoul+0x96>
c00009d7:	90                   	nop
c00009d8:	83 eb 30             	sub    ebx,0x30
c00009db:	39 f3                	cmp    ebx,esi
c00009dd:	73 4d                	jae    c0000a2c <simple_strtoul+0xc0>
c00009df:	31 d2                	xor    edx,edx
c00009e1:	89 d8                	mov    eax,ebx
c00009e3:	f7 d0                	not    eax
c00009e5:	f7 f6                	div    esi
c00009e7:	39 f8                	cmp    eax,edi
c00009e9:	0f 82 b1 00 00 00    	jb     c0000aa0 <simple_strtoul+0x134>
c00009ef:	0f af fe             	imul   edi,esi
c00009f2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009f9:	01 df                	add    edi,ebx
c00009fb:	41                   	inc    ecx
c00009fc:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009fe:	84 d2                	test   dl,dl
c0000a00:	74 2a                	je     c0000a2c <simple_strtoul+0xc0>
c0000a02:	0f b6 da             	movzx  ebx,dl
c0000a05:	f6 83 60 3f 02 c0 04 	test   BYTE PTR [ebx-0x3ffdc0a0],0x4
c0000a0c:	75 ca                	jne    c00009d8 <simple_strtoul+0x6c>
c0000a0e:	0f be d2             	movsx  edx,dl
c0000a11:	52                   	push   edx
c0000a12:	e8 2d ff ff ff       	call   c0000944 <toupper>
c0000a17:	5b                   	pop    ebx
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 60 3f 02 c0 01 	test   BYTE PTR [edx-0x3ffdc0a0],0x1
c0000a22:	74 08                	je     c0000a2c <simple_strtoul+0xc0>
c0000a24:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a27:	39 f3                	cmp    ebx,esi
c0000a29:	72 b4                	jb     c00009df <simple_strtoul+0x73>
c0000a2b:	90                   	nop
c0000a2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a30:	85 c0                	test   eax,eax
c0000a32:	74 14                	je     c0000a48 <simple_strtoul+0xdc>
c0000a34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a37:	09 f8                	or     eax,edi
c0000a39:	75 71                	jne    c0000aac <simple_strtoul+0x140>
c0000a3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a3f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a43:	31 ff                	xor    edi,edi
c0000a45:	89 30                	mov    DWORD PTR [eax],esi
c0000a47:	90                   	nop
c0000a48:	4d                   	dec    ebp
c0000a49:	75 05                	jne    c0000a50 <simple_strtoul+0xe4>
c0000a4b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a50:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a55:	75 02                	jne    c0000a59 <simple_strtoul+0xed>
c0000a57:	f7 df                	neg    edi
c0000a59:	83 c4 08             	add    esp,0x8
c0000a5c:	89 f8                	mov    eax,edi
c0000a5e:	5b                   	pop    ebx
c0000a5f:	5e                   	pop    esi
c0000a60:	5f                   	pop    edi
c0000a61:	5d                   	pop    ebp
c0000a62:	c3                   	ret    
c0000a63:	90                   	nop
c0000a64:	41                   	inc    ecx
c0000a65:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a6d:	85 f6                	test   esi,esi
c0000a6f:	0f 84 3d ff ff ff    	je     c00009b2 <simple_strtoul+0x46>
c0000a75:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a78:	83 f8 22             	cmp    eax,0x22
c0000a7b:	77 6a                	ja     c0000ae7 <simple_strtoul+0x17b>
c0000a7d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a7f:	83 fe 08             	cmp    esi,0x8
c0000a82:	0f 84 a2 00 00 00    	je     c0000b2a <simple_strtoul+0x1be>
c0000a88:	83 fe 10             	cmp    esi,0x10
c0000a8b:	0f 85 31 ff ff ff    	jne    c00009c2 <simple_strtoul+0x56>
c0000a91:	80 fa 30             	cmp    dl,0x30
c0000a94:	74 2c                	je     c0000ac2 <simple_strtoul+0x156>
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	e9 22 ff ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000aa0:	bd 01 00 00 00       	mov    ebp,0x1
c0000aa5:	31 ff                	xor    edi,edi
c0000aa7:	e9 4f ff ff ff       	jmp    c00009fb <simple_strtoul+0x8f>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	89 08                	mov    DWORD PTR [eax],ecx
c0000ab2:	eb 94                	jmp    c0000a48 <simple_strtoul+0xdc>
c0000ab4:	41                   	inc    ecx
c0000ab5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000abd:	e9 e8 fe ff ff       	jmp    c00009aa <simple_strtoul+0x3e>
c0000ac2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac9:	50                   	push   eax
c0000aca:	e8 89 fe ff ff       	call   c0000958 <tolower>
c0000acf:	5e                   	pop    esi
c0000ad0:	83 f8 78             	cmp    eax,0x78
c0000ad3:	0f 84 84 00 00 00    	je     c0000b5d <simple_strtoul+0x1f1>
c0000ad9:	41                   	inc    ecx
c0000ada:	be 10 00 00 00       	mov    esi,0x10
c0000adf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ae2:	e9 db fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000ae7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aeb:	85 ff                	test   edi,edi
c0000aed:	74 5c                	je     c0000b4b <simple_strtoul+0x1df>
c0000aef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000af3:	85 c9                	test   ecx,ecx
c0000af5:	75 4e                	jne    c0000b45 <simple_strtoul+0x1d9>
c0000af7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000afd:	31 ff                	xor    edi,edi
c0000aff:	e9 4c ff ff ff       	jmp    c0000a50 <simple_strtoul+0xe4>
c0000b04:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b08:	88 04 24             	mov    BYTE PTR [esp],al
c0000b0b:	50                   	push   eax
c0000b0c:	e8 47 fe ff ff       	call   c0000958 <tolower>
c0000b11:	5d                   	pop    ebp
c0000b12:	83 f8 78             	cmp    eax,0x78
c0000b15:	74 3b                	je     c0000b52 <simple_strtoul+0x1e6>
c0000b17:	41                   	inc    ecx
c0000b18:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b1b:	80 fa 30             	cmp    dl,0x30
c0000b1e:	74 13                	je     c0000b33 <simple_strtoul+0x1c7>
c0000b20:	be 08 00 00 00       	mov    esi,0x8
c0000b25:	e9 98 fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>
c0000b2a:	80 fa 30             	cmp    dl,0x30
c0000b2d:	0f 85 8f fe ff ff    	jne    c00009c2 <simple_strtoul+0x56>
c0000b33:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b36:	41                   	inc    ecx
c0000b37:	eb e7                	jmp    c0000b20 <simple_strtoul+0x1b4>
c0000b39:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b3d:	85 d2                	test   edx,edx
c0000b3f:	74 0a                	je     c0000b4b <simple_strtoul+0x1df>
c0000b41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b45:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b49:	89 30                	mov    DWORD PTR [eax],esi
c0000b4b:	31 ff                	xor    edi,edi
c0000b4d:	e9 fe fe ff ff       	jmp    c0000a50 <simple_strtoul+0xe4>
c0000b52:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 34 ff ff ff       	jmp    c0000a91 <simple_strtoul+0x125>
c0000b5d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b60:	be 10 00 00 00       	mov    esi,0x10
c0000b65:	83 c1 02             	add    ecx,0x2
c0000b68:	e9 55 fe ff ff       	jmp    c00009c2 <simple_strtoul+0x56>

c0000b6d <largebin_index>:
c0000b6d:	89 c2                	mov    edx,eax
c0000b6f:	c1 ea 08             	shr    edx,0x8
c0000b72:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b78:	77 10                	ja     c0000b8a <largebin_index+0x1d>
c0000b7a:	0f bd d2             	bsr    edx,edx
c0000b7d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b80:	d3 e8                	shr    eax,cl
c0000b82:	83 e0 03             	and    eax,0x3
c0000b85:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b89:	c3                   	ret    
c0000b8a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b8f:	c3                   	ret    

c0000b90 <malloc_init_state>:
c0000b90:	53                   	push   ebx
c0000b91:	8d 50 34             	lea    edx,[eax+0x34]
c0000b94:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b9a:	89 d1                	mov    ecx,edx
c0000b9c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b9f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000ba2:	83 c2 08             	add    edx,0x8
c0000ba5:	39 da                	cmp    edx,ebx
c0000ba7:	75 f3                	jne    c0000b9c <malloc_init_state+0xc>
c0000ba9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bab:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000bb5:	83 e2 03             	and    edx,0x3
c0000bb8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bc2:	83 ca 48             	or     edx,0x48
c0000bc5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bcf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bd9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000be0:	89 10                	mov    DWORD PTR [eax],edx
c0000be2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000be5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bef:	5b                   	pop    ebx
c0000bf0:	c3                   	ret    

c0000bf1 <malloc_consolidate>:
c0000bf1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bf3:	85 d2                	test   edx,edx
c0000bf5:	0f 84 d8 00 00 00    	je     c0000cd3 <malloc_consolidate+0xe2>
c0000bfb:	55                   	push   ebp
c0000bfc:	83 e2 fd             	and    edx,0xfffffffd
c0000bff:	57                   	push   edi
c0000c00:	89 c5                	mov    ebp,eax
c0000c02:	56                   	push   esi
c0000c03:	8d 78 34             	lea    edi,[eax+0x34]
c0000c06:	53                   	push   ebx
c0000c07:	83 ec 10             	sub    esp,0x10
c0000c0a:	89 10                	mov    DWORD PTR [eax],edx
c0000c0c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c10:	c1 ea 03             	shr    edx,0x3
c0000c13:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c17:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c1b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c1e:	85 d2                	test   edx,edx
c0000c20:	0f 84 98 00 00 00    	je     c0000cbe <malloc_consolidate+0xcd>
c0000c26:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c2d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c30:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c33:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c37:	89 f9                	mov    ecx,edi
c0000c39:	83 e1 fe             	and    ecx,0xfffffffe
c0000c3c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c3f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c42:	83 e3 fc             	and    ebx,0xfffffffc
c0000c45:	83 e7 01             	and    edi,0x1
c0000c48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c4b:	75 14                	jne    c0000c61 <malloc_consolidate+0x70>
c0000c4d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c4f:	29 fa                	sub    edx,edi
c0000c51:	01 f9                	add    ecx,edi
c0000c53:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c56:	89 fb                	mov    ebx,edi
c0000c58:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c5b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c5e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c61:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c64:	74 40                	je     c0000ca6 <malloc_consolidate+0xb5>
c0000c66:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c69:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c6c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c70:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c73:	83 e7 01             	and    edi,0x1
c0000c76:	75 0e                	jne    c0000c86 <malloc_consolidate+0x95>
c0000c78:	01 d9                	add    ecx,ebx
c0000c7a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c7d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c80:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c83:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c86:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c89:	89 ce                	mov    esi,ecx
c0000c8b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c8e:	83 ce 01             	or     esi,0x1
c0000c91:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c94:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c97:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c9a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c9e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ca1:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ca4:	eb 0c                	jmp    c0000cb2 <malloc_consolidate+0xc1>
c0000ca6:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000ca9:	83 c9 01             	or     ecx,0x1
c0000cac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000caf:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000cb2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000cb6:	85 d2                	test   edx,edx
c0000cb8:	0f 85 6f ff ff ff    	jne    c0000c2d <malloc_consolidate+0x3c>
c0000cbe:	83 c5 04             	add    ebp,0x4
c0000cc1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cc5:	0f 85 50 ff ff ff    	jne    c0000c1b <malloc_consolidate+0x2a>
c0000ccb:	83 c4 10             	add    esp,0x10
c0000cce:	5b                   	pop    ebx
c0000ccf:	5e                   	pop    esi
c0000cd0:	5f                   	pop    edi
c0000cd1:	5d                   	pop    ebp
c0000cd2:	c3                   	ret    
c0000cd3:	e9 b8 fe ff ff       	jmp    c0000b90 <malloc_init_state>

c0000cd8 <dlfree>:
c0000cd8:	57                   	push   edi
c0000cd9:	56                   	push   esi
c0000cda:	53                   	push   ebx
c0000cdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cdf:	85 db                	test   ebx,ebx
c0000ce1:	0f 84 e2 00 00 00    	je     c0000dc9 <dlfree+0xf1>
c0000ce7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cea:	8b 0d 80 88 02 c0    	mov    ecx,DWORD PTR ds:0xc0028880
c0000cf0:	89 f0                	mov    eax,esi
c0000cf2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cf5:	83 e0 fc             	and    eax,0xfffffffc
c0000cf8:	39 c1                	cmp    ecx,eax
c0000cfa:	72 24                	jb     c0000d20 <dlfree+0x48>
c0000cfc:	83 c9 03             	or     ecx,0x3
c0000cff:	c1 e8 03             	shr    eax,0x3
c0000d02:	89 0d 80 88 02 c0    	mov    DWORD PTR ds:0xc0028880,ecx
c0000d08:	83 e8 02             	sub    eax,0x2
c0000d0b:	8b 0c 85 84 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd777c]
c0000d12:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d14:	89 14 85 84 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd777c],edx
c0000d1b:	e9 a9 00 00 00       	jmp    c0000dc9 <dlfree+0xf1>
c0000d20:	83 e6 02             	and    esi,0x2
c0000d23:	0f 85 a0 00 00 00    	jne    c0000dc9 <dlfree+0xf1>
c0000d29:	83 c9 01             	or     ecx,0x1
c0000d2c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d2f:	89 0d 80 88 02 c0    	mov    DWORD PTR ds:0xc0028880,ecx
c0000d35:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d38:	83 e1 fc             	and    ecx,0xfffffffc
c0000d3b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d3f:	75 13                	jne    c0000d54 <dlfree+0x7c>
c0000d41:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d44:	29 da                	sub    edx,ebx
c0000d46:	01 d8                	add    eax,ebx
c0000d48:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d4b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d4e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d51:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d54:	39 35 ac 88 02 c0    	cmp    DWORD PTR ds:0xc00288ac,esi
c0000d5a:	74 40                	je     c0000d9c <dlfree+0xc4>
c0000d5c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d60:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d63:	80 e3 01             	and    bl,0x1
c0000d66:	75 0e                	jne    c0000d76 <dlfree+0x9e>
c0000d68:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d6b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d6e:	01 c8                	add    eax,ecx
c0000d70:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d73:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d76:	8b 0d bc 88 02 c0    	mov    ecx,DWORD PTR ds:0xc00288bc
c0000d7c:	c7 42 0c b4 88 02 c0 	mov    DWORD PTR [edx+0xc],0xc00288b4
c0000d83:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d86:	89 15 bc 88 02 c0    	mov    DWORD PTR ds:0xc00288bc,edx
c0000d8c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d8f:	89 c1                	mov    ecx,eax
c0000d91:	83 c9 01             	or     ecx,0x1
c0000d94:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d97:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d9a:	eb 10                	jmp    c0000dac <dlfree+0xd4>
c0000d9c:	01 c8                	add    eax,ecx
c0000d9e:	89 c1                	mov    ecx,eax
c0000da0:	83 c9 01             	or     ecx,0x1
c0000da3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000da6:	89 15 ac 88 02 c0    	mov    DWORD PTR ds:0xc00288ac,edx
c0000dac:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000db1:	76 16                	jbe    c0000dc9 <dlfree+0xf1>
c0000db3:	f6 05 80 88 02 c0 02 	test   BYTE PTR ds:0xc0028880,0x2
c0000dba:	74 0d                	je     c0000dc9 <dlfree+0xf1>
c0000dbc:	5b                   	pop    ebx
c0000dbd:	b8 80 88 02 c0       	mov    eax,0xc0028880
c0000dc2:	5e                   	pop    esi
c0000dc3:	5f                   	pop    edi
c0000dc4:	e9 28 fe ff ff       	jmp    c0000bf1 <malloc_consolidate>
c0000dc9:	5b                   	pop    ebx
c0000dca:	5e                   	pop    esi
c0000dcb:	5f                   	pop    edi
c0000dcc:	c3                   	ret    

c0000dcd <sYSMALLOc>:
c0000dcd:	55                   	push   ebp
c0000dce:	57                   	push   edi
c0000dcf:	56                   	push   esi
c0000dd0:	53                   	push   ebx
c0000dd1:	89 d3                	mov    ebx,edx
c0000dd3:	83 ec 2c             	sub    esp,0x2c
c0000dd6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dda:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000de0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000de3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000de6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dea:	74 1f                	je     c0000e0b <sYSMALLOc+0x3e>
c0000dec:	89 d8                	mov    eax,ebx
c0000dee:	e8 fe fd ff ff       	call   c0000bf1 <malloc_consolidate>
c0000df3:	83 ec 0c             	sub    esp,0xc
c0000df6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dfa:	83 e8 07             	sub    eax,0x7
c0000dfd:	50                   	push   eax
c0000dfe:	e8 30 02 00 00       	call   c0001033 <dlmalloc>
c0000e03:	83 c4 10             	add    esp,0x10
c0000e06:	e9 20 02 00 00       	jmp    c000102b <sYSMALLOc+0x25e>
c0000e0b:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e0e:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e14:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e17:	83 e0 fc             	and    eax,0xfffffffc
c0000e1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e22:	83 c0 10             	add    eax,0x10
c0000e25:	01 c1                	add    ecx,eax
c0000e27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e2b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e32:	74 04                	je     c0000e38 <sYSMALLOc+0x6b>
c0000e34:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e38:	f7 da                	neg    edx
c0000e3a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e3e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e42:	21 d1                	and    ecx,edx
c0000e44:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e48:	7f 07                	jg     c0000e51 <sYSMALLOc+0x84>
c0000e4a:	31 c0                	xor    eax,eax
c0000e4c:	e9 da 01 00 00       	jmp    c000102b <sYSMALLOc+0x25e>
c0000e51:	83 ec 0c             	sub    esp,0xc
c0000e54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e58:	e8 df 8d 00 00       	call   c0009c3c <sbrk>
c0000e5d:	83 c4 10             	add    esp,0x10
c0000e60:	89 c6                	mov    esi,eax
c0000e62:	83 f8 ff             	cmp    eax,0xffffffff
c0000e65:	74 e3                	je     c0000e4a <sYSMALLOc+0x7d>
c0000e67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e6b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e6f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e72:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e78:	39 f1                	cmp    ecx,esi
c0000e7a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e80:	75 13                	jne    c0000e95 <sYSMALLOc+0xc8>
c0000e82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e86:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e8a:	83 c8 01             	or     eax,0x1
c0000e8d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e90:	e9 3e 01 00 00       	jmp    c0000fd3 <sYSMALLOc+0x206>
c0000e95:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e9b:	88 d0                	mov    al,dl
c0000e9d:	83 e0 01             	and    eax,0x1
c0000ea0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ea5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000ea9:	0f 95 c0             	setne  al
c0000eac:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000eb0:	39 f1                	cmp    ecx,esi
c0000eb2:	76 12                	jbe    c0000ec6 <sYSMALLOc+0xf9>
c0000eb4:	84 c0                	test   al,al
c0000eb6:	74 0e                	je     c0000ec6 <sYSMALLOc+0xf9>
c0000eb8:	83 e2 fe             	and    edx,0xfffffffe
c0000ebb:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ec1:	e9 83 00 00 00       	jmp    c0000f49 <sYSMALLOc+0x17c>
c0000ec6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ecb:	74 7c                	je     c0000f49 <sYSMALLOc+0x17c>
c0000ecd:	84 c0                	test   al,al
c0000ecf:	74 0c                	je     c0000edd <sYSMALLOc+0x110>
c0000ed1:	89 f0                	mov    eax,esi
c0000ed3:	29 c8                	sub    eax,ecx
c0000ed5:	01 e8                	add    eax,ebp
c0000ed7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000edd:	89 f2                	mov    edx,esi
c0000edf:	83 e2 07             	and    edx,0x7
c0000ee2:	74 0c                	je     c0000ef0 <sYSMALLOc+0x123>
c0000ee4:	b8 08 00 00 00       	mov    eax,0x8
c0000ee9:	29 d0                	sub    eax,edx
c0000eeb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eee:	eb 04                	jmp    c0000ef4 <sYSMALLOc+0x127>
c0000ef0:	89 f5                	mov    ebp,esi
c0000ef2:	31 c0                	xor    eax,eax
c0000ef4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ef8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000efc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f00:	01 c1                	add    ecx,eax
c0000f02:	83 ec 0c             	sub    esp,0xc
c0000f05:	01 f1                	add    ecx,esi
c0000f07:	01 ca                	add    edx,ecx
c0000f09:	29 c8                	sub    eax,ecx
c0000f0b:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000f0f:	01 c2                	add    edx,eax
c0000f11:	52                   	push   edx
c0000f12:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f16:	e8 21 8d 00 00       	call   c0009c3c <sbrk>
c0000f1b:	83 c4 10             	add    esp,0x10
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f25:	75 0f                	jne    c0000f36 <sYSMALLOc+0x169>
c0000f27:	83 ec 0c             	sub    esp,0xc
c0000f2a:	6a 00                	push   0x0
c0000f2c:	e8 0b 8d 00 00       	call   c0009c3c <sbrk>
c0000f31:	83 c4 10             	add    esp,0x10
c0000f34:	eb 30                	jmp    c0000f66 <sYSMALLOc+0x199>
c0000f36:	39 c6                	cmp    esi,eax
c0000f38:	76 33                	jbe    c0000f6d <sYSMALLOc+0x1a0>
c0000f3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f3e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f45:	01 f0                	add    eax,esi
c0000f47:	eb 1d                	jmp    c0000f66 <sYSMALLOc+0x199>
c0000f49:	83 ec 0c             	sub    esp,0xc
c0000f4c:	89 f5                	mov    ebp,esi
c0000f4e:	6a 00                	push   0x0
c0000f50:	e8 e7 8c 00 00       	call   c0009c3c <sbrk>
c0000f55:	89 c2                	mov    edx,eax
c0000f57:	29 f2                	sub    edx,esi
c0000f59:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f5d:	83 c4 10             	add    esp,0x10
c0000f60:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f66:	31 d2                	xor    edx,edx
c0000f68:	83 f8 ff             	cmp    eax,0xffffffff
c0000f6b:	74 66                	je     c0000fd3 <sYSMALLOc+0x206>
c0000f6d:	29 e8                	sub    eax,ebp
c0000f6f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f72:	01 d0                	add    eax,edx
c0000f74:	83 c8 01             	or     eax,0x1
c0000f77:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f7a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f80:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f85:	74 4c                	je     c0000fd3 <sYSMALLOc+0x206>
c0000f87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f8b:	83 e8 0c             	sub    eax,0xc
c0000f8e:	83 e0 f8             	and    eax,0xfffffff8
c0000f91:	89 c2                	mov    edx,eax
c0000f93:	83 ca 01             	or     edx,0x1
c0000f96:	83 f8 0f             	cmp    eax,0xf
c0000f99:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f9c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000fa4:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000fac:	76 25                	jbe    c0000fd3 <sYSMALLOc+0x206>
c0000fae:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fb4:	83 ec 0c             	sub    esp,0xc
c0000fb7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fc1:	83 c7 08             	add    edi,0x8
c0000fc4:	57                   	push   edi
c0000fc5:	e8 0e fd ff ff       	call   c0000cd8 <dlfree>
c0000fca:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fd0:	83 c4 10             	add    esp,0x10
c0000fd3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fd9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fdf:	73 06                	jae    c0000fe7 <sYSMALLOc+0x21a>
c0000fe1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fe7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fed:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000ff3:	73 06                	jae    c0000ffb <sYSMALLOc+0x22e>
c0000ff5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000ffb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000ffe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001001:	83 e2 fc             	and    edx,0xfffffffc
c0001004:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001008:	0f 82 3c fe ff ff    	jb     c0000e4a <sYSMALLOc+0x7d>
c000100e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001012:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001015:	29 fa                	sub    edx,edi
c0001017:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000101a:	83 ca 01             	or     edx,0x1
c000101d:	89 fb                	mov    ebx,edi
c000101f:	83 c0 08             	add    eax,0x8
c0001022:	83 cb 01             	or     ebx,0x1
c0001025:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001028:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000102b:	83 c4 2c             	add    esp,0x2c
c000102e:	5b                   	pop    ebx
c000102f:	5e                   	pop    esi
c0001030:	5f                   	pop    edi
c0001031:	5d                   	pop    ebp
c0001032:	c3                   	ret    

c0001033 <dlmalloc>:
c0001033:	55                   	push   ebp
c0001034:	57                   	push   edi
c0001035:	56                   	push   esi
c0001036:	53                   	push   ebx
c0001037:	83 ec 1c             	sub    esp,0x1c
c000103a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000103e:	83 f8 df             	cmp    eax,0xffffffdf
c0001041:	0f 87 70 03 00 00    	ja     c00013b7 <dlmalloc+0x384>
c0001047:	83 c0 0b             	add    eax,0xb
c000104a:	be 10 00 00 00       	mov    esi,0x10
c000104f:	83 f8 0f             	cmp    eax,0xf
c0001052:	76 05                	jbe    c0001059 <dlmalloc+0x26>
c0001054:	83 e0 f8             	and    eax,0xfffffff8
c0001057:	89 c6                	mov    esi,eax
c0001059:	8b 3d 80 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028880
c000105f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001065:	75 17                	jne    c000107e <dlmalloc+0x4b>
c0001067:	85 ff                	test   edi,edi
c0001069:	0f 85 05 03 00 00    	jne    c0001374 <dlmalloc+0x341>
c000106f:	b8 80 88 02 c0       	mov    eax,0xc0028880
c0001074:	e8 78 fb ff ff       	call   c0000bf1 <malloc_consolidate>
c0001079:	e9 f6 02 00 00       	jmp    c0001374 <dlmalloc+0x341>
c000107e:	39 f7                	cmp    edi,esi
c0001080:	72 1f                	jb     c00010a1 <dlmalloc+0x6e>
c0001082:	89 f2                	mov    edx,esi
c0001084:	c1 ea 03             	shr    edx,0x3
c0001087:	83 ea 02             	sub    edx,0x2
c000108a:	8b 04 95 84 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd777c]
c0001091:	85 c0                	test   eax,eax
c0001093:	74 0c                	je     c00010a1 <dlmalloc+0x6e>
c0001095:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001098:	89 0c 95 84 88 02 c0 	mov    DWORD PTR [edx*4-0x3ffd777c],ecx
c000109f:	eb 30                	jmp    c00010d1 <dlmalloc+0x9e>
c00010a1:	89 f0                	mov    eax,esi
c00010a3:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010a9:	77 2e                	ja     c00010d9 <dlmalloc+0xa6>
c00010ab:	c1 e8 03             	shr    eax,0x3
c00010ae:	8d 14 c5 b4 88 02 c0 	lea    edx,[eax*8-0x3ffd774c]
c00010b5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010b9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010bc:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010bf:	39 c3                	cmp    ebx,eax
c00010c1:	74 2e                	je     c00010f1 <dlmalloc+0xbe>
c00010c3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010c6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010cb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010ce:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010d1:	83 c0 08             	add    eax,0x8
c00010d4:	e9 e0 02 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c00010d9:	e8 8f fa ff ff       	call   c0000b6d <largebin_index>
c00010de:	83 e7 02             	and    edi,0x2
c00010e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010e5:	74 0a                	je     c00010f1 <dlmalloc+0xbe>
c00010e7:	b8 80 88 02 c0       	mov    eax,0xc0028880
c00010ec:	e8 00 fb ff ff       	call   c0000bf1 <malloc_consolidate>
c00010f1:	8d 46 10             	lea    eax,[esi+0x10]
c00010f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010f8:	8b 1d c0 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288c0
c00010fe:	81 fb b4 88 02 c0    	cmp    ebx,0xc00288b4
c0001104:	0f 84 13 01 00 00    	je     c000121d <dlmalloc+0x1ea>
c000110a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000110d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001110:	83 e7 fc             	and    edi,0xfffffffc
c0001113:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001119:	77 4c                	ja     c0001167 <dlmalloc+0x134>
c000111b:	3d b4 88 02 c0       	cmp    eax,0xc00288b4
c0001120:	75 45                	jne    c0001167 <dlmalloc+0x134>
c0001122:	39 1d b0 88 02 c0    	cmp    DWORD PTR ds:0xc00288b0,ebx
c0001128:	75 3d                	jne    c0001167 <dlmalloc+0x134>
c000112a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000112e:	73 37                	jae    c0001167 <dlmalloc+0x134>
c0001130:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001133:	89 fa                	mov    edx,edi
c0001135:	a3 bc 88 02 c0       	mov    ds:0xc00288bc,eax
c000113a:	a3 c0 88 02 c0       	mov    ds:0xc00288c0,eax
c000113f:	a3 b0 88 02 c0       	mov    ds:0xc00288b0,eax
c0001144:	29 f2                	sub    edx,esi
c0001146:	c7 40 08 b4 88 02 c0 	mov    DWORD PTR [eax+0x8],0xc00288b4
c000114d:	c7 40 0c b4 88 02 c0 	mov    DWORD PTR [eax+0xc],0xc00288b4
c0001154:	83 ce 01             	or     esi,0x1
c0001157:	89 d1                	mov    ecx,edx
c0001159:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000115c:	83 c9 01             	or     ecx,0x1
c000115f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001162:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001165:	eb 15                	jmp    c000117c <dlmalloc+0x149>
c0001167:	a3 c0 88 02 c0       	mov    ds:0xc00288c0,eax
c000116c:	39 fe                	cmp    esi,edi
c000116e:	c7 40 08 b4 88 02 c0 	mov    DWORD PTR [eax+0x8],0xc00288b4
c0001175:	75 0d                	jne    c0001184 <dlmalloc+0x151>
c0001177:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000117c:	8d 43 08             	lea    eax,[ebx+0x8]
c000117f:	e9 35 02 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001184:	89 f8                	mov    eax,edi
c0001186:	81 ff ff 00 00 00    	cmp    edi,0xff
c000118c:	77 19                	ja     c00011a7 <dlmalloc+0x174>
c000118e:	c1 e8 03             	shr    eax,0x3
c0001191:	8d 14 00             	lea    edx,[eax+eax*1]
c0001194:	83 c2 0d             	add    edx,0xd
c0001197:	8d 2c 95 78 88 02 c0 	lea    ebp,[edx*4-0x3ffd7788]
c000119e:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c00011a5:	eb 46                	jmp    c00011ed <dlmalloc+0x1ba>
c00011a7:	e8 c1 f9 ff ff       	call   c0000b6d <largebin_index>
c00011ac:	8d 14 00             	lea    edx,[eax+eax*1]
c00011af:	83 c2 0d             	add    edx,0xd
c00011b2:	8d 0c 95 80 88 02 c0 	lea    ecx,[edx*4-0x3ffd7780]
c00011b9:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c00011c0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011c3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011c7:	89 d5                	mov    ebp,edx
c00011c9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011cd:	74 1e                	je     c00011ed <dlmalloc+0x1ba>
c00011cf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011d2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011d5:	77 12                	ja     c00011e9 <dlmalloc+0x1b6>
c00011d7:	83 cf 01             	or     edi,0x1
c00011da:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011dd:	76 05                	jbe    c00011e4 <dlmalloc+0x1b1>
c00011df:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011e2:	eb f6                	jmp    c00011da <dlmalloc+0x1a7>
c00011e4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011e7:	eb 04                	jmp    c00011ed <dlmalloc+0x1ba>
c00011e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ed:	89 c7                	mov    edi,eax
c00011ef:	88 c1                	mov    cl,al
c00011f1:	c1 ff 05             	sar    edi,0x5
c00011f4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011f8:	bf 01 00 00 00       	mov    edi,0x1
c00011fd:	d3 e7                	shl    edi,cl
c00011ff:	89 f8                	mov    eax,edi
c0001201:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001205:	09 04 bd b4 8b 02 c0 	or     DWORD PTR [edi*4-0x3ffd744c],eax
c000120c:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000120f:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001212:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001215:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001218:	e9 db fe ff ff       	jmp    c00010f8 <dlmalloc+0xc5>
c000121d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001223:	76 78                	jbe    c000129d <dlmalloc+0x26a>
c0001225:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001229:	8d 04 c5 b4 88 02 c0 	lea    eax,[eax*8-0x3ffd774c]
c0001230:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001233:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001236:	39 ca                	cmp    edx,ecx
c0001238:	74 63                	je     c000129d <dlmalloc+0x26a>
c000123a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000123d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001240:	83 e3 fc             	and    ebx,0xfffffffc
c0001243:	39 de                	cmp    esi,ebx
c0001245:	77 52                	ja     c0001299 <dlmalloc+0x266>
c0001247:	89 df                	mov    edi,ebx
c0001249:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000124c:	29 f7                	sub    edi,esi
c000124e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001251:	01 d3                	add    ebx,edx
c0001253:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001256:	83 ff 0f             	cmp    edi,0xf
c0001259:	8d 42 08             	lea    eax,[edx+0x8]
c000125c:	77 09                	ja     c0001267 <dlmalloc+0x234>
c000125e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001262:	e9 52 01 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001267:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000126a:	83 ce 01             	or     esi,0x1
c000126d:	89 0d bc 88 02 c0    	mov    DWORD PTR ds:0xc00288bc,ecx
c0001273:	89 0d c0 88 02 c0    	mov    DWORD PTR ds:0xc00288c0,ecx
c0001279:	c7 41 08 b4 88 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00288b4
c0001280:	c7 41 0c b4 88 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00288b4
c0001287:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000128a:	89 fa                	mov    edx,edi
c000128c:	83 ca 01             	or     edx,0x1
c000128f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001292:	89 3b                	mov    DWORD PTR [ebx],edi
c0001294:	e9 20 01 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001299:	89 c2                	mov    edx,eax
c000129b:	eb 99                	jmp    c0001236 <dlmalloc+0x203>
c000129d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00012a1:	b8 01 00 00 00       	mov    eax,0x1
c00012a6:	41                   	inc    ecx
c00012a7:	89 cb                	mov    ebx,ecx
c00012a9:	8d 14 cd ac 88 02 c0 	lea    edx,[ecx*8-0x3ffd7754]
c00012b0:	c1 eb 05             	shr    ebx,0x5
c00012b3:	d3 e0                	shl    eax,cl
c00012b5:	8b 3c 9d b4 8b 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd744c]
c00012bc:	39 f8                	cmp    eax,edi
c00012be:	77 04                	ja     c00012c4 <dlmalloc+0x291>
c00012c0:	85 c0                	test   eax,eax
c00012c2:	75 26                	jne    c00012ea <dlmalloc+0x2b7>
c00012c4:	43                   	inc    ebx
c00012c5:	83 fb 02             	cmp    ebx,0x2
c00012c8:	0f 87 a6 00 00 00    	ja     c0001374 <dlmalloc+0x341>
c00012ce:	8b 3c 9d b4 8b 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd744c]
c00012d5:	85 ff                	test   edi,edi
c00012d7:	74 eb                	je     c00012c4 <dlmalloc+0x291>
c00012d9:	89 d8                	mov    eax,ebx
c00012db:	c1 e0 06             	shl    eax,0x6
c00012de:	8d 14 85 ac 88 02 c0 	lea    edx,[eax*4-0x3ffd7754]
c00012e5:	b8 01 00 00 00       	mov    eax,0x1
c00012ea:	85 f8                	test   eax,edi
c00012ec:	75 07                	jne    c00012f5 <dlmalloc+0x2c2>
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	01 c0                	add    eax,eax
c00012f3:	eb f5                	jmp    c00012ea <dlmalloc+0x2b7>
c00012f5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012f8:	39 ca                	cmp    edx,ecx
c00012fa:	75 14                	jne    c0001310 <dlmalloc+0x2dd>
c00012fc:	89 c1                	mov    ecx,eax
c00012fe:	83 c2 08             	add    edx,0x8
c0001301:	f7 d1                	not    ecx
c0001303:	01 c0                	add    eax,eax
c0001305:	21 cf                	and    edi,ecx
c0001307:	89 3c 9d b4 8b 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd744c],edi
c000130e:	eb ac                	jmp    c00012bc <dlmalloc+0x289>
c0001310:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001313:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001316:	83 e0 fc             	and    eax,0xfffffffc
c0001319:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000131c:	89 c3                	mov    ebx,eax
c000131e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001321:	29 f3                	sub    ebx,esi
c0001323:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001326:	83 fb 0f             	cmp    ebx,0xf
c0001329:	8d 41 08             	lea    eax,[ecx+0x8]
c000132c:	77 09                	ja     c0001337 <dlmalloc+0x304>
c000132e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001332:	e9 82 00 00 00       	jmp    c00013b9 <dlmalloc+0x386>
c0001337:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000133a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001340:	89 3d bc 88 02 c0    	mov    DWORD PTR ds:0xc00288bc,edi
c0001346:	89 3d c0 88 02 c0    	mov    DWORD PTR ds:0xc00288c0,edi
c000134c:	c7 47 08 b4 88 02 c0 	mov    DWORD PTR [edi+0x8],0xc00288b4
c0001353:	c7 47 0c b4 88 02 c0 	mov    DWORD PTR [edi+0xc],0xc00288b4
c000135a:	77 06                	ja     c0001362 <dlmalloc+0x32f>
c000135c:	89 3d b0 88 02 c0    	mov    DWORD PTR ds:0xc00288b0,edi
c0001362:	83 ce 01             	or     esi,0x1
c0001365:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001368:	89 d9                	mov    ecx,ebx
c000136a:	83 c9 01             	or     ecx,0x1
c000136d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001370:	89 1a                	mov    DWORD PTR [edx],ebx
c0001372:	eb 45                	jmp    c00013b9 <dlmalloc+0x386>
c0001374:	a1 ac 88 02 c0       	mov    eax,ds:0xc00288ac
c0001379:	8d 4e 10             	lea    ecx,[esi+0x10]
c000137c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000137f:	83 e2 fc             	and    edx,0xfffffffc
c0001382:	39 d1                	cmp    ecx,edx
c0001384:	77 1e                	ja     c00013a4 <dlmalloc+0x371>
c0001386:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001389:	89 f3                	mov    ebx,esi
c000138b:	89 0d ac 88 02 c0    	mov    DWORD PTR ds:0xc00288ac,ecx
c0001391:	83 cb 01             	or     ebx,0x1
c0001394:	29 f2                	sub    edx,esi
c0001396:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001399:	83 ca 01             	or     edx,0x1
c000139c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000139f:	e9 2d fd ff ff       	jmp    c00010d1 <dlmalloc+0x9e>
c00013a4:	83 c4 1c             	add    esp,0x1c
c00013a7:	89 f0                	mov    eax,esi
c00013a9:	5b                   	pop    ebx
c00013aa:	ba 80 88 02 c0       	mov    edx,0xc0028880
c00013af:	5e                   	pop    esi
c00013b0:	5f                   	pop    edi
c00013b1:	5d                   	pop    ebp
c00013b2:	e9 16 fa ff ff       	jmp    c0000dcd <sYSMALLOc>
c00013b7:	31 c0                	xor    eax,eax
c00013b9:	83 c4 1c             	add    esp,0x1c
c00013bc:	5b                   	pop    ebx
c00013bd:	5e                   	pop    esi
c00013be:	5f                   	pop    edi
c00013bf:	5d                   	pop    ebp
c00013c0:	c3                   	ret    

c00013c1 <iALLOc>:
c00013c1:	55                   	push   ebp
c00013c2:	89 c5                	mov    ebp,eax
c00013c4:	57                   	push   edi
c00013c5:	56                   	push   esi
c00013c6:	53                   	push   ebx
c00013c7:	83 ec 2c             	sub    esp,0x2c
c00013ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013ce:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013d6:	83 3d 80 88 02 c0 00 	cmp    DWORD PTR ds:0xc0028880,0x0
c00013dd:	75 12                	jne    c00013f1 <iALLOc+0x30>
c00013df:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013e3:	b8 80 88 02 c0       	mov    eax,0xc0028880
c00013e8:	e8 04 f8 ff ff       	call   c0000bf1 <malloc_consolidate>
c00013ed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013f6:	74 12                	je     c000140a <iALLOc+0x49>
c00013f8:	85 ed                	test   ebp,ebp
c00013fa:	0f 84 64 01 00 00    	je     c0001564 <iALLOc+0x1a3>
c0001400:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001408:	eb 33                	jmp    c000143d <iALLOc+0x7c>
c000140a:	85 ed                	test   ebp,ebp
c000140c:	75 14                	jne    c0001422 <iALLOc+0x61>
c000140e:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001416:	83 c4 2c             	add    esp,0x2c
c0001419:	5b                   	pop    ebx
c000141a:	5e                   	pop    esi
c000141b:	5f                   	pop    edi
c000141c:	5d                   	pop    ebp
c000141d:	e9 11 fc ff ff       	jmp    c0001033 <dlmalloc>
c0001422:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001429:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001431:	83 f8 0f             	cmp    eax,0xf
c0001434:	76 07                	jbe    c000143d <iALLOc+0x7c>
c0001436:	83 e0 f8             	and    eax,0xfffffff8
c0001439:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000143d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001442:	75 09                	jne    c000144d <iALLOc+0x8c>
c0001444:	89 d0                	mov    eax,edx
c0001446:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001449:	31 f6                	xor    esi,esi
c000144b:	eb 3b                	jmp    c0001488 <iALLOc+0xc7>
c000144d:	8b 02                	mov    eax,DWORD PTR [edx]
c000144f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001457:	83 c0 0b             	add    eax,0xb
c000145a:	83 f8 0f             	cmp    eax,0xf
c000145d:	76 07                	jbe    c0001466 <iALLOc+0xa5>
c000145f:	83 e0 f8             	and    eax,0xfffffff8
c0001462:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001466:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000146a:	0f af f5             	imul   esi,ebp
c000146d:	eb 25                	jmp    c0001494 <iALLOc+0xd3>
c000146f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001471:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001474:	bb 10 00 00 00       	mov    ebx,0x10
c0001479:	83 f9 0f             	cmp    ecx,0xf
c000147c:	76 05                	jbe    c0001483 <iALLOc+0xc2>
c000147e:	83 e1 f8             	and    ecx,0xfffffff8
c0001481:	89 cb                	mov    ebx,ecx
c0001483:	01 de                	add    esi,ebx
c0001485:	83 c0 04             	add    eax,0x4
c0001488:	39 c7                	cmp    edi,eax
c000148a:	75 e3                	jne    c000146f <iALLOc+0xae>
c000148c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001494:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001498:	8b 1d d4 8b 02 c0    	mov    ebx,DWORD PTR ds:0xc0028bd4
c000149e:	83 ec 0c             	sub    esp,0xc
c00014a1:	c7 05 d4 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028bd4,0x0
c00014ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00014af:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014b3:	50                   	push   eax
c00014b4:	e8 7a fb ff ff       	call   c0001033 <dlmalloc>
c00014b9:	83 c4 10             	add    esp,0x10
c00014bc:	89 1d d4 8b 02 c0    	mov    DWORD PTR ds:0xc0028bd4,ebx
c00014c2:	85 c0                	test   eax,eax
c00014c4:	0f 84 92 00 00 00    	je     c000155c <iALLOc+0x19b>
c00014ca:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014cd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014d0:	83 e3 fc             	and    ebx,0xfffffffc
c00014d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014d7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014dc:	74 1e                	je     c00014fc <iALLOc+0x13b>
c00014de:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014e2:	89 d9                	mov    ecx,ebx
c00014e4:	52                   	push   edx
c00014e5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014e9:	83 e9 04             	sub    ecx,0x4
c00014ec:	51                   	push   ecx
c00014ed:	6a 00                	push   0x0
c00014ef:	50                   	push   eax
c00014f0:	e8 9f f1 ff ff       	call   c0000694 <memset>
c00014f5:	83 c4 10             	add    esp,0x10
c00014f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001501:	75 14                	jne    c0001517 <iALLOc+0x156>
c0001503:	8d 04 37             	lea    eax,[edi+esi*1]
c0001506:	29 f3                	sub    ebx,esi
c0001508:	8d 48 08             	lea    ecx,[eax+0x8]
c000150b:	83 cb 01             	or     ebx,0x1
c000150e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001512:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001515:	89 f3                	mov    ebx,esi
c0001517:	31 c0                	xor    eax,eax
c0001519:	4d                   	dec    ebp
c000151a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000151d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001521:	39 c5                	cmp    ebp,eax
c0001523:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001526:	74 2c                	je     c0001554 <iALLOc+0x193>
c0001528:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000152c:	85 c9                	test   ecx,ecx
c000152e:	75 15                	jne    c0001545 <iALLOc+0x184>
c0001530:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001533:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001536:	b9 10 00 00 00       	mov    ecx,0x10
c000153b:	83 fe 0f             	cmp    esi,0xf
c000153e:	76 05                	jbe    c0001545 <iALLOc+0x184>
c0001540:	83 e6 f8             	and    esi,0xfffffff8
c0001543:	89 f1                	mov    ecx,esi
c0001545:	89 ce                	mov    esi,ecx
c0001547:	29 cb                	sub    ebx,ecx
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	40                   	inc    eax
c000154d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001550:	01 cf                	add    edi,ecx
c0001552:	eb c6                	jmp    c000151a <iALLOc+0x159>
c0001554:	83 cb 01             	or     ebx,0x1
c0001557:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000155a:	eb 08                	jmp    c0001564 <iALLOc+0x1a3>
c000155c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001564:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001568:	83 c4 2c             	add    esp,0x2c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	c3                   	ret    

c0001570 <dlrealloc>:
c0001570:	55                   	push   ebp
c0001571:	57                   	push   edi
c0001572:	56                   	push   esi
c0001573:	53                   	push   ebx
c0001574:	83 ec 1c             	sub    esp,0x1c
c0001577:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000157b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000157f:	85 db                	test   ebx,ebx
c0001581:	75 10                	jne    c0001593 <dlrealloc+0x23>
c0001583:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001587:	83 c4 1c             	add    esp,0x1c
c000158a:	5b                   	pop    ebx
c000158b:	5e                   	pop    esi
c000158c:	5f                   	pop    edi
c000158d:	5d                   	pop    ebp
c000158e:	e9 a0 fa ff ff       	jmp    c0001033 <dlmalloc>
c0001593:	83 f8 df             	cmp    eax,0xffffffdf
c0001596:	76 07                	jbe    c000159f <dlrealloc+0x2f>
c0001598:	31 db                	xor    ebx,ebx
c000159a:	e9 6a 01 00 00       	jmp    c0001709 <dlrealloc+0x199>
c000159f:	83 c0 0b             	add    eax,0xb
c00015a2:	bd 10 00 00 00       	mov    ebp,0x10
c00015a7:	83 f8 0f             	cmp    eax,0xf
c00015aa:	76 05                	jbe    c00015b1 <dlrealloc+0x41>
c00015ac:	83 e0 f8             	and    eax,0xfffffff8
c00015af:	89 c5                	mov    ebp,eax
c00015b1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015b4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015b7:	89 c6                	mov    esi,eax
c00015b9:	83 e6 fc             	and    esi,0xfffffffc
c00015bc:	a8 02                	test   al,0x2
c00015be:	75 d8                	jne    c0001598 <dlrealloc+0x28>
c00015c0:	39 f5                	cmp    ebp,esi
c00015c2:	0f 86 04 01 00 00    	jbe    c00016cc <dlrealloc+0x15c>
c00015c8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015cb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015ce:	39 15 ac 88 02 c0    	cmp    DWORD PTR ds:0xc00288ac,edx
c00015d4:	75 33                	jne    c0001609 <dlrealloc+0x99>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015df:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015e2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015e6:	77 49                	ja     c0001631 <dlrealloc+0xc1>
c00015e8:	01 ef                	add    edi,ebp
c00015ea:	83 e0 01             	and    eax,0x1
c00015ed:	09 e8                	or     eax,ebp
c00015ef:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015f2:	89 3d ac 88 02 c0    	mov    DWORD PTR ds:0xc00288ac,edi
c00015f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015fc:	29 e8                	sub    eax,ebp
c00015fe:	83 c8 01             	or     eax,0x1
c0001601:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001604:	e9 00 01 00 00       	jmp    c0001709 <dlrealloc+0x199>
c0001609:	89 c8                	mov    eax,ecx
c000160b:	83 e0 fe             	and    eax,0xfffffffe
c000160e:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001613:	75 1c                	jne    c0001631 <dlrealloc+0xc1>
c0001615:	83 e1 fc             	and    ecx,0xfffffffc
c0001618:	01 f1                	add    ecx,esi
c000161a:	39 cd                	cmp    ebp,ecx
c000161c:	77 13                	ja     c0001631 <dlrealloc+0xc1>
c000161e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001621:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001624:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001627:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000162a:	89 ce                	mov    esi,ecx
c000162c:	e9 9b 00 00 00       	jmp    c00016cc <dlrealloc+0x15c>
c0001631:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001635:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001638:	83 ec 0c             	sub    esp,0xc
c000163b:	50                   	push   eax
c000163c:	e8 f2 f9 ff ff       	call   c0001033 <dlmalloc>
c0001641:	83 c4 10             	add    esp,0x10
c0001644:	85 c0                	test   eax,eax
c0001646:	0f 84 4c ff ff ff    	je     c0001598 <dlrealloc+0x28>
c000164c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000164f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001653:	39 ca                	cmp    edx,ecx
c0001655:	75 0a                	jne    c0001661 <dlrealloc+0xf1>
c0001657:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000165a:	83 e0 fc             	and    eax,0xfffffffc
c000165d:	01 c6                	add    esi,eax
c000165f:	eb 6b                	jmp    c00016cc <dlrealloc+0x15c>
c0001661:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001664:	83 f9 27             	cmp    ecx,0x27
c0001667:	76 08                	jbe    c0001671 <dlrealloc+0x101>
c0001669:	89 de                	mov    esi,ebx
c000166b:	89 c7                	mov    edi,eax
c000166d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000166f:	eb 43                	jmp    c00016b4 <dlrealloc+0x144>
c0001671:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001673:	83 f9 13             	cmp    ecx,0x13
c0001676:	89 10                	mov    DWORD PTR [eax],edx
c0001678:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000167b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000167e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001681:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001684:	76 2e                	jbe    c00016b4 <dlrealloc+0x144>
c0001686:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001689:	83 f9 1b             	cmp    ecx,0x1b
c000168c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000168f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001692:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001695:	76 1d                	jbe    c00016b4 <dlrealloc+0x144>
c0001697:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000169a:	83 f9 23             	cmp    ecx,0x23
c000169d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00016a0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00016a3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00016a6:	76 0c                	jbe    c00016b4 <dlrealloc+0x144>
c00016a8:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00016ab:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00016ae:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016b1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016b8:	83 ec 0c             	sub    esp,0xc
c00016bb:	53                   	push   ebx
c00016bc:	e8 17 f6 ff ff       	call   c0000cd8 <dlfree>
c00016c1:	83 c4 10             	add    esp,0x10
c00016c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016c8:	89 c3                	mov    ebx,eax
c00016ca:	eb 3d                	jmp    c0001709 <dlrealloc+0x199>
c00016cc:	89 f2                	mov    edx,esi
c00016ce:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016d1:	29 ea                	sub    edx,ebp
c00016d3:	83 e1 01             	and    ecx,0x1
c00016d6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016d9:	83 fa 0f             	cmp    edx,0xf
c00016dc:	77 0b                	ja     c00016e9 <dlrealloc+0x179>
c00016de:	09 ce                	or     esi,ecx
c00016e0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016e3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e7:	eb 20                	jmp    c0001709 <dlrealloc+0x199>
c00016e9:	01 ef                	add    edi,ebp
c00016eb:	83 ec 0c             	sub    esp,0xc
c00016ee:	09 cd                	or     ebp,ecx
c00016f0:	83 ca 01             	or     edx,0x1
c00016f3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016f6:	83 c7 08             	add    edi,0x8
c00016f9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016fc:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001700:	57                   	push   edi
c0001701:	e8 d2 f5 ff ff       	call   c0000cd8 <dlfree>
c0001706:	83 c4 10             	add    esp,0x10
c0001709:	83 c4 1c             	add    esp,0x1c
c000170c:	89 d8                	mov    eax,ebx
c000170e:	5b                   	pop    ebx
c000170f:	5e                   	pop    esi
c0001710:	5f                   	pop    edi
c0001711:	5d                   	pop    ebp
c0001712:	c3                   	ret    

c0001713 <dlmemalign>:
c0001713:	55                   	push   ebp
c0001714:	57                   	push   edi
c0001715:	56                   	push   esi
c0001716:	53                   	push   ebx
c0001717:	83 ec 0c             	sub    esp,0xc
c000171a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000171e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001722:	83 fa 08             	cmp    edx,0x8
c0001725:	77 10                	ja     c0001737 <dlmemalign+0x24>
c0001727:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000172b:	83 c4 0c             	add    esp,0xc
c000172e:	5b                   	pop    ebx
c000172f:	5e                   	pop    esi
c0001730:	5f                   	pop    edi
c0001731:	5d                   	pop    ebp
c0001732:	e9 fc f8 ff ff       	jmp    c0001033 <dlmalloc>
c0001737:	bf 10 00 00 00       	mov    edi,0x10
c000173c:	83 fa 0f             	cmp    edx,0xf
c000173f:	76 13                	jbe    c0001754 <dlmemalign+0x41>
c0001741:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001744:	85 d1                	test   ecx,edx
c0001746:	75 04                	jne    c000174c <dlmemalign+0x39>
c0001748:	89 d7                	mov    edi,edx
c000174a:	eb 08                	jmp    c0001754 <dlmemalign+0x41>
c000174c:	39 d7                	cmp    edi,edx
c000174e:	73 04                	jae    c0001754 <dlmemalign+0x41>
c0001750:	01 ff                	add    edi,edi
c0001752:	eb f8                	jmp    c000174c <dlmemalign+0x39>
c0001754:	83 f8 df             	cmp    eax,0xffffffdf
c0001757:	76 07                	jbe    c0001760 <dlmemalign+0x4d>
c0001759:	31 c0                	xor    eax,eax
c000175b:	e9 ce 00 00 00       	jmp    c000182e <dlmemalign+0x11b>
c0001760:	83 c0 0b             	add    eax,0xb
c0001763:	bd 10 00 00 00       	mov    ebp,0x10
c0001768:	83 f8 0f             	cmp    eax,0xf
c000176b:	76 05                	jbe    c0001772 <dlmemalign+0x5f>
c000176d:	83 e0 f8             	and    eax,0xfffffff8
c0001770:	89 c5                	mov    ebp,eax
c0001772:	83 ec 0c             	sub    esp,0xc
c0001775:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001779:	50                   	push   eax
c000177a:	e8 b4 f8 ff ff       	call   c0001033 <dlmalloc>
c000177f:	83 c4 10             	add    esp,0x10
c0001782:	89 c1                	mov    ecx,eax
c0001784:	85 c0                	test   eax,eax
c0001786:	74 d1                	je     c0001759 <dlmemalign+0x46>
c0001788:	31 d2                	xor    edx,edx
c000178a:	8d 70 f8             	lea    esi,[eax-0x8]
c000178d:	f7 f7                	div    edi
c000178f:	85 d2                	test   edx,edx
c0001791:	74 62                	je     c00017f5 <dlmemalign+0xe2>
c0001793:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001797:	89 f8                	mov    eax,edi
c0001799:	f7 d8                	neg    eax
c000179b:	21 c3                	and    ebx,eax
c000179d:	83 eb 08             	sub    ebx,0x8
c00017a0:	89 d8                	mov    eax,ebx
c00017a2:	29 f0                	sub    eax,esi
c00017a4:	83 f8 0f             	cmp    eax,0xf
c00017a7:	77 02                	ja     c00017ab <dlmemalign+0x98>
c00017a9:	01 fb                	add    ebx,edi
c00017ab:	89 d8                	mov    eax,ebx
c00017ad:	29 f0                	sub    eax,esi
c00017af:	89 c6                	mov    esi,eax
c00017b1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017b4:	89 c2                	mov    edx,eax
c00017b6:	83 e2 fc             	and    edx,0xfffffffc
c00017b9:	29 f2                	sub    edx,esi
c00017bb:	a8 02                	test   al,0x2
c00017bd:	74 10                	je     c00017cf <dlmemalign+0xbc>
c00017bf:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017c2:	83 ca 02             	or     edx,0x2
c00017c5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017c8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ca:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017cd:	eb 5f                	jmp    c000182e <dlmemalign+0x11b>
c00017cf:	83 ec 0c             	sub    esp,0xc
c00017d2:	89 d0                	mov    eax,edx
c00017d4:	83 c8 01             	or     eax,0x1
c00017d7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017da:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017df:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017e2:	83 e0 01             	and    eax,0x1
c00017e5:	09 f0                	or     eax,esi
c00017e7:	89 de                	mov    esi,ebx
c00017e9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ec:	51                   	push   ecx
c00017ed:	e8 e6 f4 ff ff       	call   c0000cd8 <dlfree>
c00017f2:	83 c4 10             	add    esp,0x10
c00017f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017f8:	a8 02                	test   al,0x2
c00017fa:	75 2f                	jne    c000182b <dlmemalign+0x118>
c00017fc:	83 e0 fc             	and    eax,0xfffffffc
c00017ff:	8d 55 10             	lea    edx,[ebp+0x10]
c0001802:	39 c2                	cmp    edx,eax
c0001804:	73 25                	jae    c000182b <dlmemalign+0x118>
c0001806:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001809:	83 ec 0c             	sub    esp,0xc
c000180c:	29 e8                	sub    eax,ebp
c000180e:	83 c2 08             	add    edx,0x8
c0001811:	83 c8 01             	or     eax,0x1
c0001814:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001817:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000181a:	83 e0 01             	and    eax,0x1
c000181d:	09 c5                	or     ebp,eax
c000181f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001822:	52                   	push   edx
c0001823:	e8 b0 f4 ff ff       	call   c0000cd8 <dlfree>
c0001828:	83 c4 10             	add    esp,0x10
c000182b:	8d 46 08             	lea    eax,[esi+0x8]
c000182e:	83 c4 0c             	add    esp,0xc
c0001831:	5b                   	pop    ebx
c0001832:	5e                   	pop    esi
c0001833:	5f                   	pop    edi
c0001834:	5d                   	pop    ebp
c0001835:	c3                   	ret    

c0001836 <dlcalloc>:
c0001836:	53                   	push   ebx
c0001837:	83 ec 14             	sub    esp,0x14
c000183a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000183e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001843:	50                   	push   eax
c0001844:	e8 ea f7 ff ff       	call   c0001033 <dlmalloc>
c0001849:	83 c4 10             	add    esp,0x10
c000184c:	89 c3                	mov    ebx,eax
c000184e:	85 c0                	test   eax,eax
c0001850:	74 77                	je     c00018c9 <dlcalloc+0x93>
c0001852:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001855:	89 d0                	mov    eax,edx
c0001857:	83 e0 fc             	and    eax,0xfffffffc
c000185a:	80 e2 02             	and    dl,0x2
c000185d:	75 5a                	jne    c00018b9 <dlcalloc+0x83>
c000185f:	83 e8 04             	sub    eax,0x4
c0001862:	83 f8 27             	cmp    eax,0x27
c0001865:	76 03                	jbe    c000186a <dlcalloc+0x34>
c0001867:	51                   	push   ecx
c0001868:	eb 53                	jmp    c00018bd <dlcalloc+0x87>
c000186a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001870:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001877:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000187e:	83 f8 13             	cmp    eax,0x13
c0001881:	76 46                	jbe    c00018c9 <dlcalloc+0x93>
c0001883:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000188a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001891:	83 f8 1b             	cmp    eax,0x1b
c0001894:	76 33                	jbe    c00018c9 <dlcalloc+0x93>
c0001896:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000189d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00018a4:	83 f8 23             	cmp    eax,0x23
c00018a7:	76 20                	jbe    c00018c9 <dlcalloc+0x93>
c00018a9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018b0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018b7:	eb 10                	jmp    c00018c9 <dlcalloc+0x93>
c00018b9:	83 e8 08             	sub    eax,0x8
c00018bc:	52                   	push   edx
c00018bd:	50                   	push   eax
c00018be:	6a 00                	push   0x0
c00018c0:	53                   	push   ebx
c00018c1:	e8 ce ed ff ff       	call   c0000694 <memset>
c00018c6:	83 c4 10             	add    esp,0x10
c00018c9:	89 d8                	mov    eax,ebx
c00018cb:	83 c4 08             	add    esp,0x8
c00018ce:	5b                   	pop    ebx
c00018cf:	c3                   	ret    

c00018d0 <dlcfree>:
c00018d0:	e9 03 f4 ff ff       	jmp    c0000cd8 <dlfree>

c00018d5 <dlindependent_calloc>:
c00018d5:	83 ec 28             	sub    esp,0x28
c00018d8:	b9 03 00 00 00       	mov    ecx,0x3
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018e9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018f1:	e8 cb fa ff ff       	call   c00013c1 <iALLOc>
c00018f6:	83 c4 2c             	add    esp,0x2c
c00018f9:	c3                   	ret    

c00018fa <dlindependent_comalloc>:
c00018fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001902:	31 c9                	xor    ecx,ecx
c0001904:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001908:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000190c:	e9 b0 fa ff ff       	jmp    c00013c1 <iALLOc>

c0001911 <dlvalloc>:
c0001911:	83 ec 0c             	sub    esp,0xc
c0001914:	83 3d 80 88 02 c0 00 	cmp    DWORD PTR ds:0xc0028880,0x0
c000191b:	75 0a                	jne    c0001927 <dlvalloc+0x16>
c000191d:	b8 80 88 02 c0       	mov    eax,0xc0028880
c0001922:	e8 ca f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001927:	50                   	push   eax
c0001928:	50                   	push   eax
c0001929:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000192d:	ff 35 dc 8b 02 c0    	push   DWORD PTR ds:0xc0028bdc
c0001933:	e8 db fd ff ff       	call   c0001713 <dlmemalign>
c0001938:	83 c4 1c             	add    esp,0x1c
c000193b:	c3                   	ret    

c000193c <dlpvalloc>:
c000193c:	83 ec 0c             	sub    esp,0xc
c000193f:	83 3d 80 88 02 c0 00 	cmp    DWORD PTR ds:0xc0028880,0x0
c0001946:	75 0a                	jne    c0001952 <dlpvalloc+0x16>
c0001948:	b8 80 88 02 c0       	mov    eax,0xc0028880
c000194d:	e8 9f f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001952:	a1 dc 8b 02 c0       	mov    eax,ds:0xc0028bdc
c0001957:	89 c1                	mov    ecx,eax
c0001959:	52                   	push   edx
c000195a:	f7 d9                	neg    ecx
c000195c:	52                   	push   edx
c000195d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001961:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001965:	21 ca                	and    edx,ecx
c0001967:	52                   	push   edx
c0001968:	50                   	push   eax
c0001969:	e8 a5 fd ff ff       	call   c0001713 <dlmemalign>
c000196e:	83 c4 1c             	add    esp,0x1c
c0001971:	c3                   	ret    

c0001972 <dlmalloc_trim>:
c0001972:	b8 80 88 02 c0       	mov    eax,0xc0028880
c0001977:	e8 75 f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c000197c:	31 c0                	xor    eax,eax
c000197e:	c3                   	ret    

c000197f <dlmalloc_usable_size>:
c000197f:	53                   	push   ebx
c0001980:	31 c0                	xor    eax,eax
c0001982:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001986:	85 c9                	test   ecx,ecx
c0001988:	74 24                	je     c00019ae <dlmalloc_usable_size+0x2f>
c000198a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000198d:	f6 c2 02             	test   dl,0x2
c0001990:	74 08                	je     c000199a <dlmalloc_usable_size+0x1b>
c0001992:	83 e2 fc             	and    edx,0xfffffffc
c0001995:	8d 42 f8             	lea    eax,[edx-0x8]
c0001998:	eb 14                	jmp    c00019ae <dlmalloc_usable_size+0x2f>
c000199a:	89 d3                	mov    ebx,edx
c000199c:	31 c0                	xor    eax,eax
c000199e:	83 e3 fe             	and    ebx,0xfffffffe
c00019a1:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00019a6:	74 06                	je     c00019ae <dlmalloc_usable_size+0x2f>
c00019a8:	83 e2 fc             	and    edx,0xfffffffc
c00019ab:	8d 42 fc             	lea    eax,[edx-0x4]
c00019ae:	5b                   	pop    ebx
c00019af:	c3                   	ret    

c00019b0 <dlmallinfo>:
c00019b0:	55                   	push   ebp
c00019b1:	57                   	push   edi
c00019b2:	56                   	push   esi
c00019b3:	53                   	push   ebx
c00019b4:	83 ec 08             	sub    esp,0x8
c00019b7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019bb:	83 3d ac 88 02 c0 00 	cmp    DWORD PTR ds:0xc00288ac,0x0
c00019c2:	75 0a                	jne    c00019ce <dlmallinfo+0x1e>
c00019c4:	b8 80 88 02 c0       	mov    eax,0xc0028880
c00019c9:	e8 23 f2 ff ff       	call   c0000bf1 <malloc_consolidate>
c00019ce:	a1 ac 88 02 c0       	mov    eax,ds:0xc00288ac
c00019d3:	31 ed                	xor    ebp,ebp
c00019d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019d8:	31 c9                	xor    ecx,ecx
c00019da:	83 e0 fc             	and    eax,0xfffffffc
c00019dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019e1:	31 c0                	xor    eax,eax
c00019e3:	8b 14 85 84 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd777c]
c00019ea:	85 d2                	test   edx,edx
c00019ec:	74 0e                	je     c00019fc <dlmallinfo+0x4c>
c00019ee:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019f1:	45                   	inc    ebp
c00019f2:	83 e6 fc             	and    esi,0xfffffffc
c00019f5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019f8:	01 f1                	add    ecx,esi
c00019fa:	eb ee                	jmp    c00019ea <dlmallinfo+0x3a>
c00019fc:	40                   	inc    eax
c00019fd:	83 f8 0a             	cmp    eax,0xa
c0001a00:	75 e1                	jne    c00019e3 <dlmallinfo+0x33>
c0001a02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a06:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a0d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a10:	b8 b4 88 02 c0       	mov    eax,0xc00288b4
c0001a15:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a18:	39 f0                	cmp    eax,esi
c0001a1a:	74 10                	je     c0001a2c <dlmallinfo+0x7c>
c0001a1c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a1f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a22:	83 e7 fc             	and    edi,0xfffffffc
c0001a25:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a28:	01 fa                	add    edx,edi
c0001a2a:	eb ec                	jmp    c0001a18 <dlmallinfo+0x68>
c0001a2c:	83 c0 08             	add    eax,0x8
c0001a2f:	3d ac 8b 02 c0       	cmp    eax,0xc0028bac
c0001a34:	75 df                	jne    c0001a15 <dlmallinfo+0x65>
c0001a36:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a39:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a3c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a3f:	a1 e8 8b 02 c0       	mov    eax,ds:0xc0028be8
c0001a44:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a47:	89 03                	mov    DWORD PTR [ebx],eax
c0001a49:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a4c:	8b 35 d0 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028bd0
c0001a52:	29 d0                	sub    eax,edx
c0001a54:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a57:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a5a:	8b 35 e4 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028be4
c0001a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a64:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a67:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a6a:	8b 35 f4 8b 02 c0    	mov    esi,DWORD PTR ds:0xc0028bf4
c0001a70:	89 d8                	mov    eax,ebx
c0001a72:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a75:	83 c4 08             	add    esp,0x8
c0001a78:	5b                   	pop    ebx
c0001a79:	5e                   	pop    esi
c0001a7a:	5f                   	pop    edi
c0001a7b:	5d                   	pop    ebp
c0001a7c:	c2 04 00             	ret    0x4

c0001a7f <dlmalloc_stats>:
c0001a7f:	83 ec 30             	sub    esp,0x30
c0001a82:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a86:	50                   	push   eax
c0001a87:	e8 24 ff ff ff       	call   c00019b0 <dlmallinfo>
c0001a8c:	83 c4 30             	add    esp,0x30
c0001a8f:	c3                   	ret    

c0001a90 <dlmallopt>:
c0001a90:	56                   	push   esi
c0001a91:	b8 80 88 02 c0       	mov    eax,0xc0028880
c0001a96:	53                   	push   ebx
c0001a97:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a9f:	e8 4d f1 ff ff       	call   c0000bf1 <malloc_consolidate>
c0001aa4:	8d 46 04             	lea    eax,[esi+0x4]
c0001aa7:	83 f8 05             	cmp    eax,0x5
c0001aaa:	77 67                	ja     c0001b13 <dlmallopt+0x83>
c0001aac:	ff 24 85 64 40 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdbf9c]
c0001ab3:	83 fb 50             	cmp    ebx,0x50
c0001ab6:	77 5b                	ja     c0001b13 <dlmallopt+0x83>
c0001ab8:	ba 08 00 00 00       	mov    edx,0x8
c0001abd:	85 db                	test   ebx,ebx
c0001abf:	74 12                	je     c0001ad3 <dlmallopt+0x43>
c0001ac1:	83 c3 0b             	add    ebx,0xb
c0001ac4:	ba 10 00 00 00       	mov    edx,0x10
c0001ac9:	83 fb 0f             	cmp    ebx,0xf
c0001acc:	76 05                	jbe    c0001ad3 <dlmallopt+0x43>
c0001ace:	89 da                	mov    edx,ebx
c0001ad0:	83 e2 f8             	and    edx,0xfffffff8
c0001ad3:	a1 80 88 02 c0       	mov    eax,ds:0xc0028880
c0001ad8:	83 e0 03             	and    eax,0x3
c0001adb:	09 d0                	or     eax,edx
c0001add:	a3 80 88 02 c0       	mov    ds:0xc0028880,eax
c0001ae2:	eb 31                	jmp    c0001b15 <dlmallopt+0x85>
c0001ae4:	89 1d c4 8b 02 c0    	mov    DWORD PTR ds:0xc0028bc4,ebx
c0001aea:	eb 06                	jmp    c0001af2 <dlmallopt+0x62>
c0001aec:	89 1d c8 8b 02 c0    	mov    DWORD PTR ds:0xc0028bc8,ebx
c0001af2:	be 01 00 00 00       	mov    esi,0x1
c0001af7:	eb 1c                	jmp    c0001b15 <dlmallopt+0x85>
c0001af9:	89 1d cc 8b 02 c0    	mov    DWORD PTR ds:0xc0028bcc,ebx
c0001aff:	eb f1                	jmp    c0001af2 <dlmallopt+0x62>
c0001b01:	31 f6                	xor    esi,esi
c0001b03:	85 db                	test   ebx,ebx
c0001b05:	75 0e                	jne    c0001b15 <dlmallopt+0x85>
c0001b07:	c7 05 d4 8b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028bd4,0x0
c0001b11:	eb df                	jmp    c0001af2 <dlmallopt+0x62>
c0001b13:	31 f6                	xor    esi,esi
c0001b15:	89 f0                	mov    eax,esi
c0001b17:	5b                   	pop    ebx
c0001b18:	5e                   	pop    esi
c0001b19:	c3                   	ret    

c0001b1a <disk_status>:
c0001b1a:	31 c0                	xor    eax,eax
c0001b1c:	c3                   	ret    

c0001b1d <disk_initialize>:
c0001b1d:	31 c0                	xor    eax,eax
c0001b1f:	c3                   	ret    

c0001b20 <disk_read>:
c0001b20:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b25:	0f b6 04 85 40 a3 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5cc0]
c0001b2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b31:	e9 06 a6 01 00       	jmp    c001c13c <fatWrapperReadDisk>

c0001b36 <disk_write>:
c0001b36:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b3b:	0f b6 04 85 40 a3 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5cc0]
c0001b43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b47:	e9 38 a6 01 00       	jmp    c001c184 <fatWrapperWriteDisk>

c0001b4c <disk_ioctl>:
c0001b4c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b55:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b5a:	0f b6 04 85 40 a3 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5cc0]
c0001b62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b66:	e9 61 a6 01 00       	jmp    c001c1cc <fatWrapperIoctl>

c0001b6b <ld_word>:
c0001b6b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b6f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b72:	c1 e2 08             	shl    edx,0x8
c0001b75:	09 d0                	or     eax,edx
c0001b77:	c3                   	ret    

c0001b78 <ld_dword>:
c0001b78:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b7c:	89 d1                	mov    ecx,edx
c0001b7e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b82:	c1 e1 08             	shl    ecx,0x8
c0001b85:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b88:	09 ca                	or     edx,ecx
c0001b8a:	c1 e2 08             	shl    edx,0x8
c0001b8d:	09 d0                	or     eax,edx
c0001b8f:	c3                   	ret    

c0001b90 <ld_qword>:
c0001b90:	57                   	push   edi
c0001b91:	56                   	push   esi
c0001b92:	53                   	push   ebx
c0001b93:	31 db                	xor    ebx,ebx
c0001b95:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b98:	89 df                	mov    edi,ebx
c0001b9a:	89 ce                	mov    esi,ecx
c0001b9c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001ba0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba4:	c1 e6 08             	shl    esi,0x8
c0001ba7:	09 f2                	or     edx,esi
c0001ba9:	89 d6                	mov    esi,edx
c0001bab:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001baf:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb3:	c1 e6 08             	shl    esi,0x8
c0001bb6:	09 f2                	or     edx,esi
c0001bb8:	89 d6                	mov    esi,edx
c0001bba:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bbe:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bc2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bc5:	c1 e6 08             	shl    esi,0x8
c0001bc8:	89 fb                	mov    ebx,edi
c0001bca:	09 f2                	or     edx,esi
c0001bcc:	89 d1                	mov    ecx,edx
c0001bce:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bd2:	c1 e1 08             	shl    ecx,0x8
c0001bd5:	89 da                	mov    edx,ebx
c0001bd7:	09 c8                	or     eax,ecx
c0001bd9:	5b                   	pop    ebx
c0001bda:	5e                   	pop    esi
c0001bdb:	5f                   	pop    edi
c0001bdc:	c3                   	ret    

c0001bdd <st_word>:
c0001bdd:	66 89 10             	mov    WORD PTR [eax],dx
c0001be0:	c3                   	ret    

c0001be1 <st_dword>:
c0001be1:	89 10                	mov    DWORD PTR [eax],edx
c0001be3:	c3                   	ret    

c0001be4 <st_qword>:
c0001be4:	89 10                	mov    DWORD PTR [eax],edx
c0001be6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001be9:	c3                   	ret    

c0001bea <mem_cpy>:
c0001bea:	85 c9                	test   ecx,ecx
c0001bec:	74 10                	je     c0001bfe <mem_cpy+0x14>
c0001bee:	57                   	push   edi
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	56                   	push   esi
c0001bf2:	89 c7                	mov    edi,eax
c0001bf4:	89 d6                	mov    esi,edx
c0001bf6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001bf7:	39 f9                	cmp    ecx,edi
c0001bf9:	75 fb                	jne    c0001bf6 <mem_cpy+0xc>
c0001bfb:	5e                   	pop    esi
c0001bfc:	5f                   	pop    edi
c0001bfd:	c3                   	ret    
c0001bfe:	c3                   	ret    

c0001bff <mem_set>:
c0001bff:	01 c1                	add    ecx,eax
c0001c01:	40                   	inc    eax
c0001c02:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001c05:	39 c8                	cmp    eax,ecx
c0001c07:	75 f8                	jne    c0001c01 <mem_set+0x2>
c0001c09:	c3                   	ret    

c0001c0a <mem_cmp>:
c0001c0a:	57                   	push   edi
c0001c0b:	56                   	push   esi
c0001c0c:	89 c6                	mov    esi,eax
c0001c0e:	53                   	push   ebx
c0001c0f:	46                   	inc    esi
c0001c10:	42                   	inc    edx
c0001c11:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c15:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c19:	29 fb                	sub    ebx,edi
c0001c1b:	89 cf                	mov    edi,ecx
c0001c1d:	29 f7                	sub    edi,esi
c0001c1f:	01 c7                	add    edi,eax
c0001c21:	74 04                	je     c0001c27 <mem_cmp+0x1d>
c0001c23:	85 db                	test   ebx,ebx
c0001c25:	74 e8                	je     c0001c0f <mem_cmp+0x5>
c0001c27:	89 d8                	mov    eax,ebx
c0001c29:	5b                   	pop    ebx
c0001c2a:	5e                   	pop    esi
c0001c2b:	5f                   	pop    edi
c0001c2c:	c3                   	ret    

c0001c2d <chk_chr>:
c0001c2d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c30:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c33:	74 07                	je     c0001c3c <chk_chr+0xf>
c0001c35:	39 d1                	cmp    ecx,edx
c0001c37:	74 03                	je     c0001c3c <chk_chr+0xf>
c0001c39:	40                   	inc    eax
c0001c3a:	eb f1                	jmp    c0001c2d <chk_chr>
c0001c3c:	89 c8                	mov    eax,ecx
c0001c3e:	c3                   	ret    

c0001c3f <dbc_1st>:
c0001c3f:	31 c0                	xor    eax,eax
c0001c41:	c3                   	ret    

c0001c42 <dbc_2nd>:
c0001c42:	31 c0                	xor    eax,eax
c0001c44:	c3                   	ret    

c0001c45 <tchar2uni>:
c0001c45:	57                   	push   edi
c0001c46:	89 c7                	mov    edi,eax
c0001c48:	56                   	push   esi
c0001c49:	53                   	push   ebx
c0001c4a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c4c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c4e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c51:	84 c9                	test   cl,cl
c0001c53:	78 0a                	js     c0001c5f <tchar2uni+0x1a>
c0001c55:	0f b6 d1             	movzx  edx,cl
c0001c58:	89 f3                	mov    ebx,esi
c0001c5a:	e9 9f 00 00 00       	jmp    c0001cfe <tchar2uni+0xb9>
c0001c5f:	88 ca                	mov    dl,cl
c0001c61:	83 e2 e0             	and    edx,0xffffffe0
c0001c64:	80 fa c0             	cmp    dl,0xc0
c0001c67:	75 0c                	jne    c0001c75 <tchar2uni+0x30>
c0001c69:	89 ca                	mov    edx,ecx
c0001c6b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c70:	83 e2 1f             	and    edx,0x1f
c0001c73:	eb 2e                	jmp    c0001ca3 <tchar2uni+0x5e>
c0001c75:	88 ca                	mov    dl,cl
c0001c77:	83 e2 f0             	and    edx,0xfffffff0
c0001c7a:	80 fa e0             	cmp    dl,0xe0
c0001c7d:	75 0c                	jne    c0001c8b <tchar2uni+0x46>
c0001c7f:	89 ca                	mov    edx,ecx
c0001c81:	b9 02 00 00 00       	mov    ecx,0x2
c0001c86:	83 e2 0f             	and    edx,0xf
c0001c89:	eb 18                	jmp    c0001ca3 <tchar2uni+0x5e>
c0001c8b:	88 ca                	mov    dl,cl
c0001c8d:	83 e2 f8             	and    edx,0xfffffff8
c0001c90:	88 d0                	mov    al,dl
c0001c92:	83 ca ff             	or     edx,0xffffffff
c0001c95:	3c f0                	cmp    al,0xf0
c0001c97:	75 6c                	jne    c0001d05 <tchar2uni+0xc0>
c0001c99:	89 ca                	mov    edx,ecx
c0001c9b:	b9 03 00 00 00       	mov    ecx,0x3
c0001ca0:	83 e2 07             	and    edx,0x7
c0001ca3:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ca7:	46                   	inc    esi
c0001ca8:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001cab:	88 c8                	mov    al,cl
c0001cad:	83 e0 c0             	and    eax,0xffffffc0
c0001cb0:	3c 80                	cmp    al,0x80
c0001cb2:	75 4e                	jne    c0001d02 <tchar2uni+0xbd>
c0001cb4:	c1 e2 06             	shl    edx,0x6
c0001cb7:	83 e1 3f             	and    ecx,0x3f
c0001cba:	09 ca                	or     edx,ecx
c0001cbc:	39 de                	cmp    esi,ebx
c0001cbe:	75 e7                	jne    c0001ca7 <tchar2uni+0x62>
c0001cc0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cc3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cc9:	77 37                	ja     c0001d02 <tchar2uni+0xbd>
c0001ccb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cd1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cd7:	76 29                	jbe    c0001d02 <tchar2uni+0xbd>
c0001cd9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001cdf:	76 1d                	jbe    c0001cfe <tchar2uni+0xb9>
c0001ce1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ce7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001ced:	c1 e1 06             	shl    ecx,0x6
c0001cf0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001cf6:	09 ca                	or     edx,ecx
c0001cf8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cfe:	89 1f                	mov    DWORD PTR [edi],ebx
c0001d00:	eb 03                	jmp    c0001d05 <tchar2uni+0xc0>
c0001d02:	83 ca ff             	or     edx,0xffffffff
c0001d05:	5b                   	pop    ebx
c0001d06:	89 d0                	mov    eax,edx
c0001d08:	5e                   	pop    esi
c0001d09:	5f                   	pop    edi
c0001d0a:	c3                   	ret    

c0001d0b <put_utf>:
c0001d0b:	53                   	push   ebx
c0001d0c:	83 f8 7f             	cmp    eax,0x7f
c0001d0f:	89 c3                	mov    ebx,eax
c0001d11:	b0 00                	mov    al,0x0
c0001d13:	77 11                	ja     c0001d26 <put_utf+0x1b>
c0001d15:	85 c9                	test   ecx,ecx
c0001d17:	0f 84 e5 00 00 00    	je     c0001e02 <put_utf+0xf7>
c0001d1d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d1f:	b0 01                	mov    al,0x1
c0001d21:	e9 dc 00 00 00       	jmp    c0001e02 <put_utf+0xf7>
c0001d26:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d2c:	77 23                	ja     c0001d51 <put_utf+0x46>
c0001d2e:	83 f9 01             	cmp    ecx,0x1
c0001d31:	0f 86 cb 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d37:	89 d8                	mov    eax,ebx
c0001d39:	83 e3 3f             	and    ebx,0x3f
c0001d3c:	c1 e8 06             	shr    eax,0x6
c0001d3f:	83 cb 80             	or     ebx,0xffffff80
c0001d42:	83 c8 c0             	or     eax,0xffffffc0
c0001d45:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d48:	88 02                	mov    BYTE PTR [edx],al
c0001d4a:	b0 02                	mov    al,0x2
c0001d4c:	e9 b1 00 00 00       	jmp    c0001e02 <put_utf+0xf7>
c0001d51:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d57:	77 40                	ja     c0001d99 <put_utf+0x8e>
c0001d59:	83 f9 02             	cmp    ecx,0x2
c0001d5c:	0f 86 a0 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d62:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d68:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d6e:	0f 86 8e 00 00 00    	jbe    c0001e02 <put_utf+0xf7>
c0001d74:	89 d8                	mov    eax,ebx
c0001d76:	c1 e8 0c             	shr    eax,0xc
c0001d79:	83 c8 e0             	or     eax,0xffffffe0
c0001d7c:	88 02                	mov    BYTE PTR [edx],al
c0001d7e:	89 d8                	mov    eax,ebx
c0001d80:	83 e3 3f             	and    ebx,0x3f
c0001d83:	c1 e8 06             	shr    eax,0x6
c0001d86:	83 cb 80             	or     ebx,0xffffff80
c0001d89:	83 e0 3f             	and    eax,0x3f
c0001d8c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d8f:	83 c8 80             	or     eax,0xffffff80
c0001d92:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d95:	b0 03                	mov    al,0x3
c0001d97:	eb 69                	jmp    c0001e02 <put_utf+0xf7>
c0001d99:	83 f9 03             	cmp    ecx,0x3
c0001d9c:	76 64                	jbe    c0001e02 <put_utf+0xf7>
c0001d9e:	89 d9                	mov    ecx,ebx
c0001da0:	0f b7 c3             	movzx  eax,bx
c0001da3:	66 31 c9             	xor    cx,cx
c0001da6:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001dac:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001db2:	c1 e9 06             	shr    ecx,0x6
c0001db5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dbb:	77 43                	ja     c0001e00 <put_utf+0xf5>
c0001dbd:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001dc3:	77 3b                	ja     c0001e00 <put_utf+0xf5>
c0001dc5:	09 cb                	or     ebx,ecx
c0001dc7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dcd:	89 d8                	mov    eax,ebx
c0001dcf:	c1 e8 12             	shr    eax,0x12
c0001dd2:	83 c8 f0             	or     eax,0xfffffff0
c0001dd5:	88 02                	mov    BYTE PTR [edx],al
c0001dd7:	89 d8                	mov    eax,ebx
c0001dd9:	c1 e8 0c             	shr    eax,0xc
c0001ddc:	83 e0 3f             	and    eax,0x3f
c0001ddf:	83 c8 80             	or     eax,0xffffff80
c0001de2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001de5:	89 d8                	mov    eax,ebx
c0001de7:	83 e3 3f             	and    ebx,0x3f
c0001dea:	c1 e8 06             	shr    eax,0x6
c0001ded:	83 cb 80             	or     ebx,0xffffff80
c0001df0:	83 e0 3f             	and    eax,0x3f
c0001df3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001df6:	83 c8 80             	or     eax,0xffffff80
c0001df9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dfc:	b0 04                	mov    al,0x4
c0001dfe:	eb 02                	jmp    c0001e02 <put_utf+0xf7>
c0001e00:	31 c0                	xor    eax,eax
c0001e02:	5b                   	pop    ebx
c0001e03:	c3                   	ret    

c0001e04 <clst2sect>:
c0001e04:	89 c1                	mov    ecx,eax
c0001e06:	83 ea 02             	sub    edx,0x2
c0001e09:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001e0c:	83 e8 02             	sub    eax,0x2
c0001e0f:	39 d0                	cmp    eax,edx
c0001e11:	76 0d                	jbe    c0001e20 <clst2sect+0x1c>
c0001e13:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e17:	f7 e2                	mul    edx
c0001e19:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e1c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e1f:	c3                   	ret    
c0001e20:	31 c0                	xor    eax,eax
c0001e22:	31 d2                	xor    edx,edx
c0001e24:	c3                   	ret    

c0001e25 <clmt_clust>:
c0001e25:	57                   	push   edi
c0001e26:	89 cf                	mov    edi,ecx
c0001e28:	56                   	push   esi
c0001e29:	89 d6                	mov    esi,edx
c0001e2b:	53                   	push   ebx
c0001e2c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e30:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e33:	89 f2                	mov    edx,esi
c0001e35:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e37:	c1 ef 09             	shr    edi,0x9
c0001e3a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e3e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e41:	89 f9                	mov    ecx,edi
c0001e43:	31 ff                	xor    edi,edi
c0001e45:	57                   	push   edi
c0001e46:	56                   	push   esi
c0001e47:	51                   	push   ecx
c0001e48:	52                   	push   edx
c0001e49:	e8 42 12 02 00       	call   c0023090 <__udivdi3>
c0001e4e:	83 c4 10             	add    esp,0x10
c0001e51:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e53:	85 d2                	test   edx,edx
c0001e55:	74 10                	je     c0001e67 <clmt_clust+0x42>
c0001e57:	39 d0                	cmp    eax,edx
c0001e59:	72 07                	jb     c0001e62 <clmt_clust+0x3d>
c0001e5b:	29 d0                	sub    eax,edx
c0001e5d:	83 c3 08             	add    ebx,0x8
c0001e60:	eb ef                	jmp    c0001e51 <clmt_clust+0x2c>
c0001e62:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e65:	89 c2                	mov    edx,eax
c0001e67:	5b                   	pop    ebx
c0001e68:	89 d0                	mov    eax,edx
c0001e6a:	5e                   	pop    esi
c0001e6b:	5f                   	pop    edi
c0001e6c:	c3                   	ret    

c0001e6d <pick_lfn>:
c0001e6d:	55                   	push   ebp
c0001e6e:	57                   	push   edi
c0001e6f:	56                   	push   esi
c0001e70:	89 d6                	mov    esi,edx
c0001e72:	53                   	push   ebx
c0001e73:	89 c3                	mov    ebx,eax
c0001e75:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e78:	e8 ee fc ff ff       	call   c0001b6b <ld_word>
c0001e7d:	66 85 c0             	test   ax,ax
c0001e80:	74 04                	je     c0001e86 <pick_lfn+0x19>
c0001e82:	31 c0                	xor    eax,eax
c0001e84:	eb 5c                	jmp    c0001ee2 <pick_lfn+0x75>
c0001e86:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e89:	bd 01 00 00 00       	mov    ebp,0x1
c0001e8e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e91:	31 ff                	xor    edi,edi
c0001e93:	49                   	dec    ecx
c0001e94:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e97:	0f b6 87 80 41 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdbe80]
c0001e9e:	01 f0                	add    eax,esi
c0001ea0:	e8 c6 fc ff ff       	call   c0001b6b <ld_word>
c0001ea5:	66 85 ed             	test   bp,bp
c0001ea8:	74 11                	je     c0001ebb <pick_lfn+0x4e>
c0001eaa:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001eb0:	77 d0                	ja     c0001e82 <pick_lfn+0x15>
c0001eb2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001eb6:	89 c5                	mov    ebp,eax
c0001eb8:	41                   	inc    ecx
c0001eb9:	eb 04                	jmp    c0001ebf <pick_lfn+0x52>
c0001ebb:	66 40                	inc    ax
c0001ebd:	75 c3                	jne    c0001e82 <pick_lfn+0x15>
c0001ebf:	47                   	inc    edi
c0001ec0:	83 ff 0d             	cmp    edi,0xd
c0001ec3:	75 d2                	jne    c0001e97 <pick_lfn+0x2a>
c0001ec5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ec8:	74 13                	je     c0001edd <pick_lfn+0x70>
c0001eca:	66 85 ed             	test   bp,bp
c0001ecd:	74 0e                	je     c0001edd <pick_lfn+0x70>
c0001ecf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ed5:	77 ab                	ja     c0001e82 <pick_lfn+0x15>
c0001ed7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001edd:	b8 01 00 00 00       	mov    eax,0x1
c0001ee2:	5b                   	pop    ebx
c0001ee3:	5e                   	pop    esi
c0001ee4:	5f                   	pop    edi
c0001ee5:	5d                   	pop    ebp
c0001ee6:	c3                   	ret    

c0001ee7 <put_lfn>:
c0001ee7:	55                   	push   ebp
c0001ee8:	31 ed                	xor    ebp,ebp
c0001eea:	57                   	push   edi
c0001eeb:	89 d7                	mov    edi,edx
c0001eed:	56                   	push   esi
c0001eee:	31 f6                	xor    esi,esi
c0001ef0:	53                   	push   ebx
c0001ef1:	83 ec 08             	sub    esp,0x8
c0001ef4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ef7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eff:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001f05:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001f08:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f0b:	31 d2                	xor    edx,edx
c0001f0d:	e8 cb fc ff ff       	call   c0001bdd <st_word>
c0001f12:	0f b6 d9             	movzx  ebx,cl
c0001f15:	4b                   	dec    ebx
c0001f16:	6b db 0d             	imul   ebx,ebx,0xd
c0001f19:	66 83 fe ff          	cmp    si,0xffff
c0001f1d:	74 08                	je     c0001f27 <put_lfn+0x40>
c0001f1f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f22:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f26:	43                   	inc    ebx
c0001f27:	0f b6 85 80 41 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdbe80]
c0001f2e:	0f b7 d6             	movzx  edx,si
c0001f31:	01 f8                	add    eax,edi
c0001f33:	e8 a5 fc ff ff       	call   c0001bdd <st_word>
c0001f38:	66 85 f6             	test   si,si
c0001f3b:	75 03                	jne    c0001f40 <put_lfn+0x59>
c0001f3d:	83 ce ff             	or     esi,0xffffffff
c0001f40:	45                   	inc    ebp
c0001f41:	83 fd 0d             	cmp    ebp,0xd
c0001f44:	75 d3                	jne    c0001f19 <put_lfn+0x32>
c0001f46:	66 46                	inc    si
c0001f48:	74 0a                	je     c0001f54 <put_lfn+0x6d>
c0001f4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f4d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f52:	75 09                	jne    c0001f5d <put_lfn+0x76>
c0001f54:	88 c8                	mov    al,cl
c0001f56:	83 c8 40             	or     eax,0x40
c0001f59:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f5d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f61:	88 07                	mov    BYTE PTR [edi],al
c0001f63:	83 c4 08             	add    esp,0x8
c0001f66:	5b                   	pop    ebx
c0001f67:	5e                   	pop    esi
c0001f68:	5f                   	pop    edi
c0001f69:	5d                   	pop    ebp
c0001f6a:	c3                   	ret    

c0001f6b <gen_numname>:
c0001f6b:	57                   	push   edi
c0001f6c:	89 cf                	mov    edi,ecx
c0001f6e:	56                   	push   esi
c0001f6f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f74:	53                   	push   ebx
c0001f75:	89 c6                	mov    esi,eax
c0001f77:	83 ec 10             	sub    esp,0x10
c0001f7a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f7e:	e8 67 fc ff ff       	call   c0001bea <mem_cpy>
c0001f83:	83 fb 05             	cmp    ebx,0x5
c0001f86:	76 2d                	jbe    c0001fb5 <gen_numname+0x4a>
c0001f88:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f8b:	66 85 c0             	test   ax,ax
c0001f8e:	74 25                	je     c0001fb5 <gen_numname+0x4a>
c0001f90:	83 c7 02             	add    edi,0x2
c0001f93:	ba 10 00 00 00       	mov    edx,0x10
c0001f98:	01 db                	add    ebx,ebx
c0001f9a:	89 c1                	mov    ecx,eax
c0001f9c:	66 d1 e8             	shr    ax,1
c0001f9f:	83 e1 01             	and    ecx,0x1
c0001fa2:	01 cb                	add    ebx,ecx
c0001fa4:	0f ba e3 10          	bt     ebx,0x10
c0001fa8:	73 06                	jae    c0001fb0 <gen_numname+0x45>
c0001faa:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fb0:	4a                   	dec    edx
c0001fb1:	75 e5                	jne    c0001f98 <gen_numname+0x2d>
c0001fb3:	eb d3                	jmp    c0001f88 <gen_numname+0x1d>
c0001fb5:	b8 07 00 00 00       	mov    eax,0x7
c0001fba:	88 d9                	mov    cl,bl
c0001fbc:	83 e1 0f             	and    ecx,0xf
c0001fbf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fc2:	80 fa 39             	cmp    dl,0x39
c0001fc5:	76 03                	jbe    c0001fca <gen_numname+0x5f>
c0001fc7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fca:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fcd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fd1:	89 da                	mov    edx,ebx
c0001fd3:	c1 ea 04             	shr    edx,0x4
c0001fd6:	83 fb 0f             	cmp    ebx,0xf
c0001fd9:	76 06                	jbe    c0001fe1 <gen_numname+0x76>
c0001fdb:	89 c8                	mov    eax,ecx
c0001fdd:	89 d3                	mov    ebx,edx
c0001fdf:	eb d9                	jmp    c0001fba <gen_numname+0x4f>
c0001fe1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fe6:	31 d2                	xor    edx,edx
c0001fe8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001feb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fee:	39 ca                	cmp    edx,ecx
c0001ff0:	73 18                	jae    c000200a <gen_numname+0x9f>
c0001ff2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ff5:	3c 20                	cmp    al,0x20
c0001ff7:	74 11                	je     c000200a <gen_numname+0x9f>
c0001ff9:	e8 41 fc ff ff       	call   c0001c3f <dbc_1st>
c0001ffe:	85 c0                	test   eax,eax
c0002000:	74 05                	je     c0002007 <gen_numname+0x9c>
c0002002:	39 d3                	cmp    ebx,edx
c0002004:	74 04                	je     c000200a <gen_numname+0x9f>
c0002006:	42                   	inc    edx
c0002007:	42                   	inc    edx
c0002008:	eb e1                	jmp    c0001feb <gen_numname+0x80>
c000200a:	b0 20                	mov    al,0x20
c000200c:	83 f9 07             	cmp    ecx,0x7
c000200f:	77 05                	ja     c0002016 <gen_numname+0xab>
c0002011:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002015:	41                   	inc    ecx
c0002016:	42                   	inc    edx
c0002017:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000201b:	83 fa 07             	cmp    edx,0x7
c000201e:	76 ea                	jbe    c000200a <gen_numname+0x9f>
c0002020:	83 c4 10             	add    esp,0x10
c0002023:	5b                   	pop    ebx
c0002024:	5e                   	pop    esi
c0002025:	5f                   	pop    edi
c0002026:	c3                   	ret    

c0002027 <sum_sfn>:
c0002027:	31 c9                	xor    ecx,ecx
c0002029:	31 d2                	xor    edx,edx
c000202b:	d0 ca                	ror    dl,1
c000202d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002030:	41                   	inc    ecx
c0002031:	83 f9 0b             	cmp    ecx,0xb
c0002034:	75 f5                	jne    c000202b <sum_sfn+0x4>
c0002036:	88 d0                	mov    al,dl
c0002038:	c3                   	ret    

c0002039 <xdir_sum>:
c0002039:	56                   	push   esi
c000203a:	31 c9                	xor    ecx,ecx
c000203c:	53                   	push   ebx
c000203d:	31 d2                	xor    edx,edx
c000203f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002043:	43                   	inc    ebx
c0002044:	c1 e3 05             	shl    ebx,0x5
c0002047:	83 fa 02             	cmp    edx,0x2
c000204a:	74 0b                	je     c0002057 <xdir_sum+0x1e>
c000204c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002050:	66 d1 c9             	ror    cx,1
c0002053:	01 f1                	add    ecx,esi
c0002055:	eb 05                	jmp    c000205c <xdir_sum+0x23>
c0002057:	ba 03 00 00 00       	mov    edx,0x3
c000205c:	42                   	inc    edx
c000205d:	39 d3                	cmp    ebx,edx
c000205f:	77 e6                	ja     c0002047 <xdir_sum+0xe>
c0002061:	89 c8                	mov    eax,ecx
c0002063:	5b                   	pop    ebx
c0002064:	5e                   	pop    esi
c0002065:	c3                   	ret    

c0002066 <xsum32>:
c0002066:	d1 ca                	ror    edx,1
c0002068:	0f b6 c0             	movzx  eax,al
c000206b:	01 d0                	add    eax,edx
c000206d:	c3                   	ret    

c000206e <get_xfileinfo>:
c000206e:	55                   	push   ebp
c000206f:	31 c9                	xor    ecx,ecx
c0002071:	57                   	push   edi
c0002072:	bd 40 00 00 00       	mov    ebp,0x40
c0002077:	56                   	push   esi
c0002078:	31 ff                	xor    edi,edi
c000207a:	53                   	push   ebx
c000207b:	89 c6                	mov    esi,eax
c000207d:	83 ec 0c             	sub    esp,0xc
c0002080:	89 d3                	mov    ebx,edx
c0002082:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002089:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000208d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002090:	76 6d                	jbe    c00020ff <get_xfileinfo+0x91>
c0002092:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002098:	76 0b                	jbe    c00020a5 <get_xfileinfo+0x37>
c000209a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000209e:	bf 01 00 00 00       	mov    edi,0x1
c00020a3:	eb 63                	jmp    c0002108 <get_xfileinfo+0x9a>
c00020a5:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00020ab:	75 03                	jne    c00020b0 <get_xfileinfo+0x42>
c00020ad:	83 c5 02             	add    ebp,0x2
c00020b0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020b3:	83 c5 02             	add    ebp,0x2
c00020b6:	e8 b0 fa ff ff       	call   c0001b6b <ld_word>
c00020bb:	ff 04 24             	inc    DWORD PTR [esp]
c00020be:	66 85 c9             	test   cx,cx
c00020c1:	75 0d                	jne    c00020d0 <get_xfileinfo+0x62>
c00020c3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020c9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020ce:	76 2b                	jbe    c00020fb <get_xfileinfo+0x8d>
c00020d0:	c1 e1 10             	shl    ecx,0x10
c00020d3:	ba ff 00 00 00       	mov    edx,0xff
c00020d8:	0f b7 c0             	movzx  eax,ax
c00020db:	29 fa                	sub    edx,edi
c00020dd:	09 c8                	or     eax,ecx
c00020df:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020e3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020eb:	e8 1b fc ff ff       	call   c0001d0b <put_utf>
c00020f0:	84 c0                	test   al,al
c00020f2:	74 a6                	je     c000209a <get_xfileinfo+0x2c>
c00020f4:	0f b6 c0             	movzx  eax,al
c00020f7:	01 c7                	add    edi,eax
c00020f9:	31 c0                	xor    eax,eax
c00020fb:	89 c1                	mov    ecx,eax
c00020fd:	eb 8a                	jmp    c0002089 <get_xfileinfo+0x1b>
c00020ff:	85 ff                	test   edi,edi
c0002101:	74 97                	je     c000209a <get_xfileinfo+0x2c>
c0002103:	66 85 c9             	test   cx,cx
c0002106:	75 92                	jne    c000209a <get_xfileinfo+0x2c>
c0002108:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000210d:	31 c0                	xor    eax,eax
c000210f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002113:	31 d2                	xor    edx,edx
c0002115:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002118:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000211b:	80 e1 10             	and    cl,0x10
c000211e:	75 08                	jne    c0002128 <get_xfileinfo+0xba>
c0002120:	8d 46 38             	lea    eax,[esi+0x38]
c0002123:	e8 68 fa ff ff       	call   c0001b90 <ld_qword>
c0002128:	89 03                	mov    DWORD PTR [ebx],eax
c000212a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000212d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002130:	e8 36 fa ff ff       	call   c0001b6b <ld_word>
c0002135:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002139:	8d 46 0e             	lea    eax,[esi+0xe]
c000213c:	e8 2a fa ff ff       	call   c0001b6b <ld_word>
c0002141:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002145:	83 c4 0c             	add    esp,0xc
c0002148:	5b                   	pop    ebx
c0002149:	5e                   	pop    esi
c000214a:	5f                   	pop    edi
c000214b:	5d                   	pop    ebp
c000214c:	c3                   	ret    

c000214d <get_ldnumber>:
c000214d:	8b 10                	mov    edx,DWORD PTR [eax]
c000214f:	85 d2                	test   edx,edx
c0002151:	74 14                	je     c0002167 <get_ldnumber+0x1a>
c0002153:	56                   	push   esi
c0002154:	53                   	push   ebx
c0002155:	89 d3                	mov    ebx,edx
c0002157:	43                   	inc    ebx
c0002158:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215b:	80 f9 1f             	cmp    cl,0x1f
c000215e:	76 0d                	jbe    c000216d <get_ldnumber+0x20>
c0002160:	80 f9 3a             	cmp    cl,0x3a
c0002163:	75 f2                	jne    c0002157 <get_ldnumber+0xa>
c0002165:	eb 0a                	jmp    c0002171 <get_ldnumber+0x24>
c0002167:	83 c9 ff             	or     ecx,0xffffffff
c000216a:	89 c8                	mov    eax,ecx
c000216c:	c3                   	ret    
c000216d:	31 c9                	xor    ecx,ecx
c000216f:	eb 24                	jmp    c0002195 <get_ldnumber+0x48>
c0002171:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002174:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002177:	80 f9 09             	cmp    cl,0x9
c000217a:	77 16                	ja     c0002192 <get_ldnumber+0x45>
c000217c:	83 c2 02             	add    edx,0x2
c000217f:	83 c9 ff             	or     ecx,0xffffffff
c0002182:	39 d3                	cmp    ebx,edx
c0002184:	75 0f                	jne    c0002195 <get_ldnumber+0x48>
c0002186:	89 f2                	mov    edx,esi
c0002188:	89 18                	mov    DWORD PTR [eax],ebx
c000218a:	0f be ca             	movsx  ecx,dl
c000218d:	83 e9 30             	sub    ecx,0x30
c0002190:	eb 03                	jmp    c0002195 <get_ldnumber+0x48>
c0002192:	83 c9 ff             	or     ecx,0xffffffff
c0002195:	89 c8                	mov    eax,ecx
c0002197:	5b                   	pop    ebx
c0002198:	5e                   	pop    esi
c0002199:	c3                   	ret    

c000219a <crc32>:
c000219a:	56                   	push   esi
c000219b:	89 d6                	mov    esi,edx
c000219d:	53                   	push   ebx
c000219e:	b2 01                	mov    dl,0x1
c00021a0:	bb 08 00 00 00       	mov    ebx,0x8
c00021a5:	89 f1                	mov    ecx,esi
c00021a7:	84 d1                	test   cl,dl
c00021a9:	0f 95 c1             	setne  cl
c00021ac:	0f b6 c9             	movzx  ecx,cl
c00021af:	31 c1                	xor    ecx,eax
c00021b1:	89 c8                	mov    eax,ecx
c00021b3:	d1 e8                	shr    eax,1
c00021b5:	80 e1 01             	and    cl,0x1
c00021b8:	74 05                	je     c00021bf <crc32+0x25>
c00021ba:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021bf:	d1 e2                	shl    edx,1
c00021c1:	4b                   	dec    ebx
c00021c2:	75 e1                	jne    c00021a5 <crc32+0xb>
c00021c4:	5b                   	pop    ebx
c00021c5:	5e                   	pop    esi
c00021c6:	c3                   	ret    

c00021c7 <test_gpt_header>:
c00021c7:	55                   	push   ebp
c00021c8:	b9 10 00 00 00       	mov    ecx,0x10
c00021cd:	57                   	push   edi
c00021ce:	ba 80 40 02 c0       	mov    edx,0xc0024080
c00021d3:	56                   	push   esi
c00021d4:	31 ff                	xor    edi,edi
c00021d6:	53                   	push   ebx
c00021d7:	89 c3                	mov    ebx,eax
c00021d9:	e8 2c fa ff ff       	call   c0001c0a <mem_cmp>
c00021de:	85 c0                	test   eax,eax
c00021e0:	75 55                	jne    c0002237 <test_gpt_header+0x70>
c00021e2:	89 c7                	mov    edi,eax
c00021e4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021e9:	83 ce ff             	or     esi,0xffffffff
c00021ec:	31 d2                	xor    edx,edx
c00021ee:	83 fd 03             	cmp    ebp,0x3
c00021f1:	76 05                	jbe    c00021f8 <test_gpt_header+0x31>
c00021f3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021f8:	89 f0                	mov    eax,esi
c00021fa:	45                   	inc    ebp
c00021fb:	e8 9a ff ff ff       	call   c000219a <crc32>
c0002200:	83 fd 4c             	cmp    ebp,0x4c
c0002203:	89 c6                	mov    esi,eax
c0002205:	75 e5                	jne    c00021ec <test_gpt_header+0x25>
c0002207:	8d 43 10             	lea    eax,[ebx+0x10]
c000220a:	f7 d6                	not    esi
c000220c:	e8 67 f9 ff ff       	call   c0001b78 <ld_dword>
c0002211:	39 c6                	cmp    esi,eax
c0002213:	75 22                	jne    c0002237 <test_gpt_header+0x70>
c0002215:	8d 43 54             	lea    eax,[ebx+0x54]
c0002218:	e8 5b f9 ff ff       	call   c0001b78 <ld_dword>
c000221d:	83 c0 80             	add    eax,0xffffff80
c0002220:	75 15                	jne    c0002237 <test_gpt_header+0x70>
c0002222:	8d 43 50             	lea    eax,[ebx+0x50]
c0002225:	e8 4e f9 ff ff       	call   c0001b78 <ld_dword>
c000222a:	3d 80 00 00 00       	cmp    eax,0x80
c000222f:	0f 96 c0             	setbe  al
c0002232:	0f b6 c0             	movzx  eax,al
c0002235:	89 c7                	mov    edi,eax
c0002237:	5b                   	pop    ebx
c0002238:	89 f8                	mov    eax,edi
c000223a:	5e                   	pop    esi
c000223b:	5f                   	pop    edi
c000223c:	5d                   	pop    ebp
c000223d:	c3                   	ret    

c000223e <make_rand>:
c000223e:	56                   	push   esi
c000223f:	85 c0                	test   eax,eax
c0002241:	53                   	push   ebx
c0002242:	75 05                	jne    c0002249 <make_rand+0xb>
c0002244:	b8 01 00 00 00       	mov    eax,0x1
c0002249:	01 d1                	add    ecx,edx
c000224b:	bb 08 00 00 00       	mov    ebx,0x8
c0002250:	89 c6                	mov    esi,eax
c0002252:	d1 e8                	shr    eax,1
c0002254:	83 e6 01             	and    esi,0x1
c0002257:	85 f6                	test   esi,esi
c0002259:	74 05                	je     c0002260 <make_rand+0x22>
c000225b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002260:	4b                   	dec    ebx
c0002261:	75 ed                	jne    c0002250 <make_rand+0x12>
c0002263:	42                   	inc    edx
c0002264:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002267:	39 ca                	cmp    edx,ecx
c0002269:	75 e0                	jne    c000224b <make_rand+0xd>
c000226b:	5b                   	pop    ebx
c000226c:	5e                   	pop    esi
c000226d:	c3                   	ret    

c000226e <validate>:
c000226e:	56                   	push   esi
c000226f:	53                   	push   ebx
c0002270:	89 d6                	mov    esi,edx
c0002272:	51                   	push   ecx
c0002273:	85 c0                	test   eax,eax
c0002275:	75 09                	jne    c0002280 <validate+0x12>
c0002277:	b8 09 00 00 00       	mov    eax,0x9
c000227c:	31 c9                	xor    ecx,ecx
c000227e:	eb 2f                	jmp    c00022af <validate+0x41>
c0002280:	89 c3                	mov    ebx,eax
c0002282:	8b 00                	mov    eax,DWORD PTR [eax]
c0002284:	85 c0                	test   eax,eax
c0002286:	74 ef                	je     c0002277 <validate+0x9>
c0002288:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000228b:	74 ea                	je     c0002277 <validate+0x9>
c000228d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002291:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002295:	75 e0                	jne    c0002277 <validate+0x9>
c0002297:	83 ec 0c             	sub    esp,0xc
c000229a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000229e:	50                   	push   eax
c000229f:	e8 76 f8 ff ff       	call   c0001b1a <disk_status>
c00022a4:	83 c4 10             	add    esp,0x10
c00022a7:	a8 01                	test   al,0x1
c00022a9:	75 cc                	jne    c0002277 <validate+0x9>
c00022ab:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022ad:	31 c0                	xor    eax,eax
c00022af:	89 0e                	mov    DWORD PTR [esi],ecx
c00022b1:	5a                   	pop    edx
c00022b2:	5b                   	pop    ebx
c00022b3:	5e                   	pop    esi
c00022b4:	c3                   	ret    

c00022b5 <sync_window>:
c00022b5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022b9:	0f 84 85 00 00 00    	je     c0002344 <sync_window+0x8f>
c00022bf:	55                   	push   ebp
c00022c0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022c3:	57                   	push   edi
c00022c4:	56                   	push   esi
c00022c5:	53                   	push   ebx
c00022c6:	89 c3                	mov    ebx,eax
c00022c8:	83 ec 28             	sub    esp,0x28
c00022cb:	6a 01                	push   0x1
c00022cd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022d0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022d3:	55                   	push   ebp
c00022d4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022d8:	50                   	push   eax
c00022d9:	e8 58 f8 ff ff       	call   c0001b36 <disk_write>
c00022de:	83 c4 20             	add    esp,0x20
c00022e1:	ba 01 00 00 00       	mov    edx,0x1
c00022e6:	85 c0                	test   eax,eax
c00022e8:	75 50                	jne    c000233a <sync_window+0x85>
c00022ea:	31 ff                	xor    edi,edi
c00022ec:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022ef:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022f3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022f7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022fa:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022fd:	89 c6                	mov    esi,eax
c00022ff:	89 d7                	mov    edi,edx
c0002301:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002304:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002308:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000230b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000230f:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002313:	73 23                	jae    c0002338 <sync_window+0x83>
c0002315:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002319:	75 1d                	jne    c0002338 <sync_window+0x83>
c000231b:	83 ec 0c             	sub    esp,0xc
c000231e:	6a 01                	push   0x1
c0002320:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002324:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002328:	52                   	push   edx
c0002329:	50                   	push   eax
c000232a:	55                   	push   ebp
c000232b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000232f:	50                   	push   eax
c0002330:	e8 01 f8 ff ff       	call   c0001b36 <disk_write>
c0002335:	83 c4 20             	add    esp,0x20
c0002338:	31 d2                	xor    edx,edx
c000233a:	83 c4 1c             	add    esp,0x1c
c000233d:	89 d0                	mov    eax,edx
c000233f:	5b                   	pop    ebx
c0002340:	5e                   	pop    esi
c0002341:	5f                   	pop    edi
c0002342:	5d                   	pop    ebp
c0002343:	c3                   	ret    
c0002344:	31 d2                	xor    edx,edx
c0002346:	89 d0                	mov    eax,edx
c0002348:	c3                   	ret    

c0002349 <move_window>:
c0002349:	56                   	push   esi
c000234a:	53                   	push   ebx
c000234b:	89 c3                	mov    ebx,eax
c000234d:	83 ec 14             	sub    esp,0x14
c0002350:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002353:	75 07                	jne    c000235c <move_window+0x13>
c0002355:	31 f6                	xor    esi,esi
c0002357:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000235a:	74 59                	je     c00023b5 <move_window+0x6c>
c000235c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002360:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002364:	89 d8                	mov    eax,ebx
c0002366:	e8 4a ff ff ff       	call   c00022b5 <sync_window>
c000236b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000236f:	89 c6                	mov    esi,eax
c0002371:	85 c0                	test   eax,eax
c0002373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002377:	75 3c                	jne    c00023b5 <move_window+0x6c>
c0002379:	83 ec 0c             	sub    esp,0xc
c000237c:	8d 43 54             	lea    eax,[ebx+0x54]
c000237f:	6a 01                	push   0x1
c0002381:	51                   	push   ecx
c0002382:	52                   	push   edx
c0002383:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002387:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000238b:	50                   	push   eax
c000238c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002390:	50                   	push   eax
c0002391:	e8 8a f7 ff ff       	call   c0001b20 <disk_read>
c0002396:	83 c4 20             	add    esp,0x20
c0002399:	85 c0                	test   eax,eax
c000239b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000239f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00023a3:	74 0a                	je     c00023af <move_window+0x66>
c00023a5:	83 ca ff             	or     edx,0xffffffff
c00023a8:	be 01 00 00 00       	mov    esi,0x1
c00023ad:	89 d1                	mov    ecx,edx
c00023af:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023b2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023b5:	89 f0                	mov    eax,esi
c00023b7:	83 c4 14             	add    esp,0x14
c00023ba:	5b                   	pop    ebx
c00023bb:	5e                   	pop    esi
c00023bc:	c3                   	ret    

c00023bd <check_fs>:
c00023bd:	53                   	push   ebx
c00023be:	89 c3                	mov    ebx,eax
c00023c0:	83 ec 08             	sub    esp,0x8
c00023c3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023c7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023ce:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023d5:	e8 6f ff ff ff       	call   c0002349 <move_window>
c00023da:	ba 04 00 00 00       	mov    edx,0x4
c00023df:	85 c0                	test   eax,eax
c00023e1:	0f 85 89 00 00 00    	jne    c0002470 <check_fs+0xb3>
c00023e7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023ed:	e8 79 f7 ff ff       	call   c0001b6b <ld_word>
c00023f2:	ba 03 00 00 00       	mov    edx,0x3
c00023f7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023fb:	75 73                	jne    c0002470 <check_fs+0xb3>
c00023fd:	ba a0 41 02 c0       	mov    edx,0xc00241a0
c0002402:	8d 43 54             	lea    eax,[ebx+0x54]
c0002405:	b9 0b 00 00 00       	mov    ecx,0xb
c000240a:	e8 fb f7 ff ff       	call   c0001c0a <mem_cmp>
c000240f:	ba 01 00 00 00       	mov    edx,0x1
c0002414:	85 c0                	test   eax,eax
c0002416:	74 58                	je     c0002470 <check_fs+0xb3>
c0002418:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000241b:	8d 50 18             	lea    edx,[eax+0x18]
c000241e:	80 fa 01             	cmp    dl,0x1
c0002421:	76 09                	jbe    c000242c <check_fs+0x6f>
c0002423:	ba 02 00 00 00       	mov    edx,0x2
c0002428:	3c eb                	cmp    al,0xeb
c000242a:	75 44                	jne    c0002470 <check_fs+0xb3>
c000242c:	ba b4 70 02 c0       	mov    edx,0xc00270b4
c0002431:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002437:	b9 03 00 00 00       	mov    ecx,0x3
c000243c:	e8 c9 f7 ff ff       	call   c0001c0a <mem_cmp>
c0002441:	31 d2                	xor    edx,edx
c0002443:	85 c0                	test   eax,eax
c0002445:	74 29                	je     c0002470 <check_fs+0xb3>
c0002447:	ba ac 41 02 c0       	mov    edx,0xc00241ac
c000244c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002452:	b9 05 00 00 00       	mov    ecx,0x5
c0002457:	e8 ae f7 ff ff       	call   c0001c0a <mem_cmp>
c000245c:	31 d2                	xor    edx,edx
c000245e:	85 c0                	test   eax,eax
c0002460:	74 0e                	je     c0002470 <check_fs+0xb3>
c0002462:	31 d2                	xor    edx,edx
c0002464:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000246b:	0f 95 c2             	setne  dl
c000246e:	01 d2                	add    edx,edx
c0002470:	89 d0                	mov    eax,edx
c0002472:	83 c4 08             	add    esp,0x8
c0002475:	5b                   	pop    ebx
c0002476:	c3                   	ret    

c0002477 <find_volume>:
c0002477:	55                   	push   ebp
c0002478:	31 c9                	xor    ecx,ecx
c000247a:	57                   	push   edi
c000247b:	56                   	push   esi
c000247c:	89 d6                	mov    esi,edx
c000247e:	53                   	push   ebx
c000247f:	31 d2                	xor    edx,edx
c0002481:	83 ec 3c             	sub    esp,0x3c
c0002484:	89 c3                	mov    ebx,eax
c0002486:	e8 32 ff ff ff       	call   c00023bd <check_fs>
c000248b:	83 f8 02             	cmp    eax,0x2
c000248e:	74 0e                	je     c000249e <find_volume+0x27>
c0002490:	0f 87 5d 01 00 00    	ja     c00025f3 <find_volume+0x17c>
c0002496:	85 f6                	test   esi,esi
c0002498:	0f 84 55 01 00 00    	je     c00025f3 <find_volume+0x17c>
c000249e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00024a5:	0f 85 dd 00 00 00    	jne    c0002588 <find_volume+0x111>
c00024ab:	31 c9                	xor    ecx,ecx
c00024ad:	ba 01 00 00 00       	mov    edx,0x1
c00024b2:	89 d8                	mov    eax,ebx
c00024b4:	e8 90 fe ff ff       	call   c0002349 <move_window>
c00024b9:	85 c0                	test   eax,eax
c00024bb:	74 0a                	je     c00024c7 <find_volume+0x50>
c00024bd:	b8 04 00 00 00       	mov    eax,0x4
c00024c2:	e9 2c 01 00 00       	jmp    c00025f3 <find_volume+0x17c>
c00024c7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ca:	89 e8                	mov    eax,ebp
c00024cc:	e8 f6 fc ff ff       	call   c00021c7 <test_gpt_header>
c00024d1:	85 c0                	test   eax,eax
c00024d3:	75 0a                	jne    c00024df <find_volume+0x68>
c00024d5:	b8 03 00 00 00       	mov    eax,0x3
c00024da:	e9 14 01 00 00       	jmp    c00025f3 <find_volume+0x17c>
c00024df:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024e5:	e8 8e f6 ff ff       	call   c0001b78 <ld_dword>
c00024ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024ee:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024f4:	e8 97 f6 ff ff       	call   c0001b90 <ld_qword>
c00024f9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002501:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002505:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002509:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002511:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002515:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002519:	74 ba                	je     c00024d5 <find_volume+0x5e>
c000251b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000251f:	31 c9                	xor    ecx,ecx
c0002521:	c1 e7 07             	shl    edi,0x7
c0002524:	89 d8                	mov    eax,ebx
c0002526:	89 fa                	mov    edx,edi
c0002528:	c1 ea 09             	shr    edx,0x9
c000252b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000252f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002533:	e8 11 fe ff ff       	call   c0002349 <move_window>
c0002538:	85 c0                	test   eax,eax
c000253a:	75 81                	jne    c00024bd <find_volume+0x46>
c000253c:	81 e7 80 01 00 00    	and    edi,0x180
c0002542:	b9 10 00 00 00       	mov    ecx,0x10
c0002547:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000254b:	ba 90 41 02 c0       	mov    edx,0xc0024190
c0002550:	e8 b5 f6 ff ff       	call   c0001c0a <mem_cmp>
c0002555:	85 c0                	test   eax,eax
c0002557:	75 29                	jne    c0002582 <find_volume+0x10b>
c0002559:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000255d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002561:	e8 2a f6 ff ff       	call   c0001b90 <ld_qword>
c0002566:	89 d1                	mov    ecx,edx
c0002568:	89 c2                	mov    edx,eax
c000256a:	89 d8                	mov    eax,ebx
c000256c:	e8 4c fe ff ff       	call   c00023bd <check_fs>
c0002571:	85 f6                	test   esi,esi
c0002573:	75 07                	jne    c000257c <find_volume+0x105>
c0002575:	83 f8 01             	cmp    eax,0x1
c0002578:	77 08                	ja     c0002582 <find_volume+0x10b>
c000257a:	eb 77                	jmp    c00025f3 <find_volume+0x17c>
c000257c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002580:	74 71                	je     c00025f3 <find_volume+0x17c>
c0002582:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002586:	eb 89                	jmp    c0002511 <find_volume+0x9a>
c0002588:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000258c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002592:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002598:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000259c:	89 cd                	mov    ebp,ecx
c000259e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00025a2:	89 f8                	mov    eax,edi
c00025a4:	83 c7 10             	add    edi,0x10
c00025a7:	e8 cc f5 ff ff       	call   c0001b78 <ld_dword>
c00025ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025b0:	89 01                	mov    DWORD PTR [ecx],eax
c00025b2:	83 c1 04             	add    ecx,0x4
c00025b5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025b9:	75 e3                	jne    c000259e <find_volume+0x127>
c00025bb:	31 ff                	xor    edi,edi
c00025bd:	85 f6                	test   esi,esi
c00025bf:	74 03                	je     c00025c4 <find_volume+0x14d>
c00025c1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025c4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025c8:	85 d2                	test   edx,edx
c00025ca:	74 14                	je     c00025e0 <find_volume+0x169>
c00025cc:	31 c9                	xor    ecx,ecx
c00025ce:	89 d8                	mov    eax,ebx
c00025d0:	e8 e8 fd ff ff       	call   c00023bd <check_fs>
c00025d5:	83 f8 01             	cmp    eax,0x1
c00025d8:	76 19                	jbe    c00025f3 <find_volume+0x17c>
c00025da:	85 f6                	test   esi,esi
c00025dc:	74 0f                	je     c00025ed <find_volume+0x176>
c00025de:	eb 13                	jmp    c00025f3 <find_volume+0x17c>
c00025e0:	85 f6                	test   esi,esi
c00025e2:	0f 85 ed fe ff ff    	jne    c00024d5 <find_volume+0x5e>
c00025e8:	b8 03 00 00 00       	mov    eax,0x3
c00025ed:	47                   	inc    edi
c00025ee:	83 ff 03             	cmp    edi,0x3
c00025f1:	76 d1                	jbe    c00025c4 <find_volume+0x14d>
c00025f3:	83 c4 3c             	add    esp,0x3c
c00025f6:	5b                   	pop    ebx
c00025f7:	5e                   	pop    esi
c00025f8:	5f                   	pop    edi
c00025f9:	5d                   	pop    ebp
c00025fa:	c3                   	ret    

c00025fb <mount_volume>:
c00025fb:	55                   	push   ebp
c00025fc:	57                   	push   edi
c00025fd:	89 cf                	mov    edi,ecx
c00025ff:	56                   	push   esi
c0002600:	53                   	push   ebx
c0002601:	bb 0b 00 00 00       	mov    ebx,0xb
c0002606:	83 ec 3c             	sub    esp,0x3c
c0002609:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000260f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002613:	e8 35 fb ff ff       	call   c000214d <get_ldnumber>
c0002618:	85 c0                	test   eax,eax
c000261a:	0f 88 3a 05 00 00    	js     c0002b5a <mount_volume+0x55f>
c0002620:	8b 2c 85 20 8c 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd73e0]
c0002627:	89 c6                	mov    esi,eax
c0002629:	bb 0c 00 00 00       	mov    ebx,0xc
c000262e:	85 ed                	test   ebp,ebp
c0002630:	0f 84 24 05 00 00    	je     c0002b5a <mount_volume+0x55f>
c0002636:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000263a:	83 e7 fe             	and    edi,0xfffffffe
c000263d:	89 2a                	mov    DWORD PTR [edx],ebp
c000263f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002643:	74 32                	je     c0002677 <mount_volume+0x7c>
c0002645:	83 ec 0c             	sub    esp,0xc
c0002648:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000264c:	50                   	push   eax
c000264d:	e8 c8 f4 ff ff       	call   c0001b1a <disk_status>
c0002652:	83 c4 10             	add    esp,0x10
c0002655:	a8 01                	test   al,0x1
c0002657:	75 1e                	jne    c0002677 <mount_volume+0x7c>
c0002659:	31 db                	xor    ebx,ebx
c000265b:	89 f9                	mov    ecx,edi
c000265d:	84 c9                	test   cl,cl
c000265f:	0f 84 f5 04 00 00    	je     c0002b5a <mount_volume+0x55f>
c0002665:	a8 04                	test   al,0x4
c0002667:	0f 84 ed 04 00 00    	je     c0002b5a <mount_volume+0x55f>
c000266d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002672:	e9 e3 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c0002677:	83 ec 0c             	sub    esp,0xc
c000267a:	89 f0                	mov    eax,esi
c000267c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002680:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002683:	0f b6 f0             	movzx  esi,al
c0002686:	bb 03 00 00 00       	mov    ebx,0x3
c000268b:	56                   	push   esi
c000268c:	e8 8c f4 ff ff       	call   c0001b1d <disk_initialize>
c0002691:	83 c4 10             	add    esp,0x10
c0002694:	a8 01                	test   al,0x1
c0002696:	0f 85 be 04 00 00    	jne    c0002b5a <mount_volume+0x55f>
c000269c:	89 f9                	mov    ecx,edi
c000269e:	84 c9                	test   cl,cl
c00026a0:	74 04                	je     c00026a6 <mount_volume+0xab>
c00026a2:	a8 04                	test   al,0x4
c00026a4:	75 c7                	jne    c000266d <mount_volume+0x72>
c00026a6:	31 d2                	xor    edx,edx
c00026a8:	89 e8                	mov    eax,ebp
c00026aa:	e8 c8 fd ff ff       	call   c0002477 <find_volume>
c00026af:	83 f8 04             	cmp    eax,0x4
c00026b2:	75 0a                	jne    c00026be <mount_volume+0xc3>
c00026b4:	bb 01 00 00 00       	mov    ebx,0x1
c00026b9:	e9 9c 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c00026be:	83 f8 01             	cmp    eax,0x1
c00026c1:	76 0a                	jbe    c00026cd <mount_volume+0xd2>
c00026c3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026c8:	e9 8d 04 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c00026cd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026d0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026db:	75 17                	jne    c00026f4 <mount_volume+0xf9>
c00026dd:	b8 0b 00 00 00       	mov    eax,0xb
c00026e2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026e7:	75 da                	jne    c00026c3 <mount_volume+0xc8>
c00026e9:	40                   	inc    eax
c00026ea:	83 f8 40             	cmp    eax,0x40
c00026ed:	75 f3                	jne    c00026e2 <mount_volume+0xe7>
c00026ef:	e9 5a 02 00 00       	jmp    c000294e <mount_volume+0x353>
c00026f4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026f7:	e8 6f f4 ff ff       	call   c0001b6b <ld_word>
c00026fc:	66 3d 00 02          	cmp    ax,0x200
c0002700:	75 c1                	jne    c00026c3 <mount_volume+0xc8>
c0002702:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002705:	e8 61 f4 ff ff       	call   c0001b6b <ld_word>
c000270a:	0f b7 c0             	movzx  eax,ax
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	85 c0                	test   eax,eax
c0002713:	75 0c                	jne    c0002721 <mount_volume+0x126>
c0002715:	8d 45 78             	lea    eax,[ebp+0x78]
c0002718:	e8 5b f4 ff ff       	call   c0001b78 <ld_dword>
c000271d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002725:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002728:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000272b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000272f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002732:	48                   	dec    eax
c0002733:	3c 01                	cmp    al,0x1
c0002735:	77 8c                	ja     c00026c3 <mount_volume+0xc8>
c0002737:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000273b:	89 c3                	mov    ebx,eax
c000273d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002741:	66 85 c0             	test   ax,ax
c0002744:	0f 84 79 ff ff ff    	je     c00026c3 <mount_volume+0xc8>
c000274a:	8d 40 ff             	lea    eax,[eax-0x1]
c000274d:	85 d8                	test   eax,ebx
c000274f:	0f 85 6e ff ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002755:	8d 45 65             	lea    eax,[ebp+0x65]
c0002758:	e8 0e f4 ff ff       	call   c0001b6b <ld_word>
c000275d:	89 c7                	mov    edi,eax
c000275f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002763:	a8 0f                	test   al,0xf
c0002765:	0f 85 58 ff ff ff    	jne    c00026c3 <mount_volume+0xc8>
c000276b:	8d 45 67             	lea    eax,[ebp+0x67]
c000276e:	e8 f8 f3 ff ff       	call   c0001b6b <ld_word>
c0002773:	0f b7 f0             	movzx  esi,ax
c0002776:	85 f6                	test   esi,esi
c0002778:	75 0a                	jne    c0002784 <mount_volume+0x189>
c000277a:	8d 45 74             	lea    eax,[ebp+0x74]
c000277d:	e8 f6 f3 ff ff       	call   c0001b78 <ld_dword>
c0002782:	89 c6                	mov    esi,eax
c0002784:	8d 45 62             	lea    eax,[ebp+0x62]
c0002787:	e8 df f3 ff ff       	call   c0001b6b <ld_word>
c000278c:	66 85 c0             	test   ax,ax
c000278f:	0f 84 2e ff ff ff    	je     c00026c3 <mount_volume+0xc8>
c0002795:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000279a:	0f b7 c8             	movzx  ecx,ax
c000279d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00027a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00027a6:	89 fa                	mov    edx,edi
c00027a8:	66 c1 ea 04          	shr    dx,0x4
c00027ac:	0f b7 d2             	movzx  edx,dx
c00027af:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027b3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027ba:	39 c6                	cmp    esi,eax
c00027bc:	0f 82 01 ff ff ff    	jb     c00026c3 <mount_volume+0xc8>
c00027c2:	29 c6                	sub    esi,eax
c00027c4:	31 d2                	xor    edx,edx
c00027c6:	89 f0                	mov    eax,esi
c00027c8:	f7 f3                	div    ebx
c00027ca:	39 de                	cmp    esi,ebx
c00027cc:	0f 82 f1 fe ff ff    	jb     c00026c3 <mount_volume+0xc8>
c00027d2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027d7:	0f 87 e6 fe ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00027dd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027e2:	0f 86 63 03 00 00    	jbe    c0002b4b <mount_volume+0x550>
c00027e8:	bb 03 00 00 00       	mov    ebx,0x3
c00027ed:	8d 70 02             	lea    esi,[eax+0x2]
c00027f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027f8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027fb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027fe:	31 d2                	xor    edx,edx
c0002800:	89 c8                	mov    eax,ecx
c0002802:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002805:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002809:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000280d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002811:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002815:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002818:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000281b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000281f:	31 d2                	xor    edx,edx
c0002821:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002825:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	83 fb 03             	cmp    ebx,0x3
c0002832:	75 2b                	jne    c000285f <mount_volume+0x264>
c0002834:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002837:	e8 2f f3 ff ff       	call   c0001b6b <ld_word>
c000283c:	66 09 c7             	or     di,ax
c000283f:	0f 85 7e fe ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002845:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000284b:	c1 e6 02             	shl    esi,0x2
c000284e:	e8 25 f3 ff ff       	call   c0001b78 <ld_dword>
c0002853:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000285a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000285d:	eb 30                	jmp    c000288f <mount_volume+0x294>
c000285f:	66 85 ff             	test   di,di
c0002862:	0f 84 5b fe ff ff    	je     c00026c3 <mount_volume+0xc8>
c0002868:	31 d2                	xor    edx,edx
c000286a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000286e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002872:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002876:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002879:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000287c:	83 fb 02             	cmp    ebx,0x2
c000287f:	75 04                	jne    c0002885 <mount_volume+0x28a>
c0002881:	01 f6                	add    esi,esi
c0002883:	eb 0a                	jmp    c000288f <mount_volume+0x294>
c0002885:	8d 04 76             	lea    eax,[esi+esi*2]
c0002888:	83 e6 01             	and    esi,0x1
c000288b:	d1 e8                	shr    eax,1
c000288d:	01 c6                	add    esi,eax
c000288f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002895:	c1 ee 09             	shr    esi,0x9
c0002898:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000289c:	0f 87 21 fe ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00028a2:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00028a9:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028b0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028b4:	83 fb 03             	cmp    ebx,0x3
c00028b7:	75 7a                	jne    c0002933 <mount_volume+0x338>
c00028b9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028bf:	e8 a7 f2 ff ff       	call   c0001b6b <ld_word>
c00028c4:	66 48                	dec    ax
c00028c6:	75 6b                	jne    c0002933 <mount_volume+0x338>
c00028c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028d0:	83 c2 01             	add    edx,0x1
c00028d3:	89 e8                	mov    eax,ebp
c00028d5:	83 d1 00             	adc    ecx,0x0
c00028d8:	e8 6c fa ff ff       	call   c0002349 <move_window>
c00028dd:	85 c0                	test   eax,eax
c00028df:	75 52                	jne    c0002933 <mount_volume+0x338>
c00028e1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028e5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028eb:	e8 7b f2 ff ff       	call   c0001b6b <ld_word>
c00028f0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028f4:	75 3d                	jne    c0002933 <mount_volume+0x338>
c00028f6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028f9:	e8 7a f2 ff ff       	call   c0001b78 <ld_dword>
c00028fe:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002903:	75 2e                	jne    c0002933 <mount_volume+0x338>
c0002905:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000290b:	e8 68 f2 ff ff       	call   c0001b78 <ld_dword>
c0002910:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002915:	75 1c                	jne    c0002933 <mount_volume+0x338>
c0002917:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000291d:	e8 56 f2 ff ff       	call   c0001b78 <ld_dword>
c0002922:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002925:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000292b:	e8 48 f2 ff ff       	call   c0001b78 <ld_dword>
c0002930:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002933:	66 a1 00 8c 02 c0    	mov    ax,ds:0xc0028c00
c0002939:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000293c:	40                   	inc    eax
c000293d:	31 db                	xor    ebx,ebx
c000293f:	66 a3 00 8c 02 c0    	mov    ds:0xc0028c00,ax
c0002945:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002949:	e9 0c 02 00 00       	jmp    c0002b5a <mount_volume+0x55f>
c000294e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002954:	e8 12 f2 ff ff       	call   c0001b6b <ld_word>
c0002959:	66 3d 00 01          	cmp    ax,0x100
c000295d:	0f 85 60 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002963:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000296a:	0f 85 53 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c0002970:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002976:	e8 15 f2 ff ff       	call   c0001b90 <ld_qword>
c000297b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000297f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002983:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002989:	e8 ea f1 ff ff       	call   c0001b78 <ld_dword>
c000298e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002991:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002997:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000299a:	fe c8                	dec    al
c000299c:	0f 85 21 fd ff ff    	jne    c00026c3 <mount_volume+0xc8>
c00029a2:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00029a9:	bb 01 00 00 00       	mov    ebx,0x1
c00029ae:	d3 e3                	shl    ebx,cl
c00029b0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029b4:	66 85 db             	test   bx,bx
c00029b7:	0f 84 06 fd ff ff    	je     c00026c3 <mount_volume+0xc8>
c00029bd:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029c3:	e8 b0 f1 ff ff       	call   c0001b78 <ld_dword>
c00029c8:	89 c6                	mov    esi,eax
c00029ca:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029cf:	0f 87 ee fc ff ff    	ja     c00026c3 <mount_volume+0xc8>
c00029d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029d9:	8d 40 02             	lea    eax,[eax+0x2]
c00029dc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029df:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029e6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029e9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029ef:	e8 84 f1 ff ff       	call   c0001b78 <ld_dword>
c00029f4:	31 d2                	xor    edx,edx
c00029f6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029fa:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002a02:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002a06:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002a09:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002a0c:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a12:	e8 61 f1 ff ff       	call   c0001b78 <ld_dword>
c0002a17:	31 d2                	xor    edx,edx
c0002a19:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a1d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a21:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a25:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a28:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a2b:	0f b7 c3             	movzx  eax,bx
c0002a2e:	31 d2                	xor    edx,edx
c0002a30:	0f af f0             	imul   esi,eax
c0002a33:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a37:	89 f0                	mov    eax,esi
c0002a39:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a3d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a41:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a45:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a49:	39 c1                	cmp    ecx,eax
c0002a4b:	89 df                	mov    edi,ebx
c0002a4d:	19 d7                	sbb    edi,edx
c0002a4f:	0f 82 6e fc ff ff    	jb     c00026c3 <mount_volume+0xc8>
c0002a55:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a5b:	31 db                	xor    ebx,ebx
c0002a5d:	e8 16 f1 ff ff       	call   c0001b78 <ld_dword>
c0002a62:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a69:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a74:	85 db                	test   ebx,ebx
c0002a76:	75 39                	jne    c0002ab1 <mount_volume+0x4b6>
c0002a78:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a7c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a80:	0f 86 3d fc ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002a86:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a89:	31 ff                	xor    edi,edi
c0002a8b:	89 e8                	mov    eax,ebp
c0002a8d:	e8 72 f3 ff ff       	call   c0001e04 <clst2sect>
c0002a92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a96:	01 c6                	add    esi,eax
c0002a98:	89 e8                	mov    eax,ebp
c0002a9a:	11 d7                	adc    edi,edx
c0002a9c:	89 f2                	mov    edx,esi
c0002a9e:	89 f9                	mov    ecx,edi
c0002aa0:	e8 a4 f8 ff ff       	call   c0002349 <move_window>
c0002aa5:	85 c0                	test   eax,eax
c0002aa7:	0f 85 07 fc ff ff    	jne    c00026b4 <mount_volume+0xb9>
c0002aad:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ab1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002ab6:	74 0b                	je     c0002ac3 <mount_volume+0x4c8>
c0002ab8:	83 c3 20             	add    ebx,0x20
c0002abb:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ac1:	eb b1                	jmp    c0002a74 <mount_volume+0x479>
c0002ac3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ac6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aca:	e8 a9 f0 ff ff       	call   c0001b78 <ld_dword>
c0002acf:	89 c3                	mov    ebx,eax
c0002ad1:	83 f8 01             	cmp    eax,0x1
c0002ad4:	0f 86 e9 fb ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002ada:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002add:	0f 86 e0 fb ff ff    	jbe    c00026c3 <mount_volume+0xc8>
c0002ae3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ae6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002aea:	0f af c2             	imul   eax,edx
c0002aed:	31 d2                	xor    edx,edx
c0002aef:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002af2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002af5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002af8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002afb:	31 c9                	xor    ecx,ecx
c0002afd:	89 da                	mov    edx,ebx
c0002aff:	89 e8                	mov    eax,ebp
c0002b01:	c1 ea 07             	shr    edx,0x7
c0002b04:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002b07:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002b0a:	e8 3a f8 ff ff       	call   c0002349 <move_window>
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 85 9d fb ff ff    	jne    c00026b4 <mount_volume+0xb9>
c0002b17:	89 d8                	mov    eax,ebx
c0002b19:	83 e0 7f             	and    eax,0x7f
c0002b1c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b1f:	e8 54 f0 ff ff       	call   c0001b78 <ld_dword>
c0002b24:	83 f8 ff             	cmp    eax,0xffffffff
c0002b27:	74 0a                	je     c0002b33 <mount_volume+0x538>
c0002b29:	43                   	inc    ebx
c0002b2a:	39 d8                	cmp    eax,ebx
c0002b2c:	74 cd                	je     c0002afb <mount_volume+0x500>
c0002b2e:	e9 90 fb ff ff       	jmp    c00026c3 <mount_volume+0xc8>
c0002b33:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b3a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b41:	bb 04 00 00 00       	mov    ebx,0x4
c0002b46:	e9 e8 fd ff ff       	jmp    c0002933 <mount_volume+0x338>
c0002b4b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b50:	19 db                	sbb    ebx,ebx
c0002b52:	83 c3 02             	add    ebx,0x2
c0002b55:	e9 93 fc ff ff       	jmp    c00027ed <mount_volume+0x1f2>
c0002b5a:	83 c4 3c             	add    esp,0x3c
c0002b5d:	89 d8                	mov    eax,ebx
c0002b5f:	5b                   	pop    ebx
c0002b60:	5e                   	pop    esi
c0002b61:	5f                   	pop    edi
c0002b62:	5d                   	pop    ebp
c0002b63:	c3                   	ret    

c0002b64 <find_bitmap>:
c0002b64:	55                   	push   ebp
c0002b65:	57                   	push   edi
c0002b66:	89 c7                	mov    edi,eax
c0002b68:	56                   	push   esi
c0002b69:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b6c:	53                   	push   ebx
c0002b6d:	83 ec 1c             	sub    esp,0x1c
c0002b70:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b73:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b77:	83 e8 02             	sub    eax,0x2
c0002b7a:	39 f0                	cmp    eax,esi
c0002b7c:	77 02                	ja     c0002b80 <find_bitmap+0x1c>
c0002b7e:	31 f6                	xor    esi,esi
c0002b80:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b84:	89 f3                	mov    ebx,esi
c0002b86:	31 ed                	xor    ebp,ebp
c0002b88:	31 c9                	xor    ecx,ecx
c0002b8a:	89 da                	mov    edx,ebx
c0002b8c:	89 f8                	mov    eax,edi
c0002b8e:	c1 ea 0c             	shr    edx,0xc
c0002b91:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b94:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b97:	e8 ad f7 ff ff       	call   c0002349 <move_window>
c0002b9c:	85 c0                	test   eax,eax
c0002b9e:	75 68                	jne    c0002c08 <find_bitmap+0xa4>
c0002ba0:	89 da                	mov    edx,ebx
c0002ba2:	89 d9                	mov    ecx,ebx
c0002ba4:	c1 ea 03             	shr    edx,0x3
c0002ba7:	83 e1 07             	and    ecx,0x7
c0002baa:	b8 01 00 00 00       	mov    eax,0x1
c0002baf:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002bb5:	d3 e0                	shl    eax,cl
c0002bb7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002bba:	83 e9 02             	sub    ecx,0x2
c0002bbd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bc1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bc5:	43                   	inc    ebx
c0002bc6:	21 c1                	and    ecx,eax
c0002bc8:	d1 e0                	shl    eax,1
c0002bca:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bce:	77 09                	ja     c0002bd9 <find_bitmap+0x75>
c0002bd0:	31 db                	xor    ebx,ebx
c0002bd2:	ba 00 02 00 00       	mov    edx,0x200
c0002bd7:	31 c0                	xor    eax,eax
c0002bd9:	84 c9                	test   cl,cl
c0002bdb:	75 10                	jne    c0002bed <find_bitmap+0x89>
c0002bdd:	45                   	inc    ebp
c0002bde:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002be2:	75 0f                	jne    c0002bf3 <find_bitmap+0x8f>
c0002be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002be8:	83 c0 02             	add    eax,0x2
c0002beb:	eb 22                	jmp    c0002c0f <find_bitmap+0xab>
c0002bed:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002bf1:	31 ed                	xor    ebp,ebp
c0002bf3:	39 de                	cmp    esi,ebx
c0002bf5:	74 16                	je     c0002c0d <find_bitmap+0xa9>
c0002bf7:	84 c0                	test   al,al
c0002bf9:	75 c6                	jne    c0002bc1 <find_bitmap+0x5d>
c0002bfb:	42                   	inc    edx
c0002bfc:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002c02:	77 84                	ja     c0002b88 <find_bitmap+0x24>
c0002c04:	b0 01                	mov    al,0x1
c0002c06:	eb b9                	jmp    c0002bc1 <find_bitmap+0x5d>
c0002c08:	83 c8 ff             	or     eax,0xffffffff
c0002c0b:	eb 02                	jmp    c0002c0f <find_bitmap+0xab>
c0002c0d:	31 c0                	xor    eax,eax
c0002c0f:	83 c4 1c             	add    esp,0x1c
c0002c12:	5b                   	pop    ebx
c0002c13:	5e                   	pop    esi
c0002c14:	5f                   	pop    edi
c0002c15:	5d                   	pop    ebp
c0002c16:	c3                   	ret    

c0002c17 <change_bitmap>:
c0002c17:	55                   	push   ebp
c0002c18:	89 cd                	mov    ebp,ecx
c0002c1a:	57                   	push   edi
c0002c1b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c1e:	56                   	push   esi
c0002c1f:	89 c7                	mov    edi,eax
c0002c21:	53                   	push   ebx
c0002c22:	89 c8                	mov    eax,ecx
c0002c24:	83 ec 1c             	sub    esp,0x1c
c0002c27:	31 d2                	xor    edx,edx
c0002c29:	89 ce                	mov    esi,ecx
c0002c2b:	c1 e8 0c             	shr    eax,0xc
c0002c2e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c33:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c36:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c39:	c1 ee 03             	shr    esi,0x3
c0002c3c:	83 e1 07             	and    ecx,0x7
c0002c3f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c45:	d3 e3                	shl    ebx,cl
c0002c47:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c4b:	89 c1                	mov    ecx,eax
c0002c4d:	89 d3                	mov    ebx,edx
c0002c4f:	83 c1 01             	add    ecx,0x1
c0002c52:	83 d3 00             	adc    ebx,0x0
c0002c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c59:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c5d:	89 d1                	mov    ecx,edx
c0002c5f:	89 c2                	mov    edx,eax
c0002c61:	89 f8                	mov    eax,edi
c0002c63:	e8 e1 f6 ff ff       	call   c0002349 <move_window>
c0002c68:	89 c1                	mov    ecx,eax
c0002c6a:	85 c0                	test   eax,eax
c0002c6c:	75 48                	jne    c0002cb6 <change_bitmap+0x9f>
c0002c6e:	31 d2                	xor    edx,edx
c0002c70:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c74:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c78:	0f 95 c2             	setne  dl
c0002c7b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c7f:	74 3c                	je     c0002cbd <change_bitmap+0xa6>
c0002c81:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c85:	4d                   	dec    ebp
c0002c86:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c8a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c8e:	74 32                	je     c0002cc2 <change_bitmap+0xab>
c0002c90:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c94:	75 d8                	jne    c0002c6e <change_bitmap+0x57>
c0002c96:	8d 46 01             	lea    eax,[esi+0x1]
c0002c99:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c9e:	89 c3                	mov    ebx,eax
c0002ca0:	31 f6                	xor    esi,esi
c0002ca2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ca6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002caa:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002cb0:	74 99                	je     c0002c4b <change_bitmap+0x34>
c0002cb2:	89 de                	mov    esi,ebx
c0002cb4:	eb b8                	jmp    c0002c6e <change_bitmap+0x57>
c0002cb6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cbb:	eb 05                	jmp    c0002cc2 <change_bitmap+0xab>
c0002cbd:	b9 02 00 00 00       	mov    ecx,0x2
c0002cc2:	83 c4 1c             	add    esp,0x1c
c0002cc5:	89 c8                	mov    eax,ecx
c0002cc7:	5b                   	pop    ebx
c0002cc8:	5e                   	pop    esi
c0002cc9:	5f                   	pop    edi
c0002cca:	5d                   	pop    ebp
c0002ccb:	c3                   	ret    

c0002ccc <put_fat>:
c0002ccc:	83 fa 01             	cmp    edx,0x1
c0002ccf:	0f 86 7b 01 00 00    	jbe    c0002e50 <put_fat+0x184>
c0002cd5:	55                   	push   ebp
c0002cd6:	57                   	push   edi
c0002cd7:	89 cf                	mov    edi,ecx
c0002cd9:	56                   	push   esi
c0002cda:	b9 02 00 00 00       	mov    ecx,0x2
c0002cdf:	53                   	push   ebx
c0002ce0:	89 c6                	mov    esi,eax
c0002ce2:	83 ec 1c             	sub    esp,0x1c
c0002ce5:	89 d3                	mov    ebx,edx
c0002ce7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cea:	0f 86 68 01 00 00    	jbe    c0002e58 <put_fat+0x18c>
c0002cf0:	8a 00                	mov    al,BYTE PTR [eax]
c0002cf2:	3c 02                	cmp    al,0x2
c0002cf4:	0f 84 c7 00 00 00    	je     c0002dc1 <put_fat+0xf5>
c0002cfa:	77 09                	ja     c0002d05 <put_fat+0x39>
c0002cfc:	fe c8                	dec    al
c0002cfe:	74 17                	je     c0002d17 <put_fat+0x4b>
c0002d00:	e9 53 01 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002d05:	b9 02 00 00 00       	mov    ecx,0x2
c0002d0a:	3c 04                	cmp    al,0x4
c0002d0c:	0f 86 e1 00 00 00    	jbe    c0002df3 <put_fat+0x127>
c0002d12:	e9 41 01 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002d17:	89 d5                	mov    ebp,edx
c0002d19:	31 c9                	xor    ecx,ecx
c0002d1b:	d1 ed                	shr    ebp,1
c0002d1d:	89 f0                	mov    eax,esi
c0002d1f:	01 d5                	add    ebp,edx
c0002d21:	89 ea                	mov    edx,ebp
c0002d23:	c1 ea 09             	shr    edx,0x9
c0002d26:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d29:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d2c:	e8 18 f6 ff ff       	call   c0002349 <move_window>
c0002d31:	89 c1                	mov    ecx,eax
c0002d33:	85 c0                	test   eax,eax
c0002d35:	0f 85 1d 01 00 00    	jne    c0002e58 <put_fat+0x18c>
c0002d3b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d3e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d42:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d45:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d4f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d53:	89 f8                	mov    eax,edi
c0002d55:	83 e3 01             	and    ebx,0x1
c0002d58:	74 0d                	je     c0002d67 <put_fat+0x9b>
c0002d5a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d5d:	89 fa                	mov    edx,edi
c0002d5f:	83 e0 0f             	and    eax,0xf
c0002d62:	c1 e2 04             	shl    edx,0x4
c0002d65:	09 d0                	or     eax,edx
c0002d67:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d6a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d6e:	31 c9                	xor    ecx,ecx
c0002d70:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d74:	c1 ea 09             	shr    edx,0x9
c0002d77:	89 f0                	mov    eax,esi
c0002d79:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d7c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d7f:	e8 c5 f5 ff ff       	call   c0002349 <move_window>
c0002d84:	89 c1                	mov    ecx,eax
c0002d86:	85 c0                	test   eax,eax
c0002d88:	0f 85 ca 00 00 00    	jne    c0002e58 <put_fat+0x18c>
c0002d8e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d92:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d98:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d9c:	85 db                	test   ebx,ebx
c0002d9e:	74 07                	je     c0002da7 <put_fat+0xdb>
c0002da0:	c1 ef 04             	shr    edi,0x4
c0002da3:	89 fa                	mov    edx,edi
c0002da5:	eb 0e                	jmp    c0002db5 <put_fat+0xe9>
c0002da7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002daa:	c1 ef 08             	shr    edi,0x8
c0002dad:	83 e2 f0             	and    edx,0xfffffff0
c0002db0:	83 e7 0f             	and    edi,0xf
c0002db3:	09 fa                	or     edx,edi
c0002db5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002db8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dbc:	e9 97 00 00 00       	jmp    c0002e58 <put_fat+0x18c>
c0002dc1:	31 c9                	xor    ecx,ecx
c0002dc3:	c1 ea 08             	shr    edx,0x8
c0002dc6:	89 f0                	mov    eax,esi
c0002dc8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dcb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dce:	e8 76 f5 ff ff       	call   c0002349 <move_window>
c0002dd3:	89 c1                	mov    ecx,eax
c0002dd5:	85 c0                	test   eax,eax
c0002dd7:	75 7f                	jne    c0002e58 <put_fat+0x18c>
c0002dd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ddd:	01 db                	add    ebx,ebx
c0002ddf:	0f b7 d7             	movzx  edx,di
c0002de2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002de8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002dec:	e8 ec ed ff ff       	call   c0001bdd <st_word>
c0002df1:	eb 53                	jmp    c0002e46 <put_fat+0x17a>
c0002df3:	31 c9                	xor    ecx,ecx
c0002df5:	c1 ea 07             	shr    edx,0x7
c0002df8:	89 f0                	mov    eax,esi
c0002dfa:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dfd:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e00:	e8 44 f5 ff ff       	call   c0002349 <move_window>
c0002e05:	89 c1                	mov    ecx,eax
c0002e07:	85 c0                	test   eax,eax
c0002e09:	75 4d                	jne    c0002e58 <put_fat+0x18c>
c0002e0b:	c1 e3 02             	shl    ebx,0x2
c0002e0e:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e14:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e17:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e1b:	74 1c                	je     c0002e39 <put_fat+0x16d>
c0002e1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e21:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e27:	89 d8                	mov    eax,ebx
c0002e29:	e8 4a ed ff ff       	call   c0001b78 <ld_dword>
c0002e2e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e32:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e37:	09 c7                	or     edi,eax
c0002e39:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e3d:	89 fa                	mov    edx,edi
c0002e3f:	89 d8                	mov    eax,ebx
c0002e41:	e8 9b ed ff ff       	call   c0001be1 <st_dword>
c0002e46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e4a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e4e:	eb 08                	jmp    c0002e58 <put_fat+0x18c>
c0002e50:	b9 02 00 00 00       	mov    ecx,0x2
c0002e55:	89 c8                	mov    eax,ecx
c0002e57:	c3                   	ret    
c0002e58:	83 c4 1c             	add    esp,0x1c
c0002e5b:	89 c8                	mov    eax,ecx
c0002e5d:	5b                   	pop    ebx
c0002e5e:	5e                   	pop    esi
c0002e5f:	5f                   	pop    edi
c0002e60:	5d                   	pop    ebp
c0002e61:	c3                   	ret    

c0002e62 <fill_last_frag>:
c0002e62:	57                   	push   edi
c0002e63:	89 cf                	mov    edi,ecx
c0002e65:	56                   	push   esi
c0002e66:	89 d6                	mov    esi,edx
c0002e68:	53                   	push   ebx
c0002e69:	89 c3                	mov    ebx,eax
c0002e6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e6e:	85 c0                	test   eax,eax
c0002e70:	74 21                	je     c0002e93 <fill_last_frag+0x31>
c0002e72:	89 f9                	mov    ecx,edi
c0002e74:	83 f8 01             	cmp    eax,0x1
c0002e77:	76 05                	jbe    c0002e7e <fill_last_frag+0x1c>
c0002e79:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e7c:	29 c1                	sub    ecx,eax
c0002e7e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e81:	29 c2                	sub    edx,eax
c0002e83:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e85:	e8 42 fe ff ff       	call   c0002ccc <put_fat>
c0002e8a:	85 c0                	test   eax,eax
c0002e8c:	75 05                	jne    c0002e93 <fill_last_frag+0x31>
c0002e8e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e91:	eb d8                	jmp    c0002e6b <fill_last_frag+0x9>
c0002e93:	5b                   	pop    ebx
c0002e94:	5e                   	pop    esi
c0002e95:	5f                   	pop    edi
c0002e96:	c3                   	ret    

c0002e97 <fill_first_frag>:
c0002e97:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e9b:	75 2d                	jne    c0002eca <fill_first_frag+0x33>
c0002e9d:	57                   	push   edi
c0002e9e:	56                   	push   esi
c0002e9f:	53                   	push   ebx
c0002ea0:	89 c3                	mov    ebx,eax
c0002ea2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002ea5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ea8:	01 d7                	add    edi,edx
c0002eaa:	39 fa                	cmp    edx,edi
c0002eac:	74 14                	je     c0002ec2 <fill_first_frag+0x2b>
c0002eae:	8d 72 01             	lea    esi,[edx+0x1]
c0002eb1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002eb3:	89 f1                	mov    ecx,esi
c0002eb5:	e8 12 fe ff ff       	call   c0002ccc <put_fat>
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	85 c0                	test   eax,eax
c0002ebe:	74 ea                	je     c0002eaa <fill_first_frag+0x13>
c0002ec0:	eb 0b                	jmp    c0002ecd <fill_first_frag+0x36>
c0002ec2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ec6:	31 c0                	xor    eax,eax
c0002ec8:	eb 03                	jmp    c0002ecd <fill_first_frag+0x36>
c0002eca:	31 c0                	xor    eax,eax
c0002ecc:	c3                   	ret    
c0002ecd:	5b                   	pop    ebx
c0002ece:	5e                   	pop    esi
c0002ecf:	5f                   	pop    edi
c0002ed0:	c3                   	ret    

c0002ed1 <get_fat>:
c0002ed1:	83 fa 01             	cmp    edx,0x1
c0002ed4:	0f 86 db 01 00 00    	jbe    c00030b5 <get_fat+0x1e4>
c0002eda:	55                   	push   ebp
c0002edb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee0:	57                   	push   edi
c0002ee1:	56                   	push   esi
c0002ee2:	53                   	push   ebx
c0002ee3:	83 ec 1c             	sub    esp,0x1c
c0002ee6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ee8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002eeb:	0f 86 cc 01 00 00    	jbe    c00030bd <get_fat+0x1ec>
c0002ef1:	89 c3                	mov    ebx,eax
c0002ef3:	89 d6                	mov    esi,edx
c0002ef5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ef7:	3c 02                	cmp    al,0x2
c0002ef9:	0f 84 99 00 00 00    	je     c0002f98 <get_fat+0xc7>
c0002eff:	77 09                	ja     c0002f0a <get_fat+0x39>
c0002f01:	fe c8                	dec    al
c0002f03:	74 1a                	je     c0002f1f <get_fat+0x4e>
c0002f05:	e9 b3 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f0a:	3c 03                	cmp    al,0x3
c0002f0c:	0f 84 b5 00 00 00    	je     c0002fc7 <get_fat+0xf6>
c0002f12:	3c 04                	cmp    al,0x4
c0002f14:	0f 84 e3 00 00 00    	je     c0002ffd <get_fat+0x12c>
c0002f1a:	e9 9e 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f1f:	89 d3                	mov    ebx,edx
c0002f21:	31 c9                	xor    ecx,ecx
c0002f23:	d1 eb                	shr    ebx,1
c0002f25:	89 f8                	mov    eax,edi
c0002f27:	01 d3                	add    ebx,edx
c0002f29:	89 da                	mov    edx,ebx
c0002f2b:	c1 ea 09             	shr    edx,0x9
c0002f2e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f31:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f34:	e8 10 f4 ff ff       	call   c0002349 <move_window>
c0002f39:	85 c0                	test   eax,eax
c0002f3b:	74 08                	je     c0002f45 <get_fat+0x74>
c0002f3d:	83 c9 ff             	or     ecx,0xffffffff
c0002f40:	e9 78 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f45:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f48:	31 c9                	xor    ecx,ecx
c0002f4a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f50:	89 ea                	mov    edx,ebp
c0002f52:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f56:	c1 ea 09             	shr    edx,0x9
c0002f59:	89 f8                	mov    eax,edi
c0002f5b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f5e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f61:	e8 e3 f3 ff ff       	call   c0002349 <move_window>
c0002f66:	85 c0                	test   eax,eax
c0002f68:	75 d3                	jne    c0002f3d <get_fat+0x6c>
c0002f6a:	0f b6 c3             	movzx  eax,bl
c0002f6d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f73:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f78:	c1 e3 08             	shl    ebx,0x8
c0002f7b:	09 c3                	or     ebx,eax
c0002f7d:	89 d9                	mov    ecx,ebx
c0002f7f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f85:	83 e6 01             	and    esi,0x1
c0002f88:	0f 84 2f 01 00 00    	je     c00030bd <get_fat+0x1ec>
c0002f8e:	89 d9                	mov    ecx,ebx
c0002f90:	c1 e9 04             	shr    ecx,0x4
c0002f93:	e9 25 01 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002f98:	31 c9                	xor    ecx,ecx
c0002f9a:	c1 ea 08             	shr    edx,0x8
c0002f9d:	89 f8                	mov    eax,edi
c0002f9f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fa2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fa5:	e8 9f f3 ff ff       	call   c0002349 <move_window>
c0002faa:	85 c0                	test   eax,eax
c0002fac:	75 8f                	jne    c0002f3d <get_fat+0x6c>
c0002fae:	01 f6                	add    esi,esi
c0002fb0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fb6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fba:	e8 ac eb ff ff       	call   c0001b6b <ld_word>
c0002fbf:	0f b7 c8             	movzx  ecx,ax
c0002fc2:	e9 f6 00 00 00       	jmp    c00030bd <get_fat+0x1ec>
c0002fc7:	31 c9                	xor    ecx,ecx
c0002fc9:	c1 ea 07             	shr    edx,0x7
c0002fcc:	89 f8                	mov    eax,edi
c0002fce:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fd1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fd4:	e8 70 f3 ff ff       	call   c0002349 <move_window>
c0002fd9:	85 c0                	test   eax,eax
c0002fdb:	0f 85 5c ff ff ff    	jne    c0002f3d <get_fat+0x6c>
c0002fe1:	c1 e6 02             	shl    esi,0x2
c0002fe4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fea:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fee:	e8 85 eb ff ff       	call   c0001b78 <ld_dword>
c0002ff3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ff8:	e9 b4 00 00 00       	jmp    c00030b1 <get_fat+0x1e0>
c0002ffd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003000:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003003:	89 d1                	mov    ecx,edx
c0003005:	09 c1                	or     ecx,eax
c0003007:	74 06                	je     c000300f <get_fat+0x13e>
c0003009:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000300d:	75 0f                	jne    c000301e <get_fat+0x14d>
c000300f:	b9 01 00 00 00       	mov    ecx,0x1
c0003014:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003018:	0f 85 9f 00 00 00    	jne    c00030bd <get_fat+0x1ec>
c000301e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003022:	89 f5                	mov    ebp,esi
c0003024:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003029:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000302c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000302f:	80 f9 02             	cmp    cl,0x2
c0003032:	75 35                	jne    c0003069 <get_fat+0x198>
c0003034:	83 c0 ff             	add    eax,0xffffffff
c0003037:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000303c:	83 d2 ff             	adc    edx,0xffffffff
c000303f:	31 db                	xor    ebx,ebx
c0003041:	0f ac d0 09          	shrd   eax,edx,0x9
c0003045:	53                   	push   ebx
c0003046:	c1 ea 09             	shr    edx,0x9
c0003049:	51                   	push   ecx
c000304a:	52                   	push   edx
c000304b:	50                   	push   eax
c000304c:	e8 3f 00 02 00       	call   c0023090 <__udivdi3>
c0003051:	83 c4 10             	add    esp,0x10
c0003054:	b9 01 00 00 00       	mov    ecx,0x1
c0003059:	39 c5                	cmp    ebp,eax
c000305b:	77 60                	ja     c00030bd <get_fat+0x1ec>
c000305d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003062:	74 59                	je     c00030bd <get_fat+0x1ec>
c0003064:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003067:	eb 54                	jmp    c00030bd <get_fat+0x1ec>
c0003069:	80 f9 03             	cmp    cl,0x3
c000306c:	75 05                	jne    c0003073 <get_fat+0x1a2>
c000306e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003071:	77 f1                	ja     c0003064 <get_fat+0x193>
c0003073:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003078:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000307c:	75 3f                	jne    c00030bd <get_fat+0x1ec>
c000307e:	31 c9                	xor    ecx,ecx
c0003080:	89 f2                	mov    edx,esi
c0003082:	89 f8                	mov    eax,edi
c0003084:	c1 ea 07             	shr    edx,0x7
c0003087:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000308d:	e8 b7 f2 ff ff       	call   c0002349 <move_window>
c0003092:	85 c0                	test   eax,eax
c0003094:	0f 85 a3 fe ff ff    	jne    c0002f3d <get_fat+0x6c>
c000309a:	c1 e6 02             	shl    esi,0x2
c000309d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a3:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030a7:	e8 cc ea ff ff       	call   c0001b78 <ld_dword>
c00030ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030b1:	89 c1                	mov    ecx,eax
c00030b3:	eb 08                	jmp    c00030bd <get_fat+0x1ec>
c00030b5:	b9 01 00 00 00       	mov    ecx,0x1
c00030ba:	89 c8                	mov    eax,ecx
c00030bc:	c3                   	ret    
c00030bd:	83 c4 1c             	add    esp,0x1c
c00030c0:	89 c8                	mov    eax,ecx
c00030c2:	5b                   	pop    ebx
c00030c3:	5e                   	pop    esi
c00030c4:	5f                   	pop    edi
c00030c5:	5d                   	pop    ebp
c00030c6:	c3                   	ret    

c00030c7 <dir_sdi>:
c00030c7:	55                   	push   ebp
c00030c8:	57                   	push   edi
c00030c9:	56                   	push   esi
c00030ca:	53                   	push   ebx
c00030cb:	89 c3                	mov    ebx,eax
c00030cd:	83 ec 1c             	sub    esp,0x1c
c00030d0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030d2:	31 c0                	xor    eax,eax
c00030d4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030d7:	0f 94 c0             	sete   al
c00030da:	48                   	dec    eax
c00030db:	25 00 00 20 f0       	and    eax,0xf0200000
c00030e0:	05 00 00 00 10       	add    eax,0x10000000
c00030e5:	39 d0                	cmp    eax,edx
c00030e7:	77 0a                	ja     c00030f3 <dir_sdi+0x2c>
c00030e9:	b8 02 00 00 00       	mov    eax,0x2
c00030ee:	e9 c4 00 00 00       	jmp    c00031b7 <dir_sdi+0xf0>
c00030f3:	89 d6                	mov    esi,edx
c00030f5:	f6 c2 1f             	test   dl,0x1f
c00030f8:	75 ef                	jne    c00030e9 <dir_sdi+0x22>
c00030fa:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030fd:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003100:	85 c9                	test   ecx,ecx
c0003102:	75 2d                	jne    c0003131 <dir_sdi+0x6a>
c0003104:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003107:	77 1b                	ja     c0003124 <dir_sdi+0x5d>
c0003109:	89 f2                	mov    edx,esi
c000310b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000310f:	c1 ea 05             	shr    edx,0x5
c0003112:	39 c2                	cmp    edx,eax
c0003114:	73 d3                	jae    c00030e9 <dir_sdi+0x22>
c0003116:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003119:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000311c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000311f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003122:	eb 4b                	jmp    c000316f <dir_sdi+0xa8>
c0003124:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003127:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000312b:	85 c0                	test   eax,eax
c000312d:	74 da                	je     c0003109 <dir_sdi+0x42>
c000312f:	89 c1                	mov    ecx,eax
c0003131:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003135:	c1 e5 09             	shl    ebp,0x9
c0003138:	89 ca                	mov    edx,ecx
c000313a:	39 ee                	cmp    esi,ebp
c000313c:	72 1c                	jb     c000315a <dir_sdi+0x93>
c000313e:	89 d8                	mov    eax,ebx
c0003140:	e8 8c fd ff ff       	call   c0002ed1 <get_fat>
c0003145:	89 c1                	mov    ecx,eax
c0003147:	83 f8 ff             	cmp    eax,0xffffffff
c000314a:	74 66                	je     c00031b2 <dir_sdi+0xeb>
c000314c:	83 f8 01             	cmp    eax,0x1
c000314f:	76 98                	jbe    c00030e9 <dir_sdi+0x22>
c0003151:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003154:	76 93                	jbe    c00030e9 <dir_sdi+0x22>
c0003156:	29 ee                	sub    esi,ebp
c0003158:	eb de                	jmp    c0003138 <dir_sdi+0x71>
c000315a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000315e:	89 f8                	mov    eax,edi
c0003160:	e8 9f ec ff ff       	call   c0001e04 <clst2sect>
c0003165:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003169:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000316c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000316f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003172:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003175:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003178:	89 d1                	mov    ecx,edx
c000317a:	09 c1                	or     ecx,eax
c000317c:	0f 84 67 ff ff ff    	je     c00030e9 <dir_sdi+0x22>
c0003182:	89 f1                	mov    ecx,esi
c0003184:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000318c:	c1 e9 09             	shr    ecx,0x9
c000318f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003193:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003197:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000319b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000319e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00031a4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031a7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00031ae:	31 c0                	xor    eax,eax
c00031b0:	eb 05                	jmp    c00031b7 <dir_sdi+0xf0>
c00031b2:	b8 01 00 00 00       	mov    eax,0x1
c00031b7:	83 c4 1c             	add    esp,0x1c
c00031ba:	5b                   	pop    ebx
c00031bb:	5e                   	pop    esi
c00031bc:	5f                   	pop    edi
c00031bd:	5d                   	pop    ebp
c00031be:	c3                   	ret    

c00031bf <create_chain>:
c00031bf:	55                   	push   ebp
c00031c0:	89 c5                	mov    ebp,eax
c00031c2:	57                   	push   edi
c00031c3:	56                   	push   esi
c00031c4:	53                   	push   ebx
c00031c5:	83 ec 1c             	sub    esp,0x1c
c00031c8:	85 d2                	test   edx,edx
c00031ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031ce:	8b 30                	mov    esi,DWORD PTR [eax]
c00031d0:	75 0e                	jne    c00031e0 <create_chain+0x21>
c00031d2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031d5:	85 ff                	test   edi,edi
c00031d7:	74 39                	je     c0003212 <create_chain+0x53>
c00031d9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031dc:	77 39                	ja     c0003217 <create_chain+0x58>
c00031de:	eb 32                	jmp    c0003212 <create_chain+0x53>
c00031e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031e4:	e8 e8 fc ff ff       	call   c0002ed1 <get_fat>
c00031e9:	89 c3                	mov    ebx,eax
c00031eb:	83 f8 01             	cmp    eax,0x1
c00031ee:	77 0a                	ja     c00031fa <create_chain+0x3b>
c00031f0:	bb 01 00 00 00       	mov    ebx,0x1
c00031f5:	e9 ba 01 00 00       	jmp    c00033b4 <create_chain+0x1f5>
c00031fa:	83 f8 ff             	cmp    eax,0xffffffff
c00031fd:	0f 84 62 01 00 00    	je     c0003365 <create_chain+0x1a6>
c0003203:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003206:	0f 87 a8 01 00 00    	ja     c00033b4 <create_chain+0x1f5>
c000320c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003210:	eb 05                	jmp    c0003217 <create_chain+0x58>
c0003212:	bf 01 00 00 00       	mov    edi,0x1
c0003217:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000321b:	75 07                	jne    c0003224 <create_chain+0x65>
c000321d:	31 db                	xor    ebx,ebx
c000321f:	e9 90 01 00 00       	jmp    c00033b4 <create_chain+0x1f5>
c0003224:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003227:	75 74                	jne    c000329d <create_chain+0xde>
c0003229:	b9 01 00 00 00       	mov    ecx,0x1
c000322e:	89 fa                	mov    edx,edi
c0003230:	89 f0                	mov    eax,esi
c0003232:	e8 2d f9 ff ff       	call   c0002b64 <find_bitmap>
c0003237:	89 c3                	mov    ebx,eax
c0003239:	8d 40 ff             	lea    eax,[eax-0x1]
c000323c:	83 f8 fd             	cmp    eax,0xfffffffd
c000323f:	0f 87 6f 01 00 00    	ja     c00033b4 <create_chain+0x1f5>
c0003245:	83 ec 0c             	sub    esp,0xc
c0003248:	b9 01 00 00 00       	mov    ecx,0x1
c000324d:	6a 01                	push   0x1
c000324f:	89 da                	mov    edx,ebx
c0003251:	89 f0                	mov    eax,esi
c0003253:	e8 bf f9 ff ff       	call   c0002c17 <change_bitmap>
c0003258:	83 c4 10             	add    esp,0x10
c000325b:	83 f8 02             	cmp    eax,0x2
c000325e:	74 90                	je     c00031f0 <create_chain+0x31>
c0003260:	83 f8 01             	cmp    eax,0x1
c0003263:	0f 84 fc 00 00 00    	je     c0003365 <create_chain+0x1a6>
c0003269:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000326e:	75 09                	jne    c0003279 <create_chain+0xba>
c0003270:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003274:	e9 0c 01 00 00       	jmp    c0003385 <create_chain+0x1c6>
c0003279:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000327d:	0f 85 e7 00 00 00    	jne    c000336a <create_chain+0x1ab>
c0003283:	8d 57 01             	lea    edx,[edi+0x1]
c0003286:	39 da                	cmp    edx,ebx
c0003288:	0f 84 f7 00 00 00    	je     c0003385 <create_chain+0x1c6>
c000328e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003291:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003295:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003298:	e9 cd 00 00 00       	jmp    c000336a <create_chain+0x1ab>
c000329d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00032a1:	75 41                	jne    c00032e4 <create_chain+0x125>
c00032a3:	8d 5f 01             	lea    ebx,[edi+0x1]
c00032a6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032a9:	77 05                	ja     c00032b0 <create_chain+0xf1>
c00032ab:	bb 02 00 00 00       	mov    ebx,0x2
c00032b0:	89 da                	mov    edx,ebx
c00032b2:	89 e8                	mov    eax,ebp
c00032b4:	e8 18 fc ff ff       	call   c0002ed1 <get_fat>
c00032b9:	83 f8 01             	cmp    eax,0x1
c00032bc:	0f 84 2e ff ff ff    	je     c00031f0 <create_chain+0x31>
c00032c2:	83 f8 ff             	cmp    eax,0xffffffff
c00032c5:	0f 84 9a 00 00 00    	je     c0003365 <create_chain+0x1a6>
c00032cb:	85 c0                	test   eax,eax
c00032cd:	74 11                	je     c00032e0 <create_chain+0x121>
c00032cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032d2:	83 f8 01             	cmp    eax,0x1
c00032d5:	76 0d                	jbe    c00032e4 <create_chain+0x125>
c00032d7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032da:	76 08                	jbe    c00032e4 <create_chain+0x125>
c00032dc:	89 c7                	mov    edi,eax
c00032de:	eb 04                	jmp    c00032e4 <create_chain+0x125>
c00032e0:	85 db                	test   ebx,ebx
c00032e2:	75 38                	jne    c000331c <create_chain+0x15d>
c00032e4:	89 fb                	mov    ebx,edi
c00032e6:	43                   	inc    ebx
c00032e7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032ea:	77 0e                	ja     c00032fa <create_chain+0x13b>
c00032ec:	83 ff 01             	cmp    edi,0x1
c00032ef:	0f 86 28 ff ff ff    	jbe    c000321d <create_chain+0x5e>
c00032f5:	bb 02 00 00 00       	mov    ebx,0x2
c00032fa:	89 da                	mov    edx,ebx
c00032fc:	89 e8                	mov    eax,ebp
c00032fe:	e8 ce fb ff ff       	call   c0002ed1 <get_fat>
c0003303:	85 c0                	test   eax,eax
c0003305:	74 15                	je     c000331c <create_chain+0x15d>
c0003307:	83 f8 01             	cmp    eax,0x1
c000330a:	0f 84 e0 fe ff ff    	je     c00031f0 <create_chain+0x31>
c0003310:	40                   	inc    eax
c0003311:	74 52                	je     c0003365 <create_chain+0x1a6>
c0003313:	39 fb                	cmp    ebx,edi
c0003315:	75 cf                	jne    c00032e6 <create_chain+0x127>
c0003317:	e9 01 ff ff ff       	jmp    c000321d <create_chain+0x5e>
c000331c:	83 c9 ff             	or     ecx,0xffffffff
c000331f:	89 da                	mov    edx,ebx
c0003321:	89 f0                	mov    eax,esi
c0003323:	e8 a4 f9 ff ff       	call   c0002ccc <put_fat>
c0003328:	85 c0                	test   eax,eax
c000332a:	75 32                	jne    c000335e <create_chain+0x19f>
c000332c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003331:	74 11                	je     c0003344 <create_chain+0x185>
c0003333:	89 d9                	mov    ecx,ebx
c0003335:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003339:	89 f0                	mov    eax,esi
c000333b:	e8 8c f9 ff ff       	call   c0002ccc <put_fat>
c0003340:	85 c0                	test   eax,eax
c0003342:	75 1a                	jne    c000335e <create_chain+0x19f>
c0003344:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003347:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000334a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000334d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003350:	39 d0                	cmp    eax,edx
c0003352:	77 04                	ja     c0003358 <create_chain+0x199>
c0003354:	48                   	dec    eax
c0003355:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003358:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000335c:	eb 56                	jmp    c00033b4 <create_chain+0x1f5>
c000335e:	48                   	dec    eax
c000335f:	0f 85 8b fe ff ff    	jne    c00031f0 <create_chain+0x31>
c0003365:	83 cb ff             	or     ebx,0xffffffff
c0003368:	eb 4a                	jmp    c00033b4 <create_chain+0x1f5>
c000336a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003371:	41                   	inc    ecx
c0003372:	39 d9                	cmp    ecx,ebx
c0003374:	75 19                	jne    c000338f <create_chain+0x1d0>
c0003376:	b9 02 00 00 00       	mov    ecx,0x2
c000337b:	85 d2                	test   edx,edx
c000337d:	74 03                	je     c0003382 <create_chain+0x1c3>
c000337f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003382:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003385:	85 c0                	test   eax,eax
c0003387:	0f 85 63 fe ff ff    	jne    c00031f0 <create_chain+0x31>
c000338d:	eb b5                	jmp    c0003344 <create_chain+0x185>
c000338f:	85 d2                	test   edx,edx
c0003391:	75 07                	jne    c000339a <create_chain+0x1db>
c0003393:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000339a:	89 d9                	mov    ecx,ebx
c000339c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033a0:	89 e8                	mov    eax,ebp
c00033a2:	e8 bb fa ff ff       	call   c0002e62 <fill_last_frag>
c00033a7:	85 c0                	test   eax,eax
c00033a9:	75 b3                	jne    c000335e <create_chain+0x19f>
c00033ab:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033b2:	eb 90                	jmp    c0003344 <create_chain+0x185>
c00033b4:	83 c4 1c             	add    esp,0x1c
c00033b7:	89 d8                	mov    eax,ebx
c00033b9:	5b                   	pop    ebx
c00033ba:	5e                   	pop    esi
c00033bb:	5f                   	pop    edi
c00033bc:	5d                   	pop    ebp
c00033bd:	c3                   	ret    

c00033be <remove_chain>:
c00033be:	55                   	push   ebp
c00033bf:	57                   	push   edi
c00033c0:	56                   	push   esi
c00033c1:	53                   	push   ebx
c00033c2:	83 ec 1c             	sub    esp,0x1c
c00033c5:	83 fa 01             	cmp    edx,0x1
c00033c8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033cc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033ce:	77 0a                	ja     c00033da <remove_chain+0x1c>
c00033d0:	b8 02 00 00 00       	mov    eax,0x2
c00033d5:	e9 24 01 00 00       	jmp    c00034fe <remove_chain+0x140>
c00033da:	89 d6                	mov    esi,edx
c00033dc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033df:	76 ef                	jbe    c00033d0 <remove_chain+0x12>
c00033e1:	89 c7                	mov    edi,eax
c00033e3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033e8:	75 06                	jne    c00033f0 <remove_chain+0x32>
c00033ea:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033ee:	eb 54                	jmp    c0003444 <remove_chain+0x86>
c00033f0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033f3:	75 06                	jne    c00033fb <remove_chain+0x3d>
c00033f5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033f9:	74 ef                	je     c00033ea <remove_chain+0x2c>
c00033fb:	83 c9 ff             	or     ecx,0xffffffff
c00033fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003402:	89 d8                	mov    eax,ebx
c0003404:	e8 c3 f8 ff ff       	call   c0002ccc <put_fat>
c0003409:	85 c0                	test   eax,eax
c000340b:	74 dd                	je     c00033ea <remove_chain+0x2c>
c000340d:	e9 ec 00 00 00       	jmp    c00034fe <remove_chain+0x140>
c0003412:	83 f8 01             	cmp    eax,0x1
c0003415:	74 b9                	je     c00033d0 <remove_chain+0x12>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	74 6d                	je     c0003489 <remove_chain+0xcb>
c000341c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000341f:	75 6f                	jne    c0003490 <remove_chain+0xd2>
c0003421:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003424:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003427:	8d 51 fe             	lea    edx,[ecx-0x2]
c000342a:	39 d0                	cmp    eax,edx
c000342c:	73 08                	jae    c0003436 <remove_chain+0x78>
c000342e:	40                   	inc    eax
c000342f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003433:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003436:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003439:	39 e9                	cmp    ecx,ebp
c000343b:	75 64                	jne    c00034a1 <remove_chain+0xe3>
c000343d:	89 ee                	mov    esi,ebp
c000343f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003442:	76 0f                	jbe    c0003453 <remove_chain+0x95>
c0003444:	89 f2                	mov    edx,esi
c0003446:	89 f8                	mov    eax,edi
c0003448:	e8 84 fa ff ff       	call   c0002ed1 <get_fat>
c000344d:	89 c5                	mov    ebp,eax
c000344f:	85 c0                	test   eax,eax
c0003451:	75 bf                	jne    c0003412 <remove_chain+0x54>
c0003453:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003456:	0f 85 a0 00 00 00    	jne    c00034fc <remove_chain+0x13e>
c000345c:	eb 6c                	jmp    c00034ca <remove_chain+0x10c>
c000345e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003461:	84 c0                	test   al,al
c0003463:	75 7d                	jne    c00034e2 <remove_chain+0x124>
c0003465:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003468:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000346c:	0f 84 86 00 00 00    	je     c00034f8 <remove_chain+0x13a>
c0003472:	89 da                	mov    edx,ebx
c0003474:	89 f8                	mov    eax,edi
c0003476:	e8 56 fa ff ff       	call   c0002ed1 <get_fat>
c000347b:	83 f8 01             	cmp    eax,0x1
c000347e:	0f 86 4c ff ff ff    	jbe    c00033d0 <remove_chain+0x12>
c0003484:	83 f8 ff             	cmp    eax,0xffffffff
c0003487:	75 4e                	jne    c00034d7 <remove_chain+0x119>
c0003489:	b8 01 00 00 00       	mov    eax,0x1
c000348e:	eb 6e                	jmp    c00034fe <remove_chain+0x140>
c0003490:	31 c9                	xor    ecx,ecx
c0003492:	89 f2                	mov    edx,esi
c0003494:	89 d8                	mov    eax,ebx
c0003496:	e8 31 f8 ff ff       	call   c0002ccc <put_fat>
c000349b:	85 c0                	test   eax,eax
c000349d:	74 82                	je     c0003421 <remove_chain+0x63>
c000349f:	eb 5d                	jmp    c00034fe <remove_chain+0x140>
c00034a1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034a4:	75 1b                	jne    c00034c1 <remove_chain+0x103>
c00034a6:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00034aa:	89 d8                	mov    eax,ebx
c00034ac:	83 ec 0c             	sub    esp,0xc
c00034af:	6a 00                	push   0x0
c00034b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034b5:	e8 5d f7 ff ff       	call   c0002c17 <change_bitmap>
c00034ba:	83 c4 10             	add    esp,0x10
c00034bd:	85 c0                	test   eax,eax
c00034bf:	75 3d                	jne    c00034fe <remove_chain+0x140>
c00034c1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034c5:	e9 73 ff ff ff       	jmp    c000343d <remove_chain+0x7f>
c00034ca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034cf:	75 8d                	jne    c000345e <remove_chain+0xa0>
c00034d1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034d5:	eb 25                	jmp    c00034fc <remove_chain+0x13e>
c00034d7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034da:	89 c3                	mov    ebx,eax
c00034dc:	39 c2                	cmp    edx,eax
c00034de:	74 88                	je     c0003468 <remove_chain+0xaa>
c00034e0:	eb 1a                	jmp    c00034fc <remove_chain+0x13e>
c00034e2:	3c 03                	cmp    al,0x3
c00034e4:	75 16                	jne    c00034fc <remove_chain+0x13e>
c00034e6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034e9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034ed:	77 0d                	ja     c00034fc <remove_chain+0x13e>
c00034ef:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034f2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034f6:	72 04                	jb     c00034fc <remove_chain+0x13e>
c00034f8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034fc:	31 c0                	xor    eax,eax
c00034fe:	83 c4 1c             	add    esp,0x1c
c0003501:	5b                   	pop    ebx
c0003502:	5e                   	pop    esi
c0003503:	5f                   	pop    edi
c0003504:	5d                   	pop    ebp
c0003505:	c3                   	ret    

c0003506 <dir_clear>:
c0003506:	55                   	push   ebp
c0003507:	57                   	push   edi
c0003508:	56                   	push   esi
c0003509:	89 c6                	mov    esi,eax
c000350b:	53                   	push   ebx
c000350c:	83 ec 1c             	sub    esp,0x1c
c000350f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003513:	e8 9d ed ff ff       	call   c00022b5 <sync_window>
c0003518:	85 c0                	test   eax,eax
c000351a:	0f 85 de 00 00 00    	jne    c00035fe <dir_clear+0xf8>
c0003520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003524:	89 f0                	mov    eax,esi
c0003526:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003529:	e8 d6 e8 ff ff       	call   c0001e04 <clst2sect>
c000352e:	b9 00 02 00 00       	mov    ecx,0x200
c0003533:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003537:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000353b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000353e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003541:	89 e8                	mov    eax,ebp
c0003543:	31 d2                	xor    edx,edx
c0003545:	e8 b5 e6 ff ff       	call   c0001bff <mem_set>
c000354a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000354e:	c1 e3 09             	shl    ebx,0x9
c0003551:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003557:	76 1f                	jbe    c0003578 <dir_clear+0x72>
c0003559:	bb 00 80 00 00       	mov    ebx,0x8000
c000355e:	eb 18                	jmp    c0003578 <dir_clear+0x72>
c0003560:	83 ec 0c             	sub    esp,0xc
c0003563:	53                   	push   ebx
c0003564:	e8 6b 50 00 00       	call   c00085d4 <ff_memalloc>
c0003569:	83 c4 10             	add    esp,0x10
c000356c:	89 c7                	mov    edi,eax
c000356e:	85 c0                	test   eax,eax
c0003570:	0f 85 8f 00 00 00    	jne    c0003605 <dir_clear+0xff>
c0003576:	d1 eb                	shr    ebx,1
c0003578:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000357e:	77 e0                	ja     c0003560 <dir_clear+0x5a>
c0003580:	31 db                	xor    ebx,ebx
c0003582:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003586:	39 d8                	cmp    eax,ebx
c0003588:	76 66                	jbe    c00035f0 <dir_clear+0xea>
c000358a:	83 ec 0c             	sub    esp,0xc
c000358d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003591:	6a 01                	push   0x1
c0003593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003597:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000359b:	55                   	push   ebp
c000359c:	50                   	push   eax
c000359d:	e8 94 e5 ff ff       	call   c0001b36 <disk_write>
c00035a2:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00035a7:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00035ac:	83 c4 20             	add    esp,0x20
c00035af:	85 c0                	test   eax,eax
c00035b1:	75 3d                	jne    c00035f0 <dir_clear+0xea>
c00035b3:	43                   	inc    ebx
c00035b4:	eb cc                	jmp    c0003582 <dir_clear+0x7c>
c00035b6:	83 ec 0c             	sub    esp,0xc
c00035b9:	31 d2                	xor    edx,edx
c00035bb:	55                   	push   ebp
c00035bc:	89 d8                	mov    eax,ebx
c00035be:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035c2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035c6:	52                   	push   edx
c00035c7:	50                   	push   eax
c00035c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035cc:	57                   	push   edi
c00035cd:	50                   	push   eax
c00035ce:	e8 63 e5 ff ff       	call   c0001b36 <disk_write>
c00035d3:	83 c4 20             	add    esp,0x20
c00035d6:	85 c0                	test   eax,eax
c00035d8:	75 0a                	jne    c00035e4 <dir_clear+0xde>
c00035da:	01 eb                	add    ebx,ebp
c00035dc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e0:	39 d8                	cmp    eax,ebx
c00035e2:	77 d2                	ja     c00035b6 <dir_clear+0xb0>
c00035e4:	83 ec 0c             	sub    esp,0xc
c00035e7:	57                   	push   edi
c00035e8:	e8 ff 4f 00 00       	call   c00085ec <ff_memfree>
c00035ed:	83 c4 10             	add    esp,0x10
c00035f0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035f4:	39 d8                	cmp    eax,ebx
c00035f6:	0f 95 c0             	setne  al
c00035f9:	0f b6 c0             	movzx  eax,al
c00035fc:	eb 19                	jmp    c0003617 <dir_clear+0x111>
c00035fe:	b8 01 00 00 00       	mov    eax,0x1
c0003603:	eb 12                	jmp    c0003617 <dir_clear+0x111>
c0003605:	89 d9                	mov    ecx,ebx
c0003607:	31 d2                	xor    edx,edx
c0003609:	c1 eb 09             	shr    ebx,0x9
c000360c:	e8 ee e5 ff ff       	call   c0001bff <mem_set>
c0003611:	89 dd                	mov    ebp,ebx
c0003613:	31 db                	xor    ebx,ebx
c0003615:	eb c5                	jmp    c00035dc <dir_clear+0xd6>
c0003617:	83 c4 1c             	add    esp,0x1c
c000361a:	5b                   	pop    ebx
c000361b:	5e                   	pop    esi
c000361c:	5f                   	pop    edi
c000361d:	5d                   	pop    ebp
c000361e:	c3                   	ret    

c000361f <dir_next>:
c000361f:	55                   	push   ebp
c0003620:	57                   	push   edi
c0003621:	56                   	push   esi
c0003622:	53                   	push   ebx
c0003623:	89 c3                	mov    ebx,eax
c0003625:	83 ec 1c             	sub    esp,0x1c
c0003628:	8b 28                	mov    ebp,DWORD PTR [eax]
c000362a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000362e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003631:	8d 78 20             	lea    edi,[eax+0x20]
c0003634:	31 c0                	xor    eax,eax
c0003636:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000363a:	0f 94 c0             	sete   al
c000363d:	48                   	dec    eax
c000363e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003643:	05 00 00 00 10       	add    eax,0x10000000
c0003648:	39 f8                	cmp    eax,edi
c000364a:	77 0e                	ja     c000365a <dir_next+0x3b>
c000364c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003653:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000365a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000365d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003660:	b8 04 00 00 00       	mov    eax,0x4
c0003665:	89 ce                	mov    esi,ecx
c0003667:	09 d6                	or     esi,edx
c0003669:	0f 84 da 00 00 00    	je     c0003749 <dir_next+0x12a>
c000366f:	89 f8                	mov    eax,edi
c0003671:	25 ff 01 00 00       	and    eax,0x1ff
c0003676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000367a:	0f 85 b9 00 00 00    	jne    c0003739 <dir_next+0x11a>
c0003680:	83 c2 01             	add    edx,0x1
c0003683:	83 d1 00             	adc    ecx,0x0
c0003686:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003689:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000368c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000368f:	85 d2                	test   edx,edx
c0003691:	75 29                	jne    c00036bc <dir_next+0x9d>
c0003693:	89 fa                	mov    edx,edi
c0003695:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003699:	c1 ea 05             	shr    edx,0x5
c000369c:	39 c2                	cmp    edx,eax
c000369e:	0f 82 95 00 00 00    	jb     c0003739 <dir_next+0x11a>
c00036a4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00036ab:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036b2:	b8 04 00 00 00       	mov    eax,0x4
c00036b7:	e9 8d 00 00 00       	jmp    c0003749 <dir_next+0x12a>
c00036bc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036c0:	89 f9                	mov    ecx,edi
c00036c2:	48                   	dec    eax
c00036c3:	c1 e9 09             	shr    ecx,0x9
c00036c6:	85 c8                	test   eax,ecx
c00036c8:	75 6f                	jne    c0003739 <dir_next+0x11a>
c00036ca:	89 d8                	mov    eax,ebx
c00036cc:	e8 00 f8 ff ff       	call   c0002ed1 <get_fat>
c00036d1:	89 c6                	mov    esi,eax
c00036d3:	83 f8 01             	cmp    eax,0x1
c00036d6:	77 07                	ja     c00036df <dir_next+0xc0>
c00036d8:	b8 02 00 00 00       	mov    eax,0x2
c00036dd:	eb 6a                	jmp    c0003749 <dir_next+0x12a>
c00036df:	83 f8 ff             	cmp    eax,0xffffffff
c00036e2:	75 07                	jne    c00036eb <dir_next+0xcc>
c00036e4:	b8 01 00 00 00       	mov    eax,0x1
c00036e9:	eb 5e                	jmp    c0003749 <dir_next+0x12a>
c00036eb:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036ee:	77 37                	ja     c0003727 <dir_next+0x108>
c00036f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036f5:	74 ad                	je     c00036a4 <dir_next+0x85>
c00036f7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036fa:	89 d8                	mov    eax,ebx
c00036fc:	e8 be fa ff ff       	call   c00031bf <create_chain>
c0003701:	89 c6                	mov    esi,eax
c0003703:	b8 07 00 00 00       	mov    eax,0x7
c0003708:	85 f6                	test   esi,esi
c000370a:	74 3d                	je     c0003749 <dir_next+0x12a>
c000370c:	83 fe 01             	cmp    esi,0x1
c000370f:	74 c7                	je     c00036d8 <dir_next+0xb9>
c0003711:	83 fe ff             	cmp    esi,0xffffffff
c0003714:	74 ce                	je     c00036e4 <dir_next+0xc5>
c0003716:	89 f2                	mov    edx,esi
c0003718:	89 e8                	mov    eax,ebp
c000371a:	e8 e7 fd ff ff       	call   c0003506 <dir_clear>
c000371f:	85 c0                	test   eax,eax
c0003721:	75 c1                	jne    c00036e4 <dir_next+0xc5>
c0003723:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003727:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000372a:	89 f2                	mov    edx,esi
c000372c:	89 e8                	mov    eax,ebp
c000372e:	e8 d1 e6 ff ff       	call   c0001e04 <clst2sect>
c0003733:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003736:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000373d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003740:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003744:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003747:	31 c0                	xor    eax,eax
c0003749:	83 c4 1c             	add    esp,0x1c
c000374c:	5b                   	pop    ebx
c000374d:	5e                   	pop    esi
c000374e:	5f                   	pop    edi
c000374f:	5d                   	pop    ebp
c0003750:	c3                   	ret    

c0003751 <load_xdir>:
c0003751:	55                   	push   ebp
c0003752:	57                   	push   edi
c0003753:	56                   	push   esi
c0003754:	89 c6                	mov    esi,eax
c0003756:	53                   	push   ebx
c0003757:	83 ec 1c             	sub    esp,0x1c
c000375a:	8b 00                	mov    eax,DWORD PTR [eax]
c000375c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000375f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003762:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003765:	e8 df eb ff ff       	call   c0002349 <move_window>
c000376a:	89 c3                	mov    ebx,eax
c000376c:	85 c0                	test   eax,eax
c000376e:	0f 85 0c 01 00 00    	jne    c0003880 <load_xdir+0x12f>
c0003774:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003777:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000377a:	0f 85 fb 00 00 00    	jne    c000387b <load_xdir+0x12a>
c0003780:	89 f8                	mov    eax,edi
c0003782:	b9 20 00 00 00       	mov    ecx,0x20
c0003787:	e8 5e e4 ff ff       	call   c0001bea <mem_cpy>
c000378c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003790:	40                   	inc    eax
c0003791:	c1 e0 05             	shl    eax,0x5
c0003794:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003798:	83 e8 60             	sub    eax,0x60
c000379b:	3d 00 02 00 00       	cmp    eax,0x200
c00037a0:	0f 87 d5 00 00 00    	ja     c000387b <load_xdir+0x12a>
c00037a6:	31 d2                	xor    edx,edx
c00037a8:	89 f0                	mov    eax,esi
c00037aa:	e8 70 fe ff ff       	call   c000361f <dir_next>
c00037af:	89 c3                	mov    ebx,eax
c00037b1:	83 f8 04             	cmp    eax,0x4
c00037b4:	0f 84 c1 00 00 00    	je     c000387b <load_xdir+0x12a>
c00037ba:	85 c0                	test   eax,eax
c00037bc:	0f 85 be 00 00 00    	jne    c0003880 <load_xdir+0x12f>
c00037c2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037c5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037c8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ca:	e8 7a eb ff ff       	call   c0002349 <move_window>
c00037cf:	89 c3                	mov    ebx,eax
c00037d1:	85 c0                	test   eax,eax
c00037d3:	0f 85 a7 00 00 00    	jne    c0003880 <load_xdir+0x12f>
c00037d9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037dc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037df:	0f 85 96 00 00 00    	jne    c000387b <load_xdir+0x12a>
c00037e5:	8d 47 20             	lea    eax,[edi+0x20]
c00037e8:	b9 20 00 00 00       	mov    ecx,0x20
c00037ed:	e8 f8 e3 ff ff       	call   c0001bea <mem_cpy>
c00037f2:	31 d2                	xor    edx,edx
c00037f4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037f8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037fd:	83 c0 2c             	add    eax,0x2c
c0003800:	f7 f1                	div    ecx
c0003802:	c1 e0 05             	shl    eax,0x5
c0003805:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003809:	77 70                	ja     c000387b <load_xdir+0x12a>
c000380b:	bd 40 00 00 00       	mov    ebp,0x40
c0003810:	31 d2                	xor    edx,edx
c0003812:	89 f0                	mov    eax,esi
c0003814:	e8 06 fe ff ff       	call   c000361f <dir_next>
c0003819:	89 c3                	mov    ebx,eax
c000381b:	83 f8 04             	cmp    eax,0x4
c000381e:	74 5b                	je     c000387b <load_xdir+0x12a>
c0003820:	85 c0                	test   eax,eax
c0003822:	75 5c                	jne    c0003880 <load_xdir+0x12f>
c0003824:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003827:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000382a:	8b 06                	mov    eax,DWORD PTR [esi]
c000382c:	e8 18 eb ff ff       	call   c0002349 <move_window>
c0003831:	89 c3                	mov    ebx,eax
c0003833:	85 c0                	test   eax,eax
c0003835:	75 49                	jne    c0003880 <load_xdir+0x12f>
c0003837:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000383a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000383d:	75 3c                	jne    c000387b <load_xdir+0x12a>
c000383f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003845:	77 0d                	ja     c0003854 <load_xdir+0x103>
c0003847:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000384a:	b9 20 00 00 00       	mov    ecx,0x20
c000384f:	e8 96 e3 ff ff       	call   c0001bea <mem_cpy>
c0003854:	83 c5 20             	add    ebp,0x20
c0003857:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000385b:	77 b3                	ja     c0003810 <load_xdir+0xbf>
c000385d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003863:	77 1b                	ja     c0003880 <load_xdir+0x12f>
c0003865:	89 f8                	mov    eax,edi
c0003867:	e8 cd e7 ff ff       	call   c0002039 <xdir_sum>
c000386c:	89 c1                	mov    ecx,eax
c000386e:	8d 47 02             	lea    eax,[edi+0x2]
c0003871:	e8 f5 e2 ff ff       	call   c0001b6b <ld_word>
c0003876:	66 39 c1             	cmp    cx,ax
c0003879:	74 05                	je     c0003880 <load_xdir+0x12f>
c000387b:	bb 02 00 00 00       	mov    ebx,0x2
c0003880:	83 c4 1c             	add    esp,0x1c
c0003883:	89 d8                	mov    eax,ebx
c0003885:	5b                   	pop    ebx
c0003886:	5e                   	pop    esi
c0003887:	5f                   	pop    edi
c0003888:	5d                   	pop    ebp
c0003889:	c3                   	ret    

c000388a <load_obj_xdir>:
c000388a:	53                   	push   ebx
c000388b:	89 c3                	mov    ebx,eax
c000388d:	83 ec 08             	sub    esp,0x8
c0003890:	8b 02                	mov    eax,DWORD PTR [edx]
c0003892:	89 03                	mov    DWORD PTR [ebx],eax
c0003894:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003897:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000389a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000389d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00038a0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00038a3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00038aa:	30 c0                	xor    al,al
c00038ac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038b3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038b6:	89 d8                	mov    eax,ebx
c00038b8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038bb:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038be:	e8 04 f8 ff ff       	call   c00030c7 <dir_sdi>
c00038c3:	85 c0                	test   eax,eax
c00038c5:	75 0b                	jne    c00038d2 <load_obj_xdir+0x48>
c00038c7:	89 d8                	mov    eax,ebx
c00038c9:	83 c4 08             	add    esp,0x8
c00038cc:	5b                   	pop    ebx
c00038cd:	e9 7f fe ff ff       	jmp    c0003751 <load_xdir>
c00038d2:	83 c4 08             	add    esp,0x8
c00038d5:	5b                   	pop    ebx
c00038d6:	c3                   	ret    

c00038d7 <dir_read>:
c00038d7:	55                   	push   ebp
c00038d8:	bd 04 00 00 00       	mov    ebp,0x4
c00038dd:	57                   	push   edi
c00038de:	56                   	push   esi
c00038df:	be ff ff ff ff       	mov    esi,0xffffffff
c00038e4:	53                   	push   ebx
c00038e5:	89 c3                	mov    ebx,eax
c00038e7:	83 ec 1c             	sub    esp,0x1c
c00038ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ee:	8b 38                	mov    edi,DWORD PTR [eax]
c00038f0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038f5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038f8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038fb:	89 c8                	mov    eax,ecx
c00038fd:	09 d0                	or     eax,edx
c00038ff:	0f 84 25 01 00 00    	je     c0003a2a <dir_read+0x153>
c0003905:	89 f8                	mov    eax,edi
c0003907:	e8 3d ea ff ff       	call   c0002349 <move_window>
c000390c:	89 c5                	mov    ebp,eax
c000390e:	85 c0                	test   eax,eax
c0003910:	0f 85 23 01 00 00    	jne    c0003a39 <dir_read+0x162>
c0003916:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003919:	8a 0a                	mov    cl,BYTE PTR [edx]
c000391b:	84 c9                	test   cl,cl
c000391d:	0f 84 11 01 00 00    	je     c0003a34 <dir_read+0x15d>
c0003923:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003926:	75 48                	jne    c0003970 <dir_read+0x99>
c0003928:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000392d:	74 10                	je     c000393f <dir_read+0x68>
c000392f:	80 f9 83             	cmp    cl,0x83
c0003932:	0f 85 dd 00 00 00    	jne    c0003a15 <dir_read+0x13e>
c0003938:	31 ed                	xor    ebp,ebp
c000393a:	e9 08 01 00 00       	jmp    c0003a47 <dir_read+0x170>
c000393f:	80 f9 85             	cmp    cl,0x85
c0003942:	0f 85 cd 00 00 00    	jne    c0003a15 <dir_read+0x13e>
c0003948:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000394b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000394e:	89 d8                	mov    eax,ebx
c0003950:	e8 fc fd ff ff       	call   c0003751 <load_xdir>
c0003955:	89 c5                	mov    ebp,eax
c0003957:	85 c0                	test   eax,eax
c0003959:	0f 85 da 00 00 00    	jne    c0003a39 <dir_read+0x162>
c000395f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003962:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003965:	83 e0 3f             	and    eax,0x3f
c0003968:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000396b:	e9 d7 00 00 00       	jmp    c0003a47 <dir_read+0x170>
c0003970:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003973:	83 e0 3f             	and    eax,0x3f
c0003976:	80 f9 2e             	cmp    cl,0x2e
c0003979:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000397d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003980:	0f 84 8a 00 00 00    	je     c0003a10 <dir_read+0x139>
c0003986:	80 f9 e5             	cmp    cl,0xe5
c0003989:	0f 84 81 00 00 00    	je     c0003a10 <dir_read+0x139>
c000398f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003993:	83 e0 1f             	and    eax,0x1f
c0003996:	83 f8 08             	cmp    eax,0x8
c0003999:	0f 94 c0             	sete   al
c000399c:	0f b6 c0             	movzx  eax,al
c000399f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00039a3:	75 6b                	jne    c0003a10 <dir_read+0x139>
c00039a5:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00039aa:	75 44                	jne    c00039f0 <dir_read+0x119>
c00039ac:	f6 c1 40             	test   cl,0x40
c00039af:	74 12                	je     c00039c3 <dir_read+0xec>
c00039b1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039b4:	83 e1 bf             	and    ecx,0xffffffbf
c00039b7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039bb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039be:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039c1:	eb 06                	jmp    c00039c9 <dir_read+0xf2>
c00039c3:	89 f0                	mov    eax,esi
c00039c5:	38 c8                	cmp    al,cl
c00039c7:	75 47                	jne    c0003a10 <dir_read+0x139>
c00039c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039cd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039d2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039d5:	75 3e                	jne    c0003a15 <dir_read+0x13e>
c00039d7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039db:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039de:	e8 8a e4 ff ff       	call   c0001e6d <pick_lfn>
c00039e3:	85 c0                	test   eax,eax
c00039e5:	74 2e                	je     c0003a15 <dir_read+0x13e>
c00039e7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039eb:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039ee:	eb 25                	jmp    c0003a15 <dir_read+0x13e>
c00039f0:	89 f0                	mov    eax,esi
c00039f2:	84 c0                	test   al,al
c00039f4:	75 11                	jne    c0003a07 <dir_read+0x130>
c00039f6:	89 d0                	mov    eax,edx
c00039f8:	e8 2a e6 ff ff       	call   c0002027 <sum_sfn>
c00039fd:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003a01:	0f 84 31 ff ff ff    	je     c0003938 <dir_read+0x61>
c0003a07:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003a0e:	eb 37                	jmp    c0003a47 <dir_read+0x170>
c0003a10:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a15:	31 d2                	xor    edx,edx
c0003a17:	89 d8                	mov    eax,ebx
c0003a19:	e8 01 fc ff ff       	call   c000361f <dir_next>
c0003a1e:	89 c5                	mov    ebp,eax
c0003a20:	85 c0                	test   eax,eax
c0003a22:	0f 84 cd fe ff ff    	je     c00038f5 <dir_read+0x1e>
c0003a28:	eb 0f                	jmp    c0003a39 <dir_read+0x162>
c0003a2a:	85 ed                	test   ebp,ebp
c0003a2c:	0f 84 06 ff ff ff    	je     c0003938 <dir_read+0x61>
c0003a32:	eb 05                	jmp    c0003a39 <dir_read+0x162>
c0003a34:	bd 04 00 00 00       	mov    ebp,0x4
c0003a39:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a47:	83 c4 1c             	add    esp,0x1c
c0003a4a:	89 e8                	mov    eax,ebp
c0003a4c:	5b                   	pop    ebx
c0003a4d:	5e                   	pop    esi
c0003a4e:	5f                   	pop    edi
c0003a4f:	5d                   	pop    ebp
c0003a50:	c3                   	ret    

c0003a51 <dir_alloc>:
c0003a51:	55                   	push   ebp
c0003a52:	89 d5                	mov    ebp,edx
c0003a54:	57                   	push   edi
c0003a55:	31 d2                	xor    edx,edx
c0003a57:	56                   	push   esi
c0003a58:	53                   	push   ebx
c0003a59:	89 c3                	mov    ebx,eax
c0003a5b:	83 ec 0c             	sub    esp,0xc
c0003a5e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a60:	e8 62 f6 ff ff       	call   c00030c7 <dir_sdi>
c0003a65:	85 c0                	test   eax,eax
c0003a67:	75 4e                	jne    c0003ab7 <dir_alloc+0x66>
c0003a69:	31 f6                	xor    esi,esi
c0003a6b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a6e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a71:	89 f8                	mov    eax,edi
c0003a73:	e8 d1 e8 ff ff       	call   c0002349 <move_window>
c0003a78:	85 c0                	test   eax,eax
c0003a7a:	75 3b                	jne    c0003ab7 <dir_alloc+0x66>
c0003a7c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a7f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a82:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a84:	75 07                	jne    c0003a8d <dir_alloc+0x3c>
c0003a86:	f7 d2                	not    edx
c0003a88:	c0 ea 07             	shr    dl,0x7
c0003a8b:	eb 0d                	jmp    c0003a9a <dir_alloc+0x49>
c0003a8d:	84 d2                	test   dl,dl
c0003a8f:	0f 94 c1             	sete   cl
c0003a92:	80 fa e5             	cmp    dl,0xe5
c0003a95:	0f 94 c2             	sete   dl
c0003a98:	09 ca                	or     edx,ecx
c0003a9a:	84 d2                	test   dl,dl
c0003a9c:	74 07                	je     c0003aa5 <dir_alloc+0x54>
c0003a9e:	46                   	inc    esi
c0003a9f:	39 ee                	cmp    esi,ebp
c0003aa1:	75 04                	jne    c0003aa7 <dir_alloc+0x56>
c0003aa3:	eb 1c                	jmp    c0003ac1 <dir_alloc+0x70>
c0003aa5:	31 f6                	xor    esi,esi
c0003aa7:	ba 01 00 00 00       	mov    edx,0x1
c0003aac:	89 d8                	mov    eax,ebx
c0003aae:	e8 6c fb ff ff       	call   c000361f <dir_next>
c0003ab3:	85 c0                	test   eax,eax
c0003ab5:	74 b4                	je     c0003a6b <dir_alloc+0x1a>
c0003ab7:	83 f8 04             	cmp    eax,0x4
c0003aba:	75 05                	jne    c0003ac1 <dir_alloc+0x70>
c0003abc:	b8 07 00 00 00       	mov    eax,0x7
c0003ac1:	83 c4 0c             	add    esp,0xc
c0003ac4:	5b                   	pop    ebx
c0003ac5:	5e                   	pop    esi
c0003ac6:	5f                   	pop    edi
c0003ac7:	5d                   	pop    ebp
c0003ac8:	c3                   	ret    

c0003ac9 <store_xdir>:
c0003ac9:	55                   	push   ebp
c0003aca:	57                   	push   edi
c0003acb:	89 c7                	mov    edi,eax
c0003acd:	56                   	push   esi
c0003ace:	53                   	push   ebx
c0003acf:	83 ec 0c             	sub    esp,0xc
c0003ad2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ad4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ad7:	89 e8                	mov    eax,ebp
c0003ad9:	e8 5b e5 ff ff       	call   c0002039 <xdir_sum>
c0003ade:	0f b7 d0             	movzx  edx,ax
c0003ae1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ae4:	e8 f4 e0 ff ff       	call   c0001bdd <st_word>
c0003ae9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003aed:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003af0:	89 f8                	mov    eax,edi
c0003af2:	e8 d0 f5 ff ff       	call   c00030c7 <dir_sdi>
c0003af7:	89 c6                	mov    esi,eax
c0003af9:	85 f6                	test   esi,esi
c0003afb:	75 3d                	jne    c0003b3a <store_xdir+0x71>
c0003afd:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003b00:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003b03:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b05:	e8 3f e8 ff ff       	call   c0002349 <move_window>
c0003b0a:	89 c6                	mov    esi,eax
c0003b0c:	85 c0                	test   eax,eax
c0003b0e:	75 2a                	jne    c0003b3a <store_xdir+0x71>
c0003b10:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b13:	b9 20 00 00 00       	mov    ecx,0x20
c0003b18:	89 ea                	mov    edx,ebp
c0003b1a:	e8 cb e0 ff ff       	call   c0001bea <mem_cpy>
c0003b1f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b21:	85 db                	test   ebx,ebx
c0003b23:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b27:	74 11                	je     c0003b3a <store_xdir+0x71>
c0003b29:	31 d2                	xor    edx,edx
c0003b2b:	89 f8                	mov    eax,edi
c0003b2d:	83 c5 20             	add    ebp,0x20
c0003b30:	e8 ea fa ff ff       	call   c000361f <dir_next>
c0003b35:	4b                   	dec    ebx
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	eb bf                	jmp    c0003af9 <store_xdir+0x30>
c0003b3a:	89 f0                	mov    eax,esi
c0003b3c:	83 fe 02             	cmp    esi,0x2
c0003b3f:	76 05                	jbe    c0003b46 <store_xdir+0x7d>
c0003b41:	b8 02 00 00 00       	mov    eax,0x2
c0003b46:	83 c4 0c             	add    esp,0xc
c0003b49:	5b                   	pop    ebx
c0003b4a:	5e                   	pop    esi
c0003b4b:	5f                   	pop    edi
c0003b4c:	5d                   	pop    ebp
c0003b4d:	c3                   	ret    

c0003b4e <dir_remove>:
c0003b4e:	57                   	push   edi
c0003b4f:	56                   	push   esi
c0003b50:	53                   	push   ebx
c0003b51:	89 c3                	mov    ebx,eax
c0003b53:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b56:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b58:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b5b:	83 fa ff             	cmp    edx,0xffffffff
c0003b5e:	74 09                	je     c0003b69 <dir_remove+0x1b>
c0003b60:	e8 62 f5 ff ff       	call   c00030c7 <dir_sdi>
c0003b65:	85 c0                	test   eax,eax
c0003b67:	75 41                	jne    c0003baa <dir_remove+0x5c>
c0003b69:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b6c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b6f:	89 f0                	mov    eax,esi
c0003b71:	e8 d3 e7 ff ff       	call   c0002349 <move_window>
c0003b76:	85 c0                	test   eax,eax
c0003b78:	75 26                	jne    c0003ba0 <dir_remove+0x52>
c0003b7a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b7d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b80:	75 05                	jne    c0003b87 <dir_remove+0x39>
c0003b82:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b85:	eb 03                	jmp    c0003b8a <dir_remove+0x3c>
c0003b87:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b8a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b8e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b91:	73 17                	jae    c0003baa <dir_remove+0x5c>
c0003b93:	31 d2                	xor    edx,edx
c0003b95:	89 d8                	mov    eax,ebx
c0003b97:	e8 83 fa ff ff       	call   c000361f <dir_next>
c0003b9c:	85 c0                	test   eax,eax
c0003b9e:	74 c9                	je     c0003b69 <dir_remove+0x1b>
c0003ba0:	83 f8 04             	cmp    eax,0x4
c0003ba3:	75 05                	jne    c0003baa <dir_remove+0x5c>
c0003ba5:	b8 02 00 00 00       	mov    eax,0x2
c0003baa:	5b                   	pop    ebx
c0003bab:	5e                   	pop    esi
c0003bac:	5f                   	pop    edi
c0003bad:	c3                   	ret    

c0003bae <create_name>:
c0003bae:	55                   	push   ebp
c0003baf:	89 d5                	mov    ebp,edx
c0003bb1:	57                   	push   edi
c0003bb2:	89 c7                	mov    edi,eax
c0003bb4:	56                   	push   esi
c0003bb5:	31 f6                	xor    esi,esi
c0003bb7:	53                   	push   ebx
c0003bb8:	83 ec 3c             	sub    esp,0x3c
c0003bbb:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bbd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bc1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bc6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bce:	e8 72 e0 ff ff       	call   c0001c45 <tchar2uni>
c0003bd3:	89 c3                	mov    ebx,eax
c0003bd5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bd8:	75 0a                	jne    c0003be4 <create_name+0x36>
c0003bda:	b8 06 00 00 00       	mov    eax,0x6
c0003bdf:	e9 9e 02 00 00       	jmp    c0003e82 <create_name+0x2d4>
c0003be4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003be9:	76 0c                	jbe    c0003bf7 <create_name+0x49>
c0003beb:	c1 e8 10             	shr    eax,0x10
c0003bee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003bf2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003bf6:	46                   	inc    esi
c0003bf7:	66 83 fb 1f          	cmp    bx,0x1f
c0003bfb:	76 4f                	jbe    c0003c4c <create_name+0x9e>
c0003bfd:	66 83 fb 5c          	cmp    bx,0x5c
c0003c01:	74 35                	je     c0003c38 <create_name+0x8a>
c0003c03:	66 83 fb 2f          	cmp    bx,0x2f
c0003c07:	74 2f                	je     c0003c38 <create_name+0x8a>
c0003c09:	66 83 fb 7f          	cmp    bx,0x7f
c0003c0d:	77 11                	ja     c0003c20 <create_name+0x72>
c0003c0f:	0f b7 d3             	movzx  edx,bx
c0003c12:	b8 b2 41 02 c0       	mov    eax,0xc00241b2
c0003c17:	e8 11 e0 ff ff       	call   c0001c2d <chk_chr>
c0003c1c:	85 c0                	test   eax,eax
c0003c1e:	75 ba                	jne    c0003bda <create_name+0x2c>
c0003c20:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c26:	77 b2                	ja     c0003bda <create_name+0x2c>
c0003c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c2c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c30:	46                   	inc    esi
c0003c31:	eb 97                	jmp    c0003bca <create_name+0x1c>
c0003c33:	40                   	inc    eax
c0003c34:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c3c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c3e:	80 fa 2f             	cmp    dl,0x2f
c0003c41:	74 f0                	je     c0003c33 <create_name+0x85>
c0003c43:	80 fa 5c             	cmp    dl,0x5c
c0003c46:	74 eb                	je     c0003c33 <create_name+0x85>
c0003c48:	31 db                	xor    ebx,ebx
c0003c4a:	eb 02                	jmp    c0003c4e <create_name+0xa0>
c0003c4c:	b3 04                	mov    bl,0x4
c0003c4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c52:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c55:	85 f6                	test   esi,esi
c0003c57:	74 18                	je     c0003c71 <create_name+0xc3>
c0003c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c5d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c62:	66 83 f8 20          	cmp    ax,0x20
c0003c66:	74 06                	je     c0003c6e <create_name+0xc0>
c0003c68:	66 83 f8 2e          	cmp    ax,0x2e
c0003c6c:	75 03                	jne    c0003c71 <create_name+0xc3>
c0003c6e:	4e                   	dec    esi
c0003c6f:	eb e4                	jmp    c0003c55 <create_name+0xa7>
c0003c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c75:	31 ed                	xor    ebp,ebp
c0003c77:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c7d:	85 f6                	test   esi,esi
c0003c7f:	0f 84 55 ff ff ff    	je     c0003bda <create_name+0x2c>
c0003c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c89:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c8c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c90:	66 83 f8 20          	cmp    ax,0x20
c0003c94:	75 04                	jne    c0003c9a <create_name+0xec>
c0003c96:	89 d5                	mov    ebp,edx
c0003c98:	eb eb                	jmp    c0003c85 <create_name+0xd7>
c0003c9a:	85 ed                	test   ebp,ebp
c0003c9c:	75 06                	jne    c0003ca4 <create_name+0xf6>
c0003c9e:	66 83 f8 2e          	cmp    ax,0x2e
c0003ca2:	75 08                	jne    c0003cac <create_name+0xfe>
c0003ca4:	83 cb 03             	or     ebx,0x3
c0003ca7:	eb 03                	jmp    c0003cac <create_name+0xfe>
c0003ca9:	4e                   	dec    esi
c0003caa:	74 0c                	je     c0003cb8 <create_name+0x10a>
c0003cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cb0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003cb6:	75 f1                	jne    c0003ca9 <create_name+0xfb>
c0003cb8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cbd:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cc0:	ba 20 00 00 00       	mov    edx,0x20
c0003cc5:	e8 35 df ff ff       	call   c0001bff <mem_set>
c0003cca:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cd2:	31 c9                	xor    ecx,ecx
c0003cd4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cd9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003cdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003ce8:	66 85 ed             	test   bp,bp
c0003ceb:	0f 84 30 01 00 00    	je     c0003e21 <create_name+0x273>
c0003cf1:	66 83 fd 20          	cmp    bp,0x20
c0003cf5:	74 10                	je     c0003d07 <create_name+0x159>
c0003cf7:	66 83 fd 2e          	cmp    bp,0x2e
c0003cfb:	75 13                	jne    c0003d10 <create_name+0x162>
c0003cfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d01:	0f 84 6b 01 00 00    	je     c0003e72 <create_name+0x2c4>
c0003d07:	83 cb 03             	or     ebx,0x3
c0003d0a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003d0e:	eb c9                	jmp    c0003cd9 <create_name+0x12b>
c0003d10:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d14:	73 0b                	jae    c0003d21 <create_name+0x173>
c0003d16:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d1a:	75 47                	jne    c0003d63 <create_name+0x1b5>
c0003d1c:	e9 51 01 00 00       	jmp    c0003e72 <create_name+0x2c4>
c0003d21:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d26:	75 10                	jne    c0003d38 <create_name+0x18a>
c0003d28:	83 cb 03             	or     ebx,0x3
c0003d2b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d33:	e9 e9 00 00 00       	jmp    c0003e21 <create_name+0x273>
c0003d38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d3c:	74 0d                	je     c0003d4b <create_name+0x19d>
c0003d3e:	83 cb 03             	or     ebx,0x3
c0003d41:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d45:	0f 87 d6 00 00 00    	ja     c0003e21 <create_name+0x273>
c0003d4b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d50:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d54:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d5c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d61:	eb a7                	jmp    c0003d0a <create_name+0x15c>
c0003d63:	66 83 fd 7f          	cmp    bp,0x7f
c0003d67:	76 68                	jbe    c0003dd1 <create_name+0x223>
c0003d69:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d6d:	88 da                	mov    dl,bl
c0003d6f:	83 ca 02             	or     edx,0x2
c0003d72:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d76:	50                   	push   eax
c0003d77:	50                   	push   eax
c0003d78:	68 b5 01 00 00       	push   0x1b5
c0003d7d:	55                   	push   ebp
c0003d7e:	e8 81 48 00 00       	call   c0008604 <ff_uni2oem>
c0003d83:	83 c4 10             	add    esp,0x10
c0003d86:	89 c5                	mov    ebp,eax
c0003d88:	a8 80                	test   al,0x80
c0003d8a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d8e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d92:	74 0c                	je     c0003da0 <create_name+0x1f2>
c0003d94:	83 e5 7f             	and    ebp,0x7f
c0003d97:	0f b6 ad 00 41 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdbf00]
c0003d9e:	eb 2a                	jmp    c0003dca <create_name+0x21c>
c0003da0:	66 3d ff 00          	cmp    ax,0xff
c0003da4:	76 24                	jbe    c0003dca <create_name+0x21c>
c0003da6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003daa:	48                   	dec    eax
c0003dab:	39 c8                	cmp    eax,ecx
c0003dad:	77 0c                	ja     c0003dbb <create_name+0x20d>
c0003daf:	83 cb 03             	or     ebx,0x3
c0003db2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003db6:	e9 4f ff ff ff       	jmp    c0003d0a <create_name+0x15c>
c0003dbb:	89 e8                	mov    eax,ebp
c0003dbd:	88 d3                	mov    bl,dl
c0003dbf:	66 c1 e8 08          	shr    ax,0x8
c0003dc3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003dc7:	41                   	inc    ecx
c0003dc8:	eb 4b                	jmp    c0003e15 <create_name+0x267>
c0003dca:	88 d3                	mov    bl,dl
c0003dcc:	66 85 ed             	test   bp,bp
c0003dcf:	74 19                	je     c0003dea <create_name+0x23c>
c0003dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dd5:	0f b7 d5             	movzx  edx,bp
c0003dd8:	b8 bb 41 02 c0       	mov    eax,0xc00241bb
c0003ddd:	e8 4b de ff ff       	call   c0001c2d <chk_chr>
c0003de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003de6:	85 c0                	test   eax,eax
c0003de8:	74 0a                	je     c0003df4 <create_name+0x246>
c0003dea:	83 cb 03             	or     ebx,0x3
c0003ded:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003df2:	eb 21                	jmp    c0003e15 <create_name+0x267>
c0003df4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 07                	ja     c0003e04 <create_name+0x256>
c0003dfd:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003e02:	eb 11                	jmp    c0003e15 <create_name+0x267>
c0003e04:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003e07:	66 83 f8 19          	cmp    ax,0x19
c0003e0b:	77 08                	ja     c0003e15 <create_name+0x267>
c0003e0d:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e12:	83 ed 20             	sub    ebp,0x20
c0003e15:	89 e8                	mov    eax,ebp
c0003e17:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e1b:	41                   	inc    ecx
c0003e1c:	e9 e9 fe ff ff       	jmp    c0003d0a <create_name+0x15c>
c0003e21:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e25:	75 04                	jne    c0003e2b <create_name+0x27d>
c0003e27:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e2b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e30:	75 05                	jne    c0003e37 <create_name+0x289>
c0003e32:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e37:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e3b:	83 e0 0c             	and    eax,0xc
c0003e3e:	3c 0c                	cmp    al,0xc
c0003e40:	74 0b                	je     c0003e4d <create_name+0x29f>
c0003e42:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e46:	83 e0 03             	and    eax,0x3
c0003e49:	3c 03                	cmp    al,0x3
c0003e4b:	75 05                	jne    c0003e52 <create_name+0x2a4>
c0003e4d:	83 cb 02             	or     ebx,0x2
c0003e50:	eb 19                	jmp    c0003e6b <create_name+0x2bd>
c0003e52:	f6 c3 02             	test   bl,0x2
c0003e55:	75 14                	jne    c0003e6b <create_name+0x2bd>
c0003e57:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e5c:	74 03                	je     c0003e61 <create_name+0x2b3>
c0003e5e:	83 cb 10             	or     ebx,0x10
c0003e61:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e66:	74 03                	je     c0003e6b <create_name+0x2bd>
c0003e68:	83 cb 08             	or     ebx,0x8
c0003e6b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e6e:	31 c0                	xor    eax,eax
c0003e70:	eb 10                	jmp    c0003e82 <create_name+0x2d4>
c0003e72:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e77:	0f 85 ce fe ff ff    	jne    c0003d4b <create_name+0x19d>
c0003e7d:	e9 a6 fe ff ff       	jmp    c0003d28 <create_name+0x17a>
c0003e82:	83 c4 3c             	add    esp,0x3c
c0003e85:	5b                   	pop    ebx
c0003e86:	5e                   	pop    esi
c0003e87:	5f                   	pop    edi
c0003e88:	5d                   	pop    ebp
c0003e89:	c3                   	ret    

c0003e8a <xname_sum>:
c0003e8a:	56                   	push   esi
c0003e8b:	53                   	push   ebx
c0003e8c:	89 c6                	mov    esi,eax
c0003e8e:	51                   	push   ecx
c0003e8f:	31 db                	xor    ebx,ebx
c0003e91:	83 c6 02             	add    esi,0x2
c0003e94:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e98:	66 85 c0             	test   ax,ax
c0003e9b:	74 1f                	je     c0003ebc <xname_sum+0x32>
c0003e9d:	83 ec 0c             	sub    esp,0xc
c0003ea0:	66 d1 cb             	ror    bx,1
c0003ea3:	50                   	push   eax
c0003ea4:	e8 67 48 00 00       	call   c0008710 <ff_wtoupper>
c0003ea9:	83 c4 10             	add    esp,0x10
c0003eac:	0f b6 d0             	movzx  edx,al
c0003eaf:	66 c1 e8 08          	shr    ax,0x8
c0003eb3:	01 d3                	add    ebx,edx
c0003eb5:	66 d1 cb             	ror    bx,1
c0003eb8:	01 c3                	add    ebx,eax
c0003eba:	eb d5                	jmp    c0003e91 <xname_sum+0x7>
c0003ebc:	89 d8                	mov    eax,ebx
c0003ebe:	5a                   	pop    edx
c0003ebf:	5b                   	pop    ebx
c0003ec0:	5e                   	pop    esi
c0003ec1:	c3                   	ret    

c0003ec2 <create_xdir>:
c0003ec2:	55                   	push   ebp
c0003ec3:	b9 40 00 00 00       	mov    ecx,0x40
c0003ec8:	57                   	push   edi
c0003ec9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ece:	56                   	push   esi
c0003ecf:	31 ff                	xor    edi,edi
c0003ed1:	53                   	push   ebx
c0003ed2:	be 40 00 00 00       	mov    esi,0x40
c0003ed7:	89 c3                	mov    ebx,eax
c0003ed9:	83 ec 1c             	sub    esp,0x1c
c0003edc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ee0:	31 d2                	xor    edx,edx
c0003ee2:	e8 18 dd ff ff       	call   c0001bff <mem_set>
c0003ee7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eea:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003eee:	31 c9                	xor    ecx,ecx
c0003ef0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ef3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ef7:	83 c6 02             	add    esi,0x2
c0003efa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003efe:	66 85 ed             	test   bp,bp
c0003f01:	74 12                	je     c0003f15 <create_xdir+0x53>
c0003f03:	0f b6 c1             	movzx  eax,cl
c0003f06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f0a:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003f0e:	66 83 fd 01          	cmp    bp,0x1
c0003f12:	80 d9 ff             	sbb    cl,0xff
c0003f15:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f18:	0f b7 d5             	movzx  edx,bp
c0003f1b:	83 c6 02             	add    esi,0x2
c0003f1e:	e8 ba dc ff ff       	call   c0001bdd <st_word>
c0003f23:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f29:	75 d3                	jne    c0003efe <create_xdir+0x3c>
c0003f2b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f2e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f32:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f36:	0f b6 c1             	movzx  eax,cl
c0003f39:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f3e:	74 07                	je     c0003f47 <create_xdir+0x85>
c0003f40:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f45:	eb a9                	jmp    c0003ef0 <create_xdir+0x2e>
c0003f47:	8d 47 02             	lea    eax,[edi+0x2]
c0003f4a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f4d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f50:	89 d0                	mov    eax,edx
c0003f52:	e8 33 ff ff ff       	call   c0003e8a <xname_sum>
c0003f57:	83 c4 1c             	add    esp,0x1c
c0003f5a:	0f b7 d0             	movzx  edx,ax
c0003f5d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f60:	5b                   	pop    ebx
c0003f61:	5e                   	pop    esi
c0003f62:	5f                   	pop    edi
c0003f63:	5d                   	pop    ebp
c0003f64:	e9 74 dc ff ff       	jmp    c0001bdd <st_word>

c0003f69 <cmp_lfn>:
c0003f69:	55                   	push   ebp
c0003f6a:	57                   	push   edi
c0003f6b:	89 d7                	mov    edi,edx
c0003f6d:	56                   	push   esi
c0003f6e:	53                   	push   ebx
c0003f6f:	83 ec 1c             	sub    esp,0x1c
c0003f72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f76:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f79:	e8 ed db ff ff       	call   c0001b6b <ld_word>
c0003f7e:	66 85 c0             	test   ax,ax
c0003f81:	74 07                	je     c0003f8a <cmp_lfn+0x21>
c0003f83:	31 c0                	xor    eax,eax
c0003f85:	e9 9a 00 00 00       	jmp    c0004024 <cmp_lfn+0xbb>
c0003f8a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f8c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f91:	83 e3 3f             	and    ebx,0x3f
c0003f94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f9c:	4b                   	dec    ebx
c0003f9d:	6b db 0d             	imul   ebx,ebx,0xd
c0003fa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fa4:	0f b6 80 80 41 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdbe80]
c0003fab:	01 f8                	add    eax,edi
c0003fad:	e8 b9 db ff ff       	call   c0001b6b <ld_word>
c0003fb2:	66 85 ed             	test   bp,bp
c0003fb5:	89 c6                	mov    esi,eax
c0003fb7:	74 3c                	je     c0003ff5 <cmp_lfn+0x8c>
c0003fb9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003fbf:	77 c2                	ja     c0003f83 <cmp_lfn+0x1a>
c0003fc1:	83 ec 0c             	sub    esp,0xc
c0003fc4:	0f b7 c0             	movzx  eax,ax
c0003fc7:	50                   	push   eax
c0003fc8:	e8 43 47 00 00       	call   c0008710 <ff_wtoupper>
c0003fcd:	89 c5                	mov    ebp,eax
c0003fcf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fd2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fda:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fde:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fe1:	e8 2a 47 00 00       	call   c0008710 <ff_wtoupper>
c0003fe6:	83 c4 10             	add    esp,0x10
c0003fe9:	39 c5                	cmp    ebp,eax
c0003feb:	75 96                	jne    c0003f83 <cmp_lfn+0x1a>
c0003fed:	89 f5                	mov    ebp,esi
c0003fef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003ff3:	eb 04                	jmp    c0003ff9 <cmp_lfn+0x90>
c0003ff5:	66 46                	inc    si
c0003ff7:	75 8a                	jne    c0003f83 <cmp_lfn+0x1a>
c0003ff9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ffd:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004002:	75 9c                	jne    c0003fa0 <cmp_lfn+0x37>
c0004004:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004007:	74 16                	je     c000401f <cmp_lfn+0xb6>
c0004009:	66 85 ed             	test   bp,bp
c000400c:	74 11                	je     c000401f <cmp_lfn+0xb6>
c000400e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004012:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004017:	0f 94 c0             	sete   al
c000401a:	0f b6 c0             	movzx  eax,al
c000401d:	eb 05                	jmp    c0004024 <cmp_lfn+0xbb>
c000401f:	b8 01 00 00 00       	mov    eax,0x1
c0004024:	83 c4 1c             	add    esp,0x1c
c0004027:	5b                   	pop    ebx
c0004028:	5e                   	pop    esi
c0004029:	5f                   	pop    edi
c000402a:	5d                   	pop    ebp
c000402b:	c3                   	ret    

c000402c <dir_find>:
c000402c:	55                   	push   ebp
c000402d:	31 d2                	xor    edx,edx
c000402f:	57                   	push   edi
c0004030:	56                   	push   esi
c0004031:	53                   	push   ebx
c0004032:	89 c3                	mov    ebx,eax
c0004034:	83 ec 1c             	sub    esp,0x1c
c0004037:	8b 30                	mov    esi,DWORD PTR [eax]
c0004039:	e8 89 f0 ff ff       	call   c00030c7 <dir_sdi>
c000403e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004041:	85 c0                	test   eax,eax
c0004043:	0f 85 9e 01 00 00    	jne    c00041e7 <dir_find+0x1bb>
c0004049:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000404c:	0f 85 8d 00 00 00    	jne    c00040df <dir_find+0xb3>
c0004052:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004055:	e8 30 fe ff ff       	call   c0003e8a <xname_sum>
c000405a:	89 c7                	mov    edi,eax
c000405c:	31 d2                	xor    edx,edx
c000405e:	89 d8                	mov    eax,ebx
c0004060:	e8 72 f8 ff ff       	call   c00038d7 <dir_read>
c0004065:	85 c0                	test   eax,eax
c0004067:	0f 85 5e 01 00 00    	jne    c00041cb <dir_find+0x19f>
c000406d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004070:	8d 41 24             	lea    eax,[ecx+0x24]
c0004073:	e8 f3 da ff ff       	call   c0001b6b <ld_word>
c0004078:	66 39 f8             	cmp    ax,di
c000407b:	75 df                	jne    c000405c <dir_find+0x30>
c000407d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004080:	31 ed                	xor    ebp,ebp
c0004082:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004086:	ba 40 00 00 00       	mov    edx,0x40
c000408b:	89 e9                	mov    ecx,ebp
c000408d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004091:	0f 84 42 01 00 00    	je     c00041d9 <dir_find+0x1ad>
c0004097:	f6 c2 1f             	test   dl,0x1f
c000409a:	75 03                	jne    c000409f <dir_find+0x73>
c000409c:	83 c2 02             	add    edx,0x2
c000409f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00040a3:	89 d0                	mov    eax,edx
c00040a5:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00040a8:	e8 be da ff ff       	call   c0001b6b <ld_word>
c00040ad:	83 ec 0c             	sub    esp,0xc
c00040b0:	0f b7 c0             	movzx  eax,ax
c00040b3:	50                   	push   eax
c00040b4:	e8 57 46 00 00       	call   c0008710 <ff_wtoupper>
c00040b9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040bd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040c0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040c7:	e8 44 46 00 00       	call   c0008710 <ff_wtoupper>
c00040cc:	83 c4 10             	add    esp,0x10
c00040cf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040d3:	75 87                	jne    c000405c <dir_find+0x30>
c00040d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040d9:	45                   	inc    ebp
c00040da:	83 c2 02             	add    edx,0x2
c00040dd:	eb ac                	jmp    c000408b <dir_find+0x5f>
c00040df:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040e6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040f0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040f3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040f6:	89 f0                	mov    eax,esi
c00040f8:	e8 4c e2 ff ff       	call   c0002349 <move_window>
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 c6 00 00 00    	jne    c00041cb <dir_find+0x19f>
c0004105:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004108:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c000410b:	84 c9                	test   cl,cl
c000410d:	0f 84 bd 00 00 00    	je     c00041d0 <dir_find+0x1a4>
c0004113:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004116:	88 d0                	mov    al,dl
c0004118:	83 e0 3f             	and    eax,0x3f
c000411b:	80 f9 e5             	cmp    cl,0xe5
c000411e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004121:	0f 84 87 00 00 00    	je     c00041ae <dir_find+0x182>
c0004127:	80 e2 08             	and    dl,0x8
c000412a:	74 06                	je     c0004132 <dir_find+0x106>
c000412c:	3c 0f                	cmp    al,0xf
c000412e:	75 7e                	jne    c00041ae <dir_find+0x182>
c0004130:	eb 04                	jmp    c0004136 <dir_find+0x10a>
c0004132:	3c 0f                	cmp    al,0xf
c0004134:	75 4c                	jne    c0004182 <dir_find+0x156>
c0004136:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000413a:	75 7e                	jne    c00041ba <dir_find+0x18e>
c000413c:	f6 c1 40             	test   cl,0x40
c000413f:	74 12                	je     c0004153 <dir_find+0x127>
c0004141:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004144:	83 e1 bf             	and    ecx,0xffffffbf
c0004147:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000414b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000414e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004151:	eb 06                	jmp    c0004159 <dir_find+0x12d>
c0004153:	89 f8                	mov    eax,edi
c0004155:	38 c8                	cmp    al,cl
c0004157:	75 5c                	jne    c00041b5 <dir_find+0x189>
c0004159:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000415d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004162:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004165:	75 53                	jne    c00041ba <dir_find+0x18e>
c0004167:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000416b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000416e:	89 ea                	mov    edx,ebp
c0004170:	e8 f4 fd ff ff       	call   c0003f69 <cmp_lfn>
c0004175:	85 c0                	test   eax,eax
c0004177:	74 41                	je     c00041ba <dir_find+0x18e>
c0004179:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000417d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004180:	eb 38                	jmp    c00041ba <dir_find+0x18e>
c0004182:	89 f8                	mov    eax,edi
c0004184:	84 c0                	test   al,al
c0004186:	75 0d                	jne    c0004195 <dir_find+0x169>
c0004188:	89 e8                	mov    eax,ebp
c000418a:	e8 98 de ff ff       	call   c0002027 <sum_sfn>
c000418f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004193:	74 52                	je     c00041e7 <dir_find+0x1bb>
c0004195:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004199:	75 13                	jne    c00041ae <dir_find+0x182>
c000419b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000419e:	b9 0b 00 00 00       	mov    ecx,0xb
c00041a3:	89 e8                	mov    eax,ebp
c00041a5:	e8 60 da ff ff       	call   c0001c0a <mem_cmp>
c00041aa:	85 c0                	test   eax,eax
c00041ac:	74 39                	je     c00041e7 <dir_find+0x1bb>
c00041ae:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041b5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ba:	31 d2                	xor    edx,edx
c00041bc:	89 d8                	mov    eax,ebx
c00041be:	e8 5c f4 ff ff       	call   c000361f <dir_next>
c00041c3:	85 c0                	test   eax,eax
c00041c5:	0f 84 25 ff ff ff    	je     c00040f0 <dir_find+0xc4>
c00041cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041ce:	eb 17                	jmp    c00041e7 <dir_find+0x1bb>
c00041d0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041d7:	eb 0e                	jmp    c00041e7 <dir_find+0x1bb>
c00041d9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041dc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041e1:	0f 85 75 fe ff ff    	jne    c000405c <dir_find+0x30>
c00041e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041ea:	83 c4 1c             	add    esp,0x1c
c00041ed:	5b                   	pop    ebx
c00041ee:	5e                   	pop    esi
c00041ef:	5f                   	pop    edi
c00041f0:	5d                   	pop    ebp
c00041f1:	c3                   	ret    

c00041f2 <dir_register>:
c00041f2:	55                   	push   ebp
c00041f3:	57                   	push   edi
c00041f4:	56                   	push   esi
c00041f5:	be 06 00 00 00       	mov    esi,0x6
c00041fa:	53                   	push   ebx
c00041fb:	83 ec 6c             	sub    esp,0x6c
c00041fe:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004202:	0f 85 62 02 00 00    	jne    c000446a <dir_register+0x278>
c0004208:	8b 28                	mov    ebp,DWORD PTR [eax]
c000420a:	31 ff                	xor    edi,edi
c000420c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000420f:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004214:	74 03                	je     c0004219 <dir_register+0x27>
c0004216:	47                   	inc    edi
c0004217:	eb f6                	jmp    c000420f <dir_register+0x1d>
c0004219:	89 c3                	mov    ebx,eax
c000421b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000421f:	0f 85 e1 00 00 00    	jne    c0004306 <dir_register+0x114>
c0004225:	83 c7 0e             	add    edi,0xe
c0004228:	b9 0f 00 00 00       	mov    ecx,0xf
c000422d:	89 f8                	mov    eax,edi
c000422f:	31 d2                	xor    edx,edx
c0004231:	f7 f1                	div    ecx
c0004233:	8d 50 02             	lea    edx,[eax+0x2]
c0004236:	89 c7                	mov    edi,eax
c0004238:	89 d8                	mov    eax,ebx
c000423a:	e8 12 f8 ff ff       	call   c0003a51 <dir_alloc>
c000423f:	89 c6                	mov    esi,eax
c0004241:	85 c0                	test   eax,eax
c0004243:	0f 85 21 02 00 00    	jne    c000446a <dir_register+0x278>
c0004249:	81 c7 01 00 00 08    	add    edi,0x8000001
c000424f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004252:	c1 e7 05             	shl    edi,0x5
c0004255:	29 f8                	sub    eax,edi
c0004257:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000425a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000425d:	a8 04                	test   al,0x4
c000425f:	0f 84 91 00 00 00    	je     c00042f6 <dir_register+0x104>
c0004265:	83 e0 fb             	and    eax,0xfffffffb
c0004268:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000426b:	89 d8                	mov    eax,ebx
c000426d:	e8 25 ec ff ff       	call   c0002e97 <fill_first_frag>
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 ee 01 00 00    	jne    c0004468 <dir_register+0x276>
c000427a:	83 c9 ff             	or     ecx,0xffffffff
c000427d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004280:	89 d8                	mov    eax,ebx
c0004282:	e8 db eb ff ff       	call   c0002e62 <fill_last_frag>
c0004287:	85 c0                	test   eax,eax
c0004289:	0f 85 d9 01 00 00    	jne    c0004468 <dir_register+0x276>
c000428f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004293:	74 61                	je     c00042f6 <dir_register+0x104>
c0004295:	89 da                	mov    edx,ebx
c0004297:	8d 44 24 14          	lea    eax,[esp+0x14]
c000429b:	e8 ea f5 ff ff       	call   c000388a <load_obj_xdir>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	0f 85 c0 01 00 00    	jne    c0004468 <dir_register+0x276>
c00042a8:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00042ac:	31 c9                	xor    ecx,ecx
c00042ae:	c1 e2 09             	shl    edx,0x9
c00042b1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042b4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042b7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042ba:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042c0:	83 c0 38             	add    eax,0x38
c00042c3:	e8 1c d9 ff ff       	call   c0001be4 <st_qword>
c00042c8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042cb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042ce:	83 c0 28             	add    eax,0x28
c00042d1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042d4:	e8 0b d9 ff ff       	call   c0001be4 <st_qword>
c00042d9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042dc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042df:	83 c8 01             	or     eax,0x1
c00042e2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042e9:	e8 db f7 ff ff       	call   c0003ac9 <store_xdir>
c00042ee:	85 c0                	test   eax,eax
c00042f0:	0f 85 72 01 00 00    	jne    c0004468 <dir_register+0x276>
c00042f6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042f9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042fc:	e8 c1 fb ff ff       	call   c0003ec2 <create_xdir>
c0004301:	e9 64 01 00 00       	jmp    c000446a <dir_register+0x278>
c0004306:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004309:	b9 0c 00 00 00       	mov    ecx,0xc
c000430e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004312:	89 c2                	mov    edx,eax
c0004314:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004318:	e8 cd d8 ff ff       	call   c0001bea <mem_cpy>
c000431d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004322:	74 58                	je     c000437c <dir_register+0x18a>
c0004324:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004328:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004330:	83 ec 0c             	sub    esp,0xc
c0004333:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000433a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000433e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004342:	e8 24 dc ff ff       	call   c0001f6b <gen_numname>
c0004347:	89 d8                	mov    eax,ebx
c0004349:	e8 de fc ff ff       	call   c000402c <dir_find>
c000434e:	83 c4 10             	add    esp,0x10
c0004351:	89 c6                	mov    esi,eax
c0004353:	85 c0                	test   eax,eax
c0004355:	75 15                	jne    c000436c <dir_register+0x17a>
c0004357:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000435b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004360:	75 ce                	jne    c0004330 <dir_register+0x13e>
c0004362:	be 07 00 00 00       	mov    esi,0x7
c0004367:	e9 fe 00 00 00       	jmp    c000446a <dir_register+0x278>
c000436c:	83 f8 04             	cmp    eax,0x4
c000436f:	0f 85 f5 00 00 00    	jne    c000446a <dir_register+0x278>
c0004375:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004379:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000437c:	b9 01 00 00 00       	mov    ecx,0x1
c0004381:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004386:	74 0f                	je     c0004397 <dir_register+0x1a5>
c0004388:	b9 0d 00 00 00       	mov    ecx,0xd
c000438d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004390:	31 d2                	xor    edx,edx
c0004392:	f7 f1                	div    ecx
c0004394:	8d 48 01             	lea    ecx,[eax+0x1]
c0004397:	89 ca                	mov    edx,ecx
c0004399:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439d:	89 d8                	mov    eax,ebx
c000439f:	e8 ad f6 ff ff       	call   c0003a51 <dir_alloc>
c00043a4:	89 c6                	mov    esi,eax
c00043a6:	85 c0                	test   eax,eax
c00043a8:	0f 85 bc 00 00 00    	jne    c000446a <dir_register+0x278>
c00043ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b2:	49                   	dec    ecx
c00043b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043b7:	74 6a                	je     c0004423 <dir_register+0x231>
c00043b9:	89 c8                	mov    eax,ecx
c00043bb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043be:	c1 e0 05             	shl    eax,0x5
c00043c1:	29 c2                	sub    edx,eax
c00043c3:	89 d8                	mov    eax,ebx
c00043c5:	e8 fd ec ff ff       	call   c00030c7 <dir_sdi>
c00043ca:	89 c6                	mov    esi,eax
c00043cc:	85 c0                	test   eax,eax
c00043ce:	0f 85 96 00 00 00    	jne    c000446a <dir_register+0x278>
c00043d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043d8:	e8 4a dc ff ff       	call   c0002027 <sum_sfn>
c00043dd:	0f b6 f8             	movzx  edi,al
c00043e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043e6:	89 e8                	mov    eax,ebp
c00043e8:	e8 5c df ff ff       	call   c0002349 <move_window>
c00043ed:	89 c6                	mov    esi,eax
c00043ef:	85 c0                	test   eax,eax
c00043f1:	75 77                	jne    c000446a <dir_register+0x278>
c00043f3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043f8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043fb:	83 ec 0c             	sub    esp,0xc
c00043fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004401:	57                   	push   edi
c0004402:	e8 e0 da ff ff       	call   c0001ee7 <put_lfn>
c0004407:	31 d2                	xor    edx,edx
c0004409:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000440d:	89 d8                	mov    eax,ebx
c000440f:	e8 0b f2 ff ff       	call   c000361f <dir_next>
c0004414:	83 c4 10             	add    esp,0x10
c0004417:	89 c6                	mov    esi,eax
c0004419:	85 c0                	test   eax,eax
c000441b:	75 4d                	jne    c000446a <dir_register+0x278>
c000441d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004421:	75 bd                	jne    c00043e0 <dir_register+0x1ee>
c0004423:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004426:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004429:	89 e8                	mov    eax,ebp
c000442b:	e8 19 df ff ff       	call   c0002349 <move_window>
c0004430:	89 c6                	mov    esi,eax
c0004432:	85 c0                	test   eax,eax
c0004434:	75 34                	jne    c000446a <dir_register+0x278>
c0004436:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004439:	b9 20 00 00 00       	mov    ecx,0x20
c000443e:	31 d2                	xor    edx,edx
c0004440:	e8 ba d7 ff ff       	call   c0001bff <mem_set>
c0004445:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004448:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000444c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004451:	e8 94 d7 ff ff       	call   c0001bea <mem_cpy>
c0004456:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004459:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000445c:	83 e0 18             	and    eax,0x18
c000445f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004462:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004466:	eb 02                	jmp    c000446a <dir_register+0x278>
c0004468:	89 c6                	mov    esi,eax
c000446a:	83 c4 6c             	add    esp,0x6c
c000446d:	89 f0                	mov    eax,esi
c000446f:	5b                   	pop    ebx
c0004470:	5e                   	pop    esi
c0004471:	5f                   	pop    edi
c0004472:	5d                   	pop    ebp
c0004473:	c3                   	ret    

c0004474 <sync_fs>:
c0004474:	56                   	push   esi
c0004475:	53                   	push   ebx
c0004476:	53                   	push   ebx
c0004477:	89 c3                	mov    ebx,eax
c0004479:	e8 37 de ff ff       	call   c00022b5 <sync_window>
c000447e:	85 c0                	test   eax,eax
c0004480:	0f 85 b1 00 00 00    	jne    c0004537 <sync_fs+0xc3>
c0004486:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004489:	0f 85 8e 00 00 00    	jne    c000451d <sync_fs+0xa9>
c000448f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004493:	0f 85 84 00 00 00    	jne    c000451d <sync_fs+0xa9>
c0004499:	b9 00 02 00 00       	mov    ecx,0x200
c000449e:	8d 73 54             	lea    esi,[ebx+0x54]
c00044a1:	31 d2                	xor    edx,edx
c00044a3:	89 f0                	mov    eax,esi
c00044a5:	e8 55 d7 ff ff       	call   c0001bff <mem_set>
c00044aa:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044b0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044b5:	e8 23 d7 ff ff       	call   c0001bdd <st_word>
c00044ba:	ba 52 52 61 41       	mov    edx,0x41615252
c00044bf:	89 f0                	mov    eax,esi
c00044c1:	e8 1b d7 ff ff       	call   c0001be1 <st_dword>
c00044c6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044cc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044d1:	e8 0b d7 ff ff       	call   c0001be1 <st_dword>
c00044d6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044d9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044df:	e8 fd d6 ff ff       	call   c0001be1 <st_dword>
c00044e4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044e7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044ed:	e8 ef d6 ff ff       	call   c0001be1 <st_dword>
c00044f2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044f5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044f8:	83 c0 01             	add    eax,0x1
c00044fb:	83 d2 00             	adc    edx,0x0
c00044fe:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004501:	83 ec 0c             	sub    esp,0xc
c0004504:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004507:	6a 01                	push   0x1
c0004509:	52                   	push   edx
c000450a:	50                   	push   eax
c000450b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000450f:	56                   	push   esi
c0004510:	50                   	push   eax
c0004511:	e8 20 d6 ff ff       	call   c0001b36 <disk_write>
c0004516:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000451a:	83 c4 20             	add    esp,0x20
c000451d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004521:	51                   	push   ecx
c0004522:	6a 00                	push   0x0
c0004524:	6a 00                	push   0x0
c0004526:	50                   	push   eax
c0004527:	e8 20 d6 ff ff       	call   c0001b4c <disk_ioctl>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	85 c0                	test   eax,eax
c0004531:	0f 95 c0             	setne  al
c0004534:	0f b6 c0             	movzx  eax,al
c0004537:	5a                   	pop    edx
c0004538:	5b                   	pop    ebx
c0004539:	5e                   	pop    esi
c000453a:	c3                   	ret    

c000453b <create_partition>:
c000453b:	55                   	push   ebp
c000453c:	0f b6 c0             	movzx  eax,al
c000453f:	57                   	push   edi
c0004540:	56                   	push   esi
c0004541:	53                   	push   ebx
c0004542:	83 ec 60             	sub    esp,0x60
c0004545:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004549:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000454d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004551:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004555:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004559:	50                   	push   eax
c000455a:	6a 01                	push   0x1
c000455c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004560:	e8 e7 d5 ff ff       	call   c0001b4c <disk_ioctl>
c0004565:	83 c4 10             	add    esp,0x10
c0004568:	85 c0                	test   eax,eax
c000456a:	74 0a                	je     c0004576 <create_partition+0x3b>
c000456c:	b8 01 00 00 00       	mov    eax,0x1
c0004571:	e9 67 05 00 00       	jmp    c0004add <create_partition+0x5a2>
c0004576:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000457a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000457e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004582:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004586:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000458b:	0f 86 ed 03 00 00    	jbe    c000497e <create_partition+0x443>
c0004591:	83 c0 df             	add    eax,0xffffffdf
c0004594:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000459c:	83 d2 ff             	adc    edx,0xffffffff
c000459f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00045a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00045a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00045ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00045af:	83 c0 bd             	add    eax,0xffffffbd
c00045b2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045b9:	83 d2 ff             	adc    edx,0xffffffff
c00045bc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045c4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045cc:	be 22 00 00 00       	mov    esi,0x22
c00045d1:	31 ff                	xor    edi,edi
c00045d3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045db:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045e3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045eb:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045ef:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f5:	75 0e                	jne    c0004605 <create_partition+0xca>
c00045f7:	b9 00 02 00 00       	mov    ecx,0x200
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	89 d8                	mov    eax,ebx
c0004600:	e8 fa d5 ff ff       	call   c0001bff <mem_set>
c0004605:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004609:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000460d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004611:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004614:	0f 84 23 01 00 00    	je     c000473d <create_partition+0x202>
c000461a:	89 f0                	mov    eax,esi
c000461c:	89 fa                	mov    edx,edi
c000461e:	05 ff 07 00 00       	add    eax,0x7ff
c0004623:	83 d2 00             	adc    edx,0x0
c0004626:	89 c1                	mov    ecx,eax
c0004628:	89 d7                	mov    edi,edx
c000462a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004630:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004634:	89 ce                	mov    esi,ecx
c0004636:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000463a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000463e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004642:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004645:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004649:	89 04 24             	mov    DWORD PTR [esp],eax
c000464c:	b8 64 00 00 00       	mov    eax,0x64
c0004651:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004654:	b8 00 00 00 00       	mov    eax,0x0
c0004659:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000465d:	72 41                	jb     c00046a0 <create_partition+0x165>
c000465f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004663:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004667:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000466b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004670:	01 c1                	add    ecx,eax
c0004672:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004676:	f7 24 24             	mul    DWORD PTR [esp]
c0004679:	6a 00                	push   0x0
c000467b:	01 ca                	add    edx,ecx
c000467d:	6a 64                	push   0x64
c000467f:	52                   	push   edx
c0004680:	50                   	push   eax
c0004681:	e8 0a ea 01 00       	call   c0023090 <__udivdi3>
c0004686:	83 c4 10             	add    esp,0x10
c0004689:	05 ff 07 00 00       	add    eax,0x7ff
c000468e:	83 d2 00             	adc    edx,0x0
c0004691:	89 c1                	mov    ecx,eax
c0004693:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004697:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000469d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00046a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00046a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00046a7:	01 f0                	add    eax,esi
c00046a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00046ad:	11 fa                	adc    edx,edi
c00046af:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046b3:	19 d1                	sbb    ecx,edx
c00046b5:	73 2e                	jae    c00046e5 <create_partition+0x1aa>
c00046b7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046bb:	89 f8                	mov    eax,edi
c00046bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046c4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046c8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046d0:	73 6b                	jae    c000473d <create_partition+0x202>
c00046d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046da:	29 f0                	sub    eax,esi
c00046dc:	19 fa                	sbb    edx,edi
c00046de:	89 04 24             	mov    DWORD PTR [esp],eax
c00046e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046e9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046ec:	74 4f                	je     c000473d <create_partition+0x202>
c00046ee:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046f1:	b9 10 00 00 00       	mov    ecx,0x10
c00046f6:	ba 90 41 02 c0       	mov    edx,0xc0024190
c00046fb:	e8 ea d4 ff ff       	call   c0001bea <mem_cpy>
c0004700:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004704:	b9 10 00 00 00       	mov    ecx,0x10
c0004709:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000470d:	e8 2c db ff ff       	call   c000223e <make_rand>
c0004712:	89 f2                	mov    edx,esi
c0004714:	89 f9                	mov    ecx,edi
c0004716:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000471a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000471e:	e8 c1 d4 ff ff       	call   c0001be4 <st_qword>
c0004723:	03 34 24             	add    esi,DWORD PTR [esp]
c0004726:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000472a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000472e:	89 f2                	mov    edx,esi
c0004730:	89 f9                	mov    ecx,edi
c0004732:	83 c2 ff             	add    edx,0xffffffff
c0004735:	83 d1 ff             	adc    ecx,0xffffffff
c0004738:	e8 a7 d4 ff ff       	call   c0001be4 <st_qword>
c000473d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004741:	83 e8 80             	sub    eax,0xffffff80
c0004744:	89 c5                	mov    ebp,eax
c0004746:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000474a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004750:	75 6b                	jne    c00047bd <create_partition+0x282>
c0004752:	45                   	inc    ebp
c0004753:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004757:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000475c:	e8 39 da ff ff       	call   c000219a <crc32>
c0004761:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004767:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000476b:	75 e5                	jne    c0004752 <create_partition+0x217>
c000476d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004771:	31 d2                	xor    edx,edx
c0004773:	83 ec 0c             	sub    esp,0xc
c0004776:	c1 ed 09             	shr    ebp,0x9
c0004779:	6a 01                	push   0x1
c000477b:	8d 45 02             	lea    eax,[ebp+0x2]
c000477e:	52                   	push   edx
c000477f:	50                   	push   eax
c0004780:	53                   	push   ebx
c0004781:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004785:	e8 ac d3 ff ff       	call   c0001b36 <disk_write>
c000478a:	83 c4 20             	add    esp,0x20
c000478d:	85 c0                	test   eax,eax
c000478f:	0f 85 d7 fd ff ff    	jne    c000456c <create_partition+0x31>
c0004795:	83 ec 0c             	sub    esp,0xc
c0004798:	31 d2                	xor    edx,edx
c000479a:	6a 01                	push   0x1
c000479c:	89 e8                	mov    eax,ebp
c000479e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00047a2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00047a6:	52                   	push   edx
c00047a7:	50                   	push   eax
c00047a8:	53                   	push   ebx
c00047a9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ad:	e8 84 d3 ff ff       	call   c0001b36 <disk_write>
c00047b2:	83 c4 20             	add    esp,0x20
c00047b5:	85 c0                	test   eax,eax
c00047b7:	0f 85 af fd ff ff    	jne    c000456c <create_partition+0x31>
c00047bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047c5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ca:	74 0d                	je     c00047d9 <create_partition+0x29e>
c00047cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047d0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047d4:	e9 12 fe ff ff       	jmp    c00045eb <create_partition+0xb0>
c00047d9:	31 d2                	xor    edx,edx
c00047db:	b9 00 02 00 00       	mov    ecx,0x200
c00047e0:	89 d8                	mov    eax,ebx
c00047e2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047e5:	e8 15 d4 ff ff       	call   c0001bff <mem_set>
c00047ea:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047ed:	b9 10 00 00 00       	mov    ecx,0x10
c00047f2:	ba 80 40 02 c0       	mov    edx,0xc0024080
c00047f7:	89 d8                	mov    eax,ebx
c00047f9:	e8 ec d3 ff ff       	call   c0001bea <mem_cpy>
c00047fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004802:	8d 43 58             	lea    eax,[ebx+0x58]
c0004805:	f7 d2                	not    edx
c0004807:	e8 d5 d3 ff ff       	call   c0001be1 <st_dword>
c000480c:	8d 43 18             	lea    eax,[ebx+0x18]
c000480f:	31 c9                	xor    ecx,ecx
c0004811:	89 04 24             	mov    DWORD PTR [esp],eax
c0004814:	ba 01 00 00 00       	mov    edx,0x1
c0004819:	e8 c6 d3 ff ff       	call   c0001be4 <st_qword>
c000481e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004822:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004826:	83 c2 ff             	add    edx,0xffffffff
c0004829:	89 e8                	mov    eax,ebp
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 b1 d3 ff ff       	call   c0001be4 <st_qword>
c0004833:	31 c9                	xor    ecx,ecx
c0004835:	8d 43 28             	lea    eax,[ebx+0x28]
c0004838:	ba 22 00 00 00       	mov    edx,0x22
c000483d:	e8 a2 d3 ff ff       	call   c0001be4 <st_qword>
c0004842:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004846:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000484a:	83 c2 de             	add    edx,0xffffffde
c000484d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004850:	83 d1 ff             	adc    ecx,0xffffffff
c0004853:	31 f6                	xor    esi,esi
c0004855:	e8 8a d3 ff ff       	call   c0001be4 <st_qword>
c000485a:	8d 43 54             	lea    eax,[ebx+0x54]
c000485d:	ba 80 00 00 00       	mov    edx,0x80
c0004862:	e8 7a d3 ff ff       	call   c0001be1 <st_dword>
c0004867:	8d 43 50             	lea    eax,[ebx+0x50]
c000486a:	ba 80 00 00 00       	mov    edx,0x80
c000486f:	e8 6d d3 ff ff       	call   c0001be1 <st_dword>
c0004874:	ba 02 00 00 00       	mov    edx,0x2
c0004879:	89 f8                	mov    eax,edi
c000487b:	e8 61 d3 ff ff       	call   c0001be1 <st_dword>
c0004880:	8d 53 38             	lea    edx,[ebx+0x38]
c0004883:	b9 10 00 00 00       	mov    ecx,0x10
c0004888:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000488c:	e8 ad d9 ff ff       	call   c000223e <make_rand>
c0004891:	83 c8 ff             	or     eax,0xffffffff
c0004894:	46                   	inc    esi
c0004895:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000489a:	e8 fb d8 ff ff       	call   c000219a <crc32>
c000489f:	83 fe 5c             	cmp    esi,0x5c
c00048a2:	75 f0                	jne    c0004894 <create_partition+0x359>
c00048a4:	f7 d0                	not    eax
c00048a6:	8d 73 10             	lea    esi,[ebx+0x10]
c00048a9:	89 c2                	mov    edx,eax
c00048ab:	89 f0                	mov    eax,esi
c00048ad:	e8 2f d3 ff ff       	call   c0001be1 <st_dword>
c00048b2:	83 ec 0c             	sub    esp,0xc
c00048b5:	6a 01                	push   0x1
c00048b7:	6a 00                	push   0x0
c00048b9:	6a 01                	push   0x1
c00048bb:	53                   	push   ebx
c00048bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048c0:	e8 71 d2 ff ff       	call   c0001b36 <disk_write>
c00048c5:	83 c4 20             	add    esp,0x20
c00048c8:	85 c0                	test   eax,eax
c00048ca:	0f 85 9c fc ff ff    	jne    c000456c <create_partition+0x31>
c00048d0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048d4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048d8:	83 c2 ff             	add    edx,0xffffffff
c00048db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048de:	83 d1 ff             	adc    ecx,0xffffffff
c00048e1:	e8 fe d2 ff ff       	call   c0001be4 <st_qword>
c00048e6:	ba 01 00 00 00       	mov    edx,0x1
c00048eb:	31 c9                	xor    ecx,ecx
c00048ed:	89 e8                	mov    eax,ebp
c00048ef:	e8 f0 d2 ff ff       	call   c0001be4 <st_qword>
c00048f4:	89 f8                	mov    eax,edi
c00048f6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048fe:	31 ff                	xor    edi,edi
c0004900:	e8 df d2 ff ff       	call   c0001be4 <st_qword>
c0004905:	89 f0                	mov    eax,esi
c0004907:	31 d2                	xor    edx,edx
c0004909:	e8 d3 d2 ff ff       	call   c0001be1 <st_dword>
c000490e:	83 c8 ff             	or     eax,0xffffffff
c0004911:	47                   	inc    edi
c0004912:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004917:	e8 7e d8 ff ff       	call   c000219a <crc32>
c000491c:	83 ff 5c             	cmp    edi,0x5c
c000491f:	75 f0                	jne    c0004911 <create_partition+0x3d6>
c0004921:	f7 d0                	not    eax
c0004923:	89 c2                	mov    edx,eax
c0004925:	89 f0                	mov    eax,esi
c0004927:	e8 b5 d2 ff ff       	call   c0001be1 <st_dword>
c000492c:	83 ec 0c             	sub    esp,0xc
c000492f:	6a 01                	push   0x1
c0004931:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004935:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004939:	83 c0 ff             	add    eax,0xffffffff
c000493c:	83 d2 ff             	adc    edx,0xffffffff
c000493f:	52                   	push   edx
c0004940:	50                   	push   eax
c0004941:	53                   	push   ebx
c0004942:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004946:	e8 eb d1 ff ff       	call   c0001b36 <disk_write>
c000494b:	83 c4 20             	add    esp,0x20
c000494e:	85 c0                	test   eax,eax
c0004950:	0f 85 16 fc ff ff    	jne    c000456c <create_partition+0x31>
c0004956:	31 d2                	xor    edx,edx
c0004958:	89 d8                	mov    eax,ebx
c000495a:	b9 00 02 00 00       	mov    ecx,0x200
c000495f:	e8 9b d2 ff ff       	call   c0001bff <mem_set>
c0004964:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000496a:	b9 10 00 00 00       	mov    ecx,0x10
c000496f:	ba 90 40 02 c0       	mov    edx,0xc0024090
c0004974:	e8 71 d2 ff ff       	call   c0001bea <mem_cpy>
c0004979:	e9 21 01 00 00       	jmp    c0004a9f <create_partition+0x564>
c000497e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004982:	b9 05 00 00 00       	mov    ecx,0x5
c0004987:	89 04 24             	mov    DWORD PTR [esp],eax
c000498a:	bf 08 00 00 00       	mov    edi,0x8
c000498f:	89 f8                	mov    eax,edi
c0004991:	31 d2                	xor    edx,edx
c0004993:	0f b6 f0             	movzx  esi,al
c0004996:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004999:	f7 f6                	div    esi
c000499b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00049a0:	76 0a                	jbe    c00049ac <create_partition+0x471>
c00049a2:	d1 e7                	shl    edi,1
c00049a4:	49                   	dec    ecx
c00049a5:	75 e8                	jne    c000498f <create_partition+0x454>
c00049a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00049ac:	b9 00 02 00 00       	mov    ecx,0x200
c00049b1:	31 d2                	xor    edx,edx
c00049b3:	89 d8                	mov    eax,ebx
c00049b5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049bb:	e8 3f d2 ff ff       	call   c0001bff <mem_set>
c00049c0:	b9 64 00 00 00       	mov    ecx,0x64
c00049c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049c8:	31 d2                	xor    edx,edx
c00049ca:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049d2:	f7 f1                	div    ecx
c00049d4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049dd:	89 f8                	mov    eax,edi
c00049df:	0f b6 c0             	movzx  eax,al
c00049e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049e6:	e9 80 00 00 00       	jmp    c0004a6b <create_partition+0x530>
c00049eb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049ee:	29 cf                	sub    edi,ecx
c00049f0:	89 ca                	mov    edx,ecx
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049f9:	e8 e3 d1 ff ff       	call   c0001be1 <st_dword>
c00049fe:	8d 46 04             	lea    eax,[esi+0x4]
c0004a01:	89 fa                	mov    edx,edi
c0004a03:	83 c6 10             	add    esi,0x10
c0004a06:	e8 d6 d1 ff ff       	call   c0001be1 <st_dword>
c0004a0b:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004a0f:	31 d2                	xor    edx,edx
c0004a11:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a14:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a18:	89 c8                	mov    eax,ecx
c0004a1a:	01 f9                	add    ecx,edi
c0004a1c:	f7 f5                	div    ebp
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	31 d2                	xor    edx,edx
c0004a22:	45                   	inc    ebp
c0004a23:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a27:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a2a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a2d:	89 c2                	mov    edx,eax
c0004a2f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a32:	c1 ea 02             	shr    edx,0x2
c0004a35:	83 e2 c0             	and    edx,0xffffffc0
c0004a38:	09 ea                	or     edx,ebp
c0004a3a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a3f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a42:	31 d2                	xor    edx,edx
c0004a44:	f7 f5                	div    ebp
c0004a46:	89 d7                	mov    edi,edx
c0004a48:	31 d2                	xor    edx,edx
c0004a4a:	47                   	inc    edi
c0004a4b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a4f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a52:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a55:	89 c5                	mov    ebp,eax
c0004a57:	c1 ed 02             	shr    ebp,0x2
c0004a5a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a5d:	09 ef                	or     edi,ebp
c0004a5f:	89 fa                	mov    edx,edi
c0004a61:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a64:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a69:	74 34                	je     c0004a9f <create_partition+0x564>
c0004a6b:	85 c9                	test   ecx,ecx
c0004a6d:	74 30                	je     c0004a9f <create_partition+0x564>
c0004a6f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a72:	76 2b                	jbe    c0004a9f <create_partition+0x564>
c0004a74:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a78:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a7c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a7f:	83 ff 64             	cmp    edi,0x64
c0004a82:	76 4b                	jbe    c0004acf <create_partition+0x594>
c0004a84:	89 f8                	mov    eax,edi
c0004a86:	01 c8                	add    eax,ecx
c0004a88:	0f 82 5d ff ff ff    	jb     c00049eb <create_partition+0x4b0>
c0004a8e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a91:	0f 87 54 ff ff ff    	ja     c00049eb <create_partition+0x4b0>
c0004a97:	85 ff                	test   edi,edi
c0004a99:	0f 85 51 ff ff ff    	jne    c00049f0 <create_partition+0x4b5>
c0004a9f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004aa5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004aaa:	e8 2e d1 ff ff       	call   c0001bdd <st_word>
c0004aaf:	83 ec 0c             	sub    esp,0xc
c0004ab2:	6a 01                	push   0x1
c0004ab4:	6a 00                	push   0x0
c0004ab6:	6a 00                	push   0x0
c0004ab8:	53                   	push   ebx
c0004ab9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004abd:	e8 74 d0 ff ff       	call   c0001b36 <disk_write>
c0004ac2:	83 c4 20             	add    esp,0x20
c0004ac5:	85 c0                	test   eax,eax
c0004ac7:	0f 95 c0             	setne  al
c0004aca:	0f b6 c0             	movzx  eax,al
c0004acd:	eb 0e                	jmp    c0004add <create_partition+0x5a2>
c0004acf:	74 07                	je     c0004ad8 <create_partition+0x59d>
c0004ad1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ad6:	eb ac                	jmp    c0004a84 <create_partition+0x549>
c0004ad8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004adb:	eb a7                	jmp    c0004a84 <create_partition+0x549>
c0004add:	83 c4 5c             	add    esp,0x5c
c0004ae0:	5b                   	pop    ebx
c0004ae1:	5e                   	pop    esi
c0004ae2:	5f                   	pop    edi
c0004ae3:	5d                   	pop    ebp
c0004ae4:	c3                   	ret    

c0004ae5 <get_fileinfo>:
c0004ae5:	55                   	push   ebp
c0004ae6:	57                   	push   edi
c0004ae7:	56                   	push   esi
c0004ae8:	53                   	push   ebx
c0004ae9:	83 ec 1c             	sub    esp,0x1c
c0004aec:	8b 30                	mov    esi,DWORD PTR [eax]
c0004aee:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004af2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004af6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004af9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004afc:	0f 84 dc 01 00 00    	je     c0004cde <get_fileinfo+0x1f9>
c0004b02:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004b05:	75 0f                	jne    c0004b16 <get_fileinfo+0x31>
c0004b07:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004b0a:	83 c4 1c             	add    esp,0x1c
c0004b0d:	5b                   	pop    ebx
c0004b0e:	5e                   	pop    esi
c0004b0f:	5f                   	pop    edi
c0004b10:	5d                   	pop    ebp
c0004b11:	e9 58 d5 ff ff       	jmp    c000206e <get_xfileinfo>
c0004b16:	89 d3                	mov    ebx,edx
c0004b18:	89 c6                	mov    esi,eax
c0004b1a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b1e:	74 6a                	je     c0004b8a <get_fileinfo+0xa5>
c0004b20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b28:	31 ed                	xor    ebp,ebp
c0004b2a:	31 ff                	xor    edi,edi
c0004b2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b37:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b3b:	66 85 d2             	test   dx,dx
c0004b3e:	74 3e                	je     c0004b7e <get_fileinfo+0x99>
c0004b40:	66 85 ed             	test   bp,bp
c0004b43:	75 0c                	jne    c0004b51 <get_fileinfo+0x6c>
c0004b45:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b4b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b4f:	76 22                	jbe    c0004b73 <get_fileinfo+0x8e>
c0004b51:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b56:	89 e8                	mov    eax,ebp
c0004b58:	29 f9                	sub    ecx,edi
c0004b5a:	c1 e0 10             	shl    eax,0x10
c0004b5d:	09 d0                	or     eax,edx
c0004b5f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b63:	e8 a3 d1 ff ff       	call   c0001d0b <put_utf>
c0004b68:	84 c0                	test   al,al
c0004b6a:	74 10                	je     c0004b7c <get_fileinfo+0x97>
c0004b6c:	0f b6 c0             	movzx  eax,al
c0004b6f:	31 d2                	xor    edx,edx
c0004b71:	01 c7                	add    edi,eax
c0004b73:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b78:	89 d5                	mov    ebp,edx
c0004b7a:	eb b0                	jmp    c0004b2c <get_fileinfo+0x47>
c0004b7c:	31 ff                	xor    edi,edi
c0004b7e:	66 85 ed             	test   bp,bp
c0004b81:	74 02                	je     c0004b85 <get_fileinfo+0xa0>
c0004b83:	31 ff                	xor    edi,edi
c0004b85:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b8a:	31 ff                	xor    edi,edi
c0004b8c:	31 c9                	xor    ecx,ecx
c0004b8e:	83 f9 0a             	cmp    ecx,0xa
c0004b91:	0f 87 ad 00 00 00    	ja     c0004c44 <get_fileinfo+0x15f>
c0004b97:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b9a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b9d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004ba1:	66 83 fa 20          	cmp    dx,0x20
c0004ba5:	0f 84 92 00 00 00    	je     c0004c3d <get_fileinfo+0x158>
c0004bab:	66 83 fa 05          	cmp    dx,0x5
c0004baf:	75 05                	jne    c0004bb6 <get_fileinfo+0xd1>
c0004bb1:	ba e5 00 00 00       	mov    edx,0xe5
c0004bb6:	83 ff 0b             	cmp    edi,0xb
c0004bb9:	77 0b                	ja     c0004bc6 <get_fileinfo+0xe1>
c0004bbb:	83 fd 09             	cmp    ebp,0x9
c0004bbe:	75 06                	jne    c0004bc6 <get_fileinfo+0xe1>
c0004bc0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bc5:	47                   	inc    edi
c0004bc6:	0f b7 c2             	movzx  eax,dx
c0004bc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bcd:	e8 6d d0 ff ff       	call   c0001c3f <dbc_1st>
c0004bd2:	85 c0                	test   eax,eax
c0004bd4:	74 2f                	je     c0004c05 <get_fileinfo+0x120>
c0004bd6:	83 fd 08             	cmp    ebp,0x8
c0004bd9:	74 2a                	je     c0004c05 <get_fileinfo+0x120>
c0004bdb:	83 fd 0b             	cmp    ebp,0xb
c0004bde:	74 25                	je     c0004c05 <get_fileinfo+0x120>
c0004be0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004be3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004be7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004beb:	e8 52 d0 ff ff       	call   c0001c42 <dbc_2nd>
c0004bf0:	85 c0                	test   eax,eax
c0004bf2:	74 11                	je     c0004c05 <get_fileinfo+0x120>
c0004bf4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004bf8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bfd:	c1 e2 08             	shl    edx,0x8
c0004c00:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004c03:	09 c2                	or     edx,eax
c0004c05:	0f b7 d2             	movzx  edx,dx
c0004c08:	50                   	push   eax
c0004c09:	50                   	push   eax
c0004c0a:	68 b5 01 00 00       	push   0x1b5
c0004c0f:	52                   	push   edx
c0004c10:	e8 87 3a 00 00       	call   c000869c <ff_oem2uni>
c0004c15:	83 c4 10             	add    esp,0x10
c0004c18:	66 85 c0             	test   ax,ax
c0004c1b:	75 04                	jne    c0004c21 <get_fileinfo+0x13c>
c0004c1d:	31 ff                	xor    edi,edi
c0004c1f:	eb 23                	jmp    c0004c44 <get_fileinfo+0x15f>
c0004c21:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c26:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c2a:	29 f9                	sub    ecx,edi
c0004c2c:	0f b7 c0             	movzx  eax,ax
c0004c2f:	e8 d7 d0 ff ff       	call   c0001d0b <put_utf>
c0004c34:	84 c0                	test   al,al
c0004c36:	74 e5                	je     c0004c1d <get_fileinfo+0x138>
c0004c38:	0f b6 c0             	movzx  eax,al
c0004c3b:	01 c7                	add    edi,eax
c0004c3d:	89 e9                	mov    ecx,ebp
c0004c3f:	e9 4a ff ff ff       	jmp    c0004b8e <get_fileinfo+0xa9>
c0004c44:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c49:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c4d:	75 54                	jne    c0004ca3 <get_fileinfo+0x1be>
c0004c4f:	85 ff                	test   edi,edi
c0004c51:	75 0b                	jne    c0004c5e <get_fileinfo+0x179>
c0004c53:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c57:	ba 01 00 00 00       	mov    edx,0x1
c0004c5c:	eb 33                	jmp    c0004c91 <get_fileinfo+0x1ac>
c0004c5e:	b1 08                	mov    cl,0x8
c0004c60:	31 d2                	xor    edx,edx
c0004c62:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c68:	84 c0                	test   al,al
c0004c6a:	74 25                	je     c0004c91 <get_fileinfo+0x1ac>
c0004c6c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c70:	74 16                	je     c0004c88 <get_fileinfo+0x1a3>
c0004c72:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c75:	66 83 ff 19          	cmp    di,0x19
c0004c79:	77 0f                	ja     c0004c8a <get_fileinfo+0x1a5>
c0004c7b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c7e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c81:	74 07                	je     c0004c8a <get_fileinfo+0x1a5>
c0004c83:	83 c0 20             	add    eax,0x20
c0004c86:	eb 02                	jmp    c0004c8a <get_fileinfo+0x1a5>
c0004c88:	b1 10                	mov    cl,0x10
c0004c8a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c8e:	42                   	inc    edx
c0004c8f:	eb d1                	jmp    c0004c62 <get_fileinfo+0x17d>
c0004c91:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c96:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c99:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c9d:	75 04                	jne    c0004ca3 <get_fileinfo+0x1be>
c0004c9f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ca3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ca6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004ca9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004cac:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004caf:	83 c0 1c             	add    eax,0x1c
c0004cb2:	e8 c1 ce ff ff       	call   c0001b78 <ld_dword>
c0004cb7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cbe:	89 03                	mov    DWORD PTR [ebx],eax
c0004cc0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc3:	83 c0 16             	add    eax,0x16
c0004cc6:	e8 a0 ce ff ff       	call   c0001b6b <ld_word>
c0004ccb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004ccf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd2:	83 c0 18             	add    eax,0x18
c0004cd5:	e8 91 ce ff ff       	call   c0001b6b <ld_word>
c0004cda:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cde:	83 c4 1c             	add    esp,0x1c
c0004ce1:	5b                   	pop    ebx
c0004ce2:	5e                   	pop    esi
c0004ce3:	5f                   	pop    edi
c0004ce4:	5d                   	pop    ebp
c0004ce5:	c3                   	ret    

c0004ce6 <ld_clust.isra.0>:
c0004ce6:	56                   	push   esi
c0004ce7:	89 c6                	mov    esi,eax
c0004ce9:	53                   	push   ebx
c0004cea:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004ced:	89 d3                	mov    ebx,edx
c0004cef:	e8 77 ce ff ff       	call   c0001b6b <ld_word>
c0004cf4:	0f b7 c8             	movzx  ecx,ax
c0004cf7:	89 f0                	mov    eax,esi
c0004cf9:	3c 03                	cmp    al,0x3
c0004cfb:	75 0d                	jne    c0004d0a <ld_clust.isra.0+0x24>
c0004cfd:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d00:	e8 66 ce ff ff       	call   c0001b6b <ld_word>
c0004d05:	c1 e0 10             	shl    eax,0x10
c0004d08:	09 c1                	or     ecx,eax
c0004d0a:	89 c8                	mov    eax,ecx
c0004d0c:	5b                   	pop    ebx
c0004d0d:	5e                   	pop    esi
c0004d0e:	c3                   	ret    

c0004d0f <st_clust.isra.1>:
c0004d0f:	56                   	push   esi
c0004d10:	89 c6                	mov    esi,eax
c0004d12:	53                   	push   ebx
c0004d13:	89 d3                	mov    ebx,edx
c0004d15:	0f b7 d1             	movzx  edx,cx
c0004d18:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d1b:	e8 bd ce ff ff       	call   c0001bdd <st_word>
c0004d20:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d23:	75 0f                	jne    c0004d34 <st_clust.isra.1+0x25>
c0004d25:	c1 e9 10             	shr    ecx,0x10
c0004d28:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d2b:	89 ca                	mov    edx,ecx
c0004d2d:	5b                   	pop    ebx
c0004d2e:	5e                   	pop    esi
c0004d2f:	e9 a9 ce ff ff       	jmp    c0001bdd <st_word>
c0004d34:	5b                   	pop    ebx
c0004d35:	5e                   	pop    esi
c0004d36:	c3                   	ret    

c0004d37 <init_alloc_info.isra.2>:
c0004d37:	56                   	push   esi
c0004d38:	53                   	push   ebx
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	89 d3                	mov    ebx,edx
c0004d3d:	51                   	push   ecx
c0004d3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d40:	83 c0 34             	add    eax,0x34
c0004d43:	e8 30 ce ff ff       	call   c0001b78 <ld_dword>
c0004d48:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	83 c0 38             	add    eax,0x38
c0004d50:	e8 3b ce ff ff       	call   c0001b90 <ld_qword>
c0004d55:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d58:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d5b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d5d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d67:	83 e0 02             	and    eax,0x2
c0004d6a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d6d:	5b                   	pop    ebx
c0004d6e:	5b                   	pop    ebx
c0004d6f:	5e                   	pop    esi
c0004d70:	c3                   	ret    

c0004d71 <follow_path>:
c0004d71:	56                   	push   esi
c0004d72:	53                   	push   ebx
c0004d73:	89 c3                	mov    ebx,eax
c0004d75:	83 ec 14             	sub    esp,0x14
c0004d78:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d7c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d82:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d84:	80 fa 5c             	cmp    dl,0x5c
c0004d87:	75 07                	jne    c0004d90 <follow_path+0x1f>
c0004d89:	40                   	inc    eax
c0004d8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8e:	eb ee                	jmp    c0004d7e <follow_path+0xd>
c0004d90:	80 fa 2f             	cmp    dl,0x2f
c0004d93:	74 f4                	je     c0004d89 <follow_path+0x18>
c0004d95:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d9c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004da3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004da6:	77 52                	ja     c0004dfa <follow_path+0x89>
c0004da8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004dac:	31 d2                	xor    edx,edx
c0004dae:	89 d8                	mov    eax,ebx
c0004db0:	e8 12 e3 ff ff       	call   c00030c7 <dir_sdi>
c0004db5:	eb 7c                	jmp    c0004e33 <follow_path+0xc2>
c0004db7:	89 d8                	mov    eax,ebx
c0004db9:	e8 6e f2 ff ff       	call   c000402c <dir_find>
c0004dbe:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	75 46                	jne    c0004e0b <follow_path+0x9a>
c0004dc5:	80 e2 04             	and    dl,0x4
c0004dc8:	75 69                	jne    c0004e33 <follow_path+0xc2>
c0004dca:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dce:	74 5e                	je     c0004e2e <follow_path+0xbd>
c0004dd0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dd2:	3c 04                	cmp    al,0x4
c0004dd4:	75 41                	jne    c0004e17 <follow_path+0xa6>
c0004dd6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dd9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ddd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004de0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004de3:	30 c0                	xor    al,al
c0004de5:	09 d0                	or     eax,edx
c0004de7:	89 da                	mov    edx,ebx
c0004de9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004dec:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004def:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004df2:	8d 46 10             	lea    eax,[esi+0x10]
c0004df5:	e8 3d ff ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0004dfa:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dfe:	89 d8                	mov    eax,ebx
c0004e00:	e8 a9 ed ff ff       	call   c0003bae <create_name>
c0004e05:	85 c0                	test   eax,eax
c0004e07:	74 ae                	je     c0004db7 <follow_path+0x46>
c0004e09:	eb 28                	jmp    c0004e33 <follow_path+0xc2>
c0004e0b:	83 f8 04             	cmp    eax,0x4
c0004e0e:	75 23                	jne    c0004e33 <follow_path+0xc2>
c0004e10:	80 e2 04             	and    dl,0x4
c0004e13:	74 19                	je     c0004e2e <follow_path+0xbd>
c0004e15:	eb 1c                	jmp    c0004e33 <follow_path+0xc2>
c0004e17:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e1a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e20:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e24:	e8 bd fe ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0004e29:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e2c:	eb cc                	jmp    c0004dfa <follow_path+0x89>
c0004e2e:	b8 05 00 00 00       	mov    eax,0x5
c0004e33:	83 c4 14             	add    esp,0x14
c0004e36:	5b                   	pop    ebx
c0004e37:	5e                   	pop    esi
c0004e38:	c3                   	ret    

c0004e39 <f_mount>:
c0004e39:	53                   	push   ebx
c0004e3a:	83 ec 18             	sub    esp,0x18
c0004e3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e41:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e49:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e4d:	e8 fb d2 ff ff       	call   c000214d <get_ldnumber>
c0004e52:	89 c2                	mov    edx,eax
c0004e54:	b8 0b 00 00 00       	mov    eax,0xb
c0004e59:	85 d2                	test   edx,edx
c0004e5b:	78 39                	js     c0004e96 <f_mount+0x5d>
c0004e5d:	8b 04 95 20 8c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd73e0]
c0004e64:	85 c0                	test   eax,eax
c0004e66:	74 03                	je     c0004e6b <f_mount+0x32>
c0004e68:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6f:	85 c0                	test   eax,eax
c0004e71:	74 03                	je     c0004e76 <f_mount+0x3d>
c0004e73:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7a:	89 04 95 20 8c 02 c0 	mov    DWORD PTR [edx*4-0x3ffd73e0],eax
c0004e81:	31 c0                	xor    eax,eax
c0004e83:	84 db                	test   bl,bl
c0004e85:	74 0f                	je     c0004e96 <f_mount+0x5d>
c0004e87:	31 c9                	xor    ecx,ecx
c0004e89:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e8d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e91:	e8 65 d7 ff ff       	call   c00025fb <mount_volume>
c0004e96:	83 c4 18             	add    esp,0x18
c0004e99:	5b                   	pop    ebx
c0004e9a:	c3                   	ret    

c0004e9b <f_open>:
c0004e9b:	55                   	push   ebp
c0004e9c:	bd 09 00 00 00       	mov    ebp,0x9
c0004ea1:	57                   	push   edi
c0004ea2:	56                   	push   esi
c0004ea3:	53                   	push   ebx
c0004ea4:	83 ec 7c             	sub    esp,0x7c
c0004ea7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004eae:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004eb5:	85 db                	test   ebx,ebx
c0004eb7:	0f 84 10 04 00 00    	je     c00052cd <f_open+0x432>
c0004ebd:	89 fe                	mov    esi,edi
c0004ebf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ec3:	83 e6 3f             	and    esi,0x3f
c0004ec6:	89 f0                	mov    eax,esi
c0004ec8:	0f b6 c8             	movzx  ecx,al
c0004ecb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ed2:	e8 24 d7 ff ff       	call   c00025fb <mount_volume>
c0004ed7:	89 c5                	mov    ebp,eax
c0004ed9:	85 c0                	test   eax,eax
c0004edb:	0f 85 e6 03 00 00    	jne    c00052c7 <f_open+0x42c>
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eee:	83 ec 0c             	sub    esp,0xc
c0004ef1:	68 60 04 00 00       	push   0x460
c0004ef6:	e8 d9 36 00 00       	call   c00085d4 <ff_memalloc>
c0004efb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eff:	83 c4 10             	add    esp,0x10
c0004f02:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004f07:	0f 84 c0 03 00 00    	je     c00052cd <f_open+0x432>
c0004f0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f11:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f15:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f1b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f1e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f21:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f28:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f2c:	e8 40 fe ff ff       	call   c0004d71 <follow_path>
c0004f31:	89 c5                	mov    ebp,eax
c0004f33:	85 c0                	test   eax,eax
c0004f35:	75 0c                	jne    c0004f43 <f_open+0xa8>
c0004f37:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f3c:	79 05                	jns    c0004f43 <f_open+0xa8>
c0004f3e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f43:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f49:	0f 84 84 01 00 00    	je     c00050d3 <f_open+0x238>
c0004f4f:	85 ed                	test   ebp,ebp
c0004f51:	74 20                	je     c0004f73 <f_open+0xd8>
c0004f53:	83 fd 04             	cmp    ebp,0x4
c0004f56:	0f 85 58 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f5c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f60:	83 ce 08             	or     esi,0x8
c0004f63:	e8 8a f2 ff ff       	call   c00041f2 <dir_register>
c0004f68:	89 c5                	mov    ebp,eax
c0004f6a:	85 c0                	test   eax,eax
c0004f6c:	74 2f                	je     c0004f9d <f_open+0x102>
c0004f6e:	e9 41 03 00 00       	jmp    c00052b4 <f_open+0x419>
c0004f73:	bd 07 00 00 00       	mov    ebp,0x7
c0004f78:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f7d:	0f 85 31 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f83:	bd 08 00 00 00       	mov    ebp,0x8
c0004f88:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f8e:	0f 85 20 03 00 00    	jne    c00052b4 <f_open+0x419>
c0004f94:	83 e7 08             	and    edi,0x8
c0004f97:	0f 84 65 01 00 00    	je     c0005102 <f_open+0x267>
c0004f9d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fa1:	8a 02                	mov    al,BYTE PTR [edx]
c0004fa3:	3c 04                	cmp    al,0x4
c0004fa5:	0f 85 97 00 00 00    	jne    c0005042 <f_open+0x1a7>
c0004fab:	8d 42 10             	lea    eax,[edx+0x10]
c0004fae:	89 13                	mov    DWORD PTR [ebx],edx
c0004fb0:	89 da                	mov    edx,ebx
c0004fb2:	e8 80 fd ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0004fb7:	31 d2                	xor    edx,edx
c0004fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fbd:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fc2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fc5:	83 c0 02             	add    eax,0x2
c0004fc8:	e8 32 cc ff ff       	call   c0001bff <mem_set>
c0004fcd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fd2:	31 d2                	xor    edx,edx
c0004fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fdb:	83 c0 26             	add    eax,0x26
c0004fde:	e8 1c cc ff ff       	call   c0001bff <mem_set>
c0004fe3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fea:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fee:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ff3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff6:	83 c0 08             	add    eax,0x8
c0004ff9:	e8 e3 cb ff ff       	call   c0001be1 <st_dword>
c0004ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005002:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005005:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005009:	8d 44 24 24          	lea    eax,[esp+0x24]
c000500d:	e8 b7 ea ff ff       	call   c0003ac9 <store_xdir>
c0005012:	89 c5                	mov    ebp,eax
c0005014:	85 c0                	test   eax,eax
c0005016:	0f 85 98 02 00 00    	jne    c00052b4 <f_open+0x419>
c000501c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000501f:	85 d2                	test   edx,edx
c0005021:	0f 84 db 00 00 00    	je     c0005102 <f_open+0x267>
c0005027:	31 c9                	xor    ecx,ecx
c0005029:	89 d8                	mov    eax,ebx
c000502b:	e8 8e e3 ff ff       	call   c00033be <remove_chain>
c0005030:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005034:	89 c5                	mov    ebp,eax
c0005036:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005039:	48                   	dec    eax
c000503a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000503d:	e9 b8 00 00 00       	jmp    c00050fa <f_open+0x25f>
c0005042:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005046:	89 ea                	mov    edx,ebp
c0005048:	e8 99 fc ff ff       	call   c0004ce6 <ld_clust.isra.0>
c000504d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005052:	89 c7                	mov    edi,eax
c0005054:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005057:	e8 85 cb ff ff       	call   c0001be1 <st_dword>
c000505c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005060:	31 c9                	xor    ecx,ecx
c0005062:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000506a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000506e:	e8 9c fc ff ff       	call   c0004d0f <st_clust.isra.1>
c0005073:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005077:	31 d2                	xor    edx,edx
c0005079:	83 c0 1c             	add    eax,0x1c
c000507c:	e8 60 cb ff ff       	call   c0001be1 <st_dword>
c0005081:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005085:	85 ff                	test   edi,edi
c0005087:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000508b:	74 75                	je     c0005102 <f_open+0x267>
c000508d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005091:	31 c9                	xor    ecx,ecx
c0005093:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005096:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000509d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050a1:	89 fa                	mov    edx,edi
c00050a3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050a7:	e8 12 e3 ff ff       	call   c00033be <remove_chain>
c00050ac:	89 c5                	mov    ebp,eax
c00050ae:	85 c0                	test   eax,eax
c00050b0:	0f 85 fe 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050c2:	4f                   	dec    edi
c00050c3:	e8 81 d2 ff ff       	call   c0002349 <move_window>
c00050c8:	89 c5                	mov    ebp,eax
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050d1:	eb 27                	jmp    c00050fa <f_open+0x25f>
c00050d3:	85 ed                	test   ebp,ebp
c00050d5:	0f 85 d9 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050db:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050df:	bd 04 00 00 00       	mov    ebp,0x4
c00050e4:	a8 10                	test   al,0x10
c00050e6:	0f 85 c8 01 00 00    	jne    c00052b4 <f_open+0x419>
c00050ec:	83 e7 02             	and    edi,0x2
c00050ef:	74 11                	je     c0005102 <f_open+0x267>
c00050f1:	bd 07 00 00 00       	mov    ebp,0x7
c00050f6:	a8 01                	test   al,0x1
c00050f8:	eb 02                	jmp    c00050fc <f_open+0x261>
c00050fa:	85 ed                	test   ebp,ebp
c00050fc:	0f 85 b2 01 00 00    	jne    c00052b4 <f_open+0x419>
c0005102:	f7 c6 08 00 00 00    	test   esi,0x8
c0005108:	74 03                	je     c000510d <f_open+0x272>
c000510a:	83 ce 40             	or     esi,0x40
c000510d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005111:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005114:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005117:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000511a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000511d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005121:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005124:	8a 02                	mov    al,BYTE PTR [edx]
c0005126:	3c 04                	cmp    al,0x4
c0005128:	75 2a                	jne    c0005154 <f_open+0x2b9>
c000512a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000512e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005133:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005136:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000513a:	30 c0                	xor    al,al
c000513c:	09 c8                	or     eax,ecx
c000513e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005141:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005145:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005148:	8d 42 10             	lea    eax,[edx+0x10]
c000514b:	89 da                	mov    edx,ebx
c000514d:	e8 e5 fb ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0005152:	eb 1c                	jmp    c0005170 <f_open+0x2d5>
c0005154:	89 fa                	mov    edx,edi
c0005156:	e8 8b fb ff ff       	call   c0004ce6 <ld_clust.isra.0>
c000515b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000515e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005161:	e8 12 ca ff ff       	call   c0001b78 <ld_dword>
c0005166:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000516d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005170:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005174:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000517b:	89 03                	mov    DWORD PTR [ebx],eax
c000517d:	31 d2                	xor    edx,edx
c000517f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005183:	b9 00 02 00 00       	mov    ecx,0x200
c0005188:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000518c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005190:	89 f0                	mov    eax,esi
c0005192:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005199:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000519c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00051a3:	8d 43 50             	lea    eax,[ebx+0x50]
c00051a6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00051ad:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051b8:	e8 42 ca ff ff       	call   c0001bff <mem_set>
c00051bd:	83 e6 20             	and    esi,0x20
c00051c0:	75 07                	jne    c00051c9 <f_open+0x32e>
c00051c2:	31 ed                	xor    ebp,ebp
c00051c4:	e9 eb 00 00 00       	jmp    c00052b4 <f_open+0x419>
c00051c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051cc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051db:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051df:	74 e1                	je     c00051c2 <f_open+0x327>
c00051e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051e9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051ec:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051f3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051f6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051fa:	31 ff                	xor    edi,edi
c00051fc:	c1 e5 09             	shl    ebp,0x9
c00051ff:	89 ee                	mov    esi,ebp
c0005201:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005205:	89 f8                	mov    eax,edi
c0005207:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000520b:	73 22                	jae    c000522f <f_open+0x394>
c000520d:	89 d8                	mov    eax,ebx
c000520f:	e8 bd dc ff ff       	call   c0002ed1 <get_fat>
c0005214:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005218:	89 c2                	mov    edx,eax
c000521a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000521e:	83 f8 01             	cmp    eax,0x1
c0005221:	76 10                	jbe    c0005233 <f_open+0x398>
c0005223:	83 f8 ff             	cmp    eax,0xffffffff
c0005226:	75 d9                	jne    c0005201 <f_open+0x366>
c0005228:	bd 01 00 00 00       	mov    ebp,0x1
c000522d:	eb 09                	jmp    c0005238 <f_open+0x39d>
c000522f:	31 ed                	xor    ebp,ebp
c0005231:	eb 05                	jmp    c0005238 <f_open+0x39d>
c0005233:	bd 02 00 00 00       	mov    ebp,0x2
c0005238:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000523b:	85 ed                	test   ebp,ebp
c000523d:	75 75                	jne    c00052b4 <f_open+0x419>
c000523f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005243:	25 ff 01 00 00       	and    eax,0x1ff
c0005248:	0f 84 74 ff ff ff    	je     c00051c2 <f_open+0x327>
c000524e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005252:	bd 02 00 00 00       	mov    ebp,0x2
c0005257:	89 c8                	mov    eax,ecx
c0005259:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000525d:	e8 a2 cb ff ff       	call   c0001e04 <clst2sect>
c0005262:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005266:	89 d7                	mov    edi,edx
c0005268:	09 c7                	or     edi,eax
c000526a:	74 48                	je     c00052b4 <f_open+0x419>
c000526c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005270:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005274:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000527c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005280:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005284:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005288:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000528b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000528f:	83 ec 0c             	sub    esp,0xc
c0005292:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005295:	6a 01                	push   0x1
c0005297:	52                   	push   edx
c0005298:	50                   	push   eax
c0005299:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000529d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052a1:	50                   	push   eax
c00052a2:	e8 79 c8 ff ff       	call   c0001b20 <disk_read>
c00052a7:	83 c4 20             	add    esp,0x20
c00052aa:	85 c0                	test   eax,eax
c00052ac:	0f 95 c0             	setne  al
c00052af:	0f b6 c0             	movzx  eax,al
c00052b2:	89 c5                	mov    ebp,eax
c00052b4:	83 ec 0c             	sub    esp,0xc
c00052b7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052bb:	e8 2c 33 00 00       	call   c00085ec <ff_memfree>
c00052c0:	83 c4 10             	add    esp,0x10
c00052c3:	85 ed                	test   ebp,ebp
c00052c5:	74 06                	je     c00052cd <f_open+0x432>
c00052c7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052cd:	83 c4 7c             	add    esp,0x7c
c00052d0:	89 e8                	mov    eax,ebp
c00052d2:	5b                   	pop    ebx
c00052d3:	5e                   	pop    esi
c00052d4:	5f                   	pop    edi
c00052d5:	5d                   	pop    ebp
c00052d6:	c3                   	ret    

c00052d7 <f_read>:
c00052d7:	55                   	push   ebp
c00052d8:	57                   	push   edi
c00052d9:	56                   	push   esi
c00052da:	53                   	push   ebx
c00052db:	83 ec 2c             	sub    esp,0x2c
c00052de:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052ec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052f0:	89 d8                	mov    eax,ebx
c00052f2:	e8 77 cf ff ff       	call   c000226e <validate>
c00052f7:	89 c5                	mov    ebp,eax
c00052f9:	85 c0                	test   eax,eax
c00052fb:	0f 85 4c 02 00 00    	jne    c000554d <f_read+0x276>
c0005301:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005305:	85 ed                	test   ebp,ebp
c0005307:	0f 85 40 02 00 00    	jne    c000554d <f_read+0x276>
c000530d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005311:	0f 84 31 02 00 00    	je     c0005548 <f_read+0x271>
c0005317:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000531a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000531d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005320:	bf 00 00 00 00       	mov    edi,0x0
c0005325:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005328:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000532c:	89 d1                	mov    ecx,edx
c000532e:	19 f9                	sbb    ecx,edi
c0005330:	0f 83 cf 00 00 00    	jae    c0005405 <f_read+0x12e>
c0005336:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000533a:	e9 c6 00 00 00       	jmp    c0005405 <f_read+0x12e>
c000533f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005342:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005345:	89 d0                	mov    eax,edx
c0005347:	25 ff 01 00 00       	and    eax,0x1ff
c000534c:	0f 85 c9 01 00 00    	jne    c000551b <f_read+0x244>
c0005352:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005356:	89 d6                	mov    esi,edx
c0005358:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000535c:	89 cf                	mov    edi,ecx
c000535e:	48                   	dec    eax
c000535f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005363:	21 f0                	and    eax,esi
c0005365:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005369:	0f 84 a6 00 00 00    	je     c0005415 <f_read+0x13e>
c000536f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005373:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005376:	89 c8                	mov    eax,ecx
c0005378:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000537b:	e8 84 ca ff ff       	call   c0001e04 <clst2sect>
c0005380:	89 d7                	mov    edi,edx
c0005382:	09 c7                	or     edi,eax
c0005384:	0f 84 b4 00 00 00    	je     c000543e <f_read+0x167>
c000538a:	31 ff                	xor    edi,edi
c000538c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005390:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005393:	01 c6                	add    esi,eax
c0005395:	11 d7                	adc    edi,edx
c0005397:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000539f:	0f 86 fd 00 00 00    	jbe    c00054a2 <f_read+0x1cb>
c00053a5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00053a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00053ad:	c1 e8 09             	shr    eax,0x9
c00053b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053b7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053ba:	39 c2                	cmp    edx,eax
c00053bc:	76 07                	jbe    c00053c5 <f_read+0xee>
c00053be:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053cc:	57                   	push   edi
c00053cd:	56                   	push   esi
c00053ce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053d2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053d6:	50                   	push   eax
c00053d7:	e8 44 c7 ff ff       	call   c0001b20 <disk_read>
c00053dc:	83 c4 20             	add    esp,0x20
c00053df:	85 c0                	test   eax,eax
c00053e1:	75 6e                	jne    c0005451 <f_read+0x17a>
c00053e3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053e7:	78 7e                	js     c0005467 <f_read+0x190>
c00053e9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053ec:	c1 e6 09             	shl    esi,0x9
c00053ef:	31 ff                	xor    edi,edi
c00053f1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053f5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053f9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053fd:	01 30                	add    DWORD PTR [eax],esi
c00053ff:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005402:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005405:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000540a:	0f 85 2f ff ff ff    	jne    c000533f <f_read+0x68>
c0005410:	e9 38 01 00 00       	jmp    c000554d <f_read+0x276>
c0005415:	89 c8                	mov    eax,ecx
c0005417:	09 d0                	or     eax,edx
c0005419:	75 05                	jne    c0005420 <f_read+0x149>
c000541b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000541e:	eb 19                	jmp    c0005439 <f_read+0x162>
c0005420:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005424:	74 09                	je     c000542f <f_read+0x158>
c0005426:	89 d8                	mov    eax,ebx
c0005428:	e8 f8 c9 ff ff       	call   c0001e25 <clmt_clust>
c000542d:	eb 0a                	jmp    c0005439 <f_read+0x162>
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 d8                	mov    eax,ebx
c0005434:	e8 98 da ff ff       	call   c0002ed1 <get_fat>
c0005439:	83 f8 01             	cmp    eax,0x1
c000543c:	77 0e                	ja     c000544c <f_read+0x175>
c000543e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005442:	bd 02 00 00 00       	mov    ebp,0x2
c0005447:	e9 01 01 00 00       	jmp    c000554d <f_read+0x276>
c000544c:	83 f8 ff             	cmp    eax,0xffffffff
c000544f:	75 0e                	jne    c000545f <f_read+0x188>
c0005451:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005455:	bd 01 00 00 00       	mov    ebp,0x1
c000545a:	e9 ee 00 00 00       	jmp    c000554d <f_read+0x276>
c000545f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005462:	e9 08 ff ff ff       	jmp    c000536f <f_read+0x98>
c0005467:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000546a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000546d:	29 f0                	sub    eax,esi
c000546f:	19 fa                	sbb    edx,edi
c0005471:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005474:	89 d7                	mov    edi,edx
c0005476:	ba 00 00 00 00       	mov    edx,0x0
c000547b:	89 f9                	mov    ecx,edi
c000547d:	19 d1                	sbb    ecx,edx
c000547f:	0f 83 64 ff ff ff    	jae    c00053e9 <f_read+0x112>
c0005485:	89 c7                	mov    edi,eax
c0005487:	8d 53 50             	lea    edx,[ebx+0x50]
c000548a:	c1 e7 09             	shl    edi,0x9
c000548d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005491:	b9 00 02 00 00       	mov    ecx,0x200
c0005496:	01 f8                	add    eax,edi
c0005498:	e8 4d c7 ff ff       	call   c0001bea <mem_cpy>
c000549d:	e9 47 ff ff ff       	jmp    c00053e9 <f_read+0x112>
c00054a2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00054a5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00054a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00054af:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054b3:	75 05                	jne    c00054ba <f_read+0x1e3>
c00054b5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054b8:	74 5b                	je     c0005515 <f_read+0x23e>
c00054ba:	8d 43 50             	lea    eax,[ebx+0x50]
c00054bd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054c5:	79 2a                	jns    c00054f1 <f_read+0x21a>
c00054c7:	83 ec 0c             	sub    esp,0xc
c00054ca:	6a 01                	push   0x1
c00054cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054d8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054dc:	50                   	push   eax
c00054dd:	e8 54 c6 ff ff       	call   c0001b36 <disk_write>
c00054e2:	83 c4 20             	add    esp,0x20
c00054e5:	85 c0                	test   eax,eax
c00054e7:	0f 85 64 ff ff ff    	jne    c0005451 <f_read+0x17a>
c00054ed:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054f1:	83 ec 0c             	sub    esp,0xc
c00054f4:	6a 01                	push   0x1
c00054f6:	57                   	push   edi
c00054f7:	56                   	push   esi
c00054f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005500:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005504:	50                   	push   eax
c0005505:	e8 16 c6 ff ff       	call   c0001b20 <disk_read>
c000550a:	83 c4 20             	add    esp,0x20
c000550d:	85 c0                	test   eax,eax
c000550f:	0f 85 3c ff ff ff    	jne    c0005451 <f_read+0x17a>
c0005515:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005518:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000551b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000551e:	ba 00 02 00 00       	mov    edx,0x200
c0005523:	25 ff 01 00 00       	and    eax,0x1ff
c0005528:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000552c:	29 c2                	sub    edx,eax
c000552e:	39 d6                	cmp    esi,edx
c0005530:	76 02                	jbe    c0005534 <f_read+0x25d>
c0005532:	89 d6                	mov    esi,edx
c0005534:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005538:	89 f1                	mov    ecx,esi
c000553a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000553e:	e8 a7 c6 ff ff       	call   c0001bea <mem_cpy>
c0005543:	e9 a7 fe ff ff       	jmp    c00053ef <f_read+0x118>
c0005548:	bd 07 00 00 00       	mov    ebp,0x7
c000554d:	83 c4 2c             	add    esp,0x2c
c0005550:	89 e8                	mov    eax,ebp
c0005552:	5b                   	pop    ebx
c0005553:	5e                   	pop    esi
c0005554:	5f                   	pop    edi
c0005555:	5d                   	pop    ebp
c0005556:	c3                   	ret    

c0005557 <f_write>:
c0005557:	55                   	push   ebp
c0005558:	57                   	push   edi
c0005559:	56                   	push   esi
c000555a:	53                   	push   ebx
c000555b:	83 ec 2c             	sub    esp,0x2c
c000555e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005562:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005566:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000556c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005570:	89 d8                	mov    eax,ebx
c0005572:	e8 f7 cc ff ff       	call   c000226e <validate>
c0005577:	89 c5                	mov    ebp,eax
c0005579:	85 c0                	test   eax,eax
c000557b:	0f 85 86 02 00 00    	jne    c0005807 <f_write+0x2b0>
c0005581:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005585:	85 ed                	test   ebp,ebp
c0005587:	0f 85 7a 02 00 00    	jne    c0005807 <f_write+0x2b0>
c000558d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005591:	0f 84 6b 02 00 00    	je     c0005802 <f_write+0x2ab>
c0005597:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000559b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000559e:	0f 84 43 01 00 00    	je     c00056e7 <f_write+0x190>
c00055a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055a7:	89 c1                	mov    ecx,eax
c00055a9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00055ad:	0f 83 34 01 00 00    	jae    c00056e7 <f_write+0x190>
c00055b3:	f7 d0                	not    eax
c00055b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055b9:	e9 29 01 00 00       	jmp    c00056e7 <f_write+0x190>
c00055be:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055c1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055c4:	89 d0                	mov    eax,edx
c00055c6:	25 ff 01 00 00       	and    eax,0x1ff
c00055cb:	0f 85 00 02 00 00    	jne    c00057d1 <f_write+0x27a>
c00055d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055d5:	89 d6                	mov    esi,edx
c00055d7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055db:	89 cf                	mov    edi,ecx
c00055dd:	48                   	dec    eax
c00055de:	0f ac fe 09          	shrd   esi,edi,0x9
c00055e2:	21 f0                	and    eax,esi
c00055e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055e8:	0f 84 06 01 00 00    	je     c00056f4 <f_write+0x19d>
c00055ee:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055f2:	0f 88 6e 01 00 00    	js     c0005766 <f_write+0x20f>
c00055f8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ff:	89 c8                	mov    eax,ecx
c0005601:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005605:	e8 fa c7 ff ff       	call   c0001e04 <clst2sect>
c000560a:	89 d1                	mov    ecx,edx
c000560c:	09 c1                	or     ecx,eax
c000560e:	0f 84 1c 01 00 00    	je     c0005730 <f_write+0x1d9>
c0005614:	31 ff                	xor    edi,edi
c0005616:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000561a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000561e:	01 c6                	add    esi,eax
c0005620:	11 d7                	adc    edi,edx
c0005622:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000562a:	0f 86 63 01 00 00    	jbe    c0005793 <f_write+0x23c>
c0005630:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005634:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005638:	c1 e8 09             	shr    eax,0x9
c000563b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000563f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005643:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005647:	39 c2                	cmp    edx,eax
c0005649:	76 08                	jbe    c0005653 <f_write+0xfc>
c000564b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000564f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005653:	83 ec 0c             	sub    esp,0xc
c0005656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000565a:	57                   	push   edi
c000565b:	56                   	push   esi
c000565c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005660:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005664:	50                   	push   eax
c0005665:	e8 cc c4 ff ff       	call   c0001b36 <disk_write>
c000566a:	83 c4 20             	add    esp,0x20
c000566d:	85 c0                	test   eax,eax
c000566f:	0f 85 ce 00 00 00    	jne    c0005743 <f_write+0x1ec>
c0005675:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005678:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000567b:	29 f0                	sub    eax,esi
c000567d:	19 fa                	sbb    edx,edi
c000567f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005683:	89 d7                	mov    edi,edx
c0005685:	ba 00 00 00 00       	mov    edx,0x0
c000568a:	89 f9                	mov    ecx,edi
c000568c:	19 d1                	sbb    ecx,edx
c000568e:	73 1c                	jae    c00056ac <f_write+0x155>
c0005690:	89 c7                	mov    edi,eax
c0005692:	b9 00 02 00 00       	mov    ecx,0x200
c0005697:	c1 e7 09             	shl    edi,0x9
c000569a:	8d 43 50             	lea    eax,[ebx+0x50]
c000569d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00056a1:	89 fa                	mov    edx,edi
c00056a3:	e8 42 c5 ff ff       	call   c0001bea <mem_cpy>
c00056a8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00056ac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056b0:	c1 e6 09             	shl    esi,0x9
c00056b3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056b7:	31 ff                	xor    edi,edi
c00056b9:	01 30                	add    DWORD PTR [eax],esi
c00056bb:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056bf:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056c6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056c9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056cc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056cf:	89 c1                	mov    ecx,eax
c00056d1:	39 f2                	cmp    edx,esi
c00056d3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056d6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056d9:	19 f9                	sbb    ecx,edi
c00056db:	73 04                	jae    c00056e1 <f_write+0x18a>
c00056dd:	89 f2                	mov    edx,esi
c00056df:	89 f8                	mov    eax,edi
c00056e1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056e4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056e7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056ec:	0f 85 cc fe ff ff    	jne    c00055be <f_write+0x67>
c00056f2:	eb 2e                	jmp    c0005722 <f_write+0x1cb>
c00056f4:	89 c8                	mov    eax,ecx
c00056f6:	09 d0                	or     eax,edx
c00056f8:	75 0b                	jne    c0005705 <f_write+0x1ae>
c00056fa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056fd:	31 d2                	xor    edx,edx
c00056ff:	85 c0                	test   eax,eax
c0005701:	75 28                	jne    c000572b <f_write+0x1d4>
c0005703:	eb 12                	jmp    c0005717 <f_write+0x1c0>
c0005705:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005709:	74 09                	je     c0005714 <f_write+0x1bd>
c000570b:	89 d8                	mov    eax,ebx
c000570d:	e8 13 c7 ff ff       	call   c0001e25 <clmt_clust>
c0005712:	eb 0a                	jmp    c000571e <f_write+0x1c7>
c0005714:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005717:	89 d8                	mov    eax,ebx
c0005719:	e8 a1 da ff ff       	call   c00031bf <create_chain>
c000571e:	85 c0                	test   eax,eax
c0005720:	75 09                	jne    c000572b <f_write+0x1d4>
c0005722:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005726:	e9 dc 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c000572b:	83 f8 01             	cmp    eax,0x1
c000572e:	75 0e                	jne    c000573e <f_write+0x1e7>
c0005730:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005734:	bd 02 00 00 00       	mov    ebp,0x2
c0005739:	e9 c9 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c000573e:	83 f8 ff             	cmp    eax,0xffffffff
c0005741:	75 0e                	jne    c0005751 <f_write+0x1fa>
c0005743:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005747:	bd 01 00 00 00       	mov    ebp,0x1
c000574c:	e9 b6 00 00 00       	jmp    c0005807 <f_write+0x2b0>
c0005751:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005754:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005758:	0f 85 90 fe ff ff    	jne    c00055ee <f_write+0x97>
c000575e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005761:	e9 88 fe ff ff       	jmp    c00055ee <f_write+0x97>
c0005766:	83 ec 0c             	sub    esp,0xc
c0005769:	8d 43 50             	lea    eax,[ebx+0x50]
c000576c:	6a 01                	push   0x1
c000576e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005771:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005774:	50                   	push   eax
c0005775:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005779:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000577d:	50                   	push   eax
c000577e:	e8 b3 c3 ff ff       	call   c0001b36 <disk_write>
c0005783:	83 c4 20             	add    esp,0x20
c0005786:	85 c0                	test   eax,eax
c0005788:	75 b9                	jne    c0005743 <f_write+0x1ec>
c000578a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000578e:	e9 65 fe ff ff       	jmp    c00055f8 <f_write+0xa1>
c0005793:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005796:	75 05                	jne    c000579d <f_write+0x246>
c0005798:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000579b:	74 2e                	je     c00057cb <f_write+0x274>
c000579d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00057a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057a3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00057a6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00057a9:	73 20                	jae    c00057cb <f_write+0x274>
c00057ab:	83 ec 0c             	sub    esp,0xc
c00057ae:	8d 43 50             	lea    eax,[ebx+0x50]
c00057b1:	6a 01                	push   0x1
c00057b3:	57                   	push   edi
c00057b4:	56                   	push   esi
c00057b5:	50                   	push   eax
c00057b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057ba:	50                   	push   eax
c00057bb:	e8 60 c3 ff ff       	call   c0001b20 <disk_read>
c00057c0:	83 c4 20             	add    esp,0x20
c00057c3:	85 c0                	test   eax,eax
c00057c5:	0f 85 78 ff ff ff    	jne    c0005743 <f_write+0x1ec>
c00057cb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057ce:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057d1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057d4:	ba 00 02 00 00       	mov    edx,0x200
c00057d9:	25 ff 01 00 00       	and    eax,0x1ff
c00057de:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057e2:	29 c2                	sub    edx,eax
c00057e4:	39 d6                	cmp    esi,edx
c00057e6:	76 02                	jbe    c00057ea <f_write+0x293>
c00057e8:	89 d6                	mov    esi,edx
c00057ea:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057ee:	89 f1                	mov    ecx,esi
c00057f0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057f4:	e8 f1 c3 ff ff       	call   c0001bea <mem_cpy>
c00057f9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057fd:	e9 b1 fe ff ff       	jmp    c00056b3 <f_write+0x15c>
c0005802:	bd 07 00 00 00       	mov    ebp,0x7
c0005807:	83 c4 2c             	add    esp,0x2c
c000580a:	89 e8                	mov    eax,ebp
c000580c:	5b                   	pop    ebx
c000580d:	5e                   	pop    esi
c000580e:	5f                   	pop    edi
c000580f:	5d                   	pop    ebp
c0005810:	c3                   	ret    

c0005811 <f_sync>:
c0005811:	56                   	push   esi
c0005812:	53                   	push   ebx
c0005813:	83 ec 64             	sub    esp,0x64
c0005816:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000581a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000581e:	89 d8                	mov    eax,ebx
c0005820:	e8 49 ca ff ff       	call   c000226e <validate>
c0005825:	85 c0                	test   eax,eax
c0005827:	0f 85 ba 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000582d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005830:	f6 c2 40             	test   dl,0x40
c0005833:	0f 84 ae 01 00 00    	je     c00059e7 <f_sync+0x1d6>
c0005839:	84 d2                	test   dl,dl
c000583b:	79 33                	jns    c0005870 <f_sync+0x5f>
c000583d:	83 ec 0c             	sub    esp,0xc
c0005840:	8d 43 50             	lea    eax,[ebx+0x50]
c0005843:	6a 01                	push   0x1
c0005845:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005848:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000584b:	50                   	push   eax
c000584c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005850:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005854:	50                   	push   eax
c0005855:	e8 dc c2 ff ff       	call   c0001b36 <disk_write>
c000585a:	83 c4 20             	add    esp,0x20
c000585d:	89 c2                	mov    edx,eax
c000585f:	b8 01 00 00 00       	mov    eax,0x1
c0005864:	85 d2                	test   edx,edx
c0005866:	0f 85 7b 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000586c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005874:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005877:	0f 85 11 01 00 00    	jne    c000598e <f_sync+0x17d>
c000587d:	89 d8                	mov    eax,ebx
c000587f:	e8 13 d6 ff ff       	call   c0002e97 <fill_first_frag>
c0005884:	85 c0                	test   eax,eax
c0005886:	0f 85 5b 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c000588c:	83 c9 ff             	or     ecx,0xffffffff
c000588f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005892:	89 d8                	mov    eax,ebx
c0005894:	e8 c9 d5 ff ff       	call   c0002e62 <fill_last_frag>
c0005899:	85 c0                	test   eax,eax
c000589b:	0f 85 46 01 00 00    	jne    c00059e7 <f_sync+0x1d6>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	68 60 04 00 00       	push   0x460
c00058a9:	e8 26 2d 00 00       	call   c00085d4 <ff_memalloc>
c00058ae:	83 c4 10             	add    esp,0x10
c00058b1:	89 c6                	mov    esi,eax
c00058b3:	b8 11 00 00 00       	mov    eax,0x11
c00058b8:	85 f6                	test   esi,esi
c00058ba:	0f 84 27 01 00 00    	je     c00059e7 <f_sync+0x1d6>
c00058c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058c4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ca:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058cd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058d0:	89 da                	mov    edx,ebx
c00058d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058d6:	e8 af df ff ff       	call   c000388a <load_obj_xdir>
c00058db:	85 c0                	test   eax,eax
c00058dd:	0f 85 95 00 00 00    	jne    c0005978 <f_sync+0x167>
c00058e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058e7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058ea:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058ee:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058f1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058f4:	83 ca 01             	or     edx,0x1
c00058f7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058fa:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005900:	83 c0 34             	add    eax,0x34
c0005903:	e8 d9 c2 ff ff       	call   c0001be1 <st_dword>
c0005908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000590c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000590f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005912:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005915:	83 c0 38             	add    eax,0x38
c0005918:	e8 c7 c2 ff ff       	call   c0001be4 <st_qword>
c000591d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005920:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005924:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005927:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592a:	83 c0 28             	add    eax,0x28
c000592d:	e8 b2 c2 ff ff       	call   c0001be4 <st_qword>
c0005932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005936:	ba 00 00 21 50       	mov    edx,0x50210000
c000593b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000593e:	83 c0 0c             	add    eax,0xc
c0005941:	e8 9b c2 ff ff       	call   c0001be1 <st_dword>
c0005946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000594a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000594d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005951:	31 d2                	xor    edx,edx
c0005953:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005956:	83 c0 10             	add    eax,0x10
c0005959:	e8 83 c2 ff ff       	call   c0001be1 <st_dword>
c000595e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005962:	e8 62 e1 ff ff       	call   c0003ac9 <store_xdir>
c0005967:	85 c0                	test   eax,eax
c0005969:	75 0d                	jne    c0005978 <f_sync+0x167>
c000596b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596f:	e8 00 eb ff ff       	call   c0004474 <sync_fs>
c0005974:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005978:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000597c:	83 ec 0c             	sub    esp,0xc
c000597f:	56                   	push   esi
c0005980:	e8 67 2c 00 00       	call   c00085ec <ff_memfree>
c0005985:	83 c4 10             	add    esp,0x10
c0005988:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000598c:	eb 59                	jmp    c00059e7 <f_sync+0x1d6>
c000598e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005991:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005994:	e8 b0 c9 ff ff       	call   c0002349 <move_window>
c0005999:	85 c0                	test   eax,eax
c000599b:	75 4a                	jne    c00059e7 <f_sync+0x1d6>
c000599d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00059a0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00059a4:	89 f2                	mov    edx,esi
c00059a6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00059a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00059ab:	e8 5f f3 ff ff       	call   c0004d0f <st_clust.isra.1>
c00059b0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059b3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059b6:	e8 26 c2 ff ff       	call   c0001be1 <st_dword>
c00059bb:	8d 46 16             	lea    eax,[esi+0x16]
c00059be:	ba 00 00 21 50       	mov    edx,0x50210000
c00059c3:	e8 19 c2 ff ff       	call   c0001be1 <st_dword>
c00059c8:	8d 46 12             	lea    eax,[esi+0x12]
c00059cb:	31 d2                	xor    edx,edx
c00059cd:	e8 0b c2 ff ff       	call   c0001bdd <st_word>
c00059d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059d6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059de:	e8 91 ea ff ff       	call   c0004474 <sync_fs>
c00059e3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059e7:	83 c4 64             	add    esp,0x64
c00059ea:	5b                   	pop    ebx
c00059eb:	5e                   	pop    esi
c00059ec:	c3                   	ret    

c00059ed <f_close>:
c00059ed:	53                   	push   ebx
c00059ee:	83 ec 24             	sub    esp,0x24
c00059f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059f5:	53                   	push   ebx
c00059f6:	e8 16 fe ff ff       	call   c0005811 <f_sync>
c00059fb:	83 c4 10             	add    esp,0x10
c00059fe:	85 c0                	test   eax,eax
c0005a00:	75 15                	jne    c0005a17 <f_close+0x2a>
c0005a02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005a06:	89 d8                	mov    eax,ebx
c0005a08:	e8 61 c8 ff ff       	call   c000226e <validate>
c0005a0d:	85 c0                	test   eax,eax
c0005a0f:	75 06                	jne    c0005a17 <f_close+0x2a>
c0005a11:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a17:	83 c4 18             	add    esp,0x18
c0005a1a:	5b                   	pop    ebx
c0005a1b:	c3                   	ret    

c0005a1c <f_lseek>:
c0005a1c:	55                   	push   ebp
c0005a1d:	57                   	push   edi
c0005a1e:	56                   	push   esi
c0005a1f:	53                   	push   ebx
c0005a20:	83 ec 3c             	sub    esp,0x3c
c0005a23:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a27:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a2b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a32:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a36:	89 d8                	mov    eax,ebx
c0005a38:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a3c:	e8 2d c8 ff ff       	call   c000226e <validate>
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 7a 04 00 00    	jne    c0005ec7 <f_lseek+0x4ab>
c0005a4d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a55:	85 c0                	test   eax,eax
c0005a57:	0f 85 6a 04 00 00    	jne    c0005ec7 <f_lseek+0x4ab>
c0005a5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a61:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a64:	74 0c                	je     c0005a72 <f_lseek+0x56>
c0005a66:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a69:	85 c0                	test   eax,eax
c0005a6b:	75 1f                	jne    c0005a8c <f_lseek+0x70>
c0005a6d:	e9 b5 01 00 00       	jmp    c0005c27 <f_lseek+0x20b>
c0005a72:	83 c9 ff             	or     ecx,0xffffffff
c0005a75:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a78:	89 d8                	mov    eax,ebx
c0005a7a:	e8 e3 d3 ff ff       	call   c0002e62 <fill_last_frag>
c0005a7f:	85 c0                	test   eax,eax
c0005a81:	74 e3                	je     c0005a66 <f_lseek+0x4a>
c0005a83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a87:	e9 3b 04 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005a8c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a91:	0f 85 ac 00 00 00    	jne    c0005b43 <f_lseek+0x127>
c0005a97:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a9b:	0f 85 a2 00 00 00    	jne    c0005b43 <f_lseek+0x127>
c0005aa1:	8d 78 04             	lea    edi,[eax+0x4]
c0005aa4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005aa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0005aa9:	be 02 00 00 00       	mov    esi,0x2
c0005aae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ab2:	85 ed                	test   ebp,ebp
c0005ab4:	74 73                	je     c0005b29 <f_lseek+0x10d>
c0005ab6:	89 e9                	mov    ecx,ebp
c0005ab8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005abf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ac2:	89 ca                	mov    edx,ecx
c0005ac4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ac8:	89 d8                	mov    eax,ebx
c0005aca:	e8 02 d4 ff ff       	call   c0002ed1 <get_fat>
c0005acf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ad3:	83 f8 01             	cmp    eax,0x1
c0005ad6:	77 11                	ja     c0005ae9 <f_lseek+0xcd>
c0005ad8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005adc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ae4:	e9 de 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005ae9:	83 f8 ff             	cmp    eax,0xffffffff
c0005aec:	75 11                	jne    c0005aff <f_lseek+0xe3>
c0005aee:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005af2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005afa:	e9 c8 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005aff:	8d 51 01             	lea    edx,[ecx+0x1]
c0005b02:	89 c1                	mov    ecx,eax
c0005b04:	39 c2                	cmp    edx,eax
c0005b06:	74 b7                	je     c0005abf <f_lseek+0xa3>
c0005b08:	83 c6 02             	add    esi,0x2
c0005b0b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005b0f:	72 0b                	jb     c0005b1c <f_lseek+0x100>
c0005b11:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b14:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b17:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b19:	83 c7 08             	add    edi,0x8
c0005b1c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b20:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b23:	76 04                	jbe    c0005b29 <f_lseek+0x10d>
c0005b25:	89 c5                	mov    ebp,eax
c0005b27:	eb 8d                	jmp    c0005ab6 <f_lseek+0x9a>
c0005b29:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b2c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b30:	89 30                	mov    DWORD PTR [eax],esi
c0005b32:	0f 87 87 03 00 00    	ja     c0005ebf <f_lseek+0x4a3>
c0005b38:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b3e:	e9 84 03 00 00       	jmp    c0005ec7 <f_lseek+0x4ab>
c0005b43:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b46:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b55:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b5c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b60:	73 0f                	jae    c0005b71 <f_lseek+0x155>
c0005b62:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b79:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b7c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b83:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b87:	0f 84 3a 03 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005b8d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b91:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b95:	83 c6 ff             	add    esi,0xffffffff
c0005b98:	89 d8                	mov    eax,ebx
c0005b9a:	83 d7 ff             	adc    edi,0xffffffff
c0005b9d:	89 f2                	mov    edx,esi
c0005b9f:	89 f9                	mov    ecx,edi
c0005ba1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ba5:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ba8:	e8 78 c2 ff ff       	call   c0001e25 <clmt_clust>
c0005bad:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005bb1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bb4:	89 c2                	mov    edx,eax
c0005bb6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bba:	89 c8                	mov    eax,ecx
c0005bbc:	e8 43 c2 ff ff       	call   c0001e04 <clst2sect>
c0005bc1:	89 d7                	mov    edi,edx
c0005bc3:	09 c7                	or     edi,eax
c0005bc5:	0f 84 0d ff ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005bcb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bcf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bd5:	0f 84 ec 02 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005bdb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005be3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005be6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bee:	4d                   	dec    ebp
c0005bef:	31 ff                	xor    edi,edi
c0005bf1:	21 ee                	and    esi,ebp
c0005bf3:	01 c6                	add    esi,eax
c0005bf5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005bf8:	11 d7                	adc    edi,edx
c0005bfa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bfd:	39 fa                	cmp    edx,edi
c0005bff:	75 08                	jne    c0005c09 <f_lseek+0x1ed>
c0005c01:	39 f0                	cmp    eax,esi
c0005c03:	0f 84 be 02 00 00    	je     c0005ec7 <f_lseek+0x4ab>
c0005c09:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c0c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c10:	0f 89 80 02 00 00    	jns    c0005e96 <f_lseek+0x47a>
c0005c16:	83 ec 0c             	sub    esp,0xc
c0005c19:	6a 01                	push   0x1
c0005c1b:	52                   	push   edx
c0005c1c:	50                   	push   eax
c0005c1d:	55                   	push   ebp
c0005c1e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c22:	e9 5a 02 00 00       	jmp    c0005e81 <f_lseek+0x465>
c0005c27:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c2b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c2e:	74 16                	je     c0005c46 <f_lseek+0x22a>
c0005c30:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c35:	76 0f                	jbe    c0005c46 <f_lseek+0x22a>
c0005c37:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c3e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c46:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c49:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c4c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c4f:	89 c7                	mov    edi,eax
c0005c51:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c55:	73 0d                	jae    c0005c64 <f_lseek+0x248>
c0005c57:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c5b:	75 07                	jne    c0005c64 <f_lseek+0x248>
c0005c5d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c64:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c67:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c6a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c6e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c75:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c7c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c7f:	75 09                	jne    c0005c8a <f_lseek+0x26e>
c0005c81:	31 f6                	xor    esi,esi
c0005c83:	31 ff                	xor    edi,edi
c0005c85:	e9 af 01 00 00       	jmp    c0005e39 <f_lseek+0x41d>
c0005c8a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c8e:	89 d7                	mov    edi,edx
c0005c90:	c1 e1 09             	shl    ecx,0x9
c0005c93:	09 c7                	or     edi,eax
c0005c95:	89 cd                	mov    ebp,ecx
c0005c97:	74 6d                	je     c0005d06 <f_lseek+0x2ea>
c0005c99:	83 c0 ff             	add    eax,0xffffffff
c0005c9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ca0:	83 d2 ff             	adc    edx,0xffffffff
c0005ca3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ca6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005caa:	83 c0 ff             	add    eax,0xffffffff
c0005cad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005cb1:	83 d2 ff             	adc    edx,0xffffffff
c0005cb4:	31 ff                	xor    edi,edi
c0005cb6:	57                   	push   edi
c0005cb7:	51                   	push   ecx
c0005cb8:	52                   	push   edx
c0005cb9:	50                   	push   eax
c0005cba:	e8 d1 d3 01 00       	call   c0023090 <__udivdi3>
c0005cbf:	83 c4 10             	add    esp,0x10
c0005cc2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cc6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cca:	57                   	push   edi
c0005ccb:	55                   	push   ebp
c0005ccc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cd4:	e8 b7 d3 01 00       	call   c0023090 <__udivdi3>
c0005cd9:	83 c4 10             	add    esp,0x10
c0005cdc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005ce0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005ce4:	19 d1                	sbb    ecx,edx
c0005ce6:	72 1e                	jb     c0005d06 <f_lseek+0x2ea>
c0005ce8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cec:	89 e9                	mov    ecx,ebp
c0005cee:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cf1:	f7 d9                	neg    ecx
c0005cf3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005cf6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cfa:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005cfd:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005d00:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005d04:	eb 28                	jmp    c0005d2e <f_lseek+0x312>
c0005d06:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d09:	85 c0                	test   eax,eax
c0005d0b:	75 1e                	jne    c0005d2b <f_lseek+0x30f>
c0005d0d:	31 d2                	xor    edx,edx
c0005d0f:	89 d8                	mov    eax,ebx
c0005d11:	e8 a9 d4 ff ff       	call   c00031bf <create_chain>
c0005d16:	83 f8 01             	cmp    eax,0x1
c0005d19:	0f 84 b9 fd ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005d1f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d22:	0f 84 c6 fd ff ff    	je     c0005aee <f_lseek+0xd2>
c0005d28:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d2b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d2e:	85 c0                	test   eax,eax
c0005d30:	0f 84 4b ff ff ff    	je     c0005c81 <f_lseek+0x265>
c0005d36:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d3a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d42:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d49:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d4c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d4f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d53:	0f 83 9d 00 00 00    	jae    c0005df6 <f_lseek+0x3da>
c0005d59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d5d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d61:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d64:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d68:	01 f2                	add    edx,esi
c0005d6a:	11 f9                	adc    ecx,edi
c0005d6c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d70:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d74:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d77:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d7a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d7d:	f6 c1 02             	test   cl,0x2
c0005d80:	74 35                	je     c0005db7 <f_lseek+0x39b>
c0005d82:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d86:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d89:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d8c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d90:	73 16                	jae    c0005da8 <f_lseek+0x38c>
c0005d92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d96:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d9a:	88 ca                	mov    dl,cl
c0005d9c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d9f:	83 ca 40             	or     edx,0x40
c0005da2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005da5:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005da8:	89 c2                	mov    edx,eax
c0005daa:	89 d8                	mov    eax,ebx
c0005dac:	e8 0e d4 ff ff       	call   c00031bf <create_chain>
c0005db1:	85 c0                	test   eax,eax
c0005db3:	75 0b                	jne    c0005dc0 <f_lseek+0x3a4>
c0005db5:	eb 30                	jmp    c0005de7 <f_lseek+0x3cb>
c0005db7:	89 c2                	mov    edx,eax
c0005db9:	89 d8                	mov    eax,ebx
c0005dbb:	e8 11 d1 ff ff       	call   c0002ed1 <get_fat>
c0005dc0:	83 f8 ff             	cmp    eax,0xffffffff
c0005dc3:	0f 84 25 fd ff ff    	je     c0005aee <f_lseek+0xd2>
c0005dc9:	83 f8 01             	cmp    eax,0x1
c0005dcc:	0f 86 06 fd ff ff    	jbe    c0005ad8 <f_lseek+0xbc>
c0005dd2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dd6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dd9:	0f 86 f9 fc ff ff    	jbe    c0005ad8 <f_lseek+0xbc>
c0005ddf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005de2:	e9 5b ff ff ff       	jmp    c0005d42 <f_lseek+0x326>
c0005de7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005df6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005df9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005dfd:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005e00:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005e03:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005e06:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005e0c:	0f 84 6f fe ff ff    	je     c0005c81 <f_lseek+0x265>
c0005e12:	89 c2                	mov    edx,eax
c0005e14:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e18:	e8 e7 bf ff ff       	call   c0001e04 <clst2sect>
c0005e1d:	89 d7                	mov    edi,edx
c0005e1f:	09 c7                	or     edi,eax
c0005e21:	0f 84 b1 fc ff ff    	je     c0005ad8 <f_lseek+0xbc>
c0005e27:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e2e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e32:	c1 ef 09             	shr    edi,0x9
c0005e35:	01 c6                	add    esi,eax
c0005e37:	11 d7                	adc    edi,edx
c0005e39:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e3c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e3f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e42:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e45:	19 d1                	sbb    ecx,edx
c0005e47:	73 0a                	jae    c0005e53 <f_lseek+0x437>
c0005e49:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e4c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e4f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e53:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e58:	74 6d                	je     c0005ec7 <f_lseek+0x4ab>
c0005e5a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e5d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e60:	39 fa                	cmp    edx,edi
c0005e62:	75 04                	jne    c0005e68 <f_lseek+0x44c>
c0005e64:	39 f0                	cmp    eax,esi
c0005e66:	74 5f                	je     c0005ec7 <f_lseek+0x4ab>
c0005e68:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e6b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e6f:	79 25                	jns    c0005e96 <f_lseek+0x47a>
c0005e71:	83 ec 0c             	sub    esp,0xc
c0005e74:	6a 01                	push   0x1
c0005e76:	52                   	push   edx
c0005e77:	50                   	push   eax
c0005e78:	55                   	push   ebp
c0005e79:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e7d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e81:	50                   	push   eax
c0005e82:	e8 af bc ff ff       	call   c0001b36 <disk_write>
c0005e87:	83 c4 20             	add    esp,0x20
c0005e8a:	85 c0                	test   eax,eax
c0005e8c:	0f 85 5c fc ff ff    	jne    c0005aee <f_lseek+0xd2>
c0005e92:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e96:	83 ec 0c             	sub    esp,0xc
c0005e99:	6a 01                	push   0x1
c0005e9b:	57                   	push   edi
c0005e9c:	56                   	push   esi
c0005e9d:	55                   	push   ebp
c0005e9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ea2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ea6:	50                   	push   eax
c0005ea7:	e8 74 bc ff ff       	call   c0001b20 <disk_read>
c0005eac:	83 c4 20             	add    esp,0x20
c0005eaf:	85 c0                	test   eax,eax
c0005eb1:	0f 85 37 fc ff ff    	jne    c0005aee <f_lseek+0xd2>
c0005eb7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eba:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ebd:	eb 08                	jmp    c0005ec7 <f_lseek+0x4ab>
c0005ebf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005ec7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ecb:	83 c4 3c             	add    esp,0x3c
c0005ece:	5b                   	pop    ebx
c0005ecf:	5e                   	pop    esi
c0005ed0:	5f                   	pop    edi
c0005ed1:	5d                   	pop    ebp
c0005ed2:	c3                   	ret    

c0005ed3 <f_opendir>:
c0005ed3:	56                   	push   esi
c0005ed4:	b8 09 00 00 00       	mov    eax,0x9
c0005ed9:	53                   	push   ebx
c0005eda:	83 ec 24             	sub    esp,0x24
c0005edd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ee1:	85 db                	test   ebx,ebx
c0005ee3:	0f 84 e6 00 00 00    	je     c0005fcf <f_opendir+0xfc>
c0005ee9:	31 c9                	xor    ecx,ecx
c0005eeb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eef:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ef3:	e8 03 c7 ff ff       	call   c00025fb <mount_volume>
c0005ef8:	85 c0                	test   eax,eax
c0005efa:	0f 85 c9 00 00 00    	jne    c0005fc9 <f_opendir+0xf6>
c0005f00:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f04:	83 ec 0c             	sub    esp,0xc
c0005f07:	89 03                	mov    DWORD PTR [ebx],eax
c0005f09:	68 60 04 00 00       	push   0x460
c0005f0e:	e8 c1 26 00 00       	call   c00085d4 <ff_memalloc>
c0005f13:	83 c4 10             	add    esp,0x10
c0005f16:	89 c6                	mov    esi,eax
c0005f18:	b8 11 00 00 00       	mov    eax,0x11
c0005f1d:	85 f6                	test   esi,esi
c0005f1f:	0f 84 aa 00 00 00    	je     c0005fcf <f_opendir+0xfc>
c0005f25:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f29:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f2f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f32:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f35:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f39:	89 d8                	mov    eax,ebx
c0005f3b:	e8 31 ee ff ff       	call   c0004d71 <follow_path>
c0005f40:	85 c0                	test   eax,eax
c0005f42:	75 61                	jne    c0005fa5 <f_opendir+0xd2>
c0005f44:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f48:	78 46                	js     c0005f90 <f_opendir+0xbd>
c0005f4a:	b8 05 00 00 00       	mov    eax,0x5
c0005f4f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f53:	74 50                	je     c0005fa5 <f_opendir+0xd2>
c0005f55:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f59:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f5b:	3c 04                	cmp    al,0x4
c0005f5d:	75 26                	jne    c0005f85 <f_opendir+0xb2>
c0005f5f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f62:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f65:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f68:	30 d2                	xor    dl,dl
c0005f6a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f6e:	09 c2                	or     edx,eax
c0005f70:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f73:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f76:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f79:	89 da                	mov    edx,ebx
c0005f7b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f7e:	e8 b4 ed ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0005f83:	eb 0b                	jmp    c0005f90 <f_opendir+0xbd>
c0005f85:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f88:	e8 59 ed ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0005f8d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f94:	31 d2                	xor    edx,edx
c0005f96:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f9a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f9e:	89 d8                	mov    eax,ebx
c0005fa0:	e8 22 d1 ff ff       	call   c00030c7 <dir_sdi>
c0005fa5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fa9:	83 ec 0c             	sub    esp,0xc
c0005fac:	56                   	push   esi
c0005fad:	e8 3a 26 00 00       	call   c00085ec <ff_memfree>
c0005fb2:	83 c4 10             	add    esp,0x10
c0005fb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fb9:	83 f8 04             	cmp    eax,0x4
c0005fbc:	74 06                	je     c0005fc4 <f_opendir+0xf1>
c0005fbe:	85 c0                	test   eax,eax
c0005fc0:	74 0d                	je     c0005fcf <f_opendir+0xfc>
c0005fc2:	eb 05                	jmp    c0005fc9 <f_opendir+0xf6>
c0005fc4:	b8 05 00 00 00       	mov    eax,0x5
c0005fc9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fcf:	83 c4 24             	add    esp,0x24
c0005fd2:	5b                   	pop    ebx
c0005fd3:	5e                   	pop    esi
c0005fd4:	c3                   	ret    

c0005fd5 <f_closedir>:
c0005fd5:	53                   	push   ebx
c0005fd6:	83 ec 18             	sub    esp,0x18
c0005fd9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fdd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fe1:	89 d8                	mov    eax,ebx
c0005fe3:	e8 86 c2 ff ff       	call   c000226e <validate>
c0005fe8:	85 c0                	test   eax,eax
c0005fea:	75 06                	jne    c0005ff2 <f_closedir+0x1d>
c0005fec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ff2:	83 c4 18             	add    esp,0x18
c0005ff5:	5b                   	pop    ebx
c0005ff6:	c3                   	ret    

c0005ff7 <f_readdir>:
c0005ff7:	57                   	push   edi
c0005ff8:	56                   	push   esi
c0005ff9:	53                   	push   ebx
c0005ffa:	83 ec 20             	sub    esp,0x20
c0005ffd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006001:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006005:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006009:	89 d8                	mov    eax,ebx
c000600b:	e8 5e c2 ff ff       	call   c000226e <validate>
c0006010:	85 c0                	test   eax,eax
c0006012:	75 77                	jne    c000608b <f_readdir+0x94>
c0006014:	85 ff                	test   edi,edi
c0006016:	75 0b                	jne    c0006023 <f_readdir+0x2c>
c0006018:	31 d2                	xor    edx,edx
c000601a:	89 d8                	mov    eax,ebx
c000601c:	e8 a6 d0 ff ff       	call   c00030c7 <dir_sdi>
c0006021:	eb 68                	jmp    c000608b <f_readdir+0x94>
c0006023:	83 ec 0c             	sub    esp,0xc
c0006026:	68 60 04 00 00       	push   0x460
c000602b:	e8 a4 25 00 00       	call   c00085d4 <ff_memalloc>
c0006030:	83 c4 10             	add    esp,0x10
c0006033:	89 c6                	mov    esi,eax
c0006035:	b8 11 00 00 00       	mov    eax,0x11
c000603a:	85 f6                	test   esi,esi
c000603c:	74 4d                	je     c000608b <f_readdir+0x94>
c000603e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006042:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006048:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000604b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000604e:	31 d2                	xor    edx,edx
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 80 d8 ff ff       	call   c00038d7 <dir_read>
c0006057:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000605c:	75 19                	jne    c0006077 <f_readdir+0x80>
c000605e:	89 fa                	mov    edx,edi
c0006060:	89 d8                	mov    eax,ebx
c0006062:	e8 7e ea ff ff       	call   c0004ae5 <get_fileinfo>
c0006067:	31 d2                	xor    edx,edx
c0006069:	89 d8                	mov    eax,ebx
c000606b:	e8 af d5 ff ff       	call   c000361f <dir_next>
c0006070:	83 f8 04             	cmp    eax,0x4
c0006073:	75 02                	jne    c0006077 <f_readdir+0x80>
c0006075:	31 c0                	xor    eax,eax
c0006077:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000607b:	83 ec 0c             	sub    esp,0xc
c000607e:	56                   	push   esi
c000607f:	e8 68 25 00 00       	call   c00085ec <ff_memfree>
c0006084:	83 c4 10             	add    esp,0x10
c0006087:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000608b:	83 c4 20             	add    esp,0x20
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	5f                   	pop    edi
c0006091:	c3                   	ret    

c0006092 <f_stat>:
c0006092:	57                   	push   edi
c0006093:	31 c9                	xor    ecx,ecx
c0006095:	56                   	push   esi
c0006096:	53                   	push   ebx
c0006097:	83 ec 50             	sub    esp,0x50
c000609a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000609e:	8d 54 24 04          	lea    edx,[esp+0x4]
c00060a2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00060a6:	e8 50 c5 ff ff       	call   c00025fb <mount_volume>
c00060ab:	89 c3                	mov    ebx,eax
c00060ad:	85 c0                	test   eax,eax
c00060af:	75 67                	jne    c0006118 <f_stat+0x86>
c00060b1:	83 ec 0c             	sub    esp,0xc
c00060b4:	bb 11 00 00 00       	mov    ebx,0x11
c00060b9:	68 60 04 00 00       	push   0x460
c00060be:	e8 11 25 00 00       	call   c00085d4 <ff_memalloc>
c00060c3:	83 c4 10             	add    esp,0x10
c00060c6:	89 c6                	mov    esi,eax
c00060c8:	85 c0                	test   eax,eax
c00060ca:	74 4c                	je     c0006118 <f_stat+0x86>
c00060cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060d0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060d6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060d9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060dc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060e0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060e4:	e8 88 ec ff ff       	call   c0004d71 <follow_path>
c00060e9:	89 c3                	mov    ebx,eax
c00060eb:	85 c0                	test   eax,eax
c00060ed:	75 1d                	jne    c000610c <f_stat+0x7a>
c00060ef:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060f4:	78 11                	js     c0006107 <f_stat+0x75>
c00060f6:	85 ff                	test   edi,edi
c00060f8:	74 12                	je     c000610c <f_stat+0x7a>
c00060fa:	89 fa                	mov    edx,edi
c00060fc:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006100:	e8 e0 e9 ff ff       	call   c0004ae5 <get_fileinfo>
c0006105:	eb 05                	jmp    c000610c <f_stat+0x7a>
c0006107:	bb 06 00 00 00       	mov    ebx,0x6
c000610c:	83 ec 0c             	sub    esp,0xc
c000610f:	56                   	push   esi
c0006110:	e8 d7 24 00 00       	call   c00085ec <ff_memfree>
c0006115:	83 c4 10             	add    esp,0x10
c0006118:	83 c4 50             	add    esp,0x50
c000611b:	89 d8                	mov    eax,ebx
c000611d:	5b                   	pop    ebx
c000611e:	5e                   	pop    esi
c000611f:	5f                   	pop    edi
c0006120:	c3                   	ret    

c0006121 <f_getfree>:
c0006121:	55                   	push   ebp
c0006122:	31 c9                	xor    ecx,ecx
c0006124:	57                   	push   edi
c0006125:	56                   	push   esi
c0006126:	53                   	push   ebx
c0006127:	83 ec 5c             	sub    esp,0x5c
c000612a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000612e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006132:	e8 c4 c4 ff ff       	call   c00025fb <mount_volume>
c0006137:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000613b:	85 c0                	test   eax,eax
c000613d:	0f 85 9d 01 00 00    	jne    c00062e0 <f_getfree+0x1bf>
c0006143:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006147:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000614b:	89 02                	mov    DWORD PTR [edx],eax
c000614d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006150:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006153:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006156:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000615a:	39 f2                	cmp    edx,esi
c000615c:	77 0b                	ja     c0006169 <f_getfree+0x48>
c000615e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006162:	89 10                	mov    DWORD PTR [eax],edx
c0006164:	e9 77 01 00 00       	jmp    c00062e0 <f_getfree+0x1bf>
c0006169:	8a 10                	mov    dl,BYTE PTR [eax]
c000616b:	80 fa 01             	cmp    dl,0x1
c000616e:	75 3a                	jne    c00061aa <f_getfree+0x89>
c0006170:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006174:	be 02 00 00 00       	mov    esi,0x2
c0006179:	31 db                	xor    ebx,ebx
c000617b:	89 f2                	mov    edx,esi
c000617d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006181:	e8 4b cd ff ff       	call   c0002ed1 <get_fat>
c0006186:	83 f8 ff             	cmp    eax,0xffffffff
c0006189:	0f 84 28 01 00 00    	je     c00062b7 <f_getfree+0x196>
c000618f:	83 f8 01             	cmp    eax,0x1
c0006192:	0f 84 29 01 00 00    	je     c00062c1 <f_getfree+0x1a0>
c0006198:	83 d3 00             	adc    ebx,0x0
c000619b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000619f:	46                   	inc    esi
c00061a0:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00061a3:	77 d6                	ja     c000617b <f_getfree+0x5a>
c00061a5:	e9 25 01 00 00       	jmp    c00062cf <f_getfree+0x1ae>
c00061aa:	80 fa 04             	cmp    dl,0x4
c00061ad:	0f 85 88 00 00 00    	jne    c000623b <f_getfree+0x11a>
c00061b3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061b6:	31 ed                	xor    ebp,ebp
c00061b8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061c3:	31 db                	xor    ebx,ebx
c00061c5:	85 ed                	test   ebp,ebp
c00061c7:	75 3f                	jne    c0006208 <f_getfree+0xe7>
c00061c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061d1:	83 c0 01             	add    eax,0x1
c00061d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061d8:	83 d2 00             	adc    edx,0x0
c00061db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061eb:	e8 59 c1 ff ff       	call   c0002349 <move_window>
c00061f0:	85 c0                	test   eax,eax
c00061f2:	0f 85 d3 00 00 00    	jne    c00062cb <f_getfree+0x1aa>
c00061f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006200:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006204:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006208:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000620c:	8d 4e f8             	lea    ecx,[esi-0x8]
c000620f:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006213:	89 cf                	mov    edi,ecx
c0006215:	85 f6                	test   esi,esi
c0006217:	74 12                	je     c000622b <f_getfree+0x10a>
c0006219:	88 c1                	mov    cl,al
c000621b:	83 e1 01             	and    ecx,0x1
c000621e:	80 f9 01             	cmp    cl,0x1
c0006221:	83 d3 00             	adc    ebx,0x0
c0006224:	d0 e8                	shr    al,1
c0006226:	4e                   	dec    esi
c0006227:	39 fe                	cmp    esi,edi
c0006229:	75 ea                	jne    c0006215 <f_getfree+0xf4>
c000622b:	45                   	inc    ebp
c000622c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006232:	85 f6                	test   esi,esi
c0006234:	75 8f                	jne    c00061c5 <f_getfree+0xa4>
c0006236:	e9 94 00 00 00       	jmp    c00062cf <f_getfree+0x1ae>
c000623b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000623e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006241:	31 f6                	xor    esi,esi
c0006243:	31 db                	xor    ebx,ebx
c0006245:	85 f6                	test   esi,esi
c0006247:	75 1b                	jne    c0006264 <f_getfree+0x143>
c0006249:	89 d7                	mov    edi,edx
c000624b:	89 cd                	mov    ebp,ecx
c000624d:	83 c7 01             	add    edi,0x1
c0006250:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006254:	83 d5 00             	adc    ebp,0x0
c0006257:	e8 ed c0 ff ff       	call   c0002349 <move_window>
c000625c:	85 c0                	test   eax,eax
c000625e:	75 6b                	jne    c00062cb <f_getfree+0x1aa>
c0006260:	89 fa                	mov    edx,edi
c0006262:	89 e9                	mov    ecx,ebp
c0006264:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006268:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000626c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006270:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006273:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006277:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000627b:	75 11                	jne    c000628e <f_getfree+0x16d>
c000627d:	e8 e9 b8 ff ff       	call   c0001b6b <ld_word>
c0006282:	66 83 f8 01          	cmp    ax,0x1
c0006286:	83 d3 00             	adc    ebx,0x0
c0006289:	83 c6 02             	add    esi,0x2
c000628c:	eb 13                	jmp    c00062a1 <f_getfree+0x180>
c000628e:	e8 e5 b8 ff ff       	call   c0001b78 <ld_dword>
c0006293:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006298:	83 f8 01             	cmp    eax,0x1
c000629b:	83 d3 00             	adc    ebx,0x0
c000629e:	83 c6 04             	add    esi,0x4
c00062a1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00062a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00062ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00062af:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062b3:	75 90                	jne    c0006245 <f_getfree+0x124>
c00062b5:	eb 18                	jmp    c00062cf <f_getfree+0x1ae>
c00062b7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062bf:	eb 0e                	jmp    c00062cf <f_getfree+0x1ae>
c00062c1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062c9:	eb 04                	jmp    c00062cf <f_getfree+0x1ae>
c00062cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062cf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062d3:	89 18                	mov    DWORD PTR [eax],ebx
c00062d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062d9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062dc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062e4:	83 c4 5c             	add    esp,0x5c
c00062e7:	5b                   	pop    ebx
c00062e8:	5e                   	pop    esi
c00062e9:	5f                   	pop    edi
c00062ea:	5d                   	pop    ebp
c00062eb:	c3                   	ret    

c00062ec <f_truncate>:
c00062ec:	56                   	push   esi
c00062ed:	53                   	push   ebx
c00062ee:	83 ec 14             	sub    esp,0x14
c00062f1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062f5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062f9:	89 d8                	mov    eax,ebx
c00062fb:	e8 6e bf ff ff       	call   c000226e <validate>
c0006300:	89 c6                	mov    esi,eax
c0006302:	85 c0                	test   eax,eax
c0006304:	0f 85 d2 00 00 00    	jne    c00063dc <f_truncate+0xf0>
c000630a:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000630e:	85 f6                	test   esi,esi
c0006310:	0f 85 c6 00 00 00    	jne    c00063dc <f_truncate+0xf0>
c0006316:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000631a:	0f 84 b7 00 00 00    	je     c00063d7 <f_truncate+0xeb>
c0006320:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006323:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006326:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006329:	89 d1                	mov    ecx,edx
c000632b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000632e:	0f 83 a8 00 00 00    	jae    c00063dc <f_truncate+0xf0>
c0006334:	09 c2                	or     edx,eax
c0006336:	75 15                	jne    c000634d <f_truncate+0x61>
c0006338:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000633b:	31 c9                	xor    ecx,ecx
c000633d:	89 d8                	mov    eax,ebx
c000633f:	e8 7a d0 ff ff       	call   c00033be <remove_chain>
c0006344:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000634b:	eb 35                	jmp    c0006382 <f_truncate+0x96>
c000634d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006350:	89 d8                	mov    eax,ebx
c0006352:	e8 7a cb ff ff       	call   c0002ed1 <get_fat>
c0006357:	89 c2                	mov    edx,eax
c0006359:	b8 01 00 00 00       	mov    eax,0x1
c000635e:	83 fa ff             	cmp    edx,0xffffffff
c0006361:	74 1f                	je     c0006382 <f_truncate+0x96>
c0006363:	b8 02 00 00 00       	mov    eax,0x2
c0006368:	83 fa 01             	cmp    edx,0x1
c000636b:	74 15                	je     c0006382 <f_truncate+0x96>
c000636d:	31 c0                	xor    eax,eax
c000636f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006373:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006376:	76 0a                	jbe    c0006382 <f_truncate+0x96>
c0006378:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000637b:	89 d8                	mov    eax,ebx
c000637d:	e8 3c d0 ff ff       	call   c00033be <remove_chain>
c0006382:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006385:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006388:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000638b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000638e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006391:	83 ca 40             	or     edx,0x40
c0006394:	85 c0                	test   eax,eax
c0006396:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006399:	75 35                	jne    c00063d0 <f_truncate+0xe4>
c000639b:	84 d2                	test   dl,dl
c000639d:	79 3d                	jns    c00063dc <f_truncate+0xf0>
c000639f:	83 ec 0c             	sub    esp,0xc
c00063a2:	8d 43 50             	lea    eax,[ebx+0x50]
c00063a5:	6a 01                	push   0x1
c00063a7:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00063aa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00063ad:	50                   	push   eax
c00063ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063b2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063b6:	50                   	push   eax
c00063b7:	e8 7a b7 ff ff       	call   c0001b36 <disk_write>
c00063bc:	83 c4 20             	add    esp,0x20
c00063bf:	85 c0                	test   eax,eax
c00063c1:	75 08                	jne    c00063cb <f_truncate+0xdf>
c00063c3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063c7:	31 f6                	xor    esi,esi
c00063c9:	eb 11                	jmp    c00063dc <f_truncate+0xf0>
c00063cb:	b8 01 00 00 00       	mov    eax,0x1
c00063d0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063d3:	89 c6                	mov    esi,eax
c00063d5:	eb 05                	jmp    c00063dc <f_truncate+0xf0>
c00063d7:	be 07 00 00 00       	mov    esi,0x7
c00063dc:	89 f0                	mov    eax,esi
c00063de:	83 c4 14             	add    esp,0x14
c00063e1:	5b                   	pop    ebx
c00063e2:	5e                   	pop    esi
c00063e3:	c3                   	ret    

c00063e4 <f_unlink>:
c00063e4:	56                   	push   esi
c00063e5:	b9 02 00 00 00       	mov    ecx,0x2
c00063ea:	53                   	push   ebx
c00063eb:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063f1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063f5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063fc:	e8 fa c1 ff ff       	call   c00025fb <mount_volume>
c0006401:	85 c0                	test   eax,eax
c0006403:	0f 85 55 01 00 00    	jne    c000655e <f_unlink+0x17a>
c0006409:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000640d:	83 ec 0c             	sub    esp,0xc
c0006410:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006414:	68 60 04 00 00       	push   0x460
c0006419:	e8 b6 21 00 00       	call   c00085d4 <ff_memalloc>
c000641e:	83 c4 10             	add    esp,0x10
c0006421:	89 c3                	mov    ebx,eax
c0006423:	b8 11 00 00 00       	mov    eax,0x11
c0006428:	85 db                	test   ebx,ebx
c000642a:	0f 84 2e 01 00 00    	je     c000655e <f_unlink+0x17a>
c0006430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006434:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000643a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000643d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006440:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006447:	8d 44 24 48          	lea    eax,[esp+0x48]
c000644b:	e8 21 e9 ff ff       	call   c0004d71 <follow_path>
c0006450:	85 c0                	test   eax,eax
c0006452:	0f 85 f2 00 00 00    	jne    c000654a <f_unlink+0x166>
c0006458:	b8 06 00 00 00       	mov    eax,0x6
c000645d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006465:	0f 88 df 00 00 00    	js     c000654a <f_unlink+0x166>
c000646b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006470:	74 0a                	je     c000647c <f_unlink+0x98>
c0006472:	b8 07 00 00 00       	mov    eax,0x7
c0006477:	e9 ce 00 00 00       	jmp    c000654a <f_unlink+0x166>
c000647c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006480:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006484:	8a 02                	mov    al,BYTE PTR [edx]
c0006486:	3c 04                	cmp    al,0x4
c0006488:	75 12                	jne    c000649c <f_unlink+0xb8>
c000648a:	8d 42 10             	lea    eax,[edx+0x10]
c000648d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006491:	e8 a1 e8 ff ff       	call   c0004d37 <init_alloc_info.isra.2>
c0006496:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000649a:	eb 0e                	jmp    c00064aa <f_unlink+0xc6>
c000649c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00064a3:	e8 3e e8 ff ff       	call   c0004ce6 <ld_clust.isra.0>
c00064a8:	89 c6                	mov    esi,eax
c00064aa:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00064af:	75 12                	jne    c00064c3 <f_unlink+0xdf>
c00064b1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064b5:	e8 94 d6 ff ff       	call   c0003b4e <dir_remove>
c00064ba:	85 c0                	test   eax,eax
c00064bc:	74 6c                	je     c000652a <f_unlink+0x146>
c00064be:	e9 87 00 00 00       	jmp    c000654a <f_unlink+0x166>
c00064c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064ce:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064d5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064d8:	75 21                	jne    c00064fb <f_unlink+0x117>
c00064da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064de:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064e2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064e9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064f0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064f4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064fb:	31 d2                	xor    edx,edx
c00064fd:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006504:	e8 be cb ff ff       	call   c00030c7 <dir_sdi>
c0006509:	85 c0                	test   eax,eax
c000650b:	75 3d                	jne    c000654a <f_unlink+0x166>
c000650d:	31 d2                	xor    edx,edx
c000650f:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006516:	e8 bc d3 ff ff       	call   c00038d7 <dir_read>
c000651b:	85 c0                	test   eax,eax
c000651d:	0f 84 4f ff ff ff    	je     c0006472 <f_unlink+0x8e>
c0006523:	83 f8 04             	cmp    eax,0x4
c0006526:	75 22                	jne    c000654a <f_unlink+0x166>
c0006528:	eb 87                	jmp    c00064b1 <f_unlink+0xcd>
c000652a:	85 f6                	test   esi,esi
c000652c:	75 0b                	jne    c0006539 <f_unlink+0x155>
c000652e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006532:	e8 3d df ff ff       	call   c0004474 <sync_fs>
c0006537:	eb 11                	jmp    c000654a <f_unlink+0x166>
c0006539:	31 c9                	xor    ecx,ecx
c000653b:	89 f2                	mov    edx,esi
c000653d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006541:	e8 78 ce ff ff       	call   c00033be <remove_chain>
c0006546:	85 c0                	test   eax,eax
c0006548:	74 e4                	je     c000652e <f_unlink+0x14a>
c000654a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000654e:	83 ec 0c             	sub    esp,0xc
c0006551:	53                   	push   ebx
c0006552:	e8 95 20 00 00       	call   c00085ec <ff_memfree>
c0006557:	83 c4 10             	add    esp,0x10
c000655a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000655e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006564:	5b                   	pop    ebx
c0006565:	5e                   	pop    esi
c0006566:	c3                   	ret    

c0006567 <f_mkdir>:
c0006567:	57                   	push   edi
c0006568:	b9 02 00 00 00       	mov    ecx,0x2
c000656d:	56                   	push   esi
c000656e:	53                   	push   ebx
c000656f:	83 c4 80             	add    esp,0xffffff80
c0006572:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006576:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000657d:	e8 79 c0 ff ff       	call   c00025fb <mount_volume>
c0006582:	89 c3                	mov    ebx,eax
c0006584:	85 c0                	test   eax,eax
c0006586:	0f 85 fe 01 00 00    	jne    c000678a <f_mkdir+0x223>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	bb 11 00 00 00       	mov    ebx,0x11
c0006595:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006599:	83 ec 0c             	sub    esp,0xc
c000659c:	68 60 04 00 00       	push   0x460
c00065a1:	e8 2e 20 00 00       	call   c00085d4 <ff_memalloc>
c00065a6:	83 c4 10             	add    esp,0x10
c00065a9:	89 c7                	mov    edi,eax
c00065ab:	85 c0                	test   eax,eax
c00065ad:	0f 84 d7 01 00 00    	je     c000678a <f_mkdir+0x223>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065bd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065c0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065c3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ca:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065ce:	e8 9e e7 ff ff       	call   c0004d71 <follow_path>
c00065d3:	89 c3                	mov    ebx,eax
c00065d5:	85 c0                	test   eax,eax
c00065d7:	74 3e                	je     c0006617 <f_mkdir+0xb0>
c00065d9:	83 f8 04             	cmp    eax,0x4
c00065dc:	75 3e                	jne    c000661c <f_mkdir+0xb5>
c00065de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065e2:	31 d2                	xor    edx,edx
c00065e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065ec:	e8 ce cb ff ff       	call   c00031bf <create_chain>
c00065f1:	89 c6                	mov    esi,eax
c00065f3:	85 c0                	test   eax,eax
c00065f5:	74 0c                	je     c0006603 <f_mkdir+0x9c>
c00065f7:	bb 02 00 00 00       	mov    ebx,0x2
c00065fc:	83 f8 01             	cmp    eax,0x1
c00065ff:	74 07                	je     c0006608 <f_mkdir+0xa1>
c0006601:	eb 2a                	jmp    c000662d <f_mkdir+0xc6>
c0006603:	bb 07 00 00 00       	mov    ebx,0x7
c0006608:	31 c9                	xor    ecx,ecx
c000660a:	89 f2                	mov    edx,esi
c000660c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006610:	e8 a9 cd ff ff       	call   c00033be <remove_chain>
c0006615:	eb 05                	jmp    c000661c <f_mkdir+0xb5>
c0006617:	bb 08 00 00 00       	mov    ebx,0x8
c000661c:	83 ec 0c             	sub    esp,0xc
c000661f:	57                   	push   edi
c0006620:	e8 c7 1f 00 00       	call   c00085ec <ff_memfree>
c0006625:	83 c4 10             	add    esp,0x10
c0006628:	e9 5d 01 00 00       	jmp    c000678a <f_mkdir+0x223>
c000662d:	bb 01 00 00 00       	mov    ebx,0x1
c0006632:	83 f8 ff             	cmp    eax,0xffffffff
c0006635:	74 d1                	je     c0006608 <f_mkdir+0xa1>
c0006637:	89 f2                	mov    edx,esi
c0006639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663d:	e8 c4 ce ff ff       	call   c0003506 <dir_clear>
c0006642:	89 c3                	mov    ebx,eax
c0006644:	85 c0                	test   eax,eax
c0006646:	75 c0                	jne    c0006608 <f_mkdir+0xa1>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000664f:	74 69                	je     c00066ba <f_mkdir+0x153>
c0006651:	b9 0b 00 00 00       	mov    ecx,0xb
c0006656:	83 c0 54             	add    eax,0x54
c0006659:	ba 20 00 00 00       	mov    edx,0x20
c000665e:	e8 9c b5 ff ff       	call   c0001bff <mem_set>
c0006663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006667:	ba 00 00 21 50       	mov    edx,0x50210000
c000666c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006670:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006674:	83 c0 6a             	add    eax,0x6a
c0006677:	e8 65 b5 ff ff       	call   c0001be1 <st_dword>
c000667c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006680:	89 f1                	mov    ecx,esi
c0006682:	8d 50 54             	lea    edx,[eax+0x54]
c0006685:	e8 85 e6 ff ff       	call   c0004d0f <st_clust.isra.1>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	b9 20 00 00 00       	mov    ecx,0x20
c0006693:	8d 50 54             	lea    edx,[eax+0x54]
c0006696:	83 c0 74             	add    eax,0x74
c0006699:	e8 4c b5 ff ff       	call   c0001bea <mem_cpy>
c000669e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a2:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00066a6:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00066aa:	8d 50 74             	lea    edx,[eax+0x74]
c00066ad:	e8 5d e6 ff ff       	call   c0004d0f <st_clust.isra.1>
c00066b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066be:	e8 2f db ff ff       	call   c00041f2 <dir_register>
c00066c3:	89 c3                	mov    ebx,eax
c00066c5:	85 c0                	test   eax,eax
c00066c7:	0f 85 3b ff ff ff    	jne    c0006608 <f_mkdir+0xa1>
c00066cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d4:	75 74                	jne    c000674a <f_mkdir+0x1e3>
c00066d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066d9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066de:	83 c0 0c             	add    eax,0xc
c00066e1:	e8 fb b4 ff ff       	call   c0001be1 <st_dword>
c00066e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ea:	89 f2                	mov    edx,esi
c00066ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066ef:	83 c0 34             	add    eax,0x34
c00066f2:	e8 ea b4 ff ff       	call   c0001be1 <st_dword>
c00066f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066fb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006702:	c1 e2 09             	shl    edx,0x9
c0006705:	83 c0 38             	add    eax,0x38
c0006708:	e8 d4 b4 ff ff       	call   c0001be1 <st_dword>
c000670d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006711:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006715:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006718:	c1 e2 09             	shl    edx,0x9
c000671b:	83 c0 28             	add    eax,0x28
c000671e:	e8 be b4 ff ff       	call   c0001be1 <st_dword>
c0006723:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006727:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000672a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000672e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006731:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006735:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006739:	e8 8b d3 ff ff       	call   c0003ac9 <store_xdir>
c000673e:	89 c3                	mov    ebx,eax
c0006740:	85 c0                	test   eax,eax
c0006742:	0f 85 d4 fe ff ff    	jne    c000661c <f_mkdir+0xb5>
c0006748:	eb 30                	jmp    c000677a <f_mkdir+0x213>
c000674a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000674e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006753:	83 c0 16             	add    eax,0x16
c0006756:	e8 86 b4 ff ff       	call   c0001be1 <st_dword>
c000675b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675f:	89 f1                	mov    ecx,esi
c0006761:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006765:	e8 a5 e5 ff ff       	call   c0004d0f <st_clust.isra.1>
c000676a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000676e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000677a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677e:	e8 f1 dc ff ff       	call   c0004474 <sync_fs>
c0006783:	89 c3                	mov    ebx,eax
c0006785:	e9 92 fe ff ff       	jmp    c000661c <f_mkdir+0xb5>
c000678a:	83 ec 80             	sub    esp,0xffffff80
c000678d:	89 d8                	mov    eax,ebx
c000678f:	5b                   	pop    ebx
c0006790:	5e                   	pop    esi
c0006791:	5f                   	pop    edi
c0006792:	c3                   	ret    

c0006793 <f_rename>:
c0006793:	55                   	push   ebp
c0006794:	57                   	push   edi
c0006795:	56                   	push   esi
c0006796:	53                   	push   ebx
c0006797:	81 ec fc 00 00 00    	sub    esp,0xfc
c000679d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00067a4:	e8 a4 b9 ff ff       	call   c000214d <get_ldnumber>
c00067a9:	b9 02 00 00 00       	mov    ecx,0x2
c00067ae:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067b2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067b9:	e8 3d be ff ff       	call   c00025fb <mount_volume>
c00067be:	85 c0                	test   eax,eax
c00067c0:	0f 85 b5 02 00 00    	jne    c0006a7b <f_rename+0x2e8>
c00067c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ca:	83 ec 0c             	sub    esp,0xc
c00067cd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067d1:	68 60 04 00 00       	push   0x460
c00067d6:	e8 f9 1d 00 00       	call   c00085d4 <ff_memalloc>
c00067db:	83 c4 10             	add    esp,0x10
c00067de:	89 c3                	mov    ebx,eax
c00067e0:	b8 11 00 00 00       	mov    eax,0x11
c00067e5:	85 db                	test   ebx,ebx
c00067e7:	0f 84 8e 02 00 00    	je     c0006a7b <f_rename+0x2e8>
c00067ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067f1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067f7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067fa:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067fd:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006804:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006808:	e8 64 e5 ff ff       	call   c0004d71 <follow_path>
c000680d:	85 c0                	test   eax,eax
c000680f:	0f 85 52 02 00 00    	jne    c0006a67 <f_rename+0x2d4>
c0006815:	b8 06 00 00 00       	mov    eax,0x6
c000681a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006822:	0f 85 3f 02 00 00    	jne    c0006a67 <f_rename+0x2d4>
c0006828:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000682c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000682f:	0f 85 05 01 00 00    	jne    c000693a <f_rename+0x1a7>
c0006835:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006838:	b9 40 00 00 00       	mov    ecx,0x40
c000683d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006841:	e8 a4 b3 ff ff       	call   c0001bea <mem_cpy>
c0006846:	b9 4c 00 00 00       	mov    ecx,0x4c
c000684b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000684f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006856:	e8 8f b3 ff ff       	call   c0001bea <mem_cpy>
c000685b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006862:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006869:	e8 03 e5 ff ff       	call   c0004d71 <follow_path>
c000686e:	85 c0                	test   eax,eax
c0006870:	75 29                	jne    c000689b <f_rename+0x108>
c0006872:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006876:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000687d:	74 0a                	je     c0006889 <f_rename+0xf6>
c000687f:	b8 08 00 00 00       	mov    eax,0x8
c0006884:	e9 de 01 00 00       	jmp    c0006a67 <f_rename+0x2d4>
c0006889:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006890:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006897:	75 e6                	jne    c000687f <f_rename+0xec>
c0006899:	eb 09                	jmp    c00068a4 <f_rename+0x111>
c000689b:	83 f8 04             	cmp    eax,0x4
c000689e:	0f 85 c3 01 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00068a4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00068ab:	e8 42 d9 ff ff       	call   c00041f2 <dir_register>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	0f 85 af 01 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00068b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068bc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068bf:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068c2:	89 c5                	mov    ebp,eax
c00068c4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068cb:	8d 46 24             	lea    eax,[esi+0x24]
c00068ce:	e8 98 b2 ff ff       	call   c0001b6b <ld_word>
c00068d3:	b9 40 00 00 00       	mov    ecx,0x40
c00068d8:	89 c7                	mov    edi,eax
c00068da:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068de:	89 f0                	mov    eax,esi
c00068e0:	e8 05 b3 ff ff       	call   c0001bea <mem_cpy>
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	89 e9                	mov    ecx,ebp
c00068eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ee:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068f1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068fc:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ff:	0f b7 d7             	movzx  edx,di
c0006902:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006905:	83 c0 24             	add    eax,0x24
c0006908:	e8 d0 b2 ff ff       	call   c0001bdd <st_word>
c000690d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006911:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006914:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006917:	a8 10                	test   al,0x10
c0006919:	75 06                	jne    c0006921 <f_rename+0x18e>
c000691b:	83 c8 20             	or     eax,0x20
c000691e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006921:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006928:	e8 9c d1 ff ff       	call   c0003ac9 <store_xdir>
c000692d:	85 c0                	test   eax,eax
c000692f:	0f 84 1c 01 00 00    	je     c0006a51 <f_rename+0x2be>
c0006935:	e9 2d 01 00 00       	jmp    c0006a67 <f_rename+0x2d4>
c000693a:	b9 20 00 00 00       	mov    ecx,0x20
c000693f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006946:	8d 44 24 18          	lea    eax,[esp+0x18]
c000694a:	e8 9b b2 ff ff       	call   c0001bea <mem_cpy>
c000694f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006954:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 86 b2 ff ff       	call   c0001bea <mem_cpy>
c0006964:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000696b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006972:	e8 fa e3 ff ff       	call   c0004d71 <follow_path>
c0006977:	85 c0                	test   eax,eax
c0006979:	75 27                	jne    c00069a2 <f_rename+0x20f>
c000697b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000697f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006986:	0f 85 f3 fe ff ff    	jne    c000687f <f_rename+0xec>
c000698c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006993:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000699a:	0f 85 df fe ff ff    	jne    c000687f <f_rename+0xec>
c00069a0:	eb 09                	jmp    c00069ab <f_rename+0x218>
c00069a2:	83 f8 04             	cmp    eax,0x4
c00069a5:	0f 85 bc 00 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00069ab:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069b2:	e8 3b d8 ff ff       	call   c00041f2 <dir_register>
c00069b7:	85 c0                	test   eax,eax
c00069b9:	0f 85 a8 00 00 00    	jne    c0006a67 <f_rename+0x2d4>
c00069bf:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069c6:	b9 13 00 00 00       	mov    ecx,0x13
c00069cb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069ce:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069d2:	e8 13 b2 ff ff       	call   c0001bea <mem_cpy>
c00069d7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069db:	a8 10                	test   al,0x10
c00069dd:	75 03                	jne    c00069e2 <f_rename+0x24f>
c00069df:	83 c8 20             	or     eax,0x20
c00069e2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069ed:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069f1:	74 5e                	je     c0006a51 <f_rename+0x2be>
c00069f3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069fa:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069fe:	74 51                	je     c0006a51 <f_rename+0x2be>
c0006a00:	89 f2                	mov    edx,esi
c0006a02:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006a06:	8a 07                	mov    al,BYTE PTR [edi]
c0006a08:	e8 d9 e2 ff ff       	call   c0004ce6 <ld_clust.isra.0>
c0006a0d:	89 c2                	mov    edx,eax
c0006a0f:	89 f8                	mov    eax,edi
c0006a11:	e8 ee b3 ff ff       	call   c0001e04 <clst2sect>
c0006a16:	89 c6                	mov    esi,eax
c0006a18:	89 d1                	mov    ecx,edx
c0006a1a:	b8 02 00 00 00       	mov    eax,0x2
c0006a1f:	09 f2                	or     edx,esi
c0006a21:	74 44                	je     c0006a67 <f_rename+0x2d4>
c0006a23:	89 f2                	mov    edx,esi
c0006a25:	89 f8                	mov    eax,edi
c0006a27:	e8 1d b9 ff ff       	call   c0002349 <move_window>
c0006a2c:	85 c0                	test   eax,eax
c0006a2e:	75 37                	jne    c0006a67 <f_rename+0x2d4>
c0006a30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a34:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a38:	75 17                	jne    c0006a51 <f_rename+0x2be>
c0006a3a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a3d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a44:	e8 c6 e2 ff ff       	call   c0004d0f <st_clust.isra.1>
c0006a49:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a51:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a55:	e8 f4 d0 ff ff       	call   c0003b4e <dir_remove>
c0006a5a:	85 c0                	test   eax,eax
c0006a5c:	75 09                	jne    c0006a67 <f_rename+0x2d4>
c0006a5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a62:	e8 0d da ff ff       	call   c0004474 <sync_fs>
c0006a67:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a6b:	83 ec 0c             	sub    esp,0xc
c0006a6e:	53                   	push   ebx
c0006a6f:	e8 78 1b 00 00       	call   c00085ec <ff_memfree>
c0006a74:	83 c4 10             	add    esp,0x10
c0006a77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a7b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a81:	5b                   	pop    ebx
c0006a82:	5e                   	pop    esi
c0006a83:	5f                   	pop    edi
c0006a84:	5d                   	pop    ebp
c0006a85:	c3                   	ret    

c0006a86 <f_chmod>:
c0006a86:	57                   	push   edi
c0006a87:	b9 02 00 00 00       	mov    ecx,0x2
c0006a8c:	56                   	push   esi
c0006a8d:	53                   	push   ebx
c0006a8e:	83 ec 60             	sub    esp,0x60
c0006a91:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a95:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a99:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a9d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006aa1:	e8 55 bb ff ff       	call   c00025fb <mount_volume>
c0006aa6:	85 c0                	test   eax,eax
c0006aa8:	0f 85 af 00 00 00    	jne    c0006b5d <f_chmod+0xd7>
c0006aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab2:	83 ec 0c             	sub    esp,0xc
c0006ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006ab9:	68 60 04 00 00       	push   0x460
c0006abe:	e8 11 1b 00 00       	call   c00085d4 <ff_memalloc>
c0006ac3:	83 c4 10             	add    esp,0x10
c0006ac6:	89 c6                	mov    esi,eax
c0006ac8:	b8 11 00 00 00       	mov    eax,0x11
c0006acd:	85 f6                	test   esi,esi
c0006acf:	0f 84 88 00 00 00    	je     c0006b5d <f_chmod+0xd7>
c0006ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006adf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ae2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ae5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ae9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aed:	e8 7f e2 ff ff       	call   c0004d71 <follow_path>
c0006af2:	85 c0                	test   eax,eax
c0006af4:	75 53                	jne    c0006b49 <f_chmod+0xc3>
c0006af6:	b8 06 00 00 00       	mov    eax,0x6
c0006afb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006b00:	75 47                	jne    c0006b49 <f_chmod+0xc3>
c0006b02:	89 f9                	mov    ecx,edi
c0006b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b08:	83 e1 27             	and    ecx,0x27
c0006b0b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b0e:	75 1d                	jne    c0006b2d <f_chmod+0xa7>
c0006b10:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b13:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b16:	21 cb                	and    ebx,ecx
c0006b18:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b1b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b1e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b22:	e8 a2 cf ff ff       	call   c0003ac9 <store_xdir>
c0006b27:	85 c0                	test   eax,eax
c0006b29:	75 1e                	jne    c0006b49 <f_chmod+0xc3>
c0006b2b:	eb 13                	jmp    c0006b40 <f_chmod+0xba>
c0006b2d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b31:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b34:	21 cb                	and    ebx,ecx
c0006b36:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b39:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b3c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b44:	e8 2b d9 ff ff       	call   c0004474 <sync_fs>
c0006b49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b4d:	83 ec 0c             	sub    esp,0xc
c0006b50:	56                   	push   esi
c0006b51:	e8 96 1a 00 00       	call   c00085ec <ff_memfree>
c0006b56:	83 c4 10             	add    esp,0x10
c0006b59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b5d:	83 c4 60             	add    esp,0x60
c0006b60:	5b                   	pop    ebx
c0006b61:	5e                   	pop    esi
c0006b62:	5f                   	pop    edi
c0006b63:	c3                   	ret    

c0006b64 <f_utime>:
c0006b64:	56                   	push   esi
c0006b65:	b9 02 00 00 00       	mov    ecx,0x2
c0006b6a:	53                   	push   ebx
c0006b6b:	83 ec 64             	sub    esp,0x64
c0006b6e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b72:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b76:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b7a:	e8 7c ba ff ff       	call   c00025fb <mount_volume>
c0006b7f:	85 c0                	test   eax,eax
c0006b81:	0f 85 b5 00 00 00    	jne    c0006c3c <f_utime+0xd8>
c0006b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b8b:	83 ec 0c             	sub    esp,0xc
c0006b8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b92:	68 60 04 00 00       	push   0x460
c0006b97:	e8 38 1a 00 00       	call   c00085d4 <ff_memalloc>
c0006b9c:	83 c4 10             	add    esp,0x10
c0006b9f:	89 c3                	mov    ebx,eax
c0006ba1:	b8 11 00 00 00       	mov    eax,0x11
c0006ba6:	85 db                	test   ebx,ebx
c0006ba8:	0f 84 8e 00 00 00    	je     c0006c3c <f_utime+0xd8>
c0006bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006bb8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bbb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bbe:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bc2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bc6:	e8 a6 e1 ff ff       	call   c0004d71 <follow_path>
c0006bcb:	85 c0                	test   eax,eax
c0006bcd:	75 59                	jne    c0006c28 <f_utime+0xc4>
c0006bcf:	b8 06 00 00 00       	mov    eax,0x6
c0006bd4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bd9:	75 4d                	jne    c0006c28 <f_utime+0xc4>
c0006bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bdf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006be3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006be7:	c1 e2 10             	shl    edx,0x10
c0006bea:	09 ca                	or     edx,ecx
c0006bec:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bef:	75 1a                	jne    c0006c0b <f_utime+0xa7>
c0006bf1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bf4:	83 c0 0c             	add    eax,0xc
c0006bf7:	e8 e5 af ff ff       	call   c0001be1 <st_dword>
c0006bfc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c00:	e8 c4 ce ff ff       	call   c0003ac9 <store_xdir>
c0006c05:	85 c0                	test   eax,eax
c0006c07:	75 1f                	jne    c0006c28 <f_utime+0xc4>
c0006c09:	eb 14                	jmp    c0006c1f <f_utime+0xbb>
c0006c0b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006c0f:	83 c0 16             	add    eax,0x16
c0006c12:	e8 ca af ff ff       	call   c0001be1 <st_dword>
c0006c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c23:	e8 4c d8 ff ff       	call   c0004474 <sync_fs>
c0006c28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c2c:	83 ec 0c             	sub    esp,0xc
c0006c2f:	53                   	push   ebx
c0006c30:	e8 b7 19 00 00       	call   c00085ec <ff_memfree>
c0006c35:	83 c4 10             	add    esp,0x10
c0006c38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c3c:	83 c4 64             	add    esp,0x64
c0006c3f:	5b                   	pop    ebx
c0006c40:	5e                   	pop    esi
c0006c41:	c3                   	ret    

c0006c42 <f_getlabel>:
c0006c42:	55                   	push   ebp
c0006c43:	31 c9                	xor    ecx,ecx
c0006c45:	57                   	push   edi
c0006c46:	56                   	push   esi
c0006c47:	53                   	push   ebx
c0006c48:	83 ec 6c             	sub    esp,0x6c
c0006c4b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c4f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c56:	e8 a0 b9 ff ff       	call   c00025fb <mount_volume>
c0006c5b:	89 c6                	mov    esi,eax
c0006c5d:	85 c0                	test   eax,eax
c0006c5f:	0f 85 c1 01 00 00    	jne    c0006e26 <f_getlabel+0x1e4>
c0006c65:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c6d:	0f 84 5f 01 00 00    	je     c0006dd2 <f_getlabel+0x190>
c0006c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c77:	31 d2                	xor    edx,edx
c0006c79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c7d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c85:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c89:	e8 39 c4 ff ff       	call   c00030c7 <dir_sdi>
c0006c8e:	85 c0                	test   eax,eax
c0006c90:	0f 85 2d 01 00 00    	jne    c0006dc3 <f_getlabel+0x181>
c0006c96:	ba 01 00 00 00       	mov    edx,0x1
c0006c9b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c9f:	e8 33 cc ff ff       	call   c00038d7 <dir_read>
c0006ca4:	85 c0                	test   eax,eax
c0006ca6:	0f 85 17 01 00 00    	jne    c0006dc3 <f_getlabel+0x181>
c0006cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cb3:	74 09                	je     c0006cbe <f_getlabel+0x7c>
c0006cb5:	31 db                	xor    ebx,ebx
c0006cb7:	31 c9                	xor    ecx,ecx
c0006cb9:	e9 c8 00 00 00       	jmp    c0006d86 <f_getlabel+0x144>
c0006cbe:	31 ed                	xor    ebp,ebp
c0006cc0:	31 db                	xor    ebx,ebx
c0006cc2:	31 ff                	xor    edi,edi
c0006cc4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cc8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006ccc:	39 fa                	cmp    edx,edi
c0006cce:	76 4b                	jbe    c0006d1b <f_getlabel+0xd9>
c0006cd0:	47                   	inc    edi
c0006cd1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cd4:	01 d0                	add    eax,edx
c0006cd6:	e8 90 ae ff ff       	call   c0001b6b <ld_word>
c0006cdb:	66 85 ed             	test   bp,bp
c0006cde:	75 0d                	jne    c0006ced <f_getlabel+0xab>
c0006ce0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ce6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006ceb:	76 28                	jbe    c0006d15 <f_getlabel+0xd3>
c0006ced:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006cf4:	89 e9                	mov    ecx,ebp
c0006cf6:	01 da                	add    edx,ebx
c0006cf8:	c1 e1 10             	shl    ecx,0x10
c0006cfb:	0f b7 c0             	movzx  eax,ax
c0006cfe:	09 c8                	or     eax,ecx
c0006d00:	b9 04 00 00 00       	mov    ecx,0x4
c0006d05:	e8 01 b0 ff ff       	call   c0001d0b <put_utf>
c0006d0a:	84 c0                	test   al,al
c0006d0c:	74 0b                	je     c0006d19 <f_getlabel+0xd7>
c0006d0e:	0f b6 c0             	movzx  eax,al
c0006d11:	01 c3                	add    ebx,eax
c0006d13:	31 c0                	xor    eax,eax
c0006d15:	89 c5                	mov    ebp,eax
c0006d17:	eb ab                	jmp    c0006cc4 <f_getlabel+0x82>
c0006d19:	31 db                	xor    ebx,ebx
c0006d1b:	66 85 ed             	test   bp,bp
c0006d1e:	74 02                	je     c0006d22 <f_getlabel+0xe0>
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d29:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d2d:	e9 a0 00 00 00       	jmp    c0006dd2 <f_getlabel+0x190>
c0006d32:	83 ff 0b             	cmp    edi,0xb
c0006d35:	74 11                	je     c0006d48 <f_getlabel+0x106>
c0006d37:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d40:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d43:	c1 e0 08             	shl    eax,0x8
c0006d46:	09 c2                	or     edx,eax
c0006d48:	0f b7 d2             	movzx  edx,dx
c0006d4b:	50                   	push   eax
c0006d4c:	50                   	push   eax
c0006d4d:	68 b5 01 00 00       	push   0x1b5
c0006d52:	52                   	push   edx
c0006d53:	e8 44 19 00 00       	call   c000869c <ff_oem2uni>
c0006d58:	83 c4 10             	add    esp,0x10
c0006d5b:	66 85 c0             	test   ax,ax
c0006d5e:	74 46                	je     c0006da6 <f_getlabel+0x164>
c0006d60:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d67:	0f b7 c0             	movzx  eax,ax
c0006d6a:	01 da                	add    edx,ebx
c0006d6c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d71:	e8 95 af ff ff       	call   c0001d0b <put_utf>
c0006d76:	84 c0                	test   al,al
c0006d78:	74 2c                	je     c0006da6 <f_getlabel+0x164>
c0006d7a:	0f b6 c0             	movzx  eax,al
c0006d7d:	01 c3                	add    ebx,eax
c0006d7f:	83 ff 0b             	cmp    edi,0xb
c0006d82:	74 24                	je     c0006da8 <f_getlabel+0x166>
c0006d84:	89 f9                	mov    ecx,edi
c0006d86:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d8a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d8d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d92:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d9b:	e8 9f ae ff ff       	call   c0001c3f <dbc_1st>
c0006da0:	85 c0                	test   eax,eax
c0006da2:	74 a4                	je     c0006d48 <f_getlabel+0x106>
c0006da4:	eb 8c                	jmp    c0006d32 <f_getlabel+0xf0>
c0006da6:	31 db                	xor    ebx,ebx
c0006da8:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006daf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006db2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006db9:	74 17                	je     c0006dd2 <f_getlabel+0x190>
c0006dbb:	4b                   	dec    ebx
c0006dbc:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006dbf:	74 ee                	je     c0006daf <f_getlabel+0x16d>
c0006dc1:	eb 0f                	jmp    c0006dd2 <f_getlabel+0x190>
c0006dc3:	83 f8 04             	cmp    eax,0x4
c0006dc6:	75 5c                	jne    c0006e24 <f_getlabel+0x1e2>
c0006dc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dcf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dd2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dda:	74 4a                	je     c0006e26 <f_getlabel+0x1e4>
c0006ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006de0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006de3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006de6:	e8 5e b5 ff ff       	call   c0002349 <move_window>
c0006deb:	89 c6                	mov    esi,eax
c0006ded:	85 c0                	test   eax,eax
c0006def:	75 35                	jne    c0006e26 <f_getlabel+0x1e4>
c0006df1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006df5:	b8 43 00 00 00       	mov    eax,0x43
c0006dfa:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dfc:	80 f9 03             	cmp    cl,0x3
c0006dff:	74 0f                	je     c0006e10 <f_getlabel+0x1ce>
c0006e01:	31 c0                	xor    eax,eax
c0006e03:	80 f9 04             	cmp    cl,0x4
c0006e06:	0f 94 c0             	sete   al
c0006e09:	48                   	dec    eax
c0006e0a:	83 e0 c3             	and    eax,0xffffffc3
c0006e0d:	83 c0 64             	add    eax,0x64
c0006e10:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e14:	e8 5f ad ff ff       	call   c0001b78 <ld_dword>
c0006e19:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e20:	89 07                	mov    DWORD PTR [edi],eax
c0006e22:	eb 02                	jmp    c0006e26 <f_getlabel+0x1e4>
c0006e24:	89 c6                	mov    esi,eax
c0006e26:	83 c4 6c             	add    esp,0x6c
c0006e29:	89 f0                	mov    eax,esi
c0006e2b:	5b                   	pop    ebx
c0006e2c:	5e                   	pop    esi
c0006e2d:	5f                   	pop    edi
c0006e2e:	5d                   	pop    ebp
c0006e2f:	c3                   	ret    

c0006e30 <f_setlabel>:
c0006e30:	56                   	push   esi
c0006e31:	b9 02 00 00 00       	mov    ecx,0x2
c0006e36:	53                   	push   ebx
c0006e37:	83 ec 74             	sub    esp,0x74
c0006e3a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e3e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e45:	e8 b1 b7 ff ff       	call   c00025fb <mount_volume>
c0006e4a:	89 c6                	mov    esi,eax
c0006e4c:	85 c0                	test   eax,eax
c0006e4e:	0f 85 41 02 00 00    	jne    c0007095 <f_setlabel+0x265>
c0006e54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e58:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e5b:	0f 85 8e 00 00 00    	jne    c0006eef <f_setlabel+0xbf>
c0006e61:	b9 16 00 00 00       	mov    ecx,0x16
c0006e66:	31 d2                	xor    edx,edx
c0006e68:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e6c:	31 db                	xor    ebx,ebx
c0006e6e:	e8 8c ad ff ff       	call   c0001bff <mem_set>
c0006e73:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e7a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e7d:	0f 86 0a 01 00 00    	jbe    c0006f8d <f_setlabel+0x15d>
c0006e83:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e8a:	e8 b6 ad ff ff       	call   c0001c45 <tchar2uni>
c0006e8f:	89 c6                	mov    esi,eax
c0006e91:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e96:	76 2a                	jbe    c0006ec2 <f_setlabel+0x92>
c0006e98:	83 f8 ff             	cmp    eax,0xffffffff
c0006e9b:	74 05                	je     c0006ea2 <f_setlabel+0x72>
c0006e9d:	83 fb 09             	cmp    ebx,0x9
c0006ea0:	76 0a                	jbe    c0006eac <f_setlabel+0x7c>
c0006ea2:	be 06 00 00 00       	mov    esi,0x6
c0006ea7:	e9 e9 01 00 00       	jmp    c0007095 <f_setlabel+0x265>
c0006eac:	89 c2                	mov    edx,eax
c0006eae:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006eb2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006eb5:	c1 ea 10             	shr    edx,0x10
c0006eb8:	01 c8                	add    eax,ecx
c0006eba:	43                   	inc    ebx
c0006ebb:	e8 1d ad ff ff       	call   c0001bdd <st_word>
c0006ec0:	eb 04                	jmp    c0006ec6 <f_setlabel+0x96>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	74 dc                	je     c0006ea2 <f_setlabel+0x72>
c0006ec6:	89 f2                	mov    edx,esi
c0006ec8:	b8 d7 40 02 c0       	mov    eax,0xc00240d7
c0006ecd:	e8 5b ad ff ff       	call   c0001c2d <chk_chr>
c0006ed2:	85 c0                	test   eax,eax
c0006ed4:	75 cc                	jne    c0006ea2 <f_setlabel+0x72>
c0006ed6:	83 fb 0a             	cmp    ebx,0xa
c0006ed9:	77 c7                	ja     c0006ea2 <f_setlabel+0x72>
c0006edb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ede:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ee2:	0f b7 d6             	movzx  edx,si
c0006ee5:	01 c8                	add    eax,ecx
c0006ee7:	43                   	inc    ebx
c0006ee8:	e8 f0 ac ff ff       	call   c0001bdd <st_word>
c0006eed:	eb 84                	jmp    c0006e73 <f_setlabel+0x43>
c0006eef:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ef4:	ba 20 00 00 00       	mov    edx,0x20
c0006ef9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006efd:	31 db                	xor    ebx,ebx
c0006eff:	e8 fb ac ff ff       	call   c0001bff <mem_set>
c0006f04:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f0b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f0e:	76 60                	jbe    c0006f70 <f_setlabel+0x140>
c0006f10:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f17:	e8 29 ad ff ff       	call   c0001c45 <tchar2uni>
c0006f1c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f21:	0f 87 7b ff ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0006f27:	83 ec 0c             	sub    esp,0xc
c0006f2a:	50                   	push   eax
c0006f2b:	e8 e0 17 00 00       	call   c0008710 <ff_wtoupper>
c0006f30:	5a                   	pop    edx
c0006f31:	59                   	pop    ecx
c0006f32:	68 b5 01 00 00       	push   0x1b5
c0006f37:	50                   	push   eax
c0006f38:	e8 c7 16 00 00       	call   c0008604 <ff_uni2oem>
c0006f3d:	83 c4 10             	add    esp,0x10
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	66 85 c0             	test   ax,ax
c0006f45:	0f 84 57 ff ff ff    	je     c0006ea2 <f_setlabel+0x72>
c0006f4b:	0f b7 d0             	movzx  edx,ax
c0006f4e:	b8 d0 40 02 c0       	mov    eax,0xc00240d0
c0006f53:	e8 d5 ac ff ff       	call   c0001c2d <chk_chr>
c0006f58:	85 c0                	test   eax,eax
c0006f5a:	0f 85 42 ff ff ff    	jne    c0006ea2 <f_setlabel+0x72>
c0006f60:	66 81 fe ff 00       	cmp    si,0xff
c0006f65:	0f 87 14 01 00 00    	ja     c000707f <f_setlabel+0x24f>
c0006f6b:	e9 fa 00 00 00       	jmp    c000706a <f_setlabel+0x23a>
c0006f70:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f75:	0f 84 27 ff ff ff    	je     c0006ea2 <f_setlabel+0x72>
c0006f7b:	85 db                	test   ebx,ebx
c0006f7d:	74 0e                	je     c0006f8d <f_setlabel+0x15d>
c0006f7f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f82:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f87:	75 04                	jne    c0006f8d <f_setlabel+0x15d>
c0006f89:	89 c3                	mov    ebx,eax
c0006f8b:	eb ee                	jmp    c0006f7b <f_setlabel+0x14b>
c0006f8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f91:	31 d2                	xor    edx,edx
c0006f93:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f97:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fa3:	e8 1f c1 ff ff       	call   c00030c7 <dir_sdi>
c0006fa8:	89 c6                	mov    esi,eax
c0006faa:	85 c0                	test   eax,eax
c0006fac:	0f 85 e3 00 00 00    	jne    c0007095 <f_setlabel+0x265>
c0006fb2:	ba 01 00 00 00       	mov    edx,0x1
c0006fb7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fbb:	e8 17 c9 ff ff       	call   c00038d7 <dir_read>
c0006fc0:	85 c0                	test   eax,eax
c0006fc2:	75 21                	jne    c0006fe5 <f_setlabel+0x1b5>
c0006fc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fc8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fcc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fcf:	74 5d                	je     c000702e <f_setlabel+0x1fe>
c0006fd1:	85 db                	test   ebx,ebx
c0006fd3:	74 0b                	je     c0006fe0 <f_setlabel+0x1b0>
c0006fd5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fda:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fde:	eb 70                	jmp    c0007050 <f_setlabel+0x220>
c0006fe0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fe3:	eb 70                	jmp    c0007055 <f_setlabel+0x225>
c0006fe5:	83 f8 04             	cmp    eax,0x4
c0006fe8:	75 7c                	jne    c0007066 <f_setlabel+0x236>
c0006fea:	85 db                	test   ebx,ebx
c0006fec:	0f 84 a3 00 00 00    	je     c0007095 <f_setlabel+0x265>
c0006ff2:	ba 01 00 00 00       	mov    edx,0x1
c0006ff7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ffb:	e8 51 ca ff ff       	call   c0003a51 <dir_alloc>
c0007000:	89 c6                	mov    esi,eax
c0007002:	85 c0                	test   eax,eax
c0007004:	0f 85 8b 00 00 00    	jne    c0007095 <f_setlabel+0x265>
c000700a:	31 d2                	xor    edx,edx
c000700c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007010:	b9 20 00 00 00       	mov    ecx,0x20
c0007015:	e8 e5 ab ff ff       	call   c0001bff <mem_set>
c000701a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000701e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007021:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007025:	75 18                	jne    c000703f <f_setlabel+0x20f>
c0007027:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000702a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007031:	b9 16 00 00 00       	mov    ecx,0x16
c0007036:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000703a:	83 c0 02             	add    eax,0x2
c000703d:	eb 9b                	jmp    c0006fda <f_setlabel+0x1aa>
c000703f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007043:	b9 0b 00 00 00       	mov    ecx,0xb
c0007048:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000704c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007050:	e8 95 ab ff ff       	call   c0001bea <mem_cpy>
c0007055:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007059:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000705d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007061:	e8 0e d4 ff ff       	call   c0004474 <sync_fs>
c0007066:	89 c6                	mov    esi,eax
c0007068:	eb 2b                	jmp    c0007095 <f_setlabel+0x265>
c000706a:	83 fb 0a             	cmp    ebx,0xa
c000706d:	0f 87 2f fe ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0007073:	89 f0                	mov    eax,esi
c0007075:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007079:	43                   	inc    ebx
c000707a:	e9 85 fe ff ff       	jmp    c0006f04 <f_setlabel+0xd4>
c000707f:	83 fb 09             	cmp    ebx,0x9
c0007082:	0f 87 1a fe ff ff    	ja     c0006ea2 <f_setlabel+0x72>
c0007088:	89 f0                	mov    eax,esi
c000708a:	66 c1 e8 08          	shr    ax,0x8
c000708e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007092:	43                   	inc    ebx
c0007093:	eb de                	jmp    c0007073 <f_setlabel+0x243>
c0007095:	89 f0                	mov    eax,esi
c0007097:	83 c4 74             	add    esp,0x74
c000709a:	5b                   	pop    ebx
c000709b:	5e                   	pop    esi
c000709c:	c3                   	ret    

c000709d <f_expand>:
c000709d:	55                   	push   ebp
c000709e:	57                   	push   edi
c000709f:	56                   	push   esi
c00070a0:	53                   	push   ebx
c00070a1:	83 ec 3c             	sub    esp,0x3c
c00070a4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00070a8:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00070ac:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070b8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070bc:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070c4:	89 d8                	mov    eax,ebx
c00070c6:	e8 a3 b1 ff ff       	call   c000226e <validate>
c00070cb:	89 c5                	mov    ebp,eax
c00070cd:	85 c0                	test   eax,eax
c00070cf:	0f 85 f4 01 00 00    	jne    c00072c9 <f_expand+0x22c>
c00070d5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070d9:	85 ed                	test   ebp,ebp
c00070db:	0f 85 e8 01 00 00    	jne    c00072c9 <f_expand+0x22c>
c00070e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070e5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070e9:	75 0a                	jne    c00070f5 <f_expand+0x58>
c00070eb:	bd 07 00 00 00       	mov    ebp,0x7
c00070f0:	e9 d4 01 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00070f5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070f8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070fb:	75 ee                	jne    c00070eb <f_expand+0x4e>
c00070fd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0007101:	74 e8                	je     c00070eb <f_expand+0x4e>
c0007103:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0007107:	8a 0e                	mov    cl,BYTE PTR [esi]
c0007109:	80 f9 04             	cmp    cl,0x4
c000710c:	74 07                	je     c0007115 <f_expand+0x78>
c000710e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007113:	77 d6                	ja     c00070eb <f_expand+0x4e>
c0007115:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007119:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000711d:	c1 e0 09             	shl    eax,0x9
c0007120:	8d 50 ff             	lea    edx,[eax-0x1]
c0007123:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007127:	0f 95 c2             	setne  dl
c000712a:	0f b6 d2             	movzx  edx,dl
c000712d:	89 d7                	mov    edi,edx
c000712f:	31 d2                	xor    edx,edx
c0007131:	52                   	push   edx
c0007132:	50                   	push   eax
c0007133:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007137:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000713b:	e8 50 bf 01 00       	call   c0023090 <__udivdi3>
c0007140:	83 c4 10             	add    esp,0x10
c0007143:	01 f8                	add    eax,edi
c0007145:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007149:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000714c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007150:	83 ff 01             	cmp    edi,0x1
c0007153:	76 05                	jbe    c000715a <f_expand+0xbd>
c0007155:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007158:	77 05                	ja     c000715f <f_expand+0xc2>
c000715a:	bf 02 00 00 00       	mov    edi,0x2
c000715f:	80 f9 04             	cmp    cl,0x4
c0007162:	75 19                	jne    c000717d <f_expand+0xe0>
c0007164:	89 f0                	mov    eax,esi
c0007166:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000716a:	89 fa                	mov    edx,edi
c000716c:	e8 f3 b9 ff ff       	call   c0002b64 <find_bitmap>
c0007171:	89 c6                	mov    esi,eax
c0007173:	85 c0                	test   eax,eax
c0007175:	0f 84 70 ff ff ff    	je     c00070eb <f_expand+0x4e>
c000717b:	eb 7f                	jmp    c00071fc <f_expand+0x15f>
c000717d:	89 fe                	mov    esi,edi
c000717f:	89 f9                	mov    ecx,edi
c0007181:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007189:	89 ca                	mov    edx,ecx
c000718b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000718f:	89 d8                	mov    eax,ebx
c0007191:	e8 3b bd ff ff       	call   c0002ed1 <get_fat>
c0007196:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000719a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000719e:	41                   	inc    ecx
c000719f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071a3:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c00071a6:	77 05                	ja     c00071ad <f_expand+0x110>
c00071a8:	b9 02 00 00 00       	mov    ecx,0x2
c00071ad:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071b2:	74 3e                	je     c00071f2 <f_expand+0x155>
c00071b4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071b9:	75 0a                	jne    c00071c5 <f_expand+0x128>
c00071bb:	bd 01 00 00 00       	mov    ebp,0x1
c00071c0:	e9 04 01 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00071c5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ca:	75 13                	jne    c00071df <f_expand+0x142>
c00071cc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071d4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071d8:	75 0f                	jne    c00071e9 <f_expand+0x14c>
c00071da:	e9 ce 00 00 00       	jmp    c00072ad <f_expand+0x210>
c00071df:	89 ce                	mov    esi,ecx
c00071e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071e9:	39 f9                	cmp    ecx,edi
c00071eb:	75 9c                	jne    c0007189 <f_expand+0xec>
c00071ed:	e9 f9 fe ff ff       	jmp    c00070eb <f_expand+0x4e>
c00071f2:	bd 02 00 00 00       	mov    ebp,0x2
c00071f7:	e9 cd 00 00 00       	jmp    c00072c9 <f_expand+0x22c>
c00071fc:	83 f8 ff             	cmp    eax,0xffffffff
c00071ff:	74 ba                	je     c00071bb <f_expand+0x11e>
c0007201:	8d 7e ff             	lea    edi,[esi-0x1]
c0007204:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007208:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000720c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007211:	74 51                	je     c0007264 <f_expand+0x1c7>
c0007213:	83 ec 0c             	sub    esp,0xc
c0007216:	89 f2                	mov    edx,esi
c0007218:	6a 01                	push   0x1
c000721a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000721e:	e8 f4 b9 ff ff       	call   c0002c17 <change_bitmap>
c0007223:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007227:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000722b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000722f:	83 c4 10             	add    esp,0x10
c0007232:	85 c0                	test   eax,eax
c0007234:	74 2e                	je     c0007264 <f_expand+0x1c7>
c0007236:	eb 71                	jmp    c00072a9 <f_expand+0x20c>
c0007238:	83 c9 ff             	or     ecx,0xffffffff
c000723b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007240:	74 03                	je     c0007245 <f_expand+0x1a8>
c0007242:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007245:	89 fa                	mov    edx,edi
c0007247:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000724b:	e8 7c ba ff ff       	call   c0002ccc <put_fat>
c0007250:	85 c0                	test   eax,eax
c0007252:	75 55                	jne    c00072a9 <f_expand+0x20c>
c0007254:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007258:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000725c:	47                   	inc    edi
c000725d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007262:	75 d4                	jne    c0007238 <f_expand+0x19b>
c0007264:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007268:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000726c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007271:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007274:	74 53                	je     c00072c9 <f_expand+0x22c>
c0007276:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007279:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000727d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007281:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007285:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007289:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000728c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000728f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007292:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007298:	39 ca                	cmp    edx,ecx
c000729a:	77 2d                	ja     c00072c9 <f_expand+0x22c>
c000729c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c00072a0:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00072a4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00072a7:	eb 20                	jmp    c00072c9 <f_expand+0x22c>
c00072a9:	89 c5                	mov    ebp,eax
c00072ab:	eb 1c                	jmp    c00072c9 <f_expand+0x22c>
c00072ad:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072b2:	74 0c                	je     c00072c0 <f_expand+0x223>
c00072b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072b8:	89 f7                	mov    edi,esi
c00072ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072be:	eb 9d                	jmp    c000725d <f_expand+0x1c0>
c00072c0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072c3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072c7:	eb 9b                	jmp    c0007264 <f_expand+0x1c7>
c00072c9:	83 c4 3c             	add    esp,0x3c
c00072cc:	89 e8                	mov    eax,ebp
c00072ce:	5b                   	pop    ebx
c00072cf:	5e                   	pop    esi
c00072d0:	5f                   	pop    edi
c00072d1:	5d                   	pop    ebp
c00072d2:	c3                   	ret    

c00072d3 <f_forward>:
c00072d3:	55                   	push   ebp
c00072d4:	57                   	push   edi
c00072d5:	56                   	push   esi
c00072d6:	53                   	push   ebx
c00072d7:	83 ec 2c             	sub    esp,0x2c
c00072da:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072de:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072e8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072ec:	89 d8                	mov    eax,ebx
c00072ee:	e8 7b af ff ff       	call   c000226e <validate>
c00072f3:	89 c5                	mov    ebp,eax
c00072f5:	85 c0                	test   eax,eax
c00072f7:	0f 85 aa 01 00 00    	jne    c00074a7 <f_forward+0x1d4>
c00072fd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007301:	85 ed                	test   ebp,ebp
c0007303:	0f 85 9e 01 00 00    	jne    c00074a7 <f_forward+0x1d4>
c0007309:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000730d:	0f 84 8f 01 00 00    	je     c00074a2 <f_forward+0x1cf>
c0007313:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007316:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007319:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000731c:	bf 00 00 00 00       	mov    edi,0x0
c0007321:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007324:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007328:	89 d1                	mov    ecx,edx
c000732a:	19 f9                	sbb    ecx,edi
c000732c:	0f 83 cf 00 00 00    	jae    c0007401 <f_forward+0x12e>
c0007332:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007336:	e9 c6 00 00 00       	jmp    c0007401 <f_forward+0x12e>
c000733b:	50                   	push   eax
c000733c:	50                   	push   eax
c000733d:	6a 00                	push   0x0
c000733f:	6a 00                	push   0x0
c0007341:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007345:	83 c4 10             	add    esp,0x10
c0007348:	85 c0                	test   eax,eax
c000734a:	0f 84 57 01 00 00    	je     c00074a7 <f_forward+0x1d4>
c0007350:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007353:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007357:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000735a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000735e:	89 d7                	mov    edi,edx
c0007360:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007363:	89 c6                	mov    esi,eax
c0007365:	0f ac fe 09          	shrd   esi,edi,0x9
c0007369:	21 ce                	and    esi,ecx
c000736b:	89 c1                	mov    ecx,eax
c000736d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007373:	0f 84 98 00 00 00    	je     c0007411 <f_forward+0x13e>
c0007379:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000737d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007380:	89 c8                	mov    eax,ecx
c0007382:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007386:	e8 79 aa ff ff       	call   c0001e04 <clst2sect>
c000738b:	89 d7                	mov    edi,edx
c000738d:	09 c7                	or     edi,eax
c000738f:	0f 84 9e 00 00 00    	je     c0007433 <f_forward+0x160>
c0007395:	31 ff                	xor    edi,edi
c0007397:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000739a:	01 c6                	add    esi,eax
c000739c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00073a0:	11 d7                	adc    edi,edx
c00073a2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00073a5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00073a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073ac:	39 fa                	cmp    edx,edi
c00073ae:	0f 85 a2 00 00 00    	jne    c0007456 <f_forward+0x183>
c00073b4:	39 f0                	cmp    eax,esi
c00073b6:	0f 85 9a 00 00 00    	jne    c0007456 <f_forward+0x183>
c00073bc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073bf:	ba 00 02 00 00       	mov    edx,0x200
c00073c4:	25 ff 01 00 00       	and    eax,0x1ff
c00073c9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073cd:	29 c2                	sub    edx,eax
c00073cf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073d2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073d5:	39 d1                	cmp    ecx,edx
c00073d7:	76 02                	jbe    c00073db <f_forward+0x108>
c00073d9:	89 d1                	mov    ecx,edx
c00073db:	8d 73 50             	lea    esi,[ebx+0x50]
c00073de:	52                   	push   edx
c00073df:	01 c6                	add    esi,eax
c00073e1:	52                   	push   edx
c00073e2:	51                   	push   ecx
c00073e3:	56                   	push   esi
c00073e4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073e8:	83 c4 10             	add    esp,0x10
c00073eb:	85 c0                	test   eax,eax
c00073ed:	74 44                	je     c0007433 <f_forward+0x160>
c00073ef:	31 ff                	xor    edi,edi
c00073f1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073f4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073f7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073fb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ff:	01 07                	add    DWORD PTR [edi],eax
c0007401:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007406:	0f 85 2f ff ff ff    	jne    c000733b <f_forward+0x68>
c000740c:	e9 96 00 00 00       	jmp    c00074a7 <f_forward+0x1d4>
c0007411:	85 f6                	test   esi,esi
c0007413:	0f 85 60 ff ff ff    	jne    c0007379 <f_forward+0xa6>
c0007419:	89 d7                	mov    edi,edx
c000741b:	09 c7                	or     edi,eax
c000741d:	75 05                	jne    c0007424 <f_forward+0x151>
c000741f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007422:	eb 0a                	jmp    c000742e <f_forward+0x15b>
c0007424:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007427:	89 d8                	mov    eax,ebx
c0007429:	e8 a3 ba ff ff       	call   c0002ed1 <get_fat>
c000742e:	83 f8 01             	cmp    eax,0x1
c0007431:	77 0b                	ja     c000743e <f_forward+0x16b>
c0007433:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007437:	bd 02 00 00 00       	mov    ebp,0x2
c000743c:	eb 69                	jmp    c00074a7 <f_forward+0x1d4>
c000743e:	83 f8 ff             	cmp    eax,0xffffffff
c0007441:	75 0b                	jne    c000744e <f_forward+0x17b>
c0007443:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007447:	bd 01 00 00 00       	mov    ebp,0x1
c000744c:	eb 59                	jmp    c00074a7 <f_forward+0x1d4>
c000744e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007451:	e9 23 ff ff ff       	jmp    c0007379 <f_forward+0xa6>
c0007456:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000745a:	79 20                	jns    c000747c <f_forward+0x1a9>
c000745c:	83 ec 0c             	sub    esp,0xc
c000745f:	6a 01                	push   0x1
c0007461:	52                   	push   edx
c0007462:	50                   	push   eax
c0007463:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007467:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000746b:	50                   	push   eax
c000746c:	e8 c5 a6 ff ff       	call   c0001b36 <disk_write>
c0007471:	83 c4 20             	add    esp,0x20
c0007474:	85 c0                	test   eax,eax
c0007476:	75 cb                	jne    c0007443 <f_forward+0x170>
c0007478:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000747c:	83 ec 0c             	sub    esp,0xc
c000747f:	6a 01                	push   0x1
c0007481:	57                   	push   edi
c0007482:	56                   	push   esi
c0007483:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007487:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000748b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000748f:	50                   	push   eax
c0007490:	e8 8b a6 ff ff       	call   c0001b20 <disk_read>
c0007495:	83 c4 20             	add    esp,0x20
c0007498:	85 c0                	test   eax,eax
c000749a:	0f 84 1c ff ff ff    	je     c00073bc <f_forward+0xe9>
c00074a0:	eb a1                	jmp    c0007443 <f_forward+0x170>
c00074a2:	bd 07 00 00 00       	mov    ebp,0x7
c00074a7:	83 c4 2c             	add    esp,0x2c
c00074aa:	89 e8                	mov    eax,ebp
c00074ac:	5b                   	pop    ebx
c00074ad:	5e                   	pop    esi
c00074ae:	5f                   	pop    edi
c00074af:	5d                   	pop    ebp
c00074b0:	c3                   	ret    

c00074b1 <f_mkfs>:
c00074b1:	55                   	push   ebp
c00074b2:	57                   	push   edi
c00074b3:	56                   	push   esi
c00074b4:	53                   	push   ebx
c00074b5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074ba:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074c0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074c7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074ce:	e8 7a ac ff ff       	call   c000214d <get_ldnumber>
c00074d3:	85 c0                	test   eax,eax
c00074d5:	0f 88 ec 10 00 00    	js     c00085c7 <f_mkfs+0x1116>
c00074db:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c00074e2:	85 d2                	test   edx,edx
c00074e4:	74 03                	je     c00074e9 <f_mkfs+0x38>
c00074e6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074e9:	85 f6                	test   esi,esi
c00074eb:	75 05                	jne    c00074f2 <f_mkfs+0x41>
c00074ed:	be c0 40 02 c0       	mov    esi,0xc00240c0
c00074f2:	83 ec 0c             	sub    esp,0xc
c00074f5:	0f b6 c0             	movzx  eax,al
c00074f8:	bb 03 00 00 00       	mov    ebx,0x3
c00074fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007501:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007505:	e8 13 a6 ff ff       	call   c0001b1d <disk_initialize>
c000750a:	83 c4 10             	add    esp,0x10
c000750d:	a8 01                	test   al,0x1
c000750f:	0f 85 b2 10 00 00    	jne    c00085c7 <f_mkfs+0x1116>
c0007515:	bb 0a 00 00 00       	mov    ebx,0xa
c000751a:	a8 04                	test   al,0x4
c000751c:	0f 85 a5 10 00 00    	jne    c00085c7 <f_mkfs+0x1116>
c0007522:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007525:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007529:	85 c0                	test   eax,eax
c000752b:	75 20                	jne    c000754d <f_mkfs+0x9c>
c000752d:	51                   	push   ecx
c000752e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007532:	50                   	push   eax
c0007533:	6a 03                	push   0x3
c0007535:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007539:	e8 0e a6 ff ff       	call   c0001b4c <disk_ioctl>
c000753e:	83 c4 10             	add    esp,0x10
c0007541:	85 c0                	test   eax,eax
c0007543:	74 08                	je     c000754d <f_mkfs+0x9c>
c0007545:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000754d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007551:	8d 42 ff             	lea    eax,[edx-0x1]
c0007554:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007559:	77 04                	ja     c000755f <f_mkfs+0xae>
c000755b:	85 c2                	test   edx,eax
c000755d:	74 08                	je     c0007567 <f_mkfs+0xb6>
c000755f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007567:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000756a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000756e:	48                   	dec    eax
c000756f:	3c 01                	cmp    al,0x1
c0007571:	76 05                	jbe    c0007578 <f_mkfs+0xc7>
c0007573:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007578:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000757b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000757f:	48                   	dec    eax
c0007580:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007585:	77 07                	ja     c000758e <f_mkfs+0xdd>
c0007587:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000758c:	74 08                	je     c0007596 <f_mkfs+0xe5>
c000758e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007596:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007599:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000759f:	77 07                	ja     c00075a8 <f_mkfs+0xf7>
c00075a1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00075a4:	85 d8                	test   eax,ebx
c00075a6:	74 02                	je     c00075aa <f_mkfs+0xf9>
c00075a8:	31 db                	xor    ebx,ebx
c00075aa:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075b5:	77 0a                	ja     c00075c1 <f_mkfs+0x110>
c00075b7:	bb 11 00 00 00       	mov    ebx,0x11
c00075bc:	e9 06 10 00 00       	jmp    c00085c7 <f_mkfs+0x1116>
c00075c1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075c8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ca:	85 ed                	test   ebp,ebp
c00075cc:	75 1e                	jne    c00075ec <f_mkfs+0x13b>
c00075ce:	83 ec 0c             	sub    esp,0xc
c00075d1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075d8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075dd:	50                   	push   eax
c00075de:	e8 f1 0f 00 00       	call   c00085d4 <ff_memalloc>
c00075e3:	83 c4 10             	add    esp,0x10
c00075e6:	89 c5                	mov    ebp,eax
c00075e8:	85 c0                	test   eax,eax
c00075ea:	74 cb                	je     c00075b7 <f_mkfs+0x106>
c00075ec:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075f4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075fc:	52                   	push   edx
c00075fd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007601:	50                   	push   eax
c0007602:	6a 01                	push   0x1
c0007604:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007608:	e8 3f a5 ff ff       	call   c0001b4c <disk_ioctl>
c000760d:	83 c4 10             	add    esp,0x10
c0007610:	85 c0                	test   eax,eax
c0007612:	0f 85 4a 0f 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007618:	89 f1                	mov    ecx,esi
c000761a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007622:	83 e1 0f             	and    ecx,0xf
c0007625:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000762d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007631:	83 e6 08             	and    esi,0x8
c0007634:	75 56                	jne    c000768c <f_mkfs+0x1db>
c0007636:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000763a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000763e:	83 ff 00             	cmp    edi,0x0
c0007641:	76 20                	jbe    c0007663 <f_mkfs+0x1b2>
c0007643:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007648:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007650:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007656:	83 d7 ff             	adc    edi,0xffffffff
c0007659:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000765d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007661:	eb 21                	jmp    c0007684 <f_mkfs+0x1d3>
c0007663:	ba 3f 00 00 00       	mov    edx,0x3f
c0007668:	39 f2                	cmp    edx,esi
c000766a:	19 f8                	sbb    eax,edi
c000766c:	73 1e                	jae    c000768c <f_mkfs+0x1db>
c000766e:	83 c6 c1             	add    esi,0xffffffc1
c0007671:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007679:	83 d7 ff             	adc    edi,0xffffffff
c000767c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007680:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007684:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000768c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007690:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007694:	89 04 24             	mov    DWORD PTR [esp],eax
c0007697:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000769b:	31 c0                	xor    eax,eax
c000769d:	ba 7f 00 00 00       	mov    edx,0x7f
c00076a2:	89 c7                	mov    edi,eax
c00076a4:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00076a7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00076ab:	0f 83 c5 0a 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c00076b1:	89 df                	mov    edi,ebx
c00076b3:	c1 ef 09             	shr    edi,0x9
c00076b6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076ba:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076c1:	c1 ef 09             	shr    edi,0x9
c00076c4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076c9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076cd:	74 29                	je     c00076f8 <f_mkfs+0x247>
c00076cf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076d5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076da:	0f 97 c2             	seta   dl
c00076dd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076e0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076e4:	0f 92 c0             	setb   al
c00076e7:	08 c2                	or     dl,al
c00076e9:	75 5b                	jne    c0007746 <f_mkfs+0x295>
c00076eb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076ef:	83 e0 07             	and    eax,0x7
c00076f2:	3c 04                	cmp    al,0x4
c00076f4:	74 50                	je     c0007746 <f_mkfs+0x295>
c00076f6:	eb 1b                	jmp    c0007713 <f_mkfs+0x262>
c00076f8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076fd:	0f 87 73 0a 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c0007703:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007709:	76 08                	jbe    c0007713 <f_mkfs+0x262>
c000770b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007713:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007717:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000771b:	83 e0 01             	and    eax,0x1
c000771e:	80 e1 02             	and    cl,0x2
c0007721:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007725:	74 0d                	je     c0007734 <f_mkfs+0x283>
c0007727:	84 c0                	test   al,al
c0007729:	0f 84 53 09 00 00    	je     c0008082 <f_mkfs+0xbd1>
c000772f:	e9 12 08 00 00       	jmp    c0007f46 <f_mkfs+0xa95>
c0007734:	bb 13 00 00 00       	mov    ebx,0x13
c0007739:	84 c0                	test   al,al
c000773b:	0f 85 05 08 00 00    	jne    c0007f46 <f_mkfs+0xa95>
c0007741:	e9 39 0e 00 00       	jmp    c000857f <f_mkfs+0x10ce>
c0007746:	31 c0                	xor    eax,eax
c0007748:	ba ff 0f 00 00       	mov    edx,0xfff
c000774d:	89 c7                	mov    edi,eax
c000774f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007752:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007756:	0f 83 1a 0a 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c000775c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007762:	77 39                	ja     c000779d <f_mkfs+0x2ec>
c0007764:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007769:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007771:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007774:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007778:	73 08                	jae    c0007782 <f_mkfs+0x2d1>
c000777a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007782:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007787:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000778a:	b8 00 00 00 00       	mov    eax,0x0
c000778f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007793:	73 08                	jae    c000779d <f_mkfs+0x2ec>
c0007795:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000779d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00077a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00077a5:	83 c0 20             	add    eax,0x20
c00077a8:	83 d2 00             	adc    edx,0x0
c00077ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077af:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077b7:	31 d2                	xor    edx,edx
c00077b9:	31 ff                	xor    edi,edi
c00077bb:	52                   	push   edx
c00077bc:	89 fb                	mov    ebx,edi
c00077be:	50                   	push   eax
c00077bf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077c3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077c7:	e8 c4 b8 01 00       	call   c0023090 <__udivdi3>
c00077cc:	83 c4 10             	add    esp,0x10
c00077cf:	c1 e0 02             	shl    eax,0x2
c00077d2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077d6:	05 07 02 00 00       	add    eax,0x207
c00077db:	89 f1                	mov    ecx,esi
c00077dd:	c1 e8 09             	shr    eax,0x9
c00077e0:	83 c1 ff             	add    ecx,0xffffffff
c00077e3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077e7:	83 d3 ff             	adc    ebx,0xffffffff
c00077ea:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077ee:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077f2:	31 d2                	xor    edx,edx
c00077f4:	01 c8                	add    eax,ecx
c00077f6:	11 da                	adc    edx,ebx
c00077f8:	89 c1                	mov    ecx,eax
c00077fa:	f7 de                	neg    esi
c00077fc:	89 d0                	mov    eax,edx
c00077fe:	83 d7 00             	adc    edi,0x0
c0007801:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007805:	f7 df                	neg    edi
c0007807:	21 f1                	and    ecx,esi
c0007809:	21 f8                	and    eax,edi
c000780b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000780f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007813:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007817:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000781b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000781f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007822:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007826:	0f ac d0 01          	shrd   eax,edx,0x1
c000782a:	89 df                	mov    edi,ebx
c000782c:	d1 ea                	shr    edx,1
c000782e:	39 c1                	cmp    ecx,eax
c0007830:	19 d7                	sbb    edi,edx
c0007832:	0f 83 3e 09 00 00    	jae    c0008176 <f_mkfs+0xcc5>
c0007838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000783c:	31 d2                	xor    edx,edx
c000783e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007842:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007846:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000784a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000784d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007851:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007855:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007859:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000785d:	83 f8 0f             	cmp    eax,0xf
c0007860:	0f 86 10 09 00 00    	jbe    c0008176 <f_mkfs+0xcc5>
c0007866:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000786e:	0f 87 02 09 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c0007874:	31 d2                	xor    edx,edx
c0007876:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000787a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007882:	83 c0 07             	add    eax,0x7
c0007885:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000788d:	c1 e8 03             	shr    eax,0x3
c0007890:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007897:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000789b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000789f:	c1 e0 09             	shl    eax,0x9
c00078a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078a6:	48                   	dec    eax
c00078a7:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078ab:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00078af:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078b3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078b7:	31 d2                	xor    edx,edx
c00078b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078bd:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078c8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078cd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078d1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078d5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078d9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078dd:	31 ff                	xor    edi,edi
c00078df:	31 f6                	xor    esi,esi
c00078e1:	31 db                	xor    ebx,ebx
c00078e3:	85 ff                	test   edi,edi
c00078e5:	74 05                	je     c00078ec <f_mkfs+0x43b>
c00078e7:	4f                   	dec    edi
c00078e8:	74 44                	je     c000792e <f_mkfs+0x47d>
c00078ea:	eb 4f                	jmp    c000793b <f_mkfs+0x48a>
c00078ec:	83 ec 0c             	sub    esp,0xc
c00078ef:	0f b7 c3             	movzx  eax,bx
c00078f2:	50                   	push   eax
c00078f3:	e8 18 0e 00 00       	call   c0008710 <ff_wtoupper>
c00078f8:	83 c4 10             	add    esp,0x10
c00078fb:	89 c1                	mov    ecx,eax
c00078fd:	8d 53 01             	lea    edx,[ebx+0x1]
c0007900:	66 39 c3             	cmp    bx,ax
c0007903:	75 3e                	jne    c0007943 <f_mkfs+0x492>
c0007905:	be 01 00 00 00       	mov    esi,0x1
c000790a:	89 df                	mov    edi,ebx
c000790c:	66 01 f7             	add    di,si
c000790f:	75 07                	jne    c0007918 <f_mkfs+0x467>
c0007911:	83 fe 7f             	cmp    esi,0x7f
c0007914:	77 31                	ja     c0007947 <f_mkfs+0x496>
c0007916:	eb 16                	jmp    c000792e <f_mkfs+0x47d>
c0007918:	83 ec 0c             	sub    esp,0xc
c000791b:	0f b7 ff             	movzx  edi,di
c000791e:	57                   	push   edi
c000791f:	e8 ec 0d 00 00       	call   c0008710 <ff_wtoupper>
c0007924:	83 c4 10             	add    esp,0x10
c0007927:	39 c7                	cmp    edi,eax
c0007929:	75 e6                	jne    c0007911 <f_mkfs+0x460>
c000792b:	46                   	inc    esi
c000792c:	eb dc                	jmp    c000790a <f_mkfs+0x459>
c000792e:	31 c0                	xor    eax,eax
c0007930:	89 d9                	mov    ecx,ebx
c0007932:	4e                   	dec    esi
c0007933:	0f 95 c0             	setne  al
c0007936:	43                   	inc    ebx
c0007937:	89 c7                	mov    edi,eax
c0007939:	eb 14                	jmp    c000794f <f_mkfs+0x49e>
c000793b:	89 f1                	mov    ecx,esi
c000793d:	01 f3                	add    ebx,esi
c000793f:	31 ff                	xor    edi,edi
c0007941:	eb 0c                	jmp    c000794f <f_mkfs+0x49e>
c0007943:	89 d3                	mov    ebx,edx
c0007945:	eb 08                	jmp    c000794f <f_mkfs+0x49e>
c0007947:	bf 02 00 00 00       	mov    edi,0x2
c000794c:	83 c9 ff             	or     ecx,0xffffffff
c000794f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007953:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007956:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000795a:	0f b6 c1             	movzx  eax,cl
c000795d:	e8 04 a7 ff ff       	call   c0002066 <xsum32>
c0007962:	66 c1 e9 08          	shr    cx,0x8
c0007966:	89 c2                	mov    edx,eax
c0007968:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000796b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000796f:	0f b7 c1             	movzx  eax,cx
c0007972:	e8 ef a6 ff ff       	call   c0002066 <xsum32>
c0007977:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000797c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007980:	66 85 db             	test   bx,bx
c0007983:	74 1f                	je     c00079a4 <f_mkfs+0x4f3>
c0007985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007988:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000798f:	83 c0 02             	add    eax,0x2
c0007992:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007998:	39 c2                	cmp    edx,eax
c000799a:	74 08                	je     c00079a4 <f_mkfs+0x4f3>
c000799c:	89 04 24             	mov    DWORD PTR [esp],eax
c000799f:	e9 3f ff ff ff       	jmp    c00078e3 <f_mkfs+0x432>
c00079a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00079a7:	83 ec 0c             	sub    esp,0xc
c00079aa:	05 01 02 00 00       	add    eax,0x201
c00079af:	c1 e8 09             	shr    eax,0x9
c00079b2:	50                   	push   eax
c00079b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079bb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079bf:	55                   	push   ebp
c00079c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079c4:	e8 6d a1 ff ff       	call   c0001b36 <disk_write>
c00079c9:	83 c4 20             	add    esp,0x20
c00079cc:	85 c0                	test   eax,eax
c00079ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079d1:	0f 85 8b 0b 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00079d7:	89 d0                	mov    eax,edx
c00079d9:	31 d2                	xor    edx,edx
c00079db:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079df:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079e3:	66 85 db             	test   bx,bx
c00079e6:	74 04                	je     c00079ec <f_mkfs+0x53b>
c00079e8:	31 c0                	xor    eax,eax
c00079ea:	eb b0                	jmp    c000799c <f_mkfs+0x4eb>
c00079ec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079f0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079f4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079f8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079fe:	31 d2                	xor    edx,edx
c0007a00:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007a0b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007a0f:	c1 eb 09             	shr    ebx,0x9
c0007a12:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a19:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a1d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a21:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a25:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a29:	8d 70 01             	lea    esi,[eax+0x1]
c0007a2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a30:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a34:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a3b:	31 d2                	xor    edx,edx
c0007a3d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a42:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a45:	89 c1                	mov    ecx,eax
c0007a47:	89 e8                	mov    eax,ebp
c0007a49:	e8 b1 a1 ff ff       	call   c0001bff <mem_set>
c0007a4e:	31 c0                	xor    eax,eax
c0007a50:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a53:	76 10                	jbe    c0007a65 <f_mkfs+0x5b4>
c0007a55:	83 fe 07             	cmp    esi,0x7
c0007a58:	76 0b                	jbe    c0007a65 <f_mkfs+0x5b4>
c0007a5a:	40                   	inc    eax
c0007a5b:	83 ee 08             	sub    esi,0x8
c0007a5e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a63:	eb eb                	jmp    c0007a50 <f_mkfs+0x59f>
c0007a65:	b2 01                	mov    dl,0x1
c0007a67:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a6b:	85 f6                	test   esi,esi
c0007a6d:	74 0c                	je     c0007a7b <f_mkfs+0x5ca>
c0007a6f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a72:	76 07                	jbe    c0007a7b <f_mkfs+0x5ca>
c0007a74:	08 11                	or     BYTE PTR [ecx],dl
c0007a76:	4e                   	dec    esi
c0007a77:	d1 e2                	shl    edx,1
c0007a79:	eb f0                	jmp    c0007a6b <f_mkfs+0x5ba>
c0007a7b:	89 df                	mov    edi,ebx
c0007a7d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a81:	76 04                	jbe    c0007a87 <f_mkfs+0x5d6>
c0007a83:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a87:	83 ec 0c             	sub    esp,0xc
c0007a8a:	57                   	push   edi
c0007a8b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a8f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a93:	55                   	push   ebp
c0007a94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a98:	e8 99 a0 ff ff       	call   c0001b36 <disk_write>
c0007a9d:	83 c4 20             	add    esp,0x20
c0007aa0:	85 c0                	test   eax,eax
c0007aa2:	0f 85 ba 0a 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007aa8:	31 d2                	xor    edx,edx
c0007aaa:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007aae:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007ab2:	29 fb                	sub    ebx,edi
c0007ab4:	0f 85 7a ff ff ff    	jne    c0007a34 <f_mkfs+0x583>
c0007aba:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007abe:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ac6:	31 f6                	xor    esi,esi
c0007ac8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007acc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007acf:	31 d2                	xor    edx,edx
c0007ad1:	89 e8                	mov    eax,ebp
c0007ad3:	e8 27 a1 ff ff       	call   c0001bff <mem_set>
c0007ad8:	31 c9                	xor    ecx,ecx
c0007ada:	85 db                	test   ebx,ebx
c0007adc:	75 40                	jne    c0007b1e <f_mkfs+0x66d>
c0007ade:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ae3:	89 e8                	mov    eax,ebp
c0007ae5:	bb 02 00 00 00       	mov    ebx,0x2
c0007aea:	e8 f2 a0 ff ff       	call   c0001be1 <st_dword>
c0007aef:	8d 45 04             	lea    eax,[ebp+0x4]
c0007af2:	83 ca ff             	or     edx,0xffffffff
c0007af5:	e8 e7 a0 ff ff       	call   c0001be1 <st_dword>
c0007afa:	b9 08 00 00 00       	mov    ecx,0x8
c0007aff:	eb 1d                	jmp    c0007b1e <f_mkfs+0x66d>
c0007b01:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b04:	76 3b                	jbe    c0007b41 <f_mkfs+0x690>
c0007b06:	43                   	inc    ebx
c0007b07:	83 fe 01             	cmp    esi,0x1
c0007b0a:	89 da                	mov    edx,ebx
c0007b0c:	77 03                	ja     c0007b11 <f_mkfs+0x660>
c0007b0e:	83 ca ff             	or     edx,0xffffffff
c0007b11:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b15:	4e                   	dec    esi
c0007b16:	e8 c6 a0 ff ff       	call   c0001be1 <st_dword>
c0007b1b:	83 c1 04             	add    ecx,0x4
c0007b1e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b22:	85 f6                	test   esi,esi
c0007b24:	75 db                	jne    c0007b01 <f_mkfs+0x650>
c0007b26:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b2b:	77 14                	ja     c0007b41 <f_mkfs+0x690>
c0007b2d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b31:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b38:	85 f6                	test   esi,esi
c0007b3a:	74 05                	je     c0007b41 <f_mkfs+0x690>
c0007b3c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b3f:	77 dd                	ja     c0007b1e <f_mkfs+0x66d>
c0007b41:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b45:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b49:	39 cf                	cmp    edi,ecx
c0007b4b:	76 02                	jbe    c0007b4f <f_mkfs+0x69e>
c0007b4d:	89 cf                	mov    edi,ecx
c0007b4f:	83 ec 0c             	sub    esp,0xc
c0007b52:	57                   	push   edi
c0007b53:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b57:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b5b:	55                   	push   ebp
c0007b5c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b60:	e8 d1 9f ff ff       	call   c0001b36 <disk_write>
c0007b65:	83 c4 20             	add    esp,0x20
c0007b68:	85 c0                	test   eax,eax
c0007b6a:	0f 85 f2 09 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007b70:	31 d2                	xor    edx,edx
c0007b72:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b76:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b7a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b7e:	0f 85 48 ff ff ff    	jne    c0007acc <f_mkfs+0x61b>
c0007b84:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b87:	31 d2                	xor    edx,edx
c0007b89:	89 e8                	mov    eax,ebp
c0007b8b:	31 ff                	xor    edi,edi
c0007b8d:	e8 6d a0 ff ff       	call   c0001bff <mem_set>
c0007b92:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b95:	ba 02 00 00 00       	mov    edx,0x2
c0007b9a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b9e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007ba2:	e8 3a a0 ff ff       	call   c0001be1 <st_dword>
c0007ba7:	8d 45 38             	lea    eax,[ebp+0x38]
c0007baa:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007bae:	e8 2e a0 ff ff       	call   c0001be1 <st_dword>
c0007bb3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007bb6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007bba:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bbe:	e8 1e a0 ff ff       	call   c0001be1 <st_dword>
c0007bc3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bc6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bce:	83 c2 02             	add    edx,0x2
c0007bd1:	e8 0b a0 ff ff       	call   c0001be1 <st_dword>
c0007bd6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bd9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bdd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007be1:	e8 fb 9f ff ff       	call   c0001be1 <st_dword>
c0007be6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bea:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bef:	89 c6                	mov    esi,eax
c0007bf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bf5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007c00:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007c03:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007c07:	39 cb                	cmp    ebx,ecx
c0007c09:	76 02                	jbe    c0007c0d <f_mkfs+0x75c>
c0007c0b:	89 cb                	mov    ebx,ecx
c0007c0d:	83 ec 0c             	sub    esp,0xc
c0007c10:	53                   	push   ebx
c0007c11:	57                   	push   edi
c0007c12:	56                   	push   esi
c0007c13:	55                   	push   ebp
c0007c14:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c18:	e8 19 9f ff ff       	call   c0001b36 <disk_write>
c0007c1d:	83 c4 20             	add    esp,0x20
c0007c20:	85 c0                	test   eax,eax
c0007c22:	0f 85 3a 09 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007c28:	31 d2                	xor    edx,edx
c0007c2a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c2f:	89 e8                	mov    eax,ebp
c0007c31:	e8 c9 9f ff ff       	call   c0001bff <mem_set>
c0007c36:	31 d2                	xor    edx,edx
c0007c38:	01 de                	add    esi,ebx
c0007c3a:	11 d7                	adc    edi,edx
c0007c3c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c3f:	75 bf                	jne    c0007c00 <f_mkfs+0x74f>
c0007c41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c49:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c51:	b9 00 02 00 00       	mov    ecx,0x200
c0007c56:	31 d2                	xor    edx,edx
c0007c58:	89 e8                	mov    eax,ebp
c0007c5a:	e8 a0 9f ff ff       	call   c0001bff <mem_set>
c0007c5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c64:	ba a0 41 02 c0       	mov    edx,0xc00241a0
c0007c69:	89 e8                	mov    eax,ebp
c0007c6b:	e8 7a 9f ff ff       	call   c0001bea <mem_cpy>
c0007c70:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c77:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c7b:	e8 64 9f ff ff       	call   c0001be4 <st_qword>
c0007c80:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c84:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c87:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c8b:	e8 54 9f ff ff       	call   c0001be4 <st_qword>
c0007c90:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c93:	ba 20 00 00 00       	mov    edx,0x20
c0007c98:	e8 44 9f ff ff       	call   c0001be1 <st_dword>
c0007c9d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007ca1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007ca5:	e8 37 9f ff ff       	call   c0001be1 <st_dword>
c0007caa:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007cae:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007cb2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007cb6:	e8 26 9f ff ff       	call   c0001be1 <st_dword>
c0007cbb:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cbe:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cc2:	e8 1a 9f ff ff       	call   c0001be1 <st_dword>
c0007cc7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007ccb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cce:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cd1:	e8 0b 9f ff ff       	call   c0001be1 <st_dword>
c0007cd6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cd9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cde:	e8 fe 9e ff ff       	call   c0001be1 <st_dword>
c0007ce3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ce6:	ba 00 01 00 00       	mov    edx,0x100
c0007ceb:	e8 ed 9e ff ff       	call   c0001bdd <st_word>
c0007cf0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007cf4:	b8 0a 00 00 00       	mov    eax,0xa
c0007cf9:	48                   	dec    eax
c0007cfa:	74 05                	je     c0007d01 <f_mkfs+0x850>
c0007cfc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cff:	eb f8                	jmp    c0007cf9 <f_mkfs+0x848>
c0007d01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007d05:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007d09:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007d0d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d11:	74 05                	je     c0007d18 <f_mkfs+0x867>
c0007d13:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d16:	eb f5                	jmp    c0007d0d <f_mkfs+0x85c>
c0007d18:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d1b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d20:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d26:	31 db                	xor    ebx,ebx
c0007d28:	e8 b0 9e ff ff       	call   c0001bdd <st_word>
c0007d2d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d33:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d38:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d3b:	e8 9d 9e ff ff       	call   c0001bdd <st_word>
c0007d40:	31 c9                	xor    ecx,ecx
c0007d42:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d45:	83 f8 01             	cmp    eax,0x1
c0007d48:	76 13                	jbe    c0007d5d <f_mkfs+0x8ac>
c0007d4a:	83 f9 70             	cmp    ecx,0x70
c0007d4d:	74 0e                	je     c0007d5d <f_mkfs+0x8ac>
c0007d4f:	89 da                	mov    edx,ebx
c0007d51:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d56:	e8 0b a3 ff ff       	call   c0002066 <xsum32>
c0007d5b:	89 c3                	mov    ebx,eax
c0007d5d:	41                   	inc    ecx
c0007d5e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d64:	75 dc                	jne    c0007d42 <f_mkfs+0x891>
c0007d66:	89 f0                	mov    eax,esi
c0007d68:	89 fa                	mov    edx,edi
c0007d6a:	83 c0 01             	add    eax,0x1
c0007d6d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d71:	83 d2 00             	adc    edx,0x0
c0007d74:	83 ec 0c             	sub    esp,0xc
c0007d77:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d7b:	6a 01                	push   0x1
c0007d7d:	57                   	push   edi
c0007d7e:	56                   	push   esi
c0007d7f:	55                   	push   ebp
c0007d80:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d84:	e8 ad 9d ff ff       	call   c0001b36 <disk_write>
c0007d89:	83 c4 20             	add    esp,0x20
c0007d8c:	85 c0                	test   eax,eax
c0007d8e:	0f 85 ce 07 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	b9 00 02 00 00       	mov    ecx,0x200
c0007d9b:	89 e8                	mov    eax,ebp
c0007d9d:	e8 5d 9e ff ff       	call   c0001bff <mem_set>
c0007da2:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007da7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007daa:	e8 2e 9e ff ff       	call   c0001bdd <st_word>
c0007daf:	89 f0                	mov    eax,esi
c0007db1:	89 fa                	mov    edx,edi
c0007db3:	83 c0 09             	add    eax,0x9
c0007db6:	83 d2 00             	adc    edx,0x0
c0007db9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dbc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007dc0:	31 c9                	xor    ecx,ecx
c0007dc2:	41                   	inc    ecx
c0007dc3:	89 da                	mov    edx,ebx
c0007dc5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dca:	e8 97 a2 ff ff       	call   c0002066 <xsum32>
c0007dcf:	89 c3                	mov    ebx,eax
c0007dd1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dd7:	75 e9                	jne    c0007dc2 <f_mkfs+0x911>
c0007dd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ddd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007de1:	83 c0 01             	add    eax,0x1
c0007de4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007de8:	83 d2 00             	adc    edx,0x0
c0007deb:	83 ec 0c             	sub    esp,0xc
c0007dee:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007df2:	6a 01                	push   0x1
c0007df4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007df8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dfc:	55                   	push   ebp
c0007dfd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e01:	e8 30 9d ff ff       	call   c0001b36 <disk_write>
c0007e06:	83 c4 20             	add    esp,0x20
c0007e09:	85 c0                	test   eax,eax
c0007e0b:	0f 85 51 07 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007e11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e15:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e19:	75 09                	jne    c0007e24 <f_mkfs+0x973>
c0007e1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e1e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e22:	74 12                	je     c0007e36 <f_mkfs+0x985>
c0007e24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e28:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e34:	eb 8a                	jmp    c0007dc0 <f_mkfs+0x90f>
c0007e36:	31 d2                	xor    edx,edx
c0007e38:	b9 00 02 00 00       	mov    ecx,0x200
c0007e3d:	89 e8                	mov    eax,ebp
c0007e3f:	e8 bb 9d ff ff       	call   c0001bff <mem_set>
c0007e44:	83 c6 0b             	add    esi,0xb
c0007e47:	83 d7 00             	adc    edi,0x0
c0007e4a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e4e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e52:	31 c9                	xor    ecx,ecx
c0007e54:	41                   	inc    ecx
c0007e55:	89 da                	mov    edx,ebx
c0007e57:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e5c:	e8 05 a2 ff ff       	call   c0002066 <xsum32>
c0007e61:	89 c3                	mov    ebx,eax
c0007e63:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e69:	75 e9                	jne    c0007e54 <f_mkfs+0x9a3>
c0007e6b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e6e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e72:	83 c6 01             	add    esi,0x1
c0007e75:	83 d7 00             	adc    edi,0x0
c0007e78:	83 ec 0c             	sub    esp,0xc
c0007e7b:	6a 01                	push   0x1
c0007e7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e85:	55                   	push   ebp
c0007e86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e8a:	e8 a7 9c ff ff       	call   c0001b36 <disk_write>
c0007e8f:	83 c4 20             	add    esp,0x20
c0007e92:	85 c0                	test   eax,eax
c0007e94:	0f 85 c8 06 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007e9a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e9e:	75 06                	jne    c0007ea6 <f_mkfs+0x9f5>
c0007ea0:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007ea4:	74 09                	je     c0007eaf <f_mkfs+0x9fe>
c0007ea6:	89 34 24             	mov    DWORD PTR [esp],esi
c0007ea9:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007ead:	eb a3                	jmp    c0007e52 <f_mkfs+0x9a1>
c0007eaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007eb3:	89 da                	mov    edx,ebx
c0007eb5:	01 e8                	add    eax,ebp
c0007eb7:	e8 25 9d ff ff       	call   c0001be1 <st_dword>
c0007ebc:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007ec1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ec9:	75 e4                	jne    c0007eaf <f_mkfs+0x9fe>
c0007ecb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ece:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ed2:	83 c6 02             	add    esi,0x2
c0007ed5:	83 d7 00             	adc    edi,0x0
c0007ed8:	83 ec 0c             	sub    esp,0xc
c0007edb:	6a 01                	push   0x1
c0007edd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ee1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ee5:	55                   	push   ebp
c0007ee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eea:	e8 47 9c ff ff       	call   c0001b36 <disk_write>
c0007eef:	83 c4 20             	add    esp,0x20
c0007ef2:	85 c0                	test   eax,eax
c0007ef4:	0f 85 68 06 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0007efa:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eff:	74 0d                	je     c0007f0e <f_mkfs+0xa5d>
c0007f01:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007f09:	e9 43 fd ff ff       	jmp    c0007c51 <f_mkfs+0x7a0>
c0007f0e:	b1 07                	mov    cl,0x7
c0007f10:	e9 e3 05 00 00       	jmp    c00084f8 <f_mkfs+0x1047>
c0007f15:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f1a:	0f 85 4f 02 00 00    	jne    c000816f <f_mkfs+0xcbe>
c0007f20:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f25:	0f 86 22 02 00 00    	jbe    c000814d <f_mkfs+0xc9c>
c0007f2b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f30:	0f 85 81 06 00 00    	jne    c00085b7 <f_mkfs+0x1106>
c0007f36:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f3d:	83 f8 40             	cmp    eax,0x40
c0007f40:	0f 87 51 06 00 00    	ja     c0008597 <f_mkfs+0x10e6>
c0007f46:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f4a:	85 ff                	test   edi,edi
c0007f4c:	75 1c                	jne    c0007f6a <f_mkfs+0xab9>
c0007f4e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f51:	ba a0 40 02 c0       	mov    edx,0xc00240a0
c0007f56:	c1 e9 0c             	shr    ecx,0xc
c0007f59:	bf 01 00 00 00       	mov    edi,0x1
c0007f5e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f61:	66 85 c0             	test   ax,ax
c0007f64:	0f 85 95 01 00 00    	jne    c00080ff <f_mkfs+0xc4e>
c0007f6a:	31 d2                	xor    edx,edx
c0007f6c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f6f:	f7 f7                	div    edi
c0007f71:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f76:	0f 86 95 01 00 00    	jbe    c0008111 <f_mkfs+0xc60>
c0007f7c:	83 c0 02             	add    eax,0x2
c0007f7f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f84:	01 c0                	add    eax,eax
c0007f86:	05 ff 01 00 00       	add    eax,0x1ff
c0007f8b:	be 01 00 00 00       	mov    esi,0x1
c0007f90:	c1 e8 09             	shr    eax,0x9
c0007f93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f9b:	c1 e0 05             	shl    eax,0x5
c0007f9e:	c1 e8 09             	shr    eax,0x9
c0007fa1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007fa5:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fb0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fb4:	89 f0                	mov    eax,esi
c0007fb6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007fba:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fbe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fc2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fc6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fca:	31 d2                	xor    edx,edx
c0007fcc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fd1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fd5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fd9:	31 db                	xor    ebx,ebx
c0007fdb:	01 c8                	add    eax,ecx
c0007fdd:	11 da                	adc    edx,ebx
c0007fdf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fe3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fe7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007feb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fef:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ff3:	f7 da                	neg    edx
c0007ff5:	21 d1                	and    ecx,edx
c0007ff7:	29 d9                	sub    ecx,ebx
c0007ff9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ffe:	0f 85 20 01 00 00    	jne    c0008124 <f_mkfs+0xc73>
c0008004:	31 db                	xor    ebx,ebx
c0008006:	01 ce                	add    esi,ecx
c0008008:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c000800c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008010:	31 d2                	xor    edx,edx
c0008012:	89 f8                	mov    eax,edi
c0008014:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008018:	c1 e0 04             	shl    eax,0x4
c000801b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000801f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008023:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008027:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000802b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000802e:	19 d3                	sbb    ebx,edx
c0008030:	0f 82 40 01 00 00    	jb     c0008176 <f_mkfs+0xcc5>
c0008036:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008039:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000803d:	89 c8                	mov    eax,ecx
c000803f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008044:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008048:	29 f0                	sub    eax,esi
c000804a:	29 d0                	sub    eax,edx
c000804c:	31 d2                	xor    edx,edx
c000804e:	f7 f7                	div    edi
c0008050:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008055:	89 c3                	mov    ebx,eax
c0008057:	0f 85 b8 fe ff ff    	jne    c0007f15 <f_mkfs+0xa64>
c000805d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008062:	0f 87 1d 01 00 00    	ja     c0008185 <f_mkfs+0xcd4>
c0008068:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000806d:	0f 85 03 01 00 00    	jne    c0008176 <f_mkfs+0xcc5>
c0008073:	83 ff 01             	cmp    edi,0x1
c0008076:	0f 86 fa 00 00 00    	jbe    c0008176 <f_mkfs+0xcc5>
c000807c:	d1 ef                	shr    edi,1
c000807e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008082:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008086:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008089:	85 db                	test   ebx,ebx
c000808b:	75 2d                	jne    c00080ba <f_mkfs+0xc09>
c000808d:	89 cb                	mov    ebx,ecx
c000808f:	ba b0 40 02 c0       	mov    edx,0xc00240b0
c0008094:	c1 eb 11             	shr    ebx,0x11
c0008097:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000809f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00080a2:	66 85 c0             	test   ax,ax
c00080a5:	74 11                	je     c00080b8 <f_mkfs+0xc07>
c00080a7:	83 c2 02             	add    edx,0x2
c00080aa:	39 d8                	cmp    eax,ebx
c00080ac:	77 0a                	ja     c00080b8 <f_mkfs+0xc07>
c00080ae:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080b2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080b6:	eb e7                	jmp    c000809f <f_mkfs+0xbee>
c00080b8:	31 db                	xor    ebx,ebx
c00080ba:	31 d2                	xor    edx,edx
c00080bc:	89 c8                	mov    eax,ecx
c00080be:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080c2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080c9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080ce:	c1 ea 09             	shr    edx,0x9
c00080d1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080d6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080da:	0f 87 96 00 00 00    	ja     c0008176 <f_mkfs+0xcc5>
c00080e0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080e4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080ec:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080f0:	be 20 00 00 00       	mov    esi,0x20
c00080f5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080fa:	e9 a6 fe ff ff       	jmp    c0007fa5 <f_mkfs+0xaf4>
c00080ff:	83 c2 02             	add    edx,0x2
c0008102:	39 c8                	cmp    eax,ecx
c0008104:	0f 87 60 fe ff ff    	ja     c0007f6a <f_mkfs+0xab9>
c000810a:	01 ff                	add    edi,edi
c000810c:	e9 4d fe ff ff       	jmp    c0007f5e <f_mkfs+0xaad>
c0008111:	8d 04 40             	lea    eax,[eax+eax*2]
c0008114:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008119:	40                   	inc    eax
c000811a:	d1 e8                	shr    eax,1
c000811c:	83 c0 03             	add    eax,0x3
c000811f:	e9 62 fe ff ff       	jmp    c0007f86 <f_mkfs+0xad5>
c0008124:	31 d2                	xor    edx,edx
c0008126:	89 c8                	mov    eax,ecx
c0008128:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000812c:	85 d2                	test   edx,edx
c000812e:	74 0c                	je     c000813c <f_mkfs+0xc8b>
c0008130:	49                   	dec    ecx
c0008131:	46                   	inc    esi
c0008132:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008137:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000813c:	89 c8                	mov    eax,ecx
c000813e:	31 d2                	xor    edx,edx
c0008140:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008144:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008148:	e9 c3 fe ff ff       	jmp    c0008010 <f_mkfs+0xb5f>
c000814d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008152:	77 31                	ja     c0008185 <f_mkfs+0xcd4>
c0008154:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008159:	75 1b                	jne    c0008176 <f_mkfs+0xcc5>
c000815b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000815e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008162:	3d 80 00 00 00       	cmp    eax,0x80
c0008167:	0f 86 d9 fd ff ff    	jbe    c0007f46 <f_mkfs+0xa95>
c000816d:	eb 07                	jmp    c0008176 <f_mkfs+0xcc5>
c000816f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008174:	76 0a                	jbe    c0008180 <f_mkfs+0xccf>
c0008176:	bb 0e 00 00 00       	mov    ebx,0xe
c000817b:	e9 ff 03 00 00       	jmp    c000857f <f_mkfs+0x10ce>
c0008180:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008185:	31 d2                	xor    edx,edx
c0008187:	b9 00 02 00 00       	mov    ecx,0x200
c000818c:	89 e8                	mov    eax,ebp
c000818e:	e8 6c 9a ff ff       	call   c0001bff <mem_set>
c0008193:	b9 0b 00 00 00       	mov    ecx,0xb
c0008198:	ba c2 41 02 c0       	mov    edx,0xc00241c2
c000819d:	89 e8                	mov    eax,ebp
c000819f:	e8 46 9a ff ff       	call   c0001bea <mem_cpy>
c00081a4:	8d 45 0b             	lea    eax,[ebp+0xb]
c00081a7:	ba 00 02 00 00       	mov    edx,0x200
c00081ac:	e8 2c 9a ff ff       	call   c0001bdd <st_word>
c00081b1:	89 f8                	mov    eax,edi
c00081b3:	0f b7 d6             	movzx  edx,si
c00081b6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081b9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081bc:	e8 1c 9a ff ff       	call   c0001bdd <st_word>
c00081c1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081c5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ca:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081cd:	75 08                	jne    c00081d7 <f_mkfs+0xd26>
c00081cf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081d7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081de:	e8 fa 99 ff ff       	call   c0001bdd <st_word>
c00081e3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081e8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081ec:	39 d0                	cmp    eax,edx
c00081ee:	b8 00 00 00 00       	mov    eax,0x0
c00081f3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081f7:	72 0a                	jb     c0008203 <f_mkfs+0xd52>
c00081f9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081fc:	e8 dc 99 ff ff       	call   c0001bdd <st_word>
c0008201:	eb 08                	jmp    c000820b <f_mkfs+0xd5a>
c0008203:	8d 45 20             	lea    eax,[ebp+0x20]
c0008206:	e8 d6 99 ff ff       	call   c0001be1 <st_dword>
c000820b:	8d 45 18             	lea    eax,[ebp+0x18]
c000820e:	ba 3f 00 00 00       	mov    edx,0x3f
c0008213:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008217:	e8 c1 99 ff ff       	call   c0001bdd <st_word>
c000821c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000821f:	ba ff 00 00 00       	mov    edx,0xff
c0008224:	e8 b4 99 ff ff       	call   c0001bdd <st_word>
c0008229:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000822c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008230:	e8 ac 99 ff ff       	call   c0001be1 <st_dword>
c0008235:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000823a:	75 57                	jne    c0008293 <f_mkfs+0xde2>
c000823c:	8d 45 43             	lea    eax,[ebp+0x43]
c000823f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008244:	e8 98 99 ff ff       	call   c0001be1 <st_dword>
c0008249:	8d 45 24             	lea    eax,[ebp+0x24]
c000824c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008250:	e8 8c 99 ff ff       	call   c0001be1 <st_dword>
c0008255:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008258:	ba 02 00 00 00       	mov    edx,0x2
c000825d:	e8 7f 99 ff ff       	call   c0001be1 <st_dword>
c0008262:	8d 45 30             	lea    eax,[ebp+0x30]
c0008265:	ba 01 00 00 00       	mov    edx,0x1
c000826a:	e8 6e 99 ff ff       	call   c0001bdd <st_word>
c000826f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008272:	ba 06 00 00 00       	mov    edx,0x6
c0008277:	e8 61 99 ff ff       	call   c0001bdd <st_word>
c000827c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008280:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008284:	8d 45 47             	lea    eax,[ebp+0x47]
c0008287:	b9 13 00 00 00       	mov    ecx,0x13
c000828c:	ba ce 41 02 c0       	mov    edx,0xc00241ce
c0008291:	eb 2f                	jmp    c00082c2 <f_mkfs+0xe11>
c0008293:	8d 45 27             	lea    eax,[ebp+0x27]
c0008296:	ba 00 00 21 50       	mov    edx,0x50210000
c000829b:	e8 41 99 ff ff       	call   c0001be1 <st_dword>
c00082a0:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00082a5:	8d 45 16             	lea    eax,[ebp+0x16]
c00082a8:	e8 30 99 ff ff       	call   c0001bdd <st_word>
c00082ad:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082b1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082b5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082b8:	b9 13 00 00 00       	mov    ecx,0x13
c00082bd:	ba e2 41 02 c0       	mov    edx,0xc00241e2
c00082c2:	e8 23 99 ff ff       	call   c0001bea <mem_cpy>
c00082c7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082cd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082d2:	89 f0                	mov    eax,esi
c00082d4:	e8 04 99 ff ff       	call   c0001bdd <st_word>
c00082d9:	83 ec 0c             	sub    esp,0xc
c00082dc:	6a 01                	push   0x1
c00082de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082e6:	55                   	push   ebp
c00082e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082eb:	e8 46 98 ff ff       	call   c0001b36 <disk_write>
c00082f0:	83 c4 20             	add    esp,0x20
c00082f3:	85 c0                	test   eax,eax
c00082f5:	0f 85 67 02 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00082fb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008300:	0f 85 b7 00 00 00    	jne    c00083bd <f_mkfs+0xf0c>
c0008306:	83 ec 0c             	sub    esp,0xc
c0008309:	6a 01                	push   0x1
c000830b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008313:	83 c0 06             	add    eax,0x6
c0008316:	83 d2 00             	adc    edx,0x0
c0008319:	52                   	push   edx
c000831a:	50                   	push   eax
c000831b:	55                   	push   ebp
c000831c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008320:	e8 11 98 ff ff       	call   c0001b36 <disk_write>
c0008325:	83 c4 20             	add    esp,0x20
c0008328:	b9 00 02 00 00       	mov    ecx,0x200
c000832d:	31 d2                	xor    edx,edx
c000832f:	89 e8                	mov    eax,ebp
c0008331:	e8 c9 98 ff ff       	call   c0001bff <mem_set>
c0008336:	ba 52 52 61 41       	mov    edx,0x41615252
c000833b:	89 e8                	mov    eax,ebp
c000833d:	e8 9f 98 ff ff       	call   c0001be1 <st_dword>
c0008342:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008348:	ba 72 72 41 61       	mov    edx,0x61417272
c000834d:	e8 8f 98 ff ff       	call   c0001be1 <st_dword>
c0008352:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008355:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000835b:	e8 81 98 ff ff       	call   c0001be1 <st_dword>
c0008360:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008366:	ba 02 00 00 00       	mov    edx,0x2
c000836b:	e8 71 98 ff ff       	call   c0001be1 <st_dword>
c0008370:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008375:	89 f0                	mov    eax,esi
c0008377:	e8 61 98 ff ff       	call   c0001bdd <st_word>
c000837c:	83 ec 0c             	sub    esp,0xc
c000837f:	6a 01                	push   0x1
c0008381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008385:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008389:	83 c0 07             	add    eax,0x7
c000838c:	83 d2 00             	adc    edx,0x0
c000838f:	52                   	push   edx
c0008390:	50                   	push   eax
c0008391:	55                   	push   ebp
c0008392:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008396:	e8 9b 97 ff ff       	call   c0001b36 <disk_write>
c000839b:	83 c4 14             	add    esp,0x14
c000839e:	6a 01                	push   0x1
c00083a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083a4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00083a8:	83 c0 01             	add    eax,0x1
c00083ab:	83 d2 00             	adc    edx,0x0
c00083ae:	52                   	push   edx
c00083af:	50                   	push   eax
c00083b0:	55                   	push   ebp
c00083b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083b5:	e8 7c 97 ff ff       	call   c0001b36 <disk_write>
c00083ba:	83 c4 20             	add    esp,0x20
c00083bd:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083c4:	31 d2                	xor    edx,edx
c00083c6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083cc:	31 db                	xor    ebx,ebx
c00083ce:	89 e8                	mov    eax,ebp
c00083d0:	e8 2a 98 ff ff       	call   c0001bff <mem_set>
c00083d5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083e1:	0f 94 c3             	sete   bl
c00083e4:	4b                   	dec    ebx
c00083e5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083eb:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083f1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083f6:	75 21                	jne    c0008419 <f_mkfs+0xf68>
c00083f8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083fd:	89 e8                	mov    eax,ebp
c00083ff:	e8 dd 97 ff ff       	call   c0001be1 <st_dword>
c0008404:	8d 45 04             	lea    eax,[ebp+0x4]
c0008407:	83 ca ff             	or     edx,0xffffffff
c000840a:	e8 d2 97 ff ff       	call   c0001be1 <st_dword>
c000840f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008412:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008417:	eb 04                	jmp    c000841d <f_mkfs+0xf6c>
c0008419:	89 da                	mov    edx,ebx
c000841b:	89 e8                	mov    eax,ebp
c000841d:	e8 bf 97 ff ff       	call   c0001be1 <st_dword>
c0008422:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008426:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000842a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000842e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008432:	39 ce                	cmp    esi,ecx
c0008434:	76 02                	jbe    c0008438 <f_mkfs+0xf87>
c0008436:	89 ce                	mov    esi,ecx
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	56                   	push   esi
c000843c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008440:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008444:	55                   	push   ebp
c0008445:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008449:	e8 e8 96 ff ff       	call   c0001b36 <disk_write>
c000844e:	83 c4 20             	add    esp,0x20
c0008451:	85 c0                	test   eax,eax
c0008453:	0f 85 09 01 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c0008459:	31 d2                	xor    edx,edx
c000845b:	b9 00 02 00 00       	mov    ecx,0x200
c0008460:	89 e8                	mov    eax,ebp
c0008462:	e8 98 97 ff ff       	call   c0001bff <mem_set>
c0008467:	31 d2                	xor    edx,edx
c0008469:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000846d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008471:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008475:	75 b3                	jne    c000842a <f_mkfs+0xf79>
c0008477:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000847a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008481:	40                   	inc    eax
c0008482:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008486:	0f 87 65 ff ff ff    	ja     c00083f1 <f_mkfs+0xf40>
c000848c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008491:	74 04                	je     c0008497 <f_mkfs+0xfe6>
c0008493:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008497:	89 fb                	mov    ebx,edi
c0008499:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000849d:	76 04                	jbe    c00084a3 <f_mkfs+0xff2>
c000849f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00084a3:	83 ec 0c             	sub    esp,0xc
c00084a6:	53                   	push   ebx
c00084a7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084ab:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00084af:	55                   	push   ebp
c00084b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084b4:	e8 7d 96 ff ff       	call   c0001b36 <disk_write>
c00084b9:	83 c4 20             	add    esp,0x20
c00084bc:	85 c0                	test   eax,eax
c00084be:	0f 85 9e 00 00 00    	jne    c0008562 <f_mkfs+0x10b1>
c00084c4:	31 d2                	xor    edx,edx
c00084c6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ca:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084ce:	29 df                	sub    edi,ebx
c00084d0:	75 c5                	jne    c0008497 <f_mkfs+0xfe6>
c00084d2:	b1 0c                	mov    cl,0xc
c00084d4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084d9:	74 1d                	je     c00084f8 <f_mkfs+0x1047>
c00084db:	b8 ff ff 00 00       	mov    eax,0xffff
c00084e0:	b1 06                	mov    cl,0x6
c00084e2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084e6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084ea:	72 0c                	jb     c00084f8 <f_mkfs+0x1047>
c00084ec:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084f1:	0f 94 c1             	sete   cl
c00084f4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084f8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084fd:	75 4c                	jne    c000854b <f_mkfs+0x109a>
c00084ff:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008503:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008507:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000850e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008515:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008520:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000852b:	0f b6 c9             	movzx  ecx,cl
c000852e:	83 ec 0c             	sub    esp,0xc
c0008531:	55                   	push   ebp
c0008532:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008539:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000853d:	e8 f9 bf ff ff       	call   c000453b <create_partition>
c0008542:	83 c4 10             	add    esp,0x10
c0008545:	89 c3                	mov    ebx,eax
c0008547:	85 c0                	test   eax,eax
c0008549:	75 34                	jne    c000857f <f_mkfs+0x10ce>
c000854b:	31 db                	xor    ebx,ebx
c000854d:	50                   	push   eax
c000854e:	6a 00                	push   0x0
c0008550:	6a 00                	push   0x0
c0008552:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008556:	e8 f1 95 ff ff       	call   c0001b4c <disk_ioctl>
c000855b:	83 c4 10             	add    esp,0x10
c000855e:	85 c0                	test   eax,eax
c0008560:	74 1d                	je     c000857f <f_mkfs+0x10ce>
c0008562:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000856a:	75 0c                	jne    c0008578 <f_mkfs+0x10c7>
c000856c:	83 ec 0c             	sub    esp,0xc
c000856f:	55                   	push   ebp
c0008570:	e8 77 00 00 00       	call   c00085ec <ff_memfree>
c0008575:	83 c4 10             	add    esp,0x10
c0008578:	bb 01 00 00 00       	mov    ebx,0x1
c000857d:	eb 48                	jmp    c00085c7 <f_mkfs+0x1116>
c000857f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008587:	75 3e                	jne    c00085c7 <f_mkfs+0x1116>
c0008589:	83 ec 0c             	sub    esp,0xc
c000858c:	55                   	push   ebp
c000858d:	e8 5a 00 00 00       	call   c00085ec <ff_memfree>
c0008592:	83 c4 10             	add    esp,0x10
c0008595:	eb 30                	jmp    c00085c7 <f_mkfs+0x1116>
c0008597:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000859c:	0f 85 eb fa ff ff    	jne    c000808d <f_mkfs+0xbdc>
c00085a2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00085a6:	81 ff 80 00 00 00    	cmp    edi,0x80
c00085ac:	0f 86 b8 f9 ff ff    	jbe    c0007f6a <f_mkfs+0xab9>
c00085b2:	e9 bf fb ff ff       	jmp    c0008176 <f_mkfs+0xcc5>
c00085b7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085bc:	0f 85 c0 fa ff ff    	jne    c0008082 <f_mkfs+0xbd1>
c00085c2:	e9 af fb ff ff       	jmp    c0008176 <f_mkfs+0xcc5>
c00085c7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085cd:	89 d8                	mov    eax,ebx
c00085cf:	5b                   	pop    ebx
c00085d0:	5e                   	pop    esi
c00085d1:	5f                   	pop    edi
c00085d2:	5d                   	pop    ebp
c00085d3:	c3                   	ret    

c00085d4 <ff_memalloc>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 90 17 00 00       	call   c0009d73 <malloc>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	83 c4 0c             	add    esp,0xc
c00085e9:	c3                   	ret    
c00085ea:	66 90                	xchg   ax,ax

c00085ec <ff_memfree>:
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	83 ec 0c             	sub    esp,0xc
c00085f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085f6:	e8 88 17 00 00       	call   c0009d83 <free>
c00085fb:	83 c4 10             	add    esp,0x10
c00085fe:	90                   	nop
c00085ff:	83 c4 0c             	add    esp,0xc
c0008602:	c3                   	ret    
c0008603:	90                   	nop

c0008604 <ff_uni2oem>:
c0008604:	83 ec 14             	sub    esp,0x14
c0008607:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000860b:	66 89 04 24          	mov    WORD PTR [esp],ax
c000860f:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008616:	c7 44 24 0c 00 45 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024500
c000861e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008623:	77 0b                	ja     c0008630 <ff_uni2oem+0x2c>
c0008625:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008629:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000862e:	eb 60                	jmp    c0008690 <ff_uni2oem+0x8c>
c0008630:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008638:	77 56                	ja     c0008690 <ff_uni2oem+0x8c>
c000863a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008640:	75 4e                	jne    c0008690 <ff_uni2oem+0x8c>
c0008642:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008649:	eb 0d                	jmp    c0008658 <ff_uni2oem+0x54>
c000864b:	90                   	nop
c000864c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008651:	40                   	inc    eax
c0008652:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008657:	90                   	nop
c0008658:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000865e:	77 1c                	ja     c000867c <ff_uni2oem+0x78>
c0008660:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008665:	01 c0                	add    eax,eax
c0008667:	89 c2                	mov    edx,eax
c0008669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866d:	01 d0                	add    eax,edx
c000866f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008672:	0f b7 c0             	movzx  eax,ax
c0008675:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008679:	75 d1                	jne    c000864c <ff_uni2oem+0x48>
c000867b:	90                   	nop
c000867c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008681:	83 e8 80             	sub    eax,0xffffff80
c0008684:	25 ff 00 00 00       	and    eax,0xff
c0008689:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000868e:	66 90                	xchg   ax,ax
c0008690:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008695:	83 c4 14             	add    esp,0x14
c0008698:	c3                   	ret    
c0008699:	8d 76 00             	lea    esi,[esi+0x0]

c000869c <ff_oem2uni>:
c000869c:	83 ec 18             	sub    esp,0x18
c000869f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00086a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00086a7:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00086ac:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086b0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086b7:	c7 44 24 10 00 45 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024500
c00086bf:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086c5:	77 0d                	ja     c00086d4 <ff_oem2uni+0x38>
c00086c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086cb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086d0:	eb 32                	jmp    c0008704 <ff_oem2uni+0x68>
c00086d2:	66 90                	xchg   ax,ax
c00086d4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086da:	75 28                	jne    c0008704 <ff_oem2uni+0x68>
c00086dc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086e3:	77 1f                	ja     c0008704 <ff_oem2uni+0x68>
c00086e5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086ea:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086ef:	01 c0                	add    eax,eax
c00086f1:	89 c2                	mov    edx,eax
c00086f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086f7:	01 d0                	add    eax,edx
c00086f9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086fc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008701:	8d 76 00             	lea    esi,[esi+0x0]
c0008704:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008709:	83 c4 18             	add    esp,0x18
c000870c:	c3                   	ret    
c000870d:	8d 76 00             	lea    esi,[esi+0x0]

c0008710 <ff_wtoupper>:
c0008710:	83 ec 10             	sub    esp,0x10
c0008713:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000871b:	0f 87 4f 01 00 00    	ja     c0008870 <ff_wtoupper+0x160>
c0008721:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008725:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000872a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008731:	77 09                	ja     c000873c <ff_wtoupper+0x2c>
c0008733:	b8 00 43 02 c0       	mov    eax,0xc0024300
c0008738:	eb 0a                	jmp    c0008744 <ff_wtoupper+0x34>
c000873a:	66 90                	xchg   ax,ax
c000873c:	b8 40 42 02 c0       	mov    eax,0xc0024240
c0008741:	8d 76 00             	lea    esi,[esi+0x0]
c0008744:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008748:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000874c:	8d 50 02             	lea    edx,[eax+0x2]
c000874f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008753:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008756:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000875b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008761:	0f 84 fd 00 00 00    	je     c0008864 <ff_wtoupper+0x154>
c0008767:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000876c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008771:	0f 82 ed 00 00 00    	jb     c0008864 <ff_wtoupper+0x154>
c0008777:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000877b:	8d 50 02             	lea    edx,[eax+0x2]
c000877e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008782:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008785:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000878a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000878f:	66 c1 e8 08          	shr    ax,0x8
c0008793:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008798:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000879f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00087a4:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c00087a9:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00087ae:	01 ca                	add    edx,ecx
c00087b0:	39 d0                	cmp    eax,edx
c00087b2:	0f 8d 8c 00 00 00    	jge    c0008844 <ff_wtoupper+0x134>
c00087b8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087bd:	83 f8 08             	cmp    eax,0x8
c00087c0:	0f 87 9a 00 00 00    	ja     c0008860 <ff_wtoupper+0x150>
c00087c6:	8b 04 85 00 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbe00]
c00087cd:	ff e0                	jmp    eax
c00087cf:	90                   	nop
c00087d0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087d5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087da:	29 c2                	sub    edx,eax
c00087dc:	89 d0                	mov    eax,edx
c00087de:	01 c0                	add    eax,eax
c00087e0:	89 c2                	mov    edx,eax
c00087e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087e6:	01 d0                	add    eax,edx
c00087e8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087eb:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087f0:	eb 4e                	jmp    c0008840 <ff_wtoupper+0x130>
c00087f2:	66 90                	xchg   ax,ax
c00087f4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087f9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087fd:	83 e0 01             	and    eax,0x1
c0008800:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008805:	eb 39                	jmp    c0008840 <ff_wtoupper+0x130>
c0008807:	90                   	nop
c0008808:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c000880e:	eb 30                	jmp    c0008840 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008816:	eb 28                	jmp    c0008840 <ff_wtoupper+0x130>
c0008818:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000881e:	eb 20                	jmp    c0008840 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008826:	eb 18                	jmp    c0008840 <ff_wtoupper+0x130>
c0008828:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000882e:	eb 10                	jmp    c0008840 <ff_wtoupper+0x130>
c0008830:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008836:	eb 08                	jmp    c0008840 <ff_wtoupper+0x130>
c0008838:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000883f:	90                   	nop
c0008840:	eb 1e                	jmp    c0008860 <ff_wtoupper+0x150>
c0008842:	66 90                	xchg   ax,ax
c0008844:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000884a:	0f 85 f8 fe ff ff    	jne    c0008748 <ff_wtoupper+0x38>
c0008850:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008855:	01 c0                	add    eax,eax
c0008857:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000885b:	e9 e8 fe ff ff       	jmp    c0008748 <ff_wtoupper+0x38>
c0008860:	90                   	nop
c0008861:	8d 76 00             	lea    esi,[esi+0x0]
c0008864:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008869:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000886d:	8d 76 00             	lea    esi,[esi+0x0]
c0008870:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	c3                   	ret    

c0008878 <CPU::current()>:
c0008878:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000887d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008883:	c3                   	ret    

c0008884 <operator new(unsigned long)>:
c0008884:	e9 ea 14 00 00       	jmp    c0009d73 <malloc>

c0008889 <operator delete(void*)>:
c0008889:	e9 05 15 00 00       	jmp    c0009d93 <rfree>

c000888e <disableIRQs()>:
c000888e:	fa                   	cli    
c000888f:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c0008895:	c3                   	ret    

c0008896 <enableIRQs()>:
c0008896:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000889b:	48                   	dec    eax
c000889c:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c00088a1:	75 01                	jne    c00088a4 <enableIRQs()+0xe>
c00088a3:	fb                   	sti    
c00088a4:	c3                   	ret    

c00088a5 <lockScheduler()>:
c00088a5:	fa                   	cli    
c00088a6:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c00088ac:	c3                   	ret    

c00088ad <unlockScheduler()>:
c00088ad:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c00088b2:	48                   	dec    eax
c00088b3:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c00088b8:	75 01                	jne    c00088bb <unlockScheduler()+0xe>
c00088ba:	fb                   	sti    
c00088bb:	c3                   	ret    

c00088bc <lockStuff()>:
c00088bc:	fa                   	cli    
c00088bd:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c00088c3:	ff 05 a4 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a4
c00088c9:	c3                   	ret    

c00088ca <unlockStuff()>:
c00088ca:	83 ec 0c             	sub    esp,0xc
c00088cd:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c00088d2:	48                   	dec    eax
c00088d3:	a3 a4 a1 02 c0       	mov    ds:0xc002a1a4,eax
c00088d8:	75 18                	jne    c00088f2 <unlockStuff()+0x28>
c00088da:	83 3d a0 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a1a0,0x0
c00088e1:	74 0f                	je     c00088f2 <unlockStuff()+0x28>
c00088e3:	c7 05 a0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1a0,0x0
c00088ed:	e8 ae 06 01 00       	call   c0018fa0 <schedule()>
c00088f2:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c00088f7:	48                   	dec    eax
c00088f8:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c00088fd:	75 01                	jne    c0008900 <unlockStuff()+0x36>
c00088ff:	fb                   	sti    
c0008900:	83 c4 0c             	add    esp,0xc
c0008903:	c3                   	ret    

c0008904 <Virt::getAKernelVAS()>:
c0008904:	a1 b0 8d 02 c0       	mov    eax,ds:0xc0028db0
c0008909:	c3                   	ret    

c000890a <__not_memcpy>:
c000890a:	57                   	push   edi
c000890b:	56                   	push   esi
c000890c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008910:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008914:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008918:	89 c7                	mov    edi,eax
c000891a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000891c:	5e                   	pop    esi
c000891d:	5f                   	pop    edi
c000891e:	c3                   	ret    
c000891f:	90                   	nop

c0008920 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008920:	83 ec 0c             	sub    esp,0xc
c0008923:	83 ec 08             	sub    esp,0x8
c0008926:	68 00 46 02 c0       	push   0xc0024600
c000892b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000892f:	e8 a8 7e ff ff       	call   c00007dc <strcmp>
c0008934:	83 c4 10             	add    esp,0x10
c0008937:	85 c0                	test   eax,eax
c0008939:	0f 94 c0             	sete   al
c000893c:	84 c0                	test   al,al
c000893e:	74 0c                	je     c000894c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008940:	b8 88 8c 02 c0       	mov    eax,0xc0028c88
c0008945:	e9 ea 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000894a:	66 90                	xchg   ax,ax
c000894c:	83 ec 08             	sub    esp,0x8
c000894f:	68 09 46 02 c0       	push   0xc0024609
c0008954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008958:	e8 7f 7e ff ff       	call   c00007dc <strcmp>
c000895d:	83 c4 10             	add    esp,0x10
c0008960:	85 c0                	test   eax,eax
c0008962:	0f 94 c0             	sete   al
c0008965:	84 c0                	test   al,al
c0008967:	74 0b                	je     c0008974 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008969:	b8 90 30 02 c0       	mov    eax,0xc0023090
c000896e:	e9 c1 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008973:	90                   	nop
c0008974:	83 ec 08             	sub    esp,0x8
c0008977:	68 13 46 02 c0       	push   0xc0024613
c000897c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008980:	e8 57 7e ff ff       	call   c00007dc <strcmp>
c0008985:	83 c4 10             	add    esp,0x10
c0008988:	85 c0                	test   eax,eax
c000898a:	0f 94 c0             	sete   al
c000898d:	84 c0                	test   al,al
c000898f:	74 0b                	je     c000899c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008991:	b8 c4 2d 02 c0       	mov    eax,0xc0022dc4
c0008996:	e9 99 00 00 00       	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000899b:	90                   	nop
c000899c:	83 ec 08             	sub    esp,0x8
c000899f:	68 1c 46 02 c0       	push   0xc002461c
c00089a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089a8:	e8 2f 7e ff ff       	call   c00007dc <strcmp>
c00089ad:	83 c4 10             	add    esp,0x10
c00089b0:	85 c0                	test   eax,eax
c00089b2:	0f 94 c0             	sete   al
c00089b5:	84 c0                	test   al,al
c00089b7:	74 07                	je     c00089c0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089b9:	b8 90 31 02 c0       	mov    eax,0xc0023190
c00089be:	eb 74                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089c0:	83 ec 08             	sub    esp,0x8
c00089c3:	68 26 46 02 c0       	push   0xc0024626
c00089c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089cc:	e8 0b 7e ff ff       	call   c00007dc <strcmp>
c00089d1:	83 c4 10             	add    esp,0x10
c00089d4:	85 c0                	test   eax,eax
c00089d6:	0f 94 c0             	sete   al
c00089d9:	84 c0                	test   al,al
c00089db:	74 07                	je     c00089e4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089dd:	b8 10 2f 02 c0       	mov    eax,0xc0022f10
c00089e2:	eb 50                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089e4:	83 ec 08             	sub    esp,0x8
c00089e7:	68 2f 46 02 c0       	push   0xc002462f
c00089ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089f0:	e8 e7 7d ff ff       	call   c00007dc <strcmp>
c00089f5:	83 c4 10             	add    esp,0x10
c00089f8:	85 c0                	test   eax,eax
c00089fa:	0f 94 c0             	sete   al
c00089fd:	84 c0                	test   al,al
c00089ff:	74 07                	je     c0008a08 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0008a01:	b8 8c 8c 02 c0       	mov    eax,0xc0028c8c
c0008a06:	eb 2c                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a08:	83 ec 08             	sub    esp,0x8
c0008a0b:	68 3c 46 02 c0       	push   0xc002463c
c0008a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a14:	e8 c3 7d ff ff       	call   c00007dc <strcmp>
c0008a19:	83 c4 10             	add    esp,0x10
c0008a1c:	85 c0                	test   eax,eax
c0008a1e:	0f 94 c0             	sete   al
c0008a21:	84 c0                	test   al,al
c0008a23:	74 07                	je     c0008a2c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a25:	b8 8d 8c 02 c0       	mov    eax,0xc0028c8d
c0008a2a:	eb 08                	jmp    c0008a34 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a2c:	b8 00 00 00 00       	mov    eax,0x0
c0008a31:	8d 76 00             	lea    esi,[esi+0x0]
c0008a34:	83 c4 0c             	add    esp,0xc
c0008a37:	c3                   	ret    

c0008a38 <Computer::close(int, int, void*)>:
c0008a38:	57                   	push   edi
c0008a39:	56                   	push   esi
c0008a3a:	53                   	push   ebx
c0008a3b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a3f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a43:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a47:	83 ec 0c             	sub    esp,0xc
c0008a4a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a50:	e8 07 5d 00 00       	call   c000e75c <Device::closeAll()>
c0008a55:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a5b:	83 c4 10             	add    esp,0x10
c0008a5e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a60:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a64:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a6c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a74:	5b                   	pop    ebx
c0008a75:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a78:	5e                   	pop    esi
c0008a79:	5f                   	pop    edi
c0008a7a:	ff e0                	jmp    eax

c0008a7c <Krnl::firstTask()>:
c0008a7c:	53                   	push   ebx
c0008a7d:	83 ec 14             	sub    esp,0x14
c0008a80:	68 49 46 02 c0       	push   0xc0024649
c0008a85:	e8 43 13 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0008a8a:	fb                   	sti    
c0008a8b:	c7 04 24 60 46 02 c0 	mov    DWORD PTR [esp],0xc0024660
c0008a92:	e8 36 13 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0008a97:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a9e:	e8 d0 12 00 00       	call   c0009d73 <malloc>
c0008aa3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008aaa:	89 c3                	mov    ebx,eax
c0008aac:	ff 35 d0 a1 02 c0    	push   DWORD PTR ds:0xc002a1d0
c0008ab2:	68 79 46 02 c0       	push   0xc0024679
c0008ab7:	6a 01                	push   0x1
c0008ab9:	50                   	push   eax
c0008aba:	e8 bd 00 01 00       	call   c0018b7c <Process::Process(bool, char const*, Process*, char**)>
c0008abf:	83 c4 20             	add    esp,0x20
c0008ac2:	68 ff 00 00 00       	push   0xff
c0008ac7:	6a 00                	push   0x0
c0008ac9:	68 6b 97 00 c0       	push   0xc000976b
c0008ace:	53                   	push   ebx
c0008acf:	e8 b0 02 01 00       	call   c0018d84 <Process::createThread(void (*)(void*), void*, int)>
c0008ad4:	6a 7a                	push   0x7a
c0008ad6:	6a 00                	push   0x0
c0008ad8:	68 c8 97 01 c0       	push   0xc00197c8
c0008add:	ff 35 d0 a1 02 c0    	push   DWORD PTR ds:0xc002a1d0
c0008ae3:	e8 9c 02 01 00       	call   c0018d84 <Process::createThread(void (*)(void*), void*, int)>
c0008ae8:	83 c4 14             	add    esp,0x14
c0008aeb:	a3 88 a1 02 c0       	mov    ds:0xc002a188,eax
c0008af0:	68 6c 49 02 c0       	push   0xc002496c
c0008af5:	c6 05 8d 8c 02 c0 01 	mov    BYTE PTR ds:0xc0028c8d,0x1
c0008afc:	e8 cc 12 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0008b01:	e8 9d 10 01 00       	call   c0019ba3 <Vm::initialise8086()>
c0008b06:	e8 eb 48 00 00       	call   c000d3f6 <Fs::initVFS()>
c0008b0b:	c7 04 24 86 46 02 c0 	mov    DWORD PTR [esp],0xc0024686
c0008b12:	e8 b6 12 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0008b17:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0008b1c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b22:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b24:	6a 00                	push   0x0
c0008b26:	6a 00                	push   0x0
c0008b28:	6a 00                	push   0x0
c0008b2a:	50                   	push   eax
c0008b2b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b2e:	83 c4 14             	add    esp,0x14
c0008b31:	68 6c 49 02 c0       	push   0xc002496c
c0008b36:	e8 92 12 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0008b3b:	e8 aa e8 00 00       	call   c00173ea <Sys::loadSyscalls()>
c0008b40:	e8 e3 c4 00 00       	call   c0015028 <Krnl::loadSystemEnv()>
c0008b45:	e8 35 c9 00 00       	call   c001547f <Krnl::setupPowerManager()>
c0008b4a:	83 c4 0c             	add    esp,0xc
c0008b4d:	6a 3a                	push   0x3a
c0008b4f:	68 a0 46 02 c0       	push   0xc00246a0
c0008b54:	68 a9 46 02 c0       	push   0xc00246a9
c0008b59:	e8 4f d6 00 00       	call   c00161ad <Reg::readIntWithDefault(char*, char*, int)>
c0008b5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b61:	e8 ae 54 00 00       	call   c000e014 <User::loadClockSettings(int)>
c0008b66:	c7 04 24 90 49 02 c0 	mov    DWORD PTR [esp],0xc0024990
c0008b6d:	e8 5b 12 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0008b72:	58                   	pop    eax
c0008b73:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0008b78:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b7e:	e8 99 5b 00 00       	call   c000e71c <Device::loadDriversForAll()>
c0008b83:	c7 04 24 b1 46 02 c0 	mov    DWORD PTR [esp],0xc00246b1
c0008b8a:	e8 3e 12 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0008b8f:	e8 fc bf 00 00       	call   c0014b90 <Krnl::startCPUs()>
c0008b94:	c7 04 24 cb 46 02 c0 	mov    DWORD PTR [esp],0xc00246cb
c0008b9b:	e8 2d 12 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0008ba0:	5a                   	pop    edx
c0008ba1:	8b 1d 88 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c88
c0008ba7:	59                   	pop    ecx
c0008ba8:	6a 01                	push   0x1
c0008baa:	68 dc 46 02 c0       	push   0xc00246dc
c0008baf:	e8 06 fa 00 00       	call   c00185ba <Thr::loadDLL(char const*, bool)>
c0008bb4:	5a                   	pop    edx
c0008bb5:	59                   	pop    ecx
c0008bb6:	53                   	push   ebx
c0008bb7:	50                   	push   eax
c0008bb8:	e8 2e fc 00 00       	call   c00187eb <Thr::executeDLL(unsigned long, void*)>
c0008bbd:	83 c4 10             	add    esp,0x10
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	6a 02                	push   0x2
c0008bc5:	e8 ce 05 01 00       	call   c0019198 <blockTask(TaskState)>
c0008bca:	83 c4 10             	add    esp,0x10
c0008bcd:	eb f1                	jmp    c0008bc0 <Krnl::firstTask()+0x144>
c0008bcf:	90                   	nop

c0008bd0 <Computer::Computer()>:
c0008bd0:	83 ec 0c             	sub    esp,0xc
c0008bd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd7:	83 ec 08             	sub    esp,0x8
c0008bda:	68 f8 46 02 c0       	push   0xc00246f8
c0008bdf:	50                   	push   eax
c0008be0:	e8 f1 5b 00 00       	call   c000e7d6 <Device::Device(char const*)>
c0008be5:	83 c4 10             	add    esp,0x10
c0008be8:	ba 40 4a 02 c0       	mov    edx,0xc0024a40
c0008bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf1:	89 10                	mov    DWORD PTR [eax],edx
c0008bf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c05:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c13:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c19:	83 ca 04             	or     edx,0x4
c0008c1c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2c:	0f b6 d0             	movzx  edx,al
c0008c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c33:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	0f b6 d0             	movzx  edx,al
c0008c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c4b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c5a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c61:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c67:	0f b6 d0             	movzx  edx,al
c0008c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c72:	83 e1 3f             	and    ecx,0x3f
c0008c75:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c83:	0f b6 d0             	movzx  edx,al
c0008c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	0f b6 d0             	movzx  edx,al
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cb1:	8d 50 01             	lea    edx,[eax+0x1]
c0008cb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cb8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cbe:	0f b6 d0             	movzx  edx,al
c0008cc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cc9:	83 e1 3f             	and    ecx,0x3f
c0008ccc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cda:	0f b6 d0             	movzx  edx,al
c0008cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	0f b6 d0             	movzx  edx,al
c0008cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d02:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008d08:	8d 50 01             	lea    edx,[eax+0x1]
c0008d0b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008d0f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d15:	0f b6 d0             	movzx  edx,al
c0008d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d1c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d20:	83 e1 3f             	and    ecx,0x3f
c0008d23:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d27:	90                   	nop
c0008d28:	83 c4 0c             	add    esp,0xc
c0008d2b:	c3                   	ret    

c0008d2c <Computer::setBootMessage(char const*)>:
c0008d2c:	c3                   	ret    
c0008d2d:	90                   	nop

c0008d2e <Computer::detectFeatures()>:
c0008d2e:	55                   	push   ebp
c0008d2f:	57                   	push   edi
c0008d30:	56                   	push   esi
c0008d31:	53                   	push   ebx
c0008d32:	83 ec 1c             	sub    esp,0x1c
c0008d35:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d39:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d43:	e8 e1 74 ff ff       	call   c0000229 <detectCPUID>
c0008d48:	85 c0                	test   eax,eax
c0008d4a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d50:	0f 95 c2             	setne  dl
c0008d53:	83 e0 fd             	and    eax,0xfffffffd
c0008d56:	d1 e2                	shl    edx,1
c0008d58:	09 d0                	or     eax,edx
c0008d5a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d60:	a8 02                	test   al,0x2
c0008d62:	75 46                	jne    c0008daa <Computer::detectFeatures()+0x7c>
c0008d64:	f6 05 a1 8c 02 c0 04 	test   BYTE PTR ds:0xc0028ca1,0x4
c0008d6b:	74 07                	je     c0008d74 <Computer::detectFeatures()+0x46>
c0008d6d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d74:	e8 dd 9f 01 00       	call   c0022d56 <x87Detect>
c0008d79:	83 e0 01             	and    eax,0x1
c0008d7c:	c1 e0 04             	shl    eax,0x4
c0008d7f:	88 c2                	mov    dl,al
c0008d81:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d87:	83 e0 ef             	and    eax,0xffffffef
c0008d8a:	09 d0                	or     eax,edx
c0008d8c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d92:	a8 10                	test   al,0x10
c0008d94:	0f 85 2a 01 00 00    	jne    c0008ec4 <Computer::detectFeatures()+0x196>
c0008d9a:	84 c0                	test   al,al
c0008d9c:	0f 88 45 01 00 00    	js     c0008ee7 <Computer::detectFeatures()+0x1b9>
c0008da2:	83 c4 1c             	add    esp,0x1c
c0008da5:	5b                   	pop    ebx
c0008da6:	5e                   	pop    esi
c0008da7:	5f                   	pop    edi
c0008da8:	5d                   	pop    ebp
c0008da9:	c3                   	ret    
c0008daa:	83 ec 0c             	sub    esp,0xc
c0008dad:	6a 20                	push   0x20
c0008daf:	e8 a2 a9 00 00       	call   c0013756 <CPU::cpuidCheckEDX(unsigned int)>
c0008db4:	83 e0 01             	and    eax,0x1
c0008db7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dbe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dc4:	83 e0 f7             	and    eax,0xfffffff7
c0008dc7:	09 d0                	or     eax,edx
c0008dc9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dcf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dd6:	e8 7b a9 00 00       	call   c0013756 <CPU::cpuidCheckEDX(unsigned int)>
c0008ddb:	83 e0 01             	and    eax,0x1
c0008dde:	88 c2                	mov    dl,al
c0008de0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008de6:	83 e0 fe             	and    eax,0xfffffffe
c0008de9:	09 d0                	or     eax,edx
c0008deb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008df1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008df8:	e8 59 a9 00 00       	call   c0013756 <CPU::cpuidCheckEDX(unsigned int)>
c0008dfd:	c1 e0 07             	shl    eax,0x7
c0008e00:	88 c2                	mov    dl,al
c0008e02:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008e08:	83 e0 7f             	and    eax,0x7f
c0008e0b:	09 d0                	or     eax,edx
c0008e0d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e13:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e1a:	e8 37 a9 00 00       	call   c0013756 <CPU::cpuidCheckEDX(unsigned int)>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	83 e0 01             	and    eax,0x1
c0008e25:	c1 e0 05             	shl    eax,0x5
c0008e28:	88 c2                	mov    dl,al
c0008e2a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e30:	83 e0 df             	and    eax,0xffffffdf
c0008e33:	09 d0                	or     eax,edx
c0008e35:	f7 05 a0 8c 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0028ca0,0x401
c0008e3f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e45:	0f 84 c2 00 00 00    	je     c0008f0d <Computer::detectFeatures()+0x1df>
c0008e4b:	83 e0 fe             	and    eax,0xfffffffe
c0008e4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e54:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e5a:	88 c2                	mov    dl,al
c0008e5c:	83 e2 09             	and    edx,0x9
c0008e5f:	fe ca                	dec    dl
c0008e61:	75 09                	jne    c0008e6c <Computer::detectFeatures()+0x13e>
c0008e63:	83 e0 fe             	and    eax,0xfffffffe
c0008e66:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e6c:	83 ec 0c             	sub    esp,0xc
c0008e6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e73:	50                   	push   eax
c0008e74:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e78:	55                   	push   ebp
c0008e79:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e7d:	57                   	push   edi
c0008e7e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e82:	56                   	push   esi
c0008e83:	68 00 00 00 80       	push   0x80000000
c0008e88:	e8 45 a8 00 00       	call   c00136d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e8d:	83 c4 20             	add    esp,0x20
c0008e90:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e97:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e9b:	0f 86 c3 fe ff ff    	jbe    c0008d64 <Computer::detectFeatures()+0x36>
c0008ea1:	83 ec 0c             	sub    esp,0xc
c0008ea4:	50                   	push   eax
c0008ea5:	55                   	push   ebp
c0008ea6:	57                   	push   edi
c0008ea7:	56                   	push   esi
c0008ea8:	68 01 00 00 80       	push   0x80000001
c0008ead:	e8 20 a8 00 00       	call   c00136d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008eb2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ebc:	83 c4 20             	add    esp,0x20
c0008ebf:	e9 a0 fe ff ff       	jmp    c0008d64 <Computer::detectFeatures()+0x36>
c0008ec4:	e8 47 9e 01 00       	call   c0022d10 <absolutelyNoChanceInHell>
c0008ec9:	88 c2                	mov    dl,al
c0008ecb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ed1:	c1 e2 07             	shl    edx,0x7
c0008ed4:	83 e0 7f             	and    eax,0x7f
c0008ed7:	09 d0                	or     eax,edx
c0008ed9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008edf:	84 c0                	test   al,al
c0008ee1:	0f 89 bb fe ff ff    	jns    c0008da2 <Computer::detectFeatures()+0x74>
c0008ee7:	e8 94 9d 01 00       	call   c0022c80 <avxDetect>
c0008eec:	83 e0 01             	and    eax,0x1
c0008eef:	c1 e0 05             	shl    eax,0x5
c0008ef2:	88 c2                	mov    dl,al
c0008ef4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008efa:	83 e0 df             	and    eax,0xffffffdf
c0008efd:	09 d0                	or     eax,edx
c0008eff:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008f05:	83 c4 1c             	add    esp,0x1c
c0008f08:	5b                   	pop    ebx
c0008f09:	5e                   	pop    esi
c0008f0a:	5f                   	pop    edi
c0008f0b:	5d                   	pop    ebp
c0008f0c:	c3                   	ret    
c0008f0d:	83 ec 0c             	sub    esp,0xc
c0008f10:	68 00 02 00 00       	push   0x200
c0008f15:	e8 3c a8 00 00       	call   c0013756 <CPU::cpuidCheckEDX(unsigned int)>
c0008f1a:	83 c4 10             	add    esp,0x10
c0008f1d:	83 e0 01             	and    eax,0x1
c0008f20:	88 c2                	mov    dl,al
c0008f22:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f28:	83 e0 fe             	and    eax,0xfffffffe
c0008f2b:	09 d0                	or     eax,edx
c0008f2d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f33:	e9 1c ff ff ff       	jmp    c0008e54 <Computer::detectFeatures()+0x126>

c0008f38 <Computer::displayFeatures()>:
c0008f38:	53                   	push   ebx
c0008f39:	83 ec 14             	sub    esp,0x14
c0008f3c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f40:	68 08 47 02 c0       	push   0xc0024708
c0008f45:	e8 15 41 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0008f4a:	83 c4 10             	add    esp,0x10
c0008f4d:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f54:	0f 85 73 02 00 00    	jne    c00091cd <Computer::displayFeatures()+0x295>
c0008f5a:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0008f5f:	83 ec 08             	sub    esp,0x8
c0008f62:	50                   	push   eax
c0008f63:	68 1b 47 02 c0       	push   0xc002471b
c0008f68:	e8 f2 40 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0008f6d:	83 c4 10             	add    esp,0x10
c0008f70:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f77:	0f 85 8c 02 00 00    	jne    c0009209 <Computer::displayFeatures()+0x2d1>
c0008f7d:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0008f82:	83 ec 08             	sub    esp,0x8
c0008f85:	50                   	push   eax
c0008f86:	68 2c 47 02 c0       	push   0xc002472c
c0008f8b:	e8 cf 40 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0008f90:	83 c4 10             	add    esp,0x10
c0008f93:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f9a:	0f 85 5f 02 00 00    	jne    c00091ff <Computer::displayFeatures()+0x2c7>
c0008fa0:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0008fa5:	83 ec 08             	sub    esp,0x8
c0008fa8:	50                   	push   eax
c0008fa9:	68 3d 47 02 c0       	push   0xc002473d
c0008fae:	e8 ac 40 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0008fb3:	83 c4 10             	add    esp,0x10
c0008fb6:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fbd:	0f 85 32 02 00 00    	jne    c00091f5 <Computer::displayFeatures()+0x2bd>
c0008fc3:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0008fc8:	83 ec 08             	sub    esp,0x8
c0008fcb:	50                   	push   eax
c0008fcc:	68 4e 47 02 c0       	push   0xc002474e
c0008fd1:	e8 89 40 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0008fd6:	83 c4 10             	add    esp,0x10
c0008fd9:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fe0:	0f 85 05 02 00 00    	jne    c00091eb <Computer::displayFeatures()+0x2b3>
c0008fe6:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0008feb:	83 ec 08             	sub    esp,0x8
c0008fee:	50                   	push   eax
c0008fef:	68 5f 47 02 c0       	push   0xc002475f
c0008ff4:	e8 66 40 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0008ff9:	83 c4 10             	add    esp,0x10
c0008ffc:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0009003:	0f 85 d8 01 00 00    	jne    c00091e1 <Computer::displayFeatures()+0x2a9>
c0009009:	b8 05 47 02 c0       	mov    eax,0xc0024705
c000900e:	83 ec 08             	sub    esp,0x8
c0009011:	50                   	push   eax
c0009012:	68 70 47 02 c0       	push   0xc0024770
c0009017:	e8 43 40 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000901c:	83 c4 10             	add    esp,0x10
c000901f:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c0009026:	0f 85 ab 01 00 00    	jne    c00091d7 <Computer::displayFeatures()+0x29f>
c000902c:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0009031:	83 ec 08             	sub    esp,0x8
c0009034:	50                   	push   eax
c0009035:	68 81 47 02 c0       	push   0xc0024781
c000903a:	e8 20 40 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000903f:	83 c4 10             	add    esp,0x10
c0009042:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009049:	0f 88 1b 02 00 00    	js     c000926a <Computer::displayFeatures()+0x332>
c000904f:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0009054:	83 ec 08             	sub    esp,0x8
c0009057:	50                   	push   eax
c0009058:	68 92 47 02 c0       	push   0xc0024792
c000905d:	e8 fd 3f 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0009062:	83 c4 10             	add    esp,0x10
c0009065:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000906c:	0f 85 a1 01 00 00    	jne    c0009213 <Computer::displayFeatures()+0x2db>
c0009072:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0009077:	83 ec 08             	sub    esp,0x8
c000907a:	50                   	push   eax
c000907b:	68 a3 47 02 c0       	push   0xc00247a3
c0009080:	e8 da 3f 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0009085:	83 c4 10             	add    esp,0x10
c0009088:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000908f:	0f 85 cb 01 00 00    	jne    c0009260 <Computer::displayFeatures()+0x328>
c0009095:	b8 05 47 02 c0       	mov    eax,0xc0024705
c000909a:	83 ec 08             	sub    esp,0x8
c000909d:	50                   	push   eax
c000909e:	68 b4 47 02 c0       	push   0xc00247b4
c00090a3:	e8 b7 3f 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00090a8:	83 c4 10             	add    esp,0x10
c00090ab:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c00090b2:	0f 85 9e 01 00 00    	jne    c0009256 <Computer::displayFeatures()+0x31e>
c00090b8:	b8 05 47 02 c0       	mov    eax,0xc0024705
c00090bd:	83 ec 08             	sub    esp,0x8
c00090c0:	50                   	push   eax
c00090c1:	68 c5 47 02 c0       	push   0xc00247c5
c00090c6:	e8 94 3f 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090d5:	0f 85 71 01 00 00    	jne    c000924c <Computer::displayFeatures()+0x314>
c00090db:	b8 05 47 02 c0       	mov    eax,0xc0024705
c00090e0:	83 ec 08             	sub    esp,0x8
c00090e3:	50                   	push   eax
c00090e4:	68 d6 47 02 c0       	push   0xc00247d6
c00090e9:	e8 71 3f 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00090ee:	83 c4 10             	add    esp,0x10
c00090f1:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090f8:	0f 85 44 01 00 00    	jne    c0009242 <Computer::displayFeatures()+0x30a>
c00090fe:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0009103:	83 ec 08             	sub    esp,0x8
c0009106:	50                   	push   eax
c0009107:	68 e7 47 02 c0       	push   0xc00247e7
c000910c:	e8 4e 3f 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000911b:	0f 85 17 01 00 00    	jne    c0009238 <Computer::displayFeatures()+0x300>
c0009121:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0009126:	83 ec 08             	sub    esp,0x8
c0009129:	50                   	push   eax
c000912a:	68 f8 47 02 c0       	push   0xc00247f8
c000912f:	e8 2b 3f 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0009134:	83 c4 10             	add    esp,0x10
c0009137:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000913e:	0f 85 ea 00 00 00    	jne    c000922e <Computer::displayFeatures()+0x2f6>
c0009144:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0009149:	83 ec 08             	sub    esp,0x8
c000914c:	50                   	push   eax
c000914d:	68 09 48 02 c0       	push   0xc0024809
c0009152:	e8 08 3f 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0009157:	83 c4 10             	add    esp,0x10
c000915a:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009161:	0f 88 0d 01 00 00    	js     c0009274 <Computer::displayFeatures()+0x33c>
c0009167:	b8 05 47 02 c0       	mov    eax,0xc0024705
c000916c:	83 ec 08             	sub    esp,0x8
c000916f:	50                   	push   eax
c0009170:	68 1a 48 02 c0       	push   0xc002481a
c0009175:	e8 e5 3e 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000917a:	83 c4 10             	add    esp,0x10
c000917d:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c0009184:	0f 85 9a 00 00 00    	jne    c0009224 <Computer::displayFeatures()+0x2ec>
c000918a:	b8 05 47 02 c0       	mov    eax,0xc0024705
c000918f:	83 ec 08             	sub    esp,0x8
c0009192:	50                   	push   eax
c0009193:	68 2b 48 02 c0       	push   0xc002482b
c0009198:	e8 c2 3e 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000919d:	83 c4 10             	add    esp,0x10
c00091a0:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c00091a7:	75 74                	jne    c000921d <Computer::displayFeatures()+0x2e5>
c00091a9:	b8 05 47 02 c0       	mov    eax,0xc0024705
c00091ae:	83 ec 08             	sub    esp,0x8
c00091b1:	50                   	push   eax
c00091b2:	68 3c 48 02 c0       	push   0xc002483c
c00091b7:	e8 a3 3e 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00091bc:	c7 44 24 20 3b 68 02 c0 	mov    DWORD PTR [esp+0x20],0xc002683b
c00091c4:	83 c4 18             	add    esp,0x18
c00091c7:	5b                   	pop    ebx
c00091c8:	e9 92 3e 00 00       	jmp    c000d05f <Dbg::kprintf(char const*, ...)>
c00091cd:	b8 01 47 02 c0       	mov    eax,0xc0024701
c00091d2:	e9 88 fd ff ff       	jmp    c0008f5f <Computer::displayFeatures()+0x27>
c00091d7:	b8 01 47 02 c0       	mov    eax,0xc0024701
c00091dc:	e9 50 fe ff ff       	jmp    c0009031 <Computer::displayFeatures()+0xf9>
c00091e1:	b8 01 47 02 c0       	mov    eax,0xc0024701
c00091e6:	e9 23 fe ff ff       	jmp    c000900e <Computer::displayFeatures()+0xd6>
c00091eb:	b8 01 47 02 c0       	mov    eax,0xc0024701
c00091f0:	e9 f6 fd ff ff       	jmp    c0008feb <Computer::displayFeatures()+0xb3>
c00091f5:	b8 01 47 02 c0       	mov    eax,0xc0024701
c00091fa:	e9 c9 fd ff ff       	jmp    c0008fc8 <Computer::displayFeatures()+0x90>
c00091ff:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0009204:	e9 9c fd ff ff       	jmp    c0008fa5 <Computer::displayFeatures()+0x6d>
c0009209:	b8 01 47 02 c0       	mov    eax,0xc0024701
c000920e:	e9 6f fd ff ff       	jmp    c0008f82 <Computer::displayFeatures()+0x4a>
c0009213:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0009218:	e9 5a fe ff ff       	jmp    c0009077 <Computer::displayFeatures()+0x13f>
c000921d:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0009222:	eb 8a                	jmp    c00091ae <Computer::displayFeatures()+0x276>
c0009224:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0009229:	e9 61 ff ff ff       	jmp    c000918f <Computer::displayFeatures()+0x257>
c000922e:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0009233:	e9 11 ff ff ff       	jmp    c0009149 <Computer::displayFeatures()+0x211>
c0009238:	b8 01 47 02 c0       	mov    eax,0xc0024701
c000923d:	e9 e4 fe ff ff       	jmp    c0009126 <Computer::displayFeatures()+0x1ee>
c0009242:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0009247:	e9 b7 fe ff ff       	jmp    c0009103 <Computer::displayFeatures()+0x1cb>
c000924c:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0009251:	e9 8a fe ff ff       	jmp    c00090e0 <Computer::displayFeatures()+0x1a8>
c0009256:	b8 01 47 02 c0       	mov    eax,0xc0024701
c000925b:	e9 5d fe ff ff       	jmp    c00090bd <Computer::displayFeatures()+0x185>
c0009260:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0009265:	e9 30 fe ff ff       	jmp    c000909a <Computer::displayFeatures()+0x162>
c000926a:	b8 01 47 02 c0       	mov    eax,0xc0024701
c000926f:	e9 e0 fd ff ff       	jmp    c0009054 <Computer::displayFeatures()+0x11c>
c0009274:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0009279:	e9 ee fe ff ff       	jmp    c000916c <Computer::displayFeatures()+0x234>

c000927e <Computer::rdmsr(unsigned int)>:
c000927e:	83 ec 0c             	sub    esp,0xc
c0009281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009285:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000928c:	74 0a                	je     c0009298 <Computer::rdmsr(unsigned int)+0x1a>
c000928e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009292:	0f 32                	rdmsr  
c0009294:	83 c4 0c             	add    esp,0xc
c0009297:	c3                   	ret    
c0009298:	83 ec 0c             	sub    esp,0xc
c000929b:	68 4d 48 02 c0       	push   0xc002484d
c00092a0:	e8 8c be 00 00       	call   c0015131 <Krnl::panic(char const*)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	eb e4                	jmp    c000928e <Computer::rdmsr(unsigned int)+0x10>

c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>:
c00092aa:	57                   	push   edi
c00092ab:	56                   	push   esi
c00092ac:	52                   	push   edx
c00092ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092b1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00092b5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092b9:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092c0:	74 0e                	je     c00092d0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092c6:	89 f0                	mov    eax,esi
c00092c8:	89 fa                	mov    edx,edi
c00092ca:	0f 30                	wrmsr  
c00092cc:	58                   	pop    eax
c00092cd:	5e                   	pop    esi
c00092ce:	5f                   	pop    edi
c00092cf:	c3                   	ret    
c00092d0:	83 ec 0c             	sub    esp,0xc
c00092d3:	68 53 48 02 c0       	push   0xc0024853
c00092d8:	e8 54 be 00 00       	call   c0015131 <Krnl::panic(char const*)>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	eb e0                	jmp    c00092c2 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092e2 <Computer::shutdown()>:
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092eb:	6a 00                	push   0x0
c00092ed:	6a 00                	push   0x0
c00092ef:	6a 00                	push   0x0
c00092f1:	50                   	push   eax
c00092f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092f5:	83 c4 1c             	add    esp,0x1c
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <Computer::restart()>:
c00092fa:	83 ec 0c             	sub    esp,0xc
c00092fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009301:	8b 10                	mov    edx,DWORD PTR [eax]
c0009303:	6a 00                	push   0x0
c0009305:	6a 00                	push   0x0
c0009307:	6a 01                	push   0x1
c0009309:	50                   	push   eax
c000930a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000930d:	83 c4 1c             	add    esp,0x1c
c0009310:	c3                   	ret    
c0009311:	90                   	nop

c0009312 <Computer::sleep()>:
c0009312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009316:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000931c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009320:	e9 ff 99 00 00       	jmp    c0012d24 <ACPI::sleep()>
c0009325:	90                   	nop

c0009326 <Computer::nmiEnabled()>:
c0009326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000932a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009330:	c3                   	ret    
c0009331:	90                   	nop

c0009332 <Computer::readCMOS(unsigned char)>:
c0009332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009336:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000933d:	19 c0                	sbb    eax,eax
c000933f:	83 e0 80             	and    eax,0xffffff80
c0009342:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009346:	e6 70                	out    0x70,al
c0009348:	e4 71                	in     al,0x71
c000934a:	c3                   	ret    
c000934b:	90                   	nop

c000934c <Computer::enableNMI(bool)>:
c000934c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009354:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000935a:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0009362:	eb ce                	jmp    c0009332 <Computer::readCMOS(unsigned char)>

c0009364 <Computer::open(int, int, void*)>:
c0009364:	56                   	push   esi
c0009365:	53                   	push   ebx
c0009366:	83 ec 10             	sub    esp,0x10
c0009369:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000936d:	68 b0 49 02 c0       	push   0xc00249b0
c0009372:	e8 56 0a 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0009377:	58                   	pop    eax
c0009378:	f6 05 a0 8c 02 c0 04 	test   BYTE PTR ds:0xc0028ca0,0x4
c000937f:	5a                   	pop    edx
c0009380:	0f 94 05 60 80 02 c0 	sete   BYTE PTR ds:0xc0028060
c0009387:	68 58 01 00 00       	push   0x158
c000938c:	68 59 48 02 c0       	push   0xc0024859
c0009391:	e8 c9 3c 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0009396:	59                   	pop    ecx
c0009397:	5e                   	pop    esi
c0009398:	68 14 01 00 00       	push   0x114
c000939d:	68 6f 48 02 c0       	push   0xc002486f
c00093a2:	e8 b8 3c 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00093a7:	58                   	pop    eax
c00093a8:	5a                   	pop    edx
c00093a9:	6a 14                	push   0x14
c00093ab:	68 83 48 02 c0       	push   0xc0024883
c00093b0:	e8 aa 3c 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00093b5:	59                   	pop    ecx
c00093b6:	5e                   	pop    esi
c00093b7:	68 1f 07 00 00       	push   0x71f
c00093bc:	68 96 48 02 c0       	push   0xc0024896
c00093c1:	e8 99 3c 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00093c6:	58                   	pop    eax
c00093c7:	5a                   	pop    edx
c00093c8:	6a 5f                	push   0x5f
c00093ca:	68 ad 48 02 c0       	push   0xc00248ad
c00093cf:	e8 8b 3c 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00093d4:	c7 04 24 c3 48 02 c0 	mov    DWORD PTR [esp],0xc00248c3
c00093db:	e8 7f 3c 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00093e0:	c7 04 24 d5 48 02 c0 	mov    DWORD PTR [esp],0xc00248d5
c00093e7:	e8 e1 09 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c00093ec:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00093f3:	e8 7b 09 00 00       	call   c0009d73 <malloc>
c00093f8:	89 c6                	mov    esi,eax
c00093fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fd:	e8 da 91 00 00       	call   c00125dc <ACPI::ACPI()>
c0009402:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0009408:	c7 04 24 ef 48 02 c0 	mov    DWORD PTR [esp],0xc00248ef
c000940f:	e8 b9 09 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0009414:	59                   	pop    ecx
c0009415:	5e                   	pop    esi
c0009416:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000941c:	53                   	push   ebx
c000941d:	e8 b0 51 00 00       	call   c000e5d2 <Device::addChild(Device*)>
c0009422:	c7 04 24 d4 49 02 c0 	mov    DWORD PTR [esp],0xc00249d4
c0009429:	e8 9f 09 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c000942e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009431:	e8 f8 f8 ff ff       	call   c0008d2e <Computer::detectFeatures()>
c0009436:	c7 04 24 f4 49 02 c0 	mov    DWORD PTR [esp],0xc00249f4
c000943d:	e8 8b 09 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0009442:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009445:	e8 ee fa ff ff       	call   c0008f38 <Computer::displayFeatures()>
c000944a:	c7 04 24 09 49 02 c0 	mov    DWORD PTR [esp],0xc0024909
c0009451:	e8 77 09 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0009456:	58                   	pop    eax
c0009457:	5a                   	pop    edx
c0009458:	6a 01                	push   0x1
c000945a:	53                   	push   ebx
c000945b:	e8 ec fe ff ff       	call   c000934c <Computer::enableNMI(bool)>
c0009460:	c7 04 24 b1 46 02 c0 	mov    DWORD PTR [esp],0xc00246b1
c0009467:	e8 61 09 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c000946c:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009473:	e8 fb 08 00 00       	call   c0009d73 <malloc>
c0009478:	89 04 24             	mov    DWORD PTR [esp],eax
c000947b:	89 c6                	mov    esi,eax
c000947d:	e8 8c a3 00 00       	call   c001380e <CPU::CPU()>
c0009482:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0009488:	59                   	pop    ecx
c0009489:	58                   	pop    eax
c000948a:	56                   	push   esi
c000948b:	53                   	push   ebx
c000948c:	e8 41 51 00 00       	call   c000e5d2 <Device::addChild(Device*)>
c0009491:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0009497:	8b 10                	mov    edx,DWORD PTR [eax]
c0009499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000949d:	6a 00                	push   0x0
c000949f:	6a 00                	push   0x0
c00094a1:	50                   	push   eax
c00094a2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094a5:	83 c4 20             	add    esp,0x20
c00094a8:	e8 5b c0 00 00       	call   c0015508 <Krnl::initRNG()>
c00094ad:	83 ec 0c             	sub    esp,0xc
c00094b0:	68 14 4a 02 c0       	push   0xc0024a14
c00094b5:	e8 13 09 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c00094ba:	e8 af 56 00 00       	call   c000eb6e <setupFPU()>
c00094bf:	83 c4 10             	add    esp,0x10
c00094c2:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c00094c8:	85 c0                	test   eax,eax
c00094ca:	74 1f                	je     c00094eb <Computer::open(int, int, void*)+0x187>
c00094cc:	83 ec 08             	sub    esp,0x8
c00094cf:	50                   	push   eax
c00094d0:	53                   	push   ebx
c00094d1:	e8 fc 50 00 00       	call   c000e5d2 <Device::addChild(Device*)>
c00094d6:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c00094dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00094de:	6a 00                	push   0x0
c00094e0:	6a 00                	push   0x0
c00094e2:	6a 00                	push   0x0
c00094e4:	50                   	push   eax
c00094e5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00094e8:	83 c4 20             	add    esp,0x20
c00094eb:	83 ec 0c             	sub    esp,0xc
c00094ee:	68 1a 49 02 c0       	push   0xc002491a
c00094f3:	e8 d5 08 00 00       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c00094f8:	c7 04 24 7c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a7c
c00094ff:	e8 94 f9 00 00       	call   c0018e98 <setupMultitasking(void (*)())>
c0009504:	83 c4 14             	add    esp,0x14
c0009507:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000950c:	5b                   	pop    ebx
c000950d:	5e                   	pop    esi
c000950e:	c3                   	ret    
c000950f:	90                   	nop

c0009510 <Computer::disableNMI()>:
c0009510:	6a 00                	push   0x0
c0009512:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009516:	e8 31 fe ff ff       	call   c000934c <Computer::enableNMI(bool)>
c000951b:	58                   	pop    eax
c000951c:	5a                   	pop    edx
c000951d:	c3                   	ret    

c000951e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000951e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009522:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009529:	19 c0                	sbb    eax,eax
c000952b:	83 e0 80             	and    eax,0xffffff80
c000952e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009532:	e6 70                	out    0x70,al
c0009534:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009538:	e6 71                	out    0x71,al
c000953a:	c3                   	ret    
c000953b:	90                   	nop

c000953c <Computer::handleNMI()>:
c000953c:	56                   	push   esi
c000953d:	53                   	push   ebx
c000953e:	83 ec 10             	sub    esp,0x10
c0009541:	e4 92                	in     al,0x92
c0009543:	89 c6                	mov    esi,eax
c0009545:	e4 61                	in     al,0x61
c0009547:	68 35 49 02 c0       	push   0xc0024935
c000954c:	88 c3                	mov    bl,al
c000954e:	e8 0c 3b 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0009553:	83 c4 10             	add    esp,0x10
c0009556:	83 e6 10             	and    esi,0x10
c0009559:	75 0d                	jne    c0009568 <Computer::handleNMI()+0x2c>
c000955b:	f6 c3 40             	test   bl,0x40
c000955e:	75 1d                	jne    c000957d <Computer::handleNMI()+0x41>
c0009560:	84 db                	test   bl,bl
c0009562:	78 2d                	js     c0009591 <Computer::handleNMI()+0x55>
c0009564:	58                   	pop    eax
c0009565:	5b                   	pop    ebx
c0009566:	5e                   	pop    esi
c0009567:	c3                   	ret    
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 46 49 02 c0       	push   0xc0024946
c0009570:	e8 bc bb 00 00       	call   c0015131 <Krnl::panic(char const*)>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	f6 c3 40             	test   bl,0x40
c000957b:	74 e3                	je     c0009560 <Computer::handleNMI()+0x24>
c000957d:	83 ec 0c             	sub    esp,0xc
c0009580:	68 53 49 02 c0       	push   0xc0024953
c0009585:	e8 a7 bb 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000958a:	83 c4 10             	add    esp,0x10
c000958d:	84 db                	test   bl,bl
c000958f:	79 d3                	jns    c0009564 <Computer::handleNMI()+0x28>
c0009591:	c7 44 24 10 5d 49 02 c0 	mov    DWORD PTR [esp+0x10],0xc002495d
c0009599:	5a                   	pop    edx
c000959a:	5b                   	pop    ebx
c000959b:	5e                   	pop    esi
c000959c:	e9 90 bb 00 00       	jmp    c0015131 <Krnl::panic(char const*)>
c00095a1:	90                   	nop

c00095a2 <Computer::setDiskActivityLight(int, bool)>:
c00095a2:	56                   	push   esi
c00095a3:	53                   	push   ebx
c00095a4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00095a8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00095ad:	77 1b                	ja     c00095ca <Computer::setDiskActivityLight(int, bool)+0x28>
c00095af:	e4 92                	in     al,0x92
c00095b1:	bb 40 00 00 00       	mov    ebx,0x40
c00095b6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00095ba:	89 da                	mov    edx,ebx
c00095bc:	d3 e2                	shl    edx,cl
c00095be:	89 f1                	mov    ecx,esi
c00095c0:	f7 d2                	not    edx
c00095c2:	d3 e3                	shl    ebx,cl
c00095c4:	21 d0                	and    eax,edx
c00095c6:	09 d8                	or     eax,ebx
c00095c8:	e6 92                	out    0x92,al
c00095ca:	5b                   	pop    ebx
c00095cb:	5e                   	pop    esi
c00095cc:	c3                   	ret    
c00095cd:	90                   	nop

c00095ce <GDTEntry::setBase(unsigned int)>:
c00095ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00095d6:	89 c1                	mov    ecx,eax
c00095d8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00095dc:	c1 e9 10             	shr    ecx,0x10
c00095df:	c1 e8 18             	shr    eax,0x18
c00095e2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c00095e5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c00095e8:	c3                   	ret    
c00095e9:	90                   	nop

c00095ea <GDTEntry::setLimit(unsigned int)>:
c00095ea:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00095ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095f2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c00095f5:	66 89 01             	mov    WORD PTR [ecx],ax
c00095f8:	83 e2 f0             	and    edx,0xfffffff0
c00095fb:	c1 e8 10             	shr    eax,0x10
c00095fe:	83 e0 0f             	and    eax,0xf
c0009601:	09 d0                	or     eax,edx
c0009603:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009606:	c3                   	ret    
c0009607:	90                   	nop

c0009608 <GDT::GDT()>:
c0009608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000960c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009616:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000961c:	90                   	nop
c000961d:	c3                   	ret    

c000961e <GDT::addEntry(GDTEntry)>:
c000961e:	53                   	push   ebx
c000961f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009623:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009627:	8b 02                	mov    eax,DWORD PTR [edx]
c0009629:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000962d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009631:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009635:	8d 48 01             	lea    ecx,[eax+0x1]
c0009638:	c1 e0 03             	shl    eax,0x3
c000963b:	89 0a                	mov    DWORD PTR [edx],ecx
c000963d:	5b                   	pop    ebx
c000963e:	c3                   	ret    
c000963f:	90                   	nop

c0009640 <GDT::getNumberOfEntries()>:
c0009640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009644:	8b 00                	mov    eax,DWORD PTR [eax]
c0009646:	c3                   	ret    
c0009647:	90                   	nop

c0009648 <GDT::flush()>:
c0009648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000964c:	8b 10                	mov    edx,DWORD PTR [eax]
c000964e:	83 c0 04             	add    eax,0x4
c0009651:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0009658:	a3 92 8c 02 c0       	mov    ds:0xc0028c92,eax
c000965d:	66 89 15 90 8c 02 c0 	mov    WORD PTR ds:0xc0028c90,dx
c0009664:	e9 2c 6d ff ff       	jmp    c0000395 <loadGDT>
c0009669:	90                   	nop

c000966a <GDT::setup()>:
c000966a:	55                   	push   ebp
c000966b:	57                   	push   edi
c000966c:	56                   	push   esi
c000966d:	53                   	push   ebx
c000966e:	83 ec 3c             	sub    esp,0x3c
c0009671:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009675:	6a 00                	push   0x0
c0009677:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000967b:	53                   	push   ebx
c000967c:	e8 4d ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c0009681:	6a 00                	push   0x0
c0009683:	53                   	push   ebx
c0009684:	e8 61 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c0009689:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c0009691:	6a 00                	push   0x0
c0009693:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0009697:	53                   	push   ebx
c0009698:	e8 31 ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c000969d:	68 ff ff ff 00       	push   0xffffff
c00096a2:	53                   	push   ebx
c00096a3:	e8 42 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c00096a8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00096ac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096b1:	0d 00 9a c0 00       	or     eax,0xc09a00
c00096b6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00096ba:	83 c4 20             	add    esp,0x20
c00096bd:	6a 00                	push   0x0
c00096bf:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00096c3:	53                   	push   ebx
c00096c4:	e8 05 ff ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c00096c9:	68 ff ff ff 00       	push   0xffffff
c00096ce:	53                   	push   ebx
c00096cf:	e8 16 ff ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c00096d4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00096d8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00096dc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096e0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00096e4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00096e8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00096ed:	0d 00 92 c0 00       	or     eax,0xc09200
c00096f2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00096f6:	89 d8                	mov    eax,ebx
c00096f8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00096fc:	80 cc 60             	or     ah,0x60
c00096ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009703:	83 c4 0c             	add    esp,0xc
c0009706:	89 f8                	mov    eax,edi
c0009708:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000970c:	80 cc 60             	or     ah,0x60
c000970f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009713:	89 c7                	mov    edi,eax
c0009715:	55                   	push   ebp
c0009716:	e8 03 ff ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c000971b:	83 c4 0c             	add    esp,0xc
c000971e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009722:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009726:	55                   	push   ebp
c0009727:	e8 f2 fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c000972c:	83 c4 0c             	add    esp,0xc
c000972f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009733:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009737:	55                   	push   ebp
c0009738:	e8 e1 fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c000973d:	83 c4 0c             	add    esp,0xc
c0009740:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009744:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009748:	53                   	push   ebx
c0009749:	51                   	push   ecx
c000974a:	55                   	push   ebp
c000974b:	e8 ce fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c0009750:	83 c4 0c             	add    esp,0xc
c0009753:	57                   	push   edi
c0009754:	56                   	push   esi
c0009755:	55                   	push   ebp
c0009756:	e8 c3 fe ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c000975b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000975e:	e8 e5 fe ff ff       	call   c0009648 <GDT::flush()>
c0009763:	83 c4 4c             	add    esp,0x4c
c0009766:	5b                   	pop    ebx
c0009767:	5e                   	pop    esi
c0009768:	5f                   	pop    edi
c0009769:	5d                   	pop    ebp
c000976a:	c3                   	ret    

c000976b <idleFunction(void*)>:
c000976b:	53                   	push   ebx
c000976c:	83 ec 08             	sub    esp,0x8
c000976f:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0009774:	48                   	dec    eax
c0009775:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c000977a:	75 01                	jne    c000977d <idleFunction(void*)+0x12>
c000977c:	fb                   	sti    
c000977d:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0009782:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0009788:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000978f:	74 3c                	je     c00097cd <idleFunction(void*)+0x62>
c0009791:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009798:	74 33                	je     c00097cd <idleFunction(void*)+0x62>
c000979a:	31 db                	xor    ebx,ebx
c000979c:	52                   	push   edx
c000979d:	52                   	push   edx
c000979e:	68 e1 00 00 00       	push   0xe1
c00097a3:	50                   	push   eax
c00097a4:	e8 d5 fa ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c00097a9:	53                   	push   ebx
c00097aa:	83 e0 02             	and    eax,0x2
c00097ad:	50                   	push   eax
c00097ae:	68 e1 00 00 00       	push   0xe1
c00097b3:	ff 35 88 8c 02 c0    	push   DWORD PTR ds:0xc0028c88
c00097b9:	e8 ec fa ff ff       	call   c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>
c00097be:	83 c4 20             	add    esp,0x20
c00097c1:	e8 ee 69 ff ff       	call   c00001b4 <doTPAUSE>
c00097c6:	e8 47 9b 01 00       	call   c0023312 <idleCommon()>
c00097cb:	eb f4                	jmp    c00097c1 <idleFunction(void*)+0x56>
c00097cd:	fb                   	sti    
c00097ce:	f4                   	hlt    
c00097cf:	e8 3e 9b 01 00       	call   c0023312 <idleCommon()>
c00097d4:	eb f7                	jmp    c00097cd <idleFunction(void*)+0x62>
c00097d6:	66 90                	xchg   ax,ax

c00097d8 <IDTEntry::IDTEntry(bool)>:
c00097d8:	83 ec 04             	sub    esp,0x4
c00097db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097df:	88 04 24             	mov    BYTE PTR [esp],al
c00097e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097e6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00097ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097f0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00097f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097f8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00097fb:	83 e2 f0             	and    edx,0xfffffff0
c00097fe:	83 ca 0e             	or     edx,0xe
c0009801:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009804:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009808:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000980b:	83 e2 ef             	and    edx,0xffffffef
c000980e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009811:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009815:	74 05                	je     c000981c <IDTEntry::IDTEntry(bool)+0x44>
c0009817:	b2 03                	mov    dl,0x3
c0009819:	eb 05                	jmp    c0009820 <IDTEntry::IDTEntry(bool)+0x48>
c000981b:	90                   	nop
c000981c:	b2 00                	mov    dl,0x0
c000981e:	66 90                	xchg   ax,ax
c0009820:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009824:	83 e2 03             	and    edx,0x3
c0009827:	88 d1                	mov    cl,dl
c0009829:	c1 e1 05             	shl    ecx,0x5
c000982c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000982f:	83 e2 9f             	and    edx,0xffffff9f
c0009832:	09 ca                	or     edx,ecx
c0009834:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000983b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000983e:	83 ca 80             	or     edx,0xffffff80
c0009841:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009844:	90                   	nop
c0009845:	83 c4 04             	add    esp,0x4
c0009848:	c3                   	ret    
c0009849:	90                   	nop

c000984a <IDTEntry::setOffset(unsigned int)>:
c000984a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000984e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009852:	66 89 02             	mov    WORD PTR [edx],ax
c0009855:	c1 e8 10             	shr    eax,0x10
c0009858:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000985c:	c3                   	ret    
c000985d:	90                   	nop
c000985e:	66 90                	xchg   ax,ax

c0009860 <IDT::IDT()>:
c0009860:	90                   	nop
c0009861:	c3                   	ret    

c0009862 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0009862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009866:	83 c0 30             	add    eax,0x30
c0009869:	c3                   	ret    

c000986a <IDT::addEntry(IDTEntry, int)>:
c000986a:	53                   	push   ebx
c000986b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000986f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009873:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009877:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000987b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000987e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0009882:	5b                   	pop    ebx
c0009883:	c3                   	ret    

c0009884 <IDT::addEntry(int, void (*)(), bool)>:
c0009884:	53                   	push   ebx
c0009885:	83 ec 10             	sub    esp,0x10
c0009888:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000988d:	50                   	push   eax
c000988e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0009892:	53                   	push   ebx
c0009893:	e8 40 ff ff ff       	call   c00097d8 <IDTEntry::IDTEntry(bool)>
c0009898:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000989c:	53                   	push   ebx
c000989d:	e8 a8 ff ff ff       	call   c000984a <IDTEntry::setOffset(unsigned int)>
c00098a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00098a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00098aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00098ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00098b2:	e8 b3 ff ff ff       	call   c000986a <IDT::addEntry(IDTEntry, int)>
c00098b7:	83 c4 30             	add    esp,0x30
c00098ba:	5b                   	pop    ebx
c00098bb:	c3                   	ret    

c00098bc <IDT::flush()>:
c00098bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00098c0:	66 c7 05 98 8c 02 c0 ff 07 	mov    WORD PTR ds:0xc0028c98,0x7ff
c00098c9:	a3 9a 8c 02 c0       	mov    ds:0xc0028c9a,eax
c00098ce:	0f 01 1d 98 8c 02 c0 	lidtd  ds:0xc0028c98
c00098d5:	c3                   	ret    

c00098d6 <IDT::setup()>:
c00098d6:	57                   	push   edi
c00098d7:	56                   	push   esi
c00098d8:	53                   	push   ebx
c00098d9:	83 ec 10             	sub    esp,0x10
c00098dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00098e0:	6a 00                	push   0x0
c00098e2:	68 b5 03 00 c0       	push   0xc00003b5
c00098e7:	6a 00                	push   0x0
c00098e9:	53                   	push   ebx
c00098ea:	e8 95 ff ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c00098ef:	6a 00                	push   0x0
c00098f1:	68 c5 03 00 c0       	push   0xc00003c5
c00098f6:	6a 01                	push   0x1
c00098f8:	53                   	push   ebx
c00098f9:	e8 86 ff ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c00098fe:	83 c4 20             	add    esp,0x20
c0009901:	6a 00                	push   0x0
c0009903:	68 cf 03 00 c0       	push   0xc00003cf
c0009908:	6a 02                	push   0x2
c000990a:	53                   	push   ebx
c000990b:	e8 74 ff ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009910:	6a 00                	push   0x0
c0009912:	68 d9 03 00 c0       	push   0xc00003d9
c0009917:	6a 03                	push   0x3
c0009919:	53                   	push   ebx
c000991a:	e8 65 ff ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c000991f:	83 c4 20             	add    esp,0x20
c0009922:	6a 00                	push   0x0
c0009924:	68 e3 03 00 c0       	push   0xc00003e3
c0009929:	6a 04                	push   0x4
c000992b:	53                   	push   ebx
c000992c:	e8 53 ff ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009931:	6a 00                	push   0x0
c0009933:	68 ed 03 00 c0       	push   0xc00003ed
c0009938:	6a 05                	push   0x5
c000993a:	53                   	push   ebx
c000993b:	e8 44 ff ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009940:	83 c4 20             	add    esp,0x20
c0009943:	6a 00                	push   0x0
c0009945:	68 f7 03 00 c0       	push   0xc00003f7
c000994a:	6a 06                	push   0x6
c000994c:	53                   	push   ebx
c000994d:	e8 32 ff ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009952:	6a 00                	push   0x0
c0009954:	68 01 04 00 c0       	push   0xc0000401
c0009959:	6a 07                	push   0x7
c000995b:	53                   	push   ebx
c000995c:	e8 23 ff ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009961:	83 c4 20             	add    esp,0x20
c0009964:	6a 00                	push   0x0
c0009966:	68 0b 04 00 c0       	push   0xc000040b
c000996b:	6a 08                	push   0x8
c000996d:	53                   	push   ebx
c000996e:	e8 11 ff ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009973:	6a 00                	push   0x0
c0009975:	68 13 04 00 c0       	push   0xc0000413
c000997a:	6a 09                	push   0x9
c000997c:	53                   	push   ebx
c000997d:	e8 02 ff ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009982:	83 c4 20             	add    esp,0x20
c0009985:	6a 00                	push   0x0
c0009987:	68 1d 04 00 c0       	push   0xc000041d
c000998c:	6a 0a                	push   0xa
c000998e:	53                   	push   ebx
c000998f:	e8 f0 fe ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009994:	6a 00                	push   0x0
c0009996:	68 25 04 00 c0       	push   0xc0000425
c000999b:	6a 0b                	push   0xb
c000999d:	53                   	push   ebx
c000999e:	e8 e1 fe ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c00099a3:	83 c4 20             	add    esp,0x20
c00099a6:	6a 00                	push   0x0
c00099a8:	68 2d 04 00 c0       	push   0xc000042d
c00099ad:	6a 0c                	push   0xc
c00099af:	53                   	push   ebx
c00099b0:	e8 cf fe ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c00099b5:	6a 00                	push   0x0
c00099b7:	68 35 04 00 c0       	push   0xc0000435
c00099bc:	6a 0d                	push   0xd
c00099be:	53                   	push   ebx
c00099bf:	e8 c0 fe ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c00099c4:	83 c4 20             	add    esp,0x20
c00099c7:	6a 00                	push   0x0
c00099c9:	68 3d 04 00 c0       	push   0xc000043d
c00099ce:	6a 0e                	push   0xe
c00099d0:	53                   	push   ebx
c00099d1:	e8 ae fe ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c00099d6:	6a 00                	push   0x0
c00099d8:	68 45 04 00 c0       	push   0xc0000445
c00099dd:	6a 0f                	push   0xf
c00099df:	53                   	push   ebx
c00099e0:	e8 9f fe ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c00099e5:	83 c4 20             	add    esp,0x20
c00099e8:	6a 00                	push   0x0
c00099ea:	68 4f 04 00 c0       	push   0xc000044f
c00099ef:	6a 10                	push   0x10
c00099f1:	53                   	push   ebx
c00099f2:	e8 8d fe ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c00099f7:	6a 00                	push   0x0
c00099f9:	68 59 04 00 c0       	push   0xc0000459
c00099fe:	6a 11                	push   0x11
c0009a00:	53                   	push   ebx
c0009a01:	e8 7e fe ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009a06:	83 c4 20             	add    esp,0x20
c0009a09:	6a 00                	push   0x0
c0009a0b:	68 63 04 00 c0       	push   0xc0000463
c0009a10:	6a 12                	push   0x12
c0009a12:	53                   	push   ebx
c0009a13:	e8 6c fe ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009a18:	6a 01                	push   0x1
c0009a1a:	68 fd 04 00 c0       	push   0xc00004fd
c0009a1f:	6a 60                	push   0x60
c0009a21:	53                   	push   ebx
c0009a22:	e8 5d fe ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009a27:	83 c4 20             	add    esp,0x20
c0009a2a:	6a 00                	push   0x0
c0009a2c:	68 04 05 00 c0       	push   0xc0000504
c0009a31:	6a 20                	push   0x20
c0009a33:	53                   	push   ebx
c0009a34:	e8 4b fe ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009a39:	6a 00                	push   0x0
c0009a3b:	68 ef 04 00 c0       	push   0xc00004ef
c0009a40:	6a 21                	push   0x21
c0009a42:	53                   	push   ebx
c0009a43:	e8 3c fe ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009a48:	83 c4 20             	add    esp,0x20
c0009a4b:	6a 00                	push   0x0
c0009a4d:	68 f6 04 00 c0       	push   0xc00004f6
c0009a52:	6a 22                	push   0x22
c0009a54:	53                   	push   ebx
c0009a55:	e8 2a fe ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009a5a:	6a 00                	push   0x0
c0009a5c:	68 6d 04 00 c0       	push   0xc000046d
c0009a61:	6a 23                	push   0x23
c0009a63:	53                   	push   ebx
c0009a64:	e8 1b fe ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009a69:	83 c4 20             	add    esp,0x20
c0009a6c:	6a 00                	push   0x0
c0009a6e:	68 77 04 00 c0       	push   0xc0000477
c0009a73:	6a 24                	push   0x24
c0009a75:	53                   	push   ebx
c0009a76:	e8 09 fe ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009a7b:	6a 00                	push   0x0
c0009a7d:	68 81 04 00 c0       	push   0xc0000481
c0009a82:	6a 25                	push   0x25
c0009a84:	53                   	push   ebx
c0009a85:	e8 fa fd ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009a8a:	83 c4 20             	add    esp,0x20
c0009a8d:	6a 00                	push   0x0
c0009a8f:	68 8b 04 00 c0       	push   0xc000048b
c0009a94:	6a 26                	push   0x26
c0009a96:	53                   	push   ebx
c0009a97:	e8 e8 fd ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009a9c:	6a 00                	push   0x0
c0009a9e:	68 95 04 00 c0       	push   0xc0000495
c0009aa3:	6a 27                	push   0x27
c0009aa5:	53                   	push   ebx
c0009aa6:	e8 d9 fd ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009aab:	83 c4 20             	add    esp,0x20
c0009aae:	6a 00                	push   0x0
c0009ab0:	68 9f 04 00 c0       	push   0xc000049f
c0009ab5:	6a 28                	push   0x28
c0009ab7:	53                   	push   ebx
c0009ab8:	e8 c7 fd ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009abd:	6a 00                	push   0x0
c0009abf:	68 a9 04 00 c0       	push   0xc00004a9
c0009ac4:	6a 29                	push   0x29
c0009ac6:	53                   	push   ebx
c0009ac7:	e8 b8 fd ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009acc:	83 c4 20             	add    esp,0x20
c0009acf:	6a 00                	push   0x0
c0009ad1:	68 b3 04 00 c0       	push   0xc00004b3
c0009ad6:	6a 2a                	push   0x2a
c0009ad8:	53                   	push   ebx
c0009ad9:	e8 a6 fd ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009ade:	6a 00                	push   0x0
c0009ae0:	68 bd 04 00 c0       	push   0xc00004bd
c0009ae5:	6a 2b                	push   0x2b
c0009ae7:	53                   	push   ebx
c0009ae8:	e8 97 fd ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009aed:	83 c4 20             	add    esp,0x20
c0009af0:	6a 00                	push   0x0
c0009af2:	68 c7 04 00 c0       	push   0xc00004c7
c0009af7:	6a 2c                	push   0x2c
c0009af9:	53                   	push   ebx
c0009afa:	e8 85 fd ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009aff:	6a 00                	push   0x0
c0009b01:	68 d1 04 00 c0       	push   0xc00004d1
c0009b06:	6a 2d                	push   0x2d
c0009b08:	53                   	push   ebx
c0009b09:	e8 76 fd ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009b0e:	83 c4 20             	add    esp,0x20
c0009b11:	6a 00                	push   0x0
c0009b13:	68 db 04 00 c0       	push   0xc00004db
c0009b18:	6a 2e                	push   0x2e
c0009b1a:	53                   	push   ebx
c0009b1b:	e8 64 fd ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009b20:	6a 00                	push   0x0
c0009b22:	68 e5 04 00 c0       	push   0xc00004e5
c0009b27:	6a 2f                	push   0x2f
c0009b29:	53                   	push   ebx
c0009b2a:	e8 55 fd ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009b2f:	83 c4 20             	add    esp,0x20
c0009b32:	6a 00                	push   0x0
c0009b34:	68 3b 05 00 c0       	push   0xc000053b
c0009b39:	6a 30                	push   0x30
c0009b3b:	53                   	push   ebx
c0009b3c:	e8 43 fd ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009b41:	6a 00                	push   0x0
c0009b43:	68 45 05 00 c0       	push   0xc0000545
c0009b48:	6a 31                	push   0x31
c0009b4a:	53                   	push   ebx
c0009b4b:	e8 34 fd ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009b50:	83 c4 20             	add    esp,0x20
c0009b53:	6a 00                	push   0x0
c0009b55:	68 4f 05 00 c0       	push   0xc000054f
c0009b5a:	6a 32                	push   0x32
c0009b5c:	53                   	push   ebx
c0009b5d:	e8 22 fd ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009b62:	6a 00                	push   0x0
c0009b64:	68 59 05 00 c0       	push   0xc0000559
c0009b69:	6a 33                	push   0x33
c0009b6b:	53                   	push   ebx
c0009b6c:	e8 13 fd ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009b71:	83 c4 20             	add    esp,0x20
c0009b74:	6a 00                	push   0x0
c0009b76:	68 63 05 00 c0       	push   0xc0000563
c0009b7b:	6a 34                	push   0x34
c0009b7d:	53                   	push   ebx
c0009b7e:	e8 01 fd ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009b83:	6a 00                	push   0x0
c0009b85:	68 6d 05 00 c0       	push   0xc000056d
c0009b8a:	6a 35                	push   0x35
c0009b8c:	53                   	push   ebx
c0009b8d:	e8 f2 fc ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009b92:	83 c4 20             	add    esp,0x20
c0009b95:	6a 00                	push   0x0
c0009b97:	68 77 05 00 c0       	push   0xc0000577
c0009b9c:	6a 36                	push   0x36
c0009b9e:	53                   	push   ebx
c0009b9f:	e8 e0 fc ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009ba4:	6a 00                	push   0x0
c0009ba6:	68 81 05 00 c0       	push   0xc0000581
c0009bab:	6a 37                	push   0x37
c0009bad:	53                   	push   ebx
c0009bae:	e8 d1 fc ff ff       	call   c0009884 <IDT::addEntry(int, void (*)(), bool)>
c0009bb3:	83 c4 1c             	add    esp,0x1c
c0009bb6:	6a 03                	push   0x3
c0009bb8:	6a 02                	push   0x2
c0009bba:	ff 35 b0 8d 02 c0    	push   DWORD PTR ds:0xc0028db0
c0009bc0:	e8 1d 29 00 00       	call   c000c4e2 <VAS::allocatePages(int, int)>
c0009bc5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009bcc:	89 c6                	mov    esi,eax
c0009bce:	e8 a0 01 00 00       	call   c0009d73 <malloc>
c0009bd3:	81 c6 00 20 00 00    	add    esi,0x2000
c0009bd9:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bdc:	89 c7                	mov    edi,eax
c0009bde:	e8 99 1a 00 00       	call   c000b67c <TSS::TSS()>
c0009be3:	83 c4 0c             	add    esp,0xc
c0009be6:	68 0b 04 00 c0       	push   0xc000040b
c0009beb:	56                   	push   esi
c0009bec:	57                   	push   edi
c0009bed:	e8 ce 1a 00 00       	call   c000b6c0 <TSS::setup(unsigned long, unsigned long)>
c0009bf2:	89 c6                	mov    esi,eax
c0009bf4:	58                   	pop    eax
c0009bf5:	5a                   	pop    edx
c0009bf6:	6a 00                	push   0x0
c0009bf8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009bfc:	50                   	push   eax
c0009bfd:	e8 d6 fb ff ff       	call   c00097d8 <IDTEntry::IDTEntry(bool)>
c0009c02:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c06:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009c0b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009c12:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009c18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c1c:	80 ce 05             	or     dh,0x5
c0009c1f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009c22:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c2a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009c2d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009c30:	e8 87 fc ff ff       	call   c00098bc <IDT::flush()>
c0009c35:	83 c4 20             	add    esp,0x20
c0009c38:	5b                   	pop    ebx
c0009c39:	5e                   	pop    esi
c0009c3a:	5f                   	pop    edi
c0009c3b:	c3                   	ret    

c0009c3c <sbrk>:
c0009c3c:	55                   	push   ebp
c0009c3d:	57                   	push   edi
c0009c3e:	56                   	push   esi
c0009c3f:	53                   	push   ebx
c0009c40:	83 ec 24             	sub    esp,0x24
c0009c43:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009c47:	53                   	push   ebx
c0009c48:	68 64 4a 02 c0       	push   0xc0024a64
c0009c4d:	e8 0d 34 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0009c52:	83 c4 10             	add    esp,0x10
c0009c55:	85 db                	test   ebx,ebx
c0009c57:	74 5f                	je     c0009cb8 <sbrk+0x7c>
c0009c59:	78 64                	js     c0009cbf <sbrk+0x83>
c0009c5b:	a1 fc 7e 02 c0       	mov    eax,ds:0xc0027efc
c0009c60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c64:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009c6a:	89 dd                	mov    ebp,ebx
c0009c6c:	78 69                	js     c0009cd7 <sbrk+0x9b>
c0009c6e:	c1 fd 0c             	sar    ebp,0xc
c0009c71:	bb 00 00 00 00       	mov    ebx,0x0
c0009c76:	8b 35 b0 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028db0
c0009c7c:	8b 3d fc 7e 02 c0    	mov    edi,DWORD PTR ds:0xc0027efc
c0009c82:	e8 a3 07 00 00       	call   c000a42a <Phys::allocatePage()>
c0009c87:	68 01 04 00 00       	push   0x401
c0009c8c:	57                   	push   edi
c0009c8d:	50                   	push   eax
c0009c8e:	56                   	push   esi
c0009c8f:	e8 4c 27 00 00       	call   c000c3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c94:	81 05 fc 7e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0027efc,0x1000
c0009c9e:	43                   	inc    ebx
c0009c9f:	83 c4 10             	add    esp,0x10
c0009ca2:	39 dd                	cmp    ebp,ebx
c0009ca4:	75 d0                	jne    c0009c76 <sbrk+0x3a>
c0009ca6:	0f 20 d8             	mov    eax,cr3
c0009ca9:	0f 22 d8             	mov    cr3,eax
c0009cac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cb0:	83 c4 1c             	add    esp,0x1c
c0009cb3:	5b                   	pop    ebx
c0009cb4:	5e                   	pop    esi
c0009cb5:	5f                   	pop    edi
c0009cb6:	5d                   	pop    ebp
c0009cb7:	c3                   	ret    
c0009cb8:	a1 fc 7e 02 c0       	mov    eax,ds:0xc0027efc
c0009cbd:	eb f1                	jmp    c0009cb0 <sbrk+0x74>
c0009cbf:	83 ec 08             	sub    esp,0x8
c0009cc2:	53                   	push   ebx
c0009cc3:	68 90 4a 02 c0       	push   0xc0024a90
c0009cc8:	e8 92 33 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0009ccd:	83 c4 10             	add    esp,0x10
c0009cd0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009cd5:	eb d9                	jmp    c0009cb0 <sbrk+0x74>
c0009cd7:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009cdd:	eb 8f                	jmp    c0009c6e <sbrk+0x32>

c0009cdf <mmap>:
c0009cdf:	83 ec 18             	sub    esp,0x18
c0009ce2:	68 82 4a 02 c0       	push   0xc0024a82
c0009ce7:	e8 45 b4 00 00       	call   c0015131 <Krnl::panic(char const*)>
c0009cec:	b8 00 00 00 00       	mov    eax,0x0
c0009cf1:	83 c4 1c             	add    esp,0x1c
c0009cf4:	c3                   	ret    

c0009cf5 <munmap>:
c0009cf5:	83 ec 18             	sub    esp,0x18
c0009cf8:	68 87 4a 02 c0       	push   0xc0024a87
c0009cfd:	e8 2f b4 00 00       	call   c0015131 <Krnl::panic(char const*)>
c0009d02:	b8 00 00 00 00       	mov    eax,0x0
c0009d07:	83 c4 1c             	add    esp,0x1c
c0009d0a:	c3                   	ret    

c0009d0b <liballoc_lock()>:
c0009d0b:	fa                   	cli    
c0009d0c:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c0009d12:	b8 00 00 00 00       	mov    eax,0x0
c0009d17:	c3                   	ret    

c0009d18 <liballoc_unlock()>:
c0009d18:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0009d1d:	48                   	dec    eax
c0009d1e:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0009d23:	75 01                	jne    c0009d26 <liballoc_unlock()+0xe>
c0009d25:	fb                   	sti    
c0009d26:	b8 00 00 00 00       	mov    eax,0x0
c0009d2b:	c3                   	ret    

c0009d2c <liballoc_alloc(int)>:
c0009d2c:	83 ec 10             	sub    esp,0x10
c0009d2f:	6a 01                	push   0x1
c0009d31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d35:	ff 35 b0 8d 02 c0    	push   DWORD PTR ds:0xc0028db0
c0009d3b:	e8 a2 27 00 00       	call   c000c4e2 <VAS::allocatePages(int, int)>
c0009d40:	83 c4 1c             	add    esp,0x1c
c0009d43:	c3                   	ret    

c0009d44 <liballoc_free(void*, int)>:
c0009d44:	83 ec 14             	sub    esp,0x14
c0009d47:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4b:	ff 35 b0 8d 02 c0    	push   DWORD PTR ds:0xc0028db0
c0009d51:	e8 36 24 00 00       	call   c000c18c <VAS::freeAllocatedPages(unsigned long)>
c0009d56:	b8 00 00 00 00       	mov    eax,0x0
c0009d5b:	83 c4 1c             	add    esp,0x1c
c0009d5e:	c3                   	ret    

c0009d5f <realloc>:
c0009d5f:	83 ec 14             	sub    esp,0x14
c0009d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d6a:	e8 01 78 ff ff       	call   c0001570 <dlrealloc>
c0009d6f:	83 c4 1c             	add    esp,0x1c
c0009d72:	c3                   	ret    

c0009d73 <malloc>:
c0009d73:	83 ec 18             	sub    esp,0x18
c0009d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d7a:	e8 b4 72 ff ff       	call   c0001033 <dlmalloc>
c0009d7f:	83 c4 1c             	add    esp,0x1c
c0009d82:	c3                   	ret    

c0009d83 <free>:
c0009d83:	83 ec 18             	sub    esp,0x18
c0009d86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d8a:	e8 49 6f ff ff       	call   c0000cd8 <dlfree>
c0009d8f:	83 c4 1c             	add    esp,0x1c
c0009d92:	c3                   	ret    

c0009d93 <rfree>:
c0009d93:	83 ec 18             	sub    esp,0x18
c0009d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d9a:	e8 39 6f ff ff       	call   c0000cd8 <dlfree>
c0009d9f:	83 c4 1c             	add    esp,0x1c
c0009da2:	c3                   	ret    

c0009da3 <calloc>:
c0009da3:	56                   	push   esi
c0009da4:	53                   	push   ebx
c0009da5:	83 ec 10             	sub    esp,0x10
c0009da8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009dac:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009db1:	53                   	push   ebx
c0009db2:	e8 bc ff ff ff       	call   c0009d73 <malloc>
c0009db7:	89 c6                	mov    esi,eax
c0009db9:	83 c4 0c             	add    esp,0xc
c0009dbc:	53                   	push   ebx
c0009dbd:	6a 00                	push   0x0
c0009dbf:	50                   	push   eax
c0009dc0:	e8 cf 68 ff ff       	call   c0000694 <memset>
c0009dc5:	89 f0                	mov    eax,esi
c0009dc7:	83 c4 14             	add    esp,0x14
c0009dca:	5b                   	pop    ebx
c0009dcb:	5e                   	pop    esi
c0009dcc:	c3                   	ret    

c0009dcd <Krnl::setBootMessage(char const*)>:
c0009dcd:	57                   	push   edi
c0009dce:	56                   	push   esi
c0009dcf:	53                   	push   ebx
c0009dd0:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009dd6:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009ddd:	68 9e 00 00 00       	push   0x9e
c0009de2:	6a 00                	push   0x0
c0009de4:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009de8:	56                   	push   esi
c0009de9:	e8 a6 68 ff ff       	call   c0000694 <memset>
c0009dee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009df1:	e8 ba 68 ff ff       	call   c00006b0 <strlen>
c0009df6:	ba 50 00 00 00       	mov    edx,0x50
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	29 c2                	sub    edx,eax
c0009e00:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009e04:	d1 ea                	shr    edx,1
c0009e06:	84 c0                	test   al,al
c0009e08:	74 19                	je     c0009e23 <Krnl::setBootMessage(char const*)+0x56>
c0009e0a:	01 d2                	add    edx,edx
c0009e0c:	43                   	inc    ebx
c0009e0d:	01 f2                	add    edx,esi
c0009e0f:	80 cc 0f             	or     ah,0xf
c0009e12:	83 c2 02             	add    edx,0x2
c0009e15:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009e19:	43                   	inc    ebx
c0009e1a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009e1f:	84 c0                	test   al,al
c0009e21:	75 ec                	jne    c0009e0f <Krnl::setBootMessage(char const*)+0x42>
c0009e23:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009e28:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009e2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009e2f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009e35:	5b                   	pop    ebx
c0009e36:	5e                   	pop    esi
c0009e37:	5f                   	pop    edi
c0009e38:	c3                   	ret    

c0009e39 <kernel_main>:
c0009e39:	57                   	push   edi
c0009e3a:	56                   	push   esi
c0009e3b:	53                   	push   ebx
c0009e3c:	83 ec 20             	sub    esp,0x20
c0009e3f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009e44:	a3 a0 8c 02 c0       	mov    ds:0xc0028ca0,eax
c0009e49:	f6 c4 08             	test   ah,0x8
c0009e4c:	0f 85 7a 03 00 00    	jne    c000a1cc <kernel_main+0x393>
c0009e52:	31 f6                	xor    esi,esi
c0009e54:	bf f9 03 00 00       	mov    edi,0x3f9
c0009e59:	89 f0                	mov    eax,esi
c0009e5b:	89 fa                	mov    edx,edi
c0009e5d:	ee                   	out    dx,al
c0009e5e:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009e63:	b0 80                	mov    al,0x80
c0009e65:	89 da                	mov    edx,ebx
c0009e67:	ee                   	out    dx,al
c0009e68:	b1 03                	mov    cl,0x3
c0009e6a:	ba f8 03 00 00       	mov    edx,0x3f8
c0009e6f:	88 c8                	mov    al,cl
c0009e71:	ee                   	out    dx,al
c0009e72:	89 f0                	mov    eax,esi
c0009e74:	89 fa                	mov    edx,edi
c0009e76:	ee                   	out    dx,al
c0009e77:	88 c8                	mov    al,cl
c0009e79:	89 da                	mov    edx,ebx
c0009e7b:	ee                   	out    dx,al
c0009e7c:	b0 c7                	mov    al,0xc7
c0009e7e:	ba fa 03 00 00       	mov    edx,0x3fa
c0009e83:	ee                   	out    dx,al
c0009e84:	b0 0b                	mov    al,0xb
c0009e86:	ba fc 03 00 00       	mov    edx,0x3fc
c0009e8b:	ee                   	out    dx,al
c0009e8c:	83 ec 0c             	sub    esp,0xc
c0009e8f:	68 c0 4a 02 c0       	push   0xc0024ac0
c0009e94:	e8 c6 31 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0009e99:	83 c4 10             	add    esp,0x10
c0009e9c:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0009ea3:	0f 85 eb 02 00 00    	jne    c000a194 <kernel_main+0x35b>
c0009ea9:	e8 d2 0c 00 00       	call   c000ab80 <installVgaTextImplementation()>
c0009eae:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0009eb5:	0f 85 94 02 00 00    	jne    c000a14f <kernel_main+0x316>
c0009ebb:	0f b6 05 00 7f 02 c0 	movzx  eax,BYTE PTR ds:0xc0027f00
c0009ec2:	84 c0                	test   al,al
c0009ec4:	74 7b                	je     c0009f41 <kernel_main+0x108>
c0009ec6:	31 db                	xor    ebx,ebx
c0009ec8:	bf 0a 00 00 00       	mov    edi,0xa
c0009ecd:	be 05 00 00 00       	mov    esi,0x5
c0009ed2:	31 c9                	xor    ecx,ecx
c0009ed4:	eb 2a                	jmp    c0009f00 <kernel_main+0xc7>
c0009ed6:	3c 0d                	cmp    al,0xd
c0009ed8:	74 1a                	je     c0009ef4 <kernel_main+0xbb>
c0009eda:	3c 0a                	cmp    al,0xa
c0009edc:	74 40                	je     c0009f1e <kernel_main+0xe5>
c0009ede:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009ee1:	80 cc 0e             	or     ah,0xe
c0009ee4:	c1 e2 04             	shl    edx,0x4
c0009ee7:	01 ca                	add    edx,ecx
c0009ee9:	41                   	inc    ecx
c0009eea:	01 fa                	add    edx,edi
c0009eec:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009ef4:	43                   	inc    ebx
c0009ef5:	0f b6 83 00 7f 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8100]
c0009efc:	84 c0                	test   al,al
c0009efe:	74 32                	je     c0009f32 <kernel_main+0xf9>
c0009f00:	80 b9 36 7f 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd80ca],0xdb
c0009f07:	75 cd                	jne    c0009ed6 <kernel_main+0x9d>
c0009f09:	0f b6 91 35 7f 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd80cb]
c0009f10:	83 e2 fe             	and    edx,0xfffffffe
c0009f13:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009f19:	75 bb                	jne    c0009ed6 <kernel_main+0x9d>
c0009f1b:	47                   	inc    edi
c0009f1c:	eb b8                	jmp    c0009ed6 <kernel_main+0x9d>
c0009f1e:	43                   	inc    ebx
c0009f1f:	46                   	inc    esi
c0009f20:	31 c9                	xor    ecx,ecx
c0009f22:	0f b6 83 00 7f 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8100]
c0009f29:	bf 0a 00 00 00       	mov    edi,0xa
c0009f2e:	84 c0                	test   al,al
c0009f30:	75 ce                	jne    c0009f00 <kernel_main+0xc7>
c0009f32:	8b 15 a0 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028ca0
c0009f38:	80 e6 08             	and    dh,0x8
c0009f3b:	0f 85 bf 00 00 00    	jne    c000a000 <kernel_main+0x1c7>
c0009f41:	83 ec 0c             	sub    esp,0xc
c0009f44:	68 5c 4b 02 c0       	push   0xc0024b5c
c0009f49:	e8 7f fe ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0009f4e:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009f53:	05 ff 0f 00 00       	add    eax,0xfff
c0009f58:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f60:	e8 44 06 00 00       	call   c000a5a9 <Phys::physicalMemorySetup(unsigned int)>
c0009f65:	83 c4 10             	add    esp,0x10
c0009f68:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0009f6f:	0f 85 a2 01 00 00    	jne    c000a117 <kernel_main+0x2de>
c0009f75:	e8 7e 1f 00 00       	call   c000bef8 <Virt::virtualMemorySetup()>
c0009f7a:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0009f81:	0f 85 58 01 00 00    	jne    c000a0df <kernel_main+0x2a6>
c0009f87:	83 ec 0c             	sub    esp,0xc
c0009f8a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009f8e:	56                   	push   esi
c0009f8f:	e8 20 20 00 00       	call   c000bfb4 <VAS::VAS()>
c0009f94:	83 c4 10             	add    esp,0x10
c0009f97:	89 35 b0 8d 02 c0    	mov    DWORD PTR ds:0xc0028db0,esi
c0009f9d:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0009fa4:	0f 85 fd 00 00 00    	jne    c000a0a7 <kernel_main+0x26e>
c0009faa:	e8 71 60 ff ff       	call   c0000020 <callGlobalConstructors>
c0009faf:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0009fb6:	0f 85 b3 00 00 00    	jne    c000a06f <kernel_main+0x236>
c0009fbc:	83 ec 0c             	sub    esp,0xc
c0009fbf:	68 ec 01 00 00       	push   0x1ec
c0009fc4:	e8 aa fd ff ff       	call   c0009d73 <malloc>
c0009fc9:	89 c3                	mov    ebx,eax
c0009fcb:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fce:	e8 fd eb ff ff       	call   c0008bd0 <Computer::Computer()>
c0009fd3:	83 c4 10             	add    esp,0x10
c0009fd6:	89 1d 88 8c 02 c0    	mov    DWORD PTR ds:0xc0028c88,ebx
c0009fdc:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0009fe3:	75 53                	jne    c000a038 <kernel_main+0x1ff>
c0009fe5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009fe7:	6a 00                	push   0x0
c0009fe9:	6a 00                	push   0x0
c0009feb:	6a 00                	push   0x0
c0009fed:	53                   	push   ebx
c0009fee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009ff1:	89 34 24             	mov    DWORD PTR [esp],esi
c0009ff4:	e8 6b 22 00 00       	call   c000c264 <VAS::~VAS()>
c0009ff9:	83 c4 30             	add    esp,0x30
c0009ffc:	5b                   	pop    ebx
c0009ffd:	5e                   	pop    esi
c0009ffe:	5f                   	pop    edi
c0009fff:	c3                   	ret    
c000a000:	83 ec 0c             	sub    esp,0xc
c000a003:	68 0b 4b 02 c0       	push   0xc0024b0b
c000a008:	e8 c0 fd ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c000a00d:	83 c4 10             	add    esp,0x10
c000a010:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c000a017:	0f 85 24 ff ff ff    	jne    c0009f41 <kernel_main+0x108>
c000a01d:	eb 04                	jmp    c000a023 <kernel_main+0x1ea>
c000a01f:	3c 1c                	cmp    al,0x1c
c000a021:	74 06                	je     c000a029 <kernel_main+0x1f0>
c000a023:	e4 60                	in     al,0x60
c000a025:	3c 5a                	cmp    al,0x5a
c000a027:	75 f6                	jne    c000a01f <kernel_main+0x1e6>
c000a029:	e4 60                	in     al,0x60
c000a02b:	3c 5a                	cmp    al,0x5a
c000a02d:	74 fa                	je     c000a029 <kernel_main+0x1f0>
c000a02f:	3c 1c                	cmp    al,0x1c
c000a031:	74 f6                	je     c000a029 <kernel_main+0x1f0>
c000a033:	e9 09 ff ff ff       	jmp    c0009f41 <kernel_main+0x108>
c000a038:	83 ec 0c             	sub    esp,0xc
c000a03b:	68 4a 4b 02 c0       	push   0xc0024b4a
c000a040:	e8 88 fd ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c000a045:	83 c4 10             	add    esp,0x10
c000a048:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c000a04f:	74 0c                	je     c000a05d <kernel_main+0x224>
c000a051:	8b 1d 88 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c88
c000a057:	eb 8c                	jmp    c0009fe5 <kernel_main+0x1ac>
c000a059:	3c 1c                	cmp    al,0x1c
c000a05b:	74 06                	je     c000a063 <kernel_main+0x22a>
c000a05d:	e4 60                	in     al,0x60
c000a05f:	3c 5a                	cmp    al,0x5a
c000a061:	75 f6                	jne    c000a059 <kernel_main+0x220>
c000a063:	e4 60                	in     al,0x60
c000a065:	3c 5a                	cmp    al,0x5a
c000a067:	74 fa                	je     c000a063 <kernel_main+0x22a>
c000a069:	3c 1c                	cmp    al,0x1c
c000a06b:	74 f6                	je     c000a063 <kernel_main+0x22a>
c000a06d:	eb e2                	jmp    c000a051 <kernel_main+0x218>
c000a06f:	83 ec 0c             	sub    esp,0xc
c000a072:	68 37 4b 02 c0       	push   0xc0024b37
c000a077:	e8 51 fd ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c000a07c:	83 c4 10             	add    esp,0x10
c000a07f:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c000a086:	0f 85 30 ff ff ff    	jne    c0009fbc <kernel_main+0x183>
c000a08c:	eb 04                	jmp    c000a092 <kernel_main+0x259>
c000a08e:	3c 1c                	cmp    al,0x1c
c000a090:	74 06                	je     c000a098 <kernel_main+0x25f>
c000a092:	e4 60                	in     al,0x60
c000a094:	3c 5a                	cmp    al,0x5a
c000a096:	75 f6                	jne    c000a08e <kernel_main+0x255>
c000a098:	e4 60                	in     al,0x60
c000a09a:	3c 5a                	cmp    al,0x5a
c000a09c:	74 fa                	je     c000a098 <kernel_main+0x25f>
c000a09e:	3c 1c                	cmp    al,0x1c
c000a0a0:	74 f6                	je     c000a098 <kernel_main+0x25f>
c000a0a2:	e9 15 ff ff ff       	jmp    c0009fbc <kernel_main+0x183>
c000a0a7:	83 ec 0c             	sub    esp,0xc
c000a0aa:	68 2d 4b 02 c0       	push   0xc0024b2d
c000a0af:	e8 19 fd ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c000a0be:	0f 85 e6 fe ff ff    	jne    c0009faa <kernel_main+0x171>
c000a0c4:	eb 04                	jmp    c000a0ca <kernel_main+0x291>
c000a0c6:	3c 1c                	cmp    al,0x1c
c000a0c8:	74 06                	je     c000a0d0 <kernel_main+0x297>
c000a0ca:	e4 60                	in     al,0x60
c000a0cc:	3c 5a                	cmp    al,0x5a
c000a0ce:	75 f6                	jne    c000a0c6 <kernel_main+0x28d>
c000a0d0:	e4 60                	in     al,0x60
c000a0d2:	3c 5a                	cmp    al,0x5a
c000a0d4:	74 fa                	je     c000a0d0 <kernel_main+0x297>
c000a0d6:	3c 1c                	cmp    al,0x1c
c000a0d8:	74 f6                	je     c000a0d0 <kernel_main+0x297>
c000a0da:	e9 cb fe ff ff       	jmp    c0009faa <kernel_main+0x171>
c000a0df:	83 ec 0c             	sub    esp,0xc
c000a0e2:	68 22 4b 02 c0       	push   0xc0024b22
c000a0e7:	e8 e1 fc ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c000a0ec:	83 c4 10             	add    esp,0x10
c000a0ef:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c000a0f6:	0f 85 8b fe ff ff    	jne    c0009f87 <kernel_main+0x14e>
c000a0fc:	eb 04                	jmp    c000a102 <kernel_main+0x2c9>
c000a0fe:	3c 1c                	cmp    al,0x1c
c000a100:	74 06                	je     c000a108 <kernel_main+0x2cf>
c000a102:	e4 60                	in     al,0x60
c000a104:	3c 5a                	cmp    al,0x5a
c000a106:	75 f6                	jne    c000a0fe <kernel_main+0x2c5>
c000a108:	e4 60                	in     al,0x60
c000a10a:	3c 5a                	cmp    al,0x5a
c000a10c:	74 fa                	je     c000a108 <kernel_main+0x2cf>
c000a10e:	3c 1c                	cmp    al,0x1c
c000a110:	74 f6                	je     c000a108 <kernel_main+0x2cf>
c000a112:	e9 70 fe ff ff       	jmp    c0009f87 <kernel_main+0x14e>
c000a117:	83 ec 0c             	sub    esp,0xc
c000a11a:	68 17 4b 02 c0       	push   0xc0024b17
c000a11f:	e8 a9 fc ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c000a124:	83 c4 10             	add    esp,0x10
c000a127:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c000a12e:	0f 85 41 fe ff ff    	jne    c0009f75 <kernel_main+0x13c>
c000a134:	eb 04                	jmp    c000a13a <kernel_main+0x301>
c000a136:	3c 1c                	cmp    al,0x1c
c000a138:	74 06                	je     c000a140 <kernel_main+0x307>
c000a13a:	e4 60                	in     al,0x60
c000a13c:	3c 5a                	cmp    al,0x5a
c000a13e:	75 f6                	jne    c000a136 <kernel_main+0x2fd>
c000a140:	e4 60                	in     al,0x60
c000a142:	3c 5a                	cmp    al,0x5a
c000a144:	74 fa                	je     c000a140 <kernel_main+0x307>
c000a146:	3c 1c                	cmp    al,0x1c
c000a148:	74 f6                	je     c000a140 <kernel_main+0x307>
c000a14a:	e9 26 fe ff ff       	jmp    c0009f75 <kernel_main+0x13c>
c000a14f:	83 ec 0c             	sub    esp,0xc
c000a152:	68 f9 4a 02 c0       	push   0xc0024af9
c000a157:	e8 71 fc ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c000a15c:	8b 15 a0 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028ca0
c000a162:	83 c4 10             	add    esp,0x10
c000a165:	f6 c2 80             	test   dl,0x80
c000a168:	74 18                	je     c000a182 <kernel_main+0x349>
c000a16a:	0f b6 05 00 7f 02 c0 	movzx  eax,BYTE PTR ds:0xc0027f00
c000a171:	84 c0                	test   al,al
c000a173:	0f 85 4d fd ff ff    	jne    c0009ec6 <kernel_main+0x8d>
c000a179:	e9 ba fd ff ff       	jmp    c0009f38 <kernel_main+0xff>
c000a17e:	3c 1c                	cmp    al,0x1c
c000a180:	74 06                	je     c000a188 <kernel_main+0x34f>
c000a182:	e4 60                	in     al,0x60
c000a184:	3c 5a                	cmp    al,0x5a
c000a186:	75 f6                	jne    c000a17e <kernel_main+0x345>
c000a188:	e4 60                	in     al,0x60
c000a18a:	3c 5a                	cmp    al,0x5a
c000a18c:	74 fa                	je     c000a188 <kernel_main+0x34f>
c000a18e:	3c 1c                	cmp    al,0x1c
c000a190:	74 f6                	je     c000a188 <kernel_main+0x34f>
c000a192:	eb d6                	jmp    c000a16a <kernel_main+0x331>
c000a194:	83 ec 0c             	sub    esp,0xc
c000a197:	68 ea 4a 02 c0       	push   0xc0024aea
c000a19c:	e8 2c fc ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c000a1a1:	83 c4 10             	add    esp,0x10
c000a1a4:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c000a1ab:	0f 85 f8 fc ff ff    	jne    c0009ea9 <kernel_main+0x70>
c000a1b1:	eb 04                	jmp    c000a1b7 <kernel_main+0x37e>
c000a1b3:	3c 1c                	cmp    al,0x1c
c000a1b5:	74 06                	je     c000a1bd <kernel_main+0x384>
c000a1b7:	e4 60                	in     al,0x60
c000a1b9:	3c 5a                	cmp    al,0x5a
c000a1bb:	75 f6                	jne    c000a1b3 <kernel_main+0x37a>
c000a1bd:	e4 60                	in     al,0x60
c000a1bf:	3c 5a                	cmp    al,0x5a
c000a1c1:	74 fa                	je     c000a1bd <kernel_main+0x384>
c000a1c3:	3c 1c                	cmp    al,0x1c
c000a1c5:	74 f6                	je     c000a1bd <kernel_main+0x384>
c000a1c7:	e9 dd fc ff ff       	jmp    c0009ea9 <kernel_main+0x70>
c000a1cc:	83 ec 0c             	sub    esp,0xc
c000a1cf:	68 d7 4a 02 c0       	push   0xc0024ad7
c000a1d4:	e8 f4 fb ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c000a1d9:	83 c4 10             	add    esp,0x10
c000a1dc:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c000a1e3:	0f 85 69 fc ff ff    	jne    c0009e52 <kernel_main+0x19>
c000a1e9:	eb 04                	jmp    c000a1ef <kernel_main+0x3b6>
c000a1eb:	3c 1c                	cmp    al,0x1c
c000a1ed:	74 06                	je     c000a1f5 <kernel_main+0x3bc>
c000a1ef:	e4 60                	in     al,0x60
c000a1f1:	3c 5a                	cmp    al,0x5a
c000a1f3:	75 f6                	jne    c000a1eb <kernel_main+0x3b2>
c000a1f5:	e4 60                	in     al,0x60
c000a1f7:	3c 5a                	cmp    al,0x5a
c000a1f9:	74 fa                	je     c000a1f5 <kernel_main+0x3bc>
c000a1fb:	3c 1c                	cmp    al,0x1c
c000a1fd:	74 f6                	je     c000a1f5 <kernel_main+0x3bc>
c000a1ff:	e9 4e fc ff ff       	jmp    c0009e52 <kernel_main+0x19>

c000a204 <Phys::allocateDMA(unsigned long)>:
c000a204:	55                   	push   ebp
c000a205:	31 ed                	xor    ebp,ebp
c000a207:	57                   	push   edi
c000a208:	56                   	push   esi
c000a209:	53                   	push   ebx
c000a20a:	31 db                	xor    ebx,ebx
c000a20c:	83 ec 28             	sub    esp,0x28
c000a20f:	68 7b 4b 02 c0       	push   0xc0024b7b
c000a214:	e8 46 2e 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000a219:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a21d:	83 c4 10             	add    esp,0x10
c000a220:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a226:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a22e:	c1 ef 0c             	shr    edi,0xc
c000a231:	31 c0                	xor    eax,eax
c000a233:	eb 19                	jmp    c000a24e <Phys::allocateDMA(unsigned long)+0x4a>
c000a235:	85 c0                	test   eax,eax
c000a237:	75 06                	jne    c000a23f <Phys::allocateDMA(unsigned long)+0x3b>
c000a239:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a23d:	89 dd                	mov    ebp,ebx
c000a23f:	8d 70 01             	lea    esi,[eax+0x1]
c000a242:	39 f7                	cmp    edi,esi
c000a244:	74 3f                	je     c000a285 <Phys::allocateDMA(unsigned long)+0x81>
c000a246:	89 f0                	mov    eax,esi
c000a248:	43                   	inc    ebx
c000a249:	83 fb 0f             	cmp    ebx,0xf
c000a24c:	7f 11                	jg     c000a25f <Phys::allocateDMA(unsigned long)+0x5b>
c000a24e:	80 bb bc 8c 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd7344],0x0
c000a255:	74 de                	je     c000a235 <Phys::allocateDMA(unsigned long)+0x31>
c000a257:	31 c0                	xor    eax,eax
c000a259:	43                   	inc    ebx
c000a25a:	83 fb 0f             	cmp    ebx,0xf
c000a25d:	7e ef                	jle    c000a24e <Phys::allocateDMA(unsigned long)+0x4a>
c000a25f:	83 ec 0c             	sub    esp,0xc
c000a262:	68 ab 4b 02 c0       	push   0xc0024bab
c000a267:	e8 f3 2d 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000a26c:	c7 04 24 68 4c 02 c0 	mov    DWORD PTR [esp],0xc0024c68
c000a273:	e8 b9 ae 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000a278:	83 c4 10             	add    esp,0x10
c000a27b:	31 c0                	xor    eax,eax
c000a27d:	83 c4 1c             	add    esp,0x1c
c000a280:	5b                   	pop    ebx
c000a281:	5e                   	pop    esi
c000a282:	5f                   	pop    edi
c000a283:	5d                   	pop    ebp
c000a284:	c3                   	ret    
c000a285:	89 e9                	mov    ecx,ebp
c000a287:	c1 f9 04             	sar    ecx,0x4
c000a28a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a28e:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a292:	89 ca                	mov    edx,ecx
c000a294:	4a                   	dec    edx
c000a295:	79 03                	jns    c000a29a <Phys::allocateDMA(unsigned long)+0x96>
c000a297:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a29a:	c1 fa 04             	sar    edx,0x4
c000a29d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a2a1:	74 08                	je     c000a2ab <Phys::allocateDMA(unsigned long)+0xa7>
c000a2a3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a2a7:	31 c0                	xor    eax,eax
c000a2a9:	eb ae                	jmp    c000a259 <Phys::allocateDMA(unsigned long)+0x55>
c000a2ab:	85 f6                	test   esi,esi
c000a2ad:	74 15                	je     c000a2c4 <Phys::allocateDMA(unsigned long)+0xc0>
c000a2af:	8d 95 bc 8c 02 c0    	lea    edx,[ebp-0x3ffd7344]
c000a2b5:	8d 84 05 bd 8c 02 c0 	lea    eax,[ebp+eax*1-0x3ffd7343]
c000a2bc:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a2bf:	42                   	inc    edx
c000a2c0:	39 d0                	cmp    eax,edx
c000a2c2:	75 f8                	jne    c000a2bc <Phys::allocateDMA(unsigned long)+0xb8>
c000a2c4:	83 ec 0c             	sub    esp,0xc
c000a2c7:	01 3d b4 8c 02 c0    	add    DWORD PTR ds:0xc0028cb4,edi
c000a2cd:	68 94 4b 02 c0       	push   0xc0024b94
c000a2d2:	e8 88 2d 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000a2d7:	83 c4 10             	add    esp,0x10
c000a2da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2de:	85 c0                	test   eax,eax
c000a2e0:	74 23                	je     c000a305 <Phys::allocateDMA(unsigned long)+0x101>
c000a2e2:	83 ec 0c             	sub    esp,0xc
c000a2e5:	68 4e 7b 02 c0       	push   0xc0027b4e
c000a2ea:	e8 70 2d 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000a2ef:	c7 04 24 68 4c 02 c0 	mov    DWORD PTR [esp],0xc0024c68
c000a2f6:	e8 36 ae 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000a2fb:	83 c4 10             	add    esp,0x10
c000a2fe:	89 f0                	mov    eax,esi
c000a300:	e9 43 ff ff ff       	jmp    c000a248 <Phys::allocateDMA(unsigned long)+0x44>
c000a305:	c1 e5 0c             	shl    ebp,0xc
c000a308:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a30e:	e9 6a ff ff ff       	jmp    c000a27d <Phys::allocateDMA(unsigned long)+0x79>

c000a313 <Phys::freeDMA(unsigned long, unsigned long)>:
c000a313:	83 ec 18             	sub    esp,0x18
c000a316:	68 af 4b 02 c0       	push   0xc0024baf
c000a31b:	e8 3f 2d 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000a320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a324:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a32a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a32e:	c1 ea 0c             	shr    edx,0xc
c000a331:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a336:	29 15 b4 8c 02 c0    	sub    DWORD PTR ds:0xc0028cb4,edx
c000a33c:	c1 e8 0c             	shr    eax,0xc
c000a33f:	83 c4 10             	add    esp,0x10
c000a342:	85 d2                	test   edx,edx
c000a344:	74 0f                	je     c000a355 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a346:	05 bc 8c 02 c0       	add    eax,0xc0028cbc
c000a34b:	01 c2                	add    edx,eax
c000a34d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a350:	40                   	inc    eax
c000a351:	39 d0                	cmp    eax,edx
c000a353:	75 f8                	jne    c000a34d <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a355:	83 c4 0c             	add    esp,0xc
c000a358:	c3                   	ret    

c000a359 <Phys::setPageState(unsigned long, bool)>:
c000a359:	56                   	push   esi
c000a35a:	ba 01 00 00 00       	mov    edx,0x1
c000a35f:	53                   	push   ebx
c000a360:	8b 35 44 80 02 c0    	mov    esi,DWORD PTR ds:0xc0028044
c000a366:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a36a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a36e:	89 c8                	mov    eax,ecx
c000a370:	83 e1 07             	and    ecx,0x7
c000a373:	c1 e8 03             	shr    eax,0x3
c000a376:	d3 e3                	shl    ebx,cl
c000a378:	01 c6                	add    esi,eax
c000a37a:	d3 e2                	shl    edx,cl
c000a37c:	f7 d2                	not    edx
c000a37e:	20 16                	and    BYTE PTR [esi],dl
c000a380:	03 05 44 80 02 c0    	add    eax,DWORD PTR ds:0xc0028044
c000a386:	08 18                	or     BYTE PTR [eax],bl
c000a388:	5b                   	pop    ebx
c000a389:	5e                   	pop    esi
c000a38a:	c3                   	ret    

c000a38b <Phys::getPageState(unsigned long)>:
c000a38b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a38f:	8b 15 44 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028044
c000a395:	89 c8                	mov    eax,ecx
c000a397:	83 e1 07             	and    ecx,0x7
c000a39a:	c1 e8 03             	shr    eax,0x3
c000a39d:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a3a1:	d3 f8                	sar    eax,cl
c000a3a3:	83 e0 01             	and    eax,0x1
c000a3a6:	c3                   	ret    

c000a3a7 <Phys::freePage(unsigned long)>:
c000a3a7:	53                   	push   ebx
c000a3a8:	83 ec 10             	sub    esp,0x10
c000a3ab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a3af:	53                   	push   ebx
c000a3b0:	68 c5 4b 02 c0       	push   0xc0024bc5
c000a3b5:	e8 a5 2c 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000a3ba:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a3c0:	83 c4 10             	add    esp,0x10
c000a3c3:	3d ff ff 00 00       	cmp    eax,0xffff
c000a3c8:	76 3d                	jbe    c000a407 <Phys::freePage(unsigned long)+0x60>
c000a3ca:	83 ec 0c             	sub    esp,0xc
c000a3cd:	c1 eb 0c             	shr    ebx,0xc
c000a3d0:	53                   	push   ebx
c000a3d1:	e8 b5 ff ff ff       	call   c000a38b <Phys::getPageState(unsigned long)>
c000a3d6:	83 c4 10             	add    esp,0x10
c000a3d9:	84 c0                	test   al,al
c000a3db:	74 19                	je     c000a3f6 <Phys::freePage(unsigned long)+0x4f>
c000a3dd:	83 ec 08             	sub    esp,0x8
c000a3e0:	ff 0d b4 8c 02 c0    	dec    DWORD PTR ds:0xc0028cb4
c000a3e6:	6a 00                	push   0x0
c000a3e8:	53                   	push   ebx
c000a3e9:	e8 6b ff ff ff       	call   c000a359 <Phys::setPageState(unsigned long, bool)>
c000a3ee:	83 c4 10             	add    esp,0x10
c000a3f1:	83 c4 08             	add    esp,0x8
c000a3f4:	5b                   	pop    ebx
c000a3f5:	c3                   	ret    
c000a3f6:	c7 44 24 10 ef 4b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024bef
c000a3fe:	83 c4 08             	add    esp,0x8
c000a401:	5b                   	pop    ebx
c000a402:	e9 2a ad 00 00       	jmp    c0015131 <Krnl::panic(char const*)>
c000a407:	83 ec 08             	sub    esp,0x8
c000a40a:	53                   	push   ebx
c000a40b:	68 d8 4b 02 c0       	push   0xc0024bd8
c000a410:	e8 4a 2c 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000a415:	58                   	pop    eax
c000a416:	5a                   	pop    edx
c000a417:	68 00 10 00 00       	push   0x1000
c000a41c:	53                   	push   ebx
c000a41d:	e8 f1 fe ff ff       	call   c000a313 <Phys::freeDMA(unsigned long, unsigned long)>
c000a422:	83 c4 10             	add    esp,0x10
c000a425:	83 c4 08             	add    esp,0x8
c000a428:	5b                   	pop    ebx
c000a429:	c3                   	ret    

c000a42a <Phys::allocatePage()>:
c000a42a:	56                   	push   esi
c000a42b:	53                   	push   ebx
c000a42c:	83 ec 14             	sub    esp,0x14
c000a42f:	8b 35 a8 8c 02 c0    	mov    esi,DWORD PTR ds:0xc0028ca8
c000a435:	89 f3                	mov    ebx,esi
c000a437:	eb 0a                	jmp    c000a443 <Phys::allocatePage()+0x19>
c000a439:	89 1d a8 8c 02 c0    	mov    DWORD PTR ds:0xc0028ca8,ebx
c000a43f:	39 de                	cmp    esi,ebx
c000a441:	74 24                	je     c000a467 <Phys::allocatePage()+0x3d>
c000a443:	53                   	push   ebx
c000a444:	e8 42 ff ff ff       	call   c000a38b <Phys::getPageState(unsigned long)>
c000a449:	5a                   	pop    edx
c000a44a:	84 c0                	test   al,al
c000a44c:	74 69                	je     c000a4b7 <Phys::allocatePage()+0x8d>
c000a44e:	43                   	inc    ebx
c000a44f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a455:	75 e2                	jne    c000a439 <Phys::allocatePage()+0xf>
c000a457:	31 db                	xor    ebx,ebx
c000a459:	c7 05 a8 8c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ca8,0x0
c000a463:	39 de                	cmp    esi,ebx
c000a465:	75 dc                	jne    c000a443 <Phys::allocatePage()+0x19>
c000a467:	83 ec 0c             	sub    esp,0xc
c000a46a:	80 35 cc 8c 02 c0 01 	xor    BYTE PTR ds:0xc0028ccc,0x1
c000a471:	68 90 4c 02 c0       	push   0xc0024c90
c000a476:	e8 e4 2b 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000a47b:	58                   	pop    eax
c000a47c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a481:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a484:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a48a:	e8 5f 28 00 00       	call   c000ccee <VAS::scanForEviction()>
c000a48f:	83 c4 10             	add    esp,0x10
c000a492:	85 c0                	test   eax,eax
c000a494:	75 62                	jne    c000a4f8 <Phys::allocatePage()+0xce>
c000a496:	83 ec 0c             	sub    esp,0xc
c000a499:	68 b4 4c 02 c0       	push   0xc0024cb4
c000a49e:	e8 8e ac 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000a4a3:	83 c4 10             	add    esp,0x10
c000a4a6:	8b 1d a8 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028ca8
c000a4ac:	53                   	push   ebx
c000a4ad:	e8 d9 fe ff ff       	call   c000a38b <Phys::getPageState(unsigned long)>
c000a4b2:	5a                   	pop    edx
c000a4b3:	84 c0                	test   al,al
c000a4b5:	75 97                	jne    c000a44e <Phys::allocatePage()+0x24>
c000a4b7:	6a 01                	push   0x1
c000a4b9:	53                   	push   ebx
c000a4ba:	e8 9a fe ff ff       	call   c000a359 <Phys::setPageState(unsigned long, bool)>
c000a4bf:	5a                   	pop    edx
c000a4c0:	a1 b4 8c 02 c0       	mov    eax,ds:0xc0028cb4
c000a4c5:	59                   	pop    ecx
c000a4c6:	40                   	inc    eax
c000a4c7:	8b 15 a8 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028ca8
c000a4cd:	a3 b4 8c 02 c0       	mov    ds:0xc0028cb4,eax
c000a4d2:	c1 e2 0c             	shl    edx,0xc
c000a4d5:	52                   	push   edx
c000a4d6:	ff 35 b8 8c 02 c0    	push   DWORD PTR ds:0xc0028cb8
c000a4dc:	50                   	push   eax
c000a4dd:	68 05 4c 02 c0       	push   0xc0024c05
c000a4e2:	e8 78 2b 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000a4e7:	a1 a8 8c 02 c0       	mov    eax,ds:0xc0028ca8
c000a4ec:	83 c4 10             	add    esp,0x10
c000a4ef:	c1 e0 0c             	shl    eax,0xc
c000a4f2:	83 c4 14             	add    esp,0x14
c000a4f5:	5b                   	pop    ebx
c000a4f6:	5e                   	pop    esi
c000a4f7:	c3                   	ret    
c000a4f8:	83 ec 08             	sub    esp,0x8
c000a4fb:	89 c2                	mov    edx,eax
c000a4fd:	6a 01                	push   0x1
c000a4ff:	c1 ea 0c             	shr    edx,0xc
c000a502:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a506:	52                   	push   edx
c000a507:	e8 4d fe ff ff       	call   c000a359 <Phys::setPageState(unsigned long, bool)>
c000a50c:	83 c4 10             	add    esp,0x10
c000a50f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a513:	eb dd                	jmp    c000a4f2 <Phys::allocatePage()+0xc8>

c000a515 <Phys::allocateContiguousPages(int)>:
c000a515:	57                   	push   edi
c000a516:	56                   	push   esi
c000a517:	53                   	push   ebx
c000a518:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a51c:	fa                   	cli    
c000a51d:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c000a523:	31 db                	xor    ebx,ebx
c000a525:	85 db                	test   ebx,ebx
c000a527:	75 11                	jne    c000a53a <Phys::allocateContiguousPages(int)+0x25>
c000a529:	e8 fc fe ff ff       	call   c000a42a <Phys::allocatePage()>
c000a52e:	83 fe 01             	cmp    esi,0x1
c000a531:	89 c7                	mov    edi,eax
c000a533:	74 21                	je     c000a556 <Phys::allocateContiguousPages(int)+0x41>
c000a535:	bb 01 00 00 00       	mov    ebx,0x1
c000a53a:	e8 eb fe ff ff       	call   c000a42a <Phys::allocatePage()>
c000a53f:	89 da                	mov    edx,ebx
c000a541:	c1 e2 0c             	shl    edx,0xc
c000a544:	01 fa                	add    edx,edi
c000a546:	39 c2                	cmp    edx,eax
c000a548:	74 20                	je     c000a56a <Phys::allocateContiguousPages(int)+0x55>
c000a54a:	bb 01 00 00 00       	mov    ebx,0x1
c000a54f:	89 c7                	mov    edi,eax
c000a551:	83 fe 01             	cmp    esi,0x1
c000a554:	75 e4                	jne    c000a53a <Phys::allocateContiguousPages(int)+0x25>
c000a556:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000a55b:	48                   	dec    eax
c000a55c:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c000a561:	75 01                	jne    c000a564 <Phys::allocateContiguousPages(int)+0x4f>
c000a563:	fb                   	sti    
c000a564:	89 f8                	mov    eax,edi
c000a566:	5b                   	pop    ebx
c000a567:	5e                   	pop    esi
c000a568:	5f                   	pop    edi
c000a569:	c3                   	ret    
c000a56a:	43                   	inc    ebx
c000a56b:	39 f3                	cmp    ebx,esi
c000a56d:	75 b6                	jne    c000a525 <Phys::allocateContiguousPages(int)+0x10>
c000a56f:	eb e5                	jmp    c000a556 <Phys::allocateContiguousPages(int)+0x41>

c000a571 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a571:	56                   	push   esi
c000a572:	53                   	push   ebx
c000a573:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a577:	39 1d ac 8c 02 c0    	cmp    DWORD PTR ds:0xc0028cac,ebx
c000a57d:	73 06                	jae    c000a585 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a57f:	89 1d ac 8c 02 c0    	mov    DWORD PTR ds:0xc0028cac,ebx
c000a585:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a589:	c1 eb 0c             	shr    ebx,0xc
c000a58c:	c1 e8 0c             	shr    eax,0xc
c000a58f:	39 d8                	cmp    eax,ebx
c000a591:	73 13                	jae    c000a5a6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a593:	6a 00                	push   0x0
c000a595:	8d 70 01             	lea    esi,[eax+0x1]
c000a598:	50                   	push   eax
c000a599:	e8 bb fd ff ff       	call   c000a359 <Phys::setPageState(unsigned long, bool)>
c000a59e:	5a                   	pop    edx
c000a59f:	89 f0                	mov    eax,esi
c000a5a1:	59                   	pop    ecx
c000a5a2:	39 f3                	cmp    ebx,esi
c000a5a4:	75 ed                	jne    c000a593 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a5a6:	5b                   	pop    ebx
c000a5a7:	5e                   	pop    esi
c000a5a8:	c3                   	ret    

c000a5a9 <Phys::physicalMemorySetup(unsigned int)>:
c000a5a9:	55                   	push   ebp
c000a5aa:	57                   	push   edi
c000a5ab:	56                   	push   esi
c000a5ac:	53                   	push   ebx
c000a5ad:	31 db                	xor    ebx,ebx
c000a5af:	83 ec 40             	sub    esp,0x40
c000a5b2:	6a 10                	push   0x10
c000a5b4:	6a 00                	push   0x0
c000a5b6:	68 bc 8c 02 c0       	push   0xc0028cbc
c000a5bb:	e8 d4 60 ff ff       	call   c0000694 <memset>
c000a5c0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a5c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a5c9:	05 00 10 00 00       	add    eax,0x1000
c000a5ce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5d2:	5a                   	pop    edx
c000a5d3:	59                   	pop    ecx
c000a5d4:	50                   	push   eax
c000a5d5:	68 23 4c 02 c0       	push   0xc0024c23
c000a5da:	e8 80 2a 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000a5df:	83 c4 10             	add    esp,0x10
c000a5e2:	83 ec 08             	sub    esp,0x8
c000a5e5:	6a 01                	push   0x1
c000a5e7:	53                   	push   ebx
c000a5e8:	43                   	inc    ebx
c000a5e9:	e8 6b fd ff ff       	call   c000a359 <Phys::setPageState(unsigned long, bool)>
c000a5ee:	83 c4 10             	add    esp,0x10
c000a5f1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a5f7:	75 e9                	jne    c000a5e2 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a5f9:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a600:	66 85 c0             	test   ax,ax
c000a603:	0f 84 8e 01 00 00    	je     c000a797 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a609:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a60d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a615:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a619:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a61e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a622:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a62a:	eb 15                	jmp    c000a641 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a62c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a630:	83 c3 18             	add    ebx,0x18
c000a633:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a637:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a63b:	0f 84 66 01 00 00    	je     c000a7a7 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a641:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a644:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a64a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a64e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a652:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a654:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a657:	01 f0                	add    eax,esi
c000a659:	55                   	push   ebp
c000a65a:	11 fa                	adc    edx,edi
c000a65c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a660:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a664:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a668:	56                   	push   esi
c000a669:	68 e4 4c 02 c0       	push   0xc0024ce4
c000a66e:	e8 ec 29 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000a673:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a677:	83 c4 10             	add    esp,0x10
c000a67a:	09 f8                	or     eax,edi
c000a67c:	0f 85 25 01 00 00    	jne    c000a7a7 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a682:	4d                   	dec    ebp
c000a683:	75 a7                	jne    c000a62c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a685:	ba 00 00 08 00       	mov    edx,0x80000
c000a68a:	89 c1                	mov    ecx,eax
c000a68c:	39 f2                	cmp    edx,esi
c000a68e:	19 f9                	sbb    ecx,edi
c000a690:	0f 82 a7 00 00 00    	jb     c000a73d <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a696:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a69a:	89 c1                	mov    ecx,eax
c000a69c:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a6a0:	0f 83 97 00 00 00    	jae    c000a73d <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a6a6:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a6ab:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a6af:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a6b3:	39 fa                	cmp    edx,edi
c000a6b5:	19 e8                	sbb    eax,ebp
c000a6b7:	0f 82 a5 01 00 00    	jb     c000a862 <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a6bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a6c1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a6c5:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a6cb:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a6d0:	83 d5 ff             	adc    ebp,0xffffffff
c000a6d3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a6d7:	31 c0                	xor    eax,eax
c000a6d9:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a6dd:	39 fa                	cmp    edx,edi
c000a6df:	89 c1                	mov    ecx,eax
c000a6e1:	19 e9                	sbb    ecx,ebp
c000a6e3:	0f 83 43 ff ff ff    	jae    c000a62c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6e9:	be 00 00 08 00       	mov    esi,0x80000
c000a6ee:	57                   	push   edi
c000a6ef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a6f3:	57                   	push   edi
c000a6f4:	56                   	push   esi
c000a6f5:	68 08 4d 02 c0       	push   0xc0024d08
c000a6fa:	e8 60 29 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000a6ff:	5d                   	pop    ebp
c000a700:	58                   	pop    eax
c000a701:	57                   	push   edi
c000a702:	56                   	push   esi
c000a703:	e8 69 fe ff ff       	call   c000a571 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a708:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a70c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a710:	83 c4 0c             	add    esp,0xc
c000a713:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a717:	03 05 b8 8c 02 c0    	add    eax,DWORD PTR ds:0xc0028cb8
c000a71d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a724:	a3 b8 8c 02 c0       	mov    ds:0xc0028cb8,eax
c000a729:	52                   	push   edx
c000a72a:	50                   	push   eax
c000a72b:	68 49 4c 02 c0       	push   0xc0024c49
c000a730:	e8 2a 29 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000a735:	83 c4 10             	add    esp,0x10
c000a738:	e9 ef fe ff ff       	jmp    c000a62c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a73d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a741:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a749:	39 ea                	cmp    edx,ebp
c000a74b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a74f:	0f 82 d7 fe ff ff    	jb     c000a62c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a755:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a75a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a75e:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a762:	0f 83 c4 fe ff ff    	jae    c000a62c <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a768:	39 ee                	cmp    esi,ebp
c000a76a:	89 f8                	mov    eax,edi
c000a76c:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a770:	0f 83 78 ff ff ff    	jae    c000a6ee <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a776:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a77a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a77e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a782:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a786:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a78a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a78e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a792:	e9 57 ff ff ff       	jmp    c000a6ee <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a797:	83 ec 0c             	sub    esp,0xc
c000a79a:	68 3b 4c 02 c0       	push   0xc0024c3b
c000a79f:	e8 8d a9 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000a7a4:	83 c4 10             	add    esp,0x10
c000a7a7:	83 ec 08             	sub    esp,0x8
c000a7aa:	6a 00                	push   0x0
c000a7ac:	6a 05                	push   0x5
c000a7ae:	e8 a6 fb ff ff       	call   c000a359 <Phys::setPageState(unsigned long, bool)>
c000a7b3:	58                   	pop    eax
c000a7b4:	5a                   	pop    edx
c000a7b5:	6a 00                	push   0x0
c000a7b7:	6a 06                	push   0x6
c000a7b9:	e8 9b fb ff ff       	call   c000a359 <Phys::setPageState(unsigned long, bool)>
c000a7be:	59                   	pop    ecx
c000a7bf:	5b                   	pop    ebx
c000a7c0:	bb 60 00 00 00       	mov    ebx,0x60
c000a7c5:	6a 00                	push   0x0
c000a7c7:	6a 07                	push   0x7
c000a7c9:	e8 8b fb ff ff       	call   c000a359 <Phys::setPageState(unsigned long, bool)>
c000a7ce:	83 05 b8 8c 02 c0 03 	add    DWORD PTR ds:0xc0028cb8,0x3
c000a7d5:	83 c4 10             	add    esp,0x10
c000a7d8:	83 ec 08             	sub    esp,0x8
c000a7db:	6a 00                	push   0x0
c000a7dd:	53                   	push   ebx
c000a7de:	43                   	inc    ebx
c000a7df:	e8 75 fb ff ff       	call   c000a359 <Phys::setPageState(unsigned long, bool)>
c000a7e4:	83 c4 10             	add    esp,0x10
c000a7e7:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a7ed:	75 e9                	jne    c000a7d8 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a7ef:	a1 b8 8c 02 c0       	mov    eax,ds:0xc0028cb8
c000a7f4:	bb 40 01 00 00       	mov    ebx,0x140
c000a7f9:	83 c0 20             	add    eax,0x20
c000a7fc:	a3 b8 8c 02 c0       	mov    ds:0xc0028cb8,eax
c000a801:	eb 22                	jmp    c000a825 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a803:	83 ec 08             	sub    esp,0x8
c000a806:	6a 00                	push   0x0
c000a808:	53                   	push   ebx
c000a809:	43                   	inc    ebx
c000a80a:	e8 4a fb ff ff       	call   c000a359 <Phys::setPageState(unsigned long, bool)>
c000a80f:	a1 b8 8c 02 c0       	mov    eax,ds:0xc0028cb8
c000a814:	83 c4 10             	add    esp,0x10
c000a817:	40                   	inc    eax
c000a818:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a81e:	a3 b8 8c 02 c0       	mov    ds:0xc0028cb8,eax
c000a823:	74 07                	je     c000a82c <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a825:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a82a:	7e d7                	jle    c000a803 <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a82c:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a831:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a836:	7f 22                	jg     c000a85a <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a838:	83 ec 08             	sub    esp,0x8
c000a83b:	6a 00                	push   0x0
c000a83d:	53                   	push   ebx
c000a83e:	43                   	inc    ebx
c000a83f:	e8 15 fb ff ff       	call   c000a359 <Phys::setPageState(unsigned long, bool)>
c000a844:	a1 b8 8c 02 c0       	mov    eax,ds:0xc0028cb8
c000a849:	83 c4 10             	add    esp,0x10
c000a84c:	40                   	inc    eax
c000a84d:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a853:	a3 b8 8c 02 c0       	mov    ds:0xc0028cb8,eax
c000a858:	75 d7                	jne    c000a831 <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a85a:	83 c4 3c             	add    esp,0x3c
c000a85d:	5b                   	pop    ebx
c000a85e:	5e                   	pop    esi
c000a85f:	5f                   	pop    edi
c000a860:	5d                   	pop    ebp
c000a861:	c3                   	ret    
c000a862:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a86a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a872:	e9 46 fe ff ff       	jmp    c000a6bd <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a877:	90                   	nop

c000a878 <Pipe::isAtty()>:
c000a878:	31 c0                	xor    eax,eax
c000a87a:	c3                   	ret    
c000a87b:	90                   	nop

c000a87c <Pipe::~Pipe()>:
c000a87c:	83 ec 0c             	sub    esp,0xc
c000a87f:	ba 74 4d 02 c0       	mov    edx,0xc0024d74
c000a884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a888:	89 10                	mov    DWORD PTR [eax],edx
c000a88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a88e:	83 ec 0c             	sub    esp,0xc
c000a891:	50                   	push   eax
c000a892:	e8 41 12 00 00       	call   c000bad8 <UnixFile::~UnixFile()>
c000a897:	83 c4 10             	add    esp,0x10
c000a89a:	90                   	nop
c000a89b:	83 c4 0c             	add    esp,0xc
c000a89e:	c3                   	ret    
c000a89f:	90                   	nop

c000a8a0 <Pipe::~Pipe()>:
c000a8a0:	83 ec 0c             	sub    esp,0xc
c000a8a3:	83 ec 0c             	sub    esp,0xc
c000a8a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8aa:	e8 cd ff ff ff       	call   c000a87c <Pipe::~Pipe()>
c000a8af:	83 c4 10             	add    esp,0x10
c000a8b2:	83 ec 08             	sub    esp,0x8
c000a8b5:	6a 20                	push   0x20
c000a8b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8bb:	e8 be 26 00 00       	call   c000cf7e <operator delete(void*, unsigned long)>
c000a8c0:	83 c4 10             	add    esp,0x10
c000a8c3:	83 c4 0c             	add    esp,0xc
c000a8c6:	c3                   	ret    
c000a8c7:	90                   	nop

c000a8c8 <Pipe::read(unsigned long long, void*, int*)>:
c000a8c8:	55                   	push   ebp
c000a8c9:	57                   	push   edi
c000a8ca:	56                   	push   esi
c000a8cb:	53                   	push   ebx
c000a8cc:	83 ec 1c             	sub    esp,0x1c
c000a8cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a8d3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a8d7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a8db:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8de:	89 c8                	mov    eax,ecx
c000a8e0:	99                   	cdq    
c000a8e1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a8e5:	74 24                	je     c000a90b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8e7:	39 f9                	cmp    ecx,edi
c000a8e9:	89 d1                	mov    ecx,edx
c000a8eb:	19 f1                	sbb    ecx,esi
c000a8ed:	73 1c                	jae    c000a90b <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8ef:	fa                   	cli    
c000a8f0:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c000a8f6:	e8 a5 e6 00 00       	call   c0018fa0 <schedule()>
c000a8fb:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000a900:	48                   	dec    eax
c000a901:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c000a906:	75 d3                	jne    c000a8db <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a908:	fb                   	sti    
c000a909:	eb d0                	jmp    c000a8db <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a90b:	39 f8                	cmp    eax,edi
c000a90d:	89 d1                	mov    ecx,edx
c000a90f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a912:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a916:	19 f1                	sbb    ecx,esi
c000a918:	73 07                	jae    c000a921 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a91a:	89 04 24             	mov    DWORD PTR [esp],eax
c000a91d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a921:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a924:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a927:	29 f7                	sub    edi,esi
c000a929:	89 f8                	mov    eax,edi
c000a92b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a92f:	99                   	cdq    
c000a930:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a933:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a937:	19 d0                	sbb    eax,edx
c000a939:	73 07                	jae    c000a942 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a93b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a93e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a942:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a945:	89 ea                	mov    edx,ebp
c000a947:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a94b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a950:	74 0d                	je     c000a95f <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a952:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a955:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a95d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a95f:	85 d2                	test   edx,edx
c000a961:	74 11                	je     c000a974 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a963:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a967:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a96a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a96e:	89 d1                	mov    ecx,edx
c000a970:	89 c7                	mov    edi,eax
c000a972:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a974:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a977:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a97a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a97d:	99                   	cdq    
c000a97e:	89 f7                	mov    edi,esi
c000a980:	03 04 24             	add    eax,DWORD PTR [esp]
c000a983:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a987:	c1 ff 1f             	sar    edi,0x1f
c000a98a:	57                   	push   edi
c000a98b:	56                   	push   esi
c000a98c:	52                   	push   edx
c000a98d:	50                   	push   eax
c000a98e:	e8 fd 87 01 00       	call   c0023190 <__umoddi3>
c000a993:	83 c4 10             	add    esp,0x10
c000a996:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a999:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a99e:	75 10                	jne    c000a9b0 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a9a0:	83 ec 0c             	sub    esp,0xc
c000a9a3:	68 31 4d 02 c0       	push   0xc0024d31
c000a9a8:	e8 84 a7 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000a9ad:	83 c4 10             	add    esp,0x10
c000a9b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a9b4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a9b7:	89 10                	mov    DWORD PTR [eax],edx
c000a9b9:	83 c4 1c             	add    esp,0x1c
c000a9bc:	31 c0                	xor    eax,eax
c000a9be:	5b                   	pop    ebx
c000a9bf:	5e                   	pop    esi
c000a9c0:	5f                   	pop    edi
c000a9c1:	5d                   	pop    ebp
c000a9c2:	c3                   	ret    
c000a9c3:	90                   	nop

c000a9c4 <Pipe::write(unsigned long long, void*, int*)>:
c000a9c4:	55                   	push   ebp
c000a9c5:	57                   	push   edi
c000a9c6:	56                   	push   esi
c000a9c7:	53                   	push   ebx
c000a9c8:	83 ec 1c             	sub    esp,0x1c
c000a9cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a9cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9d3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a9d6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a9da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9e1:	89 d8                	mov    eax,ebx
c000a9e3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a9e6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a9ea:	89 d6                	mov    esi,edx
c000a9ec:	89 d7                	mov    edi,edx
c000a9ee:	c1 ff 1f             	sar    edi,0x1f
c000a9f1:	03 34 24             	add    esi,DWORD PTR [esp]
c000a9f4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a9f8:	c1 f8 1f             	sar    eax,0x1f
c000a9fb:	39 f3                	cmp    ebx,esi
c000a9fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa05:	19 f8                	sbb    eax,edi
c000aa07:	b8 01 00 00 00       	mov    eax,0x1
c000aa0c:	72 6e                	jb     c000aa7c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000aa0e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000aa11:	01 d0                	add    eax,edx
c000aa13:	99                   	cdq    
c000aa14:	f7 fb                	idiv   ebx
c000aa16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa1a:	29 d3                	sub    ebx,edx
c000aa1c:	89 d7                	mov    edi,edx
c000aa1e:	89 de                	mov    esi,ebx
c000aa20:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000aa23:	c1 fb 1f             	sar    ebx,0x1f
c000aa26:	39 f2                	cmp    edx,esi
c000aa28:	19 d8                	sbb    eax,ebx
c000aa2a:	b8 00 00 00 00       	mov    eax,0x0
c000aa2f:	72 04                	jb     c000aa35 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000aa31:	89 d0                	mov    eax,edx
c000aa33:	29 f0                	sub    eax,esi
c000aa35:	89 d3                	mov    ebx,edx
c000aa37:	29 c3                	sub    ebx,eax
c000aa39:	74 0b                	je     c000aa46 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000aa3b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000aa3e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000aa42:	89 d9                	mov    ecx,ebx
c000aa44:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aa46:	85 c0                	test   eax,eax
c000aa48:	74 0d                	je     c000aa57 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000aa4a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000aa4e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000aa51:	89 de                	mov    esi,ebx
c000aa53:	89 c1                	mov    ecx,eax
c000aa55:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000aa57:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000aa5a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000aa5f:	75 10                	jne    c000aa71 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000aa61:	83 ec 0c             	sub    esp,0xc
c000aa64:	68 4d 4d 02 c0       	push   0xc0024d4d
c000aa69:	e8 c3 a6 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000aa6e:	83 c4 10             	add    esp,0x10
c000aa71:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000aa75:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000aa78:	89 08                	mov    DWORD PTR [eax],ecx
c000aa7a:	31 c0                	xor    eax,eax
c000aa7c:	83 c4 1c             	add    esp,0x1c
c000aa7f:	5b                   	pop    ebx
c000aa80:	5e                   	pop    esi
c000aa81:	5f                   	pop    edi
c000aa82:	5d                   	pop    ebp
c000aa83:	c3                   	ret    

c000aa84 <Pipe::Pipe(int)>:
c000aa84:	83 ec 0c             	sub    esp,0xc
c000aa87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa8b:	83 ec 08             	sub    esp,0x8
c000aa8e:	6a 00                	push   0x0
c000aa90:	50                   	push   eax
c000aa91:	e8 60 0e 00 00       	call   c000b8f6 <UnixFile::UnixFile(int)>
c000aa96:	83 c4 10             	add    esp,0x10
c000aa99:	ba 74 4d 02 c0       	mov    edx,0xc0024d74
c000aa9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa2:	89 10                	mov    DWORD PTR [eax],edx
c000aaa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000aaac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000aaaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab3:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000aaba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aabe:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000aac5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aac9:	83 ec 0c             	sub    esp,0xc
c000aacc:	50                   	push   eax
c000aacd:	e8 a1 f2 ff ff       	call   c0009d73 <malloc>
c000aad2:	83 c4 10             	add    esp,0x10
c000aad5:	89 c2                	mov    edx,eax
c000aad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aadb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aae2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000aae6:	90                   	nop
c000aae7:	83 c4 0c             	add    esp,0xc
c000aaea:	c3                   	ret    
c000aaeb:	90                   	nop

c000aaec <VgaText::isAtty()>:
c000aaec:	b0 01                	mov    al,0x1
c000aaee:	c3                   	ret    
c000aaef:	90                   	nop

c000aaf0 <VgaText::~VgaText()>:
c000aaf0:	83 ec 0c             	sub    esp,0xc
c000aaf3:	ba fc 4d 02 c0       	mov    edx,0xc0024dfc
c000aaf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aafc:	89 10                	mov    DWORD PTR [eax],edx
c000aafe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab02:	83 ec 0c             	sub    esp,0xc
c000ab05:	50                   	push   eax
c000ab06:	e8 cd 0f 00 00       	call   c000bad8 <UnixFile::~UnixFile()>
c000ab0b:	83 c4 10             	add    esp,0x10
c000ab0e:	90                   	nop
c000ab0f:	83 c4 0c             	add    esp,0xc
c000ab12:	c3                   	ret    
c000ab13:	90                   	nop

c000ab14 <VgaText::~VgaText()>:
c000ab14:	83 ec 0c             	sub    esp,0xc
c000ab17:	83 ec 0c             	sub    esp,0xc
c000ab1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab1e:	e8 cd ff ff ff       	call   c000aaf0 <VgaText::~VgaText()>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	83 ec 08             	sub    esp,0x8
c000ab29:	68 b4 01 00 00       	push   0x1b4
c000ab2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab32:	e8 47 24 00 00       	call   c000cf7e <operator delete(void*, unsigned long)>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	83 c4 0c             	add    esp,0xc
c000ab3d:	c3                   	ret    

c000ab3e <VgaText::read(unsigned long long, void*, int*)>:
c000ab3e:	83 ec 10             	sub    esp,0x10
c000ab41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ab45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab4d:	e8 b3 59 00 00       	call   c0010505 <readKeyboard(VgaText*, char*, unsigned long)>
c000ab52:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ab56:	89 02                	mov    DWORD PTR [edx],eax
c000ab58:	31 c0                	xor    eax,eax
c000ab5a:	83 c4 1c             	add    esp,0x1c
c000ab5d:	c3                   	ret    

c000ab5e <setTerminalScrollLock(bool)>:
c000ab5e:	c3                   	ret    

c000ab5f <addToTerminalCycle(VgaText*)>:
c000ab5f:	8b 15 00 8d 02 c0    	mov    edx,DWORD PTR ds:0xc0028d00
c000ab65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab69:	85 d2                	test   edx,edx
c000ab6b:	75 09                	jne    c000ab76 <addToTerminalCycle(VgaText*)+0x17>
c000ab6d:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000ab70:	a3 00 8d 02 c0       	mov    ds:0xc0028d00,eax
c000ab75:	c3                   	ret    
c000ab76:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000ab79:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000ab7c:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000ab7f:	c3                   	ret    

c000ab80 <installVgaTextImplementation()>:
c000ab80:	83 ec 10             	sub    esp,0x10
c000ab83:	6a 20                	push   0x20
c000ab85:	6a 00                	push   0x0
c000ab87:	68 e0 8c 02 c0       	push   0xc0028ce0
c000ab8c:	e8 03 5b ff ff       	call   c0000694 <memset>
c000ab91:	83 c4 1c             	add    esp,0x1c
c000ab94:	c3                   	ret    

c000ab95 <scrollTerminalScrollLock(int)>:
c000ab95:	c3                   	ret    

c000ab96 <VgaText::updateTitle()>:
c000ab96:	53                   	push   ebx
c000ab97:	31 c0                	xor    eax,eax
c000ab99:	83 ec 58             	sub    esp,0x58
c000ab9c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000aba0:	89 e1                	mov    ecx,esp
c000aba2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000aba6:	40                   	inc    eax
c000aba7:	83 f8 50             	cmp    eax,0x50
c000abaa:	75 f6                	jne    c000aba2 <VgaText::updateTitle()+0xc>
c000abac:	31 c0                	xor    eax,eax
c000abae:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000abb5:	84 db                	test   bl,bl
c000abb7:	74 06                	je     c000abbf <VgaText::updateTitle()+0x29>
c000abb9:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000abbc:	40                   	inc    eax
c000abbd:	eb ef                	jmp    c000abae <VgaText::updateTitle()+0x18>
c000abbf:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000abc2:	85 c0                	test   eax,eax
c000abc4:	74 09                	je     c000abcf <VgaText::updateTitle()+0x39>
c000abc6:	53                   	push   ebx
c000abc7:	53                   	push   ebx
c000abc8:	51                   	push   ecx
c000abc9:	52                   	push   edx
c000abca:	ff d0                	call   eax
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	83 c4 58             	add    esp,0x58
c000abd2:	5b                   	pop    ebx
c000abd3:	c3                   	ret    

c000abd4 <VgaText::load()>:
c000abd4:	53                   	push   ebx
c000abd5:	31 c0                	xor    eax,eax
c000abd7:	83 ec 58             	sub    esp,0x58
c000abda:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000abde:	89 e2                	mov    edx,esp
c000abe0:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000abe4:	40                   	inc    eax
c000abe5:	83 f8 50             	cmp    eax,0x50
c000abe8:	75 f6                	jne    c000abe0 <VgaText::load()+0xc>
c000abea:	31 c0                	xor    eax,eax
c000abec:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000abf3:	84 c9                	test   cl,cl
c000abf5:	74 06                	je     c000abfd <VgaText::load()+0x29>
c000abf7:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000abfa:	40                   	inc    eax
c000abfb:	eb ef                	jmp    c000abec <VgaText::load()+0x18>
c000abfd:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000ac00:	85 c0                	test   eax,eax
c000ac02:	74 09                	je     c000ac0d <VgaText::load()+0x39>
c000ac04:	51                   	push   ecx
c000ac05:	51                   	push   ecx
c000ac06:	52                   	push   edx
c000ac07:	53                   	push   ebx
c000ac08:	ff d0                	call   eax
c000ac0a:	83 c4 10             	add    esp,0x10
c000ac0d:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000ac10:	85 c0                	test   eax,eax
c000ac12:	74 09                	je     c000ac1d <VgaText::load()+0x49>
c000ac14:	83 ec 0c             	sub    esp,0xc
c000ac17:	53                   	push   ebx
c000ac18:	ff d0                	call   eax
c000ac1a:	83 c4 10             	add    esp,0x10
c000ac1d:	83 c4 58             	add    esp,0x58
c000ac20:	5b                   	pop    ebx
c000ac21:	c3                   	ret    

c000ac22 <VgaText::updateCursor()>:
c000ac22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac26:	39 05 04 8d 02 c0    	cmp    DWORD PTR ds:0xc0028d04,eax
c000ac2c:	75 09                	jne    c000ac37 <VgaText::updateCursor()+0x15>
c000ac2e:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000ac31:	85 c0                	test   eax,eax
c000ac33:	74 02                	je     c000ac37 <VgaText::updateCursor()+0x15>
c000ac35:	ff e0                	jmp    eax
c000ac37:	c3                   	ret    

c000ac38 <VgaText::doANSI_SGR(int)>:
c000ac38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac40:	85 d2                	test   edx,edx
c000ac42:	75 0b                	jne    c000ac4f <VgaText::doANSI_SGR(int)+0x17>
c000ac44:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000ac47:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac4a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ac4d:	eb 59                	jmp    c000aca8 <VgaText::doANSI_SGR(int)+0x70>
c000ac4f:	83 fa 07             	cmp    edx,0x7
c000ac52:	75 0b                	jne    c000ac5f <VgaText::doANSI_SGR(int)+0x27>
c000ac54:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000ac57:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000ac5a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000ac5d:	eb 49                	jmp    c000aca8 <VgaText::doANSI_SGR(int)+0x70>
c000ac5f:	83 fa 1b             	cmp    edx,0x1b
c000ac62:	74 e0                	je     c000ac44 <VgaText::doANSI_SGR(int)+0xc>
c000ac64:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ac67:	83 f9 07             	cmp    ecx,0x7
c000ac6a:	77 09                	ja     c000ac75 <VgaText::doANSI_SGR(int)+0x3d>
c000ac6c:	8b 14 8d 80 80 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd7f80]
c000ac73:	eb 20                	jmp    c000ac95 <VgaText::doANSI_SGR(int)+0x5d>
c000ac75:	8d 4a d8             	lea    ecx,[edx-0x28]
c000ac78:	83 f9 07             	cmp    ecx,0x7
c000ac7b:	77 09                	ja     c000ac86 <VgaText::doANSI_SGR(int)+0x4e>
c000ac7d:	8b 14 8d 80 80 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd7f80]
c000ac84:	eb 22                	jmp    c000aca8 <VgaText::doANSI_SGR(int)+0x70>
c000ac86:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000ac89:	83 f9 07             	cmp    ecx,0x7
c000ac8c:	77 0b                	ja     c000ac99 <VgaText::doANSI_SGR(int)+0x61>
c000ac8e:	8b 14 95 38 7f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd80c8]
c000ac95:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac98:	c3                   	ret    
c000ac99:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000ac9c:	83 f9 07             	cmp    ecx,0x7
c000ac9f:	77 0a                	ja     c000acab <VgaText::doANSI_SGR(int)+0x73>
c000aca1:	8b 14 95 10 7f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd80f0]
c000aca8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000acab:	c3                   	ret    

c000acac <VgaText::setDefaultBgColour(VgaColour)>:
c000acac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acb4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000acb7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000acba:	c3                   	ret    
c000acbb:	90                   	nop

c000acbc <VgaText::setDefaultFgColour(VgaColour)>:
c000acbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acc4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000acc7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000acca:	c3                   	ret    
c000accb:	90                   	nop

c000accc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000accc:	53                   	push   ebx
c000accd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000acd1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000acd5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000acd9:	51                   	push   ecx
c000acda:	e8 cd ff ff ff       	call   c000acac <VgaText::setDefaultBgColour(VgaColour)>
c000acdf:	58                   	pop    eax
c000ace0:	5a                   	pop    edx
c000ace1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ace5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ace9:	5b                   	pop    ebx
c000acea:	eb d0                	jmp    c000acbc <VgaText::setDefaultFgColour(VgaColour)>

c000acec <VgaText::setTitleTextColour(VgaColour)>:
c000acec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acf0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000acf4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000acf7:	e9 9a fe ff ff       	jmp    c000ab96 <VgaText::updateTitle()>

c000acfc <VgaText::setTitleColour(VgaColour)>:
c000acfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad04:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ad07:	e9 8a fe ff ff       	jmp    c000ab96 <VgaText::updateTitle()>

c000ad0c <VgaText::setTitle(char*)>:
c000ad0c:	53                   	push   ebx
c000ad0d:	83 ec 10             	sub    esp,0x10
c000ad10:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad18:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000ad1e:	50                   	push   eax
c000ad1f:	e8 2c 5a ff ff       	call   c0000750 <strcpy>
c000ad24:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad28:	83 c4 18             	add    esp,0x18
c000ad2b:	5b                   	pop    ebx
c000ad2c:	e9 65 fe ff ff       	jmp    c000ab96 <VgaText::updateTitle()>
c000ad31:	90                   	nop

c000ad32 <VgaText::combineColours(unsigned char, unsigned char)>:
c000ad32:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ad36:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ad3b:	83 e0 0f             	and    eax,0xf
c000ad3e:	c1 e2 04             	shl    edx,0x4
c000ad41:	09 d0                	or     eax,edx
c000ad43:	c3                   	ret    

c000ad44 <VgaText::scrollScreen()>:
c000ad44:	55                   	push   ebp
c000ad45:	b9 01 00 00 00       	mov    ecx,0x1
c000ad4a:	57                   	push   edi
c000ad4b:	56                   	push   esi
c000ad4c:	53                   	push   ebx
c000ad4d:	83 ec 0c             	sub    esp,0xc
c000ad50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ad54:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000ad5a:	31 ff                	xor    edi,edi
c000ad5c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ad5f:	83 f9 17             	cmp    ecx,0x17
c000ad62:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000ad65:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000ad6c:	75 27                	jne    c000ad95 <VgaText::scrollScreen()+0x51>
c000ad6e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000ad71:	01 f5                	add    ebp,esi
c000ad73:	f7 c7 01 00 00 00    	test   edi,0x1
c000ad79:	74 16                	je     c000ad91 <VgaText::scrollScreen()+0x4d>
c000ad7b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000ad7f:	50                   	push   eax
c000ad80:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000ad84:	50                   	push   eax
c000ad85:	e8 a8 ff ff ff       	call   c000ad32 <VgaText::combineColours(unsigned char, unsigned char)>
c000ad8a:	5a                   	pop    edx
c000ad8b:	5a                   	pop    edx
c000ad8c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000ad8f:	eb 04                	jmp    c000ad95 <VgaText::scrollScreen()+0x51>
c000ad91:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000ad95:	47                   	inc    edi
c000ad96:	46                   	inc    esi
c000ad97:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ad9d:	75 bd                	jne    c000ad5c <VgaText::scrollScreen()+0x18>
c000ad9f:	41                   	inc    ecx
c000ada0:	83 f9 18             	cmp    ecx,0x18
c000ada3:	75 af                	jne    c000ad54 <VgaText::scrollScreen()+0x10>
c000ada5:	39 1d 04 8d 02 c0    	cmp    DWORD PTR ds:0xc0028d04,ebx
c000adab:	75 1b                	jne    c000adc8 <VgaText::scrollScreen()+0x84>
c000adad:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000adb1:	74 05                	je     c000adb8 <VgaText::scrollScreen()+0x74>
c000adb3:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000adb6:	eb 10                	jmp    c000adc8 <VgaText::scrollScreen()+0x84>
c000adb8:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000adbb:	85 c0                	test   eax,eax
c000adbd:	74 09                	je     c000adc8 <VgaText::scrollScreen()+0x84>
c000adbf:	83 ec 0c             	sub    esp,0xc
c000adc2:	53                   	push   ebx
c000adc3:	ff d0                	call   eax
c000adc5:	83 c4 10             	add    esp,0x10
c000adc8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000adcc:	83 c4 0c             	add    esp,0xc
c000adcf:	5b                   	pop    ebx
c000add0:	5e                   	pop    esi
c000add1:	5f                   	pop    edi
c000add2:	5d                   	pop    ebp
c000add3:	e9 4a fe ff ff       	jmp    c000ac22 <VgaText::updateCursor()>

c000add8 <VgaText::combineCharAndColour(char, unsigned char)>:
c000add8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000addd:	c1 e0 08             	shl    eax,0x8
c000ade0:	89 c2                	mov    edx,eax
c000ade2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ade7:	09 d0                	or     eax,edx
c000ade9:	c3                   	ret    

c000adea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000adea:	56                   	push   esi
c000adeb:	53                   	push   ebx
c000adec:	51                   	push   ecx
c000aded:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000adf1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000adf6:	50                   	push   eax
c000adf7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000adfc:	50                   	push   eax
c000adfd:	e8 30 ff ff ff       	call   c000ad32 <VgaText::combineColours(unsigned char, unsigned char)>
c000ae02:	5b                   	pop    ebx
c000ae03:	0f b6 c0             	movzx  eax,al
c000ae06:	5e                   	pop    esi
c000ae07:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ae0c:	50                   	push   eax
c000ae0d:	53                   	push   ebx
c000ae0e:	e8 c5 ff ff ff       	call   c000add8 <VgaText::combineCharAndColour(char, unsigned char)>
c000ae13:	5a                   	pop    edx
c000ae14:	5e                   	pop    esi
c000ae15:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000ae18:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ae1e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ae22:	0f b7 d2             	movzx  edx,dx
c000ae25:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ae29:	39 0d 04 8d 02 c0    	cmp    DWORD PTR ds:0xc0028d04,ecx
c000ae2f:	75 10                	jne    c000ae41 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ae31:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000ae34:	85 c0                	test   eax,eax
c000ae36:	74 09                	je     c000ae41 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ae38:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ae3c:	5a                   	pop    edx
c000ae3d:	5b                   	pop    ebx
c000ae3e:	5e                   	pop    esi
c000ae3f:	ff e0                	jmp    eax
c000ae41:	58                   	pop    eax
c000ae42:	5b                   	pop    ebx
c000ae43:	5e                   	pop    esi
c000ae44:	c3                   	ret    
c000ae45:	90                   	nop

c000ae46 <VgaText::getCursorX()>:
c000ae46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae4a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000ae4d:	c3                   	ret    

c000ae4e <VgaText::getCursorY()>:
c000ae4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae52:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000ae55:	c3                   	ret    

c000ae56 <VgaText::setCursor(int, int)>:
c000ae56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ae5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ae5e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000ae61:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae65:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ae68:	e9 b5 fd ff ff       	jmp    c000ac22 <VgaText::updateCursor()>

c000ae6d <setActiveTerminal(VgaText*)>:
c000ae6d:	53                   	push   ebx
c000ae6e:	83 ec 08             	sub    esp,0x8
c000ae71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae75:	85 db                	test   ebx,ebx
c000ae77:	75 11                	jne    c000ae8a <setActiveTerminal(VgaText*)+0x1d>
c000ae79:	c7 44 24 10 88 4d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024d88
c000ae81:	83 c4 08             	add    esp,0x8
c000ae84:	5b                   	pop    ebx
c000ae85:	e9 a7 a2 00 00       	jmp    c0015131 <Krnl::panic(char const*)>
c000ae8a:	a1 04 8d 02 c0       	mov    eax,ds:0xc0028d04
c000ae8f:	85 c0                	test   eax,eax
c000ae91:	74 0c                	je     c000ae9f <setActiveTerminal(VgaText*)+0x32>
c000ae93:	83 ec 0c             	sub    esp,0xc
c000ae96:	50                   	push   eax
c000ae97:	e8 86 fd ff ff       	call   c000ac22 <VgaText::updateCursor()>
c000ae9c:	83 c4 10             	add    esp,0x10
c000ae9f:	89 1d 04 8d 02 c0    	mov    DWORD PTR ds:0xc0028d04,ebx
c000aea5:	51                   	push   ecx
c000aea6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aea9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aeac:	53                   	push   ebx
c000aead:	e8 a4 ff ff ff       	call   c000ae56 <VgaText::setCursor(int, int)>
c000aeb2:	83 c4 10             	add    esp,0x10
c000aeb5:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000aeb9:	75 07                	jne    c000aec2 <setActiveTerminal(VgaText*)+0x55>
c000aebb:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000aec2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aec6:	83 c4 08             	add    esp,0x8
c000aec9:	5b                   	pop    ebx
c000aeca:	e9 05 fd ff ff       	jmp    c000abd4 <VgaText::load()>

c000aecf <doTerminalCycle()>:
c000aecf:	83 ec 18             	sub    esp,0x18
c000aed2:	a1 00 8d 02 c0       	mov    eax,ds:0xc0028d00
c000aed7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000aeda:	50                   	push   eax
c000aedb:	a3 00 8d 02 c0       	mov    ds:0xc0028d00,eax
c000aee0:	e8 88 ff ff ff       	call   c000ae6d <setActiveTerminal(VgaText*)>
c000aee5:	83 c4 1c             	add    esp,0x1c
c000aee8:	c3                   	ret    
c000aee9:	90                   	nop

c000aeea <VgaText::setCursorX(int)>:
c000aeea:	83 ec 10             	sub    esp,0x10
c000aeed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aef1:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000aef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aef8:	50                   	push   eax
c000aef9:	e8 58 ff ff ff       	call   c000ae56 <VgaText::setCursor(int, int)>
c000aefe:	83 c4 1c             	add    esp,0x1c
c000af01:	c3                   	ret    

c000af02 <VgaText::setCursorY(int)>:
c000af02:	83 ec 10             	sub    esp,0x10
c000af05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af0d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000af10:	50                   	push   eax
c000af11:	e8 40 ff ff ff       	call   c000ae56 <VgaText::setCursor(int, int)>
c000af16:	83 c4 1c             	add    esp,0x1c
c000af19:	c3                   	ret    

c000af1a <VgaText::incrementCursor(bool)>:
c000af1a:	56                   	push   esi
c000af1b:	53                   	push   ebx
c000af1c:	51                   	push   ecx
c000af1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af21:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000af25:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000af28:	40                   	inc    eax
c000af29:	83 f8 50             	cmp    eax,0x50
c000af2c:	74 05                	je     c000af33 <VgaText::incrementCursor(bool)+0x19>
c000af2e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000af31:	eb 24                	jmp    c000af57 <VgaText::incrementCursor(bool)+0x3d>
c000af33:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af36:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af3d:	8d 50 01             	lea    edx,[eax+0x1]
c000af40:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000af43:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000af46:	75 0f                	jne    c000af57 <VgaText::incrementCursor(bool)+0x3d>
c000af48:	83 ec 0c             	sub    esp,0xc
c000af4b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000af4e:	53                   	push   ebx
c000af4f:	e8 f0 fd ff ff       	call   c000ad44 <VgaText::scrollScreen()>
c000af54:	83 c4 10             	add    esp,0x10
c000af57:	89 f0                	mov    eax,esi
c000af59:	84 c0                	test   al,al
c000af5b:	74 0c                	je     c000af69 <VgaText::incrementCursor(bool)+0x4f>
c000af5d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af61:	5a                   	pop    edx
c000af62:	5b                   	pop    ebx
c000af63:	5e                   	pop    esi
c000af64:	e9 b9 fc ff ff       	jmp    c000ac22 <VgaText::updateCursor()>
c000af69:	58                   	pop    eax
c000af6a:	5b                   	pop    ebx
c000af6b:	5e                   	pop    esi
c000af6c:	c3                   	ret    
c000af6d:	90                   	nop

c000af6e <VgaText::decrementCursor(bool)>:
c000af6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000af72:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000af76:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000af79:	85 c0                	test   eax,eax
c000af7b:	74 04                	je     c000af81 <VgaText::decrementCursor(bool)+0x13>
c000af7d:	48                   	dec    eax
c000af7e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000af81:	84 c9                	test   cl,cl
c000af83:	74 09                	je     c000af8e <VgaText::decrementCursor(bool)+0x20>
c000af85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000af89:	e9 94 fc ff ff       	jmp    c000ac22 <VgaText::updateCursor()>
c000af8e:	c3                   	ret    
c000af8f:	90                   	nop

c000af90 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000af90:	53                   	push   ebx
c000af91:	83 ec 08             	sub    esp,0x8
c000af94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af9c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000afa0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000afa4:	3c 07                	cmp    al,0x7
c000afa6:	75 2a                	jne    c000afd2 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000afa8:	a1 b8 8d 02 c0       	mov    eax,ds:0xc0028db8
c000afad:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000afb5:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000afbd:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000afc5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afc9:	83 c4 08             	add    esp,0x8
c000afcc:	5b                   	pop    ebx
c000afcd:	e9 d4 2f 00 00       	jmp    c000dfa6 <Buzzer::beep(int, int, bool)>
c000afd2:	3c 0d                	cmp    al,0xd
c000afd4:	75 09                	jne    c000afdf <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000afd6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afdd:	eb 2c                	jmp    c000b00b <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000afdf:	3c 0a                	cmp    al,0xa
c000afe1:	75 31                	jne    c000b014 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000afe3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000afe6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000afed:	8d 50 01             	lea    edx,[eax+0x1]
c000aff0:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000aff3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000aff6:	75 0f                	jne    c000b007 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000aff8:	83 ec 0c             	sub    esp,0xc
c000affb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000affe:	53                   	push   ebx
c000afff:	e8 40 fd ff ff       	call   c000ad44 <VgaText::scrollScreen()>
c000b004:	83 c4 10             	add    esp,0x10
c000b007:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b00b:	83 c4 08             	add    esp,0x8
c000b00e:	5b                   	pop    ebx
c000b00f:	e9 0e fc ff ff       	jmp    c000ac22 <VgaText::updateCursor()>
c000b014:	3c 08                	cmp    al,0x8
c000b016:	75 25                	jne    c000b03d <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000b018:	50                   	push   eax
c000b019:	50                   	push   eax
c000b01a:	6a 01                	push   0x1
c000b01c:	53                   	push   ebx
c000b01d:	e8 4c ff ff ff       	call   c000af6e <VgaText::decrementCursor(bool)>
c000b022:	5a                   	pop    edx
c000b023:	59                   	pop    ecx
c000b024:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b027:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b02a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b02d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b030:	6a 20                	push   0x20
c000b032:	53                   	push   ebx
c000b033:	e8 b2 fd ff ff       	call   c000adea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b038:	83 c4 28             	add    esp,0x28
c000b03b:	5b                   	pop    ebx
c000b03c:	c3                   	ret    
c000b03d:	83 ec 08             	sub    esp,0x8
c000b040:	0f be c0             	movsx  eax,al
c000b043:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b046:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b049:	51                   	push   ecx
c000b04a:	52                   	push   edx
c000b04b:	50                   	push   eax
c000b04c:	53                   	push   ebx
c000b04d:	e8 98 fd ff ff       	call   c000adea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b052:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000b056:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000b05e:	83 c4 28             	add    esp,0x28
c000b061:	5b                   	pop    ebx
c000b062:	e9 b3 fe ff ff       	jmp    c000af1a <VgaText::incrementCursor(bool)>
c000b067:	90                   	nop

c000b068 <VgaText::doUpdate()>:
c000b068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b06c:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000b06f:	85 c0                	test   eax,eax
c000b071:	74 02                	je     c000b075 <VgaText::doUpdate()+0xd>
c000b073:	ff e0                	jmp    eax
c000b075:	c3                   	ret    

c000b076 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000b076:	55                   	push   ebp
c000b077:	31 ed                	xor    ebp,ebp
c000b079:	57                   	push   edi
c000b07a:	56                   	push   esi
c000b07b:	53                   	push   ebx
c000b07c:	83 ec 1c             	sub    esp,0x1c
c000b07f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b083:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b088:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b08f:	50                   	push   eax
c000b090:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000b095:	50                   	push   eax
c000b096:	e8 97 fc ff ff       	call   c000ad32 <VgaText::combineColours(unsigned char, unsigned char)>
c000b09b:	59                   	pop    ecx
c000b09c:	0f b6 c0             	movzx  eax,al
c000b09f:	5e                   	pop    esi
c000b0a0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b0a5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b0a9:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b0ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b0b0:	0f b7 f6             	movzx  esi,si
c000b0b3:	01 f6                	add    esi,esi
c000b0b5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b0b8:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b0bb:	84 c0                	test   al,al
c000b0bd:	0f 84 fd 00 00 00    	je     c000b1c0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000b0c3:	3c 0d                	cmp    al,0xd
c000b0c5:	75 0c                	jne    c000b0d3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000b0c7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b0ce:	e9 e7 00 00 00       	jmp    c000b1ba <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b0d3:	3c 0a                	cmp    al,0xa
c000b0d5:	75 47                	jne    c000b11e <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b0d7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b0da:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b0e1:	8d 48 01             	lea    ecx,[eax+0x1]
c000b0e4:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b0e7:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b0ea:	75 0f                	jne    c000b0fb <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b0f2:	53                   	push   ebx
c000b0f3:	e8 4c fc ff ff       	call   c000ad44 <VgaText::scrollScreen()>
c000b0f8:	83 c4 10             	add    esp,0x10
c000b0fb:	83 ec 0c             	sub    esp,0xc
c000b0fe:	31 ed                	xor    ebp,ebp
c000b100:	53                   	push   ebx
c000b101:	e8 1c fb ff ff       	call   c000ac22 <VgaText::updateCursor()>
c000b106:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b111:	0f b7 f6             	movzx  esi,si
c000b114:	01 f6                	add    esi,esi
c000b116:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b119:	e9 9c 00 00 00       	jmp    c000b1ba <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b11e:	3c 08                	cmp    al,0x8
c000b120:	75 35                	jne    c000b157 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b122:	56                   	push   esi
c000b123:	56                   	push   esi
c000b124:	6a 01                	push   0x1
c000b126:	53                   	push   ebx
c000b127:	e8 42 fe ff ff       	call   c000af6e <VgaText::decrementCursor(bool)>
c000b12c:	58                   	pop    eax
c000b12d:	5a                   	pop    edx
c000b12e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b131:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b134:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b137:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b13a:	6a 20                	push   0x20
c000b13c:	53                   	push   ebx
c000b13d:	e8 a8 fc ff ff       	call   c000adea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b142:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b147:	83 c4 20             	add    esp,0x20
c000b14a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b14d:	0f b7 f6             	movzx  esi,si
c000b150:	01 f6                	add    esi,esi
c000b152:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b155:	eb 63                	jmp    c000b1ba <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b157:	51                   	push   ecx
c000b158:	51                   	push   ecx
c000b159:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15d:	50                   	push   eax
c000b15e:	e8 75 fc ff ff       	call   c000add8 <VgaText::combineCharAndColour(char, unsigned char)>
c000b163:	83 c4 10             	add    esp,0x10
c000b166:	66 89 06             	mov    WORD PTR [esi],ax
c000b169:	39 1d 04 8d 02 c0    	cmp    DWORD PTR ds:0xc0028d04,ebx
c000b16f:	75 21                	jne    c000b192 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b171:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b174:	85 c0                	test   eax,eax
c000b176:	74 1a                	je     c000b192 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b178:	52                   	push   edx
c000b179:	52                   	push   edx
c000b17a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b17d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b180:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b184:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b188:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b18b:	51                   	push   ecx
c000b18c:	53                   	push   ebx
c000b18d:	ff d0                	call   eax
c000b18f:	83 c4 20             	add    esp,0x20
c000b192:	83 c6 02             	add    esi,0x2
c000b195:	50                   	push   eax
c000b196:	50                   	push   eax
c000b197:	6a 00                	push   0x0
c000b199:	53                   	push   ebx
c000b19a:	e8 7b fd ff ff       	call   c000af1a <VgaText::incrementCursor(bool)>
c000b19f:	83 c4 10             	add    esp,0x10
c000b1a2:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b1a6:	75 0d                	jne    c000b1b5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b1a8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b1ad:	0f b7 f6             	movzx  esi,si
c000b1b0:	01 f6                	add    esi,esi
c000b1b2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b1b5:	bd 01 00 00 00       	mov    ebp,0x1
c000b1ba:	47                   	inc    edi
c000b1bb:	e9 f8 fe ff ff       	jmp    c000b0b8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b1c0:	83 ec 0c             	sub    esp,0xc
c000b1c3:	53                   	push   ebx
c000b1c4:	e8 59 fa ff ff       	call   c000ac22 <VgaText::updateCursor()>
c000b1c9:	83 c4 10             	add    esp,0x10
c000b1cc:	89 e8                	mov    eax,ebp
c000b1ce:	84 c0                	test   al,al
c000b1d0:	74 0c                	je     c000b1de <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b1d2:	83 ec 0c             	sub    esp,0xc
c000b1d5:	53                   	push   ebx
c000b1d6:	e8 8d fe ff ff       	call   c000b068 <VgaText::doUpdate()>
c000b1db:	83 c4 10             	add    esp,0x10
c000b1de:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b1e5:	83 c4 1c             	add    esp,0x1c
c000b1e8:	5b                   	pop    ebx
c000b1e9:	5e                   	pop    esi
c000b1ea:	5f                   	pop    edi
c000b1eb:	5d                   	pop    ebp
c000b1ec:	c3                   	ret    
c000b1ed:	90                   	nop

c000b1ee <VgaText::clearScreen()>:
c000b1ee:	57                   	push   edi
c000b1ef:	56                   	push   esi
c000b1f0:	31 f6                	xor    esi,esi
c000b1f2:	53                   	push   ebx
c000b1f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b1f7:	52                   	push   edx
c000b1f8:	6a 00                	push   0x0
c000b1fa:	6a 00                	push   0x0
c000b1fc:	53                   	push   ebx
c000b1fd:	e8 54 fc ff ff       	call   c000ae56 <VgaText::setCursor(int, int)>
c000b202:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b209:	83 c4 10             	add    esp,0x10
c000b20c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b20f:	7e 20                	jle    c000b231 <VgaText::clearScreen()+0x43>
c000b211:	31 ff                	xor    edi,edi
c000b213:	50                   	push   eax
c000b214:	50                   	push   eax
c000b215:	56                   	push   esi
c000b216:	57                   	push   edi
c000b217:	47                   	inc    edi
c000b218:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b21b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b21e:	6a 20                	push   0x20
c000b220:	53                   	push   ebx
c000b221:	e8 c4 fb ff ff       	call   c000adea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b226:	83 c4 20             	add    esp,0x20
c000b229:	83 ff 50             	cmp    edi,0x50
c000b22c:	75 e5                	jne    c000b213 <VgaText::clearScreen()+0x25>
c000b22e:	46                   	inc    esi
c000b22f:	eb db                	jmp    c000b20c <VgaText::clearScreen()+0x1e>
c000b231:	83 ec 0c             	sub    esp,0xc
c000b234:	53                   	push   ebx
c000b235:	e8 2e fe ff ff       	call   c000b068 <VgaText::doUpdate()>
c000b23a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b241:	83 c4 10             	add    esp,0x10
c000b244:	5b                   	pop    ebx
c000b245:	5e                   	pop    esi
c000b246:	5f                   	pop    edi
c000b247:	c3                   	ret    

c000b248 <VgaText::putchar(char)>:
c000b248:	56                   	push   esi
c000b249:	53                   	push   ebx
c000b24a:	83 ec 14             	sub    esp,0x14
c000b24d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b251:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b255:	3c 5b                	cmp    al,0x5b
c000b257:	75 18                	jne    c000b271 <VgaText::putchar(char)+0x29>
c000b259:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b25d:	74 1f                	je     c000b27e <VgaText::putchar(char)+0x36>
c000b25f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b265:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b26c:	e9 bd 00 00 00       	jmp    c000b32e <VgaText::putchar(char)+0xe6>
c000b271:	3c 1b                	cmp    al,0x1b
c000b273:	75 09                	jne    c000b27e <VgaText::putchar(char)+0x36>
c000b275:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b279:	e9 b0 00 00 00       	jmp    c000b32e <VgaText::putchar(char)+0xe6>
c000b27e:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b281:	84 c9                	test   cl,cl
c000b283:	0f 84 92 00 00 00    	je     c000b31b <VgaText::putchar(char)+0xd3>
c000b289:	8d 50 c0             	lea    edx,[eax-0x40]
c000b28c:	80 fa 3e             	cmp    dl,0x3e
c000b28f:	77 76                	ja     c000b307 <VgaText::putchar(char)+0xbf>
c000b291:	3c 6d                	cmp    al,0x6d
c000b293:	75 47                	jne    c000b2dc <VgaText::putchar(char)+0x94>
c000b295:	31 f6                	xor    esi,esi
c000b297:	31 d2                	xor    edx,edx
c000b299:	31 c0                	xor    eax,eax
c000b29b:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b29e:	7e 2d                	jle    c000b2cd <VgaText::putchar(char)+0x85>
c000b2a0:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b2a5:	80 fa 3b             	cmp    dl,0x3b
c000b2a8:	75 17                	jne    c000b2c1 <VgaText::putchar(char)+0x79>
c000b2aa:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b2ae:	50                   	push   eax
c000b2af:	53                   	push   ebx
c000b2b0:	e8 83 f9 ff ff       	call   c000ac38 <VgaText::doANSI_SGR(int)>
c000b2b5:	59                   	pop    ecx
c000b2b6:	31 d2                	xor    edx,edx
c000b2b8:	58                   	pop    eax
c000b2b9:	31 c0                	xor    eax,eax
c000b2bb:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b2bf:	eb 09                	jmp    c000b2ca <VgaText::putchar(char)+0x82>
c000b2c1:	6b c0 0a             	imul   eax,eax,0xa
c000b2c4:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b2c8:	88 ca                	mov    dl,cl
c000b2ca:	46                   	inc    esi
c000b2cb:	eb ce                	jmp    c000b29b <VgaText::putchar(char)+0x53>
c000b2cd:	84 d2                	test   dl,dl
c000b2cf:	74 2e                	je     c000b2ff <VgaText::putchar(char)+0xb7>
c000b2d1:	50                   	push   eax
c000b2d2:	53                   	push   ebx
c000b2d3:	e8 60 f9 ff ff       	call   c000ac38 <VgaText::doANSI_SGR(int)>
c000b2d8:	58                   	pop    eax
c000b2d9:	5a                   	pop    edx
c000b2da:	eb 23                	jmp    c000b2ff <VgaText::putchar(char)+0xb7>
c000b2dc:	3c 4a                	cmp    al,0x4a
c000b2de:	75 1f                	jne    c000b2ff <VgaText::putchar(char)+0xb7>
c000b2e0:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b2e4:	75 19                	jne    c000b2ff <VgaText::putchar(char)+0xb7>
c000b2e6:	83 ec 0c             	sub    esp,0xc
c000b2e9:	53                   	push   ebx
c000b2ea:	e8 ff fe ff ff       	call   c000b1ee <VgaText::clearScreen()>
c000b2ef:	83 c4 0c             	add    esp,0xc
c000b2f2:	6a 00                	push   0x0
c000b2f4:	6a 00                	push   0x0
c000b2f6:	53                   	push   ebx
c000b2f7:	e8 5a fb ff ff       	call   c000ae56 <VgaText::setCursor(int, int)>
c000b2fc:	83 c4 10             	add    esp,0x10
c000b2ff:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b305:	eb 27                	jmp    c000b32e <VgaText::putchar(char)+0xe6>
c000b307:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b30a:	83 fa 0e             	cmp    edx,0xe
c000b30d:	7f 1f                	jg     c000b32e <VgaText::putchar(char)+0xe6>
c000b30f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b312:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b315:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b319:	eb 13                	jmp    c000b32e <VgaText::putchar(char)+0xe6>
c000b31b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b31e:	0f be c0             	movsx  eax,al
c000b321:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b324:	50                   	push   eax
c000b325:	53                   	push   ebx
c000b326:	e8 65 fc ff ff       	call   c000af90 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b32b:	83 c4 10             	add    esp,0x10
c000b32e:	83 c4 14             	add    esp,0x14
c000b331:	5b                   	pop    ebx
c000b332:	5e                   	pop    esi
c000b333:	c3                   	ret    

c000b334 <VgaText::putx(unsigned int)>:
c000b334:	57                   	push   edi
c000b335:	b9 11 00 00 00       	mov    ecx,0x11
c000b33a:	56                   	push   esi
c000b33b:	be 96 4d 02 c0       	mov    esi,0xc0024d96
c000b340:	53                   	push   ebx
c000b341:	83 ec 20             	sub    esp,0x20
c000b344:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b348:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b34c:	fc                   	cld    
c000b34d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b34f:	be 08 00 00 00       	mov    esi,0x8
c000b354:	50                   	push   eax
c000b355:	50                   	push   eax
c000b356:	89 d8                	mov    eax,ebx
c000b358:	c1 e3 04             	shl    ebx,0x4
c000b35b:	c1 e8 1c             	shr    eax,0x1c
c000b35e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b363:	50                   	push   eax
c000b364:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b368:	e8 db fe ff ff       	call   c000b248 <VgaText::putchar(char)>
c000b36d:	83 c4 10             	add    esp,0x10
c000b370:	4e                   	dec    esi
c000b371:	75 e1                	jne    c000b354 <VgaText::putx(unsigned int)+0x20>
c000b373:	83 c4 20             	add    esp,0x20
c000b376:	5b                   	pop    ebx
c000b377:	5e                   	pop    esi
c000b378:	5f                   	pop    edi
c000b379:	c3                   	ret    

c000b37a <VgaText::puts(char const*)>:
c000b37a:	53                   	push   ebx
c000b37b:	83 ec 08             	sub    esp,0x8
c000b37e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b382:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b385:	84 c0                	test   al,al
c000b387:	74 12                	je     c000b39b <VgaText::puts(char const*)+0x21>
c000b389:	43                   	inc    ebx
c000b38a:	51                   	push   ecx
c000b38b:	51                   	push   ecx
c000b38c:	50                   	push   eax
c000b38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b391:	e8 b2 fe ff ff       	call   c000b248 <VgaText::putchar(char)>
c000b396:	83 c4 10             	add    esp,0x10
c000b399:	eb e7                	jmp    c000b382 <VgaText::puts(char const*)+0x8>
c000b39b:	83 c4 08             	add    esp,0x8
c000b39e:	5b                   	pop    ebx
c000b39f:	c3                   	ret    

c000b3a0 <VgaText::VgaText(char const*)>:
c000b3a0:	57                   	push   edi
c000b3a1:	56                   	push   esi
c000b3a2:	53                   	push   ebx
c000b3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a7:	83 ec 08             	sub    esp,0x8
c000b3aa:	6a 00                	push   0x0
c000b3ac:	50                   	push   eax
c000b3ad:	e8 44 05 00 00       	call   c000b8f6 <UnixFile::UnixFile(int)>
c000b3b2:	83 c4 10             	add    esp,0x10
c000b3b5:	ba fc 4d 02 c0       	mov    edx,0xc0024dfc
c000b3ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3be:	89 10                	mov    DWORD PTR [eax],edx
c000b3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3c4:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b3cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3cf:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3da:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b3de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b3e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ea:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b3f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f5:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b400:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40b:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b416:	8d 50 60             	lea    edx,[eax+0x60]
c000b419:	bb e0 8c 02 c0       	mov    ebx,0xc0028ce0
c000b41e:	b8 08 00 00 00       	mov    eax,0x8
c000b423:	fc                   	cld    
c000b424:	89 d7                	mov    edi,edx
c000b426:	89 de                	mov    esi,ebx
c000b428:	89 c1                	mov    ecx,eax
c000b42a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b430:	05 82 00 00 00       	add    eax,0x82
c000b435:	83 ec 08             	sub    esp,0x8
c000b438:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b43c:	50                   	push   eax
c000b43d:	e8 0e 53 ff ff       	call   c0000750 <strcpy>
c000b442:	83 c4 10             	add    esp,0x10
c000b445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b449:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b450:	83 ec 0c             	sub    esp,0xc
c000b453:	6a 01                	push   0x1
c000b455:	e8 df 08 00 00       	call   c000bd39 <Virt::allocateKernelVirtualPages(int)>
c000b45a:	83 c4 10             	add    esp,0x10
c000b45d:	89 c2                	mov    edx,eax
c000b45f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b463:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b466:	8b 1d b0 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028db0
c000b46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b470:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b473:	89 c6                	mov    esi,eax
c000b475:	e8 b0 ef ff ff       	call   c000a42a <Phys::allocatePage()>
c000b47a:	68 05 0c 00 00       	push   0xc05
c000b47f:	56                   	push   esi
c000b480:	50                   	push   eax
c000b481:	53                   	push   ebx
c000b482:	e8 59 0f 00 00       	call   c000c3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b487:	83 c4 10             	add    esp,0x10
c000b48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b48e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b491:	83 ec 04             	sub    esp,0x4
c000b494:	68 00 0f 00 00       	push   0xf00
c000b499:	6a 00                	push   0x0
c000b49b:	50                   	push   eax
c000b49c:	e8 f3 51 ff ff       	call   c0000694 <memset>
c000b4a1:	83 c4 10             	add    esp,0x10
c000b4a4:	83 ec 04             	sub    esp,0x4
c000b4a7:	6a 00                	push   0x0
c000b4a9:	6a 07                	push   0x7
c000b4ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4af:	e8 18 f8 ff ff       	call   c000accc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b4b4:	83 c4 10             	add    esp,0x10
c000b4b7:	83 ec 04             	sub    esp,0x4
c000b4ba:	6a 00                	push   0x0
c000b4bc:	6a 00                	push   0x0
c000b4be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c2:	e8 8f f9 ff ff       	call   c000ae56 <VgaText::setCursor(int, int)>
c000b4c7:	83 c4 10             	add    esp,0x10
c000b4ca:	83 ec 0c             	sub    esp,0xc
c000b4cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d1:	e8 18 fd ff ff       	call   c000b1ee <VgaText::clearScreen()>
c000b4d6:	83 c4 10             	add    esp,0x10
c000b4d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4dd:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b4e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4e5:	05 02 01 00 00       	add    eax,0x102
c000b4ea:	83 ec 04             	sub    esp,0x4
c000b4ed:	6a 30                	push   0x30
c000b4ef:	6a 00                	push   0x0
c000b4f1:	50                   	push   eax
c000b4f2:	e8 9d 51 ff ff       	call   c0000694 <memset>
c000b4f7:	83 c4 10             	add    esp,0x10
c000b4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4fe:	05 32 01 00 00       	add    eax,0x132
c000b503:	83 ec 04             	sub    esp,0x4
c000b506:	68 80 00 00 00       	push   0x80
c000b50b:	6a 00                	push   0x0
c000b50d:	50                   	push   eax
c000b50e:	e8 81 51 ff ff       	call   c0000694 <memset>
c000b513:	83 c4 10             	add    esp,0x10
c000b516:	90                   	nop
c000b517:	5b                   	pop    ebx
c000b518:	5e                   	pop    esi
c000b519:	5f                   	pop    edi
c000b51a:	c3                   	ret    
c000b51b:	90                   	nop

c000b51c <VgaText::receiveKey(unsigned char)>:
c000b51c:	55                   	push   ebp
c000b51d:	57                   	push   edi
c000b51e:	56                   	push   esi
c000b51f:	53                   	push   ebx
c000b520:	83 ec 1c             	sub    esp,0x1c
c000b523:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b527:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b52b:	84 db                	test   bl,bl
c000b52d:	0f 84 c6 00 00 00    	je     c000b5f9 <VgaText::receiveKey(unsigned char)+0xdd>
c000b533:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b539:	80 fb 08             	cmp    bl,0x8
c000b53c:	75 2c                	jne    c000b56a <VgaText::receiveKey(unsigned char)+0x4e>
c000b53e:	83 ec 0c             	sub    esp,0xc
c000b541:	57                   	push   edi
c000b542:	e8 69 51 ff ff       	call   c00006b0 <strlen>
c000b547:	83 c4 10             	add    esp,0x10
c000b54a:	85 c0                	test   eax,eax
c000b54c:	74 41                	je     c000b58f <VgaText::receiveKey(unsigned char)+0x73>
c000b54e:	50                   	push   eax
c000b54f:	50                   	push   eax
c000b550:	6a 08                	push   0x8
c000b552:	56                   	push   esi
c000b553:	e8 f0 fc ff ff       	call   c000b248 <VgaText::putchar(char)>
c000b558:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b55b:	e8 50 51 ff ff       	call   c00006b0 <strlen>
c000b560:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b568:	eb 22                	jmp    c000b58c <VgaText::receiveKey(unsigned char)+0x70>
c000b56a:	0f be c3             	movsx  eax,bl
c000b56d:	52                   	push   edx
c000b56e:	52                   	push   edx
c000b56f:	50                   	push   eax
c000b570:	56                   	push   esi
c000b571:	e8 d2 fc ff ff       	call   c000b248 <VgaText::putchar(char)>
c000b576:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b57a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b57f:	59                   	pop    ecx
c000b580:	5d                   	pop    ebp
c000b581:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b585:	50                   	push   eax
c000b586:	57                   	push   edi
c000b587:	e8 04 53 ff ff       	call   c0000890 <strcat>
c000b58c:	83 c4 10             	add    esp,0x10
c000b58f:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b596:	75 05                	jne    c000b59d <VgaText::receiveKey(unsigned char)+0x81>
c000b598:	80 fb 0a             	cmp    bl,0xa
c000b59b:	75 50                	jne    c000b5ed <VgaText::receiveKey(unsigned char)+0xd1>
c000b59d:	83 ec 0c             	sub    esp,0xc
c000b5a0:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b5a6:	53                   	push   ebx
c000b5a7:	e8 04 51 ff ff       	call   c00006b0 <strlen>
c000b5ac:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b5af:	89 c5                	mov    ebp,eax
c000b5b1:	e8 fa 50 ff ff       	call   c00006b0 <strlen>
c000b5b6:	83 c4 10             	add    esp,0x10
c000b5b9:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b5bd:	3d 80 00 00 00       	cmp    eax,0x80
c000b5c2:	76 10                	jbe    c000b5d4 <VgaText::receiveKey(unsigned char)+0xb8>
c000b5c4:	83 ec 0c             	sub    esp,0xc
c000b5c7:	68 a7 4d 02 c0       	push   0xc0024da7
c000b5cc:	e8 60 9b 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	50                   	push   eax
c000b5d5:	50                   	push   eax
c000b5d6:	57                   	push   edi
c000b5d7:	53                   	push   ebx
c000b5d8:	e8 b3 52 ff ff       	call   c0000890 <strcat>
c000b5dd:	83 c4 0c             	add    esp,0xc
c000b5e0:	6a 30                	push   0x30
c000b5e2:	6a 00                	push   0x0
c000b5e4:	57                   	push   edi
c000b5e5:	e8 aa 50 ff ff       	call   c0000694 <memset>
c000b5ea:	83 c4 10             	add    esp,0x10
c000b5ed:	83 ec 0c             	sub    esp,0xc
c000b5f0:	56                   	push   esi
c000b5f1:	e8 72 fa ff ff       	call   c000b068 <VgaText::doUpdate()>
c000b5f6:	83 c4 10             	add    esp,0x10
c000b5f9:	83 c4 1c             	add    esp,0x1c
c000b5fc:	5b                   	pop    ebx
c000b5fd:	5e                   	pop    esi
c000b5fe:	5f                   	pop    edi
c000b5ff:	5d                   	pop    ebp
c000b600:	c3                   	ret    
c000b601:	90                   	nop

c000b602 <VgaText::write(unsigned long long, void*, int*)>:
c000b602:	55                   	push   ebp
c000b603:	57                   	push   edi
c000b604:	56                   	push   esi
c000b605:	53                   	push   ebx
c000b606:	83 ec 0c             	sub    esp,0xc
c000b609:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b60d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b611:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b615:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b61c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b61f:	39 eb                	cmp    ebx,ebp
c000b621:	74 13                	je     c000b636 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b623:	43                   	inc    ebx
c000b624:	50                   	push   eax
c000b625:	50                   	push   eax
c000b626:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b62a:	50                   	push   eax
c000b62b:	56                   	push   esi
c000b62c:	e8 17 fc ff ff       	call   c000b248 <VgaText::putchar(char)>
c000b631:	83 c4 10             	add    esp,0x10
c000b634:	eb e9                	jmp    c000b61f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b636:	83 ec 0c             	sub    esp,0xc
c000b639:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b640:	56                   	push   esi
c000b641:	e8 22 fa ff ff       	call   c000b068 <VgaText::doUpdate()>
c000b646:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b64a:	89 38                	mov    DWORD PTR [eax],edi
c000b64c:	83 c4 1c             	add    esp,0x1c
c000b64f:	31 c0                	xor    eax,eax
c000b651:	5b                   	pop    ebx
c000b652:	5e                   	pop    esi
c000b653:	5f                   	pop    edi
c000b654:	5d                   	pop    ebp
c000b655:	c3                   	ret    

c000b656 <newTerminal(char*)>:
c000b656:	83 ec 28             	sub    esp,0x28
c000b659:	68 b4 01 00 00       	push   0x1b4
c000b65e:	e8 10 e7 ff ff       	call   c0009d73 <malloc>
c000b663:	5a                   	pop    edx
c000b664:	59                   	pop    ecx
c000b665:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b669:	50                   	push   eax
c000b66a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b66e:	e8 2d fd ff ff       	call   c000b3a0 <VgaText::VgaText(char const*)>
c000b673:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b677:	83 c4 2c             	add    esp,0x2c
c000b67a:	c3                   	ret    
c000b67b:	90                   	nop

c000b67c <TSS::TSS()>:
c000b67c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b680:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b687:	90                   	nop
c000b688:	c3                   	ret    
c000b689:	90                   	nop
c000b68a:	66 90                	xchg   ax,ax

c000b68c <TSS::setESP(unsigned long)>:
c000b68c:	55                   	push   ebp
c000b68d:	89 e5                	mov    ebp,esp
c000b68f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b692:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b695:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b698:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b69b:	90                   	nop
c000b69c:	5d                   	pop    ebp
c000b69d:	c3                   	ret    
c000b69e:	66 90                	xchg   ax,ax

c000b6a0 <TSS::flush()>:
c000b6a0:	55                   	push   ebp
c000b6a1:	89 e5                	mov    ebp,esp
c000b6a3:	83 ec 10             	sub    esp,0x10
c000b6a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000b6ab:	83 c8 03             	or     eax,0x3
c000b6ae:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b6b2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b6b6:	66 89 d0             	mov    ax,dx
c000b6b9:	0f 00 d8             	ltr    ax
c000b6bc:	90                   	nop
c000b6bd:	c9                   	leave  
c000b6be:	c3                   	ret    
c000b6bf:	90                   	nop

c000b6c0 <TSS::setup(unsigned long, unsigned long)>:
c000b6c0:	55                   	push   ebp
c000b6c1:	89 e5                	mov    ebp,esp
c000b6c3:	83 ec 18             	sub    esp,0x18
c000b6c6:	83 ec 0c             	sub    esp,0xc
c000b6c9:	6a 68                	push   0x68
c000b6cb:	e8 a3 e6 ff ff       	call   c0009d73 <malloc>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 c2                	mov    edx,eax
c000b6d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6d8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b6db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6e1:	83 ec 04             	sub    esp,0x4
c000b6e4:	6a 68                	push   0x68
c000b6e6:	6a 00                	push   0x0
c000b6e8:	50                   	push   eax
c000b6e9:	e8 a6 4f ff ff       	call   c0000694 <memset>
c000b6ee:	83 c4 10             	add    esp,0x10
c000b6f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6f7:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b6fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b700:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b703:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b70c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b70f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b712:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b718:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b71b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b724:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b727:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b72d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b730:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b733:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b739:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b73c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b73f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b748:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b74b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b754:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b757:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b75d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b760:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b763:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b766:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b76c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b76f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b772:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b778:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b77b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b782:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b785:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b788:	0f 20 da             	mov    edx,cr3
c000b78b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b78e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b791:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b797:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b79a:	83 ec 08             	sub    esp,0x8
c000b79d:	50                   	push   eax
c000b79e:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b7a1:	50                   	push   eax
c000b7a2:	e8 27 de ff ff       	call   c00095ce <GDTEntry::setBase(unsigned int)>
c000b7a7:	83 c4 10             	add    esp,0x10
c000b7aa:	83 ec 08             	sub    esp,0x8
c000b7ad:	6a 68                	push   0x68
c000b7af:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b7b2:	50                   	push   eax
c000b7b3:	e8 32 de ff ff       	call   c00095ea <GDTEntry::setLimit(unsigned int)>
c000b7b8:	83 c4 10             	add    esp,0x10
c000b7bb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b7bf:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b7c2:	83 e0 0f             	and    eax,0xf
c000b7c5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b7c8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b7cb:	83 c8 40             	or     eax,0x40
c000b7ce:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b7d1:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000b7d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b7dc:	05 78 01 00 00       	add    eax,0x178
c000b7e1:	83 ec 04             	sub    esp,0x4
c000b7e4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b7e7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b7ea:	50                   	push   eax
c000b7eb:	e8 2e de ff ff       	call   c000961e <GDT::addEntry(GDTEntry)>
c000b7f0:	83 c4 10             	add    esp,0x10
c000b7f3:	89 c2                	mov    edx,eax
c000b7f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b7f8:	89 10                	mov    DWORD PTR [eax],edx
c000b7fa:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000b7ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b805:	05 78 01 00 00       	add    eax,0x178
c000b80a:	83 ec 0c             	sub    esp,0xc
c000b80d:	50                   	push   eax
c000b80e:	e8 35 de ff ff       	call   c0009648 <GDT::flush()>
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b819:	8b 00                	mov    eax,DWORD PTR [eax]
c000b81b:	c9                   	leave  
c000b81c:	c3                   	ret    
c000b81d:	90                   	nop

c000b81e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b81e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b822:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b826:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b829:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b82e:	75 08                	jne    c000b838 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b830:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b836:	eb 38                	jmp    c000b870 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b838:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b83d:	75 17                	jne    c000b856 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b83f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b844:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b847:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b84d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b84f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b853:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b856:	89 c1                	mov    ecx,eax
c000b858:	83 e1 fd             	and    ecx,0xfffffffd
c000b85b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b861:	74 cd                	je     c000b830 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b863:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b868:	83 e0 ef             	and    eax,0xffffffef
c000b86b:	83 f8 08             	cmp    eax,0x8
c000b86e:	76 c0                	jbe    c000b830 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b870:	31 c0                	xor    eax,eax
c000b872:	c3                   	ret    
c000b873:	90                   	nop

c000b874 <ReservedFilename::isAtty()>:
c000b874:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b878:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b87b:	31 c0                	xor    eax,eax
c000b87d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b883:	74 09                	je     c000b88e <ReservedFilename::isAtty()+0x1a>
c000b885:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b88b:	0f 94 c0             	sete   al
c000b88e:	c3                   	ret    
c000b88f:	90                   	nop

c000b890 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b894:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b898:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b89b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b89f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b8a4:	75 08                	jne    c000b8ae <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b8a6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b8ac:	eb 3d                	jmp    c000b8eb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b8ae:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b8b3:	75 17                	jne    c000b8cc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b8b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b8ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b8bd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b8c3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b8c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b8c9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b8cc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b8d1:	75 04                	jne    c000b8d7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b8d3:	89 0a                	mov    DWORD PTR [edx],ecx
c000b8d5:	eb 14                	jmp    c000b8eb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b8d7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b8dc:	74 c8                	je     c000b8a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b8de:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b8e3:	83 e0 ef             	and    eax,0xffffffef
c000b8e6:	83 f8 08             	cmp    eax,0x8
c000b8e9:	76 bb                	jbe    c000b8a6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b8eb:	31 c0                	xor    eax,eax
c000b8ed:	c3                   	ret    

c000b8ee <UnixFile::getFileDescriptor()>:
c000b8ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b8f5:	c3                   	ret    

c000b8f6 <UnixFile::UnixFile(int)>:
c000b8f6:	53                   	push   ebx
c000b8f7:	83 ec 28             	sub    esp,0x28
c000b8fa:	ba c4 4e 02 c0       	mov    edx,0xc0024ec4
c000b8ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b903:	89 10                	mov    DWORD PTR [eax],edx
c000b905:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b90d:	0f 8f 8c 01 00 00    	jg     c000ba9f <UnixFile::UnixFile(int)+0x1a9>
c000b913:	a1 c0 80 02 c0       	mov    eax,ds:0xc00280c0
c000b918:	8d 50 01             	lea    edx,[eax+0x1]
c000b91b:	89 15 c0 80 02 c0    	mov    DWORD PTR ds:0xc00280c0,edx
c000b921:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b925:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b928:	83 ec 08             	sub    esp,0x8
c000b92b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b92f:	68 98 8d 02 c0       	push   0xc0028d98
c000b934:	e8 3f 7a 01 00       	call   c0023378 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b939:	83 c4 10             	add    esp,0x10
c000b93c:	a0 94 8d 02 c0       	mov    al,ds:0xc0028d94
c000b941:	83 f0 01             	xor    eax,0x1
c000b944:	84 c0                	test   al,al
c000b946:	0f 84 54 01 00 00    	je     c000baa0 <UnixFile::UnixFile(int)+0x1aa>
c000b94c:	c6 05 94 8d 02 c0 01 	mov    BYTE PTR ds:0xc0028d94,0x1
c000b953:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b95b:	83 ec 0c             	sub    esp,0xc
c000b95e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b962:	e8 0c e4 ff ff       	call   c0009d73 <malloc>
c000b967:	83 c4 10             	add    esp,0x10
c000b96a:	89 c3                	mov    ebx,eax
c000b96c:	83 ec 08             	sub    esp,0x8
c000b96f:	68 03 ff ff 0f       	push   0xfffff03
c000b974:	53                   	push   ebx
c000b975:	e8 2c 01 00 00       	call   c000baa6 <ReservedFilename::ReservedFilename(int)>
c000b97a:	83 c4 10             	add    esp,0x10
c000b97d:	89 1d 8c 8d 02 c0    	mov    DWORD PTR ds:0xc0028d8c,ebx
c000b983:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b98b:	83 ec 0c             	sub    esp,0xc
c000b98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b992:	e8 dc e3 ff ff       	call   c0009d73 <malloc>
c000b997:	83 c4 10             	add    esp,0x10
c000b99a:	89 c3                	mov    ebx,eax
c000b99c:	83 ec 08             	sub    esp,0x8
c000b99f:	68 01 ff ff 0f       	push   0xfffff01
c000b9a4:	53                   	push   ebx
c000b9a5:	e8 fc 00 00 00       	call   c000baa6 <ReservedFilename::ReservedFilename(int)>
c000b9aa:	83 c4 10             	add    esp,0x10
c000b9ad:	89 1d 90 8d 02 c0    	mov    DWORD PTR ds:0xc0028d90,ebx
c000b9b3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b9bb:	83 ec 0c             	sub    esp,0xc
c000b9be:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b9c2:	e8 ac e3 ff ff       	call   c0009d73 <malloc>
c000b9c7:	83 c4 10             	add    esp,0x10
c000b9ca:	89 c3                	mov    ebx,eax
c000b9cc:	83 ec 08             	sub    esp,0x8
c000b9cf:	68 00 ff ff 0f       	push   0xfffff00
c000b9d4:	53                   	push   ebx
c000b9d5:	e8 cc 00 00 00       	call   c000baa6 <ReservedFilename::ReservedFilename(int)>
c000b9da:	83 c4 10             	add    esp,0x10
c000b9dd:	89 1d 84 8d 02 c0    	mov    DWORD PTR ds:0xc0028d84,ebx
c000b9e3:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b9eb:	83 ec 0c             	sub    esp,0xc
c000b9ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9f2:	e8 7c e3 ff ff       	call   c0009d73 <malloc>
c000b9f7:	83 c4 10             	add    esp,0x10
c000b9fa:	89 c3                	mov    ebx,eax
c000b9fc:	83 ec 08             	sub    esp,0x8
c000b9ff:	68 02 ff ff 0f       	push   0xfffff02
c000ba04:	53                   	push   ebx
c000ba05:	e8 9c 00 00 00       	call   c000baa6 <ReservedFilename::ReservedFilename(int)>
c000ba0a:	83 c4 10             	add    esp,0x10
c000ba0d:	89 1d 88 8d 02 c0    	mov    DWORD PTR ds:0xc0028d88,ebx
c000ba13:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ba1b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000ba20:	7f 7e                	jg     c000baa0 <UnixFile::UnixFile(int)+0x1aa>
c000ba22:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000ba2a:	83 ec 0c             	sub    esp,0xc
c000ba2d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba31:	e8 3d e3 ff ff       	call   c0009d73 <malloc>
c000ba36:	83 c4 10             	add    esp,0x10
c000ba39:	89 c3                	mov    ebx,eax
c000ba3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba3f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000ba44:	83 ec 08             	sub    esp,0x8
c000ba47:	50                   	push   eax
c000ba48:	53                   	push   ebx
c000ba49:	e8 58 00 00 00       	call   c000baa6 <ReservedFilename::ReservedFilename(int)>
c000ba4e:	83 c4 10             	add    esp,0x10
c000ba51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba55:	89 1c 85 60 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd72a0],ebx
c000ba5c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000ba64:	83 ec 0c             	sub    esp,0xc
c000ba67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba6b:	e8 03 e3 ff ff       	call   c0009d73 <malloc>
c000ba70:	83 c4 10             	add    esp,0x10
c000ba73:	89 c3                	mov    ebx,eax
c000ba75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba79:	05 20 ff ff 0f       	add    eax,0xfffff20
c000ba7e:	83 ec 08             	sub    esp,0x8
c000ba81:	50                   	push   eax
c000ba82:	53                   	push   ebx
c000ba83:	e8 1e 00 00 00       	call   c000baa6 <ReservedFilename::ReservedFilename(int)>
c000ba88:	83 c4 10             	add    esp,0x10
c000ba8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ba8f:	89 1c 85 20 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd72e0],ebx
c000ba96:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ba9a:	e9 7c ff ff ff       	jmp    c000ba1b <UnixFile::UnixFile(int)+0x125>
c000ba9f:	90                   	nop
c000baa0:	83 c4 28             	add    esp,0x28
c000baa3:	5b                   	pop    ebx
c000baa4:	c3                   	ret    
c000baa5:	90                   	nop

c000baa6 <ReservedFilename::ReservedFilename(int)>:
c000baa6:	83 ec 0c             	sub    esp,0xc
c000baa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000baad:	83 ec 08             	sub    esp,0x8
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	50                   	push   eax
c000bab5:	e8 3c fe ff ff       	call   c000b8f6 <UnixFile::UnixFile(int)>
c000baba:	83 c4 10             	add    esp,0x10
c000babd:	ba e0 4e 02 c0       	mov    edx,0xc0024ee0
c000bac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bac6:	89 10                	mov    DWORD PTR [eax],edx
c000bac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bacc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bad0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000bad3:	90                   	nop
c000bad4:	83 c4 0c             	add    esp,0xc
c000bad7:	c3                   	ret    

c000bad8 <UnixFile::~UnixFile()>:
c000bad8:	83 ec 1c             	sub    esp,0x1c
c000badb:	ba c4 4e 02 c0       	mov    edx,0xc0024ec4
c000bae0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae4:	89 10                	mov    DWORD PTR [eax],edx
c000bae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000baed:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000baf2:	7f 73                	jg     c000bb67 <UnixFile::~UnixFile()+0x8f>
c000baf4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bafc:	83 ec 0c             	sub    esp,0xc
c000baff:	68 98 8d 02 c0       	push   0xc0028d98
c000bb04:	e8 43 79 01 00       	call   c002344c <LinkedList<UnixFile>::getFirstElement()>
c000bb09:	83 c4 10             	add    esp,0x10
c000bb0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb10:	83 ec 0c             	sub    esp,0xc
c000bb13:	68 98 8d 02 c0       	push   0xc0028d98
c000bb18:	e8 37 79 01 00       	call   c0023454 <LinkedList<UnixFile>::removeFirst()>
c000bb1d:	83 c4 10             	add    esp,0x10
c000bb20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb24:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000bb28:	74 40                	je     c000bb6a <UnixFile::~UnixFile()+0x92>
c000bb2a:	83 ec 08             	sub    esp,0x8
c000bb2d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bb31:	68 98 8d 02 c0       	push   0xc0028d98
c000bb36:	e8 3d 78 01 00       	call   c0023378 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000bb3b:	83 c4 10             	add    esp,0x10
c000bb3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bb42:	8d 50 01             	lea    edx,[eax+0x1]
c000bb45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb49:	3d 88 13 00 00       	cmp    eax,0x1388
c000bb4e:	0f 94 c0             	sete   al
c000bb51:	84 c0                	test   al,al
c000bb53:	74 a7                	je     c000bafc <UnixFile::~UnixFile()+0x24>
c000bb55:	83 ec 0c             	sub    esp,0xc
c000bb58:	68 9c 4e 02 c0       	push   0xc0024e9c
c000bb5d:	e8 cf 95 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000bb62:	83 c4 10             	add    esp,0x10
c000bb65:	eb 95                	jmp    c000bafc <UnixFile::~UnixFile()+0x24>
c000bb67:	90                   	nop
c000bb68:	eb 01                	jmp    c000bb6b <UnixFile::~UnixFile()+0x93>
c000bb6a:	90                   	nop
c000bb6b:	90                   	nop
c000bb6c:	83 c4 1c             	add    esp,0x1c
c000bb6f:	c3                   	ret    

c000bb70 <UnixFile::~UnixFile()>:
c000bb70:	83 ec 0c             	sub    esp,0xc
c000bb73:	83 ec 0c             	sub    esp,0xc
c000bb76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb7a:	e8 59 ff ff ff       	call   c000bad8 <UnixFile::~UnixFile()>
c000bb7f:	83 c4 10             	add    esp,0x10
c000bb82:	83 ec 08             	sub    esp,0x8
c000bb85:	6a 0c                	push   0xc
c000bb87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb8b:	e8 ee 13 00 00       	call   c000cf7e <operator delete(void*, unsigned long)>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	83 c4 0c             	add    esp,0xc
c000bb96:	c3                   	ret    
c000bb97:	90                   	nop

c000bb98 <ReservedFilename::~ReservedFilename()>:
c000bb98:	83 ec 0c             	sub    esp,0xc
c000bb9b:	ba e0 4e 02 c0       	mov    edx,0xc0024ee0
c000bba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bba4:	89 10                	mov    DWORD PTR [eax],edx
c000bba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbaa:	83 ec 0c             	sub    esp,0xc
c000bbad:	50                   	push   eax
c000bbae:	e8 25 ff ff ff       	call   c000bad8 <UnixFile::~UnixFile()>
c000bbb3:	83 c4 10             	add    esp,0x10
c000bbb6:	90                   	nop
c000bbb7:	83 c4 0c             	add    esp,0xc
c000bbba:	c3                   	ret    
c000bbbb:	90                   	nop

c000bbbc <ReservedFilename::~ReservedFilename()>:
c000bbbc:	83 ec 0c             	sub    esp,0xc
c000bbbf:	83 ec 0c             	sub    esp,0xc
c000bbc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbc6:	e8 cd ff ff ff       	call   c000bb98 <ReservedFilename::~ReservedFilename()>
c000bbcb:	83 c4 10             	add    esp,0x10
c000bbce:	83 ec 08             	sub    esp,0x8
c000bbd1:	6a 0c                	push   0xc
c000bbd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbd7:	e8 a2 13 00 00       	call   c000cf7e <operator delete(void*, unsigned long)>
c000bbdc:	83 c4 10             	add    esp,0x10
c000bbdf:	83 c4 0c             	add    esp,0xc
c000bbe2:	c3                   	ret    

c000bbe3 <getFromFileDescriptor(int)>:
c000bbe3:	53                   	push   ebx
c000bbe4:	83 ec 08             	sub    esp,0x8
c000bbe7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbeb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bbf1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bbf7:	7f 2c                	jg     c000bc25 <getFromFileDescriptor(int)+0x42>
c000bbf9:	83 ec 0c             	sub    esp,0xc
c000bbfc:	68 98 8d 02 c0       	push   0xc0028d98
c000bc01:	e8 46 78 01 00       	call   c002344c <LinkedList<UnixFile>::getFirstElement()>
c000bc06:	83 c4 10             	add    esp,0x10
c000bc09:	85 c0                	test   eax,eax
c000bc0b:	75 04                	jne    c000bc11 <getFromFileDescriptor(int)+0x2e>
c000bc0d:	31 c0                	xor    eax,eax
c000bc0f:	eb 6e                	jmp    c000bc7f <getFromFileDescriptor(int)+0x9c>
c000bc11:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bc14:	74 69                	je     c000bc7f <getFromFileDescriptor(int)+0x9c>
c000bc16:	52                   	push   edx
c000bc17:	52                   	push   edx
c000bc18:	50                   	push   eax
c000bc19:	68 98 8d 02 c0       	push   0xc0028d98
c000bc1e:	e8 d3 78 01 00       	call   c00234f6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bc23:	eb e1                	jmp    c000bc06 <getFromFileDescriptor(int)+0x23>
c000bc25:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000bc2a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bc30:	74 4d                	je     c000bc7f <getFromFileDescriptor(int)+0x9c>
c000bc32:	a1 90 8d 02 c0       	mov    eax,ds:0xc0028d90
c000bc37:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bc3d:	74 40                	je     c000bc7f <getFromFileDescriptor(int)+0x9c>
c000bc3f:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c000bc44:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bc4a:	74 33                	je     c000bc7f <getFromFileDescriptor(int)+0x9c>
c000bc4c:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c000bc51:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bc57:	74 26                	je     c000bc7f <getFromFileDescriptor(int)+0x9c>
c000bc59:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bc5f:	83 f8 08             	cmp    eax,0x8
c000bc62:	77 09                	ja     c000bc6d <getFromFileDescriptor(int)+0x8a>
c000bc64:	8b 04 85 60 8d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd72a0]
c000bc6b:	eb 12                	jmp    c000bc7f <getFromFileDescriptor(int)+0x9c>
c000bc6d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bc73:	83 fb 08             	cmp    ebx,0x8
c000bc76:	77 95                	ja     c000bc0d <getFromFileDescriptor(int)+0x2a>
c000bc78:	8b 04 9d 20 8d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd72e0]
c000bc7f:	83 c4 08             	add    esp,0x8
c000bc82:	5b                   	pop    ebx
c000bc83:	c3                   	ret    

c000bc84 <__static_initialization_and_destruction_0(int, int)>:
c000bc84:	83 ec 0c             	sub    esp,0xc
c000bc87:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bc8c:	75 34                	jne    c000bcc2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bc8e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bc96:	75 2a                	jne    c000bcc2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bc98:	83 ec 0c             	sub    esp,0xc
c000bc9b:	68 98 8d 02 c0       	push   0xc0028d98
c000bca0:	e8 91 76 01 00       	call   c0023336 <LinkedList<UnixFile>::LinkedList()>
c000bca5:	83 c4 10             	add    esp,0x10
c000bca8:	83 ec 04             	sub    esp,0x4
c000bcab:	68 f8 7e 02 c0       	push   0xc0027ef8
c000bcb0:	68 98 8d 02 c0       	push   0xc0028d98
c000bcb5:	68 34 33 02 c0       	push   0xc0023334
c000bcba:	e8 39 12 00 00       	call   c000cef8 <__cxa_atexit>
c000bcbf:	83 c4 10             	add    esp,0x10
c000bcc2:	90                   	nop
c000bcc3:	83 c4 0c             	add    esp,0xc
c000bcc6:	c3                   	ret    

c000bcc7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bcc7:	83 ec 0c             	sub    esp,0xc
c000bcca:	83 ec 08             	sub    esp,0x8
c000bccd:	68 ff ff 00 00       	push   0xffff
c000bcd2:	6a 01                	push   0x1
c000bcd4:	e8 ab ff ff ff       	call   c000bc84 <__static_initialization_and_destruction_0(int, int)>
c000bcd9:	83 c4 10             	add    esp,0x10
c000bcdc:	83 c4 0c             	add    esp,0xc
c000bcdf:	c3                   	ret    

c000bce0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bce0:	53                   	push   ebx
c000bce1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bce5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bce9:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bcef:	89 c8                	mov    eax,ecx
c000bcf1:	d1 e8                	shr    eax,1
c000bcf3:	03 05 c8 80 02 c0    	add    eax,DWORD PTR ds:0xc00280c8
c000bcf9:	83 e1 01             	and    ecx,0x1
c000bcfc:	8a 10                	mov    dl,BYTE PTR [eax]
c000bcfe:	75 09                	jne    c000bd09 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bd00:	83 e2 f0             	and    edx,0xfffffff0
c000bd03:	09 da                	or     edx,ebx
c000bd05:	88 10                	mov    BYTE PTR [eax],dl
c000bd07:	5b                   	pop    ebx
c000bd08:	c3                   	ret    
c000bd09:	c1 e3 04             	shl    ebx,0x4
c000bd0c:	83 e2 0f             	and    edx,0xf
c000bd0f:	09 da                	or     edx,ebx
c000bd11:	88 10                	mov    BYTE PTR [eax],dl
c000bd13:	5b                   	pop    ebx
c000bd14:	c3                   	ret    

c000bd15 <Virt::getPageState(unsigned long)>:
c000bd15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd19:	8b 0d c8 80 02 c0    	mov    ecx,DWORD PTR ds:0xc00280c8
c000bd1f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bd25:	89 d0                	mov    eax,edx
c000bd27:	d1 e8                	shr    eax,1
c000bd29:	83 e2 01             	and    edx,0x1
c000bd2c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bd2f:	75 04                	jne    c000bd35 <Virt::getPageState(unsigned long)+0x20>
c000bd31:	83 e0 0f             	and    eax,0xf
c000bd34:	c3                   	ret    
c000bd35:	c0 e8 04             	shr    al,0x4
c000bd38:	c3                   	ret    

c000bd39 <Virt::allocateKernelVirtualPages(int)>:
c000bd39:	55                   	push   ebp
c000bd3a:	31 ed                	xor    ebp,ebp
c000bd3c:	57                   	push   edi
c000bd3d:	56                   	push   esi
c000bd3e:	53                   	push   ebx
c000bd3f:	31 db                	xor    ebx,ebx
c000bd41:	83 ec 1c             	sub    esp,0x1c
c000bd44:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bd48:	8b 3d c4 80 02 c0    	mov    edi,DWORD PTR ds:0xc00280c4
c000bd4e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bd53:	57                   	push   edi
c000bd54:	e8 bc ff ff ff       	call   c000bd15 <Virt::getPageState(unsigned long)>
c000bd59:	5a                   	pop    edx
c000bd5a:	84 c0                	test   al,al
c000bd5c:	75 3a                	jne    c000bd98 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bd5e:	85 db                	test   ebx,ebx
c000bd60:	75 02                	jne    c000bd64 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bd62:	89 fd                	mov    ebp,edi
c000bd64:	43                   	inc    ebx
c000bd65:	39 f3                	cmp    ebx,esi
c000bd67:	74 5a                	je     c000bdc3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bd69:	47                   	inc    edi
c000bd6a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bd70:	76 31                	jbe    c000bda3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bd72:	c7 05 c4 80 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00280c4,0xc8000
c000bd7c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bd81:	75 28                	jne    c000bdab <Virt::allocateKernelVirtualPages(int)+0x72>
c000bd83:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bd88:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bd8d:	57                   	push   edi
c000bd8e:	e8 82 ff ff ff       	call   c000bd15 <Virt::getPageState(unsigned long)>
c000bd93:	5a                   	pop    edx
c000bd94:	84 c0                	test   al,al
c000bd96:	74 c6                	je     c000bd5e <Virt::allocateKernelVirtualPages(int)+0x25>
c000bd98:	31 db                	xor    ebx,ebx
c000bd9a:	47                   	inc    edi
c000bd9b:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bda1:	77 cf                	ja     c000bd72 <Virt::allocateKernelVirtualPages(int)+0x39>
c000bda3:	89 3d c4 80 02 c0    	mov    DWORD PTR ds:0xc00280c4,edi
c000bda9:	eb a8                	jmp    c000bd53 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bdab:	83 ec 0c             	sub    esp,0xc
c000bdae:	68 f4 4e 02 c0       	push   0xc0024ef4
c000bdb3:	e8 79 93 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000bdb8:	8b 3d c4 80 02 c0    	mov    edi,DWORD PTR ds:0xc00280c4
c000bdbe:	83 c4 10             	add    esp,0x10
c000bdc1:	eb 90                	jmp    c000bd53 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bdc3:	89 2d c4 80 02 c0    	mov    DWORD PTR ds:0xc00280c4,ebp
c000bdc9:	4b                   	dec    ebx
c000bdca:	74 5f                	je     c000be2b <Virt::allocateKernelVirtualPages(int)+0xf2>
c000bdcc:	85 f6                	test   esi,esi
c000bdce:	74 3d                	je     c000be0d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bdd0:	89 e8                	mov    eax,ebp
c000bdd2:	31 db                	xor    ebx,ebx
c000bdd4:	8d 7e ff             	lea    edi,[esi-0x1]
c000bdd7:	eb 14                	jmp    c000bded <Virt::allocateKernelVirtualPages(int)+0xb4>
c000bdd9:	6a 01                	push   0x1
c000bddb:	43                   	inc    ebx
c000bddc:	50                   	push   eax
c000bddd:	e8 fe fe ff ff       	call   c000bce0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bde2:	58                   	pop    eax
c000bde3:	39 f3                	cmp    ebx,esi
c000bde5:	5a                   	pop    edx
c000bde6:	74 25                	je     c000be0d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bde8:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c000bded:	8d 50 01             	lea    edx,[eax+0x1]
c000bdf0:	85 db                	test   ebx,ebx
c000bdf2:	89 15 c4 80 02 c0    	mov    DWORD PTR ds:0xc00280c4,edx
c000bdf8:	74 20                	je     c000be1a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000bdfa:	39 df                	cmp    edi,ebx
c000bdfc:	75 db                	jne    c000bdd9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000bdfe:	6a 03                	push   0x3
c000be00:	43                   	inc    ebx
c000be01:	50                   	push   eax
c000be02:	e8 d9 fe ff ff       	call   c000bce0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be07:	59                   	pop    ecx
c000be08:	39 f3                	cmp    ebx,esi
c000be0a:	58                   	pop    eax
c000be0b:	75 db                	jne    c000bde8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be0d:	83 c4 1c             	add    esp,0x1c
c000be10:	89 e8                	mov    eax,ebp
c000be12:	5b                   	pop    ebx
c000be13:	c1 e0 0c             	shl    eax,0xc
c000be16:	5e                   	pop    esi
c000be17:	5f                   	pop    edi
c000be18:	5d                   	pop    ebp
c000be19:	c3                   	ret    
c000be1a:	6a 02                	push   0x2
c000be1c:	bb 01 00 00 00       	mov    ebx,0x1
c000be21:	50                   	push   eax
c000be22:	e8 b9 fe ff ff       	call   c000bce0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be27:	58                   	pop    eax
c000be28:	5a                   	pop    edx
c000be29:	eb bd                	jmp    c000bde8 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000be2b:	6a 04                	push   0x4
c000be2d:	8d 45 01             	lea    eax,[ebp+0x1]
c000be30:	55                   	push   ebp
c000be31:	a3 c4 80 02 c0       	mov    ds:0xc00280c4,eax
c000be36:	e8 a5 fe ff ff       	call   c000bce0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be3b:	59                   	pop    ecx
c000be3c:	89 e8                	mov    eax,ebp
c000be3e:	5b                   	pop    ebx
c000be3f:	c1 e0 0c             	shl    eax,0xc
c000be42:	83 c4 1c             	add    esp,0x1c
c000be45:	5b                   	pop    ebx
c000be46:	5e                   	pop    esi
c000be47:	5f                   	pop    edi
c000be48:	5d                   	pop    ebp
c000be49:	c3                   	ret    

c000be4a <Virt::freeSwapfilePage(unsigned long)>:
c000be4a:	53                   	push   ebx
c000be4b:	8b 15 ac 8d 02 c0    	mov    edx,DWORD PTR ds:0xc0028dac
c000be51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000be55:	b8 01 00 00 00       	mov    eax,0x1
c000be5a:	89 cb                	mov    ebx,ecx
c000be5c:	d3 e0                	shl    eax,cl
c000be5e:	c1 eb 05             	shr    ebx,0x5
c000be61:	f7 d0                	not    eax
c000be63:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000be66:	5b                   	pop    ebx
c000be67:	c3                   	ret    

c000be68 <Virt::swapIDToSector(unsigned long)>:
c000be68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be6c:	0f af 05 cc 80 02 c0 	imul   eax,DWORD PTR ds:0xc00280cc
c000be73:	03 05 d4 80 02 c0    	add    eax,DWORD PTR ds:0xc00280d4
c000be79:	c3                   	ret    

c000be7a <Virt::allocateSwapfilePage()>:
c000be7a:	55                   	push   ebp
c000be7b:	31 d2                	xor    edx,edx
c000be7d:	57                   	push   edi
c000be7e:	56                   	push   esi
c000be7f:	53                   	push   ebx
c000be80:	83 ec 0c             	sub    esp,0xc
c000be83:	8b 0d cc 80 02 c0    	mov    ecx,DWORD PTR ds:0xc00280cc
c000be89:	a1 d0 80 02 c0       	mov    eax,ds:0xc00280d0
c000be8e:	f7 f1                	div    ecx
c000be90:	39 0d d0 80 02 c0    	cmp    DWORD PTR ds:0xc00280d0,ecx
c000be96:	72 2d                	jb     c000bec5 <Virt::allocateSwapfilePage()+0x4b>
c000be98:	8b 35 ac 8d 02 c0    	mov    esi,DWORD PTR ds:0xc0028dac
c000be9e:	8b 16                	mov    edx,DWORD PTR [esi]
c000bea0:	f6 c2 01             	test   dl,0x1
c000bea3:	74 3c                	je     c000bee1 <Virt::allocateSwapfilePage()+0x67>
c000bea5:	31 c9                	xor    ecx,ecx
c000bea7:	bf 01 00 00 00       	mov    edi,0x1
c000beac:	eb 12                	jmp    c000bec0 <Virt::allocateSwapfilePage()+0x46>
c000beae:	89 fd                	mov    ebp,edi
c000beb0:	89 ca                	mov    edx,ecx
c000beb2:	d3 e5                	shl    ebp,cl
c000beb4:	c1 ea 05             	shr    edx,0x5
c000beb7:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000beba:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bebc:	85 ea                	test   edx,ebp
c000bebe:	74 2a                	je     c000beea <Virt::allocateSwapfilePage()+0x70>
c000bec0:	41                   	inc    ecx
c000bec1:	39 c8                	cmp    eax,ecx
c000bec3:	77 e9                	ja     c000beae <Virt::allocateSwapfilePage()+0x34>
c000bec5:	83 ec 0c             	sub    esp,0xc
c000bec8:	68 ac 50 02 c0       	push   0xc00250ac
c000becd:	e8 5f 92 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000bed2:	83 c4 10             	add    esp,0x10
c000bed5:	31 c9                	xor    ecx,ecx
c000bed7:	83 c4 0c             	add    esp,0xc
c000beda:	89 c8                	mov    eax,ecx
c000bedc:	5b                   	pop    ebx
c000bedd:	5e                   	pop    esi
c000bede:	5f                   	pop    edi
c000bedf:	5d                   	pop    ebp
c000bee0:	c3                   	ret    
c000bee1:	89 f3                	mov    ebx,esi
c000bee3:	bd 01 00 00 00       	mov    ebp,0x1
c000bee8:	31 c9                	xor    ecx,ecx
c000beea:	09 ea                	or     edx,ebp
c000beec:	89 c8                	mov    eax,ecx
c000beee:	89 13                	mov    DWORD PTR [ebx],edx
c000bef0:	83 c4 0c             	add    esp,0xc
c000bef3:	5b                   	pop    ebx
c000bef4:	5e                   	pop    esi
c000bef5:	5f                   	pop    edi
c000bef6:	5d                   	pop    ebp
c000bef7:	c3                   	ret    

c000bef8 <Virt::virtualMemorySetup()>:
c000bef8:	53                   	push   ebx
c000bef9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000befe:	6a 0f                	push   0xf
c000bf00:	53                   	push   ebx
c000bf01:	43                   	inc    ebx
c000bf02:	e8 d9 fd ff ff       	call   c000bce0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf07:	58                   	pop    eax
c000bf08:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf0e:	5a                   	pop    edx
c000bf0f:	75 ed                	jne    c000befe <Virt::virtualMemorySetup()+0x6>
c000bf11:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bf16:	6a 00                	push   0x0
c000bf18:	53                   	push   ebx
c000bf19:	43                   	inc    ebx
c000bf1a:	e8 c1 fd ff ff       	call   c000bce0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf1f:	59                   	pop    ecx
c000bf20:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bf26:	58                   	pop    eax
c000bf27:	75 ed                	jne    c000bf16 <Virt::virtualMemorySetup()+0x1e>
c000bf29:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bf2e:	6a 0f                	push   0xf
c000bf30:	53                   	push   ebx
c000bf31:	43                   	inc    ebx
c000bf32:	e8 a9 fd ff ff       	call   c000bce0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bf37:	58                   	pop    eax
c000bf38:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bf3e:	5a                   	pop    edx
c000bf3f:	75 ed                	jne    c000bf2e <Virt::virtualMemorySetup()+0x36>
c000bf41:	5b                   	pop    ebx
c000bf42:	c3                   	ret    

c000bf43 <Virt::setupPageSwapping(int)>:
c000bf43:	53                   	push   ebx
c000bf44:	83 ec 0c             	sub    esp,0xc
c000bf47:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bf4b:	a1 48 92 02 c0       	mov    eax,ds:0xc0029248
c000bf50:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bf56:	8b 10                	mov    edx,DWORD PTR [eax]
c000bf58:	53                   	push   ebx
c000bf59:	c1 e3 0b             	shl    ebx,0xb
c000bf5c:	68 c3 50 02 c0       	push   0xc00250c3
c000bf61:	50                   	push   eax
c000bf62:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bf65:	89 1d d0 80 02 c0    	mov    DWORD PTR ds:0xc00280d0,ebx
c000bf6b:	c6 05 d8 80 02 c0 43 	mov    BYTE PTR ds:0xc00280d8,0x43
c000bf72:	c1 eb 08             	shr    ebx,0x8
c000bf75:	a3 d4 80 02 c0       	mov    ds:0xc00280d4,eax
c000bf7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bf7d:	c7 05 cc 80 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00280cc,0x8
c000bf87:	e8 e7 dd ff ff       	call   c0009d73 <malloc>
c000bf8c:	83 c4 0c             	add    esp,0xc
c000bf8f:	89 c1                	mov    ecx,eax
c000bf91:	a3 ac 8d 02 c0       	mov    ds:0xc0028dac,eax
c000bf96:	31 d2                	xor    edx,edx
c000bf98:	a1 d0 80 02 c0       	mov    eax,ds:0xc00280d0
c000bf9d:	f7 35 cc 80 02 c0    	div    DWORD PTR ds:0xc00280cc
c000bfa3:	c1 e8 05             	shr    eax,0x5
c000bfa6:	50                   	push   eax
c000bfa7:	6a 00                	push   0x0
c000bfa9:	51                   	push   ecx
c000bfaa:	e8 e5 46 ff ff       	call   c0000694 <memset>
c000bfaf:	83 c4 18             	add    esp,0x18
c000bfb2:	5b                   	pop    ebx
c000bfb3:	c3                   	ret    

c000bfb4 <VAS::VAS()>:
c000bfb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfb8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bfbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfc3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bfca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfce:	a3 b0 8d 02 c0       	mov    ds:0xc0028db0,eax
c000bfd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfd7:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bfdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfdf:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bfe2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfe6:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bfed:	90                   	nop
c000bfee:	c3                   	ret    
c000bfef:	90                   	nop

c000bff0 <VAS::VAS(VAS*)>:
c000bff0:	83 ec 0c             	sub    esp,0xc
c000bff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bff7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c002:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c009:	83 ec 0c             	sub    esp,0xc
c000c00c:	68 14 4f 02 c0       	push   0xc0024f14
c000c011:	e8 1b 91 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000c016:	83 c4 10             	add    esp,0x10
c000c019:	90                   	nop
c000c01a:	83 c4 0c             	add    esp,0xc
c000c01d:	c3                   	ret    

c000c01e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000c01e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c022:	89 c2                	mov    edx,eax
c000c024:	c1 e8 0a             	shr    eax,0xa
c000c027:	c1 ea 16             	shr    edx,0x16
c000c02a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c02f:	19 c9                	sbb    ecx,ecx
c000c031:	c1 e2 0c             	shl    edx,0xc
c000c034:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000c03a:	25 fc 0f 00 00       	and    eax,0xffc
c000c03f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000c046:	01 d0                	add    eax,edx
c000c048:	c3                   	ret    
c000c049:	90                   	nop

c000c04a <VAS::getPageTableEntry(unsigned long)>:
c000c04a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c04e:	89 ca                	mov    edx,ecx
c000c050:	c1 e9 0a             	shr    ecx,0xa
c000c053:	c1 ea 16             	shr    edx,0x16
c000c056:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000c05c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000c062:	c1 e0 0c             	shl    eax,0xc
c000c065:	8d 04 08             	lea    eax,[eax+ecx*1]
c000c068:	c3                   	ret    

c000c069 <Virt::freeKernelVirtualPages(unsigned long)>:
c000c069:	57                   	push   edi
c000c06a:	56                   	push   esi
c000c06b:	be 01 00 00 00       	mov    esi,0x1
c000c070:	53                   	push   ebx
c000c071:	83 ec 10             	sub    esp,0x10
c000c074:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c078:	c1 eb 0c             	shr    ebx,0xc
c000c07b:	eb 3f                	jmp    c000c0bc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000c07d:	83 ec 08             	sub    esp,0x8
c000c080:	57                   	push   edi
c000c081:	ff 35 b0 8d 02 c0    	push   DWORD PTR ds:0xc0028db0
c000c087:	e8 be ff ff ff       	call   c000c04a <VAS::getPageTableEntry(unsigned long)>
c000c08c:	83 c4 10             	add    esp,0x10
c000c08f:	8b 00                	mov    eax,DWORD PTR [eax]
c000c091:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c095:	f6 c4 04             	test   ah,0x4
c000c098:	75 5f                	jne    c000c0f9 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000c09a:	80 fa 04             	cmp    dl,0x4
c000c09d:	74 78                	je     c000c117 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000c09f:	80 fa 02             	cmp    dl,0x2
c000c0a2:	0f 84 88 00 00 00    	je     c000c130 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000c0a8:	80 fa 03             	cmp    dl,0x3
c000c0ab:	0f 84 ad 00 00 00    	je     c000c15e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000c0b1:	fe ca                	dec    dl
c000c0b3:	0f 84 92 00 00 00    	je     c000c14b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c0b9:	43                   	inc    ebx
c000c0ba:	31 f6                	xor    esi,esi
c000c0bc:	53                   	push   ebx
c000c0bd:	89 df                	mov    edi,ebx
c000c0bf:	e8 51 fc ff ff       	call   c000bd15 <Virt::getPageState(unsigned long)>
c000c0c4:	c1 e7 0c             	shl    edi,0xc
c000c0c7:	59                   	pop    ecx
c000c0c8:	84 c0                	test   al,al
c000c0ca:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000c0ce:	75 ad                	jne    c000c07d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000c0d0:	83 ec 0c             	sub    esp,0xc
c000c0d3:	68 da 50 02 c0       	push   0xc00250da
c000c0d8:	e8 54 90 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000c0dd:	58                   	pop    eax
c000c0de:	5a                   	pop    edx
c000c0df:	57                   	push   edi
c000c0e0:	ff 35 b0 8d 02 c0    	push   DWORD PTR ds:0xc0028db0
c000c0e6:	e8 5f ff ff ff       	call   c000c04a <VAS::getPageTableEntry(unsigned long)>
c000c0eb:	83 c4 10             	add    esp,0x10
c000c0ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0f0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c0f4:	f6 c4 04             	test   ah,0x4
c000c0f7:	74 c0                	je     c000c0b9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c0f9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000c0fd:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c102:	83 ec 0c             	sub    esp,0xc
c000c105:	50                   	push   eax
c000c106:	e8 9c e2 ff ff       	call   c000a3a7 <Phys::freePage(unsigned long)>
c000c10b:	83 c4 10             	add    esp,0x10
c000c10e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c112:	80 fa 04             	cmp    dl,0x4
c000c115:	75 88                	jne    c000c09f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c117:	89 f0                	mov    eax,esi
c000c119:	84 c0                	test   al,al
c000c11b:	75 47                	jne    c000c164 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c11d:	c7 44 24 20 38 4f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024f38
c000c125:	83 c4 10             	add    esp,0x10
c000c128:	5b                   	pop    ebx
c000c129:	5e                   	pop    esi
c000c12a:	5f                   	pop    edi
c000c12b:	e9 01 90 00 00       	jmp    c0015131 <Krnl::panic(char const*)>
c000c130:	89 f0                	mov    eax,esi
c000c132:	84 c0                	test   al,al
c000c134:	75 15                	jne    c000c14b <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c136:	83 ec 0c             	sub    esp,0xc
c000c139:	68 f6 50 02 c0       	push   0xc00250f6
c000c13e:	e8 ee 8f 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000c143:	83 c4 10             	add    esp,0x10
c000c146:	e9 6e ff ff ff       	jmp    c000c0b9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c14b:	83 ec 08             	sub    esp,0x8
c000c14e:	6a 00                	push   0x0
c000c150:	53                   	push   ebx
c000c151:	e8 8a fb ff ff       	call   c000bce0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c156:	83 c4 10             	add    esp,0x10
c000c159:	e9 5b ff ff ff       	jmp    c000c0b9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c15e:	89 f0                	mov    eax,esi
c000c160:	84 c0                	test   al,al
c000c162:	75 15                	jne    c000c179 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c164:	83 ec 08             	sub    esp,0x8
c000c167:	6a 00                	push   0x0
c000c169:	53                   	push   ebx
c000c16a:	e8 71 fb ff ff       	call   c000bce0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c16f:	83 c4 10             	add    esp,0x10
c000c172:	83 c4 10             	add    esp,0x10
c000c175:	5b                   	pop    ebx
c000c176:	5e                   	pop    esi
c000c177:	5f                   	pop    edi
c000c178:	c3                   	ret    
c000c179:	c7 44 24 20 12 51 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025112
c000c181:	83 c4 10             	add    esp,0x10
c000c184:	5b                   	pop    ebx
c000c185:	5e                   	pop    esi
c000c186:	5f                   	pop    edi
c000c187:	e9 a5 8f 00 00       	jmp    c0015131 <Krnl::panic(char const*)>

c000c18c <VAS::freeAllocatedPages(unsigned long)>:
c000c18c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c190:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c194:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c198:	74 09                	je     c000c1a3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c19a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c19e:	e9 c6 fe ff ff       	jmp    c000c069 <Virt::freeKernelVirtualPages(unsigned long)>
c000c1a3:	c7 44 24 04 5c 4f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024f5c
c000c1ab:	e9 af 0e 00 00       	jmp    c000d05f <Dbg::kprintf(char const*, ...)>

c000c1b0 <VAS::virtualToPhysical(unsigned long)>:
c000c1b0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c1b4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c1b8:	e8 8d fe ff ff       	call   c000c04a <VAS::getPageTableEntry(unsigned long)>
c000c1bd:	5a                   	pop    edx
c000c1be:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1c0:	59                   	pop    ecx
c000c1c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c1c6:	c3                   	ret    
c000c1c7:	90                   	nop

c000c1c8 <VAS::reflagRange(unsigned long, int, int, int)>:
c000c1c8:	55                   	push   ebp
c000c1c9:	57                   	push   edi
c000c1ca:	56                   	push   esi
c000c1cb:	53                   	push   ebx
c000c1cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c1d0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c1d4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c1d8:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c1dc:	85 db                	test   ebx,ebx
c000c1de:	7e 22                	jle    c000c202 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c1e0:	c1 e3 0c             	shl    ebx,0xc
c000c1e3:	01 f3                	add    ebx,esi
c000c1e5:	56                   	push   esi
c000c1e6:	81 c6 00 10 00 00    	add    esi,0x1000
c000c1ec:	55                   	push   ebp
c000c1ed:	e8 58 fe ff ff       	call   c000c04a <VAS::getPageTableEntry(unsigned long)>
c000c1f2:	5a                   	pop    edx
c000c1f3:	59                   	pop    ecx
c000c1f4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1f6:	21 f9                	and    ecx,edi
c000c1f8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c1fc:	39 f3                	cmp    ebx,esi
c000c1fe:	89 08                	mov    DWORD PTR [eax],ecx
c000c200:	75 e3                	jne    c000c1e5 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c202:	5b                   	pop    ebx
c000c203:	5e                   	pop    esi
c000c204:	5f                   	pop    edi
c000c205:	5d                   	pop    ebp
c000c206:	c3                   	ret    
c000c207:	90                   	nop

c000c208 <VAS::setToWriteCombining(unsigned long, int)>:
c000c208:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000c20d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c213:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000c21a:	75 01                	jne    c000c21d <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c21c:	c3                   	ret    
c000c21d:	68 80 00 00 00       	push   0x80
c000c222:	6a ff                	push   0xffffffff
c000c224:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c228:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c22c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c230:	e8 93 ff ff ff       	call   c000c1c8 <VAS::reflagRange(unsigned long, int, int, int)>
c000c235:	83 c4 14             	add    esp,0x14
c000c238:	c3                   	ret    
c000c239:	90                   	nop

c000c23a <VAS::mapOtherVASIn(bool, VAS*)>:
c000c23a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c23f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c243:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c246:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c24a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c24d:	19 c0                	sbb    eax,eax
c000c24f:	83 ca 03             	or     edx,0x3
c000c252:	83 e0 fc             	and    eax,0xfffffffc
c000c255:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c25c:	0f 20 d8             	mov    eax,cr3
c000c25f:	0f 22 d8             	mov    cr3,eax
c000c262:	c3                   	ret    
c000c263:	90                   	nop

c000c264 <VAS::~VAS()>:
c000c264:	83 ec 2c             	sub    esp,0x2c
c000c267:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c26f:	fa                   	cli    
c000c270:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000c275:	40                   	inc    eax
c000c276:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c000c27b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c280:	8b 00                	mov    eax,DWORD PTR [eax]
c000c282:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c285:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c28b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c28f:	6a 01                	push   0x1
c000c291:	50                   	push   eax
c000c292:	e8 a3 ff ff ff       	call   c000c23a <VAS::mapOtherVASIn(bool, VAS*)>
c000c297:	83 c4 0c             	add    esp,0xc
c000c29a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c2a2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c2aa:	0f 8f d4 00 00 00    	jg     c000c384 <VAS::~VAS()+0x120>
c000c2b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c2bb:	c1 e2 02             	shl    edx,0x2
c000c2be:	01 d0                	add    eax,edx
c000c2c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000c2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c2ca:	83 e0 01             	and    eax,0x1
c000c2cd:	0f 84 a8 00 00 00    	je     c000c37b <VAS::~VAS()+0x117>
c000c2d3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c2db:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c2e3:	7f 72                	jg     c000c357 <VAS::~VAS()+0xf3>
c000c2e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2e9:	c1 e0 0a             	shl    eax,0xa
c000c2ec:	89 c2                	mov    edx,eax
c000c2ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c2f2:	01 d0                	add    eax,edx
c000c2f4:	c1 e0 0c             	shl    eax,0xc
c000c2f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c2fb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c300:	8b 00                	mov    eax,DWORD PTR [eax]
c000c302:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c305:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c30b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c30f:	6a 01                	push   0x1
c000c311:	50                   	push   eax
c000c312:	e8 07 fd ff ff       	call   c000c01e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c317:	83 c4 0c             	add    esp,0xc
c000c31a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c31e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c322:	8b 00                	mov    eax,DWORD PTR [eax]
c000c324:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c32c:	25 01 04 00 00       	and    eax,0x401
c000c331:	3d 01 04 00 00       	cmp    eax,0x401
c000c336:	75 19                	jne    c000c351 <VAS::~VAS()+0xed>
c000c338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c33c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c341:	83 ec 0c             	sub    esp,0xc
c000c344:	50                   	push   eax
c000c345:	e8 5d e0 ff ff       	call   c000a3a7 <Phys::freePage(unsigned long)>
c000c34a:	83 c4 10             	add    esp,0x10
c000c34d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c351:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c355:	eb 84                	jmp    c000c2db <VAS::~VAS()+0x77>
c000c357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c35b:	25 00 04 00 00       	and    eax,0x400
c000c360:	74 19                	je     c000c37b <VAS::~VAS()+0x117>
c000c362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c366:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c36b:	83 ec 0c             	sub    esp,0xc
c000c36e:	50                   	push   eax
c000c36f:	e8 33 e0 ff ff       	call   c000a3a7 <Phys::freePage(unsigned long)>
c000c374:	83 c4 10             	add    esp,0x10
c000c377:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c37b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c37f:	e9 1e ff ff ff       	jmp    c000c2a2 <VAS::~VAS()+0x3e>
c000c384:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c388:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c38b:	83 ec 0c             	sub    esp,0xc
c000c38e:	50                   	push   eax
c000c38f:	e8 d5 fc ff ff       	call   c000c069 <Virt::freeKernelVirtualPages(unsigned long)>
c000c394:	83 c4 10             	add    esp,0x10
c000c397:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c39b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c39e:	83 ec 0c             	sub    esp,0xc
c000c3a1:	50                   	push   eax
c000c3a2:	e8 00 e0 ff ff       	call   c000a3a7 <Phys::freePage(unsigned long)>
c000c3a7:	83 c4 10             	add    esp,0x10
c000c3aa:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c3ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c3b2:	c1 e0 02             	shl    eax,0x2
c000c3b5:	83 ec 08             	sub    esp,0x8
c000c3b8:	50                   	push   eax
c000c3b9:	68 80 4f 02 c0       	push   0xc0024f80
c000c3be:	e8 9c 0c 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000c3c3:	83 c4 10             	add    esp,0x10
c000c3c6:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000c3cb:	48                   	dec    eax
c000c3cc:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c000c3d1:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000c3d6:	85 c0                	test   eax,eax
c000c3d8:	75 01                	jne    c000c3db <VAS::~VAS()+0x177>
c000c3da:	fb                   	sti    
c000c3db:	90                   	nop
c000c3dc:	83 c4 2c             	add    esp,0x2c
c000c3df:	c3                   	ret    

c000c3e0 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c3e0:	55                   	push   ebp
c000c3e1:	57                   	push   edi
c000c3e2:	56                   	push   esi
c000c3e3:	53                   	push   ebx
c000c3e4:	83 ec 1c             	sub    esp,0x1c
c000c3e7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c3eb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c3ef:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c3f5:	77 08                	ja     c000c3ff <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c3f7:	0f 20 d8             	mov    eax,cr3
c000c3fa:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c3fd:	75 47                	jne    c000c446 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c3ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c403:	09 d8                	or     eax,ebx
c000c405:	a9 ff 0f 00 00       	test   eax,0xfff
c000c40a:	75 57                	jne    c000c463 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c40c:	89 de                	mov    esi,ebx
c000c40e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c411:	c1 ee 16             	shr    esi,0x16
c000c414:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c41b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c41f:	74 54                	je     c000c475 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c421:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c425:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c42b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c42f:	c1 e6 0c             	shl    esi,0xc
c000c432:	c1 eb 0a             	shr    ebx,0xa
c000c435:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c43b:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c43e:	83 c4 1c             	add    esp,0x1c
c000c441:	5b                   	pop    ebx
c000c442:	5e                   	pop    esi
c000c443:	5f                   	pop    edi
c000c444:	5d                   	pop    ebp
c000c445:	c3                   	ret    
c000c446:	83 ec 0c             	sub    esp,0xc
c000c449:	68 a0 4f 02 c0       	push   0xc0024fa0
c000c44e:	e8 0c 0c 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000c453:	83 c4 10             	add    esp,0x10
c000c456:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c45a:	09 d8                	or     eax,ebx
c000c45c:	a9 ff 0f 00 00       	test   eax,0xfff
c000c461:	74 a9                	je     c000c40c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c463:	83 ec 0c             	sub    esp,0xc
c000c466:	68 08 50 02 c0       	push   0xc0025008
c000c46b:	e8 c1 8c 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000c470:	83 c4 10             	add    esp,0x10
c000c473:	eb 97                	jmp    c000c40c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c475:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c479:	e8 ac df ff ff       	call   c000a42a <Phys::allocatePage()>
c000c47e:	83 ec 0c             	sub    esp,0xc
c000c481:	89 c5                	mov    ebp,eax
c000c483:	8b 0d b0 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028db0
c000c489:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c48d:	6a 01                	push   0x1
c000c48f:	e8 a5 f8 ff ff       	call   c000bd39 <Virt::allocateKernelVirtualPages(int)>
c000c494:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c49b:	6a 01                	push   0x1
c000c49d:	50                   	push   eax
c000c49e:	55                   	push   ebp
c000c49f:	81 cd 07 04 00 00    	or     ebp,0x407
c000c4a5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c4a9:	51                   	push   ecx
c000c4aa:	e8 27 02 00 00       	call   c000c6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4af:	83 c4 1c             	add    esp,0x1c
c000c4b2:	68 00 10 00 00       	push   0x1000
c000c4b7:	6a 00                	push   0x0
c000c4b9:	50                   	push   eax
c000c4ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4be:	e8 d1 41 ff ff       	call   c0000694 <memset>
c000c4c3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c4c7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c4ca:	e8 9a fb ff ff       	call   c000c069 <Virt::freeKernelVirtualPages(unsigned long)>
c000c4cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c4d3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c4dc:	e9 40 ff ff ff       	jmp    c000c421 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c4e1:	90                   	nop

c000c4e2 <VAS::allocatePages(int, int)>:
c000c4e2:	55                   	push   ebp
c000c4e3:	57                   	push   edi
c000c4e4:	56                   	push   esi
c000c4e5:	53                   	push   ebx
c000c4e6:	83 ec 1c             	sub    esp,0x1c
c000c4e9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c4ed:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000c4f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c4f8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c4fe:	83 e0 01             	and    eax,0x1
c000c501:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c505:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c509:	0f 85 cc 00 00 00    	jne    c000c5db <VAS::allocatePages(int, int)+0xf9>
c000c50f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c512:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 84 a1 00 00 00    	je     c000c5bf <VAS::allocatePages(int, int)+0xdd>
c000c51e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c522:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c526:	c1 e6 0c             	shl    esi,0xc
c000c529:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c52d:	85 c0                	test   eax,eax
c000c52f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c532:	7e 33                	jle    c000c567 <VAS::allocatePages(int, int)+0x85>
c000c534:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c538:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c53c:	81 cd 00 04 00 00    	or     ebp,0x400
c000c542:	e8 e3 de ff ff       	call   c000a42a <Phys::allocatePage()>
c000c547:	55                   	push   ebp
c000c548:	53                   	push   ebx
c000c549:	50                   	push   eax
c000c54a:	57                   	push   edi
c000c54b:	e8 90 fe ff ff       	call   c000c3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c550:	83 c4 10             	add    esp,0x10
c000c553:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c558:	74 03                	je     c000c55d <VAS::allocatePages(int, int)+0x7b>
c000c55a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c55d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c563:	39 de                	cmp    esi,ebx
c000c565:	75 db                	jne    c000c542 <VAS::allocatePages(int, int)+0x60>
c000c567:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c56c:	75 12                	jne    c000c580 <VAS::allocatePages(int, int)+0x9e>
c000c56e:	0f 20 d8             	mov    eax,cr3
c000c571:	0f 22 d8             	mov    cr3,eax
c000c574:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c578:	83 c4 1c             	add    esp,0x1c
c000c57b:	5b                   	pop    ebx
c000c57c:	5e                   	pop    esi
c000c57d:	5f                   	pop    edi
c000c57e:	5d                   	pop    ebp
c000c57f:	c3                   	ret    
c000c580:	c1 ee 0a             	shr    esi,0xa
c000c583:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c587:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c58d:	c1 eb 0a             	shr    ebx,0xa
c000c590:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c596:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c59c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c5a2:	39 c3                	cmp    ebx,eax
c000c5a4:	77 ce                	ja     c000c574 <VAS::allocatePages(int, int)+0x92>
c000c5a6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c5a9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c5af:	39 d8                	cmp    eax,ebx
c000c5b1:	73 f3                	jae    c000c5a6 <VAS::allocatePages(int, int)+0xc4>
c000c5b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5b7:	83 c4 1c             	add    esp,0x1c
c000c5ba:	5b                   	pop    ebx
c000c5bb:	5e                   	pop    esi
c000c5bc:	5f                   	pop    edi
c000c5bd:	5d                   	pop    ebp
c000c5be:	c3                   	ret    
c000c5bf:	83 ec 0c             	sub    esp,0xc
c000c5c2:	68 2c 50 02 c0       	push   0xc002502c
c000c5c7:	e8 65 8b 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000c5cc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c5cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5d3:	83 c4 10             	add    esp,0x10
c000c5d6:	e9 43 ff ff ff       	jmp    c000c51e <VAS::allocatePages(int, int)+0x3c>
c000c5db:	83 ec 0c             	sub    esp,0xc
c000c5de:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c5e2:	e8 52 f7 ff ff       	call   c000bd39 <Virt::allocateKernelVirtualPages(int)>
c000c5e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c5eb:	83 c4 10             	add    esp,0x10
c000c5ee:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c5f3:	0f 87 9b 00 00 00    	ja     c000c694 <VAS::allocatePages(int, int)+0x1b2>
c000c5f9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c5fd:	85 d2                	test   edx,edx
c000c5ff:	7e 3c                	jle    c000c63d <VAS::allocatePages(int, int)+0x15b>
c000c601:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c605:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c609:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c60d:	c1 e5 0c             	shl    ebp,0xc
c000c610:	81 ce 00 04 00 00    	or     esi,0x400
c000c616:	01 dd                	add    ebp,ebx
c000c618:	e8 0d de ff ff       	call   c000a42a <Phys::allocatePage()>
c000c61d:	56                   	push   esi
c000c61e:	53                   	push   ebx
c000c61f:	50                   	push   eax
c000c620:	57                   	push   edi
c000c621:	e8 ba fd ff ff       	call   c000c3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c626:	83 c4 10             	add    esp,0x10
c000c629:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c62e:	74 03                	je     c000c633 <VAS::allocatePages(int, int)+0x151>
c000c630:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c633:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c639:	39 dd                	cmp    ebp,ebx
c000c63b:	75 db                	jne    c000c618 <VAS::allocatePages(int, int)+0x136>
c000c63d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c642:	0f 84 26 ff ff ff    	je     c000c56e <VAS::allocatePages(int, int)+0x8c>
c000c648:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c64c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c650:	89 d3                	mov    ebx,edx
c000c652:	c1 e0 0c             	shl    eax,0xc
c000c655:	c1 eb 0a             	shr    ebx,0xa
c000c658:	01 d0                	add    eax,edx
c000c65a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c660:	c1 e8 0a             	shr    eax,0xa
c000c663:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c669:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c66e:	2d 00 00 40 00       	sub    eax,0x400000
c000c673:	39 c3                	cmp    ebx,eax
c000c675:	0f 87 f9 fe ff ff    	ja     c000c574 <VAS::allocatePages(int, int)+0x92>
c000c67b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c67e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c684:	39 d8                	cmp    eax,ebx
c000c686:	73 f3                	jae    c000c67b <VAS::allocatePages(int, int)+0x199>
c000c688:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c68c:	83 c4 1c             	add    esp,0x1c
c000c68f:	5b                   	pop    ebx
c000c690:	5e                   	pop    esi
c000c691:	5f                   	pop    edi
c000c692:	5d                   	pop    ebp
c000c693:	c3                   	ret    
c000c694:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000c699:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c69f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c6a6:	0f 84 4d ff ff ff    	je     c000c5f9 <VAS::allocatePages(int, int)+0x117>
c000c6ac:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c6b4:	e9 40 ff ff ff       	jmp    c000c5f9 <VAS::allocatePages(int, int)+0x117>
c000c6b9:	90                   	nop

c000c6ba <VAS::setCPUSpecific(unsigned long)>:
c000c6ba:	83 ec 0c             	sub    esp,0xc
c000c6bd:	6a 05                	push   0x5
c000c6bf:	68 00 00 40 c2       	push   0xc2400000
c000c6c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6cc:	e8 0f fd ff ff       	call   c000c3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c6d1:	83 c4 1c             	add    esp,0x1c
c000c6d4:	c3                   	ret    
c000c6d5:	90                   	nop

c000c6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c6d6:	55                   	push   ebp
c000c6d7:	57                   	push   edi
c000c6d8:	56                   	push   esi
c000c6d9:	53                   	push   ebx
c000c6da:	83 ec 1c             	sub    esp,0x1c
c000c6dd:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000c6e2:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c6e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6ec:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c6f0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c6f6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c6fa:	83 e0 01             	and    eax,0x1
c000c6fd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c701:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c705:	85 c0                	test   eax,eax
c000c707:	7e 39                	jle    c000c742 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c709:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c70d:	89 f3                	mov    ebx,esi
c000c70f:	c1 e0 0c             	shl    eax,0xc
c000c712:	01 f0                	add    eax,esi
c000c714:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c718:	55                   	push   ebp
c000c719:	53                   	push   ebx
c000c71a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c71e:	29 f0                	sub    eax,esi
c000c720:	01 d8                	add    eax,ebx
c000c722:	50                   	push   eax
c000c723:	57                   	push   edi
c000c724:	e8 b7 fc ff ff       	call   c000c3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c729:	83 c4 10             	add    esp,0x10
c000c72c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c731:	74 03                	je     c000c736 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c733:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c736:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c73c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c740:	75 d6                	jne    c000c718 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c742:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c747:	75 10                	jne    c000c759 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c749:	0f 20 d8             	mov    eax,cr3
c000c74c:	0f 22 d8             	mov    cr3,eax
c000c74f:	83 c4 1c             	add    esp,0x1c
c000c752:	89 f0                	mov    eax,esi
c000c754:	5b                   	pop    ebx
c000c755:	5e                   	pop    esi
c000c756:	5f                   	pop    edi
c000c757:	5d                   	pop    ebp
c000c758:	c3                   	ret    
c000c759:	89 f3                	mov    ebx,esi
c000c75b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c75f:	c1 eb 0a             	shr    ebx,0xa
c000c762:	c1 e0 0c             	shl    eax,0xc
c000c765:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c76b:	01 f0                	add    eax,esi
c000c76d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c773:	c1 e8 0a             	shr    eax,0xa
c000c776:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c77b:	2d 00 00 40 00       	sub    eax,0x400000
c000c780:	39 c3                	cmp    ebx,eax
c000c782:	77 cb                	ja     c000c74f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c784:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c787:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c78d:	39 d8                	cmp    eax,ebx
c000c78f:	73 f3                	jae    c000c784 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c791:	83 c4 1c             	add    esp,0x1c
c000c794:	89 f0                	mov    eax,esi
c000c796:	5b                   	pop    ebx
c000c797:	5e                   	pop    esi
c000c798:	5f                   	pop    edi
c000c799:	5d                   	pop    ebp
c000c79a:	c3                   	ret    
c000c79b:	90                   	nop

c000c79c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c79c:	55                   	push   ebp
c000c79d:	57                   	push   edi
c000c79e:	56                   	push   esi
c000c79f:	53                   	push   ebx
c000c7a0:	83 ec 1c             	sub    esp,0x1c
c000c7a3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7a7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c7ab:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c7af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c7b3:	a9 ff 0f 00 00       	test   eax,0xfff
c000c7b8:	75 4a                	jne    c000c804 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c7ba:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c7be:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c7c1:	c1 eb 16             	shr    ebx,0x16
c000c7c4:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c7cb:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c7cf:	74 4d                	je     c000c81e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c7d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c7d5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c7d9:	c1 e8 0a             	shr    eax,0xa
c000c7dc:	80 fa 01             	cmp    dl,0x1
c000c7df:	19 d2                	sbb    edx,edx
c000c7e1:	c1 e3 0c             	shl    ebx,0xc
c000c7e4:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c7e8:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c7ee:	25 fc 0f 00 00       	and    eax,0xffc
c000c7f3:	01 d8                	add    eax,ebx
c000c7f5:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c7fc:	83 c4 1c             	add    esp,0x1c
c000c7ff:	5b                   	pop    ebx
c000c800:	5e                   	pop    esi
c000c801:	5f                   	pop    edi
c000c802:	5d                   	pop    ebp
c000c803:	c3                   	ret    
c000c804:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c808:	83 ec 0c             	sub    esp,0xc
c000c80b:	68 58 50 02 c0       	push   0xc0025058
c000c810:	e8 1c 89 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000c815:	83 c4 10             	add    esp,0x10
c000c818:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c81c:	eb 9c                	jmp    c000c7ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c81e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c822:	e8 03 dc ff ff       	call   c000a42a <Phys::allocatePage()>
c000c827:	83 ec 0c             	sub    esp,0xc
c000c82a:	89 c5                	mov    ebp,eax
c000c82c:	8b 0d b0 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028db0
c000c832:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c836:	6a 01                	push   0x1
c000c838:	e8 fc f4 ff ff       	call   c000bd39 <Virt::allocateKernelVirtualPages(int)>
c000c83d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c844:	6a 01                	push   0x1
c000c846:	50                   	push   eax
c000c847:	55                   	push   ebp
c000c848:	81 cd 07 04 00 00    	or     ebp,0x407
c000c84e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c852:	51                   	push   ecx
c000c853:	e8 7e fe ff ff       	call   c000c6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c858:	83 c4 1c             	add    esp,0x1c
c000c85b:	68 00 10 00 00       	push   0x1000
c000c860:	6a 00                	push   0x0
c000c862:	50                   	push   eax
c000c863:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c867:	e8 28 3e ff ff       	call   c0000694 <memset>
c000c86c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c870:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c873:	e8 f1 f7 ff ff       	call   c000c069 <Virt::freeKernelVirtualPages(unsigned long)>
c000c878:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c87b:	83 c4 10             	add    esp,0x10
c000c87e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c881:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c885:	e9 47 ff ff ff       	jmp    c000c7d1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c88a <VAS::VAS(bool)>:
c000c88a:	53                   	push   ebx
c000c88b:	83 ec 28             	sub    esp,0x28
c000c88e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c892:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c896:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c89a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c8a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8a5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c8ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8b0:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c8b4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c8b7:	e8 6e db ff ff       	call   c000a42a <Phys::allocatePage()>
c000c8bc:	89 c2                	mov    edx,eax
c000c8be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8c2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c8c5:	8b 1d b0 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028db0
c000c8cb:	83 ec 0c             	sub    esp,0xc
c000c8ce:	6a 01                	push   0x1
c000c8d0:	e8 64 f4 ff ff       	call   c000bd39 <Virt::allocateKernelVirtualPages(int)>
c000c8d5:	83 c4 10             	add    esp,0x10
c000c8d8:	89 c2                	mov    edx,eax
c000c8da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8de:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c8e1:	83 ec 0c             	sub    esp,0xc
c000c8e4:	6a 03                	push   0x3
c000c8e6:	6a 01                	push   0x1
c000c8e8:	52                   	push   edx
c000c8e9:	50                   	push   eax
c000c8ea:	53                   	push   ebx
c000c8eb:	e8 e6 fd ff ff       	call   c000c6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c8f0:	83 c4 20             	add    esp,0x20
c000c8f3:	89 c2                	mov    edx,eax
c000c8f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8f9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c8fc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c904:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c90c:	7f 1c                	jg     c000c92a <VAS::VAS(bool)+0xa0>
c000c90e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c912:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c915:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c919:	c1 e2 02             	shl    edx,0x2
c000c91c:	01 d0                	add    eax,edx
c000c91e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c924:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c928:	eb da                	jmp    c000c904 <VAS::VAS(bool)+0x7a>
c000c92a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c932:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c93a:	7f 7a                	jg     c000c9b6 <VAS::VAS(bool)+0x12c>
c000c93c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c940:	2d 00 02 00 00       	sub    eax,0x200
c000c945:	c1 e0 0c             	shl    eax,0xc
c000c948:	83 c8 03             	or     eax,0x3
c000c94b:	89 c2                	mov    edx,eax
c000c94d:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000c952:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c958:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c95e:	83 e0 10             	and    eax,0x10
c000c961:	84 c0                	test   al,al
c000c963:	74 07                	je     c000c96c <VAS::VAS(bool)+0xe2>
c000c965:	b8 00 01 00 00       	mov    eax,0x100
c000c96a:	eb 05                	jmp    c000c971 <VAS::VAS(bool)+0xe7>
c000c96c:	b8 00 00 00 00       	mov    eax,0x0
c000c971:	09 d0                	or     eax,edx
c000c973:	89 c1                	mov    ecx,eax
c000c975:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c979:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c97c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c980:	c1 e2 02             	shl    edx,0x2
c000c983:	01 d0                	add    eax,edx
c000c985:	89 ca                	mov    edx,ecx
c000c987:	89 10                	mov    DWORD PTR [eax],edx
c000c989:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c98d:	2d 40 03 00 00       	sub    eax,0x340
c000c992:	83 f8 7f             	cmp    eax,0x7f
c000c995:	77 16                	ja     c000c9ad <VAS::VAS(bool)+0x123>
c000c997:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c99b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c99e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c9a2:	c1 e2 02             	shl    edx,0x2
c000c9a5:	01 d0                	add    eax,edx
c000c9a7:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c9ad:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c9b1:	e9 7c ff ff ff       	jmp    c000c932 <VAS::VAS(bool)+0xa8>
c000c9b6:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000c9bb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9c1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c9c7:	83 e0 10             	and    eax,0x10
c000c9ca:	84 c0                	test   al,al
c000c9cc:	74 07                	je     c000c9d5 <VAS::VAS(bool)+0x14b>
c000c9ce:	b8 03 41 00 00       	mov    eax,0x4103
c000c9d3:	eb 05                	jmp    c000c9da <VAS::VAS(bool)+0x150>
c000c9d5:	b8 03 40 00 00       	mov    eax,0x4003
c000c9da:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c9de:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c9e1:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c9e7:	89 02                	mov    DWORD PTR [edx],eax
c000c9e9:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000c9ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9f4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c9fa:	83 ec 08             	sub    esp,0x8
c000c9fd:	50                   	push   eax
c000c9fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ca02:	e8 b3 fc ff ff       	call   c000c6ba <VAS::setCPUSpecific(unsigned long)>
c000ca07:	83 c4 10             	add    esp,0x10
c000ca0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca0e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000ca11:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000ca16:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca1c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ca22:	83 e0 10             	and    eax,0x10
c000ca25:	84 c0                	test   al,al
c000ca27:	74 07                	je     c000ca30 <VAS::VAS(bool)+0x1a6>
c000ca29:	b8 00 01 00 00       	mov    eax,0x100
c000ca2e:	eb 05                	jmp    c000ca35 <VAS::VAS(bool)+0x1ab>
c000ca30:	b8 00 00 00 00       	mov    eax,0x0
c000ca35:	09 c2                	or     edx,eax
c000ca37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca3b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca3e:	05 fc 0f 00 00       	add    eax,0xffc
c000ca43:	83 ca 03             	or     edx,0x3
c000ca46:	89 10                	mov    DWORD PTR [eax],edx
c000ca48:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000ca4d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca53:	83 ec 0c             	sub    esp,0xc
c000ca56:	50                   	push   eax
c000ca57:	e8 76 1e 00 00       	call   c000e8d2 <Device::getName()>
c000ca5c:	83 c4 10             	add    esp,0x10
c000ca5f:	83 ec 08             	sub    esp,0x8
c000ca62:	68 2c 51 02 c0       	push   0xc002512c
c000ca67:	50                   	push   eax
c000ca68:	e8 6f 3d ff ff       	call   c00007dc <strcmp>
c000ca6d:	83 c4 10             	add    esp,0x10
c000ca70:	85 c0                	test   eax,eax
c000ca72:	0f 94 c0             	sete   al
c000ca75:	84 c0                	test   al,al
c000ca77:	0f 84 87 00 00 00    	je     c000cb04 <VAS::VAS(bool)+0x27a>
c000ca7d:	fa                   	cli    
c000ca7e:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000ca83:	40                   	inc    eax
c000ca84:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c000ca89:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000ca8e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ca94:	05 7c 09 00 00       	add    eax,0x97c
c000ca99:	83 ec 0c             	sub    esp,0xc
c000ca9c:	50                   	push   eax
c000ca9d:	e8 c0 cd ff ff       	call   c0009862 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000caa2:	83 c4 10             	add    esp,0x10
c000caa5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000caaa:	89 c3                	mov    ebx,eax
c000caac:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000cab1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000cab7:	05 7c 09 00 00       	add    eax,0x97c
c000cabc:	83 ec 0c             	sub    esp,0xc
c000cabf:	50                   	push   eax
c000cac0:	e8 9d cd ff ff       	call   c0009862 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000cac5:	83 c4 10             	add    esp,0x10
c000cac8:	83 ec 08             	sub    esp,0x8
c000cacb:	50                   	push   eax
c000cacc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cad0:	e8 75 f5 ff ff       	call   c000c04a <VAS::getPageTableEntry(unsigned long)>
c000cad5:	83 c4 10             	add    esp,0x10
c000cad8:	8b 00                	mov    eax,DWORD PTR [eax]
c000cada:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cadf:	6a 11                	push   0x11
c000cae1:	53                   	push   ebx
c000cae2:	50                   	push   eax
c000cae3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cae7:	e8 f4 f8 ff ff       	call   c000c3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c000caec:	83 c4 10             	add    esp,0x10
c000caef:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000caf4:	48                   	dec    eax
c000caf5:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c000cafa:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000caff:	85 c0                	test   eax,eax
c000cb01:	75 01                	jne    c000cb04 <VAS::VAS(bool)+0x27a>
c000cb03:	fb                   	sti    
c000cb04:	90                   	nop
c000cb05:	83 c4 28             	add    esp,0x28
c000cb08:	5b                   	pop    ebx
c000cb09:	c3                   	ret    

c000cb0a <VAS::evict(unsigned long)>:
c000cb0a:	55                   	push   ebp
c000cb0b:	57                   	push   edi
c000cb0c:	56                   	push   esi
c000cb0d:	53                   	push   ebx
c000cb0e:	83 ec 1c             	sub    esp,0x1c
c000cb11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb15:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cb19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb1d:	e8 58 f3 ff ff       	call   c000be7a <Virt::allocateSwapfilePage()>
c000cb22:	89 c7                	mov    edi,eax
c000cb24:	a1 cc 80 02 c0       	mov    eax,ds:0xc00280cc
c000cb29:	85 c0                	test   eax,eax
c000cb2b:	7e 3d                	jle    c000cb6a <VAS::evict(unsigned long)+0x60>
c000cb2d:	89 ee                	mov    esi,ebp
c000cb2f:	31 db                	xor    ebx,ebx
c000cb31:	83 ec 0c             	sub    esp,0xc
c000cb34:	57                   	push   edi
c000cb35:	e8 2e f3 ff ff       	call   c000be68 <Virt::swapIDToSector(unsigned long)>
c000cb3a:	89 34 24             	mov    DWORD PTR [esp],esi
c000cb3d:	01 d8                	add    eax,ebx
c000cb3f:	6a 01                	push   0x1
c000cb41:	31 d2                	xor    edx,edx
c000cb43:	43                   	inc    ebx
c000cb44:	52                   	push   edx
c000cb45:	81 c6 00 02 00 00    	add    esi,0x200
c000cb4b:	50                   	push   eax
c000cb4c:	0f be 05 d8 80 02 c0 	movsx  eax,BYTE PTR ds:0xc00280d8
c000cb53:	ff 34 85 3c 91 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ec4]
c000cb5a:	e8 df 3e 00 00       	call   c0010a3e <LogicalDisk::write(unsigned long long, int, void*)>
c000cb5f:	83 c4 20             	add    esp,0x20
c000cb62:	39 1d cc 80 02 c0    	cmp    DWORD PTR ds:0xc00280cc,ebx
c000cb68:	7f c7                	jg     c000cb31 <VAS::evict(unsigned long)+0x27>
c000cb6a:	83 ec 08             	sub    esp,0x8
c000cb6d:	c1 e7 0b             	shl    edi,0xb
c000cb70:	55                   	push   ebp
c000cb71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb75:	e8 d0 f4 ff ff       	call   c000c04a <VAS::getPageTableEntry(unsigned long)>
c000cb7a:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb7c:	89 d3                	mov    ebx,edx
c000cb7e:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000cb84:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000cb8a:	09 d7                	or     edi,edx
c000cb8c:	89 38                	mov    DWORD PTR [eax],edi
c000cb8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cb91:	ff 05 a8 8d 02 c0    	inc    DWORD PTR ds:0xc0028da8
c000cb97:	e8 0b d8 ff ff       	call   c000a3a7 <Phys::freePage(unsigned long)>
c000cb9c:	0f 20 d8             	mov    eax,cr3
c000cb9f:	0f 22 d8             	mov    cr3,eax
c000cba2:	ff 35 a8 8d 02 c0    	push   DWORD PTR ds:0xc0028da8
c000cba8:	55                   	push   ebp
c000cba9:	53                   	push   ebx
c000cbaa:	68 7c 50 02 c0       	push   0xc002507c
c000cbaf:	e8 ab 04 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000cbb4:	a1 a4 8d 02 c0       	mov    eax,ds:0xc0028da4
c000cbb9:	c7 44 24 50 3a 51 02 c0 	mov    DWORD PTR [esp+0x50],0xc002513a
c000cbc1:	8d 50 01             	lea    edx,[eax+0x1]
c000cbc4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cbc8:	89 15 a4 8d 02 c0    	mov    DWORD PTR ds:0xc0028da4,edx
c000cbce:	83 c4 3c             	add    esp,0x3c
c000cbd1:	5b                   	pop    ebx
c000cbd2:	5e                   	pop    esi
c000cbd3:	5f                   	pop    edi
c000cbd4:	5d                   	pop    ebp
c000cbd5:	e9 85 04 00 00       	jmp    c000d05f <Dbg::kprintf(char const*, ...)>

c000cbda <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cbda:	55                   	push   ebp
c000cbdb:	57                   	push   edi
c000cbdc:	56                   	push   esi
c000cbdd:	53                   	push   ebx
c000cbde:	83 ec 14             	sub    esp,0x14
c000cbe1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbe5:	68 4b 51 02 c0       	push   0xc002514b
c000cbea:	e8 70 04 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000cbef:	83 c4 10             	add    esp,0x10
c000cbf2:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cbf6:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cbfc:	74 20                	je     c000cc1e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cbfe:	83 ec 08             	sub    esp,0x8
c000cc01:	55                   	push   ebp
c000cc02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc06:	e8 3f f4 ff ff       	call   c000c04a <VAS::getPageTableEntry(unsigned long)>
c000cc0b:	83 c4 10             	add    esp,0x10
c000cc0e:	89 c3                	mov    ebx,eax
c000cc10:	85 c0                	test   eax,eax
c000cc12:	74 0a                	je     c000cc1e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cc14:	8b 38                	mov    edi,DWORD PTR [eax]
c000cc16:	f7 c7 01 00 00 00    	test   edi,0x1
c000cc1c:	74 0a                	je     c000cc28 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000cc1e:	31 c0                	xor    eax,eax
c000cc20:	83 c4 0c             	add    esp,0xc
c000cc23:	5b                   	pop    ebx
c000cc24:	5e                   	pop    esi
c000cc25:	5f                   	pop    edi
c000cc26:	5d                   	pop    ebp
c000cc27:	c3                   	ret    
c000cc28:	e8 fd d7 ff ff       	call   c000a42a <Phys::allocatePage()>
c000cc2d:	c1 ef 0b             	shr    edi,0xb
c000cc30:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc32:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000cc38:	09 c2                	or     edx,eax
c000cc3a:	81 ca 01 08 00 00    	or     edx,0x801
c000cc40:	89 13                	mov    DWORD PTR [ebx],edx
c000cc42:	8b 0d cc 80 02 c0    	mov    ecx,DWORD PTR ds:0xc00280cc
c000cc48:	85 c9                	test   ecx,ecx
c000cc4a:	7e 3d                	jle    c000cc89 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000cc4c:	89 ee                	mov    esi,ebp
c000cc4e:	31 db                	xor    ebx,ebx
c000cc50:	83 ec 0c             	sub    esp,0xc
c000cc53:	57                   	push   edi
c000cc54:	e8 0f f2 ff ff       	call   c000be68 <Virt::swapIDToSector(unsigned long)>
c000cc59:	89 34 24             	mov    DWORD PTR [esp],esi
c000cc5c:	01 d8                	add    eax,ebx
c000cc5e:	6a 01                	push   0x1
c000cc60:	31 d2                	xor    edx,edx
c000cc62:	43                   	inc    ebx
c000cc63:	52                   	push   edx
c000cc64:	81 c6 00 02 00 00    	add    esi,0x200
c000cc6a:	50                   	push   eax
c000cc6b:	0f be 05 d8 80 02 c0 	movsx  eax,BYTE PTR ds:0xc00280d8
c000cc72:	ff 34 85 3c 91 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ec4]
c000cc79:	e8 54 3d 00 00       	call   c00109d2 <LogicalDisk::read(unsigned long long, int, void*)>
c000cc7e:	83 c4 20             	add    esp,0x20
c000cc81:	39 1d cc 80 02 c0    	cmp    DWORD PTR ds:0xc00280cc,ebx
c000cc87:	7f c7                	jg     c000cc50 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000cc89:	a1 a8 8d 02 c0       	mov    eax,ds:0xc0028da8
c000cc8e:	48                   	dec    eax
c000cc8f:	52                   	push   edx
c000cc90:	a3 a8 8d 02 c0       	mov    ds:0xc0028da8,eax
c000cc95:	50                   	push   eax
c000cc96:	55                   	push   ebp
c000cc97:	68 5e 51 02 c0       	push   0xc002515e
c000cc9c:	e8 be 03 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000cca1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cca4:	e8 a1 f1 ff ff       	call   c000be4a <Virt::freeSwapfilePage(unsigned long)>
c000cca9:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	48                   	dec    eax
c000ccb2:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c000ccb7:	85 c0                	test   eax,eax
c000ccb9:	74 1d                	je     c000ccd8 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000ccbb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ccbf:	25 ff 0f 00 00       	and    eax,0xfff
c000ccc4:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000ccc9:	77 10                	ja     c000ccdb <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000cccb:	0f 20 d8             	mov    eax,cr3
c000ccce:	0f 22 d8             	mov    cr3,eax
c000ccd1:	b0 01                	mov    al,0x1
c000ccd3:	e9 48 ff ff ff       	jmp    c000cc20 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000ccd8:	fb                   	sti    
c000ccd9:	eb e0                	jmp    c000ccbb <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000ccdb:	83 ec 0c             	sub    esp,0xc
c000ccde:	68 73 51 02 c0       	push   0xc0025173
c000cce3:	e8 77 03 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000cce8:	83 c4 10             	add    esp,0x10
c000cceb:	eb de                	jmp    c000cccb <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000cced:	90                   	nop

c000ccee <VAS::scanForEviction()>:
c000ccee:	57                   	push   edi
c000ccef:	31 ff                	xor    edi,edi
c000ccf1:	56                   	push   esi
c000ccf2:	53                   	push   ebx
c000ccf3:	83 ec 10             	sub    esp,0x10
c000ccf6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000ccfa:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ccfd:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cd03:	75 0e                	jne    c000cd13 <VAS::scanForEviction()+0x25>
c000cd05:	89 da                	mov    edx,ebx
c000cd07:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cd0a:	c1 ea 16             	shr    edx,0x16
c000cd0d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cd11:	74 4e                	je     c000cd61 <VAS::scanForEviction()+0x73>
c000cd13:	53                   	push   ebx
c000cd14:	56                   	push   esi
c000cd15:	e8 30 f3 ff ff       	call   c000c04a <VAS::getPageTableEntry(unsigned long)>
c000cd1a:	5a                   	pop    edx
c000cd1b:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd1d:	59                   	pop    ecx
c000cd1e:	89 d1                	mov    ecx,edx
c000cd20:	81 e1 01 08 00 00    	and    ecx,0x801
c000cd26:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cd2c:	74 3e                	je     c000cd6c <VAS::scanForEviction()+0x7e>
c000cd2e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cd34:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000cd3a:	76 2b                	jbe    c000cd67 <VAS::scanForEviction()+0x79>
c000cd3c:	47                   	inc    edi
c000cd3d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000cd44:	83 ff 03             	cmp    edi,0x3
c000cd47:	74 32                	je     c000cd7b <VAS::scanForEviction()+0x8d>
c000cd49:	31 db                	xor    ebx,ebx
c000cd4b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cd51:	75 c0                	jne    c000cd13 <VAS::scanForEviction()+0x25>
c000cd53:	89 da                	mov    edx,ebx
c000cd55:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cd58:	c1 ea 16             	shr    edx,0x16
c000cd5b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cd5f:	75 b2                	jne    c000cd13 <VAS::scanForEviction()+0x25>
c000cd61:	81 c3 00 00 40 00    	add    ebx,0x400000
c000cd67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000cd6a:	eb 91                	jmp    c000ccfd <VAS::scanForEviction()+0xf>
c000cd6c:	f6 c2 20             	test   dl,0x20
c000cd6f:	74 13                	je     c000cd84 <VAS::scanForEviction()+0x96>
c000cd71:	83 e2 df             	and    edx,0xffffffdf
c000cd74:	89 10                	mov    DWORD PTR [eax],edx
c000cd76:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cd79:	eb b3                	jmp    c000cd2e <VAS::scanForEviction()+0x40>
c000cd7b:	83 c4 10             	add    esp,0x10
c000cd7e:	31 c0                	xor    eax,eax
c000cd80:	5b                   	pop    ebx
c000cd81:	5e                   	pop    esi
c000cd82:	5f                   	pop    edi
c000cd83:	c3                   	ret    
c000cd84:	83 ec 08             	sub    esp,0x8
c000cd87:	89 d0                	mov    eax,edx
c000cd89:	25 00 f0 ff ff       	and    eax,0xfffff000
c000cd8e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd92:	53                   	push   ebx
c000cd93:	68 83 51 02 c0       	push   0xc0025183
c000cd98:	e8 c2 02 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000cd9d:	58                   	pop    eax
c000cd9e:	5a                   	pop    edx
c000cd9f:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cda2:	56                   	push   esi
c000cda3:	e8 62 fd ff ff       	call   c000cb0a <VAS::evict(unsigned long)>
c000cda8:	59                   	pop    ecx
c000cda9:	5b                   	pop    ebx
c000cdaa:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cdad:	68 97 51 02 c0       	push   0xc0025197
c000cdb2:	e8 a8 02 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000cdb7:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000cdbe:	83 c4 10             	add    esp,0x10
c000cdc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cdc5:	83 c4 10             	add    esp,0x10
c000cdc8:	5b                   	pop    ebx
c000cdc9:	5e                   	pop    esi
c000cdca:	5f                   	pop    edi
c000cdcb:	c3                   	ret    

c000cdcc <mapVASFirstTime>:
c000cdcc:	55                   	push   ebp
c000cdcd:	57                   	push   edi
c000cdce:	56                   	push   esi
c000cdcf:	53                   	push   ebx
c000cdd0:	83 ec 0c             	sub    esp,0xc
c000cdd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cdd8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000cddb:	4a                   	dec    edx
c000cddc:	0f 84 fe 00 00 00    	je     c000cee0 <mapVASFirstTime+0x114>
c000cde2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000cde5:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000cde8:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000cded:	c1 e5 15             	shl    ebp,0x15
c000cdf0:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000cdf5:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000cdfb:	29 eb                	sub    ebx,ebp
c000cdfd:	29 ef                	sub    edi,ebp
c000cdff:	83 ec 08             	sub    esp,0x8
c000ce02:	53                   	push   ebx
c000ce03:	68 c3 51 02 c0       	push   0xc00251c3
c000ce08:	e8 52 02 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000ce0d:	e8 18 d6 ff ff       	call   c000a42a <Phys::allocatePage()>
c000ce12:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000ce19:	6a 01                	push   0x1
c000ce1b:	53                   	push   ebx
c000ce1c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce22:	50                   	push   eax
c000ce23:	56                   	push   esi
c000ce24:	e8 ad f8 ff ff       	call   c000c6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce29:	83 c4 20             	add    esp,0x20
c000ce2c:	39 fb                	cmp    ebx,edi
c000ce2e:	75 cf                	jne    c000cdff <mapVASFirstTime+0x33>
c000ce30:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000ce35:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000ce3a:	29 eb                	sub    ebx,ebp
c000ce3c:	29 ef                	sub    edi,ebp
c000ce3e:	83 ec 08             	sub    esp,0x8
c000ce41:	53                   	push   ebx
c000ce42:	68 df 51 02 c0       	push   0xc00251df
c000ce47:	e8 13 02 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000ce4c:	58                   	pop    eax
c000ce4d:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ce51:	5a                   	pop    edx
c000ce52:	19 c0                	sbb    eax,eax
c000ce54:	83 e0 04             	and    eax,0x4
c000ce57:	05 03 04 00 00       	add    eax,0x403
c000ce5c:	50                   	push   eax
c000ce5d:	68 f3 51 02 c0       	push   0xc00251f3
c000ce62:	e8 f8 01 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000ce67:	e8 be d5 ff ff       	call   c000a42a <Phys::allocatePage()>
c000ce6c:	59                   	pop    ecx
c000ce6d:	89 c5                	mov    ebp,eax
c000ce6f:	58                   	pop    eax
c000ce70:	55                   	push   ebp
c000ce71:	68 01 52 02 c0       	push   0xc0025201
c000ce76:	e8 e4 01 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000ce7b:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000ce7f:	19 d2                	sbb    edx,edx
c000ce81:	83 e2 04             	and    edx,0x4
c000ce84:	81 c2 03 04 00 00    	add    edx,0x403
c000ce8a:	89 14 24             	mov    DWORD PTR [esp],edx
c000ce8d:	6a 01                	push   0x1
c000ce8f:	53                   	push   ebx
c000ce90:	55                   	push   ebp
c000ce91:	56                   	push   esi
c000ce92:	e8 3f f8 ff ff       	call   c000c6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ce97:	83 c4 18             	add    esp,0x18
c000ce9a:	53                   	push   ebx
c000ce9b:	56                   	push   esi
c000ce9c:	e8 a9 f1 ff ff       	call   c000c04a <VAS::getPageTableEntry(unsigned long)>
c000cea1:	5a                   	pop    edx
c000cea2:	59                   	pop    ecx
c000cea3:	ff 30                	push   DWORD PTR [eax]
c000cea5:	68 1d 52 02 c0       	push   0xc002521d
c000ceaa:	e8 b0 01 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000ceaf:	0f 20 d8             	mov    eax,cr3
c000ceb2:	83 c4 0c             	add    esp,0xc
c000ceb5:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cebb:	56                   	push   esi
c000cebc:	50                   	push   eax
c000cebd:	68 28 52 02 c0       	push   0xc0025228
c000cec2:	e8 98 01 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000cec7:	83 c4 10             	add    esp,0x10
c000ceca:	39 df                	cmp    edi,ebx
c000cecc:	0f 85 6c ff ff ff    	jne    c000ce3e <mapVASFirstTime+0x72>
c000ced2:	0f 20 d8             	mov    eax,cr3
c000ced5:	0f 22 d8             	mov    cr3,eax
c000ced8:	83 c4 0c             	add    esp,0xc
c000cedb:	5b                   	pop    ebx
c000cedc:	5e                   	pop    esi
c000cedd:	5f                   	pop    edi
c000cede:	5d                   	pop    ebp
c000cedf:	c3                   	ret    
c000cee0:	83 ec 0c             	sub    esp,0xc
c000cee3:	68 aa 51 02 c0       	push   0xc00251aa
c000cee8:	e8 72 01 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000ceed:	83 c4 10             	add    esp,0x10
c000cef0:	83 c4 0c             	add    esp,0xc
c000cef3:	5b                   	pop    ebx
c000cef4:	5e                   	pop    esi
c000cef5:	5f                   	pop    edi
c000cef6:	5d                   	pop    ebp
c000cef7:	c3                   	ret    

c000cef8 <__cxa_atexit>:
c000cef8:	31 c0                	xor    eax,eax
c000cefa:	c3                   	ret    

c000cefb <__cxa_finalize>:
c000cefb:	c3                   	ret    

c000cefc <__stack_chk_fail>:
c000cefc:	55                   	push   ebp
c000cefd:	89 e5                	mov    ebp,esp
c000ceff:	83 ec 14             	sub    esp,0x14
c000cf02:	68 40 52 02 c0       	push   0xc0025240
c000cf07:	e8 53 01 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000cf0c:	58                   	pop    eax
c000cf0d:	5a                   	pop    edx
c000cf0e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cf11:	68 90 52 02 c0       	push   0xc0025290
c000cf16:	e8 44 01 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000cf1b:	59                   	pop    ecx
c000cf1c:	58                   	pop    eax
c000cf1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf20:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf23:	68 90 52 02 c0       	push   0xc0025290
c000cf28:	e8 32 01 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000cf2d:	5a                   	pop    edx
c000cf2e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf31:	59                   	pop    ecx
c000cf32:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf34:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf37:	68 90 52 02 c0       	push   0xc0025290
c000cf3c:	e8 1e 01 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000cf41:	5a                   	pop    edx
c000cf42:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf45:	59                   	pop    ecx
c000cf46:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf48:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf4a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cf4d:	68 90 52 02 c0       	push   0xc0025290
c000cf52:	e8 08 01 00 00       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000cf57:	c7 04 24 98 52 02 c0 	mov    DWORD PTR [esp],0xc0025298
c000cf5e:	e8 ce 81 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000cf63:	83 c4 10             	add    esp,0x10
c000cf66:	c9                   	leave  
c000cf67:	c3                   	ret    

c000cf68 <__cxa_pure_virtual>:
c000cf68:	83 ec 18             	sub    esp,0x18
c000cf6b:	68 b0 52 02 c0       	push   0xc00252b0
c000cf70:	e8 bc 81 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000cf75:	83 c4 1c             	add    esp,0x1c
c000cf78:	c3                   	ret    

c000cf79 <operator new[](unsigned long)>:
c000cf79:	e9 f5 cd ff ff       	jmp    c0009d73 <malloc>

c000cf7e <operator delete(void*, unsigned long)>:
c000cf7e:	e9 10 ce ff ff       	jmp    c0009d93 <rfree>

c000cf83 <operator delete[](void*)>:
c000cf83:	e9 0b ce ff ff       	jmp    c0009d93 <rfree>

c000cf88 <operator delete[](void*, unsigned long)>:
c000cf88:	e9 06 ce ff ff       	jmp    c0009d93 <rfree>

c000cf8d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cf8d:	55                   	push   ebp
c000cf8e:	b9 11 00 00 00       	mov    ecx,0x11
c000cf93:	57                   	push   edi
c000cf94:	56                   	push   esi
c000cf95:	be 96 4d 02 c0       	mov    esi,0xc0024d96
c000cf9a:	53                   	push   ebx
c000cf9b:	83 ec 20             	sub    esp,0x20
c000cf9e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cfa2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cfa6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cfaa:	fc                   	cld    
c000cfab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cfad:	89 ee                	mov    esi,ebp
c000cfaf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cfb3:	eb 02                	jmp    c000cfb7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cfb5:	89 c6                	mov    esi,eax
c000cfb7:	31 d2                	xor    edx,edx
c000cfb9:	41                   	inc    ecx
c000cfba:	89 f0                	mov    eax,esi
c000cfbc:	f7 f3                	div    ebx
c000cfbe:	39 de                	cmp    esi,ebx
c000cfc0:	73 f3                	jae    c000cfb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cfc2:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cfc5:	eb 02                	jmp    c000cfc9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cfc7:	89 c5                	mov    ebp,eax
c000cfc9:	31 d2                	xor    edx,edx
c000cfcb:	49                   	dec    ecx
c000cfcc:	89 e8                	mov    eax,ebp
c000cfce:	f7 f3                	div    ebx
c000cfd0:	39 dd                	cmp    ebp,ebx
c000cfd2:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cfd6:	88 11                	mov    BYTE PTR [ecx],dl
c000cfd8:	73 ed                	jae    c000cfc7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cfda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cfde:	83 c4 20             	add    esp,0x20
c000cfe1:	5b                   	pop    ebx
c000cfe2:	5e                   	pop    esi
c000cfe3:	5f                   	pop    edi
c000cfe4:	5d                   	pop    ebp
c000cfe5:	c3                   	ret    

c000cfe6 <Dbg::logc(char)>:
c000cfe6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cfea:	f6 05 a0 8c 02 c0 10 	test   BYTE PTR ds:0xc0028ca0,0x10
c000cff1:	75 12                	jne    c000d005 <Dbg::logc(char)+0x1f>
c000cff3:	ba fd 03 00 00       	mov    edx,0x3fd
c000cff8:	ec                   	in     al,dx
c000cff9:	a8 20                	test   al,0x20
c000cffb:	74 fb                	je     c000cff8 <Dbg::logc(char)+0x12>
c000cffd:	ba f8 03 00 00       	mov    edx,0x3f8
c000d002:	88 c8                	mov    al,cl
c000d004:	ee                   	out    dx,al
c000d005:	c3                   	ret    

c000d006 <Dbg::logs(char*)>:
c000d006:	53                   	push   ebx
c000d007:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000d00b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d00e:	84 c0                	test   al,al
c000d010:	74 0f                	je     c000d021 <Dbg::logs(char*)+0x1b>
c000d012:	50                   	push   eax
c000d013:	43                   	inc    ebx
c000d014:	e8 cd ff ff ff       	call   c000cfe6 <Dbg::logc(char)>
c000d019:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d01c:	5a                   	pop    edx
c000d01d:	84 c0                	test   al,al
c000d01f:	75 f1                	jne    c000d012 <Dbg::logs(char*)+0xc>
c000d021:	5b                   	pop    ebx
c000d022:	c3                   	ret    

c000d023 <Dbg::logWriteInt(unsigned int)>:
c000d023:	83 ec 10             	sub    esp,0x10
c000d026:	6a 0a                	push   0xa
c000d028:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d02c:	50                   	push   eax
c000d02d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d031:	e8 57 ff ff ff       	call   c000cf8d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d036:	50                   	push   eax
c000d037:	e8 ca ff ff ff       	call   c000d006 <Dbg::logs(char*)>
c000d03c:	83 c4 20             	add    esp,0x20
c000d03f:	c3                   	ret    

c000d040 <Dbg::logWriteIntBase(unsigned int, int)>:
c000d040:	83 ec 10             	sub    esp,0x10
c000d043:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d047:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d04b:	50                   	push   eax
c000d04c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d050:	e8 38 ff ff ff       	call   c000cf8d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000d055:	50                   	push   eax
c000d056:	e8 ab ff ff ff       	call   c000d006 <Dbg::logs(char*)>
c000d05b:	83 c4 20             	add    esp,0x20
c000d05e:	c3                   	ret    

c000d05f <Dbg::kprintf(char const*, ...)>:
c000d05f:	55                   	push   ebp
c000d060:	57                   	push   edi
c000d061:	56                   	push   esi
c000d062:	53                   	push   ebx
c000d063:	83 ec 0c             	sub    esp,0xc
c000d066:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d06a:	f6 05 a0 8c 02 c0 10 	test   BYTE PTR ds:0xc0028ca0,0x10
c000d071:	74 08                	je     c000d07b <Dbg::kprintf(char const*, ...)+0x1c>
c000d073:	83 c4 0c             	add    esp,0xc
c000d076:	5b                   	pop    ebx
c000d077:	5e                   	pop    esi
c000d078:	5f                   	pop    edi
c000d079:	5d                   	pop    ebp
c000d07a:	c3                   	ret    
c000d07b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d07f:	31 db                	xor    ebx,ebx
c000d081:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d085:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d088:	84 c0                	test   al,al
c000d08a:	74 e7                	je     c000d073 <Dbg::kprintf(char const*, ...)+0x14>
c000d08c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d08f:	3c 25                	cmp    al,0x25
c000d091:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d094:	75 44                	jne    c000d0da <Dbg::kprintf(char const*, ...)+0x7b>
c000d096:	83 c3 02             	add    ebx,0x2
c000d099:	8a 07                	mov    al,BYTE PTR [edi]
c000d09b:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d09e:	83 e8 25             	sub    eax,0x25
c000d0a1:	3c 53                	cmp    al,0x53
c000d0a3:	0f 87 c9 00 00 00    	ja     c000d172 <Dbg::kprintf(char const*, ...)+0x113>
c000d0a9:	0f b6 c0             	movzx  eax,al
c000d0ac:	ff 24 85 c4 52 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdad3c]
c000d0b3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d0b7:	89 c8                	mov    eax,ecx
c000d0b9:	83 c1 04             	add    ecx,0x4
c000d0bc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0c0:	ff 30                	push   DWORD PTR [eax]
c000d0c2:	e8 5c ff ff ff       	call   c000d023 <Dbg::logWriteInt(unsigned int)>
c000d0c7:	5f                   	pop    edi
c000d0c8:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d0cc:	84 c0                	test   al,al
c000d0ce:	74 a3                	je     c000d073 <Dbg::kprintf(char const*, ...)+0x14>
c000d0d0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d0d3:	3c 25                	cmp    al,0x25
c000d0d5:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d0d8:	74 bc                	je     c000d096 <Dbg::kprintf(char const*, ...)+0x37>
c000d0da:	50                   	push   eax
c000d0db:	89 eb                	mov    ebx,ebp
c000d0dd:	e8 04 ff ff ff       	call   c000cfe6 <Dbg::logc(char)>
c000d0e2:	89 fd                	mov    ebp,edi
c000d0e4:	58                   	pop    eax
c000d0e5:	eb e1                	jmp    c000d0c8 <Dbg::kprintf(char const*, ...)+0x69>
c000d0e7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d0eb:	89 c8                	mov    eax,ecx
c000d0ed:	83 c1 04             	add    ecx,0x4
c000d0f0:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0f4:	ff 30                	push   DWORD PTR [eax]
c000d0f6:	e8 0b ff ff ff       	call   c000d006 <Dbg::logs(char*)>
c000d0fb:	58                   	pop    eax
c000d0fc:	eb ca                	jmp    c000d0c8 <Dbg::kprintf(char const*, ...)+0x69>
c000d0fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d102:	89 d0                	mov    eax,edx
c000d104:	83 c2 04             	add    edx,0x4
c000d107:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d10b:	ff 30                	push   DWORD PTR [eax]
c000d10d:	e8 11 ff ff ff       	call   c000d023 <Dbg::logWriteInt(unsigned int)>
c000d112:	58                   	pop    eax
c000d113:	eb b3                	jmp    c000d0c8 <Dbg::kprintf(char const*, ...)+0x69>
c000d115:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d119:	89 d0                	mov    eax,edx
c000d11b:	83 c2 04             	add    edx,0x4
c000d11e:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d125:	50                   	push   eax
c000d126:	e8 bb fe ff ff       	call   c000cfe6 <Dbg::logc(char)>
c000d12b:	58                   	pop    eax
c000d12c:	eb 9a                	jmp    c000d0c8 <Dbg::kprintf(char const*, ...)+0x69>
c000d12e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d132:	89 c8                	mov    eax,ecx
c000d134:	83 c1 04             	add    ecx,0x4
c000d137:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d13b:	6a 10                	push   0x10
c000d13d:	ff 30                	push   DWORD PTR [eax]
c000d13f:	e8 fc fe ff ff       	call   c000d040 <Dbg::logWriteIntBase(unsigned int, int)>
c000d144:	59                   	pop    ecx
c000d145:	5f                   	pop    edi
c000d146:	eb 80                	jmp    c000d0c8 <Dbg::kprintf(char const*, ...)+0x69>
c000d148:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d14c:	89 d0                	mov    eax,edx
c000d14e:	83 c2 08             	add    edx,0x8
c000d151:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d155:	6a 10                	push   0x10
c000d157:	ff 30                	push   DWORD PTR [eax]
c000d159:	e8 e2 fe ff ff       	call   c000d040 <Dbg::logWriteIntBase(unsigned int, int)>
c000d15e:	58                   	pop    eax
c000d15f:	5a                   	pop    edx
c000d160:	e9 63 ff ff ff       	jmp    c000d0c8 <Dbg::kprintf(char const*, ...)+0x69>
c000d165:	6a 25                	push   0x25
c000d167:	e8 7a fe ff ff       	call   c000cfe6 <Dbg::logc(char)>
c000d16c:	58                   	pop    eax
c000d16d:	e9 56 ff ff ff       	jmp    c000d0c8 <Dbg::kprintf(char const*, ...)+0x69>
c000d172:	6a 25                	push   0x25
c000d174:	e8 6d fe ff ff       	call   c000cfe6 <Dbg::logc(char)>
c000d179:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d17c:	50                   	push   eax
c000d17d:	e8 64 fe ff ff       	call   c000cfe6 <Dbg::logc(char)>
c000d182:	5a                   	pop    edx
c000d183:	59                   	pop    ecx
c000d184:	e9 3f ff ff ff       	jmp    c000d0c8 <Dbg::kprintf(char const*, ...)+0x69>
c000d189:	90                   	nop

c000d18a <File::read(unsigned long long, void*, int*)>:
c000d18a:	53                   	push   ebx
c000d18b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d18f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d193:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d19a:	3c 19                	cmp    al,0x19
c000d19c:	77 35                	ja     c000d1d3 <File::read(unsigned long long, void*, int*)+0x49>
c000d19e:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c000d1a5:	85 c0                	test   eax,eax
c000d1a7:	74 2a                	je     c000d1d3 <File::read(unsigned long long, void*, int*)+0x49>
c000d1a9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d1af:	85 c0                	test   eax,eax
c000d1b1:	74 20                	je     c000d1d3 <File::read(unsigned long long, void*, int*)+0x49>
c000d1b3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1b7:	74 21                	je     c000d1da <File::read(unsigned long long, void*, int*)+0x50>
c000d1b9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1bb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1bf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d1c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1cd:	5b                   	pop    ebx
c000d1ce:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d1d1:	ff e0                	jmp    eax
c000d1d3:	b8 0b 00 00 00       	mov    eax,0xb
c000d1d8:	eb 05                	jmp    c000d1df <File::read(unsigned long long, void*, int*)+0x55>
c000d1da:	b8 05 00 00 00       	mov    eax,0x5
c000d1df:	5b                   	pop    ebx
c000d1e0:	c3                   	ret    
c000d1e1:	90                   	nop

c000d1e2 <File::write(unsigned long long, void*, int*)>:
c000d1e2:	53                   	push   ebx
c000d1e3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1e7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d1eb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d1f2:	3c 19                	cmp    al,0x19
c000d1f4:	77 35                	ja     c000d22b <File::write(unsigned long long, void*, int*)+0x49>
c000d1f6:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c000d1fd:	85 c0                	test   eax,eax
c000d1ff:	74 2a                	je     c000d22b <File::write(unsigned long long, void*, int*)+0x49>
c000d201:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d207:	85 c0                	test   eax,eax
c000d209:	74 20                	je     c000d22b <File::write(unsigned long long, void*, int*)+0x49>
c000d20b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d20f:	74 21                	je     c000d232 <File::write(unsigned long long, void*, int*)+0x50>
c000d211:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d213:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d217:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d21d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d221:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d225:	5b                   	pop    ebx
c000d226:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d229:	ff e0                	jmp    eax
c000d22b:	b8 0b 00 00 00       	mov    eax,0xb
c000d230:	eb 05                	jmp    c000d237 <File::write(unsigned long long, void*, int*)+0x55>
c000d232:	b8 05 00 00 00       	mov    eax,0x5
c000d237:	5b                   	pop    ebx
c000d238:	c3                   	ret    
c000d239:	90                   	nop

c000d23a <Directory::read(unsigned long long, void*, int*)>:
c000d23a:	53                   	push   ebx
c000d23b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d23f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d243:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d24a:	3c 19                	cmp    al,0x19
c000d24c:	77 35                	ja     c000d283 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d24e:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c000d255:	85 c0                	test   eax,eax
c000d257:	74 2a                	je     c000d283 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d259:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d25f:	85 c0                	test   eax,eax
c000d261:	74 20                	je     c000d283 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d263:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d267:	74 21                	je     c000d28a <Directory::read(unsigned long long, void*, int*)+0x50>
c000d269:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d26b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d26f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d275:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d279:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d27d:	5b                   	pop    ebx
c000d27e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d281:	ff e0                	jmp    eax
c000d283:	b8 0b 00 00 00       	mov    eax,0xb
c000d288:	eb 05                	jmp    c000d28f <Directory::read(unsigned long long, void*, int*)+0x55>
c000d28a:	b8 05 00 00 00       	mov    eax,0x5
c000d28f:	5b                   	pop    ebx
c000d290:	c3                   	ret    
c000d291:	90                   	nop

c000d292 <Directory::write(unsigned long long, void*, int*)>:
c000d292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d296:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d29d:	b8 0b 00 00 00       	mov    eax,0xb
c000d2a2:	80 fa 19             	cmp    dl,0x19
c000d2a5:	77 18                	ja     c000d2bf <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d2a7:	8b 14 95 40 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6dc0]
c000d2ae:	85 d2                	test   edx,edx
c000d2b0:	74 0d                	je     c000d2bf <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d2b2:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d2b9:	19 c0                	sbb    eax,eax
c000d2bb:	83 e0 0a             	and    eax,0xa
c000d2be:	40                   	inc    eax
c000d2bf:	c3                   	ret    

c000d2c0 <File::isAtty()>:
c000d2c0:	31 c0                	xor    eax,eax
c000d2c2:	c3                   	ret    
c000d2c3:	90                   	nop

c000d2c4 <Directory::isAtty()>:
c000d2c4:	31 c0                	xor    eax,eax
c000d2c6:	c3                   	ret    
c000d2c7:	90                   	nop

c000d2c8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d2c8:	b8 0a 00 00 00       	mov    eax,0xa
c000d2cd:	c3                   	ret    

c000d2ce <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d2ce:	b8 0a 00 00 00       	mov    eax,0xa
c000d2d3:	c3                   	ret    

c000d2d4 <Filesystem::allocateSwapfile(char const*, int)>:
c000d2d4:	31 c0                	xor    eax,eax
c000d2d6:	31 d2                	xor    edx,edx
c000d2d8:	c3                   	ret    
c000d2d9:	90                   	nop

c000d2da <File::~File()>:
c000d2da:	83 ec 0c             	sub    esp,0xc
c000d2dd:	ba 00 55 02 c0       	mov    edx,0xc0025500
c000d2e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2e6:	89 10                	mov    DWORD PTR [eax],edx
c000d2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ec:	83 ec 0c             	sub    esp,0xc
c000d2ef:	50                   	push   eax
c000d2f0:	e8 e3 e7 ff ff       	call   c000bad8 <UnixFile::~UnixFile()>
c000d2f5:	83 c4 10             	add    esp,0x10
c000d2f8:	90                   	nop
c000d2f9:	83 c4 0c             	add    esp,0xc
c000d2fc:	c3                   	ret    
c000d2fd:	90                   	nop

c000d2fe <File::~File()>:
c000d2fe:	83 ec 0c             	sub    esp,0xc
c000d301:	83 ec 0c             	sub    esp,0xc
c000d304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d308:	e8 cd ff ff ff       	call   c000d2da <File::~File()>
c000d30d:	83 c4 10             	add    esp,0x10
c000d310:	83 ec 08             	sub    esp,0x8
c000d313:	68 14 01 00 00       	push   0x114
c000d318:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d31c:	e8 5d fc ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c000d321:	83 c4 10             	add    esp,0x10
c000d324:	83 c4 0c             	add    esp,0xc
c000d327:	c3                   	ret    

c000d328 <Directory::~Directory()>:
c000d328:	83 ec 0c             	sub    esp,0xc
c000d32b:	ba 1c 55 02 c0       	mov    edx,0xc002551c
c000d330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d334:	89 10                	mov    DWORD PTR [eax],edx
c000d336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d33a:	83 ec 0c             	sub    esp,0xc
c000d33d:	50                   	push   eax
c000d33e:	e8 95 e7 ff ff       	call   c000bad8 <UnixFile::~UnixFile()>
c000d343:	83 c4 10             	add    esp,0x10
c000d346:	90                   	nop
c000d347:	83 c4 0c             	add    esp,0xc
c000d34a:	c3                   	ret    
c000d34b:	90                   	nop

c000d34c <Directory::~Directory()>:
c000d34c:	83 ec 0c             	sub    esp,0xc
c000d34f:	83 ec 0c             	sub    esp,0xc
c000d352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d356:	e8 cd ff ff ff       	call   c000d328 <Directory::~Directory()>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	83 ec 08             	sub    esp,0x8
c000d361:	68 14 01 00 00       	push   0x114
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 0f fc ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	83 c4 0c             	add    esp,0xc
c000d375:	c3                   	ret    

c000d376 <Filesystem::Filesystem()>:
c000d376:	ba 98 54 02 c0       	mov    edx,0xc0025498
c000d37b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d37f:	89 10                	mov    DWORD PTR [eax],edx
c000d381:	8b 15 b4 8d 02 c0    	mov    edx,DWORD PTR ds:0xc0028db4
c000d387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d38b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d38e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d392:	a3 b4 8d 02 c0       	mov    ds:0xc0028db4,eax
c000d397:	90                   	nop
c000d398:	c3                   	ret    
c000d399:	90                   	nop

c000d39a <Filesystem::~Filesystem()>:
c000d39a:	ba 98 54 02 c0       	mov    edx,0xc0025498
c000d39f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3a3:	89 10                	mov    DWORD PTR [eax],edx
c000d3a5:	90                   	nop
c000d3a6:	c3                   	ret    
c000d3a7:	90                   	nop

c000d3a8 <Filesystem::~Filesystem()>:
c000d3a8:	83 ec 0c             	sub    esp,0xc
c000d3ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d3af:	e8 e6 ff ff ff       	call   c000d39a <Filesystem::~Filesystem()>
c000d3b4:	83 c4 04             	add    esp,0x4
c000d3b7:	83 ec 08             	sub    esp,0x8
c000d3ba:	6a 08                	push   0x8
c000d3bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c0:	e8 b9 fb ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c000d3c5:	83 c4 10             	add    esp,0x10
c000d3c8:	83 c4 0c             	add    esp,0xc
c000d3cb:	c3                   	ret    

c000d3cc <Fs::getcwd(Process*, char*, int)>:
c000d3cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d3d0:	31 c0                	xor    eax,eax
c000d3d2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d3d5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d3d9:	7d 15                	jge    c000d3f0 <Fs::getcwd(Process*, char*, int)+0x24>
c000d3db:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d3df:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d3e6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d3e9:	84 c9                	test   cl,cl
c000d3eb:	74 06                	je     c000d3f3 <Fs::getcwd(Process*, char*, int)+0x27>
c000d3ed:	40                   	inc    eax
c000d3ee:	eb e2                	jmp    c000d3d2 <Fs::getcwd(Process*, char*, int)+0x6>
c000d3f0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d3f3:	31 c0                	xor    eax,eax
c000d3f5:	c3                   	ret    

c000d3f6 <Fs::initVFS()>:
c000d3f6:	83 ec 18             	sub    esp,0x18
c000d3f9:	6a 08                	push   0x8
c000d3fb:	e8 73 c9 ff ff       	call   c0009d73 <malloc>
c000d400:	89 04 24             	mov    DWORD PTR [esp],eax
c000d403:	e8 d4 ee 00 00       	call   c001c2dc <FAT::FAT()>
c000d408:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d40f:	e8 5f c9 ff ff       	call   c0009d73 <malloc>
c000d414:	89 04 24             	mov    DWORD PTR [esp],eax
c000d417:	e8 50 01 01 00       	call   c001d56c <ISO9660::ISO9660()>
c000d41c:	83 c4 1c             	add    esp,0x1c
c000d41f:	c3                   	ret    

c000d420 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d420:	55                   	push   ebp
c000d421:	57                   	push   edi
c000d422:	56                   	push   esi
c000d423:	53                   	push   ebx
c000d424:	81 ec 10 04 00 00    	sub    esp,0x410
c000d42a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d431:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d438:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d43f:	68 00 04 00 00       	push   0x400
c000d444:	6a 00                	push   0x0
c000d446:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d44a:	56                   	push   esi
c000d44b:	e8 44 32 ff ff       	call   c0000694 <memset>
c000d450:	83 c4 10             	add    esp,0x10
c000d453:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d457:	75 0b                	jne    c000d464 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d459:	50                   	push   eax
c000d45a:	50                   	push   eax
c000d45b:	57                   	push   edi
c000d45c:	56                   	push   esi
c000d45d:	e8 ee 32 ff ff       	call   c0000750 <strcpy>
c000d462:	eb 41                	jmp    c000d4a5 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d464:	8a 07                	mov    al,BYTE PTR [edi]
c000d466:	3c 5c                	cmp    al,0x5c
c000d468:	74 04                	je     c000d46e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d46a:	3c 2f                	cmp    al,0x2f
c000d46c:	75 18                	jne    c000d486 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d46e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d471:	3c 60                	cmp    al,0x60
c000d473:	7e 03                	jle    c000d478 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d475:	83 e8 20             	sub    eax,0x20
c000d478:	88 04 24             	mov    BYTE PTR [esp],al
c000d47b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d482:	50                   	push   eax
c000d483:	50                   	push   eax
c000d484:	eb 18                	jmp    c000d49e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d486:	50                   	push   eax
c000d487:	50                   	push   eax
c000d488:	55                   	push   ebp
c000d489:	56                   	push   esi
c000d48a:	e8 c1 32 ff ff       	call   c0000750 <strcpy>
c000d48f:	5a                   	pop    edx
c000d490:	59                   	pop    ecx
c000d491:	68 ca 6d 02 c0       	push   0xc0026dca
c000d496:	56                   	push   esi
c000d497:	e8 f4 33 ff ff       	call   c0000890 <strcat>
c000d49c:	5d                   	pop    ebp
c000d49d:	58                   	pop    eax
c000d49e:	57                   	push   edi
c000d49f:	56                   	push   esi
c000d4a0:	e8 eb 33 ff ff       	call   c0000890 <strcat>
c000d4a5:	83 c4 10             	add    esp,0x10
c000d4a8:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d4ab:	3c 60                	cmp    al,0x60
c000d4ad:	7e 03                	jle    c000d4b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d4af:	83 e8 20             	sub    eax,0x20
c000d4b2:	88 04 24             	mov    BYTE PTR [esp],al
c000d4b5:	88 03                	mov    BYTE PTR [ebx],al
c000d4b7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d4be:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d4c4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d4c8:	bf 03 00 00 00       	mov    edi,0x3
c000d4cd:	b8 03 00 00 00       	mov    eax,0x3
c000d4d2:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d4d5:	84 d2                	test   dl,dl
c000d4d7:	0f 84 91 00 00 00    	je     c000d56e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d4dd:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d4e0:	80 fa 5c             	cmp    dl,0x5c
c000d4e3:	74 05                	je     c000d4ea <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d4e5:	80 fa 2f             	cmp    dl,0x2f
c000d4e8:	75 12                	jne    c000d4fc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d4ea:	89 c5                	mov    ebp,eax
c000d4ec:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d4f1:	74 09                	je     c000d4fc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d4f3:	40                   	inc    eax
c000d4f4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d4f8:	89 cf                	mov    edi,ecx
c000d4fa:	eb d6                	jmp    c000d4d2 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d4fc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d501:	75 5b                	jne    c000d55e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d503:	80 fa 2e             	cmp    dl,0x2e
c000d506:	75 56                	jne    c000d55e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d508:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d50c:	74 19                	je     c000d527 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d50e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d513:	74 53                	je     c000d568 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d515:	89 f9                	mov    ecx,edi
c000d517:	41                   	inc    ecx
c000d518:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d51b:	80 fa 2f             	cmp    dl,0x2f
c000d51e:	74 f7                	je     c000d517 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d520:	80 fa 5c             	cmp    dl,0x5c
c000d523:	74 f2                	je     c000d517 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d525:	eb d1                	jmp    c000d4f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d527:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d52c:	74 3a                	je     c000d568 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d52e:	83 f8 03             	cmp    eax,0x3
c000d531:	74 c5                	je     c000d4f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d533:	41                   	inc    ecx
c000d534:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d537:	80 fa 2f             	cmp    dl,0x2f
c000d53a:	74 f7                	je     c000d533 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d53c:	80 fa 5c             	cmp    dl,0x5c
c000d53f:	74 f2                	je     c000d533 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d541:	48                   	dec    eax
c000d542:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d546:	75 06                	jne    c000d54e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d548:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d54c:	eb f3                	jmp    c000d541 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d54e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d552:	74 07                	je     c000d55b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d554:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d558:	48                   	dec    eax
c000d559:	eb f3                	jmp    c000d54e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d55b:	40                   	inc    eax
c000d55c:	eb 9a                	jmp    c000d4f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d55e:	80 fa 2f             	cmp    dl,0x2f
c000d561:	74 95                	je     c000d4f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d563:	80 fa 5c             	cmp    dl,0x5c
c000d566:	74 90                	je     c000d4f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d568:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d56b:	40                   	inc    eax
c000d56c:	eb 8a                	jmp    c000d4f8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d56e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d572:	83 ec 0c             	sub    esp,0xc
c000d575:	53                   	push   ebx
c000d576:	e8 35 31 ff ff       	call   c00006b0 <strlen>
c000d57b:	83 c4 10             	add    esp,0x10
c000d57e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d583:	75 26                	jne    c000d5ab <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d585:	83 ec 0c             	sub    esp,0xc
c000d588:	53                   	push   ebx
c000d589:	e8 22 31 ff ff       	call   c00006b0 <strlen>
c000d58e:	83 c4 10             	add    esp,0x10
c000d591:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d596:	74 26                	je     c000d5be <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d598:	83 ec 0c             	sub    esp,0xc
c000d59b:	53                   	push   ebx
c000d59c:	e8 0f 31 ff ff       	call   c00006b0 <strlen>
c000d5a1:	83 c4 10             	add    esp,0x10
c000d5a4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d5a9:	eb c7                	jmp    c000d572 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d5ab:	83 ec 0c             	sub    esp,0xc
c000d5ae:	53                   	push   ebx
c000d5af:	e8 fc 30 ff ff       	call   c00006b0 <strlen>
c000d5b4:	83 c4 10             	add    esp,0x10
c000d5b7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d5bc:	74 c7                	je     c000d585 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d5be:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d5c4:	5b                   	pop    ebx
c000d5c5:	5e                   	pop    esi
c000d5c6:	5f                   	pop    edi
c000d5c7:	5d                   	pop    ebp
c000d5c8:	c3                   	ret    
c000d5c9:	90                   	nop

c000d5ca <File::File(char const*, Process*)>:
c000d5ca:	83 ec 0c             	sub    esp,0xc
c000d5cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d1:	83 ec 08             	sub    esp,0x8
c000d5d4:	6a 00                	push   0x0
c000d5d6:	50                   	push   eax
c000d5d7:	e8 1a e3 ff ff       	call   c000b8f6 <UnixFile::UnixFile(int)>
c000d5dc:	83 c4 10             	add    esp,0x10
c000d5df:	ba 00 55 02 c0       	mov    edx,0xc0025500
c000d5e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5e8:	89 10                	mov    DWORD PTR [eax],edx
c000d5ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d5ee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d5f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5f8:	83 c0 0d             	add    eax,0xd
c000d5fb:	83 ec 04             	sub    esp,0x4
c000d5fe:	52                   	push   edx
c000d5ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d603:	50                   	push   eax
c000d604:	e8 17 fe ff ff       	call   c000d420 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d609:	83 c4 10             	add    esp,0x10
c000d60c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d610:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d613:	8d 50 bf             	lea    edx,[eax-0x41]
c000d616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d61a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d624:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d62c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d632:	0f b6 c0             	movzx  eax,al
c000d635:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c000d63c:	85 c0                	test   eax,eax
c000d63e:	74 5e                	je     c000d69e <File::File(char const*, Process*)+0xd4>
c000d640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d644:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d64a:	0f b6 c0             	movzx  eax,al
c000d64d:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c000d654:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d65a:	85 c0                	test   eax,eax
c000d65c:	75 40                	jne    c000d69e <File::File(char const*, Process*)+0xd4>
c000d65e:	83 ec 0c             	sub    esp,0xc
c000d661:	68 3c 54 02 c0       	push   0xc002543c
c000d666:	e8 f4 f9 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000d66b:	83 c4 10             	add    esp,0x10
c000d66e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d672:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d678:	0f b6 c0             	movzx  eax,al
c000d67b:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c000d682:	83 ec 0c             	sub    esp,0xc
c000d685:	50                   	push   eax
c000d686:	e8 45 32 00 00       	call   c00108d0 <LogicalDisk::mount()>
c000d68b:	83 c4 10             	add    esp,0x10
c000d68e:	83 ec 0c             	sub    esp,0xc
c000d691:	68 b9 77 02 c0       	push   0xc00277b9
c000d696:	e8 c4 f9 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000d69b:	83 c4 10             	add    esp,0x10
c000d69e:	90                   	nop
c000d69f:	83 c4 0c             	add    esp,0xc
c000d6a2:	c3                   	ret    
c000d6a3:	90                   	nop

c000d6a4 <File::open(FileOpenMode)>:
c000d6a4:	53                   	push   ebx
c000d6a5:	b8 0b 00 00 00       	mov    eax,0xb
c000d6aa:	83 ec 08             	sub    esp,0x8
c000d6ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d6b1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d6b8:	80 fa 19             	cmp    dl,0x19
c000d6bb:	77 40                	ja     c000d6fd <File::open(FileOpenMode)+0x59>
c000d6bd:	8b 14 95 40 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6dc0]
c000d6c4:	85 d2                	test   edx,edx
c000d6c6:	74 35                	je     c000d6fd <File::open(FileOpenMode)+0x59>
c000d6c8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d6ce:	85 d2                	test   edx,edx
c000d6d0:	74 2b                	je     c000d6fd <File::open(FileOpenMode)+0x59>
c000d6d2:	b8 06 00 00 00       	mov    eax,0x6
c000d6d7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d6db:	75 20                	jne    c000d6fd <File::open(FileOpenMode)+0x59>
c000d6dd:	8b 02                	mov    eax,DWORD PTR [edx]
c000d6df:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e9:	51                   	push   ecx
c000d6ea:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d6ed:	51                   	push   ecx
c000d6ee:	52                   	push   edx
c000d6ef:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d6f2:	83 c4 10             	add    esp,0x10
c000d6f5:	85 c0                	test   eax,eax
c000d6f7:	75 04                	jne    c000d6fd <File::open(FileOpenMode)+0x59>
c000d6f9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d6fd:	83 c4 08             	add    esp,0x8
c000d700:	5b                   	pop    ebx
c000d701:	c3                   	ret    

c000d702 <File::close()>:
c000d702:	53                   	push   ebx
c000d703:	b8 0b 00 00 00       	mov    eax,0xb
c000d708:	83 ec 08             	sub    esp,0x8
c000d70b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d70f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d716:	80 fa 19             	cmp    dl,0x19
c000d719:	77 41                	ja     c000d75c <File::close()+0x5a>
c000d71b:	8b 1c 95 40 92 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd6dc0]
c000d722:	85 db                	test   ebx,ebx
c000d724:	74 36                	je     c000d75c <File::close()+0x5a>
c000d726:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d72d:	74 2d                	je     c000d75c <File::close()+0x5a>
c000d72f:	b8 05 00 00 00       	mov    eax,0x5
c000d734:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d738:	74 22                	je     c000d75c <File::close()+0x5a>
c000d73a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d73e:	8b 04 95 40 92 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6dc0]
c000d745:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d74b:	53                   	push   ebx
c000d74c:	53                   	push   ebx
c000d74d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d74f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d755:	50                   	push   eax
c000d756:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d759:	83 c4 10             	add    esp,0x10
c000d75c:	83 c4 08             	add    esp,0x8
c000d75f:	5b                   	pop    ebx
c000d760:	c3                   	ret    
c000d761:	90                   	nop

c000d762 <File::seek(unsigned long long)>:
c000d762:	56                   	push   esi
c000d763:	53                   	push   ebx
c000d764:	b8 0b 00 00 00       	mov    eax,0xb
c000d769:	51                   	push   ecx
c000d76a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d76e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d772:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d779:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d77d:	80 fa 19             	cmp    dl,0x19
c000d780:	77 31                	ja     c000d7b3 <File::seek(unsigned long long)+0x51>
c000d782:	8b 14 95 40 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6dc0]
c000d789:	85 d2                	test   edx,edx
c000d78b:	74 26                	je     c000d7b3 <File::seek(unsigned long long)+0x51>
c000d78d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d793:	85 d2                	test   edx,edx
c000d795:	74 1c                	je     c000d7b3 <File::seek(unsigned long long)+0x51>
c000d797:	b8 05 00 00 00       	mov    eax,0x5
c000d79c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d7a0:	74 11                	je     c000d7b3 <File::seek(unsigned long long)+0x51>
c000d7a2:	8b 02                	mov    eax,DWORD PTR [edx]
c000d7a4:	53                   	push   ebx
c000d7a5:	51                   	push   ecx
c000d7a6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d7ac:	52                   	push   edx
c000d7ad:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d7b0:	83 c4 10             	add    esp,0x10
c000d7b3:	5a                   	pop    edx
c000d7b4:	5b                   	pop    ebx
c000d7b5:	5e                   	pop    esi
c000d7b6:	c3                   	ret    
c000d7b7:	90                   	nop

c000d7b8 <File::tell(unsigned long long*)>:
c000d7b8:	83 ec 0c             	sub    esp,0xc
c000d7bb:	b8 0b 00 00 00       	mov    eax,0xb
c000d7c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d7c4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d7cb:	80 fa 19             	cmp    dl,0x19
c000d7ce:	77 34                	ja     c000d804 <File::tell(unsigned long long*)+0x4c>
c000d7d0:	8b 14 95 40 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6dc0]
c000d7d7:	85 d2                	test   edx,edx
c000d7d9:	74 29                	je     c000d804 <File::tell(unsigned long long*)+0x4c>
c000d7db:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d7e1:	85 d2                	test   edx,edx
c000d7e3:	74 1f                	je     c000d804 <File::tell(unsigned long long*)+0x4c>
c000d7e5:	b8 05 00 00 00       	mov    eax,0x5
c000d7ea:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d7ee:	74 14                	je     c000d804 <File::tell(unsigned long long*)+0x4c>
c000d7f0:	50                   	push   eax
c000d7f1:	8b 02                	mov    eax,DWORD PTR [edx]
c000d7f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d7f7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d7fd:	52                   	push   edx
c000d7fe:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d801:	83 c4 10             	add    esp,0x10
c000d804:	83 c4 0c             	add    esp,0xc
c000d807:	c3                   	ret    

c000d808 <File::rewind()>:
c000d808:	83 ec 10             	sub    esp,0x10
c000d80b:	6a 00                	push   0x0
c000d80d:	6a 00                	push   0x0
c000d80f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d813:	e8 4a ff ff ff       	call   c000d762 <File::seek(unsigned long long)>
c000d818:	83 c4 1c             	add    esp,0x1c
c000d81b:	c3                   	ret    

c000d81c <File::unlink()>:
c000d81c:	83 ec 0c             	sub    esp,0xc
c000d81f:	b8 0b 00 00 00       	mov    eax,0xb
c000d824:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d828:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d82f:	80 f9 19             	cmp    cl,0x19
c000d832:	77 2f                	ja     c000d863 <File::unlink()+0x47>
c000d834:	8b 0c 8d 40 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6dc0]
c000d83b:	85 c9                	test   ecx,ecx
c000d83d:	74 24                	je     c000d863 <File::unlink()+0x47>
c000d83f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d845:	85 c9                	test   ecx,ecx
c000d847:	74 1a                	je     c000d863 <File::unlink()+0x47>
c000d849:	b8 06 00 00 00       	mov    eax,0x6
c000d84e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d852:	75 0f                	jne    c000d863 <File::unlink()+0x47>
c000d854:	83 c2 0d             	add    edx,0xd
c000d857:	50                   	push   eax
c000d858:	50                   	push   eax
c000d859:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d85b:	52                   	push   edx
c000d85c:	51                   	push   ecx
c000d85d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d860:	83 c4 10             	add    esp,0x10
c000d863:	83 c4 0c             	add    esp,0xc
c000d866:	c3                   	ret    
c000d867:	90                   	nop

c000d868 <File::rename(char const*)>:
c000d868:	83 ec 0c             	sub    esp,0xc
c000d86b:	b8 0b 00 00 00       	mov    eax,0xb
c000d870:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d874:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d87b:	80 f9 19             	cmp    cl,0x19
c000d87e:	77 32                	ja     c000d8b2 <File::rename(char const*)+0x4a>
c000d880:	8b 0c 8d 40 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6dc0]
c000d887:	85 c9                	test   ecx,ecx
c000d889:	74 27                	je     c000d8b2 <File::rename(char const*)+0x4a>
c000d88b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d891:	85 c9                	test   ecx,ecx
c000d893:	74 1d                	je     c000d8b2 <File::rename(char const*)+0x4a>
c000d895:	b8 06 00 00 00       	mov    eax,0x6
c000d89a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d89e:	75 12                	jne    c000d8b2 <File::rename(char const*)+0x4a>
c000d8a0:	83 c2 0d             	add    edx,0xd
c000d8a3:	50                   	push   eax
c000d8a4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d8aa:	52                   	push   edx
c000d8ab:	51                   	push   ecx
c000d8ac:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d8af:	83 c4 10             	add    esp,0x10
c000d8b2:	83 c4 0c             	add    esp,0xc
c000d8b5:	c3                   	ret    

c000d8b6 <File::chfatattr(unsigned char, unsigned char)>:
c000d8b6:	57                   	push   edi
c000d8b7:	b8 0b 00 00 00       	mov    eax,0xb
c000d8bc:	56                   	push   esi
c000d8bd:	53                   	push   ebx
c000d8be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8c2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d8c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8cd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d8d1:	80 f9 19             	cmp    cl,0x19
c000d8d4:	77 37                	ja     c000d90d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8d6:	8b 0c 8d 40 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6dc0]
c000d8dd:	85 c9                	test   ecx,ecx
c000d8df:	74 2c                	je     c000d90d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8e1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8e7:	85 c9                	test   ecx,ecx
c000d8e9:	74 22                	je     c000d90d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8eb:	b8 06 00 00 00       	mov    eax,0x6
c000d8f0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8f4:	75 17                	jne    c000d90d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d8f6:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d8f8:	89 f0                	mov    eax,esi
c000d8fa:	83 c2 0d             	add    edx,0xd
c000d8fd:	0f b6 f0             	movzx  esi,al
c000d900:	0f b6 db             	movzx  ebx,bl
c000d903:	56                   	push   esi
c000d904:	53                   	push   ebx
c000d905:	52                   	push   edx
c000d906:	51                   	push   ecx
c000d907:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d90a:	83 c4 10             	add    esp,0x10
c000d90d:	5b                   	pop    ebx
c000d90e:	5e                   	pop    esi
c000d90f:	5f                   	pop    edi
c000d910:	c3                   	ret    
c000d911:	90                   	nop

c000d912 <File::exists()>:
c000d912:	83 ec 0c             	sub    esp,0xc
c000d915:	31 c0                	xor    eax,eax
c000d917:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d91b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d922:	80 f9 19             	cmp    cl,0x19
c000d925:	77 24                	ja     c000d94b <File::exists()+0x39>
c000d927:	8b 0c 8d 40 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6dc0]
c000d92e:	85 c9                	test   ecx,ecx
c000d930:	74 19                	je     c000d94b <File::exists()+0x39>
c000d932:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d938:	85 c9                	test   ecx,ecx
c000d93a:	74 0f                	je     c000d94b <File::exists()+0x39>
c000d93c:	83 c2 0d             	add    edx,0xd
c000d93f:	50                   	push   eax
c000d940:	50                   	push   eax
c000d941:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d943:	52                   	push   edx
c000d944:	51                   	push   ecx
c000d945:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	83 c4 0c             	add    esp,0xc
c000d94e:	c3                   	ret    
c000d94f:	90                   	nop

c000d950 <File::stat(unsigned long long*, bool*)>:
c000d950:	56                   	push   esi
c000d951:	53                   	push   ebx
c000d952:	50                   	push   eax
c000d953:	b8 0b 00 00 00       	mov    eax,0xb
c000d958:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d95c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d960:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d967:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d96b:	80 f9 19             	cmp    cl,0x19
c000d96e:	77 3d                	ja     c000d9ad <File::stat(unsigned long long*, bool*)+0x5d>
c000d970:	8b 0c 8d 40 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6dc0]
c000d977:	85 c9                	test   ecx,ecx
c000d979:	74 32                	je     c000d9ad <File::stat(unsigned long long*, bool*)+0x5d>
c000d97b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d981:	85 c9                	test   ecx,ecx
c000d983:	74 28                	je     c000d9ad <File::stat(unsigned long long*, bool*)+0x5d>
c000d985:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d987:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d98b:	74 13                	je     c000d9a0 <File::stat(unsigned long long*, bool*)+0x50>
c000d98d:	83 ec 04             	sub    esp,0x4
c000d990:	56                   	push   esi
c000d991:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d997:	51                   	push   ecx
c000d998:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d99b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d99e:	eb 0a                	jmp    c000d9aa <File::stat(unsigned long long*, bool*)+0x5a>
c000d9a0:	53                   	push   ebx
c000d9a1:	83 c2 0d             	add    edx,0xd
c000d9a4:	56                   	push   esi
c000d9a5:	52                   	push   edx
c000d9a6:	51                   	push   ecx
c000d9a7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d9aa:	83 c4 10             	add    esp,0x10
c000d9ad:	5a                   	pop    edx
c000d9ae:	5b                   	pop    ebx
c000d9af:	5e                   	pop    esi
c000d9b0:	c3                   	ret    

c000d9b1 <Fs::setcwd(Process*, char*)>:
c000d9b1:	55                   	push   ebp
c000d9b2:	57                   	push   edi
c000d9b3:	56                   	push   esi
c000d9b4:	53                   	push   ebx
c000d9b5:	81 ec 20 02 00 00    	sub    esp,0x220
c000d9bb:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d9c2:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d9c8:	57                   	push   edi
c000d9c9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d9d0:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d9d4:	56                   	push   esi
c000d9d5:	e8 46 fa ff ff       	call   c000d420 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d9da:	89 34 24             	mov    DWORD PTR [esp],esi
c000d9dd:	e8 ce 2c ff ff       	call   c00006b0 <strlen>
c000d9e2:	83 c4 10             	add    esp,0x10
c000d9e5:	83 f8 02             	cmp    eax,0x2
c000d9e8:	77 15                	ja     c000d9ff <Fs::setcwd(Process*, char*)+0x4e>
c000d9ea:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d9ef:	83 eb 41             	sub    ebx,0x41
c000d9f2:	8b 04 9d 40 92 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6dc0]
c000d9f9:	85 c0                	test   eax,eax
c000d9fb:	75 1c                	jne    c000da19 <Fs::setcwd(Process*, char*)+0x68>
c000d9fd:	eb 4c                	jmp    c000da4b <Fs::setcwd(Process*, char*)+0x9a>
c000d9ff:	83 ec 0c             	sub    esp,0xc
c000da02:	56                   	push   esi
c000da03:	e8 a8 2c ff ff       	call   c00006b0 <strlen>
c000da08:	83 c4 10             	add    esp,0x10
c000da0b:	83 f8 03             	cmp    eax,0x3
c000da0e:	75 74                	jne    c000da84 <Fs::setcwd(Process*, char*)+0xd3>
c000da10:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000da15:	75 6d                	jne    c000da84 <Fs::setcwd(Process*, char*)+0xd3>
c000da17:	eb d1                	jmp    c000d9ea <Fs::setcwd(Process*, char*)+0x39>
c000da19:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000da20:	75 29                	jne    c000da4b <Fs::setcwd(Process*, char*)+0x9a>
c000da22:	83 ec 0c             	sub    esp,0xc
c000da25:	68 14 54 02 c0       	push   0xc0025414
c000da2a:	e8 30 f6 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000da2f:	5a                   	pop    edx
c000da30:	ff 34 9d 40 92 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6dc0]
c000da37:	e8 94 2e 00 00       	call   c00108d0 <LogicalDisk::mount()>
c000da3c:	c7 04 24 b9 77 02 c0 	mov    DWORD PTR [esp],0xc00277b9
c000da43:	e8 17 f6 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000da48:	83 c4 10             	add    esp,0x10
c000da4b:	b8 03 00 00 00       	mov    eax,0x3
c000da50:	83 fb 19             	cmp    ebx,0x19
c000da53:	0f 87 c6 00 00 00    	ja     c000db1f <Fs::setcwd(Process*, char*)+0x16e>
c000da59:	8b 14 9d 40 92 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6dc0]
c000da60:	b8 05 00 00 00       	mov    eax,0x5
c000da65:	85 d2                	test   edx,edx
c000da67:	0f 84 b2 00 00 00    	je     c000db1f <Fs::setcwd(Process*, char*)+0x16e>
c000da6d:	b8 06 00 00 00       	mov    eax,0x6
c000da72:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000da79:	0f 85 92 00 00 00    	jne    c000db11 <Fs::setcwd(Process*, char*)+0x160>
c000da7f:	e9 9b 00 00 00       	jmp    c000db1f <Fs::setcwd(Process*, char*)+0x16e>
c000da84:	83 ec 0c             	sub    esp,0xc
c000da87:	68 14 01 00 00       	push   0x114
c000da8c:	e8 e2 c2 ff ff       	call   c0009d73 <malloc>
c000da91:	83 c4 0c             	add    esp,0xc
c000da94:	89 c3                	mov    ebx,eax
c000da96:	55                   	push   ebp
c000da97:	56                   	push   esi
c000da98:	50                   	push   eax
c000da99:	e8 2c fb ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c000da9e:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000daa3:	83 c4 0c             	add    esp,0xc
c000daa6:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000daaa:	50                   	push   eax
c000daab:	8d 44 24 10          	lea    eax,[esp+0x10]
c000daaf:	50                   	push   eax
c000dab0:	53                   	push   ebx
c000dab1:	e8 9a fe ff ff       	call   c000d950 <File::stat(unsigned long long*, bool*)>
c000dab6:	83 c4 10             	add    esp,0x10
c000dab9:	83 f8 02             	cmp    eax,0x2
c000dabc:	74 04                	je     c000dac2 <Fs::setcwd(Process*, char*)+0x111>
c000dabe:	85 c0                	test   eax,eax
c000dac0:	74 1c                	je     c000dade <Fs::setcwd(Process*, char*)+0x12d>
c000dac2:	b8 01 00 00 00       	mov    eax,0x1
c000dac7:	85 db                	test   ebx,ebx
c000dac9:	74 54                	je     c000db1f <Fs::setcwd(Process*, char*)+0x16e>
c000dacb:	83 ec 0c             	sub    esp,0xc
c000dace:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dad0:	53                   	push   ebx
c000dad1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dad4:	83 c4 10             	add    esp,0x10
c000dad7:	b8 01 00 00 00       	mov    eax,0x1
c000dadc:	eb 41                	jmp    c000db1f <Fs::setcwd(Process*, char*)+0x16e>
c000dade:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000dae3:	75 1c                	jne    c000db01 <Fs::setcwd(Process*, char*)+0x150>
c000dae5:	b8 02 00 00 00       	mov    eax,0x2
c000daea:	85 db                	test   ebx,ebx
c000daec:	74 31                	je     c000db1f <Fs::setcwd(Process*, char*)+0x16e>
c000daee:	83 ec 0c             	sub    esp,0xc
c000daf1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000daf3:	53                   	push   ebx
c000daf4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000daf7:	83 c4 10             	add    esp,0x10
c000dafa:	b8 02 00 00 00       	mov    eax,0x2
c000daff:	eb 1e                	jmp    c000db1f <Fs::setcwd(Process*, char*)+0x16e>
c000db01:	85 db                	test   ebx,ebx
c000db03:	74 0c                	je     c000db11 <Fs::setcwd(Process*, char*)+0x160>
c000db05:	83 ec 0c             	sub    esp,0xc
c000db08:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db0a:	53                   	push   ebx
c000db0b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000db0e:	83 c4 10             	add    esp,0x10
c000db11:	50                   	push   eax
c000db12:	50                   	push   eax
c000db13:	56                   	push   esi
c000db14:	57                   	push   edi
c000db15:	e8 36 2c ff ff       	call   c0000750 <strcpy>
c000db1a:	83 c4 10             	add    esp,0x10
c000db1d:	31 c0                	xor    eax,eax
c000db1f:	81 c4 1c 02 00 00    	add    esp,0x21c
c000db25:	5b                   	pop    ebx
c000db26:	5e                   	pop    esi
c000db27:	5f                   	pop    edi
c000db28:	5d                   	pop    ebp
c000db29:	c3                   	ret    

c000db2a <Directory::Directory(char const*, Process*)>:
c000db2a:	83 ec 0c             	sub    esp,0xc
c000db2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db31:	83 ec 08             	sub    esp,0x8
c000db34:	6a 00                	push   0x0
c000db36:	50                   	push   eax
c000db37:	e8 ba dd ff ff       	call   c000b8f6 <UnixFile::UnixFile(int)>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	ba 1c 55 02 c0       	mov    edx,0xc002551c
c000db44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db48:	89 10                	mov    DWORD PTR [eax],edx
c000db4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000db4e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000db54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db58:	83 c0 0d             	add    eax,0xd
c000db5b:	83 ec 04             	sub    esp,0x4
c000db5e:	52                   	push   edx
c000db5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db63:	50                   	push   eax
c000db64:	e8 b7 f8 ff ff       	call   c000d420 <Fs::standardiseFiles(char*, char const*, char const*)>
c000db69:	83 c4 10             	add    esp,0x10
c000db6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db70:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000db73:	8d 50 bf             	lea    edx,[eax-0x41]
c000db76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db7a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000db80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db84:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000db88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db8c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db92:	0f b6 c0             	movzx  eax,al
c000db95:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c000db9c:	85 c0                	test   eax,eax
c000db9e:	74 5e                	je     c000dbfe <Directory::Directory(char const*, Process*)+0xd4>
c000dba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba4:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dbaa:	0f b6 c0             	movzx  eax,al
c000dbad:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c000dbb4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dbba:	85 c0                	test   eax,eax
c000dbbc:	75 40                	jne    c000dbfe <Directory::Directory(char const*, Process*)+0xd4>
c000dbbe:	83 ec 0c             	sub    esp,0xc
c000dbc1:	68 64 54 02 c0       	push   0xc0025464
c000dbc6:	e8 94 f4 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000dbcb:	83 c4 10             	add    esp,0x10
c000dbce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbd2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000dbd8:	0f b6 c0             	movzx  eax,al
c000dbdb:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c000dbe2:	83 ec 0c             	sub    esp,0xc
c000dbe5:	50                   	push   eax
c000dbe6:	e8 e5 2c 00 00       	call   c00108d0 <LogicalDisk::mount()>
c000dbeb:	83 c4 10             	add    esp,0x10
c000dbee:	83 ec 0c             	sub    esp,0xc
c000dbf1:	68 b9 77 02 c0       	push   0xc00277b9
c000dbf6:	e8 64 f4 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000dbfb:	83 c4 10             	add    esp,0x10
c000dbfe:	90                   	nop
c000dbff:	83 c4 0c             	add    esp,0xc
c000dc02:	c3                   	ret    
c000dc03:	90                   	nop

c000dc04 <Directory::open()>:
c000dc04:	53                   	push   ebx
c000dc05:	b8 0b 00 00 00       	mov    eax,0xb
c000dc0a:	83 ec 08             	sub    esp,0x8
c000dc0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc11:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000dc18:	80 fa 19             	cmp    dl,0x19
c000dc1b:	77 3d                	ja     c000dc5a <Directory::open()+0x56>
c000dc1d:	8b 14 95 40 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6dc0]
c000dc24:	85 d2                	test   edx,edx
c000dc26:	74 32                	je     c000dc5a <Directory::open()+0x56>
c000dc28:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000dc2e:	85 d2                	test   edx,edx
c000dc30:	74 28                	je     c000dc5a <Directory::open()+0x56>
c000dc32:	b8 06 00 00 00       	mov    eax,0x6
c000dc37:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dc3b:	75 1d                	jne    c000dc5a <Directory::open()+0x56>
c000dc3d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dc43:	50                   	push   eax
c000dc44:	8b 02                	mov    eax,DWORD PTR [edx]
c000dc46:	51                   	push   ecx
c000dc47:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dc4a:	51                   	push   ecx
c000dc4b:	52                   	push   edx
c000dc4c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dc4f:	83 c4 10             	add    esp,0x10
c000dc52:	85 c0                	test   eax,eax
c000dc54:	75 04                	jne    c000dc5a <Directory::open()+0x56>
c000dc56:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dc5a:	83 c4 08             	add    esp,0x8
c000dc5d:	5b                   	pop    ebx
c000dc5e:	c3                   	ret    
c000dc5f:	90                   	nop

c000dc60 <Directory::close()>:
c000dc60:	53                   	push   ebx
c000dc61:	b8 0b 00 00 00       	mov    eax,0xb
c000dc66:	83 ec 08             	sub    esp,0x8
c000dc69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dc6d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dc74:	80 fa 19             	cmp    dl,0x19
c000dc77:	77 41                	ja     c000dcba <Directory::close()+0x5a>
c000dc79:	8b 1c 95 40 92 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd6dc0]
c000dc80:	85 db                	test   ebx,ebx
c000dc82:	74 36                	je     c000dcba <Directory::close()+0x5a>
c000dc84:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dc8b:	74 2d                	je     c000dcba <Directory::close()+0x5a>
c000dc8d:	b8 05 00 00 00       	mov    eax,0x5
c000dc92:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dc96:	74 22                	je     c000dcba <Directory::close()+0x5a>
c000dc98:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dc9c:	8b 04 95 40 92 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6dc0]
c000dca3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dca9:	53                   	push   ebx
c000dcaa:	53                   	push   ebx
c000dcab:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcad:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dcb3:	50                   	push   eax
c000dcb4:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dcb7:	83 c4 10             	add    esp,0x10
c000dcba:	83 c4 08             	add    esp,0x8
c000dcbd:	5b                   	pop    ebx
c000dcbe:	c3                   	ret    
c000dcbf:	90                   	nop

c000dcc0 <Directory::unlink()>:
c000dcc0:	83 ec 0c             	sub    esp,0xc
c000dcc3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcc8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dccc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dcd3:	80 f9 19             	cmp    cl,0x19
c000dcd6:	77 2f                	ja     c000dd07 <Directory::unlink()+0x47>
c000dcd8:	8b 0c 8d 40 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6dc0]
c000dcdf:	85 c9                	test   ecx,ecx
c000dce1:	74 24                	je     c000dd07 <Directory::unlink()+0x47>
c000dce3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dce9:	85 c9                	test   ecx,ecx
c000dceb:	74 1a                	je     c000dd07 <Directory::unlink()+0x47>
c000dced:	b8 06 00 00 00       	mov    eax,0x6
c000dcf2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dcf6:	75 0f                	jne    c000dd07 <Directory::unlink()+0x47>
c000dcf8:	83 c2 0d             	add    edx,0xd
c000dcfb:	50                   	push   eax
c000dcfc:	50                   	push   eax
c000dcfd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcff:	52                   	push   edx
c000dd00:	51                   	push   ecx
c000dd01:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000dd04:	83 c4 10             	add    esp,0x10
c000dd07:	83 c4 0c             	add    esp,0xc
c000dd0a:	c3                   	ret    
c000dd0b:	90                   	nop

c000dd0c <Directory::rename(char const*)>:
c000dd0c:	83 ec 0c             	sub    esp,0xc
c000dd0f:	b8 0b 00 00 00       	mov    eax,0xb
c000dd14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd18:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd1f:	80 f9 19             	cmp    cl,0x19
c000dd22:	77 32                	ja     c000dd56 <Directory::rename(char const*)+0x4a>
c000dd24:	8b 0c 8d 40 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6dc0]
c000dd2b:	85 c9                	test   ecx,ecx
c000dd2d:	74 27                	je     c000dd56 <Directory::rename(char const*)+0x4a>
c000dd2f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd35:	85 c9                	test   ecx,ecx
c000dd37:	74 1d                	je     c000dd56 <Directory::rename(char const*)+0x4a>
c000dd39:	b8 06 00 00 00       	mov    eax,0x6
c000dd3e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dd42:	75 12                	jne    c000dd56 <Directory::rename(char const*)+0x4a>
c000dd44:	83 c2 0d             	add    edx,0xd
c000dd47:	50                   	push   eax
c000dd48:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd4e:	52                   	push   edx
c000dd4f:	51                   	push   ecx
c000dd50:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	83 c4 0c             	add    esp,0xc
c000dd59:	c3                   	ret    

c000dd5a <Directory::exists()>:
c000dd5a:	83 ec 0c             	sub    esp,0xc
c000dd5d:	31 c0                	xor    eax,eax
c000dd5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd63:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd6a:	80 f9 19             	cmp    cl,0x19
c000dd6d:	77 24                	ja     c000dd93 <Directory::exists()+0x39>
c000dd6f:	8b 0c 8d 40 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6dc0]
c000dd76:	85 c9                	test   ecx,ecx
c000dd78:	74 19                	je     c000dd93 <Directory::exists()+0x39>
c000dd7a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd80:	85 c9                	test   ecx,ecx
c000dd82:	74 0f                	je     c000dd93 <Directory::exists()+0x39>
c000dd84:	83 c2 0d             	add    edx,0xd
c000dd87:	50                   	push   eax
c000dd88:	50                   	push   eax
c000dd89:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd8b:	52                   	push   edx
c000dd8c:	51                   	push   ecx
c000dd8d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000dd90:	83 c4 10             	add    esp,0x10
c000dd93:	83 c4 0c             	add    esp,0xc
c000dd96:	c3                   	ret    
c000dd97:	90                   	nop

c000dd98 <Directory::read(dirent*)>:
c000dd98:	83 ec 1c             	sub    esp,0x1c
c000dd9b:	b8 0b 00 00 00       	mov    eax,0xb
c000dda0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dda4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ddab:	80 fa 19             	cmp    dl,0x19
c000ddae:	77 30                	ja     c000dde0 <Directory::read(dirent*)+0x48>
c000ddb0:	8b 14 95 40 92 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6dc0]
c000ddb7:	85 d2                	test   edx,edx
c000ddb9:	74 25                	je     c000dde0 <Directory::read(dirent*)+0x48>
c000ddbb:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000ddc2:	74 1c                	je     c000dde0 <Directory::read(dirent*)+0x48>
c000ddc4:	83 ec 0c             	sub    esp,0xc
c000ddc7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ddc9:	8d 54 24 18          	lea    edx,[esp+0x18]
c000ddcd:	52                   	push   edx
c000ddce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ddd2:	6a 00                	push   0x0
c000ddd4:	68 10 01 00 00       	push   0x110
c000ddd9:	51                   	push   ecx
c000ddda:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000dddd:	83 c4 20             	add    esp,0x20
c000dde0:	83 c4 1c             	add    esp,0x1c
c000dde3:	c3                   	ret    

c000dde4 <Directory::create()>:
c000dde4:	83 ec 0c             	sub    esp,0xc
c000dde7:	b8 0b 00 00 00       	mov    eax,0xb
c000ddec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ddf0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ddf7:	80 f9 19             	cmp    cl,0x19
c000ddfa:	77 2f                	ja     c000de2b <Directory::create()+0x47>
c000ddfc:	8b 0c 8d 40 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6dc0]
c000de03:	85 c9                	test   ecx,ecx
c000de05:	74 24                	je     c000de2b <Directory::create()+0x47>
c000de07:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000de0d:	85 c9                	test   ecx,ecx
c000de0f:	74 1a                	je     c000de2b <Directory::create()+0x47>
c000de11:	b8 06 00 00 00       	mov    eax,0x6
c000de16:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000de1a:	75 0f                	jne    c000de2b <Directory::create()+0x47>
c000de1c:	83 c2 0d             	add    edx,0xd
c000de1f:	50                   	push   eax
c000de20:	50                   	push   eax
c000de21:	8b 01                	mov    eax,DWORD PTR [ecx]
c000de23:	52                   	push   edx
c000de24:	51                   	push   ecx
c000de25:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000de28:	83 c4 10             	add    esp,0x10
c000de2b:	83 c4 0c             	add    esp,0xc
c000de2e:	c3                   	ret    
c000de2f:	90                   	nop

c000de30 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000de30:	b8 0a 00 00 00       	mov    eax,0xa
c000de35:	c3                   	ret    
c000de36:	66 90                	xchg   ax,ax

c000de38 <Bus::Bus(char const*)>:
c000de38:	83 ec 0c             	sub    esp,0xc
c000de3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de3f:	83 ec 08             	sub    esp,0x8
c000de42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de46:	50                   	push   eax
c000de47:	e8 8a 09 00 00       	call   c000e7d6 <Device::Device(char const*)>
c000de4c:	83 c4 10             	add    esp,0x10
c000de4f:	ba 38 55 02 c0       	mov    edx,0xc0025538
c000de54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de58:	89 10                	mov    DWORD PTR [eax],edx
c000de5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de5e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000de68:	90                   	nop
c000de69:	83 c4 0c             	add    esp,0xc
c000de6c:	c3                   	ret    
c000de6d:	90                   	nop
c000de6e:	66 90                	xchg   ax,ax

c000de70 <Bus::~Bus()>:
c000de70:	83 ec 0c             	sub    esp,0xc
c000de73:	ba 38 55 02 c0       	mov    edx,0xc0025538
c000de78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de7c:	89 10                	mov    DWORD PTR [eax],edx
c000de7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de82:	83 ec 0c             	sub    esp,0xc
c000de85:	50                   	push   eax
c000de86:	e8 15 06 00 00       	call   c000e4a0 <Device::~Device()>
c000de8b:	83 c4 10             	add    esp,0x10
c000de8e:	90                   	nop
c000de8f:	83 c4 0c             	add    esp,0xc
c000de92:	c3                   	ret    
c000de93:	90                   	nop

c000de94 <Bus::~Bus()>:
c000de94:	83 ec 0c             	sub    esp,0xc
c000de97:	83 ec 0c             	sub    esp,0xc
c000de9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de9e:	e8 cd ff ff ff       	call   c000de70 <Bus::~Bus()>
c000dea3:	83 c4 10             	add    esp,0x10
c000dea6:	83 ec 08             	sub    esp,0x8
c000dea9:	68 58 01 00 00       	push   0x158
c000deae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000deb2:	e8 c7 f0 ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c000deb7:	83 c4 10             	add    esp,0x10
c000deba:	83 c4 0c             	add    esp,0xc
c000debd:	c3                   	ret    
c000debe:	66 90                	xchg   ax,ax

c000dec0 <Buzzer::Buzzer(char const*)>:
c000dec0:	83 ec 0c             	sub    esp,0xc
c000dec3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dec7:	83 ec 08             	sub    esp,0x8
c000deca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dece:	50                   	push   eax
c000decf:	e8 02 09 00 00       	call   c000e7d6 <Device::Device(char const*)>
c000ded4:	83 c4 10             	add    esp,0x10
c000ded7:	ba 64 55 02 c0       	mov    edx,0xc0025564
c000dedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee0:	89 10                	mov    DWORD PTR [eax],edx
c000dee2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dee6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000def0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def4:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000defe:	90                   	nop
c000deff:	83 c4 0c             	add    esp,0xc
c000df02:	c3                   	ret    
c000df03:	90                   	nop

c000df04 <Buzzer::~Buzzer()>:
c000df04:	83 ec 0c             	sub    esp,0xc
c000df07:	ba 64 55 02 c0       	mov    edx,0xc0025564
c000df0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df10:	89 10                	mov    DWORD PTR [eax],edx
c000df12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df16:	83 ec 0c             	sub    esp,0xc
c000df19:	50                   	push   eax
c000df1a:	e8 81 05 00 00       	call   c000e4a0 <Device::~Device()>
c000df1f:	83 c4 10             	add    esp,0x10
c000df22:	90                   	nop
c000df23:	83 c4 0c             	add    esp,0xc
c000df26:	c3                   	ret    
c000df27:	90                   	nop

c000df28 <Buzzer::~Buzzer()>:
c000df28:	83 ec 0c             	sub    esp,0xc
c000df2b:	83 ec 0c             	sub    esp,0xc
c000df2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df32:	e8 cd ff ff ff       	call   c000df04 <Buzzer::~Buzzer()>
c000df37:	83 c4 10             	add    esp,0x10
c000df3a:	83 ec 08             	sub    esp,0x8
c000df3d:	68 5c 01 00 00       	push   0x15c
c000df42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df46:	e8 33 f0 ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c000df4b:	83 c4 10             	add    esp,0x10
c000df4e:	83 c4 0c             	add    esp,0xc
c000df51:	c3                   	ret    

c000df52 <Buzzer::stop()>:
c000df52:	83 ec 14             	sub    esp,0x14
c000df55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000df59:	8b 10                	mov    edx,DWORD PTR [eax]
c000df5b:	6a 00                	push   0x0
c000df5d:	50                   	push   eax
c000df5e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000df61:	83 c4 1c             	add    esp,0x1c
c000df64:	c3                   	ret    

c000df65 <beepThread(void*)>:
c000df65:	53                   	push   ebx
c000df66:	83 ec 08             	sub    esp,0x8
c000df69:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000df6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df72:	48                   	dec    eax
c000df73:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c000df78:	75 02                	jne    c000df7c <beepThread(void*)+0x17>
c000df7a:	fb                   	sti    
c000df7b:	90                   	nop
c000df7c:	83 ec 0c             	sub    esp,0xc
c000df7f:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000df86:	50                   	push   eax
c000df87:	e8 0c b3 00 00       	call   c0019298 <milliTenthSleep(unsigned int)>
c000df8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000df8f:	e8 be ff ff ff       	call   c000df52 <Buzzer::stop()>
c000df94:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000df9c:	83 c4 18             	add    esp,0x18
c000df9f:	5b                   	pop    ebx
c000dfa0:	e9 f3 b1 00 00       	jmp    c0019198 <blockTask(TaskState)>
c000dfa5:	90                   	nop

c000dfa6 <Buzzer::beep(int, int, bool)>:
c000dfa6:	57                   	push   edi
c000dfa7:	56                   	push   esi
c000dfa8:	53                   	push   ebx
c000dfa9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfad:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000dfb1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000dfb5:	50                   	push   eax
c000dfb6:	50                   	push   eax
c000dfb7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfbd:	53                   	push   ebx
c000dfbe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dfc1:	83 c4 10             	add    esp,0x10
c000dfc4:	89 f8                	mov    eax,edi
c000dfc6:	84 c0                	test   al,al
c000dfc8:	74 1e                	je     c000dfe8 <Buzzer::beep(int, int, bool)+0x42>
c000dfca:	83 ec 0c             	sub    esp,0xc
c000dfcd:	6b f6 0a             	imul   esi,esi,0xa
c000dfd0:	56                   	push   esi
c000dfd1:	e8 c2 b2 00 00       	call   c0019298 <milliTenthSleep(unsigned int)>
c000dfd6:	83 c4 10             	add    esp,0x10
c000dfd9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dfdd:	5b                   	pop    ebx
c000dfde:	5e                   	pop    esi
c000dfdf:	5f                   	pop    edi
c000dfe0:	e9 6d ff ff ff       	jmp    c000df52 <Buzzer::stop()>
c000dfe5:	8d 76 00             	lea    esi,[esi+0x0]
c000dfe8:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000dfee:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000dff3:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000dffb:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dfff:	c7 44 24 14 65 df 00 c0 	mov    DWORD PTR [esp+0x14],0xc000df65
c000e007:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e00b:	5b                   	pop    ebx
c000e00c:	5e                   	pop    esi
c000e00d:	5f                   	pop    edi
c000e00e:	e9 71 ad 00 00       	jmp    c0018d84 <Process::createThread(void (*)(void*), void*, int)>
c000e013:	90                   	nop

c000e014 <User::loadClockSettings(int)>:
c000e014:	53                   	push   ebx
c000e015:	83 ec 14             	sub    esp,0x14
c000e018:	68 14 01 00 00       	push   0x114
c000e01d:	e8 51 bd ff ff       	call   c0009d73 <malloc>
c000e022:	83 c4 0c             	add    esp,0xc
c000e025:	89 c3                	mov    ebx,eax
c000e027:	ff 35 d0 a1 02 c0    	push   DWORD PTR ds:0xc002a1d0
c000e02d:	68 8c 55 02 c0       	push   0xc002558c
c000e032:	50                   	push   eax
c000e033:	e8 92 f5 ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c000e038:	58                   	pop    eax
c000e039:	5a                   	pop    edx
c000e03a:	6a 01                	push   0x1
c000e03c:	53                   	push   ebx
c000e03d:	e8 62 f6 ff ff       	call   c000d6a4 <File::open(FileOpenMode)>
c000e042:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e045:	e8 b8 f6 ff ff       	call   c000d702 <File::close()>
c000e04a:	83 c4 10             	add    esp,0x10
c000e04d:	85 db                	test   ebx,ebx
c000e04f:	74 0f                	je     c000e060 <User::loadClockSettings(int)+0x4c>
c000e051:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e053:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e057:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e05a:	83 c4 08             	add    esp,0x8
c000e05d:	5b                   	pop    ebx
c000e05e:	ff e0                	jmp    eax
c000e060:	83 c4 08             	add    esp,0x8
c000e063:	5b                   	pop    ebx
c000e064:	c3                   	ret    
c000e065:	90                   	nop

c000e066 <Clock::Clock(char const*)>:
c000e066:	83 ec 0c             	sub    esp,0xc
c000e069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e06d:	83 ec 08             	sub    esp,0x8
c000e070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e074:	50                   	push   eax
c000e075:	e8 5c 07 00 00       	call   c000e7d6 <Device::Device(char const*)>
c000e07a:	83 c4 10             	add    esp,0x10
c000e07d:	ba b4 55 02 c0       	mov    edx,0xc00255b4
c000e082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e086:	89 10                	mov    DWORD PTR [eax],edx
c000e088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e08c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000e096:	90                   	nop
c000e097:	83 c4 0c             	add    esp,0xc
c000e09a:	c3                   	ret    
c000e09b:	90                   	nop

c000e09c <Clock::~Clock()>:
c000e09c:	83 ec 0c             	sub    esp,0xc
c000e09f:	ba b4 55 02 c0       	mov    edx,0xc00255b4
c000e0a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a8:	89 10                	mov    DWORD PTR [eax],edx
c000e0aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0ae:	83 ec 0c             	sub    esp,0xc
c000e0b1:	50                   	push   eax
c000e0b2:	e8 e9 03 00 00       	call   c000e4a0 <Device::~Device()>
c000e0b7:	83 c4 10             	add    esp,0x10
c000e0ba:	90                   	nop
c000e0bb:	83 c4 0c             	add    esp,0xc
c000e0be:	c3                   	ret    
c000e0bf:	90                   	nop

c000e0c0 <Clock::~Clock()>:
c000e0c0:	83 ec 0c             	sub    esp,0xc
c000e0c3:	83 ec 0c             	sub    esp,0xc
c000e0c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0ca:	e8 cd ff ff ff       	call   c000e09c <Clock::~Clock()>
c000e0cf:	83 c4 10             	add    esp,0x10
c000e0d2:	83 ec 08             	sub    esp,0x8
c000e0d5:	68 58 01 00 00       	push   0x158
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 9b ee ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	83 c4 0c             	add    esp,0xc
c000e0e9:	c3                   	ret    

c000e0ea <Clock::timeInSecondsLocal()>:
c000e0ea:	53                   	push   ebx
c000e0eb:	83 ec 14             	sub    esp,0x14
c000e0ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e0f2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e0f4:	50                   	push   eax
c000e0f5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e0f8:	0f b6 0d bc 8d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028dbc
c000e0ff:	03 0d c0 8d 02 c0    	add    ecx,DWORD PTR ds:0xc0028dc0
c000e105:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e10b:	89 cb                	mov    ebx,ecx
c000e10d:	c1 fb 1f             	sar    ebx,0x1f
c000e110:	01 c8                	add    eax,ecx
c000e112:	11 da                	adc    edx,ebx
c000e114:	83 c4 10             	add    esp,0x10
c000e117:	31 c9                	xor    ecx,ecx
c000e119:	80 3d bd 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028dbd,0x0
c000e120:	74 05                	je     c000e127 <Clock::timeInSecondsLocal()+0x3d>
c000e122:	b9 08 07 00 00       	mov    ecx,0x708
c000e127:	31 db                	xor    ebx,ebx
c000e129:	01 c8                	add    eax,ecx
c000e12b:	11 da                	adc    edx,ebx
c000e12d:	83 c4 08             	add    esp,0x8
c000e130:	5b                   	pop    ebx
c000e131:	c3                   	ret    

c000e132 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000e132:	57                   	push   edi
c000e133:	56                   	push   esi
c000e134:	53                   	push   ebx
c000e135:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e139:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e13d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e13f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e143:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000e146:	0f b6 05 bc 8d 02 c0 	movzx  eax,BYTE PTR ds:0xc0028dbc
c000e14d:	03 05 c0 8d 02 c0    	add    eax,DWORD PTR ds:0xc0028dc0
c000e153:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000e159:	99                   	cdq    
c000e15a:	29 c6                	sub    esi,eax
c000e15c:	19 d7                	sbb    edi,edx
c000e15e:	89 f0                	mov    eax,esi
c000e160:	89 fa                	mov    edx,edi
c000e162:	31 f6                	xor    esi,esi
c000e164:	80 3d bd 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028dbd,0x0
c000e16b:	74 05                	je     c000e172 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e16d:	be 08 07 00 00       	mov    esi,0x708
c000e172:	31 ff                	xor    edi,edi
c000e174:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e178:	29 f0                	sub    eax,esi
c000e17a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e17e:	19 fa                	sbb    edx,edi
c000e180:	89 d8                	mov    eax,ebx
c000e182:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e186:	5b                   	pop    ebx
c000e187:	5e                   	pop    esi
c000e188:	5f                   	pop    edi
c000e189:	ff e0                	jmp    eax

c000e18b <datetimeToSeconds(datetime_t)>:
c000e18b:	55                   	push   ebp
c000e18c:	57                   	push   edi
c000e18d:	56                   	push   esi
c000e18e:	53                   	push   ebx
c000e18f:	83 ec 14             	sub    esp,0x14
c000e192:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e196:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e19a:	89 d3                	mov    ebx,edx
c000e19c:	0f b6 c6             	movzx  eax,dh
c000e19f:	c1 eb 10             	shr    ebx,0x10
c000e1a2:	48                   	dec    eax
c000e1a3:	66 81 eb 6c 07       	sub    bx,0x76c
c000e1a8:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e1ac:	0f b6 f5             	movzx  esi,ch
c000e1af:	89 cf                	mov    edi,ecx
c000e1b1:	6b f6 3c             	imul   esi,esi,0x3c
c000e1b4:	c1 ef 10             	shr    edi,0x10
c000e1b7:	0f b6 c9             	movzx  ecx,cl
c000e1ba:	89 f8                	mov    eax,edi
c000e1bc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e1c2:	0f b6 f8             	movzx  edi,al
c000e1c5:	0f b6 d2             	movzx  edx,dl
c000e1c8:	01 fe                	add    esi,edi
c000e1ca:	01 f1                	add    ecx,esi
c000e1cc:	0f b7 f3             	movzx  esi,bx
c000e1cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e1d3:	c1 f9 1f             	sar    ecx,0x1f
c000e1d6:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e1db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e1df:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e1e4:	8b 0c 8d 00 56 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdaa00]
c000e1eb:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e1ef:	76 29                	jbe    c000e21a <datetimeToSeconds(datetime_t)+0x8f>
c000e1f1:	f6 c3 03             	test   bl,0x3
c000e1f4:	75 24                	jne    c000e21a <datetimeToSeconds(datetime_t)+0x8f>
c000e1f6:	31 d2                	xor    edx,edx
c000e1f8:	bf 64 00 00 00       	mov    edi,0x64
c000e1fd:	89 d8                	mov    eax,ebx
c000e1ff:	66 f7 f7             	div    di
c000e202:	66 85 d2             	test   dx,dx
c000e205:	75 12                	jne    c000e219 <datetimeToSeconds(datetime_t)+0x8e>
c000e207:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e20d:	bf 90 01 00 00       	mov    edi,0x190
c000e212:	99                   	cdq    
c000e213:	f7 ff                	idiv   edi
c000e215:	85 d2                	test   edx,edx
c000e217:	75 01                	jne    c000e21a <datetimeToSeconds(datetime_t)+0x8f>
c000e219:	41                   	inc    ecx
c000e21a:	66 83 fb 46          	cmp    bx,0x46
c000e21e:	76 45                	jbe    c000e265 <datetimeToSeconds(datetime_t)+0xda>
c000e220:	bb 46 00 00 00       	mov    ebx,0x46
c000e225:	bf 64 00 00 00       	mov    edi,0x64
c000e22a:	bd 90 01 00 00       	mov    ebp,0x190
c000e22f:	b8 6d 01 00 00       	mov    eax,0x16d
c000e234:	f6 c3 03             	test   bl,0x3
c000e237:	75 23                	jne    c000e25c <datetimeToSeconds(datetime_t)+0xd1>
c000e239:	89 d8                	mov    eax,ebx
c000e23b:	99                   	cdq    
c000e23c:	f7 ff                	idiv   edi
c000e23e:	b8 6e 01 00 00       	mov    eax,0x16e
c000e243:	85 d2                	test   edx,edx
c000e245:	75 15                	jne    c000e25c <datetimeToSeconds(datetime_t)+0xd1>
c000e247:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e24d:	99                   	cdq    
c000e24e:	f7 fd                	idiv   ebp
c000e250:	83 fa 01             	cmp    edx,0x1
c000e253:	19 c0                	sbb    eax,eax
c000e255:	f7 d0                	not    eax
c000e257:	05 6e 01 00 00       	add    eax,0x16e
c000e25c:	01 c1                	add    ecx,eax
c000e25e:	43                   	inc    ebx
c000e25f:	39 f3                	cmp    ebx,esi
c000e261:	7c cc                	jl     c000e22f <datetimeToSeconds(datetime_t)+0xa4>
c000e263:	eb 35                	jmp    c000e29a <datetimeToSeconds(datetime_t)+0x10f>
c000e265:	74 33                	je     c000e29a <datetimeToSeconds(datetime_t)+0x10f>
c000e267:	b8 45 00 00 00       	mov    eax,0x45
c000e26c:	89 c2                	mov    edx,eax
c000e26e:	83 e2 03             	and    edx,0x3
c000e271:	39 f0                	cmp    eax,esi
c000e273:	7e 0f                	jle    c000e284 <datetimeToSeconds(datetime_t)+0xf9>
c000e275:	83 fa 01             	cmp    edx,0x1
c000e278:	19 d2                	sbb    edx,edx
c000e27a:	48                   	dec    eax
c000e27b:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e282:	eb e8                	jmp    c000e26c <datetimeToSeconds(datetime_t)+0xe1>
c000e284:	b8 6d 01 00 00       	mov    eax,0x16d
c000e289:	85 d2                	test   edx,edx
c000e28b:	75 0b                	jne    c000e298 <datetimeToSeconds(datetime_t)+0x10d>
c000e28d:	66 83 fb 01          	cmp    bx,0x1
c000e291:	19 c0                	sbb    eax,eax
c000e293:	05 6e 01 00 00       	add    eax,0x16e
c000e298:	29 c1                	sub    ecx,eax
c000e29a:	b8 80 51 01 00       	mov    eax,0x15180
c000e29f:	f7 e9                	imul   ecx
c000e2a1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e2a5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e2a9:	83 c4 14             	add    esp,0x14
c000e2ac:	5b                   	pop    ebx
c000e2ad:	5e                   	pop    esi
c000e2ae:	5f                   	pop    edi
c000e2af:	5d                   	pop    ebp
c000e2b0:	c3                   	ret    
c000e2b1:	90                   	nop

c000e2b2 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e2b2:	57                   	push   edi
c000e2b3:	56                   	push   esi
c000e2b4:	53                   	push   ebx
c000e2b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2b9:	8b 06                	mov    eax,DWORD PTR [esi]
c000e2bb:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e2be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2c6:	e8 c0 fe ff ff       	call   c000e18b <datetimeToSeconds(datetime_t)>
c000e2cb:	59                   	pop    ecx
c000e2cc:	0f b6 0d bc 8d 02 c0 	movzx  ecx,BYTE PTR ds:0xc0028dbc
c000e2d3:	5b                   	pop    ebx
c000e2d4:	03 0d c0 8d 02 c0    	add    ecx,DWORD PTR ds:0xc0028dc0
c000e2da:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e2e0:	89 cb                	mov    ebx,ecx
c000e2e2:	c1 fb 1f             	sar    ebx,0x1f
c000e2e5:	29 c8                	sub    eax,ecx
c000e2e7:	19 da                	sbb    edx,ebx
c000e2e9:	31 c9                	xor    ecx,ecx
c000e2eb:	80 3d bd 8d 02 c0 00 	cmp    BYTE PTR ds:0xc0028dbd,0x0
c000e2f2:	74 05                	je     c000e2f9 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e2f4:	b9 08 07 00 00       	mov    ecx,0x708
c000e2f9:	31 db                	xor    ebx,ebx
c000e2fb:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e2ff:	29 c8                	sub    eax,ecx
c000e301:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e305:	19 da                	sbb    edx,ebx
c000e307:	89 f8                	mov    eax,edi
c000e309:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e30d:	5b                   	pop    ebx
c000e30e:	5e                   	pop    esi
c000e30f:	5f                   	pop    edi
c000e310:	ff e0                	jmp    eax

c000e312 <secondsToDatetime(unsigned long long)>:
c000e312:	55                   	push   ebp
c000e313:	57                   	push   edi
c000e314:	56                   	push   esi
c000e315:	53                   	push   ebx
c000e316:	83 ec 1c             	sub    esp,0x1c
c000e319:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e31d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e321:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e325:	6a 00                	push   0x0
c000e327:	68 80 51 01 00       	push   0x15180
c000e32c:	55                   	push   ebp
c000e32d:	57                   	push   edi
c000e32e:	e8 5d 4d 01 00       	call   c0023090 <__udivdi3>
c000e333:	83 c4 10             	add    esp,0x10
c000e336:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e33c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e340:	6a 00                	push   0x0
c000e342:	68 80 51 01 00       	push   0x15180
c000e347:	55                   	push   ebp
c000e348:	57                   	push   edi
c000e349:	bf 10 0e 00 00       	mov    edi,0xe10
c000e34e:	e8 3d 4e 01 00       	call   c0023190 <__umoddi3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	99                   	cdq    
c000e357:	f7 ff                	idiv   edi
c000e359:	bf 3c 00 00 00       	mov    edi,0x3c
c000e35e:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e361:	89 d0                	mov    eax,edx
c000e363:	99                   	cdq    
c000e364:	f7 ff                	idiv   edi
c000e366:	85 db                	test   ebx,ebx
c000e368:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e36b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e36e:	79 11                	jns    c000e381 <secondsToDatetime(unsigned long long)+0x6f>
c000e370:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e374:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e37a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e37f:	eb 07                	jmp    c000e388 <secondsToDatetime(unsigned long long)+0x76>
c000e381:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e386:	89 d8                	mov    eax,ebx
c000e388:	bf b4 05 00 00       	mov    edi,0x5b4
c000e38d:	99                   	cdq    
c000e38e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e393:	f7 f9                	idiv   ecx
c000e395:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e39a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e39e:	31 d2                	xor    edx,edx
c000e3a0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e3a8:	01 c3                	add    ebx,eax
c000e3aa:	89 d8                	mov    eax,ebx
c000e3ac:	f7 f1                	div    ecx
c000e3ae:	31 d2                	xor    edx,edx
c000e3b0:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e3b3:	89 d8                	mov    eax,ebx
c000e3b5:	f7 f7                	div    edi
c000e3b7:	31 d2                	xor    edx,edx
c000e3b9:	29 c1                	sub    ecx,eax
c000e3bb:	89 d8                	mov    eax,ebx
c000e3bd:	f7 f5                	div    ebp
c000e3bf:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e3c4:	29 c1                	sub    ecx,eax
c000e3c6:	31 d2                	xor    edx,edx
c000e3c8:	89 c8                	mov    eax,ecx
c000e3ca:	f7 f5                	div    ebp
c000e3cc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e3d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e3d5:	31 d2                	xor    edx,edx
c000e3d7:	89 c8                	mov    eax,ecx
c000e3d9:	f7 f5                	div    ebp
c000e3db:	31 d2                	xor    edx,edx
c000e3dd:	01 c3                	add    ebx,eax
c000e3df:	89 c8                	mov    eax,ecx
c000e3e1:	f7 f7                	div    edi
c000e3e3:	bf 99 00 00 00       	mov    edi,0x99
c000e3e8:	29 c3                	sub    ebx,eax
c000e3ea:	31 d2                	xor    edx,edx
c000e3ec:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e3f4:	29 c3                	sub    ebx,eax
c000e3f6:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e3f9:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e3fc:	bb 05 00 00 00       	mov    ebx,0x5
c000e401:	83 c1 02             	add    ecx,0x2
c000e404:	89 c8                	mov    eax,ecx
c000e406:	f7 f7                	div    edi
c000e408:	31 d2                	xor    edx,edx
c000e40a:	89 c7                	mov    edi,eax
c000e40c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e412:	83 c0 02             	add    eax,0x2
c000e415:	f7 f3                	div    ebx
c000e417:	89 eb                	mov    ebx,ebp
c000e419:	29 c3                	sub    ebx,eax
c000e41b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e421:	88 1e                	mov    BYTE PTR [esi],bl
c000e423:	19 c0                	sbb    eax,eax
c000e425:	31 d2                	xor    edx,edx
c000e427:	83 e0 0c             	and    eax,0xc
c000e42a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e42e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e436:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e43a:	83 f9 01             	cmp    ecx,0x1
c000e43d:	0f 96 c2             	setbe  dl
c000e440:	41                   	inc    ecx
c000e441:	01 d0                	add    eax,edx
c000e443:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e446:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e44a:	83 c4 1c             	add    esp,0x1c
c000e44d:	89 f0                	mov    eax,esi
c000e44f:	5b                   	pop    ebx
c000e450:	5e                   	pop    esi
c000e451:	5f                   	pop    edi
c000e452:	5d                   	pop    ebp
c000e453:	c2 04 00             	ret    0x4

c000e456 <Clock::timeInDatetimeLocal()>:
c000e456:	53                   	push   ebx
c000e457:	83 ec 14             	sub    esp,0x14
c000e45a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e45e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e462:	e8 83 fc ff ff       	call   c000e0ea <Clock::timeInSecondsLocal()>
c000e467:	83 c4 0c             	add    esp,0xc
c000e46a:	52                   	push   edx
c000e46b:	50                   	push   eax
c000e46c:	53                   	push   ebx
c000e46d:	e8 a0 fe ff ff       	call   c000e312 <secondsToDatetime(unsigned long long)>
c000e472:	89 d8                	mov    eax,ebx
c000e474:	83 c4 14             	add    esp,0x14
c000e477:	5b                   	pop    ebx
c000e478:	c2 04 00             	ret    0x4
c000e47b:	90                   	nop

c000e47c <Device::hibernate()>:
c000e47c:	c3                   	ret    
c000e47d:	90                   	nop

c000e47e <Device::wake()>:
c000e47e:	c3                   	ret    
c000e47f:	90                   	nop

c000e480 <Device::detect()>:
c000e480:	c3                   	ret    
c000e481:	90                   	nop

c000e482 <Device::disableLegacy()>:
c000e482:	c3                   	ret    
c000e483:	90                   	nop

c000e484 <Device::powerSaving(PowerSavingLevel)>:
c000e484:	c3                   	ret    
c000e485:	90                   	nop

c000e486 <DriverlessDevice::close(int, int, void*)>:
c000e486:	31 c0                	xor    eax,eax
c000e488:	c3                   	ret    
c000e489:	90                   	nop

c000e48a <DriverlessDevice::detect()>:
c000e48a:	c3                   	ret    
c000e48b:	90                   	nop

c000e48c <DriverlessDevice::open(int, int, void*)>:
c000e48c:	83 ec 18             	sub    esp,0x18
c000e48f:	68 30 56 02 c0       	push   0xc0025630
c000e494:	e8 98 6c 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000e499:	83 c8 ff             	or     eax,0xffffffff
c000e49c:	83 c4 1c             	add    esp,0x1c
c000e49f:	c3                   	ret    

c000e4a0 <Device::~Device()>:
c000e4a0:	ba 90 56 02 c0       	mov    edx,0xc0025690
c000e4a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4a9:	89 10                	mov    DWORD PTR [eax],edx
c000e4ab:	90                   	nop
c000e4ac:	c3                   	ret    
c000e4ad:	90                   	nop

c000e4ae <Device::~Device()>:
c000e4ae:	83 ec 0c             	sub    esp,0xc
c000e4b1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e4b5:	e8 e6 ff ff ff       	call   c000e4a0 <Device::~Device()>
c000e4ba:	83 c4 04             	add    esp,0x4
c000e4bd:	83 ec 08             	sub    esp,0x8
c000e4c0:	68 58 01 00 00       	push   0x158
c000e4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4c9:	e8 b0 ea ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c000e4ce:	83 c4 10             	add    esp,0x10
c000e4d1:	83 c4 0c             	add    esp,0xc
c000e4d4:	c3                   	ret    
c000e4d5:	90                   	nop

c000e4d6 <Device::findAndLoadDriver()>:
c000e4d6:	c7 44 24 04 4e 56 02 c0 	mov    DWORD PTR [esp+0x4],0xc002564e
c000e4de:	e9 7c eb ff ff       	jmp    c000d05f <Dbg::kprintf(char const*, ...)>
c000e4e3:	90                   	nop

c000e4e4 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e4e4:	57                   	push   edi
c000e4e5:	b9 09 00 00 00       	mov    ecx,0x9
c000e4ea:	56                   	push   esi
c000e4eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e4ef:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e4f3:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e4fd:	81 c7 18 01 00 00    	add    edi,0x118
c000e503:	fc                   	cld    
c000e504:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e506:	5e                   	pop    esi
c000e507:	5f                   	pop    edi
c000e508:	c3                   	ret    
c000e509:	90                   	nop

c000e50a <Device::preOpenACPI(void*, char*, char*)>:
c000e50a:	57                   	push   edi
c000e50b:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e510:	56                   	push   esi
c000e511:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e515:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e519:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e523:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e529:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e52f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e533:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e535:	b9 0e 00 00 00       	mov    ecx,0xe
c000e53a:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e540:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e544:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e546:	5e                   	pop    esi
c000e547:	5f                   	pop    edi
c000e548:	c3                   	ret    
c000e549:	90                   	nop

c000e54a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e54a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e54e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e553:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e55a:	75 0b                	jne    c000e567 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e55c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e55e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e562:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e565:	eb 1e                	jmp    c000e585 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e567:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000e56c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e572:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e578:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e57a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e57e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e582:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e585:	ff e0                	jmp    eax
c000e587:	90                   	nop

c000e588 <Device::getParent()>:
c000e588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e58c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e592:	c3                   	ret    
c000e593:	90                   	nop

c000e594 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e598:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e59d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e5a4:	75 0b                	jne    c000e5b1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e5a6:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5a8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e5ac:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e5af:	eb 1e                	jmp    c000e5cf <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e5b1:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000e5b6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e5bc:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e5c2:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e5c4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e5c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5cc:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e5cf:	ff e0                	jmp    eax
c000e5d1:	90                   	nop

c000e5d2 <Device::addChild(Device*)>:
c000e5d2:	53                   	push   ebx
c000e5d3:	83 ec 08             	sub    esp,0x8
c000e5d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e5de:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e5e4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e5ea:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e5ec:	85 d2                	test   edx,edx
c000e5ee:	74 04                	je     c000e5f4 <Device::addChild(Device*)+0x22>
c000e5f0:	89 d3                	mov    ebx,edx
c000e5f2:	eb f6                	jmp    c000e5ea <Device::addChild(Device*)+0x18>
c000e5f4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e5f7:	83 ec 0c             	sub    esp,0xc
c000e5fa:	6a 08                	push   0x8
c000e5fc:	e8 72 b7 ff ff       	call   c0009d73 <malloc>
c000e601:	89 03                	mov    DWORD PTR [ebx],eax
c000e603:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e609:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e610:	83 c4 18             	add    esp,0x18
c000e613:	5b                   	pop    ebx
c000e614:	c3                   	ret    
c000e615:	90                   	nop

c000e616 <Device::removeAllChildren()>:
c000e616:	56                   	push   esi
c000e617:	53                   	push   ebx
c000e618:	52                   	push   edx
c000e619:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e61d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e623:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e626:	74 17                	je     c000e63f <Device::removeAllChildren()+0x29>
c000e628:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e62b:	85 c0                	test   eax,eax
c000e62d:	74 0c                	je     c000e63b <Device::removeAllChildren()+0x25>
c000e62f:	83 ec 0c             	sub    esp,0xc
c000e632:	8b 10                	mov    edx,DWORD PTR [eax]
c000e634:	50                   	push   eax
c000e635:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e638:	83 c4 10             	add    esp,0x10
c000e63b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e63d:	eb e4                	jmp    c000e623 <Device::removeAllChildren()+0xd>
c000e63f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e645:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e64b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e651:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e658:	58                   	pop    eax
c000e659:	5b                   	pop    ebx
c000e65a:	5e                   	pop    esi
c000e65b:	c3                   	ret    

c000e65c <Device::hibernateAll()>:
c000e65c:	53                   	push   ebx
c000e65d:	83 ec 14             	sub    esp,0x14
c000e660:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e664:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e666:	53                   	push   ebx
c000e667:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e66a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e670:	83 c4 10             	add    esp,0x10
c000e673:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e676:	74 0f                	je     c000e687 <Device::hibernateAll()+0x2b>
c000e678:	83 ec 0c             	sub    esp,0xc
c000e67b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e67e:	e8 d9 ff ff ff       	call   c000e65c <Device::hibernateAll()>
c000e683:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e685:	eb e9                	jmp    c000e670 <Device::hibernateAll()+0x14>
c000e687:	83 c4 08             	add    esp,0x8
c000e68a:	5b                   	pop    ebx
c000e68b:	c3                   	ret    

c000e68c <Device::wakeAll()>:
c000e68c:	53                   	push   ebx
c000e68d:	83 ec 14             	sub    esp,0x14
c000e690:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e694:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e696:	53                   	push   ebx
c000e697:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e69a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6a0:	83 c4 10             	add    esp,0x10
c000e6a3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6a6:	74 0f                	je     c000e6b7 <Device::wakeAll()+0x2b>
c000e6a8:	83 ec 0c             	sub    esp,0xc
c000e6ab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6ae:	e8 d9 ff ff ff       	call   c000e68c <Device::wakeAll()>
c000e6b3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6b5:	eb e9                	jmp    c000e6a0 <Device::wakeAll()+0x14>
c000e6b7:	83 c4 08             	add    esp,0x8
c000e6ba:	5b                   	pop    ebx
c000e6bb:	c3                   	ret    

c000e6bc <Device::detectAll()>:
c000e6bc:	53                   	push   ebx
c000e6bd:	83 ec 14             	sub    esp,0x14
c000e6c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6c6:	53                   	push   ebx
c000e6c7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e6ca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e6d0:	83 c4 10             	add    esp,0x10
c000e6d3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e6d6:	74 0f                	je     c000e6e7 <Device::detectAll()+0x2b>
c000e6d8:	83 ec 0c             	sub    esp,0xc
c000e6db:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e6de:	e8 d9 ff ff ff       	call   c000e6bc <Device::detectAll()>
c000e6e3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e6e5:	eb e9                	jmp    c000e6d0 <Device::detectAll()+0x14>
c000e6e7:	83 c4 08             	add    esp,0x8
c000e6ea:	5b                   	pop    ebx
c000e6eb:	c3                   	ret    

c000e6ec <Device::disableLegacyAll()>:
c000e6ec:	53                   	push   ebx
c000e6ed:	83 ec 14             	sub    esp,0x14
c000e6f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e6f4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6f6:	53                   	push   ebx
c000e6f7:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e6fa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e700:	83 c4 10             	add    esp,0x10
c000e703:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e706:	74 0f                	je     c000e717 <Device::disableLegacyAll()+0x2b>
c000e708:	83 ec 0c             	sub    esp,0xc
c000e70b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e70e:	e8 d9 ff ff ff       	call   c000e6ec <Device::disableLegacyAll()>
c000e713:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e715:	eb e9                	jmp    c000e700 <Device::disableLegacyAll()+0x14>
c000e717:	83 c4 08             	add    esp,0x8
c000e71a:	5b                   	pop    ebx
c000e71b:	c3                   	ret    

c000e71c <Device::loadDriversForAll()>:
c000e71c:	53                   	push   ebx
c000e71d:	83 ec 08             	sub    esp,0x8
c000e720:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e724:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e72b:	75 0c                	jne    c000e739 <Device::loadDriversForAll()+0x1d>
c000e72d:	83 ec 0c             	sub    esp,0xc
c000e730:	53                   	push   ebx
c000e731:	e8 a0 fd ff ff       	call   c000e4d6 <Device::findAndLoadDriver()>
c000e736:	83 c4 10             	add    esp,0x10
c000e739:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e73f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e742:	74 12                	je     c000e756 <Device::loadDriversForAll()+0x3a>
c000e744:	83 ec 0c             	sub    esp,0xc
c000e747:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e74a:	e8 cd ff ff ff       	call   c000e71c <Device::loadDriversForAll()>
c000e74f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e751:	83 c4 10             	add    esp,0x10
c000e754:	eb e9                	jmp    c000e73f <Device::loadDriversForAll()+0x23>
c000e756:	83 c4 08             	add    esp,0x8
c000e759:	5b                   	pop    ebx
c000e75a:	c3                   	ret    
c000e75b:	90                   	nop

c000e75c <Device::closeAll()>:
c000e75c:	53                   	push   ebx
c000e75d:	83 ec 08             	sub    esp,0x8
c000e760:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e764:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e766:	6a 00                	push   0x0
c000e768:	6a 00                	push   0x0
c000e76a:	6a 00                	push   0x0
c000e76c:	53                   	push   ebx
c000e76d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e770:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e776:	83 c4 10             	add    esp,0x10
c000e779:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e77c:	74 0f                	je     c000e78d <Device::closeAll()+0x31>
c000e77e:	83 ec 0c             	sub    esp,0xc
c000e781:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e784:	e8 d3 ff ff ff       	call   c000e75c <Device::closeAll()>
c000e789:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e78b:	eb e9                	jmp    c000e776 <Device::closeAll()+0x1a>
c000e78d:	83 c4 08             	add    esp,0x8
c000e790:	5b                   	pop    ebx
c000e791:	c3                   	ret    

c000e792 <Device::powerSavingAll(PowerSavingLevel)>:
c000e792:	56                   	push   esi
c000e793:	53                   	push   ebx
c000e794:	83 ec 0c             	sub    esp,0xc
c000e797:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e79b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e79f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e7a1:	56                   	push   esi
c000e7a2:	53                   	push   ebx
c000e7a3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e7a6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e7ac:	83 c4 10             	add    esp,0x10
c000e7af:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e7b2:	74 0f                	je     c000e7c3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e7b4:	52                   	push   edx
c000e7b5:	52                   	push   edx
c000e7b6:	56                   	push   esi
c000e7b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7ba:	e8 d3 ff ff ff       	call   c000e792 <Device::powerSavingAll(PowerSavingLevel)>
c000e7bf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7c1:	eb e9                	jmp    c000e7ac <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e7c3:	58                   	pop    eax
c000e7c4:	5b                   	pop    ebx
c000e7c5:	5e                   	pop    esi
c000e7c6:	c3                   	ret    
c000e7c7:	90                   	nop

c000e7c8 <Device::setName(char const*)>:
c000e7c8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e7d0:	e9 7b 1f ff ff       	jmp    c0000750 <strcpy>
c000e7d5:	90                   	nop

c000e7d6 <Device::Device(char const*)>:
c000e7d6:	83 ec 1c             	sub    esp,0x1c
c000e7d9:	ba 90 56 02 c0       	mov    edx,0xc0025690
c000e7de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7e2:	89 10                	mov    DWORD PTR [eax],edx
c000e7e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7e8:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e7f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7f6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e804:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e80e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e812:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e81c:	83 ec 08             	sub    esp,0x8
c000e81f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e823:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e827:	e8 9c ff ff ff       	call   c000e7c8 <Device::setName(char const*)>
c000e82c:	83 c4 10             	add    esp,0x10
c000e82f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e837:	83 ec 0c             	sub    esp,0xc
c000e83a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e83e:	e8 30 b5 ff ff       	call   c0009d73 <malloc>
c000e843:	83 c4 10             	add    esp,0x10
c000e846:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e84c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e853:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e857:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e85d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e861:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e867:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e86d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e871:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e877:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e87e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e882:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e889:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e88d:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e894:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e898:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e8a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8a6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e8b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8b4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e8be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8c2:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e8cc:	90                   	nop
c000e8cd:	83 c4 1c             	add    esp,0x1c
c000e8d0:	c3                   	ret    
c000e8d1:	90                   	nop

c000e8d2 <Device::getName()>:
c000e8d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8d6:	05 d0 00 00 00       	add    eax,0xd0
c000e8db:	c3                   	ret    

c000e8dc <DriverlessDevice::DriverlessDevice(char const*)>:
c000e8dc:	83 ec 0c             	sub    esp,0xc
c000e8df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e3:	83 ec 08             	sub    esp,0x8
c000e8e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8ea:	50                   	push   eax
c000e8eb:	e8 e6 fe ff ff       	call   c000e7d6 <Device::Device(char const*)>
c000e8f0:	83 c4 10             	add    esp,0x10
c000e8f3:	ba bc 56 02 c0       	mov    edx,0xc00256bc
c000e8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8fc:	89 10                	mov    DWORD PTR [eax],edx
c000e8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e902:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e90c:	90                   	nop
c000e90d:	83 c4 0c             	add    esp,0xc
c000e910:	c3                   	ret    
c000e911:	90                   	nop

c000e912 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e912:	57                   	push   edi
c000e913:	56                   	push   esi
c000e914:	53                   	push   ebx
c000e915:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e919:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e91d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e921:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e927:	75 0c                	jne    c000e935 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e929:	52                   	push   edx
c000e92a:	52                   	push   edx
c000e92b:	53                   	push   ebx
c000e92c:	56                   	push   esi
c000e92d:	e8 10 4c 01 00       	call   c0023542 <LinkedList<Device>::addElement(Device*)>
c000e932:	83 c4 10             	add    esp,0x10
c000e935:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e93b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e93e:	74 12                	je     c000e952 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e940:	50                   	push   eax
c000e941:	57                   	push   edi
c000e942:	56                   	push   esi
c000e943:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e946:	e8 c7 ff ff ff       	call   c000e912 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e94b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e94d:	83 c4 10             	add    esp,0x10
c000e950:	eb e9                	jmp    c000e93b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e952:	5b                   	pop    ebx
c000e953:	5e                   	pop    esi
c000e954:	5f                   	pop    edi
c000e955:	c3                   	ret    

c000e956 <getDevicesOfType(DeviceType)>:
c000e956:	53                   	push   ebx
c000e957:	83 ec 14             	sub    esp,0x14
c000e95a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e95e:	53                   	push   ebx
c000e95f:	e8 ba 4c 01 00       	call   c002361e <LinkedList<Device>::LinkedList()>
c000e964:	83 c4 0c             	add    esp,0xc
c000e967:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e96b:	53                   	push   ebx
c000e96c:	ff 35 88 8c 02 c0    	push   DWORD PTR ds:0xc0028c88
c000e972:	e8 9b ff ff ff       	call   c000e912 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e977:	89 d8                	mov    eax,ebx
c000e979:	83 c4 18             	add    esp,0x18
c000e97c:	5b                   	pop    ebx
c000e97d:	c2 04 00             	ret    0x4

c000e980 <HardDiskController::HardDiskController(char const*)>:
c000e980:	83 ec 0c             	sub    esp,0xc
c000e983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e987:	83 ec 08             	sub    esp,0x8
c000e98a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e98e:	50                   	push   eax
c000e98f:	e8 42 fe ff ff       	call   c000e7d6 <Device::Device(char const*)>
c000e994:	83 c4 10             	add    esp,0x10
c000e997:	ba e8 56 02 c0       	mov    edx,0xc00256e8
c000e99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9a0:	89 10                	mov    DWORD PTR [eax],edx
c000e9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9a6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e9b0:	90                   	nop
c000e9b1:	83 c4 0c             	add    esp,0xc
c000e9b4:	c3                   	ret    
c000e9b5:	90                   	nop
c000e9b6:	66 90                	xchg   ax,ax

c000e9b8 <HardDiskController::~HardDiskController()>:
c000e9b8:	83 ec 0c             	sub    esp,0xc
c000e9bb:	ba e8 56 02 c0       	mov    edx,0xc00256e8
c000e9c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9c4:	89 10                	mov    DWORD PTR [eax],edx
c000e9c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e9ca:	83 ec 0c             	sub    esp,0xc
c000e9cd:	50                   	push   eax
c000e9ce:	e8 cd fa ff ff       	call   c000e4a0 <Device::~Device()>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	90                   	nop
c000e9d7:	83 c4 0c             	add    esp,0xc
c000e9da:	c3                   	ret    
c000e9db:	90                   	nop

c000e9dc <HardDiskController::~HardDiskController()>:
c000e9dc:	83 ec 0c             	sub    esp,0xc
c000e9df:	83 ec 0c             	sub    esp,0xc
c000e9e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9e6:	e8 cd ff ff ff       	call   c000e9b8 <HardDiskController::~HardDiskController()>
c000e9eb:	83 c4 10             	add    esp,0x10
c000e9ee:	83 ec 08             	sub    esp,0x8
c000e9f1:	68 58 01 00 00       	push   0x158
c000e9f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9fa:	e8 7f e5 ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c000e9ff:	83 c4 10             	add    esp,0x10
c000ea02:	83 c4 0c             	add    esp,0xc
c000ea05:	c3                   	ret    

c000ea06 <PhysicalDisk::eject()>:
c000ea06:	83 c8 ff             	or     eax,0xffffffff
c000ea09:	c3                   	ret    

c000ea0a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000ea0a:	83 ec 0c             	sub    esp,0xc
c000ea0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea11:	83 ec 08             	sub    esp,0x8
c000ea14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ea18:	50                   	push   eax
c000ea19:	e8 b8 fd ff ff       	call   c000e7d6 <Device::Device(char const*)>
c000ea1e:	83 c4 10             	add    esp,0x10
c000ea21:	ba 14 57 02 c0       	mov    edx,0xc0025714
c000ea26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea2a:	89 10                	mov    DWORD PTR [eax],edx
c000ea2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea30:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ea37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea3b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ea42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea46:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ea50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea54:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea58:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ea5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea62:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ea6c:	90                   	nop
c000ea6d:	83 c4 0c             	add    esp,0xc
c000ea70:	c3                   	ret    
c000ea71:	90                   	nop

c000ea72 <PhysicalDisk::startCache()>:
c000ea72:	56                   	push   esi
c000ea73:	53                   	push   ebx
c000ea74:	83 ec 10             	sub    esp,0x10
c000ea77:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ea7b:	6a 44                	push   0x44
c000ea7d:	e8 f1 b2 ff ff       	call   c0009d73 <malloc>
c000ea82:	89 c6                	mov    esi,eax
c000ea84:	58                   	pop    eax
c000ea85:	5a                   	pop    edx
c000ea86:	53                   	push   ebx
c000ea87:	56                   	push   esi
c000ea88:	e8 5b 27 00 00       	call   c00111e8 <VCache::VCache(PhysicalDisk*)>
c000ea8d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ea93:	83 c4 14             	add    esp,0x14
c000ea96:	5b                   	pop    ebx
c000ea97:	5e                   	pop    esi
c000ea98:	c3                   	ret    
c000ea99:	90                   	nop

c000ea9a <PhysicalDisk::~PhysicalDisk()>:
c000ea9a:	83 ec 0c             	sub    esp,0xc
c000ea9d:	ba 14 57 02 c0       	mov    edx,0xc0025714
c000eaa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaa6:	89 10                	mov    DWORD PTR [eax],edx
c000eaa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaac:	83 ec 0c             	sub    esp,0xc
c000eaaf:	50                   	push   eax
c000eab0:	e8 eb f9 ff ff       	call   c000e4a0 <Device::~Device()>
c000eab5:	83 c4 10             	add    esp,0x10
c000eab8:	90                   	nop
c000eab9:	83 c4 0c             	add    esp,0xc
c000eabc:	c3                   	ret    
c000eabd:	90                   	nop

c000eabe <PhysicalDisk::~PhysicalDisk()>:
c000eabe:	83 ec 0c             	sub    esp,0xc
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eac8:	e8 cd ff ff ff       	call   c000ea9a <PhysicalDisk::~PhysicalDisk()>
c000eacd:	83 c4 10             	add    esp,0x10
c000ead0:	83 ec 08             	sub    esp,0x8
c000ead3:	68 6c 01 00 00       	push   0x16c
c000ead8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eadc:	e8 9d e4 ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c000eae1:	83 c4 10             	add    esp,0x10
c000eae4:	83 c4 0c             	add    esp,0xc
c000eae7:	c3                   	ret    

c000eae8 <FPU::FPU(char const*)>:
c000eae8:	83 ec 0c             	sub    esp,0xc
c000eaeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaef:	83 ec 08             	sub    esp,0x8
c000eaf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eaf6:	50                   	push   eax
c000eaf7:	e8 da fc ff ff       	call   c000e7d6 <Device::Device(char const*)>
c000eafc:	83 c4 10             	add    esp,0x10
c000eaff:	ba 74 57 02 c0       	mov    edx,0xc0025774
c000eb04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb08:	89 10                	mov    DWORD PTR [eax],edx
c000eb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb0e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000eb18:	90                   	nop
c000eb19:	83 c4 0c             	add    esp,0xc
c000eb1c:	c3                   	ret    
c000eb1d:	90                   	nop
c000eb1e:	66 90                	xchg   ax,ax

c000eb20 <FPU::~FPU()>:
c000eb20:	83 ec 0c             	sub    esp,0xc
c000eb23:	ba 74 57 02 c0       	mov    edx,0xc0025774
c000eb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb2c:	89 10                	mov    DWORD PTR [eax],edx
c000eb2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb32:	83 ec 0c             	sub    esp,0xc
c000eb35:	50                   	push   eax
c000eb36:	e8 65 f9 ff ff       	call   c000e4a0 <Device::~Device()>
c000eb3b:	83 c4 10             	add    esp,0x10
c000eb3e:	90                   	nop
c000eb3f:	83 c4 0c             	add    esp,0xc
c000eb42:	c3                   	ret    
c000eb43:	90                   	nop

c000eb44 <FPU::~FPU()>:
c000eb44:	83 ec 0c             	sub    esp,0xc
c000eb47:	83 ec 0c             	sub    esp,0xc
c000eb4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb4e:	e8 cd ff ff ff       	call   c000eb20 <FPU::~FPU()>
c000eb53:	83 c4 10             	add    esp,0x10
c000eb56:	83 ec 08             	sub    esp,0x8
c000eb59:	68 58 01 00 00       	push   0x158
c000eb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb62:	e8 17 e4 ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	83 c4 0c             	add    esp,0xc
c000eb6d:	c3                   	ret    

c000eb6e <setupFPU()>:
c000eb6e:	53                   	push   ebx
c000eb6f:	83 ec 14             	sub    esp,0x14
c000eb72:	68 44 57 02 c0       	push   0xc0025744
c000eb77:	e8 e3 e4 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000eb7c:	8b 15 88 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c88
c000eb82:	83 c4 10             	add    esp,0x10
c000eb85:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000eb8c:	74 1a                	je     c000eba8 <setupFPU()+0x3a>
c000eb8e:	83 ec 0c             	sub    esp,0xc
c000eb91:	68 58 01 00 00       	push   0x158
c000eb96:	e8 d8 b1 ff ff       	call   c0009d73 <malloc>
c000eb9b:	89 c3                	mov    ebx,eax
c000eb9d:	89 04 24             	mov    DWORD PTR [esp],eax
c000eba0:	e8 1b 30 01 00       	call   c0021bc0 <AVX::AVX()>
c000eba5:	eb 6d                	jmp    c000ec14 <setupFPU()+0xa6>
c000eba7:	90                   	nop
c000eba8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000ebae:	84 c0                	test   al,al
c000ebb0:	79 1a                	jns    c000ebcc <setupFPU()+0x5e>
c000ebb2:	83 ec 0c             	sub    esp,0xc
c000ebb5:	68 58 01 00 00       	push   0x158
c000ebba:	e8 b4 b1 ff ff       	call   c0009d73 <malloc>
c000ebbf:	89 c3                	mov    ebx,eax
c000ebc1:	89 04 24             	mov    DWORD PTR [esp],eax
c000ebc4:	e8 27 31 01 00       	call   c0021cf0 <SSE::SSE()>
c000ebc9:	eb 49                	jmp    c000ec14 <setupFPU()+0xa6>
c000ebcb:	90                   	nop
c000ebcc:	a8 20                	test   al,0x20
c000ebce:	74 1c                	je     c000ebec <setupFPU()+0x7e>
c000ebd0:	83 ec 0c             	sub    esp,0xc
c000ebd3:	68 58 01 00 00       	push   0x158
c000ebd8:	e8 96 b1 ff ff       	call   c0009d73 <malloc>
c000ebdd:	89 c3                	mov    ebx,eax
c000ebdf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ebe2:	e8 6d 30 01 00       	call   c0021c54 <MMX::MMX()>
c000ebe7:	eb 2b                	jmp    c000ec14 <setupFPU()+0xa6>
c000ebe9:	8d 76 00             	lea    esi,[esi+0x0]
c000ebec:	a8 10                	test   al,0x10
c000ebee:	74 2c                	je     c000ec1c <setupFPU()+0xae>
c000ebf0:	83 ec 0c             	sub    esp,0xc
c000ebf3:	68 57 57 02 c0       	push   0xc0025757
c000ebf8:	e8 62 e4 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000ebfd:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c000ec04:	e8 6a b1 ff ff       	call   c0009d73 <malloc>
c000ec09:	89 c3                	mov    ebx,eax
c000ec0b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec0e:	e8 6b 31 01 00       	call   c0021d7e <x87::x87()>
c000ec13:	90                   	nop
c000ec14:	83 c4 10             	add    esp,0x10
c000ec17:	eb 27                	jmp    c000ec40 <setupFPU()+0xd2>
c000ec19:	8d 76 00             	lea    esi,[esi+0x0]
c000ec1c:	83 e0 ef             	and    eax,0xffffffef
c000ec1f:	83 ec 0c             	sub    esp,0xc
c000ec22:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000ec28:	68 61 57 02 c0       	push   0xc0025761
c000ec2d:	e8 2d e4 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000ec32:	0f 20 c0             	mov    eax,cr0
c000ec35:	83 c8 04             	or     eax,0x4
c000ec38:	0f 22 c0             	mov    cr0,eax
c000ec3b:	31 db                	xor    ebx,ebx
c000ec3d:	83 c4 10             	add    esp,0x10
c000ec40:	89 d8                	mov    eax,ebx
c000ec42:	83 c4 08             	add    esp,0x8
c000ec45:	5b                   	pop    ebx
c000ec46:	c3                   	ret    
c000ec47:	90                   	nop

c000ec48 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ec48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ec50:	c1 e0 04             	shl    eax,0x4
c000ec53:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000ec57:	8d 50 10             	lea    edx,[eax+0x10]
c000ec5a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000ec60:	74 08                	je     c000ec6a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000ec62:	83 c0 04             	add    eax,0x4
c000ec65:	39 d0                	cmp    eax,edx
c000ec67:	75 f1                	jne    c000ec5a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000ec69:	c3                   	ret    
c000ec6a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ec74:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ec7e:	eb e2                	jmp    c000ec62 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000ec80 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000ec80:	57                   	push   edi
c000ec81:	31 c0                	xor    eax,eax
c000ec83:	56                   	push   esi
c000ec84:	53                   	push   ebx
c000ec85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ec89:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ec8d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ec91:	89 da                	mov    edx,ebx
c000ec93:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ec97:	c1 e2 04             	shl    edx,0x4
c000ec9a:	01 ca                	add    edx,ecx
c000ec9c:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000eca4:	74 16                	je     c000ecbc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000eca6:	40                   	inc    eax
c000eca7:	83 f8 04             	cmp    eax,0x4
c000ecaa:	75 f0                	jne    c000ec9c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000ecac:	c7 44 24 10 a4 57 02 c0 	mov    DWORD PTR [esp+0x10],0xc00257a4
c000ecb4:	5b                   	pop    ebx
c000ecb5:	5e                   	pop    esi
c000ecb6:	5f                   	pop    edi
c000ecb7:	e9 75 64 00 00       	jmp    c0015131 <Krnl::panic(char const*)>
c000ecbc:	8d 04 98             	lea    eax,[eax+ebx*4]
c000ecbf:	8d 04 81             	lea    eax,[ecx+eax*4]
c000ecc2:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000ecc8:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000ecce:	5b                   	pop    ebx
c000eccf:	5e                   	pop    esi
c000ecd0:	5f                   	pop    edi
c000ecd1:	c3                   	ret    

c000ecd2 <doubleFault(regs*, void*)>:
c000ecd2:	55                   	push   ebp
c000ecd3:	89 e5                	mov    ebp,esp
c000ecd5:	83 ec 08             	sub    esp,0x8
c000ecd8:	83 ec 0c             	sub    esp,0xc
c000ecdb:	68 b1 57 02 c0       	push   0xc00257b1
c000ece0:	e8 4c 64 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000ece5:	83 c4 10             	add    esp,0x10
c000ece8:	90                   	nop
c000ece9:	c9                   	leave  
c000ecea:	c3                   	ret    
c000eceb:	90                   	nop

c000ecec <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ecec:	56                   	push   esi
c000eced:	53                   	push   ebx
c000ecee:	50                   	push   eax
c000ecef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ecf3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ecf7:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ecfc:	75 35                	jne    c000ed33 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000ecfe:	8d 43 20             	lea    eax,[ebx+0x20]
c000ed01:	31 d2                	xor    edx,edx
c000ed03:	89 c1                	mov    ecx,eax
c000ed05:	c1 e1 04             	shl    ecx,0x4
c000ed08:	01 f1                	add    ecx,esi
c000ed0a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000ed12:	74 3e                	je     c000ed52 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000ed14:	42                   	inc    edx
c000ed15:	83 fa 04             	cmp    edx,0x4
c000ed18:	75 f0                	jne    c000ed0a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000ed1a:	83 ec 0c             	sub    esp,0xc
c000ed1d:	68 cb 57 02 c0       	push   0xc00257cb
c000ed22:	e8 0a 64 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000ed27:	83 c4 10             	add    esp,0x10
c000ed2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ed2f:	5a                   	pop    edx
c000ed30:	5b                   	pop    ebx
c000ed31:	5e                   	pop    esi
c000ed32:	c3                   	ret    
c000ed33:	83 ec 0c             	sub    esp,0xc
c000ed36:	56                   	push   esi
c000ed37:	e8 96 fb ff ff       	call   c000e8d2 <Device::getName()>
c000ed3c:	83 c4 10             	add    esp,0x10
c000ed3f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ed42:	75 ba                	jne    c000ecfe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ed44:	83 fb 0f             	cmp    ebx,0xf
c000ed47:	7f 29                	jg     c000ed72 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000ed49:	0f b6 9b 80 83 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd7c80]
c000ed50:	eb ac                	jmp    c000ecfe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ed52:	8d 04 82             	lea    eax,[edx+eax*4]
c000ed55:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed59:	8d 04 86             	lea    eax,[esi+eax*4]
c000ed5c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000ed62:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ed66:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000ed6c:	89 d8                	mov    eax,ebx
c000ed6e:	5a                   	pop    edx
c000ed6f:	5b                   	pop    ebx
c000ed70:	5e                   	pop    esi
c000ed71:	c3                   	ret    
c000ed72:	83 ec 0c             	sub    esp,0xc
c000ed75:	68 be 57 02 c0       	push   0xc00257be
c000ed7a:	e8 b2 63 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000ed7f:	83 c4 10             	add    esp,0x10
c000ed82:	e9 77 ff ff ff       	jmp    c000ecfe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000ed87:	90                   	nop

c000ed88 <InterruptController::clearAllHandlers(int, bool)>:
c000ed88:	56                   	push   esi
c000ed89:	53                   	push   ebx
c000ed8a:	52                   	push   edx
c000ed8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed8f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed93:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ed98:	75 61                	jne    c000edfb <InterruptController::clearAllHandlers(int, bool)+0x73>
c000ed9a:	8d 46 20             	lea    eax,[esi+0x20]
c000ed9d:	c1 e6 04             	shl    esi,0x4
c000eda0:	c1 e0 04             	shl    eax,0x4
c000eda3:	01 de                	add    esi,ebx
c000eda5:	01 d8                	add    eax,ebx
c000eda7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000edb1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000edbb:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000edc5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000edcf:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000edd9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000ede3:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000eded:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000edf7:	58                   	pop    eax
c000edf8:	5b                   	pop    ebx
c000edf9:	5e                   	pop    esi
c000edfa:	c3                   	ret    
c000edfb:	83 ec 0c             	sub    esp,0xc
c000edfe:	53                   	push   ebx
c000edff:	e8 ce fa ff ff       	call   c000e8d2 <Device::getName()>
c000ee04:	83 c4 10             	add    esp,0x10
c000ee07:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ee0a:	75 8e                	jne    c000ed9a <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ee0c:	83 fe 0f             	cmp    esi,0xf
c000ee0f:	7f 09                	jg     c000ee1a <InterruptController::clearAllHandlers(int, bool)+0x92>
c000ee11:	0f b6 b6 80 83 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd7c80]
c000ee18:	eb 80                	jmp    c000ed9a <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ee1a:	83 ec 0c             	sub    esp,0xc
c000ee1d:	68 d8 57 02 c0       	push   0xc00257d8
c000ee22:	e8 0a 63 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000ee27:	83 c4 10             	add    esp,0x10
c000ee2a:	e9 6b ff ff ff       	jmp    c000ed9a <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ee2f:	90                   	nop

c000ee30 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	52                   	push   edx
c000ee33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ee37:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ee3b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ee40:	75 3a                	jne    c000ee7c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000ee42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ee46:	8d 50 20             	lea    edx,[eax+0x20]
c000ee49:	c1 e2 04             	shl    edx,0x4
c000ee4c:	8d 04 16             	lea    eax,[esi+edx*1]
c000ee4f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000ee53:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000ee59:	74 0b                	je     c000ee66 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000ee5b:	83 c0 04             	add    eax,0x4
c000ee5e:	39 d0                	cmp    eax,edx
c000ee60:	75 f1                	jne    c000ee53 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000ee62:	58                   	pop    eax
c000ee63:	5b                   	pop    ebx
c000ee64:	5e                   	pop    esi
c000ee65:	c3                   	ret    
c000ee66:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ee70:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ee7a:	eb df                	jmp    c000ee5b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ee7c:	83 ec 0c             	sub    esp,0xc
c000ee7f:	56                   	push   esi
c000ee80:	e8 4d fa ff ff       	call   c000e8d2 <Device::getName()>
c000ee85:	83 c4 10             	add    esp,0x10
c000ee88:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ee8b:	75 b5                	jne    c000ee42 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000ee8d:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000ee92:	7f 11                	jg     c000eea5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000ee94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ee98:	0f b6 80 80 83 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd7c80]
c000ee9f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eea3:	eb 9d                	jmp    c000ee42 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000eea5:	83 ec 0c             	sub    esp,0xc
c000eea8:	68 e5 57 02 c0       	push   0xc00257e5
c000eead:	e8 7f 62 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000eeb2:	83 c4 10             	add    esp,0x10
c000eeb5:	eb 8b                	jmp    c000ee42 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000eeb7 <nmiHandler(regs*, void*)>:
c000eeb7:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000eebc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000eec0:	e9 77 a6 ff ff       	jmp    c000953c <Computer::handleNMI()>

c000eec5 <int_handler>:
c000eec5:	55                   	push   ebp
c000eec6:	57                   	push   edi
c000eec7:	56                   	push   esi
c000eec8:	53                   	push   ebx
c000eec9:	83 ec 0c             	sub    esp,0xc
c000eecc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000eed0:	80 3d 64 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029764,0x0
c000eed7:	74 0b                	je     c000eee4 <int_handler+0x1f>
c000eed9:	fa                   	cli    
c000eeda:	f4                   	hlt    
c000eedb:	80 3d 64 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029764,0x0
c000eee2:	75 f5                	jne    c000eed9 <int_handler+0x14>
c000eee4:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000eee9:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000eeec:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000eef2:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000eef8:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eefb:	83 f8 17             	cmp    eax,0x17
c000eefe:	77 13                	ja     c000ef13 <int_handler+0x4e>
c000ef00:	83 ec 08             	sub    esp,0x8
c000ef03:	8b 17                	mov    edx,DWORD PTR [edi]
c000ef05:	8d 43 e0             	lea    eax,[ebx-0x20]
c000ef08:	0f b6 c0             	movzx  eax,al
c000ef0b:	50                   	push   eax
c000ef0c:	57                   	push   edi
c000ef0d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000ef10:	83 c4 10             	add    esp,0x10
c000ef13:	83 c3 15             	add    ebx,0x15
c000ef16:	c1 e3 04             	shl    ebx,0x4
c000ef19:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000ef1d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000ef24:	31 db                	xor    ebx,ebx
c000ef26:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000ef2a:	85 c0                	test   eax,eax
c000ef2c:	74 13                	je     c000ef41 <int_handler+0x7c>
c000ef2e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000ef31:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000ef35:	74 1c                	je     c000ef53 <int_handler+0x8e>
c000ef37:	83 ec 08             	sub    esp,0x8
c000ef3a:	52                   	push   edx
c000ef3b:	56                   	push   esi
c000ef3c:	ff d0                	call   eax
c000ef3e:	83 c4 10             	add    esp,0x10
c000ef41:	43                   	inc    ebx
c000ef42:	83 fb 04             	cmp    ebx,0x4
c000ef45:	75 df                	jne    c000ef26 <int_handler+0x61>
c000ef47:	83 c4 0c             	add    esp,0xc
c000ef4a:	31 c0                	xor    eax,eax
c000ef4c:	5b                   	pop    ebx
c000ef4d:	31 d2                	xor    edx,edx
c000ef4f:	5e                   	pop    esi
c000ef50:	5f                   	pop    edi
c000ef51:	5d                   	pop    ebp
c000ef52:	c3                   	ret    
c000ef53:	83 ec 08             	sub    esp,0x8
c000ef56:	52                   	push   edx
c000ef57:	56                   	push   esi
c000ef58:	ff d0                	call   eax
c000ef5a:	83 c4 10             	add    esp,0x10
c000ef5d:	83 c4 0c             	add    esp,0xc
c000ef60:	5b                   	pop    ebx
c000ef61:	5e                   	pop    esi
c000ef62:	5f                   	pop    edi
c000ef63:	5d                   	pop    ebp
c000ef64:	c3                   	ret    
c000ef65:	90                   	nop

c000ef66 <InterruptController::InterruptController(char const*)>:
c000ef66:	83 ec 1c             	sub    esp,0x1c
c000ef69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef6d:	83 ec 08             	sub    esp,0x8
c000ef70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef74:	50                   	push   eax
c000ef75:	e8 5c f8 ff ff       	call   c000e7d6 <Device::Device(char const*)>
c000ef7a:	83 c4 10             	add    esp,0x10
c000ef7d:	ba 1c 5b 02 c0       	mov    edx,0xc0025b1c
c000ef82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef86:	89 10                	mov    DWORD PTR [eax],edx
c000ef88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef8c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ef96:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ef9e:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000efa6:	7f 5e                	jg     c000f006 <InterruptController::InterruptController(char const*)+0xa0>
c000efa8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000efb0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000efb5:	7f 49                	jg     c000f000 <InterruptController::InterruptController(char const*)+0x9a>
c000efb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000efbf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000efc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efca:	01 ca                	add    edx,ecx
c000efcc:	83 c2 54             	add    edx,0x54
c000efcf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000efd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000efdb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000efdf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000efe6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000efea:	01 ca                	add    edx,ecx
c000efec:	81 c2 54 04 00 00    	add    edx,0x454
c000eff2:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000effa:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000effe:	eb b0                	jmp    c000efb0 <InterruptController::InterruptController(char const*)+0x4a>
c000f000:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000f004:	eb 98                	jmp    c000ef9e <InterruptController::InterruptController(char const*)+0x38>
c000f006:	90                   	nop
c000f007:	83 c4 1c             	add    esp,0x1c
c000f00a:	c3                   	ret    
c000f00b:	90                   	nop

c000f00c <InterruptController::~InterruptController()>:
c000f00c:	83 ec 0c             	sub    esp,0xc
c000f00f:	ba 1c 5b 02 c0       	mov    edx,0xc0025b1c
c000f014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f018:	89 10                	mov    DWORD PTR [eax],edx
c000f01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f01e:	83 ec 0c             	sub    esp,0xc
c000f021:	50                   	push   eax
c000f022:	e8 79 f4 ff ff       	call   c000e4a0 <Device::~Device()>
c000f027:	83 c4 10             	add    esp,0x10
c000f02a:	90                   	nop
c000f02b:	83 c4 0c             	add    esp,0xc
c000f02e:	c3                   	ret    
c000f02f:	90                   	nop

c000f030 <InterruptController::~InterruptController()>:
c000f030:	83 ec 0c             	sub    esp,0xc
c000f033:	83 ec 0c             	sub    esp,0xc
c000f036:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f03a:	e8 cd ff ff ff       	call   c000f00c <InterruptController::~InterruptController()>
c000f03f:	83 c4 10             	add    esp,0x10
c000f042:	83 ec 08             	sub    esp,0x8
c000f045:	68 58 21 00 00       	push   0x2158
c000f04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f04e:	e8 2b df ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c000f053:	83 c4 10             	add    esp,0x10
c000f056:	83 c4 0c             	add    esp,0xc
c000f059:	c3                   	ret    

c000f05a <displayDebugInfo(regs*)>:
c000f05a:	55                   	push   ebp
c000f05b:	57                   	push   edi
c000f05c:	56                   	push   esi
c000f05d:	53                   	push   ebx
c000f05e:	83 ec 24             	sub    esp,0x24
c000f061:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000f065:	0f 20 c2             	mov    edx,cr0
c000f068:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000f06c:	0f 20 d7             	mov    edi,cr2
c000f06f:	0f 20 de             	mov    esi,cr3
c000f072:	0f 20 e5             	mov    ebp,cr4
c000f075:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000f078:	68 f2 57 02 c0       	push   0xc00257f2
c000f07d:	e8 dd df ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f082:	59                   	pop    ecx
c000f083:	58                   	pop    eax
c000f084:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f087:	68 fd 57 02 c0       	push   0xc00257fd
c000f08c:	e8 ce df ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f091:	58                   	pop    eax
c000f092:	5a                   	pop    edx
c000f093:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f096:	68 08 58 02 c0       	push   0xc0025808
c000f09b:	e8 bf df ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f0a0:	59                   	pop    ecx
c000f0a1:	58                   	pop    eax
c000f0a2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f0a5:	68 13 58 02 c0       	push   0xc0025813
c000f0aa:	e8 b0 df ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f0af:	58                   	pop    eax
c000f0b0:	5a                   	pop    edx
c000f0b1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000f0b4:	68 1e 58 02 c0       	push   0xc002581e
c000f0b9:	e8 a1 df ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f0be:	59                   	pop    ecx
c000f0bf:	58                   	pop    eax
c000f0c0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000f0c3:	68 29 58 02 c0       	push   0xc0025829
c000f0c8:	e8 92 df ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f0cd:	58                   	pop    eax
c000f0ce:	5a                   	pop    edx
c000f0cf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f0d2:	68 34 58 02 c0       	push   0xc0025834
c000f0d7:	e8 83 df ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f0dc:	59                   	pop    ecx
c000f0dd:	58                   	pop    eax
c000f0de:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000f0e1:	68 3f 58 02 c0       	push   0xc002583f
c000f0e6:	e8 74 df ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f0eb:	58                   	pop    eax
c000f0ec:	5a                   	pop    edx
c000f0ed:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f0f0:	68 4a 58 02 c0       	push   0xc002584a
c000f0f5:	e8 65 df ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f0fa:	59                   	pop    ecx
c000f0fb:	58                   	pop    eax
c000f0fc:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f0ff:	68 59 58 02 c0       	push   0xc0025859
c000f104:	e8 56 df ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f109:	58                   	pop    eax
c000f10a:	5a                   	pop    edx
c000f10b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f10e:	68 64 58 02 c0       	push   0xc0025864
c000f113:	e8 47 df ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f118:	59                   	pop    ecx
c000f119:	58                   	pop    eax
c000f11a:	57                   	push   edi
c000f11b:	68 6f 58 02 c0       	push   0xc002586f
c000f120:	e8 3a df ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f125:	58                   	pop    eax
c000f126:	5a                   	pop    edx
c000f127:	56                   	push   esi
c000f128:	68 7a 58 02 c0       	push   0xc002587a
c000f12d:	e8 2d df ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f132:	59                   	pop    ecx
c000f133:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f138:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f13e:	e8 2a bd ff ff       	call   c000ae6d <setActiveTerminal(VgaText*)>
c000f143:	58                   	pop    eax
c000f144:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f147:	5a                   	pop    edx
c000f148:	c1 e0 05             	shl    eax,0x5
c000f14b:	05 e0 80 02 c0       	add    eax,0xc00280e0
c000f150:	50                   	push   eax
c000f151:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f156:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f15c:	e8 19 c2 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f161:	59                   	pop    ecx
c000f162:	58                   	pop    eax
c000f163:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f168:	68 85 58 02 c0       	push   0xc0025885
c000f16d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f173:	e8 02 c2 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f178:	58                   	pop    eax
c000f179:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f17e:	5a                   	pop    edx
c000f17f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f182:	83 c0 0c             	add    eax,0xc
c000f185:	50                   	push   eax
c000f186:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f18b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f191:	e8 e4 c1 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f196:	59                   	pop    ecx
c000f197:	58                   	pop    eax
c000f198:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f19d:	68 8e 58 02 c0       	push   0xc002588e
c000f1a2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1a8:	e8 cd c1 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f1ad:	58                   	pop    eax
c000f1ae:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f1b3:	5a                   	pop    edx
c000f1b4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f1b7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1bd:	e8 72 c1 ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f1c2:	59                   	pop    ecx
c000f1c3:	58                   	pop    eax
c000f1c4:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f1c9:	68 96 58 02 c0       	push   0xc0025896
c000f1ce:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1d4:	e8 a1 c1 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f1d9:	58                   	pop    eax
c000f1da:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f1df:	5a                   	pop    edx
c000f1e0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000f1e3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f1e9:	e8 46 c1 ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f1ee:	59                   	pop    ecx
c000f1ef:	58                   	pop    eax
c000f1f0:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f1f5:	68 9e 58 02 c0       	push   0xc002589e
c000f1fa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f200:	e8 75 c1 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f205:	58                   	pop    eax
c000f206:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f20b:	5a                   	pop    edx
c000f20c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000f20f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f215:	e8 1a c1 ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f21a:	59                   	pop    ecx
c000f21b:	58                   	pop    eax
c000f21c:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f221:	68 a6 58 02 c0       	push   0xc00258a6
c000f226:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f22c:	e8 49 c1 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f231:	58                   	pop    eax
c000f232:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f237:	5a                   	pop    edx
c000f238:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000f23b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f241:	e8 ee c0 ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f246:	59                   	pop    ecx
c000f247:	58                   	pop    eax
c000f248:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f24d:	68 ae 58 02 c0       	push   0xc00258ae
c000f252:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f258:	e8 1d c1 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f25d:	58                   	pop    eax
c000f25e:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f263:	5a                   	pop    edx
c000f264:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000f267:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f26d:	e8 c2 c0 ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f272:	59                   	pop    ecx
c000f273:	58                   	pop    eax
c000f274:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f279:	68 b6 58 02 c0       	push   0xc00258b6
c000f27e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f284:	e8 f1 c0 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f289:	58                   	pop    eax
c000f28a:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f28f:	5a                   	pop    edx
c000f290:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000f293:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f299:	e8 96 c0 ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f29e:	59                   	pop    ecx
c000f29f:	58                   	pop    eax
c000f2a0:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f2a5:	68 be 58 02 c0       	push   0xc00258be
c000f2aa:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2b0:	e8 c5 c0 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f2b5:	58                   	pop    eax
c000f2b6:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f2bb:	5a                   	pop    edx
c000f2bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2c0:	52                   	push   edx
c000f2c1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2c7:	e8 68 c0 ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f2cc:	59                   	pop    ecx
c000f2cd:	58                   	pop    eax
c000f2ce:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f2d3:	68 c7 58 02 c0       	push   0xc00258c7
c000f2d8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2de:	e8 97 c0 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f2e3:	58                   	pop    eax
c000f2e4:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f2e9:	5a                   	pop    edx
c000f2ea:	57                   	push   edi
c000f2eb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f2f1:	e8 3e c0 ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f2f6:	59                   	pop    ecx
c000f2f7:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f2fc:	5f                   	pop    edi
c000f2fd:	68 cf 58 02 c0       	push   0xc00258cf
c000f302:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f308:	e8 6d c0 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f30d:	58                   	pop    eax
c000f30e:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f313:	5a                   	pop    edx
c000f314:	56                   	push   esi
c000f315:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f31b:	e8 14 c0 ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f320:	59                   	pop    ecx
c000f321:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f326:	5e                   	pop    esi
c000f327:	68 d7 58 02 c0       	push   0xc00258d7
c000f32c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f332:	e8 43 c0 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f337:	5f                   	pop    edi
c000f338:	58                   	pop    eax
c000f339:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f33e:	55                   	push   ebp
c000f33f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f345:	e8 ea bf ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f34a:	58                   	pop    eax
c000f34b:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f350:	5a                   	pop    edx
c000f351:	68 df 58 02 c0       	push   0xc00258df
c000f356:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f35c:	e8 19 c0 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f361:	0f 21 c0             	mov    eax,db0
c000f364:	59                   	pop    ecx
c000f365:	5e                   	pop    esi
c000f366:	50                   	push   eax
c000f367:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f36c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f372:	e8 bd bf ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f377:	5f                   	pop    edi
c000f378:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f37d:	5d                   	pop    ebp
c000f37e:	68 e8 58 02 c0       	push   0xc00258e8
c000f383:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f389:	e8 ec bf ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f38e:	0f 21 c8             	mov    eax,db1
c000f391:	5a                   	pop    edx
c000f392:	59                   	pop    ecx
c000f393:	50                   	push   eax
c000f394:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f399:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f39f:	e8 90 bf ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f3a4:	5e                   	pop    esi
c000f3a5:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f3aa:	5f                   	pop    edi
c000f3ab:	68 f0 58 02 c0       	push   0xc00258f0
c000f3b0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3b6:	e8 bf bf ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f3bb:	0f 21 d0             	mov    eax,db2
c000f3be:	5d                   	pop    ebp
c000f3bf:	5a                   	pop    edx
c000f3c0:	50                   	push   eax
c000f3c1:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f3c6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3cc:	e8 63 bf ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f3d1:	59                   	pop    ecx
c000f3d2:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f3d7:	5e                   	pop    esi
c000f3d8:	68 f8 58 02 c0       	push   0xc00258f8
c000f3dd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3e3:	e8 92 bf ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f3e8:	0f 21 d8             	mov    eax,db3
c000f3eb:	5f                   	pop    edi
c000f3ec:	5d                   	pop    ebp
c000f3ed:	50                   	push   eax
c000f3ee:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f3f3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f3f9:	e8 36 bf ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f3fe:	58                   	pop    eax
c000f3ff:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f404:	5a                   	pop    edx
c000f405:	68 00 59 02 c0       	push   0xc0025900
c000f40a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f410:	e8 65 bf ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f415:	0f 21 f0             	mov    eax,db6
c000f418:	59                   	pop    ecx
c000f419:	5e                   	pop    esi
c000f41a:	50                   	push   eax
c000f41b:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f420:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f426:	e8 09 bf ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f42b:	5f                   	pop    edi
c000f42c:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f431:	5d                   	pop    ebp
c000f432:	68 08 59 02 c0       	push   0xc0025908
c000f437:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f43d:	e8 38 bf ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f442:	0f 21 f8             	mov    eax,db7
c000f445:	5a                   	pop    edx
c000f446:	59                   	pop    ecx
c000f447:	50                   	push   eax
c000f448:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f44d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f453:	e8 dc be ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f458:	5e                   	pop    esi
c000f459:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f45c:	e8 08 91 00 00       	call   c0018569 <Thr::getDriverNameFromAddress(unsigned long)>
c000f461:	83 c4 10             	add    esp,0x10
c000f464:	85 c0                	test   eax,eax
c000f466:	74 7d                	je     c000f4e5 <displayDebugInfo(regs*)+0x48b>
c000f468:	89 c6                	mov    esi,eax
c000f46a:	50                   	push   eax
c000f46b:	50                   	push   eax
c000f46c:	56                   	push   esi
c000f46d:	68 10 59 02 c0       	push   0xc0025910
c000f472:	e8 e8 db ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f477:	5a                   	pop    edx
c000f478:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f47d:	59                   	pop    ecx
c000f47e:	68 1e 59 02 c0       	push   0xc002591e
c000f483:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f489:	e8 ec be ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f48e:	5f                   	pop    edi
c000f48f:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f494:	5d                   	pop    ebp
c000f495:	56                   	push   esi
c000f496:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f49c:	e8 d9 be ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f4a1:	58                   	pop    eax
c000f4a2:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f4a7:	5a                   	pop    edx
c000f4a8:	68 2a 59 02 c0       	push   0xc002592a
c000f4ad:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f4b3:	e8 c2 be ff ff       	call   c000b37a <VgaText::puts(char const*)>
c000f4b8:	59                   	pop    ecx
c000f4b9:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c000f4be:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f4c4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f4c7:	e8 d4 90 00 00       	call   c00185a0 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f4cc:	5b                   	pop    ebx
c000f4cd:	5d                   	pop    ebp
c000f4ce:	50                   	push   eax
c000f4cf:	57                   	push   edi
c000f4d0:	e8 5f be ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c000f4d5:	58                   	pop    eax
c000f4d6:	5a                   	pop    edx
c000f4d7:	56                   	push   esi
c000f4d8:	68 36 59 02 c0       	push   0xc0025936
c000f4dd:	e8 7d db ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f4e2:	83 c4 10             	add    esp,0x10
c000f4e5:	fa                   	cli    
c000f4e6:	f4                   	hlt    
c000f4e7:	eb fe                	jmp    c000f4e7 <displayDebugInfo(regs*)+0x48d>

c000f4e9 <x87EmulHandler(regs*, void*)>:
c000f4e9:	53                   	push   ebx
c000f4ea:	83 ec 14             	sub    esp,0x14
c000f4ed:	68 46 59 02 c0       	push   0xc0025946
c000f4f2:	e8 68 db ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f4f7:	0f 20 c2             	mov    edx,cr0
c000f4fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f4ff:	83 c4 10             	add    esp,0x10
c000f502:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f506:	0f 85 ff 00 00 00    	jne    c000f60b <x87EmulHandler(regs*, void*)+0x122>
c000f50c:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000f511:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f517:	85 c0                	test   eax,eax
c000f519:	74 05                	je     c000f520 <x87EmulHandler(regs*, void*)+0x37>
c000f51b:	83 e2 08             	and    edx,0x8
c000f51e:	75 1c                	jne    c000f53c <x87EmulHandler(regs*, void*)+0x53>
c000f520:	83 ec 0c             	sub    esp,0xc
c000f523:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f527:	e8 a2 b5 00 00       	call   c001aace <Vm::x87Handler(regs*)>
c000f52c:	83 c4 10             	add    esp,0x10
c000f52f:	84 c0                	test   al,al
c000f531:	0f 84 d4 00 00 00    	je     c000f60b <x87EmulHandler(regs*, void*)+0x122>
c000f537:	83 c4 08             	add    esp,0x8
c000f53a:	5b                   	pop    ebx
c000f53b:	c3                   	ret    
c000f53c:	83 ec 0c             	sub    esp,0xc
c000f53f:	68 76 59 02 c0       	push   0xc0025976
c000f544:	e8 16 db ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f549:	0f 06                	clts   
c000f54b:	a1 c8 8d 02 c0       	mov    eax,ds:0xc0028dc8
c000f550:	83 c4 10             	add    esp,0x10
c000f553:	85 c0                	test   eax,eax
c000f555:	74 33                	je     c000f58a <x87EmulHandler(regs*, void*)+0xa1>
c000f557:	83 ec 0c             	sub    esp,0xc
c000f55a:	68 83 59 02 c0       	push   0xc0025983
c000f55f:	e8 fb da ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f564:	59                   	pop    ecx
c000f565:	a1 c8 8d 02 c0       	mov    eax,ds:0xc0028dc8
c000f56a:	5b                   	pop    ebx
c000f56b:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f56e:	8b 15 88 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c88
c000f574:	83 c0 3f             	add    eax,0x3f
c000f577:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f57d:	83 e0 c0             	and    eax,0xffffffc0
c000f580:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f582:	50                   	push   eax
c000f583:	52                   	push   edx
c000f584:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000f587:	83 c4 10             	add    esp,0x10
c000f58a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f58f:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f592:	85 c0                	test   eax,eax
c000f594:	74 4e                	je     c000f5e4 <x87EmulHandler(regs*, void*)+0xfb>
c000f596:	83 ec 0c             	sub    esp,0xc
c000f599:	68 af 59 02 c0       	push   0xc00259af
c000f59e:	e8 bc da ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f5a3:	59                   	pop    ecx
c000f5a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f5a9:	5b                   	pop    ebx
c000f5aa:	8b 40 55             	mov    eax,DWORD PTR [eax+0x55]
c000f5ad:	8b 15 88 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c88
c000f5b3:	83 c0 3f             	add    eax,0x3f
c000f5b6:	8b 92 e0 01 00 00    	mov    edx,DWORD PTR [edx+0x1e0]
c000f5bc:	83 e0 c0             	and    eax,0xffffffc0
c000f5bf:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000f5c1:	50                   	push   eax
c000f5c2:	52                   	push   edx
c000f5c3:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000f5c6:	c7 04 24 c5 59 02 c0 	mov    DWORD PTR [esp],0xc00259c5
c000f5cd:	e8 8d da ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f5d2:	83 c4 10             	add    esp,0x10
c000f5d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f5da:	a3 c8 8d 02 c0       	mov    ds:0xc0028dc8,eax
c000f5df:	83 c4 08             	add    esp,0x8
c000f5e2:	5b                   	pop    ebx
c000f5e3:	c3                   	ret    
c000f5e4:	83 ec 0c             	sub    esp,0xc
c000f5e7:	68 96 59 02 c0       	push   0xc0025996
c000f5ec:	e8 6e da ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f5f1:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c000f5f7:	c7 04 24 40 02 00 00 	mov    DWORD PTR [esp],0x240
c000f5fe:	e8 70 a7 ff ff       	call   c0009d73 <malloc>
c000f603:	83 c4 10             	add    esp,0x10
c000f606:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c000f609:	eb ca                	jmp    c000f5d5 <x87EmulHandler(regs*, void*)+0xec>
c000f60b:	83 ec 0c             	sub    esp,0xc
c000f60e:	68 60 59 02 c0       	push   0xc0025960
c000f613:	e8 47 da ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f618:	58                   	pop    eax
c000f619:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f61d:	e8 38 fa ff ff       	call   c000f05a <displayDebugInfo(regs*)>

c000f622 <gpFault(regs*, void*)>:
c000f622:	53                   	push   ebx
c000f623:	83 ec 14             	sub    esp,0x14
c000f626:	c7 05 c4 8d 02 c0 8b 9f 01 c0 	mov    DWORD PTR ds:0xc0028dc4,0xc0019f8b
c000f630:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f634:	53                   	push   ebx
c000f635:	e8 51 a9 00 00       	call   c0019f8b <Vm::faultHandler(regs*)>
c000f63a:	83 c4 10             	add    esp,0x10
c000f63d:	84 c0                	test   al,al
c000f63f:	74 05                	je     c000f646 <gpFault(regs*, void*)+0x24>
c000f641:	83 c4 08             	add    esp,0x8
c000f644:	5b                   	pop    ebx
c000f645:	c3                   	ret    
c000f646:	83 ec 0c             	sub    esp,0xc
c000f649:	68 da 59 02 c0       	push   0xc00259da
c000f64e:	e8 0c da ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f653:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f656:	e8 ff f9 ff ff       	call   c000f05a <displayDebugInfo(regs*)>

c000f65b <pgFault(regs*, void*)>:
c000f65b:	53                   	push   ebx
c000f65c:	83 ec 10             	sub    esp,0x10
c000f65f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f663:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f666:	68 f5 59 02 c0       	push   0xc00259f5
c000f66b:	e8 ef d9 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f670:	0f 20 d0             	mov    eax,cr2
c000f673:	5a                   	pop    edx
c000f674:	59                   	pop    ecx
c000f675:	50                   	push   eax
c000f676:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f67b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f67e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f684:	e8 51 d5 ff ff       	call   c000cbda <VAS::tryLoadBackOffDisk(unsigned long)>
c000f689:	83 c4 10             	add    esp,0x10
c000f68c:	84 c0                	test   al,al
c000f68e:	74 05                	je     c000f695 <pgFault(regs*, void*)+0x3a>
c000f690:	83 c4 08             	add    esp,0x8
c000f693:	5b                   	pop    ebx
c000f694:	c3                   	ret    
c000f695:	83 ec 0c             	sub    esp,0xc
c000f698:	68 0a 5a 02 c0       	push   0xc0025a0a
c000f69d:	e8 bd d9 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f6a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6a5:	e8 b0 f9 ff ff       	call   c000f05a <displayDebugInfo(regs*)>

c000f6aa <otherISRHandler(regs*, void*)>:
c000f6aa:	53                   	push   ebx
c000f6ab:	83 ec 0c             	sub    esp,0xc
c000f6ae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f6b2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f6b5:	50                   	push   eax
c000f6b6:	50                   	push   eax
c000f6b7:	68 17 5a 02 c0       	push   0xc0025a17
c000f6bc:	e8 9e d9 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f6c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6c4:	e8 91 f9 ff ff       	call   c000f05a <displayDebugInfo(regs*)>

c000f6c9 <opcodeFault(regs*, void*)>:
c000f6c9:	55                   	push   ebp
c000f6ca:	89 e5                	mov    ebp,esp
c000f6cc:	56                   	push   esi
c000f6cd:	53                   	push   ebx
c000f6ce:	83 ec 30             	sub    esp,0x30
c000f6d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f6d4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f6d7:	83 ec 08             	sub    esp,0x8
c000f6da:	50                   	push   eax
c000f6db:	68 34 5a 02 c0       	push   0xc0025a34
c000f6e0:	e8 7a d9 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f6e5:	83 c4 10             	add    esp,0x10
c000f6e8:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000f6ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f6f3:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f6f9:	84 c0                	test   al,al
c000f6fb:	74 24                	je     c000f721 <opcodeFault(regs*, void*)+0x58>
c000f6fd:	83 ec 0c             	sub    esp,0xc
c000f700:	68 44 5a 02 c0       	push   0xc0025a44
c000f705:	e8 55 d9 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f70a:	83 c4 10             	add    esp,0x10
c000f70d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f710:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f713:	8d 50 19             	lea    edx,[eax+0x19]
c000f716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f719:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f71c:	e9 7b 03 00 00       	jmp    c000fa9c <opcodeFault(regs*, void*)+0x3d3>
c000f721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f724:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f727:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f72a:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f72e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f731:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f734:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f737:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f73a:	8a 00                	mov    al,BYTE PTR [eax]
c000f73c:	3c f0                	cmp    al,0xf0
c000f73e:	75 17                	jne    c000f757 <opcodeFault(regs*, void*)+0x8e>
c000f740:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f746:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f749:	8d 50 01             	lea    edx,[eax+0x1]
c000f74c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f74f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f752:	e9 d6 00 00 00       	jmp    c000f82d <opcodeFault(regs*, void*)+0x164>
c000f757:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f75a:	8a 00                	mov    al,BYTE PTR [eax]
c000f75c:	3c f2                	cmp    al,0xf2
c000f75e:	74 09                	je     c000f769 <opcodeFault(regs*, void*)+0xa0>
c000f760:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f763:	8a 00                	mov    al,BYTE PTR [eax]
c000f765:	3c f3                	cmp    al,0xf3
c000f767:	75 1b                	jne    c000f784 <opcodeFault(regs*, void*)+0xbb>
c000f769:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f76d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f773:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f776:	8d 50 01             	lea    edx,[eax+0x1]
c000f779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f77c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f77f:	e9 a9 00 00 00       	jmp    c000f82d <opcodeFault(regs*, void*)+0x164>
c000f784:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f787:	8a 00                	mov    al,BYTE PTR [eax]
c000f789:	3c 66                	cmp    al,0x66
c000f78b:	75 1b                	jne    c000f7a8 <opcodeFault(regs*, void*)+0xdf>
c000f78d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f791:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f797:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f79a:	8d 50 01             	lea    edx,[eax+0x1]
c000f79d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f7a3:	e9 85 00 00 00       	jmp    c000f82d <opcodeFault(regs*, void*)+0x164>
c000f7a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7ab:	8a 00                	mov    al,BYTE PTR [eax]
c000f7ad:	3c 67                	cmp    al,0x67
c000f7af:	75 18                	jne    c000f7c9 <opcodeFault(regs*, void*)+0x100>
c000f7b1:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f7b5:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f7b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7be:	8d 50 01             	lea    edx,[eax+0x1]
c000f7c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7c4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f7c7:	eb 64                	jmp    c000f82d <opcodeFault(regs*, void*)+0x164>
c000f7c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7cc:	8a 00                	mov    al,BYTE PTR [eax]
c000f7ce:	3c 2e                	cmp    al,0x2e
c000f7d0:	74 09                	je     c000f7db <opcodeFault(regs*, void*)+0x112>
c000f7d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7d5:	8a 00                	mov    al,BYTE PTR [eax]
c000f7d7:	3c 3e                	cmp    al,0x3e
c000f7d9:	75 18                	jne    c000f7f3 <opcodeFault(regs*, void*)+0x12a>
c000f7db:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f7df:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f7e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7e5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f7e8:	8d 50 01             	lea    edx,[eax+0x1]
c000f7eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f7ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f7f1:	eb 3a                	jmp    c000f82d <opcodeFault(regs*, void*)+0x164>
c000f7f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7f6:	8a 00                	mov    al,BYTE PTR [eax]
c000f7f8:	3c 36                	cmp    al,0x36
c000f7fa:	74 1b                	je     c000f817 <opcodeFault(regs*, void*)+0x14e>
c000f7fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7ff:	8a 00                	mov    al,BYTE PTR [eax]
c000f801:	3c 26                	cmp    al,0x26
c000f803:	74 12                	je     c000f817 <opcodeFault(regs*, void*)+0x14e>
c000f805:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f808:	8a 00                	mov    al,BYTE PTR [eax]
c000f80a:	3c 64                	cmp    al,0x64
c000f80c:	74 09                	je     c000f817 <opcodeFault(regs*, void*)+0x14e>
c000f80e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f811:	8a 00                	mov    al,BYTE PTR [eax]
c000f813:	3c 65                	cmp    al,0x65
c000f815:	75 16                	jne    c000f82d <opcodeFault(regs*, void*)+0x164>
c000f817:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f81b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f81e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f821:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f824:	8d 50 01             	lea    edx,[eax+0x1]
c000f827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f82a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f82d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f830:	8a 00                	mov    al,BYTE PTR [eax]
c000f832:	3c 0f                	cmp    al,0xf
c000f834:	0f 85 8d 01 00 00    	jne    c000f9c7 <opcodeFault(regs*, void*)+0x2fe>
c000f83a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f83d:	40                   	inc    eax
c000f83e:	8a 00                	mov    al,BYTE PTR [eax]
c000f840:	3c c7                	cmp    al,0xc7
c000f842:	0f 85 7f 01 00 00    	jne    c000f9c7 <opcodeFault(regs*, void*)+0x2fe>
c000f848:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f84b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f84e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f851:	8d 50 01             	lea    edx,[eax+0x1]
c000f854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f857:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f85a:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f85d:	50                   	push   eax
c000f85e:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f861:	50                   	push   eax
c000f862:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f865:	50                   	push   eax
c000f866:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f869:	e8 dc 4f 00 00       	call   c001484a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f86e:	83 c4 10             	add    esp,0x10
c000f871:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f874:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f877:	83 f0 01             	xor    eax,0x1
c000f87a:	84 c0                	test   al,al
c000f87c:	0f 84 45 01 00 00    	je     c000f9c7 <opcodeFault(regs*, void*)+0x2fe>
c000f882:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f885:	3c 01                	cmp    al,0x1
c000f887:	0f 85 3a 01 00 00    	jne    c000f9c7 <opcodeFault(regs*, void*)+0x2fe>
c000f88d:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f890:	83 f0 01             	xor    eax,0x1
c000f893:	84 c0                	test   al,al
c000f895:	0f 84 2c 01 00 00    	je     c000f9c7 <opcodeFault(regs*, void*)+0x2fe>
c000f89b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f89e:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f8a1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f8a4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f8ab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f8ae:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f8b1:	89 c2                	mov    edx,eax
c000f8b3:	b8 00 00 00 00       	mov    eax,0x0
c000f8b8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f8bb:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f8be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8c1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f8c4:	ba 00 00 00 00       	mov    edx,0x0
c000f8c9:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f8cc:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f8cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8d2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f8d5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f8d8:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f8df:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f8e2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f8e5:	89 c2                	mov    edx,eax
c000f8e7:	b8 00 00 00 00       	mov    eax,0x0
c000f8ec:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f8ef:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f8f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8f5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f8f8:	ba 00 00 00 00       	mov    edx,0x0
c000f8fd:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f900:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f903:	fa                   	cli    
c000f904:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000f909:	40                   	inc    eax
c000f90a:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c000f90f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f912:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f915:	8b 00                	mov    eax,DWORD PTR [eax]
c000f917:	89 c1                	mov    ecx,eax
c000f919:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f91c:	89 cb                	mov    ebx,ecx
c000f91e:	89 d0                	mov    eax,edx
c000f920:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f923:	89 c6                	mov    esi,eax
c000f925:	89 f0                	mov    eax,esi
c000f927:	09 d8                	or     eax,ebx
c000f929:	85 c0                	test   eax,eax
c000f92b:	75 21                	jne    c000f94e <opcodeFault(regs*, void*)+0x285>
c000f92d:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f930:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f933:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f936:	89 01                	mov    DWORD PTR [ecx],eax
c000f938:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f93b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f93e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f941:	83 c8 40             	or     eax,0x40
c000f944:	89 c2                	mov    edx,eax
c000f946:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f949:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f94c:	eb 3e                	jmp    c000f98c <opcodeFault(regs*, void*)+0x2c3>
c000f94e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f951:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f954:	8b 00                	mov    eax,DWORD PTR [eax]
c000f956:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f959:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f95c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f95f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f962:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f965:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f968:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f96b:	89 d0                	mov    eax,edx
c000f96d:	31 d2                	xor    edx,edx
c000f96f:	89 c3                	mov    ebx,eax
c000f971:	89 d6                	mov    esi,edx
c000f973:	89 da                	mov    edx,ebx
c000f975:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f978:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f97b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f97e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f981:	83 e0 bf             	and    eax,0xffffffbf
c000f984:	89 c2                	mov    edx,eax
c000f986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f989:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f98c:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000f991:	48                   	dec    eax
c000f992:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c000f997:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000f99c:	85 c0                	test   eax,eax
c000f99e:	75 01                	jne    c000f9a1 <opcodeFault(regs*, void*)+0x2d8>
c000f9a0:	fb                   	sti    
c000f9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f9a7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f9aa:	01 c2                	add    edx,eax
c000f9ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9af:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f9b2:	83 ec 0c             	sub    esp,0xc
c000f9b5:	68 67 5a 02 c0       	push   0xc0025a67
c000f9ba:	e8 a0 d6 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f9bf:	83 c4 10             	add    esp,0x10
c000f9c2:	e9 d5 00 00 00       	jmp    c000fa9c <opcodeFault(regs*, void*)+0x3d3>
c000f9c7:	83 ec 0c             	sub    esp,0xc
c000f9ca:	68 7a 5a 02 c0       	push   0xc0025a7a
c000f9cf:	e8 8b d6 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000f9d4:	83 c4 10             	add    esp,0x10
c000f9d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9da:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f9dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f9e3:	c1 e0 04             	shl    eax,0x4
c000f9e6:	01 d0                	add    eax,edx
c000f9e8:	83 c0 03             	add    eax,0x3
c000f9eb:	8a 00                	mov    al,BYTE PTR [eax]
c000f9ed:	0f b6 d8             	movzx  ebx,al
c000f9f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9f3:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f9f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f9fc:	c1 e0 04             	shl    eax,0x4
c000f9ff:	01 d0                	add    eax,edx
c000fa01:	83 c0 02             	add    eax,0x2
c000fa04:	8a 00                	mov    al,BYTE PTR [eax]
c000fa06:	0f b6 c8             	movzx  ecx,al
c000fa09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa0c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000fa0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa12:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fa15:	c1 e0 04             	shl    eax,0x4
c000fa18:	01 d0                	add    eax,edx
c000fa1a:	40                   	inc    eax
c000fa1b:	8a 00                	mov    al,BYTE PTR [eax]
c000fa1d:	0f b6 d0             	movzx  edx,al
c000fa20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa23:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000fa26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa29:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000fa2c:	c1 e0 04             	shl    eax,0x4
c000fa2f:	01 f0                	add    eax,esi
c000fa31:	8a 00                	mov    al,BYTE PTR [eax]
c000fa33:	0f b6 c0             	movzx  eax,al
c000fa36:	83 ec 0c             	sub    esp,0xc
c000fa39:	53                   	push   ebx
c000fa3a:	51                   	push   ecx
c000fa3b:	52                   	push   edx
c000fa3c:	50                   	push   eax
c000fa3d:	68 8c 5a 02 c0       	push   0xc0025a8c
c000fa42:	e8 18 d6 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000fa47:	83 c4 20             	add    esp,0x20
c000fa4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa4d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fa50:	83 c0 03             	add    eax,0x3
c000fa53:	8a 00                	mov    al,BYTE PTR [eax]
c000fa55:	0f b6 d8             	movzx  ebx,al
c000fa58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa5b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fa5e:	83 c0 02             	add    eax,0x2
c000fa61:	8a 00                	mov    al,BYTE PTR [eax]
c000fa63:	0f b6 c8             	movzx  ecx,al
c000fa66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa69:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fa6c:	40                   	inc    eax
c000fa6d:	8a 00                	mov    al,BYTE PTR [eax]
c000fa6f:	0f b6 d0             	movzx  edx,al
c000fa72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa75:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000fa78:	8a 00                	mov    al,BYTE PTR [eax]
c000fa7a:	0f b6 c0             	movzx  eax,al
c000fa7d:	83 ec 0c             	sub    esp,0xc
c000fa80:	53                   	push   ebx
c000fa81:	51                   	push   ecx
c000fa82:	52                   	push   edx
c000fa83:	50                   	push   eax
c000fa84:	68 b4 5a 02 c0       	push   0xc0025ab4
c000fa89:	e8 d1 d5 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c000fa8e:	83 c4 20             	add    esp,0x20
c000fa91:	83 ec 0c             	sub    esp,0xc
c000fa94:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fa97:	e8 be f5 ff ff       	call   c000f05a <displayDebugInfo(regs*)>
c000fa9c:	8d 65 f8             	lea    esp,[ebp-0x8]
c000fa9f:	5b                   	pop    ebx
c000faa0:	5e                   	pop    esi
c000faa1:	5d                   	pop    ebp
c000faa2:	c3                   	ret    

c000faa3 <displayProgramFault(char const*)>:
c000faa3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000faa8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000faab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000fab1:	85 c0                	test   eax,eax
c000fab3:	74 15                	je     c000faca <displayProgramFault(char const*)+0x27>
c000fab5:	83 ec 0c             	sub    esp,0xc
c000fab8:	6a 04                	push   0x4
c000faba:	6a 0f                	push   0xf
c000fabc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fac0:	50                   	push   eax
c000fac1:	e8 b0 b5 ff ff       	call   c000b076 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000fac6:	83 c4 1c             	add    esp,0x1c
c000fac9:	c3                   	ret    
c000faca:	c3                   	ret    

c000facb <setupInterruptController()>:
c000facb:	55                   	push   ebp
c000facc:	89 e5                	mov    ebp,esp
c000face:	53                   	push   ebx
c000facf:	83 ec 24             	sub    esp,0x24
c000fad2:	b8 00 00 00 00       	mov    eax,0x0
c000fad7:	85 c0                	test   eax,eax
c000fad9:	0f 95 c0             	setne  al
c000fadc:	84 c0                	test   al,al
c000fade:	74 5b                	je     c000fb3b <setupInterruptController()+0x70>
c000fae0:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000fae7:	83 ec 0c             	sub    esp,0xc
c000faea:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000faed:	e8 81 a2 ff ff       	call   c0009d73 <malloc>
c000faf2:	83 c4 10             	add    esp,0x10
c000faf5:	89 c3                	mov    ebx,eax
c000faf7:	83 ec 0c             	sub    esp,0xc
c000fafa:	53                   	push   ebx
c000fafb:	e8 bc 24 01 00       	call   c0021fbc <APIC::APIC()>
c000fb00:	83 c4 10             	add    esp,0x10
c000fb03:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000fb06:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000fb09:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fb0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb0e:	83 c0 08             	add    eax,0x8
c000fb11:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb13:	6a 00                	push   0x0
c000fb15:	6a 00                	push   0x0
c000fb17:	6a 00                	push   0x0
c000fb19:	52                   	push   edx
c000fb1a:	ff d0                	call   eax
c000fb1c:	83 c4 10             	add    esp,0x10
c000fb1f:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fb2a:	50                   	push   eax
c000fb2b:	e8 a2 ea ff ff       	call   c000e5d2 <Device::addChild(Device*)>
c000fb30:	83 c4 10             	add    esp,0x10
c000fb33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fb36:	e9 79 03 00 00       	jmp    c000feb4 <setupInterruptController()+0x3e9>
c000fb3b:	a0 a0 95 02 c0       	mov    al,ds:0xc00295a0
c000fb40:	84 c0                	test   al,al
c000fb42:	75 14                	jne    c000fb58 <setupInterruptController()+0x8d>
c000fb44:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000fb49:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000fb4f:	83 e2 fe             	and    edx,0xfffffffe
c000fb52:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000fb58:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000fb5d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000fb63:	83 e0 01             	and    eax,0x1
c000fb66:	84 c0                	test   al,al
c000fb68:	0f 95 c0             	setne  al
c000fb6b:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000fb6e:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000fb75:	83 ec 0c             	sub    esp,0xc
c000fb78:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000fb7b:	e8 f3 a1 ff ff       	call   c0009d73 <malloc>
c000fb80:	83 c4 10             	add    esp,0x10
c000fb83:	89 c3                	mov    ebx,eax
c000fb85:	83 ec 0c             	sub    esp,0xc
c000fb88:	53                   	push   ebx
c000fb89:	e8 86 29 01 00       	call   c0022514 <PIC::PIC()>
c000fb8e:	83 c4 10             	add    esp,0x10
c000fb91:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fb94:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fb97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb9a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb9c:	83 c0 08             	add    eax,0x8
c000fb9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fba1:	6a 00                	push   0x0
c000fba3:	6a 00                	push   0x0
c000fba5:	6a 00                	push   0x0
c000fba7:	52                   	push   edx
c000fba8:	ff d0                	call   eax
c000fbaa:	83 c4 10             	add    esp,0x10
c000fbad:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000fbb1:	74 73                	je     c000fc26 <setupInterruptController()+0x15b>
c000fbb3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fbb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbb9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbbb:	83 c0 0c             	add    eax,0xc
c000fbbe:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbc0:	6a 00                	push   0x0
c000fbc2:	6a 00                	push   0x0
c000fbc4:	6a 00                	push   0x0
c000fbc6:	52                   	push   edx
c000fbc7:	ff d0                	call   eax
c000fbc9:	83 c4 10             	add    esp,0x10
c000fbcc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fbd0:	74 15                	je     c000fbe7 <setupInterruptController()+0x11c>
c000fbd2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fbd5:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbd7:	83 c0 04             	add    eax,0x4
c000fbda:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbdc:	83 ec 0c             	sub    esp,0xc
c000fbdf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fbe2:	ff d0                	call   eax
c000fbe4:	83 c4 10             	add    esp,0x10
c000fbe7:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000fbee:	83 ec 0c             	sub    esp,0xc
c000fbf1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000fbf4:	e8 7a a1 ff ff       	call   c0009d73 <malloc>
c000fbf9:	83 c4 10             	add    esp,0x10
c000fbfc:	89 c3                	mov    ebx,eax
c000fbfe:	83 ec 0c             	sub    esp,0xc
c000fc01:	53                   	push   ebx
c000fc02:	e8 b5 23 01 00       	call   c0021fbc <APIC::APIC()>
c000fc07:	83 c4 10             	add    esp,0x10
c000fc0a:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000fc0d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000fc10:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc13:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc15:	83 c0 08             	add    eax,0x8
c000fc18:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc1a:	6a 00                	push   0x0
c000fc1c:	6a 00                	push   0x0
c000fc1e:	6a 00                	push   0x0
c000fc20:	52                   	push   edx
c000fc21:	ff d0                	call   eax
c000fc23:	83 c4 10             	add    esp,0x10
c000fc26:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c000fc2b:	83 ec 08             	sub    esp,0x8
c000fc2e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc31:	50                   	push   eax
c000fc32:	e8 9b e9 ff ff       	call   c000e5d2 <Device::addChild(Device*)>
c000fc37:	83 c4 10             	add    esp,0x10
c000fc3a:	c7 05 c8 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028dc8,0x0
c000fc44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc47:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc49:	83 c0 24             	add    eax,0x24
c000fc4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc4e:	6a 00                	push   0x0
c000fc50:	68 aa f6 00 c0       	push   0xc000f6aa
c000fc55:	6a 00                	push   0x0
c000fc57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc5a:	ff d0                	call   eax
c000fc5c:	83 c4 10             	add    esp,0x10
c000fc5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc62:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc64:	83 c0 24             	add    eax,0x24
c000fc67:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc69:	6a 00                	push   0x0
c000fc6b:	68 aa f6 00 c0       	push   0xc000f6aa
c000fc70:	6a 01                	push   0x1
c000fc72:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc75:	ff d0                	call   eax
c000fc77:	83 c4 10             	add    esp,0x10
c000fc7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc7d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc7f:	83 c0 24             	add    eax,0x24
c000fc82:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc84:	6a 00                	push   0x0
c000fc86:	68 b7 ee 00 c0       	push   0xc000eeb7
c000fc8b:	6a 02                	push   0x2
c000fc8d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fc90:	ff d0                	call   eax
c000fc92:	83 c4 10             	add    esp,0x10
c000fc95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fc98:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc9a:	83 c0 24             	add    eax,0x24
c000fc9d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc9f:	6a 00                	push   0x0
c000fca1:	68 aa f6 00 c0       	push   0xc000f6aa
c000fca6:	6a 03                	push   0x3
c000fca8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcab:	ff d0                	call   eax
c000fcad:	83 c4 10             	add    esp,0x10
c000fcb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcb3:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcb5:	83 c0 24             	add    eax,0x24
c000fcb8:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcba:	6a 00                	push   0x0
c000fcbc:	68 aa f6 00 c0       	push   0xc000f6aa
c000fcc1:	6a 04                	push   0x4
c000fcc3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcc6:	ff d0                	call   eax
c000fcc8:	83 c4 10             	add    esp,0x10
c000fccb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fcce:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd0:	83 c0 24             	add    eax,0x24
c000fcd3:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcd5:	6a 00                	push   0x0
c000fcd7:	68 aa f6 00 c0       	push   0xc000f6aa
c000fcdc:	6a 05                	push   0x5
c000fcde:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fce1:	ff d0                	call   eax
c000fce3:	83 c4 10             	add    esp,0x10
c000fce6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fce9:	8b 00                	mov    eax,DWORD PTR [eax]
c000fceb:	83 c0 24             	add    eax,0x24
c000fcee:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcf0:	6a 00                	push   0x0
c000fcf2:	68 c9 f6 00 c0       	push   0xc000f6c9
c000fcf7:	6a 06                	push   0x6
c000fcf9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fcfc:	ff d0                	call   eax
c000fcfe:	83 c4 10             	add    esp,0x10
c000fd01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd04:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd06:	83 c0 24             	add    eax,0x24
c000fd09:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd0b:	6a 00                	push   0x0
c000fd0d:	68 e9 f4 00 c0       	push   0xc000f4e9
c000fd12:	6a 07                	push   0x7
c000fd14:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd17:	ff d0                	call   eax
c000fd19:	83 c4 10             	add    esp,0x10
c000fd1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd1f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd21:	83 c0 24             	add    eax,0x24
c000fd24:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd26:	6a 00                	push   0x0
c000fd28:	68 d2 ec 00 c0       	push   0xc000ecd2
c000fd2d:	6a 08                	push   0x8
c000fd2f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd32:	ff d0                	call   eax
c000fd34:	83 c4 10             	add    esp,0x10
c000fd37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd3a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd3c:	83 c0 24             	add    eax,0x24
c000fd3f:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd41:	6a 00                	push   0x0
c000fd43:	68 aa f6 00 c0       	push   0xc000f6aa
c000fd48:	6a 09                	push   0x9
c000fd4a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd4d:	ff d0                	call   eax
c000fd4f:	83 c4 10             	add    esp,0x10
c000fd52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd55:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd57:	83 c0 24             	add    eax,0x24
c000fd5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd5c:	6a 00                	push   0x0
c000fd5e:	68 aa f6 00 c0       	push   0xc000f6aa
c000fd63:	6a 0a                	push   0xa
c000fd65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd68:	ff d0                	call   eax
c000fd6a:	83 c4 10             	add    esp,0x10
c000fd6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd70:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd72:	83 c0 24             	add    eax,0x24
c000fd75:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd77:	6a 00                	push   0x0
c000fd79:	68 aa f6 00 c0       	push   0xc000f6aa
c000fd7e:	6a 0b                	push   0xb
c000fd80:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd83:	ff d0                	call   eax
c000fd85:	83 c4 10             	add    esp,0x10
c000fd88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fd8b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd8d:	83 c0 24             	add    eax,0x24
c000fd90:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd92:	6a 00                	push   0x0
c000fd94:	68 aa f6 00 c0       	push   0xc000f6aa
c000fd99:	6a 0c                	push   0xc
c000fd9b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fd9e:	ff d0                	call   eax
c000fda0:	83 c4 10             	add    esp,0x10
c000fda3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fda6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fda8:	83 c0 24             	add    eax,0x24
c000fdab:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdad:	6a 00                	push   0x0
c000fdaf:	68 22 f6 00 c0       	push   0xc000f622
c000fdb4:	6a 0d                	push   0xd
c000fdb6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdb9:	ff d0                	call   eax
c000fdbb:	83 c4 10             	add    esp,0x10
c000fdbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdc1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdc3:	83 c0 24             	add    eax,0x24
c000fdc6:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdc8:	6a 00                	push   0x0
c000fdca:	68 5b f6 00 c0       	push   0xc000f65b
c000fdcf:	6a 0e                	push   0xe
c000fdd1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdd4:	ff d0                	call   eax
c000fdd6:	83 c4 10             	add    esp,0x10
c000fdd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fddc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdde:	83 c0 24             	add    eax,0x24
c000fde1:	8b 00                	mov    eax,DWORD PTR [eax]
c000fde3:	6a 00                	push   0x0
c000fde5:	68 aa f6 00 c0       	push   0xc000f6aa
c000fdea:	6a 0f                	push   0xf
c000fdec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fdef:	ff d0                	call   eax
c000fdf1:	83 c4 10             	add    esp,0x10
c000fdf4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fdf7:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdf9:	83 c0 24             	add    eax,0x24
c000fdfc:	8b 00                	mov    eax,DWORD PTR [eax]
c000fdfe:	6a 00                	push   0x0
c000fe00:	68 aa f6 00 c0       	push   0xc000f6aa
c000fe05:	6a 10                	push   0x10
c000fe07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe0a:	ff d0                	call   eax
c000fe0c:	83 c4 10             	add    esp,0x10
c000fe0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe12:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe14:	83 c0 24             	add    eax,0x24
c000fe17:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe19:	6a 00                	push   0x0
c000fe1b:	68 aa f6 00 c0       	push   0xc000f6aa
c000fe20:	6a 11                	push   0x11
c000fe22:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe25:	ff d0                	call   eax
c000fe27:	83 c4 10             	add    esp,0x10
c000fe2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe2d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe2f:	83 c0 24             	add    eax,0x24
c000fe32:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe34:	6a 00                	push   0x0
c000fe36:	68 aa f6 00 c0       	push   0xc000f6aa
c000fe3b:	6a 12                	push   0x12
c000fe3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe40:	ff d0                	call   eax
c000fe42:	83 c4 10             	add    esp,0x10
c000fe45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe48:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe4a:	83 c0 24             	add    eax,0x24
c000fe4d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe4f:	6a 00                	push   0x0
c000fe51:	68 aa f6 00 c0       	push   0xc000f6aa
c000fe56:	6a 13                	push   0x13
c000fe58:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe5b:	ff d0                	call   eax
c000fe5d:	83 c4 10             	add    esp,0x10
c000fe60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe63:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe65:	83 c0 24             	add    eax,0x24
c000fe68:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe6a:	6a 00                	push   0x0
c000fe6c:	68 aa f6 00 c0       	push   0xc000f6aa
c000fe71:	6a 14                	push   0x14
c000fe73:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe76:	ff d0                	call   eax
c000fe78:	83 c4 10             	add    esp,0x10
c000fe7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe7e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe80:	83 c0 24             	add    eax,0x24
c000fe83:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe85:	6a 00                	push   0x0
c000fe87:	68 aa f6 00 c0       	push   0xc000f6aa
c000fe8c:	6a 1e                	push   0x1e
c000fe8e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000fe91:	ff d0                	call   eax
c000fe93:	83 c4 10             	add    esp,0x10
c000fe96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe99:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe9b:	83 c0 24             	add    eax,0x24
c000fe9e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fea0:	6a 00                	push   0x0
c000fea2:	68 df 75 01 c0       	push   0xc00175df
c000fea7:	6a 60                	push   0x60
c000fea9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000feac:	ff d0                	call   eax
c000feae:	83 c4 10             	add    esp,0x10
c000feb1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000feb4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000feb7:	c9                   	leave  
c000feb8:	c3                   	ret    
c000feb9:	90                   	nop

c000feba <InterruptController::convertLegacyIRQNumber(int)>:
c000feba:	55                   	push   ebp
c000febb:	89 e5                	mov    ebp,esp
c000febd:	83 ec 08             	sub    esp,0x8
c000fec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fec3:	83 ec 0c             	sub    esp,0xc
c000fec6:	50                   	push   eax
c000fec7:	e8 06 ea ff ff       	call   c000e8d2 <Device::getName()>
c000fecc:	83 c4 10             	add    esp,0x10
c000fecf:	8a 00                	mov    al,BYTE PTR [eax]
c000fed1:	3c 41                	cmp    al,0x41
c000fed3:	0f 94 c0             	sete   al
c000fed6:	84 c0                	test   al,al
c000fed8:	74 28                	je     c000ff02 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000feda:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000fede:	7f 12                	jg     c000fef2 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000fee0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fee3:	05 80 83 02 c0       	add    eax,0xc0028380
c000fee8:	8a 00                	mov    al,BYTE PTR [eax]
c000feea:	0f b6 c0             	movzx  eax,al
c000feed:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000fef0:	eb 10                	jmp    c000ff02 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fef2:	83 ec 0c             	sub    esp,0xc
c000fef5:	68 dc 5a 02 c0       	push   0xc0025adc
c000fefa:	e8 32 52 00 00       	call   c0015131 <Krnl::panic(char const*)>
c000feff:	83 c4 10             	add    esp,0x10
c000ff02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ff05:	c9                   	leave  
c000ff06:	c3                   	ret    
c000ff07:	90                   	nop

c000ff08 <startGUI(void*)>:
c000ff08:	55                   	push   ebp
c000ff09:	89 e5                	mov    ebp,esp
c000ff0b:	53                   	push   ebx
c000ff0c:	83 ec 04             	sub    esp,0x4
c000ff0f:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000ff14:	48                   	dec    eax
c000ff15:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c000ff1a:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000ff1f:	85 c0                	test   eax,eax
c000ff21:	75 01                	jne    c000ff24 <startGUI(void*)+0x1c>
c000ff23:	fb                   	sti    
c000ff24:	8b 1d 88 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c88
c000ff2a:	83 ec 08             	sub    esp,0x8
c000ff2d:	6a 01                	push   0x1
c000ff2f:	68 5c 5b 02 c0       	push   0xc0025b5c
c000ff34:	e8 81 86 00 00       	call   c00185ba <Thr::loadDLL(char const*, bool)>
c000ff39:	83 c4 10             	add    esp,0x10
c000ff3c:	83 ec 08             	sub    esp,0x8
c000ff3f:	53                   	push   ebx
c000ff40:	50                   	push   eax
c000ff41:	e8 a5 88 00 00       	call   c00187eb <Thr::executeDLL(unsigned long, void*)>
c000ff46:	83 c4 10             	add    esp,0x10
c000ff49:	8b 1d 88 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c88
c000ff4f:	83 ec 08             	sub    esp,0x8
c000ff52:	6a 01                	push   0x1
c000ff54:	68 76 5b 02 c0       	push   0xc0025b76
c000ff59:	e8 5c 86 00 00       	call   c00185ba <Thr::loadDLL(char const*, bool)>
c000ff5e:	83 c4 10             	add    esp,0x10
c000ff61:	83 ec 08             	sub    esp,0x8
c000ff64:	53                   	push   ebx
c000ff65:	50                   	push   eax
c000ff66:	e8 80 88 00 00       	call   c00187eb <Thr::executeDLL(unsigned long, void*)>
c000ff6b:	83 c4 10             	add    esp,0x10
c000ff6e:	90                   	nop
c000ff6f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ff72:	c9                   	leave  
c000ff73:	c3                   	ret    

c000ff74 <startGUIVESA(void*)>:
c000ff74:	55                   	push   ebp
c000ff75:	89 e5                	mov    ebp,esp
c000ff77:	53                   	push   ebx
c000ff78:	83 ec 04             	sub    esp,0x4
c000ff7b:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000ff80:	48                   	dec    eax
c000ff81:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c000ff86:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c000ff8b:	85 c0                	test   eax,eax
c000ff8d:	75 01                	jne    c000ff90 <startGUIVESA(void*)+0x1c>
c000ff8f:	fb                   	sti    
c000ff90:	8b 1d 88 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c88
c000ff96:	83 ec 08             	sub    esp,0x8
c000ff99:	6a 01                	push   0x1
c000ff9b:	68 94 5b 02 c0       	push   0xc0025b94
c000ffa0:	e8 15 86 00 00       	call   c00185ba <Thr::loadDLL(char const*, bool)>
c000ffa5:	83 c4 10             	add    esp,0x10
c000ffa8:	83 ec 08             	sub    esp,0x8
c000ffab:	53                   	push   ebx
c000ffac:	50                   	push   eax
c000ffad:	e8 39 88 00 00       	call   c00187eb <Thr::executeDLL(unsigned long, void*)>
c000ffb2:	83 c4 10             	add    esp,0x10
c000ffb5:	8b 1d 88 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c88
c000ffbb:	83 ec 08             	sub    esp,0x8
c000ffbe:	6a 01                	push   0x1
c000ffc0:	68 76 5b 02 c0       	push   0xc0025b76
c000ffc5:	e8 f0 85 00 00       	call   c00185ba <Thr::loadDLL(char const*, bool)>
c000ffca:	83 c4 10             	add    esp,0x10
c000ffcd:	83 ec 08             	sub    esp,0x8
c000ffd0:	53                   	push   ebx
c000ffd1:	50                   	push   eax
c000ffd2:	e8 14 88 00 00       	call   c00187eb <Thr::executeDLL(unsigned long, void*)>
c000ffd7:	83 c4 10             	add    esp,0x10
c000ffda:	90                   	nop
c000ffdb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ffde:	c9                   	leave  
c000ffdf:	c3                   	ret    

c000ffe0 <sendKeyToTerminal(unsigned char)>:
c000ffe0:	55                   	push   ebp
c000ffe1:	89 e5                	mov    ebp,esp
c000ffe3:	83 ec 28             	sub    esp,0x28
c000ffe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffe9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000ffec:	a1 04 8d 02 c0       	mov    eax,ds:0xc0028d04
c000fff1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000fff5:	83 ec 08             	sub    esp,0x8
c000fff8:	52                   	push   edx
c000fff9:	50                   	push   eax
c000fffa:	e8 1d b5 ff ff       	call   c000b51c <VgaText::receiveKey(unsigned char)>
c000ffff:	83 c4 10             	add    esp,0x10
c0010002:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0010006:	0f 85 8f 00 00 00    	jne    c001009b <sendKeyToTerminal(unsigned char)+0xbb>
c001000c:	fa                   	cli    
c001000d:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0010012:	40                   	inc    eax
c0010013:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0010018:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c001001d:	40                   	inc    eax
c001001e:	a3 a4 a1 02 c0       	mov    ds:0xc002a1a4,eax
c0010023:	a1 e0 8d 02 c0       	mov    eax,ds:0xc0028de0
c0010028:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001002b:	c7 05 e0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028de0,0x0
c0010035:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0010039:	74 1f                	je     c001005a <sendKeyToTerminal(unsigned char)+0x7a>
c001003b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001003e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0010041:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0010044:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010047:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001004a:	83 ec 0c             	sub    esp,0xc
c001004d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010050:	e8 07 94 00 00       	call   c001945c <unblockTask(ThreadControlBlock*)>
c0010055:	83 c4 10             	add    esp,0x10
c0010058:	eb db                	jmp    c0010035 <sendKeyToTerminal(unsigned char)+0x55>
c001005a:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c001005f:	48                   	dec    eax
c0010060:	a3 a4 a1 02 c0       	mov    ds:0xc002a1a4,eax
c0010065:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c001006a:	85 c0                	test   eax,eax
c001006c:	75 18                	jne    c0010086 <sendKeyToTerminal(unsigned char)+0xa6>
c001006e:	a1 a0 a1 02 c0       	mov    eax,ds:0xc002a1a0
c0010073:	85 c0                	test   eax,eax
c0010075:	74 0f                	je     c0010086 <sendKeyToTerminal(unsigned char)+0xa6>
c0010077:	c7 05 a0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1a0,0x0
c0010081:	e8 1a 8f 00 00       	call   c0018fa0 <schedule()>
c0010086:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c001008b:	48                   	dec    eax
c001008c:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0010091:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0010096:	85 c0                	test   eax,eax
c0010098:	75 01                	jne    c001009b <sendKeyToTerminal(unsigned char)+0xbb>
c001009a:	fb                   	sti    
c001009b:	90                   	nop
c001009c:	c9                   	leave  
c001009d:	c3                   	ret    

c001009e <sendKeyboardToken(KeyboardToken)>:
c001009e:	55                   	push   ebp
c001009f:	89 e5                	mov    ebp,esp
c00100a1:	83 ec 18             	sub    esp,0x18
c00100a4:	e8 61 53 00 00       	call   c001540a <Krnl::userIOReceived()>
c00100a9:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00100ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100af:	0f b7 c0             	movzx  eax,ax
c00100b2:	83 f2 01             	xor    edx,0x1
c00100b5:	88 90 00 8e 02 c0    	mov    BYTE PTR [eax-0x3ffd7200],dl
c00100bb:	a1 e8 8d 02 c0       	mov    eax,ds:0xc0028de8
c00100c0:	85 c0                	test   eax,eax
c00100c2:	74 24                	je     c00100e8 <sendKeyboardToken(KeyboardToken)+0x4a>
c00100c4:	8b 0d e8 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028de8
c00100ca:	83 ec 04             	sub    esp,0x4
c00100cd:	68 00 8e 02 c0       	push   0xc0028e00
c00100d2:	83 ec 08             	sub    esp,0x8
c00100d5:	89 e2                	mov    edx,esp
c00100d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100da:	89 02                	mov    DWORD PTR [edx],eax
c00100dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00100df:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00100e3:	ff d1                	call   ecx
c00100e5:	83 c4 10             	add    esp,0x10
c00100e8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00100ec:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00100ef:	a0 08 92 02 c0       	mov    al,ds:0xc0029208
c00100f4:	38 c2                	cmp    dl,al
c00100f6:	74 1c                	je     c0010114 <sendKeyboardToken(KeyboardToken)+0x76>
c00100f8:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00100fb:	a2 08 92 02 c0       	mov    ds:0xc0029208,al
c0010100:	a0 08 92 02 c0       	mov    al,ds:0xc0029208
c0010105:	0f b6 c0             	movzx  eax,al
c0010108:	83 ec 0c             	sub    esp,0xc
c001010b:	50                   	push   eax
c001010c:	e8 4d aa ff ff       	call   c000ab5e <setTerminalScrollLock(bool)>
c0010111:	83 c4 10             	add    esp,0x10
c0010114:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0010117:	84 c0                	test   al,al
c0010119:	0f 84 ae 00 00 00    	je     c00101cd <sendKeyboardToken(KeyboardToken)+0x12f>
c001011f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010122:	66 3d 10 03          	cmp    ax,0x310
c0010126:	75 06                	jne    c001012e <sendKeyboardToken(KeyboardToken)+0x90>
c0010128:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001012e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010131:	66 3d 11 03          	cmp    ax,0x311
c0010135:	75 06                	jne    c001013d <sendKeyboardToken(KeyboardToken)+0x9f>
c0010137:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001013d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010140:	66 3d 12 03          	cmp    ax,0x312
c0010144:	75 06                	jne    c001014c <sendKeyboardToken(KeyboardToken)+0xae>
c0010146:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001014c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001014f:	66 3d 13 03          	cmp    ax,0x313
c0010153:	75 06                	jne    c001015b <sendKeyboardToken(KeyboardToken)+0xbd>
c0010155:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001015b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001015e:	66 3d 14 03          	cmp    ax,0x314
c0010162:	75 06                	jne    c001016a <sendKeyboardToken(KeyboardToken)+0xcc>
c0010164:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001016a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001016d:	66 3d 15 03          	cmp    ax,0x315
c0010171:	75 06                	jne    c0010179 <sendKeyboardToken(KeyboardToken)+0xdb>
c0010173:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0010179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001017c:	66 3d 16 03          	cmp    ax,0x316
c0010180:	75 06                	jne    c0010188 <sendKeyboardToken(KeyboardToken)+0xea>
c0010182:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0010188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001018b:	66 3d 17 03          	cmp    ax,0x317
c001018f:	75 06                	jne    c0010197 <sendKeyboardToken(KeyboardToken)+0xf9>
c0010191:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0010197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001019a:	66 3d 18 03          	cmp    ax,0x318
c001019e:	75 06                	jne    c00101a6 <sendKeyboardToken(KeyboardToken)+0x108>
c00101a0:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00101a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101a9:	66 3d 19 03          	cmp    ax,0x319
c00101ad:	75 06                	jne    c00101b5 <sendKeyboardToken(KeyboardToken)+0x117>
c00101af:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00101b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101b8:	66 3d 1a 03          	cmp    ax,0x31a
c00101bc:	0f 85 c9 00 00 00    	jne    c001028b <sendKeyboardToken(KeyboardToken)+0x1ed>
c00101c2:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00101c8:	e9 be 00 00 00       	jmp    c001028b <sendKeyboardToken(KeyboardToken)+0x1ed>
c00101cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101d0:	66 3d 10 03          	cmp    ax,0x310
c00101d4:	75 0a                	jne    c00101e0 <sendKeyboardToken(KeyboardToken)+0x142>
c00101d6:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00101dc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00101e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101e3:	66 3d 11 03          	cmp    ax,0x311
c00101e7:	75 0a                	jne    c00101f3 <sendKeyboardToken(KeyboardToken)+0x155>
c00101e9:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00101ef:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00101f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00101f6:	66 3d 12 03          	cmp    ax,0x312
c00101fa:	75 0a                	jne    c0010206 <sendKeyboardToken(KeyboardToken)+0x168>
c00101fc:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0010202:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010206:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010209:	66 3d 13 03          	cmp    ax,0x313
c001020d:	75 0a                	jne    c0010219 <sendKeyboardToken(KeyboardToken)+0x17b>
c001020f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0010215:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010219:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001021c:	66 3d 14 03          	cmp    ax,0x314
c0010220:	75 0a                	jne    c001022c <sendKeyboardToken(KeyboardToken)+0x18e>
c0010222:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0010228:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001022c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001022f:	66 3d 15 03          	cmp    ax,0x315
c0010233:	75 0a                	jne    c001023f <sendKeyboardToken(KeyboardToken)+0x1a1>
c0010235:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001023b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001023f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010242:	66 3d 16 03          	cmp    ax,0x316
c0010246:	75 0a                	jne    c0010252 <sendKeyboardToken(KeyboardToken)+0x1b4>
c0010248:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001024e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010252:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010255:	66 3d 17 03          	cmp    ax,0x317
c0010259:	75 0a                	jne    c0010265 <sendKeyboardToken(KeyboardToken)+0x1c7>
c001025b:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0010261:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010268:	66 3d 18 03          	cmp    ax,0x318
c001026c:	75 0a                	jne    c0010278 <sendKeyboardToken(KeyboardToken)+0x1da>
c001026e:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0010274:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0010278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001027b:	66 3d 19 03          	cmp    ax,0x319
c001027f:	75 0a                	jne    c001028b <sendKeyboardToken(KeyboardToken)+0x1ed>
c0010281:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0010287:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001028b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001028e:	66 3d 00 02          	cmp    ax,0x200
c0010292:	75 2c                	jne    c00102c0 <sendKeyboardToken(KeyboardToken)+0x222>
c0010294:	a0 00 92 02 c0       	mov    al,ds:0xc0029200
c0010299:	83 f0 01             	xor    eax,0x1
c001029c:	84 c0                	test   al,al
c001029e:	74 20                	je     c00102c0 <sendKeyboardToken(KeyboardToken)+0x222>
c00102a0:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c00102a5:	6a 01                	push   0x1
c00102a7:	6a 00                	push   0x0
c00102a9:	68 08 ff 00 c0       	push   0xc000ff08
c00102ae:	50                   	push   eax
c00102af:	e8 d0 8a 00 00       	call   c0018d84 <Process::createThread(void (*)(void*), void*, int)>
c00102b4:	83 c4 10             	add    esp,0x10
c00102b7:	c6 05 00 92 02 c0 01 	mov    BYTE PTR ds:0xc0029200,0x1
c00102be:	eb 33                	jmp    c00102f3 <sendKeyboardToken(KeyboardToken)+0x255>
c00102c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102c3:	66 3d 01 02          	cmp    ax,0x201
c00102c7:	75 2a                	jne    c00102f3 <sendKeyboardToken(KeyboardToken)+0x255>
c00102c9:	a0 00 92 02 c0       	mov    al,ds:0xc0029200
c00102ce:	83 f0 01             	xor    eax,0x1
c00102d1:	84 c0                	test   al,al
c00102d3:	74 1e                	je     c00102f3 <sendKeyboardToken(KeyboardToken)+0x255>
c00102d5:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c00102da:	6a 01                	push   0x1
c00102dc:	6a 00                	push   0x0
c00102de:	68 74 ff 00 c0       	push   0xc000ff74
c00102e3:	50                   	push   eax
c00102e4:	e8 9b 8a 00 00       	call   c0018d84 <Process::createThread(void (*)(void*), void*, int)>
c00102e9:	83 c4 10             	add    esp,0x10
c00102ec:	c6 05 00 92 02 c0 01 	mov    BYTE PTR ds:0xc0029200,0x1
c00102f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00102f6:	66 3d 1d 03          	cmp    ax,0x31d
c00102fa:	75 06                	jne    c0010302 <sendKeyboardToken(KeyboardToken)+0x264>
c00102fc:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0010302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010305:	66 3d 1c 03          	cmp    ax,0x31c
c0010309:	75 06                	jne    c0010311 <sendKeyboardToken(KeyboardToken)+0x273>
c001030b:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0010311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010314:	66 3d 1b 03          	cmp    ax,0x31b
c0010318:	75 06                	jne    c0010320 <sendKeyboardToken(KeyboardToken)+0x282>
c001031a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0010320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010323:	66 3d 1e 03          	cmp    ax,0x31e
c0010327:	75 06                	jne    c001032f <sendKeyboardToken(KeyboardToken)+0x291>
c0010329:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001032f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010332:	66 3d 1f 03          	cmp    ax,0x31f
c0010336:	75 06                	jne    c001033e <sendKeyboardToken(KeyboardToken)+0x2a0>
c0010338:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001033e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010341:	66 3d 1a 03          	cmp    ax,0x31a
c0010345:	75 06                	jne    c001034d <sendKeyboardToken(KeyboardToken)+0x2af>
c0010347:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001034d:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0010351:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010354:	83 f0 01             	xor    eax,0x1
c0010357:	84 c0                	test   al,al
c0010359:	74 77                	je     c00103d2 <sendKeyboardToken(KeyboardToken)+0x334>
c001035b:	a0 01 8f 02 c0       	mov    al,ds:0xc0028f01
c0010360:	84 c0                	test   al,al
c0010362:	74 41                	je     c00103a5 <sendKeyboardToken(KeyboardToken)+0x307>
c0010364:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0010368:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001036c:	74 2b                	je     c0010399 <sendKeyboardToken(KeyboardToken)+0x2fb>
c001036e:	8b 15 04 92 02 c0    	mov    edx,DWORD PTR ds:0xc0029204
c0010374:	89 d0                	mov    eax,edx
c0010376:	c1 e0 02             	shl    eax,0x2
c0010379:	01 d0                	add    eax,edx
c001037b:	01 c0                	add    eax,eax
c001037d:	a3 04 92 02 c0       	mov    ds:0xc0029204,eax
c0010382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010385:	0f b7 c0             	movzx  eax,ax
c0010388:	8d 50 d0             	lea    edx,[eax-0x30]
c001038b:	a1 04 92 02 c0       	mov    eax,ds:0xc0029204
c0010390:	01 d0                	add    eax,edx
c0010392:	a3 04 92 02 c0       	mov    ds:0xc0029204,eax
c0010397:	eb 6d                	jmp    c0010406 <sendKeyboardToken(KeyboardToken)+0x368>
c0010399:	c7 05 04 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029204,0x0
c00103a3:	eb 61                	jmp    c0010406 <sendKeyboardToken(KeyboardToken)+0x368>
c00103a5:	a1 04 92 02 c0       	mov    eax,ds:0xc0029204
c00103aa:	85 c0                	test   eax,eax
c00103ac:	74 18                	je     c00103c6 <sendKeyboardToken(KeyboardToken)+0x328>
c00103ae:	a1 04 92 02 c0       	mov    eax,ds:0xc0029204
c00103b3:	0f b6 c0             	movzx  eax,al
c00103b6:	83 ec 0c             	sub    esp,0xc
c00103b9:	50                   	push   eax
c00103ba:	e8 21 fc ff ff       	call   c000ffe0 <sendKeyToTerminal(unsigned char)>
c00103bf:	83 c4 10             	add    esp,0x10
c00103c2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00103c6:	c7 05 04 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029204,0x0
c00103d0:	eb 34                	jmp    c0010406 <sendKeyboardToken(KeyboardToken)+0x368>
c00103d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00103d5:	66 3d 01 01          	cmp    ax,0x101
c00103d9:	75 2b                	jne    c0010406 <sendKeyboardToken(KeyboardToken)+0x368>
c00103db:	a1 04 92 02 c0       	mov    eax,ds:0xc0029204
c00103e0:	85 c0                	test   eax,eax
c00103e2:	74 18                	je     c00103fc <sendKeyboardToken(KeyboardToken)+0x35e>
c00103e4:	a1 04 92 02 c0       	mov    eax,ds:0xc0029204
c00103e9:	0f b6 c0             	movzx  eax,al
c00103ec:	83 ec 0c             	sub    esp,0xc
c00103ef:	50                   	push   eax
c00103f0:	e8 eb fb ff ff       	call   c000ffe0 <sendKeyToTerminal(unsigned char)>
c00103f5:	83 c4 10             	add    esp,0x10
c00103f8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00103fc:	c7 05 04 92 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029204,0x0
c0010406:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010409:	83 f0 01             	xor    eax,0x1
c001040c:	84 c0                	test   al,al
c001040e:	74 4c                	je     c001045c <sendKeyboardToken(KeyboardToken)+0x3be>
c0010410:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010413:	83 f0 01             	xor    eax,0x1
c0010416:	84 c0                	test   al,al
c0010418:	74 42                	je     c001045c <sendKeyboardToken(KeyboardToken)+0x3be>
c001041a:	a0 00 8f 02 c0       	mov    al,ds:0xc0028f00
c001041f:	83 f0 01             	xor    eax,0x1
c0010422:	84 c0                	test   al,al
c0010424:	74 36                	je     c001045c <sendKeyboardToken(KeyboardToken)+0x3be>
c0010426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010429:	66 83 f8 1f          	cmp    ax,0x1f
c001042d:	76 09                	jbe    c0010438 <sendKeyboardToken(KeyboardToken)+0x39a>
c001042f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010432:	66 83 f8 7e          	cmp    ax,0x7e
c0010436:	76 12                	jbe    c001044a <sendKeyboardToken(KeyboardToken)+0x3ac>
c0010438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001043b:	66 83 f8 0a          	cmp    ax,0xa
c001043f:	74 09                	je     c001044a <sendKeyboardToken(KeyboardToken)+0x3ac>
c0010441:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010444:	66 83 f8 08          	cmp    ax,0x8
c0010448:	75 12                	jne    c001045c <sendKeyboardToken(KeyboardToken)+0x3be>
c001044a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001044d:	0f b6 c0             	movzx  eax,al
c0010450:	83 ec 0c             	sub    esp,0xc
c0010453:	50                   	push   eax
c0010454:	e8 87 fb ff ff       	call   c000ffe0 <sendKeyToTerminal(unsigned char)>
c0010459:	83 c4 10             	add    esp,0x10
c001045c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001045f:	83 f0 01             	xor    eax,0x1
c0010462:	84 c0                	test   al,al
c0010464:	74 4f                	je     c00104b5 <sendKeyboardToken(KeyboardToken)+0x417>
c0010466:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010469:	83 f0 01             	xor    eax,0x1
c001046c:	84 c0                	test   al,al
c001046e:	74 45                	je     c00104b5 <sendKeyboardToken(KeyboardToken)+0x417>
c0010470:	a0 00 8f 02 c0       	mov    al,ds:0xc0028f00
c0010475:	84 c0                	test   al,al
c0010477:	74 3c                	je     c00104b5 <sendKeyboardToken(KeyboardToken)+0x417>
c0010479:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001047c:	66 83 f8 3f          	cmp    ax,0x3f
c0010480:	76 33                	jbe    c00104b5 <sendKeyboardToken(KeyboardToken)+0x417>
c0010482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010485:	66 83 f8 7f          	cmp    ax,0x7f
c0010489:	77 2a                	ja     c00104b5 <sendKeyboardToken(KeyboardToken)+0x417>
c001048b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001048e:	88 c2                	mov    dl,al
c0010490:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010493:	66 83 f8 5f          	cmp    ax,0x5f
c0010497:	76 04                	jbe    c001049d <sendKeyboardToken(KeyboardToken)+0x3ff>
c0010499:	b0 20                	mov    al,0x20
c001049b:	eb 02                	jmp    c001049f <sendKeyboardToken(KeyboardToken)+0x401>
c001049d:	b0 00                	mov    al,0x0
c001049f:	29 c2                	sub    edx,eax
c00104a1:	88 d0                	mov    al,dl
c00104a3:	83 e8 40             	sub    eax,0x40
c00104a6:	0f b6 c0             	movzx  eax,al
c00104a9:	83 ec 0c             	sub    esp,0xc
c00104ac:	50                   	push   eax
c00104ad:	e8 2e fb ff ff       	call   c000ffe0 <sendKeyToTerminal(unsigned char)>
c00104b2:	83 c4 10             	add    esp,0x10
c00104b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104b8:	66 3d 00 03          	cmp    ax,0x300
c00104bc:	75 0f                	jne    c00104cd <sendKeyboardToken(KeyboardToken)+0x42f>
c00104be:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00104c1:	83 f0 01             	xor    eax,0x1
c00104c4:	84 c0                	test   al,al
c00104c6:	74 05                	je     c00104cd <sendKeyboardToken(KeyboardToken)+0x42f>
c00104c8:	e8 02 aa ff ff       	call   c000aecf <doTerminalCycle()>
c00104cd:	90                   	nop
c00104ce:	c9                   	leave  
c00104cf:	c3                   	ret    

c00104d0 <clearInternalKeybuffer(VgaText*)>:
c00104d0:	55                   	push   ebp
c00104d1:	89 e5                	mov    ebp,esp
c00104d3:	83 ec 08             	sub    esp,0x8
c00104d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00104d9:	05 32 01 00 00       	add    eax,0x132
c00104de:	83 ec 0c             	sub    esp,0xc
c00104e1:	50                   	push   eax
c00104e2:	e8 c9 01 ff ff       	call   c00006b0 <strlen>
c00104e7:	83 c4 10             	add    esp,0x10
c00104ea:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00104ed:	81 c2 32 01 00 00    	add    edx,0x132
c00104f3:	83 ec 04             	sub    esp,0x4
c00104f6:	50                   	push   eax
c00104f7:	6a 00                	push   0x0
c00104f9:	52                   	push   edx
c00104fa:	e8 95 01 ff ff       	call   c0000694 <memset>
c00104ff:	83 c4 10             	add    esp,0x10
c0010502:	90                   	nop
c0010503:	c9                   	leave  
c0010504:	c3                   	ret    

c0010505 <readKeyboard(VgaText*, char*, unsigned long)>:
c0010505:	55                   	push   ebp
c0010506:	89 e5                	mov    ebp,esp
c0010508:	83 ec 18             	sub    esp,0x18
c001050b:	a1 e8 8d 02 c0       	mov    eax,ds:0xc0028de8
c0010510:	85 c0                	test   eax,eax
c0010512:	74 2a                	je     c001053e <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0010514:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001051a:	8b 0d e8 8d 02 c0    	mov    ecx,DWORD PTR ds:0xc0028de8
c0010520:	83 ec 04             	sub    esp,0x4
c0010523:	68 00 8e 02 c0       	push   0xc0028e00
c0010528:	83 ec 08             	sub    esp,0x8
c001052b:	89 e2                	mov    edx,esp
c001052d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0010530:	89 02                	mov    DWORD PTR [edx],eax
c0010532:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0010535:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0010539:	ff d1                	call   ecx
c001053b:	83 c4 10             	add    esp,0x10
c001053e:	fb                   	sti    
c001053f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0010546:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001054a:	0f 84 a1 00 00 00    	je     c00105f1 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0010550:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010553:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c0010559:	84 c0                	test   al,al
c001055b:	75 28                	jne    c0010585 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c001055d:	fa                   	cli    
c001055e:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0010563:	40                   	inc    eax
c0010564:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0010569:	e8 32 8a 00 00       	call   c0018fa0 <schedule()>
c001056e:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0010573:	48                   	dec    eax
c0010574:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0010579:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c001057e:	85 c0                	test   eax,eax
c0010580:	75 ce                	jne    c0010550 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010582:	fb                   	sti    
c0010583:	eb cb                	jmp    c0010550 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0010585:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0010588:	8d 50 01             	lea    edx,[eax+0x1]
c001058b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001058e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0010591:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c0010597:	88 10                	mov    BYTE PTR [eax],dl
c0010599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001059c:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c00105a2:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00105a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00105a8:	05 32 01 00 00       	add    eax,0x132
c00105ad:	83 ec 0c             	sub    esp,0xc
c00105b0:	50                   	push   eax
c00105b1:	e8 fa 00 ff ff       	call   c00006b0 <strlen>
c00105b6:	83 c4 10             	add    esp,0x10
c00105b9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00105bc:	81 c2 32 01 00 00    	add    edx,0x132
c00105c2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00105c5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00105c8:	81 c2 32 01 00 00    	add    edx,0x132
c00105ce:	83 ec 04             	sub    esp,0x4
c00105d1:	50                   	push   eax
c00105d2:	51                   	push   ecx
c00105d3:	52                   	push   edx
c00105d4:	e8 f3 ff fe ff       	call   c00005cc <memmove>
c00105d9:	83 c4 10             	add    esp,0x10
c00105dc:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00105df:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00105e2:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00105e6:	0f 85 5a ff ff ff    	jne    c0010546 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c00105ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00105ef:	eb 03                	jmp    c00105f4 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c00105f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00105f4:	c9                   	leave  
c00105f5:	c3                   	ret    

c00105f6 <Keyboard::Keyboard(char const*)>:
c00105f6:	83 ec 0c             	sub    esp,0xc
c00105f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105fd:	83 ec 08             	sub    esp,0x8
c0010600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010604:	50                   	push   eax
c0010605:	e8 cc e1 ff ff       	call   c000e7d6 <Device::Device(char const*)>
c001060a:	83 c4 10             	add    esp,0x10
c001060d:	ba b8 5b 02 c0       	mov    edx,0xc0025bb8
c0010612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010616:	89 10                	mov    DWORD PTR [eax],edx
c0010618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001061c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0010626:	c6 05 e4 8d 02 c0 01 	mov    BYTE PTR ds:0xc0028de4,0x1
c001062d:	90                   	nop
c001062e:	83 c4 0c             	add    esp,0xc
c0010631:	c3                   	ret    

c0010632 <Keyboard::~Keyboard()>:
c0010632:	83 ec 0c             	sub    esp,0xc
c0010635:	ba b8 5b 02 c0       	mov    edx,0xc0025bb8
c001063a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001063e:	89 10                	mov    DWORD PTR [eax],edx
c0010640:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010644:	83 ec 0c             	sub    esp,0xc
c0010647:	50                   	push   eax
c0010648:	e8 53 de ff ff       	call   c000e4a0 <Device::~Device()>
c001064d:	83 c4 10             	add    esp,0x10
c0010650:	90                   	nop
c0010651:	83 c4 0c             	add    esp,0xc
c0010654:	c3                   	ret    
c0010655:	90                   	nop

c0010656 <Keyboard::~Keyboard()>:
c0010656:	83 ec 0c             	sub    esp,0xc
c0010659:	83 ec 0c             	sub    esp,0xc
c001065c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010660:	e8 cd ff ff ff       	call   c0010632 <Keyboard::~Keyboard()>
c0010665:	83 c4 10             	add    esp,0x10
c0010668:	83 ec 08             	sub    esp,0x8
c001066b:	68 5c 01 00 00       	push   0x15c
c0010670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010674:	e8 05 c9 ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0010679:	83 c4 10             	add    esp,0x10
c001067c:	83 c4 0c             	add    esp,0xc
c001067f:	c3                   	ret    

c0010680 <LogicalDisk::close(int, int, void*)>:
c0010680:	83 c8 ff             	or     eax,0xffffffff
c0010683:	c3                   	ret    

c0010684 <LogicalDisk::~LogicalDisk()>:
c0010684:	83 ec 0c             	sub    esp,0xc
c0010687:	ba 88 5c 02 c0       	mov    edx,0xc0025c88
c001068c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010690:	89 10                	mov    DWORD PTR [eax],edx
c0010692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010696:	83 ec 0c             	sub    esp,0xc
c0010699:	50                   	push   eax
c001069a:	e8 01 de ff ff       	call   c000e4a0 <Device::~Device()>
c001069f:	83 c4 10             	add    esp,0x10
c00106a2:	90                   	nop
c00106a3:	83 c4 0c             	add    esp,0xc
c00106a6:	c3                   	ret    
c00106a7:	90                   	nop

c00106a8 <LogicalDisk::~LogicalDisk()>:
c00106a8:	83 ec 0c             	sub    esp,0xc
c00106ab:	83 ec 0c             	sub    esp,0xc
c00106ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106b2:	e8 cd ff ff ff       	call   c0010684 <LogicalDisk::~LogicalDisk()>
c00106b7:	83 c4 10             	add    esp,0x10
c00106ba:	83 ec 08             	sub    esp,0x8
c00106bd:	68 74 01 00 00       	push   0x174
c00106c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106c6:	e8 b3 c8 ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c00106cb:	83 c4 10             	add    esp,0x10
c00106ce:	83 c4 0c             	add    esp,0xc
c00106d1:	c3                   	ret    

c00106d2 <LogicalDisk::open(int, int, void*)>:
c00106d2:	83 ec 18             	sub    esp,0x18
c00106d5:	68 e4 5b 02 c0       	push   0xc0025be4
c00106da:	e8 52 4a 00 00       	call   c0015131 <Krnl::panic(char const*)>
c00106df:	83 c8 ff             	or     eax,0xffffffff
c00106e2:	83 c4 1c             	add    esp,0x1c
c00106e5:	c3                   	ret    

c00106e6 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00106e6:	53                   	push   ebx
c00106e7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00106eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00106f3:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00106f9:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00106ff:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0010705:	77 10                	ja     c0010717 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0010707:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001070d:	89 d3                	mov    ebx,edx
c001070f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0010715:	72 05                	jb     c001071c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0010717:	83 c8 ff             	or     eax,0xffffffff
c001071a:	89 c2                	mov    edx,eax
c001071c:	5b                   	pop    ebx
c001071d:	c3                   	ret    

c001071e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001071e:	56                   	push   esi
c001071f:	83 c8 ff             	or     eax,0xffffffff
c0010722:	53                   	push   ebx
c0010723:	89 c2                	mov    edx,eax
c0010725:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010729:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001072d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010731:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010737:	77 27                	ja     c0010760 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010739:	89 d8                	mov    eax,ebx
c001073b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0010741:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0010747:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001074c:	89 c2                	mov    edx,eax
c001074e:	73 10                	jae    c0010760 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0010750:	89 c8                	mov    eax,ecx
c0010752:	89 da                	mov    edx,ebx
c0010754:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001075a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0010760:	5b                   	pop    ebx
c0010761:	5e                   	pop    esi
c0010762:	c3                   	ret    
c0010763:	90                   	nop

c0010764 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010764:	83 ec 1c             	sub    esp,0x1c
c0010767:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001076b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001076f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010773:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010777:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001077b:	89 04 24             	mov    DWORD PTR [esp],eax
c001077e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010782:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010786:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001078a:	83 ec 08             	sub    esp,0x8
c001078d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010791:	50                   	push   eax
c0010792:	e8 3f e0 ff ff       	call   c000e7d6 <Device::Device(char const*)>
c0010797:	83 c4 10             	add    esp,0x10
c001079a:	ba 88 5c 02 c0       	mov    edx,0xc0025c88
c001079f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107a3:	89 10                	mov    DWORD PTR [eax],edx
c00107a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107a9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00107b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107b4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00107bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107bf:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00107c9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00107cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00107d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00107d5:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00107db:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00107e1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00107e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00107e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00107ec:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00107f2:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00107f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00107fc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010800:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0010806:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001080a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010814:	90                   	nop
c0010815:	83 c4 1c             	add    esp,0x1c
c0010818:	c3                   	ret    
c0010819:	90                   	nop

c001081a <LogicalDisk::assignDriveLetter()>:
c001081a:	55                   	push   ebp
c001081b:	57                   	push   edi
c001081c:	56                   	push   esi
c001081d:	53                   	push   ebx
c001081e:	83 ec 14             	sub    esp,0x14
c0010821:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010825:	8b 3d 20 92 02 c0    	mov    edi,DWORD PTR ds:0xc0029220
c001082b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0010831:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010835:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001083b:	8b 3d 24 92 02 c0    	mov    edi,DWORD PTR ds:0xc0029224
c0010841:	3c 01                	cmp    al,0x1
c0010843:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010847:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001084b:	19 c0                	sbb    eax,eax
c001084d:	83 e0 02             	and    eax,0x2
c0010850:	83 c0 41             	add    eax,0x41
c0010853:	0f be e8             	movsx  ebp,al
c0010856:	3c 43                	cmp    al,0x43
c0010858:	75 10                	jne    c001086a <LogicalDisk::assignDriveLetter()+0x50>
c001085a:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0010861:	75 5d                	jne    c00108c0 <LogicalDisk::assignDriveLetter()+0xa6>
c0010863:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0010868:	75 56                	jne    c00108c0 <LogicalDisk::assignDriveLetter()+0xa6>
c001086a:	8d 75 bf             	lea    esi,[ebp-0x41]
c001086d:	ba 01 00 00 00       	mov    edx,0x1
c0010872:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010876:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001087a:	d3 e2                	shl    edx,cl
c001087c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010880:	89 d7                	mov    edi,edx
c0010882:	89 d6                	mov    esi,edx
c0010884:	c1 ff 1f             	sar    edi,0x1f
c0010887:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001088b:	21 f9                	and    ecx,edi
c001088d:	09 d1                	or     ecx,edx
c001088f:	75 2f                	jne    c00108c0 <LogicalDisk::assignDriveLetter()+0xa6>
c0010891:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0010895:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010899:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001089f:	09 f2                	or     edx,esi
c00108a1:	89 15 20 92 02 c0    	mov    DWORD PTR ds:0xc0029220,edx
c00108a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108ab:	09 fa                	or     edx,edi
c00108ad:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00108b1:	89 15 24 92 02 c0    	mov    DWORD PTR ds:0xc0029224,edx
c00108b7:	89 1c bd 40 92 02 c0 	mov    DWORD PTR [edi*4-0x3ffd6dc0],ebx
c00108be:	eb 08                	jmp    c00108c8 <LogicalDisk::assignDriveLetter()+0xae>
c00108c0:	45                   	inc    ebp
c00108c1:	40                   	inc    eax
c00108c2:	3c 5b                	cmp    al,0x5b
c00108c4:	75 90                	jne    c0010856 <LogicalDisk::assignDriveLetter()+0x3c>
c00108c6:	31 c0                	xor    eax,eax
c00108c8:	83 c4 14             	add    esp,0x14
c00108cb:	5b                   	pop    ebx
c00108cc:	5e                   	pop    esi
c00108cd:	5f                   	pop    edi
c00108ce:	5d                   	pop    ebp
c00108cf:	c3                   	ret    

c00108d0 <LogicalDisk::mount()>:
c00108d0:	56                   	push   esi
c00108d1:	53                   	push   ebx
c00108d2:	83 ec 1c             	sub    esp,0x1c
c00108d5:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00108d9:	8b 1d b4 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028db4
c00108df:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00108e6:	50                   	push   eax
c00108e7:	68 08 5c 02 c0       	push   0xc0025c08
c00108ec:	e8 6e c7 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00108f1:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00108fb:	83 c4 10             	add    esp,0x10
c00108fe:	85 db                	test   ebx,ebx
c0010900:	74 4e                	je     c0010950 <LogicalDisk::mount()+0x80>
c0010902:	83 ec 0c             	sub    esp,0xc
c0010905:	68 29 5c 02 c0       	push   0xc0025c29
c001090a:	e8 50 c7 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001090f:	83 c4 0c             	add    esp,0xc
c0010912:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010919:	8b 13                	mov    edx,DWORD PTR [ebx]
c001091b:	83 e8 41             	sub    eax,0x41
c001091e:	50                   	push   eax
c001091f:	56                   	push   esi
c0010920:	53                   	push   ebx
c0010921:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010924:	83 c4 10             	add    esp,0x10
c0010927:	84 c0                	test   al,al
c0010929:	74 20                	je     c001094b <LogicalDisk::mount()+0x7b>
c001092b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001092f:	83 ec 0c             	sub    esp,0xc
c0010932:	68 45 5c 02 c0       	push   0xc0025c45
c0010937:	e8 23 c7 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001093c:	83 c4 10             	add    esp,0x10
c001093f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010945:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010949:	eb 07                	jmp    c0010952 <LogicalDisk::mount()+0x82>
c001094b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001094e:	eb ae                	jmp    c00108fe <LogicalDisk::mount()+0x2e>
c0010950:	31 c0                	xor    eax,eax
c0010952:	83 c4 14             	add    esp,0x14
c0010955:	5b                   	pop    ebx
c0010956:	5e                   	pop    esi
c0010957:	c3                   	ret    

c0010958 <LogicalDisk::unmount()>:
c0010958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001095c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010966:	c3                   	ret    
c0010967:	90                   	nop

c0010968 <LogicalDisk::eject()>:
c0010968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001096c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0010972:	8b 10                	mov    edx,DWORD PTR [eax]
c0010974:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010978:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001097b:	90                   	nop

c001097c <LogicalDisk::unassignDriveLetter()>:
c001097c:	57                   	push   edi
c001097d:	56                   	push   esi
c001097e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010982:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010989:	84 c9                	test   cl,cl
c001098b:	75 0f                	jne    c001099c <LogicalDisk::unassignDriveLetter()+0x20>
c001098d:	c7 44 24 0c 5e 5c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025c5e
c0010995:	5e                   	pop    esi
c0010996:	5f                   	pop    edi
c0010997:	e9 95 47 00 00       	jmp    c0015131 <Krnl::panic(char const*)>
c001099c:	83 e9 41             	sub    ecx,0x41
c001099f:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00109a6:	b8 01 00 00 00       	mov    eax,0x1
c00109ab:	c7 04 8d 40 92 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6dc0],0x0
c00109b6:	d3 e0                	shl    eax,cl
c00109b8:	89 c7                	mov    edi,eax
c00109ba:	f7 d0                	not    eax
c00109bc:	c1 ff 1f             	sar    edi,0x1f
c00109bf:	21 05 20 92 02 c0    	and    DWORD PTR ds:0xc0029220,eax
c00109c5:	89 fe                	mov    esi,edi
c00109c7:	f7 d6                	not    esi
c00109c9:	21 35 24 92 02 c0    	and    DWORD PTR ds:0xc0029224,esi
c00109cf:	5e                   	pop    esi
c00109d0:	5f                   	pop    edi
c00109d1:	c3                   	ret    

c00109d2 <LogicalDisk::read(unsigned long long, int, void*)>:
c00109d2:	57                   	push   edi
c00109d3:	56                   	push   esi
c00109d4:	53                   	push   ebx
c00109d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00109d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00109dd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00109e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00109e5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00109eb:	77 41                	ja     c0010a2e <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00109ed:	99                   	cdq    
c00109ee:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00109f4:	01 c8                	add    eax,ecx
c00109f6:	11 da                	adc    edx,ebx
c00109f8:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00109fe:	19 d7                	sbb    edi,edx
c0010a00:	72 33                	jb     c0010a35 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010a02:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010a08:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010a0e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010a12:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010a16:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010a1c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010a22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010a26:	5b                   	pop    ebx
c0010a27:	5e                   	pop    esi
c0010a28:	5f                   	pop    edi
c0010a29:	e9 f4 0a 00 00       	jmp    c0011522 <VCache::read(unsigned long long, int, void*)>
c0010a2e:	b8 05 00 00 00       	mov    eax,0x5
c0010a33:	eb 05                	jmp    c0010a3a <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010a35:	b8 07 00 00 00       	mov    eax,0x7
c0010a3a:	5b                   	pop    ebx
c0010a3b:	5e                   	pop    esi
c0010a3c:	5f                   	pop    edi
c0010a3d:	c3                   	ret    

c0010a3e <LogicalDisk::write(unsigned long long, int, void*)>:
c0010a3e:	57                   	push   edi
c0010a3f:	56                   	push   esi
c0010a40:	53                   	push   ebx
c0010a41:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010a45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010a49:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010a4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a51:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010a57:	77 41                	ja     c0010a9a <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010a59:	99                   	cdq    
c0010a5a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010a60:	01 c8                	add    eax,ecx
c0010a62:	11 da                	adc    edx,ebx
c0010a64:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010a6a:	19 d7                	sbb    edi,edx
c0010a6c:	72 33                	jb     c0010aa1 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010a6e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010a74:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010a7a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010a7e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010a82:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010a88:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010a8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010a92:	5b                   	pop    ebx
c0010a93:	5e                   	pop    esi
c0010a94:	5f                   	pop    edi
c0010a95:	e9 8e 09 00 00       	jmp    c0011428 <VCache::write(unsigned long long, int, void*)>
c0010a9a:	b8 05 00 00 00       	mov    eax,0x5
c0010a9f:	eb 05                	jmp    c0010aa6 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0010aa1:	b8 07 00 00 00       	mov    eax,0x7
c0010aa6:	5b                   	pop    ebx
c0010aa7:	5e                   	pop    esi
c0010aa8:	5f                   	pop    edi
c0010aa9:	c3                   	ret    
c0010aaa:	66 90                	xchg   ax,ax

c0010aac <Mouse::Mouse(char const*)>:
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ab3:	83 ec 08             	sub    esp,0x8
c0010ab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aba:	50                   	push   eax
c0010abb:	e8 16 dd ff ff       	call   c000e7d6 <Device::Device(char const*)>
c0010ac0:	83 c4 10             	add    esp,0x10
c0010ac3:	ba b4 5c 02 c0       	mov    edx,0xc0025cb4
c0010ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010acc:	89 10                	mov    DWORD PTR [eax],edx
c0010ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ad2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0010adc:	90                   	nop
c0010add:	83 c4 0c             	add    esp,0xc
c0010ae0:	c3                   	ret    
c0010ae1:	90                   	nop
c0010ae2:	66 90                	xchg   ax,ax

c0010ae4 <Mouse::~Mouse()>:
c0010ae4:	83 ec 0c             	sub    esp,0xc
c0010ae7:	ba b4 5c 02 c0       	mov    edx,0xc0025cb4
c0010aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010af0:	89 10                	mov    DWORD PTR [eax],edx
c0010af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010af6:	83 ec 0c             	sub    esp,0xc
c0010af9:	50                   	push   eax
c0010afa:	e8 a1 d9 ff ff       	call   c000e4a0 <Device::~Device()>
c0010aff:	83 c4 10             	add    esp,0x10
c0010b02:	90                   	nop
c0010b03:	83 c4 0c             	add    esp,0xc
c0010b06:	c3                   	ret    
c0010b07:	90                   	nop

c0010b08 <Mouse::~Mouse()>:
c0010b08:	83 ec 0c             	sub    esp,0xc
c0010b0b:	83 ec 0c             	sub    esp,0xc
c0010b0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b12:	e8 cd ff ff ff       	call   c0010ae4 <Mouse::~Mouse()>
c0010b17:	83 c4 10             	add    esp,0x10
c0010b1a:	83 ec 08             	sub    esp,0x8
c0010b1d:	68 58 01 00 00       	push   0x158
c0010b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b26:	e8 53 c4 ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0010b2b:	83 c4 10             	add    esp,0x10
c0010b2e:	83 c4 0c             	add    esp,0xc
c0010b31:	c3                   	ret    

c0010b32 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010b32:	55                   	push   ebp
c0010b33:	57                   	push   edi
c0010b34:	56                   	push   esi
c0010b35:	53                   	push   ebx
c0010b36:	81 ec 28 01 00 00    	sub    esp,0x128
c0010b3c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0010b43:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010b4a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010b51:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010b58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010b5c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010b60:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010b67:	e8 66 dd ff ff       	call   c000e8d2 <Device::getName()>
c0010b6c:	5a                   	pop    edx
c0010b6d:	59                   	pop    ecx
c0010b6e:	50                   	push   eax
c0010b6f:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0010b73:	55                   	push   ebp
c0010b74:	e8 d7 fb fe ff       	call   c0000750 <strcpy>
c0010b79:	5b                   	pop    ebx
c0010b7a:	58                   	pop    eax
c0010b7b:	68 d8 5c 02 c0       	push   0xc0025cd8
c0010b80:	55                   	push   ebp
c0010b81:	e8 0a fd fe ff       	call   c0000890 <strcat>
c0010b86:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010b8d:	e8 e1 91 ff ff       	call   c0009d73 <malloc>
c0010b92:	83 c4 0c             	add    esp,0xc
c0010b95:	89 c3                	mov    ebx,eax
c0010b97:	57                   	push   edi
c0010b98:	56                   	push   esi
c0010b99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010b9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010ba1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0010ba8:	55                   	push   ebp
c0010ba9:	50                   	push   eax
c0010baa:	e8 b5 fb ff ff       	call   c0010764 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0010baf:	83 c4 14             	add    esp,0x14
c0010bb2:	53                   	push   ebx
c0010bb3:	e8 62 fc ff ff       	call   c001081a <LogicalDisk::assignDriveLetter()>
c0010bb8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bbb:	e8 10 fd ff ff       	call   c00108d0 <LogicalDisk::mount()>
c0010bc0:	58                   	pop    eax
c0010bc1:	5a                   	pop    edx
c0010bc2:	53                   	push   ebx
c0010bc3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0010bca:	e8 03 da ff ff       	call   c000e5d2 <Device::addChild(Device*)>
c0010bcf:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010bd5:	5b                   	pop    ebx
c0010bd6:	5e                   	pop    esi
c0010bd7:	5f                   	pop    edi
c0010bd8:	5d                   	pop    ebp
c0010bd9:	c3                   	ret    

c0010bda <createPartitionsForDisk(PhysicalDisk*)>:
c0010bda:	55                   	push   ebp
c0010bdb:	57                   	push   edi
c0010bdc:	56                   	push   esi
c0010bdd:	53                   	push   ebx
c0010bde:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010be4:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010beb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010bf1:	3d 00 02 00 00       	cmp    eax,0x200
c0010bf6:	74 27                	je     c0010c1f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010bf8:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010bfe:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010c04:	83 ec 10             	sub    esp,0x10
c0010c07:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010c0b:	99                   	cdq    
c0010c0c:	c1 e6 0a             	shl    esi,0xa
c0010c0f:	52                   	push   edx
c0010c10:	89 fd                	mov    ebp,edi
c0010c12:	50                   	push   eax
c0010c13:	55                   	push   ebp
c0010c14:	56                   	push   esi
c0010c15:	e8 76 24 01 00       	call   c0023090 <__udivdi3>
c0010c1a:	e9 b1 00 00 00       	jmp    c0010cd0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010c1f:	83 ec 0c             	sub    esp,0xc
c0010c22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010c24:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010c28:	56                   	push   esi
c0010c29:	6a 01                	push   0x1
c0010c2b:	6a 00                	push   0x0
c0010c2d:	6a 00                	push   0x0
c0010c2f:	53                   	push   ebx
c0010c30:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010c33:	83 c4 20             	add    esp,0x20
c0010c36:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010c3e:	75 0a                	jne    c0010c4a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010c40:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010c48:	74 2c                	je     c0010c76 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010c4a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010c50:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010c56:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010c5c:	83 ec 10             	sub    esp,0x10
c0010c5f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010c63:	89 f7                	mov    edi,esi
c0010c65:	c1 e0 0a             	shl    eax,0xa
c0010c68:	c1 ff 1f             	sar    edi,0x1f
c0010c6b:	57                   	push   edi
c0010c6c:	56                   	push   esi
c0010c6d:	52                   	push   edx
c0010c6e:	50                   	push   eax
c0010c6f:	e8 1c 24 01 00       	call   c0023090 <__udivdi3>
c0010c74:	eb 5a                	jmp    c0010cd0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010c76:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010c7d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0010c84:	83 e1 7f             	and    ecx,0x7f
c0010c87:	83 e0 7f             	and    eax,0x7f
c0010c8a:	01 c1                	add    ecx,eax
c0010c8c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0010c93:	83 e0 7f             	and    eax,0x7f
c0010c96:	01 c1                	add    ecx,eax
c0010c98:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0010c9f:	83 e0 7f             	and    eax,0x7f
c0010ca2:	00 c1                	add    cl,al
c0010ca4:	74 41                	je     c0010ce7 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0010ca6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010cac:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010cb2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010cb8:	83 ec 10             	sub    esp,0x10
c0010cbb:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010cbf:	89 f7                	mov    edi,esi
c0010cc1:	c1 e0 0a             	shl    eax,0xa
c0010cc4:	c1 ff 1f             	sar    edi,0x1f
c0010cc7:	57                   	push   edi
c0010cc8:	56                   	push   esi
c0010cc9:	52                   	push   edx
c0010cca:	50                   	push   eax
c0010ccb:	e8 c0 23 01 00       	call   c0023090 <__udivdi3>
c0010cd0:	83 c4 14             	add    esp,0x14
c0010cd3:	52                   	push   edx
c0010cd4:	50                   	push   eax
c0010cd5:	6a 00                	push   0x0
c0010cd7:	6a 00                	push   0x0
c0010cd9:	53                   	push   ebx
c0010cda:	e8 53 fe ff ff       	call   c0010b32 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010cdf:	83 c4 20             	add    esp,0x20
c0010ce2:	e9 79 01 00 00       	jmp    c0010e60 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010ce7:	89 f0                	mov    eax,esi
c0010ce9:	31 f6                	xor    esi,esi
c0010ceb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010cf2:	75 02                	jne    c0010cf6 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010cf4:	89 f1                	mov    ecx,esi
c0010cf6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010cfd:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010d04:	c1 e2 08             	shl    edx,0x8
c0010d07:	c1 e7 10             	shl    edi,0x10
c0010d0a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010d12:	09 fa                	or     edx,edi
c0010d14:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010d1c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010d23:	83 c0 10             	add    eax,0x10
c0010d26:	09 fa                	or     edx,edi
c0010d28:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010d2f:	c1 e7 18             	shl    edi,0x18
c0010d32:	09 fa                	or     edx,edi
c0010d34:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010d3b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010d3f:	c1 e7 10             	shl    edi,0x10
c0010d42:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010d49:	c1 e2 08             	shl    edx,0x8
c0010d4c:	09 fa                	or     edx,edi
c0010d4e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0010d55:	09 fa                	or     edx,edi
c0010d57:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010d5e:	c1 e7 18             	shl    edi,0x18
c0010d61:	09 fa                	or     edx,edi
c0010d63:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0010d67:	46                   	inc    esi
c0010d68:	83 fe 04             	cmp    esi,0x4
c0010d6b:	0f 85 7a ff ff ff    	jne    c0010ceb <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d75:	83 f0 01             	xor    eax,0x1
c0010d78:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010d7c:	75 57                	jne    c0010dd5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010d7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d82:	83 f0 01             	xor    eax,0x1
c0010d85:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010d89:	75 4a                	jne    c0010dd5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010d8b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010d8f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0010d97:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010d9f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010da5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010dab:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010db1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010db5:	89 f7                	mov    edi,esi
c0010db7:	c1 e0 0a             	shl    eax,0xa
c0010dba:	c1 ff 1f             	sar    edi,0x1f
c0010dbd:	57                   	push   edi
c0010dbe:	56                   	push   esi
c0010dbf:	52                   	push   edx
c0010dc0:	50                   	push   eax
c0010dc1:	e8 ca 22 01 00       	call   c0023090 <__udivdi3>
c0010dc6:	83 c4 10             	add    esp,0x10
c0010dc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010dcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010dd1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010dd5:	84 c9                	test   cl,cl
c0010dd7:	74 53                	je     c0010e2c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010dd9:	0f b6 c9             	movzx  ecx,cl
c0010ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010de0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010de4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010de8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010df4:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010df8:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010dfc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010e00:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010e04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e08:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010e0c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010e10:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010e14:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010e18:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010e1c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010e20:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010e24:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010e28:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010e2c:	31 ed                	xor    ebp,ebp
c0010e2e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010e32:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010e36:	89 f8                	mov    eax,edi
c0010e38:	09 f0                	or     eax,esi
c0010e3a:	74 1e                	je     c0010e5a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010e3c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010e40:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010e44:	89 d1                	mov    ecx,edx
c0010e46:	09 c1                	or     ecx,eax
c0010e48:	74 10                	je     c0010e5a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010e4a:	83 ec 0c             	sub    esp,0xc
c0010e4d:	57                   	push   edi
c0010e4e:	56                   	push   esi
c0010e4f:	52                   	push   edx
c0010e50:	50                   	push   eax
c0010e51:	53                   	push   ebx
c0010e52:	e8 db fc ff ff       	call   c0010b32 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0010e57:	83 c4 20             	add    esp,0x20
c0010e5a:	45                   	inc    ebp
c0010e5b:	83 fd 04             	cmp    ebp,0x4
c0010e5e:	75 ce                	jne    c0010e2e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010e60:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010e66:	5b                   	pop    ebx
c0010e67:	5e                   	pop    esi
c0010e68:	5f                   	pop    edi
c0010e69:	5d                   	pop    ebp
c0010e6a:	c3                   	ret    
c0010e6b:	90                   	nop

c0010e6c <Serial::Serial(char const*)>:
c0010e6c:	83 ec 0c             	sub    esp,0xc
c0010e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e73:	83 ec 08             	sub    esp,0x8
c0010e76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e7a:	50                   	push   eax
c0010e7b:	e8 56 d9 ff ff       	call   c000e7d6 <Device::Device(char const*)>
c0010e80:	83 c4 10             	add    esp,0x10
c0010e83:	ba ec 5c 02 c0       	mov    edx,0xc0025cec
c0010e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e8c:	89 10                	mov    DWORD PTR [eax],edx
c0010e8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e92:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0010e9c:	90                   	nop
c0010e9d:	83 c4 0c             	add    esp,0xc
c0010ea0:	c3                   	ret    
c0010ea1:	90                   	nop
c0010ea2:	66 90                	xchg   ax,ax

c0010ea4 <Serial::~Serial()>:
c0010ea4:	83 ec 0c             	sub    esp,0xc
c0010ea7:	ba ec 5c 02 c0       	mov    edx,0xc0025cec
c0010eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eb0:	89 10                	mov    DWORD PTR [eax],edx
c0010eb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eb6:	83 ec 0c             	sub    esp,0xc
c0010eb9:	50                   	push   eax
c0010eba:	e8 e1 d5 ff ff       	call   c000e4a0 <Device::~Device()>
c0010ebf:	83 c4 10             	add    esp,0x10
c0010ec2:	90                   	nop
c0010ec3:	83 c4 0c             	add    esp,0xc
c0010ec6:	c3                   	ret    
c0010ec7:	90                   	nop

c0010ec8 <Serial::~Serial()>:
c0010ec8:	83 ec 0c             	sub    esp,0xc
c0010ecb:	83 ec 0c             	sub    esp,0xc
c0010ece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ed2:	e8 cd ff ff ff       	call   c0010ea4 <Serial::~Serial()>
c0010ed7:	83 c4 10             	add    esp,0x10
c0010eda:	83 ec 08             	sub    esp,0x8
c0010edd:	68 58 01 00 00       	push   0x158
c0010ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ee6:	e8 93 c0 ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0010eeb:	83 c4 10             	add    esp,0x10
c0010eee:	83 c4 0c             	add    esp,0xc
c0010ef1:	c3                   	ret    
c0010ef2:	66 90                	xchg   ax,ax

c0010ef4 <Timer::Timer(char const*)>:
c0010ef4:	83 ec 0c             	sub    esp,0xc
c0010ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010efb:	83 ec 08             	sub    esp,0x8
c0010efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f02:	50                   	push   eax
c0010f03:	e8 ce d8 ff ff       	call   c000e7d6 <Device::Device(char const*)>
c0010f08:	83 c4 10             	add    esp,0x10
c0010f0b:	ba 30 5d 02 c0       	mov    edx,0xc0025d30
c0010f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f14:	89 10                	mov    DWORD PTR [eax],edx
c0010f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f1a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010f24:	90                   	nop
c0010f25:	83 c4 0c             	add    esp,0xc
c0010f28:	c3                   	ret    
c0010f29:	90                   	nop
c0010f2a:	66 90                	xchg   ax,ax

c0010f2c <Timer::~Timer()>:
c0010f2c:	83 ec 0c             	sub    esp,0xc
c0010f2f:	ba 30 5d 02 c0       	mov    edx,0xc0025d30
c0010f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f38:	89 10                	mov    DWORD PTR [eax],edx
c0010f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f3e:	83 ec 0c             	sub    esp,0xc
c0010f41:	50                   	push   eax
c0010f42:	e8 59 d5 ff ff       	call   c000e4a0 <Device::~Device()>
c0010f47:	83 c4 10             	add    esp,0x10
c0010f4a:	90                   	nop
c0010f4b:	83 c4 0c             	add    esp,0xc
c0010f4e:	c3                   	ret    
c0010f4f:	90                   	nop

c0010f50 <Timer::~Timer()>:
c0010f50:	83 ec 0c             	sub    esp,0xc
c0010f53:	83 ec 0c             	sub    esp,0xc
c0010f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f5a:	e8 cd ff ff ff       	call   c0010f2c <Timer::~Timer()>
c0010f5f:	83 c4 10             	add    esp,0x10
c0010f62:	83 ec 08             	sub    esp,0x8
c0010f65:	68 5c 01 00 00       	push   0x15c
c0010f6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f6e:	e8 0b c0 ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0010f73:	83 c4 10             	add    esp,0x10
c0010f76:	83 c4 0c             	add    esp,0xc
c0010f79:	c3                   	ret    

c0010f7a <Timer::read()>:
c0010f7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f7e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010f84:	c3                   	ret    

c0010f85 <timerHandler(unsigned int)>:
c0010f85:	56                   	push   esi
c0010f86:	53                   	push   ebx
c0010f87:	51                   	push   ecx
c0010f88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f8c:	01 05 ac 92 02 c0    	add    DWORD PTR ds:0xc00292ac,eax
c0010f92:	80 3d 8d 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028c8d,0x0
c0010f99:	0f 84 49 01 00 00    	je     c00110e8 <timerHandler(unsigned int)+0x163>
c0010f9f:	fa                   	cli    
c0010fa0:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c0010fa6:	83 ec 0c             	sub    esp,0xc
c0010fa9:	ff 05 a4 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a4
c0010faf:	68 b8 a1 02 c0       	push   0xc002a1b8
c0010fb4:	e8 a7 26 01 00       	call   c0023660 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010fb9:	83 c4 10             	add    esp,0x10
c0010fbc:	84 c0                	test   al,al
c0010fbe:	0f 85 a0 00 00 00    	jne    c0011064 <timerHandler(unsigned int)+0xdf>
c0010fc4:	83 ec 0c             	sub    esp,0xc
c0010fc7:	68 b8 a1 02 c0       	push   0xc002a1b8
c0010fcc:	e8 ab 26 01 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010fd1:	83 c4 10             	add    esp,0x10
c0010fd4:	89 c6                	mov    esi,eax
c0010fd6:	66 90                	xchg   ax,ax
c0010fd8:	83 ec 0c             	sub    esp,0xc
c0010fdb:	68 b8 a1 02 c0       	push   0xc002a1b8
c0010fe0:	e8 97 26 01 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010fe5:	c7 04 24 b8 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1b8
c0010fec:	89 c3                	mov    ebx,eax
c0010fee:	e8 91 26 01 00       	call   c0023684 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010ff3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010ff6:	83 c4 10             	add    esp,0x10
c0010ff9:	3b 05 ac 92 02 c0    	cmp    eax,DWORD PTR ds:0xc00292ac
c0010fff:	77 23                	ja     c0011024 <timerHandler(unsigned int)+0x9f>
c0011001:	83 ec 0c             	sub    esp,0xc
c0011004:	53                   	push   ebx
c0011005:	e8 52 84 00 00       	call   c001945c <unblockTask(ThreadControlBlock*)>
c001100a:	83 c4 10             	add    esp,0x10
c001100d:	39 de                	cmp    esi,ebx
c001100f:	75 27                	jne    c0011038 <timerHandler(unsigned int)+0xb3>
c0011011:	83 ec 0c             	sub    esp,0xc
c0011014:	68 b8 a1 02 c0       	push   0xc002a1b8
c0011019:	e8 5e 26 01 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001101e:	89 c6                	mov    esi,eax
c0011020:	eb 12                	jmp    c0011034 <timerHandler(unsigned int)+0xaf>
c0011022:	66 90                	xchg   ax,ax
c0011024:	52                   	push   edx
c0011025:	52                   	push   edx
c0011026:	53                   	push   ebx
c0011027:	68 b8 a1 02 c0       	push   0xc002a1b8
c001102c:	e8 0b 27 01 00       	call   c002373c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0011031:	8d 76 00             	lea    esi,[esi+0x0]
c0011034:	83 c4 10             	add    esp,0x10
c0011037:	90                   	nop
c0011038:	83 ec 0c             	sub    esp,0xc
c001103b:	68 b8 a1 02 c0       	push   0xc002a1b8
c0011040:	e8 1b 26 01 00       	call   c0023660 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0011045:	83 c4 10             	add    esp,0x10
c0011048:	84 c0                	test   al,al
c001104a:	75 18                	jne    c0011064 <timerHandler(unsigned int)+0xdf>
c001104c:	83 ec 0c             	sub    esp,0xc
c001104f:	68 b8 a1 02 c0       	push   0xc002a1b8
c0011054:	e8 23 26 01 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0011059:	83 c4 10             	add    esp,0x10
c001105c:	39 f0                	cmp    eax,esi
c001105e:	0f 85 74 ff ff ff    	jne    c0010fd8 <timerHandler(unsigned int)+0x53>
c0011064:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011069:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001106d:	74 41                	je     c00110b0 <timerHandler(unsigned int)+0x12b>
c001106f:	80 3d 8c 8c 02 c0 00 	cmp    BYTE PTR ds:0xc0028c8c,0x0
c0011076:	74 38                	je     c00110b0 <timerHandler(unsigned int)+0x12b>
c0011078:	fa                   	cli    
c0011079:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c001107f:	a1 ac 92 02 c0       	mov    eax,ds:0xc00292ac
c0011084:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001108a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c001108d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011093:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0011096:	72 08                	jb     c00110a0 <timerHandler(unsigned int)+0x11b>
c0011098:	e8 03 7f 00 00       	call   c0018fa0 <schedule()>
c001109d:	8d 76 00             	lea    esi,[esi+0x0]
c00110a0:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c00110a5:	48                   	dec    eax
c00110a6:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c00110ab:	75 03                	jne    c00110b0 <timerHandler(unsigned int)+0x12b>
c00110ad:	fb                   	sti    
c00110ae:	66 90                	xchg   ax,ax
c00110b0:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c00110b5:	48                   	dec    eax
c00110b6:	a3 a4 a1 02 c0       	mov    ds:0xc002a1a4,eax
c00110bb:	75 1b                	jne    c00110d8 <timerHandler(unsigned int)+0x153>
c00110bd:	83 3d a0 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a1a0,0x0
c00110c4:	74 12                	je     c00110d8 <timerHandler(unsigned int)+0x153>
c00110c6:	c7 05 a0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1a0,0x0
c00110d0:	e8 cb 7e 00 00       	call   c0018fa0 <schedule()>
c00110d5:	8d 76 00             	lea    esi,[esi+0x0]
c00110d8:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c00110dd:	48                   	dec    eax
c00110de:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c00110e3:	75 03                	jne    c00110e8 <timerHandler(unsigned int)+0x163>
c00110e5:	fb                   	sti    
c00110e6:	66 90                	xchg   ax,ax
c00110e8:	58                   	pop    eax
c00110e9:	5b                   	pop    ebx
c00110ea:	5e                   	pop    esi
c00110eb:	c3                   	ret    

c00110ec <setupTimer(int)>:
c00110ec:	57                   	push   edi
c00110ed:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c00110f2:	56                   	push   esi
c00110f3:	53                   	push   ebx
c00110f4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00110f8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00110fe:	83 ec 0c             	sub    esp,0xc
c0011101:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0011107:	e8 c6 d7 ff ff       	call   c000e8d2 <Device::getName()>
c001110c:	83 c4 10             	add    esp,0x10
c001110f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0011112:	0f 85 94 00 00 00    	jne    c00111ac <setupTimer(int)+0xc0>
c0011118:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c001111d:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0011124:	0f 84 82 00 00 00    	je     c00111ac <setupTimer(int)+0xc0>
c001112a:	83 ec 0c             	sub    esp,0xc
c001112d:	68 5c 01 00 00       	push   0x15c
c0011132:	e8 3c 8c ff ff       	call   c0009d73 <malloc>
c0011137:	89 04 24             	mov    DWORD PTR [esp],eax
c001113a:	89 c3                	mov    ebx,eax
c001113c:	e8 bb 1a 01 00       	call   c0022bfc <PIT::PIT()>
c0011141:	59                   	pop    ecx
c0011142:	5f                   	pop    edi
c0011143:	53                   	push   ebx
c0011144:	ff 35 88 8c 02 c0    	push   DWORD PTR ds:0xc0028c88
c001114a:	e8 83 d4 ff ff       	call   c000e5d2 <Device::addChild(Device*)>
c001114f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011151:	6a 00                	push   0x0
c0011153:	6a 00                	push   0x0
c0011155:	56                   	push   esi
c0011156:	53                   	push   ebx
c0011157:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001115a:	83 c4 14             	add    esp,0x14
c001115d:	68 60 01 00 00       	push   0x160
c0011162:	e8 0c 8c ff ff       	call   c0009d73 <malloc>
c0011167:	89 04 24             	mov    DWORD PTR [esp],eax
c001116a:	89 c7                	mov    edi,eax
c001116c:	e8 3f 19 01 00       	call   c0022ab0 <APICTimer::APICTimer()>
c0011171:	6a 00                	push   0x0
c0011173:	6a 00                	push   0x0
c0011175:	56                   	push   esi
c0011176:	57                   	push   edi
c0011177:	e8 34 18 01 00       	call   c00229b0 <APICTimer::open(int, int, void*)>
c001117c:	83 c4 20             	add    esp,0x20
c001117f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011181:	6a 00                	push   0x0
c0011183:	6a 00                	push   0x0
c0011185:	6a 00                	push   0x0
c0011187:	53                   	push   ebx
c0011188:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001118b:	58                   	pop    eax
c001118c:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0011191:	5a                   	pop    edx
c0011192:	57                   	push   edi
c0011193:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011199:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001119f:	e8 2e d4 ff ff       	call   c000e5d2 <Device::addChild(Device*)>
c00111a4:	83 c4 10             	add    esp,0x10
c00111a7:	eb 37                	jmp    c00111e0 <setupTimer(int)+0xf4>
c00111a9:	8d 76 00             	lea    esi,[esi+0x0]
c00111ac:	83 ec 0c             	sub    esp,0xc
c00111af:	68 5c 01 00 00       	push   0x15c
c00111b4:	e8 ba 8b ff ff       	call   c0009d73 <malloc>
c00111b9:	89 04 24             	mov    DWORD PTR [esp],eax
c00111bc:	89 c3                	mov    ebx,eax
c00111be:	e8 39 1a 01 00       	call   c0022bfc <PIT::PIT()>
c00111c3:	58                   	pop    eax
c00111c4:	5a                   	pop    edx
c00111c5:	53                   	push   ebx
c00111c6:	ff 35 88 8c 02 c0    	push   DWORD PTR ds:0xc0028c88
c00111cc:	e8 01 d4 ff ff       	call   c000e5d2 <Device::addChild(Device*)>
c00111d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00111d3:	6a 00                	push   0x0
c00111d5:	6a 00                	push   0x0
c00111d7:	56                   	push   esi
c00111d8:	53                   	push   ebx
c00111d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00111dc:	83 c4 20             	add    esp,0x20
c00111df:	90                   	nop
c00111e0:	89 d8                	mov    eax,ebx
c00111e2:	5b                   	pop    ebx
c00111e3:	5e                   	pop    esi
c00111e4:	5f                   	pop    edi
c00111e5:	c3                   	ret    
c00111e6:	66 90                	xchg   ax,ax

c00111e8 <VCache::VCache(PhysicalDisk*)>:
c00111e8:	53                   	push   ebx
c00111e9:	83 ec 18             	sub    esp,0x18
c00111ec:	ba 60 5d 02 c0       	mov    edx,0xc0025d60
c00111f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111f5:	89 10                	mov    DWORD PTR [eax],edx
c00111f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00111fb:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0011202:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011206:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001120d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011211:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0011218:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001121f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011223:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001122a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0011231:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011235:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001123c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011240:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0011244:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011248:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001124f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0011256:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001125a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001125e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011262:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0011266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001126a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001126e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011272:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0011279:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0011281:	83 ec 0c             	sub    esp,0xc
c0011284:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011288:	e8 e6 8a ff ff       	call   c0009d73 <malloc>
c001128d:	83 c4 10             	add    esp,0x10
c0011290:	89 c3                	mov    ebx,eax
c0011292:	83 ec 0c             	sub    esp,0xc
c0011295:	53                   	push   ebx
c0011296:	e8 d5 7a 00 00       	call   c0018d70 <Mutex::Mutex()>
c001129b:	83 c4 10             	add    esp,0x10
c001129e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112a2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00112a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00112ad:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00112b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112b4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00112bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00112bf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00112c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00112cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00112d0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00112d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00112dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00112e0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00112e3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00112e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00112ea:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00112ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00112f2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00112f8:	05 00 01 00 00       	add    eax,0x100
c00112fd:	c1 e0 04             	shl    eax,0x4
c0011300:	83 ec 0c             	sub    esp,0xc
c0011303:	50                   	push   eax
c0011304:	e8 6a 8a ff ff       	call   c0009d73 <malloc>
c0011309:	83 c4 10             	add    esp,0x10
c001130c:	89 c2                	mov    edx,eax
c001130e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011312:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011315:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011319:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0011320:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011324:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0011328:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001132c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011332:	c1 e0 06             	shl    eax,0x6
c0011335:	83 ec 0c             	sub    esp,0xc
c0011338:	50                   	push   eax
c0011339:	e8 35 8a ff ff       	call   c0009d73 <malloc>
c001133e:	83 c4 10             	add    esp,0x10
c0011341:	89 c2                	mov    edx,eax
c0011343:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011347:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001134a:	90                   	nop
c001134b:	83 c4 18             	add    esp,0x18
c001134e:	5b                   	pop    ebx
c001134f:	c3                   	ret    

c0011350 <VCache::invalidateReadBuffer()>:
c0011350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011354:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001135a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001135e:	c3                   	ret    
c001135f:	90                   	nop

c0011360 <VCache::writeWriteBuffer()>:
c0011360:	53                   	push   ebx
c0011361:	83 ec 08             	sub    esp,0x8
c0011364:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011368:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001136c:	74 1e                	je     c001138c <VCache::writeWriteBuffer()+0x2c>
c001136e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011371:	83 ec 0c             	sub    esp,0xc
c0011374:	8b 10                	mov    edx,DWORD PTR [eax]
c0011376:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011379:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001137c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001137f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011382:	50                   	push   eax
c0011383:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0011386:	83 c4 20             	add    esp,0x20
c0011389:	8d 76 00             	lea    esi,[esi+0x0]
c001138c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0011393:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001139a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001139e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00113a5:	83 c4 08             	add    esp,0x8
c00113a8:	5b                   	pop    ebx
c00113a9:	c3                   	ret    
c00113aa:	66 90                	xchg   ax,ax

c00113ac <VCache::~VCache()>:
c00113ac:	83 ec 0c             	sub    esp,0xc
c00113af:	ba 60 5d 02 c0       	mov    edx,0xc0025d60
c00113b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113b8:	89 10                	mov    DWORD PTR [eax],edx
c00113ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113be:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00113c1:	84 c0                	test   al,al
c00113c3:	74 0f                	je     c00113d4 <VCache::~VCache()+0x28>
c00113c5:	83 ec 0c             	sub    esp,0xc
c00113c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113cc:	e8 8f ff ff ff       	call   c0011360 <VCache::writeWriteBuffer()>
c00113d1:	83 c4 10             	add    esp,0x10
c00113d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113d8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00113db:	83 ec 0c             	sub    esp,0xc
c00113de:	50                   	push   eax
c00113df:	e8 9f 89 ff ff       	call   c0009d83 <free>
c00113e4:	83 c4 10             	add    esp,0x10
c00113e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113eb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00113ee:	83 ec 0c             	sub    esp,0xc
c00113f1:	50                   	push   eax
c00113f2:	e8 8c 89 ff ff       	call   c0009d83 <free>
c00113f7:	83 c4 10             	add    esp,0x10
c00113fa:	90                   	nop
c00113fb:	83 c4 0c             	add    esp,0xc
c00113fe:	c3                   	ret    
c00113ff:	90                   	nop

c0011400 <VCache::~VCache()>:
c0011400:	83 ec 0c             	sub    esp,0xc
c0011403:	83 ec 0c             	sub    esp,0xc
c0011406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001140a:	e8 9d ff ff ff       	call   c00113ac <VCache::~VCache()>
c001140f:	83 c4 10             	add    esp,0x10
c0011412:	83 ec 08             	sub    esp,0x8
c0011415:	6a 44                	push   0x44
c0011417:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001141b:	e8 5e bb ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0011420:	83 c4 10             	add    esp,0x10
c0011423:	83 c4 0c             	add    esp,0xc
c0011426:	c3                   	ret    
c0011427:	90                   	nop

c0011428 <VCache::write(unsigned long long, int, void*)>:
c0011428:	55                   	push   ebp
c0011429:	31 c0                	xor    eax,eax
c001142b:	57                   	push   edi
c001142c:	56                   	push   esi
c001142d:	53                   	push   ebx
c001142e:	83 ec 0c             	sub    esp,0xc
c0011431:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011435:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0011439:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001143d:	8d 76 00             	lea    esi,[esi+0x0]
c0011440:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0011444:	7d 1a                	jge    c0011460 <VCache::write(unsigned long long, int, void*)+0x38>
c0011446:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0011449:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c001144f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011453:	0f af c8             	imul   ecx,eax
c0011456:	01 ca                	add    edx,ecx
c0011458:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001145a:	40                   	inc    eax
c001145b:	eb e3                	jmp    c0011440 <VCache::write(unsigned long long, int, void*)+0x18>
c001145d:	8d 76 00             	lea    esi,[esi+0x0]
c0011460:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0011464:	74 0a                	je     c0011470 <VCache::write(unsigned long long, int, void*)+0x48>
c0011466:	53                   	push   ebx
c0011467:	e8 e4 fe ff ff       	call   c0011350 <VCache::invalidateReadBuffer()>
c001146c:	58                   	pop    eax
c001146d:	8d 76 00             	lea    esi,[esi+0x0]
c0011470:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0011474:	74 5e                	je     c00114d4 <VCache::write(unsigned long long, int, void*)+0xac>
c0011476:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0011479:	89 e8                	mov    eax,ebp
c001147b:	99                   	cdq    
c001147c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001147f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0011482:	89 c1                	mov    ecx,eax
c0011484:	89 d0                	mov    eax,edx
c0011486:	31 f1                	xor    ecx,esi
c0011488:	31 f8                	xor    eax,edi
c001148a:	09 c1                	or     ecx,eax
c001148c:	75 3a                	jne    c00114c8 <VCache::write(unsigned long long, int, void*)+0xa0>
c001148e:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0011493:	75 33                	jne    c00114c8 <VCache::write(unsigned long long, int, void*)+0xa0>
c0011495:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011498:	89 ef                	mov    edi,ebp
c001149a:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00114a0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00114a4:	0f af f9             	imul   edi,ecx
c00114a7:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c00114aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00114ac:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114af:	40                   	inc    eax
c00114b0:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00114b3:	83 f8 40             	cmp    eax,0x40
c00114b6:	75 60                	jne    c0011518 <VCache::write(unsigned long long, int, void*)+0xf0>
c00114b8:	83 ec 0c             	sub    esp,0xc
c00114bb:	53                   	push   ebx
c00114bc:	e8 9f fe ff ff       	call   c0011360 <VCache::writeWriteBuffer()>
c00114c1:	83 c4 10             	add    esp,0x10
c00114c4:	eb 52                	jmp    c0011518 <VCache::write(unsigned long long, int, void*)+0xf0>
c00114c6:	66 90                	xchg   ax,ax
c00114c8:	83 ec 0c             	sub    esp,0xc
c00114cb:	53                   	push   ebx
c00114cc:	e8 8f fe ff ff       	call   c0011360 <VCache::writeWriteBuffer()>
c00114d1:	83 c4 10             	add    esp,0x10
c00114d4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00114d7:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c00114dc:	7f 22                	jg     c0011500 <VCache::write(unsigned long long, int, void*)+0xd8>
c00114de:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00114e1:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00114e4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00114e8:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00114ec:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00114ef:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00114f2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00114f8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00114fc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00114fe:	eb 18                	jmp    c0011518 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011500:	83 ec 0c             	sub    esp,0xc
c0011503:	8b 10                	mov    edx,DWORD PTR [eax]
c0011505:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011509:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001150d:	57                   	push   edi
c001150e:	56                   	push   esi
c001150f:	50                   	push   eax
c0011510:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0011513:	83 c4 20             	add    esp,0x20
c0011516:	66 90                	xchg   ax,ax
c0011518:	83 c4 0c             	add    esp,0xc
c001151b:	31 c0                	xor    eax,eax
c001151d:	5b                   	pop    ebx
c001151e:	5e                   	pop    esi
c001151f:	5f                   	pop    edi
c0011520:	5d                   	pop    ebp
c0011521:	c3                   	ret    

c0011522 <VCache::read(unsigned long long, int, void*)>:
c0011522:	55                   	push   ebp
c0011523:	31 c0                	xor    eax,eax
c0011525:	57                   	push   edi
c0011526:	56                   	push   esi
c0011527:	53                   	push   ebx
c0011528:	83 ec 1c             	sub    esp,0x1c
c001152b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001152f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011533:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011537:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001153b:	90                   	nop
c001153c:	39 e8                	cmp    eax,ebp
c001153e:	7d 18                	jge    c0011558 <VCache::read(unsigned long long, int, void*)+0x36>
c0011540:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0011543:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011549:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001154d:	0f af c8             	imul   ecx,eax
c0011550:	01 ca                	add    edx,ecx
c0011552:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0011554:	40                   	inc    eax
c0011555:	eb e5                	jmp    c001153c <VCache::read(unsigned long long, int, void*)+0x1a>
c0011557:	90                   	nop
c0011558:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001155c:	74 0e                	je     c001156c <VCache::read(unsigned long long, int, void*)+0x4a>
c001155e:	83 ec 0c             	sub    esp,0xc
c0011561:	53                   	push   ebx
c0011562:	e8 f9 fd ff ff       	call   c0011360 <VCache::writeWriteBuffer()>
c0011567:	83 c4 10             	add    esp,0x10
c001156a:	66 90                	xchg   ax,ax
c001156c:	83 fd 01             	cmp    ebp,0x1
c001156f:	0f 85 87 00 00 00    	jne    c00115fc <VCache::read(unsigned long long, int, void*)+0xda>
c0011575:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011578:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001157c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0011583:	75 77                	jne    c00115fc <VCache::read(unsigned long long, int, void*)+0xda>
c0011585:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0011588:	89 e9                	mov    ecx,ebp
c001158a:	f7 d9                	neg    ecx
c001158c:	89 c8                	mov    eax,ecx
c001158e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0011592:	c1 f8 1f             	sar    eax,0x1f
c0011595:	21 f1                	and    ecx,esi
c0011597:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001159b:	89 c8                	mov    eax,ecx
c001159d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00115a1:	21 f9                	and    ecx,edi
c00115a3:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00115a7:	89 ca                	mov    edx,ecx
c00115a9:	74 0d                	je     c00115b8 <VCache::read(unsigned long long, int, void*)+0x96>
c00115ab:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00115ae:	75 08                	jne    c00115b8 <VCache::read(unsigned long long, int, void*)+0x96>
c00115b0:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c00115b3:	74 27                	je     c00115dc <VCache::read(unsigned long long, int, void*)+0xba>
c00115b5:	8d 76 00             	lea    esi,[esi+0x0]
c00115b8:	83 ec 0c             	sub    esp,0xc
c00115bb:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00115bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00115c3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00115c6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00115c9:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00115cb:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00115ce:	55                   	push   ebp
c00115cf:	52                   	push   edx
c00115d0:	50                   	push   eax
c00115d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00115d5:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00115d8:	83 c4 20             	add    esp,0x20
c00115db:	90                   	nop
c00115dc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00115df:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00115e3:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00115e9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00115ec:	48                   	dec    eax
c00115ed:	21 c6                	and    esi,eax
c00115ef:	0f af f1             	imul   esi,ecx
c00115f2:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00115f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115f7:	eb 23                	jmp    c001161c <VCache::read(unsigned long long, int, void*)+0xfa>
c00115f9:	8d 76 00             	lea    esi,[esi+0x0]
c00115fc:	83 ec 0c             	sub    esp,0xc
c00115ff:	53                   	push   ebx
c0011600:	e8 4b fd ff ff       	call   c0011350 <VCache::invalidateReadBuffer()>
c0011605:	5a                   	pop    edx
c0011606:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011609:	8b 10                	mov    edx,DWORD PTR [eax]
c001160b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001160f:	55                   	push   ebp
c0011610:	57                   	push   edi
c0011611:	56                   	push   esi
c0011612:	50                   	push   eax
c0011613:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0011616:	83 c4 20             	add    esp,0x20
c0011619:	8d 76 00             	lea    esi,[esi+0x0]
c001161c:	83 c4 1c             	add    esp,0x1c
c001161f:	31 c0                	xor    eax,eax
c0011621:	5b                   	pop    ebx
c0011622:	5e                   	pop    esi
c0011623:	5f                   	pop    edi
c0011624:	5d                   	pop    ebp
c0011625:	c3                   	ret    

c0011626 <Video::putrect(int, int, int, int, unsigned int)>:
c0011626:	55                   	push   ebp
c0011627:	57                   	push   edi
c0011628:	56                   	push   esi
c0011629:	53                   	push   ebx
c001162a:	83 ec 1c             	sub    esp,0x1c
c001162d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011631:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011635:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011639:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001163d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011641:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011645:	01 df                	add    edi,ebx
c0011647:	39 fb                	cmp    ebx,edi
c0011649:	7d 1f                	jge    c001166a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001164b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001164f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0011653:	7d 12                	jge    c0011667 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0011655:	8b 16                	mov    edx,DWORD PTR [esi]
c0011657:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001165b:	53                   	push   ebx
c001165c:	55                   	push   ebp
c001165d:	45                   	inc    ebp
c001165e:	56                   	push   esi
c001165f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0011662:	83 c4 10             	add    esp,0x10
c0011665:	eb e8                	jmp    c001164f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0011667:	43                   	inc    ebx
c0011668:	eb dd                	jmp    c0011647 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001166a:	83 c4 1c             	add    esp,0x1c
c001166d:	5b                   	pop    ebx
c001166e:	5e                   	pop    esi
c001166f:	5f                   	pop    edi
c0011670:	5d                   	pop    ebp
c0011671:	c3                   	ret    

c0011672 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0011672:	55                   	push   ebp
c0011673:	57                   	push   edi
c0011674:	31 ff                	xor    edi,edi
c0011676:	56                   	push   esi
c0011677:	53                   	push   ebx
c0011678:	83 ec 1c             	sub    esp,0x1c
c001167b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001167f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011683:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001168a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001168f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011693:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0011697:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001169b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001169e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00116a2:	01 f9                	add    ecx,edi
c00116a4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00116a8:	7d 2f                	jge    c00116d9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00116aa:	31 f6                	xor    esi,esi
c00116ac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00116b0:	01 f2                	add    edx,esi
c00116b2:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00116b6:	7d 1a                	jge    c00116d2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00116b8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00116bb:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00116be:	46                   	inc    esi
c00116bf:	51                   	push   ecx
c00116c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00116c4:	52                   	push   edx
c00116c5:	55                   	push   ebp
c00116c6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116c9:	83 c4 10             	add    esp,0x10
c00116cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00116d0:	eb da                	jmp    c00116ac <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00116d2:	47                   	inc    edi
c00116d3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00116d7:	eb c5                	jmp    c001169e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00116d9:	83 c4 1c             	add    esp,0x1c
c00116dc:	5b                   	pop    ebx
c00116dd:	5e                   	pop    esi
c00116de:	5f                   	pop    edi
c00116df:	5d                   	pop    ebp
c00116e0:	c3                   	ret    
c00116e1:	90                   	nop

c00116e2 <Video::blit(unsigned int*, int, int, int, int)>:
c00116e2:	55                   	push   ebp
c00116e3:	57                   	push   edi
c00116e4:	56                   	push   esi
c00116e5:	53                   	push   ebx
c00116e6:	83 ec 1c             	sub    esp,0x1c
c00116e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00116ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00116f1:	85 c0                	test   eax,eax
c00116f3:	79 02                	jns    c00116f7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00116f5:	31 c0                	xor    eax,eax
c00116f7:	c1 e0 02             	shl    eax,0x2
c00116fa:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00116fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011702:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011706:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001170a:	39 d8                	cmp    eax,ebx
c001170c:	7e 49                	jle    c0011757 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001170e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011714:	7c 41                	jl     c0011757 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011716:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001171a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001171e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011722:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0011726:	39 f9                	cmp    ecx,edi
c0011728:	7e 22                	jle    c001174c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001172a:	83 c5 04             	add    ebp,0x4
c001172d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0011733:	7c 14                	jl     c0011749 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0011735:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011737:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001173a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001173e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011742:	56                   	push   esi
c0011743:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0011746:	83 c4 10             	add    esp,0x10
c0011749:	47                   	inc    edi
c001174a:	eb d2                	jmp    c001171e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001174c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011750:	43                   	inc    ebx
c0011751:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011755:	eb ab                	jmp    c0011702 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0011757:	83 c4 1c             	add    esp,0x1c
c001175a:	5b                   	pop    ebx
c001175b:	5e                   	pop    esi
c001175c:	5f                   	pop    edi
c001175d:	5d                   	pop    ebp
c001175e:	c3                   	ret    
c001175f:	90                   	nop

c0011760 <Video::clearScreen(unsigned int)>:
c0011760:	57                   	push   edi
c0011761:	56                   	push   esi
c0011762:	53                   	push   ebx
c0011763:	31 db                	xor    ebx,ebx
c0011765:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011769:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001176f:	7e 1f                	jle    c0011790 <Video::clearScreen(unsigned int)+0x30>
c0011771:	31 ff                	xor    edi,edi
c0011773:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0011779:	7e 12                	jle    c001178d <Video::clearScreen(unsigned int)+0x2d>
c001177b:	8b 06                	mov    eax,DWORD PTR [esi]
c001177d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011781:	53                   	push   ebx
c0011782:	57                   	push   edi
c0011783:	47                   	inc    edi
c0011784:	56                   	push   esi
c0011785:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011788:	83 c4 10             	add    esp,0x10
c001178b:	eb e6                	jmp    c0011773 <Video::clearScreen(unsigned int)+0x13>
c001178d:	43                   	inc    ebx
c001178e:	eb d9                	jmp    c0011769 <Video::clearScreen(unsigned int)+0x9>
c0011790:	5b                   	pop    ebx
c0011791:	5e                   	pop    esi
c0011792:	5f                   	pop    edi
c0011793:	c3                   	ret    

c0011794 <Video::putpixel(int, int, unsigned int)>:
c0011794:	c7 44 24 04 68 5d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025d68
c001179c:	e9 90 39 00 00       	jmp    c0015131 <Krnl::panic(char const*)>
c00117a1:	90                   	nop

c00117a2 <Video::Video(char const*)>:
c00117a2:	83 ec 0c             	sub    esp,0xc
c00117a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a9:	83 ec 08             	sub    esp,0x8
c00117ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117b0:	50                   	push   eax
c00117b1:	e8 20 d0 ff ff       	call   c000e7d6 <Device::Device(char const*)>
c00117b6:	83 c4 10             	add    esp,0x10
c00117b9:	ba d8 5d 02 c0       	mov    edx,0xc0025dd8
c00117be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c2:	89 10                	mov    DWORD PTR [eax],edx
c00117c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c8:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00117d2:	90                   	nop
c00117d3:	83 c4 0c             	add    esp,0xc
c00117d6:	c3                   	ret    
c00117d7:	90                   	nop

c00117d8 <Video::~Video()>:
c00117d8:	83 ec 0c             	sub    esp,0xc
c00117db:	ba d8 5d 02 c0       	mov    edx,0xc0025dd8
c00117e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117e4:	89 10                	mov    DWORD PTR [eax],edx
c00117e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ea:	83 ec 0c             	sub    esp,0xc
c00117ed:	50                   	push   eax
c00117ee:	e8 ad cc ff ff       	call   c000e4a0 <Device::~Device()>
c00117f3:	83 c4 10             	add    esp,0x10
c00117f6:	90                   	nop
c00117f7:	83 c4 0c             	add    esp,0xc
c00117fa:	c3                   	ret    
c00117fb:	90                   	nop

c00117fc <Video::~Video()>:
c00117fc:	83 ec 0c             	sub    esp,0xc
c00117ff:	83 ec 0c             	sub    esp,0xc
c0011802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011806:	e8 cd ff ff ff       	call   c00117d8 <Video::~Video()>
c001180b:	83 c4 10             	add    esp,0x10
c001180e:	83 ec 08             	sub    esp,0x8
c0011811:	68 64 01 00 00       	push   0x164
c0011816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001181a:	e8 5f b7 ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c001181f:	83 c4 10             	add    esp,0x10
c0011822:	83 c4 0c             	add    esp,0xc
c0011825:	c3                   	ret    

c0011826 <Video::isMonochrome()>:
c0011826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001182a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0011830:	c3                   	ret    
c0011831:	90                   	nop

c0011832 <Video::getWidth()>:
c0011832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011836:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001183c:	c3                   	ret    
c001183d:	90                   	nop

c001183e <Video::getHeight()>:
c001183e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011842:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011848:	c3                   	ret    
c0011849:	90                   	nop

c001184a <Video::drawCursor(int, int, unsigned char*, int)>:
c001184a:	55                   	push   ebp
c001184b:	57                   	push   edi
c001184c:	56                   	push   esi
c001184d:	53                   	push   ebx
c001184e:	83 ec 2c             	sub    esp,0x2c
c0011851:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011855:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011859:	83 f8 01             	cmp    eax,0x1
c001185c:	19 c9                	sbb    ecx,ecx
c001185e:	31 db                	xor    ebx,ebx
c0011860:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0011864:	89 cd                	mov    ebp,ecx
c0011866:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001186e:	f7 d5                	not    ebp
c0011870:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0011876:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001187a:	01 d8                	add    eax,ebx
c001187c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011880:	56                   	push   esi
c0011881:	e8 b8 ff ff ff       	call   c001183e <Video::getHeight()>
c0011886:	59                   	pop    ecx
c0011887:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001188b:	7e 70                	jle    c00118fd <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001188d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011891:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0011895:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011898:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001189c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00118a0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00118a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00118ab:	89 f8                	mov    eax,edi
c00118ad:	83 c0 20             	add    eax,0x20
c00118b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00118b4:	56                   	push   esi
c00118b5:	e8 78 ff ff ff       	call   c0011832 <Video::getWidth()>
c00118ba:	5a                   	pop    edx
c00118bb:	39 c7                	cmp    edi,eax
c00118bd:	7d 34                	jge    c00118f3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00118bf:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00118c4:	74 05                	je     c00118cb <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00118c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00118c8:	55                   	push   ebp
c00118c9:	eb 0d                	jmp    c00118d8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00118cb:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00118d0:	74 12                	je     c00118e4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00118d2:	8b 06                	mov    eax,DWORD PTR [esi]
c00118d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00118d8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00118dc:	57                   	push   edi
c00118dd:	56                   	push   esi
c00118de:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00118e1:	83 c4 10             	add    esp,0x10
c00118e4:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00118e8:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00118ec:	47                   	inc    edi
c00118ed:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00118f1:	75 c1                	jne    c00118b4 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00118f3:	43                   	inc    ebx
c00118f4:	83 fb 20             	cmp    ebx,0x20
c00118f7:	0f 85 79 ff ff ff    	jne    c0011876 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00118fd:	83 c4 2c             	add    esp,0x2c
c0011900:	5b                   	pop    ebx
c0011901:	5e                   	pop    esi
c0011902:	5f                   	pop    edi
c0011903:	5d                   	pop    ebp
c0011904:	c3                   	ret    
c0011905:	90                   	nop

c0011906 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0011906:	55                   	push   ebp
c0011907:	57                   	push   edi
c0011908:	56                   	push   esi
c0011909:	53                   	push   ebx
c001190a:	83 ec 28             	sub    esp,0x28
c001190d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011911:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011915:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011919:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001191d:	c1 e6 08             	shl    esi,0x8
c0011920:	01 c6                	add    esi,eax
c0011922:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0011926:	c1 e0 08             	shl    eax,0x8
c0011929:	01 d0                	add    eax,edx
c001192b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001192f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011933:	0f af c6             	imul   eax,esi
c0011936:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001193d:	50                   	push   eax
c001193e:	e8 30 84 ff ff       	call   c0009d73 <malloc>
c0011943:	83 c4 10             	add    esp,0x10
c0011946:	89 c7                	mov    edi,eax
c0011948:	85 c0                	test   eax,eax
c001194a:	75 10                	jne    c001195c <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c001194c:	83 ec 0c             	sub    esp,0xc
c001194f:	68 89 5d 02 c0       	push   0xc0025d89
c0011954:	e8 d8 37 00 00       	call   c0015131 <Krnl::panic(char const*)>
c0011959:	83 c4 10             	add    esp,0x10
c001195c:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001195f:	ba 12 00 00 00       	mov    edx,0x12
c0011964:	84 c0                	test   al,al
c0011966:	74 11                	je     c0011979 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0011968:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c001196c:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0011970:	c1 fa 03             	sar    edx,0x3
c0011973:	0f af d1             	imul   edx,ecx
c0011976:	83 c2 12             	add    edx,0x12
c0011979:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001197d:	74 04                	je     c0011983 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c001197f:	85 f6                	test   esi,esi
c0011981:	75 12                	jne    c0011995 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0011983:	83 ec 0c             	sub    esp,0xc
c0011986:	68 99 5d 02 c0       	push   0xc0025d99
c001198b:	e8 cf b6 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0011990:	e9 b8 00 00 00       	jmp    c0011a4d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0011995:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011999:	80 f9 02             	cmp    cl,0x2
c001199c:	0f 85 96 00 00 00    	jne    c0011a38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c00119a2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00119a7:	75 0e                	jne    c00119b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00119a9:	84 c0                	test   al,al
c00119ab:	75 0a                	jne    c00119b7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00119ad:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00119b0:	83 e8 18             	sub    eax,0x18
c00119b3:	a8 f7                	test   al,0xf7
c00119b5:	74 0a                	je     c00119c1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c00119b7:	83 ec 0c             	sub    esp,0xc
c00119ba:	68 ae 5d 02 c0       	push   0xc0025dae
c00119bf:	eb 7f                	jmp    c0011a40 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c00119c1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00119c9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00119d1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00119d5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00119dd:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00119e1:	75 0c                	jne    c00119ef <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00119e3:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00119e8:	c1 e0 18             	shl    eax,0x18
c00119eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00119ef:	45                   	inc    ebp
c00119f0:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00119f5:	c1 e1 10             	shl    ecx,0x10
c00119f8:	89 c8                	mov    eax,ecx
c00119fa:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00119ff:	c1 e1 08             	shl    ecx,0x8
c0011a02:	09 c1                	or     ecx,eax
c0011a04:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011a08:	09 c1                	or     ecx,eax
c0011a0a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0011a0e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011a12:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011a16:	c1 f8 03             	sar    eax,0x3
c0011a19:	01 c2                	add    edx,eax
c0011a1b:	89 e8                	mov    eax,ebp
c0011a1d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011a21:	39 c6                	cmp    esi,eax
c0011a23:	7f b0                	jg     c00119d5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011a25:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011a29:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011a2d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011a30:	7e 22                	jle    c0011a54 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011a32:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011a36:	eb 99                	jmp    c00119d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011a38:	50                   	push   eax
c0011a39:	50                   	push   eax
c0011a3a:	51                   	push   ecx
c0011a3b:	68 bc 5d 02 c0       	push   0xc0025dbc
c0011a40:	e8 1a b6 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0011a45:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011a48:	e8 36 83 ff ff       	call   c0009d83 <free>
c0011a4d:	83 c4 10             	add    esp,0x10
c0011a50:	31 ff                	xor    edi,edi
c0011a52:	eb 0f                	jmp    c0011a63 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0011a54:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a58:	89 30                	mov    DWORD PTR [eax],esi
c0011a5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011a5e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0011a61:	89 30                	mov    DWORD PTR [eax],esi
c0011a63:	83 c4 1c             	add    esp,0x1c
c0011a66:	89 f8                	mov    eax,edi
c0011a68:	5b                   	pop    ebx
c0011a69:	5e                   	pop    esi
c0011a6a:	5f                   	pop    edi
c0011a6b:	5d                   	pop    ebp
c0011a6c:	c3                   	ret    
c0011a6d:	90                   	nop

c0011a6e <Video::putTGA(int, int, unsigned char*, int)>:
c0011a6e:	55                   	push   ebp
c0011a6f:	57                   	push   edi
c0011a70:	56                   	push   esi
c0011a71:	53                   	push   ebx
c0011a72:	83 ec 28             	sub    esp,0x28
c0011a75:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0011a79:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011a7d:	50                   	push   eax
c0011a7e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011a82:	50                   	push   eax
c0011a83:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011a87:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011a8b:	56                   	push   esi
c0011a8c:	e8 75 fe ff ff       	call   c0011906 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0011a91:	83 c4 20             	add    esp,0x20
c0011a94:	85 c0                	test   eax,eax
c0011a96:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011a9a:	74 35                	je     c0011ad1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011a9c:	89 c7                	mov    edi,eax
c0011a9e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011aa2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011aa6:	39 d8                	cmp    eax,ebx
c0011aa8:	7e 27                	jle    c0011ad1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011aaa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011aae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011ab6:	39 e8                	cmp    eax,ebp
c0011ab8:	7e 14                	jle    c0011ace <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011aba:	8b 06                	mov    eax,DWORD PTR [esi]
c0011abc:	83 c7 04             	add    edi,0x4
c0011abf:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011ac2:	53                   	push   ebx
c0011ac3:	55                   	push   ebp
c0011ac4:	45                   	inc    ebp
c0011ac5:	56                   	push   esi
c0011ac6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011ac9:	83 c4 10             	add    esp,0x10
c0011acc:	eb e0                	jmp    c0011aae <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011ace:	43                   	inc    ebx
c0011acf:	eb cd                	jmp    c0011a9e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011ad1:	83 c4 1c             	add    esp,0x1c
c0011ad4:	5b                   	pop    ebx
c0011ad5:	5e                   	pop    esi
c0011ad6:	5f                   	pop    edi
c0011ad7:	5d                   	pop    ebp
c0011ad8:	c3                   	ret    
c0011ad9:	66 90                	xchg   ax,ax
c0011adb:	90                   	nop

c0011adc <ACPI::close(int, int, void*)>:
c0011adc:	83 ec 1c             	sub    esp,0x1c
c0011adf:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011ae7:	74 0b                	je     c0011af4 <ACPI::close(int, int, void*)+0x18>
c0011ae9:	b8 00 00 00 00       	mov    eax,0x0
c0011aee:	e9 99 00 00 00       	jmp    c0011b8c <ACPI::close(int, int, void*)+0xb0>
c0011af3:	90                   	nop
c0011af4:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011af9:	75 29                	jne    c0011b24 <ACPI::close(int, int, void*)+0x48>
c0011afb:	a1 c8 92 02 c0       	mov    eax,ds:0xc00292c8
c0011b00:	85 c0                	test   eax,eax
c0011b02:	74 08                	je     c0011b0c <ACPI::close(int, int, void*)+0x30>
c0011b04:	a1 c8 92 02 c0       	mov    eax,ds:0xc00292c8
c0011b09:	ff d0                	call   eax
c0011b0b:	90                   	nop
c0011b0c:	83 ec 0c             	sub    esp,0xc
c0011b0f:	68 18 5e 02 c0       	push   0xc0025e18
c0011b14:	e8 18 36 00 00       	call   c0015131 <Krnl::panic(char const*)>
c0011b19:	83 c4 10             	add    esp,0x10
c0011b1c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b21:	eb 69                	jmp    c0011b8c <ACPI::close(int, int, void*)+0xb0>
c0011b23:	90                   	nop
c0011b24:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011b29:	75 59                	jne    c0011b84 <ACPI::close(int, int, void*)+0xa8>
c0011b2b:	a1 c4 92 02 c0       	mov    eax,ds:0xc00292c4
c0011b30:	85 c0                	test   eax,eax
c0011b32:	74 08                	je     c0011b3c <ACPI::close(int, int, void*)+0x60>
c0011b34:	a1 c4 92 02 c0       	mov    eax,ds:0xc00292c4
c0011b39:	ff d0                	call   eax
c0011b3b:	90                   	nop
c0011b3c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011b41:	8d 76 00             	lea    esi,[esi+0x0]
c0011b44:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011b49:	83 e0 02             	and    eax,0x2
c0011b4c:	74 1e                	je     c0011b6c <ACPI::close(int, int, void*)+0x90>
c0011b4e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0011b55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b59:	89 c2                	mov    edx,eax
c0011b5b:	ec                   	in     al,dx
c0011b5c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011b60:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0011b64:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b68:	eb da                	jmp    c0011b44 <ACPI::close(int, int, void*)+0x68>
c0011b6a:	66 90                	xchg   ax,ax
c0011b6c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0011b73:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0011b78:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0011b7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011b80:	ee                   	out    dx,al
c0011b81:	8d 76 00             	lea    esi,[esi+0x0]
c0011b84:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b89:	8d 76 00             	lea    esi,[esi+0x0]
c0011b8c:	83 c4 1c             	add    esp,0x1c
c0011b8f:	c3                   	ret    

c0011b90 <findRSDP()>:
c0011b90:	83 ec 1c             	sub    esp,0x1c
c0011b93:	83 ec 0c             	sub    esp,0xc
c0011b96:	68 3b 5f 02 c0       	push   0xc0025f3b
c0011b9b:	e8 2d 82 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0011ba0:	83 c4 10             	add    esp,0x10
c0011ba3:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0011ba8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011bae:	83 e0 04             	and    eax,0x4
c0011bb1:	84 c0                	test   al,al
c0011bb3:	75 0b                	jne    c0011bc0 <findRSDP()+0x30>
c0011bb5:	b8 00 00 00 00       	mov    eax,0x0
c0011bba:	e9 a1 00 00 00       	jmp    c0011c60 <findRSDP()+0xd0>
c0011bbf:	90                   	nop
c0011bc0:	a1 b8 8c 02 c0       	mov    eax,ds:0xc0028cb8
c0011bc5:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011bca:	7f 1c                	jg     c0011be8 <findRSDP()+0x58>
c0011bcc:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0011bd1:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011bd7:	83 e2 fb             	and    edx,0xfffffffb
c0011bda:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011be0:	b8 00 00 00 00       	mov    eax,0x0
c0011be5:	eb 79                	jmp    c0011c60 <findRSDP()+0xd0>
c0011be7:	90                   	nop
c0011be8:	83 ec 0c             	sub    esp,0xc
c0011beb:	68 4b 5f 02 c0       	push   0xc0025f4b
c0011bf0:	e8 d8 81 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0011bf5:	83 c4 10             	add    esp,0x10
c0011bf8:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011c00:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011c08:	77 3e                	ja     c0011c48 <findRSDP()+0xb8>
c0011c0a:	83 ec 04             	sub    esp,0x4
c0011c0d:	6a 08                	push   0x8
c0011c0f:	68 64 5f 02 c0       	push   0xc0025f64
c0011c14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011c18:	e8 73 e9 fe ff       	call   c0000590 <memcmp>
c0011c1d:	83 c4 10             	add    esp,0x10
c0011c20:	85 c0                	test   eax,eax
c0011c22:	0f 94 c0             	sete   al
c0011c25:	84 c0                	test   al,al
c0011c27:	74 17                	je     c0011c40 <findRSDP()+0xb0>
c0011c29:	83 ec 0c             	sub    esp,0xc
c0011c2c:	68 6d 5f 02 c0       	push   0xc0025f6d
c0011c31:	e8 97 81 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0011c36:	83 c4 10             	add    esp,0x10
c0011c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c3d:	eb 21                	jmp    c0011c60 <findRSDP()+0xd0>
c0011c3f:	90                   	nop
c0011c40:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011c45:	eb b9                	jmp    c0011c00 <findRSDP()+0x70>
c0011c47:	90                   	nop
c0011c48:	83 ec 0c             	sub    esp,0xc
c0011c4b:	68 7b 5f 02 c0       	push   0xc0025f7b
c0011c50:	e8 78 81 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0011c55:	83 c4 10             	add    esp,0x10
c0011c58:	b8 00 00 00 00       	mov    eax,0x0
c0011c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0011c60:	83 c4 1c             	add    esp,0x1c
c0011c63:	c3                   	ret    

c0011c64 <loadACPITables(unsigned char*)>:
c0011c64:	57                   	push   edi
c0011c65:	56                   	push   esi
c0011c66:	53                   	push   ebx
c0011c67:	83 ec 60             	sub    esp,0x60
c0011c6a:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0011c6f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011c75:	83 e0 04             	and    eax,0x4
c0011c78:	84 c0                	test   al,al
c0011c7a:	0f 84 3c 02 00 00    	je     c0011ebc <loadACPITables(unsigned char*)+0x258>
c0011c80:	a0 e0 94 02 c0       	mov    al,ds:0xc00294e0
c0011c85:	84 c0                	test   al,al
c0011c87:	74 77                	je     c0011d00 <loadACPITables(unsigned char*)+0x9c>
c0011c89:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011c8d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011c91:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0011c95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c98:	83 e8 24             	sub    eax,0x24
c0011c9b:	c1 e8 03             	shr    eax,0x3
c0011c9e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011ca2:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011caa:	66 90                	xchg   ax,ax
c0011cac:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011cb0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011cb4:	0f 8d b6 00 00 00    	jge    c0011d70 <loadACPITables(unsigned char*)+0x10c>
c0011cba:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011cbe:	83 c0 24             	add    eax,0x24
c0011cc1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011cc5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011cc9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011ccd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011cd1:	c1 e0 03             	shl    eax,0x3
c0011cd4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011cd8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011cdc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011cdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ce1:	89 c1                	mov    ecx,eax
c0011ce3:	a1 cc 92 02 c0       	mov    eax,ds:0xc00292cc
c0011ce8:	8d 50 01             	lea    edx,[eax+0x1]
c0011ceb:	89 15 cc 92 02 c0    	mov    DWORD PTR ds:0xc00292cc,edx
c0011cf1:	89 ca                	mov    edx,ecx
c0011cf3:	89 14 c5 e4 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6d1c],edx
c0011cfa:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011cfe:	eb ac                	jmp    c0011cac <loadACPITables(unsigned char*)+0x48>
c0011d00:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011d04:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011d08:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d0f:	83 e8 24             	sub    eax,0x24
c0011d12:	c1 e8 02             	shr    eax,0x2
c0011d15:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011d19:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011d21:	8d 76 00             	lea    esi,[esi+0x0]
c0011d24:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011d28:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0011d2c:	7d 42                	jge    c0011d70 <loadACPITables(unsigned char*)+0x10c>
c0011d2e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011d32:	83 c0 24             	add    eax,0x24
c0011d35:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011d39:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011d3d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011d41:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011d45:	c1 e0 02             	shl    eax,0x2
c0011d48:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0011d4c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d50:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011d52:	a1 cc 92 02 c0       	mov    eax,ds:0xc00292cc
c0011d57:	8d 50 01             	lea    edx,[eax+0x1]
c0011d5a:	89 15 cc 92 02 c0    	mov    DWORD PTR ds:0xc00292cc,edx
c0011d60:	89 ca                	mov    edx,ecx
c0011d62:	89 14 c5 e4 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6d1c],edx
c0011d69:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0011d6d:	eb b5                	jmp    c0011d24 <loadACPITables(unsigned char*)+0xc0>
c0011d6f:	90                   	nop
c0011d70:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0011d78:	a1 cc 92 02 c0       	mov    eax,ds:0xc00292cc
c0011d7d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0011d81:	0f 8d 39 01 00 00    	jge    c0011ec0 <loadACPITables(unsigned char*)+0x25c>
c0011d87:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011d8b:	8b 04 c5 e4 92 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6d1c]
c0011d92:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011d96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d9a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011d9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011da2:	25 ff 0f 00 00       	and    eax,0xfff
c0011da7:	89 c6                	mov    esi,eax
c0011da9:	8b 1d b0 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028db0
c0011daf:	83 ec 0c             	sub    esp,0xc
c0011db2:	6a 01                	push   0x1
c0011db4:	e8 80 9f ff ff       	call   c000bd39 <Virt::allocateKernelVirtualPages(int)>
c0011db9:	83 c4 10             	add    esp,0x10
c0011dbc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011dc0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011dc6:	83 ec 0c             	sub    esp,0xc
c0011dc9:	6a 01                	push   0x1
c0011dcb:	6a 01                	push   0x1
c0011dcd:	50                   	push   eax
c0011dce:	52                   	push   edx
c0011dcf:	53                   	push   ebx
c0011dd0:	e8 01 a9 ff ff       	call   c000c6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011dd5:	83 c4 20             	add    esp,0x20
c0011dd8:	09 f0                	or     eax,esi
c0011dda:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011dde:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011de2:	c1 e0 03             	shl    eax,0x3
c0011de5:	05 e0 92 02 c0       	add    eax,0xc00292e0
c0011dea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011dee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011df2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011df6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011dfe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011e06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e0a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011e12:	89 c6                	mov    esi,eax
c0011e14:	89 d7                	mov    edi,edx
c0011e16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011e18:	89 c8                	mov    eax,ecx
c0011e1a:	89 fa                	mov    edx,edi
c0011e1c:	89 f3                	mov    ebx,esi
c0011e1e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011e22:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011e26:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011e2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011e31:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011e35:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e39:	05 00 10 00 00       	add    eax,0x1000
c0011e3e:	c1 e8 0c             	shr    eax,0xc
c0011e41:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011e45:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e49:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011e4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e51:	25 ff 0f 00 00       	and    eax,0xfff
c0011e56:	89 c6                	mov    esi,eax
c0011e58:	8b 1d b0 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028db0
c0011e5e:	83 ec 0c             	sub    esp,0xc
c0011e61:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011e65:	e8 cf 9e ff ff       	call   c000bd39 <Virt::allocateKernelVirtualPages(int)>
c0011e6a:	83 c4 10             	add    esp,0x10
c0011e6d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011e71:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011e77:	83 ec 0c             	sub    esp,0xc
c0011e7a:	6a 01                	push   0x1
c0011e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011e80:	50                   	push   eax
c0011e81:	52                   	push   edx
c0011e82:	53                   	push   ebx
c0011e83:	e8 4e a8 ff ff       	call   c000c6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e88:	83 c4 20             	add    esp,0x20
c0011e8b:	09 f0                	or     eax,esi
c0011e8d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011e91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e95:	83 ec 0c             	sub    esp,0xc
c0011e98:	50                   	push   eax
c0011e99:	e8 cb a1 ff ff       	call   c000c069 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e9e:	83 c4 10             	add    esp,0x10
c0011ea1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011ea5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011ea9:	89 14 c5 e4 92 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6d1c],edx
c0011eb0:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011eb4:	e9 bf fe ff ff       	jmp    c0011d78 <loadACPITables(unsigned char*)+0x114>
c0011eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0011ebc:	90                   	nop
c0011ebd:	8d 76 00             	lea    esi,[esi+0x0]
c0011ec0:	83 c4 60             	add    esp,0x60
c0011ec3:	5b                   	pop    ebx
c0011ec4:	5e                   	pop    esi
c0011ec5:	5f                   	pop    edi
c0011ec6:	c3                   	ret    
c0011ec7:	90                   	nop

c0011ec8 <findRSDT(unsigned char*)>:
c0011ec8:	57                   	push   edi
c0011ec9:	56                   	push   esi
c0011eca:	53                   	push   ebx
c0011ecb:	83 ec 50             	sub    esp,0x50
c0011ece:	83 ec 0c             	sub    esp,0xc
c0011ed1:	68 8f 5f 02 c0       	push   0xc0025f8f
c0011ed6:	e8 f2 7e ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0011edb:	83 c4 10             	add    esp,0x10
c0011ede:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0011ee3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011ee9:	83 e0 04             	and    eax,0x4
c0011eec:	84 c0                	test   al,al
c0011eee:	75 0c                	jne    c0011efc <findRSDT(unsigned char*)+0x34>
c0011ef0:	b8 00 00 00 00       	mov    eax,0x0
c0011ef5:	e9 86 01 00 00       	jmp    c0012080 <findRSDT(unsigned char*)+0x1b8>
c0011efa:	66 90                	xchg   ax,ax
c0011efc:	83 ec 0c             	sub    esp,0xc
c0011eff:	68 a1 5f 02 c0       	push   0xc0025fa1
c0011f04:	e8 c4 7e ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0011f09:	83 c4 10             	add    esp,0x10
c0011f0c:	89 e0                	mov    eax,esp
c0011f0e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011f12:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011f16:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011f1a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011f22:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011f26:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011f2a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011f2e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011f32:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011f36:	89 c6                	mov    esi,eax
c0011f38:	89 d7                	mov    edi,edx
c0011f3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011f3c:	89 c8                	mov    eax,ecx
c0011f3e:	89 fa                	mov    edx,edi
c0011f40:	89 f3                	mov    ebx,esi
c0011f42:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011f46:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011f4a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011f4e:	83 ec 0c             	sub    esp,0xc
c0011f51:	68 b3 5f 02 c0       	push   0xc0025fb3
c0011f56:	e8 72 7e ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0011f5b:	83 c4 10             	add    esp,0x10
c0011f5e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011f62:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011f66:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011f6e:	83 ec 0c             	sub    esp,0xc
c0011f71:	68 c5 5f 02 c0       	push   0xc0025fc5
c0011f76:	e8 52 7e ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0011f7b:	83 c4 10             	add    esp,0x10
c0011f7e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f86:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f8e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011f92:	83 ec 04             	sub    esp,0x4
c0011f95:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011f99:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011f9d:	68 3c 5e 02 c0       	push   0xc0025e3c
c0011fa2:	e8 b8 b0 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0011fa7:	83 c4 10             	add    esp,0x10
c0011faa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011fae:	25 ff 0f 00 00       	and    eax,0xfff
c0011fb3:	89 c6                	mov    esi,eax
c0011fb5:	8b 1d b0 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028db0
c0011fbb:	83 ec 0c             	sub    esp,0xc
c0011fbe:	6a 02                	push   0x2
c0011fc0:	e8 74 9d ff ff       	call   c000bd39 <Virt::allocateKernelVirtualPages(int)>
c0011fc5:	83 c4 10             	add    esp,0x10
c0011fc8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011fcc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011fd2:	83 ec 0c             	sub    esp,0xc
c0011fd5:	6a 01                	push   0x1
c0011fd7:	6a 02                	push   0x2
c0011fd9:	50                   	push   eax
c0011fda:	52                   	push   edx
c0011fdb:	53                   	push   ebx
c0011fdc:	e8 f5 a6 ff ff       	call   c000c6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011fe1:	83 c4 20             	add    esp,0x20
c0011fe4:	09 f0                	or     eax,esi
c0011fe6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011fea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011fee:	25 ff 0f 00 00       	and    eax,0xfff
c0011ff3:	89 c6                	mov    esi,eax
c0011ff5:	8b 1d b0 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028db0
c0011ffb:	83 ec 0c             	sub    esp,0xc
c0011ffe:	6a 02                	push   0x2
c0012000:	e8 34 9d ff ff       	call   c000bd39 <Virt::allocateKernelVirtualPages(int)>
c0012005:	83 c4 10             	add    esp,0x10
c0012008:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001200c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012012:	83 ec 0c             	sub    esp,0xc
c0012015:	6a 01                	push   0x1
c0012017:	6a 02                	push   0x2
c0012019:	50                   	push   eax
c001201a:	52                   	push   edx
c001201b:	53                   	push   ebx
c001201c:	e8 b5 a6 ff ff       	call   c000c6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012021:	83 c4 20             	add    esp,0x20
c0012024:	09 f0                	or     eax,esi
c0012026:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001202a:	83 ec 04             	sub    esp,0x4
c001202d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012031:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012035:	68 5c 5e 02 c0       	push   0xc0025e5c
c001203a:	e8 20 b0 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001203f:	83 c4 10             	add    esp,0x10
c0012042:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0012047:	75 13                	jne    c001205c <findRSDT(unsigned char*)+0x194>
c0012049:	c6 05 e0 94 02 c0 00 	mov    BYTE PTR ds:0xc00294e0,0x0
c0012050:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012054:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0012058:	eb 22                	jmp    c001207c <findRSDT(unsigned char*)+0x1b4>
c001205a:	66 90                	xchg   ax,ax
c001205c:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0012061:	75 11                	jne    c0012074 <findRSDT(unsigned char*)+0x1ac>
c0012063:	c6 05 e0 94 02 c0 01 	mov    BYTE PTR ds:0xc00294e0,0x1
c001206a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001206e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0012072:	eb 08                	jmp    c001207c <findRSDT(unsigned char*)+0x1b4>
c0012074:	b8 00 00 00 00       	mov    eax,0x0
c0012079:	eb 05                	jmp    c0012080 <findRSDT(unsigned char*)+0x1b8>
c001207b:	90                   	nop
c001207c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012080:	83 c4 50             	add    esp,0x50
c0012083:	5b                   	pop    ebx
c0012084:	5e                   	pop    esi
c0012085:	5f                   	pop    edi
c0012086:	c3                   	ret    
c0012087:	90                   	nop

c0012088 <findDataTable(unsigned char*, char*)>:
c0012088:	83 ec 1c             	sub    esp,0x1c
c001208b:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0012090:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012096:	83 e0 04             	and    eax,0x4
c0012099:	84 c0                	test   al,al
c001209b:	75 07                	jne    c00120a4 <findDataTable(unsigned char*, char*)+0x1c>
c001209d:	b8 00 00 00 00       	mov    eax,0x0
c00120a2:	eb 58                	jmp    c00120fc <findDataTable(unsigned char*, char*)+0x74>
c00120a4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00120ac:	a1 cc 92 02 c0       	mov    eax,ds:0xc00292cc
c00120b1:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00120b5:	7d 3d                	jge    c00120f4 <findDataTable(unsigned char*, char*)+0x6c>
c00120b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120bb:	c1 e0 03             	shl    eax,0x3
c00120be:	05 e0 92 02 c0       	add    eax,0xc00292e0
c00120c3:	83 ec 04             	sub    esp,0x4
c00120c6:	6a 04                	push   0x4
c00120c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00120cc:	50                   	push   eax
c00120cd:	e8 be e4 fe ff       	call   c0000590 <memcmp>
c00120d2:	83 c4 10             	add    esp,0x10
c00120d5:	85 c0                	test   eax,eax
c00120d7:	0f 94 c0             	sete   al
c00120da:	84 c0                	test   al,al
c00120dc:	74 0e                	je     c00120ec <findDataTable(unsigned char*, char*)+0x64>
c00120de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120e2:	8b 04 c5 e4 92 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6d1c]
c00120e9:	eb 11                	jmp    c00120fc <findDataTable(unsigned char*, char*)+0x74>
c00120eb:	90                   	nop
c00120ec:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00120f0:	eb ba                	jmp    c00120ac <findDataTable(unsigned char*, char*)+0x24>
c00120f2:	66 90                	xchg   ax,ax
c00120f4:	b8 00 00 00 00       	mov    eax,0x0
c00120f9:	8d 76 00             	lea    esi,[esi+0x0]
c00120fc:	83 c4 1c             	add    esp,0x1c
c00120ff:	c3                   	ret    

c0012100 <scanMADT()>:
c0012100:	53                   	push   ebx
c0012101:	83 ec 38             	sub    esp,0x38
c0012104:	83 ec 0c             	sub    esp,0xc
c0012107:	68 d7 5f 02 c0       	push   0xc0025fd7
c001210c:	e8 bc 7c ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0012111:	83 c4 10             	add    esp,0x10
c0012114:	a1 a0 8c 02 c0       	mov    eax,ds:0xc0028ca0
c0012119:	25 00 04 00 00       	and    eax,0x400
c001211e:	74 14                	je     c0012134 <scanMADT()+0x34>
c0012120:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0012125:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001212b:	83 e2 fb             	and    edx,0xfffffffb
c001212e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012134:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0012139:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001213f:	83 e0 04             	and    eax,0x4
c0012142:	84 c0                	test   al,al
c0012144:	0f 84 82 04 00 00    	je     c00125cc <scanMADT()+0x4cc>
c001214a:	83 ec 0c             	sub    esp,0xc
c001214d:	68 e4 5f 02 c0       	push   0xc0025fe4
c0012152:	e8 76 7c ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0012157:	83 c4 10             	add    esp,0x10
c001215a:	e8 31 fa ff ff       	call   c0011b90 <findRSDP()>
c001215f:	a3 ec 94 02 c0       	mov    ds:0xc00294ec,eax
c0012164:	a1 ec 94 02 c0       	mov    eax,ds:0xc00294ec
c0012169:	85 c0                	test   eax,eax
c001216b:	75 1b                	jne    c0012188 <scanMADT()+0x88>
c001216d:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0012172:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012178:	83 e2 fb             	and    edx,0xfffffffb
c001217b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012181:	e9 4e 04 00 00       	jmp    c00125d4 <scanMADT()+0x4d4>
c0012186:	66 90                	xchg   ax,ax
c0012188:	83 ec 0c             	sub    esp,0xc
c001218b:	68 f6 5f 02 c0       	push   0xc0025ff6
c0012190:	e8 38 7c ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0012195:	83 c4 10             	add    esp,0x10
c0012198:	a1 ec 94 02 c0       	mov    eax,ds:0xc00294ec
c001219d:	83 ec 0c             	sub    esp,0xc
c00121a0:	50                   	push   eax
c00121a1:	e8 22 fd ff ff       	call   c0011ec8 <findRSDT(unsigned char*)>
c00121a6:	83 c4 10             	add    esp,0x10
c00121a9:	a3 e8 94 02 c0       	mov    ds:0xc00294e8,eax
c00121ae:	a1 e8 94 02 c0       	mov    eax,ds:0xc00294e8
c00121b3:	85 c0                	test   eax,eax
c00121b5:	75 19                	jne    c00121d0 <scanMADT()+0xd0>
c00121b7:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c00121bc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00121c2:	83 e2 fb             	and    edx,0xfffffffb
c00121c5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00121cb:	e9 04 04 00 00       	jmp    c00125d4 <scanMADT()+0x4d4>
c00121d0:	83 ec 0c             	sub    esp,0xc
c00121d3:	68 06 60 02 c0       	push   0xc0026006
c00121d8:	e8 f0 7b ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c00121dd:	83 c4 10             	add    esp,0x10
c00121e0:	a1 e8 94 02 c0       	mov    eax,ds:0xc00294e8
c00121e5:	83 ec 0c             	sub    esp,0xc
c00121e8:	50                   	push   eax
c00121e9:	e8 76 fa ff ff       	call   c0011c64 <loadACPITables(unsigned char*)>
c00121ee:	83 c4 10             	add    esp,0x10
c00121f1:	a1 e8 94 02 c0       	mov    eax,ds:0xc00294e8
c00121f6:	83 ec 08             	sub    esp,0x8
c00121f9:	68 1e 60 02 c0       	push   0xc002601e
c00121fe:	50                   	push   eax
c00121ff:	e8 84 fe ff ff       	call   c0012088 <findDataTable(unsigned char*, char*)>
c0012204:	83 c4 10             	add    esp,0x10
c0012207:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001220b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0012210:	75 1a                	jne    c001222c <scanMADT()+0x12c>
c0012212:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0012217:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001221d:	83 e2 fe             	and    edx,0xfffffffe
c0012220:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012226:	e9 a9 03 00 00       	jmp    c00125d4 <scanMADT()+0x4d4>
c001222b:	90                   	nop
c001222c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0012234:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012238:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001223b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001223f:	0f 87 8f 03 00 00    	ja     c00125d4 <scanMADT()+0x4d4>
c0012245:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001224d:	0f 87 81 03 00 00    	ja     c00125d4 <scanMADT()+0x4d4>
c0012253:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012257:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001225b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001225f:	8d 50 01             	lea    edx,[eax+0x1]
c0012262:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012266:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001226a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001226e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0012272:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012276:	8d 50 01             	lea    edx,[eax+0x1]
c0012279:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001227d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012281:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012285:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0012289:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c001228e:	0f 86 3c 03 00 00    	jbe    c00125d0 <scanMADT()+0x4d0>
c0012294:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0012299:	75 59                	jne    c00122f4 <scanMADT()+0x1f4>
c001229b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001229f:	8d 50 01             	lea    edx,[eax+0x1]
c00122a2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00122a6:	8a 15 e0 96 02 c0    	mov    dl,BYTE PTR ds:0xc00296e0
c00122ac:	0f b6 d2             	movzx  edx,dl
c00122af:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00122b3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00122b7:	88 82 20 97 02 c0    	mov    BYTE PTR [edx-0x3ffd68e0],al
c00122bd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00122c1:	8d 50 01             	lea    edx,[eax+0x1]
c00122c4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00122c8:	8a 15 e0 96 02 c0    	mov    dl,BYTE PTR ds:0xc00296e0
c00122ce:	8d 4a 01             	lea    ecx,[edx+0x1]
c00122d1:	88 0d e0 96 02 c0    	mov    BYTE PTR ds:0xc00296e0,cl
c00122d7:	0f b6 d2             	movzx  edx,dl
c00122da:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00122de:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00122e2:	88 82 00 97 02 c0    	mov    BYTE PTR [edx-0x3ffd6900],al
c00122e8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00122ed:	e9 c6 02 00 00       	jmp    c00125b8 <scanMADT()+0x4b8>
c00122f2:	66 90                	xchg   ax,ax
c00122f4:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00122f9:	0f 85 15 01 00 00    	jne    c0012414 <scanMADT()+0x314>
c00122ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012303:	8d 50 01             	lea    edx,[eax+0x1]
c0012306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001230a:	8a 15 a0 95 02 c0    	mov    dl,BYTE PTR ds:0xc00295a0
c0012310:	0f b6 d2             	movzx  edx,dl
c0012313:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012317:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001231b:	88 82 c0 95 02 c0    	mov    BYTE PTR [edx-0x3ffd6a40],al
c0012321:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0012325:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012329:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001232d:	01 d0                	add    eax,edx
c001232f:	83 c0 2c             	add    eax,0x2c
c0012332:	8a 00                	mov    al,BYTE PTR [eax]
c0012334:	0f b6 d0             	movzx  edx,al
c0012337:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001233b:	8d 48 01             	lea    ecx,[eax+0x1]
c001233e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012342:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0012346:	0f b6 c0             	movzx  eax,al
c0012349:	c1 e0 08             	shl    eax,0x8
c001234c:	89 d1                	mov    ecx,edx
c001234e:	09 c1                	or     ecx,eax
c0012350:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012354:	8d 50 02             	lea    edx,[eax+0x2]
c0012357:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001235b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001235f:	0f b6 c0             	movzx  eax,al
c0012362:	c1 e0 10             	shl    eax,0x10
c0012365:	09 c1                	or     ecx,eax
c0012367:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001236b:	8d 50 03             	lea    edx,[eax+0x3]
c001236e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012372:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012376:	0f b6 c0             	movzx  eax,al
c0012379:	c1 e0 18             	shl    eax,0x18
c001237c:	09 c1                	or     ecx,eax
c001237e:	89 ca                	mov    edx,ecx
c0012380:	a0 a0 95 02 c0       	mov    al,ds:0xc00295a0
c0012385:	0f b6 c0             	movzx  eax,al
c0012388:	89 14 85 e0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a20],edx
c001238f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012394:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012398:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001239c:	01 d0                	add    eax,edx
c001239e:	83 c0 2c             	add    eax,0x2c
c00123a1:	8a 00                	mov    al,BYTE PTR [eax]
c00123a3:	0f b6 d0             	movzx  edx,al
c00123a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123aa:	8d 48 01             	lea    ecx,[eax+0x1]
c00123ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123b1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00123b5:	0f b6 c0             	movzx  eax,al
c00123b8:	c1 e0 08             	shl    eax,0x8
c00123bb:	89 d1                	mov    ecx,edx
c00123bd:	09 c1                	or     ecx,eax
c00123bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123c3:	8d 50 02             	lea    edx,[eax+0x2]
c00123c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123ca:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00123ce:	0f b6 c0             	movzx  eax,al
c00123d1:	c1 e0 10             	shl    eax,0x10
c00123d4:	09 c1                	or     ecx,eax
c00123d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00123da:	8d 50 03             	lea    edx,[eax+0x3]
c00123dd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123e1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00123e5:	0f b6 c0             	movzx  eax,al
c00123e8:	c1 e0 18             	shl    eax,0x18
c00123eb:	09 c1                	or     ecx,eax
c00123ed:	89 ca                	mov    edx,ecx
c00123ef:	a0 a0 95 02 c0       	mov    al,ds:0xc00295a0
c00123f4:	0f b6 c0             	movzx  eax,al
c00123f7:	89 14 85 60 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69a0],edx
c00123fe:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0012403:	a0 a0 95 02 c0       	mov    al,ds:0xc00295a0
c0012408:	40                   	inc    eax
c0012409:	a2 a0 95 02 c0       	mov    ds:0xc00295a0,al
c001240e:	e9 a5 01 00 00       	jmp    c00125b8 <scanMADT()+0x4b8>
c0012413:	90                   	nop
c0012414:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0012419:	0f 85 e9 00 00 00    	jne    c0012508 <scanMADT()+0x408>
c001241f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012423:	8d 50 01             	lea    edx,[eax+0x1]
c0012426:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001242a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001242e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012432:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012436:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001243a:	8d 50 01             	lea    edx,[eax+0x1]
c001243d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0012441:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012445:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012449:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001244d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012451:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012455:	01 d0                	add    eax,edx
c0012457:	83 c0 2c             	add    eax,0x2c
c001245a:	8a 00                	mov    al,BYTE PTR [eax]
c001245c:	0f b6 d0             	movzx  edx,al
c001245f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012463:	8d 48 01             	lea    ecx,[eax+0x1]
c0012466:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001246a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001246e:	0f b6 c0             	movzx  eax,al
c0012471:	c1 e0 08             	shl    eax,0x8
c0012474:	89 d1                	mov    ecx,edx
c0012476:	09 c1                	or     ecx,eax
c0012478:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001247c:	8d 50 02             	lea    edx,[eax+0x2]
c001247f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012483:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0012487:	0f b6 c0             	movzx  eax,al
c001248a:	c1 e0 10             	shl    eax,0x10
c001248d:	09 c1                	or     ecx,eax
c001248f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012493:	8d 50 03             	lea    edx,[eax+0x3]
c0012496:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001249a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001249e:	0f b6 c0             	movzx  eax,al
c00124a1:	c1 e0 18             	shl    eax,0x18
c00124a4:	09 c8                	or     eax,ecx
c00124a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00124aa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00124af:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00124b7:	01 d0                	add    eax,edx
c00124b9:	83 c0 2c             	add    eax,0x2c
c00124bc:	8a 00                	mov    al,BYTE PTR [eax]
c00124be:	0f b6 c0             	movzx  eax,al
c00124c1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00124c5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00124c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00124cc:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00124d0:	0f b6 d2             	movzx  edx,dl
c00124d3:	c1 e2 08             	shl    edx,0x8
c00124d6:	09 d0                	or     eax,edx
c00124d8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00124dd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00124e2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00124e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00124eb:	88 90 80 83 02 c0    	mov    BYTE PTR [eax-0x3ffd7c80],dl
c00124f1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00124f6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00124fb:	66 89 84 12 80 95 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd6a80],ax
c0012503:	e9 b0 00 00 00       	jmp    c00125b8 <scanMADT()+0x4b8>
c0012508:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001250d:	0f 85 99 00 00 00    	jne    c00125ac <scanMADT()+0x4ac>
c0012513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012517:	8d 50 01             	lea    edx,[eax+0x1]
c001251a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001251e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012522:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012526:	0f b6 c0             	movzx  eax,al
c0012529:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001252d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012531:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012535:	01 d0                	add    eax,edx
c0012537:	83 c0 2c             	add    eax,0x2c
c001253a:	8a 00                	mov    al,BYTE PTR [eax]
c001253c:	0f b6 d0             	movzx  edx,al
c001253f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012543:	8d 48 01             	lea    ecx,[eax+0x1]
c0012546:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001254a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001254e:	0f b6 c0             	movzx  eax,al
c0012551:	c1 e0 08             	shl    eax,0x8
c0012554:	09 d0                	or     eax,edx
c0012556:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001255a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001255f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012563:	8d 50 01             	lea    edx,[eax+0x1]
c0012566:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001256a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001256e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012572:	0f b6 c0             	movzx  eax,al
c0012575:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001257d:	c1 e0 08             	shl    eax,0x8
c0012580:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012584:	89 c1                	mov    ecx,eax
c0012586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001258a:	c1 e0 18             	shl    eax,0x18
c001258d:	89 c3                	mov    ebx,eax
c001258f:	a1 f0 94 02 c0       	mov    eax,ds:0xc00294f0
c0012594:	8d 50 01             	lea    edx,[eax+0x1]
c0012597:	89 15 f0 94 02 c0    	mov    DWORD PTR ds:0xc00294f0,edx
c001259d:	09 d9                	or     ecx,ebx
c001259f:	89 ca                	mov    edx,ecx
c00125a1:	89 14 85 00 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6b00],edx
c00125a8:	eb 0e                	jmp    c00125b8 <scanMADT()+0x4b8>
c00125aa:	66 90                	xchg   ax,ax
c00125ac:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00125b1:	75 05                	jne    c00125b8 <scanMADT()+0x4b8>
c00125b3:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00125b8:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00125bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00125c1:	01 d0                	add    eax,edx
c00125c3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00125c7:	e9 68 fc ff ff       	jmp    c0012234 <scanMADT()+0x134>
c00125cc:	90                   	nop
c00125cd:	eb 05                	jmp    c00125d4 <scanMADT()+0x4d4>
c00125cf:	90                   	nop
c00125d0:	90                   	nop
c00125d1:	8d 76 00             	lea    esi,[esi+0x0]
c00125d4:	83 c4 38             	add    esp,0x38
c00125d7:	5b                   	pop    ebx
c00125d8:	c3                   	ret    
c00125d9:	90                   	nop
c00125da:	66 90                	xchg   ax,ax

c00125dc <ACPI::ACPI()>:
c00125dc:	83 ec 0c             	sub    esp,0xc
c00125df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125e3:	83 ec 08             	sub    esp,0x8
c00125e6:	68 23 60 02 c0       	push   0xc0026023
c00125eb:	50                   	push   eax
c00125ec:	e8 e5 c1 ff ff       	call   c000e7d6 <Device::Device(char const*)>
c00125f1:	83 c4 10             	add    esp,0x10
c00125f4:	ba e4 61 02 c0       	mov    edx,0xc00261e4
c00125f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125fd:	89 10                	mov    DWORD PTR [eax],edx
c00125ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012603:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001260a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001260e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0012618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001261c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0012626:	83 ec 0c             	sub    esp,0xc
c0012629:	68 28 60 02 c0       	push   0xc0026028
c001262e:	e8 9a 77 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0012633:	83 c4 10             	add    esp,0x10
c0012636:	e8 c5 fa ff ff       	call   c0012100 <scanMADT()>
c001263b:	90                   	nop
c001263c:	83 c4 0c             	add    esp,0xc
c001263f:	c3                   	ret    

c0012640 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0012640:	83 ec 2c             	sub    esp,0x2c
c0012643:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012647:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001264b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001264f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0012653:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0012658:	88 d0                	mov    al,dl
c001265a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001265e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012663:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001266b:	90                   	nop
c001266c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012670:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012676:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001267a:	0f 8d 9c 00 00 00    	jge    c001271c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0012680:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012684:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012688:	83 c2 2a             	add    edx,0x2a
c001268b:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001268f:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0012694:	75 7a                	jne    c0012710 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0012696:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001269a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001269e:	83 c2 2a             	add    edx,0x2a
c00126a1:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00126a5:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00126a9:	75 65                	jne    c0012710 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c00126ab:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00126b0:	74 3a                	je     c00126ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c00126b2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126b6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00126ba:	83 c2 2a             	add    edx,0x2a
c00126bd:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00126c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00126c8:	39 c2                	cmp    edx,eax
c00126ca:	74 10                	je     c00126dc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c00126cc:	83 ec 0c             	sub    esp,0xc
c00126cf:	68 7c 5e 02 c0       	push   0xc0025e7c
c00126d4:	e8 58 2a 00 00       	call   c0015131 <Krnl::panic(char const*)>
c00126d9:	83 c4 10             	add    esp,0x10
c00126dc:	83 ec 0c             	sub    esp,0xc
c00126df:	68 36 60 02 c0       	push   0xc0026036
c00126e4:	e8 48 2a 00 00       	call   c0015131 <Krnl::panic(char const*)>
c00126e9:	83 c4 10             	add    esp,0x10
c00126ec:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00126f0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00126f8:	83 c2 2a             	add    edx,0x2a
c00126fb:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00126ff:	8b 02                	mov    eax,DWORD PTR [edx]
c0012701:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012704:	89 01                	mov    DWORD PTR [ecx],eax
c0012706:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0012709:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001270e:	66 90                	xchg   ax,ax
c0012710:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012714:	e9 53 ff ff ff       	jmp    c001266c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0012719:	8d 76 00             	lea    esi,[esi+0x0]
c001271c:	90                   	nop
c001271d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012721:	83 c4 2c             	add    esp,0x2c
c0012724:	c2 04 00             	ret    0x4
c0012727:	90                   	nop

c0012728 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0012728:	83 ec 1c             	sub    esp,0x1c
c001272b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001272f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0012733:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012737:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001273c:	88 c8                	mov    al,cl
c001273e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012742:	88 d0                	mov    al,dl
c0012744:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012748:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001274c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012752:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012756:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012759:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001275d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0012761:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012765:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001276b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001276f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0012772:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012776:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001277b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001277f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012785:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0012789:	8d 48 01             	lea    ecx,[eax+0x1]
c001278c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012790:	83 c2 2a             	add    edx,0x2a
c0012793:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0012797:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001279b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00127a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127a5:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00127a8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00127ac:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00127b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127b4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00127ba:	8d 50 01             	lea    edx,[eax+0x1]
c00127bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127c1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00127c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127cb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00127d1:	3d 00 02 00 00       	cmp    eax,0x200
c00127d6:	75 10                	jne    c00127e8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00127d8:	83 ec 0c             	sub    esp,0xc
c00127db:	68 45 60 02 c0       	push   0xc0026045
c00127e0:	e8 4c 29 00 00       	call   c0015131 <Krnl::panic(char const*)>
c00127e5:	83 c4 10             	add    esp,0x10
c00127e8:	90                   	nop
c00127e9:	83 c4 1c             	add    esp,0x1c
c00127ec:	c3                   	ret    
c00127ed:	90                   	nop
c00127ee:	66 90                	xchg   ax,ax

c00127f0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00127f0:	b8 00 00 00 00       	mov    eax,0x0
c00127f5:	c3                   	ret    
c00127f6:	66 90                	xchg   ax,ax

c00127f8 <ACPI::detectPCI()>:
c00127f8:	53                   	push   ebx
c00127f9:	83 ec 68             	sub    esp,0x68
c00127fc:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c0012801:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c0012806:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c001280b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012811:	83 e0 04             	and    eax,0x4
c0012814:	84 c0                	test   al,al
c0012816:	74 2c                	je     c0012844 <ACPI::detectPCI()+0x4c>
c0012818:	a1 e8 94 02 c0       	mov    eax,ds:0xc00294e8
c001281d:	83 ec 08             	sub    esp,0x8
c0012820:	68 62 60 02 c0       	push   0xc0026062
c0012825:	50                   	push   eax
c0012826:	e8 5d f8 ff ff       	call   c0012088 <findDataTable(unsigned char*, char*)>
c001282b:	83 c4 10             	add    esp,0x10
c001282e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0012832:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c0012837:	74 0b                	je     c0012844 <ACPI::detectPCI()+0x4c>
c0012839:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001283e:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012843:	90                   	nop
c0012844:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c001284c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012850:	8a 00                	mov    al,BYTE PTR [eax]
c0012852:	3c 01                	cmp    al,0x1
c0012854:	75 0e                	jne    c0012864 <ACPI::detectPCI()+0x6c>
c0012856:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001285b:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012860:	eb 2a                	jmp    c001288c <ACPI::detectPCI()+0x94>
c0012862:	66 90                	xchg   ax,ax
c0012864:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012868:	8a 00                	mov    al,BYTE PTR [eax]
c001286a:	3c 02                	cmp    al,0x2
c001286c:	75 1e                	jne    c001288c <ACPI::detectPCI()+0x94>
c001286e:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012873:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012878:	74 12                	je     c001288c <ACPI::detectPCI()+0x94>
c001287a:	83 ec 0c             	sub    esp,0xc
c001287d:	68 ac 5e 02 c0       	push   0xc0025eac
c0012882:	e8 aa 28 00 00       	call   c0015131 <Krnl::panic(char const*)>
c0012887:	83 c4 10             	add    esp,0x10
c001288a:	66 90                	xchg   ax,ax
c001288c:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c0012890:	83 f0 01             	xor    eax,0x1
c0012893:	84 c0                	test   al,al
c0012895:	74 41                	je     c00128d8 <ACPI::detectPCI()+0xe0>
c0012897:	e8 b4 d8 fe ff       	call   c0000150 <manualPCIProbe>
c001289c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00128a0:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c00128a5:	75 0d                	jne    c00128b4 <ACPI::detectPCI()+0xbc>
c00128a7:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00128ac:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00128b1:	eb 25                	jmp    c00128d8 <ACPI::detectPCI()+0xe0>
c00128b3:	90                   	nop
c00128b4:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c00128b9:	75 1d                	jne    c00128d8 <ACPI::detectPCI()+0xe0>
c00128bb:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00128c0:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00128c5:	74 11                	je     c00128d8 <ACPI::detectPCI()+0xe0>
c00128c7:	83 ec 0c             	sub    esp,0xc
c00128ca:	68 ac 5e 02 c0       	push   0xc0025eac
c00128cf:	e8 5d 28 00 00       	call   c0015131 <Krnl::panic(char const*)>
c00128d4:	83 c4 10             	add    esp,0x10
c00128d7:	90                   	nop
c00128d8:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c00128dd:	0f 84 49 03 00 00    	je     c0012c2c <ACPI::detectPCI()+0x434>
c00128e3:	83 ec 0c             	sub    esp,0xc
c00128e6:	68 67 60 02 c0       	push   0xc0026067
c00128eb:	e8 dd 74 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c00128f0:	83 c4 10             	add    esp,0x10
c00128f3:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00128f8:	0f 84 8e 00 00 00    	je     c001298c <ACPI::detectPCI()+0x194>
c00128fe:	a1 a0 8c 02 c0       	mov    eax,ds:0xc0028ca0
c0012903:	25 00 08 00 00       	and    eax,0x800
c0012908:	0f 84 16 01 00 00    	je     c0012a24 <ACPI::detectPCI()+0x22c>
c001290e:	83 ec 0c             	sub    esp,0xc
c0012911:	68 d4 5e 02 c0       	push   0xc0025ed4
c0012916:	e8 b2 74 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001291b:	83 c4 10             	add    esp,0x10
c001291e:	a1 a0 8c 02 c0       	mov    eax,ds:0xc0028ca0
c0012923:	25 80 00 00 00       	and    eax,0x80
c0012928:	0f 85 f6 00 00 00    	jne    c0012a24 <ACPI::detectPCI()+0x22c>
c001292e:	66 90                	xchg   ax,ax
c0012930:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c0012937:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c001293c:	89 c2                	mov    edx,eax
c001293e:	ec                   	in     al,dx
c001293f:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c0012943:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c0012947:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c001294b:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c0012950:	74 0a                	je     c001295c <ACPI::detectPCI()+0x164>
c0012952:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c0012957:	74 03                	je     c001295c <ACPI::detectPCI()+0x164>
c0012959:	eb d5                	jmp    c0012930 <ACPI::detectPCI()+0x138>
c001295b:	90                   	nop
c001295c:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c0012963:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0012968:	89 c2                	mov    edx,eax
c001296a:	ec                   	in     al,dx
c001296b:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c001296f:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c0012973:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c0012977:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c001297c:	74 de                	je     c001295c <ACPI::detectPCI()+0x164>
c001297e:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c0012983:	0f 85 93 00 00 00    	jne    c0012a1c <ACPI::detectPCI()+0x224>
c0012989:	eb d1                	jmp    c001295c <ACPI::detectPCI()+0x164>
c001298b:	90                   	nop
c001298c:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c0012990:	83 f0 01             	xor    eax,0x1
c0012993:	84 c0                	test   al,al
c0012995:	0f 84 89 00 00 00    	je     c0012a24 <ACPI::detectPCI()+0x22c>
c001299b:	a1 a0 8c 02 c0       	mov    eax,ds:0xc0028ca0
c00129a0:	25 00 08 00 00       	and    eax,0x800
c00129a5:	74 7d                	je     c0012a24 <ACPI::detectPCI()+0x22c>
c00129a7:	83 ec 0c             	sub    esp,0xc
c00129aa:	68 f8 5e 02 c0       	push   0xc0025ef8
c00129af:	e8 19 74 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c00129b4:	83 c4 10             	add    esp,0x10
c00129b7:	a1 a0 8c 02 c0       	mov    eax,ds:0xc0028ca0
c00129bc:	25 80 00 00 00       	and    eax,0x80
c00129c1:	75 61                	jne    c0012a24 <ACPI::detectPCI()+0x22c>
c00129c3:	90                   	nop
c00129c4:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c00129cb:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c00129d0:	89 c2                	mov    edx,eax
c00129d2:	ec                   	in     al,dx
c00129d3:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00129d7:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c00129db:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c00129df:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c00129e4:	74 0a                	je     c00129f0 <ACPI::detectPCI()+0x1f8>
c00129e6:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c00129eb:	74 03                	je     c00129f0 <ACPI::detectPCI()+0x1f8>
c00129ed:	eb d5                	jmp    c00129c4 <ACPI::detectPCI()+0x1cc>
c00129ef:	90                   	nop
c00129f0:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c00129f7:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00129fc:	89 c2                	mov    edx,eax
c00129fe:	ec                   	in     al,dx
c00129ff:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0012a03:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0012a07:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c0012a0b:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0012a10:	74 de                	je     c00129f0 <ACPI::detectPCI()+0x1f8>
c0012a12:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0012a17:	75 07                	jne    c0012a20 <ACPI::detectPCI()+0x228>
c0012a19:	eb d5                	jmp    c00129f0 <ACPI::detectPCI()+0x1f8>
c0012a1b:	90                   	nop
c0012a1c:	90                   	nop
c0012a1d:	eb 05                	jmp    c0012a24 <ACPI::detectPCI()+0x22c>
c0012a1f:	90                   	nop
c0012a20:	90                   	nop
c0012a21:	8d 76 00             	lea    esi,[esi+0x0]
c0012a24:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0012a2c:	83 ec 0c             	sub    esp,0xc
c0012a2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012a33:	e8 3b 73 ff ff       	call   c0009d73 <malloc>
c0012a38:	83 c4 10             	add    esp,0x10
c0012a3b:	89 c3                	mov    ebx,eax
c0012a3d:	83 ec 0c             	sub    esp,0xc
c0012a40:	53                   	push   ebx
c0012a41:	e8 00 b2 00 00       	call   c001dc46 <PCI::PCI()>
c0012a46:	83 c4 10             	add    esp,0x10
c0012a49:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0012a4d:	a1 a0 8c 02 c0       	mov    eax,ds:0xc0028ca0
c0012a52:	25 00 08 00 00       	and    eax,0x800
c0012a57:	74 7b                	je     c0012ad4 <ACPI::detectPCI()+0x2dc>
c0012a59:	83 ec 0c             	sub    esp,0xc
c0012a5c:	68 7f 60 02 c0       	push   0xc002607f
c0012a61:	e8 67 73 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0012a66:	83 c4 10             	add    esp,0x10
c0012a69:	a1 a0 8c 02 c0       	mov    eax,ds:0xc0028ca0
c0012a6e:	25 80 00 00 00       	and    eax,0x80
c0012a73:	75 5f                	jne    c0012ad4 <ACPI::detectPCI()+0x2dc>
c0012a75:	8d 76 00             	lea    esi,[esi+0x0]
c0012a78:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c0012a7f:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0012a84:	89 c2                	mov    edx,eax
c0012a86:	ec                   	in     al,dx
c0012a87:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0012a8b:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c0012a8f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0012a93:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0012a98:	74 0a                	je     c0012aa4 <ACPI::detectPCI()+0x2ac>
c0012a9a:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c0012a9f:	74 03                	je     c0012aa4 <ACPI::detectPCI()+0x2ac>
c0012aa1:	eb d5                	jmp    c0012a78 <ACPI::detectPCI()+0x280>
c0012aa3:	90                   	nop
c0012aa4:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0012aab:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012ab0:	89 c2                	mov    edx,eax
c0012ab2:	ec                   	in     al,dx
c0012ab3:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012ab7:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0012abb:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012abf:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012ac4:	74 de                	je     c0012aa4 <ACPI::detectPCI()+0x2ac>
c0012ac6:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c0012acb:	75 03                	jne    c0012ad0 <ACPI::detectPCI()+0x2d8>
c0012acd:	eb d5                	jmp    c0012aa4 <ACPI::detectPCI()+0x2ac>
c0012acf:	90                   	nop
c0012ad0:	90                   	nop
c0012ad1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ad4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012ad8:	83 ec 08             	sub    esp,0x8
c0012adb:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012adf:	50                   	push   eax
c0012ae0:	e8 ed ba ff ff       	call   c000e5d2 <Device::addChild(Device*)>
c0012ae5:	83 c4 10             	add    esp,0x10
c0012ae8:	a1 a0 8c 02 c0       	mov    eax,ds:0xc0028ca0
c0012aed:	25 00 08 00 00       	and    eax,0x800
c0012af2:	74 78                	je     c0012b6c <ACPI::detectPCI()+0x374>
c0012af4:	83 ec 0c             	sub    esp,0xc
c0012af7:	68 85 60 02 c0       	push   0xc0026085
c0012afc:	e8 cc 72 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0012b01:	83 c4 10             	add    esp,0x10
c0012b04:	a1 a0 8c 02 c0       	mov    eax,ds:0xc0028ca0
c0012b09:	25 80 00 00 00       	and    eax,0x80
c0012b0e:	75 5c                	jne    c0012b6c <ACPI::detectPCI()+0x374>
c0012b10:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012b17:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0012b1c:	89 c2                	mov    edx,eax
c0012b1e:	ec                   	in     al,dx
c0012b1f:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0012b23:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012b27:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0012b2b:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0012b30:	74 0a                	je     c0012b3c <ACPI::detectPCI()+0x344>
c0012b32:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0012b37:	74 03                	je     c0012b3c <ACPI::detectPCI()+0x344>
c0012b39:	eb d5                	jmp    c0012b10 <ACPI::detectPCI()+0x318>
c0012b3b:	90                   	nop
c0012b3c:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0012b43:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012b48:	89 c2                	mov    edx,eax
c0012b4a:	ec                   	in     al,dx
c0012b4b:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0012b4f:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0012b53:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0012b57:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0012b5c:	74 de                	je     c0012b3c <ACPI::detectPCI()+0x344>
c0012b5e:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c0012b63:	75 03                	jne    c0012b68 <ACPI::detectPCI()+0x370>
c0012b65:	eb d5                	jmp    c0012b3c <ACPI::detectPCI()+0x344>
c0012b67:	90                   	nop
c0012b68:	90                   	nop
c0012b69:	8d 76 00             	lea    esi,[esi+0x0]
c0012b6c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012b70:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b72:	83 c0 08             	add    eax,0x8
c0012b75:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b77:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012b7c:	74 0a                	je     c0012b88 <ACPI::detectPCI()+0x390>
c0012b7e:	ba 01 00 00 00       	mov    edx,0x1
c0012b83:	eb 0b                	jmp    c0012b90 <ACPI::detectPCI()+0x398>
c0012b85:	8d 76 00             	lea    esi,[esi+0x0]
c0012b88:	ba 02 00 00 00       	mov    edx,0x2
c0012b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0012b90:	6a 00                	push   0x0
c0012b92:	6a 00                	push   0x0
c0012b94:	52                   	push   edx
c0012b95:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0012b99:	ff d0                	call   eax
c0012b9b:	83 c4 10             	add    esp,0x10
c0012b9e:	a1 a0 8c 02 c0       	mov    eax,ds:0xc0028ca0
c0012ba3:	25 00 08 00 00       	and    eax,0x800
c0012ba8:	0f 84 26 01 00 00    	je     c0012cd4 <ACPI::detectPCI()+0x4dc>
c0012bae:	83 ec 0c             	sub    esp,0xc
c0012bb1:	68 8b 60 02 c0       	push   0xc002608b
c0012bb6:	e8 12 72 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0012bbb:	83 c4 10             	add    esp,0x10
c0012bbe:	a1 a0 8c 02 c0       	mov    eax,ds:0xc0028ca0
c0012bc3:	25 80 00 00 00       	and    eax,0x80
c0012bc8:	0f 85 06 01 00 00    	jne    c0012cd4 <ACPI::detectPCI()+0x4dc>
c0012bce:	66 90                	xchg   ax,ax
c0012bd0:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012bd7:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012bdc:	89 c2                	mov    edx,eax
c0012bde:	ec                   	in     al,dx
c0012bdf:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012be3:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012be7:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0012beb:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012bf0:	74 0a                	je     c0012bfc <ACPI::detectPCI()+0x404>
c0012bf2:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012bf7:	74 03                	je     c0012bfc <ACPI::detectPCI()+0x404>
c0012bf9:	eb d5                	jmp    c0012bd0 <ACPI::detectPCI()+0x3d8>
c0012bfb:	90                   	nop
c0012bfc:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012c03:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012c08:	89 c2                	mov    edx,eax
c0012c0a:	ec                   	in     al,dx
c0012c0b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0012c0f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012c13:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012c17:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c0012c1c:	74 de                	je     c0012bfc <ACPI::detectPCI()+0x404>
c0012c1e:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012c23:	0f 85 a7 00 00 00    	jne    c0012cd0 <ACPI::detectPCI()+0x4d8>
c0012c29:	eb d1                	jmp    c0012bfc <ACPI::detectPCI()+0x404>
c0012c2b:	90                   	nop
c0012c2c:	83 ec 0c             	sub    esp,0xc
c0012c2f:	68 91 60 02 c0       	push   0xc0026091
c0012c34:	e8 26 a4 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0012c39:	83 c4 10             	add    esp,0x10
c0012c3c:	83 ec 0c             	sub    esp,0xc
c0012c3f:	68 9c 60 02 c0       	push   0xc002609c
c0012c44:	e8 84 71 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0012c49:	83 c4 10             	add    esp,0x10
c0012c4c:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0012c54:	83 ec 0c             	sub    esp,0xc
c0012c57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c5b:	e8 13 71 ff ff       	call   c0009d73 <malloc>
c0012c60:	83 c4 10             	add    esp,0x10
c0012c63:	89 c3                	mov    ebx,eax
c0012c65:	83 ec 0c             	sub    esp,0xc
c0012c68:	53                   	push   ebx
c0012c69:	e8 42 c1 00 00       	call   c001edb0 <IDE::IDE()>
c0012c6e:	83 c4 10             	add    esp,0x10
c0012c71:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0012c75:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012c79:	83 ec 08             	sub    esp,0x8
c0012c7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012c80:	50                   	push   eax
c0012c81:	e8 4c b9 ff ff       	call   c000e5d2 <Device::addChild(Device*)>
c0012c86:	83 c4 10             	add    esp,0x10
c0012c89:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012c8d:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0012c97:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012c9b:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012ca4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012ca8:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012cb1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012cb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cb7:	83 c0 08             	add    eax,0x8
c0012cba:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cbc:	6a 00                	push   0x0
c0012cbe:	6a 00                	push   0x0
c0012cc0:	6a 00                	push   0x0
c0012cc2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012cc6:	ff d0                	call   eax
c0012cc8:	83 c4 10             	add    esp,0x10
c0012ccb:	eb 07                	jmp    c0012cd4 <ACPI::detectPCI()+0x4dc>
c0012ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0012cd0:	90                   	nop
c0012cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0012cd4:	90                   	nop
c0012cd5:	83 c4 68             	add    esp,0x68
c0012cd8:	5b                   	pop    ebx
c0012cd9:	c3                   	ret    
c0012cda:	66 90                	xchg   ax,ax

c0012cdc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012cdc:	83 ec 1c             	sub    esp,0x1c
c0012cdf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012ce3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012ce6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012cea:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0012cef:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012cf4:	83 ec 08             	sub    esp,0x8
c0012cf7:	52                   	push   edx
c0012cf8:	50                   	push   eax
c0012cf9:	e8 34 66 ff ff       	call   c0009332 <Computer::readCMOS(unsigned char)>
c0012cfe:	83 c4 10             	add    esp,0x10
c0012d01:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012d05:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0012d0a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012d0f:	83 ec 04             	sub    esp,0x4
c0012d12:	6a 01                	push   0x1
c0012d14:	52                   	push   edx
c0012d15:	50                   	push   eax
c0012d16:	e8 03 68 ff ff       	call   c000951e <Computer::writeCMOS(unsigned char, unsigned char)>
c0012d1b:	83 c4 10             	add    esp,0x10
c0012d1e:	90                   	nop
c0012d1f:	83 c4 1c             	add    esp,0x1c
c0012d22:	c3                   	ret    
c0012d23:	90                   	nop

c0012d24 <ACPI::sleep()>:
c0012d24:	83 ec 0c             	sub    esp,0xc
c0012d27:	83 ec 0c             	sub    esp,0xc
c0012d2a:	68 b1 60 02 c0       	push   0xc00260b1
c0012d2f:	e8 2b a3 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0012d34:	83 c4 10             	add    esp,0x10
c0012d37:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c0012d3c:	85 c0                	test   eax,eax
c0012d3e:	74 18                	je     c0012d58 <ACPI::sleep()+0x34>
c0012d40:	83 ec 0c             	sub    esp,0xc
c0012d43:	68 be 60 02 c0       	push   0xc00260be
c0012d48:	e8 12 a3 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0012d4d:	83 c4 10             	add    esp,0x10
c0012d50:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c0012d55:	ff d0                	call   eax
c0012d57:	90                   	nop
c0012d58:	90                   	nop
c0012d59:	83 c4 0c             	add    esp,0xc
c0012d5c:	c3                   	ret    
c0012d5d:	90                   	nop
c0012d5e:	66 90                	xchg   ax,ax

c0012d60 <ACPI::open(int, int, void*)>:
c0012d60:	57                   	push   edi
c0012d61:	56                   	push   esi
c0012d62:	53                   	push   ebx
c0012d63:	81 ec 70 01 00 00    	sub    esp,0x170
c0012d69:	83 ec 0c             	sub    esp,0xc
c0012d6c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012d73:	e8 80 fa ff ff       	call   c00127f8 <ACPI::detectPCI()>
c0012d78:	83 c4 10             	add    esp,0x10
c0012d7b:	83 ec 0c             	sub    esp,0xc
c0012d7e:	68 1c 5f 02 c0       	push   0xc0025f1c
c0012d83:	e8 45 70 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0012d88:	83 c4 10             	add    esp,0x10
c0012d8b:	83 ec 0c             	sub    esp,0xc
c0012d8e:	68 d8 60 02 c0       	push   0xc00260d8
c0012d93:	e8 ab 4d 00 00       	call   c0017b43 <Thr::loadKernelSymbolTable(char const*)>
c0012d98:	83 c4 10             	add    esp,0x10
c0012d9b:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0012da3:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0012dae:	83 ec 0c             	sub    esp,0xc
c0012db1:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012db8:	e8 b6 6f ff ff       	call   c0009d73 <malloc>
c0012dbd:	83 c4 10             	add    esp,0x10
c0012dc0:	89 c3                	mov    ebx,eax
c0012dc2:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c0012dc7:	83 ec 04             	sub    esp,0x4
c0012dca:	50                   	push   eax
c0012dcb:	68 f6 60 02 c0       	push   0xc00260f6
c0012dd0:	53                   	push   ebx
c0012dd1:	e8 f4 a7 ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c0012dd6:	83 c4 10             	add    esp,0x10
c0012dd9:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012de0:	83 ec 08             	sub    esp,0x8
c0012de3:	6a 01                	push   0x1
c0012de5:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012dec:	e8 b3 a8 ff ff       	call   c000d6a4 <File::open(FileOpenMode)>
c0012df1:	83 c4 10             	add    esp,0x10
c0012df4:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012dfb:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012e03:	75 17                	jne    c0012e1c <ACPI::open(int, int, void*)+0xbc>
c0012e05:	83 ec 0c             	sub    esp,0xc
c0012e08:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012e0f:	e8 ee a8 ff ff       	call   c000d702 <File::close()>
c0012e14:	83 c4 10             	add    esp,0x10
c0012e17:	eb 0b                	jmp    c0012e24 <ACPI::open(int, int, void*)+0xc4>
c0012e19:	8d 76 00             	lea    esi,[esi+0x0]
c0012e1c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012e24:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0012e2c:	74 1e                	je     c0012e4c <ACPI::open(int, int, void*)+0xec>
c0012e2e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012e35:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e37:	83 c0 08             	add    eax,0x8
c0012e3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e3c:	83 ec 0c             	sub    esp,0xc
c0012e3f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012e46:	ff d0                	call   eax
c0012e48:	83 c4 10             	add    esp,0x10
c0012e4b:	90                   	nop
c0012e4c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0012e53:	83 f0 01             	xor    eax,0x1
c0012e56:	84 c0                	test   al,al
c0012e58:	74 42                	je     c0012e9c <ACPI::open(int, int, void*)+0x13c>
c0012e5a:	83 ec 0c             	sub    esp,0xc
c0012e5d:	68 14 61 02 c0       	push   0xc0026114
c0012e62:	e8 66 6f ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0012e67:	83 c4 10             	add    esp,0x10
c0012e6a:	83 ec 04             	sub    esp,0x4
c0012e6d:	6a 0c                	push   0xc
c0012e6f:	68 2f 61 02 c0       	push   0xc002612f
c0012e74:	68 40 61 02 c0       	push   0xc0026140
c0012e79:	e8 2f 33 00 00       	call   c00161ad <Reg::readIntWithDefault(char*, char*, int)>
c0012e7e:	83 c4 10             	add    esp,0x10
c0012e81:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012e88:	83 ec 0c             	sub    esp,0xc
c0012e8b:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0012e92:	e8 ac 90 ff ff       	call   c000bf43 <Virt::setupPageSwapping(int)>
c0012e97:	83 c4 10             	add    esp,0x10
c0012e9a:	66 90                	xchg   ax,ax
c0012e9c:	83 ec 0c             	sub    esp,0xc
c0012e9f:	68 86 46 02 c0       	push   0xc0024686
c0012ea4:	e8 24 6f ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0012ea9:	83 c4 10             	add    esp,0x10
c0012eac:	8b 1d 88 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c88
c0012eb2:	83 ec 08             	sub    esp,0x8
c0012eb5:	6a 01                	push   0x1
c0012eb7:	68 47 61 02 c0       	push   0xc0026147
c0012ebc:	e8 f9 56 00 00       	call   c00185ba <Thr::loadDLL(char const*, bool)>
c0012ec1:	83 c4 10             	add    esp,0x10
c0012ec4:	83 ec 08             	sub    esp,0x8
c0012ec7:	53                   	push   ebx
c0012ec8:	50                   	push   eax
c0012ec9:	e8 1d 59 00 00       	call   c00187eb <Thr::executeDLL(unsigned long, void*)>
c0012ece:	83 c4 10             	add    esp,0x10
c0012ed1:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012ed8:	83 ec 08             	sub    esp,0x8
c0012edb:	6a 12                	push   0x12
c0012edd:	50                   	push   eax
c0012ede:	e8 73 ba ff ff       	call   c000e956 <getDevicesOfType(DeviceType)>
c0012ee3:	83 c4 0c             	add    esp,0xc
c0012ee6:	66 90                	xchg   ax,ax
c0012ee8:	83 ec 0c             	sub    esp,0xc
c0012eeb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012ef2:	50                   	push   eax
c0012ef3:	e8 74 09 01 00       	call   c002386c <LinkedList<Device>::isEmpty()>
c0012ef8:	83 c4 10             	add    esp,0x10
c0012efb:	83 f0 01             	xor    eax,0x1
c0012efe:	84 c0                	test   al,al
c0012f00:	0f 84 46 01 00 00    	je     c001304c <ACPI::open(int, int, void*)+0x2ec>
c0012f06:	83 ec 0c             	sub    esp,0xc
c0012f09:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012f10:	50                   	push   eax
c0012f11:	e8 72 09 01 00       	call   c0023888 <LinkedList<Device>::getFirstElement()>
c0012f16:	83 c4 10             	add    esp,0x10
c0012f19:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012f20:	83 ec 0c             	sub    esp,0xc
c0012f23:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012f2a:	50                   	push   eax
c0012f2b:	e8 60 09 01 00       	call   c0023890 <LinkedList<Device>::removeFirst()>
c0012f30:	83 c4 10             	add    esp,0x10
c0012f33:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012f3a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012f41:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012f48:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012f4c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012f52:	ba 09 00 00 00       	mov    edx,0x9
c0012f57:	fc                   	cld    
c0012f58:	89 c7                	mov    edi,eax
c0012f5a:	89 de                	mov    esi,ebx
c0012f5c:	89 d1                	mov    ecx,edx
c0012f5e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012f60:	83 ec 08             	sub    esp,0x8
c0012f63:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012f67:	50                   	push   eax
c0012f68:	83 ec 24             	sub    esp,0x24
c0012f6b:	89 e0                	mov    eax,esp
c0012f6d:	89 c3                	mov    ebx,eax
c0012f6f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012f73:	ba 09 00 00 00       	mov    edx,0x9
c0012f78:	89 df                	mov    edi,ebx
c0012f7a:	89 c6                	mov    esi,eax
c0012f7c:	89 d1                	mov    ecx,edx
c0012f7e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012f80:	e8 9f b1 00 00       	call   c001e124 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012f85:	83 c4 30             	add    esp,0x30
c0012f88:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012f8f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012f97:	0f 84 4b ff ff ff    	je     c0012ee8 <ACPI::open(int, int, void*)+0x188>
c0012f9d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012fa8:	83 ec 0c             	sub    esp,0xc
c0012fab:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012fb2:	e8 bc 6d ff ff       	call   c0009d73 <malloc>
c0012fb7:	83 c4 10             	add    esp,0x10
c0012fba:	89 c3                	mov    ebx,eax
c0012fbc:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c0012fc1:	83 ec 04             	sub    esp,0x4
c0012fc4:	50                   	push   eax
c0012fc5:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012fcc:	53                   	push   ebx
c0012fcd:	e8 f8 a5 ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c0012fd2:	83 c4 10             	add    esp,0x10
c0012fd5:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012fdc:	83 ec 0c             	sub    esp,0xc
c0012fdf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012fe6:	e8 27 a9 ff ff       	call   c000d912 <File::exists()>
c0012feb:	83 c4 10             	add    esp,0x10
c0012fee:	84 c0                	test   al,al
c0012ff0:	74 2a                	je     c001301c <ACPI::open(int, int, void*)+0x2bc>
c0012ff2:	83 ec 08             	sub    esp,0x8
c0012ff5:	6a 01                	push   0x1
c0012ff7:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012ffe:	e8 b7 55 00 00       	call   c00185ba <Thr::loadDLL(char const*, bool)>
c0013003:	83 c4 10             	add    esp,0x10
c0013006:	83 ec 08             	sub    esp,0x8
c0013009:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0013010:	50                   	push   eax
c0013011:	e8 d5 57 00 00       	call   c00187eb <Thr::executeDLL(unsigned long, void*)>
c0013016:	83 c4 10             	add    esp,0x10
c0013019:	8d 76 00             	lea    esi,[esi+0x0]
c001301c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0013024:	0f 84 be fe ff ff    	je     c0012ee8 <ACPI::open(int, int, void*)+0x188>
c001302a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0013031:	8b 00                	mov    eax,DWORD PTR [eax]
c0013033:	83 c0 08             	add    eax,0x8
c0013036:	8b 00                	mov    eax,DWORD PTR [eax]
c0013038:	83 ec 0c             	sub    esp,0xc
c001303b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0013042:	ff d0                	call   eax
c0013044:	83 c4 10             	add    esp,0x10
c0013047:	e9 9c fe ff ff       	jmp    c0012ee8 <ACPI::open(int, int, void*)+0x188>
c001304c:	83 ec 0c             	sub    esp,0xc
c001304f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0013056:	50                   	push   eax
c0013057:	e8 0c 08 01 00       	call   c0023868 <LinkedList<Device>::~LinkedList()>
c001305c:	83 c4 10             	add    esp,0x10
c001305f:	8b 1d 88 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c88
c0013065:	83 ec 08             	sub    esp,0x8
c0013068:	6a 01                	push   0x1
c001306a:	68 62 61 02 c0       	push   0xc0026162
c001306f:	e8 46 55 00 00       	call   c00185ba <Thr::loadDLL(char const*, bool)>
c0013074:	83 c4 10             	add    esp,0x10
c0013077:	83 ec 08             	sub    esp,0x8
c001307a:	53                   	push   ebx
c001307b:	50                   	push   eax
c001307c:	e8 6a 57 00 00       	call   c00187eb <Thr::executeDLL(unsigned long, void*)>
c0013081:	83 c4 10             	add    esp,0x10
c0013084:	8b 1d 88 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c88
c001308a:	83 ec 08             	sub    esp,0x8
c001308d:	6a 01                	push   0x1
c001308f:	68 7f 61 02 c0       	push   0xc002617f
c0013094:	e8 21 55 00 00       	call   c00185ba <Thr::loadDLL(char const*, bool)>
c0013099:	83 c4 10             	add    esp,0x10
c001309c:	83 ec 08             	sub    esp,0x8
c001309f:	53                   	push   ebx
c00130a0:	50                   	push   eax
c00130a1:	e8 45 57 00 00       	call   c00187eb <Thr::executeDLL(unsigned long, void*)>
c00130a6:	83 c4 10             	add    esp,0x10
c00130a9:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c00130ae:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00130b4:	83 e0 04             	and    eax,0x4
c00130b7:	84 c0                	test   al,al
c00130b9:	0f 84 15 01 00 00    	je     c00131d4 <ACPI::open(int, int, void*)+0x474>
c00130bf:	83 ec 0c             	sub    esp,0xc
c00130c2:	68 9c 61 02 c0       	push   0xc002619c
c00130c7:	e8 01 6d ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c00130cc:	83 c4 10             	add    esp,0x10
c00130cf:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c00130da:	83 ec 0c             	sub    esp,0xc
c00130dd:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00130e4:	e8 8a 6c ff ff       	call   c0009d73 <malloc>
c00130e9:	83 c4 10             	add    esp,0x10
c00130ec:	89 c3                	mov    ebx,eax
c00130ee:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c00130f3:	83 ec 04             	sub    esp,0x4
c00130f6:	50                   	push   eax
c00130f7:	68 b9 61 02 c0       	push   0xc00261b9
c00130fc:	53                   	push   ebx
c00130fd:	e8 c8 a4 ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c0013102:	83 c4 10             	add    esp,0x10
c0013105:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001310c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0013114:	74 1a                	je     c0013130 <ACPI::open(int, int, void*)+0x3d0>
c0013116:	83 ec 0c             	sub    esp,0xc
c0013119:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0013120:	e8 ed a7 ff ff       	call   c000d912 <File::exists()>
c0013125:	83 c4 10             	add    esp,0x10
c0013128:	84 c0                	test   al,al
c001312a:	74 04                	je     c0013130 <ACPI::open(int, int, void*)+0x3d0>
c001312c:	b0 01                	mov    al,0x1
c001312e:	eb 04                	jmp    c0013134 <ACPI::open(int, int, void*)+0x3d4>
c0013130:	b0 00                	mov    al,0x0
c0013132:	66 90                	xchg   ax,ax
c0013134:	84 c0                	test   al,al
c0013136:	74 28                	je     c0013160 <ACPI::open(int, int, void*)+0x400>
c0013138:	83 ec 08             	sub    esp,0x8
c001313b:	6a 01                	push   0x1
c001313d:	68 b9 61 02 c0       	push   0xc00261b9
c0013142:	e8 73 54 00 00       	call   c00185ba <Thr::loadDLL(char const*, bool)>
c0013147:	83 c4 10             	add    esp,0x10
c001314a:	83 ec 08             	sub    esp,0x8
c001314d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0013154:	50                   	push   eax
c0013155:	e8 91 56 00 00       	call   c00187eb <Thr::executeDLL(unsigned long, void*)>
c001315a:	83 c4 10             	add    esp,0x10
c001315d:	8d 76 00             	lea    esi,[esi+0x0]
c0013160:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0013168:	74 2a                	je     c0013194 <ACPI::open(int, int, void*)+0x434>
c001316a:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0013172:	74 20                	je     c0013194 <ACPI::open(int, int, void*)+0x434>
c0013174:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001317b:	8b 00                	mov    eax,DWORD PTR [eax]
c001317d:	83 c0 08             	add    eax,0x8
c0013180:	8b 00                	mov    eax,DWORD PTR [eax]
c0013182:	83 ec 0c             	sub    esp,0xc
c0013185:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001318c:	ff d0                	call   eax
c001318e:	83 c4 10             	add    esp,0x10
c0013191:	8d 76 00             	lea    esi,[esi+0x0]
c0013194:	a1 e8 94 02 c0       	mov    eax,ds:0xc00294e8
c0013199:	83 ec 08             	sub    esp,0x8
c001319c:	68 d6 61 02 c0       	push   0xc00261d6
c00131a1:	50                   	push   eax
c00131a2:	e8 e1 ee ff ff       	call   c0012088 <findDataTable(unsigned char*, char*)>
c00131a7:	83 c4 10             	add    esp,0x10
c00131aa:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c00131b1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00131b9:	74 19                	je     c00131d4 <ACPI::open(int, int, void*)+0x474>
c00131bb:	83 ec 08             	sub    esp,0x8
c00131be:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00131c5:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00131cc:	e8 0b fb ff ff       	call   c0012cdc <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00131d1:	83 c4 10             	add    esp,0x10
c00131d4:	b8 00 00 00 00       	mov    eax,0x0
c00131d9:	81 c4 70 01 00 00    	add    esp,0x170
c00131df:	5b                   	pop    ebx
c00131e0:	5e                   	pop    esi
c00131e1:	5f                   	pop    edi
c00131e2:	c3                   	ret    
c00131e3:	90                   	nop

c00131e4 <CPU::close(int, int, void*)>:
c00131e4:	31 c0                	xor    eax,eax
c00131e6:	c3                   	ret    
c00131e7:	90                   	nop

c00131e8 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00131e8:	55                   	push   ebp
c00131e9:	57                   	push   edi
c00131ea:	56                   	push   esi
c00131eb:	53                   	push   ebx
c00131ec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00131f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00131f4:	89 ce                	mov    esi,ecx
c00131f6:	89 d5                	mov    ebp,edx
c00131f8:	80 f9 04             	cmp    cl,0x4
c00131fb:	75 28                	jne    c0013225 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00131fd:	8d 42 f9             	lea    eax,[edx-0x7]
c0013200:	3c 03                	cmp    al,0x3
c0013202:	0f 86 63 01 00 00    	jbe    c001336b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0013208:	80 fa 03             	cmp    dl,0x3
c001320b:	0f 84 5a 01 00 00    	je     c001336b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0013211:	8d 7a f2             	lea    edi,[edx-0xe]
c0013214:	b8 50 85 02 c0       	mov    eax,0xc0028550
c0013219:	89 fb                	mov    ebx,edi
c001321b:	80 fb 01             	cmp    bl,0x1
c001321e:	77 4e                	ja     c001326e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0013220:	e9 52 01 00 00       	jmp    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013225:	80 f9 05             	cmp    cl,0x5
c0013228:	75 4d                	jne    c0013277 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c001322a:	b8 60 85 02 c0       	mov    eax,0xc0028560
c001322f:	80 fa 03             	cmp    dl,0x3
c0013232:	0f 86 3f 01 00 00    	jbe    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013238:	8d 7a fa             	lea    edi,[edx-0x6]
c001323b:	b8 70 85 02 c0       	mov    eax,0xc0028570
c0013240:	89 fb                	mov    ebx,edi
c0013242:	80 fb 01             	cmp    bl,0x1
c0013245:	0f 86 2c 01 00 00    	jbe    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001324b:	b8 80 85 02 c0       	mov    eax,0xc0028580
c0013250:	80 fa 08             	cmp    dl,0x8
c0013253:	0f 84 1e 01 00 00    	je     c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013259:	89 d7                	mov    edi,edx
c001325b:	b8 90 85 02 c0       	mov    eax,0xc0028590
c0013260:	83 e7 fb             	and    edi,0xfffffffb
c0013263:	89 fb                	mov    ebx,edi
c0013265:	80 fb 09             	cmp    bl,0x9
c0013268:	0f 84 09 01 00 00    	je     c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001326e:	31 c0                	xor    eax,eax
c0013270:	89 eb                	mov    ebx,ebp
c0013272:	0f b6 fb             	movzx  edi,bl
c0013275:	eb 30                	jmp    c00132a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0013277:	31 c0                	xor    eax,eax
c0013279:	80 f9 06             	cmp    cl,0x6
c001327c:	75 f2                	jne    c0013270 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001327e:	80 fa 0a             	cmp    dl,0xa
c0013281:	77 ed                	ja     c0013270 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0013283:	bf de 05 00 00       	mov    edi,0x5de
c0013288:	0f a3 d7             	bt     edi,edx
c001328b:	73 e3                	jae    c0013270 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001328d:	b8 a0 85 02 c0       	mov    eax,0xc00285a0
c0013292:	e9 e0 00 00 00       	jmp    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013297:	39 c7                	cmp    edi,eax
c0013299:	0f 84 d3 00 00 00    	je     c0013372 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001329f:	40                   	inc    eax
c00132a0:	3d d0 00 00 00       	cmp    eax,0xd0
c00132a5:	74 09                	je     c00132b0 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c00132a7:	89 f3                	mov    ebx,esi
c00132a9:	80 fb 0f             	cmp    bl,0xf
c00132ac:	75 f1                	jne    c001329f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c00132ae:	eb e7                	jmp    c0013297 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c00132b0:	80 f9 10             	cmp    cl,0x10
c00132b3:	75 14                	jne    c00132c9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c00132b5:	8d 42 fc             	lea    eax,[edx-0x4]
c00132b8:	83 e0 fb             	and    eax,0xfffffffb
c00132bb:	3c 02                	cmp    al,0x2
c00132bd:	76 34                	jbe    c00132f3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c00132bf:	b8 11 65 02 c0       	mov    eax,0xc0026511
c00132c4:	80 fa 02             	cmp    dl,0x2
c00132c7:	eb 24                	jmp    c00132ed <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c00132c9:	80 f9 11             	cmp    cl,0x11
c00132cc:	75 13                	jne    c00132e1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c00132ce:	b8 11 65 02 c0       	mov    eax,0xc0026511
c00132d3:	80 fa 03             	cmp    dl,0x3
c00132d6:	0f 85 9b 00 00 00    	jne    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132dc:	e9 91 00 00 00       	jmp    c0013372 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c00132e1:	80 f9 12             	cmp    cl,0x12
c00132e4:	75 14                	jne    c00132fa <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00132e6:	b8 11 65 02 c0       	mov    eax,0xc0026511
c00132eb:	fe ca                	dec    dl
c00132ed:	0f 85 84 00 00 00    	jne    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132f3:	b8 c0 85 02 c0       	mov    eax,0xc00285c0
c00132f8:	eb 7d                	jmp    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00132fa:	80 f9 14             	cmp    cl,0x14
c00132fd:	75 12                	jne    c0013311 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00132ff:	4a                   	dec    edx
c0013300:	b8 11 65 02 c0       	mov    eax,0xc0026511
c0013305:	80 fa 01             	cmp    dl,0x1
c0013308:	77 6d                	ja     c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001330a:	b8 d0 85 02 c0       	mov    eax,0xc00285d0
c001330f:	eb 66                	jmp    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013311:	80 f9 15             	cmp    cl,0x15
c0013314:	75 31                	jne    c0013347 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0013316:	b8 e0 85 02 c0       	mov    eax,0xc00285e0
c001331b:	80 fa 01             	cmp    dl,0x1
c001331e:	74 57                	je     c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013320:	b8 11 65 02 c0       	mov    eax,0xc0026511
c0013325:	80 fa 13             	cmp    dl,0x13
c0013328:	76 0c                	jbe    c0013336 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c001332a:	80 fa 30             	cmp    dl,0x30
c001332d:	75 48                	jne    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001332f:	b8 00 86 02 c0       	mov    eax,0xc0028600
c0013334:	eb 41                	jmp    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013336:	b9 04 00 09 00       	mov    ecx,0x90004
c001333b:	0f a3 d1             	bt     ecx,edx
c001333e:	73 37                	jae    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013340:	b8 f0 85 02 c0       	mov    eax,0xc00285f0
c0013345:	eb 30                	jmp    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013347:	b8 11 65 02 c0       	mov    eax,0xc0026511
c001334c:	80 f9 16             	cmp    cl,0x16
c001334f:	75 26                	jne    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013351:	b8 10 86 02 c0       	mov    eax,0xc0028610
c0013356:	84 d2                	test   dl,dl
c0013358:	74 1d                	je     c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001335a:	b8 11 65 02 c0       	mov    eax,0xc0026511
c001335f:	80 fa 30             	cmp    dl,0x30
c0013362:	75 13                	jne    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013364:	b8 20 86 02 c0       	mov    eax,0xc0028620
c0013369:	eb 0c                	jmp    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001336b:	b8 40 85 02 c0       	mov    eax,0xc0028540
c0013370:	eb 05                	jmp    c0013377 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0013372:	b8 b0 85 02 c0       	mov    eax,0xc00285b0
c0013377:	5b                   	pop    ebx
c0013378:	5e                   	pop    esi
c0013379:	5f                   	pop    edi
c001337a:	5d                   	pop    ebp
c001337b:	c3                   	ret    

c001337c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c001337c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013380:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013384:	80 f9 04             	cmp    cl,0x4
c0013387:	75 6b                	jne    c00133f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0013389:	b8 a0 83 02 c0       	mov    eax,0xc00283a0
c001338e:	80 fa 01             	cmp    dl,0x1
c0013391:	0f 86 92 02 00 00    	jbe    c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013397:	b8 b0 83 02 c0       	mov    eax,0xc00283b0
c001339c:	80 fa 02             	cmp    dl,0x2
c001339f:	0f 84 84 02 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133a5:	b8 c0 83 02 c0       	mov    eax,0xc00283c0
c00133aa:	80 fa 03             	cmp    dl,0x3
c00133ad:	0f 84 76 02 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133b3:	b8 d0 83 02 c0       	mov    eax,0xc00283d0
c00133b8:	80 fa 04             	cmp    dl,0x4
c00133bb:	0f 84 68 02 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133c1:	b8 e0 83 02 c0       	mov    eax,0xc00283e0
c00133c6:	80 fa 05             	cmp    dl,0x5
c00133c9:	0f 84 5a 02 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133cf:	b8 c0 83 02 c0       	mov    eax,0xc00283c0
c00133d4:	80 fa 07             	cmp    dl,0x7
c00133d7:	0f 84 4c 02 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133dd:	83 ea 08             	sub    edx,0x8
c00133e0:	b8 11 65 02 c0       	mov    eax,0xc0026511
c00133e5:	80 fa 01             	cmp    dl,0x1
c00133e8:	0f 87 3b 02 00 00    	ja     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00133ee:	b8 f0 83 02 c0       	mov    eax,0xc00283f0
c00133f3:	c3                   	ret    
c00133f4:	80 f9 05             	cmp    cl,0x5
c00133f7:	75 45                	jne    c001343e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00133f9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00133fc:	b8 00 84 02 c0       	mov    eax,0xc0028400
c0013401:	80 f9 02             	cmp    cl,0x2
c0013404:	0f 86 1f 02 00 00    	jbe    c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001340a:	80 fa 04             	cmp    dl,0x4
c001340d:	0f 84 f3 01 00 00    	je     c0013606 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0013413:	80 fa 07             	cmp    dl,0x7
c0013416:	0f 84 0d 02 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001341c:	b8 10 84 02 c0       	mov    eax,0xc0028410
c0013421:	80 fa 08             	cmp    dl,0x8
c0013424:	0f 84 ff 01 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001342a:	b8 11 65 02 c0       	mov    eax,0xc0026511
c001342f:	80 fa 09             	cmp    dl,0x9
c0013432:	0f 85 f1 01 00 00    	jne    c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013438:	b8 20 84 02 c0       	mov    eax,0xc0028420
c001343d:	c3                   	ret    
c001343e:	80 f9 06             	cmp    cl,0x6
c0013441:	0f 85 85 01 00 00    	jne    c00135cc <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0013447:	b8 30 84 02 c0       	mov    eax,0xc0028430
c001344c:	80 fa 01             	cmp    dl,0x1
c001344f:	0f 84 d4 01 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013455:	8d 42 fb             	lea    eax,[edx-0x5]
c0013458:	3c 01                	cmp    al,0x1
c001345a:	0f 86 ac 01 00 00    	jbe    c001360c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013460:	80 fa 03             	cmp    dl,0x3
c0013463:	0f 84 a3 01 00 00    	je     c001360c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0013469:	8d 4a f9             	lea    ecx,[edx-0x7]
c001346c:	b8 50 84 02 c0       	mov    eax,0xc0028450
c0013471:	80 f9 01             	cmp    cl,0x1
c0013474:	0f 86 af 01 00 00    	jbe    c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001347a:	80 fa 09             	cmp    dl,0x9
c001347d:	0f 84 8f 01 00 00    	je     c0013612 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0013483:	8d 4a f6             	lea    ecx,[edx-0xa]
c0013486:	80 f9 01             	cmp    cl,0x1
c0013489:	0f 86 9a 01 00 00    	jbe    c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001348f:	b8 60 84 02 c0       	mov    eax,0xc0028460
c0013494:	80 fa 0d             	cmp    dl,0xd
c0013497:	0f 84 8c 01 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001349d:	b8 70 84 02 c0       	mov    eax,0xc0028470
c00134a2:	80 fa 0e             	cmp    dl,0xe
c00134a5:	0f 84 7e 01 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134ab:	b8 80 84 02 c0       	mov    eax,0xc0028480
c00134b0:	80 fa 0f             	cmp    dl,0xf
c00134b3:	0f 84 70 01 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134b9:	b8 60 84 02 c0       	mov    eax,0xc0028460
c00134be:	80 fa 15             	cmp    dl,0x15
c00134c1:	0f 84 62 01 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134c7:	8d 4a ea             	lea    ecx,[edx-0x16]
c00134ca:	b8 80 84 02 c0       	mov    eax,0xc0028480
c00134cf:	80 f9 01             	cmp    cl,0x1
c00134d2:	0f 86 51 01 00 00    	jbe    c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134d8:	80 fa 1a             	cmp    dl,0x1a
c00134db:	0f 84 37 01 00 00    	je     c0013618 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00134e1:	80 fa 1c             	cmp    dl,0x1c
c00134e4:	0f 84 34 01 00 00    	je     c001361e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00134ea:	80 fa 1d             	cmp    dl,0x1d
c00134ed:	0f 84 36 01 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00134f3:	b8 b0 84 02 c0       	mov    eax,0xc00284b0
c00134f8:	80 fa 25             	cmp    dl,0x25
c00134fb:	0f 84 28 01 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013501:	8d 4a da             	lea    ecx,[edx-0x26]
c0013504:	b8 a0 84 02 c0       	mov    eax,0xc00284a0
c0013509:	80 f9 01             	cmp    cl,0x1
c001350c:	0f 86 17 01 00 00    	jbe    c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013512:	b8 c0 84 02 c0       	mov    eax,0xc00284c0
c0013517:	80 fa 2a             	cmp    dl,0x2a
c001351a:	0f 84 09 01 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013520:	b8 b0 84 02 c0       	mov    eax,0xc00284b0
c0013525:	80 fa 2c             	cmp    dl,0x2c
c0013528:	0f 84 fb 00 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001352e:	b8 c0 84 02 c0       	mov    eax,0xc00284c0
c0013533:	80 fa 2d             	cmp    dl,0x2d
c0013536:	0f 84 ed 00 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001353c:	b8 90 84 02 c0       	mov    eax,0xc0028490
c0013541:	80 fa 2e             	cmp    dl,0x2e
c0013544:	0f 84 df 00 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001354a:	b8 b0 84 02 c0       	mov    eax,0xc00284b0
c001354f:	80 fa 2f             	cmp    dl,0x2f
c0013552:	0f 84 d1 00 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013558:	8d 4a cb             	lea    ecx,[edx-0x35]
c001355b:	b8 a0 84 02 c0       	mov    eax,0xc00284a0
c0013560:	80 f9 01             	cmp    cl,0x1
c0013563:	0f 86 c0 00 00 00    	jbe    c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013569:	b8 d0 84 02 c0       	mov    eax,0xc00284d0
c001356e:	80 fa 37             	cmp    dl,0x37
c0013571:	0f 84 b2 00 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013577:	b8 e0 84 02 c0       	mov    eax,0xc00284e0
c001357c:	80 fa 3a             	cmp    dl,0x3a
c001357f:	0f 84 a4 00 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013585:	b8 f0 84 02 c0       	mov    eax,0xc00284f0
c001358a:	80 fa 3c             	cmp    dl,0x3c
c001358d:	0f 84 96 00 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013593:	b8 00 85 02 c0       	mov    eax,0xc0028500
c0013598:	80 fa 3d             	cmp    dl,0x3d
c001359b:	0f 84 88 00 00 00    	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135a1:	b8 e0 84 02 c0       	mov    eax,0xc00284e0
c00135a6:	80 fa 3e             	cmp    dl,0x3e
c00135a9:	74 7e                	je     c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135ab:	8d 42 bb             	lea    eax,[edx-0x45]
c00135ae:	3c 01                	cmp    al,0x1
c00135b0:	76 72                	jbe    c0013624 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00135b2:	80 fa 3f             	cmp    dl,0x3f
c00135b5:	74 6d                	je     c0013624 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c00135b7:	80 fa 4a             	cmp    dl,0x4a
c00135ba:	74 0a                	je     c00135c6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c00135bc:	b8 11 65 02 c0       	mov    eax,0xc0026511
c00135c1:	80 fa 4d             	cmp    dl,0x4d
c00135c4:	75 63                	jne    c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135c6:	b8 d0 84 02 c0       	mov    eax,0xc00284d0
c00135cb:	c3                   	ret    
c00135cc:	b8 11 65 02 c0       	mov    eax,0xc0026511
c00135d1:	80 f9 0b             	cmp    cl,0xb
c00135d4:	75 0a                	jne    c00135e0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00135d6:	fe ca                	dec    dl
c00135d8:	75 4f                	jne    c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135da:	b8 10 85 02 c0       	mov    eax,0xc0028510
c00135df:	c3                   	ret    
c00135e0:	80 f9 0f             	cmp    cl,0xf
c00135e3:	75 44                	jne    c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135e5:	b8 20 85 02 c0       	mov    eax,0xc0028520
c00135ea:	80 fa 02             	cmp    dl,0x2
c00135ed:	76 3a                	jbe    c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00135ef:	8d 42 fd             	lea    eax,[edx-0x3]
c00135f2:	3c 01                	cmp    al,0x1
c00135f4:	76 0a                	jbe    c0013600 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00135f6:	b8 11 65 02 c0       	mov    eax,0xc0026511
c00135fb:	80 fa 06             	cmp    dl,0x6
c00135fe:	75 29                	jne    c0013629 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013600:	b8 30 85 02 c0       	mov    eax,0xc0028530
c0013605:	c3                   	ret    
c0013606:	b8 10 84 02 c0       	mov    eax,0xc0028410
c001360b:	c3                   	ret    
c001360c:	b8 40 84 02 c0       	mov    eax,0xc0028440
c0013611:	c3                   	ret    
c0013612:	b8 60 84 02 c0       	mov    eax,0xc0028460
c0013617:	c3                   	ret    
c0013618:	b8 90 84 02 c0       	mov    eax,0xc0028490
c001361d:	c3                   	ret    
c001361e:	b8 a0 84 02 c0       	mov    eax,0xc00284a0
c0013623:	c3                   	ret    
c0013624:	b8 f0 84 02 c0       	mov    eax,0xc00284f0
c0013629:	c3                   	ret    

c001362a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001362a:	60                   	pusha  
c001362b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001362f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013633:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013637:	9c                   	pushf  
c0013638:	fa                   	cli    
c0013639:	0f 09                	wbinvd 
c001363b:	0f 30                	wrmsr  
c001363d:	9d                   	popf   
c001363e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013642:	89 02                	mov    DWORD PTR [edx],eax
c0013644:	61                   	popa   
c0013645:	c3                   	ret    

c0013646 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0013646:	60                   	pusha  
c0013647:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001364b:	9c                   	pushf  
c001364c:	fa                   	cli    
c001364d:	0f 09                	wbinvd 
c001364f:	31 c0                	xor    eax,eax
c0013651:	31 d2                	xor    edx,edx
c0013653:	0f 32                	rdmsr  
c0013655:	9d                   	popf   
c0013656:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001365a:	89 02                	mov    DWORD PTR [edx],eax
c001365c:	61                   	popa   
c001365d:	c3                   	ret    

c001365e <CPU::AMD_K6_writeback(int, int, int)>:
c001365e:	56                   	push   esi
c001365f:	53                   	push   ebx
c0013660:	83 ec 10             	sub    esp,0x10
c0013663:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013667:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001366c:	75 5d                	jne    c00136cb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001366e:	83 f8 08             	cmp    eax,0x8
c0013671:	75 09                	jne    c001367c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0013673:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013678:	7e 13                	jle    c001368d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001367a:	eb 30                	jmp    c00136ac <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001367c:	83 f8 06             	cmp    eax,0x6
c001367f:	7c 4a                	jl     c00136cb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0013681:	83 f8 07             	cmp    eax,0x7
c0013684:	7e 07                	jle    c001368d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0013686:	83 f8 09             	cmp    eax,0x9
c0013689:	74 21                	je     c00136ac <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001368b:	eb 3e                	jmp    c00136cb <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001368d:	89 e6                	mov    esi,esp
c001368f:	8b 1d ac 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028cac
c0013695:	56                   	push   esi
c0013696:	c1 eb 15             	shr    ebx,0x15
c0013699:	68 82 00 00 c0       	push   0xc0000082
c001369e:	83 e3 7e             	and    ebx,0x7e
c00136a1:	e8 a0 ff ff ff       	call   c0013646 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00136a6:	56                   	push   esi
c00136a7:	6a 00                	push   0x0
c00136a9:	53                   	push   ebx
c00136aa:	eb 12                	jmp    c00136be <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00136ac:	89 e3                	mov    ebx,esp
c00136ae:	53                   	push   ebx
c00136af:	68 82 00 00 c0       	push   0xc0000082
c00136b4:	e8 8d ff ff ff       	call   c0013646 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00136b9:	53                   	push   ebx
c00136ba:	6a 00                	push   0x0
c00136bc:	6a 00                	push   0x0
c00136be:	68 82 00 00 c0       	push   0xc0000082
c00136c3:	e8 62 ff ff ff       	call   c001362a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00136c8:	83 c4 18             	add    esp,0x18
c00136cb:	83 c4 10             	add    esp,0x10
c00136ce:	5b                   	pop    ebx
c00136cf:	5e                   	pop    esi
c00136d0:	c3                   	ret    
c00136d1:	90                   	nop

c00136d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00136d2:	55                   	push   ebp
c00136d3:	57                   	push   edi
c00136d4:	56                   	push   esi
c00136d5:	53                   	push   ebx
c00136d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136da:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136de:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00136e2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00136e6:	39 05 40 86 02 c0    	cmp    DWORD PTR ds:0xc0028640,eax
c00136ec:	75 23                	jne    c0013711 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00136ee:	a1 4c 97 02 c0       	mov    eax,ds:0xc002974c
c00136f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00136f7:	89 06                	mov    DWORD PTR [esi],eax
c00136f9:	a1 48 97 02 c0       	mov    eax,ds:0xc0029748
c00136fe:	89 07                	mov    DWORD PTR [edi],eax
c0013700:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0013705:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013708:	a1 40 97 02 c0       	mov    eax,ds:0xc0029740
c001370d:	89 02                	mov    DWORD PTR [edx],eax
c001370f:	eb 3f                	jmp    c0013750 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013711:	31 c9                	xor    ecx,ecx
c0013713:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013717:	0f a2                	cpuid  
c0013719:	89 06                	mov    DWORD PTR [esi],eax
c001371b:	89 1f                	mov    DWORD PTR [edi],ebx
c001371d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013721:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013724:	89 10                	mov    DWORD PTR [eax],edx
c0013726:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001372a:	a3 40 86 02 c0       	mov    ds:0xc0028640,eax
c001372f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013731:	a3 4c 97 02 c0       	mov    ds:0xc002974c,eax
c0013736:	8b 07                	mov    eax,DWORD PTR [edi]
c0013738:	a3 48 97 02 c0       	mov    ds:0xc0029748,eax
c001373d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013740:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c0013745:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013749:	8b 00                	mov    eax,DWORD PTR [eax]
c001374b:	a3 40 97 02 c0       	mov    ds:0xc0029740,eax
c0013750:	5b                   	pop    ebx
c0013751:	5e                   	pop    esi
c0013752:	5f                   	pop    edi
c0013753:	5d                   	pop    ebp
c0013754:	c3                   	ret    
c0013755:	90                   	nop

c0013756 <CPU::cpuidCheckEDX(unsigned int)>:
c0013756:	83 ec 10             	sub    esp,0x10
c0013759:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001375d:	50                   	push   eax
c001375e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013762:	50                   	push   eax
c0013763:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013767:	50                   	push   eax
c0013768:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001376c:	50                   	push   eax
c001376d:	6a 01                	push   0x1
c001376f:	e8 5e ff ff ff       	call   c00136d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013774:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013778:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001377c:	0f 95 c0             	setne  al
c001377f:	83 c4 24             	add    esp,0x24
c0013782:	c3                   	ret    
c0013783:	90                   	nop

c0013784 <CPU::cpuidCheckECX(unsigned int)>:
c0013784:	83 ec 10             	sub    esp,0x10
c0013787:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001378b:	50                   	push   eax
c001378c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013790:	50                   	push   eax
c0013791:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013795:	50                   	push   eax
c0013796:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001379a:	50                   	push   eax
c001379b:	6a 01                	push   0x1
c001379d:	e8 30 ff ff ff       	call   c00136d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00137a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00137a6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00137aa:	0f 95 c0             	setne  al
c00137ad:	83 c4 24             	add    esp,0x24
c00137b0:	c3                   	ret    
c00137b1:	90                   	nop

c00137b2 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00137b2:	83 ec 10             	sub    esp,0x10
c00137b5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137b9:	50                   	push   eax
c00137ba:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137be:	50                   	push   eax
c00137bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137c3:	50                   	push   eax
c00137c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137c8:	50                   	push   eax
c00137c9:	6a 07                	push   0x7
c00137cb:	e8 02 ff ff ff       	call   c00136d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00137d0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00137d4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00137d8:	0f 95 c0             	setne  al
c00137db:	83 c4 24             	add    esp,0x24
c00137de:	c3                   	ret    
c00137df:	90                   	nop

c00137e0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00137e0:	83 ec 10             	sub    esp,0x10
c00137e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137e7:	50                   	push   eax
c00137e8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137ec:	50                   	push   eax
c00137ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137f1:	50                   	push   eax
c00137f2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00137f6:	50                   	push   eax
c00137f7:	6a 07                	push   0x7
c00137f9:	e8 d4 fe ff ff       	call   c00136d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00137fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013802:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013806:	0f 95 c0             	setne  al
c0013809:	83 c4 24             	add    esp,0x24
c001380c:	c3                   	ret    
c001380d:	90                   	nop

c001380e <CPU::CPU()>:
c001380e:	83 ec 0c             	sub    esp,0xc
c0013811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013815:	83 ec 08             	sub    esp,0x8
c0013818:	68 11 65 02 c0       	push   0xc0026511
c001381d:	50                   	push   eax
c001381e:	e8 b3 af ff ff       	call   c000e7d6 <Device::Device(char const*)>
c0013823:	83 c4 10             	add    esp,0x10
c0013826:	ba 74 67 02 c0       	mov    edx,0xc0026774
c001382b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001382f:	89 10                	mov    DWORD PTR [eax],edx
c0013831:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013835:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001383f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013843:	05 78 01 00 00       	add    eax,0x178
c0013848:	83 ec 0c             	sub    esp,0xc
c001384b:	50                   	push   eax
c001384c:	e8 b7 5d ff ff       	call   c0009608 <GDT::GDT()>
c0013851:	83 c4 10             	add    esp,0x10
c0013854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013858:	05 7c 09 00 00       	add    eax,0x97c
c001385d:	83 ec 0c             	sub    esp,0xc
c0013860:	50                   	push   eax
c0013861:	e8 fa 5f ff ff       	call   c0009860 <IDT::IDT()>
c0013866:	83 c4 10             	add    esp,0x10
c0013869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001386d:	05 7c 11 00 00       	add    eax,0x117c
c0013872:	83 ec 0c             	sub    esp,0xc
c0013875:	50                   	push   eax
c0013876:	e8 01 7e ff ff       	call   c000b67c <TSS::TSS()>
c001387b:	83 c4 10             	add    esp,0x10
c001387e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013882:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001388d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0013897:	90                   	nop
c0013898:	83 c4 0c             	add    esp,0xc
c001389b:	c3                   	ret    

c001389c <CPU::displayFeatures()>:
c001389c:	53                   	push   ebx
c001389d:	83 ec 10             	sub    esp,0x10
c00138a0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00138a4:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00138aa:	68 08 62 02 c0       	push   0xc0026208
c00138af:	e8 ab 97 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00138b4:	58                   	pop    eax
c00138b5:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00138bb:	5a                   	pop    edx
c00138bc:	50                   	push   eax
c00138bd:	68 19 62 02 c0       	push   0xc0026219
c00138c2:	e8 98 97 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00138c7:	59                   	pop    ecx
c00138c8:	58                   	pop    eax
c00138c9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00138cf:	c1 e8 0e             	shr    eax,0xe
c00138d2:	0f b6 c0             	movzx  eax,al
c00138d5:	50                   	push   eax
c00138d6:	68 2a 62 02 c0       	push   0xc002622a
c00138db:	e8 7f 97 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00138e0:	58                   	pop    eax
c00138e1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00138e7:	5a                   	pop    edx
c00138e8:	66 c1 e8 06          	shr    ax,0x6
c00138ec:	0f b6 c0             	movzx  eax,al
c00138ef:	50                   	push   eax
c00138f0:	68 3b 62 02 c0       	push   0xc002623b
c00138f5:	e8 65 97 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00138fa:	c7 04 24 3b 68 02 c0 	mov    DWORD PTR [esp],0xc002683b
c0013901:	e8 59 97 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0013906:	83 c4 10             	add    esp,0x10
c0013909:	b8 05 47 02 c0       	mov    eax,0xc0024705
c001390e:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0013915:	74 05                	je     c001391c <CPU::displayFeatures()+0x80>
c0013917:	b8 01 47 02 c0       	mov    eax,0xc0024701
c001391c:	51                   	push   ecx
c001391d:	51                   	push   ecx
c001391e:	50                   	push   eax
c001391f:	68 4c 62 02 c0       	push   0xc002624c
c0013924:	e8 36 97 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0013929:	83 c4 10             	add    esp,0x10
c001392c:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0013931:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0013938:	78 05                	js     c001393f <CPU::displayFeatures()+0xa3>
c001393a:	b8 05 47 02 c0       	mov    eax,0xc0024705
c001393f:	52                   	push   edx
c0013940:	52                   	push   edx
c0013941:	50                   	push   eax
c0013942:	68 63 62 02 c0       	push   0xc0026263
c0013947:	e8 13 97 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001394c:	83 c4 10             	add    esp,0x10
c001394f:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0013954:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001395b:	75 05                	jne    c0013962 <CPU::displayFeatures()+0xc6>
c001395d:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0013962:	51                   	push   ecx
c0013963:	51                   	push   ecx
c0013964:	50                   	push   eax
c0013965:	68 7a 62 02 c0       	push   0xc002627a
c001396a:	e8 f0 96 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001396f:	83 c4 10             	add    esp,0x10
c0013972:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0013977:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001397e:	75 05                	jne    c0013985 <CPU::displayFeatures()+0xe9>
c0013980:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0013985:	52                   	push   edx
c0013986:	52                   	push   edx
c0013987:	50                   	push   eax
c0013988:	68 91 62 02 c0       	push   0xc0026291
c001398d:	e8 cd 96 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0013992:	83 c4 10             	add    esp,0x10
c0013995:	b8 01 47 02 c0       	mov    eax,0xc0024701
c001399a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00139a1:	75 05                	jne    c00139a8 <CPU::displayFeatures()+0x10c>
c00139a3:	b8 05 47 02 c0       	mov    eax,0xc0024705
c00139a8:	51                   	push   ecx
c00139a9:	51                   	push   ecx
c00139aa:	50                   	push   eax
c00139ab:	68 a8 62 02 c0       	push   0xc00262a8
c00139b0:	e8 aa 96 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00139b5:	83 c4 10             	add    esp,0x10
c00139b8:	b8 01 47 02 c0       	mov    eax,0xc0024701
c00139bd:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00139c4:	75 05                	jne    c00139cb <CPU::displayFeatures()+0x12f>
c00139c6:	b8 05 47 02 c0       	mov    eax,0xc0024705
c00139cb:	52                   	push   edx
c00139cc:	52                   	push   edx
c00139cd:	50                   	push   eax
c00139ce:	68 bf 62 02 c0       	push   0xc00262bf
c00139d3:	e8 87 96 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00139d8:	83 c4 10             	add    esp,0x10
c00139db:	b8 01 47 02 c0       	mov    eax,0xc0024701
c00139e0:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00139e7:	75 05                	jne    c00139ee <CPU::displayFeatures()+0x152>
c00139e9:	b8 05 47 02 c0       	mov    eax,0xc0024705
c00139ee:	51                   	push   ecx
c00139ef:	51                   	push   ecx
c00139f0:	50                   	push   eax
c00139f1:	68 d6 62 02 c0       	push   0xc00262d6
c00139f6:	e8 64 96 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00139fb:	83 c4 10             	add    esp,0x10
c00139fe:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0013a03:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0013a0a:	75 05                	jne    c0013a11 <CPU::displayFeatures()+0x175>
c0013a0c:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0013a11:	52                   	push   edx
c0013a12:	52                   	push   edx
c0013a13:	50                   	push   eax
c0013a14:	68 ed 62 02 c0       	push   0xc00262ed
c0013a19:	e8 41 96 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0013a1e:	83 c4 10             	add    esp,0x10
c0013a21:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0013a26:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0013a2d:	75 05                	jne    c0013a34 <CPU::displayFeatures()+0x198>
c0013a2f:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0013a34:	51                   	push   ecx
c0013a35:	51                   	push   ecx
c0013a36:	50                   	push   eax
c0013a37:	68 04 63 02 c0       	push   0xc0026304
c0013a3c:	e8 1e 96 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0013a41:	83 c4 10             	add    esp,0x10
c0013a44:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0013a49:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013a50:	75 05                	jne    c0013a57 <CPU::displayFeatures()+0x1bb>
c0013a52:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0013a57:	52                   	push   edx
c0013a58:	52                   	push   edx
c0013a59:	50                   	push   eax
c0013a5a:	68 1b 63 02 c0       	push   0xc002631b
c0013a5f:	e8 fb 95 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0013a64:	83 c4 10             	add    esp,0x10
c0013a67:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0013a6c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013a73:	75 05                	jne    c0013a7a <CPU::displayFeatures()+0x1de>
c0013a75:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0013a7a:	51                   	push   ecx
c0013a7b:	51                   	push   ecx
c0013a7c:	50                   	push   eax
c0013a7d:	68 32 63 02 c0       	push   0xc0026332
c0013a82:	e8 d8 95 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0013a87:	83 c4 10             	add    esp,0x10
c0013a8a:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0013a8f:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0013a96:	75 05                	jne    c0013a9d <CPU::displayFeatures()+0x201>
c0013a98:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0013a9d:	52                   	push   edx
c0013a9e:	52                   	push   edx
c0013a9f:	50                   	push   eax
c0013aa0:	68 49 63 02 c0       	push   0xc0026349
c0013aa5:	e8 b5 95 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0013aaa:	83 c4 10             	add    esp,0x10
c0013aad:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0013ab2:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0013ab9:	75 05                	jne    c0013ac0 <CPU::displayFeatures()+0x224>
c0013abb:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0013ac0:	51                   	push   ecx
c0013ac1:	51                   	push   ecx
c0013ac2:	50                   	push   eax
c0013ac3:	68 60 63 02 c0       	push   0xc0026360
c0013ac8:	e8 92 95 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0013acd:	83 c4 10             	add    esp,0x10
c0013ad0:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0013ad5:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0013adc:	78 05                	js     c0013ae3 <CPU::displayFeatures()+0x247>
c0013ade:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0013ae3:	52                   	push   edx
c0013ae4:	52                   	push   edx
c0013ae5:	50                   	push   eax
c0013ae6:	68 77 63 02 c0       	push   0xc0026377
c0013aeb:	e8 6f 95 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0013af0:	83 c4 10             	add    esp,0x10
c0013af3:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0013af8:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0013aff:	75 05                	jne    c0013b06 <CPU::displayFeatures()+0x26a>
c0013b01:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0013b06:	51                   	push   ecx
c0013b07:	51                   	push   ecx
c0013b08:	50                   	push   eax
c0013b09:	68 8e 63 02 c0       	push   0xc002638e
c0013b0e:	e8 4c 95 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0013b13:	83 c4 10             	add    esp,0x10
c0013b16:	b8 01 47 02 c0       	mov    eax,0xc0024701
c0013b1b:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c0013b22:	75 05                	jne    c0013b29 <CPU::displayFeatures()+0x28d>
c0013b24:	b8 05 47 02 c0       	mov    eax,0xc0024705
c0013b29:	52                   	push   edx
c0013b2a:	52                   	push   edx
c0013b2b:	50                   	push   eax
c0013b2c:	68 a5 63 02 c0       	push   0xc00263a5
c0013b31:	e8 29 95 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0013b36:	83 c4 18             	add    esp,0x18
c0013b39:	5b                   	pop    ebx
c0013b3a:	c3                   	ret    
c0013b3b:	90                   	nop

c0013b3c <CPU::detectFeatures()>:
c0013b3c:	55                   	push   ebp
c0013b3d:	57                   	push   edi
c0013b3e:	56                   	push   esi
c0013b3f:	53                   	push   ebx
c0013b40:	83 ec 50             	sub    esp,0x50
c0013b43:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0013b47:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013b51:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0013b58:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013b5e:	6a 0d                	push   0xd
c0013b60:	6a 00                	push   0x0
c0013b62:	55                   	push   ebp
c0013b63:	e8 2c cb fe ff       	call   c0000694 <memset>
c0013b68:	83 c4 10             	add    esp,0x10
c0013b6b:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0013b70:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013b77:	0f 84 22 09 00 00    	je     c001449f <CPU::detectFeatures()+0x963>
c0013b7d:	83 ec 0c             	sub    esp,0xc
c0013b80:	89 ef                	mov    edi,ebp
c0013b82:	6a 10                	push   0x10
c0013b84:	e8 cd fb ff ff       	call   c0013756 <CPU::cpuidCheckEDX(unsigned int)>
c0013b89:	83 e0 01             	and    eax,0x1
c0013b8c:	8d 14 00             	lea    edx,[eax+eax*1]
c0013b8f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013b95:	83 e0 fd             	and    eax,0xfffffffd
c0013b98:	09 d0                	or     eax,edx
c0013b9a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013ba0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013ba7:	e8 aa fb ff ff       	call   c0013756 <CPU::cpuidCheckEDX(unsigned int)>
c0013bac:	83 e0 01             	and    eax,0x1
c0013baf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013bb6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013bbc:	83 e0 fb             	and    eax,0xfffffffb
c0013bbf:	09 d0                	or     eax,edx
c0013bc1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013bc7:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013bce:	e8 83 fb ff ff       	call   c0013756 <CPU::cpuidCheckEDX(unsigned int)>
c0013bd3:	83 e0 01             	and    eax,0x1
c0013bd6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013bdd:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013be3:	83 e0 f7             	and    eax,0xfffffff7
c0013be6:	09 d0                	or     eax,edx
c0013be8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013bee:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0013bf5:	e8 5c fb ff ff       	call   c0013756 <CPU::cpuidCheckEDX(unsigned int)>
c0013bfa:	83 e0 01             	and    eax,0x1
c0013bfd:	c1 e0 04             	shl    eax,0x4
c0013c00:	88 c2                	mov    dl,al
c0013c02:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c08:	83 e0 ef             	and    eax,0xffffffef
c0013c0b:	09 d0                	or     eax,edx
c0013c0d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c13:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0013c1a:	e8 37 fb ff ff       	call   c0013756 <CPU::cpuidCheckEDX(unsigned int)>
c0013c1f:	83 e0 01             	and    eax,0x1
c0013c22:	c1 e0 05             	shl    eax,0x5
c0013c25:	88 c2                	mov    dl,al
c0013c27:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013c2d:	83 e0 df             	and    eax,0xffffffdf
c0013c30:	09 d0                	or     eax,edx
c0013c32:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013c38:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0013c3f:	e8 12 fb ff ff       	call   c0013756 <CPU::cpuidCheckEDX(unsigned int)>
c0013c44:	83 e0 01             	and    eax,0x1
c0013c47:	8d 14 00             	lea    edx,[eax+eax*1]
c0013c4a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013c50:	83 e0 fd             	and    eax,0xfffffffd
c0013c53:	09 d0                	or     eax,edx
c0013c55:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013c5b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013c62:	e8 ef fa ff ff       	call   c0013756 <CPU::cpuidCheckEDX(unsigned int)>
c0013c67:	83 e0 01             	and    eax,0x1
c0013c6a:	c1 e0 06             	shl    eax,0x6
c0013c6d:	88 c2                	mov    dl,al
c0013c6f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013c75:	83 e0 bf             	and    eax,0xffffffbf
c0013c78:	09 d0                	or     eax,edx
c0013c7a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013c80:	58                   	pop    eax
c0013c81:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013c85:	50                   	push   eax
c0013c86:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013c8a:	50                   	push   eax
c0013c8b:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013c8f:	56                   	push   esi
c0013c90:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013c94:	50                   	push   eax
c0013c95:	6a 00                	push   0x0
c0013c97:	e8 36 fa ff ff       	call   c00136d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013c9c:	b8 04 00 00 00       	mov    eax,0x4
c0013ca1:	89 c1                	mov    ecx,eax
c0013ca3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ca5:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0013cab:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013caf:	89 c1                	mov    ecx,eax
c0013cb1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013cb3:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0013cb9:	8d 74 24 38          	lea    esi,[esp+0x38]
c0013cbd:	89 c1                	mov    ecx,eax
c0013cbf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013cc1:	83 c4 18             	add    esp,0x18
c0013cc4:	68 bc 63 02 c0       	push   0xc00263bc
c0013cc9:	55                   	push   ebp
c0013cca:	e8 0d cb fe ff       	call   c00007dc <strcmp>
c0013ccf:	83 c4 10             	add    esp,0x10
c0013cd2:	85 c0                	test   eax,eax
c0013cd4:	75 0f                	jne    c0013ce5 <CPU::detectFeatures()+0x1a9>
c0013cd6:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013ce0:	e9 22 02 00 00       	jmp    c0013f07 <CPU::detectFeatures()+0x3cb>
c0013ce5:	50                   	push   eax
c0013ce6:	50                   	push   eax
c0013ce7:	68 c9 63 02 c0       	push   0xc00263c9
c0013cec:	55                   	push   ebp
c0013ced:	e8 ea ca fe ff       	call   c00007dc <strcmp>
c0013cf2:	83 c4 10             	add    esp,0x10
c0013cf5:	85 c0                	test   eax,eax
c0013cf7:	74 dd                	je     c0013cd6 <CPU::detectFeatures()+0x19a>
c0013cf9:	50                   	push   eax
c0013cfa:	50                   	push   eax
c0013cfb:	68 d6 63 02 c0       	push   0xc00263d6
c0013d00:	55                   	push   ebp
c0013d01:	e8 d6 ca fe ff       	call   c00007dc <strcmp>
c0013d06:	83 c4 10             	add    esp,0x10
c0013d09:	85 c0                	test   eax,eax
c0013d0b:	74 2a                	je     c0013d37 <CPU::detectFeatures()+0x1fb>
c0013d0d:	50                   	push   eax
c0013d0e:	50                   	push   eax
c0013d0f:	68 e3 63 02 c0       	push   0xc00263e3
c0013d14:	55                   	push   ebp
c0013d15:	e8 c2 ca fe ff       	call   c00007dc <strcmp>
c0013d1a:	83 c4 10             	add    esp,0x10
c0013d1d:	85 c0                	test   eax,eax
c0013d1f:	74 16                	je     c0013d37 <CPU::detectFeatures()+0x1fb>
c0013d21:	50                   	push   eax
c0013d22:	50                   	push   eax
c0013d23:	68 f0 63 02 c0       	push   0xc00263f0
c0013d28:	55                   	push   ebp
c0013d29:	e8 ae ca fe ff       	call   c00007dc <strcmp>
c0013d2e:	83 c4 10             	add    esp,0x10
c0013d31:	85 c0                	test   eax,eax
c0013d33:	74 48                	je     c0013d7d <CPU::detectFeatures()+0x241>
c0013d35:	eb 0f                	jmp    c0013d46 <CPU::detectFeatures()+0x20a>
c0013d37:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0013d41:	e9 c1 01 00 00       	jmp    c0013f07 <CPU::detectFeatures()+0x3cb>
c0013d46:	50                   	push   eax
c0013d47:	50                   	push   eax
c0013d48:	68 fd 63 02 c0       	push   0xc00263fd
c0013d4d:	55                   	push   ebp
c0013d4e:	e8 89 ca fe ff       	call   c00007dc <strcmp>
c0013d53:	83 c4 10             	add    esp,0x10
c0013d56:	85 c0                	test   eax,eax
c0013d58:	74 23                	je     c0013d7d <CPU::detectFeatures()+0x241>
c0013d5a:	57                   	push   edi
c0013d5b:	57                   	push   edi
c0013d5c:	68 0a 64 02 c0       	push   0xc002640a
c0013d61:	55                   	push   ebp
c0013d62:	e8 75 ca fe ff       	call   c00007dc <strcmp>
c0013d67:	83 c4 10             	add    esp,0x10
c0013d6a:	85 c0                	test   eax,eax
c0013d6c:	75 1e                	jne    c0013d8c <CPU::detectFeatures()+0x250>
c0013d6e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013d78:	e9 8a 01 00 00       	jmp    c0013f07 <CPU::detectFeatures()+0x3cb>
c0013d7d:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013d87:	e9 7b 01 00 00       	jmp    c0013f07 <CPU::detectFeatures()+0x3cb>
c0013d8c:	56                   	push   esi
c0013d8d:	56                   	push   esi
c0013d8e:	68 17 64 02 c0       	push   0xc0026417
c0013d93:	55                   	push   ebp
c0013d94:	e8 43 ca fe ff       	call   c00007dc <strcmp>
c0013d99:	83 c4 10             	add    esp,0x10
c0013d9c:	85 c0                	test   eax,eax
c0013d9e:	75 0f                	jne    c0013daf <CPU::detectFeatures()+0x273>
c0013da0:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013daa:	e9 58 01 00 00       	jmp    c0013f07 <CPU::detectFeatures()+0x3cb>
c0013daf:	51                   	push   ecx
c0013db0:	51                   	push   ecx
c0013db1:	68 d6 63 02 c0       	push   0xc00263d6
c0013db6:	55                   	push   ebp
c0013db7:	e8 20 ca fe ff       	call   c00007dc <strcmp>
c0013dbc:	83 c4 10             	add    esp,0x10
c0013dbf:	85 c0                	test   eax,eax
c0013dc1:	75 0f                	jne    c0013dd2 <CPU::detectFeatures()+0x296>
c0013dc3:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0013dcd:	e9 35 01 00 00       	jmp    c0013f07 <CPU::detectFeatures()+0x3cb>
c0013dd2:	52                   	push   edx
c0013dd3:	52                   	push   edx
c0013dd4:	68 24 64 02 c0       	push   0xc0026424
c0013dd9:	55                   	push   ebp
c0013dda:	e8 fd c9 fe ff       	call   c00007dc <strcmp>
c0013ddf:	83 c4 10             	add    esp,0x10
c0013de2:	85 c0                	test   eax,eax
c0013de4:	75 0f                	jne    c0013df5 <CPU::detectFeatures()+0x2b9>
c0013de6:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0013df0:	e9 12 01 00 00       	jmp    c0013f07 <CPU::detectFeatures()+0x3cb>
c0013df5:	50                   	push   eax
c0013df6:	50                   	push   eax
c0013df7:	68 31 64 02 c0       	push   0xc0026431
c0013dfc:	55                   	push   ebp
c0013dfd:	e8 da c9 fe ff       	call   c00007dc <strcmp>
c0013e02:	83 c4 10             	add    esp,0x10
c0013e05:	85 c0                	test   eax,eax
c0013e07:	75 0f                	jne    c0013e18 <CPU::detectFeatures()+0x2dc>
c0013e09:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013e13:	e9 ef 00 00 00       	jmp    c0013f07 <CPU::detectFeatures()+0x3cb>
c0013e18:	50                   	push   eax
c0013e19:	50                   	push   eax
c0013e1a:	68 3e 64 02 c0       	push   0xc002643e
c0013e1f:	55                   	push   ebp
c0013e20:	e8 b7 c9 fe ff       	call   c00007dc <strcmp>
c0013e25:	83 c4 10             	add    esp,0x10
c0013e28:	85 c0                	test   eax,eax
c0013e2a:	75 0f                	jne    c0013e3b <CPU::detectFeatures()+0x2ff>
c0013e2c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013e36:	e9 cc 00 00 00       	jmp    c0013f07 <CPU::detectFeatures()+0x3cb>
c0013e3b:	50                   	push   eax
c0013e3c:	50                   	push   eax
c0013e3d:	68 4b 64 02 c0       	push   0xc002644b
c0013e42:	55                   	push   ebp
c0013e43:	e8 94 c9 fe ff       	call   c00007dc <strcmp>
c0013e48:	83 c4 10             	add    esp,0x10
c0013e4b:	85 c0                	test   eax,eax
c0013e4d:	75 0f                	jne    c0013e5e <CPU::detectFeatures()+0x322>
c0013e4f:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013e59:	e9 a9 00 00 00       	jmp    c0013f07 <CPU::detectFeatures()+0x3cb>
c0013e5e:	50                   	push   eax
c0013e5f:	50                   	push   eax
c0013e60:	68 58 64 02 c0       	push   0xc0026458
c0013e65:	55                   	push   ebp
c0013e66:	e8 71 c9 fe ff       	call   c00007dc <strcmp>
c0013e6b:	83 c4 10             	add    esp,0x10
c0013e6e:	85 c0                	test   eax,eax
c0013e70:	75 0f                	jne    c0013e81 <CPU::detectFeatures()+0x345>
c0013e72:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0013e7c:	e9 86 00 00 00       	jmp    c0013f07 <CPU::detectFeatures()+0x3cb>
c0013e81:	50                   	push   eax
c0013e82:	50                   	push   eax
c0013e83:	68 65 64 02 c0       	push   0xc0026465
c0013e88:	55                   	push   ebp
c0013e89:	e8 4e c9 fe ff       	call   c00007dc <strcmp>
c0013e8e:	83 c4 10             	add    esp,0x10
c0013e91:	85 c0                	test   eax,eax
c0013e93:	75 0c                	jne    c0013ea1 <CPU::detectFeatures()+0x365>
c0013e95:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013e9f:	eb 66                	jmp    c0013f07 <CPU::detectFeatures()+0x3cb>
c0013ea1:	50                   	push   eax
c0013ea2:	50                   	push   eax
c0013ea3:	68 72 64 02 c0       	push   0xc0026472
c0013ea8:	55                   	push   ebp
c0013ea9:	e8 2e c9 fe ff       	call   c00007dc <strcmp>
c0013eae:	83 c4 10             	add    esp,0x10
c0013eb1:	85 c0                	test   eax,eax
c0013eb3:	75 0c                	jne    c0013ec1 <CPU::detectFeatures()+0x385>
c0013eb5:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013ebf:	eb 46                	jmp    c0013f07 <CPU::detectFeatures()+0x3cb>
c0013ec1:	57                   	push   edi
c0013ec2:	57                   	push   edi
c0013ec3:	68 7f 64 02 c0       	push   0xc002647f
c0013ec8:	55                   	push   ebp
c0013ec9:	e8 0e c9 fe ff       	call   c00007dc <strcmp>
c0013ece:	83 c4 10             	add    esp,0x10
c0013ed1:	85 c0                	test   eax,eax
c0013ed3:	74 e0                	je     c0013eb5 <CPU::detectFeatures()+0x379>
c0013ed5:	56                   	push   esi
c0013ed6:	56                   	push   esi
c0013ed7:	68 8c 64 02 c0       	push   0xc002648c
c0013edc:	55                   	push   ebp
c0013edd:	e8 fa c8 fe ff       	call   c00007dc <strcmp>
c0013ee2:	83 c4 10             	add    esp,0x10
c0013ee5:	85 c0                	test   eax,eax
c0013ee7:	74 cc                	je     c0013eb5 <CPU::detectFeatures()+0x379>
c0013ee9:	51                   	push   ecx
c0013eea:	51                   	push   ecx
c0013eeb:	68 99 64 02 c0       	push   0xc0026499
c0013ef0:	55                   	push   ebp
c0013ef1:	e8 e6 c8 fe ff       	call   c00007dc <strcmp>
c0013ef6:	83 c4 10             	add    esp,0x10
c0013ef9:	85 c0                	test   eax,eax
c0013efb:	74 b8                	je     c0013eb5 <CPU::detectFeatures()+0x379>
c0013efd:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0013f07:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0013f0c:	0f 86 be 00 00 00    	jbe    c0013fd0 <CPU::detectFeatures()+0x494>
c0013f12:	83 ec 0c             	sub    esp,0xc
c0013f15:	68 80 00 00 00       	push   0x80
c0013f1a:	e8 93 f8 ff ff       	call   c00137b2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013f1f:	83 e0 01             	and    eax,0x1
c0013f22:	c1 e0 06             	shl    eax,0x6
c0013f25:	88 c2                	mov    dl,al
c0013f27:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013f2d:	83 e0 bf             	and    eax,0xffffffbf
c0013f30:	09 d0                	or     eax,edx
c0013f32:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013f38:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0013f3f:	e8 6e f8 ff ff       	call   c00137b2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013f44:	83 e0 01             	and    eax,0x1
c0013f47:	c1 e0 04             	shl    eax,0x4
c0013f4a:	88 c2                	mov    dl,al
c0013f4c:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013f52:	83 e0 ef             	and    eax,0xffffffef
c0013f55:	09 d0                	or     eax,edx
c0013f57:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013f5d:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013f64:	e8 49 f8 ff ff       	call   c00137b2 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013f69:	c1 e0 07             	shl    eax,0x7
c0013f6c:	88 c2                	mov    dl,al
c0013f6e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013f74:	83 e0 7f             	and    eax,0x7f
c0013f77:	09 d0                	or     eax,edx
c0013f79:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013f7f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013f86:	e8 55 f8 ff ff       	call   c00137e0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013f8b:	83 e0 01             	and    eax,0x1
c0013f8e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013f95:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013f9b:	83 e0 f7             	and    eax,0xfffffff7
c0013f9e:	09 d0                	or     eax,edx
c0013fa0:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013fa6:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0013fad:	e8 2e f8 ff ff       	call   c00137e0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013fb2:	83 c4 10             	add    esp,0x10
c0013fb5:	83 e0 01             	and    eax,0x1
c0013fb8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013fbf:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013fc5:	83 e0 fb             	and    eax,0xfffffffb
c0013fc8:	09 d0                	or     eax,edx
c0013fca:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013fd0:	83 ec 0c             	sub    esp,0xc
c0013fd3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013fd7:	50                   	push   eax
c0013fd8:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013fdc:	50                   	push   eax
c0013fdd:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013fe1:	56                   	push   esi
c0013fe2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013fe6:	50                   	push   eax
c0013fe7:	6a 01                	push   0x1
c0013fe9:	e8 e4 f6 ff ff       	call   c00136d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013fee:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013ff2:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013ff8:	88 ca                	mov    dl,cl
c0013ffa:	83 e0 f0             	and    eax,0xfffffff0
c0013ffd:	83 e2 0f             	and    edx,0xf
c0014000:	09 d0                	or     eax,edx
c0014002:	88 ca                	mov    dl,cl
c0014004:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001400a:	c0 ea 04             	shr    dl,0x4
c001400d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0014011:	0f b6 c2             	movzx  eax,dl
c0014014:	83 c4 20             	add    esp,0x20
c0014017:	c1 e0 06             	shl    eax,0x6
c001401a:	89 c7                	mov    edi,eax
c001401c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014022:	66 25 3f c0          	and    ax,0xc03f
c0014026:	09 f8                	or     eax,edi
c0014028:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001402f:	89 c8                	mov    eax,ecx
c0014031:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0014038:	c1 e8 08             	shr    eax,0x8
c001403b:	83 e5 3f             	and    ebp,0x3f
c001403e:	83 e0 0f             	and    eax,0xf
c0014041:	89 c7                	mov    edi,eax
c0014043:	c1 e7 06             	shl    edi,0x6
c0014046:	09 ef                	or     edi,ebp
c0014048:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c001404f:	89 fa                	mov    edx,edi
c0014051:	83 e5 c0             	and    ebp,0xffffffc0
c0014054:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001405a:	88 c2                	mov    dl,al
c001405c:	c0 ea 02             	shr    dl,0x2
c001405f:	89 d7                	mov    edi,edx
c0014061:	09 ef                	or     edi,ebp
c0014063:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014069:	89 fa                	mov    edx,edi
c001406b:	83 e5 cf             	and    ebp,0xffffffcf
c001406e:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0014074:	89 cf                	mov    edi,ecx
c0014076:	c1 ef 0c             	shr    edi,0xc
c0014079:	83 e7 03             	and    edi,0x3
c001407c:	c1 e7 04             	shl    edi,0x4
c001407f:	09 ef                	or     edi,ebp
c0014081:	3c 06                	cmp    al,0x6
c0014083:	89 fa                	mov    edx,edi
c0014085:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001408b:	74 04                	je     c0014091 <CPU::detectFeatures()+0x555>
c001408d:	3c 0f                	cmp    al,0xf
c001408f:	75 5c                	jne    c00140ed <CPU::detectFeatures()+0x5b1>
c0014091:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0014095:	89 cf                	mov    edi,ecx
c0014097:	c1 ef 10             	shr    edi,0x10
c001409a:	c1 e7 04             	shl    edi,0x4
c001409d:	09 fa                	or     edx,edi
c001409f:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00140a5:	0f b6 d2             	movzx  edx,dl
c00140a8:	66 81 e7 3f c0       	and    di,0xc03f
c00140ad:	c1 e2 06             	shl    edx,0x6
c00140b0:	09 fa                	or     edx,edi
c00140b2:	3c 0f                	cmp    al,0xf
c00140b4:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00140bb:	75 30                	jne    c00140ed <CPU::detectFeatures()+0x5b1>
c00140bd:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00140c3:	c1 e9 14             	shr    ecx,0x14
c00140c6:	83 e0 3f             	and    eax,0x3f
c00140c9:	83 c1 0f             	add    ecx,0xf
c00140cc:	88 ca                	mov    dl,cl
c00140ce:	c0 e9 02             	shr    cl,0x2
c00140d1:	c1 e2 06             	shl    edx,0x6
c00140d4:	09 d0                	or     eax,edx
c00140d6:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00140dc:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00140e2:	83 e0 c0             	and    eax,0xffffffc0
c00140e5:	09 c1                	or     ecx,eax
c00140e7:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00140ed:	83 ec 0c             	sub    esp,0xc
c00140f0:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00140f7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00140fb:	50                   	push   eax
c00140fc:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014100:	55                   	push   ebp
c0014101:	56                   	push   esi
c0014102:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0014106:	57                   	push   edi
c0014107:	68 00 00 00 80       	push   0x80000000
c001410c:	e8 c1 f5 ff ff       	call   c00136d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014111:	83 c4 20             	add    esp,0x20
c0014114:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001411c:	76 22                	jbe    c0014140 <CPU::detectFeatures()+0x604>
c001411e:	83 ec 0c             	sub    esp,0xc
c0014121:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014125:	50                   	push   eax
c0014126:	55                   	push   ebp
c0014127:	56                   	push   esi
c0014128:	57                   	push   edi
c0014129:	68 01 00 00 80       	push   0x80000001
c001412e:	e8 9f f5 ff ff       	call   c00136d2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014133:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001413d:	83 c4 20             	add    esp,0x20
c0014140:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0014146:	83 f8 01             	cmp    eax,0x1
c0014149:	75 6f                	jne    c00141ba <CPU::detectFeatures()+0x67e>
c001414b:	51                   	push   ecx
c001414c:	51                   	push   ecx
c001414d:	68 a5 64 02 c0       	push   0xc00264a5
c0014152:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014156:	56                   	push   esi
c0014157:	e8 f4 c5 fe ff       	call   c0000750 <strcpy>
c001415c:	5f                   	pop    edi
c001415d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014163:	5d                   	pop    ebp
c0014164:	66 c1 e8 06          	shr    ax,0x6
c0014168:	0f b6 c0             	movzx  eax,al
c001416b:	50                   	push   eax
c001416c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014172:	c1 e8 0e             	shr    eax,0xe
c0014175:	0f b6 c0             	movzx  eax,al
c0014178:	50                   	push   eax
c0014179:	e8 fe f1 ff ff       	call   c001337c <CPU::lookupIntelName(unsigned char, unsigned char)>
c001417e:	5a                   	pop    edx
c001417f:	59                   	pop    ecx
c0014180:	50                   	push   eax
c0014181:	56                   	push   esi
c0014182:	e8 09 c7 fe ff       	call   c0000890 <strcat>
c0014187:	5f                   	pop    edi
c0014188:	5d                   	pop    ebp
c0014189:	56                   	push   esi
c001418a:	53                   	push   ebx
c001418b:	e8 38 a6 ff ff       	call   c000e7c8 <Device::setName(char const*)>
c0014190:	58                   	pop    eax
c0014191:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014197:	5a                   	pop    edx
c0014198:	68 ac 64 02 c0       	push   0xc00264ac
c001419d:	50                   	push   eax
c001419e:	e8 39 c6 fe ff       	call   c00007dc <strcmp>
c00141a3:	83 c4 10             	add    esp,0x10
c00141a6:	85 c0                	test   eax,eax
c00141a8:	0f 85 71 03 00 00    	jne    c001451f <CPU::detectFeatures()+0x9e3>
c00141ae:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00141b5:	e9 65 03 00 00       	jmp    c001451f <CPU::detectFeatures()+0x9e3>
c00141ba:	83 f8 02             	cmp    eax,0x2
c00141bd:	0f 85 b5 00 00 00    	jne    c0014278 <CPU::detectFeatures()+0x73c>
c00141c3:	57                   	push   edi
c00141c4:	57                   	push   edi
c00141c5:	68 be 64 02 c0       	push   0xc00264be
c00141ca:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00141ce:	56                   	push   esi
c00141cf:	e8 7c c5 fe ff       	call   c0000750 <strcpy>
c00141d4:	5d                   	pop    ebp
c00141d5:	58                   	pop    eax
c00141d6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00141dc:	66 c1 e8 06          	shr    ax,0x6
c00141e0:	0f b6 c0             	movzx  eax,al
c00141e3:	50                   	push   eax
c00141e4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00141ea:	c1 e8 0e             	shr    eax,0xe
c00141ed:	0f b6 c0             	movzx  eax,al
c00141f0:	50                   	push   eax
c00141f1:	e8 f2 ef ff ff       	call   c00131e8 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00141f6:	5a                   	pop    edx
c00141f7:	59                   	pop    ecx
c00141f8:	50                   	push   eax
c00141f9:	56                   	push   esi
c00141fa:	e8 91 c6 fe ff       	call   c0000890 <strcat>
c00141ff:	5f                   	pop    edi
c0014200:	5d                   	pop    ebp
c0014201:	56                   	push   esi
c0014202:	53                   	push   ebx
c0014203:	e8 c0 a5 ff ff       	call   c000e7c8 <Device::setName(char const*)>
c0014208:	58                   	pop    eax
c0014209:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001420f:	5a                   	pop    edx
c0014210:	68 c3 64 02 c0       	push   0xc00264c3
c0014215:	50                   	push   eax
c0014216:	e8 c1 c5 fe ff       	call   c00007dc <strcmp>
c001421b:	83 c4 10             	add    esp,0x10
c001421e:	85 c0                	test   eax,eax
c0014220:	75 20                	jne    c0014242 <CPU::detectFeatures()+0x706>
c0014222:	8b 15 88 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c88
c0014228:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001422e:	a8 01                	test   al,0x1
c0014230:	74 10                	je     c0014242 <CPU::detectFeatures()+0x706>
c0014232:	83 e0 fe             	and    eax,0xfffffffe
c0014235:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001423b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0014242:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014248:	c1 e8 0e             	shr    eax,0xe
c001424b:	3c 05                	cmp    al,0x5
c001424d:	0f 85 cc 02 00 00    	jne    c001451f <CPU::detectFeatures()+0x9e3>
c0014253:	56                   	push   esi
c0014254:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001425a:	83 e0 0f             	and    eax,0xf
c001425d:	50                   	push   eax
c001425e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014264:	66 c1 e8 06          	shr    ax,0x6
c0014268:	0f b6 c0             	movzx  eax,al
c001426b:	50                   	push   eax
c001426c:	6a 05                	push   0x5
c001426e:	e8 eb f3 ff ff       	call   c001365e <CPU::AMD_K6_writeback(int, int, int)>
c0014273:	e9 1f 02 00 00       	jmp    c0014497 <CPU::detectFeatures()+0x95b>
c0014278:	8d 50 fd             	lea    edx,[eax-0x3]
c001427b:	83 fa 01             	cmp    edx,0x1
c001427e:	76 09                	jbe    c0014289 <CPU::detectFeatures()+0x74d>
c0014280:	83 f8 06             	cmp    eax,0x6
c0014283:	0f 85 91 01 00 00    	jne    c001441a <CPU::detectFeatures()+0x8de>
c0014289:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001428f:	c1 ea 0e             	shr    edx,0xe
c0014292:	80 fa 05             	cmp    dl,0x5
c0014295:	75 7b                	jne    c0014312 <CPU::detectFeatures()+0x7d6>
c0014297:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001429d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00142a2:	66 81 fa 00 01       	cmp    dx,0x100
c00142a7:	75 0c                	jne    c00142b5 <CPU::detectFeatures()+0x779>
c00142a9:	51                   	push   ecx
c00142aa:	51                   	push   ecx
c00142ab:	68 ca 64 02 c0       	push   0xc00264ca
c00142b0:	e9 dc 01 00 00       	jmp    c0014491 <CPU::detectFeatures()+0x955>
c00142b5:	66 81 fa 00 02       	cmp    dx,0x200
c00142ba:	75 0c                	jne    c00142c8 <CPU::detectFeatures()+0x78c>
c00142bc:	52                   	push   edx
c00142bd:	52                   	push   edx
c00142be:	68 dd 64 02 c0       	push   0xc00264dd
c00142c3:	e9 c9 01 00 00       	jmp    c0014491 <CPU::detectFeatures()+0x955>
c00142c8:	66 81 fa 40 02       	cmp    dx,0x240
c00142cd:	75 0c                	jne    c00142db <CPU::detectFeatures()+0x79f>
c00142cf:	50                   	push   eax
c00142d0:	50                   	push   eax
c00142d1:	68 ef 64 02 c0       	push   0xc00264ef
c00142d6:	e9 b6 01 00 00       	jmp    c0014491 <CPU::detectFeatures()+0x955>
c00142db:	83 f8 06             	cmp    eax,0x6
c00142de:	75 0c                	jne    c00142ec <CPU::detectFeatures()+0x7b0>
c00142e0:	50                   	push   eax
c00142e1:	50                   	push   eax
c00142e2:	68 01 65 02 c0       	push   0xc0026501
c00142e7:	e9 a5 01 00 00       	jmp    c0014491 <CPU::detectFeatures()+0x955>
c00142ec:	83 f8 04             	cmp    eax,0x4
c00142ef:	75 0c                	jne    c00142fd <CPU::detectFeatures()+0x7c1>
c00142f1:	50                   	push   eax
c00142f2:	50                   	push   eax
c00142f3:	68 0d 65 02 c0       	push   0xc002650d
c00142f8:	e9 94 01 00 00       	jmp    c0014491 <CPU::detectFeatures()+0x955>
c00142fd:	83 f8 03             	cmp    eax,0x3
c0014300:	0f 85 19 02 00 00    	jne    c001451f <CPU::detectFeatures()+0x9e3>
c0014306:	50                   	push   eax
c0014307:	50                   	push   eax
c0014308:	68 15 65 02 c0       	push   0xc0026515
c001430d:	e9 7f 01 00 00       	jmp    c0014491 <CPU::detectFeatures()+0x955>
c0014312:	80 fa 06             	cmp    dl,0x6
c0014315:	0f 85 db 00 00 00    	jne    c00143f6 <CPU::detectFeatures()+0x8ba>
c001431b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014321:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014326:	66 81 fa 80 01       	cmp    dx,0x180
c001432b:	75 0c                	jne    c0014339 <CPU::detectFeatures()+0x7fd>
c001432d:	50                   	push   eax
c001432e:	50                   	push   eax
c001432f:	68 20 65 02 c0       	push   0xc0026520
c0014334:	e9 58 01 00 00       	jmp    c0014491 <CPU::detectFeatures()+0x955>
c0014339:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001433f:	66 f7 c1 80 ff       	test   cx,0xff80
c0014344:	75 0c                	jne    c0014352 <CPU::detectFeatures()+0x816>
c0014346:	50                   	push   eax
c0014347:	50                   	push   eax
c0014348:	68 30 65 02 c0       	push   0xc0026530
c001434d:	e9 3f 01 00 00       	jmp    c0014491 <CPU::detectFeatures()+0x955>
c0014352:	66 81 fa 40 02       	cmp    dx,0x240
c0014357:	75 0c                	jne    c0014365 <CPU::detectFeatures()+0x829>
c0014359:	55                   	push   ebp
c001435a:	55                   	push   ebp
c001435b:	68 37 65 02 c0       	push   0xc0026537
c0014360:	e9 2c 01 00 00       	jmp    c0014491 <CPU::detectFeatures()+0x955>
c0014365:	66 81 fa 80 02       	cmp    dx,0x280
c001436a:	75 0c                	jne    c0014378 <CPU::detectFeatures()+0x83c>
c001436c:	57                   	push   edi
c001436d:	57                   	push   edi
c001436e:	68 40 65 02 c0       	push   0xc0026540
c0014373:	e9 19 01 00 00       	jmp    c0014491 <CPU::detectFeatures()+0x955>
c0014378:	66 81 fa 40 03       	cmp    dx,0x340
c001437d:	74 ed                	je     c001436c <CPU::detectFeatures()+0x830>
c001437f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0014384:	75 0c                	jne    c0014392 <CPU::detectFeatures()+0x856>
c0014386:	56                   	push   esi
c0014387:	56                   	push   esi
c0014388:	68 47 65 02 c0       	push   0xc0026547
c001438d:	e9 ff 00 00 00       	jmp    c0014491 <CPU::detectFeatures()+0x955>
c0014392:	83 f8 06             	cmp    eax,0x6
c0014395:	0f 84 45 ff ff ff    	je     c00142e0 <CPU::detectFeatures()+0x7a4>
c001439b:	83 f8 04             	cmp    eax,0x4
c001439e:	0f 84 4d ff ff ff    	je     c00142f1 <CPU::detectFeatures()+0x7b5>
c00143a4:	83 f8 03             	cmp    eax,0x3
c00143a7:	0f 85 72 01 00 00    	jne    c001451f <CPU::detectFeatures()+0x9e3>
c00143ad:	51                   	push   ecx
c00143ae:	51                   	push   ecx
c00143af:	68 50 65 02 c0       	push   0xc0026550
c00143b4:	53                   	push   ebx
c00143b5:	e8 0e a4 ff ff       	call   c000e7c8 <Device::setName(char const*)>
c00143ba:	b1 c1                	mov    cl,0xc1
c00143bc:	88 c8                	mov    al,cl
c00143be:	e6 22                	out    0x22,al
c00143c0:	e4 23                	in     al,0x23
c00143c2:	88 c2                	mov    dl,al
c00143c4:	88 c8                	mov    al,cl
c00143c6:	e6 22                	out    0x22,al
c00143c8:	88 d0                	mov    al,dl
c00143ca:	83 c8 10             	or     eax,0x10
c00143cd:	e6 23                	out    0x23,al
c00143cf:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00143d6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00143d9:	89 d0                	mov    eax,edx
c00143db:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00143e1:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00143e5:	40                   	inc    eax
c00143e6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00143ec:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00143f1:	e9 a1 00 00 00       	jmp    c0014497 <CPU::detectFeatures()+0x95b>
c00143f6:	83 f8 06             	cmp    eax,0x6
c00143f9:	0f 84 e1 fe ff ff    	je     c00142e0 <CPU::detectFeatures()+0x7a4>
c00143ff:	83 f8 04             	cmp    eax,0x4
c0014402:	0f 84 e9 fe ff ff    	je     c00142f1 <CPU::detectFeatures()+0x7b5>
c0014408:	83 f8 03             	cmp    eax,0x3
c001440b:	0f 85 0e 01 00 00    	jne    c001451f <CPU::detectFeatures()+0x9e3>
c0014411:	52                   	push   edx
c0014412:	52                   	push   edx
c0014413:	68 5b 65 02 c0       	push   0xc002655b
c0014418:	eb 77                	jmp    c0014491 <CPU::detectFeatures()+0x955>
c001441a:	83 f8 07             	cmp    eax,0x7
c001441d:	75 09                	jne    c0014428 <CPU::detectFeatures()+0x8ec>
c001441f:	50                   	push   eax
c0014420:	50                   	push   eax
c0014421:	68 65 65 02 c0       	push   0xc0026565
c0014426:	eb 69                	jmp    c0014491 <CPU::detectFeatures()+0x955>
c0014428:	83 f8 0a             	cmp    eax,0xa
c001442b:	75 09                	jne    c0014436 <CPU::detectFeatures()+0x8fa>
c001442d:	50                   	push   eax
c001442e:	50                   	push   eax
c001442f:	68 70 65 02 c0       	push   0xc0026570
c0014434:	eb 5b                	jmp    c0014491 <CPU::detectFeatures()+0x955>
c0014436:	83 f8 0b             	cmp    eax,0xb
c0014439:	75 09                	jne    c0014444 <CPU::detectFeatures()+0x908>
c001443b:	50                   	push   eax
c001443c:	50                   	push   eax
c001443d:	68 78 65 02 c0       	push   0xc0026578
c0014442:	eb 4d                	jmp    c0014491 <CPU::detectFeatures()+0x955>
c0014444:	83 f8 08             	cmp    eax,0x8
c0014447:	75 09                	jne    c0014452 <CPU::detectFeatures()+0x916>
c0014449:	50                   	push   eax
c001444a:	50                   	push   eax
c001444b:	68 81 65 02 c0       	push   0xc0026581
c0014450:	eb 3f                	jmp    c0014491 <CPU::detectFeatures()+0x955>
c0014452:	83 f8 09             	cmp    eax,0x9
c0014455:	75 09                	jne    c0014460 <CPU::detectFeatures()+0x924>
c0014457:	50                   	push   eax
c0014458:	50                   	push   eax
c0014459:	68 89 65 02 c0       	push   0xc0026589
c001445e:	eb 31                	jmp    c0014491 <CPU::detectFeatures()+0x955>
c0014460:	83 f8 05             	cmp    eax,0x5
c0014463:	75 09                	jne    c001446e <CPU::detectFeatures()+0x932>
c0014465:	50                   	push   eax
c0014466:	50                   	push   eax
c0014467:	68 91 65 02 c0       	push   0xc0026591
c001446c:	eb 23                	jmp    c0014491 <CPU::detectFeatures()+0x955>
c001446e:	83 f8 0c             	cmp    eax,0xc
c0014471:	75 09                	jne    c001447c <CPU::detectFeatures()+0x940>
c0014473:	55                   	push   ebp
c0014474:	55                   	push   ebp
c0014475:	68 9f 65 02 c0       	push   0xc002659f
c001447a:	eb 15                	jmp    c0014491 <CPU::detectFeatures()+0x955>
c001447c:	83 f8 0d             	cmp    eax,0xd
c001447f:	75 09                	jne    c001448a <CPU::detectFeatures()+0x94e>
c0014481:	57                   	push   edi
c0014482:	57                   	push   edi
c0014483:	68 aa 65 02 c0       	push   0xc00265aa
c0014488:	eb 07                	jmp    c0014491 <CPU::detectFeatures()+0x955>
c001448a:	56                   	push   esi
c001448b:	56                   	push   esi
c001448c:	68 be 65 02 c0       	push   0xc00265be
c0014491:	53                   	push   ebx
c0014492:	e8 31 a3 ff ff       	call   c000e7c8 <Device::setName(char const*)>
c0014497:	83 c4 10             	add    esp,0x10
c001449a:	e9 80 00 00 00       	jmp    c001451f <CPU::detectFeatures()+0x9e3>
c001449f:	51                   	push   ecx
c00144a0:	51                   	push   ecx
c00144a1:	68 0a 64 02 c0       	push   0xc002640a
c00144a6:	55                   	push   ebp
c00144a7:	e8 a4 c2 fe ff       	call   c0000750 <strcpy>
c00144ac:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00144b6:	e8 28 bd fe ff       	call   c00001e3 <is486>
c00144bb:	83 c4 10             	add    esp,0x10
c00144be:	85 c0                	test   eax,eax
c00144c0:	74 2b                	je     c00144ed <CPU::detectFeatures()+0x9b1>
c00144c2:	52                   	push   edx
c00144c3:	52                   	push   edx
c00144c4:	68 ca 65 02 c0       	push   0xc00265ca
c00144c9:	53                   	push   ebx
c00144ca:	e8 f9 a2 ff ff       	call   c000e7c8 <Device::setName(char const*)>
c00144cf:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00144d6:	0f 20 c0             	mov    eax,cr0
c00144d9:	83 e0 14             	and    eax,0x14
c00144dc:	83 c4 10             	add    esp,0x10
c00144df:	83 f8 04             	cmp    eax,0x4
c00144e2:	75 1f                	jne    c0014503 <CPU::detectFeatures()+0x9c7>
c00144e4:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00144eb:	eb 32                	jmp    c001451f <CPU::detectFeatures()+0x9e3>
c00144ed:	50                   	push   eax
c00144ee:	50                   	push   eax
c00144ef:	68 d5 65 02 c0       	push   0xc00265d5
c00144f4:	53                   	push   ebx
c00144f5:	e8 ce a2 ff ff       	call   c000e7c8 <Device::setName(char const*)>
c00144fa:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0014501:	eb d3                	jmp    c00144d6 <CPU::detectFeatures()+0x99a>
c0014503:	e8 b6 bc fe ff       	call   c00001be <hasLegacyFPU>
c0014508:	83 e0 01             	and    eax,0x1
c001450b:	8d 14 00             	lea    edx,[eax+eax*1]
c001450e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014514:	83 e0 fd             	and    eax,0xfffffffd
c0014517:	09 d0                	or     eax,edx
c0014519:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001451f:	f6 83 92 11 00 00 02 	test   BYTE PTR [ebx+0x1192],0x2
c0014526:	74 0e                	je     c0014536 <CPU::detectFeatures()+0x9fa>
c0014528:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c001452d:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c0014534:	eb 20                	jmp    c0014556 <CPU::detectFeatures()+0xa1a>
c0014536:	e8 83 bc fe ff       	call   c00001be <hasLegacyFPU>
c001453b:	83 e0 01             	and    eax,0x1
c001453e:	8d 14 00             	lea    edx,[eax+eax*1]
c0014541:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014547:	83 e0 fd             	and    eax,0xfffffffd
c001454a:	09 d0                	or     eax,edx
c001454c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014552:	a8 02                	test   al,0x2
c0014554:	75 d2                	jne    c0014528 <CPU::detectFeatures()+0x9ec>
c0014556:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c001455d:	83 c4 4c             	add    esp,0x4c
c0014560:	5b                   	pop    ebx
c0014561:	5e                   	pop    esi
c0014562:	5f                   	pop    edi
c0014563:	5d                   	pop    ebp
c0014564:	c3                   	ret    
c0014565:	90                   	nop

c0014566 <CPU::setupSMEP()>:
c0014566:	0f 20 e0             	mov    eax,cr4
c0014569:	0d 00 00 10 00       	or     eax,0x100000
c001456e:	0f 22 e0             	mov    cr4,eax
c0014571:	c3                   	ret    

c0014572 <CPU::setupUMIP()>:
c0014572:	0f 20 e0             	mov    eax,cr4
c0014575:	80 cc 08             	or     ah,0x8
c0014578:	0f 22 e0             	mov    cr4,eax
c001457b:	c3                   	ret    

c001457c <CPU::setupTSC()>:
c001457c:	0f 20 e0             	mov    eax,cr4
c001457f:	83 c8 04             	or     eax,0x4
c0014582:	0f 22 e0             	mov    cr4,eax
c0014585:	c3                   	ret    

c0014586 <CPU::setupLargePages()>:
c0014586:	0f 20 e0             	mov    eax,cr4
c0014589:	83 c8 10             	or     eax,0x10
c001458c:	0f 22 e0             	mov    cr4,eax
c001458f:	c3                   	ret    

c0014590 <CPU::setupPAT()>:
c0014590:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0014595:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001459c:	74 2c                	je     c00145ca <CPU::setupPAT()+0x3a>
c001459e:	53                   	push   ebx
c001459f:	83 ec 10             	sub    esp,0x10
c00145a2:	68 77 02 00 00       	push   0x277
c00145a7:	50                   	push   eax
c00145a8:	e8 d1 4c ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c00145ad:	83 e2 f8             	and    edx,0xfffffff8
c00145b0:	83 ca 01             	or     edx,0x1
c00145b3:	52                   	push   edx
c00145b4:	50                   	push   eax
c00145b5:	68 77 02 00 00       	push   0x277
c00145ba:	ff 35 88 8c 02 c0    	push   DWORD PTR ds:0xc0028c88
c00145c0:	e8 e5 4c ff ff       	call   c00092aa <Computer::wrmsr(unsigned int, unsigned long long)>
c00145c5:	83 c4 28             	add    esp,0x28
c00145c8:	5b                   	pop    ebx
c00145c9:	c3                   	ret    
c00145ca:	c3                   	ret    
c00145cb:	90                   	nop

c00145cc <CPU::setupMTRR()>:
c00145cc:	c3                   	ret    
c00145cd:	90                   	nop

c00145ce <CPU::setupGlobalPages()>:
c00145ce:	0f 20 e0             	mov    eax,cr4
c00145d1:	0c 80                	or     al,0x80
c00145d3:	0f 22 e0             	mov    cr4,eax
c00145d6:	c3                   	ret    
c00145d7:	90                   	nop

c00145d8 <CPU::allowUsermodeDataAccess()>:
c00145d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145dc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00145e3:	74 03                	je     c00145e8 <CPU::allowUsermodeDataAccess()+0x10>
c00145e5:	0f 01 cb             	stac   
c00145e8:	c3                   	ret    
c00145e9:	90                   	nop

c00145ea <CPU::prohibitUsermodeDataAccess()>:
c00145ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00145ee:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00145f5:	74 03                	je     c00145fa <CPU::prohibitUsermodeDataAccess()+0x10>
c00145f7:	0f 01 ca             	clac   
c00145fa:	c3                   	ret    
c00145fb:	90                   	nop

c00145fc <CPU::setupSMAP()>:
c00145fc:	0f 20 e0             	mov    eax,cr4
c00145ff:	0d 00 00 20 00       	or     eax,0x200000
c0014604:	0f 22 e0             	mov    cr4,eax
c0014607:	eb e1                	jmp    c00145ea <CPU::prohibitUsermodeDataAccess()>
c0014609:	90                   	nop

c001460a <CPU::setupFeatures()>:
c001460a:	53                   	push   ebx
c001460b:	83 ec 08             	sub    esp,0x8
c001460e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014612:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014619:	74 18                	je     c0014633 <CPU::setupFeatures()+0x29>
c001461b:	83 ec 0c             	sub    esp,0xc
c001461e:	68 e0 65 02 c0       	push   0xc00265e0
c0014623:	e8 37 8a ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0014628:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001462b:	e8 42 ff ff ff       	call   c0014572 <CPU::setupUMIP()>
c0014630:	83 c4 10             	add    esp,0x10
c0014633:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001463a:	74 18                	je     c0014654 <CPU::setupFeatures()+0x4a>
c001463c:	83 ec 0c             	sub    esp,0xc
c001463f:	68 ea 65 02 c0       	push   0xc00265ea
c0014644:	e8 16 8a ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0014649:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001464c:	e8 2b ff ff ff       	call   c001457c <CPU::setupTSC()>
c0014651:	83 c4 10             	add    esp,0x10
c0014654:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001465b:	74 18                	je     c0014675 <CPU::setupFeatures()+0x6b>
c001465d:	83 ec 0c             	sub    esp,0xc
c0014660:	68 f3 65 02 c0       	push   0xc00265f3
c0014665:	e8 f5 89 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001466a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001466d:	e8 14 ff ff ff       	call   c0014586 <CPU::setupLargePages()>
c0014672:	83 c4 10             	add    esp,0x10
c0014675:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001467c:	74 18                	je     c0014696 <CPU::setupFeatures()+0x8c>
c001467e:	83 ec 0c             	sub    esp,0xc
c0014681:	68 fc 65 02 c0       	push   0xc00265fc
c0014686:	e8 d4 89 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001468b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001468e:	e8 3b ff ff ff       	call   c00145ce <CPU::setupGlobalPages()>
c0014693:	83 c4 10             	add    esp,0x10
c0014696:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001469d:	74 18                	je     c00146b7 <CPU::setupFeatures()+0xad>
c001469f:	83 ec 0c             	sub    esp,0xc
c00146a2:	68 0e 66 02 c0       	push   0xc002660e
c00146a7:	e8 b3 89 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00146ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00146af:	e8 dc fe ff ff       	call   c0014590 <CPU::setupPAT()>
c00146b4:	83 c4 10             	add    esp,0x10
c00146b7:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00146be:	74 11                	je     c00146d1 <CPU::setupFeatures()+0xc7>
c00146c0:	c7 44 24 10 17 66 02 c0 	mov    DWORD PTR [esp+0x10],0xc0026617
c00146c8:	83 c4 08             	add    esp,0x8
c00146cb:	5b                   	pop    ebx
c00146cc:	e9 8e 89 ff ff       	jmp    c000d05f <Dbg::kprintf(char const*, ...)>
c00146d1:	83 c4 08             	add    esp,0x8
c00146d4:	5b                   	pop    ebx
c00146d5:	c3                   	ret    

c00146d6 <CPU::open(int, int, void*)>:
c00146d6:	57                   	push   edi
c00146d7:	56                   	push   esi
c00146d8:	53                   	push   ebx
c00146d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00146dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00146e1:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00146e7:	83 ec 0c             	sub    esp,0xc
c00146ea:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00146f0:	68 21 66 02 c0       	push   0xc0026621
c00146f5:	e8 d3 56 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c00146fa:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0014700:	89 04 24             	mov    DWORD PTR [esp],eax
c0014703:	e8 62 4f ff ff       	call   c000966a <GDT::setup()>
c0014708:	c7 04 24 33 66 02 c0 	mov    DWORD PTR [esp],0xc0026633
c001470f:	e8 b9 56 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0014714:	83 c4 0c             	add    esp,0xc
c0014717:	6a 00                	push   0x0
c0014719:	68 ef be ad de       	push   0xdeadbeef
c001471e:	57                   	push   edi
c001471f:	e8 9c 6f ff ff       	call   c000b6c0 <TSS::setup(unsigned long, unsigned long)>
c0014724:	c7 04 24 45 66 02 c0 	mov    DWORD PTR [esp],0xc0026645
c001472b:	e8 9d 56 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0014730:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014733:	e8 68 6f ff ff       	call   c000b6a0 <TSS::flush()>
c0014738:	c7 04 24 59 66 02 c0 	mov    DWORD PTR [esp],0xc0026659
c001473f:	e8 89 56 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0014744:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001474a:	89 04 24             	mov    DWORD PTR [esp],eax
c001474d:	e8 84 51 ff ff       	call   c00098d6 <IDT::setup()>
c0014752:	c7 04 24 6b 66 02 c0 	mov    DWORD PTR [esp],0xc002666b
c0014759:	e8 6f 56 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001475e:	b8 00 04 00 00       	mov    eax,0x400
c0014763:	0f 23 f8             	mov    db7,eax
c0014766:	c7 04 24 89 66 02 c0 	mov    DWORD PTR [esp],0xc0026689
c001476d:	e8 5b 56 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0014772:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001477c:	e8 a9 5c ff ff       	call   c000a42a <Phys::allocatePage()>
c0014781:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014787:	89 30                	mov    DWORD PTR [eax],esi
c0014789:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001478f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014792:	c7 04 24 ab 66 02 c0 	mov    DWORD PTR [esp],0xc00266ab
c0014799:	e8 2f 56 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001479e:	58                   	pop    eax
c001479f:	5a                   	pop    edx
c00147a0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00147a6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00147aa:	e8 0b 7f ff ff       	call   c000c6ba <VAS::setCPUSpecific(unsigned long)>
c00147af:	c7 04 24 d3 66 02 c0 	mov    DWORD PTR [esp],0xc00266d3
c00147b6:	e8 12 56 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c00147bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00147be:	e8 79 f3 ff ff       	call   c0013b3c <CPU::detectFeatures()>
c00147c3:	c7 04 24 f6 66 02 c0 	mov    DWORD PTR [esp],0xc00266f6
c00147ca:	e8 fe 55 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c00147cf:	e8 f7 b2 ff ff       	call   c000facb <setupInterruptController()>
c00147d4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00147da:	c7 04 24 1a 67 02 c0 	mov    DWORD PTR [esp],0xc002671a
c00147e1:	e8 e7 55 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c00147e6:	a1 a0 8c 02 c0       	mov    eax,ds:0xc0028ca0
c00147eb:	83 e0 10             	and    eax,0x10
c00147ee:	83 f8 01             	cmp    eax,0x1
c00147f1:	19 c0                	sbb    eax,eax
c00147f3:	83 e0 46             	and    eax,0x46
c00147f6:	83 c0 1e             	add    eax,0x1e
c00147f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00147fc:	e8 eb c8 ff ff       	call   c00110ec <setupTimer(int)>
c0014801:	83 c4 10             	add    esp,0x10
c0014804:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001480a:	f6 05 a0 8c 02 c0 20 	test   BYTE PTR ds:0xc0028ca0,0x20
c0014811:	74 18                	je     c001482b <CPU::open(int, int, void*)+0x155>
c0014813:	83 ec 0c             	sub    esp,0xc
c0014816:	68 35 67 02 c0       	push   0xc0026735
c001481b:	e8 ad 55 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0014820:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014823:	e8 e2 fd ff ff       	call   c001460a <CPU::setupFeatures()>
c0014828:	83 c4 10             	add    esp,0x10
c001482b:	83 ec 0c             	sub    esp,0xc
c001482e:	68 50 67 02 c0       	push   0xc0026750
c0014833:	e8 95 55 ff ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0014838:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001483b:	e8 5c f0 ff ff       	call   c001389c <CPU::displayFeatures()>
c0014840:	83 c4 10             	add    esp,0x10
c0014843:	31 c0                	xor    eax,eax
c0014845:	5b                   	pop    ebx
c0014846:	5e                   	pop    esi
c0014847:	5f                   	pop    edi
c0014848:	c3                   	ret    
c0014849:	90                   	nop

c001484a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001484a:	57                   	push   edi
c001484b:	56                   	push   esi
c001484c:	53                   	push   ebx
c001484d:	51                   	push   ecx
c001484e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014852:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0014855:	0f 02 c0             	lar    eax,ax
c0014858:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001485b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001485f:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0014862:	88 ca                	mov    dl,cl
c0014864:	c0 ea 06             	shr    dl,0x6
c0014867:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001486b:	89 ca                	mov    edx,ecx
c001486d:	66 c1 ea 03          	shr    dx,0x3
c0014871:	83 e2 07             	and    edx,0x7
c0014874:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0014879:	88 17                	mov    BYTE PTR [edi],dl
c001487b:	0f 84 a6 01 00 00    	je     c0014a27 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0014881:	83 e1 07             	and    ecx,0x7
c0014884:	80 f9 04             	cmp    cl,0x4
c0014887:	0f 84 98 00 00 00    	je     c0014925 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001488d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014892:	0f 95 c0             	setne  al
c0014895:	80 f9 05             	cmp    cl,0x5
c0014898:	0f 95 c2             	setne  dl
c001489b:	08 c2                	or     dl,al
c001489d:	74 79                	je     c0014918 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001489f:	84 c9                	test   cl,cl
c00148a1:	75 05                	jne    c00148a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00148a3:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00148a6:	eb 3c                	jmp    c00148e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00148a8:	80 f9 01             	cmp    cl,0x1
c00148ab:	75 05                	jne    c00148b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00148ad:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00148b0:	eb 32                	jmp    c00148e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00148b2:	80 f9 02             	cmp    cl,0x2
c00148b5:	75 05                	jne    c00148bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00148b7:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00148ba:	eb 28                	jmp    c00148e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00148bc:	31 c0                	xor    eax,eax
c00148be:	80 f9 03             	cmp    cl,0x3
c00148c1:	75 05                	jne    c00148c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00148c3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00148c6:	eb 1c                	jmp    c00148e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00148c8:	80 f9 05             	cmp    cl,0x5
c00148cb:	75 05                	jne    c00148d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00148cd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00148d0:	eb 12                	jmp    c00148e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00148d2:	80 f9 06             	cmp    cl,0x6
c00148d5:	75 05                	jne    c00148dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00148d7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00148da:	eb 08                	jmp    c00148e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00148dc:	80 f9 07             	cmp    cl,0x7
c00148df:	75 03                	jne    c00148e4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00148e1:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00148e4:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00148e9:	75 10                	jne    c00148fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00148eb:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00148ef:	b9 03 00 00 00       	mov    ecx,0x3
c00148f4:	01 d0                	add    eax,edx
c00148f6:	e9 37 01 00 00       	jmp    c0014a32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00148fb:	b9 02 00 00 00       	mov    ecx,0x2
c0014900:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0014905:	0f 85 27 01 00 00    	jne    c0014a32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001490b:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001490e:	b9 06 00 00 00       	mov    ecx,0x6
c0014913:	e9 1a 01 00 00       	jmp    c0014a32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0014918:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001491b:	b9 06 00 00 00       	mov    ecx,0x6
c0014920:	e9 0f 01 00 00       	jmp    c0014a34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014925:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0014928:	88 ca                	mov    dl,cl
c001492a:	c0 ea 06             	shr    dl,0x6
c001492d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0014931:	89 ca                	mov    edx,ecx
c0014933:	66 c1 ea 03          	shr    dx,0x3
c0014937:	83 e2 07             	and    edx,0x7
c001493a:	80 e1 07             	and    cl,0x7
c001493d:	75 05                	jne    c0014944 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001493f:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0014942:	eb 4c                	jmp    c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014944:	80 f9 01             	cmp    cl,0x1
c0014947:	75 05                	jne    c001494e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0014949:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001494c:	eb 42                	jmp    c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001494e:	80 f9 02             	cmp    cl,0x2
c0014951:	75 05                	jne    c0014958 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0014953:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0014956:	eb 38                	jmp    c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014958:	80 f9 03             	cmp    cl,0x3
c001495b:	75 05                	jne    c0014962 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001495d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0014960:	eb 2e                	jmp    c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014962:	80 f9 04             	cmp    cl,0x4
c0014965:	75 12                	jne    c0014979 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0014967:	f6 c4 60             	test   ah,0x60
c001496a:	75 08                	jne    c0014974 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001496c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001496f:	8d 78 14             	lea    edi,[eax+0x14]
c0014972:	eb 1c                	jmp    c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014974:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0014977:	eb 17                	jmp    c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014979:	80 f9 05             	cmp    cl,0x5
c001497c:	75 05                	jne    c0014983 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001497e:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0014981:	eb 0d                	jmp    c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0014983:	80 f9 06             	cmp    cl,0x6
c0014986:	75 05                	jne    c001498d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0014988:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001498b:	eb 03                	jmp    c0014990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001498d:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014990:	84 d2                	test   dl,dl
c0014992:	75 05                	jne    c0014999 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014994:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014997:	eb 3c                	jmp    c00149d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014999:	80 fa 01             	cmp    dl,0x1
c001499c:	75 05                	jne    c00149a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001499e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00149a1:	eb 32                	jmp    c00149d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00149a3:	80 fa 02             	cmp    dl,0x2
c00149a6:	75 05                	jne    c00149ad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c00149a8:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00149ab:	eb 28                	jmp    c00149d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00149ad:	80 fa 03             	cmp    dl,0x3
c00149b0:	75 05                	jne    c00149b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00149b2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00149b5:	eb 1e                	jmp    c00149d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00149b7:	31 c0                	xor    eax,eax
c00149b9:	80 fa 04             	cmp    dl,0x4
c00149bc:	74 17                	je     c00149d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00149be:	80 fa 05             	cmp    dl,0x5
c00149c1:	75 05                	jne    c00149c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00149c3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00149c6:	eb 0d                	jmp    c00149d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00149c8:	80 fa 06             	cmp    dl,0x6
c00149cb:	75 05                	jne    c00149d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00149cd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00149d0:	eb 03                	jmp    c00149d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00149d2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00149d5:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00149da:	0f 94 c2             	sete   dl
c00149dd:	80 f9 05             	cmp    cl,0x5
c00149e0:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00149e4:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00149e9:	d3 e0                	shl    eax,cl
c00149eb:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00149ef:	74 0a                	je     c00149fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00149f1:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00149f4:	b9 07 00 00 00       	mov    ecx,0x7
c00149f9:	eb 37                	jmp    c0014a32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00149fb:	01 f8                	add    eax,edi
c00149fd:	b9 03 00 00 00       	mov    ecx,0x3
c0014a02:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014a07:	74 2b                	je     c0014a34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014a09:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014a0e:	75 0d                	jne    c0014a1d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0014a10:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014a14:	01 c8                	add    eax,ecx
c0014a16:	b9 04 00 00 00       	mov    ecx,0x4
c0014a1b:	eb 17                	jmp    c0014a34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014a1d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014a20:	b9 07 00 00 00       	mov    ecx,0x7
c0014a25:	eb 0d                	jmp    c0014a34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014a27:	b9 02 00 00 00       	mov    ecx,0x2
c0014a2c:	b2 01                	mov    dl,0x1
c0014a2e:	31 c0                	xor    eax,eax
c0014a30:	eb 02                	jmp    c0014a34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014a32:	31 d2                	xor    edx,edx
c0014a34:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014a38:	89 0b                	mov    DWORD PTR [ebx],ecx
c0014a3a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014a3e:	88 11                	mov    BYTE PTR [ecx],dl
c0014a40:	5a                   	pop    edx
c0014a41:	5b                   	pop    ebx
c0014a42:	5e                   	pop    esi
c0014a43:	5f                   	pop    edi
c0014a44:	c3                   	ret    

c0014a45 <Krnl::smpEntry()>:
c0014a45:	eb fe                	jmp    c0014a45 <Krnl::smpEntry()>

c0014a47 <Krnl::startCPU(int)>:
c0014a47:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0014a4c:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014a53:	0f 84 36 01 00 00    	je     c0014b8f <Krnl::startCPU(int)+0x148>
c0014a59:	53                   	push   ebx
c0014a5a:	83 ec 10             	sub    esp,0x10
c0014a5d:	fa                   	cli    
c0014a5e:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c0014a64:	6a 1b                	push   0x1b
c0014a66:	ff 35 88 8c 02 c0    	push   DWORD PTR ds:0xc0028c88
c0014a6c:	e8 0d 48 ff ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c0014a71:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014a76:	89 c3                	mov    ebx,eax
c0014a78:	58                   	pop    eax
c0014a79:	5a                   	pop    edx
c0014a7a:	53                   	push   ebx
c0014a7b:	68 98 67 02 c0       	push   0xc0026798
c0014a80:	e8 da 85 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0014a85:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014a8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a93:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014a9d:	c1 e0 18             	shl    eax,0x18
c0014aa0:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014aa6:	83 c4 10             	add    esp,0x10
c0014aa9:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0014aaf:	09 c2                	or     edx,eax
c0014ab1:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0014ab7:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0014abd:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014ac3:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014ac9:	80 cd c5             	or     ch,0xc5
c0014acc:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014ad2:	f3 90                	pause  
c0014ad4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014ad6:	0f ba e1 0c          	bt     ecx,0xc
c0014ada:	72 f6                	jb     c0014ad2 <Krnl::startCPU(int)+0x8b>
c0014adc:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014ae2:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014ae8:	09 c1                	or     ecx,eax
c0014aea:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014af0:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014af6:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0014afc:	80 cd 85             	or     ch,0x85
c0014aff:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014b05:	f3 90                	pause  
c0014b07:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014b09:	0f ba e1 0c          	bt     ecx,0xc
c0014b0d:	72 f6                	jb     c0014b05 <Krnl::startCPU(int)+0xbe>
c0014b0f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014b19:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014b1f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014b25:	09 c1                	or     ecx,eax
c0014b27:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014b2d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014b33:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0014b39:	81 c9 02 06 00 00    	or     ecx,0x602
c0014b3f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014b45:	f3 90                	pause  
c0014b47:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014b49:	0f ba e1 0c          	bt     ecx,0xc
c0014b4d:	72 f6                	jb     c0014b45 <Krnl::startCPU(int)+0xfe>
c0014b4f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014b59:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014b5f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014b65:	09 c8                	or     eax,ecx
c0014b67:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0014b6d:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0014b73:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0014b78:	0d 02 06 00 00       	or     eax,0x602
c0014b7d:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0014b83:	f3 90                	pause  
c0014b85:	8b 02                	mov    eax,DWORD PTR [edx]
c0014b87:	0f ba e0 0c          	bt     eax,0xc
c0014b8b:	72 f6                	jb     c0014b83 <Krnl::startCPU(int)+0x13c>
c0014b8d:	eb fe                	jmp    c0014b8d <Krnl::startCPU(int)+0x146>
c0014b8f:	c3                   	ret    

c0014b90 <Krnl::startCPUs()>:
c0014b90:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0014b95:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014b9b:	88 c2                	mov    dl,al
c0014b9d:	83 e2 0a             	and    edx,0xa
c0014ba0:	80 fa 0a             	cmp    dl,0xa
c0014ba3:	75 09                	jne    c0014bae <Krnl::startCPUs()+0x1e>
c0014ba5:	a8 01                	test   al,0x1
c0014ba7:	74 05                	je     c0014bae <Krnl::startCPUs()+0x1e>
c0014ba9:	e9 ed b5 fe ff       	jmp    c000019b <prepareTramp>
c0014bae:	c3                   	ret    
c0014baf:	90                   	nop

c0014bb0 <EnvVarContainer::getEnv(char const*)>:
c0014bb0:	57                   	push   edi
c0014bb1:	56                   	push   esi
c0014bb2:	53                   	push   ebx
c0014bb3:	31 db                	xor    ebx,ebx
c0014bb5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014bb9:	39 1e                	cmp    DWORD PTR [esi],ebx
c0014bbb:	7e 2b                	jle    c0014be8 <EnvVarContainer::getEnv(char const*)+0x38>
c0014bbd:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014bc4:	50                   	push   eax
c0014bc5:	50                   	push   eax
c0014bc6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014bc9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0014bcc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014bd0:	e8 07 bc fe ff       	call   c00007dc <strcmp>
c0014bd5:	83 c4 10             	add    esp,0x10
c0014bd8:	85 c0                	test   eax,eax
c0014bda:	75 09                	jne    c0014be5 <EnvVarContainer::getEnv(char const*)+0x35>
c0014bdc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014bdf:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014be3:	eb 05                	jmp    c0014bea <EnvVarContainer::getEnv(char const*)+0x3a>
c0014be5:	43                   	inc    ebx
c0014be6:	eb d1                	jmp    c0014bb9 <EnvVarContainer::getEnv(char const*)+0x9>
c0014be8:	31 c0                	xor    eax,eax
c0014bea:	5b                   	pop    ebx
c0014beb:	5e                   	pop    esi
c0014bec:	5f                   	pop    edi
c0014bed:	c3                   	ret    

c0014bee <EnvVarContainer::setEnv(char const*, char const*)>:
c0014bee:	55                   	push   ebp
c0014bef:	57                   	push   edi
c0014bf0:	56                   	push   esi
c0014bf1:	53                   	push   ebx
c0014bf2:	83 ec 28             	sub    esp,0x28
c0014bf5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0014bf9:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0014bfd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014c01:	56                   	push   esi
c0014c02:	e8 a9 ba fe ff       	call   c00006b0 <strlen>
c0014c07:	40                   	inc    eax
c0014c08:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c0b:	e8 63 51 ff ff       	call   c0009d73 <malloc>
c0014c10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c17:	e8 94 ba fe ff       	call   c00006b0 <strlen>
c0014c1c:	40                   	inc    eax
c0014c1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c20:	e8 4e 51 ff ff       	call   c0009d73 <malloc>
c0014c25:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c28:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014c2c:	e8 7f ba fe ff       	call   c00006b0 <strlen>
c0014c31:	83 c4 0c             	add    esp,0xc
c0014c34:	40                   	inc    eax
c0014c35:	50                   	push   eax
c0014c36:	6a 00                	push   0x0
c0014c38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014c3c:	e8 53 ba fe ff       	call   c0000694 <memset>
c0014c41:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c44:	e8 67 ba fe ff       	call   c00006b0 <strlen>
c0014c49:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014c4d:	8d 48 01             	lea    ecx,[eax+0x1]
c0014c50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014c52:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c55:	89 de                	mov    esi,ebx
c0014c57:	e8 54 ba fe ff       	call   c00006b0 <strlen>
c0014c5c:	83 c4 0c             	add    esp,0xc
c0014c5f:	40                   	inc    eax
c0014c60:	50                   	push   eax
c0014c61:	6a 00                	push   0x0
c0014c63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c67:	e8 28 ba fe ff       	call   c0000694 <memset>
c0014c6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c6f:	e8 3c ba fe ff       	call   c00006b0 <strlen>
c0014c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014c78:	8d 48 01             	lea    ecx,[eax+0x1]
c0014c7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014c7d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014c80:	40                   	inc    eax
c0014c81:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014c84:	c1 e0 03             	shl    eax,0x3
c0014c87:	5a                   	pop    edx
c0014c88:	59                   	pop    ecx
c0014c89:	50                   	push   eax
c0014c8a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014c8d:	e8 cd 50 ff ff       	call   c0009d5f <realloc>
c0014c92:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014c96:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014c99:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014c9c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014ca0:	b9 08 00 00 00       	mov    ecx,0x8
c0014ca5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014ca7:	83 c4 2c             	add    esp,0x2c
c0014caa:	5b                   	pop    ebx
c0014cab:	5e                   	pop    esi
c0014cac:	5f                   	pop    edi
c0014cad:	5d                   	pop    ebp
c0014cae:	c3                   	ret    
c0014caf:	90                   	nop

c0014cb0 <EnvVarContainer::deleteEnv(char const*)>:
c0014cb0:	c3                   	ret    
c0014cb1:	90                   	nop

c0014cb2 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014cb2:	55                   	push   ebp
c0014cb3:	57                   	push   edi
c0014cb4:	56                   	push   esi
c0014cb5:	53                   	push   ebx
c0014cb6:	81 ec 38 01 00 00    	sub    esp,0x138
c0014cbc:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014cc3:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0014cca:	68 14 01 00 00       	push   0x114
c0014ccf:	e8 9f 50 ff ff       	call   c0009d73 <malloc>
c0014cd4:	83 c4 0c             	add    esp,0xc
c0014cd7:	89 c3                	mov    ebx,eax
c0014cd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014cdc:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014ce3:	50                   	push   eax
c0014ce4:	e8 e1 88 ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c0014ce9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cec:	e8 21 8c ff ff       	call   c000d912 <File::exists()>
c0014cf1:	83 c4 10             	add    esp,0x10
c0014cf4:	84 c0                	test   al,al
c0014cf6:	75 31                	jne    c0014d29 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0014cf8:	50                   	push   eax
c0014cf9:	50                   	push   eax
c0014cfa:	6a 12                	push   0x12
c0014cfc:	53                   	push   ebx
c0014cfd:	e8 a2 89 ff ff       	call   c000d6a4 <File::open(FileOpenMode)>
c0014d02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d04:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014d07:	89 34 24             	mov    DWORD PTR [esp],esi
c0014d0a:	e8 a1 b9 fe ff       	call   c00006b0 <strlen>
c0014d0f:	5a                   	pop    edx
c0014d10:	31 d2                	xor    edx,edx
c0014d12:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014d16:	51                   	push   ecx
c0014d17:	56                   	push   esi
c0014d18:	52                   	push   edx
c0014d19:	50                   	push   eax
c0014d1a:	53                   	push   ebx
c0014d1b:	ff d7                	call   edi
c0014d1d:	83 c4 14             	add    esp,0x14
c0014d20:	53                   	push   ebx
c0014d21:	e8 dc 89 ff ff       	call   c000d702 <File::close()>
c0014d26:	83 c4 10             	add    esp,0x10
c0014d29:	56                   	push   esi
c0014d2a:	31 f6                	xor    esi,esi
c0014d2c:	68 00 01 00 00       	push   0x100
c0014d31:	6a 00                	push   0x0
c0014d33:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014d37:	50                   	push   eax
c0014d38:	e8 57 b9 fe ff       	call   c0000694 <memset>
c0014d3d:	5f                   	pop    edi
c0014d3e:	58                   	pop    eax
c0014d3f:	6a 01                	push   0x1
c0014d41:	53                   	push   ebx
c0014d42:	e8 5d 89 ff ff       	call   c000d6a4 <File::open(FileOpenMode)>
c0014d47:	83 c4 10             	add    esp,0x10
c0014d4a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014d52:	83 ec 0c             	sub    esp,0xc
c0014d55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d57:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014d5b:	51                   	push   ecx
c0014d5c:	8d 54 24 23          	lea    edx,[esp+0x23]
c0014d60:	52                   	push   edx
c0014d61:	6a 00                	push   0x0
c0014d63:	6a 01                	push   0x1
c0014d65:	53                   	push   ebx
c0014d66:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d69:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0014d6d:	83 c4 20             	add    esp,0x20
c0014d70:	3c 0d                	cmp    al,0xd
c0014d72:	0f 84 09 01 00 00    	je     c0014e81 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014d78:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014d7d:	0f 84 ef 00 00 00    	je     c0014e72 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014d83:	3c 0a                	cmp    al,0xa
c0014d85:	74 13                	je     c0014d9a <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014d87:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014d8c:	74 0c                	je     c0014d9a <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014d8e:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014d94:	0f 8e d8 00 00 00    	jle    c0014e72 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0014d9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014d9e:	83 ec 0c             	sub    esp,0xc
c0014da1:	8d 78 01             	lea    edi,[eax+0x1]
c0014da4:	57                   	push   edi
c0014da5:	e8 c9 4f ff ff       	call   c0009d73 <malloc>
c0014daa:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014dae:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014db2:	8d 56 04             	lea    edx,[esi+0x4]
c0014db5:	89 14 24             	mov    DWORD PTR [esp],edx
c0014db8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0014dbc:	e8 b2 4f ff ff       	call   c0009d73 <malloc>
c0014dc1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014dc5:	83 c4 0c             	add    esp,0xc
c0014dc8:	57                   	push   edi
c0014dc9:	6a 00                	push   0x0
c0014dcb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014dcf:	e8 c0 b8 fe ff       	call   c0000694 <memset>
c0014dd4:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014dd8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014ddc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014de0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014de2:	83 c4 0c             	add    esp,0xc
c0014de5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014de9:	52                   	push   edx
c0014dea:	6a 00                	push   0x0
c0014dec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014df0:	e8 9f b8 fe ff       	call   c0000694 <memset>
c0014df5:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014df9:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0014dfd:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e00:	e8 ab b8 fe ff       	call   c00006b0 <strlen>
c0014e05:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014e09:	89 c1                	mov    ecx,eax
c0014e0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014e0d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014e10:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014e13:	40                   	inc    eax
c0014e14:	83 c4 10             	add    esp,0x10
c0014e17:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0014e1a:	85 d2                	test   edx,edx
c0014e1c:	75 0c                	jne    c0014e2a <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014e1e:	83 ec 0c             	sub    esp,0xc
c0014e21:	6a 08                	push   0x8
c0014e23:	e8 4b 4f ff ff       	call   c0009d73 <malloc>
c0014e28:	eb 0c                	jmp    c0014e36 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0014e2a:	c1 e0 03             	shl    eax,0x3
c0014e2d:	51                   	push   ecx
c0014e2e:	51                   	push   ecx
c0014e2f:	50                   	push   eax
c0014e30:	52                   	push   edx
c0014e31:	e8 29 4f ff ff       	call   c0009d5f <realloc>
c0014e36:	83 c4 10             	add    esp,0x10
c0014e39:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0014e3c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014e3f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014e42:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014e46:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014e4a:	b9 08 00 00 00       	mov    ecx,0x8
c0014e4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014e51:	31 f6                	xor    esi,esi
c0014e53:	50                   	push   eax
c0014e54:	68 00 01 00 00       	push   0x100
c0014e59:	6a 00                	push   0x0
c0014e5b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0014e5f:	50                   	push   eax
c0014e60:	e8 2f b8 fe ff       	call   c0000694 <memset>
c0014e65:	83 c4 10             	add    esp,0x10
c0014e68:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014e70:	eb 0f                	jmp    c0014e81 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014e72:	3c 3d                	cmp    al,0x3d
c0014e74:	74 07                	je     c0014e7d <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0014e76:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0014e7a:	46                   	inc    esi
c0014e7b:	eb 04                	jmp    c0014e81 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0014e7d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0014e81:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014e86:	0f 85 c6 fe ff ff    	jne    c0014d52 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0014e8c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014e92:	5b                   	pop    ebx
c0014e93:	5e                   	pop    esi
c0014e94:	5f                   	pop    edi
c0014e95:	5d                   	pop    ebp
c0014e96:	c3                   	ret    
c0014e97:	90                   	nop

c0014e98 <EnvVarContainer::__loadSystem()>:
c0014e98:	83 ec 10             	sub    esp,0x10
c0014e9b:	68 60 86 02 c0       	push   0xc0028660
c0014ea0:	68 a9 67 02 c0       	push   0xc00267a9
c0014ea5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ea9:	e8 04 fe ff ff       	call   c0014cb2 <EnvVarContainer::loadFrom(char const*, char const*)>
c0014eae:	83 c4 1c             	add    esp,0x1c
c0014eb1:	c3                   	ret    

c0014eb2 <EnvVarContainer::__loadUser()>:
c0014eb2:	c3                   	ret    
c0014eb3:	90                   	nop

c0014eb4 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014eb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014eb8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014ebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ec2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014ec6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014ec9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ecd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014ed4:	90                   	nop
c0014ed5:	c3                   	ret    

c0014ed6 <EnvVarContainer::~EnvVarContainer()>:
c0014ed6:	83 ec 0c             	sub    esp,0xc
c0014ed9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014edd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ee0:	85 c0                	test   eax,eax
c0014ee2:	74 1d                	je     c0014f01 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ee8:	8b 00                	mov    eax,DWORD PTR [eax]
c0014eea:	85 c0                	test   eax,eax
c0014eec:	74 13                	je     c0014f01 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ef2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ef5:	83 ec 0c             	sub    esp,0xc
c0014ef8:	50                   	push   eax
c0014ef9:	e8 85 4e ff ff       	call   c0009d83 <free>
c0014efe:	83 c4 10             	add    esp,0x10
c0014f01:	90                   	nop
c0014f02:	83 c4 0c             	add    esp,0xc
c0014f05:	c3                   	ret    

c0014f06 <Krnl::getEnv(Process*, char const*)>:
c0014f06:	53                   	push   ebx
c0014f07:	83 ec 08             	sub    esp,0x8
c0014f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f0e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014f12:	39 05 d0 a1 02 c0    	cmp    DWORD PTR ds:0xc002a1d0,eax
c0014f18:	74 04                	je     c0014f1e <Krnl::getEnv(Process*, char const*)+0x18>
c0014f1a:	85 c0                	test   eax,eax
c0014f1c:	75 0b                	jne    c0014f29 <Krnl::getEnv(Process*, char const*)+0x23>
c0014f1e:	a1 54 97 02 c0       	mov    eax,ds:0xc0029754
c0014f23:	85 c0                	test   eax,eax
c0014f25:	75 19                	jne    c0014f40 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014f27:	eb 27                	jmp    c0014f50 <Krnl::getEnv(Process*, char const*)+0x4a>
c0014f29:	52                   	push   edx
c0014f2a:	52                   	push   edx
c0014f2b:	53                   	push   ebx
c0014f2c:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014f32:	e8 79 fc ff ff       	call   c0014bb0 <EnvVarContainer::getEnv(char const*)>
c0014f37:	83 c4 10             	add    esp,0x10
c0014f3a:	85 c0                	test   eax,eax
c0014f3c:	75 28                	jne    c0014f66 <Krnl::getEnv(Process*, char const*)+0x60>
c0014f3e:	eb de                	jmp    c0014f1e <Krnl::getEnv(Process*, char const*)+0x18>
c0014f40:	52                   	push   edx
c0014f41:	52                   	push   edx
c0014f42:	53                   	push   ebx
c0014f43:	50                   	push   eax
c0014f44:	e8 67 fc ff ff       	call   c0014bb0 <EnvVarContainer::getEnv(char const*)>
c0014f49:	83 c4 10             	add    esp,0x10
c0014f4c:	85 c0                	test   eax,eax
c0014f4e:	75 16                	jne    c0014f66 <Krnl::getEnv(Process*, char const*)+0x60>
c0014f50:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0014f54:	a1 58 97 02 c0       	mov    eax,ds:0xc0029758
c0014f59:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f5d:	83 c4 08             	add    esp,0x8
c0014f60:	5b                   	pop    ebx
c0014f61:	e9 4a fc ff ff       	jmp    c0014bb0 <EnvVarContainer::getEnv(char const*)>
c0014f66:	83 c4 08             	add    esp,0x8
c0014f69:	5b                   	pop    ebx
c0014f6a:	c3                   	ret    

c0014f6b <Krnl::setEnvSystem(char const*, char const*)>:
c0014f6b:	83 ec 10             	sub    esp,0x10
c0014f6e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f72:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f76:	ff 35 58 97 02 c0    	push   DWORD PTR ds:0xc0029758
c0014f7c:	e8 6d fc ff ff       	call   c0014bee <EnvVarContainer::setEnv(char const*, char const*)>
c0014f81:	83 c4 1c             	add    esp,0x1c
c0014f84:	c3                   	ret    

c0014f85 <Krnl::setEnvUser(char const*, char const*)>:
c0014f85:	a1 54 97 02 c0       	mov    eax,ds:0xc0029754
c0014f8a:	85 c0                	test   eax,eax
c0014f8c:	74 15                	je     c0014fa3 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014f8e:	83 ec 10             	sub    esp,0x10
c0014f91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f99:	50                   	push   eax
c0014f9a:	e8 4f fc ff ff       	call   c0014bee <EnvVarContainer::setEnv(char const*, char const*)>
c0014f9f:	83 c4 1c             	add    esp,0x1c
c0014fa2:	c3                   	ret    
c0014fa3:	c3                   	ret    

c0014fa4 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014fa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fa8:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014fae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fb2:	e9 37 fc ff ff       	jmp    c0014bee <EnvVarContainer::setEnv(char const*, char const*)>

c0014fb7 <Krnl::deleteEnvSystem(char const*)>:
c0014fb7:	c3                   	ret    

c0014fb8 <Krnl::deleteEnvUser(char const*)>:
c0014fb8:	c3                   	ret    

c0014fb9 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014fb9:	c3                   	ret    

c0014fba <Krnl::newProcessEnv(Process*)>:
c0014fba:	83 ec 28             	sub    esp,0x28
c0014fbd:	6a 0c                	push   0xc
c0014fbf:	e8 af 4d ff ff       	call   c0009d73 <malloc>
c0014fc4:	5a                   	pop    edx
c0014fc5:	59                   	pop    ecx
c0014fc6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014fca:	50                   	push   eax
c0014fcb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014fcf:	e8 e0 fe ff ff       	call   c0014eb4 <EnvVarContainer::EnvVarContainer(Process*)>
c0014fd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014fd8:	83 c4 2c             	add    esp,0x2c
c0014fdb:	c3                   	ret    

c0014fdc <Krnl::copyProcessEnv(Process*, Process*)>:
c0014fdc:	57                   	push   edi
c0014fdd:	56                   	push   esi
c0014fde:	53                   	push   ebx
c0014fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014fe3:	83 ec 0c             	sub    esp,0xc
c0014fe6:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0014fec:	6a 0c                	push   0xc
c0014fee:	e8 80 4d ff ff       	call   c0009d73 <malloc>
c0014ff3:	89 c3                	mov    ebx,eax
c0014ff5:	58                   	pop    eax
c0014ff6:	5a                   	pop    edx
c0014ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ffb:	53                   	push   ebx
c0014ffc:	e8 b3 fe ff ff       	call   c0014eb4 <EnvVarContainer::EnvVarContainer(Process*)>
c0015001:	8b 07                	mov    eax,DWORD PTR [edi]
c0015003:	89 03                	mov    DWORD PTR [ebx],eax
c0015005:	c1 e0 03             	shl    eax,0x3
c0015008:	89 04 24             	mov    DWORD PTR [esp],eax
c001500b:	e8 63 4d ff ff       	call   c0009d73 <malloc>
c0015010:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0015013:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0015015:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0015018:	c1 e1 03             	shl    ecx,0x3
c001501b:	89 c7                	mov    edi,eax
c001501d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001501f:	83 c4 10             	add    esp,0x10
c0015022:	89 d8                	mov    eax,ebx
c0015024:	5b                   	pop    ebx
c0015025:	5e                   	pop    esi
c0015026:	5f                   	pop    edi
c0015027:	c3                   	ret    

c0015028 <Krnl::loadSystemEnv()>:
c0015028:	53                   	push   ebx
c0015029:	83 ec 14             	sub    esp,0x14
c001502c:	6a 0c                	push   0xc
c001502e:	e8 40 4d ff ff       	call   c0009d73 <malloc>
c0015033:	89 c3                	mov    ebx,eax
c0015035:	58                   	pop    eax
c0015036:	5a                   	pop    edx
c0015037:	ff 35 d0 a1 02 c0    	push   DWORD PTR ds:0xc002a1d0
c001503d:	53                   	push   ebx
c001503e:	e8 71 fe ff ff       	call   c0014eb4 <EnvVarContainer::EnvVarContainer(Process*)>
c0015043:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015046:	89 1d 58 97 02 c0    	mov    DWORD PTR ds:0xc0029758,ebx
c001504c:	e8 47 fe ff ff       	call   c0014e98 <EnvVarContainer::__loadSystem()>
c0015051:	83 c4 18             	add    esp,0x18
c0015054:	5b                   	pop    ebx
c0015055:	c3                   	ret    

c0015056 <Krnl::loadUserEnv()>:
c0015056:	53                   	push   ebx
c0015057:	83 ec 14             	sub    esp,0x14
c001505a:	6a 0c                	push   0xc
c001505c:	e8 12 4d ff ff       	call   c0009d73 <malloc>
c0015061:	89 c3                	mov    ebx,eax
c0015063:	58                   	pop    eax
c0015064:	5a                   	pop    edx
c0015065:	ff 35 d0 a1 02 c0    	push   DWORD PTR ds:0xc002a1d0
c001506b:	53                   	push   ebx
c001506c:	e8 43 fe ff ff       	call   c0014eb4 <EnvVarContainer::EnvVarContainer(Process*)>
c0015071:	89 1d 54 97 02 c0    	mov    DWORD PTR ds:0xc0029754,ebx
c0015077:	83 c4 18             	add    esp,0x18
c001507a:	5b                   	pop    ebx
c001507b:	c3                   	ret    

c001507c <Krnl::flushEnv()>:
c001507c:	c3                   	ret    

c001507d <Krnl::getProcessTotalEnvCount(Process*)>:
c001507d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015081:	8b 15 54 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029754
c0015087:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001508d:	a1 58 97 02 c0       	mov    eax,ds:0xc0029758
c0015092:	8b 00                	mov    eax,DWORD PTR [eax]
c0015094:	03 01                	add    eax,DWORD PTR [ecx]
c0015096:	85 d2                	test   edx,edx
c0015098:	74 02                	je     c001509c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001509a:	03 02                	add    eax,DWORD PTR [edx]
c001509c:	c3                   	ret    

c001509d <Krnl::getProcessEnvPair(Process*, int)>:
c001509d:	57                   	push   edi
c001509e:	56                   	push   esi
c001509f:	8b 35 54 97 02 c0    	mov    esi,DWORD PTR ds:0xc0029754
c00150a5:	53                   	push   ebx
c00150a6:	85 f6                	test   esi,esi
c00150a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00150ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00150b0:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00150b6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00150ba:	8b 01                	mov    eax,DWORD PTR [ecx]
c00150bc:	75 16                	jne    c00150d4 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00150be:	39 c2                	cmp    edx,eax
c00150c0:	7c 16                	jl     c00150d8 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00150c2:	8b 0d 58 97 02 c0    	mov    ecx,DWORD PTR ds:0xc0029758
c00150c8:	8b 31                	mov    esi,DWORD PTR [ecx]
c00150ca:	01 c6                	add    esi,eax
c00150cc:	39 d6                	cmp    esi,edx
c00150ce:	7e 3c                	jle    c001510c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00150d0:	29 c2                	sub    edx,eax
c00150d2:	eb 04                	jmp    c00150d8 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00150d4:	39 c2                	cmp    edx,eax
c00150d6:	7d 05                	jge    c00150dd <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00150d8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00150db:	eb 20                	jmp    c00150fd <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00150dd:	8b 3e                	mov    edi,DWORD PTR [esi]
c00150df:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00150e2:	39 d1                	cmp    ecx,edx
c00150e4:	7e 04                	jle    c00150ea <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00150e6:	29 c2                	sub    edx,eax
c00150e8:	eb 10                	jmp    c00150fa <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00150ea:	8b 35 58 97 02 c0    	mov    esi,DWORD PTR ds:0xc0029758
c00150f0:	03 0e                	add    ecx,DWORD PTR [esi]
c00150f2:	39 d1                	cmp    ecx,edx
c00150f4:	7e 16                	jle    c001510c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00150f6:	29 c2                	sub    edx,eax
c00150f8:	29 fa                	sub    edx,edi
c00150fa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00150fd:	8d 14 d0             	lea    edx,[eax+edx*8]
c0015100:	8b 02                	mov    eax,DWORD PTR [edx]
c0015102:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015105:	89 03                	mov    DWORD PTR [ebx],eax
c0015107:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001510a:	eb 1d                	jmp    c0015129 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001510c:	83 ec 0c             	sub    esp,0xc
c001510f:	68 cb 67 02 c0       	push   0xc00267cb
c0015114:	e8 18 00 00 00       	call   c0015131 <Krnl::panic(char const*)>
c0015119:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001511f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0015126:	83 c4 10             	add    esp,0x10
c0015129:	89 d8                	mov    eax,ebx
c001512b:	5b                   	pop    ebx
c001512c:	5e                   	pop    esi
c001512d:	5f                   	pop    edi
c001512e:	c2 04 00             	ret    0x4

c0015131 <Krnl::panic(char const*)>:
c0015131:	53                   	push   ebx
c0015132:	83 ec 10             	sub    esp,0x10
c0015135:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015139:	fa                   	cli    
c001513a:	c6 05 64 97 02 c0 01 	mov    BYTE PTR ds:0xc0029764,0x1
c0015141:	53                   	push   ebx
c0015142:	68 e5 67 02 c0       	push   0xc00267e5
c0015147:	e8 13 7f ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001514c:	83 c4 0c             	add    esp,0xc
c001514f:	6a 01                	push   0x1
c0015151:	6a 0f                	push   0xf
c0015153:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c0015159:	e8 6e 5b ff ff       	call   c000accc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001515e:	59                   	pop    ecx
c001515f:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c0015165:	e8 84 60 ff ff       	call   c000b1ee <VgaText::clearScreen()>
c001516a:	58                   	pop    eax
c001516b:	5a                   	pop    edx
c001516c:	68 3c 68 02 c0       	push   0xc002683c
c0015171:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c0015177:	e8 90 5b ff ff       	call   c000ad0c <VgaText::setTitle(char*)>
c001517c:	83 c4 0c             	add    esp,0xc
c001517f:	6a 01                	push   0x1
c0015181:	6a 0f                	push   0xf
c0015183:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c0015189:	e8 3e 5b ff ff       	call   c000accc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001518e:	59                   	pop    ecx
c001518f:	58                   	pop    eax
c0015190:	68 fe 67 02 c0       	push   0xc00267fe
c0015195:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c001519b:	e8 da 61 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c00151a0:	58                   	pop    eax
c00151a1:	5a                   	pop    edx
c00151a2:	68 88 68 02 c0       	push   0xc0026888
c00151a7:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c00151ad:	e8 c8 61 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c00151b2:	59                   	pop    ecx
c00151b3:	58                   	pop    eax
c00151b4:	68 1a 68 02 c0       	push   0xc002681a
c00151b9:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c00151bf:	e8 b6 61 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c00151c4:	58                   	pop    eax
c00151c5:	5a                   	pop    edx
c00151c6:	53                   	push   ebx
c00151c7:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c00151cd:	e8 a8 61 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c00151d2:	59                   	pop    ecx
c00151d3:	5b                   	pop    ebx
c00151d4:	68 3a 68 02 c0       	push   0xc002683a
c00151d9:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c00151df:	e8 96 61 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c00151e4:	58                   	pop    eax
c00151e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00151e9:	e8 7b 33 00 00       	call   c0018569 <Thr::getDriverNameFromAddress(unsigned long)>
c00151ee:	83 c4 10             	add    esp,0x10
c00151f1:	85 c0                	test   eax,eax
c00151f3:	0f 84 36 01 00 00    	je     c001532f <Krnl::panic(char const*)+0x1fe>
c00151f9:	83 ec 08             	sub    esp,0x8
c00151fc:	89 c3                	mov    ebx,eax
c00151fe:	68 c4 68 02 c0       	push   0xc00268c4
c0015203:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c0015209:	e8 6c 61 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c001520e:	59                   	pop    ecx
c001520f:	58                   	pop    eax
c0015210:	68 1a 68 02 c0       	push   0xc002681a
c0015215:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c001521b:	e8 5a 61 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c0015220:	58                   	pop    eax
c0015221:	5a                   	pop    edx
c0015222:	53                   	push   ebx
c0015223:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c0015229:	e8 4c 61 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c001522e:	83 c4 10             	add    esp,0x10
c0015231:	83 ec 08             	sub    esp,0x8
c0015234:	68 39 68 02 c0       	push   0xc0026839
c0015239:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c001523f:	e8 36 61 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c0015244:	58                   	pop    eax
c0015245:	5a                   	pop    edx
c0015246:	68 1c 69 02 c0       	push   0xc002691c
c001524b:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c0015251:	e8 24 61 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c0015256:	59                   	pop    ecx
c0015257:	5b                   	pop    ebx
c0015258:	68 5c 69 02 c0       	push   0xc002695c
c001525d:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c0015263:	e8 12 61 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c0015268:	58                   	pop    eax
c0015269:	5a                   	pop    edx
c001526a:	68 25 68 02 c0       	push   0xc0026825
c001526f:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c0015275:	e8 00 61 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c001527a:	59                   	pop    ecx
c001527b:	5b                   	pop    ebx
c001527c:	68 a0 69 02 c0       	push   0xc00269a0
c0015281:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c0015287:	e8 ee 60 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c001528c:	58                   	pop    eax
c001528d:	5a                   	pop    edx
c001528e:	68 3d 68 02 c0       	push   0xc002683d
c0015293:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c0015299:	e8 dc 60 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c001529e:	0f 20 c0             	mov    eax,cr0
c00152a1:	59                   	pop    ecx
c00152a2:	5b                   	pop    ebx
c00152a3:	50                   	push   eax
c00152a4:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c00152aa:	e8 85 60 ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c00152af:	58                   	pop    eax
c00152b0:	5a                   	pop    edx
c00152b1:	68 47 68 02 c0       	push   0xc0026847
c00152b6:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c00152bc:	e8 b9 60 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c00152c1:	0f 20 d0             	mov    eax,cr2
c00152c4:	59                   	pop    ecx
c00152c5:	5b                   	pop    ebx
c00152c6:	50                   	push   eax
c00152c7:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c00152cd:	e8 62 60 ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c00152d2:	58                   	pop    eax
c00152d3:	5a                   	pop    edx
c00152d4:	68 51 68 02 c0       	push   0xc0026851
c00152d9:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c00152df:	e8 96 60 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c00152e4:	0f 20 d8             	mov    eax,cr3
c00152e7:	59                   	pop    ecx
c00152e8:	5b                   	pop    ebx
c00152e9:	50                   	push   eax
c00152ea:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c00152f0:	e8 3f 60 ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c00152f5:	58                   	pop    eax
c00152f6:	5a                   	pop    edx
c00152f7:	68 64 68 02 c0       	push   0xc0026864
c00152fc:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c0015302:	e8 73 60 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c0015307:	0f 20 e0             	mov    eax,cr4
c001530a:	59                   	pop    ecx
c001530b:	5b                   	pop    ebx
c001530c:	50                   	push   eax
c001530d:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c0015313:	e8 1c 60 ff ff       	call   c000b334 <VgaText::putx(unsigned int)>
c0015318:	58                   	pop    eax
c0015319:	5a                   	pop    edx
c001531a:	68 6e 68 02 c0       	push   0xc002686e
c001531f:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c0015325:	e8 50 60 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c001532a:	83 c4 10             	add    esp,0x10
c001532d:	eb fe                	jmp    c001532d <Krnl::panic(char const*)+0x1fc>
c001532f:	51                   	push   ecx
c0015330:	51                   	push   ecx
c0015331:	68 f0 68 02 c0       	push   0xc00268f0
c0015336:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c001533c:	e8 39 60 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c0015341:	5b                   	pop    ebx
c0015342:	58                   	pop    eax
c0015343:	68 1a 68 02 c0       	push   0xc002681a
c0015348:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c001534e:	e8 27 60 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c0015353:	58                   	pop    eax
c0015354:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015359:	5a                   	pop    edx
c001535a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001535d:	83 c0 0c             	add    eax,0xc
c0015360:	50                   	push   eax
c0015361:	ff 35 04 8d 02 c0    	push   DWORD PTR ds:0xc0028d04
c0015367:	e8 0e 60 ff ff       	call   c000b37a <VgaText::puts(char const*)>
c001536c:	83 c4 10             	add    esp,0x10
c001536f:	e9 bd fe ff ff       	jmp    c0015231 <Krnl::panic(char const*)+0x100>

c0015374 <Krnl::powerThread(void*)>:
c0015374:	53                   	push   ebx
c0015375:	83 ec 08             	sub    esp,0x8
c0015378:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c001537d:	48                   	dec    eax
c001537e:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0015383:	75 01                	jne    c0015386 <Krnl::powerThread(void*)+0x12>
c0015385:	fb                   	sti    
c0015386:	52                   	push   edx
c0015387:	52                   	push   edx
c0015388:	ff 35 c4 97 02 c0    	push   DWORD PTR ds:0xc00297c4
c001538e:	68 c6 69 02 c0       	push   0xc00269c6
c0015393:	e8 c7 7c ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0015398:	59                   	pop    ecx
c0015399:	8b 1d b4 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297b4
c001539f:	58                   	pop    eax
c00153a0:	c6 05 80 97 02 c0 00 	mov    BYTE PTR ds:0xc0029780,0x0
c00153a7:	53                   	push   ebx
c00153a8:	68 d0 69 02 c0       	push   0xc00269d0
c00153ad:	e8 ad 7c ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00153b2:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c00153b9:	e8 ea 3e 00 00       	call   c00192a8 <sleep(unsigned int)>
c00153be:	a1 c4 97 02 c0       	mov    eax,ds:0xc00297c4
c00153c3:	83 c4 10             	add    esp,0x10
c00153c6:	83 c0 0a             	add    eax,0xa
c00153c9:	85 db                	test   ebx,ebx
c00153cb:	a3 c4 97 02 c0       	mov    ds:0xc00297c4,eax
c00153d0:	74 b4                	je     c0015386 <Krnl::powerThread(void*)+0x12>
c00153d2:	39 d8                	cmp    eax,ebx
c00153d4:	7e b0                	jle    c0015386 <Krnl::powerThread(void*)+0x12>
c00153d6:	83 ec 0c             	sub    esp,0xc
c00153d9:	68 e8 69 02 c0       	push   0xc00269e8
c00153de:	e8 7c 7c ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00153e3:	58                   	pop    eax
c00153e4:	ff 35 88 8c 02 c0    	push   DWORD PTR ds:0xc0028c88
c00153ea:	e8 23 3f ff ff       	call   c0009312 <Computer::sleep()>
c00153ef:	83 c4 10             	add    esp,0x10
c00153f2:	eb 92                	jmp    c0015386 <Krnl::powerThread(void*)+0x12>

c00153f4 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00153f4:	57                   	push   edi
c00153f5:	b9 09 00 00 00       	mov    ecx,0x9
c00153fa:	56                   	push   esi
c00153fb:	bf a0 97 02 c0       	mov    edi,0xc00297a0
c0015400:	fc                   	cld    
c0015401:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0015405:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015407:	5e                   	pop    esi
c0015408:	5f                   	pop    edi
c0015409:	c3                   	ret    

c001540a <Krnl::userIOReceived()>:
c001540a:	c7 05 c4 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297c4,0x0
c0015414:	c3                   	ret    

c0015415 <Krnl::handlePowerButton()>:
c0015415:	83 ec 0c             	sub    esp,0xc
c0015418:	a1 a0 97 02 c0       	mov    eax,ds:0xc00297a0
c001541d:	83 f8 02             	cmp    eax,0x2
c0015420:	75 10                	jne    c0015432 <Krnl::handlePowerButton()+0x1d>
c0015422:	83 ec 0c             	sub    esp,0xc
c0015425:	ff 35 88 8c 02 c0    	push   DWORD PTR ds:0xc0028c88
c001542b:	e8 b2 3e ff ff       	call   c00092e2 <Computer::shutdown()>
c0015430:	eb 11                	jmp    c0015443 <Krnl::handlePowerButton()+0x2e>
c0015432:	48                   	dec    eax
c0015433:	75 11                	jne    c0015446 <Krnl::handlePowerButton()+0x31>
c0015435:	83 ec 0c             	sub    esp,0xc
c0015438:	ff 35 88 8c 02 c0    	push   DWORD PTR ds:0xc0028c88
c001543e:	e8 cf 3e ff ff       	call   c0009312 <Computer::sleep()>
c0015443:	83 c4 10             	add    esp,0x10
c0015446:	83 c4 0c             	add    esp,0xc
c0015449:	c3                   	ret    

c001544a <Krnl::handleSleepButton()>:
c001544a:	83 ec 0c             	sub    esp,0xc
c001544d:	a1 a4 97 02 c0       	mov    eax,ds:0xc00297a4
c0015452:	83 f8 02             	cmp    eax,0x2
c0015455:	75 10                	jne    c0015467 <Krnl::handleSleepButton()+0x1d>
c0015457:	83 ec 0c             	sub    esp,0xc
c001545a:	ff 35 88 8c 02 c0    	push   DWORD PTR ds:0xc0028c88
c0015460:	e8 7d 3e ff ff       	call   c00092e2 <Computer::shutdown()>
c0015465:	eb 11                	jmp    c0015478 <Krnl::handleSleepButton()+0x2e>
c0015467:	48                   	dec    eax
c0015468:	75 11                	jne    c001547b <Krnl::handleSleepButton()+0x31>
c001546a:	83 ec 0c             	sub    esp,0xc
c001546d:	ff 35 88 8c 02 c0    	push   DWORD PTR ds:0xc0028c88
c0015473:	e8 9a 3e ff ff       	call   c0009312 <Computer::sleep()>
c0015478:	83 c4 10             	add    esp,0x10
c001547b:	83 c4 0c             	add    esp,0xc
c001547e:	c3                   	ret    

c001547f <Krnl::setupPowerManager()>:
c001547f:	83 ec 0c             	sub    esp,0xc
c0015482:	c7 05 c4 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297c4,0x0
c001548c:	68 f0 00 00 00       	push   0xf0
c0015491:	c6 05 80 97 02 c0 00 	mov    BYTE PTR ds:0xc0029780,0x0
c0015498:	6a 00                	push   0x0
c001549a:	68 74 53 01 c0       	push   0xc0015374
c001549f:	ff 35 d0 a1 02 c0    	push   DWORD PTR ds:0xc002a1d0
c00154a5:	e8 da 38 00 00       	call   c0018d84 <Process::createThread(void (*)(void*), void*, int)>
c00154aa:	c7 05 a0 97 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc00297a0,0x2
c00154b4:	c7 05 a4 97 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00297a4,0x1
c00154be:	c7 05 a8 97 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc00297a8,0x3
c00154c8:	c7 05 ac 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297ac,0x0
c00154d2:	c7 05 b8 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297b8,0x0
c00154dc:	c7 05 b0 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297b0,0x0
c00154e6:	c7 05 bc 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297bc,0x0
c00154f0:	c7 05 b4 97 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00297b4,0x3c
c00154fa:	c7 05 c0 97 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc00297c0,0x3c
c0015504:	83 c4 1c             	add    esp,0x1c
c0015507:	c3                   	ret    

c0015508 <Krnl::initRNG()>:
c0015508:	55                   	push   ebp
c0015509:	57                   	push   edi
c001550a:	56                   	push   esi
c001550b:	53                   	push   ebx
c001550c:	83 ec 3c             	sub    esp,0x3c
c001550f:	a0 d0 97 02 c0       	mov    al,ds:0xc00297d0
c0015514:	84 c0                	test   al,al
c0015516:	74 18                	je     c0015530 <Krnl::initRNG()+0x28>
c0015518:	83 ec 0c             	sub    esp,0xc
c001551b:	68 f5 69 02 c0       	push   0xc00269f5
c0015520:	e8 0c fc ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0015525:	83 c4 10             	add    esp,0x10
c0015528:	e9 ab 01 00 00       	jmp    c00156d8 <Krnl::initRNG()+0x1d0>
c001552d:	8d 76 00             	lea    esi,[esi+0x0]
c0015530:	c7 05 c8 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297c8,0x0
c001553a:	c7 05 cc 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00297cc,0x0
c0015544:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0015549:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001554f:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0015555:	83 e0 01             	and    eax,0x1
c0015558:	84 c0                	test   al,al
c001555a:	0f 95 c0             	setne  al
c001555d:	84 c0                	test   al,al
c001555f:	74 6f                	je     c00155d0 <Krnl::initRNG()+0xc8>
c0015561:	e8 b3 ac fe ff       	call   c0000219 <getRDRAND>
c0015566:	ba 00 00 00 00       	mov    edx,0x0
c001556b:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0015570:	89 15 cc 97 02 c0    	mov    DWORD PTR ds:0xc00297cc,edx
c0015576:	8b 0d c8 97 02 c0    	mov    ecx,DWORD PTR ds:0xc00297c8
c001557c:	8b 1d cc 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297cc
c0015582:	89 c8                	mov    eax,ecx
c0015584:	89 da                	mov    edx,ebx
c0015586:	89 c2                	mov    edx,eax
c0015588:	b8 00 00 00 00       	mov    eax,0x0
c001558d:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0015592:	89 15 cc 97 02 c0    	mov    DWORD PTR ds:0xc00297cc,edx
c0015598:	e8 7c ac fe ff       	call   c0000219 <getRDRAND>
c001559d:	89 c1                	mov    ecx,eax
c001559f:	bb 00 00 00 00       	mov    ebx,0x0
c00155a4:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c00155a9:	8b 15 cc 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297cc
c00155af:	89 cd                	mov    ebp,ecx
c00155b1:	09 c5                	or     ebp,eax
c00155b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00155b7:	09 d3                	or     ebx,edx
c00155b9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00155bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00155c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00155c5:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c00155ca:	89 15 cc 97 02 c0    	mov    DWORD PTR ds:0xc00297cc,edx
c00155d0:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c00155d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00155db:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00155e1:	83 e0 02             	and    eax,0x2
c00155e4:	84 c0                	test   al,al
c00155e6:	0f 95 c0             	setne  al
c00155e9:	84 c0                	test   al,al
c00155eb:	74 33                	je     c0015620 <Krnl::initRNG()+0x118>
c00155ed:	0f 31                	rdtsc  
c00155ef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00155f3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00155f7:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c00155fc:	8b 15 cc 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297cc
c0015602:	89 c3                	mov    ebx,eax
c0015604:	33 5c 24 28          	xor    ebx,DWORD PTR [esp+0x28]
c0015608:	89 de                	mov    esi,ebx
c001560a:	89 d0                	mov    eax,edx
c001560c:	33 44 24 2c          	xor    eax,DWORD PTR [esp+0x2c]
c0015610:	89 c7                	mov    edi,eax
c0015612:	89 35 c8 97 02 c0    	mov    DWORD PTR ds:0xc00297c8,esi
c0015618:	89 3d cc 97 02 c0    	mov    DWORD PTR ds:0xc00297cc,edi
c001561e:	66 90                	xchg   ax,ax
c0015620:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0015625:	8b 15 cc 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297cc
c001562b:	89 c1                	mov    ecx,eax
c001562d:	0f a4 d0 11          	shld   eax,edx,0x11
c0015631:	0f a4 ca 11          	shld   edx,ecx,0x11
c0015635:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c001563a:	89 15 cc 97 02 c0    	mov    DWORD PTR ds:0xc00297cc,edx
c0015640:	a1 ac 92 02 c0       	mov    eax,ds:0xc00292ac
c0015645:	89 c1                	mov    ecx,eax
c0015647:	bb 00 00 00 00       	mov    ebx,0x0
c001564c:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0015651:	8b 15 cc 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297cc
c0015657:	89 cf                	mov    edi,ecx
c0015659:	31 c7                	xor    edi,eax
c001565b:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
c001565f:	89 de                	mov    esi,ebx
c0015661:	31 d6                	xor    esi,edx
c0015663:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0015667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001566b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001566f:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0015674:	89 15 cc 97 02 c0    	mov    DWORD PTR ds:0xc00297cc,edx
c001567a:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c001567f:	8b 15 cc 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297cc
c0015685:	89 c3                	mov    ebx,eax
c0015687:	0f ac d0 1b          	shrd   eax,edx,0x1b
c001568b:	0f ac da 1b          	shrd   edx,ebx,0x1b
c001568f:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0015694:	89 15 cc 97 02 c0    	mov    DWORD PTR ds:0xc00297cc,edx
c001569a:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c001569f:	8b 15 cc 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297cc
c00156a5:	89 c7                	mov    edi,eax
c00156a7:	81 f7 f6 5d 72 45    	xor    edi,0x45725df6
c00156ad:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00156b1:	89 d0                	mov    eax,edx
c00156b3:	35 89 c3 8d 30       	xor    eax,0x308dc389
c00156b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00156bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00156c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00156c4:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c00156c9:	89 15 cc 97 02 c0    	mov    DWORD PTR ds:0xc00297cc,edx
c00156cf:	c6 05 d0 97 02 c0 01 	mov    BYTE PTR ds:0xc00297d0,0x1
c00156d6:	66 90                	xchg   ax,ax
c00156d8:	83 c4 3c             	add    esp,0x3c
c00156db:	5b                   	pop    ebx
c00156dc:	5e                   	pop    esi
c00156dd:	5f                   	pop    edi
c00156de:	5d                   	pop    ebp
c00156df:	c3                   	ret    

c00156e0 <Krnl::rand()>:
c00156e0:	53                   	push   ebx
c00156e1:	83 ec 18             	sub    esp,0x18
c00156e4:	a0 d0 97 02 c0       	mov    al,ds:0xc00297d0
c00156e9:	83 f0 01             	xor    eax,0x1
c00156ec:	84 c0                	test   al,al
c00156ee:	74 10                	je     c0015700 <Krnl::rand()+0x20>
c00156f0:	83 ec 0c             	sub    esp,0xc
c00156f3:	68 0c 6a 02 c0       	push   0xc0026a0c
c00156f8:	e8 34 fa ff ff       	call   c0015131 <Krnl::panic(char const*)>
c00156fd:	83 c4 10             	add    esp,0x10
c0015700:	a1 c8 97 02 c0       	mov    eax,ds:0xc00297c8
c0015705:	8b 15 cc 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297cc
c001570b:	69 da 75 b1 e7 a2    	imul   ebx,edx,0xa2e7b175
c0015711:	69 c8 75 28 00 00    	imul   ecx,eax,0x2875
c0015717:	01 d9                	add    ecx,ebx
c0015719:	bb 75 b1 e7 a2       	mov    ebx,0xa2e7b175
c001571e:	f7 e3                	mul    ebx
c0015720:	01 d1                	add    ecx,edx
c0015722:	89 ca                	mov    edx,ecx
c0015724:	05 ef 04 b5 00       	add    eax,0xb504ef
c0015729:	83 d2 00             	adc    edx,0x0
c001572c:	89 c1                	mov    ecx,eax
c001572e:	80 e5 ff             	and    ch,0xff
c0015731:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0015735:	0f b7 c2             	movzx  eax,dx
c0015738:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001573c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015740:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015744:	a3 c8 97 02 c0       	mov    ds:0xc00297c8,eax
c0015749:	89 15 cc 97 02 c0    	mov    DWORD PTR ds:0xc00297cc,edx
c001574f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015757:	0f ac d0 10          	shrd   eax,edx,0x10
c001575b:	c1 ea 10             	shr    edx,0x10
c001575e:	89 c1                	mov    ecx,eax
c0015760:	89 d3                	mov    ebx,edx
c0015762:	89 c8                	mov    eax,ecx
c0015764:	83 c4 18             	add    esp,0x18
c0015767:	5b                   	pop    ebx
c0015768:	c3                   	ret    
c0015769:	66 90                	xchg   ax,ax
c001576b:	90                   	nop

c001576c <Net::switchEndian16(unsigned short)>:
c001576c:	83 ec 04             	sub    esp,0x4
c001576f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015773:	66 89 04 24          	mov    WORD PTR [esp],ax
c0015777:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001577b:	c1 f8 08             	sar    eax,0x8
c001577e:	89 c2                	mov    edx,eax
c0015780:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0015784:	c1 e0 08             	shl    eax,0x8
c0015787:	09 d0                	or     eax,edx
c0015789:	83 c4 04             	add    esp,0x4
c001578c:	c3                   	ret    
c001578d:	8d 76 00             	lea    esi,[esi+0x0]

c0015790 <Net::switchEndian32(unsigned int)>:
c0015790:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015794:	c1 e8 18             	shr    eax,0x18
c0015797:	89 c2                	mov    edx,eax
c0015799:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001579d:	c1 e0 08             	shl    eax,0x8
c00157a0:	25 00 00 ff 00       	and    eax,0xff0000
c00157a5:	09 c2                	or     edx,eax
c00157a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157ab:	c1 e8 08             	shr    eax,0x8
c00157ae:	25 00 ff 00 00       	and    eax,0xff00
c00157b3:	09 c2                	or     edx,eax
c00157b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157b9:	c1 e0 18             	shl    eax,0x18
c00157bc:	09 d0                	or     eax,edx
c00157be:	c3                   	ret    
c00157bf:	90                   	nop

c00157c0 <Net::crc32Calc(unsigned char*, int)>:
c00157c0:	83 ec 10             	sub    esp,0x10
c00157c3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00157c8:	75 0a                	jne    c00157d4 <Net::crc32Calc(unsigned char*, int)+0x14>
c00157ca:	b8 00 00 00 00       	mov    eax,0x0
c00157cf:	e9 8c 00 00 00       	jmp    c0015860 <Net::crc32Calc(unsigned char*, int)+0xa0>
c00157d4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00157d9:	7f 09                	jg     c00157e4 <Net::crc32Calc(unsigned char*, int)+0x24>
c00157db:	b8 00 00 00 00       	mov    eax,0x0
c00157e0:	eb 7e                	jmp    c0015860 <Net::crc32Calc(unsigned char*, int)+0xa0>
c00157e2:	66 90                	xchg   ax,ax
c00157e4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00157ec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00157f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00157f8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00157fc:	7d 5a                	jge    c0015858 <Net::crc32Calc(unsigned char*, int)+0x98>
c00157fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015802:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015806:	01 d0                	add    eax,edx
c0015808:	8a 00                	mov    al,BYTE PTR [eax]
c001580a:	0f b6 c0             	movzx  eax,al
c001580d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0015811:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015819:	8d 76 00             	lea    esi,[esi+0x0]
c001581c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0015821:	7f 2d                	jg     c0015850 <Net::crc32Calc(unsigned char*, int)+0x90>
c0015823:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015827:	83 e0 01             	and    eax,0x1
c001582a:	74 10                	je     c001583c <Net::crc32Calc(unsigned char*, int)+0x7c>
c001582c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015830:	d1 e8                	shr    eax,1
c0015832:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0015837:	eb 0b                	jmp    c0015844 <Net::crc32Calc(unsigned char*, int)+0x84>
c0015839:	8d 76 00             	lea    esi,[esi+0x0]
c001583c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015840:	d1 e8                	shr    eax,1
c0015842:	66 90                	xchg   ax,ax
c0015844:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015848:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001584c:	eb ce                	jmp    c001581c <Net::crc32Calc(unsigned char*, int)+0x5c>
c001584e:	66 90                	xchg   ax,ax
c0015850:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015854:	eb 9e                	jmp    c00157f4 <Net::crc32Calc(unsigned char*, int)+0x34>
c0015856:	66 90                	xchg   ax,ax
c0015858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001585c:	f7 d0                	not    eax
c001585e:	66 90                	xchg   ax,ax
c0015860:	83 c4 10             	add    esp,0x10
c0015863:	c3                   	ret    

c0015864 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0015864:	57                   	push   edi
c0015865:	56                   	push   esi
c0015866:	53                   	push   ebx
c0015867:	83 ec 60             	sub    esp,0x60
c001586a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015871:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015875:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001587d:	8d 76 00             	lea    esi,[esi+0x0]
c0015880:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0015885:	7f 1d                	jg     c00158a4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c0015887:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001588e:	8d 50 01             	lea    edx,[eax+0x1]
c0015891:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015898:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001589b:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001589f:	eb df                	jmp    c0015880 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c00158a1:	8d 76 00             	lea    esi,[esi+0x0]
c00158a4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00158ab:	8d 50 01             	lea    edx,[eax+0x1]
c00158ae:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00158b5:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c00158b8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00158bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00158c3:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c00158c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00158cb:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c00158d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00158d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00158db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00158df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00158e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00158e7:	89 c6                	mov    esi,eax
c00158e9:	89 d7                	mov    edi,edx
c00158eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00158ed:	89 c8                	mov    eax,ecx
c00158ef:	89 fa                	mov    edx,edi
c00158f1:	89 f3                	mov    ebx,esi
c00158f3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00158f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00158fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00158fe:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0015906:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001590d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015911:	8d 44 24 78          	lea    eax,[esp+0x78]
c0015915:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015919:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0015921:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015925:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015929:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001592d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015931:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015935:	89 c6                	mov    esi,eax
c0015937:	89 d7                	mov    edi,edx
c0015939:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001593b:	89 c8                	mov    eax,ecx
c001593d:	89 fa                	mov    edx,edi
c001593f:	89 f3                	mov    ebx,esi
c0015941:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0015945:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0015949:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001594d:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0015955:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001595c:	0f b7 c0             	movzx  eax,ax
c001595f:	c1 f8 08             	sar    eax,0x8
c0015962:	89 c1                	mov    ecx,eax
c0015964:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001596b:	8d 50 01             	lea    edx,[eax+0x1]
c001596e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015975:	88 ca                	mov    dl,cl
c0015977:	88 10                	mov    BYTE PTR [eax],dl
c0015979:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0015980:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015987:	8d 48 01             	lea    ecx,[eax+0x1]
c001598a:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0015991:	88 10                	mov    BYTE PTR [eax],dl
c0015993:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015997:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001599b:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c00159a2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c00159a6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00159aa:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00159ae:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00159b2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00159b6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00159ba:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00159be:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00159c2:	89 c6                	mov    esi,eax
c00159c4:	89 d7                	mov    edi,edx
c00159c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00159c8:	89 c8                	mov    eax,ecx
c00159ca:	89 fa                	mov    edx,edi
c00159cc:	89 f3                	mov    ebx,esi
c00159ce:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c00159d2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00159d6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00159da:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00159de:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c00159e5:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00159ec:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c00159f0:	50                   	push   eax
c00159f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00159f5:	e8 c6 fd ff ff       	call   c00157c0 <Net::crc32Calc(unsigned char*, int)>
c00159fa:	83 c4 08             	add    esp,0x8
c00159fd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015a01:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015a05:	c1 e8 18             	shr    eax,0x18
c0015a08:	89 c1                	mov    ecx,eax
c0015a0a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015a11:	8d 50 01             	lea    edx,[eax+0x1]
c0015a14:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015a1b:	88 ca                	mov    dl,cl
c0015a1d:	88 10                	mov    BYTE PTR [eax],dl
c0015a1f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015a23:	c1 e8 10             	shr    eax,0x10
c0015a26:	89 c1                	mov    ecx,eax
c0015a28:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015a2f:	8d 50 01             	lea    edx,[eax+0x1]
c0015a32:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015a39:	88 ca                	mov    dl,cl
c0015a3b:	88 10                	mov    BYTE PTR [eax],dl
c0015a3d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015a41:	c1 e8 08             	shr    eax,0x8
c0015a44:	89 c1                	mov    ecx,eax
c0015a46:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015a4d:	8d 50 01             	lea    edx,[eax+0x1]
c0015a50:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015a57:	88 ca                	mov    dl,cl
c0015a59:	88 10                	mov    BYTE PTR [eax],dl
c0015a5b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015a62:	8d 50 01             	lea    edx,[eax+0x1]
c0015a65:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015a6c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0015a70:	88 10                	mov    BYTE PTR [eax],dl
c0015a72:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015a76:	83 c4 60             	add    esp,0x60
c0015a79:	5b                   	pop    ebx
c0015a7a:	5e                   	pop    esi
c0015a7b:	5f                   	pop    edi
c0015a7c:	c3                   	ret    
c0015a7d:	8d 76 00             	lea    esi,[esi+0x0]

c0015a80 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0015a80:	57                   	push   edi
c0015a81:	56                   	push   esi
c0015a82:	53                   	push   ebx
c0015a83:	83 ec 70             	sub    esp,0x70
c0015a86:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015a8d:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0015a91:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0015a99:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015aa0:	83 c0 0e             	add    eax,0xe
c0015aa3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0015aa7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015aae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015ab2:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0015aba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015abe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015ac2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ac6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015aca:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015ace:	89 c6                	mov    esi,eax
c0015ad0:	89 d7                	mov    edi,edx
c0015ad2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015ad4:	89 c8                	mov    eax,ecx
c0015ad6:	89 fa                	mov    edx,edi
c0015ad8:	89 f3                	mov    ebx,esi
c0015ada:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0015ade:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0015ae2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ae6:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015aee:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015af5:	83 c0 08             	add    eax,0x8
c0015af8:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0015afc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015b03:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015b07:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0015b0f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015b13:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015b17:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015b1b:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0015b1f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015b23:	89 c6                	mov    esi,eax
c0015b25:	89 d7                	mov    edi,edx
c0015b27:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015b29:	89 c8                	mov    eax,ecx
c0015b2b:	89 fa                	mov    edx,edi
c0015b2d:	89 f3                	mov    ebx,esi
c0015b2f:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015b33:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015b37:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0015b3b:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015b43:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015b4a:	8d 50 01             	lea    edx,[eax+0x1]
c0015b4d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015b54:	8a 00                	mov    al,BYTE PTR [eax]
c0015b56:	0f b6 c0             	movzx  eax,al
c0015b59:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0015b5e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015b65:	8d 50 01             	lea    edx,[eax+0x1]
c0015b68:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015b6f:	8a 00                	mov    al,BYTE PTR [eax]
c0015b71:	0f b6 c0             	movzx  eax,al
c0015b74:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0015b79:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0015b7e:	c1 e0 08             	shl    eax,0x8
c0015b81:	89 c2                	mov    edx,eax
c0015b83:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015b87:	09 d0                	or     eax,edx
c0015b89:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015b90:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0015b94:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0015b9c:	75 46                	jne    c0015be4 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015b9e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015ba5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015ba8:	66 3d dc 05          	cmp    ax,0x5dc
c0015bac:	77 16                	ja     c0015bc4 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0015bae:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015bb5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015bb8:	0f b7 c0             	movzx  eax,ax
c0015bbb:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0015bc2:	eb 20                	jmp    c0015be4 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0015bc4:	83 ec 0c             	sub    esp,0xc
c0015bc7:	68 28 6a 02 c0       	push   0xc0026a28
c0015bcc:	e8 8e 74 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0015bd1:	83 c4 10             	add    esp,0x10
c0015bd4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015bdb:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0015bdf:	e9 18 01 00 00       	jmp    c0015cfc <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0015be4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015beb:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015bf2:	8b 12                	mov    edx,DWORD PTR [edx]
c0015bf4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015bf8:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0015bff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015c03:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015c0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c13:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c17:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015c1b:	89 c6                	mov    esi,eax
c0015c1d:	89 d7                	mov    edi,edx
c0015c1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015c21:	89 c8                	mov    eax,ecx
c0015c23:	89 fa                	mov    edx,edi
c0015c25:	89 f3                	mov    ebx,esi
c0015c27:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0015c2b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015c2f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c32:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015c39:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0015c40:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c47:	8d 50 01             	lea    edx,[eax+0x1]
c0015c4a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015c51:	8a 00                	mov    al,BYTE PTR [eax]
c0015c53:	0f b6 c0             	movzx  eax,al
c0015c56:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0015c5a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c61:	8d 50 01             	lea    edx,[eax+0x1]
c0015c64:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015c6b:	8a 00                	mov    al,BYTE PTR [eax]
c0015c6d:	0f b6 c0             	movzx  eax,al
c0015c70:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0015c74:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c7b:	8d 50 01             	lea    edx,[eax+0x1]
c0015c7e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015c85:	8a 00                	mov    al,BYTE PTR [eax]
c0015c87:	0f b6 c0             	movzx  eax,al
c0015c8a:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0015c8e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015c95:	8d 50 01             	lea    edx,[eax+0x1]
c0015c98:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015c9f:	8a 00                	mov    al,BYTE PTR [eax]
c0015ca1:	0f b6 c0             	movzx  eax,al
c0015ca4:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0015ca8:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0015cac:	c1 e0 18             	shl    eax,0x18
c0015caf:	89 c2                	mov    edx,eax
c0015cb1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0015cb5:	c1 e0 10             	shl    eax,0x10
c0015cb8:	09 c2                	or     edx,eax
c0015cba:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0015cbe:	c1 e0 08             	shl    eax,0x8
c0015cc1:	09 d0                	or     eax,edx
c0015cc3:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0015cc7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015ccb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015cd2:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0015cd6:	83 e8 04             	sub    eax,0x4
c0015cd9:	83 ec 08             	sub    esp,0x8
c0015cdc:	50                   	push   eax
c0015cdd:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015ce1:	e8 da fa ff ff       	call   c00157c0 <Net::crc32Calc(unsigned char*, int)>
c0015ce6:	83 c4 10             	add    esp,0x10
c0015ce9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0015ced:	0f 94 c2             	sete   dl
c0015cf0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015cf7:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0015cfa:	90                   	nop
c0015cfb:	90                   	nop
c0015cfc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015d03:	83 c4 70             	add    esp,0x70
c0015d06:	5b                   	pop    ebx
c0015d07:	5e                   	pop    esi
c0015d08:	5f                   	pop    edi
c0015d09:	c2 04 00             	ret    0x4

c0015d0c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015d0c:	55                   	push   ebp
c0015d0d:	57                   	push   edi
c0015d0e:	56                   	push   esi
c0015d0f:	53                   	push   ebx
c0015d10:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015d16:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015d1d:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015d1f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015d22:	80 fb 40             	cmp    bl,0x40
c0015d25:	75 1b                	jne    c0015d42 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015d27:	8a 16                	mov    dl,BYTE PTR [esi]
c0015d29:	84 d2                	test   dl,dl
c0015d2b:	0f 84 f1 00 00 00    	je     c0015e22 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d31:	8d 46 01             	lea    eax,[esi+0x1]
c0015d34:	80 fa 3a             	cmp    dl,0x3a
c0015d37:	74 04                	je     c0015d3d <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015d39:	89 c6                	mov    esi,eax
c0015d3b:	eb ea                	jmp    c0015d27 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0015d3d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015d40:	89 c6                	mov    esi,eax
c0015d42:	50                   	push   eax
c0015d43:	6a 40                	push   0x40
c0015d45:	6a 00                	push   0x0
c0015d47:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015d4b:	50                   	push   eax
c0015d4c:	e8 43 a9 fe ff       	call   c0000694 <memset>
c0015d51:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015d58:	31 c0                	xor    eax,eax
c0015d5a:	83 c4 10             	add    esp,0x10
c0015d5d:	8a 0f                	mov    cl,BYTE PTR [edi]
c0015d5f:	84 c9                	test   cl,cl
c0015d61:	0f 84 bb 00 00 00    	je     c0015e22 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d67:	3d c7 00 00 00       	cmp    eax,0xc7
c0015d6c:	0f 8f b0 00 00 00    	jg     c0015e22 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015d72:	80 f9 0a             	cmp    cl,0xa
c0015d75:	0f 85 98 00 00 00    	jne    c0015e13 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0015d7b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015d80:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015d84:	a8 df                	test   al,0xdf
c0015d86:	0f 94 c1             	sete   cl
c0015d89:	3c 23                	cmp    al,0x23
c0015d8b:	0f 94 c2             	sete   dl
c0015d8e:	08 d1                	or     cl,dl
c0015d90:	75 4a                	jne    c0015ddc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d92:	8d 50 f7             	lea    edx,[eax-0x9]
c0015d95:	80 fa 01             	cmp    dl,0x1
c0015d98:	76 42                	jbe    c0015ddc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015d9a:	3c 5b                	cmp    al,0x5b
c0015d9c:	75 42                	jne    c0015de0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0015d9e:	80 fb 40             	cmp    bl,0x40
c0015da1:	75 39                	jne    c0015ddc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015da3:	83 ec 0c             	sub    esp,0xc
c0015da6:	8d 54 24 65          	lea    edx,[esp+0x65]
c0015daa:	52                   	push   edx
c0015dab:	e8 00 a9 fe ff       	call   c00006b0 <strlen>
c0015db0:	83 c4 10             	add    esp,0x10
c0015db3:	83 f8 3f             	cmp    eax,0x3f
c0015db6:	77 6a                	ja     c0015e22 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015db8:	50                   	push   eax
c0015db9:	50                   	push   eax
c0015dba:	8d 54 24 61          	lea    edx,[esp+0x61]
c0015dbe:	52                   	push   edx
c0015dbf:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015dc3:	52                   	push   edx
c0015dc4:	e8 87 a9 fe ff       	call   c0000750 <strcpy>
c0015dc9:	58                   	pop    eax
c0015dca:	8d 54 24 24          	lea    edx,[esp+0x24]
c0015dce:	52                   	push   edx
c0015dcf:	e8 dc a8 fe ff       	call   c00006b0 <strlen>
c0015dd4:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015dd9:	83 c4 10             	add    esp,0x10
c0015ddc:	31 d2                	xor    edx,edx
c0015dde:	eb 3a                	jmp    c0015e1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0015de0:	80 fb 40             	cmp    bl,0x40
c0015de3:	74 06                	je     c0015deb <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0015de5:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015de9:	eb 20                	jmp    c0015e0b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0015deb:	50                   	push   eax
c0015dec:	50                   	push   eax
c0015ded:	55                   	push   ebp
c0015dee:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015df2:	50                   	push   eax
c0015df3:	e8 e4 a9 fe ff       	call   c00007dc <strcmp>
c0015df8:	83 c4 10             	add    esp,0x10
c0015dfb:	85 c0                	test   eax,eax
c0015dfd:	75 dd                	jne    c0015ddc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015dff:	eb e4                	jmp    c0015de5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015e01:	8d 50 01             	lea    edx,[eax+0x1]
c0015e04:	80 f9 3d             	cmp    cl,0x3d
c0015e07:	74 1d                	je     c0015e26 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015e09:	89 d0                	mov    eax,edx
c0015e0b:	8a 08                	mov    cl,BYTE PTR [eax]
c0015e0d:	84 c9                	test   cl,cl
c0015e0f:	75 f0                	jne    c0015e01 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015e11:	eb 0f                	jmp    c0015e22 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015e13:	8d 50 01             	lea    edx,[eax+0x1]
c0015e16:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0015e1a:	47                   	inc    edi
c0015e1b:	89 d0                	mov    eax,edx
c0015e1d:	e9 3b ff ff ff       	jmp    c0015d5d <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015e22:	31 c0                	xor    eax,eax
c0015e24:	eb 33                	jmp    c0015e59 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015e26:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015e2a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015e2d:	50                   	push   eax
c0015e2e:	50                   	push   eax
c0015e2f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015e33:	50                   	push   eax
c0015e34:	56                   	push   esi
c0015e35:	e8 a2 a9 fe ff       	call   c00007dc <strcmp>
c0015e3a:	83 c4 10             	add    esp,0x10
c0015e3d:	85 c0                	test   eax,eax
c0015e3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e43:	75 97                	jne    c0015ddc <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015e45:	51                   	push   ecx
c0015e46:	51                   	push   ecx
c0015e47:	52                   	push   edx
c0015e48:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015e4f:	e8 fc a8 fe ff       	call   c0000750 <strcpy>
c0015e54:	83 c4 10             	add    esp,0x10
c0015e57:	b0 01                	mov    al,0x1
c0015e59:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015e5f:	5b                   	pop    ebx
c0015e60:	5e                   	pop    esi
c0015e61:	5f                   	pop    edi
c0015e62:	5d                   	pop    ebp
c0015e63:	c3                   	ret    

c0015e64 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015e64:	57                   	push   edi
c0015e65:	56                   	push   esi
c0015e66:	53                   	push   ebx
c0015e67:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015e6d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015e74:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0015e7b:	53                   	push   ebx
c0015e7c:	e8 2f a8 fe ff       	call   c00006b0 <strlen>
c0015e81:	89 34 24             	mov    DWORD PTR [esp],esi
c0015e84:	89 c7                	mov    edi,eax
c0015e86:	e8 25 a8 fe ff       	call   c00006b0 <strlen>
c0015e8b:	83 c4 10             	add    esp,0x10
c0015e8e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015e92:	3d ff 00 00 00       	cmp    eax,0xff
c0015e97:	0f 87 d3 00 00 00    	ja     c0015f70 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015e9d:	57                   	push   edi
c0015e9e:	57                   	push   edi
c0015e9f:	56                   	push   esi
c0015ea0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015ea4:	56                   	push   esi
c0015ea5:	e8 a6 a8 fe ff       	call   c0000750 <strcpy>
c0015eaa:	58                   	pop    eax
c0015eab:	5a                   	pop    edx
c0015eac:	68 ca 6d 02 c0       	push   0xc0026dca
c0015eb1:	56                   	push   esi
c0015eb2:	e8 d9 a9 fe ff       	call   c0000890 <strcat>
c0015eb7:	59                   	pop    ecx
c0015eb8:	5f                   	pop    edi
c0015eb9:	53                   	push   ebx
c0015eba:	56                   	push   esi
c0015ebb:	e8 d0 a9 fe ff       	call   c0000890 <strcat>
c0015ec0:	58                   	pop    eax
c0015ec1:	5a                   	pop    edx
c0015ec2:	68 74 6a 02 c0       	push   0xc0026a74
c0015ec7:	56                   	push   esi
c0015ec8:	e8 c3 a9 fe ff       	call   c0000890 <strcat>
c0015ecd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015ed4:	e8 9a 3e ff ff       	call   c0009d73 <malloc>
c0015ed9:	83 c4 0c             	add    esp,0xc
c0015edc:	89 c3                	mov    ebx,eax
c0015ede:	ff 35 d0 a1 02 c0    	push   DWORD PTR ds:0xc002a1d0
c0015ee4:	56                   	push   esi
c0015ee5:	50                   	push   eax
c0015ee6:	e8 df 76 ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c0015eeb:	83 c4 10             	add    esp,0x10
c0015eee:	85 db                	test   ebx,ebx
c0015ef0:	74 7e                	je     c0015f70 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015ef2:	51                   	push   ecx
c0015ef3:	51                   	push   ecx
c0015ef4:	6a 01                	push   0x1
c0015ef6:	53                   	push   ebx
c0015ef7:	e8 a8 77 ff ff       	call   c000d6a4 <File::open(FileOpenMode)>
c0015efc:	83 c4 10             	add    esp,0x10
c0015eff:	85 c0                	test   eax,eax
c0015f01:	74 08                	je     c0015f0b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0015f03:	83 ec 0c             	sub    esp,0xc
c0015f06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f08:	53                   	push   ebx
c0015f09:	eb 5f                	jmp    c0015f6a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015f0b:	52                   	push   edx
c0015f0c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015f10:	50                   	push   eax
c0015f11:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015f15:	50                   	push   eax
c0015f16:	53                   	push   ebx
c0015f17:	e8 34 7a ff ff       	call   c000d950 <File::stat(unsigned long long*, bool*)>
c0015f1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f20:	83 c4 10             	add    esp,0x10
c0015f23:	89 c1                	mov    ecx,eax
c0015f25:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015f29:	74 31                	je     c0015f5c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015f2b:	83 ec 0c             	sub    esp,0xc
c0015f2e:	50                   	push   eax
c0015f2f:	e8 3f 3e ff ff       	call   c0009d73 <malloc>
c0015f34:	89 c6                	mov    esi,eax
c0015f36:	58                   	pop    eax
c0015f37:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f39:	8d 54 24 20          	lea    edx,[esp+0x20]
c0015f3d:	52                   	push   edx
c0015f3e:	56                   	push   esi
c0015f3f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f43:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015f47:	53                   	push   ebx
c0015f48:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015f4b:	83 c4 20             	add    esp,0x20
c0015f4e:	85 c0                	test   eax,eax
c0015f50:	75 0a                	jne    c0015f5c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015f52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f56:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0015f5a:	74 18                	je     c0015f74 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0015f5c:	83 ec 0c             	sub    esp,0xc
c0015f5f:	53                   	push   ebx
c0015f60:	e8 9d 77 ff ff       	call   c000d702 <File::close()>
c0015f65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f6a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f6d:	83 c4 10             	add    esp,0x10
c0015f70:	31 c0                	xor    eax,eax
c0015f72:	eb 3b                	jmp    c0015faf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015f74:	83 ec 0c             	sub    esp,0xc
c0015f77:	53                   	push   ebx
c0015f78:	e8 85 77 ff ff       	call   c000d702 <File::close()>
c0015f7d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f82:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f85:	83 c4 0c             	add    esp,0xc
c0015f88:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015f8f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0015f96:	56                   	push   esi
c0015f97:	e8 70 fd ff ff       	call   c0015d0c <Reg::findLineFromLoadedData(char*, char*, char*)>
c0015f9c:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f9f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015fa3:	e8 db 3d ff ff       	call   c0009d83 <free>
c0015fa8:	83 c4 10             	add    esp,0x10
c0015fab:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015faf:	81 c4 20 01 00 00    	add    esp,0x120
c0015fb5:	5b                   	pop    ebx
c0015fb6:	5e                   	pop    esi
c0015fb7:	5f                   	pop    edi
c0015fb8:	c3                   	ret    

c0015fb9 <Reg::getLine(char*, char*, char*)>:
c0015fb9:	57                   	push   edi
c0015fba:	56                   	push   esi
c0015fbb:	53                   	push   ebx
c0015fbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fc0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015fc4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015fc8:	57                   	push   edi
c0015fc9:	56                   	push   esi
c0015fca:	53                   	push   ebx
c0015fcb:	68 79 6a 02 c0       	push   0xc0026a79
c0015fd0:	e8 8f fe ff ff       	call   c0015e64 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015fd5:	83 c4 10             	add    esp,0x10
c0015fd8:	84 c0                	test   al,al
c0015fda:	75 10                	jne    c0015fec <Reg::getLine(char*, char*, char*)+0x33>
c0015fdc:	57                   	push   edi
c0015fdd:	56                   	push   esi
c0015fde:	53                   	push   ebx
c0015fdf:	68 9e 6a 02 c0       	push   0xc0026a9e
c0015fe4:	e8 7b fe ff ff       	call   c0015e64 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015fe9:	83 c4 10             	add    esp,0x10
c0015fec:	5b                   	pop    ebx
c0015fed:	5e                   	pop    esi
c0015fee:	5f                   	pop    edi
c0015fef:	c3                   	ret    

c0015ff0 <Reg::readInt(char*, char*, int*)>:
c0015ff0:	55                   	push   ebp
c0015ff1:	57                   	push   edi
c0015ff2:	56                   	push   esi
c0015ff3:	53                   	push   ebx
c0015ff4:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015ffa:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015ffe:	57                   	push   edi
c0015fff:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0016006:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001600d:	e8 a7 ff ff ff       	call   c0015fb9 <Reg::getLine(char*, char*, char*)>
c0016012:	83 c4 10             	add    esp,0x10
c0016015:	84 c0                	test   al,al
c0016017:	0f 84 b3 00 00 00    	je     c00160d0 <Reg::readInt(char*, char*, int*)+0xe0>
c001601d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0016021:	80 fa 2b             	cmp    dl,0x2b
c0016024:	74 0c                	je     c0016032 <Reg::readInt(char*, char*, int*)+0x42>
c0016026:	80 fa 2d             	cmp    dl,0x2d
c0016029:	75 0e                	jne    c0016039 <Reg::readInt(char*, char*, int*)+0x49>
c001602b:	ba 01 00 00 00       	mov    edx,0x1
c0016030:	eb 0b                	jmp    c001603d <Reg::readInt(char*, char*, int*)+0x4d>
c0016032:	ba 01 00 00 00       	mov    edx,0x1
c0016037:	eb 02                	jmp    c001603b <Reg::readInt(char*, char*, int*)+0x4b>
c0016039:	31 d2                	xor    edx,edx
c001603b:	31 c0                	xor    eax,eax
c001603d:	be 0a 00 00 00       	mov    esi,0xa
c0016042:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0016047:	75 20                	jne    c0016069 <Reg::readInt(char*, char*, int*)+0x79>
c0016049:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001604d:	80 f9 78             	cmp    cl,0x78
c0016050:	75 0a                	jne    c001605c <Reg::readInt(char*, char*, int*)+0x6c>
c0016052:	83 c2 02             	add    edx,0x2
c0016055:	be 10 00 00 00       	mov    esi,0x10
c001605a:	eb 0d                	jmp    c0016069 <Reg::readInt(char*, char*, int*)+0x79>
c001605c:	80 f9 62             	cmp    cl,0x62
c001605f:	75 08                	jne    c0016069 <Reg::readInt(char*, char*, int*)+0x79>
c0016061:	83 c2 02             	add    edx,0x2
c0016064:	be 02 00 00 00       	mov    esi,0x2
c0016069:	01 d7                	add    edi,edx
c001606b:	31 d2                	xor    edx,edx
c001606d:	8a 1f                	mov    bl,BYTE PTR [edi]
c001606f:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0016073:	80 fb 0d             	cmp    bl,0xd
c0016076:	0f 94 c3             	sete   bl
c0016079:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001607e:	0f 94 c1             	sete   cl
c0016081:	08 cb                	or     bl,cl
c0016083:	75 3a                	jne    c00160bf <Reg::readInt(char*, char*, int*)+0xcf>
c0016085:	0f af d6             	imul   edx,esi
c0016088:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001608d:	83 fe 10             	cmp    esi,0x10
c0016090:	75 26                	jne    c00160b8 <Reg::readInt(char*, char*, int*)+0xc8>
c0016092:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016096:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0016099:	89 e9                	mov    ecx,ebp
c001609b:	80 f9 05             	cmp    cl,0x5
c001609e:	77 06                	ja     c00160a6 <Reg::readInt(char*, char*, int*)+0xb6>
c00160a0:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00160a4:	eb 16                	jmp    c00160bc <Reg::readInt(char*, char*, int*)+0xcc>
c00160a6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00160aa:	83 e9 61             	sub    ecx,0x61
c00160ad:	80 f9 05             	cmp    cl,0x5
c00160b0:	77 06                	ja     c00160b8 <Reg::readInt(char*, char*, int*)+0xc8>
c00160b2:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00160b6:	eb 04                	jmp    c00160bc <Reg::readInt(char*, char*, int*)+0xcc>
c00160b8:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00160bc:	47                   	inc    edi
c00160bd:	eb ae                	jmp    c001606d <Reg::readInt(char*, char*, int*)+0x7d>
c00160bf:	84 c0                	test   al,al
c00160c1:	74 02                	je     c00160c5 <Reg::readInt(char*, char*, int*)+0xd5>
c00160c3:	f7 da                	neg    edx
c00160c5:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00160cc:	89 10                	mov    DWORD PTR [eax],edx
c00160ce:	88 d8                	mov    al,bl
c00160d0:	81 c4 ec 00 00 00    	add    esp,0xec
c00160d6:	5b                   	pop    ebx
c00160d7:	5e                   	pop    esi
c00160d8:	5f                   	pop    edi
c00160d9:	5d                   	pop    ebp
c00160da:	c3                   	ret    

c00160db <Reg::readString(char*, char*, char*, int)>:
c00160db:	57                   	push   edi
c00160dc:	56                   	push   esi
c00160dd:	53                   	push   ebx
c00160de:	81 ec d4 00 00 00    	sub    esp,0xd4
c00160e4:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00160eb:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00160ef:	57                   	push   edi
c00160f0:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00160f7:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00160fe:	e8 b6 fe ff ff       	call   c0015fb9 <Reg::getLine(char*, char*, char*)>
c0016103:	83 c4 10             	add    esp,0x10
c0016106:	89 c6                	mov    esi,eax
c0016108:	84 c0                	test   al,al
c001610a:	74 44                	je     c0016150 <Reg::readString(char*, char*, char*, int)+0x75>
c001610c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0016113:	31 c0                	xor    eax,eax
c0016115:	4a                   	dec    edx
c0016116:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0016119:	84 c9                	test   cl,cl
c001611b:	74 0f                	je     c001612c <Reg::readString(char*, char*, char*, int)+0x51>
c001611d:	39 c2                	cmp    edx,eax
c001611f:	7e 0b                	jle    c001612c <Reg::readString(char*, char*, char*, int)+0x51>
c0016121:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0016124:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0016129:	40                   	inc    eax
c001612a:	eb ea                	jmp    c0016116 <Reg::readString(char*, char*, char*, int)+0x3b>
c001612c:	83 ec 0c             	sub    esp,0xc
c001612f:	53                   	push   ebx
c0016130:	e8 7b a5 fe ff       	call   c00006b0 <strlen>
c0016135:	83 c4 10             	add    esp,0x10
c0016138:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001613d:	75 11                	jne    c0016150 <Reg::readString(char*, char*, char*, int)+0x75>
c001613f:	83 ec 0c             	sub    esp,0xc
c0016142:	53                   	push   ebx
c0016143:	e8 68 a5 fe ff       	call   c00006b0 <strlen>
c0016148:	83 c4 10             	add    esp,0x10
c001614b:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0016150:	81 c4 d0 00 00 00    	add    esp,0xd0
c0016156:	89 f0                	mov    eax,esi
c0016158:	5b                   	pop    ebx
c0016159:	5e                   	pop    esi
c001615a:	5f                   	pop    edi
c001615b:	c3                   	ret    

c001615c <Reg::readBool(char*, char*, bool*)>:
c001615c:	83 ec 20             	sub    esp,0x20
c001615f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016163:	50                   	push   eax
c0016164:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016168:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001616c:	e8 7f fe ff ff       	call   c0015ff0 <Reg::readInt(char*, char*, int*)>
c0016171:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0016176:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001617a:	0f 95 02             	setne  BYTE PTR [edx]
c001617d:	83 c4 2c             	add    esp,0x2c
c0016180:	c3                   	ret    

c0016181 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0016181:	53                   	push   ebx
c0016182:	83 ec 1c             	sub    esp,0x1c
c0016185:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0016189:	8d 44 24 13          	lea    eax,[esp+0x13]
c001618d:	50                   	push   eax
c001618e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016192:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016196:	e8 c1 ff ff ff       	call   c001615c <Reg::readBool(char*, char*, bool*)>
c001619b:	83 c4 10             	add    esp,0x10
c001619e:	84 c0                	test   al,al
c00161a0:	74 04                	je     c00161a6 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00161a2:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00161a6:	88 d8                	mov    al,bl
c00161a8:	83 c4 18             	add    esp,0x18
c00161ab:	5b                   	pop    ebx
c00161ac:	c3                   	ret    

c00161ad <Reg::readIntWithDefault(char*, char*, int)>:
c00161ad:	53                   	push   ebx
c00161ae:	83 ec 1c             	sub    esp,0x1c
c00161b1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00161b5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00161b9:	50                   	push   eax
c00161ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00161c2:	e8 29 fe ff ff       	call   c0015ff0 <Reg::readInt(char*, char*, int*)>
c00161c7:	83 c4 10             	add    esp,0x10
c00161ca:	84 c0                	test   al,al
c00161cc:	74 04                	je     c00161d2 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00161ce:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00161d2:	89 d8                	mov    eax,ebx
c00161d4:	83 c4 18             	add    esp,0x18
c00161d7:	5b                   	pop    ebx
c00161d8:	c3                   	ret    

c00161d9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00161d9:	57                   	push   edi
c00161da:	56                   	push   esi
c00161db:	56                   	push   esi
c00161dc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00161e0:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00161e4:	56                   	push   esi
c00161e5:	57                   	push   edi
c00161e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00161ee:	e8 e8 fe ff ff       	call   c00160db <Reg::readString(char*, char*, char*, int)>
c00161f3:	83 c4 10             	add    esp,0x10
c00161f6:	84 c0                	test   al,al
c00161f8:	75 1a                	jne    c0016214 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00161fa:	51                   	push   ecx
c00161fb:	56                   	push   esi
c00161fc:	6a 00                	push   0x0
c00161fe:	57                   	push   edi
c00161ff:	e8 90 a4 fe ff       	call   c0000694 <memset>
c0016204:	8d 4e ff             	lea    ecx,[esi-0x1]
c0016207:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001620b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001620d:	83 c4 10             	add    esp,0x10
c0016210:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0016214:	89 f8                	mov    eax,edi
c0016216:	5a                   	pop    edx
c0016217:	5e                   	pop    esi
c0016218:	5f                   	pop    edi
c0016219:	c3                   	ret    

c001621a <Sys::eject(regs*)>:
c001621a:	83 ec 0c             	sub    esp,0xc
c001621d:	83 ca ff             	or     edx,0xffffffff
c0016220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016224:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016227:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001622c:	83 e9 41             	sub    ecx,0x41
c001622f:	83 f9 19             	cmp    ecx,0x19
c0016232:	77 18                	ja     c001624c <Sys::eject(regs*)+0x32>
c0016234:	8b 0c 8d 40 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6dc0]
c001623b:	85 c9                	test   ecx,ecx
c001623d:	74 0d                	je     c001624c <Sys::eject(regs*)+0x32>
c001623f:	83 ec 0c             	sub    esp,0xc
c0016242:	51                   	push   ecx
c0016243:	e8 20 a7 ff ff       	call   c0010968 <LogicalDisk::eject()>
c0016248:	83 c4 10             	add    esp,0x10
c001624b:	99                   	cdq    
c001624c:	83 c4 0c             	add    esp,0xc
c001624f:	c3                   	ret    

c0016250 <Sys::exit(regs*)>:
c0016250:	83 ec 18             	sub    esp,0x18
c0016253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016257:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001625a:	e8 59 36 00 00       	call   c00198b8 <terminateTask(int)>
c001625f:	83 c8 ff             	or     eax,0xffffffff
c0016262:	83 c4 1c             	add    esp,0x1c
c0016265:	89 c2                	mov    edx,eax
c0016267:	c3                   	ret    

c0016268 <Sys::getCwd(regs*)>:
c0016268:	83 ec 10             	sub    esp,0x10
c001626b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001626f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016272:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016275:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001627a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001627d:	e8 4a 71 ff ff       	call   c000d3cc <Fs::getcwd(Process*, char*, int)>
c0016282:	83 c4 1c             	add    esp,0x1c
c0016285:	99                   	cdq    
c0016286:	c3                   	ret    

c0016287 <Sys::getPID(regs*)>:
c0016287:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001628c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001628f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016291:	99                   	cdq    
c0016292:	c3                   	ret    

c0016293 <Sys::getRAMData(regs*)>:
c0016293:	8b 0d b8 8c 02 c0    	mov    ecx,DWORD PTR ds:0xc0028cb8
c0016299:	69 05 b4 8c 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0028cb4,0xc8
c00162a3:	99                   	cdq    
c00162a4:	f7 f9                	idiv   ecx
c00162a6:	c1 e0 18             	shl    eax,0x18
c00162a9:	09 c8                	or     eax,ecx
c00162ab:	99                   	cdq    
c00162ac:	c3                   	ret    

c00162ad <Sys::getVGAPtr(regs*)>:
c00162ad:	55                   	push   ebp
c00162ae:	57                   	push   edi
c00162af:	56                   	push   esi
c00162b0:	53                   	push   ebx
c00162b1:	83 ec 18             	sub    esp,0x18
c00162b4:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00162b8:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00162bb:	e8 fc 30 00 00       	call   c00193bc <Thr::processFromPID(int)>
c00162c0:	83 c4 10             	add    esp,0x10
c00162c3:	89 c1                	mov    ecx,eax
c00162c5:	b8 01 00 00 00       	mov    eax,0x1
c00162ca:	85 c9                	test   ecx,ecx
c00162cc:	74 59                	je     c0016327 <Sys::getVGAPtr(regs*)+0x7a>
c00162ce:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c00162d4:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00162d8:	74 0c                	je     c00162e6 <Sys::getVGAPtr(regs*)+0x39>
c00162da:	83 ec 0c             	sub    esp,0xc
c00162dd:	53                   	push   ebx
c00162de:	e8 8a 4b ff ff       	call   c000ae6d <setActiveTerminal(VgaText*)>
c00162e3:	83 c4 10             	add    esp,0x10
c00162e6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00162e9:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00162ec:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00162f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00162f3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00162f6:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00162f9:	81 c3 82 00 00 00    	add    ebx,0x82
c00162ff:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0016305:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0016308:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001630b:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0016311:	50                   	push   eax
c0016312:	50                   	push   eax
c0016313:	53                   	push   ebx
c0016314:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0016317:	05 a8 0f 00 00       	add    eax,0xfa8
c001631c:	50                   	push   eax
c001631d:	e8 2e a4 fe ff       	call   c0000750 <strcpy>
c0016322:	83 c4 10             	add    esp,0x10
c0016325:	31 c0                	xor    eax,eax
c0016327:	83 c4 0c             	add    esp,0xc
c001632a:	31 d2                	xor    edx,edx
c001632c:	5b                   	pop    ebx
c001632d:	5e                   	pop    esi
c001632e:	5f                   	pop    edi
c001632f:	5d                   	pop    ebp
c0016330:	c3                   	ret    

c0016331 <Sys::loadDLL(regs*)>:
c0016331:	56                   	push   esi
c0016332:	53                   	push   ebx
c0016333:	31 d2                	xor    edx,edx
c0016335:	51                   	push   ecx
c0016336:	b8 01 00 00 00       	mov    eax,0x1
c001633b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001633f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0016343:	0f 84 8c 00 00 00    	je     c00163d5 <Sys::loadDLL(regs*)+0xa4>
c0016349:	83 ec 0c             	sub    esp,0xc
c001634c:	68 14 01 00 00       	push   0x114
c0016351:	e8 1d 3a ff ff       	call   c0009d73 <malloc>
c0016356:	83 c4 0c             	add    esp,0xc
c0016359:	89 c3                	mov    ebx,eax
c001635b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016360:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016363:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016366:	53                   	push   ebx
c0016367:	e8 5e 72 ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c001636c:	83 c4 10             	add    esp,0x10
c001636f:	31 d2                	xor    edx,edx
c0016371:	b8 02 00 00 00       	mov    eax,0x2
c0016376:	85 db                	test   ebx,ebx
c0016378:	74 5b                	je     c00163d5 <Sys::loadDLL(regs*)+0xa4>
c001637a:	83 ec 0c             	sub    esp,0xc
c001637d:	53                   	push   ebx
c001637e:	e8 8f 75 ff ff       	call   c000d912 <File::exists()>
c0016383:	83 c4 10             	add    esp,0x10
c0016386:	84 c0                	test   al,al
c0016388:	8b 03                	mov    eax,DWORD PTR [ebx]
c001638a:	75 11                	jne    c001639d <Sys::loadDLL(regs*)+0x6c>
c001638c:	83 ec 0c             	sub    esp,0xc
c001638f:	53                   	push   ebx
c0016390:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016393:	83 c4 10             	add    esp,0x10
c0016396:	b8 03 00 00 00       	mov    eax,0x3
c001639b:	eb 36                	jmp    c00163d3 <Sys::loadDLL(regs*)+0xa2>
c001639d:	83 ec 0c             	sub    esp,0xc
c00163a0:	53                   	push   ebx
c00163a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163a4:	58                   	pop    eax
c00163a5:	5a                   	pop    edx
c00163a6:	6a 00                	push   0x0
c00163a8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00163ab:	e8 0a 22 00 00       	call   c00185ba <Thr::loadDLL(char const*, bool)>
c00163b0:	83 c4 10             	add    esp,0x10
c00163b3:	89 c1                	mov    ecx,eax
c00163b5:	31 d2                	xor    edx,edx
c00163b7:	b8 04 00 00 00       	mov    eax,0x4
c00163bc:	85 c9                	test   ecx,ecx
c00163be:	74 15                	je     c00163d5 <Sys::loadDLL(regs*)+0xa4>
c00163c0:	53                   	push   ebx
c00163c1:	53                   	push   ebx
c00163c2:	ff 35 88 8c 02 c0    	push   DWORD PTR ds:0xc0028c88
c00163c8:	51                   	push   ecx
c00163c9:	e8 1d 24 00 00       	call   c00187eb <Thr::executeDLL(unsigned long, void*)>
c00163ce:	83 c4 10             	add    esp,0x10
c00163d1:	31 c0                	xor    eax,eax
c00163d3:	31 d2                	xor    edx,edx
c00163d5:	59                   	pop    ecx
c00163d6:	5b                   	pop    ebx
c00163d7:	5e                   	pop    esi
c00163d8:	c3                   	ret    

c00163d9 <Sys::read(regs*)>:
c00163d9:	57                   	push   edi
c00163da:	56                   	push   esi
c00163db:	53                   	push   ebx
c00163dc:	83 ec 10             	sub    esp,0x10
c00163df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00163e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00163e6:	83 f8 02             	cmp    eax,0x2
c00163e9:	77 10                	ja     c00163fb <Sys::read(regs*)+0x22>
c00163eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00163f3:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00163f9:	eb 0e                	jmp    c0016409 <Sys::read(regs*)+0x30>
c00163fb:	83 ec 0c             	sub    esp,0xc
c00163fe:	50                   	push   eax
c00163ff:	e8 df 57 ff ff       	call   c000bbe3 <getFromFileDescriptor(int)>
c0016404:	83 c4 10             	add    esp,0x10
c0016407:	89 c1                	mov    ecx,eax
c0016409:	83 c8 ff             	or     eax,0xffffffff
c001640c:	85 c9                	test   ecx,ecx
c001640e:	89 c2                	mov    edx,eax
c0016410:	74 28                	je     c001643a <Sys::read(regs*)+0x61>
c0016412:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001641a:	31 ff                	xor    edi,edi
c001641c:	83 ec 0c             	sub    esp,0xc
c001641f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016421:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016425:	52                   	push   edx
c0016426:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016429:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001642c:	57                   	push   edi
c001642d:	56                   	push   esi
c001642e:	51                   	push   ecx
c001642f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016432:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016436:	83 c4 20             	add    esp,0x20
c0016439:	99                   	cdq    
c001643a:	83 c4 10             	add    esp,0x10
c001643d:	5b                   	pop    ebx
c001643e:	5e                   	pop    esi
c001643f:	5f                   	pop    edi
c0016440:	c3                   	ret    

c0016441 <Sys::sbrk(regs*)>:
c0016441:	56                   	push   esi
c0016442:	53                   	push   ebx
c0016443:	50                   	push   eax
c0016444:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016449:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001644d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016450:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0016453:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0016459:	85 db                	test   ebx,ebx
c001645b:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001645e:	74 02                	je     c0016462 <Sys::sbrk(regs*)+0x21>
c0016460:	79 06                	jns    c0016468 <Sys::sbrk(regs*)+0x27>
c0016462:	89 f0                	mov    eax,esi
c0016464:	31 d2                	xor    edx,edx
c0016466:	eb 2a                	jmp    c0016492 <Sys::sbrk(regs*)+0x51>
c0016468:	83 c8 ff             	or     eax,0xffffffff
c001646b:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0016471:	89 c2                	mov    edx,eax
c0016473:	77 1d                	ja     c0016492 <Sys::sbrk(regs*)+0x51>
c0016475:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001647b:	50                   	push   eax
c001647c:	c1 ea 0c             	shr    edx,0xc
c001647f:	68 07 0c 00 00       	push   0xc07
c0016484:	52                   	push   edx
c0016485:	51                   	push   ecx
c0016486:	e8 57 60 ff ff       	call   c000c4e2 <VAS::allocatePages(int, int)>
c001648b:	89 f0                	mov    eax,esi
c001648d:	31 d2                	xor    edx,edx
c001648f:	83 c4 10             	add    esp,0x10
c0016492:	59                   	pop    ecx
c0016493:	5b                   	pop    ebx
c0016494:	5e                   	pop    esi
c0016495:	c3                   	ret    

c0016496 <Sys::setCwd(regs*)>:
c0016496:	83 ec 14             	sub    esp,0x14
c0016499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001649d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00164a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164a5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00164a8:	e8 04 75 ff ff       	call   c000d9b1 <Fs::setcwd(Process*, char*)>
c00164ad:	83 c4 1c             	add    esp,0x1c
c00164b0:	99                   	cdq    
c00164b1:	c3                   	ret    

c00164b2 <Sys::setTime(regs*)>:
c00164b2:	55                   	push   ebp
c00164b3:	31 c9                	xor    ecx,ecx
c00164b5:	57                   	push   edi
c00164b6:	bd 0c 00 00 00       	mov    ebp,0xc
c00164bb:	56                   	push   esi
c00164bc:	53                   	push   ebx
c00164bd:	31 db                	xor    ebx,ebx
c00164bf:	83 ec 10             	sub    esp,0x10
c00164c2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00164c6:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00164c9:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00164cc:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00164cf:	89 c2                	mov    edx,eax
c00164d1:	66 81 ef 6c 07       	sub    di,0x76c
c00164d6:	83 e2 1f             	and    edx,0x1f
c00164d9:	c1 e7 10             	shl    edi,0x10
c00164dc:	42                   	inc    edx
c00164dd:	c1 e8 05             	shr    eax,0x5
c00164e0:	88 d1                	mov    cl,dl
c00164e2:	31 d2                	xor    edx,edx
c00164e4:	f7 f5                	div    ebp
c00164e6:	89 dd                	mov    ebp,ebx
c00164e8:	88 d5                	mov    ch,dl
c00164ea:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00164f0:	0f b7 c1             	movzx  eax,cx
c00164f3:	31 d2                	xor    edx,edx
c00164f5:	09 f8                	or     eax,edi
c00164f7:	bf 3c 00 00 00       	mov    edi,0x3c
c00164fc:	89 c1                	mov    ecx,eax
c00164fe:	89 f0                	mov    eax,esi
c0016500:	f7 f7                	div    edi
c0016502:	c1 e2 10             	shl    edx,0x10
c0016505:	09 d5                	or     ebp,edx
c0016507:	31 d2                	xor    edx,edx
c0016509:	89 eb                	mov    ebx,ebp
c001650b:	f7 f7                	div    edi
c001650d:	bf 10 0e 00 00       	mov    edi,0xe10
c0016512:	88 d7                	mov    bh,dl
c0016514:	89 f0                	mov    eax,esi
c0016516:	31 d2                	xor    edx,edx
c0016518:	f7 f7                	div    edi
c001651a:	bf 18 00 00 00       	mov    edi,0x18
c001651f:	31 d2                	xor    edx,edx
c0016521:	f7 f7                	div    edi
c0016523:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0016528:	88 d3                	mov    bl,dl
c001652a:	53                   	push   ebx
c001652b:	51                   	push   ecx
c001652c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016532:	e8 7b 7d ff ff       	call   c000e2b2 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0016537:	83 c4 1c             	add    esp,0x1c
c001653a:	83 f0 01             	xor    eax,0x1
c001653d:	5b                   	pop    ebx
c001653e:	0f b6 c0             	movzx  eax,al
c0016541:	5e                   	pop    esi
c0016542:	31 d2                	xor    edx,edx
c0016544:	5f                   	pop    edi
c0016545:	5d                   	pop    ebp
c0016546:	c3                   	ret    

c0016547 <Sys::timezone(regs*)>:
c0016547:	53                   	push   ebx
c0016548:	83 ec 08             	sub    esp,0x8
c001654b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001654f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0016553:	75 17                	jne    c001656c <Sys::timezone(regs*)+0x25>
c0016555:	83 ec 0c             	sub    esp,0xc
c0016558:	68 b9 6a 02 c0       	push   0xc0026ab9
c001655d:	e8 fd 6a ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0016562:	83 c8 ff             	or     eax,0xffffffff
c0016565:	83 c4 10             	add    esp,0x10
c0016568:	89 c2                	mov    edx,eax
c001656a:	eb 20                	jmp    c001658c <Sys::timezone(regs*)+0x45>
c001656c:	83 ec 0c             	sub    esp,0xc
c001656f:	68 ce 6a 02 c0       	push   0xc0026ace
c0016574:	e8 e6 6a ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0016579:	58                   	pop    eax
c001657a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001657d:	e8 92 7a ff ff       	call   c000e014 <User::loadClockSettings(int)>
c0016582:	83 c4 10             	add    esp,0x10
c0016585:	b8 01 00 00 00       	mov    eax,0x1
c001658a:	31 d2                	xor    edx,edx
c001658c:	83 c4 08             	add    esp,0x8
c001658f:	5b                   	pop    ebx
c0016590:	c3                   	ret    

c0016591 <Sys::write(regs*)>:
c0016591:	57                   	push   edi
c0016592:	56                   	push   esi
c0016593:	53                   	push   ebx
c0016594:	83 ec 10             	sub    esp,0x10
c0016597:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001659b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001659e:	83 f8 02             	cmp    eax,0x2
c00165a1:	77 10                	ja     c00165b3 <Sys::write(regs*)+0x22>
c00165a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165a8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00165ab:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00165b1:	eb 0e                	jmp    c00165c1 <Sys::write(regs*)+0x30>
c00165b3:	83 ec 0c             	sub    esp,0xc
c00165b6:	50                   	push   eax
c00165b7:	e8 27 56 ff ff       	call   c000bbe3 <getFromFileDescriptor(int)>
c00165bc:	83 c4 10             	add    esp,0x10
c00165bf:	89 c1                	mov    ecx,eax
c00165c1:	83 c8 ff             	or     eax,0xffffffff
c00165c4:	85 c9                	test   ecx,ecx
c00165c6:	89 c2                	mov    edx,eax
c00165c8:	74 28                	je     c00165f2 <Sys::write(regs*)+0x61>
c00165ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00165d2:	31 ff                	xor    edi,edi
c00165d4:	83 ec 0c             	sub    esp,0xc
c00165d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00165d9:	8d 54 24 18          	lea    edx,[esp+0x18]
c00165dd:	52                   	push   edx
c00165de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00165e1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00165e4:	57                   	push   edi
c00165e5:	56                   	push   esi
c00165e6:	51                   	push   ecx
c00165e7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00165ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00165ee:	83 c4 20             	add    esp,0x20
c00165f1:	99                   	cdq    
c00165f2:	83 c4 10             	add    esp,0x10
c00165f5:	5b                   	pop    ebx
c00165f6:	5e                   	pop    esi
c00165f7:	5f                   	pop    edi
c00165f8:	c3                   	ret    

c00165f9 <Sys::wsbe(regs*)>:
c00165f9:	57                   	push   edi
c00165fa:	b9 0b 00 00 00       	mov    ecx,0xb
c00165ff:	56                   	push   esi
c0016600:	be 0d 6b 02 c0       	mov    esi,0xc0026b0d
c0016605:	53                   	push   ebx
c0016606:	83 ec 30             	sub    esp,0x30
c0016609:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001660d:	fc                   	cld    
c001660e:	83 ec 0c             	sub    esp,0xc
c0016611:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0016613:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0016617:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001661c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001661f:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0016625:	8b 06                	mov    eax,DWORD PTR [esi]
c0016627:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001662a:	57                   	push   edi
c001662b:	e8 80 a0 fe ff       	call   c00006b0 <strlen>
c0016630:	5a                   	pop    edx
c0016631:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0016635:	52                   	push   edx
c0016636:	31 d2                	xor    edx,edx
c0016638:	57                   	push   edi
c0016639:	52                   	push   edx
c001663a:	50                   	push   eax
c001663b:	56                   	push   esi
c001663c:	ff d3                	call   ebx
c001663e:	83 c4 14             	add    esp,0x14
c0016641:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016645:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016648:	e8 6b 32 00 00       	call   c00198b8 <terminateTask(int)>
c001664d:	83 c4 40             	add    esp,0x40
c0016650:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016655:	5b                   	pop    ebx
c0016656:	31 d2                	xor    edx,edx
c0016658:	5e                   	pop    esi
c0016659:	5f                   	pop    edi
c001665a:	c3                   	ret    

c001665b <Sys::yield(regs*)>:
c001665b:	83 ec 0c             	sub    esp,0xc
c001665e:	fa                   	cli    
c001665f:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c0016665:	e8 36 29 00 00       	call   c0018fa0 <schedule()>
c001666a:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c001666f:	48                   	dec    eax
c0016670:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0016675:	75 01                	jne    c0016678 <Sys::yield(regs*)+0x1d>
c0016677:	fb                   	sti    
c0016678:	8b 15 ac 92 02 c0    	mov    edx,DWORD PTR ds:0xc00292ac
c001667e:	83 c4 0c             	add    esp,0xc
c0016681:	89 d0                	mov    eax,edx
c0016683:	c1 ea 11             	shr    edx,0x11
c0016686:	c1 e0 07             	shl    eax,0x7
c0016689:	25 80 30 0f 00       	and    eax,0xf3080
c001668e:	31 d0                	xor    eax,edx
c0016690:	31 d2                	xor    edx,edx
c0016692:	c3                   	ret    

c0016693 <sysCallSeekDir(regs*)>:
c0016693:	31 c0                	xor    eax,eax
c0016695:	31 d2                	xor    edx,edx
c0016697:	c3                   	ret    

c0016698 <sysCallTellDir(regs*)>:
c0016698:	31 c0                	xor    eax,eax
c001669a:	31 d2                	xor    edx,edx
c001669c:	c3                   	ret    

c001669d <sysCallVerify(regs*)>:
c001669d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166a1:	31 d2                	xor    edx,edx
c00166a3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00166a6:	c3                   	ret    

c00166a7 <sysCallGetArgc(regs*)>:
c00166a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166af:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00166b5:	99                   	cdq    
c00166b6:	c3                   	ret    

c00166b7 <sysFormatDisk(regs*)>:
c00166b7:	56                   	push   esi
c00166b8:	53                   	push   ebx
c00166b9:	53                   	push   ebx
c00166ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166be:	8b 1d b4 8d 02 c0    	mov    ebx,DWORD PTR ds:0xc0028db4
c00166c4:	eb 25                	jmp    c00166eb <sysFormatDisk(regs*)+0x34>
c00166c6:	83 ec 0c             	sub    esp,0xc
c00166c9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00166cc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00166ce:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00166d1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00166d4:	50                   	push   eax
c00166d5:	ff 34 85 40 92 02 c0 	push   DWORD PTR [eax*4-0x3ffd6dc0]
c00166dc:	53                   	push   ebx
c00166dd:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00166e0:	83 c4 20             	add    esp,0x20
c00166e3:	83 f8 08             	cmp    eax,0x8
c00166e6:	75 12                	jne    c00166fa <sysFormatDisk(regs*)+0x43>
c00166e8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00166eb:	85 db                	test   ebx,ebx
c00166ed:	75 d7                	jne    c00166c6 <sysFormatDisk(regs*)+0xf>
c00166ef:	59                   	pop    ecx
c00166f0:	b8 03 00 00 00       	mov    eax,0x3
c00166f5:	31 d2                	xor    edx,edx
c00166f7:	5b                   	pop    ebx
c00166f8:	5e                   	pop    esi
c00166f9:	c3                   	ret    
c00166fa:	85 c0                	test   eax,eax
c00166fc:	74 1b                	je     c0016719 <sysFormatDisk(regs*)+0x62>
c00166fe:	83 f8 09             	cmp    eax,0x9
c0016701:	74 0b                	je     c001670e <sysFormatDisk(regs*)+0x57>
c0016703:	59                   	pop    ecx
c0016704:	b8 02 00 00 00       	mov    eax,0x2
c0016709:	31 d2                	xor    edx,edx
c001670b:	5b                   	pop    ebx
c001670c:	5e                   	pop    esi
c001670d:	c3                   	ret    
c001670e:	59                   	pop    ecx
c001670f:	b8 01 00 00 00       	mov    eax,0x1
c0016714:	31 d2                	xor    edx,edx
c0016716:	5b                   	pop    ebx
c0016717:	5e                   	pop    esi
c0016718:	c3                   	ret    
c0016719:	59                   	pop    ecx
c001671a:	31 c0                	xor    eax,eax
c001671c:	31 d2                	xor    edx,edx
c001671e:	5b                   	pop    ebx
c001671f:	5e                   	pop    esi
c0016720:	c3                   	ret    

c0016721 <sysSetDiskVolumeLabel(regs*)>:
c0016721:	56                   	push   esi
c0016722:	53                   	push   ebx
c0016723:	53                   	push   ebx
c0016724:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016728:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001672b:	83 f8 19             	cmp    eax,0x19
c001672e:	77 2d                	ja     c001675d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016730:	8b 0c 85 40 92 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6dc0]
c0016737:	85 c9                	test   ecx,ecx
c0016739:	74 22                	je     c001675d <sysSetDiskVolumeLabel(regs*)+0x3c>
c001673b:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001673e:	85 db                	test   ebx,ebx
c0016740:	74 1b                	je     c001675d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016742:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0016748:	85 d2                	test   edx,edx
c001674a:	74 11                	je     c001675d <sysSetDiskVolumeLabel(regs*)+0x3c>
c001674c:	8b 32                	mov    esi,DWORD PTR [edx]
c001674e:	53                   	push   ebx
c001674f:	50                   	push   eax
c0016750:	51                   	push   ecx
c0016751:	52                   	push   edx
c0016752:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0016755:	83 c4 10             	add    esp,0x10
c0016758:	99                   	cdq    
c0016759:	59                   	pop    ecx
c001675a:	5b                   	pop    ebx
c001675b:	5e                   	pop    esi
c001675c:	c3                   	ret    
c001675d:	59                   	pop    ecx
c001675e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016763:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016768:	5b                   	pop    ebx
c0016769:	5e                   	pop    esi
c001676a:	c3                   	ret    

c001676b <sysGetDiskVolumeLabel(regs*)>:
c001676b:	57                   	push   edi
c001676c:	56                   	push   esi
c001676d:	53                   	push   ebx
c001676e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016772:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016775:	83 fa 19             	cmp    edx,0x19
c0016778:	77 38                	ja     c00167b2 <sysGetDiskVolumeLabel(regs*)+0x47>
c001677a:	8b 0c 95 40 92 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6dc0]
c0016781:	85 c9                	test   ecx,ecx
c0016783:	74 2d                	je     c00167b2 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016785:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016788:	85 db                	test   ebx,ebx
c001678a:	74 26                	je     c00167b2 <sysGetDiskVolumeLabel(regs*)+0x47>
c001678c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001678f:	85 f6                	test   esi,esi
c0016791:	74 1f                	je     c00167b2 <sysGetDiskVolumeLabel(regs*)+0x47>
c0016793:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0016799:	85 c0                	test   eax,eax
c001679b:	74 15                	je     c00167b2 <sysGetDiskVolumeLabel(regs*)+0x47>
c001679d:	83 ec 0c             	sub    esp,0xc
c00167a0:	8b 38                	mov    edi,DWORD PTR [eax]
c00167a2:	56                   	push   esi
c00167a3:	53                   	push   ebx
c00167a4:	52                   	push   edx
c00167a5:	51                   	push   ecx
c00167a6:	50                   	push   eax
c00167a7:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00167aa:	83 c4 20             	add    esp,0x20
c00167ad:	99                   	cdq    
c00167ae:	5b                   	pop    ebx
c00167af:	5e                   	pop    esi
c00167b0:	5f                   	pop    edi
c00167b1:	c3                   	ret    
c00167b2:	5b                   	pop    ebx
c00167b3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00167b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00167bd:	5e                   	pop    esi
c00167be:	5f                   	pop    edi
c00167bf:	c3                   	ret    

c00167c0 <sysShutdown(regs*)>:
c00167c0:	83 ec 0c             	sub    esp,0xc
c00167c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167c7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00167ca:	85 c0                	test   eax,eax
c00167cc:	74 18                	je     c00167e6 <sysShutdown(regs*)+0x26>
c00167ce:	83 f8 01             	cmp    eax,0x1
c00167d1:	74 38                	je     c001680b <sysShutdown(regs*)+0x4b>
c00167d3:	83 f8 02             	cmp    eax,0x2
c00167d6:	74 24                	je     c00167fc <sysShutdown(regs*)+0x3c>
c00167d8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00167dd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00167e2:	83 c4 0c             	add    esp,0xc
c00167e5:	c3                   	ret    
c00167e6:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c00167eb:	8b 10                	mov    edx,DWORD PTR [eax]
c00167ed:	6a 00                	push   0x0
c00167ef:	6a 00                	push   0x0
c00167f1:	6a 00                	push   0x0
c00167f3:	50                   	push   eax
c00167f4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00167f7:	83 c4 10             	add    esp,0x10
c00167fa:	eb dc                	jmp    c00167d8 <sysShutdown(regs*)+0x18>
c00167fc:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0016801:	8b 10                	mov    edx,DWORD PTR [eax]
c0016803:	6a 00                	push   0x0
c0016805:	6a 00                	push   0x0
c0016807:	6a 01                	push   0x1
c0016809:	eb e8                	jmp    c00167f3 <sysShutdown(regs*)+0x33>
c001680b:	a1 c0 92 02 c0       	mov    eax,ds:0xc00292c0
c0016810:	85 c0                	test   eax,eax
c0016812:	74 02                	je     c0016816 <sysShutdown(regs*)+0x56>
c0016814:	ff d0                	call   eax
c0016816:	31 c0                	xor    eax,eax
c0016818:	31 d2                	xor    edx,edx
c001681a:	83 c4 0c             	add    esp,0xc
c001681d:	c3                   	ret    

c001681e <sysCallRealpath(regs*)>:
c001681e:	83 ec 0c             	sub    esp,0xc
c0016821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016825:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016828:	85 d2                	test   edx,edx
c001682a:	74 07                	je     c0016833 <sysCallRealpath(regs*)+0x15>
c001682c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001682f:	85 c0                	test   eax,eax
c0016831:	75 0b                	jne    c001683e <sysCallRealpath(regs*)+0x20>
c0016833:	b8 01 00 00 00       	mov    eax,0x1
c0016838:	31 d2                	xor    edx,edx
c001683a:	83 c4 0c             	add    esp,0xc
c001683d:	c3                   	ret    
c001683e:	51                   	push   ecx
c001683f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016845:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016848:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001684e:	51                   	push   ecx
c001684f:	52                   	push   edx
c0016850:	50                   	push   eax
c0016851:	e8 ca 6b ff ff       	call   c000d420 <Fs::standardiseFiles(char*, char const*, char const*)>
c0016856:	83 c4 10             	add    esp,0x10
c0016859:	31 c0                	xor    eax,eax
c001685b:	31 d2                	xor    edx,edx
c001685d:	83 c4 0c             	add    esp,0xc
c0016860:	c3                   	ret    

c0016861 <sysCallReadDir(regs*)>:
c0016861:	53                   	push   ebx
c0016862:	83 ec 18             	sub    esp,0x18
c0016865:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016869:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001686c:	83 f8 02             	cmp    eax,0x2
c001686f:	76 60                	jbe    c00168d1 <sysCallReadDir(regs*)+0x70>
c0016871:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0016878:	77 48                	ja     c00168c2 <sysCallReadDir(regs*)+0x61>
c001687a:	83 ec 0c             	sub    esp,0xc
c001687d:	50                   	push   eax
c001687e:	e8 60 53 ff ff       	call   c000bbe3 <getFromFileDescriptor(int)>
c0016883:	83 c4 10             	add    esp,0x10
c0016886:	85 c0                	test   eax,eax
c0016888:	74 38                	je     c00168c2 <sysCallReadDir(regs*)+0x61>
c001688a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016892:	83 ec 0c             	sub    esp,0xc
c0016895:	8b 10                	mov    edx,DWORD PTR [eax]
c0016897:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001689b:	51                   	push   ecx
c001689c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001689f:	6a 00                	push   0x0
c00168a1:	68 10 01 00 00       	push   0x110
c00168a6:	50                   	push   eax
c00168a7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00168aa:	83 c4 20             	add    esp,0x20
c00168ad:	85 c0                	test   eax,eax
c00168af:	74 29                	je     c00168da <sysCallReadDir(regs*)+0x79>
c00168b1:	83 f8 07             	cmp    eax,0x7
c00168b4:	74 1b                	je     c00168d1 <sysCallReadDir(regs*)+0x70>
c00168b6:	b8 02 00 00 00       	mov    eax,0x2
c00168bb:	31 d2                	xor    edx,edx
c00168bd:	83 c4 18             	add    esp,0x18
c00168c0:	5b                   	pop    ebx
c00168c1:	c3                   	ret    
c00168c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00168c7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00168cc:	83 c4 18             	add    esp,0x18
c00168cf:	5b                   	pop    ebx
c00168d0:	c3                   	ret    
c00168d1:	b8 01 00 00 00       	mov    eax,0x1
c00168d6:	31 d2                	xor    edx,edx
c00168d8:	eb e3                	jmp    c00168bd <sysCallReadDir(regs*)+0x5c>
c00168da:	31 c0                	xor    eax,eax
c00168dc:	31 d2                	xor    edx,edx
c00168de:	eb dd                	jmp    c00168bd <sysCallReadDir(regs*)+0x5c>

c00168e0 <sysCallIsATTY(regs*)>:
c00168e0:	83 ec 0c             	sub    esp,0xc
c00168e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168e7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00168ea:	83 f8 02             	cmp    eax,0x2
c00168ed:	76 07                	jbe    c00168f6 <sysCallIsATTY(regs*)+0x16>
c00168ef:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00168f4:	75 26                	jne    c001691c <sysCallIsATTY(regs*)+0x3c>
c00168f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00168fe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016904:	85 c0                	test   eax,eax
c0016906:	74 24                	je     c001692c <sysCallIsATTY(regs*)+0x4c>
c0016908:	83 ec 0c             	sub    esp,0xc
c001690b:	8b 10                	mov    edx,DWORD PTR [eax]
c001690d:	50                   	push   eax
c001690e:	ff 12                	call   DWORD PTR [edx]
c0016910:	31 d2                	xor    edx,edx
c0016912:	0f b6 c0             	movzx  eax,al
c0016915:	83 c4 10             	add    esp,0x10
c0016918:	83 c4 0c             	add    esp,0xc
c001691b:	c3                   	ret    
c001691c:	83 ec 0c             	sub    esp,0xc
c001691f:	50                   	push   eax
c0016920:	e8 be 52 ff ff       	call   c000bbe3 <getFromFileDescriptor(int)>
c0016925:	83 c4 10             	add    esp,0x10
c0016928:	85 c0                	test   eax,eax
c001692a:	75 dc                	jne    c0016908 <sysCallIsATTY(regs*)+0x28>
c001692c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016931:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016936:	83 c4 0c             	add    esp,0xc
c0016939:	c3                   	ret    

c001693a <sysCallSeek(regs*)>:
c001693a:	53                   	push   ebx
c001693b:	83 ec 08             	sub    esp,0x8
c001693e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016942:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016945:	8d 50 fd             	lea    edx,[eax-0x3]
c0016948:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001694e:	77 32                	ja     c0016982 <sysCallSeek(regs*)+0x48>
c0016950:	83 ec 0c             	sub    esp,0xc
c0016953:	50                   	push   eax
c0016954:	e8 8a 52 ff ff       	call   c000bbe3 <getFromFileDescriptor(int)>
c0016959:	83 c4 0c             	add    esp,0xc
c001695c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001695f:	31 db                	xor    ebx,ebx
c0016961:	53                   	push   ebx
c0016962:	51                   	push   ecx
c0016963:	50                   	push   eax
c0016964:	e8 f9 6d ff ff       	call   c000d762 <File::seek(unsigned long long)>
c0016969:	83 c4 10             	add    esp,0x10
c001696c:	85 c0                	test   eax,eax
c001696e:	0f 95 c0             	setne  al
c0016971:	31 d2                	xor    edx,edx
c0016973:	0f b6 c0             	movzx  eax,al
c0016976:	f7 d8                	neg    eax
c0016978:	83 d2 00             	adc    edx,0x0
c001697b:	83 c4 08             	add    esp,0x8
c001697e:	f7 da                	neg    edx
c0016980:	5b                   	pop    ebx
c0016981:	c3                   	ret    
c0016982:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016987:	ba ff ff ff ff       	mov    edx,0xffffffff
c001698c:	83 c4 08             	add    esp,0x8
c001698f:	5b                   	pop    ebx
c0016990:	c3                   	ret    

c0016991 <sysCallTell(regs*)>:
c0016991:	53                   	push   ebx
c0016992:	83 ec 08             	sub    esp,0x8
c0016995:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016999:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001699c:	83 f8 02             	cmp    eax,0x2
c001699f:	76 4d                	jbe    c00169ee <sysCallTell(regs*)+0x5d>
c00169a1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00169a6:	76 19                	jbe    c00169c1 <sysCallTell(regs*)+0x30>
c00169a8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00169ab:	31 d2                	xor    edx,edx
c00169ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00169b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169ba:	31 c0                	xor    eax,eax
c00169bc:	83 c4 08             	add    esp,0x8
c00169bf:	5b                   	pop    ebx
c00169c0:	c3                   	ret    
c00169c1:	83 ec 0c             	sub    esp,0xc
c00169c4:	50                   	push   eax
c00169c5:	e8 19 52 ff ff       	call   c000bbe3 <getFromFileDescriptor(int)>
c00169ca:	5a                   	pop    edx
c00169cb:	59                   	pop    ecx
c00169cc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00169cf:	50                   	push   eax
c00169d0:	e8 e3 6d ff ff       	call   c000d7b8 <File::tell(unsigned long long*)>
c00169d5:	83 c4 10             	add    esp,0x10
c00169d8:	85 c0                	test   eax,eax
c00169da:	0f 95 c0             	setne  al
c00169dd:	31 d2                	xor    edx,edx
c00169df:	0f b6 c0             	movzx  eax,al
c00169e2:	f7 d8                	neg    eax
c00169e4:	83 d2 00             	adc    edx,0x0
c00169e7:	83 c4 08             	add    esp,0x8
c00169ea:	f7 da                	neg    edx
c00169ec:	5b                   	pop    ebx
c00169ed:	c3                   	ret    
c00169ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00169f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00169f8:	83 c4 08             	add    esp,0x8
c00169fb:	5b                   	pop    ebx
c00169fc:	c3                   	ret    

c00169fd <sysCallSize(regs*)>:
c00169fd:	53                   	push   ebx
c00169fe:	83 ec 18             	sub    esp,0x18
c0016a01:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016a05:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016a08:	83 f8 02             	cmp    eax,0x2
c0016a0b:	76 53                	jbe    c0016a60 <sysCallSize(regs*)+0x63>
c0016a0d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016a12:	76 19                	jbe    c0016a2d <sysCallSize(regs*)+0x30>
c0016a14:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016a17:	31 d2                	xor    edx,edx
c0016a19:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016a1f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016a26:	31 c0                	xor    eax,eax
c0016a28:	83 c4 18             	add    esp,0x18
c0016a2b:	5b                   	pop    ebx
c0016a2c:	c3                   	ret    
c0016a2d:	83 ec 0c             	sub    esp,0xc
c0016a30:	50                   	push   eax
c0016a31:	e8 ad 51 ff ff       	call   c000bbe3 <getFromFileDescriptor(int)>
c0016a36:	83 c4 0c             	add    esp,0xc
c0016a39:	8d 54 24 13          	lea    edx,[esp+0x13]
c0016a3d:	52                   	push   edx
c0016a3e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016a41:	50                   	push   eax
c0016a42:	e8 09 6f ff ff       	call   c000d950 <File::stat(unsigned long long*, bool*)>
c0016a47:	83 c4 10             	add    esp,0x10
c0016a4a:	85 c0                	test   eax,eax
c0016a4c:	0f 95 c0             	setne  al
c0016a4f:	31 d2                	xor    edx,edx
c0016a51:	0f b6 c0             	movzx  eax,al
c0016a54:	f7 d8                	neg    eax
c0016a56:	83 d2 00             	adc    edx,0x0
c0016a59:	83 c4 18             	add    esp,0x18
c0016a5c:	f7 da                	neg    edx
c0016a5e:	5b                   	pop    ebx
c0016a5f:	c3                   	ret    
c0016a60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016a65:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016a6a:	83 c4 18             	add    esp,0x18
c0016a6d:	5b                   	pop    ebx
c0016a6e:	c3                   	ret    

c0016a6f <sysCallSizeFromFilename(regs*)>:
c0016a6f:	57                   	push   edi
c0016a70:	56                   	push   esi
c0016a71:	53                   	push   ebx
c0016a72:	83 ec 20             	sub    esp,0x20
c0016a75:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a79:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0016a7c:	83 fb 02             	cmp    ebx,0x2
c0016a7f:	0f 86 88 00 00 00    	jbe    c0016b0d <sysCallSizeFromFilename(regs*)+0x9e>
c0016a85:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0016a8b:	76 1b                	jbe    c0016aa8 <sysCallSizeFromFilename(regs*)+0x39>
c0016a8d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016a90:	31 d2                	xor    edx,edx
c0016a92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016a98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016a9f:	83 c4 20             	add    esp,0x20
c0016aa2:	31 c0                	xor    eax,eax
c0016aa4:	5b                   	pop    ebx
c0016aa5:	5e                   	pop    esi
c0016aa6:	5f                   	pop    edi
c0016aa7:	c3                   	ret    
c0016aa8:	83 ec 0c             	sub    esp,0xc
c0016aab:	68 14 01 00 00       	push   0x114
c0016ab0:	e8 be 32 ff ff       	call   c0009d73 <malloc>
c0016ab5:	83 c4 0c             	add    esp,0xc
c0016ab8:	89 c7                	mov    edi,eax
c0016aba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016abf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016ac2:	53                   	push   ebx
c0016ac3:	57                   	push   edi
c0016ac4:	e8 01 6b ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c0016ac9:	83 c4 0c             	add    esp,0xc
c0016acc:	8d 44 24 23          	lea    eax,[esp+0x23]
c0016ad0:	50                   	push   eax
c0016ad1:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0016ad4:	57                   	push   edi
c0016ad5:	e8 76 6e ff ff       	call   c000d950 <File::stat(unsigned long long*, bool*)>
c0016ada:	83 c4 10             	add    esp,0x10
c0016add:	85 ff                	test   edi,edi
c0016adf:	74 14                	je     c0016af5 <sysCallSizeFromFilename(regs*)+0x86>
c0016ae1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ae5:	8b 17                	mov    edx,DWORD PTR [edi]
c0016ae7:	83 ec 0c             	sub    esp,0xc
c0016aea:	57                   	push   edi
c0016aeb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016aee:	83 c4 10             	add    esp,0x10
c0016af1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016af5:	85 c0                	test   eax,eax
c0016af7:	0f 95 c0             	setne  al
c0016afa:	31 d2                	xor    edx,edx
c0016afc:	0f b6 c0             	movzx  eax,al
c0016aff:	f7 d8                	neg    eax
c0016b01:	83 d2 00             	adc    edx,0x0
c0016b04:	83 c4 20             	add    esp,0x20
c0016b07:	f7 da                	neg    edx
c0016b09:	5b                   	pop    ebx
c0016b0a:	5e                   	pop    esi
c0016b0b:	5f                   	pop    edi
c0016b0c:	c3                   	ret    
c0016b0d:	83 c4 20             	add    esp,0x20
c0016b10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016b15:	5b                   	pop    ebx
c0016b16:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016b1b:	5e                   	pop    esi
c0016b1c:	5f                   	pop    edi
c0016b1d:	c3                   	ret    

c0016b1e <sysCallClose(regs*)>:
c0016b1e:	53                   	push   ebx
c0016b1f:	83 ec 08             	sub    esp,0x8
c0016b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b26:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016b29:	83 f8 02             	cmp    eax,0x2
c0016b2c:	76 41                	jbe    c0016b6f <sysCallClose(regs*)+0x51>
c0016b2e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0016b34:	83 fa 01             	cmp    edx,0x1
c0016b37:	76 2d                	jbe    c0016b66 <sysCallClose(regs*)+0x48>
c0016b39:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016b3e:	77 2f                	ja     c0016b6f <sysCallClose(regs*)+0x51>
c0016b40:	83 ec 0c             	sub    esp,0xc
c0016b43:	50                   	push   eax
c0016b44:	e8 9a 50 ff ff       	call   c000bbe3 <getFromFileDescriptor(int)>
c0016b49:	89 c3                	mov    ebx,eax
c0016b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b4e:	e8 af 6b ff ff       	call   c000d702 <File::close()>
c0016b53:	83 c4 10             	add    esp,0x10
c0016b56:	85 db                	test   ebx,ebx
c0016b58:	74 0c                	je     c0016b66 <sysCallClose(regs*)+0x48>
c0016b5a:	83 ec 0c             	sub    esp,0xc
c0016b5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b5f:	53                   	push   ebx
c0016b60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b63:	83 c4 10             	add    esp,0x10
c0016b66:	31 c0                	xor    eax,eax
c0016b68:	31 d2                	xor    edx,edx
c0016b6a:	83 c4 08             	add    esp,0x8
c0016b6d:	5b                   	pop    ebx
c0016b6e:	c3                   	ret    
c0016b6f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016b74:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016b79:	83 c4 08             	add    esp,0x8
c0016b7c:	5b                   	pop    ebx
c0016b7d:	c3                   	ret    

c0016b7e <sysCallOpenDir(regs*)>:
c0016b7e:	56                   	push   esi
c0016b7f:	53                   	push   ebx
c0016b80:	53                   	push   ebx
c0016b81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b85:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0016b88:	85 f6                	test   esi,esi
c0016b8a:	74 59                	je     c0016be5 <sysCallOpenDir(regs*)+0x67>
c0016b8c:	83 ec 0c             	sub    esp,0xc
c0016b8f:	68 14 01 00 00       	push   0x114
c0016b94:	e8 da 31 ff ff       	call   c0009d73 <malloc>
c0016b99:	83 c4 0c             	add    esp,0xc
c0016b9c:	89 c6                	mov    esi,eax
c0016b9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ba3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016ba6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016ba9:	56                   	push   esi
c0016baa:	e8 7b 6f ff ff       	call   c000db2a <Directory::Directory(char const*, Process*)>
c0016baf:	83 c4 10             	add    esp,0x10
c0016bb2:	85 f6                	test   esi,esi
c0016bb4:	74 2f                	je     c0016be5 <sysCallOpenDir(regs*)+0x67>
c0016bb6:	83 ec 0c             	sub    esp,0xc
c0016bb9:	56                   	push   esi
c0016bba:	e8 45 70 ff ff       	call   c000dc04 <Directory::open()>
c0016bbf:	83 c4 10             	add    esp,0x10
c0016bc2:	85 c0                	test   eax,eax
c0016bc4:	75 1f                	jne    c0016be5 <sysCallOpenDir(regs*)+0x67>
c0016bc6:	83 ec 0c             	sub    esp,0xc
c0016bc9:	56                   	push   esi
c0016bca:	e8 1f 4d ff ff       	call   c000b8ee <UnixFile::getFileDescriptor()>
c0016bcf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016bd2:	83 c4 10             	add    esp,0x10
c0016bd5:	89 02                	mov    DWORD PTR [edx],eax
c0016bd7:	c1 f8 1f             	sar    eax,0x1f
c0016bda:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016bdd:	31 c0                	xor    eax,eax
c0016bdf:	59                   	pop    ecx
c0016be0:	31 d2                	xor    edx,edx
c0016be2:	5b                   	pop    ebx
c0016be3:	5e                   	pop    esi
c0016be4:	c3                   	ret    
c0016be5:	59                   	pop    ecx
c0016be6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016beb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016bf0:	5b                   	pop    ebx
c0016bf1:	5e                   	pop    esi
c0016bf2:	c3                   	ret    

c0016bf3 <sysCallCloseDir(regs*)>:
c0016bf3:	53                   	push   ebx
c0016bf4:	83 ec 08             	sub    esp,0x8
c0016bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bfb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016bfe:	8d 50 fd             	lea    edx,[eax-0x3]
c0016c01:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016c07:	77 2f                	ja     c0016c38 <sysCallCloseDir(regs*)+0x45>
c0016c09:	83 ec 0c             	sub    esp,0xc
c0016c0c:	50                   	push   eax
c0016c0d:	e8 d1 4f ff ff       	call   c000bbe3 <getFromFileDescriptor(int)>
c0016c12:	89 c3                	mov    ebx,eax
c0016c14:	89 04 24             	mov    DWORD PTR [esp],eax
c0016c17:	e8 44 70 ff ff       	call   c000dc60 <Directory::close()>
c0016c1c:	83 c4 10             	add    esp,0x10
c0016c1f:	85 db                	test   ebx,ebx
c0016c21:	74 0c                	je     c0016c2f <sysCallCloseDir(regs*)+0x3c>
c0016c23:	83 ec 0c             	sub    esp,0xc
c0016c26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c28:	53                   	push   ebx
c0016c29:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c2c:	83 c4 10             	add    esp,0x10
c0016c2f:	31 c0                	xor    eax,eax
c0016c31:	31 d2                	xor    edx,edx
c0016c33:	83 c4 08             	add    esp,0x8
c0016c36:	5b                   	pop    ebx
c0016c37:	c3                   	ret    
c0016c38:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016c3d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016c42:	83 c4 08             	add    esp,0x8
c0016c45:	5b                   	pop    ebx
c0016c46:	c3                   	ret    

c0016c47 <sysCallMakeDir(regs*)>:
c0016c47:	56                   	push   esi
c0016c48:	53                   	push   ebx
c0016c49:	83 ec 10             	sub    esp,0x10
c0016c4c:	68 14 01 00 00       	push   0x114
c0016c51:	e8 1d 31 ff ff       	call   c0009d73 <malloc>
c0016c56:	83 c4 0c             	add    esp,0xc
c0016c59:	89 c3                	mov    ebx,eax
c0016c5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c60:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016c63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c67:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016c6a:	53                   	push   ebx
c0016c6b:	e8 ba 6e ff ff       	call   c000db2a <Directory::Directory(char const*, Process*)>
c0016c70:	83 c4 10             	add    esp,0x10
c0016c73:	85 db                	test   ebx,ebx
c0016c75:	74 32                	je     c0016ca9 <sysCallMakeDir(regs*)+0x62>
c0016c77:	83 ec 0c             	sub    esp,0xc
c0016c7a:	53                   	push   ebx
c0016c7b:	e8 64 71 ff ff       	call   c000dde4 <Directory::create()>
c0016c80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c83:	89 c6                	mov    esi,eax
c0016c85:	e8 d6 6f ff ff       	call   c000dc60 <Directory::close()>
c0016c8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c92:	83 c4 10             	add    esp,0x10
c0016c95:	31 c0                	xor    eax,eax
c0016c97:	59                   	pop    ecx
c0016c98:	85 f6                	test   esi,esi
c0016c9a:	5b                   	pop    ebx
c0016c9b:	0f 95 c0             	setne  al
c0016c9e:	5e                   	pop    esi
c0016c9f:	31 d2                	xor    edx,edx
c0016ca1:	f7 d8                	neg    eax
c0016ca3:	83 d2 00             	adc    edx,0x0
c0016ca6:	f7 da                	neg    edx
c0016ca8:	c3                   	ret    
c0016ca9:	59                   	pop    ecx
c0016caa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016caf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016cb4:	5b                   	pop    ebx
c0016cb5:	5e                   	pop    esi
c0016cb6:	c3                   	ret    

c0016cb7 <sysCallWait(regs*)>:
c0016cb7:	83 ec 10             	sub    esp,0x10
c0016cba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016cbe:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0016cc1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016cc4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0016cc7:	e8 fc 24 00 00       	call   c00191c8 <waitTask(int, int*, int)>
c0016ccc:	83 c4 1c             	add    esp,0x1c
c0016ccf:	99                   	cdq    
c0016cd0:	c3                   	ret    

c0016cd1 <sysCallNotImpl(regs*)>:
c0016cd1:	83 ec 18             	sub    esp,0x18
c0016cd4:	68 39 6b 02 c0       	push   0xc0026b39
c0016cd9:	e8 53 e4 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0016cde:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016ce3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016ce8:	83 c4 1c             	add    esp,0x1c
c0016ceb:	c3                   	ret    

c0016cec <sysPanic(regs*)>:
c0016cec:	83 ec 18             	sub    esp,0x18
c0016cef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cf3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016cf6:	e8 36 e4 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0016cfb:	b8 01 00 00 00       	mov    eax,0x1
c0016d00:	31 d2                	xor    edx,edx
c0016d02:	83 c4 1c             	add    esp,0x1c
c0016d05:	c3                   	ret    

c0016d06 <sysCallRmdir(regs*)>:
c0016d06:	56                   	push   esi
c0016d07:	53                   	push   ebx
c0016d08:	83 ec 20             	sub    esp,0x20
c0016d0b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d0f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016d12:	68 14 01 00 00       	push   0x114
c0016d17:	e8 57 30 ff ff       	call   c0009d73 <malloc>
c0016d1c:	83 c4 0c             	add    esp,0xc
c0016d1f:	89 c3                	mov    ebx,eax
c0016d21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d26:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016d29:	56                   	push   esi
c0016d2a:	53                   	push   ebx
c0016d2b:	e8 9a 68 ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c0016d30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d33:	e8 e4 6a ff ff       	call   c000d81c <File::unlink()>
c0016d38:	83 c4 10             	add    esp,0x10
c0016d3b:	85 db                	test   ebx,ebx
c0016d3d:	74 14                	je     c0016d53 <sysCallRmdir(regs*)+0x4d>
c0016d3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d43:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016d45:	83 ec 0c             	sub    esp,0xc
c0016d48:	53                   	push   ebx
c0016d49:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016d4c:	83 c4 10             	add    esp,0x10
c0016d4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d53:	85 c0                	test   eax,eax
c0016d55:	0f 95 c0             	setne  al
c0016d58:	31 d2                	xor    edx,edx
c0016d5a:	0f b6 c0             	movzx  eax,al
c0016d5d:	f7 d8                	neg    eax
c0016d5f:	83 d2 00             	adc    edx,0x0
c0016d62:	83 c4 14             	add    esp,0x14
c0016d65:	f7 da                	neg    edx
c0016d67:	5b                   	pop    ebx
c0016d68:	5e                   	pop    esi
c0016d69:	c3                   	ret    

c0016d6a <sysCallUnlink(regs*)>:
c0016d6a:	56                   	push   esi
c0016d6b:	53                   	push   ebx
c0016d6c:	83 ec 20             	sub    esp,0x20
c0016d6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016d73:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016d76:	68 14 01 00 00       	push   0x114
c0016d7b:	e8 f3 2f ff ff       	call   c0009d73 <malloc>
c0016d80:	83 c4 0c             	add    esp,0xc
c0016d83:	89 c3                	mov    ebx,eax
c0016d85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d8a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016d8d:	56                   	push   esi
c0016d8e:	53                   	push   ebx
c0016d8f:	e8 36 68 ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c0016d94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016d97:	e8 80 6a ff ff       	call   c000d81c <File::unlink()>
c0016d9c:	83 c4 10             	add    esp,0x10
c0016d9f:	85 db                	test   ebx,ebx
c0016da1:	74 14                	je     c0016db7 <sysCallUnlink(regs*)+0x4d>
c0016da3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016da7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016da9:	83 ec 0c             	sub    esp,0xc
c0016dac:	53                   	push   ebx
c0016dad:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016db0:	83 c4 10             	add    esp,0x10
c0016db3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016db7:	85 c0                	test   eax,eax
c0016db9:	0f 95 c0             	setne  al
c0016dbc:	31 d2                	xor    edx,edx
c0016dbe:	0f b6 c0             	movzx  eax,al
c0016dc1:	f7 d8                	neg    eax
c0016dc3:	83 d2 00             	adc    edx,0x0
c0016dc6:	83 c4 14             	add    esp,0x14
c0016dc9:	f7 da                	neg    edx
c0016dcb:	5b                   	pop    ebx
c0016dcc:	5e                   	pop    esi
c0016dcd:	c3                   	ret    

c0016dce <sysCallGetArgv(regs*)>:
c0016dce:	83 ec 0c             	sub    esp,0xc
c0016dd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016dd5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016dd8:	85 c0                	test   eax,eax
c0016dda:	78 2b                	js     c0016e07 <sysCallGetArgv(regs*)+0x39>
c0016ddc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016de2:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0016de5:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0016deb:	7d 1a                	jge    c0016e07 <sysCallGetArgv(regs*)+0x39>
c0016ded:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016df4:	85 c0                	test   eax,eax
c0016df6:	74 17                	je     c0016e0f <sysCallGetArgv(regs*)+0x41>
c0016df8:	83 ec 08             	sub    esp,0x8
c0016dfb:	50                   	push   eax
c0016dfc:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0016dff:	e8 4c 99 fe ff       	call   c0000750 <strcpy>
c0016e04:	83 c4 10             	add    esp,0x10
c0016e07:	31 c0                	xor    eax,eax
c0016e09:	31 d2                	xor    edx,edx
c0016e0b:	83 c4 0c             	add    esp,0xc
c0016e0e:	c3                   	ret    
c0016e0f:	b8 01 00 00 00       	mov    eax,0x1
c0016e14:	31 d2                	xor    edx,edx
c0016e16:	83 c4 0c             	add    esp,0xc
c0016e19:	c3                   	ret    

c0016e1a <sysCallTTYName(regs*)>:
c0016e1a:	56                   	push   esi
c0016e1b:	53                   	push   ebx
c0016e1c:	53                   	push   ebx
c0016e1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e21:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016e24:	85 c0                	test   eax,eax
c0016e26:	74 5f                	je     c0016e87 <sysCallTTYName(regs*)+0x6d>
c0016e28:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016e2b:	83 f8 02             	cmp    eax,0x2
c0016e2e:	77 3e                	ja     c0016e6e <sysCallTTYName(regs*)+0x54>
c0016e30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e35:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e38:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0016e3e:	85 db                	test   ebx,ebx
c0016e40:	74 45                	je     c0016e87 <sysCallTTYName(regs*)+0x6d>
c0016e42:	83 ec 0c             	sub    esp,0xc
c0016e45:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016e47:	53                   	push   ebx
c0016e48:	ff 10                	call   DWORD PTR [eax]
c0016e4a:	83 c4 10             	add    esp,0x10
c0016e4d:	84 c0                	test   al,al
c0016e4f:	74 41                	je     c0016e92 <sysCallTTYName(regs*)+0x78>
c0016e51:	83 ec 08             	sub    esp,0x8
c0016e54:	81 c3 82 00 00 00    	add    ebx,0x82
c0016e5a:	53                   	push   ebx
c0016e5b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0016e5e:	e8 ed 98 fe ff       	call   c0000750 <strcpy>
c0016e63:	83 c4 10             	add    esp,0x10
c0016e66:	31 c0                	xor    eax,eax
c0016e68:	59                   	pop    ecx
c0016e69:	31 d2                	xor    edx,edx
c0016e6b:	5b                   	pop    ebx
c0016e6c:	5e                   	pop    esi
c0016e6d:	c3                   	ret    
c0016e6e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016e73:	74 bb                	je     c0016e30 <sysCallTTYName(regs*)+0x16>
c0016e75:	83 ec 0c             	sub    esp,0xc
c0016e78:	50                   	push   eax
c0016e79:	e8 65 4d ff ff       	call   c000bbe3 <getFromFileDescriptor(int)>
c0016e7e:	83 c4 10             	add    esp,0x10
c0016e81:	89 c3                	mov    ebx,eax
c0016e83:	85 db                	test   ebx,ebx
c0016e85:	75 bb                	jne    c0016e42 <sysCallTTYName(regs*)+0x28>
c0016e87:	59                   	pop    ecx
c0016e88:	b8 01 00 00 00       	mov    eax,0x1
c0016e8d:	31 d2                	xor    edx,edx
c0016e8f:	5b                   	pop    ebx
c0016e90:	5e                   	pop    esi
c0016e91:	c3                   	ret    
c0016e92:	59                   	pop    ecx
c0016e93:	b8 02 00 00 00       	mov    eax,0x2
c0016e98:	31 d2                	xor    edx,edx
c0016e9a:	5b                   	pop    ebx
c0016e9b:	5e                   	pop    esi
c0016e9c:	c3                   	ret    

c0016e9d <sysCallUSleep(regs*)>:
c0016e9d:	83 ec 1c             	sub    esp,0x1c
c0016ea0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016ea4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016ea7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0016eaa:	6a 00                	push   0x0
c0016eac:	6a 64                	push   0x64
c0016eae:	52                   	push   edx
c0016eaf:	50                   	push   eax
c0016eb0:	e8 db c1 00 00       	call   c0023090 <__udivdi3>
c0016eb5:	83 c4 14             	add    esp,0x14
c0016eb8:	50                   	push   eax
c0016eb9:	e8 da 23 00 00       	call   c0019298 <milliTenthSleep(unsigned int)>
c0016ebe:	31 c0                	xor    eax,eax
c0016ec0:	31 d2                	xor    edx,edx
c0016ec2:	83 c4 1c             	add    esp,0x1c
c0016ec5:	c3                   	ret    

c0016ec6 <sysCallSpawn(regs*)>:
c0016ec6:	56                   	push   esi
c0016ec7:	53                   	push   ebx
c0016ec8:	50                   	push   eax
c0016ec9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ecd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ed0:	85 c0                	test   eax,eax
c0016ed2:	75 08                	jne    c0016edc <sysCallSpawn(regs*)+0x16>
c0016ed4:	59                   	pop    ecx
c0016ed5:	31 c0                	xor    eax,eax
c0016ed7:	31 d2                	xor    edx,edx
c0016ed9:	5b                   	pop    ebx
c0016eda:	5e                   	pop    esi
c0016edb:	c3                   	ret    
c0016edc:	83 ec 0c             	sub    esp,0xc
c0016edf:	68 1f 07 00 00       	push   0x71f
c0016ee4:	e8 8a 2e ff ff       	call   c0009d73 <malloc>
c0016ee9:	83 c4 10             	add    esp,0x10
c0016eec:	89 c6                	mov    esi,eax
c0016eee:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016ef1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016ef4:	85 c0                	test   eax,eax
c0016ef6:	75 32                	jne    c0016f2a <sysCallSpawn(regs*)+0x64>
c0016ef8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016efd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016f00:	52                   	push   edx
c0016f01:	50                   	push   eax
c0016f02:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016f05:	56                   	push   esi
c0016f06:	e8 85 1a 00 00       	call   c0018990 <Process::Process(char const*, Process*, char**)>
c0016f0b:	83 c4 10             	add    esp,0x10
c0016f0e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016f15:	75 bd                	jne    c0016ed4 <sysCallSpawn(regs*)+0xe>
c0016f17:	83 ec 0c             	sub    esp,0xc
c0016f1a:	56                   	push   esi
c0016f1b:	e8 5c 1f 00 00       	call   c0018e7c <Process::createUserThread()>
c0016f20:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f22:	83 c4 10             	add    esp,0x10
c0016f25:	99                   	cdq    
c0016f26:	59                   	pop    ecx
c0016f27:	5b                   	pop    ebx
c0016f28:	5e                   	pop    esi
c0016f29:	c3                   	ret    
c0016f2a:	31 c0                	xor    eax,eax
c0016f2c:	eb d2                	jmp    c0016f00 <sysCallSpawn(regs*)+0x3a>

c0016f2e <sysCallGetEnv(regs*)>:
c0016f2e:	57                   	push   edi
c0016f2f:	56                   	push   esi
c0016f30:	53                   	push   ebx
c0016f31:	83 ec 1c             	sub    esp,0x1c
c0016f34:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016f38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f3d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016f40:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016f43:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016f46:	e8 32 e1 ff ff       	call   c001507d <Krnl::getProcessTotalEnvCount(Process*)>
c0016f4b:	83 c4 10             	add    esp,0x10
c0016f4e:	39 c7                	cmp    edi,eax
c0016f50:	7c 14                	jl     c0016f66 <sysCallGetEnv(regs*)+0x38>
c0016f52:	85 f6                	test   esi,esi
c0016f54:	75 0b                	jne    c0016f61 <sysCallGetEnv(regs*)+0x33>
c0016f56:	83 c4 10             	add    esp,0x10
c0016f59:	31 c0                	xor    eax,eax
c0016f5b:	5b                   	pop    ebx
c0016f5c:	31 d2                	xor    edx,edx
c0016f5e:	5e                   	pop    esi
c0016f5f:	5f                   	pop    edi
c0016f60:	c3                   	ret    
c0016f61:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016f64:	eb f0                	jmp    c0016f56 <sysCallGetEnv(regs*)+0x28>
c0016f66:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016f6a:	52                   	push   edx
c0016f6b:	57                   	push   edi
c0016f6c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f72:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016f75:	50                   	push   eax
c0016f76:	e8 22 e1 ff ff       	call   c001509d <Krnl::getProcessEnvPair(Process*, int)>
c0016f7b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016f7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f82:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016f86:	83 c4 0c             	add    esp,0xc
c0016f89:	85 c9                	test   ecx,ecx
c0016f8b:	75 23                	jne    c0016fb0 <sysCallGetEnv(regs*)+0x82>
c0016f8d:	83 ec 0c             	sub    esp,0xc
c0016f90:	50                   	push   eax
c0016f91:	e8 1a 97 fe ff       	call   c00006b0 <strlen>
c0016f96:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f99:	89 c3                	mov    ebx,eax
c0016f9b:	e8 10 97 fe ff       	call   c00006b0 <strlen>
c0016fa0:	83 c4 10             	add    esp,0x10
c0016fa3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0016fa7:	83 c4 10             	add    esp,0x10
c0016faa:	31 d2                	xor    edx,edx
c0016fac:	5b                   	pop    ebx
c0016fad:	5e                   	pop    esi
c0016fae:	5f                   	pop    edi
c0016faf:	c3                   	ret    
c0016fb0:	83 ec 08             	sub    esp,0x8
c0016fb3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016fb6:	50                   	push   eax
c0016fb7:	56                   	push   esi
c0016fb8:	e8 93 97 fe ff       	call   c0000750 <strcpy>
c0016fbd:	58                   	pop    eax
c0016fbe:	5a                   	pop    edx
c0016fbf:	68 53 6b 02 c0       	push   0xc0026b53
c0016fc4:	56                   	push   esi
c0016fc5:	e8 c6 98 fe ff       	call   c0000890 <strcat>
c0016fca:	59                   	pop    ecx
c0016fcb:	5b                   	pop    ebx
c0016fcc:	57                   	push   edi
c0016fcd:	56                   	push   esi
c0016fce:	e8 bd 98 fe ff       	call   c0000890 <strcat>
c0016fd3:	83 c4 10             	add    esp,0x10
c0016fd6:	e9 7b ff ff ff       	jmp    c0016f56 <sysCallGetEnv(regs*)+0x28>

c0016fdb <sysAppSettings(regs*)>:
c0016fdb:	57                   	push   edi
c0016fdc:	56                   	push   esi
c0016fdd:	56                   	push   esi
c0016fde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fe2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016fe5:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0016feb:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016ff0:	66 3d c0 09          	cmp    ax,0x9c0
c0016ff4:	75 2e                	jne    c0017024 <sysAppSettings(regs*)+0x49>
c0016ff6:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0016ffc:	83 e0 1f             	and    eax,0x1f
c0016fff:	3c 01                	cmp    al,0x1
c0017001:	74 2c                	je     c001702f <sysAppSettings(regs*)+0x54>
c0017003:	3c 07                	cmp    al,0x7
c0017005:	0f 84 b3 00 00 00    	je     c00170be <sysAppSettings(regs*)+0xe3>
c001700b:	84 c0                	test   al,al
c001700d:	0f 84 d2 00 00 00    	je     c00170e5 <sysAppSettings(regs*)+0x10a>
c0017013:	3c 08                	cmp    al,0x8
c0017015:	74 63                	je     c001707a <sysAppSettings(regs*)+0x9f>
c0017017:	59                   	pop    ecx
c0017018:	0f b6 c0             	movzx  eax,al
c001701b:	5e                   	pop    esi
c001701c:	05 e8 03 00 00       	add    eax,0x3e8
c0017021:	5f                   	pop    edi
c0017022:	99                   	cdq    
c0017023:	c3                   	ret    
c0017024:	b8 01 00 00 00       	mov    eax,0x1
c0017029:	59                   	pop    ecx
c001702a:	31 d2                	xor    edx,edx
c001702c:	5e                   	pop    esi
c001702d:	5f                   	pop    edi
c001702e:	c3                   	ret    
c001702f:	50                   	push   eax
c0017030:	68 00 01 00 00       	push   0x100
c0017035:	6a 00                	push   0x0
c0017037:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001703c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001703f:	83 c0 0c             	add    eax,0xc
c0017042:	50                   	push   eax
c0017043:	e8 4c 96 fe ff       	call   c0000694 <memset>
c0017048:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001704d:	b9 ff 00 00 00       	mov    ecx,0xff
c0017052:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0017055:	83 c7 0c             	add    edi,0xc
c0017058:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001705a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001705f:	5a                   	pop    edx
c0017060:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017063:	59                   	pop    ecx
c0017064:	8d 50 0c             	lea    edx,[eax+0xc]
c0017067:	52                   	push   edx
c0017068:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001706e:	e8 99 3c ff ff       	call   c000ad0c <VgaText::setTitle(char*)>
c0017073:	83 c4 10             	add    esp,0x10
c0017076:	31 c0                	xor    eax,eax
c0017078:	eb af                	jmp    c0017029 <sysAppSettings(regs*)+0x4e>
c001707a:	83 ec 08             	sub    esp,0x8
c001707d:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0017083:	83 e0 0f             	and    eax,0xf
c0017086:	50                   	push   eax
c0017087:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001708c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001708f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0017095:	e8 62 3c ff ff       	call   c000acfc <VgaText::setTitleColour(VgaColour)>
c001709a:	5f                   	pop    edi
c001709b:	58                   	pop    eax
c001709c:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c00170a2:	c1 e8 04             	shr    eax,0x4
c00170a5:	83 e0 0f             	and    eax,0xf
c00170a8:	50                   	push   eax
c00170a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00170b1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00170b7:	e8 30 3c ff ff       	call   c000acec <VgaText::setTitleTextColour(VgaColour)>
c00170bc:	eb b5                	jmp    c0017073 <sysAppSettings(regs*)+0x98>
c00170be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00170c6:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00170cc:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c00170d2:	c0 e8 06             	shr    al,0x6
c00170d5:	83 e0 01             	and    eax,0x1
c00170d8:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c00170de:	31 c0                	xor    eax,eax
c00170e0:	e9 44 ff ff ff       	jmp    c0017029 <sysAppSettings(regs*)+0x4e>
c00170e5:	b8 02 00 00 00       	mov    eax,0x2
c00170ea:	e9 3a ff ff ff       	jmp    c0017029 <sysAppSettings(regs*)+0x4e>

c00170ef <sysSetFatAttrib(regs*)>:
c00170ef:	57                   	push   edi
c00170f0:	56                   	push   esi
c00170f1:	53                   	push   ebx
c00170f2:	83 ec 1c             	sub    esp,0x1c
c00170f5:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00170f9:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00170fc:	68 14 01 00 00       	push   0x114
c0017101:	e8 6d 2c ff ff       	call   c0009d73 <malloc>
c0017106:	83 c4 0c             	add    esp,0xc
c0017109:	89 c3                	mov    ebx,eax
c001710b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017110:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0017113:	57                   	push   edi
c0017114:	53                   	push   ebx
c0017115:	e8 b0 64 ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c001711a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001711d:	83 c4 0c             	add    esp,0xc
c0017120:	0f b6 d4             	movzx  edx,ah
c0017123:	0f b6 c0             	movzx  eax,al
c0017126:	52                   	push   edx
c0017127:	50                   	push   eax
c0017128:	53                   	push   ebx
c0017129:	e8 88 67 ff ff       	call   c000d8b6 <File::chfatattr(unsigned char, unsigned char)>
c001712e:	83 c4 10             	add    esp,0x10
c0017131:	85 db                	test   ebx,ebx
c0017133:	74 14                	je     c0017149 <sysSetFatAttrib(regs*)+0x5a>
c0017135:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017139:	8b 13                	mov    edx,DWORD PTR [ebx]
c001713b:	83 ec 0c             	sub    esp,0xc
c001713e:	53                   	push   ebx
c001713f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0017142:	83 c4 10             	add    esp,0x10
c0017145:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017149:	85 c0                	test   eax,eax
c001714b:	0f 95 c0             	setne  al
c001714e:	31 d2                	xor    edx,edx
c0017150:	0f b6 c0             	movzx  eax,al
c0017153:	f7 d8                	neg    eax
c0017155:	83 d2 00             	adc    edx,0x0
c0017158:	83 c4 10             	add    esp,0x10
c001715b:	f7 da                	neg    edx
c001715d:	5b                   	pop    ebx
c001715e:	5e                   	pop    esi
c001715f:	5f                   	pop    edi
c0017160:	c3                   	ret    

c0017161 <sysPipe(regs*)>:
c0017161:	57                   	push   edi
c0017162:	56                   	push   esi
c0017163:	53                   	push   ebx
c0017164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017168:	83 ec 0c             	sub    esp,0xc
c001716b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001716e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0017171:	6a 20                	push   0x20
c0017173:	e8 fb 2b ff ff       	call   c0009d73 <malloc>
c0017178:	89 c3                	mov    ebx,eax
c001717a:	58                   	pop    eax
c001717b:	5a                   	pop    edx
c001717c:	68 00 50 00 00       	push   0x5000
c0017181:	53                   	push   ebx
c0017182:	e8 fd 38 ff ff       	call   c000aa84 <Pipe::Pipe(int)>
c0017187:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001718a:	e8 5f 47 ff ff       	call   c000b8ee <UnixFile::getFileDescriptor()>
c001718f:	89 07                	mov    DWORD PTR [edi],eax
c0017191:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017194:	e8 55 47 ff ff       	call   c000b8ee <UnixFile::getFileDescriptor()>
c0017199:	83 c4 10             	add    esp,0x10
c001719c:	89 06                	mov    DWORD PTR [esi],eax
c001719e:	31 d2                	xor    edx,edx
c00171a0:	5b                   	pop    ebx
c00171a1:	31 c0                	xor    eax,eax
c00171a3:	5e                   	pop    esi
c00171a4:	5f                   	pop    edi
c00171a5:	c3                   	ret    

c00171a6 <sysGetUnixTime(regs*)>:
c00171a6:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c00171ab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00171b5:	e9 30 6f ff ff       	jmp    c000e0ea <Clock::timeInSecondsLocal()>

c00171ba <string_ends_with(char const*, char const*)>:
c00171ba:	57                   	push   edi
c00171bb:	56                   	push   esi
c00171bc:	53                   	push   ebx
c00171bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00171c1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00171c5:	83 ec 0c             	sub    esp,0xc
c00171c8:	53                   	push   ebx
c00171c9:	e8 e2 94 fe ff       	call   c00006b0 <strlen>
c00171ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c00171d1:	89 c6                	mov    esi,eax
c00171d3:	e8 d8 94 fe ff       	call   c00006b0 <strlen>
c00171d8:	83 c4 10             	add    esp,0x10
c00171db:	39 c6                	cmp    esi,eax
c00171dd:	7d 06                	jge    c00171e5 <string_ends_with(char const*, char const*)+0x2b>
c00171df:	5b                   	pop    ebx
c00171e0:	31 c0                	xor    eax,eax
c00171e2:	5e                   	pop    esi
c00171e3:	5f                   	pop    edi
c00171e4:	c3                   	ret    
c00171e5:	83 ec 08             	sub    esp,0x8
c00171e8:	29 c6                	sub    esi,eax
c00171ea:	57                   	push   edi
c00171eb:	01 f3                	add    ebx,esi
c00171ed:	53                   	push   ebx
c00171ee:	e8 e9 95 fe ff       	call   c00007dc <strcmp>
c00171f3:	83 c4 10             	add    esp,0x10
c00171f6:	85 c0                	test   eax,eax
c00171f8:	5b                   	pop    ebx
c00171f9:	0f 94 c0             	sete   al
c00171fc:	5e                   	pop    esi
c00171fd:	0f b6 c0             	movzx  eax,al
c0017200:	5f                   	pop    edi
c0017201:	c3                   	ret    

c0017202 <sysCallOpen(regs*)>:
c0017202:	56                   	push   esi
c0017203:	53                   	push   ebx
c0017204:	81 ec 04 01 00 00    	sub    esp,0x104
c001720a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0017211:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0017214:	85 c9                	test   ecx,ecx
c0017216:	0f 84 ad 01 00 00    	je     c00173c9 <sysCallOpen(regs*)+0x1c7>
c001721c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001721f:	85 c0                	test   eax,eax
c0017221:	0f 84 a2 01 00 00    	je     c00173c9 <sysCallOpen(regs*)+0x1c7>
c0017227:	52                   	push   edx
c0017228:	68 55 6b 02 c0       	push   0xc0026b55
c001722d:	50                   	push   eax
c001722e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017232:	56                   	push   esi
c0017233:	e8 e8 61 ff ff       	call   c000d420 <Fs::standardiseFiles(char*, char const*, char const*)>
c0017238:	89 34 24             	mov    DWORD PTR [esp],esi
c001723b:	e8 70 94 fe ff       	call   c00006b0 <strlen>
c0017240:	83 c4 10             	add    esp,0x10
c0017243:	48                   	dec    eax
c0017244:	74 1d                	je     c0017263 <sysCallOpen(regs*)+0x61>
c0017246:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0017249:	eb 0f                	jmp    c001725a <sysCallOpen(regs*)+0x58>
c001724b:	80 fa 3a             	cmp    dl,0x3a
c001724e:	74 0f                	je     c001725f <sysCallOpen(regs*)+0x5d>
c0017250:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0017254:	48                   	dec    eax
c0017255:	74 0c                	je     c0017263 <sysCallOpen(regs*)+0x61>
c0017257:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001725a:	80 fa 2e             	cmp    dl,0x2e
c001725d:	75 ec                	jne    c001724b <sysCallOpen(regs*)+0x49>
c001725f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0017263:	83 ec 08             	sub    esp,0x8
c0017266:	68 59 6b 02 c0       	push   0xc0026b59
c001726b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001726e:	e8 47 ff ff ff       	call   c00171ba <string_ends_with(char const*, char const*)>
c0017273:	83 c4 10             	add    esp,0x10
c0017276:	85 c0                	test   eax,eax
c0017278:	74 1d                	je     c0017297 <sysCallOpen(regs*)+0x95>
c001727a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001727d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0017283:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001728a:	81 c4 04 01 00 00    	add    esp,0x104
c0017290:	31 c0                	xor    eax,eax
c0017292:	31 d2                	xor    edx,edx
c0017294:	5b                   	pop    ebx
c0017295:	5e                   	pop    esi
c0017296:	c3                   	ret    
c0017297:	83 ec 08             	sub    esp,0x8
c001729a:	68 5e 6b 02 c0       	push   0xc0026b5e
c001729f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00172a2:	e8 13 ff ff ff       	call   c00171ba <string_ends_with(char const*, char const*)>
c00172a7:	83 c4 10             	add    esp,0x10
c00172aa:	85 c0                	test   eax,eax
c00172ac:	75 cc                	jne    c001727a <sysCallOpen(regs*)+0x78>
c00172ae:	83 ec 08             	sub    esp,0x8
c00172b1:	68 5a 6b 02 c0       	push   0xc0026b5a
c00172b6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00172b9:	e8 1e 95 fe ff       	call   c00007dc <strcmp>
c00172be:	83 c4 10             	add    esp,0x10
c00172c1:	85 c0                	test   eax,eax
c00172c3:	74 b5                	je     c001727a <sysCallOpen(regs*)+0x78>
c00172c5:	83 ec 08             	sub    esp,0x8
c00172c8:	68 59 6b 02 c0       	push   0xc0026b59
c00172cd:	56                   	push   esi
c00172ce:	e8 e7 fe ff ff       	call   c00171ba <string_ends_with(char const*, char const*)>
c00172d3:	83 c4 10             	add    esp,0x10
c00172d6:	85 c0                	test   eax,eax
c00172d8:	75 a0                	jne    c001727a <sysCallOpen(regs*)+0x78>
c00172da:	83 ec 08             	sub    esp,0x8
c00172dd:	68 63 6b 02 c0       	push   0xc0026b63
c00172e2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00172e5:	e8 d0 fe ff ff       	call   c00171ba <string_ends_with(char const*, char const*)>
c00172ea:	83 c4 10             	add    esp,0x10
c00172ed:	85 c0                	test   eax,eax
c00172ef:	0f 85 e7 00 00 00    	jne    c00173dc <sysCallOpen(regs*)+0x1da>
c00172f5:	83 ec 08             	sub    esp,0x8
c00172f8:	68 68 6b 02 c0       	push   0xc0026b68
c00172fd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017300:	e8 b5 fe ff ff       	call   c00171ba <string_ends_with(char const*, char const*)>
c0017305:	83 c4 10             	add    esp,0x10
c0017308:	85 c0                	test   eax,eax
c001730a:	0f 85 cc 00 00 00    	jne    c00173dc <sysCallOpen(regs*)+0x1da>
c0017310:	83 ec 08             	sub    esp,0x8
c0017313:	68 64 6b 02 c0       	push   0xc0026b64
c0017318:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001731b:	e8 bc 94 fe ff       	call   c00007dc <strcmp>
c0017320:	83 c4 10             	add    esp,0x10
c0017323:	85 c0                	test   eax,eax
c0017325:	0f 84 b1 00 00 00    	je     c00173dc <sysCallOpen(regs*)+0x1da>
c001732b:	83 ec 08             	sub    esp,0x8
c001732e:	68 63 6b 02 c0       	push   0xc0026b63
c0017333:	56                   	push   esi
c0017334:	e8 81 fe ff ff       	call   c00171ba <string_ends_with(char const*, char const*)>
c0017339:	83 c4 10             	add    esp,0x10
c001733c:	85 c0                	test   eax,eax
c001733e:	0f 85 98 00 00 00    	jne    c00173dc <sysCallOpen(regs*)+0x1da>
c0017344:	83 ec 0c             	sub    esp,0xc
c0017347:	68 14 01 00 00       	push   0x114
c001734c:	e8 22 2a ff ff       	call   c0009d73 <malloc>
c0017351:	83 c4 0c             	add    esp,0xc
c0017354:	89 c6                	mov    esi,eax
c0017356:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001735b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001735e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017361:	56                   	push   esi
c0017362:	e8 63 62 ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c0017367:	83 c4 10             	add    esp,0x10
c001736a:	85 f6                	test   esi,esi
c001736c:	74 5b                	je     c00173c9 <sysCallOpen(regs*)+0x1c7>
c001736e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0017371:	0f b6 c2             	movzx  eax,dl
c0017374:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0017377:	89 d0                	mov    eax,edx
c0017379:	83 e0 01             	and    eax,0x1
c001737c:	f6 c2 02             	test   dl,0x2
c001737f:	74 03                	je     c0017384 <sysCallOpen(regs*)+0x182>
c0017381:	83 c8 02             	or     eax,0x2
c0017384:	f6 c2 04             	test   dl,0x4
c0017387:	74 03                	je     c001738c <sysCallOpen(regs*)+0x18a>
c0017389:	83 c8 04             	or     eax,0x4
c001738c:	f6 c2 08             	test   dl,0x8
c001738f:	74 03                	je     c0017394 <sysCallOpen(regs*)+0x192>
c0017391:	83 c8 0a             	or     eax,0xa
c0017394:	83 e2 10             	and    edx,0x10
c0017397:	74 03                	je     c001739c <sysCallOpen(regs*)+0x19a>
c0017399:	83 c8 12             	or     eax,0x12
c001739c:	83 ec 08             	sub    esp,0x8
c001739f:	50                   	push   eax
c00173a0:	56                   	push   esi
c00173a1:	e8 fe 62 ff ff       	call   c000d6a4 <File::open(FileOpenMode)>
c00173a6:	83 c4 10             	add    esp,0x10
c00173a9:	85 c0                	test   eax,eax
c00173ab:	75 1c                	jne    c00173c9 <sysCallOpen(regs*)+0x1c7>
c00173ad:	83 ec 0c             	sub    esp,0xc
c00173b0:	56                   	push   esi
c00173b1:	e8 38 45 ff ff       	call   c000b8ee <UnixFile::getFileDescriptor()>
c00173b6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00173b9:	83 c4 10             	add    esp,0x10
c00173bc:	89 02                	mov    DWORD PTR [edx],eax
c00173be:	c1 f8 1f             	sar    eax,0x1f
c00173c1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00173c4:	e9 c1 fe ff ff       	jmp    c001728a <sysCallOpen(regs*)+0x88>
c00173c9:	81 c4 04 01 00 00    	add    esp,0x104
c00173cf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173d4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00173d9:	5b                   	pop    ebx
c00173da:	5e                   	pop    esi
c00173db:	c3                   	ret    
c00173dc:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00173df:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00173e5:	e9 99 fe ff ff       	jmp    c0017283 <sysCallOpen(regs*)+0x81>

c00173ea <Sys::loadSyscalls()>:
c00173ea:	c7 05 e0 97 02 c0 5b 66 01 c0 	mov    DWORD PTR ds:0xc00297e0,0xc001665b
c00173f4:	c7 05 e4 97 02 c0 50 62 01 c0 	mov    DWORD PTR ds:0xc00297e4,0xc0016250
c00173fe:	c7 05 e8 97 02 c0 41 64 01 c0 	mov    DWORD PTR ds:0xc00297e8,0xc0016441
c0017408:	c7 05 ec 97 02 c0 91 65 01 c0 	mov    DWORD PTR ds:0xc00297ec,0xc0016591
c0017412:	c7 05 f0 97 02 c0 d9 63 01 c0 	mov    DWORD PTR ds:0xc00297f0,0xc00163d9
c001741c:	c7 05 f4 97 02 c0 87 62 01 c0 	mov    DWORD PTR ds:0xc00297f4,0xc0016287
c0017426:	c7 05 f8 97 02 c0 68 62 01 c0 	mov    DWORD PTR ds:0xc00297f8,0xc0016268
c0017430:	c7 05 fc 97 02 c0 96 64 01 c0 	mov    DWORD PTR ds:0xc00297fc,0xc0016496
c001743a:	c7 05 04 98 02 c0 1e 6b 01 c0 	mov    DWORD PTR ds:0xc0029804,0xc0016b1e
c0017444:	c7 05 00 98 02 c0 02 72 01 c0 	mov    DWORD PTR ds:0xc0029800,0xc0017202
c001744e:	c7 05 08 98 02 c0 7e 6b 01 c0 	mov    DWORD PTR ds:0xc0029808,0xc0016b7e
c0017458:	c7 05 0c 98 02 c0 61 68 01 c0 	mov    DWORD PTR ds:0xc002980c,0xc0016861
c0017462:	c7 05 10 98 02 c0 93 66 01 c0 	mov    DWORD PTR ds:0xc0029810,0xc0016693
c001746c:	c7 05 14 98 02 c0 98 66 01 c0 	mov    DWORD PTR ds:0xc0029814,0xc0016698
c0017476:	c7 05 18 98 02 c0 47 6c 01 c0 	mov    DWORD PTR ds:0xc0029818,0xc0016c47
c0017480:	c7 05 1c 98 02 c0 f3 6b 01 c0 	mov    DWORD PTR ds:0xc002981c,0xc0016bf3
c001748a:	c7 05 20 98 02 c0 3a 69 01 c0 	mov    DWORD PTR ds:0xc0029820,0xc001693a
c0017494:	c7 05 24 98 02 c0 91 69 01 c0 	mov    DWORD PTR ds:0xc0029824,0xc0016991
c001749e:	c7 05 28 98 02 c0 fd 69 01 c0 	mov    DWORD PTR ds:0xc0029828,0xc00169fd
c00174a8:	c7 05 2c 98 02 c0 9d 66 01 c0 	mov    DWORD PTR ds:0xc002982c,0xc001669d
c00174b2:	c7 05 30 98 02 c0 b7 6c 01 c0 	mov    DWORD PTR ds:0xc0029830,0xc0016cb7
c00174bc:	c7 05 34 98 02 c0 d1 6c 01 c0 	mov    DWORD PTR ds:0xc0029834,0xc0016cd1
c00174c6:	c7 05 38 98 02 c0 d1 6c 01 c0 	mov    DWORD PTR ds:0xc0029838,0xc0016cd1
c00174d0:	c7 05 3c 98 02 c0 06 6d 01 c0 	mov    DWORD PTR ds:0xc002983c,0xc0016d06
c00174da:	c7 05 40 98 02 c0 6a 6d 01 c0 	mov    DWORD PTR ds:0xc0029840,0xc0016d6a
c00174e4:	c7 05 44 98 02 c0 a7 66 01 c0 	mov    DWORD PTR ds:0xc0029844,0xc00166a7
c00174ee:	c7 05 48 98 02 c0 ce 6d 01 c0 	mov    DWORD PTR ds:0xc0029848,0xc0016dce
c00174f8:	c7 05 4c 98 02 c0 1e 68 01 c0 	mov    DWORD PTR ds:0xc002984c,0xc001681e
c0017502:	c7 05 50 98 02 c0 1a 6e 01 c0 	mov    DWORD PTR ds:0xc0029850,0xc0016e1a
c001750c:	c7 05 54 98 02 c0 e0 68 01 c0 	mov    DWORD PTR ds:0xc0029854,0xc00168e0
c0017516:	c7 05 58 98 02 c0 9d 6e 01 c0 	mov    DWORD PTR ds:0xc0029858,0xc0016e9d
c0017520:	c7 05 5c 98 02 c0 6f 6a 01 c0 	mov    DWORD PTR ds:0xc002985c,0xc0016a6f
c001752a:	c7 05 60 98 02 c0 c6 6e 01 c0 	mov    DWORD PTR ds:0xc0029860,0xc0016ec6
c0017534:	c7 05 64 98 02 c0 2e 6f 01 c0 	mov    DWORD PTR ds:0xc0029864,0xc0016f2e
c001753e:	c7 05 68 98 02 c0 db 6f 01 c0 	mov    DWORD PTR ds:0xc0029868,0xc0016fdb
c0017548:	c7 05 6c 98 02 c0 b7 66 01 c0 	mov    DWORD PTR ds:0xc002986c,0xc00166b7
c0017552:	c7 05 70 98 02 c0 21 67 01 c0 	mov    DWORD PTR ds:0xc0029870,0xc0016721
c001755c:	c7 05 74 98 02 c0 6b 67 01 c0 	mov    DWORD PTR ds:0xc0029874,0xc001676b
c0017566:	c7 05 78 98 02 c0 ef 70 01 c0 	mov    DWORD PTR ds:0xc0029878,0xc00170ef
c0017570:	c7 05 7c 98 02 c0 ec 6c 01 c0 	mov    DWORD PTR ds:0xc002987c,0xc0016cec
c001757a:	c7 05 80 98 02 c0 c0 67 01 c0 	mov    DWORD PTR ds:0xc0029880,0xc00167c0
c0017584:	c7 05 84 98 02 c0 61 71 01 c0 	mov    DWORD PTR ds:0xc0029884,0xc0017161
c001758e:	c7 05 88 98 02 c0 a6 71 01 c0 	mov    DWORD PTR ds:0xc0029888,0xc00171a6
c0017598:	c7 05 8c 98 02 c0 31 63 01 c0 	mov    DWORD PTR ds:0xc002988c,0xc0016331
c00175a2:	c7 05 90 98 02 c0 b2 64 01 c0 	mov    DWORD PTR ds:0xc0029890,0xc00164b2
c00175ac:	c7 05 94 98 02 c0 47 65 01 c0 	mov    DWORD PTR ds:0xc0029894,0xc0016547
c00175b6:	c7 05 98 98 02 c0 1a 62 01 c0 	mov    DWORD PTR ds:0xc0029898,0xc001621a
c00175c0:	c7 05 9c 98 02 c0 f9 65 01 c0 	mov    DWORD PTR ds:0xc002989c,0xc00165f9
c00175ca:	c7 05 a0 98 02 c0 93 62 01 c0 	mov    DWORD PTR ds:0xc00298a0,0xc0016293
c00175d4:	c7 05 a4 98 02 c0 ad 62 01 c0 	mov    DWORD PTR ds:0xc00298a4,0xc00162ad
c00175de:	c3                   	ret    

c00175df <Sys::systemCall(regs*, void*)>:
c00175df:	53                   	push   ebx
c00175e0:	83 ec 08             	sub    esp,0x8
c00175e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00175e7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00175ea:	83 f8 7f             	cmp    eax,0x7f
c00175ed:	77 16                	ja     c0017605 <Sys::systemCall(regs*, void*)+0x26>
c00175ef:	8b 14 85 e0 97 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6820]
c00175f6:	85 d2                	test   edx,edx
c00175f8:	74 0b                	je     c0017605 <Sys::systemCall(regs*, void*)+0x26>
c00175fa:	83 ec 0c             	sub    esp,0xc
c00175fd:	53                   	push   ebx
c00175fe:	ff d2                	call   edx
c0017600:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017603:	eb 0d                	jmp    c0017612 <Sys::systemCall(regs*, void*)+0x33>
c0017605:	52                   	push   edx
c0017606:	52                   	push   edx
c0017607:	50                   	push   eax
c0017608:	68 6d 6b 02 c0       	push   0xc0026b6d
c001760d:	e8 4d 5a ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0017612:	83 c4 10             	add    esp,0x10
c0017615:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001761a:	31 d2                	xor    edx,edx
c001761c:	83 c4 08             	add    esp,0x8
c001761f:	5b                   	pop    ebx
c0017620:	c3                   	ret    

c0017621 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0017621:	55                   	push   ebp
c0017622:	57                   	push   edi
c0017623:	56                   	push   esi
c0017624:	53                   	push   ebx
c0017625:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001762b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0017632:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0017639:	85 c0                	test   eax,eax
c001763b:	0f 95 c1             	setne  cl
c001763e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0017646:	0f 94 c2             	sete   dl
c0017649:	84 d1                	test   cl,dl
c001764b:	74 23                	je     c0017670 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001764d:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0017653:	74 1b                	je     c0017670 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0017655:	81 c3 00 10 00 00    	add    ebx,0x1000
c001765b:	89 da                	mov    edx,ebx
c001765d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0017663:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0017669:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0017670:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0017677:	05 ff 0f 00 00       	add    eax,0xfff
c001767c:	83 ec 0c             	sub    esp,0xc
c001767f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017683:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0017689:	c1 e8 0c             	shr    eax,0xc
c001768c:	89 fe                	mov    esi,edi
c001768e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017692:	c1 ee 0c             	shr    esi,0xc
c0017695:	6a 01                	push   0x1
c0017697:	e8 9d 46 ff ff       	call   c000bd39 <Virt::allocateKernelVirtualPages(int)>
c001769c:	89 c5                	mov    ebp,eax
c001769e:	58                   	pop    eax
c001769f:	5a                   	pop    edx
c00176a0:	56                   	push   esi
c00176a1:	68 81 6b 02 c0       	push   0xc0026b81
c00176a6:	e8 b4 59 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00176ab:	59                   	pop    ecx
c00176ac:	58                   	pop    eax
c00176ad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176b1:	68 93 6b 02 c0       	push   0xc0026b93
c00176b6:	e8 a4 59 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00176bb:	83 c4 10             	add    esp,0x10
c00176be:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c00176c4:	0f 86 31 01 00 00    	jbe    c00177fb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c00176ca:	c1 e6 0c             	shl    esi,0xc
c00176cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00176d0:	8d 04 1e             	lea    eax,[esi+ebx*1]
c00176d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176d7:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00176de:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00176e1:	01 df                	add    edi,ebx
c00176e3:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c00176e6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00176ea:	0f 84 08 01 00 00    	je     c00177f8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c00176f0:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00176f6:	76 05                	jbe    c00176fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c00176f8:	bf 00 10 00 00       	mov    edi,0x1000
c00176fd:	83 ec 0c             	sub    esp,0xc
c0017700:	31 d2                	xor    edx,edx
c0017702:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0017709:	8b 08                	mov    ecx,DWORD PTR [eax]
c001770b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001770f:	50                   	push   eax
c0017710:	8d 74 24 30          	lea    esi,[esp+0x30]
c0017714:	56                   	push   esi
c0017715:	52                   	push   edx
c0017716:	57                   	push   edi
c0017717:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001771e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017721:	83 c4 20             	add    esp,0x20
c0017724:	85 c0                	test   eax,eax
c0017726:	74 0a                	je     c0017732 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0017728:	53                   	push   ebx
c0017729:	53                   	push   ebx
c001772a:	50                   	push   eax
c001772b:	68 a5 6b 02 c0       	push   0xc0026ba5
c0017730:	eb 0f                	jmp    c0017741 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0017732:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017736:	74 20                	je     c0017758 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0017738:	51                   	push   ecx
c0017739:	51                   	push   ecx
c001773a:	6a 00                	push   0x0
c001773c:	68 d0 6b 02 c0       	push   0xc0026bd0
c0017741:	e8 19 59 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0017746:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017749:	e8 1b 49 ff ff       	call   c000c069 <Virt::freeKernelVirtualPages(unsigned long)>
c001774e:	83 c4 10             	add    esp,0x10
c0017751:	31 c0                	xor    eax,eax
c0017753:	e9 68 01 00 00       	jmp    c00178c0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0017758:	fa                   	cli    
c0017759:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c001775f:	e8 c6 2c ff ff       	call   c000a42a <Phys::allocatePage()>
c0017764:	6a 07                	push   0x7
c0017766:	89 c7                	mov    edi,eax
c0017768:	55                   	push   ebp
c0017769:	50                   	push   eax
c001776a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001776f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017772:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017778:	e8 63 4c ff ff       	call   c000c3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c001777d:	83 c4 0c             	add    esp,0xc
c0017780:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0017787:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001778d:	6a 00                	push   0x0
c001778f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017794:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017797:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001779d:	e8 98 4a ff ff       	call   c000c23a <VAS::mapOtherVASIn(bool, VAS*)>
c00177a2:	58                   	pop    eax
c00177a3:	5a                   	pop    edx
c00177a4:	68 07 0c 00 00       	push   0xc07
c00177a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00177ad:	57                   	push   edi
c00177ae:	89 ef                	mov    edi,ebp
c00177b0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00177b7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00177bd:	6a 00                	push   0x0
c00177bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177c7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00177cd:	e8 ca 4f ff ff       	call   c000c79c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00177d2:	b9 00 10 00 00       	mov    ecx,0x1000
c00177d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00177d9:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c00177de:	83 c4 20             	add    esp,0x20
c00177e1:	48                   	dec    eax
c00177e2:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c00177e7:	85 c0                	test   eax,eax
c00177e9:	75 01                	jne    c00177ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c00177eb:	fb                   	sti    
c00177ec:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c00177f3:	e9 df fe ff ff       	jmp    c00176d7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c00177f8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00177fb:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0017803:	0f 86 a9 00 00 00    	jbe    c00178b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0017809:	fa                   	cli    
c001780a:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c0017810:	51                   	push   ecx
c0017811:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0017818:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001781e:	6a 00                	push   0x0
c0017820:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017825:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017828:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001782e:	e8 07 4a ff ff       	call   c000c23a <VAS::mapOtherVASIn(bool, VAS*)>
c0017833:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017837:	c1 e6 0c             	shl    esi,0xc
c001783a:	01 de                	add    esi,ebx
c001783c:	83 c4 10             	add    esp,0x10
c001783f:	39 de                	cmp    esi,ebx
c0017841:	74 61                	je     c00178a4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0017843:	e8 e2 2b ff ff       	call   c000a42a <Phys::allocatePage()>
c0017848:	6a 07                	push   0x7
c001784a:	89 c7                	mov    edi,eax
c001784c:	55                   	push   ebp
c001784d:	50                   	push   eax
c001784e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017853:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017856:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001785c:	e8 7f 4b ff ff       	call   c000c3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0017861:	58                   	pop    eax
c0017862:	5a                   	pop    edx
c0017863:	68 07 0c 00 00       	push   0xc07
c0017868:	53                   	push   ebx
c0017869:	81 c3 00 10 00 00    	add    ebx,0x1000
c001786f:	57                   	push   edi
c0017870:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0017877:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001787d:	6a 00                	push   0x0
c001787f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017884:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017887:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001788d:	e8 0a 4f ff ff       	call   c000c79c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017892:	83 c4 1c             	add    esp,0x1c
c0017895:	68 00 10 00 00       	push   0x1000
c001789a:	6a 00                	push   0x0
c001789c:	55                   	push   ebp
c001789d:	e8 f2 8d fe ff       	call   c0000694 <memset>
c00178a2:	eb 98                	jmp    c001783c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c00178a4:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c00178a9:	48                   	dec    eax
c00178aa:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c00178af:	75 01                	jne    c00178b2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00178b1:	fb                   	sti    
c00178b2:	83 ec 0c             	sub    esp,0xc
c00178b5:	55                   	push   ebp
c00178b6:	e8 ae 47 ff ff       	call   c000c069 <Virt::freeKernelVirtualPages(unsigned long)>
c00178bb:	83 c4 10             	add    esp,0x10
c00178be:	b0 01                	mov    al,0x1
c00178c0:	81 c4 2c 10 00 00    	add    esp,0x102c
c00178c6:	5b                   	pop    ebx
c00178c7:	5e                   	pop    esi
c00178c8:	5f                   	pop    edi
c00178c9:	5d                   	pop    ebp
c00178ca:	c3                   	ret    

c00178cb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00178cb:	55                   	push   ebp
c00178cc:	57                   	push   edi
c00178cd:	56                   	push   esi
c00178ce:	53                   	push   ebx
c00178cf:	83 ec 48             	sub    esp,0x48
c00178d2:	68 14 01 00 00       	push   0x114
c00178d7:	e8 97 24 ff ff       	call   c0009d73 <malloc>
c00178dc:	83 c4 0c             	add    esp,0xc
c00178df:	89 c6                	mov    esi,eax
c00178e1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00178e5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00178e9:	50                   	push   eax
c00178ea:	e8 db 5c ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c00178ef:	58                   	pop    eax
c00178f0:	5a                   	pop    edx
c00178f1:	6a 01                	push   0x1
c00178f3:	56                   	push   esi
c00178f4:	e8 ab 5d ff ff       	call   c000d6a4 <File::open(FileOpenMode)>
c00178f9:	83 c4 10             	add    esp,0x10
c00178fc:	85 c0                	test   eax,eax
c00178fe:	0f 85 47 01 00 00    	jne    c0017a4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017904:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001790c:	83 ec 0c             	sub    esp,0xc
c001790f:	6a 34                	push   0x34
c0017911:	e8 5d 24 ff ff       	call   c0009d73 <malloc>
c0017916:	89 c3                	mov    ebx,eax
c0017918:	58                   	pop    eax
c0017919:	8b 06                	mov    eax,DWORD PTR [esi]
c001791b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001791f:	57                   	push   edi
c0017920:	53                   	push   ebx
c0017921:	6a 00                	push   0x0
c0017923:	6a 34                	push   0x34
c0017925:	56                   	push   esi
c0017926:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017929:	83 c4 20             	add    esp,0x20
c001792c:	85 c0                	test   eax,eax
c001792e:	0f 85 17 01 00 00    	jne    c0017a4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017934:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001793a:	0f 85 0b 01 00 00    	jne    c0017a4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017940:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017943:	85 c0                	test   eax,eax
c0017945:	0f 84 00 01 00 00    	je     c0017a4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001794b:	31 d2                	xor    edx,edx
c001794d:	55                   	push   ebp
c001794e:	52                   	push   edx
c001794f:	50                   	push   eax
c0017950:	56                   	push   esi
c0017951:	e8 0c 5e ff ff       	call   c000d762 <File::seek(unsigned long long)>
c0017956:	83 c4 10             	add    esp,0x10
c0017959:	85 c0                	test   eax,eax
c001795b:	0f 85 ea 00 00 00    	jne    c0017a4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017961:	83 ec 0c             	sub    esp,0xc
c0017964:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017967:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001796b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001796f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017973:	0f af c2             	imul   eax,edx
c0017976:	50                   	push   eax
c0017977:	e8 f7 23 ff ff       	call   c0009d73 <malloc>
c001797c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001797e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017982:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017985:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017989:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001798d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017991:	0f af c2             	imul   eax,edx
c0017994:	99                   	cdq    
c0017995:	52                   	push   edx
c0017996:	50                   	push   eax
c0017997:	56                   	push   esi
c0017998:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001799b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001799e:	83 c4 20             	add    esp,0x20
c00179a1:	85 c0                	test   eax,eax
c00179a3:	0f 84 a2 00 00 00    	je     c0017a4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00179a9:	31 d2                	xor    edx,edx
c00179ab:	51                   	push   ecx
c00179ac:	52                   	push   edx
c00179ad:	50                   	push   eax
c00179ae:	56                   	push   esi
c00179af:	e8 ae 5d ff ff       	call   c000d762 <File::seek(unsigned long long)>
c00179b4:	83 c4 10             	add    esp,0x10
c00179b7:	85 c0                	test   eax,eax
c00179b9:	0f 85 8c 00 00 00    	jne    c0017a4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00179bf:	83 ec 0c             	sub    esp,0xc
c00179c2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00179c6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00179ca:	31 ed                	xor    ebp,ebp
c00179cc:	0f af c2             	imul   eax,edx
c00179cf:	50                   	push   eax
c00179d0:	e8 9e 23 ff ff       	call   c0009d73 <malloc>
c00179d5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00179d7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00179db:	89 3c 24             	mov    DWORD PTR [esp],edi
c00179de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179e2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00179e6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00179ea:	0f af c2             	imul   eax,edx
c00179ed:	99                   	cdq    
c00179ee:	52                   	push   edx
c00179ef:	50                   	push   eax
c00179f0:	56                   	push   esi
c00179f1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00179f4:	83 c4 20             	add    esp,0x20
c00179f7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00179ff:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017a03:	0f 86 80 00 00 00    	jbe    c0017a89 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017a09:	0f b7 fd             	movzx  edi,bp
c0017a0c:	c1 e7 05             	shl    edi,0x5
c0017a0f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017a13:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017a16:	75 6b                	jne    c0017a83 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017a18:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017a1b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017a1f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017a22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a26:	52                   	push   edx
c0017a27:	31 d2                	xor    edx,edx
c0017a29:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017a2c:	52                   	push   edx
c0017a2d:	50                   	push   eax
c0017a2e:	56                   	push   esi
c0017a2f:	e8 2e 5d ff ff       	call   c000d762 <File::seek(unsigned long long)>
c0017a34:	83 c4 10             	add    esp,0x10
c0017a37:	85 c0                	test   eax,eax
c0017a39:	74 17                	je     c0017a52 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017a3b:	83 ec 0c             	sub    esp,0xc
c0017a3e:	68 fc 6b 02 c0       	push   0xc0026bfc
c0017a43:	e8 17 56 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0017a48:	83 c4 10             	add    esp,0x10
c0017a4b:	31 c0                	xor    eax,eax
c0017a4d:	e9 87 00 00 00       	jmp    c0017ad9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0017a52:	83 ec 0c             	sub    esp,0xc
c0017a55:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0017a58:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0017a5b:	50                   	push   eax
c0017a5c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a64:	56                   	push   esi
c0017a65:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0017a69:	e8 b3 fb ff ff       	call   c0017621 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0017a6e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a72:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0017a76:	83 c4 20             	add    esp,0x20
c0017a79:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017a7d:	73 04                	jae    c0017a83 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017a7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a83:	45                   	inc    ebp
c0017a84:	e9 76 ff ff ff       	jmp    c00179ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0017a89:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0017a8d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017a91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a95:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0017a9b:	83 ec 0c             	sub    esp,0xc
c0017a9e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0017aa4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017aa9:	05 00 10 00 00       	add    eax,0x1000
c0017aae:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017ab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ab5:	e8 c9 22 ff ff       	call   c0009d83 <free>
c0017aba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017abd:	e8 c1 22 ff ff       	call   c0009d83 <free>
c0017ac2:	58                   	pop    eax
c0017ac3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ac7:	e8 b7 22 ff ff       	call   c0009d83 <free>
c0017acc:	89 34 24             	mov    DWORD PTR [esp],esi
c0017acf:	e8 2e 5c ff ff       	call   c000d702 <File::close()>
c0017ad4:	83 c4 10             	add    esp,0x10
c0017ad7:	b0 01                	mov    al,0x1
c0017ad9:	83 c4 3c             	add    esp,0x3c
c0017adc:	5b                   	pop    ebx
c0017add:	5e                   	pop    esi
c0017ade:	5f                   	pop    edi
c0017adf:	5d                   	pop    ebp
c0017ae0:	c3                   	ret    

c0017ae1 <Thr::runtimeReferenceHelper()>:
c0017ae1:	83 ec 18             	sub    esp,0x18
c0017ae4:	68 04 6c 02 c0       	push   0xc0026c04
c0017ae9:	e8 71 55 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0017aee:	fa                   	cli    
c0017aef:	83 c4 10             	add    esp,0x10
c0017af2:	eb fe                	jmp    c0017af2 <Thr::runtimeReferenceHelper()+0x11>

c0017af4 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017af4:	57                   	push   edi
c0017af5:	56                   	push   esi
c0017af6:	53                   	push   ebx
c0017af7:	31 db                	xor    ebx,ebx
c0017af9:	39 1d 80 a1 02 c0    	cmp    DWORD PTR ds:0xc002a180,ebx
c0017aff:	7e 3c                	jle    c0017b3d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017b01:	8b 34 9d 00 a1 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd5f00]
c0017b08:	31 ff                	xor    edi,edi
c0017b0a:	39 3c 9d 00 a0 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6000],edi
c0017b11:	7e 27                	jle    c0017b3a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017b13:	50                   	push   eax
c0017b14:	50                   	push   eax
c0017b15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b19:	8b 06                	mov    eax,DWORD PTR [esi]
c0017b1b:	03 04 9d 80 a0 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd5f80]
c0017b22:	50                   	push   eax
c0017b23:	e8 b4 8c fe ff       	call   c00007dc <strcmp>
c0017b28:	83 c4 10             	add    esp,0x10
c0017b2b:	85 c0                	test   eax,eax
c0017b2d:	75 05                	jne    c0017b34 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017b2f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017b32:	eb 0b                	jmp    c0017b3f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017b34:	83 c6 10             	add    esi,0x10
c0017b37:	47                   	inc    edi
c0017b38:	eb d0                	jmp    c0017b0a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017b3a:	43                   	inc    ebx
c0017b3b:	eb bc                	jmp    c0017af9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017b3d:	31 c0                	xor    eax,eax
c0017b3f:	5b                   	pop    ebx
c0017b40:	5e                   	pop    esi
c0017b41:	5f                   	pop    edi
c0017b42:	c3                   	ret    

c0017b43 <Thr::loadKernelSymbolTable(char const*)>:
c0017b43:	55                   	push   ebp
c0017b44:	57                   	push   edi
c0017b45:	56                   	push   esi
c0017b46:	53                   	push   ebx
c0017b47:	83 ec 68             	sub    esp,0x68
c0017b4a:	8b 35 d0 a1 02 c0    	mov    esi,DWORD PTR ds:0xc002a1d0
c0017b50:	68 14 01 00 00       	push   0x114
c0017b55:	e8 19 22 ff ff       	call   c0009d73 <malloc>
c0017b5a:	83 c4 0c             	add    esp,0xc
c0017b5d:	89 c3                	mov    ebx,eax
c0017b5f:	56                   	push   esi
c0017b60:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0017b64:	50                   	push   eax
c0017b65:	e8 60 5a ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c0017b6a:	5e                   	pop    esi
c0017b6b:	5f                   	pop    edi
c0017b6c:	6a 01                	push   0x1
c0017b6e:	53                   	push   ebx
c0017b6f:	e8 30 5b ff ff       	call   c000d6a4 <File::open(FileOpenMode)>
c0017b74:	83 c4 10             	add    esp,0x10
c0017b77:	85 c0                	test   eax,eax
c0017b79:	74 0a                	je     c0017b85 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0017b7b:	83 ec 0c             	sub    esp,0xc
c0017b7e:	68 26 6c 02 c0       	push   0xc0026c26
c0017b83:	eb 34                	jmp    c0017bb9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0017b85:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017b8d:	83 ec 0c             	sub    esp,0xc
c0017b90:	6a 34                	push   0x34
c0017b92:	e8 dc 21 ff ff       	call   c0009d73 <malloc>
c0017b97:	59                   	pop    ecx
c0017b98:	89 c7                	mov    edi,eax
c0017b9a:	8d 74 24 34          	lea    esi,[esp+0x34]
c0017b9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ba0:	56                   	push   esi
c0017ba1:	57                   	push   edi
c0017ba2:	6a 00                	push   0x0
c0017ba4:	6a 34                	push   0x34
c0017ba6:	53                   	push   ebx
c0017ba7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017baa:	83 c4 20             	add    esp,0x20
c0017bad:	85 c0                	test   eax,eax
c0017baf:	74 17                	je     c0017bc8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0017bb1:	83 ec 0c             	sub    esp,0xc
c0017bb4:	68 3d 6c 02 c0       	push   0xc0026c3d
c0017bb9:	e8 73 d5 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0017bbe:	83 c4 10             	add    esp,0x10
c0017bc1:	31 c0                	xor    eax,eax
c0017bc3:	e9 31 02 00 00       	jmp    c0017df9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0017bc8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017bce:	75 e1                	jne    c0017bb1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017bd0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017bd3:	85 c0                	test   eax,eax
c0017bd5:	74 da                	je     c0017bb1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017bd7:	52                   	push   edx
c0017bd8:	31 d2                	xor    edx,edx
c0017bda:	52                   	push   edx
c0017bdb:	50                   	push   eax
c0017bdc:	53                   	push   ebx
c0017bdd:	e8 80 5b ff ff       	call   c000d762 <File::seek(unsigned long long)>
c0017be2:	83 c4 10             	add    esp,0x10
c0017be5:	85 c0                	test   eax,eax
c0017be7:	75 c8                	jne    c0017bb1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0017be9:	83 ec 0c             	sub    esp,0xc
c0017bec:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017bf0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017bf4:	31 ed                	xor    ebp,ebp
c0017bf6:	0f af c2             	imul   eax,edx
c0017bf9:	50                   	push   eax
c0017bfa:	e8 74 21 ff ff       	call   c0009d73 <malloc>
c0017bff:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017c01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c05:	89 34 24             	mov    DWORD PTR [esp],esi
c0017c08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c0c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017c10:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017c14:	0f af c2             	imul   eax,edx
c0017c17:	99                   	cdq    
c0017c18:	52                   	push   edx
c0017c19:	50                   	push   eax
c0017c1a:	53                   	push   ebx
c0017c1b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017c1e:	83 c4 20             	add    esp,0x20
c0017c21:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017c29:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017c31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017c39:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017c41:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017c45:	0f 86 aa 00 00 00    	jbe    c0017cf5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0017c4b:	0f b7 f5             	movzx  esi,bp
c0017c4e:	6b f6 28             	imul   esi,esi,0x28
c0017c51:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017c55:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017c58:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017c5c:	50                   	push   eax
c0017c5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017c61:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017c65:	8b 16                	mov    edx,DWORD PTR [esi]
c0017c67:	6b c0 28             	imul   eax,eax,0x28
c0017c6a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017c6e:	89 d0                	mov    eax,edx
c0017c70:	31 d2                	xor    edx,edx
c0017c72:	52                   	push   edx
c0017c73:	50                   	push   eax
c0017c74:	53                   	push   ebx
c0017c75:	e8 e8 5a ff ff       	call   c000d762 <File::seek(unsigned long long)>
c0017c7a:	83 c4 0c             	add    esp,0xc
c0017c7d:	6a 20                	push   0x20
c0017c7f:	6a 00                	push   0x0
c0017c81:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017c85:	52                   	push   edx
c0017c86:	e8 09 8a fe ff       	call   c0000694 <memset>
c0017c8b:	58                   	pop    eax
c0017c8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017c8e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017c92:	51                   	push   ecx
c0017c93:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017c97:	52                   	push   edx
c0017c98:	6a 00                	push   0x0
c0017c9a:	6a 1f                	push   0x1f
c0017c9c:	53                   	push   ebx
c0017c9d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ca0:	83 c4 18             	add    esp,0x18
c0017ca3:	68 54 6c 02 c0       	push   0xc0026c54
c0017ca8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017cac:	52                   	push   edx
c0017cad:	e8 2a 8b fe ff       	call   c00007dc <strcmp>
c0017cb2:	83 c4 10             	add    esp,0x10
c0017cb5:	85 c0                	test   eax,eax
c0017cb7:	75 0f                	jne    c0017cc8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0017cb9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017cbc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017cc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017cc8:	50                   	push   eax
c0017cc9:	50                   	push   eax
c0017cca:	68 5c 6c 02 c0       	push   0xc0026c5c
c0017ccf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017cd3:	50                   	push   eax
c0017cd4:	e8 03 8b fe ff       	call   c00007dc <strcmp>
c0017cd9:	83 c4 10             	add    esp,0x10
c0017cdc:	85 c0                	test   eax,eax
c0017cde:	75 0f                	jne    c0017cef <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0017ce0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017ce3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017ce7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ceb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cef:	45                   	inc    ebp
c0017cf0:	e9 4c ff ff ff       	jmp    c0017c41 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017cf5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017cfa:	75 10                	jne    c0017d0c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0017cfc:	83 ec 0c             	sub    esp,0xc
c0017cff:	68 64 6c 02 c0       	push   0xc0026c64
c0017d04:	e8 28 d4 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0017d09:	83 c4 10             	add    esp,0x10
c0017d0c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0017d11:	75 10                	jne    c0017d23 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0017d13:	83 ec 0c             	sub    esp,0xc
c0017d16:	68 64 6c 02 c0       	push   0xc0026c64
c0017d1b:	e8 11 d4 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0017d20:	83 c4 10             	add    esp,0x10
c0017d23:	31 d2                	xor    edx,edx
c0017d25:	50                   	push   eax
c0017d26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d2a:	52                   	push   edx
c0017d2b:	50                   	push   eax
c0017d2c:	53                   	push   ebx
c0017d2d:	e8 30 5a ff ff       	call   c000d762 <File::seek(unsigned long long)>
c0017d32:	5a                   	pop    edx
c0017d33:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d37:	e8 37 20 ff ff       	call   c0009d73 <malloc>
c0017d3c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d44:	31 c9                	xor    ecx,ecx
c0017d46:	5e                   	pop    esi
c0017d47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d49:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017d4d:	55                   	push   ebp
c0017d4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d52:	51                   	push   ecx
c0017d53:	52                   	push   edx
c0017d54:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017d58:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0017d5c:	53                   	push   ebx
c0017d5d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017d60:	83 c4 14             	add    esp,0x14
c0017d63:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017d67:	e8 07 20 ff ff       	call   c0009d73 <malloc>
c0017d6c:	89 c6                	mov    esi,eax
c0017d6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d70:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d73:	56                   	push   esi
c0017d74:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017d78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017d7c:	51                   	push   ecx
c0017d7d:	52                   	push   edx
c0017d7e:	53                   	push   ebx
c0017d7f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017d82:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d86:	8b 15 80 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a180
c0017d8c:	83 c4 1c             	add    esp,0x1c
c0017d8f:	c1 e8 04             	shr    eax,0x4
c0017d92:	89 04 95 00 a0 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6000],eax
c0017d99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017d9d:	31 d2                	xor    edx,edx
c0017d9f:	52                   	push   edx
c0017da0:	50                   	push   eax
c0017da1:	53                   	push   ebx
c0017da2:	e8 bb 59 ff ff       	call   c000d762 <File::seek(unsigned long long)>
c0017da7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017da9:	31 d2                	xor    edx,edx
c0017dab:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017dae:	56                   	push   esi
c0017daf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017db3:	52                   	push   edx
c0017db4:	50                   	push   eax
c0017db5:	53                   	push   ebx
c0017db6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017db9:	83 c4 14             	add    esp,0x14
c0017dbc:	53                   	push   ebx
c0017dbd:	e8 40 59 ff ff       	call   c000d702 <File::close()>
c0017dc2:	5d                   	pop    ebp
c0017dc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017dc7:	e8 b7 1f ff ff       	call   c0009d83 <free>
c0017dcc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017dcf:	e8 af 1f ff ff       	call   c0009d83 <free>
c0017dd4:	a1 80 a1 02 c0       	mov    eax,ds:0xc002a180
c0017dd9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017ddd:	8d 50 01             	lea    edx,[eax+0x1]
c0017de0:	89 0c 85 00 a1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f00],ecx
c0017de7:	89 34 85 80 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f80],esi
c0017dee:	89 15 80 a1 02 c0    	mov    DWORD PTR ds:0xc002a180,edx
c0017df4:	83 c4 10             	add    esp,0x10
c0017df7:	b0 01                	mov    al,0x1
c0017df9:	83 c4 5c             	add    esp,0x5c
c0017dfc:	5b                   	pop    ebx
c0017dfd:	5e                   	pop    esi
c0017dfe:	5f                   	pop    edi
c0017dff:	5d                   	pop    ebp
c0017e00:	c3                   	ret    

c0017e01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017e01:	55                   	push   ebp
c0017e02:	57                   	push   edi
c0017e03:	56                   	push   esi
c0017e04:	53                   	push   ebx
c0017e05:	81 ec 68 03 00 00    	sub    esp,0x368
c0017e0b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017e12:	8b 1d d0 a1 02 c0    	mov    ebx,DWORD PTR ds:0xc002a1d0
c0017e18:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017e1c:	68 14 01 00 00       	push   0x114
c0017e21:	e8 4d 1f ff ff       	call   c0009d73 <malloc>
c0017e26:	83 c4 0c             	add    esp,0xc
c0017e29:	89 c5                	mov    ebp,eax
c0017e2b:	53                   	push   ebx
c0017e2c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017e33:	50                   	push   eax
c0017e34:	e8 91 57 ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c0017e39:	5e                   	pop    esi
c0017e3a:	5f                   	pop    edi
c0017e3b:	6a 01                	push   0x1
c0017e3d:	55                   	push   ebp
c0017e3e:	e8 61 58 ff ff       	call   c000d6a4 <File::open(FileOpenMode)>
c0017e43:	83 c4 10             	add    esp,0x10
c0017e46:	85 c0                	test   eax,eax
c0017e48:	0f 85 a7 06 00 00    	jne    c00184f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e4e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017e56:	83 ec 0c             	sub    esp,0xc
c0017e59:	6a 34                	push   0x34
c0017e5b:	e8 13 1f ff ff       	call   c0009d73 <malloc>
c0017e60:	5b                   	pop    ebx
c0017e61:	89 c7                	mov    edi,eax
c0017e63:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017e67:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017e6a:	53                   	push   ebx
c0017e6b:	57                   	push   edi
c0017e6c:	6a 00                	push   0x0
c0017e6e:	6a 34                	push   0x34
c0017e70:	55                   	push   ebp
c0017e71:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017e74:	83 c4 20             	add    esp,0x20
c0017e77:	85 c0                	test   eax,eax
c0017e79:	0f 85 76 06 00 00    	jne    c00184f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e7f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017e85:	0f 85 6a 06 00 00    	jne    c00184f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e8b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017e8e:	85 c0                	test   eax,eax
c0017e90:	0f 84 5f 06 00 00    	je     c00184f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017e96:	31 d2                	xor    edx,edx
c0017e98:	51                   	push   ecx
c0017e99:	52                   	push   edx
c0017e9a:	50                   	push   eax
c0017e9b:	55                   	push   ebp
c0017e9c:	e8 c1 58 ff ff       	call   c000d762 <File::seek(unsigned long long)>
c0017ea1:	83 c4 10             	add    esp,0x10
c0017ea4:	85 c0                	test   eax,eax
c0017ea6:	0f 85 49 06 00 00    	jne    c00184f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017eac:	83 ec 0c             	sub    esp,0xc
c0017eaf:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0017eb2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017eb6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017eba:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017ebe:	0f af c2             	imul   eax,edx
c0017ec1:	50                   	push   eax
c0017ec2:	e8 ac 1e ff ff       	call   c0009d73 <malloc>
c0017ec7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017eca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017ece:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017ed1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ed5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017ed9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017edd:	0f af c2             	imul   eax,edx
c0017ee0:	99                   	cdq    
c0017ee1:	52                   	push   edx
c0017ee2:	50                   	push   eax
c0017ee3:	55                   	push   ebp
c0017ee4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017ee7:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0017eea:	83 c4 20             	add    esp,0x20
c0017eed:	85 c0                	test   eax,eax
c0017eef:	0f 84 00 06 00 00    	je     c00184f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017ef5:	52                   	push   edx
c0017ef6:	31 d2                	xor    edx,edx
c0017ef8:	52                   	push   edx
c0017ef9:	50                   	push   eax
c0017efa:	55                   	push   ebp
c0017efb:	e8 62 58 ff ff       	call   c000d762 <File::seek(unsigned long long)>
c0017f00:	83 c4 10             	add    esp,0x10
c0017f03:	85 c0                	test   eax,eax
c0017f05:	0f 85 ea 05 00 00    	jne    c00184f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017f0b:	83 ec 0c             	sub    esp,0xc
c0017f0e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017f12:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017f16:	31 f6                	xor    esi,esi
c0017f18:	0f af c2             	imul   eax,edx
c0017f1b:	50                   	push   eax
c0017f1c:	e8 52 1e ff ff       	call   c0009d73 <malloc>
c0017f21:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017f24:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017f28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017f2b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017f2f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017f33:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017f37:	0f af c2             	imul   eax,edx
c0017f3a:	99                   	cdq    
c0017f3b:	52                   	push   edx
c0017f3c:	50                   	push   eax
c0017f3d:	55                   	push   ebp
c0017f3e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017f41:	83 c4 20             	add    esp,0x20
c0017f44:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017f48:	0f 86 8a 00 00 00    	jbe    c0017fd8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0017f4e:	0f b7 de             	movzx  ebx,si
c0017f51:	c1 e3 05             	shl    ebx,0x5
c0017f54:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017f58:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017f5b:	75 75                	jne    c0017fd2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0017f5d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017f60:	31 d2                	xor    edx,edx
c0017f62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f66:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017f69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f6d:	50                   	push   eax
c0017f6e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017f71:	52                   	push   edx
c0017f72:	50                   	push   eax
c0017f73:	55                   	push   ebp
c0017f74:	e8 e9 57 ff ff       	call   c000d762 <File::seek(unsigned long long)>
c0017f79:	83 c4 10             	add    esp,0x10
c0017f7c:	85 c0                	test   eax,eax
c0017f7e:	0f 85 71 05 00 00    	jne    c00184f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017f84:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0017f8b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017f8e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0017f92:	31 d2                	xor    edx,edx
c0017f94:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0017f98:	83 ec 0c             	sub    esp,0xc
c0017f9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f9f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017fa6:	50                   	push   eax
c0017fa7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017faf:	52                   	push   edx
c0017fb0:	50                   	push   eax
c0017fb1:	55                   	push   ebp
c0017fb2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017fb5:	83 c4 1c             	add    esp,0x1c
c0017fb8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017fbb:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017fbe:	50                   	push   eax
c0017fbf:	6a 00                	push   0x0
c0017fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fc5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017fc9:	50                   	push   eax
c0017fca:	e8 c5 86 fe ff       	call   c0000694 <memset>
c0017fcf:	83 c4 10             	add    esp,0x10
c0017fd2:	46                   	inc    esi
c0017fd3:	e9 6c ff ff ff       	jmp    c0017f44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0017fd8:	53                   	push   ebx
c0017fd9:	31 db                	xor    ebx,ebx
c0017fdb:	68 00 01 00 00       	push   0x100
c0017fe0:	6a 00                	push   0x0
c0017fe2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017fe6:	50                   	push   eax
c0017fe7:	e8 a8 86 fe ff       	call   c0000694 <memset>
c0017fec:	83 c4 0c             	add    esp,0xc
c0017fef:	68 00 01 00 00       	push   0x100
c0017ff4:	6a 00                	push   0x0
c0017ff6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017ffd:	50                   	push   eax
c0017ffe:	e8 91 86 fe ff       	call   c0000694 <memset>
c0018003:	83 c4 10             	add    esp,0x10
c0018006:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001800e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018016:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001801e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0018026:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001802e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0018032:	0f 86 30 01 00 00    	jbe    c0018168 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0018038:	0f b7 f3             	movzx  esi,bx
c001803b:	6b f6 28             	imul   esi,esi,0x28
c001803e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0018042:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0018045:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018049:	52                   	push   edx
c001804a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001804e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0018052:	8b 06                	mov    eax,DWORD PTR [esi]
c0018054:	6b d2 28             	imul   edx,edx,0x28
c0018057:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001805b:	31 d2                	xor    edx,edx
c001805d:	52                   	push   edx
c001805e:	50                   	push   eax
c001805f:	55                   	push   ebp
c0018060:	e8 fd 56 ff ff       	call   c000d762 <File::seek(unsigned long long)>
c0018065:	83 c4 0c             	add    esp,0xc
c0018068:	6a 20                	push   0x20
c001806a:	6a 00                	push   0x0
c001806c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0018073:	51                   	push   ecx
c0018074:	e8 1b 86 fe ff       	call   c0000694 <memset>
c0018079:	59                   	pop    ecx
c001807a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001807d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0018081:	52                   	push   edx
c0018082:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0018089:	51                   	push   ecx
c001808a:	6a 00                	push   0x0
c001808c:	6a 1f                	push   0x1f
c001808e:	55                   	push   ebp
c001808f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018092:	83 c4 1c             	add    esp,0x1c
c0018095:	6a 09                	push   0x9
c0018097:	68 7e 6c 02 c0       	push   0xc0026c7e
c001809c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00180a3:	51                   	push   ecx
c00180a4:	e8 e7 84 fe ff       	call   c0000590 <memcmp>
c00180a9:	83 c4 10             	add    esp,0x10
c00180ac:	85 c0                	test   eax,eax
c00180ae:	75 21                	jne    c00180d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00180b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00180b8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00180bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00180c0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00180c3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00180ca:	89 d0                	mov    eax,edx
c00180cc:	40                   	inc    eax
c00180cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00180d1:	50                   	push   eax
c00180d2:	6a 09                	push   0x9
c00180d4:	68 88 6c 02 c0       	push   0xc0026c88
c00180d9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00180e0:	50                   	push   eax
c00180e1:	e8 aa 84 fe ff       	call   c0000590 <memcmp>
c00180e6:	83 c4 10             	add    esp,0x10
c00180e9:	85 c0                	test   eax,eax
c00180eb:	75 21                	jne    c001810e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00180ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00180f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00180f5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00180f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00180fd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018100:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0018107:	89 d0                	mov    eax,edx
c0018109:	40                   	inc    eax
c001810a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001810e:	50                   	push   eax
c001810f:	50                   	push   eax
c0018110:	68 54 6c 02 c0       	push   0xc0026c54
c0018115:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001811c:	50                   	push   eax
c001811d:	e8 ba 86 fe ff       	call   c00007dc <strcmp>
c0018122:	83 c4 10             	add    esp,0x10
c0018125:	85 c0                	test   eax,eax
c0018127:	75 0f                	jne    c0018138 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0018129:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001812c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018130:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018134:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018138:	50                   	push   eax
c0018139:	50                   	push   eax
c001813a:	68 5c 6c 02 c0       	push   0xc0026c5c
c001813f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018146:	50                   	push   eax
c0018147:	e8 90 86 fe ff       	call   c00007dc <strcmp>
c001814c:	83 c4 10             	add    esp,0x10
c001814f:	85 c0                	test   eax,eax
c0018151:	75 0f                	jne    c0018162 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0018153:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0018156:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001815a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001815e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018162:	43                   	inc    ebx
c0018163:	e9 c6 fe ff ff       	jmp    c001802e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0018168:	31 d2                	xor    edx,edx
c001816a:	50                   	push   eax
c001816b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001816f:	52                   	push   edx
c0018170:	50                   	push   eax
c0018171:	55                   	push   ebp
c0018172:	e8 eb 55 ff ff       	call   c000d762 <File::seek(unsigned long long)>
c0018177:	58                   	pop    eax
c0018178:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001817c:	e8 f2 1b ff ff       	call   c0009d73 <malloc>
c0018181:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0018184:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018188:	31 d2                	xor    edx,edx
c001818a:	58                   	pop    eax
c001818b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001818f:	53                   	push   ebx
c0018190:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018194:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018198:	52                   	push   edx
c0018199:	50                   	push   eax
c001819a:	55                   	push   ebp
c001819b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001819e:	83 c4 14             	add    esp,0x14
c00181a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181a5:	e8 c9 1b ff ff       	call   c0009d73 <malloc>
c00181aa:	31 d2                	xor    edx,edx
c00181ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00181b0:	83 c4 0c             	add    esp,0xc
c00181b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181b7:	52                   	push   edx
c00181b8:	50                   	push   eax
c00181b9:	55                   	push   ebp
c00181ba:	e8 a3 55 ff ff       	call   c000d762 <File::seek(unsigned long long)>
c00181bf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00181c2:	31 d2                	xor    edx,edx
c00181c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00181c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00181cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00181cf:	52                   	push   edx
c00181d0:	50                   	push   eax
c00181d1:	55                   	push   ebp
c00181d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00181d5:	83 c4 20             	add    esp,0x20
c00181d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00181e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00181e4:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00181e8:	0f 84 0b 03 00 00    	je     c00184f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00181ee:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00181f5:	31 d2                	xor    edx,edx
c00181f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00181fb:	c1 e8 03             	shr    eax,0x3
c00181fe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0018202:	51                   	push   ecx
c0018203:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018207:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001820b:	52                   	push   edx
c001820c:	50                   	push   eax
c001820d:	55                   	push   ebp
c001820e:	e8 4f 55 ff ff       	call   c000d762 <File::seek(unsigned long long)>
c0018213:	5b                   	pop    ebx
c0018214:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018218:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001821f:	e8 4f 1b ff ff       	call   c0009d73 <malloc>
c0018224:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0018227:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001822b:	31 d2                	xor    edx,edx
c001822d:	5e                   	pop    esi
c001822e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0018232:	50                   	push   eax
c0018233:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018237:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001823b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0018242:	52                   	push   edx
c0018243:	50                   	push   eax
c0018244:	55                   	push   ebp
c0018245:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018248:	83 c4 20             	add    esp,0x20
c001824b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018253:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018257:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001825b:	0f 8d 7c 02 00 00    	jge    c00184dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0018261:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018265:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018269:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001826e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0018271:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018275:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018279:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001827d:	89 d8                	mov    eax,ebx
c001827f:	c1 e8 08             	shr    eax,0x8
c0018282:	89 c6                	mov    esi,eax
c0018284:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018288:	c1 e6 04             	shl    esi,0x4
c001828b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001828f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0018292:	85 d2                	test   edx,edx
c0018294:	0f 85 bf 00 00 00    	jne    c0018359 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001829a:	83 ec 0c             	sub    esp,0xc
c001829d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182a1:	03 06                	add    eax,DWORD PTR [esi]
c00182a3:	50                   	push   eax
c00182a4:	e8 4b f8 ff ff       	call   c0017af4 <Thr::getAddressOfKernelSymbol(char const*)>
c00182a9:	83 c4 10             	add    esp,0x10
c00182ac:	89 c2                	mov    edx,eax
c00182ae:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00182b3:	85 c0                	test   eax,eax
c00182b5:	0f 85 9e 00 00 00    	jne    c0018359 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00182bb:	83 ec 0c             	sub    esp,0xc
c00182be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182c2:	03 06                	add    eax,DWORD PTR [esi]
c00182c4:	50                   	push   eax
c00182c5:	e8 56 06 ff ff       	call   c0008920 <Krnl::resolveCompatibilitySymbol(char*)>
c00182ca:	83 c4 10             	add    esp,0x10
c00182cd:	89 c2                	mov    edx,eax
c00182cf:	85 c0                	test   eax,eax
c00182d1:	0f 85 82 00 00 00    	jne    c0018359 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00182d7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00182db:	50                   	push   eax
c00182dc:	50                   	push   eax
c00182dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182e1:	03 06                	add    eax,DWORD PTR [esi]
c00182e3:	50                   	push   eax
c00182e4:	68 92 6c 02 c0       	push   0xc0026c92
c00182e9:	e8 71 4d ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00182ee:	58                   	pop    eax
c00182ef:	5a                   	pop    edx
c00182f0:	68 ac 6c 02 c0       	push   0xc0026cac
c00182f5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00182fc:	50                   	push   eax
c00182fd:	e8 4e 84 fe ff       	call   c0000750 <strcpy>
c0018302:	59                   	pop    ecx
c0018303:	58                   	pop    eax
c0018304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018308:	03 06                	add    eax,DWORD PTR [esi]
c001830a:	50                   	push   eax
c001830b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018312:	50                   	push   eax
c0018313:	e8 78 85 fe ff       	call   c0000890 <strcat>
c0018318:	58                   	pop    eax
c0018319:	5a                   	pop    edx
c001831a:	68 42 6d 02 c0       	push   0xc0026d42
c001831f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018326:	50                   	push   eax
c0018327:	e8 64 85 fe ff       	call   c0000890 <strcat>
c001832c:	83 c4 10             	add    esp,0x10
c001832f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018334:	0f 84 5d 01 00 00    	je     c0018497 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001833a:	83 ec 0c             	sub    esp,0xc
c001833d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0018344:	50                   	push   eax
c0018345:	e8 e7 cd ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001834a:	83 c4 10             	add    esp,0x10
c001834d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018351:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018355:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018359:	80 fb 01             	cmp    bl,0x1
c001835c:	0f 85 88 00 00 00    	jne    c00183ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0018362:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0018369:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001836d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0018371:	01 ce                	add    esi,ecx
c0018373:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0018379:	0f 94 c0             	sete   al
c001837c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0018382:	0f 94 c3             	sete   bl
c0018385:	09 c3                	or     ebx,eax
c0018387:	8b 06                	mov    eax,DWORD PTR [esi]
c0018389:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001838e:	74 41                	je     c00183d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0018390:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018393:	84 db                	test   bl,bl
c0018395:	75 15                	jne    c00183ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0018397:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001839b:	66 83 f8 0c          	cmp    ax,0xc
c001839f:	76 05                	jbe    c00183a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00183a1:	b8 0c 00 00 00       	mov    eax,0xc
c00183a6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00183aa:	76 37                	jbe    c00183e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00183ac:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00183b0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00183b5:	0f 84 dc 00 00 00    	je     c0018497 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00183bb:	83 ec 0c             	sub    esp,0xc
c00183be:	68 c3 6c 02 c0       	push   0xc0026cc3
c00183c3:	e8 69 cd ff ff       	call   c0015131 <Krnl::panic(char const*)>
c00183c8:	83 c4 10             	add    esp,0x10
c00183cb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00183cf:	eb 12                	jmp    c00183e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00183d1:	01 c1                	add    ecx,eax
c00183d3:	84 db                	test   bl,bl
c00183d5:	75 0c                	jne    c00183e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00183d7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00183db:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00183df:	77 02                	ja     c00183e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00183e1:	01 d1                	add    ecx,edx
c00183e3:	89 0e                	mov    DWORD PTR [esi],ecx
c00183e5:	e9 ea 00 00 00       	jmp    c00184d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00183ea:	80 fb 02             	cmp    bl,0x2
c00183ed:	75 7c                	jne    c001846b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00183ef:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00183f6:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00183fa:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c00183fe:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0018404:	74 20                	je     c0018426 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0018406:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001840c:	74 18                	je     c0018426 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001840e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0018412:	b9 0a 00 00 00       	mov    ecx,0xa
c0018417:	66 83 f8 0e          	cmp    ax,0xe
c001841b:	77 03                	ja     c0018420 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001841d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0018420:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0018424:	76 1f                	jbe    c0018445 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0018426:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001842a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001842f:	74 66                	je     c0018497 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0018431:	83 ec 0c             	sub    esp,0xc
c0018434:	68 df 6c 02 c0       	push   0xc0026cdf
c0018439:	e8 f3 cc ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001843e:	83 c4 10             	add    esp,0x10
c0018441:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018445:	8b 06                	mov    eax,DWORD PTR [esi]
c0018447:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001844c:	74 13                	je     c0018461 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001844e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018452:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0018459:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001845d:	01 c8                	add    eax,ecx
c001845f:	eb 04                	jmp    c0018465 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0018461:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0018465:	01 c2                	add    edx,eax
c0018467:	89 16                	mov    DWORD PTR [esi],edx
c0018469:	eb 69                	jmp    c00184d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001846b:	0f b6 db             	movzx  ebx,bl
c001846e:	50                   	push   eax
c001846f:	50                   	push   eax
c0018470:	53                   	push   ebx
c0018471:	68 fb 6c 02 c0       	push   0xc0026cfb
c0018476:	e8 e4 4b ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001847b:	83 c4 10             	add    esp,0x10
c001847e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018483:	74 12                	je     c0018497 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0018485:	83 ec 0c             	sub    esp,0xc
c0018488:	68 06 6d 02 c0       	push   0xc0026d06
c001848d:	e8 9f cc ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0018492:	83 c4 10             	add    esp,0x10
c0018495:	eb 3d                	jmp    c00184d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0018497:	83 ec 0c             	sub    esp,0xc
c001849a:	55                   	push   ebp
c001849b:	e8 62 52 ff ff       	call   c000d702 <File::close()>
c00184a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00184a3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00184a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00184a9:	59                   	pop    ecx
c00184aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00184ae:	e8 d0 18 ff ff       	call   c0009d83 <free>
c00184b3:	5b                   	pop    ebx
c00184b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00184b8:	e8 c6 18 ff ff       	call   c0009d83 <free>
c00184bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c00184c0:	e8 be 18 ff ff       	call   c0009d83 <free>
c00184c5:	5e                   	pop    esi
c00184c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00184ca:	e8 b4 18 ff ff       	call   c0009d83 <free>
c00184cf:	83 c4 10             	add    esp,0x10
c00184d2:	eb 21                	jmp    c00184f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00184d4:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00184d8:	e9 76 fd ff ff       	jmp    c0018253 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00184dd:	83 ec 0c             	sub    esp,0xc
c00184e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00184e4:	e8 9a 18 ff ff       	call   c0009d83 <free>
c00184e9:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00184ed:	83 c4 10             	add    esp,0x10
c00184f0:	e9 eb fc ff ff       	jmp    c00181e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00184f5:	31 c0                	xor    eax,eax
c00184f7:	eb 33                	jmp    c001852c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c00184f9:	83 ec 0c             	sub    esp,0xc
c00184fc:	55                   	push   ebp
c00184fd:	e8 00 52 ff ff       	call   c000d702 <File::close()>
c0018502:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018505:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018508:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001850b:	58                   	pop    eax
c001850c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018510:	e8 6e 18 ff ff       	call   c0009d83 <free>
c0018515:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018518:	e8 66 18 ff ff       	call   c0009d83 <free>
c001851d:	5a                   	pop    edx
c001851e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018522:	e8 5c 18 ff ff       	call   c0009d83 <free>
c0018527:	83 c4 10             	add    esp,0x10
c001852a:	b0 01                	mov    al,0x1
c001852c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0018532:	5b                   	pop    ebx
c0018533:	5e                   	pop    esi
c0018534:	5f                   	pop    edi
c0018535:	5d                   	pop    ebp
c0018536:	c3                   	ret    

c0018537 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0018537:	56                   	push   esi
c0018538:	31 d2                	xor    edx,edx
c001853a:	53                   	push   ebx
c001853b:	8b 1d e0 99 02 c0    	mov    ebx,DWORD PTR ds:0xc00299e0
c0018541:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018545:	39 d3                	cmp    ebx,edx
c0018547:	7e 1b                	jle    c0018564 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0018549:	8b 04 95 00 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6400]
c0018550:	39 c8                	cmp    eax,ecx
c0018552:	77 0d                	ja     c0018561 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0018554:	8b 34 95 00 9a 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6600]
c001855b:	01 c6                	add    esi,eax
c001855d:	39 ce                	cmp    esi,ecx
c001855f:	77 05                	ja     c0018566 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0018561:	42                   	inc    edx
c0018562:	eb e1                	jmp    c0018545 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0018564:	31 c0                	xor    eax,eax
c0018566:	5b                   	pop    ebx
c0018567:	5e                   	pop    esi
c0018568:	c3                   	ret    

c0018569 <Thr::getDriverNameFromAddress(unsigned long)>:
c0018569:	53                   	push   ebx
c001856a:	31 c0                	xor    eax,eax
c001856c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018570:	8b 1d e0 99 02 c0    	mov    ebx,DWORD PTR ds:0xc00299e0
c0018576:	39 c3                	cmp    ebx,eax
c0018578:	7e 22                	jle    c001859c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001857a:	8b 14 85 00 9c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6400]
c0018581:	39 ca                	cmp    edx,ecx
c0018583:	77 14                	ja     c0018599 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018585:	03 14 85 00 9a 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6600]
c001858c:	39 ca                	cmp    edx,ecx
c001858e:	76 09                	jbe    c0018599 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018590:	8b 04 85 00 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6200]
c0018597:	eb 05                	jmp    c001859e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0018599:	40                   	inc    eax
c001859a:	eb da                	jmp    c0018576 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001859c:	31 c0                	xor    eax,eax
c001859e:	5b                   	pop    ebx
c001859f:	c3                   	ret    

c00185a0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00185a0:	53                   	push   ebx
c00185a1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00185a5:	53                   	push   ebx
c00185a6:	e8 8c ff ff ff       	call   c0018537 <Thr::getDriverBaseFromAddress(unsigned long)>
c00185ab:	5a                   	pop    edx
c00185ac:	31 d2                	xor    edx,edx
c00185ae:	85 c0                	test   eax,eax
c00185b0:	74 04                	je     c00185b6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00185b2:	89 da                	mov    edx,ebx
c00185b4:	29 c2                	sub    edx,eax
c00185b6:	89 d0                	mov    eax,edx
c00185b8:	5b                   	pop    ebx
c00185b9:	c3                   	ret    

c00185ba <Thr::loadDLL(char const*, bool)>:
c00185ba:	55                   	push   ebp
c00185bb:	57                   	push   edi
c00185bc:	56                   	push   esi
c00185bd:	53                   	push   ebx
c00185be:	81 ec 34 01 00 00    	sub    esp,0x134
c00185c4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00185cb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00185d2:	56                   	push   esi
c00185d3:	68 1e 6d 02 c0       	push   0xc0026d1e
c00185d8:	e8 82 4a ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00185dd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00185e4:	e8 8a 17 ff ff       	call   c0009d73 <malloc>
c00185e9:	83 c4 0c             	add    esp,0xc
c00185ec:	89 c3                	mov    ebx,eax
c00185ee:	ff 35 d0 a1 02 c0    	push   DWORD PTR ds:0xc002a1d0
c00185f4:	56                   	push   esi
c00185f5:	50                   	push   eax
c00185f6:	e8 cf 4f ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c00185fb:	83 c4 10             	add    esp,0x10
c00185fe:	85 db                	test   ebx,ebx
c0018600:	75 3c                	jne    c001863e <Thr::loadDLL(char const*, bool)+0x84>
c0018602:	89 f8                	mov    eax,edi
c0018604:	84 c0                	test   al,al
c0018606:	0f 84 d2 01 00 00    	je     c00187de <Thr::loadDLL(char const*, bool)+0x224>
c001860c:	55                   	push   ebp
c001860d:	55                   	push   ebp
c001860e:	68 2f 6d 02 c0       	push   0xc0026d2f
c0018613:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0018617:	55                   	push   ebp
c0018618:	e8 33 81 fe ff       	call   c0000750 <strcpy>
c001861d:	58                   	pop    eax
c001861e:	5a                   	pop    edx
c001861f:	56                   	push   esi
c0018620:	55                   	push   ebp
c0018621:	e8 6a 82 fe ff       	call   c0000890 <strcat>
c0018626:	59                   	pop    ecx
c0018627:	58                   	pop    eax
c0018628:	68 42 6d 02 c0       	push   0xc0026d42
c001862d:	55                   	push   ebp
c001862e:	e8 5d 82 fe ff       	call   c0000890 <strcat>
c0018633:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018636:	e8 f6 ca ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001863b:	83 c4 10             	add    esp,0x10
c001863e:	51                   	push   ecx
c001863f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0018643:	50                   	push   eax
c0018644:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018648:	50                   	push   eax
c0018649:	53                   	push   ebx
c001864a:	e8 01 53 ff ff       	call   c000d950 <File::stat(unsigned long long*, bool*)>
c001864f:	83 c4 10             	add    esp,0x10
c0018652:	85 db                	test   ebx,ebx
c0018654:	74 0c                	je     c0018662 <Thr::loadDLL(char const*, bool)+0xa8>
c0018656:	83 ec 0c             	sub    esp,0xc
c0018659:	8b 03                	mov    eax,DWORD PTR [ebx]
c001865b:	53                   	push   ebx
c001865c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001865f:	83 c4 10             	add    esp,0x10
c0018662:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0018667:	75 0a                	jne    c0018673 <Thr::loadDLL(char const*, bool)+0xb9>
c0018669:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001866d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0018671:	75 3c                	jne    c00186af <Thr::loadDLL(char const*, bool)+0xf5>
c0018673:	89 f8                	mov    eax,edi
c0018675:	84 c0                	test   al,al
c0018677:	0f 84 49 01 00 00    	je     c00187c6 <Thr::loadDLL(char const*, bool)+0x20c>
c001867d:	51                   	push   ecx
c001867e:	51                   	push   ecx
c001867f:	68 2f 6d 02 c0       	push   0xc0026d2f
c0018684:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0018688:	53                   	push   ebx
c0018689:	e8 c2 80 fe ff       	call   c0000750 <strcpy>
c001868e:	5d                   	pop    ebp
c001868f:	58                   	pop    eax
c0018690:	56                   	push   esi
c0018691:	53                   	push   ebx
c0018692:	e8 f9 81 fe ff       	call   c0000890 <strcat>
c0018697:	58                   	pop    eax
c0018698:	5a                   	pop    edx
c0018699:	68 42 6d 02 c0       	push   0xc0026d42
c001869e:	53                   	push   ebx
c001869f:	e8 ec 81 fe ff       	call   c0000890 <strcat>
c00186a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00186a7:	e8 85 ca ff ff       	call   c0015131 <Krnl::panic(char const*)>
c00186ac:	83 c4 10             	add    esp,0x10
c00186af:	52                   	push   edx
c00186b0:	6a 03                	push   0x3
c00186b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186b6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00186ba:	05 ff 0f 00 00       	add    eax,0xfff
c00186bf:	83 d2 00             	adc    edx,0x0
c00186c2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00186c6:	50                   	push   eax
c00186c7:	ff 35 b0 8d 02 c0    	push   DWORD PTR ds:0xc0028db0
c00186cd:	e8 10 3e ff ff       	call   c000c4e2 <VAS::allocatePages(int, int)>
c00186d2:	59                   	pop    ecx
c00186d3:	89 c3                	mov    ebx,eax
c00186d5:	5d                   	pop    ebp
c00186d6:	50                   	push   eax
c00186d7:	68 2e 4c 02 c0       	push   0xc0024c2e
c00186dc:	e8 7e 49 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00186e1:	89 34 24             	mov    DWORD PTR [esp],esi
c00186e4:	e8 c7 7f fe ff       	call   c00006b0 <strlen>
c00186e9:	8b 2d e0 99 02 c0    	mov    ebp,DWORD PTR ds:0xc00299e0
c00186ef:	40                   	inc    eax
c00186f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00186f3:	e8 7b 16 ff ff       	call   c0009d73 <malloc>
c00186f8:	89 04 ad 00 9e 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6200],eax
c00186ff:	58                   	pop    eax
c0018700:	a1 e0 99 02 c0       	mov    eax,ds:0xc00299e0
c0018705:	5a                   	pop    edx
c0018706:	56                   	push   esi
c0018707:	ff 34 85 00 9e 02 c0 	push   DWORD PTR [eax*4-0x3ffd6200]
c001870e:	e8 3d 80 fe ff       	call   c0000750 <strcpy>
c0018713:	a1 e0 99 02 c0       	mov    eax,ds:0xc00299e0
c0018718:	8d 50 01             	lea    edx,[eax+0x1]
c001871b:	89 1c 85 00 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6400],ebx
c0018722:	89 15 e0 99 02 c0    	mov    DWORD PTR ds:0xc00299e0,edx
c0018728:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001872c:	83 c4 0c             	add    esp,0xc
c001872f:	89 14 85 00 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6600],edx
c0018736:	6a 01                	push   0x1
c0018738:	53                   	push   ebx
c0018739:	56                   	push   esi
c001873a:	e8 c2 f6 ff ff       	call   c0017e01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001873f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018743:	83 c4 10             	add    esp,0x10
c0018746:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001874b:	0f 85 89 00 00 00    	jne    c00187da <Thr::loadDLL(char const*, bool)+0x220>
c0018751:	89 f8                	mov    eax,edi
c0018753:	84 c0                	test   al,al
c0018755:	74 73                	je     c00187ca <Thr::loadDLL(char const*, bool)+0x210>
c0018757:	83 ec 0c             	sub    esp,0xc
c001875a:	68 44 6d 02 c0       	push   0xc0026d44
c001875f:	e8 cd c9 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0018764:	83 c4 10             	add    esp,0x10
c0018767:	eb 61                	jmp    c00187ca <Thr::loadDLL(char const*, bool)+0x210>
c0018769:	50                   	push   eax
c001876a:	50                   	push   eax
c001876b:	89 e8                	mov    eax,ebp
c001876d:	c1 e0 0c             	shl    eax,0xc
c0018770:	01 d8                	add    eax,ebx
c0018772:	50                   	push   eax
c0018773:	ff 35 b0 8d 02 c0    	push   DWORD PTR ds:0xc0028db0
c0018779:	e8 cc 38 ff ff       	call   c000c04a <VAS::getPageTableEntry(unsigned long)>
c001877e:	83 c4 10             	add    esp,0x10
c0018781:	8b 00                	mov    eax,DWORD PTR [eax]
c0018783:	a8 60                	test   al,0x60
c0018785:	75 11                	jne    c0018798 <Thr::loadDLL(char const*, bool)+0x1de>
c0018787:	83 ec 0c             	sub    esp,0xc
c001878a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001878f:	50                   	push   eax
c0018790:	e8 12 1c ff ff       	call   c000a3a7 <Phys::freePage(unsigned long)>
c0018795:	83 c4 10             	add    esp,0x10
c0018798:	45                   	inc    ebp
c0018799:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001879d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00187a1:	05 ff 0f 00 00       	add    eax,0xfff
c00187a6:	bf 00 00 00 00       	mov    edi,0x0
c00187ab:	83 d2 00             	adc    edx,0x0
c00187ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00187b2:	c1 ea 0c             	shr    edx,0xc
c00187b5:	39 c5                	cmp    ebp,eax
c00187b7:	89 d1                	mov    ecx,edx
c00187b9:	89 f8                	mov    eax,edi
c00187bb:	19 c8                	sbb    eax,ecx
c00187bd:	72 aa                	jb     c0018769 <Thr::loadDLL(char const*, bool)+0x1af>
c00187bf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00187c4:	75 18                	jne    c00187de <Thr::loadDLL(char const*, bool)+0x224>
c00187c6:	31 db                	xor    ebx,ebx
c00187c8:	eb 14                	jmp    c00187de <Thr::loadDLL(char const*, bool)+0x224>
c00187ca:	83 ec 0c             	sub    esp,0xc
c00187cd:	68 63 6d 02 c0       	push   0xc0026d63
c00187d2:	e8 5a c9 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c00187d7:	83 c4 10             	add    esp,0x10
c00187da:	31 ed                	xor    ebp,ebp
c00187dc:	eb bb                	jmp    c0018799 <Thr::loadDLL(char const*, bool)+0x1df>
c00187de:	81 c4 2c 01 00 00    	add    esp,0x12c
c00187e4:	89 d8                	mov    eax,ebx
c00187e6:	5b                   	pop    ebx
c00187e7:	5e                   	pop    esi
c00187e8:	5f                   	pop    edi
c00187e9:	5d                   	pop    ebp
c00187ea:	c3                   	ret    

c00187eb <Thr::executeDLL(unsigned long, void*)>:
c00187eb:	56                   	push   esi
c00187ec:	53                   	push   ebx
c00187ed:	52                   	push   edx
c00187ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00187f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00187f6:	85 db                	test   ebx,ebx
c00187f8:	75 10                	jne    c001880a <Thr::executeDLL(unsigned long, void*)+0x1f>
c00187fa:	83 ec 0c             	sub    esp,0xc
c00187fd:	68 7f 6d 02 c0       	push   0xc0026d7f
c0018802:	e8 2a c9 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0018807:	83 c4 10             	add    esp,0x10
c001880a:	50                   	push   eax
c001880b:	50                   	push   eax
c001880c:	53                   	push   ebx
c001880d:	68 a9 6d 02 c0       	push   0xc0026da9
c0018812:	e8 48 48 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0018817:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001881b:	89 d8                	mov    eax,ebx
c001881d:	83 c4 14             	add    esp,0x14
c0018820:	5b                   	pop    ebx
c0018821:	5e                   	pop    esi
c0018822:	ff e0                	jmp    eax

c0018824 <userModeEntryPoint(void*)>:
c0018824:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0018829:	48                   	dec    eax
c001882a:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c001882f:	75 03                	jne    c0018834 <userModeEntryPoint(void*)+0x10>
c0018831:	fb                   	sti    
c0018832:	66 90                	xchg   ax,ax
c0018834:	fb                   	sti    
c0018835:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001883a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001883d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0018843:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018847:	e9 23 7a fe ff       	jmp    c000026f <goToUsermode>

c001884c <changeTSS>:
c001884c:	83 ec 14             	sub    esp,0x14
c001884f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018854:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0018857:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001885c:	c1 e2 15             	shl    edx,0x15
c001885f:	29 d0                	sub    eax,edx
c0018861:	50                   	push   eax
c0018862:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0018867:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001886d:	05 7c 11 00 00       	add    eax,0x117c
c0018872:	50                   	push   eax
c0018873:	e8 14 2e ff ff       	call   c000b68c <TSS::setESP(unsigned long)>
c0018878:	83 c4 1c             	add    esp,0x1c
c001887b:	c3                   	ret    

c001887c <switchToThread(ThreadControlBlock*)>:
c001887c:	57                   	push   edi
c001887d:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c0018882:	56                   	push   esi
c0018883:	85 c0                	test   eax,eax
c0018885:	53                   	push   ebx
c0018886:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001888a:	0f 85 90 00 00 00    	jne    c0018920 <switchToThread(ThreadControlBlock*)+0xa4>
c0018890:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0018893:	3c ff                	cmp    al,0xff
c0018895:	0f 84 81 00 00 00    	je     c001891c <switchToThread(ThreadControlBlock*)+0xa0>
c001889b:	0f b6 d0             	movzx  edx,al
c001889e:	b8 00 04 00 00       	mov    eax,0x400
c00188a3:	29 d0                	sub    eax,edx
c00188a5:	d1 f8                	sar    eax,1
c00188a7:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c00188aa:	66 90                	xchg   ax,ax
c00188ac:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c00188af:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c00188b4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00188ba:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c00188c1:	74 4d                	je     c0018910 <switchToThread(ThreadControlBlock*)+0x94>
c00188c3:	0f 31                	rdtsc  
c00188c5:	a3 e8 a1 02 c0       	mov    ds:0xc002a1e8,eax
c00188ca:	89 c6                	mov    esi,eax
c00188cc:	89 d7                	mov    edi,edx
c00188ce:	2b 35 d8 a1 02 c0    	sub    esi,DWORD PTR ds:0xc002a1d8
c00188d4:	89 15 ec a1 02 c0    	mov    DWORD PTR ds:0xc002a1ec,edx
c00188da:	1b 3d dc a1 02 c0    	sbb    edi,DWORD PTR ds:0xc002a1dc
c00188e0:	89 35 e0 a1 02 c0    	mov    DWORD PTR ds:0xc002a1e0,esi
c00188e6:	a3 d8 a1 02 c0       	mov    ds:0xc002a1d8,eax
c00188eb:	89 3d e4 a1 02 c0    	mov    DWORD PTR ds:0xc002a1e4,edi
c00188f1:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00188f7:	89 15 dc a1 02 c0    	mov    DWORD PTR ds:0xc002a1dc,edx
c00188fd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018900:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0018903:	01 c6                	add    esi,eax
c0018905:	11 d7                	adc    edi,edx
c0018907:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001890a:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001890d:	8d 76 00             	lea    esi,[esi+0x0]
c0018910:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0018914:	5b                   	pop    ebx
c0018915:	5e                   	pop    esi
c0018916:	5f                   	pop    edi
c0018917:	e9 8b 79 fe ff       	jmp    c00002a7 <switchToThreadASM>
c001891c:	31 c0                	xor    eax,eax
c001891e:	eb 8c                	jmp    c00188ac <switchToThread(ThreadControlBlock*)+0x30>
c0018920:	5b                   	pop    ebx
c0018921:	c7 05 a0 a1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a1a0,0x1
c001892b:	5e                   	pop    esi
c001892c:	5f                   	pop    edi
c001892d:	c3                   	ret    
c001892e:	66 90                	xchg   ax,ax

c0018930 <Process::addArgs(char**)>:
c0018930:	57                   	push   edi
c0018931:	56                   	push   esi
c0018932:	53                   	push   ebx
c0018933:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018937:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001893b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0018945:	85 ff                	test   edi,edi
c0018947:	74 43                	je     c001898c <Process::addArgs(char**)+0x5c>
c0018949:	8b 07                	mov    eax,DWORD PTR [edi]
c001894b:	85 c0                	test   eax,eax
c001894d:	74 3d                	je     c001898c <Process::addArgs(char**)+0x5c>
c001894f:	31 db                	xor    ebx,ebx
c0018951:	8d 76 00             	lea    esi,[esi+0x0]
c0018954:	83 ec 0c             	sub    esp,0xc
c0018957:	50                   	push   eax
c0018958:	e8 53 7d fe ff       	call   c00006b0 <strlen>
c001895d:	40                   	inc    eax
c001895e:	89 04 24             	mov    DWORD PTR [esp],eax
c0018961:	e8 0d 14 ff ff       	call   c0009d73 <malloc>
c0018966:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001896d:	5a                   	pop    edx
c001896e:	59                   	pop    ecx
c001896f:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0018972:	43                   	inc    ebx
c0018973:	50                   	push   eax
c0018974:	e8 d7 7d fe ff       	call   c0000750 <strcpy>
c0018979:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c001897f:	83 c4 10             	add    esp,0x10
c0018982:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018985:	85 c0                	test   eax,eax
c0018987:	75 cb                	jne    c0018954 <Process::addArgs(char**)+0x24>
c0018989:	8d 76 00             	lea    esi,[esi+0x0]
c001898c:	5b                   	pop    ebx
c001898d:	5e                   	pop    esi
c001898e:	5f                   	pop    edi
c001898f:	c3                   	ret    

c0018990 <Process::Process(char const*, Process*, char**)>:
c0018990:	56                   	push   esi
c0018991:	53                   	push   ebx
c0018992:	83 ec 14             	sub    esp,0x14
c0018995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018999:	05 0c 02 00 00       	add    eax,0x20c
c001899e:	bb 07 00 00 00       	mov    ebx,0x7
c00189a3:	89 c6                	mov    esi,eax
c00189a5:	8d 76 00             	lea    esi,[esi+0x0]
c00189a8:	85 db                	test   ebx,ebx
c00189aa:	78 14                	js     c00189c0 <Process::Process(char const*, Process*, char**)+0x30>
c00189ac:	83 ec 0c             	sub    esp,0xc
c00189af:	56                   	push   esi
c00189b0:	e8 e7 af 00 00       	call   c002399c <ThreadControlBlock::ThreadControlBlock()>
c00189b5:	83 c4 10             	add    esp,0x10
c00189b8:	83 c6 5f             	add    esi,0x5f
c00189bb:	4b                   	dec    ebx
c00189bc:	eb ea                	jmp    c00189a8 <Process::Process(char const*, Process*, char**)+0x18>
c00189be:	66 90                	xchg   ax,ax
c00189c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189c4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00189cb:	83 ec 0c             	sub    esp,0xc
c00189ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00189d2:	e8 e3 c5 ff ff       	call   c0014fba <Krnl::newProcessEnv(Process*)>
c00189d7:	83 c4 10             	add    esp,0x10
c00189da:	89 c2                	mov    edx,eax
c00189dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189e0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00189e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189ea:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00189f3:	a1 b0 86 02 c0       	mov    eax,ds:0xc00286b0
c00189f8:	8d 50 01             	lea    edx,[eax+0x1]
c00189fb:	89 15 b0 86 02 c0    	mov    DWORD PTR ds:0xc00286b0,edx
c0018a01:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018a05:	89 02                	mov    DWORD PTR [edx],eax
c0018a07:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0018a0f:	83 ec 0c             	sub    esp,0xc
c0018a12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018a16:	e8 58 13 ff ff       	call   c0009d73 <malloc>
c0018a1b:	83 c4 10             	add    esp,0x10
c0018a1e:	89 c3                	mov    ebx,eax
c0018a20:	83 ec 08             	sub    esp,0x8
c0018a23:	6a 00                	push   0x0
c0018a25:	53                   	push   ebx
c0018a26:	e8 5f 3e ff ff       	call   c000c88a <VAS::VAS(bool)>
c0018a2b:	83 c4 10             	add    esp,0x10
c0018a2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a32:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018a38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a3c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018a46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a4e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018a54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a58:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a5e:	85 c0                	test   eax,eax
c0018a60:	74 42                	je     c0018aa4 <Process::Process(char const*, Process*, char**)+0x114>
c0018a62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a66:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a6c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018a72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a76:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018a7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a80:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018a86:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018a8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a90:	05 0c 01 00 00       	add    eax,0x10c
c0018a95:	83 ec 08             	sub    esp,0x8
c0018a98:	52                   	push   edx
c0018a99:	50                   	push   eax
c0018a9a:	e8 b1 7c fe ff       	call   c0000750 <strcpy>
c0018a9f:	83 c4 10             	add    esp,0x10
c0018aa2:	eb 64                	jmp    c0018b08 <Process::Process(char const*, Process*, char**)+0x178>
c0018aa4:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0018aac:	83 ec 0c             	sub    esp,0xc
c0018aaf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018ab3:	e8 bb 12 ff ff       	call   c0009d73 <malloc>
c0018ab8:	83 c4 10             	add    esp,0x10
c0018abb:	89 c3                	mov    ebx,eax
c0018abd:	83 ec 08             	sub    esp,0x8
c0018ac0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ac4:	53                   	push   ebx
c0018ac5:	e8 d6 28 ff ff       	call   c000b3a0 <VgaText::VgaText(char const*)>
c0018aca:	83 c4 10             	add    esp,0x10
c0018acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ad1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018adb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ae1:	83 ec 0c             	sub    esp,0xc
c0018ae4:	50                   	push   eax
c0018ae5:	e8 75 20 ff ff       	call   c000ab5f <addToTerminalCycle(VgaText*)>
c0018aea:	83 c4 10             	add    esp,0x10
c0018aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018af1:	05 0c 01 00 00       	add    eax,0x10c
c0018af6:	83 ec 08             	sub    esp,0x8
c0018af9:	68 c8 6d 02 c0       	push   0xc0026dc8
c0018afe:	50                   	push   eax
c0018aff:	e8 4c 7c fe ff       	call   c0000750 <strcpy>
c0018b04:	83 c4 10             	add    esp,0x10
c0018b07:	90                   	nop
c0018b08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b0c:	83 c0 0c             	add    eax,0xc
c0018b0f:	83 ec 08             	sub    esp,0x8
c0018b12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b16:	50                   	push   eax
c0018b17:	e8 34 7c fe ff       	call   c0000750 <strcpy>
c0018b1c:	83 c4 10             	add    esp,0x10
c0018b1f:	83 ec 08             	sub    esp,0x8
c0018b22:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b2a:	e8 01 fe ff ff       	call   c0018930 <Process::addArgs(char**)>
c0018b2f:	83 c4 10             	add    esp,0x10
c0018b32:	83 ec 08             	sub    esp,0x8
c0018b35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018b3d:	e8 89 ed ff ff       	call   c00178cb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018b42:	83 c4 10             	add    esp,0x10
c0018b45:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b49:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018b4d:	83 f0 01             	xor    eax,0x1
c0018b50:	88 c2                	mov    dl,al
c0018b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b56:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0018b5c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018b61:	83 ec 08             	sub    esp,0x8
c0018b64:	50                   	push   eax
c0018b65:	68 20 6e 02 c0       	push   0xc0026e20
c0018b6a:	e8 f0 44 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0018b6f:	83 c4 10             	add    esp,0x10
c0018b72:	90                   	nop
c0018b73:	83 c4 14             	add    esp,0x14
c0018b76:	5b                   	pop    ebx
c0018b77:	5e                   	pop    esi
c0018b78:	c3                   	ret    
c0018b79:	90                   	nop
c0018b7a:	66 90                	xchg   ax,ax

c0018b7c <Process::Process(bool, char const*, Process*, char**)>:
c0018b7c:	56                   	push   esi
c0018b7d:	53                   	push   ebx
c0018b7e:	83 ec 24             	sub    esp,0x24
c0018b81:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018b85:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b89:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b8d:	05 0c 02 00 00       	add    eax,0x20c
c0018b92:	bb 07 00 00 00       	mov    ebx,0x7
c0018b97:	89 c6                	mov    esi,eax
c0018b99:	8d 76 00             	lea    esi,[esi+0x0]
c0018b9c:	85 db                	test   ebx,ebx
c0018b9e:	78 14                	js     c0018bb4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0018ba0:	83 ec 0c             	sub    esp,0xc
c0018ba3:	56                   	push   esi
c0018ba4:	e8 f3 ad 00 00       	call   c002399c <ThreadControlBlock::ThreadControlBlock()>
c0018ba9:	83 c4 10             	add    esp,0x10
c0018bac:	83 c6 5f             	add    esi,0x5f
c0018baf:	4b                   	dec    ebx
c0018bb0:	eb ea                	jmp    c0018b9c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0018bb2:	66 90                	xchg   ax,ax
c0018bb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bb8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0018bbf:	83 ec 0c             	sub    esp,0xc
c0018bc2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018bc6:	e8 ef c3 ff ff       	call   c0014fba <Krnl::newProcessEnv(Process*)>
c0018bcb:	83 c4 10             	add    esp,0x10
c0018bce:	89 c2                	mov    edx,eax
c0018bd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bd4:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0018bda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018bde:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018be7:	a1 b0 86 02 c0       	mov    eax,ds:0xc00286b0
c0018bec:	8d 50 01             	lea    edx,[eax+0x1]
c0018bef:	89 15 b0 86 02 c0    	mov    DWORD PTR ds:0xc00286b0,edx
c0018bf5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018bf9:	89 02                	mov    DWORD PTR [edx],eax
c0018bfb:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0018c03:	83 ec 0c             	sub    esp,0xc
c0018c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018c0a:	e8 64 11 ff ff       	call   c0009d73 <malloc>
c0018c0f:	83 c4 10             	add    esp,0x10
c0018c12:	89 c3                	mov    ebx,eax
c0018c14:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018c19:	83 ec 08             	sub    esp,0x8
c0018c1c:	50                   	push   eax
c0018c1d:	53                   	push   ebx
c0018c1e:	e8 67 3c ff ff       	call   c000c88a <VAS::VAS(bool)>
c0018c23:	83 c4 10             	add    esp,0x10
c0018c26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c2a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018c30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c34:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018c3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c42:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c46:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018c4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c50:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018c56:	85 c0                	test   eax,eax
c0018c58:	74 42                	je     c0018c9c <Process::Process(bool, char const*, Process*, char**)+0x120>
c0018c5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c5e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018c64:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018c6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c6e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018c74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c78:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018c7e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018c84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c88:	05 0c 01 00 00       	add    eax,0x10c
c0018c8d:	83 ec 08             	sub    esp,0x8
c0018c90:	52                   	push   edx
c0018c91:	50                   	push   eax
c0018c92:	e8 b9 7a fe ff       	call   c0000750 <strcpy>
c0018c97:	83 c4 10             	add    esp,0x10
c0018c9a:	eb 64                	jmp    c0018d00 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0018c9c:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0018ca4:	83 ec 0c             	sub    esp,0xc
c0018ca7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018cab:	e8 c3 10 ff ff       	call   c0009d73 <malloc>
c0018cb0:	83 c4 10             	add    esp,0x10
c0018cb3:	89 c3                	mov    ebx,eax
c0018cb5:	83 ec 08             	sub    esp,0x8
c0018cb8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018cbc:	53                   	push   ebx
c0018cbd:	e8 de 26 ff ff       	call   c000b3a0 <VgaText::VgaText(char const*)>
c0018cc2:	83 c4 10             	add    esp,0x10
c0018cc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018cc9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0018ccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018cd3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018cd9:	83 ec 0c             	sub    esp,0xc
c0018cdc:	50                   	push   eax
c0018cdd:	e8 7d 1e ff ff       	call   c000ab5f <addToTerminalCycle(VgaText*)>
c0018ce2:	83 c4 10             	add    esp,0x10
c0018ce5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018ce9:	05 0c 01 00 00       	add    eax,0x10c
c0018cee:	83 ec 08             	sub    esp,0x8
c0018cf1:	68 c8 6d 02 c0       	push   0xc0026dc8
c0018cf6:	50                   	push   eax
c0018cf7:	e8 54 7a fe ff       	call   c0000750 <strcpy>
c0018cfc:	83 c4 10             	add    esp,0x10
c0018cff:	90                   	nop
c0018d00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018d04:	83 c0 0c             	add    eax,0xc
c0018d07:	83 ec 08             	sub    esp,0x8
c0018d0a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018d0e:	50                   	push   eax
c0018d0f:	e8 3c 7a fe ff       	call   c0000750 <strcpy>
c0018d14:	83 c4 10             	add    esp,0x10
c0018d17:	83 ec 08             	sub    esp,0x8
c0018d1a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018d1e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018d22:	e8 09 fc ff ff       	call   c0018930 <Process::addArgs(char**)>
c0018d27:	83 c4 10             	add    esp,0x10
c0018d2a:	90                   	nop
c0018d2b:	83 c4 24             	add    esp,0x24
c0018d2e:	5b                   	pop    ebx
c0018d2f:	5e                   	pop    esi
c0018d30:	c3                   	ret    
c0018d31:	8d 76 00             	lea    esi,[esi+0x0]

c0018d34 <taskStartupFunction>:
c0018d34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018d39:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0018d3c:	c3                   	ret    
c0018d3d:	90                   	nop
c0018d3e:	66 90                	xchg   ax,ax

c0018d40 <Semaphore::Semaphore(int)>:
c0018d40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018d48:	89 10                	mov    DWORD PTR [eax],edx
c0018d4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d4e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018d55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018d60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d64:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018d6b:	90                   	nop
c0018d6c:	c3                   	ret    
c0018d6d:	90                   	nop
c0018d6e:	66 90                	xchg   ax,ax

c0018d70 <Mutex::Mutex()>:
c0018d70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d74:	6a 01                	push   0x1
c0018d76:	50                   	push   eax
c0018d77:	e8 c4 ff ff ff       	call   c0018d40 <Semaphore::Semaphore(int)>
c0018d7c:	83 c4 08             	add    esp,0x8
c0018d7f:	90                   	nop
c0018d80:	c3                   	ret    
c0018d81:	90                   	nop
c0018d82:	66 90                	xchg   ax,ax

c0018d84 <Process::createThread(void (*)(void*), void*, int)>:
c0018d84:	57                   	push   edi
c0018d85:	31 c9                	xor    ecx,ecx
c0018d87:	56                   	push   esi
c0018d88:	53                   	push   ebx
c0018d89:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018d8d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0018d94:	89 f2                	mov    edx,esi
c0018d96:	66 90                	xchg   ax,ax
c0018d98:	0f b7 c2             	movzx  eax,dx
c0018d9b:	83 e2 01             	and    edx,0x1
c0018d9e:	74 14                	je     c0018db4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0018da0:	d1 f8                	sar    eax,1
c0018da2:	41                   	inc    ecx
c0018da3:	89 c2                	mov    edx,eax
c0018da5:	83 f9 10             	cmp    ecx,0x10
c0018da8:	75 ee                	jne    c0018d98 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0018daa:	31 db                	xor    ebx,ebx
c0018dac:	89 d8                	mov    eax,ebx
c0018dae:	5b                   	pop    ebx
c0018daf:	5e                   	pop    esi
c0018db0:	5f                   	pop    edi
c0018db1:	c3                   	ret    
c0018db2:	66 90                	xchg   ax,ax
c0018db4:	b8 01 00 00 00       	mov    eax,0x1
c0018db9:	d3 e0                	shl    eax,cl
c0018dbb:	09 c6                	or     esi,eax
c0018dbd:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018dc0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0018dc7:	01 c0                	add    eax,eax
c0018dc9:	01 c8                	add    eax,ecx
c0018dcb:	8d 04 80             	lea    eax,[eax+eax*4]
c0018dce:	01 d8                	add    eax,ebx
c0018dd0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0018dd7:	75 0b                	jne    c0018de4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0018dd9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0018de3:	90                   	nop
c0018de4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018dea:	83 ec 08             	sub    esp,0x8
c0018ded:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018df0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018df3:	01 c0                	add    eax,eax
c0018df5:	01 c8                	add    eax,ecx
c0018df7:	8d 3c 80             	lea    edi,[eax+eax*4]
c0018dfa:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0018dfd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018e03:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018e09:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e0d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0018e13:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018e19:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018e20:	89 ca                	mov    edx,ecx
c0018e22:	f7 da                	neg    edx
c0018e24:	c1 e2 15             	shl    edx,0x15
c0018e27:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018e2d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018e33:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018e37:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018e41:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0018e47:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e4b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018e51:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018e5b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018e65:	53                   	push   ebx
c0018e66:	68 c4 a1 02 c0       	push   0xc002a1c4
c0018e6b:	e8 cc a8 00 00       	call   c002373c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e70:	83 c4 10             	add    esp,0x10
c0018e73:	89 d8                	mov    eax,ebx
c0018e75:	5b                   	pop    ebx
c0018e76:	5e                   	pop    esi
c0018e77:	5f                   	pop    edi
c0018e78:	c3                   	ret    
c0018e79:	90                   	nop
c0018e7a:	66 90                	xchg   ax,ax

c0018e7c <Process::createUserThread()>:
c0018e7c:	83 ec 0c             	sub    esp,0xc
c0018e7f:	68 80 00 00 00       	push   0x80
c0018e84:	6a 00                	push   0x0
c0018e86:	68 24 88 01 c0       	push   0xc0018824
c0018e8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e8f:	e8 f0 fe ff ff       	call   c0018d84 <Process::createThread(void (*)(void*), void*, int)>
c0018e94:	83 c4 1c             	add    esp,0x1c
c0018e97:	c3                   	ret    

c0018e98 <setupMultitasking(void (*)())>:
c0018e98:	56                   	push   esi
c0018e99:	53                   	push   ebx
c0018e9a:	51                   	push   ecx
c0018e9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018e9f:	eb 13                	jmp    c0018eb4 <setupMultitasking(void (*)())+0x1c>
c0018ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ea4:	83 ec 0c             	sub    esp,0xc
c0018ea7:	68 c4 a1 02 c0       	push   0xc002a1c4
c0018eac:	e8 d3 a7 00 00       	call   c0023684 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018eb1:	83 c4 10             	add    esp,0x10
c0018eb4:	83 ec 0c             	sub    esp,0xc
c0018eb7:	68 c4 a1 02 c0       	push   0xc002a1c4
c0018ebc:	e8 9f a7 00 00       	call   c0023660 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018ec1:	83 c4 10             	add    esp,0x10
c0018ec4:	84 c0                	test   al,al
c0018ec6:	74 dc                	je     c0018ea4 <setupMultitasking(void (*)())+0xc>
c0018ec8:	83 ec 0c             	sub    esp,0xc
c0018ecb:	68 1f 07 00 00       	push   0x71f
c0018ed0:	e8 9e 0e ff ff       	call   c0009d73 <malloc>
c0018ed5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018edc:	89 c3                	mov    ebx,eax
c0018ede:	6a 00                	push   0x0
c0018ee0:	68 cc 6d 02 c0       	push   0xc0026dcc
c0018ee5:	6a 01                	push   0x1
c0018ee7:	50                   	push   eax
c0018ee8:	e8 8f fc ff ff       	call   c0018b7c <Process::Process(bool, char const*, Process*, char**)>
c0018eed:	83 c4 14             	add    esp,0x14
c0018ef0:	89 1d d0 a1 02 c0    	mov    DWORD PTR ds:0xc002a1d0,ebx
c0018ef6:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0018efc:	e8 6c 1f ff ff       	call   c000ae6d <setActiveTerminal(VgaText*)>
c0018f01:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018f09:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0018f13:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018f19:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018f1c:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0018f26:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018f2c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018f32:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018f3c:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0018f46:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018f50:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018f56:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018f60:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018f66:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018f70:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018f76:	58                   	pop    eax
c0018f77:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018f7d:	5a                   	pop    edx
c0018f7e:	68 c8 6d 02 c0       	push   0xc0026dc8
c0018f83:	50                   	push   eax
c0018f84:	e8 c7 77 fe ff       	call   c0000750 <strcpy>
c0018f89:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0018f90:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018f94:	83 c4 14             	add    esp,0x14
c0018f97:	5b                   	pop    ebx
c0018f98:	5e                   	pop    esi
c0018f99:	e9 fb 72 fe ff       	jmp    c0000299 <switchToThreadASMFirstTime>
c0018f9e:	66 90                	xchg   ax,ax

c0018fa0 <schedule()>:
c0018fa0:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c0018fa5:	85 c0                	test   eax,eax
c0018fa7:	74 0b                	je     c0018fb4 <schedule()+0x14>
c0018fa9:	c7 05 a0 a1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a1a0,0x1
c0018fb3:	c3                   	ret    
c0018fb4:	53                   	push   ebx
c0018fb5:	83 ec 14             	sub    esp,0x14
c0018fb8:	68 c4 a1 02 c0       	push   0xc002a1c4
c0018fbd:	e8 9e a6 00 00       	call   c0023660 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018fc2:	83 c4 10             	add    esp,0x10
c0018fc5:	84 c0                	test   al,al
c0018fc7:	75 3b                	jne    c0019004 <schedule()+0x64>
c0018fc9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018fce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018fd1:	4a                   	dec    edx
c0018fd2:	74 38                	je     c001900c <schedule()+0x6c>
c0018fd4:	83 ec 0c             	sub    esp,0xc
c0018fd7:	68 c4 a1 02 c0       	push   0xc002a1c4
c0018fdc:	e8 9b a6 00 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018fe1:	c7 04 24 c4 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1c4
c0018fe8:	89 c3                	mov    ebx,eax
c0018fea:	e8 95 a6 00 00       	call   c0023684 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018fef:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018ff6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018ff9:	e8 7e f8 ff ff       	call   c001887c <switchToThread(ThreadControlBlock*)>
c0018ffe:	83 c4 10             	add    esp,0x10
c0019001:	8d 76 00             	lea    esi,[esi+0x0]
c0019004:	83 c4 08             	add    esp,0x8
c0019007:	5b                   	pop    ebx
c0019008:	c3                   	ret    
c0019009:	8d 76 00             	lea    esi,[esi+0x0]
c001900c:	83 ec 08             	sub    esp,0x8
c001900f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0019016:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001901c:	68 c4 a1 02 c0       	push   0xc002a1c4
c0019021:	e8 16 a7 00 00       	call   c002373c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019026:	83 c4 10             	add    esp,0x10
c0019029:	eb a9                	jmp    c0018fd4 <schedule()+0x34>
c001902b:	90                   	nop

c001902c <Semaphore::tryAcquire()>:
c001902c:	53                   	push   ebx
c001902d:	83 ec 08             	sub    esp,0x8
c0019030:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019034:	fa                   	cli    
c0019035:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c001903a:	8d 50 01             	lea    edx,[eax+0x1]
c001903d:	89 15 a8 a1 02 c0    	mov    DWORD PTR ds:0xc002a1a8,edx
c0019043:	8b 15 a4 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a1a4
c0019049:	8d 5a 01             	lea    ebx,[edx+0x1]
c001904c:	89 1d a4 a1 02 c0    	mov    DWORD PTR ds:0xc002a1a4,ebx
c0019052:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0019055:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0019057:	7c 33                	jl     c001908c <Semaphore::tryAcquire()+0x60>
c0019059:	89 15 a4 a1 02 c0    	mov    DWORD PTR ds:0xc002a1a4,edx
c001905f:	85 d2                	test   edx,edx
c0019061:	75 0d                	jne    c0019070 <Semaphore::tryAcquire()+0x44>
c0019063:	8b 15 a0 a1 02 c0    	mov    edx,DWORD PTR ds:0xc002a1a0
c0019069:	85 d2                	test   edx,edx
c001906b:	75 6b                	jne    c00190d8 <Semaphore::tryAcquire()+0xac>
c001906d:	8d 76 00             	lea    esi,[esi+0x0]
c0019070:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0019075:	85 c0                	test   eax,eax
c0019077:	74 0b                	je     c0019084 <Semaphore::tryAcquire()+0x58>
c0019079:	8d 76 00             	lea    esi,[esi+0x0]
c001907c:	31 c0                	xor    eax,eax
c001907e:	83 c4 08             	add    esp,0x8
c0019081:	5b                   	pop    ebx
c0019082:	c3                   	ret    
c0019083:	90                   	nop
c0019084:	fb                   	sti    
c0019085:	83 c4 08             	add    esp,0x8
c0019088:	5b                   	pop    ebx
c0019089:	c3                   	ret    
c001908a:	66 90                	xchg   ax,ax
c001908c:	43                   	inc    ebx
c001908d:	89 15 a4 a1 02 c0    	mov    DWORD PTR ds:0xc002a1a4,edx
c0019093:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0019096:	85 d2                	test   edx,edx
c0019098:	75 22                	jne    c00190bc <Semaphore::tryAcquire()+0x90>
c001909a:	8b 0d a0 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a1a0
c00190a0:	85 c9                	test   ecx,ecx
c00190a2:	74 18                	je     c00190bc <Semaphore::tryAcquire()+0x90>
c00190a4:	c7 05 a0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1a0,0x0
c00190ae:	e8 ed fe ff ff       	call   c0018fa0 <schedule()>
c00190b3:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c00190b8:	48                   	dec    eax
c00190b9:	8d 76 00             	lea    esi,[esi+0x0]
c00190bc:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c00190c1:	85 c0                	test   eax,eax
c00190c3:	75 0b                	jne    c00190d0 <Semaphore::tryAcquire()+0xa4>
c00190c5:	fb                   	sti    
c00190c6:	b0 01                	mov    al,0x1
c00190c8:	83 c4 08             	add    esp,0x8
c00190cb:	5b                   	pop    ebx
c00190cc:	c3                   	ret    
c00190cd:	8d 76 00             	lea    esi,[esi+0x0]
c00190d0:	b0 01                	mov    al,0x1
c00190d2:	83 c4 08             	add    esp,0x8
c00190d5:	5b                   	pop    ebx
c00190d6:	c3                   	ret    
c00190d7:	90                   	nop
c00190d8:	c7 05 a0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1a0,0x0
c00190e2:	e8 b9 fe ff ff       	call   c0018fa0 <schedule()>
c00190e7:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c00190ec:	48                   	dec    eax
c00190ed:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c00190f2:	85 c0                	test   eax,eax
c00190f4:	75 86                	jne    c001907c <Semaphore::tryAcquire()+0x50>
c00190f6:	eb 8c                	jmp    c0019084 <Semaphore::tryAcquire()+0x58>

c00190f8 <Semaphore::assertLocked(char const*)>:
c00190f8:	83 ec 0c             	sub    esp,0xc
c00190fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00190ff:	fa                   	cli    
c0019100:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c0019106:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c001910b:	8d 48 01             	lea    ecx,[eax+0x1]
c001910e:	89 0d a4 a1 02 c0    	mov    DWORD PTR ds:0xc002a1a4,ecx
c0019114:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019116:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0019119:	7c 29                	jl     c0019144 <Semaphore::assertLocked(char const*)+0x4c>
c001911b:	90                   	nop
c001911c:	a3 a4 a1 02 c0       	mov    ds:0xc002a1a4,eax
c0019121:	85 c0                	test   eax,eax
c0019123:	75 0b                	jne    c0019130 <Semaphore::assertLocked(char const*)+0x38>
c0019125:	a1 a0 a1 02 c0       	mov    eax,ds:0xc002a1a0
c001912a:	85 c0                	test   eax,eax
c001912c:	75 2e                	jne    c001915c <Semaphore::assertLocked(char const*)+0x64>
c001912e:	66 90                	xchg   ax,ax
c0019130:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0019135:	48                   	dec    eax
c0019136:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c001913b:	75 03                	jne    c0019140 <Semaphore::assertLocked(char const*)+0x48>
c001913d:	fb                   	sti    
c001913e:	66 90                	xchg   ax,ax
c0019140:	83 c4 0c             	add    esp,0xc
c0019143:	c3                   	ret    
c0019144:	83 ec 0c             	sub    esp,0xc
c0019147:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001914b:	e8 e1 bf ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0019150:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c0019155:	83 c4 10             	add    esp,0x10
c0019158:	48                   	dec    eax
c0019159:	eb c1                	jmp    c001911c <Semaphore::assertLocked(char const*)+0x24>
c001915b:	90                   	nop
c001915c:	c7 05 a0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1a0,0x0
c0019166:	e8 35 fe ff ff       	call   c0018fa0 <schedule()>
c001916b:	eb c3                	jmp    c0019130 <Semaphore::assertLocked(char const*)+0x38>
c001916d:	8d 76 00             	lea    esi,[esi+0x0]

c0019170 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0019170:	83 ec 0c             	sub    esp,0xc
c0019173:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019178:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001917c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001917f:	e8 1c fe ff ff       	call   c0018fa0 <schedule()>
c0019184:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0019189:	48                   	dec    eax
c001918a:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c001918f:	75 03                	jne    c0019194 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0019191:	fb                   	sti    
c0019192:	66 90                	xchg   ax,ax
c0019194:	83 c4 0c             	add    esp,0xc
c0019197:	c3                   	ret    

c0019198 <blockTask(TaskState)>:
c0019198:	83 ec 0c             	sub    esp,0xc
c001919b:	fa                   	cli    
c001919c:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c00191a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00191a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191ab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00191ae:	e8 ed fd ff ff       	call   c0018fa0 <schedule()>
c00191b3:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c00191b8:	48                   	dec    eax
c00191b9:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c00191be:	75 04                	jne    c00191c4 <blockTask(TaskState)+0x2c>
c00191c0:	fb                   	sti    
c00191c1:	8d 76 00             	lea    esi,[esi+0x0]
c00191c4:	83 c4 0c             	add    esp,0xc
c00191c7:	c3                   	ret    

c00191c8 <waitTask(int, int*, int)>:
c00191c8:	83 ec 18             	sub    esp,0x18
c00191cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00191d4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00191d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00191db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191e0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00191e3:	6a 07                	push   0x7
c00191e5:	e8 ae ff ff ff       	call   c0019198 <blockTask(TaskState)>
c00191ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191ef:	83 c4 10             	add    esp,0x10
c00191f2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00191f5:	85 d2                	test   edx,edx
c00191f7:	74 0b                	je     c0019204 <waitTask(int, int*, int)+0x3c>
c00191f9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00191fc:	89 02                	mov    DWORD PTR [edx],eax
c00191fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019203:	90                   	nop
c0019204:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0019207:	83 c4 0c             	add    esp,0xc
c001920a:	c3                   	ret    
c001920b:	90                   	nop

c001920c <milliTenthSleepUntil(unsigned int)>:
c001920c:	83 ec 0c             	sub    esp,0xc
c001920f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019213:	39 05 ac 92 02 c0    	cmp    DWORD PTR ds:0xc00292ac,eax
c0019219:	76 05                	jbe    c0019220 <milliTenthSleepUntil(unsigned int)+0x14>
c001921b:	90                   	nop
c001921c:	83 c4 0c             	add    esp,0xc
c001921f:	c3                   	ret    
c0019220:	fa                   	cli    
c0019221:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c0019227:	83 ec 08             	sub    esp,0x8
c001922a:	ff 05 a4 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a4
c0019230:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019236:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0019239:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001923f:	68 b8 a1 02 c0       	push   0xc002a1b8
c0019244:	e8 f3 a4 00 00       	call   c002373c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019249:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0019250:	e8 43 ff ff ff       	call   c0019198 <blockTask(TaskState)>
c0019255:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c001925a:	83 c4 10             	add    esp,0x10
c001925d:	48                   	dec    eax
c001925e:	a3 a4 a1 02 c0       	mov    ds:0xc002a1a4,eax
c0019263:	85 c0                	test   eax,eax
c0019265:	75 09                	jne    c0019270 <milliTenthSleepUntil(unsigned int)+0x64>
c0019267:	a1 a0 a1 02 c0       	mov    eax,ds:0xc002a1a0
c001926c:	85 c0                	test   eax,eax
c001926e:	75 14                	jne    c0019284 <milliTenthSleepUntil(unsigned int)+0x78>
c0019270:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0019275:	48                   	dec    eax
c0019276:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c001927b:	75 9f                	jne    c001921c <milliTenthSleepUntil(unsigned int)+0x10>
c001927d:	fb                   	sti    
c001927e:	83 c4 0c             	add    esp,0xc
c0019281:	c3                   	ret    
c0019282:	66 90                	xchg   ax,ax
c0019284:	c7 05 a0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1a0,0x0
c001928e:	e8 0d fd ff ff       	call   c0018fa0 <schedule()>
c0019293:	eb db                	jmp    c0019270 <milliTenthSleepUntil(unsigned int)+0x64>
c0019295:	8d 76 00             	lea    esi,[esi+0x0]

c0019298 <milliTenthSleep(unsigned int)>:
c0019298:	a1 ac 92 02 c0       	mov    eax,ds:0xc00292ac
c001929d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00192a1:	e9 66 ff ff ff       	jmp    c001920c <milliTenthSleepUntil(unsigned int)>
c00192a6:	66 90                	xchg   ax,ax

c00192a8 <sleep(unsigned int)>:
c00192a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192ac:	8d 04 80             	lea    eax,[eax+eax*4]
c00192af:	8d 04 80             	lea    eax,[eax+eax*4]
c00192b2:	8d 04 80             	lea    eax,[eax+eax*4]
c00192b5:	8d 04 80             	lea    eax,[eax+eax*4]
c00192b8:	c1 e0 04             	shl    eax,0x4
c00192bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192bf:	eb d7                	jmp    c0019298 <milliTenthSleep(unsigned int)>
c00192c1:	90                   	nop
c00192c2:	66 90                	xchg   ax,ax

c00192c4 <Semaphore::acquire()>:
c00192c4:	83 ec 0c             	sub    esp,0xc
c00192c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00192cb:	fa                   	cli    
c00192cc:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c00192d1:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c00192d7:	8d 48 01             	lea    ecx,[eax+0x1]
c00192da:	89 0d a4 a1 02 c0    	mov    DWORD PTR ds:0xc002a1a4,ecx
c00192e0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00192e3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00192e5:	7d 2d                	jge    c0019314 <Semaphore::acquire()+0x50>
c00192e7:	41                   	inc    ecx
c00192e8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00192eb:	90                   	nop
c00192ec:	a3 a4 a1 02 c0       	mov    ds:0xc002a1a4,eax
c00192f1:	85 c0                	test   eax,eax
c00192f3:	75 0b                	jne    c0019300 <Semaphore::acquire()+0x3c>
c00192f5:	a1 a0 a1 02 c0       	mov    eax,ds:0xc002a1a0
c00192fa:	85 c0                	test   eax,eax
c00192fc:	75 62                	jne    c0019360 <Semaphore::acquire()+0x9c>
c00192fe:	66 90                	xchg   ax,ax
c0019300:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0019305:	48                   	dec    eax
c0019306:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c001930b:	75 03                	jne    c0019310 <Semaphore::acquire()+0x4c>
c001930d:	fb                   	sti    
c001930e:	66 90                	xchg   ax,ax
c0019310:	83 c4 0c             	add    esp,0xc
c0019313:	c3                   	ret    
c0019314:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019319:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0019320:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0019323:	85 c9                	test   ecx,ecx
c0019325:	74 4d                	je     c0019374 <Semaphore::acquire()+0xb0>
c0019327:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001932a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019330:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0019333:	90                   	nop
c0019334:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019339:	83 ec 0c             	sub    esp,0xc
c001933c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001933f:	68 48 6e 02 c0       	push   0xc0026e48
c0019344:	e8 16 3d ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0019349:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0019350:	e8 43 fe ff ff       	call   c0019198 <blockTask(TaskState)>
c0019355:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c001935a:	83 c4 10             	add    esp,0x10
c001935d:	48                   	dec    eax
c001935e:	eb 8c                	jmp    c00192ec <Semaphore::acquire()+0x28>
c0019360:	c7 05 a0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1a0,0x0
c001936a:	e8 31 fc ff ff       	call   c0018fa0 <schedule()>
c001936f:	eb 8f                	jmp    c0019300 <Semaphore::acquire()+0x3c>
c0019371:	8d 76 00             	lea    esi,[esi+0x0]
c0019374:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019379:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001937c:	eb b6                	jmp    c0019334 <Semaphore::acquire()+0x70>
c001937e:	66 90                	xchg   ax,ax

c0019380 <taskReturned>:
c0019380:	83 ec 18             	sub    esp,0x18
c0019383:	68 68 6e 02 c0       	push   0xc0026e68
c0019388:	e8 a4 bd ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001938d:	83 c4 10             	add    esp,0x10
c0019390:	83 ec 0c             	sub    esp,0xc
c0019393:	6a 02                	push   0x2
c0019395:	e8 fe fd ff ff       	call   c0019198 <blockTask(TaskState)>
c001939a:	fa                   	cli    
c001939b:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c00193a1:	e8 fa fb ff ff       	call   c0018fa0 <schedule()>
c00193a6:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c00193ab:	83 c4 10             	add    esp,0x10
c00193ae:	48                   	dec    eax
c00193af:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c00193b4:	85 c0                	test   eax,eax
c00193b6:	75 d8                	jne    c0019390 <taskReturned+0x10>
c00193b8:	fb                   	sti    
c00193b9:	eb d5                	jmp    c0019390 <taskReturned+0x10>
c00193bb:	90                   	nop

c00193bc <Thr::processFromPID(int)>:
c00193bc:	57                   	push   edi
c00193bd:	56                   	push   esi
c00193be:	53                   	push   ebx
c00193bf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00193c3:	fa                   	cli    
c00193c4:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c00193ca:	83 ec 0c             	sub    esp,0xc
c00193cd:	68 c4 a1 02 c0       	push   0xc002a1c4
c00193d2:	e8 a5 a2 00 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00193d7:	83 c4 10             	add    esp,0x10
c00193da:	89 c7                	mov    edi,eax
c00193dc:	eb 16                	jmp    c00193f4 <Thr::processFromPID(int)+0x38>
c00193de:	66 90                	xchg   ax,ax
c00193e0:	83 ec 0c             	sub    esp,0xc
c00193e3:	68 c4 a1 02 c0       	push   0xc002a1c4
c00193e8:	e8 8f a2 00 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00193ed:	83 c4 10             	add    esp,0x10
c00193f0:	39 f8                	cmp    eax,edi
c00193f2:	74 4c                	je     c0019440 <Thr::processFromPID(int)+0x84>
c00193f4:	83 ec 0c             	sub    esp,0xc
c00193f7:	68 c4 a1 02 c0       	push   0xc002a1c4
c00193fc:	e8 7b a2 00 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019401:	c7 04 24 c4 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1c4
c0019408:	89 c3                	mov    ebx,eax
c001940a:	e8 75 a2 00 00       	call   c0023684 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001940f:	58                   	pop    eax
c0019410:	5a                   	pop    edx
c0019411:	53                   	push   ebx
c0019412:	68 c4 a1 02 c0       	push   0xc002a1c4
c0019417:	e8 20 a3 00 00       	call   c002373c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001941c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001941f:	83 c4 10             	add    esp,0x10
c0019422:	39 30                	cmp    DWORD PTR [eax],esi
c0019424:	75 ba                	jne    c00193e0 <Thr::processFromPID(int)+0x24>
c0019426:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c001942b:	48                   	dec    eax
c001942c:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0019431:	74 09                	je     c001943c <Thr::processFromPID(int)+0x80>
c0019433:	90                   	nop
c0019434:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019437:	5b                   	pop    ebx
c0019438:	5e                   	pop    esi
c0019439:	5f                   	pop    edi
c001943a:	c3                   	ret    
c001943b:	90                   	nop
c001943c:	fb                   	sti    
c001943d:	eb f5                	jmp    c0019434 <Thr::processFromPID(int)+0x78>
c001943f:	90                   	nop
c0019440:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0019445:	48                   	dec    eax
c0019446:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c001944b:	75 07                	jne    c0019454 <Thr::processFromPID(int)+0x98>
c001944d:	fb                   	sti    
c001944e:	5b                   	pop    ebx
c001944f:	5e                   	pop    esi
c0019450:	5f                   	pop    edi
c0019451:	c3                   	ret    
c0019452:	66 90                	xchg   ax,ax
c0019454:	5b                   	pop    ebx
c0019455:	31 c0                	xor    eax,eax
c0019457:	5e                   	pop    esi
c0019458:	5f                   	pop    edi
c0019459:	c3                   	ret    
c001945a:	66 90                	xchg   ax,ax

c001945c <unblockTask(ThreadControlBlock*)>:
c001945c:	53                   	push   ebx
c001945d:	83 ec 08             	sub    esp,0x8
c0019460:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019464:	fa                   	cli    
c0019465:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c001946b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001946e:	85 c0                	test   eax,eax
c0019470:	74 66                	je     c00194d8 <unblockTask(ThreadControlBlock*)+0x7c>
c0019472:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019475:	48                   	dec    eax
c0019476:	74 38                	je     c00194b0 <unblockTask(ThreadControlBlock*)+0x54>
c0019478:	83 ec 0c             	sub    esp,0xc
c001947b:	68 c4 a1 02 c0       	push   0xc002a1c4
c0019480:	e8 f7 a1 00 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019485:	83 c4 10             	add    esp,0x10
c0019488:	85 c0                	test   eax,eax
c001948a:	75 1c                	jne    c00194a8 <unblockTask(ThreadControlBlock*)+0x4c>
c001948c:	eb 5e                	jmp    c00194ec <unblockTask(ThreadControlBlock*)+0x90>
c001948e:	66 90                	xchg   ax,ax
c0019490:	83 ec 08             	sub    esp,0x8
c0019493:	50                   	push   eax
c0019494:	68 c4 a1 02 c0       	push   0xc002a1c4
c0019499:	e8 8e a5 00 00       	call   c0023a2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001949e:	83 c4 10             	add    esp,0x10
c00194a1:	85 c0                	test   eax,eax
c00194a3:	74 47                	je     c00194ec <unblockTask(ThreadControlBlock*)+0x90>
c00194a5:	8d 76 00             	lea    esi,[esi+0x0]
c00194a8:	39 c3                	cmp    ebx,eax
c00194aa:	75 e4                	jne    c0019490 <unblockTask(ThreadControlBlock*)+0x34>
c00194ac:	eb 12                	jmp    c00194c0 <unblockTask(ThreadControlBlock*)+0x64>
c00194ae:	66 90                	xchg   ax,ax
c00194b0:	83 ec 0c             	sub    esp,0xc
c00194b3:	68 ea 6d 02 c0       	push   0xc0026dea
c00194b8:	e8 a2 3b ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00194bd:	83 c4 10             	add    esp,0x10
c00194c0:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c00194c5:	48                   	dec    eax
c00194c6:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c00194cb:	75 03                	jne    c00194d0 <unblockTask(ThreadControlBlock*)+0x74>
c00194cd:	fb                   	sti    
c00194ce:	66 90                	xchg   ax,ax
c00194d0:	83 c4 08             	add    esp,0x8
c00194d3:	5b                   	pop    ebx
c00194d4:	c3                   	ret    
c00194d5:	8d 76 00             	lea    esi,[esi+0x0]
c00194d8:	83 ec 0c             	sub    esp,0xc
c00194db:	68 d3 6d 02 c0       	push   0xc0026dd3
c00194e0:	e8 7a 3b ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00194e5:	83 c4 10             	add    esp,0x10
c00194e8:	eb d6                	jmp    c00194c0 <unblockTask(ThreadControlBlock*)+0x64>
c00194ea:	66 90                	xchg   ax,ax
c00194ec:	83 ec 08             	sub    esp,0x8
c00194ef:	53                   	push   ebx
c00194f0:	68 c4 a1 02 c0       	push   0xc002a1c4
c00194f5:	e8 42 a2 00 00       	call   c002373c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00194fa:	83 c4 10             	add    esp,0x10
c00194fd:	eb c1                	jmp    c00194c0 <unblockTask(ThreadControlBlock*)+0x64>
c00194ff:	90                   	nop

c0019500 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0019500:	55                   	push   ebp
c0019501:	57                   	push   edi
c0019502:	56                   	push   esi
c0019503:	53                   	push   ebx
c0019504:	83 ec 1c             	sub    esp,0x1c
c0019507:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001950b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001950e:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0019514:	85 ff                	test   edi,edi
c0019516:	7e 24                	jle    c001953c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0019518:	31 f6                	xor    esi,esi
c001951a:	66 90                	xchg   ax,ax
c001951c:	83 ec 0c             	sub    esp,0xc
c001951f:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0019526:	46                   	inc    esi
c0019527:	e8 57 08 ff ff       	call   c0009d83 <free>
c001952c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001952f:	83 c4 10             	add    esp,0x10
c0019532:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0019538:	7f e2                	jg     c001951c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c001953a:	66 90                	xchg   ax,ax
c001953c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0019546:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001954b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001954e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0019551:	d3 c0                	rol    eax,cl
c0019553:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001955a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001955d:	89 f7                	mov    edi,esi
c001955f:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0019567:	0f 85 73 01 00 00    	jne    c00196e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001956d:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0019573:	85 ed                	test   ebp,ebp
c0019575:	74 1d                	je     c0019594 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0019577:	83 ec 0c             	sub    esp,0xc
c001957a:	55                   	push   ebp
c001957b:	e8 56 b9 ff ff       	call   c0014ed6 <EnvVarContainer::~EnvVarContainer()>
c0019580:	59                   	pop    ecx
c0019581:	5e                   	pop    esi
c0019582:	6a 0c                	push   0xc
c0019584:	55                   	push   ebp
c0019585:	e8 f4 39 ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c001958a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001958d:	83 c4 10             	add    esp,0x10
c0019590:	89 f7                	mov    edi,esi
c0019592:	66 90                	xchg   ax,ax
c0019594:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001959a:	85 c0                	test   eax,eax
c001959c:	0f 84 b2 00 00 00    	je     c0019654 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00195a2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00195a5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00195a9:	31 c9                	xor    ecx,ecx
c00195ab:	eb 17                	jmp    c00195c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c00195ad:	8d 76 00             	lea    esi,[esi+0x0]
c00195b0:	41                   	inc    ecx
c00195b1:	83 f9 10             	cmp    ecx,0x10
c00195b4:	0f 84 9a 00 00 00    	je     c0019654 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c00195ba:	66 90                	xchg   ax,ax
c00195bc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00195c2:	66 90                	xchg   ax,ax
c00195c4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00195cb:	d3 fa                	sar    edx,cl
c00195cd:	83 e2 01             	and    edx,0x1
c00195d0:	74 de                	je     c00195b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00195d2:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00195d5:	01 d2                	add    edx,edx
c00195d7:	01 ca                	add    edx,ecx
c00195d9:	8d 14 92             	lea    edx,[edx+edx*4]
c00195dc:	01 d0                	add    eax,edx
c00195de:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00195e4:	83 fd 07             	cmp    ebp,0x7
c00195e7:	75 c7                	jne    c00195b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00195e9:	05 40 02 00 00       	add    eax,0x240
c00195ee:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00195f1:	83 fd ff             	cmp    ebp,0xffffffff
c00195f4:	0f 8c ee 00 00 00    	jl     c00196e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00195fa:	0f 84 ac 01 00 00    	je     c00197ac <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0019600:	85 ed                	test   ebp,ebp
c0019602:	0f 84 90 01 00 00    	je     c0019798 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0019608:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001960a:	75 a4                	jne    c00195b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001960c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0019612:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019616:	01 d0                	add    eax,edx
c0019618:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001961c:	83 ec 0c             	sub    esp,0xc
c001961f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0019625:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019628:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001962e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0019635:	50                   	push   eax
c0019636:	e8 21 fe ff ff       	call   c001945c <unblockTask(ThreadControlBlock*)>
c001963b:	83 c4 10             	add    esp,0x10
c001963e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0019641:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019645:	89 f7                	mov    edi,esi
c0019647:	41                   	inc    ecx
c0019648:	83 f9 10             	cmp    ecx,0x10
c001964b:	0f 85 6b ff ff ff    	jne    c00195bc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0019651:	8d 76 00             	lea    esi,[esi+0x0]
c0019654:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001965a:	85 c0                	test   eax,eax
c001965c:	74 62                	je     c00196c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c001965e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0019664:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001966a:	74 54                	je     c00196c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c001966c:	83 ec 0c             	sub    esp,0xc
c001966f:	68 c4 a1 02 c0       	push   0xc002a1c4
c0019674:	e8 03 a0 00 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019679:	c7 04 24 c4 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1c4
c0019680:	89 c7                	mov    edi,eax
c0019682:	e8 d9 9f 00 00       	call   c0023660 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019687:	83 c4 10             	add    esp,0x10
c001968a:	84 c0                	test   al,al
c001968c:	0f 84 ce 00 00 00    	je     c0019760 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0019692:	66 90                	xchg   ax,ax
c0019694:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019697:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001969d:	85 d2                	test   edx,edx
c001969f:	74 0f                	je     c00196b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c00196a1:	83 ec 0c             	sub    esp,0xc
c00196a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00196a6:	52                   	push   edx
c00196a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00196aa:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00196ad:	83 c4 10             	add    esp,0x10
c00196b0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00196ba:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00196bd:	8d 76 00             	lea    esi,[esi+0x0]
c00196c0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00196c6:	85 db                	test   ebx,ebx
c00196c8:	74 16                	je     c00196e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c00196ca:	83 ec 0c             	sub    esp,0xc
c00196cd:	53                   	push   ebx
c00196ce:	e8 91 2b ff ff       	call   c000c264 <VAS::~VAS()>
c00196d3:	58                   	pop    eax
c00196d4:	5a                   	pop    edx
c00196d5:	6a 14                	push   0x14
c00196d7:	53                   	push   ebx
c00196d8:	e8 a1 38 ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c00196dd:	83 c4 10             	add    esp,0x10
c00196e0:	83 c4 1c             	add    esp,0x1c
c00196e3:	5b                   	pop    ebx
c00196e4:	5e                   	pop    esi
c00196e5:	5f                   	pop    edi
c00196e6:	5d                   	pop    ebp
c00196e7:	c3                   	ret    
c00196e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00196ec:	83 ec 0c             	sub    esp,0xc
c00196ef:	68 9c 6e 02 c0       	push   0xc0026e9c
c00196f4:	e8 38 ba ff ff       	call   c0015131 <Krnl::panic(char const*)>
c00196f9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00196fc:	83 c4 10             	add    esp,0x10
c00196ff:	89 f7                	mov    edi,esi
c0019701:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019705:	e9 a6 fe ff ff       	jmp    c00195b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001970a:	66 90                	xchg   ax,ax
c001970c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019712:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0019718:	75 1e                	jne    c0019738 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c001971a:	83 ec 0c             	sub    esp,0xc
c001971d:	68 04 6f 02 c0       	push   0xc0026f04
c0019722:	e8 38 39 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0019727:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001972e:	e8 65 fa ff ff       	call   c0019198 <blockTask(TaskState)>
c0019733:	83 c4 10             	add    esp,0x10
c0019736:	66 90                	xchg   ax,ax
c0019738:	83 ec 08             	sub    esp,0x8
c001973b:	56                   	push   esi
c001973c:	68 c4 a1 02 c0       	push   0xc002a1c4
c0019741:	e8 f6 9f 00 00       	call   c002373c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0019746:	c7 04 24 c4 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1c4
c001974d:	e8 2a 9f 00 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019752:	83 c4 10             	add    esp,0x10
c0019755:	39 f8                	cmp    eax,edi
c0019757:	0f 84 37 ff ff ff    	je     c0019694 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c001975d:	8d 76 00             	lea    esi,[esi+0x0]
c0019760:	83 ec 0c             	sub    esp,0xc
c0019763:	68 c4 a1 02 c0       	push   0xc002a1c4
c0019768:	e8 0f 9f 00 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001976d:	c7 04 24 c4 a1 02 c0 	mov    DWORD PTR [esp],0xc002a1c4
c0019774:	89 c6                	mov    esi,eax
c0019776:	e8 09 9f 00 00       	call   c0023684 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001977b:	83 c4 10             	add    esp,0x10
c001977e:	39 f3                	cmp    ebx,esi
c0019780:	74 b6                	je     c0019738 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0019782:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0019785:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019788:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001978e:	75 a8                	jne    c0019738 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0019790:	e9 77 ff ff ff       	jmp    c001970c <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0019795:	8d 76 00             	lea    esi,[esi+0x0]
c0019798:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001979c:	83 ec 0c             	sub    esp,0xc
c001979f:	68 d0 6e 02 c0       	push   0xc0026ed0
c00197a4:	e9 4b ff ff ff       	jmp    c00196f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c00197a9:	8d 76 00             	lea    esi,[esi+0x0]
c00197ac:	8b 36                	mov    esi,DWORD PTR [esi]
c00197ae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00197b2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00197b5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00197b8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00197be:	01 d7                	add    edi,edx
c00197c0:	89 f8                	mov    eax,edi
c00197c2:	e9 51 fe ff ff       	jmp    c0019618 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c00197c7:	90                   	nop

c00197c8 <cleanerTaskFunction(void*)>:
c00197c8:	53                   	push   ebx
c00197c9:	83 ec 08             	sub    esp,0x8
c00197cc:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c00197d1:	48                   	dec    eax
c00197d2:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c00197d7:	75 03                	jne    c00197dc <cleanerTaskFunction(void*)+0x14>
c00197d9:	fb                   	sti    
c00197da:	66 90                	xchg   ax,ax
c00197dc:	fa                   	cli    
c00197dd:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c00197e2:	80 3d 8c a1 02 c0 00 	cmp    BYTE PTR ds:0xc002a18c,0x0
c00197e9:	8d 50 01             	lea    edx,[eax+0x1]
c00197ec:	89 15 a8 a1 02 c0    	mov    DWORD PTR ds:0xc002a1a8,edx
c00197f2:	0f 84 ac 00 00 00    	je     c00198a4 <cleanerTaskFunction(void*)+0xdc>
c00197f8:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c00197fd:	85 c0                	test   eax,eax
c00197ff:	75 03                	jne    c0019804 <cleanerTaskFunction(void*)+0x3c>
c0019801:	fb                   	sti    
c0019802:	66 90                	xchg   ax,ax
c0019804:	c6 05 8c a1 02 c0 00 	mov    BYTE PTR ds:0xc002a18c,0x0
c001980b:	fa                   	cli    
c001980c:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c0019812:	ff 05 a4 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a4
c0019818:	fa                   	cli    
c0019819:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c001981f:	eb 2b                	jmp    c001984c <cleanerTaskFunction(void*)+0x84>
c0019821:	8d 76 00             	lea    esi,[esi+0x0]
c0019824:	83 ec 0c             	sub    esp,0xc
c0019827:	68 ac a1 02 c0       	push   0xc002a1ac
c001982c:	e8 4b 9e 00 00       	call   c002367c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019831:	c7 04 24 ac a1 02 c0 	mov    DWORD PTR [esp],0xc002a1ac
c0019838:	89 c3                	mov    ebx,eax
c001983a:	e8 45 9e 00 00       	call   c0023684 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001983f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019842:	e8 b9 fc ff ff       	call   c0019500 <cleanupTerminatedTask(ThreadControlBlock*)>
c0019847:	83 c4 10             	add    esp,0x10
c001984a:	66 90                	xchg   ax,ax
c001984c:	83 ec 0c             	sub    esp,0xc
c001984f:	68 ac a1 02 c0       	push   0xc002a1ac
c0019854:	e8 07 9e 00 00       	call   c0023660 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019859:	83 c4 10             	add    esp,0x10
c001985c:	84 c0                	test   al,al
c001985e:	74 c4                	je     c0019824 <cleanerTaskFunction(void*)+0x5c>
c0019860:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0019865:	48                   	dec    eax
c0019866:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c001986b:	75 03                	jne    c0019870 <cleanerTaskFunction(void*)+0xa8>
c001986d:	fb                   	sti    
c001986e:	66 90                	xchg   ax,ax
c0019870:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c0019875:	48                   	dec    eax
c0019876:	a3 a4 a1 02 c0       	mov    ds:0xc002a1a4,eax
c001987b:	0f 85 4b ff ff ff    	jne    c00197cc <cleanerTaskFunction(void*)+0x4>
c0019881:	a1 a0 a1 02 c0       	mov    eax,ds:0xc002a1a0
c0019886:	85 c0                	test   eax,eax
c0019888:	0f 84 3e ff ff ff    	je     c00197cc <cleanerTaskFunction(void*)+0x4>
c001988e:	c7 05 a0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1a0,0x0
c0019898:	e8 03 f7 ff ff       	call   c0018fa0 <schedule()>
c001989d:	e9 2a ff ff ff       	jmp    c00197cc <cleanerTaskFunction(void*)+0x4>
c00198a2:	66 90                	xchg   ax,ax
c00198a4:	83 ec 0c             	sub    esp,0xc
c00198a7:	6a 02                	push   0x2
c00198a9:	e8 c2 f8 ff ff       	call   c0019170 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00198ae:	83 c4 10             	add    esp,0x10
c00198b1:	e9 4e ff ff ff       	jmp    c0019804 <cleanerTaskFunction(void*)+0x3c>
c00198b6:	66 90                	xchg   ax,ax

c00198b8 <terminateTask(int)>:
c00198b8:	83 ec 14             	sub    esp,0x14
c00198bb:	fa                   	cli    
c00198bc:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c00198c2:	ff 05 a4 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a4
c00198c8:	fa                   	cli    
c00198c9:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c00198cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00198d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198d8:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00198db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198e0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00198e3:	50                   	push   eax
c00198e4:	68 ac a1 02 c0       	push   0xc002a1ac
c00198e9:	e8 4e 9e 00 00       	call   c002373c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00198ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198f3:	83 c4 10             	add    esp,0x10
c00198f6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00198fd:	a1 88 a1 02 c0       	mov    eax,ds:0xc002a188
c0019902:	85 c0                	test   eax,eax
c0019904:	74 5e                	je     c0019964 <terminateTask(int)+0xac>
c0019906:	83 ec 0c             	sub    esp,0xc
c0019909:	c6 05 8c a1 02 c0 01 	mov    BYTE PTR ds:0xc002a18c,0x1
c0019910:	50                   	push   eax
c0019911:	e8 46 fb ff ff       	call   c001945c <unblockTask(ThreadControlBlock*)>
c0019916:	83 c4 10             	add    esp,0x10
c0019919:	8d 76 00             	lea    esi,[esi+0x0]
c001991c:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0019921:	48                   	dec    eax
c0019922:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0019927:	75 03                	jne    c001992c <terminateTask(int)+0x74>
c0019929:	fb                   	sti    
c001992a:	66 90                	xchg   ax,ax
c001992c:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c0019931:	48                   	dec    eax
c0019932:	a3 a4 a1 02 c0       	mov    ds:0xc002a1a4,eax
c0019937:	75 0b                	jne    c0019944 <terminateTask(int)+0x8c>
c0019939:	83 3d a0 a1 02 c0 00 	cmp    DWORD PTR ds:0xc002a1a0,0x0
c0019940:	75 36                	jne    c0019978 <terminateTask(int)+0xc0>
c0019942:	66 90                	xchg   ax,ax
c0019944:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0019949:	48                   	dec    eax
c001994a:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c001994f:	75 03                	jne    c0019954 <terminateTask(int)+0x9c>
c0019951:	fb                   	sti    
c0019952:	66 90                	xchg   ax,ax
c0019954:	fa                   	cli    
c0019955:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c001995b:	90                   	nop
c001995c:	e8 3f f6 ff ff       	call   c0018fa0 <schedule()>
c0019961:	eb e1                	jmp    c0019944 <terminateTask(int)+0x8c>
c0019963:	90                   	nop
c0019964:	83 ec 0c             	sub    esp,0xc
c0019967:	68 01 6e 02 c0       	push   0xc0026e01
c001996c:	e8 ee 36 ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0019971:	83 c4 10             	add    esp,0x10
c0019974:	eb a6                	jmp    c001991c <terminateTask(int)+0x64>
c0019976:	66 90                	xchg   ax,ax
c0019978:	c7 05 a0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1a0,0x0
c0019982:	eb d8                	jmp    c001995c <terminateTask(int)+0xa4>

c0019984 <Thr::terminateFromIRQ(int)>:
c0019984:	83 ec 18             	sub    esp,0x18
c0019987:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001998b:	e8 28 ff ff ff       	call   c00198b8 <terminateTask(int)>

c0019990 <Semaphore::release()>:
c0019990:	83 ec 0c             	sub    esp,0xc
c0019993:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019997:	fa                   	cli    
c0019998:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c001999d:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c00199a3:	8d 48 01             	lea    ecx,[eax+0x1]
c00199a6:	89 0d a4 a1 02 c0    	mov    DWORD PTR ds:0xc002a1a4,ecx
c00199ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00199af:	85 c9                	test   ecx,ecx
c00199b1:	74 41                	je     c00199f4 <Semaphore::release()+0x64>
c00199b3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00199b6:	83 ec 0c             	sub    esp,0xc
c00199b9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00199bc:	51                   	push   ecx
c00199bd:	e8 9a fa ff ff       	call   c001945c <unblockTask(ThreadControlBlock*)>
c00199c2:	a1 a4 a1 02 c0       	mov    eax,ds:0xc002a1a4
c00199c7:	83 c4 10             	add    esp,0x10
c00199ca:	48                   	dec    eax
c00199cb:	90                   	nop
c00199cc:	a3 a4 a1 02 c0       	mov    ds:0xc002a1a4,eax
c00199d1:	85 c0                	test   eax,eax
c00199d3:	75 0b                	jne    c00199e0 <Semaphore::release()+0x50>
c00199d5:	a1 a0 a1 02 c0       	mov    eax,ds:0xc002a1a0
c00199da:	85 c0                	test   eax,eax
c00199dc:	75 1e                	jne    c00199fc <Semaphore::release()+0x6c>
c00199de:	66 90                	xchg   ax,ax
c00199e0:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c00199e5:	48                   	dec    eax
c00199e6:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c00199eb:	75 03                	jne    c00199f0 <Semaphore::release()+0x60>
c00199ed:	fb                   	sti    
c00199ee:	66 90                	xchg   ax,ax
c00199f0:	83 c4 0c             	add    esp,0xc
c00199f3:	c3                   	ret    
c00199f4:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00199f7:	eb d3                	jmp    c00199cc <Semaphore::release()+0x3c>
c00199f9:	8d 76 00             	lea    esi,[esi+0x0]
c00199fc:	c7 05 a0 a1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a1a0,0x0
c0019a06:	e8 95 f5 ff ff       	call   c0018fa0 <schedule()>
c0019a0b:	eb d3                	jmp    c00199e0 <Semaphore::release()+0x50>
c0019a0d:	8d 76 00             	lea    esi,[esi+0x0]

c0019a10 <__static_initialization_and_destruction_0(int, int)>:
c0019a10:	83 ec 0c             	sub    esp,0xc
c0019a13:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019a18:	0f 85 8e 00 00 00    	jne    c0019aac <__static_initialization_and_destruction_0(int, int)+0x9c>
c0019a1e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0019a26:	0f 85 80 00 00 00    	jne    c0019aac <__static_initialization_and_destruction_0(int, int)+0x9c>
c0019a2c:	83 ec 0c             	sub    esp,0xc
c0019a2f:	68 c4 a1 02 c0       	push   0xc002a1c4
c0019a34:	e8 af 9f 00 00       	call   c00239e8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019a39:	83 c4 10             	add    esp,0x10
c0019a3c:	83 ec 04             	sub    esp,0x4
c0019a3f:	68 f8 7e 02 c0       	push   0xc0027ef8
c0019a44:	68 c4 a1 02 c0       	push   0xc002a1c4
c0019a49:	68 98 39 02 c0       	push   0xc0023998
c0019a4e:	e8 a5 34 ff ff       	call   c000cef8 <__cxa_atexit>
c0019a53:	83 c4 10             	add    esp,0x10
c0019a56:	83 ec 0c             	sub    esp,0xc
c0019a59:	68 b8 a1 02 c0       	push   0xc002a1b8
c0019a5e:	e8 85 9f 00 00       	call   c00239e8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019a63:	83 c4 10             	add    esp,0x10
c0019a66:	83 ec 04             	sub    esp,0x4
c0019a69:	68 f8 7e 02 c0       	push   0xc0027ef8
c0019a6e:	68 b8 a1 02 c0       	push   0xc002a1b8
c0019a73:	68 98 39 02 c0       	push   0xc0023998
c0019a78:	e8 7b 34 ff ff       	call   c000cef8 <__cxa_atexit>
c0019a7d:	83 c4 10             	add    esp,0x10
c0019a80:	83 ec 0c             	sub    esp,0xc
c0019a83:	68 ac a1 02 c0       	push   0xc002a1ac
c0019a88:	e8 5b 9f 00 00       	call   c00239e8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019a8d:	83 c4 10             	add    esp,0x10
c0019a90:	83 ec 04             	sub    esp,0x4
c0019a93:	68 f8 7e 02 c0       	push   0xc0027ef8
c0019a98:	68 ac a1 02 c0       	push   0xc002a1ac
c0019a9d:	68 98 39 02 c0       	push   0xc0023998
c0019aa2:	e8 51 34 ff ff       	call   c000cef8 <__cxa_atexit>
c0019aa7:	83 c4 10             	add    esp,0x10
c0019aaa:	66 90                	xchg   ax,ax
c0019aac:	90                   	nop
c0019aad:	83 c4 0c             	add    esp,0xc
c0019ab0:	c3                   	ret    
c0019ab1:	8d 76 00             	lea    esi,[esi+0x0]

c0019ab4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0019ab4:	83 ec 0c             	sub    esp,0xc
c0019ab7:	83 ec 08             	sub    esp,0x8
c0019aba:	68 ff ff 00 00       	push   0xffff
c0019abf:	6a 01                	push   0x1
c0019ac1:	e8 4a ff ff ff       	call   c0019a10 <__static_initialization_and_destruction_0(int, int)>
c0019ac6:	83 c4 10             	add    esp,0x10
c0019ac9:	83 c4 0c             	add    esp,0xc
c0019acc:	c3                   	ret    

c0019acd <Vm::inbv(unsigned short)>:
c0019acd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019ad1:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019ad6:	75 06                	jne    c0019ade <Vm::inbv(unsigned short)+0x11>
c0019ad8:	a0 0c a2 02 c0       	mov    al,ds:0xc002a20c
c0019add:	c3                   	ret    
c0019ade:	ec                   	in     al,dx
c0019adf:	c3                   	ret    

c0019ae0 <Vm::outbv(unsigned short, unsigned char)>:
c0019ae0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019ae4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ae8:	66 81 fa fe fe       	cmp    dx,0xfefe
c0019aed:	75 25                	jne    c0019b14 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0019aef:	8b 0d 0c a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a20c
c0019af5:	8d 51 01             	lea    edx,[ecx+0x1]
c0019af8:	88 81 20 a2 02 c0    	mov    BYTE PTR [ecx-0x3ffd5de0],al
c0019afe:	89 15 0c a2 02 c0    	mov    DWORD PTR ds:0xc002a20c,edx
c0019b04:	83 fa 20             	cmp    edx,0x20
c0019b07:	75 0c                	jne    c0019b15 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0019b09:	c7 05 0c a2 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002a20c,0x1f
c0019b13:	c3                   	ret    
c0019b14:	ee                   	out    dx,al
c0019b15:	c3                   	ret    

c0019b16 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019b16:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019b1b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019b20:	c1 e0 04             	shl    eax,0x4
c0019b23:	01 d0                	add    eax,edx
c0019b25:	c3                   	ret    

c0019b26 <Vm::getSegment(unsigned int)>:
c0019b26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b2a:	c1 e8 10             	shr    eax,0x10
c0019b2d:	c3                   	ret    

c0019b2e <Vm::getOffset(unsigned int)>:
c0019b2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019b32:	c3                   	ret    

c0019b33 <Vm::mainloop2()>:
c0019b33:	83 ec 18             	sub    esp,0x18
c0019b36:	fa                   	cli    
c0019b37:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c0019b3d:	6a 02                	push   0x2
c0019b3f:	c6 05 05 a2 02 c0 01 	mov    BYTE PTR ds:0xc002a205,0x1
c0019b46:	e8 25 f6 ff ff       	call   c0019170 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019b4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019b50:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019b54:	52                   	push   edx
c0019b55:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0019b59:	52                   	push   edx
c0019b5a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0019b5e:	52                   	push   edx
c0019b5f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0019b63:	50                   	push   eax
c0019b64:	e8 d6 66 fe ff       	call   c000023f <goToVM86>
c0019b69:	83 c4 2c             	add    esp,0x2c
c0019b6c:	c3                   	ret    

c0019b6d <Vm::mainVm8086Loop(void*)>:
c0019b6d:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0019b72:	48                   	dec    eax
c0019b73:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0019b78:	75 01                	jne    c0019b7b <Vm::mainVm8086Loop(void*)+0xe>
c0019b7a:	fb                   	sti    
c0019b7b:	eb b6                	jmp    c0019b33 <Vm::mainloop2()>

c0019b7d <Vm::mainloop3(unsigned long)>:
c0019b7d:	83 ec 18             	sub    esp,0x18
c0019b80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b84:	fa                   	cli    
c0019b85:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c0019b8b:	6a 02                	push   0x2
c0019b8d:	c6 05 04 a2 02 c0 01 	mov    BYTE PTR ds:0xc002a204,0x1
c0019b94:	a3 00 a2 02 c0       	mov    ds:0xc002a200,eax
c0019b99:	e8 d2 f5 ff ff       	call   c0019170 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0019b9e:	83 c4 1c             	add    esp,0x1c
c0019ba1:	eb 90                	jmp    c0019b33 <Vm::mainloop2()>

c0019ba3 <Vm::initialise8086()>:
c0019ba3:	83 ec 0c             	sub    esp,0xc
c0019ba6:	68 80 00 00 00       	push   0x80
c0019bab:	6a 00                	push   0x0
c0019bad:	68 6d 9b 01 c0       	push   0xc0019b6d
c0019bb2:	ff 35 d0 a1 02 c0    	push   DWORD PTR ds:0xc002a1d0
c0019bb8:	e8 c7 f1 ff ff       	call   c0018d84 <Process::createThread(void (*)(void*), void*, int)>
c0019bbd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019bc4:	a3 08 a2 02 c0       	mov    ds:0xc002a208,eax
c0019bc9:	68 00 01 00 00       	push   0x100
c0019bce:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c0019bd3:	6a 00                	push   0x0
c0019bd5:	6a 00                	push   0x0
c0019bd7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0019bdd:	e8 f4 2a ff ff       	call   c000c6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019be2:	83 c4 2c             	add    esp,0x2c
c0019be5:	c3                   	ret    

c0019be6 <Vm::finish8086()>:
c0019be6:	53                   	push   ebx
c0019be7:	83 ec 08             	sub    esp,0x8
c0019bea:	fa                   	cli    
c0019beb:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c0019bf1:	80 3d 04 a2 02 c0 00 	cmp    BYTE PTR ds:0xc002a204,0x0
c0019bf8:	75 15                	jne    c0019c0f <Vm::finish8086()+0x29>
c0019bfa:	e8 a1 f3 ff ff       	call   c0018fa0 <schedule()>
c0019bff:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0019c04:	48                   	dec    eax
c0019c05:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0019c0a:	75 de                	jne    c0019bea <Vm::finish8086()+0x4>
c0019c0c:	fb                   	sti    
c0019c0d:	eb db                	jmp    c0019bea <Vm::finish8086()+0x4>
c0019c0f:	83 ec 0c             	sub    esp,0xc
c0019c12:	8b 1d 00 a2 02 c0    	mov    ebx,DWORD PTR ds:0xc002a200
c0019c18:	ff 35 08 a2 02 c0    	push   DWORD PTR ds:0xc002a208
c0019c1e:	c6 05 04 a2 02 c0 00 	mov    BYTE PTR ds:0xc002a204,0x0
c0019c25:	e8 32 f8 ff ff       	call   c001945c <unblockTask(ThreadControlBlock*)>
c0019c2a:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0019c2f:	83 c4 10             	add    esp,0x10
c0019c32:	8d 50 ff             	lea    edx,[eax-0x1]
c0019c35:	89 15 a8 a1 02 c0    	mov    DWORD PTR ds:0xc002a1a8,edx
c0019c3b:	85 d2                	test   edx,edx
c0019c3d:	75 01                	jne    c0019c40 <Vm::finish8086()+0x5a>
c0019c3f:	fb                   	sti    
c0019c40:	89 d8                	mov    eax,ebx
c0019c42:	83 c4 08             	add    esp,0x8
c0019c45:	5b                   	pop    ebx
c0019c46:	c3                   	ret    

c0019c47 <Vm::getOutput8086(unsigned char*)>:
c0019c47:	57                   	push   edi
c0019c48:	8b 0d 0c a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a20c
c0019c4e:	56                   	push   esi
c0019c4f:	be 20 a2 02 c0       	mov    esi,0xc002a220
c0019c54:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019c58:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019c5a:	a1 0c a2 02 c0       	mov    eax,ds:0xc002a20c
c0019c5f:	5e                   	pop    esi
c0019c60:	c7 05 0c a2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a20c,0x0
c0019c6a:	5f                   	pop    edi
c0019c6b:	c3                   	ret    

c0019c6c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019c6c:	55                   	push   ebp
c0019c6d:	57                   	push   edi
c0019c6e:	56                   	push   esi
c0019c6f:	53                   	push   ebx
c0019c70:	83 ec 0c             	sub    esp,0xc
c0019c73:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019c77:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0019c7b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0019c7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019c83:	fa                   	cli    
c0019c84:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c0019c8a:	80 3d 05 a2 02 c0 00 	cmp    BYTE PTR ds:0xc002a205,0x0
c0019c91:	75 15                	jne    c0019ca8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0019c93:	e8 08 f3 ff ff       	call   c0018fa0 <schedule()>
c0019c98:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0019c9d:	48                   	dec    eax
c0019c9e:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0019ca3:	75 de                	jne    c0019c83 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019ca5:	fb                   	sti    
c0019ca6:	eb db                	jmp    c0019c83 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019ca8:	a1 08 a2 02 c0       	mov    eax,ds:0xc002a208
c0019cad:	c7 05 0c a2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a20c,0x0
c0019cb7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0019cbb:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0019cbf:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0019cc3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019cc7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019ccb:	0f b7 ff             	movzx  edi,di
c0019cce:	0f b7 f6             	movzx  esi,si
c0019cd1:	50                   	push   eax
c0019cd2:	6a 20                	push   0x20
c0019cd4:	6a 00                	push   0x0
c0019cd6:	68 20 a2 02 c0       	push   0xc002a220
c0019cdb:	e8 b4 69 fe ff       	call   c0000694 <memset>
c0019ce0:	5a                   	pop    edx
c0019ce1:	59                   	pop    ecx
c0019ce2:	57                   	push   edi
c0019ce3:	56                   	push   esi
c0019ce4:	e8 2d fe ff ff       	call   c0019b16 <Vm::realToLinear(unsigned short, unsigned short)>
c0019ce9:	83 c4 10             	add    esp,0x10
c0019cec:	89 c7                	mov    edi,eax
c0019cee:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019cf2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019cf6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019cf8:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0019cfd:	c6 05 05 a2 02 c0 00 	mov    BYTE PTR ds:0xc002a205,0x0
c0019d04:	48                   	dec    eax
c0019d05:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0019d0a:	75 01                	jne    c0019d0d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0019d0c:	fb                   	sti    
c0019d0d:	83 ec 0c             	sub    esp,0xc
c0019d10:	ff 35 08 a2 02 c0    	push   DWORD PTR ds:0xc002a208
c0019d16:	e8 41 f7 ff ff       	call   c001945c <unblockTask(ThreadControlBlock*)>
c0019d1b:	83 c4 1c             	add    esp,0x1c
c0019d1e:	b0 01                	mov    al,0x1
c0019d20:	5b                   	pop    ebx
c0019d21:	5e                   	pop    esi
c0019d22:	5f                   	pop    edi
c0019d23:	5d                   	pop    ebp
c0019d24:	c3                   	ret    

c0019d25 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019d25:	55                   	push   ebp
c0019d26:	57                   	push   edi
c0019d27:	56                   	push   esi
c0019d28:	53                   	push   ebx
c0019d29:	83 ec 2c             	sub    esp,0x2c
c0019d2c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019d30:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019d34:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019d38:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0019d3c:	fa                   	cli    
c0019d3d:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c0019d43:	0f b6 35 05 a2 02 c0 	movzx  esi,BYTE PTR ds:0xc002a205
c0019d4a:	89 f0                	mov    eax,esi
c0019d4c:	84 c0                	test   al,al
c0019d4e:	75 1d                	jne    c0019d6d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019d50:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019d54:	e8 47 f2 ff ff       	call   c0018fa0 <schedule()>
c0019d59:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0019d5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019d62:	48                   	dec    eax
c0019d63:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0019d68:	75 d2                	jne    c0019d3c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019d6a:	fb                   	sti    
c0019d6b:	eb cf                	jmp    c0019d3c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0019d6d:	a1 08 a2 02 c0       	mov    eax,ds:0xc002a208
c0019d72:	c7 05 0c a2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a20c,0x0
c0019d7c:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019d80:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019d84:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0019d88:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0019d8c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0019d90:	50                   	push   eax
c0019d91:	6a 20                	push   0x20
c0019d93:	6a 00                	push   0x0
c0019d95:	68 20 a2 02 c0       	push   0xc002a220
c0019d9a:	e8 f5 68 fe ff       	call   c0000694 <memset>
c0019d9f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019da6:	e8 c8 ff fe ff       	call   c0009d73 <malloc>
c0019dab:	83 c4 0c             	add    esp,0xc
c0019dae:	89 c3                	mov    ebx,eax
c0019db0:	ff 35 d0 a1 02 c0    	push   DWORD PTR ds:0xc002a1d0
c0019db6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019dba:	50                   	push   eax
c0019dbb:	e8 0a 38 ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c0019dc0:	83 c4 10             	add    esp,0x10
c0019dc3:	85 db                	test   ebx,ebx
c0019dc5:	75 0a                	jne    c0019dd1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0019dc7:	83 ec 0c             	sub    esp,0xc
c0019dca:	68 2c 6f 02 c0       	push   0xc0026f2c
c0019dcf:	eb 3e                	jmp    c0019e0f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019dd1:	50                   	push   eax
c0019dd2:	8d 44 24 17          	lea    eax,[esp+0x17]
c0019dd6:	50                   	push   eax
c0019dd7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019ddb:	50                   	push   eax
c0019ddc:	53                   	push   ebx
c0019ddd:	e8 6e 3b ff ff       	call   c000d950 <File::stat(unsigned long long*, bool*)>
c0019de2:	83 c4 10             	add    esp,0x10
c0019de5:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0019dea:	74 0a                	je     c0019df6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0019dec:	83 ec 0c             	sub    esp,0xc
c0019def:	68 40 6f 02 c0       	push   0xc0026f40
c0019df4:	eb 19                	jmp    c0019e0f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019df6:	51                   	push   ecx
c0019df7:	51                   	push   ecx
c0019df8:	6a 01                	push   0x1
c0019dfa:	53                   	push   ebx
c0019dfb:	e8 a4 38 ff ff       	call   c000d6a4 <File::open(FileOpenMode)>
c0019e00:	83 c4 10             	add    esp,0x10
c0019e03:	85 c0                	test   eax,eax
c0019e05:	74 24                	je     c0019e2b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019e07:	83 ec 0c             	sub    esp,0xc
c0019e0a:	68 59 6f 02 c0       	push   0xc0026f59
c0019e0f:	e8 1d b3 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0019e14:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0019e19:	83 c4 10             	add    esp,0x10
c0019e1c:	48                   	dec    eax
c0019e1d:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0019e22:	85 c0                	test   eax,eax
c0019e24:	75 01                	jne    c0019e27 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019e26:	fb                   	sti    
c0019e27:	31 f6                	xor    esi,esi
c0019e29:	eb 58                	jmp    c0019e83 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0019e2b:	0f b7 ed             	movzx  ebp,bp
c0019e2e:	50                   	push   eax
c0019e2f:	0f b7 ff             	movzx  edi,di
c0019e32:	50                   	push   eax
c0019e33:	55                   	push   ebp
c0019e34:	57                   	push   edi
c0019e35:	e8 dc fc ff ff       	call   c0019b16 <Vm::realToLinear(unsigned short, unsigned short)>
c0019e3a:	5a                   	pop    edx
c0019e3b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019e3d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019e41:	51                   	push   ecx
c0019e42:	50                   	push   eax
c0019e43:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019e47:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019e4b:	53                   	push   ebx
c0019e4c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019e4f:	83 c4 14             	add    esp,0x14
c0019e52:	53                   	push   ebx
c0019e53:	e8 aa 38 ff ff       	call   c000d702 <File::close()>
c0019e58:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0019e5d:	83 c4 10             	add    esp,0x10
c0019e60:	48                   	dec    eax
c0019e61:	c6 05 05 a2 02 c0 00 	mov    BYTE PTR ds:0xc002a205,0x0
c0019e68:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c0019e6d:	85 c0                	test   eax,eax
c0019e6f:	75 01                	jne    c0019e72 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019e71:	fb                   	sti    
c0019e72:	83 ec 0c             	sub    esp,0xc
c0019e75:	ff 35 08 a2 02 c0    	push   DWORD PTR ds:0xc002a208
c0019e7b:	e8 dc f5 ff ff       	call   c001945c <unblockTask(ThreadControlBlock*)>
c0019e80:	83 c4 10             	add    esp,0x10
c0019e83:	83 c4 2c             	add    esp,0x2c
c0019e86:	89 f0                	mov    eax,esi
c0019e88:	5b                   	pop    ebx
c0019e89:	5e                   	pop    esi
c0019e8a:	5f                   	pop    edi
c0019e8b:	5d                   	pop    ebp
c0019e8c:	c3                   	ret    

c0019e8d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019e8d:	57                   	push   edi
c0019e8e:	56                   	push   esi
c0019e8f:	53                   	push   ebx
c0019e90:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019e94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019e98:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019e9c:	83 e8 06             	sub    eax,0x6
c0019e9f:	0f b7 c0             	movzx  eax,ax
c0019ea2:	50                   	push   eax
c0019ea3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0019ea8:	50                   	push   eax
c0019ea9:	e8 68 fc ff ff       	call   c0019b16 <Vm::realToLinear(unsigned short, unsigned short)>
c0019eae:	5a                   	pop    edx
c0019eaf:	5e                   	pop    esi
c0019eb0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019eb3:	8d 56 fa             	lea    edx,[esi-0x6]
c0019eb6:	81 e2 ff ff 00 00    	and    edx,0xffff
c0019ebc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0019ebf:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019ec2:	83 c2 02             	add    edx,0x2
c0019ec5:	66 89 10             	mov    WORD PTR [eax],dx
c0019ec8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0019ecb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0019ecf:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019ed2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019ed6:	89 d6                	mov    esi,edx
c0019ed8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019ede:	66 81 e6 ff fd       	and    si,0xfdff
c0019ee3:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0019ee7:	74 07                	je     c0019ef0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019ee9:	89 d6                	mov    esi,edx
c0019eeb:	66 81 ce 00 02       	or     si,0x200
c0019ef0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019ef4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019ef9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0019efd:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019f05:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019f08:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019f10:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019f13:	5b                   	pop    ebx
c0019f14:	5e                   	pop    esi
c0019f15:	5f                   	pop    edi
c0019f16:	c3                   	ret    

c0019f17 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019f17:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f1c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f21:	c1 e0 04             	shl    eax,0x4
c0019f24:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019f27:	c3                   	ret    

c0019f28 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019f28:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f2d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f32:	c1 e0 04             	shl    eax,0x4
c0019f35:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019f39:	c3                   	ret    

c0019f3a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019f3a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f3f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f44:	c1 e0 04             	shl    eax,0x4
c0019f47:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019f4a:	c3                   	ret    

c0019f4b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019f4b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f50:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f55:	c1 e0 04             	shl    eax,0x4
c0019f58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f5c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0019f5f:	c3                   	ret    

c0019f60 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019f60:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f65:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f6a:	c1 e0 04             	shl    eax,0x4
c0019f6d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f71:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019f75:	c3                   	ret    

c0019f76 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019f76:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019f7b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019f80:	c1 e0 04             	shl    eax,0x4
c0019f83:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f87:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019f8a:	c3                   	ret    

c0019f8b <Vm::faultHandler(regs*)>:
c0019f8b:	55                   	push   ebp
c0019f8c:	57                   	push   edi
c0019f8d:	56                   	push   esi
c0019f8e:	53                   	push   ebx
c0019f8f:	83 ec 1c             	sub    esp,0x1c
c0019f92:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019f96:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019f99:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019f9d:	0f b7 f8             	movzx  edi,ax
c0019fa0:	52                   	push   edx
c0019fa1:	0f b7 c0             	movzx  eax,ax
c0019fa4:	50                   	push   eax
c0019fa5:	e8 6c fb ff ff       	call   c0019b16 <Vm::realToLinear(unsigned short, unsigned short)>
c0019faa:	5a                   	pop    edx
c0019fab:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019fae:	59                   	pop    ecx
c0019faf:	89 c1                	mov    ecx,eax
c0019fb1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019fb4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019fb8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019fbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fc1:	0f b7 c5             	movzx  eax,bp
c0019fc4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019fc8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0019fcc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019fd0:	e8 41 fb ff ff       	call   c0019b16 <Vm::realToLinear(unsigned short, unsigned short)>
c0019fd5:	5e                   	pop    esi
c0019fd6:	be 06 00 00 00       	mov    esi,0x6
c0019fdb:	5a                   	pop    edx
c0019fdc:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0019fe1:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019fe6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0019fe9:	80 fa 9d             	cmp    dl,0x9d
c0019fec:	0f 84 2c 02 00 00    	je     c001a21e <Vm::faultHandler(regs*)+0x293>
c0019ff2:	0f 87 91 00 00 00    	ja     c001a089 <Vm::faultHandler(regs*)+0xfe>
c0019ff8:	80 fa 66             	cmp    dl,0x66
c0019ffb:	0f 84 98 01 00 00    	je     c001a199 <Vm::faultHandler(regs*)+0x20e>
c001a001:	77 47                	ja     c001a04a <Vm::faultHandler(regs*)+0xbf>
c001a003:	80 fa 36             	cmp    dl,0x36
c001a006:	0f 84 80 01 00 00    	je     c001a18c <Vm::faultHandler(regs*)+0x201>
c001a00c:	77 1a                	ja     c001a028 <Vm::faultHandler(regs*)+0x9d>
c001a00e:	80 fa 26             	cmp    dl,0x26
c001a011:	0f 84 4e 01 00 00    	je     c001a165 <Vm::faultHandler(regs*)+0x1da>
c001a017:	80 fa 2e             	cmp    dl,0x2e
c001a01a:	0f 85 e2 05 00 00    	jne    c001a602 <Vm::faultHandler(regs*)+0x677>
c001a020:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a023:	31 f6                	xor    esi,esi
c001a025:	41                   	inc    ecx
c001a026:	eb be                	jmp    c0019fe6 <Vm::faultHandler(regs*)+0x5b>
c001a028:	80 fa 64             	cmp    dl,0x64
c001a02b:	0f 84 41 01 00 00    	je     c001a172 <Vm::faultHandler(regs*)+0x1e7>
c001a031:	0f 87 48 01 00 00    	ja     c001a17f <Vm::faultHandler(regs*)+0x1f4>
c001a037:	80 fa 3e             	cmp    dl,0x3e
c001a03a:	0f 85 c2 05 00 00    	jne    c001a602 <Vm::faultHandler(regs*)+0x677>
c001a040:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a043:	be 01 00 00 00       	mov    esi,0x1
c001a048:	eb db                	jmp    c001a025 <Vm::faultHandler(regs*)+0x9a>
c001a04a:	80 fa 6d             	cmp    dl,0x6d
c001a04d:	0f 84 ec 02 00 00    	je     c001a33f <Vm::faultHandler(regs*)+0x3b4>
c001a053:	77 17                	ja     c001a06c <Vm::faultHandler(regs*)+0xe1>
c001a055:	80 fa 67             	cmp    dl,0x67
c001a058:	0f 84 48 01 00 00    	je     c001a1a6 <Vm::faultHandler(regs*)+0x21b>
c001a05e:	80 fa 6c             	cmp    dl,0x6c
c001a061:	0f 84 69 02 00 00    	je     c001a2d0 <Vm::faultHandler(regs*)+0x345>
c001a067:	e9 96 05 00 00       	jmp    c001a602 <Vm::faultHandler(regs*)+0x677>
c001a06c:	80 fa 6f             	cmp    dl,0x6f
c001a06f:	0f 84 f4 03 00 00    	je     c001a469 <Vm::faultHandler(regs*)+0x4de>
c001a075:	0f 82 59 03 00 00    	jb     c001a3d4 <Vm::faultHandler(regs*)+0x449>
c001a07b:	80 fa 9c             	cmp    dl,0x9c
c001a07e:	0f 84 2f 01 00 00    	je     c001a1b3 <Vm::faultHandler(regs*)+0x228>
c001a084:	e9 79 05 00 00       	jmp    c001a602 <Vm::faultHandler(regs*)+0x677>
c001a089:	80 fa ec             	cmp    dl,0xec
c001a08c:	0f 84 14 05 00 00    	je     c001a5a6 <Vm::faultHandler(regs*)+0x61b>
c001a092:	77 7b                	ja     c001a10f <Vm::faultHandler(regs*)+0x184>
c001a094:	80 fa e4             	cmp    dl,0xe4
c001a097:	0f 84 93 04 00 00    	je     c001a530 <Vm::faultHandler(regs*)+0x5a5>
c001a09d:	77 53                	ja     c001a0f2 <Vm::faultHandler(regs*)+0x167>
c001a09f:	80 fa cd             	cmp    dl,0xcd
c001a0a2:	0f 84 d9 01 00 00    	je     c001a281 <Vm::faultHandler(regs*)+0x2f6>
c001a0a8:	80 fa cf             	cmp    dl,0xcf
c001a0ab:	0f 85 51 05 00 00    	jne    c001a602 <Vm::faultHandler(regs*)+0x677>
c001a0b1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001a0b4:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001a0b7:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001a0bb:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001a0be:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001a0c2:	81 ca 00 02 02 00    	or     edx,0x20200
c001a0c8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a0cb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001a0cf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a0d5:	66 c1 e8 09          	shr    ax,0x9
c001a0d9:	83 e0 01             	and    eax,0x1
c001a0dc:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a0df:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a0e2:	83 c0 06             	add    eax,0x6
c001a0e5:	25 ff ff 00 00       	and    eax,0xffff
c001a0ea:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001a0ed:	e9 0c 05 00 00       	jmp    c001a5fe <Vm::faultHandler(regs*)+0x673>
c001a0f2:	80 fa e6             	cmp    dl,0xe6
c001a0f5:	0f 84 7f 04 00 00    	je     c001a57a <Vm::faultHandler(regs*)+0x5ef>
c001a0fb:	0f 82 4b 04 00 00    	jb     c001a54c <Vm::faultHandler(regs*)+0x5c1>
c001a101:	80 fa e7             	cmp    dl,0xe7
c001a104:	0f 84 87 04 00 00    	je     c001a591 <Vm::faultHandler(regs*)+0x606>
c001a10a:	e9 f3 04 00 00       	jmp    c001a602 <Vm::faultHandler(regs*)+0x677>
c001a10f:	80 fa ef             	cmp    dl,0xef
c001a112:	0f 84 d1 04 00 00    	je     c001a5e9 <Vm::faultHandler(regs*)+0x65e>
c001a118:	77 28                	ja     c001a142 <Vm::faultHandler(regs*)+0x1b7>
c001a11a:	80 fa ed             	cmp    dl,0xed
c001a11d:	0f 84 9f 04 00 00    	je     c001a5c2 <Vm::faultHandler(regs*)+0x637>
c001a123:	80 fa ee             	cmp    dl,0xee
c001a126:	0f 85 d6 04 00 00    	jne    c001a602 <Vm::faultHandler(regs*)+0x677>
c001a12c:	50                   	push   eax
c001a12d:	50                   	push   eax
c001a12e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a132:	50                   	push   eax
c001a133:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a137:	50                   	push   eax
c001a138:	e8 a3 f9 ff ff       	call   c0019ae0 <Vm::outbv(unsigned short, unsigned char)>
c001a13d:	e9 9f 04 00 00       	jmp    c001a5e1 <Vm::faultHandler(regs*)+0x656>
c001a142:	80 fa fa             	cmp    dl,0xfa
c001a145:	0f 84 69 01 00 00    	je     c001a2b4 <Vm::faultHandler(regs*)+0x329>
c001a14b:	80 fa fb             	cmp    dl,0xfb
c001a14e:	0f 84 6e 01 00 00    	je     c001a2c2 <Vm::faultHandler(regs*)+0x337>
c001a154:	80 fa f3             	cmp    dl,0xf3
c001a157:	0f 85 a5 04 00 00    	jne    c001a602 <Vm::faultHandler(regs*)+0x677>
c001a15d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a160:	e9 c0 fe ff ff       	jmp    c001a025 <Vm::faultHandler(regs*)+0x9a>
c001a165:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a168:	be 02 00 00 00       	mov    esi,0x2
c001a16d:	e9 b3 fe ff ff       	jmp    c001a025 <Vm::faultHandler(regs*)+0x9a>
c001a172:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a175:	be 03 00 00 00       	mov    esi,0x3
c001a17a:	e9 a6 fe ff ff       	jmp    c001a025 <Vm::faultHandler(regs*)+0x9a>
c001a17f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a182:	be 04 00 00 00       	mov    esi,0x4
c001a187:	e9 99 fe ff ff       	jmp    c001a025 <Vm::faultHandler(regs*)+0x9a>
c001a18c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a18f:	be 05 00 00 00       	mov    esi,0x5
c001a194:	e9 8c fe ff ff       	jmp    c001a025 <Vm::faultHandler(regs*)+0x9a>
c001a199:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a19c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001a1a1:	e9 7f fe ff ff       	jmp    c001a025 <Vm::faultHandler(regs*)+0x9a>
c001a1a6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a1a9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001a1ae:	e9 72 fe ff ff       	jmp    c001a025 <Vm::faultHandler(regs*)+0x9a>
c001a1b3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001a1b6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a1ba:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a1bf:	74 30                	je     c001a1f1 <Vm::faultHandler(regs*)+0x266>
c001a1c1:	83 e9 04             	sub    ecx,0x4
c001a1c4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001a1ca:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001a1d0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001a1d3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001a1d6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a1dc:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001a1e0:	0f 84 15 04 00 00    	je     c001a5fb <Vm::faultHandler(regs*)+0x670>
c001a1e6:	80 ce 02             	or     dh,0x2
c001a1e9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001a1ec:	e9 0a 04 00 00       	jmp    c001a5fb <Vm::faultHandler(regs*)+0x670>
c001a1f1:	83 e9 02             	sub    ecx,0x2
c001a1f4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001a1fa:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001a1fd:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001a201:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a207:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001a20b:	74 05                	je     c001a212 <Vm::faultHandler(regs*)+0x287>
c001a20d:	80 ce 02             	or     dh,0x2
c001a210:	eb 03                	jmp    c001a215 <Vm::faultHandler(regs*)+0x28a>
c001a212:	80 e6 fd             	and    dh,0xfd
c001a215:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001a219:	e9 dd 03 00 00       	jmp    c001a5fb <Vm::faultHandler(regs*)+0x670>
c001a21e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a223:	74 2a                	je     c001a24f <Vm::faultHandler(regs*)+0x2c4>
c001a225:	8b 10                	mov    edx,DWORD PTR [eax]
c001a227:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001a22d:	81 ca 00 02 02 00    	or     edx,0x20200
c001a233:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a236:	8b 00                	mov    eax,DWORD PTR [eax]
c001a238:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a23e:	c1 e8 09             	shr    eax,0x9
c001a241:	83 e0 01             	and    eax,0x1
c001a244:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a247:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a24a:	83 c0 04             	add    eax,0x4
c001a24d:	eb 25                	jmp    c001a274 <Vm::faultHandler(regs*)+0x2e9>
c001a24f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001a252:	81 ca 00 02 02 00    	or     edx,0x20200
c001a258:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001a25b:	66 8b 00             	mov    ax,WORD PTR [eax]
c001a25e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001a264:	66 c1 e8 09          	shr    ax,0x9
c001a268:	83 e0 01             	and    eax,0x1
c001a26b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001a26e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001a271:	83 c0 02             	add    eax,0x2
c001a274:	25 ff ff 00 00       	and    eax,0xffff
c001a279:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001a27c:	e9 7a 03 00 00       	jmp    c001a5fb <Vm::faultHandler(regs*)+0x670>
c001a281:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a285:	3c ee                	cmp    al,0xee
c001a287:	75 10                	jne    c001a299 <Vm::faultHandler(regs*)+0x30e>
c001a289:	83 ec 0c             	sub    esp,0xc
c001a28c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001a28f:	e8 e9 f8 ff ff       	call   c0019b7d <Vm::mainloop3(unsigned long)>
c001a294:	e9 4b 03 00 00       	jmp    c001a5e4 <Vm::faultHandler(regs*)+0x659>
c001a299:	83 ec 0c             	sub    esp,0xc
c001a29c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a2a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2a4:	51                   	push   ecx
c001a2a5:	50                   	push   eax
c001a2a6:	53                   	push   ebx
c001a2a7:	e8 e1 fb ff ff       	call   c0019e8d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001a2ac:	83 c4 20             	add    esp,0x20
c001a2af:	e9 4a 03 00 00       	jmp    c001a5fe <Vm::faultHandler(regs*)+0x673>
c001a2b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2b9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001a2bd:	e9 39 03 00 00       	jmp    c001a5fb <Vm::faultHandler(regs*)+0x670>
c001a2c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a2c7:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001a2cb:	e9 2b 03 00 00       	jmp    c001a5fb <Vm::faultHandler(regs*)+0x670>
c001a2d0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a2d3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a2d8:	74 2b                	je     c001a305 <Vm::faultHandler(regs*)+0x37a>
c001a2da:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001a2e1:	76 22                	jbe    c001a305 <Vm::faultHandler(regs*)+0x37a>
c001a2e3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a2e7:	50                   	push   eax
c001a2e8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a2ec:	50                   	push   eax
c001a2ed:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a2f1:	50                   	push   eax
c001a2f2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a2f6:	50                   	push   eax
c001a2f7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a2fb:	50                   	push   eax
c001a2fc:	6a 6c                	push   0x6c
c001a2fe:	6a 6c                	push   0x6c
c001a300:	e9 b9 01 00 00       	jmp    c001a4be <Vm::faultHandler(regs*)+0x533>
c001a305:	83 ec 0c             	sub    esp,0xc
c001a308:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a30c:	0f b7 f6             	movzx  esi,si
c001a30f:	50                   	push   eax
c001a310:	e8 b8 f7 ff ff       	call   c0019acd <Vm::inbv(unsigned short)>
c001a315:	83 c4 0c             	add    esp,0xc
c001a318:	0f b6 c0             	movzx  eax,al
c001a31b:	50                   	push   eax
c001a31c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001a320:	50                   	push   eax
c001a321:	56                   	push   esi
c001a322:	e8 24 fc ff ff       	call   c0019f4b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001a327:	83 c4 10             	add    esp,0x10
c001a32a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a32d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a331:	74 03                	je     c001a336 <Vm::faultHandler(regs*)+0x3ab>
c001a333:	48                   	dec    eax
c001a334:	eb 01                	jmp    c001a337 <Vm::faultHandler(regs*)+0x3ac>
c001a336:	40                   	inc    eax
c001a337:	0f b7 c0             	movzx  eax,ax
c001a33a:	e9 8d 00 00 00       	jmp    c001a3cc <Vm::faultHandler(regs*)+0x441>
c001a33f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001a342:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a345:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a34a:	74 29                	je     c001a375 <Vm::faultHandler(regs*)+0x3ea>
c001a34c:	3d ff ff 00 00       	cmp    eax,0xffff
c001a351:	76 22                	jbe    c001a375 <Vm::faultHandler(regs*)+0x3ea>
c001a353:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a357:	50                   	push   eax
c001a358:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a35c:	50                   	push   eax
c001a35d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a361:	50                   	push   eax
c001a362:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a366:	50                   	push   eax
c001a367:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a36b:	50                   	push   eax
c001a36c:	6a 6d                	push   0x6d
c001a36e:	6a 6d                	push   0x6d
c001a370:	e9 49 01 00 00       	jmp    c001a4be <Vm::faultHandler(regs*)+0x533>
c001a375:	0f b7 c8             	movzx  ecx,ax
c001a378:	0f b7 f6             	movzx  esi,si
c001a37b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a37e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a383:	74 20                	je     c001a3a5 <Vm::faultHandler(regs*)+0x41a>
c001a385:	ed                   	in     eax,dx
c001a386:	55                   	push   ebp
c001a387:	50                   	push   eax
c001a388:	51                   	push   ecx
c001a389:	56                   	push   esi
c001a38a:	e8 e7 fb ff ff       	call   c0019f76 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001a38f:	83 c4 10             	add    esp,0x10
c001a392:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a395:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a399:	74 05                	je     c001a3a0 <Vm::faultHandler(regs*)+0x415>
c001a39b:	83 e8 04             	sub    eax,0x4
c001a39e:	eb 27                	jmp    c001a3c7 <Vm::faultHandler(regs*)+0x43c>
c001a3a0:	83 c0 04             	add    eax,0x4
c001a3a3:	eb 22                	jmp    c001a3c7 <Vm::faultHandler(regs*)+0x43c>
c001a3a5:	66 ed                	in     ax,dx
c001a3a7:	0f b7 c0             	movzx  eax,ax
c001a3aa:	57                   	push   edi
c001a3ab:	50                   	push   eax
c001a3ac:	51                   	push   ecx
c001a3ad:	56                   	push   esi
c001a3ae:	e8 ad fb ff ff       	call   c0019f60 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001a3b3:	83 c4 10             	add    esp,0x10
c001a3b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001a3b9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a3bd:	74 05                	je     c001a3c4 <Vm::faultHandler(regs*)+0x439>
c001a3bf:	83 e8 02             	sub    eax,0x2
c001a3c2:	eb 03                	jmp    c001a3c7 <Vm::faultHandler(regs*)+0x43c>
c001a3c4:	83 c0 02             	add    eax,0x2
c001a3c7:	25 ff ff 00 00       	and    eax,0xffff
c001a3cc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001a3cf:	e9 27 02 00 00       	jmp    c001a5fb <Vm::faultHandler(regs*)+0x670>
c001a3d4:	8d 46 ff             	lea    eax,[esi-0x1]
c001a3d7:	3c 05                	cmp    al,0x5
c001a3d9:	77 24                	ja     c001a3ff <Vm::faultHandler(regs*)+0x474>
c001a3db:	0f b6 c0             	movzx  eax,al
c001a3de:	ff 24 85 cc 6f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9034]
c001a3e5:	0f b7 fd             	movzx  edi,bp
c001a3e8:	eb 15                	jmp    c001a3ff <Vm::faultHandler(regs*)+0x474>
c001a3ea:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001a3ee:	eb 0f                	jmp    c001a3ff <Vm::faultHandler(regs*)+0x474>
c001a3f0:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001a3f4:	eb 09                	jmp    c001a3ff <Vm::faultHandler(regs*)+0x474>
c001a3f6:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001a3fa:	eb 03                	jmp    c001a3ff <Vm::faultHandler(regs*)+0x474>
c001a3fc:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001a3ff:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a402:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a407:	74 29                	je     c001a432 <Vm::faultHandler(regs*)+0x4a7>
c001a409:	3d ff ff 00 00       	cmp    eax,0xffff
c001a40e:	76 22                	jbe    c001a432 <Vm::faultHandler(regs*)+0x4a7>
c001a410:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a414:	50                   	push   eax
c001a415:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a419:	50                   	push   eax
c001a41a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a41e:	50                   	push   eax
c001a41f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a423:	50                   	push   eax
c001a424:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a428:	50                   	push   eax
c001a429:	6a 6e                	push   0x6e
c001a42b:	6a 6e                	push   0x6e
c001a42d:	e9 8c 00 00 00       	jmp    c001a4be <Vm::faultHandler(regs*)+0x533>
c001a432:	0f b7 c0             	movzx  eax,ax
c001a435:	52                   	push   edx
c001a436:	52                   	push   edx
c001a437:	50                   	push   eax
c001a438:	57                   	push   edi
c001a439:	e8 d9 fa ff ff       	call   c0019f17 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001a43e:	59                   	pop    ecx
c001a43f:	0f b6 c0             	movzx  eax,al
c001a442:	5e                   	pop    esi
c001a443:	50                   	push   eax
c001a444:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a448:	50                   	push   eax
c001a449:	e8 92 f6 ff ff       	call   c0019ae0 <Vm::outbv(unsigned short, unsigned char)>
c001a44e:	83 c4 10             	add    esp,0x10
c001a451:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001a454:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001a458:	74 03                	je     c001a45d <Vm::faultHandler(regs*)+0x4d2>
c001a45a:	48                   	dec    eax
c001a45b:	eb 01                	jmp    c001a45e <Vm::faultHandler(regs*)+0x4d3>
c001a45d:	40                   	inc    eax
c001a45e:	0f b7 c0             	movzx  eax,ax
c001a461:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001a464:	e9 92 01 00 00       	jmp    c001a5fb <Vm::faultHandler(regs*)+0x670>
c001a469:	8d 46 ff             	lea    eax,[esi-0x1]
c001a46c:	3c 05                	cmp    al,0x5
c001a46e:	77 1f                	ja     c001a48f <Vm::faultHandler(regs*)+0x504>
c001a470:	0f b6 c0             	movzx  eax,al
c001a473:	ff 24 85 e4 6f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd901c]
c001a47a:	89 ef                	mov    edi,ebp
c001a47c:	eb 11                	jmp    c001a48f <Vm::faultHandler(regs*)+0x504>
c001a47e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001a481:	eb 0c                	jmp    c001a48f <Vm::faultHandler(regs*)+0x504>
c001a483:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001a486:	eb 07                	jmp    c001a48f <Vm::faultHandler(regs*)+0x504>
c001a488:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001a48b:	eb 02                	jmp    c001a48f <Vm::faultHandler(regs*)+0x504>
c001a48d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001a48f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001a492:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001a497:	74 37                	je     c001a4d0 <Vm::faultHandler(regs*)+0x545>
c001a499:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001a49f:	76 2f                	jbe    c001a4d0 <Vm::faultHandler(regs*)+0x545>
c001a4a1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a4a5:	50                   	push   eax
c001a4a6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a4aa:	50                   	push   eax
c001a4ab:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a4af:	50                   	push   eax
c001a4b0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a4b4:	50                   	push   eax
c001a4b5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a4b9:	50                   	push   eax
c001a4ba:	6a 6f                	push   0x6f
c001a4bc:	6a 6f                	push   0x6f
c001a4be:	68 72 6f 02 c0       	push   0xc0026f72
c001a4c3:	e8 97 2b ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001a4c8:	83 c4 20             	add    esp,0x20
c001a4cb:	e9 86 01 00 00       	jmp    c001a656 <Vm::faultHandler(regs*)+0x6cb>
c001a4d0:	0f b7 d7             	movzx  edx,di
c001a4d3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001a4d6:	0f b7 c6             	movzx  eax,si
c001a4d9:	81 e1 00 04 00 00    	and    ecx,0x400
c001a4df:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001a4e2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a4e7:	74 1d                	je     c001a506 <Vm::faultHandler(regs*)+0x57b>
c001a4e9:	55                   	push   ebp
c001a4ea:	55                   	push   ebp
c001a4eb:	50                   	push   eax
c001a4ec:	52                   	push   edx
c001a4ed:	e8 48 fa ff ff       	call   c0019f3a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001a4f2:	83 c4 10             	add    esp,0x10
c001a4f5:	89 fa                	mov    edx,edi
c001a4f7:	ef                   	out    dx,eax
c001a4f8:	85 c9                	test   ecx,ecx
c001a4fa:	74 05                	je     c001a501 <Vm::faultHandler(regs*)+0x576>
c001a4fc:	83 ee 04             	sub    esi,0x4
c001a4ff:	eb 21                	jmp    c001a522 <Vm::faultHandler(regs*)+0x597>
c001a501:	83 c6 04             	add    esi,0x4
c001a504:	eb 1c                	jmp    c001a522 <Vm::faultHandler(regs*)+0x597>
c001a506:	55                   	push   ebp
c001a507:	55                   	push   ebp
c001a508:	50                   	push   eax
c001a509:	52                   	push   edx
c001a50a:	e8 19 fa ff ff       	call   c0019f28 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001a50f:	83 c4 10             	add    esp,0x10
c001a512:	89 fa                	mov    edx,edi
c001a514:	66 ef                	out    dx,ax
c001a516:	85 c9                	test   ecx,ecx
c001a518:	74 05                	je     c001a51f <Vm::faultHandler(regs*)+0x594>
c001a51a:	83 ee 02             	sub    esi,0x2
c001a51d:	eb 03                	jmp    c001a522 <Vm::faultHandler(regs*)+0x597>
c001a51f:	83 c6 02             	add    esi,0x2
c001a522:	81 e6 ff ff 00 00    	and    esi,0xffff
c001a528:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001a52b:	e9 cb 00 00 00       	jmp    c001a5fb <Vm::faultHandler(regs*)+0x670>
c001a530:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a537:	83 ec 0c             	sub    esp,0xc
c001a53a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a53e:	50                   	push   eax
c001a53f:	e8 89 f5 ff ff       	call   c0019acd <Vm::inbv(unsigned short)>
c001a544:	0f b6 c0             	movzx  eax,al
c001a547:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a54a:	eb 3f                	jmp    c001a58b <Vm::faultHandler(regs*)+0x600>
c001a54c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a551:	74 07                	je     c001a55a <Vm::faultHandler(regs*)+0x5cf>
c001a553:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a557:	ed                   	in     eax,dx
c001a558:	eb 14                	jmp    c001a56e <Vm::faultHandler(regs*)+0x5e3>
c001a55a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001a55d:	66 31 f6             	xor    si,si
c001a560:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001a563:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a567:	66 ed                	in     ax,dx
c001a569:	0f b7 c0             	movzx  eax,ax
c001a56c:	09 f0                	or     eax,esi
c001a56e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a571:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a575:	e9 84 00 00 00       	jmp    c001a5fe <Vm::faultHandler(regs*)+0x673>
c001a57a:	52                   	push   edx
c001a57b:	52                   	push   edx
c001a57c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001a580:	50                   	push   eax
c001a581:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a585:	50                   	push   eax
c001a586:	e8 55 f5 ff ff       	call   c0019ae0 <Vm::outbv(unsigned short, unsigned char)>
c001a58b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a58f:	eb 53                	jmp    c001a5e4 <Vm::faultHandler(regs*)+0x659>
c001a591:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a594:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001a598:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a59d:	74 03                	je     c001a5a2 <Vm::faultHandler(regs*)+0x617>
c001a59f:	ef                   	out    dx,eax
c001a5a0:	eb cf                	jmp    c001a571 <Vm::faultHandler(regs*)+0x5e6>
c001a5a2:	66 ef                	out    dx,ax
c001a5a4:	eb cb                	jmp    c001a571 <Vm::faultHandler(regs*)+0x5e6>
c001a5a6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001a5ad:	83 ec 0c             	sub    esp,0xc
c001a5b0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001a5b4:	50                   	push   eax
c001a5b5:	e8 13 f5 ff ff       	call   c0019acd <Vm::inbv(unsigned short)>
c001a5ba:	0f b6 c0             	movzx  eax,al
c001a5bd:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001a5c0:	eb 1f                	jmp    c001a5e1 <Vm::faultHandler(regs*)+0x656>
c001a5c2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a5c5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a5ca:	74 03                	je     c001a5cf <Vm::faultHandler(regs*)+0x644>
c001a5cc:	ed                   	in     eax,dx
c001a5cd:	eb 0d                	jmp    c001a5dc <Vm::faultHandler(regs*)+0x651>
c001a5cf:	66 ed                	in     ax,dx
c001a5d1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001a5d4:	0f b7 c0             	movzx  eax,ax
c001a5d7:	66 31 d2             	xor    dx,dx
c001a5da:	09 d0                	or     eax,edx
c001a5dc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001a5df:	eb 1a                	jmp    c001a5fb <Vm::faultHandler(regs*)+0x670>
c001a5e1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a5e4:	83 c4 10             	add    esp,0x10
c001a5e7:	eb 15                	jmp    c001a5fe <Vm::faultHandler(regs*)+0x673>
c001a5e9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001a5ec:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001a5ef:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001a5f4:	74 03                	je     c001a5f9 <Vm::faultHandler(regs*)+0x66e>
c001a5f6:	ef                   	out    dx,eax
c001a5f7:	eb 02                	jmp    c001a5fb <Vm::faultHandler(regs*)+0x670>
c001a5f9:	66 ef                	out    dx,ax
c001a5fb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001a5fe:	b0 01                	mov    al,0x1
c001a600:	eb 56                	jmp    c001a658 <Vm::faultHandler(regs*)+0x6cd>
c001a602:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001a606:	50                   	push   eax
c001a607:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001a60b:	50                   	push   eax
c001a60c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001a610:	50                   	push   eax
c001a611:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001a615:	50                   	push   eax
c001a616:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001a61a:	50                   	push   eax
c001a61b:	52                   	push   edx
c001a61c:	52                   	push   edx
c001a61d:	68 9f 6f 02 c0       	push   0xc0026f9f
c001a622:	e8 38 2a ff ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001a627:	83 c4 20             	add    esp,0x20
c001a62a:	83 ec 0c             	sub    esp,0xc
c001a62d:	6a 60                	push   0x60
c001a62f:	e8 99 f4 ff ff       	call   c0019acd <Vm::inbv(unsigned short)>
c001a634:	83 c4 10             	add    esp,0x10
c001a637:	3c 1c                	cmp    al,0x1c
c001a639:	74 04                	je     c001a63f <Vm::faultHandler(regs*)+0x6b4>
c001a63b:	3c 5a                	cmp    al,0x5a
c001a63d:	75 eb                	jne    c001a62a <Vm::faultHandler(regs*)+0x69f>
c001a63f:	3c 5a                	cmp    al,0x5a
c001a641:	74 04                	je     c001a647 <Vm::faultHandler(regs*)+0x6bc>
c001a643:	3c 1c                	cmp    al,0x1c
c001a645:	75 0f                	jne    c001a656 <Vm::faultHandler(regs*)+0x6cb>
c001a647:	83 ec 0c             	sub    esp,0xc
c001a64a:	6a 60                	push   0x60
c001a64c:	e8 7c f4 ff ff       	call   c0019acd <Vm::inbv(unsigned short)>
c001a651:	83 c4 10             	add    esp,0x10
c001a654:	eb e9                	jmp    c001a63f <Vm::faultHandler(regs*)+0x6b4>
c001a656:	31 c0                	xor    eax,eax
c001a658:	83 c4 1c             	add    esp,0x1c
c001a65b:	5b                   	pop    ebx
c001a65c:	5e                   	pop    esi
c001a65d:	5f                   	pop    edi
c001a65e:	5d                   	pop    ebp
c001a65f:	c3                   	ret    

c001a660 <Vm::fpuInternalTo32(unsigned long long)>:
c001a660:	57                   	push   edi
c001a661:	56                   	push   esi
c001a662:	53                   	push   ebx
c001a663:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a667:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a66b:	89 d6                	mov    esi,edx
c001a66d:	89 d7                	mov    edi,edx
c001a66f:	89 c1                	mov    ecx,eax
c001a671:	c1 ef 14             	shr    edi,0x14
c001a674:	89 d3                	mov    ebx,edx
c001a676:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a67c:	31 d2                	xor    edx,edx
c001a67e:	89 f8                	mov    eax,edi
c001a680:	81 e6 00 00 00 80    	and    esi,0x80000000
c001a686:	bf ff 00 00 00       	mov    edi,0xff
c001a68b:	05 80 fc ff ff       	add    eax,0xfffffc80
c001a690:	83 d2 ff             	adc    edx,0xffffffff
c001a693:	39 c7                	cmp    edi,eax
c001a695:	bf 00 00 00 00       	mov    edi,0x0
c001a69a:	19 d7                	sbb    edi,edx
c001a69c:	72 16                	jb     c001a6b4 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001a69e:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001a6a2:	c1 e0 17             	shl    eax,0x17
c001a6a5:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001a6ab:	09 f1                	or     ecx,esi
c001a6ad:	09 c1                	or     ecx,eax
c001a6af:	89 cf                	mov    edi,ecx
c001a6b1:	eb 05                	jmp    c001a6b8 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c001a6b3:	90                   	nop
c001a6b4:	31 ff                	xor    edi,edi
c001a6b6:	66 90                	xchg   ax,ax
c001a6b8:	89 f8                	mov    eax,edi
c001a6ba:	5b                   	pop    ebx
c001a6bb:	5e                   	pop    esi
c001a6bc:	5f                   	pop    edi
c001a6bd:	c3                   	ret    

c001a6be <Vm::fpuInternalTo64(unsigned long long)>:
c001a6be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a6c6:	c3                   	ret    

c001a6c7 <Vm::fpu32ToInternal(unsigned int)>:
c001a6c7:	57                   	push   edi
c001a6c8:	31 ff                	xor    edi,edi
c001a6ca:	56                   	push   esi
c001a6cb:	53                   	push   ebx
c001a6cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a6d0:	89 cb                	mov    ebx,ecx
c001a6d2:	89 ce                	mov    esi,ecx
c001a6d4:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001a6da:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001a6e0:	c1 e9 17             	shr    ecx,0x17
c001a6e3:	89 f0                	mov    eax,esi
c001a6e5:	0f b6 d1             	movzx  edx,cl
c001a6e8:	81 c2 80 03 00 00    	add    edx,0x380
c001a6ee:	89 d1                	mov    ecx,edx
c001a6f0:	89 fa                	mov    edx,edi
c001a6f2:	c1 e1 14             	shl    ecx,0x14
c001a6f5:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001a6f9:	c1 e0 1d             	shl    eax,0x1d
c001a6fc:	89 d7                	mov    edi,edx
c001a6fe:	89 c6                	mov    esi,eax
c001a700:	89 ca                	mov    edx,ecx
c001a702:	89 f0                	mov    eax,esi
c001a704:	09 fa                	or     edx,edi
c001a706:	09 da                	or     edx,ebx
c001a708:	5b                   	pop    ebx
c001a709:	5e                   	pop    esi
c001a70a:	5f                   	pop    edi
c001a70b:	c3                   	ret    

c001a70c <Vm::fpu64ToInternal(unsigned long long)>:
c001a70c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a710:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a714:	c3                   	ret    

c001a715 <Vm::fpuFloatToLong(unsigned long long)>:
c001a715:	57                   	push   edi
c001a716:	31 c0                	xor    eax,eax
c001a718:	56                   	push   esi
c001a719:	31 d2                	xor    edx,edx
c001a71b:	53                   	push   ebx
c001a71c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a720:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a724:	89 d9                	mov    ecx,ebx
c001a726:	c1 e9 14             	shr    ecx,0x14
c001a729:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a72f:	89 cf                	mov    edi,ecx
c001a731:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001a737:	78 37                	js     c001a770 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a739:	89 d9                	mov    ecx,ebx
c001a73b:	89 f0                	mov    eax,esi
c001a73d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a743:	81 c9 00 00 10 00    	or     ecx,0x100000
c001a749:	89 ca                	mov    edx,ecx
c001a74b:	b9 34 00 00 00       	mov    ecx,0x34
c001a750:	29 f9                	sub    ecx,edi
c001a752:	0f ad d0             	shrd   eax,edx,cl
c001a755:	d3 fa                	sar    edx,cl
c001a757:	f6 c1 20             	test   cl,0x20
c001a75a:	74 08                	je     c001a764 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c001a75c:	89 d0                	mov    eax,edx
c001a75e:	c1 fa 1f             	sar    edx,0x1f
c001a761:	8d 76 00             	lea    esi,[esi+0x0]
c001a764:	85 db                	test   ebx,ebx
c001a766:	79 08                	jns    c001a770 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c001a768:	f7 d8                	neg    eax
c001a76a:	83 d2 00             	adc    edx,0x0
c001a76d:	f7 da                	neg    edx
c001a76f:	90                   	nop
c001a770:	5b                   	pop    ebx
c001a771:	5e                   	pop    esi
c001a772:	5f                   	pop    edi
c001a773:	c3                   	ret    

c001a774 <Vm::fpuULongToFloat(unsigned long long)>:
c001a774:	57                   	push   edi
c001a775:	31 c9                	xor    ecx,ecx
c001a777:	56                   	push   esi
c001a778:	53                   	push   ebx
c001a779:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a77d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a781:	8d 76 00             	lea    esi,[esi+0x0]
c001a784:	0f ba e7 14          	bt     edi,0x14
c001a788:	72 0a                	jb     c001a794 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c001a78a:	01 f6                	add    esi,esi
c001a78c:	11 ff                	adc    edi,edi
c001a78e:	41                   	inc    ecx
c001a78f:	eb f3                	jmp    c001a784 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c001a791:	8d 76 00             	lea    esi,[esi+0x0]
c001a794:	89 fa                	mov    edx,edi
c001a796:	89 f0                	mov    eax,esi
c001a798:	bb 33 04 00 00       	mov    ebx,0x433
c001a79d:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001a7a3:	29 cb                	sub    ebx,ecx
c001a7a5:	89 d9                	mov    ecx,ebx
c001a7a7:	5b                   	pop    ebx
c001a7a8:	c1 e1 14             	shl    ecx,0x14
c001a7ab:	5e                   	pop    esi
c001a7ac:	09 ca                	or     edx,ecx
c001a7ae:	5f                   	pop    edi
c001a7af:	c3                   	ret    

c001a7b0 <Vm::fpuLongToFloat(long long)>:
c001a7b0:	56                   	push   esi
c001a7b1:	31 c0                	xor    eax,eax
c001a7b3:	53                   	push   ebx
c001a7b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a7b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a7bc:	39 c8                	cmp    eax,ecx
c001a7be:	19 d8                	sbb    eax,ebx
c001a7c0:	7d 06                	jge    c001a7c8 <Vm::fpuLongToFloat(long long)+0x18>
c001a7c2:	31 f6                	xor    esi,esi
c001a7c4:	eb 0e                	jmp    c001a7d4 <Vm::fpuLongToFloat(long long)+0x24>
c001a7c6:	66 90                	xchg   ax,ax
c001a7c8:	f7 d9                	neg    ecx
c001a7ca:	be 01 00 00 00       	mov    esi,0x1
c001a7cf:	83 d3 00             	adc    ebx,0x0
c001a7d2:	f7 db                	neg    ebx
c001a7d4:	31 c0                	xor    eax,eax
c001a7d6:	66 90                	xchg   ax,ax
c001a7d8:	0f ba e3 14          	bt     ebx,0x14
c001a7dc:	72 0a                	jb     c001a7e8 <Vm::fpuLongToFloat(long long)+0x38>
c001a7de:	01 c9                	add    ecx,ecx
c001a7e0:	11 db                	adc    ebx,ebx
c001a7e2:	40                   	inc    eax
c001a7e3:	eb f3                	jmp    c001a7d8 <Vm::fpuLongToFloat(long long)+0x28>
c001a7e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a7e8:	ba 33 04 00 00       	mov    edx,0x433
c001a7ed:	29 c2                	sub    edx,eax
c001a7ef:	89 c8                	mov    eax,ecx
c001a7f1:	c1 e2 14             	shl    edx,0x14
c001a7f4:	89 d9                	mov    ecx,ebx
c001a7f6:	89 f3                	mov    ebx,esi
c001a7f8:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001a7fe:	09 ca                	or     edx,ecx
c001a800:	84 db                	test   bl,bl
c001a802:	74 08                	je     c001a80c <Vm::fpuLongToFloat(long long)+0x5c>
c001a804:	81 ca 00 00 00 80    	or     edx,0x80000000
c001a80a:	66 90                	xchg   ax,ax
c001a80c:	5b                   	pop    ebx
c001a80d:	5e                   	pop    esi
c001a80e:	c3                   	ret    

c001a80f <Vm::fpuGet0()>:
c001a80f:	31 c0                	xor    eax,eax
c001a811:	31 d2                	xor    edx,edx
c001a813:	c3                   	ret    

c001a814 <Vm::fpuGet1()>:
c001a814:	b8 01 00 00 00       	mov    eax,0x1
c001a819:	31 d2                	xor    edx,edx
c001a81b:	c3                   	ret    

c001a81c <Vm::fpuGetPi()>:
c001a81c:	b8 03 00 00 00       	mov    eax,0x3
c001a821:	31 d2                	xor    edx,edx
c001a823:	c3                   	ret    

c001a824 <Vm::fpuGetLog2E()>:
c001a824:	83 ec 18             	sub    esp,0x18
c001a827:	68 fc 6f 02 c0       	push   0xc0026ffc
c001a82c:	e8 00 a9 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001a831:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a836:	31 d2                	xor    edx,edx
c001a838:	83 c4 1c             	add    esp,0x1c
c001a83b:	c3                   	ret    

c001a83c <Vm::fpuGetLogE2()>:
c001a83c:	83 ec 18             	sub    esp,0x18
c001a83f:	68 08 70 02 c0       	push   0xc0027008
c001a844:	e8 e8 a8 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001a849:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a84e:	31 d2                	xor    edx,edx
c001a850:	83 c4 1c             	add    esp,0x1c
c001a853:	c3                   	ret    

c001a854 <Vm::fpuGetLog210()>:
c001a854:	83 ec 18             	sub    esp,0x18
c001a857:	68 14 70 02 c0       	push   0xc0027014
c001a85c:	e8 d0 a8 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001a861:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a866:	31 d2                	xor    edx,edx
c001a868:	83 c4 1c             	add    esp,0x1c
c001a86b:	c3                   	ret    

c001a86c <Vm::fpuGetLog102()>:
c001a86c:	83 ec 18             	sub    esp,0x18
c001a86f:	68 21 70 02 c0       	push   0xc0027021
c001a874:	e8 b8 a8 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001a879:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001a87e:	31 d2                	xor    edx,edx
c001a880:	83 c4 1c             	add    esp,0x1c
c001a883:	c3                   	ret    

c001a884 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001a884:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a888:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a88c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a890:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001a894:	0f 92 c0             	setb   al
c001a897:	c3                   	ret    

c001a898 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001a898:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8a0:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001a8a4:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001a8a8:	09 c2                	or     edx,eax
c001a8aa:	0f 94 c0             	sete   al
c001a8ad:	c3                   	ret    

c001a8ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001a8ae:	57                   	push   edi
c001a8af:	56                   	push   esi
c001a8b0:	53                   	push   ebx
c001a8b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a8b5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a8b9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a8bd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a8c1:	57                   	push   edi
c001a8c2:	56                   	push   esi
c001a8c3:	53                   	push   ebx
c001a8c4:	51                   	push   ecx
c001a8c5:	e8 ce ff ff ff       	call   c001a898 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001a8ca:	83 c4 10             	add    esp,0x10
c001a8cd:	88 c2                	mov    dl,al
c001a8cf:	31 c0                	xor    eax,eax
c001a8d1:	84 d2                	test   dl,dl
c001a8d3:	75 0f                	jne    c001a8e4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c001a8d5:	57                   	push   edi
c001a8d6:	56                   	push   esi
c001a8d7:	53                   	push   ebx
c001a8d8:	51                   	push   ecx
c001a8d9:	e8 a6 ff ff ff       	call   c001a884 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001a8de:	83 c4 10             	add    esp,0x10
c001a8e1:	8d 76 00             	lea    esi,[esi+0x0]
c001a8e4:	83 e0 01             	and    eax,0x1
c001a8e7:	5b                   	pop    ebx
c001a8e8:	88 c1                	mov    cl,al
c001a8ea:	83 e2 01             	and    edx,0x1
c001a8ed:	a0 41 a2 02 c0       	mov    al,ds:0xc002a241
c001a8f2:	c1 e2 06             	shl    edx,0x6
c001a8f5:	83 e0 ba             	and    eax,0xffffffba
c001a8f8:	5e                   	pop    esi
c001a8f9:	09 c8                	or     eax,ecx
c001a8fb:	5f                   	pop    edi
c001a8fc:	09 d0                	or     eax,edx
c001a8fe:	a2 41 a2 02 c0       	mov    ds:0xc002a241,al
c001a903:	c3                   	ret    

c001a904 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001a904:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a908:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a90c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001a910:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001a914:	c3                   	ret    

c001a915 <Vm::fpuAbs(unsigned long long)>:
c001a915:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a919:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a91d:	c3                   	ret    

c001a91e <Vm::fpuChs(unsigned long long)>:
c001a91e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a922:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a926:	f7 d8                	neg    eax
c001a928:	83 d2 00             	adc    edx,0x0
c001a92b:	f7 da                	neg    edx
c001a92d:	c3                   	ret    

c001a92e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001a92e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001a932:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001a937:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001a93b:	eb c7                	jmp    c001a904 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001a93d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001a93d:	53                   	push   ebx
c001a93e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a942:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a946:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a94a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a94e:	0f af ca             	imul   ecx,edx
c001a951:	0f af d8             	imul   ebx,eax
c001a954:	f7 e2                	mul    edx
c001a956:	01 d9                	add    ecx,ebx
c001a958:	5b                   	pop    ebx
c001a959:	01 ca                	add    edx,ecx
c001a95b:	c3                   	ret    

c001a95c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001a95c:	83 ec 0c             	sub    esp,0xc
c001a95f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a963:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a967:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a96b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a96f:	e8 1c 87 00 00       	call   c0023090 <__udivdi3>
c001a974:	83 c4 1c             	add    esp,0x1c
c001a977:	c3                   	ret    

c001a978 <Vm::fpuSquare(unsigned long long)>:
c001a978:	50                   	push   eax
c001a979:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a97d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a981:	52                   	push   edx
c001a982:	50                   	push   eax
c001a983:	52                   	push   edx
c001a984:	50                   	push   eax
c001a985:	e8 b3 ff ff ff       	call   c001a93d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a98a:	83 c4 14             	add    esp,0x14
c001a98d:	c3                   	ret    

c001a98e <Vm::fpuGetReg(int)>:
c001a98e:	83 ec 0c             	sub    esp,0xc
c001a991:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a996:	76 10                	jbe    c001a9a8 <Vm::fpuGetReg(int)+0x1a>
c001a998:	83 ec 0c             	sub    esp,0xc
c001a99b:	68 2e 70 02 c0       	push   0xc002702e
c001a9a0:	e8 8c a7 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001a9a5:	83 c4 10             	add    esp,0x10
c001a9a8:	a0 41 a2 02 c0       	mov    al,ds:0xc002a241
c001a9ad:	b9 08 00 00 00       	mov    ecx,0x8
c001a9b2:	c0 e8 03             	shr    al,0x3
c001a9b5:	83 e0 07             	and    eax,0x7
c001a9b8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a9bc:	99                   	cdq    
c001a9bd:	f7 f9                	idiv   ecx
c001a9bf:	8b 04 d5 44 a2 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd5dbc]
c001a9c6:	8b 14 d5 48 a2 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd5db8]
c001a9cd:	83 c4 0c             	add    esp,0xc
c001a9d0:	c3                   	ret    

c001a9d1 <Vm::fpuSetReg(int, unsigned long long)>:
c001a9d1:	57                   	push   edi
c001a9d2:	56                   	push   esi
c001a9d3:	52                   	push   edx
c001a9d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a9d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a9dc:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001a9e1:	76 11                	jbe    c001a9f4 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c001a9e3:	83 ec 0c             	sub    esp,0xc
c001a9e6:	68 41 70 02 c0       	push   0xc0027041
c001a9eb:	e8 41 a7 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001a9f0:	83 c4 10             	add    esp,0x10
c001a9f3:	90                   	nop
c001a9f4:	a0 41 a2 02 c0       	mov    al,ds:0xc002a241
c001a9f9:	b9 08 00 00 00       	mov    ecx,0x8
c001a9fe:	c0 e8 03             	shr    al,0x3
c001aa01:	83 e0 07             	and    eax,0x7
c001aa04:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001aa08:	99                   	cdq    
c001aa09:	f7 f9                	idiv   ecx
c001aa0b:	89 34 d5 44 a2 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5dbc],esi
c001aa12:	89 3c d5 48 a2 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5db8],edi
c001aa19:	58                   	pop    eax
c001aa1a:	5e                   	pop    esi
c001aa1b:	5f                   	pop    edi
c001aa1c:	c3                   	ret    

c001aa1d <Vm::fpuPush(unsigned long long)>:
c001aa1d:	a0 41 a2 02 c0       	mov    al,ds:0xc002a241
c001aa22:	c0 e8 03             	shr    al,0x3
c001aa25:	83 e0 07             	and    eax,0x7
c001aa28:	83 c0 07             	add    eax,0x7
c001aa2b:	88 c2                	mov    dl,al
c001aa2d:	83 e0 07             	and    eax,0x7
c001aa30:	83 e2 07             	and    edx,0x7
c001aa33:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001aa3a:	8a 15 41 a2 02 c0    	mov    dl,BYTE PTR ds:0xc002a241
c001aa40:	83 e2 c7             	and    edx,0xffffffc7
c001aa43:	09 ca                	or     edx,ecx
c001aa45:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001aa49:	88 15 41 a2 02 c0    	mov    BYTE PTR ds:0xc002a241,dl
c001aa4f:	89 0c c5 48 a2 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5db8],ecx
c001aa56:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa5a:	89 14 c5 44 a2 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5dbc],edx
c001aa61:	a1 84 a2 02 c0       	mov    eax,ds:0xc002a284
c001aa66:	83 f8 08             	cmp    eax,0x8
c001aa69:	75 09                	jne    c001aa74 <Vm::fpuPush(unsigned long long)+0x57>
c001aa6b:	80 0d 40 a2 02 c0 40 	or     BYTE PTR ds:0xc002a240,0x40
c001aa72:	c3                   	ret    
c001aa73:	90                   	nop
c001aa74:	40                   	inc    eax
c001aa75:	a3 84 a2 02 c0       	mov    ds:0xc002a284,eax
c001aa7a:	c3                   	ret    

c001aa7b <Vm::fpuPop()>:
c001aa7b:	8a 0d 41 a2 02 c0    	mov    cl,BYTE PTR ds:0xc002a241
c001aa81:	53                   	push   ebx
c001aa82:	c0 e9 03             	shr    cl,0x3
c001aa85:	8a 1d 41 a2 02 c0    	mov    bl,BYTE PTR ds:0xc002a241
c001aa8b:	83 e1 07             	and    ecx,0x7
c001aa8e:	83 e3 c7             	and    ebx,0xffffffc7
c001aa91:	8b 04 cd 44 a2 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd5dbc]
c001aa98:	8b 14 cd 48 a2 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd5db8]
c001aa9f:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001aaa6:	83 e1 38             	and    ecx,0x38
c001aaa9:	09 d9                	or     ecx,ebx
c001aaab:	88 0d 41 a2 02 c0    	mov    BYTE PTR ds:0xc002a241,cl
c001aab1:	8b 0d 84 a2 02 c0    	mov    ecx,DWORD PTR ds:0xc002a284
c001aab7:	85 c9                	test   ecx,ecx
c001aab9:	74 09                	je     c001aac4 <Vm::fpuPop()+0x49>
c001aabb:	49                   	dec    ecx
c001aabc:	89 0d 84 a2 02 c0    	mov    DWORD PTR ds:0xc002a284,ecx
c001aac2:	eb 08                	jmp    c001aacc <Vm::fpuPop()+0x51>
c001aac4:	80 0d 40 a2 02 c0 40 	or     BYTE PTR ds:0xc002a240,0x40
c001aacb:	90                   	nop
c001aacc:	5b                   	pop    ebx
c001aacd:	c3                   	ret    

c001aace <Vm::x87Handler(regs*)>:
c001aace:	55                   	push   ebp
c001aacf:	57                   	push   edi
c001aad0:	56                   	push   esi
c001aad1:	53                   	push   ebx
c001aad2:	83 ec 1c             	sub    esp,0x1c
c001aad5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aad9:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001aade:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001aae1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001aae9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001aaed:	50                   	push   eax
c001aaee:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001aaf2:	50                   	push   eax
c001aaf3:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aaf7:	50                   	push   eax
c001aaf8:	53                   	push   ebx
c001aaf9:	e8 4c 9d ff ff       	call   c001484a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001aafe:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001ab01:	83 c4 10             	add    esp,0x10
c001ab04:	89 c6                	mov    esi,eax
c001ab06:	80 fa d9             	cmp    dl,0xd9
c001ab09:	0f 85 79 01 00 00    	jne    c001ac88 <Vm::x87Handler(regs*)+0x1ba>
c001ab0f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ab13:	8d 50 20             	lea    edx,[eax+0x20]
c001ab16:	80 fa 0e             	cmp    dl,0xe
c001ab19:	0f 87 a5 00 00 00    	ja     c001abc4 <Vm::x87Handler(regs*)+0xf6>
c001ab1f:	0f b6 d2             	movzx  edx,dl
c001ab22:	ff 24 95 54 70 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd8fac]
c001ab29:	8d 76 00             	lea    esi,[esi+0x0]
c001ab2c:	e8 de fc ff ff       	call   c001a80f <Vm::fpuGet0()>
c001ab31:	eb 09                	jmp    c001ab3c <Vm::x87Handler(regs*)+0x6e>
c001ab33:	90                   	nop
c001ab34:	e8 db fc ff ff       	call   c001a814 <Vm::fpuGet1()>
c001ab39:	8d 76 00             	lea    esi,[esi+0x0]
c001ab3c:	57                   	push   edi
c001ab3d:	57                   	push   edi
c001ab3e:	66 90                	xchg   ax,ax
c001ab40:	52                   	push   edx
c001ab41:	50                   	push   eax
c001ab42:	e8 d6 fe ff ff       	call   c001aa1d <Vm::fpuPush(unsigned long long)>
c001ab47:	90                   	nop
c001ab48:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ab4c:	83 c4 10             	add    esp,0x10
c001ab4f:	90                   	nop
c001ab50:	b0 01                	mov    al,0x1
c001ab52:	e9 89 0a 00 00       	jmp    c001b5e0 <Vm::x87Handler(regs*)+0xb12>
c001ab57:	90                   	nop
c001ab58:	83 ec 0c             	sub    esp,0xc
c001ab5b:	6a 00                	push   0x0
c001ab5d:	e8 2c fe ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001ab62:	59                   	pop    ecx
c001ab63:	5e                   	pop    esi
c001ab64:	52                   	push   edx
c001ab65:	50                   	push   eax
c001ab66:	e8 b3 fd ff ff       	call   c001a91e <Vm::fpuChs(unsigned long long)>
c001ab6b:	eb 17                	jmp    c001ab84 <Vm::x87Handler(regs*)+0xb6>
c001ab6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab70:	83 ec 0c             	sub    esp,0xc
c001ab73:	6a 00                	push   0x0
c001ab75:	e8 14 fe ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001ab7a:	5f                   	pop    edi
c001ab7b:	5d                   	pop    ebp
c001ab7c:	52                   	push   edx
c001ab7d:	50                   	push   eax
c001ab7e:	e8 92 fd ff ff       	call   c001a915 <Vm::fpuAbs(unsigned long long)>
c001ab83:	90                   	nop
c001ab84:	83 c4 0c             	add    esp,0xc
c001ab87:	90                   	nop
c001ab88:	52                   	push   edx
c001ab89:	50                   	push   eax
c001ab8a:	66 90                	xchg   ax,ax
c001ab8c:	6a 00                	push   0x0
c001ab8e:	66 90                	xchg   ax,ax
c001ab90:	e8 3c fe ff ff       	call   c001a9d1 <Vm::fpuSetReg(int, unsigned long long)>
c001ab95:	eb b1                	jmp    c001ab48 <Vm::x87Handler(regs*)+0x7a>
c001ab97:	90                   	nop
c001ab98:	e8 b7 fc ff ff       	call   c001a854 <Vm::fpuGetLog210()>
c001ab9d:	eb 9d                	jmp    c001ab3c <Vm::x87Handler(regs*)+0x6e>
c001ab9f:	90                   	nop
c001aba0:	e8 7f fc ff ff       	call   c001a824 <Vm::fpuGetLog2E()>
c001aba5:	eb 95                	jmp    c001ab3c <Vm::x87Handler(regs*)+0x6e>
c001aba7:	90                   	nop
c001aba8:	e8 6f fc ff ff       	call   c001a81c <Vm::fpuGetPi()>
c001abad:	eb 8d                	jmp    c001ab3c <Vm::x87Handler(regs*)+0x6e>
c001abaf:	90                   	nop
c001abb0:	e8 b7 fc ff ff       	call   c001a86c <Vm::fpuGetLog102()>
c001abb5:	eb 85                	jmp    c001ab3c <Vm::x87Handler(regs*)+0x6e>
c001abb7:	90                   	nop
c001abb8:	e8 7f fc ff ff       	call   c001a83c <Vm::fpuGetLogE2()>
c001abbd:	e9 7a ff ff ff       	jmp    c001ab3c <Vm::x87Handler(regs*)+0x6e>
c001abc2:	66 90                	xchg   ax,ax
c001abc4:	8d 50 40             	lea    edx,[eax+0x40]
c001abc7:	80 fa 07             	cmp    dl,0x7
c001abca:	77 18                	ja     c001abe4 <Vm::x87Handler(regs*)+0x116>
c001abcc:	83 ec 0c             	sub    esp,0xc
c001abcf:	2d c0 00 00 00       	sub    eax,0xc0
c001abd4:	50                   	push   eax
c001abd5:	e8 b4 fd ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001abda:	59                   	pop    ecx
c001abdb:	5e                   	pop    esi
c001abdc:	e9 5f ff ff ff       	jmp    c001ab40 <Vm::x87Handler(regs*)+0x72>
c001abe1:	8d 76 00             	lea    esi,[esi+0x0]
c001abe4:	8d 50 38             	lea    edx,[eax+0x38]
c001abe7:	80 fa 07             	cmp    dl,0x7
c001abea:	77 3c                	ja     c001ac28 <Vm::x87Handler(regs*)+0x15a>
c001abec:	83 ec 0c             	sub    esp,0xc
c001abef:	2d c8 00 00 00       	sub    eax,0xc8
c001abf4:	50                   	push   eax
c001abf5:	e8 94 fd ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001abfa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac01:	89 c6                	mov    esi,eax
c001ac03:	89 d7                	mov    edi,edx
c001ac05:	e8 84 fd ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001ac0a:	83 c4 0c             	add    esp,0xc
c001ac0d:	52                   	push   edx
c001ac0e:	50                   	push   eax
c001ac0f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ac13:	2d c8 00 00 00       	sub    eax,0xc8
c001ac18:	50                   	push   eax
c001ac19:	e8 b3 fd ff ff       	call   c001a9d1 <Vm::fpuSetReg(int, unsigned long long)>
c001ac1e:	83 c4 0c             	add    esp,0xc
c001ac21:	57                   	push   edi
c001ac22:	56                   	push   esi
c001ac23:	e9 64 ff ff ff       	jmp    c001ab8c <Vm::x87Handler(regs*)+0xbe>
c001ac28:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ac2c:	84 d2                	test   dl,dl
c001ac2e:	75 10                	jne    c001ac40 <Vm::x87Handler(regs*)+0x172>
c001ac30:	83 ec 0c             	sub    esp,0xc
c001ac33:	ff 36                	push   DWORD PTR [esi]
c001ac35:	e8 8d fa ff ff       	call   c001a6c7 <Vm::fpu32ToInternal(unsigned int)>
c001ac3a:	e9 c9 00 00 00       	jmp    c001ad08 <Vm::x87Handler(regs*)+0x23a>
c001ac3f:	90                   	nop
c001ac40:	80 fa 03             	cmp    dl,0x3
c001ac43:	75 13                	jne    c001ac58 <Vm::x87Handler(regs*)+0x18a>
c001ac45:	e8 31 fe ff ff       	call   c001aa7b <Vm::fpuPop()>
c001ac4a:	55                   	push   ebp
c001ac4b:	55                   	push   ebp
c001ac4c:	52                   	push   edx
c001ac4d:	50                   	push   eax
c001ac4e:	e8 0d fa ff ff       	call   c001a660 <Vm::fpuInternalTo32(unsigned long long)>
c001ac53:	e9 90 00 00 00       	jmp    c001ace8 <Vm::x87Handler(regs*)+0x21a>
c001ac58:	80 fa 05             	cmp    dl,0x5
c001ac5b:	75 0f                	jne    c001ac6c <Vm::x87Handler(regs*)+0x19e>
c001ac5d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ac60:	66 a3 42 a2 02 c0    	mov    ds:0xc002a242,ax
c001ac66:	e9 ed 00 00 00       	jmp    c001ad58 <Vm::x87Handler(regs*)+0x28a>
c001ac6b:	90                   	nop
c001ac6c:	31 c0                	xor    eax,eax
c001ac6e:	80 fa 07             	cmp    dl,0x7
c001ac71:	0f 85 69 09 00 00    	jne    c001b5e0 <Vm::x87Handler(regs*)+0xb12>
c001ac77:	66 a1 42 a2 02 c0    	mov    ax,ds:0xc002a242
c001ac7d:	66 89 06             	mov    WORD PTR [esi],ax
c001ac80:	e9 d3 00 00 00       	jmp    c001ad58 <Vm::x87Handler(regs*)+0x28a>
c001ac85:	8d 76 00             	lea    esi,[esi+0x0]
c001ac88:	80 fa d8             	cmp    dl,0xd8
c001ac8b:	0f 84 d3 00 00 00    	je     c001ad64 <Vm::x87Handler(regs*)+0x296>
c001ac91:	80 fa dc             	cmp    dl,0xdc
c001ac94:	0f 84 2a 02 00 00    	je     c001aec4 <Vm::x87Handler(regs*)+0x3f6>
c001ac9a:	80 fa de             	cmp    dl,0xde
c001ac9d:	0f 84 f1 02 00 00    	je     c001af94 <Vm::x87Handler(regs*)+0x4c6>
c001aca3:	80 fa dd             	cmp    dl,0xdd
c001aca6:	0f 84 94 04 00 00    	je     c001b140 <Vm::x87Handler(regs*)+0x672>
c001acac:	80 fa da             	cmp    dl,0xda
c001acaf:	0f 84 5f 05 00 00    	je     c001b214 <Vm::x87Handler(regs*)+0x746>
c001acb5:	80 fa df             	cmp    dl,0xdf
c001acb8:	0f 84 aa 05 00 00    	je     c001b268 <Vm::x87Handler(regs*)+0x79a>
c001acbe:	31 c0                	xor    eax,eax
c001acc0:	80 fa db             	cmp    dl,0xdb
c001acc3:	0f 85 17 09 00 00    	jne    c001b5e0 <Vm::x87Handler(regs*)+0xb12>
c001acc9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001accd:	80 fa 03             	cmp    dl,0x3
c001acd0:	0f 85 c2 06 00 00    	jne    c001b398 <Vm::x87Handler(regs*)+0x8ca>
c001acd6:	e8 a0 fd ff ff       	call   c001aa7b <Vm::fpuPop()>
c001acdb:	55                   	push   ebp
c001acdc:	55                   	push   ebp
c001acdd:	8d 76 00             	lea    esi,[esi+0x0]
c001ace0:	52                   	push   edx
c001ace1:	50                   	push   eax
c001ace2:	e8 2e fa ff ff       	call   c001a715 <Vm::fpuFloatToLong(unsigned long long)>
c001ace7:	90                   	nop
c001ace8:	83 c4 10             	add    esp,0x10
c001aceb:	89 06                	mov    DWORD PTR [esi],eax
c001aced:	eb 69                	jmp    c001ad58 <Vm::x87Handler(regs*)+0x28a>
c001acef:	90                   	nop
c001acf0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001acf4:	84 d2                	test   dl,dl
c001acf6:	0f 85 2c 06 00 00    	jne    c001b328 <Vm::x87Handler(regs*)+0x85a>
c001acfc:	57                   	push   edi
c001acfd:	57                   	push   edi
c001acfe:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ad01:	ff 36                	push   DWORD PTR [esi]
c001ad03:	e8 04 fa ff ff       	call   c001a70c <Vm::fpu64ToInternal(unsigned long long)>
c001ad08:	5e                   	pop    esi
c001ad09:	5f                   	pop    edi
c001ad0a:	52                   	push   edx
c001ad0b:	50                   	push   eax
c001ad0c:	e8 0c fd ff ff       	call   c001aa1d <Vm::fpuPush(unsigned long long)>
c001ad11:	8d 76 00             	lea    esi,[esi+0x0]
c001ad14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad18:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ad1b:	e9 2c fe ff ff       	jmp    c001ab4c <Vm::x87Handler(regs*)+0x7e>
c001ad20:	80 fa 03             	cmp    dl,0x3
c001ad23:	0f 85 2b 07 00 00    	jne    c001b454 <Vm::x87Handler(regs*)+0x986>
c001ad29:	57                   	push   edi
c001ad2a:	57                   	push   edi
c001ad2b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ad2e:	ff 36                	push   DWORD PTR [esi]
c001ad30:	e8 d7 f9 ff ff       	call   c001a70c <Vm::fpu64ToInternal(unsigned long long)>
c001ad35:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad3c:	89 c6                	mov    esi,eax
c001ad3e:	89 d7                	mov    edi,edx
c001ad40:	e8 49 fc ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001ad45:	57                   	push   edi
c001ad46:	56                   	push   esi
c001ad47:	52                   	push   edx
c001ad48:	50                   	push   eax
c001ad49:	e8 60 fb ff ff       	call   c001a8ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ad4e:	83 c4 20             	add    esp,0x20
c001ad51:	e8 25 fd ff ff       	call   c001aa7b <Vm::fpuPop()>
c001ad56:	66 90                	xchg   ax,ax
c001ad58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad5c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ad5f:	e9 ec fd ff ff       	jmp    c001ab50 <Vm::x87Handler(regs*)+0x82>
c001ad64:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ad68:	8d 50 40             	lea    edx,[eax+0x40]
c001ad6b:	80 fa 07             	cmp    dl,0x7
c001ad6e:	77 2c                	ja     c001ad9c <Vm::x87Handler(regs*)+0x2ce>
c001ad70:	83 ec 0c             	sub    esp,0xc
c001ad73:	2d c0 00 00 00       	sub    eax,0xc0
c001ad78:	50                   	push   eax
c001ad79:	e8 10 fc ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001ad7e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ad85:	89 c6                	mov    esi,eax
c001ad87:	89 d7                	mov    edi,edx
c001ad89:	e8 00 fc ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001ad8e:	57                   	push   edi
c001ad8f:	56                   	push   esi
c001ad90:	52                   	push   edx
c001ad91:	50                   	push   eax
c001ad92:	e8 6d fb ff ff       	call   c001a904 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ad97:	eb 33                	jmp    c001adcc <Vm::x87Handler(regs*)+0x2fe>
c001ad99:	8d 76 00             	lea    esi,[esi+0x0]
c001ad9c:	8d 50 38             	lea    edx,[eax+0x38]
c001ad9f:	80 fa 07             	cmp    dl,0x7
c001ada2:	77 30                	ja     c001add4 <Vm::x87Handler(regs*)+0x306>
c001ada4:	83 ec 0c             	sub    esp,0xc
c001ada7:	2d c8 00 00 00       	sub    eax,0xc8
c001adac:	50                   	push   eax
c001adad:	e8 dc fb ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001adb2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001adb9:	89 c6                	mov    esi,eax
c001adbb:	89 d7                	mov    edi,edx
c001adbd:	e8 cc fb ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001adc2:	57                   	push   edi
c001adc3:	56                   	push   esi
c001adc4:	52                   	push   edx
c001adc5:	50                   	push   eax
c001adc6:	e8 72 fb ff ff       	call   c001a93d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001adcb:	90                   	nop
c001adcc:	83 c4 1c             	add    esp,0x1c
c001adcf:	e9 b4 fd ff ff       	jmp    c001ab88 <Vm::x87Handler(regs*)+0xba>
c001add4:	8d 50 30             	lea    edx,[eax+0x30]
c001add7:	80 fa 07             	cmp    dl,0x7
c001adda:	77 10                	ja     c001adec <Vm::x87Handler(regs*)+0x31e>
c001addc:	83 ec 0c             	sub    esp,0xc
c001addf:	2d d0 00 00 00       	sub    eax,0xd0
c001ade4:	e9 c3 03 00 00       	jmp    c001b1ac <Vm::x87Handler(regs*)+0x6de>
c001ade9:	8d 76 00             	lea    esi,[esi+0x0]
c001adec:	8d 50 28             	lea    edx,[eax+0x28]
c001adef:	80 fa 07             	cmp    dl,0x7
c001adf2:	77 10                	ja     c001ae04 <Vm::x87Handler(regs*)+0x336>
c001adf4:	83 ec 0c             	sub    esp,0xc
c001adf7:	2d d8 00 00 00       	sub    eax,0xd8
c001adfc:	e9 e7 03 00 00       	jmp    c001b1e8 <Vm::x87Handler(regs*)+0x71a>
c001ae01:	8d 76 00             	lea    esi,[esi+0x0]
c001ae04:	8d 50 20             	lea    edx,[eax+0x20]
c001ae07:	80 fa 07             	cmp    dl,0x7
c001ae0a:	77 1c                	ja     c001ae28 <Vm::x87Handler(regs*)+0x35a>
c001ae0c:	83 ec 0c             	sub    esp,0xc
c001ae0f:	2d e0 00 00 00       	sub    eax,0xe0
c001ae14:	50                   	push   eax
c001ae15:	e8 74 fb ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001ae1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae21:	89 c6                	mov    esi,eax
c001ae23:	89 d7                	mov    edi,edx
c001ae25:	eb 25                	jmp    c001ae4c <Vm::x87Handler(regs*)+0x37e>
c001ae27:	90                   	nop
c001ae28:	8d 50 18             	lea    edx,[eax+0x18]
c001ae2b:	80 fa 07             	cmp    dl,0x7
c001ae2e:	77 30                	ja     c001ae60 <Vm::x87Handler(regs*)+0x392>
c001ae30:	83 ec 0c             	sub    esp,0xc
c001ae33:	6a 00                	push   0x0
c001ae35:	e8 54 fb ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001ae3a:	89 c6                	mov    esi,eax
c001ae3c:	89 d7                	mov    edi,edx
c001ae3e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae42:	2d e8 00 00 00       	sub    eax,0xe8
c001ae47:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae4a:	66 90                	xchg   ax,ax
c001ae4c:	e8 3d fb ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001ae51:	57                   	push   edi
c001ae52:	56                   	push   esi
c001ae53:	52                   	push   edx
c001ae54:	50                   	push   eax
c001ae55:	e8 d4 fa ff ff       	call   c001a92e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ae5a:	e9 6d ff ff ff       	jmp    c001adcc <Vm::x87Handler(regs*)+0x2fe>
c001ae5f:	90                   	nop
c001ae60:	8d 50 10             	lea    edx,[eax+0x10]
c001ae63:	80 fa 07             	cmp    dl,0x7
c001ae66:	77 1c                	ja     c001ae84 <Vm::x87Handler(regs*)+0x3b6>
c001ae68:	83 ec 0c             	sub    esp,0xc
c001ae6b:	2d f0 00 00 00       	sub    eax,0xf0
c001ae70:	50                   	push   eax
c001ae71:	e8 18 fb ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001ae76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ae7d:	89 c6                	mov    esi,eax
c001ae7f:	89 d7                	mov    edi,edx
c001ae81:	eb 25                	jmp    c001aea8 <Vm::x87Handler(regs*)+0x3da>
c001ae83:	90                   	nop
c001ae84:	3c f7                	cmp    al,0xf7
c001ae86:	0f 86 00 04 00 00    	jbe    c001b28c <Vm::x87Handler(regs*)+0x7be>
c001ae8c:	83 ec 0c             	sub    esp,0xc
c001ae8f:	6a 00                	push   0x0
c001ae91:	e8 f8 fa ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001ae96:	89 c6                	mov    esi,eax
c001ae98:	89 d7                	mov    edi,edx
c001ae9a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ae9e:	2d f8 00 00 00       	sub    eax,0xf8
c001aea3:	89 04 24             	mov    DWORD PTR [esp],eax
c001aea6:	66 90                	xchg   ax,ax
c001aea8:	e8 e1 fa ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001aead:	57                   	push   edi
c001aeae:	56                   	push   esi
c001aeaf:	52                   	push   edx
c001aeb0:	50                   	push   eax
c001aeb1:	e8 a6 fa ff ff       	call   c001a95c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001aeb6:	83 c4 1c             	add    esp,0x1c
c001aeb9:	52                   	push   edx
c001aeba:	50                   	push   eax
c001aebb:	6a 00                	push   0x0
c001aebd:	e9 6a 02 00 00       	jmp    c001b12c <Vm::x87Handler(regs*)+0x65e>
c001aec2:	66 90                	xchg   ax,ax
c001aec4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001aec8:	8d 50 40             	lea    edx,[eax+0x40]
c001aecb:	80 fa 07             	cmp    dl,0x7
c001aece:	77 38                	ja     c001af08 <Vm::x87Handler(regs*)+0x43a>
c001aed0:	83 ec 0c             	sub    esp,0xc
c001aed3:	2d c0 00 00 00       	sub    eax,0xc0
c001aed8:	50                   	push   eax
c001aed9:	e8 b0 fa ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001aede:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aee5:	89 c6                	mov    esi,eax
c001aee7:	89 d7                	mov    edi,edx
c001aee9:	e8 a0 fa ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001aeee:	57                   	push   edi
c001aeef:	56                   	push   esi
c001aef0:	52                   	push   edx
c001aef1:	50                   	push   eax
c001aef2:	e8 0d fa ff ff       	call   c001a904 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001aef7:	83 c4 1c             	add    esp,0x1c
c001aefa:	52                   	push   edx
c001aefb:	50                   	push   eax
c001aefc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af00:	2d c0 00 00 00       	sub    eax,0xc0
c001af05:	eb 41                	jmp    c001af48 <Vm::x87Handler(regs*)+0x47a>
c001af07:	90                   	nop
c001af08:	8d 50 38             	lea    edx,[eax+0x38]
c001af0b:	80 fa 07             	cmp    dl,0x7
c001af0e:	77 40                	ja     c001af50 <Vm::x87Handler(regs*)+0x482>
c001af10:	83 ec 0c             	sub    esp,0xc
c001af13:	2d c8 00 00 00       	sub    eax,0xc8
c001af18:	50                   	push   eax
c001af19:	e8 70 fa ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001af1e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001af25:	89 c6                	mov    esi,eax
c001af27:	89 d7                	mov    edi,edx
c001af29:	e8 60 fa ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001af2e:	57                   	push   edi
c001af2f:	56                   	push   esi
c001af30:	52                   	push   edx
c001af31:	50                   	push   eax
c001af32:	e8 06 fa ff ff       	call   c001a93d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001af37:	83 c4 1c             	add    esp,0x1c
c001af3a:	52                   	push   edx
c001af3b:	50                   	push   eax
c001af3c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af40:	2d c8 00 00 00       	sub    eax,0xc8
c001af45:	8d 76 00             	lea    esi,[esi+0x0]
c001af48:	50                   	push   eax
c001af49:	e9 42 fc ff ff       	jmp    c001ab90 <Vm::x87Handler(regs*)+0xc2>
c001af4e:	66 90                	xchg   ax,ax
c001af50:	83 c0 18             	add    eax,0x18
c001af53:	3c 07                	cmp    al,0x7
c001af55:	0f 87 6d 04 00 00    	ja     c001b3c8 <Vm::x87Handler(regs*)+0x8fa>
c001af5b:	83 ec 0c             	sub    esp,0xc
c001af5e:	6a 00                	push   0x0
c001af60:	e8 29 fa ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001af65:	89 c6                	mov    esi,eax
c001af67:	89 d7                	mov    edi,edx
c001af69:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af6d:	2d e8 00 00 00       	sub    eax,0xe8
c001af72:	89 04 24             	mov    DWORD PTR [esp],eax
c001af75:	e8 14 fa ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001af7a:	57                   	push   edi
c001af7b:	56                   	push   esi
c001af7c:	52                   	push   edx
c001af7d:	50                   	push   eax
c001af7e:	e8 ab f9 ff ff       	call   c001a92e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001af83:	83 c4 1c             	add    esp,0x1c
c001af86:	52                   	push   edx
c001af87:	50                   	push   eax
c001af88:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af8c:	2d e8 00 00 00       	sub    eax,0xe8
c001af91:	eb b5                	jmp    c001af48 <Vm::x87Handler(regs*)+0x47a>
c001af93:	90                   	nop
c001af94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001af98:	8d 50 40             	lea    edx,[eax+0x40]
c001af9b:	80 fa 07             	cmp    dl,0x7
c001af9e:	77 3c                	ja     c001afdc <Vm::x87Handler(regs*)+0x50e>
c001afa0:	83 ec 0c             	sub    esp,0xc
c001afa3:	2d c0 00 00 00       	sub    eax,0xc0
c001afa8:	50                   	push   eax
c001afa9:	e8 e0 f9 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001afae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001afb5:	89 c6                	mov    esi,eax
c001afb7:	89 d7                	mov    edi,edx
c001afb9:	e8 d0 f9 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001afbe:	57                   	push   edi
c001afbf:	56                   	push   esi
c001afc0:	52                   	push   edx
c001afc1:	50                   	push   eax
c001afc2:	e8 3d f9 ff ff       	call   c001a904 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001afc7:	83 c4 1c             	add    esp,0x1c
c001afca:	52                   	push   edx
c001afcb:	50                   	push   eax
c001afcc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001afd0:	2d c0 00 00 00       	sub    eax,0xc0
c001afd5:	e9 b2 01 00 00       	jmp    c001b18c <Vm::x87Handler(regs*)+0x6be>
c001afda:	66 90                	xchg   ax,ax
c001afdc:	8d 50 20             	lea    edx,[eax+0x20]
c001afdf:	80 fa 07             	cmp    dl,0x7
c001afe2:	77 3c                	ja     c001b020 <Vm::x87Handler(regs*)+0x552>
c001afe4:	83 ec 0c             	sub    esp,0xc
c001afe7:	2d e0 00 00 00       	sub    eax,0xe0
c001afec:	50                   	push   eax
c001afed:	e8 9c f9 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001aff2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aff9:	89 c6                	mov    esi,eax
c001affb:	89 d7                	mov    edi,edx
c001affd:	e8 8c f9 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b002:	57                   	push   edi
c001b003:	56                   	push   esi
c001b004:	52                   	push   edx
c001b005:	50                   	push   eax
c001b006:	e8 23 f9 ff ff       	call   c001a92e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b00b:	83 c4 1c             	add    esp,0x1c
c001b00e:	52                   	push   edx
c001b00f:	50                   	push   eax
c001b010:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b014:	2d e0 00 00 00       	sub    eax,0xe0
c001b019:	e9 6e 01 00 00       	jmp    c001b18c <Vm::x87Handler(regs*)+0x6be>
c001b01e:	66 90                	xchg   ax,ax
c001b020:	8d 50 18             	lea    edx,[eax+0x18]
c001b023:	80 fa 07             	cmp    dl,0x7
c001b026:	77 3c                	ja     c001b064 <Vm::x87Handler(regs*)+0x596>
c001b028:	83 ec 0c             	sub    esp,0xc
c001b02b:	6a 00                	push   0x0
c001b02d:	e8 5c f9 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b032:	89 c6                	mov    esi,eax
c001b034:	89 d7                	mov    edi,edx
c001b036:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b03a:	2d e8 00 00 00       	sub    eax,0xe8
c001b03f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b042:	e8 47 f9 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b047:	57                   	push   edi
c001b048:	56                   	push   esi
c001b049:	52                   	push   edx
c001b04a:	50                   	push   eax
c001b04b:	e8 de f8 ff ff       	call   c001a92e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b050:	83 c4 1c             	add    esp,0x1c
c001b053:	52                   	push   edx
c001b054:	50                   	push   eax
c001b055:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b059:	2d e8 00 00 00       	sub    eax,0xe8
c001b05e:	e9 29 01 00 00       	jmp    c001b18c <Vm::x87Handler(regs*)+0x6be>
c001b063:	90                   	nop
c001b064:	8d 50 38             	lea    edx,[eax+0x38]
c001b067:	80 fa 07             	cmp    dl,0x7
c001b06a:	77 3c                	ja     c001b0a8 <Vm::x87Handler(regs*)+0x5da>
c001b06c:	83 ec 0c             	sub    esp,0xc
c001b06f:	2d c8 00 00 00       	sub    eax,0xc8
c001b074:	50                   	push   eax
c001b075:	e8 14 f9 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b07a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b081:	89 c6                	mov    esi,eax
c001b083:	89 d7                	mov    edi,edx
c001b085:	e8 04 f9 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b08a:	57                   	push   edi
c001b08b:	56                   	push   esi
c001b08c:	52                   	push   edx
c001b08d:	50                   	push   eax
c001b08e:	e8 aa f8 ff ff       	call   c001a93d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001b093:	83 c4 1c             	add    esp,0x1c
c001b096:	52                   	push   edx
c001b097:	50                   	push   eax
c001b098:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b09c:	2d c8 00 00 00       	sub    eax,0xc8
c001b0a1:	e9 82 00 00 00       	jmp    c001b128 <Vm::x87Handler(regs*)+0x65a>
c001b0a6:	66 90                	xchg   ax,ax
c001b0a8:	3c f7                	cmp    al,0xf7
c001b0aa:	76 38                	jbe    c001b0e4 <Vm::x87Handler(regs*)+0x616>
c001b0ac:	83 ec 0c             	sub    esp,0xc
c001b0af:	6a 00                	push   0x0
c001b0b1:	e8 d8 f8 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b0b6:	89 c6                	mov    esi,eax
c001b0b8:	89 d7                	mov    edi,edx
c001b0ba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b0be:	2d f8 00 00 00       	sub    eax,0xf8
c001b0c3:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0c6:	e8 c3 f8 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b0cb:	57                   	push   edi
c001b0cc:	56                   	push   esi
c001b0cd:	52                   	push   edx
c001b0ce:	50                   	push   eax
c001b0cf:	e8 88 f8 ff ff       	call   c001a95c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b0d4:	83 c4 1c             	add    esp,0x1c
c001b0d7:	52                   	push   edx
c001b0d8:	50                   	push   eax
c001b0d9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b0dd:	2d f8 00 00 00       	sub    eax,0xf8
c001b0e2:	eb 44                	jmp    c001b128 <Vm::x87Handler(regs*)+0x65a>
c001b0e4:	8d 50 10             	lea    edx,[eax+0x10]
c001b0e7:	80 fa 07             	cmp    dl,0x7
c001b0ea:	0f 87 6c 01 00 00    	ja     c001b25c <Vm::x87Handler(regs*)+0x78e>
c001b0f0:	83 ec 0c             	sub    esp,0xc
c001b0f3:	2d f0 00 00 00       	sub    eax,0xf0
c001b0f8:	50                   	push   eax
c001b0f9:	e8 90 f8 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b0fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b105:	89 c6                	mov    esi,eax
c001b107:	89 d7                	mov    edi,edx
c001b109:	e8 80 f8 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b10e:	57                   	push   edi
c001b10f:	56                   	push   esi
c001b110:	52                   	push   edx
c001b111:	50                   	push   eax
c001b112:	e8 45 f8 ff ff       	call   c001a95c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b117:	83 c4 1c             	add    esp,0x1c
c001b11a:	52                   	push   edx
c001b11b:	50                   	push   eax
c001b11c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b120:	2d f0 00 00 00       	sub    eax,0xf0
c001b125:	8d 76 00             	lea    esi,[esi+0x0]
c001b128:	50                   	push   eax
c001b129:	8d 76 00             	lea    esi,[esi+0x0]
c001b12c:	e8 a0 f8 ff ff       	call   c001a9d1 <Vm::fpuSetReg(int, unsigned long long)>
c001b131:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b135:	e8 41 f9 ff ff       	call   c001aa7b <Vm::fpuPop()>
c001b13a:	e9 0d fa ff ff       	jmp    c001ab4c <Vm::x87Handler(regs*)+0x7e>
c001b13f:	90                   	nop
c001b140:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b144:	8d 50 30             	lea    edx,[eax+0x30]
c001b147:	80 fa 07             	cmp    dl,0x7
c001b14a:	77 20                	ja     c001b16c <Vm::x87Handler(regs*)+0x69e>
c001b14c:	83 ec 0c             	sub    esp,0xc
c001b14f:	6a 00                	push   0x0
c001b151:	e8 38 f8 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b156:	83 c4 0c             	add    esp,0xc
c001b159:	52                   	push   edx
c001b15a:	50                   	push   eax
c001b15b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b15f:	2d d0 00 00 00       	sub    eax,0xd0
c001b164:	e9 df fd ff ff       	jmp    c001af48 <Vm::x87Handler(regs*)+0x47a>
c001b169:	8d 76 00             	lea    esi,[esi+0x0]
c001b16c:	8d 50 28             	lea    edx,[eax+0x28]
c001b16f:	80 fa 07             	cmp    dl,0x7
c001b172:	77 28                	ja     c001b19c <Vm::x87Handler(regs*)+0x6ce>
c001b174:	83 ec 0c             	sub    esp,0xc
c001b177:	6a 00                	push   0x0
c001b179:	e8 10 f8 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b17e:	83 c4 0c             	add    esp,0xc
c001b181:	52                   	push   edx
c001b182:	50                   	push   eax
c001b183:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001b187:	2d d8 00 00 00       	sub    eax,0xd8
c001b18c:	50                   	push   eax
c001b18d:	e8 3f f8 ff ff       	call   c001a9d1 <Vm::fpuSetReg(int, unsigned long long)>
c001b192:	e8 e4 f8 ff ff       	call   c001aa7b <Vm::fpuPop()>
c001b197:	e9 ac f9 ff ff       	jmp    c001ab48 <Vm::x87Handler(regs*)+0x7a>
c001b19c:	8d 50 20             	lea    edx,[eax+0x20]
c001b19f:	80 fa 07             	cmp    dl,0x7
c001b1a2:	77 30                	ja     c001b1d4 <Vm::x87Handler(regs*)+0x706>
c001b1a4:	83 ec 0c             	sub    esp,0xc
c001b1a7:	2d e0 00 00 00       	sub    eax,0xe0
c001b1ac:	50                   	push   eax
c001b1ad:	e8 dc f7 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b1b2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b1b9:	89 c6                	mov    esi,eax
c001b1bb:	89 d7                	mov    edi,edx
c001b1bd:	e8 cc f7 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b1c2:	57                   	push   edi
c001b1c3:	56                   	push   esi
c001b1c4:	52                   	push   edx
c001b1c5:	50                   	push   eax
c001b1c6:	e8 e3 f6 ff ff       	call   c001a8ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b1cb:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b1cf:	e9 78 02 00 00       	jmp    c001b44c <Vm::x87Handler(regs*)+0x97e>
c001b1d4:	8d 50 18             	lea    edx,[eax+0x18]
c001b1d7:	80 fa 07             	cmp    dl,0x7
c001b1da:	0f 87 10 fb ff ff    	ja     c001acf0 <Vm::x87Handler(regs*)+0x222>
c001b1e0:	83 ec 0c             	sub    esp,0xc
c001b1e3:	2d e8 00 00 00       	sub    eax,0xe8
c001b1e8:	50                   	push   eax
c001b1e9:	e8 a0 f7 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b1ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b1f5:	89 c6                	mov    esi,eax
c001b1f7:	89 d7                	mov    edi,edx
c001b1f9:	e8 90 f7 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b1fe:	57                   	push   edi
c001b1ff:	56                   	push   esi
c001b200:	52                   	push   edx
c001b201:	50                   	push   eax
c001b202:	e8 a7 f6 ff ff       	call   c001a8ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b207:	83 c4 20             	add    esp,0x20
c001b20a:	e8 6c f8 ff ff       	call   c001aa7b <Vm::fpuPop()>
c001b20f:	eb 6f                	jmp    c001b280 <Vm::x87Handler(regs*)+0x7b2>
c001b211:	8d 76 00             	lea    esi,[esi+0x0]
c001b214:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001b218:	0f 85 22 01 00 00    	jne    c001b340 <Vm::x87Handler(regs*)+0x872>
c001b21e:	66 90                	xchg   ax,ax
c001b220:	83 ec 0c             	sub    esp,0xc
c001b223:	6a 01                	push   0x1
c001b225:	e8 64 f7 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b22a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b231:	89 c6                	mov    esi,eax
c001b233:	89 d7                	mov    edi,edx
c001b235:	e8 54 f7 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b23a:	57                   	push   edi
c001b23b:	56                   	push   esi
c001b23c:	52                   	push   edx
c001b23d:	50                   	push   eax
c001b23e:	e8 6b f6 ff ff       	call   c001a8ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b243:	83 c4 20             	add    esp,0x20
c001b246:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b24a:	e8 2c f8 ff ff       	call   c001aa7b <Vm::fpuPop()>
c001b24f:	e8 27 f8 ff ff       	call   c001aa7b <Vm::fpuPop()>
c001b254:	e9 f7 f8 ff ff       	jmp    c001ab50 <Vm::x87Handler(regs*)+0x82>
c001b259:	8d 76 00             	lea    esi,[esi+0x0]
c001b25c:	3c d9                	cmp    al,0xd9
c001b25e:	0f 85 e8 02 00 00    	jne    c001b54c <Vm::x87Handler(regs*)+0xa7e>
c001b264:	eb ba                	jmp    c001b220 <Vm::x87Handler(regs*)+0x752>
c001b266:	66 90                	xchg   ax,ax
c001b268:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001b26c:	0f 85 2a 03 00 00    	jne    c001b59c <Vm::x87Handler(regs*)+0xace>
c001b272:	0f b7 05 40 a2 02 c0 	movzx  eax,WORD PTR ds:0xc002a240
c001b279:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001b27d:	8d 76 00             	lea    esi,[esi+0x0]
c001b280:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001b284:	e9 c7 f8 ff ff       	jmp    c001ab50 <Vm::x87Handler(regs*)+0x82>
c001b289:	8d 76 00             	lea    esi,[esi+0x0]
c001b28c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b290:	84 d2                	test   dl,dl
c001b292:	75 10                	jne    c001b2a4 <Vm::x87Handler(regs*)+0x7d6>
c001b294:	83 ec 0c             	sub    esp,0xc
c001b297:	ff 36                	push   DWORD PTR [esi]
c001b299:	e8 29 f4 ff ff       	call   c001a6c7 <Vm::fpu32ToInternal(unsigned int)>
c001b29e:	e9 39 01 00 00       	jmp    c001b3dc <Vm::x87Handler(regs*)+0x90e>
c001b2a3:	90                   	nop
c001b2a4:	80 fa 01             	cmp    dl,0x1
c001b2a7:	75 0f                	jne    c001b2b8 <Vm::x87Handler(regs*)+0x7ea>
c001b2a9:	83 ec 0c             	sub    esp,0xc
c001b2ac:	ff 36                	push   DWORD PTR [esi]
c001b2ae:	e8 14 f4 ff ff       	call   c001a6c7 <Vm::fpu32ToInternal(unsigned int)>
c001b2b3:	e9 b4 02 00 00       	jmp    c001b56c <Vm::x87Handler(regs*)+0xa9e>
c001b2b8:	80 fa 04             	cmp    dl,0x4
c001b2bb:	75 0f                	jne    c001b2cc <Vm::x87Handler(regs*)+0x7fe>
c001b2bd:	83 ec 0c             	sub    esp,0xc
c001b2c0:	ff 36                	push   DWORD PTR [esi]
c001b2c2:	e8 00 f4 ff ff       	call   c001a6c7 <Vm::fpu32ToInternal(unsigned int)>
c001b2c7:	e9 9c 01 00 00       	jmp    c001b468 <Vm::x87Handler(regs*)+0x99a>
c001b2cc:	80 fa 05             	cmp    dl,0x5
c001b2cf:	75 1b                	jne    c001b2ec <Vm::x87Handler(regs*)+0x81e>
c001b2d1:	83 ec 0c             	sub    esp,0xc
c001b2d4:	6a 00                	push   0x0
c001b2d6:	e8 b3 f6 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b2db:	89 c7                	mov    edi,eax
c001b2dd:	89 d5                	mov    ebp,edx
c001b2df:	58                   	pop    eax
c001b2e0:	ff 36                	push   DWORD PTR [esi]
c001b2e2:	e8 e0 f3 ff ff       	call   c001a6c7 <Vm::fpu32ToInternal(unsigned int)>
c001b2e7:	e9 bc 01 00 00       	jmp    c001b4a8 <Vm::x87Handler(regs*)+0x9da>
c001b2ec:	80 fa 06             	cmp    dl,0x6
c001b2ef:	75 0f                	jne    c001b300 <Vm::x87Handler(regs*)+0x832>
c001b2f1:	83 ec 0c             	sub    esp,0xc
c001b2f4:	ff 36                	push   DWORD PTR [esi]
c001b2f6:	e8 cc f3 ff ff       	call   c001a6c7 <Vm::fpu32ToInternal(unsigned int)>
c001b2fb:	e9 cc 01 00 00       	jmp    c001b4cc <Vm::x87Handler(regs*)+0x9fe>
c001b300:	31 c0                	xor    eax,eax
c001b302:	80 fa 07             	cmp    dl,0x7
c001b305:	0f 85 d5 02 00 00    	jne    c001b5e0 <Vm::x87Handler(regs*)+0xb12>
c001b30b:	83 ec 0c             	sub    esp,0xc
c001b30e:	6a 00                	push   0x0
c001b310:	e8 79 f6 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b315:	89 c7                	mov    edi,eax
c001b317:	89 d5                	mov    ebp,edx
c001b319:	58                   	pop    eax
c001b31a:	ff 36                	push   DWORD PTR [esi]
c001b31c:	e8 a6 f3 ff ff       	call   c001a6c7 <Vm::fpu32ToInternal(unsigned int)>
c001b321:	e9 ee 01 00 00       	jmp    c001b514 <Vm::x87Handler(regs*)+0xa46>
c001b326:	66 90                	xchg   ax,ax
c001b328:	80 fa 03             	cmp    dl,0x3
c001b32b:	0f 85 f7 01 00 00    	jne    c001b528 <Vm::x87Handler(regs*)+0xa5a>
c001b331:	e8 45 f7 ff ff       	call   c001aa7b <Vm::fpuPop()>
c001b336:	51                   	push   ecx
c001b337:	51                   	push   ecx
c001b338:	e9 03 02 00 00       	jmp    c001b540 <Vm::x87Handler(regs*)+0xa72>
c001b33d:	8d 76 00             	lea    esi,[esi+0x0]
c001b340:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b344:	80 fa 01             	cmp    dl,0x1
c001b347:	75 0b                	jne    c001b354 <Vm::x87Handler(regs*)+0x886>
c001b349:	57                   	push   edi
c001b34a:	57                   	push   edi
c001b34b:	8b 06                	mov    eax,DWORD PTR [esi]
c001b34d:	e9 0e 02 00 00       	jmp    c001b560 <Vm::x87Handler(regs*)+0xa92>
c001b352:	66 90                	xchg   ax,ax
c001b354:	80 fa 04             	cmp    dl,0x4
c001b357:	75 13                	jne    c001b36c <Vm::x87Handler(regs*)+0x89e>
c001b359:	31 d2                	xor    edx,edx
c001b35b:	51                   	push   ecx
c001b35c:	51                   	push   ecx
c001b35d:	8b 06                	mov    eax,DWORD PTR [esi]
c001b35f:	52                   	push   edx
c001b360:	50                   	push   eax
c001b361:	e8 4a f4 ff ff       	call   c001a7b0 <Vm::fpuLongToFloat(long long)>
c001b366:	e9 fd 00 00 00       	jmp    c001b468 <Vm::x87Handler(regs*)+0x99a>
c001b36b:	90                   	nop
c001b36c:	31 c0                	xor    eax,eax
c001b36e:	80 fa 07             	cmp    dl,0x7
c001b371:	0f 85 69 02 00 00    	jne    c001b5e0 <Vm::x87Handler(regs*)+0xb12>
c001b377:	83 ec 0c             	sub    esp,0xc
c001b37a:	6a 00                	push   0x0
c001b37c:	e8 0d f6 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b381:	89 c7                	mov    edi,eax
c001b383:	89 d5                	mov    ebp,edx
c001b385:	58                   	pop    eax
c001b386:	8b 06                	mov    eax,DWORD PTR [esi]
c001b388:	5a                   	pop    edx
c001b389:	31 d2                	xor    edx,edx
c001b38b:	52                   	push   edx
c001b38c:	50                   	push   eax
c001b38d:	e8 1e f4 ff ff       	call   c001a7b0 <Vm::fpuLongToFloat(long long)>
c001b392:	e9 7d 01 00 00       	jmp    c001b514 <Vm::x87Handler(regs*)+0xa46>
c001b397:	90                   	nop
c001b398:	84 d2                	test   dl,dl
c001b39a:	75 10                	jne    c001b3ac <Vm::x87Handler(regs*)+0x8de>
c001b39c:	31 d2                	xor    edx,edx
c001b39e:	55                   	push   ebp
c001b39f:	55                   	push   ebp
c001b3a0:	8b 06                	mov    eax,DWORD PTR [esi]
c001b3a2:	52                   	push   edx
c001b3a3:	50                   	push   eax
c001b3a4:	e9 03 02 00 00       	jmp    c001b5ac <Vm::x87Handler(regs*)+0xade>
c001b3a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b3ac:	31 c0                	xor    eax,eax
c001b3ae:	80 fa 02             	cmp    dl,0x2
c001b3b1:	0f 85 29 02 00 00    	jne    c001b5e0 <Vm::x87Handler(regs*)+0xb12>
c001b3b7:	83 ec 0c             	sub    esp,0xc
c001b3ba:	6a 00                	push   0x0
c001b3bc:	e8 cd f5 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b3c1:	59                   	pop    ecx
c001b3c2:	5f                   	pop    edi
c001b3c3:	e9 18 f9 ff ff       	jmp    c001ace0 <Vm::x87Handler(regs*)+0x212>
c001b3c8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b3cc:	84 d2                	test   dl,dl
c001b3ce:	75 2c                	jne    c001b3fc <Vm::x87Handler(regs*)+0x92e>
c001b3d0:	50                   	push   eax
c001b3d1:	50                   	push   eax
c001b3d2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b3d5:	ff 36                	push   DWORD PTR [esi]
c001b3d7:	e8 30 f3 ff ff       	call   c001a70c <Vm::fpu64ToInternal(unsigned long long)>
c001b3dc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b3e3:	89 c6                	mov    esi,eax
c001b3e5:	89 d7                	mov    edi,edx
c001b3e7:	e8 a2 f5 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b3ec:	57                   	push   edi
c001b3ed:	56                   	push   esi
c001b3ee:	52                   	push   edx
c001b3ef:	50                   	push   eax
c001b3f0:	e8 0f f5 ff ff       	call   c001a904 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001b3f5:	e9 8e 01 00 00       	jmp    c001b588 <Vm::x87Handler(regs*)+0xaba>
c001b3fa:	66 90                	xchg   ax,ax
c001b3fc:	80 fa 01             	cmp    dl,0x1
c001b3ff:	75 13                	jne    c001b414 <Vm::x87Handler(regs*)+0x946>
c001b401:	50                   	push   eax
c001b402:	50                   	push   eax
c001b403:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b406:	ff 36                	push   DWORD PTR [esi]
c001b408:	e8 ff f2 ff ff       	call   c001a70c <Vm::fpu64ToInternal(unsigned long long)>
c001b40d:	e9 5a 01 00 00       	jmp    c001b56c <Vm::x87Handler(regs*)+0xa9e>
c001b412:	66 90                	xchg   ax,ax
c001b414:	80 fa 02             	cmp    dl,0x2
c001b417:	0f 85 03 f9 ff ff    	jne    c001ad20 <Vm::x87Handler(regs*)+0x252>
c001b41d:	55                   	push   ebp
c001b41e:	55                   	push   ebp
c001b41f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b422:	ff 36                	push   DWORD PTR [esi]
c001b424:	e8 e3 f2 ff ff       	call   c001a70c <Vm::fpu64ToInternal(unsigned long long)>
c001b429:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b430:	89 c6                	mov    esi,eax
c001b432:	89 d7                	mov    edi,edx
c001b434:	e8 55 f5 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b439:	57                   	push   edi
c001b43a:	56                   	push   esi
c001b43b:	52                   	push   edx
c001b43c:	50                   	push   eax
c001b43d:	e8 6c f4 ff ff       	call   c001a8ae <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001b442:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b446:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001b449:	8d 76 00             	lea    esi,[esi+0x0]
c001b44c:	83 c4 20             	add    esp,0x20
c001b44f:	e9 fc f6 ff ff       	jmp    c001ab50 <Vm::x87Handler(regs*)+0x82>
c001b454:	80 fa 04             	cmp    dl,0x4
c001b457:	75 2f                	jne    c001b488 <Vm::x87Handler(regs*)+0x9ba>
c001b459:	51                   	push   ecx
c001b45a:	51                   	push   ecx
c001b45b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b45e:	ff 36                	push   DWORD PTR [esi]
c001b460:	e8 a7 f2 ff ff       	call   c001a70c <Vm::fpu64ToInternal(unsigned long long)>
c001b465:	8d 76 00             	lea    esi,[esi+0x0]
c001b468:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b46f:	89 c6                	mov    esi,eax
c001b471:	89 d7                	mov    edi,edx
c001b473:	e8 16 f5 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b478:	57                   	push   edi
c001b479:	56                   	push   esi
c001b47a:	52                   	push   edx
c001b47b:	50                   	push   eax
c001b47c:	e8 ad f4 ff ff       	call   c001a92e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b481:	e9 02 01 00 00       	jmp    c001b588 <Vm::x87Handler(regs*)+0xaba>
c001b486:	66 90                	xchg   ax,ax
c001b488:	80 fa 05             	cmp    dl,0x5
c001b48b:	75 2b                	jne    c001b4b8 <Vm::x87Handler(regs*)+0x9ea>
c001b48d:	83 ec 0c             	sub    esp,0xc
c001b490:	6a 00                	push   0x0
c001b492:	e8 f7 f4 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b497:	89 c7                	mov    edi,eax
c001b499:	89 d5                	mov    ebp,edx
c001b49b:	58                   	pop    eax
c001b49c:	5a                   	pop    edx
c001b49d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b4a0:	ff 36                	push   DWORD PTR [esi]
c001b4a2:	e8 65 f2 ff ff       	call   c001a70c <Vm::fpu64ToInternal(unsigned long long)>
c001b4a7:	90                   	nop
c001b4a8:	83 c4 10             	add    esp,0x10
c001b4ab:	55                   	push   ebp
c001b4ac:	57                   	push   edi
c001b4ad:	52                   	push   edx
c001b4ae:	50                   	push   eax
c001b4af:	e8 7a f4 ff ff       	call   c001a92e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001b4b4:	eb 6a                	jmp    c001b520 <Vm::x87Handler(regs*)+0xa52>
c001b4b6:	66 90                	xchg   ax,ax
c001b4b8:	80 fa 06             	cmp    dl,0x6
c001b4bb:	75 2f                	jne    c001b4ec <Vm::x87Handler(regs*)+0xa1e>
c001b4bd:	51                   	push   ecx
c001b4be:	51                   	push   ecx
c001b4bf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b4c2:	ff 36                	push   DWORD PTR [esi]
c001b4c4:	e8 43 f2 ff ff       	call   c001a70c <Vm::fpu64ToInternal(unsigned long long)>
c001b4c9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4cc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b4d3:	89 c6                	mov    esi,eax
c001b4d5:	89 d7                	mov    edi,edx
c001b4d7:	e8 b2 f4 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b4dc:	57                   	push   edi
c001b4dd:	56                   	push   esi
c001b4de:	52                   	push   edx
c001b4df:	50                   	push   eax
c001b4e0:	e8 77 f4 ff ff       	call   c001a95c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b4e5:	e9 9e 00 00 00       	jmp    c001b588 <Vm::x87Handler(regs*)+0xaba>
c001b4ea:	66 90                	xchg   ax,ax
c001b4ec:	31 c0                	xor    eax,eax
c001b4ee:	80 fa 07             	cmp    dl,0x7
c001b4f1:	0f 85 e9 00 00 00    	jne    c001b5e0 <Vm::x87Handler(regs*)+0xb12>
c001b4f7:	83 ec 0c             	sub    esp,0xc
c001b4fa:	6a 00                	push   0x0
c001b4fc:	e8 8d f4 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b501:	89 c7                	mov    edi,eax
c001b503:	89 d5                	mov    ebp,edx
c001b505:	58                   	pop    eax
c001b506:	5a                   	pop    edx
c001b507:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b50a:	ff 36                	push   DWORD PTR [esi]
c001b50c:	e8 fb f1 ff ff       	call   c001a70c <Vm::fpu64ToInternal(unsigned long long)>
c001b511:	8d 76 00             	lea    esi,[esi+0x0]
c001b514:	83 c4 10             	add    esp,0x10
c001b517:	55                   	push   ebp
c001b518:	57                   	push   edi
c001b519:	52                   	push   edx
c001b51a:	50                   	push   eax
c001b51b:	e8 3c f4 ff ff       	call   c001a95c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001b520:	83 c4 0c             	add    esp,0xc
c001b523:	eb 67                	jmp    c001b58c <Vm::x87Handler(regs*)+0xabe>
c001b525:	8d 76 00             	lea    esi,[esi+0x0]
c001b528:	31 c0                	xor    eax,eax
c001b52a:	80 fa 02             	cmp    dl,0x2
c001b52d:	0f 85 ad 00 00 00    	jne    c001b5e0 <Vm::x87Handler(regs*)+0xb12>
c001b533:	83 ec 0c             	sub    esp,0xc
c001b536:	6a 00                	push   0x0
c001b538:	e8 51 f4 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b53d:	59                   	pop    ecx
c001b53e:	5f                   	pop    edi
c001b53f:	90                   	nop
c001b540:	52                   	push   edx
c001b541:	50                   	push   eax
c001b542:	e8 77 f1 ff ff       	call   c001a6be <Vm::fpuInternalTo64(unsigned long long)>
c001b547:	e9 84 00 00 00       	jmp    c001b5d0 <Vm::x87Handler(regs*)+0xb02>
c001b54c:	31 c0                	xor    eax,eax
c001b54e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001b553:	0f 85 87 00 00 00    	jne    c001b5e0 <Vm::x87Handler(regs*)+0xb12>
c001b559:	50                   	push   eax
c001b55a:	50                   	push   eax
c001b55b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001b55e:	66 90                	xchg   ax,ax
c001b560:	31 d2                	xor    edx,edx
c001b562:	52                   	push   edx
c001b563:	50                   	push   eax
c001b564:	e8 47 f2 ff ff       	call   c001a7b0 <Vm::fpuLongToFloat(long long)>
c001b569:	8d 76 00             	lea    esi,[esi+0x0]
c001b56c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001b573:	89 c6                	mov    esi,eax
c001b575:	89 d7                	mov    edi,edx
c001b577:	e8 12 f4 ff ff       	call   c001a98e <Vm::fpuGetReg(int)>
c001b57c:	57                   	push   edi
c001b57d:	56                   	push   esi
c001b57e:	52                   	push   edx
c001b57f:	50                   	push   eax
c001b580:	e8 b8 f3 ff ff       	call   c001a93d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001b585:	8d 76 00             	lea    esi,[esi+0x0]
c001b588:	83 c4 1c             	add    esp,0x1c
c001b58b:	90                   	nop
c001b58c:	52                   	push   edx
c001b58d:	50                   	push   eax
c001b58e:	6a 00                	push   0x0
c001b590:	e8 3c f4 ff ff       	call   c001a9d1 <Vm::fpuSetReg(int, unsigned long long)>
c001b595:	e9 7a f7 ff ff       	jmp    c001ad14 <Vm::x87Handler(regs*)+0x246>
c001b59a:	66 90                	xchg   ax,ax
c001b59c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001b5a0:	80 fa 05             	cmp    dl,0x5
c001b5a3:	75 13                	jne    c001b5b8 <Vm::x87Handler(regs*)+0xaea>
c001b5a5:	55                   	push   ebp
c001b5a6:	55                   	push   ebp
c001b5a7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001b5aa:	ff 36                	push   DWORD PTR [esi]
c001b5ac:	e8 c3 f1 ff ff       	call   c001a774 <Vm::fpuULongToFloat(unsigned long long)>
c001b5b1:	e9 52 f7 ff ff       	jmp    c001ad08 <Vm::x87Handler(regs*)+0x23a>
c001b5b6:	66 90                	xchg   ax,ax
c001b5b8:	31 c0                	xor    eax,eax
c001b5ba:	80 fa 07             	cmp    dl,0x7
c001b5bd:	75 21                	jne    c001b5e0 <Vm::x87Handler(regs*)+0xb12>
c001b5bf:	e8 b7 f4 ff ff       	call   c001aa7b <Vm::fpuPop()>
c001b5c4:	51                   	push   ecx
c001b5c5:	51                   	push   ecx
c001b5c6:	52                   	push   edx
c001b5c7:	50                   	push   eax
c001b5c8:	e8 48 f1 ff ff       	call   c001a715 <Vm::fpuFloatToLong(unsigned long long)>
c001b5cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b5d0:	83 c4 10             	add    esp,0x10
c001b5d3:	89 06                	mov    DWORD PTR [esi],eax
c001b5d5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001b5d8:	e9 7b f7 ff ff       	jmp    c001ad58 <Vm::x87Handler(regs*)+0x28a>
c001b5dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b5e0:	83 c4 1c             	add    esp,0x1c
c001b5e3:	5b                   	pop    ebx
c001b5e4:	5e                   	pop    esi
c001b5e5:	5f                   	pop    edi
c001b5e6:	5d                   	pop    ebp
c001b5e7:	c3                   	ret    

c001b5e8 <__static_initialization_and_destruction_0(int, int)>:
c001b5e8:	83 ec 0c             	sub    esp,0xc
c001b5eb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001b5f0:	75 1a                	jne    c001b60c <__static_initialization_and_destruction_0(int, int)+0x24>
c001b5f2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001b5fa:	75 10                	jne    c001b60c <__static_initialization_and_destruction_0(int, int)+0x24>
c001b5fc:	83 ec 0c             	sub    esp,0xc
c001b5ff:	68 40 a2 02 c0       	push   0xc002a240
c001b604:	e8 2b 84 00 00       	call   c0023a34 <Vm::_FPUState::_FPUState()>
c001b609:	83 c4 10             	add    esp,0x10
c001b60c:	90                   	nop
c001b60d:	83 c4 0c             	add    esp,0xc
c001b610:	c3                   	ret    
c001b611:	8d 76 00             	lea    esi,[esi+0x0]

c001b614 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001b614:	83 ec 0c             	sub    esp,0xc
c001b617:	83 ec 08             	sub    esp,0x8
c001b61a:	68 ff ff 00 00       	push   0xffff
c001b61f:	6a 01                	push   0x1
c001b621:	e8 c2 ff ff ff       	call   c001b5e8 <__static_initialization_and_destruction_0(int, int)>
c001b626:	83 c4 10             	add    esp,0x10
c001b629:	83 c4 0c             	add    esp,0xc
c001b62c:	c3                   	ret    
c001b62d:	66 90                	xchg   ax,ax
c001b62f:	90                   	nop

c001b630 <FAT::getName()>:
c001b630:	b8 90 70 02 c0       	mov    eax,0xc0027090
c001b635:	c3                   	ret    
c001b636:	66 90                	xchg   ax,ax

c001b638 <FAT::tell(void*, unsigned long long*)>:
c001b638:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b63d:	75 09                	jne    c001b648 <FAT::tell(void*, unsigned long long*)+0x10>
c001b63f:	b8 04 00 00 00       	mov    eax,0x4
c001b644:	c3                   	ret    
c001b645:	8d 76 00             	lea    esi,[esi+0x0]
c001b648:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b64d:	75 09                	jne    c001b658 <FAT::tell(void*, unsigned long long*)+0x20>
c001b64f:	b8 04 00 00 00       	mov    eax,0x4
c001b654:	c3                   	ret    
c001b655:	8d 76 00             	lea    esi,[esi+0x0]
c001b658:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b65c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001b65f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001b662:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b666:	89 01                	mov    DWORD PTR [ecx],eax
c001b668:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b66b:	b8 00 00 00 00       	mov    eax,0x0
c001b670:	c3                   	ret    
c001b671:	90                   	nop
c001b672:	66 90                	xchg   ax,ax

c001b674 <FAT::stat(void*, unsigned long long*)>:
c001b674:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001b679:	75 09                	jne    c001b684 <FAT::stat(void*, unsigned long long*)+0x10>
c001b67b:	b8 04 00 00 00       	mov    eax,0x4
c001b680:	c3                   	ret    
c001b681:	8d 76 00             	lea    esi,[esi+0x0]
c001b684:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b689:	75 09                	jne    c001b694 <FAT::stat(void*, unsigned long long*)+0x20>
c001b68b:	b8 04 00 00 00       	mov    eax,0x4
c001b690:	c3                   	ret    
c001b691:	8d 76 00             	lea    esi,[esi+0x0]
c001b694:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b698:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b69b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b69e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b6a2:	89 01                	mov    DWORD PTR [ecx],eax
c001b6a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b6a7:	b8 00 00 00 00       	mov    eax,0x0
c001b6ac:	c3                   	ret    
c001b6ad:	90                   	nop
c001b6ae:	66 90                	xchg   ax,ax

c001b6b0 <FAT::~FAT()>:
c001b6b0:	83 ec 0c             	sub    esp,0xc
c001b6b3:	ba dc 70 02 c0       	mov    edx,0xc00270dc
c001b6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6bc:	89 10                	mov    DWORD PTR [eax],edx
c001b6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6c2:	83 ec 0c             	sub    esp,0xc
c001b6c5:	50                   	push   eax
c001b6c6:	e8 cf 1c ff ff       	call   c000d39a <Filesystem::~Filesystem()>
c001b6cb:	83 c4 10             	add    esp,0x10
c001b6ce:	90                   	nop
c001b6cf:	83 c4 0c             	add    esp,0xc
c001b6d2:	c3                   	ret    
c001b6d3:	90                   	nop

c001b6d4 <FAT::~FAT()>:
c001b6d4:	83 ec 0c             	sub    esp,0xc
c001b6d7:	83 ec 0c             	sub    esp,0xc
c001b6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6de:	e8 cd ff ff ff       	call   c001b6b0 <FAT::~FAT()>
c001b6e3:	83 c4 10             	add    esp,0x10
c001b6e6:	83 ec 08             	sub    esp,0x8
c001b6e9:	6a 08                	push   0x8
c001b6eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6ef:	e8 8a 18 ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c001b6f4:	83 c4 10             	add    esp,0x10
c001b6f7:	83 c4 0c             	add    esp,0xc
c001b6fa:	c3                   	ret    
c001b6fb:	90                   	nop

c001b6fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001b6fc:	83 ec 1c             	sub    esp,0x1c
c001b6ff:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001b706:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001b70b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b70f:	8b 04 85 c0 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d40]
c001b716:	83 f8 ff             	cmp    eax,0xffffffff
c001b719:	75 35                	jne    c001b750 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001b71b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b71f:	88 c2                	mov    dl,al
c001b721:	a1 a0 a2 02 c0       	mov    eax,ds:0xc002a2a0
c001b726:	01 d0                	add    eax,edx
c001b728:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b72c:	8b 15 a0 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a2a0
c001b732:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b736:	89 14 85 c0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d40],edx
c001b73d:	a1 a0 a2 02 c0       	mov    eax,ds:0xc002a2a0
c001b742:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b746:	89 14 85 40 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5cc0],edx
c001b74d:	eb 19                	jmp    c001b768 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001b74f:	90                   	nop
c001b750:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b754:	88 c2                	mov    dl,al
c001b756:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b75a:	8b 04 85 c0 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d40]
c001b761:	01 d0                	add    eax,edx
c001b763:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b767:	90                   	nop
c001b768:	83 ec 04             	sub    esp,0x4
c001b76b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b76f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b773:	8d 44 24 15          	lea    eax,[esp+0x15]
c001b777:	50                   	push   eax
c001b778:	e8 c5 b4 fe ff       	call   c0006c42 <f_getlabel>
c001b77d:	83 c4 10             	add    esp,0x10
c001b780:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b784:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b789:	75 09                	jne    c001b794 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001b78b:	b8 00 00 00 00       	mov    eax,0x0
c001b790:	eb 0a                	jmp    c001b79c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001b792:	66 90                	xchg   ax,ax
c001b794:	b8 01 00 00 00       	mov    eax,0x1
c001b799:	8d 76 00             	lea    esi,[esi+0x0]
c001b79c:	83 c4 1c             	add    esp,0x1c
c001b79f:	c3                   	ret    

c001b7a0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001b7a0:	57                   	push   edi
c001b7a1:	83 ec 58             	sub    esp,0x58
c001b7a4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001b7ac:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b7b0:	b9 0f 00 00 00       	mov    ecx,0xf
c001b7b5:	b8 00 00 00 00       	mov    eax,0x0
c001b7ba:	fc                   	cld    
c001b7bb:	89 d7                	mov    edi,edx
c001b7bd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b7bf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b7c3:	8b 04 85 c0 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d40]
c001b7ca:	83 f8 ff             	cmp    eax,0xffffffff
c001b7cd:	75 35                	jne    c001b804 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b7cf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b7d3:	88 c2                	mov    dl,al
c001b7d5:	a1 a0 a2 02 c0       	mov    eax,ds:0xc002a2a0
c001b7da:	01 d0                	add    eax,edx
c001b7dc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7e0:	8b 15 a0 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a2a0
c001b7e6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b7ea:	89 14 85 c0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d40],edx
c001b7f1:	a1 a0 a2 02 c0       	mov    eax,ds:0xc002a2a0
c001b7f6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b7fa:	89 14 85 40 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5cc0],edx
c001b801:	eb 19                	jmp    c001b81c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b803:	90                   	nop
c001b804:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b808:	88 c2                	mov    dl,al
c001b80a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b80e:	8b 04 85 c0 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d40]
c001b815:	01 d0                	add    eax,edx
c001b817:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b81b:	90                   	nop
c001b81c:	83 ec 08             	sub    esp,0x8
c001b81f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b823:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b827:	50                   	push   eax
c001b828:	e8 63 50 fe ff       	call   c0000890 <strcat>
c001b82d:	83 c4 10             	add    esp,0x10
c001b830:	83 ec 0c             	sub    esp,0xc
c001b833:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b837:	50                   	push   eax
c001b838:	e8 f3 b5 fe ff       	call   c0006e30 <f_setlabel>
c001b83d:	83 c4 10             	add    esp,0x10
c001b840:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b844:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b849:	75 09                	jne    c001b854 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b84b:	b8 00 00 00 00       	mov    eax,0x0
c001b850:	eb 0a                	jmp    c001b85c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b852:	66 90                	xchg   ax,ax
c001b854:	b8 01 00 00 00       	mov    eax,0x1
c001b859:	8d 76 00             	lea    esi,[esi+0x0]
c001b85c:	83 c4 58             	add    esp,0x58
c001b85f:	5f                   	pop    edi
c001b860:	c3                   	ret    
c001b861:	90                   	nop
c001b862:	66 90                	xchg   ax,ax

c001b864 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b864:	83 ec 2c             	sub    esp,0x2c
c001b867:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b86f:	83 ec 08             	sub    esp,0x8
c001b872:	68 b4 70 02 c0       	push   0xc00270b4
c001b877:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b87b:	e8 5c 4f fe ff       	call   c00007dc <strcmp>
c001b880:	83 c4 10             	add    esp,0x10
c001b883:	85 c0                	test   eax,eax
c001b885:	0f 94 c0             	sete   al
c001b888:	84 c0                	test   al,al
c001b88a:	74 10                	je     c001b89c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b88c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b894:	e9 b3 00 00 00       	jmp    c001b94c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b899:	8d 76 00             	lea    esi,[esi+0x0]
c001b89c:	83 ec 08             	sub    esp,0x8
c001b89f:	68 a6 70 02 c0       	push   0xc00270a6
c001b8a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b8a8:	e8 2f 4f fe ff       	call   c00007dc <strcmp>
c001b8ad:	83 c4 10             	add    esp,0x10
c001b8b0:	85 c0                	test   eax,eax
c001b8b2:	0f 94 c0             	sete   al
c001b8b5:	84 c0                	test   al,al
c001b8b7:	74 0f                	je     c001b8c8 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001b8b9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b8c1:	e9 86 00 00 00       	jmp    c001b94c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b8c6:	66 90                	xchg   ax,ax
c001b8c8:	83 ec 08             	sub    esp,0x8
c001b8cb:	68 ac 70 02 c0       	push   0xc00270ac
c001b8d0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b8d4:	e8 03 4f fe ff       	call   c00007dc <strcmp>
c001b8d9:	83 c4 10             	add    esp,0x10
c001b8dc:	85 c0                	test   eax,eax
c001b8de:	0f 94 c0             	sete   al
c001b8e1:	84 c0                	test   al,al
c001b8e3:	74 0b                	je     c001b8f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b8e5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b8ed:	eb 5d                	jmp    c001b94c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b8ef:	90                   	nop
c001b8f0:	83 ec 08             	sub    esp,0x8
c001b8f3:	68 ac 41 02 c0       	push   0xc00241ac
c001b8f8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b8fc:	e8 db 4e fe ff       	call   c00007dc <strcmp>
c001b901:	83 c4 10             	add    esp,0x10
c001b904:	85 c0                	test   eax,eax
c001b906:	0f 94 c0             	sete   al
c001b909:	84 c0                	test   al,al
c001b90b:	74 0b                	je     c001b918 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b90d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b915:	eb 35                	jmp    c001b94c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b917:	90                   	nop
c001b918:	83 ec 08             	sub    esp,0x8
c001b91b:	68 b2 70 02 c0       	push   0xc00270b2
c001b920:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b924:	e8 b3 4e fe ff       	call   c00007dc <strcmp>
c001b929:	83 c4 10             	add    esp,0x10
c001b92c:	85 c0                	test   eax,eax
c001b92e:	0f 94 c0             	sete   al
c001b931:	84 c0                	test   al,al
c001b933:	74 0b                	je     c001b940 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b935:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b93d:	eb 0d                	jmp    c001b94c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b93f:	90                   	nop
c001b940:	b8 08 00 00 00       	mov    eax,0x8
c001b945:	e9 ea 00 00 00       	jmp    c001ba34 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b94a:	66 90                	xchg   ax,ax
c001b94c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b953:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b958:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b95c:	8b 04 85 c0 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d40]
c001b963:	83 f8 ff             	cmp    eax,0xffffffff
c001b966:	75 34                	jne    c001b99c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b968:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b96c:	88 c2                	mov    dl,al
c001b96e:	a1 a0 a2 02 c0       	mov    eax,ds:0xc002a2a0
c001b973:	01 d0                	add    eax,edx
c001b975:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b979:	8b 15 a0 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a2a0
c001b97f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b983:	89 14 85 c0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d40],edx
c001b98a:	a1 a0 a2 02 c0       	mov    eax,ds:0xc002a2a0
c001b98f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b993:	89 14 85 40 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5cc0],edx
c001b99a:	eb 18                	jmp    c001b9b4 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b99c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b9a0:	88 c2                	mov    dl,al
c001b9a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b9a6:	8b 04 85 c0 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d40]
c001b9ad:	01 d0                	add    eax,edx
c001b9af:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b9b3:	90                   	nop
c001b9b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b9b8:	88 04 24             	mov    BYTE PTR [esp],al
c001b9bb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b9bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9c3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b9cb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b9d0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b9d8:	83 ec 0c             	sub    esp,0xc
c001b9db:	68 00 20 00 00       	push   0x2000
c001b9e0:	e8 8e e3 fe ff       	call   c0009d73 <malloc>
c001b9e5:	83 c4 10             	add    esp,0x10
c001b9e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b9ec:	68 00 20 00 00       	push   0x2000
c001b9f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b9f9:	50                   	push   eax
c001b9fa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b9fe:	50                   	push   eax
c001b9ff:	e8 ad ba fe ff       	call   c00074b1 <f_mkfs>
c001ba04:	83 c4 10             	add    esp,0x10
c001ba07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ba0b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ba10:	75 0a                	jne    c001ba1c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001ba12:	b8 00 00 00 00       	mov    eax,0x0
c001ba17:	eb 1b                	jmp    c001ba34 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001ba19:	8d 76 00             	lea    esi,[esi+0x0]
c001ba1c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001ba21:	75 09                	jne    c001ba2c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001ba23:	b8 09 00 00 00       	mov    eax,0x9
c001ba28:	eb 0a                	jmp    c001ba34 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001ba2a:	66 90                	xchg   ax,ax
c001ba2c:	b8 01 00 00 00       	mov    eax,0x1
c001ba31:	8d 76 00             	lea    esi,[esi+0x0]
c001ba34:	83 c4 2c             	add    esp,0x2c
c001ba37:	c3                   	ret    

c001ba38 <FAT::tryMount(LogicalDisk*, int)>:
c001ba38:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001ba3e:	a1 a0 a2 02 c0       	mov    eax,ds:0xc002a2a0
c001ba43:	83 f8 14             	cmp    eax,0x14
c001ba46:	75 18                	jne    c001ba60 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001ba48:	83 ec 0c             	sub    esp,0xc
c001ba4b:	68 b8 70 02 c0       	push   0xc00270b8
c001ba50:	e8 dc 96 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001ba55:	83 c4 10             	add    esp,0x10
c001ba58:	b0 00                	mov    al,0x0
c001ba5a:	e9 e9 01 00 00       	jmp    c001bc48 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ba5f:	90                   	nop
c001ba60:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001ba67:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ba6d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ba73:	3d 00 02 00 00       	cmp    eax,0x200
c001ba78:	74 0a                	je     c001ba84 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001ba7a:	b0 00                	mov    al,0x0
c001ba7c:	e9 c7 01 00 00       	jmp    c001bc48 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ba81:	8d 76 00             	lea    esi,[esi+0x0]
c001ba84:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001ba8c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001ba93:	8b 04 85 c0 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d40]
c001ba9a:	83 f8 ff             	cmp    eax,0xffffffff
c001ba9d:	74 09                	je     c001baa8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001ba9f:	b0 01                	mov    al,0x1
c001baa1:	e9 a2 01 00 00       	jmp    c001bc48 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001baa6:	66 90                	xchg   ax,ax
c001baa8:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001bab2:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001baba:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001bac1:	88 c2                	mov    dl,al
c001bac3:	a1 a0 a2 02 c0       	mov    eax,ds:0xc002a2a0
c001bac8:	01 d0                	add    eax,edx
c001baca:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001bad1:	8b 15 a0 a2 02 c0    	mov    edx,DWORD PTR ds:0xc002a2a0
c001bad7:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001bade:	89 14 85 c0 a2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5d40],edx
c001bae5:	a1 a0 a2 02 c0       	mov    eax,ds:0xc002a2a0
c001baea:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001baf1:	89 14 85 40 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5cc0],edx
c001baf8:	83 ec 0c             	sub    esp,0xc
c001bafb:	68 54 02 00 00       	push   0x254
c001bb00:	e8 6e e2 fe ff       	call   c0009d73 <malloc>
c001bb05:	83 c4 10             	add    esp,0x10
c001bb08:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001bb0f:	83 ec 04             	sub    esp,0x4
c001bb12:	6a 00                	push   0x0
c001bb14:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001bb1b:	50                   	push   eax
c001bb1c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001bb23:	e8 11 93 fe ff       	call   c0004e39 <f_mount>
c001bb28:	83 c4 10             	add    esp,0x10
c001bb2b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001bb32:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001bb3a:	74 1c                	je     c001bb58 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001bb3c:	83 ec 0c             	sub    esp,0xc
c001bb3f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001bb46:	e8 48 e2 fe ff       	call   c0009d93 <rfree>
c001bb4b:	83 c4 10             	add    esp,0x10
c001bb4e:	b0 00                	mov    al,0x0
c001bb50:	e9 f3 00 00 00       	jmp    c001bc48 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001bb55:	8d 76 00             	lea    esi,[esi+0x0]
c001bb58:	83 ec 04             	sub    esp,0x4
c001bb5b:	68 00 01 00 00       	push   0x100
c001bb60:	6a 00                	push   0x0
c001bb62:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001bb69:	50                   	push   eax
c001bb6a:	e8 25 4b fe ff       	call   c0000694 <memset>
c001bb6f:	83 c4 10             	add    esp,0x10
c001bb72:	83 ec 08             	sub    esp,0x8
c001bb75:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001bb7c:	50                   	push   eax
c001bb7d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001bb84:	50                   	push   eax
c001bb85:	e8 06 4d fe ff       	call   c0000890 <strcat>
c001bb8a:	83 c4 10             	add    esp,0x10
c001bb8d:	83 ec 08             	sub    esp,0x8
c001bb90:	68 c6 70 02 c0       	push   0xc00270c6
c001bb95:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001bb9c:	50                   	push   eax
c001bb9d:	e8 ee 4c fe ff       	call   c0000890 <strcat>
c001bba2:	83 c4 10             	add    esp,0x10
c001bba5:	83 ec 04             	sub    esp,0x4
c001bba8:	6a 01                	push   0x1
c001bbaa:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001bbb1:	50                   	push   eax
c001bbb2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bbb6:	50                   	push   eax
c001bbb7:	e8 df 92 fe ff       	call   c0004e9b <f_open>
c001bbbc:	83 c4 10             	add    esp,0x10
c001bbbf:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001bbc6:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001bbcd:	85 c0                	test   eax,eax
c001bbcf:	74 0b                	je     c001bbdc <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001bbd1:	78 31                	js     c001bc04 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bbd3:	83 e8 04             	sub    eax,0x4
c001bbd6:	83 f8 01             	cmp    eax,0x1
c001bbd9:	77 29                	ja     c001bc04 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001bbdb:	90                   	nop
c001bbdc:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001bbe4:	83 ec 0c             	sub    esp,0xc
c001bbe7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bbeb:	50                   	push   eax
c001bbec:	e8 fc 9d fe ff       	call   c00059ed <f_close>
c001bbf1:	83 c4 10             	add    esp,0x10
c001bbf4:	90                   	nop
c001bbf5:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001bbfd:	74 41                	je     c001bc40 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001bbff:	eb 33                	jmp    c001bc34 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001bc01:	8d 76 00             	lea    esi,[esi+0x0]
c001bc04:	83 ec 0c             	sub    esp,0xc
c001bc07:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001bc0e:	e8 80 e1 fe ff       	call   c0009d93 <rfree>
c001bc13:	83 c4 10             	add    esp,0x10
c001bc16:	83 ec 04             	sub    esp,0x4
c001bc19:	6a 00                	push   0x0
c001bc1b:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001bc22:	50                   	push   eax
c001bc23:	6a 00                	push   0x0
c001bc25:	e8 0f 92 fe ff       	call   c0004e39 <f_mount>
c001bc2a:	83 c4 10             	add    esp,0x10
c001bc2d:	b0 00                	mov    al,0x0
c001bc2f:	eb 17                	jmp    c001bc48 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001bc31:	8d 76 00             	lea    esi,[esi+0x0]
c001bc34:	a1 a0 a2 02 c0       	mov    eax,ds:0xc002a2a0
c001bc39:	40                   	inc    eax
c001bc3a:	a3 a0 a2 02 c0       	mov    ds:0xc002a2a0,eax
c001bc3f:	90                   	nop
c001bc40:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001bc47:	90                   	nop
c001bc48:	81 c4 6c 03 00 00    	add    esp,0x36c
c001bc4e:	c3                   	ret    
c001bc4f:	90                   	nop

c001bc50 <FAT::allocateSwapfile(char const*, int)>:
c001bc50:	55                   	push   ebp
c001bc51:	57                   	push   edi
c001bc52:	56                   	push   esi
c001bc53:	53                   	push   ebx
c001bc54:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001bc5a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001bc65:	83 ec 0c             	sub    esp,0xc
c001bc68:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001bc6f:	e8 ff e0 fe ff       	call   c0009d73 <malloc>
c001bc74:	83 c4 10             	add    esp,0x10
c001bc77:	89 c7                	mov    edi,eax
c001bc79:	a1 d0 a1 02 c0       	mov    eax,ds:0xc002a1d0
c001bc7e:	83 ec 04             	sub    esp,0x4
c001bc81:	50                   	push   eax
c001bc82:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001bc89:	57                   	push   edi
c001bc8a:	e8 3b 19 ff ff       	call   c000d5ca <File::File(char const*, Process*)>
c001bc8f:	83 c4 10             	add    esp,0x10
c001bc92:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001bc99:	83 ec 04             	sub    esp,0x4
c001bc9c:	8d 44 24 13          	lea    eax,[esp+0x13]
c001bca0:	50                   	push   eax
c001bca1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bca5:	50                   	push   eax
c001bca6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bcad:	e8 9e 1c ff ff       	call   c000d950 <File::stat(unsigned long long*, bool*)>
c001bcb2:	83 c4 10             	add    esp,0x10
c001bcb5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bcbc:	c1 e0 14             	shl    eax,0x14
c001bcbf:	89 c7                	mov    edi,eax
c001bcc1:	89 c5                	mov    ebp,eax
c001bcc3:	c1 fd 1f             	sar    ebp,0x1f
c001bcc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcca:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bcce:	89 f9                	mov    ecx,edi
c001bcd0:	31 c1                	xor    ecx,eax
c001bcd2:	89 cb                	mov    ebx,ecx
c001bcd4:	89 e9                	mov    ecx,ebp
c001bcd6:	31 d1                	xor    ecx,edx
c001bcd8:	89 ce                	mov    esi,ecx
c001bcda:	89 f0                	mov    eax,esi
c001bcdc:	09 d8                	or     eax,ebx
c001bcde:	0f 84 98 00 00 00    	je     c001bd7c <FAT::allocateSwapfile(char const*, int)+0x12c>
c001bce4:	83 ec 0c             	sub    esp,0xc
c001bce7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bcee:	e8 29 1b ff ff       	call   c000d81c <File::unlink()>
c001bcf3:	83 c4 10             	add    esp,0x10
c001bcf6:	83 ec 08             	sub    esp,0x8
c001bcf9:	6a 12                	push   0x12
c001bcfb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bd02:	e8 9d 19 ff ff       	call   c000d6a4 <File::open(FileOpenMode)>
c001bd07:	83 c4 10             	add    esp,0x10
c001bd0a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bd11:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bd17:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bd1e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001bd25:	c1 e0 14             	shl    eax,0x14
c001bd28:	99                   	cdq    
c001bd29:	6a 01                	push   0x1
c001bd2b:	52                   	push   edx
c001bd2c:	50                   	push   eax
c001bd2d:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001bd34:	e8 64 b3 fe ff       	call   c000709d <f_expand>
c001bd39:	83 c4 10             	add    esp,0x10
c001bd3c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bd43:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd45:	83 c0 10             	add    eax,0x10
c001bd48:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd4a:	83 ec 0c             	sub    esp,0xc
c001bd4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bd51:	52                   	push   edx
c001bd52:	8d 54 24 30          	lea    edx,[esp+0x30]
c001bd56:	52                   	push   edx
c001bd57:	6a 00                	push   0x0
c001bd59:	68 00 04 00 00       	push   0x400
c001bd5e:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bd65:	ff d0                	call   eax
c001bd67:	83 c4 20             	add    esp,0x20
c001bd6a:	83 ec 0c             	sub    esp,0xc
c001bd6d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bd74:	e8 89 19 ff ff       	call   c000d702 <File::close()>
c001bd79:	83 c4 10             	add    esp,0x10
c001bd7c:	83 ec 08             	sub    esp,0x8
c001bd7f:	6a 01                	push   0x1
c001bd81:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bd88:	e8 17 19 ff ff       	call   c000d6a4 <File::open(FileOpenMode)>
c001bd8d:	83 c4 10             	add    esp,0x10
c001bd90:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bd97:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd99:	83 c0 0c             	add    eax,0xc
c001bd9c:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd9e:	83 ec 0c             	sub    esp,0xc
c001bda1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001bda5:	52                   	push   edx
c001bda6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001bdaa:	52                   	push   edx
c001bdab:	6a 00                	push   0x0
c001bdad:	6a 04                	push   0x4
c001bdaf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001bdb6:	ff d0                	call   eax
c001bdb8:	83 c4 20             	add    esp,0x20
c001bdbb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001bdc2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001bdc8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001bdcf:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001bdd6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001bdd9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001bddc:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001bde3:	83 ec 0c             	sub    esp,0xc
c001bde6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001bded:	e8 10 19 ff ff       	call   c000d702 <File::close()>
c001bdf2:	83 c4 10             	add    esp,0x10
c001bdf5:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001bdfc:	ba 00 00 00 00       	mov    edx,0x0
c001be01:	81 c4 3c 04 00 00    	add    esp,0x43c
c001be07:	5b                   	pop    ebx
c001be08:	5e                   	pop    esi
c001be09:	5f                   	pop    edi
c001be0a:	5d                   	pop    ebp
c001be0b:	c3                   	ret    

c001be0c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001be0c:	57                   	push   edi
c001be0d:	56                   	push   esi
c001be0e:	53                   	push   ebx
c001be0f:	81 ec 50 02 00 00    	sub    esp,0x250
c001be15:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001be1d:	74 0d                	je     c001be2c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001be1f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001be27:	75 0f                	jne    c001be38 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001be29:	8d 76 00             	lea    esi,[esi+0x0]
c001be2c:	b8 04 00 00 00       	mov    eax,0x4
c001be31:	e9 36 01 00 00       	jmp    c001bf6c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001be36:	66 90                	xchg   ax,ax
c001be38:	83 ec 08             	sub    esp,0x8
c001be3b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001be42:	50                   	push   eax
c001be43:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001be4a:	e8 a8 a1 fe ff       	call   c0005ff7 <f_readdir>
c001be4f:	83 c4 10             	add    esp,0x10
c001be52:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001be59:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001be60:	83 ec 0c             	sub    esp,0xc
c001be63:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001be6a:	83 c0 1a             	add    eax,0x1a
c001be6d:	50                   	push   eax
c001be6e:	e8 3d 48 fe ff       	call   c00006b0 <strlen>
c001be73:	83 c4 10             	add    esp,0x10
c001be76:	ba 00 00 00 00       	mov    edx,0x0
c001be7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001be83:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001be8a:	0f b6 c0             	movzx  eax,al
c001be8d:	83 e0 10             	and    eax,0x10
c001be90:	74 0a                	je     c001be9c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001be92:	b8 02 00 00 00       	mov    eax,0x2
c001be97:	eb 0b                	jmp    c001bea4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001be99:	8d 76 00             	lea    esi,[esi+0x0]
c001be9c:	b8 01 00 00 00       	mov    eax,0x1
c001bea1:	8d 76 00             	lea    esi,[esi+0x0]
c001bea4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bea8:	83 ec 08             	sub    esp,0x8
c001beab:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001beb2:	83 c0 1a             	add    eax,0x1a
c001beb5:	50                   	push   eax
c001beb6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001beba:	83 c0 10             	add    eax,0x10
c001bebd:	50                   	push   eax
c001bebe:	e8 8d 48 fe ff       	call   c0000750 <strcpy>
c001bec3:	83 c4 10             	add    esp,0x10
c001bec6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001becd:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001bed4:	8d 44 24 04          	lea    eax,[esp+0x4]
c001bed8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001bedf:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001bee6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001beed:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001bef4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001befb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001bf02:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001bf09:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001bf10:	89 c6                	mov    esi,eax
c001bf12:	89 d7                	mov    edi,edx
c001bf14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf16:	89 c8                	mov    eax,ecx
c001bf18:	89 fa                	mov    edx,edi
c001bf1a:	89 f3                	mov    ebx,esi
c001bf1c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001bf23:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001bf2a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001bf31:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001bf38:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bf3e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001bf45:	84 c0                	test   al,al
c001bf47:	75 07                	jne    c001bf50 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001bf49:	b8 07 00 00 00       	mov    eax,0x7
c001bf4e:	eb 1c                	jmp    c001bf6c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bf50:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001bf57:	85 c0                	test   eax,eax
c001bf59:	75 09                	jne    c001bf64 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001bf5b:	b8 00 00 00 00       	mov    eax,0x0
c001bf60:	eb 0a                	jmp    c001bf6c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001bf62:	66 90                	xchg   ax,ax
c001bf64:	b8 01 00 00 00       	mov    eax,0x1
c001bf69:	8d 76 00             	lea    esi,[esi+0x0]
c001bf6c:	81 c4 50 02 00 00    	add    esp,0x250
c001bf72:	5b                   	pop    ebx
c001bf73:	5e                   	pop    esi
c001bf74:	5f                   	pop    edi
c001bf75:	c3                   	ret    
c001bf76:	66 90                	xchg   ax,ax

c001bf78 <FAT::read(void*, unsigned long, void*, int*)>:
c001bf78:	83 ec 1c             	sub    esp,0x1c
c001bf7b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bf80:	74 0a                	je     c001bf8c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001bf82:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bf87:	75 0b                	jne    c001bf94 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001bf89:	8d 76 00             	lea    esi,[esi+0x0]
c001bf8c:	b8 04 00 00 00       	mov    eax,0x4
c001bf91:	eb 41                	jmp    c001bfd4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bf93:	90                   	nop
c001bf94:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bf98:	50                   	push   eax
c001bf99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bf9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001bfa1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001bfa5:	e8 2d 93 fe ff       	call   c00052d7 <f_read>
c001bfaa:	83 c4 10             	add    esp,0x10
c001bfad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bfb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bfb5:	89 c2                	mov    edx,eax
c001bfb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001bfbb:	89 10                	mov    DWORD PTR [eax],edx
c001bfbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bfc1:	85 c0                	test   eax,eax
c001bfc3:	75 07                	jne    c001bfcc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001bfc5:	b8 00 00 00 00       	mov    eax,0x0
c001bfca:	eb 08                	jmp    c001bfd4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001bfcc:	b8 01 00 00 00       	mov    eax,0x1
c001bfd1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfd4:	83 c4 1c             	add    esp,0x1c
c001bfd7:	c3                   	ret    

c001bfd8 <FAT::write(void*, unsigned long, void*, int*)>:
c001bfd8:	83 ec 1c             	sub    esp,0x1c
c001bfdb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001bfe0:	74 0a                	je     c001bfec <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001bfe2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001bfe7:	75 0b                	jne    c001bff4 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001bfe9:	8d 76 00             	lea    esi,[esi+0x0]
c001bfec:	b8 04 00 00 00       	mov    eax,0x4
c001bff1:	eb 41                	jmp    c001c034 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001bff3:	90                   	nop
c001bff4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bff8:	50                   	push   eax
c001bff9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bffd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001c001:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c005:	e8 4d 95 fe ff       	call   c0005557 <f_write>
c001c00a:	83 c4 10             	add    esp,0x10
c001c00d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c011:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c015:	89 c2                	mov    edx,eax
c001c017:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c01b:	89 10                	mov    DWORD PTR [eax],edx
c001c01d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c021:	85 c0                	test   eax,eax
c001c023:	75 07                	jne    c001c02c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001c025:	b8 00 00 00 00       	mov    eax,0x0
c001c02a:	eb 08                	jmp    c001c034 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001c02c:	b8 01 00 00 00       	mov    eax,0x1
c001c031:	8d 76 00             	lea    esi,[esi+0x0]
c001c034:	83 c4 1c             	add    esp,0x1c
c001c037:	c3                   	ret    

c001c038 <FAT::close(void*)>:
c001c038:	83 ec 1c             	sub    esp,0x1c
c001c03b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c040:	75 0a                	jne    c001c04c <FAT::close(void*)+0x14>
c001c042:	b8 04 00 00 00       	mov    eax,0x4
c001c047:	eb 3f                	jmp    c001c088 <FAT::close(void*)+0x50>
c001c049:	8d 76 00             	lea    esi,[esi+0x0]
c001c04c:	83 ec 0c             	sub    esp,0xc
c001c04f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c053:	e8 95 99 fe ff       	call   c00059ed <f_close>
c001c058:	83 c4 10             	add    esp,0x10
c001c05b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c05f:	83 ec 0c             	sub    esp,0xc
c001c062:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c066:	e8 18 dd fe ff       	call   c0009d83 <free>
c001c06b:	83 c4 10             	add    esp,0x10
c001c06e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c072:	85 c0                	test   eax,eax
c001c074:	75 0a                	jne    c001c080 <FAT::close(void*)+0x48>
c001c076:	b8 00 00 00 00       	mov    eax,0x0
c001c07b:	eb 0b                	jmp    c001c088 <FAT::close(void*)+0x50>
c001c07d:	8d 76 00             	lea    esi,[esi+0x0]
c001c080:	b8 01 00 00 00       	mov    eax,0x1
c001c085:	8d 76 00             	lea    esi,[esi+0x0]
c001c088:	83 c4 1c             	add    esp,0x1c
c001c08b:	c3                   	ret    

c001c08c <FAT::closeDir(void*)>:
c001c08c:	83 ec 1c             	sub    esp,0x1c
c001c08f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001c094:	75 0a                	jne    c001c0a0 <FAT::closeDir(void*)+0x14>
c001c096:	b8 04 00 00 00       	mov    eax,0x4
c001c09b:	eb 3f                	jmp    c001c0dc <FAT::closeDir(void*)+0x50>
c001c09d:	8d 76 00             	lea    esi,[esi+0x0]
c001c0a0:	83 ec 0c             	sub    esp,0xc
c001c0a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c0a7:	e8 29 9f fe ff       	call   c0005fd5 <f_closedir>
c001c0ac:	83 c4 10             	add    esp,0x10
c001c0af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0b3:	83 ec 0c             	sub    esp,0xc
c001c0b6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c0ba:	e8 c4 dc fe ff       	call   c0009d83 <free>
c001c0bf:	83 c4 10             	add    esp,0x10
c001c0c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0c6:	85 c0                	test   eax,eax
c001c0c8:	75 0a                	jne    c001c0d4 <FAT::closeDir(void*)+0x48>
c001c0ca:	b8 00 00 00 00       	mov    eax,0x0
c001c0cf:	eb 0b                	jmp    c001c0dc <FAT::closeDir(void*)+0x50>
c001c0d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c0d4:	b8 01 00 00 00       	mov    eax,0x1
c001c0d9:	8d 76 00             	lea    esi,[esi+0x0]
c001c0dc:	83 c4 1c             	add    esp,0x1c
c001c0df:	c3                   	ret    

c001c0e0 <FAT::seek(void*, unsigned long long)>:
c001c0e0:	83 ec 2c             	sub    esp,0x2c
c001c0e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c0e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c0eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c0ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0f3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001c0f8:	75 0a                	jne    c001c104 <FAT::seek(void*, unsigned long long)+0x24>
c001c0fa:	b8 04 00 00 00       	mov    eax,0x4
c001c0ff:	eb 37                	jmp    c001c138 <FAT::seek(void*, unsigned long long)+0x58>
c001c101:	8d 76 00             	lea    esi,[esi+0x0]
c001c104:	83 ec 04             	sub    esp,0x4
c001c107:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c10b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c10f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001c113:	e8 04 99 fe ff       	call   c0005a1c <f_lseek>
c001c118:	83 c4 10             	add    esp,0x10
c001c11b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c11f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c123:	85 c0                	test   eax,eax
c001c125:	75 09                	jne    c001c130 <FAT::seek(void*, unsigned long long)+0x50>
c001c127:	b8 00 00 00 00       	mov    eax,0x0
c001c12c:	eb 0a                	jmp    c001c138 <FAT::seek(void*, unsigned long long)+0x58>
c001c12e:	66 90                	xchg   ax,ax
c001c130:	b8 01 00 00 00       	mov    eax,0x1
c001c135:	8d 76 00             	lea    esi,[esi+0x0]
c001c138:	83 c4 2c             	add    esp,0x2c
c001c13b:	c3                   	ret    

c001c13c <fatWrapperReadDisk>:
c001c13c:	83 ec 1c             	sub    esp,0x1c
c001c13f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c143:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c147:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c14b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c14e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c152:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c156:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c15b:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c001c162:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c166:	83 ec 0c             	sub    esp,0xc
c001c169:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c16d:	52                   	push   edx
c001c16e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c172:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c176:	50                   	push   eax
c001c177:	e8 56 48 ff ff       	call   c00109d2 <LogicalDisk::read(unsigned long long, int, void*)>
c001c17c:	83 c4 20             	add    esp,0x20
c001c17f:	83 c4 1c             	add    esp,0x1c
c001c182:	c3                   	ret    
c001c183:	90                   	nop

c001c184 <fatWrapperWriteDisk>:
c001c184:	83 ec 1c             	sub    esp,0x1c
c001c187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c18b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c18f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c193:	89 04 24             	mov    DWORD PTR [esp],eax
c001c196:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c19a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c19e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c1a3:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c001c1aa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c1ae:	83 ec 0c             	sub    esp,0xc
c001c1b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001c1b5:	52                   	push   edx
c001c1b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c1ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c1be:	50                   	push   eax
c001c1bf:	e8 7a 48 ff ff       	call   c0010a3e <LogicalDisk::write(unsigned long long, int, void*)>
c001c1c4:	83 c4 20             	add    esp,0x20
c001c1c7:	83 c4 1c             	add    esp,0x1c
c001c1ca:	c3                   	ret    
c001c1cb:	90                   	nop

c001c1cc <fatWrapperIoctl>:
c001c1cc:	53                   	push   ebx
c001c1cd:	83 ec 28             	sub    esp,0x28
c001c1d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c1d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c1d8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c1dc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c1e0:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001c1e5:	75 31                	jne    c001c218 <fatWrapperIoctl+0x4c>
c001c1e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c1eb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c1ef:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c1f4:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c001c1fb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c201:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c207:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c20b:	66 89 02             	mov    WORD PTR [edx],ax
c001c20e:	b8 00 00 00 00       	mov    eax,0x0
c001c213:	e9 bc 00 00 00       	jmp    c001c2d4 <fatWrapperIoctl+0x108>
c001c218:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001c21d:	75 6d                	jne    c001c28c <fatWrapperIoctl+0xc0>
c001c21f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c227:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c22c:	8b 04 85 40 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6dc0]
c001c233:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c239:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001c23f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001c245:	89 c8                	mov    eax,ecx
c001c247:	89 da                	mov    edx,ebx
c001c249:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c24d:	c1 e0 0a             	shl    eax,0xa
c001c250:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c255:	8b 0c 8d 40 92 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6dc0]
c001c25c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001c262:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001c268:	89 cb                	mov    ebx,ecx
c001c26a:	c1 fb 1f             	sar    ebx,0x1f
c001c26d:	53                   	push   ebx
c001c26e:	51                   	push   ecx
c001c26f:	52                   	push   edx
c001c270:	50                   	push   eax
c001c271:	e8 1a 6e 00 00       	call   c0023090 <__udivdi3>
c001c276:	83 c4 10             	add    esp,0x10
c001c279:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c27d:	89 01                	mov    DWORD PTR [ecx],eax
c001c27f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c282:	b8 00 00 00 00       	mov    eax,0x0
c001c287:	eb 4b                	jmp    c001c2d4 <fatWrapperIoctl+0x108>
c001c289:	8d 76 00             	lea    esi,[esi+0x0]
c001c28c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001c291:	75 09                	jne    c001c29c <fatWrapperIoctl+0xd0>
c001c293:	b8 00 00 00 00       	mov    eax,0x0
c001c298:	eb 3a                	jmp    c001c2d4 <fatWrapperIoctl+0x108>
c001c29a:	66 90                	xchg   ax,ax
c001c29c:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001c2a1:	75 19                	jne    c001c2bc <fatWrapperIoctl+0xf0>
c001c2a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c2a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c2ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c2af:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001c2b5:	b8 00 00 00 00       	mov    eax,0x0
c001c2ba:	eb 18                	jmp    c001c2d4 <fatWrapperIoctl+0x108>
c001c2bc:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001c2c1:	75 09                	jne    c001c2cc <fatWrapperIoctl+0x100>
c001c2c3:	b8 00 00 00 00       	mov    eax,0x0
c001c2c8:	eb 0a                	jmp    c001c2d4 <fatWrapperIoctl+0x108>
c001c2ca:	66 90                	xchg   ax,ax
c001c2cc:	b8 04 00 00 00       	mov    eax,0x4
c001c2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001c2d4:	83 c4 28             	add    esp,0x28
c001c2d7:	5b                   	pop    ebx
c001c2d8:	c3                   	ret    
c001c2d9:	90                   	nop
c001c2da:	66 90                	xchg   ax,ax

c001c2dc <FAT::FAT()>:
c001c2dc:	83 ec 1c             	sub    esp,0x1c
c001c2df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2e3:	83 ec 0c             	sub    esp,0xc
c001c2e6:	50                   	push   eax
c001c2e7:	e8 8a 10 ff ff       	call   c000d376 <Filesystem::Filesystem()>
c001c2ec:	83 c4 10             	add    esp,0x10
c001c2ef:	ba dc 70 02 c0       	mov    edx,0xc00270dc
c001c2f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c2f8:	89 10                	mov    DWORD PTR [eax],edx
c001c2fa:	c7 05 a0 a2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a2a0,0x0
c001c304:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c30c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001c311:	7f 15                	jg     c001c328 <FAT::FAT()+0x4c>
c001c313:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c317:	c7 04 85 c0 a2 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5d40],0xffffffff
c001c322:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c326:	eb e4                	jmp    c001c30c <FAT::FAT()+0x30>
c001c328:	90                   	nop
c001c329:	83 c4 1c             	add    esp,0x1c
c001c32c:	c3                   	ret    
c001c32d:	90                   	nop
c001c32e:	66 90                	xchg   ax,ax

c001c330 <FAT::fixFilepath(char*)>:
c001c330:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c334:	8a 00                	mov    al,BYTE PTR [eax]
c001c336:	3c 40                	cmp    al,0x40
c001c338:	7e 2e                	jle    c001c368 <FAT::fixFilepath(char*)+0x38>
c001c33a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c33e:	8a 00                	mov    al,BYTE PTR [eax]
c001c340:	83 e8 41             	sub    eax,0x41
c001c343:	88 c2                	mov    dl,al
c001c345:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c349:	88 10                	mov    BYTE PTR [eax],dl
c001c34b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c34f:	8a 00                	mov    al,BYTE PTR [eax]
c001c351:	0f be c0             	movsx  eax,al
c001c354:	8b 04 85 c0 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5d40]
c001c35b:	83 c0 30             	add    eax,0x30
c001c35e:	88 c2                	mov    dl,al
c001c360:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c364:	88 10                	mov    BYTE PTR [eax],dl
c001c366:	66 90                	xchg   ax,ax
c001c368:	90                   	nop
c001c369:	c3                   	ret    
c001c36a:	66 90                	xchg   ax,ax

c001c36c <FAT::open(char const*, void**, FileOpenMode)>:
c001c36c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c372:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c37a:	74 0c                	je     c001c388 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001c37c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c384:	75 0e                	jne    c001c394 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001c386:	66 90                	xchg   ax,ax
c001c388:	b8 04 00 00 00       	mov    eax,0x4
c001c38d:	e9 06 01 00 00       	jmp    c001c498 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c392:	66 90                	xchg   ax,ax
c001c394:	83 ec 08             	sub    esp,0x8
c001c397:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c39e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c3a2:	50                   	push   eax
c001c3a3:	e8 a8 43 fe ff       	call   c0000750 <strcpy>
c001c3a8:	83 c4 10             	add    esp,0x10
c001c3ab:	83 ec 08             	sub    esp,0x8
c001c3ae:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c3b2:	50                   	push   eax
c001c3b3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c3ba:	e8 71 ff ff ff       	call   c001c330 <FAT::fixFilepath(char*)>
c001c3bf:	83 c4 10             	add    esp,0x10
c001c3c2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001c3ca:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c3d1:	83 e0 01             	and    eax,0x1
c001c3d4:	74 0a                	je     c001c3e0 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001c3d6:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001c3de:	66 90                	xchg   ax,ax
c001c3e0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c3e7:	83 e0 04             	and    eax,0x4
c001c3ea:	74 10                	je     c001c3fc <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001c3ec:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001c3f4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c3fc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c403:	83 e0 02             	and    eax,0x2
c001c406:	74 08                	je     c001c410 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001c408:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001c410:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c417:	83 e0 08             	and    eax,0x8
c001c41a:	74 08                	je     c001c424 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001c41c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001c424:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001c42b:	83 e0 10             	and    eax,0x10
c001c42e:	74 08                	je     c001c438 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001c430:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001c438:	83 ec 0c             	sub    esp,0xc
c001c43b:	68 50 02 00 00       	push   0x250
c001c440:	e8 2e d9 fe ff       	call   c0009d73 <malloc>
c001c445:	83 c4 10             	add    esp,0x10
c001c448:	89 c2                	mov    edx,eax
c001c44a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c451:	89 10                	mov    DWORD PTR [eax],edx
c001c453:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001c45b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c462:	8b 00                	mov    eax,DWORD PTR [eax]
c001c464:	83 ec 04             	sub    esp,0x4
c001c467:	52                   	push   edx
c001c468:	8d 54 24 10          	lea    edx,[esp+0x10]
c001c46c:	52                   	push   edx
c001c46d:	50                   	push   eax
c001c46e:	e8 28 8a fe ff       	call   c0004e9b <f_open>
c001c473:	83 c4 10             	add    esp,0x10
c001c476:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001c47d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001c485:	74 09                	je     c001c490 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001c487:	b8 01 00 00 00       	mov    eax,0x1
c001c48c:	eb 0a                	jmp    c001c498 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001c48e:	66 90                	xchg   ax,ax
c001c490:	b8 00 00 00 00       	mov    eax,0x0
c001c495:	8d 76 00             	lea    esi,[esi+0x0]
c001c498:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c49e:	c3                   	ret    
c001c49f:	90                   	nop

c001c4a0 <FAT::openDir(char const*, void**)>:
c001c4a0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c4a6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c4ae:	74 0c                	je     c001c4bc <FAT::openDir(char const*, void**)+0x1c>
c001c4b0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001c4b8:	75 0e                	jne    c001c4c8 <FAT::openDir(char const*, void**)+0x28>
c001c4ba:	66 90                	xchg   ax,ax
c001c4bc:	b8 04 00 00 00       	mov    eax,0x4
c001c4c1:	e9 82 00 00 00       	jmp    c001c548 <FAT::openDir(char const*, void**)+0xa8>
c001c4c6:	66 90                	xchg   ax,ax
c001c4c8:	83 ec 08             	sub    esp,0x8
c001c4cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c4d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c4d6:	50                   	push   eax
c001c4d7:	e8 74 42 fe ff       	call   c0000750 <strcpy>
c001c4dc:	83 c4 10             	add    esp,0x10
c001c4df:	83 ec 08             	sub    esp,0x8
c001c4e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c4e6:	50                   	push   eax
c001c4e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c4ee:	e8 3d fe ff ff       	call   c001c330 <FAT::fixFilepath(char*)>
c001c4f3:	83 c4 10             	add    esp,0x10
c001c4f6:	83 ec 0c             	sub    esp,0xc
c001c4f9:	6a 4c                	push   0x4c
c001c4fb:	e8 73 d8 fe ff       	call   c0009d73 <malloc>
c001c500:	83 c4 10             	add    esp,0x10
c001c503:	89 c2                	mov    edx,eax
c001c505:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c50c:	89 10                	mov    DWORD PTR [eax],edx
c001c50e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001c515:	8b 00                	mov    eax,DWORD PTR [eax]
c001c517:	83 ec 08             	sub    esp,0x8
c001c51a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001c51e:	52                   	push   edx
c001c51f:	50                   	push   eax
c001c520:	e8 ae 99 fe ff       	call   c0005ed3 <f_opendir>
c001c525:	83 c4 10             	add    esp,0x10
c001c528:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c52f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001c537:	74 07                	je     c001c540 <FAT::openDir(char const*, void**)+0xa0>
c001c539:	b8 01 00 00 00       	mov    eax,0x1
c001c53e:	eb 08                	jmp    c001c548 <FAT::openDir(char const*, void**)+0xa8>
c001c540:	b8 00 00 00 00       	mov    eax,0x0
c001c545:	8d 76 00             	lea    esi,[esi+0x0]
c001c548:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c54e:	c3                   	ret    
c001c54f:	90                   	nop

c001c550 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001c550:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c556:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001c55e:	75 0c                	jne    c001c56c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001c560:	b8 04 00 00 00       	mov    eax,0x4
c001c565:	e9 d2 00 00 00       	jmp    c001c63c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c56a:	66 90                	xchg   ax,ax
c001c56c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001c574:	75 0a                	jne    c001c580 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001c576:	b8 04 00 00 00       	mov    eax,0x4
c001c57b:	e9 bc 00 00 00       	jmp    c001c63c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c580:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001c588:	75 0a                	jne    c001c594 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001c58a:	b8 04 00 00 00       	mov    eax,0x4
c001c58f:	e9 a8 00 00 00       	jmp    c001c63c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c594:	83 ec 08             	sub    esp,0x8
c001c597:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c59e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c5a5:	50                   	push   eax
c001c5a6:	e8 a5 41 fe ff       	call   c0000750 <strcpy>
c001c5ab:	83 c4 10             	add    esp,0x10
c001c5ae:	83 ec 08             	sub    esp,0x8
c001c5b1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001c5b8:	50                   	push   eax
c001c5b9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c5c0:	e8 6b fd ff ff       	call   c001c330 <FAT::fixFilepath(char*)>
c001c5c5:	83 c4 10             	add    esp,0x10
c001c5c8:	83 ec 08             	sub    esp,0x8
c001c5cb:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c5cf:	50                   	push   eax
c001c5d0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001c5d7:	50                   	push   eax
c001c5d8:	e8 b5 9a fe ff       	call   c0006092 <f_stat>
c001c5dd:	83 c4 10             	add    esp,0x10
c001c5e0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c5e7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c5ee:	85 c0                	test   eax,eax
c001c5f0:	74 0a                	je     c001c5fc <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001c5f2:	83 f8 04             	cmp    eax,0x4
c001c5f5:	74 35                	je     c001c62c <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001c5f7:	eb 3b                	jmp    c001c634 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001c5f9:	8d 76 00             	lea    esi,[esi+0x0]
c001c5fc:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001c600:	0f b6 c0             	movzx  eax,al
c001c603:	83 e0 10             	and    eax,0x10
c001c606:	0f 95 c2             	setne  dl
c001c609:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001c610:	88 10                	mov    BYTE PTR [eax],dl
c001c612:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c615:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c619:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001c620:	89 01                	mov    DWORD PTR [ecx],eax
c001c622:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001c625:	b8 00 00 00 00       	mov    eax,0x0
c001c62a:	eb 10                	jmp    c001c63c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c62c:	b8 02 00 00 00       	mov    eax,0x2
c001c631:	eb 09                	jmp    c001c63c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001c633:	90                   	nop
c001c634:	b8 01 00 00 00       	mov    eax,0x1
c001c639:	8d 76 00             	lea    esi,[esi+0x0]
c001c63c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c642:	c3                   	ret    
c001c643:	90                   	nop

c001c644 <FAT::unlink(char const*)>:
c001c644:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c64a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c652:	75 08                	jne    c001c65c <FAT::unlink(char const*)+0x18>
c001c654:	b8 04 00 00 00       	mov    eax,0x4
c001c659:	eb 61                	jmp    c001c6bc <FAT::unlink(char const*)+0x78>
c001c65b:	90                   	nop
c001c65c:	83 ec 08             	sub    esp,0x8
c001c65f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c666:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c66a:	50                   	push   eax
c001c66b:	e8 e0 40 fe ff       	call   c0000750 <strcpy>
c001c670:	83 c4 10             	add    esp,0x10
c001c673:	83 ec 08             	sub    esp,0x8
c001c676:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c67a:	50                   	push   eax
c001c67b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c682:	e8 a9 fc ff ff       	call   c001c330 <FAT::fixFilepath(char*)>
c001c687:	83 c4 10             	add    esp,0x10
c001c68a:	83 ec 0c             	sub    esp,0xc
c001c68d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c691:	50                   	push   eax
c001c692:	e8 4d 9d fe ff       	call   c00063e4 <f_unlink>
c001c697:	83 c4 10             	add    esp,0x10
c001c69a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c6a1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c6a8:	85 c0                	test   eax,eax
c001c6aa:	75 08                	jne    c001c6b4 <FAT::unlink(char const*)+0x70>
c001c6ac:	b8 00 00 00 00       	mov    eax,0x0
c001c6b1:	eb 09                	jmp    c001c6bc <FAT::unlink(char const*)+0x78>
c001c6b3:	90                   	nop
c001c6b4:	b8 01 00 00 00       	mov    eax,0x1
c001c6b9:	8d 76 00             	lea    esi,[esi+0x0]
c001c6bc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c6c2:	c3                   	ret    
c001c6c3:	90                   	nop

c001c6c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001c6c4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001c6ca:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001c6d1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001c6d8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001c6dc:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c6e0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c6e8:	75 0a                	jne    c001c6f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001c6ea:	b8 04 00 00 00       	mov    eax,0x4
c001c6ef:	e9 30 01 00 00       	jmp    c001c824 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c6f4:	83 ec 08             	sub    esp,0x8
c001c6f7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c6fe:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c702:	50                   	push   eax
c001c703:	e8 48 40 fe ff       	call   c0000750 <strcpy>
c001c708:	83 c4 10             	add    esp,0x10
c001c70b:	83 ec 08             	sub    esp,0x8
c001c70e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c712:	50                   	push   eax
c001c713:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c71a:	e8 11 fc ff ff       	call   c001c330 <FAT::fixFilepath(char*)>
c001c71f:	83 c4 10             	add    esp,0x10
c001c722:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c72a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c732:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c737:	83 e0 01             	and    eax,0x1
c001c73a:	74 08                	je     c001c744 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001c73c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001c744:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c749:	83 e0 02             	and    eax,0x2
c001c74c:	74 0a                	je     c001c758 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001c74e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001c756:	66 90                	xchg   ax,ax
c001c758:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c75d:	83 e0 04             	and    eax,0x4
c001c760:	74 0a                	je     c001c76c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c762:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001c76a:	66 90                	xchg   ax,ax
c001c76c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c771:	83 e0 08             	and    eax,0x8
c001c774:	74 0a                	je     c001c780 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001c776:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001c77e:	66 90                	xchg   ax,ax
c001c780:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c785:	83 e0 01             	and    eax,0x1
c001c788:	74 0a                	je     c001c794 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001c78a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001c792:	66 90                	xchg   ax,ax
c001c794:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c799:	83 e0 02             	and    eax,0x2
c001c79c:	74 0a                	je     c001c7a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001c79e:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001c7a6:	66 90                	xchg   ax,ax
c001c7a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c7ad:	83 e0 04             	and    eax,0x4
c001c7b0:	74 0a                	je     c001c7bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001c7b2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001c7ba:	66 90                	xchg   ax,ax
c001c7bc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c7c1:	83 e0 08             	and    eax,0x8
c001c7c4:	74 0a                	je     c001c7d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001c7c6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001c7ce:	66 90                	xchg   ax,ax
c001c7d0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c7d7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001c7de:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c7e6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c7ee:	83 ec 04             	sub    esp,0x4
c001c7f1:	52                   	push   edx
c001c7f2:	50                   	push   eax
c001c7f3:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c7f7:	50                   	push   eax
c001c7f8:	e8 89 a2 fe ff       	call   c0006a86 <f_chmod>
c001c7fd:	83 c4 10             	add    esp,0x10
c001c800:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c807:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c80e:	85 c0                	test   eax,eax
c001c810:	75 0a                	jne    c001c81c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001c812:	b8 00 00 00 00       	mov    eax,0x0
c001c817:	eb 0b                	jmp    c001c824 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001c819:	8d 76 00             	lea    esi,[esi+0x0]
c001c81c:	b8 01 00 00 00       	mov    eax,0x1
c001c821:	8d 76 00             	lea    esi,[esi+0x0]
c001c824:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c82a:	c3                   	ret    
c001c82b:	90                   	nop

c001c82c <FAT::rename(char const*, char const*)>:
c001c82c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c832:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c83a:	74 0c                	je     c001c848 <FAT::rename(char const*, char const*)+0x1c>
c001c83c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c844:	75 0e                	jne    c001c854 <FAT::rename(char const*, char const*)+0x28>
c001c846:	66 90                	xchg   ax,ax
c001c848:	b8 04 00 00 00       	mov    eax,0x4
c001c84d:	e9 9e 00 00 00       	jmp    c001c8f0 <FAT::rename(char const*, char const*)+0xc4>
c001c852:	66 90                	xchg   ax,ax
c001c854:	83 ec 08             	sub    esp,0x8
c001c857:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c85e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c865:	50                   	push   eax
c001c866:	e8 e5 3e fe ff       	call   c0000750 <strcpy>
c001c86b:	83 c4 10             	add    esp,0x10
c001c86e:	83 ec 08             	sub    esp,0x8
c001c871:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c878:	50                   	push   eax
c001c879:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c880:	e8 ab fa ff ff       	call   c001c330 <FAT::fixFilepath(char*)>
c001c885:	83 c4 10             	add    esp,0x10
c001c888:	83 ec 08             	sub    esp,0x8
c001c88b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c892:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c896:	50                   	push   eax
c001c897:	e8 b4 3e fe ff       	call   c0000750 <strcpy>
c001c89c:	83 c4 10             	add    esp,0x10
c001c89f:	83 ec 08             	sub    esp,0x8
c001c8a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c8a6:	50                   	push   eax
c001c8a7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c8ae:	e8 7d fa ff ff       	call   c001c330 <FAT::fixFilepath(char*)>
c001c8b3:	83 c4 10             	add    esp,0x10
c001c8b6:	83 ec 08             	sub    esp,0x8
c001c8b9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c8bd:	50                   	push   eax
c001c8be:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c8c5:	50                   	push   eax
c001c8c6:	e8 c8 9e fe ff       	call   c0006793 <f_rename>
c001c8cb:	83 c4 10             	add    esp,0x10
c001c8ce:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c8d5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c8dc:	85 c0                	test   eax,eax
c001c8de:	75 08                	jne    c001c8e8 <FAT::rename(char const*, char const*)+0xbc>
c001c8e0:	b8 00 00 00 00       	mov    eax,0x0
c001c8e5:	eb 09                	jmp    c001c8f0 <FAT::rename(char const*, char const*)+0xc4>
c001c8e7:	90                   	nop
c001c8e8:	b8 01 00 00 00       	mov    eax,0x1
c001c8ed:	8d 76 00             	lea    esi,[esi+0x0]
c001c8f0:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c8f6:	c3                   	ret    
c001c8f7:	90                   	nop

c001c8f8 <FAT::mkdir(char const*)>:
c001c8f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c8fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c906:	75 08                	jne    c001c910 <FAT::mkdir(char const*)+0x18>
c001c908:	b8 04 00 00 00       	mov    eax,0x4
c001c90d:	eb 61                	jmp    c001c970 <FAT::mkdir(char const*)+0x78>
c001c90f:	90                   	nop
c001c910:	83 ec 08             	sub    esp,0x8
c001c913:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c91a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c91e:	50                   	push   eax
c001c91f:	e8 2c 3e fe ff       	call   c0000750 <strcpy>
c001c924:	83 c4 10             	add    esp,0x10
c001c927:	83 ec 08             	sub    esp,0x8
c001c92a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c92e:	50                   	push   eax
c001c92f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c936:	e8 f5 f9 ff ff       	call   c001c330 <FAT::fixFilepath(char*)>
c001c93b:	83 c4 10             	add    esp,0x10
c001c93e:	83 ec 0c             	sub    esp,0xc
c001c941:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c945:	50                   	push   eax
c001c946:	e8 1c 9c fe ff       	call   c0006567 <f_mkdir>
c001c94b:	83 c4 10             	add    esp,0x10
c001c94e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c955:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c95c:	85 c0                	test   eax,eax
c001c95e:	75 08                	jne    c001c968 <FAT::mkdir(char const*)+0x70>
c001c960:	b8 00 00 00 00       	mov    eax,0x0
c001c965:	eb 09                	jmp    c001c970 <FAT::mkdir(char const*)+0x78>
c001c967:	90                   	nop
c001c968:	b8 01 00 00 00       	mov    eax,0x1
c001c96d:	8d 76 00             	lea    esi,[esi+0x0]
c001c970:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c976:	c3                   	ret    
c001c977:	90                   	nop

c001c978 <FAT::exists(char const*)>:
c001c978:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c97e:	83 ec 08             	sub    esp,0x8
c001c981:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c988:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c98c:	50                   	push   eax
c001c98d:	e8 be 3d fe ff       	call   c0000750 <strcpy>
c001c992:	83 c4 10             	add    esp,0x10
c001c995:	83 ec 08             	sub    esp,0x8
c001c998:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c99c:	50                   	push   eax
c001c99d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c9a4:	e8 87 f9 ff ff       	call   c001c330 <FAT::fixFilepath(char*)>
c001c9a9:	83 c4 10             	add    esp,0x10
c001c9ac:	83 ec 08             	sub    esp,0x8
c001c9af:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c9b6:	50                   	push   eax
c001c9b7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c9bb:	50                   	push   eax
c001c9bc:	e8 d1 96 fe ff       	call   c0006092 <f_stat>
c001c9c1:	83 c4 10             	add    esp,0x10
c001c9c4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c9cb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c9d2:	85 c0                	test   eax,eax
c001c9d4:	75 06                	jne    c001c9dc <FAT::exists(char const*)+0x64>
c001c9d6:	b0 01                	mov    al,0x1
c001c9d8:	eb 06                	jmp    c001c9e0 <FAT::exists(char const*)+0x68>
c001c9da:	66 90                	xchg   ax,ax
c001c9dc:	b0 00                	mov    al,0x0
c001c9de:	66 90                	xchg   ax,ax
c001c9e0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c9e6:	c3                   	ret    
c001c9e7:	90                   	nop

c001c9e8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c9e8:	b8 08 00 00 00       	mov    eax,0x8
c001c9ed:	c3                   	ret    

c001c9ee <ISO9660::seek(void*, unsigned long long)>:
c001c9ee:	53                   	push   ebx
c001c9ef:	b8 04 00 00 00       	mov    eax,0x4
c001c9f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c9f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c9fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ca00:	85 d2                	test   edx,edx
c001ca02:	74 17                	je     c001ca1b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ca04:	89 c8                	mov    eax,ecx
c001ca06:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001ca09:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001ca0c:	b8 01 00 00 00       	mov    eax,0x1
c001ca11:	73 08                	jae    c001ca1b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001ca13:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001ca16:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ca19:	31 c0                	xor    eax,eax
c001ca1b:	5b                   	pop    ebx
c001ca1c:	c3                   	ret    
c001ca1d:	90                   	nop

c001ca1e <ISO9660::tell(void*, unsigned long long*)>:
c001ca1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ca22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca26:	85 d2                	test   edx,edx
c001ca28:	74 12                	je     c001ca3c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ca2a:	85 c0                	test   eax,eax
c001ca2c:	74 0e                	je     c001ca3c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001ca2e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ca31:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001ca34:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ca37:	89 10                	mov    DWORD PTR [eax],edx
c001ca39:	31 c0                	xor    eax,eax
c001ca3b:	c3                   	ret    
c001ca3c:	b8 04 00 00 00       	mov    eax,0x4
c001ca41:	c3                   	ret    

c001ca42 <ISO9660::getName()>:
c001ca42:	b8 3c 71 02 c0       	mov    eax,0xc002713c
c001ca47:	c3                   	ret    

c001ca48 <ISO9660::stat(void*, unsigned long long*)>:
c001ca48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ca4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca50:	85 d2                	test   edx,edx
c001ca52:	74 12                	je     c001ca66 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ca54:	85 c0                	test   eax,eax
c001ca56:	74 0e                	je     c001ca66 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001ca58:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ca5b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001ca5e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001ca61:	89 10                	mov    DWORD PTR [eax],edx
c001ca63:	31 c0                	xor    eax,eax
c001ca65:	c3                   	ret    
c001ca66:	b8 04 00 00 00       	mov    eax,0x4
c001ca6b:	c3                   	ret    

c001ca6c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001ca6c:	b8 01 00 00 00       	mov    eax,0x1
c001ca71:	c3                   	ret    

c001ca72 <ISO9660::unlink(char const*)>:
c001ca72:	b8 01 00 00 00       	mov    eax,0x1
c001ca77:	c3                   	ret    

c001ca78 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ca78:	b8 01 00 00 00       	mov    eax,0x1
c001ca7d:	c3                   	ret    

c001ca7e <ISO9660::rename(char const*, char const*)>:
c001ca7e:	b8 01 00 00 00       	mov    eax,0x1
c001ca83:	c3                   	ret    

c001ca84 <ISO9660::mkdir(char const*)>:
c001ca84:	b8 01 00 00 00       	mov    eax,0x1
c001ca89:	c3                   	ret    

c001ca8a <ISO9660::close(void*)>:
c001ca8a:	83 ec 0c             	sub    esp,0xc
c001ca8d:	b8 04 00 00 00       	mov    eax,0x4
c001ca92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ca96:	85 d2                	test   edx,edx
c001ca98:	74 0e                	je     c001caa8 <ISO9660::close(void*)+0x1e>
c001ca9a:	83 ec 0c             	sub    esp,0xc
c001ca9d:	52                   	push   edx
c001ca9e:	e8 e0 d2 fe ff       	call   c0009d83 <free>
c001caa3:	83 c4 10             	add    esp,0x10
c001caa6:	31 c0                	xor    eax,eax
c001caa8:	83 c4 0c             	add    esp,0xc
c001caab:	c3                   	ret    

c001caac <ISO9660::closeDir(void*)>:
c001caac:	83 ec 0c             	sub    esp,0xc
c001caaf:	b8 04 00 00 00       	mov    eax,0x4
c001cab4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cab8:	85 d2                	test   edx,edx
c001caba:	74 0e                	je     c001caca <ISO9660::closeDir(void*)+0x1e>
c001cabc:	83 ec 0c             	sub    esp,0xc
c001cabf:	52                   	push   edx
c001cac0:	e8 be d2 fe ff       	call   c0009d83 <free>
c001cac5:	83 c4 10             	add    esp,0x10
c001cac8:	31 c0                	xor    eax,eax
c001caca:	83 c4 0c             	add    esp,0xc
c001cacd:	c3                   	ret    

c001cace <ISO9660::~ISO9660()>:
c001cace:	83 ec 0c             	sub    esp,0xc
c001cad1:	ba 60 71 02 c0       	mov    edx,0xc0027160
c001cad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cada:	89 10                	mov    DWORD PTR [eax],edx
c001cadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae0:	83 ec 0c             	sub    esp,0xc
c001cae3:	50                   	push   eax
c001cae4:	e8 b1 08 ff ff       	call   c000d39a <Filesystem::~Filesystem()>
c001cae9:	83 c4 10             	add    esp,0x10
c001caec:	90                   	nop
c001caed:	83 c4 0c             	add    esp,0xc
c001caf0:	c3                   	ret    
c001caf1:	90                   	nop

c001caf2 <ISO9660::~ISO9660()>:
c001caf2:	83 ec 0c             	sub    esp,0xc
c001caf5:	83 ec 0c             	sub    esp,0xc
c001caf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cafc:	e8 cd ff ff ff       	call   c001cace <ISO9660::~ISO9660()>
c001cb01:	83 c4 10             	add    esp,0x10
c001cb04:	83 ec 08             	sub    esp,0x8
c001cb07:	6a 08                	push   0x8
c001cb09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb0d:	e8 6c 04 ff ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c001cb12:	83 c4 10             	add    esp,0x10
c001cb15:	83 c4 0c             	add    esp,0xc
c001cb18:	c3                   	ret    

c001cb19 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001cb19:	55                   	push   ebp
c001cb1a:	31 c9                	xor    ecx,ecx
c001cb1c:	57                   	push   edi
c001cb1d:	56                   	push   esi
c001cb1e:	53                   	push   ebx
c001cb1f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001cb23:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cb27:	89 eb                	mov    ebx,ebp
c001cb29:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001cb2d:	39 ce                	cmp    esi,ecx
c001cb2f:	7e 17                	jle    c001cb48 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001cb31:	31 d2                	xor    edx,edx
c001cb33:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001cb37:	7d 13                	jge    c001cb4c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001cb39:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cb3d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001cb40:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001cb43:	75 0d                	jne    c001cb52 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001cb45:	42                   	inc    edx
c001cb46:	eb eb                	jmp    c001cb33 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001cb48:	31 c0                	xor    eax,eax
c001cb4a:	eb 0a                	jmp    c001cb56 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001cb4c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001cb50:	eb 04                	jmp    c001cb56 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001cb52:	41                   	inc    ecx
c001cb53:	43                   	inc    ebx
c001cb54:	eb d7                	jmp    c001cb2d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001cb56:	5b                   	pop    ebx
c001cb57:	5e                   	pop    esi
c001cb58:	5f                   	pop    edi
c001cb59:	5d                   	pop    ebp
c001cb5a:	c3                   	ret    

c001cb5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001cb5b:	57                   	push   edi
c001cb5c:	56                   	push   esi
c001cb5d:	53                   	push   ebx
c001cb5e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cb62:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cb66:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001cb6a:	39 35 a0 a3 02 c0    	cmp    DWORD PTR ds:0xc002a3a0,esi
c001cb70:	75 08                	jne    c001cb7a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001cb72:	38 1d b4 86 02 c0    	cmp    BYTE PTR ds:0xc00286b4,bl
c001cb78:	74 4a                	je     c001cbc4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001cb7a:	83 ec 0c             	sub    esp,0xc
c001cb7d:	31 d2                	xor    edx,edx
c001cb7f:	68 c0 a3 02 c0       	push   0xc002a3c0
c001cb84:	0f be c3             	movsx  eax,bl
c001cb87:	6a 01                	push   0x1
c001cb89:	52                   	push   edx
c001cb8a:	56                   	push   esi
c001cb8b:	ff 34 85 3c 91 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ec4]
c001cb92:	e8 3b 3e ff ff       	call   c00109d2 <LogicalDisk::read(unsigned long long, int, void*)>
c001cb97:	83 c4 20             	add    esp,0x20
c001cb9a:	85 c0                	test   eax,eax
c001cb9c:	75 0e                	jne    c001cbac <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001cb9e:	89 35 a0 a3 02 c0    	mov    DWORD PTR ds:0xc002a3a0,esi
c001cba4:	88 1d b4 86 02 c0    	mov    BYTE PTR ds:0xc00286b4,bl
c001cbaa:	eb 18                	jmp    c001cbc4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001cbac:	50                   	push   eax
c001cbad:	68 00 08 00 00       	push   0x800
c001cbb2:	6a 00                	push   0x0
c001cbb4:	57                   	push   edi
c001cbb5:	e8 da 3a fe ff       	call   c0000694 <memset>
c001cbba:	83 c4 10             	add    esp,0x10
c001cbbd:	b8 01 00 00 00       	mov    eax,0x1
c001cbc2:	eb 0e                	jmp    c001cbd2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001cbc4:	be c0 a3 02 c0       	mov    esi,0xc002a3c0
c001cbc9:	b9 00 08 00 00       	mov    ecx,0x800
c001cbce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001cbd0:	31 c0                	xor    eax,eax
c001cbd2:	5b                   	pop    ebx
c001cbd3:	5e                   	pop    esi
c001cbd4:	5f                   	pop    edi
c001cbd5:	c3                   	ret    

c001cbd6 <ISO9660::tryMount(LogicalDisk*, int)>:
c001cbd6:	81 ec 10 08 00 00    	sub    esp,0x810
c001cbdc:	c7 05 a0 a3 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002a3a0,0xdeadbeef
c001cbe6:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001cbed:	83 c0 41             	add    eax,0x41
c001cbf0:	0f be c0             	movsx  eax,al
c001cbf3:	50                   	push   eax
c001cbf4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001cbf8:	50                   	push   eax
c001cbf9:	6a 10                	push   0x10
c001cbfb:	e8 5b ff ff ff       	call   c001cb5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cc00:	83 c4 10             	add    esp,0x10
c001cc03:	31 d2                	xor    edx,edx
c001cc05:	85 c0                	test   eax,eax
c001cc07:	75 24                	jne    c001cc2d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cc09:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001cc0e:	75 1d                	jne    c001cc2d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cc10:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001cc15:	75 16                	jne    c001cc2d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cc17:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001cc1c:	75 0f                	jne    c001cc2d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cc1e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001cc23:	75 08                	jne    c001cc2d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001cc25:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001cc2a:	0f 94 c2             	sete   dl
c001cc2d:	88 d0                	mov    al,dl
c001cc2f:	81 c4 0c 08 00 00    	add    esp,0x80c
c001cc35:	c3                   	ret    

c001cc36 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001cc36:	55                   	push   ebp
c001cc37:	57                   	push   edi
c001cc38:	56                   	push   esi
c001cc39:	53                   	push   ebx
c001cc3a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001cc40:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001cc47:	85 ed                	test   ebp,ebp
c001cc49:	0f 84 da 01 00 00    	je     c001ce29 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001cc4f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001cc57:	0f 84 cc 01 00 00    	je     c001ce29 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001cc5d:	b8 01 00 00 00       	mov    eax,0x1
c001cc62:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001cc66:	0f 85 c2 01 00 00    	jne    c001ce2e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001cc6c:	31 d2                	xor    edx,edx
c001cc6e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001cc75:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001cc78:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001cc7b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001cc7e:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc81:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001cc85:	01 c8                	add    eax,ecx
c001cc87:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001cc8a:	11 da                	adc    edx,ebx
c001cc8c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001cc90:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001cc94:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cc98:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001cc9c:	19 d7                	sbb    edi,edx
c001cc9e:	72 11                	jb     c001ccb1 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001cca0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001cca3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001cca7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ccaf:	eb 0c                	jmp    c001ccbd <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001ccb1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001ccb5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ccb9:	29 ce                	sub    esi,ecx
c001ccbb:	19 df                	sbb    edi,ebx
c001ccbd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ccc0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001ccc3:	0f a4 c2 0b          	shld   edx,eax,0xb
c001ccc7:	c1 e0 0b             	shl    eax,0xb
c001ccca:	01 c8                	add    eax,ecx
c001cccc:	11 da                	adc    edx,ebx
c001ccce:	89 04 24             	mov    DWORD PTR [esp],eax
c001ccd1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ccd5:	51                   	push   ecx
c001ccd6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ccda:	50                   	push   eax
c001ccdb:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001ccdf:	53                   	push   ebx
c001cce0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cce4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cce8:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ccec:	50                   	push   eax
c001cced:	e8 69 fe ff ff       	call   c001cb5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ccf2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001ccf5:	b8 00 08 00 00       	mov    eax,0x800
c001ccfa:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001cd00:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001cd04:	29 d0                	sub    eax,edx
c001cd06:	83 c4 10             	add    esp,0x10
c001cd09:	89 f9                	mov    ecx,edi
c001cd0b:	39 c6                	cmp    esi,eax
c001cd0d:	83 d9 00             	sbb    ecx,0x0
c001cd10:	7d 1b                	jge    c001cd2d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001cd12:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001cd17:	75 12                	jne    c001cd2b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001cd19:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001cd20:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cd26:	e9 fa 00 00 00       	jmp    c001ce25 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001cd2b:	89 f0                	mov    eax,esi
c001cd2d:	01 d3                	add    ebx,edx
c001cd2f:	31 d2                	xor    edx,edx
c001cd31:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001cd35:	39 c2                	cmp    edx,eax
c001cd37:	7d 14                	jge    c001cd4d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001cd39:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001cd40:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cd44:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001cd47:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001cd4a:	42                   	inc    edx
c001cd4b:	eb e8                	jmp    c001cd35 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001cd4d:	89 c2                	mov    edx,eax
c001cd4f:	85 c0                	test   eax,eax
c001cd51:	79 02                	jns    c001cd55 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001cd53:	31 d2                	xor    edx,edx
c001cd55:	01 c2                	add    edx,eax
c001cd57:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001cd5a:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001cd61:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001cd65:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001cd69:	99                   	cdq    
c001cd6a:	01 c1                	add    ecx,eax
c001cd6c:	11 d3                	adc    ebx,edx
c001cd6e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001cd72:	29 c6                	sub    esi,eax
c001cd74:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001cd78:	19 d7                	sbb    edi,edx
c001cd7a:	89 34 24             	mov    DWORD PTR [esp],esi
c001cd7d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001cd81:	b8 ff 07 00 00       	mov    eax,0x7ff
c001cd86:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001cd89:	b8 00 00 00 00       	mov    eax,0x0
c001cd8e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001cd92:	7d 43                	jge    c001cdd7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001cd94:	52                   	push   edx
c001cd95:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cd99:	50                   	push   eax
c001cd9a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cda2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cda6:	0f ac d0 0b          	shrd   eax,edx,0xb
c001cdaa:	50                   	push   eax
c001cdab:	e8 ab fd ff ff       	call   c001cb5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cdb0:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001cdb8:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001cdbd:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001cdc5:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001cdcd:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001cdd2:	83 c4 10             	add    esp,0x10
c001cdd5:	eb aa                	jmp    c001cd81 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001cdd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cddb:	0b 04 24             	or     eax,DWORD PTR [esp]
c001cdde:	74 2a                	je     c001ce0a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001cde0:	50                   	push   eax
c001cde1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cde5:	50                   	push   eax
c001cde6:	8d 74 24 28          	lea    esi,[esp+0x28]
c001cdea:	56                   	push   esi
c001cdeb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cdef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cdf3:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001cdf7:	51                   	push   ecx
c001cdf8:	e8 5e fd ff ff       	call   c001cb5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cdfd:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ce01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ce05:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ce07:	83 c4 10             	add    esp,0x10
c001ce0a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ce11:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ce15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ce19:	89 18                	mov    DWORD PTR [eax],ebx
c001ce1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ce1f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001ce22:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001ce25:	31 c0                	xor    eax,eax
c001ce27:	eb 05                	jmp    c001ce2e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001ce29:	b8 04 00 00 00       	mov    eax,0x4
c001ce2e:	81 c4 2c 08 00 00    	add    esp,0x82c
c001ce34:	5b                   	pop    ebx
c001ce35:	5e                   	pop    esi
c001ce36:	5f                   	pop    edi
c001ce37:	5d                   	pop    ebp
c001ce38:	c3                   	ret    
c001ce39:	90                   	nop

c001ce3a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001ce3a:	55                   	push   ebp
c001ce3b:	57                   	push   edi
c001ce3c:	56                   	push   esi
c001ce3d:	53                   	push   ebx
c001ce3e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001ce44:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001ce4b:	85 ed                	test   ebp,ebp
c001ce4d:	0f 84 51 02 00 00    	je     c001d0a4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001ce53:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001ce5b:	0f 84 43 02 00 00    	je     c001d0a4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001ce61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ce64:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001ce67:	75 0a                	jne    c001ce73 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001ce69:	b8 07 00 00 00       	mov    eax,0x7
c001ce6e:	e9 36 02 00 00       	jmp    c001d0a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001ce73:	50                   	push   eax
c001ce74:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001ce78:	50                   	push   eax
c001ce79:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001ce80:	53                   	push   ebx
c001ce81:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce84:	c1 e0 0b             	shl    eax,0xb
c001ce87:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001ce8a:	c1 e8 0b             	shr    eax,0xb
c001ce8d:	50                   	push   eax
c001ce8e:	e8 c8 fc ff ff       	call   c001cb5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ce93:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ce96:	83 c4 10             	add    esp,0x10
c001ce99:	89 c1                	mov    ecx,eax
c001ce9b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001ce9e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001cea4:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001cea7:	84 db                	test   bl,bl
c001cea9:	0f 85 8b 00 00 00    	jne    c001cf3a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001ceaf:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001ceb5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001ceb8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001cebe:	29 c6                	sub    esi,eax
c001cec0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001cec4:	89 f3                	mov    ebx,esi
c001cec6:	89 f1                	mov    ecx,esi
c001cec8:	c1 fb 1f             	sar    ebx,0x1f
c001cecb:	01 f0                	add    eax,esi
c001cecd:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001ced0:	11 da                	adc    edx,ebx
c001ced2:	89 04 24             	mov    DWORD PTR [esp],eax
c001ced5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ced9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001cedc:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001cedf:	89 d8                	mov    eax,ebx
c001cee1:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001cee5:	ba 00 00 00 00       	mov    edx,0x0
c001ceea:	19 f8                	sbb    eax,edi
c001ceec:	b8 00 00 00 00       	mov    eax,0x0
c001cef1:	73 08                	jae    c001cefb <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001cef3:	89 f0                	mov    eax,esi
c001cef5:	89 fa                	mov    edx,edi
c001cef7:	29 c8                	sub    eax,ecx
c001cef9:	19 da                	sbb    edx,ebx
c001cefb:	89 d7                	mov    edi,edx
c001cefd:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001cf00:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001cf03:	09 c7                	or     edi,eax
c001cf05:	0f 84 5e ff ff ff    	je     c001ce69 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001cf0b:	57                   	push   edi
c001cf0c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001cf10:	50                   	push   eax
c001cf11:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001cf18:	53                   	push   ebx
c001cf19:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf1c:	c1 e0 0b             	shl    eax,0xb
c001cf1f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001cf23:	c1 e8 0b             	shr    eax,0xb
c001cf26:	50                   	push   eax
c001cf27:	e8 2f fc ff ff       	call   c001cb5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001cf2c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cf2f:	83 c4 10             	add    esp,0x10
c001cf32:	25 ff 07 00 00       	and    eax,0x7ff
c001cf37:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001cf3a:	31 ff                	xor    edi,edi
c001cf3c:	56                   	push   esi
c001cf3d:	6a 28                	push   0x28
c001cf3f:	6a 00                	push   0x0
c001cf41:	8d 44 24 24          	lea    eax,[esp+0x24]
c001cf45:	50                   	push   eax
c001cf46:	e8 49 37 fe ff       	call   c0000694 <memset>
c001cf4b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cf4e:	25 ff 07 00 00       	and    eax,0x7ff
c001cf53:	89 c6                	mov    esi,eax
c001cf55:	83 c6 21             	add    esi,0x21
c001cf58:	83 d7 00             	adc    edi,0x0
c001cf5b:	83 c4 10             	add    esp,0x10
c001cf5e:	31 c9                	xor    ecx,ecx
c001cf60:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001cf67:	83 f9 28             	cmp    ecx,0x28
c001cf6a:	88 04 24             	mov    BYTE PTR [esp],al
c001cf6d:	0f 94 c2             	sete   dl
c001cf70:	88 d0                	mov    al,dl
c001cf72:	ba ff 07 00 00       	mov    edx,0x7ff
c001cf77:	39 f2                	cmp    edx,esi
c001cf79:	ba 00 00 00 00       	mov    edx,0x0
c001cf7e:	19 fa                	sbb    edx,edi
c001cf80:	0f 92 c2             	setb   dl
c001cf83:	09 c2                	or     edx,eax
c001cf85:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001cf89:	0f 94 c0             	sete   al
c001cf8c:	08 d0                	or     al,dl
c001cf8e:	75 16                	jne    c001cfa6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cf90:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001cf94:	74 10                	je     c001cfa6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001cf96:	8a 04 24             	mov    al,BYTE PTR [esp]
c001cf99:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001cf9d:	41                   	inc    ecx
c001cf9e:	83 c6 01             	add    esi,0x1
c001cfa1:	83 d7 00             	adc    edi,0x0
c001cfa4:	eb ba                	jmp    c001cf60 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001cfa6:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001cfad:	83 ec 0c             	sub    esp,0xc
c001cfb0:	8d 74 24 24          	lea    esi,[esp+0x24]
c001cfb4:	56                   	push   esi
c001cfb5:	e8 f6 36 fe ff       	call   c00006b0 <strlen>
c001cfba:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001cfc1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cfc5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001cfcd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cfd0:	5a                   	pop    edx
c001cfd1:	25 ff 07 00 00       	and    eax,0x7ff
c001cfd6:	59                   	pop    ecx
c001cfd7:	01 f8                	add    eax,edi
c001cfd9:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001cfdf:	83 e0 02             	and    eax,0x2
c001cfe2:	3c 01                	cmp    al,0x1
c001cfe4:	19 c0                	sbb    eax,eax
c001cfe6:	83 c0 02             	add    eax,0x2
c001cfe9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001cfed:	56                   	push   esi
c001cfee:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cff2:	50                   	push   eax
c001cff3:	e8 58 37 fe ff       	call   c0000750 <strcpy>
c001cff8:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001cffc:	83 c4 10             	add    esp,0x10
c001cfff:	84 c0                	test   al,al
c001d001:	75 21                	jne    c001d024 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001d003:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001d00b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d013:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001d01b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001d022:	eb 28                	jmp    c001d04c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001d024:	fe c8                	dec    al
c001d026:	75 24                	jne    c001d04c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001d028:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001d030:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d038:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001d040:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001d047:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001d04c:	8d 74 24 40          	lea    esi,[esp+0x40]
c001d050:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001d057:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001d05e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d060:	0f b6 f3             	movzx  esi,bl
c001d063:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001d06a:	31 db                	xor    ebx,ebx
c001d06c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001d072:	89 df                	mov    edi,ebx
c001d074:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001d077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d07a:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001d07d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d080:	39 c6                	cmp    esi,eax
c001d082:	19 d7                	sbb    edi,edx
c001d084:	72 10                	jb     c001d096 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001d086:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001d08d:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001d094:	eb 0a                	jmp    c001d0a0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001d096:	29 f0                	sub    eax,esi
c001d098:	19 da                	sbb    edx,ebx
c001d09a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001d09d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001d0a0:	31 c0                	xor    eax,eax
c001d0a2:	eb 05                	jmp    c001d0a9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001d0a4:	b8 04 00 00 00       	mov    eax,0x4
c001d0a9:	81 c4 5c 09 00 00    	add    esp,0x95c
c001d0af:	5b                   	pop    ebx
c001d0b0:	5e                   	pop    esi
c001d0b1:	5f                   	pop    edi
c001d0b2:	5d                   	pop    ebp
c001d0b3:	c3                   	ret    

c001d0b4 <readRoot(unsigned int*, unsigned int*, char)>:
c001d0b4:	57                   	push   edi
c001d0b5:	56                   	push   esi
c001d0b6:	81 ec 38 08 00 00    	sub    esp,0x838
c001d0bc:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001d0c4:	50                   	push   eax
c001d0c5:	8d 44 24 38          	lea    eax,[esp+0x38]
c001d0c9:	50                   	push   eax
c001d0ca:	6a 10                	push   0x10
c001d0cc:	e8 8a fa ff ff       	call   c001cb5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d0d1:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001d0d8:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001d0dc:	b9 22 00 00 00       	mov    ecx,0x22
c001d0e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d0e3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001d0ea:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d0ee:	89 10                	mov    DWORD PTR [eax],edx
c001d0f0:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001d0f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d0fb:	89 10                	mov    DWORD PTR [eax],edx
c001d0fd:	81 c4 44 08 00 00    	add    esp,0x844
c001d103:	b0 01                	mov    al,0x1
c001d105:	5e                   	pop    esi
c001d106:	5f                   	pop    edi
c001d107:	c3                   	ret    

c001d108 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001d108:	55                   	push   ebp
c001d109:	57                   	push   edi
c001d10a:	56                   	push   esi
c001d10b:	53                   	push   ebx
c001d10c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001d112:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001d119:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001d120:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d124:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001d128:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d12c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d130:	75 03                	jne    c001d135 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001d132:	83 c3 02             	add    ebx,0x2
c001d135:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001d138:	75 03                	jne    c001d13d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001d13a:	43                   	inc    ebx
c001d13b:	eb f8                	jmp    c001d135 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001d13d:	52                   	push   edx
c001d13e:	68 00 01 00 00       	push   0x100
c001d143:	6a 00                	push   0x0
c001d145:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d149:	50                   	push   eax
c001d14a:	e8 45 35 fe ff       	call   c0000694 <memset>
c001d14f:	83 c4 10             	add    esp,0x10
c001d152:	31 d2                	xor    edx,edx
c001d154:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001d157:	84 c0                	test   al,al
c001d159:	74 21                	je     c001d17c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001d15b:	3c 2f                	cmp    al,0x2f
c001d15d:	75 0b                	jne    c001d16a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001d15f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001d163:	bd 01 00 00 00       	mov    ebp,0x1
c001d168:	eb 14                	jmp    c001d17e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001d16a:	8d 48 9f             	lea    ecx,[eax-0x61]
c001d16d:	80 f9 19             	cmp    cl,0x19
c001d170:	77 03                	ja     c001d175 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001d172:	83 e8 20             	sub    eax,0x20
c001d175:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001d179:	42                   	inc    edx
c001d17a:	eb d8                	jmp    c001d154 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001d17c:	31 ed                	xor    ebp,ebp
c001d17e:	83 ec 0c             	sub    esp,0xc
c001d181:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001d188:	e8 e6 cb fe ff       	call   c0009d73 <malloc>
c001d18d:	89 c6                	mov    esi,eax
c001d18f:	89 c2                	mov    edx,eax
c001d191:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001d198:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001d19e:	c1 ef 0b             	shr    edi,0xb
c001d1a1:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001d1a8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001d1ac:	83 c4 10             	add    esp,0x10
c001d1af:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001d1b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d1b8:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001d1bf:	74 29                	je     c001d1ea <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001d1c1:	50                   	push   eax
c001d1c2:	57                   	push   edi
c001d1c3:	52                   	push   edx
c001d1c4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d1c8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001d1cf:	e8 87 f9 ff ff       	call   c001cb5b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001d1d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1d8:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001d1df:	81 c2 00 08 00 00    	add    edx,0x800
c001d1e5:	83 c4 10             	add    esp,0x10
c001d1e8:	eb ca                	jmp    c001d1b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001d1ea:	83 ec 0c             	sub    esp,0xc
c001d1ed:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001d1f1:	57                   	push   edi
c001d1f2:	e8 b9 34 fe ff       	call   c00006b0 <strlen>
c001d1f7:	50                   	push   eax
c001d1f8:	57                   	push   edi
c001d1f9:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001d200:	56                   	push   esi
c001d201:	e8 13 f9 ff ff       	call   c001cb19 <__memmem(unsigned char*, int, unsigned char*, int)>
c001d206:	83 c4 20             	add    esp,0x20
c001d209:	85 c0                	test   eax,eax
c001d20b:	75 13                	jne    c001d220 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001d20d:	83 ec 0c             	sub    esp,0xc
c001d210:	56                   	push   esi
c001d211:	e8 6d cb fe ff       	call   c0009d83 <free>
c001d216:	83 c4 10             	add    esp,0x10
c001d219:	31 c0                	xor    eax,eax
c001d21b:	e9 b3 00 00 00       	jmp    c001d2d3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001d220:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001d224:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001d228:	c1 e7 08             	shl    edi,0x8
c001d22b:	c1 e2 10             	shl    edx,0x10
c001d22e:	09 d7                	or     edi,edx
c001d230:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001d234:	09 d7                	or     edi,edx
c001d236:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001d23a:	c1 e2 18             	shl    edx,0x18
c001d23d:	09 d7                	or     edi,edx
c001d23f:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001d243:	89 d1                	mov    ecx,edx
c001d245:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001d249:	c1 e1 08             	shl    ecx,0x8
c001d24c:	c1 e2 10             	shl    edx,0x10
c001d24f:	09 ca                	or     edx,ecx
c001d251:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001d255:	09 ca                	or     edx,ecx
c001d257:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001d25b:	c1 e1 18             	shl    ecx,0x18
c001d25e:	09 ca                	or     edx,ecx
c001d260:	89 e9                	mov    ecx,ebp
c001d262:	84 c9                	test   cl,cl
c001d264:	74 3c                	je     c001d2a2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001d266:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d26a:	83 ec 0c             	sub    esp,0xc
c001d26d:	56                   	push   esi
c001d26e:	e8 10 cb fe ff       	call   c0009d83 <free>
c001d273:	83 c4 0c             	add    esp,0xc
c001d276:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d27d:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001d282:	50                   	push   eax
c001d283:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d28a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001d291:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d295:	52                   	push   edx
c001d296:	57                   	push   edi
c001d297:	53                   	push   ebx
c001d298:	e8 6b fe ff ff       	call   c001d108 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d29d:	83 c4 20             	add    esp,0x20
c001d2a0:	eb 31                	jmp    c001d2d3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001d2a2:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001d2a5:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001d2ac:	d0 e8                	shr    al,1
c001d2ae:	89 3b                	mov    DWORD PTR [ebx],edi
c001d2b0:	83 e0 01             	and    eax,0x1
c001d2b3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001d2ba:	83 ec 0c             	sub    esp,0xc
c001d2bd:	89 13                	mov    DWORD PTR [ebx],edx
c001d2bf:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001d2c6:	89 03                	mov    DWORD PTR [ebx],eax
c001d2c8:	56                   	push   esi
c001d2c9:	e8 b5 ca fe ff       	call   c0009d83 <free>
c001d2ce:	83 c4 10             	add    esp,0x10
c001d2d1:	b0 01                	mov    al,0x1
c001d2d3:	81 c4 1c 01 00 00    	add    esp,0x11c
c001d2d9:	5b                   	pop    ebx
c001d2da:	5e                   	pop    esi
c001d2db:	5f                   	pop    edi
c001d2dc:	5d                   	pop    ebp
c001d2dd:	c3                   	ret    

c001d2de <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001d2de:	55                   	push   ebp
c001d2df:	57                   	push   edi
c001d2e0:	56                   	push   esi
c001d2e1:	53                   	push   ebx
c001d2e2:	83 ec 20             	sub    esp,0x20
c001d2e5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d2e9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001d2ed:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d2f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d2f9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d301:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001d306:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001d30c:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001d312:	57                   	push   edi
c001d313:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d317:	50                   	push   eax
c001d318:	8d 44 24 14          	lea    eax,[esp+0x14]
c001d31c:	50                   	push   eax
c001d31d:	e8 92 fd ff ff       	call   c001d0b4 <readRoot(unsigned int*, unsigned int*, char)>
c001d322:	5a                   	pop    edx
c001d323:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d327:	e8 84 33 fe ff       	call   c00006b0 <strlen>
c001d32c:	83 c4 10             	add    esp,0x10
c001d32f:	83 f8 03             	cmp    eax,0x3
c001d332:	77 17                	ja     c001d34b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001d334:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d338:	89 03                	mov    DWORD PTR [ebx],eax
c001d33a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d33e:	89 06                	mov    DWORD PTR [esi],eax
c001d340:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001d347:	b0 01                	mov    al,0x1
c001d349:	eb 19                	jmp    c001d364 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001d34b:	50                   	push   eax
c001d34c:	55                   	push   ebp
c001d34d:	57                   	push   edi
c001d34e:	56                   	push   esi
c001d34f:	53                   	push   ebx
c001d350:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d354:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d358:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d35c:	e8 a7 fd ff ff       	call   c001d108 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001d361:	83 c4 20             	add    esp,0x20
c001d364:	83 c4 1c             	add    esp,0x1c
c001d367:	5b                   	pop    ebx
c001d368:	5e                   	pop    esi
c001d369:	5f                   	pop    edi
c001d36a:	5d                   	pop    ebp
c001d36b:	c3                   	ret    

c001d36c <ISO9660::open(char const*, void**, FileOpenMode)>:
c001d36c:	57                   	push   edi
c001d36d:	56                   	push   esi
c001d36e:	53                   	push   ebx
c001d36f:	83 ec 10             	sub    esp,0x10
c001d372:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d376:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d37a:	85 ff                	test   edi,edi
c001d37c:	0f 84 8b 00 00 00    	je     c001d40d <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d382:	85 f6                	test   esi,esi
c001d384:	0f 84 83 00 00 00    	je     c001d40d <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001d38a:	b8 03 00 00 00       	mov    eax,0x3
c001d38f:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001d394:	75 7c                	jne    c001d412 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d396:	83 ec 0c             	sub    esp,0xc
c001d399:	6a 1c                	push   0x1c
c001d39b:	e8 d3 c9 fe ff       	call   c0009d73 <malloc>
c001d3a0:	89 07                	mov    DWORD PTR [edi],eax
c001d3a2:	89 c3                	mov    ebx,eax
c001d3a4:	58                   	pop    eax
c001d3a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d3a9:	50                   	push   eax
c001d3aa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d3ad:	50                   	push   eax
c001d3ae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d3b2:	50                   	push   eax
c001d3b3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d3b7:	50                   	push   eax
c001d3b8:	56                   	push   esi
c001d3b9:	e8 20 ff ff ff       	call   c001d2de <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d3be:	83 c4 20             	add    esp,0x20
c001d3c1:	84 c0                	test   al,al
c001d3c3:	74 07                	je     c001d3cc <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001d3c5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d3ca:	74 0b                	je     c001d3d7 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001d3cc:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d3d0:	b8 01 00 00 00       	mov    eax,0x1
c001d3d5:	eb 3b                	jmp    c001d412 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d3d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d3db:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d3df:	89 03                	mov    DWORD PTR [ebx],eax
c001d3e1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d3e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d3ec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d3f3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d3fa:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d3fd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d404:	8a 06                	mov    al,BYTE PTR [esi]
c001d406:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d409:	31 c0                	xor    eax,eax
c001d40b:	eb 05                	jmp    c001d412 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001d40d:	b8 04 00 00 00       	mov    eax,0x4
c001d412:	83 c4 10             	add    esp,0x10
c001d415:	5b                   	pop    ebx
c001d416:	5e                   	pop    esi
c001d417:	5f                   	pop    edi
c001d418:	c3                   	ret    
c001d419:	90                   	nop

c001d41a <ISO9660::exists(char const*)>:
c001d41a:	83 ec 28             	sub    esp,0x28
c001d41d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d421:	8d 54 24 18          	lea    edx,[esp+0x18]
c001d425:	52                   	push   edx
c001d426:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001d429:	52                   	push   edx
c001d42a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d42e:	52                   	push   edx
c001d42f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001d433:	52                   	push   edx
c001d434:	50                   	push   eax
c001d435:	e8 a4 fe ff ff       	call   c001d2de <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d43a:	83 c4 3c             	add    esp,0x3c
c001d43d:	c3                   	ret    

c001d43e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001d43e:	56                   	push   esi
c001d43f:	53                   	push   ebx
c001d440:	83 ec 14             	sub    esp,0x14
c001d443:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d447:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d44b:	85 db                	test   ebx,ebx
c001d44d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d451:	0f 94 c2             	sete   dl
c001d454:	85 f6                	test   esi,esi
c001d456:	0f 94 c0             	sete   al
c001d459:	08 c2                	or     dl,al
c001d45b:	75 68                	jne    c001d4c5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d45d:	85 c9                	test   ecx,ecx
c001d45f:	74 64                	je     c001d4c5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001d461:	83 ec 0c             	sub    esp,0xc
c001d464:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001d467:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d46b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d471:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d478:	50                   	push   eax
c001d479:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001d47c:	50                   	push   eax
c001d47d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d481:	50                   	push   eax
c001d482:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d486:	50                   	push   eax
c001d487:	51                   	push   ecx
c001d488:	e8 51 fe ff ff       	call   c001d2de <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d48d:	83 c4 20             	add    esp,0x20
c001d490:	ba 01 00 00 00       	mov    edx,0x1
c001d495:	84 c0                	test   al,al
c001d497:	74 31                	je     c001d4ca <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d499:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d49d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d4a4:	89 03                	mov    DWORD PTR [ebx],eax
c001d4a6:	ba 00 00 00 00       	mov    edx,0x0
c001d4ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4af:	85 c0                	test   eax,eax
c001d4b1:	0f 95 06             	setne  BYTE PTR [esi]
c001d4b4:	74 14                	je     c001d4ca <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d4b6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001d4bc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d4c3:	eb 05                	jmp    c001d4ca <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001d4c5:	ba 04 00 00 00       	mov    edx,0x4
c001d4ca:	83 c4 14             	add    esp,0x14
c001d4cd:	89 d0                	mov    eax,edx
c001d4cf:	5b                   	pop    ebx
c001d4d0:	5e                   	pop    esi
c001d4d1:	c3                   	ret    

c001d4d2 <ISO9660::openDir(char const*, void**)>:
c001d4d2:	57                   	push   edi
c001d4d3:	56                   	push   esi
c001d4d4:	53                   	push   ebx
c001d4d5:	83 ec 10             	sub    esp,0x10
c001d4d8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d4dc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d4e0:	85 ff                	test   edi,edi
c001d4e2:	74 7b                	je     c001d55f <ISO9660::openDir(char const*, void**)+0x8d>
c001d4e4:	85 f6                	test   esi,esi
c001d4e6:	74 77                	je     c001d55f <ISO9660::openDir(char const*, void**)+0x8d>
c001d4e8:	83 ec 0c             	sub    esp,0xc
c001d4eb:	6a 1c                	push   0x1c
c001d4ed:	e8 81 c8 fe ff       	call   c0009d73 <malloc>
c001d4f2:	89 07                	mov    DWORD PTR [edi],eax
c001d4f4:	89 c3                	mov    ebx,eax
c001d4f6:	58                   	pop    eax
c001d4f7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d4fb:	50                   	push   eax
c001d4fc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001d4ff:	50                   	push   eax
c001d500:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d504:	50                   	push   eax
c001d505:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d509:	50                   	push   eax
c001d50a:	56                   	push   esi
c001d50b:	e8 ce fd ff ff       	call   c001d2de <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001d510:	83 c4 20             	add    esp,0x20
c001d513:	84 c0                	test   al,al
c001d515:	74 07                	je     c001d51e <ISO9660::openDir(char const*, void**)+0x4c>
c001d517:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d51c:	75 0b                	jne    c001d529 <ISO9660::openDir(char const*, void**)+0x57>
c001d51e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001d522:	b8 01 00 00 00       	mov    eax,0x1
c001d527:	eb 3b                	jmp    c001d564 <ISO9660::openDir(char const*, void**)+0x92>
c001d529:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d52d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001d531:	89 03                	mov    DWORD PTR [ebx],eax
c001d533:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001d53a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d53e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001d545:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d54c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d54f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d556:	8a 06                	mov    al,BYTE PTR [esi]
c001d558:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001d55b:	31 c0                	xor    eax,eax
c001d55d:	eb 05                	jmp    c001d564 <ISO9660::openDir(char const*, void**)+0x92>
c001d55f:	b8 04 00 00 00       	mov    eax,0x4
c001d564:	83 c4 10             	add    esp,0x10
c001d567:	5b                   	pop    ebx
c001d568:	5e                   	pop    esi
c001d569:	5f                   	pop    edi
c001d56a:	c3                   	ret    
c001d56b:	90                   	nop

c001d56c <ISO9660::ISO9660()>:
c001d56c:	83 ec 0c             	sub    esp,0xc
c001d56f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d573:	83 ec 0c             	sub    esp,0xc
c001d576:	50                   	push   eax
c001d577:	e8 fa fd fe ff       	call   c000d376 <Filesystem::Filesystem()>
c001d57c:	83 c4 10             	add    esp,0x10
c001d57f:	ba 60 71 02 c0       	mov    edx,0xc0027160
c001d584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d588:	89 10                	mov    DWORD PTR [eax],edx
c001d58a:	90                   	nop
c001d58b:	83 c4 0c             	add    esp,0xc
c001d58e:	c3                   	ret    
c001d58f:	90                   	nop

c001d590 <SoundCard::beginPlayback()>:
c001d590:	c7 44 24 04 c0 71 02 c0 	mov    DWORD PTR [esp+0x4],0xc00271c0
c001d598:	e9 94 7b ff ff       	jmp    c0015131 <Krnl::panic(char const*)>
c001d59d:	90                   	nop

c001d59e <SoundCard::stopPlayback()>:
c001d59e:	c7 44 24 04 f4 71 02 c0 	mov    DWORD PTR [esp+0x4],0xc00271f4
c001d5a6:	e9 86 7b ff ff       	jmp    c0015131 <Krnl::panic(char const*)>
c001d5ab:	90                   	nop

c001d5ac <SoundCard::SoundCard(char const*)>:
c001d5ac:	83 ec 1c             	sub    esp,0x1c
c001d5af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5b3:	83 ec 08             	sub    esp,0x8
c001d5b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5ba:	50                   	push   eax
c001d5bb:	e8 16 12 ff ff       	call   c000e7d6 <Device::Device(char const*)>
c001d5c0:	83 c4 10             	add    esp,0x10
c001d5c3:	ba 8c 72 02 c0       	mov    edx,0xc002728c
c001d5c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5cc:	89 10                	mov    DWORD PTR [eax],edx
c001d5ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5d2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d5d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5dd:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001d5e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5eb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001d5f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d5f9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001d603:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d607:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001d611:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d619:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001d61e:	7f 19                	jg     c001d639 <SoundCard::SoundCard(char const*)+0x8d>
c001d620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d628:	83 c2 54             	add    edx,0x54
c001d62b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001d633:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d637:	eb e0                	jmp    c001d619 <SoundCard::SoundCard(char const*)+0x6d>
c001d639:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d63d:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001d644:	90                   	nop
c001d645:	83 c4 1c             	add    esp,0x1c
c001d648:	c3                   	ret    
c001d649:	90                   	nop

c001d64a <SoundCard::~SoundCard()>:
c001d64a:	83 ec 0c             	sub    esp,0xc
c001d64d:	ba 8c 72 02 c0       	mov    edx,0xc002728c
c001d652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d656:	89 10                	mov    DWORD PTR [eax],edx
c001d658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d65c:	83 ec 0c             	sub    esp,0xc
c001d65f:	50                   	push   eax
c001d660:	e8 3b 0e ff ff       	call   c000e4a0 <Device::~Device()>
c001d665:	83 c4 10             	add    esp,0x10
c001d668:	90                   	nop
c001d669:	83 c4 0c             	add    esp,0xc
c001d66c:	c3                   	ret    
c001d66d:	90                   	nop

c001d66e <SoundCard::~SoundCard()>:
c001d66e:	83 ec 0c             	sub    esp,0xc
c001d671:	83 ec 0c             	sub    esp,0xc
c001d674:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d678:	e8 cd ff ff ff       	call   c001d64a <SoundCard::~SoundCard()>
c001d67d:	83 c4 10             	add    esp,0x10
c001d680:	83 ec 08             	sub    esp,0x8
c001d683:	68 e8 01 00 00       	push   0x1e8
c001d688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d68c:	e8 ed f8 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c001d691:	83 c4 10             	add    esp,0x10
c001d694:	83 c4 0c             	add    esp,0xc
c001d697:	c3                   	ret    

c001d698 <SoundCard::configureRates(int, int, int)>:
c001d698:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d69c:	31 c0                	xor    eax,eax
c001d69e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001d6a5:	75 20                	jne    c001d6c7 <SoundCard::configureRates(int, int, int)+0x2f>
c001d6a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d6ab:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001d6b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d6b5:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001d6bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6bf:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001d6c5:	b0 01                	mov    al,0x1
c001d6c7:	c3                   	ret    

c001d6c8 <SoundCard::getSamples16(int, short*)>:
c001d6c8:	55                   	push   ebp
c001d6c9:	57                   	push   edi
c001d6ca:	31 ff                	xor    edi,edi
c001d6cc:	56                   	push   esi
c001d6cd:	53                   	push   ebx
c001d6ce:	31 db                	xor    ebx,ebx
c001d6d0:	83 ec 18             	sub    esp,0x18
c001d6d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d6d7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d6db:	68 27 72 02 c0       	push   0xc0027227
c001d6e0:	e8 7a f9 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001d6e5:	83 c4 0c             	add    esp,0xc
c001d6e8:	8d 04 36             	lea    eax,[esi+esi*1]
c001d6eb:	50                   	push   eax
c001d6ec:	6a 00                	push   0x0
c001d6ee:	55                   	push   ebp
c001d6ef:	e8 a0 2f fe ff       	call   c0000694 <memset>
c001d6f4:	83 c4 10             	add    esp,0x10
c001d6f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6fb:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001d702:	85 c0                	test   eax,eax
c001d704:	74 1b                	je     c001d721 <SoundCard::getSamples16(int, short*)+0x59>
c001d706:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d70a:	75 15                	jne    c001d721 <SoundCard::getSamples16(int, short*)+0x59>
c001d70c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d710:	55                   	push   ebp
c001d711:	56                   	push   esi
c001d712:	50                   	push   eax
c001d713:	e8 58 03 00 00       	call   c001da70 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001d718:	83 c4 10             	add    esp,0x10
c001d71b:	39 c7                	cmp    edi,eax
c001d71d:	7d 02                	jge    c001d721 <SoundCard::getSamples16(int, short*)+0x59>
c001d71f:	89 c7                	mov    edi,eax
c001d721:	43                   	inc    ebx
c001d722:	83 fb 20             	cmp    ebx,0x20
c001d725:	75 d0                	jne    c001d6f7 <SoundCard::getSamples16(int, short*)+0x2f>
c001d727:	83 c4 0c             	add    esp,0xc
c001d72a:	89 f8                	mov    eax,edi
c001d72c:	5b                   	pop    ebx
c001d72d:	5e                   	pop    esi
c001d72e:	5f                   	pop    edi
c001d72f:	5d                   	pop    ebp
c001d730:	c3                   	ret    
c001d731:	90                   	nop

c001d732 <SoundCard::getSamples32(int, int*)>:
c001d732:	55                   	push   ebp
c001d733:	57                   	push   edi
c001d734:	31 ff                	xor    edi,edi
c001d736:	56                   	push   esi
c001d737:	31 f6                	xor    esi,esi
c001d739:	53                   	push   ebx
c001d73a:	83 ec 10             	sub    esp,0x10
c001d73d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d741:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d745:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001d749:	c1 e0 02             	shl    eax,0x2
c001d74c:	50                   	push   eax
c001d74d:	6a 00                	push   0x0
c001d74f:	55                   	push   ebp
c001d750:	e8 3f 2f fe ff       	call   c0000694 <memset>
c001d755:	83 c4 10             	add    esp,0x10
c001d758:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001d75f:	85 c0                	test   eax,eax
c001d761:	74 1b                	je     c001d77e <SoundCard::getSamples32(int, int*)+0x4c>
c001d763:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001d767:	75 15                	jne    c001d77e <SoundCard::getSamples32(int, int*)+0x4c>
c001d769:	53                   	push   ebx
c001d76a:	55                   	push   ebp
c001d76b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d76f:	50                   	push   eax
c001d770:	e8 f7 03 00 00       	call   c001db6c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001d775:	83 c4 10             	add    esp,0x10
c001d778:	39 c6                	cmp    esi,eax
c001d77a:	7d 02                	jge    c001d77e <SoundCard::getSamples32(int, int*)+0x4c>
c001d77c:	89 c6                	mov    esi,eax
c001d77e:	47                   	inc    edi
c001d77f:	83 ff 20             	cmp    edi,0x20
c001d782:	75 d4                	jne    c001d758 <SoundCard::getSamples32(int, int*)+0x26>
c001d784:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001d78a:	85 f6                	test   esi,esi
c001d78c:	75 0f                	jne    c001d79d <SoundCard::getSamples32(int, int*)+0x6b>
c001d78e:	84 c0                	test   al,al
c001d790:	74 1b                	je     c001d7ad <SoundCard::getSamples32(int, int*)+0x7b>
c001d792:	83 ec 0c             	sub    esp,0xc
c001d795:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d797:	53                   	push   ebx
c001d798:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001d79b:	eb 0d                	jmp    c001d7aa <SoundCard::getSamples32(int, int*)+0x78>
c001d79d:	84 c0                	test   al,al
c001d79f:	75 0c                	jne    c001d7ad <SoundCard::getSamples32(int, int*)+0x7b>
c001d7a1:	83 ec 0c             	sub    esp,0xc
c001d7a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d7a6:	53                   	push   ebx
c001d7a7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d7aa:	83 c4 10             	add    esp,0x10
c001d7ad:	83 c4 0c             	add    esp,0xc
c001d7b0:	89 f0                	mov    eax,esi
c001d7b2:	5b                   	pop    ebx
c001d7b3:	5e                   	pop    esi
c001d7b4:	5f                   	pop    edi
c001d7b5:	5d                   	pop    ebp
c001d7b6:	c3                   	ret    
c001d7b7:	90                   	nop

c001d7b8 <SoundCard::addChannel(SoundPort*)>:
c001d7b8:	56                   	push   esi
c001d7b9:	53                   	push   ebx
c001d7ba:	53                   	push   ebx
c001d7bb:	31 db                	xor    ebx,ebx
c001d7bd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d7c1:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001d7c9:	74 27                	je     c001d7f2 <SoundCard::addChannel(SoundPort*)+0x3a>
c001d7cb:	43                   	inc    ebx
c001d7cc:	83 fb 20             	cmp    ebx,0x20
c001d7cf:	75 f0                	jne    c001d7c1 <SoundCard::addChannel(SoundPort*)+0x9>
c001d7d1:	83 ec 0c             	sub    esp,0xc
c001d7d4:	83 cb ff             	or     ebx,0xffffffff
c001d7d7:	68 4d 72 02 c0       	push   0xc002724d
c001d7dc:	e8 7e f8 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001d7e1:	c7 04 24 46 72 02 c0 	mov    DWORD PTR [esp],0xc0027246
c001d7e8:	e8 44 79 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001d7ed:	83 c4 10             	add    esp,0x10
c001d7f0:	eb 1b                	jmp    c001d80d <SoundCard::addChannel(SoundPort*)+0x55>
c001d7f2:	51                   	push   ecx
c001d7f3:	51                   	push   ecx
c001d7f4:	53                   	push   ebx
c001d7f5:	68 65 72 02 c0       	push   0xc0027265
c001d7fa:	e8 60 f8 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001d7ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d803:	83 c4 10             	add    esp,0x10
c001d806:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001d80d:	89 d8                	mov    eax,ebx
c001d80f:	5a                   	pop    edx
c001d810:	5b                   	pop    ebx
c001d811:	5e                   	pop    esi
c001d812:	c3                   	ret    
c001d813:	90                   	nop

c001d814 <SoundCard::removeChannel(int)>:
c001d814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d818:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d81c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d827:	c3                   	ret    

c001d828 <SoundPort::SoundPort(int, int, int, int)>:
c001d828:	83 ec 0c             	sub    esp,0xc
c001d82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d82f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d83a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d842:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d846:	89 10                	mov    DWORD PTR [eax],edx
c001d848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d84c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d850:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d857:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d85b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d85e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d863:	75 13                	jne    c001d878 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d869:	8b 00                	mov    eax,DWORD PTR [eax]
c001d86b:	05 a0 0f 00 00       	add    eax,0xfa0
c001d870:	01 c0                	add    eax,eax
c001d872:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d876:	66 90                	xchg   ax,ax
c001d878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d87c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d880:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d887:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d892:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d895:	c1 e0 02             	shl    eax,0x2
c001d898:	83 ec 0c             	sub    esp,0xc
c001d89b:	50                   	push   eax
c001d89c:	e8 d2 c4 fe ff       	call   c0009d73 <malloc>
c001d8a1:	83 c4 10             	add    esp,0x10
c001d8a4:	89 c2                	mov    edx,eax
c001d8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8aa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d8ad:	90                   	nop
c001d8ae:	83 c4 0c             	add    esp,0xc
c001d8b1:	c3                   	ret    
c001d8b2:	66 90                	xchg   ax,ax

c001d8b4 <SoundPort::~SoundPort()>:
c001d8b4:	83 ec 0c             	sub    esp,0xc
c001d8b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d8be:	85 c0                	test   eax,eax
c001d8c0:	74 1e                	je     c001d8e0 <SoundPort::~SoundPort()+0x2c>
c001d8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8c6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d8c9:	83 ec 0c             	sub    esp,0xc
c001d8cc:	50                   	push   eax
c001d8cd:	e8 b1 c4 fe ff       	call   c0009d83 <free>
c001d8d2:	83 c4 10             	add    esp,0x10
c001d8d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8d9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d8e0:	90                   	nop
c001d8e1:	83 c4 0c             	add    esp,0xc
c001d8e4:	c3                   	ret    
c001d8e5:	90                   	nop
c001d8e6:	66 90                	xchg   ax,ax

c001d8e8 <SoundPort::unpause()>:
c001d8e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8ec:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d8f0:	c3                   	ret    
c001d8f1:	90                   	nop
c001d8f2:	66 90                	xchg   ax,ax

c001d8f4 <SoundPort::pause()>:
c001d8f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8f8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d8fc:	c3                   	ret    
c001d8fd:	90                   	nop
c001d8fe:	66 90                	xchg   ax,ax

c001d900 <SoundPort::getBufferUsed()>:
c001d900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d904:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d907:	c3                   	ret    

c001d908 <SoundPort::getBufferSize()>:
c001d908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d90c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d90f:	c3                   	ret    

c001d910 <SoundPort::buffer16(short*, int)>:
c001d910:	55                   	push   ebp
c001d911:	57                   	push   edi
c001d912:	56                   	push   esi
c001d913:	53                   	push   ebx
c001d914:	83 ec 1c             	sub    esp,0x1c
c001d917:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d91b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d91f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d922:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d925:	0f 84 85 00 00 00    	je     c001d9b0 <SoundPort::buffer16(short*, int)+0xa0>
c001d92b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d92f:	85 c9                	test   ecx,ecx
c001d931:	7e 7d                	jle    c001d9b0 <SoundPort::buffer16(short*, int)+0xa0>
c001d933:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d937:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d93a:	c1 e1 0f             	shl    ecx,0xf
c001d93d:	8d 70 01             	lea    esi,[eax+0x1]
c001d940:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d943:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d946:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d949:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d94c:	74 6e                	je     c001d9bc <SoundPort::buffer16(short*, int)+0xac>
c001d94e:	31 f6                	xor    esi,esi
c001d950:	eb 22                	jmp    c001d974 <SoundPort::buffer16(short*, int)+0x64>
c001d952:	66 90                	xchg   ax,ax
c001d954:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d959:	8d 79 01             	lea    edi,[ecx+0x1]
c001d95c:	c1 e3 0f             	shl    ebx,0xf
c001d95f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d962:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d965:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d968:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d96b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d96e:	74 1c                	je     c001d98c <SoundPort::buffer16(short*, int)+0x7c>
c001d970:	89 c6                	mov    esi,eax
c001d972:	66 90                	xchg   ax,ax
c001d974:	8d 46 01             	lea    eax,[esi+0x1]
c001d977:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d97b:	75 d7                	jne    c001d954 <SoundPort::buffer16(short*, int)+0x44>
c001d97d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d981:	83 c4 1c             	add    esp,0x1c
c001d984:	5b                   	pop    ebx
c001d985:	5e                   	pop    esi
c001d986:	5f                   	pop    edi
c001d987:	5d                   	pop    ebp
c001d988:	c3                   	ret    
c001d989:	8d 76 00             	lea    esi,[esi+0x0]
c001d98c:	8d 46 02             	lea    eax,[esi+0x2]
c001d98f:	90                   	nop
c001d990:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d994:	83 ec 0c             	sub    esp,0xc
c001d997:	68 b8 72 02 c0       	push   0xc00272b8
c001d99c:	e8 be f6 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001d9a1:	83 c4 10             	add    esp,0x10
c001d9a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9a8:	83 c4 1c             	add    esp,0x1c
c001d9ab:	5b                   	pop    ebx
c001d9ac:	5e                   	pop    esi
c001d9ad:	5f                   	pop    edi
c001d9ae:	5d                   	pop    ebp
c001d9af:	c3                   	ret    
c001d9b0:	83 c4 1c             	add    esp,0x1c
c001d9b3:	31 c0                	xor    eax,eax
c001d9b5:	5b                   	pop    ebx
c001d9b6:	5e                   	pop    esi
c001d9b7:	5f                   	pop    edi
c001d9b8:	5d                   	pop    ebp
c001d9b9:	c3                   	ret    
c001d9ba:	66 90                	xchg   ax,ax
c001d9bc:	b8 01 00 00 00       	mov    eax,0x1
c001d9c1:	eb cd                	jmp    c001d990 <SoundPort::buffer16(short*, int)+0x80>
c001d9c3:	90                   	nop

c001d9c4 <SoundPort::buffer32(int*, int)>:
c001d9c4:	55                   	push   ebp
c001d9c5:	57                   	push   edi
c001d9c6:	56                   	push   esi
c001d9c7:	53                   	push   ebx
c001d9c8:	83 ec 1c             	sub    esp,0x1c
c001d9cb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d9cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d9d3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d9d6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d9da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9de:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d9e1:	74 79                	je     c001da5c <SoundPort::buffer32(int*, int)+0x98>
c001d9e3:	85 c0                	test   eax,eax
c001d9e5:	7e 75                	jle    c001da5c <SoundPort::buffer32(int*, int)+0x98>
c001d9e7:	8d 71 01             	lea    esi,[ecx+0x1]
c001d9ea:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d9ed:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d9f0:	8b 37                	mov    esi,DWORD PTR [edi]
c001d9f2:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d9f5:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d9f8:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d9fb:	74 6b                	je     c001da68 <SoundPort::buffer32(int*, int)+0xa4>
c001d9fd:	31 f6                	xor    esi,esi
c001d9ff:	eb 1f                	jmp    c001da20 <SoundPort::buffer32(int*, int)+0x5c>
c001da01:	8d 76 00             	lea    esi,[esi+0x0]
c001da04:	8d 69 01             	lea    ebp,[ecx+0x1]
c001da07:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001da0a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001da0d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da10:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001da14:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001da17:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001da1a:	74 1c                	je     c001da38 <SoundPort::buffer32(int*, int)+0x74>
c001da1c:	89 de                	mov    esi,ebx
c001da1e:	66 90                	xchg   ax,ax
c001da20:	8d 5e 01             	lea    ebx,[esi+0x1]
c001da23:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001da27:	75 db                	jne    c001da04 <SoundPort::buffer32(int*, int)+0x40>
c001da29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da2d:	83 c4 1c             	add    esp,0x1c
c001da30:	5b                   	pop    ebx
c001da31:	5e                   	pop    esi
c001da32:	5f                   	pop    edi
c001da33:	5d                   	pop    ebp
c001da34:	c3                   	ret    
c001da35:	8d 76 00             	lea    esi,[esi+0x0]
c001da38:	8d 46 02             	lea    eax,[esi+0x2]
c001da3b:	90                   	nop
c001da3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da40:	83 ec 0c             	sub    esp,0xc
c001da43:	68 d3 72 02 c0       	push   0xc00272d3
c001da48:	e8 12 f6 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001da4d:	83 c4 10             	add    esp,0x10
c001da50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da54:	83 c4 1c             	add    esp,0x1c
c001da57:	5b                   	pop    ebx
c001da58:	5e                   	pop    esi
c001da59:	5f                   	pop    edi
c001da5a:	5d                   	pop    ebp
c001da5b:	c3                   	ret    
c001da5c:	83 c4 1c             	add    esp,0x1c
c001da5f:	31 c0                	xor    eax,eax
c001da61:	5b                   	pop    ebx
c001da62:	5e                   	pop    esi
c001da63:	5f                   	pop    edi
c001da64:	5d                   	pop    ebp
c001da65:	c3                   	ret    
c001da66:	66 90                	xchg   ax,ax
c001da68:	b8 01 00 00 00       	mov    eax,0x1
c001da6d:	eb cd                	jmp    c001da3c <SoundPort::buffer32(int*, int)+0x78>
c001da6f:	90                   	nop

c001da70 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001da70:	57                   	push   edi
c001da71:	56                   	push   esi
c001da72:	53                   	push   ebx
c001da73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001da7b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001da81:	39 03                	cmp    DWORD PTR [ebx],eax
c001da83:	74 13                	je     c001da98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001da85:	83 ec 0c             	sub    esp,0xc
c001da88:	68 28 73 02 c0       	push   0xc0027328
c001da8d:	e8 9f 76 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001da92:	83 c4 10             	add    esp,0x10
c001da95:	8d 76 00             	lea    esi,[esi+0x0]
c001da98:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001da9e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001daa1:	74 11                	je     c001dab4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001daa3:	83 ec 0c             	sub    esp,0xc
c001daa6:	68 ee 72 02 c0       	push   0xc00272ee
c001daab:	e8 81 76 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001dab0:	83 c4 10             	add    esp,0x10
c001dab3:	90                   	nop
c001dab4:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001daba:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001dabd:	74 11                	je     c001dad0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001dabf:	83 ec 0c             	sub    esp,0xc
c001dac2:	68 ee 72 02 c0       	push   0xc00272ee
c001dac7:	e8 65 76 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001dacc:	83 c4 10             	add    esp,0x10
c001dacf:	90                   	nop
c001dad0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001dad3:	89 c6                	mov    esi,eax
c001dad5:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001dad9:	7e 05                	jle    c001dae0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001dadb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dadf:	90                   	nop
c001dae0:	85 f6                	test   esi,esi
c001dae2:	7e 30                	jle    c001db14 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001dae4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dae8:	8d 3c 36             	lea    edi,[esi+esi*1]
c001daeb:	31 c9                	xor    ecx,ecx
c001daed:	01 d7                	add    edi,edx
c001daef:	90                   	nop
c001daf0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001daf3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001daf6:	85 c0                	test   eax,eax
c001daf8:	79 06                	jns    c001db00 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001dafa:	05 ff 7f 00 00       	add    eax,0x7fff
c001daff:	90                   	nop
c001db00:	c1 f8 0f             	sar    eax,0xf
c001db03:	83 c1 04             	add    ecx,0x4
c001db06:	66 01 02             	add    WORD PTR [edx],ax
c001db09:	83 c2 02             	add    edx,0x2
c001db0c:	39 d7                	cmp    edi,edx
c001db0e:	75 e0                	jne    c001daf0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001db10:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001db13:	90                   	nop
c001db14:	56                   	push   esi
c001db15:	89 c2                	mov    edx,eax
c001db17:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001db1e:	29 f2                	sub    edx,esi
c001db20:	52                   	push   edx
c001db21:	50                   	push   eax
c001db22:	68 48 73 02 c0       	push   0xc0027348
c001db27:	e8 33 f5 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001db2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001db2f:	50                   	push   eax
c001db30:	01 f8                	add    eax,edi
c001db32:	50                   	push   eax
c001db33:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001db36:	29 f0                	sub    eax,esi
c001db38:	c1 e0 02             	shl    eax,0x2
c001db3b:	50                   	push   eax
c001db3c:	68 78 73 02 c0       	push   0xc0027378
c001db41:	e8 19 f5 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001db46:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001db49:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001db4c:	83 c4 1c             	add    esp,0x1c
c001db4f:	01 d7                	add    edi,edx
c001db51:	29 f0                	sub    eax,esi
c001db53:	c1 e0 02             	shl    eax,0x2
c001db56:	50                   	push   eax
c001db57:	57                   	push   edi
c001db58:	52                   	push   edx
c001db59:	e8 6e 2a fe ff       	call   c00005cc <memmove>
c001db5e:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001db61:	83 c4 10             	add    esp,0x10
c001db64:	89 f0                	mov    eax,esi
c001db66:	5b                   	pop    ebx
c001db67:	5e                   	pop    esi
c001db68:	5f                   	pop    edi
c001db69:	c3                   	ret    
c001db6a:	66 90                	xchg   ax,ax

c001db6c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001db6c:	57                   	push   edi
c001db6d:	56                   	push   esi
c001db6e:	53                   	push   ebx
c001db6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db73:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001db77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001db7b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001db81:	39 06                	cmp    DWORD PTR [esi],eax
c001db83:	74 13                	je     c001db98 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001db85:	83 ec 0c             	sub    esp,0xc
c001db88:	68 9c 73 02 c0       	push   0xc002739c
c001db8d:	e8 9f 75 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001db92:	83 c4 10             	add    esp,0x10
c001db95:	8d 76 00             	lea    esi,[esi+0x0]
c001db98:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001db9e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001dba1:	74 11                	je     c001dbb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001dba3:	83 ec 0c             	sub    esp,0xc
c001dba6:	68 0a 73 02 c0       	push   0xc002730a
c001dbab:	e8 81 75 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001dbb0:	83 c4 10             	add    esp,0x10
c001dbb3:	90                   	nop
c001dbb4:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001dbba:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001dbbd:	74 11                	je     c001dbd0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001dbbf:	83 ec 0c             	sub    esp,0xc
c001dbc2:	68 0a 73 02 c0       	push   0xc002730a
c001dbc7:	e8 65 75 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001dbcc:	83 c4 10             	add    esp,0x10
c001dbcf:	90                   	nop
c001dbd0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001dbd3:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001dbd7:	7e 07                	jle    c001dbe0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001dbd9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001dbdd:	8d 76 00             	lea    esi,[esi+0x0]
c001dbe0:	85 ff                	test   edi,edi
c001dbe2:	7e 1c                	jle    c001dc00 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001dbe4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001dbeb:	31 c0                	xor    eax,eax
c001dbed:	8d 76 00             	lea    esi,[esi+0x0]
c001dbf0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001dbf3:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001dbf6:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001dbf9:	83 c0 04             	add    eax,0x4
c001dbfc:	39 c1                	cmp    ecx,eax
c001dbfe:	75 f0                	jne    c001dbf0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001dc00:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001dc03:	50                   	push   eax
c001dc04:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001dc07:	29 f8                	sub    eax,edi
c001dc09:	c1 e0 02             	shl    eax,0x2
c001dc0c:	50                   	push   eax
c001dc0d:	8d 04 ba             	lea    eax,[edx+edi*4]
c001dc10:	50                   	push   eax
c001dc11:	52                   	push   edx
c001dc12:	e8 b5 29 fe ff       	call   c00005cc <memmove>
c001dc17:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001dc1a:	83 c4 10             	add    esp,0x10
c001dc1d:	89 f8                	mov    eax,edi
c001dc1f:	5b                   	pop    ebx
c001dc20:	5e                   	pop    esi
c001dc21:	5f                   	pop    edi
c001dc22:	c3                   	ret    
c001dc23:	90                   	nop

c001dc24 <PCI::open(int, int, void*)>:
c001dc24:	83 ec 18             	sub    esp,0x18
c001dc27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dc2b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dc2f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dc35:	8b 10                	mov    edx,DWORD PTR [eax]
c001dc37:	50                   	push   eax
c001dc38:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001dc3b:	31 c0                	xor    eax,eax
c001dc3d:	83 c4 1c             	add    esp,0x1c
c001dc40:	c3                   	ret    
c001dc41:	90                   	nop

c001dc42 <PCI::close(int, int, void*)>:
c001dc42:	31 c0                	xor    eax,eax
c001dc44:	c3                   	ret    
c001dc45:	90                   	nop

c001dc46 <PCI::PCI()>:
c001dc46:	83 ec 0c             	sub    esp,0xc
c001dc49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc4d:	83 ec 08             	sub    esp,0x8
c001dc50:	68 bb 73 02 c0       	push   0xc00273bb
c001dc55:	50                   	push   eax
c001dc56:	e8 dd 01 ff ff       	call   c000de38 <Bus::Bus(char const*)>
c001dc5b:	83 c4 10             	add    esp,0x10
c001dc5e:	ba 90 75 02 c0       	mov    edx,0xc0027590
c001dc63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc67:	89 10                	mov    DWORD PTR [eax],edx
c001dc69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc6d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001dc77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc7b:	a3 c0 ab 02 c0       	mov    ds:0xc002abc0,eax
c001dc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc84:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc8a:	0f b6 d0             	movzx  edx,al
c001dc8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc91:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001dc98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dca2:	0f b6 d0             	movzx  edx,al
c001dca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dca9:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001dcae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcb8:	8d 50 01             	lea    edx,[eax+0x1]
c001dcbb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcbf:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dcc5:	0f b6 d0             	movzx  edx,al
c001dcc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dccc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dcd0:	83 c9 c0             	or     ecx,0xffffffc0
c001dcd3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dcd7:	90                   	nop
c001dcd8:	83 c4 0c             	add    esp,0xc
c001dcdb:	c3                   	ret    

c001dcdc <PCI::readBAR8(unsigned int, int)>:
c001dcdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dce0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dce4:	f6 c2 01             	test   dl,0x1
c001dce7:	74 07                	je     c001dcf0 <PCI::readBAR8(unsigned int, int)+0x14>
c001dce9:	83 e2 fc             	and    edx,0xfffffffc
c001dcec:	01 c2                	add    edx,eax
c001dcee:	ec                   	in     al,dx
c001dcef:	c3                   	ret    
c001dcf0:	83 e2 f0             	and    edx,0xfffffff0
c001dcf3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001dcf6:	c3                   	ret    
c001dcf7:	90                   	nop

c001dcf8 <PCI::readBAR16(unsigned int, int)>:
c001dcf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dcfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd00:	f6 c2 01             	test   dl,0x1
c001dd03:	74 08                	je     c001dd0d <PCI::readBAR16(unsigned int, int)+0x15>
c001dd05:	83 e2 fc             	and    edx,0xfffffffc
c001dd08:	01 c2                	add    edx,eax
c001dd0a:	66 ed                	in     ax,dx
c001dd0c:	c3                   	ret    
c001dd0d:	83 e2 f0             	and    edx,0xfffffff0
c001dd10:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001dd14:	c3                   	ret    
c001dd15:	90                   	nop

c001dd16 <PCI::readBAR32(unsigned int, int)>:
c001dd16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd1e:	f6 c2 01             	test   dl,0x1
c001dd21:	74 07                	je     c001dd2a <PCI::readBAR32(unsigned int, int)+0x14>
c001dd23:	83 e2 fc             	and    edx,0xfffffffc
c001dd26:	01 c2                	add    edx,eax
c001dd28:	ed                   	in     eax,dx
c001dd29:	c3                   	ret    
c001dd2a:	83 e2 f0             	and    edx,0xfffffff0
c001dd2d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001dd30:	c3                   	ret    
c001dd31:	90                   	nop

c001dd32 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001dd32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd3a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd3e:	f6 c2 01             	test   dl,0x1
c001dd41:	74 07                	je     c001dd4a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001dd43:	83 e2 fc             	and    edx,0xfffffffc
c001dd46:	01 ca                	add    edx,ecx
c001dd48:	ee                   	out    dx,al
c001dd49:	c3                   	ret    
c001dd4a:	83 e2 f0             	and    edx,0xfffffff0
c001dd4d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001dd50:	c3                   	ret    
c001dd51:	90                   	nop

c001dd52 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001dd52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd5a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd5e:	f6 c2 01             	test   dl,0x1
c001dd61:	74 08                	je     c001dd6b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001dd63:	83 e2 fc             	and    edx,0xfffffffc
c001dd66:	01 ca                	add    edx,ecx
c001dd68:	66 ef                	out    dx,ax
c001dd6a:	c3                   	ret    
c001dd6b:	83 e2 f0             	and    edx,0xfffffff0
c001dd6e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001dd72:	c3                   	ret    
c001dd73:	90                   	nop

c001dd74 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001dd74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dd78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dd7c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd80:	f6 c2 01             	test   dl,0x1
c001dd83:	74 07                	je     c001dd8c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001dd85:	83 e2 fc             	and    edx,0xfffffffc
c001dd88:	01 ca                	add    edx,ecx
c001dd8a:	ef                   	out    dx,eax
c001dd8b:	c3                   	ret    
c001dd8c:	83 e2 f0             	and    edx,0xfffffff0
c001dd8f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001dd92:	c3                   	ret    
c001dd93:	90                   	nop

c001dd94 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dd94:	55                   	push   ebp
c001dd95:	57                   	push   edi
c001dd96:	56                   	push   esi
c001dd97:	53                   	push   ebx
c001dd98:	83 ec 0c             	sub    esp,0xc
c001dd9b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001dd9f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001dda3:	89 f0                	mov    eax,esi
c001dda5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001dda9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ddad:	3c 07                	cmp    al,0x7
c001ddaf:	76 10                	jbe    c001ddc1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ddb1:	83 ec 0c             	sub    esp,0xc
c001ddb4:	68 c3 73 02 c0       	push   0xc00273c3
c001ddb9:	e8 73 73 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001ddbe:	83 c4 10             	add    esp,0x10
c001ddc1:	80 fb 0f             	cmp    bl,0xf
c001ddc4:	76 10                	jbe    c001ddd6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001ddc6:	83 ec 0c             	sub    esp,0xc
c001ddc9:	68 f3 73 02 c0       	push   0xc00273f3
c001ddce:	e8 5e 73 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001ddd3:	83 c4 10             	add    esp,0x10
c001ddd6:	8d 04 36             	lea    eax,[esi+esi*1]
c001ddd9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ddde:	83 c8 f0             	or     eax,0xfffffff0
c001dde1:	ee                   	out    dx,al
c001dde2:	ba fa 0c 00 00       	mov    edx,0xcfa
c001dde7:	89 e8                	mov    eax,ebp
c001dde9:	ee                   	out    dx,al
c001ddea:	83 c4 0c             	add    esp,0xc
c001dded:	89 d8                	mov    eax,ebx
c001ddef:	66 81 e7 fc 00       	and    di,0xfc
c001ddf4:	5b                   	pop    ebx
c001ddf5:	c1 e0 08             	shl    eax,0x8
c001ddf8:	5e                   	pop    esi
c001ddf9:	09 f8                	or     eax,edi
c001ddfb:	5f                   	pop    edi
c001ddfc:	66 0d 00 c0          	or     ax,0xc000
c001de00:	5d                   	pop    ebp
c001de01:	c3                   	ret    

c001de02 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001de02:	57                   	push   edi
c001de03:	56                   	push   esi
c001de04:	53                   	push   ebx
c001de05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de0d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001de13:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001de17:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001de1b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001de1f:	83 ff 01             	cmp    edi,0x1
c001de22:	75 3e                	jne    c001de62 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001de24:	89 de                	mov    esi,ebx
c001de26:	0f b6 c0             	movzx  eax,al
c001de29:	81 e6 fc 00 00 00    	and    esi,0xfc
c001de2f:	c1 e0 10             	shl    eax,0x10
c001de32:	0f b6 c9             	movzx  ecx,cl
c001de35:	09 f0                	or     eax,esi
c001de37:	c1 e1 08             	shl    ecx,0x8
c001de3a:	0f b6 d2             	movzx  edx,dl
c001de3d:	09 c8                	or     eax,ecx
c001de3f:	c1 e2 0b             	shl    edx,0xb
c001de42:	09 d0                	or     eax,edx
c001de44:	ba f8 0c 00 00       	mov    edx,0xcf8
c001de49:	0d 00 00 00 80       	or     eax,0x80000000
c001de4e:	ef                   	out    dx,eax
c001de4f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001de54:	ed                   	in     eax,dx
c001de55:	83 e3 02             	and    ebx,0x2
c001de58:	0f b6 cb             	movzx  ecx,bl
c001de5b:	c1 e1 03             	shl    ecx,0x3
c001de5e:	d3 e8                	shr    eax,cl
c001de60:	eb 43                	jmp    c001dea5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001de62:	83 ff 02             	cmp    edi,0x2
c001de65:	75 2c                	jne    c001de93 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001de67:	83 ec 0c             	sub    esp,0xc
c001de6a:	0f b6 c9             	movzx  ecx,cl
c001de6d:	0f b6 d2             	movzx  edx,dl
c001de70:	0f b6 fb             	movzx  edi,bl
c001de73:	0f b6 c0             	movzx  eax,al
c001de76:	57                   	push   edi
c001de77:	51                   	push   ecx
c001de78:	52                   	push   edx
c001de79:	50                   	push   eax
c001de7a:	56                   	push   esi
c001de7b:	e8 14 ff ff ff       	call   c001dd94 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001de80:	89 c2                	mov    edx,eax
c001de82:	ed                   	in     eax,dx
c001de83:	83 e3 02             	and    ebx,0x2
c001de86:	83 c4 20             	add    esp,0x20
c001de89:	0f b6 cb             	movzx  ecx,bl
c001de8c:	c1 e1 03             	shl    ecx,0x3
c001de8f:	d3 e8                	shr    eax,cl
c001de91:	eb 12                	jmp    c001dea5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001de93:	83 ec 0c             	sub    esp,0xc
c001de96:	68 23 74 02 c0       	push   0xc0027423
c001de9b:	e8 91 72 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001dea0:	83 c4 10             	add    esp,0x10
c001dea3:	31 c0                	xor    eax,eax
c001dea5:	5b                   	pop    ebx
c001dea6:	5e                   	pop    esi
c001dea7:	5f                   	pop    edi
c001dea8:	c3                   	ret    
c001dea9:	90                   	nop

c001deaa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001deaa:	83 ec 18             	sub    esp,0x18
c001dead:	6a 00                	push   0x0
c001deaf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001deb4:	50                   	push   eax
c001deb5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001deba:	50                   	push   eax
c001debb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dec0:	50                   	push   eax
c001dec1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dec5:	e8 38 ff ff ff       	call   c001de02 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001deca:	83 c4 2c             	add    esp,0x2c
c001decd:	c3                   	ret    

c001dece <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001dece:	83 ec 18             	sub    esp,0x18
c001ded1:	6a 0e                	push   0xe
c001ded3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ded8:	50                   	push   eax
c001ded9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dede:	50                   	push   eax
c001dedf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dee4:	50                   	push   eax
c001dee5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dee9:	e8 14 ff ff ff       	call   c001de02 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001deee:	83 c4 2c             	add    esp,0x2c
c001def1:	0f b6 c0             	movzx  eax,al
c001def4:	c3                   	ret    
c001def5:	90                   	nop

c001def6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001def6:	55                   	push   ebp
c001def7:	57                   	push   edi
c001def8:	56                   	push   esi
c001def9:	53                   	push   ebx
c001defa:	83 ec 18             	sub    esp,0x18
c001defd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001df02:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001df07:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001df0c:	6a 0a                	push   0xa
c001df0e:	56                   	push   esi
c001df0f:	55                   	push   ebp
c001df10:	57                   	push   edi
c001df11:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001df15:	e8 e8 fe ff ff       	call   c001de02 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df1a:	83 c4 14             	add    esp,0x14
c001df1d:	89 c3                	mov    ebx,eax
c001df1f:	6a 0a                	push   0xa
c001df21:	0f b6 db             	movzx  ebx,bl
c001df24:	56                   	push   esi
c001df25:	55                   	push   ebp
c001df26:	57                   	push   edi
c001df27:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001df2b:	e8 d2 fe ff ff       	call   c001de02 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df30:	83 c4 2c             	add    esp,0x2c
c001df33:	25 00 ff 00 00       	and    eax,0xff00
c001df38:	09 d8                	or     eax,ebx
c001df3a:	5b                   	pop    ebx
c001df3b:	5e                   	pop    esi
c001df3c:	5f                   	pop    edi
c001df3d:	5d                   	pop    ebp
c001df3e:	c3                   	ret    
c001df3f:	90                   	nop

c001df40 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001df40:	83 ec 18             	sub    esp,0x18
c001df43:	6a 08                	push   0x8
c001df45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df4a:	50                   	push   eax
c001df4b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df50:	50                   	push   eax
c001df51:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df56:	50                   	push   eax
c001df57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df5b:	e8 a2 fe ff ff       	call   c001de02 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df60:	83 c4 2c             	add    esp,0x2c
c001df63:	0f b6 c4             	movzx  eax,ah
c001df66:	c3                   	ret    
c001df67:	90                   	nop

c001df68 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001df68:	83 ec 18             	sub    esp,0x18
c001df6b:	6a 08                	push   0x8
c001df6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df72:	50                   	push   eax
c001df73:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df78:	50                   	push   eax
c001df79:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df7e:	50                   	push   eax
c001df7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df83:	e8 7a fe ff ff       	call   c001de02 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001df88:	83 c4 2c             	add    esp,0x2c
c001df8b:	c3                   	ret    

c001df8c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001df8c:	83 ec 18             	sub    esp,0x18
c001df8f:	6a 3c                	push   0x3c
c001df91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df96:	50                   	push   eax
c001df97:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001df9c:	50                   	push   eax
c001df9d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dfa2:	50                   	push   eax
c001dfa3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfa7:	e8 56 fe ff ff       	call   c001de02 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfac:	83 c4 2c             	add    esp,0x2c
c001dfaf:	c3                   	ret    

c001dfb0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001dfb0:	83 ec 18             	sub    esp,0x18
c001dfb3:	6a 18                	push   0x18
c001dfb5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dfba:	50                   	push   eax
c001dfbb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dfc0:	50                   	push   eax
c001dfc1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001dfc6:	50                   	push   eax
c001dfc7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfcb:	e8 32 fe ff ff       	call   c001de02 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dfd0:	83 c4 2c             	add    esp,0x2c
c001dfd3:	0f b6 c4             	movzx  eax,ah
c001dfd6:	c3                   	ret    
c001dfd7:	90                   	nop

c001dfd8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001dfd8:	55                   	push   ebp
c001dfd9:	57                   	push   edi
c001dfda:	56                   	push   esi
c001dfdb:	53                   	push   ebx
c001dfdc:	83 ec 28             	sub    esp,0x28
c001dfdf:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dfe3:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001dfe8:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001dfed:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001dff2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001dff9:	8d 43 12             	lea    eax,[ebx+0x12]
c001dffc:	83 c3 10             	add    ebx,0x10
c001dfff:	0f b6 c0             	movzx  eax,al
c001e002:	0f b6 db             	movzx  ebx,bl
c001e005:	50                   	push   eax
c001e006:	51                   	push   ecx
c001e007:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001e00b:	57                   	push   edi
c001e00c:	55                   	push   ebp
c001e00d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e011:	e8 ec fd ff ff       	call   c001de02 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e016:	83 c4 14             	add    esp,0x14
c001e019:	89 c6                	mov    esi,eax
c001e01b:	53                   	push   ebx
c001e01c:	c1 e6 10             	shl    esi,0x10
c001e01f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e023:	51                   	push   ecx
c001e024:	57                   	push   edi
c001e025:	55                   	push   ebp
c001e026:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e02a:	e8 d3 fd ff ff       	call   c001de02 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e02f:	83 c4 3c             	add    esp,0x3c
c001e032:	0f b7 c0             	movzx  eax,ax
c001e035:	5b                   	pop    ebx
c001e036:	09 f0                	or     eax,esi
c001e038:	5e                   	pop    esi
c001e039:	5f                   	pop    edi
c001e03a:	5d                   	pop    ebp
c001e03b:	c3                   	ret    

c001e03c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001e03c:	55                   	push   ebp
c001e03d:	57                   	push   edi
c001e03e:	56                   	push   esi
c001e03f:	53                   	push   ebx
c001e040:	83 ec 0c             	sub    esp,0xc
c001e043:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001e047:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e04b:	89 f5                	mov    ebp,esi
c001e04d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001e053:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e057:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e05b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e05f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e063:	83 f9 01             	cmp    ecx,0x1
c001e066:	75 5d                	jne    c001e0c5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001e068:	0f b6 c8             	movzx  ecx,al
c001e06b:	0f b6 d2             	movzx  edx,dl
c001e06e:	c1 e1 10             	shl    ecx,0x10
c001e071:	c1 e2 0b             	shl    edx,0xb
c001e074:	89 f0                	mov    eax,esi
c001e076:	25 fc 00 00 00       	and    eax,0xfc
c001e07b:	09 c1                	or     ecx,eax
c001e07d:	89 e8                	mov    eax,ebp
c001e07f:	0f b6 c0             	movzx  eax,al
c001e082:	c1 e0 08             	shl    eax,0x8
c001e085:	09 c1                	or     ecx,eax
c001e087:	09 d1                	or     ecx,edx
c001e089:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e08e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001e094:	89 c8                	mov    eax,ecx
c001e096:	ef                   	out    dx,eax
c001e097:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e09c:	ed                   	in     eax,dx
c001e09d:	0f b7 db             	movzx  ebx,bx
c001e0a0:	83 e6 02             	and    esi,0x2
c001e0a3:	74 0a                	je     c001e0af <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001e0a5:	0f b7 d0             	movzx  edx,ax
c001e0a8:	c1 e3 10             	shl    ebx,0x10
c001e0ab:	09 d3                	or     ebx,edx
c001e0ad:	eb 05                	jmp    c001e0b4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001e0af:	66 31 c0             	xor    ax,ax
c001e0b2:	09 c3                	or     ebx,eax
c001e0b4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001e0b9:	89 c8                	mov    eax,ecx
c001e0bb:	ef                   	out    dx,eax
c001e0bc:	ba fc 0c 00 00       	mov    edx,0xcfc
c001e0c1:	89 d8                	mov    eax,ebx
c001e0c3:	eb 41                	jmp    c001e106 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e0c5:	83 f9 02             	cmp    ecx,0x2
c001e0c8:	75 45                	jne    c001e10f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001e0ca:	83 ec 0c             	sub    esp,0xc
c001e0cd:	0f b6 d2             	movzx  edx,dl
c001e0d0:	89 f1                	mov    ecx,esi
c001e0d2:	0f b6 c0             	movzx  eax,al
c001e0d5:	0f b6 f1             	movzx  esi,cl
c001e0d8:	89 e9                	mov    ecx,ebp
c001e0da:	56                   	push   esi
c001e0db:	0f b6 c9             	movzx  ecx,cl
c001e0de:	51                   	push   ecx
c001e0df:	52                   	push   edx
c001e0e0:	50                   	push   eax
c001e0e1:	57                   	push   edi
c001e0e2:	e8 ad fc ff ff       	call   c001dd94 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0e7:	89 c2                	mov    edx,eax
c001e0e9:	ed                   	in     eax,dx
c001e0ea:	83 c4 20             	add    esp,0x20
c001e0ed:	0f b7 db             	movzx  ebx,bx
c001e0f0:	f6 c2 02             	test   dl,0x2
c001e0f3:	74 0c                	je     c001e101 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001e0f5:	0f b7 c8             	movzx  ecx,ax
c001e0f8:	89 d8                	mov    eax,ebx
c001e0fa:	c1 e0 10             	shl    eax,0x10
c001e0fd:	09 c8                	or     eax,ecx
c001e0ff:	eb 05                	jmp    c001e106 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001e101:	66 31 c0             	xor    ax,ax
c001e104:	09 d8                	or     eax,ebx
c001e106:	ef                   	out    dx,eax
c001e107:	83 c4 0c             	add    esp,0xc
c001e10a:	5b                   	pop    ebx
c001e10b:	5e                   	pop    esi
c001e10c:	5f                   	pop    edi
c001e10d:	5d                   	pop    ebp
c001e10e:	c3                   	ret    
c001e10f:	c7 44 24 20 23 74 02 c0 	mov    DWORD PTR [esp+0x20],0xc0027423
c001e117:	83 c4 0c             	add    esp,0xc
c001e11a:	5b                   	pop    ebx
c001e11b:	5e                   	pop    esi
c001e11c:	5f                   	pop    edi
c001e11d:	5d                   	pop    ebp
c001e11e:	e9 0e 70 ff ff       	jmp    c0015131 <Krnl::panic(char const*)>
c001e123:	90                   	nop

c001e124 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001e124:	55                   	push   ebp
c001e125:	57                   	push   edi
c001e126:	56                   	push   esi
c001e127:	53                   	push   ebx
c001e128:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001e12e:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001e135:	75 0f                	jne    c001e146 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001e137:	80 3d cc ab 02 c0 00 	cmp    BYTE PTR ds:0xc002abcc,0x0
c001e13e:	0f 85 fa 00 00 00    	jne    c001e23e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001e144:	eb 2f                	jmp    c001e175 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001e146:	83 ec 0c             	sub    esp,0xc
c001e149:	68 29 74 02 c0       	push   0xc0027429
c001e14e:	e8 7a bc fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e153:	83 c4 10             	add    esp,0x10
c001e156:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001e15d:	75 d8                	jne    c001e137 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001e15f:	e4 60                	in     al,0x60
c001e161:	3c 1c                	cmp    al,0x1c
c001e163:	74 04                	je     c001e169 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e165:	3c 5a                	cmp    al,0x5a
c001e167:	75 f6                	jne    c001e15f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001e169:	e4 60                	in     al,0x60
c001e16b:	3c 5a                	cmp    al,0x5a
c001e16d:	74 fa                	je     c001e169 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e16f:	3c 1c                	cmp    al,0x1c
c001e171:	74 f6                	je     c001e169 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001e173:	eb c2                	jmp    c001e137 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001e175:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001e17c:	0f 85 86 00 00 00    	jne    c001e208 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001e182:	83 ec 0c             	sub    esp,0xc
c001e185:	68 14 01 00 00       	push   0x114
c001e18a:	e8 e4 bb fe ff       	call   c0009d73 <malloc>
c001e18f:	83 c4 0c             	add    esp,0xc
c001e192:	89 c3                	mov    ebx,eax
c001e194:	ff 35 d0 a1 02 c0    	push   DWORD PTR ds:0xc002a1d0
c001e19a:	68 43 74 02 c0       	push   0xc0027443
c001e19f:	50                   	push   eax
c001e1a0:	e8 25 f4 fe ff       	call   c000d5ca <File::File(char const*, Process*)>
c001e1a5:	5a                   	pop    edx
c001e1a6:	59                   	pop    ecx
c001e1a7:	6a 01                	push   0x1
c001e1a9:	53                   	push   ebx
c001e1aa:	e8 f5 f4 fe ff       	call   c000d6a4 <File::open(FileOpenMode)>
c001e1af:	83 c4 0c             	add    esp,0xc
c001e1b2:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001e1b6:	50                   	push   eax
c001e1b7:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e1bb:	50                   	push   eax
c001e1bc:	53                   	push   ebx
c001e1bd:	e8 8e f7 fe ff       	call   c000d950 <File::stat(unsigned long long*, bool*)>
c001e1c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1c6:	40                   	inc    eax
c001e1c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e1ca:	e8 a4 bb fe ff       	call   c0009d73 <malloc>
c001e1cf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e1d3:	a3 c8 ab 02 c0       	mov    ds:0xc002abc8,eax
c001e1d8:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001e1dc:	5e                   	pop    esi
c001e1dd:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e1df:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001e1e3:	51                   	push   ecx
c001e1e4:	50                   	push   eax
c001e1e5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001e1e9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001e1ed:	53                   	push   ebx
c001e1ee:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e1f1:	83 c4 14             	add    esp,0x14
c001e1f4:	53                   	push   ebx
c001e1f5:	e8 08 f5 fe ff       	call   c000d702 <File::close()>
c001e1fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1fe:	83 c4 10             	add    esp,0x10
c001e201:	a3 c4 ab 02 c0       	mov    ds:0xc002abc4,eax
c001e206:	eb 36                	jmp    c001e23e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001e208:	83 ec 0c             	sub    esp,0xc
c001e20b:	68 5c 74 02 c0       	push   0xc002745c
c001e210:	e8 b8 bb fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e215:	83 c4 10             	add    esp,0x10
c001e218:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001e21f:	0f 85 5d ff ff ff    	jne    c001e182 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001e225:	e4 60                	in     al,0x60
c001e227:	3c 1c                	cmp    al,0x1c
c001e229:	74 04                	je     c001e22f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e22b:	3c 5a                	cmp    al,0x5a
c001e22d:	75 f6                	jne    c001e225 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001e22f:	e4 60                	in     al,0x60
c001e231:	3c 5a                	cmp    al,0x5a
c001e233:	74 fa                	je     c001e22f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e235:	3c 1c                	cmp    al,0x1c
c001e237:	74 f6                	je     c001e22f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001e239:	e9 44 ff ff ff       	jmp    c001e182 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001e23e:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001e245:	75 0b                	jne    c001e252 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001e247:	31 f6                	xor    esi,esi
c001e249:	31 db                	xor    ebx,ebx
c001e24b:	31 ed                	xor    ebp,ebp
c001e24d:	e9 a3 01 00 00       	jmp    c001e3f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e252:	83 ec 0c             	sub    esp,0xc
c001e255:	68 6e 74 02 c0       	push   0xc002746e
c001e25a:	e8 6e bb fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e25f:	8b 15 a0 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028ca0
c001e265:	83 c4 10             	add    esp,0x10
c001e268:	f6 c2 80             	test   dl,0x80
c001e26b:	74 0c                	je     c001e279 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001e26d:	0f ba e2 0b          	bt     edx,0xb
c001e271:	72 1a                	jb     c001e28d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001e273:	eb d2                	jmp    c001e247 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e275:	3c 5a                	cmp    al,0x5a
c001e277:	74 0c                	je     c001e285 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e279:	e4 60                	in     al,0x60
c001e27b:	3c 1c                	cmp    al,0x1c
c001e27d:	75 f6                	jne    c001e275 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001e27f:	eb 04                	jmp    c001e285 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e281:	3c 1c                	cmp    al,0x1c
c001e283:	75 e8                	jne    c001e26d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001e285:	e4 60                	in     al,0x60
c001e287:	3c 5a                	cmp    al,0x5a
c001e289:	74 fa                	je     c001e285 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001e28b:	eb f4                	jmp    c001e281 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001e28d:	83 ec 0c             	sub    esp,0xc
c001e290:	68 73 74 02 c0       	push   0xc0027473
c001e295:	e8 33 bb fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e29a:	83 c4 10             	add    esp,0x10
c001e29d:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001e2a4:	75 a1                	jne    c001e247 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e2a6:	e4 60                	in     al,0x60
c001e2a8:	3c 5a                	cmp    al,0x5a
c001e2aa:	74 04                	je     c001e2b0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e2ac:	3c 1c                	cmp    al,0x1c
c001e2ae:	75 f6                	jne    c001e2a6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001e2b0:	e4 60                	in     al,0x60
c001e2b2:	3c 5a                	cmp    al,0x5a
c001e2b4:	74 fa                	je     c001e2b0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e2b6:	3c 1c                	cmp    al,0x1c
c001e2b8:	74 f6                	je     c001e2b0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001e2ba:	eb 8b                	jmp    c001e247 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001e2bc:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001e2c3:	0f 85 3d 01 00 00    	jne    c001e406 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001e2c9:	a1 c8 ab 02 c0       	mov    eax,ds:0xc002abc8
c001e2ce:	8d 7e 01             	lea    edi,[esi+0x1]
c001e2d1:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001e2d4:	d4 40                	aam    0x40
c001e2d6:	d5 39                	aad    0x39
c001e2d8:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001e2df:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e2e3:	0f 85 53 01 00 00    	jne    c001e43c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001e2e9:	8b 15 c8 ab 02 c0    	mov    edx,DWORD PTR ds:0xc002abc8
c001e2ef:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001e2f2:	d4 40                	aam    0x40
c001e2f4:	d5 39                	aad    0x39
c001e2f6:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e2fa:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001e2fe:	d4 40                	aam    0x40
c001e300:	d5 39                	aad    0x39
c001e302:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e306:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001e30a:	d4 40                	aam    0x40
c001e30c:	d5 39                	aad    0x39
c001e30e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e312:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001e316:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001e31a:	3c 56                	cmp    al,0x56
c001e31c:	74 49                	je     c001e367 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001e31e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001e322:	d4 40                	aam    0x40
c001e324:	d5 39                	aad    0x39
c001e326:	8d 48 d0             	lea    ecx,[eax-0x30]
c001e329:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001e32d:	0f b6 c9             	movzx  ecx,cl
c001e330:	c1 e1 04             	shl    ecx,0x4
c001e333:	d4 40                	aam    0x40
c001e335:	d5 39                	aad    0x39
c001e337:	83 e8 30             	sub    eax,0x30
c001e33a:	0f b6 c0             	movzx  eax,al
c001e33d:	09 c1                	or     ecx,eax
c001e33f:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001e343:	c1 e1 04             	shl    ecx,0x4
c001e346:	d4 40                	aam    0x40
c001e348:	d5 39                	aad    0x39
c001e34a:	83 e8 30             	sub    eax,0x30
c001e34d:	0f b6 c0             	movzx  eax,al
c001e350:	09 c1                	or     ecx,eax
c001e352:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001e356:	c1 e1 04             	shl    ecx,0x4
c001e359:	d4 40                	aam    0x40
c001e35b:	d5 39                	aad    0x39
c001e35d:	83 e8 30             	sub    eax,0x30
c001e360:	0f b6 c0             	movzx  eax,al
c001e363:	09 c8                	or     eax,ecx
c001e365:	89 c5                	mov    ebp,eax
c001e367:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001e36b:	80 f9 44             	cmp    cl,0x44
c001e36e:	74 47                	je     c001e3b7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001e370:	88 c8                	mov    al,cl
c001e372:	d4 40                	aam    0x40
c001e374:	d5 39                	aad    0x39
c001e376:	83 e8 30             	sub    eax,0x30
c001e379:	0f b6 f8             	movzx  edi,al
c001e37c:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001e380:	c1 e7 04             	shl    edi,0x4
c001e383:	d4 40                	aam    0x40
c001e385:	d5 39                	aad    0x39
c001e387:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e38a:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001e38e:	0f b6 db             	movzx  ebx,bl
c001e391:	09 fb                	or     ebx,edi
c001e393:	c1 e3 04             	shl    ebx,0x4
c001e396:	d4 40                	aam    0x40
c001e398:	d5 39                	aad    0x39
c001e39a:	83 e8 30             	sub    eax,0x30
c001e39d:	0f b6 f8             	movzx  edi,al
c001e3a0:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001e3a4:	09 fb                	or     ebx,edi
c001e3a6:	89 df                	mov    edi,ebx
c001e3a8:	c1 e7 04             	shl    edi,0x4
c001e3ab:	d4 40                	aam    0x40
c001e3ad:	d5 39                	aad    0x39
c001e3af:	8d 58 d0             	lea    ebx,[eax-0x30]
c001e3b2:	0f b6 db             	movzx  ebx,bl
c001e3b5:	09 fb                	or     ebx,edi
c001e3b7:	a1 c4 ab 02 c0       	mov    eax,ds:0xc002abc4
c001e3bc:	83 c6 10             	add    esi,0x10
c001e3bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e3c3:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001e3c7:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001e3ca:	3c 0a                	cmp    al,0xa
c001e3cc:	0f 85 a0 00 00 00    	jne    c001e472 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001e3d2:	3c 0a                	cmp    al,0xa
c001e3d4:	0f 94 c0             	sete   al
c001e3d7:	0f b6 c0             	movzx  eax,al
c001e3da:	01 c6                	add    esi,eax
c001e3dc:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001e3e1:	0f 84 a2 00 00 00    	je     c001e489 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e3e7:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001e3ef:	0f 84 94 00 00 00    	je     c001e489 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001e3f5:	39 35 c4 ab 02 c0    	cmp    DWORD PTR ds:0xc002abc4,esi
c001e3fb:	0f 8f bb fe ff ff    	jg     c001e2bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001e401:	e9 e8 00 00 00       	jmp    c001e4ee <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001e406:	83 ec 0c             	sub    esp,0xc
c001e409:	68 7a 74 02 c0       	push   0xc002747a
c001e40e:	e8 ba b9 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e413:	83 c4 10             	add    esp,0x10
c001e416:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001e41d:	0f 85 a6 fe ff ff    	jne    c001e2c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e423:	e4 60                	in     al,0x60
c001e425:	3c 5a                	cmp    al,0x5a
c001e427:	74 04                	je     c001e42d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e429:	3c 1c                	cmp    al,0x1c
c001e42b:	75 f6                	jne    c001e423 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001e42d:	e4 60                	in     al,0x60
c001e42f:	3c 5a                	cmp    al,0x5a
c001e431:	74 fa                	je     c001e42d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e433:	3c 1c                	cmp    al,0x1c
c001e435:	74 f6                	je     c001e42d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001e437:	e9 8d fe ff ff       	jmp    c001e2c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001e43c:	83 ec 0c             	sub    esp,0xc
c001e43f:	68 82 74 02 c0       	push   0xc0027482
c001e444:	e8 84 b9 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e449:	83 c4 10             	add    esp,0x10
c001e44c:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001e453:	0f 85 90 fe ff ff    	jne    c001e2e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e459:	e4 60                	in     al,0x60
c001e45b:	3c 5a                	cmp    al,0x5a
c001e45d:	74 04                	je     c001e463 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e45f:	3c 1c                	cmp    al,0x1c
c001e461:	75 f6                	jne    c001e459 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001e463:	e4 60                	in     al,0x60
c001e465:	3c 5a                	cmp    al,0x5a
c001e467:	74 fa                	je     c001e463 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e469:	3c 1c                	cmp    al,0x1c
c001e46b:	74 f6                	je     c001e463 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001e46d:	e9 77 fe ff ff       	jmp    c001e2e9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001e472:	47                   	inc    edi
c001e473:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001e477:	0f 84 55 ff ff ff    	je     c001e3d2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001e47d:	46                   	inc    esi
c001e47e:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001e481:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001e484:	e9 3e ff ff ff       	jmp    c001e3c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001e489:	80 f9 44             	cmp    cl,0x44
c001e48c:	74 0e                	je     c001e49c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001e48e:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001e496:	0f 85 59 ff ff ff    	jne    c001e3f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e49c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001e4a0:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001e4a4:	c1 e0 04             	shl    eax,0x4
c001e4a7:	83 ea 30             	sub    edx,0x30
c001e4aa:	09 d0                	or     eax,edx
c001e4ac:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001e4b3:	0f 85 3c ff ff ff    	jne    c001e3f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e4b9:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001e4bd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e4c1:	c1 e2 04             	shl    edx,0x4
c001e4c4:	83 e8 30             	sub    eax,0x30
c001e4c7:	09 d0                	or     eax,edx
c001e4c9:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001e4d0:	0f 85 1f ff ff ff    	jne    c001e3f5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001e4d6:	50                   	push   eax
c001e4d7:	50                   	push   eax
c001e4d8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001e4dc:	50                   	push   eax
c001e4dd:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001e4e4:	e8 67 22 fe ff       	call   c0000750 <strcpy>
c001e4e9:	83 c4 10             	add    esp,0x10
c001e4ec:	eb 15                	jmp    c001e503 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001e4ee:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e4f5:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001e500:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001e503:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001e50a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001e510:	5b                   	pop    ebx
c001e511:	5e                   	pop    esi
c001e512:	5f                   	pop    edi
c001e513:	5d                   	pop    ebp
c001e514:	c3                   	ret    
c001e515:	90                   	nop

c001e516 <PCI::checkBus(unsigned char)>:
c001e516:	56                   	push   esi
c001e517:	53                   	push   ebx
c001e518:	31 db                	xor    ebx,ebx
c001e51a:	51                   	push   ecx
c001e51b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e520:	52                   	push   edx
c001e521:	53                   	push   ebx
c001e522:	43                   	inc    ebx
c001e523:	56                   	push   esi
c001e524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e528:	e8 bf 07 00 00       	call   c001ecec <PCI::checkDevice(unsigned char, unsigned char)>
c001e52d:	83 c4 10             	add    esp,0x10
c001e530:	83 fb 20             	cmp    ebx,0x20
c001e533:	75 eb                	jne    c001e520 <PCI::checkBus(unsigned char)+0xa>
c001e535:	58                   	pop    eax
c001e536:	5b                   	pop    ebx
c001e537:	5e                   	pop    esi
c001e538:	c3                   	ret    
c001e539:	90                   	nop

c001e53a <PCI::foundDevice(PCIDeviceInfo)>:
c001e53a:	55                   	push   ebp
c001e53b:	57                   	push   edi
c001e53c:	56                   	push   esi
c001e53d:	53                   	push   ebx
c001e53e:	83 ec 1c             	sub    esp,0x1c
c001e541:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e545:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001e54b:	0f 84 20 04 00 00    	je     c001e971 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e551:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001e558:	75 37                	jne    c001e591 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001e55a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e55e:	66 81 f9 06 04       	cmp    cx,0x406
c001e563:	75 5b                	jne    c001e5c0 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001e565:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001e56a:	50                   	push   eax
c001e56b:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001e570:	50                   	push   eax
c001e571:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001e576:	50                   	push   eax
c001e577:	53                   	push   ebx
c001e578:	e8 33 fa ff ff       	call   c001dfb0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001e57d:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001e581:	0f b6 c0             	movzx  eax,al
c001e584:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001e588:	83 c4 2c             	add    esp,0x2c
c001e58b:	5b                   	pop    ebx
c001e58c:	5e                   	pop    esi
c001e58d:	5f                   	pop    edi
c001e58e:	5d                   	pop    ebp
c001e58f:	eb 85                	jmp    c001e516 <PCI::checkBus(unsigned char)>
c001e591:	83 ec 0c             	sub    esp,0xc
c001e594:	68 8b 74 02 c0       	push   0xc002748b
c001e599:	e8 2f b8 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e59e:	83 c4 10             	add    esp,0x10
c001e5a1:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001e5a8:	75 b0                	jne    c001e55a <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e5aa:	e4 60                	in     al,0x60
c001e5ac:	3c 5a                	cmp    al,0x5a
c001e5ae:	74 04                	je     c001e5b4 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e5b0:	3c 1c                	cmp    al,0x1c
c001e5b2:	75 f6                	jne    c001e5aa <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001e5b4:	e4 60                	in     al,0x60
c001e5b6:	3c 5a                	cmp    al,0x5a
c001e5b8:	74 fa                	je     c001e5b4 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e5ba:	3c 1c                	cmp    al,0x1c
c001e5bc:	74 f6                	je     c001e5b4 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001e5be:	eb 9a                	jmp    c001e55a <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001e5c0:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001e5c6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001e5ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5ce:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001e5d2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001e5d6:	88 d0                	mov    al,dl
c001e5d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e5dd:	74 3b                	je     c001e61a <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001e5df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e5e3:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e5e6:	85 d2                	test   edx,edx
c001e5e8:	74 24                	je     c001e60e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e5ea:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001e5f0:	31 ef                	xor    edi,ebp
c001e5f2:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001e5f8:	75 14                	jne    c001e60e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e5fa:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001e600:	75 0c                	jne    c001e60e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001e602:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001e608:	0f 84 63 03 00 00    	je     c001e971 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e60e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e612:	8b 12                	mov    edx,DWORD PTR [edx]
c001e614:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e618:	eb be                	jmp    c001e5d8 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001e61a:	66 81 f9 01 06       	cmp    cx,0x601
c001e61f:	0f 85 81 01 00 00    	jne    c001e7a6 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001e625:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001e62c:	75 25                	jne    c001e653 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001e62e:	83 ec 0c             	sub    esp,0xc
c001e631:	68 64 01 00 00       	push   0x164
c001e636:	e8 38 b7 fe ff       	call   c0009d73 <malloc>
c001e63b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e63e:	89 c5                	mov    ebp,eax
c001e640:	e8 b7 12 00 00       	call   c001f8fc <SATABus::SATABus()>
c001e645:	83 c4 10             	add    esp,0x10
c001e648:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001e64f:	74 4a                	je     c001e69b <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e651:	eb 2f                	jmp    c001e682 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001e653:	83 ec 0c             	sub    esp,0xc
c001e656:	68 9b 74 02 c0       	push   0xc002749b
c001e65b:	e8 6d b7 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e660:	83 c4 10             	add    esp,0x10
c001e663:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001e66a:	75 c2                	jne    c001e62e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e66c:	e4 60                	in     al,0x60
c001e66e:	3c 1c                	cmp    al,0x1c
c001e670:	74 04                	je     c001e676 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e672:	3c 5a                	cmp    al,0x5a
c001e674:	75 f6                	jne    c001e66c <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001e676:	e4 60                	in     al,0x60
c001e678:	3c 5a                	cmp    al,0x5a
c001e67a:	74 fa                	je     c001e676 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e67c:	3c 1c                	cmp    al,0x1c
c001e67e:	74 f6                	je     c001e676 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001e680:	eb ac                	jmp    c001e62e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001e682:	83 ec 0c             	sub    esp,0xc
c001e685:	68 a1 74 02 c0       	push   0xc00274a1
c001e68a:	e8 3e b7 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e68f:	83 c4 10             	add    esp,0x10
c001e692:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001e699:	74 1b                	je     c001e6b6 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001e69b:	50                   	push   eax
c001e69c:	50                   	push   eax
c001e69d:	55                   	push   ebp
c001e69e:	53                   	push   ebx
c001e69f:	e8 2e ff fe ff       	call   c000e5d2 <Device::addChild(Device*)>
c001e6a4:	83 c4 10             	add    esp,0x10
c001e6a7:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001e6ae:	74 33                	je     c001e6e3 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e6b0:	eb 18                	jmp    c001e6ca <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001e6b2:	3c 1c                	cmp    al,0x1c
c001e6b4:	74 0c                	je     c001e6c2 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e6b6:	e4 60                	in     al,0x60
c001e6b8:	3c 5a                	cmp    al,0x5a
c001e6ba:	75 f6                	jne    c001e6b2 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001e6bc:	eb 04                	jmp    c001e6c2 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e6be:	3c 1c                	cmp    al,0x1c
c001e6c0:	75 d9                	jne    c001e69b <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001e6c2:	e4 60                	in     al,0x60
c001e6c4:	3c 5a                	cmp    al,0x5a
c001e6c6:	74 fa                	je     c001e6c2 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001e6c8:	eb f4                	jmp    c001e6be <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001e6ca:	83 ec 0c             	sub    esp,0xc
c001e6cd:	68 a9 74 02 c0       	push   0xc00274a9
c001e6d2:	e8 f6 b6 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e6d7:	83 c4 10             	add    esp,0x10
c001e6da:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001e6e1:	74 29                	je     c001e70c <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001e6e3:	83 ec 2c             	sub    esp,0x2c
c001e6e6:	b9 09 00 00 00       	mov    ecx,0x9
c001e6eb:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e6ef:	fc                   	cld    
c001e6f0:	89 e7                	mov    edi,esp
c001e6f2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e6f4:	55                   	push   ebp
c001e6f5:	e8 ea fd fe ff       	call   c000e4e4 <Device::preOpenPCI(PCIDeviceInfo)>
c001e6fa:	83 c4 30             	add    esp,0x30
c001e6fd:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001e704:	74 33                	je     c001e739 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e706:	eb 18                	jmp    c001e720 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001e708:	3c 1c                	cmp    al,0x1c
c001e70a:	74 0c                	je     c001e718 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e70c:	e4 60                	in     al,0x60
c001e70e:	3c 5a                	cmp    al,0x5a
c001e710:	75 f6                	jne    c001e708 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001e712:	eb 04                	jmp    c001e718 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e714:	3c 1c                	cmp    al,0x1c
c001e716:	75 cb                	jne    c001e6e3 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001e718:	e4 60                	in     al,0x60
c001e71a:	3c 5a                	cmp    al,0x5a
c001e71c:	74 fa                	je     c001e718 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001e71e:	eb f4                	jmp    c001e714 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001e720:	83 ec 0c             	sub    esp,0xc
c001e723:	68 b1 74 02 c0       	push   0xc00274b1
c001e728:	e8 a0 b6 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e72d:	83 c4 10             	add    esp,0x10
c001e730:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001e737:	74 23                	je     c001e75c <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001e739:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e73c:	6a 00                	push   0x0
c001e73e:	6a 00                	push   0x0
c001e740:	6a 00                	push   0x0
c001e742:	55                   	push   ebp
c001e743:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e746:	83 c4 10             	add    esp,0x10
c001e749:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001e750:	0f 84 1b 02 00 00    	je     c001e971 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e756:	eb 18                	jmp    c001e770 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001e758:	3c 1c                	cmp    al,0x1c
c001e75a:	74 0c                	je     c001e768 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e75c:	e4 60                	in     al,0x60
c001e75e:	3c 5a                	cmp    al,0x5a
c001e760:	75 f6                	jne    c001e758 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001e762:	eb 04                	jmp    c001e768 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e764:	3c 1c                	cmp    al,0x1c
c001e766:	75 d1                	jne    c001e739 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001e768:	e4 60                	in     al,0x60
c001e76a:	3c 5a                	cmp    al,0x5a
c001e76c:	74 fa                	je     c001e768 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001e76e:	eb f4                	jmp    c001e764 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001e770:	83 ec 0c             	sub    esp,0xc
c001e773:	68 b9 74 02 c0       	push   0xc00274b9
c001e778:	e8 50 b6 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e77d:	83 c4 10             	add    esp,0x10
c001e780:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001e787:	0f 85 e4 01 00 00    	jne    c001e971 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e78d:	e4 60                	in     al,0x60
c001e78f:	3c 5a                	cmp    al,0x5a
c001e791:	74 04                	je     c001e797 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e793:	3c 1c                	cmp    al,0x1c
c001e795:	75 f6                	jne    c001e78d <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001e797:	e4 60                	in     al,0x60
c001e799:	3c 5a                	cmp    al,0x5a
c001e79b:	74 fa                	je     c001e797 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e79d:	3c 1c                	cmp    al,0x1c
c001e79f:	74 f6                	je     c001e797 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001e7a1:	e9 cb 01 00 00       	jmp    c001e971 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e7a6:	66 81 f9 01 01       	cmp    cx,0x101
c001e7ab:	0f 85 7a 01 00 00    	jne    c001e92b <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001e7b1:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001e7b8:	75 25                	jne    c001e7df <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001e7ba:	83 ec 0c             	sub    esp,0xc
c001e7bd:	68 70 02 00 00       	push   0x270
c001e7c2:	e8 ac b5 fe ff       	call   c0009d73 <malloc>
c001e7c7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e7ca:	89 c5                	mov    ebp,eax
c001e7cc:	e8 df 05 00 00       	call   c001edb0 <IDE::IDE()>
c001e7d1:	83 c4 10             	add    esp,0x10
c001e7d4:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001e7db:	74 4a                	je     c001e827 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e7dd:	eb 2f                	jmp    c001e80e <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001e7df:	83 ec 0c             	sub    esp,0xc
c001e7e2:	68 c1 74 02 c0       	push   0xc00274c1
c001e7e7:	e8 e1 b5 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e7ec:	83 c4 10             	add    esp,0x10
c001e7ef:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001e7f6:	75 c2                	jne    c001e7ba <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e7f8:	e4 60                	in     al,0x60
c001e7fa:	3c 5a                	cmp    al,0x5a
c001e7fc:	74 04                	je     c001e802 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e7fe:	3c 1c                	cmp    al,0x1c
c001e800:	75 f6                	jne    c001e7f8 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001e802:	e4 60                	in     al,0x60
c001e804:	3c 5a                	cmp    al,0x5a
c001e806:	74 fa                	je     c001e802 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e808:	3c 1c                	cmp    al,0x1c
c001e80a:	74 f6                	je     c001e802 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001e80c:	eb ac                	jmp    c001e7ba <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001e80e:	83 ec 0c             	sub    esp,0xc
c001e811:	68 c8 74 02 c0       	push   0xc00274c8
c001e816:	e8 b2 b5 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e81b:	83 c4 10             	add    esp,0x10
c001e81e:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001e825:	74 1b                	je     c001e842 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001e827:	57                   	push   edi
c001e828:	57                   	push   edi
c001e829:	55                   	push   ebp
c001e82a:	53                   	push   ebx
c001e82b:	e8 a2 fd fe ff       	call   c000e5d2 <Device::addChild(Device*)>
c001e830:	83 c4 10             	add    esp,0x10
c001e833:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001e83a:	74 33                	je     c001e86f <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e83c:	eb 18                	jmp    c001e856 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001e83e:	3c 1c                	cmp    al,0x1c
c001e840:	74 0c                	je     c001e84e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e842:	e4 60                	in     al,0x60
c001e844:	3c 5a                	cmp    al,0x5a
c001e846:	75 f6                	jne    c001e83e <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001e848:	eb 04                	jmp    c001e84e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e84a:	3c 1c                	cmp    al,0x1c
c001e84c:	75 d9                	jne    c001e827 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e84e:	e4 60                	in     al,0x60
c001e850:	3c 5a                	cmp    al,0x5a
c001e852:	74 fa                	je     c001e84e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e854:	eb f4                	jmp    c001e84a <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001e856:	83 ec 0c             	sub    esp,0xc
c001e859:	68 cf 74 02 c0       	push   0xc00274cf
c001e85e:	e8 6a b5 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e863:	83 c4 10             	add    esp,0x10
c001e866:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001e86d:	74 29                	je     c001e898 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001e86f:	83 ec 2c             	sub    esp,0x2c
c001e872:	b9 09 00 00 00       	mov    ecx,0x9
c001e877:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e87b:	fc                   	cld    
c001e87c:	89 e7                	mov    edi,esp
c001e87e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e880:	55                   	push   ebp
c001e881:	e8 5e fc fe ff       	call   c000e4e4 <Device::preOpenPCI(PCIDeviceInfo)>
c001e886:	83 c4 30             	add    esp,0x30
c001e889:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001e890:	74 33                	je     c001e8c5 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e892:	eb 18                	jmp    c001e8ac <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001e894:	3c 1c                	cmp    al,0x1c
c001e896:	74 0c                	je     c001e8a4 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e898:	e4 60                	in     al,0x60
c001e89a:	3c 5a                	cmp    al,0x5a
c001e89c:	75 f6                	jne    c001e894 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001e89e:	eb 04                	jmp    c001e8a4 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e8a0:	3c 1c                	cmp    al,0x1c
c001e8a2:	75 cb                	jne    c001e86f <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e8a4:	e4 60                	in     al,0x60
c001e8a6:	3c 5a                	cmp    al,0x5a
c001e8a8:	74 fa                	je     c001e8a4 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e8aa:	eb f4                	jmp    c001e8a0 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001e8ac:	83 ec 0c             	sub    esp,0xc
c001e8af:	68 d6 74 02 c0       	push   0xc00274d6
c001e8b4:	e8 14 b5 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e8b9:	83 c4 10             	add    esp,0x10
c001e8bc:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001e8c3:	74 23                	je     c001e8e8 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001e8c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e8c8:	6a 00                	push   0x0
c001e8ca:	6a 00                	push   0x0
c001e8cc:	6a 00                	push   0x0
c001e8ce:	55                   	push   ebp
c001e8cf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e8d2:	83 c4 10             	add    esp,0x10
c001e8d5:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001e8dc:	0f 84 8f 00 00 00    	je     c001e971 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e8e2:	eb 18                	jmp    c001e8fc <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e8e4:	3c 1c                	cmp    al,0x1c
c001e8e6:	74 0c                	je     c001e8f4 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e8e8:	e4 60                	in     al,0x60
c001e8ea:	3c 5a                	cmp    al,0x5a
c001e8ec:	75 f6                	jne    c001e8e4 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e8ee:	eb 04                	jmp    c001e8f4 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e8f0:	3c 1c                	cmp    al,0x1c
c001e8f2:	75 d1                	jne    c001e8c5 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e8f4:	e4 60                	in     al,0x60
c001e8f6:	3c 5a                	cmp    al,0x5a
c001e8f8:	74 fa                	je     c001e8f4 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e8fa:	eb f4                	jmp    c001e8f0 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e8fc:	83 ec 0c             	sub    esp,0xc
c001e8ff:	68 dd 74 02 c0       	push   0xc00274dd
c001e904:	e8 c4 b4 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001e909:	83 c4 10             	add    esp,0x10
c001e90c:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001e913:	75 5c                	jne    c001e971 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e915:	e4 60                	in     al,0x60
c001e917:	3c 5a                	cmp    al,0x5a
c001e919:	74 04                	je     c001e91f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e91b:	3c 1c                	cmp    al,0x1c
c001e91d:	75 f6                	jne    c001e915 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e91f:	e4 60                	in     al,0x60
c001e921:	3c 5a                	cmp    al,0x5a
c001e923:	74 fa                	je     c001e91f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e925:	3c 1c                	cmp    al,0x1c
c001e927:	74 f6                	je     c001e91f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e929:	eb 46                	jmp    c001e971 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e92b:	83 ec 0c             	sub    esp,0xc
c001e92e:	68 58 01 00 00       	push   0x158
c001e933:	e8 3b b4 fe ff       	call   c0009d73 <malloc>
c001e938:	89 c5                	mov    ebp,eax
c001e93a:	58                   	pop    eax
c001e93b:	5a                   	pop    edx
c001e93c:	68 e4 74 02 c0       	push   0xc00274e4
c001e941:	55                   	push   ebp
c001e942:	e8 95 ff fe ff       	call   c000e8dc <DriverlessDevice::DriverlessDevice(char const*)>
c001e947:	59                   	pop    ecx
c001e948:	5e                   	pop    esi
c001e949:	55                   	push   ebp
c001e94a:	53                   	push   ebx
c001e94b:	e8 82 fc fe ff       	call   c000e5d2 <Device::addChild(Device*)>
c001e950:	83 c4 10             	add    esp,0x10
c001e953:	b9 09 00 00 00       	mov    ecx,0x9
c001e958:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e95c:	fc                   	cld    
c001e95d:	89 fe                	mov    esi,edi
c001e95f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e961:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e965:	83 c4 1c             	add    esp,0x1c
c001e968:	5b                   	pop    ebx
c001e969:	5e                   	pop    esi
c001e96a:	5f                   	pop    edi
c001e96b:	5d                   	pop    ebp
c001e96c:	e9 73 fb fe ff       	jmp    c000e4e4 <Device::preOpenPCI(PCIDeviceInfo)>
c001e971:	83 c4 1c             	add    esp,0x1c
c001e974:	5b                   	pop    ebx
c001e975:	5e                   	pop    esi
c001e976:	5f                   	pop    edi
c001e977:	5d                   	pop    ebp
c001e978:	c3                   	ret    
c001e979:	90                   	nop

c001e97a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e97a:	55                   	push   ebp
c001e97b:	57                   	push   edi
c001e97c:	56                   	push   esi
c001e97d:	53                   	push   ebx
c001e97e:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e984:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e98b:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e992:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e996:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e99d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e9a1:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e9a8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e9ac:	68 fe 74 02 c0       	push   0xc00274fe
c001e9b1:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e9b5:	53                   	push   ebx
c001e9b6:	e8 95 1d fe ff       	call   c0000750 <strcpy>
c001e9bb:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e9c0:	b2 64                	mov    dl,0x64
c001e9c2:	89 c8                	mov    eax,ecx
c001e9c4:	f6 f2                	div    dl
c001e9c6:	b2 0a                	mov    dl,0xa
c001e9c8:	83 c0 30             	add    eax,0x30
c001e9cb:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e9cf:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e9d3:	83 c4 10             	add    esp,0x10
c001e9d6:	89 c8                	mov    eax,ecx
c001e9d8:	f6 f2                	div    dl
c001e9da:	89 c1                	mov    ecx,eax
c001e9dc:	0f b6 c0             	movzx  eax,al
c001e9df:	88 e9                	mov    cl,ch
c001e9e1:	f6 f2                	div    dl
c001e9e3:	88 e0                	mov    al,ah
c001e9e5:	83 c0 30             	add    eax,0x30
c001e9e8:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e9ec:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e9f0:	8d 41 30             	lea    eax,[ecx+0x30]
c001e9f3:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e9f7:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e9fb:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001ea00:	f6 f2                	div    dl
c001ea02:	89 c1                	mov    ecx,eax
c001ea04:	0f b6 c0             	movzx  eax,al
c001ea07:	88 e9                	mov    cl,ch
c001ea09:	f6 f2                	div    dl
c001ea0b:	88 e0                	mov    al,ah
c001ea0d:	83 c0 30             	add    eax,0x30
c001ea10:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001ea14:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001ea18:	8d 41 30             	lea    eax,[ecx+0x30]
c001ea1b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001ea1f:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001ea23:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001ea28:	f6 f2                	div    dl
c001ea2a:	89 c1                	mov    ecx,eax
c001ea2c:	0f b6 c0             	movzx  eax,al
c001ea2f:	88 e9                	mov    cl,ch
c001ea31:	f6 f2                	div    dl
c001ea33:	88 e0                	mov    al,ah
c001ea35:	83 c0 30             	add    eax,0x30
c001ea38:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001ea3f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001ea43:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ea47:	8d 41 30             	lea    eax,[ecx+0x30]
c001ea4a:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001ea4e:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001ea52:	74 29                	je     c001ea7d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001ea54:	83 ec 0c             	sub    esp,0xc
c001ea57:	53                   	push   ebx
c001ea58:	e8 70 b3 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001ea5d:	83 c4 10             	add    esp,0x10
c001ea60:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001ea67:	75 14                	jne    c001ea7d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001ea69:	e4 60                	in     al,0x60
c001ea6b:	3c 1c                	cmp    al,0x1c
c001ea6d:	74 04                	je     c001ea73 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001ea6f:	3c 5a                	cmp    al,0x5a
c001ea71:	75 f6                	jne    c001ea69 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001ea73:	e4 60                	in     al,0x60
c001ea75:	3c 5a                	cmp    al,0x5a
c001ea77:	74 fa                	je     c001ea73 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001ea79:	3c 1c                	cmp    al,0x1c
c001ea7b:	74 f6                	je     c001ea73 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001ea7d:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001ea82:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001ea87:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001ea8c:	83 ec 0c             	sub    esp,0xc
c001ea8f:	6a 0c                	push   0xc
c001ea91:	56                   	push   esi
c001ea92:	53                   	push   ebx
c001ea93:	57                   	push   edi
c001ea94:	55                   	push   ebp
c001ea95:	e8 68 f3 ff ff       	call   c001de02 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ea9a:	83 c4 20             	add    esp,0x20
c001ea9d:	56                   	push   esi
c001ea9e:	53                   	push   ebx
c001ea9f:	57                   	push   edi
c001eaa0:	55                   	push   ebp
c001eaa1:	e8 50 f4 ff ff       	call   c001def6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001eaa6:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001eaab:	56                   	push   esi
c001eaac:	53                   	push   ebx
c001eaad:	57                   	push   edi
c001eaae:	55                   	push   ebp
c001eaaf:	e8 d8 f4 ff ff       	call   c001df8c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001eab4:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001eab8:	83 c4 14             	add    esp,0x14
c001eabb:	6a 3c                	push   0x3c
c001eabd:	56                   	push   esi
c001eabe:	53                   	push   ebx
c001eabf:	57                   	push   edi
c001eac0:	55                   	push   ebp
c001eac1:	e8 3c f3 ff ff       	call   c001de02 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001eac6:	0f b6 c4             	movzx  eax,ah
c001eac9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001eacd:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001ead1:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001ead8:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c001eadd:	83 c4 20             	add    esp,0x20
c001eae0:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001eae6:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001eaed:	0f 84 38 01 00 00    	je     c001ec2b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001eaf3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001eafb:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c001eb00:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eb04:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001eb0a:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001eb10:	0f 8e 15 01 00 00    	jle    c001ec2b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001eb16:	50                   	push   eax
c001eb17:	50                   	push   eax
c001eb18:	68 19 75 02 c0       	push   0xc0027519
c001eb1d:	8d 44 24 68          	lea    eax,[esp+0x68]
c001eb21:	50                   	push   eax
c001eb22:	e8 29 1c fe ff       	call   c0000750 <strcpy>
c001eb27:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001eb2b:	b9 0a 00 00 00       	mov    ecx,0xa
c001eb30:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001eb34:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001eb38:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001eb3c:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001eb40:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001eb44:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001eb48:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001eb4c:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001eb50:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001eb54:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001eb58:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001eb5c:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001eb60:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001eb64:	83 c4 10             	add    esp,0x10
c001eb67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eb6b:	99                   	cdq    
c001eb6c:	f7 f9                	idiv   ecx
c001eb6e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001eb72:	99                   	cdq    
c001eb73:	f7 f9                	idiv   ecx
c001eb75:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001eb79:	83 c2 30             	add    edx,0x30
c001eb7c:	83 c0 30             	add    eax,0x30
c001eb7f:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001eb83:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001eb87:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001eb8e:	74 2d                	je     c001ebbd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001eb90:	83 ec 0c             	sub    esp,0xc
c001eb93:	8d 44 24 68          	lea    eax,[esp+0x68]
c001eb97:	50                   	push   eax
c001eb98:	e8 30 b2 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001eb9d:	83 c4 10             	add    esp,0x10
c001eba0:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001eba7:	75 14                	jne    c001ebbd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001eba9:	e4 60                	in     al,0x60
c001ebab:	3c 5a                	cmp    al,0x5a
c001ebad:	74 04                	je     c001ebb3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001ebaf:	3c 1c                	cmp    al,0x1c
c001ebb1:	75 f6                	jne    c001eba9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001ebb3:	e4 60                	in     al,0x60
c001ebb5:	3c 5a                	cmp    al,0x5a
c001ebb7:	74 fa                	je     c001ebb3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001ebb9:	3c 1c                	cmp    al,0x1c
c001ebbb:	74 f6                	je     c001ebb3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001ebbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ebc1:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c001ebc6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ebcc:	8d 04 d0             	lea    eax,[eax+edx*8]
c001ebcf:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001ebd6:	39 d3                	cmp    ebx,edx
c001ebd8:	75 48                	jne    c001ec22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001ebda:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001ebe1:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001ebe5:	75 3b                	jne    c001ec22 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001ebe7:	83 ec 0c             	sub    esp,0xc
c001ebea:	68 48 75 02 c0       	push   0xc0027548
c001ebef:	e8 6b e4 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001ebf4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ebf8:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c001ebfd:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ec03:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001ec0b:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001ec0f:	50                   	push   eax
c001ec10:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ec14:	53                   	push   ebx
c001ec15:	68 6d 75 02 c0       	push   0xc002756d
c001ec1a:	e8 40 e4 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001ec1f:	83 c4 20             	add    esp,0x20
c001ec22:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ec26:	e9 d0 fe ff ff       	jmp    c001eafb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001ec2b:	31 d2                	xor    edx,edx
c001ec2d:	83 ec 0c             	sub    esp,0xc
c001ec30:	56                   	push   esi
c001ec31:	53                   	push   ebx
c001ec32:	57                   	push   edi
c001ec33:	52                   	push   edx
c001ec34:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ec38:	55                   	push   ebp
c001ec39:	e8 9a f3 ff ff       	call   c001dfd8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ec3e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ec42:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001ec49:	42                   	inc    edx
c001ec4a:	83 c4 20             	add    esp,0x20
c001ec4d:	83 fa 06             	cmp    edx,0x6
c001ec50:	75 db                	jne    c001ec2d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001ec52:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001ec57:	83 ec 0c             	sub    esp,0xc
c001ec5a:	86 e0                	xchg   al,ah
c001ec5c:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001ec64:	6a 02                	push   0x2
c001ec66:	56                   	push   esi
c001ec67:	53                   	push   ebx
c001ec68:	57                   	push   edi
c001ec69:	55                   	push   ebp
c001ec6a:	e8 93 f1 ff ff       	call   c001de02 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ec6f:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001ec77:	83 c4 20             	add    esp,0x20
c001ec7a:	56                   	push   esi
c001ec7b:	53                   	push   ebx
c001ec7c:	57                   	push   edi
c001ec7d:	55                   	push   ebp
c001ec7e:	e8 bd f2 ff ff       	call   c001df40 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001ec83:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001ec8a:	56                   	push   esi
c001ec8b:	53                   	push   ebx
c001ec8c:	57                   	push   edi
c001ec8d:	55                   	push   ebp
c001ec8e:	e8 17 f2 ff ff       	call   c001deaa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ec93:	b9 09 00 00 00       	mov    ecx,0x9
c001ec98:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001eca0:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001eca4:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001ecab:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001ecaf:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001ecb6:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001ecba:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001ecc1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001ecc5:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001eccc:	83 ec 0c             	sub    esp,0xc
c001eccf:	fc                   	cld    
c001ecd0:	89 e7                	mov    edi,esp
c001ecd2:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001ecd9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ecdb:	55                   	push   ebp
c001ecdc:	e8 59 f8 ff ff       	call   c001e53a <PCI::foundDevice(PCIDeviceInfo)>
c001ece1:	81 c4 dc 00 00 00    	add    esp,0xdc
c001ece7:	5b                   	pop    ebx
c001ece8:	5e                   	pop    esi
c001ece9:	5f                   	pop    edi
c001ecea:	5d                   	pop    ebp
c001eceb:	c3                   	ret    

c001ecec <PCI::checkDevice(unsigned char, unsigned char)>:
c001ecec:	55                   	push   ebp
c001eced:	57                   	push   edi
c001ecee:	56                   	push   esi
c001ecef:	53                   	push   ebx
c001ecf0:	83 ec 0c             	sub    esp,0xc
c001ecf3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ecf7:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001ecfc:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001ed01:	6a 00                	push   0x0
c001ed03:	56                   	push   esi
c001ed04:	57                   	push   edi
c001ed05:	55                   	push   ebp
c001ed06:	e8 9f f1 ff ff       	call   c001deaa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ed0b:	6a 00                	push   0x0
c001ed0d:	56                   	push   esi
c001ed0e:	57                   	push   edi
c001ed0f:	55                   	push   ebp
c001ed10:	e8 65 fc ff ff       	call   c001e97a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ed15:	83 c4 20             	add    esp,0x20
c001ed18:	6a 00                	push   0x0
c001ed1a:	56                   	push   esi
c001ed1b:	57                   	push   edi
c001ed1c:	55                   	push   ebp
c001ed1d:	e8 ac f1 ff ff       	call   c001dece <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ed22:	83 c4 10             	add    esp,0x10
c001ed25:	84 c0                	test   al,al
c001ed27:	79 27                	jns    c001ed50 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001ed29:	bb 01 00 00 00       	mov    ebx,0x1
c001ed2e:	53                   	push   ebx
c001ed2f:	56                   	push   esi
c001ed30:	57                   	push   edi
c001ed31:	55                   	push   ebp
c001ed32:	e8 73 f1 ff ff       	call   c001deaa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001ed37:	83 c4 10             	add    esp,0x10
c001ed3a:	66 40                	inc    ax
c001ed3c:	74 0c                	je     c001ed4a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001ed3e:	53                   	push   ebx
c001ed3f:	56                   	push   esi
c001ed40:	57                   	push   edi
c001ed41:	55                   	push   ebp
c001ed42:	e8 33 fc ff ff       	call   c001e97a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001ed47:	83 c4 10             	add    esp,0x10
c001ed4a:	43                   	inc    ebx
c001ed4b:	83 fb 08             	cmp    ebx,0x8
c001ed4e:	75 de                	jne    c001ed2e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001ed50:	83 c4 0c             	add    esp,0xc
c001ed53:	5b                   	pop    ebx
c001ed54:	5e                   	pop    esi
c001ed55:	5f                   	pop    edi
c001ed56:	5d                   	pop    ebp
c001ed57:	c3                   	ret    

c001ed58 <PCI::detect()>:
c001ed58:	56                   	push   esi
c001ed59:	53                   	push   ebx
c001ed5a:	53                   	push   ebx
c001ed5b:	31 db                	xor    ebx,ebx
c001ed5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ed61:	6a 00                	push   0x0
c001ed63:	6a 00                	push   0x0
c001ed65:	6a 00                	push   0x0
c001ed67:	56                   	push   esi
c001ed68:	e8 61 f1 ff ff       	call   c001dece <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001ed6d:	83 c4 10             	add    esp,0x10
c001ed70:	a8 80                	test   al,0x80
c001ed72:	75 21                	jne    c001ed95 <PCI::detect()+0x3d>
c001ed74:	51                   	push   ecx
c001ed75:	51                   	push   ecx
c001ed76:	6a 00                	push   0x0
c001ed78:	56                   	push   esi
c001ed79:	e8 98 f7 ff ff       	call   c001e516 <PCI::checkBus(unsigned char)>
c001ed7e:	83 c4 10             	add    esp,0x10
c001ed81:	eb 24                	jmp    c001eda7 <PCI::detect()+0x4f>
c001ed83:	52                   	push   edx
c001ed84:	52                   	push   edx
c001ed85:	53                   	push   ebx
c001ed86:	43                   	inc    ebx
c001ed87:	56                   	push   esi
c001ed88:	e8 89 f7 ff ff       	call   c001e516 <PCI::checkBus(unsigned char)>
c001ed8d:	83 c4 10             	add    esp,0x10
c001ed90:	83 fb 08             	cmp    ebx,0x8
c001ed93:	74 12                	je     c001eda7 <PCI::detect()+0x4f>
c001ed95:	53                   	push   ebx
c001ed96:	6a 00                	push   0x0
c001ed98:	6a 00                	push   0x0
c001ed9a:	56                   	push   esi
c001ed9b:	e8 0a f1 ff ff       	call   c001deaa <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001eda0:	83 c4 10             	add    esp,0x10
c001eda3:	66 40                	inc    ax
c001eda5:	74 dc                	je     c001ed83 <PCI::detect()+0x2b>
c001eda7:	58                   	pop    eax
c001eda8:	5b                   	pop    ebx
c001eda9:	5e                   	pop    esi
c001edaa:	c3                   	ret    
c001edab:	90                   	nop

c001edac <IDE::close(int, int, void*)>:
c001edac:	83 c8 ff             	or     eax,0xffffffff
c001edaf:	c3                   	ret    

c001edb0 <IDE::IDE()>:
c001edb0:	83 ec 0c             	sub    esp,0xc
c001edb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb7:	83 ec 08             	sub    esp,0x8
c001edba:	68 b4 75 02 c0       	push   0xc00275b4
c001edbf:	50                   	push   eax
c001edc0:	e8 bb fb fe ff       	call   c000e980 <HardDiskController::HardDiskController(char const*)>
c001edc5:	83 c4 10             	add    esp,0x10
c001edc8:	ba 44 76 02 c0       	mov    edx,0xc0027644
c001edcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd1:	89 10                	mov    DWORD PTR [eax],edx
c001edd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001edde:	90                   	nop
c001eddf:	83 c4 0c             	add    esp,0xc
c001ede2:	c3                   	ret    
c001ede3:	90                   	nop

c001ede4 <IDE::prepareInterrupt(unsigned char)>:
c001ede4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ede9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eded:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001edf5:	c3                   	ret    

c001edf6 <selectDrive(unsigned char, unsigned char)>:
c001edf6:	c3                   	ret    
c001edf7:	90                   	nop

c001edf8 <IDE::getBase(unsigned char)>:
c001edf8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001edfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee01:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ee09:	c3                   	ret    

c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001ee0a:	55                   	push   ebp
c001ee0b:	57                   	push   edi
c001ee0c:	56                   	push   esi
c001ee0d:	53                   	push   ebx
c001ee0e:	83 ec 1c             	sub    esp,0x1c
c001ee11:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ee15:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee19:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001ee1c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ee20:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ee24:	80 f9 03             	cmp    cl,0x3
c001ee27:	77 51                	ja     c001ee7a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001ee29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee2d:	0f b6 f2             	movzx  esi,dl
c001ee30:	0f b6 db             	movzx  ebx,bl
c001ee33:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001ee36:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001ee3a:	83 ca 80             	or     edx,0xffffff80
c001ee3d:	0f b6 d2             	movzx  edx,dl
c001ee40:	52                   	push   edx
c001ee41:	6a 0c                	push   0xc
c001ee43:	56                   	push   esi
c001ee44:	57                   	push   edi
c001ee45:	e8 c0 ff ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee4a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001ee4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee53:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001ee57:	ee                   	out    dx,al
c001ee58:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001ee5d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001ee61:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001ee65:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ee69:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ee71:	83 c4 2c             	add    esp,0x2c
c001ee74:	5b                   	pop    ebx
c001ee75:	5e                   	pop    esi
c001ee76:	5f                   	pop    edi
c001ee77:	5d                   	pop    ebp
c001ee78:	eb 90                	jmp    c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ee7a:	80 fb 07             	cmp    bl,0x7
c001ee7d:	77 12                	ja     c001ee91 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001ee7f:	0f b6 d2             	movzx  edx,dl
c001ee82:	0f b6 db             	movzx  ebx,bl
c001ee85:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001ee8d:	89 da                	mov    edx,ebx
c001ee8f:	eb 2f                	jmp    c001eec0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001ee91:	80 fb 0d             	cmp    bl,0xd
c001ee94:	77 13                	ja     c001eea9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001ee96:	0f b6 d2             	movzx  edx,dl
c001ee99:	0f b6 db             	movzx  ebx,bl
c001ee9c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001eea3:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001eea7:	eb 17                	jmp    c001eec0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001eea9:	80 fb 15             	cmp    bl,0x15
c001eeac:	77 13                	ja     c001eec1 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001eeae:	0f b6 d2             	movzx  edx,dl
c001eeb1:	0f b6 db             	movzx  ebx,bl
c001eeb4:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001eebc:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001eec0:	ee                   	out    dx,al
c001eec1:	83 c4 1c             	add    esp,0x1c
c001eec4:	5b                   	pop    ebx
c001eec5:	5e                   	pop    esi
c001eec6:	5f                   	pop    edi
c001eec7:	5d                   	pop    ebp
c001eec8:	c3                   	ret    
c001eec9:	90                   	nop

c001eeca <IDE::read(unsigned char, unsigned char)>:
c001eeca:	55                   	push   ebp
c001eecb:	57                   	push   edi
c001eecc:	56                   	push   esi
c001eecd:	53                   	push   ebx
c001eece:	83 ec 1c             	sub    esp,0x1c
c001eed1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001eed5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eed9:	8d 43 f8             	lea    eax,[ebx-0x8]
c001eedc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001eee0:	3c 03                	cmp    al,0x3
c001eee2:	77 43                	ja     c001ef27 <IDE::read(unsigned char, unsigned char)+0x5d>
c001eee4:	0f b6 f2             	movzx  esi,dl
c001eee7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001eeea:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001eeee:	83 c8 80             	or     eax,0xffffff80
c001eef1:	0f b6 c0             	movzx  eax,al
c001eef4:	50                   	push   eax
c001eef5:	6a 0c                	push   0xc
c001eef7:	56                   	push   esi
c001eef8:	57                   	push   edi
c001eef9:	e8 0c ff ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eefe:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001ef03:	0f b6 c3             	movzx  eax,bl
c001ef06:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001ef0a:	ec                   	in     al,dx
c001ef0b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ef0f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001ef14:	52                   	push   edx
c001ef15:	6a 0c                	push   0xc
c001ef17:	56                   	push   esi
c001ef18:	57                   	push   edi
c001ef19:	e8 ec fe ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef1e:	83 c4 20             	add    esp,0x20
c001ef21:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ef25:	eb 49                	jmp    c001ef70 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ef27:	80 fb 07             	cmp    bl,0x7
c001ef2a:	77 12                	ja     c001ef3e <IDE::read(unsigned char, unsigned char)+0x74>
c001ef2c:	0f b6 d2             	movzx  edx,dl
c001ef2f:	0f b6 c3             	movzx  eax,bl
c001ef32:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001ef3a:	89 c2                	mov    edx,eax
c001ef3c:	eb 31                	jmp    c001ef6f <IDE::read(unsigned char, unsigned char)+0xa5>
c001ef3e:	80 fb 0d             	cmp    bl,0xd
c001ef41:	77 13                	ja     c001ef56 <IDE::read(unsigned char, unsigned char)+0x8c>
c001ef43:	0f b6 d2             	movzx  edx,dl
c001ef46:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001ef4d:	0f b6 d3             	movzx  edx,bl
c001ef50:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ef54:	eb 19                	jmp    c001ef6f <IDE::read(unsigned char, unsigned char)+0xa5>
c001ef56:	31 c0                	xor    eax,eax
c001ef58:	80 fb 15             	cmp    bl,0x15
c001ef5b:	77 13                	ja     c001ef70 <IDE::read(unsigned char, unsigned char)+0xa6>
c001ef5d:	0f b6 d2             	movzx  edx,dl
c001ef60:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ef68:	0f b6 d3             	movzx  edx,bl
c001ef6b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ef6f:	ec                   	in     al,dx
c001ef70:	83 c4 1c             	add    esp,0x1c
c001ef73:	5b                   	pop    ebx
c001ef74:	5e                   	pop    esi
c001ef75:	5f                   	pop    edi
c001ef76:	5d                   	pop    ebp
c001ef77:	c3                   	ret    

c001ef78 <IDE::waitInterrupt(unsigned char)>:
c001ef78:	55                   	push   ebp
c001ef79:	57                   	push   edi
c001ef7a:	56                   	push   esi
c001ef7b:	53                   	push   ebx
c001ef7c:	31 db                	xor    ebx,ebx
c001ef7e:	83 ec 0c             	sub    esp,0xc
c001ef81:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ef85:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001ef8a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ef92:	89 e8                	mov    eax,ebp
c001ef94:	84 c0                	test   al,al
c001ef96:	75 30                	jne    c001efc8 <IDE::waitInterrupt(unsigned char)+0x50>
c001ef98:	50                   	push   eax
c001ef99:	6a 0c                	push   0xc
c001ef9b:	56                   	push   esi
c001ef9c:	57                   	push   edi
c001ef9d:	e8 28 ff ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001efa2:	83 c4 10             	add    esp,0x10
c001efa5:	a8 01                	test   al,0x1
c001efa7:	75 27                	jne    c001efd0 <IDE::waitInterrupt(unsigned char)+0x58>
c001efa9:	f6 c3 04             	test   bl,0x4
c001efac:	75 12                	jne    c001efc0 <IDE::waitInterrupt(unsigned char)+0x48>
c001efae:	83 fb 32             	cmp    ebx,0x32
c001efb1:	7e 0d                	jle    c001efc0 <IDE::waitInterrupt(unsigned char)+0x48>
c001efb3:	83 ec 0c             	sub    esp,0xc
c001efb6:	6a 64                	push   0x64
c001efb8:	e8 db a2 ff ff       	call   c0019298 <milliTenthSleep(unsigned int)>
c001efbd:	83 c4 10             	add    esp,0x10
c001efc0:	83 fb 3c             	cmp    ebx,0x3c
c001efc3:	74 0b                	je     c001efd0 <IDE::waitInterrupt(unsigned char)+0x58>
c001efc5:	43                   	inc    ebx
c001efc6:	eb c2                	jmp    c001ef8a <IDE::waitInterrupt(unsigned char)+0x12>
c001efc8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001efd0:	83 c4 0c             	add    esp,0xc
c001efd3:	89 e8                	mov    eax,ebp
c001efd5:	5b                   	pop    ebx
c001efd6:	5e                   	pop    esi
c001efd7:	5f                   	pop    edi
c001efd8:	5d                   	pop    ebp
c001efd9:	c3                   	ret    

c001efda <ideChannel0IRQHandler(regs*, void*)>:
c001efda:	83 ec 10             	sub    esp,0x10
c001efdd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efe1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001efe8:	6a 07                	push   0x7
c001efea:	6a 00                	push   0x0
c001efec:	50                   	push   eax
c001efed:	e8 d8 fe ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001eff2:	83 c4 1c             	add    esp,0x1c
c001eff5:	c3                   	ret    

c001eff6 <ideChannel1IRQHandler(regs*, void*)>:
c001eff6:	83 ec 10             	sub    esp,0x10
c001eff9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001effd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001f004:	6a 07                	push   0x7
c001f006:	6a 01                	push   0x1
c001f008:	50                   	push   eax
c001f009:	e8 bc fe ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f00e:	83 c4 1c             	add    esp,0x1c
c001f011:	c3                   	ret    

c001f012 <IDE::enableIRQs(unsigned char, bool)>:
c001f012:	57                   	push   edi
c001f013:	56                   	push   esi
c001f014:	be 04 00 00 00       	mov    esi,0x4
c001f019:	53                   	push   ebx
c001f01a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001f01f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f023:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001f028:	0f 94 c0             	sete   al
c001f02b:	d1 e0                	shl    eax,1
c001f02d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001f034:	0f b6 c0             	movzx  eax,al
c001f037:	50                   	push   eax
c001f038:	6a 0c                	push   0xc
c001f03a:	57                   	push   edi
c001f03b:	53                   	push   ebx
c001f03c:	e8 c9 fd ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f041:	83 c4 10             	add    esp,0x10
c001f044:	50                   	push   eax
c001f045:	6a 0c                	push   0xc
c001f047:	57                   	push   edi
c001f048:	53                   	push   ebx
c001f049:	e8 7c fe ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f04e:	83 c4 10             	add    esp,0x10
c001f051:	4e                   	dec    esi
c001f052:	75 f0                	jne    c001f044 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001f054:	5b                   	pop    ebx
c001f055:	5e                   	pop    esi
c001f056:	5f                   	pop    edi
c001f057:	c3                   	ret    

c001f058 <IDE::open(int, int, void*)>:
c001f058:	55                   	push   ebp
c001f059:	57                   	push   edi
c001f05a:	56                   	push   esi
c001f05b:	53                   	push   ebx
c001f05c:	83 ec 1c             	sub    esp,0x1c
c001f05f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f063:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001f06c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001f075:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001f07c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001f083:	0f 85 b0 02 00 00    	jne    c001f339 <IDE::open(int, int, void*)+0x2e1>
c001f089:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001f08f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001f093:	83 e0 7f             	and    eax,0x7f
c001f096:	3c 05                	cmp    al,0x5
c001f098:	74 04                	je     c001f09e <IDE::open(int, int, void*)+0x46>
c001f09a:	3c 0f                	cmp    al,0xf
c001f09c:	75 32                	jne    c001f0d0 <IDE::open(int, int, void*)+0x78>
c001f09e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001f0a4:	83 e0 fc             	and    eax,0xfffffffc
c001f0a7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f0ae:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001f0b4:	83 e0 fc             	and    eax,0xfffffffc
c001f0b7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f0be:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001f0c4:	83 e0 fc             	and    eax,0xfffffffc
c001f0c7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f0ce:	eb 14                	jmp    c001f0e4 <IDE::open(int, int, void*)+0x8c>
c001f0d0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001f0da:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001f0e4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001f0eb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001f0f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f0f6:	89 c6                	mov    esi,eax
c001f0f8:	bf f8 0c 00 00       	mov    edi,0xcf8
c001f0fd:	c1 e6 10             	shl    esi,0x10
c001f100:	89 e8                	mov    eax,ebp
c001f102:	89 fa                	mov    edx,edi
c001f104:	c1 e0 0b             	shl    eax,0xb
c001f107:	09 f0                	or     eax,esi
c001f109:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001f110:	c1 e6 08             	shl    esi,0x8
c001f113:	09 c6                	or     esi,eax
c001f115:	89 f0                	mov    eax,esi
c001f117:	0d 08 00 00 80       	or     eax,0x80000008
c001f11c:	ef                   	out    dx,eax
c001f11d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001f122:	89 ca                	mov    edx,ecx
c001f124:	ed                   	in     eax,dx
c001f125:	c1 e8 10             	shr    eax,0x10
c001f128:	3d ff ff 00 00       	cmp    eax,0xffff
c001f12d:	0f 84 f5 00 00 00    	je     c001f228 <IDE::open(int, int, void*)+0x1d0>
c001f133:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001f139:	89 fa                	mov    edx,edi
c001f13b:	89 f0                	mov    eax,esi
c001f13d:	ef                   	out    dx,eax
c001f13e:	b0 fe                	mov    al,0xfe
c001f140:	89 ca                	mov    edx,ecx
c001f142:	ee                   	out    dx,al
c001f143:	89 f0                	mov    eax,esi
c001f145:	89 fa                	mov    edx,edi
c001f147:	ef                   	out    dx,eax
c001f148:	89 ca                	mov    edx,ecx
c001f14a:	ed                   	in     eax,dx
c001f14b:	3c fe                	cmp    al,0xfe
c001f14d:	0f 85 a9 00 00 00    	jne    c001f1fc <IDE::open(int, int, void*)+0x1a4>
c001f153:	8b 15 88 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028c88
c001f159:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001f160:	74 33                	je     c001f195 <IDE::open(int, int, void*)+0x13d>
c001f162:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001f168:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001f16c:	40                   	inc    eax
c001f16d:	83 ec 0c             	sub    esp,0xc
c001f170:	0f b6 c0             	movzx  eax,al
c001f173:	50                   	push   eax
c001f174:	55                   	push   ebp
c001f175:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001f179:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001f17f:	51                   	push   ecx
c001f180:	e8 bb 34 ff ff       	call   c0012640 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001f185:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001f18a:	83 c4 1c             	add    esp,0x1c
c001f18d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f193:	eb 0a                	jmp    c001f19f <IDE::open(int, int, void*)+0x147>
c001f195:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001f19f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001f1a6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001f1ad:	c1 e1 10             	shl    ecx,0x10
c001f1b0:	c1 e0 08             	shl    eax,0x8
c001f1b3:	bf f8 0c 00 00       	mov    edi,0xcf8
c001f1b8:	09 c1                	or     ecx,eax
c001f1ba:	89 fa                	mov    edx,edi
c001f1bc:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001f1c3:	c1 e0 0b             	shl    eax,0xb
c001f1c6:	09 c1                	or     ecx,eax
c001f1c8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001f1ce:	89 c8                	mov    eax,ecx
c001f1d0:	ef                   	out    dx,eax
c001f1d1:	be fc 0c 00 00       	mov    esi,0xcfc
c001f1d6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001f1dc:	89 f2                	mov    edx,esi
c001f1de:	ee                   	out    dx,al
c001f1df:	89 c8                	mov    eax,ecx
c001f1e1:	89 fa                	mov    edx,edi
c001f1e3:	ef                   	out    dx,eax
c001f1e4:	89 f2                	mov    edx,esi
c001f1e6:	ed                   	in     eax,dx
c001f1e7:	0f b6 c0             	movzx  eax,al
c001f1ea:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001f1f0:	74 46                	je     c001f238 <IDE::open(int, int, void*)+0x1e0>
c001f1f2:	83 ec 0c             	sub    esp,0xc
c001f1f5:	68 cc 75 02 c0       	push   0xc00275cc
c001f1fa:	eb 34                	jmp    c001f230 <IDE::open(int, int, void*)+0x1d8>
c001f1fc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001f205:	75 17                	jne    c001f21e <IDE::open(int, int, void*)+0x1c6>
c001f207:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001f20c:	74 07                	je     c001f215 <IDE::open(int, int, void*)+0x1bd>
c001f20e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001f213:	75 09                	jne    c001f21e <IDE::open(int, int, void*)+0x1c6>
c001f215:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f21c:	eb 1a                	jmp    c001f238 <IDE::open(int, int, void*)+0x1e0>
c001f21e:	83 ec 0c             	sub    esp,0xc
c001f221:	68 d4 75 02 c0       	push   0xc00275d4
c001f226:	eb 08                	jmp    c001f230 <IDE::open(int, int, void*)+0x1d8>
c001f228:	83 ec 0c             	sub    esp,0xc
c001f22b:	68 05 76 02 c0       	push   0xc0027605
c001f230:	e8 fc 5e ff ff       	call   c0015131 <Krnl::panic(char const*)>
c001f235:	83 c4 10             	add    esp,0x10
c001f238:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001f23f:	79 1a                	jns    c001f25b <IDE::open(int, int, void*)+0x203>
c001f241:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001f247:	83 e0 fc             	and    eax,0xfffffffc
c001f24a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001f251:	83 c0 08             	add    eax,0x8
c001f254:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001f25b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001f261:	89 c2                	mov    edx,eax
c001f263:	83 e2 0f             	and    edx,0xf
c001f266:	66 83 fa 08          	cmp    dx,0x8
c001f26a:	75 0a                	jne    c001f276 <IDE::open(int, int, void*)+0x21e>
c001f26c:	83 e8 02             	sub    eax,0x2
c001f26f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f276:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001f27c:	89 c2                	mov    edx,eax
c001f27e:	83 e2 0f             	and    edx,0xf
c001f281:	66 83 fa 08          	cmp    dx,0x8
c001f285:	75 0a                	jne    c001f291 <IDE::open(int, int, void*)+0x239>
c001f287:	83 e8 02             	sub    eax,0x2
c001f28a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f291:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001f298:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001f29f:	89 d0                	mov    eax,edx
c001f2a1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f2a4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f2a8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001f2ac:	8d 4a 01             	lea    ecx,[edx+0x1]
c001f2af:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f2b4:	0f b6 c9             	movzx  ecx,cl
c001f2b7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001f2be:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f2c1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f2c5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001f2c9:	8d 50 02             	lea    edx,[eax+0x2]
c001f2cc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f2d1:	0f b6 d2             	movzx  edx,dl
c001f2d4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001f2da:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f2dd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f2e1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001f2e5:	8d 48 03             	lea    ecx,[eax+0x3]
c001f2e8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f2ed:	0f b6 c9             	movzx  ecx,cl
c001f2f0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001f2f6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001f2f9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001f2fd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001f301:	8d 50 04             	lea    edx,[eax+0x4]
c001f304:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001f30a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001f30f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001f316:	66 85 f6             	test   si,si
c001f319:	74 5b                	je     c001f376 <IDE::open(int, int, void*)+0x31e>
c001f31b:	0f b6 d2             	movzx  edx,dl
c001f31e:	83 c0 05             	add    eax,0x5
c001f321:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001f324:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001f328:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001f32c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001f332:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001f337:	eb 3d                	jmp    c001f376 <IDE::open(int, int, void*)+0x31e>
c001f339:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001f33f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001f346:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001f34d:	66 05 06 02          	add    ax,0x206
c001f351:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001f358:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001f35f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001f366:	66 05 06 02          	add    ax,0x206
c001f36a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001f371:	e9 e5 fe ff ff       	jmp    c001f25b <IDE::open(int, int, void*)+0x203>
c001f376:	50                   	push   eax
c001f377:	50                   	push   eax
c001f378:	6a 00                	push   0x0
c001f37a:	53                   	push   ebx
c001f37b:	e8 64 fa ff ff       	call   c001ede4 <IDE::prepareInterrupt(unsigned char)>
c001f380:	5a                   	pop    edx
c001f381:	59                   	pop    ecx
c001f382:	6a 01                	push   0x1
c001f384:	53                   	push   ebx
c001f385:	e8 5a fa ff ff       	call   c001ede4 <IDE::prepareInterrupt(unsigned char)>
c001f38a:	83 c4 0c             	add    esp,0xc
c001f38d:	6a 00                	push   0x0
c001f38f:	6a 00                	push   0x0
c001f391:	53                   	push   ebx
c001f392:	e8 7b fc ff ff       	call   c001f012 <IDE::enableIRQs(unsigned char, bool)>
c001f397:	83 c4 0c             	add    esp,0xc
c001f39a:	6a 00                	push   0x0
c001f39c:	6a 01                	push   0x1
c001f39e:	53                   	push   ebx
c001f39f:	e8 6e fc ff ff       	call   c001f012 <IDE::enableIRQs(unsigned char, bool)>
c001f3a4:	83 c4 10             	add    esp,0x10
c001f3a7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001f3ae:	74 34                	je     c001f3e4 <IDE::open(int, int, void*)+0x38c>
c001f3b0:	83 ec 0c             	sub    esp,0xc
c001f3b3:	53                   	push   ebx
c001f3b4:	6a 01                	push   0x1
c001f3b6:	68 da ef 01 c0       	push   0xc001efda
c001f3bb:	6a 0e                	push   0xe
c001f3bd:	53                   	push   ebx
c001f3be:	e8 87 f1 fe ff       	call   c000e54a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f3c3:	83 c4 14             	add    esp,0x14
c001f3c6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001f3cc:	53                   	push   ebx
c001f3cd:	6a 01                	push   0x1
c001f3cf:	68 f6 ef 01 c0       	push   0xc001eff6
c001f3d4:	6a 0f                	push   0xf
c001f3d6:	53                   	push   ebx
c001f3d7:	e8 6e f1 fe ff       	call   c000e54a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f3dc:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001f3e2:	eb 38                	jmp    c001f41c <IDE::open(int, int, void*)+0x3c4>
c001f3e4:	83 ec 0c             	sub    esp,0xc
c001f3e7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001f3f1:	53                   	push   ebx
c001f3f2:	6a 00                	push   0x0
c001f3f4:	68 da ef 01 c0       	push   0xc001efda
c001f3f9:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001f3ff:	53                   	push   ebx
c001f400:	e8 45 f1 fe ff       	call   c000e54a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f405:	83 c4 14             	add    esp,0x14
c001f408:	53                   	push   ebx
c001f409:	6a 00                	push   0x0
c001f40b:	68 f6 ef 01 c0       	push   0xc001eff6
c001f410:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001f416:	53                   	push   ebx
c001f417:	e8 2e f1 fe ff       	call   c000e54a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f41c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f41e:	83 c4 20             	add    esp,0x20
c001f421:	83 ec 0c             	sub    esp,0xc
c001f424:	53                   	push   ebx
c001f425:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001f428:	83 c4 0c             	add    esp,0xc
c001f42b:	6a 07                	push   0x7
c001f42d:	6a 00                	push   0x0
c001f42f:	53                   	push   ebx
c001f430:	e8 95 fa ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f435:	83 c4 0c             	add    esp,0xc
c001f438:	6a 07                	push   0x7
c001f43a:	6a 01                	push   0x1
c001f43c:	53                   	push   ebx
c001f43d:	e8 88 fa ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f442:	83 c4 0c             	add    esp,0xc
c001f445:	6a 01                	push   0x1
c001f447:	6a 00                	push   0x0
c001f449:	53                   	push   ebx
c001f44a:	e8 c3 fb ff ff       	call   c001f012 <IDE::enableIRQs(unsigned char, bool)>
c001f44f:	83 c4 0c             	add    esp,0xc
c001f452:	6a 01                	push   0x1
c001f454:	6a 01                	push   0x1
c001f456:	53                   	push   ebx
c001f457:	e8 b6 fb ff ff       	call   c001f012 <IDE::enableIRQs(unsigned char, bool)>
c001f45c:	83 c4 2c             	add    esp,0x2c
c001f45f:	31 c0                	xor    eax,eax
c001f461:	5b                   	pop    ebx
c001f462:	5e                   	pop    esi
c001f463:	5f                   	pop    edi
c001f464:	5d                   	pop    ebp
c001f465:	c3                   	ret    

c001f466 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001f466:	55                   	push   ebp
c001f467:	57                   	push   edi
c001f468:	56                   	push   esi
c001f469:	53                   	push   ebx
c001f46a:	83 ec 1c             	sub    esp,0x1c
c001f46d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f471:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f475:	8d 50 f8             	lea    edx,[eax-0x8]
c001f478:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f47c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001f480:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f484:	80 fa 03             	cmp    dl,0x3
c001f487:	77 5d                	ja     c001f4e6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001f489:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f48d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f491:	0f b6 db             	movzx  ebx,bl
c001f494:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001f497:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001f49b:	83 ca 80             	or     edx,0xffffff80
c001f49e:	0f b6 d2             	movzx  edx,dl
c001f4a1:	52                   	push   edx
c001f4a2:	6a 0c                	push   0xc
c001f4a4:	53                   	push   ebx
c001f4a5:	56                   	push   esi
c001f4a6:	e8 5f f9 ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4ab:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001f4b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f4b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f4b8:	0f b6 c0             	movzx  eax,al
c001f4bb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001f4bf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f4c1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001f4c6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001f4ca:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001f4ce:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f4d2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001f4da:	83 c4 2c             	add    esp,0x2c
c001f4dd:	5b                   	pop    ebx
c001f4de:	5e                   	pop    esi
c001f4df:	5f                   	pop    edi
c001f4e0:	5d                   	pop    ebp
c001f4e1:	e9 24 f9 ff ff       	jmp    c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f4e6:	3c 07                	cmp    al,0x7
c001f4e8:	77 10                	ja     c001f4fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001f4ea:	0f b6 db             	movzx  ebx,bl
c001f4ed:	0f b6 d0             	movzx  edx,al
c001f4f0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001f4f8:	eb 2d                	jmp    c001f527 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f4fa:	3c 0d                	cmp    al,0xd
c001f4fc:	77 13                	ja     c001f511 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001f4fe:	0f b6 db             	movzx  ebx,bl
c001f501:	0f b6 c0             	movzx  eax,al
c001f504:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001f50b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001f50f:	eb 16                	jmp    c001f527 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001f511:	3c 15                	cmp    al,0x15
c001f513:	77 14                	ja     c001f529 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001f515:	0f b6 db             	movzx  ebx,bl
c001f518:	0f b6 c0             	movzx  eax,al
c001f51b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001f523:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001f527:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001f529:	83 c4 1c             	add    esp,0x1c
c001f52c:	5b                   	pop    ebx
c001f52d:	5e                   	pop    esi
c001f52e:	5f                   	pop    edi
c001f52f:	5d                   	pop    ebp
c001f530:	c3                   	ret    
c001f531:	90                   	nop

c001f532 <IDE::detect()>:
c001f532:	55                   	push   ebp
c001f533:	57                   	push   edi
c001f534:	56                   	push   esi
c001f535:	53                   	push   ebx
c001f536:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001f53c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001f543:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001f54a:	0f 85 97 02 00 00    	jne    c001f7e7 <IDE::detect()+0x2b5>
c001f550:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001f557:	31 f6                	xor    esi,esi
c001f559:	31 ed                	xor    ebp,ebp
c001f55b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f563:	89 e8                	mov    eax,ebp
c001f565:	c1 e0 06             	shl    eax,0x6
c001f568:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001f570:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f574:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f578:	c1 e0 04             	shl    eax,0x4
c001f57b:	83 c8 a0             	or     eax,0xffffffa0
c001f57e:	0f b6 c0             	movzx  eax,al
c001f581:	50                   	push   eax
c001f582:	6a 06                	push   0x6
c001f584:	56                   	push   esi
c001f585:	53                   	push   ebx
c001f586:	e8 7f f8 ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f58b:	83 c4 0c             	add    esp,0xc
c001f58e:	6a 0c                	push   0xc
c001f590:	56                   	push   esi
c001f591:	53                   	push   ebx
c001f592:	e8 33 f9 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f597:	83 c4 0c             	add    esp,0xc
c001f59a:	6a 0c                	push   0xc
c001f59c:	56                   	push   esi
c001f59d:	53                   	push   ebx
c001f59e:	e8 27 f9 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f5a3:	83 c4 0c             	add    esp,0xc
c001f5a6:	6a 0c                	push   0xc
c001f5a8:	56                   	push   esi
c001f5a9:	53                   	push   ebx
c001f5aa:	e8 1b f9 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f5af:	83 c4 0c             	add    esp,0xc
c001f5b2:	6a 0c                	push   0xc
c001f5b4:	56                   	push   esi
c001f5b5:	53                   	push   ebx
c001f5b6:	e8 0f f9 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f5bb:	68 ec 00 00 00       	push   0xec
c001f5c0:	6a 07                	push   0x7
c001f5c2:	56                   	push   esi
c001f5c3:	53                   	push   ebx
c001f5c4:	e8 41 f8 ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5c9:	83 c4 1c             	add    esp,0x1c
c001f5cc:	6a 0c                	push   0xc
c001f5ce:	56                   	push   esi
c001f5cf:	53                   	push   ebx
c001f5d0:	e8 f5 f8 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f5d5:	83 c4 0c             	add    esp,0xc
c001f5d8:	6a 0c                	push   0xc
c001f5da:	56                   	push   esi
c001f5db:	53                   	push   ebx
c001f5dc:	e8 e9 f8 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f5e1:	83 c4 0c             	add    esp,0xc
c001f5e4:	6a 0c                	push   0xc
c001f5e6:	56                   	push   esi
c001f5e7:	53                   	push   ebx
c001f5e8:	e8 dd f8 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f5ed:	83 c4 0c             	add    esp,0xc
c001f5f0:	6a 0c                	push   0xc
c001f5f2:	56                   	push   esi
c001f5f3:	53                   	push   ebx
c001f5f4:	e8 d1 f8 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f5f9:	83 c4 0c             	add    esp,0xc
c001f5fc:	6a 0c                	push   0xc
c001f5fe:	56                   	push   esi
c001f5ff:	53                   	push   ebx
c001f600:	e8 c5 f8 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f605:	83 c4 10             	add    esp,0x10
c001f608:	84 c0                	test   al,al
c001f60a:	0f 84 5f 01 00 00    	je     c001f76f <IDE::detect()+0x23d>
c001f610:	31 ff                	xor    edi,edi
c001f612:	50                   	push   eax
c001f613:	6a 0c                	push   0xc
c001f615:	56                   	push   esi
c001f616:	53                   	push   ebx
c001f617:	e8 ae f8 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f61c:	83 c4 10             	add    esp,0x10
c001f61f:	a8 01                	test   al,0x1
c001f621:	0f 85 69 01 00 00    	jne    c001f790 <IDE::detect()+0x25e>
c001f627:	84 c0                	test   al,al
c001f629:	78 04                	js     c001f62f <IDE::detect()+0xfd>
c001f62b:	a8 08                	test   al,0x8
c001f62d:	75 23                	jne    c001f652 <IDE::detect()+0x120>
c001f62f:	47                   	inc    edi
c001f630:	81 ff 17 01 00 00    	cmp    edi,0x117
c001f636:	7e da                	jle    c001f612 <IDE::detect()+0xe0>
c001f638:	83 ec 0c             	sub    esp,0xc
c001f63b:	6a 32                	push   0x32
c001f63d:	e8 56 9c ff ff       	call   c0019298 <milliTenthSleep(unsigned int)>
c001f642:	83 c4 10             	add    esp,0x10
c001f645:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001f64b:	75 c5                	jne    c001f612 <IDE::detect()+0xe0>
c001f64d:	e9 3e 01 00 00       	jmp    c001f790 <IDE::detect()+0x25e>
c001f652:	31 c9                	xor    ecx,ecx
c001f654:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001f658:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001f65c:	83 ec 0c             	sub    esp,0xc
c001f65f:	68 80 00 00 00       	push   0x80
c001f664:	57                   	push   edi
c001f665:	6a 00                	push   0x0
c001f667:	56                   	push   esi
c001f668:	53                   	push   ebx
c001f669:	e8 f8 fd ff ff       	call   c001f466 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001f66e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001f673:	89 e8                	mov    eax,ebp
c001f675:	89 d1                	mov    ecx,edx
c001f677:	c1 e0 06             	shl    eax,0x6
c001f67a:	01 d8                	add    eax,ebx
c001f67c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001f683:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001f68a:	89 f2                	mov    edx,esi
c001f68c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001f692:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001f696:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001f69c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001f6a0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001f6a7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001f6af:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001f6b6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001f6be:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001f6c4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001f6cb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001f6d1:	8d 54 24 58          	lea    edx,[esp+0x58]
c001f6d5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001f6d9:	83 c4 20             	add    esp,0x20
c001f6dc:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001f6df:	83 c0 02             	add    eax,0x2
c001f6e2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001f6e8:	83 c7 02             	add    edi,0x2
c001f6eb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001f6ee:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001f6f4:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001f6f8:	75 e2                	jne    c001f6dc <IDE::detect()+0x1aa>
c001f6fa:	89 e8                	mov    eax,ebp
c001f6fc:	c1 e0 06             	shl    eax,0x6
c001f6ff:	01 d8                	add    eax,ebx
c001f701:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001f707:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001f70e:	66 c1 ea 09          	shr    dx,0x9
c001f712:	83 e2 01             	and    edx,0x1
c001f715:	84 c9                	test   cl,cl
c001f717:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001f71d:	75 22                	jne    c001f741 <IDE::detect()+0x20f>
c001f71f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001f726:	74 46                	je     c001f76e <IDE::detect()+0x23c>
c001f728:	83 ec 0c             	sub    esp,0xc
c001f72b:	68 7c 01 00 00       	push   0x17c
c001f730:	e8 3e a6 fe ff       	call   c0009d73 <malloc>
c001f735:	89 c7                	mov    edi,eax
c001f737:	89 04 24             	mov    DWORD PTR [esp],eax
c001f73a:	e8 35 06 00 00       	call   c001fd74 <ATA::ATA()>
c001f73f:	eb 17                	jmp    c001f758 <IDE::detect()+0x226>
c001f741:	83 ec 0c             	sub    esp,0xc
c001f744:	68 84 01 00 00       	push   0x184
c001f749:	e8 25 a6 fe ff       	call   c0009d73 <malloc>
c001f74e:	89 c7                	mov    edi,eax
c001f750:	89 04 24             	mov    DWORD PTR [esp],eax
c001f753:	e8 a4 0c 00 00       	call   c00203fc <ATAPI::ATAPI()>
c001f758:	5a                   	pop    edx
c001f759:	59                   	pop    ecx
c001f75a:	57                   	push   edi
c001f75b:	53                   	push   ebx
c001f75c:	e8 71 ee fe ff       	call   c000e5d2 <Device::addChild(Device*)>
c001f761:	8b 07                	mov    eax,DWORD PTR [edi]
c001f763:	53                   	push   ebx
c001f764:	55                   	push   ebp
c001f765:	6a 00                	push   0x0
c001f767:	57                   	push   edi
c001f768:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f76b:	83 c4 20             	add    esp,0x20
c001f76e:	45                   	inc    ebp
c001f76f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001f774:	74 0d                	je     c001f783 <IDE::detect()+0x251>
c001f776:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001f77e:	e9 e0 fd ff ff       	jmp    c001f563 <IDE::detect()+0x31>
c001f783:	4e                   	dec    esi
c001f784:	74 61                	je     c001f7e7 <IDE::detect()+0x2b5>
c001f786:	be 01 00 00 00       	mov    esi,0x1
c001f78b:	e9 cb fd ff ff       	jmp    c001f55b <IDE::detect()+0x29>
c001f790:	50                   	push   eax
c001f791:	6a 04                	push   0x4
c001f793:	56                   	push   esi
c001f794:	53                   	push   ebx
c001f795:	e8 30 f7 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f79a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001f79e:	83 c4 0c             	add    esp,0xc
c001f7a1:	6a 05                	push   0x5
c001f7a3:	56                   	push   esi
c001f7a4:	53                   	push   ebx
c001f7a5:	e8 20 f7 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f7aa:	83 c4 10             	add    esp,0x10
c001f7ad:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001f7b1:	80 fa 14             	cmp    dl,0x14
c001f7b4:	75 04                	jne    c001f7ba <IDE::detect()+0x288>
c001f7b6:	3c eb                	cmp    al,0xeb
c001f7b8:	eb 07                	jmp    c001f7c1 <IDE::detect()+0x28f>
c001f7ba:	3c 96                	cmp    al,0x96
c001f7bc:	75 b1                	jne    c001f76f <IDE::detect()+0x23d>
c001f7be:	80 fa 69             	cmp    dl,0x69
c001f7c1:	75 ac                	jne    c001f76f <IDE::detect()+0x23d>
c001f7c3:	68 a1 00 00 00       	push   0xa1
c001f7c8:	6a 07                	push   0x7
c001f7ca:	56                   	push   esi
c001f7cb:	53                   	push   ebx
c001f7cc:	e8 39 f6 ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7d1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001f7d8:	e8 bb 9a ff ff       	call   c0019298 <milliTenthSleep(unsigned int)>
c001f7dd:	83 c4 10             	add    esp,0x10
c001f7e0:	b1 01                	mov    cl,0x1
c001f7e2:	e9 6d fe ff ff       	jmp    c001f654 <IDE::detect()+0x122>
c001f7e7:	81 c4 1c 02 00 00    	add    esp,0x21c
c001f7ed:	5b                   	pop    ebx
c001f7ee:	5e                   	pop    esi
c001f7ef:	5f                   	pop    edi
c001f7f0:	5d                   	pop    ebp
c001f7f1:	c3                   	ret    

c001f7f2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001f7f2:	55                   	push   ebp
c001f7f3:	57                   	push   edi
c001f7f4:	56                   	push   esi
c001f7f5:	53                   	push   ebx
c001f7f6:	83 ec 1c             	sub    esp,0x1c
c001f7f9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f7fd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f801:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f805:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f809:	88 c3                	mov    bl,al
c001f80b:	84 c0                	test   al,al
c001f80d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f811:	0f 84 81 00 00 00    	je     c001f898 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f817:	83 ec 0c             	sub    esp,0xc
c001f81a:	68 2f 76 02 c0       	push   0xc002762f
c001f81f:	e8 3b d8 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001f824:	83 c4 10             	add    esp,0x10
c001f827:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f82b:	3c 01                	cmp    al,0x1
c001f82d:	74 63                	je     c001f892 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f82f:	3c 02                	cmp    al,0x2
c001f831:	75 53                	jne    c001f886 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f833:	d1 e6                	shl    esi,1
c001f835:	09 ee                	or     esi,ebp
c001f837:	50                   	push   eax
c001f838:	89 f0                	mov    eax,esi
c001f83a:	6a 01                	push   0x1
c001f83c:	0f b6 f0             	movzx  esi,al
c001f83f:	c1 e6 06             	shl    esi,0x6
c001f842:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f84a:	50                   	push   eax
c001f84b:	57                   	push   edi
c001f84c:	e8 79 f6 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f851:	83 c4 10             	add    esp,0x10
c001f854:	a8 01                	test   al,0x1
c001f856:	74 02                	je     c001f85a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f858:	b3 07                	mov    bl,0x7
c001f85a:	a8 02                	test   al,0x2
c001f85c:	74 02                	je     c001f860 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f85e:	b3 03                	mov    bl,0x3
c001f860:	a8 04                	test   al,0x4
c001f862:	74 02                	je     c001f866 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f864:	b3 14                	mov    bl,0x14
c001f866:	a8 08                	test   al,0x8
c001f868:	74 02                	je     c001f86c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f86a:	b3 03                	mov    bl,0x3
c001f86c:	a8 10                	test   al,0x10
c001f86e:	74 02                	je     c001f872 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f870:	b3 15                	mov    bl,0x15
c001f872:	a8 20                	test   al,0x20
c001f874:	74 02                	je     c001f878 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f876:	b3 03                	mov    bl,0x3
c001f878:	a8 40                	test   al,0x40
c001f87a:	74 02                	je     c001f87e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f87c:	b3 16                	mov    bl,0x16
c001f87e:	84 c0                	test   al,al
c001f880:	79 16                	jns    c001f898 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f882:	b3 0d                	mov    bl,0xd
c001f884:	eb 12                	jmp    c001f898 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f886:	3c 03                	cmp    al,0x3
c001f888:	74 0c                	je     c001f896 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f88a:	3c 04                	cmp    al,0x4
c001f88c:	75 0a                	jne    c001f898 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f88e:	b3 08                	mov    bl,0x8
c001f890:	eb 06                	jmp    c001f898 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f892:	b3 13                	mov    bl,0x13
c001f894:	eb 02                	jmp    c001f898 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f896:	b3 17                	mov    bl,0x17
c001f898:	83 c4 1c             	add    esp,0x1c
c001f89b:	88 d8                	mov    al,bl
c001f89d:	5b                   	pop    ebx
c001f89e:	5e                   	pop    esi
c001f89f:	5f                   	pop    edi
c001f8a0:	5d                   	pop    ebp
c001f8a1:	c3                   	ret    

c001f8a2 <IDE::polling(unsigned char, unsigned int)>:
c001f8a2:	57                   	push   edi
c001f8a3:	56                   	push   esi
c001f8a4:	53                   	push   ebx
c001f8a5:	bb 04 00 00 00       	mov    ebx,0x4
c001f8aa:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f8ae:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f8b3:	52                   	push   edx
c001f8b4:	6a 0c                	push   0xc
c001f8b6:	56                   	push   esi
c001f8b7:	57                   	push   edi
c001f8b8:	e8 0d f6 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f8bd:	83 c4 10             	add    esp,0x10
c001f8c0:	4b                   	dec    ebx
c001f8c1:	75 f0                	jne    c001f8b3 <IDE::polling(unsigned char, unsigned int)+0x11>
c001f8c3:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f8c8:	50                   	push   eax
c001f8c9:	6a 0c                	push   0xc
c001f8cb:	56                   	push   esi
c001f8cc:	57                   	push   edi
c001f8cd:	e8 f8 f5 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001f8d2:	83 c4 10             	add    esp,0x10
c001f8d5:	a8 01                	test   al,0x1
c001f8d7:	75 17                	jne    c001f8f0 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f8d9:	a8 20                	test   al,0x20
c001f8db:	75 0f                	jne    c001f8ec <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f8dd:	4b                   	dec    ebx
c001f8de:	74 10                	je     c001f8f0 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f8e0:	84 c0                	test   al,al
c001f8e2:	78 e4                	js     c001f8c8 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f8e4:	a8 08                	test   al,0x8
c001f8e6:	74 e0                	je     c001f8c8 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f8e8:	31 c0                	xor    eax,eax
c001f8ea:	eb 06                	jmp    c001f8f2 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f8ec:	b0 01                	mov    al,0x1
c001f8ee:	eb 02                	jmp    c001f8f2 <IDE::polling(unsigned char, unsigned int)+0x50>
c001f8f0:	b0 02                	mov    al,0x2
c001f8f2:	5b                   	pop    ebx
c001f8f3:	5e                   	pop    esi
c001f8f4:	5f                   	pop    edi
c001f8f5:	c3                   	ret    

c001f8f6 <SATABus::close(int, int, void*)>:
c001f8f6:	31 c0                	xor    eax,eax
c001f8f8:	c3                   	ret    
c001f8f9:	90                   	nop

c001f8fa <SATABus::detect()>:
c001f8fa:	c3                   	ret    
c001f8fb:	90                   	nop

c001f8fc <SATABus::SATABus()>:
c001f8fc:	83 ec 0c             	sub    esp,0xc
c001f8ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f903:	83 ec 08             	sub    esp,0x8
c001f906:	68 68 76 02 c0       	push   0xc0027668
c001f90b:	50                   	push   eax
c001f90c:	e8 6f f0 fe ff       	call   c000e980 <HardDiskController::HardDiskController(char const*)>
c001f911:	83 c4 10             	add    esp,0x10
c001f914:	ba 00 77 02 c0       	mov    edx,0xc0027700
c001f919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91d:	89 10                	mov    DWORD PTR [eax],edx
c001f91f:	83 ec 0c             	sub    esp,0xc
c001f922:	6a 50                	push   0x50
c001f924:	e8 ec ab fe ff       	call   c000a515 <Phys::allocateContiguousPages(int)>
c001f929:	83 c4 10             	add    esp,0x10
c001f92c:	89 c2                	mov    edx,eax
c001f92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f932:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f938:	83 ec 0c             	sub    esp,0xc
c001f93b:	6a 50                	push   0x50
c001f93d:	e8 f7 c3 fe ff       	call   c000bd39 <Virt::allocateKernelVirtualPages(int)>
c001f942:	83 c4 10             	add    esp,0x10
c001f945:	89 c2                	mov    edx,eax
c001f947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f951:	a1 b0 8d 02 c0       	mov    eax,ds:0xc0028db0
c001f956:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f95a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f960:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f964:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f96a:	83 ec 0c             	sub    esp,0xc
c001f96d:	6a 03                	push   0x3
c001f96f:	6a 50                	push   0x50
c001f971:	51                   	push   ecx
c001f972:	52                   	push   edx
c001f973:	50                   	push   eax
c001f974:	e8 5d cd fe ff       	call   c000c6d6 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f979:	83 c4 20             	add    esp,0x20
c001f97c:	90                   	nop
c001f97d:	83 c4 0c             	add    esp,0xc
c001f980:	c3                   	ret    
c001f981:	90                   	nop

c001f982 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f982:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f986:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f989:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f98c:	09 c2                	or     edx,eax
c001f98e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f992:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f998:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f99a:	31 c0                	xor    eax,eax
c001f99c:	c1 e9 08             	shr    ecx,0x8
c001f99f:	83 e1 0f             	and    ecx,0xf
c001f9a2:	39 c8                	cmp    eax,ecx
c001f9a4:	74 0a                	je     c001f9b0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f9a6:	f6 c2 01             	test   dl,0x1
c001f9a9:	74 08                	je     c001f9b3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f9ab:	d1 ea                	shr    edx,1
c001f9ad:	40                   	inc    eax
c001f9ae:	eb f2                	jmp    c001f9a2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f9b0:	83 c8 ff             	or     eax,0xffffffff
c001f9b3:	c3                   	ret    

c001f9b4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f9b4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f9b8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f9bb:	89 c2                	mov    edx,eax
c001f9bd:	c1 ea 08             	shr    edx,0x8
c001f9c0:	83 e2 0f             	and    edx,0xf
c001f9c3:	fe ca                	dec    dl
c001f9c5:	75 31                	jne    c001f9f8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f9c7:	83 e0 0f             	and    eax,0xf
c001f9ca:	3c 03                	cmp    al,0x3
c001f9cc:	75 2a                	jne    c001f9f8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f9ce:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f9d1:	b8 02 00 00 00       	mov    eax,0x2
c001f9d6:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f9dc:	74 1c                	je     c001f9fa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f9de:	b8 04 00 00 00       	mov    eax,0x4
c001f9e3:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f9e9:	74 0f                	je     c001f9fa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f9eb:	31 c0                	xor    eax,eax
c001f9ed:	83 fa 03             	cmp    edx,0x3
c001f9f0:	0f 94 c0             	sete   al
c001f9f3:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f9f7:	c3                   	ret    
c001f9f8:	31 c0                	xor    eax,eax
c001f9fa:	c3                   	ret    
c001f9fb:	90                   	nop

c001f9fc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f9fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa00:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa03:	0f ba e2 0f          	bt     edx,0xf
c001fa07:	72 f7                	jb     c001fa00 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001fa09:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa0c:	83 ca 10             	or     edx,0x10
c001fa0f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fa12:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa15:	83 ca 01             	or     edx,0x1
c001fa18:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fa1b:	c3                   	ret    

c001fa1c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001fa1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa20:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa23:	83 e2 fe             	and    edx,0xfffffffe
c001fa26:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fa29:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa2c:	83 e2 ef             	and    edx,0xffffffef
c001fa2f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001fa32:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa35:	0f ba e2 0e          	bt     edx,0xe
c001fa39:	72 f7                	jb     c001fa32 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fa3b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001fa3e:	0f ba e2 0f          	bt     edx,0xf
c001fa42:	72 ee                	jb     c001fa32 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001fa44:	c3                   	ret    
c001fa45:	90                   	nop

c001fa46 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001fa46:	55                   	push   ebp
c001fa47:	57                   	push   edi
c001fa48:	56                   	push   esi
c001fa49:	53                   	push   ebx
c001fa4a:	83 ec 1c             	sub    esp,0x1c
c001fa4d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fa51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fa55:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fa59:	53                   	push   ebx
c001fa5a:	89 fd                	mov    ebp,edi
c001fa5c:	56                   	push   esi
c001fa5d:	c1 e5 0a             	shl    ebp,0xa
c001fa60:	e8 b7 ff ff ff       	call   c001fa1c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001fa65:	83 ec 0c             	sub    esp,0xc
c001fa68:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001fa6e:	01 e8                	add    eax,ebp
c001fa70:	89 03                	mov    DWORD PTR [ebx],eax
c001fa72:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fa74:	68 00 04 00 00       	push   0x400
c001fa79:	6a 00                	push   0x0
c001fa7b:	50                   	push   eax
c001fa7c:	e8 13 0c fe ff       	call   c0000694 <memset>
c001fa81:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001fa87:	89 fa                	mov    edx,edi
c001fa89:	01 e8                	add    eax,ebp
c001fa8b:	c1 e7 0d             	shl    edi,0xd
c001fa8e:	89 03                	mov    DWORD PTR [ebx],eax
c001fa90:	c1 e2 08             	shl    edx,0x8
c001fa93:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001fa9a:	81 c2 00 80 00 00    	add    edx,0x8000
c001faa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001faa4:	89 d0                	mov    eax,edx
c001faa6:	83 c4 1c             	add    esp,0x1c
c001faa9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001faaf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001fab2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001fab5:	68 00 01 00 00       	push   0x100
c001faba:	6a 00                	push   0x0
c001fabc:	50                   	push   eax
c001fabd:	e8 d2 0b fe ff       	call   c0000694 <memset>
c001fac2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fac6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001facc:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001fad2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fad6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001fad9:	83 c4 10             	add    esp,0x10
c001fadc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001fae3:	31 ff                	xor    edi,edi
c001fae5:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001faeb:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001faf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001faf5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001fafb:	83 c5 20             	add    ebp,0x20
c001fafe:	01 f8                	add    eax,edi
c001fb00:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fb03:	52                   	push   edx
c001fb04:	68 00 01 00 00       	push   0x100
c001fb09:	6a 00                	push   0x0
c001fb0b:	50                   	push   eax
c001fb0c:	e8 83 0b fe ff       	call   c0000694 <memset>
c001fb11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fb15:	83 c4 10             	add    esp,0x10
c001fb18:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001fb1e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001fb25:	01 f8                	add    eax,edi
c001fb27:	81 c7 00 01 00 00    	add    edi,0x100
c001fb2d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fb30:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001fb36:	75 b3                	jne    c001faeb <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001fb38:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001fb3c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001fb40:	83 c4 1c             	add    esp,0x1c
c001fb43:	5b                   	pop    ebx
c001fb44:	5e                   	pop    esi
c001fb45:	5f                   	pop    edi
c001fb46:	5d                   	pop    ebp
c001fb47:	e9 b0 fe ff ff       	jmp    c001f9fc <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001fb4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001fb4c:	55                   	push   ebp
c001fb4d:	57                   	push   edi
c001fb4e:	56                   	push   esi
c001fb4f:	53                   	push   ebx
c001fb50:	83 ec 0c             	sub    esp,0xc
c001fb53:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fb57:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001fb5e:	74 2d                	je     c001fb8d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001fb60:	83 ec 0c             	sub    esp,0xc
c001fb63:	68 8c 76 02 c0       	push   0xc002768c
c001fb68:	e8 60 a2 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001fb6d:	83 c4 10             	add    esp,0x10
c001fb70:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001fb77:	75 14                	jne    c001fb8d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001fb79:	e4 60                	in     al,0x60
c001fb7b:	3c 1c                	cmp    al,0x1c
c001fb7d:	74 04                	je     c001fb83 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb7f:	3c 5a                	cmp    al,0x5a
c001fb81:	75 f6                	jne    c001fb79 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001fb83:	e4 60                	in     al,0x60
c001fb85:	3c 5a                	cmp    al,0x5a
c001fb87:	74 fa                	je     c001fb83 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb89:	3c 1c                	cmp    al,0x1c
c001fb8b:	74 f6                	je     c001fb83 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001fb8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001fb91:	31 db                	xor    ebx,ebx
c001fb93:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001fb96:	f7 c5 01 00 00 00    	test   ebp,0x1
c001fb9c:	0f 84 78 01 00 00    	je     c001fd1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fba2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001fba6:	89 d8                	mov    eax,ebx
c001fba8:	c1 e0 07             	shl    eax,0x7
c001fbab:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001fbb2:	50                   	push   eax
c001fbb3:	50                   	push   eax
c001fbb4:	57                   	push   edi
c001fbb5:	56                   	push   esi
c001fbb6:	e8 f9 fd ff ff       	call   c001f9b4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001fbbb:	83 c4 10             	add    esp,0x10
c001fbbe:	83 f8 01             	cmp    eax,0x1
c001fbc1:	0f 85 19 01 00 00    	jne    c001fce0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001fbc7:	50                   	push   eax
c001fbc8:	53                   	push   ebx
c001fbc9:	57                   	push   edi
c001fbca:	56                   	push   esi
c001fbcb:	e8 76 fe ff ff       	call   c001fa46 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fbd0:	83 c4 10             	add    esp,0x10
c001fbd3:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001fbda:	74 2d                	je     c001fc09 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001fbdc:	83 ec 0c             	sub    esp,0xc
c001fbdf:	68 a1 76 02 c0       	push   0xc00276a1
c001fbe4:	e8 e4 a1 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001fbe9:	83 c4 10             	add    esp,0x10
c001fbec:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001fbf3:	75 14                	jne    c001fc09 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001fbf5:	e4 60                	in     al,0x60
c001fbf7:	3c 1c                	cmp    al,0x1c
c001fbf9:	74 04                	je     c001fbff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fbfb:	3c 5a                	cmp    al,0x5a
c001fbfd:	75 f6                	jne    c001fbf5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001fbff:	e4 60                	in     al,0x60
c001fc01:	3c 5a                	cmp    al,0x5a
c001fc03:	74 fa                	je     c001fbff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fc05:	3c 1c                	cmp    al,0x1c
c001fc07:	74 f6                	je     c001fbff <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001fc09:	83 ec 0c             	sub    esp,0xc
c001fc0c:	68 7c 01 00 00       	push   0x17c
c001fc11:	e8 5d a1 fe ff       	call   c0009d73 <malloc>
c001fc16:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc19:	89 c7                	mov    edi,eax
c001fc1b:	e8 14 10 00 00       	call   c0020c34 <SATA::SATA()>
c001fc20:	83 c4 10             	add    esp,0x10
c001fc23:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001fc2a:	74 2d                	je     c001fc59 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001fc2c:	83 ec 0c             	sub    esp,0xc
c001fc2f:	68 b6 76 02 c0       	push   0xc00276b6
c001fc34:	e8 94 a1 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001fc39:	83 c4 10             	add    esp,0x10
c001fc3c:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001fc43:	75 14                	jne    c001fc59 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001fc45:	e4 60                	in     al,0x60
c001fc47:	3c 5a                	cmp    al,0x5a
c001fc49:	74 04                	je     c001fc4f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fc4b:	3c 1c                	cmp    al,0x1c
c001fc4d:	75 f6                	jne    c001fc45 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001fc4f:	e4 60                	in     al,0x60
c001fc51:	3c 5a                	cmp    al,0x5a
c001fc53:	74 fa                	je     c001fc4f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fc55:	3c 1c                	cmp    al,0x1c
c001fc57:	74 f6                	je     c001fc4f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001fc59:	50                   	push   eax
c001fc5a:	50                   	push   eax
c001fc5b:	57                   	push   edi
c001fc5c:	56                   	push   esi
c001fc5d:	e8 70 e9 fe ff       	call   c000e5d2 <Device::addChild(Device*)>
c001fc62:	83 c4 10             	add    esp,0x10
c001fc65:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001fc6c:	74 2d                	je     c001fc9b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fc6e:	83 ec 0c             	sub    esp,0xc
c001fc71:	68 cb 76 02 c0       	push   0xc00276cb
c001fc76:	e8 52 a1 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001fc7b:	83 c4 10             	add    esp,0x10
c001fc7e:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001fc85:	75 14                	jne    c001fc9b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001fc87:	e4 60                	in     al,0x60
c001fc89:	3c 1c                	cmp    al,0x1c
c001fc8b:	74 04                	je     c001fc91 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc8d:	3c 5a                	cmp    al,0x5a
c001fc8f:	75 f6                	jne    c001fc87 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001fc91:	e4 60                	in     al,0x60
c001fc93:	3c 5a                	cmp    al,0x5a
c001fc95:	74 fa                	je     c001fc91 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc97:	3c 1c                	cmp    al,0x1c
c001fc99:	74 f6                	je     c001fc91 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001fc9b:	8b 07                	mov    eax,DWORD PTR [edi]
c001fc9d:	56                   	push   esi
c001fc9e:	6a 00                	push   0x0
c001fca0:	53                   	push   ebx
c001fca1:	57                   	push   edi
c001fca2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fca5:	83 c4 10             	add    esp,0x10
c001fca8:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c001fcaf:	74 69                	je     c001fd1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fcb1:	83 ec 0c             	sub    esp,0xc
c001fcb4:	68 e0 76 02 c0       	push   0xc00276e0
c001fcb9:	e8 0f a1 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c001fcbe:	83 c4 10             	add    esp,0x10
c001fcc1:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c001fcc8:	75 50                	jne    c001fd1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fcca:	e4 60                	in     al,0x60
c001fccc:	3c 1c                	cmp    al,0x1c
c001fcce:	74 04                	je     c001fcd4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fcd0:	3c 5a                	cmp    al,0x5a
c001fcd2:	75 f6                	jne    c001fcca <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001fcd4:	e4 60                	in     al,0x60
c001fcd6:	3c 5a                	cmp    al,0x5a
c001fcd8:	74 fa                	je     c001fcd4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fcda:	3c 1c                	cmp    al,0x1c
c001fcdc:	74 f6                	je     c001fcd4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001fcde:	eb 3a                	jmp    c001fd1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fce0:	83 f8 04             	cmp    eax,0x4
c001fce3:	75 35                	jne    c001fd1a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001fce5:	50                   	push   eax
c001fce6:	53                   	push   ebx
c001fce7:	57                   	push   edi
c001fce8:	56                   	push   esi
c001fce9:	e8 58 fd ff ff       	call   c001fa46 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fcee:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001fcf5:	e8 79 a0 fe ff       	call   c0009d73 <malloc>
c001fcfa:	89 04 24             	mov    DWORD PTR [esp],eax
c001fcfd:	89 c7                	mov    edi,eax
c001fcff:	e8 a6 17 00 00       	call   c00214aa <SATAPI::SATAPI()>
c001fd04:	5a                   	pop    edx
c001fd05:	59                   	pop    ecx
c001fd06:	57                   	push   edi
c001fd07:	56                   	push   esi
c001fd08:	e8 c5 e8 fe ff       	call   c000e5d2 <Device::addChild(Device*)>
c001fd0d:	8b 07                	mov    eax,DWORD PTR [edi]
c001fd0f:	56                   	push   esi
c001fd10:	6a 00                	push   0x0
c001fd12:	53                   	push   ebx
c001fd13:	57                   	push   edi
c001fd14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fd17:	83 c4 20             	add    esp,0x20
c001fd1a:	d1 ed                	shr    ebp,1
c001fd1c:	43                   	inc    ebx
c001fd1d:	83 fb 20             	cmp    ebx,0x20
c001fd20:	0f 85 70 fe ff ff    	jne    c001fb96 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001fd26:	83 c4 0c             	add    esp,0xc
c001fd29:	5b                   	pop    ebx
c001fd2a:	5e                   	pop    esi
c001fd2b:	5f                   	pop    edi
c001fd2c:	5d                   	pop    ebp
c001fd2d:	c3                   	ret    

c001fd2e <SATABus::open(int, int, void*)>:
c001fd2e:	83 ec 14             	sub    esp,0x14
c001fd31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fd35:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001fd3b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001fd41:	52                   	push   edx
c001fd42:	50                   	push   eax
c001fd43:	e8 04 fe ff ff       	call   c001fb4c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001fd48:	31 c0                	xor    eax,eax
c001fd4a:	83 c4 1c             	add    esp,0x1c
c001fd4d:	c3                   	ret    

c001fd4e <ATA::close(int, int, void*)>:
c001fd4e:	83 ec 0c             	sub    esp,0xc
c001fd51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd55:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fd5b:	85 c0                	test   eax,eax
c001fd5d:	74 0c                	je     c001fd6b <ATA::close(int, int, void*)+0x1d>
c001fd5f:	83 ec 0c             	sub    esp,0xc
c001fd62:	8b 10                	mov    edx,DWORD PTR [eax]
c001fd64:	50                   	push   eax
c001fd65:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fd68:	83 c4 10             	add    esp,0x10
c001fd6b:	31 c0                	xor    eax,eax
c001fd6d:	83 c4 0c             	add    esp,0xc
c001fd70:	c3                   	ret    
c001fd71:	90                   	nop

c001fd72 <ATA::powerSaving(PowerSavingLevel)>:
c001fd72:	c3                   	ret    
c001fd73:	90                   	nop

c001fd74 <ATA::ATA()>:
c001fd74:	83 ec 0c             	sub    esp,0xc
c001fd77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7b:	83 ec 04             	sub    esp,0x4
c001fd7e:	68 00 02 00 00       	push   0x200
c001fd83:	68 6f 78 02 c0       	push   0xc002786f
c001fd88:	50                   	push   eax
c001fd89:	e8 7c ec fe ff       	call   c000ea0a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fd8e:	83 c4 10             	add    esp,0x10
c001fd91:	ba 78 77 02 c0       	mov    edx,0xc0027778
c001fd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9a:	89 10                	mov    DWORD PTR [eax],edx
c001fd9c:	90                   	nop
c001fd9d:	83 c4 0c             	add    esp,0xc
c001fda0:	c3                   	ret    
c001fda1:	90                   	nop

c001fda2 <ATA::flush(bool)>:
c001fda2:	53                   	push   ebx
c001fda3:	83 ec 08             	sub    esp,0x8
c001fda6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001fdab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fdaf:	19 c0                	sbb    eax,eax
c001fdb1:	83 e0 fd             	and    eax,0xfffffffd
c001fdb4:	05 ea 00 00 00       	add    eax,0xea
c001fdb9:	50                   	push   eax
c001fdba:	6a 07                	push   0x7
c001fdbc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fdc3:	50                   	push   eax
c001fdc4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fdca:	e8 3b f0 ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fdcf:	83 c4 0c             	add    esp,0xc
c001fdd2:	6a 00                	push   0x0
c001fdd4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fddb:	50                   	push   eax
c001fddc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fde2:	e8 bb fa ff ff       	call   c001f8a2 <IDE::polling(unsigned char, unsigned int)>
c001fde7:	83 c4 18             	add    esp,0x18
c001fdea:	5b                   	pop    ebx
c001fdeb:	c3                   	ret    

c001fdec <ATA::readyForCommand()>:
c001fdec:	56                   	push   esi
c001fded:	53                   	push   ebx
c001fdee:	53                   	push   ebx
c001fdef:	31 db                	xor    ebx,ebx
c001fdf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fdf5:	51                   	push   ecx
c001fdf6:	6a 0c                	push   0xc
c001fdf8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fdff:	50                   	push   eax
c001fe00:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fe06:	e8 bf f0 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c001fe0b:	83 c4 10             	add    esp,0x10
c001fe0e:	a8 88                	test   al,0x88
c001fe10:	74 1f                	je     c001fe31 <ATA::readyForCommand()+0x45>
c001fe12:	43                   	inc    ebx
c001fe13:	83 fb 63             	cmp    ebx,0x63
c001fe16:	7e dd                	jle    c001fdf5 <ATA::readyForCommand()+0x9>
c001fe18:	83 ec 0c             	sub    esp,0xc
c001fe1b:	6a 0a                	push   0xa
c001fe1d:	e8 76 94 ff ff       	call   c0019298 <milliTenthSleep(unsigned int)>
c001fe22:	83 c4 10             	add    esp,0x10
c001fe25:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001fe2b:	75 c8                	jne    c001fdf5 <ATA::readyForCommand()+0x9>
c001fe2d:	31 c0                	xor    eax,eax
c001fe2f:	eb 02                	jmp    c001fe33 <ATA::readyForCommand()+0x47>
c001fe31:	b0 01                	mov    al,0x1
c001fe33:	5a                   	pop    edx
c001fe34:	5b                   	pop    ebx
c001fe35:	5e                   	pop    esi
c001fe36:	c3                   	ret    
c001fe37:	90                   	nop

c001fe38 <ATA::access(unsigned long long, int, void*, bool)>:
c001fe38:	55                   	push   ebp
c001fe39:	57                   	push   edi
c001fe3a:	56                   	push   esi
c001fe3b:	53                   	push   ebx
c001fe3c:	83 ec 38             	sub    esp,0x38
c001fe3f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001fe43:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001fe47:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001fe4b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001fe4f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001fe53:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fe57:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001fe5b:	68 24 77 02 c0       	push   0xc0027724
c001fe60:	e8 fa d1 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c001fe65:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fe6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fe6f:	83 c4 10             	add    esp,0x10
c001fe72:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fe78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fe7c:	c1 e0 06             	shl    eax,0x6
c001fe7f:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001fe87:	74 5d                	je     c001fee6 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001fe89:	89 fa                	mov    edx,edi
c001fe8b:	89 f0                	mov    eax,esi
c001fe8d:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001fe91:	c1 ea 1c             	shr    edx,0x1c
c001fe94:	89 d1                	mov    ecx,edx
c001fe96:	09 c1                	or     ecx,eax
c001fe98:	74 25                	je     c001febf <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001fe9a:	31 ed                	xor    ebp,ebp
c001fe9c:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001fea3:	89 fa                	mov    edx,edi
c001fea5:	89 f0                	mov    eax,esi
c001fea7:	0f ad d0             	shrd   eax,edx,cl
c001feaa:	d3 ea                	shr    edx,cl
c001feac:	f6 c1 20             	test   cl,0x20
c001feaf:	74 02                	je     c001feb3 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001feb1:	89 d0                	mov    eax,edx
c001feb3:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001feb7:	45                   	inc    ebp
c001feb8:	83 fd 06             	cmp    ebp,0x6
c001febb:	75 df                	jne    c001fe9c <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001febd:	eb 76                	jmp    c001ff35 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001febf:	89 f0                	mov    eax,esi
c001fec1:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001fec6:	89 fa                	mov    edx,edi
c001fec8:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001fecf:	0f ac d0 10          	shrd   eax,edx,0x10
c001fed3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001fed8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001fedc:	c1 ee 18             	shr    esi,0x18
c001fedf:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001fee4:	eb 56                	jmp    c001ff3c <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001fee6:	6a 00                	push   0x0
c001fee8:	6a 3f                	push   0x3f
c001feea:	57                   	push   edi
c001feeb:	56                   	push   esi
c001feec:	e8 9f 32 00 00       	call   c0023190 <__umoddi3>
c001fef1:	83 c4 10             	add    esp,0x10
c001fef4:	40                   	inc    eax
c001fef5:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001fef9:	6a 00                	push   0x0
c001fefb:	68 f0 03 00 00       	push   0x3f0
c001ff00:	57                   	push   edi
c001ff01:	56                   	push   esi
c001ff02:	e8 89 31 00 00       	call   c0023090 <__udivdi3>
c001ff07:	83 c4 10             	add    esp,0x10
c001ff0a:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001ff0f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001ff16:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001ff1b:	6a 00                	push   0x0
c001ff1d:	6a 3f                	push   0x3f
c001ff1f:	57                   	push   edi
c001ff20:	56                   	push   esi
c001ff21:	e8 6a 31 00 00       	call   c0023090 <__udivdi3>
c001ff26:	83 c4 10             	add    esp,0x10
c001ff29:	89 c6                	mov    esi,eax
c001ff2b:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ff30:	83 e6 0f             	and    esi,0xf
c001ff33:	eb 07                	jmp    c001ff3c <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001ff35:	31 f6                	xor    esi,esi
c001ff37:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001ff3c:	bf 01 00 00 00       	mov    edi,0x1
c001ff41:	50                   	push   eax
c001ff42:	6a 00                	push   0x0
c001ff44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff4b:	50                   	push   eax
c001ff4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ff50:	e8 bd f0 ff ff       	call   c001f012 <IDE::enableIRQs(unsigned char, bool)>
c001ff55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff58:	e8 8f fe ff ff       	call   c001fdec <ATA::readyForCommand()>
c001ff5d:	83 c4 10             	add    esp,0x10
c001ff60:	84 c0                	test   al,al
c001ff62:	0f 84 bc 02 00 00    	je     c0020224 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001ff68:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ff6e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ff74:	c1 e0 04             	shl    eax,0x4
c001ff77:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001ff7e:	09 c6                	or     esi,eax
c001ff80:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ff85:	75 05                	jne    c001ff8c <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001ff87:	83 ce a0             	or     esi,0xffffffa0
c001ff8a:	eb 03                	jmp    c001ff8f <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001ff8c:	83 ce e0             	or     esi,0xffffffe0
c001ff8f:	89 f0                	mov    eax,esi
c001ff91:	0f b6 f0             	movzx  esi,al
c001ff94:	56                   	push   esi
c001ff95:	6a 06                	push   0x6
c001ff97:	51                   	push   ecx
c001ff98:	52                   	push   edx
c001ff99:	e8 6c ee ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff9e:	83 c4 10             	add    esp,0x10
c001ffa1:	6a 00                	push   0x0
c001ffa3:	6a 01                	push   0x1
c001ffa5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffac:	50                   	push   eax
c001ffad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffb3:	e8 52 ee ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffb8:	83 c4 10             	add    esp,0x10
c001ffbb:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ffc0:	75 6e                	jne    c0020030 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001ffc2:	6a 00                	push   0x0
c001ffc4:	6a 08                	push   0x8
c001ffc6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffcd:	50                   	push   eax
c001ffce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffd4:	e8 31 ee ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ffd9:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ffde:	50                   	push   eax
c001ffdf:	6a 09                	push   0x9
c001ffe1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ffe8:	50                   	push   eax
c001ffe9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ffef:	e8 16 ee ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fff4:	83 c4 20             	add    esp,0x20
c001fff7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001fffc:	50                   	push   eax
c001fffd:	6a 0a                	push   0xa
c001ffff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020006:	50                   	push   eax
c0020007:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002000d:	e8 f8 ed ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020012:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0020017:	50                   	push   eax
c0020018:	6a 0b                	push   0xb
c002001a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020021:	50                   	push   eax
c0020022:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020028:	e8 dd ed ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002002d:	83 c4 20             	add    esp,0x20
c0020030:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0020035:	50                   	push   eax
c0020036:	6a 02                	push   0x2
c0020038:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002003f:	50                   	push   eax
c0020040:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020046:	e8 bf ed ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002004b:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0020050:	50                   	push   eax
c0020051:	6a 03                	push   0x3
c0020053:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002005a:	50                   	push   eax
c002005b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020061:	e8 a4 ed ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020066:	83 c4 20             	add    esp,0x20
c0020069:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002006e:	50                   	push   eax
c002006f:	6a 04                	push   0x4
c0020071:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020078:	50                   	push   eax
c0020079:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002007f:	e8 86 ed ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020084:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0020089:	50                   	push   eax
c002008a:	6a 05                	push   0x5
c002008c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020093:	50                   	push   eax
c0020094:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002009a:	e8 6b ed ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002009f:	83 c4 20             	add    esp,0x20
c00200a2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00200a7:	0f 94 c0             	sete   al
c00200aa:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00200af:	74 09                	je     c00200ba <ATA::access(unsigned long long, int, void*, bool)+0x282>
c00200b1:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00200b8:	eb 07                	jmp    c00200c1 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c00200ba:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00200c1:	0f b6 c0             	movzx  eax,al
c00200c4:	50                   	push   eax
c00200c5:	6a 07                	push   0x7
c00200c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00200ce:	50                   	push   eax
c00200cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00200d5:	e8 30 ed ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00200da:	c7 04 24 31 77 02 c0 	mov    DWORD PTR [esp],0xc0027731
c00200e1:	e8 79 cf fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00200e6:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00200ea:	83 c4 10             	add    esp,0x10
c00200ed:	85 f6                	test   esi,esi
c00200ef:	0f 84 f7 00 00 00    	je     c00201ec <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c00200f5:	83 ec 0c             	sub    esp,0xc
c00200f8:	68 34 77 02 c0       	push   0xc0027734
c00200fd:	e8 5d cf fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0020102:	83 c4 0c             	add    esp,0xc
c0020105:	6a 01                	push   0x1
c0020107:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002010e:	50                   	push   eax
c002010f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020115:	e8 88 f7 ff ff       	call   c001f8a2 <IDE::polling(unsigned char, unsigned int)>
c002011a:	c7 04 24 37 77 02 c0 	mov    DWORD PTR [esp],0xc0027737
c0020121:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0020125:	e8 35 cf fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c002012a:	83 c4 10             	add    esp,0x10
c002012d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0020131:	84 c0                	test   al,al
c0020133:	74 2b                	je     c0020160 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c0020135:	0f b6 f8             	movzx  edi,al
c0020138:	57                   	push   edi
c0020139:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0020140:	50                   	push   eax
c0020141:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020148:	50                   	push   eax
c0020149:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002014f:	e8 9e f6 ff ff       	call   c001f7f2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0020154:	c7 04 24 3a 77 02 c0 	mov    DWORD PTR [esp],0xc002773a
c002015b:	e9 bc 00 00 00       	jmp    c002021c <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c0020160:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0020165:	74 50                	je     c00201b7 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c0020167:	83 ec 0c             	sub    esp,0xc
c002016a:	31 ed                	xor    ebp,ebp
c002016c:	68 45 77 02 c0       	push   0xc0027745
c0020171:	e8 e9 ce fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0020176:	83 c4 10             	add    esp,0x10
c0020179:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002017d:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0020181:	50                   	push   eax
c0020182:	50                   	push   eax
c0020183:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002018a:	50                   	push   eax
c002018b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020191:	e8 62 ec ff ff       	call   c001edf8 <IDE::getBase(unsigned char)>
c0020196:	89 c2                	mov    edx,eax
c0020198:	89 f8                	mov    eax,edi
c002019a:	66 ef                	out    dx,ax
c002019c:	45                   	inc    ebp
c002019d:	83 c4 10             	add    esp,0x10
c00201a0:	81 fd 00 01 00 00    	cmp    ebp,0x100
c00201a6:	75 d1                	jne    c0020179 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c00201a8:	83 ec 0c             	sub    esp,0xc
c00201ab:	68 48 77 02 c0       	push   0xc0027748
c00201b0:	e8 aa ce fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00201b5:	eb 24                	jmp    c00201db <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c00201b7:	51                   	push   ecx
c00201b8:	51                   	push   ecx
c00201b9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00201c0:	50                   	push   eax
c00201c1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00201c7:	e8 2c ec ff ff       	call   c001edf8 <IDE::getBase(unsigned char)>
c00201cc:	b9 00 01 00 00       	mov    ecx,0x100
c00201d1:	89 c2                	mov    edx,eax
c00201d3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00201d7:	fc                   	cld    
c00201d8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c00201db:	83 c4 10             	add    esp,0x10
c00201de:	4e                   	dec    esi
c00201df:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c00201e7:	e9 01 ff ff ff       	jmp    c00200ed <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c00201ec:	31 ff                	xor    edi,edi
c00201ee:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c00201f3:	74 2f                	je     c0020224 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c00201f5:	83 ec 0c             	sub    esp,0xc
c00201f8:	68 4b 77 02 c0       	push   0xc002774b
c00201fd:	e8 5d ce fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0020202:	58                   	pop    eax
c0020203:	31 c0                	xor    eax,eax
c0020205:	5a                   	pop    edx
c0020206:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c002020b:	0f 94 c0             	sete   al
c002020e:	50                   	push   eax
c002020f:	53                   	push   ebx
c0020210:	e8 8d fb ff ff       	call   c001fda2 <ATA::flush(bool)>
c0020215:	c7 04 24 4e 77 02 c0 	mov    DWORD PTR [esp],0xc002774e
c002021c:	e8 3e ce fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0020221:	83 c4 10             	add    esp,0x10
c0020224:	83 c4 2c             	add    esp,0x2c
c0020227:	89 f8                	mov    eax,edi
c0020229:	5b                   	pop    ebx
c002022a:	5e                   	pop    esi
c002022b:	5f                   	pop    edi
c002022c:	5d                   	pop    ebp
c002022d:	c3                   	ret    

c002022e <ATA::read(unsigned long long, int, void*)>:
c002022e:	57                   	push   edi
c002022f:	b8 04 00 00 00       	mov    eax,0x4
c0020234:	56                   	push   esi
c0020235:	53                   	push   ebx
c0020236:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002023a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002023e:	8d 7a ff             	lea    edi,[edx-0x1]
c0020241:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020245:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0020249:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002024f:	77 25                	ja     c0020276 <ATA::read(unsigned long long, int, void*)+0x48>
c0020251:	b8 06 00 00 00       	mov    eax,0x6
c0020256:	85 f6                	test   esi,esi
c0020258:	74 1c                	je     c0020276 <ATA::read(unsigned long long, int, void*)+0x48>
c002025a:	50                   	push   eax
c002025b:	50                   	push   eax
c002025c:	6a 00                	push   0x0
c002025e:	56                   	push   esi
c002025f:	52                   	push   edx
c0020260:	53                   	push   ebx
c0020261:	51                   	push   ecx
c0020262:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020266:	e8 cd fb ff ff       	call   c001fe38 <ATA::access(unsigned long long, int, void*, bool)>
c002026b:	83 c4 20             	add    esp,0x20
c002026e:	85 c0                	test   eax,eax
c0020270:	0f 95 c0             	setne  al
c0020273:	0f b6 c0             	movzx  eax,al
c0020276:	5b                   	pop    ebx
c0020277:	5e                   	pop    esi
c0020278:	5f                   	pop    edi
c0020279:	c3                   	ret    

c002027a <ATA::write(unsigned long long, int, void*)>:
c002027a:	55                   	push   ebp
c002027b:	57                   	push   edi
c002027c:	56                   	push   esi
c002027d:	53                   	push   ebx
c002027e:	83 ec 18             	sub    esp,0x18
c0020281:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020285:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0020289:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002028d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020291:	68 51 77 02 c0       	push   0xc0027751
c0020296:	e8 c4 cd fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c002029b:	8d 53 ff             	lea    edx,[ebx-0x1]
c002029e:	83 c4 10             	add    esp,0x10
c00202a1:	b8 04 00 00 00       	mov    eax,0x4
c00202a6:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00202ac:	77 25                	ja     c00202d3 <ATA::write(unsigned long long, int, void*)+0x59>
c00202ae:	b8 06 00 00 00       	mov    eax,0x6
c00202b3:	85 f6                	test   esi,esi
c00202b5:	74 1c                	je     c00202d3 <ATA::write(unsigned long long, int, void*)+0x59>
c00202b7:	50                   	push   eax
c00202b8:	50                   	push   eax
c00202b9:	6a 01                	push   0x1
c00202bb:	56                   	push   esi
c00202bc:	53                   	push   ebx
c00202bd:	55                   	push   ebp
c00202be:	57                   	push   edi
c00202bf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00202c3:	e8 70 fb ff ff       	call   c001fe38 <ATA::access(unsigned long long, int, void*, bool)>
c00202c8:	83 c4 20             	add    esp,0x20
c00202cb:	85 c0                	test   eax,eax
c00202cd:	0f 95 c0             	setne  al
c00202d0:	0f b6 c0             	movzx  eax,al
c00202d3:	83 c4 0c             	add    esp,0xc
c00202d6:	5b                   	pop    ebx
c00202d7:	5e                   	pop    esi
c00202d8:	5f                   	pop    edi
c00202d9:	5d                   	pop    ebp
c00202da:	c3                   	ret    
c00202db:	90                   	nop

c00202dc <ATA::detectCHS()>:
c00202dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00202e0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c00202e6:	c1 e0 06             	shl    eax,0x6
c00202e9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c00202ef:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00202f9:	c7 44 24 04 5d 77 02 c0 	mov    DWORD PTR [esp+0x4],0xc002775d
c0020301:	e9 2b 4e ff ff       	jmp    c0015131 <Krnl::panic(char const*)>

c0020306 <ATA::open(int, int, void*)>:
c0020306:	53                   	push   ebx
c0020307:	83 ec 08             	sub    esp,0x8
c002030a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002030e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020312:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020316:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002031c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020322:	c1 e0 06             	shl    eax,0x6
c0020325:	01 d0                	add    eax,edx
c0020327:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002032e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0020334:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002033b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020345:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002034b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020352:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0020359:	75 0c                	jne    c0020367 <ATA::open(int, int, void*)+0x61>
c002035b:	83 ec 0c             	sub    esp,0xc
c002035e:	53                   	push   ebx
c002035f:	e8 78 ff ff ff       	call   c00202dc <ATA::detectCHS()>
c0020364:	83 c4 10             	add    esp,0x10
c0020367:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002036d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0020373:	c1 e0 06             	shl    eax,0x6
c0020376:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002037d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020387:	d1 e8                	shr    eax,1
c0020389:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002038f:	6a 04                	push   0x4
c0020391:	6a 0c                	push   0xc
c0020393:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002039a:	50                   	push   eax
c002039b:	52                   	push   edx
c002039c:	e8 69 ea ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203a1:	90                   	nop
c00203a2:	90                   	nop
c00203a3:	6a 00                	push   0x0
c00203a5:	6a 0c                	push   0xc
c00203a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00203ae:	50                   	push   eax
c00203af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00203b5:	e8 50 ea ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00203ba:	83 c4 14             	add    esp,0x14
c00203bd:	53                   	push   ebx
c00203be:	e8 af e6 fe ff       	call   c000ea72 <PhysicalDisk::startCache()>
c00203c3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00203c6:	e8 0f 08 ff ff       	call   c0010bda <createPartitionsForDisk(PhysicalDisk*)>
c00203cb:	31 c0                	xor    eax,eax
c00203cd:	83 c4 18             	add    esp,0x18
c00203d0:	5b                   	pop    ebx
c00203d1:	c3                   	ret    

c00203d2 <ATAPI::write(unsigned long long, int, void*)>:
c00203d2:	b8 03 00 00 00       	mov    eax,0x3
c00203d7:	c3                   	ret    

c00203d8 <ATAPI::close(int, int, void*)>:
c00203d8:	83 ec 0c             	sub    esp,0xc
c00203db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00203e5:	85 c0                	test   eax,eax
c00203e7:	74 0c                	je     c00203f5 <ATAPI::close(int, int, void*)+0x1d>
c00203e9:	83 ec 0c             	sub    esp,0xc
c00203ec:	8b 10                	mov    edx,DWORD PTR [eax]
c00203ee:	50                   	push   eax
c00203ef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00203f2:	83 c4 10             	add    esp,0x10
c00203f5:	31 c0                	xor    eax,eax
c00203f7:	83 c4 0c             	add    esp,0xc
c00203fa:	c3                   	ret    
c00203fb:	90                   	nop

c00203fc <ATAPI::ATAPI()>:
c00203fc:	83 ec 0c             	sub    esp,0xc
c00203ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020403:	83 ec 04             	sub    esp,0x4
c0020406:	68 00 08 00 00       	push   0x800
c002040b:	68 49 7a 02 c0       	push   0xc0027a49
c0020410:	50                   	push   eax
c0020411:	e8 f4 e5 fe ff       	call   c000ea0a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020416:	83 c4 10             	add    esp,0x10
c0020419:	ba dc 77 02 c0       	mov    edx,0xc00277dc
c002041e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020422:	89 10                	mov    DWORD PTR [eax],edx
c0020424:	90                   	nop
c0020425:	83 c4 0c             	add    esp,0xc
c0020428:	c3                   	ret    
c0020429:	90                   	nop

c002042a <ATAPI::readyForCommand()>:
c002042a:	56                   	push   esi
c002042b:	53                   	push   ebx
c002042c:	53                   	push   ebx
c002042d:	31 db                	xor    ebx,ebx
c002042f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020433:	51                   	push   ecx
c0020434:	6a 0c                	push   0xc
c0020436:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002043d:	50                   	push   eax
c002043e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0020444:	e8 81 ea ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c0020449:	83 c4 10             	add    esp,0x10
c002044c:	a8 88                	test   al,0x88
c002044e:	74 25                	je     c0020475 <ATAPI::readyForCommand()+0x4b>
c0020450:	43                   	inc    ebx
c0020451:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0020457:	7e da                	jle    c0020433 <ATAPI::readyForCommand()+0x9>
c0020459:	83 ec 0c             	sub    esp,0xc
c002045c:	68 5e 01 00 00       	push   0x15e
c0020461:	e8 32 8e ff ff       	call   c0019298 <milliTenthSleep(unsigned int)>
c0020466:	83 c4 10             	add    esp,0x10
c0020469:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002046f:	75 c2                	jne    c0020433 <ATAPI::readyForCommand()+0x9>
c0020471:	31 c0                	xor    eax,eax
c0020473:	eb 02                	jmp    c0020477 <ATAPI::readyForCommand()+0x4d>
c0020475:	b0 01                	mov    al,0x1
c0020477:	5a                   	pop    edx
c0020478:	5b                   	pop    ebx
c0020479:	5e                   	pop    esi
c002047a:	c3                   	ret    
c002047b:	90                   	nop

c002047c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002047c:	55                   	push   ebp
c002047d:	57                   	push   edi
c002047e:	56                   	push   esi
c002047f:	53                   	push   ebx
c0020480:	83 ec 20             	sub    esp,0x20
c0020483:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0020487:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002048b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002048f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0020493:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020497:	6a 01                	push   0x1
c0020499:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204a0:	50                   	push   eax
c00204a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204a7:	e8 66 eb ff ff       	call   c001f012 <IDE::enableIRQs(unsigned char, bool)>
c00204ac:	5e                   	pop    esi
c00204ad:	58                   	pop    eax
c00204ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204b5:	50                   	push   eax
c00204b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204bc:	e8 23 e9 ff ff       	call   c001ede4 <IDE::prepareInterrupt(unsigned char)>
c00204c1:	89 3c 24             	mov    DWORD PTR [esp],edi
c00204c4:	e8 61 ff ff ff       	call   c002042a <ATAPI::readyForCommand()>
c00204c9:	83 c4 10             	add    esp,0x10
c00204cc:	84 c0                	test   al,al
c00204ce:	75 0a                	jne    c00204da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00204d0:	bb 01 00 00 00       	mov    ebx,0x1
c00204d5:	e9 57 02 00 00       	jmp    c0020731 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00204da:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c00204e0:	c1 e0 04             	shl    eax,0x4
c00204e3:	0f b6 c0             	movzx  eax,al
c00204e6:	50                   	push   eax
c00204e7:	6a 06                	push   0x6
c00204e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00204f0:	50                   	push   eax
c00204f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00204f7:	e8 0e e9 ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c00204fc:	6a 00                	push   0x0
c00204fe:	6a 01                	push   0x1
c0020500:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020507:	50                   	push   eax
c0020508:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002050e:	e8 f7 e8 ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020513:	83 c4 20             	add    esp,0x20
c0020516:	0f b6 c3             	movzx  eax,bl
c0020519:	0f b6 df             	movzx  ebx,bh
c002051c:	50                   	push   eax
c002051d:	6a 04                	push   0x4
c002051f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020526:	50                   	push   eax
c0020527:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002052d:	e8 d8 e8 ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020532:	53                   	push   ebx
c0020533:	6a 05                	push   0x5
c0020535:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002053c:	50                   	push   eax
c002053d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020543:	e8 c2 e8 ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020548:	83 c4 20             	add    esp,0x20
c002054b:	68 a0 00 00 00       	push   0xa0
c0020550:	6a 07                	push   0x7
c0020552:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020559:	50                   	push   eax
c002055a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020560:	e8 a5 e8 ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020565:	83 c4 0c             	add    esp,0xc
c0020568:	6a 01                	push   0x1
c002056a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020571:	50                   	push   eax
c0020572:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020578:	e8 25 f3 ff ff       	call   c001f8a2 <IDE::polling(unsigned char, unsigned int)>
c002057d:	83 c4 10             	add    esp,0x10
c0020580:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0020586:	84 c0                	test   al,al
c0020588:	74 23                	je     c00205ad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002058a:	0f b6 d8             	movzx  ebx,al
c002058d:	0f b6 d2             	movzx  edx,dl
c0020590:	53                   	push   ebx
c0020591:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0020598:	50                   	push   eax
c0020599:	52                   	push   edx
c002059a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205a0:	e8 4d f2 ff ff       	call   c001f7f2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00205a5:	83 c4 10             	add    esp,0x10
c00205a8:	e9 84 01 00 00       	jmp    c0020731 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00205ad:	0f b6 d2             	movzx  edx,dl
c00205b0:	53                   	push   ebx
c00205b1:	53                   	push   ebx
c00205b2:	52                   	push   edx
c00205b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00205b9:	e8 3a e8 ff ff       	call   c001edf8 <IDE::getBase(unsigned char)>
c00205be:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00205c2:	b9 06 00 00 00       	mov    ecx,0x6
c00205c7:	89 c2                	mov    edx,eax
c00205c9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00205cc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00205d0:	83 c4 10             	add    esp,0x10
c00205d3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00205d9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00205e0:	85 db                	test   ebx,ebx
c00205e2:	0f 84 ec 00 00 00    	je     c00206d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c00205e8:	51                   	push   ecx
c00205e9:	51                   	push   ecx
c00205ea:	52                   	push   edx
c00205eb:	50                   	push   eax
c00205ec:	e8 87 e9 ff ff       	call   c001ef78 <IDE::waitInterrupt(unsigned char)>
c00205f1:	83 c4 10             	add    esp,0x10
c00205f4:	84 c0                	test   al,al
c00205f6:	0f 84 d4 fe ff ff    	je     c00204d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00205fc:	56                   	push   esi
c00205fd:	56                   	push   esi
c00205fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020605:	50                   	push   eax
c0020606:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002060c:	e8 d3 e7 ff ff       	call   c001ede4 <IDE::prepareInterrupt(unsigned char)>
c0020611:	83 c4 0c             	add    esp,0xc
c0020614:	6a 04                	push   0x4
c0020616:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002061d:	50                   	push   eax
c002061e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020624:	e8 a1 e8 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c0020629:	83 c4 0c             	add    esp,0xc
c002062c:	89 c6                	mov    esi,eax
c002062e:	6a 05                	push   0x5
c0020630:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0020637:	50                   	push   eax
c0020638:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002063e:	e8 87 e8 ff ff       	call   c001eeca <IDE::read(unsigned char, unsigned char)>
c0020643:	89 f1                	mov    ecx,esi
c0020645:	0f b6 c0             	movzx  eax,al
c0020648:	0f b6 f1             	movzx  esi,cl
c002064b:	c1 e0 08             	shl    eax,0x8
c002064e:	09 c6                	or     esi,eax
c0020650:	d1 fe                	sar    esi,1
c0020652:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0020656:	83 c4 10             	add    esp,0x10
c0020659:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002065e:	74 41                	je     c00206a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0020660:	31 c9                	xor    ecx,ecx
c0020662:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0020668:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002066f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0020673:	75 0a                	jne    c002067f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0020675:	01 c9                	add    ecx,ecx
c0020677:	01 cd                	add    ebp,ecx
c0020679:	4b                   	dec    ebx
c002067a:	e9 54 ff ff ff       	jmp    c00205d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002067f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0020684:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0020688:	51                   	push   ecx
c0020689:	51                   	push   ecx
c002068a:	52                   	push   edx
c002068b:	50                   	push   eax
c002068c:	e8 67 e7 ff ff       	call   c001edf8 <IDE::getBase(unsigned char)>
c0020691:	89 c2                	mov    edx,eax
c0020693:	89 f0                	mov    eax,esi
c0020695:	66 ef                	out    dx,ax
c0020697:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002069b:	83 c4 10             	add    esp,0x10
c002069e:	41                   	inc    ecx
c002069f:	eb c1                	jmp    c0020662 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00206a1:	31 f6                	xor    esi,esi
c00206a3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00206a9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00206b0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00206b4:	75 06                	jne    c00206bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00206b6:	01 f6                	add    esi,esi
c00206b8:	01 f5                	add    ebp,esi
c00206ba:	eb bd                	jmp    c0020679 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00206bc:	51                   	push   ecx
c00206bd:	51                   	push   ecx
c00206be:	52                   	push   edx
c00206bf:	50                   	push   eax
c00206c0:	e8 33 e7 ff ff       	call   c001edf8 <IDE::getBase(unsigned char)>
c00206c5:	89 c2                	mov    edx,eax
c00206c7:	66 ed                	in     ax,dx
c00206c9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00206ce:	83 c4 10             	add    esp,0x10
c00206d1:	46                   	inc    esi
c00206d2:	eb cf                	jmp    c00206a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00206d4:	51                   	push   ecx
c00206d5:	51                   	push   ecx
c00206d6:	52                   	push   edx
c00206d7:	50                   	push   eax
c00206d8:	e8 9b e8 ff ff       	call   c001ef78 <IDE::waitInterrupt(unsigned char)>
c00206dd:	83 c4 10             	add    esp,0x10
c00206e0:	84 c0                	test   al,al
c00206e2:	0f 84 e8 fd ff ff    	je     c00204d0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00206e8:	bb a0 86 01 00       	mov    ebx,0x186a0
c00206ed:	52                   	push   edx
c00206ee:	52                   	push   edx
c00206ef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00206f6:	50                   	push   eax
c00206f7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00206fd:	e8 e2 e6 ff ff       	call   c001ede4 <IDE::prepareInterrupt(unsigned char)>
c0020702:	83 c4 10             	add    esp,0x10
c0020705:	50                   	push   eax
c0020706:	50                   	push   eax
c0020707:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002070e:	50                   	push   eax
c002070f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0020715:	e8 de e6 ff ff       	call   c001edf8 <IDE::getBase(unsigned char)>
c002071a:	8d 50 07             	lea    edx,[eax+0x7]
c002071d:	ec                   	in     al,dx
c002071e:	83 c4 10             	add    esp,0x10
c0020721:	a8 88                	test   al,0x88
c0020723:	74 0a                	je     c002072f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0020725:	4b                   	dec    ebx
c0020726:	75 dd                	jne    c0020705 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0020728:	bb 02 00 00 00       	mov    ebx,0x2
c002072d:	eb 02                	jmp    c0020731 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002072f:	31 db                	xor    ebx,ebx
c0020731:	83 c4 1c             	add    esp,0x1c
c0020734:	89 d8                	mov    eax,ebx
c0020736:	5b                   	pop    ebx
c0020737:	5e                   	pop    esi
c0020738:	5f                   	pop    edi
c0020739:	5d                   	pop    ebp
c002073a:	c3                   	ret    
c002073b:	90                   	nop

c002073c <ATAPI::diskRemoved()>:
c002073c:	53                   	push   ebx
c002073d:	83 ec 14             	sub    esp,0x14
c0020740:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020744:	68 55 7a 02 c0       	push   0xc0027a55
c0020749:	e8 11 c9 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c002074e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020755:	c7 04 24 a8 77 02 c0 	mov    DWORD PTR [esp],0xc00277a8
c002075c:	e8 fe c8 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0020761:	58                   	pop    eax
c0020762:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c0020768:	e8 eb 01 ff ff       	call   c0010958 <LogicalDisk::unmount()>
c002076d:	c7 04 24 b7 77 02 c0 	mov    DWORD PTR [esp],0xc00277b7
c0020774:	e8 e6 c8 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0020779:	5a                   	pop    edx
c002077a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020780:	e8 db 0b ff ff       	call   c0011360 <VCache::writeWriteBuffer()>
c0020785:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002078b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002078f:	83 c4 18             	add    esp,0x18
c0020792:	5b                   	pop    ebx
c0020793:	e9 b8 0b ff ff       	jmp    c0011350 <VCache::invalidateReadBuffer()>

c0020798 <ATAPI::eject()>:
c0020798:	57                   	push   edi
c0020799:	b9 03 00 00 00       	mov    ecx,0x3
c002079e:	53                   	push   ebx
c002079f:	83 ec 14             	sub    esp,0x14
c00207a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00207a6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00207aa:	fc                   	cld    
c00207ab:	31 c0                	xor    eax,eax
c00207ad:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00207af:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00207b4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00207b9:	50                   	push   eax
c00207ba:	50                   	push   eax
c00207bb:	6a 00                	push   0x0
c00207bd:	6a 00                	push   0x0
c00207bf:	6a 00                	push   0x0
c00207c1:	6a 02                	push   0x2
c00207c3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00207c7:	50                   	push   eax
c00207c8:	53                   	push   ebx
c00207c9:	e8 ae fc ff ff       	call   c002047c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00207ce:	83 c4 14             	add    esp,0x14
c00207d1:	53                   	push   ebx
c00207d2:	e8 65 ff ff ff       	call   c002073c <ATAPI::diskRemoved()>
c00207d7:	83 c4 24             	add    esp,0x24
c00207da:	31 c0                	xor    eax,eax
c00207dc:	5b                   	pop    ebx
c00207dd:	5f                   	pop    edi
c00207de:	c3                   	ret    
c00207df:	90                   	nop

c00207e0 <ATAPI::diskInserted()>:
c00207e0:	83 ec 18             	sub    esp,0x18
c00207e3:	68 6c 7a 02 c0       	push   0xc0027a6c
c00207e8:	e8 72 c8 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00207ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207f1:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c00207f8:	83 c4 1c             	add    esp,0x1c
c00207fb:	c3                   	ret    

c00207fc <ATAPI::detectMedia()>:
c00207fc:	56                   	push   esi
c00207fd:	53                   	push   ebx
c00207fe:	83 ec 28             	sub    esp,0x28
c0020801:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020805:	6a 0c                	push   0xc
c0020807:	6a 00                	push   0x0
c0020809:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002080d:	56                   	push   esi
c002080e:	e8 81 fe fd ff       	call   c0000694 <memset>
c0020813:	58                   	pop    eax
c0020814:	5a                   	pop    edx
c0020815:	6a 00                	push   0x0
c0020817:	6a 00                	push   0x0
c0020819:	6a 00                	push   0x0
c002081b:	6a 00                	push   0x0
c002081d:	56                   	push   esi
c002081e:	53                   	push   ebx
c002081f:	e8 58 fc ff ff       	call   c002047c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020824:	83 c4 1c             	add    esp,0x1c
c0020827:	6a 0c                	push   0xc
c0020829:	6a 00                	push   0x0
c002082b:	56                   	push   esi
c002082c:	e8 63 fe fd ff       	call   c0000694 <memset>
c0020831:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020836:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002083b:	59                   	pop    ecx
c002083c:	58                   	pop    eax
c002083d:	6a 01                	push   0x1
c002083f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020843:	50                   	push   eax
c0020844:	6a 00                	push   0x0
c0020846:	6a 12                	push   0x12
c0020848:	56                   	push   esi
c0020849:	53                   	push   ebx
c002084a:	e8 2d fc ff ff       	call   c002047c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002084f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0020853:	83 c4 20             	add    esp,0x20
c0020856:	83 e0 7f             	and    eax,0x7f
c0020859:	3c 70                	cmp    al,0x70
c002085b:	74 15                	je     c0020872 <ATAPI::detectMedia()+0x76>
c002085d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020864:	75 0c                	jne    c0020872 <ATAPI::detectMedia()+0x76>
c0020866:	83 ec 0c             	sub    esp,0xc
c0020869:	53                   	push   ebx
c002086a:	e8 71 ff ff ff       	call   c00207e0 <ATAPI::diskInserted()>
c002086f:	83 c4 10             	add    esp,0x10
c0020872:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020876:	83 e0 0f             	and    eax,0xf
c0020879:	3c 02                	cmp    al,0x2
c002087b:	75 1b                	jne    c0020898 <ATAPI::detectMedia()+0x9c>
c002087d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020882:	75 2d                	jne    c00208b1 <ATAPI::detectMedia()+0xb5>
c0020884:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002088b:	74 24                	je     c00208b1 <ATAPI::detectMedia()+0xb5>
c002088d:	83 ec 0c             	sub    esp,0xc
c0020890:	53                   	push   ebx
c0020891:	e8 a6 fe ff ff       	call   c002073c <ATAPI::diskRemoved()>
c0020896:	eb 16                	jmp    c00208ae <ATAPI::detectMedia()+0xb2>
c0020898:	84 c0                	test   al,al
c002089a:	75 15                	jne    c00208b1 <ATAPI::detectMedia()+0xb5>
c002089c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00208a3:	75 0c                	jne    c00208b1 <ATAPI::detectMedia()+0xb5>
c00208a5:	83 ec 0c             	sub    esp,0xc
c00208a8:	53                   	push   ebx
c00208a9:	e8 32 ff ff ff       	call   c00207e0 <ATAPI::diskInserted()>
c00208ae:	83 c4 10             	add    esp,0x10
c00208b1:	83 c4 24             	add    esp,0x24
c00208b4:	5b                   	pop    ebx
c00208b5:	5e                   	pop    esi
c00208b6:	c3                   	ret    
c00208b7:	90                   	nop

c00208b8 <ATAPI::open(int, int, void*)>:
c00208b8:	56                   	push   esi
c00208b9:	53                   	push   ebx
c00208ba:	50                   	push   eax
c00208bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00208bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00208c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00208c7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00208cd:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00208d3:	c1 e0 06             	shl    eax,0x6
c00208d6:	01 d0                	add    eax,edx
c00208d8:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00208df:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00208e5:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00208ec:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00208f6:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00208fc:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020903:	6a 04                	push   0x4
c0020905:	6a 0c                	push   0xc
c0020907:	51                   	push   ecx
c0020908:	52                   	push   edx
c0020909:	e8 fc e4 ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c002090e:	90                   	nop
c002090f:	90                   	nop
c0020910:	6a 00                	push   0x0
c0020912:	6a 0c                	push   0xc
c0020914:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002091b:	50                   	push   eax
c002091c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0020922:	e8 e3 e4 ff ff       	call   c001ee0a <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020927:	83 c4 14             	add    esp,0x14
c002092a:	68 74 01 00 00       	push   0x174
c002092f:	e8 3f 94 fe ff       	call   c0009d73 <malloc>
c0020934:	83 c4 0c             	add    esp,0xc
c0020937:	89 c6                	mov    esi,eax
c0020939:	6a 00                	push   0x0
c002093b:	68 ff ff ff 7f       	push   0x7fffffff
c0020940:	6a 00                	push   0x0
c0020942:	6a 00                	push   0x0
c0020944:	53                   	push   ebx
c0020945:	68 34 7b 02 c0       	push   0xc0027b34
c002094a:	50                   	push   eax
c002094b:	e8 14 fe fe ff       	call   c0010764 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0020950:	83 c4 14             	add    esp,0x14
c0020953:	56                   	push   esi
c0020954:	e8 c1 fe fe ff       	call   c001081a <LogicalDisk::assignDriveLetter()>
c0020959:	5a                   	pop    edx
c002095a:	0f be c0             	movsx  eax,al
c002095d:	59                   	pop    ecx
c002095e:	50                   	push   eax
c002095f:	68 c5 77 02 c0       	push   0xc00277c5
c0020964:	e8 f6 c6 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0020969:	58                   	pop    eax
c002096a:	5a                   	pop    edx
c002096b:	56                   	push   esi
c002096c:	53                   	push   ebx
c002096d:	e8 60 dc fe ff       	call   c000e5d2 <Device::addChild(Device*)>
c0020972:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020978:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002097b:	e8 f2 e0 fe ff       	call   c000ea72 <PhysicalDisk::startCache()>
c0020980:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020987:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002098a:	e8 6d fe ff ff       	call   c00207fc <ATAPI::detectMedia()>
c002098f:	83 c4 14             	add    esp,0x14
c0020992:	31 c0                	xor    eax,eax
c0020994:	5b                   	pop    ebx
c0020995:	5e                   	pop    esi
c0020996:	c3                   	ret    
c0020997:	90                   	nop

c0020998 <ATAPI::read(unsigned long long, int, void*)>:
c0020998:	55                   	push   ebp
c0020999:	57                   	push   edi
c002099a:	56                   	push   esi
c002099b:	53                   	push   ebx
c002099c:	83 ec 1c             	sub    esp,0x1c
c002099f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00209a3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00209a7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00209ab:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00209b2:	74 41                	je     c00209f5 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00209b4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00209b8:	b9 03 00 00 00       	mov    ecx,0x3
c00209bd:	fc                   	cld    
c00209be:	31 c0                	xor    eax,eax
c00209c0:	86 fb                	xchg   bl,bh
c00209c2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00209c4:	c1 c3 10             	rol    ebx,0x10
c00209c7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00209cc:	89 e8                	mov    eax,ebp
c00209ce:	86 fb                	xchg   bl,bh
c00209d0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00209d4:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00209d8:	50                   	push   eax
c00209d9:	50                   	push   eax
c00209da:	55                   	push   ebp
c00209db:	c1 e5 0b             	shl    ebp,0xb
c00209de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00209e2:	6a 00                	push   0x0
c00209e4:	55                   	push   ebp
c00209e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00209e9:	50                   	push   eax
c00209ea:	56                   	push   esi
c00209eb:	e8 8c fa ff ff       	call   c002047c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00209f0:	83 c4 20             	add    esp,0x20
c00209f3:	eb 1a                	jmp    c0020a0f <ATAPI::read(unsigned long long, int, void*)+0x77>
c00209f5:	83 ec 0c             	sub    esp,0xc
c00209f8:	56                   	push   esi
c00209f9:	e8 fe fd ff ff       	call   c00207fc <ATAPI::detectMedia()>
c00209fe:	83 c4 10             	add    esp,0x10
c0020a01:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020a08:	75 aa                	jne    c00209b4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020a0a:	b8 02 00 00 00       	mov    eax,0x2
c0020a0f:	83 c4 1c             	add    esp,0x1c
c0020a12:	5b                   	pop    ebx
c0020a13:	5e                   	pop    esi
c0020a14:	5f                   	pop    edi
c0020a15:	5d                   	pop    ebp
c0020a16:	c3                   	ret    
c0020a17:	90                   	nop

c0020a18 <SATA::close(int, int, void*)>:
c0020a18:	83 ec 0c             	sub    esp,0xc
c0020a1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a1f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020a25:	85 c0                	test   eax,eax
c0020a27:	74 0c                	je     c0020a35 <SATA::close(int, int, void*)+0x1d>
c0020a29:	83 ec 0c             	sub    esp,0xc
c0020a2c:	8b 10                	mov    edx,DWORD PTR [eax]
c0020a2e:	50                   	push   eax
c0020a2f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020a32:	83 c4 10             	add    esp,0x10
c0020a35:	31 c0                	xor    eax,eax
c0020a37:	83 c4 0c             	add    esp,0xc
c0020a3a:	c3                   	ret    
c0020a3b:	90                   	nop

c0020a3c <SATA::powerSaving(PowerSavingLevel)>:
c0020a3c:	c3                   	ret    
c0020a3d:	90                   	nop

c0020a3e <SATA::open(int, int, void*)>:
c0020a3e:	56                   	push   esi
c0020a3f:	53                   	push   ebx
c0020a40:	51                   	push   ecx
c0020a41:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020a45:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0020a4c:	74 2d                	je     c0020a7b <SATA::open(int, int, void*)+0x3d>
c0020a4e:	83 ec 0c             	sub    esp,0xc
c0020a51:	68 0c 78 02 c0       	push   0xc002780c
c0020a56:	e8 72 93 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0020a5b:	83 c4 10             	add    esp,0x10
c0020a5e:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0020a65:	75 14                	jne    c0020a7b <SATA::open(int, int, void*)+0x3d>
c0020a67:	e4 60                	in     al,0x60
c0020a69:	3c 5a                	cmp    al,0x5a
c0020a6b:	74 04                	je     c0020a71 <SATA::open(int, int, void*)+0x33>
c0020a6d:	3c 1c                	cmp    al,0x1c
c0020a6f:	75 f6                	jne    c0020a67 <SATA::open(int, int, void*)+0x29>
c0020a71:	e4 60                	in     al,0x60
c0020a73:	3c 5a                	cmp    al,0x5a
c0020a75:	74 fa                	je     c0020a71 <SATA::open(int, int, void*)+0x33>
c0020a77:	3c 1c                	cmp    al,0x1c
c0020a79:	74 f6                	je     c0020a71 <SATA::open(int, int, void*)+0x33>
c0020a7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020a7f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020a89:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020a8f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020a99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a9d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020aa7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020aad:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0020ab4:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0020abb:	74 2d                	je     c0020aea <SATA::open(int, int, void*)+0xac>
c0020abd:	83 ec 0c             	sub    esp,0xc
c0020ac0:	68 19 78 02 c0       	push   0xc0027819
c0020ac5:	e8 03 93 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0020aca:	83 c4 10             	add    esp,0x10
c0020acd:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0020ad4:	75 14                	jne    c0020aea <SATA::open(int, int, void*)+0xac>
c0020ad6:	e4 60                	in     al,0x60
c0020ad8:	3c 1c                	cmp    al,0x1c
c0020ada:	74 04                	je     c0020ae0 <SATA::open(int, int, void*)+0xa2>
c0020adc:	3c 5a                	cmp    al,0x5a
c0020ade:	75 f6                	jne    c0020ad6 <SATA::open(int, int, void*)+0x98>
c0020ae0:	e4 60                	in     al,0x60
c0020ae2:	3c 5a                	cmp    al,0x5a
c0020ae4:	74 fa                	je     c0020ae0 <SATA::open(int, int, void*)+0xa2>
c0020ae6:	3c 1c                	cmp    al,0x1c
c0020ae8:	74 f6                	je     c0020ae0 <SATA::open(int, int, void*)+0xa2>
c0020aea:	e8 3b 99 fe ff       	call   c000a42a <Phys::allocatePage()>
c0020aef:	89 c6                	mov    esi,eax
c0020af1:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020af7:	81 c6 00 10 00 00    	add    esi,0x1000
c0020afd:	e8 28 99 fe ff       	call   c000a42a <Phys::allocatePage()>
c0020b02:	39 c6                	cmp    esi,eax
c0020b04:	74 10                	je     c0020b16 <SATA::open(int, int, void*)+0xd8>
c0020b06:	83 ec 0c             	sub    esp,0xc
c0020b09:	68 26 78 02 c0       	push   0xc0027826
c0020b0e:	e8 1e 46 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0020b13:	83 c4 10             	add    esp,0x10
c0020b16:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0020b1d:	74 2d                	je     c0020b4c <SATA::open(int, int, void*)+0x10e>
c0020b1f:	83 ec 0c             	sub    esp,0xc
c0020b22:	68 3a 78 02 c0       	push   0xc002783a
c0020b27:	e8 a1 92 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0020b2c:	83 c4 10             	add    esp,0x10
c0020b2f:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0020b36:	75 14                	jne    c0020b4c <SATA::open(int, int, void*)+0x10e>
c0020b38:	e4 60                	in     al,0x60
c0020b3a:	3c 1c                	cmp    al,0x1c
c0020b3c:	74 04                	je     c0020b42 <SATA::open(int, int, void*)+0x104>
c0020b3e:	3c 5a                	cmp    al,0x5a
c0020b40:	75 f6                	jne    c0020b38 <SATA::open(int, int, void*)+0xfa>
c0020b42:	e4 60                	in     al,0x60
c0020b44:	3c 5a                	cmp    al,0x5a
c0020b46:	74 fa                	je     c0020b42 <SATA::open(int, int, void*)+0x104>
c0020b48:	3c 1c                	cmp    al,0x1c
c0020b4a:	74 f6                	je     c0020b42 <SATA::open(int, int, void*)+0x104>
c0020b4c:	83 ec 0c             	sub    esp,0xc
c0020b4f:	6a 02                	push   0x2
c0020b51:	e8 e3 b1 fe ff       	call   c000bd39 <Virt::allocateKernelVirtualPages(int)>
c0020b56:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020b5c:	6a 03                	push   0x3
c0020b5e:	50                   	push   eax
c0020b5f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020b65:	ff 35 b0 8d 02 c0    	push   DWORD PTR ds:0xc0028db0
c0020b6b:	e8 70 b8 fe ff       	call   c000c3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0020b70:	83 c4 20             	add    esp,0x20
c0020b73:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0020b7a:	74 2d                	je     c0020ba9 <SATA::open(int, int, void*)+0x16b>
c0020b7c:	83 ec 0c             	sub    esp,0xc
c0020b7f:	68 47 78 02 c0       	push   0xc0027847
c0020b84:	e8 44 92 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0020b89:	83 c4 10             	add    esp,0x10
c0020b8c:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0020b93:	75 14                	jne    c0020ba9 <SATA::open(int, int, void*)+0x16b>
c0020b95:	e4 60                	in     al,0x60
c0020b97:	3c 1c                	cmp    al,0x1c
c0020b99:	74 04                	je     c0020b9f <SATA::open(int, int, void*)+0x161>
c0020b9b:	3c 5a                	cmp    al,0x5a
c0020b9d:	75 f6                	jne    c0020b95 <SATA::open(int, int, void*)+0x157>
c0020b9f:	e4 60                	in     al,0x60
c0020ba1:	3c 5a                	cmp    al,0x5a
c0020ba3:	74 fa                	je     c0020b9f <SATA::open(int, int, void*)+0x161>
c0020ba5:	3c 1c                	cmp    al,0x1c
c0020ba7:	74 f6                	je     c0020b9f <SATA::open(int, int, void*)+0x161>
c0020ba9:	83 ec 0c             	sub    esp,0xc
c0020bac:	53                   	push   ebx
c0020bad:	e8 c0 de fe ff       	call   c000ea72 <PhysicalDisk::startCache()>
c0020bb2:	83 c4 10             	add    esp,0x10
c0020bb5:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0020bbc:	74 2d                	je     c0020beb <SATA::open(int, int, void*)+0x1ad>
c0020bbe:	83 ec 0c             	sub    esp,0xc
c0020bc1:	68 54 78 02 c0       	push   0xc0027854
c0020bc6:	e8 02 92 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0020bcb:	83 c4 10             	add    esp,0x10
c0020bce:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0020bd5:	75 14                	jne    c0020beb <SATA::open(int, int, void*)+0x1ad>
c0020bd7:	e4 60                	in     al,0x60
c0020bd9:	3c 1c                	cmp    al,0x1c
c0020bdb:	74 04                	je     c0020be1 <SATA::open(int, int, void*)+0x1a3>
c0020bdd:	3c 5a                	cmp    al,0x5a
c0020bdf:	75 f6                	jne    c0020bd7 <SATA::open(int, int, void*)+0x199>
c0020be1:	e4 60                	in     al,0x60
c0020be3:	3c 5a                	cmp    al,0x5a
c0020be5:	74 fa                	je     c0020be1 <SATA::open(int, int, void*)+0x1a3>
c0020be7:	3c 1c                	cmp    al,0x1c
c0020be9:	74 f6                	je     c0020be1 <SATA::open(int, int, void*)+0x1a3>
c0020beb:	83 ec 0c             	sub    esp,0xc
c0020bee:	53                   	push   ebx
c0020bef:	e8 e6 ff fe ff       	call   c0010bda <createPartitionsForDisk(PhysicalDisk*)>
c0020bf4:	83 c4 10             	add    esp,0x10
c0020bf7:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0020bfe:	74 2d                	je     c0020c2d <SATA::open(int, int, void*)+0x1ef>
c0020c00:	83 ec 0c             	sub    esp,0xc
c0020c03:	68 61 78 02 c0       	push   0xc0027861
c0020c08:	e8 c0 91 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0020c0d:	83 c4 10             	add    esp,0x10
c0020c10:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0020c17:	75 14                	jne    c0020c2d <SATA::open(int, int, void*)+0x1ef>
c0020c19:	e4 60                	in     al,0x60
c0020c1b:	3c 1c                	cmp    al,0x1c
c0020c1d:	74 04                	je     c0020c23 <SATA::open(int, int, void*)+0x1e5>
c0020c1f:	3c 5a                	cmp    al,0x5a
c0020c21:	75 f6                	jne    c0020c19 <SATA::open(int, int, void*)+0x1db>
c0020c23:	e4 60                	in     al,0x60
c0020c25:	3c 5a                	cmp    al,0x5a
c0020c27:	74 fa                	je     c0020c23 <SATA::open(int, int, void*)+0x1e5>
c0020c29:	3c 1c                	cmp    al,0x1c
c0020c2b:	74 f6                	je     c0020c23 <SATA::open(int, int, void*)+0x1e5>
c0020c2d:	5a                   	pop    edx
c0020c2e:	31 c0                	xor    eax,eax
c0020c30:	5b                   	pop    ebx
c0020c31:	5e                   	pop    esi
c0020c32:	c3                   	ret    
c0020c33:	90                   	nop

c0020c34 <SATA::SATA()>:
c0020c34:	83 ec 0c             	sub    esp,0xc
c0020c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c3b:	83 ec 04             	sub    esp,0x4
c0020c3e:	68 00 02 00 00       	push   0x200
c0020c43:	68 6e 78 02 c0       	push   0xc002786e
c0020c48:	50                   	push   eax
c0020c49:	e8 bc dd fe ff       	call   c000ea0a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020c4e:	83 c4 10             	add    esp,0x10
c0020c51:	ba 18 7a 02 c0       	mov    edx,0xc0027a18
c0020c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c5a:	89 10                	mov    DWORD PTR [eax],edx
c0020c5c:	90                   	nop
c0020c5d:	83 c4 0c             	add    esp,0xc
c0020c60:	c3                   	ret    
c0020c61:	90                   	nop

c0020c62 <SATA::access(unsigned long long, int, void*, bool)>:
c0020c62:	55                   	push   ebp
c0020c63:	57                   	push   edi
c0020c64:	56                   	push   esi
c0020c65:	53                   	push   ebx
c0020c66:	83 ec 2c             	sub    esp,0x2c
c0020c69:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020c6d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020c71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020c75:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0020c7c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020c80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020c84:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020c88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c8c:	75 19                	jne    c0020ca7 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c0020c8e:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0020c93:	7e 41                	jle    c0020cd6 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020c95:	83 ec 0c             	sub    esp,0xc
c0020c98:	68 8d 78 02 c0       	push   0xc002788d
c0020c9d:	e8 8f 44 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0020ca2:	83 c4 10             	add    esp,0x10
c0020ca5:	eb 2f                	jmp    c0020cd6 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c0020ca7:	83 ec 0c             	sub    esp,0xc
c0020caa:	68 7e 78 02 c0       	push   0xc002787e
c0020caf:	e8 19 91 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0020cb4:	83 c4 10             	add    esp,0x10
c0020cb7:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0020cbe:	75 ce                	jne    c0020c8e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020cc0:	e4 60                	in     al,0x60
c0020cc2:	3c 1c                	cmp    al,0x1c
c0020cc4:	74 04                	je     c0020cca <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020cc6:	3c 5a                	cmp    al,0x5a
c0020cc8:	75 f6                	jne    c0020cc0 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c0020cca:	e4 60                	in     al,0x60
c0020ccc:	3c 5a                	cmp    al,0x5a
c0020cce:	74 fa                	je     c0020cca <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020cd0:	3c 1c                	cmp    al,0x1c
c0020cd2:	74 f6                	je     c0020cca <SATA::access(unsigned long long, int, void*, bool)+0x68>
c0020cd4:	eb b8                	jmp    c0020c8e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c0020cd6:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0020cdd:	75 29                	jne    c0020d08 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c0020cdf:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020ce5:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c0020ceb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020cf1:	8d 75 02             	lea    esi,[ebp+0x2]
c0020cf4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020cf8:	c1 e6 07             	shl    esi,0x7
c0020cfb:	01 c6                	add    esi,eax
c0020cfd:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0020d04:	74 4a                	je     c0020d50 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020d06:	eb 2f                	jmp    c0020d37 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020d08:	83 ec 0c             	sub    esp,0xc
c0020d0b:	68 c6 78 02 c0       	push   0xc00278c6
c0020d10:	e8 b8 90 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0020d15:	83 c4 10             	add    esp,0x10
c0020d18:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0020d1f:	75 be                	jne    c0020cdf <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020d21:	e4 60                	in     al,0x60
c0020d23:	3c 1c                	cmp    al,0x1c
c0020d25:	74 04                	je     c0020d2b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020d27:	3c 5a                	cmp    al,0x5a
c0020d29:	75 f6                	jne    c0020d21 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020d2b:	e4 60                	in     al,0x60
c0020d2d:	3c 5a                	cmp    al,0x5a
c0020d2f:	74 fa                	je     c0020d2b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020d31:	3c 1c                	cmp    al,0x1c
c0020d33:	74 f6                	je     c0020d2b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020d35:	eb a8                	jmp    c0020cdf <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020d37:	83 ec 0c             	sub    esp,0xc
c0020d3a:	68 d5 78 02 c0       	push   0xc00278d5
c0020d3f:	e8 89 90 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0020d44:	83 c4 10             	add    esp,0x10
c0020d47:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0020d4e:	74 3d                	je     c0020d8d <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020d50:	89 e8                	mov    eax,ebp
c0020d52:	c1 e0 07             	shl    eax,0x7
c0020d55:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020d59:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020d63:	52                   	push   edx
c0020d64:	52                   	push   edx
c0020d65:	56                   	push   esi
c0020d66:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020d6c:	e8 11 ec ff ff       	call   c001f982 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020d71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020d75:	83 c4 10             	add    esp,0x10
c0020d78:	b8 01 00 00 00       	mov    eax,0x1
c0020d7d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020d82:	75 1d                	jne    c0020da1 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020d84:	e9 c8 04 00 00       	jmp    c0021251 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020d89:	3c 5a                	cmp    al,0x5a
c0020d8b:	74 0c                	je     c0020d99 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020d8d:	e4 60                	in     al,0x60
c0020d8f:	3c 1c                	cmp    al,0x1c
c0020d91:	75 f6                	jne    c0020d89 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c0020d93:	eb 04                	jmp    c0020d99 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020d95:	3c 1c                	cmp    al,0x1c
c0020d97:	75 b7                	jne    c0020d50 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020d99:	e4 60                	in     al,0x60
c0020d9b:	3c 5a                	cmp    al,0x5a
c0020d9d:	74 fa                	je     c0020d99 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020d9f:	eb f4                	jmp    c0020d95 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c0020da1:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0020da8:	74 3a                	je     c0020de4 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c0020daa:	83 ec 0c             	sub    esp,0xc
c0020dad:	68 e4 78 02 c0       	push   0xc00278e4
c0020db2:	e8 16 90 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0020db7:	83 c4 10             	add    esp,0x10
c0020dba:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0020dc1:	74 0d                	je     c0020dd0 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c0020dc3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020dc8:	74 34                	je     c0020dfe <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c0020dca:	eb 1f                	jmp    c0020deb <SATA::access(unsigned long long, int, void*, bool)+0x189>
c0020dcc:	3c 1c                	cmp    al,0x1c
c0020dce:	74 0c                	je     c0020ddc <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020dd0:	e4 60                	in     al,0x60
c0020dd2:	3c 5a                	cmp    al,0x5a
c0020dd4:	75 f6                	jne    c0020dcc <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c0020dd6:	eb 04                	jmp    c0020ddc <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020dd8:	3c 1c                	cmp    al,0x1c
c0020dda:	75 e7                	jne    c0020dc3 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c0020ddc:	e4 60                	in     al,0x60
c0020dde:	3c 5a                	cmp    al,0x5a
c0020de0:	74 fa                	je     c0020ddc <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c0020de2:	eb f4                	jmp    c0020dd8 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c0020de4:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020de9:	74 1c                	je     c0020e07 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020deb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0020def:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020df5:	c1 e1 09             	shl    ecx,0x9
c0020df8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020dfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020dfe:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0020e05:	75 55                	jne    c0020e5c <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020e07:	8d 45 02             	lea    eax,[ebp+0x2]
c0020e0a:	c1 e0 07             	shl    eax,0x7
c0020e0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020e11:	8b 38                	mov    edi,DWORD PTR [eax]
c0020e13:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020e19:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c0020e1f:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e29:	c1 e0 05             	shl    eax,0x5
c0020e2c:	01 c7                	add    edi,eax
c0020e2e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020e32:	83 e0 01             	and    eax,0x1
c0020e35:	c1 e0 06             	shl    eax,0x6
c0020e38:	88 c2                	mov    dl,al
c0020e3a:	8a 07                	mov    al,BYTE PTR [edi]
c0020e3c:	83 e0 bf             	and    eax,0xffffffbf
c0020e3f:	09 d0                	or     eax,edx
c0020e41:	88 07                	mov    BYTE PTR [edi],al
c0020e43:	8b 07                	mov    eax,DWORD PTR [edi]
c0020e45:	25 e0 ff 00 00       	and    eax,0xffe0
c0020e4a:	0d 05 00 01 00       	or     eax,0x10005
c0020e4f:	89 07                	mov    DWORD PTR [edi],eax
c0020e51:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0020e58:	74 4d                	je     c0020ea7 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020e5a:	eb 32                	jmp    c0020e8e <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020e5c:	83 ec 0c             	sub    esp,0xc
c0020e5f:	68 f3 78 02 c0       	push   0xc00278f3
c0020e64:	e8 64 8f fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0020e69:	83 c4 10             	add    esp,0x10
c0020e6c:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0020e73:	75 92                	jne    c0020e07 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020e75:	e4 60                	in     al,0x60
c0020e77:	3c 1c                	cmp    al,0x1c
c0020e79:	74 04                	je     c0020e7f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e7b:	3c 5a                	cmp    al,0x5a
c0020e7d:	75 f6                	jne    c0020e75 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c0020e7f:	e4 60                	in     al,0x60
c0020e81:	3c 5a                	cmp    al,0x5a
c0020e83:	74 fa                	je     c0020e7f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e85:	3c 1c                	cmp    al,0x1c
c0020e87:	74 f6                	je     c0020e7f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020e89:	e9 79 ff ff ff       	jmp    c0020e07 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020e8e:	83 ec 0c             	sub    esp,0xc
c0020e91:	68 02 79 02 c0       	push   0xc0027902
c0020e96:	e8 32 8f fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0020e9b:	83 c4 10             	add    esp,0x10
c0020e9e:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0020ea5:	74 3b                	je     c0020ee2 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020ea7:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020ead:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c0020eb3:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c0020eb9:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c0020ebc:	50                   	push   eax
c0020ebd:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c0020ec1:	83 c0 08             	add    eax,0x8
c0020ec4:	c1 e0 04             	shl    eax,0x4
c0020ec7:	50                   	push   eax
c0020ec8:	6a 00                	push   0x0
c0020eca:	56                   	push   esi
c0020ecb:	e8 c4 f7 fd ff       	call   c0000694 <memset>
c0020ed0:	83 c4 10             	add    esp,0x10
c0020ed3:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0020eda:	74 33                	je     c0020f0f <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020edc:	eb 18                	jmp    c0020ef6 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c0020ede:	3c 1c                	cmp    al,0x1c
c0020ee0:	74 0c                	je     c0020eee <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020ee2:	e4 60                	in     al,0x60
c0020ee4:	3c 5a                	cmp    al,0x5a
c0020ee6:	75 f6                	jne    c0020ede <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c0020ee8:	eb 04                	jmp    c0020eee <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020eea:	3c 1c                	cmp    al,0x1c
c0020eec:	75 b9                	jne    c0020ea7 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020eee:	e4 60                	in     al,0x60
c0020ef0:	3c 5a                	cmp    al,0x5a
c0020ef2:	74 fa                	je     c0020eee <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020ef4:	eb f4                	jmp    c0020eea <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020ef6:	83 ec 0c             	sub    esp,0xc
c0020ef9:	68 11 79 02 c0       	push   0xc0027911
c0020efe:	e8 ca 8e fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0020f03:	83 c4 10             	add    esp,0x10
c0020f06:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0020f0d:	74 48                	je     c0020f57 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c0020f0f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020f15:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020f1b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020f1f:	c1 e0 09             	shl    eax,0x9
c0020f22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f26:	48                   	dec    eax
c0020f27:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020f2c:	89 c2                	mov    edx,eax
c0020f2e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020f34:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020f39:	09 d0                	or     eax,edx
c0020f3b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020f41:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020f48:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0020f4f:	74 33                	je     c0020f84 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020f51:	eb 18                	jmp    c0020f6b <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020f53:	3c 1c                	cmp    al,0x1c
c0020f55:	74 0c                	je     c0020f63 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020f57:	e4 60                	in     al,0x60
c0020f59:	3c 5a                	cmp    al,0x5a
c0020f5b:	75 f6                	jne    c0020f53 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020f5d:	eb 04                	jmp    c0020f63 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020f5f:	3c 1c                	cmp    al,0x1c
c0020f61:	75 ac                	jne    c0020f0f <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020f63:	e4 60                	in     al,0x60
c0020f65:	3c 5a                	cmp    al,0x5a
c0020f67:	74 fa                	je     c0020f63 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020f69:	eb f4                	jmp    c0020f5f <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020f6b:	83 ec 0c             	sub    esp,0xc
c0020f6e:	68 20 79 02 c0       	push   0xc0027920
c0020f73:	e8 55 8e fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0020f78:	83 c4 10             	add    esp,0x10
c0020f7b:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0020f82:	74 63                	je     c0020fe7 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020f84:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020f87:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020f8b:	66 25 00 7f          	and    ax,0x7f00
c0020f8f:	66 0d 27 80          	or     ax,0x8027
c0020f93:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0020f98:	66 89 06             	mov    WORD PTR [esi],ax
c0020f9b:	19 c0                	sbb    eax,eax
c0020f9d:	83 e0 f0             	and    eax,0xfffffff0
c0020fa0:	83 c0 35             	add    eax,0x35
c0020fa3:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0020fa6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020faa:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c0020fae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fb2:	c1 e8 10             	shr    eax,0x10
c0020fb5:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0020fb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fbc:	c1 e8 18             	shr    eax,0x18
c0020fbf:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0020fc6:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0020fc9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0020fcd:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0020fd0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020fd4:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0020fd7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0020fdb:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0020fdf:	74 33                	je     c0021014 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020fe1:	eb 18                	jmp    c0020ffb <SATA::access(unsigned long long, int, void*, bool)+0x399>
c0020fe3:	3c 1c                	cmp    al,0x1c
c0020fe5:	74 0c                	je     c0020ff3 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020fe7:	e4 60                	in     al,0x60
c0020fe9:	3c 5a                	cmp    al,0x5a
c0020feb:	75 f6                	jne    c0020fe3 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c0020fed:	eb 04                	jmp    c0020ff3 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020fef:	3c 1c                	cmp    al,0x1c
c0020ff1:	75 91                	jne    c0020f84 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020ff3:	e4 60                	in     al,0x60
c0020ff5:	3c 5a                	cmp    al,0x5a
c0020ff7:	74 fa                	je     c0020ff3 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020ff9:	eb f4                	jmp    c0020fef <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c0020ffb:	83 ec 0c             	sub    esp,0xc
c0020ffe:	68 2f 79 02 c0       	push   0xc002792f
c0021003:	e8 c5 8d fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0021008:	83 c4 10             	add    esp,0x10
c002100b:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0021012:	74 11                	je     c0021025 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0021014:	89 e8                	mov    eax,ebp
c0021016:	31 f6                	xor    esi,esi
c0021018:	c1 e0 07             	shl    eax,0x7
c002101b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002101f:	eb 21                	jmp    c0021042 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0021021:	3c 1c                	cmp    al,0x1c
c0021023:	74 0c                	je     c0021031 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0021025:	e4 60                	in     al,0x60
c0021027:	3c 5a                	cmp    al,0x5a
c0021029:	75 f6                	jne    c0021021 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c002102b:	eb 04                	jmp    c0021031 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c002102d:	3c 1c                	cmp    al,0x1c
c002102f:	75 e3                	jne    c0021014 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0021031:	e4 60                	in     al,0x60
c0021033:	3c 5a                	cmp    al,0x5a
c0021035:	74 fa                	je     c0021031 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0021037:	eb f4                	jmp    c002102d <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0021039:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002103f:	74 0c                	je     c002104d <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0021041:	46                   	inc    esi
c0021042:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0021048:	80 e2 88             	and    dl,0x88
c002104b:	75 ec                	jne    c0021039 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c002104d:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0021054:	74 3d                	je     c0021093 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0021056:	83 ec 0c             	sub    esp,0xc
c0021059:	68 3e 79 02 c0       	push   0xc002793e
c002105e:	e8 6a 8d fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0021063:	8b 15 a0 8c 02 c0    	mov    edx,DWORD PTR ds:0xc0028ca0
c0021069:	83 c4 10             	add    esp,0x10
c002106c:	f6 c2 80             	test   dl,0x80
c002106f:	74 0e                	je     c002107f <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0021071:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0021077:	75 2f                	jne    c00210a8 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0021079:	eb 20                	jmp    c002109b <SATA::access(unsigned long long, int, void*, bool)+0x439>
c002107b:	3c 1c                	cmp    al,0x1c
c002107d:	74 0c                	je     c002108b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002107f:	e4 60                	in     al,0x60
c0021081:	3c 5a                	cmp    al,0x5a
c0021083:	75 f6                	jne    c002107b <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0021085:	eb 04                	jmp    c002108b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0021087:	3c 1c                	cmp    al,0x1c
c0021089:	75 e6                	jne    c0021071 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c002108b:	e4 60                	in     al,0x60
c002108d:	3c 5a                	cmp    al,0x5a
c002108f:	74 fa                	je     c002108b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0021091:	eb f4                	jmp    c0021087 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c0021093:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0021099:	75 13                	jne    c00210ae <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c002109b:	83 ec 0c             	sub    esp,0xc
c002109e:	68 4e 79 02 c0       	push   0xc002794e
c00210a3:	e9 d2 00 00 00       	jmp    c002117a <SATA::access(unsigned long long, int, void*, bool)+0x518>
c00210a8:	0f ba e2 0b          	bt     edx,0xb
c00210ac:	72 25                	jb     c00210d3 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c00210ae:	be 01 00 00 00       	mov    esi,0x1
c00210b3:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00210b7:	89 e8                	mov    eax,ebp
c00210b9:	d3 e6                	shl    esi,cl
c00210bb:	c1 e0 07             	shl    eax,0x7
c00210be:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00210c2:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c00210c9:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c00210cf:	74 4a                	je     c002111b <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00210d1:	eb 2f                	jmp    c0021102 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c00210d3:	83 ec 0c             	sub    esp,0xc
c00210d6:	68 5c 79 02 c0       	push   0xc002795c
c00210db:	e8 ed 8c fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c00210e0:	83 c4 10             	add    esp,0x10
c00210e3:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c00210ea:	75 c2                	jne    c00210ae <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00210ec:	e4 60                	in     al,0x60
c00210ee:	3c 5a                	cmp    al,0x5a
c00210f0:	74 04                	je     c00210f6 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00210f2:	3c 1c                	cmp    al,0x1c
c00210f4:	75 f6                	jne    c00210ec <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c00210f6:	e4 60                	in     al,0x60
c00210f8:	3c 5a                	cmp    al,0x5a
c00210fa:	74 fa                	je     c00210f6 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00210fc:	3c 1c                	cmp    al,0x1c
c00210fe:	74 f6                	je     c00210f6 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0021100:	eb ac                	jmp    c00210ae <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0021102:	83 ec 0c             	sub    esp,0xc
c0021105:	68 6c 79 02 c0       	push   0xc002796c
c002110a:	e8 be 8c fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c002110f:	83 c4 10             	add    esp,0x10
c0021112:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0021119:	74 0f                	je     c002112a <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c002111b:	89 e8                	mov    eax,ebp
c002111d:	c1 e0 07             	shl    eax,0x7
c0021120:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0021124:	eb 24                	jmp    c002114a <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c0021126:	3c 1c                	cmp    al,0x1c
c0021128:	74 0c                	je     c0021136 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c002112a:	e4 60                	in     al,0x60
c002112c:	3c 5a                	cmp    al,0x5a
c002112e:	75 f6                	jne    c0021126 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c0021130:	eb 04                	jmp    c0021136 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0021132:	3c 1c                	cmp    al,0x1c
c0021134:	75 e5                	jne    c002111b <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0021136:	e4 60                	in     al,0x60
c0021138:	3c 5a                	cmp    al,0x5a
c002113a:	74 fa                	je     c0021136 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c002113c:	eb f4                	jmp    c0021132 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c002113e:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0021144:	0f ba e2 1e          	bt     edx,0x1e
c0021148:	72 28                	jb     c0021172 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c002114a:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0021150:	85 d6                	test   esi,edx
c0021152:	75 ea                	jne    c002113e <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0021154:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c002115b:	75 2f                	jne    c002118c <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c002115d:	89 e8                	mov    eax,ebp
c002115f:	c1 e0 07             	shl    eax,0x7
c0021162:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0021166:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002116c:	0f ba e0 1e          	bt     eax,0x1e
c0021170:	73 49                	jae    c00211bb <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0021172:	83 ec 0c             	sub    esp,0xc
c0021175:	68 7c 79 02 c0       	push   0xc002797c
c002117a:	e8 b2 3f ff ff       	call   c0015131 <Krnl::panic(char const*)>
c002117f:	83 c4 10             	add    esp,0x10
c0021182:	b8 01 00 00 00       	mov    eax,0x1
c0021187:	e9 c5 00 00 00       	jmp    c0021251 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c002118c:	83 ec 0c             	sub    esp,0xc
c002118f:	68 8d 79 02 c0       	push   0xc002798d
c0021194:	e8 34 8c fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0021199:	83 c4 10             	add    esp,0x10
c002119c:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c00211a3:	75 b8                	jne    c002115d <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c00211a5:	e4 60                	in     al,0x60
c00211a7:	3c 5a                	cmp    al,0x5a
c00211a9:	74 04                	je     c00211af <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00211ab:	3c 1c                	cmp    al,0x1c
c00211ad:	75 f6                	jne    c00211a5 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c00211af:	e4 60                	in     al,0x60
c00211b1:	3c 5a                	cmp    al,0x5a
c00211b3:	74 fa                	je     c00211af <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00211b5:	3c 1c                	cmp    al,0x1c
c00211b7:	74 f6                	je     c00211af <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00211b9:	eb a2                	jmp    c002115d <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c00211bb:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c00211c2:	74 3a                	je     c00211fe <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c00211c4:	83 ec 0c             	sub    esp,0xc
c00211c7:	68 9d 79 02 c0       	push   0xc002799d
c00211cc:	e8 fc 8b fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c00211d1:	83 c4 10             	add    esp,0x10
c00211d4:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c00211db:	74 0d                	je     c00211ea <SATA::access(unsigned long long, int, void*, bool)+0x588>
c00211dd:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00211e2:	75 31                	jne    c0021215 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c00211e4:	eb 1f                	jmp    c0021205 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c00211e6:	3c 1c                	cmp    al,0x1c
c00211e8:	74 0c                	je     c00211f6 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00211ea:	e4 60                	in     al,0x60
c00211ec:	3c 5a                	cmp    al,0x5a
c00211ee:	75 f6                	jne    c00211e6 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c00211f0:	eb 04                	jmp    c00211f6 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00211f2:	3c 1c                	cmp    al,0x1c
c00211f4:	75 e7                	jne    c00211dd <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c00211f6:	e4 60                	in     al,0x60
c00211f8:	3c 5a                	cmp    al,0x5a
c00211fa:	74 fa                	je     c00211f6 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00211fc:	eb f4                	jmp    c00211f2 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c00211fe:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0021203:	75 19                	jne    c002121e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0021205:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002120b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002120f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021213:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021215:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c002121c:	75 04                	jne    c0021222 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c002121e:	31 c0                	xor    eax,eax
c0021220:	eb 2f                	jmp    c0021251 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0021222:	83 ec 0c             	sub    esp,0xc
c0021225:	68 ad 79 02 c0       	push   0xc00279ad
c002122a:	e8 9e 8b fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c002122f:	83 c4 10             	add    esp,0x10
c0021232:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0021239:	75 e3                	jne    c002121e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c002123b:	e4 60                	in     al,0x60
c002123d:	3c 1c                	cmp    al,0x1c
c002123f:	74 04                	je     c0021245 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0021241:	3c 5a                	cmp    al,0x5a
c0021243:	75 f6                	jne    c002123b <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0021245:	e4 60                	in     al,0x60
c0021247:	3c 5a                	cmp    al,0x5a
c0021249:	74 fa                	je     c0021245 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002124b:	3c 1c                	cmp    al,0x1c
c002124d:	74 f6                	je     c0021245 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002124f:	eb cd                	jmp    c002121e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0021251:	83 c4 2c             	add    esp,0x2c
c0021254:	5b                   	pop    ebx
c0021255:	5e                   	pop    esi
c0021256:	5f                   	pop    edi
c0021257:	5d                   	pop    ebp
c0021258:	c3                   	ret    
c0021259:	90                   	nop

c002125a <SATA::read(unsigned long long, int, void*)>:
c002125a:	55                   	push   ebp
c002125b:	57                   	push   edi
c002125c:	56                   	push   esi
c002125d:	53                   	push   ebx
c002125e:	83 ec 0c             	sub    esp,0xc
c0021261:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021265:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021269:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002126d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021271:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0021278:	74 2d                	je     c00212a7 <SATA::read(unsigned long long, int, void*)+0x4d>
c002127a:	83 ec 0c             	sub    esp,0xc
c002127d:	68 bd 79 02 c0       	push   0xc00279bd
c0021282:	e8 46 8b fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0021287:	83 c4 10             	add    esp,0x10
c002128a:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0021291:	75 14                	jne    c00212a7 <SATA::read(unsigned long long, int, void*)+0x4d>
c0021293:	e4 60                	in     al,0x60
c0021295:	3c 1c                	cmp    al,0x1c
c0021297:	74 04                	je     c002129d <SATA::read(unsigned long long, int, void*)+0x43>
c0021299:	3c 5a                	cmp    al,0x5a
c002129b:	75 f6                	jne    c0021293 <SATA::read(unsigned long long, int, void*)+0x39>
c002129d:	e4 60                	in     al,0x60
c002129f:	3c 5a                	cmp    al,0x5a
c00212a1:	74 fa                	je     c002129d <SATA::read(unsigned long long, int, void*)+0x43>
c00212a3:	3c 1c                	cmp    al,0x1c
c00212a5:	74 f6                	je     c002129d <SATA::read(unsigned long long, int, void*)+0x43>
c00212a7:	8d 53 ff             	lea    edx,[ebx-0x1]
c00212aa:	b8 04 00 00 00       	mov    eax,0x4
c00212af:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00212b5:	0f 87 96 00 00 00    	ja     c0021351 <SATA::read(unsigned long long, int, void*)+0xf7>
c00212bb:	b8 06 00 00 00       	mov    eax,0x6
c00212c0:	85 ed                	test   ebp,ebp
c00212c2:	0f 84 89 00 00 00    	je     c0021351 <SATA::read(unsigned long long, int, void*)+0xf7>
c00212c8:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c00212cf:	74 2d                	je     c00212fe <SATA::read(unsigned long long, int, void*)+0xa4>
c00212d1:	83 ec 0c             	sub    esp,0xc
c00212d4:	68 ca 79 02 c0       	push   0xc00279ca
c00212d9:	e8 ef 8a fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c00212de:	83 c4 10             	add    esp,0x10
c00212e1:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c00212e8:	75 14                	jne    c00212fe <SATA::read(unsigned long long, int, void*)+0xa4>
c00212ea:	e4 60                	in     al,0x60
c00212ec:	3c 5a                	cmp    al,0x5a
c00212ee:	74 04                	je     c00212f4 <SATA::read(unsigned long long, int, void*)+0x9a>
c00212f0:	3c 1c                	cmp    al,0x1c
c00212f2:	75 f6                	jne    c00212ea <SATA::read(unsigned long long, int, void*)+0x90>
c00212f4:	e4 60                	in     al,0x60
c00212f6:	3c 5a                	cmp    al,0x5a
c00212f8:	74 fa                	je     c00212f4 <SATA::read(unsigned long long, int, void*)+0x9a>
c00212fa:	3c 1c                	cmp    al,0x1c
c00212fc:	74 f6                	je     c00212f4 <SATA::read(unsigned long long, int, void*)+0x9a>
c00212fe:	50                   	push   eax
c00212ff:	50                   	push   eax
c0021300:	6a 00                	push   0x0
c0021302:	55                   	push   ebp
c0021303:	53                   	push   ebx
c0021304:	57                   	push   edi
c0021305:	56                   	push   esi
c0021306:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002130a:	e8 53 f9 ff ff       	call   c0020c62 <SATA::access(unsigned long long, int, void*, bool)>
c002130f:	83 c4 20             	add    esp,0x20
c0021312:	89 c3                	mov    ebx,eax
c0021314:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c002131b:	74 2d                	je     c002134a <SATA::read(unsigned long long, int, void*)+0xf0>
c002131d:	83 ec 0c             	sub    esp,0xc
c0021320:	68 d7 79 02 c0       	push   0xc00279d7
c0021325:	e8 a3 8a fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c002132a:	83 c4 10             	add    esp,0x10
c002132d:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0021334:	75 14                	jne    c002134a <SATA::read(unsigned long long, int, void*)+0xf0>
c0021336:	e4 60                	in     al,0x60
c0021338:	3c 5a                	cmp    al,0x5a
c002133a:	74 04                	je     c0021340 <SATA::read(unsigned long long, int, void*)+0xe6>
c002133c:	3c 1c                	cmp    al,0x1c
c002133e:	75 f6                	jne    c0021336 <SATA::read(unsigned long long, int, void*)+0xdc>
c0021340:	e4 60                	in     al,0x60
c0021342:	3c 5a                	cmp    al,0x5a
c0021344:	74 fa                	je     c0021340 <SATA::read(unsigned long long, int, void*)+0xe6>
c0021346:	3c 1c                	cmp    al,0x1c
c0021348:	74 f6                	je     c0021340 <SATA::read(unsigned long long, int, void*)+0xe6>
c002134a:	31 c0                	xor    eax,eax
c002134c:	85 db                	test   ebx,ebx
c002134e:	0f 95 c0             	setne  al
c0021351:	83 c4 0c             	add    esp,0xc
c0021354:	5b                   	pop    ebx
c0021355:	5e                   	pop    esi
c0021356:	5f                   	pop    edi
c0021357:	5d                   	pop    ebp
c0021358:	c3                   	ret    
c0021359:	90                   	nop

c002135a <SATA::write(unsigned long long, int, void*)>:
c002135a:	55                   	push   ebp
c002135b:	57                   	push   edi
c002135c:	56                   	push   esi
c002135d:	53                   	push   ebx
c002135e:	83 ec 1c             	sub    esp,0x1c
c0021361:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021365:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021369:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002136d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021371:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0021378:	74 2d                	je     c00213a7 <SATA::write(unsigned long long, int, void*)+0x4d>
c002137a:	83 ec 0c             	sub    esp,0xc
c002137d:	68 e4 79 02 c0       	push   0xc00279e4
c0021382:	e8 46 8a fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0021387:	83 c4 10             	add    esp,0x10
c002138a:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0021391:	75 14                	jne    c00213a7 <SATA::write(unsigned long long, int, void*)+0x4d>
c0021393:	e4 60                	in     al,0x60
c0021395:	3c 1c                	cmp    al,0x1c
c0021397:	74 04                	je     c002139d <SATA::write(unsigned long long, int, void*)+0x43>
c0021399:	3c 5a                	cmp    al,0x5a
c002139b:	75 f6                	jne    c0021393 <SATA::write(unsigned long long, int, void*)+0x39>
c002139d:	e4 60                	in     al,0x60
c002139f:	3c 5a                	cmp    al,0x5a
c00213a1:	74 fa                	je     c002139d <SATA::write(unsigned long long, int, void*)+0x43>
c00213a3:	3c 1c                	cmp    al,0x1c
c00213a5:	74 f6                	je     c002139d <SATA::write(unsigned long long, int, void*)+0x43>
c00213a7:	8d 55 ff             	lea    edx,[ebp-0x1]
c00213aa:	b8 04 00 00 00       	mov    eax,0x4
c00213af:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00213b5:	0f 87 bd 00 00 00    	ja     c0021478 <SATA::write(unsigned long long, int, void*)+0x11e>
c00213bb:	b8 06 00 00 00       	mov    eax,0x6
c00213c0:	85 db                	test   ebx,ebx
c00213c2:	0f 84 b0 00 00 00    	je     c0021478 <SATA::write(unsigned long long, int, void*)+0x11e>
c00213c8:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c00213cf:	74 2d                	je     c00213fe <SATA::write(unsigned long long, int, void*)+0xa4>
c00213d1:	83 ec 0c             	sub    esp,0xc
c00213d4:	68 f2 79 02 c0       	push   0xc00279f2
c00213d9:	e8 ef 89 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c00213de:	83 c4 10             	add    esp,0x10
c00213e1:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c00213e8:	75 14                	jne    c00213fe <SATA::write(unsigned long long, int, void*)+0xa4>
c00213ea:	e4 60                	in     al,0x60
c00213ec:	3c 1c                	cmp    al,0x1c
c00213ee:	74 04                	je     c00213f4 <SATA::write(unsigned long long, int, void*)+0x9a>
c00213f0:	3c 5a                	cmp    al,0x5a
c00213f2:	75 f6                	jne    c00213ea <SATA::write(unsigned long long, int, void*)+0x90>
c00213f4:	e4 60                	in     al,0x60
c00213f6:	3c 5a                	cmp    al,0x5a
c00213f8:	74 fa                	je     c00213f4 <SATA::write(unsigned long long, int, void*)+0x9a>
c00213fa:	3c 1c                	cmp    al,0x1c
c00213fc:	74 f6                	je     c00213f4 <SATA::write(unsigned long long, int, void*)+0x9a>
c00213fe:	c1 e5 09             	shl    ebp,0x9
c0021401:	01 dd                	add    ebp,ebx
c0021403:	89 f0                	mov    eax,esi
c0021405:	89 fa                	mov    edx,edi
c0021407:	83 c0 01             	add    eax,0x1
c002140a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002140e:	83 d2 00             	adc    edx,0x0
c0021411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021415:	50                   	push   eax
c0021416:	50                   	push   eax
c0021417:	6a 01                	push   0x1
c0021419:	53                   	push   ebx
c002141a:	81 c3 00 02 00 00    	add    ebx,0x200
c0021420:	6a 01                	push   0x1
c0021422:	57                   	push   edi
c0021423:	56                   	push   esi
c0021424:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021428:	e8 35 f8 ff ff       	call   c0020c62 <SATA::access(unsigned long long, int, void*, bool)>
c002142d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021431:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0021435:	83 c4 20             	add    esp,0x20
c0021438:	39 dd                	cmp    ebp,ebx
c002143a:	75 c7                	jne    c0021403 <SATA::write(unsigned long long, int, void*)+0xa9>
c002143c:	f6 05 a1 8c 02 c0 08 	test   BYTE PTR ds:0xc0028ca1,0x8
c0021443:	75 04                	jne    c0021449 <SATA::write(unsigned long long, int, void*)+0xef>
c0021445:	31 c0                	xor    eax,eax
c0021447:	eb 2f                	jmp    c0021478 <SATA::write(unsigned long long, int, void*)+0x11e>
c0021449:	83 ec 0c             	sub    esp,0xc
c002144c:	68 00 7a 02 c0       	push   0xc0027a00
c0021451:	e8 77 89 fe ff       	call   c0009dcd <Krnl::setBootMessage(char const*)>
c0021456:	83 c4 10             	add    esp,0x10
c0021459:	f6 05 a0 8c 02 c0 80 	test   BYTE PTR ds:0xc0028ca0,0x80
c0021460:	75 e3                	jne    c0021445 <SATA::write(unsigned long long, int, void*)+0xeb>
c0021462:	e4 60                	in     al,0x60
c0021464:	3c 5a                	cmp    al,0x5a
c0021466:	74 04                	je     c002146c <SATA::write(unsigned long long, int, void*)+0x112>
c0021468:	3c 1c                	cmp    al,0x1c
c002146a:	75 f6                	jne    c0021462 <SATA::write(unsigned long long, int, void*)+0x108>
c002146c:	e4 60                	in     al,0x60
c002146e:	3c 5a                	cmp    al,0x5a
c0021470:	74 fa                	je     c002146c <SATA::write(unsigned long long, int, void*)+0x112>
c0021472:	3c 1c                	cmp    al,0x1c
c0021474:	74 f6                	je     c002146c <SATA::write(unsigned long long, int, void*)+0x112>
c0021476:	eb cd                	jmp    c0021445 <SATA::write(unsigned long long, int, void*)+0xeb>
c0021478:	83 c4 1c             	add    esp,0x1c
c002147b:	5b                   	pop    ebx
c002147c:	5e                   	pop    esi
c002147d:	5f                   	pop    edi
c002147e:	5d                   	pop    ebp
c002147f:	c3                   	ret    

c0021480 <SATAPI::write(unsigned long long, int, void*)>:
c0021480:	b8 03 00 00 00       	mov    eax,0x3
c0021485:	c3                   	ret    

c0021486 <SATAPI::close(int, int, void*)>:
c0021486:	83 ec 0c             	sub    esp,0xc
c0021489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002148d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021493:	85 c0                	test   eax,eax
c0021495:	74 0c                	je     c00214a3 <SATAPI::close(int, int, void*)+0x1d>
c0021497:	83 ec 0c             	sub    esp,0xc
c002149a:	8b 10                	mov    edx,DWORD PTR [eax]
c002149c:	50                   	push   eax
c002149d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00214a0:	83 c4 10             	add    esp,0x10
c00214a3:	31 c0                	xor    eax,eax
c00214a5:	83 c4 0c             	add    esp,0xc
c00214a8:	c3                   	ret    
c00214a9:	90                   	nop

c00214aa <SATAPI::SATAPI()>:
c00214aa:	83 ec 0c             	sub    esp,0xc
c00214ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214b1:	83 ec 04             	sub    esp,0x4
c00214b4:	68 00 08 00 00       	push   0x800
c00214b9:	68 48 7a 02 c0       	push   0xc0027a48
c00214be:	50                   	push   eax
c00214bf:	e8 46 d5 fe ff       	call   c000ea0a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00214c4:	83 c4 10             	add    esp,0x10
c00214c7:	ba 84 7b 02 c0       	mov    edx,0xc0027b84
c00214cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214d0:	89 10                	mov    DWORD PTR [eax],edx
c00214d2:	90                   	nop
c00214d3:	83 c4 0c             	add    esp,0xc
c00214d6:	c3                   	ret    
c00214d7:	90                   	nop

c00214d8 <SATAPI::diskRemoved()>:
c00214d8:	53                   	push   ebx
c00214d9:	83 ec 14             	sub    esp,0x14
c00214dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00214e0:	68 54 7a 02 c0       	push   0xc0027a54
c00214e5:	e8 75 bb fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00214ea:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00214f1:	c7 04 24 a8 77 02 c0 	mov    DWORD PTR [esp],0xc00277a8
c00214f8:	e8 62 bb fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00214fd:	58                   	pop    eax
c00214fe:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0021504:	e8 4f f4 fe ff       	call   c0010958 <LogicalDisk::unmount()>
c0021509:	c7 04 24 b7 77 02 c0 	mov    DWORD PTR [esp],0xc00277b7
c0021510:	e8 4a bb fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0021515:	5a                   	pop    edx
c0021516:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002151c:	e8 3f fe fe ff       	call   c0011360 <VCache::writeWriteBuffer()>
c0021521:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0021527:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002152b:	83 c4 18             	add    esp,0x18
c002152e:	5b                   	pop    ebx
c002152f:	e9 1c fe fe ff       	jmp    c0011350 <VCache::invalidateReadBuffer()>

c0021534 <SATAPI::diskInserted()>:
c0021534:	83 ec 18             	sub    esp,0x18
c0021537:	68 6b 7a 02 c0       	push   0xc0027a6b
c002153c:	e8 1e bb fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0021541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021545:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002154c:	83 c4 1c             	add    esp,0x1c
c002154f:	c3                   	ret    

c0021550 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0021550:	55                   	push   ebp
c0021551:	57                   	push   edi
c0021552:	56                   	push   esi
c0021553:	53                   	push   ebx
c0021554:	83 ec 38             	sub    esp,0x38
c0021557:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c002155b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c002155f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0021563:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021567:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002156b:	68 83 7a 02 c0       	push   0xc0027a83
c0021570:	e8 ea ba fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0021575:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002157b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021581:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021585:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002158b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002158f:	c1 e0 07             	shl    eax,0x7
c0021592:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0021596:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002159a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00215a4:	5a                   	pop    edx
c00215a5:	59                   	pop    ecx
c00215a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00215aa:	8d 58 02             	lea    ebx,[eax+0x2]
c00215ad:	c1 e3 07             	shl    ebx,0x7
c00215b0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00215b4:	53                   	push   ebx
c00215b5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00215bb:	e8 c2 e3 ff ff       	call   c001f982 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00215c0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00215c4:	83 c4 10             	add    esp,0x10
c00215c7:	b8 01 00 00 00       	mov    eax,0x1
c00215cc:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00215d1:	0f 84 04 02 00 00    	je     c00217db <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c00215d7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00215dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00215df:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00215e5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00215eb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00215ef:	c1 e1 05             	shl    ecx,0x5
c00215f2:	01 c8                	add    eax,ecx
c00215f4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00215f6:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00215fc:	81 c9 25 00 01 00    	or     ecx,0x10025
c0021602:	89 08                	mov    DWORD PTR [eax],ecx
c0021604:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002160a:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0021610:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0021616:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0021619:	8d 7b 40             	lea    edi,[ebx+0x40]
c002161c:	50                   	push   eax
c002161d:	68 90 00 00 00       	push   0x90
c0021622:	6a 00                	push   0x0
c0021624:	53                   	push   ebx
c0021625:	e8 6a f0 fd ff       	call   c0000694 <memset>
c002162a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002162e:	b9 0c 00 00 00       	mov    ecx,0xc
c0021633:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021635:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002163b:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002163f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0021645:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0021649:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002164d:	48                   	dec    eax
c002164e:	25 ff ff 3f 00       	and    eax,0x3fffff
c0021653:	89 c1                	mov    ecx,eax
c0021655:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002165b:	25 00 00 c0 ff       	and    eax,0xffc00000
c0021660:	09 c8                	or     eax,ecx
c0021662:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0021668:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002166b:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0021672:	66 25 00 7f          	and    ax,0x7f00
c0021676:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002167a:	66 0d 27 80          	or     ax,0x8027
c002167e:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0021682:	66 89 03             	mov    WORD PTR [ebx],ax
c0021685:	89 d0                	mov    eax,edx
c0021687:	c1 ea 18             	shr    edx,0x18
c002168a:	c1 e8 10             	shr    eax,0x10
c002168d:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0021690:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0021693:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0021697:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002169a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002169e:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00216a1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00216a5:	83 c4 10             	add    esp,0x10
c00216a8:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00216ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216b0:	31 c0                	xor    eax,eax
c00216b2:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00216b8:	80 e1 88             	and    cl,0x88
c00216bb:	74 0a                	je     c00216c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c00216bd:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00216c2:	74 0a                	je     c00216ce <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c00216c4:	40                   	inc    eax
c00216c5:	eb eb                	jmp    c00216b2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c00216c7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00216cc:	75 0f                	jne    c00216dd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18d>
c00216ce:	83 ec 0c             	sub    esp,0xc
c00216d1:	68 4e 79 02 c0       	push   0xc002794e
c00216d6:	e8 56 3a ff ff       	call   c0015131 <Krnl::panic(char const*)>
c00216db:	eb 48                	jmp    c0021725 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d5>
c00216dd:	be 01 00 00 00       	mov    esi,0x1
c00216e2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00216e6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00216ea:	d3 e6                	shl    esi,cl
c00216ec:	c1 e7 07             	shl    edi,0x7
c00216ef:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c00216f5:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c00216fa:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00216fe:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0021704:	85 c6                	test   esi,eax
c0021706:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002170c:	0f 84 96 00 00 00    	je     c00217a8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x258>
c0021712:	0f ba e0 1e          	bt     eax,0x1e
c0021716:	73 1a                	jae    c0021732 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e2>
c0021718:	83 ec 0c             	sub    esp,0xc
c002171b:	68 9d 7a 02 c0       	push   0xc0027a9d
c0021720:	e8 3a b9 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0021725:	83 c4 10             	add    esp,0x10
c0021728:	b8 01 00 00 00       	mov    eax,0x1
c002172d:	e9 a9 00 00 00       	jmp    c00217db <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0021732:	83 fb 0d             	cmp    ebx,0xd
c0021735:	77 12                	ja     c0021749 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0021737:	83 ec 0c             	sub    esp,0xc
c002173a:	68 c8 00 00 00       	push   0xc8
c002173f:	e8 54 7b ff ff       	call   c0019298 <milliTenthSleep(unsigned int)>
c0021744:	83 c4 10             	add    esp,0x10
c0021747:	eb 2a                	jmp    c0021773 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0021749:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c002174f:	83 f8 0d             	cmp    eax,0xd
c0021752:	77 0a                	ja     c002175e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20e>
c0021754:	83 ec 0c             	sub    esp,0xc
c0021757:	68 58 02 00 00       	push   0x258
c002175c:	eb 28                	jmp    c0021786 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c002175e:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0021764:	83 f8 0d             	cmp    eax,0xd
c0021767:	77 0a                	ja     c0021773 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0021769:	83 ec 0c             	sub    esp,0xc
c002176c:	68 dc 05 00 00       	push   0x5dc
c0021771:	eb 13                	jmp    c0021786 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c0021773:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0021779:	83 f8 0d             	cmp    eax,0xd
c002177c:	77 10                	ja     c002178e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23e>
c002177e:	83 ec 0c             	sub    esp,0xc
c0021781:	68 c4 09 00 00       	push   0x9c4
c0021786:	e8 0d 7b ff ff       	call   c0019298 <milliTenthSleep(unsigned int)>
c002178b:	83 c4 10             	add    esp,0x10
c002178e:	43                   	inc    ebx
c002178f:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0021795:	0f 85 63 ff ff ff    	jne    c00216fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ae>
c002179b:	83 ec 0c             	sub    esp,0xc
c002179e:	68 b0 7a 02 c0       	push   0xc0027ab0
c00217a3:	e9 78 ff ff ff       	jmp    c0021720 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c00217a8:	0f ba e0 1e          	bt     eax,0x1e
c00217ac:	73 0d                	jae    c00217bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26b>
c00217ae:	83 ec 0c             	sub    esp,0xc
c00217b1:	68 c4 7a 02 c0       	push   0xc0027ac4
c00217b6:	e9 65 ff ff ff       	jmp    c0021720 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c00217bb:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c00217c0:	74 17                	je     c00217d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c00217c2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00217c7:	74 10                	je     c00217d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c00217c9:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c00217cf:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00217d3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00217d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00217d9:	31 c0                	xor    eax,eax
c00217db:	83 c4 2c             	add    esp,0x2c
c00217de:	5b                   	pop    ebx
c00217df:	5e                   	pop    esi
c00217e0:	5f                   	pop    edi
c00217e1:	5d                   	pop    ebp
c00217e2:	c3                   	ret    
c00217e3:	90                   	nop

c00217e4 <SATAPI::eject()>:
c00217e4:	57                   	push   edi
c00217e5:	b9 03 00 00 00       	mov    ecx,0x3
c00217ea:	53                   	push   ebx
c00217eb:	83 ec 14             	sub    esp,0x14
c00217ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00217f2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00217f6:	fc                   	cld    
c00217f7:	31 c0                	xor    eax,eax
c00217f9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00217fb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0021800:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0021805:	50                   	push   eax
c0021806:	6a 00                	push   0x0
c0021808:	6a 00                	push   0x0
c002180a:	6a 00                	push   0x0
c002180c:	6a 00                	push   0x0
c002180e:	6a 02                	push   0x2
c0021810:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021814:	50                   	push   eax
c0021815:	53                   	push   ebx
c0021816:	e8 35 fd ff ff       	call   c0021550 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002181b:	83 c4 20             	add    esp,0x20
c002181e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021825:	74 0c                	je     c0021833 <SATAPI::eject()+0x4f>
c0021827:	83 ec 0c             	sub    esp,0xc
c002182a:	53                   	push   ebx
c002182b:	e8 a8 fc ff ff       	call   c00214d8 <SATAPI::diskRemoved()>
c0021830:	83 c4 10             	add    esp,0x10
c0021833:	83 c4 14             	add    esp,0x14
c0021836:	31 c0                	xor    eax,eax
c0021838:	5b                   	pop    ebx
c0021839:	5f                   	pop    edi
c002183a:	c3                   	ret    
c002183b:	90                   	nop

c002183c <SATAPI::detectMedia()>:
c002183c:	56                   	push   esi
c002183d:	53                   	push   ebx
c002183e:	83 ec 30             	sub    esp,0x30
c0021841:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0021845:	68 d9 7a 02 c0       	push   0xc0027ad9
c002184a:	e8 10 b8 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c002184f:	83 c4 0c             	add    esp,0xc
c0021852:	6a 0c                	push   0xc
c0021854:	6a 00                	push   0x0
c0021856:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002185a:	56                   	push   esi
c002185b:	e8 34 ee fd ff       	call   c0000694 <memset>
c0021860:	83 c4 0c             	add    esp,0xc
c0021863:	6a 00                	push   0x0
c0021865:	6a 00                	push   0x0
c0021867:	6a 00                	push   0x0
c0021869:	6a 00                	push   0x0
c002186b:	6a 00                	push   0x0
c002186d:	56                   	push   esi
c002186e:	53                   	push   ebx
c002186f:	e8 dc fc ff ff       	call   c0021550 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021874:	83 c4 20             	add    esp,0x20
c0021877:	48                   	dec    eax
c0021878:	75 27                	jne    c00218a1 <SATAPI::detectMedia()+0x65>
c002187a:	83 ec 0c             	sub    esp,0xc
c002187d:	68 ed 7a 02 c0       	push   0xc0027aed
c0021882:	e8 d8 b7 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0021887:	83 c4 10             	add    esp,0x10
c002188a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021891:	74 0e                	je     c00218a1 <SATAPI::detectMedia()+0x65>
c0021893:	83 ec 0c             	sub    esp,0xc
c0021896:	53                   	push   ebx
c0021897:	e8 3c fc ff ff       	call   c00214d8 <SATAPI::diskRemoved()>
c002189c:	e9 d1 00 00 00       	jmp    c0021972 <SATAPI::detectMedia()+0x136>
c00218a1:	50                   	push   eax
c00218a2:	6a 0c                	push   0xc
c00218a4:	6a 00                	push   0x0
c00218a6:	56                   	push   esi
c00218a7:	e8 e8 ed fd ff       	call   c0000694 <memset>
c00218ac:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00218b1:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00218b6:	83 c4 0c             	add    esp,0xc
c00218b9:	6a 01                	push   0x1
c00218bb:	8d 44 24 16          	lea    eax,[esp+0x16]
c00218bf:	50                   	push   eax
c00218c0:	6a 00                	push   0x0
c00218c2:	6a 00                	push   0x0
c00218c4:	6a 12                	push   0x12
c00218c6:	56                   	push   esi
c00218c7:	53                   	push   ebx
c00218c8:	e8 83 fc ff ff       	call   c0021550 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00218cd:	83 c4 20             	add    esp,0x20
c00218d0:	48                   	dec    eax
c00218d1:	75 19                	jne    c00218ec <SATAPI::detectMedia()+0xb0>
c00218d3:	83 ec 0c             	sub    esp,0xc
c00218d6:	68 f7 7a 02 c0       	push   0xc0027af7
c00218db:	e8 7f b7 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c00218e0:	83 c4 10             	add    esp,0x10
c00218e3:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00218ea:	75 a7                	jne    c0021893 <SATAPI::detectMedia()+0x57>
c00218ec:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c00218f0:	83 e0 7f             	and    eax,0x7f
c00218f3:	3c 70                	cmp    al,0x70
c00218f5:	74 25                	je     c002191c <SATAPI::detectMedia()+0xe0>
c00218f7:	83 ec 0c             	sub    esp,0xc
c00218fa:	68 01 7b 02 c0       	push   0xc0027b01
c00218ff:	e8 5b b7 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0021904:	83 c4 10             	add    esp,0x10
c0021907:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002190e:	75 0c                	jne    c002191c <SATAPI::detectMedia()+0xe0>
c0021910:	83 ec 0c             	sub    esp,0xc
c0021913:	53                   	push   ebx
c0021914:	e8 1b fc ff ff       	call   c0021534 <SATAPI::diskInserted()>
c0021919:	83 c4 10             	add    esp,0x10
c002191c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021920:	83 e0 0f             	and    eax,0xf
c0021923:	3c 02                	cmp    al,0x2
c0021925:	75 25                	jne    c002194c <SATAPI::detectMedia()+0x110>
c0021927:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002192c:	75 47                	jne    c0021975 <SATAPI::detectMedia()+0x139>
c002192e:	83 ec 0c             	sub    esp,0xc
c0021931:	68 0a 7b 02 c0       	push   0xc0027b0a
c0021936:	e8 24 b7 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c002193b:	83 c4 10             	add    esp,0x10
c002193e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021945:	74 2e                	je     c0021975 <SATAPI::detectMedia()+0x139>
c0021947:	e9 47 ff ff ff       	jmp    c0021893 <SATAPI::detectMedia()+0x57>
c002194c:	84 c0                	test   al,al
c002194e:	75 25                	jne    c0021975 <SATAPI::detectMedia()+0x139>
c0021950:	83 ec 0c             	sub    esp,0xc
c0021953:	68 13 7b 02 c0       	push   0xc0027b13
c0021958:	e8 02 b7 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c002195d:	83 c4 10             	add    esp,0x10
c0021960:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021967:	75 0c                	jne    c0021975 <SATAPI::detectMedia()+0x139>
c0021969:	83 ec 0c             	sub    esp,0xc
c002196c:	53                   	push   ebx
c002196d:	e8 c2 fb ff ff       	call   c0021534 <SATAPI::diskInserted()>
c0021972:	83 c4 10             	add    esp,0x10
c0021975:	83 c4 24             	add    esp,0x24
c0021978:	5b                   	pop    ebx
c0021979:	5e                   	pop    esi
c002197a:	c3                   	ret    
c002197b:	90                   	nop

c002197c <SATAPI::open(int, int, void*)>:
c002197c:	56                   	push   esi
c002197d:	53                   	push   ebx
c002197e:	51                   	push   ecx
c002197f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021983:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021987:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0021991:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0021997:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00219a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00219a5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00219af:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00219b5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00219bc:	e8 69 8a fe ff       	call   c000a42a <Phys::allocatePage()>
c00219c1:	89 c6                	mov    esi,eax
c00219c3:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00219c9:	81 c6 00 10 00 00    	add    esi,0x1000
c00219cf:	e8 56 8a fe ff       	call   c000a42a <Phys::allocatePage()>
c00219d4:	39 c6                	cmp    esi,eax
c00219d6:	74 10                	je     c00219e8 <SATAPI::open(int, int, void*)+0x6c>
c00219d8:	83 ec 0c             	sub    esp,0xc
c00219db:	68 1d 7b 02 c0       	push   0xc0027b1d
c00219e0:	e8 4c 37 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c00219e5:	83 c4 10             	add    esp,0x10
c00219e8:	83 ec 0c             	sub    esp,0xc
c00219eb:	6a 02                	push   0x2
c00219ed:	e8 47 a3 fe ff       	call   c000bd39 <Virt::allocateKernelVirtualPages(int)>
c00219f2:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00219f8:	6a 03                	push   0x3
c00219fa:	50                   	push   eax
c00219fb:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0021a01:	ff 35 b0 8d 02 c0    	push   DWORD PTR ds:0xc0028db0
c0021a07:	e8 d4 a9 fe ff       	call   c000c3e0 <VAS::mapPage(unsigned long, unsigned long, int)>
c0021a0c:	83 c4 14             	add    esp,0x14
c0021a0f:	68 74 01 00 00       	push   0x174
c0021a14:	e8 5a 83 fe ff       	call   c0009d73 <malloc>
c0021a19:	83 c4 0c             	add    esp,0xc
c0021a1c:	89 c6                	mov    esi,eax
c0021a1e:	6a 00                	push   0x0
c0021a20:	68 ff ff ff 7f       	push   0x7fffffff
c0021a25:	6a 00                	push   0x0
c0021a27:	6a 00                	push   0x0
c0021a29:	53                   	push   ebx
c0021a2a:	68 33 7b 02 c0       	push   0xc0027b33
c0021a2f:	50                   	push   eax
c0021a30:	e8 2f ed fe ff       	call   c0010764 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021a35:	83 c4 14             	add    esp,0x14
c0021a38:	56                   	push   esi
c0021a39:	e8 dc ed fe ff       	call   c001081a <LogicalDisk::assignDriveLetter()>
c0021a3e:	5a                   	pop    edx
c0021a3f:	0f be c0             	movsx  eax,al
c0021a42:	59                   	pop    ecx
c0021a43:	50                   	push   eax
c0021a44:	68 c5 77 02 c0       	push   0xc00277c5
c0021a49:	e8 11 b6 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0021a4e:	58                   	pop    eax
c0021a4f:	5a                   	pop    edx
c0021a50:	56                   	push   esi
c0021a51:	53                   	push   ebx
c0021a52:	e8 7b cb fe ff       	call   c000e5d2 <Device::addChild(Device*)>
c0021a57:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c0021a5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021a60:	e8 0d d0 fe ff       	call   c000ea72 <PhysicalDisk::startCache()>
c0021a65:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0021a6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021a6f:	e8 c8 fd ff ff       	call   c002183c <SATAPI::detectMedia()>
c0021a74:	83 c4 14             	add    esp,0x14
c0021a77:	31 c0                	xor    eax,eax
c0021a79:	5b                   	pop    ebx
c0021a7a:	5e                   	pop    esi
c0021a7b:	c3                   	ret    

c0021a7c <SATAPI::read(unsigned long long, int, void*)>:
c0021a7c:	55                   	push   ebp
c0021a7d:	57                   	push   edi
c0021a7e:	56                   	push   esi
c0021a7f:	53                   	push   ebx
c0021a80:	83 ec 48             	sub    esp,0x48
c0021a83:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0021a87:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0021a8b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0021a8f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0021a93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021a97:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021a9b:	68 41 7b 02 c0       	push   0xc0027b41
c0021aa0:	e8 ba b5 fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0021aa5:	83 c4 10             	add    esp,0x10
c0021aa8:	83 fb 04             	cmp    ebx,0x4
c0021aab:	7e 10                	jle    c0021abd <SATAPI::read(unsigned long long, int, void*)+0x41>
c0021aad:	83 ec 0c             	sub    esp,0xc
c0021ab0:	68 52 7b 02 c0       	push   0xc0027b52
c0021ab5:	e8 77 36 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0021aba:	83 c4 10             	add    esp,0x10
c0021abd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0021ac1:	31 ed                	xor    ebp,ebp
c0021ac3:	b9 03 00 00 00       	mov    ecx,0x3
c0021ac8:	fc                   	cld    
c0021ac9:	89 e8                	mov    eax,ebp
c0021acb:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021acd:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c0021ad2:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0021ad7:	50                   	push   eax
c0021ad8:	6a 00                	push   0x0
c0021ada:	6a 00                	push   0x0
c0021adc:	6a 00                	push   0x0
c0021ade:	6a 00                	push   0x0
c0021ae0:	6a 02                	push   0x2
c0021ae2:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021ae6:	50                   	push   eax
c0021ae7:	56                   	push   esi
c0021ae8:	e8 63 fa ff ff       	call   c0021550 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021aed:	8d 7c 24 44          	lea    edi,[esp+0x44]
c0021af1:	89 e8                	mov    eax,ebp
c0021af3:	b9 03 00 00 00       	mov    ecx,0x3
c0021af8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021afa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021afe:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c0021b02:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0021b07:	86 e0                	xchg   al,ah
c0021b09:	c1 c0 10             	rol    eax,0x10
c0021b0c:	86 e0                	xchg   al,ah
c0021b0e:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c0021b12:	83 c4 1c             	add    esp,0x1c
c0021b15:	53                   	push   ebx
c0021b16:	c1 e3 0b             	shl    ebx,0xb
c0021b19:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0021b1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021b21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021b25:	53                   	push   ebx
c0021b26:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0021b2a:	50                   	push   eax
c0021b2b:	56                   	push   esi
c0021b2c:	e8 1f fa ff ff       	call   c0021550 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021b31:	83 c4 20             	add    esp,0x20
c0021b34:	85 c0                	test   eax,eax
c0021b36:	74 14                	je     c0021b4c <SATAPI::read(unsigned long long, int, void*)+0xd0>
c0021b38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b3c:	83 ec 0c             	sub    esp,0xc
c0021b3f:	56                   	push   esi
c0021b40:	e8 f7 fc ff ff       	call   c002183c <SATAPI::detectMedia()>
c0021b45:	83 c4 10             	add    esp,0x10
c0021b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b4c:	83 c4 3c             	add    esp,0x3c
c0021b4f:	5b                   	pop    ebx
c0021b50:	5e                   	pop    esi
c0021b51:	5f                   	pop    edi
c0021b52:	5d                   	pop    ebp
c0021b53:	c3                   	ret    

c0021b54 <AVX::open(int, int, void*)>:
c0021b54:	83 ec 0c             	sub    esp,0xc
c0021b57:	e8 70 11 00 00       	call   c0022ccc <avxInit>
c0021b5c:	b8 00 00 00 00       	mov    eax,0x0
c0021b61:	83 c4 0c             	add    esp,0xc
c0021b64:	c3                   	ret    
c0021b65:	90                   	nop
c0021b66:	66 90                	xchg   ax,ax

c0021b68 <AVX::close(int, int, void*)>:
c0021b68:	83 ec 0c             	sub    esp,0xc
c0021b6b:	e8 7e 11 00 00       	call   c0022cee <avxClose>
c0021b70:	b8 00 00 00 00       	mov    eax,0x0
c0021b75:	83 c4 0c             	add    esp,0xc
c0021b78:	c3                   	ret    
c0021b79:	90                   	nop
c0021b7a:	66 90                	xchg   ax,ax

c0021b7c <AVX::available()>:
c0021b7c:	83 ec 0c             	sub    esp,0xc
c0021b7f:	e8 fc 10 00 00       	call   c0022c80 <avxDetect>
c0021b84:	85 c0                	test   eax,eax
c0021b86:	0f 95 c0             	setne  al
c0021b89:	83 c4 0c             	add    esp,0xc
c0021b8c:	c3                   	ret    
c0021b8d:	90                   	nop
c0021b8e:	66 90                	xchg   ax,ax

c0021b90 <AVX::save(void*)>:
c0021b90:	83 ec 0c             	sub    esp,0xc
c0021b93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b97:	83 ec 0c             	sub    esp,0xc
c0021b9a:	50                   	push   eax
c0021b9b:	e8 0a 11 00 00       	call   c0022caa <avxSave>
c0021ba0:	83 c4 10             	add    esp,0x10
c0021ba3:	90                   	nop
c0021ba4:	83 c4 0c             	add    esp,0xc
c0021ba7:	c3                   	ret    

c0021ba8 <AVX::load(void*)>:
c0021ba8:	83 ec 0c             	sub    esp,0xc
c0021bab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021baf:	83 ec 0c             	sub    esp,0xc
c0021bb2:	50                   	push   eax
c0021bb3:	e8 03 11 00 00       	call   c0022cbb <avxLoad>
c0021bb8:	83 c4 10             	add    esp,0x10
c0021bbb:	90                   	nop
c0021bbc:	83 c4 0c             	add    esp,0xc
c0021bbf:	c3                   	ret    

c0021bc0 <AVX::AVX()>:
c0021bc0:	83 ec 0c             	sub    esp,0xc
c0021bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bc7:	83 ec 08             	sub    esp,0x8
c0021bca:	68 b4 7b 02 c0       	push   0xc0027bb4
c0021bcf:	50                   	push   eax
c0021bd0:	e8 13 cf fe ff       	call   c000eae8 <FPU::FPU(char const*)>
c0021bd5:	83 c4 10             	add    esp,0x10
c0021bd8:	ba c4 7b 02 c0       	mov    edx,0xc0027bc4
c0021bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021be1:	89 10                	mov    DWORD PTR [eax],edx
c0021be3:	90                   	nop
c0021be4:	83 c4 0c             	add    esp,0xc
c0021be7:	c3                   	ret    

c0021be8 <MMX::available()>:
c0021be8:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0021bed:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021bf3:	83 e0 20             	and    eax,0x20
c0021bf6:	84 c0                	test   al,al
c0021bf8:	0f 95 c0             	setne  al
c0021bfb:	c3                   	ret    

c0021bfc <MMX::open(int, int, void*)>:
c0021bfc:	83 ec 0c             	sub    esp,0xc
c0021bff:	e8 7b 11 00 00       	call   c0022d7f <x87Init>
c0021c04:	b8 00 00 00 00       	mov    eax,0x0
c0021c09:	83 c4 0c             	add    esp,0xc
c0021c0c:	c3                   	ret    
c0021c0d:	90                   	nop
c0021c0e:	66 90                	xchg   ax,ax

c0021c10 <MMX::close(int, int, void*)>:
c0021c10:	83 ec 0c             	sub    esp,0xc
c0021c13:	e8 80 11 00 00       	call   c0022d98 <x87Close>
c0021c18:	b8 00 00 00 00       	mov    eax,0x0
c0021c1d:	83 c4 0c             	add    esp,0xc
c0021c20:	c3                   	ret    
c0021c21:	90                   	nop
c0021c22:	66 90                	xchg   ax,ax

c0021c24 <MMX::save(void*)>:
c0021c24:	83 ec 0c             	sub    esp,0xc
c0021c27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021c2b:	83 ec 0c             	sub    esp,0xc
c0021c2e:	50                   	push   eax
c0021c2f:	e8 3d 11 00 00       	call   c0022d71 <x87Save>
c0021c34:	83 c4 10             	add    esp,0x10
c0021c37:	90                   	nop
c0021c38:	83 c4 0c             	add    esp,0xc
c0021c3b:	c3                   	ret    

c0021c3c <MMX::load(void*)>:
c0021c3c:	83 ec 0c             	sub    esp,0xc
c0021c3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021c43:	83 ec 0c             	sub    esp,0xc
c0021c46:	50                   	push   eax
c0021c47:	e8 2c 11 00 00       	call   c0022d78 <x87Load>
c0021c4c:	83 c4 10             	add    esp,0x10
c0021c4f:	90                   	nop
c0021c50:	83 c4 0c             	add    esp,0xc
c0021c53:	c3                   	ret    

c0021c54 <MMX::MMX()>:
c0021c54:	83 ec 0c             	sub    esp,0xc
c0021c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c5b:	83 ec 08             	sub    esp,0x8
c0021c5e:	68 f4 7b 02 c0       	push   0xc0027bf4
c0021c63:	50                   	push   eax
c0021c64:	e8 7f ce fe ff       	call   c000eae8 <FPU::FPU(char const*)>
c0021c69:	83 c4 10             	add    esp,0x10
c0021c6c:	ba 04 7c 02 c0       	mov    edx,0xc0027c04
c0021c71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c75:	89 10                	mov    DWORD PTR [eax],edx
c0021c77:	90                   	nop
c0021c78:	83 c4 0c             	add    esp,0xc
c0021c7b:	c3                   	ret    

c0021c7c <SSE::open(int, int, void*)>:
c0021c7c:	83 ec 0c             	sub    esp,0xc
c0021c7f:	e8 b4 10 00 00       	call   c0022d38 <sseInit>
c0021c84:	b8 00 00 00 00       	mov    eax,0x0
c0021c89:	83 c4 0c             	add    esp,0xc
c0021c8c:	c3                   	ret    
c0021c8d:	90                   	nop
c0021c8e:	66 90                	xchg   ax,ax

c0021c90 <SSE::close(int, int, void*)>:
c0021c90:	83 ec 0c             	sub    esp,0xc
c0021c93:	e8 b0 10 00 00       	call   c0022d48 <sseClose>
c0021c98:	b8 00 00 00 00       	mov    eax,0x0
c0021c9d:	83 c4 0c             	add    esp,0xc
c0021ca0:	c3                   	ret    
c0021ca1:	90                   	nop
c0021ca2:	66 90                	xchg   ax,ax

c0021ca4 <SSE::available()>:
c0021ca4:	83 ec 1c             	sub    esp,0x1c
c0021ca7:	e8 64 10 00 00       	call   c0022d10 <absolutelyNoChanceInHell>
c0021cac:	85 c0                	test   eax,eax
c0021cae:	0f 95 c0             	setne  al
c0021cb1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0021cb5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0021cb9:	83 c4 1c             	add    esp,0x1c
c0021cbc:	c3                   	ret    
c0021cbd:	90                   	nop
c0021cbe:	66 90                	xchg   ax,ax

c0021cc0 <SSE::save(void*)>:
c0021cc0:	83 ec 0c             	sub    esp,0xc
c0021cc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021cc7:	83 ec 0c             	sub    esp,0xc
c0021cca:	50                   	push   eax
c0021ccb:	e8 58 10 00 00       	call   c0022d28 <sseSave>
c0021cd0:	83 c4 10             	add    esp,0x10
c0021cd3:	90                   	nop
c0021cd4:	83 c4 0c             	add    esp,0xc
c0021cd7:	c3                   	ret    

c0021cd8 <SSE::load(void*)>:
c0021cd8:	83 ec 0c             	sub    esp,0xc
c0021cdb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021cdf:	83 ec 0c             	sub    esp,0xc
c0021ce2:	50                   	push   eax
c0021ce3:	e8 48 10 00 00       	call   c0022d30 <sseLoad>
c0021ce8:	83 c4 10             	add    esp,0x10
c0021ceb:	90                   	nop
c0021cec:	83 c4 0c             	add    esp,0xc
c0021cef:	c3                   	ret    

c0021cf0 <SSE::SSE()>:
c0021cf0:	83 ec 0c             	sub    esp,0xc
c0021cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf7:	83 ec 08             	sub    esp,0x8
c0021cfa:	68 34 7c 02 c0       	push   0xc0027c34
c0021cff:	50                   	push   eax
c0021d00:	e8 e3 cd fe ff       	call   c000eae8 <FPU::FPU(char const*)>
c0021d05:	83 c4 10             	add    esp,0x10
c0021d08:	ba 44 7c 02 c0       	mov    edx,0xc0027c44
c0021d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d11:	89 10                	mov    DWORD PTR [eax],edx
c0021d13:	90                   	nop
c0021d14:	83 c4 0c             	add    esp,0xc
c0021d17:	c3                   	ret    

c0021d18 <x87::open(int, int, void*)>:
c0021d18:	55                   	push   ebp
c0021d19:	89 e5                	mov    ebp,esp
c0021d1b:	83 ec 08             	sub    esp,0x8
c0021d1e:	e8 5c 10 00 00       	call   c0022d7f <x87Init>
c0021d23:	b8 00 00 00 00       	mov    eax,0x0
c0021d28:	c9                   	leave  
c0021d29:	c3                   	ret    

c0021d2a <x87::close(int, int, void*)>:
c0021d2a:	55                   	push   ebp
c0021d2b:	89 e5                	mov    ebp,esp
c0021d2d:	83 ec 08             	sub    esp,0x8
c0021d30:	e8 63 10 00 00       	call   c0022d98 <x87Close>
c0021d35:	b8 00 00 00 00       	mov    eax,0x0
c0021d3a:	c9                   	leave  
c0021d3b:	c3                   	ret    

c0021d3c <x87::available()>:
c0021d3c:	55                   	push   ebp
c0021d3d:	89 e5                	mov    ebp,esp
c0021d3f:	83 ec 08             	sub    esp,0x8
c0021d42:	e8 0f 10 00 00       	call   c0022d56 <x87Detect>
c0021d47:	85 c0                	test   eax,eax
c0021d49:	0f 95 c0             	setne  al
c0021d4c:	c9                   	leave  
c0021d4d:	c3                   	ret    

c0021d4e <x87::save(void*)>:
c0021d4e:	55                   	push   ebp
c0021d4f:	89 e5                	mov    ebp,esp
c0021d51:	83 ec 08             	sub    esp,0x8
c0021d54:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d57:	83 ec 0c             	sub    esp,0xc
c0021d5a:	50                   	push   eax
c0021d5b:	e8 11 10 00 00       	call   c0022d71 <x87Save>
c0021d60:	83 c4 10             	add    esp,0x10
c0021d63:	90                   	nop
c0021d64:	c9                   	leave  
c0021d65:	c3                   	ret    

c0021d66 <x87::load(void*)>:
c0021d66:	55                   	push   ebp
c0021d67:	89 e5                	mov    ebp,esp
c0021d69:	83 ec 08             	sub    esp,0x8
c0021d6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021d6f:	83 ec 0c             	sub    esp,0xc
c0021d72:	50                   	push   eax
c0021d73:	e8 00 10 00 00       	call   c0022d78 <x87Load>
c0021d78:	83 c4 10             	add    esp,0x10
c0021d7b:	90                   	nop
c0021d7c:	c9                   	leave  
c0021d7d:	c3                   	ret    

c0021d7e <x87::x87()>:
c0021d7e:	83 ec 0c             	sub    esp,0xc
c0021d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d85:	83 ec 08             	sub    esp,0x8
c0021d88:	68 74 7c 02 c0       	push   0xc0027c74
c0021d8d:	50                   	push   eax
c0021d8e:	e8 55 cd fe ff       	call   c000eae8 <FPU::FPU(char const*)>
c0021d93:	83 c4 10             	add    esp,0x10
c0021d96:	ba 84 7c 02 c0       	mov    edx,0xc0027c84
c0021d9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d9f:	89 10                	mov    DWORD PTR [eax],edx
c0021da1:	90                   	nop
c0021da2:	83 c4 0c             	add    esp,0xc
c0021da5:	c3                   	ret    

c0021da6 <APIC::disable()>:
c0021da6:	90                   	nop
c0021da7:	c3                   	ret    

c0021da8 <APIC::close(int, int, void*)>:
c0021da8:	55                   	push   ebp
c0021da9:	89 e5                	mov    ebp,esp
c0021dab:	83 ec 08             	sub    esp,0x8
c0021dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021db1:	8b 00                	mov    eax,DWORD PTR [eax]
c0021db3:	83 c0 3c             	add    eax,0x3c
c0021db6:	8b 00                	mov    eax,DWORD PTR [eax]
c0021db8:	83 ec 0c             	sub    esp,0xc
c0021dbb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021dbe:	ff d0                	call   eax
c0021dc0:	83 c4 10             	add    esp,0x10
c0021dc3:	b8 00 00 00 00       	mov    eax,0x0
c0021dc8:	c9                   	leave  
c0021dc9:	c3                   	ret    

c0021dca <IOAPIC::close(int, int, void*)>:
c0021dca:	b8 00 00 00 00       	mov    eax,0x0
c0021dcf:	c3                   	ret    

c0021dd0 <APIC::io_wait()>:
c0021dd0:	eb 00                	jmp    c0021dd2 <APIC::io_wait()+0x2>
c0021dd2:	eb 00                	jmp    c0021dd4 <APIC::io_wait()+0x4>
c0021dd4:	90                   	nop
c0021dd5:	c3                   	ret    

c0021dd6 <APIC::getBase()>:
c0021dd6:	55                   	push   ebp
c0021dd7:	89 e5                	mov    ebp,esp
c0021dd9:	83 ec 18             	sub    esp,0x18
c0021ddc:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0021de1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021de7:	83 e0 08             	and    eax,0x8
c0021dea:	84 c0                	test   al,al
c0021dec:	75 07                	jne    c0021df5 <APIC::getBase()+0x1f>
c0021dee:	b8 00 00 00 00       	mov    eax,0x0
c0021df3:	eb 21                	jmp    c0021e16 <APIC::getBase()+0x40>
c0021df5:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c0021dfa:	83 ec 08             	sub    esp,0x8
c0021dfd:	6a 1b                	push   0x1b
c0021dff:	50                   	push   eax
c0021e00:	e8 79 74 fe ff       	call   c000927e <Computer::rdmsr(unsigned int)>
c0021e05:	83 c4 10             	add    esp,0x10
c0021e08:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021e0b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021e0e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021e11:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021e16:	c9                   	leave  
c0021e17:	c3                   	ret    

c0021e18 <APIC::eoi(unsigned char)>:
c0021e18:	55                   	push   ebp
c0021e19:	89 e5                	mov    ebp,esp
c0021e1b:	83 ec 28             	sub    esp,0x28
c0021e1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021e21:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021e24:	83 ec 0c             	sub    esp,0xc
c0021e27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e2a:	e8 a7 ff ff ff       	call   c0021dd6 <APIC::getBase()>
c0021e2f:	83 c4 10             	add    esp,0x10
c0021e32:	05 b0 00 00 00       	add    eax,0xb0
c0021e37:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0021e3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021e3d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021e43:	90                   	nop
c0021e44:	c9                   	leave  
c0021e45:	c3                   	ret    

c0021e46 <APIC::open(int, int, void*)>:
c0021e46:	55                   	push   ebp
c0021e47:	89 e5                	mov    ebp,esp
c0021e49:	57                   	push   edi
c0021e4a:	56                   	push   esi
c0021e4b:	53                   	push   ebx
c0021e4c:	83 ec 2c             	sub    esp,0x2c
c0021e4f:	83 ec 0c             	sub    esp,0xc
c0021e52:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e55:	e8 7c ff ff ff       	call   c0021dd6 <APIC::getBase()>
c0021e5a:	83 c4 10             	add    esp,0x10
c0021e5d:	89 c2                	mov    edx,eax
c0021e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e62:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021e68:	0f b6 f8             	movzx  edi,al
c0021e6b:	89 d0                	mov    eax,edx
c0021e6d:	ba 00 00 00 00       	mov    edx,0x0
c0021e72:	89 c1                	mov    ecx,eax
c0021e74:	80 e5 ff             	and    ch,0xff
c0021e77:	89 cb                	mov    ebx,ecx
c0021e79:	0f b6 f2             	movzx  esi,dl
c0021e7c:	89 d8                	mov    eax,ebx
c0021e7e:	89 f2                	mov    edx,esi
c0021e80:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021e83:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021e86:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0021e8a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021e8e:	83 e0 00             	and    eax,0x0
c0021e91:	09 d0                	or     eax,edx
c0021e93:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0021e97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e9a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021ea0:	8d 50 01             	lea    edx,[eax+0x1]
c0021ea3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021ea6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021eac:	0f b6 d0             	movzx  edx,al
c0021eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021eb2:	83 c2 08             	add    edx,0x8
c0021eb5:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021eb9:	0f b6 c9             	movzx  ecx,cl
c0021ebc:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021ec2:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0021ec6:	83 ec 0c             	sub    esp,0xc
c0021ec9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021ecc:	e8 05 ff ff ff       	call   c0021dd6 <APIC::getBase()>
c0021ed1:	83 c4 10             	add    esp,0x10
c0021ed4:	05 f0 00 00 00       	add    eax,0xf0
c0021ed9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021edc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021edf:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ee1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021ee4:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021eeb:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021ef2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021ef5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021ef8:	89 10                	mov    DWORD PTR [eax],edx
c0021efa:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021f01:	a1 f0 94 02 c0       	mov    eax,ds:0xc00294f0
c0021f06:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0021f09:	7d 7c                	jge    c0021f87 <APIC::open(int, int, void*)+0x141>
c0021f0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021f0e:	8b 04 85 00 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b00]
c0021f15:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0021f18:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021f1b:	8b 04 85 00 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b00]
c0021f22:	c1 e8 08             	shr    eax,0x8
c0021f25:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0021f29:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021f2c:	8b 04 85 00 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b00]
c0021f33:	c1 e8 18             	shr    eax,0x18
c0021f36:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0021f39:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c0021f3d:	75 40                	jne    c0021f7f <APIC::open(int, int, void*)+0x139>
c0021f3f:	83 ec 0c             	sub    esp,0xc
c0021f42:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021f45:	e8 8c fe ff ff       	call   c0021dd6 <APIC::getBase()>
c0021f4a:	83 c4 10             	add    esp,0x10
c0021f4d:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0021f51:	75 07                	jne    c0021f5a <APIC::open(int, int, void*)+0x114>
c0021f53:	ba 60 03 00 00       	mov    edx,0x360
c0021f58:	eb 05                	jmp    c0021f5f <APIC::open(int, int, void*)+0x119>
c0021f5a:	ba 50 03 00 00       	mov    edx,0x350
c0021f5f:	01 d0                	add    eax,edx
c0021f61:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021f64:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021f67:	8b 00                	mov    eax,DWORD PTR [eax]
c0021f69:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0021f6c:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0021f73:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0021f77:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0021f7a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021f7d:	89 10                	mov    DWORD PTR [eax],edx
c0021f7f:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0021f82:	e9 7a ff ff ff       	jmp    c0021f01 <APIC::open(int, int, void*)+0xbb>
c0021f87:	b8 00 00 00 00       	mov    eax,0x0
c0021f8c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021f8f:	5b                   	pop    ebx
c0021f90:	5e                   	pop    esi
c0021f91:	5f                   	pop    edi
c0021f92:	5d                   	pop    ebp
c0021f93:	c3                   	ret    

c0021f94 <IOAPIC::IOAPIC()>:
c0021f94:	83 ec 0c             	sub    esp,0xc
c0021f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f9b:	83 ec 08             	sub    esp,0x8
c0021f9e:	68 b4 7c 02 c0       	push   0xc0027cb4
c0021fa3:	50                   	push   eax
c0021fa4:	e8 2d c8 fe ff       	call   c000e7d6 <Device::Device(char const*)>
c0021fa9:	83 c4 10             	add    esp,0x10
c0021fac:	ba dc 7d 02 c0       	mov    edx,0xc0027ddc
c0021fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fb5:	89 10                	mov    DWORD PTR [eax],edx
c0021fb7:	90                   	nop
c0021fb8:	83 c4 0c             	add    esp,0xc
c0021fbb:	c3                   	ret    

c0021fbc <APIC::APIC()>:
c0021fbc:	53                   	push   ebx
c0021fbd:	83 ec 18             	sub    esp,0x18
c0021fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fc4:	83 ec 08             	sub    esp,0x8
c0021fc7:	68 bc 7c 02 c0       	push   0xc0027cbc
c0021fcc:	50                   	push   eax
c0021fcd:	e8 94 cf fe ff       	call   c000ef66 <InterruptController::InterruptController(char const*)>
c0021fd2:	83 c4 10             	add    esp,0x10
c0021fd5:	ba 94 7d 02 c0       	mov    edx,0xc0027d94
c0021fda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fde:	89 10                	mov    DWORD PTR [eax],edx
c0021fe0:	a0 20 ac 02 c0       	mov    al,ds:0xc002ac20
c0021fe5:	83 f0 01             	xor    eax,0x1
c0021fe8:	84 c0                	test   al,al
c0021fea:	0f 84 a1 00 00 00    	je     c0022091 <APIC::APIC()+0xd5>
c0021ff0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0021ff5:	a0 a0 95 02 c0       	mov    al,ds:0xc00295a0
c0021ffa:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021ffe:	0f 83 86 00 00 00    	jae    c002208a <APIC::APIC()+0xce>
c0022004:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002200c:	83 ec 0c             	sub    esp,0xc
c002200f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022013:	e8 5b 7d fe ff       	call   c0009d73 <malloc>
c0022018:	83 c4 10             	add    esp,0x10
c002201b:	89 c3                	mov    ebx,eax
c002201d:	83 ec 0c             	sub    esp,0xc
c0022020:	53                   	push   ebx
c0022021:	e8 6e ff ff ff       	call   c0021f94 <IOAPIC::IOAPIC()>
c0022026:	83 c4 10             	add    esp,0x10
c0022029:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002202d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0022032:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022036:	89 14 85 00 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5400],edx
c002203d:	a1 e0 ab 02 c0       	mov    eax,ds:0xc002abe0
c0022042:	40                   	inc    eax
c0022043:	a3 e0 ab 02 c0       	mov    ds:0xc002abe0,eax
c0022048:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c002204d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022053:	83 ec 08             	sub    esp,0x8
c0022056:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002205a:	50                   	push   eax
c002205b:	e8 72 c5 fe ff       	call   c000e5d2 <Device::addChild(Device*)>
c0022060:	83 c4 10             	add    esp,0x10
c0022063:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022067:	8b 00                	mov    eax,DWORD PTR [eax]
c0022069:	83 c0 08             	add    eax,0x8
c002206c:	8b 00                	mov    eax,DWORD PTR [eax]
c002206e:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0022073:	6a 00                	push   0x0
c0022075:	6a 00                	push   0x0
c0022077:	52                   	push   edx
c0022078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002207c:	ff d0                	call   eax
c002207e:	83 c4 10             	add    esp,0x10
c0022081:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0022085:	e9 6b ff ff ff       	jmp    c0021ff5 <APIC::APIC()+0x39>
c002208a:	c6 05 20 ac 02 c0 01 	mov    BYTE PTR ds:0xc002ac20,0x1
c0022091:	90                   	nop
c0022092:	83 c4 18             	add    esp,0x18
c0022095:	5b                   	pop    ebx
c0022096:	c3                   	ret    
c0022097:	90                   	nop

c0022098 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0022098:	55                   	push   ebp
c0022099:	89 e5                	mov    ebp,esp
c002209b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002209e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00220a4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00220a7:	72 1d                	jb     c00220c6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00220a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220ac:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00220b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220b5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00220bb:	01 d0                	add    eax,edx
c00220bd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00220c0:	73 04                	jae    c00220c6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00220c2:	b0 01                	mov    al,0x1
c00220c4:	eb 02                	jmp    c00220c8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00220c6:	b0 00                	mov    al,0x0
c00220c8:	5d                   	pop    ebp
c00220c9:	c3                   	ret    

c00220ca <IOAPIC::read(int)>:
c00220ca:	55                   	push   ebp
c00220cb:	89 e5                	mov    ebp,esp
c00220cd:	83 ec 10             	sub    esp,0x10
c00220d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00220d3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00220d9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00220dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00220df:	0f b6 d0             	movzx  edx,al
c00220e2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00220e5:	89 10                	mov    DWORD PTR [eax],edx
c00220e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00220ea:	83 c0 10             	add    eax,0x10
c00220ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00220ef:	c9                   	leave  
c00220f0:	c3                   	ret    
c00220f1:	90                   	nop

c00220f2 <IOAPIC::open(int, int, void*)>:
c00220f2:	55                   	push   ebp
c00220f3:	89 e5                	mov    ebp,esp
c00220f5:	57                   	push   edi
c00220f6:	56                   	push   esi
c00220f7:	53                   	push   ebx
c00220f8:	83 ec 0c             	sub    esp,0xc
c00220fb:	83 ec 0c             	sub    esp,0xc
c00220fe:	68 e7 7c 02 c0       	push   0xc0027ce7
c0022103:	e8 57 af fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c0022108:	83 c4 10             	add    esp,0x10
c002210b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002210e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022111:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002211a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022120:	8b 14 85 e0 95 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6a20]
c0022127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002212a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022130:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022133:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022139:	8b 14 85 60 96 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd69a0]
c0022140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022143:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022149:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002214c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0022152:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022155:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002215b:	0f b6 f8             	movzx  edi,al
c002215e:	89 d0                	mov    eax,edx
c0022160:	ba 00 00 00 00       	mov    edx,0x0
c0022165:	89 c1                	mov    ecx,eax
c0022167:	80 e5 ff             	and    ch,0xff
c002216a:	89 cb                	mov    ebx,ecx
c002216c:	0f b6 f2             	movzx  esi,dl
c002216f:	89 d8                	mov    eax,ebx
c0022171:	89 f2                	mov    edx,esi
c0022173:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022176:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022179:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002217d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022181:	83 e0 00             	and    eax,0x0
c0022184:	09 d0                	or     eax,edx
c0022186:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002218a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002218d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022193:	8d 50 01             	lea    edx,[eax+0x1]
c0022196:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0022199:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002219f:	0f b6 d0             	movzx  edx,al
c00221a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00221a5:	83 c2 08             	add    edx,0x8
c00221a8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00221ac:	0f b6 c9             	movzx  ecx,cl
c00221af:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00221b5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00221b9:	83 ec 08             	sub    esp,0x8
c00221bc:	6a 01                	push   0x1
c00221be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00221c1:	e8 04 ff ff ff       	call   c00220ca <IOAPIC::read(int)>
c00221c6:	83 c4 10             	add    esp,0x10
c00221c9:	c1 f8 10             	sar    eax,0x10
c00221cc:	0f b6 c0             	movzx  eax,al
c00221cf:	8d 50 01             	lea    edx,[eax+0x1]
c00221d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00221d5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00221db:	b8 00 00 00 00       	mov    eax,0x0
c00221e0:	8d 65 f4             	lea    esp,[ebp-0xc]
c00221e3:	5b                   	pop    ebx
c00221e4:	5e                   	pop    esi
c00221e5:	5f                   	pop    edi
c00221e6:	5d                   	pop    ebp
c00221e7:	c3                   	ret    

c00221e8 <IOAPIC::write(int, int)>:
c00221e8:	55                   	push   ebp
c00221e9:	89 e5                	mov    ebp,esp
c00221eb:	83 ec 10             	sub    esp,0x10
c00221ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00221f1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00221f7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00221fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00221fd:	0f b6 d0             	movzx  edx,al
c0022200:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022203:	89 10                	mov    DWORD PTR [eax],edx
c0022205:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0022208:	8d 50 10             	lea    edx,[eax+0x10]
c002220b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002220e:	89 02                	mov    DWORD PTR [edx],eax
c0022210:	90                   	nop
c0022211:	c9                   	leave  
c0022212:	c3                   	ret    
c0022213:	90                   	nop

c0022214 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0022214:	55                   	push   ebp
c0022215:	89 e5                	mov    ebp,esp
c0022217:	53                   	push   ebx
c0022218:	83 ec 2c             	sub    esp,0x2c
c002221b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002221e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0022221:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0022224:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0022227:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002222a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002222d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0022230:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0022233:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0022236:	88 d8                	mov    al,bl
c0022238:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002223b:	88 c8                	mov    al,cl
c002223d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0022240:	88 d0                	mov    al,dl
c0022242:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0022245:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022249:	83 c0 08             	add    eax,0x8
c002224c:	01 c0                	add    eax,eax
c002224e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0022251:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0022255:	83 c0 08             	add    eax,0x8
c0022258:	01 c0                	add    eax,eax
c002225a:	40                   	inc    eax
c002225b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002225e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0022261:	50                   	push   eax
c0022262:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022265:	e8 60 fe ff ff       	call   c00220ca <IOAPIC::read(int)>
c002226a:	83 c4 08             	add    esp,0x8
c002226d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022270:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0022277:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002227a:	c1 e0 18             	shl    eax,0x18
c002227d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0022280:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0022283:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0022286:	52                   	push   edx
c0022287:	50                   	push   eax
c0022288:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002228b:	e8 58 ff ff ff       	call   c00221e8 <IOAPIC::write(int, int)>
c0022290:	83 c4 0c             	add    esp,0xc
c0022293:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0022296:	50                   	push   eax
c0022297:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002229a:	e8 2b fe ff ff       	call   c00220ca <IOAPIC::read(int)>
c002229f:	83 c4 08             	add    esp,0x8
c00222a2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00222a5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00222ac:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00222b3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00222ba:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00222be:	74 09                	je     c00222c9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00222c0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00222c7:	eb 07                	jmp    c00222d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00222c9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00222d0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00222d4:	74 09                	je     c00222df <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00222d6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00222dd:	eb 07                	jmp    c00222e6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00222df:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00222e6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00222ed:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00222f1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00222f4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00222f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00222fa:	52                   	push   edx
c00222fb:	50                   	push   eax
c00222fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00222ff:	e8 e4 fe ff ff       	call   c00221e8 <IOAPIC::write(int, int)>
c0022304:	83 c4 0c             	add    esp,0xc
c0022307:	90                   	nop
c0022308:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002230b:	c9                   	leave  
c002230c:	c3                   	ret    
c002230d:	90                   	nop

c002230e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002230e:	55                   	push   ebp
c002230f:	89 e5                	mov    ebp,esp
c0022311:	57                   	push   edi
c0022312:	56                   	push   esi
c0022313:	53                   	push   ebx
c0022314:	83 ec 2c             	sub    esp,0x2c
c0022317:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002231a:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002231d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022321:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0022325:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0022329:	74 5a                	je     c0022385 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002232b:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002232f:	7f 44                	jg     c0022375 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0022331:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022334:	05 80 83 02 c0       	add    eax,0xc0028380
c0022339:	8a 00                	mov    al,BYTE PTR [eax]
c002233b:	0f b6 c0             	movzx  eax,al
c002233e:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0022341:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022344:	66 8b 84 00 80 95 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6a80]
c002234c:	0f b7 c0             	movzx  eax,ax
c002234f:	83 e0 02             	and    eax,0x2
c0022352:	85 c0                	test   eax,eax
c0022354:	74 04                	je     c002235a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0022356:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002235a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002235d:	66 8b 84 00 80 95 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd6a80]
c0022365:	0f b7 c0             	movzx  eax,ax
c0022368:	83 e0 08             	and    eax,0x8
c002236b:	85 c0                	test   eax,eax
c002236d:	74 16                	je     c0022385 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002236f:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0022373:	eb 10                	jmp    c0022385 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0022375:	83 ec 0c             	sub    esp,0xc
c0022378:	68 f8 7c 02 c0       	push   0xc0027cf8
c002237d:	e8 af 2d ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0022382:	83 c4 10             	add    esp,0x10
c0022385:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0022389:	a1 e0 ab 02 c0       	mov    eax,ds:0xc002abe0
c002238e:	83 ec 08             	sub    esp,0x8
c0022391:	50                   	push   eax
c0022392:	68 30 7d 02 c0       	push   0xc0027d30
c0022397:	e8 c3 ac fe ff       	call   c000d05f <Dbg::kprintf(char const*, ...)>
c002239c:	83 c4 10             	add    esp,0x10
c002239f:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c00223a6:	a1 e0 ab 02 c0       	mov    eax,ds:0xc002abe0
c00223ab:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c00223ae:	7d 67                	jge    c0022417 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00223b0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00223b3:	8b 04 85 00 ac 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5400]
c00223ba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00223bd:	83 ec 08             	sub    esp,0x8
c00223c0:	52                   	push   edx
c00223c1:	50                   	push   eax
c00223c2:	e8 d1 fc ff ff       	call   c0022098 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c00223c7:	83 c4 10             	add    esp,0x10
c00223ca:	84 c0                	test   al,al
c00223cc:	74 44                	je     c0022412 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c00223ce:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00223d1:	8b 1c 85 00 ac 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd5400]
c00223d8:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00223dc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00223df:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00223e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00223e6:	83 c0 20             	add    eax,0x20
c00223e9:	0f b6 f0             	movzx  esi,al
c00223ec:	b8 00 00 00 00       	mov    eax,0x0
c00223f1:	99                   	cdq    
c00223f2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00223f5:	0f b6 c9             	movzx  ecx,cl
c00223f8:	83 ec 04             	sub    esp,0x4
c00223fb:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00223fe:	57                   	push   edi
c00223ff:	56                   	push   esi
c0022400:	52                   	push   edx
c0022401:	50                   	push   eax
c0022402:	51                   	push   ecx
c0022403:	53                   	push   ebx
c0022404:	e8 0b fe ff ff       	call   c0022214 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0022409:	83 c4 20             	add    esp,0x20
c002240c:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0022410:	eb 05                	jmp    c0022417 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0022412:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0022415:	eb 8f                	jmp    c00223a6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0022417:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c002241a:	83 f0 01             	xor    eax,0x1
c002241d:	84 c0                	test   al,al
c002241f:	74 10                	je     c0022431 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0022421:	83 ec 0c             	sub    esp,0xc
c0022424:	68 47 7d 02 c0       	push   0xc0027d47
c0022429:	e8 03 2d ff ff       	call   c0015131 <Krnl::panic(char const*)>
c002242e:	83 c4 10             	add    esp,0x10
c0022431:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0022435:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002243c:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0022440:	7f 65                	jg     c00224a7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0022442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022445:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022448:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002244f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0022452:	01 ca                	add    edx,ecx
c0022454:	83 c2 54             	add    edx,0x54
c0022457:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002245b:	85 c0                	test   eax,eax
c002245d:	75 43                	jne    c00224a2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c002245f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0022462:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022465:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002246c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002246f:	01 ca                	add    edx,ecx
c0022471:	8d 4a 54             	lea    ecx,[edx+0x54]
c0022474:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022477:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002247b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002247e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022481:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0022488:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002248b:	01 ca                	add    edx,ecx
c002248d:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0022493:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0022496:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002249a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002249d:	83 e8 20             	sub    eax,0x20
c00224a0:	eb 1a                	jmp    c00224bc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00224a2:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00224a5:	eb 95                	jmp    c002243c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c00224a7:	83 ec 0c             	sub    esp,0xc
c00224aa:	68 54 7d 02 c0       	push   0xc0027d54
c00224af:	e8 7d 2c ff ff       	call   c0015131 <Krnl::panic(char const*)>
c00224b4:	83 c4 10             	add    esp,0x10
c00224b7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00224bc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00224bf:	5b                   	pop    ebx
c00224c0:	5e                   	pop    esi
c00224c1:	5f                   	pop    edi
c00224c2:	5d                   	pop    ebp
c00224c3:	c3                   	ret    

c00224c4 <PIC::disable()>:
c00224c4:	55                   	push   ebp
c00224c5:	89 e5                	mov    ebp,esp
c00224c7:	83 ec 10             	sub    esp,0x10
c00224ca:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c00224d0:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c00224d4:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00224d7:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00224db:	ee                   	out    dx,al
c00224dc:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c00224e2:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c00224e6:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00224e9:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00224ed:	ee                   	out    dx,al
c00224ee:	90                   	nop
c00224ef:	c9                   	leave  
c00224f0:	c3                   	ret    
c00224f1:	90                   	nop

c00224f2 <PIC::close(int, int, void*)>:
c00224f2:	55                   	push   ebp
c00224f3:	89 e5                	mov    ebp,esp
c00224f5:	83 ec 08             	sub    esp,0x8
c00224f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00224fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00224fd:	83 c0 3c             	add    eax,0x3c
c0022500:	8b 00                	mov    eax,DWORD PTR [eax]
c0022502:	83 ec 0c             	sub    esp,0xc
c0022505:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022508:	ff d0                	call   eax
c002250a:	83 c4 10             	add    esp,0x10
c002250d:	b8 00 00 00 00       	mov    eax,0x0
c0022512:	c9                   	leave  
c0022513:	c3                   	ret    

c0022514 <PIC::PIC()>:
c0022514:	83 ec 0c             	sub    esp,0xc
c0022517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002251b:	83 ec 08             	sub    esp,0x8
c002251e:	68 00 7e 02 c0       	push   0xc0027e00
c0022523:	50                   	push   eax
c0022524:	e8 3d ca fe ff       	call   c000ef66 <InterruptController::InterruptController(char const*)>
c0022529:	83 c4 10             	add    esp,0x10
c002252c:	ba 2c 7e 02 c0       	mov    edx,0xc0027e2c
c0022531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022535:	89 10                	mov    DWORD PTR [eax],edx
c0022537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002253b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022541:	0f b6 d0             	movzx  edx,al
c0022544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022548:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c002254f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022553:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022559:	0f b6 d0             	movzx  edx,al
c002255c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022560:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0022565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022569:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002256f:	8d 50 01             	lea    edx,[eax+0x1]
c0022572:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022576:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002257c:	0f b6 d0             	movzx  edx,al
c002257f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022583:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022587:	83 e1 3f             	and    ecx,0x3f
c002258a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002258e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022592:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022598:	0f b6 d0             	movzx  edx,al
c002259b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002259f:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c00225a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225aa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00225b0:	0f b6 d0             	movzx  edx,al
c00225b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225b7:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00225bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225c0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00225c6:	8d 50 01             	lea    edx,[eax+0x1]
c00225c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00225cd:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00225d3:	0f b6 d0             	movzx  edx,al
c00225d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225da:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00225de:	83 e1 3f             	and    ecx,0x3f
c00225e1:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00225e5:	90                   	nop
c00225e6:	83 c4 0c             	add    esp,0xc
c00225e9:	c3                   	ret    

c00225ea <PIC::ioWait()>:
c00225ea:	eb 00                	jmp    c00225ec <PIC::ioWait()+0x2>
c00225ec:	eb 00                	jmp    c00225ee <PIC::ioWait()+0x4>
c00225ee:	90                   	nop
c00225ef:	c3                   	ret    

c00225f0 <PIC::getIRQReg(int)>:
c00225f0:	55                   	push   ebp
c00225f1:	89 e5                	mov    ebp,esp
c00225f3:	83 ec 10             	sub    esp,0x10
c00225f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00225f9:	0f b6 c0             	movzx  eax,al
c00225fc:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0022602:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0022605:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0022608:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002260c:	ee                   	out    dx,al
c002260d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022610:	0f b6 c0             	movzx  eax,al
c0022613:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0022619:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002261c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002261f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022623:	ee                   	out    dx,al
c0022624:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c002262a:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002262e:	89 c2                	mov    edx,eax
c0022630:	ec                   	in     al,dx
c0022631:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0022634:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0022637:	0f b6 c0             	movzx  eax,al
c002263a:	c1 e0 08             	shl    eax,0x8
c002263d:	89 c1                	mov    ecx,eax
c002263f:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0022645:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0022649:	89 c2                	mov    edx,eax
c002264b:	ec                   	in     al,dx
c002264c:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002264f:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0022652:	0f b6 c0             	movzx  eax,al
c0022655:	09 c8                	or     eax,ecx
c0022657:	c9                   	leave  
c0022658:	c3                   	ret    
c0022659:	90                   	nop

c002265a <PIC::eoi(unsigned char)>:
c002265a:	55                   	push   ebp
c002265b:	89 e5                	mov    ebp,esp
c002265d:	83 ec 14             	sub    esp,0x14
c0022660:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0022663:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0022666:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002266a:	75 1e                	jne    c002268a <PIC::eoi(unsigned char)+0x30>
c002266c:	6a 0b                	push   0xb
c002266e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022671:	e8 7a ff ff ff       	call   c00225f0 <PIC::getIRQReg(int)>
c0022676:	83 c4 08             	add    esp,0x8
c0022679:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c002267d:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0022681:	25 80 00 00 00       	and    eax,0x80
c0022686:	85 c0                	test   eax,eax
c0022688:	74 5f                	je     c00226e9 <PIC::eoi(unsigned char)+0x8f>
c002268a:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002268e:	75 2d                	jne    c00226bd <PIC::eoi(unsigned char)+0x63>
c0022690:	6a 0b                	push   0xb
c0022692:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022695:	e8 56 ff ff ff       	call   c00225f0 <PIC::getIRQReg(int)>
c002269a:	83 c4 08             	add    esp,0x8
c002269d:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00226a1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00226a4:	66 85 c0             	test   ax,ax
c00226a7:	78 14                	js     c00226bd <PIC::eoi(unsigned char)+0x63>
c00226a9:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00226af:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00226b3:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00226b6:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00226ba:	ee                   	out    dx,al
c00226bb:	eb 2d                	jmp    c00226ea <PIC::eoi(unsigned char)+0x90>
c00226bd:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00226c1:	76 12                	jbe    c00226d5 <PIC::eoi(unsigned char)+0x7b>
c00226c3:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00226c9:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00226cd:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00226d0:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00226d4:	ee                   	out    dx,al
c00226d5:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00226db:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c00226df:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00226e2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00226e6:	ee                   	out    dx,al
c00226e7:	eb 01                	jmp    c00226ea <PIC::eoi(unsigned char)+0x90>
c00226e9:	90                   	nop
c00226ea:	c9                   	leave  
c00226eb:	c3                   	ret    

c00226ec <PIC::remap()>:
c00226ec:	55                   	push   ebp
c00226ed:	89 e5                	mov    ebp,esp
c00226ef:	83 ec 48             	sub    esp,0x48
c00226f2:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c00226f9:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0022700:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0022706:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0022709:	89 c2                	mov    edx,eax
c002270b:	ec                   	in     al,dx
c002270c:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002270f:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0022712:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0022715:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c002271b:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002271e:	89 c2                	mov    edx,eax
c0022720:	ec                   	in     al,dx
c0022721:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0022724:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0022727:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c002272a:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0022730:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0022734:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0022737:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c002273a:	ee                   	out    dx,al
c002273b:	83 ec 0c             	sub    esp,0xc
c002273e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022741:	e8 a4 fe ff ff       	call   c00225ea <PIC::ioWait()>
c0022746:	83 c4 10             	add    esp,0x10
c0022749:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002274f:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0022753:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0022756:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0022759:	ee                   	out    dx,al
c002275a:	83 ec 0c             	sub    esp,0xc
c002275d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022760:	e8 85 fe ff ff       	call   c00225ea <PIC::ioWait()>
c0022765:	83 c4 10             	add    esp,0x10
c0022768:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002276b:	0f b6 c0             	movzx  eax,al
c002276e:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0022774:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0022777:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c002277a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c002277d:	ee                   	out    dx,al
c002277e:	83 ec 0c             	sub    esp,0xc
c0022781:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022784:	e8 61 fe ff ff       	call   c00225ea <PIC::ioWait()>
c0022789:	83 c4 10             	add    esp,0x10
c002278c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002278f:	0f b6 c0             	movzx  eax,al
c0022792:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0022798:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c002279b:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002279e:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00227a1:	ee                   	out    dx,al
c00227a2:	83 ec 0c             	sub    esp,0xc
c00227a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00227a8:	e8 3d fe ff ff       	call   c00225ea <PIC::ioWait()>
c00227ad:	83 c4 10             	add    esp,0x10
c00227b0:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00227b6:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00227ba:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00227bd:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00227c0:	ee                   	out    dx,al
c00227c1:	83 ec 0c             	sub    esp,0xc
c00227c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00227c7:	e8 1e fe ff ff       	call   c00225ea <PIC::ioWait()>
c00227cc:	83 c4 10             	add    esp,0x10
c00227cf:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c00227d5:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c00227d9:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c00227dc:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00227df:	ee                   	out    dx,al
c00227e0:	83 ec 0c             	sub    esp,0xc
c00227e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00227e6:	e8 ff fd ff ff       	call   c00225ea <PIC::ioWait()>
c00227eb:	83 c4 10             	add    esp,0x10
c00227ee:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c00227f4:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c00227f8:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c00227fb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00227fe:	ee                   	out    dx,al
c00227ff:	83 ec 0c             	sub    esp,0xc
c0022802:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022805:	e8 e0 fd ff ff       	call   c00225ea <PIC::ioWait()>
c002280a:	83 c4 10             	add    esp,0x10
c002280d:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0022813:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0022817:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c002281a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002281d:	ee                   	out    dx,al
c002281e:	83 ec 0c             	sub    esp,0xc
c0022821:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022824:	e8 c1 fd ff ff       	call   c00225ea <PIC::ioWait()>
c0022829:	83 c4 10             	add    esp,0x10
c002282c:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0022830:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0022836:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0022839:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002283c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002283f:	ee                   	out    dx,al
c0022840:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0022844:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c002284a:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002284d:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0022850:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0022853:	ee                   	out    dx,al
c0022854:	90                   	nop
c0022855:	c9                   	leave  
c0022856:	c3                   	ret    
c0022857:	90                   	nop

c0022858 <PIC::open(int, int, void*)>:
c0022858:	55                   	push   ebp
c0022859:	89 e5                	mov    ebp,esp
c002285b:	83 ec 18             	sub    esp,0x18
c002285e:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0022864:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0022868:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002286b:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002286f:	ee                   	out    dx,al
c0022870:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0022876:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c002287a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002287d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0022881:	ee                   	out    dx,al
c0022882:	83 ec 0c             	sub    esp,0xc
c0022885:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0022888:	e8 5f fe ff ff       	call   c00226ec <PIC::remap()>
c002288d:	83 c4 10             	add    esp,0x10
c0022890:	b8 00 00 00 00       	mov    eax,0x0
c0022895:	c9                   	leave  
c0022896:	c3                   	ret    
c0022897:	90                   	nop

c0022898 <APICTimer::close(int, int, void*)>:
c0022898:	b8 00 00 00 00       	mov    eax,0x0
c002289d:	c3                   	ret    
c002289e:	66 90                	xchg   ax,ax

c00228a0 <apicTimerHandler(regs*, void*)>:
c00228a0:	83 ec 0c             	sub    esp,0xc
c00228a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00228a7:	8b 08                	mov    ecx,DWORD PTR [eax]
c00228a9:	b8 10 27 00 00       	mov    eax,0x2710
c00228ae:	ba 00 00 00 00       	mov    edx,0x0
c00228b3:	f7 f1                	div    ecx
c00228b5:	83 ec 0c             	sub    esp,0xc
c00228b8:	50                   	push   eax
c00228b9:	e8 c7 e6 fe ff       	call   c0010f85 <timerHandler(unsigned int)>
c00228be:	83 c4 10             	add    esp,0x10
c00228c1:	90                   	nop
c00228c2:	83 c4 0c             	add    esp,0xc
c00228c5:	c3                   	ret    
c00228c6:	66 90                	xchg   ax,ax

c00228c8 <APICTimer::write(int)>:
c00228c8:	83 ec 1c             	sub    esp,0x1c
c00228cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00228cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00228d3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00228d9:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c00228de:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00228e4:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00228ea:	83 ec 0c             	sub    esp,0xc
c00228ed:	50                   	push   eax
c00228ee:	e8 e3 f4 ff ff       	call   c0021dd6 <APIC::getBase()>
c00228f3:	83 c4 10             	add    esp,0x10
c00228f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00228fa:	a1 ac 92 02 c0       	mov    eax,ds:0xc00292ac
c00228ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022903:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022907:	05 e0 03 00 00       	add    eax,0x3e0
c002290c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022912:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022916:	05 80 03 00 00       	add    eax,0x380
c002291b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0022921:	fb                   	sti    
c0022922:	66 90                	xchg   ax,ax
c0022924:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022928:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c002292e:	a1 ac 92 02 c0       	mov    eax,ds:0xc00292ac
c0022933:	39 c2                	cmp    edx,eax
c0022935:	76 05                	jbe    c002293c <APICTimer::write(int)+0x74>
c0022937:	eb eb                	jmp    c0022924 <APICTimer::write(int)+0x5c>
c0022939:	8d 76 00             	lea    esi,[esi+0x0]
c002293c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022940:	05 20 03 00 00       	add    eax,0x320
c0022945:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c002294b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002294f:	05 90 03 00 00       	add    eax,0x390
c0022954:	8b 00                	mov    eax,DWORD PTR [eax]
c0022956:	f7 d0                	not    eax
c0022958:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002295c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022964:	ba 00 00 00 00       	mov    edx,0x0
c0022969:	f7 f1                	div    ecx
c002296b:	89 04 24             	mov    DWORD PTR [esp],eax
c002296e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022972:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022978:	0d 00 00 02 00       	or     eax,0x20000
c002297d:	89 c2                	mov    edx,eax
c002297f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022983:	05 20 03 00 00       	add    eax,0x320
c0022988:	89 10                	mov    DWORD PTR [eax],edx
c002298a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002298e:	05 e0 03 00 00       	add    eax,0x3e0
c0022993:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022999:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002299d:	05 80 03 00 00       	add    eax,0x380
c00229a2:	89 c2                	mov    edx,eax
c00229a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00229a7:	89 02                	mov    DWORD PTR [edx],eax
c00229a9:	90                   	nop
c00229aa:	83 c4 1c             	add    esp,0x1c
c00229ad:	c3                   	ret    
c00229ae:	66 90                	xchg   ax,ax

c00229b0 <APICTimer::open(int, int, void*)>:
c00229b0:	57                   	push   edi
c00229b1:	56                   	push   esi
c00229b2:	53                   	push   ebx
c00229b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00229b9:	83 c0 24             	add    eax,0x24
c00229bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00229be:	83 ec 08             	sub    esp,0x8
c00229c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229c9:	ff d0                	call   eax
c00229cb:	83 c4 10             	add    esp,0x10
c00229ce:	a1 88 8c 02 c0       	mov    eax,ds:0xc0028c88
c00229d3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00229d9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00229df:	83 ec 0c             	sub    esp,0xc
c00229e2:	50                   	push   eax
c00229e3:	e8 ee f3 ff ff       	call   c0021dd6 <APIC::getBase()>
c00229e8:	83 c4 10             	add    esp,0x10
c00229eb:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00229f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00229fb:	0f b6 f8             	movzx  edi,al
c00229fe:	89 d0                	mov    eax,edx
c0022a00:	ba 00 00 00 00       	mov    edx,0x0
c0022a05:	89 c1                	mov    ecx,eax
c0022a07:	80 e5 ff             	and    ch,0xff
c0022a0a:	89 cb                	mov    ebx,ecx
c0022a0c:	0f b6 f2             	movzx  esi,dl
c0022a0f:	89 d8                	mov    eax,ebx
c0022a11:	89 f2                	mov    edx,esi
c0022a13:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a17:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022a1a:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022a1e:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0022a22:	83 e0 00             	and    eax,0x0
c0022a25:	09 d0                	or     eax,edx
c0022a27:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a2f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022a35:	8d 50 01             	lea    edx,[eax+0x1]
c0022a38:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022a3c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0022a42:	0f b6 d0             	movzx  edx,al
c0022a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a49:	83 c2 08             	add    edx,0x8
c0022a4c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0022a50:	0f b6 c9             	movzx  ecx,cl
c0022a53:	81 c9 00 00 01 00    	or     ecx,0x10000
c0022a59:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0022a5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a61:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022a65:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022a73:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0022a79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022a7d:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022a83:	83 ec 0c             	sub    esp,0xc
c0022a86:	51                   	push   ecx
c0022a87:	6a 01                	push   0x1
c0022a89:	68 a0 28 02 c0       	push   0xc00228a0
c0022a8e:	52                   	push   edx
c0022a8f:	50                   	push   eax
c0022a90:	e8 b5 ba fe ff       	call   c000e54a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022a95:	83 c4 20             	add    esp,0x20
c0022a98:	89 c2                	mov    edx,eax
c0022a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a9e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022aa4:	b8 00 00 00 00       	mov    eax,0x0
c0022aa9:	5b                   	pop    ebx
c0022aaa:	5e                   	pop    esi
c0022aab:	5f                   	pop    edi
c0022aac:	c3                   	ret    
c0022aad:	90                   	nop
c0022aae:	66 90                	xchg   ax,ax

c0022ab0 <APICTimer::APICTimer()>:
c0022ab0:	83 ec 0c             	sub    esp,0xc
c0022ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ab7:	83 ec 08             	sub    esp,0x8
c0022aba:	68 6c 7e 02 c0       	push   0xc0027e6c
c0022abf:	50                   	push   eax
c0022ac0:	e8 2f e4 fe ff       	call   c0010ef4 <Timer::Timer(char const*)>
c0022ac5:	83 c4 10             	add    esp,0x10
c0022ac8:	ba 80 7e 02 c0       	mov    edx,0xc0027e80
c0022acd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ad1:	89 10                	mov    DWORD PTR [eax],edx
c0022ad3:	90                   	nop
c0022ad4:	83 c4 0c             	add    esp,0xc
c0022ad7:	c3                   	ret    

c0022ad8 <PIT::write(int)>:
c0022ad8:	83 ec 10             	sub    esp,0x10
c0022adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022adf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022ae3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022ae9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022aed:	a3 24 ac 02 c0       	mov    ds:0xc002ac24,eax
c0022af2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0022af7:	99                   	cdq    
c0022af8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022afc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022b00:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0022b07:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022b0c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022b10:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0022b15:	ee                   	out    dx,al
c0022b16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022b1a:	0f b6 c0             	movzx  eax,al
c0022b1d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0022b24:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022b28:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022b2c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022b31:	ee                   	out    dx,al
c0022b32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022b36:	c1 f8 08             	sar    eax,0x8
c0022b39:	0f b6 c0             	movzx  eax,al
c0022b3c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0022b43:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0022b47:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0022b4b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0022b50:	ee                   	out    dx,al
c0022b51:	90                   	nop
c0022b52:	83 c4 10             	add    esp,0x10
c0022b55:	c3                   	ret    
c0022b56:	66 90                	xchg   ax,ax

c0022b58 <pitHandler(regs*, void*)>:
c0022b58:	83 ec 0c             	sub    esp,0xc
c0022b5b:	8b 0d 24 ac 02 c0    	mov    ecx,DWORD PTR ds:0xc002ac24
c0022b61:	b8 10 27 00 00       	mov    eax,0x2710
c0022b66:	99                   	cdq    
c0022b67:	f7 f9                	idiv   ecx
c0022b69:	83 ec 0c             	sub    esp,0xc
c0022b6c:	50                   	push   eax
c0022b6d:	e8 13 e4 fe ff       	call   c0010f85 <timerHandler(unsigned int)>
c0022b72:	83 c4 10             	add    esp,0x10
c0022b75:	90                   	nop
c0022b76:	83 c4 0c             	add    esp,0xc
c0022b79:	c3                   	ret    
c0022b7a:	66 90                	xchg   ax,ax

c0022b7c <PIT::open(int, int, void*)>:
c0022b7c:	83 ec 0c             	sub    esp,0xc
c0022b7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b83:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b85:	83 c0 24             	add    eax,0x24
c0022b88:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b8a:	83 ec 08             	sub    esp,0x8
c0022b8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b95:	ff d0                	call   eax
c0022b97:	83 c4 10             	add    esp,0x10
c0022b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b9e:	83 ec 0c             	sub    esp,0xc
c0022ba1:	6a 00                	push   0x0
c0022ba3:	6a 01                	push   0x1
c0022ba5:	68 58 2b 02 c0       	push   0xc0022b58
c0022baa:	6a 00                	push   0x0
c0022bac:	50                   	push   eax
c0022bad:	e8 98 b9 fe ff       	call   c000e54a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022bb2:	83 c4 20             	add    esp,0x20
c0022bb5:	89 c2                	mov    edx,eax
c0022bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bbb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022bc1:	b8 00 00 00 00       	mov    eax,0x0
c0022bc6:	83 c4 0c             	add    esp,0xc
c0022bc9:	c3                   	ret    
c0022bca:	66 90                	xchg   ax,ax

c0022bcc <PIT::close(int, int, void*)>:
c0022bcc:	83 ec 0c             	sub    esp,0xc
c0022bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bd3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be1:	6a 01                	push   0x1
c0022be3:	68 58 2b 02 c0       	push   0xc0022b58
c0022be8:	6a 00                	push   0x0
c0022bea:	50                   	push   eax
c0022beb:	e8 a4 b9 fe ff       	call   c000e594 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022bf0:	83 c4 10             	add    esp,0x10
c0022bf3:	b8 00 00 00 00       	mov    eax,0x0
c0022bf8:	83 c4 0c             	add    esp,0xc
c0022bfb:	c3                   	ret    

c0022bfc <PIT::PIT()>:
c0022bfc:	83 ec 0c             	sub    esp,0xc
c0022bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c03:	83 ec 08             	sub    esp,0x8
c0022c06:	68 a8 7e 02 c0       	push   0xc0027ea8
c0022c0b:	50                   	push   eax
c0022c0c:	e8 e3 e2 fe ff       	call   c0010ef4 <Timer::Timer(char const*)>
c0022c11:	83 c4 10             	add    esp,0x10
c0022c14:	ba d0 7e 02 c0       	mov    edx,0xc0027ed0
c0022c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c1d:	89 10                	mov    DWORD PTR [eax],edx
c0022c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c23:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022c29:	0f b6 d0             	movzx  edx,al
c0022c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c30:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0022c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c3b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022c41:	0f b6 d0             	movzx  edx,al
c0022c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c48:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0022c4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c51:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022c57:	8d 50 01             	lea    edx,[eax+0x1]
c0022c5a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022c5e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022c64:	0f b6 d0             	movzx  edx,al
c0022c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c6b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022c6f:	83 e1 3f             	and    ecx,0x3f
c0022c72:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022c76:	90                   	nop
c0022c77:	83 c4 0c             	add    esp,0xc
c0022c7a:	c3                   	ret    
c0022c7b:	66 90                	xchg   ax,ax
c0022c7d:	66 90                	xchg   ax,ax
c0022c7f:	90                   	nop

c0022c80 <avxDetect>:
c0022c80:	b8 01 00 00 00       	mov    eax,0x1
c0022c85:	0f a2                	cpuid  
c0022c87:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0022c8d:	74 15                	je     c0022ca4 <avxDetect.noAVX>
c0022c8f:	b8 01 00 00 00       	mov    eax,0x1
c0022c94:	0f a2                	cpuid  
c0022c96:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0022c9c:	74 06                	je     c0022ca4 <avxDetect.noAVX>
c0022c9e:	b8 01 00 00 00       	mov    eax,0x1
c0022ca3:	c3                   	ret    

c0022ca4 <avxDetect.noAVX>:
c0022ca4:	b8 00 00 00 00       	mov    eax,0x0
c0022ca9:	c3                   	ret    

c0022caa <avxSave>:
c0022caa:	53                   	push   ebx
c0022cab:	52                   	push   edx
c0022cac:	31 c0                	xor    eax,eax
c0022cae:	48                   	dec    eax
c0022caf:	89 c2                	mov    edx,eax
c0022cb1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022cb5:	0f ae 23             	xsave  [ebx]
c0022cb8:	5a                   	pop    edx
c0022cb9:	5b                   	pop    ebx
c0022cba:	c3                   	ret    

c0022cbb <avxLoad>:
c0022cbb:	53                   	push   ebx
c0022cbc:	52                   	push   edx
c0022cbd:	31 c0                	xor    eax,eax
c0022cbf:	48                   	dec    eax
c0022cc0:	89 c2                	mov    edx,eax
c0022cc2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022cc6:	0f ae 2b             	xrstor [ebx]
c0022cc9:	5a                   	pop    edx
c0022cca:	5b                   	pop    ebx
c0022ccb:	c3                   	ret    

c0022ccc <avxInit>:
c0022ccc:	e8 67 00 00 00       	call   c0022d38 <sseInit>
c0022cd1:	50                   	push   eax
c0022cd2:	51                   	push   ecx
c0022cd3:	0f 20 e0             	mov    eax,cr4
c0022cd6:	0d 00 00 04 00       	or     eax,0x40000
c0022cdb:	0f 22 e0             	mov    cr4,eax
c0022cde:	31 c9                	xor    ecx,ecx
c0022ce0:	0f 01 d0             	xgetbv 
c0022ce3:	0d 07 00 00 00       	or     eax,0x7
c0022ce8:	0f 01 d1             	xsetbv 
c0022ceb:	59                   	pop    ecx
c0022cec:	58                   	pop    eax
c0022ced:	c3                   	ret    

c0022cee <avxClose>:
c0022cee:	c3                   	ret    

c0022cef <wouldSheSayYes>:
c0022cef:	c3                   	ret    
c0022cf0:	49                   	dec    ecx
c0022cf1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022cf5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022cf9:	75 20                	jne    c0022d1b <absolutelyNoChanceInHell+0xb>
c0022cfb:	4e                   	dec    esi
c0022cfc:	79 61                	jns    c0022d5f <x87Detect+0x9>
c0022cfe:	68 2e 2e 2e 00       	push   0x2e2e2e
c0022d03:	66 90                	xchg   ax,ax
c0022d05:	66 90                	xchg   ax,ax
c0022d07:	66 90                	xchg   ax,ax
c0022d09:	66 90                	xchg   ax,ax
c0022d0b:	66 90                	xchg   ax,ax
c0022d0d:	66 90                	xchg   ax,ax
c0022d0f:	90                   	nop

c0022d10 <absolutelyNoChanceInHell>:
c0022d10:	b8 01 00 00 00       	mov    eax,0x1
c0022d15:	0f a2                	cpuid  
c0022d17:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0022d1d:	74 06                	je     c0022d25 <sseDetect.noSSE>
c0022d1f:	b8 01 00 00 00       	mov    eax,0x1
c0022d24:	c3                   	ret    

c0022d25 <sseDetect.noSSE>:
c0022d25:	31 c0                	xor    eax,eax
c0022d27:	c3                   	ret    

c0022d28 <sseSave>:
c0022d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d2c:	0f ae 00             	fxsave [eax]
c0022d2f:	c3                   	ret    

c0022d30 <sseLoad>:
c0022d30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d34:	0f ae 08             	fxrstor [eax]
c0022d37:	c3                   	ret    

c0022d38 <sseInit>:
c0022d38:	e8 42 00 00 00       	call   c0022d7f <x87Init>
c0022d3d:	0f 20 e0             	mov    eax,cr4
c0022d40:	66 0d 00 06          	or     ax,0x600
c0022d44:	0f 22 e0             	mov    cr4,eax
c0022d47:	c3                   	ret    

c0022d48 <sseClose>:
c0022d48:	c3                   	ret    
c0022d49:	66 90                	xchg   ax,ax
c0022d4b:	66 90                	xchg   ax,ax
c0022d4d:	66 90                	xchg   ax,ax
c0022d4f:	90                   	nop

c0022d50 <value_37F>:
c0022d50:	7f 03                	jg     c0022d55 <value_37A+0x1>

c0022d52 <value_37E>:
c0022d52:	7e 03                	jle    c0022d57 <x87Detect+0x1>

c0022d54 <value_37A>:
c0022d54:	7a 03                	jp     c0022d59 <x87Detect+0x3>

c0022d56 <x87Detect>:
c0022d56:	b8 01 00 00 00       	mov    eax,0x1
c0022d5b:	0f a2                	cpuid  
c0022d5d:	f7 c2 01 00 00 00    	test   edx,0x1
c0022d63:	74 06                	je     c0022d6b <x87Detect.nox87>
c0022d65:	b8 01 00 00 00       	mov    eax,0x1
c0022d6a:	c3                   	ret    

c0022d6b <x87Detect.nox87>:
c0022d6b:	b8 00 00 00 00       	mov    eax,0x0
c0022d70:	c3                   	ret    

c0022d71 <x87Save>:
c0022d71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d75:	dd 30                	fnsave [eax]
c0022d77:	c3                   	ret    

c0022d78 <x87Load>:
c0022d78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d7c:	dd 20                	frstor [eax]
c0022d7e:	c3                   	ret    

c0022d7f <x87Init>:
c0022d7f:	0f 20 c0             	mov    eax,cr0
c0022d82:	66 25 fb ff          	and    ax,0xfffb
c0022d86:	66 0d 22 00          	or     ax,0x22
c0022d8a:	0f 22 c0             	mov    cr0,eax
c0022d8d:	db e3                	fninit 
c0022d8f:	0f 06                	clts   
c0022d91:	d9 2d 54 2d 02 c0    	fldcw  WORD PTR ds:0xc0022d54
c0022d97:	c3                   	ret    

c0022d98 <x87Close>:
c0022d98:	c3                   	ret    
c0022d99:	66 90                	xchg   ax,ax
c0022d9b:	90                   	nop

c0022d9c <__do_global_ctors_aux>:
c0022d9c:	a1 38 3f 02 c0       	mov    eax,ds:0xc0023f38
c0022da1:	83 f8 ff             	cmp    eax,0xffffffff
c0022da4:	74 1a                	je     c0022dc0 <__do_global_ctors_aux+0x24>
c0022da6:	55                   	push   ebp
c0022da7:	89 e5                	mov    ebp,esp
c0022da9:	53                   	push   ebx
c0022daa:	52                   	push   edx
c0022dab:	bb 38 3f 02 c0       	mov    ebx,0xc0023f38
c0022db0:	ff d0                	call   eax
c0022db2:	83 eb 04             	sub    ebx,0x4
c0022db5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022db7:	83 f8 ff             	cmp    eax,0xffffffff
c0022dba:	75 f4                	jne    c0022db0 <__do_global_ctors_aux+0x14>
c0022dbc:	58                   	pop    eax
c0022dbd:	5b                   	pop    ebx
c0022dbe:	5d                   	pop    ebp
c0022dbf:	c3                   	ret    
c0022dc0:	c3                   	ret    
c0022dc1:	66 90                	xchg   ax,ax
c0022dc3:	90                   	nop

c0022dc4 <__divdi3>:
c0022dc4:	55                   	push   ebp
c0022dc5:	57                   	push   edi
c0022dc6:	56                   	push   esi
c0022dc7:	53                   	push   ebx
c0022dc8:	83 ec 1c             	sub    esp,0x1c
c0022dcb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0022dcf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022dd3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022dd6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022dda:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022dde:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022de2:	85 db                	test   ebx,ebx
c0022de4:	0f 88 8e 00 00 00    	js     c0022e78 <__divdi3+0xb4>
c0022dea:	89 dd                	mov    ebp,ebx
c0022dec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022df4:	89 d3                	mov    ebx,edx
c0022df6:	85 d2                	test   edx,edx
c0022df8:	79 0d                	jns    c0022e07 <__divdi3+0x43>
c0022dfa:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022dfe:	f7 d8                	neg    eax
c0022e00:	83 d2 00             	adc    edx,0x0
c0022e03:	f7 da                	neg    edx
c0022e05:	89 d3                	mov    ebx,edx
c0022e07:	89 c7                	mov    edi,eax
c0022e09:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022e0c:	85 db                	test   ebx,ebx
c0022e0e:	75 48                	jne    c0022e58 <__divdi3+0x94>
c0022e10:	39 ef                	cmp    edi,ebp
c0022e12:	76 24                	jbe    c0022e38 <__divdi3+0x74>
c0022e14:	89 ea                	mov    edx,ebp
c0022e16:	f7 f7                	div    edi
c0022e18:	89 c1                	mov    ecx,eax
c0022e1a:	31 f6                	xor    esi,esi
c0022e1c:	89 c8                	mov    eax,ecx
c0022e1e:	89 f2                	mov    edx,esi
c0022e20:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022e24:	85 c9                	test   ecx,ecx
c0022e26:	74 07                	je     c0022e2f <__divdi3+0x6b>
c0022e28:	f7 d8                	neg    eax
c0022e2a:	83 d2 00             	adc    edx,0x0
c0022e2d:	f7 da                	neg    edx
c0022e2f:	83 c4 1c             	add    esp,0x1c
c0022e32:	5b                   	pop    ebx
c0022e33:	5e                   	pop    esi
c0022e34:	5f                   	pop    edi
c0022e35:	5d                   	pop    ebp
c0022e36:	c3                   	ret    
c0022e37:	90                   	nop
c0022e38:	85 ff                	test   edi,edi
c0022e3a:	75 0b                	jne    c0022e47 <__divdi3+0x83>
c0022e3c:	b8 01 00 00 00       	mov    eax,0x1
c0022e41:	31 d2                	xor    edx,edx
c0022e43:	f7 f3                	div    ebx
c0022e45:	89 c7                	mov    edi,eax
c0022e47:	31 d2                	xor    edx,edx
c0022e49:	89 e8                	mov    eax,ebp
c0022e4b:	f7 f7                	div    edi
c0022e4d:	89 c6                	mov    esi,eax
c0022e4f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022e52:	f7 f7                	div    edi
c0022e54:	89 c1                	mov    ecx,eax
c0022e56:	eb c4                	jmp    c0022e1c <__divdi3+0x58>
c0022e58:	39 eb                	cmp    ebx,ebp
c0022e5a:	77 3c                	ja     c0022e98 <__divdi3+0xd4>
c0022e5c:	0f bd f3             	bsr    esi,ebx
c0022e5f:	83 f6 1f             	xor    esi,0x1f
c0022e62:	75 40                	jne    c0022ea4 <__divdi3+0xe0>
c0022e64:	39 eb                	cmp    ebx,ebp
c0022e66:	72 09                	jb     c0022e71 <__divdi3+0xad>
c0022e68:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022e6b:	0f 87 97 00 00 00    	ja     c0022f08 <__divdi3+0x144>
c0022e71:	b9 01 00 00 00       	mov    ecx,0x1
c0022e76:	eb a4                	jmp    c0022e1c <__divdi3+0x58>
c0022e78:	f7 d9                	neg    ecx
c0022e7a:	83 d3 00             	adc    ebx,0x0
c0022e7d:	f7 db                	neg    ebx
c0022e7f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022e82:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0022e86:	89 dd                	mov    ebp,ebx
c0022e88:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022e90:	e9 5f ff ff ff       	jmp    c0022df4 <__divdi3+0x30>
c0022e95:	8d 76 00             	lea    esi,[esi+0x0]
c0022e98:	31 f6                	xor    esi,esi
c0022e9a:	31 c9                	xor    ecx,ecx
c0022e9c:	e9 7b ff ff ff       	jmp    c0022e1c <__divdi3+0x58>
c0022ea1:	8d 76 00             	lea    esi,[esi+0x0]
c0022ea4:	b8 20 00 00 00       	mov    eax,0x20
c0022ea9:	29 f0                	sub    eax,esi
c0022eab:	89 f1                	mov    ecx,esi
c0022ead:	d3 e3                	shl    ebx,cl
c0022eaf:	89 fa                	mov    edx,edi
c0022eb1:	88 c1                	mov    cl,al
c0022eb3:	d3 ea                	shr    edx,cl
c0022eb5:	09 da                	or     edx,ebx
c0022eb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022ebb:	89 f1                	mov    ecx,esi
c0022ebd:	d3 e7                	shl    edi,cl
c0022ebf:	89 eb                	mov    ebx,ebp
c0022ec1:	88 c1                	mov    cl,al
c0022ec3:	d3 eb                	shr    ebx,cl
c0022ec5:	89 f1                	mov    ecx,esi
c0022ec7:	d3 e5                	shl    ebp,cl
c0022ec9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0022ecc:	88 c1                	mov    cl,al
c0022ece:	d3 ea                	shr    edx,cl
c0022ed0:	09 d5                	or     ebp,edx
c0022ed2:	89 e8                	mov    eax,ebp
c0022ed4:	89 da                	mov    edx,ebx
c0022ed6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0022eda:	89 d3                	mov    ebx,edx
c0022edc:	89 c5                	mov    ebp,eax
c0022ede:	f7 e7                	mul    edi
c0022ee0:	39 d3                	cmp    ebx,edx
c0022ee2:	72 18                	jb     c0022efc <__divdi3+0x138>
c0022ee4:	74 0a                	je     c0022ef0 <__divdi3+0x12c>
c0022ee6:	89 e9                	mov    ecx,ebp
c0022ee8:	31 f6                	xor    esi,esi
c0022eea:	e9 2d ff ff ff       	jmp    c0022e1c <__divdi3+0x58>
c0022eef:	90                   	nop
c0022ef0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0022ef3:	89 f1                	mov    ecx,esi
c0022ef5:	d3 e7                	shl    edi,cl
c0022ef7:	39 c7                	cmp    edi,eax
c0022ef9:	73 eb                	jae    c0022ee6 <__divdi3+0x122>
c0022efb:	90                   	nop
c0022efc:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022eff:	31 f6                	xor    esi,esi
c0022f01:	e9 16 ff ff ff       	jmp    c0022e1c <__divdi3+0x58>
c0022f06:	66 90                	xchg   ax,ax
c0022f08:	31 c9                	xor    ecx,ecx
c0022f0a:	e9 0d ff ff ff       	jmp    c0022e1c <__divdi3+0x58>
c0022f0f:	90                   	nop

c0022f10 <__moddi3>:
c0022f10:	55                   	push   ebp
c0022f11:	57                   	push   edi
c0022f12:	56                   	push   esi
c0022f13:	53                   	push   ebx
c0022f14:	83 ec 2c             	sub    esp,0x2c
c0022f17:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022f1b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022f1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022f23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0022f27:	85 db                	test   ebx,ebx
c0022f29:	0f 88 85 00 00 00    	js     c0022fb4 <__moddi3+0xa4>
c0022f2f:	89 de                	mov    esi,ebx
c0022f31:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022f39:	89 d7                	mov    edi,edx
c0022f3b:	85 d2                	test   edx,edx
c0022f3d:	79 09                	jns    c0022f48 <__moddi3+0x38>
c0022f3f:	f7 d8                	neg    eax
c0022f41:	83 d2 00             	adc    edx,0x0
c0022f44:	f7 da                	neg    edx
c0022f46:	89 d7                	mov    edi,edx
c0022f48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f4c:	89 cd                	mov    ebp,ecx
c0022f4e:	85 ff                	test   edi,edi
c0022f50:	75 52                	jne    c0022fa4 <__moddi3+0x94>
c0022f52:	89 c3                	mov    ebx,eax
c0022f54:	39 f0                	cmp    eax,esi
c0022f56:	76 24                	jbe    c0022f7c <__moddi3+0x6c>
c0022f58:	89 c8                	mov    eax,ecx
c0022f5a:	89 f2                	mov    edx,esi
c0022f5c:	f7 f3                	div    ebx
c0022f5e:	89 d6                	mov    esi,edx
c0022f60:	89 f0                	mov    eax,esi
c0022f62:	31 d2                	xor    edx,edx
c0022f64:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022f68:	85 c9                	test   ecx,ecx
c0022f6a:	74 07                	je     c0022f73 <__moddi3+0x63>
c0022f6c:	f7 d8                	neg    eax
c0022f6e:	83 d2 00             	adc    edx,0x0
c0022f71:	f7 da                	neg    edx
c0022f73:	83 c4 2c             	add    esp,0x2c
c0022f76:	5b                   	pop    ebx
c0022f77:	5e                   	pop    esi
c0022f78:	5f                   	pop    edi
c0022f79:	5d                   	pop    ebp
c0022f7a:	c3                   	ret    
c0022f7b:	90                   	nop
c0022f7c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022f80:	85 db                	test   ebx,ebx
c0022f82:	75 0d                	jne    c0022f91 <__moddi3+0x81>
c0022f84:	b8 01 00 00 00       	mov    eax,0x1
c0022f89:	31 d2                	xor    edx,edx
c0022f8b:	f7 f7                	div    edi
c0022f8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f91:	89 f0                	mov    eax,esi
c0022f93:	31 d2                	xor    edx,edx
c0022f95:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022f99:	f7 f7                	div    edi
c0022f9b:	89 e8                	mov    eax,ebp
c0022f9d:	f7 f7                	div    edi
c0022f9f:	89 d6                	mov    esi,edx
c0022fa1:	eb bd                	jmp    c0022f60 <__moddi3+0x50>
c0022fa3:	90                   	nop
c0022fa4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022fa8:	39 f7                	cmp    edi,esi
c0022faa:	76 20                	jbe    c0022fcc <__moddi3+0xbc>
c0022fac:	89 c8                	mov    eax,ecx
c0022fae:	89 f2                	mov    edx,esi
c0022fb0:	eb b2                	jmp    c0022f64 <__moddi3+0x54>
c0022fb2:	66 90                	xchg   ax,ax
c0022fb4:	f7 d9                	neg    ecx
c0022fb6:	83 d3 00             	adc    ebx,0x0
c0022fb9:	f7 db                	neg    ebx
c0022fbb:	89 de                	mov    esi,ebx
c0022fbd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0022fc5:	e9 6f ff ff ff       	jmp    c0022f39 <__moddi3+0x29>
c0022fca:	66 90                	xchg   ax,ax
c0022fcc:	0f bd c7             	bsr    eax,edi
c0022fcf:	83 f0 1f             	xor    eax,0x1f
c0022fd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022fd6:	75 24                	jne    c0022ffc <__moddi3+0xec>
c0022fd8:	39 f7                	cmp    edi,esi
c0022fda:	72 06                	jb     c0022fe2 <__moddi3+0xd2>
c0022fdc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0022fe0:	77 0c                	ja     c0022fee <__moddi3+0xde>
c0022fe2:	89 e9                	mov    ecx,ebp
c0022fe4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0022fe8:	19 fe                	sbb    esi,edi
c0022fea:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0022fee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022ff2:	89 f2                	mov    edx,esi
c0022ff4:	e9 6b ff ff ff       	jmp    c0022f64 <__moddi3+0x54>
c0022ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0022ffc:	b8 20 00 00 00       	mov    eax,0x20
c0023001:	89 c2                	mov    edx,eax
c0023003:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023007:	29 da                	sub    edx,ebx
c0023009:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002300d:	88 d9                	mov    cl,bl
c002300f:	d3 e7                	shl    edi,cl
c0023011:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023015:	88 d1                	mov    cl,dl
c0023017:	d3 e8                	shr    eax,cl
c0023019:	09 c7                	or     edi,eax
c002301b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002301f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023023:	89 d8                	mov    eax,ebx
c0023025:	88 d9                	mov    cl,bl
c0023027:	d3 e7                	shl    edi,cl
c0023029:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002302d:	89 f3                	mov    ebx,esi
c002302f:	88 d1                	mov    cl,dl
c0023031:	d3 eb                	shr    ebx,cl
c0023033:	89 c7                	mov    edi,eax
c0023035:	88 c1                	mov    cl,al
c0023037:	d3 e6                	shl    esi,cl
c0023039:	89 e8                	mov    eax,ebp
c002303b:	88 d1                	mov    cl,dl
c002303d:	d3 e8                	shr    eax,cl
c002303f:	09 f0                	or     eax,esi
c0023041:	89 f9                	mov    ecx,edi
c0023043:	d3 e5                	shl    ebp,cl
c0023045:	89 da                	mov    edx,ebx
c0023047:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002304b:	89 d3                	mov    ebx,edx
c002304d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023051:	89 c6                	mov    esi,eax
c0023053:	89 d1                	mov    ecx,edx
c0023055:	39 d3                	cmp    ebx,edx
c0023057:	72 27                	jb     c0023080 <__moddi3+0x170>
c0023059:	74 21                	je     c002307c <__moddi3+0x16c>
c002305b:	29 f5                	sub    ebp,esi
c002305d:	19 cb                	sbb    ebx,ecx
c002305f:	89 de                	mov    esi,ebx
c0023061:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0023065:	d3 e6                	shl    esi,cl
c0023067:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002306b:	89 f9                	mov    ecx,edi
c002306d:	d3 ed                	shr    ebp,cl
c002306f:	09 ee                	or     esi,ebp
c0023071:	89 f0                	mov    eax,esi
c0023073:	d3 eb                	shr    ebx,cl
c0023075:	89 da                	mov    edx,ebx
c0023077:	e9 e8 fe ff ff       	jmp    c0022f64 <__moddi3+0x54>
c002307c:	39 c5                	cmp    ebp,eax
c002307e:	73 db                	jae    c002305b <__moddi3+0x14b>
c0023080:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0023084:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0023088:	89 d1                	mov    ecx,edx
c002308a:	89 c6                	mov    esi,eax
c002308c:	eb cd                	jmp    c002305b <__moddi3+0x14b>
c002308e:	66 90                	xchg   ax,ax

c0023090 <__udivdi3>:
c0023090:	55                   	push   ebp
c0023091:	57                   	push   edi
c0023092:	56                   	push   esi
c0023093:	53                   	push   ebx
c0023094:	83 ec 1c             	sub    esp,0x1c
c0023097:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002309b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002309f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00230a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00230a7:	85 d2                	test   edx,edx
c00230a9:	75 41                	jne    c00230ec <__udivdi3+0x5c>
c00230ab:	39 f7                	cmp    edi,esi
c00230ad:	76 15                	jbe    c00230c4 <__udivdi3+0x34>
c00230af:	89 e8                	mov    eax,ebp
c00230b1:	89 f2                	mov    edx,esi
c00230b3:	f7 f7                	div    edi
c00230b5:	31 db                	xor    ebx,ebx
c00230b7:	89 da                	mov    edx,ebx
c00230b9:	83 c4 1c             	add    esp,0x1c
c00230bc:	5b                   	pop    ebx
c00230bd:	5e                   	pop    esi
c00230be:	5f                   	pop    edi
c00230bf:	5d                   	pop    ebp
c00230c0:	c3                   	ret    
c00230c1:	8d 76 00             	lea    esi,[esi+0x0]
c00230c4:	89 f9                	mov    ecx,edi
c00230c6:	85 ff                	test   edi,edi
c00230c8:	75 0b                	jne    c00230d5 <__udivdi3+0x45>
c00230ca:	b8 01 00 00 00       	mov    eax,0x1
c00230cf:	31 d2                	xor    edx,edx
c00230d1:	f7 f7                	div    edi
c00230d3:	89 c1                	mov    ecx,eax
c00230d5:	31 d2                	xor    edx,edx
c00230d7:	89 f0                	mov    eax,esi
c00230d9:	f7 f1                	div    ecx
c00230db:	89 c3                	mov    ebx,eax
c00230dd:	89 e8                	mov    eax,ebp
c00230df:	f7 f1                	div    ecx
c00230e1:	89 da                	mov    edx,ebx
c00230e3:	83 c4 1c             	add    esp,0x1c
c00230e6:	5b                   	pop    ebx
c00230e7:	5e                   	pop    esi
c00230e8:	5f                   	pop    edi
c00230e9:	5d                   	pop    ebp
c00230ea:	c3                   	ret    
c00230eb:	90                   	nop
c00230ec:	39 f2                	cmp    edx,esi
c00230ee:	77 1c                	ja     c002310c <__udivdi3+0x7c>
c00230f0:	0f bd da             	bsr    ebx,edx
c00230f3:	83 f3 1f             	xor    ebx,0x1f
c00230f6:	75 24                	jne    c002311c <__udivdi3+0x8c>
c00230f8:	39 f2                	cmp    edx,esi
c00230fa:	72 08                	jb     c0023104 <__udivdi3+0x74>
c00230fc:	39 ef                	cmp    edi,ebp
c00230fe:	0f 87 84 00 00 00    	ja     c0023188 <__udivdi3+0xf8>
c0023104:	b8 01 00 00 00       	mov    eax,0x1
c0023109:	eb ac                	jmp    c00230b7 <__udivdi3+0x27>
c002310b:	90                   	nop
c002310c:	31 db                	xor    ebx,ebx
c002310e:	31 c0                	xor    eax,eax
c0023110:	89 da                	mov    edx,ebx
c0023112:	83 c4 1c             	add    esp,0x1c
c0023115:	5b                   	pop    ebx
c0023116:	5e                   	pop    esi
c0023117:	5f                   	pop    edi
c0023118:	5d                   	pop    ebp
c0023119:	c3                   	ret    
c002311a:	66 90                	xchg   ax,ax
c002311c:	b8 20 00 00 00       	mov    eax,0x20
c0023121:	29 d8                	sub    eax,ebx
c0023123:	88 d9                	mov    cl,bl
c0023125:	d3 e2                	shl    edx,cl
c0023127:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002312b:	89 fa                	mov    edx,edi
c002312d:	88 c1                	mov    cl,al
c002312f:	d3 ea                	shr    edx,cl
c0023131:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023135:	09 d1                	or     ecx,edx
c0023137:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002313b:	88 d9                	mov    cl,bl
c002313d:	d3 e7                	shl    edi,cl
c002313f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023143:	89 f7                	mov    edi,esi
c0023145:	88 c1                	mov    cl,al
c0023147:	d3 ef                	shr    edi,cl
c0023149:	88 d9                	mov    cl,bl
c002314b:	d3 e6                	shl    esi,cl
c002314d:	89 ea                	mov    edx,ebp
c002314f:	88 c1                	mov    cl,al
c0023151:	d3 ea                	shr    edx,cl
c0023153:	09 d6                	or     esi,edx
c0023155:	89 f0                	mov    eax,esi
c0023157:	89 fa                	mov    edx,edi
c0023159:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002315d:	89 d7                	mov    edi,edx
c002315f:	89 c6                	mov    esi,eax
c0023161:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0023165:	39 d7                	cmp    edi,edx
c0023167:	72 13                	jb     c002317c <__udivdi3+0xec>
c0023169:	74 09                	je     c0023174 <__udivdi3+0xe4>
c002316b:	89 f0                	mov    eax,esi
c002316d:	31 db                	xor    ebx,ebx
c002316f:	e9 43 ff ff ff       	jmp    c00230b7 <__udivdi3+0x27>
c0023174:	88 d9                	mov    cl,bl
c0023176:	d3 e5                	shl    ebp,cl
c0023178:	39 c5                	cmp    ebp,eax
c002317a:	73 ef                	jae    c002316b <__udivdi3+0xdb>
c002317c:	8d 46 ff             	lea    eax,[esi-0x1]
c002317f:	31 db                	xor    ebx,ebx
c0023181:	e9 31 ff ff ff       	jmp    c00230b7 <__udivdi3+0x27>
c0023186:	66 90                	xchg   ax,ax
c0023188:	31 c0                	xor    eax,eax
c002318a:	e9 28 ff ff ff       	jmp    c00230b7 <__udivdi3+0x27>
c002318f:	90                   	nop

c0023190 <__umoddi3>:
c0023190:	55                   	push   ebp
c0023191:	57                   	push   edi
c0023192:	56                   	push   esi
c0023193:	53                   	push   ebx
c0023194:	83 ec 1c             	sub    esp,0x1c
c0023197:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002319b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002319f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00231a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00231a7:	89 da                	mov    edx,ebx
c00231a9:	85 c0                	test   eax,eax
c00231ab:	75 37                	jne    c00231e4 <__umoddi3+0x54>
c00231ad:	39 df                	cmp    edi,ebx
c00231af:	76 13                	jbe    c00231c4 <__umoddi3+0x34>
c00231b1:	89 f0                	mov    eax,esi
c00231b3:	f7 f7                	div    edi
c00231b5:	89 d0                	mov    eax,edx
c00231b7:	31 d2                	xor    edx,edx
c00231b9:	83 c4 1c             	add    esp,0x1c
c00231bc:	5b                   	pop    ebx
c00231bd:	5e                   	pop    esi
c00231be:	5f                   	pop    edi
c00231bf:	5d                   	pop    ebp
c00231c0:	c3                   	ret    
c00231c1:	8d 76 00             	lea    esi,[esi+0x0]
c00231c4:	89 fd                	mov    ebp,edi
c00231c6:	85 ff                	test   edi,edi
c00231c8:	75 0b                	jne    c00231d5 <__umoddi3+0x45>
c00231ca:	b8 01 00 00 00       	mov    eax,0x1
c00231cf:	31 d2                	xor    edx,edx
c00231d1:	f7 f7                	div    edi
c00231d3:	89 c5                	mov    ebp,eax
c00231d5:	89 d8                	mov    eax,ebx
c00231d7:	31 d2                	xor    edx,edx
c00231d9:	f7 f5                	div    ebp
c00231db:	89 f0                	mov    eax,esi
c00231dd:	f7 f5                	div    ebp
c00231df:	89 d0                	mov    eax,edx
c00231e1:	eb d4                	jmp    c00231b7 <__umoddi3+0x27>
c00231e3:	90                   	nop
c00231e4:	89 f1                	mov    ecx,esi
c00231e6:	39 d8                	cmp    eax,ebx
c00231e8:	76 0a                	jbe    c00231f4 <__umoddi3+0x64>
c00231ea:	89 f0                	mov    eax,esi
c00231ec:	83 c4 1c             	add    esp,0x1c
c00231ef:	5b                   	pop    ebx
c00231f0:	5e                   	pop    esi
c00231f1:	5f                   	pop    edi
c00231f2:	5d                   	pop    ebp
c00231f3:	c3                   	ret    
c00231f4:	0f bd e8             	bsr    ebp,eax
c00231f7:	83 f5 1f             	xor    ebp,0x1f
c00231fa:	75 1c                	jne    c0023218 <__umoddi3+0x88>
c00231fc:	39 d8                	cmp    eax,ebx
c00231fe:	72 04                	jb     c0023204 <__umoddi3+0x74>
c0023200:	39 f7                	cmp    edi,esi
c0023202:	77 08                	ja     c002320c <__umoddi3+0x7c>
c0023204:	89 da                	mov    edx,ebx
c0023206:	29 fe                	sub    esi,edi
c0023208:	19 c2                	sbb    edx,eax
c002320a:	89 f1                	mov    ecx,esi
c002320c:	89 c8                	mov    eax,ecx
c002320e:	83 c4 1c             	add    esp,0x1c
c0023211:	5b                   	pop    ebx
c0023212:	5e                   	pop    esi
c0023213:	5f                   	pop    edi
c0023214:	5d                   	pop    ebp
c0023215:	c3                   	ret    
c0023216:	66 90                	xchg   ax,ax
c0023218:	ba 20 00 00 00       	mov    edx,0x20
c002321d:	29 ea                	sub    edx,ebp
c002321f:	89 e9                	mov    ecx,ebp
c0023221:	d3 e0                	shl    eax,cl
c0023223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023227:	89 f8                	mov    eax,edi
c0023229:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002322d:	88 d1                	mov    cl,dl
c002322f:	d3 e8                	shr    eax,cl
c0023231:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023235:	09 c1                	or     ecx,eax
c0023237:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002323b:	89 e9                	mov    ecx,ebp
c002323d:	d3 e7                	shl    edi,cl
c002323f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0023243:	89 d8                	mov    eax,ebx
c0023245:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023249:	88 d1                	mov    cl,dl
c002324b:	d3 e8                	shr    eax,cl
c002324d:	89 c7                	mov    edi,eax
c002324f:	89 e9                	mov    ecx,ebp
c0023251:	d3 e3                	shl    ebx,cl
c0023253:	89 f0                	mov    eax,esi
c0023255:	88 d1                	mov    cl,dl
c0023257:	d3 e8                	shr    eax,cl
c0023259:	09 d8                	or     eax,ebx
c002325b:	89 e9                	mov    ecx,ebp
c002325d:	d3 e6                	shl    esi,cl
c002325f:	89 f3                	mov    ebx,esi
c0023261:	89 fa                	mov    edx,edi
c0023263:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0023267:	89 d1                	mov    ecx,edx
c0023269:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002326d:	89 c6                	mov    esi,eax
c002326f:	89 d7                	mov    edi,edx
c0023271:	39 d1                	cmp    ecx,edx
c0023273:	72 27                	jb     c002329c <__umoddi3+0x10c>
c0023275:	74 21                	je     c0023298 <__umoddi3+0x108>
c0023277:	89 ca                	mov    edx,ecx
c0023279:	29 f3                	sub    ebx,esi
c002327b:	19 fa                	sbb    edx,edi
c002327d:	89 d0                	mov    eax,edx
c002327f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0023283:	d3 e0                	shl    eax,cl
c0023285:	89 e9                	mov    ecx,ebp
c0023287:	d3 eb                	shr    ebx,cl
c0023289:	09 d8                	or     eax,ebx
c002328b:	d3 ea                	shr    edx,cl
c002328d:	83 c4 1c             	add    esp,0x1c
c0023290:	5b                   	pop    ebx
c0023291:	5e                   	pop    esi
c0023292:	5f                   	pop    edi
c0023293:	5d                   	pop    ebp
c0023294:	c3                   	ret    
c0023295:	8d 76 00             	lea    esi,[esi+0x0]
c0023298:	39 c3                	cmp    ebx,eax
c002329a:	73 db                	jae    c0023277 <__umoddi3+0xe7>
c002329c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00232a0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00232a4:	89 d7                	mov    edi,edx
c00232a6:	89 c6                	mov    esi,eax
c00232a8:	eb cd                	jmp    c0023277 <__umoddi3+0xe7>

Disassembly of section .init:

c00232aa <_init>:
c00232aa:	55                   	push   ebp
c00232ab:	89 e5                	mov    ebp,esp
c00232ad:	e8 66 ce fd ff       	call   c0000118 <frame_dummy>
c00232b2:	e8 e5 fa ff ff       	call   c0022d9c <__do_global_ctors_aux>
c00232b7:	5d                   	pop    ebp
c00232b8:	c3                   	ret    

Disassembly of section .fini:

c00232b9 <_fini>:
c00232b9:	55                   	push   ebp
c00232ba:	89 e5                	mov    ebp,esp
c00232bc:	e8 e7 cd fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00232c1:	5d                   	pop    ebp
c00232c2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00232c4 <Computer::~Computer()>:
c00232c4:	83 ec 0c             	sub    esp,0xc
c00232c7:	ba 40 4a 02 c0       	mov    edx,0xc0024a40
c00232cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232d0:	89 10                	mov    DWORD PTR [eax],edx
c00232d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232d6:	83 ec 0c             	sub    esp,0xc
c00232d9:	50                   	push   eax
c00232da:	e8 c1 b1 fe ff       	call   c000e4a0 <Device::~Device()>
c00232df:	83 c4 10             	add    esp,0x10
c00232e2:	90                   	nop
c00232e3:	83 c4 0c             	add    esp,0xc
c00232e6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00232e8 <Computer::~Computer()>:
c00232e8:	83 ec 0c             	sub    esp,0xc
c00232eb:	83 ec 0c             	sub    esp,0xc
c00232ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232f2:	e8 cd ff ff ff       	call   c00232c4 <Computer::~Computer()>
c00232f7:	83 c4 10             	add    esp,0x10
c00232fa:	83 ec 08             	sub    esp,0x8
c00232fd:	68 ec 01 00 00       	push   0x1ec
c0023302:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023306:	e8 73 9c fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c002330b:	83 c4 10             	add    esp,0x10
c002330e:	83 c4 0c             	add    esp,0xc
c0023311:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0023312 <idleCommon()>:
c0023312:	83 ec 0c             	sub    esp,0xc
c0023315:	fa                   	cli    
c0023316:	ff 05 a8 a1 02 c0    	inc    DWORD PTR ds:0xc002a1a8
c002331c:	e8 7f 5c ff ff       	call   c0018fa0 <schedule()>
c0023321:	a1 a8 a1 02 c0       	mov    eax,ds:0xc002a1a8
c0023326:	48                   	dec    eax
c0023327:	a3 a8 a1 02 c0       	mov    ds:0xc002a1a8,eax
c002332c:	75 01                	jne    c002332f <idleCommon()+0x1d>
c002332e:	fb                   	sti    
c002332f:	83 c4 0c             	add    esp,0xc
c0023332:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0023334 <LinkedList<UnixFile>::~LinkedList()>:
c0023334:	90                   	nop
c0023335:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0023336 <LinkedList<UnixFile>::LinkedList()>:
c0023336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002333a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023344:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002334b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002334f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023356:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002335a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023364:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002336b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002336f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023376:	90                   	nop
c0023377:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0023378 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0023378:	83 ec 0c             	sub    esp,0xc
c002337b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0023380:	75 10                	jne    c0023392 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0023382:	83 ec 0c             	sub    esp,0xc
c0023385:	68 10 4e 02 c0       	push   0xc0024e10
c002338a:	e8 a2 1d ff ff       	call   c0015131 <Krnl::panic(char const*)>
c002338f:	83 c4 10             	add    esp,0x10
c0023392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023396:	8b 00                	mov    eax,DWORD PTR [eax]
c0023398:	85 c0                	test   eax,eax
c002339a:	74 34                	je     c00233d0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002339c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00233a3:	85 c0                	test   eax,eax
c00233a5:	74 29                	je     c00233d0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00233a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00233ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00233b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00233b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00233bd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00233c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00233c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00233ce:	eb 65                	jmp    c0023435 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00233d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00233d6:	85 c0                	test   eax,eax
c00233d8:	75 4b                	jne    c0023425 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00233da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00233e1:	85 c0                	test   eax,eax
c00233e3:	75 40                	jne    c0023425 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00233e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233e9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00233ed:	89 10                	mov    DWORD PTR [eax],edx
c00233ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233f3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00233f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00233fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023401:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002340c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002340f:	85 c0                	test   eax,eax
c0023411:	74 22                	je     c0023435 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023413:	83 ec 0c             	sub    esp,0xc
c0023416:	68 32 4e 02 c0       	push   0xc0024e32
c002341b:	e8 11 1d ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0023420:	83 c4 10             	add    esp,0x10
c0023423:	eb 10                	jmp    c0023435 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0023425:	83 ec 0c             	sub    esp,0xc
c0023428:	68 3c 4e 02 c0       	push   0xc0024e3c
c002342d:	e8 ff 1c ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0023432:	83 c4 10             	add    esp,0x10
c0023435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023439:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002343c:	8d 50 01             	lea    edx,[eax+0x1]
c002343f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023443:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023446:	90                   	nop
c0023447:	83 c4 0c             	add    esp,0xc
c002344a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002344c <LinkedList<UnixFile>::getFirstElement()>:
c002344c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023450:	8b 00                	mov    eax,DWORD PTR [eax]
c0023452:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0023454 <LinkedList<UnixFile>::removeFirst()>:
c0023454:	83 ec 0c             	sub    esp,0xc
c0023457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002345b:	8b 00                	mov    eax,DWORD PTR [eax]
c002345d:	85 c0                	test   eax,eax
c002345f:	75 12                	jne    c0023473 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0023461:	83 ec 0c             	sub    esp,0xc
c0023464:	68 48 4e 02 c0       	push   0xc0024e48
c0023469:	e8 c3 1c ff ff       	call   c0015131 <Krnl::panic(char const*)>
c002346e:	83 c4 10             	add    esp,0x10
c0023471:	eb 7e                	jmp    c00234f1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0023473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023477:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002347a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002347d:	85 c0                	test   eax,eax
c002347f:	74 10                	je     c0023491 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0023481:	83 ec 0c             	sub    esp,0xc
c0023484:	68 93 4e 02 c0       	push   0xc0024e93
c0023489:	e8 a3 1c ff ff       	call   c0015131 <Krnl::panic(char const*)>
c002348e:	83 c4 10             	add    esp,0x10
c0023491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023495:	8b 00                	mov    eax,DWORD PTR [eax]
c0023497:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002349a:	85 c0                	test   eax,eax
c002349c:	75 33                	jne    c00234d1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002349e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00234a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00234b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00234ba:	83 f8 01             	cmp    eax,0x1
c00234bd:	74 21                	je     c00234e0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00234bf:	83 ec 0c             	sub    esp,0xc
c00234c2:	68 6c 4e 02 c0       	push   0xc0024e6c
c00234c7:	e8 65 1c ff ff       	call   c0015131 <Krnl::panic(char const*)>
c00234cc:	83 c4 10             	add    esp,0x10
c00234cf:	eb 0f                	jmp    c00234e0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00234d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00234d7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00234da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234de:	89 10                	mov    DWORD PTR [eax],edx
c00234e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00234e7:	8d 50 ff             	lea    edx,[eax-0x1]
c00234ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00234f1:	83 c4 0c             	add    esp,0xc
c00234f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00234f6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00234f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00234fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00234fd:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00234fe <DriverlessDevice::~DriverlessDevice()>:
c00234fe:	ba bc 56 02 c0       	mov    edx,0xc00256bc
c0023503:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023507:	89 10                	mov    DWORD PTR [eax],edx
c0023509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002350d:	50                   	push   eax
c002350e:	e8 8d af fe ff       	call   c000e4a0 <Device::~Device()>
c0023513:	83 c4 04             	add    esp,0x4
c0023516:	90                   	nop
c0023517:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0023518 <DriverlessDevice::~DriverlessDevice()>:
c0023518:	83 ec 0c             	sub    esp,0xc
c002351b:	83 ec 0c             	sub    esp,0xc
c002351e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023522:	e8 d7 ff ff ff       	call   c00234fe <DriverlessDevice::~DriverlessDevice()>
c0023527:	83 c4 10             	add    esp,0x10
c002352a:	83 ec 08             	sub    esp,0x8
c002352d:	68 58 01 00 00       	push   0x158
c0023532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023536:	e8 43 9a fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c002353b:	83 c4 10             	add    esp,0x10
c002353e:	83 c4 0c             	add    esp,0xc
c0023541:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0023542 <LinkedList<Device>::addElement(Device*)>:
c0023542:	83 ec 0c             	sub    esp,0xc
c0023545:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002354a:	75 10                	jne    c002355c <LinkedList<Device>::addElement(Device*)+0x1a>
c002354c:	83 ec 0c             	sub    esp,0xc
c002354f:	68 10 4e 02 c0       	push   0xc0024e10
c0023554:	e8 d8 1b ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0023559:	83 c4 10             	add    esp,0x10
c002355c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023560:	8b 00                	mov    eax,DWORD PTR [eax]
c0023562:	85 c0                	test   eax,eax
c0023564:	74 3a                	je     c00235a0 <LinkedList<Device>::addElement(Device*)+0x5e>
c0023566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002356a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002356d:	85 c0                	test   eax,eax
c002356f:	74 2f                	je     c00235a0 <LinkedList<Device>::addElement(Device*)+0x5e>
c0023571:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023575:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023578:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002357c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0023582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023586:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002358a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002358d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023591:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023594:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002359e:	eb 68                	jmp    c0023608 <LinkedList<Device>::addElement(Device*)+0xc6>
c00235a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00235a6:	85 c0                	test   eax,eax
c00235a8:	75 4e                	jne    c00235f8 <LinkedList<Device>::addElement(Device*)+0xb6>
c00235aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00235b1:	85 c0                	test   eax,eax
c00235b3:	75 43                	jne    c00235f8 <LinkedList<Device>::addElement(Device*)+0xb6>
c00235b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00235bd:	89 10                	mov    DWORD PTR [eax],edx
c00235bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00235c7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00235ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00235d1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00235db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00235df:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00235e2:	85 c0                	test   eax,eax
c00235e4:	74 22                	je     c0023608 <LinkedList<Device>::addElement(Device*)+0xc6>
c00235e6:	83 ec 0c             	sub    esp,0xc
c00235e9:	68 32 4e 02 c0       	push   0xc0024e32
c00235ee:	e8 3e 1b ff ff       	call   c0015131 <Krnl::panic(char const*)>
c00235f3:	83 c4 10             	add    esp,0x10
c00235f6:	eb 10                	jmp    c0023608 <LinkedList<Device>::addElement(Device*)+0xc6>
c00235f8:	83 ec 0c             	sub    esp,0xc
c00235fb:	68 3c 4e 02 c0       	push   0xc0024e3c
c0023600:	e8 2c 1b ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0023605:	83 c4 10             	add    esp,0x10
c0023608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002360c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002360f:	8d 50 01             	lea    edx,[eax+0x1]
c0023612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023616:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023619:	90                   	nop
c002361a:	83 c4 0c             	add    esp,0xc
c002361d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002361e <LinkedList<Device>::LinkedList()>:
c002361e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002362c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023633:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023637:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002363e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023642:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002364c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023657:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002365e:	90                   	nop
c002365f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0023660 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0023660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023664:	8b 00                	mov    eax,DWORD PTR [eax]
c0023666:	85 c0                	test   eax,eax
c0023668:	75 0e                	jne    c0023678 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002366a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002366e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023671:	85 c0                	test   eax,eax
c0023673:	75 03                	jne    c0023678 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0023675:	b0 01                	mov    al,0x1
c0023677:	c3                   	ret    
c0023678:	b0 00                	mov    al,0x0
c002367a:	90                   	nop
c002367b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002367c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002367c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023680:	8b 00                	mov    eax,DWORD PTR [eax]
c0023682:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0023684 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0023684:	83 ec 0c             	sub    esp,0xc
c0023687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002368b:	8b 00                	mov    eax,DWORD PTR [eax]
c002368d:	85 c0                	test   eax,eax
c002368f:	75 17                	jne    c00236a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0023691:	83 ec 0c             	sub    esp,0xc
c0023694:	68 48 4e 02 c0       	push   0xc0024e48
c0023699:	e8 93 1a ff ff       	call   c0015131 <Krnl::panic(char const*)>
c002369e:	83 c4 10             	add    esp,0x10
c00236a1:	e9 92 00 00 00       	jmp    c0023738 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c00236a6:	66 90                	xchg   ax,ax
c00236a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00236af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00236b2:	85 c0                	test   eax,eax
c00236b4:	0f 95 c0             	setne  al
c00236b7:	84 c0                	test   al,al
c00236b9:	74 11                	je     c00236cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c00236bb:	83 ec 0c             	sub    esp,0xc
c00236be:	68 93 4e 02 c0       	push   0xc0024e93
c00236c3:	e8 69 1a ff ff       	call   c0015131 <Krnl::panic(char const*)>
c00236c8:	83 c4 10             	add    esp,0x10
c00236cb:	90                   	nop
c00236cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00236d2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00236d5:	85 c0                	test   eax,eax
c00236d7:	0f 94 c0             	sete   al
c00236da:	84 c0                	test   al,al
c00236dc:	74 36                	je     c0023714 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c00236de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00236e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00236f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00236f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00236fa:	83 f8 01             	cmp    eax,0x1
c00236fd:	74 25                	je     c0023724 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00236ff:	83 ec 0c             	sub    esp,0xc
c0023702:	68 6c 4e 02 c0       	push   0xc0024e6c
c0023707:	e8 25 1a ff ff       	call   c0015131 <Krnl::panic(char const*)>
c002370c:	83 c4 10             	add    esp,0x10
c002370f:	eb 13                	jmp    c0023724 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0023711:	8d 76 00             	lea    esi,[esi+0x0]
c0023714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023718:	8b 00                	mov    eax,DWORD PTR [eax]
c002371a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002371d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023721:	89 10                	mov    DWORD PTR [eax],edx
c0023723:	90                   	nop
c0023724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023728:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002372b:	8d 50 ff             	lea    edx,[eax-0x1]
c002372e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023732:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023735:	8d 76 00             	lea    esi,[esi+0x0]
c0023738:	83 c4 0c             	add    esp,0xc
c002373b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002373c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002373c:	83 ec 0c             	sub    esp,0xc
c002373f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0023744:	75 12                	jne    c0023758 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0023746:	83 ec 0c             	sub    esp,0xc
c0023749:	68 10 4e 02 c0       	push   0xc0024e10
c002374e:	e8 de 19 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0023753:	83 c4 10             	add    esp,0x10
c0023756:	66 90                	xchg   ax,ax
c0023758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002375c:	8b 00                	mov    eax,DWORD PTR [eax]
c002375e:	85 c0                	test   eax,eax
c0023760:	74 36                	je     c0023798 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0023762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023766:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023769:	85 c0                	test   eax,eax
c002376b:	74 2b                	je     c0023798 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002376d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023771:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0023774:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023778:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002377b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002377f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023783:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0023786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002378a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002378d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0023794:	eb 6a                	jmp    c0023800 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0023796:	66 90                	xchg   ax,ax
c0023798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002379c:	8b 00                	mov    eax,DWORD PTR [eax]
c002379e:	85 c0                	test   eax,eax
c00237a0:	75 4e                	jne    c00237f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00237a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00237a9:	85 c0                	test   eax,eax
c00237ab:	75 43                	jne    c00237f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00237ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00237b5:	89 10                	mov    DWORD PTR [eax],edx
c00237b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00237bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00237c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00237c9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00237d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00237d7:	85 c0                	test   eax,eax
c00237d9:	74 25                	je     c0023800 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00237db:	83 ec 0c             	sub    esp,0xc
c00237de:	68 32 4e 02 c0       	push   0xc0024e32
c00237e3:	e8 49 19 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c00237e8:	83 c4 10             	add    esp,0x10
c00237eb:	eb 13                	jmp    c0023800 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00237ed:	8d 76 00             	lea    esi,[esi+0x0]
c00237f0:	83 ec 0c             	sub    esp,0xc
c00237f3:	68 3c 4e 02 c0       	push   0xc0024e3c
c00237f8:	e8 34 19 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c00237fd:	83 c4 10             	add    esp,0x10
c0023800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023804:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023807:	8d 50 01             	lea    edx,[eax+0x1]
c002380a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002380e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023811:	90                   	nop
c0023812:	83 c4 0c             	add    esp,0xc
c0023815:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0023818 <ACPI::~ACPI()>:
c0023818:	83 ec 0c             	sub    esp,0xc
c002381b:	ba e4 61 02 c0       	mov    edx,0xc00261e4
c0023820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023824:	89 10                	mov    DWORD PTR [eax],edx
c0023826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002382a:	83 ec 0c             	sub    esp,0xc
c002382d:	50                   	push   eax
c002382e:	e8 6d ac fe ff       	call   c000e4a0 <Device::~Device()>
c0023833:	83 c4 10             	add    esp,0x10
c0023836:	90                   	nop
c0023837:	83 c4 0c             	add    esp,0xc
c002383a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002383c <ACPI::~ACPI()>:
c002383c:	83 ec 0c             	sub    esp,0xc
c002383f:	83 ec 0c             	sub    esp,0xc
c0023842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023846:	e8 cd ff ff ff       	call   c0023818 <ACPI::~ACPI()>
c002384b:	83 c4 10             	add    esp,0x10
c002384e:	83 ec 08             	sub    esp,0x8
c0023851:	68 64 12 00 00       	push   0x1264
c0023856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002385a:	e8 1f 97 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c002385f:	83 c4 10             	add    esp,0x10
c0023862:	83 c4 0c             	add    esp,0xc
c0023865:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0023868 <LinkedList<Device>::~LinkedList()>:
c0023868:	90                   	nop
c0023869:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002386c <LinkedList<Device>::isEmpty()>:
c002386c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023870:	8b 00                	mov    eax,DWORD PTR [eax]
c0023872:	85 c0                	test   eax,eax
c0023874:	75 0e                	jne    c0023884 <LinkedList<Device>::isEmpty()+0x18>
c0023876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002387a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002387d:	85 c0                	test   eax,eax
c002387f:	75 03                	jne    c0023884 <LinkedList<Device>::isEmpty()+0x18>
c0023881:	b0 01                	mov    al,0x1
c0023883:	c3                   	ret    
c0023884:	b0 00                	mov    al,0x0
c0023886:	90                   	nop
c0023887:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0023888 <LinkedList<Device>::getFirstElement()>:
c0023888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002388c:	8b 00                	mov    eax,DWORD PTR [eax]
c002388e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0023890 <LinkedList<Device>::removeFirst()>:
c0023890:	83 ec 0c             	sub    esp,0xc
c0023893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023897:	8b 00                	mov    eax,DWORD PTR [eax]
c0023899:	85 c0                	test   eax,eax
c002389b:	75 17                	jne    c00238b4 <LinkedList<Device>::removeFirst()+0x24>
c002389d:	83 ec 0c             	sub    esp,0xc
c00238a0:	68 48 4e 02 c0       	push   0xc0024e48
c00238a5:	e8 87 18 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c00238aa:	83 c4 10             	add    esp,0x10
c00238ad:	e9 92 00 00 00       	jmp    c0023944 <LinkedList<Device>::removeFirst()+0xb4>
c00238b2:	66 90                	xchg   ax,ax
c00238b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00238bb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00238c1:	85 c0                	test   eax,eax
c00238c3:	74 13                	je     c00238d8 <LinkedList<Device>::removeFirst()+0x48>
c00238c5:	83 ec 0c             	sub    esp,0xc
c00238c8:	68 93 4e 02 c0       	push   0xc0024e93
c00238cd:	e8 5f 18 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c00238d2:	83 c4 10             	add    esp,0x10
c00238d5:	8d 76 00             	lea    esi,[esi+0x0]
c00238d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00238de:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00238e4:	85 c0                	test   eax,eax
c00238e6:	75 34                	jne    c002391c <LinkedList<Device>::removeFirst()+0x8c>
c00238e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00238f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00238fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023901:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023904:	83 f8 01             	cmp    eax,0x1
c0023907:	74 27                	je     c0023930 <LinkedList<Device>::removeFirst()+0xa0>
c0023909:	83 ec 0c             	sub    esp,0xc
c002390c:	68 6c 4e 02 c0       	push   0xc0024e6c
c0023911:	e8 1b 18 ff ff       	call   c0015131 <Krnl::panic(char const*)>
c0023916:	83 c4 10             	add    esp,0x10
c0023919:	eb 15                	jmp    c0023930 <LinkedList<Device>::removeFirst()+0xa0>
c002391b:	90                   	nop
c002391c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023920:	8b 00                	mov    eax,DWORD PTR [eax]
c0023922:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0023928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002392c:	89 10                	mov    DWORD PTR [eax],edx
c002392e:	66 90                	xchg   ax,ax
c0023930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023934:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023937:	8d 50 ff             	lea    edx,[eax-0x1]
c002393a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002393e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0023941:	8d 76 00             	lea    esi,[esi+0x0]
c0023944:	83 c4 0c             	add    esp,0xc
c0023947:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0023948 <CPU::~CPU()>:
c0023948:	83 ec 0c             	sub    esp,0xc
c002394b:	ba 74 67 02 c0       	mov    edx,0xc0026774
c0023950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023954:	89 10                	mov    DWORD PTR [eax],edx
c0023956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002395a:	83 ec 0c             	sub    esp,0xc
c002395d:	50                   	push   eax
c002395e:	e8 3d ab fe ff       	call   c000e4a0 <Device::~Device()>
c0023963:	83 c4 10             	add    esp,0x10
c0023966:	90                   	nop
c0023967:	83 c4 0c             	add    esp,0xc
c002396a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002396c <CPU::~CPU()>:
c002396c:	83 ec 0c             	sub    esp,0xc
c002396f:	83 ec 0c             	sub    esp,0xc
c0023972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023976:	e8 cd ff ff ff       	call   c0023948 <CPU::~CPU()>
c002397b:	83 c4 10             	add    esp,0x10
c002397e:	83 ec 08             	sub    esp,0x8
c0023981:	68 98 11 00 00       	push   0x1198
c0023986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002398a:	e8 ef 95 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c002398f:	83 c4 10             	add    esp,0x10
c0023992:	83 c4 0c             	add    esp,0xc
c0023995:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0023998 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0023998:	90                   	nop
c0023999:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002399c <ThreadControlBlock::ThreadControlBlock()>:
c002399c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239a0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00239a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239ab:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00239b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239b6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00239bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239c1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00239c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239cc:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00239d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239d7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00239db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239df:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00239e3:	90                   	nop
c00239e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00239e8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00239e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00239f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239f6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00239fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023a01:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023a08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023a0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023a12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023a16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023a1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023a21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0023a28:	90                   	nop
c0023a29:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0023a2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0023a2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023a30:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023a33:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0023a34 <Vm::_FPUState::_FPUState()>:
c0023a34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023a38:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0023a3f:	90                   	nop
c0023a40:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0023a42 <PCI::~PCI()>:
c0023a42:	83 ec 0c             	sub    esp,0xc
c0023a45:	ba 90 75 02 c0       	mov    edx,0xc0027590
c0023a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a4e:	89 10                	mov    DWORD PTR [eax],edx
c0023a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a54:	83 ec 0c             	sub    esp,0xc
c0023a57:	50                   	push   eax
c0023a58:	e8 13 a4 fe ff       	call   c000de70 <Bus::~Bus()>
c0023a5d:	83 c4 10             	add    esp,0x10
c0023a60:	90                   	nop
c0023a61:	83 c4 0c             	add    esp,0xc
c0023a64:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0023a66 <PCI::~PCI()>:
c0023a66:	83 ec 0c             	sub    esp,0xc
c0023a69:	83 ec 0c             	sub    esp,0xc
c0023a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a70:	e8 cd ff ff ff       	call   c0023a42 <PCI::~PCI()>
c0023a75:	83 c4 10             	add    esp,0x10
c0023a78:	83 ec 08             	sub    esp,0x8
c0023a7b:	68 5c 01 00 00       	push   0x15c
c0023a80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023a84:	e8 f5 94 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0023a89:	83 c4 10             	add    esp,0x10
c0023a8c:	83 c4 0c             	add    esp,0xc
c0023a8f:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0023a90 <IDE::~IDE()>:
c0023a90:	83 ec 0c             	sub    esp,0xc
c0023a93:	ba 44 76 02 c0       	mov    edx,0xc0027644
c0023a98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a9c:	89 10                	mov    DWORD PTR [eax],edx
c0023a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aa2:	83 ec 0c             	sub    esp,0xc
c0023aa5:	50                   	push   eax
c0023aa6:	e8 0d af fe ff       	call   c000e9b8 <HardDiskController::~HardDiskController()>
c0023aab:	83 c4 10             	add    esp,0x10
c0023aae:	90                   	nop
c0023aaf:	83 c4 0c             	add    esp,0xc
c0023ab2:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0023ab4 <IDE::~IDE()>:
c0023ab4:	83 ec 0c             	sub    esp,0xc
c0023ab7:	83 ec 0c             	sub    esp,0xc
c0023aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023abe:	e8 cd ff ff ff       	call   c0023a90 <IDE::~IDE()>
c0023ac3:	83 c4 10             	add    esp,0x10
c0023ac6:	83 ec 08             	sub    esp,0x8
c0023ac9:	68 70 02 00 00       	push   0x270
c0023ace:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ad2:	e8 a7 94 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0023ad7:	83 c4 10             	add    esp,0x10
c0023ada:	83 c4 0c             	add    esp,0xc
c0023add:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0023ade <SATABus::~SATABus()>:
c0023ade:	83 ec 0c             	sub    esp,0xc
c0023ae1:	ba 00 77 02 c0       	mov    edx,0xc0027700
c0023ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023aea:	89 10                	mov    DWORD PTR [eax],edx
c0023aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023af0:	83 ec 0c             	sub    esp,0xc
c0023af3:	50                   	push   eax
c0023af4:	e8 bf ae fe ff       	call   c000e9b8 <HardDiskController::~HardDiskController()>
c0023af9:	83 c4 10             	add    esp,0x10
c0023afc:	90                   	nop
c0023afd:	83 c4 0c             	add    esp,0xc
c0023b00:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0023b02 <SATABus::~SATABus()>:
c0023b02:	83 ec 0c             	sub    esp,0xc
c0023b05:	83 ec 0c             	sub    esp,0xc
c0023b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b0c:	e8 cd ff ff ff       	call   c0023ade <SATABus::~SATABus()>
c0023b11:	83 c4 10             	add    esp,0x10
c0023b14:	83 ec 08             	sub    esp,0x8
c0023b17:	68 64 01 00 00       	push   0x164
c0023b1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b20:	e8 59 94 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0023b25:	83 c4 10             	add    esp,0x10
c0023b28:	83 c4 0c             	add    esp,0xc
c0023b2b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0023b2c <ATA::~ATA()>:
c0023b2c:	83 ec 0c             	sub    esp,0xc
c0023b2f:	ba 78 77 02 c0       	mov    edx,0xc0027778
c0023b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b38:	89 10                	mov    DWORD PTR [eax],edx
c0023b3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b3e:	83 ec 0c             	sub    esp,0xc
c0023b41:	50                   	push   eax
c0023b42:	e8 53 af fe ff       	call   c000ea9a <PhysicalDisk::~PhysicalDisk()>
c0023b47:	83 c4 10             	add    esp,0x10
c0023b4a:	90                   	nop
c0023b4b:	83 c4 0c             	add    esp,0xc
c0023b4e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0023b50 <ATA::~ATA()>:
c0023b50:	83 ec 0c             	sub    esp,0xc
c0023b53:	83 ec 0c             	sub    esp,0xc
c0023b56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b5a:	e8 cd ff ff ff       	call   c0023b2c <ATA::~ATA()>
c0023b5f:	83 c4 10             	add    esp,0x10
c0023b62:	83 ec 08             	sub    esp,0x8
c0023b65:	68 7c 01 00 00       	push   0x17c
c0023b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b6e:	e8 0b 94 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0023b73:	83 c4 10             	add    esp,0x10
c0023b76:	83 c4 0c             	add    esp,0xc
c0023b79:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0023b7a <ATAPI::~ATAPI()>:
c0023b7a:	83 ec 0c             	sub    esp,0xc
c0023b7d:	ba dc 77 02 c0       	mov    edx,0xc00277dc
c0023b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b86:	89 10                	mov    DWORD PTR [eax],edx
c0023b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b8c:	83 ec 0c             	sub    esp,0xc
c0023b8f:	50                   	push   eax
c0023b90:	e8 05 af fe ff       	call   c000ea9a <PhysicalDisk::~PhysicalDisk()>
c0023b95:	83 c4 10             	add    esp,0x10
c0023b98:	90                   	nop
c0023b99:	83 c4 0c             	add    esp,0xc
c0023b9c:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0023b9e <ATAPI::~ATAPI()>:
c0023b9e:	83 ec 0c             	sub    esp,0xc
c0023ba1:	83 ec 0c             	sub    esp,0xc
c0023ba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ba8:	e8 cd ff ff ff       	call   c0023b7a <ATAPI::~ATAPI()>
c0023bad:	83 c4 10             	add    esp,0x10
c0023bb0:	83 ec 08             	sub    esp,0x8
c0023bb3:	68 84 01 00 00       	push   0x184
c0023bb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bbc:	e8 bd 93 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0023bc1:	83 c4 10             	add    esp,0x10
c0023bc4:	83 c4 0c             	add    esp,0xc
c0023bc7:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0023bc8 <SATA::~SATA()>:
c0023bc8:	83 ec 0c             	sub    esp,0xc
c0023bcb:	ba 18 7a 02 c0       	mov    edx,0xc0027a18
c0023bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bd4:	89 10                	mov    DWORD PTR [eax],edx
c0023bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bda:	83 ec 0c             	sub    esp,0xc
c0023bdd:	50                   	push   eax
c0023bde:	e8 b7 ae fe ff       	call   c000ea9a <PhysicalDisk::~PhysicalDisk()>
c0023be3:	83 c4 10             	add    esp,0x10
c0023be6:	90                   	nop
c0023be7:	83 c4 0c             	add    esp,0xc
c0023bea:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0023bec <SATA::~SATA()>:
c0023bec:	83 ec 0c             	sub    esp,0xc
c0023bef:	83 ec 0c             	sub    esp,0xc
c0023bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bf6:	e8 cd ff ff ff       	call   c0023bc8 <SATA::~SATA()>
c0023bfb:	83 c4 10             	add    esp,0x10
c0023bfe:	83 ec 08             	sub    esp,0x8
c0023c01:	68 7c 01 00 00       	push   0x17c
c0023c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c0a:	e8 6f 93 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0023c0f:	83 c4 10             	add    esp,0x10
c0023c12:	83 c4 0c             	add    esp,0xc
c0023c15:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0023c16 <SATAPI::~SATAPI()>:
c0023c16:	83 ec 0c             	sub    esp,0xc
c0023c19:	ba 84 7b 02 c0       	mov    edx,0xc0027b84
c0023c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c22:	89 10                	mov    DWORD PTR [eax],edx
c0023c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c28:	83 ec 0c             	sub    esp,0xc
c0023c2b:	50                   	push   eax
c0023c2c:	e8 69 ae fe ff       	call   c000ea9a <PhysicalDisk::~PhysicalDisk()>
c0023c31:	83 c4 10             	add    esp,0x10
c0023c34:	90                   	nop
c0023c35:	83 c4 0c             	add    esp,0xc
c0023c38:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0023c3a <SATAPI::~SATAPI()>:
c0023c3a:	83 ec 0c             	sub    esp,0xc
c0023c3d:	83 ec 0c             	sub    esp,0xc
c0023c40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c44:	e8 cd ff ff ff       	call   c0023c16 <SATAPI::~SATAPI()>
c0023c49:	83 c4 10             	add    esp,0x10
c0023c4c:	83 ec 08             	sub    esp,0x8
c0023c4f:	68 84 01 00 00       	push   0x184
c0023c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c58:	e8 21 93 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0023c5d:	83 c4 10             	add    esp,0x10
c0023c60:	83 c4 0c             	add    esp,0xc
c0023c63:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0023c64 <AVX::~AVX()>:
c0023c64:	83 ec 0c             	sub    esp,0xc
c0023c67:	ba c4 7b 02 c0       	mov    edx,0xc0027bc4
c0023c6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c70:	89 10                	mov    DWORD PTR [eax],edx
c0023c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c76:	83 ec 0c             	sub    esp,0xc
c0023c79:	50                   	push   eax
c0023c7a:	e8 a1 ae fe ff       	call   c000eb20 <FPU::~FPU()>
c0023c7f:	83 c4 10             	add    esp,0x10
c0023c82:	90                   	nop
c0023c83:	83 c4 0c             	add    esp,0xc
c0023c86:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0023c88 <AVX::~AVX()>:
c0023c88:	83 ec 0c             	sub    esp,0xc
c0023c8b:	83 ec 0c             	sub    esp,0xc
c0023c8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023c92:	e8 cd ff ff ff       	call   c0023c64 <AVX::~AVX()>
c0023c97:	83 c4 10             	add    esp,0x10
c0023c9a:	83 ec 08             	sub    esp,0x8
c0023c9d:	68 58 01 00 00       	push   0x158
c0023ca2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ca6:	e8 d3 92 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0023cab:	83 c4 10             	add    esp,0x10
c0023cae:	83 c4 0c             	add    esp,0xc
c0023cb1:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0023cb4 <MMX::~MMX()>:
c0023cb4:	83 ec 0c             	sub    esp,0xc
c0023cb7:	ba 04 7c 02 c0       	mov    edx,0xc0027c04
c0023cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cc0:	89 10                	mov    DWORD PTR [eax],edx
c0023cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cc6:	83 ec 0c             	sub    esp,0xc
c0023cc9:	50                   	push   eax
c0023cca:	e8 51 ae fe ff       	call   c000eb20 <FPU::~FPU()>
c0023ccf:	83 c4 10             	add    esp,0x10
c0023cd2:	90                   	nop
c0023cd3:	83 c4 0c             	add    esp,0xc
c0023cd6:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0023cd8 <MMX::~MMX()>:
c0023cd8:	83 ec 0c             	sub    esp,0xc
c0023cdb:	83 ec 0c             	sub    esp,0xc
c0023cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ce2:	e8 cd ff ff ff       	call   c0023cb4 <MMX::~MMX()>
c0023ce7:	83 c4 10             	add    esp,0x10
c0023cea:	83 ec 08             	sub    esp,0x8
c0023ced:	68 58 01 00 00       	push   0x158
c0023cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023cf6:	e8 83 92 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0023cfb:	83 c4 10             	add    esp,0x10
c0023cfe:	83 c4 0c             	add    esp,0xc
c0023d01:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023d04 <SSE::~SSE()>:
c0023d04:	83 ec 0c             	sub    esp,0xc
c0023d07:	ba 44 7c 02 c0       	mov    edx,0xc0027c44
c0023d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d10:	89 10                	mov    DWORD PTR [eax],edx
c0023d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d16:	83 ec 0c             	sub    esp,0xc
c0023d19:	50                   	push   eax
c0023d1a:	e8 01 ae fe ff       	call   c000eb20 <FPU::~FPU()>
c0023d1f:	83 c4 10             	add    esp,0x10
c0023d22:	90                   	nop
c0023d23:	83 c4 0c             	add    esp,0xc
c0023d26:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0023d28 <SSE::~SSE()>:
c0023d28:	83 ec 0c             	sub    esp,0xc
c0023d2b:	83 ec 0c             	sub    esp,0xc
c0023d2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d32:	e8 cd ff ff ff       	call   c0023d04 <SSE::~SSE()>
c0023d37:	83 c4 10             	add    esp,0x10
c0023d3a:	83 ec 08             	sub    esp,0x8
c0023d3d:	68 58 01 00 00       	push   0x158
c0023d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d46:	e8 33 92 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0023d4b:	83 c4 10             	add    esp,0x10
c0023d4e:	83 c4 0c             	add    esp,0xc
c0023d51:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023d52 <x87::~x87()>:
c0023d52:	83 ec 0c             	sub    esp,0xc
c0023d55:	ba 84 7c 02 c0       	mov    edx,0xc0027c84
c0023d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d5e:	89 10                	mov    DWORD PTR [eax],edx
c0023d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d64:	83 ec 0c             	sub    esp,0xc
c0023d67:	50                   	push   eax
c0023d68:	e8 b3 ad fe ff       	call   c000eb20 <FPU::~FPU()>
c0023d6d:	83 c4 10             	add    esp,0x10
c0023d70:	90                   	nop
c0023d71:	83 c4 0c             	add    esp,0xc
c0023d74:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0023d76 <x87::~x87()>:
c0023d76:	83 ec 0c             	sub    esp,0xc
c0023d79:	83 ec 0c             	sub    esp,0xc
c0023d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d80:	e8 cd ff ff ff       	call   c0023d52 <x87::~x87()>
c0023d85:	83 c4 10             	add    esp,0x10
c0023d88:	83 ec 08             	sub    esp,0x8
c0023d8b:	68 58 01 00 00       	push   0x158
c0023d90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023d94:	e8 e5 91 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0023d99:	83 c4 10             	add    esp,0x10
c0023d9c:	83 c4 0c             	add    esp,0xc
c0023d9f:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0023da0 <IOAPIC::~IOAPIC()>:
c0023da0:	83 ec 0c             	sub    esp,0xc
c0023da3:	ba dc 7d 02 c0       	mov    edx,0xc0027ddc
c0023da8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dac:	89 10                	mov    DWORD PTR [eax],edx
c0023dae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023db2:	83 ec 0c             	sub    esp,0xc
c0023db5:	50                   	push   eax
c0023db6:	e8 e5 a6 fe ff       	call   c000e4a0 <Device::~Device()>
c0023dbb:	83 c4 10             	add    esp,0x10
c0023dbe:	90                   	nop
c0023dbf:	83 c4 0c             	add    esp,0xc
c0023dc2:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0023dc4 <IOAPIC::~IOAPIC()>:
c0023dc4:	83 ec 0c             	sub    esp,0xc
c0023dc7:	83 ec 0c             	sub    esp,0xc
c0023dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023dce:	e8 cd ff ff ff       	call   c0023da0 <IOAPIC::~IOAPIC()>
c0023dd3:	83 c4 10             	add    esp,0x10
c0023dd6:	83 ec 08             	sub    esp,0x8
c0023dd9:	68 68 01 00 00       	push   0x168
c0023dde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023de2:	e8 97 91 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0023de7:	83 c4 10             	add    esp,0x10
c0023dea:	83 c4 0c             	add    esp,0xc
c0023ded:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0023dee <APIC::~APIC()>:
c0023dee:	83 ec 0c             	sub    esp,0xc
c0023df1:	ba 94 7d 02 c0       	mov    edx,0xc0027d94
c0023df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023dfa:	89 10                	mov    DWORD PTR [eax],edx
c0023dfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e00:	83 ec 0c             	sub    esp,0xc
c0023e03:	50                   	push   eax
c0023e04:	e8 03 b2 fe ff       	call   c000f00c <InterruptController::~InterruptController()>
c0023e09:	83 c4 10             	add    esp,0x10
c0023e0c:	90                   	nop
c0023e0d:	83 c4 0c             	add    esp,0xc
c0023e10:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023e12 <APIC::~APIC()>:
c0023e12:	83 ec 0c             	sub    esp,0xc
c0023e15:	83 ec 0c             	sub    esp,0xc
c0023e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e1c:	e8 cd ff ff ff       	call   c0023dee <APIC::~APIC()>
c0023e21:	83 c4 10             	add    esp,0x10
c0023e24:	83 ec 08             	sub    esp,0x8
c0023e27:	68 58 21 00 00       	push   0x2158
c0023e2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e30:	e8 49 91 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0023e35:	83 c4 10             	add    esp,0x10
c0023e38:	83 c4 0c             	add    esp,0xc
c0023e3b:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023e3c <PIC::~PIC()>:
c0023e3c:	83 ec 0c             	sub    esp,0xc
c0023e3f:	ba 2c 7e 02 c0       	mov    edx,0xc0027e2c
c0023e44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e48:	89 10                	mov    DWORD PTR [eax],edx
c0023e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e4e:	83 ec 0c             	sub    esp,0xc
c0023e51:	50                   	push   eax
c0023e52:	e8 b5 b1 fe ff       	call   c000f00c <InterruptController::~InterruptController()>
c0023e57:	83 c4 10             	add    esp,0x10
c0023e5a:	90                   	nop
c0023e5b:	83 c4 0c             	add    esp,0xc
c0023e5e:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023e60 <PIC::~PIC()>:
c0023e60:	83 ec 0c             	sub    esp,0xc
c0023e63:	83 ec 0c             	sub    esp,0xc
c0023e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e6a:	e8 cd ff ff ff       	call   c0023e3c <PIC::~PIC()>
c0023e6f:	83 c4 10             	add    esp,0x10
c0023e72:	83 ec 08             	sub    esp,0x8
c0023e75:	68 58 21 00 00       	push   0x2158
c0023e7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e7e:	e8 fb 90 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0023e83:	83 c4 10             	add    esp,0x10
c0023e86:	83 c4 0c             	add    esp,0xc
c0023e89:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023e8c <APICTimer::~APICTimer()>:
c0023e8c:	83 ec 0c             	sub    esp,0xc
c0023e8f:	ba 80 7e 02 c0       	mov    edx,0xc0027e80
c0023e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e98:	89 10                	mov    DWORD PTR [eax],edx
c0023e9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e9e:	83 ec 0c             	sub    esp,0xc
c0023ea1:	50                   	push   eax
c0023ea2:	e8 85 d0 fe ff       	call   c0010f2c <Timer::~Timer()>
c0023ea7:	83 c4 10             	add    esp,0x10
c0023eaa:	90                   	nop
c0023eab:	83 c4 0c             	add    esp,0xc
c0023eae:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0023eb0 <APICTimer::~APICTimer()>:
c0023eb0:	83 ec 0c             	sub    esp,0xc
c0023eb3:	83 ec 0c             	sub    esp,0xc
c0023eb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023eba:	e8 cd ff ff ff       	call   c0023e8c <APICTimer::~APICTimer()>
c0023ebf:	83 c4 10             	add    esp,0x10
c0023ec2:	83 ec 08             	sub    esp,0x8
c0023ec5:	68 60 01 00 00       	push   0x160
c0023eca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023ece:	e8 ab 90 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0023ed3:	83 c4 10             	add    esp,0x10
c0023ed6:	83 c4 0c             	add    esp,0xc
c0023ed9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0023edc <PIT::~PIT()>:
c0023edc:	83 ec 0c             	sub    esp,0xc
c0023edf:	ba d0 7e 02 c0       	mov    edx,0xc0027ed0
c0023ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023ee8:	89 10                	mov    DWORD PTR [eax],edx
c0023eea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023eee:	83 ec 0c             	sub    esp,0xc
c0023ef1:	50                   	push   eax
c0023ef2:	e8 35 d0 fe ff       	call   c0010f2c <Timer::~Timer()>
c0023ef7:	83 c4 10             	add    esp,0x10
c0023efa:	90                   	nop
c0023efb:	83 c4 0c             	add    esp,0xc
c0023efe:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023f00 <PIT::~PIT()>:
c0023f00:	83 ec 0c             	sub    esp,0xc
c0023f03:	83 ec 0c             	sub    esp,0xc
c0023f06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023f0a:	e8 cd ff ff ff       	call   c0023edc <PIT::~PIT()>
c0023f0f:	83 c4 10             	add    esp,0x10
c0023f12:	83 ec 08             	sub    esp,0x8
c0023f15:	68 5c 01 00 00       	push   0x15c
c0023f1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023f1e:	e8 5b 90 fe ff       	call   c000cf7e <operator delete(void*, unsigned long)>
c0023f23:	83 c4 10             	add    esp,0x10
c0023f26:	83 c4 0c             	add    esp,0xc
c0023f29:	c3                   	ret    
