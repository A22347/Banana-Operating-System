
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 5d 9d 00 00       	call   c0009d7d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 c5 1f 02 00       	call   c0021fea <_init>
c0000025:	c3                   	ret    
c0000026:	bb 96 2a 02 c0       	mov    ebx,0xc0022a96
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb a4 2a 02 c0    	cmp    ebx,0xc0022aa4
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 e4 6d 02 c0       	mov    eax,0xc0026de4
c0000049:	3d e4 6d 02 c0       	cmp    eax,0xc0026de4
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 e4 6d 02 c0       	push   0xc0026de4
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 e4 6d 02 c0       	mov    eax,0xc0026de4
c0000075:	2d e4 6d 02 c0       	sub    eax,0xc0026de4
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 e4 6d 02 c0       	push   0xc0026de4
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 6c 6f 02 c0 00 	cmp    BYTE PTR ds:0xc0026f6c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb ac 2a 02 c0       	mov    ebx,0xc0022aac
c00000bb:	81 eb a8 2a 02 c0    	sub    ebx,0xc0022aa8
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a8 2a 02 c0       	mov    esi,0xc0022aa8
c00000ca:	a1 70 6f 02 c0       	mov    eax,ds:0xc0026f70
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 70 6f 02 c0       	mov    ds:0xc0026f70,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 70 6f 02 c0       	mov    eax,ds:0xc0026f70
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 e4 6d 02 c0       	push   0xc0026de4
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 6c 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f6c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 74 6f 02 c0       	push   0xc0026f74
c000012c:	68 e4 6d 02 c0       	push   0xc0026de4
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 50 6a 01 00       	call   c0016d20 <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 4a ca 00 00       	call   c000cd32 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 2e 6a 01 00       	call   c0016d20 <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 ef 6e 01 00       	call   c0017200 <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 32 75 01 00       	call   c001784c <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 b0 73 02 c0 	lgdtd  ds:0xc00273b0
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <isr0>:
c000039d:	fa                   	cli    
c000039e:	68 00 00 00 00       	push   0x0
c00003a3:	68 00 00 00 00       	push   0x0
c00003a8:	e9 44 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003ad <isr1>:
c00003ad:	fa                   	cli    
c00003ae:	6a 00                	push   0x0
c00003b0:	6a 01                	push   0x1
c00003b2:	e9 3a 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003b7 <isr2>:
c00003b7:	fa                   	cli    
c00003b8:	6a 00                	push   0x0
c00003ba:	6a 02                	push   0x2
c00003bc:	e9 30 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003c1 <isr3>:
c00003c1:	fa                   	cli    
c00003c2:	6a 00                	push   0x0
c00003c4:	6a 03                	push   0x3
c00003c6:	e9 26 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003cb <isr4>:
c00003cb:	fa                   	cli    
c00003cc:	6a 00                	push   0x0
c00003ce:	6a 04                	push   0x4
c00003d0:	e9 1c 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003d5 <isr5>:
c00003d5:	fa                   	cli    
c00003d6:	6a 00                	push   0x0
c00003d8:	6a 05                	push   0x5
c00003da:	e9 12 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003df <isr6>:
c00003df:	fa                   	cli    
c00003e0:	6a 00                	push   0x0
c00003e2:	6a 06                	push   0x6
c00003e4:	e9 08 01 00 00       	jmp    c00004f1 <int_common_stub>

c00003e9 <isr7>:
c00003e9:	fa                   	cli    
c00003ea:	6a 00                	push   0x0
c00003ec:	6a 07                	push   0x7
c00003ee:	e9 fe 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003f3 <isr8>:
c00003f3:	fa                   	cli    
c00003f4:	6a 08                	push   0x8
c00003f6:	e9 f6 00 00 00       	jmp    c00004f1 <int_common_stub>

c00003fb <isr9>:
c00003fb:	fa                   	cli    
c00003fc:	6a 00                	push   0x0
c00003fe:	6a 09                	push   0x9
c0000400:	e9 ec 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000405 <isr10>:
c0000405:	fa                   	cli    
c0000406:	6a 0a                	push   0xa
c0000408:	e9 e4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000040d <isr11>:
c000040d:	fa                   	cli    
c000040e:	6a 0b                	push   0xb
c0000410:	e9 dc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000415 <isr12>:
c0000415:	fa                   	cli    
c0000416:	6a 0c                	push   0xc
c0000418:	e9 d4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000041d <isr13>:
c000041d:	fa                   	cli    
c000041e:	6a 0d                	push   0xd
c0000420:	e9 cc 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000425 <isr14>:
c0000425:	fa                   	cli    
c0000426:	6a 0e                	push   0xe
c0000428:	e9 c4 00 00 00       	jmp    c00004f1 <int_common_stub>

c000042d <isr15>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 0f                	push   0xf
c0000432:	e9 ba 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000437 <isr16>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 10                	push   0x10
c000043c:	e9 b0 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000441 <isr17>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 11                	push   0x11
c0000446:	e9 a6 00 00 00       	jmp    c00004f1 <int_common_stub>

c000044b <isr18>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 12                	push   0x12
c0000450:	e9 9c 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000455 <irq3>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 23                	push   0x23
c000045a:	e9 92 00 00 00       	jmp    c00004f1 <int_common_stub>

c000045f <irq4>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 24                	push   0x24
c0000464:	e9 88 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000469 <irq5>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 25                	push   0x25
c000046e:	e9 7e 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000473 <irq6>:
c0000473:	fa                   	cli    
c0000474:	6a 00                	push   0x0
c0000476:	6a 26                	push   0x26
c0000478:	e9 74 00 00 00       	jmp    c00004f1 <int_common_stub>

c000047d <irq7>:
c000047d:	fa                   	cli    
c000047e:	6a 00                	push   0x0
c0000480:	6a 27                	push   0x27
c0000482:	e9 6a 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000487 <irq8>:
c0000487:	fa                   	cli    
c0000488:	6a 00                	push   0x0
c000048a:	6a 28                	push   0x28
c000048c:	e9 60 00 00 00       	jmp    c00004f1 <int_common_stub>

c0000491 <irq9>:
c0000491:	fa                   	cli    
c0000492:	6a 00                	push   0x0
c0000494:	6a 29                	push   0x29
c0000496:	e9 56 00 00 00       	jmp    c00004f1 <int_common_stub>

c000049b <irq10>:
c000049b:	fa                   	cli    
c000049c:	6a 00                	push   0x0
c000049e:	6a 2a                	push   0x2a
c00004a0:	e9 4c 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004a5 <irq11>:
c00004a5:	fa                   	cli    
c00004a6:	6a 00                	push   0x0
c00004a8:	6a 2b                	push   0x2b
c00004aa:	e9 42 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004af <irq12>:
c00004af:	fa                   	cli    
c00004b0:	6a 00                	push   0x0
c00004b2:	6a 2c                	push   0x2c
c00004b4:	e9 38 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004b9 <irq13>:
c00004b9:	fa                   	cli    
c00004ba:	6a 00                	push   0x0
c00004bc:	6a 2d                	push   0x2d
c00004be:	e9 2e 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004c3 <irq14>:
c00004c3:	fa                   	cli    
c00004c4:	6a 00                	push   0x0
c00004c6:	6a 2e                	push   0x2e
c00004c8:	e9 24 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004cd <irq15>:
c00004cd:	fa                   	cli    
c00004ce:	6a 00                	push   0x0
c00004d0:	6a 2f                	push   0x2f
c00004d2:	e9 1a 00 00 00       	jmp    c00004f1 <int_common_stub>

c00004d7 <irq1>:
c00004d7:	fa                   	cli    
c00004d8:	6a 00                	push   0x0
c00004da:	6a 21                	push   0x21
c00004dc:	eb 13                	jmp    c00004f1 <int_common_stub>

c00004de <irq2>:
c00004de:	fa                   	cli    
c00004df:	6a 00                	push   0x0
c00004e1:	6a 22                	push   0x22
c00004e3:	eb 0c                	jmp    c00004f1 <int_common_stub>

c00004e5 <isr96>:
c00004e5:	6a 00                	push   0x0
c00004e7:	6a 60                	push   0x60
c00004e9:	fb                   	sti    
c00004ea:	eb 05                	jmp    c00004f1 <int_common_stub>

c00004ec <irq0>:
c00004ec:	fa                   	cli    
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 20                	push   0x20

c00004f1 <int_common_stub>:
c00004f1:	60                   	pusha  
c00004f2:	1e                   	push   ds
c00004f3:	06                   	push   es
c00004f4:	0f a0                	push   fs
c00004f6:	0f a8                	push   gs
c00004f8:	66 b8 10 00          	mov    ax,0x10
c00004fc:	66 8e d8             	mov    ds,ax
c00004ff:	66 8e c0             	mov    es,ax
c0000502:	66 8e e0             	mov    fs,ax
c0000505:	66 8e e8             	mov    gs,ax
c0000508:	54                   	push   esp
c0000509:	fc                   	cld    
c000050a:	e8 49 e4 00 00       	call   c000e958 <int_handler>
c000050f:	81 c4 04 00 00 00    	add    esp,0x4
c0000515:	0f a9                	pop    gs
c0000517:	0f a1                	pop    fs
c0000519:	07                   	pop    es
c000051a:	1f                   	pop    ds
c000051b:	61                   	popa   
c000051c:	81 c4 08 00 00 00    	add    esp,0x8
c0000522:	cf                   	iret   

c0000523 <irq16>:
c0000523:	fa                   	cli    
c0000524:	6a 00                	push   0x0
c0000526:	6a 30                	push   0x30
c0000528:	e9 c4 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000052d <irq17>:
c000052d:	fa                   	cli    
c000052e:	6a 00                	push   0x0
c0000530:	6a 31                	push   0x31
c0000532:	e9 ba ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000537 <irq18>:
c0000537:	fa                   	cli    
c0000538:	6a 00                	push   0x0
c000053a:	6a 32                	push   0x32
c000053c:	e9 b0 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000541 <irq19>:
c0000541:	fa                   	cli    
c0000542:	6a 00                	push   0x0
c0000544:	6a 33                	push   0x33
c0000546:	e9 a6 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000054b <irq20>:
c000054b:	fa                   	cli    
c000054c:	6a 00                	push   0x0
c000054e:	6a 34                	push   0x34
c0000550:	e9 9c ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000555 <irq21>:
c0000555:	fa                   	cli    
c0000556:	6a 00                	push   0x0
c0000558:	6a 35                	push   0x35
c000055a:	e9 92 ff ff ff       	jmp    c00004f1 <int_common_stub>

c000055f <irq22>:
c000055f:	fa                   	cli    
c0000560:	6a 00                	push   0x0
c0000562:	6a 36                	push   0x36
c0000564:	e9 88 ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000569 <irq23>:
c0000569:	fa                   	cli    
c000056a:	6a 00                	push   0x0
c000056c:	6a 37                	push   0x37
c000056e:	e9 7e ff ff ff       	jmp    c00004f1 <int_common_stub>

c0000573 <memcpy>:
c0000573:	e9 7a 83 00 00       	jmp    c00088f2 <__not_memcpy>

c0000578 <memcmp>:
c0000578:	56                   	push   esi
c0000579:	53                   	push   ebx
c000057a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000057e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000582:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000586:	85 f6                	test   esi,esi
c0000588:	74 1d                	je     c00005a7 <memcmp+0x2f>
c000058a:	8a 08                	mov    cl,BYTE PTR [eax]
c000058c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000058f:	38 cb                	cmp    bl,cl
c0000591:	75 19                	jne    c00005ac <memcmp+0x34>
c0000593:	01 c6                	add    esi,eax
c0000595:	eb 0a                	jmp    c00005a1 <memcmp+0x29>
c0000597:	90                   	nop
c0000598:	8a 08                	mov    cl,BYTE PTR [eax]
c000059a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000059d:	38 d9                	cmp    cl,bl
c000059f:	75 0b                	jne    c00005ac <memcmp+0x34>
c00005a1:	40                   	inc    eax
c00005a2:	42                   	inc    edx
c00005a3:	39 f0                	cmp    eax,esi
c00005a5:	75 f1                	jne    c0000598 <memcmp+0x20>
c00005a7:	31 c0                	xor    eax,eax
c00005a9:	5b                   	pop    ebx
c00005aa:	5e                   	pop    esi
c00005ab:	c3                   	ret    
c00005ac:	0f b6 c1             	movzx  eax,cl
c00005af:	29 d8                	sub    eax,ebx
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    

c00005b4 <memmove>:
c00005b4:	55                   	push   ebp
c00005b5:	57                   	push   edi
c00005b6:	56                   	push   esi
c00005b7:	53                   	push   ebx
c00005b8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005bc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005c4:	39 dd                	cmp    ebp,ebx
c00005c6:	0f 83 80 00 00 00    	jae    c000064c <memmove+0x98>
c00005cc:	85 d2                	test   edx,edx
c00005ce:	74 74                	je     c0000644 <memmove+0x90>
c00005d0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005d3:	8d 75 04             	lea    esi,[ebp+0x4]
c00005d6:	39 cd                	cmp    ebp,ecx
c00005d8:	0f 93 c1             	setae  cl
c00005db:	39 f3                	cmp    ebx,esi
c00005dd:	0f 93 c0             	setae  al
c00005e0:	89 c6                	mov    esi,eax
c00005e2:	09 ce                	or     esi,ecx
c00005e4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005e7:	89 f0                	mov    eax,esi
c00005e9:	83 f9 0c             	cmp    ecx,0xc
c00005ec:	0f 97 c1             	seta   cl
c00005ef:	84 c8                	test   al,cl
c00005f1:	74 75                	je     c0000668 <memmove+0xb4>
c00005f3:	89 e9                	mov    ecx,ebp
c00005f5:	09 d9                	or     ecx,ebx
c00005f7:	83 e1 03             	and    ecx,0x3
c00005fa:	75 6c                	jne    c0000668 <memmove+0xb4>
c00005fc:	89 d7                	mov    edi,edx
c00005fe:	89 d9                	mov    ecx,ebx
c0000600:	83 e7 fc             	and    edi,0xfffffffc
c0000603:	89 ee                	mov    esi,ebp
c0000605:	01 df                	add    edi,ebx
c0000607:	90                   	nop
c0000608:	8b 01                	mov    eax,DWORD PTR [ecx]
c000060a:	83 c6 04             	add    esi,0x4
c000060d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000610:	83 c1 04             	add    ecx,0x4
c0000613:	39 f9                	cmp    ecx,edi
c0000615:	75 f1                	jne    c0000608 <memmove+0x54>
c0000617:	89 d1                	mov    ecx,edx
c0000619:	89 d7                	mov    edi,edx
c000061b:	83 e1 fc             	and    ecx,0xfffffffc
c000061e:	29 cf                	sub    edi,ecx
c0000620:	01 cb                	add    ebx,ecx
c0000622:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000626:	39 ca                	cmp    edx,ecx
c0000628:	74 1a                	je     c0000644 <memmove+0x90>
c000062a:	8a 03                	mov    al,BYTE PTR [ebx]
c000062c:	83 ff 01             	cmp    edi,0x1
c000062f:	88 06                	mov    BYTE PTR [esi],al
c0000631:	74 11                	je     c0000644 <memmove+0x90>
c0000633:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000636:	83 ff 02             	cmp    edi,0x2
c0000639:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000063c:	74 06                	je     c0000644 <memmove+0x90>
c000063e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000641:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000644:	5b                   	pop    ebx
c0000645:	89 e8                	mov    eax,ebp
c0000647:	5e                   	pop    esi
c0000648:	5f                   	pop    edi
c0000649:	5d                   	pop    ebp
c000064a:	c3                   	ret    
c000064b:	90                   	nop
c000064c:	76 f6                	jbe    c0000644 <memmove+0x90>
c000064e:	85 d2                	test   edx,edx
c0000650:	74 f2                	je     c0000644 <memmove+0x90>
c0000652:	4b                   	dec    ebx
c0000653:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000656:	66 90                	xchg   ax,ax
c0000658:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000065b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000065e:	4a                   	dec    edx
c000065f:	75 f7                	jne    c0000658 <memmove+0xa4>
c0000661:	5b                   	pop    ebx
c0000662:	89 e8                	mov    eax,ebp
c0000664:	5e                   	pop    esi
c0000665:	5f                   	pop    edi
c0000666:	5d                   	pop    ebp
c0000667:	c3                   	ret    
c0000668:	01 ea                	add    edx,ebp
c000066a:	89 e9                	mov    ecx,ebp
c000066c:	8a 03                	mov    al,BYTE PTR [ebx]
c000066e:	41                   	inc    ecx
c000066f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000672:	43                   	inc    ebx
c0000673:	39 d1                	cmp    ecx,edx
c0000675:	75 f5                	jne    c000066c <memmove+0xb8>
c0000677:	eb cb                	jmp    c0000644 <memmove+0x90>
c0000679:	8d 76 00             	lea    esi,[esi+0x0]

c000067c <memset>:
c000067c:	57                   	push   edi
c000067d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000681:	85 c9                	test   ecx,ecx
c0000683:	74 0b                	je     c0000690 <memset+0x14>
c0000685:	fc                   	cld    
c0000686:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000068a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000068e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000690:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000694:	5f                   	pop    edi
c0000695:	c3                   	ret    
c0000696:	66 90                	xchg   ax,ax

c0000698 <strlen>:
c0000698:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000069c:	31 c0                	xor    eax,eax
c000069e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a1:	74 09                	je     c00006ac <strlen+0x14>
c00006a3:	90                   	nop
c00006a4:	40                   	inc    eax
c00006a5:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006a9:	75 f9                	jne    c00006a4 <strlen+0xc>
c00006ab:	c3                   	ret    
c00006ac:	c3                   	ret    
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]

c00006b0 <strpbrk>:
c00006b0:	57                   	push   edi
c00006b1:	56                   	push   esi
c00006b2:	53                   	push   ebx
c00006b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006bb:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006bd:	84 db                	test   bl,bl
c00006bf:	74 21                	je     c00006e2 <strpbrk+0x32>
c00006c1:	8a 07                	mov    al,BYTE PTR [edi]
c00006c3:	84 c0                	test   al,al
c00006c5:	74 14                	je     c00006db <strpbrk+0x2b>
c00006c7:	38 d8                	cmp    al,bl
c00006c9:	74 19                	je     c00006e4 <strpbrk+0x34>
c00006cb:	89 fa                	mov    edx,edi
c00006cd:	eb 05                	jmp    c00006d4 <strpbrk+0x24>
c00006cf:	90                   	nop
c00006d0:	38 d9                	cmp    cl,bl
c00006d2:	74 10                	je     c00006e4 <strpbrk+0x34>
c00006d4:	42                   	inc    edx
c00006d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006d7:	84 c9                	test   cl,cl
c00006d9:	75 f5                	jne    c00006d0 <strpbrk+0x20>
c00006db:	46                   	inc    esi
c00006dc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006de:	84 db                	test   bl,bl
c00006e0:	75 e1                	jne    c00006c3 <strpbrk+0x13>
c00006e2:	31 f6                	xor    esi,esi
c00006e4:	89 f0                	mov    eax,esi
c00006e6:	5b                   	pop    ebx
c00006e7:	5e                   	pop    esi
c00006e8:	5f                   	pop    edi
c00006e9:	c3                   	ret    
c00006ea:	66 90                	xchg   ax,ax

c00006ec <strtok>:
c00006ec:	56                   	push   esi
c00006ed:	53                   	push   ebx
c00006ee:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006f6:	85 db                	test   ebx,ebx
c00006f8:	75 07                	jne    c0000701 <strtok+0x15>
c00006fa:	eb 2c                	jmp    c0000728 <strtok+0x3c>
c00006fc:	43                   	inc    ebx
c00006fd:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000701:	56                   	push   esi
c0000702:	53                   	push   ebx
c0000703:	e8 a8 ff ff ff       	call   c00006b0 <strpbrk>
c0000708:	5a                   	pop    edx
c0000709:	a3 8c 6f 02 c0       	mov    ds:0xc0026f8c,eax
c000070e:	59                   	pop    ecx
c000070f:	39 d8                	cmp    eax,ebx
c0000711:	74 e9                	je     c00006fc <strtok+0x10>
c0000713:	85 c0                	test   eax,eax
c0000715:	74 1b                	je     c0000732 <strtok+0x46>
c0000717:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071a:	8d 50 01             	lea    edx,[eax+0x1]
c000071d:	89 d8                	mov    eax,ebx
c000071f:	89 15 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,edx
c0000725:	5b                   	pop    ebx
c0000726:	5e                   	pop    esi
c0000727:	c3                   	ret    
c0000728:	8b 1d 8c 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026f8c
c000072e:	85 db                	test   ebx,ebx
c0000730:	75 cf                	jne    c0000701 <strtok+0x15>
c0000732:	31 c0                	xor    eax,eax
c0000734:	5b                   	pop    ebx
c0000735:	5e                   	pop    esi
c0000736:	c3                   	ret    
c0000737:	90                   	nop

c0000738 <strcpy>:
c0000738:	53                   	push   ebx
c0000739:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000073d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000741:	89 c3                	mov    ebx,eax
c0000743:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000745:	84 d2                	test   dl,dl
c0000747:	74 0d                	je     c0000756 <strcpy+0x1e>
c0000749:	8d 76 00             	lea    esi,[esi+0x0]
c000074c:	88 13                	mov    BYTE PTR [ebx],dl
c000074e:	41                   	inc    ecx
c000074f:	43                   	inc    ebx
c0000750:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000752:	84 d2                	test   dl,dl
c0000754:	75 f6                	jne    c000074c <strcpy+0x14>
c0000756:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000759:	5b                   	pop    ebx
c000075a:	c3                   	ret    
c000075b:	90                   	nop

c000075c <strncpy>:
c000075c:	55                   	push   ebp
c000075d:	57                   	push   edi
c000075e:	56                   	push   esi
c000075f:	53                   	push   ebx
c0000760:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000764:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000768:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000076c:	85 c0                	test   eax,eax
c000076e:	74 39                	je     c00007a9 <strncpy+0x4d>
c0000770:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000772:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000775:	8d 55 01             	lea    edx,[ebp+0x1]
c0000778:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000077b:	84 db                	test   bl,bl
c000077d:	74 31                	je     c00007b0 <strncpy+0x54>
c000077f:	85 c9                	test   ecx,ecx
c0000781:	74 26                	je     c00007a9 <strncpy+0x4d>
c0000783:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000786:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000789:	8d 55 02             	lea    edx,[ebp+0x2]
c000078c:	8d 46 02             	lea    eax,[esi+0x2]
c000078f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000792:	84 db                	test   bl,bl
c0000794:	75 0f                	jne    c00007a5 <strncpy+0x49>
c0000796:	eb 18                	jmp    c00007b0 <strncpy+0x54>
c0000798:	40                   	inc    eax
c0000799:	42                   	inc    edx
c000079a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000079d:	49                   	dec    ecx
c000079e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a1:	84 db                	test   bl,bl
c00007a3:	74 0b                	je     c00007b0 <strncpy+0x54>
c00007a5:	85 c9                	test   ecx,ecx
c00007a7:	75 ef                	jne    c0000798 <strncpy+0x3c>
c00007a9:	5b                   	pop    ebx
c00007aa:	89 e8                	mov    eax,ebp
c00007ac:	5e                   	pop    esi
c00007ad:	5f                   	pop    edi
c00007ae:	5d                   	pop    ebp
c00007af:	c3                   	ret    
c00007b0:	85 c9                	test   ecx,ecx
c00007b2:	74 f5                	je     c00007a9 <strncpy+0x4d>
c00007b4:	fc                   	cld    
c00007b5:	31 c0                	xor    eax,eax
c00007b7:	89 d7                	mov    edi,edx
c00007b9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007bb:	89 e8                	mov    eax,ebp
c00007bd:	5b                   	pop    ebx
c00007be:	5e                   	pop    esi
c00007bf:	5f                   	pop    edi
c00007c0:	5d                   	pop    ebp
c00007c1:	c3                   	ret    
c00007c2:	66 90                	xchg   ax,ax

c00007c4 <strcmp>:
c00007c4:	56                   	push   esi
c00007c5:	53                   	push   ebx
c00007c6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ce:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007d3:	38 d1                	cmp    cl,dl
c00007d5:	75 1d                	jne    c00007f4 <strcmp+0x30>
c00007d7:	84 c9                	test   cl,cl
c00007d9:	74 21                	je     c00007fc <strcmp+0x38>
c00007db:	b8 01 00 00 00       	mov    eax,0x1
c00007e0:	eb 07                	jmp    c00007e9 <strcmp+0x25>
c00007e2:	66 90                	xchg   ax,ax
c00007e4:	40                   	inc    eax
c00007e5:	84 d2                	test   dl,dl
c00007e7:	74 13                	je     c00007fc <strcmp+0x38>
c00007e9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007ec:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f0:	38 ca                	cmp    dl,cl
c00007f2:	74 f0                	je     c00007e4 <strcmp+0x20>
c00007f4:	0f b6 c2             	movzx  eax,dl
c00007f7:	5b                   	pop    ebx
c00007f8:	29 c8                	sub    eax,ecx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	31 c0                	xor    eax,eax
c00007fe:	5b                   	pop    ebx
c00007ff:	5e                   	pop    esi
c0000800:	c3                   	ret    
c0000801:	8d 76 00             	lea    esi,[esi+0x0]

c0000804 <strchr>:
c0000804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000808:	8a 10                	mov    dl,BYTE PTR [eax]
c000080a:	84 d2                	test   dl,dl
c000080c:	74 15                	je     c0000823 <strchr+0x1f>
c000080e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000812:	38 ca                	cmp    dl,cl
c0000814:	75 06                	jne    c000081c <strchr+0x18>
c0000816:	eb 0e                	jmp    c0000826 <strchr+0x22>
c0000818:	38 ca                	cmp    dl,cl
c000081a:	74 09                	je     c0000825 <strchr+0x21>
c000081c:	40                   	inc    eax
c000081d:	8a 10                	mov    dl,BYTE PTR [eax]
c000081f:	84 d2                	test   dl,dl
c0000821:	75 f5                	jne    c0000818 <strchr+0x14>
c0000823:	31 c0                	xor    eax,eax
c0000825:	c3                   	ret    
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strncmp>:
c0000828:	57                   	push   edi
c0000829:	56                   	push   esi
c000082a:	53                   	push   ebx
c000082b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000082f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000833:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000837:	85 ff                	test   edi,edi
c0000839:	74 28                	je     c0000863 <strncmp+0x3b>
c000083b:	8a 16                	mov    dl,BYTE PTR [esi]
c000083d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000840:	38 d1                	cmp    cl,dl
c0000842:	75 28                	jne    c000086c <strncmp+0x44>
c0000844:	8d 46 01             	lea    eax,[esi+0x1]
c0000847:	84 c9                	test   cl,cl
c0000849:	74 18                	je     c0000863 <strncmp+0x3b>
c000084b:	01 fe                	add    esi,edi
c000084d:	eb 0f                	jmp    c000085e <strncmp+0x36>
c000084f:	90                   	nop
c0000850:	8a 10                	mov    dl,BYTE PTR [eax]
c0000852:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000855:	38 ca                	cmp    dl,cl
c0000857:	75 13                	jne    c000086c <strncmp+0x44>
c0000859:	40                   	inc    eax
c000085a:	84 d2                	test   dl,dl
c000085c:	74 05                	je     c0000863 <strncmp+0x3b>
c000085e:	43                   	inc    ebx
c000085f:	39 c6                	cmp    esi,eax
c0000861:	75 ed                	jne    c0000850 <strncmp+0x28>
c0000863:	5b                   	pop    ebx
c0000864:	31 c0                	xor    eax,eax
c0000866:	5e                   	pop    esi
c0000867:	5f                   	pop    edi
c0000868:	c3                   	ret    
c0000869:	8d 76 00             	lea    esi,[esi+0x0]
c000086c:	5b                   	pop    ebx
c000086d:	0f b6 c2             	movzx  eax,dl
c0000870:	5e                   	pop    esi
c0000871:	29 c8                	sub    eax,ecx
c0000873:	5f                   	pop    edi
c0000874:	c3                   	ret    
c0000875:	8d 76 00             	lea    esi,[esi+0x0]

c0000878 <strcat>:
c0000878:	56                   	push   esi
c0000879:	53                   	push   ebx
c000087a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000882:	89 c3                	mov    ebx,eax
c0000884:	eb 04                	jmp    c000088a <strcat+0x12>
c0000886:	66 90                	xchg   ax,ax
c0000888:	89 d3                	mov    ebx,edx
c000088a:	8d 53 01             	lea    edx,[ebx+0x1]
c000088d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000891:	75 f5                	jne    c0000888 <strcat+0x10>
c0000893:	31 d2                	xor    edx,edx
c0000895:	8d 76 00             	lea    esi,[esi+0x0]
c0000898:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000089b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000089e:	42                   	inc    edx
c000089f:	84 c9                	test   cl,cl
c00008a1:	75 f5                	jne    c0000898 <strcat+0x20>
c00008a3:	5b                   	pop    ebx
c00008a4:	5e                   	pop    esi
c00008a5:	c3                   	ret    
c00008a6:	66 90                	xchg   ax,ax

c00008a8 <strncat>:
c00008a8:	56                   	push   esi
c00008a9:	53                   	push   ebx
c00008aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008b2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008b6:	85 f6                	test   esi,esi
c00008b8:	74 1e                	je     c00008d8 <strncat+0x30>
c00008ba:	89 c2                	mov    edx,eax
c00008bc:	42                   	inc    edx
c00008bd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c1:	75 f9                	jne    c00008bc <strncat+0x14>
c00008c3:	01 ce                	add    esi,ecx
c00008c5:	eb 06                	jmp    c00008cd <strncat+0x25>
c00008c7:	90                   	nop
c00008c8:	39 f1                	cmp    ecx,esi
c00008ca:	74 10                	je     c00008dc <strncat+0x34>
c00008cc:	42                   	inc    edx
c00008cd:	41                   	inc    ecx
c00008ce:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008d4:	84 db                	test   bl,bl
c00008d6:	75 f0                	jne    c00008c8 <strncat+0x20>
c00008d8:	5b                   	pop    ebx
c00008d9:	5e                   	pop    esi
c00008da:	c3                   	ret    
c00008db:	90                   	nop
c00008dc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008df:	5b                   	pop    ebx
c00008e0:	5e                   	pop    esi
c00008e1:	c3                   	ret    
c00008e2:	66 90                	xchg   ax,ax

c00008e4 <strstr>:
c00008e4:	57                   	push   edi
c00008e5:	56                   	push   esi
c00008e6:	53                   	push   ebx
c00008e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008ef:	57                   	push   edi
c00008f0:	e8 a3 fd ff ff       	call   c0000698 <strlen>
c00008f5:	59                   	pop    ecx
c00008f6:	85 c0                	test   eax,eax
c00008f8:	74 2a                	je     c0000924 <strstr+0x40>
c00008fa:	89 c6                	mov    esi,eax
c00008fc:	eb 12                	jmp    c0000910 <strstr+0x2c>
c00008fe:	66 90                	xchg   ax,ax
c0000900:	56                   	push   esi
c0000901:	57                   	push   edi
c0000902:	53                   	push   ebx
c0000903:	e8 70 fc ff ff       	call   c0000578 <memcmp>
c0000908:	83 c4 0c             	add    esp,0xc
c000090b:	85 c0                	test   eax,eax
c000090d:	74 15                	je     c0000924 <strstr+0x40>
c000090f:	43                   	inc    ebx
c0000910:	53                   	push   ebx
c0000911:	e8 82 fd ff ff       	call   c0000698 <strlen>
c0000916:	5a                   	pop    edx
c0000917:	39 f0                	cmp    eax,esi
c0000919:	73 e5                	jae    c0000900 <strstr+0x1c>
c000091b:	5b                   	pop    ebx
c000091c:	31 c0                	xor    eax,eax
c000091e:	5e                   	pop    esi
c000091f:	5f                   	pop    edi
c0000920:	c3                   	ret    
c0000921:	8d 76 00             	lea    esi,[esi+0x0]
c0000924:	89 d8                	mov    eax,ebx
c0000926:	5b                   	pop    ebx
c0000927:	5e                   	pop    esi
c0000928:	5f                   	pop    edi
c0000929:	c3                   	ret    
c000092a:	66 90                	xchg   ax,ax

c000092c <toupper>:
c000092c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000930:	0f b6 d0             	movzx  edx,al
c0000933:	f6 82 c0 2a 02 c0 02 	test   BYTE PTR [edx-0x3ffdd540],0x2
c000093a:	74 03                	je     c000093f <toupper+0x13>
c000093c:	83 e8 20             	sub    eax,0x20
c000093f:	c3                   	ret    

c0000940 <tolower>:
c0000940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000944:	0f b6 d0             	movzx  edx,al
c0000947:	f6 82 c0 2a 02 c0 01 	test   BYTE PTR [edx-0x3ffdd540],0x1
c000094e:	74 03                	je     c0000953 <tolower+0x13>
c0000950:	83 c0 20             	add    eax,0x20
c0000953:	c3                   	ret    

c0000954 <simple_strtoul>:
c0000954:	55                   	push   ebp
c0000955:	57                   	push   edi
c0000956:	56                   	push   esi
c0000957:	53                   	push   ebx
c0000958:	83 ec 08             	sub    esp,0x8
c000095b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000095f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000963:	90                   	nop
c0000964:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000967:	f6 82 c0 2a 02 c0 08 	test   BYTE PTR [edx-0x3ffdd540],0x8
c000096e:	75 05                	jne    c0000975 <simple_strtoul+0x21>
c0000970:	80 fa 09             	cmp    dl,0x9
c0000973:	75 03                	jne    c0000978 <simple_strtoul+0x24>
c0000975:	41                   	inc    ecx
c0000976:	eb ec                	jmp    c0000964 <simple_strtoul+0x10>
c0000978:	80 fa 2d             	cmp    dl,0x2d
c000097b:	0f 84 1b 01 00 00    	je     c0000a9c <simple_strtoul+0x148>
c0000981:	80 fa 2b             	cmp    dl,0x2b
c0000984:	0f 84 c2 00 00 00    	je     c0000a4c <simple_strtoul+0xf8>
c000098a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000992:	85 f6                	test   esi,esi
c0000994:	0f 85 c3 00 00 00    	jne    c0000a5d <simple_strtoul+0x109>
c000099a:	8a 11                	mov    dl,BYTE PTR [ecx]
c000099c:	80 fa 30             	cmp    dl,0x30
c000099f:	0f 84 47 01 00 00    	je     c0000aec <simple_strtoul+0x198>
c00009a5:	be 0a 00 00 00       	mov    esi,0xa
c00009aa:	84 d2                	test   dl,dl
c00009ac:	0f 84 6f 01 00 00    	je     c0000b21 <simple_strtoul+0x1cd>
c00009b2:	31 ed                	xor    ebp,ebp
c00009b4:	31 ff                	xor    edi,edi
c00009b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009bd:	eb 2b                	jmp    c00009ea <simple_strtoul+0x96>
c00009bf:	90                   	nop
c00009c0:	83 eb 30             	sub    ebx,0x30
c00009c3:	39 f3                	cmp    ebx,esi
c00009c5:	73 4d                	jae    c0000a14 <simple_strtoul+0xc0>
c00009c7:	31 d2                	xor    edx,edx
c00009c9:	89 d8                	mov    eax,ebx
c00009cb:	f7 d0                	not    eax
c00009cd:	f7 f6                	div    esi
c00009cf:	39 f8                	cmp    eax,edi
c00009d1:	0f 82 b1 00 00 00    	jb     c0000a88 <simple_strtoul+0x134>
c00009d7:	0f af fe             	imul   edi,esi
c00009da:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e1:	01 df                	add    edi,ebx
c00009e3:	41                   	inc    ecx
c00009e4:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009e6:	84 d2                	test   dl,dl
c00009e8:	74 2a                	je     c0000a14 <simple_strtoul+0xc0>
c00009ea:	0f b6 da             	movzx  ebx,dl
c00009ed:	f6 83 c0 2a 02 c0 04 	test   BYTE PTR [ebx-0x3ffdd540],0x4
c00009f4:	75 ca                	jne    c00009c0 <simple_strtoul+0x6c>
c00009f6:	0f be d2             	movsx  edx,dl
c00009f9:	52                   	push   edx
c00009fa:	e8 2d ff ff ff       	call   c000092c <toupper>
c00009ff:	5b                   	pop    ebx
c0000a00:	0f b6 d0             	movzx  edx,al
c0000a03:	f6 82 c0 2a 02 c0 01 	test   BYTE PTR [edx-0x3ffdd540],0x1
c0000a0a:	74 08                	je     c0000a14 <simple_strtoul+0xc0>
c0000a0c:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a0f:	39 f3                	cmp    ebx,esi
c0000a11:	72 b4                	jb     c00009c7 <simple_strtoul+0x73>
c0000a13:	90                   	nop
c0000a14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a18:	85 c0                	test   eax,eax
c0000a1a:	74 14                	je     c0000a30 <simple_strtoul+0xdc>
c0000a1c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a1f:	09 f8                	or     eax,edi
c0000a21:	75 71                	jne    c0000a94 <simple_strtoul+0x140>
c0000a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a27:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a2b:	31 ff                	xor    edi,edi
c0000a2d:	89 30                	mov    DWORD PTR [eax],esi
c0000a2f:	90                   	nop
c0000a30:	4d                   	dec    ebp
c0000a31:	75 05                	jne    c0000a38 <simple_strtoul+0xe4>
c0000a33:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a38:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a3d:	75 02                	jne    c0000a41 <simple_strtoul+0xed>
c0000a3f:	f7 df                	neg    edi
c0000a41:	83 c4 08             	add    esp,0x8
c0000a44:	89 f8                	mov    eax,edi
c0000a46:	5b                   	pop    ebx
c0000a47:	5e                   	pop    esi
c0000a48:	5f                   	pop    edi
c0000a49:	5d                   	pop    ebp
c0000a4a:	c3                   	ret    
c0000a4b:	90                   	nop
c0000a4c:	41                   	inc    ecx
c0000a4d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a55:	85 f6                	test   esi,esi
c0000a57:	0f 84 3d ff ff ff    	je     c000099a <simple_strtoul+0x46>
c0000a5d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a60:	83 f8 22             	cmp    eax,0x22
c0000a63:	77 6a                	ja     c0000acf <simple_strtoul+0x17b>
c0000a65:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a67:	83 fe 08             	cmp    esi,0x8
c0000a6a:	0f 84 a2 00 00 00    	je     c0000b12 <simple_strtoul+0x1be>
c0000a70:	83 fe 10             	cmp    esi,0x10
c0000a73:	0f 85 31 ff ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000a79:	80 fa 30             	cmp    dl,0x30
c0000a7c:	74 2c                	je     c0000aaa <simple_strtoul+0x156>
c0000a7e:	be 10 00 00 00       	mov    esi,0x10
c0000a83:	e9 22 ff ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000a88:	bd 01 00 00 00       	mov    ebp,0x1
c0000a8d:	31 ff                	xor    edi,edi
c0000a8f:	e9 4f ff ff ff       	jmp    c00009e3 <simple_strtoul+0x8f>
c0000a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a98:	89 08                	mov    DWORD PTR [eax],ecx
c0000a9a:	eb 94                	jmp    c0000a30 <simple_strtoul+0xdc>
c0000a9c:	41                   	inc    ecx
c0000a9d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aa5:	e9 e8 fe ff ff       	jmp    c0000992 <simple_strtoul+0x3e>
c0000aaa:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aae:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab1:	50                   	push   eax
c0000ab2:	e8 89 fe ff ff       	call   c0000940 <tolower>
c0000ab7:	5e                   	pop    esi
c0000ab8:	83 f8 78             	cmp    eax,0x78
c0000abb:	0f 84 84 00 00 00    	je     c0000b45 <simple_strtoul+0x1f1>
c0000ac1:	41                   	inc    ecx
c0000ac2:	be 10 00 00 00       	mov    esi,0x10
c0000ac7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000aca:	e9 db fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000acf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ad3:	85 ff                	test   edi,edi
c0000ad5:	74 5c                	je     c0000b33 <simple_strtoul+0x1df>
c0000ad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000adb:	85 c9                	test   ecx,ecx
c0000add:	75 4e                	jne    c0000b2d <simple_strtoul+0x1d9>
c0000adf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ae5:	31 ff                	xor    edi,edi
c0000ae7:	e9 4c ff ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000aec:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af0:	88 04 24             	mov    BYTE PTR [esp],al
c0000af3:	50                   	push   eax
c0000af4:	e8 47 fe ff ff       	call   c0000940 <tolower>
c0000af9:	5d                   	pop    ebp
c0000afa:	83 f8 78             	cmp    eax,0x78
c0000afd:	74 3b                	je     c0000b3a <simple_strtoul+0x1e6>
c0000aff:	41                   	inc    ecx
c0000b00:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b03:	80 fa 30             	cmp    dl,0x30
c0000b06:	74 13                	je     c0000b1b <simple_strtoul+0x1c7>
c0000b08:	be 08 00 00 00       	mov    esi,0x8
c0000b0d:	e9 98 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>
c0000b12:	80 fa 30             	cmp    dl,0x30
c0000b15:	0f 85 8f fe ff ff    	jne    c00009aa <simple_strtoul+0x56>
c0000b1b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b1e:	41                   	inc    ecx
c0000b1f:	eb e7                	jmp    c0000b08 <simple_strtoul+0x1b4>
c0000b21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b25:	85 d2                	test   edx,edx
c0000b27:	74 0a                	je     c0000b33 <simple_strtoul+0x1df>
c0000b29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b2d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b31:	89 30                	mov    DWORD PTR [eax],esi
c0000b33:	31 ff                	xor    edi,edi
c0000b35:	e9 fe fe ff ff       	jmp    c0000a38 <simple_strtoul+0xe4>
c0000b3a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b3d:	83 c1 02             	add    ecx,0x2
c0000b40:	e9 34 ff ff ff       	jmp    c0000a79 <simple_strtoul+0x125>
c0000b45:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b48:	be 10 00 00 00       	mov    esi,0x10
c0000b4d:	83 c1 02             	add    ecx,0x2
c0000b50:	e9 55 fe ff ff       	jmp    c00009aa <simple_strtoul+0x56>

c0000b55 <largebin_index>:
c0000b55:	89 c2                	mov    edx,eax
c0000b57:	c1 ea 08             	shr    edx,0x8
c0000b5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b60:	77 10                	ja     c0000b72 <largebin_index+0x1d>
c0000b62:	0f bd d2             	bsr    edx,edx
c0000b65:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b68:	d3 e8                	shr    eax,cl
c0000b6a:	83 e0 03             	and    eax,0x3
c0000b6d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b71:	c3                   	ret    
c0000b72:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b77:	c3                   	ret    

c0000b78 <malloc_init_state>:
c0000b78:	53                   	push   ebx
c0000b79:	8d 50 34             	lea    edx,[eax+0x34]
c0000b7c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b82:	89 d1                	mov    ecx,edx
c0000b84:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b87:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b8a:	83 c2 08             	add    edx,0x8
c0000b8d:	39 da                	cmp    edx,ebx
c0000b8f:	75 f3                	jne    c0000b84 <malloc_init_state+0xc>
c0000b91:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b93:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b9d:	83 e2 03             	and    edx,0x3
c0000ba0:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000baa:	83 ca 48             	or     edx,0x48
c0000bad:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc8:	89 10                	mov    DWORD PTR [eax],edx
c0000bca:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bcd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd7:	5b                   	pop    ebx
c0000bd8:	c3                   	ret    

c0000bd9 <malloc_consolidate>:
c0000bd9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bdb:	85 d2                	test   edx,edx
c0000bdd:	0f 84 d8 00 00 00    	je     c0000cbb <malloc_consolidate+0xe2>
c0000be3:	55                   	push   ebp
c0000be4:	83 e2 fd             	and    edx,0xfffffffd
c0000be7:	57                   	push   edi
c0000be8:	89 c5                	mov    ebp,eax
c0000bea:	56                   	push   esi
c0000beb:	8d 78 34             	lea    edi,[eax+0x34]
c0000bee:	53                   	push   ebx
c0000bef:	83 ec 10             	sub    esp,0x10
c0000bf2:	89 10                	mov    DWORD PTR [eax],edx
c0000bf4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf8:	c1 ea 03             	shr    edx,0x3
c0000bfb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bff:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c03:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c06:	85 d2                	test   edx,edx
c0000c08:	0f 84 98 00 00 00    	je     c0000ca6 <malloc_consolidate+0xcd>
c0000c0e:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c15:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c18:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c1b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c1f:	89 f9                	mov    ecx,edi
c0000c21:	83 e1 fe             	and    ecx,0xfffffffe
c0000c24:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c27:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c2a:	83 e3 fc             	and    ebx,0xfffffffc
c0000c2d:	83 e7 01             	and    edi,0x1
c0000c30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c33:	75 14                	jne    c0000c49 <malloc_consolidate+0x70>
c0000c35:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c37:	29 fa                	sub    edx,edi
c0000c39:	01 f9                	add    ecx,edi
c0000c3b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c3e:	89 fb                	mov    ebx,edi
c0000c40:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c43:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c46:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c49:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c4c:	74 40                	je     c0000c8e <malloc_consolidate+0xb5>
c0000c4e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c51:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c54:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c58:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c5b:	83 e7 01             	and    edi,0x1
c0000c5e:	75 0e                	jne    c0000c6e <malloc_consolidate+0x95>
c0000c60:	01 d9                	add    ecx,ebx
c0000c62:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c65:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c68:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c6b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c6e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c71:	89 ce                	mov    esi,ecx
c0000c73:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c76:	83 ce 01             	or     esi,0x1
c0000c79:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c7c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c7f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c82:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c86:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c89:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c8c:	eb 0c                	jmp    c0000c9a <malloc_consolidate+0xc1>
c0000c8e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c91:	83 c9 01             	or     ecx,0x1
c0000c94:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c97:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c9e:	85 d2                	test   edx,edx
c0000ca0:	0f 85 6f ff ff ff    	jne    c0000c15 <malloc_consolidate+0x3c>
c0000ca6:	83 c5 04             	add    ebp,0x4
c0000ca9:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cad:	0f 85 50 ff ff ff    	jne    c0000c03 <malloc_consolidate+0x2a>
c0000cb3:	83 c4 10             	add    esp,0x10
c0000cb6:	5b                   	pop    ebx
c0000cb7:	5e                   	pop    esi
c0000cb8:	5f                   	pop    edi
c0000cb9:	5d                   	pop    ebp
c0000cba:	c3                   	ret    
c0000cbb:	e9 b8 fe ff ff       	jmp    c0000b78 <malloc_init_state>

c0000cc0 <dlfree>:
c0000cc0:	57                   	push   edi
c0000cc1:	56                   	push   esi
c0000cc2:	53                   	push   ebx
c0000cc3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc7:	85 db                	test   ebx,ebx
c0000cc9:	0f 84 e2 00 00 00    	je     c0000db1 <dlfree+0xf1>
c0000ccf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cd2:	8b 0d a0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa0
c0000cd8:	89 f0                	mov    eax,esi
c0000cda:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cdd:	83 e0 fc             	and    eax,0xfffffffc
c0000ce0:	39 c1                	cmp    ecx,eax
c0000ce2:	72 24                	jb     c0000d08 <dlfree+0x48>
c0000ce4:	83 c9 03             	or     ecx,0x3
c0000ce7:	c1 e8 03             	shr    eax,0x3
c0000cea:	89 0d a0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa0,ecx
c0000cf0:	83 e8 02             	sub    eax,0x2
c0000cf3:	8b 0c 85 a4 6f 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd905c]
c0000cfa:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cfc:	89 14 85 a4 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd905c],edx
c0000d03:	e9 a9 00 00 00       	jmp    c0000db1 <dlfree+0xf1>
c0000d08:	83 e6 02             	and    esi,0x2
c0000d0b:	0f 85 a0 00 00 00    	jne    c0000db1 <dlfree+0xf1>
c0000d11:	83 c9 01             	or     ecx,0x1
c0000d14:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d17:	89 0d a0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa0,ecx
c0000d1d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d20:	83 e1 fc             	and    ecx,0xfffffffc
c0000d23:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d27:	75 13                	jne    c0000d3c <dlfree+0x7c>
c0000d29:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d2c:	29 da                	sub    edx,ebx
c0000d2e:	01 d8                	add    eax,ebx
c0000d30:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d33:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d36:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d39:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d3c:	39 35 cc 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fcc,esi
c0000d42:	74 40                	je     c0000d84 <dlfree+0xc4>
c0000d44:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d48:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d4b:	80 e3 01             	and    bl,0x1
c0000d4e:	75 0e                	jne    c0000d5e <dlfree+0x9e>
c0000d50:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d53:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d56:	01 c8                	add    eax,ecx
c0000d58:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d5b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d5e:	8b 0d dc 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fdc
c0000d64:	c7 42 0c d4 6f 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026fd4
c0000d6b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d6e:	89 15 dc 6f 02 c0    	mov    DWORD PTR ds:0xc0026fdc,edx
c0000d74:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d77:	89 c1                	mov    ecx,eax
c0000d79:	83 c9 01             	or     ecx,0x1
c0000d7c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d7f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d82:	eb 10                	jmp    c0000d94 <dlfree+0xd4>
c0000d84:	01 c8                	add    eax,ecx
c0000d86:	89 c1                	mov    ecx,eax
c0000d88:	83 c9 01             	or     ecx,0x1
c0000d8b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d8e:	89 15 cc 6f 02 c0    	mov    DWORD PTR ds:0xc0026fcc,edx
c0000d94:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d99:	76 16                	jbe    c0000db1 <dlfree+0xf1>
c0000d9b:	f6 05 a0 6f 02 c0 02 	test   BYTE PTR ds:0xc0026fa0,0x2
c0000da2:	74 0d                	je     c0000db1 <dlfree+0xf1>
c0000da4:	5b                   	pop    ebx
c0000da5:	b8 a0 6f 02 c0       	mov    eax,0xc0026fa0
c0000daa:	5e                   	pop    esi
c0000dab:	5f                   	pop    edi
c0000dac:	e9 28 fe ff ff       	jmp    c0000bd9 <malloc_consolidate>
c0000db1:	5b                   	pop    ebx
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	c3                   	ret    

c0000db5 <sYSMALLOc>:
c0000db5:	55                   	push   ebp
c0000db6:	57                   	push   edi
c0000db7:	56                   	push   esi
c0000db8:	53                   	push   ebx
c0000db9:	89 d3                	mov    ebx,edx
c0000dbb:	83 ec 2c             	sub    esp,0x2c
c0000dbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dc2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dcb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dd2:	74 1f                	je     c0000df3 <sYSMALLOc+0x3e>
c0000dd4:	89 d8                	mov    eax,ebx
c0000dd6:	e8 fe fd ff ff       	call   c0000bd9 <malloc_consolidate>
c0000ddb:	83 ec 0c             	sub    esp,0xc
c0000dde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000de2:	83 e8 07             	sub    eax,0x7
c0000de5:	50                   	push   eax
c0000de6:	e8 30 02 00 00       	call   c000101b <dlmalloc>
c0000deb:	83 c4 10             	add    esp,0x10
c0000dee:	e9 20 02 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000df3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000df6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dfc:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dff:	83 e0 fc             	and    eax,0xfffffffc
c0000e02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e0a:	83 c0 10             	add    eax,0x10
c0000e0d:	01 c1                	add    ecx,eax
c0000e0f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e13:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e1a:	74 04                	je     c0000e20 <sYSMALLOc+0x6b>
c0000e1c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e20:	f7 da                	neg    edx
c0000e22:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e26:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e2a:	21 d1                	and    ecx,edx
c0000e2c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e30:	7f 07                	jg     c0000e39 <sYSMALLOc+0x84>
c0000e32:	31 c0                	xor    eax,eax
c0000e34:	e9 da 01 00 00       	jmp    c0001013 <sYSMALLOc+0x25e>
c0000e39:	83 ec 0c             	sub    esp,0xc
c0000e3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e40:	e8 3b 8d 00 00       	call   c0009b80 <sbrk>
c0000e45:	83 c4 10             	add    esp,0x10
c0000e48:	89 c6                	mov    esi,eax
c0000e4a:	83 f8 ff             	cmp    eax,0xffffffff
c0000e4d:	74 e3                	je     c0000e32 <sYSMALLOc+0x7d>
c0000e4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e53:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e57:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e5a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e60:	39 f1                	cmp    ecx,esi
c0000e62:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e68:	75 13                	jne    c0000e7d <sYSMALLOc+0xc8>
c0000e6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e6e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e72:	83 c8 01             	or     eax,0x1
c0000e75:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e78:	e9 3e 01 00 00       	jmp    c0000fbb <sYSMALLOc+0x206>
c0000e7d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e83:	88 d0                	mov    al,dl
c0000e85:	83 e0 01             	and    eax,0x1
c0000e88:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e8d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e91:	0f 95 c0             	setne  al
c0000e94:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e98:	39 f1                	cmp    ecx,esi
c0000e9a:	76 12                	jbe    c0000eae <sYSMALLOc+0xf9>
c0000e9c:	84 c0                	test   al,al
c0000e9e:	74 0e                	je     c0000eae <sYSMALLOc+0xf9>
c0000ea0:	83 e2 fe             	and    edx,0xfffffffe
c0000ea3:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea9:	e9 83 00 00 00       	jmp    c0000f31 <sYSMALLOc+0x17c>
c0000eae:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eb3:	74 7c                	je     c0000f31 <sYSMALLOc+0x17c>
c0000eb5:	84 c0                	test   al,al
c0000eb7:	74 0c                	je     c0000ec5 <sYSMALLOc+0x110>
c0000eb9:	89 f0                	mov    eax,esi
c0000ebb:	29 c8                	sub    eax,ecx
c0000ebd:	01 e8                	add    eax,ebp
c0000ebf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ec5:	89 f2                	mov    edx,esi
c0000ec7:	83 e2 07             	and    edx,0x7
c0000eca:	74 0c                	je     c0000ed8 <sYSMALLOc+0x123>
c0000ecc:	b8 08 00 00 00       	mov    eax,0x8
c0000ed1:	29 d0                	sub    eax,edx
c0000ed3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ed6:	eb 04                	jmp    c0000edc <sYSMALLOc+0x127>
c0000ed8:	89 f5                	mov    ebp,esi
c0000eda:	31 c0                	xor    eax,eax
c0000edc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ee4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee8:	01 c1                	add    ecx,eax
c0000eea:	83 ec 0c             	sub    esp,0xc
c0000eed:	01 f1                	add    ecx,esi
c0000eef:	01 ca                	add    edx,ecx
c0000ef1:	29 c8                	sub    eax,ecx
c0000ef3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef7:	01 c2                	add    edx,eax
c0000ef9:	52                   	push   edx
c0000efa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000efe:	e8 7d 8c 00 00       	call   c0009b80 <sbrk>
c0000f03:	83 c4 10             	add    esp,0x10
c0000f06:	83 f8 ff             	cmp    eax,0xffffffff
c0000f09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f0d:	75 0f                	jne    c0000f1e <sYSMALLOc+0x169>
c0000f0f:	83 ec 0c             	sub    esp,0xc
c0000f12:	6a 00                	push   0x0
c0000f14:	e8 67 8c 00 00       	call   c0009b80 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	eb 30                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f1e:	39 c6                	cmp    esi,eax
c0000f20:	76 33                	jbe    c0000f55 <sYSMALLOc+0x1a0>
c0000f22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f26:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f2d:	01 f0                	add    eax,esi
c0000f2f:	eb 1d                	jmp    c0000f4e <sYSMALLOc+0x199>
c0000f31:	83 ec 0c             	sub    esp,0xc
c0000f34:	89 f5                	mov    ebp,esi
c0000f36:	6a 00                	push   0x0
c0000f38:	e8 43 8c 00 00       	call   c0009b80 <sbrk>
c0000f3d:	89 c2                	mov    edx,eax
c0000f3f:	29 f2                	sub    edx,esi
c0000f41:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f45:	83 c4 10             	add    esp,0x10
c0000f48:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f4e:	31 d2                	xor    edx,edx
c0000f50:	83 f8 ff             	cmp    eax,0xffffffff
c0000f53:	74 66                	je     c0000fbb <sYSMALLOc+0x206>
c0000f55:	29 e8                	sub    eax,ebp
c0000f57:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f5a:	01 d0                	add    eax,edx
c0000f5c:	83 c8 01             	or     eax,0x1
c0000f5f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f62:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f68:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f6d:	74 4c                	je     c0000fbb <sYSMALLOc+0x206>
c0000f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f73:	83 e8 0c             	sub    eax,0xc
c0000f76:	83 e0 f8             	and    eax,0xfffffff8
c0000f79:	89 c2                	mov    edx,eax
c0000f7b:	83 ca 01             	or     edx,0x1
c0000f7e:	83 f8 0f             	cmp    eax,0xf
c0000f81:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f84:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f8c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f94:	76 25                	jbe    c0000fbb <sYSMALLOc+0x206>
c0000f96:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f9c:	83 ec 0c             	sub    esp,0xc
c0000f9f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa9:	83 c7 08             	add    edi,0x8
c0000fac:	57                   	push   edi
c0000fad:	e8 0e fd ff ff       	call   c0000cc0 <dlfree>
c0000fb2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb8:	83 c4 10             	add    esp,0x10
c0000fbb:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc7:	73 06                	jae    c0000fcf <sYSMALLOc+0x21a>
c0000fc9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fcf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fd5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fdb:	73 06                	jae    c0000fe3 <sYSMALLOc+0x22e>
c0000fdd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fe3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fe6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe9:	83 e2 fc             	and    edx,0xfffffffc
c0000fec:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff0:	0f 82 3c fe ff ff    	jb     c0000e32 <sYSMALLOc+0x7d>
c0000ff6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ffa:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ffd:	29 fa                	sub    edx,edi
c0000fff:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001002:	83 ca 01             	or     edx,0x1
c0001005:	89 fb                	mov    ebx,edi
c0001007:	83 c0 08             	add    eax,0x8
c000100a:	83 cb 01             	or     ebx,0x1
c000100d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001010:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001013:	83 c4 2c             	add    esp,0x2c
c0001016:	5b                   	pop    ebx
c0001017:	5e                   	pop    esi
c0001018:	5f                   	pop    edi
c0001019:	5d                   	pop    ebp
c000101a:	c3                   	ret    

c000101b <dlmalloc>:
c000101b:	55                   	push   ebp
c000101c:	57                   	push   edi
c000101d:	56                   	push   esi
c000101e:	53                   	push   ebx
c000101f:	83 ec 1c             	sub    esp,0x1c
c0001022:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001026:	83 f8 df             	cmp    eax,0xffffffdf
c0001029:	0f 87 70 03 00 00    	ja     c000139f <dlmalloc+0x384>
c000102f:	83 c0 0b             	add    eax,0xb
c0001032:	be 10 00 00 00       	mov    esi,0x10
c0001037:	83 f8 0f             	cmp    eax,0xf
c000103a:	76 05                	jbe    c0001041 <dlmalloc+0x26>
c000103c:	83 e0 f8             	and    eax,0xfffffff8
c000103f:	89 c6                	mov    esi,eax
c0001041:	8b 3d a0 6f 02 c0    	mov    edi,DWORD PTR ds:0xc0026fa0
c0001047:	f7 c7 01 00 00 00    	test   edi,0x1
c000104d:	75 17                	jne    c0001066 <dlmalloc+0x4b>
c000104f:	85 ff                	test   edi,edi
c0001051:	0f 85 05 03 00 00    	jne    c000135c <dlmalloc+0x341>
c0001057:	b8 a0 6f 02 c0       	mov    eax,0xc0026fa0
c000105c:	e8 78 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c0001061:	e9 f6 02 00 00       	jmp    c000135c <dlmalloc+0x341>
c0001066:	39 f7                	cmp    edi,esi
c0001068:	72 1f                	jb     c0001089 <dlmalloc+0x6e>
c000106a:	89 f2                	mov    edx,esi
c000106c:	c1 ea 03             	shr    edx,0x3
c000106f:	83 ea 02             	sub    edx,0x2
c0001072:	8b 04 95 a4 6f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd905c]
c0001079:	85 c0                	test   eax,eax
c000107b:	74 0c                	je     c0001089 <dlmalloc+0x6e>
c000107d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001080:	89 0c 95 a4 6f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd905c],ecx
c0001087:	eb 30                	jmp    c00010b9 <dlmalloc+0x9e>
c0001089:	89 f0                	mov    eax,esi
c000108b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001091:	77 2e                	ja     c00010c1 <dlmalloc+0xa6>
c0001093:	c1 e8 03             	shr    eax,0x3
c0001096:	8d 14 c5 d4 6f 02 c0 	lea    edx,[eax*8-0x3ffd902c]
c000109d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010a4:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a7:	39 c3                	cmp    ebx,eax
c00010a9:	74 2e                	je     c00010d9 <dlmalloc+0xbe>
c00010ab:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010ae:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010b3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010b6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b9:	83 c0 08             	add    eax,0x8
c00010bc:	e9 e0 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c00010c1:	e8 8f fa ff ff       	call   c0000b55 <largebin_index>
c00010c6:	83 e7 02             	and    edi,0x2
c00010c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010cd:	74 0a                	je     c00010d9 <dlmalloc+0xbe>
c00010cf:	b8 a0 6f 02 c0       	mov    eax,0xc0026fa0
c00010d4:	e8 00 fb ff ff       	call   c0000bd9 <malloc_consolidate>
c00010d9:	8d 46 10             	lea    eax,[esi+0x10]
c00010dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e0:	8b 1d e0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fe0
c00010e6:	81 fb d4 6f 02 c0    	cmp    ebx,0xc0026fd4
c00010ec:	0f 84 13 01 00 00    	je     c0001205 <dlmalloc+0x1ea>
c00010f2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010f5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f8:	83 e7 fc             	and    edi,0xfffffffc
c00010fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001101:	77 4c                	ja     c000114f <dlmalloc+0x134>
c0001103:	3d d4 6f 02 c0       	cmp    eax,0xc0026fd4
c0001108:	75 45                	jne    c000114f <dlmalloc+0x134>
c000110a:	39 1d d0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fd0,ebx
c0001110:	75 3d                	jne    c000114f <dlmalloc+0x134>
c0001112:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001116:	73 37                	jae    c000114f <dlmalloc+0x134>
c0001118:	8d 04 33             	lea    eax,[ebx+esi*1]
c000111b:	89 fa                	mov    edx,edi
c000111d:	a3 dc 6f 02 c0       	mov    ds:0xc0026fdc,eax
c0001122:	a3 e0 6f 02 c0       	mov    ds:0xc0026fe0,eax
c0001127:	a3 d0 6f 02 c0       	mov    ds:0xc0026fd0,eax
c000112c:	29 f2                	sub    edx,esi
c000112e:	c7 40 08 d4 6f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026fd4
c0001135:	c7 40 0c d4 6f 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026fd4
c000113c:	83 ce 01             	or     esi,0x1
c000113f:	89 d1                	mov    ecx,edx
c0001141:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001144:	83 c9 01             	or     ecx,0x1
c0001147:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000114a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000114d:	eb 15                	jmp    c0001164 <dlmalloc+0x149>
c000114f:	a3 e0 6f 02 c0       	mov    ds:0xc0026fe0,eax
c0001154:	39 fe                	cmp    esi,edi
c0001156:	c7 40 08 d4 6f 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026fd4
c000115d:	75 0d                	jne    c000116c <dlmalloc+0x151>
c000115f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001164:	8d 43 08             	lea    eax,[ebx+0x8]
c0001167:	e9 35 02 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000116c:	89 f8                	mov    eax,edi
c000116e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001174:	77 19                	ja     c000118f <dlmalloc+0x174>
c0001176:	c1 e8 03             	shr    eax,0x3
c0001179:	8d 14 00             	lea    edx,[eax+eax*1]
c000117c:	83 c2 0d             	add    edx,0xd
c000117f:	8d 2c 95 98 6f 02 c0 	lea    ebp,[edx*4-0x3ffd9068]
c0001186:	8b 14 95 a0 6f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9060]
c000118d:	eb 46                	jmp    c00011d5 <dlmalloc+0x1ba>
c000118f:	e8 c1 f9 ff ff       	call   c0000b55 <largebin_index>
c0001194:	8d 14 00             	lea    edx,[eax+eax*1]
c0001197:	83 c2 0d             	add    edx,0xd
c000119a:	8d 0c 95 a0 6f 02 c0 	lea    ecx,[edx*4-0x3ffd9060]
c00011a1:	8b 14 95 a0 6f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9060]
c00011a8:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011ab:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011af:	89 d5                	mov    ebp,edx
c00011b1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011b5:	74 1e                	je     c00011d5 <dlmalloc+0x1ba>
c00011b7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011ba:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011bd:	77 12                	ja     c00011d1 <dlmalloc+0x1b6>
c00011bf:	83 cf 01             	or     edi,0x1
c00011c2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011c5:	76 05                	jbe    c00011cc <dlmalloc+0x1b1>
c00011c7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011ca:	eb f6                	jmp    c00011c2 <dlmalloc+0x1a7>
c00011cc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011cf:	eb 04                	jmp    c00011d5 <dlmalloc+0x1ba>
c00011d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011d5:	89 c7                	mov    edi,eax
c00011d7:	88 c1                	mov    cl,al
c00011d9:	c1 ff 05             	sar    edi,0x5
c00011dc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e0:	bf 01 00 00 00       	mov    edi,0x1
c00011e5:	d3 e7                	shl    edi,cl
c00011e7:	89 f8                	mov    eax,edi
c00011e9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ed:	09 04 bd d4 72 02 c0 	or     DWORD PTR [edi*4-0x3ffd8d2c],eax
c00011f4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011fa:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011fd:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001200:	e9 db fe ff ff       	jmp    c00010e0 <dlmalloc+0xc5>
c0001205:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120b:	76 78                	jbe    c0001285 <dlmalloc+0x26a>
c000120d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001211:	8d 04 c5 d4 6f 02 c0 	lea    eax,[eax*8-0x3ffd902c]
c0001218:	8d 48 f8             	lea    ecx,[eax-0x8]
c000121b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000121e:	39 ca                	cmp    edx,ecx
c0001220:	74 63                	je     c0001285 <dlmalloc+0x26a>
c0001222:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001225:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001228:	83 e3 fc             	and    ebx,0xfffffffc
c000122b:	39 de                	cmp    esi,ebx
c000122d:	77 52                	ja     c0001281 <dlmalloc+0x266>
c000122f:	89 df                	mov    edi,ebx
c0001231:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001234:	29 f7                	sub    edi,esi
c0001236:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001239:	01 d3                	add    ebx,edx
c000123b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000123e:	83 ff 0f             	cmp    edi,0xf
c0001241:	8d 42 08             	lea    eax,[edx+0x8]
c0001244:	77 09                	ja     c000124f <dlmalloc+0x234>
c0001246:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000124a:	e9 52 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000124f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001252:	83 ce 01             	or     esi,0x1
c0001255:	89 0d dc 6f 02 c0    	mov    DWORD PTR ds:0xc0026fdc,ecx
c000125b:	89 0d e0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fe0,ecx
c0001261:	c7 41 08 d4 6f 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026fd4
c0001268:	c7 41 0c d4 6f 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026fd4
c000126f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001272:	89 fa                	mov    edx,edi
c0001274:	83 ca 01             	or     edx,0x1
c0001277:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000127a:	89 3b                	mov    DWORD PTR [ebx],edi
c000127c:	e9 20 01 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c0001281:	89 c2                	mov    edx,eax
c0001283:	eb 99                	jmp    c000121e <dlmalloc+0x203>
c0001285:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001289:	b8 01 00 00 00       	mov    eax,0x1
c000128e:	41                   	inc    ecx
c000128f:	89 cb                	mov    ebx,ecx
c0001291:	8d 14 cd cc 6f 02 c0 	lea    edx,[ecx*8-0x3ffd9034]
c0001298:	c1 eb 05             	shr    ebx,0x5
c000129b:	d3 e0                	shl    eax,cl
c000129d:	8b 3c 9d d4 72 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8d2c]
c00012a4:	39 f8                	cmp    eax,edi
c00012a6:	77 04                	ja     c00012ac <dlmalloc+0x291>
c00012a8:	85 c0                	test   eax,eax
c00012aa:	75 26                	jne    c00012d2 <dlmalloc+0x2b7>
c00012ac:	43                   	inc    ebx
c00012ad:	83 fb 02             	cmp    ebx,0x2
c00012b0:	0f 87 a6 00 00 00    	ja     c000135c <dlmalloc+0x341>
c00012b6:	8b 3c 9d d4 72 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8d2c]
c00012bd:	85 ff                	test   edi,edi
c00012bf:	74 eb                	je     c00012ac <dlmalloc+0x291>
c00012c1:	89 d8                	mov    eax,ebx
c00012c3:	c1 e0 06             	shl    eax,0x6
c00012c6:	8d 14 85 cc 6f 02 c0 	lea    edx,[eax*4-0x3ffd9034]
c00012cd:	b8 01 00 00 00       	mov    eax,0x1
c00012d2:	85 f8                	test   eax,edi
c00012d4:	75 07                	jne    c00012dd <dlmalloc+0x2c2>
c00012d6:	83 c2 08             	add    edx,0x8
c00012d9:	01 c0                	add    eax,eax
c00012db:	eb f5                	jmp    c00012d2 <dlmalloc+0x2b7>
c00012dd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e0:	39 ca                	cmp    edx,ecx
c00012e2:	75 14                	jne    c00012f8 <dlmalloc+0x2dd>
c00012e4:	89 c1                	mov    ecx,eax
c00012e6:	83 c2 08             	add    edx,0x8
c00012e9:	f7 d1                	not    ecx
c00012eb:	01 c0                	add    eax,eax
c00012ed:	21 cf                	and    edi,ecx
c00012ef:	89 3c 9d d4 72 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8d2c],edi
c00012f6:	eb ac                	jmp    c00012a4 <dlmalloc+0x289>
c00012f8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012fb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012fe:	83 e0 fc             	and    eax,0xfffffffc
c0001301:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001304:	89 c3                	mov    ebx,eax
c0001306:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001309:	29 f3                	sub    ebx,esi
c000130b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000130e:	83 fb 0f             	cmp    ebx,0xf
c0001311:	8d 41 08             	lea    eax,[ecx+0x8]
c0001314:	77 09                	ja     c000131f <dlmalloc+0x304>
c0001316:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000131a:	e9 82 00 00 00       	jmp    c00013a1 <dlmalloc+0x386>
c000131f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001322:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001328:	89 3d dc 6f 02 c0    	mov    DWORD PTR ds:0xc0026fdc,edi
c000132e:	89 3d e0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fe0,edi
c0001334:	c7 47 08 d4 6f 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026fd4
c000133b:	c7 47 0c d4 6f 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026fd4
c0001342:	77 06                	ja     c000134a <dlmalloc+0x32f>
c0001344:	89 3d d0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fd0,edi
c000134a:	83 ce 01             	or     esi,0x1
c000134d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001350:	89 d9                	mov    ecx,ebx
c0001352:	83 c9 01             	or     ecx,0x1
c0001355:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001358:	89 1a                	mov    DWORD PTR [edx],ebx
c000135a:	eb 45                	jmp    c00013a1 <dlmalloc+0x386>
c000135c:	a1 cc 6f 02 c0       	mov    eax,ds:0xc0026fcc
c0001361:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001364:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001367:	83 e2 fc             	and    edx,0xfffffffc
c000136a:	39 d1                	cmp    ecx,edx
c000136c:	77 1e                	ja     c000138c <dlmalloc+0x371>
c000136e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001371:	89 f3                	mov    ebx,esi
c0001373:	89 0d cc 6f 02 c0    	mov    DWORD PTR ds:0xc0026fcc,ecx
c0001379:	83 cb 01             	or     ebx,0x1
c000137c:	29 f2                	sub    edx,esi
c000137e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001381:	83 ca 01             	or     edx,0x1
c0001384:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001387:	e9 2d fd ff ff       	jmp    c00010b9 <dlmalloc+0x9e>
c000138c:	83 c4 1c             	add    esp,0x1c
c000138f:	89 f0                	mov    eax,esi
c0001391:	5b                   	pop    ebx
c0001392:	ba a0 6f 02 c0       	mov    edx,0xc0026fa0
c0001397:	5e                   	pop    esi
c0001398:	5f                   	pop    edi
c0001399:	5d                   	pop    ebp
c000139a:	e9 16 fa ff ff       	jmp    c0000db5 <sYSMALLOc>
c000139f:	31 c0                	xor    eax,eax
c00013a1:	83 c4 1c             	add    esp,0x1c
c00013a4:	5b                   	pop    ebx
c00013a5:	5e                   	pop    esi
c00013a6:	5f                   	pop    edi
c00013a7:	5d                   	pop    ebp
c00013a8:	c3                   	ret    

c00013a9 <iALLOc>:
c00013a9:	55                   	push   ebp
c00013aa:	89 c5                	mov    ebp,eax
c00013ac:	57                   	push   edi
c00013ad:	56                   	push   esi
c00013ae:	53                   	push   ebx
c00013af:	83 ec 2c             	sub    esp,0x2c
c00013b2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013b6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013be:	83 3d a0 6f 02 c0 00 	cmp    DWORD PTR ds:0xc0026fa0,0x0
c00013c5:	75 12                	jne    c00013d9 <iALLOc+0x30>
c00013c7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013cb:	b8 a0 6f 02 c0       	mov    eax,0xc0026fa0
c00013d0:	e8 04 f8 ff ff       	call   c0000bd9 <malloc_consolidate>
c00013d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013de:	74 12                	je     c00013f2 <iALLOc+0x49>
c00013e0:	85 ed                	test   ebp,ebp
c00013e2:	0f 84 64 01 00 00    	je     c000154c <iALLOc+0x1a3>
c00013e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f0:	eb 33                	jmp    c0001425 <iALLOc+0x7c>
c00013f2:	85 ed                	test   ebp,ebp
c00013f4:	75 14                	jne    c000140a <iALLOc+0x61>
c00013f6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013fe:	83 c4 2c             	add    esp,0x2c
c0001401:	5b                   	pop    ebx
c0001402:	5e                   	pop    esi
c0001403:	5f                   	pop    edi
c0001404:	5d                   	pop    ebp
c0001405:	e9 11 fc ff ff       	jmp    c000101b <dlmalloc>
c000140a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001411:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001419:	83 f8 0f             	cmp    eax,0xf
c000141c:	76 07                	jbe    c0001425 <iALLOc+0x7c>
c000141e:	83 e0 f8             	and    eax,0xfffffff8
c0001421:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001425:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000142a:	75 09                	jne    c0001435 <iALLOc+0x8c>
c000142c:	89 d0                	mov    eax,edx
c000142e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001431:	31 f6                	xor    esi,esi
c0001433:	eb 3b                	jmp    c0001470 <iALLOc+0xc7>
c0001435:	8b 02                	mov    eax,DWORD PTR [edx]
c0001437:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000143f:	83 c0 0b             	add    eax,0xb
c0001442:	83 f8 0f             	cmp    eax,0xf
c0001445:	76 07                	jbe    c000144e <iALLOc+0xa5>
c0001447:	83 e0 f8             	and    eax,0xfffffff8
c000144a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000144e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001452:	0f af f5             	imul   esi,ebp
c0001455:	eb 25                	jmp    c000147c <iALLOc+0xd3>
c0001457:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001459:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000145c:	bb 10 00 00 00       	mov    ebx,0x10
c0001461:	83 f9 0f             	cmp    ecx,0xf
c0001464:	76 05                	jbe    c000146b <iALLOc+0xc2>
c0001466:	83 e1 f8             	and    ecx,0xfffffff8
c0001469:	89 cb                	mov    ebx,ecx
c000146b:	01 de                	add    esi,ebx
c000146d:	83 c0 04             	add    eax,0x4
c0001470:	39 c7                	cmp    edi,eax
c0001472:	75 e3                	jne    c0001457 <iALLOc+0xae>
c0001474:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000147c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001480:	8b 1d f4 72 02 c0    	mov    ebx,DWORD PTR ds:0xc00272f4
c0001486:	83 ec 0c             	sub    esp,0xc
c0001489:	c7 05 f4 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00272f4,0x0
c0001493:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001497:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000149b:	50                   	push   eax
c000149c:	e8 7a fb ff ff       	call   c000101b <dlmalloc>
c00014a1:	83 c4 10             	add    esp,0x10
c00014a4:	89 1d f4 72 02 c0    	mov    DWORD PTR ds:0xc00272f4,ebx
c00014aa:	85 c0                	test   eax,eax
c00014ac:	0f 84 92 00 00 00    	je     c0001544 <iALLOc+0x19b>
c00014b2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014b5:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b8:	83 e3 fc             	and    ebx,0xfffffffc
c00014bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014bf:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014c4:	74 1e                	je     c00014e4 <iALLOc+0x13b>
c00014c6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014ca:	89 d9                	mov    ecx,ebx
c00014cc:	52                   	push   edx
c00014cd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d1:	83 e9 04             	sub    ecx,0x4
c00014d4:	51                   	push   ecx
c00014d5:	6a 00                	push   0x0
c00014d7:	50                   	push   eax
c00014d8:	e8 9f f1 ff ff       	call   c000067c <memset>
c00014dd:	83 c4 10             	add    esp,0x10
c00014e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e9:	75 14                	jne    c00014ff <iALLOc+0x156>
c00014eb:	8d 04 37             	lea    eax,[edi+esi*1]
c00014ee:	29 f3                	sub    ebx,esi
c00014f0:	8d 48 08             	lea    ecx,[eax+0x8]
c00014f3:	83 cb 01             	or     ebx,0x1
c00014f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014fa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014fd:	89 f3                	mov    ebx,esi
c00014ff:	31 c0                	xor    eax,eax
c0001501:	4d                   	dec    ebp
c0001502:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001505:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001509:	39 c5                	cmp    ebp,eax
c000150b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000150e:	74 2c                	je     c000153c <iALLOc+0x193>
c0001510:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001514:	85 c9                	test   ecx,ecx
c0001516:	75 15                	jne    c000152d <iALLOc+0x184>
c0001518:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000151b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000151e:	b9 10 00 00 00       	mov    ecx,0x10
c0001523:	83 fe 0f             	cmp    esi,0xf
c0001526:	76 05                	jbe    c000152d <iALLOc+0x184>
c0001528:	83 e6 f8             	and    esi,0xfffffff8
c000152b:	89 f1                	mov    ecx,esi
c000152d:	89 ce                	mov    esi,ecx
c000152f:	29 cb                	sub    ebx,ecx
c0001531:	83 ce 01             	or     esi,0x1
c0001534:	40                   	inc    eax
c0001535:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001538:	01 cf                	add    edi,ecx
c000153a:	eb c6                	jmp    c0001502 <iALLOc+0x159>
c000153c:	83 cb 01             	or     ebx,0x1
c000153f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001542:	eb 08                	jmp    c000154c <iALLOc+0x1a3>
c0001544:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000154c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001550:	83 c4 2c             	add    esp,0x2c
c0001553:	5b                   	pop    ebx
c0001554:	5e                   	pop    esi
c0001555:	5f                   	pop    edi
c0001556:	5d                   	pop    ebp
c0001557:	c3                   	ret    

c0001558 <dlrealloc>:
c0001558:	55                   	push   ebp
c0001559:	57                   	push   edi
c000155a:	56                   	push   esi
c000155b:	53                   	push   ebx
c000155c:	83 ec 1c             	sub    esp,0x1c
c000155f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001563:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001567:	85 db                	test   ebx,ebx
c0001569:	75 10                	jne    c000157b <dlrealloc+0x23>
c000156b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000156f:	83 c4 1c             	add    esp,0x1c
c0001572:	5b                   	pop    ebx
c0001573:	5e                   	pop    esi
c0001574:	5f                   	pop    edi
c0001575:	5d                   	pop    ebp
c0001576:	e9 a0 fa ff ff       	jmp    c000101b <dlmalloc>
c000157b:	83 f8 df             	cmp    eax,0xffffffdf
c000157e:	76 07                	jbe    c0001587 <dlrealloc+0x2f>
c0001580:	31 db                	xor    ebx,ebx
c0001582:	e9 6a 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c0001587:	83 c0 0b             	add    eax,0xb
c000158a:	bd 10 00 00 00       	mov    ebp,0x10
c000158f:	83 f8 0f             	cmp    eax,0xf
c0001592:	76 05                	jbe    c0001599 <dlrealloc+0x41>
c0001594:	83 e0 f8             	and    eax,0xfffffff8
c0001597:	89 c5                	mov    ebp,eax
c0001599:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000159c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000159f:	89 c6                	mov    esi,eax
c00015a1:	83 e6 fc             	and    esi,0xfffffffc
c00015a4:	a8 02                	test   al,0x2
c00015a6:	75 d8                	jne    c0001580 <dlrealloc+0x28>
c00015a8:	39 f5                	cmp    ebp,esi
c00015aa:	0f 86 04 01 00 00    	jbe    c00016b4 <dlrealloc+0x15c>
c00015b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00015b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015b6:	39 15 cc 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fcc,edx
c00015bc:	75 33                	jne    c00015f1 <dlrealloc+0x99>
c00015be:	83 e1 fc             	and    ecx,0xfffffffc
c00015c1:	01 f1                	add    ecx,esi
c00015c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015ce:	77 49                	ja     c0001619 <dlrealloc+0xc1>
c00015d0:	01 ef                	add    edi,ebp
c00015d2:	83 e0 01             	and    eax,0x1
c00015d5:	09 e8                	or     eax,ebp
c00015d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015da:	89 3d cc 6f 02 c0    	mov    DWORD PTR ds:0xc0026fcc,edi
c00015e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e4:	29 e8                	sub    eax,ebp
c00015e6:	83 c8 01             	or     eax,0x1
c00015e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015ec:	e9 00 01 00 00       	jmp    c00016f1 <dlrealloc+0x199>
c00015f1:	89 c8                	mov    eax,ecx
c00015f3:	83 e0 fe             	and    eax,0xfffffffe
c00015f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015fb:	75 1c                	jne    c0001619 <dlrealloc+0xc1>
c00015fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001600:	01 f1                	add    ecx,esi
c0001602:	39 cd                	cmp    ebp,ecx
c0001604:	77 13                	ja     c0001619 <dlrealloc+0xc1>
c0001606:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001609:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000160c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000160f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001612:	89 ce                	mov    esi,ecx
c0001614:	e9 9b 00 00 00       	jmp    c00016b4 <dlrealloc+0x15c>
c0001619:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000161d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001620:	83 ec 0c             	sub    esp,0xc
c0001623:	50                   	push   eax
c0001624:	e8 f2 f9 ff ff       	call   c000101b <dlmalloc>
c0001629:	83 c4 10             	add    esp,0x10
c000162c:	85 c0                	test   eax,eax
c000162e:	0f 84 4c ff ff ff    	je     c0001580 <dlrealloc+0x28>
c0001634:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001637:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000163b:	39 ca                	cmp    edx,ecx
c000163d:	75 0a                	jne    c0001649 <dlrealloc+0xf1>
c000163f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001642:	83 e0 fc             	and    eax,0xfffffffc
c0001645:	01 c6                	add    esi,eax
c0001647:	eb 6b                	jmp    c00016b4 <dlrealloc+0x15c>
c0001649:	8d 4e fc             	lea    ecx,[esi-0x4]
c000164c:	83 f9 27             	cmp    ecx,0x27
c000164f:	76 08                	jbe    c0001659 <dlrealloc+0x101>
c0001651:	89 de                	mov    esi,ebx
c0001653:	89 c7                	mov    edi,eax
c0001655:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001657:	eb 43                	jmp    c000169c <dlrealloc+0x144>
c0001659:	8b 13                	mov    edx,DWORD PTR [ebx]
c000165b:	83 f9 13             	cmp    ecx,0x13
c000165e:	89 10                	mov    DWORD PTR [eax],edx
c0001660:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001663:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001666:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001669:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000166c:	76 2e                	jbe    c000169c <dlrealloc+0x144>
c000166e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001671:	83 f9 1b             	cmp    ecx,0x1b
c0001674:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001677:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000167a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000167d:	76 1d                	jbe    c000169c <dlrealloc+0x144>
c000167f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001682:	83 f9 23             	cmp    ecx,0x23
c0001685:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001688:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000168b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000168e:	76 0c                	jbe    c000169c <dlrealloc+0x144>
c0001690:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001693:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001696:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001699:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000169c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a0:	83 ec 0c             	sub    esp,0xc
c00016a3:	53                   	push   ebx
c00016a4:	e8 17 f6 ff ff       	call   c0000cc0 <dlfree>
c00016a9:	83 c4 10             	add    esp,0x10
c00016ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b0:	89 c3                	mov    ebx,eax
c00016b2:	eb 3d                	jmp    c00016f1 <dlrealloc+0x199>
c00016b4:	89 f2                	mov    edx,esi
c00016b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b9:	29 ea                	sub    edx,ebp
c00016bb:	83 e1 01             	and    ecx,0x1
c00016be:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c1:	83 fa 0f             	cmp    edx,0xf
c00016c4:	77 0b                	ja     c00016d1 <dlrealloc+0x179>
c00016c6:	09 ce                	or     esi,ecx
c00016c8:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016cf:	eb 20                	jmp    c00016f1 <dlrealloc+0x199>
c00016d1:	01 ef                	add    edi,ebp
c00016d3:	83 ec 0c             	sub    esp,0xc
c00016d6:	09 cd                	or     ebp,ecx
c00016d8:	83 ca 01             	or     edx,0x1
c00016db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016de:	83 c7 08             	add    edi,0x8
c00016e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e8:	57                   	push   edi
c00016e9:	e8 d2 f5 ff ff       	call   c0000cc0 <dlfree>
c00016ee:	83 c4 10             	add    esp,0x10
c00016f1:	83 c4 1c             	add    esp,0x1c
c00016f4:	89 d8                	mov    eax,ebx
c00016f6:	5b                   	pop    ebx
c00016f7:	5e                   	pop    esi
c00016f8:	5f                   	pop    edi
c00016f9:	5d                   	pop    ebp
c00016fa:	c3                   	ret    

c00016fb <dlmemalign>:
c00016fb:	55                   	push   ebp
c00016fc:	57                   	push   edi
c00016fd:	56                   	push   esi
c00016fe:	53                   	push   ebx
c00016ff:	83 ec 0c             	sub    esp,0xc
c0001702:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001706:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000170a:	83 fa 08             	cmp    edx,0x8
c000170d:	77 10                	ja     c000171f <dlmemalign+0x24>
c000170f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001713:	83 c4 0c             	add    esp,0xc
c0001716:	5b                   	pop    ebx
c0001717:	5e                   	pop    esi
c0001718:	5f                   	pop    edi
c0001719:	5d                   	pop    ebp
c000171a:	e9 fc f8 ff ff       	jmp    c000101b <dlmalloc>
c000171f:	bf 10 00 00 00       	mov    edi,0x10
c0001724:	83 fa 0f             	cmp    edx,0xf
c0001727:	76 13                	jbe    c000173c <dlmemalign+0x41>
c0001729:	8d 4a ff             	lea    ecx,[edx-0x1]
c000172c:	85 d1                	test   ecx,edx
c000172e:	75 04                	jne    c0001734 <dlmemalign+0x39>
c0001730:	89 d7                	mov    edi,edx
c0001732:	eb 08                	jmp    c000173c <dlmemalign+0x41>
c0001734:	39 d7                	cmp    edi,edx
c0001736:	73 04                	jae    c000173c <dlmemalign+0x41>
c0001738:	01 ff                	add    edi,edi
c000173a:	eb f8                	jmp    c0001734 <dlmemalign+0x39>
c000173c:	83 f8 df             	cmp    eax,0xffffffdf
c000173f:	76 07                	jbe    c0001748 <dlmemalign+0x4d>
c0001741:	31 c0                	xor    eax,eax
c0001743:	e9 ce 00 00 00       	jmp    c0001816 <dlmemalign+0x11b>
c0001748:	83 c0 0b             	add    eax,0xb
c000174b:	bd 10 00 00 00       	mov    ebp,0x10
c0001750:	83 f8 0f             	cmp    eax,0xf
c0001753:	76 05                	jbe    c000175a <dlmemalign+0x5f>
c0001755:	83 e0 f8             	and    eax,0xfffffff8
c0001758:	89 c5                	mov    ebp,eax
c000175a:	83 ec 0c             	sub    esp,0xc
c000175d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001761:	50                   	push   eax
c0001762:	e8 b4 f8 ff ff       	call   c000101b <dlmalloc>
c0001767:	83 c4 10             	add    esp,0x10
c000176a:	89 c1                	mov    ecx,eax
c000176c:	85 c0                	test   eax,eax
c000176e:	74 d1                	je     c0001741 <dlmemalign+0x46>
c0001770:	31 d2                	xor    edx,edx
c0001772:	8d 70 f8             	lea    esi,[eax-0x8]
c0001775:	f7 f7                	div    edi
c0001777:	85 d2                	test   edx,edx
c0001779:	74 62                	je     c00017dd <dlmemalign+0xe2>
c000177b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000177f:	89 f8                	mov    eax,edi
c0001781:	f7 d8                	neg    eax
c0001783:	21 c3                	and    ebx,eax
c0001785:	83 eb 08             	sub    ebx,0x8
c0001788:	89 d8                	mov    eax,ebx
c000178a:	29 f0                	sub    eax,esi
c000178c:	83 f8 0f             	cmp    eax,0xf
c000178f:	77 02                	ja     c0001793 <dlmemalign+0x98>
c0001791:	01 fb                	add    ebx,edi
c0001793:	89 d8                	mov    eax,ebx
c0001795:	29 f0                	sub    eax,esi
c0001797:	89 c6                	mov    esi,eax
c0001799:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000179c:	89 c2                	mov    edx,eax
c000179e:	83 e2 fc             	and    edx,0xfffffffc
c00017a1:	29 f2                	sub    edx,esi
c00017a3:	a8 02                	test   al,0x2
c00017a5:	74 10                	je     c00017b7 <dlmemalign+0xbc>
c00017a7:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017aa:	83 ca 02             	or     edx,0x2
c00017ad:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b0:	89 33                	mov    DWORD PTR [ebx],esi
c00017b2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017b5:	eb 5f                	jmp    c0001816 <dlmemalign+0x11b>
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	89 d0                	mov    eax,edx
c00017bc:	83 c8 01             	or     eax,0x1
c00017bf:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017c2:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017ca:	83 e0 01             	and    eax,0x1
c00017cd:	09 f0                	or     eax,esi
c00017cf:	89 de                	mov    esi,ebx
c00017d1:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017d4:	51                   	push   ecx
c00017d5:	e8 e6 f4 ff ff       	call   c0000cc0 <dlfree>
c00017da:	83 c4 10             	add    esp,0x10
c00017dd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e0:	a8 02                	test   al,0x2
c00017e2:	75 2f                	jne    c0001813 <dlmemalign+0x118>
c00017e4:	83 e0 fc             	and    eax,0xfffffffc
c00017e7:	8d 55 10             	lea    edx,[ebp+0x10]
c00017ea:	39 c2                	cmp    edx,eax
c00017ec:	73 25                	jae    c0001813 <dlmemalign+0x118>
c00017ee:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f1:	83 ec 0c             	sub    esp,0xc
c00017f4:	29 e8                	sub    eax,ebp
c00017f6:	83 c2 08             	add    edx,0x8
c00017f9:	83 c8 01             	or     eax,0x1
c00017fc:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017ff:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001802:	83 e0 01             	and    eax,0x1
c0001805:	09 c5                	or     ebp,eax
c0001807:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000180a:	52                   	push   edx
c000180b:	e8 b0 f4 ff ff       	call   c0000cc0 <dlfree>
c0001810:	83 c4 10             	add    esp,0x10
c0001813:	8d 46 08             	lea    eax,[esi+0x8]
c0001816:	83 c4 0c             	add    esp,0xc
c0001819:	5b                   	pop    ebx
c000181a:	5e                   	pop    esi
c000181b:	5f                   	pop    edi
c000181c:	5d                   	pop    ebp
c000181d:	c3                   	ret    

c000181e <dlcalloc>:
c000181e:	53                   	push   ebx
c000181f:	83 ec 14             	sub    esp,0x14
c0001822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001826:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000182b:	50                   	push   eax
c000182c:	e8 ea f7 ff ff       	call   c000101b <dlmalloc>
c0001831:	83 c4 10             	add    esp,0x10
c0001834:	89 c3                	mov    ebx,eax
c0001836:	85 c0                	test   eax,eax
c0001838:	74 77                	je     c00018b1 <dlcalloc+0x93>
c000183a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000183d:	89 d0                	mov    eax,edx
c000183f:	83 e0 fc             	and    eax,0xfffffffc
c0001842:	80 e2 02             	and    dl,0x2
c0001845:	75 5a                	jne    c00018a1 <dlcalloc+0x83>
c0001847:	83 e8 04             	sub    eax,0x4
c000184a:	83 f8 27             	cmp    eax,0x27
c000184d:	76 03                	jbe    c0001852 <dlcalloc+0x34>
c000184f:	51                   	push   ecx
c0001850:	eb 53                	jmp    c00018a5 <dlcalloc+0x87>
c0001852:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001858:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000185f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001866:	83 f8 13             	cmp    eax,0x13
c0001869:	76 46                	jbe    c00018b1 <dlcalloc+0x93>
c000186b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001872:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001879:	83 f8 1b             	cmp    eax,0x1b
c000187c:	76 33                	jbe    c00018b1 <dlcalloc+0x93>
c000187e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001885:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000188c:	83 f8 23             	cmp    eax,0x23
c000188f:	76 20                	jbe    c00018b1 <dlcalloc+0x93>
c0001891:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001898:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000189f:	eb 10                	jmp    c00018b1 <dlcalloc+0x93>
c00018a1:	83 e8 08             	sub    eax,0x8
c00018a4:	52                   	push   edx
c00018a5:	50                   	push   eax
c00018a6:	6a 00                	push   0x0
c00018a8:	53                   	push   ebx
c00018a9:	e8 ce ed ff ff       	call   c000067c <memset>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	89 d8                	mov    eax,ebx
c00018b3:	83 c4 08             	add    esp,0x8
c00018b6:	5b                   	pop    ebx
c00018b7:	c3                   	ret    

c00018b8 <dlcfree>:
c00018b8:	e9 03 f4 ff ff       	jmp    c0000cc0 <dlfree>

c00018bd <dlindependent_calloc>:
c00018bd:	83 ec 28             	sub    esp,0x28
c00018c0:	b9 03 00 00 00       	mov    ecx,0x3
c00018c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d9:	e8 cb fa ff ff       	call   c00013a9 <iALLOc>
c00018de:	83 c4 2c             	add    esp,0x2c
c00018e1:	c3                   	ret    

c00018e2 <dlindependent_comalloc>:
c00018e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ea:	31 c9                	xor    ecx,ecx
c00018ec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018f4:	e9 b0 fa ff ff       	jmp    c00013a9 <iALLOc>

c00018f9 <dlvalloc>:
c00018f9:	83 ec 0c             	sub    esp,0xc
c00018fc:	83 3d a0 6f 02 c0 00 	cmp    DWORD PTR ds:0xc0026fa0,0x0
c0001903:	75 0a                	jne    c000190f <dlvalloc+0x16>
c0001905:	b8 a0 6f 02 c0       	mov    eax,0xc0026fa0
c000190a:	e8 ca f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000190f:	50                   	push   eax
c0001910:	50                   	push   eax
c0001911:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001915:	ff 35 fc 72 02 c0    	push   DWORD PTR ds:0xc00272fc
c000191b:	e8 db fd ff ff       	call   c00016fb <dlmemalign>
c0001920:	83 c4 1c             	add    esp,0x1c
c0001923:	c3                   	ret    

c0001924 <dlpvalloc>:
c0001924:	83 ec 0c             	sub    esp,0xc
c0001927:	83 3d a0 6f 02 c0 00 	cmp    DWORD PTR ds:0xc0026fa0,0x0
c000192e:	75 0a                	jne    c000193a <dlpvalloc+0x16>
c0001930:	b8 a0 6f 02 c0       	mov    eax,0xc0026fa0
c0001935:	e8 9f f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c000193a:	a1 fc 72 02 c0       	mov    eax,ds:0xc00272fc
c000193f:	89 c1                	mov    ecx,eax
c0001941:	52                   	push   edx
c0001942:	f7 d9                	neg    ecx
c0001944:	52                   	push   edx
c0001945:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001949:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000194d:	21 ca                	and    edx,ecx
c000194f:	52                   	push   edx
c0001950:	50                   	push   eax
c0001951:	e8 a5 fd ff ff       	call   c00016fb <dlmemalign>
c0001956:	83 c4 1c             	add    esp,0x1c
c0001959:	c3                   	ret    

c000195a <dlmalloc_trim>:
c000195a:	b8 a0 6f 02 c0       	mov    eax,0xc0026fa0
c000195f:	e8 75 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001964:	31 c0                	xor    eax,eax
c0001966:	c3                   	ret    

c0001967 <dlmalloc_usable_size>:
c0001967:	53                   	push   ebx
c0001968:	31 c0                	xor    eax,eax
c000196a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000196e:	85 c9                	test   ecx,ecx
c0001970:	74 24                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001972:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001975:	f6 c2 02             	test   dl,0x2
c0001978:	74 08                	je     c0001982 <dlmalloc_usable_size+0x1b>
c000197a:	83 e2 fc             	and    edx,0xfffffffc
c000197d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001980:	eb 14                	jmp    c0001996 <dlmalloc_usable_size+0x2f>
c0001982:	89 d3                	mov    ebx,edx
c0001984:	31 c0                	xor    eax,eax
c0001986:	83 e3 fe             	and    ebx,0xfffffffe
c0001989:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000198e:	74 06                	je     c0001996 <dlmalloc_usable_size+0x2f>
c0001990:	83 e2 fc             	and    edx,0xfffffffc
c0001993:	8d 42 fc             	lea    eax,[edx-0x4]
c0001996:	5b                   	pop    ebx
c0001997:	c3                   	ret    

c0001998 <dlmallinfo>:
c0001998:	55                   	push   ebp
c0001999:	57                   	push   edi
c000199a:	56                   	push   esi
c000199b:	53                   	push   ebx
c000199c:	83 ec 08             	sub    esp,0x8
c000199f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019a3:	83 3d cc 6f 02 c0 00 	cmp    DWORD PTR ds:0xc0026fcc,0x0
c00019aa:	75 0a                	jne    c00019b6 <dlmallinfo+0x1e>
c00019ac:	b8 a0 6f 02 c0       	mov    eax,0xc0026fa0
c00019b1:	e8 23 f2 ff ff       	call   c0000bd9 <malloc_consolidate>
c00019b6:	a1 cc 6f 02 c0       	mov    eax,ds:0xc0026fcc
c00019bb:	31 ed                	xor    ebp,ebp
c00019bd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c0:	31 c9                	xor    ecx,ecx
c00019c2:	83 e0 fc             	and    eax,0xfffffffc
c00019c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c9:	31 c0                	xor    eax,eax
c00019cb:	8b 14 85 a4 6f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd905c]
c00019d2:	85 d2                	test   edx,edx
c00019d4:	74 0e                	je     c00019e4 <dlmallinfo+0x4c>
c00019d6:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d9:	45                   	inc    ebp
c00019da:	83 e6 fc             	and    esi,0xfffffffc
c00019dd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e0:	01 f1                	add    ecx,esi
c00019e2:	eb ee                	jmp    c00019d2 <dlmallinfo+0x3a>
c00019e4:	40                   	inc    eax
c00019e5:	83 f8 0a             	cmp    eax,0xa
c00019e8:	75 e1                	jne    c00019cb <dlmallinfo+0x33>
c00019ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019ee:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019f5:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f8:	b8 d4 6f 02 c0       	mov    eax,0xc0026fd4
c00019fd:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a00:	39 f0                	cmp    eax,esi
c0001a02:	74 10                	je     c0001a14 <dlmallinfo+0x7c>
c0001a04:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a07:	ff 04 24             	inc    DWORD PTR [esp]
c0001a0a:	83 e7 fc             	and    edi,0xfffffffc
c0001a0d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a10:	01 fa                	add    edx,edi
c0001a12:	eb ec                	jmp    c0001a00 <dlmallinfo+0x68>
c0001a14:	83 c0 08             	add    eax,0x8
c0001a17:	3d cc 72 02 c0       	cmp    eax,0xc00272cc
c0001a1c:	75 df                	jne    c00019fd <dlmallinfo+0x65>
c0001a1e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a21:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a24:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a27:	a1 08 73 02 c0       	mov    eax,ds:0xc0027308
c0001a2c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a2f:	89 03                	mov    DWORD PTR [ebx],eax
c0001a31:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a34:	8b 35 f0 72 02 c0    	mov    esi,DWORD PTR ds:0xc00272f0
c0001a3a:	29 d0                	sub    eax,edx
c0001a3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a3f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a42:	8b 35 04 73 02 c0    	mov    esi,DWORD PTR ds:0xc0027304
c0001a48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a4c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a4f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a52:	8b 35 14 73 02 c0    	mov    esi,DWORD PTR ds:0xc0027314
c0001a58:	89 d8                	mov    eax,ebx
c0001a5a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a5d:	83 c4 08             	add    esp,0x8
c0001a60:	5b                   	pop    ebx
c0001a61:	5e                   	pop    esi
c0001a62:	5f                   	pop    edi
c0001a63:	5d                   	pop    ebp
c0001a64:	c2 04 00             	ret    0x4

c0001a67 <dlmalloc_stats>:
c0001a67:	83 ec 30             	sub    esp,0x30
c0001a6a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a6e:	50                   	push   eax
c0001a6f:	e8 24 ff ff ff       	call   c0001998 <dlmallinfo>
c0001a74:	83 c4 30             	add    esp,0x30
c0001a77:	c3                   	ret    

c0001a78 <dlmallopt>:
c0001a78:	56                   	push   esi
c0001a79:	b8 a0 6f 02 c0       	mov    eax,0xc0026fa0
c0001a7e:	53                   	push   ebx
c0001a7f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a87:	e8 4d f1 ff ff       	call   c0000bd9 <malloc_consolidate>
c0001a8c:	8d 46 04             	lea    eax,[esi+0x4]
c0001a8f:	83 f8 05             	cmp    eax,0x5
c0001a92:	77 67                	ja     c0001afb <dlmallopt+0x83>
c0001a94:	ff 24 85 c4 2b 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd43c]
c0001a9b:	83 fb 50             	cmp    ebx,0x50
c0001a9e:	77 5b                	ja     c0001afb <dlmallopt+0x83>
c0001aa0:	ba 08 00 00 00       	mov    edx,0x8
c0001aa5:	85 db                	test   ebx,ebx
c0001aa7:	74 12                	je     c0001abb <dlmallopt+0x43>
c0001aa9:	83 c3 0b             	add    ebx,0xb
c0001aac:	ba 10 00 00 00       	mov    edx,0x10
c0001ab1:	83 fb 0f             	cmp    ebx,0xf
c0001ab4:	76 05                	jbe    c0001abb <dlmallopt+0x43>
c0001ab6:	89 da                	mov    edx,ebx
c0001ab8:	83 e2 f8             	and    edx,0xfffffff8
c0001abb:	a1 a0 6f 02 c0       	mov    eax,ds:0xc0026fa0
c0001ac0:	83 e0 03             	and    eax,0x3
c0001ac3:	09 d0                	or     eax,edx
c0001ac5:	a3 a0 6f 02 c0       	mov    ds:0xc0026fa0,eax
c0001aca:	eb 31                	jmp    c0001afd <dlmallopt+0x85>
c0001acc:	89 1d e4 72 02 c0    	mov    DWORD PTR ds:0xc00272e4,ebx
c0001ad2:	eb 06                	jmp    c0001ada <dlmallopt+0x62>
c0001ad4:	89 1d e8 72 02 c0    	mov    DWORD PTR ds:0xc00272e8,ebx
c0001ada:	be 01 00 00 00       	mov    esi,0x1
c0001adf:	eb 1c                	jmp    c0001afd <dlmallopt+0x85>
c0001ae1:	89 1d ec 72 02 c0    	mov    DWORD PTR ds:0xc00272ec,ebx
c0001ae7:	eb f1                	jmp    c0001ada <dlmallopt+0x62>
c0001ae9:	31 f6                	xor    esi,esi
c0001aeb:	85 db                	test   ebx,ebx
c0001aed:	75 0e                	jne    c0001afd <dlmallopt+0x85>
c0001aef:	c7 05 f4 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00272f4,0x0
c0001af9:	eb df                	jmp    c0001ada <dlmallopt+0x62>
c0001afb:	31 f6                	xor    esi,esi
c0001afd:	89 f0                	mov    eax,esi
c0001aff:	5b                   	pop    ebx
c0001b00:	5e                   	pop    esi
c0001b01:	c3                   	ret    

c0001b02 <disk_status>:
c0001b02:	31 c0                	xor    eax,eax
c0001b04:	c3                   	ret    

c0001b05 <disk_initialize>:
c0001b05:	31 c0                	xor    eax,eax
c0001b07:	c3                   	ret    

c0001b08 <disk_read>:
c0001b08:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b0d:	0f b6 04 85 60 aa 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd55a0]
c0001b15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b19:	e9 fa 9d 01 00       	jmp    c001b918 <fatWrapperReadDisk>

c0001b1e <disk_write>:
c0001b1e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b23:	0f b6 04 85 60 aa 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd55a0]
c0001b2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b2f:	e9 2c 9e 01 00       	jmp    c001b960 <fatWrapperWriteDisk>

c0001b34 <disk_ioctl>:
c0001b34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b3d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b42:	0f b6 04 85 60 aa 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd55a0]
c0001b4a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b4e:	e9 55 9e 01 00       	jmp    c001b9a8 <fatWrapperIoctl>

c0001b53 <ld_word>:
c0001b53:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b57:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b5a:	c1 e2 08             	shl    edx,0x8
c0001b5d:	09 d0                	or     eax,edx
c0001b5f:	c3                   	ret    

c0001b60 <ld_dword>:
c0001b60:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b64:	89 d1                	mov    ecx,edx
c0001b66:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b6a:	c1 e1 08             	shl    ecx,0x8
c0001b6d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b70:	09 ca                	or     edx,ecx
c0001b72:	c1 e2 08             	shl    edx,0x8
c0001b75:	09 d0                	or     eax,edx
c0001b77:	c3                   	ret    

c0001b78 <ld_qword>:
c0001b78:	57                   	push   edi
c0001b79:	56                   	push   esi
c0001b7a:	53                   	push   ebx
c0001b7b:	31 db                	xor    ebx,ebx
c0001b7d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b80:	89 df                	mov    edi,ebx
c0001b82:	89 ce                	mov    esi,ecx
c0001b84:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b88:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b8c:	c1 e6 08             	shl    esi,0x8
c0001b8f:	09 f2                	or     edx,esi
c0001b91:	89 d6                	mov    esi,edx
c0001b93:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b97:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b9b:	c1 e6 08             	shl    esi,0x8
c0001b9e:	09 f2                	or     edx,esi
c0001ba0:	89 d6                	mov    esi,edx
c0001ba2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ba6:	0f a4 f7 08          	shld   edi,esi,0x8
c0001baa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bad:	c1 e6 08             	shl    esi,0x8
c0001bb0:	89 fb                	mov    ebx,edi
c0001bb2:	09 f2                	or     edx,esi
c0001bb4:	89 d1                	mov    ecx,edx
c0001bb6:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bba:	c1 e1 08             	shl    ecx,0x8
c0001bbd:	89 da                	mov    edx,ebx
c0001bbf:	09 c8                	or     eax,ecx
c0001bc1:	5b                   	pop    ebx
c0001bc2:	5e                   	pop    esi
c0001bc3:	5f                   	pop    edi
c0001bc4:	c3                   	ret    

c0001bc5 <st_word>:
c0001bc5:	66 89 10             	mov    WORD PTR [eax],dx
c0001bc8:	c3                   	ret    

c0001bc9 <st_dword>:
c0001bc9:	89 10                	mov    DWORD PTR [eax],edx
c0001bcb:	c3                   	ret    

c0001bcc <st_qword>:
c0001bcc:	89 10                	mov    DWORD PTR [eax],edx
c0001bce:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd1:	c3                   	ret    

c0001bd2 <mem_cpy>:
c0001bd2:	85 c9                	test   ecx,ecx
c0001bd4:	74 10                	je     c0001be6 <mem_cpy+0x14>
c0001bd6:	57                   	push   edi
c0001bd7:	01 c1                	add    ecx,eax
c0001bd9:	56                   	push   esi
c0001bda:	89 c7                	mov    edi,eax
c0001bdc:	89 d6                	mov    esi,edx
c0001bde:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001bdf:	39 f9                	cmp    ecx,edi
c0001be1:	75 fb                	jne    c0001bde <mem_cpy+0xc>
c0001be3:	5e                   	pop    esi
c0001be4:	5f                   	pop    edi
c0001be5:	c3                   	ret    
c0001be6:	c3                   	ret    

c0001be7 <mem_set>:
c0001be7:	01 c1                	add    ecx,eax
c0001be9:	40                   	inc    eax
c0001bea:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bed:	39 c8                	cmp    eax,ecx
c0001bef:	75 f8                	jne    c0001be9 <mem_set+0x2>
c0001bf1:	c3                   	ret    

c0001bf2 <mem_cmp>:
c0001bf2:	57                   	push   edi
c0001bf3:	56                   	push   esi
c0001bf4:	89 c6                	mov    esi,eax
c0001bf6:	53                   	push   ebx
c0001bf7:	46                   	inc    esi
c0001bf8:	42                   	inc    edx
c0001bf9:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001bfd:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c01:	29 fb                	sub    ebx,edi
c0001c03:	89 cf                	mov    edi,ecx
c0001c05:	29 f7                	sub    edi,esi
c0001c07:	01 c7                	add    edi,eax
c0001c09:	74 04                	je     c0001c0f <mem_cmp+0x1d>
c0001c0b:	85 db                	test   ebx,ebx
c0001c0d:	74 e8                	je     c0001bf7 <mem_cmp+0x5>
c0001c0f:	89 d8                	mov    eax,ebx
c0001c11:	5b                   	pop    ebx
c0001c12:	5e                   	pop    esi
c0001c13:	5f                   	pop    edi
c0001c14:	c3                   	ret    

c0001c15 <chk_chr>:
c0001c15:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c18:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c1b:	74 07                	je     c0001c24 <chk_chr+0xf>
c0001c1d:	39 d1                	cmp    ecx,edx
c0001c1f:	74 03                	je     c0001c24 <chk_chr+0xf>
c0001c21:	40                   	inc    eax
c0001c22:	eb f1                	jmp    c0001c15 <chk_chr>
c0001c24:	89 c8                	mov    eax,ecx
c0001c26:	c3                   	ret    

c0001c27 <dbc_1st>:
c0001c27:	31 c0                	xor    eax,eax
c0001c29:	c3                   	ret    

c0001c2a <dbc_2nd>:
c0001c2a:	31 c0                	xor    eax,eax
c0001c2c:	c3                   	ret    

c0001c2d <tchar2uni>:
c0001c2d:	57                   	push   edi
c0001c2e:	89 c7                	mov    edi,eax
c0001c30:	56                   	push   esi
c0001c31:	53                   	push   ebx
c0001c32:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c34:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c36:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c39:	84 c9                	test   cl,cl
c0001c3b:	78 0a                	js     c0001c47 <tchar2uni+0x1a>
c0001c3d:	0f b6 d1             	movzx  edx,cl
c0001c40:	89 f3                	mov    ebx,esi
c0001c42:	e9 9f 00 00 00       	jmp    c0001ce6 <tchar2uni+0xb9>
c0001c47:	88 ca                	mov    dl,cl
c0001c49:	83 e2 e0             	and    edx,0xffffffe0
c0001c4c:	80 fa c0             	cmp    dl,0xc0
c0001c4f:	75 0c                	jne    c0001c5d <tchar2uni+0x30>
c0001c51:	89 ca                	mov    edx,ecx
c0001c53:	b9 01 00 00 00       	mov    ecx,0x1
c0001c58:	83 e2 1f             	and    edx,0x1f
c0001c5b:	eb 2e                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c5d:	88 ca                	mov    dl,cl
c0001c5f:	83 e2 f0             	and    edx,0xfffffff0
c0001c62:	80 fa e0             	cmp    dl,0xe0
c0001c65:	75 0c                	jne    c0001c73 <tchar2uni+0x46>
c0001c67:	89 ca                	mov    edx,ecx
c0001c69:	b9 02 00 00 00       	mov    ecx,0x2
c0001c6e:	83 e2 0f             	and    edx,0xf
c0001c71:	eb 18                	jmp    c0001c8b <tchar2uni+0x5e>
c0001c73:	88 ca                	mov    dl,cl
c0001c75:	83 e2 f8             	and    edx,0xfffffff8
c0001c78:	88 d0                	mov    al,dl
c0001c7a:	83 ca ff             	or     edx,0xffffffff
c0001c7d:	3c f0                	cmp    al,0xf0
c0001c7f:	75 6c                	jne    c0001ced <tchar2uni+0xc0>
c0001c81:	89 ca                	mov    edx,ecx
c0001c83:	b9 03 00 00 00       	mov    ecx,0x3
c0001c88:	83 e2 07             	and    edx,0x7
c0001c8b:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c8f:	46                   	inc    esi
c0001c90:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c93:	88 c8                	mov    al,cl
c0001c95:	83 e0 c0             	and    eax,0xffffffc0
c0001c98:	3c 80                	cmp    al,0x80
c0001c9a:	75 4e                	jne    c0001cea <tchar2uni+0xbd>
c0001c9c:	c1 e2 06             	shl    edx,0x6
c0001c9f:	83 e1 3f             	and    ecx,0x3f
c0001ca2:	09 ca                	or     edx,ecx
c0001ca4:	39 de                	cmp    esi,ebx
c0001ca6:	75 e7                	jne    c0001c8f <tchar2uni+0x62>
c0001ca8:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cab:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb1:	77 37                	ja     c0001cea <tchar2uni+0xbd>
c0001cb3:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cb9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cbf:	76 29                	jbe    c0001cea <tchar2uni+0xbd>
c0001cc1:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001cc7:	76 1d                	jbe    c0001ce6 <tchar2uni+0xb9>
c0001cc9:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ccf:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cd5:	c1 e1 06             	shl    ecx,0x6
c0001cd8:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001cde:	09 ca                	or     edx,ecx
c0001ce0:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ce6:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ce8:	eb 03                	jmp    c0001ced <tchar2uni+0xc0>
c0001cea:	83 ca ff             	or     edx,0xffffffff
c0001ced:	5b                   	pop    ebx
c0001cee:	89 d0                	mov    eax,edx
c0001cf0:	5e                   	pop    esi
c0001cf1:	5f                   	pop    edi
c0001cf2:	c3                   	ret    

c0001cf3 <put_utf>:
c0001cf3:	53                   	push   ebx
c0001cf4:	83 f8 7f             	cmp    eax,0x7f
c0001cf7:	89 c3                	mov    ebx,eax
c0001cf9:	b0 00                	mov    al,0x0
c0001cfb:	77 11                	ja     c0001d0e <put_utf+0x1b>
c0001cfd:	85 c9                	test   ecx,ecx
c0001cff:	0f 84 e5 00 00 00    	je     c0001dea <put_utf+0xf7>
c0001d05:	88 1a                	mov    BYTE PTR [edx],bl
c0001d07:	b0 01                	mov    al,0x1
c0001d09:	e9 dc 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d0e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d14:	77 23                	ja     c0001d39 <put_utf+0x46>
c0001d16:	83 f9 01             	cmp    ecx,0x1
c0001d19:	0f 86 cb 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d1f:	89 d8                	mov    eax,ebx
c0001d21:	83 e3 3f             	and    ebx,0x3f
c0001d24:	c1 e8 06             	shr    eax,0x6
c0001d27:	83 cb 80             	or     ebx,0xffffff80
c0001d2a:	83 c8 c0             	or     eax,0xffffffc0
c0001d2d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d30:	88 02                	mov    BYTE PTR [edx],al
c0001d32:	b0 02                	mov    al,0x2
c0001d34:	e9 b1 00 00 00       	jmp    c0001dea <put_utf+0xf7>
c0001d39:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d3f:	77 40                	ja     c0001d81 <put_utf+0x8e>
c0001d41:	83 f9 02             	cmp    ecx,0x2
c0001d44:	0f 86 a0 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d4a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d50:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d56:	0f 86 8e 00 00 00    	jbe    c0001dea <put_utf+0xf7>
c0001d5c:	89 d8                	mov    eax,ebx
c0001d5e:	c1 e8 0c             	shr    eax,0xc
c0001d61:	83 c8 e0             	or     eax,0xffffffe0
c0001d64:	88 02                	mov    BYTE PTR [edx],al
c0001d66:	89 d8                	mov    eax,ebx
c0001d68:	83 e3 3f             	and    ebx,0x3f
c0001d6b:	c1 e8 06             	shr    eax,0x6
c0001d6e:	83 cb 80             	or     ebx,0xffffff80
c0001d71:	83 e0 3f             	and    eax,0x3f
c0001d74:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d77:	83 c8 80             	or     eax,0xffffff80
c0001d7a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d7d:	b0 03                	mov    al,0x3
c0001d7f:	eb 69                	jmp    c0001dea <put_utf+0xf7>
c0001d81:	83 f9 03             	cmp    ecx,0x3
c0001d84:	76 64                	jbe    c0001dea <put_utf+0xf7>
c0001d86:	89 d9                	mov    ecx,ebx
c0001d88:	0f b7 c3             	movzx  eax,bx
c0001d8b:	66 31 c9             	xor    cx,cx
c0001d8e:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d94:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001d9a:	c1 e9 06             	shr    ecx,0x6
c0001d9d:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001da3:	77 43                	ja     c0001de8 <put_utf+0xf5>
c0001da5:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001dab:	77 3b                	ja     c0001de8 <put_utf+0xf5>
c0001dad:	09 cb                	or     ebx,ecx
c0001daf:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001db5:	89 d8                	mov    eax,ebx
c0001db7:	c1 e8 12             	shr    eax,0x12
c0001dba:	83 c8 f0             	or     eax,0xfffffff0
c0001dbd:	88 02                	mov    BYTE PTR [edx],al
c0001dbf:	89 d8                	mov    eax,ebx
c0001dc1:	c1 e8 0c             	shr    eax,0xc
c0001dc4:	83 e0 3f             	and    eax,0x3f
c0001dc7:	83 c8 80             	or     eax,0xffffff80
c0001dca:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dcd:	89 d8                	mov    eax,ebx
c0001dcf:	83 e3 3f             	and    ebx,0x3f
c0001dd2:	c1 e8 06             	shr    eax,0x6
c0001dd5:	83 cb 80             	or     ebx,0xffffff80
c0001dd8:	83 e0 3f             	and    eax,0x3f
c0001ddb:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001dde:	83 c8 80             	or     eax,0xffffff80
c0001de1:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001de4:	b0 04                	mov    al,0x4
c0001de6:	eb 02                	jmp    c0001dea <put_utf+0xf7>
c0001de8:	31 c0                	xor    eax,eax
c0001dea:	5b                   	pop    ebx
c0001deb:	c3                   	ret    

c0001dec <clst2sect>:
c0001dec:	89 c1                	mov    ecx,eax
c0001dee:	83 ea 02             	sub    edx,0x2
c0001df1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001df4:	83 e8 02             	sub    eax,0x2
c0001df7:	39 d0                	cmp    eax,edx
c0001df9:	76 0d                	jbe    c0001e08 <clst2sect+0x1c>
c0001dfb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001dff:	f7 e2                	mul    edx
c0001e01:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e04:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e07:	c3                   	ret    
c0001e08:	31 c0                	xor    eax,eax
c0001e0a:	31 d2                	xor    edx,edx
c0001e0c:	c3                   	ret    

c0001e0d <clmt_clust>:
c0001e0d:	57                   	push   edi
c0001e0e:	89 cf                	mov    edi,ecx
c0001e10:	56                   	push   esi
c0001e11:	89 d6                	mov    esi,edx
c0001e13:	53                   	push   ebx
c0001e14:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e18:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e1b:	89 f2                	mov    edx,esi
c0001e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e1f:	c1 ef 09             	shr    edi,0x9
c0001e22:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e26:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e29:	89 f9                	mov    ecx,edi
c0001e2b:	31 ff                	xor    edi,edi
c0001e2d:	57                   	push   edi
c0001e2e:	56                   	push   esi
c0001e2f:	51                   	push   ecx
c0001e30:	52                   	push   edx
c0001e31:	e8 9a ff 01 00       	call   c0021dd0 <__udivdi3>
c0001e36:	83 c4 10             	add    esp,0x10
c0001e39:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e3b:	85 d2                	test   edx,edx
c0001e3d:	74 10                	je     c0001e4f <clmt_clust+0x42>
c0001e3f:	39 d0                	cmp    eax,edx
c0001e41:	72 07                	jb     c0001e4a <clmt_clust+0x3d>
c0001e43:	29 d0                	sub    eax,edx
c0001e45:	83 c3 08             	add    ebx,0x8
c0001e48:	eb ef                	jmp    c0001e39 <clmt_clust+0x2c>
c0001e4a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e4d:	89 c2                	mov    edx,eax
c0001e4f:	5b                   	pop    ebx
c0001e50:	89 d0                	mov    eax,edx
c0001e52:	5e                   	pop    esi
c0001e53:	5f                   	pop    edi
c0001e54:	c3                   	ret    

c0001e55 <pick_lfn>:
c0001e55:	55                   	push   ebp
c0001e56:	57                   	push   edi
c0001e57:	56                   	push   esi
c0001e58:	89 d6                	mov    esi,edx
c0001e5a:	53                   	push   ebx
c0001e5b:	89 c3                	mov    ebx,eax
c0001e5d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e60:	e8 ee fc ff ff       	call   c0001b53 <ld_word>
c0001e65:	66 85 c0             	test   ax,ax
c0001e68:	74 04                	je     c0001e6e <pick_lfn+0x19>
c0001e6a:	31 c0                	xor    eax,eax
c0001e6c:	eb 5c                	jmp    c0001eca <pick_lfn+0x75>
c0001e6e:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e71:	bd 01 00 00 00       	mov    ebp,0x1
c0001e76:	83 e1 bf             	and    ecx,0xffffffbf
c0001e79:	31 ff                	xor    edi,edi
c0001e7b:	49                   	dec    ecx
c0001e7c:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e7f:	0f b6 87 e0 2c 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdd320]
c0001e86:	01 f0                	add    eax,esi
c0001e88:	e8 c6 fc ff ff       	call   c0001b53 <ld_word>
c0001e8d:	66 85 ed             	test   bp,bp
c0001e90:	74 11                	je     c0001ea3 <pick_lfn+0x4e>
c0001e92:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001e98:	77 d0                	ja     c0001e6a <pick_lfn+0x15>
c0001e9a:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001e9e:	89 c5                	mov    ebp,eax
c0001ea0:	41                   	inc    ecx
c0001ea1:	eb 04                	jmp    c0001ea7 <pick_lfn+0x52>
c0001ea3:	66 40                	inc    ax
c0001ea5:	75 c3                	jne    c0001e6a <pick_lfn+0x15>
c0001ea7:	47                   	inc    edi
c0001ea8:	83 ff 0d             	cmp    edi,0xd
c0001eab:	75 d2                	jne    c0001e7f <pick_lfn+0x2a>
c0001ead:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb0:	74 13                	je     c0001ec5 <pick_lfn+0x70>
c0001eb2:	66 85 ed             	test   bp,bp
c0001eb5:	74 0e                	je     c0001ec5 <pick_lfn+0x70>
c0001eb7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ebd:	77 ab                	ja     c0001e6a <pick_lfn+0x15>
c0001ebf:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ec5:	b8 01 00 00 00       	mov    eax,0x1
c0001eca:	5b                   	pop    ebx
c0001ecb:	5e                   	pop    esi
c0001ecc:	5f                   	pop    edi
c0001ecd:	5d                   	pop    ebp
c0001ece:	c3                   	ret    

c0001ecf <put_lfn>:
c0001ecf:	55                   	push   ebp
c0001ed0:	31 ed                	xor    ebp,ebp
c0001ed2:	57                   	push   edi
c0001ed3:	89 d7                	mov    edi,edx
c0001ed5:	56                   	push   esi
c0001ed6:	31 f6                	xor    esi,esi
c0001ed8:	53                   	push   ebx
c0001ed9:	83 ec 08             	sub    esp,0x8
c0001edc:	89 04 24             	mov    DWORD PTR [esp],eax
c0001edf:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ee3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ee7:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001eed:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001ef3:	31 d2                	xor    edx,edx
c0001ef5:	e8 cb fc ff ff       	call   c0001bc5 <st_word>
c0001efa:	0f b6 d9             	movzx  ebx,cl
c0001efd:	4b                   	dec    ebx
c0001efe:	6b db 0d             	imul   ebx,ebx,0xd
c0001f01:	66 83 fe ff          	cmp    si,0xffff
c0001f05:	74 08                	je     c0001f0f <put_lfn+0x40>
c0001f07:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f0a:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f0e:	43                   	inc    ebx
c0001f0f:	0f b6 85 e0 2c 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdd320]
c0001f16:	0f b7 d6             	movzx  edx,si
c0001f19:	01 f8                	add    eax,edi
c0001f1b:	e8 a5 fc ff ff       	call   c0001bc5 <st_word>
c0001f20:	66 85 f6             	test   si,si
c0001f23:	75 03                	jne    c0001f28 <put_lfn+0x59>
c0001f25:	83 ce ff             	or     esi,0xffffffff
c0001f28:	45                   	inc    ebp
c0001f29:	83 fd 0d             	cmp    ebp,0xd
c0001f2c:	75 d3                	jne    c0001f01 <put_lfn+0x32>
c0001f2e:	66 46                	inc    si
c0001f30:	74 0a                	je     c0001f3c <put_lfn+0x6d>
c0001f32:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f3a:	75 09                	jne    c0001f45 <put_lfn+0x76>
c0001f3c:	88 c8                	mov    al,cl
c0001f3e:	83 c8 40             	or     eax,0x40
c0001f41:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f45:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f49:	88 07                	mov    BYTE PTR [edi],al
c0001f4b:	83 c4 08             	add    esp,0x8
c0001f4e:	5b                   	pop    ebx
c0001f4f:	5e                   	pop    esi
c0001f50:	5f                   	pop    edi
c0001f51:	5d                   	pop    ebp
c0001f52:	c3                   	ret    

c0001f53 <gen_numname>:
c0001f53:	57                   	push   edi
c0001f54:	89 cf                	mov    edi,ecx
c0001f56:	56                   	push   esi
c0001f57:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f5c:	53                   	push   ebx
c0001f5d:	89 c6                	mov    esi,eax
c0001f5f:	83 ec 10             	sub    esp,0x10
c0001f62:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f66:	e8 67 fc ff ff       	call   c0001bd2 <mem_cpy>
c0001f6b:	83 fb 05             	cmp    ebx,0x5
c0001f6e:	76 2d                	jbe    c0001f9d <gen_numname+0x4a>
c0001f70:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 25                	je     c0001f9d <gen_numname+0x4a>
c0001f78:	83 c7 02             	add    edi,0x2
c0001f7b:	ba 10 00 00 00       	mov    edx,0x10
c0001f80:	01 db                	add    ebx,ebx
c0001f82:	89 c1                	mov    ecx,eax
c0001f84:	66 d1 e8             	shr    ax,1
c0001f87:	83 e1 01             	and    ecx,0x1
c0001f8a:	01 cb                	add    ebx,ecx
c0001f8c:	0f ba e3 10          	bt     ebx,0x10
c0001f90:	73 06                	jae    c0001f98 <gen_numname+0x45>
c0001f92:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001f98:	4a                   	dec    edx
c0001f99:	75 e5                	jne    c0001f80 <gen_numname+0x2d>
c0001f9b:	eb d3                	jmp    c0001f70 <gen_numname+0x1d>
c0001f9d:	b8 07 00 00 00       	mov    eax,0x7
c0001fa2:	88 d9                	mov    cl,bl
c0001fa4:	83 e1 0f             	and    ecx,0xf
c0001fa7:	8d 51 30             	lea    edx,[ecx+0x30]
c0001faa:	80 fa 39             	cmp    dl,0x39
c0001fad:	76 03                	jbe    c0001fb2 <gen_numname+0x5f>
c0001faf:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fb2:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fb5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fb9:	89 da                	mov    edx,ebx
c0001fbb:	c1 ea 04             	shr    edx,0x4
c0001fbe:	83 fb 0f             	cmp    ebx,0xf
c0001fc1:	76 06                	jbe    c0001fc9 <gen_numname+0x76>
c0001fc3:	89 c8                	mov    eax,ecx
c0001fc5:	89 d3                	mov    ebx,edx
c0001fc7:	eb d9                	jmp    c0001fa2 <gen_numname+0x4f>
c0001fc9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fce:	31 d2                	xor    edx,edx
c0001fd0:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fd3:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fd6:	39 ca                	cmp    edx,ecx
c0001fd8:	73 18                	jae    c0001ff2 <gen_numname+0x9f>
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	3c 20                	cmp    al,0x20
c0001fdf:	74 11                	je     c0001ff2 <gen_numname+0x9f>
c0001fe1:	e8 41 fc ff ff       	call   c0001c27 <dbc_1st>
c0001fe6:	85 c0                	test   eax,eax
c0001fe8:	74 05                	je     c0001fef <gen_numname+0x9c>
c0001fea:	39 d3                	cmp    ebx,edx
c0001fec:	74 04                	je     c0001ff2 <gen_numname+0x9f>
c0001fee:	42                   	inc    edx
c0001fef:	42                   	inc    edx
c0001ff0:	eb e1                	jmp    c0001fd3 <gen_numname+0x80>
c0001ff2:	b0 20                	mov    al,0x20
c0001ff4:	83 f9 07             	cmp    ecx,0x7
c0001ff7:	77 05                	ja     c0001ffe <gen_numname+0xab>
c0001ff9:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ffd:	41                   	inc    ecx
c0001ffe:	42                   	inc    edx
c0001fff:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002003:	83 fa 07             	cmp    edx,0x7
c0002006:	76 ea                	jbe    c0001ff2 <gen_numname+0x9f>
c0002008:	83 c4 10             	add    esp,0x10
c000200b:	5b                   	pop    ebx
c000200c:	5e                   	pop    esi
c000200d:	5f                   	pop    edi
c000200e:	c3                   	ret    

c000200f <sum_sfn>:
c000200f:	31 c9                	xor    ecx,ecx
c0002011:	31 d2                	xor    edx,edx
c0002013:	d0 ca                	ror    dl,1
c0002015:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002018:	41                   	inc    ecx
c0002019:	83 f9 0b             	cmp    ecx,0xb
c000201c:	75 f5                	jne    c0002013 <sum_sfn+0x4>
c000201e:	88 d0                	mov    al,dl
c0002020:	c3                   	ret    

c0002021 <xdir_sum>:
c0002021:	56                   	push   esi
c0002022:	31 c9                	xor    ecx,ecx
c0002024:	53                   	push   ebx
c0002025:	31 d2                	xor    edx,edx
c0002027:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000202b:	43                   	inc    ebx
c000202c:	c1 e3 05             	shl    ebx,0x5
c000202f:	83 fa 02             	cmp    edx,0x2
c0002032:	74 0b                	je     c000203f <xdir_sum+0x1e>
c0002034:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002038:	66 d1 c9             	ror    cx,1
c000203b:	01 f1                	add    ecx,esi
c000203d:	eb 05                	jmp    c0002044 <xdir_sum+0x23>
c000203f:	ba 03 00 00 00       	mov    edx,0x3
c0002044:	42                   	inc    edx
c0002045:	39 d3                	cmp    ebx,edx
c0002047:	77 e6                	ja     c000202f <xdir_sum+0xe>
c0002049:	89 c8                	mov    eax,ecx
c000204b:	5b                   	pop    ebx
c000204c:	5e                   	pop    esi
c000204d:	c3                   	ret    

c000204e <xsum32>:
c000204e:	d1 ca                	ror    edx,1
c0002050:	0f b6 c0             	movzx  eax,al
c0002053:	01 d0                	add    eax,edx
c0002055:	c3                   	ret    

c0002056 <get_xfileinfo>:
c0002056:	55                   	push   ebp
c0002057:	31 c9                	xor    ecx,ecx
c0002059:	57                   	push   edi
c000205a:	bd 40 00 00 00       	mov    ebp,0x40
c000205f:	56                   	push   esi
c0002060:	31 ff                	xor    edi,edi
c0002062:	53                   	push   ebx
c0002063:	89 c6                	mov    esi,eax
c0002065:	83 ec 0c             	sub    esp,0xc
c0002068:	89 d3                	mov    ebx,edx
c000206a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002071:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002075:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002078:	76 6d                	jbe    c00020e7 <get_xfileinfo+0x91>
c000207a:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002080:	76 0b                	jbe    c000208d <get_xfileinfo+0x37>
c0002082:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002086:	bf 01 00 00 00       	mov    edi,0x1
c000208b:	eb 63                	jmp    c00020f0 <get_xfileinfo+0x9a>
c000208d:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002093:	75 03                	jne    c0002098 <get_xfileinfo+0x42>
c0002095:	83 c5 02             	add    ebp,0x2
c0002098:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000209b:	83 c5 02             	add    ebp,0x2
c000209e:	e8 b0 fa ff ff       	call   c0001b53 <ld_word>
c00020a3:	ff 04 24             	inc    DWORD PTR [esp]
c00020a6:	66 85 c9             	test   cx,cx
c00020a9:	75 0d                	jne    c00020b8 <get_xfileinfo+0x62>
c00020ab:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b1:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020b6:	76 2b                	jbe    c00020e3 <get_xfileinfo+0x8d>
c00020b8:	c1 e1 10             	shl    ecx,0x10
c00020bb:	ba ff 00 00 00       	mov    edx,0xff
c00020c0:	0f b7 c0             	movzx  eax,ax
c00020c3:	29 fa                	sub    edx,edi
c00020c5:	09 c8                	or     eax,ecx
c00020c7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020cb:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020d3:	e8 1b fc ff ff       	call   c0001cf3 <put_utf>
c00020d8:	84 c0                	test   al,al
c00020da:	74 a6                	je     c0002082 <get_xfileinfo+0x2c>
c00020dc:	0f b6 c0             	movzx  eax,al
c00020df:	01 c7                	add    edi,eax
c00020e1:	31 c0                	xor    eax,eax
c00020e3:	89 c1                	mov    ecx,eax
c00020e5:	eb 8a                	jmp    c0002071 <get_xfileinfo+0x1b>
c00020e7:	85 ff                	test   edi,edi
c00020e9:	74 97                	je     c0002082 <get_xfileinfo+0x2c>
c00020eb:	66 85 c9             	test   cx,cx
c00020ee:	75 92                	jne    c0002082 <get_xfileinfo+0x2c>
c00020f0:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020f5:	31 c0                	xor    eax,eax
c00020f7:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002100:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002103:	80 e1 10             	and    cl,0x10
c0002106:	75 08                	jne    c0002110 <get_xfileinfo+0xba>
c0002108:	8d 46 38             	lea    eax,[esi+0x38]
c000210b:	e8 68 fa ff ff       	call   c0001b78 <ld_qword>
c0002110:	89 03                	mov    DWORD PTR [ebx],eax
c0002112:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002115:	8d 46 0c             	lea    eax,[esi+0xc]
c0002118:	e8 36 fa ff ff       	call   c0001b53 <ld_word>
c000211d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002121:	8d 46 0e             	lea    eax,[esi+0xe]
c0002124:	e8 2a fa ff ff       	call   c0001b53 <ld_word>
c0002129:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000212d:	83 c4 0c             	add    esp,0xc
c0002130:	5b                   	pop    ebx
c0002131:	5e                   	pop    esi
c0002132:	5f                   	pop    edi
c0002133:	5d                   	pop    ebp
c0002134:	c3                   	ret    

c0002135 <get_ldnumber>:
c0002135:	8b 10                	mov    edx,DWORD PTR [eax]
c0002137:	85 d2                	test   edx,edx
c0002139:	74 14                	je     c000214f <get_ldnumber+0x1a>
c000213b:	56                   	push   esi
c000213c:	53                   	push   ebx
c000213d:	89 d3                	mov    ebx,edx
c000213f:	43                   	inc    ebx
c0002140:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002143:	80 f9 1f             	cmp    cl,0x1f
c0002146:	76 0d                	jbe    c0002155 <get_ldnumber+0x20>
c0002148:	80 f9 3a             	cmp    cl,0x3a
c000214b:	75 f2                	jne    c000213f <get_ldnumber+0xa>
c000214d:	eb 0a                	jmp    c0002159 <get_ldnumber+0x24>
c000214f:	83 c9 ff             	or     ecx,0xffffffff
c0002152:	89 c8                	mov    eax,ecx
c0002154:	c3                   	ret    
c0002155:	31 c9                	xor    ecx,ecx
c0002157:	eb 24                	jmp    c000217d <get_ldnumber+0x48>
c0002159:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000215c:	8d 4e d0             	lea    ecx,[esi-0x30]
c000215f:	80 f9 09             	cmp    cl,0x9
c0002162:	77 16                	ja     c000217a <get_ldnumber+0x45>
c0002164:	83 c2 02             	add    edx,0x2
c0002167:	83 c9 ff             	or     ecx,0xffffffff
c000216a:	39 d3                	cmp    ebx,edx
c000216c:	75 0f                	jne    c000217d <get_ldnumber+0x48>
c000216e:	89 f2                	mov    edx,esi
c0002170:	89 18                	mov    DWORD PTR [eax],ebx
c0002172:	0f be ca             	movsx  ecx,dl
c0002175:	83 e9 30             	sub    ecx,0x30
c0002178:	eb 03                	jmp    c000217d <get_ldnumber+0x48>
c000217a:	83 c9 ff             	or     ecx,0xffffffff
c000217d:	89 c8                	mov    eax,ecx
c000217f:	5b                   	pop    ebx
c0002180:	5e                   	pop    esi
c0002181:	c3                   	ret    

c0002182 <crc32>:
c0002182:	56                   	push   esi
c0002183:	89 d6                	mov    esi,edx
c0002185:	53                   	push   ebx
c0002186:	b2 01                	mov    dl,0x1
c0002188:	bb 08 00 00 00       	mov    ebx,0x8
c000218d:	89 f1                	mov    ecx,esi
c000218f:	84 d1                	test   cl,dl
c0002191:	0f 95 c1             	setne  cl
c0002194:	0f b6 c9             	movzx  ecx,cl
c0002197:	31 c1                	xor    ecx,eax
c0002199:	89 c8                	mov    eax,ecx
c000219b:	d1 e8                	shr    eax,1
c000219d:	80 e1 01             	and    cl,0x1
c00021a0:	74 05                	je     c00021a7 <crc32+0x25>
c00021a2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021a7:	d1 e2                	shl    edx,1
c00021a9:	4b                   	dec    ebx
c00021aa:	75 e1                	jne    c000218d <crc32+0xb>
c00021ac:	5b                   	pop    ebx
c00021ad:	5e                   	pop    esi
c00021ae:	c3                   	ret    

c00021af <test_gpt_header>:
c00021af:	55                   	push   ebp
c00021b0:	b9 10 00 00 00       	mov    ecx,0x10
c00021b5:	57                   	push   edi
c00021b6:	ba e0 2b 02 c0       	mov    edx,0xc0022be0
c00021bb:	56                   	push   esi
c00021bc:	31 ff                	xor    edi,edi
c00021be:	53                   	push   ebx
c00021bf:	89 c3                	mov    ebx,eax
c00021c1:	e8 2c fa ff ff       	call   c0001bf2 <mem_cmp>
c00021c6:	85 c0                	test   eax,eax
c00021c8:	75 55                	jne    c000221f <test_gpt_header+0x70>
c00021ca:	89 c7                	mov    edi,eax
c00021cc:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d1:	83 ce ff             	or     esi,0xffffffff
c00021d4:	31 d2                	xor    edx,edx
c00021d6:	83 fd 03             	cmp    ebp,0x3
c00021d9:	76 05                	jbe    c00021e0 <test_gpt_header+0x31>
c00021db:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e0:	89 f0                	mov    eax,esi
c00021e2:	45                   	inc    ebp
c00021e3:	e8 9a ff ff ff       	call   c0002182 <crc32>
c00021e8:	83 fd 4c             	cmp    ebp,0x4c
c00021eb:	89 c6                	mov    esi,eax
c00021ed:	75 e5                	jne    c00021d4 <test_gpt_header+0x25>
c00021ef:	8d 43 10             	lea    eax,[ebx+0x10]
c00021f2:	f7 d6                	not    esi
c00021f4:	e8 67 f9 ff ff       	call   c0001b60 <ld_dword>
c00021f9:	39 c6                	cmp    esi,eax
c00021fb:	75 22                	jne    c000221f <test_gpt_header+0x70>
c00021fd:	8d 43 54             	lea    eax,[ebx+0x54]
c0002200:	e8 5b f9 ff ff       	call   c0001b60 <ld_dword>
c0002205:	83 c0 80             	add    eax,0xffffff80
c0002208:	75 15                	jne    c000221f <test_gpt_header+0x70>
c000220a:	8d 43 50             	lea    eax,[ebx+0x50]
c000220d:	e8 4e f9 ff ff       	call   c0001b60 <ld_dword>
c0002212:	3d 80 00 00 00       	cmp    eax,0x80
c0002217:	0f 96 c0             	setbe  al
c000221a:	0f b6 c0             	movzx  eax,al
c000221d:	89 c7                	mov    edi,eax
c000221f:	5b                   	pop    ebx
c0002220:	89 f8                	mov    eax,edi
c0002222:	5e                   	pop    esi
c0002223:	5f                   	pop    edi
c0002224:	5d                   	pop    ebp
c0002225:	c3                   	ret    

c0002226 <make_rand>:
c0002226:	56                   	push   esi
c0002227:	85 c0                	test   eax,eax
c0002229:	53                   	push   ebx
c000222a:	75 05                	jne    c0002231 <make_rand+0xb>
c000222c:	b8 01 00 00 00       	mov    eax,0x1
c0002231:	01 d1                	add    ecx,edx
c0002233:	bb 08 00 00 00       	mov    ebx,0x8
c0002238:	89 c6                	mov    esi,eax
c000223a:	d1 e8                	shr    eax,1
c000223c:	83 e6 01             	and    esi,0x1
c000223f:	85 f6                	test   esi,esi
c0002241:	74 05                	je     c0002248 <make_rand+0x22>
c0002243:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002248:	4b                   	dec    ebx
c0002249:	75 ed                	jne    c0002238 <make_rand+0x12>
c000224b:	42                   	inc    edx
c000224c:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000224f:	39 ca                	cmp    edx,ecx
c0002251:	75 e0                	jne    c0002233 <make_rand+0xd>
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <validate>:
c0002256:	56                   	push   esi
c0002257:	53                   	push   ebx
c0002258:	89 d6                	mov    esi,edx
c000225a:	51                   	push   ecx
c000225b:	85 c0                	test   eax,eax
c000225d:	75 09                	jne    c0002268 <validate+0x12>
c000225f:	b8 09 00 00 00       	mov    eax,0x9
c0002264:	31 c9                	xor    ecx,ecx
c0002266:	eb 2f                	jmp    c0002297 <validate+0x41>
c0002268:	89 c3                	mov    ebx,eax
c000226a:	8b 00                	mov    eax,DWORD PTR [eax]
c000226c:	85 c0                	test   eax,eax
c000226e:	74 ef                	je     c000225f <validate+0x9>
c0002270:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002273:	74 ea                	je     c000225f <validate+0x9>
c0002275:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002279:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000227d:	75 e0                	jne    c000225f <validate+0x9>
c000227f:	83 ec 0c             	sub    esp,0xc
c0002282:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002286:	50                   	push   eax
c0002287:	e8 76 f8 ff ff       	call   c0001b02 <disk_status>
c000228c:	83 c4 10             	add    esp,0x10
c000228f:	a8 01                	test   al,0x1
c0002291:	75 cc                	jne    c000225f <validate+0x9>
c0002293:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002295:	31 c0                	xor    eax,eax
c0002297:	89 0e                	mov    DWORD PTR [esi],ecx
c0002299:	5a                   	pop    edx
c000229a:	5b                   	pop    ebx
c000229b:	5e                   	pop    esi
c000229c:	c3                   	ret    

c000229d <sync_window>:
c000229d:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a1:	0f 84 85 00 00 00    	je     c000232c <sync_window+0x8f>
c00022a7:	55                   	push   ebp
c00022a8:	8d 68 54             	lea    ebp,[eax+0x54]
c00022ab:	57                   	push   edi
c00022ac:	56                   	push   esi
c00022ad:	53                   	push   ebx
c00022ae:	89 c3                	mov    ebx,eax
c00022b0:	83 ec 28             	sub    esp,0x28
c00022b3:	6a 01                	push   0x1
c00022b5:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022b8:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022bb:	55                   	push   ebp
c00022bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c0:	50                   	push   eax
c00022c1:	e8 58 f8 ff ff       	call   c0001b1e <disk_write>
c00022c6:	83 c4 20             	add    esp,0x20
c00022c9:	ba 01 00 00 00       	mov    edx,0x1
c00022ce:	85 c0                	test   eax,eax
c00022d0:	75 50                	jne    c0002322 <sync_window+0x85>
c00022d2:	31 ff                	xor    edi,edi
c00022d4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022d7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022db:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022df:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022e2:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022e5:	89 c6                	mov    esi,eax
c00022e7:	89 d7                	mov    edi,edx
c00022e9:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022ec:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f0:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022f3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022f7:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00022fb:	73 23                	jae    c0002320 <sync_window+0x83>
c00022fd:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002301:	75 1d                	jne    c0002320 <sync_window+0x83>
c0002303:	83 ec 0c             	sub    esp,0xc
c0002306:	6a 01                	push   0x1
c0002308:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000230c:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002310:	52                   	push   edx
c0002311:	50                   	push   eax
c0002312:	55                   	push   ebp
c0002313:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002317:	50                   	push   eax
c0002318:	e8 01 f8 ff ff       	call   c0001b1e <disk_write>
c000231d:	83 c4 20             	add    esp,0x20
c0002320:	31 d2                	xor    edx,edx
c0002322:	83 c4 1c             	add    esp,0x1c
c0002325:	89 d0                	mov    eax,edx
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	5f                   	pop    edi
c000232a:	5d                   	pop    ebp
c000232b:	c3                   	ret    
c000232c:	31 d2                	xor    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	c3                   	ret    

c0002331 <move_window>:
c0002331:	56                   	push   esi
c0002332:	53                   	push   ebx
c0002333:	89 c3                	mov    ebx,eax
c0002335:	83 ec 14             	sub    esp,0x14
c0002338:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000233b:	75 07                	jne    c0002344 <move_window+0x13>
c000233d:	31 f6                	xor    esi,esi
c000233f:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002342:	74 59                	je     c000239d <move_window+0x6c>
c0002344:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 d8                	mov    eax,ebx
c000234e:	e8 4a ff ff ff       	call   c000229d <sync_window>
c0002353:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002357:	89 c6                	mov    esi,eax
c0002359:	85 c0                	test   eax,eax
c000235b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235f:	75 3c                	jne    c000239d <move_window+0x6c>
c0002361:	83 ec 0c             	sub    esp,0xc
c0002364:	8d 43 54             	lea    eax,[ebx+0x54]
c0002367:	6a 01                	push   0x1
c0002369:	51                   	push   ecx
c000236a:	52                   	push   edx
c000236b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000236f:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002373:	50                   	push   eax
c0002374:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002378:	50                   	push   eax
c0002379:	e8 8a f7 ff ff       	call   c0001b08 <disk_read>
c000237e:	83 c4 20             	add    esp,0x20
c0002381:	85 c0                	test   eax,eax
c0002383:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002387:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000238b:	74 0a                	je     c0002397 <move_window+0x66>
c000238d:	83 ca ff             	or     edx,0xffffffff
c0002390:	be 01 00 00 00       	mov    esi,0x1
c0002395:	89 d1                	mov    ecx,edx
c0002397:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000239a:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000239d:	89 f0                	mov    eax,esi
c000239f:	83 c4 14             	add    esp,0x14
c00023a2:	5b                   	pop    ebx
c00023a3:	5e                   	pop    esi
c00023a4:	c3                   	ret    

c00023a5 <check_fs>:
c00023a5:	53                   	push   ebx
c00023a6:	89 c3                	mov    ebx,eax
c00023a8:	83 ec 08             	sub    esp,0x8
c00023ab:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023af:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023b6:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023bd:	e8 6f ff ff ff       	call   c0002331 <move_window>
c00023c2:	ba 04 00 00 00       	mov    edx,0x4
c00023c7:	85 c0                	test   eax,eax
c00023c9:	0f 85 89 00 00 00    	jne    c0002458 <check_fs+0xb3>
c00023cf:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023d5:	e8 79 f7 ff ff       	call   c0001b53 <ld_word>
c00023da:	ba 03 00 00 00       	mov    edx,0x3
c00023df:	66 3d 55 aa          	cmp    ax,0xaa55
c00023e3:	75 73                	jne    c0002458 <check_fs+0xb3>
c00023e5:	ba 00 2d 02 c0       	mov    edx,0xc0022d00
c00023ea:	8d 43 54             	lea    eax,[ebx+0x54]
c00023ed:	b9 0b 00 00 00       	mov    ecx,0xb
c00023f2:	e8 fb f7 ff ff       	call   c0001bf2 <mem_cmp>
c00023f7:	ba 01 00 00 00       	mov    edx,0x1
c00023fc:	85 c0                	test   eax,eax
c00023fe:	74 58                	je     c0002458 <check_fs+0xb3>
c0002400:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002403:	8d 50 18             	lea    edx,[eax+0x18]
c0002406:	80 fa 01             	cmp    dl,0x1
c0002409:	76 09                	jbe    c0002414 <check_fs+0x6f>
c000240b:	ba 02 00 00 00       	mov    edx,0x2
c0002410:	3c eb                	cmp    al,0xeb
c0002412:	75 44                	jne    c0002458 <check_fs+0xb3>
c0002414:	ba e9 59 02 c0       	mov    edx,0xc00259e9
c0002419:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000241f:	b9 03 00 00 00       	mov    ecx,0x3
c0002424:	e8 c9 f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002429:	31 d2                	xor    edx,edx
c000242b:	85 c0                	test   eax,eax
c000242d:	74 29                	je     c0002458 <check_fs+0xb3>
c000242f:	ba 0c 2d 02 c0       	mov    edx,0xc0022d0c
c0002434:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000243a:	b9 05 00 00 00       	mov    ecx,0x5
c000243f:	e8 ae f7 ff ff       	call   c0001bf2 <mem_cmp>
c0002444:	31 d2                	xor    edx,edx
c0002446:	85 c0                	test   eax,eax
c0002448:	74 0e                	je     c0002458 <check_fs+0xb3>
c000244a:	31 d2                	xor    edx,edx
c000244c:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002453:	0f 95 c2             	setne  dl
c0002456:	01 d2                	add    edx,edx
c0002458:	89 d0                	mov    eax,edx
c000245a:	83 c4 08             	add    esp,0x8
c000245d:	5b                   	pop    ebx
c000245e:	c3                   	ret    

c000245f <find_volume>:
c000245f:	55                   	push   ebp
c0002460:	31 c9                	xor    ecx,ecx
c0002462:	57                   	push   edi
c0002463:	56                   	push   esi
c0002464:	89 d6                	mov    esi,edx
c0002466:	53                   	push   ebx
c0002467:	31 d2                	xor    edx,edx
c0002469:	83 ec 3c             	sub    esp,0x3c
c000246c:	89 c3                	mov    ebx,eax
c000246e:	e8 32 ff ff ff       	call   c00023a5 <check_fs>
c0002473:	83 f8 02             	cmp    eax,0x2
c0002476:	74 0e                	je     c0002486 <find_volume+0x27>
c0002478:	0f 87 5d 01 00 00    	ja     c00025db <find_volume+0x17c>
c000247e:	85 f6                	test   esi,esi
c0002480:	0f 84 55 01 00 00    	je     c00025db <find_volume+0x17c>
c0002486:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000248d:	0f 85 dd 00 00 00    	jne    c0002570 <find_volume+0x111>
c0002493:	31 c9                	xor    ecx,ecx
c0002495:	ba 01 00 00 00       	mov    edx,0x1
c000249a:	89 d8                	mov    eax,ebx
c000249c:	e8 90 fe ff ff       	call   c0002331 <move_window>
c00024a1:	85 c0                	test   eax,eax
c00024a3:	74 0a                	je     c00024af <find_volume+0x50>
c00024a5:	b8 04 00 00 00       	mov    eax,0x4
c00024aa:	e9 2c 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024af:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024b2:	89 e8                	mov    eax,ebp
c00024b4:	e8 f6 fc ff ff       	call   c00021af <test_gpt_header>
c00024b9:	85 c0                	test   eax,eax
c00024bb:	75 0a                	jne    c00024c7 <find_volume+0x68>
c00024bd:	b8 03 00 00 00       	mov    eax,0x3
c00024c2:	e9 14 01 00 00       	jmp    c00025db <find_volume+0x17c>
c00024c7:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024cd:	e8 8e f6 ff ff       	call   c0001b60 <ld_dword>
c00024d2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024d6:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024dc:	e8 97 f6 ff ff       	call   c0001b78 <ld_qword>
c00024e1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00024f9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00024fd:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002501:	74 ba                	je     c00024bd <find_volume+0x5e>
c0002503:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002507:	31 c9                	xor    ecx,ecx
c0002509:	c1 e7 07             	shl    edi,0x7
c000250c:	89 d8                	mov    eax,ebx
c000250e:	89 fa                	mov    edx,edi
c0002510:	c1 ea 09             	shr    edx,0x9
c0002513:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002517:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000251b:	e8 11 fe ff ff       	call   c0002331 <move_window>
c0002520:	85 c0                	test   eax,eax
c0002522:	75 81                	jne    c00024a5 <find_volume+0x46>
c0002524:	81 e7 80 01 00 00    	and    edi,0x180
c000252a:	b9 10 00 00 00       	mov    ecx,0x10
c000252f:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002533:	ba f0 2c 02 c0       	mov    edx,0xc0022cf0
c0002538:	e8 b5 f6 ff ff       	call   c0001bf2 <mem_cmp>
c000253d:	85 c0                	test   eax,eax
c000253f:	75 29                	jne    c000256a <find_volume+0x10b>
c0002541:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002545:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002549:	e8 2a f6 ff ff       	call   c0001b78 <ld_qword>
c000254e:	89 d1                	mov    ecx,edx
c0002550:	89 c2                	mov    edx,eax
c0002552:	89 d8                	mov    eax,ebx
c0002554:	e8 4c fe ff ff       	call   c00023a5 <check_fs>
c0002559:	85 f6                	test   esi,esi
c000255b:	75 07                	jne    c0002564 <find_volume+0x105>
c000255d:	83 f8 01             	cmp    eax,0x1
c0002560:	77 08                	ja     c000256a <find_volume+0x10b>
c0002562:	eb 77                	jmp    c00025db <find_volume+0x17c>
c0002564:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002568:	74 71                	je     c00025db <find_volume+0x17c>
c000256a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000256e:	eb 89                	jmp    c00024f9 <find_volume+0x9a>
c0002570:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002574:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000257a:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002580:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002584:	89 cd                	mov    ebp,ecx
c0002586:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000258a:	89 f8                	mov    eax,edi
c000258c:	83 c7 10             	add    edi,0x10
c000258f:	e8 cc f5 ff ff       	call   c0001b60 <ld_dword>
c0002594:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002598:	89 01                	mov    DWORD PTR [ecx],eax
c000259a:	83 c1 04             	add    ecx,0x4
c000259d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a1:	75 e3                	jne    c0002586 <find_volume+0x127>
c00025a3:	31 ff                	xor    edi,edi
c00025a5:	85 f6                	test   esi,esi
c00025a7:	74 03                	je     c00025ac <find_volume+0x14d>
c00025a9:	8d 7e ff             	lea    edi,[esi-0x1]
c00025ac:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b0:	85 d2                	test   edx,edx
c00025b2:	74 14                	je     c00025c8 <find_volume+0x169>
c00025b4:	31 c9                	xor    ecx,ecx
c00025b6:	89 d8                	mov    eax,ebx
c00025b8:	e8 e8 fd ff ff       	call   c00023a5 <check_fs>
c00025bd:	83 f8 01             	cmp    eax,0x1
c00025c0:	76 19                	jbe    c00025db <find_volume+0x17c>
c00025c2:	85 f6                	test   esi,esi
c00025c4:	74 0f                	je     c00025d5 <find_volume+0x176>
c00025c6:	eb 13                	jmp    c00025db <find_volume+0x17c>
c00025c8:	85 f6                	test   esi,esi
c00025ca:	0f 85 ed fe ff ff    	jne    c00024bd <find_volume+0x5e>
c00025d0:	b8 03 00 00 00       	mov    eax,0x3
c00025d5:	47                   	inc    edi
c00025d6:	83 ff 03             	cmp    edi,0x3
c00025d9:	76 d1                	jbe    c00025ac <find_volume+0x14d>
c00025db:	83 c4 3c             	add    esp,0x3c
c00025de:	5b                   	pop    ebx
c00025df:	5e                   	pop    esi
c00025e0:	5f                   	pop    edi
c00025e1:	5d                   	pop    ebp
c00025e2:	c3                   	ret    

c00025e3 <mount_volume>:
c00025e3:	55                   	push   ebp
c00025e4:	57                   	push   edi
c00025e5:	89 cf                	mov    edi,ecx
c00025e7:	56                   	push   esi
c00025e8:	53                   	push   ebx
c00025e9:	bb 0b 00 00 00       	mov    ebx,0xb
c00025ee:	83 ec 3c             	sub    esp,0x3c
c00025f1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00025fb:	e8 35 fb ff ff       	call   c0002135 <get_ldnumber>
c0002600:	85 c0                	test   eax,eax
c0002602:	0f 88 3a 05 00 00    	js     c0002b42 <mount_volume+0x55f>
c0002608:	8b 2c 85 40 73 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd8cc0]
c000260f:	89 c6                	mov    esi,eax
c0002611:	bb 0c 00 00 00       	mov    ebx,0xc
c0002616:	85 ed                	test   ebp,ebp
c0002618:	0f 84 24 05 00 00    	je     c0002b42 <mount_volume+0x55f>
c000261e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002622:	83 e7 fe             	and    edi,0xfffffffe
c0002625:	89 2a                	mov    DWORD PTR [edx],ebp
c0002627:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000262b:	74 32                	je     c000265f <mount_volume+0x7c>
c000262d:	83 ec 0c             	sub    esp,0xc
c0002630:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002634:	50                   	push   eax
c0002635:	e8 c8 f4 ff ff       	call   c0001b02 <disk_status>
c000263a:	83 c4 10             	add    esp,0x10
c000263d:	a8 01                	test   al,0x1
c000263f:	75 1e                	jne    c000265f <mount_volume+0x7c>
c0002641:	31 db                	xor    ebx,ebx
c0002643:	89 f9                	mov    ecx,edi
c0002645:	84 c9                	test   cl,cl
c0002647:	0f 84 f5 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c000264d:	a8 04                	test   al,0x4
c000264f:	0f 84 ed 04 00 00    	je     c0002b42 <mount_volume+0x55f>
c0002655:	bb 0a 00 00 00       	mov    ebx,0xa
c000265a:	e9 e3 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c000265f:	83 ec 0c             	sub    esp,0xc
c0002662:	89 f0                	mov    eax,esi
c0002664:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002668:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000266b:	0f b6 f0             	movzx  esi,al
c000266e:	bb 03 00 00 00       	mov    ebx,0x3
c0002673:	56                   	push   esi
c0002674:	e8 8c f4 ff ff       	call   c0001b05 <disk_initialize>
c0002679:	83 c4 10             	add    esp,0x10
c000267c:	a8 01                	test   al,0x1
c000267e:	0f 85 be 04 00 00    	jne    c0002b42 <mount_volume+0x55f>
c0002684:	89 f9                	mov    ecx,edi
c0002686:	84 c9                	test   cl,cl
c0002688:	74 04                	je     c000268e <mount_volume+0xab>
c000268a:	a8 04                	test   al,0x4
c000268c:	75 c7                	jne    c0002655 <mount_volume+0x72>
c000268e:	31 d2                	xor    edx,edx
c0002690:	89 e8                	mov    eax,ebp
c0002692:	e8 c8 fd ff ff       	call   c000245f <find_volume>
c0002697:	83 f8 04             	cmp    eax,0x4
c000269a:	75 0a                	jne    c00026a6 <mount_volume+0xc3>
c000269c:	bb 01 00 00 00       	mov    ebx,0x1
c00026a1:	e9 9c 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026a6:	83 f8 01             	cmp    eax,0x1
c00026a9:	76 0a                	jbe    c00026b5 <mount_volume+0xd2>
c00026ab:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b0:	e9 8d 04 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c00026b5:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026b8:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026c3:	75 17                	jne    c00026dc <mount_volume+0xf9>
c00026c5:	b8 0b 00 00 00       	mov    eax,0xb
c00026ca:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026cf:	75 da                	jne    c00026ab <mount_volume+0xc8>
c00026d1:	40                   	inc    eax
c00026d2:	83 f8 40             	cmp    eax,0x40
c00026d5:	75 f3                	jne    c00026ca <mount_volume+0xe7>
c00026d7:	e9 5a 02 00 00       	jmp    c0002936 <mount_volume+0x353>
c00026dc:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026df:	e8 6f f4 ff ff       	call   c0001b53 <ld_word>
c00026e4:	66 3d 00 02          	cmp    ax,0x200
c00026e8:	75 c1                	jne    c00026ab <mount_volume+0xc8>
c00026ea:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026ed:	e8 61 f4 ff ff       	call   c0001b53 <ld_word>
c00026f2:	0f b7 c0             	movzx  eax,ax
c00026f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00026f9:	85 c0                	test   eax,eax
c00026fb:	75 0c                	jne    c0002709 <mount_volume+0x126>
c00026fd:	8d 45 78             	lea    eax,[ebp+0x78]
c0002700:	e8 5b f4 ff ff       	call   c0001b60 <ld_dword>
c0002705:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002709:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000270d:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002710:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002713:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002717:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000271a:	48                   	dec    eax
c000271b:	3c 01                	cmp    al,0x1
c000271d:	77 8c                	ja     c00026ab <mount_volume+0xc8>
c000271f:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002723:	89 c3                	mov    ebx,eax
c0002725:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002729:	66 85 c0             	test   ax,ax
c000272c:	0f 84 79 ff ff ff    	je     c00026ab <mount_volume+0xc8>
c0002732:	8d 40 ff             	lea    eax,[eax-0x1]
c0002735:	85 d8                	test   eax,ebx
c0002737:	0f 85 6e ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c000273d:	8d 45 65             	lea    eax,[ebp+0x65]
c0002740:	e8 0e f4 ff ff       	call   c0001b53 <ld_word>
c0002745:	89 c7                	mov    edi,eax
c0002747:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000274b:	a8 0f                	test   al,0xf
c000274d:	0f 85 58 ff ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002753:	8d 45 67             	lea    eax,[ebp+0x67]
c0002756:	e8 f8 f3 ff ff       	call   c0001b53 <ld_word>
c000275b:	0f b7 f0             	movzx  esi,ax
c000275e:	85 f6                	test   esi,esi
c0002760:	75 0a                	jne    c000276c <mount_volume+0x189>
c0002762:	8d 45 74             	lea    eax,[ebp+0x74]
c0002765:	e8 f6 f3 ff ff       	call   c0001b60 <ld_dword>
c000276a:	89 c6                	mov    esi,eax
c000276c:	8d 45 62             	lea    eax,[ebp+0x62]
c000276f:	e8 df f3 ff ff       	call   c0001b53 <ld_word>
c0002774:	66 85 c0             	test   ax,ax
c0002777:	0f 84 2e ff ff ff    	je     c00026ab <mount_volume+0xc8>
c000277d:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002782:	0f b7 c8             	movzx  ecx,ax
c0002785:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000278a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000278e:	89 fa                	mov    edx,edi
c0002790:	66 c1 ea 04          	shr    dx,0x4
c0002794:	0f b7 d2             	movzx  edx,dx
c0002797:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000279b:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	39 c6                	cmp    esi,eax
c00027a4:	0f 82 01 ff ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027aa:	29 c6                	sub    esi,eax
c00027ac:	31 d2                	xor    edx,edx
c00027ae:	89 f0                	mov    eax,esi
c00027b0:	f7 f3                	div    ebx
c00027b2:	39 de                	cmp    esi,ebx
c00027b4:	0f 82 f1 fe ff ff    	jb     c00026ab <mount_volume+0xc8>
c00027ba:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027bf:	0f 87 e6 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c00027c5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027ca:	0f 86 63 03 00 00    	jbe    c0002b33 <mount_volume+0x550>
c00027d0:	bb 03 00 00 00       	mov    ebx,0x3
c00027d5:	8d 70 02             	lea    esi,[eax+0x2]
c00027d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027e3:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027e6:	31 d2                	xor    edx,edx
c00027e8:	89 c8                	mov    eax,ecx
c00027ea:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027ed:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00027f9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00027fd:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002800:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002803:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002807:	31 d2                	xor    edx,edx
c0002809:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000280d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002811:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002814:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002817:	83 fb 03             	cmp    ebx,0x3
c000281a:	75 2b                	jne    c0002847 <mount_volume+0x264>
c000281c:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000281f:	e8 2f f3 ff ff       	call   c0001b53 <ld_word>
c0002824:	66 09 c7             	or     di,ax
c0002827:	0f 85 7e fe ff ff    	jne    c00026ab <mount_volume+0xc8>
c000282d:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002833:	c1 e6 02             	shl    esi,0x2
c0002836:	e8 25 f3 ff ff       	call   c0001b60 <ld_dword>
c000283b:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002842:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002845:	eb 30                	jmp    c0002877 <mount_volume+0x294>
c0002847:	66 85 ff             	test   di,di
c000284a:	0f 84 5b fe ff ff    	je     c00026ab <mount_volume+0xc8>
c0002850:	31 d2                	xor    edx,edx
c0002852:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002856:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000285a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000285e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002861:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002864:	83 fb 02             	cmp    ebx,0x2
c0002867:	75 04                	jne    c000286d <mount_volume+0x28a>
c0002869:	01 f6                	add    esi,esi
c000286b:	eb 0a                	jmp    c0002877 <mount_volume+0x294>
c000286d:	8d 04 76             	lea    eax,[esi+esi*2]
c0002870:	83 e6 01             	and    esi,0x1
c0002873:	d1 e8                	shr    eax,1
c0002875:	01 c6                	add    esi,eax
c0002877:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000287d:	c1 ee 09             	shr    esi,0x9
c0002880:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002884:	0f 87 21 fe ff ff    	ja     c00026ab <mount_volume+0xc8>
c000288a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002891:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002898:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000289c:	83 fb 03             	cmp    ebx,0x3
c000289f:	75 7a                	jne    c000291b <mount_volume+0x338>
c00028a1:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028a7:	e8 a7 f2 ff ff       	call   c0001b53 <ld_word>
c00028ac:	66 48                	dec    ax
c00028ae:	75 6b                	jne    c000291b <mount_volume+0x338>
c00028b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028b8:	83 c2 01             	add    edx,0x1
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	83 d1 00             	adc    ecx,0x0
c00028c0:	e8 6c fa ff ff       	call   c0002331 <move_window>
c00028c5:	85 c0                	test   eax,eax
c00028c7:	75 52                	jne    c000291b <mount_volume+0x338>
c00028c9:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028cd:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028d3:	e8 7b f2 ff ff       	call   c0001b53 <ld_word>
c00028d8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028dc:	75 3d                	jne    c000291b <mount_volume+0x338>
c00028de:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e1:	e8 7a f2 ff ff       	call   c0001b60 <ld_dword>
c00028e6:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028eb:	75 2e                	jne    c000291b <mount_volume+0x338>
c00028ed:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028f3:	e8 68 f2 ff ff       	call   c0001b60 <ld_dword>
c00028f8:	3d 72 72 41 61       	cmp    eax,0x61417272
c00028fd:	75 1c                	jne    c000291b <mount_volume+0x338>
c00028ff:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002905:	e8 56 f2 ff ff       	call   c0001b60 <ld_dword>
c000290a:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000290d:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002913:	e8 48 f2 ff ff       	call   c0001b60 <ld_dword>
c0002918:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000291b:	66 a1 20 73 02 c0    	mov    ax,ds:0xc0027320
c0002921:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002924:	40                   	inc    eax
c0002925:	31 db                	xor    ebx,ebx
c0002927:	66 a3 20 73 02 c0    	mov    ds:0xc0027320,ax
c000292d:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002931:	e9 0c 02 00 00       	jmp    c0002b42 <mount_volume+0x55f>
c0002936:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000293c:	e8 12 f2 ff ff       	call   c0001b53 <ld_word>
c0002941:	66 3d 00 01          	cmp    ax,0x100
c0002945:	0f 85 60 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000294b:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002952:	0f 85 53 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c0002958:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000295e:	e8 15 f2 ff ff       	call   c0001b78 <ld_qword>
c0002963:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002967:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000296b:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002971:	e8 ea f1 ff ff       	call   c0001b60 <ld_dword>
c0002976:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002979:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000297f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002982:	fe c8                	dec    al
c0002984:	0f 85 21 fd ff ff    	jne    c00026ab <mount_volume+0xc8>
c000298a:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002991:	bb 01 00 00 00       	mov    ebx,0x1
c0002996:	d3 e3                	shl    ebx,cl
c0002998:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000299c:	66 85 db             	test   bx,bx
c000299f:	0f 84 06 fd ff ff    	je     c00026ab <mount_volume+0xc8>
c00029a5:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029ab:	e8 b0 f1 ff ff       	call   c0001b60 <ld_dword>
c00029b0:	89 c6                	mov    esi,eax
c00029b2:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029b7:	0f 87 ee fc ff ff    	ja     c00026ab <mount_volume+0xc8>
c00029bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c1:	8d 40 02             	lea    eax,[eax+0x2]
c00029c4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029c7:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029ce:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d1:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029d7:	e8 84 f1 ff ff       	call   c0001b60 <ld_dword>
c00029dc:	31 d2                	xor    edx,edx
c00029de:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029e2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029ee:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f1:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029f4:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00029fa:	e8 61 f1 ff ff       	call   c0001b60 <ld_dword>
c00029ff:	31 d2                	xor    edx,edx
c0002a01:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a05:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a09:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a0d:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a10:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a13:	0f b7 c3             	movzx  eax,bx
c0002a16:	31 d2                	xor    edx,edx
c0002a18:	0f af f0             	imul   esi,eax
c0002a1b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a1f:	89 f0                	mov    eax,esi
c0002a21:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a25:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a29:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a2d:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a31:	39 c1                	cmp    ecx,eax
c0002a33:	89 df                	mov    edi,ebx
c0002a35:	19 d7                	sbb    edi,edx
c0002a37:	0f 82 6e fc ff ff    	jb     c00026ab <mount_volume+0xc8>
c0002a3d:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a43:	31 db                	xor    ebx,ebx
c0002a45:	e8 16 f1 ff ff       	call   c0001b60 <ld_dword>
c0002a4a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a51:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a5c:	85 db                	test   ebx,ebx
c0002a5e:	75 39                	jne    c0002a99 <mount_volume+0x4b6>
c0002a60:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a64:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a68:	0f 86 3d fc ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002a6e:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a71:	31 ff                	xor    edi,edi
c0002a73:	89 e8                	mov    eax,ebp
c0002a75:	e8 72 f3 ff ff       	call   c0001dec <clst2sect>
c0002a7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a7e:	01 c6                	add    esi,eax
c0002a80:	89 e8                	mov    eax,ebp
c0002a82:	11 d7                	adc    edi,edx
c0002a84:	89 f2                	mov    edx,esi
c0002a86:	89 f9                	mov    ecx,edi
c0002a88:	e8 a4 f8 ff ff       	call   c0002331 <move_window>
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	0f 85 07 fc ff ff    	jne    c000269c <mount_volume+0xb9>
c0002a95:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002a99:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002a9e:	74 0b                	je     c0002aab <mount_volume+0x4c8>
c0002aa0:	83 c3 20             	add    ebx,0x20
c0002aa3:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002aa9:	eb b1                	jmp    c0002a5c <mount_volume+0x479>
c0002aab:	8d 75 54             	lea    esi,[ebp+0x54]
c0002aae:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002ab2:	e8 a9 f0 ff ff       	call   c0001b60 <ld_dword>
c0002ab7:	89 c3                	mov    ebx,eax
c0002ab9:	83 f8 01             	cmp    eax,0x1
c0002abc:	0f 86 e9 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002ac2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002ac5:	0f 86 e0 fb ff ff    	jbe    c00026ab <mount_volume+0xc8>
c0002acb:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ace:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ad2:	0f af c2             	imul   eax,edx
c0002ad5:	31 d2                	xor    edx,edx
c0002ad7:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ada:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002add:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae0:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002ae3:	31 c9                	xor    ecx,ecx
c0002ae5:	89 da                	mov    edx,ebx
c0002ae7:	89 e8                	mov    eax,ebp
c0002ae9:	c1 ea 07             	shr    edx,0x7
c0002aec:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002aef:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002af2:	e8 3a f8 ff ff       	call   c0002331 <move_window>
c0002af7:	85 c0                	test   eax,eax
c0002af9:	0f 85 9d fb ff ff    	jne    c000269c <mount_volume+0xb9>
c0002aff:	89 d8                	mov    eax,ebx
c0002b01:	83 e0 7f             	and    eax,0x7f
c0002b04:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b07:	e8 54 f0 ff ff       	call   c0001b60 <ld_dword>
c0002b0c:	83 f8 ff             	cmp    eax,0xffffffff
c0002b0f:	74 0a                	je     c0002b1b <mount_volume+0x538>
c0002b11:	43                   	inc    ebx
c0002b12:	39 d8                	cmp    eax,ebx
c0002b14:	74 cd                	je     c0002ae3 <mount_volume+0x500>
c0002b16:	e9 90 fb ff ff       	jmp    c00026ab <mount_volume+0xc8>
c0002b1b:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b22:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b29:	bb 04 00 00 00       	mov    ebx,0x4
c0002b2e:	e9 e8 fd ff ff       	jmp    c000291b <mount_volume+0x338>
c0002b33:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b38:	19 db                	sbb    ebx,ebx
c0002b3a:	83 c3 02             	add    ebx,0x2
c0002b3d:	e9 93 fc ff ff       	jmp    c00027d5 <mount_volume+0x1f2>
c0002b42:	83 c4 3c             	add    esp,0x3c
c0002b45:	89 d8                	mov    eax,ebx
c0002b47:	5b                   	pop    ebx
c0002b48:	5e                   	pop    esi
c0002b49:	5f                   	pop    edi
c0002b4a:	5d                   	pop    ebp
c0002b4b:	c3                   	ret    

c0002b4c <find_bitmap>:
c0002b4c:	55                   	push   ebp
c0002b4d:	57                   	push   edi
c0002b4e:	89 c7                	mov    edi,eax
c0002b50:	56                   	push   esi
c0002b51:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b54:	53                   	push   ebx
c0002b55:	83 ec 1c             	sub    esp,0x1c
c0002b58:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b5b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b5f:	83 e8 02             	sub    eax,0x2
c0002b62:	39 f0                	cmp    eax,esi
c0002b64:	77 02                	ja     c0002b68 <find_bitmap+0x1c>
c0002b66:	31 f6                	xor    esi,esi
c0002b68:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b6c:	89 f3                	mov    ebx,esi
c0002b6e:	31 ed                	xor    ebp,ebp
c0002b70:	31 c9                	xor    ecx,ecx
c0002b72:	89 da                	mov    edx,ebx
c0002b74:	89 f8                	mov    eax,edi
c0002b76:	c1 ea 0c             	shr    edx,0xc
c0002b79:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b7c:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b7f:	e8 ad f7 ff ff       	call   c0002331 <move_window>
c0002b84:	85 c0                	test   eax,eax
c0002b86:	75 68                	jne    c0002bf0 <find_bitmap+0xa4>
c0002b88:	89 da                	mov    edx,ebx
c0002b8a:	89 d9                	mov    ecx,ebx
c0002b8c:	c1 ea 03             	shr    edx,0x3
c0002b8f:	83 e1 07             	and    ecx,0x7
c0002b92:	b8 01 00 00 00       	mov    eax,0x1
c0002b97:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002b9d:	d3 e0                	shl    eax,cl
c0002b9f:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002ba2:	83 e9 02             	sub    ecx,0x2
c0002ba5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ba9:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bad:	43                   	inc    ebx
c0002bae:	21 c1                	and    ecx,eax
c0002bb0:	d1 e0                	shl    eax,1
c0002bb2:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bb6:	77 09                	ja     c0002bc1 <find_bitmap+0x75>
c0002bb8:	31 db                	xor    ebx,ebx
c0002bba:	ba 00 02 00 00       	mov    edx,0x200
c0002bbf:	31 c0                	xor    eax,eax
c0002bc1:	84 c9                	test   cl,cl
c0002bc3:	75 10                	jne    c0002bd5 <find_bitmap+0x89>
c0002bc5:	45                   	inc    ebp
c0002bc6:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bca:	75 0f                	jne    c0002bdb <find_bitmap+0x8f>
c0002bcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd0:	83 c0 02             	add    eax,0x2
c0002bd3:	eb 22                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bd5:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002bd9:	31 ed                	xor    ebp,ebp
c0002bdb:	39 de                	cmp    esi,ebx
c0002bdd:	74 16                	je     c0002bf5 <find_bitmap+0xa9>
c0002bdf:	84 c0                	test   al,al
c0002be1:	75 c6                	jne    c0002ba9 <find_bitmap+0x5d>
c0002be3:	42                   	inc    edx
c0002be4:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bea:	77 84                	ja     c0002b70 <find_bitmap+0x24>
c0002bec:	b0 01                	mov    al,0x1
c0002bee:	eb b9                	jmp    c0002ba9 <find_bitmap+0x5d>
c0002bf0:	83 c8 ff             	or     eax,0xffffffff
c0002bf3:	eb 02                	jmp    c0002bf7 <find_bitmap+0xab>
c0002bf5:	31 c0                	xor    eax,eax
c0002bf7:	83 c4 1c             	add    esp,0x1c
c0002bfa:	5b                   	pop    ebx
c0002bfb:	5e                   	pop    esi
c0002bfc:	5f                   	pop    edi
c0002bfd:	5d                   	pop    ebp
c0002bfe:	c3                   	ret    

c0002bff <change_bitmap>:
c0002bff:	55                   	push   ebp
c0002c00:	89 cd                	mov    ebp,ecx
c0002c02:	57                   	push   edi
c0002c03:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c06:	56                   	push   esi
c0002c07:	89 c7                	mov    edi,eax
c0002c09:	53                   	push   ebx
c0002c0a:	89 c8                	mov    eax,ecx
c0002c0c:	83 ec 1c             	sub    esp,0x1c
c0002c0f:	31 d2                	xor    edx,edx
c0002c11:	89 ce                	mov    esi,ecx
c0002c13:	c1 e8 0c             	shr    eax,0xc
c0002c16:	bb 01 00 00 00       	mov    ebx,0x1
c0002c1b:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c1e:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c21:	c1 ee 03             	shr    esi,0x3
c0002c24:	83 e1 07             	and    ecx,0x7
c0002c27:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c2d:	d3 e3                	shl    ebx,cl
c0002c2f:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c33:	89 c1                	mov    ecx,eax
c0002c35:	89 d3                	mov    ebx,edx
c0002c37:	83 c1 01             	add    ecx,0x1
c0002c3a:	83 d3 00             	adc    ebx,0x0
c0002c3d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c41:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c45:	89 d1                	mov    ecx,edx
c0002c47:	89 c2                	mov    edx,eax
c0002c49:	89 f8                	mov    eax,edi
c0002c4b:	e8 e1 f6 ff ff       	call   c0002331 <move_window>
c0002c50:	89 c1                	mov    ecx,eax
c0002c52:	85 c0                	test   eax,eax
c0002c54:	75 48                	jne    c0002c9e <change_bitmap+0x9f>
c0002c56:	31 d2                	xor    edx,edx
c0002c58:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c5c:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c60:	0f 95 c2             	setne  dl
c0002c63:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c67:	74 3c                	je     c0002ca5 <change_bitmap+0xa6>
c0002c69:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c6d:	4d                   	dec    ebp
c0002c6e:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c72:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c76:	74 32                	je     c0002caa <change_bitmap+0xab>
c0002c78:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c7c:	75 d8                	jne    c0002c56 <change_bitmap+0x57>
c0002c7e:	8d 46 01             	lea    eax,[esi+0x1]
c0002c81:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c86:	89 c3                	mov    ebx,eax
c0002c88:	31 f6                	xor    esi,esi
c0002c8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c92:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002c98:	74 99                	je     c0002c33 <change_bitmap+0x34>
c0002c9a:	89 de                	mov    esi,ebx
c0002c9c:	eb b8                	jmp    c0002c56 <change_bitmap+0x57>
c0002c9e:	b9 01 00 00 00       	mov    ecx,0x1
c0002ca3:	eb 05                	jmp    c0002caa <change_bitmap+0xab>
c0002ca5:	b9 02 00 00 00       	mov    ecx,0x2
c0002caa:	83 c4 1c             	add    esp,0x1c
c0002cad:	89 c8                	mov    eax,ecx
c0002caf:	5b                   	pop    ebx
c0002cb0:	5e                   	pop    esi
c0002cb1:	5f                   	pop    edi
c0002cb2:	5d                   	pop    ebp
c0002cb3:	c3                   	ret    

c0002cb4 <put_fat>:
c0002cb4:	83 fa 01             	cmp    edx,0x1
c0002cb7:	0f 86 7b 01 00 00    	jbe    c0002e38 <put_fat+0x184>
c0002cbd:	55                   	push   ebp
c0002cbe:	57                   	push   edi
c0002cbf:	89 cf                	mov    edi,ecx
c0002cc1:	56                   	push   esi
c0002cc2:	b9 02 00 00 00       	mov    ecx,0x2
c0002cc7:	53                   	push   ebx
c0002cc8:	89 c6                	mov    esi,eax
c0002cca:	83 ec 1c             	sub    esp,0x1c
c0002ccd:	89 d3                	mov    ebx,edx
c0002ccf:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cd2:	0f 86 68 01 00 00    	jbe    c0002e40 <put_fat+0x18c>
c0002cd8:	8a 00                	mov    al,BYTE PTR [eax]
c0002cda:	3c 02                	cmp    al,0x2
c0002cdc:	0f 84 c7 00 00 00    	je     c0002da9 <put_fat+0xf5>
c0002ce2:	77 09                	ja     c0002ced <put_fat+0x39>
c0002ce4:	fe c8                	dec    al
c0002ce6:	74 17                	je     c0002cff <put_fat+0x4b>
c0002ce8:	e9 53 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002ced:	b9 02 00 00 00       	mov    ecx,0x2
c0002cf2:	3c 04                	cmp    al,0x4
c0002cf4:	0f 86 e1 00 00 00    	jbe    c0002ddb <put_fat+0x127>
c0002cfa:	e9 41 01 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002cff:	89 d5                	mov    ebp,edx
c0002d01:	31 c9                	xor    ecx,ecx
c0002d03:	d1 ed                	shr    ebp,1
c0002d05:	89 f0                	mov    eax,esi
c0002d07:	01 d5                	add    ebp,edx
c0002d09:	89 ea                	mov    edx,ebp
c0002d0b:	c1 ea 09             	shr    edx,0x9
c0002d0e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d11:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d14:	e8 18 f6 ff ff       	call   c0002331 <move_window>
c0002d19:	89 c1                	mov    ecx,eax
c0002d1b:	85 c0                	test   eax,eax
c0002d1d:	0f 85 1d 01 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d23:	8d 46 54             	lea    eax,[esi+0x54]
c0002d26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d2a:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d2d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d37:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d3b:	89 f8                	mov    eax,edi
c0002d3d:	83 e3 01             	and    ebx,0x1
c0002d40:	74 0d                	je     c0002d4f <put_fat+0x9b>
c0002d42:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d45:	89 fa                	mov    edx,edi
c0002d47:	83 e0 0f             	and    eax,0xf
c0002d4a:	c1 e2 04             	shl    edx,0x4
c0002d4d:	09 d0                	or     eax,edx
c0002d4f:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d56:	31 c9                	xor    ecx,ecx
c0002d58:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d5c:	c1 ea 09             	shr    edx,0x9
c0002d5f:	89 f0                	mov    eax,esi
c0002d61:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d64:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d67:	e8 c5 f5 ff ff       	call   c0002331 <move_window>
c0002d6c:	89 c1                	mov    ecx,eax
c0002d6e:	85 c0                	test   eax,eax
c0002d70:	0f 85 ca 00 00 00    	jne    c0002e40 <put_fat+0x18c>
c0002d76:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d7a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d80:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d84:	85 db                	test   ebx,ebx
c0002d86:	74 07                	je     c0002d8f <put_fat+0xdb>
c0002d88:	c1 ef 04             	shr    edi,0x4
c0002d8b:	89 fa                	mov    edx,edi
c0002d8d:	eb 0e                	jmp    c0002d9d <put_fat+0xe9>
c0002d8f:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d92:	c1 ef 08             	shr    edi,0x8
c0002d95:	83 e2 f0             	and    edx,0xfffffff0
c0002d98:	83 e7 0f             	and    edi,0xf
c0002d9b:	09 fa                	or     edx,edi
c0002d9d:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002da4:	e9 97 00 00 00       	jmp    c0002e40 <put_fat+0x18c>
c0002da9:	31 c9                	xor    ecx,ecx
c0002dab:	c1 ea 08             	shr    edx,0x8
c0002dae:	89 f0                	mov    eax,esi
c0002db0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002db3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002db6:	e8 76 f5 ff ff       	call   c0002331 <move_window>
c0002dbb:	89 c1                	mov    ecx,eax
c0002dbd:	85 c0                	test   eax,eax
c0002dbf:	75 7f                	jne    c0002e40 <put_fat+0x18c>
c0002dc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dc5:	01 db                	add    ebx,ebx
c0002dc7:	0f b7 d7             	movzx  edx,di
c0002dca:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd0:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002dd4:	e8 ec ed ff ff       	call   c0001bc5 <st_word>
c0002dd9:	eb 53                	jmp    c0002e2e <put_fat+0x17a>
c0002ddb:	31 c9                	xor    ecx,ecx
c0002ddd:	c1 ea 07             	shr    edx,0x7
c0002de0:	89 f0                	mov    eax,esi
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 44 f5 ff ff       	call   c0002331 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	75 4d                	jne    c0002e40 <put_fat+0x18c>
c0002df3:	c1 e3 02             	shl    ebx,0x2
c0002df6:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002dfc:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002dff:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e03:	74 1c                	je     c0002e21 <put_fat+0x16d>
c0002e05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e09:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e0f:	89 d8                	mov    eax,ebx
c0002e11:	e8 4a ed ff ff       	call   c0001b60 <ld_dword>
c0002e16:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e1a:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e1f:	09 c7                	or     edi,eax
c0002e21:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e25:	89 fa                	mov    edx,edi
c0002e27:	89 d8                	mov    eax,ebx
c0002e29:	e8 9b ed ff ff       	call   c0001bc9 <st_dword>
c0002e2e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e32:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e36:	eb 08                	jmp    c0002e40 <put_fat+0x18c>
c0002e38:	b9 02 00 00 00       	mov    ecx,0x2
c0002e3d:	89 c8                	mov    eax,ecx
c0002e3f:	c3                   	ret    
c0002e40:	83 c4 1c             	add    esp,0x1c
c0002e43:	89 c8                	mov    eax,ecx
c0002e45:	5b                   	pop    ebx
c0002e46:	5e                   	pop    esi
c0002e47:	5f                   	pop    edi
c0002e48:	5d                   	pop    ebp
c0002e49:	c3                   	ret    

c0002e4a <fill_last_frag>:
c0002e4a:	57                   	push   edi
c0002e4b:	89 cf                	mov    edi,ecx
c0002e4d:	56                   	push   esi
c0002e4e:	89 d6                	mov    esi,edx
c0002e50:	53                   	push   ebx
c0002e51:	89 c3                	mov    ebx,eax
c0002e53:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e56:	85 c0                	test   eax,eax
c0002e58:	74 21                	je     c0002e7b <fill_last_frag+0x31>
c0002e5a:	89 f9                	mov    ecx,edi
c0002e5c:	83 f8 01             	cmp    eax,0x1
c0002e5f:	76 05                	jbe    c0002e66 <fill_last_frag+0x1c>
c0002e61:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e64:	29 c1                	sub    ecx,eax
c0002e66:	8d 56 01             	lea    edx,[esi+0x1]
c0002e69:	29 c2                	sub    edx,eax
c0002e6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e6d:	e8 42 fe ff ff       	call   c0002cb4 <put_fat>
c0002e72:	85 c0                	test   eax,eax
c0002e74:	75 05                	jne    c0002e7b <fill_last_frag+0x31>
c0002e76:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e79:	eb d8                	jmp    c0002e53 <fill_last_frag+0x9>
c0002e7b:	5b                   	pop    ebx
c0002e7c:	5e                   	pop    esi
c0002e7d:	5f                   	pop    edi
c0002e7e:	c3                   	ret    

c0002e7f <fill_first_frag>:
c0002e7f:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e83:	75 2d                	jne    c0002eb2 <fill_first_frag+0x33>
c0002e85:	57                   	push   edi
c0002e86:	56                   	push   esi
c0002e87:	53                   	push   ebx
c0002e88:	89 c3                	mov    ebx,eax
c0002e8a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e8d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e90:	01 d7                	add    edi,edx
c0002e92:	39 fa                	cmp    edx,edi
c0002e94:	74 14                	je     c0002eaa <fill_first_frag+0x2b>
c0002e96:	8d 72 01             	lea    esi,[edx+0x1]
c0002e99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e9b:	89 f1                	mov    ecx,esi
c0002e9d:	e8 12 fe ff ff       	call   c0002cb4 <put_fat>
c0002ea2:	89 f2                	mov    edx,esi
c0002ea4:	85 c0                	test   eax,eax
c0002ea6:	74 ea                	je     c0002e92 <fill_first_frag+0x13>
c0002ea8:	eb 0b                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eaa:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	eb 03                	jmp    c0002eb5 <fill_first_frag+0x36>
c0002eb2:	31 c0                	xor    eax,eax
c0002eb4:	c3                   	ret    
c0002eb5:	5b                   	pop    ebx
c0002eb6:	5e                   	pop    esi
c0002eb7:	5f                   	pop    edi
c0002eb8:	c3                   	ret    

c0002eb9 <get_fat>:
c0002eb9:	83 fa 01             	cmp    edx,0x1
c0002ebc:	0f 86 db 01 00 00    	jbe    c000309d <get_fat+0x1e4>
c0002ec2:	55                   	push   ebp
c0002ec3:	b9 01 00 00 00       	mov    ecx,0x1
c0002ec8:	57                   	push   edi
c0002ec9:	56                   	push   esi
c0002eca:	53                   	push   ebx
c0002ecb:	83 ec 1c             	sub    esp,0x1c
c0002ece:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed0:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002ed3:	0f 86 cc 01 00 00    	jbe    c00030a5 <get_fat+0x1ec>
c0002ed9:	89 c3                	mov    ebx,eax
c0002edb:	89 d6                	mov    esi,edx
c0002edd:	8a 07                	mov    al,BYTE PTR [edi]
c0002edf:	3c 02                	cmp    al,0x2
c0002ee1:	0f 84 99 00 00 00    	je     c0002f80 <get_fat+0xc7>
c0002ee7:	77 09                	ja     c0002ef2 <get_fat+0x39>
c0002ee9:	fe c8                	dec    al
c0002eeb:	74 1a                	je     c0002f07 <get_fat+0x4e>
c0002eed:	e9 b3 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002ef2:	3c 03                	cmp    al,0x3
c0002ef4:	0f 84 b5 00 00 00    	je     c0002faf <get_fat+0xf6>
c0002efa:	3c 04                	cmp    al,0x4
c0002efc:	0f 84 e3 00 00 00    	je     c0002fe5 <get_fat+0x12c>
c0002f02:	e9 9e 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f07:	89 d3                	mov    ebx,edx
c0002f09:	31 c9                	xor    ecx,ecx
c0002f0b:	d1 eb                	shr    ebx,1
c0002f0d:	89 f8                	mov    eax,edi
c0002f0f:	01 d3                	add    ebx,edx
c0002f11:	89 da                	mov    edx,ebx
c0002f13:	c1 ea 09             	shr    edx,0x9
c0002f16:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f19:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f1c:	e8 10 f4 ff ff       	call   c0002331 <move_window>
c0002f21:	85 c0                	test   eax,eax
c0002f23:	74 08                	je     c0002f2d <get_fat+0x74>
c0002f25:	83 c9 ff             	or     ecx,0xffffffff
c0002f28:	e9 78 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f2d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f30:	31 c9                	xor    ecx,ecx
c0002f32:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f38:	89 ea                	mov    edx,ebp
c0002f3a:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f3e:	c1 ea 09             	shr    edx,0x9
c0002f41:	89 f8                	mov    eax,edi
c0002f43:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f46:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f49:	e8 e3 f3 ff ff       	call   c0002331 <move_window>
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	75 d3                	jne    c0002f25 <get_fat+0x6c>
c0002f52:	0f b6 c3             	movzx  eax,bl
c0002f55:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f5b:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f60:	c1 e3 08             	shl    ebx,0x8
c0002f63:	09 c3                	or     ebx,eax
c0002f65:	89 d9                	mov    ecx,ebx
c0002f67:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f6d:	83 e6 01             	and    esi,0x1
c0002f70:	0f 84 2f 01 00 00    	je     c00030a5 <get_fat+0x1ec>
c0002f76:	89 d9                	mov    ecx,ebx
c0002f78:	c1 e9 04             	shr    ecx,0x4
c0002f7b:	e9 25 01 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002f80:	31 c9                	xor    ecx,ecx
c0002f82:	c1 ea 08             	shr    edx,0x8
c0002f85:	89 f8                	mov    eax,edi
c0002f87:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f8a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f8d:	e8 9f f3 ff ff       	call   c0002331 <move_window>
c0002f92:	85 c0                	test   eax,eax
c0002f94:	75 8f                	jne    c0002f25 <get_fat+0x6c>
c0002f96:	01 f6                	add    esi,esi
c0002f98:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002f9e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fa2:	e8 ac eb ff ff       	call   c0001b53 <ld_word>
c0002fa7:	0f b7 c8             	movzx  ecx,ax
c0002faa:	e9 f6 00 00 00       	jmp    c00030a5 <get_fat+0x1ec>
c0002faf:	31 c9                	xor    ecx,ecx
c0002fb1:	c1 ea 07             	shr    edx,0x7
c0002fb4:	89 f8                	mov    eax,edi
c0002fb6:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fb9:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fbc:	e8 70 f3 ff ff       	call   c0002331 <move_window>
c0002fc1:	85 c0                	test   eax,eax
c0002fc3:	0f 85 5c ff ff ff    	jne    c0002f25 <get_fat+0x6c>
c0002fc9:	c1 e6 02             	shl    esi,0x2
c0002fcc:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fd2:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fd6:	e8 85 eb ff ff       	call   c0001b60 <ld_dword>
c0002fdb:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe0:	e9 b4 00 00 00       	jmp    c0003099 <get_fat+0x1e0>
c0002fe5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002fe8:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002feb:	89 d1                	mov    ecx,edx
c0002fed:	09 c1                	or     ecx,eax
c0002fef:	74 06                	je     c0002ff7 <get_fat+0x13e>
c0002ff1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ff5:	75 0f                	jne    c0003006 <get_fat+0x14d>
c0002ff7:	b9 01 00 00 00       	mov    ecx,0x1
c0002ffc:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003000:	0f 85 9f 00 00 00    	jne    c00030a5 <get_fat+0x1ec>
c0003006:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c000300a:	89 f5                	mov    ebp,esi
c000300c:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003011:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003014:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003017:	80 f9 02             	cmp    cl,0x2
c000301a:	75 35                	jne    c0003051 <get_fat+0x198>
c000301c:	83 c0 ff             	add    eax,0xffffffff
c000301f:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003024:	83 d2 ff             	adc    edx,0xffffffff
c0003027:	31 db                	xor    ebx,ebx
c0003029:	0f ac d0 09          	shrd   eax,edx,0x9
c000302d:	53                   	push   ebx
c000302e:	c1 ea 09             	shr    edx,0x9
c0003031:	51                   	push   ecx
c0003032:	52                   	push   edx
c0003033:	50                   	push   eax
c0003034:	e8 97 ed 01 00       	call   c0021dd0 <__udivdi3>
c0003039:	83 c4 10             	add    esp,0x10
c000303c:	b9 01 00 00 00       	mov    ecx,0x1
c0003041:	39 c5                	cmp    ebp,eax
c0003043:	77 60                	ja     c00030a5 <get_fat+0x1ec>
c0003045:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000304a:	74 59                	je     c00030a5 <get_fat+0x1ec>
c000304c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000304f:	eb 54                	jmp    c00030a5 <get_fat+0x1ec>
c0003051:	80 f9 03             	cmp    cl,0x3
c0003054:	75 05                	jne    c000305b <get_fat+0x1a2>
c0003056:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003059:	77 f1                	ja     c000304c <get_fat+0x193>
c000305b:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003060:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003064:	75 3f                	jne    c00030a5 <get_fat+0x1ec>
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	89 f2                	mov    edx,esi
c000306a:	89 f8                	mov    eax,edi
c000306c:	c1 ea 07             	shr    edx,0x7
c000306f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003072:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003075:	e8 b7 f2 ff ff       	call   c0002331 <move_window>
c000307a:	85 c0                	test   eax,eax
c000307c:	0f 85 a3 fe ff ff    	jne    c0002f25 <get_fat+0x6c>
c0003082:	c1 e6 02             	shl    esi,0x2
c0003085:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000308b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000308f:	e8 cc ea ff ff       	call   c0001b60 <ld_dword>
c0003094:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003099:	89 c1                	mov    ecx,eax
c000309b:	eb 08                	jmp    c00030a5 <get_fat+0x1ec>
c000309d:	b9 01 00 00 00       	mov    ecx,0x1
c00030a2:	89 c8                	mov    eax,ecx
c00030a4:	c3                   	ret    
c00030a5:	83 c4 1c             	add    esp,0x1c
c00030a8:	89 c8                	mov    eax,ecx
c00030aa:	5b                   	pop    ebx
c00030ab:	5e                   	pop    esi
c00030ac:	5f                   	pop    edi
c00030ad:	5d                   	pop    ebp
c00030ae:	c3                   	ret    

c00030af <dir_sdi>:
c00030af:	55                   	push   ebp
c00030b0:	57                   	push   edi
c00030b1:	56                   	push   esi
c00030b2:	53                   	push   ebx
c00030b3:	89 c3                	mov    ebx,eax
c00030b5:	83 ec 1c             	sub    esp,0x1c
c00030b8:	8b 38                	mov    edi,DWORD PTR [eax]
c00030ba:	31 c0                	xor    eax,eax
c00030bc:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030bf:	0f 94 c0             	sete   al
c00030c2:	48                   	dec    eax
c00030c3:	25 00 00 20 f0       	and    eax,0xf0200000
c00030c8:	05 00 00 00 10       	add    eax,0x10000000
c00030cd:	39 d0                	cmp    eax,edx
c00030cf:	77 0a                	ja     c00030db <dir_sdi+0x2c>
c00030d1:	b8 02 00 00 00       	mov    eax,0x2
c00030d6:	e9 c4 00 00 00       	jmp    c000319f <dir_sdi+0xf0>
c00030db:	89 d6                	mov    esi,edx
c00030dd:	f6 c2 1f             	test   dl,0x1f
c00030e0:	75 ef                	jne    c00030d1 <dir_sdi+0x22>
c00030e2:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030e5:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030e8:	85 c9                	test   ecx,ecx
c00030ea:	75 2d                	jne    c0003119 <dir_sdi+0x6a>
c00030ec:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030ef:	77 1b                	ja     c000310c <dir_sdi+0x5d>
c00030f1:	89 f2                	mov    edx,esi
c00030f3:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030f7:	c1 ea 05             	shr    edx,0x5
c00030fa:	39 c2                	cmp    edx,eax
c00030fc:	73 d3                	jae    c00030d1 <dir_sdi+0x22>
c00030fe:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003101:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003104:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003107:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000310a:	eb 4b                	jmp    c0003157 <dir_sdi+0xa8>
c000310c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000310f:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003113:	85 c0                	test   eax,eax
c0003115:	74 da                	je     c00030f1 <dir_sdi+0x42>
c0003117:	89 c1                	mov    ecx,eax
c0003119:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000311d:	c1 e5 09             	shl    ebp,0x9
c0003120:	89 ca                	mov    edx,ecx
c0003122:	39 ee                	cmp    esi,ebp
c0003124:	72 1c                	jb     c0003142 <dir_sdi+0x93>
c0003126:	89 d8                	mov    eax,ebx
c0003128:	e8 8c fd ff ff       	call   c0002eb9 <get_fat>
c000312d:	89 c1                	mov    ecx,eax
c000312f:	83 f8 ff             	cmp    eax,0xffffffff
c0003132:	74 66                	je     c000319a <dir_sdi+0xeb>
c0003134:	83 f8 01             	cmp    eax,0x1
c0003137:	76 98                	jbe    c00030d1 <dir_sdi+0x22>
c0003139:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000313c:	76 93                	jbe    c00030d1 <dir_sdi+0x22>
c000313e:	29 ee                	sub    esi,ebp
c0003140:	eb de                	jmp    c0003120 <dir_sdi+0x71>
c0003142:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003146:	89 f8                	mov    eax,edi
c0003148:	e8 9f ec ff ff       	call   c0001dec <clst2sect>
c000314d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003151:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003154:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003157:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000315a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000315d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003160:	89 d1                	mov    ecx,edx
c0003162:	09 c1                	or     ecx,eax
c0003164:	0f 84 67 ff ff ff    	je     c00030d1 <dir_sdi+0x22>
c000316a:	89 f1                	mov    ecx,esi
c000316c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003174:	c1 e9 09             	shr    ecx,0x9
c0003177:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000317b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000317f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003183:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003186:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000318c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000318f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003193:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003196:	31 c0                	xor    eax,eax
c0003198:	eb 05                	jmp    c000319f <dir_sdi+0xf0>
c000319a:	b8 01 00 00 00       	mov    eax,0x1
c000319f:	83 c4 1c             	add    esp,0x1c
c00031a2:	5b                   	pop    ebx
c00031a3:	5e                   	pop    esi
c00031a4:	5f                   	pop    edi
c00031a5:	5d                   	pop    ebp
c00031a6:	c3                   	ret    

c00031a7 <create_chain>:
c00031a7:	55                   	push   ebp
c00031a8:	89 c5                	mov    ebp,eax
c00031aa:	57                   	push   edi
c00031ab:	56                   	push   esi
c00031ac:	53                   	push   ebx
c00031ad:	83 ec 1c             	sub    esp,0x1c
c00031b0:	85 d2                	test   edx,edx
c00031b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031b6:	8b 30                	mov    esi,DWORD PTR [eax]
c00031b8:	75 0e                	jne    c00031c8 <create_chain+0x21>
c00031ba:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031bd:	85 ff                	test   edi,edi
c00031bf:	74 39                	je     c00031fa <create_chain+0x53>
c00031c1:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031c4:	77 39                	ja     c00031ff <create_chain+0x58>
c00031c6:	eb 32                	jmp    c00031fa <create_chain+0x53>
c00031c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031cc:	e8 e8 fc ff ff       	call   c0002eb9 <get_fat>
c00031d1:	89 c3                	mov    ebx,eax
c00031d3:	83 f8 01             	cmp    eax,0x1
c00031d6:	77 0a                	ja     c00031e2 <create_chain+0x3b>
c00031d8:	bb 01 00 00 00       	mov    ebx,0x1
c00031dd:	e9 ba 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c00031e2:	83 f8 ff             	cmp    eax,0xffffffff
c00031e5:	0f 84 62 01 00 00    	je     c000334d <create_chain+0x1a6>
c00031eb:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031ee:	0f 87 a8 01 00 00    	ja     c000339c <create_chain+0x1f5>
c00031f4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00031f8:	eb 05                	jmp    c00031ff <create_chain+0x58>
c00031fa:	bf 01 00 00 00       	mov    edi,0x1
c00031ff:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003203:	75 07                	jne    c000320c <create_chain+0x65>
c0003205:	31 db                	xor    ebx,ebx
c0003207:	e9 90 01 00 00       	jmp    c000339c <create_chain+0x1f5>
c000320c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000320f:	75 74                	jne    c0003285 <create_chain+0xde>
c0003211:	b9 01 00 00 00       	mov    ecx,0x1
c0003216:	89 fa                	mov    edx,edi
c0003218:	89 f0                	mov    eax,esi
c000321a:	e8 2d f9 ff ff       	call   c0002b4c <find_bitmap>
c000321f:	89 c3                	mov    ebx,eax
c0003221:	8d 40 ff             	lea    eax,[eax-0x1]
c0003224:	83 f8 fd             	cmp    eax,0xfffffffd
c0003227:	0f 87 6f 01 00 00    	ja     c000339c <create_chain+0x1f5>
c000322d:	83 ec 0c             	sub    esp,0xc
c0003230:	b9 01 00 00 00       	mov    ecx,0x1
c0003235:	6a 01                	push   0x1
c0003237:	89 da                	mov    edx,ebx
c0003239:	89 f0                	mov    eax,esi
c000323b:	e8 bf f9 ff ff       	call   c0002bff <change_bitmap>
c0003240:	83 c4 10             	add    esp,0x10
c0003243:	83 f8 02             	cmp    eax,0x2
c0003246:	74 90                	je     c00031d8 <create_chain+0x31>
c0003248:	83 f8 01             	cmp    eax,0x1
c000324b:	0f 84 fc 00 00 00    	je     c000334d <create_chain+0x1a6>
c0003251:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003256:	75 09                	jne    c0003261 <create_chain+0xba>
c0003258:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000325c:	e9 0c 01 00 00       	jmp    c000336d <create_chain+0x1c6>
c0003261:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003265:	0f 85 e7 00 00 00    	jne    c0003352 <create_chain+0x1ab>
c000326b:	8d 57 01             	lea    edx,[edi+0x1]
c000326e:	39 da                	cmp    edx,ebx
c0003270:	0f 84 f7 00 00 00    	je     c000336d <create_chain+0x1c6>
c0003276:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003279:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000327d:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003280:	e9 cd 00 00 00       	jmp    c0003352 <create_chain+0x1ab>
c0003285:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003289:	75 41                	jne    c00032cc <create_chain+0x125>
c000328b:	8d 5f 01             	lea    ebx,[edi+0x1]
c000328e:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003291:	77 05                	ja     c0003298 <create_chain+0xf1>
c0003293:	bb 02 00 00 00       	mov    ebx,0x2
c0003298:	89 da                	mov    edx,ebx
c000329a:	89 e8                	mov    eax,ebp
c000329c:	e8 18 fc ff ff       	call   c0002eb9 <get_fat>
c00032a1:	83 f8 01             	cmp    eax,0x1
c00032a4:	0f 84 2e ff ff ff    	je     c00031d8 <create_chain+0x31>
c00032aa:	83 f8 ff             	cmp    eax,0xffffffff
c00032ad:	0f 84 9a 00 00 00    	je     c000334d <create_chain+0x1a6>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <create_chain+0x121>
c00032b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032ba:	83 f8 01             	cmp    eax,0x1
c00032bd:	76 0d                	jbe    c00032cc <create_chain+0x125>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	76 08                	jbe    c00032cc <create_chain+0x125>
c00032c4:	89 c7                	mov    edi,eax
c00032c6:	eb 04                	jmp    c00032cc <create_chain+0x125>
c00032c8:	85 db                	test   ebx,ebx
c00032ca:	75 38                	jne    c0003304 <create_chain+0x15d>
c00032cc:	89 fb                	mov    ebx,edi
c00032ce:	43                   	inc    ebx
c00032cf:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032d2:	77 0e                	ja     c00032e2 <create_chain+0x13b>
c00032d4:	83 ff 01             	cmp    edi,0x1
c00032d7:	0f 86 28 ff ff ff    	jbe    c0003205 <create_chain+0x5e>
c00032dd:	bb 02 00 00 00       	mov    ebx,0x2
c00032e2:	89 da                	mov    edx,ebx
c00032e4:	89 e8                	mov    eax,ebp
c00032e6:	e8 ce fb ff ff       	call   c0002eb9 <get_fat>
c00032eb:	85 c0                	test   eax,eax
c00032ed:	74 15                	je     c0003304 <create_chain+0x15d>
c00032ef:	83 f8 01             	cmp    eax,0x1
c00032f2:	0f 84 e0 fe ff ff    	je     c00031d8 <create_chain+0x31>
c00032f8:	40                   	inc    eax
c00032f9:	74 52                	je     c000334d <create_chain+0x1a6>
c00032fb:	39 fb                	cmp    ebx,edi
c00032fd:	75 cf                	jne    c00032ce <create_chain+0x127>
c00032ff:	e9 01 ff ff ff       	jmp    c0003205 <create_chain+0x5e>
c0003304:	83 c9 ff             	or     ecx,0xffffffff
c0003307:	89 da                	mov    edx,ebx
c0003309:	89 f0                	mov    eax,esi
c000330b:	e8 a4 f9 ff ff       	call   c0002cb4 <put_fat>
c0003310:	85 c0                	test   eax,eax
c0003312:	75 32                	jne    c0003346 <create_chain+0x19f>
c0003314:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003319:	74 11                	je     c000332c <create_chain+0x185>
c000331b:	89 d9                	mov    ecx,ebx
c000331d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003321:	89 f0                	mov    eax,esi
c0003323:	e8 8c f9 ff ff       	call   c0002cb4 <put_fat>
c0003328:	85 c0                	test   eax,eax
c000332a:	75 1a                	jne    c0003346 <create_chain+0x19f>
c000332c:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000332f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003332:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003335:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003338:	39 d0                	cmp    eax,edx
c000333a:	77 04                	ja     c0003340 <create_chain+0x199>
c000333c:	48                   	dec    eax
c000333d:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003340:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003344:	eb 56                	jmp    c000339c <create_chain+0x1f5>
c0003346:	48                   	dec    eax
c0003347:	0f 85 8b fe ff ff    	jne    c00031d8 <create_chain+0x31>
c000334d:	83 cb ff             	or     ebx,0xffffffff
c0003350:	eb 4a                	jmp    c000339c <create_chain+0x1f5>
c0003352:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003356:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003359:	41                   	inc    ecx
c000335a:	39 d9                	cmp    ecx,ebx
c000335c:	75 19                	jne    c0003377 <create_chain+0x1d0>
c000335e:	b9 02 00 00 00       	mov    ecx,0x2
c0003363:	85 d2                	test   edx,edx
c0003365:	74 03                	je     c000336a <create_chain+0x1c3>
c0003367:	8d 4a 01             	lea    ecx,[edx+0x1]
c000336a:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000336d:	85 c0                	test   eax,eax
c000336f:	0f 85 63 fe ff ff    	jne    c00031d8 <create_chain+0x31>
c0003375:	eb b5                	jmp    c000332c <create_chain+0x185>
c0003377:	85 d2                	test   edx,edx
c0003379:	75 07                	jne    c0003382 <create_chain+0x1db>
c000337b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003382:	89 d9                	mov    ecx,ebx
c0003384:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003388:	89 e8                	mov    eax,ebp
c000338a:	e8 bb fa ff ff       	call   c0002e4a <fill_last_frag>
c000338f:	85 c0                	test   eax,eax
c0003391:	75 b3                	jne    c0003346 <create_chain+0x19f>
c0003393:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000339a:	eb 90                	jmp    c000332c <create_chain+0x185>
c000339c:	83 c4 1c             	add    esp,0x1c
c000339f:	89 d8                	mov    eax,ebx
c00033a1:	5b                   	pop    ebx
c00033a2:	5e                   	pop    esi
c00033a3:	5f                   	pop    edi
c00033a4:	5d                   	pop    ebp
c00033a5:	c3                   	ret    

c00033a6 <remove_chain>:
c00033a6:	55                   	push   ebp
c00033a7:	57                   	push   edi
c00033a8:	56                   	push   esi
c00033a9:	53                   	push   ebx
c00033aa:	83 ec 1c             	sub    esp,0x1c
c00033ad:	83 fa 01             	cmp    edx,0x1
c00033b0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033b4:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033b6:	77 0a                	ja     c00033c2 <remove_chain+0x1c>
c00033b8:	b8 02 00 00 00       	mov    eax,0x2
c00033bd:	e9 24 01 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033c2:	89 d6                	mov    esi,edx
c00033c4:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033c7:	76 ef                	jbe    c00033b8 <remove_chain+0x12>
c00033c9:	89 c7                	mov    edi,eax
c00033cb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d0:	75 06                	jne    c00033d8 <remove_chain+0x32>
c00033d2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033d6:	eb 54                	jmp    c000342c <remove_chain+0x86>
c00033d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033db:	75 06                	jne    c00033e3 <remove_chain+0x3d>
c00033dd:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e1:	74 ef                	je     c00033d2 <remove_chain+0x2c>
c00033e3:	83 c9 ff             	or     ecx,0xffffffff
c00033e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ea:	89 d8                	mov    eax,ebx
c00033ec:	e8 c3 f8 ff ff       	call   c0002cb4 <put_fat>
c00033f1:	85 c0                	test   eax,eax
c00033f3:	74 dd                	je     c00033d2 <remove_chain+0x2c>
c00033f5:	e9 ec 00 00 00       	jmp    c00034e6 <remove_chain+0x140>
c00033fa:	83 f8 01             	cmp    eax,0x1
c00033fd:	74 b9                	je     c00033b8 <remove_chain+0x12>
c00033ff:	83 f8 ff             	cmp    eax,0xffffffff
c0003402:	74 6d                	je     c0003471 <remove_chain+0xcb>
c0003404:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003407:	75 6f                	jne    c0003478 <remove_chain+0xd2>
c0003409:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000340c:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000340f:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003412:	39 d0                	cmp    eax,edx
c0003414:	73 08                	jae    c000341e <remove_chain+0x78>
c0003416:	40                   	inc    eax
c0003417:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000341b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000341e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003421:	39 e9                	cmp    ecx,ebp
c0003423:	75 64                	jne    c0003489 <remove_chain+0xe3>
c0003425:	89 ee                	mov    esi,ebp
c0003427:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000342a:	76 0f                	jbe    c000343b <remove_chain+0x95>
c000342c:	89 f2                	mov    edx,esi
c000342e:	89 f8                	mov    eax,edi
c0003430:	e8 84 fa ff ff       	call   c0002eb9 <get_fat>
c0003435:	89 c5                	mov    ebp,eax
c0003437:	85 c0                	test   eax,eax
c0003439:	75 bf                	jne    c00033fa <remove_chain+0x54>
c000343b:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000343e:	0f 85 a0 00 00 00    	jne    c00034e4 <remove_chain+0x13e>
c0003444:	eb 6c                	jmp    c00034b2 <remove_chain+0x10c>
c0003446:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003449:	84 c0                	test   al,al
c000344b:	75 7d                	jne    c00034ca <remove_chain+0x124>
c000344d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003450:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003454:	0f 84 86 00 00 00    	je     c00034e0 <remove_chain+0x13a>
c000345a:	89 da                	mov    edx,ebx
c000345c:	89 f8                	mov    eax,edi
c000345e:	e8 56 fa ff ff       	call   c0002eb9 <get_fat>
c0003463:	83 f8 01             	cmp    eax,0x1
c0003466:	0f 86 4c ff ff ff    	jbe    c00033b8 <remove_chain+0x12>
c000346c:	83 f8 ff             	cmp    eax,0xffffffff
c000346f:	75 4e                	jne    c00034bf <remove_chain+0x119>
c0003471:	b8 01 00 00 00       	mov    eax,0x1
c0003476:	eb 6e                	jmp    c00034e6 <remove_chain+0x140>
c0003478:	31 c9                	xor    ecx,ecx
c000347a:	89 f2                	mov    edx,esi
c000347c:	89 d8                	mov    eax,ebx
c000347e:	e8 31 f8 ff ff       	call   c0002cb4 <put_fat>
c0003483:	85 c0                	test   eax,eax
c0003485:	74 82                	je     c0003409 <remove_chain+0x63>
c0003487:	eb 5d                	jmp    c00034e6 <remove_chain+0x140>
c0003489:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000348c:	75 1b                	jne    c00034a9 <remove_chain+0x103>
c000348e:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003492:	89 d8                	mov    eax,ebx
c0003494:	83 ec 0c             	sub    esp,0xc
c0003497:	6a 00                	push   0x0
c0003499:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000349d:	e8 5d f7 ff ff       	call   c0002bff <change_bitmap>
c00034a2:	83 c4 10             	add    esp,0x10
c00034a5:	85 c0                	test   eax,eax
c00034a7:	75 3d                	jne    c00034e6 <remove_chain+0x140>
c00034a9:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034ad:	e9 73 ff ff ff       	jmp    c0003425 <remove_chain+0x7f>
c00034b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034b7:	75 8d                	jne    c0003446 <remove_chain+0xa0>
c00034b9:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034bd:	eb 25                	jmp    c00034e4 <remove_chain+0x13e>
c00034bf:	8d 53 01             	lea    edx,[ebx+0x1]
c00034c2:	89 c3                	mov    ebx,eax
c00034c4:	39 c2                	cmp    edx,eax
c00034c6:	74 88                	je     c0003450 <remove_chain+0xaa>
c00034c8:	eb 1a                	jmp    c00034e4 <remove_chain+0x13e>
c00034ca:	3c 03                	cmp    al,0x3
c00034cc:	75 16                	jne    c00034e4 <remove_chain+0x13e>
c00034ce:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d1:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034d5:	77 0d                	ja     c00034e4 <remove_chain+0x13e>
c00034d7:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034da:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034de:	72 04                	jb     c00034e4 <remove_chain+0x13e>
c00034e0:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034e4:	31 c0                	xor    eax,eax
c00034e6:	83 c4 1c             	add    esp,0x1c
c00034e9:	5b                   	pop    ebx
c00034ea:	5e                   	pop    esi
c00034eb:	5f                   	pop    edi
c00034ec:	5d                   	pop    ebp
c00034ed:	c3                   	ret    

c00034ee <dir_clear>:
c00034ee:	55                   	push   ebp
c00034ef:	57                   	push   edi
c00034f0:	56                   	push   esi
c00034f1:	89 c6                	mov    esi,eax
c00034f3:	53                   	push   ebx
c00034f4:	83 ec 1c             	sub    esp,0x1c
c00034f7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00034fb:	e8 9d ed ff ff       	call   c000229d <sync_window>
c0003500:	85 c0                	test   eax,eax
c0003502:	0f 85 de 00 00 00    	jne    c00035e6 <dir_clear+0xf8>
c0003508:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000350c:	89 f0                	mov    eax,esi
c000350e:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003511:	e8 d6 e8 ff ff       	call   c0001dec <clst2sect>
c0003516:	b9 00 02 00 00       	mov    ecx,0x200
c000351b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000351f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003523:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003526:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003529:	89 e8                	mov    eax,ebp
c000352b:	31 d2                	xor    edx,edx
c000352d:	e8 b5 e6 ff ff       	call   c0001be7 <mem_set>
c0003532:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003536:	c1 e3 09             	shl    ebx,0x9
c0003539:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000353f:	76 1f                	jbe    c0003560 <dir_clear+0x72>
c0003541:	bb 00 80 00 00       	mov    ebx,0x8000
c0003546:	eb 18                	jmp    c0003560 <dir_clear+0x72>
c0003548:	83 ec 0c             	sub    esp,0xc
c000354b:	53                   	push   ebx
c000354c:	e8 6b 50 00 00       	call   c00085bc <ff_memalloc>
c0003551:	83 c4 10             	add    esp,0x10
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	0f 85 8f 00 00 00    	jne    c00035ed <dir_clear+0xff>
c000355e:	d1 eb                	shr    ebx,1
c0003560:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003566:	77 e0                	ja     c0003548 <dir_clear+0x5a>
c0003568:	31 db                	xor    ebx,ebx
c000356a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000356e:	39 d8                	cmp    eax,ebx
c0003570:	76 66                	jbe    c00035d8 <dir_clear+0xea>
c0003572:	83 ec 0c             	sub    esp,0xc
c0003575:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003579:	6a 01                	push   0x1
c000357b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000357f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003583:	55                   	push   ebp
c0003584:	50                   	push   eax
c0003585:	e8 94 e5 ff ff       	call   c0001b1e <disk_write>
c000358a:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000358f:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003594:	83 c4 20             	add    esp,0x20
c0003597:	85 c0                	test   eax,eax
c0003599:	75 3d                	jne    c00035d8 <dir_clear+0xea>
c000359b:	43                   	inc    ebx
c000359c:	eb cc                	jmp    c000356a <dir_clear+0x7c>
c000359e:	83 ec 0c             	sub    esp,0xc
c00035a1:	31 d2                	xor    edx,edx
c00035a3:	55                   	push   ebp
c00035a4:	89 d8                	mov    eax,ebx
c00035a6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035aa:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035ae:	52                   	push   edx
c00035af:	50                   	push   eax
c00035b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035b4:	57                   	push   edi
c00035b5:	50                   	push   eax
c00035b6:	e8 63 e5 ff ff       	call   c0001b1e <disk_write>
c00035bb:	83 c4 20             	add    esp,0x20
c00035be:	85 c0                	test   eax,eax
c00035c0:	75 0a                	jne    c00035cc <dir_clear+0xde>
c00035c2:	01 eb                	add    ebx,ebp
c00035c4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035c8:	39 d8                	cmp    eax,ebx
c00035ca:	77 d2                	ja     c000359e <dir_clear+0xb0>
c00035cc:	83 ec 0c             	sub    esp,0xc
c00035cf:	57                   	push   edi
c00035d0:	e8 ff 4f 00 00       	call   c00085d4 <ff_memfree>
c00035d5:	83 c4 10             	add    esp,0x10
c00035d8:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035dc:	39 d8                	cmp    eax,ebx
c00035de:	0f 95 c0             	setne  al
c00035e1:	0f b6 c0             	movzx  eax,al
c00035e4:	eb 19                	jmp    c00035ff <dir_clear+0x111>
c00035e6:	b8 01 00 00 00       	mov    eax,0x1
c00035eb:	eb 12                	jmp    c00035ff <dir_clear+0x111>
c00035ed:	89 d9                	mov    ecx,ebx
c00035ef:	31 d2                	xor    edx,edx
c00035f1:	c1 eb 09             	shr    ebx,0x9
c00035f4:	e8 ee e5 ff ff       	call   c0001be7 <mem_set>
c00035f9:	89 dd                	mov    ebp,ebx
c00035fb:	31 db                	xor    ebx,ebx
c00035fd:	eb c5                	jmp    c00035c4 <dir_clear+0xd6>
c00035ff:	83 c4 1c             	add    esp,0x1c
c0003602:	5b                   	pop    ebx
c0003603:	5e                   	pop    esi
c0003604:	5f                   	pop    edi
c0003605:	5d                   	pop    ebp
c0003606:	c3                   	ret    

c0003607 <dir_next>:
c0003607:	55                   	push   ebp
c0003608:	57                   	push   edi
c0003609:	56                   	push   esi
c000360a:	53                   	push   ebx
c000360b:	89 c3                	mov    ebx,eax
c000360d:	83 ec 1c             	sub    esp,0x1c
c0003610:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003616:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003619:	8d 78 20             	lea    edi,[eax+0x20]
c000361c:	31 c0                	xor    eax,eax
c000361e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003622:	0f 94 c0             	sete   al
c0003625:	48                   	dec    eax
c0003626:	25 00 00 20 f0       	and    eax,0xf0200000
c000362b:	05 00 00 00 10       	add    eax,0x10000000
c0003630:	39 f8                	cmp    eax,edi
c0003632:	77 0e                	ja     c0003642 <dir_next+0x3b>
c0003634:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000363b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003642:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003645:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003648:	b8 04 00 00 00       	mov    eax,0x4
c000364d:	89 ce                	mov    esi,ecx
c000364f:	09 d6                	or     esi,edx
c0003651:	0f 84 da 00 00 00    	je     c0003731 <dir_next+0x12a>
c0003657:	89 f8                	mov    eax,edi
c0003659:	25 ff 01 00 00       	and    eax,0x1ff
c000365e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003662:	0f 85 b9 00 00 00    	jne    c0003721 <dir_next+0x11a>
c0003668:	83 c2 01             	add    edx,0x1
c000366b:	83 d1 00             	adc    ecx,0x0
c000366e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003671:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003674:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003677:	85 d2                	test   edx,edx
c0003679:	75 29                	jne    c00036a4 <dir_next+0x9d>
c000367b:	89 fa                	mov    edx,edi
c000367d:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003681:	c1 ea 05             	shr    edx,0x5
c0003684:	39 c2                	cmp    edx,eax
c0003686:	0f 82 95 00 00 00    	jb     c0003721 <dir_next+0x11a>
c000368c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003693:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000369a:	b8 04 00 00 00       	mov    eax,0x4
c000369f:	e9 8d 00 00 00       	jmp    c0003731 <dir_next+0x12a>
c00036a4:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036a8:	89 f9                	mov    ecx,edi
c00036aa:	48                   	dec    eax
c00036ab:	c1 e9 09             	shr    ecx,0x9
c00036ae:	85 c8                	test   eax,ecx
c00036b0:	75 6f                	jne    c0003721 <dir_next+0x11a>
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	e8 00 f8 ff ff       	call   c0002eb9 <get_fat>
c00036b9:	89 c6                	mov    esi,eax
c00036bb:	83 f8 01             	cmp    eax,0x1
c00036be:	77 07                	ja     c00036c7 <dir_next+0xc0>
c00036c0:	b8 02 00 00 00       	mov    eax,0x2
c00036c5:	eb 6a                	jmp    c0003731 <dir_next+0x12a>
c00036c7:	83 f8 ff             	cmp    eax,0xffffffff
c00036ca:	75 07                	jne    c00036d3 <dir_next+0xcc>
c00036cc:	b8 01 00 00 00       	mov    eax,0x1
c00036d1:	eb 5e                	jmp    c0003731 <dir_next+0x12a>
c00036d3:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036d6:	77 37                	ja     c000370f <dir_next+0x108>
c00036d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036dd:	74 ad                	je     c000368c <dir_next+0x85>
c00036df:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036e2:	89 d8                	mov    eax,ebx
c00036e4:	e8 be fa ff ff       	call   c00031a7 <create_chain>
c00036e9:	89 c6                	mov    esi,eax
c00036eb:	b8 07 00 00 00       	mov    eax,0x7
c00036f0:	85 f6                	test   esi,esi
c00036f2:	74 3d                	je     c0003731 <dir_next+0x12a>
c00036f4:	83 fe 01             	cmp    esi,0x1
c00036f7:	74 c7                	je     c00036c0 <dir_next+0xb9>
c00036f9:	83 fe ff             	cmp    esi,0xffffffff
c00036fc:	74 ce                	je     c00036cc <dir_next+0xc5>
c00036fe:	89 f2                	mov    edx,esi
c0003700:	89 e8                	mov    eax,ebp
c0003702:	e8 e7 fd ff ff       	call   c00034ee <dir_clear>
c0003707:	85 c0                	test   eax,eax
c0003709:	75 c1                	jne    c00036cc <dir_next+0xc5>
c000370b:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000370f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003712:	89 f2                	mov    edx,esi
c0003714:	89 e8                	mov    eax,ebp
c0003716:	e8 d1 e6 ff ff       	call   c0001dec <clst2sect>
c000371b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000371e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003725:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003728:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000372c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000372f:	31 c0                	xor    eax,eax
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <load_xdir>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	89 c6                	mov    esi,eax
c000373e:	53                   	push   ebx
c000373f:	83 ec 1c             	sub    esp,0x1c
c0003742:	8b 00                	mov    eax,DWORD PTR [eax]
c0003744:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003747:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000374d:	e8 df eb ff ff       	call   c0002331 <move_window>
c0003752:	89 c3                	mov    ebx,eax
c0003754:	85 c0                	test   eax,eax
c0003756:	0f 85 0c 01 00 00    	jne    c0003868 <load_xdir+0x12f>
c000375c:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000375f:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003762:	0f 85 fb 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c0003768:	89 f8                	mov    eax,edi
c000376a:	b9 20 00 00 00       	mov    ecx,0x20
c000376f:	e8 5e e4 ff ff       	call   c0001bd2 <mem_cpy>
c0003774:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003778:	40                   	inc    eax
c0003779:	c1 e0 05             	shl    eax,0x5
c000377c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003780:	83 e8 60             	sub    eax,0x60
c0003783:	3d 00 02 00 00       	cmp    eax,0x200
c0003788:	0f 87 d5 00 00 00    	ja     c0003863 <load_xdir+0x12a>
c000378e:	31 d2                	xor    edx,edx
c0003790:	89 f0                	mov    eax,esi
c0003792:	e8 70 fe ff ff       	call   c0003607 <dir_next>
c0003797:	89 c3                	mov    ebx,eax
c0003799:	83 f8 04             	cmp    eax,0x4
c000379c:	0f 84 c1 00 00 00    	je     c0003863 <load_xdir+0x12a>
c00037a2:	85 c0                	test   eax,eax
c00037a4:	0f 85 be 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037aa:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037ad:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00037b2:	e8 7a eb ff ff       	call   c0002331 <move_window>
c00037b7:	89 c3                	mov    ebx,eax
c00037b9:	85 c0                	test   eax,eax
c00037bb:	0f 85 a7 00 00 00    	jne    c0003868 <load_xdir+0x12f>
c00037c1:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037c4:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037c7:	0f 85 96 00 00 00    	jne    c0003863 <load_xdir+0x12a>
c00037cd:	8d 47 20             	lea    eax,[edi+0x20]
c00037d0:	b9 20 00 00 00       	mov    ecx,0x20
c00037d5:	e8 f8 e3 ff ff       	call   c0001bd2 <mem_cpy>
c00037da:	31 d2                	xor    edx,edx
c00037dc:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e0:	b9 0f 00 00 00       	mov    ecx,0xf
c00037e5:	83 c0 2c             	add    eax,0x2c
c00037e8:	f7 f1                	div    ecx
c00037ea:	c1 e0 05             	shl    eax,0x5
c00037ed:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f1:	77 70                	ja     c0003863 <load_xdir+0x12a>
c00037f3:	bd 40 00 00 00       	mov    ebp,0x40
c00037f8:	31 d2                	xor    edx,edx
c00037fa:	89 f0                	mov    eax,esi
c00037fc:	e8 06 fe ff ff       	call   c0003607 <dir_next>
c0003801:	89 c3                	mov    ebx,eax
c0003803:	83 f8 04             	cmp    eax,0x4
c0003806:	74 5b                	je     c0003863 <load_xdir+0x12a>
c0003808:	85 c0                	test   eax,eax
c000380a:	75 5c                	jne    c0003868 <load_xdir+0x12f>
c000380c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000380f:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003812:	8b 06                	mov    eax,DWORD PTR [esi]
c0003814:	e8 18 eb ff ff       	call   c0002331 <move_window>
c0003819:	89 c3                	mov    ebx,eax
c000381b:	85 c0                	test   eax,eax
c000381d:	75 49                	jne    c0003868 <load_xdir+0x12f>
c000381f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003822:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003825:	75 3c                	jne    c0003863 <load_xdir+0x12a>
c0003827:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000382d:	77 0d                	ja     c000383c <load_xdir+0x103>
c000382f:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003832:	b9 20 00 00 00       	mov    ecx,0x20
c0003837:	e8 96 e3 ff ff       	call   c0001bd2 <mem_cpy>
c000383c:	83 c5 20             	add    ebp,0x20
c000383f:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003843:	77 b3                	ja     c00037f8 <load_xdir+0xbf>
c0003845:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000384b:	77 1b                	ja     c0003868 <load_xdir+0x12f>
c000384d:	89 f8                	mov    eax,edi
c000384f:	e8 cd e7 ff ff       	call   c0002021 <xdir_sum>
c0003854:	89 c1                	mov    ecx,eax
c0003856:	8d 47 02             	lea    eax,[edi+0x2]
c0003859:	e8 f5 e2 ff ff       	call   c0001b53 <ld_word>
c000385e:	66 39 c1             	cmp    cx,ax
c0003861:	74 05                	je     c0003868 <load_xdir+0x12f>
c0003863:	bb 02 00 00 00       	mov    ebx,0x2
c0003868:	83 c4 1c             	add    esp,0x1c
c000386b:	89 d8                	mov    eax,ebx
c000386d:	5b                   	pop    ebx
c000386e:	5e                   	pop    esi
c000386f:	5f                   	pop    edi
c0003870:	5d                   	pop    ebp
c0003871:	c3                   	ret    

c0003872 <load_obj_xdir>:
c0003872:	53                   	push   ebx
c0003873:	89 c3                	mov    ebx,eax
c0003875:	83 ec 08             	sub    esp,0x8
c0003878:	8b 02                	mov    eax,DWORD PTR [edx]
c000387a:	89 03                	mov    DWORD PTR [ebx],eax
c000387c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000387f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003882:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003885:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003888:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003892:	30 c0                	xor    al,al
c0003894:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000389b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000389e:	89 d8                	mov    eax,ebx
c00038a0:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038a3:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038a6:	e8 04 f8 ff ff       	call   c00030af <dir_sdi>
c00038ab:	85 c0                	test   eax,eax
c00038ad:	75 0b                	jne    c00038ba <load_obj_xdir+0x48>
c00038af:	89 d8                	mov    eax,ebx
c00038b1:	83 c4 08             	add    esp,0x8
c00038b4:	5b                   	pop    ebx
c00038b5:	e9 7f fe ff ff       	jmp    c0003739 <load_xdir>
c00038ba:	83 c4 08             	add    esp,0x8
c00038bd:	5b                   	pop    ebx
c00038be:	c3                   	ret    

c00038bf <dir_read>:
c00038bf:	55                   	push   ebp
c00038c0:	bd 04 00 00 00       	mov    ebp,0x4
c00038c5:	57                   	push   edi
c00038c6:	56                   	push   esi
c00038c7:	be ff ff ff ff       	mov    esi,0xffffffff
c00038cc:	53                   	push   ebx
c00038cd:	89 c3                	mov    ebx,eax
c00038cf:	83 ec 1c             	sub    esp,0x1c
c00038d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038d6:	8b 38                	mov    edi,DWORD PTR [eax]
c00038d8:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038e3:	89 c8                	mov    eax,ecx
c00038e5:	09 d0                	or     eax,edx
c00038e7:	0f 84 25 01 00 00    	je     c0003a12 <dir_read+0x153>
c00038ed:	89 f8                	mov    eax,edi
c00038ef:	e8 3d ea ff ff       	call   c0002331 <move_window>
c00038f4:	89 c5                	mov    ebp,eax
c00038f6:	85 c0                	test   eax,eax
c00038f8:	0f 85 23 01 00 00    	jne    c0003a21 <dir_read+0x162>
c00038fe:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003901:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003903:	84 c9                	test   cl,cl
c0003905:	0f 84 11 01 00 00    	je     c0003a1c <dir_read+0x15d>
c000390b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000390e:	75 48                	jne    c0003958 <dir_read+0x99>
c0003910:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003915:	74 10                	je     c0003927 <dir_read+0x68>
c0003917:	80 f9 83             	cmp    cl,0x83
c000391a:	0f 85 dd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003920:	31 ed                	xor    ebp,ebp
c0003922:	e9 08 01 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003927:	80 f9 85             	cmp    cl,0x85
c000392a:	0f 85 cd 00 00 00    	jne    c00039fd <dir_read+0x13e>
c0003930:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003933:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003936:	89 d8                	mov    eax,ebx
c0003938:	e8 fc fd ff ff       	call   c0003739 <load_xdir>
c000393d:	89 c5                	mov    ebp,eax
c000393f:	85 c0                	test   eax,eax
c0003941:	0f 85 da 00 00 00    	jne    c0003a21 <dir_read+0x162>
c0003947:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000394a:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000394d:	83 e0 3f             	and    eax,0x3f
c0003950:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003953:	e9 d7 00 00 00       	jmp    c0003a2f <dir_read+0x170>
c0003958:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000395b:	83 e0 3f             	and    eax,0x3f
c000395e:	80 f9 2e             	cmp    cl,0x2e
c0003961:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003965:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003968:	0f 84 8a 00 00 00    	je     c00039f8 <dir_read+0x139>
c000396e:	80 f9 e5             	cmp    cl,0xe5
c0003971:	0f 84 81 00 00 00    	je     c00039f8 <dir_read+0x139>
c0003977:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000397b:	83 e0 1f             	and    eax,0x1f
c000397e:	83 f8 08             	cmp    eax,0x8
c0003981:	0f 94 c0             	sete   al
c0003984:	0f b6 c0             	movzx  eax,al
c0003987:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000398b:	75 6b                	jne    c00039f8 <dir_read+0x139>
c000398d:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003992:	75 44                	jne    c00039d8 <dir_read+0x119>
c0003994:	f6 c1 40             	test   cl,0x40
c0003997:	74 12                	je     c00039ab <dir_read+0xec>
c0003999:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000399c:	83 e1 bf             	and    ecx,0xffffffbf
c000399f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039a6:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039a9:	eb 06                	jmp    c00039b1 <dir_read+0xf2>
c00039ab:	89 f0                	mov    eax,esi
c00039ad:	38 c8                	cmp    al,cl
c00039af:	75 47                	jne    c00039f8 <dir_read+0x139>
c00039b1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039ba:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039bd:	75 3e                	jne    c00039fd <dir_read+0x13e>
c00039bf:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039c3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039c6:	e8 8a e4 ff ff       	call   c0001e55 <pick_lfn>
c00039cb:	85 c0                	test   eax,eax
c00039cd:	74 2e                	je     c00039fd <dir_read+0x13e>
c00039cf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039d3:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039d6:	eb 25                	jmp    c00039fd <dir_read+0x13e>
c00039d8:	89 f0                	mov    eax,esi
c00039da:	84 c0                	test   al,al
c00039dc:	75 11                	jne    c00039ef <dir_read+0x130>
c00039de:	89 d0                	mov    eax,edx
c00039e0:	e8 2a e6 ff ff       	call   c000200f <sum_sfn>
c00039e5:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039e9:	0f 84 31 ff ff ff    	je     c0003920 <dir_read+0x61>
c00039ef:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039f6:	eb 37                	jmp    c0003a2f <dir_read+0x170>
c00039f8:	be ff ff ff ff       	mov    esi,0xffffffff
c00039fd:	31 d2                	xor    edx,edx
c00039ff:	89 d8                	mov    eax,ebx
c0003a01:	e8 01 fc ff ff       	call   c0003607 <dir_next>
c0003a06:	89 c5                	mov    ebp,eax
c0003a08:	85 c0                	test   eax,eax
c0003a0a:	0f 84 cd fe ff ff    	je     c00038dd <dir_read+0x1e>
c0003a10:	eb 0f                	jmp    c0003a21 <dir_read+0x162>
c0003a12:	85 ed                	test   ebp,ebp
c0003a14:	0f 84 06 ff ff ff    	je     c0003920 <dir_read+0x61>
c0003a1a:	eb 05                	jmp    c0003a21 <dir_read+0x162>
c0003a1c:	bd 04 00 00 00       	mov    ebp,0x4
c0003a21:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a28:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a2f:	83 c4 1c             	add    esp,0x1c
c0003a32:	89 e8                	mov    eax,ebp
c0003a34:	5b                   	pop    ebx
c0003a35:	5e                   	pop    esi
c0003a36:	5f                   	pop    edi
c0003a37:	5d                   	pop    ebp
c0003a38:	c3                   	ret    

c0003a39 <dir_alloc>:
c0003a39:	55                   	push   ebp
c0003a3a:	89 d5                	mov    ebp,edx
c0003a3c:	57                   	push   edi
c0003a3d:	31 d2                	xor    edx,edx
c0003a3f:	56                   	push   esi
c0003a40:	53                   	push   ebx
c0003a41:	89 c3                	mov    ebx,eax
c0003a43:	83 ec 0c             	sub    esp,0xc
c0003a46:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a48:	e8 62 f6 ff ff       	call   c00030af <dir_sdi>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 4e                	jne    c0003a9f <dir_alloc+0x66>
c0003a51:	31 f6                	xor    esi,esi
c0003a53:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a56:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a59:	89 f8                	mov    eax,edi
c0003a5b:	e8 d1 e8 ff ff       	call   c0002331 <move_window>
c0003a60:	85 c0                	test   eax,eax
c0003a62:	75 3b                	jne    c0003a9f <dir_alloc+0x66>
c0003a64:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a67:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a6a:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a6c:	75 07                	jne    c0003a75 <dir_alloc+0x3c>
c0003a6e:	f7 d2                	not    edx
c0003a70:	c0 ea 07             	shr    dl,0x7
c0003a73:	eb 0d                	jmp    c0003a82 <dir_alloc+0x49>
c0003a75:	84 d2                	test   dl,dl
c0003a77:	0f 94 c1             	sete   cl
c0003a7a:	80 fa e5             	cmp    dl,0xe5
c0003a7d:	0f 94 c2             	sete   dl
c0003a80:	09 ca                	or     edx,ecx
c0003a82:	84 d2                	test   dl,dl
c0003a84:	74 07                	je     c0003a8d <dir_alloc+0x54>
c0003a86:	46                   	inc    esi
c0003a87:	39 ee                	cmp    esi,ebp
c0003a89:	75 04                	jne    c0003a8f <dir_alloc+0x56>
c0003a8b:	eb 1c                	jmp    c0003aa9 <dir_alloc+0x70>
c0003a8d:	31 f6                	xor    esi,esi
c0003a8f:	ba 01 00 00 00       	mov    edx,0x1
c0003a94:	89 d8                	mov    eax,ebx
c0003a96:	e8 6c fb ff ff       	call   c0003607 <dir_next>
c0003a9b:	85 c0                	test   eax,eax
c0003a9d:	74 b4                	je     c0003a53 <dir_alloc+0x1a>
c0003a9f:	83 f8 04             	cmp    eax,0x4
c0003aa2:	75 05                	jne    c0003aa9 <dir_alloc+0x70>
c0003aa4:	b8 07 00 00 00       	mov    eax,0x7
c0003aa9:	83 c4 0c             	add    esp,0xc
c0003aac:	5b                   	pop    ebx
c0003aad:	5e                   	pop    esi
c0003aae:	5f                   	pop    edi
c0003aaf:	5d                   	pop    ebp
c0003ab0:	c3                   	ret    

c0003ab1 <store_xdir>:
c0003ab1:	55                   	push   ebp
c0003ab2:	57                   	push   edi
c0003ab3:	89 c7                	mov    edi,eax
c0003ab5:	56                   	push   esi
c0003ab6:	53                   	push   ebx
c0003ab7:	83 ec 0c             	sub    esp,0xc
c0003aba:	8b 00                	mov    eax,DWORD PTR [eax]
c0003abc:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003abf:	89 e8                	mov    eax,ebp
c0003ac1:	e8 5b e5 ff ff       	call   c0002021 <xdir_sum>
c0003ac6:	0f b7 d0             	movzx  edx,ax
c0003ac9:	8d 45 02             	lea    eax,[ebp+0x2]
c0003acc:	e8 f4 e0 ff ff       	call   c0001bc5 <st_word>
c0003ad1:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ad5:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ad8:	89 f8                	mov    eax,edi
c0003ada:	e8 d0 f5 ff ff       	call   c00030af <dir_sdi>
c0003adf:	89 c6                	mov    esi,eax
c0003ae1:	85 f6                	test   esi,esi
c0003ae3:	75 3d                	jne    c0003b22 <store_xdir+0x71>
c0003ae5:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003ae8:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003aeb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003aed:	e8 3f e8 ff ff       	call   c0002331 <move_window>
c0003af2:	89 c6                	mov    esi,eax
c0003af4:	85 c0                	test   eax,eax
c0003af6:	75 2a                	jne    c0003b22 <store_xdir+0x71>
c0003af8:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003afb:	b9 20 00 00 00       	mov    ecx,0x20
c0003b00:	89 ea                	mov    edx,ebp
c0003b02:	e8 cb e0 ff ff       	call   c0001bd2 <mem_cpy>
c0003b07:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b09:	85 db                	test   ebx,ebx
c0003b0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b0f:	74 11                	je     c0003b22 <store_xdir+0x71>
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	89 f8                	mov    eax,edi
c0003b15:	83 c5 20             	add    ebp,0x20
c0003b18:	e8 ea fa ff ff       	call   c0003607 <dir_next>
c0003b1d:	4b                   	dec    ebx
c0003b1e:	89 c6                	mov    esi,eax
c0003b20:	eb bf                	jmp    c0003ae1 <store_xdir+0x30>
c0003b22:	89 f0                	mov    eax,esi
c0003b24:	83 fe 02             	cmp    esi,0x2
c0003b27:	76 05                	jbe    c0003b2e <store_xdir+0x7d>
c0003b29:	b8 02 00 00 00       	mov    eax,0x2
c0003b2e:	83 c4 0c             	add    esp,0xc
c0003b31:	5b                   	pop    ebx
c0003b32:	5e                   	pop    esi
c0003b33:	5f                   	pop    edi
c0003b34:	5d                   	pop    ebp
c0003b35:	c3                   	ret    

c0003b36 <dir_remove>:
c0003b36:	57                   	push   edi
c0003b37:	56                   	push   esi
c0003b38:	53                   	push   ebx
c0003b39:	89 c3                	mov    ebx,eax
c0003b3b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b3e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b40:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b43:	83 fa ff             	cmp    edx,0xffffffff
c0003b46:	74 09                	je     c0003b51 <dir_remove+0x1b>
c0003b48:	e8 62 f5 ff ff       	call   c00030af <dir_sdi>
c0003b4d:	85 c0                	test   eax,eax
c0003b4f:	75 41                	jne    c0003b92 <dir_remove+0x5c>
c0003b51:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b54:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b57:	89 f0                	mov    eax,esi
c0003b59:	e8 d3 e7 ff ff       	call   c0002331 <move_window>
c0003b5e:	85 c0                	test   eax,eax
c0003b60:	75 26                	jne    c0003b88 <dir_remove+0x52>
c0003b62:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b65:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b68:	75 05                	jne    c0003b6f <dir_remove+0x39>
c0003b6a:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b6d:	eb 03                	jmp    c0003b72 <dir_remove+0x3c>
c0003b6f:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b72:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b76:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b79:	73 17                	jae    c0003b92 <dir_remove+0x5c>
c0003b7b:	31 d2                	xor    edx,edx
c0003b7d:	89 d8                	mov    eax,ebx
c0003b7f:	e8 83 fa ff ff       	call   c0003607 <dir_next>
c0003b84:	85 c0                	test   eax,eax
c0003b86:	74 c9                	je     c0003b51 <dir_remove+0x1b>
c0003b88:	83 f8 04             	cmp    eax,0x4
c0003b8b:	75 05                	jne    c0003b92 <dir_remove+0x5c>
c0003b8d:	b8 02 00 00 00       	mov    eax,0x2
c0003b92:	5b                   	pop    ebx
c0003b93:	5e                   	pop    esi
c0003b94:	5f                   	pop    edi
c0003b95:	c3                   	ret    

c0003b96 <create_name>:
c0003b96:	55                   	push   ebp
c0003b97:	89 d5                	mov    ebp,edx
c0003b99:	57                   	push   edi
c0003b9a:	89 c7                	mov    edi,eax
c0003b9c:	56                   	push   esi
c0003b9d:	31 f6                	xor    esi,esi
c0003b9f:	53                   	push   ebx
c0003ba0:	83 ec 3c             	sub    esp,0x3c
c0003ba3:	8b 02                	mov    eax,DWORD PTR [edx]
c0003ba5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ba9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bb2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bb6:	e8 72 e0 ff ff       	call   c0001c2d <tchar2uni>
c0003bbb:	89 c3                	mov    ebx,eax
c0003bbd:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc0:	75 0a                	jne    c0003bcc <create_name+0x36>
c0003bc2:	b8 06 00 00 00       	mov    eax,0x6
c0003bc7:	e9 9e 02 00 00       	jmp    c0003e6a <create_name+0x2d4>
c0003bcc:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd1:	76 0c                	jbe    c0003bdf <create_name+0x49>
c0003bd3:	c1 e8 10             	shr    eax,0x10
c0003bd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003bda:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003bde:	46                   	inc    esi
c0003bdf:	66 83 fb 1f          	cmp    bx,0x1f
c0003be3:	76 4f                	jbe    c0003c34 <create_name+0x9e>
c0003be5:	66 83 fb 5c          	cmp    bx,0x5c
c0003be9:	74 35                	je     c0003c20 <create_name+0x8a>
c0003beb:	66 83 fb 2f          	cmp    bx,0x2f
c0003bef:	74 2f                	je     c0003c20 <create_name+0x8a>
c0003bf1:	66 83 fb 7f          	cmp    bx,0x7f
c0003bf5:	77 11                	ja     c0003c08 <create_name+0x72>
c0003bf7:	0f b7 d3             	movzx  edx,bx
c0003bfa:	b8 12 2d 02 c0       	mov    eax,0xc0022d12
c0003bff:	e8 11 e0 ff ff       	call   c0001c15 <chk_chr>
c0003c04:	85 c0                	test   eax,eax
c0003c06:	75 ba                	jne    c0003bc2 <create_name+0x2c>
c0003c08:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c0e:	77 b2                	ja     c0003bc2 <create_name+0x2c>
c0003c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c14:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c18:	46                   	inc    esi
c0003c19:	eb 97                	jmp    c0003bb2 <create_name+0x1c>
c0003c1b:	40                   	inc    eax
c0003c1c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c24:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c26:	80 fa 2f             	cmp    dl,0x2f
c0003c29:	74 f0                	je     c0003c1b <create_name+0x85>
c0003c2b:	80 fa 5c             	cmp    dl,0x5c
c0003c2e:	74 eb                	je     c0003c1b <create_name+0x85>
c0003c30:	31 db                	xor    ebx,ebx
c0003c32:	eb 02                	jmp    c0003c36 <create_name+0xa0>
c0003c34:	b3 04                	mov    bl,0x4
c0003c36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c3a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c3d:	85 f6                	test   esi,esi
c0003c3f:	74 18                	je     c0003c59 <create_name+0xc3>
c0003c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c45:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c4a:	66 83 f8 20          	cmp    ax,0x20
c0003c4e:	74 06                	je     c0003c56 <create_name+0xc0>
c0003c50:	66 83 f8 2e          	cmp    ax,0x2e
c0003c54:	75 03                	jne    c0003c59 <create_name+0xc3>
c0003c56:	4e                   	dec    esi
c0003c57:	eb e4                	jmp    c0003c3d <create_name+0xa7>
c0003c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c5d:	31 ed                	xor    ebp,ebp
c0003c5f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c65:	85 f6                	test   esi,esi
c0003c67:	0f 84 55 ff ff ff    	je     c0003bc2 <create_name+0x2c>
c0003c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c71:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c74:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c78:	66 83 f8 20          	cmp    ax,0x20
c0003c7c:	75 04                	jne    c0003c82 <create_name+0xec>
c0003c7e:	89 d5                	mov    ebp,edx
c0003c80:	eb eb                	jmp    c0003c6d <create_name+0xd7>
c0003c82:	85 ed                	test   ebp,ebp
c0003c84:	75 06                	jne    c0003c8c <create_name+0xf6>
c0003c86:	66 83 f8 2e          	cmp    ax,0x2e
c0003c8a:	75 08                	jne    c0003c94 <create_name+0xfe>
c0003c8c:	83 cb 03             	or     ebx,0x3
c0003c8f:	eb 03                	jmp    c0003c94 <create_name+0xfe>
c0003c91:	4e                   	dec    esi
c0003c92:	74 0c                	je     c0003ca0 <create_name+0x10a>
c0003c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c98:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003c9e:	75 f1                	jne    c0003c91 <create_name+0xfb>
c0003ca0:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ca5:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ca8:	ba 20 00 00 00       	mov    edx,0x20
c0003cad:	e8 35 df ff ff       	call   c0001be7 <mem_set>
c0003cb2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cba:	31 c9                	xor    ecx,ecx
c0003cbc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc1:	8d 45 01             	lea    eax,[ebp+0x1]
c0003cc4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ccc:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd0:	66 85 ed             	test   bp,bp
c0003cd3:	0f 84 30 01 00 00    	je     c0003e09 <create_name+0x273>
c0003cd9:	66 83 fd 20          	cmp    bp,0x20
c0003cdd:	74 10                	je     c0003cef <create_name+0x159>
c0003cdf:	66 83 fd 2e          	cmp    bp,0x2e
c0003ce3:	75 13                	jne    c0003cf8 <create_name+0x162>
c0003ce5:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ce9:	0f 84 6b 01 00 00    	je     c0003e5a <create_name+0x2c4>
c0003cef:	83 cb 03             	or     ebx,0x3
c0003cf2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cf6:	eb c9                	jmp    c0003cc1 <create_name+0x12b>
c0003cf8:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003cfc:	73 0b                	jae    c0003d09 <create_name+0x173>
c0003cfe:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d02:	75 47                	jne    c0003d4b <create_name+0x1b5>
c0003d04:	e9 51 01 00 00       	jmp    c0003e5a <create_name+0x2c4>
c0003d09:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d0e:	75 10                	jne    c0003d20 <create_name+0x18a>
c0003d10:	83 cb 03             	or     ebx,0x3
c0003d13:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d1b:	e9 e9 00 00 00       	jmp    c0003e09 <create_name+0x273>
c0003d20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d24:	74 0d                	je     c0003d33 <create_name+0x19d>
c0003d26:	83 cb 03             	or     ebx,0x3
c0003d29:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2d:	0f 87 d6 00 00 00    	ja     c0003e09 <create_name+0x273>
c0003d33:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d38:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d3c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d44:	b9 08 00 00 00       	mov    ecx,0x8
c0003d49:	eb a7                	jmp    c0003cf2 <create_name+0x15c>
c0003d4b:	66 83 fd 7f          	cmp    bp,0x7f
c0003d4f:	76 68                	jbe    c0003db9 <create_name+0x223>
c0003d51:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d55:	88 da                	mov    dl,bl
c0003d57:	83 ca 02             	or     edx,0x2
c0003d5a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d5e:	50                   	push   eax
c0003d5f:	50                   	push   eax
c0003d60:	68 b5 01 00 00       	push   0x1b5
c0003d65:	55                   	push   ebp
c0003d66:	e8 81 48 00 00       	call   c00085ec <ff_uni2oem>
c0003d6b:	83 c4 10             	add    esp,0x10
c0003d6e:	89 c5                	mov    ebp,eax
c0003d70:	a8 80                	test   al,0x80
c0003d72:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d76:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d7a:	74 0c                	je     c0003d88 <create_name+0x1f2>
c0003d7c:	83 e5 7f             	and    ebp,0x7f
c0003d7f:	0f b6 ad 60 2c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdd3a0]
c0003d86:	eb 2a                	jmp    c0003db2 <create_name+0x21c>
c0003d88:	66 3d ff 00          	cmp    ax,0xff
c0003d8c:	76 24                	jbe    c0003db2 <create_name+0x21c>
c0003d8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d92:	48                   	dec    eax
c0003d93:	39 c8                	cmp    eax,ecx
c0003d95:	77 0c                	ja     c0003da3 <create_name+0x20d>
c0003d97:	83 cb 03             	or     ebx,0x3
c0003d9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003d9e:	e9 4f ff ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003da3:	89 e8                	mov    eax,ebp
c0003da5:	88 d3                	mov    bl,dl
c0003da7:	66 c1 e8 08          	shr    ax,0x8
c0003dab:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003daf:	41                   	inc    ecx
c0003db0:	eb 4b                	jmp    c0003dfd <create_name+0x267>
c0003db2:	88 d3                	mov    bl,dl
c0003db4:	66 85 ed             	test   bp,bp
c0003db7:	74 19                	je     c0003dd2 <create_name+0x23c>
c0003db9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dbd:	0f b7 d5             	movzx  edx,bp
c0003dc0:	b8 1b 2d 02 c0       	mov    eax,0xc0022d1b
c0003dc5:	e8 4b de ff ff       	call   c0001c15 <chk_chr>
c0003dca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dce:	85 c0                	test   eax,eax
c0003dd0:	74 0a                	je     c0003ddc <create_name+0x246>
c0003dd2:	83 cb 03             	or     ebx,0x3
c0003dd5:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003dda:	eb 21                	jmp    c0003dfd <create_name+0x267>
c0003ddc:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ddf:	66 83 f8 19          	cmp    ax,0x19
c0003de3:	77 07                	ja     c0003dec <create_name+0x256>
c0003de5:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003dea:	eb 11                	jmp    c0003dfd <create_name+0x267>
c0003dec:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003def:	66 83 f8 19          	cmp    ax,0x19
c0003df3:	77 08                	ja     c0003dfd <create_name+0x267>
c0003df5:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003dfa:	83 ed 20             	sub    ebp,0x20
c0003dfd:	89 e8                	mov    eax,ebp
c0003dff:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e03:	41                   	inc    ecx
c0003e04:	e9 e9 fe ff ff       	jmp    c0003cf2 <create_name+0x15c>
c0003e09:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e0d:	75 04                	jne    c0003e13 <create_name+0x27d>
c0003e0f:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e13:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e18:	75 05                	jne    c0003e1f <create_name+0x289>
c0003e1a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e1f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e23:	83 e0 0c             	and    eax,0xc
c0003e26:	3c 0c                	cmp    al,0xc
c0003e28:	74 0b                	je     c0003e35 <create_name+0x29f>
c0003e2a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2e:	83 e0 03             	and    eax,0x3
c0003e31:	3c 03                	cmp    al,0x3
c0003e33:	75 05                	jne    c0003e3a <create_name+0x2a4>
c0003e35:	83 cb 02             	or     ebx,0x2
c0003e38:	eb 19                	jmp    c0003e53 <create_name+0x2bd>
c0003e3a:	f6 c3 02             	test   bl,0x2
c0003e3d:	75 14                	jne    c0003e53 <create_name+0x2bd>
c0003e3f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e44:	74 03                	je     c0003e49 <create_name+0x2b3>
c0003e46:	83 cb 10             	or     ebx,0x10
c0003e49:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e4e:	74 03                	je     c0003e53 <create_name+0x2bd>
c0003e50:	83 cb 08             	or     ebx,0x8
c0003e53:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e56:	31 c0                	xor    eax,eax
c0003e58:	eb 10                	jmp    c0003e6a <create_name+0x2d4>
c0003e5a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e5f:	0f 85 ce fe ff ff    	jne    c0003d33 <create_name+0x19d>
c0003e65:	e9 a6 fe ff ff       	jmp    c0003d10 <create_name+0x17a>
c0003e6a:	83 c4 3c             	add    esp,0x3c
c0003e6d:	5b                   	pop    ebx
c0003e6e:	5e                   	pop    esi
c0003e6f:	5f                   	pop    edi
c0003e70:	5d                   	pop    ebp
c0003e71:	c3                   	ret    

c0003e72 <xname_sum>:
c0003e72:	56                   	push   esi
c0003e73:	53                   	push   ebx
c0003e74:	89 c6                	mov    esi,eax
c0003e76:	51                   	push   ecx
c0003e77:	31 db                	xor    ebx,ebx
c0003e79:	83 c6 02             	add    esi,0x2
c0003e7c:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e80:	66 85 c0             	test   ax,ax
c0003e83:	74 1f                	je     c0003ea4 <xname_sum+0x32>
c0003e85:	83 ec 0c             	sub    esp,0xc
c0003e88:	66 d1 cb             	ror    bx,1
c0003e8b:	50                   	push   eax
c0003e8c:	e8 67 48 00 00       	call   c00086f8 <ff_wtoupper>
c0003e91:	83 c4 10             	add    esp,0x10
c0003e94:	0f b6 d0             	movzx  edx,al
c0003e97:	66 c1 e8 08          	shr    ax,0x8
c0003e9b:	01 d3                	add    ebx,edx
c0003e9d:	66 d1 cb             	ror    bx,1
c0003ea0:	01 c3                	add    ebx,eax
c0003ea2:	eb d5                	jmp    c0003e79 <xname_sum+0x7>
c0003ea4:	89 d8                	mov    eax,ebx
c0003ea6:	5a                   	pop    edx
c0003ea7:	5b                   	pop    ebx
c0003ea8:	5e                   	pop    esi
c0003ea9:	c3                   	ret    

c0003eaa <create_xdir>:
c0003eaa:	55                   	push   ebp
c0003eab:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb0:	57                   	push   edi
c0003eb1:	bd 01 00 00 00       	mov    ebp,0x1
c0003eb6:	56                   	push   esi
c0003eb7:	31 ff                	xor    edi,edi
c0003eb9:	53                   	push   ebx
c0003eba:	be 40 00 00 00       	mov    esi,0x40
c0003ebf:	89 c3                	mov    ebx,eax
c0003ec1:	83 ec 1c             	sub    esp,0x1c
c0003ec4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ec8:	31 d2                	xor    edx,edx
c0003eca:	e8 18 dd ff ff       	call   c0001be7 <mem_set>
c0003ecf:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003ed2:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ed6:	31 c9                	xor    ecx,ecx
c0003ed8:	8d 46 01             	lea    eax,[esi+0x1]
c0003edb:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003edf:	83 c6 02             	add    esi,0x2
c0003ee2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ee6:	66 85 ed             	test   bp,bp
c0003ee9:	74 12                	je     c0003efd <create_xdir+0x53>
c0003eeb:	0f b6 c1             	movzx  eax,cl
c0003eee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ef2:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003ef6:	66 83 fd 01          	cmp    bp,0x1
c0003efa:	80 d9 ff             	sbb    cl,0xff
c0003efd:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f00:	0f b7 d5             	movzx  edx,bp
c0003f03:	83 c6 02             	add    esi,0x2
c0003f06:	e8 ba dc ff ff       	call   c0001bc5 <st_word>
c0003f0b:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f11:	75 d3                	jne    c0003ee6 <create_xdir+0x3c>
c0003f13:	8d 47 01             	lea    eax,[edi+0x1]
c0003f16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f1a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f1e:	0f b6 c1             	movzx  eax,cl
c0003f21:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f26:	74 07                	je     c0003f2f <create_xdir+0x85>
c0003f28:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f2d:	eb a9                	jmp    c0003ed8 <create_xdir+0x2e>
c0003f2f:	8d 47 02             	lea    eax,[edi+0x2]
c0003f32:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f35:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f38:	89 d0                	mov    eax,edx
c0003f3a:	e8 33 ff ff ff       	call   c0003e72 <xname_sum>
c0003f3f:	83 c4 1c             	add    esp,0x1c
c0003f42:	0f b7 d0             	movzx  edx,ax
c0003f45:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f48:	5b                   	pop    ebx
c0003f49:	5e                   	pop    esi
c0003f4a:	5f                   	pop    edi
c0003f4b:	5d                   	pop    ebp
c0003f4c:	e9 74 dc ff ff       	jmp    c0001bc5 <st_word>

c0003f51 <cmp_lfn>:
c0003f51:	55                   	push   ebp
c0003f52:	57                   	push   edi
c0003f53:	89 d7                	mov    edi,edx
c0003f55:	56                   	push   esi
c0003f56:	53                   	push   ebx
c0003f57:	83 ec 1c             	sub    esp,0x1c
c0003f5a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f5e:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f61:	e8 ed db ff ff       	call   c0001b53 <ld_word>
c0003f66:	66 85 c0             	test   ax,ax
c0003f69:	74 07                	je     c0003f72 <cmp_lfn+0x21>
c0003f6b:	31 c0                	xor    eax,eax
c0003f6d:	e9 9a 00 00 00       	jmp    c000400c <cmp_lfn+0xbb>
c0003f72:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f74:	bd 01 00 00 00       	mov    ebp,0x1
c0003f79:	83 e3 3f             	and    ebx,0x3f
c0003f7c:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f84:	4b                   	dec    ebx
c0003f85:	6b db 0d             	imul   ebx,ebx,0xd
c0003f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f8c:	0f b6 80 e0 2c 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd320]
c0003f93:	01 f8                	add    eax,edi
c0003f95:	e8 b9 db ff ff       	call   c0001b53 <ld_word>
c0003f9a:	66 85 ed             	test   bp,bp
c0003f9d:	89 c6                	mov    esi,eax
c0003f9f:	74 3c                	je     c0003fdd <cmp_lfn+0x8c>
c0003fa1:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003fa7:	77 c2                	ja     c0003f6b <cmp_lfn+0x1a>
c0003fa9:	83 ec 0c             	sub    esp,0xc
c0003fac:	0f b7 c0             	movzx  eax,ax
c0003faf:	50                   	push   eax
c0003fb0:	e8 43 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fb5:	89 c5                	mov    ebp,eax
c0003fb7:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fc2:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fc9:	e8 2a 47 00 00       	call   c00086f8 <ff_wtoupper>
c0003fce:	83 c4 10             	add    esp,0x10
c0003fd1:	39 c5                	cmp    ebp,eax
c0003fd3:	75 96                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fd5:	89 f5                	mov    ebp,esi
c0003fd7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fdb:	eb 04                	jmp    c0003fe1 <cmp_lfn+0x90>
c0003fdd:	66 46                	inc    si
c0003fdf:	75 8a                	jne    c0003f6b <cmp_lfn+0x1a>
c0003fe1:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fe5:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003fea:	75 9c                	jne    c0003f88 <cmp_lfn+0x37>
c0003fec:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003fef:	74 16                	je     c0004007 <cmp_lfn+0xb6>
c0003ff1:	66 85 ed             	test   bp,bp
c0003ff4:	74 11                	je     c0004007 <cmp_lfn+0xb6>
c0003ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ffa:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003fff:	0f 94 c0             	sete   al
c0004002:	0f b6 c0             	movzx  eax,al
c0004005:	eb 05                	jmp    c000400c <cmp_lfn+0xbb>
c0004007:	b8 01 00 00 00       	mov    eax,0x1
c000400c:	83 c4 1c             	add    esp,0x1c
c000400f:	5b                   	pop    ebx
c0004010:	5e                   	pop    esi
c0004011:	5f                   	pop    edi
c0004012:	5d                   	pop    ebp
c0004013:	c3                   	ret    

c0004014 <dir_find>:
c0004014:	55                   	push   ebp
c0004015:	31 d2                	xor    edx,edx
c0004017:	57                   	push   edi
c0004018:	56                   	push   esi
c0004019:	53                   	push   ebx
c000401a:	89 c3                	mov    ebx,eax
c000401c:	83 ec 1c             	sub    esp,0x1c
c000401f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004021:	e8 89 f0 ff ff       	call   c00030af <dir_sdi>
c0004026:	89 04 24             	mov    DWORD PTR [esp],eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 9e 01 00 00    	jne    c00041cf <dir_find+0x1bb>
c0004031:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004034:	0f 85 8d 00 00 00    	jne    c00040c7 <dir_find+0xb3>
c000403a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000403d:	e8 30 fe ff ff       	call   c0003e72 <xname_sum>
c0004042:	89 c7                	mov    edi,eax
c0004044:	31 d2                	xor    edx,edx
c0004046:	89 d8                	mov    eax,ebx
c0004048:	e8 72 f8 ff ff       	call   c00038bf <dir_read>
c000404d:	85 c0                	test   eax,eax
c000404f:	0f 85 5e 01 00 00    	jne    c00041b3 <dir_find+0x19f>
c0004055:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004058:	8d 41 24             	lea    eax,[ecx+0x24]
c000405b:	e8 f3 da ff ff       	call   c0001b53 <ld_word>
c0004060:	66 39 f8             	cmp    ax,di
c0004063:	75 df                	jne    c0004044 <dir_find+0x30>
c0004065:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004068:	31 ed                	xor    ebp,ebp
c000406a:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000406e:	ba 40 00 00 00       	mov    edx,0x40
c0004073:	89 e9                	mov    ecx,ebp
c0004075:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004079:	0f 84 42 01 00 00    	je     c00041c1 <dir_find+0x1ad>
c000407f:	f6 c2 1f             	test   dl,0x1f
c0004082:	75 03                	jne    c0004087 <dir_find+0x73>
c0004084:	83 c2 02             	add    edx,0x2
c0004087:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000408b:	89 d0                	mov    eax,edx
c000408d:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004090:	e8 be da ff ff       	call   c0001b53 <ld_word>
c0004095:	83 ec 0c             	sub    esp,0xc
c0004098:	0f b7 c0             	movzx  eax,ax
c000409b:	50                   	push   eax
c000409c:	e8 57 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040a1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040a5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040a8:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00040af:	e8 44 46 00 00       	call   c00086f8 <ff_wtoupper>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040bb:	75 87                	jne    c0004044 <dir_find+0x30>
c00040bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c1:	45                   	inc    ebp
c00040c2:	83 c2 02             	add    edx,0x2
c00040c5:	eb ac                	jmp    c0004073 <dir_find+0x5f>
c00040c7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040ce:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040d3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040d8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040db:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040de:	89 f0                	mov    eax,esi
c00040e0:	e8 4c e2 ff ff       	call   c0002331 <move_window>
c00040e5:	85 c0                	test   eax,eax
c00040e7:	0f 85 c6 00 00 00    	jne    c00041b3 <dir_find+0x19f>
c00040ed:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040f3:	84 c9                	test   cl,cl
c00040f5:	0f 84 bd 00 00 00    	je     c00041b8 <dir_find+0x1a4>
c00040fb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00040fe:	88 d0                	mov    al,dl
c0004100:	83 e0 3f             	and    eax,0x3f
c0004103:	80 f9 e5             	cmp    cl,0xe5
c0004106:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004109:	0f 84 87 00 00 00    	je     c0004196 <dir_find+0x182>
c000410f:	80 e2 08             	and    dl,0x8
c0004112:	74 06                	je     c000411a <dir_find+0x106>
c0004114:	3c 0f                	cmp    al,0xf
c0004116:	75 7e                	jne    c0004196 <dir_find+0x182>
c0004118:	eb 04                	jmp    c000411e <dir_find+0x10a>
c000411a:	3c 0f                	cmp    al,0xf
c000411c:	75 4c                	jne    c000416a <dir_find+0x156>
c000411e:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004122:	75 7e                	jne    c00041a2 <dir_find+0x18e>
c0004124:	f6 c1 40             	test   cl,0x40
c0004127:	74 12                	je     c000413b <dir_find+0x127>
c0004129:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000412c:	83 e1 bf             	and    ecx,0xffffffbf
c000412f:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004133:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004136:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004139:	eb 06                	jmp    c0004141 <dir_find+0x12d>
c000413b:	89 f8                	mov    eax,edi
c000413d:	38 c8                	cmp    al,cl
c000413f:	75 5c                	jne    c000419d <dir_find+0x189>
c0004141:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004145:	bf ff ff ff ff       	mov    edi,0xffffffff
c000414a:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000414d:	75 53                	jne    c00041a2 <dir_find+0x18e>
c000414f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004153:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004156:	89 ea                	mov    edx,ebp
c0004158:	e8 f4 fd ff ff       	call   c0003f51 <cmp_lfn>
c000415d:	85 c0                	test   eax,eax
c000415f:	74 41                	je     c00041a2 <dir_find+0x18e>
c0004161:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004165:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004168:	eb 38                	jmp    c00041a2 <dir_find+0x18e>
c000416a:	89 f8                	mov    eax,edi
c000416c:	84 c0                	test   al,al
c000416e:	75 0d                	jne    c000417d <dir_find+0x169>
c0004170:	89 e8                	mov    eax,ebp
c0004172:	e8 98 de ff ff       	call   c000200f <sum_sfn>
c0004177:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000417b:	74 52                	je     c00041cf <dir_find+0x1bb>
c000417d:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004181:	75 13                	jne    c0004196 <dir_find+0x182>
c0004183:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004186:	b9 0b 00 00 00       	mov    ecx,0xb
c000418b:	89 e8                	mov    eax,ebp
c000418d:	e8 60 da ff ff       	call   c0001bf2 <mem_cmp>
c0004192:	85 c0                	test   eax,eax
c0004194:	74 39                	je     c00041cf <dir_find+0x1bb>
c0004196:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000419d:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041a2:	31 d2                	xor    edx,edx
c00041a4:	89 d8                	mov    eax,ebx
c00041a6:	e8 5c f4 ff ff       	call   c0003607 <dir_next>
c00041ab:	85 c0                	test   eax,eax
c00041ad:	0f 84 25 ff ff ff    	je     c00040d8 <dir_find+0xc4>
c00041b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00041b6:	eb 17                	jmp    c00041cf <dir_find+0x1bb>
c00041b8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041bf:	eb 0e                	jmp    c00041cf <dir_find+0x1bb>
c00041c1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041c4:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041c9:	0f 85 75 fe ff ff    	jne    c0004044 <dir_find+0x30>
c00041cf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041d2:	83 c4 1c             	add    esp,0x1c
c00041d5:	5b                   	pop    ebx
c00041d6:	5e                   	pop    esi
c00041d7:	5f                   	pop    edi
c00041d8:	5d                   	pop    ebp
c00041d9:	c3                   	ret    

c00041da <dir_register>:
c00041da:	55                   	push   ebp
c00041db:	57                   	push   edi
c00041dc:	56                   	push   esi
c00041dd:	be 06 00 00 00       	mov    esi,0x6
c00041e2:	53                   	push   ebx
c00041e3:	83 ec 6c             	sub    esp,0x6c
c00041e6:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041ea:	0f 85 62 02 00 00    	jne    c0004452 <dir_register+0x278>
c00041f0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041f2:	31 ff                	xor    edi,edi
c00041f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041f7:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00041fc:	74 03                	je     c0004201 <dir_register+0x27>
c00041fe:	47                   	inc    edi
c00041ff:	eb f6                	jmp    c00041f7 <dir_register+0x1d>
c0004201:	89 c3                	mov    ebx,eax
c0004203:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004207:	0f 85 e1 00 00 00    	jne    c00042ee <dir_register+0x114>
c000420d:	83 c7 0e             	add    edi,0xe
c0004210:	b9 0f 00 00 00       	mov    ecx,0xf
c0004215:	89 f8                	mov    eax,edi
c0004217:	31 d2                	xor    edx,edx
c0004219:	f7 f1                	div    ecx
c000421b:	8d 50 02             	lea    edx,[eax+0x2]
c000421e:	89 c7                	mov    edi,eax
c0004220:	89 d8                	mov    eax,ebx
c0004222:	e8 12 f8 ff ff       	call   c0003a39 <dir_alloc>
c0004227:	89 c6                	mov    esi,eax
c0004229:	85 c0                	test   eax,eax
c000422b:	0f 85 21 02 00 00    	jne    c0004452 <dir_register+0x278>
c0004231:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004237:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000423a:	c1 e7 05             	shl    edi,0x5
c000423d:	29 f8                	sub    eax,edi
c000423f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004242:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004245:	a8 04                	test   al,0x4
c0004247:	0f 84 91 00 00 00    	je     c00042de <dir_register+0x104>
c000424d:	83 e0 fb             	and    eax,0xfffffffb
c0004250:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004253:	89 d8                	mov    eax,ebx
c0004255:	e8 25 ec ff ff       	call   c0002e7f <fill_first_frag>
c000425a:	85 c0                	test   eax,eax
c000425c:	0f 85 ee 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004262:	83 c9 ff             	or     ecx,0xffffffff
c0004265:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004268:	89 d8                	mov    eax,ebx
c000426a:	e8 db eb ff ff       	call   c0002e4a <fill_last_frag>
c000426f:	85 c0                	test   eax,eax
c0004271:	0f 85 d9 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004277:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000427b:	74 61                	je     c00042de <dir_register+0x104>
c000427d:	89 da                	mov    edx,ebx
c000427f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004283:	e8 ea f5 ff ff       	call   c0003872 <load_obj_xdir>
c0004288:	85 c0                	test   eax,eax
c000428a:	0f 85 c0 01 00 00    	jne    c0004450 <dir_register+0x276>
c0004290:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004294:	31 c9                	xor    ecx,ecx
c0004296:	c1 e2 09             	shl    edx,0x9
c0004299:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000429c:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000429f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042a2:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042a8:	83 c0 38             	add    eax,0x38
c00042ab:	e8 1c d9 ff ff       	call   c0001bcc <st_qword>
c00042b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	83 c0 28             	add    eax,0x28
c00042b9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042bc:	e8 0b d9 ff ff       	call   c0001bcc <st_qword>
c00042c1:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042c4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042c7:	83 c8 01             	or     eax,0x1
c00042ca:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042cd:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d1:	e8 db f7 ff ff       	call   c0003ab1 <store_xdir>
c00042d6:	85 c0                	test   eax,eax
c00042d8:	0f 85 72 01 00 00    	jne    c0004450 <dir_register+0x276>
c00042de:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042e4:	e8 c1 fb ff ff       	call   c0003eaa <create_xdir>
c00042e9:	e9 64 01 00 00       	jmp    c0004452 <dir_register+0x278>
c00042ee:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f1:	b9 0c 00 00 00       	mov    ecx,0xc
c00042f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00042fa:	89 c2                	mov    edx,eax
c00042fc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004300:	e8 cd d8 ff ff       	call   c0001bd2 <mem_cpy>
c0004305:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c000430a:	74 58                	je     c0004364 <dir_register+0x18a>
c000430c:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004310:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004318:	83 ec 0c             	sub    esp,0xc
c000431b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000431e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004322:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004326:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000432a:	e8 24 dc ff ff       	call   c0001f53 <gen_numname>
c000432f:	89 d8                	mov    eax,ebx
c0004331:	e8 de fc ff ff       	call   c0004014 <dir_find>
c0004336:	83 c4 10             	add    esp,0x10
c0004339:	89 c6                	mov    esi,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	75 15                	jne    c0004354 <dir_register+0x17a>
c000433f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004343:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004348:	75 ce                	jne    c0004318 <dir_register+0x13e>
c000434a:	be 07 00 00 00       	mov    esi,0x7
c000434f:	e9 fe 00 00 00       	jmp    c0004452 <dir_register+0x278>
c0004354:	83 f8 04             	cmp    eax,0x4
c0004357:	0f 85 f5 00 00 00    	jne    c0004452 <dir_register+0x278>
c000435d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004361:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004364:	b9 01 00 00 00       	mov    ecx,0x1
c0004369:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000436e:	74 0f                	je     c000437f <dir_register+0x1a5>
c0004370:	b9 0d 00 00 00       	mov    ecx,0xd
c0004375:	8d 47 0c             	lea    eax,[edi+0xc]
c0004378:	31 d2                	xor    edx,edx
c000437a:	f7 f1                	div    ecx
c000437c:	8d 48 01             	lea    ecx,[eax+0x1]
c000437f:	89 ca                	mov    edx,ecx
c0004381:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004385:	89 d8                	mov    eax,ebx
c0004387:	e8 ad f6 ff ff       	call   c0003a39 <dir_alloc>
c000438c:	89 c6                	mov    esi,eax
c000438e:	85 c0                	test   eax,eax
c0004390:	0f 85 bc 00 00 00    	jne    c0004452 <dir_register+0x278>
c0004396:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000439a:	49                   	dec    ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	74 6a                	je     c000440b <dir_register+0x231>
c00043a1:	89 c8                	mov    eax,ecx
c00043a3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043a6:	c1 e0 05             	shl    eax,0x5
c00043a9:	29 c2                	sub    edx,eax
c00043ab:	89 d8                	mov    eax,ebx
c00043ad:	e8 fd ec ff ff       	call   c00030af <dir_sdi>
c00043b2:	89 c6                	mov    esi,eax
c00043b4:	85 c0                	test   eax,eax
c00043b6:	0f 85 96 00 00 00    	jne    c0004452 <dir_register+0x278>
c00043bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c0:	e8 4a dc ff ff       	call   c000200f <sum_sfn>
c00043c5:	0f b6 f8             	movzx  edi,al
c00043c8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043cb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043ce:	89 e8                	mov    eax,ebp
c00043d0:	e8 5c df ff ff       	call   c0002331 <move_window>
c00043d5:	89 c6                	mov    esi,eax
c00043d7:	85 c0                	test   eax,eax
c00043d9:	75 77                	jne    c0004452 <dir_register+0x278>
c00043db:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e0:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043e3:	83 ec 0c             	sub    esp,0xc
c00043e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043e9:	57                   	push   edi
c00043ea:	e8 e0 da ff ff       	call   c0001ecf <put_lfn>
c00043ef:	31 d2                	xor    edx,edx
c00043f1:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043f5:	89 d8                	mov    eax,ebx
c00043f7:	e8 0b f2 ff ff       	call   c0003607 <dir_next>
c00043fc:	83 c4 10             	add    esp,0x10
c00043ff:	89 c6                	mov    esi,eax
c0004401:	85 c0                	test   eax,eax
c0004403:	75 4d                	jne    c0004452 <dir_register+0x278>
c0004405:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004409:	75 bd                	jne    c00043c8 <dir_register+0x1ee>
c000440b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000440e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004411:	89 e8                	mov    eax,ebp
c0004413:	e8 19 df ff ff       	call   c0002331 <move_window>
c0004418:	89 c6                	mov    esi,eax
c000441a:	85 c0                	test   eax,eax
c000441c:	75 34                	jne    c0004452 <dir_register+0x278>
c000441e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004421:	b9 20 00 00 00       	mov    ecx,0x20
c0004426:	31 d2                	xor    edx,edx
c0004428:	e8 ba d7 ff ff       	call   c0001be7 <mem_set>
c000442d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004430:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004434:	b9 0b 00 00 00       	mov    ecx,0xb
c0004439:	e8 94 d7 ff ff       	call   c0001bd2 <mem_cpy>
c000443e:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004441:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004444:	83 e0 18             	and    eax,0x18
c0004447:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000444a:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000444e:	eb 02                	jmp    c0004452 <dir_register+0x278>
c0004450:	89 c6                	mov    esi,eax
c0004452:	83 c4 6c             	add    esp,0x6c
c0004455:	89 f0                	mov    eax,esi
c0004457:	5b                   	pop    ebx
c0004458:	5e                   	pop    esi
c0004459:	5f                   	pop    edi
c000445a:	5d                   	pop    ebp
c000445b:	c3                   	ret    

c000445c <sync_fs>:
c000445c:	56                   	push   esi
c000445d:	53                   	push   ebx
c000445e:	53                   	push   ebx
c000445f:	89 c3                	mov    ebx,eax
c0004461:	e8 37 de ff ff       	call   c000229d <sync_window>
c0004466:	85 c0                	test   eax,eax
c0004468:	0f 85 b1 00 00 00    	jne    c000451f <sync_fs+0xc3>
c000446e:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004471:	0f 85 8e 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004477:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000447b:	0f 85 84 00 00 00    	jne    c0004505 <sync_fs+0xa9>
c0004481:	b9 00 02 00 00       	mov    ecx,0x200
c0004486:	8d 73 54             	lea    esi,[ebx+0x54]
c0004489:	31 d2                	xor    edx,edx
c000448b:	89 f0                	mov    eax,esi
c000448d:	e8 55 d7 ff ff       	call   c0001be7 <mem_set>
c0004492:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004498:	ba 55 aa 00 00       	mov    edx,0xaa55
c000449d:	e8 23 d7 ff ff       	call   c0001bc5 <st_word>
c00044a2:	ba 52 52 61 41       	mov    edx,0x41615252
c00044a7:	89 f0                	mov    eax,esi
c00044a9:	e8 1b d7 ff ff       	call   c0001bc9 <st_dword>
c00044ae:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044b4:	ba 72 72 41 61       	mov    edx,0x61417272
c00044b9:	e8 0b d7 ff ff       	call   c0001bc9 <st_dword>
c00044be:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c1:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044c7:	e8 fd d6 ff ff       	call   c0001bc9 <st_dword>
c00044cc:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044cf:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044d5:	e8 ef d6 ff ff       	call   c0001bc9 <st_dword>
c00044da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044dd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e0:	83 c0 01             	add    eax,0x1
c00044e3:	83 d2 00             	adc    edx,0x0
c00044e6:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044e9:	83 ec 0c             	sub    esp,0xc
c00044ec:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044ef:	6a 01                	push   0x1
c00044f1:	52                   	push   edx
c00044f2:	50                   	push   eax
c00044f3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044f7:	56                   	push   esi
c00044f8:	50                   	push   eax
c00044f9:	e8 20 d6 ff ff       	call   c0001b1e <disk_write>
c00044fe:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004502:	83 c4 20             	add    esp,0x20
c0004505:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004509:	51                   	push   ecx
c000450a:	6a 00                	push   0x0
c000450c:	6a 00                	push   0x0
c000450e:	50                   	push   eax
c000450f:	e8 20 d6 ff ff       	call   c0001b34 <disk_ioctl>
c0004514:	83 c4 10             	add    esp,0x10
c0004517:	85 c0                	test   eax,eax
c0004519:	0f 95 c0             	setne  al
c000451c:	0f b6 c0             	movzx  eax,al
c000451f:	5a                   	pop    edx
c0004520:	5b                   	pop    ebx
c0004521:	5e                   	pop    esi
c0004522:	c3                   	ret    

c0004523 <create_partition>:
c0004523:	55                   	push   ebp
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	57                   	push   edi
c0004528:	56                   	push   esi
c0004529:	53                   	push   ebx
c000452a:	83 ec 60             	sub    esp,0x60
c000452d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004531:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004535:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004539:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000453d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004541:	50                   	push   eax
c0004542:	6a 01                	push   0x1
c0004544:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004548:	e8 e7 d5 ff ff       	call   c0001b34 <disk_ioctl>
c000454d:	83 c4 10             	add    esp,0x10
c0004550:	85 c0                	test   eax,eax
c0004552:	74 0a                	je     c000455e <create_partition+0x3b>
c0004554:	b8 01 00 00 00       	mov    eax,0x1
c0004559:	e9 67 05 00 00       	jmp    c0004ac5 <create_partition+0x5a2>
c000455e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004562:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004566:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000456a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000456e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004573:	0f 86 ed 03 00 00    	jbe    c0004966 <create_partition+0x443>
c0004579:	83 c0 df             	add    eax,0xffffffdf
c000457c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004584:	83 d2 ff             	adc    edx,0xffffffff
c0004587:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000458b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000458f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004593:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004597:	83 c0 bd             	add    eax,0xffffffbd
c000459a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a1:	83 d2 ff             	adc    edx,0xffffffff
c00045a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045a8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045ac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045b4:	be 22 00 00 00       	mov    esi,0x22
c00045b9:	31 ff                	xor    edi,edi
c00045bb:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045c3:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045cb:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045d3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045d7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045dd:	75 0e                	jne    c00045ed <create_partition+0xca>
c00045df:	b9 00 02 00 00       	mov    ecx,0x200
c00045e4:	31 d2                	xor    edx,edx
c00045e6:	89 d8                	mov    eax,ebx
c00045e8:	e8 fa d5 ff ff       	call   c0001be7 <mem_set>
c00045ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045f9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045fc:	0f 84 23 01 00 00    	je     c0004725 <create_partition+0x202>
c0004602:	89 f0                	mov    eax,esi
c0004604:	89 fa                	mov    edx,edi
c0004606:	05 ff 07 00 00       	add    eax,0x7ff
c000460b:	83 d2 00             	adc    edx,0x0
c000460e:	89 c1                	mov    ecx,eax
c0004610:	89 d7                	mov    edi,edx
c0004612:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004618:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000461c:	89 ce                	mov    esi,ecx
c000461e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004622:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004626:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000462a:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000462d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004631:	89 04 24             	mov    DWORD PTR [esp],eax
c0004634:	b8 64 00 00 00       	mov    eax,0x64
c0004639:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000463c:	b8 00 00 00 00       	mov    eax,0x0
c0004641:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004645:	72 41                	jb     c0004688 <create_partition+0x165>
c0004647:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000464b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000464f:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004653:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004658:	01 c1                	add    ecx,eax
c000465a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000465e:	f7 24 24             	mul    DWORD PTR [esp]
c0004661:	6a 00                	push   0x0
c0004663:	01 ca                	add    edx,ecx
c0004665:	6a 64                	push   0x64
c0004667:	52                   	push   edx
c0004668:	50                   	push   eax
c0004669:	e8 62 d7 01 00       	call   c0021dd0 <__udivdi3>
c000466e:	83 c4 10             	add    esp,0x10
c0004671:	05 ff 07 00 00       	add    eax,0x7ff
c0004676:	83 d2 00             	adc    edx,0x0
c0004679:	89 c1                	mov    ecx,eax
c000467b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000467f:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004685:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004688:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000468b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000468f:	01 f0                	add    eax,esi
c0004691:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004695:	11 fa                	adc    edx,edi
c0004697:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000469b:	19 d1                	sbb    ecx,edx
c000469d:	73 2e                	jae    c00046cd <create_partition+0x1aa>
c000469f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046a3:	89 f8                	mov    eax,edi
c00046a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046ac:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046b8:	73 6b                	jae    c0004725 <create_partition+0x202>
c00046ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046c2:	29 f0                	sub    eax,esi
c00046c4:	19 fa                	sbb    edx,edi
c00046c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00046c9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d1:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d4:	74 4f                	je     c0004725 <create_partition+0x202>
c00046d6:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046d9:	b9 10 00 00 00       	mov    ecx,0x10
c00046de:	ba f0 2c 02 c0       	mov    edx,0xc0022cf0
c00046e3:	e8 ea d4 ff ff       	call   c0001bd2 <mem_cpy>
c00046e8:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046ec:	b9 10 00 00 00       	mov    ecx,0x10
c00046f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046f5:	e8 2c db ff ff       	call   c0002226 <make_rand>
c00046fa:	89 f2                	mov    edx,esi
c00046fc:	89 f9                	mov    ecx,edi
c00046fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004702:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004706:	e8 c1 d4 ff ff       	call   c0001bcc <st_qword>
c000470b:	03 34 24             	add    esi,DWORD PTR [esp]
c000470e:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004712:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004716:	89 f2                	mov    edx,esi
c0004718:	89 f9                	mov    ecx,edi
c000471a:	83 c2 ff             	add    edx,0xffffffff
c000471d:	83 d1 ff             	adc    ecx,0xffffffff
c0004720:	e8 a7 d4 ff ff       	call   c0001bcc <st_qword>
c0004725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004729:	83 e8 80             	sub    eax,0xffffff80
c000472c:	89 c5                	mov    ebp,eax
c000472e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004732:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004738:	75 6b                	jne    c00047a5 <create_partition+0x282>
c000473a:	45                   	inc    ebp
c000473b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000473f:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004744:	e8 39 da ff ff       	call   c0002182 <crc32>
c0004749:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000474f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004753:	75 e5                	jne    c000473a <create_partition+0x217>
c0004755:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004759:	31 d2                	xor    edx,edx
c000475b:	83 ec 0c             	sub    esp,0xc
c000475e:	c1 ed 09             	shr    ebp,0x9
c0004761:	6a 01                	push   0x1
c0004763:	8d 45 02             	lea    eax,[ebp+0x2]
c0004766:	52                   	push   edx
c0004767:	50                   	push   eax
c0004768:	53                   	push   ebx
c0004769:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000476d:	e8 ac d3 ff ff       	call   c0001b1e <disk_write>
c0004772:	83 c4 20             	add    esp,0x20
c0004775:	85 c0                	test   eax,eax
c0004777:	0f 85 d7 fd ff ff    	jne    c0004554 <create_partition+0x31>
c000477d:	83 ec 0c             	sub    esp,0xc
c0004780:	31 d2                	xor    edx,edx
c0004782:	6a 01                	push   0x1
c0004784:	89 e8                	mov    eax,ebp
c0004786:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000478a:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000478e:	52                   	push   edx
c000478f:	50                   	push   eax
c0004790:	53                   	push   ebx
c0004791:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004795:	e8 84 d3 ff ff       	call   c0001b1e <disk_write>
c000479a:	83 c4 20             	add    esp,0x20
c000479d:	85 c0                	test   eax,eax
c000479f:	0f 85 af fd ff ff    	jne    c0004554 <create_partition+0x31>
c00047a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047ad:	3d 00 40 00 00       	cmp    eax,0x4000
c00047b2:	74 0d                	je     c00047c1 <create_partition+0x29e>
c00047b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047b8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047bc:	e9 12 fe ff ff       	jmp    c00045d3 <create_partition+0xb0>
c00047c1:	31 d2                	xor    edx,edx
c00047c3:	b9 00 02 00 00       	mov    ecx,0x200
c00047c8:	89 d8                	mov    eax,ebx
c00047ca:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047cd:	e8 15 d4 ff ff       	call   c0001be7 <mem_set>
c00047d2:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047d5:	b9 10 00 00 00       	mov    ecx,0x10
c00047da:	ba e0 2b 02 c0       	mov    edx,0xc0022be0
c00047df:	89 d8                	mov    eax,ebx
c00047e1:	e8 ec d3 ff ff       	call   c0001bd2 <mem_cpy>
c00047e6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047ea:	8d 43 58             	lea    eax,[ebx+0x58]
c00047ed:	f7 d2                	not    edx
c00047ef:	e8 d5 d3 ff ff       	call   c0001bc9 <st_dword>
c00047f4:	8d 43 18             	lea    eax,[ebx+0x18]
c00047f7:	31 c9                	xor    ecx,ecx
c00047f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00047fc:	ba 01 00 00 00       	mov    edx,0x1
c0004801:	e8 c6 d3 ff ff       	call   c0001bcc <st_qword>
c0004806:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000480a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000480e:	83 c2 ff             	add    edx,0xffffffff
c0004811:	89 e8                	mov    eax,ebp
c0004813:	83 d1 ff             	adc    ecx,0xffffffff
c0004816:	e8 b1 d3 ff ff       	call   c0001bcc <st_qword>
c000481b:	31 c9                	xor    ecx,ecx
c000481d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004820:	ba 22 00 00 00       	mov    edx,0x22
c0004825:	e8 a2 d3 ff ff       	call   c0001bcc <st_qword>
c000482a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000482e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004832:	83 c2 de             	add    edx,0xffffffde
c0004835:	8d 43 30             	lea    eax,[ebx+0x30]
c0004838:	83 d1 ff             	adc    ecx,0xffffffff
c000483b:	31 f6                	xor    esi,esi
c000483d:	e8 8a d3 ff ff       	call   c0001bcc <st_qword>
c0004842:	8d 43 54             	lea    eax,[ebx+0x54]
c0004845:	ba 80 00 00 00       	mov    edx,0x80
c000484a:	e8 7a d3 ff ff       	call   c0001bc9 <st_dword>
c000484f:	8d 43 50             	lea    eax,[ebx+0x50]
c0004852:	ba 80 00 00 00       	mov    edx,0x80
c0004857:	e8 6d d3 ff ff       	call   c0001bc9 <st_dword>
c000485c:	ba 02 00 00 00       	mov    edx,0x2
c0004861:	89 f8                	mov    eax,edi
c0004863:	e8 61 d3 ff ff       	call   c0001bc9 <st_dword>
c0004868:	8d 53 38             	lea    edx,[ebx+0x38]
c000486b:	b9 10 00 00 00       	mov    ecx,0x10
c0004870:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004874:	e8 ad d9 ff ff       	call   c0002226 <make_rand>
c0004879:	83 c8 ff             	or     eax,0xffffffff
c000487c:	46                   	inc    esi
c000487d:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004882:	e8 fb d8 ff ff       	call   c0002182 <crc32>
c0004887:	83 fe 5c             	cmp    esi,0x5c
c000488a:	75 f0                	jne    c000487c <create_partition+0x359>
c000488c:	f7 d0                	not    eax
c000488e:	8d 73 10             	lea    esi,[ebx+0x10]
c0004891:	89 c2                	mov    edx,eax
c0004893:	89 f0                	mov    eax,esi
c0004895:	e8 2f d3 ff ff       	call   c0001bc9 <st_dword>
c000489a:	83 ec 0c             	sub    esp,0xc
c000489d:	6a 01                	push   0x1
c000489f:	6a 00                	push   0x0
c00048a1:	6a 01                	push   0x1
c00048a3:	53                   	push   ebx
c00048a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a8:	e8 71 d2 ff ff       	call   c0001b1e <disk_write>
c00048ad:	83 c4 20             	add    esp,0x20
c00048b0:	85 c0                	test   eax,eax
c00048b2:	0f 85 9c fc ff ff    	jne    c0004554 <create_partition+0x31>
c00048b8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048bc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c0:	83 c2 ff             	add    edx,0xffffffff
c00048c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048c6:	83 d1 ff             	adc    ecx,0xffffffff
c00048c9:	e8 fe d2 ff ff       	call   c0001bcc <st_qword>
c00048ce:	ba 01 00 00 00       	mov    edx,0x1
c00048d3:	31 c9                	xor    ecx,ecx
c00048d5:	89 e8                	mov    eax,ebp
c00048d7:	e8 f0 d2 ff ff       	call   c0001bcc <st_qword>
c00048dc:	89 f8                	mov    eax,edi
c00048de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048e6:	31 ff                	xor    edi,edi
c00048e8:	e8 df d2 ff ff       	call   c0001bcc <st_qword>
c00048ed:	89 f0                	mov    eax,esi
c00048ef:	31 d2                	xor    edx,edx
c00048f1:	e8 d3 d2 ff ff       	call   c0001bc9 <st_dword>
c00048f6:	83 c8 ff             	or     eax,0xffffffff
c00048f9:	47                   	inc    edi
c00048fa:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00048ff:	e8 7e d8 ff ff       	call   c0002182 <crc32>
c0004904:	83 ff 5c             	cmp    edi,0x5c
c0004907:	75 f0                	jne    c00048f9 <create_partition+0x3d6>
c0004909:	f7 d0                	not    eax
c000490b:	89 c2                	mov    edx,eax
c000490d:	89 f0                	mov    eax,esi
c000490f:	e8 b5 d2 ff ff       	call   c0001bc9 <st_dword>
c0004914:	83 ec 0c             	sub    esp,0xc
c0004917:	6a 01                	push   0x1
c0004919:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000491d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004921:	83 c0 ff             	add    eax,0xffffffff
c0004924:	83 d2 ff             	adc    edx,0xffffffff
c0004927:	52                   	push   edx
c0004928:	50                   	push   eax
c0004929:	53                   	push   ebx
c000492a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000492e:	e8 eb d1 ff ff       	call   c0001b1e <disk_write>
c0004933:	83 c4 20             	add    esp,0x20
c0004936:	85 c0                	test   eax,eax
c0004938:	0f 85 16 fc ff ff    	jne    c0004554 <create_partition+0x31>
c000493e:	31 d2                	xor    edx,edx
c0004940:	89 d8                	mov    eax,ebx
c0004942:	b9 00 02 00 00       	mov    ecx,0x200
c0004947:	e8 9b d2 ff ff       	call   c0001be7 <mem_set>
c000494c:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004952:	b9 10 00 00 00       	mov    ecx,0x10
c0004957:	ba f0 2b 02 c0       	mov    edx,0xc0022bf0
c000495c:	e8 71 d2 ff ff       	call   c0001bd2 <mem_cpy>
c0004961:	e9 21 01 00 00       	jmp    c0004a87 <create_partition+0x564>
c0004966:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000496a:	b9 05 00 00 00       	mov    ecx,0x5
c000496f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004972:	bf 08 00 00 00       	mov    edi,0x8
c0004977:	89 f8                	mov    eax,edi
c0004979:	31 d2                	xor    edx,edx
c000497b:	0f b6 f0             	movzx  esi,al
c000497e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004981:	f7 f6                	div    esi
c0004983:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004988:	76 0a                	jbe    c0004994 <create_partition+0x471>
c000498a:	d1 e7                	shl    edi,1
c000498c:	49                   	dec    ecx
c000498d:	75 e8                	jne    c0004977 <create_partition+0x454>
c000498f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004994:	b9 00 02 00 00       	mov    ecx,0x200
c0004999:	31 d2                	xor    edx,edx
c000499b:	89 d8                	mov    eax,ebx
c000499d:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049a3:	e8 3f d2 ff ff       	call   c0001be7 <mem_set>
c00049a8:	b9 64 00 00 00       	mov    ecx,0x64
c00049ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b0:	31 d2                	xor    edx,edx
c00049b2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049ba:	f7 f1                	div    ecx
c00049bc:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049c5:	89 f8                	mov    eax,edi
c00049c7:	0f b6 c0             	movzx  eax,al
c00049ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049ce:	e9 80 00 00 00       	jmp    c0004a53 <create_partition+0x530>
c00049d3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049d6:	29 cf                	sub    edi,ecx
c00049d8:	89 ca                	mov    edx,ecx
c00049da:	89 f0                	mov    eax,esi
c00049dc:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e1:	e8 e3 d1 ff ff       	call   c0001bc9 <st_dword>
c00049e6:	8d 46 04             	lea    eax,[esi+0x4]
c00049e9:	89 fa                	mov    edx,edi
c00049eb:	83 c6 10             	add    esi,0x10
c00049ee:	e8 d6 d1 ff ff       	call   c0001bc9 <st_dword>
c00049f3:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049f7:	31 d2                	xor    edx,edx
c00049f9:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00049fc:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a00:	89 c8                	mov    eax,ecx
c0004a02:	01 f9                	add    ecx,edi
c0004a04:	f7 f5                	div    ebp
c0004a06:	89 d5                	mov    ebp,edx
c0004a08:	31 d2                	xor    edx,edx
c0004a0a:	45                   	inc    ebp
c0004a0b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a0f:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a12:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a15:	89 c2                	mov    edx,eax
c0004a17:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a1a:	c1 ea 02             	shr    edx,0x2
c0004a1d:	83 e2 c0             	and    edx,0xffffffc0
c0004a20:	09 ea                	or     edx,ebp
c0004a22:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a27:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a2a:	31 d2                	xor    edx,edx
c0004a2c:	f7 f5                	div    ebp
c0004a2e:	89 d7                	mov    edi,edx
c0004a30:	31 d2                	xor    edx,edx
c0004a32:	47                   	inc    edi
c0004a33:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a37:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a3a:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a3d:	89 c5                	mov    ebp,eax
c0004a3f:	c1 ed 02             	shr    ebp,0x2
c0004a42:	83 e5 c0             	and    ebp,0xffffffc0
c0004a45:	09 ef                	or     edi,ebp
c0004a47:	89 fa                	mov    edx,edi
c0004a49:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a4c:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a51:	74 34                	je     c0004a87 <create_partition+0x564>
c0004a53:	85 c9                	test   ecx,ecx
c0004a55:	74 30                	je     c0004a87 <create_partition+0x564>
c0004a57:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a5a:	76 2b                	jbe    c0004a87 <create_partition+0x564>
c0004a5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a60:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a64:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a67:	83 ff 64             	cmp    edi,0x64
c0004a6a:	76 4b                	jbe    c0004ab7 <create_partition+0x594>
c0004a6c:	89 f8                	mov    eax,edi
c0004a6e:	01 c8                	add    eax,ecx
c0004a70:	0f 82 5d ff ff ff    	jb     c00049d3 <create_partition+0x4b0>
c0004a76:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a79:	0f 87 54 ff ff ff    	ja     c00049d3 <create_partition+0x4b0>
c0004a7f:	85 ff                	test   edi,edi
c0004a81:	0f 85 51 ff ff ff    	jne    c00049d8 <create_partition+0x4b5>
c0004a87:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a8d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a92:	e8 2e d1 ff ff       	call   c0001bc5 <st_word>
c0004a97:	83 ec 0c             	sub    esp,0xc
c0004a9a:	6a 01                	push   0x1
c0004a9c:	6a 00                	push   0x0
c0004a9e:	6a 00                	push   0x0
c0004aa0:	53                   	push   ebx
c0004aa1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aa5:	e8 74 d0 ff ff       	call   c0001b1e <disk_write>
c0004aaa:	83 c4 20             	add    esp,0x20
c0004aad:	85 c0                	test   eax,eax
c0004aaf:	0f 95 c0             	setne  al
c0004ab2:	0f b6 c0             	movzx  eax,al
c0004ab5:	eb 0e                	jmp    c0004ac5 <create_partition+0x5a2>
c0004ab7:	74 07                	je     c0004ac0 <create_partition+0x59d>
c0004ab9:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004abe:	eb ac                	jmp    c0004a6c <create_partition+0x549>
c0004ac0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ac3:	eb a7                	jmp    c0004a6c <create_partition+0x549>
c0004ac5:	83 c4 5c             	add    esp,0x5c
c0004ac8:	5b                   	pop    ebx
c0004ac9:	5e                   	pop    esi
c0004aca:	5f                   	pop    edi
c0004acb:	5d                   	pop    ebp
c0004acc:	c3                   	ret    

c0004acd <get_fileinfo>:
c0004acd:	55                   	push   ebp
c0004ace:	57                   	push   edi
c0004acf:	56                   	push   esi
c0004ad0:	53                   	push   ebx
c0004ad1:	83 ec 1c             	sub    esp,0x1c
c0004ad4:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ad6:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ada:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ade:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae1:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004ae4:	0f 84 dc 01 00 00    	je     c0004cc6 <get_fileinfo+0x1f9>
c0004aea:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004aed:	75 0f                	jne    c0004afe <get_fileinfo+0x31>
c0004aef:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004af2:	83 c4 1c             	add    esp,0x1c
c0004af5:	5b                   	pop    ebx
c0004af6:	5e                   	pop    esi
c0004af7:	5f                   	pop    edi
c0004af8:	5d                   	pop    ebp
c0004af9:	e9 58 d5 ff ff       	jmp    c0002056 <get_xfileinfo>
c0004afe:	89 d3                	mov    ebx,edx
c0004b00:	89 c6                	mov    esi,eax
c0004b02:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b06:	74 6a                	je     c0004b72 <get_fileinfo+0xa5>
c0004b08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b10:	31 ed                	xor    ebp,ebp
c0004b12:	31 ff                	xor    edi,edi
c0004b14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b1c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b1f:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b23:	66 85 d2             	test   dx,dx
c0004b26:	74 3e                	je     c0004b66 <get_fileinfo+0x99>
c0004b28:	66 85 ed             	test   bp,bp
c0004b2b:	75 0c                	jne    c0004b39 <get_fileinfo+0x6c>
c0004b2d:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b33:	66 3d ff 07          	cmp    ax,0x7ff
c0004b37:	76 22                	jbe    c0004b5b <get_fileinfo+0x8e>
c0004b39:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b3e:	89 e8                	mov    eax,ebp
c0004b40:	29 f9                	sub    ecx,edi
c0004b42:	c1 e0 10             	shl    eax,0x10
c0004b45:	09 d0                	or     eax,edx
c0004b47:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b4b:	e8 a3 d1 ff ff       	call   c0001cf3 <put_utf>
c0004b50:	84 c0                	test   al,al
c0004b52:	74 10                	je     c0004b64 <get_fileinfo+0x97>
c0004b54:	0f b6 c0             	movzx  eax,al
c0004b57:	31 d2                	xor    edx,edx
c0004b59:	01 c7                	add    edi,eax
c0004b5b:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b60:	89 d5                	mov    ebp,edx
c0004b62:	eb b0                	jmp    c0004b14 <get_fileinfo+0x47>
c0004b64:	31 ff                	xor    edi,edi
c0004b66:	66 85 ed             	test   bp,bp
c0004b69:	74 02                	je     c0004b6d <get_fileinfo+0xa0>
c0004b6b:	31 ff                	xor    edi,edi
c0004b6d:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b72:	31 ff                	xor    edi,edi
c0004b74:	31 c9                	xor    ecx,ecx
c0004b76:	83 f9 0a             	cmp    ecx,0xa
c0004b79:	0f 87 ad 00 00 00    	ja     c0004c2c <get_fileinfo+0x15f>
c0004b7f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b82:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b85:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b89:	66 83 fa 20          	cmp    dx,0x20
c0004b8d:	0f 84 92 00 00 00    	je     c0004c25 <get_fileinfo+0x158>
c0004b93:	66 83 fa 05          	cmp    dx,0x5
c0004b97:	75 05                	jne    c0004b9e <get_fileinfo+0xd1>
c0004b99:	ba e5 00 00 00       	mov    edx,0xe5
c0004b9e:	83 ff 0b             	cmp    edi,0xb
c0004ba1:	77 0b                	ja     c0004bae <get_fileinfo+0xe1>
c0004ba3:	83 fd 09             	cmp    ebp,0x9
c0004ba6:	75 06                	jne    c0004bae <get_fileinfo+0xe1>
c0004ba8:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bad:	47                   	inc    edi
c0004bae:	0f b7 c2             	movzx  eax,dx
c0004bb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb5:	e8 6d d0 ff ff       	call   c0001c27 <dbc_1st>
c0004bba:	85 c0                	test   eax,eax
c0004bbc:	74 2f                	je     c0004bed <get_fileinfo+0x120>
c0004bbe:	83 fd 08             	cmp    ebp,0x8
c0004bc1:	74 2a                	je     c0004bed <get_fileinfo+0x120>
c0004bc3:	83 fd 0b             	cmp    ebp,0xb
c0004bc6:	74 25                	je     c0004bed <get_fileinfo+0x120>
c0004bc8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bcb:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bcf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bd3:	e8 52 d0 ff ff       	call   c0001c2a <dbc_2nd>
c0004bd8:	85 c0                	test   eax,eax
c0004bda:	74 11                	je     c0004bed <get_fileinfo+0x120>
c0004bdc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004be5:	c1 e2 08             	shl    edx,0x8
c0004be8:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004beb:	09 c2                	or     edx,eax
c0004bed:	0f b7 d2             	movzx  edx,dx
c0004bf0:	50                   	push   eax
c0004bf1:	50                   	push   eax
c0004bf2:	68 b5 01 00 00       	push   0x1b5
c0004bf7:	52                   	push   edx
c0004bf8:	e8 87 3a 00 00       	call   c0008684 <ff_oem2uni>
c0004bfd:	83 c4 10             	add    esp,0x10
c0004c00:	66 85 c0             	test   ax,ax
c0004c03:	75 04                	jne    c0004c09 <get_fileinfo+0x13c>
c0004c05:	31 ff                	xor    edi,edi
c0004c07:	eb 23                	jmp    c0004c2c <get_fileinfo+0x15f>
c0004c09:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c0e:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c12:	29 f9                	sub    ecx,edi
c0004c14:	0f b7 c0             	movzx  eax,ax
c0004c17:	e8 d7 d0 ff ff       	call   c0001cf3 <put_utf>
c0004c1c:	84 c0                	test   al,al
c0004c1e:	74 e5                	je     c0004c05 <get_fileinfo+0x138>
c0004c20:	0f b6 c0             	movzx  eax,al
c0004c23:	01 c7                	add    edi,eax
c0004c25:	89 e9                	mov    ecx,ebp
c0004c27:	e9 4a ff ff ff       	jmp    c0004b76 <get_fileinfo+0xa9>
c0004c2c:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c31:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c35:	75 54                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c37:	85 ff                	test   edi,edi
c0004c39:	75 0b                	jne    c0004c46 <get_fileinfo+0x179>
c0004c3b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c3f:	ba 01 00 00 00       	mov    edx,0x1
c0004c44:	eb 33                	jmp    c0004c79 <get_fileinfo+0x1ac>
c0004c46:	b1 08                	mov    cl,0x8
c0004c48:	31 d2                	xor    edx,edx
c0004c4a:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c50:	84 c0                	test   al,al
c0004c52:	74 25                	je     c0004c79 <get_fileinfo+0x1ac>
c0004c54:	66 83 f8 2e          	cmp    ax,0x2e
c0004c58:	74 16                	je     c0004c70 <get_fileinfo+0x1a3>
c0004c5a:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c5d:	66 83 ff 19          	cmp    di,0x19
c0004c61:	77 0f                	ja     c0004c72 <get_fileinfo+0x1a5>
c0004c63:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c66:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c69:	74 07                	je     c0004c72 <get_fileinfo+0x1a5>
c0004c6b:	83 c0 20             	add    eax,0x20
c0004c6e:	eb 02                	jmp    c0004c72 <get_fileinfo+0x1a5>
c0004c70:	b1 10                	mov    cl,0x10
c0004c72:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c76:	42                   	inc    edx
c0004c77:	eb d1                	jmp    c0004c4a <get_fileinfo+0x17d>
c0004c79:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c7e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c81:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c85:	75 04                	jne    c0004c8b <get_fileinfo+0x1be>
c0004c87:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c8e:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c91:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c94:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c97:	83 c0 1c             	add    eax,0x1c
c0004c9a:	e8 c1 ce ff ff       	call   c0001b60 <ld_dword>
c0004c9f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0004ca8:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cab:	83 c0 16             	add    eax,0x16
c0004cae:	e8 a0 ce ff ff       	call   c0001b53 <ld_word>
c0004cb3:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cb7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cba:	83 c0 18             	add    eax,0x18
c0004cbd:	e8 91 ce ff ff       	call   c0001b53 <ld_word>
c0004cc2:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cc6:	83 c4 1c             	add    esp,0x1c
c0004cc9:	5b                   	pop    ebx
c0004cca:	5e                   	pop    esi
c0004ccb:	5f                   	pop    edi
c0004ccc:	5d                   	pop    ebp
c0004ccd:	c3                   	ret    

c0004cce <ld_clust.isra.0>:
c0004cce:	56                   	push   esi
c0004ccf:	89 c6                	mov    esi,eax
c0004cd1:	53                   	push   ebx
c0004cd2:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cd5:	89 d3                	mov    ebx,edx
c0004cd7:	e8 77 ce ff ff       	call   c0001b53 <ld_word>
c0004cdc:	0f b7 c8             	movzx  ecx,ax
c0004cdf:	89 f0                	mov    eax,esi
c0004ce1:	3c 03                	cmp    al,0x3
c0004ce3:	75 0d                	jne    c0004cf2 <ld_clust.isra.0+0x24>
c0004ce5:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ce8:	e8 66 ce ff ff       	call   c0001b53 <ld_word>
c0004ced:	c1 e0 10             	shl    eax,0x10
c0004cf0:	09 c1                	or     ecx,eax
c0004cf2:	89 c8                	mov    eax,ecx
c0004cf4:	5b                   	pop    ebx
c0004cf5:	5e                   	pop    esi
c0004cf6:	c3                   	ret    

c0004cf7 <st_clust.isra.1>:
c0004cf7:	56                   	push   esi
c0004cf8:	89 c6                	mov    esi,eax
c0004cfa:	53                   	push   ebx
c0004cfb:	89 d3                	mov    ebx,edx
c0004cfd:	0f b7 d1             	movzx  edx,cx
c0004d00:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d03:	e8 bd ce ff ff       	call   c0001bc5 <st_word>
c0004d08:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d0b:	75 0f                	jne    c0004d1c <st_clust.isra.1+0x25>
c0004d0d:	c1 e9 10             	shr    ecx,0x10
c0004d10:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d13:	89 ca                	mov    edx,ecx
c0004d15:	5b                   	pop    ebx
c0004d16:	5e                   	pop    esi
c0004d17:	e9 a9 ce ff ff       	jmp    c0001bc5 <st_word>
c0004d1c:	5b                   	pop    ebx
c0004d1d:	5e                   	pop    esi
c0004d1e:	c3                   	ret    

c0004d1f <init_alloc_info.isra.2>:
c0004d1f:	56                   	push   esi
c0004d20:	53                   	push   ebx
c0004d21:	89 c6                	mov    esi,eax
c0004d23:	89 d3                	mov    ebx,edx
c0004d25:	51                   	push   ecx
c0004d26:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d28:	83 c0 34             	add    eax,0x34
c0004d2b:	e8 30 ce ff ff       	call   c0001b60 <ld_dword>
c0004d30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d33:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d35:	83 c0 38             	add    eax,0x38
c0004d38:	e8 3b ce ff ff       	call   c0001b78 <ld_qword>
c0004d3d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d40:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d43:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d45:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d48:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d4f:	83 e0 02             	and    eax,0x2
c0004d52:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d55:	5b                   	pop    ebx
c0004d56:	5b                   	pop    ebx
c0004d57:	5e                   	pop    esi
c0004d58:	c3                   	ret    

c0004d59 <follow_path>:
c0004d59:	56                   	push   esi
c0004d5a:	53                   	push   ebx
c0004d5b:	89 c3                	mov    ebx,eax
c0004d5d:	83 ec 14             	sub    esp,0x14
c0004d60:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d64:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d6a:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d6c:	80 fa 5c             	cmp    dl,0x5c
c0004d6f:	75 07                	jne    c0004d78 <follow_path+0x1f>
c0004d71:	40                   	inc    eax
c0004d72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d76:	eb ee                	jmp    c0004d66 <follow_path+0xd>
c0004d78:	80 fa 2f             	cmp    dl,0x2f
c0004d7b:	74 f4                	je     c0004d71 <follow_path+0x18>
c0004d7d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d84:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d8b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d8e:	77 52                	ja     c0004de2 <follow_path+0x89>
c0004d90:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d94:	31 d2                	xor    edx,edx
c0004d96:	89 d8                	mov    eax,ebx
c0004d98:	e8 12 e3 ff ff       	call   c00030af <dir_sdi>
c0004d9d:	eb 7c                	jmp    c0004e1b <follow_path+0xc2>
c0004d9f:	89 d8                	mov    eax,ebx
c0004da1:	e8 6e f2 ff ff       	call   c0004014 <dir_find>
c0004da6:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004da9:	85 c0                	test   eax,eax
c0004dab:	75 46                	jne    c0004df3 <follow_path+0x9a>
c0004dad:	80 e2 04             	and    dl,0x4
c0004db0:	75 69                	jne    c0004e1b <follow_path+0xc2>
c0004db2:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004db6:	74 5e                	je     c0004e16 <follow_path+0xbd>
c0004db8:	8a 06                	mov    al,BYTE PTR [esi]
c0004dba:	3c 04                	cmp    al,0x4
c0004dbc:	75 41                	jne    c0004dff <follow_path+0xa6>
c0004dbe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc1:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dc5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dc8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dcb:	30 c0                	xor    al,al
c0004dcd:	09 d0                	or     eax,edx
c0004dcf:	89 da                	mov    edx,ebx
c0004dd1:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004dd4:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004dd7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004dda:	8d 46 10             	lea    eax,[esi+0x10]
c0004ddd:	e8 3d ff ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004de2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004de6:	89 d8                	mov    eax,ebx
c0004de8:	e8 a9 ed ff ff       	call   c0003b96 <create_name>
c0004ded:	85 c0                	test   eax,eax
c0004def:	74 ae                	je     c0004d9f <follow_path+0x46>
c0004df1:	eb 28                	jmp    c0004e1b <follow_path+0xc2>
c0004df3:	83 f8 04             	cmp    eax,0x4
c0004df6:	75 23                	jne    c0004e1b <follow_path+0xc2>
c0004df8:	80 e2 04             	and    dl,0x4
c0004dfb:	74 19                	je     c0004e16 <follow_path+0xbd>
c0004dfd:	eb 1c                	jmp    c0004e1b <follow_path+0xc2>
c0004dff:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e02:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e08:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e0c:	e8 bd fe ff ff       	call   c0004cce <ld_clust.isra.0>
c0004e11:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e14:	eb cc                	jmp    c0004de2 <follow_path+0x89>
c0004e16:	b8 05 00 00 00       	mov    eax,0x5
c0004e1b:	83 c4 14             	add    esp,0x14
c0004e1e:	5b                   	pop    ebx
c0004e1f:	5e                   	pop    esi
c0004e20:	c3                   	ret    

c0004e21 <f_mount>:
c0004e21:	53                   	push   ebx
c0004e22:	83 ec 18             	sub    esp,0x18
c0004e25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e29:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e31:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e35:	e8 fb d2 ff ff       	call   c0002135 <get_ldnumber>
c0004e3a:	89 c2                	mov    edx,eax
c0004e3c:	b8 0b 00 00 00       	mov    eax,0xb
c0004e41:	85 d2                	test   edx,edx
c0004e43:	78 39                	js     c0004e7e <f_mount+0x5d>
c0004e45:	8b 04 95 40 73 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8cc0]
c0004e4c:	85 c0                	test   eax,eax
c0004e4e:	74 03                	je     c0004e53 <f_mount+0x32>
c0004e50:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e57:	85 c0                	test   eax,eax
c0004e59:	74 03                	je     c0004e5e <f_mount+0x3d>
c0004e5b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e62:	89 04 95 40 73 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8cc0],eax
c0004e69:	31 c0                	xor    eax,eax
c0004e6b:	84 db                	test   bl,bl
c0004e6d:	74 0f                	je     c0004e7e <f_mount+0x5d>
c0004e6f:	31 c9                	xor    ecx,ecx
c0004e71:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e75:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e79:	e8 65 d7 ff ff       	call   c00025e3 <mount_volume>
c0004e7e:	83 c4 18             	add    esp,0x18
c0004e81:	5b                   	pop    ebx
c0004e82:	c3                   	ret    

c0004e83 <f_open>:
c0004e83:	55                   	push   ebp
c0004e84:	bd 09 00 00 00       	mov    ebp,0x9
c0004e89:	57                   	push   edi
c0004e8a:	56                   	push   esi
c0004e8b:	53                   	push   ebx
c0004e8c:	83 ec 7c             	sub    esp,0x7c
c0004e8f:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e96:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004e9d:	85 db                	test   ebx,ebx
c0004e9f:	0f 84 10 04 00 00    	je     c00052b5 <f_open+0x432>
c0004ea5:	89 fe                	mov    esi,edi
c0004ea7:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eab:	83 e6 3f             	and    esi,0x3f
c0004eae:	89 f0                	mov    eax,esi
c0004eb0:	0f b6 c8             	movzx  ecx,al
c0004eb3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004eba:	e8 24 d7 ff ff       	call   c00025e3 <mount_volume>
c0004ebf:	89 c5                	mov    ebp,eax
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	0f 85 e6 03 00 00    	jne    c00052af <f_open+0x42c>
c0004ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ecd:	bd 11 00 00 00       	mov    ebp,0x11
c0004ed2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	68 60 04 00 00       	push   0x460
c0004ede:	e8 d9 36 00 00       	call   c00085bc <ff_memalloc>
c0004ee3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004eef:	0f 84 c0 03 00 00    	je     c00052b5 <f_open+0x432>
c0004ef5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004efd:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f03:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f06:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f09:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f10:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f14:	e8 40 fe ff ff       	call   c0004d59 <follow_path>
c0004f19:	89 c5                	mov    ebp,eax
c0004f1b:	85 c0                	test   eax,eax
c0004f1d:	75 0c                	jne    c0004f2b <f_open+0xa8>
c0004f1f:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f24:	79 05                	jns    c0004f2b <f_open+0xa8>
c0004f26:	bd 06 00 00 00       	mov    ebp,0x6
c0004f2b:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f31:	0f 84 84 01 00 00    	je     c00050bb <f_open+0x238>
c0004f37:	85 ed                	test   ebp,ebp
c0004f39:	74 20                	je     c0004f5b <f_open+0xd8>
c0004f3b:	83 fd 04             	cmp    ebp,0x4
c0004f3e:	0f 85 58 03 00 00    	jne    c000529c <f_open+0x419>
c0004f44:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f48:	83 ce 08             	or     esi,0x8
c0004f4b:	e8 8a f2 ff ff       	call   c00041da <dir_register>
c0004f50:	89 c5                	mov    ebp,eax
c0004f52:	85 c0                	test   eax,eax
c0004f54:	74 2f                	je     c0004f85 <f_open+0x102>
c0004f56:	e9 41 03 00 00       	jmp    c000529c <f_open+0x419>
c0004f5b:	bd 07 00 00 00       	mov    ebp,0x7
c0004f60:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f65:	0f 85 31 03 00 00    	jne    c000529c <f_open+0x419>
c0004f6b:	bd 08 00 00 00       	mov    ebp,0x8
c0004f70:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f76:	0f 85 20 03 00 00    	jne    c000529c <f_open+0x419>
c0004f7c:	83 e7 08             	and    edi,0x8
c0004f7f:	0f 84 65 01 00 00    	je     c00050ea <f_open+0x267>
c0004f85:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f89:	8a 02                	mov    al,BYTE PTR [edx]
c0004f8b:	3c 04                	cmp    al,0x4
c0004f8d:	0f 85 97 00 00 00    	jne    c000502a <f_open+0x1a7>
c0004f93:	8d 42 10             	lea    eax,[edx+0x10]
c0004f96:	89 13                	mov    DWORD PTR [ebx],edx
c0004f98:	89 da                	mov    edx,ebx
c0004f9a:	e8 80 fd ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0004f9f:	31 d2                	xor    edx,edx
c0004fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa5:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004faa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fad:	83 c0 02             	add    eax,0x2
c0004fb0:	e8 32 cc ff ff       	call   c0001be7 <mem_set>
c0004fb5:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fba:	31 d2                	xor    edx,edx
c0004fbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fc3:	83 c0 26             	add    eax,0x26
c0004fc6:	e8 1c cc ff ff       	call   c0001be7 <mem_set>
c0004fcb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fd2:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fd6:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fdb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fde:	83 c0 08             	add    eax,0x8
c0004fe1:	e8 e3 cb ff ff       	call   c0001bc9 <st_dword>
c0004fe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fed:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ff5:	e8 b7 ea ff ff       	call   c0003ab1 <store_xdir>
c0004ffa:	89 c5                	mov    ebp,eax
c0004ffc:	85 c0                	test   eax,eax
c0004ffe:	0f 85 98 02 00 00    	jne    c000529c <f_open+0x419>
c0005004:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005007:	85 d2                	test   edx,edx
c0005009:	0f 84 db 00 00 00    	je     c00050ea <f_open+0x267>
c000500f:	31 c9                	xor    ecx,ecx
c0005011:	89 d8                	mov    eax,ebx
c0005013:	e8 8e e3 ff ff       	call   c00033a6 <remove_chain>
c0005018:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000501c:	89 c5                	mov    ebp,eax
c000501e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005021:	48                   	dec    eax
c0005022:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005025:	e9 b8 00 00 00       	jmp    c00050e2 <f_open+0x25f>
c000502a:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000502e:	89 ea                	mov    edx,ebp
c0005030:	e8 99 fc ff ff       	call   c0004cce <ld_clust.isra.0>
c0005035:	ba 00 00 21 50       	mov    edx,0x50210000
c000503a:	89 c7                	mov    edi,eax
c000503c:	8d 45 0e             	lea    eax,[ebp+0xe]
c000503f:	e8 85 cb ff ff       	call   c0001bc9 <st_dword>
c0005044:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005048:	31 c9                	xor    ecx,ecx
c000504a:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000504e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005052:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005056:	e8 9c fc ff ff       	call   c0004cf7 <st_clust.isra.1>
c000505b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000505f:	31 d2                	xor    edx,edx
c0005061:	83 c0 1c             	add    eax,0x1c
c0005064:	e8 60 cb ff ff       	call   c0001bc9 <st_dword>
c0005069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000506d:	85 ff                	test   edi,edi
c000506f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005073:	74 75                	je     c00050ea <f_open+0x267>
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	31 c9                	xor    ecx,ecx
c000507b:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000507e:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005081:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005085:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005089:	89 fa                	mov    edx,edi
c000508b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000508f:	e8 12 e3 ff ff       	call   c00033a6 <remove_chain>
c0005094:	89 c5                	mov    ebp,eax
c0005096:	85 c0                	test   eax,eax
c0005098:	0f 85 fe 01 00 00    	jne    c000529c <f_open+0x419>
c000509e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050aa:	4f                   	dec    edi
c00050ab:	e8 81 d2 ff ff       	call   c0002331 <move_window>
c00050b0:	89 c5                	mov    ebp,eax
c00050b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b6:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050b9:	eb 27                	jmp    c00050e2 <f_open+0x25f>
c00050bb:	85 ed                	test   ebp,ebp
c00050bd:	0f 85 d9 01 00 00    	jne    c000529c <f_open+0x419>
c00050c3:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050c7:	bd 04 00 00 00       	mov    ebp,0x4
c00050cc:	a8 10                	test   al,0x10
c00050ce:	0f 85 c8 01 00 00    	jne    c000529c <f_open+0x419>
c00050d4:	83 e7 02             	and    edi,0x2
c00050d7:	74 11                	je     c00050ea <f_open+0x267>
c00050d9:	bd 07 00 00 00       	mov    ebp,0x7
c00050de:	a8 01                	test   al,0x1
c00050e0:	eb 02                	jmp    c00050e4 <f_open+0x261>
c00050e2:	85 ed                	test   ebp,ebp
c00050e4:	0f 85 b2 01 00 00    	jne    c000529c <f_open+0x419>
c00050ea:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f0:	74 03                	je     c00050f5 <f_open+0x272>
c00050f2:	83 ce 40             	or     esi,0x40
c00050f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f9:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00050fc:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00050ff:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005102:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005105:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005109:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000510c:	8a 02                	mov    al,BYTE PTR [edx]
c000510e:	3c 04                	cmp    al,0x4
c0005110:	75 2a                	jne    c000513c <f_open+0x2b9>
c0005112:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005116:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000511b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000511e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005122:	30 c0                	xor    al,al
c0005124:	09 c8                	or     eax,ecx
c0005126:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005129:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000512d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005130:	8d 42 10             	lea    eax,[edx+0x10]
c0005133:	89 da                	mov    edx,ebx
c0005135:	e8 e5 fb ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000513a:	eb 1c                	jmp    c0005158 <f_open+0x2d5>
c000513c:	89 fa                	mov    edx,edi
c000513e:	e8 8b fb ff ff       	call   c0004cce <ld_clust.isra.0>
c0005143:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005146:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005149:	e8 12 ca ff ff       	call   c0001b60 <ld_dword>
c000514e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005155:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000515c:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005163:	89 03                	mov    DWORD PTR [ebx],eax
c0005165:	31 d2                	xor    edx,edx
c0005167:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000516b:	b9 00 02 00 00       	mov    ecx,0x200
c0005170:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005174:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005178:	89 f0                	mov    eax,esi
c000517a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005181:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005184:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000518b:	8d 43 50             	lea    eax,[ebx+0x50]
c000518e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005195:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000519c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a0:	e8 42 ca ff ff       	call   c0001be7 <mem_set>
c00051a5:	83 e6 20             	and    esi,0x20
c00051a8:	75 07                	jne    c00051b1 <f_open+0x32e>
c00051aa:	31 ed                	xor    ebp,ebp
c00051ac:	e9 eb 00 00 00       	jmp    c000529c <f_open+0x419>
c00051b1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051b4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051c3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051c7:	74 e1                	je     c00051aa <f_open+0x327>
c00051c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051d4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051db:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051de:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051e2:	31 ff                	xor    edi,edi
c00051e4:	c1 e5 09             	shl    ebp,0x9
c00051e7:	89 ee                	mov    esi,ebp
c00051e9:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051ed:	89 f8                	mov    eax,edi
c00051ef:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051f3:	73 22                	jae    c0005217 <f_open+0x394>
c00051f5:	89 d8                	mov    eax,ebx
c00051f7:	e8 bd dc ff ff       	call   c0002eb9 <get_fat>
c00051fc:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005200:	89 c2                	mov    edx,eax
c0005202:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005206:	83 f8 01             	cmp    eax,0x1
c0005209:	76 10                	jbe    c000521b <f_open+0x398>
c000520b:	83 f8 ff             	cmp    eax,0xffffffff
c000520e:	75 d9                	jne    c00051e9 <f_open+0x366>
c0005210:	bd 01 00 00 00       	mov    ebp,0x1
c0005215:	eb 09                	jmp    c0005220 <f_open+0x39d>
c0005217:	31 ed                	xor    ebp,ebp
c0005219:	eb 05                	jmp    c0005220 <f_open+0x39d>
c000521b:	bd 02 00 00 00       	mov    ebp,0x2
c0005220:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005223:	85 ed                	test   ebp,ebp
c0005225:	75 75                	jne    c000529c <f_open+0x419>
c0005227:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000522b:	25 ff 01 00 00       	and    eax,0x1ff
c0005230:	0f 84 74 ff ff ff    	je     c00051aa <f_open+0x327>
c0005236:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000523a:	bd 02 00 00 00       	mov    ebp,0x2
c000523f:	89 c8                	mov    eax,ecx
c0005241:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005245:	e8 a2 cb ff ff       	call   c0001dec <clst2sect>
c000524a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000524e:	89 d7                	mov    edi,edx
c0005250:	09 c7                	or     edi,eax
c0005252:	74 48                	je     c000529c <f_open+0x419>
c0005254:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005258:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000525c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005264:	0f ac fe 09          	shrd   esi,edi,0x9
c0005268:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000526c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005270:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005273:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005277:	83 ec 0c             	sub    esp,0xc
c000527a:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000527d:	6a 01                	push   0x1
c000527f:	52                   	push   edx
c0005280:	50                   	push   eax
c0005281:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005285:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005289:	50                   	push   eax
c000528a:	e8 79 c8 ff ff       	call   c0001b08 <disk_read>
c000528f:	83 c4 20             	add    esp,0x20
c0005292:	85 c0                	test   eax,eax
c0005294:	0f 95 c0             	setne  al
c0005297:	0f b6 c0             	movzx  eax,al
c000529a:	89 c5                	mov    ebp,eax
c000529c:	83 ec 0c             	sub    esp,0xc
c000529f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052a3:	e8 2c 33 00 00       	call   c00085d4 <ff_memfree>
c00052a8:	83 c4 10             	add    esp,0x10
c00052ab:	85 ed                	test   ebp,ebp
c00052ad:	74 06                	je     c00052b5 <f_open+0x432>
c00052af:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052b5:	83 c4 7c             	add    esp,0x7c
c00052b8:	89 e8                	mov    eax,ebp
c00052ba:	5b                   	pop    ebx
c00052bb:	5e                   	pop    esi
c00052bc:	5f                   	pop    edi
c00052bd:	5d                   	pop    ebp
c00052be:	c3                   	ret    

c00052bf <f_read>:
c00052bf:	55                   	push   ebp
c00052c0:	57                   	push   edi
c00052c1:	56                   	push   esi
c00052c2:	53                   	push   ebx
c00052c3:	83 ec 2c             	sub    esp,0x2c
c00052c6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052ca:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052d4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 77 cf ff ff       	call   c0002256 <validate>
c00052df:	89 c5                	mov    ebp,eax
c00052e1:	85 c0                	test   eax,eax
c00052e3:	0f 85 4c 02 00 00    	jne    c0005535 <f_read+0x276>
c00052e9:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052ed:	85 ed                	test   ebp,ebp
c00052ef:	0f 85 40 02 00 00    	jne    c0005535 <f_read+0x276>
c00052f5:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00052f9:	0f 84 31 02 00 00    	je     c0005530 <f_read+0x271>
c00052ff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005302:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005305:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005308:	bf 00 00 00 00       	mov    edi,0x0
c000530d:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005310:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005314:	89 d1                	mov    ecx,edx
c0005316:	19 f9                	sbb    ecx,edi
c0005318:	0f 83 cf 00 00 00    	jae    c00053ed <f_read+0x12e>
c000531e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005322:	e9 c6 00 00 00       	jmp    c00053ed <f_read+0x12e>
c0005327:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000532a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000532d:	89 d0                	mov    eax,edx
c000532f:	25 ff 01 00 00       	and    eax,0x1ff
c0005334:	0f 85 c9 01 00 00    	jne    c0005503 <f_read+0x244>
c000533a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000533e:	89 d6                	mov    esi,edx
c0005340:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005344:	89 cf                	mov    edi,ecx
c0005346:	48                   	dec    eax
c0005347:	0f ac fe 09          	shrd   esi,edi,0x9
c000534b:	21 f0                	and    eax,esi
c000534d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005351:	0f 84 a6 00 00 00    	je     c00053fd <f_read+0x13e>
c0005357:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000535e:	89 c8                	mov    eax,ecx
c0005360:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005363:	e8 84 ca ff ff       	call   c0001dec <clst2sect>
c0005368:	89 d7                	mov    edi,edx
c000536a:	09 c7                	or     edi,eax
c000536c:	0f 84 b4 00 00 00    	je     c0005426 <f_read+0x167>
c0005372:	31 ff                	xor    edi,edi
c0005374:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005378:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000537b:	01 c6                	add    esi,eax
c000537d:	11 d7                	adc    edi,edx
c000537f:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005387:	0f 86 fd 00 00 00    	jbe    c000548a <f_read+0x1cb>
c000538d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005391:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005395:	c1 e8 09             	shr    eax,0x9
c0005398:	89 04 24             	mov    DWORD PTR [esp],eax
c000539b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000539f:	03 14 24             	add    edx,DWORD PTR [esp]
c00053a2:	39 c2                	cmp    edx,eax
c00053a4:	76 07                	jbe    c00053ad <f_read+0xee>
c00053a6:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00053ad:	83 ec 0c             	sub    esp,0xc
c00053b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053b4:	57                   	push   edi
c00053b5:	56                   	push   esi
c00053b6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053ba:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053be:	50                   	push   eax
c00053bf:	e8 44 c7 ff ff       	call   c0001b08 <disk_read>
c00053c4:	83 c4 20             	add    esp,0x20
c00053c7:	85 c0                	test   eax,eax
c00053c9:	75 6e                	jne    c0005439 <f_read+0x17a>
c00053cb:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053cf:	78 7e                	js     c000544f <f_read+0x190>
c00053d1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053d4:	c1 e6 09             	shl    esi,0x9
c00053d7:	31 ff                	xor    edi,edi
c00053d9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e1:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053e5:	01 30                	add    DWORD PTR [eax],esi
c00053e7:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053ea:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053ed:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053f2:	0f 85 2f ff ff ff    	jne    c0005327 <f_read+0x68>
c00053f8:	e9 38 01 00 00       	jmp    c0005535 <f_read+0x276>
c00053fd:	89 c8                	mov    eax,ecx
c00053ff:	09 d0                	or     eax,edx
c0005401:	75 05                	jne    c0005408 <f_read+0x149>
c0005403:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005406:	eb 19                	jmp    c0005421 <f_read+0x162>
c0005408:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000540c:	74 09                	je     c0005417 <f_read+0x158>
c000540e:	89 d8                	mov    eax,ebx
c0005410:	e8 f8 c9 ff ff       	call   c0001e0d <clmt_clust>
c0005415:	eb 0a                	jmp    c0005421 <f_read+0x162>
c0005417:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000541a:	89 d8                	mov    eax,ebx
c000541c:	e8 98 da ff ff       	call   c0002eb9 <get_fat>
c0005421:	83 f8 01             	cmp    eax,0x1
c0005424:	77 0e                	ja     c0005434 <f_read+0x175>
c0005426:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000542a:	bd 02 00 00 00       	mov    ebp,0x2
c000542f:	e9 01 01 00 00       	jmp    c0005535 <f_read+0x276>
c0005434:	83 f8 ff             	cmp    eax,0xffffffff
c0005437:	75 0e                	jne    c0005447 <f_read+0x188>
c0005439:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000543d:	bd 01 00 00 00       	mov    ebp,0x1
c0005442:	e9 ee 00 00 00       	jmp    c0005535 <f_read+0x276>
c0005447:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000544a:	e9 08 ff ff ff       	jmp    c0005357 <f_read+0x98>
c000544f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005452:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005455:	29 f0                	sub    eax,esi
c0005457:	19 fa                	sbb    edx,edi
c0005459:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000545c:	89 d7                	mov    edi,edx
c000545e:	ba 00 00 00 00       	mov    edx,0x0
c0005463:	89 f9                	mov    ecx,edi
c0005465:	19 d1                	sbb    ecx,edx
c0005467:	0f 83 64 ff ff ff    	jae    c00053d1 <f_read+0x112>
c000546d:	89 c7                	mov    edi,eax
c000546f:	8d 53 50             	lea    edx,[ebx+0x50]
c0005472:	c1 e7 09             	shl    edi,0x9
c0005475:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005479:	b9 00 02 00 00       	mov    ecx,0x200
c000547e:	01 f8                	add    eax,edi
c0005480:	e8 4d c7 ff ff       	call   c0001bd2 <mem_cpy>
c0005485:	e9 47 ff ff ff       	jmp    c00053d1 <f_read+0x112>
c000548a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000548d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005490:	89 04 24             	mov    DWORD PTR [esp],eax
c0005493:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005497:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000549b:	75 05                	jne    c00054a2 <f_read+0x1e3>
c000549d:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a0:	74 5b                	je     c00054fd <f_read+0x23e>
c00054a2:	8d 43 50             	lea    eax,[ebx+0x50]
c00054a5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054ad:	79 2a                	jns    c00054d9 <f_read+0x21a>
c00054af:	83 ec 0c             	sub    esp,0xc
c00054b2:	6a 01                	push   0x1
c00054b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054c4:	50                   	push   eax
c00054c5:	e8 54 c6 ff ff       	call   c0001b1e <disk_write>
c00054ca:	83 c4 20             	add    esp,0x20
c00054cd:	85 c0                	test   eax,eax
c00054cf:	0f 85 64 ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054d5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054d9:	83 ec 0c             	sub    esp,0xc
c00054dc:	6a 01                	push   0x1
c00054de:	57                   	push   edi
c00054df:	56                   	push   esi
c00054e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054e8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054ec:	50                   	push   eax
c00054ed:	e8 16 c6 ff ff       	call   c0001b08 <disk_read>
c00054f2:	83 c4 20             	add    esp,0x20
c00054f5:	85 c0                	test   eax,eax
c00054f7:	0f 85 3c ff ff ff    	jne    c0005439 <f_read+0x17a>
c00054fd:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005500:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005503:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005506:	ba 00 02 00 00       	mov    edx,0x200
c000550b:	25 ff 01 00 00       	and    eax,0x1ff
c0005510:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005514:	29 c2                	sub    edx,eax
c0005516:	39 d6                	cmp    esi,edx
c0005518:	76 02                	jbe    c000551c <f_read+0x25d>
c000551a:	89 d6                	mov    esi,edx
c000551c:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005520:	89 f1                	mov    ecx,esi
c0005522:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005526:	e8 a7 c6 ff ff       	call   c0001bd2 <mem_cpy>
c000552b:	e9 a7 fe ff ff       	jmp    c00053d7 <f_read+0x118>
c0005530:	bd 07 00 00 00       	mov    ebp,0x7
c0005535:	83 c4 2c             	add    esp,0x2c
c0005538:	89 e8                	mov    eax,ebp
c000553a:	5b                   	pop    ebx
c000553b:	5e                   	pop    esi
c000553c:	5f                   	pop    edi
c000553d:	5d                   	pop    ebp
c000553e:	c3                   	ret    

c000553f <f_write>:
c000553f:	55                   	push   ebp
c0005540:	57                   	push   edi
c0005541:	56                   	push   esi
c0005542:	53                   	push   ebx
c0005543:	83 ec 2c             	sub    esp,0x2c
c0005546:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000554a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000554e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005554:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005558:	89 d8                	mov    eax,ebx
c000555a:	e8 f7 cc ff ff       	call   c0002256 <validate>
c000555f:	89 c5                	mov    ebp,eax
c0005561:	85 c0                	test   eax,eax
c0005563:	0f 85 86 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005569:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000556d:	85 ed                	test   ebp,ebp
c000556f:	0f 85 7a 02 00 00    	jne    c00057ef <f_write+0x2b0>
c0005575:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005579:	0f 84 6b 02 00 00    	je     c00057ea <f_write+0x2ab>
c000557f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005583:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005586:	0f 84 43 01 00 00    	je     c00056cf <f_write+0x190>
c000558c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000558f:	89 c1                	mov    ecx,eax
c0005591:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005595:	0f 83 34 01 00 00    	jae    c00056cf <f_write+0x190>
c000559b:	f7 d0                	not    eax
c000559d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a1:	e9 29 01 00 00       	jmp    c00056cf <f_write+0x190>
c00055a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055a9:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055ac:	89 d0                	mov    eax,edx
c00055ae:	25 ff 01 00 00       	and    eax,0x1ff
c00055b3:	0f 85 00 02 00 00    	jne    c00057b9 <f_write+0x27a>
c00055b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055bd:	89 d6                	mov    esi,edx
c00055bf:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055c3:	89 cf                	mov    edi,ecx
c00055c5:	48                   	dec    eax
c00055c6:	0f ac fe 09          	shrd   esi,edi,0x9
c00055ca:	21 f0                	and    eax,esi
c00055cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d0:	0f 84 06 01 00 00    	je     c00056dc <f_write+0x19d>
c00055d6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055da:	0f 88 6e 01 00 00    	js     c000574e <f_write+0x20f>
c00055e0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055e7:	89 c8                	mov    eax,ecx
c00055e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055ed:	e8 fa c7 ff ff       	call   c0001dec <clst2sect>
c00055f2:	89 d1                	mov    ecx,edx
c00055f4:	09 c1                	or     ecx,eax
c00055f6:	0f 84 1c 01 00 00    	je     c0005718 <f_write+0x1d9>
c00055fc:	31 ff                	xor    edi,edi
c00055fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005602:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005606:	01 c6                	add    esi,eax
c0005608:	11 d7                	adc    edi,edx
c000560a:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005612:	0f 86 63 01 00 00    	jbe    c000577b <f_write+0x23c>
c0005618:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000561c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005620:	c1 e8 09             	shr    eax,0x9
c0005623:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005627:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000562b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000562f:	39 c2                	cmp    edx,eax
c0005631:	76 08                	jbe    c000563b <f_write+0xfc>
c0005633:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005637:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000563b:	83 ec 0c             	sub    esp,0xc
c000563e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005642:	57                   	push   edi
c0005643:	56                   	push   esi
c0005644:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005648:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000564c:	50                   	push   eax
c000564d:	e8 cc c4 ff ff       	call   c0001b1e <disk_write>
c0005652:	83 c4 20             	add    esp,0x20
c0005655:	85 c0                	test   eax,eax
c0005657:	0f 85 ce 00 00 00    	jne    c000572b <f_write+0x1ec>
c000565d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005660:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005663:	29 f0                	sub    eax,esi
c0005665:	19 fa                	sbb    edx,edi
c0005667:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000566b:	89 d7                	mov    edi,edx
c000566d:	ba 00 00 00 00       	mov    edx,0x0
c0005672:	89 f9                	mov    ecx,edi
c0005674:	19 d1                	sbb    ecx,edx
c0005676:	73 1c                	jae    c0005694 <f_write+0x155>
c0005678:	89 c7                	mov    edi,eax
c000567a:	b9 00 02 00 00       	mov    ecx,0x200
c000567f:	c1 e7 09             	shl    edi,0x9
c0005682:	8d 43 50             	lea    eax,[ebx+0x50]
c0005685:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005689:	89 fa                	mov    edx,edi
c000568b:	e8 42 c5 ff ff       	call   c0001bd2 <mem_cpy>
c0005690:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005694:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005698:	c1 e6 09             	shl    esi,0x9
c000569b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000569f:	31 ff                	xor    edi,edi
c00056a1:	01 30                	add    DWORD PTR [eax],esi
c00056a3:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056a7:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056ab:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056ae:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056b4:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056b7:	89 c1                	mov    ecx,eax
c00056b9:	39 f2                	cmp    edx,esi
c00056bb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056be:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c1:	19 f9                	sbb    ecx,edi
c00056c3:	73 04                	jae    c00056c9 <f_write+0x18a>
c00056c5:	89 f2                	mov    edx,esi
c00056c7:	89 f8                	mov    eax,edi
c00056c9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056cc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056cf:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056d4:	0f 85 cc fe ff ff    	jne    c00055a6 <f_write+0x67>
c00056da:	eb 2e                	jmp    c000570a <f_write+0x1cb>
c00056dc:	89 c8                	mov    eax,ecx
c00056de:	09 d0                	or     eax,edx
c00056e0:	75 0b                	jne    c00056ed <f_write+0x1ae>
c00056e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056e5:	31 d2                	xor    edx,edx
c00056e7:	85 c0                	test   eax,eax
c00056e9:	75 28                	jne    c0005713 <f_write+0x1d4>
c00056eb:	eb 12                	jmp    c00056ff <f_write+0x1c0>
c00056ed:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f1:	74 09                	je     c00056fc <f_write+0x1bd>
c00056f3:	89 d8                	mov    eax,ebx
c00056f5:	e8 13 c7 ff ff       	call   c0001e0d <clmt_clust>
c00056fa:	eb 0a                	jmp    c0005706 <f_write+0x1c7>
c00056fc:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056ff:	89 d8                	mov    eax,ebx
c0005701:	e8 a1 da ff ff       	call   c00031a7 <create_chain>
c0005706:	85 c0                	test   eax,eax
c0005708:	75 09                	jne    c0005713 <f_write+0x1d4>
c000570a:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000570e:	e9 dc 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005713:	83 f8 01             	cmp    eax,0x1
c0005716:	75 0e                	jne    c0005726 <f_write+0x1e7>
c0005718:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000571c:	bd 02 00 00 00       	mov    ebp,0x2
c0005721:	e9 c9 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005726:	83 f8 ff             	cmp    eax,0xffffffff
c0005729:	75 0e                	jne    c0005739 <f_write+0x1fa>
c000572b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000572f:	bd 01 00 00 00       	mov    ebp,0x1
c0005734:	e9 b6 00 00 00       	jmp    c00057ef <f_write+0x2b0>
c0005739:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000573c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005740:	0f 85 90 fe ff ff    	jne    c00055d6 <f_write+0x97>
c0005746:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005749:	e9 88 fe ff ff       	jmp    c00055d6 <f_write+0x97>
c000574e:	83 ec 0c             	sub    esp,0xc
c0005751:	8d 43 50             	lea    eax,[ebx+0x50]
c0005754:	6a 01                	push   0x1
c0005756:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005759:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000575c:	50                   	push   eax
c000575d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005761:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005765:	50                   	push   eax
c0005766:	e8 b3 c3 ff ff       	call   c0001b1e <disk_write>
c000576b:	83 c4 20             	add    esp,0x20
c000576e:	85 c0                	test   eax,eax
c0005770:	75 b9                	jne    c000572b <f_write+0x1ec>
c0005772:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005776:	e9 65 fe ff ff       	jmp    c00055e0 <f_write+0xa1>
c000577b:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000577e:	75 05                	jne    c0005785 <f_write+0x246>
c0005780:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005783:	74 2e                	je     c00057b3 <f_write+0x274>
c0005785:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005788:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000578b:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000578e:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005791:	73 20                	jae    c00057b3 <f_write+0x274>
c0005793:	83 ec 0c             	sub    esp,0xc
c0005796:	8d 43 50             	lea    eax,[ebx+0x50]
c0005799:	6a 01                	push   0x1
c000579b:	57                   	push   edi
c000579c:	56                   	push   esi
c000579d:	50                   	push   eax
c000579e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057a2:	50                   	push   eax
c00057a3:	e8 60 c3 ff ff       	call   c0001b08 <disk_read>
c00057a8:	83 c4 20             	add    esp,0x20
c00057ab:	85 c0                	test   eax,eax
c00057ad:	0f 85 78 ff ff ff    	jne    c000572b <f_write+0x1ec>
c00057b3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057b6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057b9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057bc:	ba 00 02 00 00       	mov    edx,0x200
c00057c1:	25 ff 01 00 00       	and    eax,0x1ff
c00057c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057ca:	29 c2                	sub    edx,eax
c00057cc:	39 d6                	cmp    esi,edx
c00057ce:	76 02                	jbe    c00057d2 <f_write+0x293>
c00057d0:	89 d6                	mov    esi,edx
c00057d2:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057d6:	89 f1                	mov    ecx,esi
c00057d8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057dc:	e8 f1 c3 ff ff       	call   c0001bd2 <mem_cpy>
c00057e1:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057e5:	e9 b1 fe ff ff       	jmp    c000569b <f_write+0x15c>
c00057ea:	bd 07 00 00 00       	mov    ebp,0x7
c00057ef:	83 c4 2c             	add    esp,0x2c
c00057f2:	89 e8                	mov    eax,ebp
c00057f4:	5b                   	pop    ebx
c00057f5:	5e                   	pop    esi
c00057f6:	5f                   	pop    edi
c00057f7:	5d                   	pop    ebp
c00057f8:	c3                   	ret    

c00057f9 <f_sync>:
c00057f9:	56                   	push   esi
c00057fa:	53                   	push   ebx
c00057fb:	83 ec 64             	sub    esp,0x64
c00057fe:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005802:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005806:	89 d8                	mov    eax,ebx
c0005808:	e8 49 ca ff ff       	call   c0002256 <validate>
c000580d:	85 c0                	test   eax,eax
c000580f:	0f 85 ba 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005815:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005818:	f6 c2 40             	test   dl,0x40
c000581b:	0f 84 ae 01 00 00    	je     c00059cf <f_sync+0x1d6>
c0005821:	84 d2                	test   dl,dl
c0005823:	79 33                	jns    c0005858 <f_sync+0x5f>
c0005825:	83 ec 0c             	sub    esp,0xc
c0005828:	8d 43 50             	lea    eax,[ebx+0x50]
c000582b:	6a 01                	push   0x1
c000582d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005830:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005833:	50                   	push   eax
c0005834:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005838:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000583c:	50                   	push   eax
c000583d:	e8 dc c2 ff ff       	call   c0001b1e <disk_write>
c0005842:	83 c4 20             	add    esp,0x20
c0005845:	89 c2                	mov    edx,eax
c0005847:	b8 01 00 00 00       	mov    eax,0x1
c000584c:	85 d2                	test   edx,edx
c000584e:	0f 85 7b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005854:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005858:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000585c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000585f:	0f 85 11 01 00 00    	jne    c0005976 <f_sync+0x17d>
c0005865:	89 d8                	mov    eax,ebx
c0005867:	e8 13 d6 ff ff       	call   c0002e7f <fill_first_frag>
c000586c:	85 c0                	test   eax,eax
c000586e:	0f 85 5b 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005874:	83 c9 ff             	or     ecx,0xffffffff
c0005877:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000587a:	89 d8                	mov    eax,ebx
c000587c:	e8 c9 d5 ff ff       	call   c0002e4a <fill_last_frag>
c0005881:	85 c0                	test   eax,eax
c0005883:	0f 85 46 01 00 00    	jne    c00059cf <f_sync+0x1d6>
c0005889:	83 ec 0c             	sub    esp,0xc
c000588c:	68 60 04 00 00       	push   0x460
c0005891:	e8 26 2d 00 00       	call   c00085bc <ff_memalloc>
c0005896:	83 c4 10             	add    esp,0x10
c0005899:	89 c6                	mov    esi,eax
c000589b:	b8 11 00 00 00       	mov    eax,0x11
c00058a0:	85 f6                	test   esi,esi
c00058a2:	0f 84 27 01 00 00    	je     c00059cf <f_sync+0x1d6>
c00058a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ac:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058b2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058b5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058b8:	89 da                	mov    edx,ebx
c00058ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058be:	e8 af df ff ff       	call   c0003872 <load_obj_xdir>
c00058c3:	85 c0                	test   eax,eax
c00058c5:	0f 85 95 00 00 00    	jne    c0005960 <f_sync+0x167>
c00058cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058cf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058d2:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058d6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058d9:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058dc:	83 ca 01             	or     edx,0x1
c00058df:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058e2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058e8:	83 c0 34             	add    eax,0x34
c00058eb:	e8 d9 c2 ff ff       	call   c0001bc9 <st_dword>
c00058f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058f4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058fa:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00058fd:	83 c0 38             	add    eax,0x38
c0005900:	e8 c7 c2 ff ff       	call   c0001bcc <st_qword>
c0005905:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000590c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000590f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005912:	83 c0 28             	add    eax,0x28
c0005915:	e8 b2 c2 ff ff       	call   c0001bcc <st_qword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005923:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005926:	83 c0 0c             	add    eax,0xc
c0005929:	e8 9b c2 ff ff       	call   c0001bc9 <st_dword>
c000592e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005932:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005935:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005939:	31 d2                	xor    edx,edx
c000593b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000593e:	83 c0 10             	add    eax,0x10
c0005941:	e8 83 c2 ff ff       	call   c0001bc9 <st_dword>
c0005946:	8d 44 24 14          	lea    eax,[esp+0x14]
c000594a:	e8 62 e1 ff ff       	call   c0003ab1 <store_xdir>
c000594f:	85 c0                	test   eax,eax
c0005951:	75 0d                	jne    c0005960 <f_sync+0x167>
c0005953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005957:	e8 00 eb ff ff       	call   c000445c <sync_fs>
c000595c:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005960:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005964:	83 ec 0c             	sub    esp,0xc
c0005967:	56                   	push   esi
c0005968:	e8 67 2c 00 00       	call   c00085d4 <ff_memfree>
c000596d:	83 c4 10             	add    esp,0x10
c0005970:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005974:	eb 59                	jmp    c00059cf <f_sync+0x1d6>
c0005976:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005979:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000597c:	e8 b0 c9 ff ff       	call   c0002331 <move_window>
c0005981:	85 c0                	test   eax,eax
c0005983:	75 4a                	jne    c00059cf <f_sync+0x1d6>
c0005985:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005988:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000598c:	89 f2                	mov    edx,esi
c000598e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005991:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005993:	e8 5f f3 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0005998:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000599b:	8d 46 1c             	lea    eax,[esi+0x1c]
c000599e:	e8 26 c2 ff ff       	call   c0001bc9 <st_dword>
c00059a3:	8d 46 16             	lea    eax,[esi+0x16]
c00059a6:	ba 00 00 21 50       	mov    edx,0x50210000
c00059ab:	e8 19 c2 ff ff       	call   c0001bc9 <st_dword>
c00059b0:	8d 46 12             	lea    eax,[esi+0x12]
c00059b3:	31 d2                	xor    edx,edx
c00059b5:	e8 0b c2 ff ff       	call   c0001bc5 <st_word>
c00059ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059be:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	e8 91 ea ff ff       	call   c000445c <sync_fs>
c00059cb:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059cf:	83 c4 64             	add    esp,0x64
c00059d2:	5b                   	pop    ebx
c00059d3:	5e                   	pop    esi
c00059d4:	c3                   	ret    

c00059d5 <f_close>:
c00059d5:	53                   	push   ebx
c00059d6:	83 ec 24             	sub    esp,0x24
c00059d9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059dd:	53                   	push   ebx
c00059de:	e8 16 fe ff ff       	call   c00057f9 <f_sync>
c00059e3:	83 c4 10             	add    esp,0x10
c00059e6:	85 c0                	test   eax,eax
c00059e8:	75 15                	jne    c00059ff <f_close+0x2a>
c00059ea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059ee:	89 d8                	mov    eax,ebx
c00059f0:	e8 61 c8 ff ff       	call   c0002256 <validate>
c00059f5:	85 c0                	test   eax,eax
c00059f7:	75 06                	jne    c00059ff <f_close+0x2a>
c00059f9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00059ff:	83 c4 18             	add    esp,0x18
c0005a02:	5b                   	pop    ebx
c0005a03:	c3                   	ret    

c0005a04 <f_lseek>:
c0005a04:	55                   	push   ebp
c0005a05:	57                   	push   edi
c0005a06:	56                   	push   esi
c0005a07:	53                   	push   ebx
c0005a08:	83 ec 3c             	sub    esp,0x3c
c0005a0b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a0f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a13:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a17:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a1e:	89 d8                	mov    eax,ebx
c0005a20:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a24:	e8 2d c8 ff ff       	call   c0002256 <validate>
c0005a29:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a2d:	85 c0                	test   eax,eax
c0005a2f:	0f 85 7a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a35:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a3d:	85 c0                	test   eax,eax
c0005a3f:	0f 85 6a 04 00 00    	jne    c0005eaf <f_lseek+0x4ab>
c0005a45:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a49:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a4c:	74 0c                	je     c0005a5a <f_lseek+0x56>
c0005a4e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a51:	85 c0                	test   eax,eax
c0005a53:	75 1f                	jne    c0005a74 <f_lseek+0x70>
c0005a55:	e9 b5 01 00 00       	jmp    c0005c0f <f_lseek+0x20b>
c0005a5a:	83 c9 ff             	or     ecx,0xffffffff
c0005a5d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a60:	89 d8                	mov    eax,ebx
c0005a62:	e8 e3 d3 ff ff       	call   c0002e4a <fill_last_frag>
c0005a67:	85 c0                	test   eax,eax
c0005a69:	74 e3                	je     c0005a4e <f_lseek+0x4a>
c0005a6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a6f:	e9 3b 04 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005a74:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a79:	0f 85 ac 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a7f:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a83:	0f 85 a2 00 00 00    	jne    c0005b2b <f_lseek+0x127>
c0005a89:	8d 78 04             	lea    edi,[eax+0x4]
c0005a8c:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a91:	be 02 00 00 00       	mov    esi,0x2
c0005a96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a9a:	85 ed                	test   ebp,ebp
c0005a9c:	74 73                	je     c0005b11 <f_lseek+0x10d>
c0005a9e:	89 e9                	mov    ecx,ebp
c0005aa0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aa7:	ff 04 24             	inc    DWORD PTR [esp]
c0005aaa:	89 ca                	mov    edx,ecx
c0005aac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab0:	89 d8                	mov    eax,ebx
c0005ab2:	e8 02 d4 ff ff       	call   c0002eb9 <get_fat>
c0005ab7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005abb:	83 f8 01             	cmp    eax,0x1
c0005abe:	77 11                	ja     c0005ad1 <f_lseek+0xcd>
c0005ac0:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005ac4:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005acc:	e9 de 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ad1:	83 f8 ff             	cmp    eax,0xffffffff
c0005ad4:	75 11                	jne    c0005ae7 <f_lseek+0xe3>
c0005ad6:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ada:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005ae2:	e9 c8 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005ae7:	8d 51 01             	lea    edx,[ecx+0x1]
c0005aea:	89 c1                	mov    ecx,eax
c0005aec:	39 c2                	cmp    edx,eax
c0005aee:	74 b7                	je     c0005aa7 <f_lseek+0xa3>
c0005af0:	83 c6 02             	add    esi,0x2
c0005af3:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005af7:	72 0b                	jb     c0005b04 <f_lseek+0x100>
c0005af9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005afc:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005aff:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b01:	83 c7 08             	add    edi,0x8
c0005b04:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b08:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b0b:	76 04                	jbe    c0005b11 <f_lseek+0x10d>
c0005b0d:	89 c5                	mov    ebp,eax
c0005b0f:	eb 8d                	jmp    c0005a9e <f_lseek+0x9a>
c0005b11:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b14:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b18:	89 30                	mov    DWORD PTR [eax],esi
c0005b1a:	0f 87 87 03 00 00    	ja     c0005ea7 <f_lseek+0x4a3>
c0005b20:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b26:	e9 84 03 00 00       	jmp    c0005eaf <f_lseek+0x4ab>
c0005b2b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b2e:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b35:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b3d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b44:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b48:	73 0f                	jae    c0005b59 <f_lseek+0x155>
c0005b4a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b55:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b5d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b61:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b64:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b6b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b6f:	0f 84 3a 03 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005b75:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b79:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b7d:	83 c6 ff             	add    esi,0xffffffff
c0005b80:	89 d8                	mov    eax,ebx
c0005b82:	83 d7 ff             	adc    edi,0xffffffff
c0005b85:	89 f2                	mov    edx,esi
c0005b87:	89 f9                	mov    ecx,edi
c0005b89:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b90:	e8 78 c2 ff ff       	call   c0001e0d <clmt_clust>
c0005b95:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005b99:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b9c:	89 c2                	mov    edx,eax
c0005b9e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ba2:	89 c8                	mov    eax,ecx
c0005ba4:	e8 43 c2 ff ff       	call   c0001dec <clst2sect>
c0005ba9:	89 d7                	mov    edi,edx
c0005bab:	09 c7                	or     edi,eax
c0005bad:	0f 84 0d ff ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005bb3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bb7:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bbd:	0f 84 ec 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bc3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bcb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bce:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bd6:	4d                   	dec    ebp
c0005bd7:	31 ff                	xor    edi,edi
c0005bd9:	21 ee                	and    esi,ebp
c0005bdb:	01 c6                	add    esi,eax
c0005bdd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be0:	11 d7                	adc    edi,edx
c0005be2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005be5:	39 fa                	cmp    edx,edi
c0005be7:	75 08                	jne    c0005bf1 <f_lseek+0x1ed>
c0005be9:	39 f0                	cmp    eax,esi
c0005beb:	0f 84 be 02 00 00    	je     c0005eaf <f_lseek+0x4ab>
c0005bf1:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bf4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005bf8:	0f 89 80 02 00 00    	jns    c0005e7e <f_lseek+0x47a>
c0005bfe:	83 ec 0c             	sub    esp,0xc
c0005c01:	6a 01                	push   0x1
c0005c03:	52                   	push   edx
c0005c04:	50                   	push   eax
c0005c05:	55                   	push   ebp
c0005c06:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c0a:	e9 5a 02 00 00       	jmp    c0005e69 <f_lseek+0x465>
c0005c0f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c13:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c16:	74 16                	je     c0005c2e <f_lseek+0x22a>
c0005c18:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c1d:	76 0f                	jbe    c0005c2e <f_lseek+0x22a>
c0005c1f:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c26:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c2e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c34:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c37:	89 c7                	mov    edi,eax
c0005c39:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c3d:	73 0d                	jae    c0005c4c <f_lseek+0x248>
c0005c3f:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c43:	75 07                	jne    c0005c4c <f_lseek+0x248>
c0005c45:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c4c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c4f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c52:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c56:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c5d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c64:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c67:	75 09                	jne    c0005c72 <f_lseek+0x26e>
c0005c69:	31 f6                	xor    esi,esi
c0005c6b:	31 ff                	xor    edi,edi
c0005c6d:	e9 af 01 00 00       	jmp    c0005e21 <f_lseek+0x41d>
c0005c72:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c76:	89 d7                	mov    edi,edx
c0005c78:	c1 e1 09             	shl    ecx,0x9
c0005c7b:	09 c7                	or     edi,eax
c0005c7d:	89 cd                	mov    ebp,ecx
c0005c7f:	74 6d                	je     c0005cee <f_lseek+0x2ea>
c0005c81:	83 c0 ff             	add    eax,0xffffffff
c0005c84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c88:	83 d2 ff             	adc    edx,0xffffffff
c0005c8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c92:	83 c0 ff             	add    eax,0xffffffff
c0005c95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c99:	83 d2 ff             	adc    edx,0xffffffff
c0005c9c:	31 ff                	xor    edi,edi
c0005c9e:	57                   	push   edi
c0005c9f:	51                   	push   ecx
c0005ca0:	52                   	push   edx
c0005ca1:	50                   	push   eax
c0005ca2:	e8 29 c1 01 00       	call   c0021dd0 <__udivdi3>
c0005ca7:	83 c4 10             	add    esp,0x10
c0005caa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cb2:	57                   	push   edi
c0005cb3:	55                   	push   ebp
c0005cb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cbc:	e8 0f c1 01 00       	call   c0021dd0 <__udivdi3>
c0005cc1:	83 c4 10             	add    esp,0x10
c0005cc4:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cc8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005ccc:	19 d1                	sbb    ecx,edx
c0005cce:	72 1e                	jb     c0005cee <f_lseek+0x2ea>
c0005cd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cd4:	89 e9                	mov    ecx,ebp
c0005cd6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cd9:	f7 d9                	neg    ecx
c0005cdb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005cde:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ce2:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ce5:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ce8:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cec:	eb 28                	jmp    c0005d16 <f_lseek+0x312>
c0005cee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf1:	85 c0                	test   eax,eax
c0005cf3:	75 1e                	jne    c0005d13 <f_lseek+0x30f>
c0005cf5:	31 d2                	xor    edx,edx
c0005cf7:	89 d8                	mov    eax,ebx
c0005cf9:	e8 a9 d4 ff ff       	call   c00031a7 <create_chain>
c0005cfe:	83 f8 01             	cmp    eax,0x1
c0005d01:	0f 84 b9 fd ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005d07:	83 f8 ff             	cmp    eax,0xffffffff
c0005d0a:	0f 84 c6 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005d10:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d13:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d16:	85 c0                	test   eax,eax
c0005d18:	0f 84 4b ff ff ff    	je     c0005c69 <f_lseek+0x265>
c0005d1e:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d22:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d2a:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d31:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d34:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d37:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d3b:	0f 83 9d 00 00 00    	jae    c0005dde <f_lseek+0x3da>
c0005d41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d45:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d49:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d4c:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d50:	01 f2                	add    edx,esi
c0005d52:	11 f9                	adc    ecx,edi
c0005d54:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d58:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d5c:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d5f:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d62:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d65:	f6 c1 02             	test   cl,0x2
c0005d68:	74 35                	je     c0005d9f <f_lseek+0x39b>
c0005d6a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d6e:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d71:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d74:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d78:	73 16                	jae    c0005d90 <f_lseek+0x38c>
c0005d7a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d7e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d82:	88 ca                	mov    dl,cl
c0005d84:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d87:	83 ca 40             	or     edx,0x40
c0005d8a:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d8d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d90:	89 c2                	mov    edx,eax
c0005d92:	89 d8                	mov    eax,ebx
c0005d94:	e8 0e d4 ff ff       	call   c00031a7 <create_chain>
c0005d99:	85 c0                	test   eax,eax
c0005d9b:	75 0b                	jne    c0005da8 <f_lseek+0x3a4>
c0005d9d:	eb 30                	jmp    c0005dcf <f_lseek+0x3cb>
c0005d9f:	89 c2                	mov    edx,eax
c0005da1:	89 d8                	mov    eax,ebx
c0005da3:	e8 11 d1 ff ff       	call   c0002eb9 <get_fat>
c0005da8:	83 f8 ff             	cmp    eax,0xffffffff
c0005dab:	0f 84 25 fd ff ff    	je     c0005ad6 <f_lseek+0xd2>
c0005db1:	83 f8 01             	cmp    eax,0x1
c0005db4:	0f 86 06 fd ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dba:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dbe:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc1:	0f 86 f9 fc ff ff    	jbe    c0005ac0 <f_lseek+0xbc>
c0005dc7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dca:	e9 5b ff ff ff       	jmp    c0005d2a <f_lseek+0x326>
c0005dcf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005dde:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de1:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005de5:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005de8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005deb:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005dee:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005df4:	0f 84 6f fe ff ff    	je     c0005c69 <f_lseek+0x265>
c0005dfa:	89 c2                	mov    edx,eax
c0005dfc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e00:	e8 e7 bf ff ff       	call   c0001dec <clst2sect>
c0005e05:	89 d7                	mov    edi,edx
c0005e07:	09 c7                	or     edi,eax
c0005e09:	0f 84 b1 fc ff ff    	je     c0005ac0 <f_lseek+0xbc>
c0005e0f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e13:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e16:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e1a:	c1 ef 09             	shr    edi,0x9
c0005e1d:	01 c6                	add    esi,eax
c0005e1f:	11 d7                	adc    edi,edx
c0005e21:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e24:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e27:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e2a:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e2d:	19 d1                	sbb    ecx,edx
c0005e2f:	73 0a                	jae    c0005e3b <f_lseek+0x437>
c0005e31:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e34:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e37:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e3b:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e40:	74 6d                	je     c0005eaf <f_lseek+0x4ab>
c0005e42:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e45:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e48:	39 fa                	cmp    edx,edi
c0005e4a:	75 04                	jne    c0005e50 <f_lseek+0x44c>
c0005e4c:	39 f0                	cmp    eax,esi
c0005e4e:	74 5f                	je     c0005eaf <f_lseek+0x4ab>
c0005e50:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e53:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e57:	79 25                	jns    c0005e7e <f_lseek+0x47a>
c0005e59:	83 ec 0c             	sub    esp,0xc
c0005e5c:	6a 01                	push   0x1
c0005e5e:	52                   	push   edx
c0005e5f:	50                   	push   eax
c0005e60:	55                   	push   ebp
c0005e61:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e65:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e69:	50                   	push   eax
c0005e6a:	e8 af bc ff ff       	call   c0001b1e <disk_write>
c0005e6f:	83 c4 20             	add    esp,0x20
c0005e72:	85 c0                	test   eax,eax
c0005e74:	0f 85 5c fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e7a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e7e:	83 ec 0c             	sub    esp,0xc
c0005e81:	6a 01                	push   0x1
c0005e83:	57                   	push   edi
c0005e84:	56                   	push   esi
c0005e85:	55                   	push   ebp
c0005e86:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e8a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e8e:	50                   	push   eax
c0005e8f:	e8 74 bc ff ff       	call   c0001b08 <disk_read>
c0005e94:	83 c4 20             	add    esp,0x20
c0005e97:	85 c0                	test   eax,eax
c0005e99:	0f 85 37 fc ff ff    	jne    c0005ad6 <f_lseek+0xd2>
c0005e9f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005ea2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ea5:	eb 08                	jmp    c0005eaf <f_lseek+0x4ab>
c0005ea7:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005eb3:	83 c4 3c             	add    esp,0x3c
c0005eb6:	5b                   	pop    ebx
c0005eb7:	5e                   	pop    esi
c0005eb8:	5f                   	pop    edi
c0005eb9:	5d                   	pop    ebp
c0005eba:	c3                   	ret    

c0005ebb <f_opendir>:
c0005ebb:	56                   	push   esi
c0005ebc:	b8 09 00 00 00       	mov    eax,0x9
c0005ec1:	53                   	push   ebx
c0005ec2:	83 ec 24             	sub    esp,0x24
c0005ec5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ec9:	85 db                	test   ebx,ebx
c0005ecb:	0f 84 e6 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005ed1:	31 c9                	xor    ecx,ecx
c0005ed3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ed7:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005edb:	e8 03 c7 ff ff       	call   c00025e3 <mount_volume>
c0005ee0:	85 c0                	test   eax,eax
c0005ee2:	0f 85 c9 00 00 00    	jne    c0005fb1 <f_opendir+0xf6>
c0005ee8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eec:	83 ec 0c             	sub    esp,0xc
c0005eef:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef1:	68 60 04 00 00       	push   0x460
c0005ef6:	e8 c1 26 00 00       	call   c00085bc <ff_memalloc>
c0005efb:	83 c4 10             	add    esp,0x10
c0005efe:	89 c6                	mov    esi,eax
c0005f00:	b8 11 00 00 00       	mov    eax,0x11
c0005f05:	85 f6                	test   esi,esi
c0005f07:	0f 84 aa 00 00 00    	je     c0005fb7 <f_opendir+0xfc>
c0005f0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f11:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f17:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f1a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f1d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f21:	89 d8                	mov    eax,ebx
c0005f23:	e8 31 ee ff ff       	call   c0004d59 <follow_path>
c0005f28:	85 c0                	test   eax,eax
c0005f2a:	75 61                	jne    c0005f8d <f_opendir+0xd2>
c0005f2c:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f30:	78 46                	js     c0005f78 <f_opendir+0xbd>
c0005f32:	b8 05 00 00 00       	mov    eax,0x5
c0005f37:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f3b:	74 50                	je     c0005f8d <f_opendir+0xd2>
c0005f3d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f41:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f43:	3c 04                	cmp    al,0x4
c0005f45:	75 26                	jne    c0005f6d <f_opendir+0xb2>
c0005f47:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f4a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f50:	30 d2                	xor    dl,dl
c0005f52:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f56:	09 c2                	or     edx,eax
c0005f58:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f5b:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f5e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f61:	89 da                	mov    edx,ebx
c0005f63:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f66:	e8 b4 ed ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c0005f6b:	eb 0b                	jmp    c0005f78 <f_opendir+0xbd>
c0005f6d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f70:	e8 59 ed ff ff       	call   c0004cce <ld_clust.isra.0>
c0005f75:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f7c:	31 d2                	xor    edx,edx
c0005f7e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f82:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f86:	89 d8                	mov    eax,ebx
c0005f88:	e8 22 d1 ff ff       	call   c00030af <dir_sdi>
c0005f8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f91:	83 ec 0c             	sub    esp,0xc
c0005f94:	56                   	push   esi
c0005f95:	e8 3a 26 00 00       	call   c00085d4 <ff_memfree>
c0005f9a:	83 c4 10             	add    esp,0x10
c0005f9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa1:	83 f8 04             	cmp    eax,0x4
c0005fa4:	74 06                	je     c0005fac <f_opendir+0xf1>
c0005fa6:	85 c0                	test   eax,eax
c0005fa8:	74 0d                	je     c0005fb7 <f_opendir+0xfc>
c0005faa:	eb 05                	jmp    c0005fb1 <f_opendir+0xf6>
c0005fac:	b8 05 00 00 00       	mov    eax,0x5
c0005fb1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fb7:	83 c4 24             	add    esp,0x24
c0005fba:	5b                   	pop    ebx
c0005fbb:	5e                   	pop    esi
c0005fbc:	c3                   	ret    

c0005fbd <f_closedir>:
c0005fbd:	53                   	push   ebx
c0005fbe:	83 ec 18             	sub    esp,0x18
c0005fc1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fc5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fc9:	89 d8                	mov    eax,ebx
c0005fcb:	e8 86 c2 ff ff       	call   c0002256 <validate>
c0005fd0:	85 c0                	test   eax,eax
c0005fd2:	75 06                	jne    c0005fda <f_closedir+0x1d>
c0005fd4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fda:	83 c4 18             	add    esp,0x18
c0005fdd:	5b                   	pop    ebx
c0005fde:	c3                   	ret    

c0005fdf <f_readdir>:
c0005fdf:	57                   	push   edi
c0005fe0:	56                   	push   esi
c0005fe1:	53                   	push   ebx
c0005fe2:	83 ec 20             	sub    esp,0x20
c0005fe5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fe9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005fed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff1:	89 d8                	mov    eax,ebx
c0005ff3:	e8 5e c2 ff ff       	call   c0002256 <validate>
c0005ff8:	85 c0                	test   eax,eax
c0005ffa:	75 77                	jne    c0006073 <f_readdir+0x94>
c0005ffc:	85 ff                	test   edi,edi
c0005ffe:	75 0b                	jne    c000600b <f_readdir+0x2c>
c0006000:	31 d2                	xor    edx,edx
c0006002:	89 d8                	mov    eax,ebx
c0006004:	e8 a6 d0 ff ff       	call   c00030af <dir_sdi>
c0006009:	eb 68                	jmp    c0006073 <f_readdir+0x94>
c000600b:	83 ec 0c             	sub    esp,0xc
c000600e:	68 60 04 00 00       	push   0x460
c0006013:	e8 a4 25 00 00       	call   c00085bc <ff_memalloc>
c0006018:	83 c4 10             	add    esp,0x10
c000601b:	89 c6                	mov    esi,eax
c000601d:	b8 11 00 00 00       	mov    eax,0x11
c0006022:	85 f6                	test   esi,esi
c0006024:	74 4d                	je     c0006073 <f_readdir+0x94>
c0006026:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000602a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006030:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006033:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006036:	31 d2                	xor    edx,edx
c0006038:	89 d8                	mov    eax,ebx
c000603a:	e8 80 d8 ff ff       	call   c00038bf <dir_read>
c000603f:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006044:	75 19                	jne    c000605f <f_readdir+0x80>
c0006046:	89 fa                	mov    edx,edi
c0006048:	89 d8                	mov    eax,ebx
c000604a:	e8 7e ea ff ff       	call   c0004acd <get_fileinfo>
c000604f:	31 d2                	xor    edx,edx
c0006051:	89 d8                	mov    eax,ebx
c0006053:	e8 af d5 ff ff       	call   c0003607 <dir_next>
c0006058:	83 f8 04             	cmp    eax,0x4
c000605b:	75 02                	jne    c000605f <f_readdir+0x80>
c000605d:	31 c0                	xor    eax,eax
c000605f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006063:	83 ec 0c             	sub    esp,0xc
c0006066:	56                   	push   esi
c0006067:	e8 68 25 00 00       	call   c00085d4 <ff_memfree>
c000606c:	83 c4 10             	add    esp,0x10
c000606f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006073:	83 c4 20             	add    esp,0x20
c0006076:	5b                   	pop    ebx
c0006077:	5e                   	pop    esi
c0006078:	5f                   	pop    edi
c0006079:	c3                   	ret    

c000607a <f_stat>:
c000607a:	57                   	push   edi
c000607b:	31 c9                	xor    ecx,ecx
c000607d:	56                   	push   esi
c000607e:	53                   	push   ebx
c000607f:	83 ec 50             	sub    esp,0x50
c0006082:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006086:	8d 54 24 04          	lea    edx,[esp+0x4]
c000608a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000608e:	e8 50 c5 ff ff       	call   c00025e3 <mount_volume>
c0006093:	89 c3                	mov    ebx,eax
c0006095:	85 c0                	test   eax,eax
c0006097:	75 67                	jne    c0006100 <f_stat+0x86>
c0006099:	83 ec 0c             	sub    esp,0xc
c000609c:	bb 11 00 00 00       	mov    ebx,0x11
c00060a1:	68 60 04 00 00       	push   0x460
c00060a6:	e8 11 25 00 00       	call   c00085bc <ff_memalloc>
c00060ab:	83 c4 10             	add    esp,0x10
c00060ae:	89 c6                	mov    esi,eax
c00060b0:	85 c0                	test   eax,eax
c00060b2:	74 4c                	je     c0006100 <f_stat+0x86>
c00060b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060b8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060be:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060c4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060c8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060cc:	e8 88 ec ff ff       	call   c0004d59 <follow_path>
c00060d1:	89 c3                	mov    ebx,eax
c00060d3:	85 c0                	test   eax,eax
c00060d5:	75 1d                	jne    c00060f4 <f_stat+0x7a>
c00060d7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060dc:	78 11                	js     c00060ef <f_stat+0x75>
c00060de:	85 ff                	test   edi,edi
c00060e0:	74 12                	je     c00060f4 <f_stat+0x7a>
c00060e2:	89 fa                	mov    edx,edi
c00060e4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060e8:	e8 e0 e9 ff ff       	call   c0004acd <get_fileinfo>
c00060ed:	eb 05                	jmp    c00060f4 <f_stat+0x7a>
c00060ef:	bb 06 00 00 00       	mov    ebx,0x6
c00060f4:	83 ec 0c             	sub    esp,0xc
c00060f7:	56                   	push   esi
c00060f8:	e8 d7 24 00 00       	call   c00085d4 <ff_memfree>
c00060fd:	83 c4 10             	add    esp,0x10
c0006100:	83 c4 50             	add    esp,0x50
c0006103:	89 d8                	mov    eax,ebx
c0006105:	5b                   	pop    ebx
c0006106:	5e                   	pop    esi
c0006107:	5f                   	pop    edi
c0006108:	c3                   	ret    

c0006109 <f_getfree>:
c0006109:	55                   	push   ebp
c000610a:	31 c9                	xor    ecx,ecx
c000610c:	57                   	push   edi
c000610d:	56                   	push   esi
c000610e:	53                   	push   ebx
c000610f:	83 ec 5c             	sub    esp,0x5c
c0006112:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006116:	8d 44 24 70          	lea    eax,[esp+0x70]
c000611a:	e8 c4 c4 ff ff       	call   c00025e3 <mount_volume>
c000611f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006123:	85 c0                	test   eax,eax
c0006125:	0f 85 9d 01 00 00    	jne    c00062c8 <f_getfree+0x1bf>
c000612b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000612f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006133:	89 02                	mov    DWORD PTR [edx],eax
c0006135:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006138:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000613b:	8d 71 fe             	lea    esi,[ecx-0x2]
c000613e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006142:	39 f2                	cmp    edx,esi
c0006144:	77 0b                	ja     c0006151 <f_getfree+0x48>
c0006146:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000614a:	89 10                	mov    DWORD PTR [eax],edx
c000614c:	e9 77 01 00 00       	jmp    c00062c8 <f_getfree+0x1bf>
c0006151:	8a 10                	mov    dl,BYTE PTR [eax]
c0006153:	80 fa 01             	cmp    dl,0x1
c0006156:	75 3a                	jne    c0006192 <f_getfree+0x89>
c0006158:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000615c:	be 02 00 00 00       	mov    esi,0x2
c0006161:	31 db                	xor    ebx,ebx
c0006163:	89 f2                	mov    edx,esi
c0006165:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006169:	e8 4b cd ff ff       	call   c0002eb9 <get_fat>
c000616e:	83 f8 ff             	cmp    eax,0xffffffff
c0006171:	0f 84 28 01 00 00    	je     c000629f <f_getfree+0x196>
c0006177:	83 f8 01             	cmp    eax,0x1
c000617a:	0f 84 29 01 00 00    	je     c00062a9 <f_getfree+0x1a0>
c0006180:	83 d3 00             	adc    ebx,0x0
c0006183:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006187:	46                   	inc    esi
c0006188:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000618b:	77 d6                	ja     c0006163 <f_getfree+0x5a>
c000618d:	e9 25 01 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006192:	80 fa 04             	cmp    dl,0x4
c0006195:	0f 85 88 00 00 00    	jne    c0006223 <f_getfree+0x11a>
c000619b:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000619e:	31 ed                	xor    ebp,ebp
c00061a0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061a7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ab:	31 db                	xor    ebx,ebx
c00061ad:	85 ed                	test   ebp,ebp
c00061af:	75 3f                	jne    c00061f0 <f_getfree+0xe7>
c00061b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061b9:	83 c0 01             	add    eax,0x1
c00061bc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c0:	83 d2 00             	adc    edx,0x0
c00061c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061d3:	e8 59 c1 ff ff       	call   c0002331 <move_window>
c00061d8:	85 c0                	test   eax,eax
c00061da:	0f 85 d3 00 00 00    	jne    c00062b3 <f_getfree+0x1aa>
c00061e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061f4:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061f7:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00061fb:	89 cf                	mov    edi,ecx
c00061fd:	85 f6                	test   esi,esi
c00061ff:	74 12                	je     c0006213 <f_getfree+0x10a>
c0006201:	88 c1                	mov    cl,al
c0006203:	83 e1 01             	and    ecx,0x1
c0006206:	80 f9 01             	cmp    cl,0x1
c0006209:	83 d3 00             	adc    ebx,0x0
c000620c:	d0 e8                	shr    al,1
c000620e:	4e                   	dec    esi
c000620f:	39 fe                	cmp    esi,edi
c0006211:	75 ea                	jne    c00061fd <f_getfree+0xf4>
c0006213:	45                   	inc    ebp
c0006214:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000621a:	85 f6                	test   esi,esi
c000621c:	75 8f                	jne    c00061ad <f_getfree+0xa4>
c000621e:	e9 94 00 00 00       	jmp    c00062b7 <f_getfree+0x1ae>
c0006223:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006226:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006229:	31 f6                	xor    esi,esi
c000622b:	31 db                	xor    ebx,ebx
c000622d:	85 f6                	test   esi,esi
c000622f:	75 1b                	jne    c000624c <f_getfree+0x143>
c0006231:	89 d7                	mov    edi,edx
c0006233:	89 cd                	mov    ebp,ecx
c0006235:	83 c7 01             	add    edi,0x1
c0006238:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623c:	83 d5 00             	adc    ebp,0x0
c000623f:	e8 ed c0 ff ff       	call   c0002331 <move_window>
c0006244:	85 c0                	test   eax,eax
c0006246:	75 6b                	jne    c00062b3 <f_getfree+0x1aa>
c0006248:	89 fa                	mov    edx,edi
c000624a:	89 e9                	mov    ecx,ebp
c000624c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006250:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006254:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006258:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000625b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000625f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006263:	75 11                	jne    c0006276 <f_getfree+0x16d>
c0006265:	e8 e9 b8 ff ff       	call   c0001b53 <ld_word>
c000626a:	66 83 f8 01          	cmp    ax,0x1
c000626e:	83 d3 00             	adc    ebx,0x0
c0006271:	83 c6 02             	add    esi,0x2
c0006274:	eb 13                	jmp    c0006289 <f_getfree+0x180>
c0006276:	e8 e5 b8 ff ff       	call   c0001b60 <ld_dword>
c000627b:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006280:	83 f8 01             	cmp    eax,0x1
c0006283:	83 d3 00             	adc    ebx,0x0
c0006286:	83 c6 04             	add    esi,0x4
c0006289:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000628f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006293:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006297:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000629b:	75 90                	jne    c000622d <f_getfree+0x124>
c000629d:	eb 18                	jmp    c00062b7 <f_getfree+0x1ae>
c000629f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062a7:	eb 0e                	jmp    c00062b7 <f_getfree+0x1ae>
c00062a9:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b1:	eb 04                	jmp    c00062b7 <f_getfree+0x1ae>
c00062b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062b7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062bb:	89 18                	mov    DWORD PTR [eax],ebx
c00062bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c1:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062c4:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062cc:	83 c4 5c             	add    esp,0x5c
c00062cf:	5b                   	pop    ebx
c00062d0:	5e                   	pop    esi
c00062d1:	5f                   	pop    edi
c00062d2:	5d                   	pop    ebp
c00062d3:	c3                   	ret    

c00062d4 <f_truncate>:
c00062d4:	56                   	push   esi
c00062d5:	53                   	push   ebx
c00062d6:	83 ec 14             	sub    esp,0x14
c00062d9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062dd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e1:	89 d8                	mov    eax,ebx
c00062e3:	e8 6e bf ff ff       	call   c0002256 <validate>
c00062e8:	89 c6                	mov    esi,eax
c00062ea:	85 c0                	test   eax,eax
c00062ec:	0f 85 d2 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062f2:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062f6:	85 f6                	test   esi,esi
c00062f8:	0f 85 c6 00 00 00    	jne    c00063c4 <f_truncate+0xf0>
c00062fe:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006302:	0f 84 b7 00 00 00    	je     c00063bf <f_truncate+0xeb>
c0006308:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000630b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000630e:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006311:	89 d1                	mov    ecx,edx
c0006313:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006316:	0f 83 a8 00 00 00    	jae    c00063c4 <f_truncate+0xf0>
c000631c:	09 c2                	or     edx,eax
c000631e:	75 15                	jne    c0006335 <f_truncate+0x61>
c0006320:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006323:	31 c9                	xor    ecx,ecx
c0006325:	89 d8                	mov    eax,ebx
c0006327:	e8 7a d0 ff ff       	call   c00033a6 <remove_chain>
c000632c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006333:	eb 35                	jmp    c000636a <f_truncate+0x96>
c0006335:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006338:	89 d8                	mov    eax,ebx
c000633a:	e8 7a cb ff ff       	call   c0002eb9 <get_fat>
c000633f:	89 c2                	mov    edx,eax
c0006341:	b8 01 00 00 00       	mov    eax,0x1
c0006346:	83 fa ff             	cmp    edx,0xffffffff
c0006349:	74 1f                	je     c000636a <f_truncate+0x96>
c000634b:	b8 02 00 00 00       	mov    eax,0x2
c0006350:	83 fa 01             	cmp    edx,0x1
c0006353:	74 15                	je     c000636a <f_truncate+0x96>
c0006355:	31 c0                	xor    eax,eax
c0006357:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000635b:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000635e:	76 0a                	jbe    c000636a <f_truncate+0x96>
c0006360:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006363:	89 d8                	mov    eax,ebx
c0006365:	e8 3c d0 ff ff       	call   c00033a6 <remove_chain>
c000636a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000636d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006370:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006373:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006376:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006379:	83 ca 40             	or     edx,0x40
c000637c:	85 c0                	test   eax,eax
c000637e:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006381:	75 35                	jne    c00063b8 <f_truncate+0xe4>
c0006383:	84 d2                	test   dl,dl
c0006385:	79 3d                	jns    c00063c4 <f_truncate+0xf0>
c0006387:	83 ec 0c             	sub    esp,0xc
c000638a:	8d 43 50             	lea    eax,[ebx+0x50]
c000638d:	6a 01                	push   0x1
c000638f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006392:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006395:	50                   	push   eax
c0006396:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000639a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000639e:	50                   	push   eax
c000639f:	e8 7a b7 ff ff       	call   c0001b1e <disk_write>
c00063a4:	83 c4 20             	add    esp,0x20
c00063a7:	85 c0                	test   eax,eax
c00063a9:	75 08                	jne    c00063b3 <f_truncate+0xdf>
c00063ab:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063af:	31 f6                	xor    esi,esi
c00063b1:	eb 11                	jmp    c00063c4 <f_truncate+0xf0>
c00063b3:	b8 01 00 00 00       	mov    eax,0x1
c00063b8:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063bb:	89 c6                	mov    esi,eax
c00063bd:	eb 05                	jmp    c00063c4 <f_truncate+0xf0>
c00063bf:	be 07 00 00 00       	mov    esi,0x7
c00063c4:	89 f0                	mov    eax,esi
c00063c6:	83 c4 14             	add    esp,0x14
c00063c9:	5b                   	pop    ebx
c00063ca:	5e                   	pop    esi
c00063cb:	c3                   	ret    

c00063cc <f_unlink>:
c00063cc:	56                   	push   esi
c00063cd:	b9 02 00 00 00       	mov    ecx,0x2
c00063d2:	53                   	push   ebx
c00063d3:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063dd:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063e4:	e8 fa c1 ff ff       	call   c00025e3 <mount_volume>
c00063e9:	85 c0                	test   eax,eax
c00063eb:	0f 85 55 01 00 00    	jne    c0006546 <f_unlink+0x17a>
c00063f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063f5:	83 ec 0c             	sub    esp,0xc
c00063f8:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00063fc:	68 60 04 00 00       	push   0x460
c0006401:	e8 b6 21 00 00       	call   c00085bc <ff_memalloc>
c0006406:	83 c4 10             	add    esp,0x10
c0006409:	89 c3                	mov    ebx,eax
c000640b:	b8 11 00 00 00       	mov    eax,0x11
c0006410:	85 db                	test   ebx,ebx
c0006412:	0f 84 2e 01 00 00    	je     c0006546 <f_unlink+0x17a>
c0006418:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000641c:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006422:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006425:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006428:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000642f:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006433:	e8 21 e9 ff ff       	call   c0004d59 <follow_path>
c0006438:	85 c0                	test   eax,eax
c000643a:	0f 85 f2 00 00 00    	jne    c0006532 <f_unlink+0x166>
c0006440:	b8 06 00 00 00       	mov    eax,0x6
c0006445:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000644d:	0f 88 df 00 00 00    	js     c0006532 <f_unlink+0x166>
c0006453:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006458:	74 0a                	je     c0006464 <f_unlink+0x98>
c000645a:	b8 07 00 00 00       	mov    eax,0x7
c000645f:	e9 ce 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c0006464:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006468:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000646c:	8a 02                	mov    al,BYTE PTR [edx]
c000646e:	3c 04                	cmp    al,0x4
c0006470:	75 12                	jne    c0006484 <f_unlink+0xb8>
c0006472:	8d 42 10             	lea    eax,[edx+0x10]
c0006475:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006479:	e8 a1 e8 ff ff       	call   c0004d1f <init_alloc_info.isra.2>
c000647e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006482:	eb 0e                	jmp    c0006492 <f_unlink+0xc6>
c0006484:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000648b:	e8 3e e8 ff ff       	call   c0004cce <ld_clust.isra.0>
c0006490:	89 c6                	mov    esi,eax
c0006492:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006497:	75 12                	jne    c00064ab <f_unlink+0xdf>
c0006499:	8d 44 24 48          	lea    eax,[esp+0x48]
c000649d:	e8 94 d6 ff ff       	call   c0003b36 <dir_remove>
c00064a2:	85 c0                	test   eax,eax
c00064a4:	74 6c                	je     c0006512 <f_unlink+0x146>
c00064a6:	e9 87 00 00 00       	jmp    c0006532 <f_unlink+0x166>
c00064ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064af:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064b6:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064bd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c0:	75 21                	jne    c00064e3 <f_unlink+0x117>
c00064c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064c6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064ca:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d1:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064d8:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064dc:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064e3:	31 d2                	xor    edx,edx
c00064e5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064ec:	e8 be cb ff ff       	call   c00030af <dir_sdi>
c00064f1:	85 c0                	test   eax,eax
c00064f3:	75 3d                	jne    c0006532 <f_unlink+0x166>
c00064f5:	31 d2                	xor    edx,edx
c00064f7:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064fe:	e8 bc d3 ff ff       	call   c00038bf <dir_read>
c0006503:	85 c0                	test   eax,eax
c0006505:	0f 84 4f ff ff ff    	je     c000645a <f_unlink+0x8e>
c000650b:	83 f8 04             	cmp    eax,0x4
c000650e:	75 22                	jne    c0006532 <f_unlink+0x166>
c0006510:	eb 87                	jmp    c0006499 <f_unlink+0xcd>
c0006512:	85 f6                	test   esi,esi
c0006514:	75 0b                	jne    c0006521 <f_unlink+0x155>
c0006516:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000651a:	e8 3d df ff ff       	call   c000445c <sync_fs>
c000651f:	eb 11                	jmp    c0006532 <f_unlink+0x166>
c0006521:	31 c9                	xor    ecx,ecx
c0006523:	89 f2                	mov    edx,esi
c0006525:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006529:	e8 78 ce ff ff       	call   c00033a6 <remove_chain>
c000652e:	85 c0                	test   eax,eax
c0006530:	74 e4                	je     c0006516 <f_unlink+0x14a>
c0006532:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006536:	83 ec 0c             	sub    esp,0xc
c0006539:	53                   	push   ebx
c000653a:	e8 95 20 00 00       	call   c00085d4 <ff_memfree>
c000653f:	83 c4 10             	add    esp,0x10
c0006542:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006546:	81 c4 e4 00 00 00    	add    esp,0xe4
c000654c:	5b                   	pop    ebx
c000654d:	5e                   	pop    esi
c000654e:	c3                   	ret    

c000654f <f_mkdir>:
c000654f:	57                   	push   edi
c0006550:	b9 02 00 00 00       	mov    ecx,0x2
c0006555:	56                   	push   esi
c0006556:	53                   	push   ebx
c0006557:	83 c4 80             	add    esp,0xffffff80
c000655a:	8d 54 24 08          	lea    edx,[esp+0x8]
c000655e:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006565:	e8 79 c0 ff ff       	call   c00025e3 <mount_volume>
c000656a:	89 c3                	mov    ebx,eax
c000656c:	85 c0                	test   eax,eax
c000656e:	0f 85 fe 01 00 00    	jne    c0006772 <f_mkdir+0x223>
c0006574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006578:	bb 11 00 00 00       	mov    ebx,0x11
c000657d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006581:	83 ec 0c             	sub    esp,0xc
c0006584:	68 60 04 00 00       	push   0x460
c0006589:	e8 2e 20 00 00       	call   c00085bc <ff_memalloc>
c000658e:	83 c4 10             	add    esp,0x10
c0006591:	89 c7                	mov    edi,eax
c0006593:	85 c0                	test   eax,eax
c0006595:	0f 84 d7 01 00 00    	je     c0006772 <f_mkdir+0x223>
c000659b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000659f:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065a5:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065a8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065ab:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065b2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065b6:	e8 9e e7 ff ff       	call   c0004d59 <follow_path>
c00065bb:	89 c3                	mov    ebx,eax
c00065bd:	85 c0                	test   eax,eax
c00065bf:	74 3e                	je     c00065ff <f_mkdir+0xb0>
c00065c1:	83 f8 04             	cmp    eax,0x4
c00065c4:	75 3e                	jne    c0006604 <f_mkdir+0xb5>
c00065c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065ca:	31 d2                	xor    edx,edx
c00065cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065d4:	e8 ce cb ff ff       	call   c00031a7 <create_chain>
c00065d9:	89 c6                	mov    esi,eax
c00065db:	85 c0                	test   eax,eax
c00065dd:	74 0c                	je     c00065eb <f_mkdir+0x9c>
c00065df:	bb 02 00 00 00       	mov    ebx,0x2
c00065e4:	83 f8 01             	cmp    eax,0x1
c00065e7:	74 07                	je     c00065f0 <f_mkdir+0xa1>
c00065e9:	eb 2a                	jmp    c0006615 <f_mkdir+0xc6>
c00065eb:	bb 07 00 00 00       	mov    ebx,0x7
c00065f0:	31 c9                	xor    ecx,ecx
c00065f2:	89 f2                	mov    edx,esi
c00065f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065f8:	e8 a9 cd ff ff       	call   c00033a6 <remove_chain>
c00065fd:	eb 05                	jmp    c0006604 <f_mkdir+0xb5>
c00065ff:	bb 08 00 00 00       	mov    ebx,0x8
c0006604:	83 ec 0c             	sub    esp,0xc
c0006607:	57                   	push   edi
c0006608:	e8 c7 1f 00 00       	call   c00085d4 <ff_memfree>
c000660d:	83 c4 10             	add    esp,0x10
c0006610:	e9 5d 01 00 00       	jmp    c0006772 <f_mkdir+0x223>
c0006615:	bb 01 00 00 00       	mov    ebx,0x1
c000661a:	83 f8 ff             	cmp    eax,0xffffffff
c000661d:	74 d1                	je     c00065f0 <f_mkdir+0xa1>
c000661f:	89 f2                	mov    edx,esi
c0006621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006625:	e8 c4 ce ff ff       	call   c00034ee <dir_clear>
c000662a:	89 c3                	mov    ebx,eax
c000662c:	85 c0                	test   eax,eax
c000662e:	75 c0                	jne    c00065f0 <f_mkdir+0xa1>
c0006630:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006634:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006637:	74 69                	je     c00066a2 <f_mkdir+0x153>
c0006639:	b9 0b 00 00 00       	mov    ecx,0xb
c000663e:	83 c0 54             	add    eax,0x54
c0006641:	ba 20 00 00 00       	mov    edx,0x20
c0006646:	e8 9c b5 ff ff       	call   c0001be7 <mem_set>
c000664b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006654:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006658:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000665c:	83 c0 6a             	add    eax,0x6a
c000665f:	e8 65 b5 ff ff       	call   c0001bc9 <st_dword>
c0006664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006668:	89 f1                	mov    ecx,esi
c000666a:	8d 50 54             	lea    edx,[eax+0x54]
c000666d:	e8 85 e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006672:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006676:	b9 20 00 00 00       	mov    ecx,0x20
c000667b:	8d 50 54             	lea    edx,[eax+0x54]
c000667e:	83 c0 74             	add    eax,0x74
c0006681:	e8 4c b5 ff ff       	call   c0001bd2 <mem_cpy>
c0006686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000668e:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006692:	8d 50 74             	lea    edx,[eax+0x74]
c0006695:	e8 5d e6 ff ff       	call   c0004cf7 <st_clust.isra.1>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066a2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066a6:	e8 2f db ff ff       	call   c00041da <dir_register>
c00066ab:	89 c3                	mov    ebx,eax
c00066ad:	85 c0                	test   eax,eax
c00066af:	0f 85 3b ff ff ff    	jne    c00065f0 <f_mkdir+0xa1>
c00066b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066bc:	75 74                	jne    c0006732 <f_mkdir+0x1e3>
c00066be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00066c6:	83 c0 0c             	add    eax,0xc
c00066c9:	e8 fb b4 ff ff       	call   c0001bc9 <st_dword>
c00066ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d2:	89 f2                	mov    edx,esi
c00066d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066d7:	83 c0 34             	add    eax,0x34
c00066da:	e8 ea b4 ff ff       	call   c0001bc9 <st_dword>
c00066df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066e3:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066e7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066ea:	c1 e2 09             	shl    edx,0x9
c00066ed:	83 c0 38             	add    eax,0x38
c00066f0:	e8 d4 b4 ff ff       	call   c0001bc9 <st_dword>
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006700:	c1 e2 09             	shl    edx,0x9
c0006703:	83 c0 28             	add    eax,0x28
c0006706:	e8 be b4 ff ff       	call   c0001bc9 <st_dword>
c000670b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000670f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006712:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006716:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006719:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000671d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006721:	e8 8b d3 ff ff       	call   c0003ab1 <store_xdir>
c0006726:	89 c3                	mov    ebx,eax
c0006728:	85 c0                	test   eax,eax
c000672a:	0f 85 d4 fe ff ff    	jne    c0006604 <f_mkdir+0xb5>
c0006730:	eb 30                	jmp    c0006762 <f_mkdir+0x213>
c0006732:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006736:	ba 00 00 21 50       	mov    edx,0x50210000
c000673b:	83 c0 16             	add    eax,0x16
c000673e:	e8 86 b4 ff ff       	call   c0001bc9 <st_dword>
c0006743:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006747:	89 f1                	mov    ecx,esi
c0006749:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000674d:	e8 a5 e5 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006752:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006756:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	e8 f1 dc ff ff       	call   c000445c <sync_fs>
c000676b:	89 c3                	mov    ebx,eax
c000676d:	e9 92 fe ff ff       	jmp    c0006604 <f_mkdir+0xb5>
c0006772:	83 ec 80             	sub    esp,0xffffff80
c0006775:	89 d8                	mov    eax,ebx
c0006777:	5b                   	pop    ebx
c0006778:	5e                   	pop    esi
c0006779:	5f                   	pop    edi
c000677a:	c3                   	ret    

c000677b <f_rename>:
c000677b:	55                   	push   ebp
c000677c:	57                   	push   edi
c000677d:	56                   	push   esi
c000677e:	53                   	push   ebx
c000677f:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006785:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000678c:	e8 a4 b9 ff ff       	call   c0002135 <get_ldnumber>
c0006791:	b9 02 00 00 00       	mov    ecx,0x2
c0006796:	8d 54 24 14          	lea    edx,[esp+0x14]
c000679a:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a1:	e8 3d be ff ff       	call   c00025e3 <mount_volume>
c00067a6:	85 c0                	test   eax,eax
c00067a8:	0f 85 b5 02 00 00    	jne    c0006a63 <f_rename+0x2e8>
c00067ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b2:	83 ec 0c             	sub    esp,0xc
c00067b5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067b9:	68 60 04 00 00       	push   0x460
c00067be:	e8 f9 1d 00 00       	call   c00085bc <ff_memalloc>
c00067c3:	83 c4 10             	add    esp,0x10
c00067c6:	89 c3                	mov    ebx,eax
c00067c8:	b8 11 00 00 00       	mov    eax,0x11
c00067cd:	85 db                	test   ebx,ebx
c00067cf:	0f 84 8e 02 00 00    	je     c0006a63 <f_rename+0x2e8>
c00067d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067d9:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067df:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067e2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067e5:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067ec:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f0:	e8 64 e5 ff ff       	call   c0004d59 <follow_path>
c00067f5:	85 c0                	test   eax,eax
c00067f7:	0f 85 52 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00067fd:	b8 06 00 00 00       	mov    eax,0x6
c0006802:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c000680a:	0f 85 3f 02 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006810:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006814:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006817:	0f 85 05 01 00 00    	jne    c0006922 <f_rename+0x1a7>
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	b9 40 00 00 00       	mov    ecx,0x40
c0006825:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006829:	e8 a4 b3 ff ff       	call   c0001bd2 <mem_cpy>
c000682e:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006833:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006837:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000683e:	e8 8f b3 ff ff       	call   c0001bd2 <mem_cpy>
c0006843:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000684a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006851:	e8 03 e5 ff ff       	call   c0004d59 <follow_path>
c0006856:	85 c0                	test   eax,eax
c0006858:	75 29                	jne    c0006883 <f_rename+0x108>
c000685a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000685e:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006865:	74 0a                	je     c0006871 <f_rename+0xf6>
c0006867:	b8 08 00 00 00       	mov    eax,0x8
c000686c:	e9 de 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006871:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006878:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000687f:	75 e6                	jne    c0006867 <f_rename+0xec>
c0006881:	eb 09                	jmp    c000688c <f_rename+0x111>
c0006883:	83 f8 04             	cmp    eax,0x4
c0006886:	0f 85 c3 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c000688c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006893:	e8 42 d9 ff ff       	call   c00041da <dir_register>
c0006898:	85 c0                	test   eax,eax
c000689a:	0f 85 af 01 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00068a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068a4:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068a7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068aa:	89 c5                	mov    ebp,eax
c00068ac:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068af:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068b3:	8d 46 24             	lea    eax,[esi+0x24]
c00068b6:	e8 98 b2 ff ff       	call   c0001b53 <ld_word>
c00068bb:	b9 40 00 00 00       	mov    ecx,0x40
c00068c0:	89 c7                	mov    edi,eax
c00068c2:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068c6:	89 f0                	mov    eax,esi
c00068c8:	e8 05 b3 ff ff       	call   c0001bd2 <mem_cpy>
c00068cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d1:	89 e9                	mov    ecx,ebp
c00068d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068d6:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068d9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068e4:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068e7:	0f b7 d7             	movzx  edx,di
c00068ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ed:	83 c0 24             	add    eax,0x24
c00068f0:	e8 d0 b2 ff ff       	call   c0001bc5 <st_word>
c00068f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068fc:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00068ff:	a8 10                	test   al,0x10
c0006901:	75 06                	jne    c0006909 <f_rename+0x18e>
c0006903:	83 c8 20             	or     eax,0x20
c0006906:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006909:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006910:	e8 9c d1 ff ff       	call   c0003ab1 <store_xdir>
c0006915:	85 c0                	test   eax,eax
c0006917:	0f 84 1c 01 00 00    	je     c0006a39 <f_rename+0x2be>
c000691d:	e9 2d 01 00 00       	jmp    c0006a4f <f_rename+0x2d4>
c0006922:	b9 20 00 00 00       	mov    ecx,0x20
c0006927:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000692e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006932:	e8 9b b2 ff ff       	call   c0001bd2 <mem_cpy>
c0006937:	b9 4c 00 00 00       	mov    ecx,0x4c
c000693c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006940:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006947:	e8 86 b2 ff ff       	call   c0001bd2 <mem_cpy>
c000694c:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006953:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695a:	e8 fa e3 ff ff       	call   c0004d59 <follow_path>
c000695f:	85 c0                	test   eax,eax
c0006961:	75 27                	jne    c000698a <f_rename+0x20f>
c0006963:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006967:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000696e:	0f 85 f3 fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006974:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000697b:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006982:	0f 85 df fe ff ff    	jne    c0006867 <f_rename+0xec>
c0006988:	eb 09                	jmp    c0006993 <f_rename+0x218>
c000698a:	83 f8 04             	cmp    eax,0x4
c000698d:	0f 85 bc 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c0006993:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000699a:	e8 3b d8 ff ff       	call   c00041da <dir_register>
c000699f:	85 c0                	test   eax,eax
c00069a1:	0f 85 a8 00 00 00    	jne    c0006a4f <f_rename+0x2d4>
c00069a7:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069ae:	b9 13 00 00 00       	mov    ecx,0x13
c00069b3:	8d 46 0d             	lea    eax,[esi+0xd]
c00069b6:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069ba:	e8 13 b2 ff ff       	call   c0001bd2 <mem_cpy>
c00069bf:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069c3:	a8 10                	test   al,0x10
c00069c5:	75 03                	jne    c00069ca <f_rename+0x24f>
c00069c7:	83 c8 20             	or     eax,0x20
c00069ca:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d5:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069d9:	74 5e                	je     c0006a39 <f_rename+0x2be>
c00069db:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069e2:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069e6:	74 51                	je     c0006a39 <f_rename+0x2be>
c00069e8:	89 f2                	mov    edx,esi
c00069ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069ee:	8a 07                	mov    al,BYTE PTR [edi]
c00069f0:	e8 d9 e2 ff ff       	call   c0004cce <ld_clust.isra.0>
c00069f5:	89 c2                	mov    edx,eax
c00069f7:	89 f8                	mov    eax,edi
c00069f9:	e8 ee b3 ff ff       	call   c0001dec <clst2sect>
c00069fe:	89 c6                	mov    esi,eax
c0006a00:	89 d1                	mov    ecx,edx
c0006a02:	b8 02 00 00 00       	mov    eax,0x2
c0006a07:	09 f2                	or     edx,esi
c0006a09:	74 44                	je     c0006a4f <f_rename+0x2d4>
c0006a0b:	89 f2                	mov    edx,esi
c0006a0d:	89 f8                	mov    eax,edi
c0006a0f:	e8 1d b9 ff ff       	call   c0002331 <move_window>
c0006a14:	85 c0                	test   eax,eax
c0006a16:	75 37                	jne    c0006a4f <f_rename+0x2d4>
c0006a18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a1c:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a20:	75 17                	jne    c0006a39 <f_rename+0x2be>
c0006a22:	8d 50 74             	lea    edx,[eax+0x74]
c0006a25:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a2c:	e8 c6 e2 ff ff       	call   c0004cf7 <st_clust.isra.1>
c0006a31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a35:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a39:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a3d:	e8 f4 d0 ff ff       	call   c0003b36 <dir_remove>
c0006a42:	85 c0                	test   eax,eax
c0006a44:	75 09                	jne    c0006a4f <f_rename+0x2d4>
c0006a46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a4a:	e8 0d da ff ff       	call   c000445c <sync_fs>
c0006a4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a53:	83 ec 0c             	sub    esp,0xc
c0006a56:	53                   	push   ebx
c0006a57:	e8 78 1b 00 00       	call   c00085d4 <ff_memfree>
c0006a5c:	83 c4 10             	add    esp,0x10
c0006a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a63:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a69:	5b                   	pop    ebx
c0006a6a:	5e                   	pop    esi
c0006a6b:	5f                   	pop    edi
c0006a6c:	5d                   	pop    ebp
c0006a6d:	c3                   	ret    

c0006a6e <f_chmod>:
c0006a6e:	57                   	push   edi
c0006a6f:	b9 02 00 00 00       	mov    ecx,0x2
c0006a74:	56                   	push   esi
c0006a75:	53                   	push   ebx
c0006a76:	83 ec 60             	sub    esp,0x60
c0006a79:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a7d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a81:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a85:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a89:	e8 55 bb ff ff       	call   c00025e3 <mount_volume>
c0006a8e:	85 c0                	test   eax,eax
c0006a90:	0f 85 af 00 00 00    	jne    c0006b45 <f_chmod+0xd7>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	83 ec 0c             	sub    esp,0xc
c0006a9d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa1:	68 60 04 00 00       	push   0x460
c0006aa6:	e8 11 1b 00 00       	call   c00085bc <ff_memalloc>
c0006aab:	83 c4 10             	add    esp,0x10
c0006aae:	89 c6                	mov    esi,eax
c0006ab0:	b8 11 00 00 00       	mov    eax,0x11
c0006ab5:	85 f6                	test   esi,esi
c0006ab7:	0f 84 88 00 00 00    	je     c0006b45 <f_chmod+0xd7>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006ac7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006aca:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006acd:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad1:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ad5:	e8 7f e2 ff ff       	call   c0004d59 <follow_path>
c0006ada:	85 c0                	test   eax,eax
c0006adc:	75 53                	jne    c0006b31 <f_chmod+0xc3>
c0006ade:	b8 06 00 00 00       	mov    eax,0x6
c0006ae3:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ae8:	75 47                	jne    c0006b31 <f_chmod+0xc3>
c0006aea:	89 f9                	mov    ecx,edi
c0006aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af0:	83 e1 27             	and    ecx,0x27
c0006af3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006af6:	75 1d                	jne    c0006b15 <f_chmod+0xa7>
c0006af8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006afb:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006afe:	21 cb                	and    ebx,ecx
c0006b00:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b03:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b06:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b0a:	e8 a2 cf ff ff       	call   c0003ab1 <store_xdir>
c0006b0f:	85 c0                	test   eax,eax
c0006b11:	75 1e                	jne    c0006b31 <f_chmod+0xc3>
c0006b13:	eb 13                	jmp    c0006b28 <f_chmod+0xba>
c0006b15:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b19:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b1c:	21 cb                	and    ebx,ecx
c0006b1e:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b21:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b24:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b2c:	e8 2b d9 ff ff       	call   c000445c <sync_fs>
c0006b31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b35:	83 ec 0c             	sub    esp,0xc
c0006b38:	56                   	push   esi
c0006b39:	e8 96 1a 00 00       	call   c00085d4 <ff_memfree>
c0006b3e:	83 c4 10             	add    esp,0x10
c0006b41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b45:	83 c4 60             	add    esp,0x60
c0006b48:	5b                   	pop    ebx
c0006b49:	5e                   	pop    esi
c0006b4a:	5f                   	pop    edi
c0006b4b:	c3                   	ret    

c0006b4c <f_utime>:
c0006b4c:	56                   	push   esi
c0006b4d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b52:	53                   	push   ebx
c0006b53:	83 ec 64             	sub    esp,0x64
c0006b56:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b5a:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b5e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b62:	e8 7c ba ff ff       	call   c00025e3 <mount_volume>
c0006b67:	85 c0                	test   eax,eax
c0006b69:	0f 85 b5 00 00 00    	jne    c0006c24 <f_utime+0xd8>
c0006b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b73:	83 ec 0c             	sub    esp,0xc
c0006b76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b7a:	68 60 04 00 00       	push   0x460
c0006b7f:	e8 38 1a 00 00       	call   c00085bc <ff_memalloc>
c0006b84:	83 c4 10             	add    esp,0x10
c0006b87:	89 c3                	mov    ebx,eax
c0006b89:	b8 11 00 00 00       	mov    eax,0x11
c0006b8e:	85 db                	test   ebx,ebx
c0006b90:	0f 84 8e 00 00 00    	je     c0006c24 <f_utime+0xd8>
c0006b96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b9a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006ba3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba6:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006baa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bae:	e8 a6 e1 ff ff       	call   c0004d59 <follow_path>
c0006bb3:	85 c0                	test   eax,eax
c0006bb5:	75 59                	jne    c0006c10 <f_utime+0xc4>
c0006bb7:	b8 06 00 00 00       	mov    eax,0x6
c0006bbc:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc1:	75 4d                	jne    c0006c10 <f_utime+0xc4>
c0006bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc7:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bcb:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bcf:	c1 e2 10             	shl    edx,0x10
c0006bd2:	09 ca                	or     edx,ecx
c0006bd4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bd7:	75 1a                	jne    c0006bf3 <f_utime+0xa7>
c0006bd9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bdc:	83 c0 0c             	add    eax,0xc
c0006bdf:	e8 e5 af ff ff       	call   c0001bc9 <st_dword>
c0006be4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be8:	e8 c4 ce ff ff       	call   c0003ab1 <store_xdir>
c0006bed:	85 c0                	test   eax,eax
c0006bef:	75 1f                	jne    c0006c10 <f_utime+0xc4>
c0006bf1:	eb 14                	jmp    c0006c07 <f_utime+0xbb>
c0006bf3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bf7:	83 c0 16             	add    eax,0x16
c0006bfa:	e8 ca af ff ff       	call   c0001bc9 <st_dword>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	e8 4c d8 ff ff       	call   c000445c <sync_fs>
c0006c10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c14:	83 ec 0c             	sub    esp,0xc
c0006c17:	53                   	push   ebx
c0006c18:	e8 b7 19 00 00       	call   c00085d4 <ff_memfree>
c0006c1d:	83 c4 10             	add    esp,0x10
c0006c20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c24:	83 c4 64             	add    esp,0x64
c0006c27:	5b                   	pop    ebx
c0006c28:	5e                   	pop    esi
c0006c29:	c3                   	ret    

c0006c2a <f_getlabel>:
c0006c2a:	55                   	push   ebp
c0006c2b:	31 c9                	xor    ecx,ecx
c0006c2d:	57                   	push   edi
c0006c2e:	56                   	push   esi
c0006c2f:	53                   	push   ebx
c0006c30:	83 ec 6c             	sub    esp,0x6c
c0006c33:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c37:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c3e:	e8 a0 b9 ff ff       	call   c00025e3 <mount_volume>
c0006c43:	89 c6                	mov    esi,eax
c0006c45:	85 c0                	test   eax,eax
c0006c47:	0f 85 c1 01 00 00    	jne    c0006e0e <f_getlabel+0x1e4>
c0006c4d:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c55:	0f 84 5f 01 00 00    	je     c0006dba <f_getlabel+0x190>
c0006c5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5f:	31 d2                	xor    edx,edx
c0006c61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c65:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c6d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c71:	e8 39 c4 ff ff       	call   c00030af <dir_sdi>
c0006c76:	85 c0                	test   eax,eax
c0006c78:	0f 85 2d 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c7e:	ba 01 00 00 00       	mov    edx,0x1
c0006c83:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c87:	e8 33 cc ff ff       	call   c00038bf <dir_read>
c0006c8c:	85 c0                	test   eax,eax
c0006c8e:	0f 85 17 01 00 00    	jne    c0006dab <f_getlabel+0x181>
c0006c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c98:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c9b:	74 09                	je     c0006ca6 <f_getlabel+0x7c>
c0006c9d:	31 db                	xor    ebx,ebx
c0006c9f:	31 c9                	xor    ecx,ecx
c0006ca1:	e9 c8 00 00 00       	jmp    c0006d6e <f_getlabel+0x144>
c0006ca6:	31 ed                	xor    ebp,ebp
c0006ca8:	31 db                	xor    ebx,ebx
c0006caa:	31 ff                	xor    edi,edi
c0006cac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cb4:	39 fa                	cmp    edx,edi
c0006cb6:	76 4b                	jbe    c0006d03 <f_getlabel+0xd9>
c0006cb8:	47                   	inc    edi
c0006cb9:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cbc:	01 d0                	add    eax,edx
c0006cbe:	e8 90 ae ff ff       	call   c0001b53 <ld_word>
c0006cc3:	66 85 ed             	test   bp,bp
c0006cc6:	75 0d                	jne    c0006cd5 <f_getlabel+0xab>
c0006cc8:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cce:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cd3:	76 28                	jbe    c0006cfd <f_getlabel+0xd3>
c0006cd5:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006cdc:	89 e9                	mov    ecx,ebp
c0006cde:	01 da                	add    edx,ebx
c0006ce0:	c1 e1 10             	shl    ecx,0x10
c0006ce3:	0f b7 c0             	movzx  eax,ax
c0006ce6:	09 c8                	or     eax,ecx
c0006ce8:	b9 04 00 00 00       	mov    ecx,0x4
c0006ced:	e8 01 b0 ff ff       	call   c0001cf3 <put_utf>
c0006cf2:	84 c0                	test   al,al
c0006cf4:	74 0b                	je     c0006d01 <f_getlabel+0xd7>
c0006cf6:	0f b6 c0             	movzx  eax,al
c0006cf9:	01 c3                	add    ebx,eax
c0006cfb:	31 c0                	xor    eax,eax
c0006cfd:	89 c5                	mov    ebp,eax
c0006cff:	eb ab                	jmp    c0006cac <f_getlabel+0x82>
c0006d01:	31 db                	xor    ebx,ebx
c0006d03:	66 85 ed             	test   bp,bp
c0006d06:	74 02                	je     c0006d0a <f_getlabel+0xe0>
c0006d08:	31 db                	xor    ebx,ebx
c0006d0a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d11:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d15:	e9 a0 00 00 00       	jmp    c0006dba <f_getlabel+0x190>
c0006d1a:	83 ff 0b             	cmp    edi,0xb
c0006d1d:	74 11                	je     c0006d30 <f_getlabel+0x106>
c0006d1f:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d28:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d2b:	c1 e0 08             	shl    eax,0x8
c0006d2e:	09 c2                	or     edx,eax
c0006d30:	0f b7 d2             	movzx  edx,dx
c0006d33:	50                   	push   eax
c0006d34:	50                   	push   eax
c0006d35:	68 b5 01 00 00       	push   0x1b5
c0006d3a:	52                   	push   edx
c0006d3b:	e8 44 19 00 00       	call   c0008684 <ff_oem2uni>
c0006d40:	83 c4 10             	add    esp,0x10
c0006d43:	66 85 c0             	test   ax,ax
c0006d46:	74 46                	je     c0006d8e <f_getlabel+0x164>
c0006d48:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d4f:	0f b7 c0             	movzx  eax,ax
c0006d52:	01 da                	add    edx,ebx
c0006d54:	b9 04 00 00 00       	mov    ecx,0x4
c0006d59:	e8 95 af ff ff       	call   c0001cf3 <put_utf>
c0006d5e:	84 c0                	test   al,al
c0006d60:	74 2c                	je     c0006d8e <f_getlabel+0x164>
c0006d62:	0f b6 c0             	movzx  eax,al
c0006d65:	01 c3                	add    ebx,eax
c0006d67:	83 ff 0b             	cmp    edi,0xb
c0006d6a:	74 24                	je     c0006d90 <f_getlabel+0x166>
c0006d6c:	89 f9                	mov    ecx,edi
c0006d6e:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d72:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d75:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d7a:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d83:	e8 9f ae ff ff       	call   c0001c27 <dbc_1st>
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	74 a4                	je     c0006d30 <f_getlabel+0x106>
c0006d8c:	eb 8c                	jmp    c0006d1a <f_getlabel+0xf0>
c0006d8e:	31 db                	xor    ebx,ebx
c0006d90:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d97:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006d9a:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da1:	74 17                	je     c0006dba <f_getlabel+0x190>
c0006da3:	4b                   	dec    ebx
c0006da4:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006da7:	74 ee                	je     c0006d97 <f_getlabel+0x16d>
c0006da9:	eb 0f                	jmp    c0006dba <f_getlabel+0x190>
c0006dab:	83 f8 04             	cmp    eax,0x4
c0006dae:	75 5c                	jne    c0006e0c <f_getlabel+0x1e2>
c0006db0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006db7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dba:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dc2:	74 4a                	je     c0006e0e <f_getlabel+0x1e4>
c0006dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dc8:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dcb:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dce:	e8 5e b5 ff ff       	call   c0002331 <move_window>
c0006dd3:	89 c6                	mov    esi,eax
c0006dd5:	85 c0                	test   eax,eax
c0006dd7:	75 35                	jne    c0006e0e <f_getlabel+0x1e4>
c0006dd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ddd:	b8 43 00 00 00       	mov    eax,0x43
c0006de2:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006de4:	80 f9 03             	cmp    cl,0x3
c0006de7:	74 0f                	je     c0006df8 <f_getlabel+0x1ce>
c0006de9:	31 c0                	xor    eax,eax
c0006deb:	80 f9 04             	cmp    cl,0x4
c0006dee:	0f 94 c0             	sete   al
c0006df1:	48                   	dec    eax
c0006df2:	83 e0 c3             	and    eax,0xffffffc3
c0006df5:	83 c0 64             	add    eax,0x64
c0006df8:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006dfc:	e8 5f ad ff ff       	call   c0001b60 <ld_dword>
c0006e01:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e08:	89 07                	mov    DWORD PTR [edi],eax
c0006e0a:	eb 02                	jmp    c0006e0e <f_getlabel+0x1e4>
c0006e0c:	89 c6                	mov    esi,eax
c0006e0e:	83 c4 6c             	add    esp,0x6c
c0006e11:	89 f0                	mov    eax,esi
c0006e13:	5b                   	pop    ebx
c0006e14:	5e                   	pop    esi
c0006e15:	5f                   	pop    edi
c0006e16:	5d                   	pop    ebp
c0006e17:	c3                   	ret    

c0006e18 <f_setlabel>:
c0006e18:	56                   	push   esi
c0006e19:	b9 02 00 00 00       	mov    ecx,0x2
c0006e1e:	53                   	push   ebx
c0006e1f:	83 ec 74             	sub    esp,0x74
c0006e22:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e26:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e2d:	e8 b1 b7 ff ff       	call   c00025e3 <mount_volume>
c0006e32:	89 c6                	mov    esi,eax
c0006e34:	85 c0                	test   eax,eax
c0006e36:	0f 85 41 02 00 00    	jne    c000707d <f_setlabel+0x265>
c0006e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e40:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e43:	0f 85 8e 00 00 00    	jne    c0006ed7 <f_setlabel+0xbf>
c0006e49:	b9 16 00 00 00       	mov    ecx,0x16
c0006e4e:	31 d2                	xor    edx,edx
c0006e50:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e54:	31 db                	xor    ebx,ebx
c0006e56:	e8 8c ad ff ff       	call   c0001be7 <mem_set>
c0006e5b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e62:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e65:	0f 86 0a 01 00 00    	jbe    c0006f75 <f_setlabel+0x15d>
c0006e6b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e72:	e8 b6 ad ff ff       	call   c0001c2d <tchar2uni>
c0006e77:	89 c6                	mov    esi,eax
c0006e79:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e7e:	76 2a                	jbe    c0006eaa <f_setlabel+0x92>
c0006e80:	83 f8 ff             	cmp    eax,0xffffffff
c0006e83:	74 05                	je     c0006e8a <f_setlabel+0x72>
c0006e85:	83 fb 09             	cmp    ebx,0x9
c0006e88:	76 0a                	jbe    c0006e94 <f_setlabel+0x7c>
c0006e8a:	be 06 00 00 00       	mov    esi,0x6
c0006e8f:	e9 e9 01 00 00       	jmp    c000707d <f_setlabel+0x265>
c0006e94:	89 c2                	mov    edx,eax
c0006e96:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006e9a:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006e9d:	c1 ea 10             	shr    edx,0x10
c0006ea0:	01 c8                	add    eax,ecx
c0006ea2:	43                   	inc    ebx
c0006ea3:	e8 1d ad ff ff       	call   c0001bc5 <st_word>
c0006ea8:	eb 04                	jmp    c0006eae <f_setlabel+0x96>
c0006eaa:	85 c0                	test   eax,eax
c0006eac:	74 dc                	je     c0006e8a <f_setlabel+0x72>
c0006eae:	89 f2                	mov    edx,esi
c0006eb0:	b8 37 2c 02 c0       	mov    eax,0xc0022c37
c0006eb5:	e8 5b ad ff ff       	call   c0001c15 <chk_chr>
c0006eba:	85 c0                	test   eax,eax
c0006ebc:	75 cc                	jne    c0006e8a <f_setlabel+0x72>
c0006ebe:	83 fb 0a             	cmp    ebx,0xa
c0006ec1:	77 c7                	ja     c0006e8a <f_setlabel+0x72>
c0006ec3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ec6:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006eca:	0f b7 d6             	movzx  edx,si
c0006ecd:	01 c8                	add    eax,ecx
c0006ecf:	43                   	inc    ebx
c0006ed0:	e8 f0 ac ff ff       	call   c0001bc5 <st_word>
c0006ed5:	eb 84                	jmp    c0006e5b <f_setlabel+0x43>
c0006ed7:	b9 0b 00 00 00       	mov    ecx,0xb
c0006edc:	ba 20 00 00 00       	mov    edx,0x20
c0006ee1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ee5:	31 db                	xor    ebx,ebx
c0006ee7:	e8 fb ac ff ff       	call   c0001be7 <mem_set>
c0006eec:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006ef3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ef6:	76 60                	jbe    c0006f58 <f_setlabel+0x140>
c0006ef8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006eff:	e8 29 ad ff ff       	call   c0001c2d <tchar2uni>
c0006f04:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f09:	0f 87 7b ff ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0006f0f:	83 ec 0c             	sub    esp,0xc
c0006f12:	50                   	push   eax
c0006f13:	e8 e0 17 00 00       	call   c00086f8 <ff_wtoupper>
c0006f18:	5a                   	pop    edx
c0006f19:	59                   	pop    ecx
c0006f1a:	68 b5 01 00 00       	push   0x1b5
c0006f1f:	50                   	push   eax
c0006f20:	e8 c7 16 00 00       	call   c00085ec <ff_uni2oem>
c0006f25:	83 c4 10             	add    esp,0x10
c0006f28:	89 c6                	mov    esi,eax
c0006f2a:	66 85 c0             	test   ax,ax
c0006f2d:	0f 84 57 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f33:	0f b7 d0             	movzx  edx,ax
c0006f36:	b8 30 2c 02 c0       	mov    eax,0xc0022c30
c0006f3b:	e8 d5 ac ff ff       	call   c0001c15 <chk_chr>
c0006f40:	85 c0                	test   eax,eax
c0006f42:	0f 85 42 ff ff ff    	jne    c0006e8a <f_setlabel+0x72>
c0006f48:	66 81 fe ff 00       	cmp    si,0xff
c0006f4d:	0f 87 14 01 00 00    	ja     c0007067 <f_setlabel+0x24f>
c0006f53:	e9 fa 00 00 00       	jmp    c0007052 <f_setlabel+0x23a>
c0006f58:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f5d:	0f 84 27 ff ff ff    	je     c0006e8a <f_setlabel+0x72>
c0006f63:	85 db                	test   ebx,ebx
c0006f65:	74 0e                	je     c0006f75 <f_setlabel+0x15d>
c0006f67:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f6a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f6f:	75 04                	jne    c0006f75 <f_setlabel+0x15d>
c0006f71:	89 c3                	mov    ebx,eax
c0006f73:	eb ee                	jmp    c0006f63 <f_setlabel+0x14b>
c0006f75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f79:	31 d2                	xor    edx,edx
c0006f7b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f7f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f87:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f8b:	e8 1f c1 ff ff       	call   c00030af <dir_sdi>
c0006f90:	89 c6                	mov    esi,eax
c0006f92:	85 c0                	test   eax,eax
c0006f94:	0f 85 e3 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006f9a:	ba 01 00 00 00       	mov    edx,0x1
c0006f9f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fa3:	e8 17 c9 ff ff       	call   c00038bf <dir_read>
c0006fa8:	85 c0                	test   eax,eax
c0006faa:	75 21                	jne    c0006fcd <f_setlabel+0x1b5>
c0006fac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fb4:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fb7:	74 5d                	je     c0007016 <f_setlabel+0x1fe>
c0006fb9:	85 db                	test   ebx,ebx
c0006fbb:	74 0b                	je     c0006fc8 <f_setlabel+0x1b0>
c0006fbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fc2:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fc6:	eb 70                	jmp    c0007038 <f_setlabel+0x220>
c0006fc8:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fcb:	eb 70                	jmp    c000703d <f_setlabel+0x225>
c0006fcd:	83 f8 04             	cmp    eax,0x4
c0006fd0:	75 7c                	jne    c000704e <f_setlabel+0x236>
c0006fd2:	85 db                	test   ebx,ebx
c0006fd4:	0f 84 a3 00 00 00    	je     c000707d <f_setlabel+0x265>
c0006fda:	ba 01 00 00 00       	mov    edx,0x1
c0006fdf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fe3:	e8 51 ca ff ff       	call   c0003a39 <dir_alloc>
c0006fe8:	89 c6                	mov    esi,eax
c0006fea:	85 c0                	test   eax,eax
c0006fec:	0f 85 8b 00 00 00    	jne    c000707d <f_setlabel+0x265>
c0006ff2:	31 d2                	xor    edx,edx
c0006ff4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ff8:	b9 20 00 00 00       	mov    ecx,0x20
c0006ffd:	e8 e5 ab ff ff       	call   c0001be7 <mem_set>
c0007002:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007006:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007009:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000700d:	75 18                	jne    c0007027 <f_setlabel+0x20f>
c000700f:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007012:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007016:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007019:	b9 16 00 00 00       	mov    ecx,0x16
c000701e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007022:	83 c0 02             	add    eax,0x2
c0007025:	eb 9b                	jmp    c0006fc2 <f_setlabel+0x1aa>
c0007027:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000702b:	b9 0b 00 00 00       	mov    ecx,0xb
c0007030:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007034:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007038:	e8 95 ab ff ff       	call   c0001bd2 <mem_cpy>
c000703d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007041:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	e8 0e d4 ff ff       	call   c000445c <sync_fs>
c000704e:	89 c6                	mov    esi,eax
c0007050:	eb 2b                	jmp    c000707d <f_setlabel+0x265>
c0007052:	83 fb 0a             	cmp    ebx,0xa
c0007055:	0f 87 2f fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c000705b:	89 f0                	mov    eax,esi
c000705d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007061:	43                   	inc    ebx
c0007062:	e9 85 fe ff ff       	jmp    c0006eec <f_setlabel+0xd4>
c0007067:	83 fb 09             	cmp    ebx,0x9
c000706a:	0f 87 1a fe ff ff    	ja     c0006e8a <f_setlabel+0x72>
c0007070:	89 f0                	mov    eax,esi
c0007072:	66 c1 e8 08          	shr    ax,0x8
c0007076:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000707a:	43                   	inc    ebx
c000707b:	eb de                	jmp    c000705b <f_setlabel+0x243>
c000707d:	89 f0                	mov    eax,esi
c000707f:	83 c4 74             	add    esp,0x74
c0007082:	5b                   	pop    ebx
c0007083:	5e                   	pop    esi
c0007084:	c3                   	ret    

c0007085 <f_expand>:
c0007085:	55                   	push   ebp
c0007086:	57                   	push   edi
c0007087:	56                   	push   esi
c0007088:	53                   	push   ebx
c0007089:	83 ec 3c             	sub    esp,0x3c
c000708c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007090:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007094:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0007098:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000709c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070a4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ac:	89 d8                	mov    eax,ebx
c00070ae:	e8 a3 b1 ff ff       	call   c0002256 <validate>
c00070b3:	89 c5                	mov    ebp,eax
c00070b5:	85 c0                	test   eax,eax
c00070b7:	0f 85 f4 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c1:	85 ed                	test   ebp,ebp
c00070c3:	0f 85 e8 01 00 00    	jne    c00072b1 <f_expand+0x22c>
c00070c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070cd:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d1:	75 0a                	jne    c00070dd <f_expand+0x58>
c00070d3:	bd 07 00 00 00       	mov    ebp,0x7
c00070d8:	e9 d4 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00070dd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e0:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070e3:	75 ee                	jne    c00070d3 <f_expand+0x4e>
c00070e5:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070e9:	74 e8                	je     c00070d3 <f_expand+0x4e>
c00070eb:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070ef:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f1:	80 f9 04             	cmp    cl,0x4
c00070f4:	74 07                	je     c00070fd <f_expand+0x78>
c00070f6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00070fb:	77 d6                	ja     c00070d3 <f_expand+0x4e>
c00070fd:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007101:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0007105:	c1 e0 09             	shl    eax,0x9
c0007108:	8d 50 ff             	lea    edx,[eax-0x1]
c000710b:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c000710f:	0f 95 c2             	setne  dl
c0007112:	0f b6 d2             	movzx  edx,dl
c0007115:	89 d7                	mov    edi,edx
c0007117:	31 d2                	xor    edx,edx
c0007119:	52                   	push   edx
c000711a:	50                   	push   eax
c000711b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000711f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007123:	e8 a8 ac 01 00       	call   c0021dd0 <__udivdi3>
c0007128:	83 c4 10             	add    esp,0x10
c000712b:	01 f8                	add    eax,edi
c000712d:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007131:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0007134:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007138:	83 ff 01             	cmp    edi,0x1
c000713b:	76 05                	jbe    c0007142 <f_expand+0xbd>
c000713d:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007140:	77 05                	ja     c0007147 <f_expand+0xc2>
c0007142:	bf 02 00 00 00       	mov    edi,0x2
c0007147:	80 f9 04             	cmp    cl,0x4
c000714a:	75 19                	jne    c0007165 <f_expand+0xe0>
c000714c:	89 f0                	mov    eax,esi
c000714e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007152:	89 fa                	mov    edx,edi
c0007154:	e8 f3 b9 ff ff       	call   c0002b4c <find_bitmap>
c0007159:	89 c6                	mov    esi,eax
c000715b:	85 c0                	test   eax,eax
c000715d:	0f 84 70 ff ff ff    	je     c00070d3 <f_expand+0x4e>
c0007163:	eb 7f                	jmp    c00071e4 <f_expand+0x15f>
c0007165:	89 fe                	mov    esi,edi
c0007167:	89 f9                	mov    ecx,edi
c0007169:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007171:	89 ca                	mov    edx,ecx
c0007173:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0007177:	89 d8                	mov    eax,ebx
c0007179:	e8 3b bd ff ff       	call   c0002eb9 <get_fat>
c000717e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007182:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007186:	41                   	inc    ecx
c0007187:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000718b:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c000718e:	77 05                	ja     c0007195 <f_expand+0x110>
c0007190:	b9 02 00 00 00       	mov    ecx,0x2
c0007195:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c000719a:	74 3e                	je     c00071da <f_expand+0x155>
c000719c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a1:	75 0a                	jne    c00071ad <f_expand+0x128>
c00071a3:	bd 01 00 00 00       	mov    ebp,0x1
c00071a8:	e9 04 01 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071ad:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071b2:	75 13                	jne    c00071c7 <f_expand+0x142>
c00071b4:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071bc:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c0:	75 0f                	jne    c00071d1 <f_expand+0x14c>
c00071c2:	e9 ce 00 00 00       	jmp    c0007295 <f_expand+0x210>
c00071c7:	89 ce                	mov    esi,ecx
c00071c9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d1:	39 f9                	cmp    ecx,edi
c00071d3:	75 9c                	jne    c0007171 <f_expand+0xec>
c00071d5:	e9 f9 fe ff ff       	jmp    c00070d3 <f_expand+0x4e>
c00071da:	bd 02 00 00 00       	mov    ebp,0x2
c00071df:	e9 cd 00 00 00       	jmp    c00072b1 <f_expand+0x22c>
c00071e4:	83 f8 ff             	cmp    eax,0xffffffff
c00071e7:	74 ba                	je     c00071a3 <f_expand+0x11e>
c00071e9:	8d 7e ff             	lea    edi,[esi-0x1]
c00071ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071f4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00071f9:	74 51                	je     c000724c <f_expand+0x1c7>
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	89 f2                	mov    edx,esi
c0007200:	6a 01                	push   0x1
c0007202:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007206:	e8 f4 b9 ff ff       	call   c0002bff <change_bitmap>
c000720b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000720f:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c0007213:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0007217:	83 c4 10             	add    esp,0x10
c000721a:	85 c0                	test   eax,eax
c000721c:	74 2e                	je     c000724c <f_expand+0x1c7>
c000721e:	eb 71                	jmp    c0007291 <f_expand+0x20c>
c0007220:	83 c9 ff             	or     ecx,0xffffffff
c0007223:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007228:	74 03                	je     c000722d <f_expand+0x1a8>
c000722a:	8d 4f 01             	lea    ecx,[edi+0x1]
c000722d:	89 fa                	mov    edx,edi
c000722f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007233:	e8 7c ba ff ff       	call   c0002cb4 <put_fat>
c0007238:	85 c0                	test   eax,eax
c000723a:	75 55                	jne    c0007291 <f_expand+0x20c>
c000723c:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007240:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0007244:	47                   	inc    edi
c0007245:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000724a:	75 d4                	jne    c0007220 <f_expand+0x19b>
c000724c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007250:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007254:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007259:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000725c:	74 53                	je     c00072b1 <f_expand+0x22c>
c000725e:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007261:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0007265:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007269:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000726d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007271:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0007274:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0007277:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000727a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000727d:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007280:	39 ca                	cmp    edx,ecx
c0007282:	77 2d                	ja     c00072b1 <f_expand+0x22c>
c0007284:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007288:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000728c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000728f:	eb 20                	jmp    c00072b1 <f_expand+0x22c>
c0007291:	89 c5                	mov    ebp,eax
c0007293:	eb 1c                	jmp    c00072b1 <f_expand+0x22c>
c0007295:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000729a:	74 0c                	je     c00072a8 <f_expand+0x223>
c000729c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a0:	89 f7                	mov    edi,esi
c00072a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072a6:	eb 9d                	jmp    c0007245 <f_expand+0x1c0>
c00072a8:	8d 46 ff             	lea    eax,[esi-0x1]
c00072ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072af:	eb 9b                	jmp    c000724c <f_expand+0x1c7>
c00072b1:	83 c4 3c             	add    esp,0x3c
c00072b4:	89 e8                	mov    eax,ebp
c00072b6:	5b                   	pop    ebx
c00072b7:	5e                   	pop    esi
c00072b8:	5f                   	pop    edi
c00072b9:	5d                   	pop    ebp
c00072ba:	c3                   	ret    

c00072bb <f_forward>:
c00072bb:	55                   	push   ebp
c00072bc:	57                   	push   edi
c00072bd:	56                   	push   esi
c00072be:	53                   	push   ebx
c00072bf:	83 ec 2c             	sub    esp,0x2c
c00072c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072d4:	89 d8                	mov    eax,ebx
c00072d6:	e8 7b af ff ff       	call   c0002256 <validate>
c00072db:	89 c5                	mov    ebp,eax
c00072dd:	85 c0                	test   eax,eax
c00072df:	0f 85 aa 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072e5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072e9:	85 ed                	test   ebp,ebp
c00072eb:	0f 85 9e 01 00 00    	jne    c000748f <f_forward+0x1d4>
c00072f1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072f5:	0f 84 8f 01 00 00    	je     c000748a <f_forward+0x1cf>
c00072fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00072fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007301:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007304:	bf 00 00 00 00       	mov    edi,0x0
c0007309:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000730c:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007310:	89 d1                	mov    ecx,edx
c0007312:	19 f9                	sbb    ecx,edi
c0007314:	0f 83 cf 00 00 00    	jae    c00073e9 <f_forward+0x12e>
c000731a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000731e:	e9 c6 00 00 00       	jmp    c00073e9 <f_forward+0x12e>
c0007323:	50                   	push   eax
c0007324:	50                   	push   eax
c0007325:	6a 00                	push   0x0
c0007327:	6a 00                	push   0x0
c0007329:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000732d:	83 c4 10             	add    esp,0x10
c0007330:	85 c0                	test   eax,eax
c0007332:	0f 84 57 01 00 00    	je     c000748f <f_forward+0x1d4>
c0007338:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000733b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000733f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007342:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007346:	89 d7                	mov    edi,edx
c0007348:	8d 4e ff             	lea    ecx,[esi-0x1]
c000734b:	89 c6                	mov    esi,eax
c000734d:	0f ac fe 09          	shrd   esi,edi,0x9
c0007351:	21 ce                	and    esi,ecx
c0007353:	89 c1                	mov    ecx,eax
c0007355:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000735b:	0f 84 98 00 00 00    	je     c00073f9 <f_forward+0x13e>
c0007361:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007365:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007368:	89 c8                	mov    eax,ecx
c000736a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000736e:	e8 79 aa ff ff       	call   c0001dec <clst2sect>
c0007373:	89 d7                	mov    edi,edx
c0007375:	09 c7                	or     edi,eax
c0007377:	0f 84 9e 00 00 00    	je     c000741b <f_forward+0x160>
c000737d:	31 ff                	xor    edi,edi
c000737f:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007382:	01 c6                	add    esi,eax
c0007384:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007388:	11 d7                	adc    edi,edx
c000738a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000738d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007390:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007394:	39 fa                	cmp    edx,edi
c0007396:	0f 85 a2 00 00 00    	jne    c000743e <f_forward+0x183>
c000739c:	39 f0                	cmp    eax,esi
c000739e:	0f 85 9a 00 00 00    	jne    c000743e <f_forward+0x183>
c00073a4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073a7:	ba 00 02 00 00       	mov    edx,0x200
c00073ac:	25 ff 01 00 00       	and    eax,0x1ff
c00073b1:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073b5:	29 c2                	sub    edx,eax
c00073b7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073ba:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073bd:	39 d1                	cmp    ecx,edx
c00073bf:	76 02                	jbe    c00073c3 <f_forward+0x108>
c00073c1:	89 d1                	mov    ecx,edx
c00073c3:	8d 73 50             	lea    esi,[ebx+0x50]
c00073c6:	52                   	push   edx
c00073c7:	01 c6                	add    esi,eax
c00073c9:	52                   	push   edx
c00073ca:	51                   	push   ecx
c00073cb:	56                   	push   esi
c00073cc:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d0:	83 c4 10             	add    esp,0x10
c00073d3:	85 c0                	test   eax,eax
c00073d5:	74 44                	je     c000741b <f_forward+0x160>
c00073d7:	31 ff                	xor    edi,edi
c00073d9:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073dc:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073df:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073e3:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073e7:	01 07                	add    DWORD PTR [edi],eax
c00073e9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073ee:	0f 85 2f ff ff ff    	jne    c0007323 <f_forward+0x68>
c00073f4:	e9 96 00 00 00       	jmp    c000748f <f_forward+0x1d4>
c00073f9:	85 f6                	test   esi,esi
c00073fb:	0f 85 60 ff ff ff    	jne    c0007361 <f_forward+0xa6>
c0007401:	89 d7                	mov    edi,edx
c0007403:	09 c7                	or     edi,eax
c0007405:	75 05                	jne    c000740c <f_forward+0x151>
c0007407:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000740a:	eb 0a                	jmp    c0007416 <f_forward+0x15b>
c000740c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000740f:	89 d8                	mov    eax,ebx
c0007411:	e8 a3 ba ff ff       	call   c0002eb9 <get_fat>
c0007416:	83 f8 01             	cmp    eax,0x1
c0007419:	77 0b                	ja     c0007426 <f_forward+0x16b>
c000741b:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000741f:	bd 02 00 00 00       	mov    ebp,0x2
c0007424:	eb 69                	jmp    c000748f <f_forward+0x1d4>
c0007426:	83 f8 ff             	cmp    eax,0xffffffff
c0007429:	75 0b                	jne    c0007436 <f_forward+0x17b>
c000742b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000742f:	bd 01 00 00 00       	mov    ebp,0x1
c0007434:	eb 59                	jmp    c000748f <f_forward+0x1d4>
c0007436:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007439:	e9 23 ff ff ff       	jmp    c0007361 <f_forward+0xa6>
c000743e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007442:	79 20                	jns    c0007464 <f_forward+0x1a9>
c0007444:	83 ec 0c             	sub    esp,0xc
c0007447:	6a 01                	push   0x1
c0007449:	52                   	push   edx
c000744a:	50                   	push   eax
c000744b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000744f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007453:	50                   	push   eax
c0007454:	e8 c5 a6 ff ff       	call   c0001b1e <disk_write>
c0007459:	83 c4 20             	add    esp,0x20
c000745c:	85 c0                	test   eax,eax
c000745e:	75 cb                	jne    c000742b <f_forward+0x170>
c0007460:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007464:	83 ec 0c             	sub    esp,0xc
c0007467:	6a 01                	push   0x1
c0007469:	57                   	push   edi
c000746a:	56                   	push   esi
c000746b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000746f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007473:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007477:	50                   	push   eax
c0007478:	e8 8b a6 ff ff       	call   c0001b08 <disk_read>
c000747d:	83 c4 20             	add    esp,0x20
c0007480:	85 c0                	test   eax,eax
c0007482:	0f 84 1c ff ff ff    	je     c00073a4 <f_forward+0xe9>
c0007488:	eb a1                	jmp    c000742b <f_forward+0x170>
c000748a:	bd 07 00 00 00       	mov    ebp,0x7
c000748f:	83 c4 2c             	add    esp,0x2c
c0007492:	89 e8                	mov    eax,ebp
c0007494:	5b                   	pop    ebx
c0007495:	5e                   	pop    esi
c0007496:	5f                   	pop    edi
c0007497:	5d                   	pop    ebp
c0007498:	c3                   	ret    

c0007499 <f_mkfs>:
c0007499:	55                   	push   ebp
c000749a:	57                   	push   edi
c000749b:	56                   	push   esi
c000749c:	53                   	push   ebx
c000749d:	bb 0b 00 00 00       	mov    ebx,0xb
c00074a2:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074a8:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074af:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074b6:	e8 7a ac ff ff       	call   c0002135 <get_ldnumber>
c00074bb:	85 c0                	test   eax,eax
c00074bd:	0f 88 ec 10 00 00    	js     c00085af <f_mkfs+0x1116>
c00074c3:	8b 14 85 40 73 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8cc0]
c00074ca:	85 d2                	test   edx,edx
c00074cc:	74 03                	je     c00074d1 <f_mkfs+0x38>
c00074ce:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d1:	85 f6                	test   esi,esi
c00074d3:	75 05                	jne    c00074da <f_mkfs+0x41>
c00074d5:	be 20 2c 02 c0       	mov    esi,0xc0022c20
c00074da:	83 ec 0c             	sub    esp,0xc
c00074dd:	0f b6 c0             	movzx  eax,al
c00074e0:	bb 03 00 00 00       	mov    ebx,0x3
c00074e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ed:	e8 13 a6 ff ff       	call   c0001b05 <disk_initialize>
c00074f2:	83 c4 10             	add    esp,0x10
c00074f5:	a8 01                	test   al,0x1
c00074f7:	0f 85 b2 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c00074fd:	bb 0a 00 00 00       	mov    ebx,0xa
c0007502:	a8 04                	test   al,0x4
c0007504:	0f 85 a5 10 00 00    	jne    c00085af <f_mkfs+0x1116>
c000750a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000750d:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007511:	85 c0                	test   eax,eax
c0007513:	75 20                	jne    c0007535 <f_mkfs+0x9c>
c0007515:	51                   	push   ecx
c0007516:	8d 44 24 78          	lea    eax,[esp+0x78]
c000751a:	50                   	push   eax
c000751b:	6a 03                	push   0x3
c000751d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007521:	e8 0e a6 ff ff       	call   c0001b34 <disk_ioctl>
c0007526:	83 c4 10             	add    esp,0x10
c0007529:	85 c0                	test   eax,eax
c000752b:	74 08                	je     c0007535 <f_mkfs+0x9c>
c000752d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007535:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007539:	8d 42 ff             	lea    eax,[edx-0x1]
c000753c:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007541:	77 04                	ja     c0007547 <f_mkfs+0xae>
c0007543:	85 c2                	test   edx,eax
c0007545:	74 08                	je     c000754f <f_mkfs+0xb6>
c0007547:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000754f:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007552:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007556:	48                   	dec    eax
c0007557:	3c 01                	cmp    al,0x1
c0007559:	76 05                	jbe    c0007560 <f_mkfs+0xc7>
c000755b:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007560:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007567:	48                   	dec    eax
c0007568:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000756d:	77 07                	ja     c0007576 <f_mkfs+0xdd>
c000756f:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007574:	74 08                	je     c000757e <f_mkfs+0xe5>
c0007576:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000757e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007581:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007587:	77 07                	ja     c0007590 <f_mkfs+0xf7>
c0007589:	8d 43 ff             	lea    eax,[ebx-0x1]
c000758c:	85 d8                	test   eax,ebx
c000758e:	74 02                	je     c0007592 <f_mkfs+0xf9>
c0007590:	31 db                	xor    ebx,ebx
c0007592:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000759d:	77 0a                	ja     c00075a9 <f_mkfs+0x110>
c000759f:	bb 11 00 00 00       	mov    ebx,0x11
c00075a4:	e9 06 10 00 00       	jmp    c00085af <f_mkfs+0x1116>
c00075a9:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b0:	8b 36                	mov    esi,DWORD PTR [esi]
c00075b2:	85 ed                	test   ebp,ebp
c00075b4:	75 1e                	jne    c00075d4 <f_mkfs+0x13b>
c00075b6:	83 ec 0c             	sub    esp,0xc
c00075b9:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c0:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075c5:	50                   	push   eax
c00075c6:	e8 f1 0f 00 00       	call   c00085bc <ff_memalloc>
c00075cb:	83 c4 10             	add    esp,0x10
c00075ce:	89 c5                	mov    ebp,eax
c00075d0:	85 c0                	test   eax,eax
c00075d2:	74 cb                	je     c000759f <f_mkfs+0x106>
c00075d4:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075dc:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075e4:	52                   	push   edx
c00075e5:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075e9:	50                   	push   eax
c00075ea:	6a 01                	push   0x1
c00075ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f0:	e8 3f a5 ff ff       	call   c0001b34 <disk_ioctl>
c00075f5:	83 c4 10             	add    esp,0x10
c00075f8:	85 c0                	test   eax,eax
c00075fa:	0f 85 4a 0f 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007600:	89 f1                	mov    ecx,esi
c0007602:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000760a:	83 e1 0f             	and    ecx,0xf
c000760d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007615:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007619:	83 e6 08             	and    esi,0x8
c000761c:	75 56                	jne    c0007674 <f_mkfs+0x1db>
c000761e:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007622:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007626:	83 ff 00             	cmp    edi,0x0
c0007629:	76 20                	jbe    c000764b <f_mkfs+0x1b2>
c000762b:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007630:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007638:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000763e:	83 d7 ff             	adc    edi,0xffffffff
c0007641:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007645:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007649:	eb 21                	jmp    c000766c <f_mkfs+0x1d3>
c000764b:	ba 3f 00 00 00       	mov    edx,0x3f
c0007650:	39 f2                	cmp    edx,esi
c0007652:	19 f8                	sbb    eax,edi
c0007654:	73 1e                	jae    c0007674 <f_mkfs+0x1db>
c0007656:	83 c6 c1             	add    esi,0xffffffc1
c0007659:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007661:	83 d7 ff             	adc    edi,0xffffffff
c0007664:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007668:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000766c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007674:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007678:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000767c:	89 04 24             	mov    DWORD PTR [esp],eax
c000767f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007683:	31 c0                	xor    eax,eax
c0007685:	ba 7f 00 00 00       	mov    edx,0x7f
c000768a:	89 c7                	mov    edi,eax
c000768c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000768f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007693:	0f 83 c5 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007699:	89 df                	mov    edi,ebx
c000769b:	c1 ef 09             	shr    edi,0x9
c000769e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076a2:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076a9:	c1 ef 09             	shr    edi,0x9
c00076ac:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b1:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076b5:	74 29                	je     c00076e0 <f_mkfs+0x247>
c00076b7:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076bd:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076c2:	0f 97 c2             	seta   dl
c00076c5:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076c8:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076cc:	0f 92 c0             	setb   al
c00076cf:	08 c2                	or     dl,al
c00076d1:	75 5b                	jne    c000772e <f_mkfs+0x295>
c00076d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076d7:	83 e0 07             	and    eax,0x7
c00076da:	3c 04                	cmp    al,0x4
c00076dc:	74 50                	je     c000772e <f_mkfs+0x295>
c00076de:	eb 1b                	jmp    c00076fb <f_mkfs+0x262>
c00076e0:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076e5:	0f 87 73 0a 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00076eb:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f1:	76 08                	jbe    c00076fb <f_mkfs+0x262>
c00076f3:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00076fb:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076ff:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007703:	83 e0 01             	and    eax,0x1
c0007706:	80 e1 02             	and    cl,0x2
c0007709:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000770d:	74 0d                	je     c000771c <f_mkfs+0x283>
c000770f:	84 c0                	test   al,al
c0007711:	0f 84 53 09 00 00    	je     c000806a <f_mkfs+0xbd1>
c0007717:	e9 12 08 00 00       	jmp    c0007f2e <f_mkfs+0xa95>
c000771c:	bb 13 00 00 00       	mov    ebx,0x13
c0007721:	84 c0                	test   al,al
c0007723:	0f 85 05 08 00 00    	jne    c0007f2e <f_mkfs+0xa95>
c0007729:	e9 39 0e 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c000772e:	31 c0                	xor    eax,eax
c0007730:	ba ff 0f 00 00       	mov    edx,0xfff
c0007735:	89 c7                	mov    edi,eax
c0007737:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000773a:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000773e:	0f 83 1a 0a 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007744:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000774a:	77 39                	ja     c0007785 <f_mkfs+0x2ec>
c000774c:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007751:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007759:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000775c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007760:	73 08                	jae    c000776a <f_mkfs+0x2d1>
c0007762:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000776a:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000776f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007772:	b8 00 00 00 00       	mov    eax,0x0
c0007777:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000777b:	73 08                	jae    c0007785 <f_mkfs+0x2ec>
c000777d:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007785:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007789:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000778d:	83 c0 20             	add    eax,0x20
c0007790:	83 d2 00             	adc    edx,0x0
c0007793:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007797:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000779b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000779f:	31 d2                	xor    edx,edx
c00077a1:	31 ff                	xor    edi,edi
c00077a3:	52                   	push   edx
c00077a4:	89 fb                	mov    ebx,edi
c00077a6:	50                   	push   eax
c00077a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077af:	e8 1c a6 01 00       	call   c0021dd0 <__udivdi3>
c00077b4:	83 c4 10             	add    esp,0x10
c00077b7:	c1 e0 02             	shl    eax,0x2
c00077ba:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077be:	05 07 02 00 00       	add    eax,0x207
c00077c3:	89 f1                	mov    ecx,esi
c00077c5:	c1 e8 09             	shr    eax,0x9
c00077c8:	83 c1 ff             	add    ecx,0xffffffff
c00077cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077cf:	83 d3 ff             	adc    ebx,0xffffffff
c00077d2:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077d6:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077da:	31 d2                	xor    edx,edx
c00077dc:	01 c8                	add    eax,ecx
c00077de:	11 da                	adc    edx,ebx
c00077e0:	89 c1                	mov    ecx,eax
c00077e2:	f7 de                	neg    esi
c00077e4:	89 d0                	mov    eax,edx
c00077e6:	83 d7 00             	adc    edi,0x0
c00077e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077ed:	f7 df                	neg    edi
c00077ef:	21 f1                	and    ecx,esi
c00077f1:	21 f8                	and    eax,edi
c00077f3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00077fb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00077ff:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007803:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007807:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780a:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000780e:	0f ac d0 01          	shrd   eax,edx,0x1
c0007812:	89 df                	mov    edi,ebx
c0007814:	d1 ea                	shr    edx,1
c0007816:	39 c1                	cmp    ecx,eax
c0007818:	19 d7                	sbb    edi,edx
c000781a:	0f 83 3e 09 00 00    	jae    c000815e <f_mkfs+0xcc5>
c0007820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007824:	31 d2                	xor    edx,edx
c0007826:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000782a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000782e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007832:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007835:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007839:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000783d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007841:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007845:	83 f8 0f             	cmp    eax,0xf
c0007848:	0f 86 10 09 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c000784e:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007856:	0f 87 02 09 00 00    	ja     c000815e <f_mkfs+0xcc5>
c000785c:	31 d2                	xor    edx,edx
c000785e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007862:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000786a:	83 c0 07             	add    eax,0x7
c000786d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007875:	c1 e8 03             	shr    eax,0x3
c0007878:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000787f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007887:	c1 e0 09             	shl    eax,0x9
c000788a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000788e:	48                   	dec    eax
c000788f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007893:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007897:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c000789b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000789f:	31 d2                	xor    edx,edx
c00078a1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078a5:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b0:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078b5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078b9:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078bd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078c5:	31 ff                	xor    edi,edi
c00078c7:	31 f6                	xor    esi,esi
c00078c9:	31 db                	xor    ebx,ebx
c00078cb:	85 ff                	test   edi,edi
c00078cd:	74 05                	je     c00078d4 <f_mkfs+0x43b>
c00078cf:	4f                   	dec    edi
c00078d0:	74 44                	je     c0007916 <f_mkfs+0x47d>
c00078d2:	eb 4f                	jmp    c0007923 <f_mkfs+0x48a>
c00078d4:	83 ec 0c             	sub    esp,0xc
c00078d7:	0f b7 c3             	movzx  eax,bx
c00078da:	50                   	push   eax
c00078db:	e8 18 0e 00 00       	call   c00086f8 <ff_wtoupper>
c00078e0:	83 c4 10             	add    esp,0x10
c00078e3:	89 c1                	mov    ecx,eax
c00078e5:	8d 53 01             	lea    edx,[ebx+0x1]
c00078e8:	66 39 c3             	cmp    bx,ax
c00078eb:	75 3e                	jne    c000792b <f_mkfs+0x492>
c00078ed:	be 01 00 00 00       	mov    esi,0x1
c00078f2:	89 df                	mov    edi,ebx
c00078f4:	66 01 f7             	add    di,si
c00078f7:	75 07                	jne    c0007900 <f_mkfs+0x467>
c00078f9:	83 fe 7f             	cmp    esi,0x7f
c00078fc:	77 31                	ja     c000792f <f_mkfs+0x496>
c00078fe:	eb 16                	jmp    c0007916 <f_mkfs+0x47d>
c0007900:	83 ec 0c             	sub    esp,0xc
c0007903:	0f b7 ff             	movzx  edi,di
c0007906:	57                   	push   edi
c0007907:	e8 ec 0d 00 00       	call   c00086f8 <ff_wtoupper>
c000790c:	83 c4 10             	add    esp,0x10
c000790f:	39 c7                	cmp    edi,eax
c0007911:	75 e6                	jne    c00078f9 <f_mkfs+0x460>
c0007913:	46                   	inc    esi
c0007914:	eb dc                	jmp    c00078f2 <f_mkfs+0x459>
c0007916:	31 c0                	xor    eax,eax
c0007918:	89 d9                	mov    ecx,ebx
c000791a:	4e                   	dec    esi
c000791b:	0f 95 c0             	setne  al
c000791e:	43                   	inc    ebx
c000791f:	89 c7                	mov    edi,eax
c0007921:	eb 14                	jmp    c0007937 <f_mkfs+0x49e>
c0007923:	89 f1                	mov    ecx,esi
c0007925:	01 f3                	add    ebx,esi
c0007927:	31 ff                	xor    edi,edi
c0007929:	eb 0c                	jmp    c0007937 <f_mkfs+0x49e>
c000792b:	89 d3                	mov    ebx,edx
c000792d:	eb 08                	jmp    c0007937 <f_mkfs+0x49e>
c000792f:	bf 02 00 00 00       	mov    edi,0x2
c0007934:	83 c9 ff             	or     ecx,0xffffffff
c0007937:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000793b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000793e:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007942:	0f b6 c1             	movzx  eax,cl
c0007945:	e8 04 a7 ff ff       	call   c000204e <xsum32>
c000794a:	66 c1 e9 08          	shr    cx,0x8
c000794e:	89 c2                	mov    edx,eax
c0007950:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007953:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007957:	0f b7 c1             	movzx  eax,cx
c000795a:	e8 ef a6 ff ff       	call   c000204e <xsum32>
c000795f:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007964:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007968:	66 85 db             	test   bx,bx
c000796b:	74 1f                	je     c000798c <f_mkfs+0x4f3>
c000796d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007970:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007977:	83 c0 02             	add    eax,0x2
c000797a:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007980:	39 c2                	cmp    edx,eax
c0007982:	74 08                	je     c000798c <f_mkfs+0x4f3>
c0007984:	89 04 24             	mov    DWORD PTR [esp],eax
c0007987:	e9 3f ff ff ff       	jmp    c00078cb <f_mkfs+0x432>
c000798c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000798f:	83 ec 0c             	sub    esp,0xc
c0007992:	05 01 02 00 00       	add    eax,0x201
c0007997:	c1 e8 09             	shr    eax,0x9
c000799a:	50                   	push   eax
c000799b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000799f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079a7:	55                   	push   ebp
c00079a8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ac:	e8 6d a1 ff ff       	call   c0001b1e <disk_write>
c00079b1:	83 c4 20             	add    esp,0x20
c00079b4:	85 c0                	test   eax,eax
c00079b6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079b9:	0f 85 8b 0b 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00079bf:	89 d0                	mov    eax,edx
c00079c1:	31 d2                	xor    edx,edx
c00079c3:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079c7:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079cb:	66 85 db             	test   bx,bx
c00079ce:	74 04                	je     c00079d4 <f_mkfs+0x53b>
c00079d0:	31 c0                	xor    eax,eax
c00079d2:	eb b0                	jmp    c0007984 <f_mkfs+0x4eb>
c00079d4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079d8:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079dc:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e0:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079e6:	31 d2                	xor    edx,edx
c00079e8:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079f3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079f7:	c1 eb 09             	shr    ebx,0x9
c00079fa:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a01:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a05:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a0d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a11:	8d 70 01             	lea    esi,[eax+0x1]
c0007a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a18:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1c:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2d:	89 c1                	mov    ecx,eax
c0007a2f:	89 e8                	mov    eax,ebp
c0007a31:	e8 b1 a1 ff ff       	call   c0001be7 <mem_set>
c0007a36:	31 c0                	xor    eax,eax
c0007a38:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a3b:	76 10                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a3d:	83 fe 07             	cmp    esi,0x7
c0007a40:	76 0b                	jbe    c0007a4d <f_mkfs+0x5b4>
c0007a42:	40                   	inc    eax
c0007a43:	83 ee 08             	sub    esi,0x8
c0007a46:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a4b:	eb eb                	jmp    c0007a38 <f_mkfs+0x59f>
c0007a4d:	b2 01                	mov    dl,0x1
c0007a4f:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a53:	85 f6                	test   esi,esi
c0007a55:	74 0c                	je     c0007a63 <f_mkfs+0x5ca>
c0007a57:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a5a:	76 07                	jbe    c0007a63 <f_mkfs+0x5ca>
c0007a5c:	08 11                	or     BYTE PTR [ecx],dl
c0007a5e:	4e                   	dec    esi
c0007a5f:	d1 e2                	shl    edx,1
c0007a61:	eb f0                	jmp    c0007a53 <f_mkfs+0x5ba>
c0007a63:	89 df                	mov    edi,ebx
c0007a65:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a69:	76 04                	jbe    c0007a6f <f_mkfs+0x5d6>
c0007a6b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a6f:	83 ec 0c             	sub    esp,0xc
c0007a72:	57                   	push   edi
c0007a73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a77:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7b:	55                   	push   ebp
c0007a7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a80:	e8 99 a0 ff ff       	call   c0001b1e <disk_write>
c0007a85:	83 c4 20             	add    esp,0x20
c0007a88:	85 c0                	test   eax,eax
c0007a8a:	0f 85 ba 0a 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007a90:	31 d2                	xor    edx,edx
c0007a92:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a96:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007a9a:	29 fb                	sub    ebx,edi
c0007a9c:	0f 85 7a ff ff ff    	jne    c0007a1c <f_mkfs+0x583>
c0007aa2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aa6:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007aae:	31 f6                	xor    esi,esi
c0007ab0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ab4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ab7:	31 d2                	xor    edx,edx
c0007ab9:	89 e8                	mov    eax,ebp
c0007abb:	e8 27 a1 ff ff       	call   c0001be7 <mem_set>
c0007ac0:	31 c9                	xor    ecx,ecx
c0007ac2:	85 db                	test   ebx,ebx
c0007ac4:	75 40                	jne    c0007b06 <f_mkfs+0x66d>
c0007ac6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007acb:	89 e8                	mov    eax,ebp
c0007acd:	bb 02 00 00 00       	mov    ebx,0x2
c0007ad2:	e8 f2 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ad7:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ada:	83 ca ff             	or     edx,0xffffffff
c0007add:	e8 e7 a0 ff ff       	call   c0001bc9 <st_dword>
c0007ae2:	b9 08 00 00 00       	mov    ecx,0x8
c0007ae7:	eb 1d                	jmp    c0007b06 <f_mkfs+0x66d>
c0007ae9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007aec:	76 3b                	jbe    c0007b29 <f_mkfs+0x690>
c0007aee:	43                   	inc    ebx
c0007aef:	83 fe 01             	cmp    esi,0x1
c0007af2:	89 da                	mov    edx,ebx
c0007af4:	77 03                	ja     c0007af9 <f_mkfs+0x660>
c0007af6:	83 ca ff             	or     edx,0xffffffff
c0007af9:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007afd:	4e                   	dec    esi
c0007afe:	e8 c6 a0 ff ff       	call   c0001bc9 <st_dword>
c0007b03:	83 c1 04             	add    ecx,0x4
c0007b06:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b0a:	85 f6                	test   esi,esi
c0007b0c:	75 db                	jne    c0007ae9 <f_mkfs+0x650>
c0007b0e:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b13:	77 14                	ja     c0007b29 <f_mkfs+0x690>
c0007b15:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b19:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b20:	85 f6                	test   esi,esi
c0007b22:	74 05                	je     c0007b29 <f_mkfs+0x690>
c0007b24:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b27:	77 dd                	ja     c0007b06 <f_mkfs+0x66d>
c0007b29:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b2d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b31:	39 cf                	cmp    edi,ecx
c0007b33:	76 02                	jbe    c0007b37 <f_mkfs+0x69e>
c0007b35:	89 cf                	mov    edi,ecx
c0007b37:	83 ec 0c             	sub    esp,0xc
c0007b3a:	57                   	push   edi
c0007b3b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b3f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b43:	55                   	push   ebp
c0007b44:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b48:	e8 d1 9f ff ff       	call   c0001b1e <disk_write>
c0007b4d:	83 c4 20             	add    esp,0x20
c0007b50:	85 c0                	test   eax,eax
c0007b52:	0f 85 f2 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007b58:	31 d2                	xor    edx,edx
c0007b5a:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b5e:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b62:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b66:	0f 85 48 ff ff ff    	jne    c0007ab4 <f_mkfs+0x61b>
c0007b6c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b6f:	31 d2                	xor    edx,edx
c0007b71:	89 e8                	mov    eax,ebp
c0007b73:	31 ff                	xor    edi,edi
c0007b75:	e8 6d a0 ff ff       	call   c0001be7 <mem_set>
c0007b7a:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b7d:	ba 02 00 00 00       	mov    edx,0x2
c0007b82:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b86:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b8a:	e8 3a a0 ff ff       	call   c0001bc9 <st_dword>
c0007b8f:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b92:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b96:	e8 2e a0 ff ff       	call   c0001bc9 <st_dword>
c0007b9b:	8d 45 44             	lea    eax,[ebp+0x44]
c0007b9e:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007ba2:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007ba6:	e8 1e a0 ff ff       	call   c0001bc9 <st_dword>
c0007bab:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bae:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bb2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bb6:	83 c2 02             	add    edx,0x2
c0007bb9:	e8 0b a0 ff ff       	call   c0001bc9 <st_dword>
c0007bbe:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bc5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bc9:	e8 fb 9f ff ff       	call   c0001bc9 <st_dword>
c0007bce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bd2:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bd7:	89 c6                	mov    esi,eax
c0007bd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bdd:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007be4:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007be8:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007beb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bef:	39 cb                	cmp    ebx,ecx
c0007bf1:	76 02                	jbe    c0007bf5 <f_mkfs+0x75c>
c0007bf3:	89 cb                	mov    ebx,ecx
c0007bf5:	83 ec 0c             	sub    esp,0xc
c0007bf8:	53                   	push   ebx
c0007bf9:	57                   	push   edi
c0007bfa:	56                   	push   esi
c0007bfb:	55                   	push   ebp
c0007bfc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c00:	e8 19 9f ff ff       	call   c0001b1e <disk_write>
c0007c05:	83 c4 20             	add    esp,0x20
c0007c08:	85 c0                	test   eax,eax
c0007c0a:	0f 85 3a 09 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007c10:	31 d2                	xor    edx,edx
c0007c12:	b9 00 02 00 00       	mov    ecx,0x200
c0007c17:	89 e8                	mov    eax,ebp
c0007c19:	e8 c9 9f ff ff       	call   c0001be7 <mem_set>
c0007c1e:	31 d2                	xor    edx,edx
c0007c20:	01 de                	add    esi,ebx
c0007c22:	11 d7                	adc    edi,edx
c0007c24:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c27:	75 bf                	jne    c0007be8 <f_mkfs+0x74f>
c0007c29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c2d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c31:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c39:	b9 00 02 00 00       	mov    ecx,0x200
c0007c3e:	31 d2                	xor    edx,edx
c0007c40:	89 e8                	mov    eax,ebp
c0007c42:	e8 a0 9f ff ff       	call   c0001be7 <mem_set>
c0007c47:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c4c:	ba 00 2d 02 c0       	mov    edx,0xc0022d00
c0007c51:	89 e8                	mov    eax,ebp
c0007c53:	e8 7a 9f ff ff       	call   c0001bd2 <mem_cpy>
c0007c58:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c5b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c63:	e8 64 9f ff ff       	call   c0001bcc <st_qword>
c0007c68:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c6c:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c6f:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c73:	e8 54 9f ff ff       	call   c0001bcc <st_qword>
c0007c78:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c7b:	ba 20 00 00 00       	mov    edx,0x20
c0007c80:	e8 44 9f ff ff       	call   c0001bc9 <st_dword>
c0007c85:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c8d:	e8 37 9f ff ff       	call   c0001bc9 <st_dword>
c0007c92:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c96:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007c9a:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007c9e:	e8 26 9f ff ff       	call   c0001bc9 <st_dword>
c0007ca3:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ca6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007caa:	e8 1a 9f ff ff       	call   c0001bc9 <st_dword>
c0007caf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cb3:	8d 50 02             	lea    edx,[eax+0x2]
c0007cb6:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cb9:	e8 0b 9f ff ff       	call   c0001bc9 <st_dword>
c0007cbe:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc1:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cc6:	e8 fe 9e ff ff       	call   c0001bc9 <st_dword>
c0007ccb:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cce:	ba 00 01 00 00       	mov    edx,0x100
c0007cd3:	e8 ed 9e ff ff       	call   c0001bc5 <st_word>
c0007cd8:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007cdc:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce1:	48                   	dec    eax
c0007ce2:	74 05                	je     c0007ce9 <f_mkfs+0x850>
c0007ce4:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007ce7:	eb f8                	jmp    c0007ce1 <f_mkfs+0x848>
c0007ce9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ced:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cf5:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007cf9:	74 05                	je     c0007d00 <f_mkfs+0x867>
c0007cfb:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007cfe:	eb f5                	jmp    c0007cf5 <f_mkfs+0x85c>
c0007d00:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d03:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d08:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d0e:	31 db                	xor    ebx,ebx
c0007d10:	e8 b0 9e ff ff       	call   c0001bc5 <st_word>
c0007d15:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d1b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d23:	e8 9d 9e ff ff       	call   c0001bc5 <st_word>
c0007d28:	31 c9                	xor    ecx,ecx
c0007d2a:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d2d:	83 f8 01             	cmp    eax,0x1
c0007d30:	76 13                	jbe    c0007d45 <f_mkfs+0x8ac>
c0007d32:	83 f9 70             	cmp    ecx,0x70
c0007d35:	74 0e                	je     c0007d45 <f_mkfs+0x8ac>
c0007d37:	89 da                	mov    edx,ebx
c0007d39:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d3e:	e8 0b a3 ff ff       	call   c000204e <xsum32>
c0007d43:	89 c3                	mov    ebx,eax
c0007d45:	41                   	inc    ecx
c0007d46:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d4c:	75 dc                	jne    c0007d2a <f_mkfs+0x891>
c0007d4e:	89 f0                	mov    eax,esi
c0007d50:	89 fa                	mov    edx,edi
c0007d52:	83 c0 01             	add    eax,0x1
c0007d55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d59:	83 d2 00             	adc    edx,0x0
c0007d5c:	83 ec 0c             	sub    esp,0xc
c0007d5f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d63:	6a 01                	push   0x1
c0007d65:	57                   	push   edi
c0007d66:	56                   	push   esi
c0007d67:	55                   	push   ebp
c0007d68:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d6c:	e8 ad 9d ff ff       	call   c0001b1e <disk_write>
c0007d71:	83 c4 20             	add    esp,0x20
c0007d74:	85 c0                	test   eax,eax
c0007d76:	0f 85 ce 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007d7c:	31 d2                	xor    edx,edx
c0007d7e:	b9 00 02 00 00       	mov    ecx,0x200
c0007d83:	89 e8                	mov    eax,ebp
c0007d85:	e8 5d 9e ff ff       	call   c0001be7 <mem_set>
c0007d8a:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d92:	e8 2e 9e ff ff       	call   c0001bc5 <st_word>
c0007d97:	89 f0                	mov    eax,esi
c0007d99:	89 fa                	mov    edx,edi
c0007d9b:	83 c0 09             	add    eax,0x9
c0007d9e:	83 d2 00             	adc    edx,0x0
c0007da1:	89 04 24             	mov    DWORD PTR [esp],eax
c0007da4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007da8:	31 c9                	xor    ecx,ecx
c0007daa:	41                   	inc    ecx
c0007dab:	89 da                	mov    edx,ebx
c0007dad:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007db2:	e8 97 a2 ff ff       	call   c000204e <xsum32>
c0007db7:	89 c3                	mov    ebx,eax
c0007db9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dbf:	75 e9                	jne    c0007daa <f_mkfs+0x911>
c0007dc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dc5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dc9:	83 c0 01             	add    eax,0x1
c0007dcc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd0:	83 d2 00             	adc    edx,0x0
c0007dd3:	83 ec 0c             	sub    esp,0xc
c0007dd6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007dda:	6a 01                	push   0x1
c0007ddc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de4:	55                   	push   ebp
c0007de5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007de9:	e8 30 9d ff ff       	call   c0001b1e <disk_write>
c0007dee:	83 c4 20             	add    esp,0x20
c0007df1:	85 c0                	test   eax,eax
c0007df3:	0f 85 51 07 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007df9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dfd:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e01:	75 09                	jne    c0007e0c <f_mkfs+0x973>
c0007e03:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e06:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e0a:	74 12                	je     c0007e1e <f_mkfs+0x985>
c0007e0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e14:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e18:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e1c:	eb 8a                	jmp    c0007da8 <f_mkfs+0x90f>
c0007e1e:	31 d2                	xor    edx,edx
c0007e20:	b9 00 02 00 00       	mov    ecx,0x200
c0007e25:	89 e8                	mov    eax,ebp
c0007e27:	e8 bb 9d ff ff       	call   c0001be7 <mem_set>
c0007e2c:	83 c6 0b             	add    esi,0xb
c0007e2f:	83 d7 00             	adc    edi,0x0
c0007e32:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e36:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e3a:	31 c9                	xor    ecx,ecx
c0007e3c:	41                   	inc    ecx
c0007e3d:	89 da                	mov    edx,ebx
c0007e3f:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e44:	e8 05 a2 ff ff       	call   c000204e <xsum32>
c0007e49:	89 c3                	mov    ebx,eax
c0007e4b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e51:	75 e9                	jne    c0007e3c <f_mkfs+0x9a3>
c0007e53:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e56:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e5a:	83 c6 01             	add    esi,0x1
c0007e5d:	83 d7 00             	adc    edi,0x0
c0007e60:	83 ec 0c             	sub    esp,0xc
c0007e63:	6a 01                	push   0x1
c0007e65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e6d:	55                   	push   ebp
c0007e6e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e72:	e8 a7 9c ff ff       	call   c0001b1e <disk_write>
c0007e77:	83 c4 20             	add    esp,0x20
c0007e7a:	85 c0                	test   eax,eax
c0007e7c:	0f 85 c8 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007e82:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e86:	75 06                	jne    c0007e8e <f_mkfs+0x9f5>
c0007e88:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e8c:	74 09                	je     c0007e97 <f_mkfs+0x9fe>
c0007e8e:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e95:	eb a3                	jmp    c0007e3a <f_mkfs+0x9a1>
c0007e97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007e9b:	89 da                	mov    edx,ebx
c0007e9d:	01 e8                	add    eax,ebp
c0007e9f:	e8 25 9d ff ff       	call   c0001bc9 <st_dword>
c0007ea4:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007ea9:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb1:	75 e4                	jne    c0007e97 <f_mkfs+0x9fe>
c0007eb3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007eb6:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007eba:	83 c6 02             	add    esi,0x2
c0007ebd:	83 d7 00             	adc    edi,0x0
c0007ec0:	83 ec 0c             	sub    esp,0xc
c0007ec3:	6a 01                	push   0x1
c0007ec5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ec9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ecd:	55                   	push   ebp
c0007ece:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed2:	e8 47 9c ff ff       	call   c0001b1e <disk_write>
c0007ed7:	83 c4 20             	add    esp,0x20
c0007eda:	85 c0                	test   eax,eax
c0007edc:	0f 85 68 06 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0007ee2:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007ee7:	74 0d                	je     c0007ef6 <f_mkfs+0xa5d>
c0007ee9:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef1:	e9 43 fd ff ff       	jmp    c0007c39 <f_mkfs+0x7a0>
c0007ef6:	b1 07                	mov    cl,0x7
c0007ef8:	e9 e3 05 00 00       	jmp    c00084e0 <f_mkfs+0x1047>
c0007efd:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f02:	0f 85 4f 02 00 00    	jne    c0008157 <f_mkfs+0xcbe>
c0007f08:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f0d:	0f 86 22 02 00 00    	jbe    c0008135 <f_mkfs+0xc9c>
c0007f13:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f18:	0f 85 81 06 00 00    	jne    c000859f <f_mkfs+0x1106>
c0007f1e:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f21:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f25:	83 f8 40             	cmp    eax,0x40
c0007f28:	0f 87 51 06 00 00    	ja     c000857f <f_mkfs+0x10e6>
c0007f2e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f32:	85 ff                	test   edi,edi
c0007f34:	75 1c                	jne    c0007f52 <f_mkfs+0xab9>
c0007f36:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f39:	ba 00 2c 02 c0       	mov    edx,0xc0022c00
c0007f3e:	c1 e9 0c             	shr    ecx,0xc
c0007f41:	bf 01 00 00 00       	mov    edi,0x1
c0007f46:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f49:	66 85 c0             	test   ax,ax
c0007f4c:	0f 85 95 01 00 00    	jne    c00080e7 <f_mkfs+0xc4e>
c0007f52:	31 d2                	xor    edx,edx
c0007f54:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f57:	f7 f7                	div    edi
c0007f59:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f5e:	0f 86 95 01 00 00    	jbe    c00080f9 <f_mkfs+0xc60>
c0007f64:	83 c0 02             	add    eax,0x2
c0007f67:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f6c:	01 c0                	add    eax,eax
c0007f6e:	05 ff 01 00 00       	add    eax,0x1ff
c0007f73:	be 01 00 00 00       	mov    esi,0x1
c0007f78:	c1 e8 09             	shr    eax,0x9
c0007f7b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f83:	c1 e0 05             	shl    eax,0x5
c0007f86:	c1 e8 09             	shr    eax,0x9
c0007f89:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f8d:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f92:	31 d2                	xor    edx,edx
c0007f94:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007f98:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007f9c:	89 f0                	mov    eax,esi
c0007f9e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007fa2:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fa6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007faa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fb2:	31 d2                	xor    edx,edx
c0007fb4:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fb9:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fbd:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc1:	31 db                	xor    ebx,ebx
c0007fc3:	01 c8                	add    eax,ecx
c0007fc5:	11 da                	adc    edx,ebx
c0007fc7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fcb:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fcf:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fd3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fd7:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fdb:	f7 da                	neg    edx
c0007fdd:	21 d1                	and    ecx,edx
c0007fdf:	29 d9                	sub    ecx,ebx
c0007fe1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe6:	0f 85 20 01 00 00    	jne    c000810c <f_mkfs+0xc73>
c0007fec:	31 db                	xor    ebx,ebx
c0007fee:	01 ce                	add    esi,ecx
c0007ff0:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ff4:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ff8:	31 d2                	xor    edx,edx
c0007ffa:	89 f8                	mov    eax,edi
c0007ffc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008000:	c1 e0 04             	shl    eax,0x4
c0008003:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0008007:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c000800b:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c000800f:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0008013:	39 04 24             	cmp    DWORD PTR [esp],eax
c0008016:	19 d3                	sbb    ebx,edx
c0008018:	0f 82 40 01 00 00    	jb     c000815e <f_mkfs+0xcc5>
c000801e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008021:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008025:	89 c8                	mov    eax,ecx
c0008027:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c000802c:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008030:	29 f0                	sub    eax,esi
c0008032:	29 d0                	sub    eax,edx
c0008034:	31 d2                	xor    edx,edx
c0008036:	f7 f7                	div    edi
c0008038:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000803d:	89 c3                	mov    ebx,eax
c000803f:	0f 85 b8 fe ff ff    	jne    c0007efd <f_mkfs+0xa64>
c0008045:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000804a:	0f 87 1d 01 00 00    	ja     c000816d <f_mkfs+0xcd4>
c0008050:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008055:	0f 85 03 01 00 00    	jne    c000815e <f_mkfs+0xcc5>
c000805b:	83 ff 01             	cmp    edi,0x1
c000805e:	0f 86 fa 00 00 00    	jbe    c000815e <f_mkfs+0xcc5>
c0008064:	d1 ef                	shr    edi,1
c0008066:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000806a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000806e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008071:	85 db                	test   ebx,ebx
c0008073:	75 2d                	jne    c00080a2 <f_mkfs+0xc09>
c0008075:	89 cb                	mov    ebx,ecx
c0008077:	ba 10 2c 02 c0       	mov    edx,0xc0022c10
c000807c:	c1 eb 11             	shr    ebx,0x11
c000807f:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0008087:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000808a:	66 85 c0             	test   ax,ax
c000808d:	74 11                	je     c00080a0 <f_mkfs+0xc07>
c000808f:	83 c2 02             	add    edx,0x2
c0008092:	39 d8                	cmp    eax,ebx
c0008094:	77 0a                	ja     c00080a0 <f_mkfs+0xc07>
c0008096:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809a:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c000809e:	eb e7                	jmp    c0008087 <f_mkfs+0xbee>
c00080a0:	31 db                	xor    ebx,ebx
c00080a2:	31 d2                	xor    edx,edx
c00080a4:	89 c8                	mov    eax,ecx
c00080a6:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080aa:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b1:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080b6:	c1 ea 09             	shr    edx,0x9
c00080b9:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080be:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080c2:	0f 87 96 00 00 00    	ja     c000815e <f_mkfs+0xcc5>
c00080c8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080cc:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080d4:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080d8:	be 20 00 00 00       	mov    esi,0x20
c00080dd:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080e2:	e9 a6 fe ff ff       	jmp    c0007f8d <f_mkfs+0xaf4>
c00080e7:	83 c2 02             	add    edx,0x2
c00080ea:	39 c8                	cmp    eax,ecx
c00080ec:	0f 87 60 fe ff ff    	ja     c0007f52 <f_mkfs+0xab9>
c00080f2:	01 ff                	add    edi,edi
c00080f4:	e9 4d fe ff ff       	jmp    c0007f46 <f_mkfs+0xaad>
c00080f9:	8d 04 40             	lea    eax,[eax+eax*2]
c00080fc:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008101:	40                   	inc    eax
c0008102:	d1 e8                	shr    eax,1
c0008104:	83 c0 03             	add    eax,0x3
c0008107:	e9 62 fe ff ff       	jmp    c0007f6e <f_mkfs+0xad5>
c000810c:	31 d2                	xor    edx,edx
c000810e:	89 c8                	mov    eax,ecx
c0008110:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008114:	85 d2                	test   edx,edx
c0008116:	74 0c                	je     c0008124 <f_mkfs+0xc8b>
c0008118:	49                   	dec    ecx
c0008119:	46                   	inc    esi
c000811a:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c000811f:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008124:	89 c8                	mov    eax,ecx
c0008126:	31 d2                	xor    edx,edx
c0008128:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000812c:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008130:	e9 c3 fe ff ff       	jmp    c0007ff8 <f_mkfs+0xb5f>
c0008135:	3d f5 0f 00 00       	cmp    eax,0xff5
c000813a:	77 31                	ja     c000816d <f_mkfs+0xcd4>
c000813c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008141:	75 1b                	jne    c000815e <f_mkfs+0xcc5>
c0008143:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008146:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000814a:	3d 80 00 00 00       	cmp    eax,0x80
c000814f:	0f 86 d9 fd ff ff    	jbe    c0007f2e <f_mkfs+0xa95>
c0008155:	eb 07                	jmp    c000815e <f_mkfs+0xcc5>
c0008157:	3d f5 0f 00 00       	cmp    eax,0xff5
c000815c:	76 0a                	jbe    c0008168 <f_mkfs+0xccf>
c000815e:	bb 0e 00 00 00       	mov    ebx,0xe
c0008163:	e9 ff 03 00 00       	jmp    c0008567 <f_mkfs+0x10ce>
c0008168:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000816d:	31 d2                	xor    edx,edx
c000816f:	b9 00 02 00 00       	mov    ecx,0x200
c0008174:	89 e8                	mov    eax,ebp
c0008176:	e8 6c 9a ff ff       	call   c0001be7 <mem_set>
c000817b:	b9 0b 00 00 00       	mov    ecx,0xb
c0008180:	ba 22 2d 02 c0       	mov    edx,0xc0022d22
c0008185:	89 e8                	mov    eax,ebp
c0008187:	e8 46 9a ff ff       	call   c0001bd2 <mem_cpy>
c000818c:	8d 45 0b             	lea    eax,[ebp+0xb]
c000818f:	ba 00 02 00 00       	mov    edx,0x200
c0008194:	e8 2c 9a ff ff       	call   c0001bc5 <st_word>
c0008199:	89 f8                	mov    eax,edi
c000819b:	0f b7 d6             	movzx  edx,si
c000819e:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a1:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081a4:	e8 1c 9a ff ff       	call   c0001bc5 <st_word>
c00081a9:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081ad:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081b2:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081b5:	75 08                	jne    c00081bf <f_mkfs+0xd26>
c00081b7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081bf:	8d 45 11             	lea    eax,[ebp+0x11]
c00081c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081c6:	e8 fa 99 ff ff       	call   c0001bc5 <st_word>
c00081cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d0:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081d4:	39 d0                	cmp    eax,edx
c00081d6:	b8 00 00 00 00       	mov    eax,0x0
c00081db:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081df:	72 0a                	jb     c00081eb <f_mkfs+0xd52>
c00081e1:	8d 45 13             	lea    eax,[ebp+0x13]
c00081e4:	e8 dc 99 ff ff       	call   c0001bc5 <st_word>
c00081e9:	eb 08                	jmp    c00081f3 <f_mkfs+0xd5a>
c00081eb:	8d 45 20             	lea    eax,[ebp+0x20]
c00081ee:	e8 d6 99 ff ff       	call   c0001bc9 <st_dword>
c00081f3:	8d 45 18             	lea    eax,[ebp+0x18]
c00081f6:	ba 3f 00 00 00       	mov    edx,0x3f
c00081fb:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00081ff:	e8 c1 99 ff ff       	call   c0001bc5 <st_word>
c0008204:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008207:	ba ff 00 00 00       	mov    edx,0xff
c000820c:	e8 b4 99 ff ff       	call   c0001bc5 <st_word>
c0008211:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008214:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008218:	e8 ac 99 ff ff       	call   c0001bc9 <st_dword>
c000821d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008222:	75 57                	jne    c000827b <f_mkfs+0xde2>
c0008224:	8d 45 43             	lea    eax,[ebp+0x43]
c0008227:	ba 00 00 21 50       	mov    edx,0x50210000
c000822c:	e8 98 99 ff ff       	call   c0001bc9 <st_dword>
c0008231:	8d 45 24             	lea    eax,[ebp+0x24]
c0008234:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008238:	e8 8c 99 ff ff       	call   c0001bc9 <st_dword>
c000823d:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008240:	ba 02 00 00 00       	mov    edx,0x2
c0008245:	e8 7f 99 ff ff       	call   c0001bc9 <st_dword>
c000824a:	8d 45 30             	lea    eax,[ebp+0x30]
c000824d:	ba 01 00 00 00       	mov    edx,0x1
c0008252:	e8 6e 99 ff ff       	call   c0001bc5 <st_word>
c0008257:	8d 45 32             	lea    eax,[ebp+0x32]
c000825a:	ba 06 00 00 00       	mov    edx,0x6
c000825f:	e8 61 99 ff ff       	call   c0001bc5 <st_word>
c0008264:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008268:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000826c:	8d 45 47             	lea    eax,[ebp+0x47]
c000826f:	b9 13 00 00 00       	mov    ecx,0x13
c0008274:	ba 2e 2d 02 c0       	mov    edx,0xc0022d2e
c0008279:	eb 2f                	jmp    c00082aa <f_mkfs+0xe11>
c000827b:	8d 45 27             	lea    eax,[ebp+0x27]
c000827e:	ba 00 00 21 50       	mov    edx,0x50210000
c0008283:	e8 41 99 ff ff       	call   c0001bc9 <st_dword>
c0008288:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000828d:	8d 45 16             	lea    eax,[ebp+0x16]
c0008290:	e8 30 99 ff ff       	call   c0001bc5 <st_word>
c0008295:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008299:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000829d:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a0:	b9 13 00 00 00       	mov    ecx,0x13
c00082a5:	ba 42 2d 02 c0       	mov    edx,0xc0022d42
c00082aa:	e8 23 99 ff ff       	call   c0001bd2 <mem_cpy>
c00082af:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082b5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082ba:	89 f0                	mov    eax,esi
c00082bc:	e8 04 99 ff ff       	call   c0001bc5 <st_word>
c00082c1:	83 ec 0c             	sub    esp,0xc
c00082c4:	6a 01                	push   0x1
c00082c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082ce:	55                   	push   ebp
c00082cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082d3:	e8 46 98 ff ff       	call   c0001b1e <disk_write>
c00082d8:	83 c4 20             	add    esp,0x20
c00082db:	85 c0                	test   eax,eax
c00082dd:	0f 85 67 02 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00082e3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082e8:	0f 85 b7 00 00 00    	jne    c00083a5 <f_mkfs+0xf0c>
c00082ee:	83 ec 0c             	sub    esp,0xc
c00082f1:	6a 01                	push   0x1
c00082f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00082fb:	83 c0 06             	add    eax,0x6
c00082fe:	83 d2 00             	adc    edx,0x0
c0008301:	52                   	push   edx
c0008302:	50                   	push   eax
c0008303:	55                   	push   ebp
c0008304:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008308:	e8 11 98 ff ff       	call   c0001b1e <disk_write>
c000830d:	83 c4 20             	add    esp,0x20
c0008310:	b9 00 02 00 00       	mov    ecx,0x200
c0008315:	31 d2                	xor    edx,edx
c0008317:	89 e8                	mov    eax,ebp
c0008319:	e8 c9 98 ff ff       	call   c0001be7 <mem_set>
c000831e:	ba 52 52 61 41       	mov    edx,0x41615252
c0008323:	89 e8                	mov    eax,ebp
c0008325:	e8 9f 98 ff ff       	call   c0001bc9 <st_dword>
c000832a:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008330:	ba 72 72 41 61       	mov    edx,0x61417272
c0008335:	e8 8f 98 ff ff       	call   c0001bc9 <st_dword>
c000833a:	8d 53 ff             	lea    edx,[ebx-0x1]
c000833d:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008343:	e8 81 98 ff ff       	call   c0001bc9 <st_dword>
c0008348:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000834e:	ba 02 00 00 00       	mov    edx,0x2
c0008353:	e8 71 98 ff ff       	call   c0001bc9 <st_dword>
c0008358:	ba 55 aa 00 00       	mov    edx,0xaa55
c000835d:	89 f0                	mov    eax,esi
c000835f:	e8 61 98 ff ff       	call   c0001bc5 <st_word>
c0008364:	83 ec 0c             	sub    esp,0xc
c0008367:	6a 01                	push   0x1
c0008369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000836d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008371:	83 c0 07             	add    eax,0x7
c0008374:	83 d2 00             	adc    edx,0x0
c0008377:	52                   	push   edx
c0008378:	50                   	push   eax
c0008379:	55                   	push   ebp
c000837a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000837e:	e8 9b 97 ff ff       	call   c0001b1e <disk_write>
c0008383:	83 c4 14             	add    esp,0x14
c0008386:	6a 01                	push   0x1
c0008388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000838c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008390:	83 c0 01             	add    eax,0x1
c0008393:	83 d2 00             	adc    edx,0x0
c0008396:	52                   	push   edx
c0008397:	50                   	push   eax
c0008398:	55                   	push   ebp
c0008399:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000839d:	e8 7c 97 ff ff       	call   c0001b1e <disk_write>
c00083a2:	83 c4 20             	add    esp,0x20
c00083a5:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083ac:	31 d2                	xor    edx,edx
c00083ae:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083b4:	31 db                	xor    ebx,ebx
c00083b6:	89 e8                	mov    eax,ebp
c00083b8:	e8 2a 98 ff ff       	call   c0001be7 <mem_set>
c00083bd:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083c9:	0f 94 c3             	sete   bl
c00083cc:	4b                   	dec    ebx
c00083cd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083d3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083d9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083de:	75 21                	jne    c0008401 <f_mkfs+0xf68>
c00083e0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083e5:	89 e8                	mov    eax,ebp
c00083e7:	e8 dd 97 ff ff       	call   c0001bc9 <st_dword>
c00083ec:	8d 45 04             	lea    eax,[ebp+0x4]
c00083ef:	83 ca ff             	or     edx,0xffffffff
c00083f2:	e8 d2 97 ff ff       	call   c0001bc9 <st_dword>
c00083f7:	8d 45 08             	lea    eax,[ebp+0x8]
c00083fa:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00083ff:	eb 04                	jmp    c0008405 <f_mkfs+0xf6c>
c0008401:	89 da                	mov    edx,ebx
c0008403:	89 e8                	mov    eax,ebp
c0008405:	e8 bf 97 ff ff       	call   c0001bc9 <st_dword>
c000840a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000840e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008412:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008416:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000841a:	39 ce                	cmp    esi,ecx
c000841c:	76 02                	jbe    c0008420 <f_mkfs+0xf87>
c000841e:	89 ce                	mov    esi,ecx
c0008420:	83 ec 0c             	sub    esp,0xc
c0008423:	56                   	push   esi
c0008424:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008428:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000842c:	55                   	push   ebp
c000842d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008431:	e8 e8 96 ff ff       	call   c0001b1e <disk_write>
c0008436:	83 c4 20             	add    esp,0x20
c0008439:	85 c0                	test   eax,eax
c000843b:	0f 85 09 01 00 00    	jne    c000854a <f_mkfs+0x10b1>
c0008441:	31 d2                	xor    edx,edx
c0008443:	b9 00 02 00 00       	mov    ecx,0x200
c0008448:	89 e8                	mov    eax,ebp
c000844a:	e8 98 97 ff ff       	call   c0001be7 <mem_set>
c000844f:	31 d2                	xor    edx,edx
c0008451:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008455:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008459:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000845d:	75 b3                	jne    c0008412 <f_mkfs+0xf79>
c000845f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008462:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008469:	40                   	inc    eax
c000846a:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000846e:	0f 87 65 ff ff ff    	ja     c00083d9 <f_mkfs+0xf40>
c0008474:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008479:	74 04                	je     c000847f <f_mkfs+0xfe6>
c000847b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000847f:	89 fb                	mov    ebx,edi
c0008481:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008485:	76 04                	jbe    c000848b <f_mkfs+0xff2>
c0008487:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	53                   	push   ebx
c000848f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008493:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008497:	55                   	push   ebp
c0008498:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000849c:	e8 7d 96 ff ff       	call   c0001b1e <disk_write>
c00084a1:	83 c4 20             	add    esp,0x20
c00084a4:	85 c0                	test   eax,eax
c00084a6:	0f 85 9e 00 00 00    	jne    c000854a <f_mkfs+0x10b1>
c00084ac:	31 d2                	xor    edx,edx
c00084ae:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084b2:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084b6:	29 df                	sub    edi,ebx
c00084b8:	75 c5                	jne    c000847f <f_mkfs+0xfe6>
c00084ba:	b1 0c                	mov    cl,0xc
c00084bc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c1:	74 1d                	je     c00084e0 <f_mkfs+0x1047>
c00084c3:	b8 ff ff 00 00       	mov    eax,0xffff
c00084c8:	b1 06                	mov    cl,0x6
c00084ca:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084ce:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084d2:	72 0c                	jb     c00084e0 <f_mkfs+0x1047>
c00084d4:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084d9:	0f 94 c1             	sete   cl
c00084dc:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e0:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084e5:	75 4c                	jne    c0008533 <f_mkfs+0x109a>
c00084e7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084eb:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084ef:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084f6:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00084fd:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008508:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008513:	0f b6 c9             	movzx  ecx,cl
c0008516:	83 ec 0c             	sub    esp,0xc
c0008519:	55                   	push   ebp
c000851a:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008521:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008525:	e8 f9 bf ff ff       	call   c0004523 <create_partition>
c000852a:	83 c4 10             	add    esp,0x10
c000852d:	89 c3                	mov    ebx,eax
c000852f:	85 c0                	test   eax,eax
c0008531:	75 34                	jne    c0008567 <f_mkfs+0x10ce>
c0008533:	31 db                	xor    ebx,ebx
c0008535:	50                   	push   eax
c0008536:	6a 00                	push   0x0
c0008538:	6a 00                	push   0x0
c000853a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000853e:	e8 f1 95 ff ff       	call   c0001b34 <disk_ioctl>
c0008543:	83 c4 10             	add    esp,0x10
c0008546:	85 c0                	test   eax,eax
c0008548:	74 1d                	je     c0008567 <f_mkfs+0x10ce>
c000854a:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008552:	75 0c                	jne    c0008560 <f_mkfs+0x10c7>
c0008554:	83 ec 0c             	sub    esp,0xc
c0008557:	55                   	push   ebp
c0008558:	e8 77 00 00 00       	call   c00085d4 <ff_memfree>
c000855d:	83 c4 10             	add    esp,0x10
c0008560:	bb 01 00 00 00       	mov    ebx,0x1
c0008565:	eb 48                	jmp    c00085af <f_mkfs+0x1116>
c0008567:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000856f:	75 3e                	jne    c00085af <f_mkfs+0x1116>
c0008571:	83 ec 0c             	sub    esp,0xc
c0008574:	55                   	push   ebp
c0008575:	e8 5a 00 00 00       	call   c00085d4 <ff_memfree>
c000857a:	83 c4 10             	add    esp,0x10
c000857d:	eb 30                	jmp    c00085af <f_mkfs+0x1116>
c000857f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008584:	0f 85 eb fa ff ff    	jne    c0008075 <f_mkfs+0xbdc>
c000858a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000858e:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008594:	0f 86 b8 f9 ff ff    	jbe    c0007f52 <f_mkfs+0xab9>
c000859a:	e9 bf fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c000859f:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085a4:	0f 85 c0 fa ff ff    	jne    c000806a <f_mkfs+0xbd1>
c00085aa:	e9 af fb ff ff       	jmp    c000815e <f_mkfs+0xcc5>
c00085af:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085b5:	89 d8                	mov    eax,ebx
c00085b7:	5b                   	pop    ebx
c00085b8:	5e                   	pop    esi
c00085b9:	5f                   	pop    edi
c00085ba:	5d                   	pop    ebp
c00085bb:	c3                   	ret    

c00085bc <ff_memalloc>:
c00085bc:	83 ec 0c             	sub    esp,0xc
c00085bf:	83 ec 0c             	sub    esp,0xc
c00085c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085c6:	e8 ec 16 00 00       	call   c0009cb7 <malloc>
c00085cb:	83 c4 10             	add    esp,0x10
c00085ce:	83 c4 0c             	add    esp,0xc
c00085d1:	c3                   	ret    
c00085d2:	66 90                	xchg   ax,ax

c00085d4 <ff_memfree>:
c00085d4:	83 ec 0c             	sub    esp,0xc
c00085d7:	83 ec 0c             	sub    esp,0xc
c00085da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085de:	e8 e4 16 00 00       	call   c0009cc7 <free>
c00085e3:	83 c4 10             	add    esp,0x10
c00085e6:	90                   	nop
c00085e7:	83 c4 0c             	add    esp,0xc
c00085ea:	c3                   	ret    
c00085eb:	90                   	nop

c00085ec <ff_uni2oem>:
c00085ec:	83 ec 14             	sub    esp,0x14
c00085ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085f3:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085f7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00085fe:	c7 44 24 0c 60 30 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023060
c0008606:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000860b:	77 0b                	ja     c0008618 <ff_uni2oem+0x2c>
c000860d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008611:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008616:	eb 60                	jmp    c0008678 <ff_uni2oem+0x8c>
c0008618:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008620:	77 56                	ja     c0008678 <ff_uni2oem+0x8c>
c0008622:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008628:	75 4e                	jne    c0008678 <ff_uni2oem+0x8c>
c000862a:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008631:	eb 0d                	jmp    c0008640 <ff_uni2oem+0x54>
c0008633:	90                   	nop
c0008634:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008639:	40                   	inc    eax
c000863a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000863f:	90                   	nop
c0008640:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008646:	77 1c                	ja     c0008664 <ff_uni2oem+0x78>
c0008648:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000864d:	01 c0                	add    eax,eax
c000864f:	89 c2                	mov    edx,eax
c0008651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008655:	01 d0                	add    eax,edx
c0008657:	66 8b 00             	mov    ax,WORD PTR [eax]
c000865a:	0f b7 c0             	movzx  eax,ax
c000865d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008661:	75 d1                	jne    c0008634 <ff_uni2oem+0x48>
c0008663:	90                   	nop
c0008664:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008669:	83 e8 80             	sub    eax,0xffffff80
c000866c:	25 ff 00 00 00       	and    eax,0xff
c0008671:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008676:	66 90                	xchg   ax,ax
c0008678:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000867d:	83 c4 14             	add    esp,0x14
c0008680:	c3                   	ret    
c0008681:	8d 76 00             	lea    esi,[esi+0x0]

c0008684 <ff_oem2uni>:
c0008684:	83 ec 18             	sub    esp,0x18
c0008687:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000868b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000868f:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008694:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008698:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000869f:	c7 44 24 10 60 30 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023060
c00086a7:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086ad:	77 0d                	ja     c00086bc <ff_oem2uni+0x38>
c00086af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086b3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086b8:	eb 32                	jmp    c00086ec <ff_oem2uni+0x68>
c00086ba:	66 90                	xchg   ax,ax
c00086bc:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086c2:	75 28                	jne    c00086ec <ff_oem2uni+0x68>
c00086c4:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086cb:	77 1f                	ja     c00086ec <ff_oem2uni+0x68>
c00086cd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086d2:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086d7:	01 c0                	add    eax,eax
c00086d9:	89 c2                	mov    edx,eax
c00086db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086df:	01 d0                	add    eax,edx
c00086e1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086e4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086e9:	8d 76 00             	lea    esi,[esi+0x0]
c00086ec:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f1:	83 c4 18             	add    esp,0x18
c00086f4:	c3                   	ret    
c00086f5:	8d 76 00             	lea    esi,[esi+0x0]

c00086f8 <ff_wtoupper>:
c00086f8:	83 ec 10             	sub    esp,0x10
c00086fb:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008703:	0f 87 4f 01 00 00    	ja     c0008858 <ff_wtoupper+0x160>
c0008709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000870d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008712:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008719:	77 09                	ja     c0008724 <ff_wtoupper+0x2c>
c000871b:	b8 60 2e 02 c0       	mov    eax,0xc0022e60
c0008720:	eb 0a                	jmp    c000872c <ff_wtoupper+0x34>
c0008722:	66 90                	xchg   ax,ax
c0008724:	b8 a0 2d 02 c0       	mov    eax,0xc0022da0
c0008729:	8d 76 00             	lea    esi,[esi+0x0]
c000872c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008730:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008734:	8d 50 02             	lea    edx,[eax+0x2]
c0008737:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000873b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000873e:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008743:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008749:	0f 84 fd 00 00 00    	je     c000884c <ff_wtoupper+0x154>
c000874f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008754:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008759:	0f 82 ed 00 00 00    	jb     c000884c <ff_wtoupper+0x154>
c000875f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008763:	8d 50 02             	lea    edx,[eax+0x2]
c0008766:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000876a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000876d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008772:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008777:	66 c1 e8 08          	shr    ax,0x8
c000877b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008780:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008787:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000878c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008791:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008796:	01 ca                	add    edx,ecx
c0008798:	39 d0                	cmp    eax,edx
c000879a:	0f 8d 8c 00 00 00    	jge    c000882c <ff_wtoupper+0x134>
c00087a0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087a5:	83 f8 08             	cmp    eax,0x8
c00087a8:	0f 87 9a 00 00 00    	ja     c0008848 <ff_wtoupper+0x150>
c00087ae:	8b 04 85 60 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd2a0]
c00087b5:	ff e0                	jmp    eax
c00087b7:	90                   	nop
c00087b8:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087bd:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087c2:	29 c2                	sub    edx,eax
c00087c4:	89 d0                	mov    eax,edx
c00087c6:	01 c0                	add    eax,eax
c00087c8:	89 c2                	mov    edx,eax
c00087ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087ce:	01 d0                	add    eax,edx
c00087d0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087d3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087d8:	eb 4e                	jmp    c0008828 <ff_wtoupper+0x130>
c00087da:	66 90                	xchg   ax,ax
c00087dc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087e5:	83 e0 01             	and    eax,0x1
c00087e8:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087ed:	eb 39                	jmp    c0008828 <ff_wtoupper+0x130>
c00087ef:	90                   	nop
c00087f0:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087f6:	eb 30                	jmp    c0008828 <ff_wtoupper+0x130>
c00087f8:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00087fe:	eb 28                	jmp    c0008828 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008806:	eb 20                	jmp    c0008828 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000880e:	eb 18                	jmp    c0008828 <ff_wtoupper+0x130>
c0008810:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008816:	eb 10                	jmp    c0008828 <ff_wtoupper+0x130>
c0008818:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000881e:	eb 08                	jmp    c0008828 <ff_wtoupper+0x130>
c0008820:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008827:	90                   	nop
c0008828:	eb 1e                	jmp    c0008848 <ff_wtoupper+0x150>
c000882a:	66 90                	xchg   ax,ax
c000882c:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008832:	0f 85 f8 fe ff ff    	jne    c0008730 <ff_wtoupper+0x38>
c0008838:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000883d:	01 c0                	add    eax,eax
c000883f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008843:	e9 e8 fe ff ff       	jmp    c0008730 <ff_wtoupper+0x38>
c0008848:	90                   	nop
c0008849:	8d 76 00             	lea    esi,[esi+0x0]
c000884c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008851:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008855:	8d 76 00             	lea    esi,[esi+0x0]
c0008858:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	c3                   	ret    

c0008860 <CPU::current()>:
c0008860:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0008865:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000886b:	c3                   	ret    

c000886c <operator new(unsigned long)>:
c000886c:	e9 46 14 00 00       	jmp    c0009cb7 <malloc>

c0008871 <operator delete(void*)>:
c0008871:	e9 61 14 00 00       	jmp    c0009cd7 <rfree>

c0008876 <disableIRQs()>:
c0008876:	fa                   	cli    
c0008877:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c000887d:	c3                   	ret    

c000887e <enableIRQs()>:
c000887e:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0008883:	48                   	dec    eax
c0008884:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0008889:	75 01                	jne    c000888c <enableIRQs()+0xe>
c000888b:	fb                   	sti    
c000888c:	c3                   	ret    

c000888d <lockScheduler()>:
c000888d:	fa                   	cli    
c000888e:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c0008894:	c3                   	ret    

c0008895 <unlockScheduler()>:
c0008895:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000889a:	48                   	dec    eax
c000889b:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c00088a0:	75 01                	jne    c00088a3 <unlockScheduler()+0xe>
c00088a2:	fb                   	sti    
c00088a3:	c3                   	ret    

c00088a4 <lockStuff()>:
c00088a4:	fa                   	cli    
c00088a5:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c00088ab:	ff 05 c4 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c4
c00088b1:	c3                   	ret    

c00088b2 <unlockStuff()>:
c00088b2:	83 ec 0c             	sub    esp,0xc
c00088b5:	a1 c4 a8 02 c0       	mov    eax,ds:0xc002a8c4
c00088ba:	48                   	dec    eax
c00088bb:	a3 c4 a8 02 c0       	mov    ds:0xc002a8c4,eax
c00088c0:	75 18                	jne    c00088da <unlockStuff()+0x28>
c00088c2:	83 3d c0 a8 02 c0 00 	cmp    DWORD PTR ds:0xc002a8c0,0x0
c00088c9:	74 0f                	je     c00088da <unlockStuff()+0x28>
c00088cb:	c7 05 c0 a8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a8c0,0x0
c00088d5:	e8 92 eb 00 00       	call   c001746c <schedule()>
c00088da:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c00088df:	48                   	dec    eax
c00088e0:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c00088e5:	75 01                	jne    c00088e8 <unlockStuff()+0x36>
c00088e7:	fb                   	sti    
c00088e8:	83 c4 0c             	add    esp,0xc
c00088eb:	c3                   	ret    

c00088ec <Virt::getAKernelVAS()>:
c00088ec:	a1 d4 74 02 c0       	mov    eax,ds:0xc00274d4
c00088f1:	c3                   	ret    

c00088f2 <__not_memcpy>:
c00088f2:	57                   	push   edi
c00088f3:	56                   	push   esi
c00088f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00088f8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088fc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008900:	89 c7                	mov    edi,eax
c0008902:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008904:	5e                   	pop    esi
c0008905:	5f                   	pop    edi
c0008906:	c3                   	ret    
c0008907:	90                   	nop

c0008908 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008908:	83 ec 0c             	sub    esp,0xc
c000890b:	83 ec 08             	sub    esp,0x8
c000890e:	68 60 31 02 c0       	push   0xc0023160
c0008913:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008917:	e8 a8 7e ff ff       	call   c00007c4 <strcmp>
c000891c:	83 c4 10             	add    esp,0x10
c000891f:	85 c0                	test   eax,eax
c0008921:	0f 94 c0             	sete   al
c0008924:	84 c0                	test   al,al
c0008926:	74 0c                	je     c0008934 <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008928:	b8 a8 73 02 c0       	mov    eax,0xc00273a8
c000892d:	e9 ea 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008932:	66 90                	xchg   ax,ax
c0008934:	83 ec 08             	sub    esp,0x8
c0008937:	68 69 31 02 c0       	push   0xc0023169
c000893c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008940:	e8 7f 7e ff ff       	call   c00007c4 <strcmp>
c0008945:	83 c4 10             	add    esp,0x10
c0008948:	85 c0                	test   eax,eax
c000894a:	0f 94 c0             	sete   al
c000894d:	84 c0                	test   al,al
c000894f:	74 0b                	je     c000895c <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008951:	b8 d0 1d 02 c0       	mov    eax,0xc0021dd0
c0008956:	e9 c1 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000895b:	90                   	nop
c000895c:	83 ec 08             	sub    esp,0x8
c000895f:	68 73 31 02 c0       	push   0xc0023173
c0008964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008968:	e8 57 7e ff ff       	call   c00007c4 <strcmp>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	85 c0                	test   eax,eax
c0008972:	0f 94 c0             	sete   al
c0008975:	84 c0                	test   al,al
c0008977:	74 0b                	je     c0008984 <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008979:	b8 04 1b 02 c0       	mov    eax,0xc0021b04
c000897e:	e9 99 00 00 00       	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008983:	90                   	nop
c0008984:	83 ec 08             	sub    esp,0x8
c0008987:	68 7c 31 02 c0       	push   0xc002317c
c000898c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008990:	e8 2f 7e ff ff       	call   c00007c4 <strcmp>
c0008995:	83 c4 10             	add    esp,0x10
c0008998:	85 c0                	test   eax,eax
c000899a:	0f 94 c0             	sete   al
c000899d:	84 c0                	test   al,al
c000899f:	74 07                	je     c00089a8 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a1:	b8 d0 1e 02 c0       	mov    eax,0xc0021ed0
c00089a6:	eb 74                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089a8:	83 ec 08             	sub    esp,0x8
c00089ab:	68 86 31 02 c0       	push   0xc0023186
c00089b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089b4:	e8 0b 7e ff ff       	call   c00007c4 <strcmp>
c00089b9:	83 c4 10             	add    esp,0x10
c00089bc:	85 c0                	test   eax,eax
c00089be:	0f 94 c0             	sete   al
c00089c1:	84 c0                	test   al,al
c00089c3:	74 07                	je     c00089cc <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089c5:	b8 50 1c 02 c0       	mov    eax,0xc0021c50
c00089ca:	eb 50                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089cc:	83 ec 08             	sub    esp,0x8
c00089cf:	68 8f 31 02 c0       	push   0xc002318f
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 e7 7d ff ff       	call   c00007c4 <strcmp>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	85 c0                	test   eax,eax
c00089e2:	0f 94 c0             	sete   al
c00089e5:	84 c0                	test   al,al
c00089e7:	74 07                	je     c00089f0 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089e9:	b8 ac 73 02 c0       	mov    eax,0xc00273ac
c00089ee:	eb 2c                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f0:	83 ec 08             	sub    esp,0x8
c00089f3:	68 9c 31 02 c0       	push   0xc002319c
c00089f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fc:	e8 c3 7d ff ff       	call   c00007c4 <strcmp>
c0008a01:	83 c4 10             	add    esp,0x10
c0008a04:	85 c0                	test   eax,eax
c0008a06:	0f 94 c0             	sete   al
c0008a09:	84 c0                	test   al,al
c0008a0b:	74 07                	je     c0008a14 <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a0d:	b8 ad 73 02 c0       	mov    eax,0xc00273ad
c0008a12:	eb 08                	jmp    c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a14:	b8 00 00 00 00       	mov    eax,0x0
c0008a19:	8d 76 00             	lea    esi,[esi+0x0]
c0008a1c:	83 c4 0c             	add    esp,0xc
c0008a1f:	c3                   	ret    

c0008a20 <Computer::close(int, int, void*)>:
c0008a20:	57                   	push   edi
c0008a21:	56                   	push   esi
c0008a22:	53                   	push   ebx
c0008a23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a27:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a2b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a2f:	83 ec 0c             	sub    esp,0xc
c0008a32:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a38:	e8 8f 5b 00 00       	call   c000e5cc <Device::closeAll()>
c0008a3d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a43:	83 c4 10             	add    esp,0x10
c0008a46:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a48:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a4c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a54:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a5c:	5b                   	pop    ebx
c0008a5d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a60:	5e                   	pop    esi
c0008a61:	5f                   	pop    edi
c0008a62:	ff e0                	jmp    eax

c0008a64 <Krnl::firstTask()>:
c0008a64:	53                   	push   ebx
c0008a65:	83 ec 14             	sub    esp,0x14
c0008a68:	68 a9 31 02 c0       	push   0xc00231a9
c0008a6d:	e8 9f 12 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008a72:	fb                   	sti    
c0008a73:	c7 04 24 c0 31 02 c0 	mov    DWORD PTR [esp],0xc00231c0
c0008a7a:	e8 92 12 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008a7f:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a86:	e8 2c 12 00 00       	call   c0009cb7 <malloc>
c0008a8b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a92:	89 c3                	mov    ebx,eax
c0008a94:	ff 35 f0 a8 02 c0    	push   DWORD PTR ds:0xc002a8f0
c0008a9a:	68 d9 31 02 c0       	push   0xc00231d9
c0008a9f:	6a 01                	push   0x1
c0008aa1:	50                   	push   eax
c0008aa2:	e8 a1 e5 00 00       	call   c0017048 <Process::Process(bool, char const*, Process*, char**)>
c0008aa7:	83 c4 20             	add    esp,0x20
c0008aaa:	68 ff 00 00 00       	push   0xff
c0008aaf:	6a 00                	push   0x0
c0008ab1:	68 01 97 00 c0       	push   0xc0009701
c0008ab6:	53                   	push   ebx
c0008ab7:	e8 94 e7 00 00       	call   c0017250 <Process::createThread(void (*)(void*), void*, int)>
c0008abc:	6a 7a                	push   0x7a
c0008abe:	6a 00                	push   0x0
c0008ac0:	68 94 7c 01 c0       	push   0xc0017c94
c0008ac5:	ff 35 f0 a8 02 c0    	push   DWORD PTR ds:0xc002a8f0
c0008acb:	e8 80 e7 00 00       	call   c0017250 <Process::createThread(void (*)(void*), void*, int)>
c0008ad0:	83 c4 14             	add    esp,0x14
c0008ad3:	a3 a8 a8 02 c0       	mov    ds:0xc002a8a8,eax
c0008ad8:	68 24 34 02 c0       	push   0xc0023424
c0008add:	c6 05 ad 73 02 c0 01 	mov    BYTE PTR ds:0xc00273ad,0x1
c0008ae4:	e8 28 12 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008ae9:	e8 81 f5 00 00       	call   c001806f <Vm::initialise8086()>
c0008aee:	e8 69 48 00 00       	call   c000d35c <Fs::initVFS()>
c0008af3:	c7 04 24 e6 31 02 c0 	mov    DWORD PTR [esp],0xc00231e6
c0008afa:	e8 12 12 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008aff:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0008b04:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b0c:	6a 00                	push   0x0
c0008b0e:	6a 00                	push   0x0
c0008b10:	6a 00                	push   0x0
c0008b12:	50                   	push   eax
c0008b13:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b16:	83 c4 14             	add    esp,0x14
c0008b19:	68 24 34 02 c0       	push   0xc0023424
c0008b1e:	e8 ee 11 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008b23:	e8 94 cd 00 00       	call   c00158bc <Sys::loadSyscalls()>
c0008b28:	e8 d1 b1 00 00       	call   c0013cfe <Krnl::loadSystemEnv()>
c0008b2d:	e8 23 b6 00 00       	call   c0014155 <Krnl::setupPowerManager()>
c0008b32:	83 c4 0c             	add    esp,0xc
c0008b35:	6a 3a                	push   0x3a
c0008b37:	68 00 32 02 c0       	push   0xc0023200
c0008b3c:	68 09 32 02 c0       	push   0xc0023209
c0008b41:	e8 39 bb 00 00       	call   c001467f <Reg::readIntWithDefault(char*, char*, int)>
c0008b46:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b49:	e8 6a 53 00 00       	call   c000deb8 <User::loadClockSettings(int)>
c0008b4e:	c7 04 24 48 34 02 c0 	mov    DWORD PTR [esp],0xc0023448
c0008b55:	e8 b7 11 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008b5a:	58                   	pop    eax
c0008b5b:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0008b60:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b66:	e8 21 5a 00 00       	call   c000e58c <Device::loadDriversForAll()>
c0008b6b:	c7 04 24 11 32 02 c0 	mov    DWORD PTR [esp],0xc0023211
c0008b72:	e8 9a 11 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008b77:	e8 ea ac 00 00       	call   c0013866 <Krnl::startCPUs()>
c0008b7c:	c7 04 24 2b 32 02 c0 	mov    DWORD PTR [esp],0xc002322b
c0008b83:	e8 89 11 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0008b88:	5a                   	pop    edx
c0008b89:	8b 1d a8 73 02 c0    	mov    ebx,DWORD PTR ds:0xc00273a8
c0008b8f:	59                   	pop    ecx
c0008b90:	6a 01                	push   0x1
c0008b92:	68 3c 32 02 c0       	push   0xc002323c
c0008b97:	e8 f0 de 00 00       	call   c0016a8c <Thr::loadDLL(char const*, bool)>
c0008b9c:	5a                   	pop    edx
c0008b9d:	59                   	pop    ecx
c0008b9e:	53                   	push   ebx
c0008b9f:	50                   	push   eax
c0008ba0:	e8 18 e1 00 00       	call   c0016cbd <Thr::executeDLL(unsigned long, void*)>
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	83 ec 0c             	sub    esp,0xc
c0008bab:	6a 02                	push   0x2
c0008bad:	e8 b2 ea 00 00       	call   c0017664 <blockTask(TaskState)>
c0008bb2:	83 c4 10             	add    esp,0x10
c0008bb5:	eb f1                	jmp    c0008ba8 <Krnl::firstTask()+0x144>
c0008bb7:	90                   	nop

c0008bb8 <Computer::Computer()>:
c0008bb8:	83 ec 0c             	sub    esp,0xc
c0008bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bbf:	83 ec 08             	sub    esp,0x8
c0008bc2:	68 58 32 02 c0       	push   0xc0023258
c0008bc7:	50                   	push   eax
c0008bc8:	e8 79 5a 00 00       	call   c000e646 <Device::Device(char const*)>
c0008bcd:	83 c4 10             	add    esp,0x10
c0008bd0:	ba b8 34 02 c0       	mov    edx,0xc00234b8
c0008bd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd9:	89 10                	mov    DWORD PTR [eax],edx
c0008bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdf:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bed:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c01:	83 ca 04             	or     edx,0x4
c0008c04:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c0e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c14:	0f b6 d0             	movzx  edx,al
c0008c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2c:	0f b6 d0             	movzx  edx,al
c0008c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c33:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c42:	8d 50 01             	lea    edx,[eax+0x1]
c0008c45:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c49:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c4f:	0f b6 d0             	movzx  edx,al
c0008c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c56:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5a:	83 e1 3f             	and    ecx,0x3f
c0008c5d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c65:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6b:	0f b6 d0             	movzx  edx,al
c0008c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c72:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c83:	0f b6 d0             	movzx  edx,al
c0008c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8a:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c99:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca6:	0f b6 d0             	movzx  edx,al
c0008ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cad:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb1:	83 e1 3f             	and    ecx,0x3f
c0008cb4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc2:	0f b6 d0             	movzx  edx,al
c0008cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc9:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cda:	0f b6 d0             	movzx  edx,al
c0008cdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce1:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cea:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf0:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf7:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cfd:	0f b6 d0             	movzx  edx,al
c0008d00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d04:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d08:	83 e1 3f             	and    ecx,0x3f
c0008d0b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d0f:	90                   	nop
c0008d10:	83 c4 0c             	add    esp,0xc
c0008d13:	c3                   	ret    

c0008d14 <Computer::setBootMessage(char const*)>:
c0008d14:	c3                   	ret    
c0008d15:	90                   	nop

c0008d16 <Computer::detectFeatures()>:
c0008d16:	55                   	push   ebp
c0008d17:	57                   	push   edi
c0008d18:	56                   	push   esi
c0008d19:	53                   	push   ebx
c0008d1a:	83 ec 1c             	sub    esp,0x1c
c0008d1d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d21:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2b:	e8 e9 74 ff ff       	call   c0000219 <detectCPUID>
c0008d30:	85 c0                	test   eax,eax
c0008d32:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d38:	0f 95 c2             	setne  dl
c0008d3b:	83 e0 fd             	and    eax,0xfffffffd
c0008d3e:	d1 e2                	shl    edx,1
c0008d40:	09 d0                	or     eax,edx
c0008d42:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d48:	a8 02                	test   al,0x2
c0008d4a:	75 46                	jne    c0008d92 <Computer::detectFeatures()+0x7c>
c0008d4c:	f6 05 c1 73 02 c0 04 	test   BYTE PTR ds:0xc00273c1,0x4
c0008d53:	74 07                	je     c0008d5c <Computer::detectFeatures()+0x46>
c0008d55:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5c:	e8 35 8d 01 00       	call   c0021a96 <x87Detect>
c0008d61:	83 e0 01             	and    eax,0x1
c0008d64:	c1 e0 04             	shl    eax,0x4
c0008d67:	88 c2                	mov    dl,al
c0008d69:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d6f:	83 e0 ef             	and    eax,0xffffffef
c0008d72:	09 d0                	or     eax,edx
c0008d74:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7a:	a8 10                	test   al,0x10
c0008d7c:	0f 85 2a 01 00 00    	jne    c0008eac <Computer::detectFeatures()+0x196>
c0008d82:	84 c0                	test   al,al
c0008d84:	0f 88 45 01 00 00    	js     c0008ecf <Computer::detectFeatures()+0x1b9>
c0008d8a:	83 c4 1c             	add    esp,0x1c
c0008d8d:	5b                   	pop    ebx
c0008d8e:	5e                   	pop    esi
c0008d8f:	5f                   	pop    edi
c0008d90:	5d                   	pop    ebp
c0008d91:	c3                   	ret    
c0008d92:	83 ec 0c             	sub    esp,0xc
c0008d95:	6a 20                	push   0x20
c0008d97:	e8 96 96 00 00       	call   c0012432 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9c:	83 e0 01             	and    eax,0x1
c0008d9f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dac:	83 e0 f7             	and    eax,0xfffffff7
c0008daf:	09 d0                	or     eax,edx
c0008db1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db7:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dbe:	e8 6f 96 00 00       	call   c0012432 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc3:	83 e0 01             	and    eax,0x1
c0008dc6:	88 c2                	mov    dl,al
c0008dc8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dce:	83 e0 fe             	and    eax,0xfffffffe
c0008dd1:	09 d0                	or     eax,edx
c0008dd3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dd9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de0:	e8 4d 96 00 00       	call   c0012432 <CPU::cpuidCheckEDX(unsigned int)>
c0008de5:	c1 e0 07             	shl    eax,0x7
c0008de8:	88 c2                	mov    dl,al
c0008dea:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df0:	83 e0 7f             	and    eax,0x7f
c0008df3:	09 d0                	or     eax,edx
c0008df5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e02:	e8 2b 96 00 00       	call   c0012432 <CPU::cpuidCheckEDX(unsigned int)>
c0008e07:	83 c4 10             	add    esp,0x10
c0008e0a:	83 e0 01             	and    eax,0x1
c0008e0d:	c1 e0 05             	shl    eax,0x5
c0008e10:	88 c2                	mov    dl,al
c0008e12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e18:	83 e0 df             	and    eax,0xffffffdf
c0008e1b:	09 d0                	or     eax,edx
c0008e1d:	f7 05 c0 73 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00273c0,0x401
c0008e27:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2d:	0f 84 c2 00 00 00    	je     c0008ef5 <Computer::detectFeatures()+0x1df>
c0008e33:	83 e0 fe             	and    eax,0xfffffffe
c0008e36:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e42:	88 c2                	mov    dl,al
c0008e44:	83 e2 09             	and    edx,0x9
c0008e47:	fe ca                	dec    dl
c0008e49:	75 09                	jne    c0008e54 <Computer::detectFeatures()+0x13e>
c0008e4b:	83 e0 fe             	and    eax,0xfffffffe
c0008e4e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e54:	83 ec 0c             	sub    esp,0xc
c0008e57:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5b:	50                   	push   eax
c0008e5c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e60:	55                   	push   ebp
c0008e61:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e65:	57                   	push   edi
c0008e66:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6a:	56                   	push   esi
c0008e6b:	68 00 00 00 80       	push   0x80000000
c0008e70:	e8 39 95 00 00       	call   c00123ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e75:	83 c4 20             	add    esp,0x20
c0008e78:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e83:	0f 86 c3 fe ff ff    	jbe    c0008d4c <Computer::detectFeatures()+0x36>
c0008e89:	83 ec 0c             	sub    esp,0xc
c0008e8c:	50                   	push   eax
c0008e8d:	55                   	push   ebp
c0008e8e:	57                   	push   edi
c0008e8f:	56                   	push   esi
c0008e90:	68 01 00 00 80       	push   0x80000001
c0008e95:	e8 14 95 00 00       	call   c00123ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9a:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea4:	83 c4 20             	add    esp,0x20
c0008ea7:	e9 a0 fe ff ff       	jmp    c0008d4c <Computer::detectFeatures()+0x36>
c0008eac:	e8 9f 8b 01 00       	call   c0021a50 <absolutelyNoChanceInHell>
c0008eb1:	88 c2                	mov    dl,al
c0008eb3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008eb9:	c1 e2 07             	shl    edx,0x7
c0008ebc:	83 e0 7f             	and    eax,0x7f
c0008ebf:	09 d0                	or     eax,edx
c0008ec1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec7:	84 c0                	test   al,al
c0008ec9:	0f 89 bb fe ff ff    	jns    c0008d8a <Computer::detectFeatures()+0x74>
c0008ecf:	e8 dc 8a 01 00       	call   c00219b0 <avxDetect>
c0008ed4:	83 e0 01             	and    eax,0x1
c0008ed7:	c1 e0 05             	shl    eax,0x5
c0008eda:	88 c2                	mov    dl,al
c0008edc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee2:	83 e0 df             	and    eax,0xffffffdf
c0008ee5:	09 d0                	or     eax,edx
c0008ee7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eed:	83 c4 1c             	add    esp,0x1c
c0008ef0:	5b                   	pop    ebx
c0008ef1:	5e                   	pop    esi
c0008ef2:	5f                   	pop    edi
c0008ef3:	5d                   	pop    ebp
c0008ef4:	c3                   	ret    
c0008ef5:	83 ec 0c             	sub    esp,0xc
c0008ef8:	68 00 02 00 00       	push   0x200
c0008efd:	e8 30 95 00 00       	call   c0012432 <CPU::cpuidCheckEDX(unsigned int)>
c0008f02:	83 c4 10             	add    esp,0x10
c0008f05:	83 e0 01             	and    eax,0x1
c0008f08:	88 c2                	mov    dl,al
c0008f0a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f10:	83 e0 fe             	and    eax,0xfffffffe
c0008f13:	09 d0                	or     eax,edx
c0008f15:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1b:	e9 1c ff ff ff       	jmp    c0008e3c <Computer::detectFeatures()+0x126>

c0008f20 <Computer::displayFeatures()>:
c0008f20:	53                   	push   ebx
c0008f21:	83 ec 14             	sub    esp,0x14
c0008f24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f28:	68 68 32 02 c0       	push   0xc0023268
c0008f2d:	e8 93 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008f32:	83 c4 10             	add    esp,0x10
c0008f35:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c0008f3c:	0f 85 73 02 00 00    	jne    c00091b5 <Computer::displayFeatures()+0x295>
c0008f42:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0008f47:	83 ec 08             	sub    esp,0x8
c0008f4a:	50                   	push   eax
c0008f4b:	68 7b 32 02 c0       	push   0xc002327b
c0008f50:	e8 70 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008f55:	83 c4 10             	add    esp,0x10
c0008f58:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c0008f5f:	0f 85 8c 02 00 00    	jne    c00091f1 <Computer::displayFeatures()+0x2d1>
c0008f65:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0008f6a:	83 ec 08             	sub    esp,0x8
c0008f6d:	50                   	push   eax
c0008f6e:	68 8c 32 02 c0       	push   0xc002328c
c0008f73:	e8 4d 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008f78:	83 c4 10             	add    esp,0x10
c0008f7b:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c0008f82:	0f 85 5f 02 00 00    	jne    c00091e7 <Computer::displayFeatures()+0x2c7>
c0008f88:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0008f8d:	83 ec 08             	sub    esp,0x8
c0008f90:	50                   	push   eax
c0008f91:	68 9d 32 02 c0       	push   0xc002329d
c0008f96:	e8 2a 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c0008fa5:	0f 85 32 02 00 00    	jne    c00091dd <Computer::displayFeatures()+0x2bd>
c0008fab:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0008fb0:	83 ec 08             	sub    esp,0x8
c0008fb3:	50                   	push   eax
c0008fb4:	68 ae 32 02 c0       	push   0xc00232ae
c0008fb9:	e8 07 40 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008fbe:	83 c4 10             	add    esp,0x10
c0008fc1:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c0008fc8:	0f 85 05 02 00 00    	jne    c00091d3 <Computer::displayFeatures()+0x2b3>
c0008fce:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0008fd3:	83 ec 08             	sub    esp,0x8
c0008fd6:	50                   	push   eax
c0008fd7:	68 bf 32 02 c0       	push   0xc00232bf
c0008fdc:	e8 e4 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0008fe1:	83 c4 10             	add    esp,0x10
c0008fe4:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c0008feb:	0f 85 d8 01 00 00    	jne    c00091c9 <Computer::displayFeatures()+0x2a9>
c0008ff1:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0008ff6:	83 ec 08             	sub    esp,0x8
c0008ff9:	50                   	push   eax
c0008ffa:	68 d0 32 02 c0       	push   0xc00232d0
c0008fff:	e8 c1 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009004:	83 c4 10             	add    esp,0x10
c0009007:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000900e:	0f 85 ab 01 00 00    	jne    c00091bf <Computer::displayFeatures()+0x29f>
c0009014:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0009019:	83 ec 08             	sub    esp,0x8
c000901c:	50                   	push   eax
c000901d:	68 e1 32 02 c0       	push   0xc00232e1
c0009022:	e8 9e 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009027:	83 c4 10             	add    esp,0x10
c000902a:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c0009031:	0f 88 1b 02 00 00    	js     c0009252 <Computer::displayFeatures()+0x332>
c0009037:	b8 65 32 02 c0       	mov    eax,0xc0023265
c000903c:	83 ec 08             	sub    esp,0x8
c000903f:	50                   	push   eax
c0009040:	68 f2 32 02 c0       	push   0xc00232f2
c0009045:	e8 7b 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000904a:	83 c4 10             	add    esp,0x10
c000904d:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c0009054:	0f 85 a1 01 00 00    	jne    c00091fb <Computer::displayFeatures()+0x2db>
c000905a:	b8 65 32 02 c0       	mov    eax,0xc0023265
c000905f:	83 ec 08             	sub    esp,0x8
c0009062:	50                   	push   eax
c0009063:	68 03 33 02 c0       	push   0xc0023303
c0009068:	e8 58 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000906d:	83 c4 10             	add    esp,0x10
c0009070:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c0009077:	0f 85 cb 01 00 00    	jne    c0009248 <Computer::displayFeatures()+0x328>
c000907d:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0009082:	83 ec 08             	sub    esp,0x8
c0009085:	50                   	push   eax
c0009086:	68 14 33 02 c0       	push   0xc0023314
c000908b:	e8 35 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009090:	83 c4 10             	add    esp,0x10
c0009093:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000909a:	0f 85 9e 01 00 00    	jne    c000923e <Computer::displayFeatures()+0x31e>
c00090a0:	b8 65 32 02 c0       	mov    eax,0xc0023265
c00090a5:	83 ec 08             	sub    esp,0x8
c00090a8:	50                   	push   eax
c00090a9:	68 25 33 02 c0       	push   0xc0023325
c00090ae:	e8 12 3f 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00090b3:	83 c4 10             	add    esp,0x10
c00090b6:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c00090bd:	0f 85 71 01 00 00    	jne    c0009234 <Computer::displayFeatures()+0x314>
c00090c3:	b8 65 32 02 c0       	mov    eax,0xc0023265
c00090c8:	83 ec 08             	sub    esp,0x8
c00090cb:	50                   	push   eax
c00090cc:	68 36 33 02 c0       	push   0xc0023336
c00090d1:	e8 ef 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00090d6:	83 c4 10             	add    esp,0x10
c00090d9:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c00090e0:	0f 85 44 01 00 00    	jne    c000922a <Computer::displayFeatures()+0x30a>
c00090e6:	b8 65 32 02 c0       	mov    eax,0xc0023265
c00090eb:	83 ec 08             	sub    esp,0x8
c00090ee:	50                   	push   eax
c00090ef:	68 47 33 02 c0       	push   0xc0023347
c00090f4:	e8 cc 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c0009103:	0f 85 17 01 00 00    	jne    c0009220 <Computer::displayFeatures()+0x300>
c0009109:	b8 65 32 02 c0       	mov    eax,0xc0023265
c000910e:	83 ec 08             	sub    esp,0x8
c0009111:	50                   	push   eax
c0009112:	68 58 33 02 c0       	push   0xc0023358
c0009117:	e8 a9 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c0009126:	0f 85 ea 00 00 00    	jne    c0009216 <Computer::displayFeatures()+0x2f6>
c000912c:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0009131:	83 ec 08             	sub    esp,0x8
c0009134:	50                   	push   eax
c0009135:	68 69 33 02 c0       	push   0xc0023369
c000913a:	e8 86 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000913f:	83 c4 10             	add    esp,0x10
c0009142:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c0009149:	0f 88 0d 01 00 00    	js     c000925c <Computer::displayFeatures()+0x33c>
c000914f:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0009154:	83 ec 08             	sub    esp,0x8
c0009157:	50                   	push   eax
c0009158:	68 7a 33 02 c0       	push   0xc002337a
c000915d:	e8 63 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009162:	83 c4 10             	add    esp,0x10
c0009165:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000916c:	0f 85 9a 00 00 00    	jne    c000920c <Computer::displayFeatures()+0x2ec>
c0009172:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0009177:	83 ec 08             	sub    esp,0x8
c000917a:	50                   	push   eax
c000917b:	68 8b 33 02 c0       	push   0xc002338b
c0009180:	e8 40 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009185:	83 c4 10             	add    esp,0x10
c0009188:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000918f:	75 74                	jne    c0009205 <Computer::displayFeatures()+0x2e5>
c0009191:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0009196:	83 ec 08             	sub    esp,0x8
c0009199:	50                   	push   eax
c000919a:	68 9c 33 02 c0       	push   0xc002339c
c000919f:	e8 21 3e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00091a4:	c7 44 24 20 ef 4e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024eef
c00091ac:	83 c4 18             	add    esp,0x18
c00091af:	5b                   	pop    ebx
c00091b0:	e9 10 3e 00 00       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>
c00091b5:	b8 61 32 02 c0       	mov    eax,0xc0023261
c00091ba:	e9 88 fd ff ff       	jmp    c0008f47 <Computer::displayFeatures()+0x27>
c00091bf:	b8 61 32 02 c0       	mov    eax,0xc0023261
c00091c4:	e9 50 fe ff ff       	jmp    c0009019 <Computer::displayFeatures()+0xf9>
c00091c9:	b8 61 32 02 c0       	mov    eax,0xc0023261
c00091ce:	e9 23 fe ff ff       	jmp    c0008ff6 <Computer::displayFeatures()+0xd6>
c00091d3:	b8 61 32 02 c0       	mov    eax,0xc0023261
c00091d8:	e9 f6 fd ff ff       	jmp    c0008fd3 <Computer::displayFeatures()+0xb3>
c00091dd:	b8 61 32 02 c0       	mov    eax,0xc0023261
c00091e2:	e9 c9 fd ff ff       	jmp    c0008fb0 <Computer::displayFeatures()+0x90>
c00091e7:	b8 61 32 02 c0       	mov    eax,0xc0023261
c00091ec:	e9 9c fd ff ff       	jmp    c0008f8d <Computer::displayFeatures()+0x6d>
c00091f1:	b8 61 32 02 c0       	mov    eax,0xc0023261
c00091f6:	e9 6f fd ff ff       	jmp    c0008f6a <Computer::displayFeatures()+0x4a>
c00091fb:	b8 61 32 02 c0       	mov    eax,0xc0023261
c0009200:	e9 5a fe ff ff       	jmp    c000905f <Computer::displayFeatures()+0x13f>
c0009205:	b8 61 32 02 c0       	mov    eax,0xc0023261
c000920a:	eb 8a                	jmp    c0009196 <Computer::displayFeatures()+0x276>
c000920c:	b8 61 32 02 c0       	mov    eax,0xc0023261
c0009211:	e9 61 ff ff ff       	jmp    c0009177 <Computer::displayFeatures()+0x257>
c0009216:	b8 61 32 02 c0       	mov    eax,0xc0023261
c000921b:	e9 11 ff ff ff       	jmp    c0009131 <Computer::displayFeatures()+0x211>
c0009220:	b8 61 32 02 c0       	mov    eax,0xc0023261
c0009225:	e9 e4 fe ff ff       	jmp    c000910e <Computer::displayFeatures()+0x1ee>
c000922a:	b8 61 32 02 c0       	mov    eax,0xc0023261
c000922f:	e9 b7 fe ff ff       	jmp    c00090eb <Computer::displayFeatures()+0x1cb>
c0009234:	b8 61 32 02 c0       	mov    eax,0xc0023261
c0009239:	e9 8a fe ff ff       	jmp    c00090c8 <Computer::displayFeatures()+0x1a8>
c000923e:	b8 61 32 02 c0       	mov    eax,0xc0023261
c0009243:	e9 5d fe ff ff       	jmp    c00090a5 <Computer::displayFeatures()+0x185>
c0009248:	b8 61 32 02 c0       	mov    eax,0xc0023261
c000924d:	e9 30 fe ff ff       	jmp    c0009082 <Computer::displayFeatures()+0x162>
c0009252:	b8 61 32 02 c0       	mov    eax,0xc0023261
c0009257:	e9 e0 fd ff ff       	jmp    c000903c <Computer::displayFeatures()+0x11c>
c000925c:	b8 61 32 02 c0       	mov    eax,0xc0023261
c0009261:	e9 ee fe ff ff       	jmp    c0009154 <Computer::displayFeatures()+0x234>

c0009266 <Computer::rdmsr(unsigned int)>:
c0009266:	83 ec 0c             	sub    esp,0xc
c0009269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000926d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009274:	74 0a                	je     c0009280 <Computer::rdmsr(unsigned int)+0x1a>
c0009276:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000927a:	0f 32                	rdmsr  
c000927c:	83 c4 0c             	add    esp,0xc
c000927f:	c3                   	ret    
c0009280:	83 ec 0c             	sub    esp,0xc
c0009283:	68 ad 33 02 c0       	push   0xc00233ad
c0009288:	e8 7a ab 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000928d:	83 c4 10             	add    esp,0x10
c0009290:	eb e4                	jmp    c0009276 <Computer::rdmsr(unsigned int)+0x10>

c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0009292:	57                   	push   edi
c0009293:	56                   	push   esi
c0009294:	52                   	push   edx
c0009295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009299:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000929d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00092a1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00092a8:	74 0e                	je     c00092b8 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c00092aa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00092ae:	89 f0                	mov    eax,esi
c00092b0:	89 fa                	mov    edx,edi
c00092b2:	0f 30                	wrmsr  
c00092b4:	58                   	pop    eax
c00092b5:	5e                   	pop    esi
c00092b6:	5f                   	pop    edi
c00092b7:	c3                   	ret    
c00092b8:	83 ec 0c             	sub    esp,0xc
c00092bb:	68 b3 33 02 c0       	push   0xc00233b3
c00092c0:	e8 42 ab 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c00092c5:	83 c4 10             	add    esp,0x10
c00092c8:	eb e0                	jmp    c00092aa <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c00092ca <Computer::shutdown()>:
c00092ca:	83 ec 0c             	sub    esp,0xc
c00092cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00092d3:	6a 00                	push   0x0
c00092d5:	6a 00                	push   0x0
c00092d7:	6a 00                	push   0x0
c00092d9:	50                   	push   eax
c00092da:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092dd:	83 c4 1c             	add    esp,0x1c
c00092e0:	c3                   	ret    
c00092e1:	90                   	nop

c00092e2 <Computer::restart()>:
c00092e2:	83 ec 0c             	sub    esp,0xc
c00092e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092e9:	8b 10                	mov    edx,DWORD PTR [eax]
c00092eb:	6a 00                	push   0x0
c00092ed:	6a 00                	push   0x0
c00092ef:	6a 01                	push   0x1
c00092f1:	50                   	push   eax
c00092f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00092f5:	83 c4 1c             	add    esp,0x1c
c00092f8:	c3                   	ret    
c00092f9:	90                   	nop

c00092fa <Computer::sleep()>:
c00092fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092fe:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0009304:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009308:	e9 f3 86 00 00       	jmp    c0011a00 <ACPI::sleep()>
c000930d:	90                   	nop

c000930e <Computer::nmiEnabled()>:
c000930e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009312:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0009318:	c3                   	ret    
c0009319:	90                   	nop

c000931a <Computer::readCMOS(unsigned char)>:
c000931a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000931e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0009325:	19 c0                	sbb    eax,eax
c0009327:	83 e0 80             	and    eax,0xffffff80
c000932a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000932e:	e6 70                	out    0x70,al
c0009330:	e4 71                	in     al,0x71
c0009332:	c3                   	ret    
c0009333:	90                   	nop

c0009334 <Computer::enableNMI(bool)>:
c0009334:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009338:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000933c:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0009342:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000934a:	eb ce                	jmp    c000931a <Computer::readCMOS(unsigned char)>

c000934c <Computer::open(int, int, void*)>:
c000934c:	56                   	push   esi
c000934d:	53                   	push   ebx
c000934e:	83 ec 10             	sub    esp,0x10
c0009351:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009355:	68 68 34 02 c0       	push   0xc0023468
c000935a:	e8 b2 09 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000935f:	f6 05 c0 73 02 c0 04 	test   BYTE PTR ds:0xc00273c0,0x4
c0009366:	c7 04 24 b9 33 02 c0 	mov    DWORD PTR [esp],0xc00233b9
c000936d:	0f 94 05 80 67 02 c0 	sete   BYTE PTR ds:0xc0026780
c0009374:	e8 98 09 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009379:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009380:	e8 32 09 00 00       	call   c0009cb7 <malloc>
c0009385:	89 04 24             	mov    DWORD PTR [esp],eax
c0009388:	89 c6                	mov    esi,eax
c000938a:	e8 29 7f 00 00       	call   c00112b8 <ACPI::ACPI()>
c000938f:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c0009395:	58                   	pop    eax
c0009396:	5a                   	pop    edx
c0009397:	56                   	push   esi
c0009398:	53                   	push   ebx
c0009399:	e8 a4 50 00 00       	call   c000e442 <Device::addChild(Device*)>
c000939e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00093a1:	e8 70 f9 ff ff       	call   c0008d16 <Computer::detectFeatures()>
c00093a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00093a9:	e8 72 fb ff ff       	call   c0008f20 <Computer::displayFeatures()>
c00093ae:	59                   	pop    ecx
c00093af:	5e                   	pop    esi
c00093b0:	6a 01                	push   0x1
c00093b2:	53                   	push   ebx
c00093b3:	e8 7c ff ff ff       	call   c0009334 <Computer::enableNMI(bool)>
c00093b8:	c7 04 24 11 32 02 c0 	mov    DWORD PTR [esp],0xc0023211
c00093bf:	e8 4d 09 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00093c4:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c00093cb:	e8 e7 08 00 00       	call   c0009cb7 <malloc>
c00093d0:	89 c6                	mov    esi,eax
c00093d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00093d5:	e8 10 91 00 00       	call   c00124ea <CPU::CPU()>
c00093da:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00093e0:	58                   	pop    eax
c00093e1:	5a                   	pop    edx
c00093e2:	56                   	push   esi
c00093e3:	53                   	push   ebx
c00093e4:	e8 59 50 00 00       	call   c000e442 <Device::addChild(Device*)>
c00093e9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00093ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00093f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00093f5:	6a 00                	push   0x0
c00093f7:	6a 00                	push   0x0
c00093f9:	50                   	push   eax
c00093fa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00093fd:	83 c4 14             	add    esp,0x14
c0009400:	68 8c 34 02 c0       	push   0xc002348c
c0009405:	e8 07 09 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000940a:	e8 eb 13 01 00       	call   c001a7fa <Hal::initialiseCoprocessor()>
c000940f:	c7 04 24 d1 33 02 c0 	mov    DWORD PTR [esp],0xc00233d1
c0009416:	e8 f6 08 00 00       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000941b:	c7 04 24 64 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a64
c0009422:	e8 3d df 00 00       	call   c0017364 <setupMultitasking(void (*)())>
c0009427:	83 c4 14             	add    esp,0x14
c000942a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000942f:	5b                   	pop    ebx
c0009430:	5e                   	pop    esi
c0009431:	c3                   	ret    

c0009432 <Computer::disableNMI()>:
c0009432:	6a 00                	push   0x0
c0009434:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009438:	e8 f7 fe ff ff       	call   c0009334 <Computer::enableNMI(bool)>
c000943d:	58                   	pop    eax
c000943e:	5a                   	pop    edx
c000943f:	c3                   	ret    

c0009440 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009444:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000944b:	19 c0                	sbb    eax,eax
c000944d:	83 e0 80             	and    eax,0xffffff80
c0009450:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009454:	e6 70                	out    0x70,al
c0009456:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000945a:	e6 71                	out    0x71,al
c000945c:	c3                   	ret    
c000945d:	90                   	nop

c000945e <Computer::handleNMI()>:
c000945e:	56                   	push   esi
c000945f:	53                   	push   ebx
c0009460:	83 ec 10             	sub    esp,0x10
c0009463:	e4 92                	in     al,0x92
c0009465:	89 c6                	mov    esi,eax
c0009467:	e4 61                	in     al,0x61
c0009469:	68 ec 33 02 c0       	push   0xc00233ec
c000946e:	88 c3                	mov    bl,al
c0009470:	e8 50 3b 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009475:	83 c4 10             	add    esp,0x10
c0009478:	83 e6 10             	and    esi,0x10
c000947b:	75 0d                	jne    c000948a <Computer::handleNMI()+0x2c>
c000947d:	f6 c3 40             	test   bl,0x40
c0009480:	75 1d                	jne    c000949f <Computer::handleNMI()+0x41>
c0009482:	84 db                	test   bl,bl
c0009484:	78 2d                	js     c00094b3 <Computer::handleNMI()+0x55>
c0009486:	58                   	pop    eax
c0009487:	5b                   	pop    ebx
c0009488:	5e                   	pop    esi
c0009489:	c3                   	ret    
c000948a:	83 ec 0c             	sub    esp,0xc
c000948d:	68 fd 33 02 c0       	push   0xc00233fd
c0009492:	e8 70 a9 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c0009497:	83 c4 10             	add    esp,0x10
c000949a:	f6 c3 40             	test   bl,0x40
c000949d:	74 e3                	je     c0009482 <Computer::handleNMI()+0x24>
c000949f:	83 ec 0c             	sub    esp,0xc
c00094a2:	68 0a 34 02 c0       	push   0xc002340a
c00094a7:	e8 5b a9 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	84 db                	test   bl,bl
c00094b1:	79 d3                	jns    c0009486 <Computer::handleNMI()+0x28>
c00094b3:	c7 44 24 10 14 34 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023414
c00094bb:	5a                   	pop    edx
c00094bc:	5b                   	pop    ebx
c00094bd:	5e                   	pop    esi
c00094be:	e9 44 a9 00 00       	jmp    c0013e07 <Krnl::panic(char const*)>
c00094c3:	90                   	nop

c00094c4 <Computer::setDiskActivityLight(int, bool)>:
c00094c4:	56                   	push   esi
c00094c5:	53                   	push   ebx
c00094c6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00094ca:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00094cf:	77 1b                	ja     c00094ec <Computer::setDiskActivityLight(int, bool)+0x28>
c00094d1:	e4 92                	in     al,0x92
c00094d3:	bb 40 00 00 00       	mov    ebx,0x40
c00094d8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00094dc:	89 da                	mov    edx,ebx
c00094de:	d3 e2                	shl    edx,cl
c00094e0:	89 f1                	mov    ecx,esi
c00094e2:	f7 d2                	not    edx
c00094e4:	d3 e3                	shl    ebx,cl
c00094e6:	21 d0                	and    eax,edx
c00094e8:	09 d8                	or     eax,ebx
c00094ea:	e6 92                	out    0x92,al
c00094ec:	5b                   	pop    ebx
c00094ed:	5e                   	pop    esi
c00094ee:	c3                   	ret    
c00094ef:	90                   	nop

c00094f0 <GDTEntry::setBase(unsigned int)>:
c00094f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094f4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00094f8:	89 c1                	mov    ecx,eax
c00094fa:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00094fe:	c1 e9 10             	shr    ecx,0x10
c0009501:	c1 e8 18             	shr    eax,0x18
c0009504:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009507:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000950a:	c3                   	ret    
c000950b:	90                   	nop

c000950c <GDTEntry::setLimit(unsigned int)>:
c000950c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009510:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009514:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009517:	66 89 01             	mov    WORD PTR [ecx],ax
c000951a:	83 e2 f0             	and    edx,0xfffffff0
c000951d:	c1 e8 10             	shr    eax,0x10
c0009520:	83 e0 0f             	and    eax,0xf
c0009523:	09 d0                	or     eax,edx
c0009525:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009528:	c3                   	ret    
c0009529:	90                   	nop

c000952a <GDT::GDT()>:
c000952a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009538:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000953e:	90                   	nop
c000953f:	c3                   	ret    

c0009540 <GDT::addEntry(GDTEntry)>:
c0009540:	53                   	push   ebx
c0009541:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009545:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009549:	8b 02                	mov    eax,DWORD PTR [edx]
c000954b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000954f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009553:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009557:	8d 48 01             	lea    ecx,[eax+0x1]
c000955a:	c1 e0 03             	shl    eax,0x3
c000955d:	89 0a                	mov    DWORD PTR [edx],ecx
c000955f:	5b                   	pop    ebx
c0009560:	c3                   	ret    
c0009561:	90                   	nop

c0009562 <GDT::getNumberOfEntries()>:
c0009562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009566:	8b 00                	mov    eax,DWORD PTR [eax]
c0009568:	c3                   	ret    
c0009569:	90                   	nop

c000956a <GDT::flush()>:
c000956a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000956e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009570:	83 c0 04             	add    eax,0x4
c0009573:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000957a:	a3 b2 73 02 c0       	mov    ds:0xc00273b2,eax
c000957f:	66 89 15 b0 73 02 c0 	mov    WORD PTR ds:0xc00273b0,dx
c0009586:	e9 f2 6d ff ff       	jmp    c000037d <loadGDT>
c000958b:	90                   	nop

c000958c <GDT::setup()>:
c000958c:	57                   	push   edi
c000958d:	56                   	push   esi
c000958e:	53                   	push   ebx
c000958f:	83 ec 40             	sub    esp,0x40
c0009592:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0009596:	6a 00                	push   0x0
c0009598:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000959c:	56                   	push   esi
c000959d:	e8 4e ff ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c00095a2:	6a 00                	push   0x0
c00095a4:	56                   	push   esi
c00095a5:	e8 62 ff ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c00095aa:	81 64 24 3c ff 00 0f ff 	and    DWORD PTR [esp+0x3c],0xff0f00ff
c00095b2:	6a 00                	push   0x0
c00095b4:	8d 74 24 44          	lea    esi,[esp+0x44]
c00095b8:	56                   	push   esi
c00095b9:	e8 32 ff ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c00095be:	68 ff ff ff 00       	push   0xffffff
c00095c3:	56                   	push   esi
c00095c4:	e8 43 ff ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c00095c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00095cd:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00095d2:	0d 00 9a c0 00       	or     eax,0xc09a00
c00095d7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00095db:	83 c4 20             	add    esp,0x20
c00095de:	6a 00                	push   0x0
c00095e0:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00095e4:	56                   	push   esi
c00095e5:	e8 06 ff ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c00095ea:	68 ff ff ff 00       	push   0xffffff
c00095ef:	56                   	push   esi
c00095f0:	e8 17 ff ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c00095f5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00095f9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00095fd:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0009601:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0009605:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009609:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000960e:	0d 00 92 c0 00       	or     eax,0xc09200
c0009613:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0009617:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000961b:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000961f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009627:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000962b:	89 fa                	mov    edx,edi
c000962d:	80 cc 60             	or     ah,0x60
c0009630:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009636:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000963a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000963e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009642:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009646:	80 cc 60             	or     ah,0x60
c0009649:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000964d:	89 f8                	mov    eax,edi
c000964f:	25 ff ff 00 ff       	and    eax,0xff00ffff
c0009654:	09 d0                	or     eax,edx
c0009656:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000965a:	89 c7                	mov    edi,eax
c000965c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009660:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0009664:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009668:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000966c:	81 e2 00 00 3f 00    	and    edx,0x3f0000
c0009672:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009676:	25 ff ff 00 ff       	and    eax,0xff00ffff
c000967b:	09 d0                	or     eax,edx
c000967d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009681:	83 c4 0c             	add    esp,0xc
c0009684:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009688:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000968c:	53                   	push   ebx
c000968d:	e8 ae fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c0009692:	83 c4 0c             	add    esp,0xc
c0009695:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009699:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000969d:	53                   	push   ebx
c000969e:	e8 9d fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096a3:	83 c4 0c             	add    esp,0xc
c00096a6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00096aa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00096ae:	53                   	push   ebx
c00096af:	e8 8c fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096b4:	83 c4 0c             	add    esp,0xc
c00096b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00096bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00096bf:	53                   	push   ebx
c00096c0:	e8 7b fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096c5:	83 c4 0c             	add    esp,0xc
c00096c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00096d0:	53                   	push   ebx
c00096d1:	e8 6a fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096d6:	83 c4 0c             	add    esp,0xc
c00096d9:	57                   	push   edi
c00096da:	56                   	push   esi
c00096db:	53                   	push   ebx
c00096dc:	e8 5f fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096e1:	83 c4 0c             	add    esp,0xc
c00096e4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00096e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00096ec:	53                   	push   ebx
c00096ed:	e8 4e fe ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c00096f2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00096f5:	e8 70 fe ff ff       	call   c000956a <GDT::flush()>
c00096fa:	83 c4 50             	add    esp,0x50
c00096fd:	5b                   	pop    ebx
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	c3                   	ret    

c0009701 <idleFunction(void*)>:
c0009701:	83 ec 0c             	sub    esp,0xc
c0009704:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0009709:	48                   	dec    eax
c000970a:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000970f:	75 01                	jne    c0009712 <idleFunction(void*)+0x11>
c0009711:	fb                   	sti    
c0009712:	f4                   	hlt    
c0009713:	e8 3a 89 01 00       	call   c0022052 <idleCommon()>
c0009718:	eb f8                	jmp    c0009712 <idleFunction(void*)+0x11>
c000971a:	66 90                	xchg   ax,ax

c000971c <IDTEntry::IDTEntry(bool)>:
c000971c:	83 ec 04             	sub    esp,0x4
c000971f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009723:	88 04 24             	mov    BYTE PTR [esp],al
c0009726:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000972a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009730:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009734:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000973c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000973f:	83 e2 f0             	and    edx,0xfffffff0
c0009742:	83 ca 0e             	or     edx,0xe
c0009745:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009748:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000974c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000974f:	83 e2 ef             	and    edx,0xffffffef
c0009752:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009755:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009759:	74 05                	je     c0009760 <IDTEntry::IDTEntry(bool)+0x44>
c000975b:	b2 03                	mov    dl,0x3
c000975d:	eb 05                	jmp    c0009764 <IDTEntry::IDTEntry(bool)+0x48>
c000975f:	90                   	nop
c0009760:	b2 00                	mov    dl,0x0
c0009762:	66 90                	xchg   ax,ax
c0009764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009768:	83 e2 03             	and    edx,0x3
c000976b:	88 d1                	mov    cl,dl
c000976d:	c1 e1 05             	shl    ecx,0x5
c0009770:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009773:	83 e2 9f             	and    edx,0xffffff9f
c0009776:	09 ca                	or     edx,ecx
c0009778:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000977b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000977f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009782:	83 ca 80             	or     edx,0xffffff80
c0009785:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009788:	90                   	nop
c0009789:	83 c4 04             	add    esp,0x4
c000978c:	c3                   	ret    
c000978d:	90                   	nop

c000978e <IDTEntry::setOffset(unsigned int)>:
c000978e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009792:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009796:	66 89 02             	mov    WORD PTR [edx],ax
c0009799:	c1 e8 10             	shr    eax,0x10
c000979c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00097a0:	c3                   	ret    
c00097a1:	90                   	nop
c00097a2:	66 90                	xchg   ax,ax

c00097a4 <IDT::IDT()>:
c00097a4:	90                   	nop
c00097a5:	c3                   	ret    

c00097a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00097a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097aa:	83 c0 30             	add    eax,0x30
c00097ad:	c3                   	ret    

c00097ae <IDT::addEntry(IDTEntry, int)>:
c00097ae:	53                   	push   ebx
c00097af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097b7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00097bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00097bf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00097c2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00097c6:	5b                   	pop    ebx
c00097c7:	c3                   	ret    

c00097c8 <IDT::addEntry(int, void (*)(), bool)>:
c00097c8:	53                   	push   ebx
c00097c9:	83 ec 10             	sub    esp,0x10
c00097cc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00097d1:	50                   	push   eax
c00097d2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00097d6:	53                   	push   ebx
c00097d7:	e8 40 ff ff ff       	call   c000971c <IDTEntry::IDTEntry(bool)>
c00097dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00097e0:	53                   	push   ebx
c00097e1:	e8 a8 ff ff ff       	call   c000978e <IDTEntry::setOffset(unsigned int)>
c00097e6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00097ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00097f2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097f6:	e8 b3 ff ff ff       	call   c00097ae <IDT::addEntry(IDTEntry, int)>
c00097fb:	83 c4 30             	add    esp,0x30
c00097fe:	5b                   	pop    ebx
c00097ff:	c3                   	ret    

c0009800 <IDT::flush()>:
c0009800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009804:	66 c7 05 b8 73 02 c0 ff 07 	mov    WORD PTR ds:0xc00273b8,0x7ff
c000980d:	a3 ba 73 02 c0       	mov    ds:0xc00273ba,eax
c0009812:	0f 01 1d b8 73 02 c0 	lidtd  ds:0xc00273b8
c0009819:	c3                   	ret    

c000981a <IDT::setup()>:
c000981a:	57                   	push   edi
c000981b:	56                   	push   esi
c000981c:	53                   	push   ebx
c000981d:	83 ec 10             	sub    esp,0x10
c0009820:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009824:	6a 00                	push   0x0
c0009826:	68 9d 03 00 c0       	push   0xc000039d
c000982b:	6a 00                	push   0x0
c000982d:	53                   	push   ebx
c000982e:	e8 95 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009833:	6a 00                	push   0x0
c0009835:	68 ad 03 00 c0       	push   0xc00003ad
c000983a:	6a 01                	push   0x1
c000983c:	53                   	push   ebx
c000983d:	e8 86 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009842:	83 c4 20             	add    esp,0x20
c0009845:	6a 00                	push   0x0
c0009847:	68 b7 03 00 c0       	push   0xc00003b7
c000984c:	6a 02                	push   0x2
c000984e:	53                   	push   ebx
c000984f:	e8 74 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009854:	6a 00                	push   0x0
c0009856:	68 c1 03 00 c0       	push   0xc00003c1
c000985b:	6a 03                	push   0x3
c000985d:	53                   	push   ebx
c000985e:	e8 65 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009863:	83 c4 20             	add    esp,0x20
c0009866:	6a 00                	push   0x0
c0009868:	68 cb 03 00 c0       	push   0xc00003cb
c000986d:	6a 04                	push   0x4
c000986f:	53                   	push   ebx
c0009870:	e8 53 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009875:	6a 00                	push   0x0
c0009877:	68 d5 03 00 c0       	push   0xc00003d5
c000987c:	6a 05                	push   0x5
c000987e:	53                   	push   ebx
c000987f:	e8 44 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009884:	83 c4 20             	add    esp,0x20
c0009887:	6a 00                	push   0x0
c0009889:	68 df 03 00 c0       	push   0xc00003df
c000988e:	6a 06                	push   0x6
c0009890:	53                   	push   ebx
c0009891:	e8 32 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009896:	6a 00                	push   0x0
c0009898:	68 e9 03 00 c0       	push   0xc00003e9
c000989d:	6a 07                	push   0x7
c000989f:	53                   	push   ebx
c00098a0:	e8 23 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098a5:	83 c4 20             	add    esp,0x20
c00098a8:	6a 00                	push   0x0
c00098aa:	68 f3 03 00 c0       	push   0xc00003f3
c00098af:	6a 08                	push   0x8
c00098b1:	53                   	push   ebx
c00098b2:	e8 11 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098b7:	6a 00                	push   0x0
c00098b9:	68 fb 03 00 c0       	push   0xc00003fb
c00098be:	6a 09                	push   0x9
c00098c0:	53                   	push   ebx
c00098c1:	e8 02 ff ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098c6:	83 c4 20             	add    esp,0x20
c00098c9:	6a 00                	push   0x0
c00098cb:	68 05 04 00 c0       	push   0xc0000405
c00098d0:	6a 0a                	push   0xa
c00098d2:	53                   	push   ebx
c00098d3:	e8 f0 fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098d8:	6a 00                	push   0x0
c00098da:	68 0d 04 00 c0       	push   0xc000040d
c00098df:	6a 0b                	push   0xb
c00098e1:	53                   	push   ebx
c00098e2:	e8 e1 fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098e7:	83 c4 20             	add    esp,0x20
c00098ea:	6a 00                	push   0x0
c00098ec:	68 15 04 00 c0       	push   0xc0000415
c00098f1:	6a 0c                	push   0xc
c00098f3:	53                   	push   ebx
c00098f4:	e8 cf fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00098f9:	6a 00                	push   0x0
c00098fb:	68 1d 04 00 c0       	push   0xc000041d
c0009900:	6a 0d                	push   0xd
c0009902:	53                   	push   ebx
c0009903:	e8 c0 fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009908:	83 c4 20             	add    esp,0x20
c000990b:	6a 00                	push   0x0
c000990d:	68 25 04 00 c0       	push   0xc0000425
c0009912:	6a 0e                	push   0xe
c0009914:	53                   	push   ebx
c0009915:	e8 ae fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000991a:	6a 00                	push   0x0
c000991c:	68 2d 04 00 c0       	push   0xc000042d
c0009921:	6a 0f                	push   0xf
c0009923:	53                   	push   ebx
c0009924:	e8 9f fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009929:	83 c4 20             	add    esp,0x20
c000992c:	6a 00                	push   0x0
c000992e:	68 37 04 00 c0       	push   0xc0000437
c0009933:	6a 10                	push   0x10
c0009935:	53                   	push   ebx
c0009936:	e8 8d fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000993b:	6a 00                	push   0x0
c000993d:	68 41 04 00 c0       	push   0xc0000441
c0009942:	6a 11                	push   0x11
c0009944:	53                   	push   ebx
c0009945:	e8 7e fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000994a:	83 c4 20             	add    esp,0x20
c000994d:	6a 00                	push   0x0
c000994f:	68 4b 04 00 c0       	push   0xc000044b
c0009954:	6a 12                	push   0x12
c0009956:	53                   	push   ebx
c0009957:	e8 6c fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000995c:	6a 01                	push   0x1
c000995e:	68 e5 04 00 c0       	push   0xc00004e5
c0009963:	6a 60                	push   0x60
c0009965:	53                   	push   ebx
c0009966:	e8 5d fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000996b:	83 c4 20             	add    esp,0x20
c000996e:	6a 00                	push   0x0
c0009970:	68 ec 04 00 c0       	push   0xc00004ec
c0009975:	6a 20                	push   0x20
c0009977:	53                   	push   ebx
c0009978:	e8 4b fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000997d:	6a 00                	push   0x0
c000997f:	68 d7 04 00 c0       	push   0xc00004d7
c0009984:	6a 21                	push   0x21
c0009986:	53                   	push   ebx
c0009987:	e8 3c fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000998c:	83 c4 20             	add    esp,0x20
c000998f:	6a 00                	push   0x0
c0009991:	68 de 04 00 c0       	push   0xc00004de
c0009996:	6a 22                	push   0x22
c0009998:	53                   	push   ebx
c0009999:	e8 2a fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c000999e:	6a 00                	push   0x0
c00099a0:	68 55 04 00 c0       	push   0xc0000455
c00099a5:	6a 23                	push   0x23
c00099a7:	53                   	push   ebx
c00099a8:	e8 1b fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099ad:	83 c4 20             	add    esp,0x20
c00099b0:	6a 00                	push   0x0
c00099b2:	68 5f 04 00 c0       	push   0xc000045f
c00099b7:	6a 24                	push   0x24
c00099b9:	53                   	push   ebx
c00099ba:	e8 09 fe ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099bf:	6a 00                	push   0x0
c00099c1:	68 69 04 00 c0       	push   0xc0000469
c00099c6:	6a 25                	push   0x25
c00099c8:	53                   	push   ebx
c00099c9:	e8 fa fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099ce:	83 c4 20             	add    esp,0x20
c00099d1:	6a 00                	push   0x0
c00099d3:	68 73 04 00 c0       	push   0xc0000473
c00099d8:	6a 26                	push   0x26
c00099da:	53                   	push   ebx
c00099db:	e8 e8 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099e0:	6a 00                	push   0x0
c00099e2:	68 7d 04 00 c0       	push   0xc000047d
c00099e7:	6a 27                	push   0x27
c00099e9:	53                   	push   ebx
c00099ea:	e8 d9 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c00099ef:	83 c4 20             	add    esp,0x20
c00099f2:	6a 00                	push   0x0
c00099f4:	68 87 04 00 c0       	push   0xc0000487
c00099f9:	6a 28                	push   0x28
c00099fb:	53                   	push   ebx
c00099fc:	e8 c7 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a01:	6a 00                	push   0x0
c0009a03:	68 91 04 00 c0       	push   0xc0000491
c0009a08:	6a 29                	push   0x29
c0009a0a:	53                   	push   ebx
c0009a0b:	e8 b8 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a10:	83 c4 20             	add    esp,0x20
c0009a13:	6a 00                	push   0x0
c0009a15:	68 9b 04 00 c0       	push   0xc000049b
c0009a1a:	6a 2a                	push   0x2a
c0009a1c:	53                   	push   ebx
c0009a1d:	e8 a6 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a22:	6a 00                	push   0x0
c0009a24:	68 a5 04 00 c0       	push   0xc00004a5
c0009a29:	6a 2b                	push   0x2b
c0009a2b:	53                   	push   ebx
c0009a2c:	e8 97 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a31:	83 c4 20             	add    esp,0x20
c0009a34:	6a 00                	push   0x0
c0009a36:	68 af 04 00 c0       	push   0xc00004af
c0009a3b:	6a 2c                	push   0x2c
c0009a3d:	53                   	push   ebx
c0009a3e:	e8 85 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a43:	6a 00                	push   0x0
c0009a45:	68 b9 04 00 c0       	push   0xc00004b9
c0009a4a:	6a 2d                	push   0x2d
c0009a4c:	53                   	push   ebx
c0009a4d:	e8 76 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a52:	83 c4 20             	add    esp,0x20
c0009a55:	6a 00                	push   0x0
c0009a57:	68 c3 04 00 c0       	push   0xc00004c3
c0009a5c:	6a 2e                	push   0x2e
c0009a5e:	53                   	push   ebx
c0009a5f:	e8 64 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a64:	6a 00                	push   0x0
c0009a66:	68 cd 04 00 c0       	push   0xc00004cd
c0009a6b:	6a 2f                	push   0x2f
c0009a6d:	53                   	push   ebx
c0009a6e:	e8 55 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a73:	83 c4 20             	add    esp,0x20
c0009a76:	6a 00                	push   0x0
c0009a78:	68 23 05 00 c0       	push   0xc0000523
c0009a7d:	6a 30                	push   0x30
c0009a7f:	53                   	push   ebx
c0009a80:	e8 43 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a85:	6a 00                	push   0x0
c0009a87:	68 2d 05 00 c0       	push   0xc000052d
c0009a8c:	6a 31                	push   0x31
c0009a8e:	53                   	push   ebx
c0009a8f:	e8 34 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009a94:	83 c4 20             	add    esp,0x20
c0009a97:	6a 00                	push   0x0
c0009a99:	68 37 05 00 c0       	push   0xc0000537
c0009a9e:	6a 32                	push   0x32
c0009aa0:	53                   	push   ebx
c0009aa1:	e8 22 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009aa6:	6a 00                	push   0x0
c0009aa8:	68 41 05 00 c0       	push   0xc0000541
c0009aad:	6a 33                	push   0x33
c0009aaf:	53                   	push   ebx
c0009ab0:	e8 13 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009ab5:	83 c4 20             	add    esp,0x20
c0009ab8:	6a 00                	push   0x0
c0009aba:	68 4b 05 00 c0       	push   0xc000054b
c0009abf:	6a 34                	push   0x34
c0009ac1:	53                   	push   ebx
c0009ac2:	e8 01 fd ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009ac7:	6a 00                	push   0x0
c0009ac9:	68 55 05 00 c0       	push   0xc0000555
c0009ace:	6a 35                	push   0x35
c0009ad0:	53                   	push   ebx
c0009ad1:	e8 f2 fc ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009ad6:	83 c4 20             	add    esp,0x20
c0009ad9:	6a 00                	push   0x0
c0009adb:	68 5f 05 00 c0       	push   0xc000055f
c0009ae0:	6a 36                	push   0x36
c0009ae2:	53                   	push   ebx
c0009ae3:	e8 e0 fc ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009ae8:	6a 00                	push   0x0
c0009aea:	68 69 05 00 c0       	push   0xc0000569
c0009aef:	6a 37                	push   0x37
c0009af1:	53                   	push   ebx
c0009af2:	e8 d1 fc ff ff       	call   c00097c8 <IDT::addEntry(int, void (*)(), bool)>
c0009af7:	83 c4 1c             	add    esp,0x1c
c0009afa:	6a 03                	push   0x3
c0009afc:	6a 02                	push   0x2
c0009afe:	ff 35 d4 74 02 c0    	push   DWORD PTR ds:0xc00274d4
c0009b04:	e8 cf 28 00 00       	call   c000c3d8 <VAS::allocatePages(int, int)>
c0009b09:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009b10:	89 c6                	mov    esi,eax
c0009b12:	e8 a0 01 00 00       	call   c0009cb7 <malloc>
c0009b17:	81 c6 00 20 00 00    	add    esi,0x2000
c0009b1d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b20:	89 c7                	mov    edi,eax
c0009b22:	e8 85 1a 00 00       	call   c000b5ac <TSS::TSS()>
c0009b27:	83 c4 0c             	add    esp,0xc
c0009b2a:	68 f3 03 00 c0       	push   0xc00003f3
c0009b2f:	56                   	push   esi
c0009b30:	57                   	push   edi
c0009b31:	e8 ba 1a 00 00       	call   c000b5f0 <TSS::setup(unsigned long, unsigned long)>
c0009b36:	89 c6                	mov    esi,eax
c0009b38:	58                   	pop    eax
c0009b39:	5a                   	pop    edx
c0009b3a:	6a 00                	push   0x0
c0009b3c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009b40:	50                   	push   eax
c0009b41:	e8 d6 fb ff ff       	call   c000971c <IDTEntry::IDTEntry(bool)>
c0009b46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b4a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0009b4f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009b56:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009b5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009b60:	80 ce 05             	or     dh,0x5
c0009b63:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009b66:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b6a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009b6e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0009b71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009b74:	e8 87 fc ff ff       	call   c0009800 <IDT::flush()>
c0009b79:	83 c4 20             	add    esp,0x20
c0009b7c:	5b                   	pop    ebx
c0009b7d:	5e                   	pop    esi
c0009b7e:	5f                   	pop    edi
c0009b7f:	c3                   	ret    

c0009b80 <sbrk>:
c0009b80:	55                   	push   ebp
c0009b81:	57                   	push   edi
c0009b82:	56                   	push   esi
c0009b83:	53                   	push   ebx
c0009b84:	83 ec 24             	sub    esp,0x24
c0009b87:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009b8b:	53                   	push   ebx
c0009b8c:	68 dc 34 02 c0       	push   0xc00234dc
c0009b91:	e8 2f 34 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009b96:	83 c4 10             	add    esp,0x10
c0009b99:	85 db                	test   ebx,ebx
c0009b9b:	74 5f                	je     c0009bfc <sbrk+0x7c>
c0009b9d:	78 64                	js     c0009c03 <sbrk+0x83>
c0009b9f:	a1 10 66 02 c0       	mov    eax,ds:0xc0026610
c0009ba4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ba8:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009bae:	89 dd                	mov    ebp,ebx
c0009bb0:	78 69                	js     c0009c1b <sbrk+0x9b>
c0009bb2:	c1 fd 0c             	sar    ebp,0xc
c0009bb5:	bb 00 00 00 00       	mov    ebx,0x0
c0009bba:	8b 35 d4 74 02 c0    	mov    esi,DWORD PTR ds:0xc00274d4
c0009bc0:	8b 3d 10 66 02 c0    	mov    edi,DWORD PTR ds:0xc0026610
c0009bc6:	e8 a3 07 00 00       	call   c000a36e <Phys::allocatePage()>
c0009bcb:	68 01 04 00 00       	push   0x401
c0009bd0:	57                   	push   edi
c0009bd1:	50                   	push   eax
c0009bd2:	56                   	push   esi
c0009bd3:	e8 fc 26 00 00       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009bd8:	81 05 10 66 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0026610,0x1000
c0009be2:	43                   	inc    ebx
c0009be3:	83 c4 10             	add    esp,0x10
c0009be6:	39 dd                	cmp    ebp,ebx
c0009be8:	75 d0                	jne    c0009bba <sbrk+0x3a>
c0009bea:	0f 20 d8             	mov    eax,cr3
c0009bed:	0f 22 d8             	mov    cr3,eax
c0009bf0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bf4:	83 c4 1c             	add    esp,0x1c
c0009bf7:	5b                   	pop    ebx
c0009bf8:	5e                   	pop    esi
c0009bf9:	5f                   	pop    edi
c0009bfa:	5d                   	pop    ebp
c0009bfb:	c3                   	ret    
c0009bfc:	a1 10 66 02 c0       	mov    eax,ds:0xc0026610
c0009c01:	eb f1                	jmp    c0009bf4 <sbrk+0x74>
c0009c03:	83 ec 08             	sub    esp,0x8
c0009c06:	53                   	push   ebx
c0009c07:	68 08 35 02 c0       	push   0xc0023508
c0009c0c:	e8 b4 33 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009c11:	83 c4 10             	add    esp,0x10
c0009c14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009c19:	eb d9                	jmp    c0009bf4 <sbrk+0x74>
c0009c1b:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009c21:	eb 8f                	jmp    c0009bb2 <sbrk+0x32>

c0009c23 <mmap>:
c0009c23:	83 ec 18             	sub    esp,0x18
c0009c26:	68 fa 34 02 c0       	push   0xc00234fa
c0009c2b:	e8 d7 a1 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c0009c30:	b8 00 00 00 00       	mov    eax,0x0
c0009c35:	83 c4 1c             	add    esp,0x1c
c0009c38:	c3                   	ret    

c0009c39 <munmap>:
c0009c39:	83 ec 18             	sub    esp,0x18
c0009c3c:	68 ff 34 02 c0       	push   0xc00234ff
c0009c41:	e8 c1 a1 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c0009c46:	b8 00 00 00 00       	mov    eax,0x0
c0009c4b:	83 c4 1c             	add    esp,0x1c
c0009c4e:	c3                   	ret    

c0009c4f <liballoc_lock()>:
c0009c4f:	fa                   	cli    
c0009c50:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c0009c56:	b8 00 00 00 00       	mov    eax,0x0
c0009c5b:	c3                   	ret    

c0009c5c <liballoc_unlock()>:
c0009c5c:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0009c61:	48                   	dec    eax
c0009c62:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0009c67:	75 01                	jne    c0009c6a <liballoc_unlock()+0xe>
c0009c69:	fb                   	sti    
c0009c6a:	b8 00 00 00 00       	mov    eax,0x0
c0009c6f:	c3                   	ret    

c0009c70 <liballoc_alloc(int)>:
c0009c70:	83 ec 10             	sub    esp,0x10
c0009c73:	6a 01                	push   0x1
c0009c75:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c79:	ff 35 d4 74 02 c0    	push   DWORD PTR ds:0xc00274d4
c0009c7f:	e8 54 27 00 00       	call   c000c3d8 <VAS::allocatePages(int, int)>
c0009c84:	83 c4 1c             	add    esp,0x1c
c0009c87:	c3                   	ret    

c0009c88 <liballoc_free(void*, int)>:
c0009c88:	83 ec 14             	sub    esp,0x14
c0009c8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009c8f:	ff 35 d4 74 02 c0    	push   DWORD PTR ds:0xc00274d4
c0009c95:	e8 e6 23 00 00       	call   c000c080 <VAS::freeAllocatedPages(unsigned long)>
c0009c9a:	b8 00 00 00 00       	mov    eax,0x0
c0009c9f:	83 c4 1c             	add    esp,0x1c
c0009ca2:	c3                   	ret    

c0009ca3 <realloc>:
c0009ca3:	83 ec 14             	sub    esp,0x14
c0009ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cae:	e8 a5 78 ff ff       	call   c0001558 <dlrealloc>
c0009cb3:	83 c4 1c             	add    esp,0x1c
c0009cb6:	c3                   	ret    

c0009cb7 <malloc>:
c0009cb7:	83 ec 18             	sub    esp,0x18
c0009cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cbe:	e8 58 73 ff ff       	call   c000101b <dlmalloc>
c0009cc3:	83 c4 1c             	add    esp,0x1c
c0009cc6:	c3                   	ret    

c0009cc7 <free>:
c0009cc7:	83 ec 18             	sub    esp,0x18
c0009cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cce:	e8 ed 6f ff ff       	call   c0000cc0 <dlfree>
c0009cd3:	83 c4 1c             	add    esp,0x1c
c0009cd6:	c3                   	ret    

c0009cd7 <rfree>:
c0009cd7:	83 ec 18             	sub    esp,0x18
c0009cda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cde:	e8 dd 6f ff ff       	call   c0000cc0 <dlfree>
c0009ce3:	83 c4 1c             	add    esp,0x1c
c0009ce6:	c3                   	ret    

c0009ce7 <calloc>:
c0009ce7:	56                   	push   esi
c0009ce8:	53                   	push   ebx
c0009ce9:	83 ec 10             	sub    esp,0x10
c0009cec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009cf0:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009cf5:	53                   	push   ebx
c0009cf6:	e8 bc ff ff ff       	call   c0009cb7 <malloc>
c0009cfb:	89 c6                	mov    esi,eax
c0009cfd:	83 c4 0c             	add    esp,0xc
c0009d00:	53                   	push   ebx
c0009d01:	6a 00                	push   0x0
c0009d03:	50                   	push   eax
c0009d04:	e8 73 69 ff ff       	call   c000067c <memset>
c0009d09:	89 f0                	mov    eax,esi
c0009d0b:	83 c4 14             	add    esp,0x14
c0009d0e:	5b                   	pop    ebx
c0009d0f:	5e                   	pop    esi
c0009d10:	c3                   	ret    

c0009d11 <Krnl::setBootMessage(char const*)>:
c0009d11:	57                   	push   edi
c0009d12:	56                   	push   esi
c0009d13:	53                   	push   ebx
c0009d14:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009d1a:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009d21:	68 9e 00 00 00       	push   0x9e
c0009d26:	6a 00                	push   0x0
c0009d28:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009d2c:	56                   	push   esi
c0009d2d:	e8 4a 69 ff ff       	call   c000067c <memset>
c0009d32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009d35:	e8 5e 69 ff ff       	call   c0000698 <strlen>
c0009d3a:	ba 50 00 00 00       	mov    edx,0x50
c0009d3f:	83 c4 10             	add    esp,0x10
c0009d42:	29 c2                	sub    edx,eax
c0009d44:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009d48:	d1 ea                	shr    edx,1
c0009d4a:	84 c0                	test   al,al
c0009d4c:	74 19                	je     c0009d67 <Krnl::setBootMessage(char const*)+0x56>
c0009d4e:	01 d2                	add    edx,edx
c0009d50:	43                   	inc    ebx
c0009d51:	01 f2                	add    edx,esi
c0009d53:	80 cc 0f             	or     ah,0xf
c0009d56:	83 c2 02             	add    edx,0x2
c0009d59:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009d5d:	43                   	inc    ebx
c0009d5e:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009d63:	84 c0                	test   al,al
c0009d65:	75 ec                	jne    c0009d53 <Krnl::setBootMessage(char const*)+0x42>
c0009d67:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009d6c:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009d71:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009d73:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009d79:	5b                   	pop    ebx
c0009d7a:	5e                   	pop    esi
c0009d7b:	5f                   	pop    edi
c0009d7c:	c3                   	ret    

c0009d7d <kernel_main>:
c0009d7d:	57                   	push   edi
c0009d7e:	56                   	push   esi
c0009d7f:	53                   	push   ebx
c0009d80:	83 ec 20             	sub    esp,0x20
c0009d83:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009d88:	a3 c0 73 02 c0       	mov    ds:0xc00273c0,eax
c0009d8d:	f6 c4 08             	test   ah,0x8
c0009d90:	0f 85 7a 03 00 00    	jne    c000a110 <kernel_main+0x393>
c0009d96:	31 f6                	xor    esi,esi
c0009d98:	bf f9 03 00 00       	mov    edi,0x3f9
c0009d9d:	89 f0                	mov    eax,esi
c0009d9f:	89 fa                	mov    edx,edi
c0009da1:	ee                   	out    dx,al
c0009da2:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009da7:	b0 80                	mov    al,0x80
c0009da9:	89 da                	mov    edx,ebx
c0009dab:	ee                   	out    dx,al
c0009dac:	b1 03                	mov    cl,0x3
c0009dae:	ba f8 03 00 00       	mov    edx,0x3f8
c0009db3:	88 c8                	mov    al,cl
c0009db5:	ee                   	out    dx,al
c0009db6:	89 f0                	mov    eax,esi
c0009db8:	89 fa                	mov    edx,edi
c0009dba:	ee                   	out    dx,al
c0009dbb:	88 c8                	mov    al,cl
c0009dbd:	89 da                	mov    edx,ebx
c0009dbf:	ee                   	out    dx,al
c0009dc0:	b0 c7                	mov    al,0xc7
c0009dc2:	ba fa 03 00 00       	mov    edx,0x3fa
c0009dc7:	ee                   	out    dx,al
c0009dc8:	b0 0b                	mov    al,0xb
c0009dca:	ba fc 03 00 00       	mov    edx,0x3fc
c0009dcf:	ee                   	out    dx,al
c0009dd0:	83 ec 0c             	sub    esp,0xc
c0009dd3:	68 38 35 02 c0       	push   0xc0023538
c0009dd8:	e8 e8 31 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0009ddd:	83 c4 10             	add    esp,0x10
c0009de0:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0009de7:	0f 85 eb 02 00 00    	jne    c000a0d8 <kernel_main+0x35b>
c0009ded:	e8 c6 0c 00 00       	call   c000aab8 <installVgaTextImplementation()>
c0009df2:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0009df9:	0f 85 94 02 00 00    	jne    c000a093 <kernel_main+0x316>
c0009dff:	0f b6 05 20 66 02 c0 	movzx  eax,BYTE PTR ds:0xc0026620
c0009e06:	84 c0                	test   al,al
c0009e08:	74 7b                	je     c0009e85 <kernel_main+0x108>
c0009e0a:	31 db                	xor    ebx,ebx
c0009e0c:	bf 0a 00 00 00       	mov    edi,0xa
c0009e11:	be 05 00 00 00       	mov    esi,0x5
c0009e16:	31 c9                	xor    ecx,ecx
c0009e18:	eb 2a                	jmp    c0009e44 <kernel_main+0xc7>
c0009e1a:	3c 0d                	cmp    al,0xd
c0009e1c:	74 1a                	je     c0009e38 <kernel_main+0xbb>
c0009e1e:	3c 0a                	cmp    al,0xa
c0009e20:	74 40                	je     c0009e62 <kernel_main+0xe5>
c0009e22:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009e25:	80 cc 0e             	or     ah,0xe
c0009e28:	c1 e2 04             	shl    edx,0x4
c0009e2b:	01 ca                	add    edx,ecx
c0009e2d:	41                   	inc    ecx
c0009e2e:	01 fa                	add    edx,edi
c0009e30:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009e38:	43                   	inc    ebx
c0009e39:	0f b6 83 20 66 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd99e0]
c0009e40:	84 c0                	test   al,al
c0009e42:	74 32                	je     c0009e76 <kernel_main+0xf9>
c0009e44:	80 b9 56 66 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd99aa],0xdb
c0009e4b:	75 cd                	jne    c0009e1a <kernel_main+0x9d>
c0009e4d:	0f b6 91 55 66 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd99ab]
c0009e54:	83 e2 fe             	and    edx,0xfffffffe
c0009e57:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009e5d:	75 bb                	jne    c0009e1a <kernel_main+0x9d>
c0009e5f:	47                   	inc    edi
c0009e60:	eb b8                	jmp    c0009e1a <kernel_main+0x9d>
c0009e62:	43                   	inc    ebx
c0009e63:	46                   	inc    esi
c0009e64:	31 c9                	xor    ecx,ecx
c0009e66:	0f b6 83 20 66 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd99e0]
c0009e6d:	bf 0a 00 00 00       	mov    edi,0xa
c0009e72:	84 c0                	test   al,al
c0009e74:	75 ce                	jne    c0009e44 <kernel_main+0xc7>
c0009e76:	8b 15 c0 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273c0
c0009e7c:	80 e6 08             	and    dh,0x8
c0009e7f:	0f 85 bf 00 00 00    	jne    c0009f44 <kernel_main+0x1c7>
c0009e85:	83 ec 0c             	sub    esp,0xc
c0009e88:	68 d4 35 02 c0       	push   0xc00235d4
c0009e8d:	e8 7f fe ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009e92:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009e97:	05 ff 0f 00 00       	add    eax,0xfff
c0009e9c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ea1:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ea4:	e8 44 06 00 00       	call   c000a4ed <Phys::physicalMemorySetup(unsigned int)>
c0009ea9:	83 c4 10             	add    esp,0x10
c0009eac:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0009eb3:	0f 85 a2 01 00 00    	jne    c000a05b <kernel_main+0x2de>
c0009eb9:	e8 6a 1f 00 00       	call   c000be28 <Virt::virtualMemorySetup()>
c0009ebe:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0009ec5:	0f 85 58 01 00 00    	jne    c000a023 <kernel_main+0x2a6>
c0009ecb:	83 ec 0c             	sub    esp,0xc
c0009ece:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009ed2:	56                   	push   esi
c0009ed3:	e8 28 2b 00 00       	call   c000ca00 <VAS::VAS()>
c0009ed8:	83 c4 10             	add    esp,0x10
c0009edb:	89 35 d4 74 02 c0    	mov    DWORD PTR ds:0xc00274d4,esi
c0009ee1:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0009ee8:	0f 85 fd 00 00 00    	jne    c0009feb <kernel_main+0x26e>
c0009eee:	e8 2d 61 ff ff       	call   c0000020 <callGlobalConstructors>
c0009ef3:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0009efa:	0f 85 b3 00 00 00    	jne    c0009fb3 <kernel_main+0x236>
c0009f00:	83 ec 0c             	sub    esp,0xc
c0009f03:	68 ec 01 00 00       	push   0x1ec
c0009f08:	e8 aa fd ff ff       	call   c0009cb7 <malloc>
c0009f0d:	89 c3                	mov    ebx,eax
c0009f0f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009f12:	e8 a1 ec ff ff       	call   c0008bb8 <Computer::Computer()>
c0009f17:	83 c4 10             	add    esp,0x10
c0009f1a:	89 1d a8 73 02 c0    	mov    DWORD PTR ds:0xc00273a8,ebx
c0009f20:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0009f27:	75 53                	jne    c0009f7c <kernel_main+0x1ff>
c0009f29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009f2b:	6a 00                	push   0x0
c0009f2d:	6a 00                	push   0x0
c0009f2f:	6a 00                	push   0x0
c0009f31:	53                   	push   ebx
c0009f32:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009f35:	89 34 24             	mov    DWORD PTR [esp],esi
c0009f38:	e8 1b 22 00 00       	call   c000c158 <VAS::~VAS()>
c0009f3d:	83 c4 30             	add    esp,0x30
c0009f40:	5b                   	pop    ebx
c0009f41:	5e                   	pop    esi
c0009f42:	5f                   	pop    edi
c0009f43:	c3                   	ret    
c0009f44:	83 ec 0c             	sub    esp,0xc
c0009f47:	68 83 35 02 c0       	push   0xc0023583
c0009f4c:	e8 c0 fd ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009f51:	83 c4 10             	add    esp,0x10
c0009f54:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c0009f5b:	0f 85 24 ff ff ff    	jne    c0009e85 <kernel_main+0x108>
c0009f61:	eb 04                	jmp    c0009f67 <kernel_main+0x1ea>
c0009f63:	3c 1c                	cmp    al,0x1c
c0009f65:	74 06                	je     c0009f6d <kernel_main+0x1f0>
c0009f67:	e4 60                	in     al,0x60
c0009f69:	3c 5a                	cmp    al,0x5a
c0009f6b:	75 f6                	jne    c0009f63 <kernel_main+0x1e6>
c0009f6d:	e4 60                	in     al,0x60
c0009f6f:	3c 5a                	cmp    al,0x5a
c0009f71:	74 fa                	je     c0009f6d <kernel_main+0x1f0>
c0009f73:	3c 1c                	cmp    al,0x1c
c0009f75:	74 f6                	je     c0009f6d <kernel_main+0x1f0>
c0009f77:	e9 09 ff ff ff       	jmp    c0009e85 <kernel_main+0x108>
c0009f7c:	83 ec 0c             	sub    esp,0xc
c0009f7f:	68 c2 35 02 c0       	push   0xc00235c2
c0009f84:	e8 88 fd ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009f89:	83 c4 10             	add    esp,0x10
c0009f8c:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c0009f93:	74 0c                	je     c0009fa1 <kernel_main+0x224>
c0009f95:	8b 1d a8 73 02 c0    	mov    ebx,DWORD PTR ds:0xc00273a8
c0009f9b:	eb 8c                	jmp    c0009f29 <kernel_main+0x1ac>
c0009f9d:	3c 1c                	cmp    al,0x1c
c0009f9f:	74 06                	je     c0009fa7 <kernel_main+0x22a>
c0009fa1:	e4 60                	in     al,0x60
c0009fa3:	3c 5a                	cmp    al,0x5a
c0009fa5:	75 f6                	jne    c0009f9d <kernel_main+0x220>
c0009fa7:	e4 60                	in     al,0x60
c0009fa9:	3c 5a                	cmp    al,0x5a
c0009fab:	74 fa                	je     c0009fa7 <kernel_main+0x22a>
c0009fad:	3c 1c                	cmp    al,0x1c
c0009faf:	74 f6                	je     c0009fa7 <kernel_main+0x22a>
c0009fb1:	eb e2                	jmp    c0009f95 <kernel_main+0x218>
c0009fb3:	83 ec 0c             	sub    esp,0xc
c0009fb6:	68 af 35 02 c0       	push   0xc00235af
c0009fbb:	e8 51 fd ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009fc0:	83 c4 10             	add    esp,0x10
c0009fc3:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c0009fca:	0f 85 30 ff ff ff    	jne    c0009f00 <kernel_main+0x183>
c0009fd0:	eb 04                	jmp    c0009fd6 <kernel_main+0x259>
c0009fd2:	3c 1c                	cmp    al,0x1c
c0009fd4:	74 06                	je     c0009fdc <kernel_main+0x25f>
c0009fd6:	e4 60                	in     al,0x60
c0009fd8:	3c 5a                	cmp    al,0x5a
c0009fda:	75 f6                	jne    c0009fd2 <kernel_main+0x255>
c0009fdc:	e4 60                	in     al,0x60
c0009fde:	3c 5a                	cmp    al,0x5a
c0009fe0:	74 fa                	je     c0009fdc <kernel_main+0x25f>
c0009fe2:	3c 1c                	cmp    al,0x1c
c0009fe4:	74 f6                	je     c0009fdc <kernel_main+0x25f>
c0009fe6:	e9 15 ff ff ff       	jmp    c0009f00 <kernel_main+0x183>
c0009feb:	83 ec 0c             	sub    esp,0xc
c0009fee:	68 a5 35 02 c0       	push   0xc00235a5
c0009ff3:	e8 19 fd ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0009ff8:	83 c4 10             	add    esp,0x10
c0009ffb:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c000a002:	0f 85 e6 fe ff ff    	jne    c0009eee <kernel_main+0x171>
c000a008:	eb 04                	jmp    c000a00e <kernel_main+0x291>
c000a00a:	3c 1c                	cmp    al,0x1c
c000a00c:	74 06                	je     c000a014 <kernel_main+0x297>
c000a00e:	e4 60                	in     al,0x60
c000a010:	3c 5a                	cmp    al,0x5a
c000a012:	75 f6                	jne    c000a00a <kernel_main+0x28d>
c000a014:	e4 60                	in     al,0x60
c000a016:	3c 5a                	cmp    al,0x5a
c000a018:	74 fa                	je     c000a014 <kernel_main+0x297>
c000a01a:	3c 1c                	cmp    al,0x1c
c000a01c:	74 f6                	je     c000a014 <kernel_main+0x297>
c000a01e:	e9 cb fe ff ff       	jmp    c0009eee <kernel_main+0x171>
c000a023:	83 ec 0c             	sub    esp,0xc
c000a026:	68 9a 35 02 c0       	push   0xc002359a
c000a02b:	e8 e1 fc ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a030:	83 c4 10             	add    esp,0x10
c000a033:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c000a03a:	0f 85 8b fe ff ff    	jne    c0009ecb <kernel_main+0x14e>
c000a040:	eb 04                	jmp    c000a046 <kernel_main+0x2c9>
c000a042:	3c 1c                	cmp    al,0x1c
c000a044:	74 06                	je     c000a04c <kernel_main+0x2cf>
c000a046:	e4 60                	in     al,0x60
c000a048:	3c 5a                	cmp    al,0x5a
c000a04a:	75 f6                	jne    c000a042 <kernel_main+0x2c5>
c000a04c:	e4 60                	in     al,0x60
c000a04e:	3c 5a                	cmp    al,0x5a
c000a050:	74 fa                	je     c000a04c <kernel_main+0x2cf>
c000a052:	3c 1c                	cmp    al,0x1c
c000a054:	74 f6                	je     c000a04c <kernel_main+0x2cf>
c000a056:	e9 70 fe ff ff       	jmp    c0009ecb <kernel_main+0x14e>
c000a05b:	83 ec 0c             	sub    esp,0xc
c000a05e:	68 8f 35 02 c0       	push   0xc002358f
c000a063:	e8 a9 fc ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a068:	83 c4 10             	add    esp,0x10
c000a06b:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c000a072:	0f 85 41 fe ff ff    	jne    c0009eb9 <kernel_main+0x13c>
c000a078:	eb 04                	jmp    c000a07e <kernel_main+0x301>
c000a07a:	3c 1c                	cmp    al,0x1c
c000a07c:	74 06                	je     c000a084 <kernel_main+0x307>
c000a07e:	e4 60                	in     al,0x60
c000a080:	3c 5a                	cmp    al,0x5a
c000a082:	75 f6                	jne    c000a07a <kernel_main+0x2fd>
c000a084:	e4 60                	in     al,0x60
c000a086:	3c 5a                	cmp    al,0x5a
c000a088:	74 fa                	je     c000a084 <kernel_main+0x307>
c000a08a:	3c 1c                	cmp    al,0x1c
c000a08c:	74 f6                	je     c000a084 <kernel_main+0x307>
c000a08e:	e9 26 fe ff ff       	jmp    c0009eb9 <kernel_main+0x13c>
c000a093:	83 ec 0c             	sub    esp,0xc
c000a096:	68 71 35 02 c0       	push   0xc0023571
c000a09b:	e8 71 fc ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a0a0:	8b 15 c0 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273c0
c000a0a6:	83 c4 10             	add    esp,0x10
c000a0a9:	f6 c2 80             	test   dl,0x80
c000a0ac:	74 18                	je     c000a0c6 <kernel_main+0x349>
c000a0ae:	0f b6 05 20 66 02 c0 	movzx  eax,BYTE PTR ds:0xc0026620
c000a0b5:	84 c0                	test   al,al
c000a0b7:	0f 85 4d fd ff ff    	jne    c0009e0a <kernel_main+0x8d>
c000a0bd:	e9 ba fd ff ff       	jmp    c0009e7c <kernel_main+0xff>
c000a0c2:	3c 1c                	cmp    al,0x1c
c000a0c4:	74 06                	je     c000a0cc <kernel_main+0x34f>
c000a0c6:	e4 60                	in     al,0x60
c000a0c8:	3c 5a                	cmp    al,0x5a
c000a0ca:	75 f6                	jne    c000a0c2 <kernel_main+0x345>
c000a0cc:	e4 60                	in     al,0x60
c000a0ce:	3c 5a                	cmp    al,0x5a
c000a0d0:	74 fa                	je     c000a0cc <kernel_main+0x34f>
c000a0d2:	3c 1c                	cmp    al,0x1c
c000a0d4:	74 f6                	je     c000a0cc <kernel_main+0x34f>
c000a0d6:	eb d6                	jmp    c000a0ae <kernel_main+0x331>
c000a0d8:	83 ec 0c             	sub    esp,0xc
c000a0db:	68 62 35 02 c0       	push   0xc0023562
c000a0e0:	e8 2c fc ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a0e5:	83 c4 10             	add    esp,0x10
c000a0e8:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c000a0ef:	0f 85 f8 fc ff ff    	jne    c0009ded <kernel_main+0x70>
c000a0f5:	eb 04                	jmp    c000a0fb <kernel_main+0x37e>
c000a0f7:	3c 1c                	cmp    al,0x1c
c000a0f9:	74 06                	je     c000a101 <kernel_main+0x384>
c000a0fb:	e4 60                	in     al,0x60
c000a0fd:	3c 5a                	cmp    al,0x5a
c000a0ff:	75 f6                	jne    c000a0f7 <kernel_main+0x37a>
c000a101:	e4 60                	in     al,0x60
c000a103:	3c 5a                	cmp    al,0x5a
c000a105:	74 fa                	je     c000a101 <kernel_main+0x384>
c000a107:	3c 1c                	cmp    al,0x1c
c000a109:	74 f6                	je     c000a101 <kernel_main+0x384>
c000a10b:	e9 dd fc ff ff       	jmp    c0009ded <kernel_main+0x70>
c000a110:	83 ec 0c             	sub    esp,0xc
c000a113:	68 4f 35 02 c0       	push   0xc002354f
c000a118:	e8 f4 fb ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c000a11d:	83 c4 10             	add    esp,0x10
c000a120:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c000a127:	0f 85 69 fc ff ff    	jne    c0009d96 <kernel_main+0x19>
c000a12d:	eb 04                	jmp    c000a133 <kernel_main+0x3b6>
c000a12f:	3c 1c                	cmp    al,0x1c
c000a131:	74 06                	je     c000a139 <kernel_main+0x3bc>
c000a133:	e4 60                	in     al,0x60
c000a135:	3c 5a                	cmp    al,0x5a
c000a137:	75 f6                	jne    c000a12f <kernel_main+0x3b2>
c000a139:	e4 60                	in     al,0x60
c000a13b:	3c 5a                	cmp    al,0x5a
c000a13d:	74 fa                	je     c000a139 <kernel_main+0x3bc>
c000a13f:	3c 1c                	cmp    al,0x1c
c000a141:	74 f6                	je     c000a139 <kernel_main+0x3bc>
c000a143:	e9 4e fc ff ff       	jmp    c0009d96 <kernel_main+0x19>

c000a148 <Phys::allocateDMA(unsigned long)>:
c000a148:	55                   	push   ebp
c000a149:	31 ed                	xor    ebp,ebp
c000a14b:	57                   	push   edi
c000a14c:	56                   	push   esi
c000a14d:	53                   	push   ebx
c000a14e:	31 db                	xor    ebx,ebx
c000a150:	83 ec 28             	sub    esp,0x28
c000a153:	68 f3 35 02 c0       	push   0xc00235f3
c000a158:	e8 68 2e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a15d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a161:	83 c4 10             	add    esp,0x10
c000a164:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000a16a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000a172:	c1 ef 0c             	shr    edi,0xc
c000a175:	31 c0                	xor    eax,eax
c000a177:	eb 19                	jmp    c000a192 <Phys::allocateDMA(unsigned long)+0x4a>
c000a179:	85 c0                	test   eax,eax
c000a17b:	75 06                	jne    c000a183 <Phys::allocateDMA(unsigned long)+0x3b>
c000a17d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a181:	89 dd                	mov    ebp,ebx
c000a183:	8d 70 01             	lea    esi,[eax+0x1]
c000a186:	39 f7                	cmp    edi,esi
c000a188:	74 3f                	je     c000a1c9 <Phys::allocateDMA(unsigned long)+0x81>
c000a18a:	89 f0                	mov    eax,esi
c000a18c:	43                   	inc    ebx
c000a18d:	83 fb 0f             	cmp    ebx,0xf
c000a190:	7f 11                	jg     c000a1a3 <Phys::allocateDMA(unsigned long)+0x5b>
c000a192:	80 bb dc 73 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd8c24],0x0
c000a199:	74 de                	je     c000a179 <Phys::allocateDMA(unsigned long)+0x31>
c000a19b:	31 c0                	xor    eax,eax
c000a19d:	43                   	inc    ebx
c000a19e:	83 fb 0f             	cmp    ebx,0xf
c000a1a1:	7e ef                	jle    c000a192 <Phys::allocateDMA(unsigned long)+0x4a>
c000a1a3:	83 ec 0c             	sub    esp,0xc
c000a1a6:	68 23 36 02 c0       	push   0xc0023623
c000a1ab:	e8 15 2e 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a1b0:	c7 04 24 e0 36 02 c0 	mov    DWORD PTR [esp],0xc00236e0
c000a1b7:	e8 4b 9c 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000a1bc:	83 c4 10             	add    esp,0x10
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	83 c4 1c             	add    esp,0x1c
c000a1c4:	5b                   	pop    ebx
c000a1c5:	5e                   	pop    esi
c000a1c6:	5f                   	pop    edi
c000a1c7:	5d                   	pop    ebp
c000a1c8:	c3                   	ret    
c000a1c9:	89 e9                	mov    ecx,ebp
c000a1cb:	c1 f9 04             	sar    ecx,0x4
c000a1ce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a1d2:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000a1d6:	89 ca                	mov    edx,ecx
c000a1d8:	4a                   	dec    edx
c000a1d9:	79 03                	jns    c000a1de <Phys::allocateDMA(unsigned long)+0x96>
c000a1db:	8d 51 0e             	lea    edx,[ecx+0xe]
c000a1de:	c1 fa 04             	sar    edx,0x4
c000a1e1:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000a1e5:	74 08                	je     c000a1ef <Phys::allocateDMA(unsigned long)+0xa7>
c000a1e7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1eb:	31 c0                	xor    eax,eax
c000a1ed:	eb ae                	jmp    c000a19d <Phys::allocateDMA(unsigned long)+0x55>
c000a1ef:	85 f6                	test   esi,esi
c000a1f1:	74 15                	je     c000a208 <Phys::allocateDMA(unsigned long)+0xc0>
c000a1f3:	8d 95 dc 73 02 c0    	lea    edx,[ebp-0x3ffd8c24]
c000a1f9:	8d 84 05 dd 73 02 c0 	lea    eax,[ebp+eax*1-0x3ffd8c23]
c000a200:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000a203:	42                   	inc    edx
c000a204:	39 d0                	cmp    eax,edx
c000a206:	75 f8                	jne    c000a200 <Phys::allocateDMA(unsigned long)+0xb8>
c000a208:	83 ec 0c             	sub    esp,0xc
c000a20b:	01 3d d4 73 02 c0    	add    DWORD PTR ds:0xc00273d4,edi
c000a211:	68 0c 36 02 c0       	push   0xc002360c
c000a216:	e8 aa 2d 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a21b:	83 c4 10             	add    esp,0x10
c000a21e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a222:	85 c0                	test   eax,eax
c000a224:	74 23                	je     c000a249 <Phys::allocateDMA(unsigned long)+0x101>
c000a226:	83 ec 0c             	sub    esp,0xc
c000a229:	68 c0 64 02 c0       	push   0xc00264c0
c000a22e:	e8 92 2d 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a233:	c7 04 24 e0 36 02 c0 	mov    DWORD PTR [esp],0xc00236e0
c000a23a:	e8 c8 9b 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000a23f:	83 c4 10             	add    esp,0x10
c000a242:	89 f0                	mov    eax,esi
c000a244:	e9 43 ff ff ff       	jmp    c000a18c <Phys::allocateDMA(unsigned long)+0x44>
c000a249:	c1 e5 0c             	shl    ebp,0xc
c000a24c:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000a252:	e9 6a ff ff ff       	jmp    c000a1c1 <Phys::allocateDMA(unsigned long)+0x79>

c000a257 <Phys::freeDMA(unsigned long, unsigned long)>:
c000a257:	83 ec 18             	sub    esp,0x18
c000a25a:	68 27 36 02 c0       	push   0xc0023627
c000a25f:	e8 61 2d 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a264:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a268:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000a26e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a272:	c1 ea 0c             	shr    edx,0xc
c000a275:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000a27a:	29 15 d4 73 02 c0    	sub    DWORD PTR ds:0xc00273d4,edx
c000a280:	c1 e8 0c             	shr    eax,0xc
c000a283:	83 c4 10             	add    esp,0x10
c000a286:	85 d2                	test   edx,edx
c000a288:	74 0f                	je     c000a299 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c000a28a:	05 dc 73 02 c0       	add    eax,0xc00273dc
c000a28f:	01 c2                	add    edx,eax
c000a291:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000a294:	40                   	inc    eax
c000a295:	39 d0                	cmp    eax,edx
c000a297:	75 f8                	jne    c000a291 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000a299:	83 c4 0c             	add    esp,0xc
c000a29c:	c3                   	ret    

c000a29d <Phys::setPageState(unsigned long, bool)>:
c000a29d:	56                   	push   esi
c000a29e:	ba 01 00 00 00       	mov    edx,0x1
c000a2a3:	53                   	push   ebx
c000a2a4:	8b 35 64 67 02 c0    	mov    esi,DWORD PTR ds:0xc0026764
c000a2aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a2ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a2b2:	89 c8                	mov    eax,ecx
c000a2b4:	83 e1 07             	and    ecx,0x7
c000a2b7:	c1 e8 03             	shr    eax,0x3
c000a2ba:	d3 e3                	shl    ebx,cl
c000a2bc:	01 c6                	add    esi,eax
c000a2be:	d3 e2                	shl    edx,cl
c000a2c0:	f7 d2                	not    edx
c000a2c2:	20 16                	and    BYTE PTR [esi],dl
c000a2c4:	03 05 64 67 02 c0    	add    eax,DWORD PTR ds:0xc0026764
c000a2ca:	08 18                	or     BYTE PTR [eax],bl
c000a2cc:	5b                   	pop    ebx
c000a2cd:	5e                   	pop    esi
c000a2ce:	c3                   	ret    

c000a2cf <Phys::getPageState(unsigned long)>:
c000a2cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a2d3:	8b 15 64 67 02 c0    	mov    edx,DWORD PTR ds:0xc0026764
c000a2d9:	89 c8                	mov    eax,ecx
c000a2db:	83 e1 07             	and    ecx,0x7
c000a2de:	c1 e8 03             	shr    eax,0x3
c000a2e1:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a2e5:	d3 f8                	sar    eax,cl
c000a2e7:	83 e0 01             	and    eax,0x1
c000a2ea:	c3                   	ret    

c000a2eb <Phys::freePage(unsigned long)>:
c000a2eb:	53                   	push   ebx
c000a2ec:	83 ec 10             	sub    esp,0x10
c000a2ef:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a2f3:	53                   	push   ebx
c000a2f4:	68 3d 36 02 c0       	push   0xc002363d
c000a2f9:	e8 c7 2c 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a2fe:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	3d ff ff 00 00       	cmp    eax,0xffff
c000a30c:	76 3d                	jbe    c000a34b <Phys::freePage(unsigned long)+0x60>
c000a30e:	83 ec 0c             	sub    esp,0xc
c000a311:	c1 eb 0c             	shr    ebx,0xc
c000a314:	53                   	push   ebx
c000a315:	e8 b5 ff ff ff       	call   c000a2cf <Phys::getPageState(unsigned long)>
c000a31a:	83 c4 10             	add    esp,0x10
c000a31d:	84 c0                	test   al,al
c000a31f:	74 19                	je     c000a33a <Phys::freePage(unsigned long)+0x4f>
c000a321:	83 ec 08             	sub    esp,0x8
c000a324:	ff 0d d4 73 02 c0    	dec    DWORD PTR ds:0xc00273d4
c000a32a:	6a 00                	push   0x0
c000a32c:	53                   	push   ebx
c000a32d:	e8 6b ff ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	83 c4 08             	add    esp,0x8
c000a338:	5b                   	pop    ebx
c000a339:	c3                   	ret    
c000a33a:	c7 44 24 10 67 36 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023667
c000a342:	83 c4 08             	add    esp,0x8
c000a345:	5b                   	pop    ebx
c000a346:	e9 bc 9a 00 00       	jmp    c0013e07 <Krnl::panic(char const*)>
c000a34b:	83 ec 08             	sub    esp,0x8
c000a34e:	53                   	push   ebx
c000a34f:	68 50 36 02 c0       	push   0xc0023650
c000a354:	e8 6c 2c 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a359:	58                   	pop    eax
c000a35a:	5a                   	pop    edx
c000a35b:	68 00 10 00 00       	push   0x1000
c000a360:	53                   	push   ebx
c000a361:	e8 f1 fe ff ff       	call   c000a257 <Phys::freeDMA(unsigned long, unsigned long)>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	83 c4 08             	add    esp,0x8
c000a36c:	5b                   	pop    ebx
c000a36d:	c3                   	ret    

c000a36e <Phys::allocatePage()>:
c000a36e:	56                   	push   esi
c000a36f:	53                   	push   ebx
c000a370:	83 ec 14             	sub    esp,0x14
c000a373:	8b 35 c8 73 02 c0    	mov    esi,DWORD PTR ds:0xc00273c8
c000a379:	89 f3                	mov    ebx,esi
c000a37b:	eb 0a                	jmp    c000a387 <Phys::allocatePage()+0x19>
c000a37d:	89 1d c8 73 02 c0    	mov    DWORD PTR ds:0xc00273c8,ebx
c000a383:	39 de                	cmp    esi,ebx
c000a385:	74 24                	je     c000a3ab <Phys::allocatePage()+0x3d>
c000a387:	53                   	push   ebx
c000a388:	e8 42 ff ff ff       	call   c000a2cf <Phys::getPageState(unsigned long)>
c000a38d:	5a                   	pop    edx
c000a38e:	84 c0                	test   al,al
c000a390:	74 69                	je     c000a3fb <Phys::allocatePage()+0x8d>
c000a392:	43                   	inc    ebx
c000a393:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a399:	75 e2                	jne    c000a37d <Phys::allocatePage()+0xf>
c000a39b:	31 db                	xor    ebx,ebx
c000a39d:	c7 05 c8 73 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00273c8,0x0
c000a3a7:	39 de                	cmp    esi,ebx
c000a3a9:	75 dc                	jne    c000a387 <Phys::allocatePage()+0x19>
c000a3ab:	83 ec 0c             	sub    esp,0xc
c000a3ae:	80 35 ec 73 02 c0 01 	xor    BYTE PTR ds:0xc00273ec,0x1
c000a3b5:	68 08 37 02 c0       	push   0xc0023708
c000a3ba:	e8 06 2c 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a3bf:	58                   	pop    eax
c000a3c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a3c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a3c8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a3ce:	e8 81 28 00 00       	call   c000cc54 <VAS::scanForEviction()>
c000a3d3:	83 c4 10             	add    esp,0x10
c000a3d6:	85 c0                	test   eax,eax
c000a3d8:	75 62                	jne    c000a43c <Phys::allocatePage()+0xce>
c000a3da:	83 ec 0c             	sub    esp,0xc
c000a3dd:	68 2c 37 02 c0       	push   0xc002372c
c000a3e2:	e8 20 9a 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000a3e7:	83 c4 10             	add    esp,0x10
c000a3ea:	8b 1d c8 73 02 c0    	mov    ebx,DWORD PTR ds:0xc00273c8
c000a3f0:	53                   	push   ebx
c000a3f1:	e8 d9 fe ff ff       	call   c000a2cf <Phys::getPageState(unsigned long)>
c000a3f6:	5a                   	pop    edx
c000a3f7:	84 c0                	test   al,al
c000a3f9:	75 97                	jne    c000a392 <Phys::allocatePage()+0x24>
c000a3fb:	6a 01                	push   0x1
c000a3fd:	53                   	push   ebx
c000a3fe:	e8 9a fe ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a403:	5a                   	pop    edx
c000a404:	a1 d4 73 02 c0       	mov    eax,ds:0xc00273d4
c000a409:	59                   	pop    ecx
c000a40a:	40                   	inc    eax
c000a40b:	8b 15 c8 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273c8
c000a411:	a3 d4 73 02 c0       	mov    ds:0xc00273d4,eax
c000a416:	c1 e2 0c             	shl    edx,0xc
c000a419:	52                   	push   edx
c000a41a:	ff 35 d8 73 02 c0    	push   DWORD PTR ds:0xc00273d8
c000a420:	50                   	push   eax
c000a421:	68 7d 36 02 c0       	push   0xc002367d
c000a426:	e8 9a 2b 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a42b:	a1 c8 73 02 c0       	mov    eax,ds:0xc00273c8
c000a430:	83 c4 10             	add    esp,0x10
c000a433:	c1 e0 0c             	shl    eax,0xc
c000a436:	83 c4 14             	add    esp,0x14
c000a439:	5b                   	pop    ebx
c000a43a:	5e                   	pop    esi
c000a43b:	c3                   	ret    
c000a43c:	83 ec 08             	sub    esp,0x8
c000a43f:	89 c2                	mov    edx,eax
c000a441:	6a 01                	push   0x1
c000a443:	c1 ea 0c             	shr    edx,0xc
c000a446:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a44a:	52                   	push   edx
c000a44b:	e8 4d fe ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a450:	83 c4 10             	add    esp,0x10
c000a453:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a457:	eb dd                	jmp    c000a436 <Phys::allocatePage()+0xc8>

c000a459 <Phys::allocateContiguousPages(int)>:
c000a459:	57                   	push   edi
c000a45a:	56                   	push   esi
c000a45b:	53                   	push   ebx
c000a45c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a460:	fa                   	cli    
c000a461:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c000a467:	31 db                	xor    ebx,ebx
c000a469:	85 db                	test   ebx,ebx
c000a46b:	75 11                	jne    c000a47e <Phys::allocateContiguousPages(int)+0x25>
c000a46d:	e8 fc fe ff ff       	call   c000a36e <Phys::allocatePage()>
c000a472:	83 fe 01             	cmp    esi,0x1
c000a475:	89 c7                	mov    edi,eax
c000a477:	74 21                	je     c000a49a <Phys::allocateContiguousPages(int)+0x41>
c000a479:	bb 01 00 00 00       	mov    ebx,0x1
c000a47e:	e8 eb fe ff ff       	call   c000a36e <Phys::allocatePage()>
c000a483:	89 da                	mov    edx,ebx
c000a485:	c1 e2 0c             	shl    edx,0xc
c000a488:	01 fa                	add    edx,edi
c000a48a:	39 c2                	cmp    edx,eax
c000a48c:	74 20                	je     c000a4ae <Phys::allocateContiguousPages(int)+0x55>
c000a48e:	bb 01 00 00 00       	mov    ebx,0x1
c000a493:	89 c7                	mov    edi,eax
c000a495:	83 fe 01             	cmp    esi,0x1
c000a498:	75 e4                	jne    c000a47e <Phys::allocateContiguousPages(int)+0x25>
c000a49a:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000a49f:	48                   	dec    eax
c000a4a0:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000a4a5:	75 01                	jne    c000a4a8 <Phys::allocateContiguousPages(int)+0x4f>
c000a4a7:	fb                   	sti    
c000a4a8:	89 f8                	mov    eax,edi
c000a4aa:	5b                   	pop    ebx
c000a4ab:	5e                   	pop    esi
c000a4ac:	5f                   	pop    edi
c000a4ad:	c3                   	ret    
c000a4ae:	43                   	inc    ebx
c000a4af:	39 f3                	cmp    ebx,esi
c000a4b1:	75 b6                	jne    c000a469 <Phys::allocateContiguousPages(int)+0x10>
c000a4b3:	eb e5                	jmp    c000a49a <Phys::allocateContiguousPages(int)+0x41>

c000a4b5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a4b5:	56                   	push   esi
c000a4b6:	53                   	push   ebx
c000a4b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a4bb:	39 1d cc 73 02 c0    	cmp    DWORD PTR ds:0xc00273cc,ebx
c000a4c1:	73 06                	jae    c000a4c9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a4c3:	89 1d cc 73 02 c0    	mov    DWORD PTR ds:0xc00273cc,ebx
c000a4c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a4cd:	c1 eb 0c             	shr    ebx,0xc
c000a4d0:	c1 e8 0c             	shr    eax,0xc
c000a4d3:	39 d8                	cmp    eax,ebx
c000a4d5:	73 13                	jae    c000a4ea <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a4d7:	6a 00                	push   0x0
c000a4d9:	8d 70 01             	lea    esi,[eax+0x1]
c000a4dc:	50                   	push   eax
c000a4dd:	e8 bb fd ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a4e2:	5a                   	pop    edx
c000a4e3:	89 f0                	mov    eax,esi
c000a4e5:	59                   	pop    ecx
c000a4e6:	39 f3                	cmp    ebx,esi
c000a4e8:	75 ed                	jne    c000a4d7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a4ea:	5b                   	pop    ebx
c000a4eb:	5e                   	pop    esi
c000a4ec:	c3                   	ret    

c000a4ed <Phys::physicalMemorySetup(unsigned int)>:
c000a4ed:	55                   	push   ebp
c000a4ee:	57                   	push   edi
c000a4ef:	56                   	push   esi
c000a4f0:	53                   	push   ebx
c000a4f1:	31 db                	xor    ebx,ebx
c000a4f3:	83 ec 40             	sub    esp,0x40
c000a4f6:	6a 10                	push   0x10
c000a4f8:	6a 00                	push   0x0
c000a4fa:	68 dc 73 02 c0       	push   0xc00273dc
c000a4ff:	e8 78 61 ff ff       	call   c000067c <memset>
c000a504:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a508:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a50d:	05 00 10 00 00       	add    eax,0x1000
c000a512:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a516:	5a                   	pop    edx
c000a517:	59                   	pop    ecx
c000a518:	50                   	push   eax
c000a519:	68 9b 36 02 c0       	push   0xc002369b
c000a51e:	e8 a2 2a 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a523:	83 c4 10             	add    esp,0x10
c000a526:	83 ec 08             	sub    esp,0x8
c000a529:	6a 01                	push   0x1
c000a52b:	53                   	push   ebx
c000a52c:	43                   	inc    ebx
c000a52d:	e8 6b fd ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a53b:	75 e9                	jne    c000a526 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a53d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a544:	66 85 c0             	test   ax,ax
c000a547:	0f 84 8e 01 00 00    	je     c000a6db <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a54d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a551:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a559:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a55d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a562:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a566:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a56e:	eb 15                	jmp    c000a585 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a570:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a574:	83 c3 18             	add    ebx,0x18
c000a577:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a57b:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a57f:	0f 84 66 01 00 00    	je     c000a6eb <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a585:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a588:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a58b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a58e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a592:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a596:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a598:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a59b:	01 f0                	add    eax,esi
c000a59d:	55                   	push   ebp
c000a59e:	11 fa                	adc    edx,edi
c000a5a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5a4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a5a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a5ac:	56                   	push   esi
c000a5ad:	68 5c 37 02 c0       	push   0xc002375c
c000a5b2:	e8 0e 2a 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a5b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5bb:	83 c4 10             	add    esp,0x10
c000a5be:	09 f8                	or     eax,edi
c000a5c0:	0f 85 25 01 00 00    	jne    c000a6eb <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a5c6:	4d                   	dec    ebp
c000a5c7:	75 a7                	jne    c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a5c9:	ba 00 00 08 00       	mov    edx,0x80000
c000a5ce:	89 c1                	mov    ecx,eax
c000a5d0:	39 f2                	cmp    edx,esi
c000a5d2:	19 f9                	sbb    ecx,edi
c000a5d4:	0f 82 a7 00 00 00    	jb     c000a681 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a5da:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a5de:	89 c1                	mov    ecx,eax
c000a5e0:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a5e4:	0f 83 97 00 00 00    	jae    c000a681 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a5ea:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a5ef:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a5f3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a5f7:	39 fa                	cmp    edx,edi
c000a5f9:	19 e8                	sbb    eax,ebp
c000a5fb:	0f 82 9a 01 00 00    	jb     c000a79b <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c000a601:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a605:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a609:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a60f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a614:	83 d5 ff             	adc    ebp,0xffffffff
c000a617:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a61b:	31 c0                	xor    eax,eax
c000a61d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a621:	39 fa                	cmp    edx,edi
c000a623:	89 c1                	mov    ecx,eax
c000a625:	19 e9                	sbb    ecx,ebp
c000a627:	0f 83 43 ff ff ff    	jae    c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a62d:	be 00 00 08 00       	mov    esi,0x80000
c000a632:	51                   	push   ecx
c000a633:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a637:	57                   	push   edi
c000a638:	56                   	push   esi
c000a639:	68 80 37 02 c0       	push   0xc0023780
c000a63e:	e8 82 29 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a643:	5d                   	pop    ebp
c000a644:	58                   	pop    eax
c000a645:	57                   	push   edi
c000a646:	56                   	push   esi
c000a647:	e8 69 fe ff ff       	call   c000a4b5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a64c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a650:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a654:	83 c4 0c             	add    esp,0xc
c000a657:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a65b:	03 05 d8 73 02 c0    	add    eax,DWORD PTR ds:0xc00273d8
c000a661:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a668:	a3 d8 73 02 c0       	mov    ds:0xc00273d8,eax
c000a66d:	52                   	push   edx
c000a66e:	50                   	push   eax
c000a66f:	68 c1 36 02 c0       	push   0xc00236c1
c000a674:	e8 4c 29 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000a679:	83 c4 10             	add    esp,0x10
c000a67c:	e9 ef fe ff ff       	jmp    c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a681:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a685:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a689:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a68d:	39 ea                	cmp    edx,ebp
c000a68f:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a693:	0f 82 d7 fe ff ff    	jb     c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a699:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a69e:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a6a2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a6a6:	0f 83 c4 fe ff ff    	jae    c000a570 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a6ac:	39 ee                	cmp    esi,ebp
c000a6ae:	89 f8                	mov    eax,edi
c000a6b0:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a6b4:	0f 83 78 ff ff ff    	jae    c000a632 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a6ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a6be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a6c2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a6c6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a6ca:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a6d6:	e9 57 ff ff ff       	jmp    c000a632 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a6db:	83 ec 0c             	sub    esp,0xc
c000a6de:	68 b3 36 02 c0       	push   0xc00236b3
c000a6e3:	e8 1f 97 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000a6e8:	83 c4 10             	add    esp,0x10
c000a6eb:	83 ec 08             	sub    esp,0x8
c000a6ee:	bb 60 00 00 00       	mov    ebx,0x60
c000a6f3:	6a 00                	push   0x0
c000a6f5:	6a 06                	push   0x6
c000a6f7:	e8 a1 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a6fc:	58                   	pop    eax
c000a6fd:	5a                   	pop    edx
c000a6fe:	6a 00                	push   0x0
c000a700:	6a 07                	push   0x7
c000a702:	e8 96 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a707:	83 05 d8 73 02 c0 02 	add    DWORD PTR ds:0xc00273d8,0x2
c000a70e:	83 c4 10             	add    esp,0x10
c000a711:	83 ec 08             	sub    esp,0x8
c000a714:	6a 00                	push   0x0
c000a716:	53                   	push   ebx
c000a717:	43                   	inc    ebx
c000a718:	e8 80 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a71d:	83 c4 10             	add    esp,0x10
c000a720:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a726:	75 e9                	jne    c000a711 <Phys::physicalMemorySetup(unsigned int)+0x224>
c000a728:	a1 d8 73 02 c0       	mov    eax,ds:0xc00273d8
c000a72d:	bb 40 01 00 00       	mov    ebx,0x140
c000a732:	83 c0 20             	add    eax,0x20
c000a735:	a3 d8 73 02 c0       	mov    ds:0xc00273d8,eax
c000a73a:	eb 22                	jmp    c000a75e <Phys::physicalMemorySetup(unsigned int)+0x271>
c000a73c:	83 ec 08             	sub    esp,0x8
c000a73f:	6a 00                	push   0x0
c000a741:	53                   	push   ebx
c000a742:	43                   	inc    ebx
c000a743:	e8 55 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a748:	a1 d8 73 02 c0       	mov    eax,ds:0xc00273d8
c000a74d:	83 c4 10             	add    esp,0x10
c000a750:	40                   	inc    eax
c000a751:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a757:	a3 d8 73 02 c0       	mov    ds:0xc00273d8,eax
c000a75c:	74 07                	je     c000a765 <Phys::physicalMemorySetup(unsigned int)+0x278>
c000a75e:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a763:	7e d7                	jle    c000a73c <Phys::physicalMemorySetup(unsigned int)+0x24f>
c000a765:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a76a:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a76f:	7f 22                	jg     c000a793 <Phys::physicalMemorySetup(unsigned int)+0x2a6>
c000a771:	83 ec 08             	sub    esp,0x8
c000a774:	6a 00                	push   0x0
c000a776:	53                   	push   ebx
c000a777:	43                   	inc    ebx
c000a778:	e8 20 fb ff ff       	call   c000a29d <Phys::setPageState(unsigned long, bool)>
c000a77d:	a1 d8 73 02 c0       	mov    eax,ds:0xc00273d8
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	40                   	inc    eax
c000a786:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a78c:	a3 d8 73 02 c0       	mov    ds:0xc00273d8,eax
c000a791:	75 d7                	jne    c000a76a <Phys::physicalMemorySetup(unsigned int)+0x27d>
c000a793:	83 c4 3c             	add    esp,0x3c
c000a796:	5b                   	pop    ebx
c000a797:	5e                   	pop    esi
c000a798:	5f                   	pop    edi
c000a799:	5d                   	pop    ebp
c000a79a:	c3                   	ret    
c000a79b:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a7a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a7ab:	e9 51 fe ff ff       	jmp    c000a601 <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a7b0 <Pipe::isAtty()>:
c000a7b0:	31 c0                	xor    eax,eax
c000a7b2:	c3                   	ret    
c000a7b3:	90                   	nop

c000a7b4 <Pipe::~Pipe()>:
c000a7b4:	83 ec 0c             	sub    esp,0xc
c000a7b7:	ba ec 37 02 c0       	mov    edx,0xc00237ec
c000a7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c0:	89 10                	mov    DWORD PTR [eax],edx
c000a7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c6:	83 ec 0c             	sub    esp,0xc
c000a7c9:	50                   	push   eax
c000a7ca:	e8 39 12 00 00       	call   c000ba08 <UnixFile::~UnixFile()>
c000a7cf:	83 c4 10             	add    esp,0x10
c000a7d2:	90                   	nop
c000a7d3:	83 c4 0c             	add    esp,0xc
c000a7d6:	c3                   	ret    
c000a7d7:	90                   	nop

c000a7d8 <Pipe::~Pipe()>:
c000a7d8:	83 ec 0c             	sub    esp,0xc
c000a7db:	83 ec 0c             	sub    esp,0xc
c000a7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e2:	e8 cd ff ff ff       	call   c000a7b4 <Pipe::~Pipe()>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	83 ec 08             	sub    esp,0x8
c000a7ed:	6a 20                	push   0x20
c000a7ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7f3:	e8 ec 26 00 00       	call   c000cee4 <operator delete(void*, unsigned long)>
c000a7f8:	83 c4 10             	add    esp,0x10
c000a7fb:	83 c4 0c             	add    esp,0xc
c000a7fe:	c3                   	ret    
c000a7ff:	90                   	nop

c000a800 <Pipe::write(unsigned long long, void*, int*)>:
c000a800:	55                   	push   ebp
c000a801:	57                   	push   edi
c000a802:	56                   	push   esi
c000a803:	53                   	push   ebx
c000a804:	83 ec 1c             	sub    esp,0x1c
c000a807:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a80b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a80f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a812:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a816:	89 04 24             	mov    DWORD PTR [esp],eax
c000a819:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a81d:	89 d8                	mov    eax,ebx
c000a81f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a822:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a826:	89 d6                	mov    esi,edx
c000a828:	89 d7                	mov    edi,edx
c000a82a:	c1 ff 1f             	sar    edi,0x1f
c000a82d:	03 34 24             	add    esi,DWORD PTR [esp]
c000a830:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a834:	c1 f8 1f             	sar    eax,0x1f
c000a837:	39 f3                	cmp    ebx,esi
c000a839:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a83d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a841:	19 f8                	sbb    eax,edi
c000a843:	b8 01 00 00 00       	mov    eax,0x1
c000a848:	72 6e                	jb     c000a8b8 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a84a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a84d:	01 d0                	add    eax,edx
c000a84f:	99                   	cdq    
c000a850:	f7 fb                	idiv   ebx
c000a852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a856:	29 d3                	sub    ebx,edx
c000a858:	89 d7                	mov    edi,edx
c000a85a:	89 de                	mov    esi,ebx
c000a85c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a85f:	c1 fb 1f             	sar    ebx,0x1f
c000a862:	39 f2                	cmp    edx,esi
c000a864:	19 d8                	sbb    eax,ebx
c000a866:	b8 00 00 00 00       	mov    eax,0x0
c000a86b:	72 04                	jb     c000a871 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a86d:	89 d0                	mov    eax,edx
c000a86f:	29 f0                	sub    eax,esi
c000a871:	89 d3                	mov    ebx,edx
c000a873:	29 c3                	sub    ebx,eax
c000a875:	74 0b                	je     c000a882 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a877:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a87a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a87e:	89 d9                	mov    ecx,ebx
c000a880:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a882:	85 c0                	test   eax,eax
c000a884:	74 0d                	je     c000a893 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a886:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a88a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a88d:	89 de                	mov    esi,ebx
c000a88f:	89 c1                	mov    ecx,eax
c000a891:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a893:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a896:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a89b:	75 10                	jne    c000a8ad <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a89d:	83 ec 0c             	sub    esp,0xc
c000a8a0:	68 a9 37 02 c0       	push   0xc00237a9
c000a8a5:	e8 5d 95 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000a8aa:	83 c4 10             	add    esp,0x10
c000a8ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a8b1:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a8b4:	89 08                	mov    DWORD PTR [eax],ecx
c000a8b6:	31 c0                	xor    eax,eax
c000a8b8:	83 c4 1c             	add    esp,0x1c
c000a8bb:	5b                   	pop    ebx
c000a8bc:	5e                   	pop    esi
c000a8bd:	5f                   	pop    edi
c000a8be:	5d                   	pop    ebp
c000a8bf:	c3                   	ret    

c000a8c0 <Pipe::read(unsigned long long, void*, int*)>:
c000a8c0:	55                   	push   ebp
c000a8c1:	57                   	push   edi
c000a8c2:	56                   	push   esi
c000a8c3:	53                   	push   ebx
c000a8c4:	83 ec 1c             	sub    esp,0x1c
c000a8c7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a8cb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a8cf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a8d3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8d6:	89 c8                	mov    eax,ecx
c000a8d8:	99                   	cdq    
c000a8d9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a8dd:	74 24                	je     c000a903 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8df:	39 f9                	cmp    ecx,edi
c000a8e1:	89 d1                	mov    ecx,edx
c000a8e3:	19 f1                	sbb    ecx,esi
c000a8e5:	73 1c                	jae    c000a903 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a8e7:	fa                   	cli    
c000a8e8:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c000a8ee:	e8 79 cb 00 00       	call   c001746c <schedule()>
c000a8f3:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000a8f8:	48                   	dec    eax
c000a8f9:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000a8fe:	75 d3                	jne    c000a8d3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a900:	fb                   	sti    
c000a901:	eb d0                	jmp    c000a8d3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a903:	39 f8                	cmp    eax,edi
c000a905:	89 d1                	mov    ecx,edx
c000a907:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a90a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a90e:	19 f1                	sbb    ecx,esi
c000a910:	73 07                	jae    c000a919 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a912:	89 04 24             	mov    DWORD PTR [esp],eax
c000a915:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a919:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a91c:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a91f:	29 f7                	sub    edi,esi
c000a921:	89 f8                	mov    eax,edi
c000a923:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a927:	99                   	cdq    
c000a928:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a92b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a92f:	19 d0                	sbb    eax,edx
c000a931:	73 07                	jae    c000a93a <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a933:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a936:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a93a:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a93d:	89 ea                	mov    edx,ebp
c000a93f:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a943:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a948:	74 0d                	je     c000a957 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a94a:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a94d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a951:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a955:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a957:	85 d2                	test   edx,edx
c000a959:	74 11                	je     c000a96c <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a95b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a95f:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a962:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a966:	89 d1                	mov    ecx,edx
c000a968:	89 c7                	mov    edi,eax
c000a96a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a96c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a96f:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a972:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a975:	99                   	cdq    
c000a976:	89 f7                	mov    edi,esi
c000a978:	03 04 24             	add    eax,DWORD PTR [esp]
c000a97b:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a97f:	c1 ff 1f             	sar    edi,0x1f
c000a982:	57                   	push   edi
c000a983:	56                   	push   esi
c000a984:	52                   	push   edx
c000a985:	50                   	push   eax
c000a986:	e8 45 75 01 00       	call   c0021ed0 <__umoddi3>
c000a98b:	83 c4 10             	add    esp,0x10
c000a98e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a991:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a996:	75 10                	jne    c000a9a8 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a998:	83 ec 0c             	sub    esp,0xc
c000a99b:	68 c6 37 02 c0       	push   0xc00237c6
c000a9a0:	e8 62 94 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a9ac:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a9af:	89 10                	mov    DWORD PTR [eax],edx
c000a9b1:	83 c4 1c             	add    esp,0x1c
c000a9b4:	31 c0                	xor    eax,eax
c000a9b6:	5b                   	pop    ebx
c000a9b7:	5e                   	pop    esi
c000a9b8:	5f                   	pop    edi
c000a9b9:	5d                   	pop    ebp
c000a9ba:	c3                   	ret    
c000a9bb:	90                   	nop

c000a9bc <Pipe::Pipe(int)>:
c000a9bc:	83 ec 0c             	sub    esp,0xc
c000a9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9c3:	83 ec 08             	sub    esp,0x8
c000a9c6:	6a 00                	push   0x0
c000a9c8:	50                   	push   eax
c000a9c9:	e8 58 0e 00 00       	call   c000b826 <UnixFile::UnixFile(int)>
c000a9ce:	83 c4 10             	add    esp,0x10
c000a9d1:	ba ec 37 02 c0       	mov    edx,0xc00237ec
c000a9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9da:	89 10                	mov    DWORD PTR [eax],edx
c000a9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a9e4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9eb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9f6:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a9fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa01:	83 ec 0c             	sub    esp,0xc
c000aa04:	50                   	push   eax
c000aa05:	e8 ad f2 ff ff       	call   c0009cb7 <malloc>
c000aa0a:	83 c4 10             	add    esp,0x10
c000aa0d:	89 c2                	mov    edx,eax
c000aa0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa13:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000aa16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa1a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000aa1e:	90                   	nop
c000aa1f:	83 c4 0c             	add    esp,0xc
c000aa22:	c3                   	ret    
c000aa23:	90                   	nop

c000aa24 <VgaText::isAtty()>:
c000aa24:	b0 01                	mov    al,0x1
c000aa26:	c3                   	ret    
c000aa27:	90                   	nop

c000aa28 <VgaText::~VgaText()>:
c000aa28:	83 ec 0c             	sub    esp,0xc
c000aa2b:	ba 74 38 02 c0       	mov    edx,0xc0023874
c000aa30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa34:	89 10                	mov    DWORD PTR [eax],edx
c000aa36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa3a:	83 ec 0c             	sub    esp,0xc
c000aa3d:	50                   	push   eax
c000aa3e:	e8 c5 0f 00 00       	call   c000ba08 <UnixFile::~UnixFile()>
c000aa43:	83 c4 10             	add    esp,0x10
c000aa46:	90                   	nop
c000aa47:	83 c4 0c             	add    esp,0xc
c000aa4a:	c3                   	ret    
c000aa4b:	90                   	nop

c000aa4c <VgaText::~VgaText()>:
c000aa4c:	83 ec 0c             	sub    esp,0xc
c000aa4f:	83 ec 0c             	sub    esp,0xc
c000aa52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa56:	e8 cd ff ff ff       	call   c000aa28 <VgaText::~VgaText()>
c000aa5b:	83 c4 10             	add    esp,0x10
c000aa5e:	83 ec 08             	sub    esp,0x8
c000aa61:	68 b4 01 00 00       	push   0x1b4
c000aa66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa6a:	e8 75 24 00 00       	call   c000cee4 <operator delete(void*, unsigned long)>
c000aa6f:	83 c4 10             	add    esp,0x10
c000aa72:	83 c4 0c             	add    esp,0xc
c000aa75:	c3                   	ret    

c000aa76 <VgaText::read(unsigned long long, void*, int*)>:
c000aa76:	83 ec 10             	sub    esp,0x10
c000aa79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aa7d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aa81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa85:	e8 17 48 00 00       	call   c000f2a1 <readKeyboard(VgaText*, char*, unsigned long)>
c000aa8a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000aa8e:	89 02                	mov    DWORD PTR [edx],eax
c000aa90:	31 c0                	xor    eax,eax
c000aa92:	83 c4 1c             	add    esp,0x1c
c000aa95:	c3                   	ret    

c000aa96 <setTerminalScrollLock(bool)>:
c000aa96:	c3                   	ret    

c000aa97 <addToTerminalCycle(VgaText*)>:
c000aa97:	8b 15 20 74 02 c0    	mov    edx,DWORD PTR ds:0xc0027420
c000aa9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaa1:	85 d2                	test   edx,edx
c000aaa3:	75 09                	jne    c000aaae <addToTerminalCycle(VgaText*)+0x17>
c000aaa5:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000aaa8:	a3 20 74 02 c0       	mov    ds:0xc0027420,eax
c000aaad:	c3                   	ret    
c000aaae:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000aab1:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000aab4:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000aab7:	c3                   	ret    

c000aab8 <installVgaTextImplementation()>:
c000aab8:	83 ec 10             	sub    esp,0x10
c000aabb:	6a 20                	push   0x20
c000aabd:	6a 00                	push   0x0
c000aabf:	68 00 74 02 c0       	push   0xc0027400
c000aac4:	e8 b3 5b ff ff       	call   c000067c <memset>
c000aac9:	83 c4 1c             	add    esp,0x1c
c000aacc:	c3                   	ret    

c000aacd <scrollTerminalScrollLock(int)>:
c000aacd:	c3                   	ret    

c000aace <VgaText::updateTitle()>:
c000aace:	53                   	push   ebx
c000aacf:	31 c0                	xor    eax,eax
c000aad1:	83 ec 58             	sub    esp,0x58
c000aad4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000aad8:	89 e1                	mov    ecx,esp
c000aada:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000aade:	40                   	inc    eax
c000aadf:	83 f8 50             	cmp    eax,0x50
c000aae2:	75 f6                	jne    c000aada <VgaText::updateTitle()+0xc>
c000aae4:	31 c0                	xor    eax,eax
c000aae6:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000aaed:	84 db                	test   bl,bl
c000aaef:	74 06                	je     c000aaf7 <VgaText::updateTitle()+0x29>
c000aaf1:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000aaf4:	40                   	inc    eax
c000aaf5:	eb ef                	jmp    c000aae6 <VgaText::updateTitle()+0x18>
c000aaf7:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000aafa:	85 c0                	test   eax,eax
c000aafc:	74 09                	je     c000ab07 <VgaText::updateTitle()+0x39>
c000aafe:	53                   	push   ebx
c000aaff:	53                   	push   ebx
c000ab00:	51                   	push   ecx
c000ab01:	52                   	push   edx
c000ab02:	ff d0                	call   eax
c000ab04:	83 c4 10             	add    esp,0x10
c000ab07:	83 c4 58             	add    esp,0x58
c000ab0a:	5b                   	pop    ebx
c000ab0b:	c3                   	ret    

c000ab0c <VgaText::load()>:
c000ab0c:	53                   	push   ebx
c000ab0d:	31 c0                	xor    eax,eax
c000ab0f:	83 ec 58             	sub    esp,0x58
c000ab12:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab16:	89 e2                	mov    edx,esp
c000ab18:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000ab1c:	40                   	inc    eax
c000ab1d:	83 f8 50             	cmp    eax,0x50
c000ab20:	75 f6                	jne    c000ab18 <VgaText::load()+0xc>
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000ab2b:	84 c9                	test   cl,cl
c000ab2d:	74 06                	je     c000ab35 <VgaText::load()+0x29>
c000ab2f:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ab32:	40                   	inc    eax
c000ab33:	eb ef                	jmp    c000ab24 <VgaText::load()+0x18>
c000ab35:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000ab38:	85 c0                	test   eax,eax
c000ab3a:	74 09                	je     c000ab45 <VgaText::load()+0x39>
c000ab3c:	51                   	push   ecx
c000ab3d:	51                   	push   ecx
c000ab3e:	52                   	push   edx
c000ab3f:	53                   	push   ebx
c000ab40:	ff d0                	call   eax
c000ab42:	83 c4 10             	add    esp,0x10
c000ab45:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000ab48:	85 c0                	test   eax,eax
c000ab4a:	74 09                	je     c000ab55 <VgaText::load()+0x49>
c000ab4c:	83 ec 0c             	sub    esp,0xc
c000ab4f:	53                   	push   ebx
c000ab50:	ff d0                	call   eax
c000ab52:	83 c4 10             	add    esp,0x10
c000ab55:	83 c4 58             	add    esp,0x58
c000ab58:	5b                   	pop    ebx
c000ab59:	c3                   	ret    

c000ab5a <VgaText::updateCursor()>:
c000ab5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab5e:	39 05 24 74 02 c0    	cmp    DWORD PTR ds:0xc0027424,eax
c000ab64:	75 09                	jne    c000ab6f <VgaText::updateCursor()+0x15>
c000ab66:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000ab69:	85 c0                	test   eax,eax
c000ab6b:	74 02                	je     c000ab6f <VgaText::updateCursor()+0x15>
c000ab6d:	ff e0                	jmp    eax
c000ab6f:	c3                   	ret    

c000ab70 <VgaText::doANSI_SGR(int)>:
c000ab70:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ab74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ab78:	85 d2                	test   edx,edx
c000ab7a:	75 0b                	jne    c000ab87 <VgaText::doANSI_SGR(int)+0x17>
c000ab7c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000ab7f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ab82:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ab85:	eb 59                	jmp    c000abe0 <VgaText::doANSI_SGR(int)+0x70>
c000ab87:	83 fa 07             	cmp    edx,0x7
c000ab8a:	75 0b                	jne    c000ab97 <VgaText::doANSI_SGR(int)+0x27>
c000ab8c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000ab8f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000ab92:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000ab95:	eb 49                	jmp    c000abe0 <VgaText::doANSI_SGR(int)+0x70>
c000ab97:	83 fa 1b             	cmp    edx,0x1b
c000ab9a:	74 e0                	je     c000ab7c <VgaText::doANSI_SGR(int)+0xc>
c000ab9c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000ab9f:	83 f9 07             	cmp    ecx,0x7
c000aba2:	77 09                	ja     c000abad <VgaText::doANSI_SGR(int)+0x3d>
c000aba4:	8b 14 8d a0 67 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9860]
c000abab:	eb 20                	jmp    c000abcd <VgaText::doANSI_SGR(int)+0x5d>
c000abad:	8d 4a d8             	lea    ecx,[edx-0x28]
c000abb0:	83 f9 07             	cmp    ecx,0x7
c000abb3:	77 09                	ja     c000abbe <VgaText::doANSI_SGR(int)+0x4e>
c000abb5:	8b 14 8d a0 67 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9860]
c000abbc:	eb 22                	jmp    c000abe0 <VgaText::doANSI_SGR(int)+0x70>
c000abbe:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000abc1:	83 f9 07             	cmp    ecx,0x7
c000abc4:	77 0b                	ja     c000abd1 <VgaText::doANSI_SGR(int)+0x61>
c000abc6:	8b 14 95 58 66 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd99a8]
c000abcd:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000abd0:	c3                   	ret    
c000abd1:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000abd4:	83 f9 07             	cmp    ecx,0x7
c000abd7:	77 0a                	ja     c000abe3 <VgaText::doANSI_SGR(int)+0x73>
c000abd9:	8b 14 95 30 66 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd99d0]
c000abe0:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000abe3:	c3                   	ret    

c000abe4 <VgaText::setDefaultBgColour(VgaColour)>:
c000abe4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abe8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abec:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000abef:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000abf2:	c3                   	ret    
c000abf3:	90                   	nop

c000abf4 <VgaText::setDefaultFgColour(VgaColour)>:
c000abf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000abf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000abfc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000abff:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000ac02:	c3                   	ret    
c000ac03:	90                   	nop

c000ac04 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ac04:	53                   	push   ebx
c000ac05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac09:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ac0d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ac11:	51                   	push   ecx
c000ac12:	e8 cd ff ff ff       	call   c000abe4 <VgaText::setDefaultBgColour(VgaColour)>
c000ac17:	58                   	pop    eax
c000ac18:	5a                   	pop    edx
c000ac19:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ac1d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac21:	5b                   	pop    ebx
c000ac22:	eb d0                	jmp    c000abf4 <VgaText::setDefaultFgColour(VgaColour)>

c000ac24 <VgaText::setTitleTextColour(VgaColour)>:
c000ac24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac2c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000ac2f:	e9 9a fe ff ff       	jmp    c000aace <VgaText::updateTitle()>

c000ac34 <VgaText::setTitleColour(VgaColour)>:
c000ac34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ac38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ac3c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ac3f:	e9 8a fe ff ff       	jmp    c000aace <VgaText::updateTitle()>

c000ac44 <VgaText::setTitle(char*)>:
c000ac44:	53                   	push   ebx
c000ac45:	83 ec 10             	sub    esp,0x10
c000ac48:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ac4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac50:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000ac56:	50                   	push   eax
c000ac57:	e8 dc 5a ff ff       	call   c0000738 <strcpy>
c000ac5c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ac60:	83 c4 18             	add    esp,0x18
c000ac63:	5b                   	pop    ebx
c000ac64:	e9 65 fe ff ff       	jmp    c000aace <VgaText::updateTitle()>
c000ac69:	90                   	nop

c000ac6a <VgaText::combineColours(unsigned char, unsigned char)>:
c000ac6a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ac6e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ac73:	83 e0 0f             	and    eax,0xf
c000ac76:	c1 e2 04             	shl    edx,0x4
c000ac79:	09 d0                	or     eax,edx
c000ac7b:	c3                   	ret    

c000ac7c <VgaText::scrollScreen()>:
c000ac7c:	55                   	push   ebp
c000ac7d:	b9 01 00 00 00       	mov    ecx,0x1
c000ac82:	57                   	push   edi
c000ac83:	56                   	push   esi
c000ac84:	53                   	push   ebx
c000ac85:	83 ec 0c             	sub    esp,0xc
c000ac88:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ac8c:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000ac92:	31 ff                	xor    edi,edi
c000ac94:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ac97:	83 f9 17             	cmp    ecx,0x17
c000ac9a:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000ac9d:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000aca4:	75 27                	jne    c000accd <VgaText::scrollScreen()+0x51>
c000aca6:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000aca9:	01 f5                	add    ebp,esi
c000acab:	f7 c7 01 00 00 00    	test   edi,0x1
c000acb1:	74 16                	je     c000acc9 <VgaText::scrollScreen()+0x4d>
c000acb3:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000acb7:	50                   	push   eax
c000acb8:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000acbc:	50                   	push   eax
c000acbd:	e8 a8 ff ff ff       	call   c000ac6a <VgaText::combineColours(unsigned char, unsigned char)>
c000acc2:	5a                   	pop    edx
c000acc3:	5a                   	pop    edx
c000acc4:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000acc7:	eb 04                	jmp    c000accd <VgaText::scrollScreen()+0x51>
c000acc9:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000accd:	47                   	inc    edi
c000acce:	46                   	inc    esi
c000accf:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000acd5:	75 bd                	jne    c000ac94 <VgaText::scrollScreen()+0x18>
c000acd7:	41                   	inc    ecx
c000acd8:	83 f9 18             	cmp    ecx,0x18
c000acdb:	75 af                	jne    c000ac8c <VgaText::scrollScreen()+0x10>
c000acdd:	39 1d 24 74 02 c0    	cmp    DWORD PTR ds:0xc0027424,ebx
c000ace3:	75 1b                	jne    c000ad00 <VgaText::scrollScreen()+0x84>
c000ace5:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ace9:	74 05                	je     c000acf0 <VgaText::scrollScreen()+0x74>
c000aceb:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000acee:	eb 10                	jmp    c000ad00 <VgaText::scrollScreen()+0x84>
c000acf0:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000acf3:	85 c0                	test   eax,eax
c000acf5:	74 09                	je     c000ad00 <VgaText::scrollScreen()+0x84>
c000acf7:	83 ec 0c             	sub    esp,0xc
c000acfa:	53                   	push   ebx
c000acfb:	ff d0                	call   eax
c000acfd:	83 c4 10             	add    esp,0x10
c000ad00:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000ad04:	83 c4 0c             	add    esp,0xc
c000ad07:	5b                   	pop    ebx
c000ad08:	5e                   	pop    esi
c000ad09:	5f                   	pop    edi
c000ad0a:	5d                   	pop    ebp
c000ad0b:	e9 4a fe ff ff       	jmp    c000ab5a <VgaText::updateCursor()>

c000ad10 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ad10:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ad15:	c1 e0 08             	shl    eax,0x8
c000ad18:	89 c2                	mov    edx,eax
c000ad1a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ad1f:	09 d0                	or     eax,edx
c000ad21:	c3                   	ret    

c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ad22:	56                   	push   esi
c000ad23:	53                   	push   ebx
c000ad24:	51                   	push   ecx
c000ad25:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad29:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ad2e:	50                   	push   eax
c000ad2f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ad34:	50                   	push   eax
c000ad35:	e8 30 ff ff ff       	call   c000ac6a <VgaText::combineColours(unsigned char, unsigned char)>
c000ad3a:	5b                   	pop    ebx
c000ad3b:	0f b6 c0             	movzx  eax,al
c000ad3e:	5e                   	pop    esi
c000ad3f:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ad44:	50                   	push   eax
c000ad45:	53                   	push   ebx
c000ad46:	e8 c5 ff ff ff       	call   c000ad10 <VgaText::combineCharAndColour(char, unsigned char)>
c000ad4b:	5a                   	pop    edx
c000ad4c:	5e                   	pop    esi
c000ad4d:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000ad50:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ad56:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ad5a:	0f b7 d2             	movzx  edx,dx
c000ad5d:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000ad61:	39 0d 24 74 02 c0    	cmp    DWORD PTR ds:0xc0027424,ecx
c000ad67:	75 10                	jne    c000ad79 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ad69:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000ad6c:	85 c0                	test   eax,eax
c000ad6e:	74 09                	je     c000ad79 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000ad70:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ad74:	5a                   	pop    edx
c000ad75:	5b                   	pop    ebx
c000ad76:	5e                   	pop    esi
c000ad77:	ff e0                	jmp    eax
c000ad79:	58                   	pop    eax
c000ad7a:	5b                   	pop    ebx
c000ad7b:	5e                   	pop    esi
c000ad7c:	c3                   	ret    
c000ad7d:	90                   	nop

c000ad7e <VgaText::getCursorX()>:
c000ad7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad82:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000ad85:	c3                   	ret    

c000ad86 <VgaText::getCursorY()>:
c000ad86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad8a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000ad8d:	c3                   	ret    

c000ad8e <VgaText::setCursor(int, int)>:
c000ad8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ad96:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000ad99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ad9d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ada0:	e9 b5 fd ff ff       	jmp    c000ab5a <VgaText::updateCursor()>

c000ada5 <setActiveTerminal(VgaText*)>:
c000ada5:	53                   	push   ebx
c000ada6:	83 ec 08             	sub    esp,0x8
c000ada9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000adad:	85 db                	test   ebx,ebx
c000adaf:	75 11                	jne    c000adc2 <setActiveTerminal(VgaText*)+0x1d>
c000adb1:	c7 44 24 10 00 38 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023800
c000adb9:	83 c4 08             	add    esp,0x8
c000adbc:	5b                   	pop    ebx
c000adbd:	e9 45 90 00 00       	jmp    c0013e07 <Krnl::panic(char const*)>
c000adc2:	a1 24 74 02 c0       	mov    eax,ds:0xc0027424
c000adc7:	85 c0                	test   eax,eax
c000adc9:	74 0c                	je     c000add7 <setActiveTerminal(VgaText*)+0x32>
c000adcb:	83 ec 0c             	sub    esp,0xc
c000adce:	50                   	push   eax
c000adcf:	e8 86 fd ff ff       	call   c000ab5a <VgaText::updateCursor()>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	89 1d 24 74 02 c0    	mov    DWORD PTR ds:0xc0027424,ebx
c000addd:	51                   	push   ecx
c000adde:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ade1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ade4:	53                   	push   ebx
c000ade5:	e8 a4 ff ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000adea:	83 c4 10             	add    esp,0x10
c000aded:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000adf1:	75 07                	jne    c000adfa <setActiveTerminal(VgaText*)+0x55>
c000adf3:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000adfa:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000adfe:	83 c4 08             	add    esp,0x8
c000ae01:	5b                   	pop    ebx
c000ae02:	e9 05 fd ff ff       	jmp    c000ab0c <VgaText::load()>

c000ae07 <doTerminalCycle()>:
c000ae07:	83 ec 18             	sub    esp,0x18
c000ae0a:	a1 20 74 02 c0       	mov    eax,ds:0xc0027420
c000ae0f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ae12:	50                   	push   eax
c000ae13:	a3 20 74 02 c0       	mov    ds:0xc0027420,eax
c000ae18:	e8 88 ff ff ff       	call   c000ada5 <setActiveTerminal(VgaText*)>
c000ae1d:	83 c4 1c             	add    esp,0x1c
c000ae20:	c3                   	ret    
c000ae21:	90                   	nop

c000ae22 <VgaText::setCursorX(int)>:
c000ae22:	83 ec 10             	sub    esp,0x10
c000ae25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae29:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000ae2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae30:	50                   	push   eax
c000ae31:	e8 58 ff ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000ae36:	83 c4 1c             	add    esp,0x1c
c000ae39:	c3                   	ret    

c000ae3a <VgaText::setCursorY(int)>:
c000ae3a:	83 ec 10             	sub    esp,0x10
c000ae3d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae45:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000ae48:	50                   	push   eax
c000ae49:	e8 40 ff ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000ae4e:	83 c4 1c             	add    esp,0x1c
c000ae51:	c3                   	ret    

c000ae52 <VgaText::incrementCursor(bool)>:
c000ae52:	56                   	push   esi
c000ae53:	53                   	push   ebx
c000ae54:	51                   	push   ecx
c000ae55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae59:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ae5d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ae60:	40                   	inc    eax
c000ae61:	83 f8 50             	cmp    eax,0x50
c000ae64:	74 05                	je     c000ae6b <VgaText::incrementCursor(bool)+0x19>
c000ae66:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ae69:	eb 24                	jmp    c000ae8f <VgaText::incrementCursor(bool)+0x3d>
c000ae6b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ae6e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ae75:	8d 50 01             	lea    edx,[eax+0x1]
c000ae78:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ae7b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ae7e:	75 0f                	jne    c000ae8f <VgaText::incrementCursor(bool)+0x3d>
c000ae80:	83 ec 0c             	sub    esp,0xc
c000ae83:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ae86:	53                   	push   ebx
c000ae87:	e8 f0 fd ff ff       	call   c000ac7c <VgaText::scrollScreen()>
c000ae8c:	83 c4 10             	add    esp,0x10
c000ae8f:	89 f0                	mov    eax,esi
c000ae91:	84 c0                	test   al,al
c000ae93:	74 0c                	je     c000aea1 <VgaText::incrementCursor(bool)+0x4f>
c000ae95:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ae99:	5a                   	pop    edx
c000ae9a:	5b                   	pop    ebx
c000ae9b:	5e                   	pop    esi
c000ae9c:	e9 b9 fc ff ff       	jmp    c000ab5a <VgaText::updateCursor()>
c000aea1:	58                   	pop    eax
c000aea2:	5b                   	pop    ebx
c000aea3:	5e                   	pop    esi
c000aea4:	c3                   	ret    
c000aea5:	90                   	nop

c000aea6 <VgaText::decrementCursor(bool)>:
c000aea6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aeaa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000aeae:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000aeb1:	85 c0                	test   eax,eax
c000aeb3:	74 04                	je     c000aeb9 <VgaText::decrementCursor(bool)+0x13>
c000aeb5:	48                   	dec    eax
c000aeb6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000aeb9:	84 c9                	test   cl,cl
c000aebb:	74 09                	je     c000aec6 <VgaText::decrementCursor(bool)+0x20>
c000aebd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aec1:	e9 94 fc ff ff       	jmp    c000ab5a <VgaText::updateCursor()>
c000aec6:	c3                   	ret    
c000aec7:	90                   	nop

c000aec8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000aec8:	53                   	push   ebx
c000aec9:	83 ec 08             	sub    esp,0x8
c000aecc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aed0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aed4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aed8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000aedc:	3c 07                	cmp    al,0x7
c000aede:	75 21                	jne    c000af01 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000aee0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000aee8:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000aef0:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000aef8:	83 c4 08             	add    esp,0x8
c000aefb:	5b                   	pop    ebx
c000aefc:	e9 5e 2f 00 00       	jmp    c000de5f <Krnl::beep(int, int, bool)>
c000af01:	3c 0d                	cmp    al,0xd
c000af03:	75 09                	jne    c000af0e <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c000af05:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af0c:	eb 2c                	jmp    c000af3a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000af0e:	3c 0a                	cmp    al,0xa
c000af10:	75 31                	jne    c000af43 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000af12:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000af15:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000af1c:	8d 50 01             	lea    edx,[eax+0x1]
c000af1f:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000af22:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000af25:	75 0f                	jne    c000af36 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000af27:	83 ec 0c             	sub    esp,0xc
c000af2a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000af2d:	53                   	push   ebx
c000af2e:	e8 49 fd ff ff       	call   c000ac7c <VgaText::scrollScreen()>
c000af33:	83 c4 10             	add    esp,0x10
c000af36:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000af3a:	83 c4 08             	add    esp,0x8
c000af3d:	5b                   	pop    ebx
c000af3e:	e9 17 fc ff ff       	jmp    c000ab5a <VgaText::updateCursor()>
c000af43:	3c 08                	cmp    al,0x8
c000af45:	75 25                	jne    c000af6c <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000af47:	50                   	push   eax
c000af48:	50                   	push   eax
c000af49:	6a 01                	push   0x1
c000af4b:	53                   	push   ebx
c000af4c:	e8 55 ff ff ff       	call   c000aea6 <VgaText::decrementCursor(bool)>
c000af51:	5a                   	pop    edx
c000af52:	59                   	pop    ecx
c000af53:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000af56:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000af59:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000af5c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000af5f:	6a 20                	push   0x20
c000af61:	53                   	push   ebx
c000af62:	e8 bb fd ff ff       	call   c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000af67:	83 c4 28             	add    esp,0x28
c000af6a:	5b                   	pop    ebx
c000af6b:	c3                   	ret    
c000af6c:	83 ec 08             	sub    esp,0x8
c000af6f:	0f be c0             	movsx  eax,al
c000af72:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000af75:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000af78:	51                   	push   ecx
c000af79:	52                   	push   edx
c000af7a:	50                   	push   eax
c000af7b:	53                   	push   ebx
c000af7c:	e8 a1 fd ff ff       	call   c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000af81:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000af85:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000af8d:	83 c4 28             	add    esp,0x28
c000af90:	5b                   	pop    ebx
c000af91:	e9 bc fe ff ff       	jmp    c000ae52 <VgaText::incrementCursor(bool)>

c000af96 <VgaText::doUpdate()>:
c000af96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af9a:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000af9d:	85 c0                	test   eax,eax
c000af9f:	74 02                	je     c000afa3 <VgaText::doUpdate()+0xd>
c000afa1:	ff e0                	jmp    eax
c000afa3:	c3                   	ret    

c000afa4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000afa4:	55                   	push   ebp
c000afa5:	31 ed                	xor    ebp,ebp
c000afa7:	57                   	push   edi
c000afa8:	56                   	push   esi
c000afa9:	53                   	push   ebx
c000afaa:	83 ec 1c             	sub    esp,0x1c
c000afad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000afb1:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000afb6:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000afbd:	50                   	push   eax
c000afbe:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000afc3:	50                   	push   eax
c000afc4:	e8 a1 fc ff ff       	call   c000ac6a <VgaText::combineColours(unsigned char, unsigned char)>
c000afc9:	59                   	pop    ecx
c000afca:	0f b6 c0             	movzx  eax,al
c000afcd:	5e                   	pop    esi
c000afce:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000afd3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000afd7:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000afda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000afde:	0f b7 f6             	movzx  esi,si
c000afe1:	01 f6                	add    esi,esi
c000afe3:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000afe6:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000afe9:	84 c0                	test   al,al
c000afeb:	0f 84 fd 00 00 00    	je     c000b0ee <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aff1:	3c 0d                	cmp    al,0xd
c000aff3:	75 0c                	jne    c000b001 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aff5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000affc:	e9 e7 00 00 00       	jmp    c000b0e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b001:	3c 0a                	cmp    al,0xa
c000b003:	75 47                	jne    c000b04c <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000b005:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b008:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b00f:	8d 48 01             	lea    ecx,[eax+0x1]
c000b012:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000b015:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000b018:	75 0f                	jne    c000b029 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000b01a:	83 ec 0c             	sub    esp,0xc
c000b01d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000b020:	53                   	push   ebx
c000b021:	e8 56 fc ff ff       	call   c000ac7c <VgaText::scrollScreen()>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	83 ec 0c             	sub    esp,0xc
c000b02c:	31 ed                	xor    ebp,ebp
c000b02e:	53                   	push   ebx
c000b02f:	e8 26 fb ff ff       	call   c000ab5a <VgaText::updateCursor()>
c000b034:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b039:	83 c4 10             	add    esp,0x10
c000b03c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b03f:	0f b7 f6             	movzx  esi,si
c000b042:	01 f6                	add    esi,esi
c000b044:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b047:	e9 9c 00 00 00       	jmp    c000b0e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b04c:	3c 08                	cmp    al,0x8
c000b04e:	75 35                	jne    c000b085 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000b050:	56                   	push   esi
c000b051:	56                   	push   esi
c000b052:	6a 01                	push   0x1
c000b054:	53                   	push   ebx
c000b055:	e8 4c fe ff ff       	call   c000aea6 <VgaText::decrementCursor(bool)>
c000b05a:	58                   	pop    eax
c000b05b:	5a                   	pop    edx
c000b05c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b05f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b062:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b065:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b068:	6a 20                	push   0x20
c000b06a:	53                   	push   ebx
c000b06b:	e8 b2 fc ff ff       	call   c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b070:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b075:	83 c4 20             	add    esp,0x20
c000b078:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000b07b:	0f b7 f6             	movzx  esi,si
c000b07e:	01 f6                	add    esi,esi
c000b080:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b083:	eb 63                	jmp    c000b0e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000b085:	51                   	push   ecx
c000b086:	51                   	push   ecx
c000b087:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b08b:	50                   	push   eax
c000b08c:	e8 7f fc ff ff       	call   c000ad10 <VgaText::combineCharAndColour(char, unsigned char)>
c000b091:	83 c4 10             	add    esp,0x10
c000b094:	66 89 06             	mov    WORD PTR [esi],ax
c000b097:	39 1d 24 74 02 c0    	cmp    DWORD PTR ds:0xc0027424,ebx
c000b09d:	75 21                	jne    c000b0c0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b09f:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000b0a2:	85 c0                	test   eax,eax
c000b0a4:	74 1a                	je     c000b0c0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000b0a6:	52                   	push   edx
c000b0a7:	52                   	push   edx
c000b0a8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b0ab:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000b0ae:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0b2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b0b6:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000b0b9:	51                   	push   ecx
c000b0ba:	53                   	push   ebx
c000b0bb:	ff d0                	call   eax
c000b0bd:	83 c4 20             	add    esp,0x20
c000b0c0:	83 c6 02             	add    esi,0x2
c000b0c3:	50                   	push   eax
c000b0c4:	50                   	push   eax
c000b0c5:	6a 00                	push   0x0
c000b0c7:	53                   	push   ebx
c000b0c8:	e8 85 fd ff ff       	call   c000ae52 <VgaText::incrementCursor(bool)>
c000b0cd:	83 c4 10             	add    esp,0x10
c000b0d0:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000b0d4:	75 0d                	jne    c000b0e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000b0d6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000b0db:	0f b7 f6             	movzx  esi,si
c000b0de:	01 f6                	add    esi,esi
c000b0e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000b0e3:	bd 01 00 00 00       	mov    ebp,0x1
c000b0e8:	47                   	inc    edi
c000b0e9:	e9 f8 fe ff ff       	jmp    c000afe6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000b0ee:	83 ec 0c             	sub    esp,0xc
c000b0f1:	53                   	push   ebx
c000b0f2:	e8 63 fa ff ff       	call   c000ab5a <VgaText::updateCursor()>
c000b0f7:	83 c4 10             	add    esp,0x10
c000b0fa:	89 e8                	mov    eax,ebp
c000b0fc:	84 c0                	test   al,al
c000b0fe:	74 0c                	je     c000b10c <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000b100:	83 ec 0c             	sub    esp,0xc
c000b103:	53                   	push   ebx
c000b104:	e8 8d fe ff ff       	call   c000af96 <VgaText::doUpdate()>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b113:	83 c4 1c             	add    esp,0x1c
c000b116:	5b                   	pop    ebx
c000b117:	5e                   	pop    esi
c000b118:	5f                   	pop    edi
c000b119:	5d                   	pop    ebp
c000b11a:	c3                   	ret    
c000b11b:	90                   	nop

c000b11c <VgaText::clearScreen()>:
c000b11c:	57                   	push   edi
c000b11d:	56                   	push   esi
c000b11e:	31 f6                	xor    esi,esi
c000b120:	53                   	push   ebx
c000b121:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b125:	52                   	push   edx
c000b126:	6a 00                	push   0x0
c000b128:	6a 00                	push   0x0
c000b12a:	53                   	push   ebx
c000b12b:	e8 5e fc ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000b130:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000b137:	83 c4 10             	add    esp,0x10
c000b13a:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000b13d:	7e 20                	jle    c000b15f <VgaText::clearScreen()+0x43>
c000b13f:	31 ff                	xor    edi,edi
c000b141:	50                   	push   eax
c000b142:	50                   	push   eax
c000b143:	56                   	push   esi
c000b144:	57                   	push   edi
c000b145:	47                   	inc    edi
c000b146:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b149:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b14c:	6a 20                	push   0x20
c000b14e:	53                   	push   ebx
c000b14f:	e8 ce fb ff ff       	call   c000ad22 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000b154:	83 c4 20             	add    esp,0x20
c000b157:	83 ff 50             	cmp    edi,0x50
c000b15a:	75 e5                	jne    c000b141 <VgaText::clearScreen()+0x25>
c000b15c:	46                   	inc    esi
c000b15d:	eb db                	jmp    c000b13a <VgaText::clearScreen()+0x1e>
c000b15f:	83 ec 0c             	sub    esp,0xc
c000b162:	53                   	push   ebx
c000b163:	e8 2e fe ff ff       	call   c000af96 <VgaText::doUpdate()>
c000b168:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000b16f:	83 c4 10             	add    esp,0x10
c000b172:	5b                   	pop    ebx
c000b173:	5e                   	pop    esi
c000b174:	5f                   	pop    edi
c000b175:	c3                   	ret    

c000b176 <VgaText::putchar(char)>:
c000b176:	56                   	push   esi
c000b177:	53                   	push   ebx
c000b178:	83 ec 14             	sub    esp,0x14
c000b17b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b17f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b183:	3c 5b                	cmp    al,0x5b
c000b185:	75 18                	jne    c000b19f <VgaText::putchar(char)+0x29>
c000b187:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000b18b:	74 1f                	je     c000b1ac <VgaText::putchar(char)+0x36>
c000b18d:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000b193:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000b19a:	e9 bd 00 00 00       	jmp    c000b25c <VgaText::putchar(char)+0xe6>
c000b19f:	3c 1b                	cmp    al,0x1b
c000b1a1:	75 09                	jne    c000b1ac <VgaText::putchar(char)+0x36>
c000b1a3:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000b1a7:	e9 b0 00 00 00       	jmp    c000b25c <VgaText::putchar(char)+0xe6>
c000b1ac:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000b1af:	84 c9                	test   cl,cl
c000b1b1:	0f 84 92 00 00 00    	je     c000b249 <VgaText::putchar(char)+0xd3>
c000b1b7:	8d 50 c0             	lea    edx,[eax-0x40]
c000b1ba:	80 fa 3e             	cmp    dl,0x3e
c000b1bd:	77 76                	ja     c000b235 <VgaText::putchar(char)+0xbf>
c000b1bf:	3c 6d                	cmp    al,0x6d
c000b1c1:	75 47                	jne    c000b20a <VgaText::putchar(char)+0x94>
c000b1c3:	31 f6                	xor    esi,esi
c000b1c5:	31 d2                	xor    edx,edx
c000b1c7:	31 c0                	xor    eax,eax
c000b1c9:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000b1cc:	7e 2d                	jle    c000b1fb <VgaText::putchar(char)+0x85>
c000b1ce:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000b1d3:	80 fa 3b             	cmp    dl,0x3b
c000b1d6:	75 17                	jne    c000b1ef <VgaText::putchar(char)+0x79>
c000b1d8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000b1dc:	50                   	push   eax
c000b1dd:	53                   	push   ebx
c000b1de:	e8 8d f9 ff ff       	call   c000ab70 <VgaText::doANSI_SGR(int)>
c000b1e3:	59                   	pop    ecx
c000b1e4:	31 d2                	xor    edx,edx
c000b1e6:	58                   	pop    eax
c000b1e7:	31 c0                	xor    eax,eax
c000b1e9:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000b1ed:	eb 09                	jmp    c000b1f8 <VgaText::putchar(char)+0x82>
c000b1ef:	6b c0 0a             	imul   eax,eax,0xa
c000b1f2:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000b1f6:	88 ca                	mov    dl,cl
c000b1f8:	46                   	inc    esi
c000b1f9:	eb ce                	jmp    c000b1c9 <VgaText::putchar(char)+0x53>
c000b1fb:	84 d2                	test   dl,dl
c000b1fd:	74 2e                	je     c000b22d <VgaText::putchar(char)+0xb7>
c000b1ff:	50                   	push   eax
c000b200:	53                   	push   ebx
c000b201:	e8 6a f9 ff ff       	call   c000ab70 <VgaText::doANSI_SGR(int)>
c000b206:	58                   	pop    eax
c000b207:	5a                   	pop    edx
c000b208:	eb 23                	jmp    c000b22d <VgaText::putchar(char)+0xb7>
c000b20a:	3c 4a                	cmp    al,0x4a
c000b20c:	75 1f                	jne    c000b22d <VgaText::putchar(char)+0xb7>
c000b20e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000b212:	75 19                	jne    c000b22d <VgaText::putchar(char)+0xb7>
c000b214:	83 ec 0c             	sub    esp,0xc
c000b217:	53                   	push   ebx
c000b218:	e8 ff fe ff ff       	call   c000b11c <VgaText::clearScreen()>
c000b21d:	83 c4 0c             	add    esp,0xc
c000b220:	6a 00                	push   0x0
c000b222:	6a 00                	push   0x0
c000b224:	53                   	push   ebx
c000b225:	e8 64 fb ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000b22a:	83 c4 10             	add    esp,0x10
c000b22d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000b233:	eb 27                	jmp    c000b25c <VgaText::putchar(char)+0xe6>
c000b235:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000b238:	83 fa 0e             	cmp    edx,0xe
c000b23b:	7f 1f                	jg     c000b25c <VgaText::putchar(char)+0xe6>
c000b23d:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b240:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000b243:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000b247:	eb 13                	jmp    c000b25c <VgaText::putchar(char)+0xe6>
c000b249:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000b24c:	0f be c0             	movsx  eax,al
c000b24f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000b252:	50                   	push   eax
c000b253:	53                   	push   ebx
c000b254:	e8 6f fc ff ff       	call   c000aec8 <VgaText::putchar(char, VgaColour, VgaColour)>
c000b259:	83 c4 10             	add    esp,0x10
c000b25c:	83 c4 14             	add    esp,0x14
c000b25f:	5b                   	pop    ebx
c000b260:	5e                   	pop    esi
c000b261:	c3                   	ret    

c000b262 <VgaText::putx(unsigned int)>:
c000b262:	57                   	push   edi
c000b263:	b9 11 00 00 00       	mov    ecx,0x11
c000b268:	56                   	push   esi
c000b269:	be 0e 38 02 c0       	mov    esi,0xc002380e
c000b26e:	53                   	push   ebx
c000b26f:	83 ec 20             	sub    esp,0x20
c000b272:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b276:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000b27a:	fc                   	cld    
c000b27b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b27d:	be 08 00 00 00       	mov    esi,0x8
c000b282:	50                   	push   eax
c000b283:	50                   	push   eax
c000b284:	89 d8                	mov    eax,ebx
c000b286:	c1 e3 04             	shl    ebx,0x4
c000b289:	c1 e8 1c             	shr    eax,0x1c
c000b28c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000b291:	50                   	push   eax
c000b292:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b296:	e8 db fe ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b29b:	83 c4 10             	add    esp,0x10
c000b29e:	4e                   	dec    esi
c000b29f:	75 e1                	jne    c000b282 <VgaText::putx(unsigned int)+0x20>
c000b2a1:	83 c4 20             	add    esp,0x20
c000b2a4:	5b                   	pop    ebx
c000b2a5:	5e                   	pop    esi
c000b2a6:	5f                   	pop    edi
c000b2a7:	c3                   	ret    

c000b2a8 <VgaText::puts(char const*)>:
c000b2a8:	53                   	push   ebx
c000b2a9:	83 ec 08             	sub    esp,0x8
c000b2ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b2b0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b2b3:	84 c0                	test   al,al
c000b2b5:	74 12                	je     c000b2c9 <VgaText::puts(char const*)+0x21>
c000b2b7:	43                   	inc    ebx
c000b2b8:	51                   	push   ecx
c000b2b9:	51                   	push   ecx
c000b2ba:	50                   	push   eax
c000b2bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2bf:	e8 b2 fe ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b2c4:	83 c4 10             	add    esp,0x10
c000b2c7:	eb e7                	jmp    c000b2b0 <VgaText::puts(char const*)+0x8>
c000b2c9:	83 c4 08             	add    esp,0x8
c000b2cc:	5b                   	pop    ebx
c000b2cd:	c3                   	ret    

c000b2ce <VgaText::VgaText(char const*)>:
c000b2ce:	57                   	push   edi
c000b2cf:	56                   	push   esi
c000b2d0:	53                   	push   ebx
c000b2d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2d5:	83 ec 08             	sub    esp,0x8
c000b2d8:	6a 00                	push   0x0
c000b2da:	50                   	push   eax
c000b2db:	e8 46 05 00 00       	call   c000b826 <UnixFile::UnixFile(int)>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	ba 74 38 02 c0       	mov    edx,0xc0023874
c000b2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ec:	89 10                	mov    DWORD PTR [eax],edx
c000b2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2f2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b2f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2fd:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b308:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b310:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b318:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b323:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b32e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b339:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b344:	8d 50 60             	lea    edx,[eax+0x60]
c000b347:	bb 00 74 02 c0       	mov    ebx,0xc0027400
c000b34c:	b8 08 00 00 00       	mov    eax,0x8
c000b351:	fc                   	cld    
c000b352:	89 d7                	mov    edi,edx
c000b354:	89 de                	mov    esi,ebx
c000b356:	89 c1                	mov    ecx,eax
c000b358:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b35e:	05 82 00 00 00       	add    eax,0x82
c000b363:	83 ec 08             	sub    esp,0x8
c000b366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b36a:	50                   	push   eax
c000b36b:	e8 c8 53 ff ff       	call   c0000738 <strcpy>
c000b370:	83 c4 10             	add    esp,0x10
c000b373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b377:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b37e:	83 ec 0c             	sub    esp,0xc
c000b381:	6a 01                	push   0x1
c000b383:	e8 e1 08 00 00       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	89 c2                	mov    edx,eax
c000b38d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b391:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b394:	8b 1d d4 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274d4
c000b39a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b39e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b3a1:	89 c6                	mov    esi,eax
c000b3a3:	e8 c6 ef ff ff       	call   c000a36e <Phys::allocatePage()>
c000b3a8:	68 05 0c 00 00       	push   0xc05
c000b3ad:	56                   	push   esi
c000b3ae:	50                   	push   eax
c000b3af:	53                   	push   ebx
c000b3b0:	e8 1f 0f 00 00       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b3b5:	83 c4 10             	add    esp,0x10
c000b3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b3bf:	83 ec 04             	sub    esp,0x4
c000b3c2:	68 00 0f 00 00       	push   0xf00
c000b3c7:	6a 00                	push   0x0
c000b3c9:	50                   	push   eax
c000b3ca:	e8 ad 52 ff ff       	call   c000067c <memset>
c000b3cf:	83 c4 10             	add    esp,0x10
c000b3d2:	83 ec 04             	sub    esp,0x4
c000b3d5:	6a 00                	push   0x0
c000b3d7:	6a 07                	push   0x7
c000b3d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3dd:	e8 22 f8 ff ff       	call   c000ac04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b3e2:	83 c4 10             	add    esp,0x10
c000b3e5:	83 ec 04             	sub    esp,0x4
c000b3e8:	6a 00                	push   0x0
c000b3ea:	6a 00                	push   0x0
c000b3ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f0:	e8 99 f9 ff ff       	call   c000ad8e <VgaText::setCursor(int, int)>
c000b3f5:	83 c4 10             	add    esp,0x10
c000b3f8:	83 ec 0c             	sub    esp,0xc
c000b3fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ff:	e8 18 fd ff ff       	call   c000b11c <VgaText::clearScreen()>
c000b404:	83 c4 10             	add    esp,0x10
c000b407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b40b:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b413:	05 02 01 00 00       	add    eax,0x102
c000b418:	83 ec 04             	sub    esp,0x4
c000b41b:	6a 30                	push   0x30
c000b41d:	6a 00                	push   0x0
c000b41f:	50                   	push   eax
c000b420:	e8 57 52 ff ff       	call   c000067c <memset>
c000b425:	83 c4 10             	add    esp,0x10
c000b428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42c:	05 32 01 00 00       	add    eax,0x132
c000b431:	83 ec 04             	sub    esp,0x4
c000b434:	68 80 00 00 00       	push   0x80
c000b439:	6a 00                	push   0x0
c000b43b:	50                   	push   eax
c000b43c:	e8 3b 52 ff ff       	call   c000067c <memset>
c000b441:	83 c4 10             	add    esp,0x10
c000b444:	90                   	nop
c000b445:	5b                   	pop    ebx
c000b446:	5e                   	pop    esi
c000b447:	5f                   	pop    edi
c000b448:	c3                   	ret    
c000b449:	90                   	nop

c000b44a <VgaText::receiveKey(unsigned char)>:
c000b44a:	55                   	push   ebp
c000b44b:	57                   	push   edi
c000b44c:	56                   	push   esi
c000b44d:	53                   	push   ebx
c000b44e:	83 ec 1c             	sub    esp,0x1c
c000b451:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b455:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b459:	84 db                	test   bl,bl
c000b45b:	0f 84 c6 00 00 00    	je     c000b527 <VgaText::receiveKey(unsigned char)+0xdd>
c000b461:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b467:	80 fb 08             	cmp    bl,0x8
c000b46a:	75 2c                	jne    c000b498 <VgaText::receiveKey(unsigned char)+0x4e>
c000b46c:	83 ec 0c             	sub    esp,0xc
c000b46f:	57                   	push   edi
c000b470:	e8 23 52 ff ff       	call   c0000698 <strlen>
c000b475:	83 c4 10             	add    esp,0x10
c000b478:	85 c0                	test   eax,eax
c000b47a:	74 41                	je     c000b4bd <VgaText::receiveKey(unsigned char)+0x73>
c000b47c:	50                   	push   eax
c000b47d:	50                   	push   eax
c000b47e:	6a 08                	push   0x8
c000b480:	56                   	push   esi
c000b481:	e8 f0 fc ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b486:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b489:	e8 0a 52 ff ff       	call   c0000698 <strlen>
c000b48e:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b496:	eb 22                	jmp    c000b4ba <VgaText::receiveKey(unsigned char)+0x70>
c000b498:	0f be c3             	movsx  eax,bl
c000b49b:	52                   	push   edx
c000b49c:	52                   	push   edx
c000b49d:	50                   	push   eax
c000b49e:	56                   	push   esi
c000b49f:	e8 d2 fc ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b4a4:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b4a8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b4ad:	59                   	pop    ecx
c000b4ae:	5d                   	pop    ebp
c000b4af:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b4b3:	50                   	push   eax
c000b4b4:	57                   	push   edi
c000b4b5:	e8 be 53 ff ff       	call   c0000878 <strcat>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b4c4:	75 05                	jne    c000b4cb <VgaText::receiveKey(unsigned char)+0x81>
c000b4c6:	80 fb 0a             	cmp    bl,0xa
c000b4c9:	75 50                	jne    c000b51b <VgaText::receiveKey(unsigned char)+0xd1>
c000b4cb:	83 ec 0c             	sub    esp,0xc
c000b4ce:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b4d4:	53                   	push   ebx
c000b4d5:	e8 be 51 ff ff       	call   c0000698 <strlen>
c000b4da:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b4dd:	89 c5                	mov    ebp,eax
c000b4df:	e8 b4 51 ff ff       	call   c0000698 <strlen>
c000b4e4:	83 c4 10             	add    esp,0x10
c000b4e7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b4eb:	3d 80 00 00 00       	cmp    eax,0x80
c000b4f0:	76 10                	jbe    c000b502 <VgaText::receiveKey(unsigned char)+0xb8>
c000b4f2:	83 ec 0c             	sub    esp,0xc
c000b4f5:	68 1f 38 02 c0       	push   0xc002381f
c000b4fa:	e8 08 89 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000b4ff:	83 c4 10             	add    esp,0x10
c000b502:	50                   	push   eax
c000b503:	50                   	push   eax
c000b504:	57                   	push   edi
c000b505:	53                   	push   ebx
c000b506:	e8 6d 53 ff ff       	call   c0000878 <strcat>
c000b50b:	83 c4 0c             	add    esp,0xc
c000b50e:	6a 30                	push   0x30
c000b510:	6a 00                	push   0x0
c000b512:	57                   	push   edi
c000b513:	e8 64 51 ff ff       	call   c000067c <memset>
c000b518:	83 c4 10             	add    esp,0x10
c000b51b:	83 ec 0c             	sub    esp,0xc
c000b51e:	56                   	push   esi
c000b51f:	e8 72 fa ff ff       	call   c000af96 <VgaText::doUpdate()>
c000b524:	83 c4 10             	add    esp,0x10
c000b527:	83 c4 1c             	add    esp,0x1c
c000b52a:	5b                   	pop    ebx
c000b52b:	5e                   	pop    esi
c000b52c:	5f                   	pop    edi
c000b52d:	5d                   	pop    ebp
c000b52e:	c3                   	ret    
c000b52f:	90                   	nop

c000b530 <VgaText::write(unsigned long long, void*, int*)>:
c000b530:	55                   	push   ebp
c000b531:	57                   	push   edi
c000b532:	56                   	push   esi
c000b533:	53                   	push   ebx
c000b534:	83 ec 0c             	sub    esp,0xc
c000b537:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b53b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b53f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b543:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b54a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b54d:	39 eb                	cmp    ebx,ebp
c000b54f:	74 13                	je     c000b564 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b551:	43                   	inc    ebx
c000b552:	50                   	push   eax
c000b553:	50                   	push   eax
c000b554:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b558:	50                   	push   eax
c000b559:	56                   	push   esi
c000b55a:	e8 17 fc ff ff       	call   c000b176 <VgaText::putchar(char)>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	eb e9                	jmp    c000b54d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b564:	83 ec 0c             	sub    esp,0xc
c000b567:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b56e:	56                   	push   esi
c000b56f:	e8 22 fa ff ff       	call   c000af96 <VgaText::doUpdate()>
c000b574:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b578:	89 38                	mov    DWORD PTR [eax],edi
c000b57a:	83 c4 1c             	add    esp,0x1c
c000b57d:	31 c0                	xor    eax,eax
c000b57f:	5b                   	pop    ebx
c000b580:	5e                   	pop    esi
c000b581:	5f                   	pop    edi
c000b582:	5d                   	pop    ebp
c000b583:	c3                   	ret    

c000b584 <newTerminal(char*)>:
c000b584:	83 ec 28             	sub    esp,0x28
c000b587:	68 b4 01 00 00       	push   0x1b4
c000b58c:	e8 26 e7 ff ff       	call   c0009cb7 <malloc>
c000b591:	5a                   	pop    edx
c000b592:	59                   	pop    ecx
c000b593:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b597:	50                   	push   eax
c000b598:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b59c:	e8 2d fd ff ff       	call   c000b2ce <VgaText::VgaText(char const*)>
c000b5a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5a5:	83 c4 2c             	add    esp,0x2c
c000b5a8:	c3                   	ret    
c000b5a9:	66 90                	xchg   ax,ax
c000b5ab:	90                   	nop

c000b5ac <TSS::TSS()>:
c000b5ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b5b7:	90                   	nop
c000b5b8:	c3                   	ret    
c000b5b9:	90                   	nop
c000b5ba:	66 90                	xchg   ax,ax

c000b5bc <TSS::setESP(unsigned long)>:
c000b5bc:	55                   	push   ebp
c000b5bd:	89 e5                	mov    ebp,esp
c000b5bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5c5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b5c8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b5cb:	90                   	nop
c000b5cc:	5d                   	pop    ebp
c000b5cd:	c3                   	ret    
c000b5ce:	66 90                	xchg   ax,ax

c000b5d0 <TSS::flush()>:
c000b5d0:	55                   	push   ebp
c000b5d1:	89 e5                	mov    ebp,esp
c000b5d3:	83 ec 10             	sub    esp,0x10
c000b5d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b5d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000b5db:	83 c8 03             	or     eax,0x3
c000b5de:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b5e2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b5e6:	66 89 d0             	mov    ax,dx
c000b5e9:	0f 00 d8             	ltr    ax
c000b5ec:	90                   	nop
c000b5ed:	c9                   	leave  
c000b5ee:	c3                   	ret    
c000b5ef:	90                   	nop

c000b5f0 <TSS::setup(unsigned long, unsigned long)>:
c000b5f0:	55                   	push   ebp
c000b5f1:	89 e5                	mov    ebp,esp
c000b5f3:	83 ec 18             	sub    esp,0x18
c000b5f6:	83 ec 0c             	sub    esp,0xc
c000b5f9:	6a 68                	push   0x68
c000b5fb:	e8 b7 e6 ff ff       	call   c0009cb7 <malloc>
c000b600:	83 c4 10             	add    esp,0x10
c000b603:	89 c2                	mov    edx,eax
c000b605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b608:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b60b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b60e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b611:	83 ec 04             	sub    esp,0x4
c000b614:	6a 68                	push   0x68
c000b616:	6a 00                	push   0x0
c000b618:	50                   	push   eax
c000b619:	e8 5e 50 ff ff       	call   c000067c <memset>
c000b61e:	83 c4 10             	add    esp,0x10
c000b621:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b624:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b627:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b62d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b630:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b633:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b63c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b63f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b642:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b648:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b64b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b651:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b654:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b657:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b660:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b663:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b66c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b66f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b678:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b67b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b684:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b687:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b68d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b690:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b693:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b696:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b69c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b69f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b6a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b6a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6ab:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b6b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6b8:	0f 20 da             	mov    edx,cr3
c000b6bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b6be:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b6c1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b6c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b6c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b6ca:	83 ec 08             	sub    esp,0x8
c000b6cd:	50                   	push   eax
c000b6ce:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b6d1:	50                   	push   eax
c000b6d2:	e8 19 de ff ff       	call   c00094f0 <GDTEntry::setBase(unsigned int)>
c000b6d7:	83 c4 10             	add    esp,0x10
c000b6da:	83 ec 08             	sub    esp,0x8
c000b6dd:	6a 68                	push   0x68
c000b6df:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b6e2:	50                   	push   eax
c000b6e3:	e8 24 de ff ff       	call   c000950c <GDTEntry::setLimit(unsigned int)>
c000b6e8:	83 c4 10             	add    esp,0x10
c000b6eb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b6ef:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b6f2:	83 e0 0f             	and    eax,0xf
c000b6f5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b6f8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b6fb:	83 c8 40             	or     eax,0x40
c000b6fe:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b701:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c000b706:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b70c:	05 78 01 00 00       	add    eax,0x178
c000b711:	83 ec 04             	sub    esp,0x4
c000b714:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b717:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b71a:	50                   	push   eax
c000b71b:	e8 20 de ff ff       	call   c0009540 <GDT::addEntry(GDTEntry)>
c000b720:	83 c4 10             	add    esp,0x10
c000b723:	89 c2                	mov    edx,eax
c000b725:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b728:	89 10                	mov    DWORD PTR [eax],edx
c000b72a:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c000b72f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b735:	05 78 01 00 00       	add    eax,0x178
c000b73a:	83 ec 0c             	sub    esp,0xc
c000b73d:	50                   	push   eax
c000b73e:	e8 27 de ff ff       	call   c000956a <GDT::flush()>
c000b743:	83 c4 10             	add    esp,0x10
c000b746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b749:	8b 00                	mov    eax,DWORD PTR [eax]
c000b74b:	c9                   	leave  
c000b74c:	c3                   	ret    
c000b74d:	90                   	nop

c000b74e <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b74e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b752:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b756:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b759:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b75e:	75 08                	jne    c000b768 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b760:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b766:	eb 38                	jmp    c000b7a0 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b768:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b76d:	75 17                	jne    c000b786 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b76f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b774:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b777:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b77d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b77f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b783:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b786:	89 c1                	mov    ecx,eax
c000b788:	83 e1 fd             	and    ecx,0xfffffffd
c000b78b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b791:	74 cd                	je     c000b760 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b793:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b798:	83 e0 ef             	and    eax,0xffffffef
c000b79b:	83 f8 08             	cmp    eax,0x8
c000b79e:	76 c0                	jbe    c000b760 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b7a0:	31 c0                	xor    eax,eax
c000b7a2:	c3                   	ret    
c000b7a3:	90                   	nop

c000b7a4 <ReservedFilename::isAtty()>:
c000b7a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7a8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b7ab:	31 c0                	xor    eax,eax
c000b7ad:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b7b3:	74 09                	je     c000b7be <ReservedFilename::isAtty()+0x1a>
c000b7b5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b7bb:	0f 94 c0             	sete   al
c000b7be:	c3                   	ret    
c000b7bf:	90                   	nop

c000b7c0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b7c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7c4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b7c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b7cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b7cf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b7d4:	75 08                	jne    c000b7de <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b7d6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b7dc:	eb 3d                	jmp    c000b81b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b7de:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b7e3:	75 17                	jne    c000b7fc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b7e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b7ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b7ed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b7f3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b7f9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b7fc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b801:	75 04                	jne    c000b807 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b803:	89 0a                	mov    DWORD PTR [edx],ecx
c000b805:	eb 14                	jmp    c000b81b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b807:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b80c:	74 c8                	je     c000b7d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b80e:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b813:	83 e0 ef             	and    eax,0xffffffef
c000b816:	83 f8 08             	cmp    eax,0x8
c000b819:	76 bb                	jbe    c000b7d6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b81b:	31 c0                	xor    eax,eax
c000b81d:	c3                   	ret    

c000b81e <UnixFile::getFileDescriptor()>:
c000b81e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b822:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b825:	c3                   	ret    

c000b826 <UnixFile::UnixFile(int)>:
c000b826:	53                   	push   ebx
c000b827:	83 ec 28             	sub    esp,0x28
c000b82a:	ba 3c 39 02 c0       	mov    edx,0xc002393c
c000b82f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b833:	89 10                	mov    DWORD PTR [eax],edx
c000b835:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b83d:	0f 8f 8c 01 00 00    	jg     c000b9cf <UnixFile::UnixFile(int)+0x1a9>
c000b843:	a1 e0 67 02 c0       	mov    eax,ds:0xc00267e0
c000b848:	8d 50 01             	lea    edx,[eax+0x1]
c000b84b:	89 15 e0 67 02 c0    	mov    DWORD PTR ds:0xc00267e0,edx
c000b851:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b855:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b858:	83 ec 08             	sub    esp,0x8
c000b85b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b85f:	68 b8 74 02 c0       	push   0xc00274b8
c000b864:	e8 4f 68 01 00       	call   c00220b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b869:	83 c4 10             	add    esp,0x10
c000b86c:	a0 b4 74 02 c0       	mov    al,ds:0xc00274b4
c000b871:	83 f0 01             	xor    eax,0x1
c000b874:	84 c0                	test   al,al
c000b876:	0f 84 54 01 00 00    	je     c000b9d0 <UnixFile::UnixFile(int)+0x1aa>
c000b87c:	c6 05 b4 74 02 c0 01 	mov    BYTE PTR ds:0xc00274b4,0x1
c000b883:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b88b:	83 ec 0c             	sub    esp,0xc
c000b88e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b892:	e8 20 e4 ff ff       	call   c0009cb7 <malloc>
c000b897:	83 c4 10             	add    esp,0x10
c000b89a:	89 c3                	mov    ebx,eax
c000b89c:	83 ec 08             	sub    esp,0x8
c000b89f:	68 03 ff ff 0f       	push   0xfffff03
c000b8a4:	53                   	push   ebx
c000b8a5:	e8 2c 01 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b8aa:	83 c4 10             	add    esp,0x10
c000b8ad:	89 1d ac 74 02 c0    	mov    DWORD PTR ds:0xc00274ac,ebx
c000b8b3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b8bb:	83 ec 0c             	sub    esp,0xc
c000b8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8c2:	e8 f0 e3 ff ff       	call   c0009cb7 <malloc>
c000b8c7:	83 c4 10             	add    esp,0x10
c000b8ca:	89 c3                	mov    ebx,eax
c000b8cc:	83 ec 08             	sub    esp,0x8
c000b8cf:	68 01 ff ff 0f       	push   0xfffff01
c000b8d4:	53                   	push   ebx
c000b8d5:	e8 fc 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b8da:	83 c4 10             	add    esp,0x10
c000b8dd:	89 1d b0 74 02 c0    	mov    DWORD PTR ds:0xc00274b0,ebx
c000b8e3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b8eb:	83 ec 0c             	sub    esp,0xc
c000b8ee:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b8f2:	e8 c0 e3 ff ff       	call   c0009cb7 <malloc>
c000b8f7:	83 c4 10             	add    esp,0x10
c000b8fa:	89 c3                	mov    ebx,eax
c000b8fc:	83 ec 08             	sub    esp,0x8
c000b8ff:	68 00 ff ff 0f       	push   0xfffff00
c000b904:	53                   	push   ebx
c000b905:	e8 cc 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b90a:	83 c4 10             	add    esp,0x10
c000b90d:	89 1d a4 74 02 c0    	mov    DWORD PTR ds:0xc00274a4,ebx
c000b913:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b91b:	83 ec 0c             	sub    esp,0xc
c000b91e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b922:	e8 90 e3 ff ff       	call   c0009cb7 <malloc>
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	89 c3                	mov    ebx,eax
c000b92c:	83 ec 08             	sub    esp,0x8
c000b92f:	68 02 ff ff 0f       	push   0xfffff02
c000b934:	53                   	push   ebx
c000b935:	e8 9c 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	89 1d a8 74 02 c0    	mov    DWORD PTR ds:0xc00274a8,ebx
c000b943:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b94b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b950:	7f 7e                	jg     c000b9d0 <UnixFile::UnixFile(int)+0x1aa>
c000b952:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b95a:	83 ec 0c             	sub    esp,0xc
c000b95d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b961:	e8 51 e3 ff ff       	call   c0009cb7 <malloc>
c000b966:	83 c4 10             	add    esp,0x10
c000b969:	89 c3                	mov    ebx,eax
c000b96b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b96f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b974:	83 ec 08             	sub    esp,0x8
c000b977:	50                   	push   eax
c000b978:	53                   	push   ebx
c000b979:	e8 58 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b97e:	83 c4 10             	add    esp,0x10
c000b981:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b985:	89 1c 85 80 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8b80],ebx
c000b98c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b994:	83 ec 0c             	sub    esp,0xc
c000b997:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b99b:	e8 17 e3 ff ff       	call   c0009cb7 <malloc>
c000b9a0:	83 c4 10             	add    esp,0x10
c000b9a3:	89 c3                	mov    ebx,eax
c000b9a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9a9:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b9ae:	83 ec 08             	sub    esp,0x8
c000b9b1:	50                   	push   eax
c000b9b2:	53                   	push   ebx
c000b9b3:	e8 1e 00 00 00       	call   c000b9d6 <ReservedFilename::ReservedFilename(int)>
c000b9b8:	83 c4 10             	add    esp,0x10
c000b9bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b9bf:	89 1c 85 40 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8bc0],ebx
c000b9c6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b9ca:	e9 7c ff ff ff       	jmp    c000b94b <UnixFile::UnixFile(int)+0x125>
c000b9cf:	90                   	nop
c000b9d0:	83 c4 28             	add    esp,0x28
c000b9d3:	5b                   	pop    ebx
c000b9d4:	c3                   	ret    
c000b9d5:	90                   	nop

c000b9d6 <ReservedFilename::ReservedFilename(int)>:
c000b9d6:	83 ec 0c             	sub    esp,0xc
c000b9d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9dd:	83 ec 08             	sub    esp,0x8
c000b9e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9e4:	50                   	push   eax
c000b9e5:	e8 3c fe ff ff       	call   c000b826 <UnixFile::UnixFile(int)>
c000b9ea:	83 c4 10             	add    esp,0x10
c000b9ed:	ba 58 39 02 c0       	mov    edx,0xc0023958
c000b9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9f6:	89 10                	mov    DWORD PTR [eax],edx
c000b9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba00:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ba03:	90                   	nop
c000ba04:	83 c4 0c             	add    esp,0xc
c000ba07:	c3                   	ret    

c000ba08 <UnixFile::~UnixFile()>:
c000ba08:	83 ec 1c             	sub    esp,0x1c
c000ba0b:	ba 3c 39 02 c0       	mov    edx,0xc002393c
c000ba10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba14:	89 10                	mov    DWORD PTR [eax],edx
c000ba16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba1d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000ba22:	7f 73                	jg     c000ba97 <UnixFile::~UnixFile()+0x8f>
c000ba24:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ba2c:	83 ec 0c             	sub    esp,0xc
c000ba2f:	68 b8 74 02 c0       	push   0xc00274b8
c000ba34:	e8 53 67 01 00       	call   c002218c <LinkedList<UnixFile>::getFirstElement()>
c000ba39:	83 c4 10             	add    esp,0x10
c000ba3c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba40:	83 ec 0c             	sub    esp,0xc
c000ba43:	68 b8 74 02 c0       	push   0xc00274b8
c000ba48:	e8 47 67 01 00       	call   c0022194 <LinkedList<UnixFile>::removeFirst()>
c000ba4d:	83 c4 10             	add    esp,0x10
c000ba50:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba54:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000ba58:	74 40                	je     c000ba9a <UnixFile::~UnixFile()+0x92>
c000ba5a:	83 ec 08             	sub    esp,0x8
c000ba5d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba61:	68 b8 74 02 c0       	push   0xc00274b8
c000ba66:	e8 4d 66 01 00       	call   c00220b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000ba6b:	83 c4 10             	add    esp,0x10
c000ba6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ba72:	8d 50 01             	lea    edx,[eax+0x1]
c000ba75:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba79:	3d 88 13 00 00       	cmp    eax,0x1388
c000ba7e:	0f 94 c0             	sete   al
c000ba81:	84 c0                	test   al,al
c000ba83:	74 a7                	je     c000ba2c <UnixFile::~UnixFile()+0x24>
c000ba85:	83 ec 0c             	sub    esp,0xc
c000ba88:	68 14 39 02 c0       	push   0xc0023914
c000ba8d:	e8 75 83 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000ba92:	83 c4 10             	add    esp,0x10
c000ba95:	eb 95                	jmp    c000ba2c <UnixFile::~UnixFile()+0x24>
c000ba97:	90                   	nop
c000ba98:	eb 01                	jmp    c000ba9b <UnixFile::~UnixFile()+0x93>
c000ba9a:	90                   	nop
c000ba9b:	90                   	nop
c000ba9c:	83 c4 1c             	add    esp,0x1c
c000ba9f:	c3                   	ret    

c000baa0 <UnixFile::~UnixFile()>:
c000baa0:	83 ec 0c             	sub    esp,0xc
c000baa3:	83 ec 0c             	sub    esp,0xc
c000baa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baaa:	e8 59 ff ff ff       	call   c000ba08 <UnixFile::~UnixFile()>
c000baaf:	83 c4 10             	add    esp,0x10
c000bab2:	83 ec 08             	sub    esp,0x8
c000bab5:	6a 0c                	push   0xc
c000bab7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000babb:	e8 24 14 00 00       	call   c000cee4 <operator delete(void*, unsigned long)>
c000bac0:	83 c4 10             	add    esp,0x10
c000bac3:	83 c4 0c             	add    esp,0xc
c000bac6:	c3                   	ret    
c000bac7:	90                   	nop

c000bac8 <ReservedFilename::~ReservedFilename()>:
c000bac8:	83 ec 0c             	sub    esp,0xc
c000bacb:	ba 58 39 02 c0       	mov    edx,0xc0023958
c000bad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bad4:	89 10                	mov    DWORD PTR [eax],edx
c000bad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bada:	83 ec 0c             	sub    esp,0xc
c000badd:	50                   	push   eax
c000bade:	e8 25 ff ff ff       	call   c000ba08 <UnixFile::~UnixFile()>
c000bae3:	83 c4 10             	add    esp,0x10
c000bae6:	90                   	nop
c000bae7:	83 c4 0c             	add    esp,0xc
c000baea:	c3                   	ret    
c000baeb:	90                   	nop

c000baec <ReservedFilename::~ReservedFilename()>:
c000baec:	83 ec 0c             	sub    esp,0xc
c000baef:	83 ec 0c             	sub    esp,0xc
c000baf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf6:	e8 cd ff ff ff       	call   c000bac8 <ReservedFilename::~ReservedFilename()>
c000bafb:	83 c4 10             	add    esp,0x10
c000bafe:	83 ec 08             	sub    esp,0x8
c000bb01:	6a 0c                	push   0xc
c000bb03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb07:	e8 d8 13 00 00       	call   c000cee4 <operator delete(void*, unsigned long)>
c000bb0c:	83 c4 10             	add    esp,0x10
c000bb0f:	83 c4 0c             	add    esp,0xc
c000bb12:	c3                   	ret    

c000bb13 <getFromFileDescriptor(int)>:
c000bb13:	53                   	push   ebx
c000bb14:	83 ec 08             	sub    esp,0x8
c000bb17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb1b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000bb21:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000bb27:	7f 2c                	jg     c000bb55 <getFromFileDescriptor(int)+0x42>
c000bb29:	83 ec 0c             	sub    esp,0xc
c000bb2c:	68 b8 74 02 c0       	push   0xc00274b8
c000bb31:	e8 56 66 01 00       	call   c002218c <LinkedList<UnixFile>::getFirstElement()>
c000bb36:	83 c4 10             	add    esp,0x10
c000bb39:	85 c0                	test   eax,eax
c000bb3b:	75 04                	jne    c000bb41 <getFromFileDescriptor(int)+0x2e>
c000bb3d:	31 c0                	xor    eax,eax
c000bb3f:	eb 6e                	jmp    c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb41:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000bb44:	74 69                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb46:	52                   	push   edx
c000bb47:	52                   	push   edx
c000bb48:	50                   	push   eax
c000bb49:	68 b8 74 02 c0       	push   0xc00274b8
c000bb4e:	e8 e3 66 01 00       	call   c0022236 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000bb53:	eb e1                	jmp    c000bb36 <getFromFileDescriptor(int)+0x23>
c000bb55:	a1 ac 74 02 c0       	mov    eax,ds:0xc00274ac
c000bb5a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000bb60:	74 4d                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb62:	a1 b0 74 02 c0       	mov    eax,ds:0xc00274b0
c000bb67:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000bb6d:	74 40                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb6f:	a1 a8 74 02 c0       	mov    eax,ds:0xc00274a8
c000bb74:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000bb7a:	74 33                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb7c:	a1 a4 74 02 c0       	mov    eax,ds:0xc00274a4
c000bb81:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000bb87:	74 26                	je     c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb89:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000bb8f:	83 f8 08             	cmp    eax,0x8
c000bb92:	77 09                	ja     c000bb9d <getFromFileDescriptor(int)+0x8a>
c000bb94:	8b 04 85 80 74 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8b80]
c000bb9b:	eb 12                	jmp    c000bbaf <getFromFileDescriptor(int)+0x9c>
c000bb9d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000bba3:	83 fb 08             	cmp    ebx,0x8
c000bba6:	77 95                	ja     c000bb3d <getFromFileDescriptor(int)+0x2a>
c000bba8:	8b 04 9d 40 74 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8bc0]
c000bbaf:	83 c4 08             	add    esp,0x8
c000bbb2:	5b                   	pop    ebx
c000bbb3:	c3                   	ret    

c000bbb4 <__static_initialization_and_destruction_0(int, int)>:
c000bbb4:	83 ec 0c             	sub    esp,0xc
c000bbb7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bbbc:	75 34                	jne    c000bbf2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bbbe:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000bbc6:	75 2a                	jne    c000bbf2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000bbc8:	83 ec 0c             	sub    esp,0xc
c000bbcb:	68 b8 74 02 c0       	push   0xc00274b8
c000bbd0:	e8 a1 64 01 00       	call   c0022076 <LinkedList<UnixFile>::LinkedList()>
c000bbd5:	83 c4 10             	add    esp,0x10
c000bbd8:	83 ec 04             	sub    esp,0x4
c000bbdb:	68 0c 66 02 c0       	push   0xc002660c
c000bbe0:	68 b8 74 02 c0       	push   0xc00274b8
c000bbe5:	68 74 20 02 c0       	push   0xc0022074
c000bbea:	e8 6f 12 00 00       	call   c000ce5e <__cxa_atexit>
c000bbef:	83 c4 10             	add    esp,0x10
c000bbf2:	90                   	nop
c000bbf3:	83 c4 0c             	add    esp,0xc
c000bbf6:	c3                   	ret    

c000bbf7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000bbf7:	83 ec 0c             	sub    esp,0xc
c000bbfa:	83 ec 08             	sub    esp,0x8
c000bbfd:	68 ff ff 00 00       	push   0xffff
c000bc02:	6a 01                	push   0x1
c000bc04:	e8 ab ff ff ff       	call   c000bbb4 <__static_initialization_and_destruction_0(int, int)>
c000bc09:	83 c4 10             	add    esp,0x10
c000bc0c:	83 c4 0c             	add    esp,0xc
c000bc0f:	c3                   	ret    

c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000bc10:	53                   	push   ebx
c000bc11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc15:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bc19:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000bc1f:	89 c8                	mov    eax,ecx
c000bc21:	d1 e8                	shr    eax,1
c000bc23:	03 05 e8 67 02 c0    	add    eax,DWORD PTR ds:0xc00267e8
c000bc29:	83 e1 01             	and    ecx,0x1
c000bc2c:	8a 10                	mov    dl,BYTE PTR [eax]
c000bc2e:	75 09                	jne    c000bc39 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000bc30:	83 e2 f0             	and    edx,0xfffffff0
c000bc33:	09 da                	or     edx,ebx
c000bc35:	88 10                	mov    BYTE PTR [eax],dl
c000bc37:	5b                   	pop    ebx
c000bc38:	c3                   	ret    
c000bc39:	c1 e3 04             	shl    ebx,0x4
c000bc3c:	83 e2 0f             	and    edx,0xf
c000bc3f:	09 da                	or     edx,ebx
c000bc41:	88 10                	mov    BYTE PTR [eax],dl
c000bc43:	5b                   	pop    ebx
c000bc44:	c3                   	ret    

c000bc45 <Virt::getPageState(unsigned long)>:
c000bc45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc49:	8b 0d e8 67 02 c0    	mov    ecx,DWORD PTR ds:0xc00267e8
c000bc4f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000bc55:	89 d0                	mov    eax,edx
c000bc57:	d1 e8                	shr    eax,1
c000bc59:	83 e2 01             	and    edx,0x1
c000bc5c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000bc5f:	75 04                	jne    c000bc65 <Virt::getPageState(unsigned long)+0x20>
c000bc61:	83 e0 0f             	and    eax,0xf
c000bc64:	c3                   	ret    
c000bc65:	c0 e8 04             	shr    al,0x4
c000bc68:	c3                   	ret    

c000bc69 <Virt::allocateKernelVirtualPages(int)>:
c000bc69:	55                   	push   ebp
c000bc6a:	31 ed                	xor    ebp,ebp
c000bc6c:	57                   	push   edi
c000bc6d:	56                   	push   esi
c000bc6e:	53                   	push   ebx
c000bc6f:	31 db                	xor    ebx,ebx
c000bc71:	83 ec 1c             	sub    esp,0x1c
c000bc74:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000bc78:	8b 3d e4 67 02 c0    	mov    edi,DWORD PTR ds:0xc00267e4
c000bc7e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000bc83:	57                   	push   edi
c000bc84:	e8 bc ff ff ff       	call   c000bc45 <Virt::getPageState(unsigned long)>
c000bc89:	5a                   	pop    edx
c000bc8a:	84 c0                	test   al,al
c000bc8c:	75 3a                	jne    c000bcc8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000bc8e:	85 db                	test   ebx,ebx
c000bc90:	75 02                	jne    c000bc94 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000bc92:	89 fd                	mov    ebp,edi
c000bc94:	43                   	inc    ebx
c000bc95:	39 f3                	cmp    ebx,esi
c000bc97:	74 5a                	je     c000bcf3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000bc99:	47                   	inc    edi
c000bc9a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bca0:	76 31                	jbe    c000bcd3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000bca2:	c7 05 e4 67 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00267e4,0xc8000
c000bcac:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000bcb1:	75 28                	jne    c000bcdb <Virt::allocateKernelVirtualPages(int)+0x72>
c000bcb3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000bcb8:	bf 00 80 0c 00       	mov    edi,0xc8000
c000bcbd:	57                   	push   edi
c000bcbe:	e8 82 ff ff ff       	call   c000bc45 <Virt::getPageState(unsigned long)>
c000bcc3:	5a                   	pop    edx
c000bcc4:	84 c0                	test   al,al
c000bcc6:	74 c6                	je     c000bc8e <Virt::allocateKernelVirtualPages(int)+0x25>
c000bcc8:	31 db                	xor    ebx,ebx
c000bcca:	47                   	inc    edi
c000bccb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000bcd1:	77 cf                	ja     c000bca2 <Virt::allocateKernelVirtualPages(int)+0x39>
c000bcd3:	89 3d e4 67 02 c0    	mov    DWORD PTR ds:0xc00267e4,edi
c000bcd9:	eb a8                	jmp    c000bc83 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bcdb:	83 ec 0c             	sub    esp,0xc
c000bcde:	68 6c 39 02 c0       	push   0xc002396c
c000bce3:	e8 1f 81 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000bce8:	8b 3d e4 67 02 c0    	mov    edi,DWORD PTR ds:0xc00267e4
c000bcee:	83 c4 10             	add    esp,0x10
c000bcf1:	eb 90                	jmp    c000bc83 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000bcf3:	89 2d e4 67 02 c0    	mov    DWORD PTR ds:0xc00267e4,ebp
c000bcf9:	4b                   	dec    ebx
c000bcfa:	74 5f                	je     c000bd5b <Virt::allocateKernelVirtualPages(int)+0xf2>
c000bcfc:	85 f6                	test   esi,esi
c000bcfe:	74 3d                	je     c000bd3d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bd00:	89 e8                	mov    eax,ebp
c000bd02:	31 db                	xor    ebx,ebx
c000bd04:	8d 7e ff             	lea    edi,[esi-0x1]
c000bd07:	eb 14                	jmp    c000bd1d <Virt::allocateKernelVirtualPages(int)+0xb4>
c000bd09:	6a 01                	push   0x1
c000bd0b:	43                   	inc    ebx
c000bd0c:	50                   	push   eax
c000bd0d:	e8 fe fe ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd12:	58                   	pop    eax
c000bd13:	39 f3                	cmp    ebx,esi
c000bd15:	5a                   	pop    edx
c000bd16:	74 25                	je     c000bd3d <Virt::allocateKernelVirtualPages(int)+0xd4>
c000bd18:	a1 e4 67 02 c0       	mov    eax,ds:0xc00267e4
c000bd1d:	8d 50 01             	lea    edx,[eax+0x1]
c000bd20:	85 db                	test   ebx,ebx
c000bd22:	89 15 e4 67 02 c0    	mov    DWORD PTR ds:0xc00267e4,edx
c000bd28:	74 20                	je     c000bd4a <Virt::allocateKernelVirtualPages(int)+0xe1>
c000bd2a:	39 df                	cmp    edi,ebx
c000bd2c:	75 db                	jne    c000bd09 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000bd2e:	6a 03                	push   0x3
c000bd30:	43                   	inc    ebx
c000bd31:	50                   	push   eax
c000bd32:	e8 d9 fe ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd37:	59                   	pop    ecx
c000bd38:	39 f3                	cmp    ebx,esi
c000bd3a:	58                   	pop    eax
c000bd3b:	75 db                	jne    c000bd18 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bd3d:	83 c4 1c             	add    esp,0x1c
c000bd40:	89 e8                	mov    eax,ebp
c000bd42:	5b                   	pop    ebx
c000bd43:	c1 e0 0c             	shl    eax,0xc
c000bd46:	5e                   	pop    esi
c000bd47:	5f                   	pop    edi
c000bd48:	5d                   	pop    ebp
c000bd49:	c3                   	ret    
c000bd4a:	6a 02                	push   0x2
c000bd4c:	bb 01 00 00 00       	mov    ebx,0x1
c000bd51:	50                   	push   eax
c000bd52:	e8 b9 fe ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd57:	58                   	pop    eax
c000bd58:	5a                   	pop    edx
c000bd59:	eb bd                	jmp    c000bd18 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bd5b:	6a 04                	push   0x4
c000bd5d:	8d 45 01             	lea    eax,[ebp+0x1]
c000bd60:	55                   	push   ebp
c000bd61:	a3 e4 67 02 c0       	mov    ds:0xc00267e4,eax
c000bd66:	e8 a5 fe ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bd6b:	59                   	pop    ecx
c000bd6c:	89 e8                	mov    eax,ebp
c000bd6e:	5b                   	pop    ebx
c000bd6f:	c1 e0 0c             	shl    eax,0xc
c000bd72:	83 c4 1c             	add    esp,0x1c
c000bd75:	5b                   	pop    ebx
c000bd76:	5e                   	pop    esi
c000bd77:	5f                   	pop    edi
c000bd78:	5d                   	pop    ebp
c000bd79:	c3                   	ret    

c000bd7a <Virt::freeSwapfilePage(unsigned long)>:
c000bd7a:	53                   	push   ebx
c000bd7b:	8b 15 d0 74 02 c0    	mov    edx,DWORD PTR ds:0xc00274d0
c000bd81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bd85:	b8 01 00 00 00       	mov    eax,0x1
c000bd8a:	89 cb                	mov    ebx,ecx
c000bd8c:	d3 e0                	shl    eax,cl
c000bd8e:	c1 eb 05             	shr    ebx,0x5
c000bd91:	f7 d0                	not    eax
c000bd93:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bd96:	5b                   	pop    ebx
c000bd97:	c3                   	ret    

c000bd98 <Virt::swapIDToSector(unsigned long)>:
c000bd98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd9c:	0f af 05 ec 67 02 c0 	imul   eax,DWORD PTR ds:0xc00267ec
c000bda3:	03 05 f4 67 02 c0    	add    eax,DWORD PTR ds:0xc00267f4
c000bda9:	c3                   	ret    

c000bdaa <Virt::allocateSwapfilePage()>:
c000bdaa:	55                   	push   ebp
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	57                   	push   edi
c000bdae:	56                   	push   esi
c000bdaf:	53                   	push   ebx
c000bdb0:	83 ec 0c             	sub    esp,0xc
c000bdb3:	8b 0d ec 67 02 c0    	mov    ecx,DWORD PTR ds:0xc00267ec
c000bdb9:	a1 f0 67 02 c0       	mov    eax,ds:0xc00267f0
c000bdbe:	f7 f1                	div    ecx
c000bdc0:	39 0d f0 67 02 c0    	cmp    DWORD PTR ds:0xc00267f0,ecx
c000bdc6:	72 2d                	jb     c000bdf5 <Virt::allocateSwapfilePage()+0x4b>
c000bdc8:	8b 35 d0 74 02 c0    	mov    esi,DWORD PTR ds:0xc00274d0
c000bdce:	8b 16                	mov    edx,DWORD PTR [esi]
c000bdd0:	f6 c2 01             	test   dl,0x1
c000bdd3:	74 3c                	je     c000be11 <Virt::allocateSwapfilePage()+0x67>
c000bdd5:	31 c9                	xor    ecx,ecx
c000bdd7:	bf 01 00 00 00       	mov    edi,0x1
c000bddc:	eb 12                	jmp    c000bdf0 <Virt::allocateSwapfilePage()+0x46>
c000bdde:	89 fd                	mov    ebp,edi
c000bde0:	89 ca                	mov    edx,ecx
c000bde2:	d3 e5                	shl    ebp,cl
c000bde4:	c1 ea 05             	shr    edx,0x5
c000bde7:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bdea:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bdec:	85 ea                	test   edx,ebp
c000bdee:	74 2a                	je     c000be1a <Virt::allocateSwapfilePage()+0x70>
c000bdf0:	41                   	inc    ecx
c000bdf1:	39 c8                	cmp    eax,ecx
c000bdf3:	77 e9                	ja     c000bdde <Virt::allocateSwapfilePage()+0x34>
c000bdf5:	83 ec 0c             	sub    esp,0xc
c000bdf8:	68 24 3b 02 c0       	push   0xc0023b24
c000bdfd:	e8 05 80 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000be02:	83 c4 10             	add    esp,0x10
c000be05:	31 c9                	xor    ecx,ecx
c000be07:	83 c4 0c             	add    esp,0xc
c000be0a:	89 c8                	mov    eax,ecx
c000be0c:	5b                   	pop    ebx
c000be0d:	5e                   	pop    esi
c000be0e:	5f                   	pop    edi
c000be0f:	5d                   	pop    ebp
c000be10:	c3                   	ret    
c000be11:	89 f3                	mov    ebx,esi
c000be13:	bd 01 00 00 00       	mov    ebp,0x1
c000be18:	31 c9                	xor    ecx,ecx
c000be1a:	09 ea                	or     edx,ebp
c000be1c:	89 c8                	mov    eax,ecx
c000be1e:	89 13                	mov    DWORD PTR [ebx],edx
c000be20:	83 c4 0c             	add    esp,0xc
c000be23:	5b                   	pop    ebx
c000be24:	5e                   	pop    esi
c000be25:	5f                   	pop    edi
c000be26:	5d                   	pop    ebp
c000be27:	c3                   	ret    

c000be28 <Virt::virtualMemorySetup()>:
c000be28:	53                   	push   ebx
c000be29:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000be2e:	6a 0f                	push   0xf
c000be30:	53                   	push   ebx
c000be31:	43                   	inc    ebx
c000be32:	e8 d9 fd ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be37:	58                   	pop    eax
c000be38:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000be3e:	5a                   	pop    edx
c000be3f:	75 ed                	jne    c000be2e <Virt::virtualMemorySetup()+0x6>
c000be41:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000be46:	6a 00                	push   0x0
c000be48:	53                   	push   ebx
c000be49:	43                   	inc    ebx
c000be4a:	e8 c1 fd ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be4f:	59                   	pop    ecx
c000be50:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000be56:	58                   	pop    eax
c000be57:	75 ed                	jne    c000be46 <Virt::virtualMemorySetup()+0x1e>
c000be59:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000be5e:	6a 0f                	push   0xf
c000be60:	53                   	push   ebx
c000be61:	43                   	inc    ebx
c000be62:	e8 a9 fd ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be67:	58                   	pop    eax
c000be68:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000be6e:	5a                   	pop    edx
c000be6f:	75 ed                	jne    c000be5e <Virt::virtualMemorySetup()+0x36>
c000be71:	5b                   	pop    ebx
c000be72:	c3                   	ret    

c000be73 <Virt::setupPageSwapping(int)>:
c000be73:	53                   	push   ebx
c000be74:	83 ec 0c             	sub    esp,0xc
c000be77:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000be7b:	a1 68 99 02 c0       	mov    eax,ds:0xc0029968
c000be80:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000be86:	8b 10                	mov    edx,DWORD PTR [eax]
c000be88:	53                   	push   ebx
c000be89:	c1 e3 0b             	shl    ebx,0xb
c000be8c:	68 3b 3b 02 c0       	push   0xc0023b3b
c000be91:	50                   	push   eax
c000be92:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000be95:	89 1d f0 67 02 c0    	mov    DWORD PTR ds:0xc00267f0,ebx
c000be9b:	c6 05 f8 67 02 c0 43 	mov    BYTE PTR ds:0xc00267f8,0x43
c000bea2:	c1 eb 08             	shr    ebx,0x8
c000bea5:	a3 f4 67 02 c0       	mov    ds:0xc00267f4,eax
c000beaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bead:	c7 05 ec 67 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00267ec,0x8
c000beb7:	e8 fb dd ff ff       	call   c0009cb7 <malloc>
c000bebc:	83 c4 0c             	add    esp,0xc
c000bebf:	89 c1                	mov    ecx,eax
c000bec1:	a3 d0 74 02 c0       	mov    ds:0xc00274d0,eax
c000bec6:	31 d2                	xor    edx,edx
c000bec8:	a1 f0 67 02 c0       	mov    eax,ds:0xc00267f0
c000becd:	f7 35 ec 67 02 c0    	div    DWORD PTR ds:0xc00267ec
c000bed3:	c1 e8 05             	shr    eax,0x5
c000bed6:	50                   	push   eax
c000bed7:	6a 00                	push   0x0
c000bed9:	51                   	push   ecx
c000beda:	e8 9d 47 ff ff       	call   c000067c <memset>
c000bedf:	83 c4 18             	add    esp,0x18
c000bee2:	5b                   	pop    ebx
c000bee3:	c3                   	ret    

c000bee4 <VAS::VAS(VAS*)>:
c000bee4:	83 ec 0c             	sub    esp,0xc
c000bee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beeb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bef6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000befd:	83 ec 0c             	sub    esp,0xc
c000bf00:	68 8c 39 02 c0       	push   0xc002398c
c000bf05:	e8 fd 7e 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000bf0a:	83 c4 10             	add    esp,0x10
c000bf0d:	90                   	nop
c000bf0e:	83 c4 0c             	add    esp,0xc
c000bf11:	c3                   	ret    

c000bf12 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bf12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf16:	89 c2                	mov    edx,eax
c000bf18:	c1 e8 0a             	shr    eax,0xa
c000bf1b:	c1 ea 16             	shr    edx,0x16
c000bf1e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bf23:	19 c9                	sbb    ecx,ecx
c000bf25:	c1 e2 0c             	shl    edx,0xc
c000bf28:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bf2e:	25 fc 0f 00 00       	and    eax,0xffc
c000bf33:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bf3a:	01 d0                	add    eax,edx
c000bf3c:	c3                   	ret    
c000bf3d:	90                   	nop

c000bf3e <VAS::getPageTableEntry(unsigned long)>:
c000bf3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bf42:	89 ca                	mov    edx,ecx
c000bf44:	c1 e9 0a             	shr    ecx,0xa
c000bf47:	c1 ea 16             	shr    edx,0x16
c000bf4a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bf50:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bf56:	c1 e0 0c             	shl    eax,0xc
c000bf59:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bf5c:	c3                   	ret    

c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>:
c000bf5d:	57                   	push   edi
c000bf5e:	56                   	push   esi
c000bf5f:	be 01 00 00 00       	mov    esi,0x1
c000bf64:	53                   	push   ebx
c000bf65:	83 ec 10             	sub    esp,0x10
c000bf68:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bf6c:	c1 eb 0c             	shr    ebx,0xc
c000bf6f:	eb 3f                	jmp    c000bfb0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bf71:	83 ec 08             	sub    esp,0x8
c000bf74:	57                   	push   edi
c000bf75:	ff 35 d4 74 02 c0    	push   DWORD PTR ds:0xc00274d4
c000bf7b:	e8 be ff ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000bf80:	83 c4 10             	add    esp,0x10
c000bf83:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf85:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bf89:	f6 c4 04             	test   ah,0x4
c000bf8c:	75 5f                	jne    c000bfed <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bf8e:	80 fa 04             	cmp    dl,0x4
c000bf91:	74 78                	je     c000c00b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bf93:	80 fa 02             	cmp    dl,0x2
c000bf96:	0f 84 88 00 00 00    	je     c000c024 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bf9c:	80 fa 03             	cmp    dl,0x3
c000bf9f:	0f 84 ad 00 00 00    	je     c000c052 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bfa5:	fe ca                	dec    dl
c000bfa7:	0f 84 92 00 00 00    	je     c000c03f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bfad:	43                   	inc    ebx
c000bfae:	31 f6                	xor    esi,esi
c000bfb0:	53                   	push   ebx
c000bfb1:	89 df                	mov    edi,ebx
c000bfb3:	e8 8d fc ff ff       	call   c000bc45 <Virt::getPageState(unsigned long)>
c000bfb8:	c1 e7 0c             	shl    edi,0xc
c000bfbb:	59                   	pop    ecx
c000bfbc:	84 c0                	test   al,al
c000bfbe:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bfc2:	75 ad                	jne    c000bf71 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bfc4:	83 ec 0c             	sub    esp,0xc
c000bfc7:	68 52 3b 02 c0       	push   0xc0023b52
c000bfcc:	e8 36 7e 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000bfd1:	58                   	pop    eax
c000bfd2:	5a                   	pop    edx
c000bfd3:	57                   	push   edi
c000bfd4:	ff 35 d4 74 02 c0    	push   DWORD PTR ds:0xc00274d4
c000bfda:	e8 5f ff ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000bfdf:	83 c4 10             	add    esp,0x10
c000bfe2:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfe4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bfe8:	f6 c4 04             	test   ah,0x4
c000bfeb:	74 c0                	je     c000bfad <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bfed:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bff1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bff6:	83 ec 0c             	sub    esp,0xc
c000bff9:	50                   	push   eax
c000bffa:	e8 ec e2 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000c006:	80 fa 04             	cmp    dl,0x4
c000c009:	75 88                	jne    c000bf93 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000c00b:	89 f0                	mov    eax,esi
c000c00d:	84 c0                	test   al,al
c000c00f:	75 47                	jne    c000c058 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000c011:	c7 44 24 20 b0 39 02 c0 	mov    DWORD PTR [esp+0x20],0xc00239b0
c000c019:	83 c4 10             	add    esp,0x10
c000c01c:	5b                   	pop    ebx
c000c01d:	5e                   	pop    esi
c000c01e:	5f                   	pop    edi
c000c01f:	e9 e3 7d 00 00       	jmp    c0013e07 <Krnl::panic(char const*)>
c000c024:	89 f0                	mov    eax,esi
c000c026:	84 c0                	test   al,al
c000c028:	75 15                	jne    c000c03f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000c02a:	83 ec 0c             	sub    esp,0xc
c000c02d:	68 6e 3b 02 c0       	push   0xc0023b6e
c000c032:	e8 d0 7d 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000c037:	83 c4 10             	add    esp,0x10
c000c03a:	e9 6e ff ff ff       	jmp    c000bfad <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c03f:	83 ec 08             	sub    esp,0x8
c000c042:	6a 00                	push   0x0
c000c044:	53                   	push   ebx
c000c045:	e8 c6 fb ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c04a:	83 c4 10             	add    esp,0x10
c000c04d:	e9 5b ff ff ff       	jmp    c000bfad <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000c052:	89 f0                	mov    eax,esi
c000c054:	84 c0                	test   al,al
c000c056:	75 15                	jne    c000c06d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000c058:	83 ec 08             	sub    esp,0x8
c000c05b:	6a 00                	push   0x0
c000c05d:	53                   	push   ebx
c000c05e:	e8 ad fb ff ff       	call   c000bc10 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	83 c4 10             	add    esp,0x10
c000c069:	5b                   	pop    ebx
c000c06a:	5e                   	pop    esi
c000c06b:	5f                   	pop    edi
c000c06c:	c3                   	ret    
c000c06d:	c7 44 24 20 8a 3b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0023b8a
c000c075:	83 c4 10             	add    esp,0x10
c000c078:	5b                   	pop    ebx
c000c079:	5e                   	pop    esi
c000c07a:	5f                   	pop    edi
c000c07b:	e9 87 7d 00 00       	jmp    c0013e07 <Krnl::panic(char const*)>

c000c080 <VAS::freeAllocatedPages(unsigned long)>:
c000c080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c084:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c088:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000c08c:	74 09                	je     c000c097 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000c08e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c092:	e9 c6 fe ff ff       	jmp    c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c000c097:	c7 44 24 04 d4 39 02 c0 	mov    DWORD PTR [esp+0x4],0xc00239d4
c000c09f:	e9 21 0f 00 00       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>

c000c0a4 <VAS::virtualToPhysical(unsigned long)>:
c000c0a4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c0a8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c0ac:	e8 8d fe ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000c0b1:	5a                   	pop    edx
c000c0b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0b4:	59                   	pop    ecx
c000c0b5:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c0ba:	c3                   	ret    
c000c0bb:	90                   	nop

c000c0bc <VAS::reflagRange(unsigned long, int, int, int)>:
c000c0bc:	55                   	push   ebp
c000c0bd:	57                   	push   edi
c000c0be:	56                   	push   esi
c000c0bf:	53                   	push   ebx
c000c0c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c0c4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c0c8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c0cc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c0d0:	85 db                	test   ebx,ebx
c000c0d2:	7e 22                	jle    c000c0f6 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000c0d4:	c1 e3 0c             	shl    ebx,0xc
c000c0d7:	01 f3                	add    ebx,esi
c000c0d9:	56                   	push   esi
c000c0da:	81 c6 00 10 00 00    	add    esi,0x1000
c000c0e0:	55                   	push   ebp
c000c0e1:	e8 58 fe ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000c0e6:	5a                   	pop    edx
c000c0e7:	59                   	pop    ecx
c000c0e8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c0ea:	21 f9                	and    ecx,edi
c000c0ec:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000c0f0:	39 f3                	cmp    ebx,esi
c000c0f2:	89 08                	mov    DWORD PTR [eax],ecx
c000c0f4:	75 e3                	jne    c000c0d9 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000c0f6:	5b                   	pop    ebx
c000c0f7:	5e                   	pop    esi
c000c0f8:	5f                   	pop    edi
c000c0f9:	5d                   	pop    ebp
c000c0fa:	c3                   	ret    
c000c0fb:	90                   	nop

c000c0fc <VAS::setToWriteCombining(unsigned long, int)>:
c000c0fc:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c000c101:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c107:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c000c10e:	75 01                	jne    c000c111 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000c110:	c3                   	ret    
c000c111:	68 80 00 00 00       	push   0x80
c000c116:	6a ff                	push   0xffffffff
c000c118:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c11c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c120:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c124:	e8 93 ff ff ff       	call   c000c0bc <VAS::reflagRange(unsigned long, int, int, int)>
c000c129:	83 c4 14             	add    esp,0x14
c000c12c:	c3                   	ret    
c000c12d:	90                   	nop

c000c12e <VAS::mapOtherVASIn(bool, VAS*)>:
c000c12e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000c133:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c137:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c13a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c13e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000c141:	19 c0                	sbb    eax,eax
c000c143:	83 ca 03             	or     edx,0x3
c000c146:	83 e0 fc             	and    eax,0xfffffffc
c000c149:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000c150:	0f 20 d8             	mov    eax,cr3
c000c153:	0f 22 d8             	mov    cr3,eax
c000c156:	c3                   	ret    
c000c157:	90                   	nop

c000c158 <VAS::~VAS()>:
c000c158:	83 ec 2c             	sub    esp,0x2c
c000c15b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c163:	fa                   	cli    
c000c164:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000c169:	40                   	inc    eax
c000c16a:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000c16f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c174:	8b 00                	mov    eax,DWORD PTR [eax]
c000c176:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c179:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c17f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c183:	6a 01                	push   0x1
c000c185:	50                   	push   eax
c000c186:	e8 a3 ff ff ff       	call   c000c12e <VAS::mapOtherVASIn(bool, VAS*)>
c000c18b:	83 c4 0c             	add    esp,0xc
c000c18e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c196:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000c19e:	0f 8f d4 00 00 00    	jg     c000c278 <VAS::~VAS()+0x120>
c000c1a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c1a8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c1ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c1af:	c1 e2 02             	shl    edx,0x2
c000c1b2:	01 d0                	add    eax,edx
c000c1b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1be:	83 e0 01             	and    eax,0x1
c000c1c1:	0f 84 a8 00 00 00    	je     c000c26f <VAS::~VAS()+0x117>
c000c1c7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c1cf:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000c1d7:	7f 72                	jg     c000c24b <VAS::~VAS()+0xf3>
c000c1d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c1dd:	c1 e0 0a             	shl    eax,0xa
c000c1e0:	89 c2                	mov    edx,eax
c000c1e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c1e6:	01 d0                	add    eax,edx
c000c1e8:	c1 e0 0c             	shl    eax,0xc
c000c1eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1ef:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c1f4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c1f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c1f9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000c1ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c203:	6a 01                	push   0x1
c000c205:	50                   	push   eax
c000c206:	e8 07 fd ff ff       	call   c000bf12 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000c20b:	83 c4 0c             	add    esp,0xc
c000c20e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c212:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c216:	8b 00                	mov    eax,DWORD PTR [eax]
c000c218:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c21c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c220:	25 01 04 00 00       	and    eax,0x401
c000c225:	3d 01 04 00 00       	cmp    eax,0x401
c000c22a:	75 19                	jne    c000c245 <VAS::~VAS()+0xed>
c000c22c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c230:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c235:	83 ec 0c             	sub    esp,0xc
c000c238:	50                   	push   eax
c000c239:	e8 ad e0 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000c23e:	83 c4 10             	add    esp,0x10
c000c241:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c245:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000c249:	eb 84                	jmp    c000c1cf <VAS::~VAS()+0x77>
c000c24b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c24f:	25 00 04 00 00       	and    eax,0x400
c000c254:	74 19                	je     c000c26f <VAS::~VAS()+0x117>
c000c256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c25a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c25f:	83 ec 0c             	sub    esp,0xc
c000c262:	50                   	push   eax
c000c263:	e8 83 e0 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000c268:	83 c4 10             	add    esp,0x10
c000c26b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c26f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c273:	e9 1e ff ff ff       	jmp    c000c196 <VAS::~VAS()+0x3e>
c000c278:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c27c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c27f:	83 ec 0c             	sub    esp,0xc
c000c282:	50                   	push   eax
c000c283:	e8 d5 fc ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c000c288:	83 c4 10             	add    esp,0x10
c000c28b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c28f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c292:	83 ec 0c             	sub    esp,0xc
c000c295:	50                   	push   eax
c000c296:	e8 50 e0 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000c29b:	83 c4 10             	add    esp,0x10
c000c29e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c2a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c2a6:	c1 e0 02             	shl    eax,0x2
c000c2a9:	83 ec 08             	sub    esp,0x8
c000c2ac:	50                   	push   eax
c000c2ad:	68 f8 39 02 c0       	push   0xc00239f8
c000c2b2:	e8 0e 0d 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000c2b7:	83 c4 10             	add    esp,0x10
c000c2ba:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000c2bf:	48                   	dec    eax
c000c2c0:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000c2c5:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000c2ca:	85 c0                	test   eax,eax
c000c2cc:	75 01                	jne    c000c2cf <VAS::~VAS()+0x177>
c000c2ce:	fb                   	sti    
c000c2cf:	90                   	nop
c000c2d0:	83 c4 2c             	add    esp,0x2c
c000c2d3:	c3                   	ret    

c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c2d4:	55                   	push   ebp
c000c2d5:	57                   	push   edi
c000c2d6:	56                   	push   esi
c000c2d7:	53                   	push   ebx
c000c2d8:	83 ec 1c             	sub    esp,0x1c
c000c2db:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c2df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c2e3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c2e9:	77 0b                	ja     c000c2f6 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000c2eb:	0f 20 d8             	mov    eax,cr3
c000c2ee:	0f 20 d8             	mov    eax,cr3
c000c2f1:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c2f4:	75 47                	jne    c000c33d <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000c2f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c2fa:	09 d8                	or     eax,ebx
c000c2fc:	a9 ff 0f 00 00       	test   eax,0xfff
c000c301:	75 57                	jne    c000c35a <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c000c303:	89 de                	mov    esi,ebx
c000c305:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c308:	c1 ee 16             	shr    esi,0x16
c000c30b:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c312:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c316:	74 54                	je     c000c36c <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000c318:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c31c:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c322:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c326:	c1 e6 0c             	shl    esi,0xc
c000c329:	c1 eb 0a             	shr    ebx,0xa
c000c32c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c332:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c335:	83 c4 1c             	add    esp,0x1c
c000c338:	5b                   	pop    ebx
c000c339:	5e                   	pop    esi
c000c33a:	5f                   	pop    edi
c000c33b:	5d                   	pop    ebp
c000c33c:	c3                   	ret    
c000c33d:	83 ec 0c             	sub    esp,0xc
c000c340:	68 18 3a 02 c0       	push   0xc0023a18
c000c345:	e8 7b 0c 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000c34a:	83 c4 10             	add    esp,0x10
c000c34d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c351:	09 d8                	or     eax,ebx
c000c353:	a9 ff 0f 00 00       	test   eax,0xfff
c000c358:	74 a9                	je     c000c303 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000c35a:	83 ec 0c             	sub    esp,0xc
c000c35d:	68 80 3a 02 c0       	push   0xc0023a80
c000c362:	e8 a0 7a 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000c367:	83 c4 10             	add    esp,0x10
c000c36a:	eb 97                	jmp    c000c303 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000c36c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c370:	e8 f9 df ff ff       	call   c000a36e <Phys::allocatePage()>
c000c375:	83 ec 0c             	sub    esp,0xc
c000c378:	89 c5                	mov    ebp,eax
c000c37a:	8b 0d d4 74 02 c0    	mov    ecx,DWORD PTR ds:0xc00274d4
c000c380:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c384:	6a 01                	push   0x1
c000c386:	e8 de f8 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000c38b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c392:	6a 01                	push   0x1
c000c394:	50                   	push   eax
c000c395:	55                   	push   ebp
c000c396:	81 cd 07 04 00 00    	or     ebp,0x407
c000c39c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c3a0:	51                   	push   ecx
c000c3a1:	e8 26 02 00 00       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c3a6:	83 c4 1c             	add    esp,0x1c
c000c3a9:	68 00 10 00 00       	push   0x1000
c000c3ae:	6a 00                	push   0x0
c000c3b0:	50                   	push   eax
c000c3b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c3b5:	e8 c2 42 ff ff       	call   c000067c <memset>
c000c3ba:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c3be:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c3c1:	e8 97 fb ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c000c3c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ca:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c3cd:	83 c4 10             	add    esp,0x10
c000c3d0:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c3d3:	e9 40 ff ff ff       	jmp    c000c318 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c000c3d8 <VAS::allocatePages(int, int)>:
c000c3d8:	55                   	push   ebp
c000c3d9:	57                   	push   edi
c000c3da:	56                   	push   esi
c000c3db:	53                   	push   ebx
c000c3dc:	83 ec 1c             	sub    esp,0x1c
c000c3df:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c3e3:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c000c3e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3ee:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000c3f4:	83 e0 01             	and    eax,0x1
c000c3f7:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c3fb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c3ff:	0f 85 cc 00 00 00    	jne    c000c4d1 <VAS::allocatePages(int, int)+0xf9>
c000c405:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c408:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c40c:	85 c0                	test   eax,eax
c000c40e:	0f 84 a1 00 00 00    	je     c000c4b5 <VAS::allocatePages(int, int)+0xdd>
c000c414:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c418:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c41c:	c1 e6 0c             	shl    esi,0xc
c000c41f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c423:	85 c0                	test   eax,eax
c000c425:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c428:	7e 33                	jle    c000c45d <VAS::allocatePages(int, int)+0x85>
c000c42a:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c42e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c432:	81 cd 00 04 00 00    	or     ebp,0x400
c000c438:	e8 31 df ff ff       	call   c000a36e <Phys::allocatePage()>
c000c43d:	55                   	push   ebp
c000c43e:	53                   	push   ebx
c000c43f:	50                   	push   eax
c000c440:	57                   	push   edi
c000c441:	e8 8e fe ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c446:	83 c4 10             	add    esp,0x10
c000c449:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c44e:	74 03                	je     c000c453 <VAS::allocatePages(int, int)+0x7b>
c000c450:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c453:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c459:	39 de                	cmp    esi,ebx
c000c45b:	75 db                	jne    c000c438 <VAS::allocatePages(int, int)+0x60>
c000c45d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c462:	75 12                	jne    c000c476 <VAS::allocatePages(int, int)+0x9e>
c000c464:	0f 20 d8             	mov    eax,cr3
c000c467:	0f 22 d8             	mov    cr3,eax
c000c46a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c46e:	83 c4 1c             	add    esp,0x1c
c000c471:	5b                   	pop    ebx
c000c472:	5e                   	pop    esi
c000c473:	5f                   	pop    edi
c000c474:	5d                   	pop    ebp
c000c475:	c3                   	ret    
c000c476:	c1 ee 0a             	shr    esi,0xa
c000c479:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c47d:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c483:	c1 eb 0a             	shr    ebx,0xa
c000c486:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c48c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c492:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c498:	39 c3                	cmp    ebx,eax
c000c49a:	77 ce                	ja     c000c46a <VAS::allocatePages(int, int)+0x92>
c000c49c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c49f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c4a5:	39 d8                	cmp    eax,ebx
c000c4a7:	73 f3                	jae    c000c49c <VAS::allocatePages(int, int)+0xc4>
c000c4a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c4ad:	83 c4 1c             	add    esp,0x1c
c000c4b0:	5b                   	pop    ebx
c000c4b1:	5e                   	pop    esi
c000c4b2:	5f                   	pop    edi
c000c4b3:	5d                   	pop    ebp
c000c4b4:	c3                   	ret    
c000c4b5:	83 ec 0c             	sub    esp,0xc
c000c4b8:	68 a4 3a 02 c0       	push   0xc0023aa4
c000c4bd:	e8 45 79 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000c4c2:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c4c5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c4c9:	83 c4 10             	add    esp,0x10
c000c4cc:	e9 43 ff ff ff       	jmp    c000c414 <VAS::allocatePages(int, int)+0x3c>
c000c4d1:	83 ec 0c             	sub    esp,0xc
c000c4d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c4d8:	e8 8c f7 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000c4dd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c4e1:	83 c4 10             	add    esp,0x10
c000c4e4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c4e9:	0f 87 9b 00 00 00    	ja     c000c58a <VAS::allocatePages(int, int)+0x1b2>
c000c4ef:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c4f3:	85 d2                	test   edx,edx
c000c4f5:	7e 3c                	jle    c000c533 <VAS::allocatePages(int, int)+0x15b>
c000c4f7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c4fb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c4ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c503:	c1 e5 0c             	shl    ebp,0xc
c000c506:	81 ce 00 04 00 00    	or     esi,0x400
c000c50c:	01 dd                	add    ebp,ebx
c000c50e:	e8 5b de ff ff       	call   c000a36e <Phys::allocatePage()>
c000c513:	56                   	push   esi
c000c514:	53                   	push   ebx
c000c515:	50                   	push   eax
c000c516:	57                   	push   edi
c000c517:	e8 b8 fd ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c51c:	83 c4 10             	add    esp,0x10
c000c51f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c524:	74 03                	je     c000c529 <VAS::allocatePages(int, int)+0x151>
c000c526:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c529:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c52f:	39 dd                	cmp    ebp,ebx
c000c531:	75 db                	jne    c000c50e <VAS::allocatePages(int, int)+0x136>
c000c533:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c538:	0f 84 26 ff ff ff    	je     c000c464 <VAS::allocatePages(int, int)+0x8c>
c000c53e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c542:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c546:	89 d3                	mov    ebx,edx
c000c548:	c1 e0 0c             	shl    eax,0xc
c000c54b:	c1 eb 0a             	shr    ebx,0xa
c000c54e:	01 d0                	add    eax,edx
c000c550:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c556:	c1 e8 0a             	shr    eax,0xa
c000c559:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c55f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c564:	2d 00 00 40 00       	sub    eax,0x400000
c000c569:	39 c3                	cmp    ebx,eax
c000c56b:	0f 87 f9 fe ff ff    	ja     c000c46a <VAS::allocatePages(int, int)+0x92>
c000c571:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c574:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c57a:	39 d8                	cmp    eax,ebx
c000c57c:	73 f3                	jae    c000c571 <VAS::allocatePages(int, int)+0x199>
c000c57e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c582:	83 c4 1c             	add    esp,0x1c
c000c585:	5b                   	pop    ebx
c000c586:	5e                   	pop    esi
c000c587:	5f                   	pop    edi
c000c588:	5d                   	pop    ebp
c000c589:	c3                   	ret    
c000c58a:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c000c58f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c595:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c000c59c:	0f 84 4d ff ff ff    	je     c000c4ef <VAS::allocatePages(int, int)+0x117>
c000c5a2:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c5aa:	e9 40 ff ff ff       	jmp    c000c4ef <VAS::allocatePages(int, int)+0x117>
c000c5af:	90                   	nop

c000c5b0 <VAS::setCPUSpecific(unsigned long)>:
c000c5b0:	83 ec 0c             	sub    esp,0xc
c000c5b3:	6a 05                	push   0x5
c000c5b5:	68 00 00 40 c2       	push   0xc2400000
c000c5ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5c2:	e8 0d fd ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c5c7:	83 c4 1c             	add    esp,0x1c
c000c5ca:	c3                   	ret    
c000c5cb:	90                   	nop

c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c5cc:	55                   	push   ebp
c000c5cd:	57                   	push   edi
c000c5ce:	56                   	push   esi
c000c5cf:	53                   	push   ebx
c000c5d0:	83 ec 1c             	sub    esp,0x1c
c000c5d3:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c000c5d8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c5dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5e2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c5e6:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c000c5ec:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c5f0:	83 e0 01             	and    eax,0x1
c000c5f3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c5f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c5fb:	85 c0                	test   eax,eax
c000c5fd:	7e 39                	jle    c000c638 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c5ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c603:	89 f3                	mov    ebx,esi
c000c605:	c1 e0 0c             	shl    eax,0xc
c000c608:	01 f0                	add    eax,esi
c000c60a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c60e:	55                   	push   ebp
c000c60f:	53                   	push   ebx
c000c610:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c614:	29 f0                	sub    eax,esi
c000c616:	01 d8                	add    eax,ebx
c000c618:	50                   	push   eax
c000c619:	57                   	push   edi
c000c61a:	e8 b5 fc ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c627:	74 03                	je     c000c62c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c629:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c62c:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c632:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c636:	75 d6                	jne    c000c60e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c638:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c63d:	75 10                	jne    c000c64f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c63f:	0f 20 d8             	mov    eax,cr3
c000c642:	0f 22 d8             	mov    cr3,eax
c000c645:	83 c4 1c             	add    esp,0x1c
c000c648:	89 f0                	mov    eax,esi
c000c64a:	5b                   	pop    ebx
c000c64b:	5e                   	pop    esi
c000c64c:	5f                   	pop    edi
c000c64d:	5d                   	pop    ebp
c000c64e:	c3                   	ret    
c000c64f:	89 f3                	mov    ebx,esi
c000c651:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c655:	c1 eb 0a             	shr    ebx,0xa
c000c658:	c1 e0 0c             	shl    eax,0xc
c000c65b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c661:	01 f0                	add    eax,esi
c000c663:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c669:	c1 e8 0a             	shr    eax,0xa
c000c66c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c671:	2d 00 00 40 00       	sub    eax,0x400000
c000c676:	39 c3                	cmp    ebx,eax
c000c678:	77 cb                	ja     c000c645 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c67a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c67d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c683:	39 d8                	cmp    eax,ebx
c000c685:	73 f3                	jae    c000c67a <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c687:	83 c4 1c             	add    esp,0x1c
c000c68a:	89 f0                	mov    eax,esi
c000c68c:	5b                   	pop    ebx
c000c68d:	5e                   	pop    esi
c000c68e:	5f                   	pop    edi
c000c68f:	5d                   	pop    ebp
c000c690:	c3                   	ret    
c000c691:	90                   	nop

c000c692 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c692:	55                   	push   ebp
c000c693:	57                   	push   edi
c000c694:	56                   	push   esi
c000c695:	53                   	push   ebx
c000c696:	83 ec 1c             	sub    esp,0x1c
c000c699:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c69d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c6a1:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c6a5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c6a9:	a9 ff 0f 00 00       	test   eax,0xfff
c000c6ae:	75 4a                	jne    c000c6fa <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c6b0:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c6b4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c6b7:	c1 eb 16             	shr    ebx,0x16
c000c6ba:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c6c1:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c6c5:	74 4d                	je     c000c714 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c6c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6cb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c6cf:	c1 e8 0a             	shr    eax,0xa
c000c6d2:	80 fa 01             	cmp    dl,0x1
c000c6d5:	19 d2                	sbb    edx,edx
c000c6d7:	c1 e3 0c             	shl    ebx,0xc
c000c6da:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c6de:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c6e4:	25 fc 0f 00 00       	and    eax,0xffc
c000c6e9:	01 d8                	add    eax,ebx
c000c6eb:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c6f2:	83 c4 1c             	add    esp,0x1c
c000c6f5:	5b                   	pop    ebx
c000c6f6:	5e                   	pop    esi
c000c6f7:	5f                   	pop    edi
c000c6f8:	5d                   	pop    ebp
c000c6f9:	c3                   	ret    
c000c6fa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c6fe:	83 ec 0c             	sub    esp,0xc
c000c701:	68 d0 3a 02 c0       	push   0xc0023ad0
c000c706:	e8 fc 76 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000c70b:	83 c4 10             	add    esp,0x10
c000c70e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c712:	eb 9c                	jmp    c000c6b0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c714:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c718:	e8 51 dc ff ff       	call   c000a36e <Phys::allocatePage()>
c000c71d:	83 ec 0c             	sub    esp,0xc
c000c720:	89 c5                	mov    ebp,eax
c000c722:	8b 0d d4 74 02 c0    	mov    ecx,DWORD PTR ds:0xc00274d4
c000c728:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c72c:	6a 01                	push   0x1
c000c72e:	e8 36 f5 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000c733:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c73a:	6a 01                	push   0x1
c000c73c:	50                   	push   eax
c000c73d:	55                   	push   ebp
c000c73e:	81 cd 07 04 00 00    	or     ebp,0x407
c000c744:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c748:	51                   	push   ecx
c000c749:	e8 7e fe ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c74e:	83 c4 1c             	add    esp,0x1c
c000c751:	68 00 10 00 00       	push   0x1000
c000c756:	6a 00                	push   0x0
c000c758:	50                   	push   eax
c000c759:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c75d:	e8 1a 3f ff ff       	call   c000067c <memset>
c000c762:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c766:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c769:	e8 ef f7 ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c000c76e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c771:	83 c4 10             	add    esp,0x10
c000c774:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c777:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c77b:	e9 47 ff ff ff       	jmp    c000c6c7 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c780 <VAS::VAS(bool)>:
c000c780:	53                   	push   ebx
c000c781:	83 ec 28             	sub    esp,0x28
c000c784:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c788:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c78c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c790:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c79b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c7a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7a6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c7aa:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c7ad:	e8 bc db ff ff       	call   c000a36e <Phys::allocatePage()>
c000c7b2:	89 c2                	mov    edx,eax
c000c7b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7b8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c7bb:	8b 1d d4 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274d4
c000c7c1:	83 ec 0c             	sub    esp,0xc
c000c7c4:	6a 01                	push   0x1
c000c7c6:	e8 9e f4 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c000c7cb:	83 c4 10             	add    esp,0x10
c000c7ce:	89 c2                	mov    edx,eax
c000c7d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c7d7:	83 ec 0c             	sub    esp,0xc
c000c7da:	6a 03                	push   0x3
c000c7dc:	6a 01                	push   0x1
c000c7de:	52                   	push   edx
c000c7df:	50                   	push   eax
c000c7e0:	53                   	push   ebx
c000c7e1:	e8 e6 fd ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c7e6:	83 c4 20             	add    esp,0x20
c000c7e9:	89 c2                	mov    edx,eax
c000c7eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7ef:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c7f2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c7fa:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c802:	7f 1c                	jg     c000c820 <VAS::VAS(bool)+0xa0>
c000c804:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c808:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c80b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c80f:	c1 e2 02             	shl    edx,0x2
c000c812:	01 d0                	add    eax,edx
c000c814:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c81a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c81e:	eb da                	jmp    c000c7fa <VAS::VAS(bool)+0x7a>
c000c820:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c828:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c830:	7f 7a                	jg     c000c8ac <VAS::VAS(bool)+0x12c>
c000c832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c836:	2d 00 02 00 00       	sub    eax,0x200
c000c83b:	c1 e0 0c             	shl    eax,0xc
c000c83e:	83 c8 03             	or     eax,0x3
c000c841:	89 c2                	mov    edx,eax
c000c843:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c000c848:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c84e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000c854:	83 e0 10             	and    eax,0x10
c000c857:	84 c0                	test   al,al
c000c859:	74 07                	je     c000c862 <VAS::VAS(bool)+0xe2>
c000c85b:	b8 00 01 00 00       	mov    eax,0x100
c000c860:	eb 05                	jmp    c000c867 <VAS::VAS(bool)+0xe7>
c000c862:	b8 00 00 00 00       	mov    eax,0x0
c000c867:	09 d0                	or     eax,edx
c000c869:	89 c1                	mov    ecx,eax
c000c86b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c86f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c872:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c876:	c1 e2 02             	shl    edx,0x2
c000c879:	01 d0                	add    eax,edx
c000c87b:	89 ca                	mov    edx,ecx
c000c87d:	89 10                	mov    DWORD PTR [eax],edx
c000c87f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c883:	2d 40 03 00 00       	sub    eax,0x340
c000c888:	83 f8 7f             	cmp    eax,0x7f
c000c88b:	77 16                	ja     c000c8a3 <VAS::VAS(bool)+0x123>
c000c88d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c891:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c894:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c898:	c1 e2 02             	shl    edx,0x2
c000c89b:	01 d0                	add    eax,edx
c000c89d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c8a3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c8a7:	e9 7c ff ff ff       	jmp    c000c828 <VAS::VAS(bool)+0xa8>
c000c8ac:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c000c8b1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c8b7:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000c8bd:	83 e0 10             	and    eax,0x10
c000c8c0:	84 c0                	test   al,al
c000c8c2:	74 07                	je     c000c8cb <VAS::VAS(bool)+0x14b>
c000c8c4:	b8 03 41 00 00       	mov    eax,0x4103
c000c8c9:	eb 05                	jmp    c000c8d0 <VAS::VAS(bool)+0x150>
c000c8cb:	b8 03 40 00 00       	mov    eax,0x4003
c000c8d0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c8d4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c8d7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c8dd:	89 02                	mov    DWORD PTR [edx],eax
c000c8df:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c000c8e4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c8ea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c8f0:	83 ec 08             	sub    esp,0x8
c000c8f3:	50                   	push   eax
c000c8f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c8f8:	e8 b3 fc ff ff       	call   c000c5b0 <VAS::setCPUSpecific(unsigned long)>
c000c8fd:	83 c4 10             	add    esp,0x10
c000c900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c904:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c907:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c000c90c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c912:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000c918:	83 e0 10             	and    eax,0x10
c000c91b:	84 c0                	test   al,al
c000c91d:	74 07                	je     c000c926 <VAS::VAS(bool)+0x1a6>
c000c91f:	b8 00 01 00 00       	mov    eax,0x100
c000c924:	eb 05                	jmp    c000c92b <VAS::VAS(bool)+0x1ab>
c000c926:	b8 00 00 00 00       	mov    eax,0x0
c000c92b:	09 c2                	or     edx,eax
c000c92d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c931:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c934:	05 fc 0f 00 00       	add    eax,0xffc
c000c939:	83 ca 03             	or     edx,0x3
c000c93c:	89 10                	mov    DWORD PTR [eax],edx
c000c93e:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c000c943:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c949:	83 ec 0c             	sub    esp,0xc
c000c94c:	50                   	push   eax
c000c94d:	e8 f0 1d 00 00       	call   c000e742 <Device::getName()>
c000c952:	83 c4 10             	add    esp,0x10
c000c955:	83 ec 08             	sub    esp,0x8
c000c958:	68 a4 3b 02 c0       	push   0xc0023ba4
c000c95d:	50                   	push   eax
c000c95e:	e8 61 3e ff ff       	call   c00007c4 <strcmp>
c000c963:	83 c4 10             	add    esp,0x10
c000c966:	85 c0                	test   eax,eax
c000c968:	0f 94 c0             	sete   al
c000c96b:	84 c0                	test   al,al
c000c96d:	0f 84 87 00 00 00    	je     c000c9fa <VAS::VAS(bool)+0x27a>
c000c973:	fa                   	cli    
c000c974:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000c979:	40                   	inc    eax
c000c97a:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000c97f:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c000c984:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c98a:	05 7c 09 00 00       	add    eax,0x97c
c000c98f:	83 ec 0c             	sub    esp,0xc
c000c992:	50                   	push   eax
c000c993:	e8 0e ce ff ff       	call   c00097a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c998:	83 c4 10             	add    esp,0x10
c000c99b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c9a0:	89 c3                	mov    ebx,eax
c000c9a2:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c000c9a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c9ad:	05 7c 09 00 00       	add    eax,0x97c
c000c9b2:	83 ec 0c             	sub    esp,0xc
c000c9b5:	50                   	push   eax
c000c9b6:	e8 eb cd ff ff       	call   c00097a6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c9bb:	83 c4 10             	add    esp,0x10
c000c9be:	83 ec 08             	sub    esp,0x8
c000c9c1:	50                   	push   eax
c000c9c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9c6:	e8 73 f5 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000c9cb:	83 c4 10             	add    esp,0x10
c000c9ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9d0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c9d5:	6a 11                	push   0x11
c000c9d7:	53                   	push   ebx
c000c9d8:	50                   	push   eax
c000c9d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c9dd:	e8 f2 f8 ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c9e2:	83 c4 10             	add    esp,0x10
c000c9e5:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000c9ea:	48                   	dec    eax
c000c9eb:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000c9f0:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000c9f5:	85 c0                	test   eax,eax
c000c9f7:	75 01                	jne    c000c9fa <VAS::VAS(bool)+0x27a>
c000c9f9:	fb                   	sti    
c000c9fa:	90                   	nop
c000c9fb:	83 c4 28             	add    esp,0x28
c000c9fe:	5b                   	pop    ebx
c000c9ff:	c3                   	ret    

c000ca00 <VAS::VAS()>:
c000ca00:	53                   	push   ebx
c000ca01:	83 ec 18             	sub    esp,0x18
c000ca04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca08:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca13:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000ca1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca1e:	a3 d4 74 02 c0       	mov    ds:0xc00274d4,eax
c000ca23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca27:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000ca2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca2f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000ca32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca36:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000ca3d:	c7 44 24 0c 14 00 00 00 	mov    DWORD PTR [esp+0xc],0x14
c000ca45:	83 ec 0c             	sub    esp,0xc
c000ca48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ca4c:	e8 66 d2 ff ff       	call   c0009cb7 <malloc>
c000ca51:	83 c4 10             	add    esp,0x10
c000ca54:	89 c3                	mov    ebx,eax
c000ca56:	83 ec 08             	sub    esp,0x8
c000ca59:	6a 01                	push   0x1
c000ca5b:	53                   	push   ebx
c000ca5c:	e8 1f fd ff ff       	call   c000c780 <VAS::VAS(bool)>
c000ca61:	83 c4 10             	add    esp,0x10
c000ca64:	89 1d cc 74 02 c0    	mov    DWORD PTR ds:0xc00274cc,ebx
c000ca6a:	90                   	nop
c000ca6b:	83 c4 18             	add    esp,0x18
c000ca6e:	5b                   	pop    ebx
c000ca6f:	c3                   	ret    

c000ca70 <VAS::evict(unsigned long)>:
c000ca70:	55                   	push   ebp
c000ca71:	57                   	push   edi
c000ca72:	56                   	push   esi
c000ca73:	53                   	push   ebx
c000ca74:	83 ec 1c             	sub    esp,0x1c
c000ca77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca7b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ca7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ca83:	e8 22 f3 ff ff       	call   c000bdaa <Virt::allocateSwapfilePage()>
c000ca88:	89 c7                	mov    edi,eax
c000ca8a:	a1 ec 67 02 c0       	mov    eax,ds:0xc00267ec
c000ca8f:	85 c0                	test   eax,eax
c000ca91:	7e 3d                	jle    c000cad0 <VAS::evict(unsigned long)+0x60>
c000ca93:	89 ee                	mov    esi,ebp
c000ca95:	31 db                	xor    ebx,ebx
c000ca97:	83 ec 0c             	sub    esp,0xc
c000ca9a:	57                   	push   edi
c000ca9b:	e8 f8 f2 ff ff       	call   c000bd98 <Virt::swapIDToSector(unsigned long)>
c000caa0:	89 34 24             	mov    DWORD PTR [esp],esi
c000caa3:	01 d8                	add    eax,ebx
c000caa5:	6a 01                	push   0x1
c000caa7:	31 d2                	xor    edx,edx
c000caa9:	43                   	inc    ebx
c000caaa:	52                   	push   edx
c000caab:	81 c6 00 02 00 00    	add    esi,0x200
c000cab1:	50                   	push   eax
c000cab2:	0f be 05 f8 67 02 c0 	movsx  eax,BYTE PTR ds:0xc00267f8
c000cab9:	ff 34 85 5c 98 02 c0 	push   DWORD PTR [eax*4-0x3ffd67a4]
c000cac0:	e8 15 2d 00 00       	call   c000f7da <LogicalDisk::write(unsigned long long, int, void*)>
c000cac5:	83 c4 20             	add    esp,0x20
c000cac8:	39 1d ec 67 02 c0    	cmp    DWORD PTR ds:0xc00267ec,ebx
c000cace:	7f c7                	jg     c000ca97 <VAS::evict(unsigned long)+0x27>
c000cad0:	83 ec 08             	sub    esp,0x8
c000cad3:	c1 e7 0b             	shl    edi,0xb
c000cad6:	55                   	push   ebp
c000cad7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cadb:	e8 5e f4 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000cae0:	8b 10                	mov    edx,DWORD PTR [eax]
c000cae2:	89 d3                	mov    ebx,edx
c000cae4:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000caea:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000caf0:	09 d7                	or     edi,edx
c000caf2:	89 38                	mov    DWORD PTR [eax],edi
c000caf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000caf7:	ff 05 c8 74 02 c0    	inc    DWORD PTR ds:0xc00274c8
c000cafd:	e8 e9 d7 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c000cb02:	0f 20 d8             	mov    eax,cr3
c000cb05:	0f 22 d8             	mov    cr3,eax
c000cb08:	ff 35 c8 74 02 c0    	push   DWORD PTR ds:0xc00274c8
c000cb0e:	55                   	push   ebp
c000cb0f:	53                   	push   ebx
c000cb10:	68 f4 3a 02 c0       	push   0xc0023af4
c000cb15:	e8 ab 04 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cb1a:	a1 c4 74 02 c0       	mov    eax,ds:0xc00274c4
c000cb1f:	c7 44 24 50 b2 3b 02 c0 	mov    DWORD PTR [esp+0x50],0xc0023bb2
c000cb27:	8d 50 01             	lea    edx,[eax+0x1]
c000cb2a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000cb2e:	89 15 c4 74 02 c0    	mov    DWORD PTR ds:0xc00274c4,edx
c000cb34:	83 c4 3c             	add    esp,0x3c
c000cb37:	5b                   	pop    ebx
c000cb38:	5e                   	pop    esi
c000cb39:	5f                   	pop    edi
c000cb3a:	5d                   	pop    ebp
c000cb3b:	e9 85 04 00 00       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>

c000cb40 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000cb40:	55                   	push   ebp
c000cb41:	57                   	push   edi
c000cb42:	56                   	push   esi
c000cb43:	53                   	push   ebx
c000cb44:	83 ec 14             	sub    esp,0x14
c000cb47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4b:	68 c3 3b 02 c0       	push   0xc0023bc3
c000cb50:	e8 70 04 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cb55:	83 c4 10             	add    esp,0x10
c000cb58:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000cb5c:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000cb62:	74 20                	je     c000cb84 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cb64:	83 ec 08             	sub    esp,0x8
c000cb67:	55                   	push   ebp
c000cb68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb6c:	e8 cd f3 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000cb71:	83 c4 10             	add    esp,0x10
c000cb74:	89 c3                	mov    ebx,eax
c000cb76:	85 c0                	test   eax,eax
c000cb78:	74 0a                	je     c000cb84 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000cb7a:	8b 38                	mov    edi,DWORD PTR [eax]
c000cb7c:	f7 c7 01 00 00 00    	test   edi,0x1
c000cb82:	74 0a                	je     c000cb8e <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000cb84:	31 c0                	xor    eax,eax
c000cb86:	83 c4 0c             	add    esp,0xc
c000cb89:	5b                   	pop    ebx
c000cb8a:	5e                   	pop    esi
c000cb8b:	5f                   	pop    edi
c000cb8c:	5d                   	pop    ebp
c000cb8d:	c3                   	ret    
c000cb8e:	e8 db d7 ff ff       	call   c000a36e <Phys::allocatePage()>
c000cb93:	c1 ef 0b             	shr    edi,0xb
c000cb96:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cb98:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000cb9e:	09 c2                	or     edx,eax
c000cba0:	81 ca 01 08 00 00    	or     edx,0x801
c000cba6:	89 13                	mov    DWORD PTR [ebx],edx
c000cba8:	8b 0d ec 67 02 c0    	mov    ecx,DWORD PTR ds:0xc00267ec
c000cbae:	85 c9                	test   ecx,ecx
c000cbb0:	7e 3d                	jle    c000cbef <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000cbb2:	89 ee                	mov    esi,ebp
c000cbb4:	31 db                	xor    ebx,ebx
c000cbb6:	83 ec 0c             	sub    esp,0xc
c000cbb9:	57                   	push   edi
c000cbba:	e8 d9 f1 ff ff       	call   c000bd98 <Virt::swapIDToSector(unsigned long)>
c000cbbf:	89 34 24             	mov    DWORD PTR [esp],esi
c000cbc2:	01 d8                	add    eax,ebx
c000cbc4:	6a 01                	push   0x1
c000cbc6:	31 d2                	xor    edx,edx
c000cbc8:	43                   	inc    ebx
c000cbc9:	52                   	push   edx
c000cbca:	81 c6 00 02 00 00    	add    esi,0x200
c000cbd0:	50                   	push   eax
c000cbd1:	0f be 05 f8 67 02 c0 	movsx  eax,BYTE PTR ds:0xc00267f8
c000cbd8:	ff 34 85 5c 98 02 c0 	push   DWORD PTR [eax*4-0x3ffd67a4]
c000cbdf:	e8 8a 2b 00 00       	call   c000f76e <LogicalDisk::read(unsigned long long, int, void*)>
c000cbe4:	83 c4 20             	add    esp,0x20
c000cbe7:	39 1d ec 67 02 c0    	cmp    DWORD PTR ds:0xc00267ec,ebx
c000cbed:	7f c7                	jg     c000cbb6 <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000cbef:	a1 c8 74 02 c0       	mov    eax,ds:0xc00274c8
c000cbf4:	48                   	dec    eax
c000cbf5:	52                   	push   edx
c000cbf6:	a3 c8 74 02 c0       	mov    ds:0xc00274c8,eax
c000cbfb:	50                   	push   eax
c000cbfc:	55                   	push   ebp
c000cbfd:	68 d6 3b 02 c0       	push   0xc0023bd6
c000cc02:	e8 be 03 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cc07:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cc0a:	e8 6b f1 ff ff       	call   c000bd7a <Virt::freeSwapfilePage(unsigned long)>
c000cc0f:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000cc14:	83 c4 10             	add    esp,0x10
c000cc17:	48                   	dec    eax
c000cc18:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000cc1d:	85 c0                	test   eax,eax
c000cc1f:	74 1d                	je     c000cc3e <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000cc21:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000cc25:	25 ff 0f 00 00       	and    eax,0xfff
c000cc2a:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000cc2f:	77 10                	ja     c000cc41 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000cc31:	0f 20 d8             	mov    eax,cr3
c000cc34:	0f 22 d8             	mov    cr3,eax
c000cc37:	b0 01                	mov    al,0x1
c000cc39:	e9 48 ff ff ff       	jmp    c000cb86 <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000cc3e:	fb                   	sti    
c000cc3f:	eb e0                	jmp    c000cc21 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000cc41:	83 ec 0c             	sub    esp,0xc
c000cc44:	68 eb 3b 02 c0       	push   0xc0023beb
c000cc49:	e8 77 03 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cc4e:	83 c4 10             	add    esp,0x10
c000cc51:	eb de                	jmp    c000cc31 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000cc53:	90                   	nop

c000cc54 <VAS::scanForEviction()>:
c000cc54:	57                   	push   edi
c000cc55:	31 ff                	xor    edi,edi
c000cc57:	56                   	push   esi
c000cc58:	53                   	push   ebx
c000cc59:	83 ec 10             	sub    esp,0x10
c000cc5c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cc60:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000cc63:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000cc69:	75 0e                	jne    c000cc79 <VAS::scanForEviction()+0x25>
c000cc6b:	89 da                	mov    edx,ebx
c000cc6d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc70:	c1 ea 16             	shr    edx,0x16
c000cc73:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000cc77:	74 4e                	je     c000ccc7 <VAS::scanForEviction()+0x73>
c000cc79:	53                   	push   ebx
c000cc7a:	56                   	push   esi
c000cc7b:	e8 be f2 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000cc80:	5a                   	pop    edx
c000cc81:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc83:	59                   	pop    ecx
c000cc84:	89 d1                	mov    ecx,edx
c000cc86:	81 e1 01 08 00 00    	and    ecx,0x801
c000cc8c:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000cc92:	74 3e                	je     c000ccd2 <VAS::scanForEviction()+0x7e>
c000cc94:	81 c3 00 10 00 00    	add    ebx,0x1000
c000cc9a:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000cca0:	76 2b                	jbe    c000cccd <VAS::scanForEviction()+0x79>
c000cca2:	47                   	inc    edi
c000cca3:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000ccaa:	83 ff 03             	cmp    edi,0x3
c000ccad:	74 32                	je     c000cce1 <VAS::scanForEviction()+0x8d>
c000ccaf:	31 db                	xor    ebx,ebx
c000ccb1:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000ccb7:	75 c0                	jne    c000cc79 <VAS::scanForEviction()+0x25>
c000ccb9:	89 da                	mov    edx,ebx
c000ccbb:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ccbe:	c1 ea 16             	shr    edx,0x16
c000ccc1:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000ccc5:	75 b2                	jne    c000cc79 <VAS::scanForEviction()+0x25>
c000ccc7:	81 c3 00 00 40 00    	add    ebx,0x400000
c000cccd:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000ccd0:	eb 91                	jmp    c000cc63 <VAS::scanForEviction()+0xf>
c000ccd2:	f6 c2 20             	test   dl,0x20
c000ccd5:	74 13                	je     c000ccea <VAS::scanForEviction()+0x96>
c000ccd7:	83 e2 df             	and    edx,0xffffffdf
c000ccda:	89 10                	mov    DWORD PTR [eax],edx
c000ccdc:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ccdf:	eb b3                	jmp    c000cc94 <VAS::scanForEviction()+0x40>
c000cce1:	83 c4 10             	add    esp,0x10
c000cce4:	31 c0                	xor    eax,eax
c000cce6:	5b                   	pop    ebx
c000cce7:	5e                   	pop    esi
c000cce8:	5f                   	pop    edi
c000cce9:	c3                   	ret    
c000ccea:	83 ec 08             	sub    esp,0x8
c000cced:	89 d0                	mov    eax,edx
c000ccef:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ccf4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ccf8:	53                   	push   ebx
c000ccf9:	68 fb 3b 02 c0       	push   0xc0023bfb
c000ccfe:	e8 c2 02 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cd03:	58                   	pop    eax
c000cd04:	5a                   	pop    edx
c000cd05:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd08:	56                   	push   esi
c000cd09:	e8 62 fd ff ff       	call   c000ca70 <VAS::evict(unsigned long)>
c000cd0e:	59                   	pop    ecx
c000cd0f:	5b                   	pop    ebx
c000cd10:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000cd13:	68 0f 3c 02 c0       	push   0xc0023c0f
c000cd18:	e8 a8 02 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cd1d:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000cd24:	83 c4 10             	add    esp,0x10
c000cd27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cd2b:	83 c4 10             	add    esp,0x10
c000cd2e:	5b                   	pop    ebx
c000cd2f:	5e                   	pop    esi
c000cd30:	5f                   	pop    edi
c000cd31:	c3                   	ret    

c000cd32 <mapVASFirstTime>:
c000cd32:	55                   	push   ebp
c000cd33:	57                   	push   edi
c000cd34:	56                   	push   esi
c000cd35:	53                   	push   ebx
c000cd36:	83 ec 0c             	sub    esp,0xc
c000cd39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000cd3e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000cd41:	4a                   	dec    edx
c000cd42:	0f 84 fe 00 00 00    	je     c000ce46 <mapVASFirstTime+0x114>
c000cd48:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000cd4b:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000cd4e:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000cd53:	c1 e5 15             	shl    ebp,0x15
c000cd56:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000cd5b:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000cd61:	29 eb                	sub    ebx,ebp
c000cd63:	29 ef                	sub    edi,ebp
c000cd65:	83 ec 08             	sub    esp,0x8
c000cd68:	53                   	push   ebx
c000cd69:	68 3b 3c 02 c0       	push   0xc0023c3b
c000cd6e:	e8 52 02 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cd73:	e8 f6 d5 ff ff       	call   c000a36e <Phys::allocatePage()>
c000cd78:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cd7f:	6a 01                	push   0x1
c000cd81:	53                   	push   ebx
c000cd82:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cd88:	50                   	push   eax
c000cd89:	56                   	push   esi
c000cd8a:	e8 3d f8 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cd8f:	83 c4 20             	add    esp,0x20
c000cd92:	39 fb                	cmp    ebx,edi
c000cd94:	75 cf                	jne    c000cd65 <mapVASFirstTime+0x33>
c000cd96:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000cd9b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cda0:	29 eb                	sub    ebx,ebp
c000cda2:	29 ef                	sub    edi,ebp
c000cda4:	83 ec 08             	sub    esp,0x8
c000cda7:	53                   	push   ebx
c000cda8:	68 57 3c 02 c0       	push   0xc0023c57
c000cdad:	e8 13 02 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cdb2:	58                   	pop    eax
c000cdb3:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cdb7:	5a                   	pop    edx
c000cdb8:	19 c0                	sbb    eax,eax
c000cdba:	83 e0 04             	and    eax,0x4
c000cdbd:	05 03 04 00 00       	add    eax,0x403
c000cdc2:	50                   	push   eax
c000cdc3:	68 6b 3c 02 c0       	push   0xc0023c6b
c000cdc8:	e8 f8 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cdcd:	e8 9c d5 ff ff       	call   c000a36e <Phys::allocatePage()>
c000cdd2:	59                   	pop    ecx
c000cdd3:	89 c5                	mov    ebp,eax
c000cdd5:	58                   	pop    eax
c000cdd6:	55                   	push   ebp
c000cdd7:	68 79 3c 02 c0       	push   0xc0023c79
c000cddc:	e8 e4 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cde1:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cde5:	19 d2                	sbb    edx,edx
c000cde7:	83 e2 04             	and    edx,0x4
c000cdea:	81 c2 03 04 00 00    	add    edx,0x403
c000cdf0:	89 14 24             	mov    DWORD PTR [esp],edx
c000cdf3:	6a 01                	push   0x1
c000cdf5:	53                   	push   ebx
c000cdf6:	55                   	push   ebp
c000cdf7:	56                   	push   esi
c000cdf8:	e8 cf f7 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cdfd:	83 c4 18             	add    esp,0x18
c000ce00:	53                   	push   ebx
c000ce01:	56                   	push   esi
c000ce02:	e8 37 f1 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c000ce07:	5a                   	pop    edx
c000ce08:	59                   	pop    ecx
c000ce09:	ff 30                	push   DWORD PTR [eax]
c000ce0b:	68 95 3c 02 c0       	push   0xc0023c95
c000ce10:	e8 b0 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce15:	0f 20 d8             	mov    eax,cr3
c000ce18:	83 c4 0c             	add    esp,0xc
c000ce1b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ce21:	56                   	push   esi
c000ce22:	50                   	push   eax
c000ce23:	68 a0 3c 02 c0       	push   0xc0023ca0
c000ce28:	e8 98 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce2d:	83 c4 10             	add    esp,0x10
c000ce30:	39 df                	cmp    edi,ebx
c000ce32:	0f 85 6c ff ff ff    	jne    c000cda4 <mapVASFirstTime+0x72>
c000ce38:	0f 20 d8             	mov    eax,cr3
c000ce3b:	0f 22 d8             	mov    cr3,eax
c000ce3e:	83 c4 0c             	add    esp,0xc
c000ce41:	5b                   	pop    ebx
c000ce42:	5e                   	pop    esi
c000ce43:	5f                   	pop    edi
c000ce44:	5d                   	pop    ebp
c000ce45:	c3                   	ret    
c000ce46:	83 ec 0c             	sub    esp,0xc
c000ce49:	68 22 3c 02 c0       	push   0xc0023c22
c000ce4e:	e8 72 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce53:	83 c4 10             	add    esp,0x10
c000ce56:	83 c4 0c             	add    esp,0xc
c000ce59:	5b                   	pop    ebx
c000ce5a:	5e                   	pop    esi
c000ce5b:	5f                   	pop    edi
c000ce5c:	5d                   	pop    ebp
c000ce5d:	c3                   	ret    

c000ce5e <__cxa_atexit>:
c000ce5e:	31 c0                	xor    eax,eax
c000ce60:	c3                   	ret    

c000ce61 <__cxa_finalize>:
c000ce61:	c3                   	ret    

c000ce62 <__stack_chk_fail>:
c000ce62:	55                   	push   ebp
c000ce63:	89 e5                	mov    ebp,esp
c000ce65:	83 ec 14             	sub    esp,0x14
c000ce68:	68 b8 3c 02 c0       	push   0xc0023cb8
c000ce6d:	e8 53 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce72:	58                   	pop    eax
c000ce73:	5a                   	pop    edx
c000ce74:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ce77:	68 08 3d 02 c0       	push   0xc0023d08
c000ce7c:	e8 44 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce81:	59                   	pop    ecx
c000ce82:	58                   	pop    eax
c000ce83:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce86:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ce89:	68 08 3d 02 c0       	push   0xc0023d08
c000ce8e:	e8 32 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ce93:	5a                   	pop    edx
c000ce94:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ce97:	59                   	pop    ecx
c000ce98:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce9a:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ce9d:	68 08 3d 02 c0       	push   0xc0023d08
c000cea2:	e8 1e 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cea7:	5a                   	pop    edx
c000cea8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ceab:	59                   	pop    ecx
c000ceac:	8b 00                	mov    eax,DWORD PTR [eax]
c000ceae:	8b 00                	mov    eax,DWORD PTR [eax]
c000ceb0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000ceb3:	68 08 3d 02 c0       	push   0xc0023d08
c000ceb8:	e8 08 01 00 00       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000cebd:	c7 04 24 10 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d10
c000cec4:	e8 3e 6f 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000cec9:	83 c4 10             	add    esp,0x10
c000cecc:	c9                   	leave  
c000cecd:	c3                   	ret    

c000cece <__cxa_pure_virtual>:
c000cece:	83 ec 18             	sub    esp,0x18
c000ced1:	68 28 3d 02 c0       	push   0xc0023d28
c000ced6:	e8 2c 6f 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000cedb:	83 c4 1c             	add    esp,0x1c
c000cede:	c3                   	ret    

c000cedf <operator new[](unsigned long)>:
c000cedf:	e9 d3 cd ff ff       	jmp    c0009cb7 <malloc>

c000cee4 <operator delete(void*, unsigned long)>:
c000cee4:	e9 ee cd ff ff       	jmp    c0009cd7 <rfree>

c000cee9 <operator delete[](void*)>:
c000cee9:	e9 e9 cd ff ff       	jmp    c0009cd7 <rfree>

c000ceee <operator delete[](void*, unsigned long)>:
c000ceee:	e9 e4 cd ff ff       	jmp    c0009cd7 <rfree>

c000cef3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cef3:	55                   	push   ebp
c000cef4:	b9 11 00 00 00       	mov    ecx,0x11
c000cef9:	57                   	push   edi
c000cefa:	56                   	push   esi
c000cefb:	be 0e 38 02 c0       	mov    esi,0xc002380e
c000cf00:	53                   	push   ebx
c000cf01:	83 ec 20             	sub    esp,0x20
c000cf04:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cf08:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cf0c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cf10:	fc                   	cld    
c000cf11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cf13:	89 ee                	mov    esi,ebp
c000cf15:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cf19:	eb 02                	jmp    c000cf1d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cf1b:	89 c6                	mov    esi,eax
c000cf1d:	31 d2                	xor    edx,edx
c000cf1f:	41                   	inc    ecx
c000cf20:	89 f0                	mov    eax,esi
c000cf22:	f7 f3                	div    ebx
c000cf24:	39 de                	cmp    esi,ebx
c000cf26:	73 f3                	jae    c000cf1b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cf28:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cf2b:	eb 02                	jmp    c000cf2f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cf2d:	89 c5                	mov    ebp,eax
c000cf2f:	31 d2                	xor    edx,edx
c000cf31:	49                   	dec    ecx
c000cf32:	89 e8                	mov    eax,ebp
c000cf34:	f7 f3                	div    ebx
c000cf36:	39 dd                	cmp    ebp,ebx
c000cf38:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cf3c:	88 11                	mov    BYTE PTR [ecx],dl
c000cf3e:	73 ed                	jae    c000cf2d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cf40:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cf44:	83 c4 20             	add    esp,0x20
c000cf47:	5b                   	pop    ebx
c000cf48:	5e                   	pop    esi
c000cf49:	5f                   	pop    edi
c000cf4a:	5d                   	pop    ebp
c000cf4b:	c3                   	ret    

c000cf4c <Dbg::logc(char)>:
c000cf4c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf50:	f6 05 c0 73 02 c0 10 	test   BYTE PTR ds:0xc00273c0,0x10
c000cf57:	75 12                	jne    c000cf6b <Dbg::logc(char)+0x1f>
c000cf59:	ba fd 03 00 00       	mov    edx,0x3fd
c000cf5e:	ec                   	in     al,dx
c000cf5f:	a8 20                	test   al,0x20
c000cf61:	74 fb                	je     c000cf5e <Dbg::logc(char)+0x12>
c000cf63:	ba f8 03 00 00       	mov    edx,0x3f8
c000cf68:	88 c8                	mov    al,cl
c000cf6a:	ee                   	out    dx,al
c000cf6b:	c3                   	ret    

c000cf6c <Dbg::logs(char*)>:
c000cf6c:	53                   	push   ebx
c000cf6d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cf71:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cf74:	84 c0                	test   al,al
c000cf76:	74 0f                	je     c000cf87 <Dbg::logs(char*)+0x1b>
c000cf78:	50                   	push   eax
c000cf79:	43                   	inc    ebx
c000cf7a:	e8 cd ff ff ff       	call   c000cf4c <Dbg::logc(char)>
c000cf7f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cf82:	5a                   	pop    edx
c000cf83:	84 c0                	test   al,al
c000cf85:	75 f1                	jne    c000cf78 <Dbg::logs(char*)+0xc>
c000cf87:	5b                   	pop    ebx
c000cf88:	c3                   	ret    

c000cf89 <Dbg::logWriteInt(unsigned int)>:
c000cf89:	83 ec 10             	sub    esp,0x10
c000cf8c:	6a 0a                	push   0xa
c000cf8e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cf92:	50                   	push   eax
c000cf93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf97:	e8 57 ff ff ff       	call   c000cef3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cf9c:	50                   	push   eax
c000cf9d:	e8 ca ff ff ff       	call   c000cf6c <Dbg::logs(char*)>
c000cfa2:	83 c4 20             	add    esp,0x20
c000cfa5:	c3                   	ret    

c000cfa6 <Dbg::logWriteIntBase(unsigned int, int)>:
c000cfa6:	83 ec 10             	sub    esp,0x10
c000cfa9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfad:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cfb1:	50                   	push   eax
c000cfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb6:	e8 38 ff ff ff       	call   c000cef3 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cfbb:	50                   	push   eax
c000cfbc:	e8 ab ff ff ff       	call   c000cf6c <Dbg::logs(char*)>
c000cfc1:	83 c4 20             	add    esp,0x20
c000cfc4:	c3                   	ret    

c000cfc5 <Dbg::kprintf(char const*, ...)>:
c000cfc5:	55                   	push   ebp
c000cfc6:	57                   	push   edi
c000cfc7:	56                   	push   esi
c000cfc8:	53                   	push   ebx
c000cfc9:	83 ec 0c             	sub    esp,0xc
c000cfcc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cfd0:	f6 05 c0 73 02 c0 10 	test   BYTE PTR ds:0xc00273c0,0x10
c000cfd7:	74 08                	je     c000cfe1 <Dbg::kprintf(char const*, ...)+0x1c>
c000cfd9:	83 c4 0c             	add    esp,0xc
c000cfdc:	5b                   	pop    ebx
c000cfdd:	5e                   	pop    esi
c000cfde:	5f                   	pop    edi
c000cfdf:	5d                   	pop    ebp
c000cfe0:	c3                   	ret    
c000cfe1:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cfe5:	31 db                	xor    ebx,ebx
c000cfe7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cfeb:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cfee:	84 c0                	test   al,al
c000cff0:	74 e7                	je     c000cfd9 <Dbg::kprintf(char const*, ...)+0x14>
c000cff2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cff5:	3c 25                	cmp    al,0x25
c000cff7:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cffa:	75 44                	jne    c000d040 <Dbg::kprintf(char const*, ...)+0x7b>
c000cffc:	83 c3 02             	add    ebx,0x2
c000cfff:	8a 07                	mov    al,BYTE PTR [edi]
c000d001:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000d004:	83 e8 25             	sub    eax,0x25
c000d007:	3c 53                	cmp    al,0x53
c000d009:	0f 87 c9 00 00 00    	ja     c000d0d8 <Dbg::kprintf(char const*, ...)+0x113>
c000d00f:	0f b6 c0             	movzx  eax,al
c000d012:	ff 24 85 3c 3d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc2c4]
c000d019:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d01d:	89 c8                	mov    eax,ecx
c000d01f:	83 c1 04             	add    ecx,0x4
c000d022:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d026:	ff 30                	push   DWORD PTR [eax]
c000d028:	e8 5c ff ff ff       	call   c000cf89 <Dbg::logWriteInt(unsigned int)>
c000d02d:	5f                   	pop    edi
c000d02e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000d032:	84 c0                	test   al,al
c000d034:	74 a3                	je     c000cfd9 <Dbg::kprintf(char const*, ...)+0x14>
c000d036:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000d039:	3c 25                	cmp    al,0x25
c000d03b:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000d03e:	74 bc                	je     c000cffc <Dbg::kprintf(char const*, ...)+0x37>
c000d040:	50                   	push   eax
c000d041:	89 eb                	mov    ebx,ebp
c000d043:	e8 04 ff ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d048:	89 fd                	mov    ebp,edi
c000d04a:	58                   	pop    eax
c000d04b:	eb e1                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d04d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d051:	89 c8                	mov    eax,ecx
c000d053:	83 c1 04             	add    ecx,0x4
c000d056:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d05a:	ff 30                	push   DWORD PTR [eax]
c000d05c:	e8 0b ff ff ff       	call   c000cf6c <Dbg::logs(char*)>
c000d061:	58                   	pop    eax
c000d062:	eb ca                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d064:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d068:	89 d0                	mov    eax,edx
c000d06a:	83 c2 04             	add    edx,0x4
c000d06d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d071:	ff 30                	push   DWORD PTR [eax]
c000d073:	e8 11 ff ff ff       	call   c000cf89 <Dbg::logWriteInt(unsigned int)>
c000d078:	58                   	pop    eax
c000d079:	eb b3                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d07b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d07f:	89 d0                	mov    eax,edx
c000d081:	83 c2 04             	add    edx,0x4
c000d084:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000d087:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d08b:	50                   	push   eax
c000d08c:	e8 bb fe ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d091:	58                   	pop    eax
c000d092:	eb 9a                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d094:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d098:	89 c8                	mov    eax,ecx
c000d09a:	83 c1 04             	add    ecx,0x4
c000d09d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000d0a1:	6a 10                	push   0x10
c000d0a3:	ff 30                	push   DWORD PTR [eax]
c000d0a5:	e8 fc fe ff ff       	call   c000cfa6 <Dbg::logWriteIntBase(unsigned int, int)>
c000d0aa:	59                   	pop    ecx
c000d0ab:	5f                   	pop    edi
c000d0ac:	eb 80                	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d0ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d0b2:	89 d0                	mov    eax,edx
c000d0b4:	83 c2 08             	add    edx,0x8
c000d0b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d0bb:	6a 10                	push   0x10
c000d0bd:	ff 30                	push   DWORD PTR [eax]
c000d0bf:	e8 e2 fe ff ff       	call   c000cfa6 <Dbg::logWriteIntBase(unsigned int, int)>
c000d0c4:	58                   	pop    eax
c000d0c5:	5a                   	pop    edx
c000d0c6:	e9 63 ff ff ff       	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d0cb:	6a 25                	push   0x25
c000d0cd:	e8 7a fe ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d0d2:	58                   	pop    eax
c000d0d3:	e9 56 ff ff ff       	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d0d8:	6a 25                	push   0x25
c000d0da:	e8 6d fe ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d0df:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d0e2:	50                   	push   eax
c000d0e3:	e8 64 fe ff ff       	call   c000cf4c <Dbg::logc(char)>
c000d0e8:	5a                   	pop    edx
c000d0e9:	59                   	pop    ecx
c000d0ea:	e9 3f ff ff ff       	jmp    c000d02e <Dbg::kprintf(char const*, ...)+0x69>
c000d0ef:	90                   	nop

c000d0f0 <File::read(unsigned long long, void*, int*)>:
c000d0f0:	53                   	push   ebx
c000d0f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0f5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d0f9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d100:	3c 19                	cmp    al,0x19
c000d102:	77 35                	ja     c000d139 <File::read(unsigned long long, void*, int*)+0x49>
c000d104:	8b 04 85 60 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66a0]
c000d10b:	85 c0                	test   eax,eax
c000d10d:	74 2a                	je     c000d139 <File::read(unsigned long long, void*, int*)+0x49>
c000d10f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d115:	85 c0                	test   eax,eax
c000d117:	74 20                	je     c000d139 <File::read(unsigned long long, void*, int*)+0x49>
c000d119:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d11d:	74 21                	je     c000d140 <File::read(unsigned long long, void*, int*)+0x50>
c000d11f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d121:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d125:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d12b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d12f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d133:	5b                   	pop    ebx
c000d134:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000d137:	ff e0                	jmp    eax
c000d139:	b8 0b 00 00 00       	mov    eax,0xb
c000d13e:	eb 05                	jmp    c000d145 <File::read(unsigned long long, void*, int*)+0x55>
c000d140:	b8 05 00 00 00       	mov    eax,0x5
c000d145:	5b                   	pop    ebx
c000d146:	c3                   	ret    
c000d147:	90                   	nop

c000d148 <File::write(unsigned long long, void*, int*)>:
c000d148:	53                   	push   ebx
c000d149:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d14d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d151:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d158:	3c 19                	cmp    al,0x19
c000d15a:	77 35                	ja     c000d191 <File::write(unsigned long long, void*, int*)+0x49>
c000d15c:	8b 04 85 60 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66a0]
c000d163:	85 c0                	test   eax,eax
c000d165:	74 2a                	je     c000d191 <File::write(unsigned long long, void*, int*)+0x49>
c000d167:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d16d:	85 c0                	test   eax,eax
c000d16f:	74 20                	je     c000d191 <File::write(unsigned long long, void*, int*)+0x49>
c000d171:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d175:	74 21                	je     c000d198 <File::write(unsigned long long, void*, int*)+0x50>
c000d177:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d179:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d17d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d183:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d187:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d18b:	5b                   	pop    ebx
c000d18c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000d18f:	ff e0                	jmp    eax
c000d191:	b8 0b 00 00 00       	mov    eax,0xb
c000d196:	eb 05                	jmp    c000d19d <File::write(unsigned long long, void*, int*)+0x55>
c000d198:	b8 05 00 00 00       	mov    eax,0x5
c000d19d:	5b                   	pop    ebx
c000d19e:	c3                   	ret    
c000d19f:	90                   	nop

c000d1a0 <Directory::read(unsigned long long, void*, int*)>:
c000d1a0:	53                   	push   ebx
c000d1a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d1a9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000d1b0:	3c 19                	cmp    al,0x19
c000d1b2:	77 35                	ja     c000d1e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d1b4:	8b 04 85 60 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66a0]
c000d1bb:	85 c0                	test   eax,eax
c000d1bd:	74 2a                	je     c000d1e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d1bf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d1c5:	85 c0                	test   eax,eax
c000d1c7:	74 20                	je     c000d1e9 <Directory::read(unsigned long long, void*, int*)+0x49>
c000d1c9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d1cd:	74 21                	je     c000d1f0 <Directory::read(unsigned long long, void*, int*)+0x50>
c000d1cf:	8b 08                	mov    ecx,DWORD PTR [eax]
c000d1d1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1d5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000d1db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1e3:	5b                   	pop    ebx
c000d1e4:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000d1e7:	ff e0                	jmp    eax
c000d1e9:	b8 0b 00 00 00       	mov    eax,0xb
c000d1ee:	eb 05                	jmp    c000d1f5 <Directory::read(unsigned long long, void*, int*)+0x55>
c000d1f0:	b8 05 00 00 00       	mov    eax,0x5
c000d1f5:	5b                   	pop    ebx
c000d1f6:	c3                   	ret    
c000d1f7:	90                   	nop

c000d1f8 <Directory::write(unsigned long long, void*, int*)>:
c000d1f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1fc:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000d203:	b8 0b 00 00 00       	mov    eax,0xb
c000d208:	80 fa 19             	cmp    dl,0x19
c000d20b:	77 18                	ja     c000d225 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d20d:	8b 14 95 60 99 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd66a0]
c000d214:	85 d2                	test   edx,edx
c000d216:	74 0d                	je     c000d225 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000d218:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000d21f:	19 c0                	sbb    eax,eax
c000d221:	83 e0 0a             	and    eax,0xa
c000d224:	40                   	inc    eax
c000d225:	c3                   	ret    

c000d226 <File::isAtty()>:
c000d226:	31 c0                	xor    eax,eax
c000d228:	c3                   	ret    
c000d229:	90                   	nop

c000d22a <Directory::isAtty()>:
c000d22a:	31 c0                	xor    eax,eax
c000d22c:	c3                   	ret    
c000d22d:	90                   	nop

c000d22e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000d22e:	b8 0a 00 00 00       	mov    eax,0xa
c000d233:	c3                   	ret    

c000d234 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000d234:	b8 0a 00 00 00       	mov    eax,0xa
c000d239:	c3                   	ret    

c000d23a <Filesystem::allocateSwapfile(char const*, int)>:
c000d23a:	31 c0                	xor    eax,eax
c000d23c:	31 d2                	xor    edx,edx
c000d23e:	c3                   	ret    
c000d23f:	90                   	nop

c000d240 <File::~File()>:
c000d240:	83 ec 0c             	sub    esp,0xc
c000d243:	ba 78 3f 02 c0       	mov    edx,0xc0023f78
c000d248:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d24c:	89 10                	mov    DWORD PTR [eax],edx
c000d24e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d252:	83 ec 0c             	sub    esp,0xc
c000d255:	50                   	push   eax
c000d256:	e8 ad e7 ff ff       	call   c000ba08 <UnixFile::~UnixFile()>
c000d25b:	83 c4 10             	add    esp,0x10
c000d25e:	90                   	nop
c000d25f:	83 c4 0c             	add    esp,0xc
c000d262:	c3                   	ret    
c000d263:	90                   	nop

c000d264 <File::~File()>:
c000d264:	83 ec 0c             	sub    esp,0xc
c000d267:	83 ec 0c             	sub    esp,0xc
c000d26a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d26e:	e8 cd ff ff ff       	call   c000d240 <File::~File()>
c000d273:	83 c4 10             	add    esp,0x10
c000d276:	83 ec 08             	sub    esp,0x8
c000d279:	68 14 01 00 00       	push   0x114
c000d27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d282:	e8 5d fc ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000d287:	83 c4 10             	add    esp,0x10
c000d28a:	83 c4 0c             	add    esp,0xc
c000d28d:	c3                   	ret    

c000d28e <Directory::~Directory()>:
c000d28e:	83 ec 0c             	sub    esp,0xc
c000d291:	ba 94 3f 02 c0       	mov    edx,0xc0023f94
c000d296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d29a:	89 10                	mov    DWORD PTR [eax],edx
c000d29c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2a0:	83 ec 0c             	sub    esp,0xc
c000d2a3:	50                   	push   eax
c000d2a4:	e8 5f e7 ff ff       	call   c000ba08 <UnixFile::~UnixFile()>
c000d2a9:	83 c4 10             	add    esp,0x10
c000d2ac:	90                   	nop
c000d2ad:	83 c4 0c             	add    esp,0xc
c000d2b0:	c3                   	ret    
c000d2b1:	90                   	nop

c000d2b2 <Directory::~Directory()>:
c000d2b2:	83 ec 0c             	sub    esp,0xc
c000d2b5:	83 ec 0c             	sub    esp,0xc
c000d2b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2bc:	e8 cd ff ff ff       	call   c000d28e <Directory::~Directory()>
c000d2c1:	83 c4 10             	add    esp,0x10
c000d2c4:	83 ec 08             	sub    esp,0x8
c000d2c7:	68 14 01 00 00       	push   0x114
c000d2cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2d0:	e8 0f fc ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000d2d5:	83 c4 10             	add    esp,0x10
c000d2d8:	83 c4 0c             	add    esp,0xc
c000d2db:	c3                   	ret    

c000d2dc <Filesystem::Filesystem()>:
c000d2dc:	ba 10 3f 02 c0       	mov    edx,0xc0023f10
c000d2e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2e5:	89 10                	mov    DWORD PTR [eax],edx
c000d2e7:	8b 15 d8 74 02 c0    	mov    edx,DWORD PTR ds:0xc00274d8
c000d2ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d2f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2f8:	a3 d8 74 02 c0       	mov    ds:0xc00274d8,eax
c000d2fd:	90                   	nop
c000d2fe:	c3                   	ret    
c000d2ff:	90                   	nop

c000d300 <Filesystem::~Filesystem()>:
c000d300:	ba 10 3f 02 c0       	mov    edx,0xc0023f10
c000d305:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d309:	89 10                	mov    DWORD PTR [eax],edx
c000d30b:	90                   	nop
c000d30c:	c3                   	ret    
c000d30d:	90                   	nop

c000d30e <Filesystem::~Filesystem()>:
c000d30e:	83 ec 0c             	sub    esp,0xc
c000d311:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d315:	e8 e6 ff ff ff       	call   c000d300 <Filesystem::~Filesystem()>
c000d31a:	83 c4 04             	add    esp,0x4
c000d31d:	83 ec 08             	sub    esp,0x8
c000d320:	6a 08                	push   0x8
c000d322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d326:	e8 b9 fb ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000d32b:	83 c4 10             	add    esp,0x10
c000d32e:	83 c4 0c             	add    esp,0xc
c000d331:	c3                   	ret    

c000d332 <Fs::getcwd(Process*, char*, int)>:
c000d332:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d336:	31 c0                	xor    eax,eax
c000d338:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d33b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d33f:	7d 15                	jge    c000d356 <Fs::getcwd(Process*, char*, int)+0x24>
c000d341:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d345:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d34c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d34f:	84 c9                	test   cl,cl
c000d351:	74 06                	je     c000d359 <Fs::getcwd(Process*, char*, int)+0x27>
c000d353:	40                   	inc    eax
c000d354:	eb e2                	jmp    c000d338 <Fs::getcwd(Process*, char*, int)+0x6>
c000d356:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d359:	31 c0                	xor    eax,eax
c000d35b:	c3                   	ret    

c000d35c <Fs::initVFS()>:
c000d35c:	83 ec 18             	sub    esp,0x18
c000d35f:	6a 08                	push   0x8
c000d361:	e8 51 c9 ff ff       	call   c0009cb7 <malloc>
c000d366:	89 04 24             	mov    DWORD PTR [esp],eax
c000d369:	e8 4a e7 00 00       	call   c001bab8 <FAT::FAT()>
c000d36e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d375:	e8 3d c9 ff ff       	call   c0009cb7 <malloc>
c000d37a:	89 04 24             	mov    DWORD PTR [esp],eax
c000d37d:	e8 c6 f9 00 00       	call   c001cd48 <ISO9660::ISO9660()>
c000d382:	83 c4 1c             	add    esp,0x1c
c000d385:	c3                   	ret    

c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d386:	55                   	push   ebp
c000d387:	57                   	push   edi
c000d388:	56                   	push   esi
c000d389:	53                   	push   ebx
c000d38a:	81 ec 10 04 00 00    	sub    esp,0x410
c000d390:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d397:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d39e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d3a5:	68 00 04 00 00       	push   0x400
c000d3aa:	6a 00                	push   0x0
c000d3ac:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d3b0:	56                   	push   esi
c000d3b1:	e8 c6 32 ff ff       	call   c000067c <memset>
c000d3b6:	83 c4 10             	add    esp,0x10
c000d3b9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d3bd:	75 0b                	jne    c000d3ca <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d3bf:	50                   	push   eax
c000d3c0:	50                   	push   eax
c000d3c1:	57                   	push   edi
c000d3c2:	56                   	push   esi
c000d3c3:	e8 70 33 ff ff       	call   c0000738 <strcpy>
c000d3c8:	eb 41                	jmp    c000d40b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d3ca:	8a 07                	mov    al,BYTE PTR [edi]
c000d3cc:	3c 5c                	cmp    al,0x5c
c000d3ce:	74 04                	je     c000d3d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d3d0:	3c 2f                	cmp    al,0x2f
c000d3d2:	75 18                	jne    c000d3ec <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d3d4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d3d7:	3c 60                	cmp    al,0x60
c000d3d9:	7e 03                	jle    c000d3de <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d3db:	83 e8 20             	sub    eax,0x20
c000d3de:	88 04 24             	mov    BYTE PTR [esp],al
c000d3e1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d3e8:	50                   	push   eax
c000d3e9:	50                   	push   eax
c000d3ea:	eb 18                	jmp    c000d404 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d3ec:	50                   	push   eax
c000d3ed:	50                   	push   eax
c000d3ee:	55                   	push   ebp
c000d3ef:	56                   	push   esi
c000d3f0:	e8 43 33 ff ff       	call   c0000738 <strcpy>
c000d3f5:	5a                   	pop    edx
c000d3f6:	59                   	pop    ecx
c000d3f7:	68 ff 53 02 c0       	push   0xc00253ff
c000d3fc:	56                   	push   esi
c000d3fd:	e8 76 34 ff ff       	call   c0000878 <strcat>
c000d402:	5d                   	pop    ebp
c000d403:	58                   	pop    eax
c000d404:	57                   	push   edi
c000d405:	56                   	push   esi
c000d406:	e8 6d 34 ff ff       	call   c0000878 <strcat>
c000d40b:	83 c4 10             	add    esp,0x10
c000d40e:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d411:	3c 60                	cmp    al,0x60
c000d413:	7e 03                	jle    c000d418 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d415:	83 e8 20             	sub    eax,0x20
c000d418:	88 04 24             	mov    BYTE PTR [esp],al
c000d41b:	88 03                	mov    BYTE PTR [ebx],al
c000d41d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d424:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d42a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d42e:	bf 03 00 00 00       	mov    edi,0x3
c000d433:	b8 03 00 00 00       	mov    eax,0x3
c000d438:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d43b:	84 d2                	test   dl,dl
c000d43d:	0f 84 91 00 00 00    	je     c000d4d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d443:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d446:	80 fa 5c             	cmp    dl,0x5c
c000d449:	74 05                	je     c000d450 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d44b:	80 fa 2f             	cmp    dl,0x2f
c000d44e:	75 12                	jne    c000d462 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d450:	89 c5                	mov    ebp,eax
c000d452:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d457:	74 09                	je     c000d462 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d459:	40                   	inc    eax
c000d45a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d45e:	89 cf                	mov    edi,ecx
c000d460:	eb d6                	jmp    c000d438 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d462:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d467:	75 5b                	jne    c000d4c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d469:	80 fa 2e             	cmp    dl,0x2e
c000d46c:	75 56                	jne    c000d4c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d46e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d472:	74 19                	je     c000d48d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d474:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d479:	74 53                	je     c000d4ce <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d47b:	89 f9                	mov    ecx,edi
c000d47d:	41                   	inc    ecx
c000d47e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d481:	80 fa 2f             	cmp    dl,0x2f
c000d484:	74 f7                	je     c000d47d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d486:	80 fa 5c             	cmp    dl,0x5c
c000d489:	74 f2                	je     c000d47d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d48b:	eb d1                	jmp    c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d48d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d492:	74 3a                	je     c000d4ce <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d494:	83 f8 03             	cmp    eax,0x3
c000d497:	74 c5                	je     c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d499:	41                   	inc    ecx
c000d49a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d49d:	80 fa 2f             	cmp    dl,0x2f
c000d4a0:	74 f7                	je     c000d499 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d4a2:	80 fa 5c             	cmp    dl,0x5c
c000d4a5:	74 f2                	je     c000d499 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d4a7:	48                   	dec    eax
c000d4a8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d4ac:	75 06                	jne    c000d4b4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d4ae:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d4b2:	eb f3                	jmp    c000d4a7 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d4b4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d4b8:	74 07                	je     c000d4c1 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d4ba:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d4be:	48                   	dec    eax
c000d4bf:	eb f3                	jmp    c000d4b4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d4c1:	40                   	inc    eax
c000d4c2:	eb 9a                	jmp    c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4c4:	80 fa 2f             	cmp    dl,0x2f
c000d4c7:	74 95                	je     c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4c9:	80 fa 5c             	cmp    dl,0x5c
c000d4cc:	74 90                	je     c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4ce:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d4d1:	40                   	inc    eax
c000d4d2:	eb 8a                	jmp    c000d45e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d4d4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d4d8:	83 ec 0c             	sub    esp,0xc
c000d4db:	53                   	push   ebx
c000d4dc:	e8 b7 31 ff ff       	call   c0000698 <strlen>
c000d4e1:	83 c4 10             	add    esp,0x10
c000d4e4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d4e9:	75 26                	jne    c000d511 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d4eb:	83 ec 0c             	sub    esp,0xc
c000d4ee:	53                   	push   ebx
c000d4ef:	e8 a4 31 ff ff       	call   c0000698 <strlen>
c000d4f4:	83 c4 10             	add    esp,0x10
c000d4f7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d4fc:	74 26                	je     c000d524 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d4fe:	83 ec 0c             	sub    esp,0xc
c000d501:	53                   	push   ebx
c000d502:	e8 91 31 ff ff       	call   c0000698 <strlen>
c000d507:	83 c4 10             	add    esp,0x10
c000d50a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d50f:	eb c7                	jmp    c000d4d8 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d511:	83 ec 0c             	sub    esp,0xc
c000d514:	53                   	push   ebx
c000d515:	e8 7e 31 ff ff       	call   c0000698 <strlen>
c000d51a:	83 c4 10             	add    esp,0x10
c000d51d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d522:	74 c7                	je     c000d4eb <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d524:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d52a:	5b                   	pop    ebx
c000d52b:	5e                   	pop    esi
c000d52c:	5f                   	pop    edi
c000d52d:	5d                   	pop    ebp
c000d52e:	c3                   	ret    
c000d52f:	90                   	nop

c000d530 <File::File(char const*, Process*)>:
c000d530:	83 ec 0c             	sub    esp,0xc
c000d533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d537:	83 ec 08             	sub    esp,0x8
c000d53a:	6a 00                	push   0x0
c000d53c:	50                   	push   eax
c000d53d:	e8 e4 e2 ff ff       	call   c000b826 <UnixFile::UnixFile(int)>
c000d542:	83 c4 10             	add    esp,0x10
c000d545:	ba 78 3f 02 c0       	mov    edx,0xc0023f78
c000d54a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d54e:	89 10                	mov    DWORD PTR [eax],edx
c000d550:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d554:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d55e:	83 c0 0d             	add    eax,0xd
c000d561:	83 ec 04             	sub    esp,0x4
c000d564:	52                   	push   edx
c000d565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d569:	50                   	push   eax
c000d56a:	e8 17 fe ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d56f:	83 c4 10             	add    esp,0x10
c000d572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d576:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d579:	8d 50 bf             	lea    edx,[eax-0x41]
c000d57c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d580:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d58a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d592:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d598:	0f b6 c0             	movzx  eax,al
c000d59b:	8b 04 85 60 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66a0]
c000d5a2:	85 c0                	test   eax,eax
c000d5a4:	74 5e                	je     c000d604 <File::File(char const*, Process*)+0xd4>
c000d5a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5aa:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d5b0:	0f b6 c0             	movzx  eax,al
c000d5b3:	8b 04 85 60 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66a0]
c000d5ba:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d5c0:	85 c0                	test   eax,eax
c000d5c2:	75 40                	jne    c000d604 <File::File(char const*, Process*)+0xd4>
c000d5c4:	83 ec 0c             	sub    esp,0xc
c000d5c7:	68 b4 3e 02 c0       	push   0xc0023eb4
c000d5cc:	e8 f4 f9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000d5d1:	83 c4 10             	add    esp,0x10
c000d5d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5d8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d5de:	0f b6 c0             	movzx  eax,al
c000d5e1:	8b 04 85 60 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66a0]
c000d5e8:	83 ec 0c             	sub    esp,0xc
c000d5eb:	50                   	push   eax
c000d5ec:	e8 7b 20 00 00       	call   c000f66c <LogicalDisk::mount()>
c000d5f1:	83 c4 10             	add    esp,0x10
c000d5f4:	83 ec 0c             	sub    esp,0xc
c000d5f7:	68 2f 61 02 c0       	push   0xc002612f
c000d5fc:	e8 c4 f9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000d601:	83 c4 10             	add    esp,0x10
c000d604:	90                   	nop
c000d605:	83 c4 0c             	add    esp,0xc
c000d608:	c3                   	ret    
c000d609:	90                   	nop

c000d60a <File::open(FileOpenMode)>:
c000d60a:	53                   	push   ebx
c000d60b:	b8 0b 00 00 00       	mov    eax,0xb
c000d610:	83 ec 08             	sub    esp,0x8
c000d613:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d617:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d61e:	80 fa 19             	cmp    dl,0x19
c000d621:	77 40                	ja     c000d663 <File::open(FileOpenMode)+0x59>
c000d623:	8b 14 95 60 99 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd66a0]
c000d62a:	85 d2                	test   edx,edx
c000d62c:	74 35                	je     c000d663 <File::open(FileOpenMode)+0x59>
c000d62e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d634:	85 d2                	test   edx,edx
c000d636:	74 2b                	je     c000d663 <File::open(FileOpenMode)+0x59>
c000d638:	b8 06 00 00 00       	mov    eax,0x6
c000d63d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d641:	75 20                	jne    c000d663 <File::open(FileOpenMode)+0x59>
c000d643:	8b 02                	mov    eax,DWORD PTR [edx]
c000d645:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64f:	51                   	push   ecx
c000d650:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d653:	51                   	push   ecx
c000d654:	52                   	push   edx
c000d655:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d658:	83 c4 10             	add    esp,0x10
c000d65b:	85 c0                	test   eax,eax
c000d65d:	75 04                	jne    c000d663 <File::open(FileOpenMode)+0x59>
c000d65f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d663:	83 c4 08             	add    esp,0x8
c000d666:	5b                   	pop    ebx
c000d667:	c3                   	ret    

c000d668 <File::close()>:
c000d668:	53                   	push   ebx
c000d669:	b8 0b 00 00 00       	mov    eax,0xb
c000d66e:	83 ec 08             	sub    esp,0x8
c000d671:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d675:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d67c:	80 fa 19             	cmp    dl,0x19
c000d67f:	77 41                	ja     c000d6c2 <File::close()+0x5a>
c000d681:	8b 1c 95 60 99 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd66a0]
c000d688:	85 db                	test   ebx,ebx
c000d68a:	74 36                	je     c000d6c2 <File::close()+0x5a>
c000d68c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d693:	74 2d                	je     c000d6c2 <File::close()+0x5a>
c000d695:	b8 05 00 00 00       	mov    eax,0x5
c000d69a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d69e:	74 22                	je     c000d6c2 <File::close()+0x5a>
c000d6a0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d6a4:	8b 04 95 60 99 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd66a0]
c000d6ab:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d6b1:	53                   	push   ebx
c000d6b2:	53                   	push   ebx
c000d6b3:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6b5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d6bb:	50                   	push   eax
c000d6bc:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d6bf:	83 c4 10             	add    esp,0x10
c000d6c2:	83 c4 08             	add    esp,0x8
c000d6c5:	5b                   	pop    ebx
c000d6c6:	c3                   	ret    
c000d6c7:	90                   	nop

c000d6c8 <File::seek(unsigned long long)>:
c000d6c8:	56                   	push   esi
c000d6c9:	53                   	push   ebx
c000d6ca:	b8 0b 00 00 00       	mov    eax,0xb
c000d6cf:	51                   	push   ecx
c000d6d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d6d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d6d8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d6df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d6e3:	80 fa 19             	cmp    dl,0x19
c000d6e6:	77 31                	ja     c000d719 <File::seek(unsigned long long)+0x51>
c000d6e8:	8b 14 95 60 99 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd66a0]
c000d6ef:	85 d2                	test   edx,edx
c000d6f1:	74 26                	je     c000d719 <File::seek(unsigned long long)+0x51>
c000d6f3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d6f9:	85 d2                	test   edx,edx
c000d6fb:	74 1c                	je     c000d719 <File::seek(unsigned long long)+0x51>
c000d6fd:	b8 05 00 00 00       	mov    eax,0x5
c000d702:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d706:	74 11                	je     c000d719 <File::seek(unsigned long long)+0x51>
c000d708:	8b 02                	mov    eax,DWORD PTR [edx]
c000d70a:	53                   	push   ebx
c000d70b:	51                   	push   ecx
c000d70c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d712:	52                   	push   edx
c000d713:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d716:	83 c4 10             	add    esp,0x10
c000d719:	5a                   	pop    edx
c000d71a:	5b                   	pop    ebx
c000d71b:	5e                   	pop    esi
c000d71c:	c3                   	ret    
c000d71d:	90                   	nop

c000d71e <File::tell(unsigned long long*)>:
c000d71e:	83 ec 0c             	sub    esp,0xc
c000d721:	b8 0b 00 00 00       	mov    eax,0xb
c000d726:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d72a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d731:	80 fa 19             	cmp    dl,0x19
c000d734:	77 34                	ja     c000d76a <File::tell(unsigned long long*)+0x4c>
c000d736:	8b 14 95 60 99 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd66a0]
c000d73d:	85 d2                	test   edx,edx
c000d73f:	74 29                	je     c000d76a <File::tell(unsigned long long*)+0x4c>
c000d741:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d747:	85 d2                	test   edx,edx
c000d749:	74 1f                	je     c000d76a <File::tell(unsigned long long*)+0x4c>
c000d74b:	b8 05 00 00 00       	mov    eax,0x5
c000d750:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d754:	74 14                	je     c000d76a <File::tell(unsigned long long*)+0x4c>
c000d756:	50                   	push   eax
c000d757:	8b 02                	mov    eax,DWORD PTR [edx]
c000d759:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d75d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d763:	52                   	push   edx
c000d764:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d767:	83 c4 10             	add    esp,0x10
c000d76a:	83 c4 0c             	add    esp,0xc
c000d76d:	c3                   	ret    

c000d76e <File::rewind()>:
c000d76e:	83 ec 10             	sub    esp,0x10
c000d771:	6a 00                	push   0x0
c000d773:	6a 00                	push   0x0
c000d775:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d779:	e8 4a ff ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c000d77e:	83 c4 1c             	add    esp,0x1c
c000d781:	c3                   	ret    

c000d782 <File::unlink()>:
c000d782:	83 ec 0c             	sub    esp,0xc
c000d785:	b8 0b 00 00 00       	mov    eax,0xb
c000d78a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d78e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d795:	80 f9 19             	cmp    cl,0x19
c000d798:	77 2f                	ja     c000d7c9 <File::unlink()+0x47>
c000d79a:	8b 0c 8d 60 99 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd66a0]
c000d7a1:	85 c9                	test   ecx,ecx
c000d7a3:	74 24                	je     c000d7c9 <File::unlink()+0x47>
c000d7a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d7ab:	85 c9                	test   ecx,ecx
c000d7ad:	74 1a                	je     c000d7c9 <File::unlink()+0x47>
c000d7af:	b8 06 00 00 00       	mov    eax,0x6
c000d7b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d7b8:	75 0f                	jne    c000d7c9 <File::unlink()+0x47>
c000d7ba:	83 c2 0d             	add    edx,0xd
c000d7bd:	50                   	push   eax
c000d7be:	50                   	push   eax
c000d7bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d7c1:	52                   	push   edx
c000d7c2:	51                   	push   ecx
c000d7c3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	83 c4 0c             	add    esp,0xc
c000d7cc:	c3                   	ret    
c000d7cd:	90                   	nop

c000d7ce <File::rename(char const*)>:
c000d7ce:	83 ec 0c             	sub    esp,0xc
c000d7d1:	b8 0b 00 00 00       	mov    eax,0xb
c000d7d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d7da:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d7e1:	80 f9 19             	cmp    cl,0x19
c000d7e4:	77 32                	ja     c000d818 <File::rename(char const*)+0x4a>
c000d7e6:	8b 0c 8d 60 99 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd66a0]
c000d7ed:	85 c9                	test   ecx,ecx
c000d7ef:	74 27                	je     c000d818 <File::rename(char const*)+0x4a>
c000d7f1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d7f7:	85 c9                	test   ecx,ecx
c000d7f9:	74 1d                	je     c000d818 <File::rename(char const*)+0x4a>
c000d7fb:	b8 06 00 00 00       	mov    eax,0x6
c000d800:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d804:	75 12                	jne    c000d818 <File::rename(char const*)+0x4a>
c000d806:	83 c2 0d             	add    edx,0xd
c000d809:	50                   	push   eax
c000d80a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d80c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d810:	52                   	push   edx
c000d811:	51                   	push   ecx
c000d812:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d815:	83 c4 10             	add    esp,0x10
c000d818:	83 c4 0c             	add    esp,0xc
c000d81b:	c3                   	ret    

c000d81c <File::chfatattr(unsigned char, unsigned char)>:
c000d81c:	57                   	push   edi
c000d81d:	b8 0b 00 00 00       	mov    eax,0xb
c000d822:	56                   	push   esi
c000d823:	53                   	push   ebx
c000d824:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d828:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d82c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d833:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d837:	80 f9 19             	cmp    cl,0x19
c000d83a:	77 37                	ja     c000d873 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d83c:	8b 0c 8d 60 99 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd66a0]
c000d843:	85 c9                	test   ecx,ecx
c000d845:	74 2c                	je     c000d873 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d847:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d84d:	85 c9                	test   ecx,ecx
c000d84f:	74 22                	je     c000d873 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d851:	b8 06 00 00 00       	mov    eax,0x6
c000d856:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d85a:	75 17                	jne    c000d873 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d85c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d85e:	89 f0                	mov    eax,esi
c000d860:	83 c2 0d             	add    edx,0xd
c000d863:	0f b6 f0             	movzx  esi,al
c000d866:	0f b6 db             	movzx  ebx,bl
c000d869:	56                   	push   esi
c000d86a:	53                   	push   ebx
c000d86b:	52                   	push   edx
c000d86c:	51                   	push   ecx
c000d86d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d870:	83 c4 10             	add    esp,0x10
c000d873:	5b                   	pop    ebx
c000d874:	5e                   	pop    esi
c000d875:	5f                   	pop    edi
c000d876:	c3                   	ret    
c000d877:	90                   	nop

c000d878 <File::exists()>:
c000d878:	83 ec 0c             	sub    esp,0xc
c000d87b:	31 c0                	xor    eax,eax
c000d87d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d881:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d888:	80 f9 19             	cmp    cl,0x19
c000d88b:	77 24                	ja     c000d8b1 <File::exists()+0x39>
c000d88d:	8b 0c 8d 60 99 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd66a0]
c000d894:	85 c9                	test   ecx,ecx
c000d896:	74 19                	je     c000d8b1 <File::exists()+0x39>
c000d898:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d89e:	85 c9                	test   ecx,ecx
c000d8a0:	74 0f                	je     c000d8b1 <File::exists()+0x39>
c000d8a2:	83 c2 0d             	add    edx,0xd
c000d8a5:	50                   	push   eax
c000d8a6:	50                   	push   eax
c000d8a7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8a9:	52                   	push   edx
c000d8aa:	51                   	push   ecx
c000d8ab:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	83 c4 0c             	add    esp,0xc
c000d8b4:	c3                   	ret    
c000d8b5:	90                   	nop

c000d8b6 <File::stat(unsigned long long*, bool*)>:
c000d8b6:	56                   	push   esi
c000d8b7:	53                   	push   ebx
c000d8b8:	50                   	push   eax
c000d8b9:	b8 0b 00 00 00       	mov    eax,0xb
c000d8be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d8c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d8c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d8cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d8d1:	80 f9 19             	cmp    cl,0x19
c000d8d4:	77 3d                	ja     c000d913 <File::stat(unsigned long long*, bool*)+0x5d>
c000d8d6:	8b 0c 8d 60 99 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd66a0]
c000d8dd:	85 c9                	test   ecx,ecx
c000d8df:	74 32                	je     c000d913 <File::stat(unsigned long long*, bool*)+0x5d>
c000d8e1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d8e7:	85 c9                	test   ecx,ecx
c000d8e9:	74 28                	je     c000d913 <File::stat(unsigned long long*, bool*)+0x5d>
c000d8eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d8ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d8f1:	74 13                	je     c000d906 <File::stat(unsigned long long*, bool*)+0x50>
c000d8f3:	83 ec 04             	sub    esp,0x4
c000d8f6:	56                   	push   esi
c000d8f7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d8fd:	51                   	push   ecx
c000d8fe:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d901:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d904:	eb 0a                	jmp    c000d910 <File::stat(unsigned long long*, bool*)+0x5a>
c000d906:	53                   	push   ebx
c000d907:	83 c2 0d             	add    edx,0xd
c000d90a:	56                   	push   esi
c000d90b:	52                   	push   edx
c000d90c:	51                   	push   ecx
c000d90d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d910:	83 c4 10             	add    esp,0x10
c000d913:	5a                   	pop    edx
c000d914:	5b                   	pop    ebx
c000d915:	5e                   	pop    esi
c000d916:	c3                   	ret    

c000d917 <Fs::setcwd(Process*, char*)>:
c000d917:	55                   	push   ebp
c000d918:	57                   	push   edi
c000d919:	56                   	push   esi
c000d91a:	53                   	push   ebx
c000d91b:	81 ec 20 02 00 00    	sub    esp,0x220
c000d921:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d928:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d92e:	57                   	push   edi
c000d92f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d936:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d93a:	56                   	push   esi
c000d93b:	e8 46 fa ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d940:	89 34 24             	mov    DWORD PTR [esp],esi
c000d943:	e8 50 2d ff ff       	call   c0000698 <strlen>
c000d948:	83 c4 10             	add    esp,0x10
c000d94b:	83 f8 02             	cmp    eax,0x2
c000d94e:	77 15                	ja     c000d965 <Fs::setcwd(Process*, char*)+0x4e>
c000d950:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d955:	83 eb 41             	sub    ebx,0x41
c000d958:	8b 04 9d 60 99 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd66a0]
c000d95f:	85 c0                	test   eax,eax
c000d961:	75 1c                	jne    c000d97f <Fs::setcwd(Process*, char*)+0x68>
c000d963:	eb 4c                	jmp    c000d9b1 <Fs::setcwd(Process*, char*)+0x9a>
c000d965:	83 ec 0c             	sub    esp,0xc
c000d968:	56                   	push   esi
c000d969:	e8 2a 2d ff ff       	call   c0000698 <strlen>
c000d96e:	83 c4 10             	add    esp,0x10
c000d971:	83 f8 03             	cmp    eax,0x3
c000d974:	75 74                	jne    c000d9ea <Fs::setcwd(Process*, char*)+0xd3>
c000d976:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d97b:	75 6d                	jne    c000d9ea <Fs::setcwd(Process*, char*)+0xd3>
c000d97d:	eb d1                	jmp    c000d950 <Fs::setcwd(Process*, char*)+0x39>
c000d97f:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000d986:	75 29                	jne    c000d9b1 <Fs::setcwd(Process*, char*)+0x9a>
c000d988:	83 ec 0c             	sub    esp,0xc
c000d98b:	68 8c 3e 02 c0       	push   0xc0023e8c
c000d990:	e8 30 f6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000d995:	5a                   	pop    edx
c000d996:	ff 34 9d 60 99 02 c0 	push   DWORD PTR [ebx*4-0x3ffd66a0]
c000d99d:	e8 ca 1c 00 00       	call   c000f66c <LogicalDisk::mount()>
c000d9a2:	c7 04 24 2f 61 02 c0 	mov    DWORD PTR [esp],0xc002612f
c000d9a9:	e8 17 f6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000d9ae:	83 c4 10             	add    esp,0x10
c000d9b1:	b8 03 00 00 00       	mov    eax,0x3
c000d9b6:	83 fb 19             	cmp    ebx,0x19
c000d9b9:	0f 87 c6 00 00 00    	ja     c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000d9bf:	8b 14 9d 60 99 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd66a0]
c000d9c6:	b8 05 00 00 00       	mov    eax,0x5
c000d9cb:	85 d2                	test   edx,edx
c000d9cd:	0f 84 b2 00 00 00    	je     c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000d9d3:	b8 06 00 00 00       	mov    eax,0x6
c000d9d8:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d9df:	0f 85 92 00 00 00    	jne    c000da77 <Fs::setcwd(Process*, char*)+0x160>
c000d9e5:	e9 9b 00 00 00       	jmp    c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000d9ea:	83 ec 0c             	sub    esp,0xc
c000d9ed:	68 14 01 00 00       	push   0x114
c000d9f2:	e8 c0 c2 ff ff       	call   c0009cb7 <malloc>
c000d9f7:	83 c4 0c             	add    esp,0xc
c000d9fa:	89 c3                	mov    ebx,eax
c000d9fc:	55                   	push   ebp
c000d9fd:	56                   	push   esi
c000d9fe:	50                   	push   eax
c000d9ff:	e8 2c fb ff ff       	call   c000d530 <File::File(char const*, Process*)>
c000da04:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000da09:	83 c4 0c             	add    esp,0xc
c000da0c:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000da10:	50                   	push   eax
c000da11:	8d 44 24 10          	lea    eax,[esp+0x10]
c000da15:	50                   	push   eax
c000da16:	53                   	push   ebx
c000da17:	e8 9a fe ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c000da1c:	83 c4 10             	add    esp,0x10
c000da1f:	83 f8 02             	cmp    eax,0x2
c000da22:	74 04                	je     c000da28 <Fs::setcwd(Process*, char*)+0x111>
c000da24:	85 c0                	test   eax,eax
c000da26:	74 1c                	je     c000da44 <Fs::setcwd(Process*, char*)+0x12d>
c000da28:	b8 01 00 00 00       	mov    eax,0x1
c000da2d:	85 db                	test   ebx,ebx
c000da2f:	74 54                	je     c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000da31:	83 ec 0c             	sub    esp,0xc
c000da34:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da36:	53                   	push   ebx
c000da37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da3a:	83 c4 10             	add    esp,0x10
c000da3d:	b8 01 00 00 00       	mov    eax,0x1
c000da42:	eb 41                	jmp    c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000da44:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000da49:	75 1c                	jne    c000da67 <Fs::setcwd(Process*, char*)+0x150>
c000da4b:	b8 02 00 00 00       	mov    eax,0x2
c000da50:	85 db                	test   ebx,ebx
c000da52:	74 31                	je     c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000da54:	83 ec 0c             	sub    esp,0xc
c000da57:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da59:	53                   	push   ebx
c000da5a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da5d:	83 c4 10             	add    esp,0x10
c000da60:	b8 02 00 00 00       	mov    eax,0x2
c000da65:	eb 1e                	jmp    c000da85 <Fs::setcwd(Process*, char*)+0x16e>
c000da67:	85 db                	test   ebx,ebx
c000da69:	74 0c                	je     c000da77 <Fs::setcwd(Process*, char*)+0x160>
c000da6b:	83 ec 0c             	sub    esp,0xc
c000da6e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000da70:	53                   	push   ebx
c000da71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000da74:	83 c4 10             	add    esp,0x10
c000da77:	50                   	push   eax
c000da78:	50                   	push   eax
c000da79:	56                   	push   esi
c000da7a:	57                   	push   edi
c000da7b:	e8 b8 2c ff ff       	call   c0000738 <strcpy>
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	31 c0                	xor    eax,eax
c000da85:	81 c4 1c 02 00 00    	add    esp,0x21c
c000da8b:	5b                   	pop    ebx
c000da8c:	5e                   	pop    esi
c000da8d:	5f                   	pop    edi
c000da8e:	5d                   	pop    ebp
c000da8f:	c3                   	ret    

c000da90 <Directory::Directory(char const*, Process*)>:
c000da90:	83 ec 0c             	sub    esp,0xc
c000da93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da97:	83 ec 08             	sub    esp,0x8
c000da9a:	6a 00                	push   0x0
c000da9c:	50                   	push   eax
c000da9d:	e8 84 dd ff ff       	call   c000b826 <UnixFile::UnixFile(int)>
c000daa2:	83 c4 10             	add    esp,0x10
c000daa5:	ba 94 3f 02 c0       	mov    edx,0xc0023f94
c000daaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daae:	89 10                	mov    DWORD PTR [eax],edx
c000dab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dab4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000daba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dabe:	83 c0 0d             	add    eax,0xd
c000dac1:	83 ec 04             	sub    esp,0x4
c000dac4:	52                   	push   edx
c000dac5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dac9:	50                   	push   eax
c000daca:	e8 b7 f8 ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c000dacf:	83 c4 10             	add    esp,0x10
c000dad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dad6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000dad9:	8d 50 bf             	lea    edx,[eax-0x41]
c000dadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000dae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daea:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000daee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daf2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000daf8:	0f b6 c0             	movzx  eax,al
c000dafb:	8b 04 85 60 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66a0]
c000db02:	85 c0                	test   eax,eax
c000db04:	74 5e                	je     c000db64 <Directory::Directory(char const*, Process*)+0xd4>
c000db06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db0a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db10:	0f b6 c0             	movzx  eax,al
c000db13:	8b 04 85 60 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66a0]
c000db1a:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000db20:	85 c0                	test   eax,eax
c000db22:	75 40                	jne    c000db64 <Directory::Directory(char const*, Process*)+0xd4>
c000db24:	83 ec 0c             	sub    esp,0xc
c000db27:	68 dc 3e 02 c0       	push   0xc0023edc
c000db2c:	e8 94 f4 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000db31:	83 c4 10             	add    esp,0x10
c000db34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db38:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000db3e:	0f b6 c0             	movzx  eax,al
c000db41:	8b 04 85 60 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66a0]
c000db48:	83 ec 0c             	sub    esp,0xc
c000db4b:	50                   	push   eax
c000db4c:	e8 1b 1b 00 00       	call   c000f66c <LogicalDisk::mount()>
c000db51:	83 c4 10             	add    esp,0x10
c000db54:	83 ec 0c             	sub    esp,0xc
c000db57:	68 2f 61 02 c0       	push   0xc002612f
c000db5c:	e8 64 f4 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000db61:	83 c4 10             	add    esp,0x10
c000db64:	90                   	nop
c000db65:	83 c4 0c             	add    esp,0xc
c000db68:	c3                   	ret    
c000db69:	90                   	nop

c000db6a <Directory::open()>:
c000db6a:	53                   	push   ebx
c000db6b:	b8 0b 00 00 00       	mov    eax,0xb
c000db70:	83 ec 08             	sub    esp,0x8
c000db73:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db77:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000db7e:	80 fa 19             	cmp    dl,0x19
c000db81:	77 3d                	ja     c000dbc0 <Directory::open()+0x56>
c000db83:	8b 14 95 60 99 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd66a0]
c000db8a:	85 d2                	test   edx,edx
c000db8c:	74 32                	je     c000dbc0 <Directory::open()+0x56>
c000db8e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000db94:	85 d2                	test   edx,edx
c000db96:	74 28                	je     c000dbc0 <Directory::open()+0x56>
c000db98:	b8 06 00 00 00       	mov    eax,0x6
c000db9d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000dba1:	75 1d                	jne    c000dbc0 <Directory::open()+0x56>
c000dba3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000dba9:	50                   	push   eax
c000dbaa:	8b 02                	mov    eax,DWORD PTR [edx]
c000dbac:	51                   	push   ecx
c000dbad:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000dbb0:	51                   	push   ecx
c000dbb1:	52                   	push   edx
c000dbb2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000dbb5:	83 c4 10             	add    esp,0x10
c000dbb8:	85 c0                	test   eax,eax
c000dbba:	75 04                	jne    c000dbc0 <Directory::open()+0x56>
c000dbbc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000dbc0:	83 c4 08             	add    esp,0x8
c000dbc3:	5b                   	pop    ebx
c000dbc4:	c3                   	ret    
c000dbc5:	90                   	nop

c000dbc6 <Directory::close()>:
c000dbc6:	53                   	push   ebx
c000dbc7:	b8 0b 00 00 00       	mov    eax,0xb
c000dbcc:	83 ec 08             	sub    esp,0x8
c000dbcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dbd3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dbda:	80 fa 19             	cmp    dl,0x19
c000dbdd:	77 41                	ja     c000dc20 <Directory::close()+0x5a>
c000dbdf:	8b 1c 95 60 99 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd66a0]
c000dbe6:	85 db                	test   ebx,ebx
c000dbe8:	74 36                	je     c000dc20 <Directory::close()+0x5a>
c000dbea:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000dbf1:	74 2d                	je     c000dc20 <Directory::close()+0x5a>
c000dbf3:	b8 05 00 00 00       	mov    eax,0x5
c000dbf8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000dbfc:	74 22                	je     c000dc20 <Directory::close()+0x5a>
c000dbfe:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000dc02:	8b 04 95 60 99 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd66a0]
c000dc09:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000dc0f:	53                   	push   ebx
c000dc10:	53                   	push   ebx
c000dc11:	8b 10                	mov    edx,DWORD PTR [eax]
c000dc13:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000dc19:	50                   	push   eax
c000dc1a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000dc1d:	83 c4 10             	add    esp,0x10
c000dc20:	83 c4 08             	add    esp,0x8
c000dc23:	5b                   	pop    ebx
c000dc24:	c3                   	ret    
c000dc25:	90                   	nop

c000dc26 <Directory::unlink()>:
c000dc26:	83 ec 0c             	sub    esp,0xc
c000dc29:	b8 0b 00 00 00       	mov    eax,0xb
c000dc2e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dc32:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dc39:	80 f9 19             	cmp    cl,0x19
c000dc3c:	77 2f                	ja     c000dc6d <Directory::unlink()+0x47>
c000dc3e:	8b 0c 8d 60 99 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd66a0]
c000dc45:	85 c9                	test   ecx,ecx
c000dc47:	74 24                	je     c000dc6d <Directory::unlink()+0x47>
c000dc49:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dc4f:	85 c9                	test   ecx,ecx
c000dc51:	74 1a                	je     c000dc6d <Directory::unlink()+0x47>
c000dc53:	b8 06 00 00 00       	mov    eax,0x6
c000dc58:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dc5c:	75 0f                	jne    c000dc6d <Directory::unlink()+0x47>
c000dc5e:	83 c2 0d             	add    edx,0xd
c000dc61:	50                   	push   eax
c000dc62:	50                   	push   eax
c000dc63:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dc65:	52                   	push   edx
c000dc66:	51                   	push   ecx
c000dc67:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000dc6a:	83 c4 10             	add    esp,0x10
c000dc6d:	83 c4 0c             	add    esp,0xc
c000dc70:	c3                   	ret    
c000dc71:	90                   	nop

c000dc72 <Directory::rename(char const*)>:
c000dc72:	83 ec 0c             	sub    esp,0xc
c000dc75:	b8 0b 00 00 00       	mov    eax,0xb
c000dc7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dc7e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dc85:	80 f9 19             	cmp    cl,0x19
c000dc88:	77 32                	ja     c000dcbc <Directory::rename(char const*)+0x4a>
c000dc8a:	8b 0c 8d 60 99 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd66a0]
c000dc91:	85 c9                	test   ecx,ecx
c000dc93:	74 27                	je     c000dcbc <Directory::rename(char const*)+0x4a>
c000dc95:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dc9b:	85 c9                	test   ecx,ecx
c000dc9d:	74 1d                	je     c000dcbc <Directory::rename(char const*)+0x4a>
c000dc9f:	b8 06 00 00 00       	mov    eax,0x6
c000dca4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dca8:	75 12                	jne    c000dcbc <Directory::rename(char const*)+0x4a>
c000dcaa:	83 c2 0d             	add    edx,0xd
c000dcad:	50                   	push   eax
c000dcae:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcb4:	52                   	push   edx
c000dcb5:	51                   	push   ecx
c000dcb6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000dcb9:	83 c4 10             	add    esp,0x10
c000dcbc:	83 c4 0c             	add    esp,0xc
c000dcbf:	c3                   	ret    

c000dcc0 <Directory::exists()>:
c000dcc0:	83 ec 0c             	sub    esp,0xc
c000dcc3:	31 c0                	xor    eax,eax
c000dcc5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcc9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dcd0:	80 f9 19             	cmp    cl,0x19
c000dcd3:	77 24                	ja     c000dcf9 <Directory::exists()+0x39>
c000dcd5:	8b 0c 8d 60 99 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd66a0]
c000dcdc:	85 c9                	test   ecx,ecx
c000dcde:	74 19                	je     c000dcf9 <Directory::exists()+0x39>
c000dce0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dce6:	85 c9                	test   ecx,ecx
c000dce8:	74 0f                	je     c000dcf9 <Directory::exists()+0x39>
c000dcea:	83 c2 0d             	add    edx,0xd
c000dced:	50                   	push   eax
c000dcee:	50                   	push   eax
c000dcef:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dcf1:	52                   	push   edx
c000dcf2:	51                   	push   ecx
c000dcf3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000dcf6:	83 c4 10             	add    esp,0x10
c000dcf9:	83 c4 0c             	add    esp,0xc
c000dcfc:	c3                   	ret    
c000dcfd:	90                   	nop

c000dcfe <Directory::read(dirent*)>:
c000dcfe:	83 ec 1c             	sub    esp,0x1c
c000dd01:	b8 0b 00 00 00       	mov    eax,0xb
c000dd06:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dd0a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000dd11:	80 fa 19             	cmp    dl,0x19
c000dd14:	77 30                	ja     c000dd46 <Directory::read(dirent*)+0x48>
c000dd16:	8b 14 95 60 99 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd66a0]
c000dd1d:	85 d2                	test   edx,edx
c000dd1f:	74 25                	je     c000dd46 <Directory::read(dirent*)+0x48>
c000dd21:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000dd28:	74 1c                	je     c000dd46 <Directory::read(dirent*)+0x48>
c000dd2a:	83 ec 0c             	sub    esp,0xc
c000dd2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd2f:	8d 54 24 18          	lea    edx,[esp+0x18]
c000dd33:	52                   	push   edx
c000dd34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dd38:	6a 00                	push   0x0
c000dd3a:	68 10 01 00 00       	push   0x110
c000dd3f:	51                   	push   ecx
c000dd40:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000dd43:	83 c4 20             	add    esp,0x20
c000dd46:	83 c4 1c             	add    esp,0x1c
c000dd49:	c3                   	ret    

c000dd4a <Directory::create()>:
c000dd4a:	83 ec 0c             	sub    esp,0xc
c000dd4d:	b8 0b 00 00 00       	mov    eax,0xb
c000dd52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dd56:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000dd5d:	80 f9 19             	cmp    cl,0x19
c000dd60:	77 2f                	ja     c000dd91 <Directory::create()+0x47>
c000dd62:	8b 0c 8d 60 99 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd66a0]
c000dd69:	85 c9                	test   ecx,ecx
c000dd6b:	74 24                	je     c000dd91 <Directory::create()+0x47>
c000dd6d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000dd73:	85 c9                	test   ecx,ecx
c000dd75:	74 1a                	je     c000dd91 <Directory::create()+0x47>
c000dd77:	b8 06 00 00 00       	mov    eax,0x6
c000dd7c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dd80:	75 0f                	jne    c000dd91 <Directory::create()+0x47>
c000dd82:	83 c2 0d             	add    edx,0xd
c000dd85:	50                   	push   eax
c000dd86:	50                   	push   eax
c000dd87:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd89:	52                   	push   edx
c000dd8a:	51                   	push   ecx
c000dd8b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000dd8e:	83 c4 10             	add    esp,0x10
c000dd91:	83 c4 0c             	add    esp,0xc
c000dd94:	c3                   	ret    
c000dd95:	90                   	nop

c000dd96 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000dd96:	b8 0a 00 00 00       	mov    eax,0xa
c000dd9b:	c3                   	ret    

c000dd9c <Bus::Bus(char const*)>:
c000dd9c:	83 ec 0c             	sub    esp,0xc
c000dd9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dda3:	83 ec 08             	sub    esp,0x8
c000dda6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddaa:	50                   	push   eax
c000ddab:	e8 96 08 00 00       	call   c000e646 <Device::Device(char const*)>
c000ddb0:	83 c4 10             	add    esp,0x10
c000ddb3:	ba b0 3f 02 c0       	mov    edx,0xc0023fb0
c000ddb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddbc:	89 10                	mov    DWORD PTR [eax],edx
c000ddbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddc2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ddcc:	90                   	nop
c000ddcd:	83 c4 0c             	add    esp,0xc
c000ddd0:	c3                   	ret    
c000ddd1:	90                   	nop
c000ddd2:	66 90                	xchg   ax,ax

c000ddd4 <Bus::~Bus()>:
c000ddd4:	83 ec 0c             	sub    esp,0xc
c000ddd7:	ba b0 3f 02 c0       	mov    edx,0xc0023fb0
c000dddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dde0:	89 10                	mov    DWORD PTR [eax],edx
c000dde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dde6:	83 ec 0c             	sub    esp,0xc
c000dde9:	50                   	push   eax
c000ddea:	e8 55 05 00 00       	call   c000e344 <Device::~Device()>
c000ddef:	83 c4 10             	add    esp,0x10
c000ddf2:	90                   	nop
c000ddf3:	83 c4 0c             	add    esp,0xc
c000ddf6:	c3                   	ret    
c000ddf7:	90                   	nop

c000ddf8 <Bus::~Bus()>:
c000ddf8:	83 ec 0c             	sub    esp,0xc
c000ddfb:	83 ec 0c             	sub    esp,0xc
c000ddfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de02:	e8 cd ff ff ff       	call   c000ddd4 <Bus::~Bus()>
c000de07:	83 c4 10             	add    esp,0x10
c000de0a:	83 ec 08             	sub    esp,0x8
c000de0d:	68 58 01 00 00       	push   0x158
c000de12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de16:	e8 c9 f0 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	83 c4 0c             	add    esp,0xc
c000de21:	c3                   	ret    

c000de22 <beepThread(void*)>:
c000de22:	83 ec 0c             	sub    esp,0xc
c000de25:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000de2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de2e:	48                   	dec    eax
c000de2f:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000de34:	75 01                	jne    c000de37 <beepThread(void*)+0x15>
c000de36:	fb                   	sti    
c000de37:	83 ec 0c             	sub    esp,0xc
c000de3a:	6b c2 0a             	imul   eax,edx,0xa
c000de3d:	50                   	push   eax
c000de3e:	e8 21 99 00 00       	call   c0017764 <milliTenthSleep(unsigned int)>
c000de43:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000de4a:	e8 70 cc 00 00       	call   c001aabf <Hal::makeBeep(int)>
c000de4f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000de57:	83 c4 1c             	add    esp,0x1c
c000de5a:	e9 05 98 00 00       	jmp    c0017664 <blockTask(TaskState)>

c000de5f <Krnl::beep(int, int, bool)>:
c000de5f:	56                   	push   esi
c000de60:	53                   	push   ebx
c000de61:	83 ec 10             	sub    esp,0x10
c000de64:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000de68:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000de6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de70:	e8 4a cc 00 00       	call   c001aabf <Hal::makeBeep(int)>
c000de75:	83 c4 10             	add    esp,0x10
c000de78:	89 f0                	mov    eax,esi
c000de7a:	84 c0                	test   al,al
c000de7c:	74 1e                	je     c000de9c <Krnl::beep(int, int, bool)+0x3d>
c000de7e:	83 ec 0c             	sub    esp,0xc
c000de81:	6b db 0a             	imul   ebx,ebx,0xa
c000de84:	53                   	push   ebx
c000de85:	e8 da 98 00 00       	call   c0017764 <milliTenthSleep(unsigned int)>
c000de8a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000de92:	83 c4 14             	add    esp,0x14
c000de95:	5b                   	pop    ebx
c000de96:	5e                   	pop    esi
c000de97:	e9 23 cc 00 00       	jmp    c001aabf <Hal::makeBeep(int)>
c000de9c:	68 e6 00 00 00       	push   0xe6
c000dea1:	53                   	push   ebx
c000dea2:	68 22 de 00 c0       	push   0xc000de22
c000dea7:	ff 35 f0 a8 02 c0    	push   DWORD PTR ds:0xc002a8f0
c000dead:	e8 9e 93 00 00       	call   c0017250 <Process::createThread(void (*)(void*), void*, int)>
c000deb2:	83 c4 14             	add    esp,0x14
c000deb5:	5b                   	pop    ebx
c000deb6:	5e                   	pop    esi
c000deb7:	c3                   	ret    

c000deb8 <User::loadClockSettings(int)>:
c000deb8:	53                   	push   ebx
c000deb9:	83 ec 14             	sub    esp,0x14
c000debc:	68 14 01 00 00       	push   0x114
c000dec1:	e8 f1 bd ff ff       	call   c0009cb7 <malloc>
c000dec6:	83 c4 0c             	add    esp,0xc
c000dec9:	89 c3                	mov    ebx,eax
c000decb:	ff 35 f0 a8 02 c0    	push   DWORD PTR ds:0xc002a8f0
c000ded1:	68 d4 3f 02 c0       	push   0xc0023fd4
c000ded6:	50                   	push   eax
c000ded7:	e8 54 f6 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c000dedc:	58                   	pop    eax
c000dedd:	5a                   	pop    edx
c000dede:	6a 01                	push   0x1
c000dee0:	53                   	push   ebx
c000dee1:	e8 24 f7 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c000dee6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dee9:	e8 7a f7 ff ff       	call   c000d668 <File::close()>
c000deee:	83 c4 10             	add    esp,0x10
c000def1:	85 db                	test   ebx,ebx
c000def3:	74 0f                	je     c000df04 <User::loadClockSettings(int)+0x4c>
c000def5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000def7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000defb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000defe:	83 c4 08             	add    esp,0x8
c000df01:	5b                   	pop    ebx
c000df02:	ff e0                	jmp    eax
c000df04:	83 c4 08             	add    esp,0x8
c000df07:	5b                   	pop    ebx
c000df08:	c3                   	ret    
c000df09:	90                   	nop

c000df0a <Clock::Clock(char const*)>:
c000df0a:	83 ec 0c             	sub    esp,0xc
c000df0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df11:	83 ec 08             	sub    esp,0x8
c000df14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df18:	50                   	push   eax
c000df19:	e8 28 07 00 00       	call   c000e646 <Device::Device(char const*)>
c000df1e:	83 c4 10             	add    esp,0x10
c000df21:	ba fc 3f 02 c0       	mov    edx,0xc0023ffc
c000df26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df2a:	89 10                	mov    DWORD PTR [eax],edx
c000df2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df30:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000df3a:	90                   	nop
c000df3b:	83 c4 0c             	add    esp,0xc
c000df3e:	c3                   	ret    
c000df3f:	90                   	nop

c000df40 <Clock::~Clock()>:
c000df40:	83 ec 0c             	sub    esp,0xc
c000df43:	ba fc 3f 02 c0       	mov    edx,0xc0023ffc
c000df48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df4c:	89 10                	mov    DWORD PTR [eax],edx
c000df4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df52:	83 ec 0c             	sub    esp,0xc
c000df55:	50                   	push   eax
c000df56:	e8 e9 03 00 00       	call   c000e344 <Device::~Device()>
c000df5b:	83 c4 10             	add    esp,0x10
c000df5e:	90                   	nop
c000df5f:	83 c4 0c             	add    esp,0xc
c000df62:	c3                   	ret    
c000df63:	90                   	nop

c000df64 <Clock::~Clock()>:
c000df64:	83 ec 0c             	sub    esp,0xc
c000df67:	83 ec 0c             	sub    esp,0xc
c000df6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6e:	e8 cd ff ff ff       	call   c000df40 <Clock::~Clock()>
c000df73:	83 c4 10             	add    esp,0x10
c000df76:	83 ec 08             	sub    esp,0x8
c000df79:	68 58 01 00 00       	push   0x158
c000df7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df82:	e8 5d ef ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000df87:	83 c4 10             	add    esp,0x10
c000df8a:	83 c4 0c             	add    esp,0xc
c000df8d:	c3                   	ret    

c000df8e <Clock::timeInSecondsLocal()>:
c000df8e:	53                   	push   ebx
c000df8f:	83 ec 14             	sub    esp,0x14
c000df92:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000df96:	8b 10                	mov    edx,DWORD PTR [eax]
c000df98:	50                   	push   eax
c000df99:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000df9c:	0f b6 0d dc 74 02 c0 	movzx  ecx,BYTE PTR ds:0xc00274dc
c000dfa3:	03 0d e0 74 02 c0    	add    ecx,DWORD PTR ds:0xc00274e0
c000dfa9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dfaf:	89 cb                	mov    ebx,ecx
c000dfb1:	c1 fb 1f             	sar    ebx,0x1f
c000dfb4:	01 c8                	add    eax,ecx
c000dfb6:	11 da                	adc    edx,ebx
c000dfb8:	83 c4 10             	add    esp,0x10
c000dfbb:	31 c9                	xor    ecx,ecx
c000dfbd:	80 3d dd 74 02 c0 00 	cmp    BYTE PTR ds:0xc00274dd,0x0
c000dfc4:	74 05                	je     c000dfcb <Clock::timeInSecondsLocal()+0x3d>
c000dfc6:	b9 08 07 00 00       	mov    ecx,0x708
c000dfcb:	31 db                	xor    ebx,ebx
c000dfcd:	01 c8                	add    eax,ecx
c000dfcf:	11 da                	adc    edx,ebx
c000dfd1:	83 c4 08             	add    esp,0x8
c000dfd4:	5b                   	pop    ebx
c000dfd5:	c3                   	ret    

c000dfd6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000dfd6:	57                   	push   edi
c000dfd7:	56                   	push   esi
c000dfd8:	53                   	push   ebx
c000dfd9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000dfdd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000dfe1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dfe3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dfe7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000dfea:	0f b6 05 dc 74 02 c0 	movzx  eax,BYTE PTR ds:0xc00274dc
c000dff1:	03 05 e0 74 02 c0    	add    eax,DWORD PTR ds:0xc00274e0
c000dff7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000dffd:	99                   	cdq    
c000dffe:	29 c6                	sub    esi,eax
c000e000:	19 d7                	sbb    edi,edx
c000e002:	89 f0                	mov    eax,esi
c000e004:	89 fa                	mov    edx,edi
c000e006:	31 f6                	xor    esi,esi
c000e008:	80 3d dd 74 02 c0 00 	cmp    BYTE PTR ds:0xc00274dd,0x0
c000e00f:	74 05                	je     c000e016 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000e011:	be 08 07 00 00       	mov    esi,0x708
c000e016:	31 ff                	xor    edi,edi
c000e018:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000e01c:	29 f0                	sub    eax,esi
c000e01e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e022:	19 fa                	sbb    edx,edi
c000e024:	89 d8                	mov    eax,ebx
c000e026:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e02a:	5b                   	pop    ebx
c000e02b:	5e                   	pop    esi
c000e02c:	5f                   	pop    edi
c000e02d:	ff e0                	jmp    eax

c000e02f <datetimeToSeconds(datetime_t)>:
c000e02f:	55                   	push   ebp
c000e030:	57                   	push   edi
c000e031:	56                   	push   esi
c000e032:	53                   	push   ebx
c000e033:	83 ec 14             	sub    esp,0x14
c000e036:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e03a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e03e:	89 d3                	mov    ebx,edx
c000e040:	0f b6 c6             	movzx  eax,dh
c000e043:	c1 eb 10             	shr    ebx,0x10
c000e046:	48                   	dec    eax
c000e047:	66 81 eb 6c 07       	sub    bx,0x76c
c000e04c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000e050:	0f b6 f5             	movzx  esi,ch
c000e053:	89 cf                	mov    edi,ecx
c000e055:	6b f6 3c             	imul   esi,esi,0x3c
c000e058:	c1 ef 10             	shr    edi,0x10
c000e05b:	0f b6 c9             	movzx  ecx,cl
c000e05e:	89 f8                	mov    eax,edi
c000e060:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e066:	0f b6 f8             	movzx  edi,al
c000e069:	0f b6 d2             	movzx  edx,dl
c000e06c:	01 fe                	add    esi,edi
c000e06e:	01 f1                	add    ecx,esi
c000e070:	0f b7 f3             	movzx  esi,bx
c000e073:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e077:	c1 f9 1f             	sar    ecx,0x1f
c000e07a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000e07f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e083:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000e088:	8b 0c 8d 40 40 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbfc0]
c000e08f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000e093:	76 29                	jbe    c000e0be <datetimeToSeconds(datetime_t)+0x8f>
c000e095:	f6 c3 03             	test   bl,0x3
c000e098:	75 24                	jne    c000e0be <datetimeToSeconds(datetime_t)+0x8f>
c000e09a:	31 d2                	xor    edx,edx
c000e09c:	bf 64 00 00 00       	mov    edi,0x64
c000e0a1:	89 d8                	mov    eax,ebx
c000e0a3:	66 f7 f7             	div    di
c000e0a6:	66 85 d2             	test   dx,dx
c000e0a9:	75 12                	jne    c000e0bd <datetimeToSeconds(datetime_t)+0x8e>
c000e0ab:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000e0b1:	bf 90 01 00 00       	mov    edi,0x190
c000e0b6:	99                   	cdq    
c000e0b7:	f7 ff                	idiv   edi
c000e0b9:	85 d2                	test   edx,edx
c000e0bb:	75 01                	jne    c000e0be <datetimeToSeconds(datetime_t)+0x8f>
c000e0bd:	41                   	inc    ecx
c000e0be:	66 83 fb 46          	cmp    bx,0x46
c000e0c2:	76 45                	jbe    c000e109 <datetimeToSeconds(datetime_t)+0xda>
c000e0c4:	bb 46 00 00 00       	mov    ebx,0x46
c000e0c9:	bf 64 00 00 00       	mov    edi,0x64
c000e0ce:	bd 90 01 00 00       	mov    ebp,0x190
c000e0d3:	b8 6d 01 00 00       	mov    eax,0x16d
c000e0d8:	f6 c3 03             	test   bl,0x3
c000e0db:	75 23                	jne    c000e100 <datetimeToSeconds(datetime_t)+0xd1>
c000e0dd:	89 d8                	mov    eax,ebx
c000e0df:	99                   	cdq    
c000e0e0:	f7 ff                	idiv   edi
c000e0e2:	b8 6e 01 00 00       	mov    eax,0x16e
c000e0e7:	85 d2                	test   edx,edx
c000e0e9:	75 15                	jne    c000e100 <datetimeToSeconds(datetime_t)+0xd1>
c000e0eb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000e0f1:	99                   	cdq    
c000e0f2:	f7 fd                	idiv   ebp
c000e0f4:	83 fa 01             	cmp    edx,0x1
c000e0f7:	19 c0                	sbb    eax,eax
c000e0f9:	f7 d0                	not    eax
c000e0fb:	05 6e 01 00 00       	add    eax,0x16e
c000e100:	01 c1                	add    ecx,eax
c000e102:	43                   	inc    ebx
c000e103:	39 f3                	cmp    ebx,esi
c000e105:	7c cc                	jl     c000e0d3 <datetimeToSeconds(datetime_t)+0xa4>
c000e107:	eb 35                	jmp    c000e13e <datetimeToSeconds(datetime_t)+0x10f>
c000e109:	74 33                	je     c000e13e <datetimeToSeconds(datetime_t)+0x10f>
c000e10b:	b8 45 00 00 00       	mov    eax,0x45
c000e110:	89 c2                	mov    edx,eax
c000e112:	83 e2 03             	and    edx,0x3
c000e115:	39 f0                	cmp    eax,esi
c000e117:	7e 0f                	jle    c000e128 <datetimeToSeconds(datetime_t)+0xf9>
c000e119:	83 fa 01             	cmp    edx,0x1
c000e11c:	19 d2                	sbb    edx,edx
c000e11e:	48                   	dec    eax
c000e11f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000e126:	eb e8                	jmp    c000e110 <datetimeToSeconds(datetime_t)+0xe1>
c000e128:	b8 6d 01 00 00       	mov    eax,0x16d
c000e12d:	85 d2                	test   edx,edx
c000e12f:	75 0b                	jne    c000e13c <datetimeToSeconds(datetime_t)+0x10d>
c000e131:	66 83 fb 01          	cmp    bx,0x1
c000e135:	19 c0                	sbb    eax,eax
c000e137:	05 6e 01 00 00       	add    eax,0x16e
c000e13c:	29 c1                	sub    ecx,eax
c000e13e:	b8 80 51 01 00       	mov    eax,0x15180
c000e143:	f7 e9                	imul   ecx
c000e145:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000e149:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000e14d:	83 c4 14             	add    esp,0x14
c000e150:	5b                   	pop    ebx
c000e151:	5e                   	pop    esi
c000e152:	5f                   	pop    edi
c000e153:	5d                   	pop    ebp
c000e154:	c3                   	ret    
c000e155:	90                   	nop

c000e156 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000e156:	57                   	push   edi
c000e157:	56                   	push   esi
c000e158:	53                   	push   ebx
c000e159:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e15d:	8b 06                	mov    eax,DWORD PTR [esi]
c000e15f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000e162:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e166:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e16a:	e8 c0 fe ff ff       	call   c000e02f <datetimeToSeconds(datetime_t)>
c000e16f:	59                   	pop    ecx
c000e170:	0f b6 0d dc 74 02 c0 	movzx  ecx,BYTE PTR ds:0xc00274dc
c000e177:	5b                   	pop    ebx
c000e178:	03 0d e0 74 02 c0    	add    ecx,DWORD PTR ds:0xc00274e0
c000e17e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000e184:	89 cb                	mov    ebx,ecx
c000e186:	c1 fb 1f             	sar    ebx,0x1f
c000e189:	29 c8                	sub    eax,ecx
c000e18b:	19 da                	sbb    edx,ebx
c000e18d:	31 c9                	xor    ecx,ecx
c000e18f:	80 3d dd 74 02 c0 00 	cmp    BYTE PTR ds:0xc00274dd,0x0
c000e196:	74 05                	je     c000e19d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000e198:	b9 08 07 00 00       	mov    ecx,0x708
c000e19d:	31 db                	xor    ebx,ebx
c000e19f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000e1a3:	29 c8                	sub    eax,ecx
c000e1a5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e1a9:	19 da                	sbb    edx,ebx
c000e1ab:	89 f8                	mov    eax,edi
c000e1ad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000e1b1:	5b                   	pop    ebx
c000e1b2:	5e                   	pop    esi
c000e1b3:	5f                   	pop    edi
c000e1b4:	ff e0                	jmp    eax

c000e1b6 <secondsToDatetime(unsigned long long)>:
c000e1b6:	55                   	push   ebp
c000e1b7:	57                   	push   edi
c000e1b8:	56                   	push   esi
c000e1b9:	53                   	push   ebx
c000e1ba:	83 ec 1c             	sub    esp,0x1c
c000e1bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e1c1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000e1c5:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e1c9:	6a 00                	push   0x0
c000e1cb:	68 80 51 01 00       	push   0x15180
c000e1d0:	55                   	push   ebp
c000e1d1:	57                   	push   edi
c000e1d2:	e8 f9 3b 01 00       	call   c0021dd0 <__udivdi3>
c000e1d7:	83 c4 10             	add    esp,0x10
c000e1da:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000e1e0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1e4:	6a 00                	push   0x0
c000e1e6:	68 80 51 01 00       	push   0x15180
c000e1eb:	55                   	push   ebp
c000e1ec:	57                   	push   edi
c000e1ed:	bf 10 0e 00 00       	mov    edi,0xe10
c000e1f2:	e8 d9 3c 01 00       	call   c0021ed0 <__umoddi3>
c000e1f7:	83 c4 10             	add    esp,0x10
c000e1fa:	99                   	cdq    
c000e1fb:	f7 ff                	idiv   edi
c000e1fd:	bf 3c 00 00 00       	mov    edi,0x3c
c000e202:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000e205:	89 d0                	mov    eax,edx
c000e207:	99                   	cdq    
c000e208:	f7 ff                	idiv   edi
c000e20a:	85 db                	test   ebx,ebx
c000e20c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e20f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e212:	79 11                	jns    c000e225 <secondsToDatetime(unsigned long long)+0x6f>
c000e214:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e218:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e21e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e223:	eb 07                	jmp    c000e22c <secondsToDatetime(unsigned long long)+0x76>
c000e225:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e22a:	89 d8                	mov    eax,ebx
c000e22c:	bf b4 05 00 00       	mov    edi,0x5b4
c000e231:	99                   	cdq    
c000e232:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e237:	f7 f9                	idiv   ecx
c000e239:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e23e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e242:	31 d2                	xor    edx,edx
c000e244:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e24c:	01 c3                	add    ebx,eax
c000e24e:	89 d8                	mov    eax,ebx
c000e250:	f7 f1                	div    ecx
c000e252:	31 d2                	xor    edx,edx
c000e254:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e257:	89 d8                	mov    eax,ebx
c000e259:	f7 f7                	div    edi
c000e25b:	31 d2                	xor    edx,edx
c000e25d:	29 c1                	sub    ecx,eax
c000e25f:	89 d8                	mov    eax,ebx
c000e261:	f7 f5                	div    ebp
c000e263:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e268:	29 c1                	sub    ecx,eax
c000e26a:	31 d2                	xor    edx,edx
c000e26c:	89 c8                	mov    eax,ecx
c000e26e:	f7 f5                	div    ebp
c000e270:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e275:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e279:	31 d2                	xor    edx,edx
c000e27b:	89 c8                	mov    eax,ecx
c000e27d:	f7 f5                	div    ebp
c000e27f:	31 d2                	xor    edx,edx
c000e281:	01 c3                	add    ebx,eax
c000e283:	89 c8                	mov    eax,ecx
c000e285:	f7 f7                	div    edi
c000e287:	bf 99 00 00 00       	mov    edi,0x99
c000e28c:	29 c3                	sub    ebx,eax
c000e28e:	31 d2                	xor    edx,edx
c000e290:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e298:	29 c3                	sub    ebx,eax
c000e29a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e29d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e2a0:	bb 05 00 00 00       	mov    ebx,0x5
c000e2a5:	83 c1 02             	add    ecx,0x2
c000e2a8:	89 c8                	mov    eax,ecx
c000e2aa:	f7 f7                	div    edi
c000e2ac:	31 d2                	xor    edx,edx
c000e2ae:	89 c7                	mov    edi,eax
c000e2b0:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e2b6:	83 c0 02             	add    eax,0x2
c000e2b9:	f7 f3                	div    ebx
c000e2bb:	89 eb                	mov    ebx,ebp
c000e2bd:	29 c3                	sub    ebx,eax
c000e2bf:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e2c5:	88 1e                	mov    BYTE PTR [esi],bl
c000e2c7:	19 c0                	sbb    eax,eax
c000e2c9:	31 d2                	xor    edx,edx
c000e2cb:	83 e0 0c             	and    eax,0xc
c000e2ce:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e2d2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e2da:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e2de:	83 f9 01             	cmp    ecx,0x1
c000e2e1:	0f 96 c2             	setbe  dl
c000e2e4:	41                   	inc    ecx
c000e2e5:	01 d0                	add    eax,edx
c000e2e7:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e2ea:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e2ee:	83 c4 1c             	add    esp,0x1c
c000e2f1:	89 f0                	mov    eax,esi
c000e2f3:	5b                   	pop    ebx
c000e2f4:	5e                   	pop    esi
c000e2f5:	5f                   	pop    edi
c000e2f6:	5d                   	pop    ebp
c000e2f7:	c2 04 00             	ret    0x4

c000e2fa <Clock::timeInDatetimeLocal()>:
c000e2fa:	53                   	push   ebx
c000e2fb:	83 ec 14             	sub    esp,0x14
c000e2fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e302:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e306:	e8 83 fc ff ff       	call   c000df8e <Clock::timeInSecondsLocal()>
c000e30b:	83 c4 0c             	add    esp,0xc
c000e30e:	52                   	push   edx
c000e30f:	50                   	push   eax
c000e310:	53                   	push   ebx
c000e311:	e8 a0 fe ff ff       	call   c000e1b6 <secondsToDatetime(unsigned long long)>
c000e316:	89 d8                	mov    eax,ebx
c000e318:	83 c4 14             	add    esp,0x14
c000e31b:	5b                   	pop    ebx
c000e31c:	c2 04 00             	ret    0x4
c000e31f:	90                   	nop

c000e320 <Device::hibernate()>:
c000e320:	c3                   	ret    
c000e321:	90                   	nop

c000e322 <Device::wake()>:
c000e322:	c3                   	ret    
c000e323:	90                   	nop

c000e324 <Device::detect()>:
c000e324:	c3                   	ret    
c000e325:	90                   	nop

c000e326 <Device::disableLegacy()>:
c000e326:	c3                   	ret    
c000e327:	90                   	nop

c000e328 <Device::powerSaving(PowerSavingLevel)>:
c000e328:	c3                   	ret    
c000e329:	90                   	nop

c000e32a <DriverlessDevice::close(int, int, void*)>:
c000e32a:	31 c0                	xor    eax,eax
c000e32c:	c3                   	ret    
c000e32d:	90                   	nop

c000e32e <DriverlessDevice::detect()>:
c000e32e:	c3                   	ret    
c000e32f:	90                   	nop

c000e330 <DriverlessDevice::open(int, int, void*)>:
c000e330:	83 ec 18             	sub    esp,0x18
c000e333:	68 70 40 02 c0       	push   0xc0024070
c000e338:	e8 ca 5a 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000e33d:	83 c8 ff             	or     eax,0xffffffff
c000e340:	83 c4 1c             	add    esp,0x1c
c000e343:	c3                   	ret    

c000e344 <Device::~Device()>:
c000e344:	ba d0 40 02 c0       	mov    edx,0xc00240d0
c000e349:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e34d:	89 10                	mov    DWORD PTR [eax],edx
c000e34f:	90                   	nop
c000e350:	c3                   	ret    
c000e351:	90                   	nop

c000e352 <Device::~Device()>:
c000e352:	83 ec 0c             	sub    esp,0xc
c000e355:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e359:	e8 e6 ff ff ff       	call   c000e344 <Device::~Device()>
c000e35e:	83 c4 04             	add    esp,0x4
c000e361:	83 ec 08             	sub    esp,0x8
c000e364:	68 58 01 00 00       	push   0x158
c000e369:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e36d:	e8 72 eb ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000e372:	83 c4 10             	add    esp,0x10
c000e375:	83 c4 0c             	add    esp,0xc
c000e378:	c3                   	ret    
c000e379:	90                   	nop

c000e37a <Device::findAndLoadDriver()>:
c000e37a:	c7 44 24 04 8e 40 02 c0 	mov    DWORD PTR [esp+0x4],0xc002408e
c000e382:	e9 3e ec ff ff       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>
c000e387:	90                   	nop

c000e388 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e388:	57                   	push   edi
c000e389:	b9 09 00 00 00       	mov    ecx,0x9
c000e38e:	56                   	push   esi
c000e38f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e393:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e397:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e3a1:	81 c7 18 01 00 00    	add    edi,0x118
c000e3a7:	fc                   	cld    
c000e3a8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e3aa:	5e                   	pop    esi
c000e3ab:	5f                   	pop    edi
c000e3ac:	c3                   	ret    
c000e3ad:	90                   	nop

c000e3ae <Device::preOpenACPI(void*, char*, char*)>:
c000e3ae:	57                   	push   edi
c000e3af:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e3b4:	56                   	push   esi
c000e3b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3b9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3bd:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e3c7:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e3cd:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e3d3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e3d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3d9:	b9 0e 00 00 00       	mov    ecx,0xe
c000e3de:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e3e4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e3e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e3ea:	5e                   	pop    esi
c000e3eb:	5f                   	pop    edi
c000e3ec:	c3                   	ret    
c000e3ed:	90                   	nop

c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e3ee:	53                   	push   ebx
c000e3ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e3fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e3ff:	0f b6 c0             	movzx  eax,al
c000e402:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e406:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e40a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e40e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e412:	5b                   	pop    ebx
c000e413:	e9 10 06 00 00       	jmp    c000ea28 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000e418 <Device::getParent()>:
c000e418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e41c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e422:	c3                   	ret    
c000e423:	90                   	nop

c000e424 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e424:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e428:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e42c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000e431:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e435:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000e439:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e43d:	e9 45 07 00 00       	jmp    c000eb87 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000e442 <Device::addChild(Device*)>:
c000e442:	53                   	push   ebx
c000e443:	83 ec 08             	sub    esp,0x8
c000e446:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e44a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e44e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e454:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e45a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e45c:	85 d2                	test   edx,edx
c000e45e:	74 04                	je     c000e464 <Device::addChild(Device*)+0x22>
c000e460:	89 d3                	mov    ebx,edx
c000e462:	eb f6                	jmp    c000e45a <Device::addChild(Device*)+0x18>
c000e464:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	6a 08                	push   0x8
c000e46c:	e8 46 b8 ff ff       	call   c0009cb7 <malloc>
c000e471:	89 03                	mov    DWORD PTR [ebx],eax
c000e473:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e479:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e480:	83 c4 18             	add    esp,0x18
c000e483:	5b                   	pop    ebx
c000e484:	c3                   	ret    
c000e485:	90                   	nop

c000e486 <Device::removeAllChildren()>:
c000e486:	56                   	push   esi
c000e487:	53                   	push   ebx
c000e488:	52                   	push   edx
c000e489:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e48d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e493:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e496:	74 17                	je     c000e4af <Device::removeAllChildren()+0x29>
c000e498:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e49b:	85 c0                	test   eax,eax
c000e49d:	74 0c                	je     c000e4ab <Device::removeAllChildren()+0x25>
c000e49f:	83 ec 0c             	sub    esp,0xc
c000e4a2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4a4:	50                   	push   eax
c000e4a5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e4a8:	83 c4 10             	add    esp,0x10
c000e4ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e4ad:	eb e4                	jmp    c000e493 <Device::removeAllChildren()+0xd>
c000e4af:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e4b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4bb:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e4c1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4c8:	58                   	pop    eax
c000e4c9:	5b                   	pop    ebx
c000e4ca:	5e                   	pop    esi
c000e4cb:	c3                   	ret    

c000e4cc <Device::hibernateAll()>:
c000e4cc:	53                   	push   ebx
c000e4cd:	83 ec 14             	sub    esp,0x14
c000e4d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e4d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e4d6:	53                   	push   ebx
c000e4d7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e4da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e4e0:	83 c4 10             	add    esp,0x10
c000e4e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e4e6:	74 0f                	je     c000e4f7 <Device::hibernateAll()+0x2b>
c000e4e8:	83 ec 0c             	sub    esp,0xc
c000e4eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e4ee:	e8 d9 ff ff ff       	call   c000e4cc <Device::hibernateAll()>
c000e4f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e4f5:	eb e9                	jmp    c000e4e0 <Device::hibernateAll()+0x14>
c000e4f7:	83 c4 08             	add    esp,0x8
c000e4fa:	5b                   	pop    ebx
c000e4fb:	c3                   	ret    

c000e4fc <Device::wakeAll()>:
c000e4fc:	53                   	push   ebx
c000e4fd:	83 ec 14             	sub    esp,0x14
c000e500:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e504:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e506:	53                   	push   ebx
c000e507:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e50a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e510:	83 c4 10             	add    esp,0x10
c000e513:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e516:	74 0f                	je     c000e527 <Device::wakeAll()+0x2b>
c000e518:	83 ec 0c             	sub    esp,0xc
c000e51b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e51e:	e8 d9 ff ff ff       	call   c000e4fc <Device::wakeAll()>
c000e523:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e525:	eb e9                	jmp    c000e510 <Device::wakeAll()+0x14>
c000e527:	83 c4 08             	add    esp,0x8
c000e52a:	5b                   	pop    ebx
c000e52b:	c3                   	ret    

c000e52c <Device::detectAll()>:
c000e52c:	53                   	push   ebx
c000e52d:	83 ec 14             	sub    esp,0x14
c000e530:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e534:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e536:	53                   	push   ebx
c000e537:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e53a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e540:	83 c4 10             	add    esp,0x10
c000e543:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e546:	74 0f                	je     c000e557 <Device::detectAll()+0x2b>
c000e548:	83 ec 0c             	sub    esp,0xc
c000e54b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e54e:	e8 d9 ff ff ff       	call   c000e52c <Device::detectAll()>
c000e553:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e555:	eb e9                	jmp    c000e540 <Device::detectAll()+0x14>
c000e557:	83 c4 08             	add    esp,0x8
c000e55a:	5b                   	pop    ebx
c000e55b:	c3                   	ret    

c000e55c <Device::disableLegacyAll()>:
c000e55c:	53                   	push   ebx
c000e55d:	83 ec 14             	sub    esp,0x14
c000e560:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e564:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e566:	53                   	push   ebx
c000e567:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e56a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e570:	83 c4 10             	add    esp,0x10
c000e573:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e576:	74 0f                	je     c000e587 <Device::disableLegacyAll()+0x2b>
c000e578:	83 ec 0c             	sub    esp,0xc
c000e57b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e57e:	e8 d9 ff ff ff       	call   c000e55c <Device::disableLegacyAll()>
c000e583:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e585:	eb e9                	jmp    c000e570 <Device::disableLegacyAll()+0x14>
c000e587:	83 c4 08             	add    esp,0x8
c000e58a:	5b                   	pop    ebx
c000e58b:	c3                   	ret    

c000e58c <Device::loadDriversForAll()>:
c000e58c:	53                   	push   ebx
c000e58d:	83 ec 08             	sub    esp,0x8
c000e590:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e594:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e59b:	75 0c                	jne    c000e5a9 <Device::loadDriversForAll()+0x1d>
c000e59d:	83 ec 0c             	sub    esp,0xc
c000e5a0:	53                   	push   ebx
c000e5a1:	e8 d4 fd ff ff       	call   c000e37a <Device::findAndLoadDriver()>
c000e5a6:	83 c4 10             	add    esp,0x10
c000e5a9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5af:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5b2:	74 12                	je     c000e5c6 <Device::loadDriversForAll()+0x3a>
c000e5b4:	83 ec 0c             	sub    esp,0xc
c000e5b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5ba:	e8 cd ff ff ff       	call   c000e58c <Device::loadDriversForAll()>
c000e5bf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5c1:	83 c4 10             	add    esp,0x10
c000e5c4:	eb e9                	jmp    c000e5af <Device::loadDriversForAll()+0x23>
c000e5c6:	83 c4 08             	add    esp,0x8
c000e5c9:	5b                   	pop    ebx
c000e5ca:	c3                   	ret    
c000e5cb:	90                   	nop

c000e5cc <Device::closeAll()>:
c000e5cc:	53                   	push   ebx
c000e5cd:	83 ec 08             	sub    esp,0x8
c000e5d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e5d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e5d6:	6a 00                	push   0x0
c000e5d8:	6a 00                	push   0x0
c000e5da:	6a 00                	push   0x0
c000e5dc:	53                   	push   ebx
c000e5dd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e5e0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5e6:	83 c4 10             	add    esp,0x10
c000e5e9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5ec:	74 0f                	je     c000e5fd <Device::closeAll()+0x31>
c000e5ee:	83 ec 0c             	sub    esp,0xc
c000e5f1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5f4:	e8 d3 ff ff ff       	call   c000e5cc <Device::closeAll()>
c000e5f9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5fb:	eb e9                	jmp    c000e5e6 <Device::closeAll()+0x1a>
c000e5fd:	83 c4 08             	add    esp,0x8
c000e600:	5b                   	pop    ebx
c000e601:	c3                   	ret    

c000e602 <Device::powerSavingAll(PowerSavingLevel)>:
c000e602:	56                   	push   esi
c000e603:	53                   	push   ebx
c000e604:	83 ec 0c             	sub    esp,0xc
c000e607:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e60b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e60f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e611:	56                   	push   esi
c000e612:	53                   	push   ebx
c000e613:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e616:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e61c:	83 c4 10             	add    esp,0x10
c000e61f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e622:	74 0f                	je     c000e633 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e624:	52                   	push   edx
c000e625:	52                   	push   edx
c000e626:	56                   	push   esi
c000e627:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e62a:	e8 d3 ff ff ff       	call   c000e602 <Device::powerSavingAll(PowerSavingLevel)>
c000e62f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e631:	eb e9                	jmp    c000e61c <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e633:	58                   	pop    eax
c000e634:	5b                   	pop    ebx
c000e635:	5e                   	pop    esi
c000e636:	c3                   	ret    
c000e637:	90                   	nop

c000e638 <Device::setName(char const*)>:
c000e638:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e640:	e9 f3 20 ff ff       	jmp    c0000738 <strcpy>
c000e645:	90                   	nop

c000e646 <Device::Device(char const*)>:
c000e646:	83 ec 1c             	sub    esp,0x1c
c000e649:	ba d0 40 02 c0       	mov    edx,0xc00240d0
c000e64e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e652:	89 10                	mov    DWORD PTR [eax],edx
c000e654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e658:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e666:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e670:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e674:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e67e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e682:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e68c:	83 ec 08             	sub    esp,0x8
c000e68f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e693:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e697:	e8 9c ff ff ff       	call   c000e638 <Device::setName(char const*)>
c000e69c:	83 c4 10             	add    esp,0x10
c000e69f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e6a7:	83 ec 0c             	sub    esp,0xc
c000e6aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6ae:	e8 04 b6 ff ff       	call   c0009cb7 <malloc>
c000e6b3:	83 c4 10             	add    esp,0x10
c000e6b6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e6bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e6c3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e6c7:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e6cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e6d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e6dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6e1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e6e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e6ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6f2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e6f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6fd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e704:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e708:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e712:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e716:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e720:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e724:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e72e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e732:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e73c:	90                   	nop
c000e73d:	83 c4 1c             	add    esp,0x1c
c000e740:	c3                   	ret    
c000e741:	90                   	nop

c000e742 <Device::getName()>:
c000e742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e746:	05 d0 00 00 00       	add    eax,0xd0
c000e74b:	c3                   	ret    

c000e74c <DriverlessDevice::DriverlessDevice(char const*)>:
c000e74c:	83 ec 0c             	sub    esp,0xc
c000e74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e753:	83 ec 08             	sub    esp,0x8
c000e756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e75a:	50                   	push   eax
c000e75b:	e8 e6 fe ff ff       	call   c000e646 <Device::Device(char const*)>
c000e760:	83 c4 10             	add    esp,0x10
c000e763:	ba fc 40 02 c0       	mov    edx,0xc00240fc
c000e768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76c:	89 10                	mov    DWORD PTR [eax],edx
c000e76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e772:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e77c:	90                   	nop
c000e77d:	83 c4 0c             	add    esp,0xc
c000e780:	c3                   	ret    
c000e781:	90                   	nop

c000e782 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e782:	57                   	push   edi
c000e783:	56                   	push   esi
c000e784:	53                   	push   ebx
c000e785:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e789:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e78d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e791:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e797:	75 0c                	jne    c000e7a5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e799:	52                   	push   edx
c000e79a:	52                   	push   edx
c000e79b:	53                   	push   ebx
c000e79c:	56                   	push   esi
c000e79d:	e8 e0 3a 01 00       	call   c0022282 <LinkedList<Device>::addElement(Device*)>
c000e7a2:	83 c4 10             	add    esp,0x10
c000e7a5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e7ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e7ae:	74 12                	je     c000e7c2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e7b0:	50                   	push   eax
c000e7b1:	57                   	push   edi
c000e7b2:	56                   	push   esi
c000e7b3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e7b6:	e8 c7 ff ff ff       	call   c000e782 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e7bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e7bd:	83 c4 10             	add    esp,0x10
c000e7c0:	eb e9                	jmp    c000e7ab <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e7c2:	5b                   	pop    ebx
c000e7c3:	5e                   	pop    esi
c000e7c4:	5f                   	pop    edi
c000e7c5:	c3                   	ret    

c000e7c6 <getDevicesOfType(DeviceType)>:
c000e7c6:	53                   	push   ebx
c000e7c7:	83 ec 14             	sub    esp,0x14
c000e7ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e7ce:	53                   	push   ebx
c000e7cf:	e8 8a 3b 01 00       	call   c002235e <LinkedList<Device>::LinkedList()>
c000e7d4:	83 c4 0c             	add    esp,0xc
c000e7d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7db:	53                   	push   ebx
c000e7dc:	ff 35 a8 73 02 c0    	push   DWORD PTR ds:0xc00273a8
c000e7e2:	e8 9b ff ff ff       	call   c000e782 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e7e7:	89 d8                	mov    eax,ebx
c000e7e9:	83 c4 18             	add    esp,0x18
c000e7ec:	5b                   	pop    ebx
c000e7ed:	c2 04 00             	ret    0x4

c000e7f0 <HardDiskController::HardDiskController(char const*)>:
c000e7f0:	83 ec 0c             	sub    esp,0xc
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	83 ec 08             	sub    esp,0x8
c000e7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7fe:	50                   	push   eax
c000e7ff:	e8 42 fe ff ff       	call   c000e646 <Device::Device(char const*)>
c000e804:	83 c4 10             	add    esp,0x10
c000e807:	ba 28 41 02 c0       	mov    edx,0xc0024128
c000e80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e810:	89 10                	mov    DWORD PTR [eax],edx
c000e812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e816:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e820:	90                   	nop
c000e821:	83 c4 0c             	add    esp,0xc
c000e824:	c3                   	ret    
c000e825:	90                   	nop
c000e826:	66 90                	xchg   ax,ax

c000e828 <HardDiskController::~HardDiskController()>:
c000e828:	83 ec 0c             	sub    esp,0xc
c000e82b:	ba 28 41 02 c0       	mov    edx,0xc0024128
c000e830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e834:	89 10                	mov    DWORD PTR [eax],edx
c000e836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83a:	83 ec 0c             	sub    esp,0xc
c000e83d:	50                   	push   eax
c000e83e:	e8 01 fb ff ff       	call   c000e344 <Device::~Device()>
c000e843:	83 c4 10             	add    esp,0x10
c000e846:	90                   	nop
c000e847:	83 c4 0c             	add    esp,0xc
c000e84a:	c3                   	ret    
c000e84b:	90                   	nop

c000e84c <HardDiskController::~HardDiskController()>:
c000e84c:	83 ec 0c             	sub    esp,0xc
c000e84f:	83 ec 0c             	sub    esp,0xc
c000e852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e856:	e8 cd ff ff ff       	call   c000e828 <HardDiskController::~HardDiskController()>
c000e85b:	83 c4 10             	add    esp,0x10
c000e85e:	83 ec 08             	sub    esp,0x8
c000e861:	68 58 01 00 00       	push   0x158
c000e866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e86a:	e8 75 e6 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000e86f:	83 c4 10             	add    esp,0x10
c000e872:	83 c4 0c             	add    esp,0xc
c000e875:	c3                   	ret    

c000e876 <PhysicalDisk::eject()>:
c000e876:	83 c8 ff             	or     eax,0xffffffff
c000e879:	c3                   	ret    

c000e87a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e87a:	83 ec 0c             	sub    esp,0xc
c000e87d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e881:	83 ec 08             	sub    esp,0x8
c000e884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e888:	50                   	push   eax
c000e889:	e8 b8 fd ff ff       	call   c000e646 <Device::Device(char const*)>
c000e88e:	83 c4 10             	add    esp,0x10
c000e891:	ba 54 41 02 c0       	mov    edx,0xc0024154
c000e896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89a:	89 10                	mov    DWORD PTR [eax],edx
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ab:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b6:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e8c8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e8dc:	90                   	nop
c000e8dd:	83 c4 0c             	add    esp,0xc
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop

c000e8e2 <PhysicalDisk::startCache()>:
c000e8e2:	56                   	push   esi
c000e8e3:	53                   	push   ebx
c000e8e4:	83 ec 10             	sub    esp,0x10
c000e8e7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e8eb:	6a 44                	push   0x44
c000e8ed:	e8 c5 b3 ff ff       	call   c0009cb7 <malloc>
c000e8f2:	89 c6                	mov    esi,eax
c000e8f4:	58                   	pop    eax
c000e8f5:	5a                   	pop    edx
c000e8f6:	53                   	push   ebx
c000e8f7:	56                   	push   esi
c000e8f8:	e8 c7 15 00 00       	call   c000fec4 <VCache::VCache(PhysicalDisk*)>
c000e8fd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e903:	83 c4 14             	add    esp,0x14
c000e906:	5b                   	pop    ebx
c000e907:	5e                   	pop    esi
c000e908:	c3                   	ret    
c000e909:	90                   	nop

c000e90a <PhysicalDisk::~PhysicalDisk()>:
c000e90a:	83 ec 0c             	sub    esp,0xc
c000e90d:	ba 54 41 02 c0       	mov    edx,0xc0024154
c000e912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e916:	89 10                	mov    DWORD PTR [eax],edx
c000e918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e91c:	83 ec 0c             	sub    esp,0xc
c000e91f:	50                   	push   eax
c000e920:	e8 1f fa ff ff       	call   c000e344 <Device::~Device()>
c000e925:	83 c4 10             	add    esp,0x10
c000e928:	90                   	nop
c000e929:	83 c4 0c             	add    esp,0xc
c000e92c:	c3                   	ret    
c000e92d:	90                   	nop

c000e92e <PhysicalDisk::~PhysicalDisk()>:
c000e92e:	83 ec 0c             	sub    esp,0xc
c000e931:	83 ec 0c             	sub    esp,0xc
c000e934:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e938:	e8 cd ff ff ff       	call   c000e90a <PhysicalDisk::~PhysicalDisk()>
c000e93d:	83 c4 10             	add    esp,0x10
c000e940:	83 ec 08             	sub    esp,0x8
c000e943:	68 6c 01 00 00       	push   0x16c
c000e948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e94c:	e8 93 e5 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000e951:	83 c4 10             	add    esp,0x10
c000e954:	83 c4 0c             	add    esp,0xc
c000e957:	c3                   	ret    

c000e958 <int_handler>:
c000e958:	55                   	push   ebp
c000e959:	57                   	push   edi
c000e95a:	56                   	push   esi
c000e95b:	53                   	push   ebx
c000e95c:	83 ec 0c             	sub    esp,0xc
c000e95f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e963:	80 3d 84 9e 02 c0 00 	cmp    BYTE PTR ds:0xc0029e84,0x0
c000e96a:	74 0b                	je     c000e977 <int_handler+0x1f>
c000e96c:	fa                   	cli    
c000e96d:	f4                   	hlt    
c000e96e:	80 3d 84 9e 02 c0 00 	cmp    BYTE PTR ds:0xc0029e84,0x0
c000e975:	75 f5                	jne    c000e96c <int_handler+0x14>
c000e977:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000e97a:	8d 46 e0             	lea    eax,[esi-0x20]
c000e97d:	83 f8 17             	cmp    eax,0x17
c000e980:	76 3e                	jbe    c000e9c0 <int_handler+0x68>
c000e982:	c1 e6 04             	shl    esi,0x4
c000e985:	31 db                	xor    ebx,ebx
c000e987:	8d ae 00 85 02 c0    	lea    ebp,[esi-0x3ffd7b00]
c000e98d:	81 c6 00 75 02 c0    	add    esi,0xc0027500
c000e993:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e997:	85 c0                	test   eax,eax
c000e999:	74 13                	je     c000e9ae <int_handler+0x56>
c000e99b:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000e99e:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000e9a2:	74 2a                	je     c000e9ce <int_handler+0x76>
c000e9a4:	83 ec 08             	sub    esp,0x8
c000e9a7:	52                   	push   edx
c000e9a8:	57                   	push   edi
c000e9a9:	ff d0                	call   eax
c000e9ab:	83 c4 10             	add    esp,0x10
c000e9ae:	43                   	inc    ebx
c000e9af:	83 fb 04             	cmp    ebx,0x4
c000e9b2:	75 df                	jne    c000e993 <int_handler+0x3b>
c000e9b4:	83 c4 0c             	add    esp,0xc
c000e9b7:	31 c0                	xor    eax,eax
c000e9b9:	5b                   	pop    ebx
c000e9ba:	31 d2                	xor    edx,edx
c000e9bc:	5e                   	pop    esi
c000e9bd:	5f                   	pop    edi
c000e9be:	5d                   	pop    ebp
c000e9bf:	c3                   	ret    
c000e9c0:	83 ec 0c             	sub    esp,0xc
c000e9c3:	50                   	push   eax
c000e9c4:	e8 33 c1 00 00       	call   c001aafc <Hal::endOfInterrupt(int)>
c000e9c9:	83 c4 10             	add    esp,0x10
c000e9cc:	eb b4                	jmp    c000e982 <int_handler+0x2a>
c000e9ce:	83 ec 08             	sub    esp,0x8
c000e9d1:	52                   	push   edx
c000e9d2:	57                   	push   edi
c000e9d3:	ff d0                	call   eax
c000e9d5:	83 c4 10             	add    esp,0x10
c000e9d8:	83 c4 0c             	add    esp,0xc
c000e9db:	5b                   	pop    ebx
c000e9dc:	5e                   	pop    esi
c000e9dd:	5f                   	pop    edi
c000e9de:	5d                   	pop    ebp
c000e9df:	c3                   	ret    

c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e9e0:	56                   	push   esi
c000e9e1:	31 c0                	xor    eax,eax
c000e9e3:	53                   	push   ebx
c000e9e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e9e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e9ec:	89 ca                	mov    edx,ecx
c000e9ee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e9f2:	c1 e2 04             	shl    edx,0x4
c000e9f5:	83 bc 82 00 85 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd7b00],0x0
c000e9fd:	74 15                	je     c000ea14 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000e9ff:	40                   	inc    eax
c000ea00:	83 f8 04             	cmp    eax,0x4
c000ea03:	75 f0                	jne    c000e9f5 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000ea05:	c7 44 24 0c 84 41 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024184
c000ea0d:	5b                   	pop    ebx
c000ea0e:	5e                   	pop    esi
c000ea0f:	e9 f3 53 00 00       	jmp    c0013e07 <Krnl::panic(char const*)>
c000ea14:	8d 04 88             	lea    eax,[eax+ecx*4]
c000ea17:	89 1c 85 00 85 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7b00],ebx
c000ea1e:	89 34 85 00 75 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8b00],esi
c000ea25:	5b                   	pop    ebx
c000ea26:	5e                   	pop    esi
c000ea27:	c3                   	ret    

c000ea28 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000ea28:	57                   	push   edi
c000ea29:	8b 15 a8 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273a8
c000ea2f:	56                   	push   esi
c000ea30:	53                   	push   ebx
c000ea31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ea35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea39:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000ea40:	74 55                	je     c000ea97 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000ea42:	89 c7                	mov    edi,eax
c000ea44:	84 c0                	test   al,al
c000ea46:	74 1e                	je     c000ea66 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000ea48:	83 fe 0f             	cmp    esi,0xf
c000ea4b:	0f 8f cc 00 00 00    	jg     c000eb1d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf5>
c000ea51:	0f b6 b6 00 68 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd9800]
c000ea58:	66 8b bc 36 a0 9c 02 c0 	mov    di,WORD PTR [esi+esi*1-0x3ffd6360]
c000ea60:	66 d1 ef             	shr    di,1
c000ea63:	83 e7 01             	and    edi,0x1
c000ea66:	83 ec 08             	sub    esp,0x8
c000ea69:	31 db                	xor    ebx,ebx
c000ea6b:	ff 35 00 b3 02 c0    	push   DWORD PTR ds:0xc002b300
c000ea71:	68 91 41 02 c0       	push   0xc0024191
c000ea76:	e8 4a e5 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000ea7b:	83 c4 10             	add    esp,0x10
c000ea7e:	a1 00 b3 02 c0       	mov    eax,ds:0xc002b300
c000ea83:	85 c0                	test   eax,eax
c000ea85:	7f 51                	jg     c000ead8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb0>
c000ea87:	83 ec 0c             	sub    esp,0xc
c000ea8a:	68 a8 41 02 c0       	push   0xc00241a8
c000ea8f:	e8 73 53 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000ea94:	83 c4 10             	add    esp,0x10
c000ea97:	8d 4e 20             	lea    ecx,[esi+0x20]
c000ea9a:	31 d2                	xor    edx,edx
c000ea9c:	89 c8                	mov    eax,ecx
c000ea9e:	c1 e0 04             	shl    eax,0x4
c000eaa1:	8b 9c 90 00 85 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffd7b00]
c000eaa8:	85 db                	test   ebx,ebx
c000eaaa:	0f 84 84 00 00 00    	je     c000eb34 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10c>
c000eab0:	42                   	inc    edx
c000eab1:	83 fa 04             	cmp    edx,0x4
c000eab4:	75 eb                	jne    c000eaa1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x79>
c000eab6:	83 ec 0c             	sub    esp,0xc
c000eab9:	68 fc 41 02 c0       	push   0xc00241fc
c000eabe:	e8 44 53 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000eac3:	83 c4 10             	add    esp,0x10
c000eac6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eacb:	5b                   	pop    ebx
c000eacc:	5e                   	pop    esi
c000eacd:	5f                   	pop    edi
c000eace:	c3                   	ret    
c000eacf:	43                   	inc    ebx
c000ead0:	39 1d 00 b3 02 c0    	cmp    DWORD PTR ds:0xc002b300,ebx
c000ead6:	7e af                	jle    c000ea87 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c000ead8:	83 ec 08             	sub    esp,0x8
c000eadb:	56                   	push   esi
c000eadc:	ff 34 9d 20 b3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4ce0]
c000eae3:	e8 b0 29 01 00       	call   c0021498 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000eae8:	83 c4 10             	add    esp,0x10
c000eaeb:	84 c0                	test   al,al
c000eaed:	74 e0                	je     c000eacf <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa7>
c000eaef:	50                   	push   eax
c000eaf0:	89 f8                	mov    eax,edi
c000eaf2:	0f b6 f8             	movzx  edi,al
c000eaf5:	8d 46 20             	lea    eax,[esi+0x20]
c000eaf8:	57                   	push   edi
c000eaf9:	0f b6 c0             	movzx  eax,al
c000eafc:	6a 00                	push   0x0
c000eafe:	50                   	push   eax
c000eaff:	89 f0                	mov    eax,esi
c000eb01:	6a 00                	push   0x0
c000eb03:	0f b6 c0             	movzx  eax,al
c000eb06:	6a 00                	push   0x0
c000eb08:	50                   	push   eax
c000eb09:	ff 34 9d 20 b3 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4ce0]
c000eb10:	e8 ff 2a 01 00       	call   c0021614 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000eb15:	83 c4 20             	add    esp,0x20
c000eb18:	e9 7a ff ff ff       	jmp    c000ea97 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6f>
c000eb1d:	83 ec 0c             	sub    esp,0xc
c000eb20:	31 ff                	xor    edi,edi
c000eb22:	68 c4 41 02 c0       	push   0xc00241c4
c000eb27:	e8 db 52 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000eb2c:	83 c4 10             	add    esp,0x10
c000eb2f:	e9 32 ff ff ff       	jmp    c000ea66 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c000eb34:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000eb37:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eb3b:	89 14 85 00 85 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7b00],edx
c000eb42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eb46:	5b                   	pop    ebx
c000eb47:	89 14 85 00 75 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8b00],edx
c000eb4e:	89 f0                	mov    eax,esi
c000eb50:	5e                   	pop    esi
c000eb51:	5f                   	pop    edi
c000eb52:	c3                   	ret    

c000eb53 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000eb53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb57:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000eb5b:	c1 e0 04             	shl    eax,0x4
c000eb5e:	8d 50 10             	lea    edx,[eax+0x10]
c000eb61:	39 88 00 85 02 c0    	cmp    DWORD PTR [eax-0x3ffd7b00],ecx
c000eb67:	74 08                	je     c000eb71 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000eb69:	83 c0 04             	add    eax,0x4
c000eb6c:	39 d0                	cmp    eax,edx
c000eb6e:	75 f1                	jne    c000eb61 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000eb70:	c3                   	ret    
c000eb71:	c7 80 00 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7b00],0x0
c000eb7b:	c7 80 00 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8b00],0x0
c000eb85:	eb e2                	jmp    c000eb69 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000eb87 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000eb87:	53                   	push   ebx
c000eb88:	83 ec 08             	sub    esp,0x8
c000eb8b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000eb8f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000eb94:	74 0e                	je     c000eba4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000eb96:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c000eb9b:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c000eba2:	75 37                	jne    c000ebdb <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000eba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eba8:	83 c0 20             	add    eax,0x20
c000ebab:	c1 e0 04             	shl    eax,0x4
c000ebae:	8d 50 10             	lea    edx,[eax+0x10]
c000ebb1:	39 98 00 85 02 c0    	cmp    DWORD PTR [eax-0x3ffd7b00],ebx
c000ebb7:	74 0c                	je     c000ebc5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000ebb9:	83 c0 04             	add    eax,0x4
c000ebbc:	39 d0                	cmp    eax,edx
c000ebbe:	75 f1                	jne    c000ebb1 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000ebc0:	83 c4 08             	add    esp,0x8
c000ebc3:	5b                   	pop    ebx
c000ebc4:	c3                   	ret    
c000ebc5:	c7 80 00 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7b00],0x0
c000ebcf:	c7 80 00 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8b00],0x0
c000ebd9:	eb de                	jmp    c000ebb9 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000ebdb:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000ebe0:	7f 11                	jg     c000ebf3 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000ebe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebe6:	0f b6 80 00 68 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9800]
c000ebed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ebf1:	eb b1                	jmp    c000eba4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000ebf3:	83 ec 0c             	sub    esp,0xc
c000ebf6:	68 b5 41 02 c0       	push   0xc00241b5
c000ebfb:	e8 07 52 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000ec00:	83 c4 10             	add    esp,0x10
c000ec03:	eb 9f                	jmp    c000eba4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000ec05 <setupINTS()>:
c000ec05:	31 c0                	xor    eax,eax
c000ec07:	c7 80 00 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7b00],0x0
c000ec11:	c7 80 00 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8b00],0x0
c000ec1b:	c7 80 04 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7afc],0x0
c000ec25:	c7 80 04 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8afc],0x0
c000ec2f:	c7 80 08 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7af8],0x0
c000ec39:	c7 80 08 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8af8],0x0
c000ec43:	c7 80 0c 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7af4],0x0
c000ec4d:	c7 80 0c 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8af4],0x0
c000ec57:	83 c0 10             	add    eax,0x10
c000ec5a:	3d 00 10 00 00       	cmp    eax,0x1000
c000ec5f:	75 a6                	jne    c000ec07 <setupINTS()+0x2>
c000ec61:	c3                   	ret    

c000ec62 <convertLegacyIRQNumber(int)>:
c000ec62:	83 ec 0c             	sub    esp,0xc
c000ec65:	8b 15 a8 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273a8
c000ec6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec6f:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c000ec76:	74 0c                	je     c000ec84 <convertLegacyIRQNumber(int)+0x22>
c000ec78:	83 f8 0f             	cmp    eax,0xf
c000ec7b:	7f 0b                	jg     c000ec88 <convertLegacyIRQNumber(int)+0x26>
c000ec7d:	0f b6 80 00 68 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd9800]
c000ec84:	83 c4 0c             	add    esp,0xc
c000ec87:	c3                   	ret    
c000ec88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec8c:	83 ec 0c             	sub    esp,0xc
c000ec8f:	68 c4 41 02 c0       	push   0xc00241c4
c000ec94:	e8 6e 51 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000ec99:	83 c4 10             	add    esp,0x10
c000ec9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eca0:	83 c4 0c             	add    esp,0xc
c000eca3:	c3                   	ret    

c000eca4 <startGUI(void*)>:
c000eca4:	55                   	push   ebp
c000eca5:	89 e5                	mov    ebp,esp
c000eca7:	53                   	push   ebx
c000eca8:	83 ec 04             	sub    esp,0x4
c000ecab:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000ecb0:	48                   	dec    eax
c000ecb1:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000ecb6:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000ecbb:	85 c0                	test   eax,eax
c000ecbd:	75 01                	jne    c000ecc0 <startGUI(void*)+0x1c>
c000ecbf:	fb                   	sti    
c000ecc0:	8b 1d a8 73 02 c0    	mov    ebx,DWORD PTR ds:0xc00273a8
c000ecc6:	83 ec 08             	sub    esp,0x8
c000ecc9:	6a 01                	push   0x1
c000eccb:	68 21 42 02 c0       	push   0xc0024221
c000ecd0:	e8 b7 7d 00 00       	call   c0016a8c <Thr::loadDLL(char const*, bool)>
c000ecd5:	83 c4 10             	add    esp,0x10
c000ecd8:	83 ec 08             	sub    esp,0x8
c000ecdb:	53                   	push   ebx
c000ecdc:	50                   	push   eax
c000ecdd:	e8 db 7f 00 00       	call   c0016cbd <Thr::executeDLL(unsigned long, void*)>
c000ece2:	83 c4 10             	add    esp,0x10
c000ece5:	8b 1d a8 73 02 c0    	mov    ebx,DWORD PTR ds:0xc00273a8
c000eceb:	83 ec 08             	sub    esp,0x8
c000ecee:	6a 01                	push   0x1
c000ecf0:	68 3b 42 02 c0       	push   0xc002423b
c000ecf5:	e8 92 7d 00 00       	call   c0016a8c <Thr::loadDLL(char const*, bool)>
c000ecfa:	83 c4 10             	add    esp,0x10
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	53                   	push   ebx
c000ed01:	50                   	push   eax
c000ed02:	e8 b6 7f 00 00       	call   c0016cbd <Thr::executeDLL(unsigned long, void*)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	90                   	nop
c000ed0b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ed0e:	c9                   	leave  
c000ed0f:	c3                   	ret    

c000ed10 <startGUIVESA(void*)>:
c000ed10:	55                   	push   ebp
c000ed11:	89 e5                	mov    ebp,esp
c000ed13:	53                   	push   ebx
c000ed14:	83 ec 04             	sub    esp,0x4
c000ed17:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000ed1c:	48                   	dec    eax
c000ed1d:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000ed22:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000ed27:	85 c0                	test   eax,eax
c000ed29:	75 01                	jne    c000ed2c <startGUIVESA(void*)+0x1c>
c000ed2b:	fb                   	sti    
c000ed2c:	8b 1d a8 73 02 c0    	mov    ebx,DWORD PTR ds:0xc00273a8
c000ed32:	83 ec 08             	sub    esp,0x8
c000ed35:	6a 01                	push   0x1
c000ed37:	68 59 42 02 c0       	push   0xc0024259
c000ed3c:	e8 4b 7d 00 00       	call   c0016a8c <Thr::loadDLL(char const*, bool)>
c000ed41:	83 c4 10             	add    esp,0x10
c000ed44:	83 ec 08             	sub    esp,0x8
c000ed47:	53                   	push   ebx
c000ed48:	50                   	push   eax
c000ed49:	e8 6f 7f 00 00       	call   c0016cbd <Thr::executeDLL(unsigned long, void*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	8b 1d a8 73 02 c0    	mov    ebx,DWORD PTR ds:0xc00273a8
c000ed57:	83 ec 08             	sub    esp,0x8
c000ed5a:	6a 01                	push   0x1
c000ed5c:	68 3b 42 02 c0       	push   0xc002423b
c000ed61:	e8 26 7d 00 00       	call   c0016a8c <Thr::loadDLL(char const*, bool)>
c000ed66:	83 c4 10             	add    esp,0x10
c000ed69:	83 ec 08             	sub    esp,0x8
c000ed6c:	53                   	push   ebx
c000ed6d:	50                   	push   eax
c000ed6e:	e8 4a 7f 00 00       	call   c0016cbd <Thr::executeDLL(unsigned long, void*)>
c000ed73:	83 c4 10             	add    esp,0x10
c000ed76:	90                   	nop
c000ed77:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ed7a:	c9                   	leave  
c000ed7b:	c3                   	ret    

c000ed7c <sendKeyToTerminal(unsigned char)>:
c000ed7c:	55                   	push   ebp
c000ed7d:	89 e5                	mov    ebp,esp
c000ed7f:	83 ec 28             	sub    esp,0x28
c000ed82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ed85:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000ed88:	a1 24 74 02 c0       	mov    eax,ds:0xc0027424
c000ed8d:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000ed91:	83 ec 08             	sub    esp,0x8
c000ed94:	52                   	push   edx
c000ed95:	50                   	push   eax
c000ed96:	e8 af c6 ff ff       	call   c000b44a <VgaText::receiveKey(unsigned char)>
c000ed9b:	83 c4 10             	add    esp,0x10
c000ed9e:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000eda2:	0f 85 8f 00 00 00    	jne    c000ee37 <sendKeyToTerminal(unsigned char)+0xbb>
c000eda8:	fa                   	cli    
c000eda9:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000edae:	40                   	inc    eax
c000edaf:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000edb4:	a1 c4 a8 02 c0       	mov    eax,ds:0xc002a8c4
c000edb9:	40                   	inc    eax
c000edba:	a3 c4 a8 02 c0       	mov    ds:0xc002a8c4,eax
c000edbf:	a1 00 95 02 c0       	mov    eax,ds:0xc0029500
c000edc4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000edc7:	c7 05 00 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029500,0x0
c000edd1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000edd5:	74 1f                	je     c000edf6 <sendKeyToTerminal(unsigned char)+0x7a>
c000edd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000edda:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000eddd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000ede0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000ede3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ede6:	83 ec 0c             	sub    esp,0xc
c000ede9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000edec:	e8 37 8b 00 00       	call   c0017928 <unblockTask(ThreadControlBlock*)>
c000edf1:	83 c4 10             	add    esp,0x10
c000edf4:	eb db                	jmp    c000edd1 <sendKeyToTerminal(unsigned char)+0x55>
c000edf6:	a1 c4 a8 02 c0       	mov    eax,ds:0xc002a8c4
c000edfb:	48                   	dec    eax
c000edfc:	a3 c4 a8 02 c0       	mov    ds:0xc002a8c4,eax
c000ee01:	a1 c4 a8 02 c0       	mov    eax,ds:0xc002a8c4
c000ee06:	85 c0                	test   eax,eax
c000ee08:	75 18                	jne    c000ee22 <sendKeyToTerminal(unsigned char)+0xa6>
c000ee0a:	a1 c0 a8 02 c0       	mov    eax,ds:0xc002a8c0
c000ee0f:	85 c0                	test   eax,eax
c000ee11:	74 0f                	je     c000ee22 <sendKeyToTerminal(unsigned char)+0xa6>
c000ee13:	c7 05 c0 a8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a8c0,0x0
c000ee1d:	e8 4a 86 00 00       	call   c001746c <schedule()>
c000ee22:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000ee27:	48                   	dec    eax
c000ee28:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000ee2d:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000ee32:	85 c0                	test   eax,eax
c000ee34:	75 01                	jne    c000ee37 <sendKeyToTerminal(unsigned char)+0xbb>
c000ee36:	fb                   	sti    
c000ee37:	90                   	nop
c000ee38:	c9                   	leave  
c000ee39:	c3                   	ret    

c000ee3a <sendKeyboardToken(KeyboardToken)>:
c000ee3a:	55                   	push   ebp
c000ee3b:	89 e5                	mov    ebp,esp
c000ee3d:	83 ec 18             	sub    esp,0x18
c000ee40:	e8 9b 52 00 00       	call   c00140e0 <Krnl::userIOReceived()>
c000ee45:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000ee48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ee4b:	0f b7 c0             	movzx  eax,ax
c000ee4e:	83 f2 01             	xor    edx,0x1
c000ee51:	88 90 20 95 02 c0    	mov    BYTE PTR [eax-0x3ffd6ae0],dl
c000ee57:	a1 08 95 02 c0       	mov    eax,ds:0xc0029508
c000ee5c:	85 c0                	test   eax,eax
c000ee5e:	74 24                	je     c000ee84 <sendKeyboardToken(KeyboardToken)+0x4a>
c000ee60:	8b 0d 08 95 02 c0    	mov    ecx,DWORD PTR ds:0xc0029508
c000ee66:	83 ec 04             	sub    esp,0x4
c000ee69:	68 20 95 02 c0       	push   0xc0029520
c000ee6e:	83 ec 08             	sub    esp,0x8
c000ee71:	89 e2                	mov    edx,esp
c000ee73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ee76:	89 02                	mov    DWORD PTR [edx],eax
c000ee78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ee7b:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000ee7f:	ff d1                	call   ecx
c000ee81:	83 c4 10             	add    esp,0x10
c000ee84:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000ee88:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000ee8b:	a0 28 99 02 c0       	mov    al,ds:0xc0029928
c000ee90:	38 c2                	cmp    dl,al
c000ee92:	74 1c                	je     c000eeb0 <sendKeyboardToken(KeyboardToken)+0x76>
c000ee94:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000ee97:	a2 28 99 02 c0       	mov    ds:0xc0029928,al
c000ee9c:	a0 28 99 02 c0       	mov    al,ds:0xc0029928
c000eea1:	0f b6 c0             	movzx  eax,al
c000eea4:	83 ec 0c             	sub    esp,0xc
c000eea7:	50                   	push   eax
c000eea8:	e8 e9 bb ff ff       	call   c000aa96 <setTerminalScrollLock(bool)>
c000eead:	83 c4 10             	add    esp,0x10
c000eeb0:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000eeb3:	84 c0                	test   al,al
c000eeb5:	0f 84 ae 00 00 00    	je     c000ef69 <sendKeyboardToken(KeyboardToken)+0x12f>
c000eebb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eebe:	66 3d 10 03          	cmp    ax,0x310
c000eec2:	75 06                	jne    c000eeca <sendKeyboardToken(KeyboardToken)+0x90>
c000eec4:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000eeca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eecd:	66 3d 11 03          	cmp    ax,0x311
c000eed1:	75 06                	jne    c000eed9 <sendKeyboardToken(KeyboardToken)+0x9f>
c000eed3:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000eed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eedc:	66 3d 12 03          	cmp    ax,0x312
c000eee0:	75 06                	jne    c000eee8 <sendKeyboardToken(KeyboardToken)+0xae>
c000eee2:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000eee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eeeb:	66 3d 13 03          	cmp    ax,0x313
c000eeef:	75 06                	jne    c000eef7 <sendKeyboardToken(KeyboardToken)+0xbd>
c000eef1:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000eef7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eefa:	66 3d 14 03          	cmp    ax,0x314
c000eefe:	75 06                	jne    c000ef06 <sendKeyboardToken(KeyboardToken)+0xcc>
c000ef00:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000ef06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef09:	66 3d 15 03          	cmp    ax,0x315
c000ef0d:	75 06                	jne    c000ef15 <sendKeyboardToken(KeyboardToken)+0xdb>
c000ef0f:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000ef15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef18:	66 3d 16 03          	cmp    ax,0x316
c000ef1c:	75 06                	jne    c000ef24 <sendKeyboardToken(KeyboardToken)+0xea>
c000ef1e:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000ef24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef27:	66 3d 17 03          	cmp    ax,0x317
c000ef2b:	75 06                	jne    c000ef33 <sendKeyboardToken(KeyboardToken)+0xf9>
c000ef2d:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000ef33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef36:	66 3d 18 03          	cmp    ax,0x318
c000ef3a:	75 06                	jne    c000ef42 <sendKeyboardToken(KeyboardToken)+0x108>
c000ef3c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000ef42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef45:	66 3d 19 03          	cmp    ax,0x319
c000ef49:	75 06                	jne    c000ef51 <sendKeyboardToken(KeyboardToken)+0x117>
c000ef4b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000ef51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef54:	66 3d 1a 03          	cmp    ax,0x31a
c000ef58:	0f 85 c9 00 00 00    	jne    c000f027 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000ef5e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000ef64:	e9 be 00 00 00       	jmp    c000f027 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000ef69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef6c:	66 3d 10 03          	cmp    ax,0x310
c000ef70:	75 0a                	jne    c000ef7c <sendKeyboardToken(KeyboardToken)+0x142>
c000ef72:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000ef78:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ef7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef7f:	66 3d 11 03          	cmp    ax,0x311
c000ef83:	75 0a                	jne    c000ef8f <sendKeyboardToken(KeyboardToken)+0x155>
c000ef85:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000ef8b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000ef8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef92:	66 3d 12 03          	cmp    ax,0x312
c000ef96:	75 0a                	jne    c000efa2 <sendKeyboardToken(KeyboardToken)+0x168>
c000ef98:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000ef9e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000efa2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efa5:	66 3d 13 03          	cmp    ax,0x313
c000efa9:	75 0a                	jne    c000efb5 <sendKeyboardToken(KeyboardToken)+0x17b>
c000efab:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000efb1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000efb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efb8:	66 3d 14 03          	cmp    ax,0x314
c000efbc:	75 0a                	jne    c000efc8 <sendKeyboardToken(KeyboardToken)+0x18e>
c000efbe:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000efc4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000efc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efcb:	66 3d 15 03          	cmp    ax,0x315
c000efcf:	75 0a                	jne    c000efdb <sendKeyboardToken(KeyboardToken)+0x1a1>
c000efd1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000efd7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000efdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efde:	66 3d 16 03          	cmp    ax,0x316
c000efe2:	75 0a                	jne    c000efee <sendKeyboardToken(KeyboardToken)+0x1b4>
c000efe4:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000efea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000efee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000eff1:	66 3d 17 03          	cmp    ax,0x317
c000eff5:	75 0a                	jne    c000f001 <sendKeyboardToken(KeyboardToken)+0x1c7>
c000eff7:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000effd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f004:	66 3d 18 03          	cmp    ax,0x318
c000f008:	75 0a                	jne    c000f014 <sendKeyboardToken(KeyboardToken)+0x1da>
c000f00a:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000f010:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f014:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f017:	66 3d 19 03          	cmp    ax,0x319
c000f01b:	75 0a                	jne    c000f027 <sendKeyboardToken(KeyboardToken)+0x1ed>
c000f01d:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000f023:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000f027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f02a:	66 3d 00 02          	cmp    ax,0x200
c000f02e:	75 2c                	jne    c000f05c <sendKeyboardToken(KeyboardToken)+0x222>
c000f030:	a0 20 99 02 c0       	mov    al,ds:0xc0029920
c000f035:	83 f0 01             	xor    eax,0x1
c000f038:	84 c0                	test   al,al
c000f03a:	74 20                	je     c000f05c <sendKeyboardToken(KeyboardToken)+0x222>
c000f03c:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c000f041:	6a 01                	push   0x1
c000f043:	6a 00                	push   0x0
c000f045:	68 a4 ec 00 c0       	push   0xc000eca4
c000f04a:	50                   	push   eax
c000f04b:	e8 00 82 00 00       	call   c0017250 <Process::createThread(void (*)(void*), void*, int)>
c000f050:	83 c4 10             	add    esp,0x10
c000f053:	c6 05 20 99 02 c0 01 	mov    BYTE PTR ds:0xc0029920,0x1
c000f05a:	eb 33                	jmp    c000f08f <sendKeyboardToken(KeyboardToken)+0x255>
c000f05c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f05f:	66 3d 01 02          	cmp    ax,0x201
c000f063:	75 2a                	jne    c000f08f <sendKeyboardToken(KeyboardToken)+0x255>
c000f065:	a0 20 99 02 c0       	mov    al,ds:0xc0029920
c000f06a:	83 f0 01             	xor    eax,0x1
c000f06d:	84 c0                	test   al,al
c000f06f:	74 1e                	je     c000f08f <sendKeyboardToken(KeyboardToken)+0x255>
c000f071:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c000f076:	6a 01                	push   0x1
c000f078:	6a 00                	push   0x0
c000f07a:	68 10 ed 00 c0       	push   0xc000ed10
c000f07f:	50                   	push   eax
c000f080:	e8 cb 81 00 00       	call   c0017250 <Process::createThread(void (*)(void*), void*, int)>
c000f085:	83 c4 10             	add    esp,0x10
c000f088:	c6 05 20 99 02 c0 01 	mov    BYTE PTR ds:0xc0029920,0x1
c000f08f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f092:	66 3d 1d 03          	cmp    ax,0x31d
c000f096:	75 06                	jne    c000f09e <sendKeyboardToken(KeyboardToken)+0x264>
c000f098:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000f09e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0a1:	66 3d 1c 03          	cmp    ax,0x31c
c000f0a5:	75 06                	jne    c000f0ad <sendKeyboardToken(KeyboardToken)+0x273>
c000f0a7:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000f0ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0b0:	66 3d 1b 03          	cmp    ax,0x31b
c000f0b4:	75 06                	jne    c000f0bc <sendKeyboardToken(KeyboardToken)+0x282>
c000f0b6:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000f0bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0bf:	66 3d 1e 03          	cmp    ax,0x31e
c000f0c3:	75 06                	jne    c000f0cb <sendKeyboardToken(KeyboardToken)+0x291>
c000f0c5:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000f0cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0ce:	66 3d 1f 03          	cmp    ax,0x31f
c000f0d2:	75 06                	jne    c000f0da <sendKeyboardToken(KeyboardToken)+0x2a0>
c000f0d4:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000f0da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0dd:	66 3d 1a 03          	cmp    ax,0x31a
c000f0e1:	75 06                	jne    c000f0e9 <sendKeyboardToken(KeyboardToken)+0x2af>
c000f0e3:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000f0e9:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000f0ed:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000f0f0:	83 f0 01             	xor    eax,0x1
c000f0f3:	84 c0                	test   al,al
c000f0f5:	74 77                	je     c000f16e <sendKeyboardToken(KeyboardToken)+0x334>
c000f0f7:	a0 21 96 02 c0       	mov    al,ds:0xc0029621
c000f0fc:	84 c0                	test   al,al
c000f0fe:	74 41                	je     c000f141 <sendKeyboardToken(KeyboardToken)+0x307>
c000f100:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000f104:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000f108:	74 2b                	je     c000f135 <sendKeyboardToken(KeyboardToken)+0x2fb>
c000f10a:	8b 15 24 99 02 c0    	mov    edx,DWORD PTR ds:0xc0029924
c000f110:	89 d0                	mov    eax,edx
c000f112:	c1 e0 02             	shl    eax,0x2
c000f115:	01 d0                	add    eax,edx
c000f117:	01 c0                	add    eax,eax
c000f119:	a3 24 99 02 c0       	mov    ds:0xc0029924,eax
c000f11e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f121:	0f b7 c0             	movzx  eax,ax
c000f124:	8d 50 d0             	lea    edx,[eax-0x30]
c000f127:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c000f12c:	01 d0                	add    eax,edx
c000f12e:	a3 24 99 02 c0       	mov    ds:0xc0029924,eax
c000f133:	eb 6d                	jmp    c000f1a2 <sendKeyboardToken(KeyboardToken)+0x368>
c000f135:	c7 05 24 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029924,0x0
c000f13f:	eb 61                	jmp    c000f1a2 <sendKeyboardToken(KeyboardToken)+0x368>
c000f141:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c000f146:	85 c0                	test   eax,eax
c000f148:	74 18                	je     c000f162 <sendKeyboardToken(KeyboardToken)+0x328>
c000f14a:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c000f14f:	0f b6 c0             	movzx  eax,al
c000f152:	83 ec 0c             	sub    esp,0xc
c000f155:	50                   	push   eax
c000f156:	e8 21 fc ff ff       	call   c000ed7c <sendKeyToTerminal(unsigned char)>
c000f15b:	83 c4 10             	add    esp,0x10
c000f15e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000f162:	c7 05 24 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029924,0x0
c000f16c:	eb 34                	jmp    c000f1a2 <sendKeyboardToken(KeyboardToken)+0x368>
c000f16e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f171:	66 3d 01 01          	cmp    ax,0x101
c000f175:	75 2b                	jne    c000f1a2 <sendKeyboardToken(KeyboardToken)+0x368>
c000f177:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c000f17c:	85 c0                	test   eax,eax
c000f17e:	74 18                	je     c000f198 <sendKeyboardToken(KeyboardToken)+0x35e>
c000f180:	a1 24 99 02 c0       	mov    eax,ds:0xc0029924
c000f185:	0f b6 c0             	movzx  eax,al
c000f188:	83 ec 0c             	sub    esp,0xc
c000f18b:	50                   	push   eax
c000f18c:	e8 eb fb ff ff       	call   c000ed7c <sendKeyToTerminal(unsigned char)>
c000f191:	83 c4 10             	add    esp,0x10
c000f194:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000f198:	c7 05 24 99 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029924,0x0
c000f1a2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000f1a5:	83 f0 01             	xor    eax,0x1
c000f1a8:	84 c0                	test   al,al
c000f1aa:	74 4c                	je     c000f1f8 <sendKeyboardToken(KeyboardToken)+0x3be>
c000f1ac:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000f1af:	83 f0 01             	xor    eax,0x1
c000f1b2:	84 c0                	test   al,al
c000f1b4:	74 42                	je     c000f1f8 <sendKeyboardToken(KeyboardToken)+0x3be>
c000f1b6:	a0 20 96 02 c0       	mov    al,ds:0xc0029620
c000f1bb:	83 f0 01             	xor    eax,0x1
c000f1be:	84 c0                	test   al,al
c000f1c0:	74 36                	je     c000f1f8 <sendKeyboardToken(KeyboardToken)+0x3be>
c000f1c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c5:	66 83 f8 1f          	cmp    ax,0x1f
c000f1c9:	76 09                	jbe    c000f1d4 <sendKeyboardToken(KeyboardToken)+0x39a>
c000f1cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1ce:	66 83 f8 7e          	cmp    ax,0x7e
c000f1d2:	76 12                	jbe    c000f1e6 <sendKeyboardToken(KeyboardToken)+0x3ac>
c000f1d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1d7:	66 83 f8 0a          	cmp    ax,0xa
c000f1db:	74 09                	je     c000f1e6 <sendKeyboardToken(KeyboardToken)+0x3ac>
c000f1dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e0:	66 83 f8 08          	cmp    ax,0x8
c000f1e4:	75 12                	jne    c000f1f8 <sendKeyboardToken(KeyboardToken)+0x3be>
c000f1e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e9:	0f b6 c0             	movzx  eax,al
c000f1ec:	83 ec 0c             	sub    esp,0xc
c000f1ef:	50                   	push   eax
c000f1f0:	e8 87 fb ff ff       	call   c000ed7c <sendKeyToTerminal(unsigned char)>
c000f1f5:	83 c4 10             	add    esp,0x10
c000f1f8:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000f1fb:	83 f0 01             	xor    eax,0x1
c000f1fe:	84 c0                	test   al,al
c000f200:	74 4f                	je     c000f251 <sendKeyboardToken(KeyboardToken)+0x417>
c000f202:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000f205:	83 f0 01             	xor    eax,0x1
c000f208:	84 c0                	test   al,al
c000f20a:	74 45                	je     c000f251 <sendKeyboardToken(KeyboardToken)+0x417>
c000f20c:	a0 20 96 02 c0       	mov    al,ds:0xc0029620
c000f211:	84 c0                	test   al,al
c000f213:	74 3c                	je     c000f251 <sendKeyboardToken(KeyboardToken)+0x417>
c000f215:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f218:	66 83 f8 3f          	cmp    ax,0x3f
c000f21c:	76 33                	jbe    c000f251 <sendKeyboardToken(KeyboardToken)+0x417>
c000f21e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f221:	66 83 f8 7f          	cmp    ax,0x7f
c000f225:	77 2a                	ja     c000f251 <sendKeyboardToken(KeyboardToken)+0x417>
c000f227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f22a:	88 c2                	mov    dl,al
c000f22c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f22f:	66 83 f8 5f          	cmp    ax,0x5f
c000f233:	76 04                	jbe    c000f239 <sendKeyboardToken(KeyboardToken)+0x3ff>
c000f235:	b0 20                	mov    al,0x20
c000f237:	eb 02                	jmp    c000f23b <sendKeyboardToken(KeyboardToken)+0x401>
c000f239:	b0 00                	mov    al,0x0
c000f23b:	29 c2                	sub    edx,eax
c000f23d:	88 d0                	mov    al,dl
c000f23f:	83 e8 40             	sub    eax,0x40
c000f242:	0f b6 c0             	movzx  eax,al
c000f245:	83 ec 0c             	sub    esp,0xc
c000f248:	50                   	push   eax
c000f249:	e8 2e fb ff ff       	call   c000ed7c <sendKeyToTerminal(unsigned char)>
c000f24e:	83 c4 10             	add    esp,0x10
c000f251:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f254:	66 3d 00 03          	cmp    ax,0x300
c000f258:	75 0f                	jne    c000f269 <sendKeyboardToken(KeyboardToken)+0x42f>
c000f25a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000f25d:	83 f0 01             	xor    eax,0x1
c000f260:	84 c0                	test   al,al
c000f262:	74 05                	je     c000f269 <sendKeyboardToken(KeyboardToken)+0x42f>
c000f264:	e8 9e bb ff ff       	call   c000ae07 <doTerminalCycle()>
c000f269:	90                   	nop
c000f26a:	c9                   	leave  
c000f26b:	c3                   	ret    

c000f26c <clearInternalKeybuffer(VgaText*)>:
c000f26c:	55                   	push   ebp
c000f26d:	89 e5                	mov    ebp,esp
c000f26f:	83 ec 08             	sub    esp,0x8
c000f272:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f275:	05 32 01 00 00       	add    eax,0x132
c000f27a:	83 ec 0c             	sub    esp,0xc
c000f27d:	50                   	push   eax
c000f27e:	e8 15 14 ff ff       	call   c0000698 <strlen>
c000f283:	83 c4 10             	add    esp,0x10
c000f286:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000f289:	81 c2 32 01 00 00    	add    edx,0x132
c000f28f:	83 ec 04             	sub    esp,0x4
c000f292:	50                   	push   eax
c000f293:	6a 00                	push   0x0
c000f295:	52                   	push   edx
c000f296:	e8 e1 13 ff ff       	call   c000067c <memset>
c000f29b:	83 c4 10             	add    esp,0x10
c000f29e:	90                   	nop
c000f29f:	c9                   	leave  
c000f2a0:	c3                   	ret    

c000f2a1 <readKeyboard(VgaText*, char*, unsigned long)>:
c000f2a1:	55                   	push   ebp
c000f2a2:	89 e5                	mov    ebp,esp
c000f2a4:	83 ec 18             	sub    esp,0x18
c000f2a7:	a1 08 95 02 c0       	mov    eax,ds:0xc0029508
c000f2ac:	85 c0                	test   eax,eax
c000f2ae:	74 2a                	je     c000f2da <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000f2b0:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000f2b6:	8b 0d 08 95 02 c0    	mov    ecx,DWORD PTR ds:0xc0029508
c000f2bc:	83 ec 04             	sub    esp,0x4
c000f2bf:	68 20 95 02 c0       	push   0xc0029520
c000f2c4:	83 ec 08             	sub    esp,0x8
c000f2c7:	89 e2                	mov    edx,esp
c000f2c9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000f2cc:	89 02                	mov    DWORD PTR [edx],eax
c000f2ce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f2d1:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000f2d5:	ff d1                	call   ecx
c000f2d7:	83 c4 10             	add    esp,0x10
c000f2da:	fb                   	sti    
c000f2db:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000f2e2:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000f2e6:	0f 84 a1 00 00 00    	je     c000f38d <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000f2ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2ef:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c000f2f5:	84 c0                	test   al,al
c000f2f7:	75 28                	jne    c000f321 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000f2f9:	fa                   	cli    
c000f2fa:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000f2ff:	40                   	inc    eax
c000f300:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000f305:	e8 62 81 00 00       	call   c001746c <schedule()>
c000f30a:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000f30f:	48                   	dec    eax
c000f310:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000f315:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000f31a:	85 c0                	test   eax,eax
c000f31c:	75 ce                	jne    c000f2ec <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000f31e:	fb                   	sti    
c000f31f:	eb cb                	jmp    c000f2ec <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000f321:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f324:	8d 50 01             	lea    edx,[eax+0x1]
c000f327:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000f32a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000f32d:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c000f333:	88 10                	mov    BYTE PTR [eax],dl
c000f335:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f338:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c000f33e:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000f341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f344:	05 32 01 00 00       	add    eax,0x132
c000f349:	83 ec 0c             	sub    esp,0xc
c000f34c:	50                   	push   eax
c000f34d:	e8 46 13 ff ff       	call   c0000698 <strlen>
c000f352:	83 c4 10             	add    esp,0x10
c000f355:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000f358:	81 c2 32 01 00 00    	add    edx,0x132
c000f35e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f361:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000f364:	81 c2 32 01 00 00    	add    edx,0x132
c000f36a:	83 ec 04             	sub    esp,0x4
c000f36d:	50                   	push   eax
c000f36e:	51                   	push   ecx
c000f36f:	52                   	push   edx
c000f370:	e8 3f 12 ff ff       	call   c00005b4 <memmove>
c000f375:	83 c4 10             	add    esp,0x10
c000f378:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000f37b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f37e:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000f382:	0f 85 5a ff ff ff    	jne    c000f2e2 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000f388:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f38b:	eb 03                	jmp    c000f390 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000f38d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f390:	c9                   	leave  
c000f391:	c3                   	ret    

c000f392 <Keyboard::Keyboard(char const*)>:
c000f392:	83 ec 0c             	sub    esp,0xc
c000f395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f399:	83 ec 08             	sub    esp,0x8
c000f39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3a0:	50                   	push   eax
c000f3a1:	e8 a0 f2 ff ff       	call   c000e646 <Device::Device(char const*)>
c000f3a6:	83 c4 10             	add    esp,0x10
c000f3a9:	ba 7c 42 02 c0       	mov    edx,0xc002427c
c000f3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3b2:	89 10                	mov    DWORD PTR [eax],edx
c000f3b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3b8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000f3c2:	c6 05 04 95 02 c0 01 	mov    BYTE PTR ds:0xc0029504,0x1
c000f3c9:	90                   	nop
c000f3ca:	83 c4 0c             	add    esp,0xc
c000f3cd:	c3                   	ret    

c000f3ce <Keyboard::~Keyboard()>:
c000f3ce:	83 ec 0c             	sub    esp,0xc
c000f3d1:	ba 7c 42 02 c0       	mov    edx,0xc002427c
c000f3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3da:	89 10                	mov    DWORD PTR [eax],edx
c000f3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3e0:	83 ec 0c             	sub    esp,0xc
c000f3e3:	50                   	push   eax
c000f3e4:	e8 5b ef ff ff       	call   c000e344 <Device::~Device()>
c000f3e9:	83 c4 10             	add    esp,0x10
c000f3ec:	90                   	nop
c000f3ed:	83 c4 0c             	add    esp,0xc
c000f3f0:	c3                   	ret    
c000f3f1:	90                   	nop

c000f3f2 <Keyboard::~Keyboard()>:
c000f3f2:	83 ec 0c             	sub    esp,0xc
c000f3f5:	83 ec 0c             	sub    esp,0xc
c000f3f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3fc:	e8 cd ff ff ff       	call   c000f3ce <Keyboard::~Keyboard()>
c000f401:	83 c4 10             	add    esp,0x10
c000f404:	83 ec 08             	sub    esp,0x8
c000f407:	68 5c 01 00 00       	push   0x15c
c000f40c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f410:	e8 cf da ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000f415:	83 c4 10             	add    esp,0x10
c000f418:	83 c4 0c             	add    esp,0xc
c000f41b:	c3                   	ret    

c000f41c <LogicalDisk::close(int, int, void*)>:
c000f41c:	83 c8 ff             	or     eax,0xffffffff
c000f41f:	c3                   	ret    

c000f420 <LogicalDisk::~LogicalDisk()>:
c000f420:	83 ec 0c             	sub    esp,0xc
c000f423:	ba 4c 43 02 c0       	mov    edx,0xc002434c
c000f428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f42c:	89 10                	mov    DWORD PTR [eax],edx
c000f42e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f432:	83 ec 0c             	sub    esp,0xc
c000f435:	50                   	push   eax
c000f436:	e8 09 ef ff ff       	call   c000e344 <Device::~Device()>
c000f43b:	83 c4 10             	add    esp,0x10
c000f43e:	90                   	nop
c000f43f:	83 c4 0c             	add    esp,0xc
c000f442:	c3                   	ret    
c000f443:	90                   	nop

c000f444 <LogicalDisk::~LogicalDisk()>:
c000f444:	83 ec 0c             	sub    esp,0xc
c000f447:	83 ec 0c             	sub    esp,0xc
c000f44a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f44e:	e8 cd ff ff ff       	call   c000f420 <LogicalDisk::~LogicalDisk()>
c000f453:	83 c4 10             	add    esp,0x10
c000f456:	83 ec 08             	sub    esp,0x8
c000f459:	68 74 01 00 00       	push   0x174
c000f45e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f462:	e8 7d da ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000f467:	83 c4 10             	add    esp,0x10
c000f46a:	83 c4 0c             	add    esp,0xc
c000f46d:	c3                   	ret    

c000f46e <LogicalDisk::open(int, int, void*)>:
c000f46e:	83 ec 18             	sub    esp,0x18
c000f471:	68 a8 42 02 c0       	push   0xc00242a8
c000f476:	e8 8c 49 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c000f47b:	83 c8 ff             	or     eax,0xffffffff
c000f47e:	83 c4 1c             	add    esp,0x1c
c000f481:	c3                   	ret    

c000f482 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000f482:	53                   	push   ebx
c000f483:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f487:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f48b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f48f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000f495:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000f49b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000f4a1:	77 10                	ja     c000f4b3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000f4a3:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000f4a9:	89 d3                	mov    ebx,edx
c000f4ab:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000f4b1:	72 05                	jb     c000f4b8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000f4b3:	83 c8 ff             	or     eax,0xffffffff
c000f4b6:	89 c2                	mov    edx,eax
c000f4b8:	5b                   	pop    ebx
c000f4b9:	c3                   	ret    

c000f4ba <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000f4ba:	56                   	push   esi
c000f4bb:	83 c8 ff             	or     eax,0xffffffff
c000f4be:	53                   	push   ebx
c000f4bf:	89 c2                	mov    edx,eax
c000f4c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f4c5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f4c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f4cd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000f4d3:	77 27                	ja     c000f4fc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000f4d5:	89 d8                	mov    eax,ebx
c000f4d7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000f4dd:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000f4e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4e8:	89 c2                	mov    edx,eax
c000f4ea:	73 10                	jae    c000f4fc <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000f4ec:	89 c8                	mov    eax,ecx
c000f4ee:	89 da                	mov    edx,ebx
c000f4f0:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000f4f6:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000f4fc:	5b                   	pop    ebx
c000f4fd:	5e                   	pop    esi
c000f4fe:	c3                   	ret    
c000f4ff:	90                   	nop

c000f500 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000f500:	83 ec 1c             	sub    esp,0x1c
c000f503:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f507:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f50b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f50f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f513:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f517:	89 04 24             	mov    DWORD PTR [esp],eax
c000f51a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f51e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f526:	83 ec 08             	sub    esp,0x8
c000f529:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f52d:	50                   	push   eax
c000f52e:	e8 13 f1 ff ff       	call   c000e646 <Device::Device(char const*)>
c000f533:	83 c4 10             	add    esp,0x10
c000f536:	ba 4c 43 02 c0       	mov    edx,0xc002434c
c000f53b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f53f:	89 10                	mov    DWORD PTR [eax],edx
c000f541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f545:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000f54c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f550:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000f557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f55b:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000f565:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f569:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f56d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f571:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000f577:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000f57d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f581:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000f584:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f588:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000f58e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000f594:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f598:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f59c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000f5a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f5a6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000f5b0:	90                   	nop
c000f5b1:	83 c4 1c             	add    esp,0x1c
c000f5b4:	c3                   	ret    
c000f5b5:	90                   	nop

c000f5b6 <LogicalDisk::assignDriveLetter()>:
c000f5b6:	55                   	push   ebp
c000f5b7:	57                   	push   edi
c000f5b8:	56                   	push   esi
c000f5b9:	53                   	push   ebx
c000f5ba:	83 ec 14             	sub    esp,0x14
c000f5bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f5c1:	8b 3d 40 99 02 c0    	mov    edi,DWORD PTR ds:0xc0029940
c000f5c7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000f5cd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000f5d1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000f5d7:	8b 3d 44 99 02 c0    	mov    edi,DWORD PTR ds:0xc0029944
c000f5dd:	3c 01                	cmp    al,0x1
c000f5df:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000f5e3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000f5e7:	19 c0                	sbb    eax,eax
c000f5e9:	83 e0 02             	and    eax,0x2
c000f5ec:	83 c0 41             	add    eax,0x41
c000f5ef:	0f be e8             	movsx  ebp,al
c000f5f2:	3c 43                	cmp    al,0x43
c000f5f4:	75 10                	jne    c000f606 <LogicalDisk::assignDriveLetter()+0x50>
c000f5f6:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000f5fd:	75 5d                	jne    c000f65c <LogicalDisk::assignDriveLetter()+0xa6>
c000f5ff:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000f604:	75 56                	jne    c000f65c <LogicalDisk::assignDriveLetter()+0xa6>
c000f606:	8d 75 bf             	lea    esi,[ebp-0x41]
c000f609:	ba 01 00 00 00       	mov    edx,0x1
c000f60e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000f612:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000f616:	d3 e2                	shl    edx,cl
c000f618:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f61c:	89 d7                	mov    edi,edx
c000f61e:	89 d6                	mov    esi,edx
c000f620:	c1 ff 1f             	sar    edi,0x1f
c000f623:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000f627:	21 f9                	and    ecx,edi
c000f629:	09 d1                	or     ecx,edx
c000f62b:	75 2f                	jne    c000f65c <LogicalDisk::assignDriveLetter()+0xa6>
c000f62d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000f631:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f635:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000f63b:	09 f2                	or     edx,esi
c000f63d:	89 15 40 99 02 c0    	mov    DWORD PTR ds:0xc0029940,edx
c000f643:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f647:	09 fa                	or     edx,edi
c000f649:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000f64d:	89 15 44 99 02 c0    	mov    DWORD PTR ds:0xc0029944,edx
c000f653:	89 1c bd 60 99 02 c0 	mov    DWORD PTR [edi*4-0x3ffd66a0],ebx
c000f65a:	eb 08                	jmp    c000f664 <LogicalDisk::assignDriveLetter()+0xae>
c000f65c:	45                   	inc    ebp
c000f65d:	40                   	inc    eax
c000f65e:	3c 5b                	cmp    al,0x5b
c000f660:	75 90                	jne    c000f5f2 <LogicalDisk::assignDriveLetter()+0x3c>
c000f662:	31 c0                	xor    eax,eax
c000f664:	83 c4 14             	add    esp,0x14
c000f667:	5b                   	pop    ebx
c000f668:	5e                   	pop    esi
c000f669:	5f                   	pop    edi
c000f66a:	5d                   	pop    ebp
c000f66b:	c3                   	ret    

c000f66c <LogicalDisk::mount()>:
c000f66c:	56                   	push   esi
c000f66d:	53                   	push   ebx
c000f66e:	83 ec 1c             	sub    esp,0x1c
c000f671:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000f675:	8b 1d d8 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274d8
c000f67b:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000f682:	50                   	push   eax
c000f683:	68 cc 42 02 c0       	push   0xc00242cc
c000f688:	e8 38 d9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f68d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000f697:	83 c4 10             	add    esp,0x10
c000f69a:	85 db                	test   ebx,ebx
c000f69c:	74 4e                	je     c000f6ec <LogicalDisk::mount()+0x80>
c000f69e:	83 ec 0c             	sub    esp,0xc
c000f6a1:	68 ed 42 02 c0       	push   0xc00242ed
c000f6a6:	e8 1a d9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f6ab:	83 c4 0c             	add    esp,0xc
c000f6ae:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000f6b5:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f6b7:	83 e8 41             	sub    eax,0x41
c000f6ba:	50                   	push   eax
c000f6bb:	56                   	push   esi
c000f6bc:	53                   	push   ebx
c000f6bd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f6c0:	83 c4 10             	add    esp,0x10
c000f6c3:	84 c0                	test   al,al
c000f6c5:	74 20                	je     c000f6e7 <LogicalDisk::mount()+0x7b>
c000f6c7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f6cb:	83 ec 0c             	sub    esp,0xc
c000f6ce:	68 09 43 02 c0       	push   0xc0024309
c000f6d3:	e8 ed d8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c000f6d8:	83 c4 10             	add    esp,0x10
c000f6db:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000f6e1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f6e5:	eb 07                	jmp    c000f6ee <LogicalDisk::mount()+0x82>
c000f6e7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000f6ea:	eb ae                	jmp    c000f69a <LogicalDisk::mount()+0x2e>
c000f6ec:	31 c0                	xor    eax,eax
c000f6ee:	83 c4 14             	add    esp,0x14
c000f6f1:	5b                   	pop    ebx
c000f6f2:	5e                   	pop    esi
c000f6f3:	c3                   	ret    

c000f6f4 <LogicalDisk::unmount()>:
c000f6f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f6f8:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000f702:	c3                   	ret    
c000f703:	90                   	nop

c000f704 <LogicalDisk::eject()>:
c000f704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f708:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000f70e:	8b 10                	mov    edx,DWORD PTR [eax]
c000f710:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f714:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000f717:	90                   	nop

c000f718 <LogicalDisk::unassignDriveLetter()>:
c000f718:	57                   	push   edi
c000f719:	56                   	push   esi
c000f71a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f71e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000f725:	84 c9                	test   cl,cl
c000f727:	75 0f                	jne    c000f738 <LogicalDisk::unassignDriveLetter()+0x20>
c000f729:	c7 44 24 0c 22 43 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024322
c000f731:	5e                   	pop    esi
c000f732:	5f                   	pop    edi
c000f733:	e9 cf 46 00 00       	jmp    c0013e07 <Krnl::panic(char const*)>
c000f738:	83 e9 41             	sub    ecx,0x41
c000f73b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000f742:	b8 01 00 00 00       	mov    eax,0x1
c000f747:	c7 04 8d 60 99 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd66a0],0x0
c000f752:	d3 e0                	shl    eax,cl
c000f754:	89 c7                	mov    edi,eax
c000f756:	f7 d0                	not    eax
c000f758:	c1 ff 1f             	sar    edi,0x1f
c000f75b:	21 05 40 99 02 c0    	and    DWORD PTR ds:0xc0029940,eax
c000f761:	89 fe                	mov    esi,edi
c000f763:	f7 d6                	not    esi
c000f765:	21 35 44 99 02 c0    	and    DWORD PTR ds:0xc0029944,esi
c000f76b:	5e                   	pop    esi
c000f76c:	5f                   	pop    edi
c000f76d:	c3                   	ret    

c000f76e <LogicalDisk::read(unsigned long long, int, void*)>:
c000f76e:	57                   	push   edi
c000f76f:	56                   	push   esi
c000f770:	53                   	push   ebx
c000f771:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f775:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f779:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f77d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f781:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000f787:	77 41                	ja     c000f7ca <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000f789:	99                   	cdq    
c000f78a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000f790:	01 c8                	add    eax,ecx
c000f792:	11 da                	adc    edx,ebx
c000f794:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000f79a:	19 d7                	sbb    edi,edx
c000f79c:	72 33                	jb     c000f7d1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000f79e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000f7a4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000f7aa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000f7ae:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000f7b2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000f7b8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000f7be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f7c2:	5b                   	pop    ebx
c000f7c3:	5e                   	pop    esi
c000f7c4:	5f                   	pop    edi
c000f7c5:	e9 34 0a 00 00       	jmp    c00101fe <VCache::read(unsigned long long, int, void*)>
c000f7ca:	b8 05 00 00 00       	mov    eax,0x5
c000f7cf:	eb 05                	jmp    c000f7d6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000f7d1:	b8 07 00 00 00       	mov    eax,0x7
c000f7d6:	5b                   	pop    ebx
c000f7d7:	5e                   	pop    esi
c000f7d8:	5f                   	pop    edi
c000f7d9:	c3                   	ret    

c000f7da <LogicalDisk::write(unsigned long long, int, void*)>:
c000f7da:	57                   	push   edi
c000f7db:	56                   	push   esi
c000f7dc:	53                   	push   ebx
c000f7dd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f7e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f7e5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f7e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f7ed:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000f7f3:	77 41                	ja     c000f836 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000f7f5:	99                   	cdq    
c000f7f6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000f7fc:	01 c8                	add    eax,ecx
c000f7fe:	11 da                	adc    edx,ebx
c000f800:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000f806:	19 d7                	sbb    edi,edx
c000f808:	72 33                	jb     c000f83d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000f80a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000f810:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000f816:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000f81a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000f81e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000f824:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000f82a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f82e:	5b                   	pop    ebx
c000f82f:	5e                   	pop    esi
c000f830:	5f                   	pop    edi
c000f831:	e9 ce 08 00 00       	jmp    c0010104 <VCache::write(unsigned long long, int, void*)>
c000f836:	b8 05 00 00 00       	mov    eax,0x5
c000f83b:	eb 05                	jmp    c000f842 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000f83d:	b8 07 00 00 00       	mov    eax,0x7
c000f842:	5b                   	pop    ebx
c000f843:	5e                   	pop    esi
c000f844:	5f                   	pop    edi
c000f845:	c3                   	ret    
c000f846:	66 90                	xchg   ax,ax

c000f848 <Mouse::Mouse(char const*)>:
c000f848:	83 ec 0c             	sub    esp,0xc
c000f84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f84f:	83 ec 08             	sub    esp,0x8
c000f852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f856:	50                   	push   eax
c000f857:	e8 ea ed ff ff       	call   c000e646 <Device::Device(char const*)>
c000f85c:	83 c4 10             	add    esp,0x10
c000f85f:	ba 78 43 02 c0       	mov    edx,0xc0024378
c000f864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f868:	89 10                	mov    DWORD PTR [eax],edx
c000f86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f86e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000f878:	90                   	nop
c000f879:	83 c4 0c             	add    esp,0xc
c000f87c:	c3                   	ret    
c000f87d:	90                   	nop
c000f87e:	66 90                	xchg   ax,ax

c000f880 <Mouse::~Mouse()>:
c000f880:	83 ec 0c             	sub    esp,0xc
c000f883:	ba 78 43 02 c0       	mov    edx,0xc0024378
c000f888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f88c:	89 10                	mov    DWORD PTR [eax],edx
c000f88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f892:	83 ec 0c             	sub    esp,0xc
c000f895:	50                   	push   eax
c000f896:	e8 a9 ea ff ff       	call   c000e344 <Device::~Device()>
c000f89b:	83 c4 10             	add    esp,0x10
c000f89e:	90                   	nop
c000f89f:	83 c4 0c             	add    esp,0xc
c000f8a2:	c3                   	ret    
c000f8a3:	90                   	nop

c000f8a4 <Mouse::~Mouse()>:
c000f8a4:	83 ec 0c             	sub    esp,0xc
c000f8a7:	83 ec 0c             	sub    esp,0xc
c000f8aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8ae:	e8 cd ff ff ff       	call   c000f880 <Mouse::~Mouse()>
c000f8b3:	83 c4 10             	add    esp,0x10
c000f8b6:	83 ec 08             	sub    esp,0x8
c000f8b9:	68 58 01 00 00       	push   0x158
c000f8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8c2:	e8 1d d6 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000f8c7:	83 c4 10             	add    esp,0x10
c000f8ca:	83 c4 0c             	add    esp,0xc
c000f8cd:	c3                   	ret    

c000f8ce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000f8ce:	55                   	push   ebp
c000f8cf:	57                   	push   edi
c000f8d0:	56                   	push   esi
c000f8d1:	53                   	push   ebx
c000f8d2:	81 ec 28 01 00 00    	sub    esp,0x128
c000f8d8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000f8df:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000f8e6:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000f8ed:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000f8f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f8f8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000f8fc:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000f903:	e8 3a ee ff ff       	call   c000e742 <Device::getName()>
c000f908:	5a                   	pop    edx
c000f909:	59                   	pop    ecx
c000f90a:	50                   	push   eax
c000f90b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000f90f:	55                   	push   ebp
c000f910:	e8 23 0e ff ff       	call   c0000738 <strcpy>
c000f915:	5b                   	pop    ebx
c000f916:	58                   	pop    eax
c000f917:	68 9c 43 02 c0       	push   0xc002439c
c000f91c:	55                   	push   ebp
c000f91d:	e8 56 0f ff ff       	call   c0000878 <strcat>
c000f922:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000f929:	e8 89 a3 ff ff       	call   c0009cb7 <malloc>
c000f92e:	83 c4 0c             	add    esp,0xc
c000f931:	89 c3                	mov    ebx,eax
c000f933:	57                   	push   edi
c000f934:	56                   	push   esi
c000f935:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f939:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f93d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000f944:	55                   	push   ebp
c000f945:	50                   	push   eax
c000f946:	e8 b5 fb ff ff       	call   c000f500 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000f94b:	83 c4 14             	add    esp,0x14
c000f94e:	53                   	push   ebx
c000f94f:	e8 62 fc ff ff       	call   c000f5b6 <LogicalDisk::assignDriveLetter()>
c000f954:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f957:	e8 10 fd ff ff       	call   c000f66c <LogicalDisk::mount()>
c000f95c:	58                   	pop    eax
c000f95d:	5a                   	pop    edx
c000f95e:	53                   	push   ebx
c000f95f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000f966:	e8 d7 ea ff ff       	call   c000e442 <Device::addChild(Device*)>
c000f96b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000f971:	5b                   	pop    ebx
c000f972:	5e                   	pop    esi
c000f973:	5f                   	pop    edi
c000f974:	5d                   	pop    ebp
c000f975:	c3                   	ret    

c000f976 <createPartitionsForDisk(PhysicalDisk*)>:
c000f976:	55                   	push   ebp
c000f977:	57                   	push   edi
c000f978:	56                   	push   esi
c000f979:	53                   	push   ebx
c000f97a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000f980:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000f987:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f98d:	3d 00 02 00 00       	cmp    eax,0x200
c000f992:	74 27                	je     c000f9bb <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000f994:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000f99a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000f9a0:	83 ec 10             	sub    esp,0x10
c000f9a3:	0f a4 f7 0a          	shld   edi,esi,0xa
c000f9a7:	99                   	cdq    
c000f9a8:	c1 e6 0a             	shl    esi,0xa
c000f9ab:	52                   	push   edx
c000f9ac:	89 fd                	mov    ebp,edi
c000f9ae:	50                   	push   eax
c000f9af:	55                   	push   ebp
c000f9b0:	56                   	push   esi
c000f9b1:	e8 1a 24 01 00       	call   c0021dd0 <__udivdi3>
c000f9b6:	e9 b1 00 00 00       	jmp    c000fa6c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000f9bb:	83 ec 0c             	sub    esp,0xc
c000f9be:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f9c0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000f9c4:	56                   	push   esi
c000f9c5:	6a 01                	push   0x1
c000f9c7:	6a 00                	push   0x0
c000f9c9:	6a 00                	push   0x0
c000f9cb:	53                   	push   ebx
c000f9cc:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f9cf:	83 c4 20             	add    esp,0x20
c000f9d2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000f9da:	75 0a                	jne    c000f9e6 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000f9dc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000f9e4:	74 2c                	je     c000fa12 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000f9e6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000f9ec:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000f9f2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000f9f8:	83 ec 10             	sub    esp,0x10
c000f9fb:	0f a4 c2 0a          	shld   edx,eax,0xa
c000f9ff:	89 f7                	mov    edi,esi
c000fa01:	c1 e0 0a             	shl    eax,0xa
c000fa04:	c1 ff 1f             	sar    edi,0x1f
c000fa07:	57                   	push   edi
c000fa08:	56                   	push   esi
c000fa09:	52                   	push   edx
c000fa0a:	50                   	push   eax
c000fa0b:	e8 c0 23 01 00       	call   c0021dd0 <__udivdi3>
c000fa10:	eb 5a                	jmp    c000fa6c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000fa12:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000fa19:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000fa20:	83 e1 7f             	and    ecx,0x7f
c000fa23:	83 e0 7f             	and    eax,0x7f
c000fa26:	01 c1                	add    ecx,eax
c000fa28:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000fa2f:	83 e0 7f             	and    eax,0x7f
c000fa32:	01 c1                	add    ecx,eax
c000fa34:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000fa3b:	83 e0 7f             	and    eax,0x7f
c000fa3e:	00 c1                	add    cl,al
c000fa40:	74 41                	je     c000fa83 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000fa42:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000fa48:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000fa4e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000fa54:	83 ec 10             	sub    esp,0x10
c000fa57:	0f a4 c2 0a          	shld   edx,eax,0xa
c000fa5b:	89 f7                	mov    edi,esi
c000fa5d:	c1 e0 0a             	shl    eax,0xa
c000fa60:	c1 ff 1f             	sar    edi,0x1f
c000fa63:	57                   	push   edi
c000fa64:	56                   	push   esi
c000fa65:	52                   	push   edx
c000fa66:	50                   	push   eax
c000fa67:	e8 64 23 01 00       	call   c0021dd0 <__udivdi3>
c000fa6c:	83 c4 14             	add    esp,0x14
c000fa6f:	52                   	push   edx
c000fa70:	50                   	push   eax
c000fa71:	6a 00                	push   0x0
c000fa73:	6a 00                	push   0x0
c000fa75:	53                   	push   ebx
c000fa76:	e8 53 fe ff ff       	call   c000f8ce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000fa7b:	83 c4 20             	add    esp,0x20
c000fa7e:	e9 79 01 00 00       	jmp    c000fbfc <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000fa83:	89 f0                	mov    eax,esi
c000fa85:	31 f6                	xor    esi,esi
c000fa87:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000fa8e:	75 02                	jne    c000fa92 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000fa90:	89 f1                	mov    ecx,esi
c000fa92:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000fa99:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000faa0:	c1 e2 08             	shl    edx,0x8
c000faa3:	c1 e7 10             	shl    edi,0x10
c000faa6:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000faae:	09 fa                	or     edx,edi
c000fab0:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000fab8:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000fabf:	83 c0 10             	add    eax,0x10
c000fac2:	09 fa                	or     edx,edi
c000fac4:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000facb:	c1 e7 18             	shl    edi,0x18
c000face:	09 fa                	or     edx,edi
c000fad0:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000fad7:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000fadb:	c1 e7 10             	shl    edi,0x10
c000fade:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000fae5:	c1 e2 08             	shl    edx,0x8
c000fae8:	09 fa                	or     edx,edi
c000faea:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000faf1:	09 fa                	or     edx,edi
c000faf3:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000fafa:	c1 e7 18             	shl    edi,0x18
c000fafd:	09 fa                	or     edx,edi
c000faff:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000fb03:	46                   	inc    esi
c000fb04:	83 fe 04             	cmp    esi,0x4
c000fb07:	0f 85 7a ff ff ff    	jne    c000fa87 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000fb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb11:	83 f0 01             	xor    eax,0x1
c000fb14:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fb18:	75 57                	jne    c000fb71 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000fb1a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb1e:	83 f0 01             	xor    eax,0x1
c000fb21:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000fb25:	75 4a                	jne    c000fb71 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000fb27:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000fb2b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000fb33:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb3b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000fb41:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000fb47:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000fb4d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000fb51:	89 f7                	mov    edi,esi
c000fb53:	c1 e0 0a             	shl    eax,0xa
c000fb56:	c1 ff 1f             	sar    edi,0x1f
c000fb59:	57                   	push   edi
c000fb5a:	56                   	push   esi
c000fb5b:	52                   	push   edx
c000fb5c:	50                   	push   eax
c000fb5d:	e8 6e 22 01 00       	call   c0021dd0 <__udivdi3>
c000fb62:	83 c4 10             	add    esp,0x10
c000fb65:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000fb69:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000fb6d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000fb71:	84 c9                	test   cl,cl
c000fb73:	74 53                	je     c000fbc8 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000fb75:	0f b6 c9             	movzx  ecx,cl
c000fb78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb7c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fb80:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000fb84:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fb88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fb8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fb90:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000fb94:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000fb98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fb9c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000fba0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fba4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fba8:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000fbac:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000fbb0:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000fbb4:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000fbb8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000fbbc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000fbc0:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000fbc4:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000fbc8:	31 ed                	xor    ebp,ebp
c000fbca:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000fbce:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000fbd2:	89 f8                	mov    eax,edi
c000fbd4:	09 f0                	or     eax,esi
c000fbd6:	74 1e                	je     c000fbf6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000fbd8:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000fbdc:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000fbe0:	89 d1                	mov    ecx,edx
c000fbe2:	09 c1                	or     ecx,eax
c000fbe4:	74 10                	je     c000fbf6 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000fbe6:	83 ec 0c             	sub    esp,0xc
c000fbe9:	57                   	push   edi
c000fbea:	56                   	push   esi
c000fbeb:	52                   	push   edx
c000fbec:	50                   	push   eax
c000fbed:	53                   	push   ebx
c000fbee:	e8 db fc ff ff       	call   c000f8ce <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000fbf3:	83 c4 20             	add    esp,0x20
c000fbf6:	45                   	inc    ebp
c000fbf7:	83 fd 04             	cmp    ebp,0x4
c000fbfa:	75 ce                	jne    c000fbca <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000fbfc:	81 c4 5c 02 00 00    	add    esp,0x25c
c000fc02:	5b                   	pop    ebx
c000fc03:	5e                   	pop    esi
c000fc04:	5f                   	pop    edi
c000fc05:	5d                   	pop    ebp
c000fc06:	c3                   	ret    
c000fc07:	90                   	nop

c000fc08 <Serial::Serial(char const*)>:
c000fc08:	83 ec 0c             	sub    esp,0xc
c000fc0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc0f:	83 ec 08             	sub    esp,0x8
c000fc12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc16:	50                   	push   eax
c000fc17:	e8 2a ea ff ff       	call   c000e646 <Device::Device(char const*)>
c000fc1c:	83 c4 10             	add    esp,0x10
c000fc1f:	ba b0 43 02 c0       	mov    edx,0xc00243b0
c000fc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc28:	89 10                	mov    DWORD PTR [eax],edx
c000fc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc2e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000fc38:	90                   	nop
c000fc39:	83 c4 0c             	add    esp,0xc
c000fc3c:	c3                   	ret    
c000fc3d:	90                   	nop
c000fc3e:	66 90                	xchg   ax,ax

c000fc40 <Serial::~Serial()>:
c000fc40:	83 ec 0c             	sub    esp,0xc
c000fc43:	ba b0 43 02 c0       	mov    edx,0xc00243b0
c000fc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc4c:	89 10                	mov    DWORD PTR [eax],edx
c000fc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc52:	83 ec 0c             	sub    esp,0xc
c000fc55:	50                   	push   eax
c000fc56:	e8 e9 e6 ff ff       	call   c000e344 <Device::~Device()>
c000fc5b:	83 c4 10             	add    esp,0x10
c000fc5e:	90                   	nop
c000fc5f:	83 c4 0c             	add    esp,0xc
c000fc62:	c3                   	ret    
c000fc63:	90                   	nop

c000fc64 <Serial::~Serial()>:
c000fc64:	83 ec 0c             	sub    esp,0xc
c000fc67:	83 ec 0c             	sub    esp,0xc
c000fc6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc6e:	e8 cd ff ff ff       	call   c000fc40 <Serial::~Serial()>
c000fc73:	83 c4 10             	add    esp,0x10
c000fc76:	83 ec 08             	sub    esp,0x8
c000fc79:	68 58 01 00 00       	push   0x158
c000fc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc82:	e8 5d d2 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000fc87:	83 c4 10             	add    esp,0x10
c000fc8a:	83 c4 0c             	add    esp,0xc
c000fc8d:	c3                   	ret    
c000fc8e:	66 90                	xchg   ax,ax

c000fc90 <Timer::Timer(char const*)>:
c000fc90:	83 ec 0c             	sub    esp,0xc
c000fc93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc97:	83 ec 08             	sub    esp,0x8
c000fc9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc9e:	50                   	push   eax
c000fc9f:	e8 a2 e9 ff ff       	call   c000e646 <Device::Device(char const*)>
c000fca4:	83 c4 10             	add    esp,0x10
c000fca7:	ba f4 43 02 c0       	mov    edx,0xc00243f4
c000fcac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcb0:	89 10                	mov    DWORD PTR [eax],edx
c000fcb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcb6:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000fcc0:	90                   	nop
c000fcc1:	83 c4 0c             	add    esp,0xc
c000fcc4:	c3                   	ret    
c000fcc5:	90                   	nop
c000fcc6:	66 90                	xchg   ax,ax

c000fcc8 <Timer::~Timer()>:
c000fcc8:	83 ec 0c             	sub    esp,0xc
c000fccb:	ba f4 43 02 c0       	mov    edx,0xc00243f4
c000fcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcd4:	89 10                	mov    DWORD PTR [eax],edx
c000fcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcda:	83 ec 0c             	sub    esp,0xc
c000fcdd:	50                   	push   eax
c000fcde:	e8 61 e6 ff ff       	call   c000e344 <Device::~Device()>
c000fce3:	83 c4 10             	add    esp,0x10
c000fce6:	90                   	nop
c000fce7:	83 c4 0c             	add    esp,0xc
c000fcea:	c3                   	ret    
c000fceb:	90                   	nop

c000fcec <Timer::~Timer()>:
c000fcec:	83 ec 0c             	sub    esp,0xc
c000fcef:	83 ec 0c             	sub    esp,0xc
c000fcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcf6:	e8 cd ff ff ff       	call   c000fcc8 <Timer::~Timer()>
c000fcfb:	83 c4 10             	add    esp,0x10
c000fcfe:	83 ec 08             	sub    esp,0x8
c000fd01:	68 5c 01 00 00       	push   0x15c
c000fd06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd0a:	e8 d5 d1 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c000fd0f:	83 c4 10             	add    esp,0x10
c000fd12:	83 c4 0c             	add    esp,0xc
c000fd15:	c3                   	ret    

c000fd16 <Timer::read()>:
c000fd16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd1a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000fd20:	c3                   	ret    

c000fd21 <setupTimer(int)>:
c000fd21:	53                   	push   ebx
c000fd22:	83 ec 14             	sub    esp,0x14
c000fd25:	68 5c 01 00 00       	push   0x15c
c000fd2a:	e8 88 9f ff ff       	call   c0009cb7 <malloc>
c000fd2f:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd32:	89 c3                	mov    ebx,eax
c000fd34:	e8 eb 1b 01 00       	call   c0021924 <PIT::PIT()>
c000fd39:	58                   	pop    eax
c000fd3a:	5a                   	pop    edx
c000fd3b:	53                   	push   ebx
c000fd3c:	ff 35 a8 73 02 c0    	push   DWORD PTR ds:0xc00273a8
c000fd42:	e8 fb e6 ff ff       	call   c000e442 <Device::addChild(Device*)>
c000fd47:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fd49:	6a 00                	push   0x0
c000fd4b:	6a 00                	push   0x0
c000fd4d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fd51:	53                   	push   ebx
c000fd52:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fd55:	89 d8                	mov    eax,ebx
c000fd57:	83 c4 28             	add    esp,0x28
c000fd5a:	5b                   	pop    ebx
c000fd5b:	c3                   	ret    

c000fd5c <timerHandler(unsigned int)>:
c000fd5c:	56                   	push   esi
c000fd5d:	53                   	push   ebx
c000fd5e:	51                   	push   ecx
c000fd5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd63:	01 05 cc 99 02 c0    	add    DWORD PTR ds:0xc00299cc,eax
c000fd69:	80 3d ad 73 02 c0 00 	cmp    BYTE PTR ds:0xc00273ad,0x0
c000fd70:	0f 84 4a 01 00 00    	je     c000fec0 <timerHandler(unsigned int)+0x164>
c000fd76:	fa                   	cli    
c000fd77:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c000fd7d:	83 ec 0c             	sub    esp,0xc
c000fd80:	ff 05 c4 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c4
c000fd86:	68 d8 a8 02 c0       	push   0xc002a8d8
c000fd8b:	e8 10 26 01 00       	call   c00223a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000fd90:	83 c4 10             	add    esp,0x10
c000fd93:	84 c0                	test   al,al
c000fd95:	0f 85 a1 00 00 00    	jne    c000fe3c <timerHandler(unsigned int)+0xe0>
c000fd9b:	83 ec 0c             	sub    esp,0xc
c000fd9e:	68 d8 a8 02 c0       	push   0xc002a8d8
c000fda3:	e8 14 26 01 00       	call   c00223bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000fda8:	83 c4 10             	add    esp,0x10
c000fdab:	89 c6                	mov    esi,eax
c000fdad:	8d 76 00             	lea    esi,[esi+0x0]
c000fdb0:	83 ec 0c             	sub    esp,0xc
c000fdb3:	68 d8 a8 02 c0       	push   0xc002a8d8
c000fdb8:	e8 ff 25 01 00       	call   c00223bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000fdbd:	c7 04 24 d8 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8d8
c000fdc4:	89 c3                	mov    ebx,eax
c000fdc6:	e8 f9 25 01 00       	call   c00223c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000fdcb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000fdce:	83 c4 10             	add    esp,0x10
c000fdd1:	3b 05 cc 99 02 c0    	cmp    eax,DWORD PTR ds:0xc00299cc
c000fdd7:	77 23                	ja     c000fdfc <timerHandler(unsigned int)+0xa0>
c000fdd9:	83 ec 0c             	sub    esp,0xc
c000fddc:	53                   	push   ebx
c000fddd:	e8 46 7b 00 00       	call   c0017928 <unblockTask(ThreadControlBlock*)>
c000fde2:	83 c4 10             	add    esp,0x10
c000fde5:	39 de                	cmp    esi,ebx
c000fde7:	75 27                	jne    c000fe10 <timerHandler(unsigned int)+0xb4>
c000fde9:	83 ec 0c             	sub    esp,0xc
c000fdec:	68 d8 a8 02 c0       	push   0xc002a8d8
c000fdf1:	e8 c6 25 01 00       	call   c00223bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000fdf6:	89 c6                	mov    esi,eax
c000fdf8:	eb 12                	jmp    c000fe0c <timerHandler(unsigned int)+0xb0>
c000fdfa:	66 90                	xchg   ax,ax
c000fdfc:	52                   	push   edx
c000fdfd:	52                   	push   edx
c000fdfe:	53                   	push   ebx
c000fdff:	68 d8 a8 02 c0       	push   0xc002a8d8
c000fe04:	e8 73 26 01 00       	call   c002247c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000fe09:	8d 76 00             	lea    esi,[esi+0x0]
c000fe0c:	83 c4 10             	add    esp,0x10
c000fe0f:	90                   	nop
c000fe10:	83 ec 0c             	sub    esp,0xc
c000fe13:	68 d8 a8 02 c0       	push   0xc002a8d8
c000fe18:	e8 83 25 01 00       	call   c00223a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000fe1d:	83 c4 10             	add    esp,0x10
c000fe20:	84 c0                	test   al,al
c000fe22:	75 18                	jne    c000fe3c <timerHandler(unsigned int)+0xe0>
c000fe24:	83 ec 0c             	sub    esp,0xc
c000fe27:	68 d8 a8 02 c0       	push   0xc002a8d8
c000fe2c:	e8 8b 25 01 00       	call   c00223bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000fe31:	83 c4 10             	add    esp,0x10
c000fe34:	39 f0                	cmp    eax,esi
c000fe36:	0f 85 74 ff ff ff    	jne    c000fdb0 <timerHandler(unsigned int)+0x54>
c000fe3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fe41:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000fe45:	74 41                	je     c000fe88 <timerHandler(unsigned int)+0x12c>
c000fe47:	80 3d ac 73 02 c0 00 	cmp    BYTE PTR ds:0xc00273ac,0x0
c000fe4e:	74 38                	je     c000fe88 <timerHandler(unsigned int)+0x12c>
c000fe50:	fa                   	cli    
c000fe51:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c000fe57:	a1 cc 99 02 c0       	mov    eax,ds:0xc00299cc
c000fe5c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000fe62:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000fe65:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000fe6b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000fe6e:	72 08                	jb     c000fe78 <timerHandler(unsigned int)+0x11c>
c000fe70:	e8 f7 75 00 00       	call   c001746c <schedule()>
c000fe75:	8d 76 00             	lea    esi,[esi+0x0]
c000fe78:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000fe7d:	48                   	dec    eax
c000fe7e:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000fe83:	75 03                	jne    c000fe88 <timerHandler(unsigned int)+0x12c>
c000fe85:	fb                   	sti    
c000fe86:	66 90                	xchg   ax,ax
c000fe88:	a1 c4 a8 02 c0       	mov    eax,ds:0xc002a8c4
c000fe8d:	48                   	dec    eax
c000fe8e:	a3 c4 a8 02 c0       	mov    ds:0xc002a8c4,eax
c000fe93:	75 1b                	jne    c000feb0 <timerHandler(unsigned int)+0x154>
c000fe95:	83 3d c0 a8 02 c0 00 	cmp    DWORD PTR ds:0xc002a8c0,0x0
c000fe9c:	74 12                	je     c000feb0 <timerHandler(unsigned int)+0x154>
c000fe9e:	c7 05 c0 a8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a8c0,0x0
c000fea8:	e8 bf 75 00 00       	call   c001746c <schedule()>
c000fead:	8d 76 00             	lea    esi,[esi+0x0]
c000feb0:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c000feb5:	48                   	dec    eax
c000feb6:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c000febb:	75 03                	jne    c000fec0 <timerHandler(unsigned int)+0x164>
c000febd:	fb                   	sti    
c000febe:	66 90                	xchg   ax,ax
c000fec0:	58                   	pop    eax
c000fec1:	5b                   	pop    ebx
c000fec2:	5e                   	pop    esi
c000fec3:	c3                   	ret    

c000fec4 <VCache::VCache(PhysicalDisk*)>:
c000fec4:	53                   	push   ebx
c000fec5:	83 ec 18             	sub    esp,0x18
c000fec8:	ba 24 44 02 c0       	mov    edx,0xc0024424
c000fecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fed1:	89 10                	mov    DWORD PTR [eax],edx
c000fed3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fed7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000fede:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fee2:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000fee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000feed:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000fef4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000fefb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000feff:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000ff06:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000ff0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff11:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000ff18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff1c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000ff20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff24:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000ff2b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000ff32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff36:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000ff3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff3e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000ff42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff46:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000ff4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff4e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000ff55:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000ff5d:	83 ec 0c             	sub    esp,0xc
c000ff60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff64:	e8 4e 9d ff ff       	call   c0009cb7 <malloc>
c000ff69:	83 c4 10             	add    esp,0x10
c000ff6c:	89 c3                	mov    ebx,eax
c000ff6e:	83 ec 0c             	sub    esp,0xc
c000ff71:	53                   	push   ebx
c000ff72:	e8 c5 72 00 00       	call   c001723c <Mutex::Mutex()>
c000ff77:	83 c4 10             	add    esp,0x10
c000ff7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff7e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000ff81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff85:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ff89:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ff8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff90:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000ff97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff9b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000ffa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffa5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffa8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffac:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000ffb2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ffb8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ffbc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000ffbf:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000ffc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffc6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000ffca:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ffd4:	05 00 01 00 00       	add    eax,0x100
c000ffd9:	c1 e0 04             	shl    eax,0x4
c000ffdc:	83 ec 0c             	sub    esp,0xc
c000ffdf:	50                   	push   eax
c000ffe0:	e8 d2 9c ff ff       	call   c0009cb7 <malloc>
c000ffe5:	83 c4 10             	add    esp,0x10
c000ffe8:	89 c2                	mov    edx,eax
c000ffea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000fff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fff5:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000fffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010000:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010004:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010008:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001000e:	c1 e0 06             	shl    eax,0x6
c0010011:	83 ec 0c             	sub    esp,0xc
c0010014:	50                   	push   eax
c0010015:	e8 9d 9c ff ff       	call   c0009cb7 <malloc>
c001001a:	83 c4 10             	add    esp,0x10
c001001d:	89 c2                	mov    edx,eax
c001001f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010023:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010026:	90                   	nop
c0010027:	83 c4 18             	add    esp,0x18
c001002a:	5b                   	pop    ebx
c001002b:	c3                   	ret    

c001002c <VCache::invalidateReadBuffer()>:
c001002c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010030:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010036:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001003a:	c3                   	ret    
c001003b:	90                   	nop

c001003c <VCache::writeWriteBuffer()>:
c001003c:	53                   	push   ebx
c001003d:	83 ec 08             	sub    esp,0x8
c0010040:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010044:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010048:	74 1e                	je     c0010068 <VCache::writeWriteBuffer()+0x2c>
c001004a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001004d:	83 ec 0c             	sub    esp,0xc
c0010050:	8b 10                	mov    edx,DWORD PTR [eax]
c0010052:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010055:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010058:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001005b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001005e:	50                   	push   eax
c001005f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010062:	83 c4 20             	add    esp,0x20
c0010065:	8d 76 00             	lea    esi,[esi+0x0]
c0010068:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001006f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010076:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001007a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010081:	83 c4 08             	add    esp,0x8
c0010084:	5b                   	pop    ebx
c0010085:	c3                   	ret    
c0010086:	66 90                	xchg   ax,ax

c0010088 <VCache::~VCache()>:
c0010088:	83 ec 0c             	sub    esp,0xc
c001008b:	ba 24 44 02 c0       	mov    edx,0xc0024424
c0010090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010094:	89 10                	mov    DWORD PTR [eax],edx
c0010096:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001009a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001009d:	84 c0                	test   al,al
c001009f:	74 0f                	je     c00100b0 <VCache::~VCache()+0x28>
c00100a1:	83 ec 0c             	sub    esp,0xc
c00100a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100a8:	e8 8f ff ff ff       	call   c001003c <VCache::writeWriteBuffer()>
c00100ad:	83 c4 10             	add    esp,0x10
c00100b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00100b7:	83 ec 0c             	sub    esp,0xc
c00100ba:	50                   	push   eax
c00100bb:	e8 07 9c ff ff       	call   c0009cc7 <free>
c00100c0:	83 c4 10             	add    esp,0x10
c00100c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00100ca:	83 ec 0c             	sub    esp,0xc
c00100cd:	50                   	push   eax
c00100ce:	e8 f4 9b ff ff       	call   c0009cc7 <free>
c00100d3:	83 c4 10             	add    esp,0x10
c00100d6:	90                   	nop
c00100d7:	83 c4 0c             	add    esp,0xc
c00100da:	c3                   	ret    
c00100db:	90                   	nop

c00100dc <VCache::~VCache()>:
c00100dc:	83 ec 0c             	sub    esp,0xc
c00100df:	83 ec 0c             	sub    esp,0xc
c00100e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100e6:	e8 9d ff ff ff       	call   c0010088 <VCache::~VCache()>
c00100eb:	83 c4 10             	add    esp,0x10
c00100ee:	83 ec 08             	sub    esp,0x8
c00100f1:	6a 44                	push   0x44
c00100f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100f7:	e8 e8 cd ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00100fc:	83 c4 10             	add    esp,0x10
c00100ff:	83 c4 0c             	add    esp,0xc
c0010102:	c3                   	ret    
c0010103:	90                   	nop

c0010104 <VCache::write(unsigned long long, int, void*)>:
c0010104:	55                   	push   ebp
c0010105:	31 c0                	xor    eax,eax
c0010107:	57                   	push   edi
c0010108:	56                   	push   esi
c0010109:	53                   	push   ebx
c001010a:	83 ec 0c             	sub    esp,0xc
c001010d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010111:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010115:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010119:	8d 76 00             	lea    esi,[esi+0x0]
c001011c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010120:	7d 1a                	jge    c001013c <VCache::write(unsigned long long, int, void*)+0x38>
c0010122:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010125:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c001012b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001012f:	0f af c8             	imul   ecx,eax
c0010132:	01 ca                	add    edx,ecx
c0010134:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010136:	40                   	inc    eax
c0010137:	eb e3                	jmp    c001011c <VCache::write(unsigned long long, int, void*)+0x18>
c0010139:	8d 76 00             	lea    esi,[esi+0x0]
c001013c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010140:	74 0a                	je     c001014c <VCache::write(unsigned long long, int, void*)+0x48>
c0010142:	53                   	push   ebx
c0010143:	e8 e4 fe ff ff       	call   c001002c <VCache::invalidateReadBuffer()>
c0010148:	58                   	pop    eax
c0010149:	8d 76 00             	lea    esi,[esi+0x0]
c001014c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010150:	74 5e                	je     c00101b0 <VCache::write(unsigned long long, int, void*)+0xac>
c0010152:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0010155:	89 e8                	mov    eax,ebp
c0010157:	99                   	cdq    
c0010158:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001015b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001015e:	89 c1                	mov    ecx,eax
c0010160:	89 d0                	mov    eax,edx
c0010162:	31 f1                	xor    ecx,esi
c0010164:	31 f8                	xor    eax,edi
c0010166:	09 c1                	or     ecx,eax
c0010168:	75 3a                	jne    c00101a4 <VCache::write(unsigned long long, int, void*)+0xa0>
c001016a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001016f:	75 33                	jne    c00101a4 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010171:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010174:	89 ef                	mov    edi,ebp
c0010176:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001017c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010180:	0f af f9             	imul   edi,ecx
c0010183:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010186:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010188:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001018b:	40                   	inc    eax
c001018c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001018f:	83 f8 40             	cmp    eax,0x40
c0010192:	75 60                	jne    c00101f4 <VCache::write(unsigned long long, int, void*)+0xf0>
c0010194:	83 ec 0c             	sub    esp,0xc
c0010197:	53                   	push   ebx
c0010198:	e8 9f fe ff ff       	call   c001003c <VCache::writeWriteBuffer()>
c001019d:	83 c4 10             	add    esp,0x10
c00101a0:	eb 52                	jmp    c00101f4 <VCache::write(unsigned long long, int, void*)+0xf0>
c00101a2:	66 90                	xchg   ax,ax
c00101a4:	83 ec 0c             	sub    esp,0xc
c00101a7:	53                   	push   ebx
c00101a8:	e8 8f fe ff ff       	call   c001003c <VCache::writeWriteBuffer()>
c00101ad:	83 c4 10             	add    esp,0x10
c00101b0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00101b3:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c00101b8:	7f 22                	jg     c00101dc <VCache::write(unsigned long long, int, void*)+0xd8>
c00101ba:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00101bd:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00101c0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101c4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00101c8:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00101cb:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00101ce:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00101d4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00101d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00101da:	eb 18                	jmp    c00101f4 <VCache::write(unsigned long long, int, void*)+0xf0>
c00101dc:	83 ec 0c             	sub    esp,0xc
c00101df:	8b 10                	mov    edx,DWORD PTR [eax]
c00101e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00101e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00101e9:	57                   	push   edi
c00101ea:	56                   	push   esi
c00101eb:	50                   	push   eax
c00101ec:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00101ef:	83 c4 20             	add    esp,0x20
c00101f2:	66 90                	xchg   ax,ax
c00101f4:	83 c4 0c             	add    esp,0xc
c00101f7:	31 c0                	xor    eax,eax
c00101f9:	5b                   	pop    ebx
c00101fa:	5e                   	pop    esi
c00101fb:	5f                   	pop    edi
c00101fc:	5d                   	pop    ebp
c00101fd:	c3                   	ret    

c00101fe <VCache::read(unsigned long long, int, void*)>:
c00101fe:	55                   	push   ebp
c00101ff:	31 c0                	xor    eax,eax
c0010201:	57                   	push   edi
c0010202:	56                   	push   esi
c0010203:	53                   	push   ebx
c0010204:	83 ec 1c             	sub    esp,0x1c
c0010207:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001020b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001020f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010213:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010217:	90                   	nop
c0010218:	39 e8                	cmp    eax,ebp
c001021a:	7d 18                	jge    c0010234 <VCache::read(unsigned long long, int, void*)+0x36>
c001021c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c001021f:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010225:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010229:	0f af c8             	imul   ecx,eax
c001022c:	01 ca                	add    edx,ecx
c001022e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010230:	40                   	inc    eax
c0010231:	eb e5                	jmp    c0010218 <VCache::read(unsigned long long, int, void*)+0x1a>
c0010233:	90                   	nop
c0010234:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010238:	74 0e                	je     c0010248 <VCache::read(unsigned long long, int, void*)+0x4a>
c001023a:	83 ec 0c             	sub    esp,0xc
c001023d:	53                   	push   ebx
c001023e:	e8 f9 fd ff ff       	call   c001003c <VCache::writeWriteBuffer()>
c0010243:	83 c4 10             	add    esp,0x10
c0010246:	66 90                	xchg   ax,ax
c0010248:	83 fd 01             	cmp    ebp,0x1
c001024b:	0f 85 87 00 00 00    	jne    c00102d8 <VCache::read(unsigned long long, int, void*)+0xda>
c0010251:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010254:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010258:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001025f:	75 77                	jne    c00102d8 <VCache::read(unsigned long long, int, void*)+0xda>
c0010261:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0010264:	89 e9                	mov    ecx,ebp
c0010266:	f7 d9                	neg    ecx
c0010268:	89 c8                	mov    eax,ecx
c001026a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001026e:	c1 f8 1f             	sar    eax,0x1f
c0010271:	21 f1                	and    ecx,esi
c0010273:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010277:	89 c8                	mov    eax,ecx
c0010279:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001027d:	21 f9                	and    ecx,edi
c001027f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010283:	89 ca                	mov    edx,ecx
c0010285:	74 0d                	je     c0010294 <VCache::read(unsigned long long, int, void*)+0x96>
c0010287:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001028a:	75 08                	jne    c0010294 <VCache::read(unsigned long long, int, void*)+0x96>
c001028c:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001028f:	74 27                	je     c00102b8 <VCache::read(unsigned long long, int, void*)+0xba>
c0010291:	8d 76 00             	lea    esi,[esi+0x0]
c0010294:	83 ec 0c             	sub    esp,0xc
c0010297:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001029b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001029f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00102a2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00102a5:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00102a7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00102aa:	55                   	push   ebp
c00102ab:	52                   	push   edx
c00102ac:	50                   	push   eax
c00102ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00102b1:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00102b4:	83 c4 20             	add    esp,0x20
c00102b7:	90                   	nop
c00102b8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00102bb:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00102bf:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00102c5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00102c8:	48                   	dec    eax
c00102c9:	21 c6                	and    esi,eax
c00102cb:	0f af f1             	imul   esi,ecx
c00102ce:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00102d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102d3:	eb 23                	jmp    c00102f8 <VCache::read(unsigned long long, int, void*)+0xfa>
c00102d5:	8d 76 00             	lea    esi,[esi+0x0]
c00102d8:	83 ec 0c             	sub    esp,0xc
c00102db:	53                   	push   ebx
c00102dc:	e8 4b fd ff ff       	call   c001002c <VCache::invalidateReadBuffer()>
c00102e1:	5a                   	pop    edx
c00102e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00102e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00102e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00102eb:	55                   	push   ebp
c00102ec:	57                   	push   edi
c00102ed:	56                   	push   esi
c00102ee:	50                   	push   eax
c00102ef:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00102f2:	83 c4 20             	add    esp,0x20
c00102f5:	8d 76 00             	lea    esi,[esi+0x0]
c00102f8:	83 c4 1c             	add    esp,0x1c
c00102fb:	31 c0                	xor    eax,eax
c00102fd:	5b                   	pop    ebx
c00102fe:	5e                   	pop    esi
c00102ff:	5f                   	pop    edi
c0010300:	5d                   	pop    ebp
c0010301:	c3                   	ret    

c0010302 <Video::putrect(int, int, int, int, unsigned int)>:
c0010302:	55                   	push   ebp
c0010303:	57                   	push   edi
c0010304:	56                   	push   esi
c0010305:	53                   	push   ebx
c0010306:	83 ec 1c             	sub    esp,0x1c
c0010309:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001030d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010311:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010315:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010319:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001031d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010321:	01 df                	add    edi,ebx
c0010323:	39 fb                	cmp    ebx,edi
c0010325:	7d 1f                	jge    c0010346 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0010327:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001032b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001032f:	7d 12                	jge    c0010343 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010331:	8b 16                	mov    edx,DWORD PTR [esi]
c0010333:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010337:	53                   	push   ebx
c0010338:	55                   	push   ebp
c0010339:	45                   	inc    ebp
c001033a:	56                   	push   esi
c001033b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001033e:	83 c4 10             	add    esp,0x10
c0010341:	eb e8                	jmp    c001032b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010343:	43                   	inc    ebx
c0010344:	eb dd                	jmp    c0010323 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0010346:	83 c4 1c             	add    esp,0x1c
c0010349:	5b                   	pop    ebx
c001034a:	5e                   	pop    esi
c001034b:	5f                   	pop    edi
c001034c:	5d                   	pop    ebp
c001034d:	c3                   	ret    

c001034e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001034e:	55                   	push   ebp
c001034f:	57                   	push   edi
c0010350:	31 ff                	xor    edi,edi
c0010352:	56                   	push   esi
c0010353:	53                   	push   ebx
c0010354:	83 ec 1c             	sub    esp,0x1c
c0010357:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001035b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001035f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0010366:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001036b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001036f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010373:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010377:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001037a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001037e:	01 f9                	add    ecx,edi
c0010380:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010384:	7d 2f                	jge    c00103b5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0010386:	31 f6                	xor    esi,esi
c0010388:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001038c:	01 f2                	add    edx,esi
c001038e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010392:	7d 1a                	jge    c00103ae <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010394:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010397:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001039a:	46                   	inc    esi
c001039b:	51                   	push   ecx
c001039c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00103a0:	52                   	push   edx
c00103a1:	55                   	push   ebp
c00103a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00103a5:	83 c4 10             	add    esp,0x10
c00103a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103ac:	eb da                	jmp    c0010388 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00103ae:	47                   	inc    edi
c00103af:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00103b3:	eb c5                	jmp    c001037a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00103b5:	83 c4 1c             	add    esp,0x1c
c00103b8:	5b                   	pop    ebx
c00103b9:	5e                   	pop    esi
c00103ba:	5f                   	pop    edi
c00103bb:	5d                   	pop    ebp
c00103bc:	c3                   	ret    
c00103bd:	90                   	nop

c00103be <Video::blit(unsigned int*, int, int, int, int)>:
c00103be:	55                   	push   ebp
c00103bf:	57                   	push   edi
c00103c0:	56                   	push   esi
c00103c1:	53                   	push   ebx
c00103c2:	83 ec 1c             	sub    esp,0x1c
c00103c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00103cd:	85 c0                	test   eax,eax
c00103cf:	79 02                	jns    c00103d3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00103d1:	31 c0                	xor    eax,eax
c00103d3:	c1 e0 02             	shl    eax,0x2
c00103d6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00103da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103de:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00103e2:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00103e6:	39 d8                	cmp    eax,ebx
c00103e8:	7e 49                	jle    c0010433 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00103ea:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00103f0:	7c 41                	jl     c0010433 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00103f2:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00103f6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00103fa:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00103fe:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0010402:	39 f9                	cmp    ecx,edi
c0010404:	7e 22                	jle    c0010428 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0010406:	83 c5 04             	add    ebp,0x4
c0010409:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001040f:	7c 14                	jl     c0010425 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0010411:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0010413:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0010416:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001041a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001041e:	56                   	push   esi
c001041f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0010422:	83 c4 10             	add    esp,0x10
c0010425:	47                   	inc    edi
c0010426:	eb d2                	jmp    c00103fa <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0010428:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001042c:	43                   	inc    ebx
c001042d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010431:	eb ab                	jmp    c00103de <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0010433:	83 c4 1c             	add    esp,0x1c
c0010436:	5b                   	pop    ebx
c0010437:	5e                   	pop    esi
c0010438:	5f                   	pop    edi
c0010439:	5d                   	pop    ebp
c001043a:	c3                   	ret    
c001043b:	90                   	nop

c001043c <Video::clearScreen(unsigned int)>:
c001043c:	57                   	push   edi
c001043d:	56                   	push   esi
c001043e:	53                   	push   ebx
c001043f:	31 db                	xor    ebx,ebx
c0010441:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010445:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001044b:	7e 1f                	jle    c001046c <Video::clearScreen(unsigned int)+0x30>
c001044d:	31 ff                	xor    edi,edi
c001044f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010455:	7e 12                	jle    c0010469 <Video::clearScreen(unsigned int)+0x2d>
c0010457:	8b 06                	mov    eax,DWORD PTR [esi]
c0010459:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001045d:	53                   	push   ebx
c001045e:	57                   	push   edi
c001045f:	47                   	inc    edi
c0010460:	56                   	push   esi
c0010461:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010464:	83 c4 10             	add    esp,0x10
c0010467:	eb e6                	jmp    c001044f <Video::clearScreen(unsigned int)+0x13>
c0010469:	43                   	inc    ebx
c001046a:	eb d9                	jmp    c0010445 <Video::clearScreen(unsigned int)+0x9>
c001046c:	5b                   	pop    ebx
c001046d:	5e                   	pop    esi
c001046e:	5f                   	pop    edi
c001046f:	c3                   	ret    

c0010470 <Video::putpixel(int, int, unsigned int)>:
c0010470:	c7 44 24 04 2c 44 02 c0 	mov    DWORD PTR [esp+0x4],0xc002442c
c0010478:	e9 8a 39 00 00       	jmp    c0013e07 <Krnl::panic(char const*)>
c001047d:	90                   	nop

c001047e <Video::Video(char const*)>:
c001047e:	83 ec 0c             	sub    esp,0xc
c0010481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010485:	83 ec 08             	sub    esp,0x8
c0010488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001048c:	50                   	push   eax
c001048d:	e8 b4 e1 ff ff       	call   c000e646 <Device::Device(char const*)>
c0010492:	83 c4 10             	add    esp,0x10
c0010495:	ba 9c 44 02 c0       	mov    edx,0xc002449c
c001049a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049e:	89 10                	mov    DWORD PTR [eax],edx
c00104a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104a4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00104ae:	90                   	nop
c00104af:	83 c4 0c             	add    esp,0xc
c00104b2:	c3                   	ret    
c00104b3:	90                   	nop

c00104b4 <Video::~Video()>:
c00104b4:	83 ec 0c             	sub    esp,0xc
c00104b7:	ba 9c 44 02 c0       	mov    edx,0xc002449c
c00104bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c0:	89 10                	mov    DWORD PTR [eax],edx
c00104c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c6:	83 ec 0c             	sub    esp,0xc
c00104c9:	50                   	push   eax
c00104ca:	e8 75 de ff ff       	call   c000e344 <Device::~Device()>
c00104cf:	83 c4 10             	add    esp,0x10
c00104d2:	90                   	nop
c00104d3:	83 c4 0c             	add    esp,0xc
c00104d6:	c3                   	ret    
c00104d7:	90                   	nop

c00104d8 <Video::~Video()>:
c00104d8:	83 ec 0c             	sub    esp,0xc
c00104db:	83 ec 0c             	sub    esp,0xc
c00104de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104e2:	e8 cd ff ff ff       	call   c00104b4 <Video::~Video()>
c00104e7:	83 c4 10             	add    esp,0x10
c00104ea:	83 ec 08             	sub    esp,0x8
c00104ed:	68 64 01 00 00       	push   0x164
c00104f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104f6:	e8 e9 c9 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00104fb:	83 c4 10             	add    esp,0x10
c00104fe:	83 c4 0c             	add    esp,0xc
c0010501:	c3                   	ret    

c0010502 <Video::isMonochrome()>:
c0010502:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010506:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001050c:	c3                   	ret    
c001050d:	90                   	nop

c001050e <Video::getWidth()>:
c001050e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010512:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010518:	c3                   	ret    
c0010519:	90                   	nop

c001051a <Video::getHeight()>:
c001051a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001051e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010524:	c3                   	ret    
c0010525:	90                   	nop

c0010526 <Video::drawCursor(int, int, unsigned char*, int)>:
c0010526:	55                   	push   ebp
c0010527:	57                   	push   edi
c0010528:	56                   	push   esi
c0010529:	53                   	push   ebx
c001052a:	83 ec 2c             	sub    esp,0x2c
c001052d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010531:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010535:	83 f8 01             	cmp    eax,0x1
c0010538:	19 c9                	sbb    ecx,ecx
c001053a:	31 db                	xor    ebx,ebx
c001053c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0010540:	89 cd                	mov    ebp,ecx
c0010542:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001054a:	f7 d5                	not    ebp
c001054c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0010552:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0010556:	01 d8                	add    eax,ebx
c0010558:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001055c:	56                   	push   esi
c001055d:	e8 b8 ff ff ff       	call   c001051a <Video::getHeight()>
c0010562:	59                   	pop    ecx
c0010563:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0010567:	7e 70                	jle    c00105d9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0010569:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001056d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0010571:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0010574:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010578:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001057c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0010583:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010587:	89 f8                	mov    eax,edi
c0010589:	83 c0 20             	add    eax,0x20
c001058c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010590:	56                   	push   esi
c0010591:	e8 78 ff ff ff       	call   c001050e <Video::getWidth()>
c0010596:	5a                   	pop    edx
c0010597:	39 c7                	cmp    edi,eax
c0010599:	7d 34                	jge    c00105cf <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001059b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00105a0:	74 05                	je     c00105a7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00105a2:	8b 06                	mov    eax,DWORD PTR [esi]
c00105a4:	55                   	push   ebp
c00105a5:	eb 0d                	jmp    c00105b4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00105a7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00105ac:	74 12                	je     c00105c0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00105ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00105b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00105b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00105b8:	57                   	push   edi
c00105b9:	56                   	push   esi
c00105ba:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00105bd:	83 c4 10             	add    esp,0x10
c00105c0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00105c4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00105c8:	47                   	inc    edi
c00105c9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00105cd:	75 c1                	jne    c0010590 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00105cf:	43                   	inc    ebx
c00105d0:	83 fb 20             	cmp    ebx,0x20
c00105d3:	0f 85 79 ff ff ff    	jne    c0010552 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00105d9:	83 c4 2c             	add    esp,0x2c
c00105dc:	5b                   	pop    ebx
c00105dd:	5e                   	pop    esi
c00105de:	5f                   	pop    edi
c00105df:	5d                   	pop    ebp
c00105e0:	c3                   	ret    
c00105e1:	90                   	nop

c00105e2 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00105e2:	55                   	push   ebp
c00105e3:	57                   	push   edi
c00105e4:	56                   	push   esi
c00105e5:	53                   	push   ebx
c00105e6:	83 ec 28             	sub    esp,0x28
c00105e9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00105ed:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00105f1:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c00105f5:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00105f9:	c1 e6 08             	shl    esi,0x8
c00105fc:	01 c6                	add    esi,eax
c00105fe:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0010602:	c1 e0 08             	shl    eax,0x8
c0010605:	01 d0                	add    eax,edx
c0010607:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001060b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001060f:	0f af c6             	imul   eax,esi
c0010612:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0010619:	50                   	push   eax
c001061a:	e8 98 96 ff ff       	call   c0009cb7 <malloc>
c001061f:	83 c4 10             	add    esp,0x10
c0010622:	89 c7                	mov    edi,eax
c0010624:	85 c0                	test   eax,eax
c0010626:	75 10                	jne    c0010638 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0010628:	83 ec 0c             	sub    esp,0xc
c001062b:	68 4d 44 02 c0       	push   0xc002444d
c0010630:	e8 d2 37 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c0010635:	83 c4 10             	add    esp,0x10
c0010638:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c001063b:	ba 12 00 00 00       	mov    edx,0x12
c0010640:	84 c0                	test   al,al
c0010642:	74 11                	je     c0010655 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0010644:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0010648:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001064c:	c1 fa 03             	sar    edx,0x3
c001064f:	0f af d1             	imul   edx,ecx
c0010652:	83 c2 12             	add    edx,0x12
c0010655:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0010659:	74 04                	je     c001065f <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c001065b:	85 f6                	test   esi,esi
c001065d:	75 12                	jne    c0010671 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c001065f:	83 ec 0c             	sub    esp,0xc
c0010662:	68 5d 44 02 c0       	push   0xc002445d
c0010667:	e8 59 c9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001066c:	e9 b8 00 00 00       	jmp    c0010729 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0010671:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0010675:	80 f9 02             	cmp    cl,0x2
c0010678:	0f 85 96 00 00 00    	jne    c0010714 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001067e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0010683:	75 0e                	jne    c0010693 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0010685:	84 c0                	test   al,al
c0010687:	75 0a                	jne    c0010693 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0010689:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001068c:	83 e8 18             	sub    eax,0x18
c001068f:	a8 f7                	test   al,0xf7
c0010691:	74 0a                	je     c001069d <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0010693:	83 ec 0c             	sub    esp,0xc
c0010696:	68 72 44 02 c0       	push   0xc0024472
c001069b:	eb 7f                	jmp    c001071c <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c001069d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00106a5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00106ad:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00106b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00106b9:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00106bd:	75 0c                	jne    c00106cb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00106bf:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c00106c4:	c1 e0 18             	shl    eax,0x18
c00106c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00106cb:	45                   	inc    ebp
c00106cc:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c00106d1:	c1 e1 10             	shl    ecx,0x10
c00106d4:	89 c8                	mov    eax,ecx
c00106d6:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c00106db:	c1 e1 08             	shl    ecx,0x8
c00106de:	09 c1                	or     ecx,eax
c00106e0:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c00106e4:	09 c1                	or     ecx,eax
c00106e6:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c00106ea:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c00106ee:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00106f2:	c1 f8 03             	sar    eax,0x3
c00106f5:	01 c2                	add    edx,eax
c00106f7:	89 e8                	mov    eax,ebp
c00106f9:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00106fd:	39 c6                	cmp    esi,eax
c00106ff:	7f b0                	jg     c00106b1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0010701:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010705:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010709:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c001070c:	7e 22                	jle    c0010730 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001070e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0010712:	eb 99                	jmp    c00106ad <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0010714:	50                   	push   eax
c0010715:	50                   	push   eax
c0010716:	51                   	push   ecx
c0010717:	68 80 44 02 c0       	push   0xc0024480
c001071c:	e8 a4 c8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0010721:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010724:	e8 9e 95 ff ff       	call   c0009cc7 <free>
c0010729:	83 c4 10             	add    esp,0x10
c001072c:	31 ff                	xor    edi,edi
c001072e:	eb 0f                	jmp    c001073f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c0010730:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010734:	89 30                	mov    DWORD PTR [eax],esi
c0010736:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001073a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001073d:	89 30                	mov    DWORD PTR [eax],esi
c001073f:	83 c4 1c             	add    esp,0x1c
c0010742:	89 f8                	mov    eax,edi
c0010744:	5b                   	pop    ebx
c0010745:	5e                   	pop    esi
c0010746:	5f                   	pop    edi
c0010747:	5d                   	pop    ebp
c0010748:	c3                   	ret    
c0010749:	90                   	nop

c001074a <Video::putTGA(int, int, unsigned char*, int)>:
c001074a:	55                   	push   ebp
c001074b:	57                   	push   edi
c001074c:	56                   	push   esi
c001074d:	53                   	push   ebx
c001074e:	83 ec 28             	sub    esp,0x28
c0010751:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010755:	8d 44 24 18          	lea    eax,[esp+0x18]
c0010759:	50                   	push   eax
c001075a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001075e:	50                   	push   eax
c001075f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0010763:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0010767:	56                   	push   esi
c0010768:	e8 75 fe ff ff       	call   c00105e2 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001076d:	83 c4 20             	add    esp,0x20
c0010770:	85 c0                	test   eax,eax
c0010772:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010776:	74 35                	je     c00107ad <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0010778:	89 c7                	mov    edi,eax
c001077a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001077e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010782:	39 d8                	cmp    eax,ebx
c0010784:	7e 27                	jle    c00107ad <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0010786:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001078a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001078e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010792:	39 e8                	cmp    eax,ebp
c0010794:	7e 14                	jle    c00107aa <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0010796:	8b 06                	mov    eax,DWORD PTR [esi]
c0010798:	83 c7 04             	add    edi,0x4
c001079b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001079e:	53                   	push   ebx
c001079f:	55                   	push   ebp
c00107a0:	45                   	inc    ebp
c00107a1:	56                   	push   esi
c00107a2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00107a5:	83 c4 10             	add    esp,0x10
c00107a8:	eb e0                	jmp    c001078a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00107aa:	43                   	inc    ebx
c00107ab:	eb cd                	jmp    c001077a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00107ad:	83 c4 1c             	add    esp,0x1c
c00107b0:	5b                   	pop    ebx
c00107b1:	5e                   	pop    esi
c00107b2:	5f                   	pop    edi
c00107b3:	5d                   	pop    ebp
c00107b4:	c3                   	ret    
c00107b5:	66 90                	xchg   ax,ax
c00107b7:	90                   	nop

c00107b8 <ACPI::close(int, int, void*)>:
c00107b8:	83 ec 1c             	sub    esp,0x1c
c00107bb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00107c3:	74 0b                	je     c00107d0 <ACPI::close(int, int, void*)+0x18>
c00107c5:	b8 00 00 00 00       	mov    eax,0x0
c00107ca:	e9 99 00 00 00       	jmp    c0010868 <ACPI::close(int, int, void*)+0xb0>
c00107cf:	90                   	nop
c00107d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00107d5:	75 29                	jne    c0010800 <ACPI::close(int, int, void*)+0x48>
c00107d7:	a1 e8 99 02 c0       	mov    eax,ds:0xc00299e8
c00107dc:	85 c0                	test   eax,eax
c00107de:	74 08                	je     c00107e8 <ACPI::close(int, int, void*)+0x30>
c00107e0:	a1 e8 99 02 c0       	mov    eax,ds:0xc00299e8
c00107e5:	ff d0                	call   eax
c00107e7:	90                   	nop
c00107e8:	83 ec 0c             	sub    esp,0xc
c00107eb:	68 dc 44 02 c0       	push   0xc00244dc
c00107f0:	e8 12 36 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c00107f5:	83 c4 10             	add    esp,0x10
c00107f8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107fd:	eb 69                	jmp    c0010868 <ACPI::close(int, int, void*)+0xb0>
c00107ff:	90                   	nop
c0010800:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0010805:	75 59                	jne    c0010860 <ACPI::close(int, int, void*)+0xa8>
c0010807:	a1 e4 99 02 c0       	mov    eax,ds:0xc00299e4
c001080c:	85 c0                	test   eax,eax
c001080e:	74 08                	je     c0010818 <ACPI::close(int, int, void*)+0x60>
c0010810:	a1 e4 99 02 c0       	mov    eax,ds:0xc00299e4
c0010815:	ff d0                	call   eax
c0010817:	90                   	nop
c0010818:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001081d:	8d 76 00             	lea    esi,[esi+0x0]
c0010820:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0010825:	83 e0 02             	and    eax,0x2
c0010828:	74 1e                	je     c0010848 <ACPI::close(int, int, void*)+0x90>
c001082a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0010831:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010835:	89 c2                	mov    edx,eax
c0010837:	ec                   	in     al,dx
c0010838:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001083c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010840:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0010844:	eb da                	jmp    c0010820 <ACPI::close(int, int, void*)+0x68>
c0010846:	66 90                	xchg   ax,ax
c0010848:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001084f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0010854:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0010858:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001085c:	ee                   	out    dx,al
c001085d:	8d 76 00             	lea    esi,[esi+0x0]
c0010860:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010865:	8d 76 00             	lea    esi,[esi+0x0]
c0010868:	83 c4 1c             	add    esp,0x1c
c001086b:	c3                   	ret    

c001086c <findRSDP()>:
c001086c:	83 ec 1c             	sub    esp,0x1c
c001086f:	83 ec 0c             	sub    esp,0xc
c0010872:	68 ff 45 02 c0       	push   0xc00245ff
c0010877:	e8 95 94 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001087c:	83 c4 10             	add    esp,0x10
c001087f:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0010884:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001088a:	83 e0 04             	and    eax,0x4
c001088d:	84 c0                	test   al,al
c001088f:	75 0b                	jne    c001089c <findRSDP()+0x30>
c0010891:	b8 00 00 00 00       	mov    eax,0x0
c0010896:	e9 a1 00 00 00       	jmp    c001093c <findRSDP()+0xd0>
c001089b:	90                   	nop
c001089c:	a1 d8 73 02 c0       	mov    eax,ds:0xc00273d8
c00108a1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00108a6:	7f 1c                	jg     c00108c4 <findRSDP()+0x58>
c00108a8:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c00108ad:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00108b3:	83 e2 fb             	and    edx,0xfffffffb
c00108b6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00108bc:	b8 00 00 00 00       	mov    eax,0x0
c00108c1:	eb 79                	jmp    c001093c <findRSDP()+0xd0>
c00108c3:	90                   	nop
c00108c4:	83 ec 0c             	sub    esp,0xc
c00108c7:	68 0f 46 02 c0       	push   0xc002460f
c00108cc:	e8 40 94 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00108d1:	83 c4 10             	add    esp,0x10
c00108d4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00108dc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00108e4:	77 3e                	ja     c0010924 <findRSDP()+0xb8>
c00108e6:	83 ec 04             	sub    esp,0x4
c00108e9:	6a 08                	push   0x8
c00108eb:	68 28 46 02 c0       	push   0xc0024628
c00108f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108f4:	e8 7f fc fe ff       	call   c0000578 <memcmp>
c00108f9:	83 c4 10             	add    esp,0x10
c00108fc:	85 c0                	test   eax,eax
c00108fe:	0f 94 c0             	sete   al
c0010901:	84 c0                	test   al,al
c0010903:	74 17                	je     c001091c <findRSDP()+0xb0>
c0010905:	83 ec 0c             	sub    esp,0xc
c0010908:	68 31 46 02 c0       	push   0xc0024631
c001090d:	e8 ff 93 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010912:	83 c4 10             	add    esp,0x10
c0010915:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010919:	eb 21                	jmp    c001093c <findRSDP()+0xd0>
c001091b:	90                   	nop
c001091c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0010921:	eb b9                	jmp    c00108dc <findRSDP()+0x70>
c0010923:	90                   	nop
c0010924:	83 ec 0c             	sub    esp,0xc
c0010927:	68 3f 46 02 c0       	push   0xc002463f
c001092c:	e8 e0 93 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010931:	83 c4 10             	add    esp,0x10
c0010934:	b8 00 00 00 00       	mov    eax,0x0
c0010939:	8d 76 00             	lea    esi,[esi+0x0]
c001093c:	83 c4 1c             	add    esp,0x1c
c001093f:	c3                   	ret    

c0010940 <loadACPITables(unsigned char*)>:
c0010940:	57                   	push   edi
c0010941:	56                   	push   esi
c0010942:	53                   	push   ebx
c0010943:	83 ec 60             	sub    esp,0x60
c0010946:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c001094b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010951:	83 e0 04             	and    eax,0x4
c0010954:	84 c0                	test   al,al
c0010956:	0f 84 3c 02 00 00    	je     c0010b98 <loadACPITables(unsigned char*)+0x258>
c001095c:	a0 00 9c 02 c0       	mov    al,ds:0xc0029c00
c0010961:	84 c0                	test   al,al
c0010963:	74 77                	je     c00109dc <loadACPITables(unsigned char*)+0x9c>
c0010965:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010969:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001096d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010971:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010974:	83 e8 24             	sub    eax,0x24
c0010977:	c1 e8 03             	shr    eax,0x3
c001097a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001097e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0010986:	66 90                	xchg   ax,ax
c0010988:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001098c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0010990:	0f 8d b6 00 00 00    	jge    c0010a4c <loadACPITables(unsigned char*)+0x10c>
c0010996:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001099a:	83 c0 24             	add    eax,0x24
c001099d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00109a1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00109a5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00109a9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00109ad:	c1 e0 03             	shl    eax,0x3
c00109b0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00109b4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00109b8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00109bd:	89 c1                	mov    ecx,eax
c00109bf:	a1 ec 99 02 c0       	mov    eax,ds:0xc00299ec
c00109c4:	8d 50 01             	lea    edx,[eax+0x1]
c00109c7:	89 15 ec 99 02 c0    	mov    DWORD PTR ds:0xc00299ec,edx
c00109cd:	89 ca                	mov    edx,ecx
c00109cf:	89 14 c5 04 9a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd65fc],edx
c00109d6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00109da:	eb ac                	jmp    c0010988 <loadACPITables(unsigned char*)+0x48>
c00109dc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00109e0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00109e4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00109e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00109eb:	83 e8 24             	sub    eax,0x24
c00109ee:	c1 e8 02             	shr    eax,0x2
c00109f1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00109f5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00109fd:	8d 76 00             	lea    esi,[esi+0x0]
c0010a00:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0010a04:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0010a08:	7d 42                	jge    c0010a4c <loadACPITables(unsigned char*)+0x10c>
c0010a0a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0010a0e:	83 c0 24             	add    eax,0x24
c0010a11:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0010a15:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010a19:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010a1d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0010a21:	c1 e0 02             	shl    eax,0x2
c0010a24:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010a28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010a2c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010a2e:	a1 ec 99 02 c0       	mov    eax,ds:0xc00299ec
c0010a33:	8d 50 01             	lea    edx,[eax+0x1]
c0010a36:	89 15 ec 99 02 c0    	mov    DWORD PTR ds:0xc00299ec,edx
c0010a3c:	89 ca                	mov    edx,ecx
c0010a3e:	89 14 c5 04 9a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd65fc],edx
c0010a45:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0010a49:	eb b5                	jmp    c0010a00 <loadACPITables(unsigned char*)+0xc0>
c0010a4b:	90                   	nop
c0010a4c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0010a54:	a1 ec 99 02 c0       	mov    eax,ds:0xc00299ec
c0010a59:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0010a5d:	0f 8d 39 01 00 00    	jge    c0010b9c <loadACPITables(unsigned char*)+0x25c>
c0010a63:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010a67:	8b 04 c5 04 9a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd65fc]
c0010a6e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010a72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a76:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010a7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010a7e:	25 ff 0f 00 00       	and    eax,0xfff
c0010a83:	89 c6                	mov    esi,eax
c0010a85:	8b 1d d4 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274d4
c0010a8b:	83 ec 0c             	sub    esp,0xc
c0010a8e:	6a 01                	push   0x1
c0010a90:	e8 d4 b1 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0010a95:	83 c4 10             	add    esp,0x10
c0010a98:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010a9c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010aa2:	83 ec 0c             	sub    esp,0xc
c0010aa5:	6a 01                	push   0x1
c0010aa7:	6a 01                	push   0x1
c0010aa9:	50                   	push   eax
c0010aaa:	52                   	push   edx
c0010aab:	53                   	push   ebx
c0010aac:	e8 1b bb ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010ab1:	83 c4 20             	add    esp,0x20
c0010ab4:	09 f0                	or     eax,esi
c0010ab6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010aba:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010abe:	c1 e0 03             	shl    eax,0x3
c0010ac1:	05 00 9a 02 c0       	add    eax,0xc0029a00
c0010ac6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010aca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010ace:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010ad2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0010ada:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ade:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010ae2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010ae6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010aea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010aee:	89 c6                	mov    esi,eax
c0010af0:	89 d7                	mov    edi,edx
c0010af2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010af4:	89 c8                	mov    eax,ecx
c0010af6:	89 fa                	mov    edx,edi
c0010af8:	89 f3                	mov    ebx,esi
c0010afa:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010afe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0010b02:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010b06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b0d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010b11:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010b15:	05 00 10 00 00       	add    eax,0x1000
c0010b1a:	c1 e8 0c             	shr    eax,0xc
c0010b1d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010b21:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b25:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010b29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010b2d:	25 ff 0f 00 00       	and    eax,0xfff
c0010b32:	89 c6                	mov    esi,eax
c0010b34:	8b 1d d4 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274d4
c0010b3a:	83 ec 0c             	sub    esp,0xc
c0010b3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0010b41:	e8 23 b1 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0010b46:	83 c4 10             	add    esp,0x10
c0010b49:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010b4d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010b53:	83 ec 0c             	sub    esp,0xc
c0010b56:	6a 01                	push   0x1
c0010b58:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010b5c:	50                   	push   eax
c0010b5d:	52                   	push   edx
c0010b5e:	53                   	push   ebx
c0010b5f:	e8 68 ba ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010b64:	83 c4 20             	add    esp,0x20
c0010b67:	09 f0                	or     eax,esi
c0010b69:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010b6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b71:	83 ec 0c             	sub    esp,0xc
c0010b74:	50                   	push   eax
c0010b75:	e8 e3 b3 ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c0010b7a:	83 c4 10             	add    esp,0x10
c0010b7d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0010b81:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010b85:	89 14 c5 04 9a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd65fc],edx
c0010b8c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0010b90:	e9 bf fe ff ff       	jmp    c0010a54 <loadACPITables(unsigned char*)+0x114>
c0010b95:	8d 76 00             	lea    esi,[esi+0x0]
c0010b98:	90                   	nop
c0010b99:	8d 76 00             	lea    esi,[esi+0x0]
c0010b9c:	83 c4 60             	add    esp,0x60
c0010b9f:	5b                   	pop    ebx
c0010ba0:	5e                   	pop    esi
c0010ba1:	5f                   	pop    edi
c0010ba2:	c3                   	ret    
c0010ba3:	90                   	nop

c0010ba4 <findRSDT(unsigned char*)>:
c0010ba4:	57                   	push   edi
c0010ba5:	56                   	push   esi
c0010ba6:	53                   	push   ebx
c0010ba7:	83 ec 50             	sub    esp,0x50
c0010baa:	83 ec 0c             	sub    esp,0xc
c0010bad:	68 53 46 02 c0       	push   0xc0024653
c0010bb2:	e8 5a 91 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010bb7:	83 c4 10             	add    esp,0x10
c0010bba:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0010bbf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010bc5:	83 e0 04             	and    eax,0x4
c0010bc8:	84 c0                	test   al,al
c0010bca:	75 0c                	jne    c0010bd8 <findRSDT(unsigned char*)+0x34>
c0010bcc:	b8 00 00 00 00       	mov    eax,0x0
c0010bd1:	e9 86 01 00 00       	jmp    c0010d5c <findRSDT(unsigned char*)+0x1b8>
c0010bd6:	66 90                	xchg   ax,ax
c0010bd8:	83 ec 0c             	sub    esp,0xc
c0010bdb:	68 65 46 02 c0       	push   0xc0024665
c0010be0:	e8 2c 91 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010be5:	83 c4 10             	add    esp,0x10
c0010be8:	89 e0                	mov    eax,esp
c0010bea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0010bee:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010bf2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0010bf6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0010bfe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010c02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010c06:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0010c0a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0010c0e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0010c12:	89 c6                	mov    esi,eax
c0010c14:	89 d7                	mov    edi,edx
c0010c16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c18:	89 c8                	mov    eax,ecx
c0010c1a:	89 fa                	mov    edx,edi
c0010c1c:	89 f3                	mov    ebx,esi
c0010c1e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010c22:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0010c26:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010c2a:	83 ec 0c             	sub    esp,0xc
c0010c2d:	68 77 46 02 c0       	push   0xc0024677
c0010c32:	e8 da 90 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010c37:	83 c4 10             	add    esp,0x10
c0010c3a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010c3e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0010c42:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0010c4a:	83 ec 0c             	sub    esp,0xc
c0010c4d:	68 89 46 02 c0       	push   0xc0024689
c0010c52:	e8 ba 90 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010c57:	83 c4 10             	add    esp,0x10
c0010c5a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010c5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010c62:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0010c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c6a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010c6e:	83 ec 04             	sub    esp,0x4
c0010c71:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010c75:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010c79:	68 00 45 02 c0       	push   0xc0024500
c0010c7e:	e8 42 c3 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0010c83:	83 c4 10             	add    esp,0x10
c0010c86:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010c8a:	25 ff 0f 00 00       	and    eax,0xfff
c0010c8f:	89 c6                	mov    esi,eax
c0010c91:	8b 1d d4 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274d4
c0010c97:	83 ec 0c             	sub    esp,0xc
c0010c9a:	6a 02                	push   0x2
c0010c9c:	e8 c8 af ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0010ca1:	83 c4 10             	add    esp,0x10
c0010ca4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0010ca8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010cae:	83 ec 0c             	sub    esp,0xc
c0010cb1:	6a 01                	push   0x1
c0010cb3:	6a 02                	push   0x2
c0010cb5:	50                   	push   eax
c0010cb6:	52                   	push   edx
c0010cb7:	53                   	push   ebx
c0010cb8:	e8 0f b9 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010cbd:	83 c4 20             	add    esp,0x20
c0010cc0:	09 f0                	or     eax,esi
c0010cc2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0010cc6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010cca:	25 ff 0f 00 00       	and    eax,0xfff
c0010ccf:	89 c6                	mov    esi,eax
c0010cd1:	8b 1d d4 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274d4
c0010cd7:	83 ec 0c             	sub    esp,0xc
c0010cda:	6a 02                	push   0x2
c0010cdc:	e8 88 af ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0010ce1:	83 c4 10             	add    esp,0x10
c0010ce4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010ce8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0010cee:	83 ec 0c             	sub    esp,0xc
c0010cf1:	6a 01                	push   0x1
c0010cf3:	6a 02                	push   0x2
c0010cf5:	50                   	push   eax
c0010cf6:	52                   	push   edx
c0010cf7:	53                   	push   ebx
c0010cf8:	e8 cf b8 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0010cfd:	83 c4 20             	add    esp,0x20
c0010d00:	09 f0                	or     eax,esi
c0010d02:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0010d06:	83 ec 04             	sub    esp,0x4
c0010d09:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010d0d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010d11:	68 20 45 02 c0       	push   0xc0024520
c0010d16:	e8 aa c2 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0010d1b:	83 c4 10             	add    esp,0x10
c0010d1e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0010d23:	75 13                	jne    c0010d38 <findRSDT(unsigned char*)+0x194>
c0010d25:	c6 05 00 9c 02 c0 00 	mov    BYTE PTR ds:0xc0029c00,0x0
c0010d2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010d30:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0010d34:	eb 22                	jmp    c0010d58 <findRSDT(unsigned char*)+0x1b4>
c0010d36:	66 90                	xchg   ax,ax
c0010d38:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0010d3d:	75 11                	jne    c0010d50 <findRSDT(unsigned char*)+0x1ac>
c0010d3f:	c6 05 00 9c 02 c0 01 	mov    BYTE PTR ds:0xc0029c00,0x1
c0010d46:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010d4a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0010d4e:	eb 08                	jmp    c0010d58 <findRSDT(unsigned char*)+0x1b4>
c0010d50:	b8 00 00 00 00       	mov    eax,0x0
c0010d55:	eb 05                	jmp    c0010d5c <findRSDT(unsigned char*)+0x1b8>
c0010d57:	90                   	nop
c0010d58:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0010d5c:	83 c4 50             	add    esp,0x50
c0010d5f:	5b                   	pop    ebx
c0010d60:	5e                   	pop    esi
c0010d61:	5f                   	pop    edi
c0010d62:	c3                   	ret    
c0010d63:	90                   	nop

c0010d64 <findDataTable(unsigned char*, char*)>:
c0010d64:	83 ec 1c             	sub    esp,0x1c
c0010d67:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0010d6c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010d72:	83 e0 04             	and    eax,0x4
c0010d75:	84 c0                	test   al,al
c0010d77:	75 07                	jne    c0010d80 <findDataTable(unsigned char*, char*)+0x1c>
c0010d79:	b8 00 00 00 00       	mov    eax,0x0
c0010d7e:	eb 58                	jmp    c0010dd8 <findDataTable(unsigned char*, char*)+0x74>
c0010d80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010d88:	a1 ec 99 02 c0       	mov    eax,ds:0xc00299ec
c0010d8d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010d91:	7d 3d                	jge    c0010dd0 <findDataTable(unsigned char*, char*)+0x6c>
c0010d93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d97:	c1 e0 03             	shl    eax,0x3
c0010d9a:	05 00 9a 02 c0       	add    eax,0xc0029a00
c0010d9f:	83 ec 04             	sub    esp,0x4
c0010da2:	6a 04                	push   0x4
c0010da4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010da8:	50                   	push   eax
c0010da9:	e8 ca f7 fe ff       	call   c0000578 <memcmp>
c0010dae:	83 c4 10             	add    esp,0x10
c0010db1:	85 c0                	test   eax,eax
c0010db3:	0f 94 c0             	sete   al
c0010db6:	84 c0                	test   al,al
c0010db8:	74 0e                	je     c0010dc8 <findDataTable(unsigned char*, char*)+0x64>
c0010dba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010dbe:	8b 04 c5 04 9a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd65fc]
c0010dc5:	eb 11                	jmp    c0010dd8 <findDataTable(unsigned char*, char*)+0x74>
c0010dc7:	90                   	nop
c0010dc8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010dcc:	eb ba                	jmp    c0010d88 <findDataTable(unsigned char*, char*)+0x24>
c0010dce:	66 90                	xchg   ax,ax
c0010dd0:	b8 00 00 00 00       	mov    eax,0x0
c0010dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0010dd8:	83 c4 1c             	add    esp,0x1c
c0010ddb:	c3                   	ret    

c0010ddc <scanMADT()>:
c0010ddc:	53                   	push   ebx
c0010ddd:	83 ec 38             	sub    esp,0x38
c0010de0:	83 ec 0c             	sub    esp,0xc
c0010de3:	68 9b 46 02 c0       	push   0xc002469b
c0010de8:	e8 24 8f ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010ded:	83 c4 10             	add    esp,0x10
c0010df0:	a1 c0 73 02 c0       	mov    eax,ds:0xc00273c0
c0010df5:	25 00 04 00 00       	and    eax,0x400
c0010dfa:	74 14                	je     c0010e10 <scanMADT()+0x34>
c0010dfc:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0010e01:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010e07:	83 e2 fb             	and    edx,0xfffffffb
c0010e0a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010e10:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0010e15:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010e1b:	83 e0 04             	and    eax,0x4
c0010e1e:	84 c0                	test   al,al
c0010e20:	0f 84 82 04 00 00    	je     c00112a8 <scanMADT()+0x4cc>
c0010e26:	83 ec 0c             	sub    esp,0xc
c0010e29:	68 a8 46 02 c0       	push   0xc00246a8
c0010e2e:	e8 de 8e ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010e33:	83 c4 10             	add    esp,0x10
c0010e36:	e8 31 fa ff ff       	call   c001086c <findRSDP()>
c0010e3b:	a3 0c 9c 02 c0       	mov    ds:0xc0029c0c,eax
c0010e40:	a1 0c 9c 02 c0       	mov    eax,ds:0xc0029c0c
c0010e45:	85 c0                	test   eax,eax
c0010e47:	75 1b                	jne    c0010e64 <scanMADT()+0x88>
c0010e49:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0010e4e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010e54:	83 e2 fb             	and    edx,0xfffffffb
c0010e57:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010e5d:	e9 4e 04 00 00       	jmp    c00112b0 <scanMADT()+0x4d4>
c0010e62:	66 90                	xchg   ax,ax
c0010e64:	83 ec 0c             	sub    esp,0xc
c0010e67:	68 ba 46 02 c0       	push   0xc00246ba
c0010e6c:	e8 a0 8e ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010e71:	83 c4 10             	add    esp,0x10
c0010e74:	a1 0c 9c 02 c0       	mov    eax,ds:0xc0029c0c
c0010e79:	83 ec 0c             	sub    esp,0xc
c0010e7c:	50                   	push   eax
c0010e7d:	e8 22 fd ff ff       	call   c0010ba4 <findRSDT(unsigned char*)>
c0010e82:	83 c4 10             	add    esp,0x10
c0010e85:	a3 08 9c 02 c0       	mov    ds:0xc0029c08,eax
c0010e8a:	a1 08 9c 02 c0       	mov    eax,ds:0xc0029c08
c0010e8f:	85 c0                	test   eax,eax
c0010e91:	75 19                	jne    c0010eac <scanMADT()+0xd0>
c0010e93:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0010e98:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010e9e:	83 e2 fb             	and    edx,0xfffffffb
c0010ea1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010ea7:	e9 04 04 00 00       	jmp    c00112b0 <scanMADT()+0x4d4>
c0010eac:	83 ec 0c             	sub    esp,0xc
c0010eaf:	68 ca 46 02 c0       	push   0xc00246ca
c0010eb4:	e8 58 8e ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0010eb9:	83 c4 10             	add    esp,0x10
c0010ebc:	a1 08 9c 02 c0       	mov    eax,ds:0xc0029c08
c0010ec1:	83 ec 0c             	sub    esp,0xc
c0010ec4:	50                   	push   eax
c0010ec5:	e8 76 fa ff ff       	call   c0010940 <loadACPITables(unsigned char*)>
c0010eca:	83 c4 10             	add    esp,0x10
c0010ecd:	a1 08 9c 02 c0       	mov    eax,ds:0xc0029c08
c0010ed2:	83 ec 08             	sub    esp,0x8
c0010ed5:	68 e2 46 02 c0       	push   0xc00246e2
c0010eda:	50                   	push   eax
c0010edb:	e8 84 fe ff ff       	call   c0010d64 <findDataTable(unsigned char*, char*)>
c0010ee0:	83 c4 10             	add    esp,0x10
c0010ee3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010ee7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0010eec:	75 1a                	jne    c0010f08 <scanMADT()+0x12c>
c0010eee:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0010ef3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0010ef9:	83 e2 fe             	and    edx,0xfffffffe
c0010efc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0010f02:	e9 a9 03 00 00       	jmp    c00112b0 <scanMADT()+0x4d4>
c0010f07:	90                   	nop
c0010f08:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010f10:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010f14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f17:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0010f1b:	0f 87 8f 03 00 00    	ja     c00112b0 <scanMADT()+0x4d4>
c0010f21:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0010f29:	0f 87 81 03 00 00    	ja     c00112b0 <scanMADT()+0x4d4>
c0010f2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f33:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0010f37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f3b:	8d 50 01             	lea    edx,[eax+0x1]
c0010f3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010f42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010f46:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010f4a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0010f4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f52:	8d 50 01             	lea    edx,[eax+0x1]
c0010f55:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010f59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010f5d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0010f61:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0010f65:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0010f6a:	0f 86 3c 03 00 00    	jbe    c00112ac <scanMADT()+0x4d0>
c0010f70:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0010f75:	75 59                	jne    c0010fd0 <scanMADT()+0x1f4>
c0010f77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f7b:	8d 50 01             	lea    edx,[eax+0x1]
c0010f7e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010f82:	8a 15 00 9e 02 c0    	mov    dl,BYTE PTR ds:0xc0029e00
c0010f88:	0f b6 d2             	movzx  edx,dl
c0010f8b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0010f8f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0010f93:	88 82 40 9e 02 c0    	mov    BYTE PTR [edx-0x3ffd61c0],al
c0010f99:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f9d:	8d 50 01             	lea    edx,[eax+0x1]
c0010fa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010fa4:	8a 15 00 9e 02 c0    	mov    dl,BYTE PTR ds:0xc0029e00
c0010faa:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010fad:	88 0d 00 9e 02 c0    	mov    BYTE PTR ds:0xc0029e00,cl
c0010fb3:	0f b6 d2             	movzx  edx,dl
c0010fb6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0010fba:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0010fbe:	88 82 20 9e 02 c0    	mov    BYTE PTR [edx-0x3ffd61e0],al
c0010fc4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0010fc9:	e9 c6 02 00 00       	jmp    c0011294 <scanMADT()+0x4b8>
c0010fce:	66 90                	xchg   ax,ax
c0010fd0:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0010fd5:	0f 85 15 01 00 00    	jne    c00110f0 <scanMADT()+0x314>
c0010fdb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010fdf:	8d 50 01             	lea    edx,[eax+0x1]
c0010fe2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010fe6:	8a 15 c0 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029cc0
c0010fec:	0f b6 d2             	movzx  edx,dl
c0010fef:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0010ff3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0010ff7:	88 82 e0 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd6320],al
c0010ffd:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011001:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011005:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011009:	01 d0                	add    eax,edx
c001100b:	83 c0 2c             	add    eax,0x2c
c001100e:	8a 00                	mov    al,BYTE PTR [eax]
c0011010:	0f b6 d0             	movzx  edx,al
c0011013:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011017:	8d 48 01             	lea    ecx,[eax+0x1]
c001101a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001101e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011022:	0f b6 c0             	movzx  eax,al
c0011025:	c1 e0 08             	shl    eax,0x8
c0011028:	89 d1                	mov    ecx,edx
c001102a:	09 c1                	or     ecx,eax
c001102c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011030:	8d 50 02             	lea    edx,[eax+0x2]
c0011033:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011037:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001103b:	0f b6 c0             	movzx  eax,al
c001103e:	c1 e0 10             	shl    eax,0x10
c0011041:	09 c1                	or     ecx,eax
c0011043:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011047:	8d 50 03             	lea    edx,[eax+0x3]
c001104a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001104e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011052:	0f b6 c0             	movzx  eax,al
c0011055:	c1 e0 18             	shl    eax,0x18
c0011058:	09 c1                	or     ecx,eax
c001105a:	89 ca                	mov    edx,ecx
c001105c:	a0 c0 9c 02 c0       	mov    al,ds:0xc0029cc0
c0011061:	0f b6 c0             	movzx  eax,al
c0011064:	89 14 85 00 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6300],edx
c001106b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011070:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011074:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011078:	01 d0                	add    eax,edx
c001107a:	83 c0 2c             	add    eax,0x2c
c001107d:	8a 00                	mov    al,BYTE PTR [eax]
c001107f:	0f b6 d0             	movzx  edx,al
c0011082:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011086:	8d 48 01             	lea    ecx,[eax+0x1]
c0011089:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001108d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011091:	0f b6 c0             	movzx  eax,al
c0011094:	c1 e0 08             	shl    eax,0x8
c0011097:	89 d1                	mov    ecx,edx
c0011099:	09 c1                	or     ecx,eax
c001109b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001109f:	8d 50 02             	lea    edx,[eax+0x2]
c00110a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00110a6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00110aa:	0f b6 c0             	movzx  eax,al
c00110ad:	c1 e0 10             	shl    eax,0x10
c00110b0:	09 c1                	or     ecx,eax
c00110b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00110b6:	8d 50 03             	lea    edx,[eax+0x3]
c00110b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00110bd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00110c1:	0f b6 c0             	movzx  eax,al
c00110c4:	c1 e0 18             	shl    eax,0x18
c00110c7:	09 c1                	or     ecx,eax
c00110c9:	89 ca                	mov    edx,ecx
c00110cb:	a0 c0 9c 02 c0       	mov    al,ds:0xc0029cc0
c00110d0:	0f b6 c0             	movzx  eax,al
c00110d3:	89 14 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],edx
c00110da:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00110df:	a0 c0 9c 02 c0       	mov    al,ds:0xc0029cc0
c00110e4:	40                   	inc    eax
c00110e5:	a2 c0 9c 02 c0       	mov    ds:0xc0029cc0,al
c00110ea:	e9 a5 01 00 00       	jmp    c0011294 <scanMADT()+0x4b8>
c00110ef:	90                   	nop
c00110f0:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00110f5:	0f 85 e9 00 00 00    	jne    c00111e4 <scanMADT()+0x408>
c00110fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00110ff:	8d 50 01             	lea    edx,[eax+0x1]
c0011102:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011106:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001110a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001110e:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011112:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011116:	8d 50 01             	lea    edx,[eax+0x1]
c0011119:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001111d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011121:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011125:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011129:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001112d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011131:	01 d0                	add    eax,edx
c0011133:	83 c0 2c             	add    eax,0x2c
c0011136:	8a 00                	mov    al,BYTE PTR [eax]
c0011138:	0f b6 d0             	movzx  edx,al
c001113b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001113f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011142:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011146:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001114a:	0f b6 c0             	movzx  eax,al
c001114d:	c1 e0 08             	shl    eax,0x8
c0011150:	89 d1                	mov    ecx,edx
c0011152:	09 c1                	or     ecx,eax
c0011154:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011158:	8d 50 02             	lea    edx,[eax+0x2]
c001115b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001115f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011163:	0f b6 c0             	movzx  eax,al
c0011166:	c1 e0 10             	shl    eax,0x10
c0011169:	09 c1                	or     ecx,eax
c001116b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001116f:	8d 50 03             	lea    edx,[eax+0x3]
c0011172:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011176:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001117a:	0f b6 c0             	movzx  eax,al
c001117d:	c1 e0 18             	shl    eax,0x18
c0011180:	09 c8                	or     eax,ecx
c0011182:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011186:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001118b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001118f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011193:	01 d0                	add    eax,edx
c0011195:	83 c0 2c             	add    eax,0x2c
c0011198:	8a 00                	mov    al,BYTE PTR [eax]
c001119a:	0f b6 c0             	movzx  eax,al
c001119d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00111a1:	8d 4a 01             	lea    ecx,[edx+0x1]
c00111a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00111a8:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00111ac:	0f b6 d2             	movzx  edx,dl
c00111af:	c1 e2 08             	shl    edx,0x8
c00111b2:	09 d0                	or     eax,edx
c00111b4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00111b9:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00111be:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00111c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00111c7:	88 90 00 68 02 c0    	mov    BYTE PTR [eax-0x3ffd9800],dl
c00111cd:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00111d2:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00111d7:	66 89 84 12 a0 9c 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd6360],ax
c00111df:	e9 b0 00 00 00       	jmp    c0011294 <scanMADT()+0x4b8>
c00111e4:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00111e9:	0f 85 99 00 00 00    	jne    c0011288 <scanMADT()+0x4ac>
c00111ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00111f3:	8d 50 01             	lea    edx,[eax+0x1]
c00111f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00111fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00111fe:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011202:	0f b6 c0             	movzx  eax,al
c0011205:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011209:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001120d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011211:	01 d0                	add    eax,edx
c0011213:	83 c0 2c             	add    eax,0x2c
c0011216:	8a 00                	mov    al,BYTE PTR [eax]
c0011218:	0f b6 d0             	movzx  edx,al
c001121b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001121f:	8d 48 01             	lea    ecx,[eax+0x1]
c0011222:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011226:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001122a:	0f b6 c0             	movzx  eax,al
c001122d:	c1 e0 08             	shl    eax,0x8
c0011230:	09 d0                	or     eax,edx
c0011232:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011236:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001123b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001123f:	8d 50 01             	lea    edx,[eax+0x1]
c0011242:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011246:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001124a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001124e:	0f b6 c0             	movzx  eax,al
c0011251:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011259:	c1 e0 08             	shl    eax,0x8
c001125c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011260:	89 c1                	mov    ecx,eax
c0011262:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011266:	c1 e0 18             	shl    eax,0x18
c0011269:	89 c3                	mov    ebx,eax
c001126b:	a1 10 9c 02 c0       	mov    eax,ds:0xc0029c10
c0011270:	8d 50 01             	lea    edx,[eax+0x1]
c0011273:	89 15 10 9c 02 c0    	mov    DWORD PTR ds:0xc0029c10,edx
c0011279:	09 d9                	or     ecx,ebx
c001127b:	89 ca                	mov    edx,ecx
c001127d:	89 14 85 20 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd63e0],edx
c0011284:	eb 0e                	jmp    c0011294 <scanMADT()+0x4b8>
c0011286:	66 90                	xchg   ax,ax
c0011288:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001128d:	75 05                	jne    c0011294 <scanMADT()+0x4b8>
c001128f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011294:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011299:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001129d:	01 d0                	add    eax,edx
c001129f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00112a3:	e9 68 fc ff ff       	jmp    c0010f10 <scanMADT()+0x134>
c00112a8:	90                   	nop
c00112a9:	eb 05                	jmp    c00112b0 <scanMADT()+0x4d4>
c00112ab:	90                   	nop
c00112ac:	90                   	nop
c00112ad:	8d 76 00             	lea    esi,[esi+0x0]
c00112b0:	83 c4 38             	add    esp,0x38
c00112b3:	5b                   	pop    ebx
c00112b4:	c3                   	ret    
c00112b5:	90                   	nop
c00112b6:	66 90                	xchg   ax,ax

c00112b8 <ACPI::ACPI()>:
c00112b8:	83 ec 0c             	sub    esp,0xc
c00112bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112bf:	83 ec 08             	sub    esp,0x8
c00112c2:	68 e7 46 02 c0       	push   0xc00246e7
c00112c7:	50                   	push   eax
c00112c8:	e8 79 d3 ff ff       	call   c000e646 <Device::Device(char const*)>
c00112cd:	83 c4 10             	add    esp,0x10
c00112d0:	ba a8 48 02 c0       	mov    edx,0xc00248a8
c00112d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112d9:	89 10                	mov    DWORD PTR [eax],edx
c00112db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112df:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00112e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112ea:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00112f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0011302:	83 ec 0c             	sub    esp,0xc
c0011305:	68 ec 46 02 c0       	push   0xc00246ec
c001130a:	e8 02 8a ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001130f:	83 c4 10             	add    esp,0x10
c0011312:	e8 c5 fa ff ff       	call   c0010ddc <scanMADT()>
c0011317:	90                   	nop
c0011318:	83 c4 0c             	add    esp,0xc
c001131b:	c3                   	ret    

c001131c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001131c:	83 ec 2c             	sub    esp,0x2c
c001131f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011323:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011327:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001132b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001132f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011334:	88 d0                	mov    al,dl
c0011336:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001133a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001133f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011347:	90                   	nop
c0011348:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001134c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011352:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011356:	0f 8d 9c 00 00 00    	jge    c00113f8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c001135c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011360:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011364:	83 c2 2a             	add    edx,0x2a
c0011367:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001136b:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011370:	75 7a                	jne    c00113ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011372:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011376:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001137a:	83 c2 2a             	add    edx,0x2a
c001137d:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011381:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011385:	75 65                	jne    c00113ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011387:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001138c:	74 3a                	je     c00113c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c001138e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011392:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011396:	83 c2 2a             	add    edx,0x2a
c0011399:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001139d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113a4:	39 c2                	cmp    edx,eax
c00113a6:	74 10                	je     c00113b8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c00113a8:	83 ec 0c             	sub    esp,0xc
c00113ab:	68 40 45 02 c0       	push   0xc0024540
c00113b0:	e8 52 2a 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c00113b5:	83 c4 10             	add    esp,0x10
c00113b8:	83 ec 0c             	sub    esp,0xc
c00113bb:	68 fa 46 02 c0       	push   0xc00246fa
c00113c0:	e8 42 2a 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c00113c5:	83 c4 10             	add    esp,0x10
c00113c8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00113cc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00113d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00113d4:	83 c2 2a             	add    edx,0x2a
c00113d7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00113db:	8b 02                	mov    eax,DWORD PTR [edx]
c00113dd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00113e0:	89 01                	mov    DWORD PTR [ecx],eax
c00113e2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00113e5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00113ea:	66 90                	xchg   ax,ax
c00113ec:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00113f0:	e9 53 ff ff ff       	jmp    c0011348 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c00113f5:	8d 76 00             	lea    esi,[esi+0x0]
c00113f8:	90                   	nop
c00113f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113fd:	83 c4 2c             	add    esp,0x2c
c0011400:	c2 04 00             	ret    0x4
c0011403:	90                   	nop

c0011404 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0011404:	83 ec 1c             	sub    esp,0x1c
c0011407:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001140b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001140f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011413:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011418:	88 c8                	mov    al,cl
c001141a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001141e:	88 d0                	mov    al,dl
c0011420:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011424:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011428:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001142e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011432:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011435:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0011439:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001143d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011441:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011447:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001144b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001144e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011452:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0011457:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001145b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011461:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0011465:	8d 48 01             	lea    ecx,[eax+0x1]
c0011468:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001146c:	83 c2 2a             	add    edx,0x2a
c001146f:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0011473:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011477:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001147d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011481:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011484:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011488:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011490:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011496:	8d 50 01             	lea    edx,[eax+0x1]
c0011499:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001149d:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00114a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114a7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00114ad:	3d 00 02 00 00       	cmp    eax,0x200
c00114b2:	75 10                	jne    c00114c4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00114b4:	83 ec 0c             	sub    esp,0xc
c00114b7:	68 09 47 02 c0       	push   0xc0024709
c00114bc:	e8 46 29 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c00114c1:	83 c4 10             	add    esp,0x10
c00114c4:	90                   	nop
c00114c5:	83 c4 1c             	add    esp,0x1c
c00114c8:	c3                   	ret    
c00114c9:	90                   	nop
c00114ca:	66 90                	xchg   ax,ax

c00114cc <ACPI::setScreenBrightnessLevel(void*, int)>:
c00114cc:	b8 00 00 00 00       	mov    eax,0x0
c00114d1:	c3                   	ret    
c00114d2:	66 90                	xchg   ax,ax

c00114d4 <ACPI::detectPCI()>:
c00114d4:	53                   	push   ebx
c00114d5:	83 ec 68             	sub    esp,0x68
c00114d8:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c00114dd:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c00114e2:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c00114e7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00114ed:	83 e0 04             	and    eax,0x4
c00114f0:	84 c0                	test   al,al
c00114f2:	74 2c                	je     c0011520 <ACPI::detectPCI()+0x4c>
c00114f4:	a1 08 9c 02 c0       	mov    eax,ds:0xc0029c08
c00114f9:	83 ec 08             	sub    esp,0x8
c00114fc:	68 26 47 02 c0       	push   0xc0024726
c0011501:	50                   	push   eax
c0011502:	e8 5d f8 ff ff       	call   c0010d64 <findDataTable(unsigned char*, char*)>
c0011507:	83 c4 10             	add    esp,0x10
c001150a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001150e:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c0011513:	74 0b                	je     c0011520 <ACPI::detectPCI()+0x4c>
c0011515:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001151a:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001151f:	90                   	nop
c0011520:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c0011528:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001152c:	8a 00                	mov    al,BYTE PTR [eax]
c001152e:	3c 01                	cmp    al,0x1
c0011530:	75 0e                	jne    c0011540 <ACPI::detectPCI()+0x6c>
c0011532:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0011537:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001153c:	eb 2a                	jmp    c0011568 <ACPI::detectPCI()+0x94>
c001153e:	66 90                	xchg   ax,ax
c0011540:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011544:	8a 00                	mov    al,BYTE PTR [eax]
c0011546:	3c 02                	cmp    al,0x2
c0011548:	75 1e                	jne    c0011568 <ACPI::detectPCI()+0x94>
c001154a:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001154f:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0011554:	74 12                	je     c0011568 <ACPI::detectPCI()+0x94>
c0011556:	83 ec 0c             	sub    esp,0xc
c0011559:	68 70 45 02 c0       	push   0xc0024570
c001155e:	e8 a4 28 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c0011563:	83 c4 10             	add    esp,0x10
c0011566:	66 90                	xchg   ax,ax
c0011568:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c001156c:	83 f0 01             	xor    eax,0x1
c001156f:	84 c0                	test   al,al
c0011571:	74 41                	je     c00115b4 <ACPI::detectPCI()+0xe0>
c0011573:	e8 d8 eb fe ff       	call   c0000150 <manualPCIProbe>
c0011578:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001157c:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c0011581:	75 0d                	jne    c0011590 <ACPI::detectPCI()+0xbc>
c0011583:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0011588:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c001158d:	eb 25                	jmp    c00115b4 <ACPI::detectPCI()+0xe0>
c001158f:	90                   	nop
c0011590:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0011595:	75 1d                	jne    c00115b4 <ACPI::detectPCI()+0xe0>
c0011597:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001159c:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00115a1:	74 11                	je     c00115b4 <ACPI::detectPCI()+0xe0>
c00115a3:	83 ec 0c             	sub    esp,0xc
c00115a6:	68 70 45 02 c0       	push   0xc0024570
c00115ab:	e8 57 28 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c00115b0:	83 c4 10             	add    esp,0x10
c00115b3:	90                   	nop
c00115b4:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c00115b9:	0f 84 49 03 00 00    	je     c0011908 <ACPI::detectPCI()+0x434>
c00115bf:	83 ec 0c             	sub    esp,0xc
c00115c2:	68 2b 47 02 c0       	push   0xc002472b
c00115c7:	e8 45 87 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00115cc:	83 c4 10             	add    esp,0x10
c00115cf:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00115d4:	0f 84 8e 00 00 00    	je     c0011668 <ACPI::detectPCI()+0x194>
c00115da:	a1 c0 73 02 c0       	mov    eax,ds:0xc00273c0
c00115df:	25 00 08 00 00       	and    eax,0x800
c00115e4:	0f 84 16 01 00 00    	je     c0011700 <ACPI::detectPCI()+0x22c>
c00115ea:	83 ec 0c             	sub    esp,0xc
c00115ed:	68 98 45 02 c0       	push   0xc0024598
c00115f2:	e8 1a 87 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00115f7:	83 c4 10             	add    esp,0x10
c00115fa:	a1 c0 73 02 c0       	mov    eax,ds:0xc00273c0
c00115ff:	25 80 00 00 00       	and    eax,0x80
c0011604:	0f 85 f6 00 00 00    	jne    c0011700 <ACPI::detectPCI()+0x22c>
c001160a:	66 90                	xchg   ax,ax
c001160c:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c0011613:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c0011618:	89 c2                	mov    edx,eax
c001161a:	ec                   	in     al,dx
c001161b:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001161f:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c0011623:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c0011627:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c001162c:	74 0a                	je     c0011638 <ACPI::detectPCI()+0x164>
c001162e:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c0011633:	74 03                	je     c0011638 <ACPI::detectPCI()+0x164>
c0011635:	eb d5                	jmp    c001160c <ACPI::detectPCI()+0x138>
c0011637:	90                   	nop
c0011638:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c001163f:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c0011644:	89 c2                	mov    edx,eax
c0011646:	ec                   	in     al,dx
c0011647:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c001164b:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001164f:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c0011653:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c0011658:	74 de                	je     c0011638 <ACPI::detectPCI()+0x164>
c001165a:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c001165f:	0f 85 93 00 00 00    	jne    c00116f8 <ACPI::detectPCI()+0x224>
c0011665:	eb d1                	jmp    c0011638 <ACPI::detectPCI()+0x164>
c0011667:	90                   	nop
c0011668:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c001166c:	83 f0 01             	xor    eax,0x1
c001166f:	84 c0                	test   al,al
c0011671:	0f 84 89 00 00 00    	je     c0011700 <ACPI::detectPCI()+0x22c>
c0011677:	a1 c0 73 02 c0       	mov    eax,ds:0xc00273c0
c001167c:	25 00 08 00 00       	and    eax,0x800
c0011681:	74 7d                	je     c0011700 <ACPI::detectPCI()+0x22c>
c0011683:	83 ec 0c             	sub    esp,0xc
c0011686:	68 bc 45 02 c0       	push   0xc00245bc
c001168b:	e8 81 86 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011690:	83 c4 10             	add    esp,0x10
c0011693:	a1 c0 73 02 c0       	mov    eax,ds:0xc00273c0
c0011698:	25 80 00 00 00       	and    eax,0x80
c001169d:	75 61                	jne    c0011700 <ACPI::detectPCI()+0x22c>
c001169f:	90                   	nop
c00116a0:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c00116a7:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c00116ac:	89 c2                	mov    edx,eax
c00116ae:	ec                   	in     al,dx
c00116af:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c00116b3:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c00116b7:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c00116bb:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c00116c0:	74 0a                	je     c00116cc <ACPI::detectPCI()+0x1f8>
c00116c2:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c00116c7:	74 03                	je     c00116cc <ACPI::detectPCI()+0x1f8>
c00116c9:	eb d5                	jmp    c00116a0 <ACPI::detectPCI()+0x1cc>
c00116cb:	90                   	nop
c00116cc:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c00116d3:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00116d8:	89 c2                	mov    edx,eax
c00116da:	ec                   	in     al,dx
c00116db:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00116df:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00116e3:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c00116e7:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c00116ec:	74 de                	je     c00116cc <ACPI::detectPCI()+0x1f8>
c00116ee:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c00116f3:	75 07                	jne    c00116fc <ACPI::detectPCI()+0x228>
c00116f5:	eb d5                	jmp    c00116cc <ACPI::detectPCI()+0x1f8>
c00116f7:	90                   	nop
c00116f8:	90                   	nop
c00116f9:	eb 05                	jmp    c0011700 <ACPI::detectPCI()+0x22c>
c00116fb:	90                   	nop
c00116fc:	90                   	nop
c00116fd:	8d 76 00             	lea    esi,[esi+0x0]
c0011700:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c0011708:	83 ec 0c             	sub    esp,0xc
c001170b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001170f:	e8 a3 85 ff ff       	call   c0009cb7 <malloc>
c0011714:	83 c4 10             	add    esp,0x10
c0011717:	89 c3                	mov    ebx,eax
c0011719:	83 ec 0c             	sub    esp,0xc
c001171c:	53                   	push   ebx
c001171d:	e8 00 bd 00 00       	call   c001d422 <PCI::PCI()>
c0011722:	83 c4 10             	add    esp,0x10
c0011725:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c0011729:	a1 c0 73 02 c0       	mov    eax,ds:0xc00273c0
c001172e:	25 00 08 00 00       	and    eax,0x800
c0011733:	74 7b                	je     c00117b0 <ACPI::detectPCI()+0x2dc>
c0011735:	83 ec 0c             	sub    esp,0xc
c0011738:	68 43 47 02 c0       	push   0xc0024743
c001173d:	e8 cf 85 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011742:	83 c4 10             	add    esp,0x10
c0011745:	a1 c0 73 02 c0       	mov    eax,ds:0xc00273c0
c001174a:	25 80 00 00 00       	and    eax,0x80
c001174f:	75 5f                	jne    c00117b0 <ACPI::detectPCI()+0x2dc>
c0011751:	8d 76 00             	lea    esi,[esi+0x0]
c0011754:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c001175b:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c0011760:	89 c2                	mov    edx,eax
c0011762:	ec                   	in     al,dx
c0011763:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c0011767:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c001176b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001176f:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c0011774:	74 0a                	je     c0011780 <ACPI::detectPCI()+0x2ac>
c0011776:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c001177b:	74 03                	je     c0011780 <ACPI::detectPCI()+0x2ac>
c001177d:	eb d5                	jmp    c0011754 <ACPI::detectPCI()+0x280>
c001177f:	90                   	nop
c0011780:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c0011787:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c001178c:	89 c2                	mov    edx,eax
c001178e:	ec                   	in     al,dx
c001178f:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011793:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c0011797:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001179b:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c00117a0:	74 de                	je     c0011780 <ACPI::detectPCI()+0x2ac>
c00117a2:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c00117a7:	75 03                	jne    c00117ac <ACPI::detectPCI()+0x2d8>
c00117a9:	eb d5                	jmp    c0011780 <ACPI::detectPCI()+0x2ac>
c00117ab:	90                   	nop
c00117ac:	90                   	nop
c00117ad:	8d 76 00             	lea    esi,[esi+0x0]
c00117b0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00117b4:	83 ec 08             	sub    esp,0x8
c00117b7:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00117bb:	50                   	push   eax
c00117bc:	e8 81 cc ff ff       	call   c000e442 <Device::addChild(Device*)>
c00117c1:	83 c4 10             	add    esp,0x10
c00117c4:	a1 c0 73 02 c0       	mov    eax,ds:0xc00273c0
c00117c9:	25 00 08 00 00       	and    eax,0x800
c00117ce:	74 78                	je     c0011848 <ACPI::detectPCI()+0x374>
c00117d0:	83 ec 0c             	sub    esp,0xc
c00117d3:	68 49 47 02 c0       	push   0xc0024749
c00117d8:	e8 34 85 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00117dd:	83 c4 10             	add    esp,0x10
c00117e0:	a1 c0 73 02 c0       	mov    eax,ds:0xc00273c0
c00117e5:	25 80 00 00 00       	and    eax,0x80
c00117ea:	75 5c                	jne    c0011848 <ACPI::detectPCI()+0x374>
c00117ec:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c00117f3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00117f8:	89 c2                	mov    edx,eax
c00117fa:	ec                   	in     al,dx
c00117fb:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c00117ff:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011803:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c0011807:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c001180c:	74 0a                	je     c0011818 <ACPI::detectPCI()+0x344>
c001180e:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0011813:	74 03                	je     c0011818 <ACPI::detectPCI()+0x344>
c0011815:	eb d5                	jmp    c00117ec <ACPI::detectPCI()+0x318>
c0011817:	90                   	nop
c0011818:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c001181f:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011824:	89 c2                	mov    edx,eax
c0011826:	ec                   	in     al,dx
c0011827:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001182b:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c001182f:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c0011833:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c0011838:	74 de                	je     c0011818 <ACPI::detectPCI()+0x344>
c001183a:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c001183f:	75 03                	jne    c0011844 <ACPI::detectPCI()+0x370>
c0011841:	eb d5                	jmp    c0011818 <ACPI::detectPCI()+0x344>
c0011843:	90                   	nop
c0011844:	90                   	nop
c0011845:	8d 76 00             	lea    esi,[esi+0x0]
c0011848:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001184c:	8b 00                	mov    eax,DWORD PTR [eax]
c001184e:	83 c0 08             	add    eax,0x8
c0011851:	8b 00                	mov    eax,DWORD PTR [eax]
c0011853:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0011858:	74 0a                	je     c0011864 <ACPI::detectPCI()+0x390>
c001185a:	ba 01 00 00 00       	mov    edx,0x1
c001185f:	eb 0b                	jmp    c001186c <ACPI::detectPCI()+0x398>
c0011861:	8d 76 00             	lea    esi,[esi+0x0]
c0011864:	ba 02 00 00 00       	mov    edx,0x2
c0011869:	8d 76 00             	lea    esi,[esi+0x0]
c001186c:	6a 00                	push   0x0
c001186e:	6a 00                	push   0x0
c0011870:	52                   	push   edx
c0011871:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011875:	ff d0                	call   eax
c0011877:	83 c4 10             	add    esp,0x10
c001187a:	a1 c0 73 02 c0       	mov    eax,ds:0xc00273c0
c001187f:	25 00 08 00 00       	and    eax,0x800
c0011884:	0f 84 26 01 00 00    	je     c00119b0 <ACPI::detectPCI()+0x4dc>
c001188a:	83 ec 0c             	sub    esp,0xc
c001188d:	68 4f 47 02 c0       	push   0xc002474f
c0011892:	e8 7a 84 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011897:	83 c4 10             	add    esp,0x10
c001189a:	a1 c0 73 02 c0       	mov    eax,ds:0xc00273c0
c001189f:	25 80 00 00 00       	and    eax,0x80
c00118a4:	0f 85 06 01 00 00    	jne    c00119b0 <ACPI::detectPCI()+0x4dc>
c00118aa:	66 90                	xchg   ax,ax
c00118ac:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c00118b3:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00118b8:	89 c2                	mov    edx,eax
c00118ba:	ec                   	in     al,dx
c00118bb:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00118bf:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00118c3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00118c7:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c00118cc:	74 0a                	je     c00118d8 <ACPI::detectPCI()+0x404>
c00118ce:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c00118d3:	74 03                	je     c00118d8 <ACPI::detectPCI()+0x404>
c00118d5:	eb d5                	jmp    c00118ac <ACPI::detectPCI()+0x3d8>
c00118d7:	90                   	nop
c00118d8:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c00118df:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00118e4:	89 c2                	mov    edx,eax
c00118e6:	ec                   	in     al,dx
c00118e7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00118eb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00118ef:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c00118f3:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c00118f8:	74 de                	je     c00118d8 <ACPI::detectPCI()+0x404>
c00118fa:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c00118ff:	0f 85 a7 00 00 00    	jne    c00119ac <ACPI::detectPCI()+0x4d8>
c0011905:	eb d1                	jmp    c00118d8 <ACPI::detectPCI()+0x404>
c0011907:	90                   	nop
c0011908:	83 ec 0c             	sub    esp,0xc
c001190b:	68 55 47 02 c0       	push   0xc0024755
c0011910:	e8 b0 b6 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0011915:	83 c4 10             	add    esp,0x10
c0011918:	83 ec 0c             	sub    esp,0xc
c001191b:	68 60 47 02 c0       	push   0xc0024760
c0011920:	e8 ec 83 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011925:	83 c4 10             	add    esp,0x10
c0011928:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c0011930:	83 ec 0c             	sub    esp,0xc
c0011933:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011937:	e8 7b 83 ff ff       	call   c0009cb7 <malloc>
c001193c:	83 c4 10             	add    esp,0x10
c001193f:	89 c3                	mov    ebx,eax
c0011941:	83 ec 0c             	sub    esp,0xc
c0011944:	53                   	push   ebx
c0011945:	e8 42 cc 00 00       	call   c001e58c <IDE::IDE()>
c001194a:	83 c4 10             	add    esp,0x10
c001194d:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0011951:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011955:	83 ec 08             	sub    esp,0x8
c0011958:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001195c:	50                   	push   eax
c001195d:	e8 e0 ca ff ff       	call   c000e442 <Device::addChild(Device*)>
c0011962:	83 c4 10             	add    esp,0x10
c0011965:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011969:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0011973:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011977:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0011980:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011984:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001198d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011991:	8b 00                	mov    eax,DWORD PTR [eax]
c0011993:	83 c0 08             	add    eax,0x8
c0011996:	8b 00                	mov    eax,DWORD PTR [eax]
c0011998:	6a 00                	push   0x0
c001199a:	6a 00                	push   0x0
c001199c:	6a 00                	push   0x0
c001199e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00119a2:	ff d0                	call   eax
c00119a4:	83 c4 10             	add    esp,0x10
c00119a7:	eb 07                	jmp    c00119b0 <ACPI::detectPCI()+0x4dc>
c00119a9:	8d 76 00             	lea    esi,[esi+0x0]
c00119ac:	90                   	nop
c00119ad:	8d 76 00             	lea    esi,[esi+0x0]
c00119b0:	90                   	nop
c00119b1:	83 c4 68             	add    esp,0x68
c00119b4:	5b                   	pop    ebx
c00119b5:	c3                   	ret    
c00119b6:	66 90                	xchg   ax,ax

c00119b8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00119b8:	83 ec 1c             	sub    esp,0x1c
c00119bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00119bf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00119c2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00119c6:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c00119cb:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00119d0:	83 ec 08             	sub    esp,0x8
c00119d3:	52                   	push   edx
c00119d4:	50                   	push   eax
c00119d5:	e8 40 79 ff ff       	call   c000931a <Computer::readCMOS(unsigned char)>
c00119da:	83 c4 10             	add    esp,0x10
c00119dd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00119e1:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c00119e6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00119eb:	83 ec 04             	sub    esp,0x4
c00119ee:	6a 01                	push   0x1
c00119f0:	52                   	push   edx
c00119f1:	50                   	push   eax
c00119f2:	e8 49 7a ff ff       	call   c0009440 <Computer::writeCMOS(unsigned char, unsigned char)>
c00119f7:	83 c4 10             	add    esp,0x10
c00119fa:	90                   	nop
c00119fb:	83 c4 1c             	add    esp,0x1c
c00119fe:	c3                   	ret    
c00119ff:	90                   	nop

c0011a00 <ACPI::sleep()>:
c0011a00:	83 ec 0c             	sub    esp,0xc
c0011a03:	83 ec 0c             	sub    esp,0xc
c0011a06:	68 75 47 02 c0       	push   0xc0024775
c0011a0b:	e8 b5 b5 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0011a10:	83 c4 10             	add    esp,0x10
c0011a13:	a1 e0 99 02 c0       	mov    eax,ds:0xc00299e0
c0011a18:	85 c0                	test   eax,eax
c0011a1a:	74 18                	je     c0011a34 <ACPI::sleep()+0x34>
c0011a1c:	83 ec 0c             	sub    esp,0xc
c0011a1f:	68 82 47 02 c0       	push   0xc0024782
c0011a24:	e8 9c b5 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0011a29:	83 c4 10             	add    esp,0x10
c0011a2c:	a1 e0 99 02 c0       	mov    eax,ds:0xc00299e0
c0011a31:	ff d0                	call   eax
c0011a33:	90                   	nop
c0011a34:	90                   	nop
c0011a35:	83 c4 0c             	add    esp,0xc
c0011a38:	c3                   	ret    
c0011a39:	90                   	nop
c0011a3a:	66 90                	xchg   ax,ax

c0011a3c <ACPI::open(int, int, void*)>:
c0011a3c:	57                   	push   edi
c0011a3d:	56                   	push   esi
c0011a3e:	53                   	push   ebx
c0011a3f:	81 ec 70 01 00 00    	sub    esp,0x170
c0011a45:	83 ec 0c             	sub    esp,0xc
c0011a48:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0011a4f:	e8 80 fa ff ff       	call   c00114d4 <ACPI::detectPCI()>
c0011a54:	83 c4 10             	add    esp,0x10
c0011a57:	83 ec 0c             	sub    esp,0xc
c0011a5a:	68 e0 45 02 c0       	push   0xc00245e0
c0011a5f:	e8 ad 82 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011a64:	83 c4 10             	add    esp,0x10
c0011a67:	83 ec 0c             	sub    esp,0xc
c0011a6a:	68 9c 47 02 c0       	push   0xc002479c
c0011a6f:	e8 a1 45 00 00       	call   c0016015 <Thr::loadKernelSymbolTable(char const*)>
c0011a74:	83 c4 10             	add    esp,0x10
c0011a77:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c0011a7f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c0011a8a:	83 ec 0c             	sub    esp,0xc
c0011a8d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0011a94:	e8 1e 82 ff ff       	call   c0009cb7 <malloc>
c0011a99:	83 c4 10             	add    esp,0x10
c0011a9c:	89 c3                	mov    ebx,eax
c0011a9e:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0011aa3:	83 ec 04             	sub    esp,0x4
c0011aa6:	50                   	push   eax
c0011aa7:	68 ba 47 02 c0       	push   0xc00247ba
c0011aac:	53                   	push   ebx
c0011aad:	e8 7e ba ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0011ab2:	83 c4 10             	add    esp,0x10
c0011ab5:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0011abc:	83 ec 08             	sub    esp,0x8
c0011abf:	6a 01                	push   0x1
c0011ac1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0011ac8:	e8 3d bb ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0011acd:	83 c4 10             	add    esp,0x10
c0011ad0:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0011ad7:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0011adf:	75 17                	jne    c0011af8 <ACPI::open(int, int, void*)+0xbc>
c0011ae1:	83 ec 0c             	sub    esp,0xc
c0011ae4:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0011aeb:	e8 78 bb ff ff       	call   c000d668 <File::close()>
c0011af0:	83 c4 10             	add    esp,0x10
c0011af3:	eb 0b                	jmp    c0011b00 <ACPI::open(int, int, void*)+0xc4>
c0011af5:	8d 76 00             	lea    esi,[esi+0x0]
c0011af8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0011b00:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c0011b08:	74 1e                	je     c0011b28 <ACPI::open(int, int, void*)+0xec>
c0011b0a:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0011b11:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b13:	83 c0 08             	add    eax,0x8
c0011b16:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b18:	83 ec 0c             	sub    esp,0xc
c0011b1b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0011b22:	ff d0                	call   eax
c0011b24:	83 c4 10             	add    esp,0x10
c0011b27:	90                   	nop
c0011b28:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c0011b2f:	83 f0 01             	xor    eax,0x1
c0011b32:	84 c0                	test   al,al
c0011b34:	74 42                	je     c0011b78 <ACPI::open(int, int, void*)+0x13c>
c0011b36:	83 ec 0c             	sub    esp,0xc
c0011b39:	68 d8 47 02 c0       	push   0xc00247d8
c0011b3e:	e8 ce 81 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011b43:	83 c4 10             	add    esp,0x10
c0011b46:	83 ec 04             	sub    esp,0x4
c0011b49:	6a 0c                	push   0xc
c0011b4b:	68 f3 47 02 c0       	push   0xc00247f3
c0011b50:	68 04 48 02 c0       	push   0xc0024804
c0011b55:	e8 25 2b 00 00       	call   c001467f <Reg::readIntWithDefault(char*, char*, int)>
c0011b5a:	83 c4 10             	add    esp,0x10
c0011b5d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0011b64:	83 ec 0c             	sub    esp,0xc
c0011b67:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c0011b6e:	e8 00 a3 ff ff       	call   c000be73 <Virt::setupPageSwapping(int)>
c0011b73:	83 c4 10             	add    esp,0x10
c0011b76:	66 90                	xchg   ax,ax
c0011b78:	83 ec 0c             	sub    esp,0xc
c0011b7b:	68 e6 31 02 c0       	push   0xc00231e6
c0011b80:	e8 8c 81 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011b85:	83 c4 10             	add    esp,0x10
c0011b88:	8b 1d a8 73 02 c0    	mov    ebx,DWORD PTR ds:0xc00273a8
c0011b8e:	83 ec 08             	sub    esp,0x8
c0011b91:	6a 01                	push   0x1
c0011b93:	68 0b 48 02 c0       	push   0xc002480b
c0011b98:	e8 ef 4e 00 00       	call   c0016a8c <Thr::loadDLL(char const*, bool)>
c0011b9d:	83 c4 10             	add    esp,0x10
c0011ba0:	83 ec 08             	sub    esp,0x8
c0011ba3:	53                   	push   ebx
c0011ba4:	50                   	push   eax
c0011ba5:	e8 13 51 00 00       	call   c0016cbd <Thr::executeDLL(unsigned long, void*)>
c0011baa:	83 c4 10             	add    esp,0x10
c0011bad:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0011bb4:	83 ec 08             	sub    esp,0x8
c0011bb7:	6a 12                	push   0x12
c0011bb9:	50                   	push   eax
c0011bba:	e8 07 cc ff ff       	call   c000e7c6 <getDevicesOfType(DeviceType)>
c0011bbf:	83 c4 0c             	add    esp,0xc
c0011bc2:	66 90                	xchg   ax,ax
c0011bc4:	83 ec 0c             	sub    esp,0xc
c0011bc7:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011bce:	50                   	push   eax
c0011bcf:	e8 d8 09 01 00       	call   c00225ac <LinkedList<Device>::isEmpty()>
c0011bd4:	83 c4 10             	add    esp,0x10
c0011bd7:	83 f0 01             	xor    eax,0x1
c0011bda:	84 c0                	test   al,al
c0011bdc:	0f 84 46 01 00 00    	je     c0011d28 <ACPI::open(int, int, void*)+0x2ec>
c0011be2:	83 ec 0c             	sub    esp,0xc
c0011be5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011bec:	50                   	push   eax
c0011bed:	e8 d6 09 01 00       	call   c00225c8 <LinkedList<Device>::getFirstElement()>
c0011bf2:	83 c4 10             	add    esp,0x10
c0011bf5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0011bfc:	83 ec 0c             	sub    esp,0xc
c0011bff:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011c06:	50                   	push   eax
c0011c07:	e8 c4 09 01 00       	call   c00225d0 <LinkedList<Device>::removeFirst()>
c0011c0c:	83 c4 10             	add    esp,0x10
c0011c0f:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0011c16:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0011c1d:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0011c24:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c28:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0011c2e:	ba 09 00 00 00       	mov    edx,0x9
c0011c33:	fc                   	cld    
c0011c34:	89 c7                	mov    edi,eax
c0011c36:	89 de                	mov    esi,ebx
c0011c38:	89 d1                	mov    ecx,edx
c0011c3a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011c3c:	83 ec 08             	sub    esp,0x8
c0011c3f:	8d 44 24 38          	lea    eax,[esp+0x38]
c0011c43:	50                   	push   eax
c0011c44:	83 ec 24             	sub    esp,0x24
c0011c47:	89 e0                	mov    eax,esp
c0011c49:	89 c3                	mov    ebx,eax
c0011c4b:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0011c4f:	ba 09 00 00 00       	mov    edx,0x9
c0011c54:	89 df                	mov    edi,ebx
c0011c56:	89 c6                	mov    esi,eax
c0011c58:	89 d1                	mov    ecx,edx
c0011c5a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011c5c:	e8 9f bc 00 00       	call   c001d900 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0011c61:	83 c4 30             	add    esp,0x30
c0011c64:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0011c6b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0011c73:	0f 84 4b ff ff ff    	je     c0011bc4 <ACPI::open(int, int, void*)+0x188>
c0011c79:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0011c84:	83 ec 0c             	sub    esp,0xc
c0011c87:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0011c8e:	e8 24 80 ff ff       	call   c0009cb7 <malloc>
c0011c93:	83 c4 10             	add    esp,0x10
c0011c96:	89 c3                	mov    ebx,eax
c0011c98:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0011c9d:	83 ec 04             	sub    esp,0x4
c0011ca0:	50                   	push   eax
c0011ca1:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0011ca8:	53                   	push   ebx
c0011ca9:	e8 82 b8 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0011cae:	83 c4 10             	add    esp,0x10
c0011cb1:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0011cb8:	83 ec 0c             	sub    esp,0xc
c0011cbb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0011cc2:	e8 b1 bb ff ff       	call   c000d878 <File::exists()>
c0011cc7:	83 c4 10             	add    esp,0x10
c0011cca:	84 c0                	test   al,al
c0011ccc:	74 2a                	je     c0011cf8 <ACPI::open(int, int, void*)+0x2bc>
c0011cce:	83 ec 08             	sub    esp,0x8
c0011cd1:	6a 01                	push   0x1
c0011cd3:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0011cda:	e8 ad 4d 00 00       	call   c0016a8c <Thr::loadDLL(char const*, bool)>
c0011cdf:	83 c4 10             	add    esp,0x10
c0011ce2:	83 ec 08             	sub    esp,0x8
c0011ce5:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0011cec:	50                   	push   eax
c0011ced:	e8 cb 4f 00 00       	call   c0016cbd <Thr::executeDLL(unsigned long, void*)>
c0011cf2:	83 c4 10             	add    esp,0x10
c0011cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0011cf8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0011d00:	0f 84 be fe ff ff    	je     c0011bc4 <ACPI::open(int, int, void*)+0x188>
c0011d06:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0011d0d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d0f:	83 c0 08             	add    eax,0x8
c0011d12:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d14:	83 ec 0c             	sub    esp,0xc
c0011d17:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0011d1e:	ff d0                	call   eax
c0011d20:	83 c4 10             	add    esp,0x10
c0011d23:	e9 9c fe ff ff       	jmp    c0011bc4 <ACPI::open(int, int, void*)+0x188>
c0011d28:	83 ec 0c             	sub    esp,0xc
c0011d2b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0011d32:	50                   	push   eax
c0011d33:	e8 70 08 01 00       	call   c00225a8 <LinkedList<Device>::~LinkedList()>
c0011d38:	83 c4 10             	add    esp,0x10
c0011d3b:	8b 1d a8 73 02 c0    	mov    ebx,DWORD PTR ds:0xc00273a8
c0011d41:	83 ec 08             	sub    esp,0x8
c0011d44:	6a 01                	push   0x1
c0011d46:	68 26 48 02 c0       	push   0xc0024826
c0011d4b:	e8 3c 4d 00 00       	call   c0016a8c <Thr::loadDLL(char const*, bool)>
c0011d50:	83 c4 10             	add    esp,0x10
c0011d53:	83 ec 08             	sub    esp,0x8
c0011d56:	53                   	push   ebx
c0011d57:	50                   	push   eax
c0011d58:	e8 60 4f 00 00       	call   c0016cbd <Thr::executeDLL(unsigned long, void*)>
c0011d5d:	83 c4 10             	add    esp,0x10
c0011d60:	8b 1d a8 73 02 c0    	mov    ebx,DWORD PTR ds:0xc00273a8
c0011d66:	83 ec 08             	sub    esp,0x8
c0011d69:	6a 01                	push   0x1
c0011d6b:	68 43 48 02 c0       	push   0xc0024843
c0011d70:	e8 17 4d 00 00       	call   c0016a8c <Thr::loadDLL(char const*, bool)>
c0011d75:	83 c4 10             	add    esp,0x10
c0011d78:	83 ec 08             	sub    esp,0x8
c0011d7b:	53                   	push   ebx
c0011d7c:	50                   	push   eax
c0011d7d:	e8 3b 4f 00 00       	call   c0016cbd <Thr::executeDLL(unsigned long, void*)>
c0011d82:	83 c4 10             	add    esp,0x10
c0011d85:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0011d8a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011d90:	83 e0 04             	and    eax,0x4
c0011d93:	84 c0                	test   al,al
c0011d95:	0f 84 15 01 00 00    	je     c0011eb0 <ACPI::open(int, int, void*)+0x474>
c0011d9b:	83 ec 0c             	sub    esp,0xc
c0011d9e:	68 60 48 02 c0       	push   0xc0024860
c0011da3:	e8 69 7f ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0011da8:	83 c4 10             	add    esp,0x10
c0011dab:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0011db6:	83 ec 0c             	sub    esp,0xc
c0011db9:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0011dc0:	e8 f2 7e ff ff       	call   c0009cb7 <malloc>
c0011dc5:	83 c4 10             	add    esp,0x10
c0011dc8:	89 c3                	mov    ebx,eax
c0011dca:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0011dcf:	83 ec 04             	sub    esp,0x4
c0011dd2:	50                   	push   eax
c0011dd3:	68 7d 48 02 c0       	push   0xc002487d
c0011dd8:	53                   	push   ebx
c0011dd9:	e8 52 b7 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0011dde:	83 c4 10             	add    esp,0x10
c0011de1:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0011de8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011df0:	74 1a                	je     c0011e0c <ACPI::open(int, int, void*)+0x3d0>
c0011df2:	83 ec 0c             	sub    esp,0xc
c0011df5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0011dfc:	e8 77 ba ff ff       	call   c000d878 <File::exists()>
c0011e01:	83 c4 10             	add    esp,0x10
c0011e04:	84 c0                	test   al,al
c0011e06:	74 04                	je     c0011e0c <ACPI::open(int, int, void*)+0x3d0>
c0011e08:	b0 01                	mov    al,0x1
c0011e0a:	eb 04                	jmp    c0011e10 <ACPI::open(int, int, void*)+0x3d4>
c0011e0c:	b0 00                	mov    al,0x0
c0011e0e:	66 90                	xchg   ax,ax
c0011e10:	84 c0                	test   al,al
c0011e12:	74 28                	je     c0011e3c <ACPI::open(int, int, void*)+0x400>
c0011e14:	83 ec 08             	sub    esp,0x8
c0011e17:	6a 01                	push   0x1
c0011e19:	68 7d 48 02 c0       	push   0xc002487d
c0011e1e:	e8 69 4c 00 00       	call   c0016a8c <Thr::loadDLL(char const*, bool)>
c0011e23:	83 c4 10             	add    esp,0x10
c0011e26:	83 ec 08             	sub    esp,0x8
c0011e29:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0011e30:	50                   	push   eax
c0011e31:	e8 87 4e 00 00       	call   c0016cbd <Thr::executeDLL(unsigned long, void*)>
c0011e36:	83 c4 10             	add    esp,0x10
c0011e39:	8d 76 00             	lea    esi,[esi+0x0]
c0011e3c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011e44:	74 2a                	je     c0011e70 <ACPI::open(int, int, void*)+0x434>
c0011e46:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0011e4e:	74 20                	je     c0011e70 <ACPI::open(int, int, void*)+0x434>
c0011e50:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0011e57:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e59:	83 c0 08             	add    eax,0x8
c0011e5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e5e:	83 ec 0c             	sub    esp,0xc
c0011e61:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0011e68:	ff d0                	call   eax
c0011e6a:	83 c4 10             	add    esp,0x10
c0011e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0011e70:	a1 08 9c 02 c0       	mov    eax,ds:0xc0029c08
c0011e75:	83 ec 08             	sub    esp,0x8
c0011e78:	68 9a 48 02 c0       	push   0xc002489a
c0011e7d:	50                   	push   eax
c0011e7e:	e8 e1 ee ff ff       	call   c0010d64 <findDataTable(unsigned char*, char*)>
c0011e83:	83 c4 10             	add    esp,0x10
c0011e86:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0011e8d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0011e95:	74 19                	je     c0011eb0 <ACPI::open(int, int, void*)+0x474>
c0011e97:	83 ec 08             	sub    esp,0x8
c0011e9a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0011ea1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0011ea8:	e8 0b fb ff ff       	call   c00119b8 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0011ead:	83 c4 10             	add    esp,0x10
c0011eb0:	b8 00 00 00 00       	mov    eax,0x0
c0011eb5:	81 c4 70 01 00 00    	add    esp,0x170
c0011ebb:	5b                   	pop    ebx
c0011ebc:	5e                   	pop    esi
c0011ebd:	5f                   	pop    edi
c0011ebe:	c3                   	ret    
c0011ebf:	90                   	nop

c0011ec0 <CPU::close(int, int, void*)>:
c0011ec0:	31 c0                	xor    eax,eax
c0011ec2:	c3                   	ret    
c0011ec3:	90                   	nop

c0011ec4 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0011ec4:	55                   	push   ebp
c0011ec5:	57                   	push   edi
c0011ec6:	56                   	push   esi
c0011ec7:	53                   	push   ebx
c0011ec8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011ecc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011ed0:	89 ce                	mov    esi,ecx
c0011ed2:	89 d5                	mov    ebp,edx
c0011ed4:	80 f9 04             	cmp    cl,0x4
c0011ed7:	75 28                	jne    c0011f01 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0011ed9:	8d 42 f9             	lea    eax,[edx-0x7]
c0011edc:	3c 03                	cmp    al,0x3
c0011ede:	0f 86 63 01 00 00    	jbe    c0012047 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0011ee4:	80 fa 03             	cmp    dl,0x3
c0011ee7:	0f 84 5a 01 00 00    	je     c0012047 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0011eed:	8d 7a f2             	lea    edi,[edx-0xe]
c0011ef0:	b8 d0 69 02 c0       	mov    eax,0xc00269d0
c0011ef5:	89 fb                	mov    ebx,edi
c0011ef7:	80 fb 01             	cmp    bl,0x1
c0011efa:	77 4e                	ja     c0011f4a <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0011efc:	e9 52 01 00 00       	jmp    c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0011f01:	80 f9 05             	cmp    cl,0x5
c0011f04:	75 4d                	jne    c0011f53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0011f06:	b8 e0 69 02 c0       	mov    eax,0xc00269e0
c0011f0b:	80 fa 03             	cmp    dl,0x3
c0011f0e:	0f 86 3f 01 00 00    	jbe    c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0011f14:	8d 7a fa             	lea    edi,[edx-0x6]
c0011f17:	b8 f0 69 02 c0       	mov    eax,0xc00269f0
c0011f1c:	89 fb                	mov    ebx,edi
c0011f1e:	80 fb 01             	cmp    bl,0x1
c0011f21:	0f 86 2c 01 00 00    	jbe    c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0011f27:	b8 00 6a 02 c0       	mov    eax,0xc0026a00
c0011f2c:	80 fa 08             	cmp    dl,0x8
c0011f2f:	0f 84 1e 01 00 00    	je     c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0011f35:	89 d7                	mov    edi,edx
c0011f37:	b8 10 6a 02 c0       	mov    eax,0xc0026a10
c0011f3c:	83 e7 fb             	and    edi,0xfffffffb
c0011f3f:	89 fb                	mov    ebx,edi
c0011f41:	80 fb 09             	cmp    bl,0x9
c0011f44:	0f 84 09 01 00 00    	je     c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0011f4a:	31 c0                	xor    eax,eax
c0011f4c:	89 eb                	mov    ebx,ebp
c0011f4e:	0f b6 fb             	movzx  edi,bl
c0011f51:	eb 30                	jmp    c0011f83 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0011f53:	31 c0                	xor    eax,eax
c0011f55:	80 f9 06             	cmp    cl,0x6
c0011f58:	75 f2                	jne    c0011f4c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0011f5a:	80 fa 0a             	cmp    dl,0xa
c0011f5d:	77 ed                	ja     c0011f4c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0011f5f:	bf de 05 00 00       	mov    edi,0x5de
c0011f64:	0f a3 d7             	bt     edi,edx
c0011f67:	73 e3                	jae    c0011f4c <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0011f69:	b8 20 6a 02 c0       	mov    eax,0xc0026a20
c0011f6e:	e9 e0 00 00 00       	jmp    c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0011f73:	39 c7                	cmp    edi,eax
c0011f75:	0f 84 d3 00 00 00    	je     c001204e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0011f7b:	40                   	inc    eax
c0011f7c:	3d d0 00 00 00       	cmp    eax,0xd0
c0011f81:	74 09                	je     c0011f8c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0011f83:	89 f3                	mov    ebx,esi
c0011f85:	80 fb 0f             	cmp    bl,0xf
c0011f88:	75 f1                	jne    c0011f7b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0011f8a:	eb e7                	jmp    c0011f73 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0011f8c:	80 f9 10             	cmp    cl,0x10
c0011f8f:	75 14                	jne    c0011fa5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0011f91:	8d 42 fc             	lea    eax,[edx-0x4]
c0011f94:	83 e0 fb             	and    eax,0xfffffffb
c0011f97:	3c 02                	cmp    al,0x2
c0011f99:	76 34                	jbe    c0011fcf <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0011f9b:	b8 d5 4b 02 c0       	mov    eax,0xc0024bd5
c0011fa0:	80 fa 02             	cmp    dl,0x2
c0011fa3:	eb 24                	jmp    c0011fc9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0011fa5:	80 f9 11             	cmp    cl,0x11
c0011fa8:	75 13                	jne    c0011fbd <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0011faa:	b8 d5 4b 02 c0       	mov    eax,0xc0024bd5
c0011faf:	80 fa 03             	cmp    dl,0x3
c0011fb2:	0f 85 9b 00 00 00    	jne    c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0011fb8:	e9 91 00 00 00       	jmp    c001204e <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0011fbd:	80 f9 12             	cmp    cl,0x12
c0011fc0:	75 14                	jne    c0011fd6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0011fc2:	b8 d5 4b 02 c0       	mov    eax,0xc0024bd5
c0011fc7:	fe ca                	dec    dl
c0011fc9:	0f 85 84 00 00 00    	jne    c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0011fcf:	b8 40 6a 02 c0       	mov    eax,0xc0026a40
c0011fd4:	eb 7d                	jmp    c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0011fd6:	80 f9 14             	cmp    cl,0x14
c0011fd9:	75 12                	jne    c0011fed <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0011fdb:	4a                   	dec    edx
c0011fdc:	b8 d5 4b 02 c0       	mov    eax,0xc0024bd5
c0011fe1:	80 fa 01             	cmp    dl,0x1
c0011fe4:	77 6d                	ja     c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0011fe6:	b8 50 6a 02 c0       	mov    eax,0xc0026a50
c0011feb:	eb 66                	jmp    c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0011fed:	80 f9 15             	cmp    cl,0x15
c0011ff0:	75 31                	jne    c0012023 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0011ff2:	b8 60 6a 02 c0       	mov    eax,0xc0026a60
c0011ff7:	80 fa 01             	cmp    dl,0x1
c0011ffa:	74 57                	je     c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0011ffc:	b8 d5 4b 02 c0       	mov    eax,0xc0024bd5
c0012001:	80 fa 13             	cmp    dl,0x13
c0012004:	76 0c                	jbe    c0012012 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012006:	80 fa 30             	cmp    dl,0x30
c0012009:	75 48                	jne    c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001200b:	b8 80 6a 02 c0       	mov    eax,0xc0026a80
c0012010:	eb 41                	jmp    c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012012:	b9 04 00 09 00       	mov    ecx,0x90004
c0012017:	0f a3 d1             	bt     ecx,edx
c001201a:	73 37                	jae    c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001201c:	b8 70 6a 02 c0       	mov    eax,0xc0026a70
c0012021:	eb 30                	jmp    c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012023:	b8 d5 4b 02 c0       	mov    eax,0xc0024bd5
c0012028:	80 f9 16             	cmp    cl,0x16
c001202b:	75 26                	jne    c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001202d:	b8 90 6a 02 c0       	mov    eax,0xc0026a90
c0012032:	84 d2                	test   dl,dl
c0012034:	74 1d                	je     c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012036:	b8 d5 4b 02 c0       	mov    eax,0xc0024bd5
c001203b:	80 fa 30             	cmp    dl,0x30
c001203e:	75 13                	jne    c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012040:	b8 a0 6a 02 c0       	mov    eax,0xc0026aa0
c0012045:	eb 0c                	jmp    c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012047:	b8 c0 69 02 c0       	mov    eax,0xc00269c0
c001204c:	eb 05                	jmp    c0012053 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001204e:	b8 30 6a 02 c0       	mov    eax,0xc0026a30
c0012053:	5b                   	pop    ebx
c0012054:	5e                   	pop    esi
c0012055:	5f                   	pop    edi
c0012056:	5d                   	pop    ebp
c0012057:	c3                   	ret    

c0012058 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012058:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001205c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012060:	80 f9 04             	cmp    cl,0x4
c0012063:	75 6b                	jne    c00120d0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012065:	b8 20 68 02 c0       	mov    eax,0xc0026820
c001206a:	80 fa 01             	cmp    dl,0x1
c001206d:	0f 86 92 02 00 00    	jbe    c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012073:	b8 30 68 02 c0       	mov    eax,0xc0026830
c0012078:	80 fa 02             	cmp    dl,0x2
c001207b:	0f 84 84 02 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012081:	b8 40 68 02 c0       	mov    eax,0xc0026840
c0012086:	80 fa 03             	cmp    dl,0x3
c0012089:	0f 84 76 02 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001208f:	b8 50 68 02 c0       	mov    eax,0xc0026850
c0012094:	80 fa 04             	cmp    dl,0x4
c0012097:	0f 84 68 02 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001209d:	b8 60 68 02 c0       	mov    eax,0xc0026860
c00120a2:	80 fa 05             	cmp    dl,0x5
c00120a5:	0f 84 5a 02 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00120ab:	b8 40 68 02 c0       	mov    eax,0xc0026840
c00120b0:	80 fa 07             	cmp    dl,0x7
c00120b3:	0f 84 4c 02 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00120b9:	83 ea 08             	sub    edx,0x8
c00120bc:	b8 d5 4b 02 c0       	mov    eax,0xc0024bd5
c00120c1:	80 fa 01             	cmp    dl,0x1
c00120c4:	0f 87 3b 02 00 00    	ja     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00120ca:	b8 70 68 02 c0       	mov    eax,0xc0026870
c00120cf:	c3                   	ret    
c00120d0:	80 f9 05             	cmp    cl,0x5
c00120d3:	75 45                	jne    c001211a <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00120d5:	8d 4a ff             	lea    ecx,[edx-0x1]
c00120d8:	b8 80 68 02 c0       	mov    eax,0xc0026880
c00120dd:	80 f9 02             	cmp    cl,0x2
c00120e0:	0f 86 1f 02 00 00    	jbe    c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00120e6:	80 fa 04             	cmp    dl,0x4
c00120e9:	0f 84 f3 01 00 00    	je     c00122e2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00120ef:	80 fa 07             	cmp    dl,0x7
c00120f2:	0f 84 0d 02 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00120f8:	b8 90 68 02 c0       	mov    eax,0xc0026890
c00120fd:	80 fa 08             	cmp    dl,0x8
c0012100:	0f 84 ff 01 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012106:	b8 d5 4b 02 c0       	mov    eax,0xc0024bd5
c001210b:	80 fa 09             	cmp    dl,0x9
c001210e:	0f 85 f1 01 00 00    	jne    c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012114:	b8 a0 68 02 c0       	mov    eax,0xc00268a0
c0012119:	c3                   	ret    
c001211a:	80 f9 06             	cmp    cl,0x6
c001211d:	0f 85 85 01 00 00    	jne    c00122a8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012123:	b8 b0 68 02 c0       	mov    eax,0xc00268b0
c0012128:	80 fa 01             	cmp    dl,0x1
c001212b:	0f 84 d4 01 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012131:	8d 42 fb             	lea    eax,[edx-0x5]
c0012134:	3c 01                	cmp    al,0x1
c0012136:	0f 86 ac 01 00 00    	jbe    c00122e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001213c:	80 fa 03             	cmp    dl,0x3
c001213f:	0f 84 a3 01 00 00    	je     c00122e8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012145:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012148:	b8 d0 68 02 c0       	mov    eax,0xc00268d0
c001214d:	80 f9 01             	cmp    cl,0x1
c0012150:	0f 86 af 01 00 00    	jbe    c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012156:	80 fa 09             	cmp    dl,0x9
c0012159:	0f 84 8f 01 00 00    	je     c00122ee <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001215f:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012162:	80 f9 01             	cmp    cl,0x1
c0012165:	0f 86 9a 01 00 00    	jbe    c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001216b:	b8 e0 68 02 c0       	mov    eax,0xc00268e0
c0012170:	80 fa 0d             	cmp    dl,0xd
c0012173:	0f 84 8c 01 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012179:	b8 f0 68 02 c0       	mov    eax,0xc00268f0
c001217e:	80 fa 0e             	cmp    dl,0xe
c0012181:	0f 84 7e 01 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012187:	b8 00 69 02 c0       	mov    eax,0xc0026900
c001218c:	80 fa 0f             	cmp    dl,0xf
c001218f:	0f 84 70 01 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012195:	b8 e0 68 02 c0       	mov    eax,0xc00268e0
c001219a:	80 fa 15             	cmp    dl,0x15
c001219d:	0f 84 62 01 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00121a3:	8d 4a ea             	lea    ecx,[edx-0x16]
c00121a6:	b8 00 69 02 c0       	mov    eax,0xc0026900
c00121ab:	80 f9 01             	cmp    cl,0x1
c00121ae:	0f 86 51 01 00 00    	jbe    c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00121b4:	80 fa 1a             	cmp    dl,0x1a
c00121b7:	0f 84 37 01 00 00    	je     c00122f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c00121bd:	80 fa 1c             	cmp    dl,0x1c
c00121c0:	0f 84 34 01 00 00    	je     c00122fa <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00121c6:	80 fa 1d             	cmp    dl,0x1d
c00121c9:	0f 84 36 01 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00121cf:	b8 30 69 02 c0       	mov    eax,0xc0026930
c00121d4:	80 fa 25             	cmp    dl,0x25
c00121d7:	0f 84 28 01 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00121dd:	8d 4a da             	lea    ecx,[edx-0x26]
c00121e0:	b8 20 69 02 c0       	mov    eax,0xc0026920
c00121e5:	80 f9 01             	cmp    cl,0x1
c00121e8:	0f 86 17 01 00 00    	jbe    c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00121ee:	b8 40 69 02 c0       	mov    eax,0xc0026940
c00121f3:	80 fa 2a             	cmp    dl,0x2a
c00121f6:	0f 84 09 01 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00121fc:	b8 30 69 02 c0       	mov    eax,0xc0026930
c0012201:	80 fa 2c             	cmp    dl,0x2c
c0012204:	0f 84 fb 00 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001220a:	b8 40 69 02 c0       	mov    eax,0xc0026940
c001220f:	80 fa 2d             	cmp    dl,0x2d
c0012212:	0f 84 ed 00 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012218:	b8 10 69 02 c0       	mov    eax,0xc0026910
c001221d:	80 fa 2e             	cmp    dl,0x2e
c0012220:	0f 84 df 00 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012226:	b8 30 69 02 c0       	mov    eax,0xc0026930
c001222b:	80 fa 2f             	cmp    dl,0x2f
c001222e:	0f 84 d1 00 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012234:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012237:	b8 20 69 02 c0       	mov    eax,0xc0026920
c001223c:	80 f9 01             	cmp    cl,0x1
c001223f:	0f 86 c0 00 00 00    	jbe    c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012245:	b8 50 69 02 c0       	mov    eax,0xc0026950
c001224a:	80 fa 37             	cmp    dl,0x37
c001224d:	0f 84 b2 00 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012253:	b8 60 69 02 c0       	mov    eax,0xc0026960
c0012258:	80 fa 3a             	cmp    dl,0x3a
c001225b:	0f 84 a4 00 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012261:	b8 70 69 02 c0       	mov    eax,0xc0026970
c0012266:	80 fa 3c             	cmp    dl,0x3c
c0012269:	0f 84 96 00 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001226f:	b8 80 69 02 c0       	mov    eax,0xc0026980
c0012274:	80 fa 3d             	cmp    dl,0x3d
c0012277:	0f 84 88 00 00 00    	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001227d:	b8 60 69 02 c0       	mov    eax,0xc0026960
c0012282:	80 fa 3e             	cmp    dl,0x3e
c0012285:	74 7e                	je     c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012287:	8d 42 bb             	lea    eax,[edx-0x45]
c001228a:	3c 01                	cmp    al,0x1
c001228c:	76 72                	jbe    c0012300 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001228e:	80 fa 3f             	cmp    dl,0x3f
c0012291:	74 6d                	je     c0012300 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012293:	80 fa 4a             	cmp    dl,0x4a
c0012296:	74 0a                	je     c00122a2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012298:	b8 d5 4b 02 c0       	mov    eax,0xc0024bd5
c001229d:	80 fa 4d             	cmp    dl,0x4d
c00122a0:	75 63                	jne    c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00122a2:	b8 50 69 02 c0       	mov    eax,0xc0026950
c00122a7:	c3                   	ret    
c00122a8:	b8 d5 4b 02 c0       	mov    eax,0xc0024bd5
c00122ad:	80 f9 0b             	cmp    cl,0xb
c00122b0:	75 0a                	jne    c00122bc <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c00122b2:	fe ca                	dec    dl
c00122b4:	75 4f                	jne    c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00122b6:	b8 90 69 02 c0       	mov    eax,0xc0026990
c00122bb:	c3                   	ret    
c00122bc:	80 f9 0f             	cmp    cl,0xf
c00122bf:	75 44                	jne    c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00122c1:	b8 a0 69 02 c0       	mov    eax,0xc00269a0
c00122c6:	80 fa 02             	cmp    dl,0x2
c00122c9:	76 3a                	jbe    c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00122cb:	8d 42 fd             	lea    eax,[edx-0x3]
c00122ce:	3c 01                	cmp    al,0x1
c00122d0:	76 0a                	jbe    c00122dc <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00122d2:	b8 d5 4b 02 c0       	mov    eax,0xc0024bd5
c00122d7:	80 fa 06             	cmp    dl,0x6
c00122da:	75 29                	jne    c0012305 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00122dc:	b8 b0 69 02 c0       	mov    eax,0xc00269b0
c00122e1:	c3                   	ret    
c00122e2:	b8 90 68 02 c0       	mov    eax,0xc0026890
c00122e7:	c3                   	ret    
c00122e8:	b8 c0 68 02 c0       	mov    eax,0xc00268c0
c00122ed:	c3                   	ret    
c00122ee:	b8 e0 68 02 c0       	mov    eax,0xc00268e0
c00122f3:	c3                   	ret    
c00122f4:	b8 10 69 02 c0       	mov    eax,0xc0026910
c00122f9:	c3                   	ret    
c00122fa:	b8 20 69 02 c0       	mov    eax,0xc0026920
c00122ff:	c3                   	ret    
c0012300:	b8 70 69 02 c0       	mov    eax,0xc0026970
c0012305:	c3                   	ret    

c0012306 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012306:	60                   	pusha  
c0012307:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001230b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001230f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012313:	9c                   	pushf  
c0012314:	fa                   	cli    
c0012315:	0f 09                	wbinvd 
c0012317:	0f 30                	wrmsr  
c0012319:	9d                   	popf   
c001231a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001231e:	89 02                	mov    DWORD PTR [edx],eax
c0012320:	61                   	popa   
c0012321:	c3                   	ret    

c0012322 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0012322:	60                   	pusha  
c0012323:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012327:	9c                   	pushf  
c0012328:	fa                   	cli    
c0012329:	0f 09                	wbinvd 
c001232b:	31 c0                	xor    eax,eax
c001232d:	31 d2                	xor    edx,edx
c001232f:	0f 32                	rdmsr  
c0012331:	9d                   	popf   
c0012332:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012336:	89 02                	mov    DWORD PTR [edx],eax
c0012338:	61                   	popa   
c0012339:	c3                   	ret    

c001233a <CPU::AMD_K6_writeback(int, int, int)>:
c001233a:	56                   	push   esi
c001233b:	53                   	push   ebx
c001233c:	83 ec 10             	sub    esp,0x10
c001233f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012343:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0012348:	75 5d                	jne    c00123a7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001234a:	83 f8 08             	cmp    eax,0x8
c001234d:	75 09                	jne    c0012358 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001234f:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012354:	7e 13                	jle    c0012369 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012356:	eb 30                	jmp    c0012388 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012358:	83 f8 06             	cmp    eax,0x6
c001235b:	7c 4a                	jl     c00123a7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001235d:	83 f8 07             	cmp    eax,0x7
c0012360:	7e 07                	jle    c0012369 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012362:	83 f8 09             	cmp    eax,0x9
c0012365:	74 21                	je     c0012388 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012367:	eb 3e                	jmp    c00123a7 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012369:	89 e6                	mov    esi,esp
c001236b:	8b 1d cc 73 02 c0    	mov    ebx,DWORD PTR ds:0xc00273cc
c0012371:	56                   	push   esi
c0012372:	c1 eb 15             	shr    ebx,0x15
c0012375:	68 82 00 00 c0       	push   0xc0000082
c001237a:	83 e3 7e             	and    ebx,0x7e
c001237d:	e8 a0 ff ff ff       	call   c0012322 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012382:	56                   	push   esi
c0012383:	6a 00                	push   0x0
c0012385:	53                   	push   ebx
c0012386:	eb 12                	jmp    c001239a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0012388:	89 e3                	mov    ebx,esp
c001238a:	53                   	push   ebx
c001238b:	68 82 00 00 c0       	push   0xc0000082
c0012390:	e8 8d ff ff ff       	call   c0012322 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012395:	53                   	push   ebx
c0012396:	6a 00                	push   0x0
c0012398:	6a 00                	push   0x0
c001239a:	68 82 00 00 c0       	push   0xc0000082
c001239f:	e8 62 ff ff ff       	call   c0012306 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00123a4:	83 c4 18             	add    esp,0x18
c00123a7:	83 c4 10             	add    esp,0x10
c00123aa:	5b                   	pop    ebx
c00123ab:	5e                   	pop    esi
c00123ac:	c3                   	ret    
c00123ad:	90                   	nop

c00123ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00123ae:	55                   	push   ebp
c00123af:	57                   	push   edi
c00123b0:	56                   	push   esi
c00123b1:	53                   	push   ebx
c00123b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123b6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00123ba:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00123be:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00123c2:	39 05 c0 6a 02 c0    	cmp    DWORD PTR ds:0xc0026ac0,eax
c00123c8:	75 23                	jne    c00123ed <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00123ca:	a1 6c 9e 02 c0       	mov    eax,ds:0xc0029e6c
c00123cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00123d3:	89 06                	mov    DWORD PTR [esi],eax
c00123d5:	a1 68 9e 02 c0       	mov    eax,ds:0xc0029e68
c00123da:	89 07                	mov    DWORD PTR [edi],eax
c00123dc:	a1 64 9e 02 c0       	mov    eax,ds:0xc0029e64
c00123e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00123e4:	a1 60 9e 02 c0       	mov    eax,ds:0xc0029e60
c00123e9:	89 02                	mov    DWORD PTR [edx],eax
c00123eb:	eb 3f                	jmp    c001242c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00123ed:	31 c9                	xor    ecx,ecx
c00123ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123f3:	0f a2                	cpuid  
c00123f5:	89 06                	mov    DWORD PTR [esi],eax
c00123f7:	89 1f                	mov    DWORD PTR [edi],ebx
c00123f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00123fd:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0012400:	89 10                	mov    DWORD PTR [eax],edx
c0012402:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012406:	a3 c0 6a 02 c0       	mov    ds:0xc0026ac0,eax
c001240b:	8b 06                	mov    eax,DWORD PTR [esi]
c001240d:	a3 6c 9e 02 c0       	mov    ds:0xc0029e6c,eax
c0012412:	8b 07                	mov    eax,DWORD PTR [edi]
c0012414:	a3 68 9e 02 c0       	mov    ds:0xc0029e68,eax
c0012419:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001241c:	a3 64 9e 02 c0       	mov    ds:0xc0029e64,eax
c0012421:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012425:	8b 00                	mov    eax,DWORD PTR [eax]
c0012427:	a3 60 9e 02 c0       	mov    ds:0xc0029e60,eax
c001242c:	5b                   	pop    ebx
c001242d:	5e                   	pop    esi
c001242e:	5f                   	pop    edi
c001242f:	5d                   	pop    ebp
c0012430:	c3                   	ret    
c0012431:	90                   	nop

c0012432 <CPU::cpuidCheckEDX(unsigned int)>:
c0012432:	83 ec 10             	sub    esp,0x10
c0012435:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012439:	50                   	push   eax
c001243a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001243e:	50                   	push   eax
c001243f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012443:	50                   	push   eax
c0012444:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012448:	50                   	push   eax
c0012449:	6a 01                	push   0x1
c001244b:	e8 5e ff ff ff       	call   c00123ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012450:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012454:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0012458:	0f 95 c0             	setne  al
c001245b:	83 c4 24             	add    esp,0x24
c001245e:	c3                   	ret    
c001245f:	90                   	nop

c0012460 <CPU::cpuidCheckECX(unsigned int)>:
c0012460:	83 ec 10             	sub    esp,0x10
c0012463:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012467:	50                   	push   eax
c0012468:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001246c:	50                   	push   eax
c001246d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012471:	50                   	push   eax
c0012472:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012476:	50                   	push   eax
c0012477:	6a 01                	push   0x1
c0012479:	e8 30 ff ff ff       	call   c00123ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001247e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012482:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012486:	0f 95 c0             	setne  al
c0012489:	83 c4 24             	add    esp,0x24
c001248c:	c3                   	ret    
c001248d:	90                   	nop

c001248e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001248e:	83 ec 10             	sub    esp,0x10
c0012491:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012495:	50                   	push   eax
c0012496:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001249a:	50                   	push   eax
c001249b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001249f:	50                   	push   eax
c00124a0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00124a4:	50                   	push   eax
c00124a5:	6a 07                	push   0x7
c00124a7:	e8 02 ff ff ff       	call   c00123ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00124ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124b0:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00124b4:	0f 95 c0             	setne  al
c00124b7:	83 c4 24             	add    esp,0x24
c00124ba:	c3                   	ret    
c00124bb:	90                   	nop

c00124bc <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00124bc:	83 ec 10             	sub    esp,0x10
c00124bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00124c3:	50                   	push   eax
c00124c4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00124c8:	50                   	push   eax
c00124c9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00124cd:	50                   	push   eax
c00124ce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00124d2:	50                   	push   eax
c00124d3:	6a 07                	push   0x7
c00124d5:	e8 d4 fe ff ff       	call   c00123ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00124da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00124de:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00124e2:	0f 95 c0             	setne  al
c00124e5:	83 c4 24             	add    esp,0x24
c00124e8:	c3                   	ret    
c00124e9:	90                   	nop

c00124ea <CPU::CPU()>:
c00124ea:	83 ec 0c             	sub    esp,0xc
c00124ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124f1:	83 ec 08             	sub    esp,0x8
c00124f4:	68 d5 4b 02 c0       	push   0xc0024bd5
c00124f9:	50                   	push   eax
c00124fa:	e8 47 c1 ff ff       	call   c000e646 <Device::Device(char const*)>
c00124ff:	83 c4 10             	add    esp,0x10
c0012502:	ba 28 4e 02 c0       	mov    edx,0xc0024e28
c0012507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001250b:	89 10                	mov    DWORD PTR [eax],edx
c001250d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012511:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001251b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001251f:	05 78 01 00 00       	add    eax,0x178
c0012524:	83 ec 0c             	sub    esp,0xc
c0012527:	50                   	push   eax
c0012528:	e8 fd 6f ff ff       	call   c000952a <GDT::GDT()>
c001252d:	83 c4 10             	add    esp,0x10
c0012530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012534:	05 7c 09 00 00       	add    eax,0x97c
c0012539:	83 ec 0c             	sub    esp,0xc
c001253c:	50                   	push   eax
c001253d:	e8 62 72 ff ff       	call   c00097a4 <IDT::IDT()>
c0012542:	83 c4 10             	add    esp,0x10
c0012545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012549:	05 7c 11 00 00       	add    eax,0x117c
c001254e:	83 ec 0c             	sub    esp,0xc
c0012551:	50                   	push   eax
c0012552:	e8 55 90 ff ff       	call   c000b5ac <TSS::TSS()>
c0012557:	83 c4 10             	add    esp,0x10
c001255a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001255e:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0012565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012569:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012573:	90                   	nop
c0012574:	83 c4 0c             	add    esp,0xc
c0012577:	c3                   	ret    

c0012578 <CPU::displayFeatures()>:
c0012578:	53                   	push   ebx
c0012579:	83 ec 10             	sub    esp,0x10
c001257c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012580:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0012586:	68 cc 48 02 c0       	push   0xc00248cc
c001258b:	e8 35 aa ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012590:	58                   	pop    eax
c0012591:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0012597:	5a                   	pop    edx
c0012598:	50                   	push   eax
c0012599:	68 dd 48 02 c0       	push   0xc00248dd
c001259e:	e8 22 aa ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00125a3:	59                   	pop    ecx
c00125a4:	58                   	pop    eax
c00125a5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00125ab:	c1 e8 0e             	shr    eax,0xe
c00125ae:	0f b6 c0             	movzx  eax,al
c00125b1:	50                   	push   eax
c00125b2:	68 ee 48 02 c0       	push   0xc00248ee
c00125b7:	e8 09 aa ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00125bc:	58                   	pop    eax
c00125bd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00125c3:	5a                   	pop    edx
c00125c4:	66 c1 e8 06          	shr    ax,0x6
c00125c8:	0f b6 c0             	movzx  eax,al
c00125cb:	50                   	push   eax
c00125cc:	68 ff 48 02 c0       	push   0xc00248ff
c00125d1:	e8 ef a9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00125d6:	c7 04 24 ef 4e 02 c0 	mov    DWORD PTR [esp],0xc0024eef
c00125dd:	e8 e3 a9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00125e2:	83 c4 10             	add    esp,0x10
c00125e5:	b8 65 32 02 c0       	mov    eax,0xc0023265
c00125ea:	f6 83 8c 11 00 00 01 	test   BYTE PTR [ebx+0x118c],0x1
c00125f1:	74 05                	je     c00125f8 <CPU::displayFeatures()+0x80>
c00125f3:	b8 61 32 02 c0       	mov    eax,0xc0023261
c00125f8:	51                   	push   ecx
c00125f9:	51                   	push   ecx
c00125fa:	50                   	push   eax
c00125fb:	68 10 49 02 c0       	push   0xc0024910
c0012600:	e8 c0 a9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012605:	83 c4 10             	add    esp,0x10
c0012608:	b8 61 32 02 c0       	mov    eax,0xc0023261
c001260d:	80 bb 8c 11 00 00 00 	cmp    BYTE PTR [ebx+0x118c],0x0
c0012614:	78 05                	js     c001261b <CPU::displayFeatures()+0xa3>
c0012616:	b8 65 32 02 c0       	mov    eax,0xc0023265
c001261b:	52                   	push   edx
c001261c:	52                   	push   edx
c001261d:	50                   	push   eax
c001261e:	68 27 49 02 c0       	push   0xc0024927
c0012623:	e8 9d a9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012628:	83 c4 10             	add    esp,0x10
c001262b:	b8 61 32 02 c0       	mov    eax,0xc0023261
c0012630:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0012637:	75 05                	jne    c001263e <CPU::displayFeatures()+0xc6>
c0012639:	b8 65 32 02 c0       	mov    eax,0xc0023265
c001263e:	51                   	push   ecx
c001263f:	51                   	push   ecx
c0012640:	50                   	push   eax
c0012641:	68 3e 49 02 c0       	push   0xc002493e
c0012646:	e8 7a a9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001264b:	83 c4 10             	add    esp,0x10
c001264e:	b8 61 32 02 c0       	mov    eax,0xc0023261
c0012653:	f6 83 8c 11 00 00 04 	test   BYTE PTR [ebx+0x118c],0x4
c001265a:	75 05                	jne    c0012661 <CPU::displayFeatures()+0xe9>
c001265c:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0012661:	52                   	push   edx
c0012662:	52                   	push   edx
c0012663:	50                   	push   eax
c0012664:	68 55 49 02 c0       	push   0xc0024955
c0012669:	e8 57 a9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001266e:	83 c4 10             	add    esp,0x10
c0012671:	b8 61 32 02 c0       	mov    eax,0xc0023261
c0012676:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001267d:	75 05                	jne    c0012684 <CPU::displayFeatures()+0x10c>
c001267f:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0012684:	51                   	push   ecx
c0012685:	51                   	push   ecx
c0012686:	50                   	push   eax
c0012687:	68 6c 49 02 c0       	push   0xc002496c
c001268c:	e8 34 a9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012691:	83 c4 10             	add    esp,0x10
c0012694:	b8 61 32 02 c0       	mov    eax,0xc0023261
c0012699:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00126a0:	75 05                	jne    c00126a7 <CPU::displayFeatures()+0x12f>
c00126a2:	b8 65 32 02 c0       	mov    eax,0xc0023265
c00126a7:	52                   	push   edx
c00126a8:	52                   	push   edx
c00126a9:	50                   	push   eax
c00126aa:	68 83 49 02 c0       	push   0xc0024983
c00126af:	e8 11 a9 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00126b4:	83 c4 10             	add    esp,0x10
c00126b7:	b8 61 32 02 c0       	mov    eax,0xc0023261
c00126bc:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c00126c3:	75 05                	jne    c00126ca <CPU::displayFeatures()+0x152>
c00126c5:	b8 65 32 02 c0       	mov    eax,0xc0023265
c00126ca:	51                   	push   ecx
c00126cb:	51                   	push   ecx
c00126cc:	50                   	push   eax
c00126cd:	68 9a 49 02 c0       	push   0xc002499a
c00126d2:	e8 ee a8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00126d7:	83 c4 10             	add    esp,0x10
c00126da:	b8 61 32 02 c0       	mov    eax,0xc0023261
c00126df:	f6 83 8c 11 00 00 40 	test   BYTE PTR [ebx+0x118c],0x40
c00126e6:	75 05                	jne    c00126ed <CPU::displayFeatures()+0x175>
c00126e8:	b8 65 32 02 c0       	mov    eax,0xc0023265
c00126ed:	52                   	push   edx
c00126ee:	52                   	push   edx
c00126ef:	50                   	push   eax
c00126f0:	68 b1 49 02 c0       	push   0xc00249b1
c00126f5:	e8 cb a8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00126fa:	83 c4 10             	add    esp,0x10
c00126fd:	b8 61 32 02 c0       	mov    eax,0xc0023261
c0012702:	f6 83 8d 11 00 00 10 	test   BYTE PTR [ebx+0x118d],0x10
c0012709:	75 05                	jne    c0012710 <CPU::displayFeatures()+0x198>
c001270b:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0012710:	51                   	push   ecx
c0012711:	51                   	push   ecx
c0012712:	50                   	push   eax
c0012713:	68 c8 49 02 c0       	push   0xc00249c8
c0012718:	e8 a8 a8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001271d:	83 c4 10             	add    esp,0x10
c0012720:	b8 61 32 02 c0       	mov    eax,0xc0023261
c0012725:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001272c:	75 05                	jne    c0012733 <CPU::displayFeatures()+0x1bb>
c001272e:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0012733:	52                   	push   edx
c0012734:	52                   	push   edx
c0012735:	50                   	push   eax
c0012736:	68 df 49 02 c0       	push   0xc00249df
c001273b:	e8 85 a8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012740:	83 c4 10             	add    esp,0x10
c0012743:	b8 61 32 02 c0       	mov    eax,0xc0023261
c0012748:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001274f:	75 05                	jne    c0012756 <CPU::displayFeatures()+0x1de>
c0012751:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0012756:	51                   	push   ecx
c0012757:	51                   	push   ecx
c0012758:	50                   	push   eax
c0012759:	68 f6 49 02 c0       	push   0xc00249f6
c001275e:	e8 62 a8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012763:	83 c4 10             	add    esp,0x10
c0012766:	b8 61 32 02 c0       	mov    eax,0xc0023261
c001276b:	f6 83 8d 11 00 00 20 	test   BYTE PTR [ebx+0x118d],0x20
c0012772:	75 05                	jne    c0012779 <CPU::displayFeatures()+0x201>
c0012774:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0012779:	52                   	push   edx
c001277a:	52                   	push   edx
c001277b:	50                   	push   eax
c001277c:	68 0d 4a 02 c0       	push   0xc0024a0d
c0012781:	e8 3f a8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012786:	83 c4 10             	add    esp,0x10
c0012789:	b8 61 32 02 c0       	mov    eax,0xc0023261
c001278e:	f6 83 8d 11 00 00 40 	test   BYTE PTR [ebx+0x118d],0x40
c0012795:	75 05                	jne    c001279c <CPU::displayFeatures()+0x224>
c0012797:	b8 65 32 02 c0       	mov    eax,0xc0023265
c001279c:	51                   	push   ecx
c001279d:	51                   	push   ecx
c001279e:	50                   	push   eax
c001279f:	68 24 4a 02 c0       	push   0xc0024a24
c00127a4:	e8 1c a8 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00127a9:	83 c4 10             	add    esp,0x10
c00127ac:	b8 61 32 02 c0       	mov    eax,0xc0023261
c00127b1:	80 bb 8d 11 00 00 00 	cmp    BYTE PTR [ebx+0x118d],0x0
c00127b8:	78 05                	js     c00127bf <CPU::displayFeatures()+0x247>
c00127ba:	b8 65 32 02 c0       	mov    eax,0xc0023265
c00127bf:	52                   	push   edx
c00127c0:	52                   	push   edx
c00127c1:	50                   	push   eax
c00127c2:	68 3b 4a 02 c0       	push   0xc0024a3b
c00127c7:	e8 f9 a7 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00127cc:	83 c4 10             	add    esp,0x10
c00127cf:	b8 61 32 02 c0       	mov    eax,0xc0023261
c00127d4:	f6 83 8e 11 00 00 04 	test   BYTE PTR [ebx+0x118e],0x4
c00127db:	75 05                	jne    c00127e2 <CPU::displayFeatures()+0x26a>
c00127dd:	b8 65 32 02 c0       	mov    eax,0xc0023265
c00127e2:	51                   	push   ecx
c00127e3:	51                   	push   ecx
c00127e4:	50                   	push   eax
c00127e5:	68 52 4a 02 c0       	push   0xc0024a52
c00127ea:	e8 d6 a7 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00127ef:	83 c4 10             	add    esp,0x10
c00127f2:	b8 61 32 02 c0       	mov    eax,0xc0023261
c00127f7:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00127fe:	75 05                	jne    c0012805 <CPU::displayFeatures()+0x28d>
c0012800:	b8 65 32 02 c0       	mov    eax,0xc0023265
c0012805:	52                   	push   edx
c0012806:	52                   	push   edx
c0012807:	50                   	push   eax
c0012808:	68 69 4a 02 c0       	push   0xc0024a69
c001280d:	e8 b3 a7 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0012812:	83 c4 18             	add    esp,0x18
c0012815:	5b                   	pop    ebx
c0012816:	c3                   	ret    
c0012817:	90                   	nop

c0012818 <CPU::detectFeatures()>:
c0012818:	55                   	push   ebp
c0012819:	57                   	push   edi
c001281a:	56                   	push   esi
c001281b:	53                   	push   ebx
c001281c:	83 ec 50             	sub    esp,0x50
c001281f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0012823:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001282d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0012834:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001283a:	6a 0d                	push   0xd
c001283c:	6a 00                	push   0x0
c001283e:	55                   	push   ebp
c001283f:	e8 38 de fe ff       	call   c000067c <memset>
c0012844:	83 c4 10             	add    esp,0x10
c0012847:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c001284c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012853:	0f 84 22 09 00 00    	je     c001317b <CPU::detectFeatures()+0x963>
c0012859:	83 ec 0c             	sub    esp,0xc
c001285c:	89 ef                	mov    edi,ebp
c001285e:	6a 10                	push   0x10
c0012860:	e8 cd fb ff ff       	call   c0012432 <CPU::cpuidCheckEDX(unsigned int)>
c0012865:	83 e0 01             	and    eax,0x1
c0012868:	8d 14 00             	lea    edx,[eax+eax*1]
c001286b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0012871:	83 e0 fd             	and    eax,0xfffffffd
c0012874:	09 d0                	or     eax,edx
c0012876:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001287c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0012883:	e8 aa fb ff ff       	call   c0012432 <CPU::cpuidCheckEDX(unsigned int)>
c0012888:	83 e0 01             	and    eax,0x1
c001288b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012892:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0012898:	83 e0 fb             	and    eax,0xfffffffb
c001289b:	09 d0                	or     eax,edx
c001289d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00128a3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00128aa:	e8 83 fb ff ff       	call   c0012432 <CPU::cpuidCheckEDX(unsigned int)>
c00128af:	83 e0 01             	and    eax,0x1
c00128b2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00128b9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00128bf:	83 e0 f7             	and    eax,0xfffffff7
c00128c2:	09 d0                	or     eax,edx
c00128c4:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00128ca:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00128d1:	e8 5c fb ff ff       	call   c0012432 <CPU::cpuidCheckEDX(unsigned int)>
c00128d6:	83 e0 01             	and    eax,0x1
c00128d9:	c1 e0 04             	shl    eax,0x4
c00128dc:	88 c2                	mov    dl,al
c00128de:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00128e4:	83 e0 ef             	and    eax,0xffffffef
c00128e7:	09 d0                	or     eax,edx
c00128e9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00128ef:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00128f6:	e8 37 fb ff ff       	call   c0012432 <CPU::cpuidCheckEDX(unsigned int)>
c00128fb:	83 e0 01             	and    eax,0x1
c00128fe:	c1 e0 05             	shl    eax,0x5
c0012901:	88 c2                	mov    dl,al
c0012903:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0012909:	83 e0 df             	and    eax,0xffffffdf
c001290c:	09 d0                	or     eax,edx
c001290e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0012914:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001291b:	e8 12 fb ff ff       	call   c0012432 <CPU::cpuidCheckEDX(unsigned int)>
c0012920:	83 e0 01             	and    eax,0x1
c0012923:	8d 14 00             	lea    edx,[eax+eax*1]
c0012926:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001292c:	83 e0 fd             	and    eax,0xfffffffd
c001292f:	09 d0                	or     eax,edx
c0012931:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0012937:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001293e:	e8 ef fa ff ff       	call   c0012432 <CPU::cpuidCheckEDX(unsigned int)>
c0012943:	83 e0 01             	and    eax,0x1
c0012946:	c1 e0 06             	shl    eax,0x6
c0012949:	88 c2                	mov    dl,al
c001294b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0012951:	83 e0 bf             	and    eax,0xffffffbf
c0012954:	09 d0                	or     eax,edx
c0012956:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001295c:	58                   	pop    eax
c001295d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012961:	50                   	push   eax
c0012962:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012966:	50                   	push   eax
c0012967:	8d 74 24 28          	lea    esi,[esp+0x28]
c001296b:	56                   	push   esi
c001296c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012970:	50                   	push   eax
c0012971:	6a 00                	push   0x0
c0012973:	e8 36 fa ff ff       	call   c00123ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012978:	b8 04 00 00 00       	mov    eax,0x4
c001297d:	89 c1                	mov    ecx,eax
c001297f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012981:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0012987:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001298b:	89 c1                	mov    ecx,eax
c001298d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001298f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0012995:	8d 74 24 38          	lea    esi,[esp+0x38]
c0012999:	89 c1                	mov    ecx,eax
c001299b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001299d:	83 c4 18             	add    esp,0x18
c00129a0:	68 80 4a 02 c0       	push   0xc0024a80
c00129a5:	55                   	push   ebp
c00129a6:	e8 19 de fe ff       	call   c00007c4 <strcmp>
c00129ab:	83 c4 10             	add    esp,0x10
c00129ae:	85 c0                	test   eax,eax
c00129b0:	75 0f                	jne    c00129c1 <CPU::detectFeatures()+0x1a9>
c00129b2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00129bc:	e9 22 02 00 00       	jmp    c0012be3 <CPU::detectFeatures()+0x3cb>
c00129c1:	50                   	push   eax
c00129c2:	50                   	push   eax
c00129c3:	68 8d 4a 02 c0       	push   0xc0024a8d
c00129c8:	55                   	push   ebp
c00129c9:	e8 f6 dd fe ff       	call   c00007c4 <strcmp>
c00129ce:	83 c4 10             	add    esp,0x10
c00129d1:	85 c0                	test   eax,eax
c00129d3:	74 dd                	je     c00129b2 <CPU::detectFeatures()+0x19a>
c00129d5:	50                   	push   eax
c00129d6:	50                   	push   eax
c00129d7:	68 9a 4a 02 c0       	push   0xc0024a9a
c00129dc:	55                   	push   ebp
c00129dd:	e8 e2 dd fe ff       	call   c00007c4 <strcmp>
c00129e2:	83 c4 10             	add    esp,0x10
c00129e5:	85 c0                	test   eax,eax
c00129e7:	74 2a                	je     c0012a13 <CPU::detectFeatures()+0x1fb>
c00129e9:	50                   	push   eax
c00129ea:	50                   	push   eax
c00129eb:	68 a7 4a 02 c0       	push   0xc0024aa7
c00129f0:	55                   	push   ebp
c00129f1:	e8 ce dd fe ff       	call   c00007c4 <strcmp>
c00129f6:	83 c4 10             	add    esp,0x10
c00129f9:	85 c0                	test   eax,eax
c00129fb:	74 16                	je     c0012a13 <CPU::detectFeatures()+0x1fb>
c00129fd:	50                   	push   eax
c00129fe:	50                   	push   eax
c00129ff:	68 b4 4a 02 c0       	push   0xc0024ab4
c0012a04:	55                   	push   ebp
c0012a05:	e8 ba dd fe ff       	call   c00007c4 <strcmp>
c0012a0a:	83 c4 10             	add    esp,0x10
c0012a0d:	85 c0                	test   eax,eax
c0012a0f:	74 48                	je     c0012a59 <CPU::detectFeatures()+0x241>
c0012a11:	eb 0f                	jmp    c0012a22 <CPU::detectFeatures()+0x20a>
c0012a13:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0012a1d:	e9 c1 01 00 00       	jmp    c0012be3 <CPU::detectFeatures()+0x3cb>
c0012a22:	50                   	push   eax
c0012a23:	50                   	push   eax
c0012a24:	68 c1 4a 02 c0       	push   0xc0024ac1
c0012a29:	55                   	push   ebp
c0012a2a:	e8 95 dd fe ff       	call   c00007c4 <strcmp>
c0012a2f:	83 c4 10             	add    esp,0x10
c0012a32:	85 c0                	test   eax,eax
c0012a34:	74 23                	je     c0012a59 <CPU::detectFeatures()+0x241>
c0012a36:	57                   	push   edi
c0012a37:	57                   	push   edi
c0012a38:	68 ce 4a 02 c0       	push   0xc0024ace
c0012a3d:	55                   	push   ebp
c0012a3e:	e8 81 dd fe ff       	call   c00007c4 <strcmp>
c0012a43:	83 c4 10             	add    esp,0x10
c0012a46:	85 c0                	test   eax,eax
c0012a48:	75 1e                	jne    c0012a68 <CPU::detectFeatures()+0x250>
c0012a4a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0012a54:	e9 8a 01 00 00       	jmp    c0012be3 <CPU::detectFeatures()+0x3cb>
c0012a59:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0012a63:	e9 7b 01 00 00       	jmp    c0012be3 <CPU::detectFeatures()+0x3cb>
c0012a68:	56                   	push   esi
c0012a69:	56                   	push   esi
c0012a6a:	68 db 4a 02 c0       	push   0xc0024adb
c0012a6f:	55                   	push   ebp
c0012a70:	e8 4f dd fe ff       	call   c00007c4 <strcmp>
c0012a75:	83 c4 10             	add    esp,0x10
c0012a78:	85 c0                	test   eax,eax
c0012a7a:	75 0f                	jne    c0012a8b <CPU::detectFeatures()+0x273>
c0012a7c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0012a86:	e9 58 01 00 00       	jmp    c0012be3 <CPU::detectFeatures()+0x3cb>
c0012a8b:	51                   	push   ecx
c0012a8c:	51                   	push   ecx
c0012a8d:	68 9a 4a 02 c0       	push   0xc0024a9a
c0012a92:	55                   	push   ebp
c0012a93:	e8 2c dd fe ff       	call   c00007c4 <strcmp>
c0012a98:	83 c4 10             	add    esp,0x10
c0012a9b:	85 c0                	test   eax,eax
c0012a9d:	75 0f                	jne    c0012aae <CPU::detectFeatures()+0x296>
c0012a9f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0012aa9:	e9 35 01 00 00       	jmp    c0012be3 <CPU::detectFeatures()+0x3cb>
c0012aae:	52                   	push   edx
c0012aaf:	52                   	push   edx
c0012ab0:	68 e8 4a 02 c0       	push   0xc0024ae8
c0012ab5:	55                   	push   ebp
c0012ab6:	e8 09 dd fe ff       	call   c00007c4 <strcmp>
c0012abb:	83 c4 10             	add    esp,0x10
c0012abe:	85 c0                	test   eax,eax
c0012ac0:	75 0f                	jne    c0012ad1 <CPU::detectFeatures()+0x2b9>
c0012ac2:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0012acc:	e9 12 01 00 00       	jmp    c0012be3 <CPU::detectFeatures()+0x3cb>
c0012ad1:	50                   	push   eax
c0012ad2:	50                   	push   eax
c0012ad3:	68 f5 4a 02 c0       	push   0xc0024af5
c0012ad8:	55                   	push   ebp
c0012ad9:	e8 e6 dc fe ff       	call   c00007c4 <strcmp>
c0012ade:	83 c4 10             	add    esp,0x10
c0012ae1:	85 c0                	test   eax,eax
c0012ae3:	75 0f                	jne    c0012af4 <CPU::detectFeatures()+0x2dc>
c0012ae5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0012aef:	e9 ef 00 00 00       	jmp    c0012be3 <CPU::detectFeatures()+0x3cb>
c0012af4:	50                   	push   eax
c0012af5:	50                   	push   eax
c0012af6:	68 02 4b 02 c0       	push   0xc0024b02
c0012afb:	55                   	push   ebp
c0012afc:	e8 c3 dc fe ff       	call   c00007c4 <strcmp>
c0012b01:	83 c4 10             	add    esp,0x10
c0012b04:	85 c0                	test   eax,eax
c0012b06:	75 0f                	jne    c0012b17 <CPU::detectFeatures()+0x2ff>
c0012b08:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0012b12:	e9 cc 00 00 00       	jmp    c0012be3 <CPU::detectFeatures()+0x3cb>
c0012b17:	50                   	push   eax
c0012b18:	50                   	push   eax
c0012b19:	68 0f 4b 02 c0       	push   0xc0024b0f
c0012b1e:	55                   	push   ebp
c0012b1f:	e8 a0 dc fe ff       	call   c00007c4 <strcmp>
c0012b24:	83 c4 10             	add    esp,0x10
c0012b27:	85 c0                	test   eax,eax
c0012b29:	75 0f                	jne    c0012b3a <CPU::detectFeatures()+0x322>
c0012b2b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0012b35:	e9 a9 00 00 00       	jmp    c0012be3 <CPU::detectFeatures()+0x3cb>
c0012b3a:	50                   	push   eax
c0012b3b:	50                   	push   eax
c0012b3c:	68 1c 4b 02 c0       	push   0xc0024b1c
c0012b41:	55                   	push   ebp
c0012b42:	e8 7d dc fe ff       	call   c00007c4 <strcmp>
c0012b47:	83 c4 10             	add    esp,0x10
c0012b4a:	85 c0                	test   eax,eax
c0012b4c:	75 0f                	jne    c0012b5d <CPU::detectFeatures()+0x345>
c0012b4e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0012b58:	e9 86 00 00 00       	jmp    c0012be3 <CPU::detectFeatures()+0x3cb>
c0012b5d:	50                   	push   eax
c0012b5e:	50                   	push   eax
c0012b5f:	68 29 4b 02 c0       	push   0xc0024b29
c0012b64:	55                   	push   ebp
c0012b65:	e8 5a dc fe ff       	call   c00007c4 <strcmp>
c0012b6a:	83 c4 10             	add    esp,0x10
c0012b6d:	85 c0                	test   eax,eax
c0012b6f:	75 0c                	jne    c0012b7d <CPU::detectFeatures()+0x365>
c0012b71:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0012b7b:	eb 66                	jmp    c0012be3 <CPU::detectFeatures()+0x3cb>
c0012b7d:	50                   	push   eax
c0012b7e:	50                   	push   eax
c0012b7f:	68 36 4b 02 c0       	push   0xc0024b36
c0012b84:	55                   	push   ebp
c0012b85:	e8 3a dc fe ff       	call   c00007c4 <strcmp>
c0012b8a:	83 c4 10             	add    esp,0x10
c0012b8d:	85 c0                	test   eax,eax
c0012b8f:	75 0c                	jne    c0012b9d <CPU::detectFeatures()+0x385>
c0012b91:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0012b9b:	eb 46                	jmp    c0012be3 <CPU::detectFeatures()+0x3cb>
c0012b9d:	57                   	push   edi
c0012b9e:	57                   	push   edi
c0012b9f:	68 43 4b 02 c0       	push   0xc0024b43
c0012ba4:	55                   	push   ebp
c0012ba5:	e8 1a dc fe ff       	call   c00007c4 <strcmp>
c0012baa:	83 c4 10             	add    esp,0x10
c0012bad:	85 c0                	test   eax,eax
c0012baf:	74 e0                	je     c0012b91 <CPU::detectFeatures()+0x379>
c0012bb1:	56                   	push   esi
c0012bb2:	56                   	push   esi
c0012bb3:	68 50 4b 02 c0       	push   0xc0024b50
c0012bb8:	55                   	push   ebp
c0012bb9:	e8 06 dc fe ff       	call   c00007c4 <strcmp>
c0012bbe:	83 c4 10             	add    esp,0x10
c0012bc1:	85 c0                	test   eax,eax
c0012bc3:	74 cc                	je     c0012b91 <CPU::detectFeatures()+0x379>
c0012bc5:	51                   	push   ecx
c0012bc6:	51                   	push   ecx
c0012bc7:	68 5d 4b 02 c0       	push   0xc0024b5d
c0012bcc:	55                   	push   ebp
c0012bcd:	e8 f2 db fe ff       	call   c00007c4 <strcmp>
c0012bd2:	83 c4 10             	add    esp,0x10
c0012bd5:	85 c0                	test   eax,eax
c0012bd7:	74 b8                	je     c0012b91 <CPU::detectFeatures()+0x379>
c0012bd9:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0012be3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0012be8:	0f 86 be 00 00 00    	jbe    c0012cac <CPU::detectFeatures()+0x494>
c0012bee:	83 ec 0c             	sub    esp,0xc
c0012bf1:	68 80 00 00 00       	push   0x80
c0012bf6:	e8 93 f8 ff ff       	call   c001248e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0012bfb:	83 e0 01             	and    eax,0x1
c0012bfe:	c1 e0 06             	shl    eax,0x6
c0012c01:	88 c2                	mov    dl,al
c0012c03:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0012c09:	83 e0 bf             	and    eax,0xffffffbf
c0012c0c:	09 d0                	or     eax,edx
c0012c0e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0012c14:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0012c1b:	e8 6e f8 ff ff       	call   c001248e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0012c20:	83 e0 01             	and    eax,0x1
c0012c23:	c1 e0 04             	shl    eax,0x4
c0012c26:	88 c2                	mov    dl,al
c0012c28:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0012c2e:	83 e0 ef             	and    eax,0xffffffef
c0012c31:	09 d0                	or     eax,edx
c0012c33:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0012c39:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0012c40:	e8 49 f8 ff ff       	call   c001248e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0012c45:	c1 e0 07             	shl    eax,0x7
c0012c48:	88 c2                	mov    dl,al
c0012c4a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0012c50:	83 e0 7f             	and    eax,0x7f
c0012c53:	09 d0                	or     eax,edx
c0012c55:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0012c5b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0012c62:	e8 55 f8 ff ff       	call   c00124bc <CPU::cpuidCheckExtendedECX(unsigned int)>
c0012c67:	83 e0 01             	and    eax,0x1
c0012c6a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012c71:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0012c77:	83 e0 f7             	and    eax,0xfffffff7
c0012c7a:	09 d0                	or     eax,edx
c0012c7c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0012c82:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0012c89:	e8 2e f8 ff ff       	call   c00124bc <CPU::cpuidCheckExtendedECX(unsigned int)>
c0012c8e:	83 c4 10             	add    esp,0x10
c0012c91:	83 e0 01             	and    eax,0x1
c0012c94:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012c9b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0012ca1:	83 e0 fb             	and    eax,0xfffffffb
c0012ca4:	09 d0                	or     eax,edx
c0012ca6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0012cac:	83 ec 0c             	sub    esp,0xc
c0012caf:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012cb3:	50                   	push   eax
c0012cb4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012cb8:	50                   	push   eax
c0012cb9:	8d 74 24 28          	lea    esi,[esp+0x28]
c0012cbd:	56                   	push   esi
c0012cbe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012cc2:	50                   	push   eax
c0012cc3:	6a 01                	push   0x1
c0012cc5:	e8 e4 f6 ff ff       	call   c00123ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012cca:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012cce:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0012cd4:	88 ca                	mov    dl,cl
c0012cd6:	83 e0 f0             	and    eax,0xfffffff0
c0012cd9:	83 e2 0f             	and    edx,0xf
c0012cdc:	09 d0                	or     eax,edx
c0012cde:	88 ca                	mov    dl,cl
c0012ce0:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0012ce6:	c0 ea 04             	shr    dl,0x4
c0012ce9:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0012ced:	0f b6 c2             	movzx  eax,dl
c0012cf0:	83 c4 20             	add    esp,0x20
c0012cf3:	c1 e0 06             	shl    eax,0x6
c0012cf6:	89 c7                	mov    edi,eax
c0012cf8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012cfe:	66 25 3f c0          	and    ax,0xc03f
c0012d02:	09 f8                	or     eax,edi
c0012d04:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0012d0b:	89 c8                	mov    eax,ecx
c0012d0d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0012d14:	c1 e8 08             	shr    eax,0x8
c0012d17:	83 e5 3f             	and    ebp,0x3f
c0012d1a:	83 e0 0f             	and    eax,0xf
c0012d1d:	89 c7                	mov    edi,eax
c0012d1f:	c1 e7 06             	shl    edi,0x6
c0012d22:	09 ef                	or     edi,ebp
c0012d24:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0012d2b:	89 fa                	mov    edx,edi
c0012d2d:	83 e5 c0             	and    ebp,0xffffffc0
c0012d30:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0012d36:	88 c2                	mov    dl,al
c0012d38:	c0 ea 02             	shr    dl,0x2
c0012d3b:	89 d7                	mov    edi,edx
c0012d3d:	09 ef                	or     edi,ebp
c0012d3f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0012d45:	89 fa                	mov    edx,edi
c0012d47:	83 e5 cf             	and    ebp,0xffffffcf
c0012d4a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0012d50:	89 cf                	mov    edi,ecx
c0012d52:	c1 ef 0c             	shr    edi,0xc
c0012d55:	83 e7 03             	and    edi,0x3
c0012d58:	c1 e7 04             	shl    edi,0x4
c0012d5b:	09 ef                	or     edi,ebp
c0012d5d:	3c 06                	cmp    al,0x6
c0012d5f:	89 fa                	mov    edx,edi
c0012d61:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0012d67:	74 04                	je     c0012d6d <CPU::detectFeatures()+0x555>
c0012d69:	3c 0f                	cmp    al,0xf
c0012d6b:	75 5c                	jne    c0012dc9 <CPU::detectFeatures()+0x5b1>
c0012d6d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012d71:	89 cf                	mov    edi,ecx
c0012d73:	c1 ef 10             	shr    edi,0x10
c0012d76:	c1 e7 04             	shl    edi,0x4
c0012d79:	09 fa                	or     edx,edi
c0012d7b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0012d81:	0f b6 d2             	movzx  edx,dl
c0012d84:	66 81 e7 3f c0       	and    di,0xc03f
c0012d89:	c1 e2 06             	shl    edx,0x6
c0012d8c:	09 fa                	or     edx,edi
c0012d8e:	3c 0f                	cmp    al,0xf
c0012d90:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0012d97:	75 30                	jne    c0012dc9 <CPU::detectFeatures()+0x5b1>
c0012d99:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0012d9f:	c1 e9 14             	shr    ecx,0x14
c0012da2:	83 e0 3f             	and    eax,0x3f
c0012da5:	83 c1 0f             	add    ecx,0xf
c0012da8:	88 ca                	mov    dl,cl
c0012daa:	c0 e9 02             	shr    cl,0x2
c0012dad:	c1 e2 06             	shl    edx,0x6
c0012db0:	09 d0                	or     eax,edx
c0012db2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0012db8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0012dbe:	83 e0 c0             	and    eax,0xffffffc0
c0012dc1:	09 c1                	or     ecx,eax
c0012dc3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0012dc9:	83 ec 0c             	sub    esp,0xc
c0012dcc:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c0012dd3:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012dd7:	50                   	push   eax
c0012dd8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0012ddc:	55                   	push   ebp
c0012ddd:	56                   	push   esi
c0012dde:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0012de2:	57                   	push   edi
c0012de3:	68 00 00 00 80       	push   0x80000000
c0012de8:	e8 c1 f5 ff ff       	call   c00123ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012ded:	83 c4 20             	add    esp,0x20
c0012df0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0012df8:	76 22                	jbe    c0012e1c <CPU::detectFeatures()+0x604>
c0012dfa:	83 ec 0c             	sub    esp,0xc
c0012dfd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012e01:	50                   	push   eax
c0012e02:	55                   	push   ebp
c0012e03:	56                   	push   esi
c0012e04:	57                   	push   edi
c0012e05:	68 01 00 00 80       	push   0x80000001
c0012e0a:	e8 9f f5 ff ff       	call   c00123ae <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012e0f:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0012e19:	83 c4 20             	add    esp,0x20
c0012e1c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0012e22:	83 f8 01             	cmp    eax,0x1
c0012e25:	75 6f                	jne    c0012e96 <CPU::detectFeatures()+0x67e>
c0012e27:	51                   	push   ecx
c0012e28:	51                   	push   ecx
c0012e29:	68 69 4b 02 c0       	push   0xc0024b69
c0012e2e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012e32:	56                   	push   esi
c0012e33:	e8 00 d9 fe ff       	call   c0000738 <strcpy>
c0012e38:	5f                   	pop    edi
c0012e39:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012e3f:	5d                   	pop    ebp
c0012e40:	66 c1 e8 06          	shr    ax,0x6
c0012e44:	0f b6 c0             	movzx  eax,al
c0012e47:	50                   	push   eax
c0012e48:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012e4e:	c1 e8 0e             	shr    eax,0xe
c0012e51:	0f b6 c0             	movzx  eax,al
c0012e54:	50                   	push   eax
c0012e55:	e8 fe f1 ff ff       	call   c0012058 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0012e5a:	5a                   	pop    edx
c0012e5b:	59                   	pop    ecx
c0012e5c:	50                   	push   eax
c0012e5d:	56                   	push   esi
c0012e5e:	e8 15 da fe ff       	call   c0000878 <strcat>
c0012e63:	5f                   	pop    edi
c0012e64:	5d                   	pop    ebp
c0012e65:	56                   	push   esi
c0012e66:	53                   	push   ebx
c0012e67:	e8 cc b7 ff ff       	call   c000e638 <Device::setName(char const*)>
c0012e6c:	58                   	pop    eax
c0012e6d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0012e73:	5a                   	pop    edx
c0012e74:	68 70 4b 02 c0       	push   0xc0024b70
c0012e79:	50                   	push   eax
c0012e7a:	e8 45 d9 fe ff       	call   c00007c4 <strcmp>
c0012e7f:	83 c4 10             	add    esp,0x10
c0012e82:	85 c0                	test   eax,eax
c0012e84:	0f 85 71 03 00 00    	jne    c00131fb <CPU::detectFeatures()+0x9e3>
c0012e8a:	80 a3 8d 11 00 00 3f 	and    BYTE PTR [ebx+0x118d],0x3f
c0012e91:	e9 65 03 00 00       	jmp    c00131fb <CPU::detectFeatures()+0x9e3>
c0012e96:	83 f8 02             	cmp    eax,0x2
c0012e99:	0f 85 b5 00 00 00    	jne    c0012f54 <CPU::detectFeatures()+0x73c>
c0012e9f:	57                   	push   edi
c0012ea0:	57                   	push   edi
c0012ea1:	68 82 4b 02 c0       	push   0xc0024b82
c0012ea6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0012eaa:	56                   	push   esi
c0012eab:	e8 88 d8 fe ff       	call   c0000738 <strcpy>
c0012eb0:	5d                   	pop    ebp
c0012eb1:	58                   	pop    eax
c0012eb2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012eb8:	66 c1 e8 06          	shr    ax,0x6
c0012ebc:	0f b6 c0             	movzx  eax,al
c0012ebf:	50                   	push   eax
c0012ec0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012ec6:	c1 e8 0e             	shr    eax,0xe
c0012ec9:	0f b6 c0             	movzx  eax,al
c0012ecc:	50                   	push   eax
c0012ecd:	e8 f2 ef ff ff       	call   c0011ec4 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0012ed2:	5a                   	pop    edx
c0012ed3:	59                   	pop    ecx
c0012ed4:	50                   	push   eax
c0012ed5:	56                   	push   esi
c0012ed6:	e8 9d d9 fe ff       	call   c0000878 <strcat>
c0012edb:	5f                   	pop    edi
c0012edc:	5d                   	pop    ebp
c0012edd:	56                   	push   esi
c0012ede:	53                   	push   ebx
c0012edf:	e8 54 b7 ff ff       	call   c000e638 <Device::setName(char const*)>
c0012ee4:	58                   	pop    eax
c0012ee5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0012eeb:	5a                   	pop    edx
c0012eec:	68 87 4b 02 c0       	push   0xc0024b87
c0012ef1:	50                   	push   eax
c0012ef2:	e8 cd d8 fe ff       	call   c00007c4 <strcmp>
c0012ef7:	83 c4 10             	add    esp,0x10
c0012efa:	85 c0                	test   eax,eax
c0012efc:	75 20                	jne    c0012f1e <CPU::detectFeatures()+0x706>
c0012efe:	8b 15 a8 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273a8
c0012f04:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0012f0a:	a8 01                	test   al,0x1
c0012f0c:	74 10                	je     c0012f1e <CPU::detectFeatures()+0x706>
c0012f0e:	83 e0 fe             	and    eax,0xfffffffe
c0012f11:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0012f17:	80 8b 8c 11 00 00 10 	or     BYTE PTR [ebx+0x118c],0x10
c0012f1e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012f24:	c1 e8 0e             	shr    eax,0xe
c0012f27:	3c 05                	cmp    al,0x5
c0012f29:	0f 85 cc 02 00 00    	jne    c00131fb <CPU::detectFeatures()+0x9e3>
c0012f2f:	56                   	push   esi
c0012f30:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0012f36:	83 e0 0f             	and    eax,0xf
c0012f39:	50                   	push   eax
c0012f3a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012f40:	66 c1 e8 06          	shr    ax,0x6
c0012f44:	0f b6 c0             	movzx  eax,al
c0012f47:	50                   	push   eax
c0012f48:	6a 05                	push   0x5
c0012f4a:	e8 eb f3 ff ff       	call   c001233a <CPU::AMD_K6_writeback(int, int, int)>
c0012f4f:	e9 1f 02 00 00       	jmp    c0013173 <CPU::detectFeatures()+0x95b>
c0012f54:	8d 50 fd             	lea    edx,[eax-0x3]
c0012f57:	83 fa 01             	cmp    edx,0x1
c0012f5a:	76 09                	jbe    c0012f65 <CPU::detectFeatures()+0x74d>
c0012f5c:	83 f8 06             	cmp    eax,0x6
c0012f5f:	0f 85 91 01 00 00    	jne    c00130f6 <CPU::detectFeatures()+0x8de>
c0012f65:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0012f6b:	c1 ea 0e             	shr    edx,0xe
c0012f6e:	80 fa 05             	cmp    dl,0x5
c0012f71:	75 7b                	jne    c0012fee <CPU::detectFeatures()+0x7d6>
c0012f73:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0012f79:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0012f7e:	66 81 fa 00 01       	cmp    dx,0x100
c0012f83:	75 0c                	jne    c0012f91 <CPU::detectFeatures()+0x779>
c0012f85:	51                   	push   ecx
c0012f86:	51                   	push   ecx
c0012f87:	68 8e 4b 02 c0       	push   0xc0024b8e
c0012f8c:	e9 dc 01 00 00       	jmp    c001316d <CPU::detectFeatures()+0x955>
c0012f91:	66 81 fa 00 02       	cmp    dx,0x200
c0012f96:	75 0c                	jne    c0012fa4 <CPU::detectFeatures()+0x78c>
c0012f98:	52                   	push   edx
c0012f99:	52                   	push   edx
c0012f9a:	68 a1 4b 02 c0       	push   0xc0024ba1
c0012f9f:	e9 c9 01 00 00       	jmp    c001316d <CPU::detectFeatures()+0x955>
c0012fa4:	66 81 fa 40 02       	cmp    dx,0x240
c0012fa9:	75 0c                	jne    c0012fb7 <CPU::detectFeatures()+0x79f>
c0012fab:	50                   	push   eax
c0012fac:	50                   	push   eax
c0012fad:	68 b3 4b 02 c0       	push   0xc0024bb3
c0012fb2:	e9 b6 01 00 00       	jmp    c001316d <CPU::detectFeatures()+0x955>
c0012fb7:	83 f8 06             	cmp    eax,0x6
c0012fba:	75 0c                	jne    c0012fc8 <CPU::detectFeatures()+0x7b0>
c0012fbc:	50                   	push   eax
c0012fbd:	50                   	push   eax
c0012fbe:	68 c5 4b 02 c0       	push   0xc0024bc5
c0012fc3:	e9 a5 01 00 00       	jmp    c001316d <CPU::detectFeatures()+0x955>
c0012fc8:	83 f8 04             	cmp    eax,0x4
c0012fcb:	75 0c                	jne    c0012fd9 <CPU::detectFeatures()+0x7c1>
c0012fcd:	50                   	push   eax
c0012fce:	50                   	push   eax
c0012fcf:	68 d1 4b 02 c0       	push   0xc0024bd1
c0012fd4:	e9 94 01 00 00       	jmp    c001316d <CPU::detectFeatures()+0x955>
c0012fd9:	83 f8 03             	cmp    eax,0x3
c0012fdc:	0f 85 19 02 00 00    	jne    c00131fb <CPU::detectFeatures()+0x9e3>
c0012fe2:	50                   	push   eax
c0012fe3:	50                   	push   eax
c0012fe4:	68 d9 4b 02 c0       	push   0xc0024bd9
c0012fe9:	e9 7f 01 00 00       	jmp    c001316d <CPU::detectFeatures()+0x955>
c0012fee:	80 fa 06             	cmp    dl,0x6
c0012ff1:	0f 85 db 00 00 00    	jne    c00130d2 <CPU::detectFeatures()+0x8ba>
c0012ff7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0012ffd:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013002:	66 81 fa 80 01       	cmp    dx,0x180
c0013007:	75 0c                	jne    c0013015 <CPU::detectFeatures()+0x7fd>
c0013009:	50                   	push   eax
c001300a:	50                   	push   eax
c001300b:	68 e4 4b 02 c0       	push   0xc0024be4
c0013010:	e9 58 01 00 00       	jmp    c001316d <CPU::detectFeatures()+0x955>
c0013015:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001301b:	66 f7 c1 80 ff       	test   cx,0xff80
c0013020:	75 0c                	jne    c001302e <CPU::detectFeatures()+0x816>
c0013022:	50                   	push   eax
c0013023:	50                   	push   eax
c0013024:	68 f4 4b 02 c0       	push   0xc0024bf4
c0013029:	e9 3f 01 00 00       	jmp    c001316d <CPU::detectFeatures()+0x955>
c001302e:	66 81 fa 40 02       	cmp    dx,0x240
c0013033:	75 0c                	jne    c0013041 <CPU::detectFeatures()+0x829>
c0013035:	55                   	push   ebp
c0013036:	55                   	push   ebp
c0013037:	68 fb 4b 02 c0       	push   0xc0024bfb
c001303c:	e9 2c 01 00 00       	jmp    c001316d <CPU::detectFeatures()+0x955>
c0013041:	66 81 fa 80 02       	cmp    dx,0x280
c0013046:	75 0c                	jne    c0013054 <CPU::detectFeatures()+0x83c>
c0013048:	57                   	push   edi
c0013049:	57                   	push   edi
c001304a:	68 04 4c 02 c0       	push   0xc0024c04
c001304f:	e9 19 01 00 00       	jmp    c001316d <CPU::detectFeatures()+0x955>
c0013054:	66 81 fa 40 03       	cmp    dx,0x340
c0013059:	74 ed                	je     c0013048 <CPU::detectFeatures()+0x830>
c001305b:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013060:	75 0c                	jne    c001306e <CPU::detectFeatures()+0x856>
c0013062:	56                   	push   esi
c0013063:	56                   	push   esi
c0013064:	68 0b 4c 02 c0       	push   0xc0024c0b
c0013069:	e9 ff 00 00 00       	jmp    c001316d <CPU::detectFeatures()+0x955>
c001306e:	83 f8 06             	cmp    eax,0x6
c0013071:	0f 84 45 ff ff ff    	je     c0012fbc <CPU::detectFeatures()+0x7a4>
c0013077:	83 f8 04             	cmp    eax,0x4
c001307a:	0f 84 4d ff ff ff    	je     c0012fcd <CPU::detectFeatures()+0x7b5>
c0013080:	83 f8 03             	cmp    eax,0x3
c0013083:	0f 85 72 01 00 00    	jne    c00131fb <CPU::detectFeatures()+0x9e3>
c0013089:	51                   	push   ecx
c001308a:	51                   	push   ecx
c001308b:	68 14 4c 02 c0       	push   0xc0024c14
c0013090:	53                   	push   ebx
c0013091:	e8 a2 b5 ff ff       	call   c000e638 <Device::setName(char const*)>
c0013096:	b1 c1                	mov    cl,0xc1
c0013098:	88 c8                	mov    al,cl
c001309a:	e6 22                	out    0x22,al
c001309c:	e4 23                	in     al,0x23
c001309e:	88 c2                	mov    dl,al
c00130a0:	88 c8                	mov    al,cl
c00130a2:	e6 22                	out    0x22,al
c00130a4:	88 d0                	mov    al,dl
c00130a6:	83 c8 10             	or     eax,0x10
c00130a9:	e6 23                	out    0x23,al
c00130ab:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00130b2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00130b5:	89 d0                	mov    eax,edx
c00130b7:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00130bd:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00130c1:	40                   	inc    eax
c00130c2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00130c8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00130cd:	e9 a1 00 00 00       	jmp    c0013173 <CPU::detectFeatures()+0x95b>
c00130d2:	83 f8 06             	cmp    eax,0x6
c00130d5:	0f 84 e1 fe ff ff    	je     c0012fbc <CPU::detectFeatures()+0x7a4>
c00130db:	83 f8 04             	cmp    eax,0x4
c00130de:	0f 84 e9 fe ff ff    	je     c0012fcd <CPU::detectFeatures()+0x7b5>
c00130e4:	83 f8 03             	cmp    eax,0x3
c00130e7:	0f 85 0e 01 00 00    	jne    c00131fb <CPU::detectFeatures()+0x9e3>
c00130ed:	52                   	push   edx
c00130ee:	52                   	push   edx
c00130ef:	68 1f 4c 02 c0       	push   0xc0024c1f
c00130f4:	eb 77                	jmp    c001316d <CPU::detectFeatures()+0x955>
c00130f6:	83 f8 07             	cmp    eax,0x7
c00130f9:	75 09                	jne    c0013104 <CPU::detectFeatures()+0x8ec>
c00130fb:	50                   	push   eax
c00130fc:	50                   	push   eax
c00130fd:	68 29 4c 02 c0       	push   0xc0024c29
c0013102:	eb 69                	jmp    c001316d <CPU::detectFeatures()+0x955>
c0013104:	83 f8 0a             	cmp    eax,0xa
c0013107:	75 09                	jne    c0013112 <CPU::detectFeatures()+0x8fa>
c0013109:	50                   	push   eax
c001310a:	50                   	push   eax
c001310b:	68 34 4c 02 c0       	push   0xc0024c34
c0013110:	eb 5b                	jmp    c001316d <CPU::detectFeatures()+0x955>
c0013112:	83 f8 0b             	cmp    eax,0xb
c0013115:	75 09                	jne    c0013120 <CPU::detectFeatures()+0x908>
c0013117:	50                   	push   eax
c0013118:	50                   	push   eax
c0013119:	68 3c 4c 02 c0       	push   0xc0024c3c
c001311e:	eb 4d                	jmp    c001316d <CPU::detectFeatures()+0x955>
c0013120:	83 f8 08             	cmp    eax,0x8
c0013123:	75 09                	jne    c001312e <CPU::detectFeatures()+0x916>
c0013125:	50                   	push   eax
c0013126:	50                   	push   eax
c0013127:	68 45 4c 02 c0       	push   0xc0024c45
c001312c:	eb 3f                	jmp    c001316d <CPU::detectFeatures()+0x955>
c001312e:	83 f8 09             	cmp    eax,0x9
c0013131:	75 09                	jne    c001313c <CPU::detectFeatures()+0x924>
c0013133:	50                   	push   eax
c0013134:	50                   	push   eax
c0013135:	68 4d 4c 02 c0       	push   0xc0024c4d
c001313a:	eb 31                	jmp    c001316d <CPU::detectFeatures()+0x955>
c001313c:	83 f8 05             	cmp    eax,0x5
c001313f:	75 09                	jne    c001314a <CPU::detectFeatures()+0x932>
c0013141:	50                   	push   eax
c0013142:	50                   	push   eax
c0013143:	68 55 4c 02 c0       	push   0xc0024c55
c0013148:	eb 23                	jmp    c001316d <CPU::detectFeatures()+0x955>
c001314a:	83 f8 0c             	cmp    eax,0xc
c001314d:	75 09                	jne    c0013158 <CPU::detectFeatures()+0x940>
c001314f:	55                   	push   ebp
c0013150:	55                   	push   ebp
c0013151:	68 63 4c 02 c0       	push   0xc0024c63
c0013156:	eb 15                	jmp    c001316d <CPU::detectFeatures()+0x955>
c0013158:	83 f8 0d             	cmp    eax,0xd
c001315b:	75 09                	jne    c0013166 <CPU::detectFeatures()+0x94e>
c001315d:	57                   	push   edi
c001315e:	57                   	push   edi
c001315f:	68 6e 4c 02 c0       	push   0xc0024c6e
c0013164:	eb 07                	jmp    c001316d <CPU::detectFeatures()+0x955>
c0013166:	56                   	push   esi
c0013167:	56                   	push   esi
c0013168:	68 82 4c 02 c0       	push   0xc0024c82
c001316d:	53                   	push   ebx
c001316e:	e8 c5 b4 ff ff       	call   c000e638 <Device::setName(char const*)>
c0013173:	83 c4 10             	add    esp,0x10
c0013176:	e9 80 00 00 00       	jmp    c00131fb <CPU::detectFeatures()+0x9e3>
c001317b:	51                   	push   ecx
c001317c:	51                   	push   ecx
c001317d:	68 ce 4a 02 c0       	push   0xc0024ace
c0013182:	55                   	push   ebp
c0013183:	e8 b0 d5 fe ff       	call   c0000738 <strcpy>
c0013188:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013192:	e8 4c d0 fe ff       	call   c00001e3 <is486>
c0013197:	83 c4 10             	add    esp,0x10
c001319a:	85 c0                	test   eax,eax
c001319c:	74 2b                	je     c00131c9 <CPU::detectFeatures()+0x9b1>
c001319e:	52                   	push   edx
c001319f:	52                   	push   edx
c00131a0:	68 8e 4c 02 c0       	push   0xc0024c8e
c00131a5:	53                   	push   ebx
c00131a6:	e8 8d b4 ff ff       	call   c000e638 <Device::setName(char const*)>
c00131ab:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c00131b2:	0f 20 c0             	mov    eax,cr0
c00131b5:	83 e0 14             	and    eax,0x14
c00131b8:	83 c4 10             	add    esp,0x10
c00131bb:	83 f8 04             	cmp    eax,0x4
c00131be:	75 1f                	jne    c00131df <CPU::detectFeatures()+0x9c7>
c00131c0:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c00131c7:	eb 32                	jmp    c00131fb <CPU::detectFeatures()+0x9e3>
c00131c9:	50                   	push   eax
c00131ca:	50                   	push   eax
c00131cb:	68 99 4c 02 c0       	push   0xc0024c99
c00131d0:	53                   	push   ebx
c00131d1:	e8 62 b4 ff ff       	call   c000e638 <Device::setName(char const*)>
c00131d6:	80 a3 8d 11 00 00 f8 	and    BYTE PTR [ebx+0x118d],0xf8
c00131dd:	eb d3                	jmp    c00131b2 <CPU::detectFeatures()+0x99a>
c00131df:	e8 da cf fe ff       	call   c00001be <hasLegacyFPU>
c00131e4:	83 e0 01             	and    eax,0x1
c00131e7:	8d 14 00             	lea    edx,[eax+eax*1]
c00131ea:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00131f0:	83 e0 fd             	and    eax,0xfffffffd
c00131f3:	09 d0                	or     eax,edx
c00131f5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00131fb:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0013202:	74 0e                	je     c0013212 <CPU::detectFeatures()+0x9fa>
c0013204:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0013209:	80 88 e8 01 00 00 10 	or     BYTE PTR [eax+0x1e8],0x10
c0013210:	eb 20                	jmp    c0013232 <CPU::detectFeatures()+0xa1a>
c0013212:	e8 a7 cf fe ff       	call   c00001be <hasLegacyFPU>
c0013217:	83 e0 01             	and    eax,0x1
c001321a:	8d 14 00             	lea    edx,[eax+eax*1]
c001321d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0013223:	83 e0 fd             	and    eax,0xfffffffd
c0013226:	09 d0                	or     eax,edx
c0013228:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001322e:	a8 02                	test   al,0x2
c0013230:	75 d2                	jne    c0013204 <CPU::detectFeatures()+0x9ec>
c0013232:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0013239:	83 c4 4c             	add    esp,0x4c
c001323c:	5b                   	pop    ebx
c001323d:	5e                   	pop    esi
c001323e:	5f                   	pop    edi
c001323f:	5d                   	pop    ebp
c0013240:	c3                   	ret    
c0013241:	90                   	nop

c0013242 <CPU::setupSMEP()>:
c0013242:	0f 20 e0             	mov    eax,cr4
c0013245:	0d 00 00 10 00       	or     eax,0x100000
c001324a:	0f 22 e0             	mov    cr4,eax
c001324d:	c3                   	ret    

c001324e <CPU::setupUMIP()>:
c001324e:	0f 20 e0             	mov    eax,cr4
c0013251:	80 cc 08             	or     ah,0x8
c0013254:	0f 22 e0             	mov    cr4,eax
c0013257:	c3                   	ret    

c0013258 <CPU::setupTSC()>:
c0013258:	0f 20 e0             	mov    eax,cr4
c001325b:	83 c8 04             	or     eax,0x4
c001325e:	0f 22 e0             	mov    cr4,eax
c0013261:	c3                   	ret    

c0013262 <CPU::setupLargePages()>:
c0013262:	0f 20 e0             	mov    eax,cr4
c0013265:	83 c8 10             	or     eax,0x10
c0013268:	0f 22 e0             	mov    cr4,eax
c001326b:	c3                   	ret    

c001326c <CPU::setupPAT()>:
c001326c:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0013271:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013278:	74 2c                	je     c00132a6 <CPU::setupPAT()+0x3a>
c001327a:	53                   	push   ebx
c001327b:	83 ec 10             	sub    esp,0x10
c001327e:	68 77 02 00 00       	push   0x277
c0013283:	50                   	push   eax
c0013284:	e8 dd 5f ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0013289:	83 e2 f8             	and    edx,0xfffffff8
c001328c:	83 ca 01             	or     edx,0x1
c001328f:	52                   	push   edx
c0013290:	50                   	push   eax
c0013291:	68 77 02 00 00       	push   0x277
c0013296:	ff 35 a8 73 02 c0    	push   DWORD PTR ds:0xc00273a8
c001329c:	e8 f1 5f ff ff       	call   c0009292 <Computer::wrmsr(unsigned int, unsigned long long)>
c00132a1:	83 c4 28             	add    esp,0x28
c00132a4:	5b                   	pop    ebx
c00132a5:	c3                   	ret    
c00132a6:	c3                   	ret    
c00132a7:	90                   	nop

c00132a8 <CPU::setupMTRR()>:
c00132a8:	c3                   	ret    
c00132a9:	90                   	nop

c00132aa <CPU::setupGlobalPages()>:
c00132aa:	0f 20 e0             	mov    eax,cr4
c00132ad:	0c 80                	or     al,0x80
c00132af:	0f 22 e0             	mov    cr4,eax
c00132b2:	c3                   	ret    
c00132b3:	90                   	nop

c00132b4 <CPU::allowUsermodeDataAccess()>:
c00132b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132b8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00132bf:	74 03                	je     c00132c4 <CPU::allowUsermodeDataAccess()+0x10>
c00132c1:	0f 01 cb             	stac   
c00132c4:	c3                   	ret    
c00132c5:	90                   	nop

c00132c6 <CPU::prohibitUsermodeDataAccess()>:
c00132c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132ca:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00132d1:	74 03                	je     c00132d6 <CPU::prohibitUsermodeDataAccess()+0x10>
c00132d3:	0f 01 ca             	clac   
c00132d6:	c3                   	ret    
c00132d7:	90                   	nop

c00132d8 <CPU::setupSMAP()>:
c00132d8:	0f 20 e0             	mov    eax,cr4
c00132db:	0d 00 00 20 00       	or     eax,0x200000
c00132e0:	0f 22 e0             	mov    cr4,eax
c00132e3:	eb e1                	jmp    c00132c6 <CPU::prohibitUsermodeDataAccess()>
c00132e5:	90                   	nop

c00132e6 <CPU::setupFeatures()>:
c00132e6:	53                   	push   ebx
c00132e7:	83 ec 08             	sub    esp,0x8
c00132ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132ee:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00132f5:	74 18                	je     c001330f <CPU::setupFeatures()+0x29>
c00132f7:	83 ec 0c             	sub    esp,0xc
c00132fa:	68 a4 4c 02 c0       	push   0xc0024ca4
c00132ff:	e8 c1 9c ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013304:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013307:	e8 42 ff ff ff       	call   c001324e <CPU::setupUMIP()>
c001330c:	83 c4 10             	add    esp,0x10
c001330f:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0013316:	74 18                	je     c0013330 <CPU::setupFeatures()+0x4a>
c0013318:	83 ec 0c             	sub    esp,0xc
c001331b:	68 ae 4c 02 c0       	push   0xc0024cae
c0013320:	e8 a0 9c ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013325:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013328:	e8 2b ff ff ff       	call   c0013258 <CPU::setupTSC()>
c001332d:	83 c4 10             	add    esp,0x10
c0013330:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0013337:	74 18                	je     c0013351 <CPU::setupFeatures()+0x6b>
c0013339:	83 ec 0c             	sub    esp,0xc
c001333c:	68 b7 4c 02 c0       	push   0xc0024cb7
c0013341:	e8 7f 9c ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013346:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013349:	e8 14 ff ff ff       	call   c0013262 <CPU::setupLargePages()>
c001334e:	83 c4 10             	add    esp,0x10
c0013351:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0013358:	74 18                	je     c0013372 <CPU::setupFeatures()+0x8c>
c001335a:	83 ec 0c             	sub    esp,0xc
c001335d:	68 c0 4c 02 c0       	push   0xc0024cc0
c0013362:	e8 5e 9c ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013367:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001336a:	e8 3b ff ff ff       	call   c00132aa <CPU::setupGlobalPages()>
c001336f:	83 c4 10             	add    esp,0x10
c0013372:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0013379:	74 18                	je     c0013393 <CPU::setupFeatures()+0xad>
c001337b:	83 ec 0c             	sub    esp,0xc
c001337e:	68 d2 4c 02 c0       	push   0xc0024cd2
c0013383:	e8 3d 9c ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013388:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001338b:	e8 dc fe ff ff       	call   c001326c <CPU::setupPAT()>
c0013390:	83 c4 10             	add    esp,0x10
c0013393:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001339a:	74 11                	je     c00133ad <CPU::setupFeatures()+0xc7>
c001339c:	c7 44 24 10 db 4c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024cdb
c00133a4:	83 c4 08             	add    esp,0x8
c00133a7:	5b                   	pop    ebx
c00133a8:	e9 18 9c ff ff       	jmp    c000cfc5 <Dbg::kprintf(char const*, ...)>
c00133ad:	83 c4 08             	add    esp,0x8
c00133b0:	5b                   	pop    ebx
c00133b1:	c3                   	ret    

c00133b2 <CPU::open(int, int, void*)>:
c00133b2:	57                   	push   edi
c00133b3:	56                   	push   esi
c00133b4:	53                   	push   ebx
c00133b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00133b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00133bd:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00133c3:	83 ec 0c             	sub    esp,0xc
c00133c6:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00133cc:	68 e5 4c 02 c0       	push   0xc0024ce5
c00133d1:	e8 3b 69 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00133d6:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00133dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00133df:	e8 a8 61 ff ff       	call   c000958c <GDT::setup()>
c00133e4:	c7 04 24 f7 4c 02 c0 	mov    DWORD PTR [esp],0xc0024cf7
c00133eb:	e8 21 69 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00133f0:	83 c4 0c             	add    esp,0xc
c00133f3:	6a 00                	push   0x0
c00133f5:	68 ef be ad de       	push   0xdeadbeef
c00133fa:	57                   	push   edi
c00133fb:	e8 f0 81 ff ff       	call   c000b5f0 <TSS::setup(unsigned long, unsigned long)>
c0013400:	c7 04 24 09 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d09
c0013407:	e8 05 69 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001340c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001340f:	e8 bc 81 ff ff       	call   c000b5d0 <TSS::flush()>
c0013414:	c7 04 24 1d 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d1d
c001341b:	e8 f1 68 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0013420:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013426:	89 04 24             	mov    DWORD PTR [esp],eax
c0013429:	e8 ec 63 ff ff       	call   c000981a <IDT::setup()>
c001342e:	c7 04 24 2f 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d2f
c0013435:	e8 d7 68 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001343a:	b8 00 04 00 00       	mov    eax,0x400
c001343f:	0f 23 f8             	mov    db7,eax
c0013442:	c7 04 24 4d 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d4d
c0013449:	e8 c3 68 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001344e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0013458:	e8 11 6f ff ff       	call   c000a36e <Phys::allocatePage()>
c001345d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0013463:	89 30                	mov    DWORD PTR [eax],esi
c0013465:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001346b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001346e:	c7 04 24 6f 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d6f
c0013475:	e8 97 68 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001347a:	58                   	pop    eax
c001347b:	5a                   	pop    edx
c001347c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0013482:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013486:	e8 25 91 ff ff       	call   c000c5b0 <VAS::setCPUSpecific(unsigned long)>
c001348b:	c7 04 24 97 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d97
c0013492:	e8 7a 68 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0013497:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001349a:	e8 79 f3 ff ff       	call   c0012818 <CPU::detectFeatures()>
c001349f:	c7 04 24 ba 4d 02 c0 	mov    DWORD PTR [esp],0xc0024dba
c00134a6:	e8 66 68 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00134ab:	e8 31 74 00 00       	call   c001a8e1 <Hal::initialise()>
c00134b0:	c7 04 24 ce 4d 02 c0 	mov    DWORD PTR [esp],0xc0024dce
c00134b7:	e8 55 68 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00134bc:	a1 c0 73 02 c0       	mov    eax,ds:0xc00273c0
c00134c1:	83 e0 10             	and    eax,0x10
c00134c4:	83 f8 01             	cmp    eax,0x1
c00134c7:	19 c0                	sbb    eax,eax
c00134c9:	83 e0 46             	and    eax,0x46
c00134cc:	83 c0 1e             	add    eax,0x1e
c00134cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00134d2:	e8 4a c8 ff ff       	call   c000fd21 <setupTimer(int)>
c00134d7:	83 c4 10             	add    esp,0x10
c00134da:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00134e0:	f6 05 c0 73 02 c0 20 	test   BYTE PTR ds:0xc00273c0,0x20
c00134e7:	74 18                	je     c0013501 <CPU::open(int, int, void*)+0x14f>
c00134e9:	83 ec 0c             	sub    esp,0xc
c00134ec:	68 e9 4d 02 c0       	push   0xc0024de9
c00134f1:	e8 1b 68 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00134f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134f9:	e8 e8 fd ff ff       	call   c00132e6 <CPU::setupFeatures()>
c00134fe:	83 c4 10             	add    esp,0x10
c0013501:	83 ec 0c             	sub    esp,0xc
c0013504:	68 04 4e 02 c0       	push   0xc0024e04
c0013509:	e8 03 68 ff ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001350e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013511:	e8 62 f0 ff ff       	call   c0012578 <CPU::displayFeatures()>
c0013516:	83 c4 10             	add    esp,0x10
c0013519:	31 c0                	xor    eax,eax
c001351b:	5b                   	pop    ebx
c001351c:	5e                   	pop    esi
c001351d:	5f                   	pop    edi
c001351e:	c3                   	ret    
c001351f:	90                   	nop

c0013520 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013520:	57                   	push   edi
c0013521:	56                   	push   esi
c0013522:	53                   	push   ebx
c0013523:	51                   	push   ecx
c0013524:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013528:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c001352b:	0f 02 c0             	lar    eax,ax
c001352e:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013531:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013535:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013538:	88 ca                	mov    dl,cl
c001353a:	c0 ea 06             	shr    dl,0x6
c001353d:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013541:	89 ca                	mov    edx,ecx
c0013543:	66 c1 ea 03          	shr    dx,0x3
c0013547:	83 e2 07             	and    edx,0x7
c001354a:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001354f:	88 17                	mov    BYTE PTR [edi],dl
c0013551:	0f 84 a6 01 00 00    	je     c00136fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013557:	83 e1 07             	and    ecx,0x7
c001355a:	80 f9 04             	cmp    cl,0x4
c001355d:	0f 84 98 00 00 00    	je     c00135fb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013563:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013568:	0f 95 c0             	setne  al
c001356b:	80 f9 05             	cmp    cl,0x5
c001356e:	0f 95 c2             	setne  dl
c0013571:	08 c2                	or     dl,al
c0013573:	74 79                	je     c00135ee <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013575:	84 c9                	test   cl,cl
c0013577:	75 05                	jne    c001357e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013579:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001357c:	eb 3c                	jmp    c00135ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001357e:	80 f9 01             	cmp    cl,0x1
c0013581:	75 05                	jne    c0013588 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013583:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013586:	eb 32                	jmp    c00135ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013588:	80 f9 02             	cmp    cl,0x2
c001358b:	75 05                	jne    c0013592 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001358d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013590:	eb 28                	jmp    c00135ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013592:	31 c0                	xor    eax,eax
c0013594:	80 f9 03             	cmp    cl,0x3
c0013597:	75 05                	jne    c001359e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013599:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001359c:	eb 1c                	jmp    c00135ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001359e:	80 f9 05             	cmp    cl,0x5
c00135a1:	75 05                	jne    c00135a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00135a3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00135a6:	eb 12                	jmp    c00135ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00135a8:	80 f9 06             	cmp    cl,0x6
c00135ab:	75 05                	jne    c00135b2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00135ad:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00135b0:	eb 08                	jmp    c00135ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00135b2:	80 f9 07             	cmp    cl,0x7
c00135b5:	75 03                	jne    c00135ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00135b7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00135ba:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00135bf:	75 10                	jne    c00135d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00135c1:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00135c5:	b9 03 00 00 00       	mov    ecx,0x3
c00135ca:	01 d0                	add    eax,edx
c00135cc:	e9 37 01 00 00       	jmp    c0013708 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00135d1:	b9 02 00 00 00       	mov    ecx,0x2
c00135d6:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00135db:	0f 85 27 01 00 00    	jne    c0013708 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00135e1:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00135e4:	b9 06 00 00 00       	mov    ecx,0x6
c00135e9:	e9 1a 01 00 00       	jmp    c0013708 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00135ee:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00135f1:	b9 06 00 00 00       	mov    ecx,0x6
c00135f6:	e9 0f 01 00 00       	jmp    c001370a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00135fb:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00135fe:	88 ca                	mov    dl,cl
c0013600:	c0 ea 06             	shr    dl,0x6
c0013603:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0013607:	89 ca                	mov    edx,ecx
c0013609:	66 c1 ea 03          	shr    dx,0x3
c001360d:	83 e2 07             	and    edx,0x7
c0013610:	80 e1 07             	and    cl,0x7
c0013613:	75 05                	jne    c001361a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0013615:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0013618:	eb 4c                	jmp    c0013666 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001361a:	80 f9 01             	cmp    cl,0x1
c001361d:	75 05                	jne    c0013624 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001361f:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013622:	eb 42                	jmp    c0013666 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013624:	80 f9 02             	cmp    cl,0x2
c0013627:	75 05                	jne    c001362e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0013629:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001362c:	eb 38                	jmp    c0013666 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001362e:	80 f9 03             	cmp    cl,0x3
c0013631:	75 05                	jne    c0013638 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013633:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0013636:	eb 2e                	jmp    c0013666 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013638:	80 f9 04             	cmp    cl,0x4
c001363b:	75 12                	jne    c001364f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001363d:	f6 c4 60             	test   ah,0x60
c0013640:	75 08                	jne    c001364a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013642:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013645:	8d 78 14             	lea    edi,[eax+0x14]
c0013648:	eb 1c                	jmp    c0013666 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001364a:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001364d:	eb 17                	jmp    c0013666 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001364f:	80 f9 05             	cmp    cl,0x5
c0013652:	75 05                	jne    c0013659 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013654:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0013657:	eb 0d                	jmp    c0013666 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013659:	80 f9 06             	cmp    cl,0x6
c001365c:	75 05                	jne    c0013663 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001365e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013661:	eb 03                	jmp    c0013666 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013663:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0013666:	84 d2                	test   dl,dl
c0013668:	75 05                	jne    c001366f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001366a:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001366d:	eb 3c                	jmp    c00136ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001366f:	80 fa 01             	cmp    dl,0x1
c0013672:	75 05                	jne    c0013679 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013674:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013677:	eb 32                	jmp    c00136ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013679:	80 fa 02             	cmp    dl,0x2
c001367c:	75 05                	jne    c0013683 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001367e:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013681:	eb 28                	jmp    c00136ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013683:	80 fa 03             	cmp    dl,0x3
c0013686:	75 05                	jne    c001368d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0013688:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001368b:	eb 1e                	jmp    c00136ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001368d:	31 c0                	xor    eax,eax
c001368f:	80 fa 04             	cmp    dl,0x4
c0013692:	74 17                	je     c00136ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013694:	80 fa 05             	cmp    dl,0x5
c0013697:	75 05                	jne    c001369e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0013699:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001369c:	eb 0d                	jmp    c00136ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001369e:	80 fa 06             	cmp    dl,0x6
c00136a1:	75 05                	jne    c00136a8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00136a3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00136a6:	eb 03                	jmp    c00136ab <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00136a8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00136ab:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00136b0:	0f 94 c2             	sete   dl
c00136b3:	80 f9 05             	cmp    cl,0x5
c00136b6:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00136ba:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00136bf:	d3 e0                	shl    eax,cl
c00136c1:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00136c5:	74 0a                	je     c00136d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00136c7:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00136ca:	b9 07 00 00 00       	mov    ecx,0x7
c00136cf:	eb 37                	jmp    c0013708 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00136d1:	01 f8                	add    eax,edi
c00136d3:	b9 03 00 00 00       	mov    ecx,0x3
c00136d8:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00136dd:	74 2b                	je     c001370a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00136df:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00136e4:	75 0d                	jne    c00136f3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00136e6:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00136ea:	01 c8                	add    eax,ecx
c00136ec:	b9 04 00 00 00       	mov    ecx,0x4
c00136f1:	eb 17                	jmp    c001370a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00136f3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00136f6:	b9 07 00 00 00       	mov    ecx,0x7
c00136fb:	eb 0d                	jmp    c001370a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00136fd:	b9 02 00 00 00       	mov    ecx,0x2
c0013702:	b2 01                	mov    dl,0x1
c0013704:	31 c0                	xor    eax,eax
c0013706:	eb 02                	jmp    c001370a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013708:	31 d2                	xor    edx,edx
c001370a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001370e:	89 0b                	mov    DWORD PTR [ebx],ecx
c0013710:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013714:	88 11                	mov    BYTE PTR [ecx],dl
c0013716:	5a                   	pop    edx
c0013717:	5b                   	pop    ebx
c0013718:	5e                   	pop    esi
c0013719:	5f                   	pop    edi
c001371a:	c3                   	ret    

c001371b <Krnl::smpEntry()>:
c001371b:	eb fe                	jmp    c001371b <Krnl::smpEntry()>

c001371d <Krnl::startCPU(int)>:
c001371d:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0013722:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013729:	0f 84 36 01 00 00    	je     c0013865 <Krnl::startCPU(int)+0x148>
c001372f:	53                   	push   ebx
c0013730:	83 ec 10             	sub    esp,0x10
c0013733:	fa                   	cli    
c0013734:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c001373a:	6a 1b                	push   0x1b
c001373c:	ff 35 a8 73 02 c0    	push   DWORD PTR ds:0xc00273a8
c0013742:	e8 1f 5b ff ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0013747:	25 00 f0 ff ff       	and    eax,0xfffff000
c001374c:	89 c3                	mov    ebx,eax
c001374e:	58                   	pop    eax
c001374f:	5a                   	pop    edx
c0013750:	53                   	push   ebx
c0013751:	68 4c 4e 02 c0       	push   0xc0024e4c
c0013756:	e8 6a 98 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001375b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013765:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013769:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013773:	c1 e0 18             	shl    eax,0x18
c0013776:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001377c:	83 c4 10             	add    esp,0x10
c001377f:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013785:	09 c2                	or     edx,eax
c0013787:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001378d:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0013793:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013799:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001379f:	80 cd c5             	or     ch,0xc5
c00137a2:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00137a8:	f3 90                	pause  
c00137aa:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00137ac:	0f ba e1 0c          	bt     ecx,0xc
c00137b0:	72 f6                	jb     c00137a8 <Krnl::startCPU(int)+0x8b>
c00137b2:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00137b8:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00137be:	09 c1                	or     ecx,eax
c00137c0:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00137c6:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00137cc:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00137d2:	80 cd 85             	or     ch,0x85
c00137d5:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00137db:	f3 90                	pause  
c00137dd:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00137df:	0f ba e1 0c          	bt     ecx,0xc
c00137e3:	72 f6                	jb     c00137db <Krnl::startCPU(int)+0xbe>
c00137e5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00137ef:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00137f5:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00137fb:	09 c1                	or     ecx,eax
c00137fd:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013803:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013809:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001380f:	81 c9 02 06 00 00    	or     ecx,0x602
c0013815:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001381b:	f3 90                	pause  
c001381d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001381f:	0f ba e1 0c          	bt     ecx,0xc
c0013823:	72 f6                	jb     c001381b <Krnl::startCPU(int)+0xfe>
c0013825:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001382f:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013835:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001383b:	09 c8                	or     eax,ecx
c001383d:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0013843:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0013849:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001384e:	0d 02 06 00 00       	or     eax,0x602
c0013853:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0013859:	f3 90                	pause  
c001385b:	8b 02                	mov    eax,DWORD PTR [edx]
c001385d:	0f ba e0 0c          	bt     eax,0xc
c0013861:	72 f6                	jb     c0013859 <Krnl::startCPU(int)+0x13c>
c0013863:	eb fe                	jmp    c0013863 <Krnl::startCPU(int)+0x146>
c0013865:	c3                   	ret    

c0013866 <Krnl::startCPUs()>:
c0013866:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c001386b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013871:	88 c2                	mov    dl,al
c0013873:	83 e2 0a             	and    edx,0xa
c0013876:	80 fa 0a             	cmp    dl,0xa
c0013879:	75 09                	jne    c0013884 <Krnl::startCPUs()+0x1e>
c001387b:	a8 01                	test   al,0x1
c001387d:	74 05                	je     c0013884 <Krnl::startCPUs()+0x1e>
c001387f:	e9 17 c9 fe ff       	jmp    c000019b <prepareTramp>
c0013884:	c3                   	ret    
c0013885:	90                   	nop

c0013886 <EnvVarContainer::getEnv(char const*)>:
c0013886:	57                   	push   edi
c0013887:	56                   	push   esi
c0013888:	53                   	push   ebx
c0013889:	31 db                	xor    ebx,ebx
c001388b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001388f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0013891:	7e 2b                	jle    c00138be <EnvVarContainer::getEnv(char const*)+0x38>
c0013893:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001389a:	50                   	push   eax
c001389b:	50                   	push   eax
c001389c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001389f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00138a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00138a6:	e8 19 cf fe ff       	call   c00007c4 <strcmp>
c00138ab:	83 c4 10             	add    esp,0x10
c00138ae:	85 c0                	test   eax,eax
c00138b0:	75 09                	jne    c00138bb <EnvVarContainer::getEnv(char const*)+0x35>
c00138b2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00138b5:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00138b9:	eb 05                	jmp    c00138c0 <EnvVarContainer::getEnv(char const*)+0x3a>
c00138bb:	43                   	inc    ebx
c00138bc:	eb d1                	jmp    c001388f <EnvVarContainer::getEnv(char const*)+0x9>
c00138be:	31 c0                	xor    eax,eax
c00138c0:	5b                   	pop    ebx
c00138c1:	5e                   	pop    esi
c00138c2:	5f                   	pop    edi
c00138c3:	c3                   	ret    

c00138c4 <EnvVarContainer::setEnv(char const*, char const*)>:
c00138c4:	55                   	push   ebp
c00138c5:	57                   	push   edi
c00138c6:	56                   	push   esi
c00138c7:	53                   	push   ebx
c00138c8:	83 ec 28             	sub    esp,0x28
c00138cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00138cf:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00138d3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00138d7:	56                   	push   esi
c00138d8:	e8 bb cd fe ff       	call   c0000698 <strlen>
c00138dd:	40                   	inc    eax
c00138de:	89 04 24             	mov    DWORD PTR [esp],eax
c00138e1:	e8 d1 63 ff ff       	call   c0009cb7 <malloc>
c00138e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00138ed:	e8 a6 cd fe ff       	call   c0000698 <strlen>
c00138f2:	40                   	inc    eax
c00138f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00138f6:	e8 bc 63 ff ff       	call   c0009cb7 <malloc>
c00138fb:	89 34 24             	mov    DWORD PTR [esp],esi
c00138fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013902:	e8 91 cd fe ff       	call   c0000698 <strlen>
c0013907:	83 c4 0c             	add    esp,0xc
c001390a:	40                   	inc    eax
c001390b:	50                   	push   eax
c001390c:	6a 00                	push   0x0
c001390e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013912:	e8 65 cd fe ff       	call   c000067c <memset>
c0013917:	89 34 24             	mov    DWORD PTR [esp],esi
c001391a:	e8 79 cd fe ff       	call   c0000698 <strlen>
c001391f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013923:	8d 48 01             	lea    ecx,[eax+0x1]
c0013926:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013928:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001392b:	89 de                	mov    esi,ebx
c001392d:	e8 66 cd fe ff       	call   c0000698 <strlen>
c0013932:	83 c4 0c             	add    esp,0xc
c0013935:	40                   	inc    eax
c0013936:	50                   	push   eax
c0013937:	6a 00                	push   0x0
c0013939:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001393d:	e8 3a cd fe ff       	call   c000067c <memset>
c0013942:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013945:	e8 4e cd fe ff       	call   c0000698 <strlen>
c001394a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001394e:	8d 48 01             	lea    ecx,[eax+0x1]
c0013951:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013953:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013956:	40                   	inc    eax
c0013957:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001395a:	c1 e0 03             	shl    eax,0x3
c001395d:	5a                   	pop    edx
c001395e:	59                   	pop    ecx
c001395f:	50                   	push   eax
c0013960:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0013963:	e8 3b 63 ff ff       	call   c0009ca3 <realloc>
c0013968:	8d 74 24 18          	lea    esi,[esp+0x18]
c001396c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001396f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013972:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013976:	b9 08 00 00 00       	mov    ecx,0x8
c001397b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001397d:	83 c4 2c             	add    esp,0x2c
c0013980:	5b                   	pop    ebx
c0013981:	5e                   	pop    esi
c0013982:	5f                   	pop    edi
c0013983:	5d                   	pop    ebp
c0013984:	c3                   	ret    
c0013985:	90                   	nop

c0013986 <EnvVarContainer::deleteEnv(char const*)>:
c0013986:	c3                   	ret    
c0013987:	90                   	nop

c0013988 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0013988:	55                   	push   ebp
c0013989:	57                   	push   edi
c001398a:	56                   	push   esi
c001398b:	53                   	push   ebx
c001398c:	81 ec 38 01 00 00    	sub    esp,0x138
c0013992:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0013999:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00139a0:	68 14 01 00 00       	push   0x114
c00139a5:	e8 0d 63 ff ff       	call   c0009cb7 <malloc>
c00139aa:	83 c4 0c             	add    esp,0xc
c00139ad:	89 c3                	mov    ebx,eax
c00139af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00139b2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00139b9:	50                   	push   eax
c00139ba:	e8 71 9b ff ff       	call   c000d530 <File::File(char const*, Process*)>
c00139bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00139c2:	e8 b1 9e ff ff       	call   c000d878 <File::exists()>
c00139c7:	83 c4 10             	add    esp,0x10
c00139ca:	84 c0                	test   al,al
c00139cc:	75 31                	jne    c00139ff <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00139ce:	50                   	push   eax
c00139cf:	50                   	push   eax
c00139d0:	6a 12                	push   0x12
c00139d2:	53                   	push   ebx
c00139d3:	e8 32 9c ff ff       	call   c000d60a <File::open(FileOpenMode)>
c00139d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139da:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00139dd:	89 34 24             	mov    DWORD PTR [esp],esi
c00139e0:	e8 b3 cc fe ff       	call   c0000698 <strlen>
c00139e5:	5a                   	pop    edx
c00139e6:	31 d2                	xor    edx,edx
c00139e8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00139ec:	51                   	push   ecx
c00139ed:	56                   	push   esi
c00139ee:	52                   	push   edx
c00139ef:	50                   	push   eax
c00139f0:	53                   	push   ebx
c00139f1:	ff d7                	call   edi
c00139f3:	83 c4 14             	add    esp,0x14
c00139f6:	53                   	push   ebx
c00139f7:	e8 6c 9c ff ff       	call   c000d668 <File::close()>
c00139fc:	83 c4 10             	add    esp,0x10
c00139ff:	56                   	push   esi
c0013a00:	31 f6                	xor    esi,esi
c0013a02:	68 00 01 00 00       	push   0x100
c0013a07:	6a 00                	push   0x0
c0013a09:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013a0d:	50                   	push   eax
c0013a0e:	e8 69 cc fe ff       	call   c000067c <memset>
c0013a13:	5f                   	pop    edi
c0013a14:	58                   	pop    eax
c0013a15:	6a 01                	push   0x1
c0013a17:	53                   	push   ebx
c0013a18:	e8 ed 9b ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0013a1d:	83 c4 10             	add    esp,0x10
c0013a20:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013a28:	83 ec 0c             	sub    esp,0xc
c0013a2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a2d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013a31:	51                   	push   ecx
c0013a32:	8d 54 24 23          	lea    edx,[esp+0x23]
c0013a36:	52                   	push   edx
c0013a37:	6a 00                	push   0x0
c0013a39:	6a 01                	push   0x1
c0013a3b:	53                   	push   ebx
c0013a3c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a3f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0013a43:	83 c4 20             	add    esp,0x20
c0013a46:	3c 0d                	cmp    al,0xd
c0013a48:	0f 84 09 01 00 00    	je     c0013b57 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013a4e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013a53:	0f 84 ef 00 00 00    	je     c0013b48 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013a59:	3c 0a                	cmp    al,0xa
c0013a5b:	74 13                	je     c0013a70 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013a5d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013a62:	74 0c                	je     c0013a70 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013a64:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0013a6a:	0f 8e d8 00 00 00    	jle    c0013b48 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013a70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013a74:	83 ec 0c             	sub    esp,0xc
c0013a77:	8d 78 01             	lea    edi,[eax+0x1]
c0013a7a:	57                   	push   edi
c0013a7b:	e8 37 62 ff ff       	call   c0009cb7 <malloc>
c0013a80:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0013a84:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013a88:	8d 56 04             	lea    edx,[esi+0x4]
c0013a8b:	89 14 24             	mov    DWORD PTR [esp],edx
c0013a8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013a92:	e8 20 62 ff ff       	call   c0009cb7 <malloc>
c0013a97:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013a9b:	83 c4 0c             	add    esp,0xc
c0013a9e:	57                   	push   edi
c0013a9f:	6a 00                	push   0x0
c0013aa1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013aa5:	e8 d2 cb fe ff       	call   c000067c <memset>
c0013aaa:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013aae:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013ab2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013ab6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ab8:	83 c4 0c             	add    esp,0xc
c0013abb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013abf:	52                   	push   edx
c0013ac0:	6a 00                	push   0x0
c0013ac2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013ac6:	e8 b1 cb fe ff       	call   c000067c <memset>
c0013acb:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013acf:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0013ad3:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ad6:	e8 bd cb fe ff       	call   c0000698 <strlen>
c0013adb:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0013adf:	89 c1                	mov    ecx,eax
c0013ae1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ae3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ae6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0013ae9:	40                   	inc    eax
c0013aea:	83 c4 10             	add    esp,0x10
c0013aed:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013af0:	85 d2                	test   edx,edx
c0013af2:	75 0c                	jne    c0013b00 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0013af4:	83 ec 0c             	sub    esp,0xc
c0013af7:	6a 08                	push   0x8
c0013af9:	e8 b9 61 ff ff       	call   c0009cb7 <malloc>
c0013afe:	eb 0c                	jmp    c0013b0c <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0013b00:	c1 e0 03             	shl    eax,0x3
c0013b03:	51                   	push   ecx
c0013b04:	51                   	push   ecx
c0013b05:	50                   	push   eax
c0013b06:	52                   	push   edx
c0013b07:	e8 97 61 ff ff       	call   c0009ca3 <realloc>
c0013b0c:	83 c4 10             	add    esp,0x10
c0013b0f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013b12:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013b15:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0013b18:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013b1c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013b20:	b9 08 00 00 00       	mov    ecx,0x8
c0013b25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013b27:	31 f6                	xor    esi,esi
c0013b29:	50                   	push   eax
c0013b2a:	68 00 01 00 00       	push   0x100
c0013b2f:	6a 00                	push   0x0
c0013b31:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013b35:	50                   	push   eax
c0013b36:	e8 41 cb fe ff       	call   c000067c <memset>
c0013b3b:	83 c4 10             	add    esp,0x10
c0013b3e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013b46:	eb 0f                	jmp    c0013b57 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013b48:	3c 3d                	cmp    al,0x3d
c0013b4a:	74 07                	je     c0013b53 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0013b4c:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0013b50:	46                   	inc    esi
c0013b51:	eb 04                	jmp    c0013b57 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013b53:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0013b57:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013b5c:	0f 85 c6 fe ff ff    	jne    c0013a28 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0013b62:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013b68:	5b                   	pop    ebx
c0013b69:	5e                   	pop    esi
c0013b6a:	5f                   	pop    edi
c0013b6b:	5d                   	pop    ebp
c0013b6c:	c3                   	ret    
c0013b6d:	90                   	nop

c0013b6e <EnvVarContainer::__loadSystem()>:
c0013b6e:	83 ec 10             	sub    esp,0x10
c0013b71:	68 e0 6a 02 c0       	push   0xc0026ae0
c0013b76:	68 5d 4e 02 c0       	push   0xc0024e5d
c0013b7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b7f:	e8 04 fe ff ff       	call   c0013988 <EnvVarContainer::loadFrom(char const*, char const*)>
c0013b84:	83 c4 1c             	add    esp,0x1c
c0013b87:	c3                   	ret    

c0013b88 <EnvVarContainer::__loadUser()>:
c0013b88:	c3                   	ret    
c0013b89:	90                   	nop

c0013b8a <EnvVarContainer::EnvVarContainer(Process*)>:
c0013b8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b8e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013b9c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0013b9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ba3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013baa:	90                   	nop
c0013bab:	c3                   	ret    

c0013bac <EnvVarContainer::~EnvVarContainer()>:
c0013bac:	83 ec 0c             	sub    esp,0xc
c0013baf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013bb6:	85 c0                	test   eax,eax
c0013bb8:	74 1d                	je     c0013bd7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0013bba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0013bc0:	85 c0                	test   eax,eax
c0013bc2:	74 13                	je     c0013bd7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0013bc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013bcb:	83 ec 0c             	sub    esp,0xc
c0013bce:	50                   	push   eax
c0013bcf:	e8 f3 60 ff ff       	call   c0009cc7 <free>
c0013bd4:	83 c4 10             	add    esp,0x10
c0013bd7:	90                   	nop
c0013bd8:	83 c4 0c             	add    esp,0xc
c0013bdb:	c3                   	ret    

c0013bdc <Krnl::getEnv(Process*, char const*)>:
c0013bdc:	53                   	push   ebx
c0013bdd:	83 ec 08             	sub    esp,0x8
c0013be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013be4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013be8:	39 05 f0 a8 02 c0    	cmp    DWORD PTR ds:0xc002a8f0,eax
c0013bee:	74 04                	je     c0013bf4 <Krnl::getEnv(Process*, char const*)+0x18>
c0013bf0:	85 c0                	test   eax,eax
c0013bf2:	75 0b                	jne    c0013bff <Krnl::getEnv(Process*, char const*)+0x23>
c0013bf4:	a1 74 9e 02 c0       	mov    eax,ds:0xc0029e74
c0013bf9:	85 c0                	test   eax,eax
c0013bfb:	75 19                	jne    c0013c16 <Krnl::getEnv(Process*, char const*)+0x3a>
c0013bfd:	eb 27                	jmp    c0013c26 <Krnl::getEnv(Process*, char const*)+0x4a>
c0013bff:	52                   	push   edx
c0013c00:	52                   	push   edx
c0013c01:	53                   	push   ebx
c0013c02:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0013c08:	e8 79 fc ff ff       	call   c0013886 <EnvVarContainer::getEnv(char const*)>
c0013c0d:	83 c4 10             	add    esp,0x10
c0013c10:	85 c0                	test   eax,eax
c0013c12:	75 28                	jne    c0013c3c <Krnl::getEnv(Process*, char const*)+0x60>
c0013c14:	eb de                	jmp    c0013bf4 <Krnl::getEnv(Process*, char const*)+0x18>
c0013c16:	52                   	push   edx
c0013c17:	52                   	push   edx
c0013c18:	53                   	push   ebx
c0013c19:	50                   	push   eax
c0013c1a:	e8 67 fc ff ff       	call   c0013886 <EnvVarContainer::getEnv(char const*)>
c0013c1f:	83 c4 10             	add    esp,0x10
c0013c22:	85 c0                	test   eax,eax
c0013c24:	75 16                	jne    c0013c3c <Krnl::getEnv(Process*, char const*)+0x60>
c0013c26:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0013c2a:	a1 78 9e 02 c0       	mov    eax,ds:0xc0029e78
c0013c2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c33:	83 c4 08             	add    esp,0x8
c0013c36:	5b                   	pop    ebx
c0013c37:	e9 4a fc ff ff       	jmp    c0013886 <EnvVarContainer::getEnv(char const*)>
c0013c3c:	83 c4 08             	add    esp,0x8
c0013c3f:	5b                   	pop    ebx
c0013c40:	c3                   	ret    

c0013c41 <Krnl::setEnvSystem(char const*, char const*)>:
c0013c41:	83 ec 10             	sub    esp,0x10
c0013c44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c4c:	ff 35 78 9e 02 c0    	push   DWORD PTR ds:0xc0029e78
c0013c52:	e8 6d fc ff ff       	call   c00138c4 <EnvVarContainer::setEnv(char const*, char const*)>
c0013c57:	83 c4 1c             	add    esp,0x1c
c0013c5a:	c3                   	ret    

c0013c5b <Krnl::setEnvUser(char const*, char const*)>:
c0013c5b:	a1 74 9e 02 c0       	mov    eax,ds:0xc0029e74
c0013c60:	85 c0                	test   eax,eax
c0013c62:	74 15                	je     c0013c79 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0013c64:	83 ec 10             	sub    esp,0x10
c0013c67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c6b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c6f:	50                   	push   eax
c0013c70:	e8 4f fc ff ff       	call   c00138c4 <EnvVarContainer::setEnv(char const*, char const*)>
c0013c75:	83 c4 1c             	add    esp,0x1c
c0013c78:	c3                   	ret    
c0013c79:	c3                   	ret    

c0013c7a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0013c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c7e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0013c84:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c88:	e9 37 fc ff ff       	jmp    c00138c4 <EnvVarContainer::setEnv(char const*, char const*)>

c0013c8d <Krnl::deleteEnvSystem(char const*)>:
c0013c8d:	c3                   	ret    

c0013c8e <Krnl::deleteEnvUser(char const*)>:
c0013c8e:	c3                   	ret    

c0013c8f <Krnl::deleteEnvProcess(Process*, char const*)>:
c0013c8f:	c3                   	ret    

c0013c90 <Krnl::newProcessEnv(Process*)>:
c0013c90:	83 ec 28             	sub    esp,0x28
c0013c93:	6a 0c                	push   0xc
c0013c95:	e8 1d 60 ff ff       	call   c0009cb7 <malloc>
c0013c9a:	5a                   	pop    edx
c0013c9b:	59                   	pop    ecx
c0013c9c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013ca0:	50                   	push   eax
c0013ca1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ca5:	e8 e0 fe ff ff       	call   c0013b8a <EnvVarContainer::EnvVarContainer(Process*)>
c0013caa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cae:	83 c4 2c             	add    esp,0x2c
c0013cb1:	c3                   	ret    

c0013cb2 <Krnl::copyProcessEnv(Process*, Process*)>:
c0013cb2:	57                   	push   edi
c0013cb3:	56                   	push   esi
c0013cb4:	53                   	push   ebx
c0013cb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb9:	83 ec 0c             	sub    esp,0xc
c0013cbc:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0013cc2:	6a 0c                	push   0xc
c0013cc4:	e8 ee 5f ff ff       	call   c0009cb7 <malloc>
c0013cc9:	89 c3                	mov    ebx,eax
c0013ccb:	58                   	pop    eax
c0013ccc:	5a                   	pop    edx
c0013ccd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cd1:	53                   	push   ebx
c0013cd2:	e8 b3 fe ff ff       	call   c0013b8a <EnvVarContainer::EnvVarContainer(Process*)>
c0013cd7:	8b 07                	mov    eax,DWORD PTR [edi]
c0013cd9:	89 03                	mov    DWORD PTR [ebx],eax
c0013cdb:	c1 e0 03             	shl    eax,0x3
c0013cde:	89 04 24             	mov    DWORD PTR [esp],eax
c0013ce1:	e8 d1 5f ff ff       	call   c0009cb7 <malloc>
c0013ce6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013ce9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0013ceb:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0013cee:	c1 e1 03             	shl    ecx,0x3
c0013cf1:	89 c7                	mov    edi,eax
c0013cf3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013cf5:	83 c4 10             	add    esp,0x10
c0013cf8:	89 d8                	mov    eax,ebx
c0013cfa:	5b                   	pop    ebx
c0013cfb:	5e                   	pop    esi
c0013cfc:	5f                   	pop    edi
c0013cfd:	c3                   	ret    

c0013cfe <Krnl::loadSystemEnv()>:
c0013cfe:	53                   	push   ebx
c0013cff:	83 ec 14             	sub    esp,0x14
c0013d02:	6a 0c                	push   0xc
c0013d04:	e8 ae 5f ff ff       	call   c0009cb7 <malloc>
c0013d09:	89 c3                	mov    ebx,eax
c0013d0b:	58                   	pop    eax
c0013d0c:	5a                   	pop    edx
c0013d0d:	ff 35 f0 a8 02 c0    	push   DWORD PTR ds:0xc002a8f0
c0013d13:	53                   	push   ebx
c0013d14:	e8 71 fe ff ff       	call   c0013b8a <EnvVarContainer::EnvVarContainer(Process*)>
c0013d19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d1c:	89 1d 78 9e 02 c0    	mov    DWORD PTR ds:0xc0029e78,ebx
c0013d22:	e8 47 fe ff ff       	call   c0013b6e <EnvVarContainer::__loadSystem()>
c0013d27:	83 c4 18             	add    esp,0x18
c0013d2a:	5b                   	pop    ebx
c0013d2b:	c3                   	ret    

c0013d2c <Krnl::loadUserEnv()>:
c0013d2c:	53                   	push   ebx
c0013d2d:	83 ec 14             	sub    esp,0x14
c0013d30:	6a 0c                	push   0xc
c0013d32:	e8 80 5f ff ff       	call   c0009cb7 <malloc>
c0013d37:	89 c3                	mov    ebx,eax
c0013d39:	58                   	pop    eax
c0013d3a:	5a                   	pop    edx
c0013d3b:	ff 35 f0 a8 02 c0    	push   DWORD PTR ds:0xc002a8f0
c0013d41:	53                   	push   ebx
c0013d42:	e8 43 fe ff ff       	call   c0013b8a <EnvVarContainer::EnvVarContainer(Process*)>
c0013d47:	89 1d 74 9e 02 c0    	mov    DWORD PTR ds:0xc0029e74,ebx
c0013d4d:	83 c4 18             	add    esp,0x18
c0013d50:	5b                   	pop    ebx
c0013d51:	c3                   	ret    

c0013d52 <Krnl::flushEnv()>:
c0013d52:	c3                   	ret    

c0013d53 <Krnl::getProcessTotalEnvCount(Process*)>:
c0013d53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013d57:	8b 15 74 9e 02 c0    	mov    edx,DWORD PTR ds:0xc0029e74
c0013d5d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0013d63:	a1 78 9e 02 c0       	mov    eax,ds:0xc0029e78
c0013d68:	8b 00                	mov    eax,DWORD PTR [eax]
c0013d6a:	03 01                	add    eax,DWORD PTR [ecx]
c0013d6c:	85 d2                	test   edx,edx
c0013d6e:	74 02                	je     c0013d72 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0013d70:	03 02                	add    eax,DWORD PTR [edx]
c0013d72:	c3                   	ret    

c0013d73 <Krnl::getProcessEnvPair(Process*, int)>:
c0013d73:	57                   	push   edi
c0013d74:	56                   	push   esi
c0013d75:	8b 35 74 9e 02 c0    	mov    esi,DWORD PTR ds:0xc0029e74
c0013d7b:	53                   	push   ebx
c0013d7c:	85 f6                	test   esi,esi
c0013d7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d86:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0013d8c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d90:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013d92:	75 16                	jne    c0013daa <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0013d94:	39 c2                	cmp    edx,eax
c0013d96:	7c 16                	jl     c0013dae <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0013d98:	8b 0d 78 9e 02 c0    	mov    ecx,DWORD PTR ds:0xc0029e78
c0013d9e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0013da0:	01 c6                	add    esi,eax
c0013da2:	39 d6                	cmp    esi,edx
c0013da4:	7e 3c                	jle    c0013de2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0013da6:	29 c2                	sub    edx,eax
c0013da8:	eb 04                	jmp    c0013dae <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0013daa:	39 c2                	cmp    edx,eax
c0013dac:	7d 05                	jge    c0013db3 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0013dae:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0013db1:	eb 20                	jmp    c0013dd3 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0013db3:	8b 3e                	mov    edi,DWORD PTR [esi]
c0013db5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0013db8:	39 d1                	cmp    ecx,edx
c0013dba:	7e 04                	jle    c0013dc0 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0013dbc:	29 c2                	sub    edx,eax
c0013dbe:	eb 10                	jmp    c0013dd0 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0013dc0:	8b 35 78 9e 02 c0    	mov    esi,DWORD PTR ds:0xc0029e78
c0013dc6:	03 0e                	add    ecx,DWORD PTR [esi]
c0013dc8:	39 d1                	cmp    ecx,edx
c0013dca:	7e 16                	jle    c0013de2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0013dcc:	29 c2                	sub    edx,eax
c0013dce:	29 fa                	sub    edx,edi
c0013dd0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013dd3:	8d 14 d0             	lea    edx,[eax+edx*8]
c0013dd6:	8b 02                	mov    eax,DWORD PTR [edx]
c0013dd8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013ddb:	89 03                	mov    DWORD PTR [ebx],eax
c0013ddd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0013de0:	eb 1d                	jmp    c0013dff <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0013de2:	83 ec 0c             	sub    esp,0xc
c0013de5:	68 7f 4e 02 c0       	push   0xc0024e7f
c0013dea:	e8 18 00 00 00       	call   c0013e07 <Krnl::panic(char const*)>
c0013def:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0013df5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0013dfc:	83 c4 10             	add    esp,0x10
c0013dff:	89 d8                	mov    eax,ebx
c0013e01:	5b                   	pop    ebx
c0013e02:	5e                   	pop    esi
c0013e03:	5f                   	pop    edi
c0013e04:	c2 04 00             	ret    0x4

c0013e07 <Krnl::panic(char const*)>:
c0013e07:	53                   	push   ebx
c0013e08:	83 ec 10             	sub    esp,0x10
c0013e0b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e0f:	fa                   	cli    
c0013e10:	c6 05 84 9e 02 c0 01 	mov    BYTE PTR ds:0xc0029e84,0x1
c0013e17:	53                   	push   ebx
c0013e18:	68 99 4e 02 c0       	push   0xc0024e99
c0013e1d:	e8 a3 91 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0013e22:	83 c4 0c             	add    esp,0xc
c0013e25:	6a 01                	push   0x1
c0013e27:	6a 0f                	push   0xf
c0013e29:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013e2f:	e8 d0 6d ff ff       	call   c000ac04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0013e34:	59                   	pop    ecx
c0013e35:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013e3b:	e8 dc 72 ff ff       	call   c000b11c <VgaText::clearScreen()>
c0013e40:	58                   	pop    eax
c0013e41:	5a                   	pop    edx
c0013e42:	68 f0 4e 02 c0       	push   0xc0024ef0
c0013e47:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013e4d:	e8 f2 6d ff ff       	call   c000ac44 <VgaText::setTitle(char*)>
c0013e52:	83 c4 0c             	add    esp,0xc
c0013e55:	6a 01                	push   0x1
c0013e57:	6a 0f                	push   0xf
c0013e59:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013e5f:	e8 a0 6d ff ff       	call   c000ac04 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0013e64:	59                   	pop    ecx
c0013e65:	58                   	pop    eax
c0013e66:	68 b2 4e 02 c0       	push   0xc0024eb2
c0013e6b:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013e71:	e8 32 74 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013e76:	58                   	pop    eax
c0013e77:	5a                   	pop    edx
c0013e78:	68 3c 4f 02 c0       	push   0xc0024f3c
c0013e7d:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013e83:	e8 20 74 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013e88:	59                   	pop    ecx
c0013e89:	58                   	pop    eax
c0013e8a:	68 ce 4e 02 c0       	push   0xc0024ece
c0013e8f:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013e95:	e8 0e 74 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013e9a:	58                   	pop    eax
c0013e9b:	5a                   	pop    edx
c0013e9c:	53                   	push   ebx
c0013e9d:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013ea3:	e8 00 74 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013ea8:	59                   	pop    ecx
c0013ea9:	5b                   	pop    ebx
c0013eaa:	68 ee 4e 02 c0       	push   0xc0024eee
c0013eaf:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013eb5:	e8 ee 73 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013eba:	58                   	pop    eax
c0013ebb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ebf:	e8 77 2b 00 00       	call   c0016a3b <Thr::getDriverNameFromAddress(unsigned long)>
c0013ec4:	83 c4 10             	add    esp,0x10
c0013ec7:	85 c0                	test   eax,eax
c0013ec9:	0f 84 36 01 00 00    	je     c0014005 <Krnl::panic(char const*)+0x1fe>
c0013ecf:	83 ec 08             	sub    esp,0x8
c0013ed2:	89 c3                	mov    ebx,eax
c0013ed4:	68 78 4f 02 c0       	push   0xc0024f78
c0013ed9:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013edf:	e8 c4 73 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013ee4:	59                   	pop    ecx
c0013ee5:	58                   	pop    eax
c0013ee6:	68 ce 4e 02 c0       	push   0xc0024ece
c0013eeb:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013ef1:	e8 b2 73 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013ef6:	58                   	pop    eax
c0013ef7:	5a                   	pop    edx
c0013ef8:	53                   	push   ebx
c0013ef9:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013eff:	e8 a4 73 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013f04:	83 c4 10             	add    esp,0x10
c0013f07:	83 ec 08             	sub    esp,0x8
c0013f0a:	68 ed 4e 02 c0       	push   0xc0024eed
c0013f0f:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013f15:	e8 8e 73 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013f1a:	58                   	pop    eax
c0013f1b:	5a                   	pop    edx
c0013f1c:	68 d0 4f 02 c0       	push   0xc0024fd0
c0013f21:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013f27:	e8 7c 73 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013f2c:	59                   	pop    ecx
c0013f2d:	5b                   	pop    ebx
c0013f2e:	68 10 50 02 c0       	push   0xc0025010
c0013f33:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013f39:	e8 6a 73 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013f3e:	58                   	pop    eax
c0013f3f:	5a                   	pop    edx
c0013f40:	68 d9 4e 02 c0       	push   0xc0024ed9
c0013f45:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013f4b:	e8 58 73 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013f50:	59                   	pop    ecx
c0013f51:	5b                   	pop    ebx
c0013f52:	68 54 50 02 c0       	push   0xc0025054
c0013f57:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013f5d:	e8 46 73 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013f62:	58                   	pop    eax
c0013f63:	5a                   	pop    edx
c0013f64:	68 f1 4e 02 c0       	push   0xc0024ef1
c0013f69:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013f6f:	e8 34 73 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013f74:	0f 20 c0             	mov    eax,cr0
c0013f77:	59                   	pop    ecx
c0013f78:	5b                   	pop    ebx
c0013f79:	50                   	push   eax
c0013f7a:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013f80:	e8 dd 72 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0013f85:	58                   	pop    eax
c0013f86:	5a                   	pop    edx
c0013f87:	68 fb 4e 02 c0       	push   0xc0024efb
c0013f8c:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013f92:	e8 11 73 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013f97:	0f 20 d0             	mov    eax,cr2
c0013f9a:	59                   	pop    ecx
c0013f9b:	5b                   	pop    ebx
c0013f9c:	50                   	push   eax
c0013f9d:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013fa3:	e8 ba 72 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0013fa8:	58                   	pop    eax
c0013fa9:	5a                   	pop    edx
c0013faa:	68 05 4f 02 c0       	push   0xc0024f05
c0013faf:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013fb5:	e8 ee 72 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013fba:	0f 20 d8             	mov    eax,cr3
c0013fbd:	59                   	pop    ecx
c0013fbe:	5b                   	pop    ebx
c0013fbf:	50                   	push   eax
c0013fc0:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013fc6:	e8 97 72 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0013fcb:	58                   	pop    eax
c0013fcc:	5a                   	pop    edx
c0013fcd:	68 18 4f 02 c0       	push   0xc0024f18
c0013fd2:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013fd8:	e8 cb 72 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0013fdd:	0f 20 e0             	mov    eax,cr4
c0013fe0:	59                   	pop    ecx
c0013fe1:	5b                   	pop    ebx
c0013fe2:	50                   	push   eax
c0013fe3:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013fe9:	e8 74 72 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0013fee:	58                   	pop    eax
c0013fef:	5a                   	pop    edx
c0013ff0:	68 22 4f 02 c0       	push   0xc0024f22
c0013ff5:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0013ffb:	e8 a8 72 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014000:	83 c4 10             	add    esp,0x10
c0014003:	eb fe                	jmp    c0014003 <Krnl::panic(char const*)+0x1fc>
c0014005:	51                   	push   ecx
c0014006:	51                   	push   ecx
c0014007:	68 a4 4f 02 c0       	push   0xc0024fa4
c001400c:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0014012:	e8 91 72 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014017:	5b                   	pop    ebx
c0014018:	58                   	pop    eax
c0014019:	68 ce 4e 02 c0       	push   0xc0024ece
c001401e:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c0014024:	e8 7f 72 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014029:	58                   	pop    eax
c001402a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001402f:	5a                   	pop    edx
c0014030:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014033:	83 c0 0c             	add    eax,0xc
c0014036:	50                   	push   eax
c0014037:	ff 35 24 74 02 c0    	push   DWORD PTR ds:0xc0027424
c001403d:	e8 66 72 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0014042:	83 c4 10             	add    esp,0x10
c0014045:	e9 bd fe ff ff       	jmp    c0013f07 <Krnl::panic(char const*)+0x100>

c001404a <Krnl::powerThread(void*)>:
c001404a:	53                   	push   ebx
c001404b:	83 ec 08             	sub    esp,0x8
c001404e:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0014053:	48                   	dec    eax
c0014054:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0014059:	75 01                	jne    c001405c <Krnl::powerThread(void*)+0x12>
c001405b:	fb                   	sti    
c001405c:	52                   	push   edx
c001405d:	52                   	push   edx
c001405e:	ff 35 e4 9e 02 c0    	push   DWORD PTR ds:0xc0029ee4
c0014064:	68 7a 50 02 c0       	push   0xc002507a
c0014069:	e8 57 8f ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001406e:	59                   	pop    ecx
c001406f:	8b 1d d4 9e 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ed4
c0014075:	58                   	pop    eax
c0014076:	c6 05 a0 9e 02 c0 00 	mov    BYTE PTR ds:0xc0029ea0,0x0
c001407d:	53                   	push   ebx
c001407e:	68 84 50 02 c0       	push   0xc0025084
c0014083:	e8 3d 8f ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0014088:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001408f:	e8 e0 36 00 00       	call   c0017774 <sleep(unsigned int)>
c0014094:	a1 e4 9e 02 c0       	mov    eax,ds:0xc0029ee4
c0014099:	83 c4 10             	add    esp,0x10
c001409c:	83 c0 0a             	add    eax,0xa
c001409f:	85 db                	test   ebx,ebx
c00140a1:	a3 e4 9e 02 c0       	mov    ds:0xc0029ee4,eax
c00140a6:	74 b4                	je     c001405c <Krnl::powerThread(void*)+0x12>
c00140a8:	39 d8                	cmp    eax,ebx
c00140aa:	7e b0                	jle    c001405c <Krnl::powerThread(void*)+0x12>
c00140ac:	83 ec 0c             	sub    esp,0xc
c00140af:	68 9c 50 02 c0       	push   0xc002509c
c00140b4:	e8 0c 8f ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00140b9:	58                   	pop    eax
c00140ba:	ff 35 a8 73 02 c0    	push   DWORD PTR ds:0xc00273a8
c00140c0:	e8 35 52 ff ff       	call   c00092fa <Computer::sleep()>
c00140c5:	83 c4 10             	add    esp,0x10
c00140c8:	eb 92                	jmp    c001405c <Krnl::powerThread(void*)+0x12>

c00140ca <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00140ca:	57                   	push   edi
c00140cb:	b9 09 00 00 00       	mov    ecx,0x9
c00140d0:	56                   	push   esi
c00140d1:	bf c0 9e 02 c0       	mov    edi,0xc0029ec0
c00140d6:	fc                   	cld    
c00140d7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00140db:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00140dd:	5e                   	pop    esi
c00140de:	5f                   	pop    edi
c00140df:	c3                   	ret    

c00140e0 <Krnl::userIOReceived()>:
c00140e0:	c7 05 e4 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ee4,0x0
c00140ea:	c3                   	ret    

c00140eb <Krnl::handlePowerButton()>:
c00140eb:	83 ec 0c             	sub    esp,0xc
c00140ee:	a1 c0 9e 02 c0       	mov    eax,ds:0xc0029ec0
c00140f3:	83 f8 02             	cmp    eax,0x2
c00140f6:	75 10                	jne    c0014108 <Krnl::handlePowerButton()+0x1d>
c00140f8:	83 ec 0c             	sub    esp,0xc
c00140fb:	ff 35 a8 73 02 c0    	push   DWORD PTR ds:0xc00273a8
c0014101:	e8 c4 51 ff ff       	call   c00092ca <Computer::shutdown()>
c0014106:	eb 11                	jmp    c0014119 <Krnl::handlePowerButton()+0x2e>
c0014108:	48                   	dec    eax
c0014109:	75 11                	jne    c001411c <Krnl::handlePowerButton()+0x31>
c001410b:	83 ec 0c             	sub    esp,0xc
c001410e:	ff 35 a8 73 02 c0    	push   DWORD PTR ds:0xc00273a8
c0014114:	e8 e1 51 ff ff       	call   c00092fa <Computer::sleep()>
c0014119:	83 c4 10             	add    esp,0x10
c001411c:	83 c4 0c             	add    esp,0xc
c001411f:	c3                   	ret    

c0014120 <Krnl::handleSleepButton()>:
c0014120:	83 ec 0c             	sub    esp,0xc
c0014123:	a1 c4 9e 02 c0       	mov    eax,ds:0xc0029ec4
c0014128:	83 f8 02             	cmp    eax,0x2
c001412b:	75 10                	jne    c001413d <Krnl::handleSleepButton()+0x1d>
c001412d:	83 ec 0c             	sub    esp,0xc
c0014130:	ff 35 a8 73 02 c0    	push   DWORD PTR ds:0xc00273a8
c0014136:	e8 8f 51 ff ff       	call   c00092ca <Computer::shutdown()>
c001413b:	eb 11                	jmp    c001414e <Krnl::handleSleepButton()+0x2e>
c001413d:	48                   	dec    eax
c001413e:	75 11                	jne    c0014151 <Krnl::handleSleepButton()+0x31>
c0014140:	83 ec 0c             	sub    esp,0xc
c0014143:	ff 35 a8 73 02 c0    	push   DWORD PTR ds:0xc00273a8
c0014149:	e8 ac 51 ff ff       	call   c00092fa <Computer::sleep()>
c001414e:	83 c4 10             	add    esp,0x10
c0014151:	83 c4 0c             	add    esp,0xc
c0014154:	c3                   	ret    

c0014155 <Krnl::setupPowerManager()>:
c0014155:	83 ec 0c             	sub    esp,0xc
c0014158:	c7 05 e4 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ee4,0x0
c0014162:	68 f0 00 00 00       	push   0xf0
c0014167:	c6 05 a0 9e 02 c0 00 	mov    BYTE PTR ds:0xc0029ea0,0x0
c001416e:	6a 00                	push   0x0
c0014170:	68 4a 40 01 c0       	push   0xc001404a
c0014175:	ff 35 f0 a8 02 c0    	push   DWORD PTR ds:0xc002a8f0
c001417b:	e8 d0 30 00 00       	call   c0017250 <Process::createThread(void (*)(void*), void*, int)>
c0014180:	c7 05 c0 9e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0029ec0,0x2
c001418a:	c7 05 c4 9e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029ec4,0x1
c0014194:	c7 05 c8 9e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0029ec8,0x3
c001419e:	c7 05 cc 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ecc,0x0
c00141a8:	c7 05 d8 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ed8,0x0
c00141b2:	c7 05 d0 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029ed0,0x0
c00141bc:	c7 05 dc 9e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029edc,0x0
c00141c6:	c7 05 d4 9e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029ed4,0x3c
c00141d0:	c7 05 e0 9e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029ee0,0x3c
c00141da:	83 c4 1c             	add    esp,0x1c
c00141dd:	c3                   	ret    

c00141de <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00141de:	55                   	push   ebp
c00141df:	57                   	push   edi
c00141e0:	56                   	push   esi
c00141e1:	53                   	push   ebx
c00141e2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00141e8:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00141ef:	8a 1e                	mov    bl,BYTE PTR [esi]
c00141f1:	8d 6e 01             	lea    ebp,[esi+0x1]
c00141f4:	80 fb 40             	cmp    bl,0x40
c00141f7:	75 1b                	jne    c0014214 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00141f9:	8a 16                	mov    dl,BYTE PTR [esi]
c00141fb:	84 d2                	test   dl,dl
c00141fd:	0f 84 f1 00 00 00    	je     c00142f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014203:	8d 46 01             	lea    eax,[esi+0x1]
c0014206:	80 fa 3a             	cmp    dl,0x3a
c0014209:	74 04                	je     c001420f <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001420b:	89 c6                	mov    esi,eax
c001420d:	eb ea                	jmp    c00141f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001420f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014212:	89 c6                	mov    esi,eax
c0014214:	50                   	push   eax
c0014215:	6a 40                	push   0x40
c0014217:	6a 00                	push   0x0
c0014219:	8d 44 24 24          	lea    eax,[esp+0x24]
c001421d:	50                   	push   eax
c001421e:	e8 59 c4 fe ff       	call   c000067c <memset>
c0014223:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001422a:	31 c0                	xor    eax,eax
c001422c:	83 c4 10             	add    esp,0x10
c001422f:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014231:	84 c9                	test   cl,cl
c0014233:	0f 84 bb 00 00 00    	je     c00142f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014239:	3d c7 00 00 00       	cmp    eax,0xc7
c001423e:	0f 8f b0 00 00 00    	jg     c00142f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014244:	80 f9 0a             	cmp    cl,0xa
c0014247:	0f 85 98 00 00 00    	jne    c00142e5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001424d:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014252:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014256:	a8 df                	test   al,0xdf
c0014258:	0f 94 c1             	sete   cl
c001425b:	3c 23                	cmp    al,0x23
c001425d:	0f 94 c2             	sete   dl
c0014260:	08 d1                	or     cl,dl
c0014262:	75 4a                	jne    c00142ae <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014264:	8d 50 f7             	lea    edx,[eax-0x9]
c0014267:	80 fa 01             	cmp    dl,0x1
c001426a:	76 42                	jbe    c00142ae <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001426c:	3c 5b                	cmp    al,0x5b
c001426e:	75 42                	jne    c00142b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014270:	80 fb 40             	cmp    bl,0x40
c0014273:	75 39                	jne    c00142ae <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014275:	83 ec 0c             	sub    esp,0xc
c0014278:	8d 54 24 65          	lea    edx,[esp+0x65]
c001427c:	52                   	push   edx
c001427d:	e8 16 c4 fe ff       	call   c0000698 <strlen>
c0014282:	83 c4 10             	add    esp,0x10
c0014285:	83 f8 3f             	cmp    eax,0x3f
c0014288:	77 6a                	ja     c00142f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001428a:	50                   	push   eax
c001428b:	50                   	push   eax
c001428c:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014290:	52                   	push   edx
c0014291:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014295:	52                   	push   edx
c0014296:	e8 9d c4 fe ff       	call   c0000738 <strcpy>
c001429b:	58                   	pop    eax
c001429c:	8d 54 24 24          	lea    edx,[esp+0x24]
c00142a0:	52                   	push   edx
c00142a1:	e8 f2 c3 fe ff       	call   c0000698 <strlen>
c00142a6:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00142ab:	83 c4 10             	add    esp,0x10
c00142ae:	31 d2                	xor    edx,edx
c00142b0:	eb 3a                	jmp    c00142ec <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00142b2:	80 fb 40             	cmp    bl,0x40
c00142b5:	74 06                	je     c00142bd <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00142b7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00142bb:	eb 20                	jmp    c00142dd <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00142bd:	50                   	push   eax
c00142be:	50                   	push   eax
c00142bf:	55                   	push   ebp
c00142c0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00142c4:	50                   	push   eax
c00142c5:	e8 fa c4 fe ff       	call   c00007c4 <strcmp>
c00142ca:	83 c4 10             	add    esp,0x10
c00142cd:	85 c0                	test   eax,eax
c00142cf:	75 dd                	jne    c00142ae <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00142d1:	eb e4                	jmp    c00142b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00142d3:	8d 50 01             	lea    edx,[eax+0x1]
c00142d6:	80 f9 3d             	cmp    cl,0x3d
c00142d9:	74 1d                	je     c00142f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00142db:	89 d0                	mov    eax,edx
c00142dd:	8a 08                	mov    cl,BYTE PTR [eax]
c00142df:	84 c9                	test   cl,cl
c00142e1:	75 f0                	jne    c00142d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00142e3:	eb 0f                	jmp    c00142f4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00142e5:	8d 50 01             	lea    edx,[eax+0x1]
c00142e8:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00142ec:	47                   	inc    edi
c00142ed:	89 d0                	mov    eax,edx
c00142ef:	e9 3b ff ff ff       	jmp    c001422f <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00142f4:	31 c0                	xor    eax,eax
c00142f6:	eb 33                	jmp    c001432b <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00142f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00142fc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00142ff:	50                   	push   eax
c0014300:	50                   	push   eax
c0014301:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014305:	50                   	push   eax
c0014306:	56                   	push   esi
c0014307:	e8 b8 c4 fe ff       	call   c00007c4 <strcmp>
c001430c:	83 c4 10             	add    esp,0x10
c001430f:	85 c0                	test   eax,eax
c0014311:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014315:	75 97                	jne    c00142ae <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014317:	51                   	push   ecx
c0014318:	51                   	push   ecx
c0014319:	52                   	push   edx
c001431a:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014321:	e8 12 c4 fe ff       	call   c0000738 <strcpy>
c0014326:	83 c4 10             	add    esp,0x10
c0014329:	b0 01                	mov    al,0x1
c001432b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014331:	5b                   	pop    ebx
c0014332:	5e                   	pop    esi
c0014333:	5f                   	pop    edi
c0014334:	5d                   	pop    ebp
c0014335:	c3                   	ret    

c0014336 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014336:	57                   	push   edi
c0014337:	56                   	push   esi
c0014338:	53                   	push   ebx
c0014339:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001433f:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0014346:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001434d:	53                   	push   ebx
c001434e:	e8 45 c3 fe ff       	call   c0000698 <strlen>
c0014353:	89 34 24             	mov    DWORD PTR [esp],esi
c0014356:	89 c7                	mov    edi,eax
c0014358:	e8 3b c3 fe ff       	call   c0000698 <strlen>
c001435d:	83 c4 10             	add    esp,0x10
c0014360:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014364:	3d ff 00 00 00       	cmp    eax,0xff
c0014369:	0f 87 d3 00 00 00    	ja     c0014442 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001436f:	57                   	push   edi
c0014370:	57                   	push   edi
c0014371:	56                   	push   esi
c0014372:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014376:	56                   	push   esi
c0014377:	e8 bc c3 fe ff       	call   c0000738 <strcpy>
c001437c:	58                   	pop    eax
c001437d:	5a                   	pop    edx
c001437e:	68 ff 53 02 c0       	push   0xc00253ff
c0014383:	56                   	push   esi
c0014384:	e8 ef c4 fe ff       	call   c0000878 <strcat>
c0014389:	59                   	pop    ecx
c001438a:	5f                   	pop    edi
c001438b:	53                   	push   ebx
c001438c:	56                   	push   esi
c001438d:	e8 e6 c4 fe ff       	call   c0000878 <strcat>
c0014392:	58                   	pop    eax
c0014393:	5a                   	pop    edx
c0014394:	68 a9 50 02 c0       	push   0xc00250a9
c0014399:	56                   	push   esi
c001439a:	e8 d9 c4 fe ff       	call   c0000878 <strcat>
c001439f:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00143a6:	e8 0c 59 ff ff       	call   c0009cb7 <malloc>
c00143ab:	83 c4 0c             	add    esp,0xc
c00143ae:	89 c3                	mov    ebx,eax
c00143b0:	ff 35 f0 a8 02 c0    	push   DWORD PTR ds:0xc002a8f0
c00143b6:	56                   	push   esi
c00143b7:	50                   	push   eax
c00143b8:	e8 73 91 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c00143bd:	83 c4 10             	add    esp,0x10
c00143c0:	85 db                	test   ebx,ebx
c00143c2:	74 7e                	je     c0014442 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00143c4:	51                   	push   ecx
c00143c5:	51                   	push   ecx
c00143c6:	6a 01                	push   0x1
c00143c8:	53                   	push   ebx
c00143c9:	e8 3c 92 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c00143ce:	83 c4 10             	add    esp,0x10
c00143d1:	85 c0                	test   eax,eax
c00143d3:	74 08                	je     c00143dd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00143d5:	83 ec 0c             	sub    esp,0xc
c00143d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143da:	53                   	push   ebx
c00143db:	eb 5f                	jmp    c001443c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00143dd:	52                   	push   edx
c00143de:	8d 44 24 17          	lea    eax,[esp+0x17]
c00143e2:	50                   	push   eax
c00143e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00143e7:	50                   	push   eax
c00143e8:	53                   	push   ebx
c00143e9:	e8 c8 94 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c00143ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00143f2:	83 c4 10             	add    esp,0x10
c00143f5:	89 c1                	mov    ecx,eax
c00143f7:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00143fb:	74 31                	je     c001442e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00143fd:	83 ec 0c             	sub    esp,0xc
c0014400:	50                   	push   eax
c0014401:	e8 b1 58 ff ff       	call   c0009cb7 <malloc>
c0014406:	89 c6                	mov    esi,eax
c0014408:	58                   	pop    eax
c0014409:	8b 03                	mov    eax,DWORD PTR [ebx]
c001440b:	8d 54 24 20          	lea    edx,[esp+0x20]
c001440f:	52                   	push   edx
c0014410:	56                   	push   esi
c0014411:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014415:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014419:	53                   	push   ebx
c001441a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001441d:	83 c4 20             	add    esp,0x20
c0014420:	85 c0                	test   eax,eax
c0014422:	75 0a                	jne    c001442e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014424:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014428:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001442c:	74 18                	je     c0014446 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001442e:	83 ec 0c             	sub    esp,0xc
c0014431:	53                   	push   ebx
c0014432:	e8 31 92 ff ff       	call   c000d668 <File::close()>
c0014437:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014439:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001443c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001443f:	83 c4 10             	add    esp,0x10
c0014442:	31 c0                	xor    eax,eax
c0014444:	eb 3b                	jmp    c0014481 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0014446:	83 ec 0c             	sub    esp,0xc
c0014449:	53                   	push   ebx
c001444a:	e8 19 92 ff ff       	call   c000d668 <File::close()>
c001444f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014451:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014454:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014457:	83 c4 0c             	add    esp,0xc
c001445a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014461:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014468:	56                   	push   esi
c0014469:	e8 70 fd ff ff       	call   c00141de <Reg::findLineFromLoadedData(char*, char*, char*)>
c001446e:	89 34 24             	mov    DWORD PTR [esp],esi
c0014471:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014475:	e8 4d 58 ff ff       	call   c0009cc7 <free>
c001447a:	83 c4 10             	add    esp,0x10
c001447d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014481:	81 c4 20 01 00 00    	add    esp,0x120
c0014487:	5b                   	pop    ebx
c0014488:	5e                   	pop    esi
c0014489:	5f                   	pop    edi
c001448a:	c3                   	ret    

c001448b <Reg::getLine(char*, char*, char*)>:
c001448b:	57                   	push   edi
c001448c:	56                   	push   esi
c001448d:	53                   	push   ebx
c001448e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014492:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014496:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001449a:	57                   	push   edi
c001449b:	56                   	push   esi
c001449c:	53                   	push   ebx
c001449d:	68 ae 50 02 c0       	push   0xc00250ae
c00144a2:	e8 8f fe ff ff       	call   c0014336 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00144a7:	83 c4 10             	add    esp,0x10
c00144aa:	84 c0                	test   al,al
c00144ac:	75 10                	jne    c00144be <Reg::getLine(char*, char*, char*)+0x33>
c00144ae:	57                   	push   edi
c00144af:	56                   	push   esi
c00144b0:	53                   	push   ebx
c00144b1:	68 d3 50 02 c0       	push   0xc00250d3
c00144b6:	e8 7b fe ff ff       	call   c0014336 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00144bb:	83 c4 10             	add    esp,0x10
c00144be:	5b                   	pop    ebx
c00144bf:	5e                   	pop    esi
c00144c0:	5f                   	pop    edi
c00144c1:	c3                   	ret    

c00144c2 <Reg::readInt(char*, char*, int*)>:
c00144c2:	55                   	push   ebp
c00144c3:	57                   	push   edi
c00144c4:	56                   	push   esi
c00144c5:	53                   	push   ebx
c00144c6:	81 ec f0 00 00 00    	sub    esp,0xf0
c00144cc:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00144d0:	57                   	push   edi
c00144d1:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00144d8:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00144df:	e8 a7 ff ff ff       	call   c001448b <Reg::getLine(char*, char*, char*)>
c00144e4:	83 c4 10             	add    esp,0x10
c00144e7:	84 c0                	test   al,al
c00144e9:	0f 84 b3 00 00 00    	je     c00145a2 <Reg::readInt(char*, char*, int*)+0xe0>
c00144ef:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00144f3:	80 fa 2b             	cmp    dl,0x2b
c00144f6:	74 0c                	je     c0014504 <Reg::readInt(char*, char*, int*)+0x42>
c00144f8:	80 fa 2d             	cmp    dl,0x2d
c00144fb:	75 0e                	jne    c001450b <Reg::readInt(char*, char*, int*)+0x49>
c00144fd:	ba 01 00 00 00       	mov    edx,0x1
c0014502:	eb 0b                	jmp    c001450f <Reg::readInt(char*, char*, int*)+0x4d>
c0014504:	ba 01 00 00 00       	mov    edx,0x1
c0014509:	eb 02                	jmp    c001450d <Reg::readInt(char*, char*, int*)+0x4b>
c001450b:	31 d2                	xor    edx,edx
c001450d:	31 c0                	xor    eax,eax
c001450f:	be 0a 00 00 00       	mov    esi,0xa
c0014514:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0014519:	75 20                	jne    c001453b <Reg::readInt(char*, char*, int*)+0x79>
c001451b:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001451f:	80 f9 78             	cmp    cl,0x78
c0014522:	75 0a                	jne    c001452e <Reg::readInt(char*, char*, int*)+0x6c>
c0014524:	83 c2 02             	add    edx,0x2
c0014527:	be 10 00 00 00       	mov    esi,0x10
c001452c:	eb 0d                	jmp    c001453b <Reg::readInt(char*, char*, int*)+0x79>
c001452e:	80 f9 62             	cmp    cl,0x62
c0014531:	75 08                	jne    c001453b <Reg::readInt(char*, char*, int*)+0x79>
c0014533:	83 c2 02             	add    edx,0x2
c0014536:	be 02 00 00 00       	mov    esi,0x2
c001453b:	01 d7                	add    edi,edx
c001453d:	31 d2                	xor    edx,edx
c001453f:	8a 1f                	mov    bl,BYTE PTR [edi]
c0014541:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0014545:	80 fb 0d             	cmp    bl,0xd
c0014548:	0f 94 c3             	sete   bl
c001454b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014550:	0f 94 c1             	sete   cl
c0014553:	08 cb                	or     bl,cl
c0014555:	75 3a                	jne    c0014591 <Reg::readInt(char*, char*, int*)+0xcf>
c0014557:	0f af d6             	imul   edx,esi
c001455a:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001455f:	83 fe 10             	cmp    esi,0x10
c0014562:	75 26                	jne    c001458a <Reg::readInt(char*, char*, int*)+0xc8>
c0014564:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014568:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001456b:	89 e9                	mov    ecx,ebp
c001456d:	80 f9 05             	cmp    cl,0x5
c0014570:	77 06                	ja     c0014578 <Reg::readInt(char*, char*, int*)+0xb6>
c0014572:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0014576:	eb 16                	jmp    c001458e <Reg::readInt(char*, char*, int*)+0xcc>
c0014578:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001457c:	83 e9 61             	sub    ecx,0x61
c001457f:	80 f9 05             	cmp    cl,0x5
c0014582:	77 06                	ja     c001458a <Reg::readInt(char*, char*, int*)+0xc8>
c0014584:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0014588:	eb 04                	jmp    c001458e <Reg::readInt(char*, char*, int*)+0xcc>
c001458a:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001458e:	47                   	inc    edi
c001458f:	eb ae                	jmp    c001453f <Reg::readInt(char*, char*, int*)+0x7d>
c0014591:	84 c0                	test   al,al
c0014593:	74 02                	je     c0014597 <Reg::readInt(char*, char*, int*)+0xd5>
c0014595:	f7 da                	neg    edx
c0014597:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001459e:	89 10                	mov    DWORD PTR [eax],edx
c00145a0:	88 d8                	mov    al,bl
c00145a2:	81 c4 ec 00 00 00    	add    esp,0xec
c00145a8:	5b                   	pop    ebx
c00145a9:	5e                   	pop    esi
c00145aa:	5f                   	pop    edi
c00145ab:	5d                   	pop    ebp
c00145ac:	c3                   	ret    

c00145ad <Reg::readString(char*, char*, char*, int)>:
c00145ad:	57                   	push   edi
c00145ae:	56                   	push   esi
c00145af:	53                   	push   ebx
c00145b0:	81 ec d4 00 00 00    	sub    esp,0xd4
c00145b6:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00145bd:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00145c1:	57                   	push   edi
c00145c2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00145c9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00145d0:	e8 b6 fe ff ff       	call   c001448b <Reg::getLine(char*, char*, char*)>
c00145d5:	83 c4 10             	add    esp,0x10
c00145d8:	89 c6                	mov    esi,eax
c00145da:	84 c0                	test   al,al
c00145dc:	74 44                	je     c0014622 <Reg::readString(char*, char*, char*, int)+0x75>
c00145de:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00145e5:	31 c0                	xor    eax,eax
c00145e7:	4a                   	dec    edx
c00145e8:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00145eb:	84 c9                	test   cl,cl
c00145ed:	74 0f                	je     c00145fe <Reg::readString(char*, char*, char*, int)+0x51>
c00145ef:	39 c2                	cmp    edx,eax
c00145f1:	7e 0b                	jle    c00145fe <Reg::readString(char*, char*, char*, int)+0x51>
c00145f3:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00145f6:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00145fb:	40                   	inc    eax
c00145fc:	eb ea                	jmp    c00145e8 <Reg::readString(char*, char*, char*, int)+0x3b>
c00145fe:	83 ec 0c             	sub    esp,0xc
c0014601:	53                   	push   ebx
c0014602:	e8 91 c0 fe ff       	call   c0000698 <strlen>
c0014607:	83 c4 10             	add    esp,0x10
c001460a:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001460f:	75 11                	jne    c0014622 <Reg::readString(char*, char*, char*, int)+0x75>
c0014611:	83 ec 0c             	sub    esp,0xc
c0014614:	53                   	push   ebx
c0014615:	e8 7e c0 fe ff       	call   c0000698 <strlen>
c001461a:	83 c4 10             	add    esp,0x10
c001461d:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0014622:	81 c4 d0 00 00 00    	add    esp,0xd0
c0014628:	89 f0                	mov    eax,esi
c001462a:	5b                   	pop    ebx
c001462b:	5e                   	pop    esi
c001462c:	5f                   	pop    edi
c001462d:	c3                   	ret    

c001462e <Reg::readBool(char*, char*, bool*)>:
c001462e:	83 ec 20             	sub    esp,0x20
c0014631:	8d 44 24 10          	lea    eax,[esp+0x10]
c0014635:	50                   	push   eax
c0014636:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001463a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001463e:	e8 7f fe ff ff       	call   c00144c2 <Reg::readInt(char*, char*, int*)>
c0014643:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0014648:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001464c:	0f 95 02             	setne  BYTE PTR [edx]
c001464f:	83 c4 2c             	add    esp,0x2c
c0014652:	c3                   	ret    

c0014653 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0014653:	53                   	push   ebx
c0014654:	83 ec 1c             	sub    esp,0x1c
c0014657:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001465b:	8d 44 24 13          	lea    eax,[esp+0x13]
c001465f:	50                   	push   eax
c0014660:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014664:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014668:	e8 c1 ff ff ff       	call   c001462e <Reg::readBool(char*, char*, bool*)>
c001466d:	83 c4 10             	add    esp,0x10
c0014670:	84 c0                	test   al,al
c0014672:	74 04                	je     c0014678 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0014674:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0014678:	88 d8                	mov    al,bl
c001467a:	83 c4 18             	add    esp,0x18
c001467d:	5b                   	pop    ebx
c001467e:	c3                   	ret    

c001467f <Reg::readIntWithDefault(char*, char*, int)>:
c001467f:	53                   	push   ebx
c0014680:	83 ec 1c             	sub    esp,0x1c
c0014683:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0014687:	8d 44 24 10          	lea    eax,[esp+0x10]
c001468b:	50                   	push   eax
c001468c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014690:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014694:	e8 29 fe ff ff       	call   c00144c2 <Reg::readInt(char*, char*, int*)>
c0014699:	83 c4 10             	add    esp,0x10
c001469c:	84 c0                	test   al,al
c001469e:	74 04                	je     c00146a4 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00146a0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00146a4:	89 d8                	mov    eax,ebx
c00146a6:	83 c4 18             	add    esp,0x18
c00146a9:	5b                   	pop    ebx
c00146aa:	c3                   	ret    

c00146ab <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00146ab:	57                   	push   edi
c00146ac:	56                   	push   esi
c00146ad:	56                   	push   esi
c00146ae:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00146b2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00146b6:	56                   	push   esi
c00146b7:	57                   	push   edi
c00146b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146c0:	e8 e8 fe ff ff       	call   c00145ad <Reg::readString(char*, char*, char*, int)>
c00146c5:	83 c4 10             	add    esp,0x10
c00146c8:	84 c0                	test   al,al
c00146ca:	75 1a                	jne    c00146e6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00146cc:	51                   	push   ecx
c00146cd:	56                   	push   esi
c00146ce:	6a 00                	push   0x0
c00146d0:	57                   	push   edi
c00146d1:	e8 a6 bf fe ff       	call   c000067c <memset>
c00146d6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00146d9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00146dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00146df:	83 c4 10             	add    esp,0x10
c00146e2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00146e6:	89 f8                	mov    eax,edi
c00146e8:	5a                   	pop    edx
c00146e9:	5e                   	pop    esi
c00146ea:	5f                   	pop    edi
c00146eb:	c3                   	ret    

c00146ec <Sys::eject(regs*)>:
c00146ec:	83 ec 0c             	sub    esp,0xc
c00146ef:	83 ca ff             	or     edx,0xffffffff
c00146f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f6:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00146f9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00146fe:	83 e9 41             	sub    ecx,0x41
c0014701:	83 f9 19             	cmp    ecx,0x19
c0014704:	77 18                	ja     c001471e <Sys::eject(regs*)+0x32>
c0014706:	8b 0c 8d 60 99 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd66a0]
c001470d:	85 c9                	test   ecx,ecx
c001470f:	74 0d                	je     c001471e <Sys::eject(regs*)+0x32>
c0014711:	83 ec 0c             	sub    esp,0xc
c0014714:	51                   	push   ecx
c0014715:	e8 ea af ff ff       	call   c000f704 <LogicalDisk::eject()>
c001471a:	83 c4 10             	add    esp,0x10
c001471d:	99                   	cdq    
c001471e:	83 c4 0c             	add    esp,0xc
c0014721:	c3                   	ret    

c0014722 <Sys::exit(regs*)>:
c0014722:	83 ec 18             	sub    esp,0x18
c0014725:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014729:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001472c:	e8 53 36 00 00       	call   c0017d84 <terminateTask(int)>
c0014731:	83 c8 ff             	or     eax,0xffffffff
c0014734:	83 c4 1c             	add    esp,0x1c
c0014737:	89 c2                	mov    edx,eax
c0014739:	c3                   	ret    

c001473a <Sys::getCwd(regs*)>:
c001473a:	83 ec 10             	sub    esp,0x10
c001473d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014741:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014744:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014747:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001474c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001474f:	e8 de 8b ff ff       	call   c000d332 <Fs::getcwd(Process*, char*, int)>
c0014754:	83 c4 1c             	add    esp,0x1c
c0014757:	99                   	cdq    
c0014758:	c3                   	ret    

c0014759 <Sys::getPID(regs*)>:
c0014759:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001475e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014761:	8b 00                	mov    eax,DWORD PTR [eax]
c0014763:	99                   	cdq    
c0014764:	c3                   	ret    

c0014765 <Sys::getRAMData(regs*)>:
c0014765:	8b 0d d8 73 02 c0    	mov    ecx,DWORD PTR ds:0xc00273d8
c001476b:	69 05 d4 73 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00273d4,0xc8
c0014775:	99                   	cdq    
c0014776:	f7 f9                	idiv   ecx
c0014778:	c1 e0 18             	shl    eax,0x18
c001477b:	09 c8                	or     eax,ecx
c001477d:	99                   	cdq    
c001477e:	c3                   	ret    

c001477f <Sys::getVGAPtr(regs*)>:
c001477f:	55                   	push   ebp
c0014780:	57                   	push   edi
c0014781:	56                   	push   esi
c0014782:	53                   	push   ebx
c0014783:	83 ec 18             	sub    esp,0x18
c0014786:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001478a:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001478d:	e8 f6 30 00 00       	call   c0017888 <Thr::processFromPID(int)>
c0014792:	83 c4 10             	add    esp,0x10
c0014795:	89 c1                	mov    ecx,eax
c0014797:	b8 01 00 00 00       	mov    eax,0x1
c001479c:	85 c9                	test   ecx,ecx
c001479e:	74 59                	je     c00147f9 <Sys::getVGAPtr(regs*)+0x7a>
c00147a0:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c00147a6:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00147aa:	74 0c                	je     c00147b8 <Sys::getVGAPtr(regs*)+0x39>
c00147ac:	83 ec 0c             	sub    esp,0xc
c00147af:	53                   	push   ebx
c00147b0:	e8 f0 65 ff ff       	call   c000ada5 <setActiveTerminal(VgaText*)>
c00147b5:	83 c4 10             	add    esp,0x10
c00147b8:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00147bb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00147be:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00147c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00147c5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00147c8:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00147cb:	81 c3 82 00 00 00    	add    ebx,0x82
c00147d1:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00147d7:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00147da:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c00147dd:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00147e3:	50                   	push   eax
c00147e4:	50                   	push   eax
c00147e5:	53                   	push   ebx
c00147e6:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00147e9:	05 a8 0f 00 00       	add    eax,0xfa8
c00147ee:	50                   	push   eax
c00147ef:	e8 44 bf fe ff       	call   c0000738 <strcpy>
c00147f4:	83 c4 10             	add    esp,0x10
c00147f7:	31 c0                	xor    eax,eax
c00147f9:	83 c4 0c             	add    esp,0xc
c00147fc:	31 d2                	xor    edx,edx
c00147fe:	5b                   	pop    ebx
c00147ff:	5e                   	pop    esi
c0014800:	5f                   	pop    edi
c0014801:	5d                   	pop    ebp
c0014802:	c3                   	ret    

c0014803 <Sys::loadDLL(regs*)>:
c0014803:	56                   	push   esi
c0014804:	53                   	push   ebx
c0014805:	31 d2                	xor    edx,edx
c0014807:	51                   	push   ecx
c0014808:	b8 01 00 00 00       	mov    eax,0x1
c001480d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014811:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014815:	0f 84 8c 00 00 00    	je     c00148a7 <Sys::loadDLL(regs*)+0xa4>
c001481b:	83 ec 0c             	sub    esp,0xc
c001481e:	68 14 01 00 00       	push   0x114
c0014823:	e8 8f 54 ff ff       	call   c0009cb7 <malloc>
c0014828:	83 c4 0c             	add    esp,0xc
c001482b:	89 c3                	mov    ebx,eax
c001482d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014832:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014835:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014838:	53                   	push   ebx
c0014839:	e8 f2 8c ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001483e:	83 c4 10             	add    esp,0x10
c0014841:	31 d2                	xor    edx,edx
c0014843:	b8 02 00 00 00       	mov    eax,0x2
c0014848:	85 db                	test   ebx,ebx
c001484a:	74 5b                	je     c00148a7 <Sys::loadDLL(regs*)+0xa4>
c001484c:	83 ec 0c             	sub    esp,0xc
c001484f:	53                   	push   ebx
c0014850:	e8 23 90 ff ff       	call   c000d878 <File::exists()>
c0014855:	83 c4 10             	add    esp,0x10
c0014858:	84 c0                	test   al,al
c001485a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001485c:	75 11                	jne    c001486f <Sys::loadDLL(regs*)+0x6c>
c001485e:	83 ec 0c             	sub    esp,0xc
c0014861:	53                   	push   ebx
c0014862:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014865:	83 c4 10             	add    esp,0x10
c0014868:	b8 03 00 00 00       	mov    eax,0x3
c001486d:	eb 36                	jmp    c00148a5 <Sys::loadDLL(regs*)+0xa2>
c001486f:	83 ec 0c             	sub    esp,0xc
c0014872:	53                   	push   ebx
c0014873:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014876:	58                   	pop    eax
c0014877:	5a                   	pop    edx
c0014878:	6a 00                	push   0x0
c001487a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001487d:	e8 0a 22 00 00       	call   c0016a8c <Thr::loadDLL(char const*, bool)>
c0014882:	83 c4 10             	add    esp,0x10
c0014885:	89 c1                	mov    ecx,eax
c0014887:	31 d2                	xor    edx,edx
c0014889:	b8 04 00 00 00       	mov    eax,0x4
c001488e:	85 c9                	test   ecx,ecx
c0014890:	74 15                	je     c00148a7 <Sys::loadDLL(regs*)+0xa4>
c0014892:	53                   	push   ebx
c0014893:	53                   	push   ebx
c0014894:	ff 35 a8 73 02 c0    	push   DWORD PTR ds:0xc00273a8
c001489a:	51                   	push   ecx
c001489b:	e8 1d 24 00 00       	call   c0016cbd <Thr::executeDLL(unsigned long, void*)>
c00148a0:	83 c4 10             	add    esp,0x10
c00148a3:	31 c0                	xor    eax,eax
c00148a5:	31 d2                	xor    edx,edx
c00148a7:	59                   	pop    ecx
c00148a8:	5b                   	pop    ebx
c00148a9:	5e                   	pop    esi
c00148aa:	c3                   	ret    

c00148ab <Sys::read(regs*)>:
c00148ab:	57                   	push   edi
c00148ac:	56                   	push   esi
c00148ad:	53                   	push   ebx
c00148ae:	83 ec 10             	sub    esp,0x10
c00148b1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00148b5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00148b8:	83 f8 02             	cmp    eax,0x2
c00148bb:	77 10                	ja     c00148cd <Sys::read(regs*)+0x22>
c00148bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148c5:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00148cb:	eb 0e                	jmp    c00148db <Sys::read(regs*)+0x30>
c00148cd:	83 ec 0c             	sub    esp,0xc
c00148d0:	50                   	push   eax
c00148d1:	e8 3d 72 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c00148d6:	83 c4 10             	add    esp,0x10
c00148d9:	89 c1                	mov    ecx,eax
c00148db:	83 c8 ff             	or     eax,0xffffffff
c00148de:	85 c9                	test   ecx,ecx
c00148e0:	89 c2                	mov    edx,eax
c00148e2:	74 28                	je     c001490c <Sys::read(regs*)+0x61>
c00148e4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00148ec:	31 ff                	xor    edi,edi
c00148ee:	83 ec 0c             	sub    esp,0xc
c00148f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c00148f3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00148f7:	52                   	push   edx
c00148f8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00148fb:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00148fe:	57                   	push   edi
c00148ff:	56                   	push   esi
c0014900:	51                   	push   ecx
c0014901:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014904:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014908:	83 c4 20             	add    esp,0x20
c001490b:	99                   	cdq    
c001490c:	83 c4 10             	add    esp,0x10
c001490f:	5b                   	pop    ebx
c0014910:	5e                   	pop    esi
c0014911:	5f                   	pop    edi
c0014912:	c3                   	ret    

c0014913 <Sys::sbrk(regs*)>:
c0014913:	56                   	push   esi
c0014914:	53                   	push   ebx
c0014915:	50                   	push   eax
c0014916:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001491b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001491f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014922:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014925:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001492b:	85 db                	test   ebx,ebx
c001492d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014930:	74 02                	je     c0014934 <Sys::sbrk(regs*)+0x21>
c0014932:	79 06                	jns    c001493a <Sys::sbrk(regs*)+0x27>
c0014934:	89 f0                	mov    eax,esi
c0014936:	31 d2                	xor    edx,edx
c0014938:	eb 2a                	jmp    c0014964 <Sys::sbrk(regs*)+0x51>
c001493a:	83 c8 ff             	or     eax,0xffffffff
c001493d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014943:	89 c2                	mov    edx,eax
c0014945:	77 1d                	ja     c0014964 <Sys::sbrk(regs*)+0x51>
c0014947:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001494d:	50                   	push   eax
c001494e:	c1 ea 0c             	shr    edx,0xc
c0014951:	68 07 0c 00 00       	push   0xc07
c0014956:	52                   	push   edx
c0014957:	51                   	push   ecx
c0014958:	e8 7b 7a ff ff       	call   c000c3d8 <VAS::allocatePages(int, int)>
c001495d:	89 f0                	mov    eax,esi
c001495f:	31 d2                	xor    edx,edx
c0014961:	83 c4 10             	add    esp,0x10
c0014964:	59                   	pop    ecx
c0014965:	5b                   	pop    ebx
c0014966:	5e                   	pop    esi
c0014967:	c3                   	ret    

c0014968 <Sys::setCwd(regs*)>:
c0014968:	83 ec 14             	sub    esp,0x14
c001496b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001496f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014972:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014977:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001497a:	e8 98 8f ff ff       	call   c000d917 <Fs::setcwd(Process*, char*)>
c001497f:	83 c4 1c             	add    esp,0x1c
c0014982:	99                   	cdq    
c0014983:	c3                   	ret    

c0014984 <Sys::setTime(regs*)>:
c0014984:	55                   	push   ebp
c0014985:	31 c9                	xor    ecx,ecx
c0014987:	57                   	push   edi
c0014988:	bd 0c 00 00 00       	mov    ebp,0xc
c001498d:	56                   	push   esi
c001498e:	53                   	push   ebx
c001498f:	31 db                	xor    ebx,ebx
c0014991:	83 ec 10             	sub    esp,0x10
c0014994:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014998:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001499b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001499e:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00149a1:	89 c2                	mov    edx,eax
c00149a3:	66 81 ef 6c 07       	sub    di,0x76c
c00149a8:	83 e2 1f             	and    edx,0x1f
c00149ab:	c1 e7 10             	shl    edi,0x10
c00149ae:	42                   	inc    edx
c00149af:	c1 e8 05             	shr    eax,0x5
c00149b2:	88 d1                	mov    cl,dl
c00149b4:	31 d2                	xor    edx,edx
c00149b6:	f7 f5                	div    ebp
c00149b8:	89 dd                	mov    ebp,ebx
c00149ba:	88 d5                	mov    ch,dl
c00149bc:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00149c2:	0f b7 c1             	movzx  eax,cx
c00149c5:	31 d2                	xor    edx,edx
c00149c7:	09 f8                	or     eax,edi
c00149c9:	bf 3c 00 00 00       	mov    edi,0x3c
c00149ce:	89 c1                	mov    ecx,eax
c00149d0:	89 f0                	mov    eax,esi
c00149d2:	f7 f7                	div    edi
c00149d4:	c1 e2 10             	shl    edx,0x10
c00149d7:	09 d5                	or     ebp,edx
c00149d9:	31 d2                	xor    edx,edx
c00149db:	89 eb                	mov    ebx,ebp
c00149dd:	f7 f7                	div    edi
c00149df:	bf 10 0e 00 00       	mov    edi,0xe10
c00149e4:	88 d7                	mov    bh,dl
c00149e6:	89 f0                	mov    eax,esi
c00149e8:	31 d2                	xor    edx,edx
c00149ea:	f7 f7                	div    edi
c00149ec:	bf 18 00 00 00       	mov    edi,0x18
c00149f1:	31 d2                	xor    edx,edx
c00149f3:	f7 f7                	div    edi
c00149f5:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c00149fa:	88 d3                	mov    bl,dl
c00149fc:	53                   	push   ebx
c00149fd:	51                   	push   ecx
c00149fe:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0014a04:	e8 4d 97 ff ff       	call   c000e156 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014a09:	83 c4 1c             	add    esp,0x1c
c0014a0c:	83 f0 01             	xor    eax,0x1
c0014a0f:	5b                   	pop    ebx
c0014a10:	0f b6 c0             	movzx  eax,al
c0014a13:	5e                   	pop    esi
c0014a14:	31 d2                	xor    edx,edx
c0014a16:	5f                   	pop    edi
c0014a17:	5d                   	pop    ebp
c0014a18:	c3                   	ret    

c0014a19 <Sys::timezone(regs*)>:
c0014a19:	53                   	push   ebx
c0014a1a:	83 ec 08             	sub    esp,0x8
c0014a1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a21:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014a25:	75 17                	jne    c0014a3e <Sys::timezone(regs*)+0x25>
c0014a27:	83 ec 0c             	sub    esp,0xc
c0014a2a:	68 ee 50 02 c0       	push   0xc00250ee
c0014a2f:	e8 91 85 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0014a34:	83 c8 ff             	or     eax,0xffffffff
c0014a37:	83 c4 10             	add    esp,0x10
c0014a3a:	89 c2                	mov    edx,eax
c0014a3c:	eb 20                	jmp    c0014a5e <Sys::timezone(regs*)+0x45>
c0014a3e:	83 ec 0c             	sub    esp,0xc
c0014a41:	68 03 51 02 c0       	push   0xc0025103
c0014a46:	e8 7a 85 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0014a4b:	58                   	pop    eax
c0014a4c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014a4f:	e8 64 94 ff ff       	call   c000deb8 <User::loadClockSettings(int)>
c0014a54:	83 c4 10             	add    esp,0x10
c0014a57:	b8 01 00 00 00       	mov    eax,0x1
c0014a5c:	31 d2                	xor    edx,edx
c0014a5e:	83 c4 08             	add    esp,0x8
c0014a61:	5b                   	pop    ebx
c0014a62:	c3                   	ret    

c0014a63 <Sys::write(regs*)>:
c0014a63:	57                   	push   edi
c0014a64:	56                   	push   esi
c0014a65:	53                   	push   ebx
c0014a66:	83 ec 10             	sub    esp,0x10
c0014a69:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014a6d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014a70:	83 f8 02             	cmp    eax,0x2
c0014a73:	77 10                	ja     c0014a85 <Sys::write(regs*)+0x22>
c0014a75:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a7a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a7d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014a83:	eb 0e                	jmp    c0014a93 <Sys::write(regs*)+0x30>
c0014a85:	83 ec 0c             	sub    esp,0xc
c0014a88:	50                   	push   eax
c0014a89:	e8 85 70 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0014a8e:	83 c4 10             	add    esp,0x10
c0014a91:	89 c1                	mov    ecx,eax
c0014a93:	83 c8 ff             	or     eax,0xffffffff
c0014a96:	85 c9                	test   ecx,ecx
c0014a98:	89 c2                	mov    edx,eax
c0014a9a:	74 28                	je     c0014ac4 <Sys::write(regs*)+0x61>
c0014a9c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014aa4:	31 ff                	xor    edi,edi
c0014aa6:	83 ec 0c             	sub    esp,0xc
c0014aa9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014aab:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014aaf:	52                   	push   edx
c0014ab0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014ab3:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014ab6:	57                   	push   edi
c0014ab7:	56                   	push   esi
c0014ab8:	51                   	push   ecx
c0014ab9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014abc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014ac0:	83 c4 20             	add    esp,0x20
c0014ac3:	99                   	cdq    
c0014ac4:	83 c4 10             	add    esp,0x10
c0014ac7:	5b                   	pop    ebx
c0014ac8:	5e                   	pop    esi
c0014ac9:	5f                   	pop    edi
c0014aca:	c3                   	ret    

c0014acb <Sys::wsbe(regs*)>:
c0014acb:	57                   	push   edi
c0014acc:	b9 0b 00 00 00       	mov    ecx,0xb
c0014ad1:	56                   	push   esi
c0014ad2:	be 42 51 02 c0       	mov    esi,0xc0025142
c0014ad7:	53                   	push   ebx
c0014ad8:	83 ec 30             	sub    esp,0x30
c0014adb:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014adf:	fc                   	cld    
c0014ae0:	83 ec 0c             	sub    esp,0xc
c0014ae3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014ae5:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014ae9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014aee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014af1:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014af7:	8b 06                	mov    eax,DWORD PTR [esi]
c0014af9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014afc:	57                   	push   edi
c0014afd:	e8 96 bb fe ff       	call   c0000698 <strlen>
c0014b02:	5a                   	pop    edx
c0014b03:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014b07:	52                   	push   edx
c0014b08:	31 d2                	xor    edx,edx
c0014b0a:	57                   	push   edi
c0014b0b:	52                   	push   edx
c0014b0c:	50                   	push   eax
c0014b0d:	56                   	push   esi
c0014b0e:	ff d3                	call   ebx
c0014b10:	83 c4 14             	add    esp,0x14
c0014b13:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014b17:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014b1a:	e8 65 32 00 00       	call   c0017d84 <terminateTask(int)>
c0014b1f:	83 c4 40             	add    esp,0x40
c0014b22:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014b27:	5b                   	pop    ebx
c0014b28:	31 d2                	xor    edx,edx
c0014b2a:	5e                   	pop    esi
c0014b2b:	5f                   	pop    edi
c0014b2c:	c3                   	ret    

c0014b2d <Sys::yield(regs*)>:
c0014b2d:	83 ec 0c             	sub    esp,0xc
c0014b30:	fa                   	cli    
c0014b31:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c0014b37:	e8 30 29 00 00       	call   c001746c <schedule()>
c0014b3c:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0014b41:	48                   	dec    eax
c0014b42:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0014b47:	75 01                	jne    c0014b4a <Sys::yield(regs*)+0x1d>
c0014b49:	fb                   	sti    
c0014b4a:	8b 15 cc 99 02 c0    	mov    edx,DWORD PTR ds:0xc00299cc
c0014b50:	83 c4 0c             	add    esp,0xc
c0014b53:	89 d0                	mov    eax,edx
c0014b55:	c1 ea 11             	shr    edx,0x11
c0014b58:	c1 e0 07             	shl    eax,0x7
c0014b5b:	25 80 30 0f 00       	and    eax,0xf3080
c0014b60:	31 d0                	xor    eax,edx
c0014b62:	31 d2                	xor    edx,edx
c0014b64:	c3                   	ret    

c0014b65 <sysCallSeekDir(regs*)>:
c0014b65:	31 c0                	xor    eax,eax
c0014b67:	31 d2                	xor    edx,edx
c0014b69:	c3                   	ret    

c0014b6a <sysCallTellDir(regs*)>:
c0014b6a:	31 c0                	xor    eax,eax
c0014b6c:	31 d2                	xor    edx,edx
c0014b6e:	c3                   	ret    

c0014b6f <sysCallVerify(regs*)>:
c0014b6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b73:	31 d2                	xor    edx,edx
c0014b75:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014b78:	c3                   	ret    

c0014b79 <sysCallGetArgc(regs*)>:
c0014b79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b7e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014b81:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0014b87:	99                   	cdq    
c0014b88:	c3                   	ret    

c0014b89 <sysFormatDisk(regs*)>:
c0014b89:	56                   	push   esi
c0014b8a:	53                   	push   ebx
c0014b8b:	53                   	push   ebx
c0014b8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b90:	8b 1d d8 74 02 c0    	mov    ebx,DWORD PTR ds:0xc00274d8
c0014b96:	eb 25                	jmp    c0014bbd <sysFormatDisk(regs*)+0x34>
c0014b98:	83 ec 0c             	sub    esp,0xc
c0014b9b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014b9e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014ba0:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014ba3:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014ba6:	50                   	push   eax
c0014ba7:	ff 34 85 60 99 02 c0 	push   DWORD PTR [eax*4-0x3ffd66a0]
c0014bae:	53                   	push   ebx
c0014baf:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0014bb2:	83 c4 20             	add    esp,0x20
c0014bb5:	83 f8 08             	cmp    eax,0x8
c0014bb8:	75 12                	jne    c0014bcc <sysFormatDisk(regs*)+0x43>
c0014bba:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0014bbd:	85 db                	test   ebx,ebx
c0014bbf:	75 d7                	jne    c0014b98 <sysFormatDisk(regs*)+0xf>
c0014bc1:	59                   	pop    ecx
c0014bc2:	b8 03 00 00 00       	mov    eax,0x3
c0014bc7:	31 d2                	xor    edx,edx
c0014bc9:	5b                   	pop    ebx
c0014bca:	5e                   	pop    esi
c0014bcb:	c3                   	ret    
c0014bcc:	85 c0                	test   eax,eax
c0014bce:	74 1b                	je     c0014beb <sysFormatDisk(regs*)+0x62>
c0014bd0:	83 f8 09             	cmp    eax,0x9
c0014bd3:	74 0b                	je     c0014be0 <sysFormatDisk(regs*)+0x57>
c0014bd5:	59                   	pop    ecx
c0014bd6:	b8 02 00 00 00       	mov    eax,0x2
c0014bdb:	31 d2                	xor    edx,edx
c0014bdd:	5b                   	pop    ebx
c0014bde:	5e                   	pop    esi
c0014bdf:	c3                   	ret    
c0014be0:	59                   	pop    ecx
c0014be1:	b8 01 00 00 00       	mov    eax,0x1
c0014be6:	31 d2                	xor    edx,edx
c0014be8:	5b                   	pop    ebx
c0014be9:	5e                   	pop    esi
c0014bea:	c3                   	ret    
c0014beb:	59                   	pop    ecx
c0014bec:	31 c0                	xor    eax,eax
c0014bee:	31 d2                	xor    edx,edx
c0014bf0:	5b                   	pop    ebx
c0014bf1:	5e                   	pop    esi
c0014bf2:	c3                   	ret    

c0014bf3 <sysSetDiskVolumeLabel(regs*)>:
c0014bf3:	56                   	push   esi
c0014bf4:	53                   	push   ebx
c0014bf5:	53                   	push   ebx
c0014bf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014bfa:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0014bfd:	83 f8 19             	cmp    eax,0x19
c0014c00:	77 2d                	ja     c0014c2f <sysSetDiskVolumeLabel(regs*)+0x3c>
c0014c02:	8b 0c 85 60 99 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd66a0]
c0014c09:	85 c9                	test   ecx,ecx
c0014c0b:	74 22                	je     c0014c2f <sysSetDiskVolumeLabel(regs*)+0x3c>
c0014c0d:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0014c10:	85 db                	test   ebx,ebx
c0014c12:	74 1b                	je     c0014c2f <sysSetDiskVolumeLabel(regs*)+0x3c>
c0014c14:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0014c1a:	85 d2                	test   edx,edx
c0014c1c:	74 11                	je     c0014c2f <sysSetDiskVolumeLabel(regs*)+0x3c>
c0014c1e:	8b 32                	mov    esi,DWORD PTR [edx]
c0014c20:	53                   	push   ebx
c0014c21:	50                   	push   eax
c0014c22:	51                   	push   ecx
c0014c23:	52                   	push   edx
c0014c24:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0014c27:	83 c4 10             	add    esp,0x10
c0014c2a:	99                   	cdq    
c0014c2b:	59                   	pop    ecx
c0014c2c:	5b                   	pop    ebx
c0014c2d:	5e                   	pop    esi
c0014c2e:	c3                   	ret    
c0014c2f:	59                   	pop    ecx
c0014c30:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014c35:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014c3a:	5b                   	pop    ebx
c0014c3b:	5e                   	pop    esi
c0014c3c:	c3                   	ret    

c0014c3d <sysGetDiskVolumeLabel(regs*)>:
c0014c3d:	57                   	push   edi
c0014c3e:	56                   	push   esi
c0014c3f:	53                   	push   ebx
c0014c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c44:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0014c47:	83 fa 19             	cmp    edx,0x19
c0014c4a:	77 38                	ja     c0014c84 <sysGetDiskVolumeLabel(regs*)+0x47>
c0014c4c:	8b 0c 95 60 99 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd66a0]
c0014c53:	85 c9                	test   ecx,ecx
c0014c55:	74 2d                	je     c0014c84 <sysGetDiskVolumeLabel(regs*)+0x47>
c0014c57:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0014c5a:	85 db                	test   ebx,ebx
c0014c5c:	74 26                	je     c0014c84 <sysGetDiskVolumeLabel(regs*)+0x47>
c0014c5e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0014c61:	85 f6                	test   esi,esi
c0014c63:	74 1f                	je     c0014c84 <sysGetDiskVolumeLabel(regs*)+0x47>
c0014c65:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0014c6b:	85 c0                	test   eax,eax
c0014c6d:	74 15                	je     c0014c84 <sysGetDiskVolumeLabel(regs*)+0x47>
c0014c6f:	83 ec 0c             	sub    esp,0xc
c0014c72:	8b 38                	mov    edi,DWORD PTR [eax]
c0014c74:	56                   	push   esi
c0014c75:	53                   	push   ebx
c0014c76:	52                   	push   edx
c0014c77:	51                   	push   ecx
c0014c78:	50                   	push   eax
c0014c79:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0014c7c:	83 c4 20             	add    esp,0x20
c0014c7f:	99                   	cdq    
c0014c80:	5b                   	pop    ebx
c0014c81:	5e                   	pop    esi
c0014c82:	5f                   	pop    edi
c0014c83:	c3                   	ret    
c0014c84:	5b                   	pop    ebx
c0014c85:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014c8a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014c8f:	5e                   	pop    esi
c0014c90:	5f                   	pop    edi
c0014c91:	c3                   	ret    

c0014c92 <sysShutdown(regs*)>:
c0014c92:	83 ec 0c             	sub    esp,0xc
c0014c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c99:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014c9c:	85 c0                	test   eax,eax
c0014c9e:	74 18                	je     c0014cb8 <sysShutdown(regs*)+0x26>
c0014ca0:	83 f8 01             	cmp    eax,0x1
c0014ca3:	74 38                	je     c0014cdd <sysShutdown(regs*)+0x4b>
c0014ca5:	83 f8 02             	cmp    eax,0x2
c0014ca8:	74 24                	je     c0014cce <sysShutdown(regs*)+0x3c>
c0014caa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014caf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014cb4:	83 c4 0c             	add    esp,0xc
c0014cb7:	c3                   	ret    
c0014cb8:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0014cbd:	8b 10                	mov    edx,DWORD PTR [eax]
c0014cbf:	6a 00                	push   0x0
c0014cc1:	6a 00                	push   0x0
c0014cc3:	6a 00                	push   0x0
c0014cc5:	50                   	push   eax
c0014cc6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014cc9:	83 c4 10             	add    esp,0x10
c0014ccc:	eb dc                	jmp    c0014caa <sysShutdown(regs*)+0x18>
c0014cce:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0014cd3:	8b 10                	mov    edx,DWORD PTR [eax]
c0014cd5:	6a 00                	push   0x0
c0014cd7:	6a 00                	push   0x0
c0014cd9:	6a 01                	push   0x1
c0014cdb:	eb e8                	jmp    c0014cc5 <sysShutdown(regs*)+0x33>
c0014cdd:	a1 e0 99 02 c0       	mov    eax,ds:0xc00299e0
c0014ce2:	85 c0                	test   eax,eax
c0014ce4:	74 02                	je     c0014ce8 <sysShutdown(regs*)+0x56>
c0014ce6:	ff d0                	call   eax
c0014ce8:	31 c0                	xor    eax,eax
c0014cea:	31 d2                	xor    edx,edx
c0014cec:	83 c4 0c             	add    esp,0xc
c0014cef:	c3                   	ret    

c0014cf0 <sysCallRealpath(regs*)>:
c0014cf0:	83 ec 0c             	sub    esp,0xc
c0014cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cf7:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0014cfa:	85 d2                	test   edx,edx
c0014cfc:	74 07                	je     c0014d05 <sysCallRealpath(regs*)+0x15>
c0014cfe:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d01:	85 c0                	test   eax,eax
c0014d03:	75 0b                	jne    c0014d10 <sysCallRealpath(regs*)+0x20>
c0014d05:	b8 01 00 00 00       	mov    eax,0x1
c0014d0a:	31 d2                	xor    edx,edx
c0014d0c:	83 c4 0c             	add    esp,0xc
c0014d0f:	c3                   	ret    
c0014d10:	51                   	push   ecx
c0014d11:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014d17:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0014d1a:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0014d20:	51                   	push   ecx
c0014d21:	52                   	push   edx
c0014d22:	50                   	push   eax
c0014d23:	e8 5e 86 ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c0014d28:	83 c4 10             	add    esp,0x10
c0014d2b:	31 c0                	xor    eax,eax
c0014d2d:	31 d2                	xor    edx,edx
c0014d2f:	83 c4 0c             	add    esp,0xc
c0014d32:	c3                   	ret    

c0014d33 <sysCallReadDir(regs*)>:
c0014d33:	53                   	push   ebx
c0014d34:	83 ec 18             	sub    esp,0x18
c0014d37:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014d3b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014d3e:	83 f8 02             	cmp    eax,0x2
c0014d41:	76 60                	jbe    c0014da3 <sysCallReadDir(regs*)+0x70>
c0014d43:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0014d4a:	77 48                	ja     c0014d94 <sysCallReadDir(regs*)+0x61>
c0014d4c:	83 ec 0c             	sub    esp,0xc
c0014d4f:	50                   	push   eax
c0014d50:	e8 be 6d ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0014d55:	83 c4 10             	add    esp,0x10
c0014d58:	85 c0                	test   eax,eax
c0014d5a:	74 38                	je     c0014d94 <sysCallReadDir(regs*)+0x61>
c0014d5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014d64:	83 ec 0c             	sub    esp,0xc
c0014d67:	8b 10                	mov    edx,DWORD PTR [eax]
c0014d69:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0014d6d:	51                   	push   ecx
c0014d6e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d71:	6a 00                	push   0x0
c0014d73:	68 10 01 00 00       	push   0x110
c0014d78:	50                   	push   eax
c0014d79:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014d7c:	83 c4 20             	add    esp,0x20
c0014d7f:	85 c0                	test   eax,eax
c0014d81:	74 29                	je     c0014dac <sysCallReadDir(regs*)+0x79>
c0014d83:	83 f8 07             	cmp    eax,0x7
c0014d86:	74 1b                	je     c0014da3 <sysCallReadDir(regs*)+0x70>
c0014d88:	b8 02 00 00 00       	mov    eax,0x2
c0014d8d:	31 d2                	xor    edx,edx
c0014d8f:	83 c4 18             	add    esp,0x18
c0014d92:	5b                   	pop    ebx
c0014d93:	c3                   	ret    
c0014d94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014d99:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014d9e:	83 c4 18             	add    esp,0x18
c0014da1:	5b                   	pop    ebx
c0014da2:	c3                   	ret    
c0014da3:	b8 01 00 00 00       	mov    eax,0x1
c0014da8:	31 d2                	xor    edx,edx
c0014daa:	eb e3                	jmp    c0014d8f <sysCallReadDir(regs*)+0x5c>
c0014dac:	31 c0                	xor    eax,eax
c0014dae:	31 d2                	xor    edx,edx
c0014db0:	eb dd                	jmp    c0014d8f <sysCallReadDir(regs*)+0x5c>

c0014db2 <sysCallIsATTY(regs*)>:
c0014db2:	83 ec 0c             	sub    esp,0xc
c0014db5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014db9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014dbc:	83 f8 02             	cmp    eax,0x2
c0014dbf:	76 07                	jbe    c0014dc8 <sysCallIsATTY(regs*)+0x16>
c0014dc1:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0014dc6:	75 26                	jne    c0014dee <sysCallIsATTY(regs*)+0x3c>
c0014dc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dcd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014dd0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014dd6:	85 c0                	test   eax,eax
c0014dd8:	74 24                	je     c0014dfe <sysCallIsATTY(regs*)+0x4c>
c0014dda:	83 ec 0c             	sub    esp,0xc
c0014ddd:	8b 10                	mov    edx,DWORD PTR [eax]
c0014ddf:	50                   	push   eax
c0014de0:	ff 12                	call   DWORD PTR [edx]
c0014de2:	31 d2                	xor    edx,edx
c0014de4:	0f b6 c0             	movzx  eax,al
c0014de7:	83 c4 10             	add    esp,0x10
c0014dea:	83 c4 0c             	add    esp,0xc
c0014ded:	c3                   	ret    
c0014dee:	83 ec 0c             	sub    esp,0xc
c0014df1:	50                   	push   eax
c0014df2:	e8 1c 6d ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0014df7:	83 c4 10             	add    esp,0x10
c0014dfa:	85 c0                	test   eax,eax
c0014dfc:	75 dc                	jne    c0014dda <sysCallIsATTY(regs*)+0x28>
c0014dfe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014e03:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014e08:	83 c4 0c             	add    esp,0xc
c0014e0b:	c3                   	ret    

c0014e0c <sysCallSeek(regs*)>:
c0014e0c:	53                   	push   ebx
c0014e0d:	83 ec 08             	sub    esp,0x8
c0014e10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014e14:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014e17:	8d 50 fd             	lea    edx,[eax-0x3]
c0014e1a:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0014e20:	77 32                	ja     c0014e54 <sysCallSeek(regs*)+0x48>
c0014e22:	83 ec 0c             	sub    esp,0xc
c0014e25:	50                   	push   eax
c0014e26:	e8 e8 6c ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0014e2b:	83 c4 0c             	add    esp,0xc
c0014e2e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014e31:	31 db                	xor    ebx,ebx
c0014e33:	53                   	push   ebx
c0014e34:	51                   	push   ecx
c0014e35:	50                   	push   eax
c0014e36:	e8 8d 88 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0014e3b:	83 c4 10             	add    esp,0x10
c0014e3e:	85 c0                	test   eax,eax
c0014e40:	0f 95 c0             	setne  al
c0014e43:	31 d2                	xor    edx,edx
c0014e45:	0f b6 c0             	movzx  eax,al
c0014e48:	f7 d8                	neg    eax
c0014e4a:	83 d2 00             	adc    edx,0x0
c0014e4d:	83 c4 08             	add    esp,0x8
c0014e50:	f7 da                	neg    edx
c0014e52:	5b                   	pop    ebx
c0014e53:	c3                   	ret    
c0014e54:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014e59:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014e5e:	83 c4 08             	add    esp,0x8
c0014e61:	5b                   	pop    ebx
c0014e62:	c3                   	ret    

c0014e63 <sysCallTell(regs*)>:
c0014e63:	53                   	push   ebx
c0014e64:	83 ec 08             	sub    esp,0x8
c0014e67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014e6b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014e6e:	83 f8 02             	cmp    eax,0x2
c0014e71:	76 4d                	jbe    c0014ec0 <sysCallTell(regs*)+0x5d>
c0014e73:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0014e78:	76 19                	jbe    c0014e93 <sysCallTell(regs*)+0x30>
c0014e7a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014e7d:	31 d2                	xor    edx,edx
c0014e7f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014e85:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014e8c:	31 c0                	xor    eax,eax
c0014e8e:	83 c4 08             	add    esp,0x8
c0014e91:	5b                   	pop    ebx
c0014e92:	c3                   	ret    
c0014e93:	83 ec 0c             	sub    esp,0xc
c0014e96:	50                   	push   eax
c0014e97:	e8 77 6c ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0014e9c:	5a                   	pop    edx
c0014e9d:	59                   	pop    ecx
c0014e9e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014ea1:	50                   	push   eax
c0014ea2:	e8 77 88 ff ff       	call   c000d71e <File::tell(unsigned long long*)>
c0014ea7:	83 c4 10             	add    esp,0x10
c0014eaa:	85 c0                	test   eax,eax
c0014eac:	0f 95 c0             	setne  al
c0014eaf:	31 d2                	xor    edx,edx
c0014eb1:	0f b6 c0             	movzx  eax,al
c0014eb4:	f7 d8                	neg    eax
c0014eb6:	83 d2 00             	adc    edx,0x0
c0014eb9:	83 c4 08             	add    esp,0x8
c0014ebc:	f7 da                	neg    edx
c0014ebe:	5b                   	pop    ebx
c0014ebf:	c3                   	ret    
c0014ec0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014ec5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014eca:	83 c4 08             	add    esp,0x8
c0014ecd:	5b                   	pop    ebx
c0014ece:	c3                   	ret    

c0014ecf <sysCallSize(regs*)>:
c0014ecf:	53                   	push   ebx
c0014ed0:	83 ec 18             	sub    esp,0x18
c0014ed3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014ed7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014eda:	83 f8 02             	cmp    eax,0x2
c0014edd:	76 53                	jbe    c0014f32 <sysCallSize(regs*)+0x63>
c0014edf:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0014ee4:	76 19                	jbe    c0014eff <sysCallSize(regs*)+0x30>
c0014ee6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0014ee9:	31 d2                	xor    edx,edx
c0014eeb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014ef1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014ef8:	31 c0                	xor    eax,eax
c0014efa:	83 c4 18             	add    esp,0x18
c0014efd:	5b                   	pop    ebx
c0014efe:	c3                   	ret    
c0014eff:	83 ec 0c             	sub    esp,0xc
c0014f02:	50                   	push   eax
c0014f03:	e8 0b 6c ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0014f08:	83 c4 0c             	add    esp,0xc
c0014f0b:	8d 54 24 13          	lea    edx,[esp+0x13]
c0014f0f:	52                   	push   edx
c0014f10:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014f13:	50                   	push   eax
c0014f14:	e8 9d 89 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c0014f19:	83 c4 10             	add    esp,0x10
c0014f1c:	85 c0                	test   eax,eax
c0014f1e:	0f 95 c0             	setne  al
c0014f21:	31 d2                	xor    edx,edx
c0014f23:	0f b6 c0             	movzx  eax,al
c0014f26:	f7 d8                	neg    eax
c0014f28:	83 d2 00             	adc    edx,0x0
c0014f2b:	83 c4 18             	add    esp,0x18
c0014f2e:	f7 da                	neg    edx
c0014f30:	5b                   	pop    ebx
c0014f31:	c3                   	ret    
c0014f32:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014f37:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014f3c:	83 c4 18             	add    esp,0x18
c0014f3f:	5b                   	pop    ebx
c0014f40:	c3                   	ret    

c0014f41 <sysCallSizeFromFilename(regs*)>:
c0014f41:	57                   	push   edi
c0014f42:	56                   	push   esi
c0014f43:	53                   	push   ebx
c0014f44:	83 ec 20             	sub    esp,0x20
c0014f47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014f4b:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0014f4e:	83 fb 02             	cmp    ebx,0x2
c0014f51:	0f 86 88 00 00 00    	jbe    c0014fdf <sysCallSizeFromFilename(regs*)+0x9e>
c0014f57:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0014f5d:	76 1b                	jbe    c0014f7a <sysCallSizeFromFilename(regs*)+0x39>
c0014f5f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014f62:	31 d2                	xor    edx,edx
c0014f64:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014f6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014f71:	83 c4 20             	add    esp,0x20
c0014f74:	31 c0                	xor    eax,eax
c0014f76:	5b                   	pop    ebx
c0014f77:	5e                   	pop    esi
c0014f78:	5f                   	pop    edi
c0014f79:	c3                   	ret    
c0014f7a:	83 ec 0c             	sub    esp,0xc
c0014f7d:	68 14 01 00 00       	push   0x114
c0014f82:	e8 30 4d ff ff       	call   c0009cb7 <malloc>
c0014f87:	83 c4 0c             	add    esp,0xc
c0014f8a:	89 c7                	mov    edi,eax
c0014f8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f91:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014f94:	53                   	push   ebx
c0014f95:	57                   	push   edi
c0014f96:	e8 95 85 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0014f9b:	83 c4 0c             	add    esp,0xc
c0014f9e:	8d 44 24 23          	lea    eax,[esp+0x23]
c0014fa2:	50                   	push   eax
c0014fa3:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014fa6:	57                   	push   edi
c0014fa7:	e8 0a 89 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c0014fac:	83 c4 10             	add    esp,0x10
c0014faf:	85 ff                	test   edi,edi
c0014fb1:	74 14                	je     c0014fc7 <sysCallSizeFromFilename(regs*)+0x86>
c0014fb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014fb7:	8b 17                	mov    edx,DWORD PTR [edi]
c0014fb9:	83 ec 0c             	sub    esp,0xc
c0014fbc:	57                   	push   edi
c0014fbd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0014fc0:	83 c4 10             	add    esp,0x10
c0014fc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014fc7:	85 c0                	test   eax,eax
c0014fc9:	0f 95 c0             	setne  al
c0014fcc:	31 d2                	xor    edx,edx
c0014fce:	0f b6 c0             	movzx  eax,al
c0014fd1:	f7 d8                	neg    eax
c0014fd3:	83 d2 00             	adc    edx,0x0
c0014fd6:	83 c4 20             	add    esp,0x20
c0014fd9:	f7 da                	neg    edx
c0014fdb:	5b                   	pop    ebx
c0014fdc:	5e                   	pop    esi
c0014fdd:	5f                   	pop    edi
c0014fde:	c3                   	ret    
c0014fdf:	83 c4 20             	add    esp,0x20
c0014fe2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014fe7:	5b                   	pop    ebx
c0014fe8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0014fed:	5e                   	pop    esi
c0014fee:	5f                   	pop    edi
c0014fef:	c3                   	ret    

c0014ff0 <sysCallClose(regs*)>:
c0014ff0:	53                   	push   ebx
c0014ff1:	83 ec 08             	sub    esp,0x8
c0014ff4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ff8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014ffb:	83 f8 02             	cmp    eax,0x2
c0014ffe:	76 41                	jbe    c0015041 <sysCallClose(regs*)+0x51>
c0015000:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015006:	83 fa 01             	cmp    edx,0x1
c0015009:	76 2d                	jbe    c0015038 <sysCallClose(regs*)+0x48>
c001500b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015010:	77 2f                	ja     c0015041 <sysCallClose(regs*)+0x51>
c0015012:	83 ec 0c             	sub    esp,0xc
c0015015:	50                   	push   eax
c0015016:	e8 f8 6a ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c001501b:	89 c3                	mov    ebx,eax
c001501d:	89 04 24             	mov    DWORD PTR [esp],eax
c0015020:	e8 43 86 ff ff       	call   c000d668 <File::close()>
c0015025:	83 c4 10             	add    esp,0x10
c0015028:	85 db                	test   ebx,ebx
c001502a:	74 0c                	je     c0015038 <sysCallClose(regs*)+0x48>
c001502c:	83 ec 0c             	sub    esp,0xc
c001502f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015031:	53                   	push   ebx
c0015032:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015035:	83 c4 10             	add    esp,0x10
c0015038:	31 c0                	xor    eax,eax
c001503a:	31 d2                	xor    edx,edx
c001503c:	83 c4 08             	add    esp,0x8
c001503f:	5b                   	pop    ebx
c0015040:	c3                   	ret    
c0015041:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015046:	ba ff ff ff ff       	mov    edx,0xffffffff
c001504b:	83 c4 08             	add    esp,0x8
c001504e:	5b                   	pop    ebx
c001504f:	c3                   	ret    

c0015050 <sysCallOpenDir(regs*)>:
c0015050:	56                   	push   esi
c0015051:	53                   	push   ebx
c0015052:	53                   	push   ebx
c0015053:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015057:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001505a:	85 f6                	test   esi,esi
c001505c:	74 59                	je     c00150b7 <sysCallOpenDir(regs*)+0x67>
c001505e:	83 ec 0c             	sub    esp,0xc
c0015061:	68 14 01 00 00       	push   0x114
c0015066:	e8 4c 4c ff ff       	call   c0009cb7 <malloc>
c001506b:	83 c4 0c             	add    esp,0xc
c001506e:	89 c6                	mov    esi,eax
c0015070:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015075:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015078:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001507b:	56                   	push   esi
c001507c:	e8 0f 8a ff ff       	call   c000da90 <Directory::Directory(char const*, Process*)>
c0015081:	83 c4 10             	add    esp,0x10
c0015084:	85 f6                	test   esi,esi
c0015086:	74 2f                	je     c00150b7 <sysCallOpenDir(regs*)+0x67>
c0015088:	83 ec 0c             	sub    esp,0xc
c001508b:	56                   	push   esi
c001508c:	e8 d9 8a ff ff       	call   c000db6a <Directory::open()>
c0015091:	83 c4 10             	add    esp,0x10
c0015094:	85 c0                	test   eax,eax
c0015096:	75 1f                	jne    c00150b7 <sysCallOpenDir(regs*)+0x67>
c0015098:	83 ec 0c             	sub    esp,0xc
c001509b:	56                   	push   esi
c001509c:	e8 7d 67 ff ff       	call   c000b81e <UnixFile::getFileDescriptor()>
c00150a1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00150a4:	83 c4 10             	add    esp,0x10
c00150a7:	89 02                	mov    DWORD PTR [edx],eax
c00150a9:	c1 f8 1f             	sar    eax,0x1f
c00150ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00150af:	31 c0                	xor    eax,eax
c00150b1:	59                   	pop    ecx
c00150b2:	31 d2                	xor    edx,edx
c00150b4:	5b                   	pop    ebx
c00150b5:	5e                   	pop    esi
c00150b6:	c3                   	ret    
c00150b7:	59                   	pop    ecx
c00150b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00150bd:	ba ff ff ff ff       	mov    edx,0xffffffff
c00150c2:	5b                   	pop    ebx
c00150c3:	5e                   	pop    esi
c00150c4:	c3                   	ret    

c00150c5 <sysCallCloseDir(regs*)>:
c00150c5:	53                   	push   ebx
c00150c6:	83 ec 08             	sub    esp,0x8
c00150c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00150cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00150d0:	8d 50 fd             	lea    edx,[eax-0x3]
c00150d3:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00150d9:	77 2f                	ja     c001510a <sysCallCloseDir(regs*)+0x45>
c00150db:	83 ec 0c             	sub    esp,0xc
c00150de:	50                   	push   eax
c00150df:	e8 2f 6a ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c00150e4:	89 c3                	mov    ebx,eax
c00150e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00150e9:	e8 d8 8a ff ff       	call   c000dbc6 <Directory::close()>
c00150ee:	83 c4 10             	add    esp,0x10
c00150f1:	85 db                	test   ebx,ebx
c00150f3:	74 0c                	je     c0015101 <sysCallCloseDir(regs*)+0x3c>
c00150f5:	83 ec 0c             	sub    esp,0xc
c00150f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150fa:	53                   	push   ebx
c00150fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150fe:	83 c4 10             	add    esp,0x10
c0015101:	31 c0                	xor    eax,eax
c0015103:	31 d2                	xor    edx,edx
c0015105:	83 c4 08             	add    esp,0x8
c0015108:	5b                   	pop    ebx
c0015109:	c3                   	ret    
c001510a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001510f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015114:	83 c4 08             	add    esp,0x8
c0015117:	5b                   	pop    ebx
c0015118:	c3                   	ret    

c0015119 <sysCallMakeDir(regs*)>:
c0015119:	56                   	push   esi
c001511a:	53                   	push   ebx
c001511b:	83 ec 10             	sub    esp,0x10
c001511e:	68 14 01 00 00       	push   0x114
c0015123:	e8 8f 4b ff ff       	call   c0009cb7 <malloc>
c0015128:	83 c4 0c             	add    esp,0xc
c001512b:	89 c3                	mov    ebx,eax
c001512d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015132:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015135:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015139:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001513c:	53                   	push   ebx
c001513d:	e8 4e 89 ff ff       	call   c000da90 <Directory::Directory(char const*, Process*)>
c0015142:	83 c4 10             	add    esp,0x10
c0015145:	85 db                	test   ebx,ebx
c0015147:	74 32                	je     c001517b <sysCallMakeDir(regs*)+0x62>
c0015149:	83 ec 0c             	sub    esp,0xc
c001514c:	53                   	push   ebx
c001514d:	e8 f8 8b ff ff       	call   c000dd4a <Directory::create()>
c0015152:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015155:	89 c6                	mov    esi,eax
c0015157:	e8 6a 8a ff ff       	call   c000dbc6 <Directory::close()>
c001515c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001515e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015161:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015164:	83 c4 10             	add    esp,0x10
c0015167:	31 c0                	xor    eax,eax
c0015169:	59                   	pop    ecx
c001516a:	85 f6                	test   esi,esi
c001516c:	5b                   	pop    ebx
c001516d:	0f 95 c0             	setne  al
c0015170:	5e                   	pop    esi
c0015171:	31 d2                	xor    edx,edx
c0015173:	f7 d8                	neg    eax
c0015175:	83 d2 00             	adc    edx,0x0
c0015178:	f7 da                	neg    edx
c001517a:	c3                   	ret    
c001517b:	59                   	pop    ecx
c001517c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015181:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015186:	5b                   	pop    ebx
c0015187:	5e                   	pop    esi
c0015188:	c3                   	ret    

c0015189 <sysCallWait(regs*)>:
c0015189:	83 ec 10             	sub    esp,0x10
c001518c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015190:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015193:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015196:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015199:	e8 f6 24 00 00       	call   c0017694 <waitTask(int, int*, int)>
c001519e:	83 c4 1c             	add    esp,0x1c
c00151a1:	99                   	cdq    
c00151a2:	c3                   	ret    

c00151a3 <sysCallNotImpl(regs*)>:
c00151a3:	83 ec 18             	sub    esp,0x18
c00151a6:	68 6e 51 02 c0       	push   0xc002516e
c00151ab:	e8 57 ec ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c00151b0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00151b5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00151ba:	83 c4 1c             	add    esp,0x1c
c00151bd:	c3                   	ret    

c00151be <sysPanic(regs*)>:
c00151be:	83 ec 18             	sub    esp,0x18
c00151c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151c5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00151c8:	e8 3a ec ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c00151cd:	b8 01 00 00 00       	mov    eax,0x1
c00151d2:	31 d2                	xor    edx,edx
c00151d4:	83 c4 1c             	add    esp,0x1c
c00151d7:	c3                   	ret    

c00151d8 <sysCallRmdir(regs*)>:
c00151d8:	56                   	push   esi
c00151d9:	53                   	push   ebx
c00151da:	83 ec 20             	sub    esp,0x20
c00151dd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00151e1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00151e4:	68 14 01 00 00       	push   0x114
c00151e9:	e8 c9 4a ff ff       	call   c0009cb7 <malloc>
c00151ee:	83 c4 0c             	add    esp,0xc
c00151f1:	89 c3                	mov    ebx,eax
c00151f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151f8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00151fb:	56                   	push   esi
c00151fc:	53                   	push   ebx
c00151fd:	e8 2e 83 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0015202:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015205:	e8 78 85 ff ff       	call   c000d782 <File::unlink()>
c001520a:	83 c4 10             	add    esp,0x10
c001520d:	85 db                	test   ebx,ebx
c001520f:	74 14                	je     c0015225 <sysCallRmdir(regs*)+0x4d>
c0015211:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015215:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015217:	83 ec 0c             	sub    esp,0xc
c001521a:	53                   	push   ebx
c001521b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001521e:	83 c4 10             	add    esp,0x10
c0015221:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015225:	85 c0                	test   eax,eax
c0015227:	0f 95 c0             	setne  al
c001522a:	31 d2                	xor    edx,edx
c001522c:	0f b6 c0             	movzx  eax,al
c001522f:	f7 d8                	neg    eax
c0015231:	83 d2 00             	adc    edx,0x0
c0015234:	83 c4 14             	add    esp,0x14
c0015237:	f7 da                	neg    edx
c0015239:	5b                   	pop    ebx
c001523a:	5e                   	pop    esi
c001523b:	c3                   	ret    

c001523c <sysCallUnlink(regs*)>:
c001523c:	56                   	push   esi
c001523d:	53                   	push   ebx
c001523e:	83 ec 20             	sub    esp,0x20
c0015241:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015245:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015248:	68 14 01 00 00       	push   0x114
c001524d:	e8 65 4a ff ff       	call   c0009cb7 <malloc>
c0015252:	83 c4 0c             	add    esp,0xc
c0015255:	89 c3                	mov    ebx,eax
c0015257:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001525c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001525f:	56                   	push   esi
c0015260:	53                   	push   ebx
c0015261:	e8 ca 82 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0015266:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015269:	e8 14 85 ff ff       	call   c000d782 <File::unlink()>
c001526e:	83 c4 10             	add    esp,0x10
c0015271:	85 db                	test   ebx,ebx
c0015273:	74 14                	je     c0015289 <sysCallUnlink(regs*)+0x4d>
c0015275:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015279:	8b 13                	mov    edx,DWORD PTR [ebx]
c001527b:	83 ec 0c             	sub    esp,0xc
c001527e:	53                   	push   ebx
c001527f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015282:	83 c4 10             	add    esp,0x10
c0015285:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015289:	85 c0                	test   eax,eax
c001528b:	0f 95 c0             	setne  al
c001528e:	31 d2                	xor    edx,edx
c0015290:	0f b6 c0             	movzx  eax,al
c0015293:	f7 d8                	neg    eax
c0015295:	83 d2 00             	adc    edx,0x0
c0015298:	83 c4 14             	add    esp,0x14
c001529b:	f7 da                	neg    edx
c001529d:	5b                   	pop    ebx
c001529e:	5e                   	pop    esi
c001529f:	c3                   	ret    

c00152a0 <sysCallGetArgv(regs*)>:
c00152a0:	83 ec 0c             	sub    esp,0xc
c00152a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00152a7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00152aa:	85 c0                	test   eax,eax
c00152ac:	78 2b                	js     c00152d9 <sysCallGetArgv(regs*)+0x39>
c00152ae:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00152b4:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00152b7:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00152bd:	7d 1a                	jge    c00152d9 <sysCallGetArgv(regs*)+0x39>
c00152bf:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00152c6:	85 c0                	test   eax,eax
c00152c8:	74 17                	je     c00152e1 <sysCallGetArgv(regs*)+0x41>
c00152ca:	83 ec 08             	sub    esp,0x8
c00152cd:	50                   	push   eax
c00152ce:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00152d1:	e8 62 b4 fe ff       	call   c0000738 <strcpy>
c00152d6:	83 c4 10             	add    esp,0x10
c00152d9:	31 c0                	xor    eax,eax
c00152db:	31 d2                	xor    edx,edx
c00152dd:	83 c4 0c             	add    esp,0xc
c00152e0:	c3                   	ret    
c00152e1:	b8 01 00 00 00       	mov    eax,0x1
c00152e6:	31 d2                	xor    edx,edx
c00152e8:	83 c4 0c             	add    esp,0xc
c00152eb:	c3                   	ret    

c00152ec <sysCallTTYName(regs*)>:
c00152ec:	56                   	push   esi
c00152ed:	53                   	push   ebx
c00152ee:	53                   	push   ebx
c00152ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00152f3:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00152f6:	85 c0                	test   eax,eax
c00152f8:	74 5f                	je     c0015359 <sysCallTTYName(regs*)+0x6d>
c00152fa:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00152fd:	83 f8 02             	cmp    eax,0x2
c0015300:	77 3e                	ja     c0015340 <sysCallTTYName(regs*)+0x54>
c0015302:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015307:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001530a:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0015310:	85 db                	test   ebx,ebx
c0015312:	74 45                	je     c0015359 <sysCallTTYName(regs*)+0x6d>
c0015314:	83 ec 0c             	sub    esp,0xc
c0015317:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015319:	53                   	push   ebx
c001531a:	ff 10                	call   DWORD PTR [eax]
c001531c:	83 c4 10             	add    esp,0x10
c001531f:	84 c0                	test   al,al
c0015321:	74 41                	je     c0015364 <sysCallTTYName(regs*)+0x78>
c0015323:	83 ec 08             	sub    esp,0x8
c0015326:	81 c3 82 00 00 00    	add    ebx,0x82
c001532c:	53                   	push   ebx
c001532d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015330:	e8 03 b4 fe ff       	call   c0000738 <strcpy>
c0015335:	83 c4 10             	add    esp,0x10
c0015338:	31 c0                	xor    eax,eax
c001533a:	59                   	pop    ecx
c001533b:	31 d2                	xor    edx,edx
c001533d:	5b                   	pop    ebx
c001533e:	5e                   	pop    esi
c001533f:	c3                   	ret    
c0015340:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015345:	74 bb                	je     c0015302 <sysCallTTYName(regs*)+0x16>
c0015347:	83 ec 0c             	sub    esp,0xc
c001534a:	50                   	push   eax
c001534b:	e8 c3 67 ff ff       	call   c000bb13 <getFromFileDescriptor(int)>
c0015350:	83 c4 10             	add    esp,0x10
c0015353:	89 c3                	mov    ebx,eax
c0015355:	85 db                	test   ebx,ebx
c0015357:	75 bb                	jne    c0015314 <sysCallTTYName(regs*)+0x28>
c0015359:	59                   	pop    ecx
c001535a:	b8 01 00 00 00       	mov    eax,0x1
c001535f:	31 d2                	xor    edx,edx
c0015361:	5b                   	pop    ebx
c0015362:	5e                   	pop    esi
c0015363:	c3                   	ret    
c0015364:	59                   	pop    ecx
c0015365:	b8 02 00 00 00       	mov    eax,0x2
c001536a:	31 d2                	xor    edx,edx
c001536c:	5b                   	pop    ebx
c001536d:	5e                   	pop    esi
c001536e:	c3                   	ret    

c001536f <sysCallUSleep(regs*)>:
c001536f:	83 ec 1c             	sub    esp,0x1c
c0015372:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015376:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015379:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001537c:	6a 00                	push   0x0
c001537e:	6a 64                	push   0x64
c0015380:	52                   	push   edx
c0015381:	50                   	push   eax
c0015382:	e8 49 ca 00 00       	call   c0021dd0 <__udivdi3>
c0015387:	83 c4 14             	add    esp,0x14
c001538a:	50                   	push   eax
c001538b:	e8 d4 23 00 00       	call   c0017764 <milliTenthSleep(unsigned int)>
c0015390:	31 c0                	xor    eax,eax
c0015392:	31 d2                	xor    edx,edx
c0015394:	83 c4 1c             	add    esp,0x1c
c0015397:	c3                   	ret    

c0015398 <sysCallSpawn(regs*)>:
c0015398:	56                   	push   esi
c0015399:	53                   	push   ebx
c001539a:	50                   	push   eax
c001539b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001539f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00153a2:	85 c0                	test   eax,eax
c00153a4:	75 08                	jne    c00153ae <sysCallSpawn(regs*)+0x16>
c00153a6:	59                   	pop    ecx
c00153a7:	31 c0                	xor    eax,eax
c00153a9:	31 d2                	xor    edx,edx
c00153ab:	5b                   	pop    ebx
c00153ac:	5e                   	pop    esi
c00153ad:	c3                   	ret    
c00153ae:	83 ec 0c             	sub    esp,0xc
c00153b1:	68 1f 07 00 00       	push   0x71f
c00153b6:	e8 fc 48 ff ff       	call   c0009cb7 <malloc>
c00153bb:	83 c4 10             	add    esp,0x10
c00153be:	89 c6                	mov    esi,eax
c00153c0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00153c3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00153c6:	85 c0                	test   eax,eax
c00153c8:	75 32                	jne    c00153fc <sysCallSpawn(regs*)+0x64>
c00153ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153d2:	52                   	push   edx
c00153d3:	50                   	push   eax
c00153d4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00153d7:	56                   	push   esi
c00153d8:	e8 7f 1a 00 00       	call   c0016e5c <Process::Process(char const*, Process*, char**)>
c00153dd:	83 c4 10             	add    esp,0x10
c00153e0:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00153e7:	75 bd                	jne    c00153a6 <sysCallSpawn(regs*)+0xe>
c00153e9:	83 ec 0c             	sub    esp,0xc
c00153ec:	56                   	push   esi
c00153ed:	e8 56 1f 00 00       	call   c0017348 <Process::createUserThread()>
c00153f2:	8b 06                	mov    eax,DWORD PTR [esi]
c00153f4:	83 c4 10             	add    esp,0x10
c00153f7:	99                   	cdq    
c00153f8:	59                   	pop    ecx
c00153f9:	5b                   	pop    ebx
c00153fa:	5e                   	pop    esi
c00153fb:	c3                   	ret    
c00153fc:	31 c0                	xor    eax,eax
c00153fe:	eb d2                	jmp    c00153d2 <sysCallSpawn(regs*)+0x3a>

c0015400 <sysCallGetEnv(regs*)>:
c0015400:	57                   	push   edi
c0015401:	56                   	push   esi
c0015402:	53                   	push   ebx
c0015403:	83 ec 1c             	sub    esp,0x1c
c0015406:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001540a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001540f:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015412:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015415:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015418:	e8 36 e9 ff ff       	call   c0013d53 <Krnl::getProcessTotalEnvCount(Process*)>
c001541d:	83 c4 10             	add    esp,0x10
c0015420:	39 c7                	cmp    edi,eax
c0015422:	7c 14                	jl     c0015438 <sysCallGetEnv(regs*)+0x38>
c0015424:	85 f6                	test   esi,esi
c0015426:	75 0b                	jne    c0015433 <sysCallGetEnv(regs*)+0x33>
c0015428:	83 c4 10             	add    esp,0x10
c001542b:	31 c0                	xor    eax,eax
c001542d:	5b                   	pop    ebx
c001542e:	31 d2                	xor    edx,edx
c0015430:	5e                   	pop    esi
c0015431:	5f                   	pop    edi
c0015432:	c3                   	ret    
c0015433:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015436:	eb f0                	jmp    c0015428 <sysCallGetEnv(regs*)+0x28>
c0015438:	8d 44 24 08          	lea    eax,[esp+0x8]
c001543c:	52                   	push   edx
c001543d:	57                   	push   edi
c001543e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015444:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0015447:	50                   	push   eax
c0015448:	e8 26 e9 ff ff       	call   c0013d73 <Krnl::getProcessEnvPair(Process*, int)>
c001544d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015450:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015454:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015458:	83 c4 0c             	add    esp,0xc
c001545b:	85 c9                	test   ecx,ecx
c001545d:	75 23                	jne    c0015482 <sysCallGetEnv(regs*)+0x82>
c001545f:	83 ec 0c             	sub    esp,0xc
c0015462:	50                   	push   eax
c0015463:	e8 30 b2 fe ff       	call   c0000698 <strlen>
c0015468:	89 3c 24             	mov    DWORD PTR [esp],edi
c001546b:	89 c3                	mov    ebx,eax
c001546d:	e8 26 b2 fe ff       	call   c0000698 <strlen>
c0015472:	83 c4 10             	add    esp,0x10
c0015475:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0015479:	83 c4 10             	add    esp,0x10
c001547c:	31 d2                	xor    edx,edx
c001547e:	5b                   	pop    ebx
c001547f:	5e                   	pop    esi
c0015480:	5f                   	pop    edi
c0015481:	c3                   	ret    
c0015482:	83 ec 08             	sub    esp,0x8
c0015485:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015488:	50                   	push   eax
c0015489:	56                   	push   esi
c001548a:	e8 a9 b2 fe ff       	call   c0000738 <strcpy>
c001548f:	58                   	pop    eax
c0015490:	5a                   	pop    edx
c0015491:	68 88 51 02 c0       	push   0xc0025188
c0015496:	56                   	push   esi
c0015497:	e8 dc b3 fe ff       	call   c0000878 <strcat>
c001549c:	59                   	pop    ecx
c001549d:	5b                   	pop    ebx
c001549e:	57                   	push   edi
c001549f:	56                   	push   esi
c00154a0:	e8 d3 b3 fe ff       	call   c0000878 <strcat>
c00154a5:	83 c4 10             	add    esp,0x10
c00154a8:	e9 7b ff ff ff       	jmp    c0015428 <sysCallGetEnv(regs*)+0x28>

c00154ad <sysAppSettings(regs*)>:
c00154ad:	57                   	push   edi
c00154ae:	56                   	push   esi
c00154af:	56                   	push   esi
c00154b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00154b4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00154b7:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c00154bd:	25 e0 1f 00 00       	and    eax,0x1fe0
c00154c2:	66 3d c0 09          	cmp    ax,0x9c0
c00154c6:	75 2e                	jne    c00154f6 <sysAppSettings(regs*)+0x49>
c00154c8:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c00154ce:	83 e0 1f             	and    eax,0x1f
c00154d1:	3c 01                	cmp    al,0x1
c00154d3:	74 2c                	je     c0015501 <sysAppSettings(regs*)+0x54>
c00154d5:	3c 07                	cmp    al,0x7
c00154d7:	0f 84 b3 00 00 00    	je     c0015590 <sysAppSettings(regs*)+0xe3>
c00154dd:	84 c0                	test   al,al
c00154df:	0f 84 d2 00 00 00    	je     c00155b7 <sysAppSettings(regs*)+0x10a>
c00154e5:	3c 08                	cmp    al,0x8
c00154e7:	74 63                	je     c001554c <sysAppSettings(regs*)+0x9f>
c00154e9:	59                   	pop    ecx
c00154ea:	0f b6 c0             	movzx  eax,al
c00154ed:	5e                   	pop    esi
c00154ee:	05 e8 03 00 00       	add    eax,0x3e8
c00154f3:	5f                   	pop    edi
c00154f4:	99                   	cdq    
c00154f5:	c3                   	ret    
c00154f6:	b8 01 00 00 00       	mov    eax,0x1
c00154fb:	59                   	pop    ecx
c00154fc:	31 d2                	xor    edx,edx
c00154fe:	5e                   	pop    esi
c00154ff:	5f                   	pop    edi
c0015500:	c3                   	ret    
c0015501:	50                   	push   eax
c0015502:	68 00 01 00 00       	push   0x100
c0015507:	6a 00                	push   0x0
c0015509:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001550e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015511:	83 c0 0c             	add    eax,0xc
c0015514:	50                   	push   eax
c0015515:	e8 62 b1 fe ff       	call   c000067c <memset>
c001551a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001551f:	b9 ff 00 00 00       	mov    ecx,0xff
c0015524:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0015527:	83 c7 0c             	add    edi,0xc
c001552a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001552c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015531:	5a                   	pop    edx
c0015532:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015535:	59                   	pop    ecx
c0015536:	8d 50 0c             	lea    edx,[eax+0xc]
c0015539:	52                   	push   edx
c001553a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015540:	e8 ff 56 ff ff       	call   c000ac44 <VgaText::setTitle(char*)>
c0015545:	83 c4 10             	add    esp,0x10
c0015548:	31 c0                	xor    eax,eax
c001554a:	eb af                	jmp    c00154fb <sysAppSettings(regs*)+0x4e>
c001554c:	83 ec 08             	sub    esp,0x8
c001554f:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015555:	83 e0 0f             	and    eax,0xf
c0015558:	50                   	push   eax
c0015559:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001555e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015561:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015567:	e8 c8 56 ff ff       	call   c000ac34 <VgaText::setTitleColour(VgaColour)>
c001556c:	5f                   	pop    edi
c001556d:	58                   	pop    eax
c001556e:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0015574:	c1 e8 04             	shr    eax,0x4
c0015577:	83 e0 0f             	and    eax,0xf
c001557a:	50                   	push   eax
c001557b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015580:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015583:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0015589:	e8 96 56 ff ff       	call   c000ac24 <VgaText::setTitleTextColour(VgaColour)>
c001558e:	eb b5                	jmp    c0015545 <sysAppSettings(regs*)+0x98>
c0015590:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015595:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015598:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001559e:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c00155a4:	c0 e8 06             	shr    al,0x6
c00155a7:	83 e0 01             	and    eax,0x1
c00155aa:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c00155b0:	31 c0                	xor    eax,eax
c00155b2:	e9 44 ff ff ff       	jmp    c00154fb <sysAppSettings(regs*)+0x4e>
c00155b7:	b8 02 00 00 00       	mov    eax,0x2
c00155bc:	e9 3a ff ff ff       	jmp    c00154fb <sysAppSettings(regs*)+0x4e>

c00155c1 <sysSetFatAttrib(regs*)>:
c00155c1:	57                   	push   edi
c00155c2:	56                   	push   esi
c00155c3:	53                   	push   ebx
c00155c4:	83 ec 1c             	sub    esp,0x1c
c00155c7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00155cb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00155ce:	68 14 01 00 00       	push   0x114
c00155d3:	e8 df 46 ff ff       	call   c0009cb7 <malloc>
c00155d8:	83 c4 0c             	add    esp,0xc
c00155db:	89 c3                	mov    ebx,eax
c00155dd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155e2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00155e5:	57                   	push   edi
c00155e6:	53                   	push   ebx
c00155e7:	e8 44 7f ff ff       	call   c000d530 <File::File(char const*, Process*)>
c00155ec:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00155ef:	83 c4 0c             	add    esp,0xc
c00155f2:	0f b6 d4             	movzx  edx,ah
c00155f5:	0f b6 c0             	movzx  eax,al
c00155f8:	52                   	push   edx
c00155f9:	50                   	push   eax
c00155fa:	53                   	push   ebx
c00155fb:	e8 1c 82 ff ff       	call   c000d81c <File::chfatattr(unsigned char, unsigned char)>
c0015600:	83 c4 10             	add    esp,0x10
c0015603:	85 db                	test   ebx,ebx
c0015605:	74 14                	je     c001561b <sysSetFatAttrib(regs*)+0x5a>
c0015607:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001560b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001560d:	83 ec 0c             	sub    esp,0xc
c0015610:	53                   	push   ebx
c0015611:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015614:	83 c4 10             	add    esp,0x10
c0015617:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001561b:	85 c0                	test   eax,eax
c001561d:	0f 95 c0             	setne  al
c0015620:	31 d2                	xor    edx,edx
c0015622:	0f b6 c0             	movzx  eax,al
c0015625:	f7 d8                	neg    eax
c0015627:	83 d2 00             	adc    edx,0x0
c001562a:	83 c4 10             	add    esp,0x10
c001562d:	f7 da                	neg    edx
c001562f:	5b                   	pop    ebx
c0015630:	5e                   	pop    esi
c0015631:	5f                   	pop    edi
c0015632:	c3                   	ret    

c0015633 <sysPipe(regs*)>:
c0015633:	57                   	push   edi
c0015634:	56                   	push   esi
c0015635:	53                   	push   ebx
c0015636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001563a:	83 ec 0c             	sub    esp,0xc
c001563d:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0015640:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015643:	6a 20                	push   0x20
c0015645:	e8 6d 46 ff ff       	call   c0009cb7 <malloc>
c001564a:	89 c3                	mov    ebx,eax
c001564c:	58                   	pop    eax
c001564d:	5a                   	pop    edx
c001564e:	68 00 50 00 00       	push   0x5000
c0015653:	53                   	push   ebx
c0015654:	e8 63 53 ff ff       	call   c000a9bc <Pipe::Pipe(int)>
c0015659:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001565c:	e8 bd 61 ff ff       	call   c000b81e <UnixFile::getFileDescriptor()>
c0015661:	89 07                	mov    DWORD PTR [edi],eax
c0015663:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015666:	e8 b3 61 ff ff       	call   c000b81e <UnixFile::getFileDescriptor()>
c001566b:	83 c4 10             	add    esp,0x10
c001566e:	89 06                	mov    DWORD PTR [esi],eax
c0015670:	31 d2                	xor    edx,edx
c0015672:	5b                   	pop    ebx
c0015673:	31 c0                	xor    eax,eax
c0015675:	5e                   	pop    esi
c0015676:	5f                   	pop    edi
c0015677:	c3                   	ret    

c0015678 <sysGetUnixTime(regs*)>:
c0015678:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c001567d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015683:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015687:	e9 02 89 ff ff       	jmp    c000df8e <Clock::timeInSecondsLocal()>

c001568c <string_ends_with(char const*, char const*)>:
c001568c:	57                   	push   edi
c001568d:	56                   	push   esi
c001568e:	53                   	push   ebx
c001568f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015693:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015697:	83 ec 0c             	sub    esp,0xc
c001569a:	53                   	push   ebx
c001569b:	e8 f8 af fe ff       	call   c0000698 <strlen>
c00156a0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00156a3:	89 c6                	mov    esi,eax
c00156a5:	e8 ee af fe ff       	call   c0000698 <strlen>
c00156aa:	83 c4 10             	add    esp,0x10
c00156ad:	39 c6                	cmp    esi,eax
c00156af:	7d 06                	jge    c00156b7 <string_ends_with(char const*, char const*)+0x2b>
c00156b1:	5b                   	pop    ebx
c00156b2:	31 c0                	xor    eax,eax
c00156b4:	5e                   	pop    esi
c00156b5:	5f                   	pop    edi
c00156b6:	c3                   	ret    
c00156b7:	83 ec 08             	sub    esp,0x8
c00156ba:	29 c6                	sub    esi,eax
c00156bc:	57                   	push   edi
c00156bd:	01 f3                	add    ebx,esi
c00156bf:	53                   	push   ebx
c00156c0:	e8 ff b0 fe ff       	call   c00007c4 <strcmp>
c00156c5:	83 c4 10             	add    esp,0x10
c00156c8:	85 c0                	test   eax,eax
c00156ca:	5b                   	pop    ebx
c00156cb:	0f 94 c0             	sete   al
c00156ce:	5e                   	pop    esi
c00156cf:	0f b6 c0             	movzx  eax,al
c00156d2:	5f                   	pop    edi
c00156d3:	c3                   	ret    

c00156d4 <sysCallOpen(regs*)>:
c00156d4:	56                   	push   esi
c00156d5:	53                   	push   ebx
c00156d6:	81 ec 04 01 00 00    	sub    esp,0x104
c00156dc:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00156e3:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00156e6:	85 c9                	test   ecx,ecx
c00156e8:	0f 84 ad 01 00 00    	je     c001589b <sysCallOpen(regs*)+0x1c7>
c00156ee:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00156f1:	85 c0                	test   eax,eax
c00156f3:	0f 84 a2 01 00 00    	je     c001589b <sysCallOpen(regs*)+0x1c7>
c00156f9:	52                   	push   edx
c00156fa:	68 8a 51 02 c0       	push   0xc002518a
c00156ff:	50                   	push   eax
c0015700:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0015704:	56                   	push   esi
c0015705:	e8 7c 7c ff ff       	call   c000d386 <Fs::standardiseFiles(char*, char const*, char const*)>
c001570a:	89 34 24             	mov    DWORD PTR [esp],esi
c001570d:	e8 86 af fe ff       	call   c0000698 <strlen>
c0015712:	83 c4 10             	add    esp,0x10
c0015715:	48                   	dec    eax
c0015716:	74 1d                	je     c0015735 <sysCallOpen(regs*)+0x61>
c0015718:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001571b:	eb 0f                	jmp    c001572c <sysCallOpen(regs*)+0x58>
c001571d:	80 fa 3a             	cmp    dl,0x3a
c0015720:	74 0f                	je     c0015731 <sysCallOpen(regs*)+0x5d>
c0015722:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0015726:	48                   	dec    eax
c0015727:	74 0c                	je     c0015735 <sysCallOpen(regs*)+0x61>
c0015729:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001572c:	80 fa 2e             	cmp    dl,0x2e
c001572f:	75 ec                	jne    c001571d <sysCallOpen(regs*)+0x49>
c0015731:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0015735:	83 ec 08             	sub    esp,0x8
c0015738:	68 8e 51 02 c0       	push   0xc002518e
c001573d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015740:	e8 47 ff ff ff       	call   c001568c <string_ends_with(char const*, char const*)>
c0015745:	83 c4 10             	add    esp,0x10
c0015748:	85 c0                	test   eax,eax
c001574a:	74 1d                	je     c0015769 <sysCallOpen(regs*)+0x95>
c001574c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001574f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0015755:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001575c:	81 c4 04 01 00 00    	add    esp,0x104
c0015762:	31 c0                	xor    eax,eax
c0015764:	31 d2                	xor    edx,edx
c0015766:	5b                   	pop    ebx
c0015767:	5e                   	pop    esi
c0015768:	c3                   	ret    
c0015769:	83 ec 08             	sub    esp,0x8
c001576c:	68 93 51 02 c0       	push   0xc0025193
c0015771:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015774:	e8 13 ff ff ff       	call   c001568c <string_ends_with(char const*, char const*)>
c0015779:	83 c4 10             	add    esp,0x10
c001577c:	85 c0                	test   eax,eax
c001577e:	75 cc                	jne    c001574c <sysCallOpen(regs*)+0x78>
c0015780:	83 ec 08             	sub    esp,0x8
c0015783:	68 8f 51 02 c0       	push   0xc002518f
c0015788:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001578b:	e8 34 b0 fe ff       	call   c00007c4 <strcmp>
c0015790:	83 c4 10             	add    esp,0x10
c0015793:	85 c0                	test   eax,eax
c0015795:	74 b5                	je     c001574c <sysCallOpen(regs*)+0x78>
c0015797:	83 ec 08             	sub    esp,0x8
c001579a:	68 8e 51 02 c0       	push   0xc002518e
c001579f:	56                   	push   esi
c00157a0:	e8 e7 fe ff ff       	call   c001568c <string_ends_with(char const*, char const*)>
c00157a5:	83 c4 10             	add    esp,0x10
c00157a8:	85 c0                	test   eax,eax
c00157aa:	75 a0                	jne    c001574c <sysCallOpen(regs*)+0x78>
c00157ac:	83 ec 08             	sub    esp,0x8
c00157af:	68 98 51 02 c0       	push   0xc0025198
c00157b4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00157b7:	e8 d0 fe ff ff       	call   c001568c <string_ends_with(char const*, char const*)>
c00157bc:	83 c4 10             	add    esp,0x10
c00157bf:	85 c0                	test   eax,eax
c00157c1:	0f 85 e7 00 00 00    	jne    c00158ae <sysCallOpen(regs*)+0x1da>
c00157c7:	83 ec 08             	sub    esp,0x8
c00157ca:	68 9d 51 02 c0       	push   0xc002519d
c00157cf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00157d2:	e8 b5 fe ff ff       	call   c001568c <string_ends_with(char const*, char const*)>
c00157d7:	83 c4 10             	add    esp,0x10
c00157da:	85 c0                	test   eax,eax
c00157dc:	0f 85 cc 00 00 00    	jne    c00158ae <sysCallOpen(regs*)+0x1da>
c00157e2:	83 ec 08             	sub    esp,0x8
c00157e5:	68 99 51 02 c0       	push   0xc0025199
c00157ea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00157ed:	e8 d2 af fe ff       	call   c00007c4 <strcmp>
c00157f2:	83 c4 10             	add    esp,0x10
c00157f5:	85 c0                	test   eax,eax
c00157f7:	0f 84 b1 00 00 00    	je     c00158ae <sysCallOpen(regs*)+0x1da>
c00157fd:	83 ec 08             	sub    esp,0x8
c0015800:	68 98 51 02 c0       	push   0xc0025198
c0015805:	56                   	push   esi
c0015806:	e8 81 fe ff ff       	call   c001568c <string_ends_with(char const*, char const*)>
c001580b:	83 c4 10             	add    esp,0x10
c001580e:	85 c0                	test   eax,eax
c0015810:	0f 85 98 00 00 00    	jne    c00158ae <sysCallOpen(regs*)+0x1da>
c0015816:	83 ec 0c             	sub    esp,0xc
c0015819:	68 14 01 00 00       	push   0x114
c001581e:	e8 94 44 ff ff       	call   c0009cb7 <malloc>
c0015823:	83 c4 0c             	add    esp,0xc
c0015826:	89 c6                	mov    esi,eax
c0015828:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001582d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015830:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015833:	56                   	push   esi
c0015834:	e8 f7 7c ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0015839:	83 c4 10             	add    esp,0x10
c001583c:	85 f6                	test   esi,esi
c001583e:	74 5b                	je     c001589b <sysCallOpen(regs*)+0x1c7>
c0015840:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015843:	0f b6 c2             	movzx  eax,dl
c0015846:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0015849:	89 d0                	mov    eax,edx
c001584b:	83 e0 01             	and    eax,0x1
c001584e:	f6 c2 02             	test   dl,0x2
c0015851:	74 03                	je     c0015856 <sysCallOpen(regs*)+0x182>
c0015853:	83 c8 02             	or     eax,0x2
c0015856:	f6 c2 04             	test   dl,0x4
c0015859:	74 03                	je     c001585e <sysCallOpen(regs*)+0x18a>
c001585b:	83 c8 04             	or     eax,0x4
c001585e:	f6 c2 08             	test   dl,0x8
c0015861:	74 03                	je     c0015866 <sysCallOpen(regs*)+0x192>
c0015863:	83 c8 0a             	or     eax,0xa
c0015866:	83 e2 10             	and    edx,0x10
c0015869:	74 03                	je     c001586e <sysCallOpen(regs*)+0x19a>
c001586b:	83 c8 12             	or     eax,0x12
c001586e:	83 ec 08             	sub    esp,0x8
c0015871:	50                   	push   eax
c0015872:	56                   	push   esi
c0015873:	e8 92 7d ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0015878:	83 c4 10             	add    esp,0x10
c001587b:	85 c0                	test   eax,eax
c001587d:	75 1c                	jne    c001589b <sysCallOpen(regs*)+0x1c7>
c001587f:	83 ec 0c             	sub    esp,0xc
c0015882:	56                   	push   esi
c0015883:	e8 96 5f ff ff       	call   c000b81e <UnixFile::getFileDescriptor()>
c0015888:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001588b:	83 c4 10             	add    esp,0x10
c001588e:	89 02                	mov    DWORD PTR [edx],eax
c0015890:	c1 f8 1f             	sar    eax,0x1f
c0015893:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015896:	e9 c1 fe ff ff       	jmp    c001575c <sysCallOpen(regs*)+0x88>
c001589b:	81 c4 04 01 00 00    	add    esp,0x104
c00158a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158a6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158ab:	5b                   	pop    ebx
c00158ac:	5e                   	pop    esi
c00158ad:	c3                   	ret    
c00158ae:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158b1:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00158b7:	e9 99 fe ff ff       	jmp    c0015755 <sysCallOpen(regs*)+0x81>

c00158bc <Sys::loadSyscalls()>:
c00158bc:	c7 05 00 9f 02 c0 2d 4b 01 c0 	mov    DWORD PTR ds:0xc0029f00,0xc0014b2d
c00158c6:	c7 05 04 9f 02 c0 22 47 01 c0 	mov    DWORD PTR ds:0xc0029f04,0xc0014722
c00158d0:	c7 05 08 9f 02 c0 13 49 01 c0 	mov    DWORD PTR ds:0xc0029f08,0xc0014913
c00158da:	c7 05 0c 9f 02 c0 63 4a 01 c0 	mov    DWORD PTR ds:0xc0029f0c,0xc0014a63
c00158e4:	c7 05 10 9f 02 c0 ab 48 01 c0 	mov    DWORD PTR ds:0xc0029f10,0xc00148ab
c00158ee:	c7 05 14 9f 02 c0 59 47 01 c0 	mov    DWORD PTR ds:0xc0029f14,0xc0014759
c00158f8:	c7 05 18 9f 02 c0 3a 47 01 c0 	mov    DWORD PTR ds:0xc0029f18,0xc001473a
c0015902:	c7 05 1c 9f 02 c0 68 49 01 c0 	mov    DWORD PTR ds:0xc0029f1c,0xc0014968
c001590c:	c7 05 24 9f 02 c0 f0 4f 01 c0 	mov    DWORD PTR ds:0xc0029f24,0xc0014ff0
c0015916:	c7 05 20 9f 02 c0 d4 56 01 c0 	mov    DWORD PTR ds:0xc0029f20,0xc00156d4
c0015920:	c7 05 28 9f 02 c0 50 50 01 c0 	mov    DWORD PTR ds:0xc0029f28,0xc0015050
c001592a:	c7 05 2c 9f 02 c0 33 4d 01 c0 	mov    DWORD PTR ds:0xc0029f2c,0xc0014d33
c0015934:	c7 05 30 9f 02 c0 65 4b 01 c0 	mov    DWORD PTR ds:0xc0029f30,0xc0014b65
c001593e:	c7 05 34 9f 02 c0 6a 4b 01 c0 	mov    DWORD PTR ds:0xc0029f34,0xc0014b6a
c0015948:	c7 05 38 9f 02 c0 19 51 01 c0 	mov    DWORD PTR ds:0xc0029f38,0xc0015119
c0015952:	c7 05 3c 9f 02 c0 c5 50 01 c0 	mov    DWORD PTR ds:0xc0029f3c,0xc00150c5
c001595c:	c7 05 40 9f 02 c0 0c 4e 01 c0 	mov    DWORD PTR ds:0xc0029f40,0xc0014e0c
c0015966:	c7 05 44 9f 02 c0 63 4e 01 c0 	mov    DWORD PTR ds:0xc0029f44,0xc0014e63
c0015970:	c7 05 48 9f 02 c0 cf 4e 01 c0 	mov    DWORD PTR ds:0xc0029f48,0xc0014ecf
c001597a:	c7 05 4c 9f 02 c0 6f 4b 01 c0 	mov    DWORD PTR ds:0xc0029f4c,0xc0014b6f
c0015984:	c7 05 50 9f 02 c0 89 51 01 c0 	mov    DWORD PTR ds:0xc0029f50,0xc0015189
c001598e:	c7 05 54 9f 02 c0 a3 51 01 c0 	mov    DWORD PTR ds:0xc0029f54,0xc00151a3
c0015998:	c7 05 58 9f 02 c0 a3 51 01 c0 	mov    DWORD PTR ds:0xc0029f58,0xc00151a3
c00159a2:	c7 05 5c 9f 02 c0 d8 51 01 c0 	mov    DWORD PTR ds:0xc0029f5c,0xc00151d8
c00159ac:	c7 05 60 9f 02 c0 3c 52 01 c0 	mov    DWORD PTR ds:0xc0029f60,0xc001523c
c00159b6:	c7 05 64 9f 02 c0 79 4b 01 c0 	mov    DWORD PTR ds:0xc0029f64,0xc0014b79
c00159c0:	c7 05 68 9f 02 c0 a0 52 01 c0 	mov    DWORD PTR ds:0xc0029f68,0xc00152a0
c00159ca:	c7 05 6c 9f 02 c0 f0 4c 01 c0 	mov    DWORD PTR ds:0xc0029f6c,0xc0014cf0
c00159d4:	c7 05 70 9f 02 c0 ec 52 01 c0 	mov    DWORD PTR ds:0xc0029f70,0xc00152ec
c00159de:	c7 05 74 9f 02 c0 b2 4d 01 c0 	mov    DWORD PTR ds:0xc0029f74,0xc0014db2
c00159e8:	c7 05 78 9f 02 c0 6f 53 01 c0 	mov    DWORD PTR ds:0xc0029f78,0xc001536f
c00159f2:	c7 05 7c 9f 02 c0 41 4f 01 c0 	mov    DWORD PTR ds:0xc0029f7c,0xc0014f41
c00159fc:	c7 05 80 9f 02 c0 98 53 01 c0 	mov    DWORD PTR ds:0xc0029f80,0xc0015398
c0015a06:	c7 05 84 9f 02 c0 00 54 01 c0 	mov    DWORD PTR ds:0xc0029f84,0xc0015400
c0015a10:	c7 05 88 9f 02 c0 ad 54 01 c0 	mov    DWORD PTR ds:0xc0029f88,0xc00154ad
c0015a1a:	c7 05 8c 9f 02 c0 89 4b 01 c0 	mov    DWORD PTR ds:0xc0029f8c,0xc0014b89
c0015a24:	c7 05 90 9f 02 c0 f3 4b 01 c0 	mov    DWORD PTR ds:0xc0029f90,0xc0014bf3
c0015a2e:	c7 05 94 9f 02 c0 3d 4c 01 c0 	mov    DWORD PTR ds:0xc0029f94,0xc0014c3d
c0015a38:	c7 05 98 9f 02 c0 c1 55 01 c0 	mov    DWORD PTR ds:0xc0029f98,0xc00155c1
c0015a42:	c7 05 9c 9f 02 c0 be 51 01 c0 	mov    DWORD PTR ds:0xc0029f9c,0xc00151be
c0015a4c:	c7 05 a0 9f 02 c0 92 4c 01 c0 	mov    DWORD PTR ds:0xc0029fa0,0xc0014c92
c0015a56:	c7 05 a4 9f 02 c0 33 56 01 c0 	mov    DWORD PTR ds:0xc0029fa4,0xc0015633
c0015a60:	c7 05 a8 9f 02 c0 78 56 01 c0 	mov    DWORD PTR ds:0xc0029fa8,0xc0015678
c0015a6a:	c7 05 ac 9f 02 c0 03 48 01 c0 	mov    DWORD PTR ds:0xc0029fac,0xc0014803
c0015a74:	c7 05 b0 9f 02 c0 84 49 01 c0 	mov    DWORD PTR ds:0xc0029fb0,0xc0014984
c0015a7e:	c7 05 b4 9f 02 c0 19 4a 01 c0 	mov    DWORD PTR ds:0xc0029fb4,0xc0014a19
c0015a88:	c7 05 b8 9f 02 c0 ec 46 01 c0 	mov    DWORD PTR ds:0xc0029fb8,0xc00146ec
c0015a92:	c7 05 bc 9f 02 c0 cb 4a 01 c0 	mov    DWORD PTR ds:0xc0029fbc,0xc0014acb
c0015a9c:	c7 05 c0 9f 02 c0 65 47 01 c0 	mov    DWORD PTR ds:0xc0029fc0,0xc0014765
c0015aa6:	c7 05 c4 9f 02 c0 7f 47 01 c0 	mov    DWORD PTR ds:0xc0029fc4,0xc001477f
c0015ab0:	c3                   	ret    

c0015ab1 <Sys::systemCall(regs*, void*)>:
c0015ab1:	53                   	push   ebx
c0015ab2:	83 ec 08             	sub    esp,0x8
c0015ab5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ab9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015abc:	83 f8 7f             	cmp    eax,0x7f
c0015abf:	77 16                	ja     c0015ad7 <Sys::systemCall(regs*, void*)+0x26>
c0015ac1:	8b 14 85 00 9f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6100]
c0015ac8:	85 d2                	test   edx,edx
c0015aca:	74 0b                	je     c0015ad7 <Sys::systemCall(regs*, void*)+0x26>
c0015acc:	83 ec 0c             	sub    esp,0xc
c0015acf:	53                   	push   ebx
c0015ad0:	ff d2                	call   edx
c0015ad2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015ad5:	eb 0d                	jmp    c0015ae4 <Sys::systemCall(regs*, void*)+0x33>
c0015ad7:	52                   	push   edx
c0015ad8:	52                   	push   edx
c0015ad9:	50                   	push   eax
c0015ada:	68 a2 51 02 c0       	push   0xc00251a2
c0015adf:	e8 e1 74 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0015ae4:	83 c4 10             	add    esp,0x10
c0015ae7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015aec:	31 d2                	xor    edx,edx
c0015aee:	83 c4 08             	add    esp,0x8
c0015af1:	5b                   	pop    ebx
c0015af2:	c3                   	ret    

c0015af3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015af3:	55                   	push   ebp
c0015af4:	57                   	push   edi
c0015af5:	56                   	push   esi
c0015af6:	53                   	push   ebx
c0015af7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0015afd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015b04:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0015b0b:	85 c0                	test   eax,eax
c0015b0d:	0f 95 c1             	setne  cl
c0015b10:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0015b18:	0f 94 c2             	sete   dl
c0015b1b:	84 d1                	test   cl,dl
c0015b1d:	74 23                	je     c0015b42 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0015b1f:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0015b25:	74 1b                	je     c0015b42 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0015b27:	81 c3 00 10 00 00    	add    ebx,0x1000
c0015b2d:	89 da                	mov    edx,ebx
c0015b2f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0015b35:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0015b3b:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0015b42:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0015b49:	05 ff 0f 00 00       	add    eax,0xfff
c0015b4e:	83 ec 0c             	sub    esp,0xc
c0015b51:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015b55:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0015b5b:	c1 e8 0c             	shr    eax,0xc
c0015b5e:	89 fe                	mov    esi,edi
c0015b60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015b64:	c1 ee 0c             	shr    esi,0xc
c0015b67:	6a 01                	push   0x1
c0015b69:	e8 fb 60 ff ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0015b6e:	89 c5                	mov    ebp,eax
c0015b70:	58                   	pop    eax
c0015b71:	5a                   	pop    edx
c0015b72:	56                   	push   esi
c0015b73:	68 b6 51 02 c0       	push   0xc00251b6
c0015b78:	e8 48 74 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0015b7d:	59                   	pop    ecx
c0015b7e:	58                   	pop    eax
c0015b7f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015b83:	68 c8 51 02 c0       	push   0xc00251c8
c0015b88:	e8 38 74 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0015b8d:	83 c4 10             	add    esp,0x10
c0015b90:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0015b96:	0f 86 31 01 00 00    	jbe    c0015ccd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0015b9c:	c1 e6 0c             	shl    esi,0xc
c0015b9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ba2:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0015ba5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ba9:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0015bb0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015bb3:	01 df                	add    edi,ebx
c0015bb5:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0015bb8:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0015bbc:	0f 84 08 01 00 00    	je     c0015cca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0015bc2:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0015bc8:	76 05                	jbe    c0015bcf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0015bca:	bf 00 10 00 00       	mov    edi,0x1000
c0015bcf:	83 ec 0c             	sub    esp,0xc
c0015bd2:	31 d2                	xor    edx,edx
c0015bd4:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0015bdb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0015bdd:	8d 44 24 28          	lea    eax,[esp+0x28]
c0015be1:	50                   	push   eax
c0015be2:	8d 74 24 30          	lea    esi,[esp+0x30]
c0015be6:	56                   	push   esi
c0015be7:	52                   	push   edx
c0015be8:	57                   	push   edi
c0015be9:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015bf0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015bf3:	83 c4 20             	add    esp,0x20
c0015bf6:	85 c0                	test   eax,eax
c0015bf8:	74 0a                	je     c0015c04 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0015bfa:	53                   	push   ebx
c0015bfb:	53                   	push   ebx
c0015bfc:	50                   	push   eax
c0015bfd:	68 da 51 02 c0       	push   0xc00251da
c0015c02:	eb 0f                	jmp    c0015c13 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0015c04:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015c08:	74 20                	je     c0015c2a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0015c0a:	51                   	push   ecx
c0015c0b:	51                   	push   ecx
c0015c0c:	6a 00                	push   0x0
c0015c0e:	68 05 52 02 c0       	push   0xc0025205
c0015c13:	e8 ad 73 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0015c18:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015c1b:	e8 3d 63 ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c0015c20:	83 c4 10             	add    esp,0x10
c0015c23:	31 c0                	xor    eax,eax
c0015c25:	e9 68 01 00 00       	jmp    c0015d92 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0015c2a:	fa                   	cli    
c0015c2b:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c0015c31:	e8 38 47 ff ff       	call   c000a36e <Phys::allocatePage()>
c0015c36:	6a 07                	push   0x7
c0015c38:	89 c7                	mov    edi,eax
c0015c3a:	55                   	push   ebp
c0015c3b:	50                   	push   eax
c0015c3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c41:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015c44:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015c4a:	e8 85 66 ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015c4f:	83 c4 0c             	add    esp,0xc
c0015c52:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015c59:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015c5f:	6a 00                	push   0x0
c0015c61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c66:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015c69:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015c6f:	e8 ba 64 ff ff       	call   c000c12e <VAS::mapOtherVASIn(bool, VAS*)>
c0015c74:	58                   	pop    eax
c0015c75:	5a                   	pop    edx
c0015c76:	68 07 0c 00 00       	push   0xc07
c0015c7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015c7f:	57                   	push   edi
c0015c80:	89 ef                	mov    edi,ebp
c0015c82:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015c89:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015c8f:	6a 00                	push   0x0
c0015c91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c96:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015c99:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015c9f:	e8 ee 69 ff ff       	call   c000c692 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015ca4:	b9 00 10 00 00       	mov    ecx,0x1000
c0015ca9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015cab:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0015cb0:	83 c4 20             	add    esp,0x20
c0015cb3:	48                   	dec    eax
c0015cb4:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0015cb9:	85 c0                	test   eax,eax
c0015cbb:	75 01                	jne    c0015cbe <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0015cbd:	fb                   	sti    
c0015cbe:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0015cc5:	e9 df fe ff ff       	jmp    c0015ba9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0015cca:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0015ccd:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0015cd5:	0f 86 a9 00 00 00    	jbe    c0015d84 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0015cdb:	fa                   	cli    
c0015cdc:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c0015ce2:	51                   	push   ecx
c0015ce3:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015cea:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015cf0:	6a 00                	push   0x0
c0015cf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cf7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015cfa:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015d00:	e8 29 64 ff ff       	call   c000c12e <VAS::mapOtherVASIn(bool, VAS*)>
c0015d05:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015d09:	c1 e6 0c             	shl    esi,0xc
c0015d0c:	01 de                	add    esi,ebx
c0015d0e:	83 c4 10             	add    esp,0x10
c0015d11:	39 de                	cmp    esi,ebx
c0015d13:	74 61                	je     c0015d76 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0015d15:	e8 54 46 ff ff       	call   c000a36e <Phys::allocatePage()>
c0015d1a:	6a 07                	push   0x7
c0015d1c:	89 c7                	mov    edi,eax
c0015d1e:	55                   	push   ebp
c0015d1f:	50                   	push   eax
c0015d20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d28:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015d2e:	e8 a1 65 ff ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0015d33:	58                   	pop    eax
c0015d34:	5a                   	pop    edx
c0015d35:	68 07 0c 00 00       	push   0xc07
c0015d3a:	53                   	push   ebx
c0015d3b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0015d41:	57                   	push   edi
c0015d42:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015d49:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015d4f:	6a 00                	push   0x0
c0015d51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d56:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015d59:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015d5f:	e8 2e 69 ff ff       	call   c000c692 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015d64:	83 c4 1c             	add    esp,0x1c
c0015d67:	68 00 10 00 00       	push   0x1000
c0015d6c:	6a 00                	push   0x0
c0015d6e:	55                   	push   ebp
c0015d6f:	e8 08 a9 fe ff       	call   c000067c <memset>
c0015d74:	eb 98                	jmp    c0015d0e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0015d76:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0015d7b:	48                   	dec    eax
c0015d7c:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0015d81:	75 01                	jne    c0015d84 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0015d83:	fb                   	sti    
c0015d84:	83 ec 0c             	sub    esp,0xc
c0015d87:	55                   	push   ebp
c0015d88:	e8 d0 61 ff ff       	call   c000bf5d <Virt::freeKernelVirtualPages(unsigned long)>
c0015d8d:	83 c4 10             	add    esp,0x10
c0015d90:	b0 01                	mov    al,0x1
c0015d92:	81 c4 2c 10 00 00    	add    esp,0x102c
c0015d98:	5b                   	pop    ebx
c0015d99:	5e                   	pop    esi
c0015d9a:	5f                   	pop    edi
c0015d9b:	5d                   	pop    ebp
c0015d9c:	c3                   	ret    

c0015d9d <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0015d9d:	55                   	push   ebp
c0015d9e:	57                   	push   edi
c0015d9f:	56                   	push   esi
c0015da0:	53                   	push   ebx
c0015da1:	83 ec 48             	sub    esp,0x48
c0015da4:	68 14 01 00 00       	push   0x114
c0015da9:	e8 09 3f ff ff       	call   c0009cb7 <malloc>
c0015dae:	83 c4 0c             	add    esp,0xc
c0015db1:	89 c6                	mov    esi,eax
c0015db3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0015db7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0015dbb:	50                   	push   eax
c0015dbc:	e8 6f 77 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0015dc1:	58                   	pop    eax
c0015dc2:	5a                   	pop    edx
c0015dc3:	6a 01                	push   0x1
c0015dc5:	56                   	push   esi
c0015dc6:	e8 3f 78 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0015dcb:	83 c4 10             	add    esp,0x10
c0015dce:	85 c0                	test   eax,eax
c0015dd0:	0f 85 47 01 00 00    	jne    c0015f1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015dd6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0015dde:	83 ec 0c             	sub    esp,0xc
c0015de1:	6a 34                	push   0x34
c0015de3:	e8 cf 3e ff ff       	call   c0009cb7 <malloc>
c0015de8:	89 c3                	mov    ebx,eax
c0015dea:	58                   	pop    eax
c0015deb:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ded:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0015df1:	57                   	push   edi
c0015df2:	53                   	push   ebx
c0015df3:	6a 00                	push   0x0
c0015df5:	6a 34                	push   0x34
c0015df7:	56                   	push   esi
c0015df8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015dfb:	83 c4 20             	add    esp,0x20
c0015dfe:	85 c0                	test   eax,eax
c0015e00:	0f 85 17 01 00 00    	jne    c0015f1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015e06:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0015e0c:	0f 85 0b 01 00 00    	jne    c0015f1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015e12:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015e15:	85 c0                	test   eax,eax
c0015e17:	0f 84 00 01 00 00    	je     c0015f1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015e1d:	31 d2                	xor    edx,edx
c0015e1f:	55                   	push   ebp
c0015e20:	52                   	push   edx
c0015e21:	50                   	push   eax
c0015e22:	56                   	push   esi
c0015e23:	e8 a0 78 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0015e28:	83 c4 10             	add    esp,0x10
c0015e2b:	85 c0                	test   eax,eax
c0015e2d:	0f 85 ea 00 00 00    	jne    c0015f1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015e33:	83 ec 0c             	sub    esp,0xc
c0015e36:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015e39:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015e3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015e41:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015e45:	0f af c2             	imul   eax,edx
c0015e48:	50                   	push   eax
c0015e49:	e8 69 3e ff ff       	call   c0009cb7 <malloc>
c0015e4e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015e50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015e54:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015e57:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e5b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015e5f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015e63:	0f af c2             	imul   eax,edx
c0015e66:	99                   	cdq    
c0015e67:	52                   	push   edx
c0015e68:	50                   	push   eax
c0015e69:	56                   	push   esi
c0015e6a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015e6d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0015e70:	83 c4 20             	add    esp,0x20
c0015e73:	85 c0                	test   eax,eax
c0015e75:	0f 84 a2 00 00 00    	je     c0015f1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015e7b:	31 d2                	xor    edx,edx
c0015e7d:	51                   	push   ecx
c0015e7e:	52                   	push   edx
c0015e7f:	50                   	push   eax
c0015e80:	56                   	push   esi
c0015e81:	e8 42 78 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0015e86:	83 c4 10             	add    esp,0x10
c0015e89:	85 c0                	test   eax,eax
c0015e8b:	0f 85 8c 00 00 00    	jne    c0015f1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0015e91:	83 ec 0c             	sub    esp,0xc
c0015e94:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015e98:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015e9c:	31 ed                	xor    ebp,ebp
c0015e9e:	0f af c2             	imul   eax,edx
c0015ea1:	50                   	push   eax
c0015ea2:	e8 10 3e ff ff       	call   c0009cb7 <malloc>
c0015ea7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015ea9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015ead:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015eb4:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0015eb8:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0015ebc:	0f af c2             	imul   eax,edx
c0015ebf:	99                   	cdq    
c0015ec0:	52                   	push   edx
c0015ec1:	50                   	push   eax
c0015ec2:	56                   	push   esi
c0015ec3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015ec6:	83 c4 20             	add    esp,0x20
c0015ec9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015ed1:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0015ed5:	0f 86 80 00 00 00    	jbe    c0015f5b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0015edb:	0f b7 fd             	movzx  edi,bp
c0015ede:	c1 e7 05             	shl    edi,0x5
c0015ee1:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0015ee5:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0015ee8:	75 6b                	jne    c0015f55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0015eea:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0015eed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015ef1:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015ef4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015ef8:	52                   	push   edx
c0015ef9:	31 d2                	xor    edx,edx
c0015efb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0015efe:	52                   	push   edx
c0015eff:	50                   	push   eax
c0015f00:	56                   	push   esi
c0015f01:	e8 c2 77 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0015f06:	83 c4 10             	add    esp,0x10
c0015f09:	85 c0                	test   eax,eax
c0015f0b:	74 17                	je     c0015f24 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0015f0d:	83 ec 0c             	sub    esp,0xc
c0015f10:	68 31 52 02 c0       	push   0xc0025231
c0015f15:	e8 ab 70 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0015f1a:	83 c4 10             	add    esp,0x10
c0015f1d:	31 c0                	xor    eax,eax
c0015f1f:	e9 87 00 00 00       	jmp    c0015fab <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0015f24:	83 ec 0c             	sub    esp,0xc
c0015f27:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0015f2a:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0015f2d:	50                   	push   eax
c0015f2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015f32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015f36:	56                   	push   esi
c0015f37:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0015f3b:	e8 b3 fb ff ff       	call   c0015af3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015f40:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015f44:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0015f48:	83 c4 20             	add    esp,0x20
c0015f4b:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015f4f:	73 04                	jae    c0015f55 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0015f51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015f55:	45                   	inc    ebp
c0015f56:	e9 76 ff ff ff       	jmp    c0015ed1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0015f5b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0015f5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015f63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f67:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0015f6d:	83 ec 0c             	sub    esp,0xc
c0015f70:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0015f76:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015f7b:	05 00 10 00 00       	add    eax,0x1000
c0015f80:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015f83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f87:	e8 3b 3d ff ff       	call   c0009cc7 <free>
c0015f8c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015f8f:	e8 33 3d ff ff       	call   c0009cc7 <free>
c0015f94:	58                   	pop    eax
c0015f95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f99:	e8 29 3d ff ff       	call   c0009cc7 <free>
c0015f9e:	89 34 24             	mov    DWORD PTR [esp],esi
c0015fa1:	e8 c2 76 ff ff       	call   c000d668 <File::close()>
c0015fa6:	83 c4 10             	add    esp,0x10
c0015fa9:	b0 01                	mov    al,0x1
c0015fab:	83 c4 3c             	add    esp,0x3c
c0015fae:	5b                   	pop    ebx
c0015faf:	5e                   	pop    esi
c0015fb0:	5f                   	pop    edi
c0015fb1:	5d                   	pop    ebp
c0015fb2:	c3                   	ret    

c0015fb3 <Thr::runtimeReferenceHelper()>:
c0015fb3:	83 ec 18             	sub    esp,0x18
c0015fb6:	68 39 52 02 c0       	push   0xc0025239
c0015fbb:	e8 05 70 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0015fc0:	fa                   	cli    
c0015fc1:	83 c4 10             	add    esp,0x10
c0015fc4:	eb fe                	jmp    c0015fc4 <Thr::runtimeReferenceHelper()+0x11>

c0015fc6 <Thr::getAddressOfKernelSymbol(char const*)>:
c0015fc6:	57                   	push   edi
c0015fc7:	56                   	push   esi
c0015fc8:	53                   	push   ebx
c0015fc9:	31 db                	xor    ebx,ebx
c0015fcb:	39 1d a0 a8 02 c0    	cmp    DWORD PTR ds:0xc002a8a0,ebx
c0015fd1:	7e 3c                	jle    c001600f <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0015fd3:	8b 34 9d 20 a8 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd57e0]
c0015fda:	31 ff                	xor    edi,edi
c0015fdc:	39 3c 9d 20 a7 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd58e0],edi
c0015fe3:	7e 27                	jle    c001600c <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0015fe5:	50                   	push   eax
c0015fe6:	50                   	push   eax
c0015fe7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015feb:	8b 06                	mov    eax,DWORD PTR [esi]
c0015fed:	03 04 9d a0 a7 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd5860]
c0015ff4:	50                   	push   eax
c0015ff5:	e8 ca a7 fe ff       	call   c00007c4 <strcmp>
c0015ffa:	83 c4 10             	add    esp,0x10
c0015ffd:	85 c0                	test   eax,eax
c0015fff:	75 05                	jne    c0016006 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016001:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016004:	eb 0b                	jmp    c0016011 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016006:	83 c6 10             	add    esi,0x10
c0016009:	47                   	inc    edi
c001600a:	eb d0                	jmp    c0015fdc <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001600c:	43                   	inc    ebx
c001600d:	eb bc                	jmp    c0015fcb <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001600f:	31 c0                	xor    eax,eax
c0016011:	5b                   	pop    ebx
c0016012:	5e                   	pop    esi
c0016013:	5f                   	pop    edi
c0016014:	c3                   	ret    

c0016015 <Thr::loadKernelSymbolTable(char const*)>:
c0016015:	55                   	push   ebp
c0016016:	57                   	push   edi
c0016017:	56                   	push   esi
c0016018:	53                   	push   ebx
c0016019:	83 ec 68             	sub    esp,0x68
c001601c:	8b 35 f0 a8 02 c0    	mov    esi,DWORD PTR ds:0xc002a8f0
c0016022:	68 14 01 00 00       	push   0x114
c0016027:	e8 8b 3c ff ff       	call   c0009cb7 <malloc>
c001602c:	83 c4 0c             	add    esp,0xc
c001602f:	89 c3                	mov    ebx,eax
c0016031:	56                   	push   esi
c0016032:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016036:	50                   	push   eax
c0016037:	e8 f4 74 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001603c:	5e                   	pop    esi
c001603d:	5f                   	pop    edi
c001603e:	6a 01                	push   0x1
c0016040:	53                   	push   ebx
c0016041:	e8 c4 75 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0016046:	83 c4 10             	add    esp,0x10
c0016049:	85 c0                	test   eax,eax
c001604b:	74 0a                	je     c0016057 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001604d:	83 ec 0c             	sub    esp,0xc
c0016050:	68 5b 52 02 c0       	push   0xc002525b
c0016055:	eb 34                	jmp    c001608b <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016057:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001605f:	83 ec 0c             	sub    esp,0xc
c0016062:	6a 34                	push   0x34
c0016064:	e8 4e 3c ff ff       	call   c0009cb7 <malloc>
c0016069:	59                   	pop    ecx
c001606a:	89 c7                	mov    edi,eax
c001606c:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016072:	56                   	push   esi
c0016073:	57                   	push   edi
c0016074:	6a 00                	push   0x0
c0016076:	6a 34                	push   0x34
c0016078:	53                   	push   ebx
c0016079:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001607c:	83 c4 20             	add    esp,0x20
c001607f:	85 c0                	test   eax,eax
c0016081:	74 17                	je     c001609a <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016083:	83 ec 0c             	sub    esp,0xc
c0016086:	68 72 52 02 c0       	push   0xc0025272
c001608b:	e8 77 dd ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0016090:	83 c4 10             	add    esp,0x10
c0016093:	31 c0                	xor    eax,eax
c0016095:	e9 31 02 00 00       	jmp    c00162cb <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001609a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00160a0:	75 e1                	jne    c0016083 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00160a2:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00160a5:	85 c0                	test   eax,eax
c00160a7:	74 da                	je     c0016083 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00160a9:	52                   	push   edx
c00160aa:	31 d2                	xor    edx,edx
c00160ac:	52                   	push   edx
c00160ad:	50                   	push   eax
c00160ae:	53                   	push   ebx
c00160af:	e8 14 76 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c00160b4:	83 c4 10             	add    esp,0x10
c00160b7:	85 c0                	test   eax,eax
c00160b9:	75 c8                	jne    c0016083 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00160bb:	83 ec 0c             	sub    esp,0xc
c00160be:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00160c2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00160c6:	31 ed                	xor    ebp,ebp
c00160c8:	0f af c2             	imul   eax,edx
c00160cb:	50                   	push   eax
c00160cc:	e8 e6 3b ff ff       	call   c0009cb7 <malloc>
c00160d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00160d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00160d7:	89 34 24             	mov    DWORD PTR [esp],esi
c00160da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00160de:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00160e2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00160e6:	0f af c2             	imul   eax,edx
c00160e9:	99                   	cdq    
c00160ea:	52                   	push   edx
c00160eb:	50                   	push   eax
c00160ec:	53                   	push   ebx
c00160ed:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00160f0:	83 c4 20             	add    esp,0x20
c00160f3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00160fb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016103:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001610b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016113:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016117:	0f 86 aa 00 00 00    	jbe    c00161c7 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001611d:	0f b7 f5             	movzx  esi,bp
c0016120:	6b f6 28             	imul   esi,esi,0x28
c0016123:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016127:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001612a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001612e:	50                   	push   eax
c001612f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016133:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016137:	8b 16                	mov    edx,DWORD PTR [esi]
c0016139:	6b c0 28             	imul   eax,eax,0x28
c001613c:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016140:	89 d0                	mov    eax,edx
c0016142:	31 d2                	xor    edx,edx
c0016144:	52                   	push   edx
c0016145:	50                   	push   eax
c0016146:	53                   	push   ebx
c0016147:	e8 7c 75 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c001614c:	83 c4 0c             	add    esp,0xc
c001614f:	6a 20                	push   0x20
c0016151:	6a 00                	push   0x0
c0016153:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016157:	52                   	push   edx
c0016158:	e8 1f a5 fe ff       	call   c000067c <memset>
c001615d:	58                   	pop    eax
c001615e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016160:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016164:	51                   	push   ecx
c0016165:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016169:	52                   	push   edx
c001616a:	6a 00                	push   0x0
c001616c:	6a 1f                	push   0x1f
c001616e:	53                   	push   ebx
c001616f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016172:	83 c4 18             	add    esp,0x18
c0016175:	68 89 52 02 c0       	push   0xc0025289
c001617a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001617e:	52                   	push   edx
c001617f:	e8 40 a6 fe ff       	call   c00007c4 <strcmp>
c0016184:	83 c4 10             	add    esp,0x10
c0016187:	85 c0                	test   eax,eax
c0016189:	75 0f                	jne    c001619a <Thr::loadKernelSymbolTable(char const*)+0x185>
c001618b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001618e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016192:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016196:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001619a:	50                   	push   eax
c001619b:	50                   	push   eax
c001619c:	68 91 52 02 c0       	push   0xc0025291
c00161a1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00161a5:	50                   	push   eax
c00161a6:	e8 19 a6 fe ff       	call   c00007c4 <strcmp>
c00161ab:	83 c4 10             	add    esp,0x10
c00161ae:	85 c0                	test   eax,eax
c00161b0:	75 0f                	jne    c00161c1 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00161b2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00161b5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00161b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00161bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161c1:	45                   	inc    ebp
c00161c2:	e9 4c ff ff ff       	jmp    c0016113 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00161c7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00161cc:	75 10                	jne    c00161de <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00161ce:	83 ec 0c             	sub    esp,0xc
c00161d1:	68 99 52 02 c0       	push   0xc0025299
c00161d6:	e8 2c dc ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c00161db:	83 c4 10             	add    esp,0x10
c00161de:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00161e3:	75 10                	jne    c00161f5 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00161e5:	83 ec 0c             	sub    esp,0xc
c00161e8:	68 99 52 02 c0       	push   0xc0025299
c00161ed:	e8 15 dc ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c00161f2:	83 c4 10             	add    esp,0x10
c00161f5:	31 d2                	xor    edx,edx
c00161f7:	50                   	push   eax
c00161f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161fc:	52                   	push   edx
c00161fd:	50                   	push   eax
c00161fe:	53                   	push   ebx
c00161ff:	e8 c4 74 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0016204:	5a                   	pop    edx
c0016205:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016209:	e8 a9 3a ff ff       	call   c0009cb7 <malloc>
c001620e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016212:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016216:	31 c9                	xor    ecx,ecx
c0016218:	5e                   	pop    esi
c0016219:	8b 03                	mov    eax,DWORD PTR [ebx]
c001621b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001621f:	55                   	push   ebp
c0016220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016224:	51                   	push   ecx
c0016225:	52                   	push   edx
c0016226:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001622a:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001622e:	53                   	push   ebx
c001622f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016232:	83 c4 14             	add    esp,0x14
c0016235:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016239:	e8 79 3a ff ff       	call   c0009cb7 <malloc>
c001623e:	89 c6                	mov    esi,eax
c0016240:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016242:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016245:	56                   	push   esi
c0016246:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001624a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001624e:	51                   	push   ecx
c001624f:	52                   	push   edx
c0016250:	53                   	push   ebx
c0016251:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016258:	8b 15 a0 a8 02 c0    	mov    edx,DWORD PTR ds:0xc002a8a0
c001625e:	83 c4 1c             	add    esp,0x1c
c0016261:	c1 e8 04             	shr    eax,0x4
c0016264:	89 04 95 20 a7 02 c0 	mov    DWORD PTR [edx*4-0x3ffd58e0],eax
c001626b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001626f:	31 d2                	xor    edx,edx
c0016271:	52                   	push   edx
c0016272:	50                   	push   eax
c0016273:	53                   	push   ebx
c0016274:	e8 4f 74 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0016279:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001627b:	31 d2                	xor    edx,edx
c001627d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016280:	56                   	push   esi
c0016281:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016285:	52                   	push   edx
c0016286:	50                   	push   eax
c0016287:	53                   	push   ebx
c0016288:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001628b:	83 c4 14             	add    esp,0x14
c001628e:	53                   	push   ebx
c001628f:	e8 d4 73 ff ff       	call   c000d668 <File::close()>
c0016294:	5d                   	pop    ebp
c0016295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016299:	e8 29 3a ff ff       	call   c0009cc7 <free>
c001629e:	89 3c 24             	mov    DWORD PTR [esp],edi
c00162a1:	e8 21 3a ff ff       	call   c0009cc7 <free>
c00162a6:	a1 a0 a8 02 c0       	mov    eax,ds:0xc002a8a0
c00162ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00162af:	8d 50 01             	lea    edx,[eax+0x1]
c00162b2:	89 0c 85 20 a8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd57e0],ecx
c00162b9:	89 34 85 a0 a7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5860],esi
c00162c0:	89 15 a0 a8 02 c0    	mov    DWORD PTR ds:0xc002a8a0,edx
c00162c6:	83 c4 10             	add    esp,0x10
c00162c9:	b0 01                	mov    al,0x1
c00162cb:	83 c4 5c             	add    esp,0x5c
c00162ce:	5b                   	pop    ebx
c00162cf:	5e                   	pop    esi
c00162d0:	5f                   	pop    edi
c00162d1:	5d                   	pop    ebp
c00162d2:	c3                   	ret    

c00162d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00162d3:	55                   	push   ebp
c00162d4:	57                   	push   edi
c00162d5:	56                   	push   esi
c00162d6:	53                   	push   ebx
c00162d7:	81 ec 68 03 00 00    	sub    esp,0x368
c00162dd:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00162e4:	8b 1d f0 a8 02 c0    	mov    ebx,DWORD PTR ds:0xc002a8f0
c00162ea:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00162ee:	68 14 01 00 00       	push   0x114
c00162f3:	e8 bf 39 ff ff       	call   c0009cb7 <malloc>
c00162f8:	83 c4 0c             	add    esp,0xc
c00162fb:	89 c5                	mov    ebp,eax
c00162fd:	53                   	push   ebx
c00162fe:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016305:	50                   	push   eax
c0016306:	e8 25 72 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001630b:	5e                   	pop    esi
c001630c:	5f                   	pop    edi
c001630d:	6a 01                	push   0x1
c001630f:	55                   	push   ebp
c0016310:	e8 f5 72 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c0016315:	83 c4 10             	add    esp,0x10
c0016318:	85 c0                	test   eax,eax
c001631a:	0f 85 a7 06 00 00    	jne    c00169c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016320:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016328:	83 ec 0c             	sub    esp,0xc
c001632b:	6a 34                	push   0x34
c001632d:	e8 85 39 ff ff       	call   c0009cb7 <malloc>
c0016332:	5b                   	pop    ebx
c0016333:	89 c7                	mov    edi,eax
c0016335:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016339:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001633c:	53                   	push   ebx
c001633d:	57                   	push   edi
c001633e:	6a 00                	push   0x0
c0016340:	6a 34                	push   0x34
c0016342:	55                   	push   ebp
c0016343:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016346:	83 c4 20             	add    esp,0x20
c0016349:	85 c0                	test   eax,eax
c001634b:	0f 85 76 06 00 00    	jne    c00169c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016351:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016357:	0f 85 6a 06 00 00    	jne    c00169c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001635d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016360:	85 c0                	test   eax,eax
c0016362:	0f 84 5f 06 00 00    	je     c00169c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016368:	31 d2                	xor    edx,edx
c001636a:	51                   	push   ecx
c001636b:	52                   	push   edx
c001636c:	50                   	push   eax
c001636d:	55                   	push   ebp
c001636e:	e8 55 73 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0016373:	83 c4 10             	add    esp,0x10
c0016376:	85 c0                	test   eax,eax
c0016378:	0f 85 49 06 00 00    	jne    c00169c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001637e:	83 ec 0c             	sub    esp,0xc
c0016381:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016384:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016388:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001638c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016390:	0f af c2             	imul   eax,edx
c0016393:	50                   	push   eax
c0016394:	e8 1e 39 ff ff       	call   c0009cb7 <malloc>
c0016399:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001639c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00163a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00163a7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00163ab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00163af:	0f af c2             	imul   eax,edx
c00163b2:	99                   	cdq    
c00163b3:	52                   	push   edx
c00163b4:	50                   	push   eax
c00163b5:	55                   	push   ebp
c00163b6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00163b9:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00163bc:	83 c4 20             	add    esp,0x20
c00163bf:	85 c0                	test   eax,eax
c00163c1:	0f 84 00 06 00 00    	je     c00169c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00163c7:	52                   	push   edx
c00163c8:	31 d2                	xor    edx,edx
c00163ca:	52                   	push   edx
c00163cb:	50                   	push   eax
c00163cc:	55                   	push   ebp
c00163cd:	e8 f6 72 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c00163d2:	83 c4 10             	add    esp,0x10
c00163d5:	85 c0                	test   eax,eax
c00163d7:	0f 85 ea 05 00 00    	jne    c00169c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00163dd:	83 ec 0c             	sub    esp,0xc
c00163e0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00163e4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00163e8:	31 f6                	xor    esi,esi
c00163ea:	0f af c2             	imul   eax,edx
c00163ed:	50                   	push   eax
c00163ee:	e8 c4 38 ff ff       	call   c0009cb7 <malloc>
c00163f3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00163f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00163fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163fd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016401:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016405:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016409:	0f af c2             	imul   eax,edx
c001640c:	99                   	cdq    
c001640d:	52                   	push   edx
c001640e:	50                   	push   eax
c001640f:	55                   	push   ebp
c0016410:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016413:	83 c4 20             	add    esp,0x20
c0016416:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001641a:	0f 86 8a 00 00 00    	jbe    c00164aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016420:	0f b7 de             	movzx  ebx,si
c0016423:	c1 e3 05             	shl    ebx,0x5
c0016426:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001642a:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001642d:	75 75                	jne    c00164a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001642f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016432:	31 d2                	xor    edx,edx
c0016434:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016438:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001643b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001643f:	50                   	push   eax
c0016440:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016443:	52                   	push   edx
c0016444:	50                   	push   eax
c0016445:	55                   	push   ebp
c0016446:	e8 7d 72 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c001644b:	83 c4 10             	add    esp,0x10
c001644e:	85 c0                	test   eax,eax
c0016450:	0f 85 71 05 00 00    	jne    c00169c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016456:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001645d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016460:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016464:	31 d2                	xor    edx,edx
c0016466:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001646a:	83 ec 0c             	sub    esp,0xc
c001646d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016471:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016478:	50                   	push   eax
c0016479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001647d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016481:	52                   	push   edx
c0016482:	50                   	push   eax
c0016483:	55                   	push   ebp
c0016484:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016487:	83 c4 1c             	add    esp,0x1c
c001648a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001648d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016490:	50                   	push   eax
c0016491:	6a 00                	push   0x0
c0016493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016497:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001649b:	50                   	push   eax
c001649c:	e8 db a1 fe ff       	call   c000067c <memset>
c00164a1:	83 c4 10             	add    esp,0x10
c00164a4:	46                   	inc    esi
c00164a5:	e9 6c ff ff ff       	jmp    c0016416 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00164aa:	53                   	push   ebx
c00164ab:	31 db                	xor    ebx,ebx
c00164ad:	68 00 01 00 00       	push   0x100
c00164b2:	6a 00                	push   0x0
c00164b4:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00164b8:	50                   	push   eax
c00164b9:	e8 be a1 fe ff       	call   c000067c <memset>
c00164be:	83 c4 0c             	add    esp,0xc
c00164c1:	68 00 01 00 00       	push   0x100
c00164c6:	6a 00                	push   0x0
c00164c8:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00164cf:	50                   	push   eax
c00164d0:	e8 a7 a1 fe ff       	call   c000067c <memset>
c00164d5:	83 c4 10             	add    esp,0x10
c00164d8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00164e0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00164e8:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00164f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00164f8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016500:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016504:	0f 86 30 01 00 00    	jbe    c001663a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001650a:	0f b7 f3             	movzx  esi,bx
c001650d:	6b f6 28             	imul   esi,esi,0x28
c0016510:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016514:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016517:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001651b:	52                   	push   edx
c001651c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016520:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016524:	8b 06                	mov    eax,DWORD PTR [esi]
c0016526:	6b d2 28             	imul   edx,edx,0x28
c0016529:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001652d:	31 d2                	xor    edx,edx
c001652f:	52                   	push   edx
c0016530:	50                   	push   eax
c0016531:	55                   	push   ebp
c0016532:	e8 91 71 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0016537:	83 c4 0c             	add    esp,0xc
c001653a:	6a 20                	push   0x20
c001653c:	6a 00                	push   0x0
c001653e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016545:	51                   	push   ecx
c0016546:	e8 31 a1 fe ff       	call   c000067c <memset>
c001654b:	59                   	pop    ecx
c001654c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001654f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016553:	52                   	push   edx
c0016554:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001655b:	51                   	push   ecx
c001655c:	6a 00                	push   0x0
c001655e:	6a 1f                	push   0x1f
c0016560:	55                   	push   ebp
c0016561:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016564:	83 c4 1c             	add    esp,0x1c
c0016567:	6a 09                	push   0x9
c0016569:	68 b3 52 02 c0       	push   0xc00252b3
c001656e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016575:	51                   	push   ecx
c0016576:	e8 fd 9f fe ff       	call   c0000578 <memcmp>
c001657b:	83 c4 10             	add    esp,0x10
c001657e:	85 c0                	test   eax,eax
c0016580:	75 21                	jne    c00165a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0016582:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016586:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001658a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001658e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016592:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016595:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001659c:	89 d0                	mov    eax,edx
c001659e:	40                   	inc    eax
c001659f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165a3:	50                   	push   eax
c00165a4:	6a 09                	push   0x9
c00165a6:	68 bd 52 02 c0       	push   0xc00252bd
c00165ab:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00165b2:	50                   	push   eax
c00165b3:	e8 c0 9f fe ff       	call   c0000578 <memcmp>
c00165b8:	83 c4 10             	add    esp,0x10
c00165bb:	85 c0                	test   eax,eax
c00165bd:	75 21                	jne    c00165e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00165bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165c7:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00165cb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00165d2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00165d9:	89 d0                	mov    eax,edx
c00165db:	40                   	inc    eax
c00165dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165e0:	50                   	push   eax
c00165e1:	50                   	push   eax
c00165e2:	68 89 52 02 c0       	push   0xc0025289
c00165e7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00165ee:	50                   	push   eax
c00165ef:	e8 d0 a1 fe ff       	call   c00007c4 <strcmp>
c00165f4:	83 c4 10             	add    esp,0x10
c00165f7:	85 c0                	test   eax,eax
c00165f9:	75 0f                	jne    c001660a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00165fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00165fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016602:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016606:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001660a:	50                   	push   eax
c001660b:	50                   	push   eax
c001660c:	68 91 52 02 c0       	push   0xc0025291
c0016611:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016618:	50                   	push   eax
c0016619:	e8 a6 a1 fe ff       	call   c00007c4 <strcmp>
c001661e:	83 c4 10             	add    esp,0x10
c0016621:	85 c0                	test   eax,eax
c0016623:	75 0f                	jne    c0016634 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0016625:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016628:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001662c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016630:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016634:	43                   	inc    ebx
c0016635:	e9 c6 fe ff ff       	jmp    c0016500 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001663a:	31 d2                	xor    edx,edx
c001663c:	50                   	push   eax
c001663d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016641:	52                   	push   edx
c0016642:	50                   	push   eax
c0016643:	55                   	push   ebp
c0016644:	e8 7f 70 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0016649:	58                   	pop    eax
c001664a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001664e:	e8 64 36 ff ff       	call   c0009cb7 <malloc>
c0016653:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016656:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001665a:	31 d2                	xor    edx,edx
c001665c:	58                   	pop    eax
c001665d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016661:	53                   	push   ebx
c0016662:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016666:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001666a:	52                   	push   edx
c001666b:	50                   	push   eax
c001666c:	55                   	push   ebp
c001666d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016670:	83 c4 14             	add    esp,0x14
c0016673:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016677:	e8 3b 36 ff ff       	call   c0009cb7 <malloc>
c001667c:	31 d2                	xor    edx,edx
c001667e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016682:	83 c4 0c             	add    esp,0xc
c0016685:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016689:	52                   	push   edx
c001668a:	50                   	push   eax
c001668b:	55                   	push   ebp
c001668c:	e8 37 70 ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c0016691:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016694:	31 d2                	xor    edx,edx
c0016696:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016699:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001669d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00166a1:	52                   	push   edx
c00166a2:	50                   	push   eax
c00166a3:	55                   	push   ebp
c00166a4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00166a7:	83 c4 20             	add    esp,0x20
c00166aa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00166b2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00166b6:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00166ba:	0f 84 0b 03 00 00    	je     c00169cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00166c0:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00166c7:	31 d2                	xor    edx,edx
c00166c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00166cd:	c1 e8 03             	shr    eax,0x3
c00166d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00166d4:	51                   	push   ecx
c00166d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166d9:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00166dd:	52                   	push   edx
c00166de:	50                   	push   eax
c00166df:	55                   	push   ebp
c00166e0:	e8 e3 6f ff ff       	call   c000d6c8 <File::seek(unsigned long long)>
c00166e5:	5b                   	pop    ebx
c00166e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166ea:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00166f1:	e8 c1 35 ff ff       	call   c0009cb7 <malloc>
c00166f6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00166f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00166fd:	31 d2                	xor    edx,edx
c00166ff:	5e                   	pop    esi
c0016700:	8d 44 24 58          	lea    eax,[esp+0x58]
c0016704:	50                   	push   eax
c0016705:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016709:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001670d:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0016714:	52                   	push   edx
c0016715:	50                   	push   eax
c0016716:	55                   	push   ebp
c0016717:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001671a:	83 c4 20             	add    esp,0x20
c001671d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016725:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016729:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001672d:	0f 8d 7c 02 00 00    	jge    c00169af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0016733:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016737:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001673b:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0016740:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0016743:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016747:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001674b:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001674f:	89 d8                	mov    eax,ebx
c0016751:	c1 e8 08             	shr    eax,0x8
c0016754:	89 c6                	mov    esi,eax
c0016756:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001675a:	c1 e6 04             	shl    esi,0x4
c001675d:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0016761:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0016764:	85 d2                	test   edx,edx
c0016766:	0f 85 bf 00 00 00    	jne    c001682b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001676c:	83 ec 0c             	sub    esp,0xc
c001676f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016773:	03 06                	add    eax,DWORD PTR [esi]
c0016775:	50                   	push   eax
c0016776:	e8 4b f8 ff ff       	call   c0015fc6 <Thr::getAddressOfKernelSymbol(char const*)>
c001677b:	83 c4 10             	add    esp,0x10
c001677e:	89 c2                	mov    edx,eax
c0016780:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0016785:	85 c0                	test   eax,eax
c0016787:	0f 85 9e 00 00 00    	jne    c001682b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001678d:	83 ec 0c             	sub    esp,0xc
c0016790:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016794:	03 06                	add    eax,DWORD PTR [esi]
c0016796:	50                   	push   eax
c0016797:	e8 6c 21 ff ff       	call   c0008908 <Krnl::resolveCompatibilitySymbol(char*)>
c001679c:	83 c4 10             	add    esp,0x10
c001679f:	89 c2                	mov    edx,eax
c00167a1:	85 c0                	test   eax,eax
c00167a3:	0f 85 82 00 00 00    	jne    c001682b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00167a9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00167ad:	50                   	push   eax
c00167ae:	50                   	push   eax
c00167af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167b3:	03 06                	add    eax,DWORD PTR [esi]
c00167b5:	50                   	push   eax
c00167b6:	68 c7 52 02 c0       	push   0xc00252c7
c00167bb:	e8 05 68 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00167c0:	58                   	pop    eax
c00167c1:	5a                   	pop    edx
c00167c2:	68 e1 52 02 c0       	push   0xc00252e1
c00167c7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00167ce:	50                   	push   eax
c00167cf:	e8 64 9f fe ff       	call   c0000738 <strcpy>
c00167d4:	59                   	pop    ecx
c00167d5:	58                   	pop    eax
c00167d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00167da:	03 06                	add    eax,DWORD PTR [esi]
c00167dc:	50                   	push   eax
c00167dd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00167e4:	50                   	push   eax
c00167e5:	e8 8e a0 fe ff       	call   c0000878 <strcat>
c00167ea:	58                   	pop    eax
c00167eb:	5a                   	pop    edx
c00167ec:	68 77 53 02 c0       	push   0xc0025377
c00167f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00167f8:	50                   	push   eax
c00167f9:	e8 7a a0 fe ff       	call   c0000878 <strcat>
c00167fe:	83 c4 10             	add    esp,0x10
c0016801:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016806:	0f 84 5d 01 00 00    	je     c0016969 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001680c:	83 ec 0c             	sub    esp,0xc
c001680f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016816:	50                   	push   eax
c0016817:	e8 eb d5 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c001681c:	83 c4 10             	add    esp,0x10
c001681f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0016823:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016827:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001682b:	80 fb 01             	cmp    bl,0x1
c001682e:	0f 85 88 00 00 00    	jne    c00168bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0016834:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001683b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001683f:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0016843:	01 ce                	add    esi,ecx
c0016845:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001684b:	0f 94 c0             	sete   al
c001684e:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0016854:	0f 94 c3             	sete   bl
c0016857:	09 c3                	or     ebx,eax
c0016859:	8b 06                	mov    eax,DWORD PTR [esi]
c001685b:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0016860:	74 41                	je     c00168a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0016862:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016865:	84 db                	test   bl,bl
c0016867:	75 15                	jne    c001687e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0016869:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001686d:	66 83 f8 0c          	cmp    ax,0xc
c0016871:	76 05                	jbe    c0016878 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0016873:	b8 0c 00 00 00       	mov    eax,0xc
c0016878:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001687c:	76 37                	jbe    c00168b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001687e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0016882:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016887:	0f 84 dc 00 00 00    	je     c0016969 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001688d:	83 ec 0c             	sub    esp,0xc
c0016890:	68 f8 52 02 c0       	push   0xc00252f8
c0016895:	e8 6d d5 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c001689a:	83 c4 10             	add    esp,0x10
c001689d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00168a1:	eb 12                	jmp    c00168b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00168a3:	01 c1                	add    ecx,eax
c00168a5:	84 db                	test   bl,bl
c00168a7:	75 0c                	jne    c00168b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00168a9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00168ad:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00168b1:	77 02                	ja     c00168b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00168b3:	01 d1                	add    ecx,edx
c00168b5:	89 0e                	mov    DWORD PTR [esi],ecx
c00168b7:	e9 ea 00 00 00       	jmp    c00169a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00168bc:	80 fb 02             	cmp    bl,0x2
c00168bf:	75 7c                	jne    c001693d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00168c1:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00168c8:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00168cc:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c00168d0:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00168d6:	74 20                	je     c00168f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00168d8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00168de:	74 18                	je     c00168f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00168e0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00168e4:	b9 0a 00 00 00       	mov    ecx,0xa
c00168e9:	66 83 f8 0e          	cmp    ax,0xe
c00168ed:	77 03                	ja     c00168f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c00168ef:	8d 48 fc             	lea    ecx,[eax-0x4]
c00168f2:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c00168f6:	76 1f                	jbe    c0016917 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c00168f8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00168fc:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016901:	74 66                	je     c0016969 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0016903:	83 ec 0c             	sub    esp,0xc
c0016906:	68 14 53 02 c0       	push   0xc0025314
c001690b:	e8 f7 d4 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0016910:	83 c4 10             	add    esp,0x10
c0016913:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016917:	8b 06                	mov    eax,DWORD PTR [esi]
c0016919:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001691e:	74 13                	je     c0016933 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0016920:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0016924:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001692b:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001692f:	01 c8                	add    eax,ecx
c0016931:	eb 04                	jmp    c0016937 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0016933:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0016937:	01 c2                	add    edx,eax
c0016939:	89 16                	mov    DWORD PTR [esi],edx
c001693b:	eb 69                	jmp    c00169a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001693d:	0f b6 db             	movzx  ebx,bl
c0016940:	50                   	push   eax
c0016941:	50                   	push   eax
c0016942:	53                   	push   ebx
c0016943:	68 30 53 02 c0       	push   0xc0025330
c0016948:	e8 78 66 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001694d:	83 c4 10             	add    esp,0x10
c0016950:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0016955:	74 12                	je     c0016969 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0016957:	83 ec 0c             	sub    esp,0xc
c001695a:	68 3b 53 02 c0       	push   0xc002533b
c001695f:	e8 a3 d4 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0016964:	83 c4 10             	add    esp,0x10
c0016967:	eb 3d                	jmp    c00169a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0016969:	83 ec 0c             	sub    esp,0xc
c001696c:	55                   	push   ebp
c001696d:	e8 f6 6c ff ff       	call   c000d668 <File::close()>
c0016972:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016975:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016978:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001697b:	59                   	pop    ecx
c001697c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016980:	e8 42 33 ff ff       	call   c0009cc7 <free>
c0016985:	5b                   	pop    ebx
c0016986:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001698a:	e8 38 33 ff ff       	call   c0009cc7 <free>
c001698f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016992:	e8 30 33 ff ff       	call   c0009cc7 <free>
c0016997:	5e                   	pop    esi
c0016998:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001699c:	e8 26 33 ff ff       	call   c0009cc7 <free>
c00169a1:	83 c4 10             	add    esp,0x10
c00169a4:	eb 21                	jmp    c00169c7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00169a6:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00169aa:	e9 76 fd ff ff       	jmp    c0016725 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c00169af:	83 ec 0c             	sub    esp,0xc
c00169b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169b6:	e8 0c 33 ff ff       	call   c0009cc7 <free>
c00169bb:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00169bf:	83 c4 10             	add    esp,0x10
c00169c2:	e9 eb fc ff ff       	jmp    c00166b2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00169c7:	31 c0                	xor    eax,eax
c00169c9:	eb 33                	jmp    c00169fe <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c00169cb:	83 ec 0c             	sub    esp,0xc
c00169ce:	55                   	push   ebp
c00169cf:	e8 94 6c ff ff       	call   c000d668 <File::close()>
c00169d4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00169d7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00169da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00169dd:	58                   	pop    eax
c00169de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00169e2:	e8 e0 32 ff ff       	call   c0009cc7 <free>
c00169e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00169ea:	e8 d8 32 ff ff       	call   c0009cc7 <free>
c00169ef:	5a                   	pop    edx
c00169f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169f4:	e8 ce 32 ff ff       	call   c0009cc7 <free>
c00169f9:	83 c4 10             	add    esp,0x10
c00169fc:	b0 01                	mov    al,0x1
c00169fe:	81 c4 5c 03 00 00    	add    esp,0x35c
c0016a04:	5b                   	pop    ebx
c0016a05:	5e                   	pop    esi
c0016a06:	5f                   	pop    edi
c0016a07:	5d                   	pop    ebp
c0016a08:	c3                   	ret    

c0016a09 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0016a09:	56                   	push   esi
c0016a0a:	31 d2                	xor    edx,edx
c0016a0c:	53                   	push   ebx
c0016a0d:	8b 1d 00 a1 02 c0    	mov    ebx,DWORD PTR ds:0xc002a100
c0016a13:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016a17:	39 d3                	cmp    ebx,edx
c0016a19:	7e 1b                	jle    c0016a36 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0016a1b:	8b 04 95 20 a3 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5ce0]
c0016a22:	39 c8                	cmp    eax,ecx
c0016a24:	77 0d                	ja     c0016a33 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0016a26:	8b 34 95 20 a1 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd5ee0]
c0016a2d:	01 c6                	add    esi,eax
c0016a2f:	39 ce                	cmp    esi,ecx
c0016a31:	77 05                	ja     c0016a38 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0016a33:	42                   	inc    edx
c0016a34:	eb e1                	jmp    c0016a17 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0016a36:	31 c0                	xor    eax,eax
c0016a38:	5b                   	pop    ebx
c0016a39:	5e                   	pop    esi
c0016a3a:	c3                   	ret    

c0016a3b <Thr::getDriverNameFromAddress(unsigned long)>:
c0016a3b:	53                   	push   ebx
c0016a3c:	31 c0                	xor    eax,eax
c0016a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016a42:	8b 1d 00 a1 02 c0    	mov    ebx,DWORD PTR ds:0xc002a100
c0016a48:	39 c3                	cmp    ebx,eax
c0016a4a:	7e 22                	jle    c0016a6e <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0016a4c:	8b 14 85 20 a3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5ce0]
c0016a53:	39 ca                	cmp    edx,ecx
c0016a55:	77 14                	ja     c0016a6b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016a57:	03 14 85 20 a1 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd5ee0]
c0016a5e:	39 ca                	cmp    edx,ecx
c0016a60:	76 09                	jbe    c0016a6b <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016a62:	8b 04 85 20 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ae0]
c0016a69:	eb 05                	jmp    c0016a70 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0016a6b:	40                   	inc    eax
c0016a6c:	eb da                	jmp    c0016a48 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0016a6e:	31 c0                	xor    eax,eax
c0016a70:	5b                   	pop    ebx
c0016a71:	c3                   	ret    

c0016a72 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0016a72:	53                   	push   ebx
c0016a73:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016a77:	53                   	push   ebx
c0016a78:	e8 8c ff ff ff       	call   c0016a09 <Thr::getDriverBaseFromAddress(unsigned long)>
c0016a7d:	5a                   	pop    edx
c0016a7e:	31 d2                	xor    edx,edx
c0016a80:	85 c0                	test   eax,eax
c0016a82:	74 04                	je     c0016a88 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0016a84:	89 da                	mov    edx,ebx
c0016a86:	29 c2                	sub    edx,eax
c0016a88:	89 d0                	mov    eax,edx
c0016a8a:	5b                   	pop    ebx
c0016a8b:	c3                   	ret    

c0016a8c <Thr::loadDLL(char const*, bool)>:
c0016a8c:	55                   	push   ebp
c0016a8d:	57                   	push   edi
c0016a8e:	56                   	push   esi
c0016a8f:	53                   	push   ebx
c0016a90:	81 ec 34 01 00 00    	sub    esp,0x134
c0016a96:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016a9d:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016aa4:	56                   	push   esi
c0016aa5:	68 53 53 02 c0       	push   0xc0025353
c0016aaa:	e8 16 65 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016aaf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016ab6:	e8 fc 31 ff ff       	call   c0009cb7 <malloc>
c0016abb:	83 c4 0c             	add    esp,0xc
c0016abe:	89 c3                	mov    ebx,eax
c0016ac0:	ff 35 f0 a8 02 c0    	push   DWORD PTR ds:0xc002a8f0
c0016ac6:	56                   	push   esi
c0016ac7:	50                   	push   eax
c0016ac8:	e8 63 6a ff ff       	call   c000d530 <File::File(char const*, Process*)>
c0016acd:	83 c4 10             	add    esp,0x10
c0016ad0:	85 db                	test   ebx,ebx
c0016ad2:	75 3c                	jne    c0016b10 <Thr::loadDLL(char const*, bool)+0x84>
c0016ad4:	89 f8                	mov    eax,edi
c0016ad6:	84 c0                	test   al,al
c0016ad8:	0f 84 d2 01 00 00    	je     c0016cb0 <Thr::loadDLL(char const*, bool)+0x224>
c0016ade:	55                   	push   ebp
c0016adf:	55                   	push   ebp
c0016ae0:	68 64 53 02 c0       	push   0xc0025364
c0016ae5:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0016ae9:	55                   	push   ebp
c0016aea:	e8 49 9c fe ff       	call   c0000738 <strcpy>
c0016aef:	58                   	pop    eax
c0016af0:	5a                   	pop    edx
c0016af1:	56                   	push   esi
c0016af2:	55                   	push   ebp
c0016af3:	e8 80 9d fe ff       	call   c0000878 <strcat>
c0016af8:	59                   	pop    ecx
c0016af9:	58                   	pop    eax
c0016afa:	68 77 53 02 c0       	push   0xc0025377
c0016aff:	55                   	push   ebp
c0016b00:	e8 73 9d fe ff       	call   c0000878 <strcat>
c0016b05:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016b08:	e8 fa d2 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0016b0d:	83 c4 10             	add    esp,0x10
c0016b10:	51                   	push   ecx
c0016b11:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0016b15:	50                   	push   eax
c0016b16:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016b1a:	50                   	push   eax
c0016b1b:	53                   	push   ebx
c0016b1c:	e8 95 6d ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c0016b21:	83 c4 10             	add    esp,0x10
c0016b24:	85 db                	test   ebx,ebx
c0016b26:	74 0c                	je     c0016b34 <Thr::loadDLL(char const*, bool)+0xa8>
c0016b28:	83 ec 0c             	sub    esp,0xc
c0016b2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b2d:	53                   	push   ebx
c0016b2e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b31:	83 c4 10             	add    esp,0x10
c0016b34:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0016b39:	75 0a                	jne    c0016b45 <Thr::loadDLL(char const*, bool)+0xb9>
c0016b3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b3f:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0016b43:	75 3c                	jne    c0016b81 <Thr::loadDLL(char const*, bool)+0xf5>
c0016b45:	89 f8                	mov    eax,edi
c0016b47:	84 c0                	test   al,al
c0016b49:	0f 84 49 01 00 00    	je     c0016c98 <Thr::loadDLL(char const*, bool)+0x20c>
c0016b4f:	51                   	push   ecx
c0016b50:	51                   	push   ecx
c0016b51:	68 64 53 02 c0       	push   0xc0025364
c0016b56:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0016b5a:	53                   	push   ebx
c0016b5b:	e8 d8 9b fe ff       	call   c0000738 <strcpy>
c0016b60:	5d                   	pop    ebp
c0016b61:	58                   	pop    eax
c0016b62:	56                   	push   esi
c0016b63:	53                   	push   ebx
c0016b64:	e8 0f 9d fe ff       	call   c0000878 <strcat>
c0016b69:	58                   	pop    eax
c0016b6a:	5a                   	pop    edx
c0016b6b:	68 77 53 02 c0       	push   0xc0025377
c0016b70:	53                   	push   ebx
c0016b71:	e8 02 9d fe ff       	call   c0000878 <strcat>
c0016b76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b79:	e8 89 d2 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0016b7e:	83 c4 10             	add    esp,0x10
c0016b81:	52                   	push   edx
c0016b82:	6a 03                	push   0x3
c0016b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b88:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016b8c:	05 ff 0f 00 00       	add    eax,0xfff
c0016b91:	83 d2 00             	adc    edx,0x0
c0016b94:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016b98:	50                   	push   eax
c0016b99:	ff 35 d4 74 02 c0    	push   DWORD PTR ds:0xc00274d4
c0016b9f:	e8 34 58 ff ff       	call   c000c3d8 <VAS::allocatePages(int, int)>
c0016ba4:	59                   	pop    ecx
c0016ba5:	89 c3                	mov    ebx,eax
c0016ba7:	5d                   	pop    ebp
c0016ba8:	50                   	push   eax
c0016ba9:	68 a6 36 02 c0       	push   0xc00236a6
c0016bae:	e8 12 64 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016bb3:	89 34 24             	mov    DWORD PTR [esp],esi
c0016bb6:	e8 dd 9a fe ff       	call   c0000698 <strlen>
c0016bbb:	8b 2d 00 a1 02 c0    	mov    ebp,DWORD PTR ds:0xc002a100
c0016bc1:	40                   	inc    eax
c0016bc2:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bc5:	e8 ed 30 ff ff       	call   c0009cb7 <malloc>
c0016bca:	89 04 ad 20 a5 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd5ae0],eax
c0016bd1:	58                   	pop    eax
c0016bd2:	a1 00 a1 02 c0       	mov    eax,ds:0xc002a100
c0016bd7:	5a                   	pop    edx
c0016bd8:	56                   	push   esi
c0016bd9:	ff 34 85 20 a5 02 c0 	push   DWORD PTR [eax*4-0x3ffd5ae0]
c0016be0:	e8 53 9b fe ff       	call   c0000738 <strcpy>
c0016be5:	a1 00 a1 02 c0       	mov    eax,ds:0xc002a100
c0016bea:	8d 50 01             	lea    edx,[eax+0x1]
c0016bed:	89 1c 85 20 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ce0],ebx
c0016bf4:	89 15 00 a1 02 c0    	mov    DWORD PTR ds:0xc002a100,edx
c0016bfa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016bfe:	83 c4 0c             	add    esp,0xc
c0016c01:	89 14 85 20 a1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ee0],edx
c0016c08:	6a 01                	push   0x1
c0016c0a:	53                   	push   ebx
c0016c0b:	56                   	push   esi
c0016c0c:	e8 c2 f6 ff ff       	call   c00162d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0016c11:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0016c15:	83 c4 10             	add    esp,0x10
c0016c18:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0016c1d:	0f 85 89 00 00 00    	jne    c0016cac <Thr::loadDLL(char const*, bool)+0x220>
c0016c23:	89 f8                	mov    eax,edi
c0016c25:	84 c0                	test   al,al
c0016c27:	74 73                	je     c0016c9c <Thr::loadDLL(char const*, bool)+0x210>
c0016c29:	83 ec 0c             	sub    esp,0xc
c0016c2c:	68 79 53 02 c0       	push   0xc0025379
c0016c31:	e8 d1 d1 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0016c36:	83 c4 10             	add    esp,0x10
c0016c39:	eb 61                	jmp    c0016c9c <Thr::loadDLL(char const*, bool)+0x210>
c0016c3b:	50                   	push   eax
c0016c3c:	50                   	push   eax
c0016c3d:	89 e8                	mov    eax,ebp
c0016c3f:	c1 e0 0c             	shl    eax,0xc
c0016c42:	01 d8                	add    eax,ebx
c0016c44:	50                   	push   eax
c0016c45:	ff 35 d4 74 02 c0    	push   DWORD PTR ds:0xc00274d4
c0016c4b:	e8 ee 52 ff ff       	call   c000bf3e <VAS::getPageTableEntry(unsigned long)>
c0016c50:	83 c4 10             	add    esp,0x10
c0016c53:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c55:	a8 60                	test   al,0x60
c0016c57:	75 11                	jne    c0016c6a <Thr::loadDLL(char const*, bool)+0x1de>
c0016c59:	83 ec 0c             	sub    esp,0xc
c0016c5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016c61:	50                   	push   eax
c0016c62:	e8 84 36 ff ff       	call   c000a2eb <Phys::freePage(unsigned long)>
c0016c67:	83 c4 10             	add    esp,0x10
c0016c6a:	45                   	inc    ebp
c0016c6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c6f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016c73:	05 ff 0f 00 00       	add    eax,0xfff
c0016c78:	bf 00 00 00 00       	mov    edi,0x0
c0016c7d:	83 d2 00             	adc    edx,0x0
c0016c80:	0f ac d0 0c          	shrd   eax,edx,0xc
c0016c84:	c1 ea 0c             	shr    edx,0xc
c0016c87:	39 c5                	cmp    ebp,eax
c0016c89:	89 d1                	mov    ecx,edx
c0016c8b:	89 f8                	mov    eax,edi
c0016c8d:	19 c8                	sbb    eax,ecx
c0016c8f:	72 aa                	jb     c0016c3b <Thr::loadDLL(char const*, bool)+0x1af>
c0016c91:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0016c96:	75 18                	jne    c0016cb0 <Thr::loadDLL(char const*, bool)+0x224>
c0016c98:	31 db                	xor    ebx,ebx
c0016c9a:	eb 14                	jmp    c0016cb0 <Thr::loadDLL(char const*, bool)+0x224>
c0016c9c:	83 ec 0c             	sub    esp,0xc
c0016c9f:	68 98 53 02 c0       	push   0xc0025398
c0016ca4:	e8 5e d1 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0016ca9:	83 c4 10             	add    esp,0x10
c0016cac:	31 ed                	xor    ebp,ebp
c0016cae:	eb bb                	jmp    c0016c6b <Thr::loadDLL(char const*, bool)+0x1df>
c0016cb0:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016cb6:	89 d8                	mov    eax,ebx
c0016cb8:	5b                   	pop    ebx
c0016cb9:	5e                   	pop    esi
c0016cba:	5f                   	pop    edi
c0016cbb:	5d                   	pop    ebp
c0016cbc:	c3                   	ret    

c0016cbd <Thr::executeDLL(unsigned long, void*)>:
c0016cbd:	56                   	push   esi
c0016cbe:	53                   	push   ebx
c0016cbf:	52                   	push   edx
c0016cc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016cc4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016cc8:	85 db                	test   ebx,ebx
c0016cca:	75 10                	jne    c0016cdc <Thr::executeDLL(unsigned long, void*)+0x1f>
c0016ccc:	83 ec 0c             	sub    esp,0xc
c0016ccf:	68 b4 53 02 c0       	push   0xc00253b4
c0016cd4:	e8 2e d1 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0016cd9:	83 c4 10             	add    esp,0x10
c0016cdc:	50                   	push   eax
c0016cdd:	50                   	push   eax
c0016cde:	53                   	push   ebx
c0016cdf:	68 de 53 02 c0       	push   0xc00253de
c0016ce4:	e8 dc 62 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0016ce9:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016ced:	89 d8                	mov    eax,ebx
c0016cef:	83 c4 14             	add    esp,0x14
c0016cf2:	5b                   	pop    ebx
c0016cf3:	5e                   	pop    esi
c0016cf4:	ff e0                	jmp    eax
c0016cf6:	66 90                	xchg   ax,ax

c0016cf8 <userModeEntryPoint(void*)>:
c0016cf8:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0016cfd:	48                   	dec    eax
c0016cfe:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0016d03:	75 03                	jne    c0016d08 <userModeEntryPoint(void*)+0x10>
c0016d05:	fb                   	sti    
c0016d06:	66 90                	xchg   ax,ax
c0016d08:	fb                   	sti    
c0016d09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d11:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0016d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d1b:	e9 3f 95 fe ff       	jmp    c000025f <goToUsermode>

c0016d20 <changeTSS>:
c0016d20:	83 ec 14             	sub    esp,0x14
c0016d23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d28:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0016d2b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0016d30:	c1 e2 15             	shl    edx,0x15
c0016d33:	29 d0                	sub    eax,edx
c0016d35:	50                   	push   eax
c0016d36:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0016d3b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016d41:	05 7c 11 00 00       	add    eax,0x117c
c0016d46:	50                   	push   eax
c0016d47:	e8 70 48 ff ff       	call   c000b5bc <TSS::setESP(unsigned long)>
c0016d4c:	83 c4 1c             	add    esp,0x1c
c0016d4f:	c3                   	ret    

c0016d50 <switchToThread(ThreadControlBlock*)>:
c0016d50:	57                   	push   edi
c0016d51:	a1 c4 a8 02 c0       	mov    eax,ds:0xc002a8c4
c0016d56:	56                   	push   esi
c0016d57:	85 c0                	test   eax,eax
c0016d59:	53                   	push   ebx
c0016d5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016d5e:	0f 85 88 00 00 00    	jne    c0016dec <switchToThread(ThreadControlBlock*)+0x9c>
c0016d64:	8a 43 40             	mov    al,BYTE PTR [ebx+0x40]
c0016d67:	3c ff                	cmp    al,0xff
c0016d69:	74 7d                	je     c0016de8 <switchToThread(ThreadControlBlock*)+0x98>
c0016d6b:	0f b6 d0             	movzx  edx,al
c0016d6e:	b8 00 04 00 00       	mov    eax,0x400
c0016d73:	29 d0                	sub    eax,edx
c0016d75:	d1 f8                	sar    eax,1
c0016d77:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0016d7a:	66 90                	xchg   ax,ax
c0016d7c:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0016d7f:	ff 15 b8 a9 02 c0    	call   DWORD PTR ds:0xc002a9b8
c0016d85:	a3 08 a9 02 c0       	mov    ds:0xc002a908,eax
c0016d8a:	89 15 0c a9 02 c0    	mov    DWORD PTR ds:0xc002a90c,edx
c0016d90:	89 c6                	mov    esi,eax
c0016d92:	89 d7                	mov    edi,edx
c0016d94:	2b 35 f8 a8 02 c0    	sub    esi,DWORD PTR ds:0xc002a8f8
c0016d9a:	a3 f8 a8 02 c0       	mov    ds:0xc002a8f8,eax
c0016d9f:	1b 3d fc a8 02 c0    	sbb    edi,DWORD PTR ds:0xc002a8fc
c0016da5:	89 35 00 a9 02 c0    	mov    DWORD PTR ds:0xc002a900,esi
c0016dab:	89 3d 04 a9 02 c0    	mov    DWORD PTR ds:0xc002a904,edi
c0016db1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016db7:	89 15 fc a8 02 c0    	mov    DWORD PTR ds:0xc002a8fc,edx
c0016dbd:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016dc0:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0016dc3:	01 c6                	add    esi,eax
c0016dc5:	11 d7                	adc    edi,edx
c0016dc7:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016dca:	83 ec 0c             	sub    esp,0xc
c0016dcd:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016dd0:	53                   	push   ebx
c0016dd1:	e8 c1 94 fe ff       	call   c0000297 <switchToThreadASM>
c0016dd6:	0f 20 c0             	mov    eax,cr0
c0016dd9:	83 c8 08             	or     eax,0x8
c0016ddc:	0f 22 c0             	mov    cr0,eax
c0016ddf:	83 c4 10             	add    esp,0x10
c0016de2:	5b                   	pop    ebx
c0016de3:	5e                   	pop    esi
c0016de4:	5f                   	pop    edi
c0016de5:	c3                   	ret    
c0016de6:	66 90                	xchg   ax,ax
c0016de8:	31 c0                	xor    eax,eax
c0016dea:	eb 90                	jmp    c0016d7c <switchToThread(ThreadControlBlock*)+0x2c>
c0016dec:	5b                   	pop    ebx
c0016ded:	c7 05 c0 a8 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a8c0,0x1
c0016df7:	5e                   	pop    esi
c0016df8:	5f                   	pop    edi
c0016df9:	c3                   	ret    
c0016dfa:	66 90                	xchg   ax,ax

c0016dfc <Process::addArgs(char**)>:
c0016dfc:	57                   	push   edi
c0016dfd:	56                   	push   esi
c0016dfe:	53                   	push   ebx
c0016dff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016e07:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0016e11:	85 ff                	test   edi,edi
c0016e13:	74 43                	je     c0016e58 <Process::addArgs(char**)+0x5c>
c0016e15:	8b 07                	mov    eax,DWORD PTR [edi]
c0016e17:	85 c0                	test   eax,eax
c0016e19:	74 3d                	je     c0016e58 <Process::addArgs(char**)+0x5c>
c0016e1b:	31 db                	xor    ebx,ebx
c0016e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e20:	83 ec 0c             	sub    esp,0xc
c0016e23:	50                   	push   eax
c0016e24:	e8 6f 98 fe ff       	call   c0000698 <strlen>
c0016e29:	40                   	inc    eax
c0016e2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0016e2d:	e8 85 2e ff ff       	call   c0009cb7 <malloc>
c0016e32:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0016e39:	5a                   	pop    edx
c0016e3a:	59                   	pop    ecx
c0016e3b:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0016e3e:	43                   	inc    ebx
c0016e3f:	50                   	push   eax
c0016e40:	e8 f3 98 fe ff       	call   c0000738 <strcpy>
c0016e45:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0016e4b:	83 c4 10             	add    esp,0x10
c0016e4e:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0016e51:	85 c0                	test   eax,eax
c0016e53:	75 cb                	jne    c0016e20 <Process::addArgs(char**)+0x24>
c0016e55:	8d 76 00             	lea    esi,[esi+0x0]
c0016e58:	5b                   	pop    ebx
c0016e59:	5e                   	pop    esi
c0016e5a:	5f                   	pop    edi
c0016e5b:	c3                   	ret    

c0016e5c <Process::Process(char const*, Process*, char**)>:
c0016e5c:	56                   	push   esi
c0016e5d:	53                   	push   ebx
c0016e5e:	83 ec 14             	sub    esp,0x14
c0016e61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e65:	05 0c 02 00 00       	add    eax,0x20c
c0016e6a:	bb 07 00 00 00       	mov    ebx,0x7
c0016e6f:	89 c6                	mov    esi,eax
c0016e71:	8d 76 00             	lea    esi,[esi+0x0]
c0016e74:	85 db                	test   ebx,ebx
c0016e76:	78 14                	js     c0016e8c <Process::Process(char const*, Process*, char**)+0x30>
c0016e78:	83 ec 0c             	sub    esp,0xc
c0016e7b:	56                   	push   esi
c0016e7c:	e8 5b b8 00 00       	call   c00226dc <ThreadControlBlock::ThreadControlBlock()>
c0016e81:	83 c4 10             	add    esp,0x10
c0016e84:	83 c6 5f             	add    esi,0x5f
c0016e87:	4b                   	dec    ebx
c0016e88:	eb ea                	jmp    c0016e74 <Process::Process(char const*, Process*, char**)+0x18>
c0016e8a:	66 90                	xchg   ax,ax
c0016e8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016e90:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0016e97:	83 ec 0c             	sub    esp,0xc
c0016e9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e9e:	e8 ed cd ff ff       	call   c0013c90 <Krnl::newProcessEnv(Process*)>
c0016ea3:	83 c4 10             	add    esp,0x10
c0016ea6:	89 c2                	mov    edx,eax
c0016ea8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eac:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0016eb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016eb6:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0016ebf:	a1 30 6b 02 c0       	mov    eax,ds:0xc0026b30
c0016ec4:	8d 50 01             	lea    edx,[eax+0x1]
c0016ec7:	89 15 30 6b 02 c0    	mov    DWORD PTR ds:0xc0026b30,edx
c0016ecd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ed1:	89 02                	mov    DWORD PTR [edx],eax
c0016ed3:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0016edb:	83 ec 0c             	sub    esp,0xc
c0016ede:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016ee2:	e8 d0 2d ff ff       	call   c0009cb7 <malloc>
c0016ee7:	83 c4 10             	add    esp,0x10
c0016eea:	89 c3                	mov    ebx,eax
c0016eec:	83 ec 08             	sub    esp,0x8
c0016eef:	6a 00                	push   0x0
c0016ef1:	53                   	push   ebx
c0016ef2:	e8 89 58 ff ff       	call   c000c780 <VAS::VAS(bool)>
c0016ef7:	83 c4 10             	add    esp,0x10
c0016efa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016efe:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0016f04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f08:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016f12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f16:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016f1a:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0016f20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f24:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016f2a:	85 c0                	test   eax,eax
c0016f2c:	74 42                	je     c0016f70 <Process::Process(char const*, Process*, char**)+0x114>
c0016f2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f32:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016f38:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016f3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f42:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0016f48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f4c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016f52:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016f58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f5c:	05 0c 01 00 00       	add    eax,0x10c
c0016f61:	83 ec 08             	sub    esp,0x8
c0016f64:	52                   	push   edx
c0016f65:	50                   	push   eax
c0016f66:	e8 cd 97 fe ff       	call   c0000738 <strcpy>
c0016f6b:	83 c4 10             	add    esp,0x10
c0016f6e:	eb 64                	jmp    c0016fd4 <Process::Process(char const*, Process*, char**)+0x178>
c0016f70:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c0016f78:	83 ec 0c             	sub    esp,0xc
c0016f7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016f7f:	e8 33 2d ff ff       	call   c0009cb7 <malloc>
c0016f84:	83 c4 10             	add    esp,0x10
c0016f87:	89 c3                	mov    ebx,eax
c0016f89:	83 ec 08             	sub    esp,0x8
c0016f8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f90:	53                   	push   ebx
c0016f91:	e8 38 43 ff ff       	call   c000b2ce <VgaText::VgaText(char const*)>
c0016f96:	83 c4 10             	add    esp,0x10
c0016f99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f9d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0016fa3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fa7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016fad:	83 ec 0c             	sub    esp,0xc
c0016fb0:	50                   	push   eax
c0016fb1:	e8 e1 3a ff ff       	call   c000aa97 <addToTerminalCycle(VgaText*)>
c0016fb6:	83 c4 10             	add    esp,0x10
c0016fb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fbd:	05 0c 01 00 00       	add    eax,0x10c
c0016fc2:	83 ec 08             	sub    esp,0x8
c0016fc5:	68 fd 53 02 c0       	push   0xc00253fd
c0016fca:	50                   	push   eax
c0016fcb:	e8 68 97 fe ff       	call   c0000738 <strcpy>
c0016fd0:	83 c4 10             	add    esp,0x10
c0016fd3:	90                   	nop
c0016fd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fd8:	83 c0 0c             	add    eax,0xc
c0016fdb:	83 ec 08             	sub    esp,0x8
c0016fde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016fe2:	50                   	push   eax
c0016fe3:	e8 50 97 fe ff       	call   c0000738 <strcpy>
c0016fe8:	83 c4 10             	add    esp,0x10
c0016feb:	83 ec 08             	sub    esp,0x8
c0016fee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016ff2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ff6:	e8 01 fe ff ff       	call   c0016dfc <Process::addArgs(char**)>
c0016ffb:	83 c4 10             	add    esp,0x10
c0016ffe:	83 ec 08             	sub    esp,0x8
c0017001:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017005:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017009:	e8 8f ed ff ff       	call   c0015d9d <Thr::loadProgramIntoMemory(Process*, char const*)>
c001700e:	83 c4 10             	add    esp,0x10
c0017011:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017015:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017019:	83 f0 01             	xor    eax,0x1
c001701c:	88 c2                	mov    dl,al
c001701e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017022:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017028:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001702d:	83 ec 08             	sub    esp,0x8
c0017030:	50                   	push   eax
c0017031:	68 54 54 02 c0       	push   0xc0025454
c0017036:	e8 8a 5f ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001703b:	83 c4 10             	add    esp,0x10
c001703e:	90                   	nop
c001703f:	83 c4 14             	add    esp,0x14
c0017042:	5b                   	pop    ebx
c0017043:	5e                   	pop    esi
c0017044:	c3                   	ret    
c0017045:	90                   	nop
c0017046:	66 90                	xchg   ax,ax

c0017048 <Process::Process(bool, char const*, Process*, char**)>:
c0017048:	56                   	push   esi
c0017049:	53                   	push   ebx
c001704a:	83 ec 24             	sub    esp,0x24
c001704d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017051:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017055:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017059:	05 0c 02 00 00       	add    eax,0x20c
c001705e:	bb 07 00 00 00       	mov    ebx,0x7
c0017063:	89 c6                	mov    esi,eax
c0017065:	8d 76 00             	lea    esi,[esi+0x0]
c0017068:	85 db                	test   ebx,ebx
c001706a:	78 14                	js     c0017080 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001706c:	83 ec 0c             	sub    esp,0xc
c001706f:	56                   	push   esi
c0017070:	e8 67 b6 00 00       	call   c00226dc <ThreadControlBlock::ThreadControlBlock()>
c0017075:	83 c4 10             	add    esp,0x10
c0017078:	83 c6 5f             	add    esi,0x5f
c001707b:	4b                   	dec    ebx
c001707c:	eb ea                	jmp    c0017068 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001707e:	66 90                	xchg   ax,ax
c0017080:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017084:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001708b:	83 ec 0c             	sub    esp,0xc
c001708e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017092:	e8 f9 cb ff ff       	call   c0013c90 <Krnl::newProcessEnv(Process*)>
c0017097:	83 c4 10             	add    esp,0x10
c001709a:	89 c2                	mov    edx,eax
c001709c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170a0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00170a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170aa:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00170b3:	a1 30 6b 02 c0       	mov    eax,ds:0xc0026b30
c00170b8:	8d 50 01             	lea    edx,[eax+0x1]
c00170bb:	89 15 30 6b 02 c0    	mov    DWORD PTR ds:0xc0026b30,edx
c00170c1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00170c5:	89 02                	mov    DWORD PTR [edx],eax
c00170c7:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00170cf:	83 ec 0c             	sub    esp,0xc
c00170d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00170d6:	e8 dc 2b ff ff       	call   c0009cb7 <malloc>
c00170db:	83 c4 10             	add    esp,0x10
c00170de:	89 c3                	mov    ebx,eax
c00170e0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00170e5:	83 ec 08             	sub    esp,0x8
c00170e8:	50                   	push   eax
c00170e9:	53                   	push   ebx
c00170ea:	e8 91 56 ff ff       	call   c000c780 <VAS::VAS(bool)>
c00170ef:	83 c4 10             	add    esp,0x10
c00170f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00170f6:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00170fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017100:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001710a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001710e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017112:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001711c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017122:	85 c0                	test   eax,eax
c0017124:	74 42                	je     c0017168 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0017126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001712a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017130:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017136:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001713a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017140:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017144:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001714a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017150:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017154:	05 0c 01 00 00       	add    eax,0x10c
c0017159:	83 ec 08             	sub    esp,0x8
c001715c:	52                   	push   edx
c001715d:	50                   	push   eax
c001715e:	e8 d5 95 fe ff       	call   c0000738 <strcpy>
c0017163:	83 c4 10             	add    esp,0x10
c0017166:	eb 64                	jmp    c00171cc <Process::Process(bool, char const*, Process*, char**)+0x184>
c0017168:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c0017170:	83 ec 0c             	sub    esp,0xc
c0017173:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017177:	e8 3b 2b ff ff       	call   c0009cb7 <malloc>
c001717c:	83 c4 10             	add    esp,0x10
c001717f:	89 c3                	mov    ebx,eax
c0017181:	83 ec 08             	sub    esp,0x8
c0017184:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017188:	53                   	push   ebx
c0017189:	e8 40 41 ff ff       	call   c000b2ce <VgaText::VgaText(char const*)>
c001718e:	83 c4 10             	add    esp,0x10
c0017191:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017195:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001719b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001719f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00171a5:	83 ec 0c             	sub    esp,0xc
c00171a8:	50                   	push   eax
c00171a9:	e8 e9 38 ff ff       	call   c000aa97 <addToTerminalCycle(VgaText*)>
c00171ae:	83 c4 10             	add    esp,0x10
c00171b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171b5:	05 0c 01 00 00       	add    eax,0x10c
c00171ba:	83 ec 08             	sub    esp,0x8
c00171bd:	68 fd 53 02 c0       	push   0xc00253fd
c00171c2:	50                   	push   eax
c00171c3:	e8 70 95 fe ff       	call   c0000738 <strcpy>
c00171c8:	83 c4 10             	add    esp,0x10
c00171cb:	90                   	nop
c00171cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171d0:	83 c0 0c             	add    eax,0xc
c00171d3:	83 ec 08             	sub    esp,0x8
c00171d6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00171da:	50                   	push   eax
c00171db:	e8 58 95 fe ff       	call   c0000738 <strcpy>
c00171e0:	83 c4 10             	add    esp,0x10
c00171e3:	83 ec 08             	sub    esp,0x8
c00171e6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00171ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00171ee:	e8 09 fc ff ff       	call   c0016dfc <Process::addArgs(char**)>
c00171f3:	83 c4 10             	add    esp,0x10
c00171f6:	90                   	nop
c00171f7:	83 c4 24             	add    esp,0x24
c00171fa:	5b                   	pop    ebx
c00171fb:	5e                   	pop    esi
c00171fc:	c3                   	ret    
c00171fd:	8d 76 00             	lea    esi,[esi+0x0]

c0017200 <taskStartupFunction>:
c0017200:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017205:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0017208:	c3                   	ret    
c0017209:	90                   	nop
c001720a:	66 90                	xchg   ax,ax

c001720c <Semaphore::Semaphore(int)>:
c001720c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017210:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017214:	89 10                	mov    DWORD PTR [eax],edx
c0017216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001721a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017221:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017225:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001722c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017230:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017237:	90                   	nop
c0017238:	c3                   	ret    
c0017239:	90                   	nop
c001723a:	66 90                	xchg   ax,ax

c001723c <Mutex::Mutex()>:
c001723c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017240:	6a 01                	push   0x1
c0017242:	50                   	push   eax
c0017243:	e8 c4 ff ff ff       	call   c001720c <Semaphore::Semaphore(int)>
c0017248:	83 c4 08             	add    esp,0x8
c001724b:	90                   	nop
c001724c:	c3                   	ret    
c001724d:	90                   	nop
c001724e:	66 90                	xchg   ax,ax

c0017250 <Process::createThread(void (*)(void*), void*, int)>:
c0017250:	57                   	push   edi
c0017251:	31 c9                	xor    ecx,ecx
c0017253:	56                   	push   esi
c0017254:	53                   	push   ebx
c0017255:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017259:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0017260:	89 f2                	mov    edx,esi
c0017262:	66 90                	xchg   ax,ax
c0017264:	0f b7 c2             	movzx  eax,dx
c0017267:	83 e2 01             	and    edx,0x1
c001726a:	74 14                	je     c0017280 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001726c:	d1 f8                	sar    eax,1
c001726e:	41                   	inc    ecx
c001726f:	89 c2                	mov    edx,eax
c0017271:	83 f9 10             	cmp    ecx,0x10
c0017274:	75 ee                	jne    c0017264 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0017276:	31 db                	xor    ebx,ebx
c0017278:	89 d8                	mov    eax,ebx
c001727a:	5b                   	pop    ebx
c001727b:	5e                   	pop    esi
c001727c:	5f                   	pop    edi
c001727d:	c3                   	ret    
c001727e:	66 90                	xchg   ax,ax
c0017280:	b8 01 00 00 00       	mov    eax,0x1
c0017285:	d3 e0                	shl    eax,cl
c0017287:	09 c6                	or     esi,eax
c0017289:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001728c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0017293:	01 c0                	add    eax,eax
c0017295:	01 c8                	add    eax,ecx
c0017297:	8d 04 80             	lea    eax,[eax+eax*4]
c001729a:	01 d8                	add    eax,ebx
c001729c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00172a3:	75 0b                	jne    c00172b0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00172a5:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00172af:	90                   	nop
c00172b0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00172b6:	83 ec 08             	sub    esp,0x8
c00172b9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00172bc:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00172bf:	01 c0                	add    eax,eax
c00172c1:	01 c8                	add    eax,ecx
c00172c3:	8d 3c 80             	lea    edi,[eax+eax*4]
c00172c6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00172c9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00172cf:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00172d5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00172d9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00172df:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00172e5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00172ec:	89 ca                	mov    edx,ecx
c00172ee:	f7 da                	neg    edx
c00172f0:	c1 e2 15             	shl    edx,0x15
c00172f3:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00172f9:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00172ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017303:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001730d:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0017313:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017317:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001731d:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017327:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017331:	53                   	push   ebx
c0017332:	68 e4 a8 02 c0       	push   0xc002a8e4
c0017337:	e8 40 b1 00 00       	call   c002247c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001733c:	83 c4 10             	add    esp,0x10
c001733f:	89 d8                	mov    eax,ebx
c0017341:	5b                   	pop    ebx
c0017342:	5e                   	pop    esi
c0017343:	5f                   	pop    edi
c0017344:	c3                   	ret    
c0017345:	90                   	nop
c0017346:	66 90                	xchg   ax,ax

c0017348 <Process::createUserThread()>:
c0017348:	83 ec 0c             	sub    esp,0xc
c001734b:	68 80 00 00 00       	push   0x80
c0017350:	6a 00                	push   0x0
c0017352:	68 f8 6c 01 c0       	push   0xc0016cf8
c0017357:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001735b:	e8 f0 fe ff ff       	call   c0017250 <Process::createThread(void (*)(void*), void*, int)>
c0017360:	83 c4 1c             	add    esp,0x1c
c0017363:	c3                   	ret    

c0017364 <setupMultitasking(void (*)())>:
c0017364:	56                   	push   esi
c0017365:	53                   	push   ebx
c0017366:	51                   	push   ecx
c0017367:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001736b:	eb 13                	jmp    c0017380 <setupMultitasking(void (*)())+0x1c>
c001736d:	8d 76 00             	lea    esi,[esi+0x0]
c0017370:	83 ec 0c             	sub    esp,0xc
c0017373:	68 e4 a8 02 c0       	push   0xc002a8e4
c0017378:	e8 47 b0 00 00       	call   c00223c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001737d:	83 c4 10             	add    esp,0x10
c0017380:	83 ec 0c             	sub    esp,0xc
c0017383:	68 e4 a8 02 c0       	push   0xc002a8e4
c0017388:	e8 13 b0 00 00       	call   c00223a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001738d:	83 c4 10             	add    esp,0x10
c0017390:	84 c0                	test   al,al
c0017392:	74 dc                	je     c0017370 <setupMultitasking(void (*)())+0xc>
c0017394:	83 ec 0c             	sub    esp,0xc
c0017397:	68 1f 07 00 00       	push   0x71f
c001739c:	e8 16 29 ff ff       	call   c0009cb7 <malloc>
c00173a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00173a8:	89 c3                	mov    ebx,eax
c00173aa:	6a 00                	push   0x0
c00173ac:	68 01 54 02 c0       	push   0xc0025401
c00173b1:	6a 01                	push   0x1
c00173b3:	50                   	push   eax
c00173b4:	e8 8f fc ff ff       	call   c0017048 <Process::Process(bool, char const*, Process*, char**)>
c00173b9:	83 c4 14             	add    esp,0x14
c00173bc:	89 1d f0 a8 02 c0    	mov    DWORD PTR ds:0xc002a8f0,ebx
c00173c2:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c00173c8:	e8 d8 39 ff ff       	call   c000ada5 <setActiveTerminal(VgaText*)>
c00173cd:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00173d5:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00173df:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00173e5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00173e8:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00173f2:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00173f8:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00173fe:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017408:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0017412:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001741c:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017422:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001742c:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017432:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001743c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017442:	58                   	pop    eax
c0017443:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017449:	5a                   	pop    edx
c001744a:	68 fd 53 02 c0       	push   0xc00253fd
c001744f:	50                   	push   eax
c0017450:	e8 e3 92 fe ff       	call   c0000738 <strcpy>
c0017455:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001745c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017460:	83 c4 14             	add    esp,0x14
c0017463:	5b                   	pop    ebx
c0017464:	5e                   	pop    esi
c0017465:	e9 1f 8e fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c001746a:	66 90                	xchg   ax,ax

c001746c <schedule()>:
c001746c:	a1 c4 a8 02 c0       	mov    eax,ds:0xc002a8c4
c0017471:	85 c0                	test   eax,eax
c0017473:	74 0b                	je     c0017480 <schedule()+0x14>
c0017475:	c7 05 c0 a8 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a8c0,0x1
c001747f:	c3                   	ret    
c0017480:	53                   	push   ebx
c0017481:	83 ec 14             	sub    esp,0x14
c0017484:	68 e4 a8 02 c0       	push   0xc002a8e4
c0017489:	e8 12 af 00 00       	call   c00223a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001748e:	83 c4 10             	add    esp,0x10
c0017491:	84 c0                	test   al,al
c0017493:	75 3b                	jne    c00174d0 <schedule()+0x64>
c0017495:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001749a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001749d:	4a                   	dec    edx
c001749e:	74 38                	je     c00174d8 <schedule()+0x6c>
c00174a0:	83 ec 0c             	sub    esp,0xc
c00174a3:	68 e4 a8 02 c0       	push   0xc002a8e4
c00174a8:	e8 0f af 00 00       	call   c00223bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00174ad:	c7 04 24 e4 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8e4
c00174b4:	89 c3                	mov    ebx,eax
c00174b6:	e8 09 af 00 00       	call   c00223c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00174bb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00174c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00174c5:	e8 86 f8 ff ff       	call   c0016d50 <switchToThread(ThreadControlBlock*)>
c00174ca:	83 c4 10             	add    esp,0x10
c00174cd:	8d 76 00             	lea    esi,[esi+0x0]
c00174d0:	83 c4 08             	add    esp,0x8
c00174d3:	5b                   	pop    ebx
c00174d4:	c3                   	ret    
c00174d5:	8d 76 00             	lea    esi,[esi+0x0]
c00174d8:	83 ec 08             	sub    esp,0x8
c00174db:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00174e2:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00174e8:	68 e4 a8 02 c0       	push   0xc002a8e4
c00174ed:	e8 8a af 00 00       	call   c002247c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00174f2:	83 c4 10             	add    esp,0x10
c00174f5:	eb a9                	jmp    c00174a0 <schedule()+0x34>
c00174f7:	90                   	nop

c00174f8 <Semaphore::tryAcquire()>:
c00174f8:	53                   	push   ebx
c00174f9:	83 ec 08             	sub    esp,0x8
c00174fc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017500:	fa                   	cli    
c0017501:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0017506:	8d 50 01             	lea    edx,[eax+0x1]
c0017509:	89 15 c8 a8 02 c0    	mov    DWORD PTR ds:0xc002a8c8,edx
c001750f:	8b 15 c4 a8 02 c0    	mov    edx,DWORD PTR ds:0xc002a8c4
c0017515:	8d 5a 01             	lea    ebx,[edx+0x1]
c0017518:	89 1d c4 a8 02 c0    	mov    DWORD PTR ds:0xc002a8c4,ebx
c001751e:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0017521:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0017523:	7c 33                	jl     c0017558 <Semaphore::tryAcquire()+0x60>
c0017525:	89 15 c4 a8 02 c0    	mov    DWORD PTR ds:0xc002a8c4,edx
c001752b:	85 d2                	test   edx,edx
c001752d:	75 0d                	jne    c001753c <Semaphore::tryAcquire()+0x44>
c001752f:	8b 15 c0 a8 02 c0    	mov    edx,DWORD PTR ds:0xc002a8c0
c0017535:	85 d2                	test   edx,edx
c0017537:	75 6b                	jne    c00175a4 <Semaphore::tryAcquire()+0xac>
c0017539:	8d 76 00             	lea    esi,[esi+0x0]
c001753c:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0017541:	85 c0                	test   eax,eax
c0017543:	74 0b                	je     c0017550 <Semaphore::tryAcquire()+0x58>
c0017545:	8d 76 00             	lea    esi,[esi+0x0]
c0017548:	31 c0                	xor    eax,eax
c001754a:	83 c4 08             	add    esp,0x8
c001754d:	5b                   	pop    ebx
c001754e:	c3                   	ret    
c001754f:	90                   	nop
c0017550:	fb                   	sti    
c0017551:	83 c4 08             	add    esp,0x8
c0017554:	5b                   	pop    ebx
c0017555:	c3                   	ret    
c0017556:	66 90                	xchg   ax,ax
c0017558:	43                   	inc    ebx
c0017559:	89 15 c4 a8 02 c0    	mov    DWORD PTR ds:0xc002a8c4,edx
c001755f:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0017562:	85 d2                	test   edx,edx
c0017564:	75 22                	jne    c0017588 <Semaphore::tryAcquire()+0x90>
c0017566:	8b 0d c0 a8 02 c0    	mov    ecx,DWORD PTR ds:0xc002a8c0
c001756c:	85 c9                	test   ecx,ecx
c001756e:	74 18                	je     c0017588 <Semaphore::tryAcquire()+0x90>
c0017570:	c7 05 c0 a8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a8c0,0x0
c001757a:	e8 ed fe ff ff       	call   c001746c <schedule()>
c001757f:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0017584:	48                   	dec    eax
c0017585:	8d 76 00             	lea    esi,[esi+0x0]
c0017588:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c001758d:	85 c0                	test   eax,eax
c001758f:	75 0b                	jne    c001759c <Semaphore::tryAcquire()+0xa4>
c0017591:	fb                   	sti    
c0017592:	b0 01                	mov    al,0x1
c0017594:	83 c4 08             	add    esp,0x8
c0017597:	5b                   	pop    ebx
c0017598:	c3                   	ret    
c0017599:	8d 76 00             	lea    esi,[esi+0x0]
c001759c:	b0 01                	mov    al,0x1
c001759e:	83 c4 08             	add    esp,0x8
c00175a1:	5b                   	pop    ebx
c00175a2:	c3                   	ret    
c00175a3:	90                   	nop
c00175a4:	c7 05 c0 a8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a8c0,0x0
c00175ae:	e8 b9 fe ff ff       	call   c001746c <schedule()>
c00175b3:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c00175b8:	48                   	dec    eax
c00175b9:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c00175be:	85 c0                	test   eax,eax
c00175c0:	75 86                	jne    c0017548 <Semaphore::tryAcquire()+0x50>
c00175c2:	eb 8c                	jmp    c0017550 <Semaphore::tryAcquire()+0x58>

c00175c4 <Semaphore::assertLocked(char const*)>:
c00175c4:	83 ec 0c             	sub    esp,0xc
c00175c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00175cb:	fa                   	cli    
c00175cc:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c00175d2:	a1 c4 a8 02 c0       	mov    eax,ds:0xc002a8c4
c00175d7:	8d 48 01             	lea    ecx,[eax+0x1]
c00175da:	89 0d c4 a8 02 c0    	mov    DWORD PTR ds:0xc002a8c4,ecx
c00175e0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00175e2:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00175e5:	7c 29                	jl     c0017610 <Semaphore::assertLocked(char const*)+0x4c>
c00175e7:	90                   	nop
c00175e8:	a3 c4 a8 02 c0       	mov    ds:0xc002a8c4,eax
c00175ed:	85 c0                	test   eax,eax
c00175ef:	75 0b                	jne    c00175fc <Semaphore::assertLocked(char const*)+0x38>
c00175f1:	a1 c0 a8 02 c0       	mov    eax,ds:0xc002a8c0
c00175f6:	85 c0                	test   eax,eax
c00175f8:	75 2e                	jne    c0017628 <Semaphore::assertLocked(char const*)+0x64>
c00175fa:	66 90                	xchg   ax,ax
c00175fc:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0017601:	48                   	dec    eax
c0017602:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0017607:	75 03                	jne    c001760c <Semaphore::assertLocked(char const*)+0x48>
c0017609:	fb                   	sti    
c001760a:	66 90                	xchg   ax,ax
c001760c:	83 c4 0c             	add    esp,0xc
c001760f:	c3                   	ret    
c0017610:	83 ec 0c             	sub    esp,0xc
c0017613:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017617:	e8 eb c7 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c001761c:	a1 c4 a8 02 c0       	mov    eax,ds:0xc002a8c4
c0017621:	83 c4 10             	add    esp,0x10
c0017624:	48                   	dec    eax
c0017625:	eb c1                	jmp    c00175e8 <Semaphore::assertLocked(char const*)+0x24>
c0017627:	90                   	nop
c0017628:	c7 05 c0 a8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a8c0,0x0
c0017632:	e8 35 fe ff ff       	call   c001746c <schedule()>
c0017637:	eb c3                	jmp    c00175fc <Semaphore::assertLocked(char const*)+0x38>
c0017639:	8d 76 00             	lea    esi,[esi+0x0]

c001763c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001763c:	83 ec 0c             	sub    esp,0xc
c001763f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017644:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017648:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001764b:	e8 1c fe ff ff       	call   c001746c <schedule()>
c0017650:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0017655:	48                   	dec    eax
c0017656:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c001765b:	75 03                	jne    c0017660 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001765d:	fb                   	sti    
c001765e:	66 90                	xchg   ax,ax
c0017660:	83 c4 0c             	add    esp,0xc
c0017663:	c3                   	ret    

c0017664 <blockTask(TaskState)>:
c0017664:	83 ec 0c             	sub    esp,0xc
c0017667:	fa                   	cli    
c0017668:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c001766e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017672:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017677:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001767a:	e8 ed fd ff ff       	call   c001746c <schedule()>
c001767f:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0017684:	48                   	dec    eax
c0017685:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c001768a:	75 04                	jne    c0017690 <blockTask(TaskState)+0x2c>
c001768c:	fb                   	sti    
c001768d:	8d 76 00             	lea    esi,[esi+0x0]
c0017690:	83 c4 0c             	add    esp,0xc
c0017693:	c3                   	ret    

c0017694 <waitTask(int, int*, int)>:
c0017694:	83 ec 18             	sub    esp,0x18
c0017697:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001769c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176a0:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00176a3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176ac:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00176af:	6a 07                	push   0x7
c00176b1:	e8 ae ff ff ff       	call   c0017664 <blockTask(TaskState)>
c00176b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176bb:	83 c4 10             	add    esp,0x10
c00176be:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00176c1:	85 d2                	test   edx,edx
c00176c3:	74 0b                	je     c00176d0 <waitTask(int, int*, int)+0x3c>
c00176c5:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00176c8:	89 02                	mov    DWORD PTR [edx],eax
c00176ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176cf:	90                   	nop
c00176d0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00176d3:	83 c4 0c             	add    esp,0xc
c00176d6:	c3                   	ret    
c00176d7:	90                   	nop

c00176d8 <milliTenthSleepUntil(unsigned int)>:
c00176d8:	83 ec 0c             	sub    esp,0xc
c00176db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176df:	39 05 cc 99 02 c0    	cmp    DWORD PTR ds:0xc00299cc,eax
c00176e5:	76 05                	jbe    c00176ec <milliTenthSleepUntil(unsigned int)+0x14>
c00176e7:	90                   	nop
c00176e8:	83 c4 0c             	add    esp,0xc
c00176eb:	c3                   	ret    
c00176ec:	fa                   	cli    
c00176ed:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c00176f3:	83 ec 08             	sub    esp,0x8
c00176f6:	ff 05 c4 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c4
c00176fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017702:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0017705:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001770b:	68 d8 a8 02 c0       	push   0xc002a8d8
c0017710:	e8 67 ad 00 00       	call   c002247c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017715:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001771c:	e8 43 ff ff ff       	call   c0017664 <blockTask(TaskState)>
c0017721:	a1 c4 a8 02 c0       	mov    eax,ds:0xc002a8c4
c0017726:	83 c4 10             	add    esp,0x10
c0017729:	48                   	dec    eax
c001772a:	a3 c4 a8 02 c0       	mov    ds:0xc002a8c4,eax
c001772f:	85 c0                	test   eax,eax
c0017731:	75 09                	jne    c001773c <milliTenthSleepUntil(unsigned int)+0x64>
c0017733:	a1 c0 a8 02 c0       	mov    eax,ds:0xc002a8c0
c0017738:	85 c0                	test   eax,eax
c001773a:	75 14                	jne    c0017750 <milliTenthSleepUntil(unsigned int)+0x78>
c001773c:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0017741:	48                   	dec    eax
c0017742:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0017747:	75 9f                	jne    c00176e8 <milliTenthSleepUntil(unsigned int)+0x10>
c0017749:	fb                   	sti    
c001774a:	83 c4 0c             	add    esp,0xc
c001774d:	c3                   	ret    
c001774e:	66 90                	xchg   ax,ax
c0017750:	c7 05 c0 a8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a8c0,0x0
c001775a:	e8 0d fd ff ff       	call   c001746c <schedule()>
c001775f:	eb db                	jmp    c001773c <milliTenthSleepUntil(unsigned int)+0x64>
c0017761:	8d 76 00             	lea    esi,[esi+0x0]

c0017764 <milliTenthSleep(unsigned int)>:
c0017764:	a1 cc 99 02 c0       	mov    eax,ds:0xc00299cc
c0017769:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001776d:	e9 66 ff ff ff       	jmp    c00176d8 <milliTenthSleepUntil(unsigned int)>
c0017772:	66 90                	xchg   ax,ax

c0017774 <sleep(unsigned int)>:
c0017774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017778:	8d 04 80             	lea    eax,[eax+eax*4]
c001777b:	8d 04 80             	lea    eax,[eax+eax*4]
c001777e:	8d 04 80             	lea    eax,[eax+eax*4]
c0017781:	8d 04 80             	lea    eax,[eax+eax*4]
c0017784:	c1 e0 04             	shl    eax,0x4
c0017787:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001778b:	eb d7                	jmp    c0017764 <milliTenthSleep(unsigned int)>
c001778d:	90                   	nop
c001778e:	66 90                	xchg   ax,ax

c0017790 <Semaphore::acquire()>:
c0017790:	83 ec 0c             	sub    esp,0xc
c0017793:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017797:	fa                   	cli    
c0017798:	a1 c4 a8 02 c0       	mov    eax,ds:0xc002a8c4
c001779d:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c00177a3:	8d 48 01             	lea    ecx,[eax+0x1]
c00177a6:	89 0d c4 a8 02 c0    	mov    DWORD PTR ds:0xc002a8c4,ecx
c00177ac:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00177af:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00177b1:	7d 2d                	jge    c00177e0 <Semaphore::acquire()+0x50>
c00177b3:	41                   	inc    ecx
c00177b4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00177b7:	90                   	nop
c00177b8:	a3 c4 a8 02 c0       	mov    ds:0xc002a8c4,eax
c00177bd:	85 c0                	test   eax,eax
c00177bf:	75 0b                	jne    c00177cc <Semaphore::acquire()+0x3c>
c00177c1:	a1 c0 a8 02 c0       	mov    eax,ds:0xc002a8c0
c00177c6:	85 c0                	test   eax,eax
c00177c8:	75 62                	jne    c001782c <Semaphore::acquire()+0x9c>
c00177ca:	66 90                	xchg   ax,ax
c00177cc:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c00177d1:	48                   	dec    eax
c00177d2:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c00177d7:	75 03                	jne    c00177dc <Semaphore::acquire()+0x4c>
c00177d9:	fb                   	sti    
c00177da:	66 90                	xchg   ax,ax
c00177dc:	83 c4 0c             	add    esp,0xc
c00177df:	c3                   	ret    
c00177e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177e5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00177ec:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00177ef:	85 c9                	test   ecx,ecx
c00177f1:	74 4d                	je     c0017840 <Semaphore::acquire()+0xb0>
c00177f3:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00177f6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00177fc:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00177ff:	90                   	nop
c0017800:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017805:	83 ec 0c             	sub    esp,0xc
c0017808:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001780b:	68 7c 54 02 c0       	push   0xc002547c
c0017810:	e8 b0 57 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0017815:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001781c:	e8 43 fe ff ff       	call   c0017664 <blockTask(TaskState)>
c0017821:	a1 c4 a8 02 c0       	mov    eax,ds:0xc002a8c4
c0017826:	83 c4 10             	add    esp,0x10
c0017829:	48                   	dec    eax
c001782a:	eb 8c                	jmp    c00177b8 <Semaphore::acquire()+0x28>
c001782c:	c7 05 c0 a8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a8c0,0x0
c0017836:	e8 31 fc ff ff       	call   c001746c <schedule()>
c001783b:	eb 8f                	jmp    c00177cc <Semaphore::acquire()+0x3c>
c001783d:	8d 76 00             	lea    esi,[esi+0x0]
c0017840:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017845:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017848:	eb b6                	jmp    c0017800 <Semaphore::acquire()+0x70>
c001784a:	66 90                	xchg   ax,ax

c001784c <taskReturned>:
c001784c:	83 ec 18             	sub    esp,0x18
c001784f:	68 9c 54 02 c0       	push   0xc002549c
c0017854:	e8 ae c5 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0017859:	83 c4 10             	add    esp,0x10
c001785c:	83 ec 0c             	sub    esp,0xc
c001785f:	6a 02                	push   0x2
c0017861:	e8 fe fd ff ff       	call   c0017664 <blockTask(TaskState)>
c0017866:	fa                   	cli    
c0017867:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c001786d:	e8 fa fb ff ff       	call   c001746c <schedule()>
c0017872:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0017877:	83 c4 10             	add    esp,0x10
c001787a:	48                   	dec    eax
c001787b:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0017880:	85 c0                	test   eax,eax
c0017882:	75 d8                	jne    c001785c <taskReturned+0x10>
c0017884:	fb                   	sti    
c0017885:	eb d5                	jmp    c001785c <taskReturned+0x10>
c0017887:	90                   	nop

c0017888 <Thr::processFromPID(int)>:
c0017888:	57                   	push   edi
c0017889:	56                   	push   esi
c001788a:	53                   	push   ebx
c001788b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001788f:	fa                   	cli    
c0017890:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c0017896:	83 ec 0c             	sub    esp,0xc
c0017899:	68 e4 a8 02 c0       	push   0xc002a8e4
c001789e:	e8 19 ab 00 00       	call   c00223bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00178a3:	83 c4 10             	add    esp,0x10
c00178a6:	89 c7                	mov    edi,eax
c00178a8:	eb 16                	jmp    c00178c0 <Thr::processFromPID(int)+0x38>
c00178aa:	66 90                	xchg   ax,ax
c00178ac:	83 ec 0c             	sub    esp,0xc
c00178af:	68 e4 a8 02 c0       	push   0xc002a8e4
c00178b4:	e8 03 ab 00 00       	call   c00223bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00178b9:	83 c4 10             	add    esp,0x10
c00178bc:	39 f8                	cmp    eax,edi
c00178be:	74 4c                	je     c001790c <Thr::processFromPID(int)+0x84>
c00178c0:	83 ec 0c             	sub    esp,0xc
c00178c3:	68 e4 a8 02 c0       	push   0xc002a8e4
c00178c8:	e8 ef aa 00 00       	call   c00223bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00178cd:	c7 04 24 e4 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8e4
c00178d4:	89 c3                	mov    ebx,eax
c00178d6:	e8 e9 aa 00 00       	call   c00223c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00178db:	58                   	pop    eax
c00178dc:	5a                   	pop    edx
c00178dd:	53                   	push   ebx
c00178de:	68 e4 a8 02 c0       	push   0xc002a8e4
c00178e3:	e8 94 ab 00 00       	call   c002247c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00178e8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00178eb:	83 c4 10             	add    esp,0x10
c00178ee:	39 30                	cmp    DWORD PTR [eax],esi
c00178f0:	75 ba                	jne    c00178ac <Thr::processFromPID(int)+0x24>
c00178f2:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c00178f7:	48                   	dec    eax
c00178f8:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c00178fd:	74 09                	je     c0017908 <Thr::processFromPID(int)+0x80>
c00178ff:	90                   	nop
c0017900:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017903:	5b                   	pop    ebx
c0017904:	5e                   	pop    esi
c0017905:	5f                   	pop    edi
c0017906:	c3                   	ret    
c0017907:	90                   	nop
c0017908:	fb                   	sti    
c0017909:	eb f5                	jmp    c0017900 <Thr::processFromPID(int)+0x78>
c001790b:	90                   	nop
c001790c:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0017911:	48                   	dec    eax
c0017912:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0017917:	75 07                	jne    c0017920 <Thr::processFromPID(int)+0x98>
c0017919:	fb                   	sti    
c001791a:	5b                   	pop    ebx
c001791b:	5e                   	pop    esi
c001791c:	5f                   	pop    edi
c001791d:	c3                   	ret    
c001791e:	66 90                	xchg   ax,ax
c0017920:	5b                   	pop    ebx
c0017921:	31 c0                	xor    eax,eax
c0017923:	5e                   	pop    esi
c0017924:	5f                   	pop    edi
c0017925:	c3                   	ret    
c0017926:	66 90                	xchg   ax,ax

c0017928 <unblockTask(ThreadControlBlock*)>:
c0017928:	53                   	push   ebx
c0017929:	83 ec 08             	sub    esp,0x8
c001792c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017930:	fa                   	cli    
c0017931:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c0017937:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001793a:	85 c0                	test   eax,eax
c001793c:	74 66                	je     c00179a4 <unblockTask(ThreadControlBlock*)+0x7c>
c001793e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017941:	48                   	dec    eax
c0017942:	74 38                	je     c001797c <unblockTask(ThreadControlBlock*)+0x54>
c0017944:	83 ec 0c             	sub    esp,0xc
c0017947:	68 e4 a8 02 c0       	push   0xc002a8e4
c001794c:	e8 6b aa 00 00       	call   c00223bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017951:	83 c4 10             	add    esp,0x10
c0017954:	85 c0                	test   eax,eax
c0017956:	75 1c                	jne    c0017974 <unblockTask(ThreadControlBlock*)+0x4c>
c0017958:	eb 5e                	jmp    c00179b8 <unblockTask(ThreadControlBlock*)+0x90>
c001795a:	66 90                	xchg   ax,ax
c001795c:	83 ec 08             	sub    esp,0x8
c001795f:	50                   	push   eax
c0017960:	68 e4 a8 02 c0       	push   0xc002a8e4
c0017965:	e8 02 ae 00 00       	call   c002276c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001796a:	83 c4 10             	add    esp,0x10
c001796d:	85 c0                	test   eax,eax
c001796f:	74 47                	je     c00179b8 <unblockTask(ThreadControlBlock*)+0x90>
c0017971:	8d 76 00             	lea    esi,[esi+0x0]
c0017974:	39 c3                	cmp    ebx,eax
c0017976:	75 e4                	jne    c001795c <unblockTask(ThreadControlBlock*)+0x34>
c0017978:	eb 12                	jmp    c001798c <unblockTask(ThreadControlBlock*)+0x64>
c001797a:	66 90                	xchg   ax,ax
c001797c:	83 ec 0c             	sub    esp,0xc
c001797f:	68 1f 54 02 c0       	push   0xc002541f
c0017984:	e8 3c 56 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0017989:	83 c4 10             	add    esp,0x10
c001798c:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0017991:	48                   	dec    eax
c0017992:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0017997:	75 03                	jne    c001799c <unblockTask(ThreadControlBlock*)+0x74>
c0017999:	fb                   	sti    
c001799a:	66 90                	xchg   ax,ax
c001799c:	83 c4 08             	add    esp,0x8
c001799f:	5b                   	pop    ebx
c00179a0:	c3                   	ret    
c00179a1:	8d 76 00             	lea    esi,[esi+0x0]
c00179a4:	83 ec 0c             	sub    esp,0xc
c00179a7:	68 08 54 02 c0       	push   0xc0025408
c00179ac:	e8 14 56 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00179b1:	83 c4 10             	add    esp,0x10
c00179b4:	eb d6                	jmp    c001798c <unblockTask(ThreadControlBlock*)+0x64>
c00179b6:	66 90                	xchg   ax,ax
c00179b8:	83 ec 08             	sub    esp,0x8
c00179bb:	53                   	push   ebx
c00179bc:	68 e4 a8 02 c0       	push   0xc002a8e4
c00179c1:	e8 b6 aa 00 00       	call   c002247c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00179c6:	83 c4 10             	add    esp,0x10
c00179c9:	eb c1                	jmp    c001798c <unblockTask(ThreadControlBlock*)+0x64>
c00179cb:	90                   	nop

c00179cc <cleanupTerminatedTask(ThreadControlBlock*)>:
c00179cc:	55                   	push   ebp
c00179cd:	57                   	push   edi
c00179ce:	56                   	push   esi
c00179cf:	53                   	push   ebx
c00179d0:	83 ec 1c             	sub    esp,0x1c
c00179d3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00179d7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00179da:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00179e0:	85 ff                	test   edi,edi
c00179e2:	7e 24                	jle    c0017a08 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00179e4:	31 f6                	xor    esi,esi
c00179e6:	66 90                	xchg   ax,ax
c00179e8:	83 ec 0c             	sub    esp,0xc
c00179eb:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c00179f2:	46                   	inc    esi
c00179f3:	e8 cf 22 ff ff       	call   c0009cc7 <free>
c00179f8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00179fb:	83 c4 10             	add    esp,0x10
c00179fe:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0017a04:	7f e2                	jg     c00179e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0017a06:	66 90                	xchg   ax,ax
c0017a08:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017a12:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0017a17:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0017a1a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0017a1d:	d3 c0                	rol    eax,cl
c0017a1f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0017a26:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0017a29:	89 f7                	mov    edi,esi
c0017a2b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0017a33:	0f 85 73 01 00 00    	jne    c0017bac <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0017a39:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0017a3f:	85 ed                	test   ebp,ebp
c0017a41:	74 1d                	je     c0017a60 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0017a43:	83 ec 0c             	sub    esp,0xc
c0017a46:	55                   	push   ebp
c0017a47:	e8 60 c1 ff ff       	call   c0013bac <EnvVarContainer::~EnvVarContainer()>
c0017a4c:	59                   	pop    ecx
c0017a4d:	5e                   	pop    esi
c0017a4e:	6a 0c                	push   0xc
c0017a50:	55                   	push   ebp
c0017a51:	e8 8e 54 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0017a56:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0017a59:	83 c4 10             	add    esp,0x10
c0017a5c:	89 f7                	mov    edi,esi
c0017a5e:	66 90                	xchg   ax,ax
c0017a60:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0017a66:	85 c0                	test   eax,eax
c0017a68:	0f 84 b2 00 00 00    	je     c0017b20 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0017a6e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0017a71:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017a75:	31 c9                	xor    ecx,ecx
c0017a77:	eb 17                	jmp    c0017a90 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0017a79:	8d 76 00             	lea    esi,[esi+0x0]
c0017a7c:	41                   	inc    ecx
c0017a7d:	83 f9 10             	cmp    ecx,0x10
c0017a80:	0f 84 9a 00 00 00    	je     c0017b20 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0017a86:	66 90                	xchg   ax,ax
c0017a88:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0017a8e:	66 90                	xchg   ax,ax
c0017a90:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0017a97:	d3 fa                	sar    edx,cl
c0017a99:	83 e2 01             	and    edx,0x1
c0017a9c:	74 de                	je     c0017a7c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0017a9e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0017aa1:	01 d2                	add    edx,edx
c0017aa3:	01 ca                	add    edx,ecx
c0017aa5:	8d 14 92             	lea    edx,[edx+edx*4]
c0017aa8:	01 d0                	add    eax,edx
c0017aaa:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017ab0:	83 fd 07             	cmp    ebp,0x7
c0017ab3:	75 c7                	jne    c0017a7c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0017ab5:	05 40 02 00 00       	add    eax,0x240
c0017aba:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0017abd:	83 fd ff             	cmp    ebp,0xffffffff
c0017ac0:	0f 8c ee 00 00 00    	jl     c0017bb4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0017ac6:	0f 84 ac 01 00 00    	je     c0017c78 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0017acc:	85 ed                	test   ebp,ebp
c0017ace:	0f 84 90 01 00 00    	je     c0017c64 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0017ad4:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0017ad6:	75 a4                	jne    c0017a7c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0017ad8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0017ade:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017ae2:	01 d0                	add    eax,edx
c0017ae4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017ae8:	83 ec 0c             	sub    esp,0xc
c0017aeb:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0017af1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017af4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017afa:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017b01:	50                   	push   eax
c0017b02:	e8 21 fe ff ff       	call   c0017928 <unblockTask(ThreadControlBlock*)>
c0017b07:	83 c4 10             	add    esp,0x10
c0017b0a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0017b0d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017b11:	89 f7                	mov    edi,esi
c0017b13:	41                   	inc    ecx
c0017b14:	83 f9 10             	cmp    ecx,0x10
c0017b17:	0f 85 6b ff ff ff    	jne    c0017a88 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0017b20:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0017b26:	85 c0                	test   eax,eax
c0017b28:	74 62                	je     c0017b8c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0017b2a:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0017b30:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0017b36:	74 54                	je     c0017b8c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0017b38:	83 ec 0c             	sub    esp,0xc
c0017b3b:	68 e4 a8 02 c0       	push   0xc002a8e4
c0017b40:	e8 77 a8 00 00       	call   c00223bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017b45:	c7 04 24 e4 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8e4
c0017b4c:	89 c7                	mov    edi,eax
c0017b4e:	e8 4d a8 00 00       	call   c00223a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017b53:	83 c4 10             	add    esp,0x10
c0017b56:	84 c0                	test   al,al
c0017b58:	0f 84 ce 00 00 00    	je     c0017c2c <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0017b5e:	66 90                	xchg   ax,ax
c0017b60:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017b63:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017b69:	85 d2                	test   edx,edx
c0017b6b:	74 0f                	je     c0017b7c <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0017b6d:	83 ec 0c             	sub    esp,0xc
c0017b70:	8b 02                	mov    eax,DWORD PTR [edx]
c0017b72:	52                   	push   edx
c0017b73:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017b76:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017b79:	83 c4 10             	add    esp,0x10
c0017b7c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0017b86:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0017b89:	8d 76 00             	lea    esi,[esi+0x0]
c0017b8c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0017b92:	85 db                	test   ebx,ebx
c0017b94:	74 16                	je     c0017bac <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0017b96:	83 ec 0c             	sub    esp,0xc
c0017b99:	53                   	push   ebx
c0017b9a:	e8 b9 45 ff ff       	call   c000c158 <VAS::~VAS()>
c0017b9f:	58                   	pop    eax
c0017ba0:	5a                   	pop    edx
c0017ba1:	6a 14                	push   0x14
c0017ba3:	53                   	push   ebx
c0017ba4:	e8 3b 53 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0017ba9:	83 c4 10             	add    esp,0x10
c0017bac:	83 c4 1c             	add    esp,0x1c
c0017baf:	5b                   	pop    ebx
c0017bb0:	5e                   	pop    esi
c0017bb1:	5f                   	pop    edi
c0017bb2:	5d                   	pop    ebp
c0017bb3:	c3                   	ret    
c0017bb4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017bb8:	83 ec 0c             	sub    esp,0xc
c0017bbb:	68 d0 54 02 c0       	push   0xc00254d0
c0017bc0:	e8 42 c2 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0017bc5:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0017bc8:	83 c4 10             	add    esp,0x10
c0017bcb:	89 f7                	mov    edi,esi
c0017bcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017bd1:	e9 a6 fe ff ff       	jmp    c0017a7c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0017bd6:	66 90                	xchg   ax,ax
c0017bd8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bde:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0017be4:	75 1e                	jne    c0017c04 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0017be6:	83 ec 0c             	sub    esp,0xc
c0017be9:	68 38 55 02 c0       	push   0xc0025538
c0017bee:	e8 d2 53 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0017bf3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017bfa:	e8 65 fa ff ff       	call   c0017664 <blockTask(TaskState)>
c0017bff:	83 c4 10             	add    esp,0x10
c0017c02:	66 90                	xchg   ax,ax
c0017c04:	83 ec 08             	sub    esp,0x8
c0017c07:	56                   	push   esi
c0017c08:	68 e4 a8 02 c0       	push   0xc002a8e4
c0017c0d:	e8 6a a8 00 00       	call   c002247c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017c12:	c7 04 24 e4 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8e4
c0017c19:	e8 9e a7 00 00       	call   c00223bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017c1e:	83 c4 10             	add    esp,0x10
c0017c21:	39 f8                	cmp    eax,edi
c0017c23:	0f 84 37 ff ff ff    	je     c0017b60 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0017c29:	8d 76 00             	lea    esi,[esi+0x0]
c0017c2c:	83 ec 0c             	sub    esp,0xc
c0017c2f:	68 e4 a8 02 c0       	push   0xc002a8e4
c0017c34:	e8 83 a7 00 00       	call   c00223bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017c39:	c7 04 24 e4 a8 02 c0 	mov    DWORD PTR [esp],0xc002a8e4
c0017c40:	89 c6                	mov    esi,eax
c0017c42:	e8 7d a7 00 00       	call   c00223c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017c47:	83 c4 10             	add    esp,0x10
c0017c4a:	39 f3                	cmp    ebx,esi
c0017c4c:	74 b6                	je     c0017c04 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0017c4e:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0017c51:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017c54:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0017c5a:	75 a8                	jne    c0017c04 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0017c5c:	e9 77 ff ff ff       	jmp    c0017bd8 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0017c61:	8d 76 00             	lea    esi,[esi+0x0]
c0017c64:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017c68:	83 ec 0c             	sub    esp,0xc
c0017c6b:	68 04 55 02 c0       	push   0xc0025504
c0017c70:	e9 4b ff ff ff       	jmp    c0017bc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0017c75:	8d 76 00             	lea    esi,[esi+0x0]
c0017c78:	8b 36                	mov    esi,DWORD PTR [esi]
c0017c7a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017c7e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0017c81:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017c84:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0017c8a:	01 d7                	add    edi,edx
c0017c8c:	89 f8                	mov    eax,edi
c0017c8e:	e9 51 fe ff ff       	jmp    c0017ae4 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0017c93:	90                   	nop

c0017c94 <cleanerTaskFunction(void*)>:
c0017c94:	53                   	push   ebx
c0017c95:	83 ec 08             	sub    esp,0x8
c0017c98:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0017c9d:	48                   	dec    eax
c0017c9e:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0017ca3:	75 03                	jne    c0017ca8 <cleanerTaskFunction(void*)+0x14>
c0017ca5:	fb                   	sti    
c0017ca6:	66 90                	xchg   ax,ax
c0017ca8:	fa                   	cli    
c0017ca9:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0017cae:	80 3d ac a8 02 c0 00 	cmp    BYTE PTR ds:0xc002a8ac,0x0
c0017cb5:	8d 50 01             	lea    edx,[eax+0x1]
c0017cb8:	89 15 c8 a8 02 c0    	mov    DWORD PTR ds:0xc002a8c8,edx
c0017cbe:	0f 84 ac 00 00 00    	je     c0017d70 <cleanerTaskFunction(void*)+0xdc>
c0017cc4:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0017cc9:	85 c0                	test   eax,eax
c0017ccb:	75 03                	jne    c0017cd0 <cleanerTaskFunction(void*)+0x3c>
c0017ccd:	fb                   	sti    
c0017cce:	66 90                	xchg   ax,ax
c0017cd0:	c6 05 ac a8 02 c0 00 	mov    BYTE PTR ds:0xc002a8ac,0x0
c0017cd7:	fa                   	cli    
c0017cd8:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c0017cde:	ff 05 c4 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c4
c0017ce4:	fa                   	cli    
c0017ce5:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c0017ceb:	eb 2b                	jmp    c0017d18 <cleanerTaskFunction(void*)+0x84>
c0017ced:	8d 76 00             	lea    esi,[esi+0x0]
c0017cf0:	83 ec 0c             	sub    esp,0xc
c0017cf3:	68 cc a8 02 c0       	push   0xc002a8cc
c0017cf8:	e8 bf a6 00 00       	call   c00223bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017cfd:	c7 04 24 cc a8 02 c0 	mov    DWORD PTR [esp],0xc002a8cc
c0017d04:	89 c3                	mov    ebx,eax
c0017d06:	e8 b9 a6 00 00       	call   c00223c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017d0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d0e:	e8 b9 fc ff ff       	call   c00179cc <cleanupTerminatedTask(ThreadControlBlock*)>
c0017d13:	83 c4 10             	add    esp,0x10
c0017d16:	66 90                	xchg   ax,ax
c0017d18:	83 ec 0c             	sub    esp,0xc
c0017d1b:	68 cc a8 02 c0       	push   0xc002a8cc
c0017d20:	e8 7b a6 00 00       	call   c00223a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017d25:	83 c4 10             	add    esp,0x10
c0017d28:	84 c0                	test   al,al
c0017d2a:	74 c4                	je     c0017cf0 <cleanerTaskFunction(void*)+0x5c>
c0017d2c:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0017d31:	48                   	dec    eax
c0017d32:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0017d37:	75 03                	jne    c0017d3c <cleanerTaskFunction(void*)+0xa8>
c0017d39:	fb                   	sti    
c0017d3a:	66 90                	xchg   ax,ax
c0017d3c:	a1 c4 a8 02 c0       	mov    eax,ds:0xc002a8c4
c0017d41:	48                   	dec    eax
c0017d42:	a3 c4 a8 02 c0       	mov    ds:0xc002a8c4,eax
c0017d47:	0f 85 4b ff ff ff    	jne    c0017c98 <cleanerTaskFunction(void*)+0x4>
c0017d4d:	a1 c0 a8 02 c0       	mov    eax,ds:0xc002a8c0
c0017d52:	85 c0                	test   eax,eax
c0017d54:	0f 84 3e ff ff ff    	je     c0017c98 <cleanerTaskFunction(void*)+0x4>
c0017d5a:	c7 05 c0 a8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a8c0,0x0
c0017d64:	e8 03 f7 ff ff       	call   c001746c <schedule()>
c0017d69:	e9 2a ff ff ff       	jmp    c0017c98 <cleanerTaskFunction(void*)+0x4>
c0017d6e:	66 90                	xchg   ax,ax
c0017d70:	83 ec 0c             	sub    esp,0xc
c0017d73:	6a 02                	push   0x2
c0017d75:	e8 c2 f8 ff ff       	call   c001763c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017d7a:	83 c4 10             	add    esp,0x10
c0017d7d:	e9 4e ff ff ff       	jmp    c0017cd0 <cleanerTaskFunction(void*)+0x3c>
c0017d82:	66 90                	xchg   ax,ax

c0017d84 <terminateTask(int)>:
c0017d84:	83 ec 14             	sub    esp,0x14
c0017d87:	fa                   	cli    
c0017d88:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c0017d8e:	ff 05 c4 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c4
c0017d94:	fa                   	cli    
c0017d95:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c0017d9b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017da4:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0017da7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017dac:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0017daf:	50                   	push   eax
c0017db0:	68 cc a8 02 c0       	push   0xc002a8cc
c0017db5:	e8 c2 a6 00 00       	call   c002247c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017dba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017dbf:	83 c4 10             	add    esp,0x10
c0017dc2:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0017dc9:	a1 a8 a8 02 c0       	mov    eax,ds:0xc002a8a8
c0017dce:	85 c0                	test   eax,eax
c0017dd0:	74 5e                	je     c0017e30 <terminateTask(int)+0xac>
c0017dd2:	83 ec 0c             	sub    esp,0xc
c0017dd5:	c6 05 ac a8 02 c0 01 	mov    BYTE PTR ds:0xc002a8ac,0x1
c0017ddc:	50                   	push   eax
c0017ddd:	e8 46 fb ff ff       	call   c0017928 <unblockTask(ThreadControlBlock*)>
c0017de2:	83 c4 10             	add    esp,0x10
c0017de5:	8d 76 00             	lea    esi,[esi+0x0]
c0017de8:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0017ded:	48                   	dec    eax
c0017dee:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0017df3:	75 03                	jne    c0017df8 <terminateTask(int)+0x74>
c0017df5:	fb                   	sti    
c0017df6:	66 90                	xchg   ax,ax
c0017df8:	a1 c4 a8 02 c0       	mov    eax,ds:0xc002a8c4
c0017dfd:	48                   	dec    eax
c0017dfe:	a3 c4 a8 02 c0       	mov    ds:0xc002a8c4,eax
c0017e03:	75 0b                	jne    c0017e10 <terminateTask(int)+0x8c>
c0017e05:	83 3d c0 a8 02 c0 00 	cmp    DWORD PTR ds:0xc002a8c0,0x0
c0017e0c:	75 36                	jne    c0017e44 <terminateTask(int)+0xc0>
c0017e0e:	66 90                	xchg   ax,ax
c0017e10:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0017e15:	48                   	dec    eax
c0017e16:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0017e1b:	75 03                	jne    c0017e20 <terminateTask(int)+0x9c>
c0017e1d:	fb                   	sti    
c0017e1e:	66 90                	xchg   ax,ax
c0017e20:	fa                   	cli    
c0017e21:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c0017e27:	90                   	nop
c0017e28:	e8 3f f6 ff ff       	call   c001746c <schedule()>
c0017e2d:	eb e1                	jmp    c0017e10 <terminateTask(int)+0x8c>
c0017e2f:	90                   	nop
c0017e30:	83 ec 0c             	sub    esp,0xc
c0017e33:	68 36 54 02 c0       	push   0xc0025436
c0017e38:	e8 88 51 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0017e3d:	83 c4 10             	add    esp,0x10
c0017e40:	eb a6                	jmp    c0017de8 <terminateTask(int)+0x64>
c0017e42:	66 90                	xchg   ax,ax
c0017e44:	c7 05 c0 a8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a8c0,0x0
c0017e4e:	eb d8                	jmp    c0017e28 <terminateTask(int)+0xa4>

c0017e50 <Thr::terminateFromIRQ(int)>:
c0017e50:	83 ec 18             	sub    esp,0x18
c0017e53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e57:	e8 28 ff ff ff       	call   c0017d84 <terminateTask(int)>

c0017e5c <Semaphore::release()>:
c0017e5c:	83 ec 0c             	sub    esp,0xc
c0017e5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017e63:	fa                   	cli    
c0017e64:	a1 c4 a8 02 c0       	mov    eax,ds:0xc002a8c4
c0017e69:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c0017e6f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017e72:	89 0d c4 a8 02 c0    	mov    DWORD PTR ds:0xc002a8c4,ecx
c0017e78:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0017e7b:	85 c9                	test   ecx,ecx
c0017e7d:	74 41                	je     c0017ec0 <Semaphore::release()+0x64>
c0017e7f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0017e82:	83 ec 0c             	sub    esp,0xc
c0017e85:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017e88:	51                   	push   ecx
c0017e89:	e8 9a fa ff ff       	call   c0017928 <unblockTask(ThreadControlBlock*)>
c0017e8e:	a1 c4 a8 02 c0       	mov    eax,ds:0xc002a8c4
c0017e93:	83 c4 10             	add    esp,0x10
c0017e96:	48                   	dec    eax
c0017e97:	90                   	nop
c0017e98:	a3 c4 a8 02 c0       	mov    ds:0xc002a8c4,eax
c0017e9d:	85 c0                	test   eax,eax
c0017e9f:	75 0b                	jne    c0017eac <Semaphore::release()+0x50>
c0017ea1:	a1 c0 a8 02 c0       	mov    eax,ds:0xc002a8c0
c0017ea6:	85 c0                	test   eax,eax
c0017ea8:	75 1e                	jne    c0017ec8 <Semaphore::release()+0x6c>
c0017eaa:	66 90                	xchg   ax,ax
c0017eac:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0017eb1:	48                   	dec    eax
c0017eb2:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0017eb7:	75 03                	jne    c0017ebc <Semaphore::release()+0x60>
c0017eb9:	fb                   	sti    
c0017eba:	66 90                	xchg   ax,ax
c0017ebc:	83 c4 0c             	add    esp,0xc
c0017ebf:	c3                   	ret    
c0017ec0:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0017ec3:	eb d3                	jmp    c0017e98 <Semaphore::release()+0x3c>
c0017ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ec8:	c7 05 c0 a8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a8c0,0x0
c0017ed2:	e8 95 f5 ff ff       	call   c001746c <schedule()>
c0017ed7:	eb d3                	jmp    c0017eac <Semaphore::release()+0x50>
c0017ed9:	8d 76 00             	lea    esi,[esi+0x0]

c0017edc <__static_initialization_and_destruction_0(int, int)>:
c0017edc:	83 ec 0c             	sub    esp,0xc
c0017edf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017ee4:	0f 85 8e 00 00 00    	jne    c0017f78 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017eea:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017ef2:	0f 85 80 00 00 00    	jne    c0017f78 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0017ef8:	83 ec 0c             	sub    esp,0xc
c0017efb:	68 e4 a8 02 c0       	push   0xc002a8e4
c0017f00:	e8 23 a8 00 00       	call   c0022728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017f05:	83 c4 10             	add    esp,0x10
c0017f08:	83 ec 04             	sub    esp,0x4
c0017f0b:	68 0c 66 02 c0       	push   0xc002660c
c0017f10:	68 e4 a8 02 c0       	push   0xc002a8e4
c0017f15:	68 d8 26 02 c0       	push   0xc00226d8
c0017f1a:	e8 3f 4f ff ff       	call   c000ce5e <__cxa_atexit>
c0017f1f:	83 c4 10             	add    esp,0x10
c0017f22:	83 ec 0c             	sub    esp,0xc
c0017f25:	68 d8 a8 02 c0       	push   0xc002a8d8
c0017f2a:	e8 f9 a7 00 00       	call   c0022728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017f2f:	83 c4 10             	add    esp,0x10
c0017f32:	83 ec 04             	sub    esp,0x4
c0017f35:	68 0c 66 02 c0       	push   0xc002660c
c0017f3a:	68 d8 a8 02 c0       	push   0xc002a8d8
c0017f3f:	68 d8 26 02 c0       	push   0xc00226d8
c0017f44:	e8 15 4f ff ff       	call   c000ce5e <__cxa_atexit>
c0017f49:	83 c4 10             	add    esp,0x10
c0017f4c:	83 ec 0c             	sub    esp,0xc
c0017f4f:	68 cc a8 02 c0       	push   0xc002a8cc
c0017f54:	e8 cf a7 00 00       	call   c0022728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0017f59:	83 c4 10             	add    esp,0x10
c0017f5c:	83 ec 04             	sub    esp,0x4
c0017f5f:	68 0c 66 02 c0       	push   0xc002660c
c0017f64:	68 cc a8 02 c0       	push   0xc002a8cc
c0017f69:	68 d8 26 02 c0       	push   0xc00226d8
c0017f6e:	e8 eb 4e ff ff       	call   c000ce5e <__cxa_atexit>
c0017f73:	83 c4 10             	add    esp,0x10
c0017f76:	66 90                	xchg   ax,ax
c0017f78:	90                   	nop
c0017f79:	83 c4 0c             	add    esp,0xc
c0017f7c:	c3                   	ret    
c0017f7d:	8d 76 00             	lea    esi,[esi+0x0]

c0017f80 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0017f80:	83 ec 0c             	sub    esp,0xc
c0017f83:	83 ec 08             	sub    esp,0x8
c0017f86:	68 ff ff 00 00       	push   0xffff
c0017f8b:	6a 01                	push   0x1
c0017f8d:	e8 4a ff ff ff       	call   c0017edc <__static_initialization_and_destruction_0(int, int)>
c0017f92:	83 c4 10             	add    esp,0x10
c0017f95:	83 c4 0c             	add    esp,0xc
c0017f98:	c3                   	ret    

c0017f99 <Vm::inbv(unsigned short)>:
c0017f99:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017f9d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017fa2:	75 06                	jne    c0017faa <Vm::inbv(unsigned short)+0x11>
c0017fa4:	a0 2c a9 02 c0       	mov    al,ds:0xc002a92c
c0017fa9:	c3                   	ret    
c0017faa:	ec                   	in     al,dx
c0017fab:	c3                   	ret    

c0017fac <Vm::outbv(unsigned short, unsigned char)>:
c0017fac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017fb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fb4:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017fb9:	75 25                	jne    c0017fe0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0017fbb:	8b 0d 2c a9 02 c0    	mov    ecx,DWORD PTR ds:0xc002a92c
c0017fc1:	8d 51 01             	lea    edx,[ecx+0x1]
c0017fc4:	88 81 40 a9 02 c0    	mov    BYTE PTR [ecx-0x3ffd56c0],al
c0017fca:	89 15 2c a9 02 c0    	mov    DWORD PTR ds:0xc002a92c,edx
c0017fd0:	83 fa 20             	cmp    edx,0x20
c0017fd3:	75 0c                	jne    c0017fe1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0017fd5:	c7 05 2c a9 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002a92c,0x1f
c0017fdf:	c3                   	ret    
c0017fe0:	ee                   	out    dx,al
c0017fe1:	c3                   	ret    

c0017fe2 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017fe2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017fe7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017fec:	c1 e0 04             	shl    eax,0x4
c0017fef:	01 d0                	add    eax,edx
c0017ff1:	c3                   	ret    

c0017ff2 <Vm::getSegment(unsigned int)>:
c0017ff2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ff6:	c1 e8 10             	shr    eax,0x10
c0017ff9:	c3                   	ret    

c0017ffa <Vm::getOffset(unsigned int)>:
c0017ffa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ffe:	c3                   	ret    

c0017fff <Vm::mainloop2()>:
c0017fff:	83 ec 18             	sub    esp,0x18
c0018002:	fa                   	cli    
c0018003:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c0018009:	6a 02                	push   0x2
c001800b:	c6 05 25 a9 02 c0 01 	mov    BYTE PTR ds:0xc002a925,0x1
c0018012:	e8 25 f6 ff ff       	call   c001763c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018017:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001801c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018020:	52                   	push   edx
c0018021:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018025:	52                   	push   edx
c0018026:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001802a:	52                   	push   edx
c001802b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001802f:	50                   	push   eax
c0018030:	e8 fa 81 fe ff       	call   c000022f <goToVM86>
c0018035:	83 c4 2c             	add    esp,0x2c
c0018038:	c3                   	ret    

c0018039 <Vm::mainVm8086Loop(void*)>:
c0018039:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c001803e:	48                   	dec    eax
c001803f:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0018044:	75 01                	jne    c0018047 <Vm::mainVm8086Loop(void*)+0xe>
c0018046:	fb                   	sti    
c0018047:	eb b6                	jmp    c0017fff <Vm::mainloop2()>

c0018049 <Vm::mainloop3(unsigned long)>:
c0018049:	83 ec 18             	sub    esp,0x18
c001804c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018050:	fa                   	cli    
c0018051:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c0018057:	6a 02                	push   0x2
c0018059:	c6 05 24 a9 02 c0 01 	mov    BYTE PTR ds:0xc002a924,0x1
c0018060:	a3 20 a9 02 c0       	mov    ds:0xc002a920,eax
c0018065:	e8 d2 f5 ff ff       	call   c001763c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001806a:	83 c4 1c             	add    esp,0x1c
c001806d:	eb 90                	jmp    c0017fff <Vm::mainloop2()>

c001806f <Vm::initialise8086()>:
c001806f:	83 ec 0c             	sub    esp,0xc
c0018072:	68 80 00 00 00       	push   0x80
c0018077:	6a 00                	push   0x0
c0018079:	68 39 80 01 c0       	push   0xc0018039
c001807e:	ff 35 f0 a8 02 c0    	push   DWORD PTR ds:0xc002a8f0
c0018084:	e8 c7 f1 ff ff       	call   c0017250 <Process::createThread(void (*)(void*), void*, int)>
c0018089:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018090:	a3 28 a9 02 c0       	mov    ds:0xc002a928,eax
c0018095:	68 00 01 00 00       	push   0x100
c001809a:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c001809f:	6a 00                	push   0x0
c00180a1:	6a 00                	push   0x0
c00180a3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00180a9:	e8 1e 45 ff ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00180ae:	83 c4 2c             	add    esp,0x2c
c00180b1:	c3                   	ret    

c00180b2 <Vm::finish8086()>:
c00180b2:	53                   	push   ebx
c00180b3:	83 ec 08             	sub    esp,0x8
c00180b6:	fa                   	cli    
c00180b7:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c00180bd:	80 3d 24 a9 02 c0 00 	cmp    BYTE PTR ds:0xc002a924,0x0
c00180c4:	75 15                	jne    c00180db <Vm::finish8086()+0x29>
c00180c6:	e8 a1 f3 ff ff       	call   c001746c <schedule()>
c00180cb:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c00180d0:	48                   	dec    eax
c00180d1:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c00180d6:	75 de                	jne    c00180b6 <Vm::finish8086()+0x4>
c00180d8:	fb                   	sti    
c00180d9:	eb db                	jmp    c00180b6 <Vm::finish8086()+0x4>
c00180db:	83 ec 0c             	sub    esp,0xc
c00180de:	8b 1d 20 a9 02 c0    	mov    ebx,DWORD PTR ds:0xc002a920
c00180e4:	ff 35 28 a9 02 c0    	push   DWORD PTR ds:0xc002a928
c00180ea:	c6 05 24 a9 02 c0 00 	mov    BYTE PTR ds:0xc002a924,0x0
c00180f1:	e8 32 f8 ff ff       	call   c0017928 <unblockTask(ThreadControlBlock*)>
c00180f6:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c00180fb:	83 c4 10             	add    esp,0x10
c00180fe:	8d 50 ff             	lea    edx,[eax-0x1]
c0018101:	89 15 c8 a8 02 c0    	mov    DWORD PTR ds:0xc002a8c8,edx
c0018107:	85 d2                	test   edx,edx
c0018109:	75 01                	jne    c001810c <Vm::finish8086()+0x5a>
c001810b:	fb                   	sti    
c001810c:	89 d8                	mov    eax,ebx
c001810e:	83 c4 08             	add    esp,0x8
c0018111:	5b                   	pop    ebx
c0018112:	c3                   	ret    

c0018113 <Vm::getOutput8086(unsigned char*)>:
c0018113:	57                   	push   edi
c0018114:	8b 0d 2c a9 02 c0    	mov    ecx,DWORD PTR ds:0xc002a92c
c001811a:	56                   	push   esi
c001811b:	be 40 a9 02 c0       	mov    esi,0xc002a940
c0018120:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018124:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018126:	a1 2c a9 02 c0       	mov    eax,ds:0xc002a92c
c001812b:	5e                   	pop    esi
c001812c:	c7 05 2c a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a92c,0x0
c0018136:	5f                   	pop    edi
c0018137:	c3                   	ret    

c0018138 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018138:	55                   	push   ebp
c0018139:	57                   	push   edi
c001813a:	56                   	push   esi
c001813b:	53                   	push   ebx
c001813c:	83 ec 0c             	sub    esp,0xc
c001813f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0018143:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018147:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001814b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001814f:	fa                   	cli    
c0018150:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c0018156:	80 3d 25 a9 02 c0 00 	cmp    BYTE PTR ds:0xc002a925,0x0
c001815d:	75 15                	jne    c0018174 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001815f:	e8 08 f3 ff ff       	call   c001746c <schedule()>
c0018164:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0018169:	48                   	dec    eax
c001816a:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c001816f:	75 de                	jne    c001814f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018171:	fb                   	sti    
c0018172:	eb db                	jmp    c001814f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018174:	a1 28 a9 02 c0       	mov    eax,ds:0xc002a928
c0018179:	c7 05 2c a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a92c,0x0
c0018183:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0018187:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001818b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001818f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018193:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0018197:	0f b7 ff             	movzx  edi,di
c001819a:	0f b7 f6             	movzx  esi,si
c001819d:	50                   	push   eax
c001819e:	6a 20                	push   0x20
c00181a0:	6a 00                	push   0x0
c00181a2:	68 40 a9 02 c0       	push   0xc002a940
c00181a7:	e8 d0 84 fe ff       	call   c000067c <memset>
c00181ac:	5a                   	pop    edx
c00181ad:	59                   	pop    ecx
c00181ae:	57                   	push   edi
c00181af:	56                   	push   esi
c00181b0:	e8 2d fe ff ff       	call   c0017fe2 <Vm::realToLinear(unsigned short, unsigned short)>
c00181b5:	83 c4 10             	add    esp,0x10
c00181b8:	89 c7                	mov    edi,eax
c00181ba:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00181be:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00181c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00181c4:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c00181c9:	c6 05 25 a9 02 c0 00 	mov    BYTE PTR ds:0xc002a925,0x0
c00181d0:	48                   	dec    eax
c00181d1:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c00181d6:	75 01                	jne    c00181d9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00181d8:	fb                   	sti    
c00181d9:	83 ec 0c             	sub    esp,0xc
c00181dc:	ff 35 28 a9 02 c0    	push   DWORD PTR ds:0xc002a928
c00181e2:	e8 41 f7 ff ff       	call   c0017928 <unblockTask(ThreadControlBlock*)>
c00181e7:	83 c4 1c             	add    esp,0x1c
c00181ea:	b0 01                	mov    al,0x1
c00181ec:	5b                   	pop    ebx
c00181ed:	5e                   	pop    esi
c00181ee:	5f                   	pop    edi
c00181ef:	5d                   	pop    ebp
c00181f0:	c3                   	ret    

c00181f1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00181f1:	55                   	push   ebp
c00181f2:	57                   	push   edi
c00181f3:	56                   	push   esi
c00181f4:	53                   	push   ebx
c00181f5:	83 ec 2c             	sub    esp,0x2c
c00181f8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00181fc:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018200:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018204:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0018208:	fa                   	cli    
c0018209:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c001820f:	0f b6 35 25 a9 02 c0 	movzx  esi,BYTE PTR ds:0xc002a925
c0018216:	89 f0                	mov    eax,esi
c0018218:	84 c0                	test   al,al
c001821a:	75 1d                	jne    c0018239 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001821c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018220:	e8 47 f2 ff ff       	call   c001746c <schedule()>
c0018225:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c001822a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001822e:	48                   	dec    eax
c001822f:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0018234:	75 d2                	jne    c0018208 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018236:	fb                   	sti    
c0018237:	eb cf                	jmp    c0018208 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018239:	a1 28 a9 02 c0       	mov    eax,ds:0xc002a928
c001823e:	c7 05 2c a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a92c,0x0
c0018248:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001824c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018250:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0018254:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0018258:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001825c:	50                   	push   eax
c001825d:	6a 20                	push   0x20
c001825f:	6a 00                	push   0x0
c0018261:	68 40 a9 02 c0       	push   0xc002a940
c0018266:	e8 11 84 fe ff       	call   c000067c <memset>
c001826b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018272:	e8 40 1a ff ff       	call   c0009cb7 <malloc>
c0018277:	83 c4 0c             	add    esp,0xc
c001827a:	89 c3                	mov    ebx,eax
c001827c:	ff 35 f0 a8 02 c0    	push   DWORD PTR ds:0xc002a8f0
c0018282:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018286:	50                   	push   eax
c0018287:	e8 a4 52 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001828c:	83 c4 10             	add    esp,0x10
c001828f:	85 db                	test   ebx,ebx
c0018291:	75 0a                	jne    c001829d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0018293:	83 ec 0c             	sub    esp,0xc
c0018296:	68 60 55 02 c0       	push   0xc0025560
c001829b:	eb 3e                	jmp    c00182db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001829d:	50                   	push   eax
c001829e:	8d 44 24 17          	lea    eax,[esp+0x17]
c00182a2:	50                   	push   eax
c00182a3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00182a7:	50                   	push   eax
c00182a8:	53                   	push   ebx
c00182a9:	e8 08 56 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c00182ae:	83 c4 10             	add    esp,0x10
c00182b1:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00182b6:	74 0a                	je     c00182c2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00182b8:	83 ec 0c             	sub    esp,0xc
c00182bb:	68 74 55 02 c0       	push   0xc0025574
c00182c0:	eb 19                	jmp    c00182db <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00182c2:	51                   	push   ecx
c00182c3:	51                   	push   ecx
c00182c4:	6a 01                	push   0x1
c00182c6:	53                   	push   ebx
c00182c7:	e8 3e 53 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c00182cc:	83 c4 10             	add    esp,0x10
c00182cf:	85 c0                	test   eax,eax
c00182d1:	74 24                	je     c00182f7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00182d3:	83 ec 0c             	sub    esp,0xc
c00182d6:	68 8d 55 02 c0       	push   0xc002558d
c00182db:	e8 27 bb ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c00182e0:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c00182e5:	83 c4 10             	add    esp,0x10
c00182e8:	48                   	dec    eax
c00182e9:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c00182ee:	85 c0                	test   eax,eax
c00182f0:	75 01                	jne    c00182f3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c00182f2:	fb                   	sti    
c00182f3:	31 f6                	xor    esi,esi
c00182f5:	eb 58                	jmp    c001834f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c00182f7:	0f b7 ed             	movzx  ebp,bp
c00182fa:	50                   	push   eax
c00182fb:	0f b7 ff             	movzx  edi,di
c00182fe:	50                   	push   eax
c00182ff:	55                   	push   ebp
c0018300:	57                   	push   edi
c0018301:	e8 dc fc ff ff       	call   c0017fe2 <Vm::realToLinear(unsigned short, unsigned short)>
c0018306:	5a                   	pop    edx
c0018307:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018309:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001830d:	51                   	push   ecx
c001830e:	50                   	push   eax
c001830f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018313:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018317:	53                   	push   ebx
c0018318:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001831b:	83 c4 14             	add    esp,0x14
c001831e:	53                   	push   ebx
c001831f:	e8 44 53 ff ff       	call   c000d668 <File::close()>
c0018324:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0018329:	83 c4 10             	add    esp,0x10
c001832c:	48                   	dec    eax
c001832d:	c6 05 25 a9 02 c0 00 	mov    BYTE PTR ds:0xc002a925,0x0
c0018334:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c0018339:	85 c0                	test   eax,eax
c001833b:	75 01                	jne    c001833e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001833d:	fb                   	sti    
c001833e:	83 ec 0c             	sub    esp,0xc
c0018341:	ff 35 28 a9 02 c0    	push   DWORD PTR ds:0xc002a928
c0018347:	e8 dc f5 ff ff       	call   c0017928 <unblockTask(ThreadControlBlock*)>
c001834c:	83 c4 10             	add    esp,0x10
c001834f:	83 c4 2c             	add    esp,0x2c
c0018352:	89 f0                	mov    eax,esi
c0018354:	5b                   	pop    ebx
c0018355:	5e                   	pop    esi
c0018356:	5f                   	pop    edi
c0018357:	5d                   	pop    ebp
c0018358:	c3                   	ret    

c0018359 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018359:	57                   	push   edi
c001835a:	56                   	push   esi
c001835b:	53                   	push   ebx
c001835c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018360:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018364:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018368:	83 e8 06             	sub    eax,0x6
c001836b:	0f b7 c0             	movzx  eax,ax
c001836e:	50                   	push   eax
c001836f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018374:	50                   	push   eax
c0018375:	e8 68 fc ff ff       	call   c0017fe2 <Vm::realToLinear(unsigned short, unsigned short)>
c001837a:	5a                   	pop    edx
c001837b:	5e                   	pop    esi
c001837c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001837f:	8d 56 fa             	lea    edx,[esi-0x6]
c0018382:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018388:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001838b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001838e:	83 c2 02             	add    edx,0x2
c0018391:	66 89 10             	mov    WORD PTR [eax],dx
c0018394:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018397:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001839b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001839e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00183a2:	89 d6                	mov    esi,edx
c00183a4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00183aa:	66 81 e6 ff fd       	and    si,0xfdff
c00183af:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00183b3:	74 07                	je     c00183bc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00183b5:	89 d6                	mov    esi,edx
c00183b7:	66 81 ce 00 02       	or     si,0x200
c00183bc:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00183c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00183c5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00183c9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00183d1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00183d4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00183dc:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00183df:	5b                   	pop    ebx
c00183e0:	5e                   	pop    esi
c00183e1:	5f                   	pop    edi
c00183e2:	c3                   	ret    

c00183e3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00183e3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00183e8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00183ed:	c1 e0 04             	shl    eax,0x4
c00183f0:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c00183f3:	c3                   	ret    

c00183f4 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c00183f4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00183f9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00183fe:	c1 e0 04             	shl    eax,0x4
c0018401:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018405:	c3                   	ret    

c0018406 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018406:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001840b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018410:	c1 e0 04             	shl    eax,0x4
c0018413:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018416:	c3                   	ret    

c0018417 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018417:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001841c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018421:	c1 e0 04             	shl    eax,0x4
c0018424:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018428:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001842b:	c3                   	ret    

c001842c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001842c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018431:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018436:	c1 e0 04             	shl    eax,0x4
c0018439:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001843d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018441:	c3                   	ret    

c0018442 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018442:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018447:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001844c:	c1 e0 04             	shl    eax,0x4
c001844f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018453:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018456:	c3                   	ret    

c0018457 <Vm::faultHandler(regs*)>:
c0018457:	55                   	push   ebp
c0018458:	57                   	push   edi
c0018459:	56                   	push   esi
c001845a:	53                   	push   ebx
c001845b:	83 ec 1c             	sub    esp,0x1c
c001845e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018462:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018465:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018469:	0f b7 f8             	movzx  edi,ax
c001846c:	52                   	push   edx
c001846d:	0f b7 c0             	movzx  eax,ax
c0018470:	50                   	push   eax
c0018471:	e8 6c fb ff ff       	call   c0017fe2 <Vm::realToLinear(unsigned short, unsigned short)>
c0018476:	5a                   	pop    edx
c0018477:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001847a:	59                   	pop    ecx
c001847b:	89 c1                	mov    ecx,eax
c001847d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018480:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018484:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018489:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001848d:	0f b7 c5             	movzx  eax,bp
c0018490:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018494:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018498:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001849c:	e8 41 fb ff ff       	call   c0017fe2 <Vm::realToLinear(unsigned short, unsigned short)>
c00184a1:	5e                   	pop    esi
c00184a2:	be 06 00 00 00       	mov    esi,0x6
c00184a7:	5a                   	pop    edx
c00184a8:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00184ad:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00184b2:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00184b5:	80 fa 9d             	cmp    dl,0x9d
c00184b8:	0f 84 2c 02 00 00    	je     c00186ea <Vm::faultHandler(regs*)+0x293>
c00184be:	0f 87 91 00 00 00    	ja     c0018555 <Vm::faultHandler(regs*)+0xfe>
c00184c4:	80 fa 66             	cmp    dl,0x66
c00184c7:	0f 84 98 01 00 00    	je     c0018665 <Vm::faultHandler(regs*)+0x20e>
c00184cd:	77 47                	ja     c0018516 <Vm::faultHandler(regs*)+0xbf>
c00184cf:	80 fa 36             	cmp    dl,0x36
c00184d2:	0f 84 80 01 00 00    	je     c0018658 <Vm::faultHandler(regs*)+0x201>
c00184d8:	77 1a                	ja     c00184f4 <Vm::faultHandler(regs*)+0x9d>
c00184da:	80 fa 26             	cmp    dl,0x26
c00184dd:	0f 84 4e 01 00 00    	je     c0018631 <Vm::faultHandler(regs*)+0x1da>
c00184e3:	80 fa 2e             	cmp    dl,0x2e
c00184e6:	0f 85 e2 05 00 00    	jne    c0018ace <Vm::faultHandler(regs*)+0x677>
c00184ec:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00184ef:	31 f6                	xor    esi,esi
c00184f1:	41                   	inc    ecx
c00184f2:	eb be                	jmp    c00184b2 <Vm::faultHandler(regs*)+0x5b>
c00184f4:	80 fa 64             	cmp    dl,0x64
c00184f7:	0f 84 41 01 00 00    	je     c001863e <Vm::faultHandler(regs*)+0x1e7>
c00184fd:	0f 87 48 01 00 00    	ja     c001864b <Vm::faultHandler(regs*)+0x1f4>
c0018503:	80 fa 3e             	cmp    dl,0x3e
c0018506:	0f 85 c2 05 00 00    	jne    c0018ace <Vm::faultHandler(regs*)+0x677>
c001850c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001850f:	be 01 00 00 00       	mov    esi,0x1
c0018514:	eb db                	jmp    c00184f1 <Vm::faultHandler(regs*)+0x9a>
c0018516:	80 fa 6d             	cmp    dl,0x6d
c0018519:	0f 84 ec 02 00 00    	je     c001880b <Vm::faultHandler(regs*)+0x3b4>
c001851f:	77 17                	ja     c0018538 <Vm::faultHandler(regs*)+0xe1>
c0018521:	80 fa 67             	cmp    dl,0x67
c0018524:	0f 84 48 01 00 00    	je     c0018672 <Vm::faultHandler(regs*)+0x21b>
c001852a:	80 fa 6c             	cmp    dl,0x6c
c001852d:	0f 84 69 02 00 00    	je     c001879c <Vm::faultHandler(regs*)+0x345>
c0018533:	e9 96 05 00 00       	jmp    c0018ace <Vm::faultHandler(regs*)+0x677>
c0018538:	80 fa 6f             	cmp    dl,0x6f
c001853b:	0f 84 f4 03 00 00    	je     c0018935 <Vm::faultHandler(regs*)+0x4de>
c0018541:	0f 82 59 03 00 00    	jb     c00188a0 <Vm::faultHandler(regs*)+0x449>
c0018547:	80 fa 9c             	cmp    dl,0x9c
c001854a:	0f 84 2f 01 00 00    	je     c001867f <Vm::faultHandler(regs*)+0x228>
c0018550:	e9 79 05 00 00       	jmp    c0018ace <Vm::faultHandler(regs*)+0x677>
c0018555:	80 fa ec             	cmp    dl,0xec
c0018558:	0f 84 14 05 00 00    	je     c0018a72 <Vm::faultHandler(regs*)+0x61b>
c001855e:	77 7b                	ja     c00185db <Vm::faultHandler(regs*)+0x184>
c0018560:	80 fa e4             	cmp    dl,0xe4
c0018563:	0f 84 93 04 00 00    	je     c00189fc <Vm::faultHandler(regs*)+0x5a5>
c0018569:	77 53                	ja     c00185be <Vm::faultHandler(regs*)+0x167>
c001856b:	80 fa cd             	cmp    dl,0xcd
c001856e:	0f 84 d9 01 00 00    	je     c001874d <Vm::faultHandler(regs*)+0x2f6>
c0018574:	80 fa cf             	cmp    dl,0xcf
c0018577:	0f 85 51 05 00 00    	jne    c0018ace <Vm::faultHandler(regs*)+0x677>
c001857d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018580:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018583:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018587:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001858a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001858e:	81 ca 00 02 02 00    	or     edx,0x20200
c0018594:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018597:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001859b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00185a1:	66 c1 e8 09          	shr    ax,0x9
c00185a5:	83 e0 01             	and    eax,0x1
c00185a8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00185ab:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00185ae:	83 c0 06             	add    eax,0x6
c00185b1:	25 ff ff 00 00       	and    eax,0xffff
c00185b6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00185b9:	e9 0c 05 00 00       	jmp    c0018aca <Vm::faultHandler(regs*)+0x673>
c00185be:	80 fa e6             	cmp    dl,0xe6
c00185c1:	0f 84 7f 04 00 00    	je     c0018a46 <Vm::faultHandler(regs*)+0x5ef>
c00185c7:	0f 82 4b 04 00 00    	jb     c0018a18 <Vm::faultHandler(regs*)+0x5c1>
c00185cd:	80 fa e7             	cmp    dl,0xe7
c00185d0:	0f 84 87 04 00 00    	je     c0018a5d <Vm::faultHandler(regs*)+0x606>
c00185d6:	e9 f3 04 00 00       	jmp    c0018ace <Vm::faultHandler(regs*)+0x677>
c00185db:	80 fa ef             	cmp    dl,0xef
c00185de:	0f 84 d1 04 00 00    	je     c0018ab5 <Vm::faultHandler(regs*)+0x65e>
c00185e4:	77 28                	ja     c001860e <Vm::faultHandler(regs*)+0x1b7>
c00185e6:	80 fa ed             	cmp    dl,0xed
c00185e9:	0f 84 9f 04 00 00    	je     c0018a8e <Vm::faultHandler(regs*)+0x637>
c00185ef:	80 fa ee             	cmp    dl,0xee
c00185f2:	0f 85 d6 04 00 00    	jne    c0018ace <Vm::faultHandler(regs*)+0x677>
c00185f8:	50                   	push   eax
c00185f9:	50                   	push   eax
c00185fa:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00185fe:	50                   	push   eax
c00185ff:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018603:	50                   	push   eax
c0018604:	e8 a3 f9 ff ff       	call   c0017fac <Vm::outbv(unsigned short, unsigned char)>
c0018609:	e9 9f 04 00 00       	jmp    c0018aad <Vm::faultHandler(regs*)+0x656>
c001860e:	80 fa fa             	cmp    dl,0xfa
c0018611:	0f 84 69 01 00 00    	je     c0018780 <Vm::faultHandler(regs*)+0x329>
c0018617:	80 fa fb             	cmp    dl,0xfb
c001861a:	0f 84 6e 01 00 00    	je     c001878e <Vm::faultHandler(regs*)+0x337>
c0018620:	80 fa f3             	cmp    dl,0xf3
c0018623:	0f 85 a5 04 00 00    	jne    c0018ace <Vm::faultHandler(regs*)+0x677>
c0018629:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001862c:	e9 c0 fe ff ff       	jmp    c00184f1 <Vm::faultHandler(regs*)+0x9a>
c0018631:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018634:	be 02 00 00 00       	mov    esi,0x2
c0018639:	e9 b3 fe ff ff       	jmp    c00184f1 <Vm::faultHandler(regs*)+0x9a>
c001863e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018641:	be 03 00 00 00       	mov    esi,0x3
c0018646:	e9 a6 fe ff ff       	jmp    c00184f1 <Vm::faultHandler(regs*)+0x9a>
c001864b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001864e:	be 04 00 00 00       	mov    esi,0x4
c0018653:	e9 99 fe ff ff       	jmp    c00184f1 <Vm::faultHandler(regs*)+0x9a>
c0018658:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001865b:	be 05 00 00 00       	mov    esi,0x5
c0018660:	e9 8c fe ff ff       	jmp    c00184f1 <Vm::faultHandler(regs*)+0x9a>
c0018665:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018668:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001866d:	e9 7f fe ff ff       	jmp    c00184f1 <Vm::faultHandler(regs*)+0x9a>
c0018672:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018675:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001867a:	e9 72 fe ff ff       	jmp    c00184f1 <Vm::faultHandler(regs*)+0x9a>
c001867f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018682:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018686:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001868b:	74 30                	je     c00186bd <Vm::faultHandler(regs*)+0x266>
c001868d:	83 e9 04             	sub    ecx,0x4
c0018690:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018696:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001869c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001869f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00186a2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00186a8:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00186ac:	0f 84 15 04 00 00    	je     c0018ac7 <Vm::faultHandler(regs*)+0x670>
c00186b2:	80 ce 02             	or     dh,0x2
c00186b5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00186b8:	e9 0a 04 00 00       	jmp    c0018ac7 <Vm::faultHandler(regs*)+0x670>
c00186bd:	83 e9 02             	sub    ecx,0x2
c00186c0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00186c6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00186c9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00186cd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00186d3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00186d7:	74 05                	je     c00186de <Vm::faultHandler(regs*)+0x287>
c00186d9:	80 ce 02             	or     dh,0x2
c00186dc:	eb 03                	jmp    c00186e1 <Vm::faultHandler(regs*)+0x28a>
c00186de:	80 e6 fd             	and    dh,0xfd
c00186e1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00186e5:	e9 dd 03 00 00       	jmp    c0018ac7 <Vm::faultHandler(regs*)+0x670>
c00186ea:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00186ef:	74 2a                	je     c001871b <Vm::faultHandler(regs*)+0x2c4>
c00186f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00186f3:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00186f9:	81 ca 00 02 02 00    	or     edx,0x20200
c00186ff:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018702:	8b 00                	mov    eax,DWORD PTR [eax]
c0018704:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001870a:	c1 e8 09             	shr    eax,0x9
c001870d:	83 e0 01             	and    eax,0x1
c0018710:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0018713:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018716:	83 c0 04             	add    eax,0x4
c0018719:	eb 25                	jmp    c0018740 <Vm::faultHandler(regs*)+0x2e9>
c001871b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001871e:	81 ca 00 02 02 00    	or     edx,0x20200
c0018724:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018727:	66 8b 00             	mov    ax,WORD PTR [eax]
c001872a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018730:	66 c1 e8 09          	shr    ax,0x9
c0018734:	83 e0 01             	and    eax,0x1
c0018737:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001873a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001873d:	83 c0 02             	add    eax,0x2
c0018740:	25 ff ff 00 00       	and    eax,0xffff
c0018745:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018748:	e9 7a 03 00 00       	jmp    c0018ac7 <Vm::faultHandler(regs*)+0x670>
c001874d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018751:	3c ee                	cmp    al,0xee
c0018753:	75 10                	jne    c0018765 <Vm::faultHandler(regs*)+0x30e>
c0018755:	83 ec 0c             	sub    esp,0xc
c0018758:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001875b:	e8 e9 f8 ff ff       	call   c0018049 <Vm::mainloop3(unsigned long)>
c0018760:	e9 4b 03 00 00       	jmp    c0018ab0 <Vm::faultHandler(regs*)+0x659>
c0018765:	83 ec 0c             	sub    esp,0xc
c0018768:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001876c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018770:	51                   	push   ecx
c0018771:	50                   	push   eax
c0018772:	53                   	push   ebx
c0018773:	e8 e1 fb ff ff       	call   c0018359 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018778:	83 c4 20             	add    esp,0x20
c001877b:	e9 4a 03 00 00       	jmp    c0018aca <Vm::faultHandler(regs*)+0x673>
c0018780:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018785:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0018789:	e9 39 03 00 00       	jmp    c0018ac7 <Vm::faultHandler(regs*)+0x670>
c001878e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018793:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0018797:	e9 2b 03 00 00       	jmp    c0018ac7 <Vm::faultHandler(regs*)+0x670>
c001879c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001879f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00187a4:	74 2b                	je     c00187d1 <Vm::faultHandler(regs*)+0x37a>
c00187a6:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00187ad:	76 22                	jbe    c00187d1 <Vm::faultHandler(regs*)+0x37a>
c00187af:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00187b3:	50                   	push   eax
c00187b4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00187b8:	50                   	push   eax
c00187b9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00187bd:	50                   	push   eax
c00187be:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00187c2:	50                   	push   eax
c00187c3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00187c7:	50                   	push   eax
c00187c8:	6a 6c                	push   0x6c
c00187ca:	6a 6c                	push   0x6c
c00187cc:	e9 b9 01 00 00       	jmp    c001898a <Vm::faultHandler(regs*)+0x533>
c00187d1:	83 ec 0c             	sub    esp,0xc
c00187d4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00187d8:	0f b7 f6             	movzx  esi,si
c00187db:	50                   	push   eax
c00187dc:	e8 b8 f7 ff ff       	call   c0017f99 <Vm::inbv(unsigned short)>
c00187e1:	83 c4 0c             	add    esp,0xc
c00187e4:	0f b6 c0             	movzx  eax,al
c00187e7:	50                   	push   eax
c00187e8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00187ec:	50                   	push   eax
c00187ed:	56                   	push   esi
c00187ee:	e8 24 fc ff ff       	call   c0018417 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00187f3:	83 c4 10             	add    esp,0x10
c00187f6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00187f9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00187fd:	74 03                	je     c0018802 <Vm::faultHandler(regs*)+0x3ab>
c00187ff:	48                   	dec    eax
c0018800:	eb 01                	jmp    c0018803 <Vm::faultHandler(regs*)+0x3ac>
c0018802:	40                   	inc    eax
c0018803:	0f b7 c0             	movzx  eax,ax
c0018806:	e9 8d 00 00 00       	jmp    c0018898 <Vm::faultHandler(regs*)+0x441>
c001880b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001880e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018811:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018816:	74 29                	je     c0018841 <Vm::faultHandler(regs*)+0x3ea>
c0018818:	3d ff ff 00 00       	cmp    eax,0xffff
c001881d:	76 22                	jbe    c0018841 <Vm::faultHandler(regs*)+0x3ea>
c001881f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018823:	50                   	push   eax
c0018824:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018828:	50                   	push   eax
c0018829:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001882d:	50                   	push   eax
c001882e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018832:	50                   	push   eax
c0018833:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018837:	50                   	push   eax
c0018838:	6a 6d                	push   0x6d
c001883a:	6a 6d                	push   0x6d
c001883c:	e9 49 01 00 00       	jmp    c001898a <Vm::faultHandler(regs*)+0x533>
c0018841:	0f b7 c8             	movzx  ecx,ax
c0018844:	0f b7 f6             	movzx  esi,si
c0018847:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001884a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001884f:	74 20                	je     c0018871 <Vm::faultHandler(regs*)+0x41a>
c0018851:	ed                   	in     eax,dx
c0018852:	55                   	push   ebp
c0018853:	50                   	push   eax
c0018854:	51                   	push   ecx
c0018855:	56                   	push   esi
c0018856:	e8 e7 fb ff ff       	call   c0018442 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001885b:	83 c4 10             	add    esp,0x10
c001885e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018861:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018865:	74 05                	je     c001886c <Vm::faultHandler(regs*)+0x415>
c0018867:	83 e8 04             	sub    eax,0x4
c001886a:	eb 27                	jmp    c0018893 <Vm::faultHandler(regs*)+0x43c>
c001886c:	83 c0 04             	add    eax,0x4
c001886f:	eb 22                	jmp    c0018893 <Vm::faultHandler(regs*)+0x43c>
c0018871:	66 ed                	in     ax,dx
c0018873:	0f b7 c0             	movzx  eax,ax
c0018876:	57                   	push   edi
c0018877:	50                   	push   eax
c0018878:	51                   	push   ecx
c0018879:	56                   	push   esi
c001887a:	e8 ad fb ff ff       	call   c001842c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001887f:	83 c4 10             	add    esp,0x10
c0018882:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018885:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018889:	74 05                	je     c0018890 <Vm::faultHandler(regs*)+0x439>
c001888b:	83 e8 02             	sub    eax,0x2
c001888e:	eb 03                	jmp    c0018893 <Vm::faultHandler(regs*)+0x43c>
c0018890:	83 c0 02             	add    eax,0x2
c0018893:	25 ff ff 00 00       	and    eax,0xffff
c0018898:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001889b:	e9 27 02 00 00       	jmp    c0018ac7 <Vm::faultHandler(regs*)+0x670>
c00188a0:	8d 46 ff             	lea    eax,[esi-0x1]
c00188a3:	3c 05                	cmp    al,0x5
c00188a5:	77 24                	ja     c00188cb <Vm::faultHandler(regs*)+0x474>
c00188a7:	0f b6 c0             	movzx  eax,al
c00188aa:	ff 24 85 00 56 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdaa00]
c00188b1:	0f b7 fd             	movzx  edi,bp
c00188b4:	eb 15                	jmp    c00188cb <Vm::faultHandler(regs*)+0x474>
c00188b6:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00188ba:	eb 0f                	jmp    c00188cb <Vm::faultHandler(regs*)+0x474>
c00188bc:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00188c0:	eb 09                	jmp    c00188cb <Vm::faultHandler(regs*)+0x474>
c00188c2:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00188c6:	eb 03                	jmp    c00188cb <Vm::faultHandler(regs*)+0x474>
c00188c8:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00188cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00188ce:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00188d3:	74 29                	je     c00188fe <Vm::faultHandler(regs*)+0x4a7>
c00188d5:	3d ff ff 00 00       	cmp    eax,0xffff
c00188da:	76 22                	jbe    c00188fe <Vm::faultHandler(regs*)+0x4a7>
c00188dc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00188e0:	50                   	push   eax
c00188e1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00188e5:	50                   	push   eax
c00188e6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00188ea:	50                   	push   eax
c00188eb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00188ef:	50                   	push   eax
c00188f0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00188f4:	50                   	push   eax
c00188f5:	6a 6e                	push   0x6e
c00188f7:	6a 6e                	push   0x6e
c00188f9:	e9 8c 00 00 00       	jmp    c001898a <Vm::faultHandler(regs*)+0x533>
c00188fe:	0f b7 c0             	movzx  eax,ax
c0018901:	52                   	push   edx
c0018902:	52                   	push   edx
c0018903:	50                   	push   eax
c0018904:	57                   	push   edi
c0018905:	e8 d9 fa ff ff       	call   c00183e3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001890a:	59                   	pop    ecx
c001890b:	0f b6 c0             	movzx  eax,al
c001890e:	5e                   	pop    esi
c001890f:	50                   	push   eax
c0018910:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018914:	50                   	push   eax
c0018915:	e8 92 f6 ff ff       	call   c0017fac <Vm::outbv(unsigned short, unsigned char)>
c001891a:	83 c4 10             	add    esp,0x10
c001891d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018920:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018924:	74 03                	je     c0018929 <Vm::faultHandler(regs*)+0x4d2>
c0018926:	48                   	dec    eax
c0018927:	eb 01                	jmp    c001892a <Vm::faultHandler(regs*)+0x4d3>
c0018929:	40                   	inc    eax
c001892a:	0f b7 c0             	movzx  eax,ax
c001892d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018930:	e9 92 01 00 00       	jmp    c0018ac7 <Vm::faultHandler(regs*)+0x670>
c0018935:	8d 46 ff             	lea    eax,[esi-0x1]
c0018938:	3c 05                	cmp    al,0x5
c001893a:	77 1f                	ja     c001895b <Vm::faultHandler(regs*)+0x504>
c001893c:	0f b6 c0             	movzx  eax,al
c001893f:	ff 24 85 18 56 02 c0 	jmp    DWORD PTR [eax*4-0x3ffda9e8]
c0018946:	89 ef                	mov    edi,ebp
c0018948:	eb 11                	jmp    c001895b <Vm::faultHandler(regs*)+0x504>
c001894a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001894d:	eb 0c                	jmp    c001895b <Vm::faultHandler(regs*)+0x504>
c001894f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0018952:	eb 07                	jmp    c001895b <Vm::faultHandler(regs*)+0x504>
c0018954:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0018957:	eb 02                	jmp    c001895b <Vm::faultHandler(regs*)+0x504>
c0018959:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001895b:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001895e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018963:	74 37                	je     c001899c <Vm::faultHandler(regs*)+0x545>
c0018965:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001896b:	76 2f                	jbe    c001899c <Vm::faultHandler(regs*)+0x545>
c001896d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018971:	50                   	push   eax
c0018972:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018976:	50                   	push   eax
c0018977:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001897b:	50                   	push   eax
c001897c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018980:	50                   	push   eax
c0018981:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018985:	50                   	push   eax
c0018986:	6a 6f                	push   0x6f
c0018988:	6a 6f                	push   0x6f
c001898a:	68 a6 55 02 c0       	push   0xc00255a6
c001898f:	e8 31 46 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0018994:	83 c4 20             	add    esp,0x20
c0018997:	e9 86 01 00 00       	jmp    c0018b22 <Vm::faultHandler(regs*)+0x6cb>
c001899c:	0f b7 d7             	movzx  edx,di
c001899f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00189a2:	0f b7 c6             	movzx  eax,si
c00189a5:	81 e1 00 04 00 00    	and    ecx,0x400
c00189ab:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00189ae:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00189b3:	74 1d                	je     c00189d2 <Vm::faultHandler(regs*)+0x57b>
c00189b5:	55                   	push   ebp
c00189b6:	55                   	push   ebp
c00189b7:	50                   	push   eax
c00189b8:	52                   	push   edx
c00189b9:	e8 48 fa ff ff       	call   c0018406 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00189be:	83 c4 10             	add    esp,0x10
c00189c1:	89 fa                	mov    edx,edi
c00189c3:	ef                   	out    dx,eax
c00189c4:	85 c9                	test   ecx,ecx
c00189c6:	74 05                	je     c00189cd <Vm::faultHandler(regs*)+0x576>
c00189c8:	83 ee 04             	sub    esi,0x4
c00189cb:	eb 21                	jmp    c00189ee <Vm::faultHandler(regs*)+0x597>
c00189cd:	83 c6 04             	add    esi,0x4
c00189d0:	eb 1c                	jmp    c00189ee <Vm::faultHandler(regs*)+0x597>
c00189d2:	55                   	push   ebp
c00189d3:	55                   	push   ebp
c00189d4:	50                   	push   eax
c00189d5:	52                   	push   edx
c00189d6:	e8 19 fa ff ff       	call   c00183f4 <Vm::readWordFromReal(unsigned short, unsigned short)>
c00189db:	83 c4 10             	add    esp,0x10
c00189de:	89 fa                	mov    edx,edi
c00189e0:	66 ef                	out    dx,ax
c00189e2:	85 c9                	test   ecx,ecx
c00189e4:	74 05                	je     c00189eb <Vm::faultHandler(regs*)+0x594>
c00189e6:	83 ee 02             	sub    esi,0x2
c00189e9:	eb 03                	jmp    c00189ee <Vm::faultHandler(regs*)+0x597>
c00189eb:	83 c6 02             	add    esi,0x2
c00189ee:	81 e6 ff ff 00 00    	and    esi,0xffff
c00189f4:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00189f7:	e9 cb 00 00 00       	jmp    c0018ac7 <Vm::faultHandler(regs*)+0x670>
c00189fc:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018a03:	83 ec 0c             	sub    esp,0xc
c0018a06:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018a0a:	50                   	push   eax
c0018a0b:	e8 89 f5 ff ff       	call   c0017f99 <Vm::inbv(unsigned short)>
c0018a10:	0f b6 c0             	movzx  eax,al
c0018a13:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018a16:	eb 3f                	jmp    c0018a57 <Vm::faultHandler(regs*)+0x600>
c0018a18:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a1d:	74 07                	je     c0018a26 <Vm::faultHandler(regs*)+0x5cf>
c0018a1f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018a23:	ed                   	in     eax,dx
c0018a24:	eb 14                	jmp    c0018a3a <Vm::faultHandler(regs*)+0x5e3>
c0018a26:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0018a29:	66 31 f6             	xor    si,si
c0018a2c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0018a2f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018a33:	66 ed                	in     ax,dx
c0018a35:	0f b7 c0             	movzx  eax,ax
c0018a38:	09 f0                	or     eax,esi
c0018a3a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018a3d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018a41:	e9 84 00 00 00       	jmp    c0018aca <Vm::faultHandler(regs*)+0x673>
c0018a46:	52                   	push   edx
c0018a47:	52                   	push   edx
c0018a48:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018a4c:	50                   	push   eax
c0018a4d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018a51:	50                   	push   eax
c0018a52:	e8 55 f5 ff ff       	call   c0017fac <Vm::outbv(unsigned short, unsigned char)>
c0018a57:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018a5b:	eb 53                	jmp    c0018ab0 <Vm::faultHandler(regs*)+0x659>
c0018a5d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018a60:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018a64:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a69:	74 03                	je     c0018a6e <Vm::faultHandler(regs*)+0x617>
c0018a6b:	ef                   	out    dx,eax
c0018a6c:	eb cf                	jmp    c0018a3d <Vm::faultHandler(regs*)+0x5e6>
c0018a6e:	66 ef                	out    dx,ax
c0018a70:	eb cb                	jmp    c0018a3d <Vm::faultHandler(regs*)+0x5e6>
c0018a72:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018a79:	83 ec 0c             	sub    esp,0xc
c0018a7c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018a80:	50                   	push   eax
c0018a81:	e8 13 f5 ff ff       	call   c0017f99 <Vm::inbv(unsigned short)>
c0018a86:	0f b6 c0             	movzx  eax,al
c0018a89:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018a8c:	eb 1f                	jmp    c0018aad <Vm::faultHandler(regs*)+0x656>
c0018a8e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018a91:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a96:	74 03                	je     c0018a9b <Vm::faultHandler(regs*)+0x644>
c0018a98:	ed                   	in     eax,dx
c0018a99:	eb 0d                	jmp    c0018aa8 <Vm::faultHandler(regs*)+0x651>
c0018a9b:	66 ed                	in     ax,dx
c0018a9d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018aa0:	0f b7 c0             	movzx  eax,ax
c0018aa3:	66 31 d2             	xor    dx,dx
c0018aa6:	09 d0                	or     eax,edx
c0018aa8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018aab:	eb 1a                	jmp    c0018ac7 <Vm::faultHandler(regs*)+0x670>
c0018aad:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018ab0:	83 c4 10             	add    esp,0x10
c0018ab3:	eb 15                	jmp    c0018aca <Vm::faultHandler(regs*)+0x673>
c0018ab5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018ab8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018abb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ac0:	74 03                	je     c0018ac5 <Vm::faultHandler(regs*)+0x66e>
c0018ac2:	ef                   	out    dx,eax
c0018ac3:	eb 02                	jmp    c0018ac7 <Vm::faultHandler(regs*)+0x670>
c0018ac5:	66 ef                	out    dx,ax
c0018ac7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018aca:	b0 01                	mov    al,0x1
c0018acc:	eb 56                	jmp    c0018b24 <Vm::faultHandler(regs*)+0x6cd>
c0018ace:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018ad2:	50                   	push   eax
c0018ad3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018ad7:	50                   	push   eax
c0018ad8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018adc:	50                   	push   eax
c0018add:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018ae1:	50                   	push   eax
c0018ae2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018ae6:	50                   	push   eax
c0018ae7:	52                   	push   edx
c0018ae8:	52                   	push   edx
c0018ae9:	68 d3 55 02 c0       	push   0xc00255d3
c0018aee:	e8 d2 44 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0018af3:	83 c4 20             	add    esp,0x20
c0018af6:	83 ec 0c             	sub    esp,0xc
c0018af9:	6a 60                	push   0x60
c0018afb:	e8 99 f4 ff ff       	call   c0017f99 <Vm::inbv(unsigned short)>
c0018b00:	83 c4 10             	add    esp,0x10
c0018b03:	3c 1c                	cmp    al,0x1c
c0018b05:	74 04                	je     c0018b0b <Vm::faultHandler(regs*)+0x6b4>
c0018b07:	3c 5a                	cmp    al,0x5a
c0018b09:	75 eb                	jne    c0018af6 <Vm::faultHandler(regs*)+0x69f>
c0018b0b:	3c 5a                	cmp    al,0x5a
c0018b0d:	74 04                	je     c0018b13 <Vm::faultHandler(regs*)+0x6bc>
c0018b0f:	3c 1c                	cmp    al,0x1c
c0018b11:	75 0f                	jne    c0018b22 <Vm::faultHandler(regs*)+0x6cb>
c0018b13:	83 ec 0c             	sub    esp,0xc
c0018b16:	6a 60                	push   0x60
c0018b18:	e8 7c f4 ff ff       	call   c0017f99 <Vm::inbv(unsigned short)>
c0018b1d:	83 c4 10             	add    esp,0x10
c0018b20:	eb e9                	jmp    c0018b0b <Vm::faultHandler(regs*)+0x6b4>
c0018b22:	31 c0                	xor    eax,eax
c0018b24:	83 c4 1c             	add    esp,0x1c
c0018b27:	5b                   	pop    ebx
c0018b28:	5e                   	pop    esi
c0018b29:	5f                   	pop    edi
c0018b2a:	5d                   	pop    ebp
c0018b2b:	c3                   	ret    

c0018b2c <Vm::fpuInternalTo32(unsigned long long)>:
c0018b2c:	57                   	push   edi
c0018b2d:	56                   	push   esi
c0018b2e:	53                   	push   ebx
c0018b2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b37:	89 d6                	mov    esi,edx
c0018b39:	89 d7                	mov    edi,edx
c0018b3b:	89 c1                	mov    ecx,eax
c0018b3d:	c1 ef 14             	shr    edi,0x14
c0018b40:	89 d3                	mov    ebx,edx
c0018b42:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0018b48:	31 d2                	xor    edx,edx
c0018b4a:	89 f8                	mov    eax,edi
c0018b4c:	81 e6 00 00 00 80    	and    esi,0x80000000
c0018b52:	bf ff 00 00 00       	mov    edi,0xff
c0018b57:	05 80 fc ff ff       	add    eax,0xfffffc80
c0018b5c:	83 d2 ff             	adc    edx,0xffffffff
c0018b5f:	39 c7                	cmp    edi,eax
c0018b61:	bf 00 00 00 00       	mov    edi,0x0
c0018b66:	19 d7                	sbb    edi,edx
c0018b68:	72 16                	jb     c0018b80 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0018b6a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0018b6e:	c1 e0 17             	shl    eax,0x17
c0018b71:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0018b77:	09 f1                	or     ecx,esi
c0018b79:	09 c1                	or     ecx,eax
c0018b7b:	89 cf                	mov    edi,ecx
c0018b7d:	eb 05                	jmp    c0018b84 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0018b7f:	90                   	nop
c0018b80:	31 ff                	xor    edi,edi
c0018b82:	66 90                	xchg   ax,ax
c0018b84:	89 f8                	mov    eax,edi
c0018b86:	5b                   	pop    ebx
c0018b87:	5e                   	pop    esi
c0018b88:	5f                   	pop    edi
c0018b89:	c3                   	ret    

c0018b8a <Vm::fpuInternalTo64(unsigned long long)>:
c0018b8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b92:	c3                   	ret    

c0018b93 <Vm::fpu32ToInternal(unsigned int)>:
c0018b93:	57                   	push   edi
c0018b94:	31 ff                	xor    edi,edi
c0018b96:	56                   	push   esi
c0018b97:	53                   	push   ebx
c0018b98:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018b9c:	89 cb                	mov    ebx,ecx
c0018b9e:	89 ce                	mov    esi,ecx
c0018ba0:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0018ba6:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0018bac:	c1 e9 17             	shr    ecx,0x17
c0018baf:	89 f0                	mov    eax,esi
c0018bb1:	0f b6 d1             	movzx  edx,cl
c0018bb4:	81 c2 80 03 00 00    	add    edx,0x380
c0018bba:	89 d1                	mov    ecx,edx
c0018bbc:	89 fa                	mov    edx,edi
c0018bbe:	c1 e1 14             	shl    ecx,0x14
c0018bc1:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0018bc5:	c1 e0 1d             	shl    eax,0x1d
c0018bc8:	89 d7                	mov    edi,edx
c0018bca:	89 c6                	mov    esi,eax
c0018bcc:	89 ca                	mov    edx,ecx
c0018bce:	89 f0                	mov    eax,esi
c0018bd0:	09 fa                	or     edx,edi
c0018bd2:	09 da                	or     edx,ebx
c0018bd4:	5b                   	pop    ebx
c0018bd5:	5e                   	pop    esi
c0018bd6:	5f                   	pop    edi
c0018bd7:	c3                   	ret    

c0018bd8 <Vm::fpu64ToInternal(unsigned long long)>:
c0018bd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018bdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018be0:	c3                   	ret    

c0018be1 <Vm::fpuFloatToLong(unsigned long long)>:
c0018be1:	57                   	push   edi
c0018be2:	31 c0                	xor    eax,eax
c0018be4:	56                   	push   esi
c0018be5:	31 d2                	xor    edx,edx
c0018be7:	53                   	push   ebx
c0018be8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018bec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018bf0:	89 d9                	mov    ecx,ebx
c0018bf2:	c1 e9 14             	shr    ecx,0x14
c0018bf5:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0018bfb:	89 cf                	mov    edi,ecx
c0018bfd:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0018c03:	78 37                	js     c0018c3c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0018c05:	89 d9                	mov    ecx,ebx
c0018c07:	89 f0                	mov    eax,esi
c0018c09:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0018c0f:	81 c9 00 00 10 00    	or     ecx,0x100000
c0018c15:	89 ca                	mov    edx,ecx
c0018c17:	b9 34 00 00 00       	mov    ecx,0x34
c0018c1c:	29 f9                	sub    ecx,edi
c0018c1e:	0f ad d0             	shrd   eax,edx,cl
c0018c21:	d3 fa                	sar    edx,cl
c0018c23:	f6 c1 20             	test   cl,0x20
c0018c26:	74 08                	je     c0018c30 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0018c28:	89 d0                	mov    eax,edx
c0018c2a:	c1 fa 1f             	sar    edx,0x1f
c0018c2d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c30:	85 db                	test   ebx,ebx
c0018c32:	79 08                	jns    c0018c3c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0018c34:	f7 d8                	neg    eax
c0018c36:	83 d2 00             	adc    edx,0x0
c0018c39:	f7 da                	neg    edx
c0018c3b:	90                   	nop
c0018c3c:	5b                   	pop    ebx
c0018c3d:	5e                   	pop    esi
c0018c3e:	5f                   	pop    edi
c0018c3f:	c3                   	ret    

c0018c40 <Vm::fpuULongToFloat(unsigned long long)>:
c0018c40:	57                   	push   edi
c0018c41:	31 c9                	xor    ecx,ecx
c0018c43:	56                   	push   esi
c0018c44:	53                   	push   ebx
c0018c45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018c49:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c50:	0f ba e7 14          	bt     edi,0x14
c0018c54:	72 0a                	jb     c0018c60 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0018c56:	01 f6                	add    esi,esi
c0018c58:	11 ff                	adc    edi,edi
c0018c5a:	41                   	inc    ecx
c0018c5b:	eb f3                	jmp    c0018c50 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0018c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0018c60:	89 fa                	mov    edx,edi
c0018c62:	89 f0                	mov    eax,esi
c0018c64:	bb 33 04 00 00       	mov    ebx,0x433
c0018c69:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0018c6f:	29 cb                	sub    ebx,ecx
c0018c71:	89 d9                	mov    ecx,ebx
c0018c73:	5b                   	pop    ebx
c0018c74:	c1 e1 14             	shl    ecx,0x14
c0018c77:	5e                   	pop    esi
c0018c78:	09 ca                	or     edx,ecx
c0018c7a:	5f                   	pop    edi
c0018c7b:	c3                   	ret    

c0018c7c <Vm::fpuLongToFloat(long long)>:
c0018c7c:	56                   	push   esi
c0018c7d:	31 c0                	xor    eax,eax
c0018c7f:	53                   	push   ebx
c0018c80:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c84:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018c88:	39 c8                	cmp    eax,ecx
c0018c8a:	19 d8                	sbb    eax,ebx
c0018c8c:	7d 06                	jge    c0018c94 <Vm::fpuLongToFloat(long long)+0x18>
c0018c8e:	31 f6                	xor    esi,esi
c0018c90:	eb 0e                	jmp    c0018ca0 <Vm::fpuLongToFloat(long long)+0x24>
c0018c92:	66 90                	xchg   ax,ax
c0018c94:	f7 d9                	neg    ecx
c0018c96:	be 01 00 00 00       	mov    esi,0x1
c0018c9b:	83 d3 00             	adc    ebx,0x0
c0018c9e:	f7 db                	neg    ebx
c0018ca0:	31 c0                	xor    eax,eax
c0018ca2:	66 90                	xchg   ax,ax
c0018ca4:	0f ba e3 14          	bt     ebx,0x14
c0018ca8:	72 0a                	jb     c0018cb4 <Vm::fpuLongToFloat(long long)+0x38>
c0018caa:	01 c9                	add    ecx,ecx
c0018cac:	11 db                	adc    ebx,ebx
c0018cae:	40                   	inc    eax
c0018caf:	eb f3                	jmp    c0018ca4 <Vm::fpuLongToFloat(long long)+0x28>
c0018cb1:	8d 76 00             	lea    esi,[esi+0x0]
c0018cb4:	ba 33 04 00 00       	mov    edx,0x433
c0018cb9:	29 c2                	sub    edx,eax
c0018cbb:	89 c8                	mov    eax,ecx
c0018cbd:	c1 e2 14             	shl    edx,0x14
c0018cc0:	89 d9                	mov    ecx,ebx
c0018cc2:	89 f3                	mov    ebx,esi
c0018cc4:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0018cca:	09 ca                	or     edx,ecx
c0018ccc:	84 db                	test   bl,bl
c0018cce:	74 08                	je     c0018cd8 <Vm::fpuLongToFloat(long long)+0x5c>
c0018cd0:	81 ca 00 00 00 80    	or     edx,0x80000000
c0018cd6:	66 90                	xchg   ax,ax
c0018cd8:	5b                   	pop    ebx
c0018cd9:	5e                   	pop    esi
c0018cda:	c3                   	ret    

c0018cdb <Vm::fpuGet0()>:
c0018cdb:	31 c0                	xor    eax,eax
c0018cdd:	31 d2                	xor    edx,edx
c0018cdf:	c3                   	ret    

c0018ce0 <Vm::fpuGet1()>:
c0018ce0:	b8 01 00 00 00       	mov    eax,0x1
c0018ce5:	31 d2                	xor    edx,edx
c0018ce7:	c3                   	ret    

c0018ce8 <Vm::fpuGetPi()>:
c0018ce8:	b8 03 00 00 00       	mov    eax,0x3
c0018ced:	31 d2                	xor    edx,edx
c0018cef:	c3                   	ret    

c0018cf0 <Vm::fpuGetLog2E()>:
c0018cf0:	83 ec 18             	sub    esp,0x18
c0018cf3:	68 30 56 02 c0       	push   0xc0025630
c0018cf8:	e8 0a b1 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0018cfd:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018d02:	31 d2                	xor    edx,edx
c0018d04:	83 c4 1c             	add    esp,0x1c
c0018d07:	c3                   	ret    

c0018d08 <Vm::fpuGetLogE2()>:
c0018d08:	83 ec 18             	sub    esp,0x18
c0018d0b:	68 3c 56 02 c0       	push   0xc002563c
c0018d10:	e8 f2 b0 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0018d15:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018d1a:	31 d2                	xor    edx,edx
c0018d1c:	83 c4 1c             	add    esp,0x1c
c0018d1f:	c3                   	ret    

c0018d20 <Vm::fpuGetLog210()>:
c0018d20:	83 ec 18             	sub    esp,0x18
c0018d23:	68 48 56 02 c0       	push   0xc0025648
c0018d28:	e8 da b0 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0018d2d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018d32:	31 d2                	xor    edx,edx
c0018d34:	83 c4 1c             	add    esp,0x1c
c0018d37:	c3                   	ret    

c0018d38 <Vm::fpuGetLog102()>:
c0018d38:	83 ec 18             	sub    esp,0x18
c0018d3b:	68 55 56 02 c0       	push   0xc0025655
c0018d40:	e8 c2 b0 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0018d45:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0018d4a:	31 d2                	xor    edx,edx
c0018d4c:	83 c4 1c             	add    esp,0x1c
c0018d4f:	c3                   	ret    

c0018d50 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0018d50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018d54:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0018d58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d5c:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0018d60:	0f 92 c0             	setb   al
c0018d63:	c3                   	ret    

c0018d64 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0018d64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018d6c:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0018d70:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0018d74:	09 c2                	or     edx,eax
c0018d76:	0f 94 c0             	sete   al
c0018d79:	c3                   	ret    

c0018d7a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0018d7a:	57                   	push   edi
c0018d7b:	56                   	push   esi
c0018d7c:	53                   	push   ebx
c0018d7d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018d81:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018d85:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d89:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d8d:	57                   	push   edi
c0018d8e:	56                   	push   esi
c0018d8f:	53                   	push   ebx
c0018d90:	51                   	push   ecx
c0018d91:	e8 ce ff ff ff       	call   c0018d64 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0018d96:	83 c4 10             	add    esp,0x10
c0018d99:	88 c2                	mov    dl,al
c0018d9b:	31 c0                	xor    eax,eax
c0018d9d:	84 d2                	test   dl,dl
c0018d9f:	75 0f                	jne    c0018db0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0018da1:	57                   	push   edi
c0018da2:	56                   	push   esi
c0018da3:	53                   	push   ebx
c0018da4:	51                   	push   ecx
c0018da5:	e8 a6 ff ff ff       	call   c0018d50 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0018daa:	83 c4 10             	add    esp,0x10
c0018dad:	8d 76 00             	lea    esi,[esi+0x0]
c0018db0:	83 e0 01             	and    eax,0x1
c0018db3:	5b                   	pop    ebx
c0018db4:	88 c1                	mov    cl,al
c0018db6:	83 e2 01             	and    edx,0x1
c0018db9:	a0 61 a9 02 c0       	mov    al,ds:0xc002a961
c0018dbe:	c1 e2 06             	shl    edx,0x6
c0018dc1:	83 e0 ba             	and    eax,0xffffffba
c0018dc4:	5e                   	pop    esi
c0018dc5:	09 c8                	or     eax,ecx
c0018dc7:	5f                   	pop    edi
c0018dc8:	09 d0                	or     eax,edx
c0018dca:	a2 61 a9 02 c0       	mov    ds:0xc002a961,al
c0018dcf:	c3                   	ret    

c0018dd0 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0018dd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018dd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018dd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0018ddc:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0018de0:	c3                   	ret    

c0018de1 <Vm::fpuAbs(unsigned long long)>:
c0018de1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018de5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018de9:	c3                   	ret    

c0018dea <Vm::fpuChs(unsigned long long)>:
c0018dea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018df2:	f7 d8                	neg    eax
c0018df4:	83 d2 00             	adc    edx,0x0
c0018df7:	f7 da                	neg    edx
c0018df9:	c3                   	ret    

c0018dfa <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0018dfa:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0018dfe:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0018e03:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0018e07:	eb c7                	jmp    c0018dd0 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0018e09 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0018e09:	53                   	push   ebx
c0018e0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e16:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018e1a:	0f af ca             	imul   ecx,edx
c0018e1d:	0f af d8             	imul   ebx,eax
c0018e20:	f7 e2                	mul    edx
c0018e22:	01 d9                	add    ecx,ebx
c0018e24:	5b                   	pop    ebx
c0018e25:	01 ca                	add    edx,ecx
c0018e27:	c3                   	ret    

c0018e28 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0018e28:	83 ec 0c             	sub    esp,0xc
c0018e2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e3b:	e8 90 8f 00 00       	call   c0021dd0 <__udivdi3>
c0018e40:	83 c4 1c             	add    esp,0x1c
c0018e43:	c3                   	ret    

c0018e44 <Vm::fpuSquare(unsigned long long)>:
c0018e44:	50                   	push   eax
c0018e45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e4d:	52                   	push   edx
c0018e4e:	50                   	push   eax
c0018e4f:	52                   	push   edx
c0018e50:	50                   	push   eax
c0018e51:	e8 b3 ff ff ff       	call   c0018e09 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0018e56:	83 c4 14             	add    esp,0x14
c0018e59:	c3                   	ret    

c0018e5a <Vm::fpuGetReg(int)>:
c0018e5a:	83 ec 0c             	sub    esp,0xc
c0018e5d:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0018e62:	76 10                	jbe    c0018e74 <Vm::fpuGetReg(int)+0x1a>
c0018e64:	83 ec 0c             	sub    esp,0xc
c0018e67:	68 62 56 02 c0       	push   0xc0025662
c0018e6c:	e8 96 af ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0018e71:	83 c4 10             	add    esp,0x10
c0018e74:	a0 61 a9 02 c0       	mov    al,ds:0xc002a961
c0018e79:	b9 08 00 00 00       	mov    ecx,0x8
c0018e7e:	c0 e8 03             	shr    al,0x3
c0018e81:	83 e0 07             	and    eax,0x7
c0018e84:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0018e88:	99                   	cdq    
c0018e89:	f7 f9                	idiv   ecx
c0018e8b:	8b 04 d5 64 a9 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd569c]
c0018e92:	8b 14 d5 68 a9 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd5698]
c0018e99:	83 c4 0c             	add    esp,0xc
c0018e9c:	c3                   	ret    

c0018e9d <Vm::fpuSetReg(int, unsigned long long)>:
c0018e9d:	57                   	push   edi
c0018e9e:	56                   	push   esi
c0018e9f:	52                   	push   edx
c0018ea0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018ea4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0018ea8:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0018ead:	76 11                	jbe    c0018ec0 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0018eaf:	83 ec 0c             	sub    esp,0xc
c0018eb2:	68 75 56 02 c0       	push   0xc0025675
c0018eb7:	e8 4b af ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0018ebc:	83 c4 10             	add    esp,0x10
c0018ebf:	90                   	nop
c0018ec0:	a0 61 a9 02 c0       	mov    al,ds:0xc002a961
c0018ec5:	b9 08 00 00 00       	mov    ecx,0x8
c0018eca:	c0 e8 03             	shr    al,0x3
c0018ecd:	83 e0 07             	and    eax,0x7
c0018ed0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0018ed4:	99                   	cdq    
c0018ed5:	f7 f9                	idiv   ecx
c0018ed7:	89 34 d5 64 a9 02 c0 	mov    DWORD PTR [edx*8-0x3ffd569c],esi
c0018ede:	89 3c d5 68 a9 02 c0 	mov    DWORD PTR [edx*8-0x3ffd5698],edi
c0018ee5:	58                   	pop    eax
c0018ee6:	5e                   	pop    esi
c0018ee7:	5f                   	pop    edi
c0018ee8:	c3                   	ret    

c0018ee9 <Vm::fpuPush(unsigned long long)>:
c0018ee9:	a0 61 a9 02 c0       	mov    al,ds:0xc002a961
c0018eee:	c0 e8 03             	shr    al,0x3
c0018ef1:	83 e0 07             	and    eax,0x7
c0018ef4:	83 c0 07             	add    eax,0x7
c0018ef7:	88 c2                	mov    dl,al
c0018ef9:	83 e0 07             	and    eax,0x7
c0018efc:	83 e2 07             	and    edx,0x7
c0018eff:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0018f06:	8a 15 61 a9 02 c0    	mov    dl,BYTE PTR ds:0xc002a961
c0018f0c:	83 e2 c7             	and    edx,0xffffffc7
c0018f0f:	09 ca                	or     edx,ecx
c0018f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018f15:	88 15 61 a9 02 c0    	mov    BYTE PTR ds:0xc002a961,dl
c0018f1b:	89 0c c5 68 a9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd5698],ecx
c0018f22:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018f26:	89 14 c5 64 a9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd569c],edx
c0018f2d:	a1 a4 a9 02 c0       	mov    eax,ds:0xc002a9a4
c0018f32:	83 f8 08             	cmp    eax,0x8
c0018f35:	75 09                	jne    c0018f40 <Vm::fpuPush(unsigned long long)+0x57>
c0018f37:	80 0d 60 a9 02 c0 40 	or     BYTE PTR ds:0xc002a960,0x40
c0018f3e:	c3                   	ret    
c0018f3f:	90                   	nop
c0018f40:	40                   	inc    eax
c0018f41:	a3 a4 a9 02 c0       	mov    ds:0xc002a9a4,eax
c0018f46:	c3                   	ret    

c0018f47 <Vm::fpuPop()>:
c0018f47:	8a 0d 61 a9 02 c0    	mov    cl,BYTE PTR ds:0xc002a961
c0018f4d:	53                   	push   ebx
c0018f4e:	c0 e9 03             	shr    cl,0x3
c0018f51:	8a 1d 61 a9 02 c0    	mov    bl,BYTE PTR ds:0xc002a961
c0018f57:	83 e1 07             	and    ecx,0x7
c0018f5a:	83 e3 c7             	and    ebx,0xffffffc7
c0018f5d:	8b 04 cd 64 a9 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd569c]
c0018f64:	8b 14 cd 68 a9 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd5698]
c0018f6b:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c0018f72:	83 e1 38             	and    ecx,0x38
c0018f75:	09 d9                	or     ecx,ebx
c0018f77:	88 0d 61 a9 02 c0    	mov    BYTE PTR ds:0xc002a961,cl
c0018f7d:	8b 0d a4 a9 02 c0    	mov    ecx,DWORD PTR ds:0xc002a9a4
c0018f83:	85 c9                	test   ecx,ecx
c0018f85:	74 09                	je     c0018f90 <Vm::fpuPop()+0x49>
c0018f87:	49                   	dec    ecx
c0018f88:	89 0d a4 a9 02 c0    	mov    DWORD PTR ds:0xc002a9a4,ecx
c0018f8e:	eb 08                	jmp    c0018f98 <Vm::fpuPop()+0x51>
c0018f90:	80 0d 60 a9 02 c0 40 	or     BYTE PTR ds:0xc002a960,0x40
c0018f97:	90                   	nop
c0018f98:	5b                   	pop    ebx
c0018f99:	c3                   	ret    

c0018f9a <Vm::x87Handler(regs*)>:
c0018f9a:	55                   	push   ebp
c0018f9b:	57                   	push   edi
c0018f9c:	56                   	push   esi
c0018f9d:	53                   	push   ebx
c0018f9e:	83 ec 1c             	sub    esp,0x1c
c0018fa1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018fa5:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c0018faa:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0018fad:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0018fb5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0018fb9:	50                   	push   eax
c0018fba:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0018fbe:	50                   	push   eax
c0018fbf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018fc3:	50                   	push   eax
c0018fc4:	53                   	push   ebx
c0018fc5:	e8 56 a5 ff ff       	call   c0013520 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0018fca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0018fcd:	83 c4 10             	add    esp,0x10
c0018fd0:	89 c6                	mov    esi,eax
c0018fd2:	80 fa d9             	cmp    dl,0xd9
c0018fd5:	0f 85 79 01 00 00    	jne    c0019154 <Vm::x87Handler(regs*)+0x1ba>
c0018fdb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0018fdf:	8d 50 20             	lea    edx,[eax+0x20]
c0018fe2:	80 fa 0e             	cmp    dl,0xe
c0018fe5:	0f 87 a5 00 00 00    	ja     c0019090 <Vm::x87Handler(regs*)+0xf6>
c0018feb:	0f b6 d2             	movzx  edx,dl
c0018fee:	ff 24 95 88 56 02 c0 	jmp    DWORD PTR [edx*4-0x3ffda978]
c0018ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ff8:	e8 de fc ff ff       	call   c0018cdb <Vm::fpuGet0()>
c0018ffd:	eb 09                	jmp    c0019008 <Vm::x87Handler(regs*)+0x6e>
c0018fff:	90                   	nop
c0019000:	e8 db fc ff ff       	call   c0018ce0 <Vm::fpuGet1()>
c0019005:	8d 76 00             	lea    esi,[esi+0x0]
c0019008:	57                   	push   edi
c0019009:	57                   	push   edi
c001900a:	66 90                	xchg   ax,ax
c001900c:	52                   	push   edx
c001900d:	50                   	push   eax
c001900e:	e8 d6 fe ff ff       	call   c0018ee9 <Vm::fpuPush(unsigned long long)>
c0019013:	90                   	nop
c0019014:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019018:	83 c4 10             	add    esp,0x10
c001901b:	90                   	nop
c001901c:	b0 01                	mov    al,0x1
c001901e:	e9 89 0a 00 00       	jmp    c0019aac <Vm::x87Handler(regs*)+0xb12>
c0019023:	90                   	nop
c0019024:	83 ec 0c             	sub    esp,0xc
c0019027:	6a 00                	push   0x0
c0019029:	e8 2c fe ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c001902e:	59                   	pop    ecx
c001902f:	5e                   	pop    esi
c0019030:	52                   	push   edx
c0019031:	50                   	push   eax
c0019032:	e8 b3 fd ff ff       	call   c0018dea <Vm::fpuChs(unsigned long long)>
c0019037:	eb 17                	jmp    c0019050 <Vm::x87Handler(regs*)+0xb6>
c0019039:	8d 76 00             	lea    esi,[esi+0x0]
c001903c:	83 ec 0c             	sub    esp,0xc
c001903f:	6a 00                	push   0x0
c0019041:	e8 14 fe ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019046:	5f                   	pop    edi
c0019047:	5d                   	pop    ebp
c0019048:	52                   	push   edx
c0019049:	50                   	push   eax
c001904a:	e8 92 fd ff ff       	call   c0018de1 <Vm::fpuAbs(unsigned long long)>
c001904f:	90                   	nop
c0019050:	83 c4 0c             	add    esp,0xc
c0019053:	90                   	nop
c0019054:	52                   	push   edx
c0019055:	50                   	push   eax
c0019056:	66 90                	xchg   ax,ax
c0019058:	6a 00                	push   0x0
c001905a:	66 90                	xchg   ax,ax
c001905c:	e8 3c fe ff ff       	call   c0018e9d <Vm::fpuSetReg(int, unsigned long long)>
c0019061:	eb b1                	jmp    c0019014 <Vm::x87Handler(regs*)+0x7a>
c0019063:	90                   	nop
c0019064:	e8 b7 fc ff ff       	call   c0018d20 <Vm::fpuGetLog210()>
c0019069:	eb 9d                	jmp    c0019008 <Vm::x87Handler(regs*)+0x6e>
c001906b:	90                   	nop
c001906c:	e8 7f fc ff ff       	call   c0018cf0 <Vm::fpuGetLog2E()>
c0019071:	eb 95                	jmp    c0019008 <Vm::x87Handler(regs*)+0x6e>
c0019073:	90                   	nop
c0019074:	e8 6f fc ff ff       	call   c0018ce8 <Vm::fpuGetPi()>
c0019079:	eb 8d                	jmp    c0019008 <Vm::x87Handler(regs*)+0x6e>
c001907b:	90                   	nop
c001907c:	e8 b7 fc ff ff       	call   c0018d38 <Vm::fpuGetLog102()>
c0019081:	eb 85                	jmp    c0019008 <Vm::x87Handler(regs*)+0x6e>
c0019083:	90                   	nop
c0019084:	e8 7f fc ff ff       	call   c0018d08 <Vm::fpuGetLogE2()>
c0019089:	e9 7a ff ff ff       	jmp    c0019008 <Vm::x87Handler(regs*)+0x6e>
c001908e:	66 90                	xchg   ax,ax
c0019090:	8d 50 40             	lea    edx,[eax+0x40]
c0019093:	80 fa 07             	cmp    dl,0x7
c0019096:	77 18                	ja     c00190b0 <Vm::x87Handler(regs*)+0x116>
c0019098:	83 ec 0c             	sub    esp,0xc
c001909b:	2d c0 00 00 00       	sub    eax,0xc0
c00190a0:	50                   	push   eax
c00190a1:	e8 b4 fd ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00190a6:	59                   	pop    ecx
c00190a7:	5e                   	pop    esi
c00190a8:	e9 5f ff ff ff       	jmp    c001900c <Vm::x87Handler(regs*)+0x72>
c00190ad:	8d 76 00             	lea    esi,[esi+0x0]
c00190b0:	8d 50 38             	lea    edx,[eax+0x38]
c00190b3:	80 fa 07             	cmp    dl,0x7
c00190b6:	77 3c                	ja     c00190f4 <Vm::x87Handler(regs*)+0x15a>
c00190b8:	83 ec 0c             	sub    esp,0xc
c00190bb:	2d c8 00 00 00       	sub    eax,0xc8
c00190c0:	50                   	push   eax
c00190c1:	e8 94 fd ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00190c6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00190cd:	89 c6                	mov    esi,eax
c00190cf:	89 d7                	mov    edi,edx
c00190d1:	e8 84 fd ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00190d6:	83 c4 0c             	add    esp,0xc
c00190d9:	52                   	push   edx
c00190da:	50                   	push   eax
c00190db:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00190df:	2d c8 00 00 00       	sub    eax,0xc8
c00190e4:	50                   	push   eax
c00190e5:	e8 b3 fd ff ff       	call   c0018e9d <Vm::fpuSetReg(int, unsigned long long)>
c00190ea:	83 c4 0c             	add    esp,0xc
c00190ed:	57                   	push   edi
c00190ee:	56                   	push   esi
c00190ef:	e9 64 ff ff ff       	jmp    c0019058 <Vm::x87Handler(regs*)+0xbe>
c00190f4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00190f8:	84 d2                	test   dl,dl
c00190fa:	75 10                	jne    c001910c <Vm::x87Handler(regs*)+0x172>
c00190fc:	83 ec 0c             	sub    esp,0xc
c00190ff:	ff 36                	push   DWORD PTR [esi]
c0019101:	e8 8d fa ff ff       	call   c0018b93 <Vm::fpu32ToInternal(unsigned int)>
c0019106:	e9 c9 00 00 00       	jmp    c00191d4 <Vm::x87Handler(regs*)+0x23a>
c001910b:	90                   	nop
c001910c:	80 fa 03             	cmp    dl,0x3
c001910f:	75 13                	jne    c0019124 <Vm::x87Handler(regs*)+0x18a>
c0019111:	e8 31 fe ff ff       	call   c0018f47 <Vm::fpuPop()>
c0019116:	55                   	push   ebp
c0019117:	55                   	push   ebp
c0019118:	52                   	push   edx
c0019119:	50                   	push   eax
c001911a:	e8 0d fa ff ff       	call   c0018b2c <Vm::fpuInternalTo32(unsigned long long)>
c001911f:	e9 90 00 00 00       	jmp    c00191b4 <Vm::x87Handler(regs*)+0x21a>
c0019124:	80 fa 05             	cmp    dl,0x5
c0019127:	75 0f                	jne    c0019138 <Vm::x87Handler(regs*)+0x19e>
c0019129:	66 8b 06             	mov    ax,WORD PTR [esi]
c001912c:	66 a3 62 a9 02 c0    	mov    ds:0xc002a962,ax
c0019132:	e9 ed 00 00 00       	jmp    c0019224 <Vm::x87Handler(regs*)+0x28a>
c0019137:	90                   	nop
c0019138:	31 c0                	xor    eax,eax
c001913a:	80 fa 07             	cmp    dl,0x7
c001913d:	0f 85 69 09 00 00    	jne    c0019aac <Vm::x87Handler(regs*)+0xb12>
c0019143:	66 a1 62 a9 02 c0    	mov    ax,ds:0xc002a962
c0019149:	66 89 06             	mov    WORD PTR [esi],ax
c001914c:	e9 d3 00 00 00       	jmp    c0019224 <Vm::x87Handler(regs*)+0x28a>
c0019151:	8d 76 00             	lea    esi,[esi+0x0]
c0019154:	80 fa d8             	cmp    dl,0xd8
c0019157:	0f 84 d3 00 00 00    	je     c0019230 <Vm::x87Handler(regs*)+0x296>
c001915d:	80 fa dc             	cmp    dl,0xdc
c0019160:	0f 84 2a 02 00 00    	je     c0019390 <Vm::x87Handler(regs*)+0x3f6>
c0019166:	80 fa de             	cmp    dl,0xde
c0019169:	0f 84 f1 02 00 00    	je     c0019460 <Vm::x87Handler(regs*)+0x4c6>
c001916f:	80 fa dd             	cmp    dl,0xdd
c0019172:	0f 84 94 04 00 00    	je     c001960c <Vm::x87Handler(regs*)+0x672>
c0019178:	80 fa da             	cmp    dl,0xda
c001917b:	0f 84 5f 05 00 00    	je     c00196e0 <Vm::x87Handler(regs*)+0x746>
c0019181:	80 fa df             	cmp    dl,0xdf
c0019184:	0f 84 aa 05 00 00    	je     c0019734 <Vm::x87Handler(regs*)+0x79a>
c001918a:	31 c0                	xor    eax,eax
c001918c:	80 fa db             	cmp    dl,0xdb
c001918f:	0f 85 17 09 00 00    	jne    c0019aac <Vm::x87Handler(regs*)+0xb12>
c0019195:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019199:	80 fa 03             	cmp    dl,0x3
c001919c:	0f 85 c2 06 00 00    	jne    c0019864 <Vm::x87Handler(regs*)+0x8ca>
c00191a2:	e8 a0 fd ff ff       	call   c0018f47 <Vm::fpuPop()>
c00191a7:	55                   	push   ebp
c00191a8:	55                   	push   ebp
c00191a9:	8d 76 00             	lea    esi,[esi+0x0]
c00191ac:	52                   	push   edx
c00191ad:	50                   	push   eax
c00191ae:	e8 2e fa ff ff       	call   c0018be1 <Vm::fpuFloatToLong(unsigned long long)>
c00191b3:	90                   	nop
c00191b4:	83 c4 10             	add    esp,0x10
c00191b7:	89 06                	mov    DWORD PTR [esi],eax
c00191b9:	eb 69                	jmp    c0019224 <Vm::x87Handler(regs*)+0x28a>
c00191bb:	90                   	nop
c00191bc:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00191c0:	84 d2                	test   dl,dl
c00191c2:	0f 85 2c 06 00 00    	jne    c00197f4 <Vm::x87Handler(regs*)+0x85a>
c00191c8:	57                   	push   edi
c00191c9:	57                   	push   edi
c00191ca:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00191cd:	ff 36                	push   DWORD PTR [esi]
c00191cf:	e8 04 fa ff ff       	call   c0018bd8 <Vm::fpu64ToInternal(unsigned long long)>
c00191d4:	5e                   	pop    esi
c00191d5:	5f                   	pop    edi
c00191d6:	52                   	push   edx
c00191d7:	50                   	push   eax
c00191d8:	e8 0c fd ff ff       	call   c0018ee9 <Vm::fpuPush(unsigned long long)>
c00191dd:	8d 76 00             	lea    esi,[esi+0x0]
c00191e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00191e4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00191e7:	e9 2c fe ff ff       	jmp    c0019018 <Vm::x87Handler(regs*)+0x7e>
c00191ec:	80 fa 03             	cmp    dl,0x3
c00191ef:	0f 85 2b 07 00 00    	jne    c0019920 <Vm::x87Handler(regs*)+0x986>
c00191f5:	57                   	push   edi
c00191f6:	57                   	push   edi
c00191f7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00191fa:	ff 36                	push   DWORD PTR [esi]
c00191fc:	e8 d7 f9 ff ff       	call   c0018bd8 <Vm::fpu64ToInternal(unsigned long long)>
c0019201:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019208:	89 c6                	mov    esi,eax
c001920a:	89 d7                	mov    edi,edx
c001920c:	e8 49 fc ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019211:	57                   	push   edi
c0019212:	56                   	push   esi
c0019213:	52                   	push   edx
c0019214:	50                   	push   eax
c0019215:	e8 60 fb ff ff       	call   c0018d7a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001921a:	83 c4 20             	add    esp,0x20
c001921d:	e8 25 fd ff ff       	call   c0018f47 <Vm::fpuPop()>
c0019222:	66 90                	xchg   ax,ax
c0019224:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019228:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001922b:	e9 ec fd ff ff       	jmp    c001901c <Vm::x87Handler(regs*)+0x82>
c0019230:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019234:	8d 50 40             	lea    edx,[eax+0x40]
c0019237:	80 fa 07             	cmp    dl,0x7
c001923a:	77 2c                	ja     c0019268 <Vm::x87Handler(regs*)+0x2ce>
c001923c:	83 ec 0c             	sub    esp,0xc
c001923f:	2d c0 00 00 00       	sub    eax,0xc0
c0019244:	50                   	push   eax
c0019245:	e8 10 fc ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c001924a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019251:	89 c6                	mov    esi,eax
c0019253:	89 d7                	mov    edi,edx
c0019255:	e8 00 fc ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c001925a:	57                   	push   edi
c001925b:	56                   	push   esi
c001925c:	52                   	push   edx
c001925d:	50                   	push   eax
c001925e:	e8 6d fb ff ff       	call   c0018dd0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019263:	eb 33                	jmp    c0019298 <Vm::x87Handler(regs*)+0x2fe>
c0019265:	8d 76 00             	lea    esi,[esi+0x0]
c0019268:	8d 50 38             	lea    edx,[eax+0x38]
c001926b:	80 fa 07             	cmp    dl,0x7
c001926e:	77 30                	ja     c00192a0 <Vm::x87Handler(regs*)+0x306>
c0019270:	83 ec 0c             	sub    esp,0xc
c0019273:	2d c8 00 00 00       	sub    eax,0xc8
c0019278:	50                   	push   eax
c0019279:	e8 dc fb ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c001927e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019285:	89 c6                	mov    esi,eax
c0019287:	89 d7                	mov    edi,edx
c0019289:	e8 cc fb ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c001928e:	57                   	push   edi
c001928f:	56                   	push   esi
c0019290:	52                   	push   edx
c0019291:	50                   	push   eax
c0019292:	e8 72 fb ff ff       	call   c0018e09 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019297:	90                   	nop
c0019298:	83 c4 1c             	add    esp,0x1c
c001929b:	e9 b4 fd ff ff       	jmp    c0019054 <Vm::x87Handler(regs*)+0xba>
c00192a0:	8d 50 30             	lea    edx,[eax+0x30]
c00192a3:	80 fa 07             	cmp    dl,0x7
c00192a6:	77 10                	ja     c00192b8 <Vm::x87Handler(regs*)+0x31e>
c00192a8:	83 ec 0c             	sub    esp,0xc
c00192ab:	2d d0 00 00 00       	sub    eax,0xd0
c00192b0:	e9 c3 03 00 00       	jmp    c0019678 <Vm::x87Handler(regs*)+0x6de>
c00192b5:	8d 76 00             	lea    esi,[esi+0x0]
c00192b8:	8d 50 28             	lea    edx,[eax+0x28]
c00192bb:	80 fa 07             	cmp    dl,0x7
c00192be:	77 10                	ja     c00192d0 <Vm::x87Handler(regs*)+0x336>
c00192c0:	83 ec 0c             	sub    esp,0xc
c00192c3:	2d d8 00 00 00       	sub    eax,0xd8
c00192c8:	e9 e7 03 00 00       	jmp    c00196b4 <Vm::x87Handler(regs*)+0x71a>
c00192cd:	8d 76 00             	lea    esi,[esi+0x0]
c00192d0:	8d 50 20             	lea    edx,[eax+0x20]
c00192d3:	80 fa 07             	cmp    dl,0x7
c00192d6:	77 1c                	ja     c00192f4 <Vm::x87Handler(regs*)+0x35a>
c00192d8:	83 ec 0c             	sub    esp,0xc
c00192db:	2d e0 00 00 00       	sub    eax,0xe0
c00192e0:	50                   	push   eax
c00192e1:	e8 74 fb ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00192e6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00192ed:	89 c6                	mov    esi,eax
c00192ef:	89 d7                	mov    edi,edx
c00192f1:	eb 25                	jmp    c0019318 <Vm::x87Handler(regs*)+0x37e>
c00192f3:	90                   	nop
c00192f4:	8d 50 18             	lea    edx,[eax+0x18]
c00192f7:	80 fa 07             	cmp    dl,0x7
c00192fa:	77 30                	ja     c001932c <Vm::x87Handler(regs*)+0x392>
c00192fc:	83 ec 0c             	sub    esp,0xc
c00192ff:	6a 00                	push   0x0
c0019301:	e8 54 fb ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019306:	89 c6                	mov    esi,eax
c0019308:	89 d7                	mov    edi,edx
c001930a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001930e:	2d e8 00 00 00       	sub    eax,0xe8
c0019313:	89 04 24             	mov    DWORD PTR [esp],eax
c0019316:	66 90                	xchg   ax,ax
c0019318:	e8 3d fb ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c001931d:	57                   	push   edi
c001931e:	56                   	push   esi
c001931f:	52                   	push   edx
c0019320:	50                   	push   eax
c0019321:	e8 d4 fa ff ff       	call   c0018dfa <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019326:	e9 6d ff ff ff       	jmp    c0019298 <Vm::x87Handler(regs*)+0x2fe>
c001932b:	90                   	nop
c001932c:	8d 50 10             	lea    edx,[eax+0x10]
c001932f:	80 fa 07             	cmp    dl,0x7
c0019332:	77 1c                	ja     c0019350 <Vm::x87Handler(regs*)+0x3b6>
c0019334:	83 ec 0c             	sub    esp,0xc
c0019337:	2d f0 00 00 00       	sub    eax,0xf0
c001933c:	50                   	push   eax
c001933d:	e8 18 fb ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019342:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019349:	89 c6                	mov    esi,eax
c001934b:	89 d7                	mov    edi,edx
c001934d:	eb 25                	jmp    c0019374 <Vm::x87Handler(regs*)+0x3da>
c001934f:	90                   	nop
c0019350:	3c f7                	cmp    al,0xf7
c0019352:	0f 86 00 04 00 00    	jbe    c0019758 <Vm::x87Handler(regs*)+0x7be>
c0019358:	83 ec 0c             	sub    esp,0xc
c001935b:	6a 00                	push   0x0
c001935d:	e8 f8 fa ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019362:	89 c6                	mov    esi,eax
c0019364:	89 d7                	mov    edi,edx
c0019366:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001936a:	2d f8 00 00 00       	sub    eax,0xf8
c001936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019372:	66 90                	xchg   ax,ax
c0019374:	e8 e1 fa ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019379:	57                   	push   edi
c001937a:	56                   	push   esi
c001937b:	52                   	push   edx
c001937c:	50                   	push   eax
c001937d:	e8 a6 fa ff ff       	call   c0018e28 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019382:	83 c4 1c             	add    esp,0x1c
c0019385:	52                   	push   edx
c0019386:	50                   	push   eax
c0019387:	6a 00                	push   0x0
c0019389:	e9 6a 02 00 00       	jmp    c00195f8 <Vm::x87Handler(regs*)+0x65e>
c001938e:	66 90                	xchg   ax,ax
c0019390:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019394:	8d 50 40             	lea    edx,[eax+0x40]
c0019397:	80 fa 07             	cmp    dl,0x7
c001939a:	77 38                	ja     c00193d4 <Vm::x87Handler(regs*)+0x43a>
c001939c:	83 ec 0c             	sub    esp,0xc
c001939f:	2d c0 00 00 00       	sub    eax,0xc0
c00193a4:	50                   	push   eax
c00193a5:	e8 b0 fa ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00193aa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00193b1:	89 c6                	mov    esi,eax
c00193b3:	89 d7                	mov    edi,edx
c00193b5:	e8 a0 fa ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00193ba:	57                   	push   edi
c00193bb:	56                   	push   esi
c00193bc:	52                   	push   edx
c00193bd:	50                   	push   eax
c00193be:	e8 0d fa ff ff       	call   c0018dd0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00193c3:	83 c4 1c             	add    esp,0x1c
c00193c6:	52                   	push   edx
c00193c7:	50                   	push   eax
c00193c8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00193cc:	2d c0 00 00 00       	sub    eax,0xc0
c00193d1:	eb 41                	jmp    c0019414 <Vm::x87Handler(regs*)+0x47a>
c00193d3:	90                   	nop
c00193d4:	8d 50 38             	lea    edx,[eax+0x38]
c00193d7:	80 fa 07             	cmp    dl,0x7
c00193da:	77 40                	ja     c001941c <Vm::x87Handler(regs*)+0x482>
c00193dc:	83 ec 0c             	sub    esp,0xc
c00193df:	2d c8 00 00 00       	sub    eax,0xc8
c00193e4:	50                   	push   eax
c00193e5:	e8 70 fa ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00193ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00193f1:	89 c6                	mov    esi,eax
c00193f3:	89 d7                	mov    edi,edx
c00193f5:	e8 60 fa ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00193fa:	57                   	push   edi
c00193fb:	56                   	push   esi
c00193fc:	52                   	push   edx
c00193fd:	50                   	push   eax
c00193fe:	e8 06 fa ff ff       	call   c0018e09 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019403:	83 c4 1c             	add    esp,0x1c
c0019406:	52                   	push   edx
c0019407:	50                   	push   eax
c0019408:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001940c:	2d c8 00 00 00       	sub    eax,0xc8
c0019411:	8d 76 00             	lea    esi,[esi+0x0]
c0019414:	50                   	push   eax
c0019415:	e9 42 fc ff ff       	jmp    c001905c <Vm::x87Handler(regs*)+0xc2>
c001941a:	66 90                	xchg   ax,ax
c001941c:	83 c0 18             	add    eax,0x18
c001941f:	3c 07                	cmp    al,0x7
c0019421:	0f 87 6d 04 00 00    	ja     c0019894 <Vm::x87Handler(regs*)+0x8fa>
c0019427:	83 ec 0c             	sub    esp,0xc
c001942a:	6a 00                	push   0x0
c001942c:	e8 29 fa ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019431:	89 c6                	mov    esi,eax
c0019433:	89 d7                	mov    edi,edx
c0019435:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019439:	2d e8 00 00 00       	sub    eax,0xe8
c001943e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019441:	e8 14 fa ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019446:	57                   	push   edi
c0019447:	56                   	push   esi
c0019448:	52                   	push   edx
c0019449:	50                   	push   eax
c001944a:	e8 ab f9 ff ff       	call   c0018dfa <Vm::fpuSub(unsigned long long, unsigned long long)>
c001944f:	83 c4 1c             	add    esp,0x1c
c0019452:	52                   	push   edx
c0019453:	50                   	push   eax
c0019454:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019458:	2d e8 00 00 00       	sub    eax,0xe8
c001945d:	eb b5                	jmp    c0019414 <Vm::x87Handler(regs*)+0x47a>
c001945f:	90                   	nop
c0019460:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019464:	8d 50 40             	lea    edx,[eax+0x40]
c0019467:	80 fa 07             	cmp    dl,0x7
c001946a:	77 3c                	ja     c00194a8 <Vm::x87Handler(regs*)+0x50e>
c001946c:	83 ec 0c             	sub    esp,0xc
c001946f:	2d c0 00 00 00       	sub    eax,0xc0
c0019474:	50                   	push   eax
c0019475:	e8 e0 f9 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c001947a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019481:	89 c6                	mov    esi,eax
c0019483:	89 d7                	mov    edi,edx
c0019485:	e8 d0 f9 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c001948a:	57                   	push   edi
c001948b:	56                   	push   esi
c001948c:	52                   	push   edx
c001948d:	50                   	push   eax
c001948e:	e8 3d f9 ff ff       	call   c0018dd0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019493:	83 c4 1c             	add    esp,0x1c
c0019496:	52                   	push   edx
c0019497:	50                   	push   eax
c0019498:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001949c:	2d c0 00 00 00       	sub    eax,0xc0
c00194a1:	e9 b2 01 00 00       	jmp    c0019658 <Vm::x87Handler(regs*)+0x6be>
c00194a6:	66 90                	xchg   ax,ax
c00194a8:	8d 50 20             	lea    edx,[eax+0x20]
c00194ab:	80 fa 07             	cmp    dl,0x7
c00194ae:	77 3c                	ja     c00194ec <Vm::x87Handler(regs*)+0x552>
c00194b0:	83 ec 0c             	sub    esp,0xc
c00194b3:	2d e0 00 00 00       	sub    eax,0xe0
c00194b8:	50                   	push   eax
c00194b9:	e8 9c f9 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00194be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00194c5:	89 c6                	mov    esi,eax
c00194c7:	89 d7                	mov    edi,edx
c00194c9:	e8 8c f9 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00194ce:	57                   	push   edi
c00194cf:	56                   	push   esi
c00194d0:	52                   	push   edx
c00194d1:	50                   	push   eax
c00194d2:	e8 23 f9 ff ff       	call   c0018dfa <Vm::fpuSub(unsigned long long, unsigned long long)>
c00194d7:	83 c4 1c             	add    esp,0x1c
c00194da:	52                   	push   edx
c00194db:	50                   	push   eax
c00194dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00194e0:	2d e0 00 00 00       	sub    eax,0xe0
c00194e5:	e9 6e 01 00 00       	jmp    c0019658 <Vm::x87Handler(regs*)+0x6be>
c00194ea:	66 90                	xchg   ax,ax
c00194ec:	8d 50 18             	lea    edx,[eax+0x18]
c00194ef:	80 fa 07             	cmp    dl,0x7
c00194f2:	77 3c                	ja     c0019530 <Vm::x87Handler(regs*)+0x596>
c00194f4:	83 ec 0c             	sub    esp,0xc
c00194f7:	6a 00                	push   0x0
c00194f9:	e8 5c f9 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00194fe:	89 c6                	mov    esi,eax
c0019500:	89 d7                	mov    edi,edx
c0019502:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019506:	2d e8 00 00 00       	sub    eax,0xe8
c001950b:	89 04 24             	mov    DWORD PTR [esp],eax
c001950e:	e8 47 f9 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019513:	57                   	push   edi
c0019514:	56                   	push   esi
c0019515:	52                   	push   edx
c0019516:	50                   	push   eax
c0019517:	e8 de f8 ff ff       	call   c0018dfa <Vm::fpuSub(unsigned long long, unsigned long long)>
c001951c:	83 c4 1c             	add    esp,0x1c
c001951f:	52                   	push   edx
c0019520:	50                   	push   eax
c0019521:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019525:	2d e8 00 00 00       	sub    eax,0xe8
c001952a:	e9 29 01 00 00       	jmp    c0019658 <Vm::x87Handler(regs*)+0x6be>
c001952f:	90                   	nop
c0019530:	8d 50 38             	lea    edx,[eax+0x38]
c0019533:	80 fa 07             	cmp    dl,0x7
c0019536:	77 3c                	ja     c0019574 <Vm::x87Handler(regs*)+0x5da>
c0019538:	83 ec 0c             	sub    esp,0xc
c001953b:	2d c8 00 00 00       	sub    eax,0xc8
c0019540:	50                   	push   eax
c0019541:	e8 14 f9 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019546:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001954d:	89 c6                	mov    esi,eax
c001954f:	89 d7                	mov    edi,edx
c0019551:	e8 04 f9 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019556:	57                   	push   edi
c0019557:	56                   	push   esi
c0019558:	52                   	push   edx
c0019559:	50                   	push   eax
c001955a:	e8 aa f8 ff ff       	call   c0018e09 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001955f:	83 c4 1c             	add    esp,0x1c
c0019562:	52                   	push   edx
c0019563:	50                   	push   eax
c0019564:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019568:	2d c8 00 00 00       	sub    eax,0xc8
c001956d:	e9 82 00 00 00       	jmp    c00195f4 <Vm::x87Handler(regs*)+0x65a>
c0019572:	66 90                	xchg   ax,ax
c0019574:	3c f7                	cmp    al,0xf7
c0019576:	76 38                	jbe    c00195b0 <Vm::x87Handler(regs*)+0x616>
c0019578:	83 ec 0c             	sub    esp,0xc
c001957b:	6a 00                	push   0x0
c001957d:	e8 d8 f8 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019582:	89 c6                	mov    esi,eax
c0019584:	89 d7                	mov    edi,edx
c0019586:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001958a:	2d f8 00 00 00       	sub    eax,0xf8
c001958f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019592:	e8 c3 f8 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019597:	57                   	push   edi
c0019598:	56                   	push   esi
c0019599:	52                   	push   edx
c001959a:	50                   	push   eax
c001959b:	e8 88 f8 ff ff       	call   c0018e28 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00195a0:	83 c4 1c             	add    esp,0x1c
c00195a3:	52                   	push   edx
c00195a4:	50                   	push   eax
c00195a5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00195a9:	2d f8 00 00 00       	sub    eax,0xf8
c00195ae:	eb 44                	jmp    c00195f4 <Vm::x87Handler(regs*)+0x65a>
c00195b0:	8d 50 10             	lea    edx,[eax+0x10]
c00195b3:	80 fa 07             	cmp    dl,0x7
c00195b6:	0f 87 6c 01 00 00    	ja     c0019728 <Vm::x87Handler(regs*)+0x78e>
c00195bc:	83 ec 0c             	sub    esp,0xc
c00195bf:	2d f0 00 00 00       	sub    eax,0xf0
c00195c4:	50                   	push   eax
c00195c5:	e8 90 f8 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00195ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00195d1:	89 c6                	mov    esi,eax
c00195d3:	89 d7                	mov    edi,edx
c00195d5:	e8 80 f8 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00195da:	57                   	push   edi
c00195db:	56                   	push   esi
c00195dc:	52                   	push   edx
c00195dd:	50                   	push   eax
c00195de:	e8 45 f8 ff ff       	call   c0018e28 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00195e3:	83 c4 1c             	add    esp,0x1c
c00195e6:	52                   	push   edx
c00195e7:	50                   	push   eax
c00195e8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00195ec:	2d f0 00 00 00       	sub    eax,0xf0
c00195f1:	8d 76 00             	lea    esi,[esi+0x0]
c00195f4:	50                   	push   eax
c00195f5:	8d 76 00             	lea    esi,[esi+0x0]
c00195f8:	e8 a0 f8 ff ff       	call   c0018e9d <Vm::fpuSetReg(int, unsigned long long)>
c00195fd:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019601:	e8 41 f9 ff ff       	call   c0018f47 <Vm::fpuPop()>
c0019606:	e9 0d fa ff ff       	jmp    c0019018 <Vm::x87Handler(regs*)+0x7e>
c001960b:	90                   	nop
c001960c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019610:	8d 50 30             	lea    edx,[eax+0x30]
c0019613:	80 fa 07             	cmp    dl,0x7
c0019616:	77 20                	ja     c0019638 <Vm::x87Handler(regs*)+0x69e>
c0019618:	83 ec 0c             	sub    esp,0xc
c001961b:	6a 00                	push   0x0
c001961d:	e8 38 f8 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019622:	83 c4 0c             	add    esp,0xc
c0019625:	52                   	push   edx
c0019626:	50                   	push   eax
c0019627:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001962b:	2d d0 00 00 00       	sub    eax,0xd0
c0019630:	e9 df fd ff ff       	jmp    c0019414 <Vm::x87Handler(regs*)+0x47a>
c0019635:	8d 76 00             	lea    esi,[esi+0x0]
c0019638:	8d 50 28             	lea    edx,[eax+0x28]
c001963b:	80 fa 07             	cmp    dl,0x7
c001963e:	77 28                	ja     c0019668 <Vm::x87Handler(regs*)+0x6ce>
c0019640:	83 ec 0c             	sub    esp,0xc
c0019643:	6a 00                	push   0x0
c0019645:	e8 10 f8 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c001964a:	83 c4 0c             	add    esp,0xc
c001964d:	52                   	push   edx
c001964e:	50                   	push   eax
c001964f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019653:	2d d8 00 00 00       	sub    eax,0xd8
c0019658:	50                   	push   eax
c0019659:	e8 3f f8 ff ff       	call   c0018e9d <Vm::fpuSetReg(int, unsigned long long)>
c001965e:	e8 e4 f8 ff ff       	call   c0018f47 <Vm::fpuPop()>
c0019663:	e9 ac f9 ff ff       	jmp    c0019014 <Vm::x87Handler(regs*)+0x7a>
c0019668:	8d 50 20             	lea    edx,[eax+0x20]
c001966b:	80 fa 07             	cmp    dl,0x7
c001966e:	77 30                	ja     c00196a0 <Vm::x87Handler(regs*)+0x706>
c0019670:	83 ec 0c             	sub    esp,0xc
c0019673:	2d e0 00 00 00       	sub    eax,0xe0
c0019678:	50                   	push   eax
c0019679:	e8 dc f7 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c001967e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019685:	89 c6                	mov    esi,eax
c0019687:	89 d7                	mov    edi,edx
c0019689:	e8 cc f7 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c001968e:	57                   	push   edi
c001968f:	56                   	push   esi
c0019690:	52                   	push   edx
c0019691:	50                   	push   eax
c0019692:	e8 e3 f6 ff ff       	call   c0018d7a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019697:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001969b:	e9 78 02 00 00       	jmp    c0019918 <Vm::x87Handler(regs*)+0x97e>
c00196a0:	8d 50 18             	lea    edx,[eax+0x18]
c00196a3:	80 fa 07             	cmp    dl,0x7
c00196a6:	0f 87 10 fb ff ff    	ja     c00191bc <Vm::x87Handler(regs*)+0x222>
c00196ac:	83 ec 0c             	sub    esp,0xc
c00196af:	2d e8 00 00 00       	sub    eax,0xe8
c00196b4:	50                   	push   eax
c00196b5:	e8 a0 f7 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00196ba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00196c1:	89 c6                	mov    esi,eax
c00196c3:	89 d7                	mov    edi,edx
c00196c5:	e8 90 f7 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00196ca:	57                   	push   edi
c00196cb:	56                   	push   esi
c00196cc:	52                   	push   edx
c00196cd:	50                   	push   eax
c00196ce:	e8 a7 f6 ff ff       	call   c0018d7a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00196d3:	83 c4 20             	add    esp,0x20
c00196d6:	e8 6c f8 ff ff       	call   c0018f47 <Vm::fpuPop()>
c00196db:	eb 6f                	jmp    c001974c <Vm::x87Handler(regs*)+0x7b2>
c00196dd:	8d 76 00             	lea    esi,[esi+0x0]
c00196e0:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00196e4:	0f 85 22 01 00 00    	jne    c001980c <Vm::x87Handler(regs*)+0x872>
c00196ea:	66 90                	xchg   ax,ax
c00196ec:	83 ec 0c             	sub    esp,0xc
c00196ef:	6a 01                	push   0x1
c00196f1:	e8 64 f7 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00196f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00196fd:	89 c6                	mov    esi,eax
c00196ff:	89 d7                	mov    edi,edx
c0019701:	e8 54 f7 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019706:	57                   	push   edi
c0019707:	56                   	push   esi
c0019708:	52                   	push   edx
c0019709:	50                   	push   eax
c001970a:	e8 6b f6 ff ff       	call   c0018d7a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001970f:	83 c4 20             	add    esp,0x20
c0019712:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019716:	e8 2c f8 ff ff       	call   c0018f47 <Vm::fpuPop()>
c001971b:	e8 27 f8 ff ff       	call   c0018f47 <Vm::fpuPop()>
c0019720:	e9 f7 f8 ff ff       	jmp    c001901c <Vm::x87Handler(regs*)+0x82>
c0019725:	8d 76 00             	lea    esi,[esi+0x0]
c0019728:	3c d9                	cmp    al,0xd9
c001972a:	0f 85 e8 02 00 00    	jne    c0019a18 <Vm::x87Handler(regs*)+0xa7e>
c0019730:	eb ba                	jmp    c00196ec <Vm::x87Handler(regs*)+0x752>
c0019732:	66 90                	xchg   ax,ax
c0019734:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0019738:	0f 85 2a 03 00 00    	jne    c0019a68 <Vm::x87Handler(regs*)+0xace>
c001973e:	0f b7 05 60 a9 02 c0 	movzx  eax,WORD PTR ds:0xc002a960
c0019745:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0019749:	8d 76 00             	lea    esi,[esi+0x0]
c001974c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019750:	e9 c7 f8 ff ff       	jmp    c001901c <Vm::x87Handler(regs*)+0x82>
c0019755:	8d 76 00             	lea    esi,[esi+0x0]
c0019758:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001975c:	84 d2                	test   dl,dl
c001975e:	75 10                	jne    c0019770 <Vm::x87Handler(regs*)+0x7d6>
c0019760:	83 ec 0c             	sub    esp,0xc
c0019763:	ff 36                	push   DWORD PTR [esi]
c0019765:	e8 29 f4 ff ff       	call   c0018b93 <Vm::fpu32ToInternal(unsigned int)>
c001976a:	e9 39 01 00 00       	jmp    c00198a8 <Vm::x87Handler(regs*)+0x90e>
c001976f:	90                   	nop
c0019770:	80 fa 01             	cmp    dl,0x1
c0019773:	75 0f                	jne    c0019784 <Vm::x87Handler(regs*)+0x7ea>
c0019775:	83 ec 0c             	sub    esp,0xc
c0019778:	ff 36                	push   DWORD PTR [esi]
c001977a:	e8 14 f4 ff ff       	call   c0018b93 <Vm::fpu32ToInternal(unsigned int)>
c001977f:	e9 b4 02 00 00       	jmp    c0019a38 <Vm::x87Handler(regs*)+0xa9e>
c0019784:	80 fa 04             	cmp    dl,0x4
c0019787:	75 0f                	jne    c0019798 <Vm::x87Handler(regs*)+0x7fe>
c0019789:	83 ec 0c             	sub    esp,0xc
c001978c:	ff 36                	push   DWORD PTR [esi]
c001978e:	e8 00 f4 ff ff       	call   c0018b93 <Vm::fpu32ToInternal(unsigned int)>
c0019793:	e9 9c 01 00 00       	jmp    c0019934 <Vm::x87Handler(regs*)+0x99a>
c0019798:	80 fa 05             	cmp    dl,0x5
c001979b:	75 1b                	jne    c00197b8 <Vm::x87Handler(regs*)+0x81e>
c001979d:	83 ec 0c             	sub    esp,0xc
c00197a0:	6a 00                	push   0x0
c00197a2:	e8 b3 f6 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00197a7:	89 c7                	mov    edi,eax
c00197a9:	89 d5                	mov    ebp,edx
c00197ab:	58                   	pop    eax
c00197ac:	ff 36                	push   DWORD PTR [esi]
c00197ae:	e8 e0 f3 ff ff       	call   c0018b93 <Vm::fpu32ToInternal(unsigned int)>
c00197b3:	e9 bc 01 00 00       	jmp    c0019974 <Vm::x87Handler(regs*)+0x9da>
c00197b8:	80 fa 06             	cmp    dl,0x6
c00197bb:	75 0f                	jne    c00197cc <Vm::x87Handler(regs*)+0x832>
c00197bd:	83 ec 0c             	sub    esp,0xc
c00197c0:	ff 36                	push   DWORD PTR [esi]
c00197c2:	e8 cc f3 ff ff       	call   c0018b93 <Vm::fpu32ToInternal(unsigned int)>
c00197c7:	e9 cc 01 00 00       	jmp    c0019998 <Vm::x87Handler(regs*)+0x9fe>
c00197cc:	31 c0                	xor    eax,eax
c00197ce:	80 fa 07             	cmp    dl,0x7
c00197d1:	0f 85 d5 02 00 00    	jne    c0019aac <Vm::x87Handler(regs*)+0xb12>
c00197d7:	83 ec 0c             	sub    esp,0xc
c00197da:	6a 00                	push   0x0
c00197dc:	e8 79 f6 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00197e1:	89 c7                	mov    edi,eax
c00197e3:	89 d5                	mov    ebp,edx
c00197e5:	58                   	pop    eax
c00197e6:	ff 36                	push   DWORD PTR [esi]
c00197e8:	e8 a6 f3 ff ff       	call   c0018b93 <Vm::fpu32ToInternal(unsigned int)>
c00197ed:	e9 ee 01 00 00       	jmp    c00199e0 <Vm::x87Handler(regs*)+0xa46>
c00197f2:	66 90                	xchg   ax,ax
c00197f4:	80 fa 03             	cmp    dl,0x3
c00197f7:	0f 85 f7 01 00 00    	jne    c00199f4 <Vm::x87Handler(regs*)+0xa5a>
c00197fd:	e8 45 f7 ff ff       	call   c0018f47 <Vm::fpuPop()>
c0019802:	51                   	push   ecx
c0019803:	51                   	push   ecx
c0019804:	e9 03 02 00 00       	jmp    c0019a0c <Vm::x87Handler(regs*)+0xa72>
c0019809:	8d 76 00             	lea    esi,[esi+0x0]
c001980c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019810:	80 fa 01             	cmp    dl,0x1
c0019813:	75 0b                	jne    c0019820 <Vm::x87Handler(regs*)+0x886>
c0019815:	57                   	push   edi
c0019816:	57                   	push   edi
c0019817:	8b 06                	mov    eax,DWORD PTR [esi]
c0019819:	e9 0e 02 00 00       	jmp    c0019a2c <Vm::x87Handler(regs*)+0xa92>
c001981e:	66 90                	xchg   ax,ax
c0019820:	80 fa 04             	cmp    dl,0x4
c0019823:	75 13                	jne    c0019838 <Vm::x87Handler(regs*)+0x89e>
c0019825:	31 d2                	xor    edx,edx
c0019827:	51                   	push   ecx
c0019828:	51                   	push   ecx
c0019829:	8b 06                	mov    eax,DWORD PTR [esi]
c001982b:	52                   	push   edx
c001982c:	50                   	push   eax
c001982d:	e8 4a f4 ff ff       	call   c0018c7c <Vm::fpuLongToFloat(long long)>
c0019832:	e9 fd 00 00 00       	jmp    c0019934 <Vm::x87Handler(regs*)+0x99a>
c0019837:	90                   	nop
c0019838:	31 c0                	xor    eax,eax
c001983a:	80 fa 07             	cmp    dl,0x7
c001983d:	0f 85 69 02 00 00    	jne    c0019aac <Vm::x87Handler(regs*)+0xb12>
c0019843:	83 ec 0c             	sub    esp,0xc
c0019846:	6a 00                	push   0x0
c0019848:	e8 0d f6 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c001984d:	89 c7                	mov    edi,eax
c001984f:	89 d5                	mov    ebp,edx
c0019851:	58                   	pop    eax
c0019852:	8b 06                	mov    eax,DWORD PTR [esi]
c0019854:	5a                   	pop    edx
c0019855:	31 d2                	xor    edx,edx
c0019857:	52                   	push   edx
c0019858:	50                   	push   eax
c0019859:	e8 1e f4 ff ff       	call   c0018c7c <Vm::fpuLongToFloat(long long)>
c001985e:	e9 7d 01 00 00       	jmp    c00199e0 <Vm::x87Handler(regs*)+0xa46>
c0019863:	90                   	nop
c0019864:	84 d2                	test   dl,dl
c0019866:	75 10                	jne    c0019878 <Vm::x87Handler(regs*)+0x8de>
c0019868:	31 d2                	xor    edx,edx
c001986a:	55                   	push   ebp
c001986b:	55                   	push   ebp
c001986c:	8b 06                	mov    eax,DWORD PTR [esi]
c001986e:	52                   	push   edx
c001986f:	50                   	push   eax
c0019870:	e9 03 02 00 00       	jmp    c0019a78 <Vm::x87Handler(regs*)+0xade>
c0019875:	8d 76 00             	lea    esi,[esi+0x0]
c0019878:	31 c0                	xor    eax,eax
c001987a:	80 fa 02             	cmp    dl,0x2
c001987d:	0f 85 29 02 00 00    	jne    c0019aac <Vm::x87Handler(regs*)+0xb12>
c0019883:	83 ec 0c             	sub    esp,0xc
c0019886:	6a 00                	push   0x0
c0019888:	e8 cd f5 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c001988d:	59                   	pop    ecx
c001988e:	5f                   	pop    edi
c001988f:	e9 18 f9 ff ff       	jmp    c00191ac <Vm::x87Handler(regs*)+0x212>
c0019894:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019898:	84 d2                	test   dl,dl
c001989a:	75 2c                	jne    c00198c8 <Vm::x87Handler(regs*)+0x92e>
c001989c:	50                   	push   eax
c001989d:	50                   	push   eax
c001989e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00198a1:	ff 36                	push   DWORD PTR [esi]
c00198a3:	e8 30 f3 ff ff       	call   c0018bd8 <Vm::fpu64ToInternal(unsigned long long)>
c00198a8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00198af:	89 c6                	mov    esi,eax
c00198b1:	89 d7                	mov    edi,edx
c00198b3:	e8 a2 f5 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00198b8:	57                   	push   edi
c00198b9:	56                   	push   esi
c00198ba:	52                   	push   edx
c00198bb:	50                   	push   eax
c00198bc:	e8 0f f5 ff ff       	call   c0018dd0 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00198c1:	e9 8e 01 00 00       	jmp    c0019a54 <Vm::x87Handler(regs*)+0xaba>
c00198c6:	66 90                	xchg   ax,ax
c00198c8:	80 fa 01             	cmp    dl,0x1
c00198cb:	75 13                	jne    c00198e0 <Vm::x87Handler(regs*)+0x946>
c00198cd:	50                   	push   eax
c00198ce:	50                   	push   eax
c00198cf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00198d2:	ff 36                	push   DWORD PTR [esi]
c00198d4:	e8 ff f2 ff ff       	call   c0018bd8 <Vm::fpu64ToInternal(unsigned long long)>
c00198d9:	e9 5a 01 00 00       	jmp    c0019a38 <Vm::x87Handler(regs*)+0xa9e>
c00198de:	66 90                	xchg   ax,ax
c00198e0:	80 fa 02             	cmp    dl,0x2
c00198e3:	0f 85 03 f9 ff ff    	jne    c00191ec <Vm::x87Handler(regs*)+0x252>
c00198e9:	55                   	push   ebp
c00198ea:	55                   	push   ebp
c00198eb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00198ee:	ff 36                	push   DWORD PTR [esi]
c00198f0:	e8 e3 f2 ff ff       	call   c0018bd8 <Vm::fpu64ToInternal(unsigned long long)>
c00198f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00198fc:	89 c6                	mov    esi,eax
c00198fe:	89 d7                	mov    edi,edx
c0019900:	e8 55 f5 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019905:	57                   	push   edi
c0019906:	56                   	push   esi
c0019907:	52                   	push   edx
c0019908:	50                   	push   eax
c0019909:	e8 6c f4 ff ff       	call   c0018d7a <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001990e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019912:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019915:	8d 76 00             	lea    esi,[esi+0x0]
c0019918:	83 c4 20             	add    esp,0x20
c001991b:	e9 fc f6 ff ff       	jmp    c001901c <Vm::x87Handler(regs*)+0x82>
c0019920:	80 fa 04             	cmp    dl,0x4
c0019923:	75 2f                	jne    c0019954 <Vm::x87Handler(regs*)+0x9ba>
c0019925:	51                   	push   ecx
c0019926:	51                   	push   ecx
c0019927:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001992a:	ff 36                	push   DWORD PTR [esi]
c001992c:	e8 a7 f2 ff ff       	call   c0018bd8 <Vm::fpu64ToInternal(unsigned long long)>
c0019931:	8d 76 00             	lea    esi,[esi+0x0]
c0019934:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001993b:	89 c6                	mov    esi,eax
c001993d:	89 d7                	mov    edi,edx
c001993f:	e8 16 f5 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019944:	57                   	push   edi
c0019945:	56                   	push   esi
c0019946:	52                   	push   edx
c0019947:	50                   	push   eax
c0019948:	e8 ad f4 ff ff       	call   c0018dfa <Vm::fpuSub(unsigned long long, unsigned long long)>
c001994d:	e9 02 01 00 00       	jmp    c0019a54 <Vm::x87Handler(regs*)+0xaba>
c0019952:	66 90                	xchg   ax,ax
c0019954:	80 fa 05             	cmp    dl,0x5
c0019957:	75 2b                	jne    c0019984 <Vm::x87Handler(regs*)+0x9ea>
c0019959:	83 ec 0c             	sub    esp,0xc
c001995c:	6a 00                	push   0x0
c001995e:	e8 f7 f4 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019963:	89 c7                	mov    edi,eax
c0019965:	89 d5                	mov    ebp,edx
c0019967:	58                   	pop    eax
c0019968:	5a                   	pop    edx
c0019969:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001996c:	ff 36                	push   DWORD PTR [esi]
c001996e:	e8 65 f2 ff ff       	call   c0018bd8 <Vm::fpu64ToInternal(unsigned long long)>
c0019973:	90                   	nop
c0019974:	83 c4 10             	add    esp,0x10
c0019977:	55                   	push   ebp
c0019978:	57                   	push   edi
c0019979:	52                   	push   edx
c001997a:	50                   	push   eax
c001997b:	e8 7a f4 ff ff       	call   c0018dfa <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019980:	eb 6a                	jmp    c00199ec <Vm::x87Handler(regs*)+0xa52>
c0019982:	66 90                	xchg   ax,ax
c0019984:	80 fa 06             	cmp    dl,0x6
c0019987:	75 2f                	jne    c00199b8 <Vm::x87Handler(regs*)+0xa1e>
c0019989:	51                   	push   ecx
c001998a:	51                   	push   ecx
c001998b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001998e:	ff 36                	push   DWORD PTR [esi]
c0019990:	e8 43 f2 ff ff       	call   c0018bd8 <Vm::fpu64ToInternal(unsigned long long)>
c0019995:	8d 76 00             	lea    esi,[esi+0x0]
c0019998:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001999f:	89 c6                	mov    esi,eax
c00199a1:	89 d7                	mov    edi,edx
c00199a3:	e8 b2 f4 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00199a8:	57                   	push   edi
c00199a9:	56                   	push   esi
c00199aa:	52                   	push   edx
c00199ab:	50                   	push   eax
c00199ac:	e8 77 f4 ff ff       	call   c0018e28 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00199b1:	e9 9e 00 00 00       	jmp    c0019a54 <Vm::x87Handler(regs*)+0xaba>
c00199b6:	66 90                	xchg   ax,ax
c00199b8:	31 c0                	xor    eax,eax
c00199ba:	80 fa 07             	cmp    dl,0x7
c00199bd:	0f 85 e9 00 00 00    	jne    c0019aac <Vm::x87Handler(regs*)+0xb12>
c00199c3:	83 ec 0c             	sub    esp,0xc
c00199c6:	6a 00                	push   0x0
c00199c8:	e8 8d f4 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c00199cd:	89 c7                	mov    edi,eax
c00199cf:	89 d5                	mov    ebp,edx
c00199d1:	58                   	pop    eax
c00199d2:	5a                   	pop    edx
c00199d3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00199d6:	ff 36                	push   DWORD PTR [esi]
c00199d8:	e8 fb f1 ff ff       	call   c0018bd8 <Vm::fpu64ToInternal(unsigned long long)>
c00199dd:	8d 76 00             	lea    esi,[esi+0x0]
c00199e0:	83 c4 10             	add    esp,0x10
c00199e3:	55                   	push   ebp
c00199e4:	57                   	push   edi
c00199e5:	52                   	push   edx
c00199e6:	50                   	push   eax
c00199e7:	e8 3c f4 ff ff       	call   c0018e28 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00199ec:	83 c4 0c             	add    esp,0xc
c00199ef:	eb 67                	jmp    c0019a58 <Vm::x87Handler(regs*)+0xabe>
c00199f1:	8d 76 00             	lea    esi,[esi+0x0]
c00199f4:	31 c0                	xor    eax,eax
c00199f6:	80 fa 02             	cmp    dl,0x2
c00199f9:	0f 85 ad 00 00 00    	jne    c0019aac <Vm::x87Handler(regs*)+0xb12>
c00199ff:	83 ec 0c             	sub    esp,0xc
c0019a02:	6a 00                	push   0x0
c0019a04:	e8 51 f4 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019a09:	59                   	pop    ecx
c0019a0a:	5f                   	pop    edi
c0019a0b:	90                   	nop
c0019a0c:	52                   	push   edx
c0019a0d:	50                   	push   eax
c0019a0e:	e8 77 f1 ff ff       	call   c0018b8a <Vm::fpuInternalTo64(unsigned long long)>
c0019a13:	e9 84 00 00 00       	jmp    c0019a9c <Vm::x87Handler(regs*)+0xb02>
c0019a18:	31 c0                	xor    eax,eax
c0019a1a:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0019a1f:	0f 85 87 00 00 00    	jne    c0019aac <Vm::x87Handler(regs*)+0xb12>
c0019a25:	50                   	push   eax
c0019a26:	50                   	push   eax
c0019a27:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0019a2a:	66 90                	xchg   ax,ax
c0019a2c:	31 d2                	xor    edx,edx
c0019a2e:	52                   	push   edx
c0019a2f:	50                   	push   eax
c0019a30:	e8 47 f2 ff ff       	call   c0018c7c <Vm::fpuLongToFloat(long long)>
c0019a35:	8d 76 00             	lea    esi,[esi+0x0]
c0019a38:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019a3f:	89 c6                	mov    esi,eax
c0019a41:	89 d7                	mov    edi,edx
c0019a43:	e8 12 f4 ff ff       	call   c0018e5a <Vm::fpuGetReg(int)>
c0019a48:	57                   	push   edi
c0019a49:	56                   	push   esi
c0019a4a:	52                   	push   edx
c0019a4b:	50                   	push   eax
c0019a4c:	e8 b8 f3 ff ff       	call   c0018e09 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019a51:	8d 76 00             	lea    esi,[esi+0x0]
c0019a54:	83 c4 1c             	add    esp,0x1c
c0019a57:	90                   	nop
c0019a58:	52                   	push   edx
c0019a59:	50                   	push   eax
c0019a5a:	6a 00                	push   0x0
c0019a5c:	e8 3c f4 ff ff       	call   c0018e9d <Vm::fpuSetReg(int, unsigned long long)>
c0019a61:	e9 7a f7 ff ff       	jmp    c00191e0 <Vm::x87Handler(regs*)+0x246>
c0019a66:	66 90                	xchg   ax,ax
c0019a68:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019a6c:	80 fa 05             	cmp    dl,0x5
c0019a6f:	75 13                	jne    c0019a84 <Vm::x87Handler(regs*)+0xaea>
c0019a71:	55                   	push   ebp
c0019a72:	55                   	push   ebp
c0019a73:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019a76:	ff 36                	push   DWORD PTR [esi]
c0019a78:	e8 c3 f1 ff ff       	call   c0018c40 <Vm::fpuULongToFloat(unsigned long long)>
c0019a7d:	e9 52 f7 ff ff       	jmp    c00191d4 <Vm::x87Handler(regs*)+0x23a>
c0019a82:	66 90                	xchg   ax,ax
c0019a84:	31 c0                	xor    eax,eax
c0019a86:	80 fa 07             	cmp    dl,0x7
c0019a89:	75 21                	jne    c0019aac <Vm::x87Handler(regs*)+0xb12>
c0019a8b:	e8 b7 f4 ff ff       	call   c0018f47 <Vm::fpuPop()>
c0019a90:	51                   	push   ecx
c0019a91:	51                   	push   ecx
c0019a92:	52                   	push   edx
c0019a93:	50                   	push   eax
c0019a94:	e8 48 f1 ff ff       	call   c0018be1 <Vm::fpuFloatToLong(unsigned long long)>
c0019a99:	8d 76 00             	lea    esi,[esi+0x0]
c0019a9c:	83 c4 10             	add    esp,0x10
c0019a9f:	89 06                	mov    DWORD PTR [esi],eax
c0019aa1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0019aa4:	e9 7b f7 ff ff       	jmp    c0019224 <Vm::x87Handler(regs*)+0x28a>
c0019aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0019aac:	83 c4 1c             	add    esp,0x1c
c0019aaf:	5b                   	pop    ebx
c0019ab0:	5e                   	pop    esi
c0019ab1:	5f                   	pop    edi
c0019ab2:	5d                   	pop    ebp
c0019ab3:	c3                   	ret    

c0019ab4 <__static_initialization_and_destruction_0(int, int)>:
c0019ab4:	83 ec 0c             	sub    esp,0xc
c0019ab7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019abc:	75 1a                	jne    c0019ad8 <__static_initialization_and_destruction_0(int, int)+0x24>
c0019abe:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0019ac6:	75 10                	jne    c0019ad8 <__static_initialization_and_destruction_0(int, int)+0x24>
c0019ac8:	83 ec 0c             	sub    esp,0xc
c0019acb:	68 60 a9 02 c0       	push   0xc002a960
c0019ad0:	e8 9f 8c 00 00       	call   c0022774 <Vm::_FPUState::_FPUState()>
c0019ad5:	83 c4 10             	add    esp,0x10
c0019ad8:	90                   	nop
c0019ad9:	83 c4 0c             	add    esp,0xc
c0019adc:	c3                   	ret    
c0019add:	8d 76 00             	lea    esi,[esi+0x0]

c0019ae0 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0019ae0:	83 ec 0c             	sub    esp,0xc
c0019ae3:	83 ec 08             	sub    esp,0x8
c0019ae6:	68 ff ff 00 00       	push   0xffff
c0019aeb:	6a 01                	push   0x1
c0019aed:	e8 c2 ff ff ff       	call   c0019ab4 <__static_initialization_and_destruction_0(int, int)>
c0019af2:	83 c4 10             	add    esp,0x10
c0019af5:	83 c4 0c             	add    esp,0xc
c0019af8:	c3                   	ret    

c0019af9 <Hal::noCopro(unsigned long)>:
c0019af9:	c3                   	ret    

c0019afa <Hal::noTSC()>:
c0019afa:	31 c0                	xor    eax,eax
c0019afc:	31 d2                	xor    edx,edx
c0019afe:	c3                   	ret    

c0019aff <Hal::readTSC()>:
c0019aff:	0f 31                	rdtsc  
c0019b01:	c3                   	ret    

c0019b02 <nmiHandler(regs*, void*)>:
c0019b02:	83 ec 0c             	sub    esp,0xc
c0019b05:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c0019b0a:	83 ec 0c             	sub    esp,0xc
c0019b0d:	50                   	push   eax
c0019b0e:	e8 4b f9 fe ff       	call   c000945e <Computer::handleNMI()>
c0019b13:	83 c4 10             	add    esp,0x10
c0019b16:	90                   	nop
c0019b17:	83 c4 0c             	add    esp,0xc
c0019b1a:	c3                   	ret    

c0019b1b <doubleFault(regs*, void*)>:
c0019b1b:	55                   	push   ebp
c0019b1c:	89 e5                	mov    ebp,esp
c0019b1e:	83 ec 08             	sub    esp,0x8
c0019b21:	83 ec 0c             	sub    esp,0xc
c0019b24:	68 c4 56 02 c0       	push   0xc00256c4
c0019b29:	e8 d9 a2 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0019b2e:	83 c4 10             	add    esp,0x10
c0019b31:	90                   	nop
c0019b32:	c9                   	leave  
c0019b33:	c3                   	ret    

c0019b34 <displayDebugInfo(regs*)>:
c0019b34:	53                   	push   ebx
c0019b35:	83 ec 38             	sub    esp,0x38
c0019b38:	0f 20 c0             	mov    eax,cr0
c0019b3b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019b3f:	0f 20 d0             	mov    eax,cr2
c0019b42:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019b46:	0f 20 d8             	mov    eax,cr3
c0019b49:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0019b4d:	0f 20 e0             	mov    eax,cr4
c0019b50:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019b54:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019b58:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019b5b:	83 ec 08             	sub    esp,0x8
c0019b5e:	50                   	push   eax
c0019b5f:	68 d1 56 02 c0       	push   0xc00256d1
c0019b64:	e8 5c 34 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019b69:	83 c4 10             	add    esp,0x10
c0019b6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019b70:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0019b73:	83 ec 08             	sub    esp,0x8
c0019b76:	50                   	push   eax
c0019b77:	68 dc 56 02 c0       	push   0xc00256dc
c0019b7c:	e8 44 34 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019b81:	83 c4 10             	add    esp,0x10
c0019b84:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019b88:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0019b8b:	83 ec 08             	sub    esp,0x8
c0019b8e:	50                   	push   eax
c0019b8f:	68 e7 56 02 c0       	push   0xc00256e7
c0019b94:	e8 2c 34 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019b99:	83 c4 10             	add    esp,0x10
c0019b9c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019ba0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0019ba3:	83 ec 08             	sub    esp,0x8
c0019ba6:	50                   	push   eax
c0019ba7:	68 f2 56 02 c0       	push   0xc00256f2
c0019bac:	e8 14 34 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019bb1:	83 c4 10             	add    esp,0x10
c0019bb4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019bb8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019bbb:	83 ec 08             	sub    esp,0x8
c0019bbe:	50                   	push   eax
c0019bbf:	68 fd 56 02 c0       	push   0xc00256fd
c0019bc4:	e8 fc 33 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019bc9:	83 c4 10             	add    esp,0x10
c0019bcc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019bd0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019bd3:	83 ec 08             	sub    esp,0x8
c0019bd6:	50                   	push   eax
c0019bd7:	68 08 57 02 c0       	push   0xc0025708
c0019bdc:	e8 e4 33 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019be1:	83 c4 10             	add    esp,0x10
c0019be4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019be8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019beb:	83 ec 08             	sub    esp,0x8
c0019bee:	50                   	push   eax
c0019bef:	68 22 57 02 c0       	push   0xc0025722
c0019bf4:	e8 cc 33 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019bf9:	83 c4 10             	add    esp,0x10
c0019bfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019c00:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0019c03:	83 ec 08             	sub    esp,0x8
c0019c06:	50                   	push   eax
c0019c07:	68 13 57 02 c0       	push   0xc0025713
c0019c0c:	e8 b4 33 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019c11:	83 c4 10             	add    esp,0x10
c0019c14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019c18:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0019c1b:	83 ec 08             	sub    esp,0x8
c0019c1e:	50                   	push   eax
c0019c1f:	68 1e 57 02 c0       	push   0xc002571e
c0019c24:	e8 9c 33 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019c29:	83 c4 10             	add    esp,0x10
c0019c2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019c30:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c33:	83 ec 08             	sub    esp,0x8
c0019c36:	50                   	push   eax
c0019c37:	68 2d 57 02 c0       	push   0xc002572d
c0019c3c:	e8 84 33 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019c41:	83 c4 10             	add    esp,0x10
c0019c44:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019c48:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0019c4b:	83 ec 08             	sub    esp,0x8
c0019c4e:	50                   	push   eax
c0019c4f:	68 38 57 02 c0       	push   0xc0025738
c0019c54:	e8 6c 33 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019c59:	83 c4 10             	add    esp,0x10
c0019c5c:	83 ec 08             	sub    esp,0x8
c0019c5f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019c63:	68 43 57 02 c0       	push   0xc0025743
c0019c68:	e8 58 33 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019c6d:	83 c4 10             	add    esp,0x10
c0019c70:	83 ec 08             	sub    esp,0x8
c0019c73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019c77:	68 4e 57 02 c0       	push   0xc002574e
c0019c7c:	e8 44 33 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0019c81:	83 c4 10             	add    esp,0x10
c0019c84:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019c89:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019c8f:	83 ec 0c             	sub    esp,0xc
c0019c92:	50                   	push   eax
c0019c93:	e8 0d 11 ff ff       	call   c000ada5 <setActiveTerminal(VgaText*)>
c0019c98:	83 c4 10             	add    esp,0x10
c0019c9b:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019ca0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019ca6:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019caa:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0019cad:	c1 e2 05             	shl    edx,0x5
c0019cb0:	81 c2 40 6b 02 c0    	add    edx,0xc0026b40
c0019cb6:	83 ec 08             	sub    esp,0x8
c0019cb9:	52                   	push   edx
c0019cba:	50                   	push   eax
c0019cbb:	e8 e8 15 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019cc0:	83 c4 10             	add    esp,0x10
c0019cc3:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019cc8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019cce:	83 ec 08             	sub    esp,0x8
c0019cd1:	68 59 57 02 c0       	push   0xc0025759
c0019cd6:	50                   	push   eax
c0019cd7:	e8 cc 15 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019cdc:	83 c4 10             	add    esp,0x10
c0019cdf:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019ce4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019cea:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0019cef:	8b 12                	mov    edx,DWORD PTR [edx]
c0019cf1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0019cf4:	83 c2 0c             	add    edx,0xc
c0019cf7:	83 ec 08             	sub    esp,0x8
c0019cfa:	52                   	push   edx
c0019cfb:	50                   	push   eax
c0019cfc:	e8 a7 15 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019d01:	83 c4 10             	add    esp,0x10
c0019d04:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019d09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019d0f:	83 ec 08             	sub    esp,0x8
c0019d12:	68 62 57 02 c0       	push   0xc0025762
c0019d17:	50                   	push   eax
c0019d18:	e8 8b 15 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019d1d:	83 c4 10             	add    esp,0x10
c0019d20:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019d25:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019d2b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019d2f:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0019d32:	83 ec 08             	sub    esp,0x8
c0019d35:	52                   	push   edx
c0019d36:	50                   	push   eax
c0019d37:	e8 26 15 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019d3c:	83 c4 10             	add    esp,0x10
c0019d3f:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019d44:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019d4a:	83 ec 08             	sub    esp,0x8
c0019d4d:	68 6a 57 02 c0       	push   0xc002576a
c0019d52:	50                   	push   eax
c0019d53:	e8 50 15 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019d58:	83 c4 10             	add    esp,0x10
c0019d5b:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019d60:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019d66:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019d6a:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0019d6d:	83 ec 08             	sub    esp,0x8
c0019d70:	52                   	push   edx
c0019d71:	50                   	push   eax
c0019d72:	e8 eb 14 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019d77:	83 c4 10             	add    esp,0x10
c0019d7a:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019d7f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019d85:	83 ec 08             	sub    esp,0x8
c0019d88:	68 72 57 02 c0       	push   0xc0025772
c0019d8d:	50                   	push   eax
c0019d8e:	e8 15 15 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019d93:	83 c4 10             	add    esp,0x10
c0019d96:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019d9b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019da1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019da5:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0019da8:	83 ec 08             	sub    esp,0x8
c0019dab:	52                   	push   edx
c0019dac:	50                   	push   eax
c0019dad:	e8 b0 14 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019db2:	83 c4 10             	add    esp,0x10
c0019db5:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019dba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019dc0:	83 ec 08             	sub    esp,0x8
c0019dc3:	68 7a 57 02 c0       	push   0xc002577a
c0019dc8:	50                   	push   eax
c0019dc9:	e8 da 14 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019dce:	83 c4 10             	add    esp,0x10
c0019dd1:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019dd6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019ddc:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019de0:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0019de3:	83 ec 08             	sub    esp,0x8
c0019de6:	52                   	push   edx
c0019de7:	50                   	push   eax
c0019de8:	e8 75 14 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019ded:	83 c4 10             	add    esp,0x10
c0019df0:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019df5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019dfb:	83 ec 08             	sub    esp,0x8
c0019dfe:	68 82 57 02 c0       	push   0xc0025782
c0019e03:	50                   	push   eax
c0019e04:	e8 9f 14 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019e09:	83 c4 10             	add    esp,0x10
c0019e0c:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019e11:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019e17:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019e1b:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0019e1e:	83 ec 08             	sub    esp,0x8
c0019e21:	52                   	push   edx
c0019e22:	50                   	push   eax
c0019e23:	e8 3a 14 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019e28:	83 c4 10             	add    esp,0x10
c0019e2b:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019e30:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019e36:	83 ec 08             	sub    esp,0x8
c0019e39:	68 8a 57 02 c0       	push   0xc002578a
c0019e3e:	50                   	push   eax
c0019e3f:	e8 64 14 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019e44:	83 c4 10             	add    esp,0x10
c0019e47:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019e4c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019e52:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019e56:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019e59:	83 ec 08             	sub    esp,0x8
c0019e5c:	52                   	push   edx
c0019e5d:	50                   	push   eax
c0019e5e:	e8 ff 13 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019e63:	83 c4 10             	add    esp,0x10
c0019e66:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019e6b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019e71:	83 ec 08             	sub    esp,0x8
c0019e74:	68 92 57 02 c0       	push   0xc0025792
c0019e79:	50                   	push   eax
c0019e7a:	e8 29 14 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019e7f:	83 c4 10             	add    esp,0x10
c0019e82:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019e87:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019e8d:	83 ec 08             	sub    esp,0x8
c0019e90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019e94:	50                   	push   eax
c0019e95:	e8 c8 13 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019e9a:	83 c4 10             	add    esp,0x10
c0019e9d:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019ea2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019ea8:	83 ec 08             	sub    esp,0x8
c0019eab:	68 9b 57 02 c0       	push   0xc002579b
c0019eb0:	50                   	push   eax
c0019eb1:	e8 f2 13 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019eb6:	83 c4 10             	add    esp,0x10
c0019eb9:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019ebe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019ec4:	83 ec 08             	sub    esp,0x8
c0019ec7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019ecb:	50                   	push   eax
c0019ecc:	e8 91 13 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019ed1:	83 c4 10             	add    esp,0x10
c0019ed4:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019ed9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019edf:	83 ec 08             	sub    esp,0x8
c0019ee2:	68 a3 57 02 c0       	push   0xc00257a3
c0019ee7:	50                   	push   eax
c0019ee8:	e8 bb 13 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019eed:	83 c4 10             	add    esp,0x10
c0019ef0:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019ef5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019efb:	83 ec 08             	sub    esp,0x8
c0019efe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019f02:	50                   	push   eax
c0019f03:	e8 5a 13 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019f08:	83 c4 10             	add    esp,0x10
c0019f0b:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019f10:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019f16:	83 ec 08             	sub    esp,0x8
c0019f19:	68 ab 57 02 c0       	push   0xc00257ab
c0019f1e:	50                   	push   eax
c0019f1f:	e8 84 13 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019f24:	83 c4 10             	add    esp,0x10
c0019f27:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019f2c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019f32:	83 ec 08             	sub    esp,0x8
c0019f35:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f39:	50                   	push   eax
c0019f3a:	e8 23 13 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019f3f:	83 c4 10             	add    esp,0x10
c0019f42:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019f47:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019f4d:	83 ec 08             	sub    esp,0x8
c0019f50:	68 b3 57 02 c0       	push   0xc00257b3
c0019f55:	50                   	push   eax
c0019f56:	e8 4d 13 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019f5b:	83 c4 10             	add    esp,0x10
c0019f5e:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019f63:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019f69:	0f 21 c2             	mov    edx,db0
c0019f6c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019f70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019f74:	83 ec 08             	sub    esp,0x8
c0019f77:	52                   	push   edx
c0019f78:	50                   	push   eax
c0019f79:	e8 e4 12 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019f7e:	83 c4 10             	add    esp,0x10
c0019f81:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019f86:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019f8c:	83 ec 08             	sub    esp,0x8
c0019f8f:	68 bc 57 02 c0       	push   0xc00257bc
c0019f94:	50                   	push   eax
c0019f95:	e8 0e 13 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019f9a:	83 c4 10             	add    esp,0x10
c0019f9d:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019fa2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019fa8:	0f 21 ca             	mov    edx,db1
c0019fab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019faf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019fb3:	83 ec 08             	sub    esp,0x8
c0019fb6:	52                   	push   edx
c0019fb7:	50                   	push   eax
c0019fb8:	e8 a5 12 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019fbd:	83 c4 10             	add    esp,0x10
c0019fc0:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019fc5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019fcb:	83 ec 08             	sub    esp,0x8
c0019fce:	68 c4 57 02 c0       	push   0xc00257c4
c0019fd3:	50                   	push   eax
c0019fd4:	e8 cf 12 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c0019fd9:	83 c4 10             	add    esp,0x10
c0019fdc:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c0019fe1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019fe7:	0f 21 d2             	mov    edx,db2
c0019fea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019fee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019ff2:	83 ec 08             	sub    esp,0x8
c0019ff5:	52                   	push   edx
c0019ff6:	50                   	push   eax
c0019ff7:	e8 66 12 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c0019ffc:	83 c4 10             	add    esp,0x10
c0019fff:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c001a004:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a00a:	83 ec 08             	sub    esp,0x8
c001a00d:	68 cc 57 02 c0       	push   0xc00257cc
c001a012:	50                   	push   eax
c001a013:	e8 90 12 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a018:	83 c4 10             	add    esp,0x10
c001a01b:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c001a020:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a026:	0f 21 da             	mov    edx,db3
c001a029:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001a02d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a031:	83 ec 08             	sub    esp,0x8
c001a034:	52                   	push   edx
c001a035:	50                   	push   eax
c001a036:	e8 27 12 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001a03b:	83 c4 10             	add    esp,0x10
c001a03e:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c001a043:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a049:	83 ec 08             	sub    esp,0x8
c001a04c:	68 d4 57 02 c0       	push   0xc00257d4
c001a051:	50                   	push   eax
c001a052:	e8 51 12 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a057:	83 c4 10             	add    esp,0x10
c001a05a:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c001a05f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a065:	0f 21 f2             	mov    edx,db6
c001a068:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a06c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a070:	83 ec 08             	sub    esp,0x8
c001a073:	52                   	push   edx
c001a074:	50                   	push   eax
c001a075:	e8 e8 11 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001a07a:	83 c4 10             	add    esp,0x10
c001a07d:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c001a082:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a088:	83 ec 08             	sub    esp,0x8
c001a08b:	68 dc 57 02 c0       	push   0xc00257dc
c001a090:	50                   	push   eax
c001a091:	e8 12 12 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a096:	83 c4 10             	add    esp,0x10
c001a099:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c001a09e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a0a4:	0f 21 fa             	mov    edx,db7
c001a0a7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a0ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a0af:	83 ec 08             	sub    esp,0x8
c001a0b2:	52                   	push   edx
c001a0b3:	50                   	push   eax
c001a0b4:	e8 a9 11 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001a0b9:	83 c4 10             	add    esp,0x10
c001a0bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a0c0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a0c3:	83 ec 0c             	sub    esp,0xc
c001a0c6:	50                   	push   eax
c001a0c7:	e8 6f c9 ff ff       	call   c0016a3b <Thr::getDriverNameFromAddress(unsigned long)>
c001a0cc:	83 c4 10             	add    esp,0x10
c001a0cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a0d3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a0d8:	0f 84 a6 00 00 00    	je     c001a184 <displayDebugInfo(regs*)+0x650>
c001a0de:	83 ec 08             	sub    esp,0x8
c001a0e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0e5:	68 e4 57 02 c0       	push   0xc00257e4
c001a0ea:	e8 d6 2e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a0ef:	83 c4 10             	add    esp,0x10
c001a0f2:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c001a0f7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a0fd:	83 ec 08             	sub    esp,0x8
c001a100:	68 f2 57 02 c0       	push   0xc00257f2
c001a105:	50                   	push   eax
c001a106:	e8 9d 11 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a10b:	83 c4 10             	add    esp,0x10
c001a10e:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c001a113:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a119:	83 ec 08             	sub    esp,0x8
c001a11c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a120:	50                   	push   eax
c001a121:	e8 82 11 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a126:	83 c4 10             	add    esp,0x10
c001a129:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c001a12e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a134:	83 ec 08             	sub    esp,0x8
c001a137:	68 fe 57 02 c0       	push   0xc00257fe
c001a13c:	50                   	push   eax
c001a13d:	e8 66 11 ff ff       	call   c000b2a8 <VgaText::puts(char const*)>
c001a142:	83 c4 10             	add    esp,0x10
c001a145:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c001a14a:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c001a150:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a154:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a157:	83 ec 0c             	sub    esp,0xc
c001a15a:	50                   	push   eax
c001a15b:	e8 12 c9 ff ff       	call   c0016a72 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001a160:	83 c4 10             	add    esp,0x10
c001a163:	83 ec 08             	sub    esp,0x8
c001a166:	50                   	push   eax
c001a167:	53                   	push   ebx
c001a168:	e8 f5 10 ff ff       	call   c000b262 <VgaText::putx(unsigned int)>
c001a16d:	83 c4 10             	add    esp,0x10
c001a170:	83 ec 08             	sub    esp,0x8
c001a173:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a177:	68 0a 58 02 c0       	push   0xc002580a
c001a17c:	e8 44 2e ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a181:	83 c4 10             	add    esp,0x10
c001a184:	fa                   	cli    
c001a185:	f4                   	hlt    
c001a186:	eb fe                	jmp    c001a186 <displayDebugInfo(regs*)+0x652>

c001a188 <displayProgramFault(char const*)>:
c001a188:	83 ec 0c             	sub    esp,0xc
c001a18b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a190:	8b 00                	mov    eax,DWORD PTR [eax]
c001a192:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001a195:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a19b:	85 c0                	test   eax,eax
c001a19d:	74 21                	je     c001a1c0 <displayProgramFault(char const*)+0x38>
c001a19f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a1a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1a6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001a1a9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001a1af:	6a 04                	push   0x4
c001a1b1:	6a 0f                	push   0xf
c001a1b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1b7:	50                   	push   eax
c001a1b8:	e8 e7 0d ff ff       	call   c000afa4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001a1bd:	83 c4 10             	add    esp,0x10
c001a1c0:	90                   	nop
c001a1c1:	83 c4 0c             	add    esp,0xc
c001a1c4:	c3                   	ret    

c001a1c5 <gpFault(regs*, void*)>:
c001a1c5:	83 ec 1c             	sub    esp,0x1c
c001a1c8:	c7 05 bc a9 02 c0 57 84 01 c0 	mov    DWORD PTR ds:0xc002a9bc,0xc0018457
c001a1d2:	a1 bc a9 02 c0       	mov    eax,ds:0xc002a9bc
c001a1d7:	85 c0                	test   eax,eax
c001a1d9:	74 1c                	je     c001a1f7 <gpFault(regs*, void*)+0x32>
c001a1db:	a1 bc a9 02 c0       	mov    eax,ds:0xc002a9bc
c001a1e0:	83 ec 0c             	sub    esp,0xc
c001a1e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a1e7:	ff d0                	call   eax
c001a1e9:	83 c4 10             	add    esp,0x10
c001a1ec:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a1f0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a1f5:	75 3e                	jne    c001a235 <gpFault(regs*, void*)+0x70>
c001a1f7:	83 ec 0c             	sub    esp,0xc
c001a1fa:	68 1a 58 02 c0       	push   0xc002581a
c001a1ff:	e8 c1 2d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a204:	83 c4 10             	add    esp,0x10
c001a207:	83 ec 0c             	sub    esp,0xc
c001a20a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a20e:	e8 21 f9 ff ff       	call   c0019b34 <displayDebugInfo(regs*)>
c001a213:	83 c4 10             	add    esp,0x10
c001a216:	83 ec 0c             	sub    esp,0xc
c001a219:	68 35 58 02 c0       	push   0xc0025835
c001a21e:	e8 65 ff ff ff       	call   c001a188 <displayProgramFault(char const*)>
c001a223:	83 c4 10             	add    esp,0x10
c001a226:	83 ec 0c             	sub    esp,0xc
c001a229:	6a 00                	push   0x0
c001a22b:	e8 20 dc ff ff       	call   c0017e50 <Thr::terminateFromIRQ(int)>
c001a230:	83 c4 10             	add    esp,0x10
c001a233:	eb 01                	jmp    c001a236 <gpFault(regs*, void*)+0x71>
c001a235:	90                   	nop
c001a236:	83 c4 1c             	add    esp,0x1c
c001a239:	c3                   	ret    

c001a23a <pgFault(regs*, void*)>:
c001a23a:	83 ec 1c             	sub    esp,0x1c
c001a23d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a241:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a244:	83 ec 08             	sub    esp,0x8
c001a247:	50                   	push   eax
c001a248:	68 4e 58 02 c0       	push   0xc002584e
c001a24d:	e8 73 2d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a252:	83 c4 10             	add    esp,0x10
c001a255:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001a25a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a25c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001a25f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001a265:	0f 20 d2             	mov    edx,cr2
c001a268:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a26c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a270:	83 ec 08             	sub    esp,0x8
c001a273:	52                   	push   edx
c001a274:	50                   	push   eax
c001a275:	e8 c6 28 ff ff       	call   c000cb40 <VAS::tryLoadBackOffDisk(unsigned long)>
c001a27a:	83 c4 10             	add    esp,0x10
c001a27d:	84 c0                	test   al,al
c001a27f:	75 3e                	jne    c001a2bf <pgFault(regs*, void*)+0x85>
c001a281:	83 ec 0c             	sub    esp,0xc
c001a284:	68 63 58 02 c0       	push   0xc0025863
c001a289:	e8 37 2d ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a28e:	83 c4 10             	add    esp,0x10
c001a291:	83 ec 0c             	sub    esp,0xc
c001a294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a298:	e8 97 f8 ff ff       	call   c0019b34 <displayDebugInfo(regs*)>
c001a29d:	83 c4 10             	add    esp,0x10
c001a2a0:	83 ec 0c             	sub    esp,0xc
c001a2a3:	68 70 58 02 c0       	push   0xc0025870
c001a2a8:	e8 db fe ff ff       	call   c001a188 <displayProgramFault(char const*)>
c001a2ad:	83 c4 10             	add    esp,0x10
c001a2b0:	83 ec 0c             	sub    esp,0xc
c001a2b3:	6a 00                	push   0x0
c001a2b5:	e8 96 db ff ff       	call   c0017e50 <Thr::terminateFromIRQ(int)>
c001a2ba:	83 c4 10             	add    esp,0x10
c001a2bd:	eb 01                	jmp    c001a2c0 <pgFault(regs*, void*)+0x86>
c001a2bf:	90                   	nop
c001a2c0:	83 c4 1c             	add    esp,0x1c
c001a2c3:	c3                   	ret    

c001a2c4 <otherISRHandler(regs*, void*)>:
c001a2c4:	83 ec 0c             	sub    esp,0xc
c001a2c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2cb:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a2ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a2d2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001a2d5:	83 ec 04             	sub    esp,0x4
c001a2d8:	52                   	push   edx
c001a2d9:	50                   	push   eax
c001a2da:	68 7b 58 02 c0       	push   0xc002587b
c001a2df:	e8 e1 2c ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a2e4:	83 c4 10             	add    esp,0x10
c001a2e7:	83 ec 0c             	sub    esp,0xc
c001a2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2ee:	e8 41 f8 ff ff       	call   c0019b34 <displayDebugInfo(regs*)>
c001a2f3:	83 c4 10             	add    esp,0x10
c001a2f6:	83 ec 0c             	sub    esp,0xc
c001a2f9:	68 2c 59 02 c0       	push   0xc002592c
c001a2fe:	e8 85 fe ff ff       	call   c001a188 <displayProgramFault(char const*)>
c001a303:	83 c4 10             	add    esp,0x10
c001a306:	83 ec 0c             	sub    esp,0xc
c001a309:	6a 00                	push   0x0
c001a30b:	e8 40 db ff ff       	call   c0017e50 <Thr::terminateFromIRQ(int)>
c001a310:	83 c4 10             	add    esp,0x10
c001a313:	90                   	nop
c001a314:	83 c4 0c             	add    esp,0xc
c001a317:	c3                   	ret    

c001a318 <opcodeFault(regs*, void*)>:
c001a318:	55                   	push   ebp
c001a319:	89 e5                	mov    ebp,esp
c001a31b:	56                   	push   esi
c001a31c:	53                   	push   ebx
c001a31d:	83 ec 30             	sub    esp,0x30
c001a320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a323:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a326:	83 ec 08             	sub    esp,0x8
c001a329:	50                   	push   eax
c001a32a:	68 98 58 02 c0       	push   0xc0025898
c001a32f:	e8 91 2c ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a334:	83 c4 10             	add    esp,0x10
c001a337:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c001a33c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a342:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001a348:	84 c0                	test   al,al
c001a34a:	74 24                	je     c001a370 <opcodeFault(regs*, void*)+0x58>
c001a34c:	83 ec 0c             	sub    esp,0xc
c001a34f:	68 54 59 02 c0       	push   0xc0025954
c001a354:	e8 6c 2c ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a359:	83 c4 10             	add    esp,0x10
c001a35c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a35f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a362:	8d 50 19             	lea    edx,[eax+0x19]
c001a365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a368:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a36b:	e9 9b 03 00 00       	jmp    c001a70b <opcodeFault(regs*, void*)+0x3f3>
c001a370:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a373:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a376:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001a379:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c001a37d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a380:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a383:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001a386:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a389:	8a 00                	mov    al,BYTE PTR [eax]
c001a38b:	3c f0                	cmp    al,0xf0
c001a38d:	75 17                	jne    c001a3a6 <opcodeFault(regs*, void*)+0x8e>
c001a38f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001a392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a395:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a398:	8d 50 01             	lea    edx,[eax+0x1]
c001a39b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a39e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a3a1:	e9 d6 00 00 00       	jmp    c001a47c <opcodeFault(regs*, void*)+0x164>
c001a3a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a3a9:	8a 00                	mov    al,BYTE PTR [eax]
c001a3ab:	3c f2                	cmp    al,0xf2
c001a3ad:	74 09                	je     c001a3b8 <opcodeFault(regs*, void*)+0xa0>
c001a3af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a3b2:	8a 00                	mov    al,BYTE PTR [eax]
c001a3b4:	3c f3                	cmp    al,0xf3
c001a3b6:	75 1b                	jne    c001a3d3 <opcodeFault(regs*, void*)+0xbb>
c001a3b8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001a3bc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001a3bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a3c2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a3c5:	8d 50 01             	lea    edx,[eax+0x1]
c001a3c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a3cb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a3ce:	e9 a9 00 00 00       	jmp    c001a47c <opcodeFault(regs*, void*)+0x164>
c001a3d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a3d6:	8a 00                	mov    al,BYTE PTR [eax]
c001a3d8:	3c 66                	cmp    al,0x66
c001a3da:	75 1b                	jne    c001a3f7 <opcodeFault(regs*, void*)+0xdf>
c001a3dc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001a3e0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001a3e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a3e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a3e9:	8d 50 01             	lea    edx,[eax+0x1]
c001a3ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a3ef:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a3f2:	e9 85 00 00 00       	jmp    c001a47c <opcodeFault(regs*, void*)+0x164>
c001a3f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a3fa:	8a 00                	mov    al,BYTE PTR [eax]
c001a3fc:	3c 67                	cmp    al,0x67
c001a3fe:	75 18                	jne    c001a418 <opcodeFault(regs*, void*)+0x100>
c001a400:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001a404:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001a407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a40a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a40d:	8d 50 01             	lea    edx,[eax+0x1]
c001a410:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a413:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a416:	eb 64                	jmp    c001a47c <opcodeFault(regs*, void*)+0x164>
c001a418:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a41b:	8a 00                	mov    al,BYTE PTR [eax]
c001a41d:	3c 2e                	cmp    al,0x2e
c001a41f:	74 09                	je     c001a42a <opcodeFault(regs*, void*)+0x112>
c001a421:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a424:	8a 00                	mov    al,BYTE PTR [eax]
c001a426:	3c 3e                	cmp    al,0x3e
c001a428:	75 18                	jne    c001a442 <opcodeFault(regs*, void*)+0x12a>
c001a42a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001a42e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001a431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a434:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a437:	8d 50 01             	lea    edx,[eax+0x1]
c001a43a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a43d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a440:	eb 3a                	jmp    c001a47c <opcodeFault(regs*, void*)+0x164>
c001a442:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a445:	8a 00                	mov    al,BYTE PTR [eax]
c001a447:	3c 36                	cmp    al,0x36
c001a449:	74 1b                	je     c001a466 <opcodeFault(regs*, void*)+0x14e>
c001a44b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a44e:	8a 00                	mov    al,BYTE PTR [eax]
c001a450:	3c 26                	cmp    al,0x26
c001a452:	74 12                	je     c001a466 <opcodeFault(regs*, void*)+0x14e>
c001a454:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a457:	8a 00                	mov    al,BYTE PTR [eax]
c001a459:	3c 64                	cmp    al,0x64
c001a45b:	74 09                	je     c001a466 <opcodeFault(regs*, void*)+0x14e>
c001a45d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a460:	8a 00                	mov    al,BYTE PTR [eax]
c001a462:	3c 65                	cmp    al,0x65
c001a464:	75 16                	jne    c001a47c <opcodeFault(regs*, void*)+0x164>
c001a466:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001a46a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001a46d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a470:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a473:	8d 50 01             	lea    edx,[eax+0x1]
c001a476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a479:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a47c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a47f:	8a 00                	mov    al,BYTE PTR [eax]
c001a481:	3c 0f                	cmp    al,0xf
c001a483:	0f 85 8d 01 00 00    	jne    c001a616 <opcodeFault(regs*, void*)+0x2fe>
c001a489:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001a48c:	40                   	inc    eax
c001a48d:	8a 00                	mov    al,BYTE PTR [eax]
c001a48f:	3c c7                	cmp    al,0xc7
c001a491:	0f 85 7f 01 00 00    	jne    c001a616 <opcodeFault(regs*, void*)+0x2fe>
c001a497:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001a49a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a49d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a4a0:	8d 50 01             	lea    edx,[eax+0x1]
c001a4a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a4a6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a4a9:	8d 45 d2             	lea    eax,[ebp-0x2e]
c001a4ac:	50                   	push   eax
c001a4ad:	8d 45 d3             	lea    eax,[ebp-0x2d]
c001a4b0:	50                   	push   eax
c001a4b1:	8d 45 d4             	lea    eax,[ebp-0x2c]
c001a4b4:	50                   	push   eax
c001a4b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001a4b8:	e8 63 90 ff ff       	call   c0013520 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001a4bd:	83 c4 10             	add    esp,0x10
c001a4c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001a4c3:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001a4c6:	83 f0 01             	xor    eax,0x1
c001a4c9:	84 c0                	test   al,al
c001a4cb:	0f 84 45 01 00 00    	je     c001a616 <opcodeFault(regs*, void*)+0x2fe>
c001a4d1:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c001a4d4:	3c 01                	cmp    al,0x1
c001a4d6:	0f 85 3a 01 00 00    	jne    c001a616 <opcodeFault(regs*, void*)+0x2fe>
c001a4dc:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001a4df:	83 f0 01             	xor    eax,0x1
c001a4e2:	84 c0                	test   al,al
c001a4e4:	0f 84 2c 01 00 00    	je     c001a616 <opcodeFault(regs*, void*)+0x2fe>
c001a4ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a4ed:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a4f0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001a4f3:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001a4fa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001a4fd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001a500:	89 c2                	mov    edx,eax
c001a502:	b8 00 00 00 00       	mov    eax,0x0
c001a507:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001a50a:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c001a50d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a510:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a513:	ba 00 00 00 00       	mov    edx,0x0
c001a518:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c001a51b:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c001a51e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a521:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a524:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001a527:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c001a52e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001a531:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001a534:	89 c2                	mov    edx,eax
c001a536:	b8 00 00 00 00       	mov    eax,0x0
c001a53b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001a53e:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c001a541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a544:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a547:	ba 00 00 00 00       	mov    edx,0x0
c001a54c:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c001a54f:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c001a552:	fa                   	cli    
c001a553:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c001a558:	40                   	inc    eax
c001a559:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c001a55e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001a561:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a564:	8b 00                	mov    eax,DWORD PTR [eax]
c001a566:	89 c1                	mov    ecx,eax
c001a568:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c001a56b:	89 cb                	mov    ebx,ecx
c001a56d:	89 d0                	mov    eax,edx
c001a56f:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c001a572:	89 c6                	mov    esi,eax
c001a574:	89 f0                	mov    eax,esi
c001a576:	09 d8                	or     eax,ebx
c001a578:	85 c0                	test   eax,eax
c001a57a:	75 21                	jne    c001a59d <opcodeFault(regs*, void*)+0x285>
c001a57c:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c001a57f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001a582:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001a585:	89 01                	mov    DWORD PTR [ecx],eax
c001a587:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a58a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a58d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a590:	83 c8 40             	or     eax,0x40
c001a593:	89 c2                	mov    edx,eax
c001a595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a598:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001a59b:	eb 3e                	jmp    c001a5db <opcodeFault(regs*, void*)+0x2c3>
c001a59d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001a5a0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a5a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5a5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001a5a8:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c001a5ab:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001a5ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a5b1:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001a5b4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001a5b7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001a5ba:	89 d0                	mov    eax,edx
c001a5bc:	31 d2                	xor    edx,edx
c001a5be:	89 c3                	mov    ebx,eax
c001a5c0:	89 d6                	mov    esi,edx
c001a5c2:	89 da                	mov    edx,ebx
c001a5c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a5c7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001a5ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a5cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5d0:	83 e0 bf             	and    eax,0xffffffbf
c001a5d3:	89 c2                	mov    edx,eax
c001a5d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a5d8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001a5db:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c001a5e0:	48                   	dec    eax
c001a5e1:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c001a5e6:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c001a5eb:	85 c0                	test   eax,eax
c001a5ed:	75 01                	jne    c001a5f0 <opcodeFault(regs*, void*)+0x2d8>
c001a5ef:	fb                   	sti    
c001a5f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a5f3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a5f6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001a5f9:	01 c2                	add    edx,eax
c001a5fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a5fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001a601:	83 ec 0c             	sub    esp,0xc
c001a604:	68 a6 58 02 c0       	push   0xc00258a6
c001a609:	e8 b7 29 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a60e:	83 c4 10             	add    esp,0x10
c001a611:	e9 f5 00 00 00       	jmp    c001a70b <opcodeFault(regs*, void*)+0x3f3>
c001a616:	83 ec 0c             	sub    esp,0xc
c001a619:	68 b9 58 02 c0       	push   0xc00258b9
c001a61e:	e8 a2 29 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a623:	83 c4 10             	add    esp,0x10
c001a626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a629:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001a62c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a62f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001a632:	c1 e0 04             	shl    eax,0x4
c001a635:	01 d0                	add    eax,edx
c001a637:	83 c0 03             	add    eax,0x3
c001a63a:	8a 00                	mov    al,BYTE PTR [eax]
c001a63c:	0f b6 d8             	movzx  ebx,al
c001a63f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a642:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001a645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a648:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001a64b:	c1 e0 04             	shl    eax,0x4
c001a64e:	01 d0                	add    eax,edx
c001a650:	83 c0 02             	add    eax,0x2
c001a653:	8a 00                	mov    al,BYTE PTR [eax]
c001a655:	0f b6 c8             	movzx  ecx,al
c001a658:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a65b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001a65e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a661:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001a664:	c1 e0 04             	shl    eax,0x4
c001a667:	01 d0                	add    eax,edx
c001a669:	40                   	inc    eax
c001a66a:	8a 00                	mov    al,BYTE PTR [eax]
c001a66c:	0f b6 d0             	movzx  edx,al
c001a66f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a672:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001a675:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a678:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001a67b:	c1 e0 04             	shl    eax,0x4
c001a67e:	01 f0                	add    eax,esi
c001a680:	8a 00                	mov    al,BYTE PTR [eax]
c001a682:	0f b6 c0             	movzx  eax,al
c001a685:	83 ec 0c             	sub    esp,0xc
c001a688:	53                   	push   ebx
c001a689:	51                   	push   ecx
c001a68a:	52                   	push   edx
c001a68b:	50                   	push   eax
c001a68c:	68 78 59 02 c0       	push   0xc0025978
c001a691:	e8 2f 29 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a696:	83 c4 20             	add    esp,0x20
c001a699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a69c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a69f:	83 c0 03             	add    eax,0x3
c001a6a2:	8a 00                	mov    al,BYTE PTR [eax]
c001a6a4:	0f b6 d8             	movzx  ebx,al
c001a6a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a6aa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a6ad:	83 c0 02             	add    eax,0x2
c001a6b0:	8a 00                	mov    al,BYTE PTR [eax]
c001a6b2:	0f b6 c8             	movzx  ecx,al
c001a6b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a6b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a6bb:	40                   	inc    eax
c001a6bc:	8a 00                	mov    al,BYTE PTR [eax]
c001a6be:	0f b6 d0             	movzx  edx,al
c001a6c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001a6c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001a6c7:	8a 00                	mov    al,BYTE PTR [eax]
c001a6c9:	0f b6 c0             	movzx  eax,al
c001a6cc:	83 ec 0c             	sub    esp,0xc
c001a6cf:	53                   	push   ebx
c001a6d0:	51                   	push   ecx
c001a6d1:	52                   	push   edx
c001a6d2:	50                   	push   eax
c001a6d3:	68 a0 59 02 c0       	push   0xc00259a0
c001a6d8:	e8 e8 28 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a6dd:	83 c4 20             	add    esp,0x20
c001a6e0:	83 ec 0c             	sub    esp,0xc
c001a6e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001a6e6:	e8 49 f4 ff ff       	call   c0019b34 <displayDebugInfo(regs*)>
c001a6eb:	83 c4 10             	add    esp,0x10
c001a6ee:	83 ec 0c             	sub    esp,0xc
c001a6f1:	68 ca 58 02 c0       	push   0xc00258ca
c001a6f6:	e8 8d fa ff ff       	call   c001a188 <displayProgramFault(char const*)>
c001a6fb:	83 c4 10             	add    esp,0x10
c001a6fe:	83 ec 0c             	sub    esp,0xc
c001a701:	6a 00                	push   0x0
c001a703:	e8 48 d7 ff ff       	call   c0017e50 <Thr::terminateFromIRQ(int)>
c001a708:	83 c4 10             	add    esp,0x10
c001a70b:	8d 65 f8             	lea    esp,[ebp-0x8]
c001a70e:	5b                   	pop    ebx
c001a70f:	5e                   	pop    esi
c001a710:	5d                   	pop    ebp
c001a711:	c3                   	ret    

c001a712 <i386SaveCoprocessor(void*)>:
c001a712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a716:	83 c0 3f             	add    eax,0x3f
c001a719:	83 e0 c0             	and    eax,0xffffffc0
c001a71c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a720:	ff 25 b4 a9 02 c0    	jmp    DWORD PTR ds:0xc002a9b4

c001a726 <i386LoadCoprocessor(void*)>:
c001a726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a72a:	83 c0 3f             	add    eax,0x3f
c001a72d:	83 e0 c0             	and    eax,0xffffffc0
c001a730:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a734:	ff 25 b0 a9 02 c0    	jmp    DWORD PTR ds:0xc002a9b0

c001a73a <x87EmulHandler(regs*, void*)>:
c001a73a:	53                   	push   ebx
c001a73b:	83 ec 14             	sub    esp,0x14
c001a73e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a742:	68 d7 58 02 c0       	push   0xc00258d7
c001a747:	e8 79 28 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a74c:	83 c4 10             	add    esp,0x10
c001a74f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a754:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001a758:	74 10                	je     c001a76a <x87EmulHandler(regs*, void*)+0x30>
c001a75a:	83 ec 0c             	sub    esp,0xc
c001a75d:	68 e7 58 02 c0       	push   0xc00258e7
c001a762:	e8 a0 96 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c001a767:	83 c4 10             	add    esp,0x10
c001a76a:	0f 20 c0             	mov    eax,cr0
c001a76d:	a8 08                	test   al,0x8
c001a76f:	74 56                	je     c001a7c7 <x87EmulHandler(regs*, void*)+0x8d>
c001a771:	0f 06                	clts   
c001a773:	a1 ac a9 02 c0       	mov    eax,ds:0xc002a9ac
c001a778:	85 c0                	test   eax,eax
c001a77a:	74 0e                	je     c001a78a <x87EmulHandler(regs*, void*)+0x50>
c001a77c:	83 ec 0c             	sub    esp,0xc
c001a77f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001a782:	e8 8b ff ff ff       	call   c001a712 <i386SaveCoprocessor(void*)>
c001a787:	83 c4 10             	add    esp,0x10
c001a78a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001a790:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001a794:	75 12                	jne    c001a7a8 <x87EmulHandler(regs*, void*)+0x6e>
c001a796:	83 ec 0c             	sub    esp,0xc
c001a799:	68 40 02 00 00       	push   0x240
c001a79e:	e8 14 f5 fe ff       	call   c0009cb7 <malloc>
c001a7a3:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001a7a6:	eb 10                	jmp    c001a7b8 <x87EmulHandler(regs*, void*)+0x7e>
c001a7a8:	83 ec 0c             	sub    esp,0xc
c001a7ab:	a1 ac a9 02 c0       	mov    eax,ds:0xc002a9ac
c001a7b0:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001a7b3:	e8 6e ff ff ff       	call   c001a726 <i386LoadCoprocessor(void*)>
c001a7b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a7bd:	83 c4 10             	add    esp,0x10
c001a7c0:	a3 ac a9 02 c0       	mov    ds:0xc002a9ac,eax
c001a7c5:	eb 2e                	jmp    c001a7f5 <x87EmulHandler(regs*, void*)+0xbb>
c001a7c7:	83 ec 0c             	sub    esp,0xc
c001a7ca:	53                   	push   ebx
c001a7cb:	e8 ca e7 ff ff       	call   c0018f9a <Vm::x87Handler(regs*)>
c001a7d0:	83 c4 10             	add    esp,0x10
c001a7d3:	84 c0                	test   al,al
c001a7d5:	75 1e                	jne    c001a7f5 <x87EmulHandler(regs*, void*)+0xbb>
c001a7d7:	83 ec 0c             	sub    esp,0xc
c001a7da:	68 fb 58 02 c0       	push   0xc00258fb
c001a7df:	e8 e1 27 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a7e4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001a7ec:	83 c4 18             	add    esp,0x18
c001a7ef:	5b                   	pop    ebx
c001a7f0:	e9 5b d6 ff ff       	jmp    c0017e50 <Thr::terminateFromIRQ(int)>
c001a7f5:	83 c4 08             	add    esp,0x8
c001a7f8:	5b                   	pop    ebx
c001a7f9:	c3                   	ret    

c001a7fa <Hal::initialiseCoprocessor()>:
c001a7fa:	83 ec 10             	sub    esp,0x10
c001a7fd:	c7 05 ac a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9ac,0x0
c001a807:	6a 00                	push   0x0
c001a809:	68 3a a7 01 c0       	push   0xc001a73a
c001a80e:	6a 07                	push   0x7
c001a810:	e8 cb 41 ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001a815:	e8 96 71 00 00       	call   c00219b0 <avxDetect>
c001a81a:	83 c4 10             	add    esp,0x10
c001a81d:	85 c0                	test   eax,eax
c001a81f:	74 29                	je     c001a84a <Hal::initialiseCoprocessor()+0x50>
c001a821:	83 ec 0c             	sub    esp,0xc
c001a824:	68 11 59 02 c0       	push   0xc0025911
c001a829:	e8 97 27 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a82e:	c7 05 b4 a9 02 c0 da 19 02 c0 	mov    DWORD PTR ds:0xc002a9b4,0xc00219da
c001a838:	c7 05 b0 a9 02 c0 eb 19 02 c0 	mov    DWORD PTR ds:0xc002a9b0,0xc00219eb
c001a842:	83 c4 1c             	add    esp,0x1c
c001a845:	e9 b2 71 00 00       	jmp    c00219fc <avxInit>
c001a84a:	e8 01 72 00 00       	call   c0021a50 <absolutelyNoChanceInHell>
c001a84f:	85 c0                	test   eax,eax
c001a851:	74 29                	je     c001a87c <Hal::initialiseCoprocessor()+0x82>
c001a853:	83 ec 0c             	sub    esp,0xc
c001a856:	68 17 59 02 c0       	push   0xc0025917
c001a85b:	e8 65 27 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a860:	c7 05 b4 a9 02 c0 68 1a 02 c0 	mov    DWORD PTR ds:0xc002a9b4,0xc0021a68
c001a86a:	c7 05 b0 a9 02 c0 70 1a 02 c0 	mov    DWORD PTR ds:0xc002a9b0,0xc0021a70
c001a874:	83 c4 1c             	add    esp,0x1c
c001a877:	e9 fc 71 00 00       	jmp    c0021a78 <sseInit>
c001a87c:	e8 15 72 00 00       	call   c0021a96 <x87Detect>
c001a881:	85 c0                	test   eax,eax
c001a883:	74 29                	je     c001a8ae <Hal::initialiseCoprocessor()+0xb4>
c001a885:	83 ec 0c             	sub    esp,0xc
c001a888:	68 1d 59 02 c0       	push   0xc002591d
c001a88d:	e8 33 27 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a892:	c7 05 b4 a9 02 c0 b1 1a 02 c0 	mov    DWORD PTR ds:0xc002a9b4,0xc0021ab1
c001a89c:	c7 05 b0 a9 02 c0 b8 1a 02 c0 	mov    DWORD PTR ds:0xc002a9b0,0xc0021ab8
c001a8a6:	83 c4 1c             	add    esp,0x1c
c001a8a9:	e9 11 72 00 00       	jmp    c0021abf <x87Init>
c001a8ae:	83 ec 0c             	sub    esp,0xc
c001a8b1:	68 23 59 02 c0       	push   0xc0025923
c001a8b6:	e8 0a 27 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001a8bb:	c7 05 b4 a9 02 c0 f9 9a 01 c0 	mov    DWORD PTR ds:0xc002a9b4,0xc0019af9
c001a8c5:	c7 05 b0 a9 02 c0 f9 9a 01 c0 	mov    DWORD PTR ds:0xc002a9b0,0xc0019af9
c001a8cf:	0f 20 c0             	mov    eax,cr0
c001a8d2:	83 c8 04             	or     eax,0x4
c001a8d5:	0f 22 c0             	mov    cr0,eax
c001a8d8:	83 c4 1c             	add    esp,0x1c
c001a8db:	c3                   	ret    

c001a8dc <Hal::panic(char const*)>:
c001a8dc:	e9 26 95 ff ff       	jmp    c0013e07 <Krnl::panic(char const*)>

c001a8e1 <Hal::initialise()>:
c001a8e1:	83 ec 0c             	sub    esp,0xc
c001a8e4:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c001a8e9:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001a8ef:	b8 fa 9a 01 c0       	mov    eax,0xc0019afa
c001a8f4:	f6 82 8c 11 00 00 02 	test   BYTE PTR [edx+0x118c],0x2
c001a8fb:	74 05                	je     c001a902 <Hal::initialise()+0x21>
c001a8fd:	b8 ff 9a 01 c0       	mov    eax,0xc0019aff
c001a902:	a3 b8 a9 02 c0       	mov    ds:0xc002a9b8,eax
c001a907:	e8 f9 42 ff ff       	call   c000ec05 <setupINTS()>
c001a90c:	80 3d c0 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029cc0,0x0
c001a913:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c001a918:	75 07                	jne    c001a921 <Hal::initialise()+0x40>
c001a91a:	80 a0 e8 01 00 00 fe 	and    BYTE PTR [eax+0x1e8],0xfe
c001a921:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a927:	83 e0 01             	and    eax,0x1
c001a92a:	a2 a8 a9 02 c0       	mov    ds:0xc002a9a8,al
c001a92f:	e8 b4 02 00 00       	call   c001abe8 <picOpen()>
c001a934:	80 3d a8 a9 02 c0 00 	cmp    BYTE PTR ds:0xc002a9a8,0x0
c001a93b:	74 0a                	je     c001a947 <Hal::initialise()+0x66>
c001a93d:	e8 f6 01 00 00       	call   c001ab38 <picDisable()>
c001a942:	e8 f7 69 00 00       	call   c002133e <apicOpen()>
c001a947:	50                   	push   eax
c001a948:	6a 00                	push   0x0
c001a94a:	68 c4 a2 01 c0       	push   0xc001a2c4
c001a94f:	6a 00                	push   0x0
c001a951:	e8 8a 40 ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001a956:	83 c4 0c             	add    esp,0xc
c001a959:	6a 00                	push   0x0
c001a95b:	68 c4 a2 01 c0       	push   0xc001a2c4
c001a960:	6a 01                	push   0x1
c001a962:	e8 79 40 ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001a967:	83 c4 0c             	add    esp,0xc
c001a96a:	6a 00                	push   0x0
c001a96c:	68 02 9b 01 c0       	push   0xc0019b02
c001a971:	6a 02                	push   0x2
c001a973:	e8 68 40 ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001a978:	83 c4 0c             	add    esp,0xc
c001a97b:	6a 00                	push   0x0
c001a97d:	68 c4 a2 01 c0       	push   0xc001a2c4
c001a982:	6a 03                	push   0x3
c001a984:	e8 57 40 ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001a989:	83 c4 0c             	add    esp,0xc
c001a98c:	6a 00                	push   0x0
c001a98e:	68 c4 a2 01 c0       	push   0xc001a2c4
c001a993:	6a 04                	push   0x4
c001a995:	e8 46 40 ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001a99a:	83 c4 0c             	add    esp,0xc
c001a99d:	6a 00                	push   0x0
c001a99f:	68 c4 a2 01 c0       	push   0xc001a2c4
c001a9a4:	6a 05                	push   0x5
c001a9a6:	e8 35 40 ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001a9ab:	83 c4 0c             	add    esp,0xc
c001a9ae:	6a 00                	push   0x0
c001a9b0:	68 18 a3 01 c0       	push   0xc001a318
c001a9b5:	6a 06                	push   0x6
c001a9b7:	e8 24 40 ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001a9bc:	83 c4 0c             	add    esp,0xc
c001a9bf:	6a 00                	push   0x0
c001a9c1:	68 1b 9b 01 c0       	push   0xc0019b1b
c001a9c6:	6a 08                	push   0x8
c001a9c8:	e8 13 40 ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001a9cd:	83 c4 0c             	add    esp,0xc
c001a9d0:	6a 00                	push   0x0
c001a9d2:	68 c4 a2 01 c0       	push   0xc001a2c4
c001a9d7:	6a 09                	push   0x9
c001a9d9:	e8 02 40 ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001a9de:	83 c4 0c             	add    esp,0xc
c001a9e1:	6a 00                	push   0x0
c001a9e3:	68 c4 a2 01 c0       	push   0xc001a2c4
c001a9e8:	6a 0a                	push   0xa
c001a9ea:	e8 f1 3f ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001a9ef:	83 c4 0c             	add    esp,0xc
c001a9f2:	6a 00                	push   0x0
c001a9f4:	68 c4 a2 01 c0       	push   0xc001a2c4
c001a9f9:	6a 0b                	push   0xb
c001a9fb:	e8 e0 3f ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001aa00:	83 c4 0c             	add    esp,0xc
c001aa03:	6a 00                	push   0x0
c001aa05:	68 c4 a2 01 c0       	push   0xc001a2c4
c001aa0a:	6a 0c                	push   0xc
c001aa0c:	e8 cf 3f ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001aa11:	83 c4 0c             	add    esp,0xc
c001aa14:	6a 00                	push   0x0
c001aa16:	68 c5 a1 01 c0       	push   0xc001a1c5
c001aa1b:	6a 0d                	push   0xd
c001aa1d:	e8 be 3f ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001aa22:	83 c4 0c             	add    esp,0xc
c001aa25:	6a 00                	push   0x0
c001aa27:	68 3a a2 01 c0       	push   0xc001a23a
c001aa2c:	6a 0e                	push   0xe
c001aa2e:	e8 ad 3f ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001aa33:	83 c4 0c             	add    esp,0xc
c001aa36:	6a 00                	push   0x0
c001aa38:	68 c4 a2 01 c0       	push   0xc001a2c4
c001aa3d:	6a 0f                	push   0xf
c001aa3f:	e8 9c 3f ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001aa44:	83 c4 0c             	add    esp,0xc
c001aa47:	6a 00                	push   0x0
c001aa49:	68 c4 a2 01 c0       	push   0xc001a2c4
c001aa4e:	6a 10                	push   0x10
c001aa50:	e8 8b 3f ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001aa55:	83 c4 0c             	add    esp,0xc
c001aa58:	6a 00                	push   0x0
c001aa5a:	68 c4 a2 01 c0       	push   0xc001a2c4
c001aa5f:	6a 11                	push   0x11
c001aa61:	e8 7a 3f ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001aa66:	83 c4 0c             	add    esp,0xc
c001aa69:	6a 00                	push   0x0
c001aa6b:	68 c4 a2 01 c0       	push   0xc001a2c4
c001aa70:	6a 12                	push   0x12
c001aa72:	e8 69 3f ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001aa77:	83 c4 0c             	add    esp,0xc
c001aa7a:	6a 00                	push   0x0
c001aa7c:	68 c4 a2 01 c0       	push   0xc001a2c4
c001aa81:	6a 13                	push   0x13
c001aa83:	e8 58 3f ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001aa88:	83 c4 0c             	add    esp,0xc
c001aa8b:	6a 00                	push   0x0
c001aa8d:	68 c4 a2 01 c0       	push   0xc001a2c4
c001aa92:	6a 14                	push   0x14
c001aa94:	e8 47 3f ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001aa99:	83 c4 0c             	add    esp,0xc
c001aa9c:	6a 00                	push   0x0
c001aa9e:	68 c4 a2 01 c0       	push   0xc001a2c4
c001aaa3:	6a 1e                	push   0x1e
c001aaa5:	e8 36 3f ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001aaaa:	83 c4 0c             	add    esp,0xc
c001aaad:	6a 00                	push   0x0
c001aaaf:	68 b1 5a 01 c0       	push   0xc0015ab1
c001aab4:	6a 60                	push   0x60
c001aab6:	e8 25 3f ff ff       	call   c000e9e0 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001aabb:	83 c4 1c             	add    esp,0x1c
c001aabe:	c3                   	ret    

c001aabf <Hal::makeBeep(int)>:
c001aabf:	53                   	push   ebx
c001aac0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001aac4:	85 db                	test   ebx,ebx
c001aac6:	75 07                	jne    c001aacf <Hal::makeBeep(int)+0x10>
c001aac8:	e4 61                	in     al,0x61
c001aaca:	83 e0 fc             	and    eax,0xfffffffc
c001aacd:	eb 26                	jmp    c001aaf5 <Hal::makeBeep(int)+0x36>
c001aacf:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001aad4:	99                   	cdq    
c001aad5:	f7 fb                	idiv   ebx
c001aad7:	89 c1                	mov    ecx,eax
c001aad9:	b0 b6                	mov    al,0xb6
c001aadb:	e6 43                	out    0x43,al
c001aadd:	88 c8                	mov    al,cl
c001aadf:	e6 42                	out    0x42,al
c001aae1:	89 c8                	mov    eax,ecx
c001aae3:	c1 e8 08             	shr    eax,0x8
c001aae6:	e6 42                	out    0x42,al
c001aae8:	e4 61                	in     al,0x61
c001aaea:	88 c2                	mov    dl,al
c001aaec:	83 ca 03             	or     edx,0x3
c001aaef:	38 c2                	cmp    dl,al
c001aaf1:	74 04                	je     c001aaf7 <Hal::makeBeep(int)+0x38>
c001aaf3:	88 d0                	mov    al,dl
c001aaf5:	e6 61                	out    0x61,al
c001aaf7:	5b                   	pop    ebx
c001aaf8:	c3                   	ret    

c001aaf9 <Hal::getRand()>:
c001aaf9:	31 c0                	xor    eax,eax
c001aafb:	c3                   	ret    

c001aafc <Hal::endOfInterrupt(int)>:
c001aafc:	80 3d a8 a9 02 c0 00 	cmp    BYTE PTR ds:0xc002a9a8,0x0
c001ab03:	74 23                	je     c001ab28 <Hal::endOfInterrupt(int)+0x2c>
c001ab05:	83 ec 14             	sub    esp,0x14
c001ab08:	6a 1b                	push   0x1b
c001ab0a:	ff 35 a8 73 02 c0    	push   DWORD PTR ds:0xc00273a8
c001ab10:	e8 51 e7 fe ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c001ab15:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ab1a:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001ab24:	83 c4 1c             	add    esp,0x1c
c001ab27:	c3                   	ret    
c001ab28:	e9 3f 02 00 00       	jmp    c001ad6c <picEOI(int)>
c001ab2d:	66 90                	xchg   ax,ax
c001ab2f:	90                   	nop

c001ab30 <picIoWait()>:
c001ab30:	eb 00                	jmp    c001ab32 <picIoWait()+0x2>
c001ab32:	eb 00                	jmp    c001ab34 <picIoWait()+0x4>
c001ab34:	90                   	nop
c001ab35:	c3                   	ret    
c001ab36:	66 90                	xchg   ax,ax

c001ab38 <picDisable()>:
c001ab38:	83 ec 10             	sub    esp,0x10
c001ab3b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001ab42:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001ab47:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ab4b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ab50:	ee                   	out    dx,al
c001ab51:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001ab58:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001ab5d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001ab61:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001ab66:	ee                   	out    dx,al
c001ab67:	90                   	nop
c001ab68:	83 c4 10             	add    esp,0x10
c001ab6b:	c3                   	ret    

c001ab6c <picGetIRQReg(int)>:
c001ab6c:	83 ec 10             	sub    esp,0x10
c001ab6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab73:	0f b6 c0             	movzx  eax,al
c001ab76:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001ab7d:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001ab81:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ab85:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ab8a:	ee                   	out    dx,al
c001ab8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab8f:	0f b6 c0             	movzx  eax,al
c001ab92:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001ab99:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ab9d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001aba1:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001aba6:	ee                   	out    dx,al
c001aba7:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001abae:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001abb3:	89 c2                	mov    edx,eax
c001abb5:	ec                   	in     al,dx
c001abb6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001abba:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001abbe:	0f b6 c0             	movzx  eax,al
c001abc1:	c1 e0 08             	shl    eax,0x8
c001abc4:	89 c1                	mov    ecx,eax
c001abc6:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001abcd:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001abd2:	89 c2                	mov    edx,eax
c001abd4:	ec                   	in     al,dx
c001abd5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001abd9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001abdd:	0f b6 c0             	movzx  eax,al
c001abe0:	09 c8                	or     eax,ecx
c001abe2:	83 c4 10             	add    esp,0x10
c001abe5:	c3                   	ret    
c001abe6:	66 90                	xchg   ax,ax

c001abe8 <picOpen()>:
c001abe8:	83 ec 50             	sub    esp,0x50
c001abeb:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001abf2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001abf7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001abfb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abff:	ee                   	out    dx,al
c001ac00:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001ac07:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001ac0c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001ac10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac14:	ee                   	out    dx,al
c001ac15:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001ac1d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001ac25:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001ac2c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ac30:	89 c2                	mov    edx,eax
c001ac32:	ec                   	in     al,dx
c001ac33:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001ac37:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001ac3b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001ac3f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001ac46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac4a:	89 c2                	mov    edx,eax
c001ac4c:	ec                   	in     al,dx
c001ac4d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001ac51:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001ac55:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001ac59:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001ac60:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001ac65:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001ac69:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ac6d:	ee                   	out    dx,al
c001ac6e:	e8 bd fe ff ff       	call   c001ab30 <picIoWait()>
c001ac73:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001ac7a:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001ac7f:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001ac83:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ac87:	ee                   	out    dx,al
c001ac88:	e8 a3 fe ff ff       	call   c001ab30 <picIoWait()>
c001ac8d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac91:	0f b6 c0             	movzx  eax,al
c001ac94:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001ac9b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001ac9f:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001aca3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aca7:	ee                   	out    dx,al
c001aca8:	e8 83 fe ff ff       	call   c001ab30 <picIoWait()>
c001acad:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001acb1:	0f b6 c0             	movzx  eax,al
c001acb4:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001acbb:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001acbf:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001acc3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001acc7:	ee                   	out    dx,al
c001acc8:	e8 63 fe ff ff       	call   c001ab30 <picIoWait()>
c001accd:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001acd4:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001acd9:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001acdd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ace1:	ee                   	out    dx,al
c001ace2:	e8 49 fe ff ff       	call   c001ab30 <picIoWait()>
c001ace7:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001acee:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001acf3:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001acf7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001acfb:	ee                   	out    dx,al
c001acfc:	e8 2f fe ff ff       	call   c001ab30 <picIoWait()>
c001ad01:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001ad08:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001ad0d:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001ad11:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad15:	ee                   	out    dx,al
c001ad16:	e8 15 fe ff ff       	call   c001ab30 <picIoWait()>
c001ad1b:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001ad22:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001ad27:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001ad2b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ad2f:	ee                   	out    dx,al
c001ad30:	e8 fb fd ff ff       	call   c001ab30 <picIoWait()>
c001ad35:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001ad3a:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001ad41:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001ad45:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001ad49:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001ad4d:	ee                   	out    dx,al
c001ad4e:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001ad53:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001ad5a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001ad5e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001ad62:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001ad66:	ee                   	out    dx,al
c001ad67:	90                   	nop
c001ad68:	83 c4 50             	add    esp,0x50
c001ad6b:	c3                   	ret    

c001ad6c <picEOI(int)>:
c001ad6c:	83 ec 10             	sub    esp,0x10
c001ad6f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001ad74:	75 1e                	jne    c001ad94 <picEOI(int)+0x28>
c001ad76:	6a 0b                	push   0xb
c001ad78:	e8 ef fd ff ff       	call   c001ab6c <picGetIRQReg(int)>
c001ad7d:	83 c4 04             	add    esp,0x4
c001ad80:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001ad85:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001ad8a:	25 80 00 00 00       	and    eax,0x80
c001ad8f:	74 73                	je     c001ae04 <picEOI(int)+0x98>
c001ad91:	8d 76 00             	lea    esi,[esi+0x0]
c001ad94:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001ad99:	75 31                	jne    c001adcc <picEOI(int)+0x60>
c001ad9b:	6a 0b                	push   0xb
c001ad9d:	e8 ca fd ff ff       	call   c001ab6c <picGetIRQReg(int)>
c001ada2:	83 c4 04             	add    esp,0x4
c001ada5:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001adaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adae:	66 85 c0             	test   ax,ax
c001adb1:	78 19                	js     c001adcc <picEOI(int)+0x60>
c001adb3:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001adba:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001adbf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001adc3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001adc8:	ee                   	out    dx,al
c001adc9:	eb 3d                	jmp    c001ae08 <picEOI(int)+0x9c>
c001adcb:	90                   	nop
c001adcc:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001add1:	7e 19                	jle    c001adec <picEOI(int)+0x80>
c001add3:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001adda:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001addf:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ade3:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ade8:	ee                   	out    dx,al
c001ade9:	8d 76 00             	lea    esi,[esi+0x0]
c001adec:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001adf3:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001adf8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001adfc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ae01:	ee                   	out    dx,al
c001ae02:	eb 04                	jmp    c001ae08 <picEOI(int)+0x9c>
c001ae04:	90                   	nop
c001ae05:	8d 76 00             	lea    esi,[esi+0x0]
c001ae08:	83 c4 10             	add    esp,0x10
c001ae0b:	c3                   	ret    

c001ae0c <FAT::getName()>:
c001ae0c:	b8 c5 59 02 c0       	mov    eax,0xc00259c5
c001ae11:	c3                   	ret    
c001ae12:	66 90                	xchg   ax,ax

c001ae14 <FAT::tell(void*, unsigned long long*)>:
c001ae14:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ae19:	75 09                	jne    c001ae24 <FAT::tell(void*, unsigned long long*)+0x10>
c001ae1b:	b8 04 00 00 00       	mov    eax,0x4
c001ae20:	c3                   	ret    
c001ae21:	8d 76 00             	lea    esi,[esi+0x0]
c001ae24:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ae29:	75 09                	jne    c001ae34 <FAT::tell(void*, unsigned long long*)+0x20>
c001ae2b:	b8 04 00 00 00       	mov    eax,0x4
c001ae30:	c3                   	ret    
c001ae31:	8d 76 00             	lea    esi,[esi+0x0]
c001ae34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae38:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ae3b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ae3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ae42:	89 01                	mov    DWORD PTR [ecx],eax
c001ae44:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ae47:	b8 00 00 00 00       	mov    eax,0x0
c001ae4c:	c3                   	ret    
c001ae4d:	90                   	nop
c001ae4e:	66 90                	xchg   ax,ax

c001ae50 <FAT::stat(void*, unsigned long long*)>:
c001ae50:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ae55:	75 09                	jne    c001ae60 <FAT::stat(void*, unsigned long long*)+0x10>
c001ae57:	b8 04 00 00 00       	mov    eax,0x4
c001ae5c:	c3                   	ret    
c001ae5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae60:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ae65:	75 09                	jne    c001ae70 <FAT::stat(void*, unsigned long long*)+0x20>
c001ae67:	b8 04 00 00 00       	mov    eax,0x4
c001ae6c:	c3                   	ret    
c001ae6d:	8d 76 00             	lea    esi,[esi+0x0]
c001ae70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae74:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ae77:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ae7e:	89 01                	mov    DWORD PTR [ecx],eax
c001ae80:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ae83:	b8 00 00 00 00       	mov    eax,0x0
c001ae88:	c3                   	ret    
c001ae89:	90                   	nop
c001ae8a:	66 90                	xchg   ax,ax

c001ae8c <FAT::~FAT()>:
c001ae8c:	83 ec 0c             	sub    esp,0xc
c001ae8f:	ba 10 5a 02 c0       	mov    edx,0xc0025a10
c001ae94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae98:	89 10                	mov    DWORD PTR [eax],edx
c001ae9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae9e:	83 ec 0c             	sub    esp,0xc
c001aea1:	50                   	push   eax
c001aea2:	e8 59 24 ff ff       	call   c000d300 <Filesystem::~Filesystem()>
c001aea7:	83 c4 10             	add    esp,0x10
c001aeaa:	90                   	nop
c001aeab:	83 c4 0c             	add    esp,0xc
c001aeae:	c3                   	ret    
c001aeaf:	90                   	nop

c001aeb0 <FAT::~FAT()>:
c001aeb0:	83 ec 0c             	sub    esp,0xc
c001aeb3:	83 ec 0c             	sub    esp,0xc
c001aeb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aeba:	e8 cd ff ff ff       	call   c001ae8c <FAT::~FAT()>
c001aebf:	83 c4 10             	add    esp,0x10
c001aec2:	83 ec 08             	sub    esp,0x8
c001aec5:	6a 08                	push   0x8
c001aec7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001aecb:	e8 14 20 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c001aed0:	83 c4 10             	add    esp,0x10
c001aed3:	83 c4 0c             	add    esp,0xc
c001aed6:	c3                   	ret    
c001aed7:	90                   	nop

c001aed8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001aed8:	83 ec 1c             	sub    esp,0x1c
c001aedb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001aee2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001aee7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aeeb:	8b 04 85 e0 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5620]
c001aef2:	83 f8 ff             	cmp    eax,0xffffffff
c001aef5:	75 35                	jne    c001af2c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001aef7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001aefb:	88 c2                	mov    dl,al
c001aefd:	a1 c0 a9 02 c0       	mov    eax,ds:0xc002a9c0
c001af02:	01 d0                	add    eax,edx
c001af04:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001af08:	8b 15 c0 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a9c0
c001af0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af12:	89 14 85 e0 a9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5620],edx
c001af19:	a1 c0 a9 02 c0       	mov    eax,ds:0xc002a9c0
c001af1e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001af22:	89 14 85 60 aa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd55a0],edx
c001af29:	eb 19                	jmp    c001af44 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001af2b:	90                   	nop
c001af2c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001af30:	88 c2                	mov    dl,al
c001af32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af36:	8b 04 85 e0 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5620]
c001af3d:	01 d0                	add    eax,edx
c001af3f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001af43:	90                   	nop
c001af44:	83 ec 04             	sub    esp,0x4
c001af47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001af4b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001af4f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001af53:	50                   	push   eax
c001af54:	e8 d1 bc fe ff       	call   c0006c2a <f_getlabel>
c001af59:	83 c4 10             	add    esp,0x10
c001af5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af60:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001af65:	75 09                	jne    c001af70 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001af67:	b8 00 00 00 00       	mov    eax,0x0
c001af6c:	eb 0a                	jmp    c001af78 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001af6e:	66 90                	xchg   ax,ax
c001af70:	b8 01 00 00 00       	mov    eax,0x1
c001af75:	8d 76 00             	lea    esi,[esi+0x0]
c001af78:	83 c4 1c             	add    esp,0x1c
c001af7b:	c3                   	ret    

c001af7c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001af7c:	57                   	push   edi
c001af7d:	83 ec 58             	sub    esp,0x58
c001af80:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001af88:	8d 54 24 10          	lea    edx,[esp+0x10]
c001af8c:	b9 0f 00 00 00       	mov    ecx,0xf
c001af91:	b8 00 00 00 00       	mov    eax,0x0
c001af96:	fc                   	cld    
c001af97:	89 d7                	mov    edi,edx
c001af99:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001af9b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001af9f:	8b 04 85 e0 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5620]
c001afa6:	83 f8 ff             	cmp    eax,0xffffffff
c001afa9:	75 35                	jne    c001afe0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001afab:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001afaf:	88 c2                	mov    dl,al
c001afb1:	a1 c0 a9 02 c0       	mov    eax,ds:0xc002a9c0
c001afb6:	01 d0                	add    eax,edx
c001afb8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001afbc:	8b 15 c0 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a9c0
c001afc2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001afc6:	89 14 85 e0 a9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5620],edx
c001afcd:	a1 c0 a9 02 c0       	mov    eax,ds:0xc002a9c0
c001afd2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001afd6:	89 14 85 60 aa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd55a0],edx
c001afdd:	eb 19                	jmp    c001aff8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001afdf:	90                   	nop
c001afe0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001afe4:	88 c2                	mov    dl,al
c001afe6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001afea:	8b 04 85 e0 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5620]
c001aff1:	01 d0                	add    eax,edx
c001aff3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001aff7:	90                   	nop
c001aff8:	83 ec 08             	sub    esp,0x8
c001affb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001afff:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b003:	50                   	push   eax
c001b004:	e8 6f 58 fe ff       	call   c0000878 <strcat>
c001b009:	83 c4 10             	add    esp,0x10
c001b00c:	83 ec 0c             	sub    esp,0xc
c001b00f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b013:	50                   	push   eax
c001b014:	e8 ff bd fe ff       	call   c0006e18 <f_setlabel>
c001b019:	83 c4 10             	add    esp,0x10
c001b01c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b020:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b025:	75 09                	jne    c001b030 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b027:	b8 00 00 00 00       	mov    eax,0x0
c001b02c:	eb 0a                	jmp    c001b038 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b02e:	66 90                	xchg   ax,ax
c001b030:	b8 01 00 00 00       	mov    eax,0x1
c001b035:	8d 76 00             	lea    esi,[esi+0x0]
c001b038:	83 c4 58             	add    esp,0x58
c001b03b:	5f                   	pop    edi
c001b03c:	c3                   	ret    
c001b03d:	90                   	nop
c001b03e:	66 90                	xchg   ax,ax

c001b040 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b040:	83 ec 2c             	sub    esp,0x2c
c001b043:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b04b:	83 ec 08             	sub    esp,0x8
c001b04e:	68 e9 59 02 c0       	push   0xc00259e9
c001b053:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b057:	e8 68 57 fe ff       	call   c00007c4 <strcmp>
c001b05c:	83 c4 10             	add    esp,0x10
c001b05f:	85 c0                	test   eax,eax
c001b061:	0f 94 c0             	sete   al
c001b064:	84 c0                	test   al,al
c001b066:	74 10                	je     c001b078 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b068:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b070:	e9 b3 00 00 00       	jmp    c001b128 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b075:	8d 76 00             	lea    esi,[esi+0x0]
c001b078:	83 ec 08             	sub    esp,0x8
c001b07b:	68 db 59 02 c0       	push   0xc00259db
c001b080:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b084:	e8 3b 57 fe ff       	call   c00007c4 <strcmp>
c001b089:	83 c4 10             	add    esp,0x10
c001b08c:	85 c0                	test   eax,eax
c001b08e:	0f 94 c0             	sete   al
c001b091:	84 c0                	test   al,al
c001b093:	74 0f                	je     c001b0a4 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001b095:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b09d:	e9 86 00 00 00       	jmp    c001b128 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b0a2:	66 90                	xchg   ax,ax
c001b0a4:	83 ec 08             	sub    esp,0x8
c001b0a7:	68 e1 59 02 c0       	push   0xc00259e1
c001b0ac:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b0b0:	e8 0f 57 fe ff       	call   c00007c4 <strcmp>
c001b0b5:	83 c4 10             	add    esp,0x10
c001b0b8:	85 c0                	test   eax,eax
c001b0ba:	0f 94 c0             	sete   al
c001b0bd:	84 c0                	test   al,al
c001b0bf:	74 0b                	je     c001b0cc <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001b0c1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b0c9:	eb 5d                	jmp    c001b128 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b0cb:	90                   	nop
c001b0cc:	83 ec 08             	sub    esp,0x8
c001b0cf:	68 0c 2d 02 c0       	push   0xc0022d0c
c001b0d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b0d8:	e8 e7 56 fe ff       	call   c00007c4 <strcmp>
c001b0dd:	83 c4 10             	add    esp,0x10
c001b0e0:	85 c0                	test   eax,eax
c001b0e2:	0f 94 c0             	sete   al
c001b0e5:	84 c0                	test   al,al
c001b0e7:	74 0b                	je     c001b0f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001b0e9:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b0f1:	eb 35                	jmp    c001b128 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b0f3:	90                   	nop
c001b0f4:	83 ec 08             	sub    esp,0x8
c001b0f7:	68 e7 59 02 c0       	push   0xc00259e7
c001b0fc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b100:	e8 bf 56 fe ff       	call   c00007c4 <strcmp>
c001b105:	83 c4 10             	add    esp,0x10
c001b108:	85 c0                	test   eax,eax
c001b10a:	0f 94 c0             	sete   al
c001b10d:	84 c0                	test   al,al
c001b10f:	74 0b                	je     c001b11c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001b111:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b119:	eb 0d                	jmp    c001b128 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001b11b:	90                   	nop
c001b11c:	b8 08 00 00 00       	mov    eax,0x8
c001b121:	e9 ea 00 00 00       	jmp    c001b210 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b126:	66 90                	xchg   ax,ax
c001b128:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b12f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b134:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b138:	8b 04 85 e0 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5620]
c001b13f:	83 f8 ff             	cmp    eax,0xffffffff
c001b142:	75 34                	jne    c001b178 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001b144:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b148:	88 c2                	mov    dl,al
c001b14a:	a1 c0 a9 02 c0       	mov    eax,ds:0xc002a9c0
c001b14f:	01 d0                	add    eax,edx
c001b151:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b155:	8b 15 c0 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a9c0
c001b15b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b15f:	89 14 85 e0 a9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5620],edx
c001b166:	a1 c0 a9 02 c0       	mov    eax,ds:0xc002a9c0
c001b16b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b16f:	89 14 85 60 aa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd55a0],edx
c001b176:	eb 18                	jmp    c001b190 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001b178:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b17c:	88 c2                	mov    dl,al
c001b17e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b182:	8b 04 85 e0 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5620]
c001b189:	01 d0                	add    eax,edx
c001b18b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b18f:	90                   	nop
c001b190:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b194:	88 04 24             	mov    BYTE PTR [esp],al
c001b197:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b19b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b19f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b1a7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b1ac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b1b4:	83 ec 0c             	sub    esp,0xc
c001b1b7:	68 00 20 00 00       	push   0x2000
c001b1bc:	e8 f6 ea fe ff       	call   c0009cb7 <malloc>
c001b1c1:	83 c4 10             	add    esp,0x10
c001b1c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b1c8:	68 00 20 00 00       	push   0x2000
c001b1cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b1d1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b1d5:	50                   	push   eax
c001b1d6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b1da:	50                   	push   eax
c001b1db:	e8 b9 c2 fe ff       	call   c0007499 <f_mkfs>
c001b1e0:	83 c4 10             	add    esp,0x10
c001b1e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b1e7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b1ec:	75 0a                	jne    c001b1f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b1ee:	b8 00 00 00 00       	mov    eax,0x0
c001b1f3:	eb 1b                	jmp    c001b210 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b1f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b1f8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b1fd:	75 09                	jne    c001b208 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b1ff:	b8 09 00 00 00       	mov    eax,0x9
c001b204:	eb 0a                	jmp    c001b210 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b206:	66 90                	xchg   ax,ax
c001b208:	b8 01 00 00 00       	mov    eax,0x1
c001b20d:	8d 76 00             	lea    esi,[esi+0x0]
c001b210:	83 c4 2c             	add    esp,0x2c
c001b213:	c3                   	ret    

c001b214 <FAT::tryMount(LogicalDisk*, int)>:
c001b214:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b21a:	a1 c0 a9 02 c0       	mov    eax,ds:0xc002a9c0
c001b21f:	83 f8 14             	cmp    eax,0x14
c001b222:	75 18                	jne    c001b23c <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b224:	83 ec 0c             	sub    esp,0xc
c001b227:	68 ed 59 02 c0       	push   0xc00259ed
c001b22c:	e8 d6 8b ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c001b231:	83 c4 10             	add    esp,0x10
c001b234:	b0 00                	mov    al,0x0
c001b236:	e9 e9 01 00 00       	jmp    c001b424 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b23b:	90                   	nop
c001b23c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b243:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b249:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b24f:	3d 00 02 00 00       	cmp    eax,0x200
c001b254:	74 0a                	je     c001b260 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b256:	b0 00                	mov    al,0x0
c001b258:	e9 c7 01 00 00       	jmp    c001b424 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b25d:	8d 76 00             	lea    esi,[esi+0x0]
c001b260:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b268:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b26f:	8b 04 85 e0 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5620]
c001b276:	83 f8 ff             	cmp    eax,0xffffffff
c001b279:	74 09                	je     c001b284 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b27b:	b0 01                	mov    al,0x1
c001b27d:	e9 a2 01 00 00       	jmp    c001b424 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b282:	66 90                	xchg   ax,ax
c001b284:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b28e:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b296:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b29d:	88 c2                	mov    dl,al
c001b29f:	a1 c0 a9 02 c0       	mov    eax,ds:0xc002a9c0
c001b2a4:	01 d0                	add    eax,edx
c001b2a6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b2ad:	8b 15 c0 a9 02 c0    	mov    edx,DWORD PTR ds:0xc002a9c0
c001b2b3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b2ba:	89 14 85 e0 a9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5620],edx
c001b2c1:	a1 c0 a9 02 c0       	mov    eax,ds:0xc002a9c0
c001b2c6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b2cd:	89 14 85 60 aa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd55a0],edx
c001b2d4:	83 ec 0c             	sub    esp,0xc
c001b2d7:	68 54 02 00 00       	push   0x254
c001b2dc:	e8 d6 e9 fe ff       	call   c0009cb7 <malloc>
c001b2e1:	83 c4 10             	add    esp,0x10
c001b2e4:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b2eb:	83 ec 04             	sub    esp,0x4
c001b2ee:	6a 00                	push   0x0
c001b2f0:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b2f7:	50                   	push   eax
c001b2f8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b2ff:	e8 1d 9b fe ff       	call   c0004e21 <f_mount>
c001b304:	83 c4 10             	add    esp,0x10
c001b307:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b30e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b316:	74 1c                	je     c001b334 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b318:	83 ec 0c             	sub    esp,0xc
c001b31b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b322:	e8 b0 e9 fe ff       	call   c0009cd7 <rfree>
c001b327:	83 c4 10             	add    esp,0x10
c001b32a:	b0 00                	mov    al,0x0
c001b32c:	e9 f3 00 00 00       	jmp    c001b424 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b331:	8d 76 00             	lea    esi,[esi+0x0]
c001b334:	83 ec 04             	sub    esp,0x4
c001b337:	68 00 01 00 00       	push   0x100
c001b33c:	6a 00                	push   0x0
c001b33e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b345:	50                   	push   eax
c001b346:	e8 31 53 fe ff       	call   c000067c <memset>
c001b34b:	83 c4 10             	add    esp,0x10
c001b34e:	83 ec 08             	sub    esp,0x8
c001b351:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b358:	50                   	push   eax
c001b359:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b360:	50                   	push   eax
c001b361:	e8 12 55 fe ff       	call   c0000878 <strcat>
c001b366:	83 c4 10             	add    esp,0x10
c001b369:	83 ec 08             	sub    esp,0x8
c001b36c:	68 fb 59 02 c0       	push   0xc00259fb
c001b371:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b378:	50                   	push   eax
c001b379:	e8 fa 54 fe ff       	call   c0000878 <strcat>
c001b37e:	83 c4 10             	add    esp,0x10
c001b381:	83 ec 04             	sub    esp,0x4
c001b384:	6a 01                	push   0x1
c001b386:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b38d:	50                   	push   eax
c001b38e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b392:	50                   	push   eax
c001b393:	e8 eb 9a fe ff       	call   c0004e83 <f_open>
c001b398:	83 c4 10             	add    esp,0x10
c001b39b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b3a2:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b3a9:	85 c0                	test   eax,eax
c001b3ab:	74 0b                	je     c001b3b8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b3ad:	78 31                	js     c001b3e0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b3af:	83 e8 04             	sub    eax,0x4
c001b3b2:	83 f8 01             	cmp    eax,0x1
c001b3b5:	77 29                	ja     c001b3e0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b3b7:	90                   	nop
c001b3b8:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b3c0:	83 ec 0c             	sub    esp,0xc
c001b3c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b3c7:	50                   	push   eax
c001b3c8:	e8 08 a6 fe ff       	call   c00059d5 <f_close>
c001b3cd:	83 c4 10             	add    esp,0x10
c001b3d0:	90                   	nop
c001b3d1:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b3d9:	74 41                	je     c001b41c <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b3db:	eb 33                	jmp    c001b410 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b3dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b3e0:	83 ec 0c             	sub    esp,0xc
c001b3e3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b3ea:	e8 e8 e8 fe ff       	call   c0009cd7 <rfree>
c001b3ef:	83 c4 10             	add    esp,0x10
c001b3f2:	83 ec 04             	sub    esp,0x4
c001b3f5:	6a 00                	push   0x0
c001b3f7:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b3fe:	50                   	push   eax
c001b3ff:	6a 00                	push   0x0
c001b401:	e8 1b 9a fe ff       	call   c0004e21 <f_mount>
c001b406:	83 c4 10             	add    esp,0x10
c001b409:	b0 00                	mov    al,0x0
c001b40b:	eb 17                	jmp    c001b424 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b40d:	8d 76 00             	lea    esi,[esi+0x0]
c001b410:	a1 c0 a9 02 c0       	mov    eax,ds:0xc002a9c0
c001b415:	40                   	inc    eax
c001b416:	a3 c0 a9 02 c0       	mov    ds:0xc002a9c0,eax
c001b41b:	90                   	nop
c001b41c:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b423:	90                   	nop
c001b424:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b42a:	c3                   	ret    
c001b42b:	90                   	nop

c001b42c <FAT::allocateSwapfile(char const*, int)>:
c001b42c:	55                   	push   ebp
c001b42d:	57                   	push   edi
c001b42e:	56                   	push   esi
c001b42f:	53                   	push   ebx
c001b430:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b436:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b441:	83 ec 0c             	sub    esp,0xc
c001b444:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b44b:	e8 67 e8 fe ff       	call   c0009cb7 <malloc>
c001b450:	83 c4 10             	add    esp,0x10
c001b453:	89 c7                	mov    edi,eax
c001b455:	a1 f0 a8 02 c0       	mov    eax,ds:0xc002a8f0
c001b45a:	83 ec 04             	sub    esp,0x4
c001b45d:	50                   	push   eax
c001b45e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b465:	57                   	push   edi
c001b466:	e8 c5 20 ff ff       	call   c000d530 <File::File(char const*, Process*)>
c001b46b:	83 c4 10             	add    esp,0x10
c001b46e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b475:	83 ec 04             	sub    esp,0x4
c001b478:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b47c:	50                   	push   eax
c001b47d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b481:	50                   	push   eax
c001b482:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b489:	e8 28 24 ff ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c001b48e:	83 c4 10             	add    esp,0x10
c001b491:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b498:	c1 e0 14             	shl    eax,0x14
c001b49b:	89 c7                	mov    edi,eax
c001b49d:	89 c5                	mov    ebp,eax
c001b49f:	c1 fd 1f             	sar    ebp,0x1f
c001b4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b4aa:	89 f9                	mov    ecx,edi
c001b4ac:	31 c1                	xor    ecx,eax
c001b4ae:	89 cb                	mov    ebx,ecx
c001b4b0:	89 e9                	mov    ecx,ebp
c001b4b2:	31 d1                	xor    ecx,edx
c001b4b4:	89 ce                	mov    esi,ecx
c001b4b6:	89 f0                	mov    eax,esi
c001b4b8:	09 d8                	or     eax,ebx
c001b4ba:	0f 84 98 00 00 00    	je     c001b558 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b4c0:	83 ec 0c             	sub    esp,0xc
c001b4c3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b4ca:	e8 b3 22 ff ff       	call   c000d782 <File::unlink()>
c001b4cf:	83 c4 10             	add    esp,0x10
c001b4d2:	83 ec 08             	sub    esp,0x8
c001b4d5:	6a 12                	push   0x12
c001b4d7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b4de:	e8 27 21 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c001b4e3:	83 c4 10             	add    esp,0x10
c001b4e6:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b4ed:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b4f3:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b4fa:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b501:	c1 e0 14             	shl    eax,0x14
c001b504:	99                   	cdq    
c001b505:	6a 01                	push   0x1
c001b507:	52                   	push   edx
c001b508:	50                   	push   eax
c001b509:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b510:	e8 70 bb fe ff       	call   c0007085 <f_expand>
c001b515:	83 c4 10             	add    esp,0x10
c001b518:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b51f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b521:	83 c0 10             	add    eax,0x10
c001b524:	8b 00                	mov    eax,DWORD PTR [eax]
c001b526:	83 ec 0c             	sub    esp,0xc
c001b529:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b52d:	52                   	push   edx
c001b52e:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b532:	52                   	push   edx
c001b533:	6a 00                	push   0x0
c001b535:	68 00 04 00 00       	push   0x400
c001b53a:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b541:	ff d0                	call   eax
c001b543:	83 c4 20             	add    esp,0x20
c001b546:	83 ec 0c             	sub    esp,0xc
c001b549:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b550:	e8 13 21 ff ff       	call   c000d668 <File::close()>
c001b555:	83 c4 10             	add    esp,0x10
c001b558:	83 ec 08             	sub    esp,0x8
c001b55b:	6a 01                	push   0x1
c001b55d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b564:	e8 a1 20 ff ff       	call   c000d60a <File::open(FileOpenMode)>
c001b569:	83 c4 10             	add    esp,0x10
c001b56c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b573:	8b 00                	mov    eax,DWORD PTR [eax]
c001b575:	83 c0 0c             	add    eax,0xc
c001b578:	8b 00                	mov    eax,DWORD PTR [eax]
c001b57a:	83 ec 0c             	sub    esp,0xc
c001b57d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b581:	52                   	push   edx
c001b582:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b586:	52                   	push   edx
c001b587:	6a 00                	push   0x0
c001b589:	6a 04                	push   0x4
c001b58b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b592:	ff d0                	call   eax
c001b594:	83 c4 20             	add    esp,0x20
c001b597:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b59e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b5a4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b5ab:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b5b2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b5b5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b5b8:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b5bf:	83 ec 0c             	sub    esp,0xc
c001b5c2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b5c9:	e8 9a 20 ff ff       	call   c000d668 <File::close()>
c001b5ce:	83 c4 10             	add    esp,0x10
c001b5d1:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b5d8:	ba 00 00 00 00       	mov    edx,0x0
c001b5dd:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b5e3:	5b                   	pop    ebx
c001b5e4:	5e                   	pop    esi
c001b5e5:	5f                   	pop    edi
c001b5e6:	5d                   	pop    ebp
c001b5e7:	c3                   	ret    

c001b5e8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b5e8:	57                   	push   edi
c001b5e9:	56                   	push   esi
c001b5ea:	53                   	push   ebx
c001b5eb:	81 ec 50 02 00 00    	sub    esp,0x250
c001b5f1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b5f9:	74 0d                	je     c001b608 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b5fb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b603:	75 0f                	jne    c001b614 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b605:	8d 76 00             	lea    esi,[esi+0x0]
c001b608:	b8 04 00 00 00       	mov    eax,0x4
c001b60d:	e9 36 01 00 00       	jmp    c001b748 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b612:	66 90                	xchg   ax,ax
c001b614:	83 ec 08             	sub    esp,0x8
c001b617:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b61e:	50                   	push   eax
c001b61f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b626:	e8 b4 a9 fe ff       	call   c0005fdf <f_readdir>
c001b62b:	83 c4 10             	add    esp,0x10
c001b62e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b635:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b63c:	83 ec 0c             	sub    esp,0xc
c001b63f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b646:	83 c0 1a             	add    eax,0x1a
c001b649:	50                   	push   eax
c001b64a:	e8 49 50 fe ff       	call   c0000698 <strlen>
c001b64f:	83 c4 10             	add    esp,0x10
c001b652:	ba 00 00 00 00       	mov    edx,0x0
c001b657:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b65b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b65f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b666:	0f b6 c0             	movzx  eax,al
c001b669:	83 e0 10             	and    eax,0x10
c001b66c:	74 0a                	je     c001b678 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b66e:	b8 02 00 00 00       	mov    eax,0x2
c001b673:	eb 0b                	jmp    c001b680 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b675:	8d 76 00             	lea    esi,[esi+0x0]
c001b678:	b8 01 00 00 00       	mov    eax,0x1
c001b67d:	8d 76 00             	lea    esi,[esi+0x0]
c001b680:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b684:	83 ec 08             	sub    esp,0x8
c001b687:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b68e:	83 c0 1a             	add    eax,0x1a
c001b691:	50                   	push   eax
c001b692:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b696:	83 c0 10             	add    eax,0x10
c001b699:	50                   	push   eax
c001b69a:	e8 99 50 fe ff       	call   c0000738 <strcpy>
c001b69f:	83 c4 10             	add    esp,0x10
c001b6a2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b6a9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b6b0:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b6b4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b6bb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b6c2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b6c9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b6d0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b6d7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b6de:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b6e5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b6ec:	89 c6                	mov    esi,eax
c001b6ee:	89 d7                	mov    edi,edx
c001b6f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b6f2:	89 c8                	mov    eax,ecx
c001b6f4:	89 fa                	mov    edx,edi
c001b6f6:	89 f3                	mov    ebx,esi
c001b6f8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b6ff:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b706:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b70d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b714:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b71a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b721:	84 c0                	test   al,al
c001b723:	75 07                	jne    c001b72c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b725:	b8 07 00 00 00       	mov    eax,0x7
c001b72a:	eb 1c                	jmp    c001b748 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b72c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b733:	85 c0                	test   eax,eax
c001b735:	75 09                	jne    c001b740 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b737:	b8 00 00 00 00       	mov    eax,0x0
c001b73c:	eb 0a                	jmp    c001b748 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b73e:	66 90                	xchg   ax,ax
c001b740:	b8 01 00 00 00       	mov    eax,0x1
c001b745:	8d 76 00             	lea    esi,[esi+0x0]
c001b748:	81 c4 50 02 00 00    	add    esp,0x250
c001b74e:	5b                   	pop    ebx
c001b74f:	5e                   	pop    esi
c001b750:	5f                   	pop    edi
c001b751:	c3                   	ret    
c001b752:	66 90                	xchg   ax,ax

c001b754 <FAT::read(void*, unsigned long, void*, int*)>:
c001b754:	83 ec 1c             	sub    esp,0x1c
c001b757:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b75c:	74 0a                	je     c001b768 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b75e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b763:	75 0b                	jne    c001b770 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b765:	8d 76 00             	lea    esi,[esi+0x0]
c001b768:	b8 04 00 00 00       	mov    eax,0x4
c001b76d:	eb 41                	jmp    c001b7b0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b76f:	90                   	nop
c001b770:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b774:	50                   	push   eax
c001b775:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b779:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b77d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b781:	e8 39 9b fe ff       	call   c00052bf <f_read>
c001b786:	83 c4 10             	add    esp,0x10
c001b789:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b78d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b791:	89 c2                	mov    edx,eax
c001b793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b797:	89 10                	mov    DWORD PTR [eax],edx
c001b799:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b79d:	85 c0                	test   eax,eax
c001b79f:	75 07                	jne    c001b7a8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b7a1:	b8 00 00 00 00       	mov    eax,0x0
c001b7a6:	eb 08                	jmp    c001b7b0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b7a8:	b8 01 00 00 00       	mov    eax,0x1
c001b7ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b7b0:	83 c4 1c             	add    esp,0x1c
c001b7b3:	c3                   	ret    

c001b7b4 <FAT::write(void*, unsigned long, void*, int*)>:
c001b7b4:	83 ec 1c             	sub    esp,0x1c
c001b7b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b7bc:	74 0a                	je     c001b7c8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b7be:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b7c3:	75 0b                	jne    c001b7d0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b7c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b7c8:	b8 04 00 00 00       	mov    eax,0x4
c001b7cd:	eb 41                	jmp    c001b810 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b7cf:	90                   	nop
c001b7d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b7d4:	50                   	push   eax
c001b7d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b7d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b7dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b7e1:	e8 59 9d fe ff       	call   c000553f <f_write>
c001b7e6:	83 c4 10             	add    esp,0x10
c001b7e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b7f1:	89 c2                	mov    edx,eax
c001b7f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b7f7:	89 10                	mov    DWORD PTR [eax],edx
c001b7f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7fd:	85 c0                	test   eax,eax
c001b7ff:	75 07                	jne    c001b808 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b801:	b8 00 00 00 00       	mov    eax,0x0
c001b806:	eb 08                	jmp    c001b810 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b808:	b8 01 00 00 00       	mov    eax,0x1
c001b80d:	8d 76 00             	lea    esi,[esi+0x0]
c001b810:	83 c4 1c             	add    esp,0x1c
c001b813:	c3                   	ret    

c001b814 <FAT::close(void*)>:
c001b814:	83 ec 1c             	sub    esp,0x1c
c001b817:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b81c:	75 0a                	jne    c001b828 <FAT::close(void*)+0x14>
c001b81e:	b8 04 00 00 00       	mov    eax,0x4
c001b823:	eb 3f                	jmp    c001b864 <FAT::close(void*)+0x50>
c001b825:	8d 76 00             	lea    esi,[esi+0x0]
c001b828:	83 ec 0c             	sub    esp,0xc
c001b82b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b82f:	e8 a1 a1 fe ff       	call   c00059d5 <f_close>
c001b834:	83 c4 10             	add    esp,0x10
c001b837:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b83b:	83 ec 0c             	sub    esp,0xc
c001b83e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b842:	e8 80 e4 fe ff       	call   c0009cc7 <free>
c001b847:	83 c4 10             	add    esp,0x10
c001b84a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b84e:	85 c0                	test   eax,eax
c001b850:	75 0a                	jne    c001b85c <FAT::close(void*)+0x48>
c001b852:	b8 00 00 00 00       	mov    eax,0x0
c001b857:	eb 0b                	jmp    c001b864 <FAT::close(void*)+0x50>
c001b859:	8d 76 00             	lea    esi,[esi+0x0]
c001b85c:	b8 01 00 00 00       	mov    eax,0x1
c001b861:	8d 76 00             	lea    esi,[esi+0x0]
c001b864:	83 c4 1c             	add    esp,0x1c
c001b867:	c3                   	ret    

c001b868 <FAT::closeDir(void*)>:
c001b868:	83 ec 1c             	sub    esp,0x1c
c001b86b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b870:	75 0a                	jne    c001b87c <FAT::closeDir(void*)+0x14>
c001b872:	b8 04 00 00 00       	mov    eax,0x4
c001b877:	eb 3f                	jmp    c001b8b8 <FAT::closeDir(void*)+0x50>
c001b879:	8d 76 00             	lea    esi,[esi+0x0]
c001b87c:	83 ec 0c             	sub    esp,0xc
c001b87f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b883:	e8 35 a7 fe ff       	call   c0005fbd <f_closedir>
c001b888:	83 c4 10             	add    esp,0x10
c001b88b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b88f:	83 ec 0c             	sub    esp,0xc
c001b892:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b896:	e8 2c e4 fe ff       	call   c0009cc7 <free>
c001b89b:	83 c4 10             	add    esp,0x10
c001b89e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8a2:	85 c0                	test   eax,eax
c001b8a4:	75 0a                	jne    c001b8b0 <FAT::closeDir(void*)+0x48>
c001b8a6:	b8 00 00 00 00       	mov    eax,0x0
c001b8ab:	eb 0b                	jmp    c001b8b8 <FAT::closeDir(void*)+0x50>
c001b8ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b8b0:	b8 01 00 00 00       	mov    eax,0x1
c001b8b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b8b8:	83 c4 1c             	add    esp,0x1c
c001b8bb:	c3                   	ret    

c001b8bc <FAT::seek(void*, unsigned long long)>:
c001b8bc:	83 ec 2c             	sub    esp,0x2c
c001b8bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b8c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b8cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8cf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b8d4:	75 0a                	jne    c001b8e0 <FAT::seek(void*, unsigned long long)+0x24>
c001b8d6:	b8 04 00 00 00       	mov    eax,0x4
c001b8db:	eb 37                	jmp    c001b914 <FAT::seek(void*, unsigned long long)+0x58>
c001b8dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b8e0:	83 ec 04             	sub    esp,0x4
c001b8e3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b8e7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b8eb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b8ef:	e8 10 a1 fe ff       	call   c0005a04 <f_lseek>
c001b8f4:	83 c4 10             	add    esp,0x10
c001b8f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b8fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b8ff:	85 c0                	test   eax,eax
c001b901:	75 09                	jne    c001b90c <FAT::seek(void*, unsigned long long)+0x50>
c001b903:	b8 00 00 00 00       	mov    eax,0x0
c001b908:	eb 0a                	jmp    c001b914 <FAT::seek(void*, unsigned long long)+0x58>
c001b90a:	66 90                	xchg   ax,ax
c001b90c:	b8 01 00 00 00       	mov    eax,0x1
c001b911:	8d 76 00             	lea    esi,[esi+0x0]
c001b914:	83 c4 2c             	add    esp,0x2c
c001b917:	c3                   	ret    

c001b918 <fatWrapperReadDisk>:
c001b918:	83 ec 1c             	sub    esp,0x1c
c001b91b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b91f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b923:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b927:	89 04 24             	mov    DWORD PTR [esp],eax
c001b92a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b92e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b932:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b937:	8b 04 85 60 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66a0]
c001b93e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b942:	83 ec 0c             	sub    esp,0xc
c001b945:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b949:	52                   	push   edx
c001b94a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b94e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b952:	50                   	push   eax
c001b953:	e8 16 3e ff ff       	call   c000f76e <LogicalDisk::read(unsigned long long, int, void*)>
c001b958:	83 c4 20             	add    esp,0x20
c001b95b:	83 c4 1c             	add    esp,0x1c
c001b95e:	c3                   	ret    
c001b95f:	90                   	nop

c001b960 <fatWrapperWriteDisk>:
c001b960:	83 ec 1c             	sub    esp,0x1c
c001b963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b967:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b96b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b96f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b972:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b976:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b97a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b97f:	8b 04 85 60 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66a0]
c001b986:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b98a:	83 ec 0c             	sub    esp,0xc
c001b98d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b991:	52                   	push   edx
c001b992:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b996:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b99a:	50                   	push   eax
c001b99b:	e8 3a 3e ff ff       	call   c000f7da <LogicalDisk::write(unsigned long long, int, void*)>
c001b9a0:	83 c4 20             	add    esp,0x20
c001b9a3:	83 c4 1c             	add    esp,0x1c
c001b9a6:	c3                   	ret    
c001b9a7:	90                   	nop

c001b9a8 <fatWrapperIoctl>:
c001b9a8:	53                   	push   ebx
c001b9a9:	83 ec 28             	sub    esp,0x28
c001b9ac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b9b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b9b4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b9b8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b9bc:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b9c1:	75 31                	jne    c001b9f4 <fatWrapperIoctl+0x4c>
c001b9c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b9c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b9cb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b9d0:	8b 04 85 60 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66a0]
c001b9d7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b9dd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b9e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b9e7:	66 89 02             	mov    WORD PTR [edx],ax
c001b9ea:	b8 00 00 00 00       	mov    eax,0x0
c001b9ef:	e9 bc 00 00 00       	jmp    c001bab0 <fatWrapperIoctl+0x108>
c001b9f4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b9f9:	75 6d                	jne    c001ba68 <fatWrapperIoctl+0xc0>
c001b9fb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b9ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ba03:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ba08:	8b 04 85 60 99 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd66a0]
c001ba0f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001ba15:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001ba1b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001ba21:	89 c8                	mov    eax,ecx
c001ba23:	89 da                	mov    edx,ebx
c001ba25:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ba29:	c1 e0 0a             	shl    eax,0xa
c001ba2c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001ba31:	8b 0c 8d 60 99 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd66a0]
c001ba38:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001ba3e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001ba44:	89 cb                	mov    ebx,ecx
c001ba46:	c1 fb 1f             	sar    ebx,0x1f
c001ba49:	53                   	push   ebx
c001ba4a:	51                   	push   ecx
c001ba4b:	52                   	push   edx
c001ba4c:	50                   	push   eax
c001ba4d:	e8 7e 63 00 00       	call   c0021dd0 <__udivdi3>
c001ba52:	83 c4 10             	add    esp,0x10
c001ba55:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ba59:	89 01                	mov    DWORD PTR [ecx],eax
c001ba5b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ba5e:	b8 00 00 00 00       	mov    eax,0x0
c001ba63:	eb 4b                	jmp    c001bab0 <fatWrapperIoctl+0x108>
c001ba65:	8d 76 00             	lea    esi,[esi+0x0]
c001ba68:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001ba6d:	75 09                	jne    c001ba78 <fatWrapperIoctl+0xd0>
c001ba6f:	b8 00 00 00 00       	mov    eax,0x0
c001ba74:	eb 3a                	jmp    c001bab0 <fatWrapperIoctl+0x108>
c001ba76:	66 90                	xchg   ax,ax
c001ba78:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001ba7d:	75 19                	jne    c001ba98 <fatWrapperIoctl+0xf0>
c001ba7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ba83:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ba87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ba8b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001ba91:	b8 00 00 00 00       	mov    eax,0x0
c001ba96:	eb 18                	jmp    c001bab0 <fatWrapperIoctl+0x108>
c001ba98:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001ba9d:	75 09                	jne    c001baa8 <fatWrapperIoctl+0x100>
c001ba9f:	b8 00 00 00 00       	mov    eax,0x0
c001baa4:	eb 0a                	jmp    c001bab0 <fatWrapperIoctl+0x108>
c001baa6:	66 90                	xchg   ax,ax
c001baa8:	b8 04 00 00 00       	mov    eax,0x4
c001baad:	8d 76 00             	lea    esi,[esi+0x0]
c001bab0:	83 c4 28             	add    esp,0x28
c001bab3:	5b                   	pop    ebx
c001bab4:	c3                   	ret    
c001bab5:	90                   	nop
c001bab6:	66 90                	xchg   ax,ax

c001bab8 <FAT::FAT()>:
c001bab8:	83 ec 1c             	sub    esp,0x1c
c001babb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001babf:	83 ec 0c             	sub    esp,0xc
c001bac2:	50                   	push   eax
c001bac3:	e8 14 18 ff ff       	call   c000d2dc <Filesystem::Filesystem()>
c001bac8:	83 c4 10             	add    esp,0x10
c001bacb:	ba 10 5a 02 c0       	mov    edx,0xc0025a10
c001bad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bad4:	89 10                	mov    DWORD PTR [eax],edx
c001bad6:	c7 05 c0 a9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a9c0,0x0
c001bae0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bae8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001baed:	7f 15                	jg     c001bb04 <FAT::FAT()+0x4c>
c001baef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baf3:	c7 04 85 e0 a9 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5620],0xffffffff
c001bafe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bb02:	eb e4                	jmp    c001bae8 <FAT::FAT()+0x30>
c001bb04:	90                   	nop
c001bb05:	83 c4 1c             	add    esp,0x1c
c001bb08:	c3                   	ret    
c001bb09:	90                   	nop
c001bb0a:	66 90                	xchg   ax,ax

c001bb0c <FAT::fixFilepath(char*)>:
c001bb0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb10:	8a 00                	mov    al,BYTE PTR [eax]
c001bb12:	3c 40                	cmp    al,0x40
c001bb14:	7e 2e                	jle    c001bb44 <FAT::fixFilepath(char*)+0x38>
c001bb16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb1a:	8a 00                	mov    al,BYTE PTR [eax]
c001bb1c:	83 e8 41             	sub    eax,0x41
c001bb1f:	88 c2                	mov    dl,al
c001bb21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb25:	88 10                	mov    BYTE PTR [eax],dl
c001bb27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb2b:	8a 00                	mov    al,BYTE PTR [eax]
c001bb2d:	0f be c0             	movsx  eax,al
c001bb30:	8b 04 85 e0 a9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5620]
c001bb37:	83 c0 30             	add    eax,0x30
c001bb3a:	88 c2                	mov    dl,al
c001bb3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb40:	88 10                	mov    BYTE PTR [eax],dl
c001bb42:	66 90                	xchg   ax,ax
c001bb44:	90                   	nop
c001bb45:	c3                   	ret    
c001bb46:	66 90                	xchg   ax,ax

c001bb48 <FAT::open(char const*, void**, FileOpenMode)>:
c001bb48:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bb4e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bb56:	74 0c                	je     c001bb64 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001bb58:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bb60:	75 0e                	jne    c001bb70 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001bb62:	66 90                	xchg   ax,ax
c001bb64:	b8 04 00 00 00       	mov    eax,0x4
c001bb69:	e9 06 01 00 00       	jmp    c001bc74 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001bb6e:	66 90                	xchg   ax,ax
c001bb70:	83 ec 08             	sub    esp,0x8
c001bb73:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bb7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bb7e:	50                   	push   eax
c001bb7f:	e8 b4 4b fe ff       	call   c0000738 <strcpy>
c001bb84:	83 c4 10             	add    esp,0x10
c001bb87:	83 ec 08             	sub    esp,0x8
c001bb8a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bb8e:	50                   	push   eax
c001bb8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bb96:	e8 71 ff ff ff       	call   c001bb0c <FAT::fixFilepath(char*)>
c001bb9b:	83 c4 10             	add    esp,0x10
c001bb9e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001bba6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bbad:	83 e0 01             	and    eax,0x1
c001bbb0:	74 0a                	je     c001bbbc <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001bbb2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001bbba:	66 90                	xchg   ax,ax
c001bbbc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bbc3:	83 e0 04             	and    eax,0x4
c001bbc6:	74 10                	je     c001bbd8 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001bbc8:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001bbd0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bbd8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bbdf:	83 e0 02             	and    eax,0x2
c001bbe2:	74 08                	je     c001bbec <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001bbe4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001bbec:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bbf3:	83 e0 08             	and    eax,0x8
c001bbf6:	74 08                	je     c001bc00 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001bbf8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001bc00:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bc07:	83 e0 10             	and    eax,0x10
c001bc0a:	74 08                	je     c001bc14 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001bc0c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001bc14:	83 ec 0c             	sub    esp,0xc
c001bc17:	68 50 02 00 00       	push   0x250
c001bc1c:	e8 96 e0 fe ff       	call   c0009cb7 <malloc>
c001bc21:	83 c4 10             	add    esp,0x10
c001bc24:	89 c2                	mov    edx,eax
c001bc26:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bc2d:	89 10                	mov    DWORD PTR [eax],edx
c001bc2f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001bc37:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bc3e:	8b 00                	mov    eax,DWORD PTR [eax]
c001bc40:	83 ec 04             	sub    esp,0x4
c001bc43:	52                   	push   edx
c001bc44:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bc48:	52                   	push   edx
c001bc49:	50                   	push   eax
c001bc4a:	e8 34 92 fe ff       	call   c0004e83 <f_open>
c001bc4f:	83 c4 10             	add    esp,0x10
c001bc52:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001bc59:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001bc61:	74 09                	je     c001bc6c <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001bc63:	b8 01 00 00 00       	mov    eax,0x1
c001bc68:	eb 0a                	jmp    c001bc74 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001bc6a:	66 90                	xchg   ax,ax
c001bc6c:	b8 00 00 00 00       	mov    eax,0x0
c001bc71:	8d 76 00             	lea    esi,[esi+0x0]
c001bc74:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bc7a:	c3                   	ret    
c001bc7b:	90                   	nop

c001bc7c <FAT::openDir(char const*, void**)>:
c001bc7c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bc82:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bc8a:	74 0c                	je     c001bc98 <FAT::openDir(char const*, void**)+0x1c>
c001bc8c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bc94:	75 0e                	jne    c001bca4 <FAT::openDir(char const*, void**)+0x28>
c001bc96:	66 90                	xchg   ax,ax
c001bc98:	b8 04 00 00 00       	mov    eax,0x4
c001bc9d:	e9 82 00 00 00       	jmp    c001bd24 <FAT::openDir(char const*, void**)+0xa8>
c001bca2:	66 90                	xchg   ax,ax
c001bca4:	83 ec 08             	sub    esp,0x8
c001bca7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bcae:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bcb2:	50                   	push   eax
c001bcb3:	e8 80 4a fe ff       	call   c0000738 <strcpy>
c001bcb8:	83 c4 10             	add    esp,0x10
c001bcbb:	83 ec 08             	sub    esp,0x8
c001bcbe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bcc2:	50                   	push   eax
c001bcc3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bcca:	e8 3d fe ff ff       	call   c001bb0c <FAT::fixFilepath(char*)>
c001bccf:	83 c4 10             	add    esp,0x10
c001bcd2:	83 ec 0c             	sub    esp,0xc
c001bcd5:	6a 4c                	push   0x4c
c001bcd7:	e8 db df fe ff       	call   c0009cb7 <malloc>
c001bcdc:	83 c4 10             	add    esp,0x10
c001bcdf:	89 c2                	mov    edx,eax
c001bce1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bce8:	89 10                	mov    DWORD PTR [eax],edx
c001bcea:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bcf1:	8b 00                	mov    eax,DWORD PTR [eax]
c001bcf3:	83 ec 08             	sub    esp,0x8
c001bcf6:	8d 54 24 14          	lea    edx,[esp+0x14]
c001bcfa:	52                   	push   edx
c001bcfb:	50                   	push   eax
c001bcfc:	e8 ba a1 fe ff       	call   c0005ebb <f_opendir>
c001bd01:	83 c4 10             	add    esp,0x10
c001bd04:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bd0b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001bd13:	74 07                	je     c001bd1c <FAT::openDir(char const*, void**)+0xa0>
c001bd15:	b8 01 00 00 00       	mov    eax,0x1
c001bd1a:	eb 08                	jmp    c001bd24 <FAT::openDir(char const*, void**)+0xa8>
c001bd1c:	b8 00 00 00 00       	mov    eax,0x0
c001bd21:	8d 76 00             	lea    esi,[esi+0x0]
c001bd24:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bd2a:	c3                   	ret    
c001bd2b:	90                   	nop

c001bd2c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001bd2c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bd32:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001bd3a:	75 0c                	jne    c001bd48 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001bd3c:	b8 04 00 00 00       	mov    eax,0x4
c001bd41:	e9 d2 00 00 00       	jmp    c001be18 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bd46:	66 90                	xchg   ax,ax
c001bd48:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001bd50:	75 0a                	jne    c001bd5c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001bd52:	b8 04 00 00 00       	mov    eax,0x4
c001bd57:	e9 bc 00 00 00       	jmp    c001be18 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bd5c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001bd64:	75 0a                	jne    c001bd70 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001bd66:	b8 04 00 00 00       	mov    eax,0x4
c001bd6b:	e9 a8 00 00 00       	jmp    c001be18 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bd70:	83 ec 08             	sub    esp,0x8
c001bd73:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bd7a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bd81:	50                   	push   eax
c001bd82:	e8 b1 49 fe ff       	call   c0000738 <strcpy>
c001bd87:	83 c4 10             	add    esp,0x10
c001bd8a:	83 ec 08             	sub    esp,0x8
c001bd8d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bd94:	50                   	push   eax
c001bd95:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bd9c:	e8 6b fd ff ff       	call   c001bb0c <FAT::fixFilepath(char*)>
c001bda1:	83 c4 10             	add    esp,0x10
c001bda4:	83 ec 08             	sub    esp,0x8
c001bda7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bdab:	50                   	push   eax
c001bdac:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bdb3:	50                   	push   eax
c001bdb4:	e8 c1 a2 fe ff       	call   c000607a <f_stat>
c001bdb9:	83 c4 10             	add    esp,0x10
c001bdbc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bdc3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bdca:	85 c0                	test   eax,eax
c001bdcc:	74 0a                	je     c001bdd8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001bdce:	83 f8 04             	cmp    eax,0x4
c001bdd1:	74 35                	je     c001be08 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001bdd3:	eb 3b                	jmp    c001be10 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001bdd5:	8d 76 00             	lea    esi,[esi+0x0]
c001bdd8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bddc:	0f b6 c0             	movzx  eax,al
c001bddf:	83 e0 10             	and    eax,0x10
c001bde2:	0f 95 c2             	setne  dl
c001bde5:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001bdec:	88 10                	mov    BYTE PTR [eax],dl
c001bdee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bdf1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bdf5:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001bdfc:	89 01                	mov    DWORD PTR [ecx],eax
c001bdfe:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001be01:	b8 00 00 00 00       	mov    eax,0x0
c001be06:	eb 10                	jmp    c001be18 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001be08:	b8 02 00 00 00       	mov    eax,0x2
c001be0d:	eb 09                	jmp    c001be18 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001be0f:	90                   	nop
c001be10:	b8 01 00 00 00       	mov    eax,0x1
c001be15:	8d 76 00             	lea    esi,[esi+0x0]
c001be18:	81 c4 2c 02 00 00    	add    esp,0x22c
c001be1e:	c3                   	ret    
c001be1f:	90                   	nop

c001be20 <FAT::unlink(char const*)>:
c001be20:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001be26:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001be2e:	75 08                	jne    c001be38 <FAT::unlink(char const*)+0x18>
c001be30:	b8 04 00 00 00       	mov    eax,0x4
c001be35:	eb 61                	jmp    c001be98 <FAT::unlink(char const*)+0x78>
c001be37:	90                   	nop
c001be38:	83 ec 08             	sub    esp,0x8
c001be3b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001be42:	8d 44 24 18          	lea    eax,[esp+0x18]
c001be46:	50                   	push   eax
c001be47:	e8 ec 48 fe ff       	call   c0000738 <strcpy>
c001be4c:	83 c4 10             	add    esp,0x10
c001be4f:	83 ec 08             	sub    esp,0x8
c001be52:	8d 44 24 14          	lea    eax,[esp+0x14]
c001be56:	50                   	push   eax
c001be57:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001be5e:	e8 a9 fc ff ff       	call   c001bb0c <FAT::fixFilepath(char*)>
c001be63:	83 c4 10             	add    esp,0x10
c001be66:	83 ec 0c             	sub    esp,0xc
c001be69:	8d 44 24 18          	lea    eax,[esp+0x18]
c001be6d:	50                   	push   eax
c001be6e:	e8 59 a5 fe ff       	call   c00063cc <f_unlink>
c001be73:	83 c4 10             	add    esp,0x10
c001be76:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001be7d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001be84:	85 c0                	test   eax,eax
c001be86:	75 08                	jne    c001be90 <FAT::unlink(char const*)+0x70>
c001be88:	b8 00 00 00 00       	mov    eax,0x0
c001be8d:	eb 09                	jmp    c001be98 <FAT::unlink(char const*)+0x78>
c001be8f:	90                   	nop
c001be90:	b8 01 00 00 00       	mov    eax,0x1
c001be95:	8d 76 00             	lea    esi,[esi+0x0]
c001be98:	81 c4 1c 01 00 00    	add    esp,0x11c
c001be9e:	c3                   	ret    
c001be9f:	90                   	nop

c001bea0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001bea0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001bea6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001bead:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001beb4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001beb8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bebc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001bec4:	75 0a                	jne    c001bed0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001bec6:	b8 04 00 00 00       	mov    eax,0x4
c001becb:	e9 30 01 00 00       	jmp    c001c000 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bed0:	83 ec 08             	sub    esp,0x8
c001bed3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001beda:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bede:	50                   	push   eax
c001bedf:	e8 54 48 fe ff       	call   c0000738 <strcpy>
c001bee4:	83 c4 10             	add    esp,0x10
c001bee7:	83 ec 08             	sub    esp,0x8
c001beea:	8d 44 24 20          	lea    eax,[esp+0x20]
c001beee:	50                   	push   eax
c001beef:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bef6:	e8 11 fc ff ff       	call   c001bb0c <FAT::fixFilepath(char*)>
c001befb:	83 c4 10             	add    esp,0x10
c001befe:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001bf06:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001bf0e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf13:	83 e0 01             	and    eax,0x1
c001bf16:	74 08                	je     c001bf20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001bf18:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001bf20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf25:	83 e0 02             	and    eax,0x2
c001bf28:	74 0a                	je     c001bf34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001bf2a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001bf32:	66 90                	xchg   ax,ax
c001bf34:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf39:	83 e0 04             	and    eax,0x4
c001bf3c:	74 0a                	je     c001bf48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001bf3e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001bf46:	66 90                	xchg   ax,ax
c001bf48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bf4d:	83 e0 08             	and    eax,0x8
c001bf50:	74 0a                	je     c001bf5c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001bf52:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001bf5a:	66 90                	xchg   ax,ax
c001bf5c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf61:	83 e0 01             	and    eax,0x1
c001bf64:	74 0a                	je     c001bf70 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001bf66:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001bf6e:	66 90                	xchg   ax,ax
c001bf70:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf75:	83 e0 02             	and    eax,0x2
c001bf78:	74 0a                	je     c001bf84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001bf7a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001bf82:	66 90                	xchg   ax,ax
c001bf84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf89:	83 e0 04             	and    eax,0x4
c001bf8c:	74 0a                	je     c001bf98 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001bf8e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001bf96:	66 90                	xchg   ax,ax
c001bf98:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bf9d:	83 e0 08             	and    eax,0x8
c001bfa0:	74 0a                	je     c001bfac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001bfa2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001bfaa:	66 90                	xchg   ax,ax
c001bfac:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001bfb3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001bfba:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001bfc2:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001bfca:	83 ec 04             	sub    esp,0x4
c001bfcd:	52                   	push   edx
c001bfce:	50                   	push   eax
c001bfcf:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bfd3:	50                   	push   eax
c001bfd4:	e8 95 aa fe ff       	call   c0006a6e <f_chmod>
c001bfd9:	83 c4 10             	add    esp,0x10
c001bfdc:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001bfe3:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001bfea:	85 c0                	test   eax,eax
c001bfec:	75 0a                	jne    c001bff8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001bfee:	b8 00 00 00 00       	mov    eax,0x0
c001bff3:	eb 0b                	jmp    c001c000 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bff5:	8d 76 00             	lea    esi,[esi+0x0]
c001bff8:	b8 01 00 00 00       	mov    eax,0x1
c001bffd:	8d 76 00             	lea    esi,[esi+0x0]
c001c000:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c006:	c3                   	ret    
c001c007:	90                   	nop

c001c008 <FAT::rename(char const*, char const*)>:
c001c008:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c00e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c016:	74 0c                	je     c001c024 <FAT::rename(char const*, char const*)+0x1c>
c001c018:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c020:	75 0e                	jne    c001c030 <FAT::rename(char const*, char const*)+0x28>
c001c022:	66 90                	xchg   ax,ax
c001c024:	b8 04 00 00 00       	mov    eax,0x4
c001c029:	e9 9e 00 00 00       	jmp    c001c0cc <FAT::rename(char const*, char const*)+0xc4>
c001c02e:	66 90                	xchg   ax,ax
c001c030:	83 ec 08             	sub    esp,0x8
c001c033:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c03a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c041:	50                   	push   eax
c001c042:	e8 f1 46 fe ff       	call   c0000738 <strcpy>
c001c047:	83 c4 10             	add    esp,0x10
c001c04a:	83 ec 08             	sub    esp,0x8
c001c04d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c054:	50                   	push   eax
c001c055:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c05c:	e8 ab fa ff ff       	call   c001bb0c <FAT::fixFilepath(char*)>
c001c061:	83 c4 10             	add    esp,0x10
c001c064:	83 ec 08             	sub    esp,0x8
c001c067:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c06e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c072:	50                   	push   eax
c001c073:	e8 c0 46 fe ff       	call   c0000738 <strcpy>
c001c078:	83 c4 10             	add    esp,0x10
c001c07b:	83 ec 08             	sub    esp,0x8
c001c07e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c082:	50                   	push   eax
c001c083:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c08a:	e8 7d fa ff ff       	call   c001bb0c <FAT::fixFilepath(char*)>
c001c08f:	83 c4 10             	add    esp,0x10
c001c092:	83 ec 08             	sub    esp,0x8
c001c095:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c099:	50                   	push   eax
c001c09a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c0a1:	50                   	push   eax
c001c0a2:	e8 d4 a6 fe ff       	call   c000677b <f_rename>
c001c0a7:	83 c4 10             	add    esp,0x10
c001c0aa:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c0b1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c0b8:	85 c0                	test   eax,eax
c001c0ba:	75 08                	jne    c001c0c4 <FAT::rename(char const*, char const*)+0xbc>
c001c0bc:	b8 00 00 00 00       	mov    eax,0x0
c001c0c1:	eb 09                	jmp    c001c0cc <FAT::rename(char const*, char const*)+0xc4>
c001c0c3:	90                   	nop
c001c0c4:	b8 01 00 00 00       	mov    eax,0x1
c001c0c9:	8d 76 00             	lea    esi,[esi+0x0]
c001c0cc:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c0d2:	c3                   	ret    
c001c0d3:	90                   	nop

c001c0d4 <FAT::mkdir(char const*)>:
c001c0d4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c0da:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c0e2:	75 08                	jne    c001c0ec <FAT::mkdir(char const*)+0x18>
c001c0e4:	b8 04 00 00 00       	mov    eax,0x4
c001c0e9:	eb 61                	jmp    c001c14c <FAT::mkdir(char const*)+0x78>
c001c0eb:	90                   	nop
c001c0ec:	83 ec 08             	sub    esp,0x8
c001c0ef:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c0f6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c0fa:	50                   	push   eax
c001c0fb:	e8 38 46 fe ff       	call   c0000738 <strcpy>
c001c100:	83 c4 10             	add    esp,0x10
c001c103:	83 ec 08             	sub    esp,0x8
c001c106:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c10a:	50                   	push   eax
c001c10b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c112:	e8 f5 f9 ff ff       	call   c001bb0c <FAT::fixFilepath(char*)>
c001c117:	83 c4 10             	add    esp,0x10
c001c11a:	83 ec 0c             	sub    esp,0xc
c001c11d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c121:	50                   	push   eax
c001c122:	e8 28 a4 fe ff       	call   c000654f <f_mkdir>
c001c127:	83 c4 10             	add    esp,0x10
c001c12a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c131:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c138:	85 c0                	test   eax,eax
c001c13a:	75 08                	jne    c001c144 <FAT::mkdir(char const*)+0x70>
c001c13c:	b8 00 00 00 00       	mov    eax,0x0
c001c141:	eb 09                	jmp    c001c14c <FAT::mkdir(char const*)+0x78>
c001c143:	90                   	nop
c001c144:	b8 01 00 00 00       	mov    eax,0x1
c001c149:	8d 76 00             	lea    esi,[esi+0x0]
c001c14c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c152:	c3                   	ret    
c001c153:	90                   	nop

c001c154 <FAT::exists(char const*)>:
c001c154:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c15a:	83 ec 08             	sub    esp,0x8
c001c15d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c164:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c168:	50                   	push   eax
c001c169:	e8 ca 45 fe ff       	call   c0000738 <strcpy>
c001c16e:	83 c4 10             	add    esp,0x10
c001c171:	83 ec 08             	sub    esp,0x8
c001c174:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c178:	50                   	push   eax
c001c179:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c180:	e8 87 f9 ff ff       	call   c001bb0c <FAT::fixFilepath(char*)>
c001c185:	83 c4 10             	add    esp,0x10
c001c188:	83 ec 08             	sub    esp,0x8
c001c18b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001c192:	50                   	push   eax
c001c193:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c197:	50                   	push   eax
c001c198:	e8 dd 9e fe ff       	call   c000607a <f_stat>
c001c19d:	83 c4 10             	add    esp,0x10
c001c1a0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c1a7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c1ae:	85 c0                	test   eax,eax
c001c1b0:	75 06                	jne    c001c1b8 <FAT::exists(char const*)+0x64>
c001c1b2:	b0 01                	mov    al,0x1
c001c1b4:	eb 06                	jmp    c001c1bc <FAT::exists(char const*)+0x68>
c001c1b6:	66 90                	xchg   ax,ax
c001c1b8:	b0 00                	mov    al,0x0
c001c1ba:	66 90                	xchg   ax,ax
c001c1bc:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c1c2:	c3                   	ret    
c001c1c3:	90                   	nop

c001c1c4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c1c4:	b8 08 00 00 00       	mov    eax,0x8
c001c1c9:	c3                   	ret    

c001c1ca <ISO9660::seek(void*, unsigned long long)>:
c001c1ca:	53                   	push   ebx
c001c1cb:	b8 04 00 00 00       	mov    eax,0x4
c001c1d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c1d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c1dc:	85 d2                	test   edx,edx
c001c1de:	74 17                	je     c001c1f7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c1e0:	89 c8                	mov    eax,ecx
c001c1e2:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c1e5:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c1e8:	b8 01 00 00 00       	mov    eax,0x1
c001c1ed:	73 08                	jae    c001c1f7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c1ef:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c1f2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c1f5:	31 c0                	xor    eax,eax
c001c1f7:	5b                   	pop    ebx
c001c1f8:	c3                   	ret    
c001c1f9:	90                   	nop

c001c1fa <ISO9660::tell(void*, unsigned long long*)>:
c001c1fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c1fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c202:	85 d2                	test   edx,edx
c001c204:	74 12                	je     c001c218 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c206:	85 c0                	test   eax,eax
c001c208:	74 0e                	je     c001c218 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c20a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c20d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c210:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c213:	89 10                	mov    DWORD PTR [eax],edx
c001c215:	31 c0                	xor    eax,eax
c001c217:	c3                   	ret    
c001c218:	b8 04 00 00 00       	mov    eax,0x4
c001c21d:	c3                   	ret    

c001c21e <ISO9660::getName()>:
c001c21e:	b8 70 5a 02 c0       	mov    eax,0xc0025a70
c001c223:	c3                   	ret    

c001c224 <ISO9660::stat(void*, unsigned long long*)>:
c001c224:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c228:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c22c:	85 d2                	test   edx,edx
c001c22e:	74 12                	je     c001c242 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c230:	85 c0                	test   eax,eax
c001c232:	74 0e                	je     c001c242 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c234:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c237:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c23a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c23d:	89 10                	mov    DWORD PTR [eax],edx
c001c23f:	31 c0                	xor    eax,eax
c001c241:	c3                   	ret    
c001c242:	b8 04 00 00 00       	mov    eax,0x4
c001c247:	c3                   	ret    

c001c248 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c248:	b8 01 00 00 00       	mov    eax,0x1
c001c24d:	c3                   	ret    

c001c24e <ISO9660::unlink(char const*)>:
c001c24e:	b8 01 00 00 00       	mov    eax,0x1
c001c253:	c3                   	ret    

c001c254 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c254:	b8 01 00 00 00       	mov    eax,0x1
c001c259:	c3                   	ret    

c001c25a <ISO9660::rename(char const*, char const*)>:
c001c25a:	b8 01 00 00 00       	mov    eax,0x1
c001c25f:	c3                   	ret    

c001c260 <ISO9660::mkdir(char const*)>:
c001c260:	b8 01 00 00 00       	mov    eax,0x1
c001c265:	c3                   	ret    

c001c266 <ISO9660::close(void*)>:
c001c266:	83 ec 0c             	sub    esp,0xc
c001c269:	b8 04 00 00 00       	mov    eax,0x4
c001c26e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c272:	85 d2                	test   edx,edx
c001c274:	74 0e                	je     c001c284 <ISO9660::close(void*)+0x1e>
c001c276:	83 ec 0c             	sub    esp,0xc
c001c279:	52                   	push   edx
c001c27a:	e8 48 da fe ff       	call   c0009cc7 <free>
c001c27f:	83 c4 10             	add    esp,0x10
c001c282:	31 c0                	xor    eax,eax
c001c284:	83 c4 0c             	add    esp,0xc
c001c287:	c3                   	ret    

c001c288 <ISO9660::closeDir(void*)>:
c001c288:	83 ec 0c             	sub    esp,0xc
c001c28b:	b8 04 00 00 00       	mov    eax,0x4
c001c290:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c294:	85 d2                	test   edx,edx
c001c296:	74 0e                	je     c001c2a6 <ISO9660::closeDir(void*)+0x1e>
c001c298:	83 ec 0c             	sub    esp,0xc
c001c29b:	52                   	push   edx
c001c29c:	e8 26 da fe ff       	call   c0009cc7 <free>
c001c2a1:	83 c4 10             	add    esp,0x10
c001c2a4:	31 c0                	xor    eax,eax
c001c2a6:	83 c4 0c             	add    esp,0xc
c001c2a9:	c3                   	ret    

c001c2aa <ISO9660::~ISO9660()>:
c001c2aa:	83 ec 0c             	sub    esp,0xc
c001c2ad:	ba 94 5a 02 c0       	mov    edx,0xc0025a94
c001c2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2b6:	89 10                	mov    DWORD PTR [eax],edx
c001c2b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2bc:	83 ec 0c             	sub    esp,0xc
c001c2bf:	50                   	push   eax
c001c2c0:	e8 3b 10 ff ff       	call   c000d300 <Filesystem::~Filesystem()>
c001c2c5:	83 c4 10             	add    esp,0x10
c001c2c8:	90                   	nop
c001c2c9:	83 c4 0c             	add    esp,0xc
c001c2cc:	c3                   	ret    
c001c2cd:	90                   	nop

c001c2ce <ISO9660::~ISO9660()>:
c001c2ce:	83 ec 0c             	sub    esp,0xc
c001c2d1:	83 ec 0c             	sub    esp,0xc
c001c2d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2d8:	e8 cd ff ff ff       	call   c001c2aa <ISO9660::~ISO9660()>
c001c2dd:	83 c4 10             	add    esp,0x10
c001c2e0:	83 ec 08             	sub    esp,0x8
c001c2e3:	6a 08                	push   0x8
c001c2e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2e9:	e8 f6 0b ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c001c2ee:	83 c4 10             	add    esp,0x10
c001c2f1:	83 c4 0c             	add    esp,0xc
c001c2f4:	c3                   	ret    

c001c2f5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c2f5:	55                   	push   ebp
c001c2f6:	31 c9                	xor    ecx,ecx
c001c2f8:	57                   	push   edi
c001c2f9:	56                   	push   esi
c001c2fa:	53                   	push   ebx
c001c2fb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c2ff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c303:	89 eb                	mov    ebx,ebp
c001c305:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c309:	39 ce                	cmp    esi,ecx
c001c30b:	7e 17                	jle    c001c324 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c30d:	31 d2                	xor    edx,edx
c001c30f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c313:	7d 13                	jge    c001c328 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c315:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c319:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c31c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c31f:	75 0d                	jne    c001c32e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c321:	42                   	inc    edx
c001c322:	eb eb                	jmp    c001c30f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c324:	31 c0                	xor    eax,eax
c001c326:	eb 0a                	jmp    c001c332 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c328:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c32c:	eb 04                	jmp    c001c332 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c32e:	41                   	inc    ecx
c001c32f:	43                   	inc    ebx
c001c330:	eb d7                	jmp    c001c309 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c332:	5b                   	pop    ebx
c001c333:	5e                   	pop    esi
c001c334:	5f                   	pop    edi
c001c335:	5d                   	pop    ebp
c001c336:	c3                   	ret    

c001c337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c337:	57                   	push   edi
c001c338:	56                   	push   esi
c001c339:	53                   	push   ebx
c001c33a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c33e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c342:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c346:	39 35 c0 aa 02 c0    	cmp    DWORD PTR ds:0xc002aac0,esi
c001c34c:	75 08                	jne    c001c356 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001c34e:	38 1d e0 6d 02 c0    	cmp    BYTE PTR ds:0xc0026de0,bl
c001c354:	74 4a                	je     c001c3a0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c356:	83 ec 0c             	sub    esp,0xc
c001c359:	31 d2                	xor    edx,edx
c001c35b:	68 e0 aa 02 c0       	push   0xc002aae0
c001c360:	0f be c3             	movsx  eax,bl
c001c363:	6a 01                	push   0x1
c001c365:	52                   	push   edx
c001c366:	56                   	push   esi
c001c367:	ff 34 85 5c 98 02 c0 	push   DWORD PTR [eax*4-0x3ffd67a4]
c001c36e:	e8 fb 33 ff ff       	call   c000f76e <LogicalDisk::read(unsigned long long, int, void*)>
c001c373:	83 c4 20             	add    esp,0x20
c001c376:	85 c0                	test   eax,eax
c001c378:	75 0e                	jne    c001c388 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001c37a:	89 35 c0 aa 02 c0    	mov    DWORD PTR ds:0xc002aac0,esi
c001c380:	88 1d e0 6d 02 c0    	mov    BYTE PTR ds:0xc0026de0,bl
c001c386:	eb 18                	jmp    c001c3a0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c388:	50                   	push   eax
c001c389:	68 00 08 00 00       	push   0x800
c001c38e:	6a 00                	push   0x0
c001c390:	57                   	push   edi
c001c391:	e8 e6 42 fe ff       	call   c000067c <memset>
c001c396:	83 c4 10             	add    esp,0x10
c001c399:	b8 01 00 00 00       	mov    eax,0x1
c001c39e:	eb 0e                	jmp    c001c3ae <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001c3a0:	be e0 aa 02 c0       	mov    esi,0xc002aae0
c001c3a5:	b9 00 08 00 00       	mov    ecx,0x800
c001c3aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c3ac:	31 c0                	xor    eax,eax
c001c3ae:	5b                   	pop    ebx
c001c3af:	5e                   	pop    esi
c001c3b0:	5f                   	pop    edi
c001c3b1:	c3                   	ret    

c001c3b2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001c3b2:	81 ec 10 08 00 00    	sub    esp,0x810
c001c3b8:	c7 05 c0 aa 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002aac0,0xdeadbeef
c001c3c2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c3c9:	83 c0 41             	add    eax,0x41
c001c3cc:	0f be c0             	movsx  eax,al
c001c3cf:	50                   	push   eax
c001c3d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c3d4:	50                   	push   eax
c001c3d5:	6a 10                	push   0x10
c001c3d7:	e8 5b ff ff ff       	call   c001c337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c3dc:	83 c4 10             	add    esp,0x10
c001c3df:	31 d2                	xor    edx,edx
c001c3e1:	85 c0                	test   eax,eax
c001c3e3:	75 24                	jne    c001c409 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c3e5:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c3ea:	75 1d                	jne    c001c409 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c3ec:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c3f1:	75 16                	jne    c001c409 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c3f3:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c3f8:	75 0f                	jne    c001c409 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c3fa:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c3ff:	75 08                	jne    c001c409 <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c401:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c406:	0f 94 c2             	sete   dl
c001c409:	88 d0                	mov    al,dl
c001c40b:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c411:	c3                   	ret    

c001c412 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c412:	55                   	push   ebp
c001c413:	57                   	push   edi
c001c414:	56                   	push   esi
c001c415:	53                   	push   ebx
c001c416:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c41c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c423:	85 ed                	test   ebp,ebp
c001c425:	0f 84 da 01 00 00    	je     c001c605 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c42b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c433:	0f 84 cc 01 00 00    	je     c001c605 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c439:	b8 01 00 00 00       	mov    eax,0x1
c001c43e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c442:	0f 85 c2 01 00 00    	jne    c001c60a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c448:	31 d2                	xor    edx,edx
c001c44a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c451:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c454:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c457:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c45a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c45d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c461:	01 c8                	add    eax,ecx
c001c463:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c466:	11 da                	adc    edx,ebx
c001c468:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c46c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c470:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c474:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c478:	19 d7                	sbb    edi,edx
c001c47a:	72 11                	jb     c001c48d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c47c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c47f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c483:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c487:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c48b:	eb 0c                	jmp    c001c499 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c48d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c491:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c495:	29 ce                	sub    esi,ecx
c001c497:	19 df                	sbb    edi,ebx
c001c499:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c49c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c49f:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c4a3:	c1 e0 0b             	shl    eax,0xb
c001c4a6:	01 c8                	add    eax,ecx
c001c4a8:	11 da                	adc    edx,ebx
c001c4aa:	89 04 24             	mov    DWORD PTR [esp],eax
c001c4ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c4b1:	51                   	push   ecx
c001c4b2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c4b6:	50                   	push   eax
c001c4b7:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c4bb:	53                   	push   ebx
c001c4bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c4c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4c4:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c4c8:	50                   	push   eax
c001c4c9:	e8 69 fe ff ff       	call   c001c337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c4ce:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c4d1:	b8 00 08 00 00       	mov    eax,0x800
c001c4d6:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c4dc:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c4e0:	29 d0                	sub    eax,edx
c001c4e2:	83 c4 10             	add    esp,0x10
c001c4e5:	89 f9                	mov    ecx,edi
c001c4e7:	39 c6                	cmp    esi,eax
c001c4e9:	83 d9 00             	sbb    ecx,0x0
c001c4ec:	7d 1b                	jge    c001c509 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c4ee:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c4f3:	75 12                	jne    c001c507 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c4f5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c4fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c502:	e9 fa 00 00 00       	jmp    c001c601 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c507:	89 f0                	mov    eax,esi
c001c509:	01 d3                	add    ebx,edx
c001c50b:	31 d2                	xor    edx,edx
c001c50d:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c511:	39 c2                	cmp    edx,eax
c001c513:	7d 14                	jge    c001c529 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c515:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c51c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c520:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c523:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c526:	42                   	inc    edx
c001c527:	eb e8                	jmp    c001c511 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c529:	89 c2                	mov    edx,eax
c001c52b:	85 c0                	test   eax,eax
c001c52d:	79 02                	jns    c001c531 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c52f:	31 d2                	xor    edx,edx
c001c531:	01 c2                	add    edx,eax
c001c533:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c536:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c53d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c541:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c545:	99                   	cdq    
c001c546:	01 c1                	add    ecx,eax
c001c548:	11 d3                	adc    ebx,edx
c001c54a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c54e:	29 c6                	sub    esi,eax
c001c550:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c554:	19 d7                	sbb    edi,edx
c001c556:	89 34 24             	mov    DWORD PTR [esp],esi
c001c559:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c55d:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c562:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c565:	b8 00 00 00 00       	mov    eax,0x0
c001c56a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c56e:	7d 43                	jge    c001c5b3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c570:	52                   	push   edx
c001c571:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c575:	50                   	push   eax
c001c576:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c57a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c57e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c582:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c586:	50                   	push   eax
c001c587:	e8 ab fd ff ff       	call   c001c337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c58c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c594:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c599:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c5a1:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c5a9:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c5ae:	83 c4 10             	add    esp,0x10
c001c5b1:	eb aa                	jmp    c001c55d <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c5b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c5ba:	74 2a                	je     c001c5e6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c5bc:	50                   	push   eax
c001c5bd:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c5c1:	50                   	push   eax
c001c5c2:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c5c6:	56                   	push   esi
c001c5c7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c5cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c5cf:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c5d3:	51                   	push   ecx
c001c5d4:	e8 5e fd ff ff       	call   c001c337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c5d9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c5dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c5e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c5e3:	83 c4 10             	add    esp,0x10
c001c5e6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c5ed:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c5f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c5f5:	89 18                	mov    DWORD PTR [eax],ebx
c001c5f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c5fb:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c5fe:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c601:	31 c0                	xor    eax,eax
c001c603:	eb 05                	jmp    c001c60a <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c605:	b8 04 00 00 00       	mov    eax,0x4
c001c60a:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c610:	5b                   	pop    ebx
c001c611:	5e                   	pop    esi
c001c612:	5f                   	pop    edi
c001c613:	5d                   	pop    ebp
c001c614:	c3                   	ret    
c001c615:	90                   	nop

c001c616 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c616:	55                   	push   ebp
c001c617:	57                   	push   edi
c001c618:	56                   	push   esi
c001c619:	53                   	push   ebx
c001c61a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c620:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c627:	85 ed                	test   ebp,ebp
c001c629:	0f 84 51 02 00 00    	je     c001c880 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c62f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c637:	0f 84 43 02 00 00    	je     c001c880 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c63d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c640:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c643:	75 0a                	jne    c001c64f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c645:	b8 07 00 00 00       	mov    eax,0x7
c001c64a:	e9 36 02 00 00       	jmp    c001c885 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c64f:	50                   	push   eax
c001c650:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c654:	50                   	push   eax
c001c655:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c65c:	53                   	push   ebx
c001c65d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c660:	c1 e0 0b             	shl    eax,0xb
c001c663:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c666:	c1 e8 0b             	shr    eax,0xb
c001c669:	50                   	push   eax
c001c66a:	e8 c8 fc ff ff       	call   c001c337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c66f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c672:	83 c4 10             	add    esp,0x10
c001c675:	89 c1                	mov    ecx,eax
c001c677:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c67a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c680:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c683:	84 db                	test   bl,bl
c001c685:	0f 85 8b 00 00 00    	jne    c001c716 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c68b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c691:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c694:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c69a:	29 c6                	sub    esi,eax
c001c69c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c6a0:	89 f3                	mov    ebx,esi
c001c6a2:	89 f1                	mov    ecx,esi
c001c6a4:	c1 fb 1f             	sar    ebx,0x1f
c001c6a7:	01 f0                	add    eax,esi
c001c6a9:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c6ac:	11 da                	adc    edx,ebx
c001c6ae:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6b1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c6b5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c6b8:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c6bb:	89 d8                	mov    eax,ebx
c001c6bd:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c6c1:	ba 00 00 00 00       	mov    edx,0x0
c001c6c6:	19 f8                	sbb    eax,edi
c001c6c8:	b8 00 00 00 00       	mov    eax,0x0
c001c6cd:	73 08                	jae    c001c6d7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c6cf:	89 f0                	mov    eax,esi
c001c6d1:	89 fa                	mov    edx,edi
c001c6d3:	29 c8                	sub    eax,ecx
c001c6d5:	19 da                	sbb    edx,ebx
c001c6d7:	89 d7                	mov    edi,edx
c001c6d9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c6dc:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c6df:	09 c7                	or     edi,eax
c001c6e1:	0f 84 5e ff ff ff    	je     c001c645 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c6e7:	57                   	push   edi
c001c6e8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c6ec:	50                   	push   eax
c001c6ed:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c6f4:	53                   	push   ebx
c001c6f5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c6f8:	c1 e0 0b             	shl    eax,0xb
c001c6fb:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c6ff:	c1 e8 0b             	shr    eax,0xb
c001c702:	50                   	push   eax
c001c703:	e8 2f fc ff ff       	call   c001c337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c708:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c70b:	83 c4 10             	add    esp,0x10
c001c70e:	25 ff 07 00 00       	and    eax,0x7ff
c001c713:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c716:	31 ff                	xor    edi,edi
c001c718:	56                   	push   esi
c001c719:	6a 28                	push   0x28
c001c71b:	6a 00                	push   0x0
c001c71d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c721:	50                   	push   eax
c001c722:	e8 55 3f fe ff       	call   c000067c <memset>
c001c727:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c72a:	25 ff 07 00 00       	and    eax,0x7ff
c001c72f:	89 c6                	mov    esi,eax
c001c731:	83 c6 21             	add    esi,0x21
c001c734:	83 d7 00             	adc    edi,0x0
c001c737:	83 c4 10             	add    esp,0x10
c001c73a:	31 c9                	xor    ecx,ecx
c001c73c:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c743:	83 f9 28             	cmp    ecx,0x28
c001c746:	88 04 24             	mov    BYTE PTR [esp],al
c001c749:	0f 94 c2             	sete   dl
c001c74c:	88 d0                	mov    al,dl
c001c74e:	ba ff 07 00 00       	mov    edx,0x7ff
c001c753:	39 f2                	cmp    edx,esi
c001c755:	ba 00 00 00 00       	mov    edx,0x0
c001c75a:	19 fa                	sbb    edx,edi
c001c75c:	0f 92 c2             	setb   dl
c001c75f:	09 c2                	or     edx,eax
c001c761:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c765:	0f 94 c0             	sete   al
c001c768:	08 d0                	or     al,dl
c001c76a:	75 16                	jne    c001c782 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c76c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c770:	74 10                	je     c001c782 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c772:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c775:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c779:	41                   	inc    ecx
c001c77a:	83 c6 01             	add    esi,0x1
c001c77d:	83 d7 00             	adc    edi,0x0
c001c780:	eb ba                	jmp    c001c73c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c782:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c789:	83 ec 0c             	sub    esp,0xc
c001c78c:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c790:	56                   	push   esi
c001c791:	e8 02 3f fe ff       	call   c0000698 <strlen>
c001c796:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c79d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c7a1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c7a9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c7ac:	5a                   	pop    edx
c001c7ad:	25 ff 07 00 00       	and    eax,0x7ff
c001c7b2:	59                   	pop    ecx
c001c7b3:	01 f8                	add    eax,edi
c001c7b5:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c7bb:	83 e0 02             	and    eax,0x2
c001c7be:	3c 01                	cmp    al,0x1
c001c7c0:	19 c0                	sbb    eax,eax
c001c7c2:	83 c0 02             	add    eax,0x2
c001c7c5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c7c9:	56                   	push   esi
c001c7ca:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c7ce:	50                   	push   eax
c001c7cf:	e8 64 3f fe ff       	call   c0000738 <strcpy>
c001c7d4:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c7d8:	83 c4 10             	add    esp,0x10
c001c7db:	84 c0                	test   al,al
c001c7dd:	75 21                	jne    c001c800 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c7df:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c7e7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c7ef:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c7f7:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c7fe:	eb 28                	jmp    c001c828 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c800:	fe c8                	dec    al
c001c802:	75 24                	jne    c001c828 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c804:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c80c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c814:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c81c:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c823:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c828:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c82c:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c833:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c83a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c83c:	0f b6 f3             	movzx  esi,bl
c001c83f:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c846:	31 db                	xor    ebx,ebx
c001c848:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c84e:	89 df                	mov    edi,ebx
c001c850:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c856:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c859:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c85c:	39 c6                	cmp    esi,eax
c001c85e:	19 d7                	sbb    edi,edx
c001c860:	72 10                	jb     c001c872 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c862:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c869:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c870:	eb 0a                	jmp    c001c87c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c872:	29 f0                	sub    eax,esi
c001c874:	19 da                	sbb    edx,ebx
c001c876:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c879:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c87c:	31 c0                	xor    eax,eax
c001c87e:	eb 05                	jmp    c001c885 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c880:	b8 04 00 00 00       	mov    eax,0x4
c001c885:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c88b:	5b                   	pop    ebx
c001c88c:	5e                   	pop    esi
c001c88d:	5f                   	pop    edi
c001c88e:	5d                   	pop    ebp
c001c88f:	c3                   	ret    

c001c890 <readRoot(unsigned int*, unsigned int*, char)>:
c001c890:	57                   	push   edi
c001c891:	56                   	push   esi
c001c892:	81 ec 38 08 00 00    	sub    esp,0x838
c001c898:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c8a0:	50                   	push   eax
c001c8a1:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c8a5:	50                   	push   eax
c001c8a6:	6a 10                	push   0x10
c001c8a8:	e8 8a fa ff ff       	call   c001c337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c8ad:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c8b4:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c8b8:	b9 22 00 00 00       	mov    ecx,0x22
c001c8bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c8bf:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c8c6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c8ca:	89 10                	mov    DWORD PTR [eax],edx
c001c8cc:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001c8d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c8d7:	89 10                	mov    DWORD PTR [eax],edx
c001c8d9:	81 c4 44 08 00 00    	add    esp,0x844
c001c8df:	b0 01                	mov    al,0x1
c001c8e1:	5e                   	pop    esi
c001c8e2:	5f                   	pop    edi
c001c8e3:	c3                   	ret    

c001c8e4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001c8e4:	55                   	push   ebp
c001c8e5:	57                   	push   edi
c001c8e6:	56                   	push   esi
c001c8e7:	53                   	push   ebx
c001c8e8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c8ee:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c8f5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c8fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c900:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c904:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c908:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c90c:	75 03                	jne    c001c911 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c90e:	83 c3 02             	add    ebx,0x2
c001c911:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c914:	75 03                	jne    c001c919 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c916:	43                   	inc    ebx
c001c917:	eb f8                	jmp    c001c911 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c919:	52                   	push   edx
c001c91a:	68 00 01 00 00       	push   0x100
c001c91f:	6a 00                	push   0x0
c001c921:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c925:	50                   	push   eax
c001c926:	e8 51 3d fe ff       	call   c000067c <memset>
c001c92b:	83 c4 10             	add    esp,0x10
c001c92e:	31 d2                	xor    edx,edx
c001c930:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c933:	84 c0                	test   al,al
c001c935:	74 21                	je     c001c958 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c937:	3c 2f                	cmp    al,0x2f
c001c939:	75 0b                	jne    c001c946 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c93b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c93f:	bd 01 00 00 00       	mov    ebp,0x1
c001c944:	eb 14                	jmp    c001c95a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c946:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c949:	80 f9 19             	cmp    cl,0x19
c001c94c:	77 03                	ja     c001c951 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c94e:	83 e8 20             	sub    eax,0x20
c001c951:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c955:	42                   	inc    edx
c001c956:	eb d8                	jmp    c001c930 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c958:	31 ed                	xor    ebp,ebp
c001c95a:	83 ec 0c             	sub    esp,0xc
c001c95d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c964:	e8 4e d3 fe ff       	call   c0009cb7 <malloc>
c001c969:	89 c6                	mov    esi,eax
c001c96b:	89 c2                	mov    edx,eax
c001c96d:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001c974:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001c97a:	c1 ef 0b             	shr    edi,0xb
c001c97d:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c984:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c988:	83 c4 10             	add    esp,0x10
c001c98b:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c990:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c994:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001c99b:	74 29                	je     c001c9c6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001c99d:	50                   	push   eax
c001c99e:	57                   	push   edi
c001c99f:	52                   	push   edx
c001c9a0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c9a4:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c9ab:	e8 87 f9 ff ff       	call   c001c337 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c9b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c9b4:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c9bb:	81 c2 00 08 00 00    	add    edx,0x800
c001c9c1:	83 c4 10             	add    esp,0x10
c001c9c4:	eb ca                	jmp    c001c990 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001c9c6:	83 ec 0c             	sub    esp,0xc
c001c9c9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c9cd:	57                   	push   edi
c001c9ce:	e8 c5 3c fe ff       	call   c0000698 <strlen>
c001c9d3:	50                   	push   eax
c001c9d4:	57                   	push   edi
c001c9d5:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c9dc:	56                   	push   esi
c001c9dd:	e8 13 f9 ff ff       	call   c001c2f5 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c9e2:	83 c4 20             	add    esp,0x20
c001c9e5:	85 c0                	test   eax,eax
c001c9e7:	75 13                	jne    c001c9fc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001c9e9:	83 ec 0c             	sub    esp,0xc
c001c9ec:	56                   	push   esi
c001c9ed:	e8 d5 d2 fe ff       	call   c0009cc7 <free>
c001c9f2:	83 c4 10             	add    esp,0x10
c001c9f5:	31 c0                	xor    eax,eax
c001c9f7:	e9 b3 00 00 00       	jmp    c001caaf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001c9fc:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001ca00:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001ca04:	c1 e7 08             	shl    edi,0x8
c001ca07:	c1 e2 10             	shl    edx,0x10
c001ca0a:	09 d7                	or     edi,edx
c001ca0c:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001ca10:	09 d7                	or     edi,edx
c001ca12:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001ca16:	c1 e2 18             	shl    edx,0x18
c001ca19:	09 d7                	or     edi,edx
c001ca1b:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001ca1f:	89 d1                	mov    ecx,edx
c001ca21:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001ca25:	c1 e1 08             	shl    ecx,0x8
c001ca28:	c1 e2 10             	shl    edx,0x10
c001ca2b:	09 ca                	or     edx,ecx
c001ca2d:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001ca31:	09 ca                	or     edx,ecx
c001ca33:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001ca37:	c1 e1 18             	shl    ecx,0x18
c001ca3a:	09 ca                	or     edx,ecx
c001ca3c:	89 e9                	mov    ecx,ebp
c001ca3e:	84 c9                	test   cl,cl
c001ca40:	74 3c                	je     c001ca7e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001ca42:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ca46:	83 ec 0c             	sub    esp,0xc
c001ca49:	56                   	push   esi
c001ca4a:	e8 78 d2 fe ff       	call   c0009cc7 <free>
c001ca4f:	83 c4 0c             	add    esp,0xc
c001ca52:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ca59:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ca5e:	50                   	push   eax
c001ca5f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ca66:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001ca6d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca71:	52                   	push   edx
c001ca72:	57                   	push   edi
c001ca73:	53                   	push   ebx
c001ca74:	e8 6b fe ff ff       	call   c001c8e4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001ca79:	83 c4 20             	add    esp,0x20
c001ca7c:	eb 31                	jmp    c001caaf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001ca7e:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001ca81:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001ca88:	d0 e8                	shr    al,1
c001ca8a:	89 3b                	mov    DWORD PTR [ebx],edi
c001ca8c:	83 e0 01             	and    eax,0x1
c001ca8f:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ca96:	83 ec 0c             	sub    esp,0xc
c001ca99:	89 13                	mov    DWORD PTR [ebx],edx
c001ca9b:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001caa2:	89 03                	mov    DWORD PTR [ebx],eax
c001caa4:	56                   	push   esi
c001caa5:	e8 1d d2 fe ff       	call   c0009cc7 <free>
c001caaa:	83 c4 10             	add    esp,0x10
c001caad:	b0 01                	mov    al,0x1
c001caaf:	81 c4 1c 01 00 00    	add    esp,0x11c
c001cab5:	5b                   	pop    ebx
c001cab6:	5e                   	pop    esi
c001cab7:	5f                   	pop    edi
c001cab8:	5d                   	pop    ebp
c001cab9:	c3                   	ret    

c001caba <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001caba:	55                   	push   ebp
c001cabb:	57                   	push   edi
c001cabc:	56                   	push   esi
c001cabd:	53                   	push   ebx
c001cabe:	83 ec 20             	sub    esp,0x20
c001cac1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001cac5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001cac9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cacd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cad5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001cadd:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001cae2:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001cae8:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001caee:	57                   	push   edi
c001caef:	8d 44 24 14          	lea    eax,[esp+0x14]
c001caf3:	50                   	push   eax
c001caf4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001caf8:	50                   	push   eax
c001caf9:	e8 92 fd ff ff       	call   c001c890 <readRoot(unsigned int*, unsigned int*, char)>
c001cafe:	5a                   	pop    edx
c001caff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cb03:	e8 90 3b fe ff       	call   c0000698 <strlen>
c001cb08:	83 c4 10             	add    esp,0x10
c001cb0b:	83 f8 03             	cmp    eax,0x3
c001cb0e:	77 17                	ja     c001cb27 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001cb10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb14:	89 03                	mov    DWORD PTR [ebx],eax
c001cb16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb1a:	89 06                	mov    DWORD PTR [esi],eax
c001cb1c:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001cb23:	b0 01                	mov    al,0x1
c001cb25:	eb 19                	jmp    c001cb40 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001cb27:	50                   	push   eax
c001cb28:	55                   	push   ebp
c001cb29:	57                   	push   edi
c001cb2a:	56                   	push   esi
c001cb2b:	53                   	push   ebx
c001cb2c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb30:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb34:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cb38:	e8 a7 fd ff ff       	call   c001c8e4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001cb3d:	83 c4 20             	add    esp,0x20
c001cb40:	83 c4 1c             	add    esp,0x1c
c001cb43:	5b                   	pop    ebx
c001cb44:	5e                   	pop    esi
c001cb45:	5f                   	pop    edi
c001cb46:	5d                   	pop    ebp
c001cb47:	c3                   	ret    

c001cb48 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001cb48:	57                   	push   edi
c001cb49:	56                   	push   esi
c001cb4a:	53                   	push   ebx
c001cb4b:	83 ec 10             	sub    esp,0x10
c001cb4e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cb52:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cb56:	85 ff                	test   edi,edi
c001cb58:	0f 84 8b 00 00 00    	je     c001cbe9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001cb5e:	85 f6                	test   esi,esi
c001cb60:	0f 84 83 00 00 00    	je     c001cbe9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001cb66:	b8 03 00 00 00       	mov    eax,0x3
c001cb6b:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001cb70:	75 7c                	jne    c001cbee <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001cb72:	83 ec 0c             	sub    esp,0xc
c001cb75:	6a 1c                	push   0x1c
c001cb77:	e8 3b d1 fe ff       	call   c0009cb7 <malloc>
c001cb7c:	89 07                	mov    DWORD PTR [edi],eax
c001cb7e:	89 c3                	mov    ebx,eax
c001cb80:	58                   	pop    eax
c001cb81:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb85:	50                   	push   eax
c001cb86:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001cb89:	50                   	push   eax
c001cb8a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb8e:	50                   	push   eax
c001cb8f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb93:	50                   	push   eax
c001cb94:	56                   	push   esi
c001cb95:	e8 20 ff ff ff       	call   c001caba <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cb9a:	83 c4 20             	add    esp,0x20
c001cb9d:	84 c0                	test   al,al
c001cb9f:	74 07                	je     c001cba8 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001cba1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cba6:	74 0b                	je     c001cbb3 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001cba8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001cbac:	b8 01 00 00 00       	mov    eax,0x1
c001cbb1:	eb 3b                	jmp    c001cbee <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001cbb3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cbb7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001cbbb:	89 03                	mov    DWORD PTR [ebx],eax
c001cbbd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001cbc4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cbc8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cbcf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cbd6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cbd9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cbe0:	8a 06                	mov    al,BYTE PTR [esi]
c001cbe2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cbe5:	31 c0                	xor    eax,eax
c001cbe7:	eb 05                	jmp    c001cbee <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001cbe9:	b8 04 00 00 00       	mov    eax,0x4
c001cbee:	83 c4 10             	add    esp,0x10
c001cbf1:	5b                   	pop    ebx
c001cbf2:	5e                   	pop    esi
c001cbf3:	5f                   	pop    edi
c001cbf4:	c3                   	ret    
c001cbf5:	90                   	nop

c001cbf6 <ISO9660::exists(char const*)>:
c001cbf6:	83 ec 28             	sub    esp,0x28
c001cbf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbfd:	8d 54 24 18          	lea    edx,[esp+0x18]
c001cc01:	52                   	push   edx
c001cc02:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001cc05:	52                   	push   edx
c001cc06:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cc0a:	52                   	push   edx
c001cc0b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001cc0f:	52                   	push   edx
c001cc10:	50                   	push   eax
c001cc11:	e8 a4 fe ff ff       	call   c001caba <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cc16:	83 c4 3c             	add    esp,0x3c
c001cc19:	c3                   	ret    

c001cc1a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001cc1a:	56                   	push   esi
c001cc1b:	53                   	push   ebx
c001cc1c:	83 ec 14             	sub    esp,0x14
c001cc1f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cc23:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cc27:	85 db                	test   ebx,ebx
c001cc29:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cc2d:	0f 94 c2             	sete   dl
c001cc30:	85 f6                	test   esi,esi
c001cc32:	0f 94 c0             	sete   al
c001cc35:	08 c2                	or     dl,al
c001cc37:	75 68                	jne    c001cca1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001cc39:	85 c9                	test   ecx,ecx
c001cc3b:	74 64                	je     c001cca1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001cc3d:	83 ec 0c             	sub    esp,0xc
c001cc40:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001cc43:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cc47:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cc4d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cc54:	50                   	push   eax
c001cc55:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001cc58:	50                   	push   eax
c001cc59:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cc5d:	50                   	push   eax
c001cc5e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cc62:	50                   	push   eax
c001cc63:	51                   	push   ecx
c001cc64:	e8 51 fe ff ff       	call   c001caba <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cc69:	83 c4 20             	add    esp,0x20
c001cc6c:	ba 01 00 00 00       	mov    edx,0x1
c001cc71:	84 c0                	test   al,al
c001cc73:	74 31                	je     c001cca6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cc75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc79:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cc80:	89 03                	mov    DWORD PTR [ebx],eax
c001cc82:	ba 00 00 00 00       	mov    edx,0x0
c001cc87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc8b:	85 c0                	test   eax,eax
c001cc8d:	0f 95 06             	setne  BYTE PTR [esi]
c001cc90:	74 14                	je     c001cca6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cc92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cc98:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cc9f:	eb 05                	jmp    c001cca6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cca1:	ba 04 00 00 00       	mov    edx,0x4
c001cca6:	83 c4 14             	add    esp,0x14
c001cca9:	89 d0                	mov    eax,edx
c001ccab:	5b                   	pop    ebx
c001ccac:	5e                   	pop    esi
c001ccad:	c3                   	ret    

c001ccae <ISO9660::openDir(char const*, void**)>:
c001ccae:	57                   	push   edi
c001ccaf:	56                   	push   esi
c001ccb0:	53                   	push   ebx
c001ccb1:	83 ec 10             	sub    esp,0x10
c001ccb4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ccb8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ccbc:	85 ff                	test   edi,edi
c001ccbe:	74 7b                	je     c001cd3b <ISO9660::openDir(char const*, void**)+0x8d>
c001ccc0:	85 f6                	test   esi,esi
c001ccc2:	74 77                	je     c001cd3b <ISO9660::openDir(char const*, void**)+0x8d>
c001ccc4:	83 ec 0c             	sub    esp,0xc
c001ccc7:	6a 1c                	push   0x1c
c001ccc9:	e8 e9 cf fe ff       	call   c0009cb7 <malloc>
c001ccce:	89 07                	mov    DWORD PTR [edi],eax
c001ccd0:	89 c3                	mov    ebx,eax
c001ccd2:	58                   	pop    eax
c001ccd3:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ccd7:	50                   	push   eax
c001ccd8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ccdb:	50                   	push   eax
c001ccdc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cce0:	50                   	push   eax
c001cce1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cce5:	50                   	push   eax
c001cce6:	56                   	push   esi
c001cce7:	e8 ce fd ff ff       	call   c001caba <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ccec:	83 c4 20             	add    esp,0x20
c001ccef:	84 c0                	test   al,al
c001ccf1:	74 07                	je     c001ccfa <ISO9660::openDir(char const*, void**)+0x4c>
c001ccf3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ccf8:	75 0b                	jne    c001cd05 <ISO9660::openDir(char const*, void**)+0x57>
c001ccfa:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ccfe:	b8 01 00 00 00       	mov    eax,0x1
c001cd03:	eb 3b                	jmp    c001cd40 <ISO9660::openDir(char const*, void**)+0x92>
c001cd05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd09:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001cd0d:	89 03                	mov    DWORD PTR [ebx],eax
c001cd0f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001cd16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cd1a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cd21:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cd28:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cd2b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cd32:	8a 06                	mov    al,BYTE PTR [esi]
c001cd34:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cd37:	31 c0                	xor    eax,eax
c001cd39:	eb 05                	jmp    c001cd40 <ISO9660::openDir(char const*, void**)+0x92>
c001cd3b:	b8 04 00 00 00       	mov    eax,0x4
c001cd40:	83 c4 10             	add    esp,0x10
c001cd43:	5b                   	pop    ebx
c001cd44:	5e                   	pop    esi
c001cd45:	5f                   	pop    edi
c001cd46:	c3                   	ret    
c001cd47:	90                   	nop

c001cd48 <ISO9660::ISO9660()>:
c001cd48:	83 ec 0c             	sub    esp,0xc
c001cd4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd4f:	83 ec 0c             	sub    esp,0xc
c001cd52:	50                   	push   eax
c001cd53:	e8 84 05 ff ff       	call   c000d2dc <Filesystem::Filesystem()>
c001cd58:	83 c4 10             	add    esp,0x10
c001cd5b:	ba 94 5a 02 c0       	mov    edx,0xc0025a94
c001cd60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd64:	89 10                	mov    DWORD PTR [eax],edx
c001cd66:	90                   	nop
c001cd67:	83 c4 0c             	add    esp,0xc
c001cd6a:	c3                   	ret    
c001cd6b:	90                   	nop

c001cd6c <SoundCard::beginPlayback()>:
c001cd6c:	c7 44 24 04 f4 5a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025af4
c001cd74:	e9 8e 70 ff ff       	jmp    c0013e07 <Krnl::panic(char const*)>
c001cd79:	90                   	nop

c001cd7a <SoundCard::stopPlayback()>:
c001cd7a:	c7 44 24 04 28 5b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025b28
c001cd82:	e9 80 70 ff ff       	jmp    c0013e07 <Krnl::panic(char const*)>
c001cd87:	90                   	nop

c001cd88 <SoundCard::SoundCard(char const*)>:
c001cd88:	83 ec 1c             	sub    esp,0x1c
c001cd8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd8f:	83 ec 08             	sub    esp,0x8
c001cd92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd96:	50                   	push   eax
c001cd97:	e8 aa 18 ff ff       	call   c000e646 <Device::Device(char const*)>
c001cd9c:	83 c4 10             	add    esp,0x10
c001cd9f:	ba c0 5b 02 c0       	mov    edx,0xc0025bc0
c001cda4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cda8:	89 10                	mov    DWORD PTR [eax],edx
c001cdaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdae:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cdb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdb9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cdc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdc7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cdd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdd5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001cddf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cde3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001cded:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cdf5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001cdfa:	7f 19                	jg     c001ce15 <SoundCard::SoundCard(char const*)+0x8d>
c001cdfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ce04:	83 c2 54             	add    edx,0x54
c001ce07:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001ce0f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ce13:	eb e0                	jmp    c001cdf5 <SoundCard::SoundCard(char const*)+0x6d>
c001ce15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce19:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ce20:	90                   	nop
c001ce21:	83 c4 1c             	add    esp,0x1c
c001ce24:	c3                   	ret    
c001ce25:	90                   	nop

c001ce26 <SoundCard::~SoundCard()>:
c001ce26:	83 ec 0c             	sub    esp,0xc
c001ce29:	ba c0 5b 02 c0       	mov    edx,0xc0025bc0
c001ce2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce32:	89 10                	mov    DWORD PTR [eax],edx
c001ce34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce38:	83 ec 0c             	sub    esp,0xc
c001ce3b:	50                   	push   eax
c001ce3c:	e8 03 15 ff ff       	call   c000e344 <Device::~Device()>
c001ce41:	83 c4 10             	add    esp,0x10
c001ce44:	90                   	nop
c001ce45:	83 c4 0c             	add    esp,0xc
c001ce48:	c3                   	ret    
c001ce49:	90                   	nop

c001ce4a <SoundCard::~SoundCard()>:
c001ce4a:	83 ec 0c             	sub    esp,0xc
c001ce4d:	83 ec 0c             	sub    esp,0xc
c001ce50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce54:	e8 cd ff ff ff       	call   c001ce26 <SoundCard::~SoundCard()>
c001ce59:	83 c4 10             	add    esp,0x10
c001ce5c:	83 ec 08             	sub    esp,0x8
c001ce5f:	68 e8 01 00 00       	push   0x1e8
c001ce64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce68:	e8 77 00 ff ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c001ce6d:	83 c4 10             	add    esp,0x10
c001ce70:	83 c4 0c             	add    esp,0xc
c001ce73:	c3                   	ret    

c001ce74 <SoundCard::configureRates(int, int, int)>:
c001ce74:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ce78:	31 c0                	xor    eax,eax
c001ce7a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ce81:	75 20                	jne    c001cea3 <SoundCard::configureRates(int, int, int)+0x2f>
c001ce83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ce87:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ce8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ce91:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ce97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce9b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001cea1:	b0 01                	mov    al,0x1
c001cea3:	c3                   	ret    

c001cea4 <SoundCard::getSamples16(int, short*)>:
c001cea4:	55                   	push   ebp
c001cea5:	57                   	push   edi
c001cea6:	31 ff                	xor    edi,edi
c001cea8:	56                   	push   esi
c001cea9:	53                   	push   ebx
c001ceaa:	31 db                	xor    ebx,ebx
c001ceac:	83 ec 18             	sub    esp,0x18
c001ceaf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ceb3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ceb7:	68 5b 5b 02 c0       	push   0xc0025b5b
c001cebc:	e8 04 01 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001cec1:	83 c4 0c             	add    esp,0xc
c001cec4:	8d 04 36             	lea    eax,[esi+esi*1]
c001cec7:	50                   	push   eax
c001cec8:	6a 00                	push   0x0
c001ceca:	55                   	push   ebp
c001cecb:	e8 ac 37 fe ff       	call   c000067c <memset>
c001ced0:	83 c4 10             	add    esp,0x10
c001ced3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ced7:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001cede:	85 c0                	test   eax,eax
c001cee0:	74 1b                	je     c001cefd <SoundCard::getSamples16(int, short*)+0x59>
c001cee2:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cee6:	75 15                	jne    c001cefd <SoundCard::getSamples16(int, short*)+0x59>
c001cee8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ceec:	55                   	push   ebp
c001ceed:	56                   	push   esi
c001ceee:	50                   	push   eax
c001ceef:	e8 58 03 00 00       	call   c001d24c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001cef4:	83 c4 10             	add    esp,0x10
c001cef7:	39 c7                	cmp    edi,eax
c001cef9:	7d 02                	jge    c001cefd <SoundCard::getSamples16(int, short*)+0x59>
c001cefb:	89 c7                	mov    edi,eax
c001cefd:	43                   	inc    ebx
c001cefe:	83 fb 20             	cmp    ebx,0x20
c001cf01:	75 d0                	jne    c001ced3 <SoundCard::getSamples16(int, short*)+0x2f>
c001cf03:	83 c4 0c             	add    esp,0xc
c001cf06:	89 f8                	mov    eax,edi
c001cf08:	5b                   	pop    ebx
c001cf09:	5e                   	pop    esi
c001cf0a:	5f                   	pop    edi
c001cf0b:	5d                   	pop    ebp
c001cf0c:	c3                   	ret    
c001cf0d:	90                   	nop

c001cf0e <SoundCard::getSamples32(int, int*)>:
c001cf0e:	55                   	push   ebp
c001cf0f:	57                   	push   edi
c001cf10:	31 ff                	xor    edi,edi
c001cf12:	56                   	push   esi
c001cf13:	31 f6                	xor    esi,esi
c001cf15:	53                   	push   ebx
c001cf16:	83 ec 10             	sub    esp,0x10
c001cf19:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf1d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cf21:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001cf25:	c1 e0 02             	shl    eax,0x2
c001cf28:	50                   	push   eax
c001cf29:	6a 00                	push   0x0
c001cf2b:	55                   	push   ebp
c001cf2c:	e8 4b 37 fe ff       	call   c000067c <memset>
c001cf31:	83 c4 10             	add    esp,0x10
c001cf34:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001cf3b:	85 c0                	test   eax,eax
c001cf3d:	74 1b                	je     c001cf5a <SoundCard::getSamples32(int, int*)+0x4c>
c001cf3f:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cf43:	75 15                	jne    c001cf5a <SoundCard::getSamples32(int, int*)+0x4c>
c001cf45:	53                   	push   ebx
c001cf46:	55                   	push   ebp
c001cf47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf4b:	50                   	push   eax
c001cf4c:	e8 f7 03 00 00       	call   c001d348 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001cf51:	83 c4 10             	add    esp,0x10
c001cf54:	39 c6                	cmp    esi,eax
c001cf56:	7d 02                	jge    c001cf5a <SoundCard::getSamples32(int, int*)+0x4c>
c001cf58:	89 c6                	mov    esi,eax
c001cf5a:	47                   	inc    edi
c001cf5b:	83 ff 20             	cmp    edi,0x20
c001cf5e:	75 d4                	jne    c001cf34 <SoundCard::getSamples32(int, int*)+0x26>
c001cf60:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001cf66:	85 f6                	test   esi,esi
c001cf68:	75 0f                	jne    c001cf79 <SoundCard::getSamples32(int, int*)+0x6b>
c001cf6a:	84 c0                	test   al,al
c001cf6c:	74 1b                	je     c001cf89 <SoundCard::getSamples32(int, int*)+0x7b>
c001cf6e:	83 ec 0c             	sub    esp,0xc
c001cf71:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf73:	53                   	push   ebx
c001cf74:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001cf77:	eb 0d                	jmp    c001cf86 <SoundCard::getSamples32(int, int*)+0x78>
c001cf79:	84 c0                	test   al,al
c001cf7b:	75 0c                	jne    c001cf89 <SoundCard::getSamples32(int, int*)+0x7b>
c001cf7d:	83 ec 0c             	sub    esp,0xc
c001cf80:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf82:	53                   	push   ebx
c001cf83:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001cf86:	83 c4 10             	add    esp,0x10
c001cf89:	83 c4 0c             	add    esp,0xc
c001cf8c:	89 f0                	mov    eax,esi
c001cf8e:	5b                   	pop    ebx
c001cf8f:	5e                   	pop    esi
c001cf90:	5f                   	pop    edi
c001cf91:	5d                   	pop    ebp
c001cf92:	c3                   	ret    
c001cf93:	90                   	nop

c001cf94 <SoundCard::addChannel(SoundPort*)>:
c001cf94:	56                   	push   esi
c001cf95:	53                   	push   ebx
c001cf96:	53                   	push   ebx
c001cf97:	31 db                	xor    ebx,ebx
c001cf99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf9d:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001cfa5:	74 27                	je     c001cfce <SoundCard::addChannel(SoundPort*)+0x3a>
c001cfa7:	43                   	inc    ebx
c001cfa8:	83 fb 20             	cmp    ebx,0x20
c001cfab:	75 f0                	jne    c001cf9d <SoundCard::addChannel(SoundPort*)+0x9>
c001cfad:	83 ec 0c             	sub    esp,0xc
c001cfb0:	83 cb ff             	or     ebx,0xffffffff
c001cfb3:	68 81 5b 02 c0       	push   0xc0025b81
c001cfb8:	e8 08 00 ff ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001cfbd:	c7 04 24 7a 5b 02 c0 	mov    DWORD PTR [esp],0xc0025b7a
c001cfc4:	e8 3e 6e ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c001cfc9:	83 c4 10             	add    esp,0x10
c001cfcc:	eb 1b                	jmp    c001cfe9 <SoundCard::addChannel(SoundPort*)+0x55>
c001cfce:	51                   	push   ecx
c001cfcf:	51                   	push   ecx
c001cfd0:	53                   	push   ebx
c001cfd1:	68 99 5b 02 c0       	push   0xc0025b99
c001cfd6:	e8 ea ff fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001cfdb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfdf:	83 c4 10             	add    esp,0x10
c001cfe2:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001cfe9:	89 d8                	mov    eax,ebx
c001cfeb:	5a                   	pop    edx
c001cfec:	5b                   	pop    ebx
c001cfed:	5e                   	pop    esi
c001cfee:	c3                   	ret    
c001cfef:	90                   	nop

c001cff0 <SoundCard::removeChannel(int)>:
c001cff0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cff4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cff8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001d003:	c3                   	ret    

c001d004 <SoundPort::SoundPort(int, int, int, int)>:
c001d004:	83 ec 0c             	sub    esp,0xc
c001d007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d00b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d016:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d01a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d01e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d022:	89 10                	mov    DWORD PTR [eax],edx
c001d024:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d028:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d02c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d033:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d037:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d03a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001d03f:	75 13                	jne    c001d054 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001d041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d045:	8b 00                	mov    eax,DWORD PTR [eax]
c001d047:	05 a0 0f 00 00       	add    eax,0xfa0
c001d04c:	01 c0                	add    eax,eax
c001d04e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d052:	66 90                	xchg   ax,ax
c001d054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d058:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d05c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001d05f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d063:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001d06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d06e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d071:	c1 e0 02             	shl    eax,0x2
c001d074:	83 ec 0c             	sub    esp,0xc
c001d077:	50                   	push   eax
c001d078:	e8 3a cc fe ff       	call   c0009cb7 <malloc>
c001d07d:	83 c4 10             	add    esp,0x10
c001d080:	89 c2                	mov    edx,eax
c001d082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d086:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d089:	90                   	nop
c001d08a:	83 c4 0c             	add    esp,0xc
c001d08d:	c3                   	ret    
c001d08e:	66 90                	xchg   ax,ax

c001d090 <SoundPort::~SoundPort()>:
c001d090:	83 ec 0c             	sub    esp,0xc
c001d093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d097:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d09a:	85 c0                	test   eax,eax
c001d09c:	74 1e                	je     c001d0bc <SoundPort::~SoundPort()+0x2c>
c001d09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0a2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d0a5:	83 ec 0c             	sub    esp,0xc
c001d0a8:	50                   	push   eax
c001d0a9:	e8 19 cc fe ff       	call   c0009cc7 <free>
c001d0ae:	83 c4 10             	add    esp,0x10
c001d0b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0b5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d0bc:	90                   	nop
c001d0bd:	83 c4 0c             	add    esp,0xc
c001d0c0:	c3                   	ret    
c001d0c1:	90                   	nop
c001d0c2:	66 90                	xchg   ax,ax

c001d0c4 <SoundPort::unpause()>:
c001d0c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0c8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001d0cc:	c3                   	ret    
c001d0cd:	90                   	nop
c001d0ce:	66 90                	xchg   ax,ax

c001d0d0 <SoundPort::pause()>:
c001d0d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0d4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001d0d8:	c3                   	ret    
c001d0d9:	90                   	nop
c001d0da:	66 90                	xchg   ax,ax

c001d0dc <SoundPort::getBufferUsed()>:
c001d0dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0e0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001d0e3:	c3                   	ret    

c001d0e4 <SoundPort::getBufferSize()>:
c001d0e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d0e8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d0eb:	c3                   	ret    

c001d0ec <SoundPort::buffer16(short*, int)>:
c001d0ec:	55                   	push   ebp
c001d0ed:	57                   	push   edi
c001d0ee:	56                   	push   esi
c001d0ef:	53                   	push   ebx
c001d0f0:	83 ec 1c             	sub    esp,0x1c
c001d0f3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d0f7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d0fb:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001d0fe:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001d101:	0f 84 85 00 00 00    	je     c001d18c <SoundPort::buffer16(short*, int)+0xa0>
c001d107:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d10b:	85 c9                	test   ecx,ecx
c001d10d:	7e 7d                	jle    c001d18c <SoundPort::buffer16(short*, int)+0xa0>
c001d10f:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001d113:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d116:	c1 e1 0f             	shl    ecx,0xf
c001d119:	8d 70 01             	lea    esi,[eax+0x1]
c001d11c:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d11f:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001d122:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d125:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d128:	74 6e                	je     c001d198 <SoundPort::buffer16(short*, int)+0xac>
c001d12a:	31 f6                	xor    esi,esi
c001d12c:	eb 22                	jmp    c001d150 <SoundPort::buffer16(short*, int)+0x64>
c001d12e:	66 90                	xchg   ax,ax
c001d130:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001d135:	8d 79 01             	lea    edi,[ecx+0x1]
c001d138:	c1 e3 0f             	shl    ebx,0xf
c001d13b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001d13e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001d141:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001d144:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d147:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d14a:	74 1c                	je     c001d168 <SoundPort::buffer16(short*, int)+0x7c>
c001d14c:	89 c6                	mov    esi,eax
c001d14e:	66 90                	xchg   ax,ax
c001d150:	8d 46 01             	lea    eax,[esi+0x1]
c001d153:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001d157:	75 d7                	jne    c001d130 <SoundPort::buffer16(short*, int)+0x44>
c001d159:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d15d:	83 c4 1c             	add    esp,0x1c
c001d160:	5b                   	pop    ebx
c001d161:	5e                   	pop    esi
c001d162:	5f                   	pop    edi
c001d163:	5d                   	pop    ebp
c001d164:	c3                   	ret    
c001d165:	8d 76 00             	lea    esi,[esi+0x0]
c001d168:	8d 46 02             	lea    eax,[esi+0x2]
c001d16b:	90                   	nop
c001d16c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d170:	83 ec 0c             	sub    esp,0xc
c001d173:	68 ec 5b 02 c0       	push   0xc0025bec
c001d178:	e8 48 fe fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d17d:	83 c4 10             	add    esp,0x10
c001d180:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d184:	83 c4 1c             	add    esp,0x1c
c001d187:	5b                   	pop    ebx
c001d188:	5e                   	pop    esi
c001d189:	5f                   	pop    edi
c001d18a:	5d                   	pop    ebp
c001d18b:	c3                   	ret    
c001d18c:	83 c4 1c             	add    esp,0x1c
c001d18f:	31 c0                	xor    eax,eax
c001d191:	5b                   	pop    ebx
c001d192:	5e                   	pop    esi
c001d193:	5f                   	pop    edi
c001d194:	5d                   	pop    ebp
c001d195:	c3                   	ret    
c001d196:	66 90                	xchg   ax,ax
c001d198:	b8 01 00 00 00       	mov    eax,0x1
c001d19d:	eb cd                	jmp    c001d16c <SoundPort::buffer16(short*, int)+0x80>
c001d19f:	90                   	nop

c001d1a0 <SoundPort::buffer32(int*, int)>:
c001d1a0:	55                   	push   ebp
c001d1a1:	57                   	push   edi
c001d1a2:	56                   	push   esi
c001d1a3:	53                   	push   ebx
c001d1a4:	83 ec 1c             	sub    esp,0x1c
c001d1a7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d1ab:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d1af:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d1b2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d1b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1ba:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d1bd:	74 79                	je     c001d238 <SoundPort::buffer32(int*, int)+0x98>
c001d1bf:	85 c0                	test   eax,eax
c001d1c1:	7e 75                	jle    c001d238 <SoundPort::buffer32(int*, int)+0x98>
c001d1c3:	8d 71 01             	lea    esi,[ecx+0x1]
c001d1c6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001d1c9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d1cc:	8b 37                	mov    esi,DWORD PTR [edi]
c001d1ce:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d1d1:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d1d4:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d1d7:	74 6b                	je     c001d244 <SoundPort::buffer32(int*, int)+0xa4>
c001d1d9:	31 f6                	xor    esi,esi
c001d1db:	eb 1f                	jmp    c001d1fc <SoundPort::buffer32(int*, int)+0x5c>
c001d1dd:	8d 76 00             	lea    esi,[esi+0x0]
c001d1e0:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d1e3:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d1e6:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d1e9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d1ec:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d1f0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d1f3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d1f6:	74 1c                	je     c001d214 <SoundPort::buffer32(int*, int)+0x74>
c001d1f8:	89 de                	mov    esi,ebx
c001d1fa:	66 90                	xchg   ax,ax
c001d1fc:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d1ff:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d203:	75 db                	jne    c001d1e0 <SoundPort::buffer32(int*, int)+0x40>
c001d205:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d209:	83 c4 1c             	add    esp,0x1c
c001d20c:	5b                   	pop    ebx
c001d20d:	5e                   	pop    esi
c001d20e:	5f                   	pop    edi
c001d20f:	5d                   	pop    ebp
c001d210:	c3                   	ret    
c001d211:	8d 76 00             	lea    esi,[esi+0x0]
c001d214:	8d 46 02             	lea    eax,[esi+0x2]
c001d217:	90                   	nop
c001d218:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d21c:	83 ec 0c             	sub    esp,0xc
c001d21f:	68 07 5c 02 c0       	push   0xc0025c07
c001d224:	e8 9c fd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d229:	83 c4 10             	add    esp,0x10
c001d22c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d230:	83 c4 1c             	add    esp,0x1c
c001d233:	5b                   	pop    ebx
c001d234:	5e                   	pop    esi
c001d235:	5f                   	pop    edi
c001d236:	5d                   	pop    ebp
c001d237:	c3                   	ret    
c001d238:	83 c4 1c             	add    esp,0x1c
c001d23b:	31 c0                	xor    eax,eax
c001d23d:	5b                   	pop    ebx
c001d23e:	5e                   	pop    esi
c001d23f:	5f                   	pop    edi
c001d240:	5d                   	pop    ebp
c001d241:	c3                   	ret    
c001d242:	66 90                	xchg   ax,ax
c001d244:	b8 01 00 00 00       	mov    eax,0x1
c001d249:	eb cd                	jmp    c001d218 <SoundPort::buffer32(int*, int)+0x78>
c001d24b:	90                   	nop

c001d24c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d24c:	57                   	push   edi
c001d24d:	56                   	push   esi
c001d24e:	53                   	push   ebx
c001d24f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d253:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d257:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d25d:	39 03                	cmp    DWORD PTR [ebx],eax
c001d25f:	74 13                	je     c001d274 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d261:	83 ec 0c             	sub    esp,0xc
c001d264:	68 5c 5c 02 c0       	push   0xc0025c5c
c001d269:	e8 99 6b ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c001d26e:	83 c4 10             	add    esp,0x10
c001d271:	8d 76 00             	lea    esi,[esi+0x0]
c001d274:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d27a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d27d:	74 11                	je     c001d290 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d27f:	83 ec 0c             	sub    esp,0xc
c001d282:	68 22 5c 02 c0       	push   0xc0025c22
c001d287:	e8 7b 6b ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c001d28c:	83 c4 10             	add    esp,0x10
c001d28f:	90                   	nop
c001d290:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d296:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d299:	74 11                	je     c001d2ac <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d29b:	83 ec 0c             	sub    esp,0xc
c001d29e:	68 22 5c 02 c0       	push   0xc0025c22
c001d2a3:	e8 5f 6b ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c001d2a8:	83 c4 10             	add    esp,0x10
c001d2ab:	90                   	nop
c001d2ac:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d2af:	89 c6                	mov    esi,eax
c001d2b1:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d2b5:	7e 05                	jle    c001d2bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d2b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d2bb:	90                   	nop
c001d2bc:	85 f6                	test   esi,esi
c001d2be:	7e 30                	jle    c001d2f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d2c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d2c4:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d2c7:	31 c9                	xor    ecx,ecx
c001d2c9:	01 d7                	add    edi,edx
c001d2cb:	90                   	nop
c001d2cc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d2cf:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d2d2:	85 c0                	test   eax,eax
c001d2d4:	79 06                	jns    c001d2dc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d2d6:	05 ff 7f 00 00       	add    eax,0x7fff
c001d2db:	90                   	nop
c001d2dc:	c1 f8 0f             	sar    eax,0xf
c001d2df:	83 c1 04             	add    ecx,0x4
c001d2e2:	66 01 02             	add    WORD PTR [edx],ax
c001d2e5:	83 c2 02             	add    edx,0x2
c001d2e8:	39 d7                	cmp    edi,edx
c001d2ea:	75 e0                	jne    c001d2cc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d2ec:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d2ef:	90                   	nop
c001d2f0:	56                   	push   esi
c001d2f1:	89 c2                	mov    edx,eax
c001d2f3:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d2fa:	29 f2                	sub    edx,esi
c001d2fc:	52                   	push   edx
c001d2fd:	50                   	push   eax
c001d2fe:	68 7c 5c 02 c0       	push   0xc0025c7c
c001d303:	e8 bd fc fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d308:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d30b:	50                   	push   eax
c001d30c:	01 f8                	add    eax,edi
c001d30e:	50                   	push   eax
c001d30f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d312:	29 f0                	sub    eax,esi
c001d314:	c1 e0 02             	shl    eax,0x2
c001d317:	50                   	push   eax
c001d318:	68 ac 5c 02 c0       	push   0xc0025cac
c001d31d:	e8 a3 fc fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001d322:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d325:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d328:	83 c4 1c             	add    esp,0x1c
c001d32b:	01 d7                	add    edi,edx
c001d32d:	29 f0                	sub    eax,esi
c001d32f:	c1 e0 02             	shl    eax,0x2
c001d332:	50                   	push   eax
c001d333:	57                   	push   edi
c001d334:	52                   	push   edx
c001d335:	e8 7a 32 fe ff       	call   c00005b4 <memmove>
c001d33a:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d33d:	83 c4 10             	add    esp,0x10
c001d340:	89 f0                	mov    eax,esi
c001d342:	5b                   	pop    ebx
c001d343:	5e                   	pop    esi
c001d344:	5f                   	pop    edi
c001d345:	c3                   	ret    
c001d346:	66 90                	xchg   ax,ax

c001d348 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d348:	57                   	push   edi
c001d349:	56                   	push   esi
c001d34a:	53                   	push   ebx
c001d34b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d34f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d353:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d357:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d35d:	39 06                	cmp    DWORD PTR [esi],eax
c001d35f:	74 13                	je     c001d374 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d361:	83 ec 0c             	sub    esp,0xc
c001d364:	68 d0 5c 02 c0       	push   0xc0025cd0
c001d369:	e8 99 6a ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c001d36e:	83 c4 10             	add    esp,0x10
c001d371:	8d 76 00             	lea    esi,[esi+0x0]
c001d374:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d37a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d37d:	74 11                	je     c001d390 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d37f:	83 ec 0c             	sub    esp,0xc
c001d382:	68 3e 5c 02 c0       	push   0xc0025c3e
c001d387:	e8 7b 6a ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c001d38c:	83 c4 10             	add    esp,0x10
c001d38f:	90                   	nop
c001d390:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d396:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d399:	74 11                	je     c001d3ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d39b:	83 ec 0c             	sub    esp,0xc
c001d39e:	68 3e 5c 02 c0       	push   0xc0025c3e
c001d3a3:	e8 5f 6a ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c001d3a8:	83 c4 10             	add    esp,0x10
c001d3ab:	90                   	nop
c001d3ac:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d3af:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d3b3:	7e 07                	jle    c001d3bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d3b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d3b9:	8d 76 00             	lea    esi,[esi+0x0]
c001d3bc:	85 ff                	test   edi,edi
c001d3be:	7e 1c                	jle    c001d3dc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d3c0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d3c7:	31 c0                	xor    eax,eax
c001d3c9:	8d 76 00             	lea    esi,[esi+0x0]
c001d3cc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d3cf:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d3d2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d3d5:	83 c0 04             	add    eax,0x4
c001d3d8:	39 c1                	cmp    ecx,eax
c001d3da:	75 f0                	jne    c001d3cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d3dc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d3df:	50                   	push   eax
c001d3e0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d3e3:	29 f8                	sub    eax,edi
c001d3e5:	c1 e0 02             	shl    eax,0x2
c001d3e8:	50                   	push   eax
c001d3e9:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d3ec:	50                   	push   eax
c001d3ed:	52                   	push   edx
c001d3ee:	e8 c1 31 fe ff       	call   c00005b4 <memmove>
c001d3f3:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d3f6:	83 c4 10             	add    esp,0x10
c001d3f9:	89 f8                	mov    eax,edi
c001d3fb:	5b                   	pop    ebx
c001d3fc:	5e                   	pop    esi
c001d3fd:	5f                   	pop    edi
c001d3fe:	c3                   	ret    
c001d3ff:	90                   	nop

c001d400 <PCI::open(int, int, void*)>:
c001d400:	83 ec 18             	sub    esp,0x18
c001d403:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d407:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d40b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d411:	8b 10                	mov    edx,DWORD PTR [eax]
c001d413:	50                   	push   eax
c001d414:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d417:	31 c0                	xor    eax,eax
c001d419:	83 c4 1c             	add    esp,0x1c
c001d41c:	c3                   	ret    
c001d41d:	90                   	nop

c001d41e <PCI::close(int, int, void*)>:
c001d41e:	31 c0                	xor    eax,eax
c001d420:	c3                   	ret    
c001d421:	90                   	nop

c001d422 <PCI::PCI()>:
c001d422:	83 ec 0c             	sub    esp,0xc
c001d425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d429:	83 ec 08             	sub    esp,0x8
c001d42c:	68 ef 5c 02 c0       	push   0xc0025cef
c001d431:	50                   	push   eax
c001d432:	e8 65 09 ff ff       	call   c000dd9c <Bus::Bus(char const*)>
c001d437:	83 c4 10             	add    esp,0x10
c001d43a:	ba c4 5e 02 c0       	mov    edx,0xc0025ec4
c001d43f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d443:	89 10                	mov    DWORD PTR [eax],edx
c001d445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d449:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d457:	a3 e0 b2 02 c0       	mov    ds:0xc002b2e0,eax
c001d45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d460:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d466:	0f b6 d0             	movzx  edx,al
c001d469:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d46d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d478:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d47e:	0f b6 d0             	movzx  edx,al
c001d481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d485:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d48e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d494:	8d 50 01             	lea    edx,[eax+0x1]
c001d497:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d49b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d4a1:	0f b6 d0             	movzx  edx,al
c001d4a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4a8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d4ac:	83 c9 c0             	or     ecx,0xffffffc0
c001d4af:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d4b3:	90                   	nop
c001d4b4:	83 c4 0c             	add    esp,0xc
c001d4b7:	c3                   	ret    

c001d4b8 <PCI::readBAR8(unsigned int, int)>:
c001d4b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d4bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4c0:	f6 c2 01             	test   dl,0x1
c001d4c3:	74 07                	je     c001d4cc <PCI::readBAR8(unsigned int, int)+0x14>
c001d4c5:	83 e2 fc             	and    edx,0xfffffffc
c001d4c8:	01 c2                	add    edx,eax
c001d4ca:	ec                   	in     al,dx
c001d4cb:	c3                   	ret    
c001d4cc:	83 e2 f0             	and    edx,0xfffffff0
c001d4cf:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d4d2:	c3                   	ret    
c001d4d3:	90                   	nop

c001d4d4 <PCI::readBAR16(unsigned int, int)>:
c001d4d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d4d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4dc:	f6 c2 01             	test   dl,0x1
c001d4df:	74 08                	je     c001d4e9 <PCI::readBAR16(unsigned int, int)+0x15>
c001d4e1:	83 e2 fc             	and    edx,0xfffffffc
c001d4e4:	01 c2                	add    edx,eax
c001d4e6:	66 ed                	in     ax,dx
c001d4e8:	c3                   	ret    
c001d4e9:	83 e2 f0             	and    edx,0xfffffff0
c001d4ec:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d4f0:	c3                   	ret    
c001d4f1:	90                   	nop

c001d4f2 <PCI::readBAR32(unsigned int, int)>:
c001d4f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d4f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4fa:	f6 c2 01             	test   dl,0x1
c001d4fd:	74 07                	je     c001d506 <PCI::readBAR32(unsigned int, int)+0x14>
c001d4ff:	83 e2 fc             	and    edx,0xfffffffc
c001d502:	01 c2                	add    edx,eax
c001d504:	ed                   	in     eax,dx
c001d505:	c3                   	ret    
c001d506:	83 e2 f0             	and    edx,0xfffffff0
c001d509:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d50c:	c3                   	ret    
c001d50d:	90                   	nop

c001d50e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d50e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d512:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d516:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d51a:	f6 c2 01             	test   dl,0x1
c001d51d:	74 07                	je     c001d526 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d51f:	83 e2 fc             	and    edx,0xfffffffc
c001d522:	01 ca                	add    edx,ecx
c001d524:	ee                   	out    dx,al
c001d525:	c3                   	ret    
c001d526:	83 e2 f0             	and    edx,0xfffffff0
c001d529:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d52c:	c3                   	ret    
c001d52d:	90                   	nop

c001d52e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d52e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d532:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d536:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d53a:	f6 c2 01             	test   dl,0x1
c001d53d:	74 08                	je     c001d547 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d53f:	83 e2 fc             	and    edx,0xfffffffc
c001d542:	01 ca                	add    edx,ecx
c001d544:	66 ef                	out    dx,ax
c001d546:	c3                   	ret    
c001d547:	83 e2 f0             	and    edx,0xfffffff0
c001d54a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d54e:	c3                   	ret    
c001d54f:	90                   	nop

c001d550 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d550:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d558:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d55c:	f6 c2 01             	test   dl,0x1
c001d55f:	74 07                	je     c001d568 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d561:	83 e2 fc             	and    edx,0xfffffffc
c001d564:	01 ca                	add    edx,ecx
c001d566:	ef                   	out    dx,eax
c001d567:	c3                   	ret    
c001d568:	83 e2 f0             	and    edx,0xfffffff0
c001d56b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d56e:	c3                   	ret    
c001d56f:	90                   	nop

c001d570 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d570:	55                   	push   ebp
c001d571:	57                   	push   edi
c001d572:	56                   	push   esi
c001d573:	53                   	push   ebx
c001d574:	83 ec 0c             	sub    esp,0xc
c001d577:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d57b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d57f:	89 f0                	mov    eax,esi
c001d581:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d585:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d589:	3c 07                	cmp    al,0x7
c001d58b:	76 10                	jbe    c001d59d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d58d:	83 ec 0c             	sub    esp,0xc
c001d590:	68 f7 5c 02 c0       	push   0xc0025cf7
c001d595:	e8 6d 68 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c001d59a:	83 c4 10             	add    esp,0x10
c001d59d:	80 fb 0f             	cmp    bl,0xf
c001d5a0:	76 10                	jbe    c001d5b2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d5a2:	83 ec 0c             	sub    esp,0xc
c001d5a5:	68 27 5d 02 c0       	push   0xc0025d27
c001d5aa:	e8 58 68 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c001d5af:	83 c4 10             	add    esp,0x10
c001d5b2:	8d 04 36             	lea    eax,[esi+esi*1]
c001d5b5:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d5ba:	83 c8 f0             	or     eax,0xfffffff0
c001d5bd:	ee                   	out    dx,al
c001d5be:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d5c3:	89 e8                	mov    eax,ebp
c001d5c5:	ee                   	out    dx,al
c001d5c6:	83 c4 0c             	add    esp,0xc
c001d5c9:	89 d8                	mov    eax,ebx
c001d5cb:	66 81 e7 fc 00       	and    di,0xfc
c001d5d0:	5b                   	pop    ebx
c001d5d1:	c1 e0 08             	shl    eax,0x8
c001d5d4:	5e                   	pop    esi
c001d5d5:	09 f8                	or     eax,edi
c001d5d7:	5f                   	pop    edi
c001d5d8:	66 0d 00 c0          	or     ax,0xc000
c001d5dc:	5d                   	pop    ebp
c001d5dd:	c3                   	ret    

c001d5de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d5de:	57                   	push   edi
c001d5df:	56                   	push   esi
c001d5e0:	53                   	push   ebx
c001d5e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d5e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d5e9:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d5ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d5f3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d5f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d5fb:	83 ff 01             	cmp    edi,0x1
c001d5fe:	75 3e                	jne    c001d63e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d600:	89 de                	mov    esi,ebx
c001d602:	0f b6 c0             	movzx  eax,al
c001d605:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d60b:	c1 e0 10             	shl    eax,0x10
c001d60e:	0f b6 c9             	movzx  ecx,cl
c001d611:	09 f0                	or     eax,esi
c001d613:	c1 e1 08             	shl    ecx,0x8
c001d616:	0f b6 d2             	movzx  edx,dl
c001d619:	09 c8                	or     eax,ecx
c001d61b:	c1 e2 0b             	shl    edx,0xb
c001d61e:	09 d0                	or     eax,edx
c001d620:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d625:	0d 00 00 00 80       	or     eax,0x80000000
c001d62a:	ef                   	out    dx,eax
c001d62b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d630:	ed                   	in     eax,dx
c001d631:	83 e3 02             	and    ebx,0x2
c001d634:	0f b6 cb             	movzx  ecx,bl
c001d637:	c1 e1 03             	shl    ecx,0x3
c001d63a:	d3 e8                	shr    eax,cl
c001d63c:	eb 43                	jmp    c001d681 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d63e:	83 ff 02             	cmp    edi,0x2
c001d641:	75 2c                	jne    c001d66f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d643:	83 ec 0c             	sub    esp,0xc
c001d646:	0f b6 c9             	movzx  ecx,cl
c001d649:	0f b6 d2             	movzx  edx,dl
c001d64c:	0f b6 fb             	movzx  edi,bl
c001d64f:	0f b6 c0             	movzx  eax,al
c001d652:	57                   	push   edi
c001d653:	51                   	push   ecx
c001d654:	52                   	push   edx
c001d655:	50                   	push   eax
c001d656:	56                   	push   esi
c001d657:	e8 14 ff ff ff       	call   c001d570 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d65c:	89 c2                	mov    edx,eax
c001d65e:	ed                   	in     eax,dx
c001d65f:	83 e3 02             	and    ebx,0x2
c001d662:	83 c4 20             	add    esp,0x20
c001d665:	0f b6 cb             	movzx  ecx,bl
c001d668:	c1 e1 03             	shl    ecx,0x3
c001d66b:	d3 e8                	shr    eax,cl
c001d66d:	eb 12                	jmp    c001d681 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d66f:	83 ec 0c             	sub    esp,0xc
c001d672:	68 57 5d 02 c0       	push   0xc0025d57
c001d677:	e8 8b 67 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c001d67c:	83 c4 10             	add    esp,0x10
c001d67f:	31 c0                	xor    eax,eax
c001d681:	5b                   	pop    ebx
c001d682:	5e                   	pop    esi
c001d683:	5f                   	pop    edi
c001d684:	c3                   	ret    
c001d685:	90                   	nop

c001d686 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d686:	83 ec 18             	sub    esp,0x18
c001d689:	6a 00                	push   0x0
c001d68b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d690:	50                   	push   eax
c001d691:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d696:	50                   	push   eax
c001d697:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d69c:	50                   	push   eax
c001d69d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6a1:	e8 38 ff ff ff       	call   c001d5de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6a6:	83 c4 2c             	add    esp,0x2c
c001d6a9:	c3                   	ret    

c001d6aa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d6aa:	83 ec 18             	sub    esp,0x18
c001d6ad:	6a 0e                	push   0xe
c001d6af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6b4:	50                   	push   eax
c001d6b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6ba:	50                   	push   eax
c001d6bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d6c0:	50                   	push   eax
c001d6c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6c5:	e8 14 ff ff ff       	call   c001d5de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6ca:	83 c4 2c             	add    esp,0x2c
c001d6cd:	0f b6 c0             	movzx  eax,al
c001d6d0:	c3                   	ret    
c001d6d1:	90                   	nop

c001d6d2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d6d2:	55                   	push   ebp
c001d6d3:	57                   	push   edi
c001d6d4:	56                   	push   esi
c001d6d5:	53                   	push   ebx
c001d6d6:	83 ec 18             	sub    esp,0x18
c001d6d9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d6de:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d6e3:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d6e8:	6a 0a                	push   0xa
c001d6ea:	56                   	push   esi
c001d6eb:	55                   	push   ebp
c001d6ec:	57                   	push   edi
c001d6ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d6f1:	e8 e8 fe ff ff       	call   c001d5de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6f6:	83 c4 14             	add    esp,0x14
c001d6f9:	89 c3                	mov    ebx,eax
c001d6fb:	6a 0a                	push   0xa
c001d6fd:	0f b6 db             	movzx  ebx,bl
c001d700:	56                   	push   esi
c001d701:	55                   	push   ebp
c001d702:	57                   	push   edi
c001d703:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d707:	e8 d2 fe ff ff       	call   c001d5de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d70c:	83 c4 2c             	add    esp,0x2c
c001d70f:	25 00 ff 00 00       	and    eax,0xff00
c001d714:	09 d8                	or     eax,ebx
c001d716:	5b                   	pop    ebx
c001d717:	5e                   	pop    esi
c001d718:	5f                   	pop    edi
c001d719:	5d                   	pop    ebp
c001d71a:	c3                   	ret    
c001d71b:	90                   	nop

c001d71c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d71c:	83 ec 18             	sub    esp,0x18
c001d71f:	6a 08                	push   0x8
c001d721:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d726:	50                   	push   eax
c001d727:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d72c:	50                   	push   eax
c001d72d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d732:	50                   	push   eax
c001d733:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d737:	e8 a2 fe ff ff       	call   c001d5de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d73c:	83 c4 2c             	add    esp,0x2c
c001d73f:	0f b6 c4             	movzx  eax,ah
c001d742:	c3                   	ret    
c001d743:	90                   	nop

c001d744 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d744:	83 ec 18             	sub    esp,0x18
c001d747:	6a 08                	push   0x8
c001d749:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d74e:	50                   	push   eax
c001d74f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d754:	50                   	push   eax
c001d755:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d75a:	50                   	push   eax
c001d75b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d75f:	e8 7a fe ff ff       	call   c001d5de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d764:	83 c4 2c             	add    esp,0x2c
c001d767:	c3                   	ret    

c001d768 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d768:	83 ec 18             	sub    esp,0x18
c001d76b:	6a 3c                	push   0x3c
c001d76d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d772:	50                   	push   eax
c001d773:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d778:	50                   	push   eax
c001d779:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d77e:	50                   	push   eax
c001d77f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d783:	e8 56 fe ff ff       	call   c001d5de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d788:	83 c4 2c             	add    esp,0x2c
c001d78b:	c3                   	ret    

c001d78c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d78c:	83 ec 18             	sub    esp,0x18
c001d78f:	6a 18                	push   0x18
c001d791:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d796:	50                   	push   eax
c001d797:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d79c:	50                   	push   eax
c001d79d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d7a2:	50                   	push   eax
c001d7a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7a7:	e8 32 fe ff ff       	call   c001d5de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d7ac:	83 c4 2c             	add    esp,0x2c
c001d7af:	0f b6 c4             	movzx  eax,ah
c001d7b2:	c3                   	ret    
c001d7b3:	90                   	nop

c001d7b4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d7b4:	55                   	push   ebp
c001d7b5:	57                   	push   edi
c001d7b6:	56                   	push   esi
c001d7b7:	53                   	push   ebx
c001d7b8:	83 ec 28             	sub    esp,0x28
c001d7bb:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d7bf:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d7c4:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d7c9:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d7ce:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d7d5:	8d 43 12             	lea    eax,[ebx+0x12]
c001d7d8:	83 c3 10             	add    ebx,0x10
c001d7db:	0f b6 c0             	movzx  eax,al
c001d7de:	0f b6 db             	movzx  ebx,bl
c001d7e1:	50                   	push   eax
c001d7e2:	51                   	push   ecx
c001d7e3:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d7e7:	57                   	push   edi
c001d7e8:	55                   	push   ebp
c001d7e9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d7ed:	e8 ec fd ff ff       	call   c001d5de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d7f2:	83 c4 14             	add    esp,0x14
c001d7f5:	89 c6                	mov    esi,eax
c001d7f7:	53                   	push   ebx
c001d7f8:	c1 e6 10             	shl    esi,0x10
c001d7fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d7ff:	51                   	push   ecx
c001d800:	57                   	push   edi
c001d801:	55                   	push   ebp
c001d802:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d806:	e8 d3 fd ff ff       	call   c001d5de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d80b:	83 c4 3c             	add    esp,0x3c
c001d80e:	0f b7 c0             	movzx  eax,ax
c001d811:	5b                   	pop    ebx
c001d812:	09 f0                	or     eax,esi
c001d814:	5e                   	pop    esi
c001d815:	5f                   	pop    edi
c001d816:	5d                   	pop    ebp
c001d817:	c3                   	ret    

c001d818 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d818:	55                   	push   ebp
c001d819:	57                   	push   edi
c001d81a:	56                   	push   esi
c001d81b:	53                   	push   ebx
c001d81c:	83 ec 0c             	sub    esp,0xc
c001d81f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d823:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d827:	89 f5                	mov    ebp,esi
c001d829:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d82f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d833:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d837:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d83b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d83f:	83 f9 01             	cmp    ecx,0x1
c001d842:	75 5d                	jne    c001d8a1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d844:	0f b6 c8             	movzx  ecx,al
c001d847:	0f b6 d2             	movzx  edx,dl
c001d84a:	c1 e1 10             	shl    ecx,0x10
c001d84d:	c1 e2 0b             	shl    edx,0xb
c001d850:	89 f0                	mov    eax,esi
c001d852:	25 fc 00 00 00       	and    eax,0xfc
c001d857:	09 c1                	or     ecx,eax
c001d859:	89 e8                	mov    eax,ebp
c001d85b:	0f b6 c0             	movzx  eax,al
c001d85e:	c1 e0 08             	shl    eax,0x8
c001d861:	09 c1                	or     ecx,eax
c001d863:	09 d1                	or     ecx,edx
c001d865:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d86a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d870:	89 c8                	mov    eax,ecx
c001d872:	ef                   	out    dx,eax
c001d873:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d878:	ed                   	in     eax,dx
c001d879:	0f b7 db             	movzx  ebx,bx
c001d87c:	83 e6 02             	and    esi,0x2
c001d87f:	74 0a                	je     c001d88b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d881:	0f b7 d0             	movzx  edx,ax
c001d884:	c1 e3 10             	shl    ebx,0x10
c001d887:	09 d3                	or     ebx,edx
c001d889:	eb 05                	jmp    c001d890 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d88b:	66 31 c0             	xor    ax,ax
c001d88e:	09 c3                	or     ebx,eax
c001d890:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d895:	89 c8                	mov    eax,ecx
c001d897:	ef                   	out    dx,eax
c001d898:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d89d:	89 d8                	mov    eax,ebx
c001d89f:	eb 41                	jmp    c001d8e2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d8a1:	83 f9 02             	cmp    ecx,0x2
c001d8a4:	75 45                	jne    c001d8eb <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d8a6:	83 ec 0c             	sub    esp,0xc
c001d8a9:	0f b6 d2             	movzx  edx,dl
c001d8ac:	89 f1                	mov    ecx,esi
c001d8ae:	0f b6 c0             	movzx  eax,al
c001d8b1:	0f b6 f1             	movzx  esi,cl
c001d8b4:	89 e9                	mov    ecx,ebp
c001d8b6:	56                   	push   esi
c001d8b7:	0f b6 c9             	movzx  ecx,cl
c001d8ba:	51                   	push   ecx
c001d8bb:	52                   	push   edx
c001d8bc:	50                   	push   eax
c001d8bd:	57                   	push   edi
c001d8be:	e8 ad fc ff ff       	call   c001d570 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d8c3:	89 c2                	mov    edx,eax
c001d8c5:	ed                   	in     eax,dx
c001d8c6:	83 c4 20             	add    esp,0x20
c001d8c9:	0f b7 db             	movzx  ebx,bx
c001d8cc:	f6 c2 02             	test   dl,0x2
c001d8cf:	74 0c                	je     c001d8dd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d8d1:	0f b7 c8             	movzx  ecx,ax
c001d8d4:	89 d8                	mov    eax,ebx
c001d8d6:	c1 e0 10             	shl    eax,0x10
c001d8d9:	09 c8                	or     eax,ecx
c001d8db:	eb 05                	jmp    c001d8e2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d8dd:	66 31 c0             	xor    ax,ax
c001d8e0:	09 d8                	or     eax,ebx
c001d8e2:	ef                   	out    dx,eax
c001d8e3:	83 c4 0c             	add    esp,0xc
c001d8e6:	5b                   	pop    ebx
c001d8e7:	5e                   	pop    esi
c001d8e8:	5f                   	pop    edi
c001d8e9:	5d                   	pop    ebp
c001d8ea:	c3                   	ret    
c001d8eb:	c7 44 24 20 57 5d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0025d57
c001d8f3:	83 c4 0c             	add    esp,0xc
c001d8f6:	5b                   	pop    ebx
c001d8f7:	5e                   	pop    esi
c001d8f8:	5f                   	pop    edi
c001d8f9:	5d                   	pop    ebp
c001d8fa:	e9 08 65 ff ff       	jmp    c0013e07 <Krnl::panic(char const*)>
c001d8ff:	90                   	nop

c001d900 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d900:	55                   	push   ebp
c001d901:	57                   	push   edi
c001d902:	56                   	push   esi
c001d903:	53                   	push   ebx
c001d904:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d90a:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001d911:	75 0f                	jne    c001d922 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001d913:	80 3d ec b2 02 c0 00 	cmp    BYTE PTR ds:0xc002b2ec,0x0
c001d91a:	0f 85 fa 00 00 00    	jne    c001da1a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d920:	eb 2f                	jmp    c001d951 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001d922:	83 ec 0c             	sub    esp,0xc
c001d925:	68 5d 5d 02 c0       	push   0xc0025d5d
c001d92a:	e8 e2 c3 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d92f:	83 c4 10             	add    esp,0x10
c001d932:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001d939:	75 d8                	jne    c001d913 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d93b:	e4 60                	in     al,0x60
c001d93d:	3c 1c                	cmp    al,0x1c
c001d93f:	74 04                	je     c001d945 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d941:	3c 5a                	cmp    al,0x5a
c001d943:	75 f6                	jne    c001d93b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001d945:	e4 60                	in     al,0x60
c001d947:	3c 5a                	cmp    al,0x5a
c001d949:	74 fa                	je     c001d945 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d94b:	3c 1c                	cmp    al,0x1c
c001d94d:	74 f6                	je     c001d945 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d94f:	eb c2                	jmp    c001d913 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d951:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001d958:	0f 85 86 00 00 00    	jne    c001d9e4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001d95e:	83 ec 0c             	sub    esp,0xc
c001d961:	68 14 01 00 00       	push   0x114
c001d966:	e8 4c c3 fe ff       	call   c0009cb7 <malloc>
c001d96b:	83 c4 0c             	add    esp,0xc
c001d96e:	89 c3                	mov    ebx,eax
c001d970:	ff 35 f0 a8 02 c0    	push   DWORD PTR ds:0xc002a8f0
c001d976:	68 77 5d 02 c0       	push   0xc0025d77
c001d97b:	50                   	push   eax
c001d97c:	e8 af fb fe ff       	call   c000d530 <File::File(char const*, Process*)>
c001d981:	5a                   	pop    edx
c001d982:	59                   	pop    ecx
c001d983:	6a 01                	push   0x1
c001d985:	53                   	push   ebx
c001d986:	e8 7f fc fe ff       	call   c000d60a <File::open(FileOpenMode)>
c001d98b:	83 c4 0c             	add    esp,0xc
c001d98e:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d992:	50                   	push   eax
c001d993:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d997:	50                   	push   eax
c001d998:	53                   	push   ebx
c001d999:	e8 18 ff fe ff       	call   c000d8b6 <File::stat(unsigned long long*, bool*)>
c001d99e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9a2:	40                   	inc    eax
c001d9a3:	89 04 24             	mov    DWORD PTR [esp],eax
c001d9a6:	e8 0c c3 fe ff       	call   c0009cb7 <malloc>
c001d9ab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d9af:	a3 e8 b2 02 c0       	mov    ds:0xc002b2e8,eax
c001d9b4:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d9b8:	5e                   	pop    esi
c001d9b9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d9bb:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d9bf:	51                   	push   ecx
c001d9c0:	50                   	push   eax
c001d9c1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d9c5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d9c9:	53                   	push   ebx
c001d9ca:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d9cd:	83 c4 14             	add    esp,0x14
c001d9d0:	53                   	push   ebx
c001d9d1:	e8 92 fc fe ff       	call   c000d668 <File::close()>
c001d9d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9da:	83 c4 10             	add    esp,0x10
c001d9dd:	a3 e4 b2 02 c0       	mov    ds:0xc002b2e4,eax
c001d9e2:	eb 36                	jmp    c001da1a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d9e4:	83 ec 0c             	sub    esp,0xc
c001d9e7:	68 90 5d 02 c0       	push   0xc0025d90
c001d9ec:	e8 20 c3 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001d9f1:	83 c4 10             	add    esp,0x10
c001d9f4:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001d9fb:	0f 85 5d ff ff ff    	jne    c001d95e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001da01:	e4 60                	in     al,0x60
c001da03:	3c 1c                	cmp    al,0x1c
c001da05:	74 04                	je     c001da0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001da07:	3c 5a                	cmp    al,0x5a
c001da09:	75 f6                	jne    c001da01 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001da0b:	e4 60                	in     al,0x60
c001da0d:	3c 5a                	cmp    al,0x5a
c001da0f:	74 fa                	je     c001da0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001da11:	3c 1c                	cmp    al,0x1c
c001da13:	74 f6                	je     c001da0b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001da15:	e9 44 ff ff ff       	jmp    c001d95e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001da1a:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001da21:	75 0b                	jne    c001da2e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001da23:	31 f6                	xor    esi,esi
c001da25:	31 db                	xor    ebx,ebx
c001da27:	31 ed                	xor    ebp,ebp
c001da29:	e9 a3 01 00 00       	jmp    c001dbd1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001da2e:	83 ec 0c             	sub    esp,0xc
c001da31:	68 a2 5d 02 c0       	push   0xc0025da2
c001da36:	e8 d6 c2 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001da3b:	8b 15 c0 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273c0
c001da41:	83 c4 10             	add    esp,0x10
c001da44:	f6 c2 80             	test   dl,0x80
c001da47:	74 0c                	je     c001da55 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001da49:	0f ba e2 0b          	bt     edx,0xb
c001da4d:	72 1a                	jb     c001da69 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001da4f:	eb d2                	jmp    c001da23 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001da51:	3c 5a                	cmp    al,0x5a
c001da53:	74 0c                	je     c001da61 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001da55:	e4 60                	in     al,0x60
c001da57:	3c 1c                	cmp    al,0x1c
c001da59:	75 f6                	jne    c001da51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001da5b:	eb 04                	jmp    c001da61 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001da5d:	3c 1c                	cmp    al,0x1c
c001da5f:	75 e8                	jne    c001da49 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001da61:	e4 60                	in     al,0x60
c001da63:	3c 5a                	cmp    al,0x5a
c001da65:	74 fa                	je     c001da61 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001da67:	eb f4                	jmp    c001da5d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001da69:	83 ec 0c             	sub    esp,0xc
c001da6c:	68 a7 5d 02 c0       	push   0xc0025da7
c001da71:	e8 9b c2 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001da76:	83 c4 10             	add    esp,0x10
c001da79:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001da80:	75 a1                	jne    c001da23 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001da82:	e4 60                	in     al,0x60
c001da84:	3c 5a                	cmp    al,0x5a
c001da86:	74 04                	je     c001da8c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001da88:	3c 1c                	cmp    al,0x1c
c001da8a:	75 f6                	jne    c001da82 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001da8c:	e4 60                	in     al,0x60
c001da8e:	3c 5a                	cmp    al,0x5a
c001da90:	74 fa                	je     c001da8c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001da92:	3c 1c                	cmp    al,0x1c
c001da94:	74 f6                	je     c001da8c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001da96:	eb 8b                	jmp    c001da23 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001da98:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001da9f:	0f 85 3d 01 00 00    	jne    c001dbe2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001daa5:	a1 e8 b2 02 c0       	mov    eax,ds:0xc002b2e8
c001daaa:	8d 7e 01             	lea    edi,[esi+0x1]
c001daad:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001dab0:	d4 40                	aam    0x40
c001dab2:	d5 39                	aad    0x39
c001dab4:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001dabb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dabf:	0f 85 53 01 00 00    	jne    c001dc18 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001dac5:	8b 15 e8 b2 02 c0    	mov    edx,DWORD PTR ds:0xc002b2e8
c001dacb:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001dace:	d4 40                	aam    0x40
c001dad0:	d5 39                	aad    0x39
c001dad2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dad6:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001dada:	d4 40                	aam    0x40
c001dadc:	d5 39                	aad    0x39
c001dade:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001dae2:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001dae6:	d4 40                	aam    0x40
c001dae8:	d5 39                	aad    0x39
c001daea:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001daee:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001daf2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001daf6:	3c 56                	cmp    al,0x56
c001daf8:	74 49                	je     c001db43 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001dafa:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001dafe:	d4 40                	aam    0x40
c001db00:	d5 39                	aad    0x39
c001db02:	8d 48 d0             	lea    ecx,[eax-0x30]
c001db05:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001db09:	0f b6 c9             	movzx  ecx,cl
c001db0c:	c1 e1 04             	shl    ecx,0x4
c001db0f:	d4 40                	aam    0x40
c001db11:	d5 39                	aad    0x39
c001db13:	83 e8 30             	sub    eax,0x30
c001db16:	0f b6 c0             	movzx  eax,al
c001db19:	09 c1                	or     ecx,eax
c001db1b:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001db1f:	c1 e1 04             	shl    ecx,0x4
c001db22:	d4 40                	aam    0x40
c001db24:	d5 39                	aad    0x39
c001db26:	83 e8 30             	sub    eax,0x30
c001db29:	0f b6 c0             	movzx  eax,al
c001db2c:	09 c1                	or     ecx,eax
c001db2e:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001db32:	c1 e1 04             	shl    ecx,0x4
c001db35:	d4 40                	aam    0x40
c001db37:	d5 39                	aad    0x39
c001db39:	83 e8 30             	sub    eax,0x30
c001db3c:	0f b6 c0             	movzx  eax,al
c001db3f:	09 c8                	or     eax,ecx
c001db41:	89 c5                	mov    ebp,eax
c001db43:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001db47:	80 f9 44             	cmp    cl,0x44
c001db4a:	74 47                	je     c001db93 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001db4c:	88 c8                	mov    al,cl
c001db4e:	d4 40                	aam    0x40
c001db50:	d5 39                	aad    0x39
c001db52:	83 e8 30             	sub    eax,0x30
c001db55:	0f b6 f8             	movzx  edi,al
c001db58:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001db5c:	c1 e7 04             	shl    edi,0x4
c001db5f:	d4 40                	aam    0x40
c001db61:	d5 39                	aad    0x39
c001db63:	8d 58 d0             	lea    ebx,[eax-0x30]
c001db66:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001db6a:	0f b6 db             	movzx  ebx,bl
c001db6d:	09 fb                	or     ebx,edi
c001db6f:	c1 e3 04             	shl    ebx,0x4
c001db72:	d4 40                	aam    0x40
c001db74:	d5 39                	aad    0x39
c001db76:	83 e8 30             	sub    eax,0x30
c001db79:	0f b6 f8             	movzx  edi,al
c001db7c:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001db80:	09 fb                	or     ebx,edi
c001db82:	89 df                	mov    edi,ebx
c001db84:	c1 e7 04             	shl    edi,0x4
c001db87:	d4 40                	aam    0x40
c001db89:	d5 39                	aad    0x39
c001db8b:	8d 58 d0             	lea    ebx,[eax-0x30]
c001db8e:	0f b6 db             	movzx  ebx,bl
c001db91:	09 fb                	or     ebx,edi
c001db93:	a1 e4 b2 02 c0       	mov    eax,ds:0xc002b2e4
c001db98:	83 c6 10             	add    esi,0x10
c001db9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001db9f:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001dba3:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001dba6:	3c 0a                	cmp    al,0xa
c001dba8:	0f 85 a0 00 00 00    	jne    c001dc4e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001dbae:	3c 0a                	cmp    al,0xa
c001dbb0:	0f 94 c0             	sete   al
c001dbb3:	0f b6 c0             	movzx  eax,al
c001dbb6:	01 c6                	add    esi,eax
c001dbb8:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001dbbd:	0f 84 a2 00 00 00    	je     c001dc65 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001dbc3:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001dbcb:	0f 84 94 00 00 00    	je     c001dc65 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001dbd1:	39 35 e4 b2 02 c0    	cmp    DWORD PTR ds:0xc002b2e4,esi
c001dbd7:	0f 8f bb fe ff ff    	jg     c001da98 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001dbdd:	e9 e8 00 00 00       	jmp    c001dcca <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001dbe2:	83 ec 0c             	sub    esp,0xc
c001dbe5:	68 ae 5d 02 c0       	push   0xc0025dae
c001dbea:	e8 22 c1 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001dbef:	83 c4 10             	add    esp,0x10
c001dbf2:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001dbf9:	0f 85 a6 fe ff ff    	jne    c001daa5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001dbff:	e4 60                	in     al,0x60
c001dc01:	3c 5a                	cmp    al,0x5a
c001dc03:	74 04                	je     c001dc09 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dc05:	3c 1c                	cmp    al,0x1c
c001dc07:	75 f6                	jne    c001dbff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001dc09:	e4 60                	in     al,0x60
c001dc0b:	3c 5a                	cmp    al,0x5a
c001dc0d:	74 fa                	je     c001dc09 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dc0f:	3c 1c                	cmp    al,0x1c
c001dc11:	74 f6                	je     c001dc09 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001dc13:	e9 8d fe ff ff       	jmp    c001daa5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001dc18:	83 ec 0c             	sub    esp,0xc
c001dc1b:	68 b6 5d 02 c0       	push   0xc0025db6
c001dc20:	e8 ec c0 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001dc25:	83 c4 10             	add    esp,0x10
c001dc28:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001dc2f:	0f 85 90 fe ff ff    	jne    c001dac5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001dc35:	e4 60                	in     al,0x60
c001dc37:	3c 5a                	cmp    al,0x5a
c001dc39:	74 04                	je     c001dc3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001dc3b:	3c 1c                	cmp    al,0x1c
c001dc3d:	75 f6                	jne    c001dc35 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001dc3f:	e4 60                	in     al,0x60
c001dc41:	3c 5a                	cmp    al,0x5a
c001dc43:	74 fa                	je     c001dc3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001dc45:	3c 1c                	cmp    al,0x1c
c001dc47:	74 f6                	je     c001dc3f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001dc49:	e9 77 fe ff ff       	jmp    c001dac5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001dc4e:	47                   	inc    edi
c001dc4f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001dc53:	0f 84 55 ff ff ff    	je     c001dbae <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001dc59:	46                   	inc    esi
c001dc5a:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001dc5d:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001dc60:	e9 3e ff ff ff       	jmp    c001dba3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001dc65:	80 f9 44             	cmp    cl,0x44
c001dc68:	74 0e                	je     c001dc78 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001dc6a:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001dc72:	0f 85 59 ff ff ff    	jne    c001dbd1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dc78:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001dc7c:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001dc80:	c1 e0 04             	shl    eax,0x4
c001dc83:	83 ea 30             	sub    edx,0x30
c001dc86:	09 d0                	or     eax,edx
c001dc88:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001dc8f:	0f 85 3c ff ff ff    	jne    c001dbd1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dc95:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001dc99:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc9d:	c1 e2 04             	shl    edx,0x4
c001dca0:	83 e8 30             	sub    eax,0x30
c001dca3:	09 d0                	or     eax,edx
c001dca5:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001dcac:	0f 85 1f ff ff ff    	jne    c001dbd1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dcb2:	50                   	push   eax
c001dcb3:	50                   	push   eax
c001dcb4:	8d 44 24 28          	lea    eax,[esp+0x28]
c001dcb8:	50                   	push   eax
c001dcb9:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001dcc0:	e8 73 2a fe ff       	call   c0000738 <strcpy>
c001dcc5:	83 c4 10             	add    esp,0x10
c001dcc8:	eb 15                	jmp    c001dcdf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001dcca:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001dcd1:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001dcdc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001dcdf:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001dce6:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dcec:	5b                   	pop    ebx
c001dced:	5e                   	pop    esi
c001dcee:	5f                   	pop    edi
c001dcef:	5d                   	pop    ebp
c001dcf0:	c3                   	ret    
c001dcf1:	90                   	nop

c001dcf2 <PCI::checkBus(unsigned char)>:
c001dcf2:	56                   	push   esi
c001dcf3:	53                   	push   ebx
c001dcf4:	31 db                	xor    ebx,ebx
c001dcf6:	51                   	push   ecx
c001dcf7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001dcfc:	52                   	push   edx
c001dcfd:	53                   	push   ebx
c001dcfe:	43                   	inc    ebx
c001dcff:	56                   	push   esi
c001dd00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd04:	e8 bf 07 00 00       	call   c001e4c8 <PCI::checkDevice(unsigned char, unsigned char)>
c001dd09:	83 c4 10             	add    esp,0x10
c001dd0c:	83 fb 20             	cmp    ebx,0x20
c001dd0f:	75 eb                	jne    c001dcfc <PCI::checkBus(unsigned char)+0xa>
c001dd11:	58                   	pop    eax
c001dd12:	5b                   	pop    ebx
c001dd13:	5e                   	pop    esi
c001dd14:	c3                   	ret    
c001dd15:	90                   	nop

c001dd16 <PCI::foundDevice(PCIDeviceInfo)>:
c001dd16:	55                   	push   ebp
c001dd17:	57                   	push   edi
c001dd18:	56                   	push   esi
c001dd19:	53                   	push   ebx
c001dd1a:	83 ec 1c             	sub    esp,0x1c
c001dd1d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dd21:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001dd27:	0f 84 20 04 00 00    	je     c001e14d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dd2d:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001dd34:	75 37                	jne    c001dd6d <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001dd36:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dd3a:	66 81 f9 06 04       	cmp    cx,0x406
c001dd3f:	75 5b                	jne    c001dd9c <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001dd41:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001dd46:	50                   	push   eax
c001dd47:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001dd4c:	50                   	push   eax
c001dd4d:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001dd52:	50                   	push   eax
c001dd53:	53                   	push   ebx
c001dd54:	e8 33 fa ff ff       	call   c001d78c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001dd59:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001dd5d:	0f b6 c0             	movzx  eax,al
c001dd60:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001dd64:	83 c4 2c             	add    esp,0x2c
c001dd67:	5b                   	pop    ebx
c001dd68:	5e                   	pop    esi
c001dd69:	5f                   	pop    edi
c001dd6a:	5d                   	pop    ebp
c001dd6b:	eb 85                	jmp    c001dcf2 <PCI::checkBus(unsigned char)>
c001dd6d:	83 ec 0c             	sub    esp,0xc
c001dd70:	68 bf 5d 02 c0       	push   0xc0025dbf
c001dd75:	e8 97 bf fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001dd7a:	83 c4 10             	add    esp,0x10
c001dd7d:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001dd84:	75 b0                	jne    c001dd36 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dd86:	e4 60                	in     al,0x60
c001dd88:	3c 5a                	cmp    al,0x5a
c001dd8a:	74 04                	je     c001dd90 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dd8c:	3c 1c                	cmp    al,0x1c
c001dd8e:	75 f6                	jne    c001dd86 <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001dd90:	e4 60                	in     al,0x60
c001dd92:	3c 5a                	cmp    al,0x5a
c001dd94:	74 fa                	je     c001dd90 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dd96:	3c 1c                	cmp    al,0x1c
c001dd98:	74 f6                	je     c001dd90 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dd9a:	eb 9a                	jmp    c001dd36 <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dd9c:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001dda2:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001dda6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ddaa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ddae:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ddb2:	88 d0                	mov    al,dl
c001ddb4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ddb9:	74 3b                	je     c001ddf6 <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001ddbb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ddbf:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001ddc2:	85 d2                	test   edx,edx
c001ddc4:	74 24                	je     c001ddea <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001ddc6:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001ddcc:	31 ef                	xor    edi,ebp
c001ddce:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001ddd4:	75 14                	jne    c001ddea <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001ddd6:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001dddc:	75 0c                	jne    c001ddea <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001ddde:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001dde4:	0f 84 63 03 00 00    	je     c001e14d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001ddea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ddee:	8b 12                	mov    edx,DWORD PTR [edx]
c001ddf0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ddf4:	eb be                	jmp    c001ddb4 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001ddf6:	66 81 f9 01 06       	cmp    cx,0x601
c001ddfb:	0f 85 81 01 00 00    	jne    c001df82 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001de01:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001de08:	75 25                	jne    c001de2f <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001de0a:	83 ec 0c             	sub    esp,0xc
c001de0d:	68 64 01 00 00       	push   0x164
c001de12:	e8 a0 be fe ff       	call   c0009cb7 <malloc>
c001de17:	89 04 24             	mov    DWORD PTR [esp],eax
c001de1a:	89 c5                	mov    ebp,eax
c001de1c:	e8 d3 12 00 00       	call   c001f0f4 <SATABus::SATABus()>
c001de21:	83 c4 10             	add    esp,0x10
c001de24:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001de2b:	74 4a                	je     c001de77 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001de2d:	eb 2f                	jmp    c001de5e <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001de2f:	83 ec 0c             	sub    esp,0xc
c001de32:	68 cf 5d 02 c0       	push   0xc0025dcf
c001de37:	e8 d5 be fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001de3c:	83 c4 10             	add    esp,0x10
c001de3f:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001de46:	75 c2                	jne    c001de0a <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001de48:	e4 60                	in     al,0x60
c001de4a:	3c 1c                	cmp    al,0x1c
c001de4c:	74 04                	je     c001de52 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001de4e:	3c 5a                	cmp    al,0x5a
c001de50:	75 f6                	jne    c001de48 <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001de52:	e4 60                	in     al,0x60
c001de54:	3c 5a                	cmp    al,0x5a
c001de56:	74 fa                	je     c001de52 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001de58:	3c 1c                	cmp    al,0x1c
c001de5a:	74 f6                	je     c001de52 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001de5c:	eb ac                	jmp    c001de0a <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001de5e:	83 ec 0c             	sub    esp,0xc
c001de61:	68 d5 5d 02 c0       	push   0xc0025dd5
c001de66:	e8 a6 be fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001de6b:	83 c4 10             	add    esp,0x10
c001de6e:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001de75:	74 1b                	je     c001de92 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001de77:	50                   	push   eax
c001de78:	50                   	push   eax
c001de79:	55                   	push   ebp
c001de7a:	53                   	push   ebx
c001de7b:	e8 c2 05 ff ff       	call   c000e442 <Device::addChild(Device*)>
c001de80:	83 c4 10             	add    esp,0x10
c001de83:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001de8a:	74 33                	je     c001debf <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001de8c:	eb 18                	jmp    c001dea6 <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001de8e:	3c 1c                	cmp    al,0x1c
c001de90:	74 0c                	je     c001de9e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001de92:	e4 60                	in     al,0x60
c001de94:	3c 5a                	cmp    al,0x5a
c001de96:	75 f6                	jne    c001de8e <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001de98:	eb 04                	jmp    c001de9e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001de9a:	3c 1c                	cmp    al,0x1c
c001de9c:	75 d9                	jne    c001de77 <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001de9e:	e4 60                	in     al,0x60
c001dea0:	3c 5a                	cmp    al,0x5a
c001dea2:	74 fa                	je     c001de9e <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dea4:	eb f4                	jmp    c001de9a <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001dea6:	83 ec 0c             	sub    esp,0xc
c001dea9:	68 dd 5d 02 c0       	push   0xc0025ddd
c001deae:	e8 5e be fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001deb3:	83 c4 10             	add    esp,0x10
c001deb6:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001debd:	74 29                	je     c001dee8 <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001debf:	83 ec 2c             	sub    esp,0x2c
c001dec2:	b9 09 00 00 00       	mov    ecx,0x9
c001dec7:	8d 74 24 60          	lea    esi,[esp+0x60]
c001decb:	fc                   	cld    
c001decc:	89 e7                	mov    edi,esp
c001dece:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ded0:	55                   	push   ebp
c001ded1:	e8 b2 04 ff ff       	call   c000e388 <Device::preOpenPCI(PCIDeviceInfo)>
c001ded6:	83 c4 30             	add    esp,0x30
c001ded9:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001dee0:	74 33                	je     c001df15 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001dee2:	eb 18                	jmp    c001defc <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001dee4:	3c 1c                	cmp    al,0x1c
c001dee6:	74 0c                	je     c001def4 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001dee8:	e4 60                	in     al,0x60
c001deea:	3c 5a                	cmp    al,0x5a
c001deec:	75 f6                	jne    c001dee4 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001deee:	eb 04                	jmp    c001def4 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001def0:	3c 1c                	cmp    al,0x1c
c001def2:	75 cb                	jne    c001debf <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001def4:	e4 60                	in     al,0x60
c001def6:	3c 5a                	cmp    al,0x5a
c001def8:	74 fa                	je     c001def4 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001defa:	eb f4                	jmp    c001def0 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001defc:	83 ec 0c             	sub    esp,0xc
c001deff:	68 e5 5d 02 c0       	push   0xc0025de5
c001df04:	e8 08 be fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001df09:	83 c4 10             	add    esp,0x10
c001df0c:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001df13:	74 23                	je     c001df38 <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001df15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001df18:	6a 00                	push   0x0
c001df1a:	6a 00                	push   0x0
c001df1c:	6a 00                	push   0x0
c001df1e:	55                   	push   ebp
c001df1f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001df22:	83 c4 10             	add    esp,0x10
c001df25:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001df2c:	0f 84 1b 02 00 00    	je     c001e14d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001df32:	eb 18                	jmp    c001df4c <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001df34:	3c 1c                	cmp    al,0x1c
c001df36:	74 0c                	je     c001df44 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001df38:	e4 60                	in     al,0x60
c001df3a:	3c 5a                	cmp    al,0x5a
c001df3c:	75 f6                	jne    c001df34 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001df3e:	eb 04                	jmp    c001df44 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001df40:	3c 1c                	cmp    al,0x1c
c001df42:	75 d1                	jne    c001df15 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001df44:	e4 60                	in     al,0x60
c001df46:	3c 5a                	cmp    al,0x5a
c001df48:	74 fa                	je     c001df44 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001df4a:	eb f4                	jmp    c001df40 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001df4c:	83 ec 0c             	sub    esp,0xc
c001df4f:	68 ed 5d 02 c0       	push   0xc0025ded
c001df54:	e8 b8 bd fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001df59:	83 c4 10             	add    esp,0x10
c001df5c:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001df63:	0f 85 e4 01 00 00    	jne    c001e14d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001df69:	e4 60                	in     al,0x60
c001df6b:	3c 5a                	cmp    al,0x5a
c001df6d:	74 04                	je     c001df73 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001df6f:	3c 1c                	cmp    al,0x1c
c001df71:	75 f6                	jne    c001df69 <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001df73:	e4 60                	in     al,0x60
c001df75:	3c 5a                	cmp    al,0x5a
c001df77:	74 fa                	je     c001df73 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001df79:	3c 1c                	cmp    al,0x1c
c001df7b:	74 f6                	je     c001df73 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001df7d:	e9 cb 01 00 00       	jmp    c001e14d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001df82:	66 81 f9 01 01       	cmp    cx,0x101
c001df87:	0f 85 7a 01 00 00    	jne    c001e107 <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001df8d:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001df94:	75 25                	jne    c001dfbb <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001df96:	83 ec 0c             	sub    esp,0xc
c001df99:	68 70 02 00 00       	push   0x270
c001df9e:	e8 14 bd fe ff       	call   c0009cb7 <malloc>
c001dfa3:	89 04 24             	mov    DWORD PTR [esp],eax
c001dfa6:	89 c5                	mov    ebp,eax
c001dfa8:	e8 df 05 00 00       	call   c001e58c <IDE::IDE()>
c001dfad:	83 c4 10             	add    esp,0x10
c001dfb0:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001dfb7:	74 4a                	je     c001e003 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001dfb9:	eb 2f                	jmp    c001dfea <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001dfbb:	83 ec 0c             	sub    esp,0xc
c001dfbe:	68 f5 5d 02 c0       	push   0xc0025df5
c001dfc3:	e8 49 bd fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001dfc8:	83 c4 10             	add    esp,0x10
c001dfcb:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001dfd2:	75 c2                	jne    c001df96 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001dfd4:	e4 60                	in     al,0x60
c001dfd6:	3c 5a                	cmp    al,0x5a
c001dfd8:	74 04                	je     c001dfde <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dfda:	3c 1c                	cmp    al,0x1c
c001dfdc:	75 f6                	jne    c001dfd4 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001dfde:	e4 60                	in     al,0x60
c001dfe0:	3c 5a                	cmp    al,0x5a
c001dfe2:	74 fa                	je     c001dfde <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dfe4:	3c 1c                	cmp    al,0x1c
c001dfe6:	74 f6                	je     c001dfde <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001dfe8:	eb ac                	jmp    c001df96 <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001dfea:	83 ec 0c             	sub    esp,0xc
c001dfed:	68 fc 5d 02 c0       	push   0xc0025dfc
c001dff2:	e8 1a bd fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001dff7:	83 c4 10             	add    esp,0x10
c001dffa:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001e001:	74 1b                	je     c001e01e <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001e003:	57                   	push   edi
c001e004:	57                   	push   edi
c001e005:	55                   	push   ebp
c001e006:	53                   	push   ebx
c001e007:	e8 36 04 ff ff       	call   c000e442 <Device::addChild(Device*)>
c001e00c:	83 c4 10             	add    esp,0x10
c001e00f:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001e016:	74 33                	je     c001e04b <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e018:	eb 18                	jmp    c001e032 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001e01a:	3c 1c                	cmp    al,0x1c
c001e01c:	74 0c                	je     c001e02a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e01e:	e4 60                	in     al,0x60
c001e020:	3c 5a                	cmp    al,0x5a
c001e022:	75 f6                	jne    c001e01a <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001e024:	eb 04                	jmp    c001e02a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e026:	3c 1c                	cmp    al,0x1c
c001e028:	75 d9                	jne    c001e003 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001e02a:	e4 60                	in     al,0x60
c001e02c:	3c 5a                	cmp    al,0x5a
c001e02e:	74 fa                	je     c001e02a <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001e030:	eb f4                	jmp    c001e026 <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001e032:	83 ec 0c             	sub    esp,0xc
c001e035:	68 03 5e 02 c0       	push   0xc0025e03
c001e03a:	e8 d2 bc fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e03f:	83 c4 10             	add    esp,0x10
c001e042:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001e049:	74 29                	je     c001e074 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001e04b:	83 ec 2c             	sub    esp,0x2c
c001e04e:	b9 09 00 00 00       	mov    ecx,0x9
c001e053:	8d 74 24 60          	lea    esi,[esp+0x60]
c001e057:	fc                   	cld    
c001e058:	89 e7                	mov    edi,esp
c001e05a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e05c:	55                   	push   ebp
c001e05d:	e8 26 03 ff ff       	call   c000e388 <Device::preOpenPCI(PCIDeviceInfo)>
c001e062:	83 c4 30             	add    esp,0x30
c001e065:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001e06c:	74 33                	je     c001e0a1 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e06e:	eb 18                	jmp    c001e088 <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001e070:	3c 1c                	cmp    al,0x1c
c001e072:	74 0c                	je     c001e080 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e074:	e4 60                	in     al,0x60
c001e076:	3c 5a                	cmp    al,0x5a
c001e078:	75 f6                	jne    c001e070 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001e07a:	eb 04                	jmp    c001e080 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e07c:	3c 1c                	cmp    al,0x1c
c001e07e:	75 cb                	jne    c001e04b <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001e080:	e4 60                	in     al,0x60
c001e082:	3c 5a                	cmp    al,0x5a
c001e084:	74 fa                	je     c001e080 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001e086:	eb f4                	jmp    c001e07c <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001e088:	83 ec 0c             	sub    esp,0xc
c001e08b:	68 0a 5e 02 c0       	push   0xc0025e0a
c001e090:	e8 7c bc fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e095:	83 c4 10             	add    esp,0x10
c001e098:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001e09f:	74 23                	je     c001e0c4 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001e0a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e0a4:	6a 00                	push   0x0
c001e0a6:	6a 00                	push   0x0
c001e0a8:	6a 00                	push   0x0
c001e0aa:	55                   	push   ebp
c001e0ab:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e0ae:	83 c4 10             	add    esp,0x10
c001e0b1:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001e0b8:	0f 84 8f 00 00 00    	je     c001e14d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e0be:	eb 18                	jmp    c001e0d8 <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001e0c0:	3c 1c                	cmp    al,0x1c
c001e0c2:	74 0c                	je     c001e0d0 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e0c4:	e4 60                	in     al,0x60
c001e0c6:	3c 5a                	cmp    al,0x5a
c001e0c8:	75 f6                	jne    c001e0c0 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001e0ca:	eb 04                	jmp    c001e0d0 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e0cc:	3c 1c                	cmp    al,0x1c
c001e0ce:	75 d1                	jne    c001e0a1 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001e0d0:	e4 60                	in     al,0x60
c001e0d2:	3c 5a                	cmp    al,0x5a
c001e0d4:	74 fa                	je     c001e0d0 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001e0d6:	eb f4                	jmp    c001e0cc <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001e0d8:	83 ec 0c             	sub    esp,0xc
c001e0db:	68 11 5e 02 c0       	push   0xc0025e11
c001e0e0:	e8 2c bc fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e0e5:	83 c4 10             	add    esp,0x10
c001e0e8:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001e0ef:	75 5c                	jne    c001e14d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e0f1:	e4 60                	in     al,0x60
c001e0f3:	3c 5a                	cmp    al,0x5a
c001e0f5:	74 04                	je     c001e0fb <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e0f7:	3c 1c                	cmp    al,0x1c
c001e0f9:	75 f6                	jne    c001e0f1 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001e0fb:	e4 60                	in     al,0x60
c001e0fd:	3c 5a                	cmp    al,0x5a
c001e0ff:	74 fa                	je     c001e0fb <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e101:	3c 1c                	cmp    al,0x1c
c001e103:	74 f6                	je     c001e0fb <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001e105:	eb 46                	jmp    c001e14d <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001e107:	83 ec 0c             	sub    esp,0xc
c001e10a:	68 58 01 00 00       	push   0x158
c001e10f:	e8 a3 bb fe ff       	call   c0009cb7 <malloc>
c001e114:	89 c5                	mov    ebp,eax
c001e116:	58                   	pop    eax
c001e117:	5a                   	pop    edx
c001e118:	68 18 5e 02 c0       	push   0xc0025e18
c001e11d:	55                   	push   ebp
c001e11e:	e8 29 06 ff ff       	call   c000e74c <DriverlessDevice::DriverlessDevice(char const*)>
c001e123:	59                   	pop    ecx
c001e124:	5e                   	pop    esi
c001e125:	55                   	push   ebp
c001e126:	53                   	push   ebx
c001e127:	e8 16 03 ff ff       	call   c000e442 <Device::addChild(Device*)>
c001e12c:	83 c4 10             	add    esp,0x10
c001e12f:	b9 09 00 00 00       	mov    ecx,0x9
c001e134:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001e138:	fc                   	cld    
c001e139:	89 fe                	mov    esi,edi
c001e13b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e13d:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001e141:	83 c4 1c             	add    esp,0x1c
c001e144:	5b                   	pop    ebx
c001e145:	5e                   	pop    esi
c001e146:	5f                   	pop    edi
c001e147:	5d                   	pop    ebp
c001e148:	e9 3b 02 ff ff       	jmp    c000e388 <Device::preOpenPCI(PCIDeviceInfo)>
c001e14d:	83 c4 1c             	add    esp,0x1c
c001e150:	5b                   	pop    ebx
c001e151:	5e                   	pop    esi
c001e152:	5f                   	pop    edi
c001e153:	5d                   	pop    ebp
c001e154:	c3                   	ret    
c001e155:	90                   	nop

c001e156 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001e156:	55                   	push   ebp
c001e157:	57                   	push   edi
c001e158:	56                   	push   esi
c001e159:	53                   	push   ebx
c001e15a:	81 ec b4 00 00 00    	sub    esp,0xb4
c001e160:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001e167:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001e16e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e172:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001e179:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e17d:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001e184:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e188:	68 32 5e 02 c0       	push   0xc0025e32
c001e18d:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001e191:	53                   	push   ebx
c001e192:	e8 a1 25 fe ff       	call   c0000738 <strcpy>
c001e197:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001e19c:	b2 64                	mov    dl,0x64
c001e19e:	89 c8                	mov    eax,ecx
c001e1a0:	f6 f2                	div    dl
c001e1a2:	b2 0a                	mov    dl,0xa
c001e1a4:	83 c0 30             	add    eax,0x30
c001e1a7:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001e1ab:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001e1af:	83 c4 10             	add    esp,0x10
c001e1b2:	89 c8                	mov    eax,ecx
c001e1b4:	f6 f2                	div    dl
c001e1b6:	89 c1                	mov    ecx,eax
c001e1b8:	0f b6 c0             	movzx  eax,al
c001e1bb:	88 e9                	mov    cl,ch
c001e1bd:	f6 f2                	div    dl
c001e1bf:	88 e0                	mov    al,ah
c001e1c1:	83 c0 30             	add    eax,0x30
c001e1c4:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001e1c8:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e1cc:	8d 41 30             	lea    eax,[ecx+0x30]
c001e1cf:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e1d3:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e1d7:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e1dc:	f6 f2                	div    dl
c001e1de:	89 c1                	mov    ecx,eax
c001e1e0:	0f b6 c0             	movzx  eax,al
c001e1e3:	88 e9                	mov    cl,ch
c001e1e5:	f6 f2                	div    dl
c001e1e7:	88 e0                	mov    al,ah
c001e1e9:	83 c0 30             	add    eax,0x30
c001e1ec:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e1f0:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e1f4:	8d 41 30             	lea    eax,[ecx+0x30]
c001e1f7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e1fb:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e1ff:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e204:	f6 f2                	div    dl
c001e206:	89 c1                	mov    ecx,eax
c001e208:	0f b6 c0             	movzx  eax,al
c001e20b:	88 e9                	mov    cl,ch
c001e20d:	f6 f2                	div    dl
c001e20f:	88 e0                	mov    al,ah
c001e211:	83 c0 30             	add    eax,0x30
c001e214:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001e21b:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e21f:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e223:	8d 41 30             	lea    eax,[ecx+0x30]
c001e226:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e22a:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e22e:	74 29                	je     c001e259 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e230:	83 ec 0c             	sub    esp,0xc
c001e233:	53                   	push   ebx
c001e234:	e8 d8 ba fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e239:	83 c4 10             	add    esp,0x10
c001e23c:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001e243:	75 14                	jne    c001e259 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e245:	e4 60                	in     al,0x60
c001e247:	3c 1c                	cmp    al,0x1c
c001e249:	74 04                	je     c001e24f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e24b:	3c 5a                	cmp    al,0x5a
c001e24d:	75 f6                	jne    c001e245 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e24f:	e4 60                	in     al,0x60
c001e251:	3c 5a                	cmp    al,0x5a
c001e253:	74 fa                	je     c001e24f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e255:	3c 1c                	cmp    al,0x1c
c001e257:	74 f6                	je     c001e24f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e259:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e25e:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e263:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e268:	83 ec 0c             	sub    esp,0xc
c001e26b:	6a 0c                	push   0xc
c001e26d:	56                   	push   esi
c001e26e:	53                   	push   ebx
c001e26f:	57                   	push   edi
c001e270:	55                   	push   ebp
c001e271:	e8 68 f3 ff ff       	call   c001d5de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e276:	83 c4 20             	add    esp,0x20
c001e279:	56                   	push   esi
c001e27a:	53                   	push   ebx
c001e27b:	57                   	push   edi
c001e27c:	55                   	push   ebp
c001e27d:	e8 50 f4 ff ff       	call   c001d6d2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e282:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e287:	56                   	push   esi
c001e288:	53                   	push   ebx
c001e289:	57                   	push   edi
c001e28a:	55                   	push   ebp
c001e28b:	e8 d8 f4 ff ff       	call   c001d768 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e290:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e294:	83 c4 14             	add    esp,0x14
c001e297:	6a 3c                	push   0x3c
c001e299:	56                   	push   esi
c001e29a:	53                   	push   ebx
c001e29b:	57                   	push   edi
c001e29c:	55                   	push   ebp
c001e29d:	e8 3c f3 ff ff       	call   c001d5de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e2a2:	0f b6 c4             	movzx  eax,ah
c001e2a5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e2a9:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e2ad:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e2b4:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c001e2b9:	83 c4 20             	add    esp,0x20
c001e2bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e2c2:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e2c9:	0f 84 38 01 00 00    	je     c001e407 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e2cf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e2d7:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c001e2dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e2e0:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e2e6:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e2ec:	0f 8e 15 01 00 00    	jle    c001e407 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e2f2:	50                   	push   eax
c001e2f3:	50                   	push   eax
c001e2f4:	68 4d 5e 02 c0       	push   0xc0025e4d
c001e2f9:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e2fd:	50                   	push   eax
c001e2fe:	e8 35 24 fe ff       	call   c0000738 <strcpy>
c001e303:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e307:	b9 0a 00 00 00       	mov    ecx,0xa
c001e30c:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e310:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e314:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e318:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e31c:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e320:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e324:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e328:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e32c:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e330:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e334:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e338:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e33c:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e340:	83 c4 10             	add    esp,0x10
c001e343:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e347:	99                   	cdq    
c001e348:	f7 f9                	idiv   ecx
c001e34a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e34e:	99                   	cdq    
c001e34f:	f7 f9                	idiv   ecx
c001e351:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e355:	83 c2 30             	add    edx,0x30
c001e358:	83 c0 30             	add    eax,0x30
c001e35b:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e35f:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e363:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001e36a:	74 2d                	je     c001e399 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e36c:	83 ec 0c             	sub    esp,0xc
c001e36f:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e373:	50                   	push   eax
c001e374:	e8 98 b9 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001e379:	83 c4 10             	add    esp,0x10
c001e37c:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001e383:	75 14                	jne    c001e399 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e385:	e4 60                	in     al,0x60
c001e387:	3c 5a                	cmp    al,0x5a
c001e389:	74 04                	je     c001e38f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e38b:	3c 1c                	cmp    al,0x1c
c001e38d:	75 f6                	jne    c001e385 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e38f:	e4 60                	in     al,0x60
c001e391:	3c 5a                	cmp    al,0x5a
c001e393:	74 fa                	je     c001e38f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e395:	3c 1c                	cmp    al,0x1c
c001e397:	74 f6                	je     c001e38f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e39d:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c001e3a2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e3a8:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e3ab:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e3b2:	39 d3                	cmp    ebx,edx
c001e3b4:	75 48                	jne    c001e3fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e3b6:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e3bd:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e3c1:	75 3b                	jne    c001e3fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e3c3:	83 ec 0c             	sub    esp,0xc
c001e3c6:	68 7c 5e 02 c0       	push   0xc0025e7c
c001e3cb:	e8 f5 eb fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001e3d0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e3d4:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c001e3d9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e3df:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e3e7:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e3eb:	50                   	push   eax
c001e3ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e3f0:	53                   	push   ebx
c001e3f1:	68 a1 5e 02 c0       	push   0xc0025ea1
c001e3f6:	e8 ca eb fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001e3fb:	83 c4 20             	add    esp,0x20
c001e3fe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e402:	e9 d0 fe ff ff       	jmp    c001e2d7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e407:	31 d2                	xor    edx,edx
c001e409:	83 ec 0c             	sub    esp,0xc
c001e40c:	56                   	push   esi
c001e40d:	53                   	push   ebx
c001e40e:	57                   	push   edi
c001e40f:	52                   	push   edx
c001e410:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e414:	55                   	push   ebp
c001e415:	e8 9a f3 ff ff       	call   c001d7b4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e41a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e41e:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e425:	42                   	inc    edx
c001e426:	83 c4 20             	add    esp,0x20
c001e429:	83 fa 06             	cmp    edx,0x6
c001e42c:	75 db                	jne    c001e409 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e42e:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e433:	83 ec 0c             	sub    esp,0xc
c001e436:	86 e0                	xchg   al,ah
c001e438:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e440:	6a 02                	push   0x2
c001e442:	56                   	push   esi
c001e443:	53                   	push   ebx
c001e444:	57                   	push   edi
c001e445:	55                   	push   ebp
c001e446:	e8 93 f1 ff ff       	call   c001d5de <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e44b:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e453:	83 c4 20             	add    esp,0x20
c001e456:	56                   	push   esi
c001e457:	53                   	push   ebx
c001e458:	57                   	push   edi
c001e459:	55                   	push   ebp
c001e45a:	e8 bd f2 ff ff       	call   c001d71c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e45f:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e466:	56                   	push   esi
c001e467:	53                   	push   ebx
c001e468:	57                   	push   edi
c001e469:	55                   	push   ebp
c001e46a:	e8 17 f2 ff ff       	call   c001d686 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e46f:	b9 09 00 00 00       	mov    ecx,0x9
c001e474:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e47c:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e480:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e487:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e48b:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e492:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e496:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e49d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e4a1:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e4a8:	83 ec 0c             	sub    esp,0xc
c001e4ab:	fc                   	cld    
c001e4ac:	89 e7                	mov    edi,esp
c001e4ae:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001e4b5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e4b7:	55                   	push   ebp
c001e4b8:	e8 59 f8 ff ff       	call   c001dd16 <PCI::foundDevice(PCIDeviceInfo)>
c001e4bd:	81 c4 dc 00 00 00    	add    esp,0xdc
c001e4c3:	5b                   	pop    ebx
c001e4c4:	5e                   	pop    esi
c001e4c5:	5f                   	pop    edi
c001e4c6:	5d                   	pop    ebp
c001e4c7:	c3                   	ret    

c001e4c8 <PCI::checkDevice(unsigned char, unsigned char)>:
c001e4c8:	55                   	push   ebp
c001e4c9:	57                   	push   edi
c001e4ca:	56                   	push   esi
c001e4cb:	53                   	push   ebx
c001e4cc:	83 ec 0c             	sub    esp,0xc
c001e4cf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e4d3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e4d8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e4dd:	6a 00                	push   0x0
c001e4df:	56                   	push   esi
c001e4e0:	57                   	push   edi
c001e4e1:	55                   	push   ebp
c001e4e2:	e8 9f f1 ff ff       	call   c001d686 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e4e7:	6a 00                	push   0x0
c001e4e9:	56                   	push   esi
c001e4ea:	57                   	push   edi
c001e4eb:	55                   	push   ebp
c001e4ec:	e8 65 fc ff ff       	call   c001e156 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e4f1:	83 c4 20             	add    esp,0x20
c001e4f4:	6a 00                	push   0x0
c001e4f6:	56                   	push   esi
c001e4f7:	57                   	push   edi
c001e4f8:	55                   	push   ebp
c001e4f9:	e8 ac f1 ff ff       	call   c001d6aa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e4fe:	83 c4 10             	add    esp,0x10
c001e501:	84 c0                	test   al,al
c001e503:	79 27                	jns    c001e52c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e505:	bb 01 00 00 00       	mov    ebx,0x1
c001e50a:	53                   	push   ebx
c001e50b:	56                   	push   esi
c001e50c:	57                   	push   edi
c001e50d:	55                   	push   ebp
c001e50e:	e8 73 f1 ff ff       	call   c001d686 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e513:	83 c4 10             	add    esp,0x10
c001e516:	66 40                	inc    ax
c001e518:	74 0c                	je     c001e526 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001e51a:	53                   	push   ebx
c001e51b:	56                   	push   esi
c001e51c:	57                   	push   edi
c001e51d:	55                   	push   ebp
c001e51e:	e8 33 fc ff ff       	call   c001e156 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e523:	83 c4 10             	add    esp,0x10
c001e526:	43                   	inc    ebx
c001e527:	83 fb 08             	cmp    ebx,0x8
c001e52a:	75 de                	jne    c001e50a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e52c:	83 c4 0c             	add    esp,0xc
c001e52f:	5b                   	pop    ebx
c001e530:	5e                   	pop    esi
c001e531:	5f                   	pop    edi
c001e532:	5d                   	pop    ebp
c001e533:	c3                   	ret    

c001e534 <PCI::detect()>:
c001e534:	56                   	push   esi
c001e535:	53                   	push   ebx
c001e536:	53                   	push   ebx
c001e537:	31 db                	xor    ebx,ebx
c001e539:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e53d:	6a 00                	push   0x0
c001e53f:	6a 00                	push   0x0
c001e541:	6a 00                	push   0x0
c001e543:	56                   	push   esi
c001e544:	e8 61 f1 ff ff       	call   c001d6aa <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e549:	83 c4 10             	add    esp,0x10
c001e54c:	a8 80                	test   al,0x80
c001e54e:	75 21                	jne    c001e571 <PCI::detect()+0x3d>
c001e550:	51                   	push   ecx
c001e551:	51                   	push   ecx
c001e552:	6a 00                	push   0x0
c001e554:	56                   	push   esi
c001e555:	e8 98 f7 ff ff       	call   c001dcf2 <PCI::checkBus(unsigned char)>
c001e55a:	83 c4 10             	add    esp,0x10
c001e55d:	eb 24                	jmp    c001e583 <PCI::detect()+0x4f>
c001e55f:	52                   	push   edx
c001e560:	52                   	push   edx
c001e561:	53                   	push   ebx
c001e562:	43                   	inc    ebx
c001e563:	56                   	push   esi
c001e564:	e8 89 f7 ff ff       	call   c001dcf2 <PCI::checkBus(unsigned char)>
c001e569:	83 c4 10             	add    esp,0x10
c001e56c:	83 fb 08             	cmp    ebx,0x8
c001e56f:	74 12                	je     c001e583 <PCI::detect()+0x4f>
c001e571:	53                   	push   ebx
c001e572:	6a 00                	push   0x0
c001e574:	6a 00                	push   0x0
c001e576:	56                   	push   esi
c001e577:	e8 0a f1 ff ff       	call   c001d686 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e57c:	83 c4 10             	add    esp,0x10
c001e57f:	66 40                	inc    ax
c001e581:	74 dc                	je     c001e55f <PCI::detect()+0x2b>
c001e583:	58                   	pop    eax
c001e584:	5b                   	pop    ebx
c001e585:	5e                   	pop    esi
c001e586:	c3                   	ret    
c001e587:	90                   	nop

c001e588 <IDE::close(int, int, void*)>:
c001e588:	83 c8 ff             	or     eax,0xffffffff
c001e58b:	c3                   	ret    

c001e58c <IDE::IDE()>:
c001e58c:	83 ec 0c             	sub    esp,0xc
c001e58f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e593:	83 ec 08             	sub    esp,0x8
c001e596:	68 e8 5e 02 c0       	push   0xc0025ee8
c001e59b:	50                   	push   eax
c001e59c:	e8 4f 02 ff ff       	call   c000e7f0 <HardDiskController::HardDiskController(char const*)>
c001e5a1:	83 c4 10             	add    esp,0x10
c001e5a4:	ba 94 5f 02 c0       	mov    edx,0xc0025f94
c001e5a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5ad:	89 10                	mov    DWORD PTR [eax],edx
c001e5af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5b3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e5ba:	90                   	nop
c001e5bb:	83 c4 0c             	add    esp,0xc
c001e5be:	c3                   	ret    
c001e5bf:	90                   	nop

c001e5c0 <IDE::prepareInterrupt(unsigned char)>:
c001e5c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e5c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e5c9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e5d1:	c3                   	ret    

c001e5d2 <selectDrive(unsigned char, unsigned char)>:
c001e5d2:	c3                   	ret    
c001e5d3:	90                   	nop

c001e5d4 <IDE::getBase(unsigned char)>:
c001e5d4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e5d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e5dd:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e5e5:	c3                   	ret    

c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e5e6:	55                   	push   ebp
c001e5e7:	57                   	push   edi
c001e5e8:	56                   	push   esi
c001e5e9:	53                   	push   ebx
c001e5ea:	83 ec 1c             	sub    esp,0x1c
c001e5ed:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e5f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e5f5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e5f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e5fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e600:	80 f9 03             	cmp    cl,0x3
c001e603:	77 51                	ja     c001e656 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e605:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e609:	0f b6 f2             	movzx  esi,dl
c001e60c:	0f b6 db             	movzx  ebx,bl
c001e60f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e612:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001e616:	83 ca 80             	or     edx,0xffffff80
c001e619:	0f b6 d2             	movzx  edx,dl
c001e61c:	52                   	push   edx
c001e61d:	6a 0c                	push   0xc
c001e61f:	56                   	push   esi
c001e620:	57                   	push   edi
c001e621:	e8 c0 ff ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e626:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e62b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e62f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e633:	ee                   	out    dx,al
c001e634:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e639:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e63d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e641:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e645:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e64d:	83 c4 2c             	add    esp,0x2c
c001e650:	5b                   	pop    ebx
c001e651:	5e                   	pop    esi
c001e652:	5f                   	pop    edi
c001e653:	5d                   	pop    ebp
c001e654:	eb 90                	jmp    c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e656:	80 fb 07             	cmp    bl,0x7
c001e659:	77 12                	ja     c001e66d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001e65b:	0f b6 d2             	movzx  edx,dl
c001e65e:	0f b6 db             	movzx  ebx,bl
c001e661:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001e669:	89 da                	mov    edx,ebx
c001e66b:	eb 2f                	jmp    c001e69c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e66d:	80 fb 0d             	cmp    bl,0xd
c001e670:	77 13                	ja     c001e685 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001e672:	0f b6 d2             	movzx  edx,dl
c001e675:	0f b6 db             	movzx  ebx,bl
c001e678:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e67f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e683:	eb 17                	jmp    c001e69c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e685:	80 fb 15             	cmp    bl,0x15
c001e688:	77 13                	ja     c001e69d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e68a:	0f b6 d2             	movzx  edx,dl
c001e68d:	0f b6 db             	movzx  ebx,bl
c001e690:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e698:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e69c:	ee                   	out    dx,al
c001e69d:	83 c4 1c             	add    esp,0x1c
c001e6a0:	5b                   	pop    ebx
c001e6a1:	5e                   	pop    esi
c001e6a2:	5f                   	pop    edi
c001e6a3:	5d                   	pop    ebp
c001e6a4:	c3                   	ret    
c001e6a5:	90                   	nop

c001e6a6 <IDE::read(unsigned char, unsigned char)>:
c001e6a6:	55                   	push   ebp
c001e6a7:	57                   	push   edi
c001e6a8:	56                   	push   esi
c001e6a9:	53                   	push   ebx
c001e6aa:	83 ec 1c             	sub    esp,0x1c
c001e6ad:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e6b1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e6b5:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e6b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e6bc:	3c 03                	cmp    al,0x3
c001e6be:	77 43                	ja     c001e703 <IDE::read(unsigned char, unsigned char)+0x5d>
c001e6c0:	0f b6 f2             	movzx  esi,dl
c001e6c3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e6c6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e6ca:	83 c8 80             	or     eax,0xffffff80
c001e6cd:	0f b6 c0             	movzx  eax,al
c001e6d0:	50                   	push   eax
c001e6d1:	6a 0c                	push   0xc
c001e6d3:	56                   	push   esi
c001e6d4:	57                   	push   edi
c001e6d5:	e8 0c ff ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6da:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e6df:	0f b6 c3             	movzx  eax,bl
c001e6e2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e6e6:	ec                   	in     al,dx
c001e6e7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e6eb:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e6f0:	52                   	push   edx
c001e6f1:	6a 0c                	push   0xc
c001e6f3:	56                   	push   esi
c001e6f4:	57                   	push   edi
c001e6f5:	e8 ec fe ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e6fa:	83 c4 20             	add    esp,0x20
c001e6fd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e701:	eb 49                	jmp    c001e74c <IDE::read(unsigned char, unsigned char)+0xa6>
c001e703:	80 fb 07             	cmp    bl,0x7
c001e706:	77 12                	ja     c001e71a <IDE::read(unsigned char, unsigned char)+0x74>
c001e708:	0f b6 d2             	movzx  edx,dl
c001e70b:	0f b6 c3             	movzx  eax,bl
c001e70e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e716:	89 c2                	mov    edx,eax
c001e718:	eb 31                	jmp    c001e74b <IDE::read(unsigned char, unsigned char)+0xa5>
c001e71a:	80 fb 0d             	cmp    bl,0xd
c001e71d:	77 13                	ja     c001e732 <IDE::read(unsigned char, unsigned char)+0x8c>
c001e71f:	0f b6 d2             	movzx  edx,dl
c001e722:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e729:	0f b6 d3             	movzx  edx,bl
c001e72c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e730:	eb 19                	jmp    c001e74b <IDE::read(unsigned char, unsigned char)+0xa5>
c001e732:	31 c0                	xor    eax,eax
c001e734:	80 fb 15             	cmp    bl,0x15
c001e737:	77 13                	ja     c001e74c <IDE::read(unsigned char, unsigned char)+0xa6>
c001e739:	0f b6 d2             	movzx  edx,dl
c001e73c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e744:	0f b6 d3             	movzx  edx,bl
c001e747:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e74b:	ec                   	in     al,dx
c001e74c:	83 c4 1c             	add    esp,0x1c
c001e74f:	5b                   	pop    ebx
c001e750:	5e                   	pop    esi
c001e751:	5f                   	pop    edi
c001e752:	5d                   	pop    ebp
c001e753:	c3                   	ret    

c001e754 <IDE::waitInterrupt(unsigned char)>:
c001e754:	55                   	push   ebp
c001e755:	57                   	push   edi
c001e756:	56                   	push   esi
c001e757:	53                   	push   ebx
c001e758:	31 db                	xor    ebx,ebx
c001e75a:	83 ec 0c             	sub    esp,0xc
c001e75d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e761:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e766:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e76e:	89 e8                	mov    eax,ebp
c001e770:	84 c0                	test   al,al
c001e772:	75 30                	jne    c001e7a4 <IDE::waitInterrupt(unsigned char)+0x50>
c001e774:	50                   	push   eax
c001e775:	6a 0c                	push   0xc
c001e777:	56                   	push   esi
c001e778:	57                   	push   edi
c001e779:	e8 28 ff ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001e77e:	83 c4 10             	add    esp,0x10
c001e781:	a8 01                	test   al,0x1
c001e783:	75 27                	jne    c001e7ac <IDE::waitInterrupt(unsigned char)+0x58>
c001e785:	f6 c3 04             	test   bl,0x4
c001e788:	75 12                	jne    c001e79c <IDE::waitInterrupt(unsigned char)+0x48>
c001e78a:	83 fb 32             	cmp    ebx,0x32
c001e78d:	7e 0d                	jle    c001e79c <IDE::waitInterrupt(unsigned char)+0x48>
c001e78f:	83 ec 0c             	sub    esp,0xc
c001e792:	6a 64                	push   0x64
c001e794:	e8 cb 8f ff ff       	call   c0017764 <milliTenthSleep(unsigned int)>
c001e799:	83 c4 10             	add    esp,0x10
c001e79c:	83 fb 3c             	cmp    ebx,0x3c
c001e79f:	74 0b                	je     c001e7ac <IDE::waitInterrupt(unsigned char)+0x58>
c001e7a1:	43                   	inc    ebx
c001e7a2:	eb c2                	jmp    c001e766 <IDE::waitInterrupt(unsigned char)+0x12>
c001e7a4:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e7ac:	83 c4 0c             	add    esp,0xc
c001e7af:	89 e8                	mov    eax,ebp
c001e7b1:	5b                   	pop    ebx
c001e7b2:	5e                   	pop    esi
c001e7b3:	5f                   	pop    edi
c001e7b4:	5d                   	pop    ebp
c001e7b5:	c3                   	ret    

c001e7b6 <ideChannel0IRQHandler(regs*, void*)>:
c001e7b6:	83 ec 10             	sub    esp,0x10
c001e7b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e7bd:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e7c4:	6a 07                	push   0x7
c001e7c6:	6a 00                	push   0x0
c001e7c8:	50                   	push   eax
c001e7c9:	e8 d8 fe ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001e7ce:	83 c4 1c             	add    esp,0x1c
c001e7d1:	c3                   	ret    

c001e7d2 <ideChannel1IRQHandler(regs*, void*)>:
c001e7d2:	83 ec 10             	sub    esp,0x10
c001e7d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e7d9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e7e0:	6a 07                	push   0x7
c001e7e2:	6a 01                	push   0x1
c001e7e4:	50                   	push   eax
c001e7e5:	e8 bc fe ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001e7ea:	83 c4 1c             	add    esp,0x1c
c001e7ed:	c3                   	ret    

c001e7ee <IDE::enableIRQs(unsigned char, bool)>:
c001e7ee:	57                   	push   edi
c001e7ef:	56                   	push   esi
c001e7f0:	be 04 00 00 00       	mov    esi,0x4
c001e7f5:	53                   	push   ebx
c001e7f6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e7fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e7ff:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e804:	0f 94 c0             	sete   al
c001e807:	d1 e0                	shl    eax,1
c001e809:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001e810:	0f b6 c0             	movzx  eax,al
c001e813:	50                   	push   eax
c001e814:	6a 0c                	push   0xc
c001e816:	57                   	push   edi
c001e817:	53                   	push   ebx
c001e818:	e8 c9 fd ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e81d:	83 c4 10             	add    esp,0x10
c001e820:	50                   	push   eax
c001e821:	6a 0c                	push   0xc
c001e823:	57                   	push   edi
c001e824:	53                   	push   ebx
c001e825:	e8 7c fe ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001e82a:	83 c4 10             	add    esp,0x10
c001e82d:	4e                   	dec    esi
c001e82e:	75 f0                	jne    c001e820 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001e830:	5b                   	pop    ebx
c001e831:	5e                   	pop    esi
c001e832:	5f                   	pop    edi
c001e833:	c3                   	ret    

c001e834 <IDE::open(int, int, void*)>:
c001e834:	55                   	push   ebp
c001e835:	57                   	push   edi
c001e836:	56                   	push   esi
c001e837:	53                   	push   ebx
c001e838:	83 ec 1c             	sub    esp,0x1c
c001e83b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e83f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e848:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e851:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e858:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e85f:	0f 85 cb 02 00 00    	jne    c001eb30 <IDE::open(int, int, void*)+0x2fc>
c001e865:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e86b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001e86f:	83 e0 7f             	and    eax,0x7f
c001e872:	3c 05                	cmp    al,0x5
c001e874:	74 04                	je     c001e87a <IDE::open(int, int, void*)+0x46>
c001e876:	3c 0f                	cmp    al,0xf
c001e878:	75 32                	jne    c001e8ac <IDE::open(int, int, void*)+0x78>
c001e87a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e880:	83 e0 fc             	and    eax,0xfffffffc
c001e883:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e88a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e890:	83 e0 fc             	and    eax,0xfffffffc
c001e893:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e89a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e8a0:	83 e0 fc             	and    eax,0xfffffffc
c001e8a3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e8aa:	eb 14                	jmp    c001e8c0 <IDE::open(int, int, void*)+0x8c>
c001e8ac:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e8b6:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e8c0:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e8c7:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001e8ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e8d2:	89 c6                	mov    esi,eax
c001e8d4:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e8d9:	c1 e6 10             	shl    esi,0x10
c001e8dc:	89 e8                	mov    eax,ebp
c001e8de:	89 fa                	mov    edx,edi
c001e8e0:	c1 e0 0b             	shl    eax,0xb
c001e8e3:	09 f0                	or     eax,esi
c001e8e5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001e8ec:	c1 e6 08             	shl    esi,0x8
c001e8ef:	09 c6                	or     esi,eax
c001e8f1:	89 f0                	mov    eax,esi
c001e8f3:	0d 08 00 00 80       	or     eax,0x80000008
c001e8f8:	ef                   	out    dx,eax
c001e8f9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001e8fe:	89 ca                	mov    edx,ecx
c001e900:	ed                   	in     eax,dx
c001e901:	c1 e8 10             	shr    eax,0x10
c001e904:	3d ff ff 00 00       	cmp    eax,0xffff
c001e909:	0f 84 f5 00 00 00    	je     c001ea04 <IDE::open(int, int, void*)+0x1d0>
c001e90f:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001e915:	89 fa                	mov    edx,edi
c001e917:	89 f0                	mov    eax,esi
c001e919:	ef                   	out    dx,eax
c001e91a:	b0 fe                	mov    al,0xfe
c001e91c:	89 ca                	mov    edx,ecx
c001e91e:	ee                   	out    dx,al
c001e91f:	89 f0                	mov    eax,esi
c001e921:	89 fa                	mov    edx,edi
c001e923:	ef                   	out    dx,eax
c001e924:	89 ca                	mov    edx,ecx
c001e926:	ed                   	in     eax,dx
c001e927:	3c fe                	cmp    al,0xfe
c001e929:	0f 85 a9 00 00 00    	jne    c001e9d8 <IDE::open(int, int, void*)+0x1a4>
c001e92f:	8b 15 a8 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273a8
c001e935:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001e93c:	74 33                	je     c001e971 <IDE::open(int, int, void*)+0x13d>
c001e93e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001e944:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001e948:	40                   	inc    eax
c001e949:	83 ec 0c             	sub    esp,0xc
c001e94c:	0f b6 c0             	movzx  eax,al
c001e94f:	50                   	push   eax
c001e950:	55                   	push   ebp
c001e951:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e955:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001e95b:	51                   	push   ecx
c001e95c:	e8 bb 29 ff ff       	call   c001131c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001e961:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001e966:	83 c4 1c             	add    esp,0x1c
c001e969:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e96f:	eb 0a                	jmp    c001e97b <IDE::open(int, int, void*)+0x147>
c001e971:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e97b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e982:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e989:	c1 e1 10             	shl    ecx,0x10
c001e98c:	c1 e0 08             	shl    eax,0x8
c001e98f:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e994:	09 c1                	or     ecx,eax
c001e996:	89 fa                	mov    edx,edi
c001e998:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e99f:	c1 e0 0b             	shl    eax,0xb
c001e9a2:	09 c1                	or     ecx,eax
c001e9a4:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e9aa:	89 c8                	mov    eax,ecx
c001e9ac:	ef                   	out    dx,eax
c001e9ad:	be fc 0c 00 00       	mov    esi,0xcfc
c001e9b2:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e9b8:	89 f2                	mov    edx,esi
c001e9ba:	ee                   	out    dx,al
c001e9bb:	89 c8                	mov    eax,ecx
c001e9bd:	89 fa                	mov    edx,edi
c001e9bf:	ef                   	out    dx,eax
c001e9c0:	89 f2                	mov    edx,esi
c001e9c2:	ed                   	in     eax,dx
c001e9c3:	0f b6 c0             	movzx  eax,al
c001e9c6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e9cc:	74 46                	je     c001ea14 <IDE::open(int, int, void*)+0x1e0>
c001e9ce:	83 ec 0c             	sub    esp,0xc
c001e9d1:	68 00 5f 02 c0       	push   0xc0025f00
c001e9d6:	eb 34                	jmp    c001ea0c <IDE::open(int, int, void*)+0x1d8>
c001e9d8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e9e1:	75 17                	jne    c001e9fa <IDE::open(int, int, void*)+0x1c6>
c001e9e3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001e9e8:	74 07                	je     c001e9f1 <IDE::open(int, int, void*)+0x1bd>
c001e9ea:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001e9ef:	75 09                	jne    c001e9fa <IDE::open(int, int, void*)+0x1c6>
c001e9f1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e9f8:	eb 1a                	jmp    c001ea14 <IDE::open(int, int, void*)+0x1e0>
c001e9fa:	83 ec 0c             	sub    esp,0xc
c001e9fd:	68 08 5f 02 c0       	push   0xc0025f08
c001ea02:	eb 08                	jmp    c001ea0c <IDE::open(int, int, void*)+0x1d8>
c001ea04:	83 ec 0c             	sub    esp,0xc
c001ea07:	68 39 5f 02 c0       	push   0xc0025f39
c001ea0c:	e8 f6 53 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c001ea11:	83 c4 10             	add    esp,0x10
c001ea14:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001ea1b:	79 1a                	jns    c001ea37 <IDE::open(int, int, void*)+0x203>
c001ea1d:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001ea23:	83 e0 fc             	and    eax,0xfffffffc
c001ea26:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001ea2d:	83 c0 08             	add    eax,0x8
c001ea30:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ea37:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ea3d:	89 c2                	mov    edx,eax
c001ea3f:	83 e2 0f             	and    edx,0xf
c001ea42:	66 83 fa 08          	cmp    dx,0x8
c001ea46:	75 0a                	jne    c001ea52 <IDE::open(int, int, void*)+0x21e>
c001ea48:	83 e8 02             	sub    eax,0x2
c001ea4b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ea52:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ea58:	89 c2                	mov    edx,eax
c001ea5a:	83 e2 0f             	and    edx,0xf
c001ea5d:	66 83 fa 08          	cmp    dx,0x8
c001ea61:	75 0a                	jne    c001ea6d <IDE::open(int, int, void*)+0x239>
c001ea63:	83 e8 02             	sub    eax,0x2
c001ea66:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ea6d:	0f b6 8b c4 00 00 00 	movzx  ecx,BYTE PTR [ebx+0xc4]
c001ea74:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ea7b:	89 c8                	mov    eax,ecx
c001ea7d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ea80:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ea84:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ea88:	8d 51 01             	lea    edx,[ecx+0x1]
c001ea8b:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ea90:	0f b6 d2             	movzx  edx,dl
c001ea93:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001ea9a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ea9d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001eaa1:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001eaa5:	8d 48 02             	lea    ecx,[eax+0x2]
c001eaa8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001eaad:	0f b6 c9             	movzx  ecx,cl
c001eab0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001eab6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001eab9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001eabd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001eac1:	8d 50 03             	lea    edx,[eax+0x3]
c001eac4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001eac9:	0f b6 d2             	movzx  edx,dl
c001eacc:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ead2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ead5:	83 c0 04             	add    eax,0x4
c001ead8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001eadc:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001eae0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001eae6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001eaeb:	56                   	push   esi
c001eaec:	56                   	push   esi
c001eaed:	0f b7 83 5e 01 00 00 	movzx  eax,WORD PTR [ebx+0x15e]
c001eaf4:	50                   	push   eax
c001eaf5:	68 63 5f 02 c0       	push   0xc0025f63
c001eafa:	e8 c6 e4 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001eaff:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001eb06:	83 c4 10             	add    esp,0x10
c001eb09:	66 85 f6             	test   si,si
c001eb0c:	74 5f                	je     c001eb6d <IDE::open(int, int, void*)+0x339>
c001eb0e:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001eb15:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001eb18:	89 d0                	mov    eax,edx
c001eb1a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001eb1e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001eb22:	40                   	inc    eax
c001eb23:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001eb29:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001eb2e:	eb 3d                	jmp    c001eb6d <IDE::open(int, int, void*)+0x339>
c001eb30:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001eb36:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001eb3d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001eb44:	66 05 06 02          	add    ax,0x206
c001eb48:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001eb4f:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001eb56:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001eb5d:	66 05 06 02          	add    ax,0x206
c001eb61:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001eb68:	e9 ca fe ff ff       	jmp    c001ea37 <IDE::open(int, int, void*)+0x203>
c001eb6d:	50                   	push   eax
c001eb6e:	50                   	push   eax
c001eb6f:	6a 00                	push   0x0
c001eb71:	53                   	push   ebx
c001eb72:	e8 49 fa ff ff       	call   c001e5c0 <IDE::prepareInterrupt(unsigned char)>
c001eb77:	5a                   	pop    edx
c001eb78:	59                   	pop    ecx
c001eb79:	6a 01                	push   0x1
c001eb7b:	53                   	push   ebx
c001eb7c:	e8 3f fa ff ff       	call   c001e5c0 <IDE::prepareInterrupt(unsigned char)>
c001eb81:	83 c4 0c             	add    esp,0xc
c001eb84:	6a 00                	push   0x0
c001eb86:	6a 00                	push   0x0
c001eb88:	53                   	push   ebx
c001eb89:	e8 60 fc ff ff       	call   c001e7ee <IDE::enableIRQs(unsigned char, bool)>
c001eb8e:	83 c4 0c             	add    esp,0xc
c001eb91:	6a 00                	push   0x0
c001eb93:	6a 01                	push   0x1
c001eb95:	53                   	push   ebx
c001eb96:	e8 53 fc ff ff       	call   c001e7ee <IDE::enableIRQs(unsigned char, bool)>
c001eb9b:	83 c4 10             	add    esp,0x10
c001eb9e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001eba5:	74 34                	je     c001ebdb <IDE::open(int, int, void*)+0x3a7>
c001eba7:	83 ec 0c             	sub    esp,0xc
c001ebaa:	53                   	push   ebx
c001ebab:	6a 01                	push   0x1
c001ebad:	68 b6 e7 01 c0       	push   0xc001e7b6
c001ebb2:	6a 0e                	push   0xe
c001ebb4:	53                   	push   ebx
c001ebb5:	e8 34 f8 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ebba:	83 c4 14             	add    esp,0x14
c001ebbd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ebc3:	53                   	push   ebx
c001ebc4:	6a 01                	push   0x1
c001ebc6:	68 d2 e7 01 c0       	push   0xc001e7d2
c001ebcb:	6a 0f                	push   0xf
c001ebcd:	53                   	push   ebx
c001ebce:	e8 1b f8 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ebd3:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ebd9:	eb 38                	jmp    c001ec13 <IDE::open(int, int, void*)+0x3df>
c001ebdb:	83 ec 0c             	sub    esp,0xc
c001ebde:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ebe8:	53                   	push   ebx
c001ebe9:	6a 00                	push   0x0
c001ebeb:	68 b6 e7 01 c0       	push   0xc001e7b6
c001ebf0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ebf6:	53                   	push   ebx
c001ebf7:	e8 f2 f7 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ebfc:	83 c4 14             	add    esp,0x14
c001ebff:	53                   	push   ebx
c001ec00:	6a 00                	push   0x0
c001ec02:	68 d2 e7 01 c0       	push   0xc001e7d2
c001ec07:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ec0d:	53                   	push   ebx
c001ec0e:	e8 db f7 fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ec13:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ec15:	83 c4 20             	add    esp,0x20
c001ec18:	83 ec 0c             	sub    esp,0xc
c001ec1b:	53                   	push   ebx
c001ec1c:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ec1f:	83 c4 0c             	add    esp,0xc
c001ec22:	6a 07                	push   0x7
c001ec24:	6a 00                	push   0x0
c001ec26:	53                   	push   ebx
c001ec27:	e8 7a fa ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001ec2c:	83 c4 0c             	add    esp,0xc
c001ec2f:	6a 07                	push   0x7
c001ec31:	6a 01                	push   0x1
c001ec33:	53                   	push   ebx
c001ec34:	e8 6d fa ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001ec39:	83 c4 0c             	add    esp,0xc
c001ec3c:	6a 01                	push   0x1
c001ec3e:	6a 00                	push   0x0
c001ec40:	53                   	push   ebx
c001ec41:	e8 a8 fb ff ff       	call   c001e7ee <IDE::enableIRQs(unsigned char, bool)>
c001ec46:	83 c4 0c             	add    esp,0xc
c001ec49:	6a 01                	push   0x1
c001ec4b:	6a 01                	push   0x1
c001ec4d:	53                   	push   ebx
c001ec4e:	e8 9b fb ff ff       	call   c001e7ee <IDE::enableIRQs(unsigned char, bool)>
c001ec53:	83 c4 2c             	add    esp,0x2c
c001ec56:	31 c0                	xor    eax,eax
c001ec58:	5b                   	pop    ebx
c001ec59:	5e                   	pop    esi
c001ec5a:	5f                   	pop    edi
c001ec5b:	5d                   	pop    ebp
c001ec5c:	c3                   	ret    
c001ec5d:	90                   	nop

c001ec5e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ec5e:	55                   	push   ebp
c001ec5f:	57                   	push   edi
c001ec60:	56                   	push   esi
c001ec61:	53                   	push   ebx
c001ec62:	83 ec 1c             	sub    esp,0x1c
c001ec65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ec69:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ec6d:	8d 50 f8             	lea    edx,[eax-0x8]
c001ec70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ec74:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ec78:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ec7c:	80 fa 03             	cmp    dl,0x3
c001ec7f:	77 5d                	ja     c001ecde <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ec81:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ec89:	0f b6 db             	movzx  ebx,bl
c001ec8c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ec8f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ec93:	83 ca 80             	or     edx,0xffffff80
c001ec96:	0f b6 d2             	movzx  edx,dl
c001ec99:	52                   	push   edx
c001ec9a:	6a 0c                	push   0xc
c001ec9c:	53                   	push   ebx
c001ec9d:	56                   	push   esi
c001ec9e:	e8 43 f9 ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eca3:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001eca8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ecac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ecb0:	0f b6 c0             	movzx  eax,al
c001ecb3:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001ecb7:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ecb9:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ecbe:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ecc2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ecc6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ecca:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ecd2:	83 c4 2c             	add    esp,0x2c
c001ecd5:	5b                   	pop    ebx
c001ecd6:	5e                   	pop    esi
c001ecd7:	5f                   	pop    edi
c001ecd8:	5d                   	pop    ebp
c001ecd9:	e9 08 f9 ff ff       	jmp    c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecde:	3c 07                	cmp    al,0x7
c001ece0:	77 10                	ja     c001ecf2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001ece2:	0f b6 db             	movzx  ebx,bl
c001ece5:	0f b6 d0             	movzx  edx,al
c001ece8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001ecf0:	eb 2d                	jmp    c001ed1f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ecf2:	3c 0d                	cmp    al,0xd
c001ecf4:	77 13                	ja     c001ed09 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001ecf6:	0f b6 db             	movzx  ebx,bl
c001ecf9:	0f b6 c0             	movzx  eax,al
c001ecfc:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001ed03:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001ed07:	eb 16                	jmp    c001ed1f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001ed09:	3c 15                	cmp    al,0x15
c001ed0b:	77 14                	ja     c001ed21 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001ed0d:	0f b6 db             	movzx  ebx,bl
c001ed10:	0f b6 c0             	movzx  eax,al
c001ed13:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001ed1b:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001ed1f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ed21:	83 c4 1c             	add    esp,0x1c
c001ed24:	5b                   	pop    ebx
c001ed25:	5e                   	pop    esi
c001ed26:	5f                   	pop    edi
c001ed27:	5d                   	pop    ebp
c001ed28:	c3                   	ret    
c001ed29:	90                   	nop

c001ed2a <IDE::detect()>:
c001ed2a:	55                   	push   ebp
c001ed2b:	57                   	push   edi
c001ed2c:	56                   	push   esi
c001ed2d:	53                   	push   ebx
c001ed2e:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001ed34:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001ed3b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001ed42:	0f 85 97 02 00 00    	jne    c001efdf <IDE::detect()+0x2b5>
c001ed48:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001ed4f:	31 f6                	xor    esi,esi
c001ed51:	31 ed                	xor    ebp,ebp
c001ed53:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ed5b:	89 e8                	mov    eax,ebp
c001ed5d:	c1 e0 06             	shl    eax,0x6
c001ed60:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ed68:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001ed6c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ed70:	c1 e0 04             	shl    eax,0x4
c001ed73:	83 c8 a0             	or     eax,0xffffffa0
c001ed76:	0f b6 c0             	movzx  eax,al
c001ed79:	50                   	push   eax
c001ed7a:	6a 06                	push   0x6
c001ed7c:	56                   	push   esi
c001ed7d:	53                   	push   ebx
c001ed7e:	e8 63 f8 ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed83:	83 c4 0c             	add    esp,0xc
c001ed86:	6a 0c                	push   0xc
c001ed88:	56                   	push   esi
c001ed89:	53                   	push   ebx
c001ed8a:	e8 17 f9 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001ed8f:	83 c4 0c             	add    esp,0xc
c001ed92:	6a 0c                	push   0xc
c001ed94:	56                   	push   esi
c001ed95:	53                   	push   ebx
c001ed96:	e8 0b f9 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001ed9b:	83 c4 0c             	add    esp,0xc
c001ed9e:	6a 0c                	push   0xc
c001eda0:	56                   	push   esi
c001eda1:	53                   	push   ebx
c001eda2:	e8 ff f8 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001eda7:	83 c4 0c             	add    esp,0xc
c001edaa:	6a 0c                	push   0xc
c001edac:	56                   	push   esi
c001edad:	53                   	push   ebx
c001edae:	e8 f3 f8 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001edb3:	68 ec 00 00 00       	push   0xec
c001edb8:	6a 07                	push   0x7
c001edba:	56                   	push   esi
c001edbb:	53                   	push   ebx
c001edbc:	e8 25 f8 ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001edc1:	83 c4 1c             	add    esp,0x1c
c001edc4:	6a 0c                	push   0xc
c001edc6:	56                   	push   esi
c001edc7:	53                   	push   ebx
c001edc8:	e8 d9 f8 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001edcd:	83 c4 0c             	add    esp,0xc
c001edd0:	6a 0c                	push   0xc
c001edd2:	56                   	push   esi
c001edd3:	53                   	push   ebx
c001edd4:	e8 cd f8 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001edd9:	83 c4 0c             	add    esp,0xc
c001eddc:	6a 0c                	push   0xc
c001edde:	56                   	push   esi
c001eddf:	53                   	push   ebx
c001ede0:	e8 c1 f8 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001ede5:	83 c4 0c             	add    esp,0xc
c001ede8:	6a 0c                	push   0xc
c001edea:	56                   	push   esi
c001edeb:	53                   	push   ebx
c001edec:	e8 b5 f8 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001edf1:	83 c4 0c             	add    esp,0xc
c001edf4:	6a 0c                	push   0xc
c001edf6:	56                   	push   esi
c001edf7:	53                   	push   ebx
c001edf8:	e8 a9 f8 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001edfd:	83 c4 10             	add    esp,0x10
c001ee00:	84 c0                	test   al,al
c001ee02:	0f 84 5f 01 00 00    	je     c001ef67 <IDE::detect()+0x23d>
c001ee08:	31 ff                	xor    edi,edi
c001ee0a:	50                   	push   eax
c001ee0b:	6a 0c                	push   0xc
c001ee0d:	56                   	push   esi
c001ee0e:	53                   	push   ebx
c001ee0f:	e8 92 f8 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001ee14:	83 c4 10             	add    esp,0x10
c001ee17:	a8 01                	test   al,0x1
c001ee19:	0f 85 69 01 00 00    	jne    c001ef88 <IDE::detect()+0x25e>
c001ee1f:	84 c0                	test   al,al
c001ee21:	78 04                	js     c001ee27 <IDE::detect()+0xfd>
c001ee23:	a8 08                	test   al,0x8
c001ee25:	75 23                	jne    c001ee4a <IDE::detect()+0x120>
c001ee27:	47                   	inc    edi
c001ee28:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ee2e:	7e da                	jle    c001ee0a <IDE::detect()+0xe0>
c001ee30:	83 ec 0c             	sub    esp,0xc
c001ee33:	6a 32                	push   0x32
c001ee35:	e8 2a 89 ff ff       	call   c0017764 <milliTenthSleep(unsigned int)>
c001ee3a:	83 c4 10             	add    esp,0x10
c001ee3d:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ee43:	75 c5                	jne    c001ee0a <IDE::detect()+0xe0>
c001ee45:	e9 3e 01 00 00       	jmp    c001ef88 <IDE::detect()+0x25e>
c001ee4a:	31 c9                	xor    ecx,ecx
c001ee4c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ee50:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ee54:	83 ec 0c             	sub    esp,0xc
c001ee57:	68 80 00 00 00       	push   0x80
c001ee5c:	57                   	push   edi
c001ee5d:	6a 00                	push   0x0
c001ee5f:	56                   	push   esi
c001ee60:	53                   	push   ebx
c001ee61:	e8 f8 fd ff ff       	call   c001ec5e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ee66:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ee6b:	89 e8                	mov    eax,ebp
c001ee6d:	89 d1                	mov    ecx,edx
c001ee6f:	c1 e0 06             	shl    eax,0x6
c001ee72:	01 d8                	add    eax,ebx
c001ee74:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ee7b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ee82:	89 f2                	mov    edx,esi
c001ee84:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001ee8a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001ee8e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ee94:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ee98:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ee9f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001eea7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001eeae:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001eeb6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001eebc:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001eec3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001eec9:	8d 54 24 58          	lea    edx,[esp+0x58]
c001eecd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001eed1:	83 c4 20             	add    esp,0x20
c001eed4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001eed7:	83 c0 02             	add    eax,0x2
c001eeda:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001eee0:	83 c7 02             	add    edi,0x2
c001eee3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001eee6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001eeec:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001eef0:	75 e2                	jne    c001eed4 <IDE::detect()+0x1aa>
c001eef2:	89 e8                	mov    eax,ebp
c001eef4:	c1 e0 06             	shl    eax,0x6
c001eef7:	01 d8                	add    eax,ebx
c001eef9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001eeff:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001ef06:	66 c1 ea 09          	shr    dx,0x9
c001ef0a:	83 e2 01             	and    edx,0x1
c001ef0d:	84 c9                	test   cl,cl
c001ef0f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001ef15:	75 22                	jne    c001ef39 <IDE::detect()+0x20f>
c001ef17:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001ef1e:	74 46                	je     c001ef66 <IDE::detect()+0x23c>
c001ef20:	83 ec 0c             	sub    esp,0xc
c001ef23:	68 7c 01 00 00       	push   0x17c
c001ef28:	e8 8a ad fe ff       	call   c0009cb7 <malloc>
c001ef2d:	89 c7                	mov    edi,eax
c001ef2f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef32:	e8 49 06 00 00       	call   c001f580 <ATA::ATA()>
c001ef37:	eb 17                	jmp    c001ef50 <IDE::detect()+0x226>
c001ef39:	83 ec 0c             	sub    esp,0xc
c001ef3c:	68 84 01 00 00       	push   0x184
c001ef41:	e8 71 ad fe ff       	call   c0009cb7 <malloc>
c001ef46:	89 c7                	mov    edi,eax
c001ef48:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef4b:	e8 b8 0c 00 00       	call   c001fc08 <ATAPI::ATAPI()>
c001ef50:	5a                   	pop    edx
c001ef51:	59                   	pop    ecx
c001ef52:	57                   	push   edi
c001ef53:	53                   	push   ebx
c001ef54:	e8 e9 f4 fe ff       	call   c000e442 <Device::addChild(Device*)>
c001ef59:	8b 07                	mov    eax,DWORD PTR [edi]
c001ef5b:	53                   	push   ebx
c001ef5c:	55                   	push   ebp
c001ef5d:	6a 00                	push   0x0
c001ef5f:	57                   	push   edi
c001ef60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ef63:	83 c4 20             	add    esp,0x20
c001ef66:	45                   	inc    ebp
c001ef67:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001ef6c:	74 0d                	je     c001ef7b <IDE::detect()+0x251>
c001ef6e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001ef76:	e9 e0 fd ff ff       	jmp    c001ed5b <IDE::detect()+0x31>
c001ef7b:	4e                   	dec    esi
c001ef7c:	74 61                	je     c001efdf <IDE::detect()+0x2b5>
c001ef7e:	be 01 00 00 00       	mov    esi,0x1
c001ef83:	e9 cb fd ff ff       	jmp    c001ed53 <IDE::detect()+0x29>
c001ef88:	50                   	push   eax
c001ef89:	6a 04                	push   0x4
c001ef8b:	56                   	push   esi
c001ef8c:	53                   	push   ebx
c001ef8d:	e8 14 f7 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001ef92:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ef96:	83 c4 0c             	add    esp,0xc
c001ef99:	6a 05                	push   0x5
c001ef9b:	56                   	push   esi
c001ef9c:	53                   	push   ebx
c001ef9d:	e8 04 f7 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001efa2:	83 c4 10             	add    esp,0x10
c001efa5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001efa9:	80 fa 14             	cmp    dl,0x14
c001efac:	75 04                	jne    c001efb2 <IDE::detect()+0x288>
c001efae:	3c eb                	cmp    al,0xeb
c001efb0:	eb 07                	jmp    c001efb9 <IDE::detect()+0x28f>
c001efb2:	3c 96                	cmp    al,0x96
c001efb4:	75 b1                	jne    c001ef67 <IDE::detect()+0x23d>
c001efb6:	80 fa 69             	cmp    dl,0x69
c001efb9:	75 ac                	jne    c001ef67 <IDE::detect()+0x23d>
c001efbb:	68 a1 00 00 00       	push   0xa1
c001efc0:	6a 07                	push   0x7
c001efc2:	56                   	push   esi
c001efc3:	53                   	push   ebx
c001efc4:	e8 1d f6 ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001efc9:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001efd0:	e8 8f 87 ff ff       	call   c0017764 <milliTenthSleep(unsigned int)>
c001efd5:	83 c4 10             	add    esp,0x10
c001efd8:	b1 01                	mov    cl,0x1
c001efda:	e9 6d fe ff ff       	jmp    c001ee4c <IDE::detect()+0x122>
c001efdf:	81 c4 1c 02 00 00    	add    esp,0x21c
c001efe5:	5b                   	pop    ebx
c001efe6:	5e                   	pop    esi
c001efe7:	5f                   	pop    edi
c001efe8:	5d                   	pop    ebp
c001efe9:	c3                   	ret    

c001efea <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001efea:	55                   	push   ebp
c001efeb:	57                   	push   edi
c001efec:	56                   	push   esi
c001efed:	53                   	push   ebx
c001efee:	83 ec 1c             	sub    esp,0x1c
c001eff1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eff5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eff9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001effd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001f001:	88 c3                	mov    bl,al
c001f003:	84 c0                	test   al,al
c001f005:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f009:	0f 84 81 00 00 00    	je     c001f090 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f00f:	83 ec 0c             	sub    esp,0xc
c001f012:	68 7f 5f 02 c0       	push   0xc0025f7f
c001f017:	e8 a9 df fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f01c:	83 c4 10             	add    esp,0x10
c001f01f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f023:	3c 01                	cmp    al,0x1
c001f025:	74 63                	je     c001f08a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001f027:	3c 02                	cmp    al,0x2
c001f029:	75 53                	jne    c001f07e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001f02b:	d1 e6                	shl    esi,1
c001f02d:	09 ee                	or     esi,ebp
c001f02f:	50                   	push   eax
c001f030:	89 f0                	mov    eax,esi
c001f032:	6a 01                	push   0x1
c001f034:	0f b6 f0             	movzx  esi,al
c001f037:	c1 e6 06             	shl    esi,0x6
c001f03a:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001f042:	50                   	push   eax
c001f043:	57                   	push   edi
c001f044:	e8 5d f6 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001f049:	83 c4 10             	add    esp,0x10
c001f04c:	a8 01                	test   al,0x1
c001f04e:	74 02                	je     c001f052 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001f050:	b3 07                	mov    bl,0x7
c001f052:	a8 02                	test   al,0x2
c001f054:	74 02                	je     c001f058 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001f056:	b3 03                	mov    bl,0x3
c001f058:	a8 04                	test   al,0x4
c001f05a:	74 02                	je     c001f05e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001f05c:	b3 14                	mov    bl,0x14
c001f05e:	a8 08                	test   al,0x8
c001f060:	74 02                	je     c001f064 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001f062:	b3 03                	mov    bl,0x3
c001f064:	a8 10                	test   al,0x10
c001f066:	74 02                	je     c001f06a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001f068:	b3 15                	mov    bl,0x15
c001f06a:	a8 20                	test   al,0x20
c001f06c:	74 02                	je     c001f070 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001f06e:	b3 03                	mov    bl,0x3
c001f070:	a8 40                	test   al,0x40
c001f072:	74 02                	je     c001f076 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001f074:	b3 16                	mov    bl,0x16
c001f076:	84 c0                	test   al,al
c001f078:	79 16                	jns    c001f090 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f07a:	b3 0d                	mov    bl,0xd
c001f07c:	eb 12                	jmp    c001f090 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f07e:	3c 03                	cmp    al,0x3
c001f080:	74 0c                	je     c001f08e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001f082:	3c 04                	cmp    al,0x4
c001f084:	75 0a                	jne    c001f090 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f086:	b3 08                	mov    bl,0x8
c001f088:	eb 06                	jmp    c001f090 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f08a:	b3 13                	mov    bl,0x13
c001f08c:	eb 02                	jmp    c001f090 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001f08e:	b3 17                	mov    bl,0x17
c001f090:	83 c4 1c             	add    esp,0x1c
c001f093:	88 d8                	mov    al,bl
c001f095:	5b                   	pop    ebx
c001f096:	5e                   	pop    esi
c001f097:	5f                   	pop    edi
c001f098:	5d                   	pop    ebp
c001f099:	c3                   	ret    

c001f09a <IDE::polling(unsigned char, unsigned int)>:
c001f09a:	57                   	push   edi
c001f09b:	56                   	push   esi
c001f09c:	53                   	push   ebx
c001f09d:	bb 04 00 00 00       	mov    ebx,0x4
c001f0a2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001f0a6:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001f0ab:	52                   	push   edx
c001f0ac:	6a 0c                	push   0xc
c001f0ae:	56                   	push   esi
c001f0af:	57                   	push   edi
c001f0b0:	e8 f1 f5 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001f0b5:	83 c4 10             	add    esp,0x10
c001f0b8:	4b                   	dec    ebx
c001f0b9:	75 f0                	jne    c001f0ab <IDE::polling(unsigned char, unsigned int)+0x11>
c001f0bb:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f0c0:	50                   	push   eax
c001f0c1:	6a 0c                	push   0xc
c001f0c3:	56                   	push   esi
c001f0c4:	57                   	push   edi
c001f0c5:	e8 dc f5 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001f0ca:	83 c4 10             	add    esp,0x10
c001f0cd:	a8 01                	test   al,0x1
c001f0cf:	75 17                	jne    c001f0e8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f0d1:	a8 20                	test   al,0x20
c001f0d3:	75 0f                	jne    c001f0e4 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001f0d5:	4b                   	dec    ebx
c001f0d6:	74 10                	je     c001f0e8 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001f0d8:	84 c0                	test   al,al
c001f0da:	78 e4                	js     c001f0c0 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f0dc:	a8 08                	test   al,0x8
c001f0de:	74 e0                	je     c001f0c0 <IDE::polling(unsigned char, unsigned int)+0x26>
c001f0e0:	31 c0                	xor    eax,eax
c001f0e2:	eb 06                	jmp    c001f0ea <IDE::polling(unsigned char, unsigned int)+0x50>
c001f0e4:	b0 01                	mov    al,0x1
c001f0e6:	eb 02                	jmp    c001f0ea <IDE::polling(unsigned char, unsigned int)+0x50>
c001f0e8:	b0 02                	mov    al,0x2
c001f0ea:	5b                   	pop    ebx
c001f0eb:	5e                   	pop    esi
c001f0ec:	5f                   	pop    edi
c001f0ed:	c3                   	ret    

c001f0ee <SATABus::close(int, int, void*)>:
c001f0ee:	31 c0                	xor    eax,eax
c001f0f0:	c3                   	ret    
c001f0f1:	90                   	nop

c001f0f2 <SATABus::detect()>:
c001f0f2:	c3                   	ret    
c001f0f3:	90                   	nop

c001f0f4 <SATABus::SATABus()>:
c001f0f4:	83 ec 0c             	sub    esp,0xc
c001f0f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0fb:	83 ec 08             	sub    esp,0x8
c001f0fe:	68 b8 5f 02 c0       	push   0xc0025fb8
c001f103:	50                   	push   eax
c001f104:	e8 e7 f6 fe ff       	call   c000e7f0 <HardDiskController::HardDiskController(char const*)>
c001f109:	83 c4 10             	add    esp,0x10
c001f10c:	ba 60 60 02 c0       	mov    edx,0xc0026060
c001f111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f115:	89 10                	mov    DWORD PTR [eax],edx
c001f117:	83 ec 0c             	sub    esp,0xc
c001f11a:	6a 50                	push   0x50
c001f11c:	e8 38 b3 fe ff       	call   c000a459 <Phys::allocateContiguousPages(int)>
c001f121:	83 c4 10             	add    esp,0x10
c001f124:	89 c2                	mov    edx,eax
c001f126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f130:	83 ec 0c             	sub    esp,0xc
c001f133:	6a 50                	push   0x50
c001f135:	e8 2f cb fe ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c001f13a:	83 c4 10             	add    esp,0x10
c001f13d:	89 c2                	mov    edx,eax
c001f13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f143:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f149:	a1 d4 74 02 c0       	mov    eax,ds:0xc00274d4
c001f14e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f152:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001f158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f15c:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f162:	83 ec 0c             	sub    esp,0xc
c001f165:	6a 03                	push   0x3
c001f167:	6a 50                	push   0x50
c001f169:	51                   	push   ecx
c001f16a:	52                   	push   edx
c001f16b:	50                   	push   eax
c001f16c:	e8 5b d4 fe ff       	call   c000c5cc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f171:	83 c4 20             	add    esp,0x20
c001f174:	90                   	nop
c001f175:	83 c4 0c             	add    esp,0xc
c001f178:	c3                   	ret    
c001f179:	90                   	nop

c001f17a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001f17a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f17e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001f181:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001f184:	09 c2                	or     edx,eax
c001f186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f18a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f190:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f192:	31 c0                	xor    eax,eax
c001f194:	c1 e9 08             	shr    ecx,0x8
c001f197:	83 e1 0f             	and    ecx,0xf
c001f19a:	39 c8                	cmp    eax,ecx
c001f19c:	74 0a                	je     c001f1a8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001f19e:	f6 c2 01             	test   dl,0x1
c001f1a1:	74 08                	je     c001f1ab <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001f1a3:	d1 ea                	shr    edx,1
c001f1a5:	40                   	inc    eax
c001f1a6:	eb f2                	jmp    c001f19a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001f1a8:	83 c8 ff             	or     eax,0xffffffff
c001f1ab:	c3                   	ret    

c001f1ac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001f1ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f1b0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001f1b3:	89 c2                	mov    edx,eax
c001f1b5:	c1 ea 08             	shr    edx,0x8
c001f1b8:	83 e2 0f             	and    edx,0xf
c001f1bb:	fe ca                	dec    dl
c001f1bd:	75 31                	jne    c001f1f0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f1bf:	83 e0 0f             	and    eax,0xf
c001f1c2:	3c 03                	cmp    al,0x3
c001f1c4:	75 2a                	jne    c001f1f0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001f1c6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001f1c9:	b8 02 00 00 00       	mov    eax,0x2
c001f1ce:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001f1d4:	74 1c                	je     c001f1f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f1d6:	b8 04 00 00 00       	mov    eax,0x4
c001f1db:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001f1e1:	74 0f                	je     c001f1f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001f1e3:	31 c0                	xor    eax,eax
c001f1e5:	83 fa 03             	cmp    edx,0x3
c001f1e8:	0f 94 c0             	sete   al
c001f1eb:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f1ef:	c3                   	ret    
c001f1f0:	31 c0                	xor    eax,eax
c001f1f2:	c3                   	ret    
c001f1f3:	90                   	nop

c001f1f4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1f8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f1fb:	0f ba e2 0f          	bt     edx,0xf
c001f1ff:	72 f7                	jb     c001f1f8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f201:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f204:	83 ca 10             	or     edx,0x10
c001f207:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f20a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f20d:	83 ca 01             	or     edx,0x1
c001f210:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f213:	c3                   	ret    

c001f214 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f214:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f218:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f21b:	83 e2 fe             	and    edx,0xfffffffe
c001f21e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f221:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f224:	83 e2 ef             	and    edx,0xffffffef
c001f227:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f22a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f22d:	0f ba e2 0e          	bt     edx,0xe
c001f231:	72 f7                	jb     c001f22a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f233:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f236:	0f ba e2 0f          	bt     edx,0xf
c001f23a:	72 ee                	jb     c001f22a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f23c:	c3                   	ret    
c001f23d:	90                   	nop

c001f23e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f23e:	55                   	push   ebp
c001f23f:	57                   	push   edi
c001f240:	56                   	push   esi
c001f241:	53                   	push   ebx
c001f242:	83 ec 1c             	sub    esp,0x1c
c001f245:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f249:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f24d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f251:	53                   	push   ebx
c001f252:	89 fd                	mov    ebp,edi
c001f254:	56                   	push   esi
c001f255:	c1 e5 0a             	shl    ebp,0xa
c001f258:	e8 b7 ff ff ff       	call   c001f214 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f25d:	83 ec 0c             	sub    esp,0xc
c001f260:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f266:	01 e8                	add    eax,ebp
c001f268:	89 03                	mov    DWORD PTR [ebx],eax
c001f26a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f26c:	68 00 04 00 00       	push   0x400
c001f271:	6a 00                	push   0x0
c001f273:	50                   	push   eax
c001f274:	e8 03 14 fe ff       	call   c000067c <memset>
c001f279:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f27f:	89 fa                	mov    edx,edi
c001f281:	01 e8                	add    eax,ebp
c001f283:	c1 e7 0d             	shl    edi,0xd
c001f286:	89 03                	mov    DWORD PTR [ebx],eax
c001f288:	c1 e2 08             	shl    edx,0x8
c001f28b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f292:	81 c2 00 80 00 00    	add    edx,0x8000
c001f298:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f29c:	89 d0                	mov    eax,edx
c001f29e:	83 c4 1c             	add    esp,0x1c
c001f2a1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f2a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f2aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f2ad:	68 00 01 00 00       	push   0x100
c001f2b2:	6a 00                	push   0x0
c001f2b4:	50                   	push   eax
c001f2b5:	e8 c2 13 fe ff       	call   c000067c <memset>
c001f2ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f2be:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f2c4:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f2ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f2ce:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f2d1:	83 c4 10             	add    esp,0x10
c001f2d4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f2db:	31 ff                	xor    edi,edi
c001f2dd:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f2e3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f2e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f2ed:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f2f3:	83 c5 20             	add    ebp,0x20
c001f2f6:	01 f8                	add    eax,edi
c001f2f8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f2fb:	52                   	push   edx
c001f2fc:	68 00 01 00 00       	push   0x100
c001f301:	6a 00                	push   0x0
c001f303:	50                   	push   eax
c001f304:	e8 73 13 fe ff       	call   c000067c <memset>
c001f309:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f30d:	83 c4 10             	add    esp,0x10
c001f310:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f316:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f31d:	01 f8                	add    eax,edi
c001f31f:	81 c7 00 01 00 00    	add    edi,0x100
c001f325:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f328:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f32e:	75 b3                	jne    c001f2e3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f330:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f334:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f338:	83 c4 1c             	add    esp,0x1c
c001f33b:	5b                   	pop    ebx
c001f33c:	5e                   	pop    esi
c001f33d:	5f                   	pop    edi
c001f33e:	5d                   	pop    ebp
c001f33f:	e9 b0 fe ff ff       	jmp    c001f1f4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f344 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f344:	55                   	push   ebp
c001f345:	57                   	push   edi
c001f346:	56                   	push   esi
c001f347:	53                   	push   ebx
c001f348:	83 ec 0c             	sub    esp,0xc
c001f34b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f34f:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001f356:	74 2d                	je     c001f385 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f358:	83 ec 0c             	sub    esp,0xc
c001f35b:	68 dc 5f 02 c0       	push   0xc0025fdc
c001f360:	e8 ac a9 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f365:	83 c4 10             	add    esp,0x10
c001f368:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001f36f:	75 14                	jne    c001f385 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f371:	e4 60                	in     al,0x60
c001f373:	3c 1c                	cmp    al,0x1c
c001f375:	74 04                	je     c001f37b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f377:	3c 5a                	cmp    al,0x5a
c001f379:	75 f6                	jne    c001f371 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f37b:	e4 60                	in     al,0x60
c001f37d:	3c 5a                	cmp    al,0x5a
c001f37f:	74 fa                	je     c001f37b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f381:	3c 1c                	cmp    al,0x1c
c001f383:	74 f6                	je     c001f37b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f385:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f389:	31 db                	xor    ebx,ebx
c001f38b:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f38e:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f394:	0f 84 78 01 00 00    	je     c001f512 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f39a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f39e:	89 d8                	mov    eax,ebx
c001f3a0:	c1 e0 07             	shl    eax,0x7
c001f3a3:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f3aa:	50                   	push   eax
c001f3ab:	50                   	push   eax
c001f3ac:	57                   	push   edi
c001f3ad:	56                   	push   esi
c001f3ae:	e8 f9 fd ff ff       	call   c001f1ac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f3b3:	83 c4 10             	add    esp,0x10
c001f3b6:	83 f8 01             	cmp    eax,0x1
c001f3b9:	0f 85 19 01 00 00    	jne    c001f4d8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f3bf:	50                   	push   eax
c001f3c0:	53                   	push   ebx
c001f3c1:	57                   	push   edi
c001f3c2:	56                   	push   esi
c001f3c3:	e8 76 fe ff ff       	call   c001f23e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f3c8:	83 c4 10             	add    esp,0x10
c001f3cb:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001f3d2:	74 2d                	je     c001f401 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f3d4:	83 ec 0c             	sub    esp,0xc
c001f3d7:	68 f1 5f 02 c0       	push   0xc0025ff1
c001f3dc:	e8 30 a9 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f3e1:	83 c4 10             	add    esp,0x10
c001f3e4:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001f3eb:	75 14                	jne    c001f401 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f3ed:	e4 60                	in     al,0x60
c001f3ef:	3c 1c                	cmp    al,0x1c
c001f3f1:	74 04                	je     c001f3f7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f3f3:	3c 5a                	cmp    al,0x5a
c001f3f5:	75 f6                	jne    c001f3ed <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f3f7:	e4 60                	in     al,0x60
c001f3f9:	3c 5a                	cmp    al,0x5a
c001f3fb:	74 fa                	je     c001f3f7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f3fd:	3c 1c                	cmp    al,0x1c
c001f3ff:	74 f6                	je     c001f3f7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f401:	83 ec 0c             	sub    esp,0xc
c001f404:	68 7c 01 00 00       	push   0x17c
c001f409:	e8 a9 a8 fe ff       	call   c0009cb7 <malloc>
c001f40e:	89 04 24             	mov    DWORD PTR [esp],eax
c001f411:	89 c7                	mov    edi,eax
c001f413:	e8 28 10 00 00       	call   c0020440 <SATA::SATA()>
c001f418:	83 c4 10             	add    esp,0x10
c001f41b:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001f422:	74 2d                	je     c001f451 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f424:	83 ec 0c             	sub    esp,0xc
c001f427:	68 06 60 02 c0       	push   0xc0026006
c001f42c:	e8 e0 a8 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f431:	83 c4 10             	add    esp,0x10
c001f434:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001f43b:	75 14                	jne    c001f451 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f43d:	e4 60                	in     al,0x60
c001f43f:	3c 5a                	cmp    al,0x5a
c001f441:	74 04                	je     c001f447 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f443:	3c 1c                	cmp    al,0x1c
c001f445:	75 f6                	jne    c001f43d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f447:	e4 60                	in     al,0x60
c001f449:	3c 5a                	cmp    al,0x5a
c001f44b:	74 fa                	je     c001f447 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f44d:	3c 1c                	cmp    al,0x1c
c001f44f:	74 f6                	je     c001f447 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f451:	50                   	push   eax
c001f452:	50                   	push   eax
c001f453:	57                   	push   edi
c001f454:	56                   	push   esi
c001f455:	e8 e8 ef fe ff       	call   c000e442 <Device::addChild(Device*)>
c001f45a:	83 c4 10             	add    esp,0x10
c001f45d:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001f464:	74 2d                	je     c001f493 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f466:	83 ec 0c             	sub    esp,0xc
c001f469:	68 1b 60 02 c0       	push   0xc002601b
c001f46e:	e8 9e a8 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f473:	83 c4 10             	add    esp,0x10
c001f476:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001f47d:	75 14                	jne    c001f493 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f47f:	e4 60                	in     al,0x60
c001f481:	3c 1c                	cmp    al,0x1c
c001f483:	74 04                	je     c001f489 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f485:	3c 5a                	cmp    al,0x5a
c001f487:	75 f6                	jne    c001f47f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f489:	e4 60                	in     al,0x60
c001f48b:	3c 5a                	cmp    al,0x5a
c001f48d:	74 fa                	je     c001f489 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f48f:	3c 1c                	cmp    al,0x1c
c001f491:	74 f6                	je     c001f489 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f493:	8b 07                	mov    eax,DWORD PTR [edi]
c001f495:	56                   	push   esi
c001f496:	6a 00                	push   0x0
c001f498:	53                   	push   ebx
c001f499:	57                   	push   edi
c001f49a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f49d:	83 c4 10             	add    esp,0x10
c001f4a0:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c001f4a7:	74 69                	je     c001f512 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4a9:	83 ec 0c             	sub    esp,0xc
c001f4ac:	68 30 60 02 c0       	push   0xc0026030
c001f4b1:	e8 5b a8 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c001f4b6:	83 c4 10             	add    esp,0x10
c001f4b9:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c001f4c0:	75 50                	jne    c001f512 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4c2:	e4 60                	in     al,0x60
c001f4c4:	3c 1c                	cmp    al,0x1c
c001f4c6:	74 04                	je     c001f4cc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f4c8:	3c 5a                	cmp    al,0x5a
c001f4ca:	75 f6                	jne    c001f4c2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001f4cc:	e4 60                	in     al,0x60
c001f4ce:	3c 5a                	cmp    al,0x5a
c001f4d0:	74 fa                	je     c001f4cc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f4d2:	3c 1c                	cmp    al,0x1c
c001f4d4:	74 f6                	je     c001f4cc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f4d6:	eb 3a                	jmp    c001f512 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4d8:	83 f8 04             	cmp    eax,0x4
c001f4db:	75 35                	jne    c001f512 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f4dd:	50                   	push   eax
c001f4de:	53                   	push   ebx
c001f4df:	57                   	push   edi
c001f4e0:	56                   	push   esi
c001f4e1:	e8 58 fd ff ff       	call   c001f23e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f4e6:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f4ed:	e8 c5 a7 fe ff       	call   c0009cb7 <malloc>
c001f4f2:	89 04 24             	mov    DWORD PTR [esp],eax
c001f4f5:	89 c7                	mov    edi,eax
c001f4f7:	e8 ba 17 00 00       	call   c0020cb6 <SATAPI::SATAPI()>
c001f4fc:	5a                   	pop    edx
c001f4fd:	59                   	pop    ecx
c001f4fe:	57                   	push   edi
c001f4ff:	56                   	push   esi
c001f500:	e8 3d ef fe ff       	call   c000e442 <Device::addChild(Device*)>
c001f505:	8b 07                	mov    eax,DWORD PTR [edi]
c001f507:	56                   	push   esi
c001f508:	6a 00                	push   0x0
c001f50a:	53                   	push   ebx
c001f50b:	57                   	push   edi
c001f50c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f50f:	83 c4 20             	add    esp,0x20
c001f512:	d1 ed                	shr    ebp,1
c001f514:	43                   	inc    ebx
c001f515:	83 fb 20             	cmp    ebx,0x20
c001f518:	0f 85 70 fe ff ff    	jne    c001f38e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001f51e:	83 c4 0c             	add    esp,0xc
c001f521:	5b                   	pop    ebx
c001f522:	5e                   	pop    esi
c001f523:	5f                   	pop    edi
c001f524:	5d                   	pop    ebp
c001f525:	c3                   	ret    

c001f526 <SATABus::open(int, int, void*)>:
c001f526:	53                   	push   ebx
c001f527:	83 ec 10             	sub    esp,0x10
c001f52a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f52e:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001f534:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f53a:	50                   	push   eax
c001f53b:	68 45 60 02 c0       	push   0xc0026045
c001f540:	e8 80 da fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f545:	58                   	pop    eax
c001f546:	5a                   	pop    edx
c001f547:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001f54d:	53                   	push   ebx
c001f54e:	e8 f1 fd ff ff       	call   c001f344 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f553:	31 c0                	xor    eax,eax
c001f555:	83 c4 18             	add    esp,0x18
c001f558:	5b                   	pop    ebx
c001f559:	c3                   	ret    

c001f55a <ATA::close(int, int, void*)>:
c001f55a:	83 ec 0c             	sub    esp,0xc
c001f55d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f561:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f567:	85 c0                	test   eax,eax
c001f569:	74 0c                	je     c001f577 <ATA::close(int, int, void*)+0x1d>
c001f56b:	83 ec 0c             	sub    esp,0xc
c001f56e:	8b 10                	mov    edx,DWORD PTR [eax]
c001f570:	50                   	push   eax
c001f571:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f574:	83 c4 10             	add    esp,0x10
c001f577:	31 c0                	xor    eax,eax
c001f579:	83 c4 0c             	add    esp,0xc
c001f57c:	c3                   	ret    
c001f57d:	90                   	nop

c001f57e <ATA::powerSaving(PowerSavingLevel)>:
c001f57e:	c3                   	ret    
c001f57f:	90                   	nop

c001f580 <ATA::ATA()>:
c001f580:	83 ec 0c             	sub    esp,0xc
c001f583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f587:	83 ec 04             	sub    esp,0x4
c001f58a:	68 00 02 00 00       	push   0x200
c001f58f:	68 e3 61 02 c0       	push   0xc00261e3
c001f594:	50                   	push   eax
c001f595:	e8 e0 f2 fe ff       	call   c000e87a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f59a:	83 c4 10             	add    esp,0x10
c001f59d:	ba d8 60 02 c0       	mov    edx,0xc00260d8
c001f5a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5a6:	89 10                	mov    DWORD PTR [eax],edx
c001f5a8:	90                   	nop
c001f5a9:	83 c4 0c             	add    esp,0xc
c001f5ac:	c3                   	ret    
c001f5ad:	90                   	nop

c001f5ae <ATA::flush(bool)>:
c001f5ae:	53                   	push   ebx
c001f5af:	83 ec 08             	sub    esp,0x8
c001f5b2:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f5b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f5bb:	19 c0                	sbb    eax,eax
c001f5bd:	83 e0 fd             	and    eax,0xfffffffd
c001f5c0:	05 ea 00 00 00       	add    eax,0xea
c001f5c5:	50                   	push   eax
c001f5c6:	6a 07                	push   0x7
c001f5c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5cf:	50                   	push   eax
c001f5d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5d6:	e8 0b f0 ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5db:	83 c4 0c             	add    esp,0xc
c001f5de:	6a 00                	push   0x0
c001f5e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5e7:	50                   	push   eax
c001f5e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5ee:	e8 a7 fa ff ff       	call   c001f09a <IDE::polling(unsigned char, unsigned int)>
c001f5f3:	83 c4 18             	add    esp,0x18
c001f5f6:	5b                   	pop    ebx
c001f5f7:	c3                   	ret    

c001f5f8 <ATA::readyForCommand()>:
c001f5f8:	56                   	push   esi
c001f5f9:	53                   	push   ebx
c001f5fa:	53                   	push   ebx
c001f5fb:	31 db                	xor    ebx,ebx
c001f5fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f601:	51                   	push   ecx
c001f602:	6a 0c                	push   0xc
c001f604:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f60b:	50                   	push   eax
c001f60c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f612:	e8 8f f0 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001f617:	83 c4 10             	add    esp,0x10
c001f61a:	a8 88                	test   al,0x88
c001f61c:	74 1f                	je     c001f63d <ATA::readyForCommand()+0x45>
c001f61e:	43                   	inc    ebx
c001f61f:	83 fb 63             	cmp    ebx,0x63
c001f622:	7e dd                	jle    c001f601 <ATA::readyForCommand()+0x9>
c001f624:	83 ec 0c             	sub    esp,0xc
c001f627:	6a 0a                	push   0xa
c001f629:	e8 36 81 ff ff       	call   c0017764 <milliTenthSleep(unsigned int)>
c001f62e:	83 c4 10             	add    esp,0x10
c001f631:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f637:	75 c8                	jne    c001f601 <ATA::readyForCommand()+0x9>
c001f639:	31 c0                	xor    eax,eax
c001f63b:	eb 02                	jmp    c001f63f <ATA::readyForCommand()+0x47>
c001f63d:	b0 01                	mov    al,0x1
c001f63f:	5a                   	pop    edx
c001f640:	5b                   	pop    ebx
c001f641:	5e                   	pop    esi
c001f642:	c3                   	ret    
c001f643:	90                   	nop

c001f644 <ATA::access(unsigned long long, int, void*, bool)>:
c001f644:	55                   	push   ebp
c001f645:	57                   	push   edi
c001f646:	56                   	push   esi
c001f647:	53                   	push   ebx
c001f648:	83 ec 38             	sub    esp,0x38
c001f64b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f64f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001f653:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f657:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f65b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f65f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f663:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001f667:	68 84 60 02 c0       	push   0xc0026084
c001f66c:	e8 54 d9 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f671:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f677:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f67b:	83 c4 10             	add    esp,0x10
c001f67e:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f684:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f688:	c1 e0 06             	shl    eax,0x6
c001f68b:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f693:	74 5d                	je     c001f6f2 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f695:	89 fa                	mov    edx,edi
c001f697:	89 f0                	mov    eax,esi
c001f699:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f69d:	c1 ea 1c             	shr    edx,0x1c
c001f6a0:	89 d1                	mov    ecx,edx
c001f6a2:	09 c1                	or     ecx,eax
c001f6a4:	74 25                	je     c001f6cb <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f6a6:	31 ed                	xor    ebp,ebp
c001f6a8:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f6af:	89 fa                	mov    edx,edi
c001f6b1:	89 f0                	mov    eax,esi
c001f6b3:	0f ad d0             	shrd   eax,edx,cl
c001f6b6:	d3 ea                	shr    edx,cl
c001f6b8:	f6 c1 20             	test   cl,0x20
c001f6bb:	74 02                	je     c001f6bf <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f6bd:	89 d0                	mov    eax,edx
c001f6bf:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f6c3:	45                   	inc    ebp
c001f6c4:	83 fd 06             	cmp    ebp,0x6
c001f6c7:	75 df                	jne    c001f6a8 <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f6c9:	eb 76                	jmp    c001f741 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f6cb:	89 f0                	mov    eax,esi
c001f6cd:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f6d2:	89 fa                	mov    edx,edi
c001f6d4:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f6db:	0f ac d0 10          	shrd   eax,edx,0x10
c001f6df:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f6e4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f6e8:	c1 ee 18             	shr    esi,0x18
c001f6eb:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f6f0:	eb 56                	jmp    c001f748 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f6f2:	6a 00                	push   0x0
c001f6f4:	6a 3f                	push   0x3f
c001f6f6:	57                   	push   edi
c001f6f7:	56                   	push   esi
c001f6f8:	e8 d3 27 00 00       	call   c0021ed0 <__umoddi3>
c001f6fd:	83 c4 10             	add    esp,0x10
c001f700:	40                   	inc    eax
c001f701:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f705:	6a 00                	push   0x0
c001f707:	68 f0 03 00 00       	push   0x3f0
c001f70c:	57                   	push   edi
c001f70d:	56                   	push   esi
c001f70e:	e8 bd 26 00 00       	call   c0021dd0 <__udivdi3>
c001f713:	83 c4 10             	add    esp,0x10
c001f716:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f71b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f722:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f727:	6a 00                	push   0x0
c001f729:	6a 3f                	push   0x3f
c001f72b:	57                   	push   edi
c001f72c:	56                   	push   esi
c001f72d:	e8 9e 26 00 00       	call   c0021dd0 <__udivdi3>
c001f732:	83 c4 10             	add    esp,0x10
c001f735:	89 c6                	mov    esi,eax
c001f737:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f73c:	83 e6 0f             	and    esi,0xf
c001f73f:	eb 07                	jmp    c001f748 <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f741:	31 f6                	xor    esi,esi
c001f743:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f748:	bf 01 00 00 00       	mov    edi,0x1
c001f74d:	50                   	push   eax
c001f74e:	6a 00                	push   0x0
c001f750:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f757:	50                   	push   eax
c001f758:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f75c:	e8 8d f0 ff ff       	call   c001e7ee <IDE::enableIRQs(unsigned char, bool)>
c001f761:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f764:	e8 8f fe ff ff       	call   c001f5f8 <ATA::readyForCommand()>
c001f769:	83 c4 10             	add    esp,0x10
c001f76c:	84 c0                	test   al,al
c001f76e:	0f 84 bc 02 00 00    	je     c001fa30 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f774:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f77a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f780:	c1 e0 04             	shl    eax,0x4
c001f783:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f78a:	09 c6                	or     esi,eax
c001f78c:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f791:	75 05                	jne    c001f798 <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f793:	83 ce a0             	or     esi,0xffffffa0
c001f796:	eb 03                	jmp    c001f79b <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f798:	83 ce e0             	or     esi,0xffffffe0
c001f79b:	89 f0                	mov    eax,esi
c001f79d:	0f b6 f0             	movzx  esi,al
c001f7a0:	56                   	push   esi
c001f7a1:	6a 06                	push   0x6
c001f7a3:	51                   	push   ecx
c001f7a4:	52                   	push   edx
c001f7a5:	e8 3c ee ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7aa:	83 c4 10             	add    esp,0x10
c001f7ad:	6a 00                	push   0x0
c001f7af:	6a 01                	push   0x1
c001f7b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7b8:	50                   	push   eax
c001f7b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7bf:	e8 22 ee ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7c4:	83 c4 10             	add    esp,0x10
c001f7c7:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f7cc:	75 6e                	jne    c001f83c <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f7ce:	6a 00                	push   0x0
c001f7d0:	6a 08                	push   0x8
c001f7d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7d9:	50                   	push   eax
c001f7da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7e0:	e8 01 ee ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f7e5:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f7ea:	50                   	push   eax
c001f7eb:	6a 09                	push   0x9
c001f7ed:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7f4:	50                   	push   eax
c001f7f5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7fb:	e8 e6 ed ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f800:	83 c4 20             	add    esp,0x20
c001f803:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f808:	50                   	push   eax
c001f809:	6a 0a                	push   0xa
c001f80b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f812:	50                   	push   eax
c001f813:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f819:	e8 c8 ed ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f81e:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f823:	50                   	push   eax
c001f824:	6a 0b                	push   0xb
c001f826:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f82d:	50                   	push   eax
c001f82e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f834:	e8 ad ed ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f839:	83 c4 20             	add    esp,0x20
c001f83c:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f841:	50                   	push   eax
c001f842:	6a 02                	push   0x2
c001f844:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f84b:	50                   	push   eax
c001f84c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f852:	e8 8f ed ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f857:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f85c:	50                   	push   eax
c001f85d:	6a 03                	push   0x3
c001f85f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f866:	50                   	push   eax
c001f867:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f86d:	e8 74 ed ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f872:	83 c4 20             	add    esp,0x20
c001f875:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f87a:	50                   	push   eax
c001f87b:	6a 04                	push   0x4
c001f87d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f884:	50                   	push   eax
c001f885:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f88b:	e8 56 ed ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f890:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f895:	50                   	push   eax
c001f896:	6a 05                	push   0x5
c001f898:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f89f:	50                   	push   eax
c001f8a0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8a6:	e8 3b ed ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8ab:	83 c4 20             	add    esp,0x20
c001f8ae:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f8b3:	0f 94 c0             	sete   al
c001f8b6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f8bb:	74 09                	je     c001f8c6 <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f8bd:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001f8c4:	eb 07                	jmp    c001f8cd <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001f8c6:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001f8cd:	0f b6 c0             	movzx  eax,al
c001f8d0:	50                   	push   eax
c001f8d1:	6a 07                	push   0x7
c001f8d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f8da:	50                   	push   eax
c001f8db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f8e1:	e8 00 ed ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f8e6:	c7 04 24 91 60 02 c0 	mov    DWORD PTR [esp],0xc0026091
c001f8ed:	e8 d3 d6 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f8f2:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001f8f6:	83 c4 10             	add    esp,0x10
c001f8f9:	85 f6                	test   esi,esi
c001f8fb:	0f 84 f7 00 00 00    	je     c001f9f8 <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001f901:	83 ec 0c             	sub    esp,0xc
c001f904:	68 94 60 02 c0       	push   0xc0026094
c001f909:	e8 b7 d6 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f90e:	83 c4 0c             	add    esp,0xc
c001f911:	6a 01                	push   0x1
c001f913:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f91a:	50                   	push   eax
c001f91b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f921:	e8 74 f7 ff ff       	call   c001f09a <IDE::polling(unsigned char, unsigned int)>
c001f926:	c7 04 24 97 60 02 c0 	mov    DWORD PTR [esp],0xc0026097
c001f92d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f931:	e8 8f d6 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f936:	83 c4 10             	add    esp,0x10
c001f939:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001f93d:	84 c0                	test   al,al
c001f93f:	74 2b                	je     c001f96c <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001f941:	0f b6 f8             	movzx  edi,al
c001f944:	57                   	push   edi
c001f945:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f94c:	50                   	push   eax
c001f94d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f954:	50                   	push   eax
c001f955:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f95b:	e8 8a f6 ff ff       	call   c001efea <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f960:	c7 04 24 9a 60 02 c0 	mov    DWORD PTR [esp],0xc002609a
c001f967:	e9 bc 00 00 00       	jmp    c001fa28 <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f96c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f971:	74 50                	je     c001f9c3 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001f973:	83 ec 0c             	sub    esp,0xc
c001f976:	31 ed                	xor    ebp,ebp
c001f978:	68 a5 60 02 c0       	push   0xc00260a5
c001f97d:	e8 43 d6 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f982:	83 c4 10             	add    esp,0x10
c001f985:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f989:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001f98d:	50                   	push   eax
c001f98e:	50                   	push   eax
c001f98f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f996:	50                   	push   eax
c001f997:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f99d:	e8 32 ec ff ff       	call   c001e5d4 <IDE::getBase(unsigned char)>
c001f9a2:	89 c2                	mov    edx,eax
c001f9a4:	89 f8                	mov    eax,edi
c001f9a6:	66 ef                	out    dx,ax
c001f9a8:	45                   	inc    ebp
c001f9a9:	83 c4 10             	add    esp,0x10
c001f9ac:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001f9b2:	75 d1                	jne    c001f985 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001f9b4:	83 ec 0c             	sub    esp,0xc
c001f9b7:	68 a8 60 02 c0       	push   0xc00260a8
c001f9bc:	e8 04 d6 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001f9c1:	eb 24                	jmp    c001f9e7 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001f9c3:	51                   	push   ecx
c001f9c4:	51                   	push   ecx
c001f9c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9cc:	50                   	push   eax
c001f9cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9d3:	e8 fc eb ff ff       	call   c001e5d4 <IDE::getBase(unsigned char)>
c001f9d8:	b9 00 01 00 00       	mov    ecx,0x100
c001f9dd:	89 c2                	mov    edx,eax
c001f9df:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f9e3:	fc                   	cld    
c001f9e4:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f9e7:	83 c4 10             	add    esp,0x10
c001f9ea:	4e                   	dec    esi
c001f9eb:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f9f3:	e9 01 ff ff ff       	jmp    c001f8f9 <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001f9f8:	31 ff                	xor    edi,edi
c001f9fa:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f9ff:	74 2f                	je     c001fa30 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001fa01:	83 ec 0c             	sub    esp,0xc
c001fa04:	68 ab 60 02 c0       	push   0xc00260ab
c001fa09:	e8 b7 d5 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fa0e:	58                   	pop    eax
c001fa0f:	31 c0                	xor    eax,eax
c001fa11:	5a                   	pop    edx
c001fa12:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001fa17:	0f 94 c0             	sete   al
c001fa1a:	50                   	push   eax
c001fa1b:	53                   	push   ebx
c001fa1c:	e8 8d fb ff ff       	call   c001f5ae <ATA::flush(bool)>
c001fa21:	c7 04 24 ae 60 02 c0 	mov    DWORD PTR [esp],0xc00260ae
c001fa28:	e8 98 d5 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fa2d:	83 c4 10             	add    esp,0x10
c001fa30:	83 c4 2c             	add    esp,0x2c
c001fa33:	89 f8                	mov    eax,edi
c001fa35:	5b                   	pop    ebx
c001fa36:	5e                   	pop    esi
c001fa37:	5f                   	pop    edi
c001fa38:	5d                   	pop    ebp
c001fa39:	c3                   	ret    

c001fa3a <ATA::read(unsigned long long, int, void*)>:
c001fa3a:	57                   	push   edi
c001fa3b:	b8 04 00 00 00       	mov    eax,0x4
c001fa40:	56                   	push   esi
c001fa41:	53                   	push   ebx
c001fa42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fa46:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001fa4a:	8d 7a ff             	lea    edi,[edx-0x1]
c001fa4d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fa51:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001fa55:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001fa5b:	77 25                	ja     c001fa82 <ATA::read(unsigned long long, int, void*)+0x48>
c001fa5d:	b8 06 00 00 00       	mov    eax,0x6
c001fa62:	85 f6                	test   esi,esi
c001fa64:	74 1c                	je     c001fa82 <ATA::read(unsigned long long, int, void*)+0x48>
c001fa66:	50                   	push   eax
c001fa67:	50                   	push   eax
c001fa68:	6a 00                	push   0x0
c001fa6a:	56                   	push   esi
c001fa6b:	52                   	push   edx
c001fa6c:	53                   	push   ebx
c001fa6d:	51                   	push   ecx
c001fa6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fa72:	e8 cd fb ff ff       	call   c001f644 <ATA::access(unsigned long long, int, void*, bool)>
c001fa77:	83 c4 20             	add    esp,0x20
c001fa7a:	85 c0                	test   eax,eax
c001fa7c:	0f 95 c0             	setne  al
c001fa7f:	0f b6 c0             	movzx  eax,al
c001fa82:	5b                   	pop    ebx
c001fa83:	5e                   	pop    esi
c001fa84:	5f                   	pop    edi
c001fa85:	c3                   	ret    

c001fa86 <ATA::write(unsigned long long, int, void*)>:
c001fa86:	55                   	push   ebp
c001fa87:	57                   	push   edi
c001fa88:	56                   	push   esi
c001fa89:	53                   	push   ebx
c001fa8a:	83 ec 18             	sub    esp,0x18
c001fa8d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001fa91:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001fa95:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001fa99:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001fa9d:	68 b1 60 02 c0       	push   0xc00260b1
c001faa2:	e8 1e d5 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001faa7:	8d 53 ff             	lea    edx,[ebx-0x1]
c001faaa:	83 c4 10             	add    esp,0x10
c001faad:	b8 04 00 00 00       	mov    eax,0x4
c001fab2:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001fab8:	77 25                	ja     c001fadf <ATA::write(unsigned long long, int, void*)+0x59>
c001faba:	b8 06 00 00 00       	mov    eax,0x6
c001fabf:	85 f6                	test   esi,esi
c001fac1:	74 1c                	je     c001fadf <ATA::write(unsigned long long, int, void*)+0x59>
c001fac3:	50                   	push   eax
c001fac4:	50                   	push   eax
c001fac5:	6a 01                	push   0x1
c001fac7:	56                   	push   esi
c001fac8:	53                   	push   ebx
c001fac9:	55                   	push   ebp
c001faca:	57                   	push   edi
c001facb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001facf:	e8 70 fb ff ff       	call   c001f644 <ATA::access(unsigned long long, int, void*, bool)>
c001fad4:	83 c4 20             	add    esp,0x20
c001fad7:	85 c0                	test   eax,eax
c001fad9:	0f 95 c0             	setne  al
c001fadc:	0f b6 c0             	movzx  eax,al
c001fadf:	83 c4 0c             	add    esp,0xc
c001fae2:	5b                   	pop    ebx
c001fae3:	5e                   	pop    esi
c001fae4:	5f                   	pop    edi
c001fae5:	5d                   	pop    ebp
c001fae6:	c3                   	ret    
c001fae7:	90                   	nop

c001fae8 <ATA::detectCHS()>:
c001fae8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001faec:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001faf2:	c1 e0 06             	shl    eax,0x6
c001faf5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001fafb:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001fb05:	c7 44 24 04 bd 60 02 c0 	mov    DWORD PTR [esp+0x4],0xc00260bd
c001fb0d:	e9 f5 42 ff ff       	jmp    c0013e07 <Krnl::panic(char const*)>

c001fb12 <ATA::open(int, int, void*)>:
c001fb12:	53                   	push   ebx
c001fb13:	83 ec 08             	sub    esp,0x8
c001fb16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fb1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fb1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fb22:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fb28:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fb2e:	c1 e0 06             	shl    eax,0x6
c001fb31:	01 d0                	add    eax,edx
c001fb33:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001fb3a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001fb40:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001fb47:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fb51:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001fb57:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fb5e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001fb65:	75 0c                	jne    c001fb73 <ATA::open(int, int, void*)+0x61>
c001fb67:	83 ec 0c             	sub    esp,0xc
c001fb6a:	53                   	push   ebx
c001fb6b:	e8 78 ff ff ff       	call   c001fae8 <ATA::detectCHS()>
c001fb70:	83 c4 10             	add    esp,0x10
c001fb73:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fb79:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001fb7f:	c1 e0 06             	shl    eax,0x6
c001fb82:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001fb89:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fb93:	d1 e8                	shr    eax,1
c001fb95:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001fb9b:	6a 04                	push   0x4
c001fb9d:	6a 0c                	push   0xc
c001fb9f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fba6:	50                   	push   eax
c001fba7:	52                   	push   edx
c001fba8:	e8 39 ea ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbad:	90                   	nop
c001fbae:	90                   	nop
c001fbaf:	6a 00                	push   0x0
c001fbb1:	6a 0c                	push   0xc
c001fbb3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fbba:	50                   	push   eax
c001fbbb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fbc1:	e8 20 ea ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbc6:	83 c4 14             	add    esp,0x14
c001fbc9:	53                   	push   ebx
c001fbca:	e8 13 ed fe ff       	call   c000e8e2 <PhysicalDisk::startCache()>
c001fbcf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbd2:	e8 9f fd fe ff       	call   c000f976 <createPartitionsForDisk(PhysicalDisk*)>
c001fbd7:	31 c0                	xor    eax,eax
c001fbd9:	83 c4 18             	add    esp,0x18
c001fbdc:	5b                   	pop    ebx
c001fbdd:	c3                   	ret    

c001fbde <ATAPI::write(unsigned long long, int, void*)>:
c001fbde:	b8 03 00 00 00       	mov    eax,0x3
c001fbe3:	c3                   	ret    

c001fbe4 <ATAPI::close(int, int, void*)>:
c001fbe4:	83 ec 0c             	sub    esp,0xc
c001fbe7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbeb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fbf1:	85 c0                	test   eax,eax
c001fbf3:	74 0c                	je     c001fc01 <ATAPI::close(int, int, void*)+0x1d>
c001fbf5:	83 ec 0c             	sub    esp,0xc
c001fbf8:	8b 10                	mov    edx,DWORD PTR [eax]
c001fbfa:	50                   	push   eax
c001fbfb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fbfe:	83 c4 10             	add    esp,0x10
c001fc01:	31 c0                	xor    eax,eax
c001fc03:	83 c4 0c             	add    esp,0xc
c001fc06:	c3                   	ret    
c001fc07:	90                   	nop

c001fc08 <ATAPI::ATAPI()>:
c001fc08:	83 ec 0c             	sub    esp,0xc
c001fc0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0f:	83 ec 04             	sub    esp,0x4
c001fc12:	68 00 08 00 00       	push   0x800
c001fc17:	68 bd 63 02 c0       	push   0xc00263bd
c001fc1c:	50                   	push   eax
c001fc1d:	e8 58 ec fe ff       	call   c000e87a <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fc22:	83 c4 10             	add    esp,0x10
c001fc25:	ba 50 61 02 c0       	mov    edx,0xc0026150
c001fc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2e:	89 10                	mov    DWORD PTR [eax],edx
c001fc30:	90                   	nop
c001fc31:	83 c4 0c             	add    esp,0xc
c001fc34:	c3                   	ret    
c001fc35:	90                   	nop

c001fc36 <ATAPI::readyForCommand()>:
c001fc36:	56                   	push   esi
c001fc37:	53                   	push   ebx
c001fc38:	53                   	push   ebx
c001fc39:	31 db                	xor    ebx,ebx
c001fc3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fc3f:	51                   	push   ecx
c001fc40:	6a 0c                	push   0xc
c001fc42:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fc49:	50                   	push   eax
c001fc4a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fc50:	e8 51 ea ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001fc55:	83 c4 10             	add    esp,0x10
c001fc58:	a8 88                	test   al,0x88
c001fc5a:	74 25                	je     c001fc81 <ATAPI::readyForCommand()+0x4b>
c001fc5c:	43                   	inc    ebx
c001fc5d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fc63:	7e da                	jle    c001fc3f <ATAPI::readyForCommand()+0x9>
c001fc65:	83 ec 0c             	sub    esp,0xc
c001fc68:	68 5e 01 00 00       	push   0x15e
c001fc6d:	e8 f2 7a ff ff       	call   c0017764 <milliTenthSleep(unsigned int)>
c001fc72:	83 c4 10             	add    esp,0x10
c001fc75:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fc7b:	75 c2                	jne    c001fc3f <ATAPI::readyForCommand()+0x9>
c001fc7d:	31 c0                	xor    eax,eax
c001fc7f:	eb 02                	jmp    c001fc83 <ATAPI::readyForCommand()+0x4d>
c001fc81:	b0 01                	mov    al,0x1
c001fc83:	5a                   	pop    edx
c001fc84:	5b                   	pop    ebx
c001fc85:	5e                   	pop    esi
c001fc86:	c3                   	ret    
c001fc87:	90                   	nop

c001fc88 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fc88:	55                   	push   ebp
c001fc89:	57                   	push   edi
c001fc8a:	56                   	push   esi
c001fc8b:	53                   	push   ebx
c001fc8c:	83 ec 20             	sub    esp,0x20
c001fc8f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fc93:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001fc97:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fc9b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fc9f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fca3:	6a 01                	push   0x1
c001fca5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcac:	50                   	push   eax
c001fcad:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcb3:	e8 36 eb ff ff       	call   c001e7ee <IDE::enableIRQs(unsigned char, bool)>
c001fcb8:	5e                   	pop    esi
c001fcb9:	58                   	pop    eax
c001fcba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcc1:	50                   	push   eax
c001fcc2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fcc8:	e8 f3 e8 ff ff       	call   c001e5c0 <IDE::prepareInterrupt(unsigned char)>
c001fccd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fcd0:	e8 61 ff ff ff       	call   c001fc36 <ATAPI::readyForCommand()>
c001fcd5:	83 c4 10             	add    esp,0x10
c001fcd8:	84 c0                	test   al,al
c001fcda:	75 0a                	jne    c001fce6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fcdc:	bb 01 00 00 00       	mov    ebx,0x1
c001fce1:	e9 57 02 00 00       	jmp    c001ff3d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fce6:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001fcec:	c1 e0 04             	shl    eax,0x4
c001fcef:	0f b6 c0             	movzx  eax,al
c001fcf2:	50                   	push   eax
c001fcf3:	6a 06                	push   0x6
c001fcf5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fcfc:	50                   	push   eax
c001fcfd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd03:	e8 de e8 ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd08:	6a 00                	push   0x0
c001fd0a:	6a 01                	push   0x1
c001fd0c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd13:	50                   	push   eax
c001fd14:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd1a:	e8 c7 e8 ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd1f:	83 c4 20             	add    esp,0x20
c001fd22:	0f b6 c3             	movzx  eax,bl
c001fd25:	0f b6 df             	movzx  ebx,bh
c001fd28:	50                   	push   eax
c001fd29:	6a 04                	push   0x4
c001fd2b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd32:	50                   	push   eax
c001fd33:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd39:	e8 a8 e8 ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd3e:	53                   	push   ebx
c001fd3f:	6a 05                	push   0x5
c001fd41:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd48:	50                   	push   eax
c001fd49:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd4f:	e8 92 e8 ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd54:	83 c4 20             	add    esp,0x20
c001fd57:	68 a0 00 00 00       	push   0xa0
c001fd5c:	6a 07                	push   0x7
c001fd5e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd65:	50                   	push   eax
c001fd66:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd6c:	e8 75 e8 ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fd71:	83 c4 0c             	add    esp,0xc
c001fd74:	6a 01                	push   0x1
c001fd76:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd7d:	50                   	push   eax
c001fd7e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd84:	e8 11 f3 ff ff       	call   c001f09a <IDE::polling(unsigned char, unsigned int)>
c001fd89:	83 c4 10             	add    esp,0x10
c001fd8c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001fd92:	84 c0                	test   al,al
c001fd94:	74 23                	je     c001fdb9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fd96:	0f b6 d8             	movzx  ebx,al
c001fd99:	0f b6 d2             	movzx  edx,dl
c001fd9c:	53                   	push   ebx
c001fd9d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001fda4:	50                   	push   eax
c001fda5:	52                   	push   edx
c001fda6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdac:	e8 39 f2 ff ff       	call   c001efea <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fdb1:	83 c4 10             	add    esp,0x10
c001fdb4:	e9 84 01 00 00       	jmp    c001ff3d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fdb9:	0f b6 d2             	movzx  edx,dl
c001fdbc:	53                   	push   ebx
c001fdbd:	53                   	push   ebx
c001fdbe:	52                   	push   edx
c001fdbf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fdc5:	e8 0a e8 ff ff       	call   c001e5d4 <IDE::getBase(unsigned char)>
c001fdca:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fdce:	b9 06 00 00 00       	mov    ecx,0x6
c001fdd3:	89 c2                	mov    edx,eax
c001fdd5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fdd8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fddc:	83 c4 10             	add    esp,0x10
c001fddf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fde5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fdec:	85 db                	test   ebx,ebx
c001fdee:	0f 84 ec 00 00 00    	je     c001fee0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001fdf4:	51                   	push   ecx
c001fdf5:	51                   	push   ecx
c001fdf6:	52                   	push   edx
c001fdf7:	50                   	push   eax
c001fdf8:	e8 57 e9 ff ff       	call   c001e754 <IDE::waitInterrupt(unsigned char)>
c001fdfd:	83 c4 10             	add    esp,0x10
c001fe00:	84 c0                	test   al,al
c001fe02:	0f 84 d4 fe ff ff    	je     c001fcdc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fe08:	56                   	push   esi
c001fe09:	56                   	push   esi
c001fe0a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe11:	50                   	push   eax
c001fe12:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe18:	e8 a3 e7 ff ff       	call   c001e5c0 <IDE::prepareInterrupt(unsigned char)>
c001fe1d:	83 c4 0c             	add    esp,0xc
c001fe20:	6a 04                	push   0x4
c001fe22:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe29:	50                   	push   eax
c001fe2a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe30:	e8 71 e8 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001fe35:	83 c4 0c             	add    esp,0xc
c001fe38:	89 c6                	mov    esi,eax
c001fe3a:	6a 05                	push   0x5
c001fe3c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fe43:	50                   	push   eax
c001fe44:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fe4a:	e8 57 e8 ff ff       	call   c001e6a6 <IDE::read(unsigned char, unsigned char)>
c001fe4f:	89 f1                	mov    ecx,esi
c001fe51:	0f b6 c0             	movzx  eax,al
c001fe54:	0f b6 f1             	movzx  esi,cl
c001fe57:	c1 e0 08             	shl    eax,0x8
c001fe5a:	09 c6                	or     esi,eax
c001fe5c:	d1 fe                	sar    esi,1
c001fe5e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001fe62:	83 c4 10             	add    esp,0x10
c001fe65:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001fe6a:	74 41                	je     c001fead <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001fe6c:	31 c9                	xor    ecx,ecx
c001fe6e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fe74:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fe7b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001fe7f:	75 0a                	jne    c001fe8b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001fe81:	01 c9                	add    ecx,ecx
c001fe83:	01 cd                	add    ebp,ecx
c001fe85:	4b                   	dec    ebx
c001fe86:	e9 54 ff ff ff       	jmp    c001fddf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001fe8b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001fe90:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fe94:	51                   	push   ecx
c001fe95:	51                   	push   ecx
c001fe96:	52                   	push   edx
c001fe97:	50                   	push   eax
c001fe98:	e8 37 e7 ff ff       	call   c001e5d4 <IDE::getBase(unsigned char)>
c001fe9d:	89 c2                	mov    edx,eax
c001fe9f:	89 f0                	mov    eax,esi
c001fea1:	66 ef                	out    dx,ax
c001fea3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001fea7:	83 c4 10             	add    esp,0x10
c001feaa:	41                   	inc    ecx
c001feab:	eb c1                	jmp    c001fe6e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001fead:	31 f6                	xor    esi,esi
c001feaf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001feb5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001febc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001fec0:	75 06                	jne    c001fec8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001fec2:	01 f6                	add    esi,esi
c001fec4:	01 f5                	add    ebp,esi
c001fec6:	eb bd                	jmp    c001fe85 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001fec8:	51                   	push   ecx
c001fec9:	51                   	push   ecx
c001feca:	52                   	push   edx
c001fecb:	50                   	push   eax
c001fecc:	e8 03 e7 ff ff       	call   c001e5d4 <IDE::getBase(unsigned char)>
c001fed1:	89 c2                	mov    edx,eax
c001fed3:	66 ed                	in     ax,dx
c001fed5:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001feda:	83 c4 10             	add    esp,0x10
c001fedd:	46                   	inc    esi
c001fede:	eb cf                	jmp    c001feaf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001fee0:	51                   	push   ecx
c001fee1:	51                   	push   ecx
c001fee2:	52                   	push   edx
c001fee3:	50                   	push   eax
c001fee4:	e8 6b e8 ff ff       	call   c001e754 <IDE::waitInterrupt(unsigned char)>
c001fee9:	83 c4 10             	add    esp,0x10
c001feec:	84 c0                	test   al,al
c001feee:	0f 84 e8 fd ff ff    	je     c001fcdc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fef4:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fef9:	52                   	push   edx
c001fefa:	52                   	push   edx
c001fefb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff02:	50                   	push   eax
c001ff03:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff09:	e8 b2 e6 ff ff       	call   c001e5c0 <IDE::prepareInterrupt(unsigned char)>
c001ff0e:	83 c4 10             	add    esp,0x10
c001ff11:	50                   	push   eax
c001ff12:	50                   	push   eax
c001ff13:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ff1a:	50                   	push   eax
c001ff1b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ff21:	e8 ae e6 ff ff       	call   c001e5d4 <IDE::getBase(unsigned char)>
c001ff26:	8d 50 07             	lea    edx,[eax+0x7]
c001ff29:	ec                   	in     al,dx
c001ff2a:	83 c4 10             	add    esp,0x10
c001ff2d:	a8 88                	test   al,0x88
c001ff2f:	74 0a                	je     c001ff3b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ff31:	4b                   	dec    ebx
c001ff32:	75 dd                	jne    c001ff11 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ff34:	bb 02 00 00 00       	mov    ebx,0x2
c001ff39:	eb 02                	jmp    c001ff3d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ff3b:	31 db                	xor    ebx,ebx
c001ff3d:	83 c4 1c             	add    esp,0x1c
c001ff40:	89 d8                	mov    eax,ebx
c001ff42:	5b                   	pop    ebx
c001ff43:	5e                   	pop    esi
c001ff44:	5f                   	pop    edi
c001ff45:	5d                   	pop    ebp
c001ff46:	c3                   	ret    
c001ff47:	90                   	nop

c001ff48 <ATAPI::diskRemoved()>:
c001ff48:	53                   	push   ebx
c001ff49:	83 ec 14             	sub    esp,0x14
c001ff4c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ff50:	68 08 61 02 c0       	push   0xc0026108
c001ff55:	e8 6b d0 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001ff5a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ff61:	c7 04 24 1e 61 02 c0 	mov    DWORD PTR [esp],0xc002611e
c001ff68:	e8 58 d0 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001ff6d:	58                   	pop    eax
c001ff6e:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001ff74:	e8 7b f7 fe ff       	call   c000f6f4 <LogicalDisk::unmount()>
c001ff79:	c7 04 24 2d 61 02 c0 	mov    DWORD PTR [esp],0xc002612d
c001ff80:	e8 40 d0 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001ff85:	5a                   	pop    edx
c001ff86:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ff8c:	e8 ab 00 ff ff       	call   c001003c <VCache::writeWriteBuffer()>
c001ff91:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ff97:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ff9b:	83 c4 18             	add    esp,0x18
c001ff9e:	5b                   	pop    ebx
c001ff9f:	e9 88 00 ff ff       	jmp    c001002c <VCache::invalidateReadBuffer()>

c001ffa4 <ATAPI::eject()>:
c001ffa4:	57                   	push   edi
c001ffa5:	b9 03 00 00 00       	mov    ecx,0x3
c001ffaa:	53                   	push   ebx
c001ffab:	83 ec 14             	sub    esp,0x14
c001ffae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ffb2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ffb6:	fc                   	cld    
c001ffb7:	31 c0                	xor    eax,eax
c001ffb9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ffbb:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ffc0:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ffc5:	50                   	push   eax
c001ffc6:	50                   	push   eax
c001ffc7:	6a 00                	push   0x0
c001ffc9:	6a 00                	push   0x0
c001ffcb:	6a 00                	push   0x0
c001ffcd:	6a 02                	push   0x2
c001ffcf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ffd3:	50                   	push   eax
c001ffd4:	53                   	push   ebx
c001ffd5:	e8 ae fc ff ff       	call   c001fc88 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ffda:	83 c4 14             	add    esp,0x14
c001ffdd:	53                   	push   ebx
c001ffde:	e8 65 ff ff ff       	call   c001ff48 <ATAPI::diskRemoved()>
c001ffe3:	83 c4 24             	add    esp,0x24
c001ffe6:	31 c0                	xor    eax,eax
c001ffe8:	5b                   	pop    ebx
c001ffe9:	5f                   	pop    edi
c001ffea:	c3                   	ret    
c001ffeb:	90                   	nop

c001ffec <ATAPI::diskInserted()>:
c001ffec:	83 ec 18             	sub    esp,0x18
c001ffef:	68 c9 63 02 c0       	push   0xc00263c9
c001fff4:	e8 cc cf fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c001fff9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fffd:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c0020004:	83 c4 1c             	add    esp,0x1c
c0020007:	c3                   	ret    

c0020008 <ATAPI::detectMedia()>:
c0020008:	56                   	push   esi
c0020009:	53                   	push   ebx
c002000a:	83 ec 28             	sub    esp,0x28
c002000d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020011:	6a 0c                	push   0xc
c0020013:	6a 00                	push   0x0
c0020015:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020019:	56                   	push   esi
c002001a:	e8 5d 06 fe ff       	call   c000067c <memset>
c002001f:	58                   	pop    eax
c0020020:	5a                   	pop    edx
c0020021:	6a 00                	push   0x0
c0020023:	6a 00                	push   0x0
c0020025:	6a 00                	push   0x0
c0020027:	6a 00                	push   0x0
c0020029:	56                   	push   esi
c002002a:	53                   	push   ebx
c002002b:	e8 58 fc ff ff       	call   c001fc88 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020030:	83 c4 1c             	add    esp,0x1c
c0020033:	6a 0c                	push   0xc
c0020035:	6a 00                	push   0x0
c0020037:	56                   	push   esi
c0020038:	e8 3f 06 fe ff       	call   c000067c <memset>
c002003d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020042:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020047:	59                   	pop    ecx
c0020048:	58                   	pop    eax
c0020049:	6a 01                	push   0x1
c002004b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002004f:	50                   	push   eax
c0020050:	6a 00                	push   0x0
c0020052:	6a 12                	push   0x12
c0020054:	56                   	push   esi
c0020055:	53                   	push   ebx
c0020056:	e8 2d fc ff ff       	call   c001fc88 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002005b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002005f:	83 c4 20             	add    esp,0x20
c0020062:	83 e0 7f             	and    eax,0x7f
c0020065:	3c 70                	cmp    al,0x70
c0020067:	74 15                	je     c002007e <ATAPI::detectMedia()+0x76>
c0020069:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020070:	75 0c                	jne    c002007e <ATAPI::detectMedia()+0x76>
c0020072:	83 ec 0c             	sub    esp,0xc
c0020075:	53                   	push   ebx
c0020076:	e8 71 ff ff ff       	call   c001ffec <ATAPI::diskInserted()>
c002007b:	83 c4 10             	add    esp,0x10
c002007e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020082:	83 e0 0f             	and    eax,0xf
c0020085:	3c 02                	cmp    al,0x2
c0020087:	75 1b                	jne    c00200a4 <ATAPI::detectMedia()+0x9c>
c0020089:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002008e:	75 2d                	jne    c00200bd <ATAPI::detectMedia()+0xb5>
c0020090:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0020097:	74 24                	je     c00200bd <ATAPI::detectMedia()+0xb5>
c0020099:	83 ec 0c             	sub    esp,0xc
c002009c:	53                   	push   ebx
c002009d:	e8 a6 fe ff ff       	call   c001ff48 <ATAPI::diskRemoved()>
c00200a2:	eb 16                	jmp    c00200ba <ATAPI::detectMedia()+0xb2>
c00200a4:	84 c0                	test   al,al
c00200a6:	75 15                	jne    c00200bd <ATAPI::detectMedia()+0xb5>
c00200a8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00200af:	75 0c                	jne    c00200bd <ATAPI::detectMedia()+0xb5>
c00200b1:	83 ec 0c             	sub    esp,0xc
c00200b4:	53                   	push   ebx
c00200b5:	e8 32 ff ff ff       	call   c001ffec <ATAPI::diskInserted()>
c00200ba:	83 c4 10             	add    esp,0x10
c00200bd:	83 c4 24             	add    esp,0x24
c00200c0:	5b                   	pop    ebx
c00200c1:	5e                   	pop    esi
c00200c2:	c3                   	ret    
c00200c3:	90                   	nop

c00200c4 <ATAPI::open(int, int, void*)>:
c00200c4:	56                   	push   esi
c00200c5:	53                   	push   ebx
c00200c6:	50                   	push   eax
c00200c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00200cb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00200cf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00200d3:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00200d9:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00200df:	c1 e0 06             	shl    eax,0x6
c00200e2:	01 d0                	add    eax,edx
c00200e4:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00200eb:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00200f1:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00200f8:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020102:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020108:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002010f:	6a 04                	push   0x4
c0020111:	6a 0c                	push   0xc
c0020113:	51                   	push   ecx
c0020114:	52                   	push   edx
c0020115:	e8 cc e4 ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002011a:	90                   	nop
c002011b:	90                   	nop
c002011c:	6a 00                	push   0x0
c002011e:	6a 0c                	push   0xc
c0020120:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0020127:	50                   	push   eax
c0020128:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002012e:	e8 b3 e4 ff ff       	call   c001e5e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0020133:	83 c4 14             	add    esp,0x14
c0020136:	68 74 01 00 00       	push   0x174
c002013b:	e8 77 9b fe ff       	call   c0009cb7 <malloc>
c0020140:	83 c4 0c             	add    esp,0xc
c0020143:	89 c6                	mov    esi,eax
c0020145:	6a 00                	push   0x0
c0020147:	68 ff ff ff 7f       	push   0x7fffffff
c002014c:	6a 00                	push   0x0
c002014e:	6a 00                	push   0x0
c0020150:	53                   	push   ebx
c0020151:	68 a6 64 02 c0       	push   0xc00264a6
c0020156:	50                   	push   eax
c0020157:	e8 a4 f3 fe ff       	call   c000f500 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002015c:	83 c4 14             	add    esp,0x14
c002015f:	56                   	push   esi
c0020160:	e8 51 f4 fe ff       	call   c000f5b6 <LogicalDisk::assignDriveLetter()>
c0020165:	5a                   	pop    edx
c0020166:	0f be c0             	movsx  eax,al
c0020169:	59                   	pop    ecx
c002016a:	50                   	push   eax
c002016b:	68 3b 61 02 c0       	push   0xc002613b
c0020170:	e8 50 ce fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020175:	58                   	pop    eax
c0020176:	5a                   	pop    edx
c0020177:	56                   	push   esi
c0020178:	53                   	push   ebx
c0020179:	e8 c4 e2 fe ff       	call   c000e442 <Device::addChild(Device*)>
c002017e:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c0020184:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020187:	e8 56 e7 fe ff       	call   c000e8e2 <PhysicalDisk::startCache()>
c002018c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0020193:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0020196:	e8 6d fe ff ff       	call   c0020008 <ATAPI::detectMedia()>
c002019b:	83 c4 14             	add    esp,0x14
c002019e:	31 c0                	xor    eax,eax
c00201a0:	5b                   	pop    ebx
c00201a1:	5e                   	pop    esi
c00201a2:	c3                   	ret    
c00201a3:	90                   	nop

c00201a4 <ATAPI::read(unsigned long long, int, void*)>:
c00201a4:	55                   	push   ebp
c00201a5:	57                   	push   edi
c00201a6:	56                   	push   esi
c00201a7:	53                   	push   ebx
c00201a8:	83 ec 1c             	sub    esp,0x1c
c00201ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00201af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00201b3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00201b7:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00201be:	74 41                	je     c0020201 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c00201c0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00201c4:	b9 03 00 00 00       	mov    ecx,0x3
c00201c9:	fc                   	cld    
c00201ca:	31 c0                	xor    eax,eax
c00201cc:	86 fb                	xchg   bl,bh
c00201ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00201d0:	c1 c3 10             	rol    ebx,0x10
c00201d3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00201d8:	89 e8                	mov    eax,ebp
c00201da:	86 fb                	xchg   bl,bh
c00201dc:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00201e0:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00201e4:	50                   	push   eax
c00201e5:	50                   	push   eax
c00201e6:	55                   	push   ebp
c00201e7:	c1 e5 0b             	shl    ebp,0xb
c00201ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00201ee:	6a 00                	push   0x0
c00201f0:	55                   	push   ebp
c00201f1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00201f5:	50                   	push   eax
c00201f6:	56                   	push   esi
c00201f7:	e8 8c fa ff ff       	call   c001fc88 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00201fc:	83 c4 20             	add    esp,0x20
c00201ff:	eb 1a                	jmp    c002021b <ATAPI::read(unsigned long long, int, void*)+0x77>
c0020201:	83 ec 0c             	sub    esp,0xc
c0020204:	56                   	push   esi
c0020205:	e8 fe fd ff ff       	call   c0020008 <ATAPI::detectMedia()>
c002020a:	83 c4 10             	add    esp,0x10
c002020d:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020214:	75 aa                	jne    c00201c0 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0020216:	b8 02 00 00 00       	mov    eax,0x2
c002021b:	83 c4 1c             	add    esp,0x1c
c002021e:	5b                   	pop    ebx
c002021f:	5e                   	pop    esi
c0020220:	5f                   	pop    edi
c0020221:	5d                   	pop    ebp
c0020222:	c3                   	ret    
c0020223:	90                   	nop

c0020224 <SATA::close(int, int, void*)>:
c0020224:	83 ec 0c             	sub    esp,0xc
c0020227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002022b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020231:	85 c0                	test   eax,eax
c0020233:	74 0c                	je     c0020241 <SATA::close(int, int, void*)+0x1d>
c0020235:	83 ec 0c             	sub    esp,0xc
c0020238:	8b 10                	mov    edx,DWORD PTR [eax]
c002023a:	50                   	push   eax
c002023b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002023e:	83 c4 10             	add    esp,0x10
c0020241:	31 c0                	xor    eax,eax
c0020243:	83 c4 0c             	add    esp,0xc
c0020246:	c3                   	ret    
c0020247:	90                   	nop

c0020248 <SATA::powerSaving(PowerSavingLevel)>:
c0020248:	c3                   	ret    
c0020249:	90                   	nop

c002024a <SATA::open(int, int, void*)>:
c002024a:	56                   	push   esi
c002024b:	53                   	push   ebx
c002024c:	51                   	push   ecx
c002024d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020251:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0020258:	74 2d                	je     c0020287 <SATA::open(int, int, void*)+0x3d>
c002025a:	83 ec 0c             	sub    esp,0xc
c002025d:	68 80 61 02 c0       	push   0xc0026180
c0020262:	e8 aa 9a fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020267:	83 c4 10             	add    esp,0x10
c002026a:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c0020271:	75 14                	jne    c0020287 <SATA::open(int, int, void*)+0x3d>
c0020273:	e4 60                	in     al,0x60
c0020275:	3c 5a                	cmp    al,0x5a
c0020277:	74 04                	je     c002027d <SATA::open(int, int, void*)+0x33>
c0020279:	3c 1c                	cmp    al,0x1c
c002027b:	75 f6                	jne    c0020273 <SATA::open(int, int, void*)+0x29>
c002027d:	e4 60                	in     al,0x60
c002027f:	3c 5a                	cmp    al,0x5a
c0020281:	74 fa                	je     c002027d <SATA::open(int, int, void*)+0x33>
c0020283:	3c 1c                	cmp    al,0x1c
c0020285:	74 f6                	je     c002027d <SATA::open(int, int, void*)+0x33>
c0020287:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002028b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020295:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002029b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00202a5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00202a9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00202b3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00202b9:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00202c0:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c00202c7:	74 2d                	je     c00202f6 <SATA::open(int, int, void*)+0xac>
c00202c9:	83 ec 0c             	sub    esp,0xc
c00202cc:	68 8d 61 02 c0       	push   0xc002618d
c00202d1:	e8 3b 9a fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00202d6:	83 c4 10             	add    esp,0x10
c00202d9:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c00202e0:	75 14                	jne    c00202f6 <SATA::open(int, int, void*)+0xac>
c00202e2:	e4 60                	in     al,0x60
c00202e4:	3c 1c                	cmp    al,0x1c
c00202e6:	74 04                	je     c00202ec <SATA::open(int, int, void*)+0xa2>
c00202e8:	3c 5a                	cmp    al,0x5a
c00202ea:	75 f6                	jne    c00202e2 <SATA::open(int, int, void*)+0x98>
c00202ec:	e4 60                	in     al,0x60
c00202ee:	3c 5a                	cmp    al,0x5a
c00202f0:	74 fa                	je     c00202ec <SATA::open(int, int, void*)+0xa2>
c00202f2:	3c 1c                	cmp    al,0x1c
c00202f4:	74 f6                	je     c00202ec <SATA::open(int, int, void*)+0xa2>
c00202f6:	e8 73 a0 fe ff       	call   c000a36e <Phys::allocatePage()>
c00202fb:	89 c6                	mov    esi,eax
c00202fd:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020303:	81 c6 00 10 00 00    	add    esi,0x1000
c0020309:	e8 60 a0 fe ff       	call   c000a36e <Phys::allocatePage()>
c002030e:	39 c6                	cmp    esi,eax
c0020310:	74 10                	je     c0020322 <SATA::open(int, int, void*)+0xd8>
c0020312:	83 ec 0c             	sub    esp,0xc
c0020315:	68 9a 61 02 c0       	push   0xc002619a
c002031a:	e8 e8 3a ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c002031f:	83 c4 10             	add    esp,0x10
c0020322:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0020329:	74 2d                	je     c0020358 <SATA::open(int, int, void*)+0x10e>
c002032b:	83 ec 0c             	sub    esp,0xc
c002032e:	68 ae 61 02 c0       	push   0xc00261ae
c0020333:	e8 d9 99 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020338:	83 c4 10             	add    esp,0x10
c002033b:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c0020342:	75 14                	jne    c0020358 <SATA::open(int, int, void*)+0x10e>
c0020344:	e4 60                	in     al,0x60
c0020346:	3c 1c                	cmp    al,0x1c
c0020348:	74 04                	je     c002034e <SATA::open(int, int, void*)+0x104>
c002034a:	3c 5a                	cmp    al,0x5a
c002034c:	75 f6                	jne    c0020344 <SATA::open(int, int, void*)+0xfa>
c002034e:	e4 60                	in     al,0x60
c0020350:	3c 5a                	cmp    al,0x5a
c0020352:	74 fa                	je     c002034e <SATA::open(int, int, void*)+0x104>
c0020354:	3c 1c                	cmp    al,0x1c
c0020356:	74 f6                	je     c002034e <SATA::open(int, int, void*)+0x104>
c0020358:	83 ec 0c             	sub    esp,0xc
c002035b:	6a 02                	push   0x2
c002035d:	e8 07 b9 fe ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c0020362:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0020368:	6a 03                	push   0x3
c002036a:	50                   	push   eax
c002036b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020371:	ff 35 d4 74 02 c0    	push   DWORD PTR ds:0xc00274d4
c0020377:	e8 58 bf fe ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c002037c:	83 c4 20             	add    esp,0x20
c002037f:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0020386:	74 2d                	je     c00203b5 <SATA::open(int, int, void*)+0x16b>
c0020388:	83 ec 0c             	sub    esp,0xc
c002038b:	68 bb 61 02 c0       	push   0xc00261bb
c0020390:	e8 7c 99 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020395:	83 c4 10             	add    esp,0x10
c0020398:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c002039f:	75 14                	jne    c00203b5 <SATA::open(int, int, void*)+0x16b>
c00203a1:	e4 60                	in     al,0x60
c00203a3:	3c 1c                	cmp    al,0x1c
c00203a5:	74 04                	je     c00203ab <SATA::open(int, int, void*)+0x161>
c00203a7:	3c 5a                	cmp    al,0x5a
c00203a9:	75 f6                	jne    c00203a1 <SATA::open(int, int, void*)+0x157>
c00203ab:	e4 60                	in     al,0x60
c00203ad:	3c 5a                	cmp    al,0x5a
c00203af:	74 fa                	je     c00203ab <SATA::open(int, int, void*)+0x161>
c00203b1:	3c 1c                	cmp    al,0x1c
c00203b3:	74 f6                	je     c00203ab <SATA::open(int, int, void*)+0x161>
c00203b5:	83 ec 0c             	sub    esp,0xc
c00203b8:	53                   	push   ebx
c00203b9:	e8 24 e5 fe ff       	call   c000e8e2 <PhysicalDisk::startCache()>
c00203be:	83 c4 10             	add    esp,0x10
c00203c1:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c00203c8:	74 2d                	je     c00203f7 <SATA::open(int, int, void*)+0x1ad>
c00203ca:	83 ec 0c             	sub    esp,0xc
c00203cd:	68 c8 61 02 c0       	push   0xc00261c8
c00203d2:	e8 3a 99 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00203d7:	83 c4 10             	add    esp,0x10
c00203da:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c00203e1:	75 14                	jne    c00203f7 <SATA::open(int, int, void*)+0x1ad>
c00203e3:	e4 60                	in     al,0x60
c00203e5:	3c 1c                	cmp    al,0x1c
c00203e7:	74 04                	je     c00203ed <SATA::open(int, int, void*)+0x1a3>
c00203e9:	3c 5a                	cmp    al,0x5a
c00203eb:	75 f6                	jne    c00203e3 <SATA::open(int, int, void*)+0x199>
c00203ed:	e4 60                	in     al,0x60
c00203ef:	3c 5a                	cmp    al,0x5a
c00203f1:	74 fa                	je     c00203ed <SATA::open(int, int, void*)+0x1a3>
c00203f3:	3c 1c                	cmp    al,0x1c
c00203f5:	74 f6                	je     c00203ed <SATA::open(int, int, void*)+0x1a3>
c00203f7:	83 ec 0c             	sub    esp,0xc
c00203fa:	53                   	push   ebx
c00203fb:	e8 76 f5 fe ff       	call   c000f976 <createPartitionsForDisk(PhysicalDisk*)>
c0020400:	83 c4 10             	add    esp,0x10
c0020403:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c002040a:	74 2d                	je     c0020439 <SATA::open(int, int, void*)+0x1ef>
c002040c:	83 ec 0c             	sub    esp,0xc
c002040f:	68 d5 61 02 c0       	push   0xc00261d5
c0020414:	e8 f8 98 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020419:	83 c4 10             	add    esp,0x10
c002041c:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c0020423:	75 14                	jne    c0020439 <SATA::open(int, int, void*)+0x1ef>
c0020425:	e4 60                	in     al,0x60
c0020427:	3c 1c                	cmp    al,0x1c
c0020429:	74 04                	je     c002042f <SATA::open(int, int, void*)+0x1e5>
c002042b:	3c 5a                	cmp    al,0x5a
c002042d:	75 f6                	jne    c0020425 <SATA::open(int, int, void*)+0x1db>
c002042f:	e4 60                	in     al,0x60
c0020431:	3c 5a                	cmp    al,0x5a
c0020433:	74 fa                	je     c002042f <SATA::open(int, int, void*)+0x1e5>
c0020435:	3c 1c                	cmp    al,0x1c
c0020437:	74 f6                	je     c002042f <SATA::open(int, int, void*)+0x1e5>
c0020439:	5a                   	pop    edx
c002043a:	31 c0                	xor    eax,eax
c002043c:	5b                   	pop    ebx
c002043d:	5e                   	pop    esi
c002043e:	c3                   	ret    
c002043f:	90                   	nop

c0020440 <SATA::SATA()>:
c0020440:	83 ec 0c             	sub    esp,0xc
c0020443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020447:	83 ec 04             	sub    esp,0x4
c002044a:	68 00 02 00 00       	push   0x200
c002044f:	68 e2 61 02 c0       	push   0xc00261e2
c0020454:	50                   	push   eax
c0020455:	e8 20 e4 fe ff       	call   c000e87a <PhysicalDisk::PhysicalDisk(char const*, int)>
c002045a:	83 c4 10             	add    esp,0x10
c002045d:	ba 8c 63 02 c0       	mov    edx,0xc002638c
c0020462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020466:	89 10                	mov    DWORD PTR [eax],edx
c0020468:	90                   	nop
c0020469:	83 c4 0c             	add    esp,0xc
c002046c:	c3                   	ret    
c002046d:	90                   	nop

c002046e <SATA::access(unsigned long long, int, void*, bool)>:
c002046e:	55                   	push   ebp
c002046f:	57                   	push   edi
c0020470:	56                   	push   esi
c0020471:	53                   	push   ebx
c0020472:	83 ec 2c             	sub    esp,0x2c
c0020475:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020479:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002047d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020481:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0020488:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002048c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020490:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020494:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020498:	75 19                	jne    c00204b3 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c002049a:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002049f:	7e 41                	jle    c00204e2 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00204a1:	83 ec 0c             	sub    esp,0xc
c00204a4:	68 01 62 02 c0       	push   0xc0026201
c00204a9:	e8 59 39 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c00204ae:	83 c4 10             	add    esp,0x10
c00204b1:	eb 2f                	jmp    c00204e2 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00204b3:	83 ec 0c             	sub    esp,0xc
c00204b6:	68 f2 61 02 c0       	push   0xc00261f2
c00204bb:	e8 51 98 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00204c0:	83 c4 10             	add    esp,0x10
c00204c3:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c00204ca:	75 ce                	jne    c002049a <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00204cc:	e4 60                	in     al,0x60
c00204ce:	3c 1c                	cmp    al,0x1c
c00204d0:	74 04                	je     c00204d6 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00204d2:	3c 5a                	cmp    al,0x5a
c00204d4:	75 f6                	jne    c00204cc <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c00204d6:	e4 60                	in     al,0x60
c00204d8:	3c 5a                	cmp    al,0x5a
c00204da:	74 fa                	je     c00204d6 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00204dc:	3c 1c                	cmp    al,0x1c
c00204de:	74 f6                	je     c00204d6 <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00204e0:	eb b8                	jmp    c002049a <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00204e2:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c00204e9:	75 29                	jne    c0020514 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c00204eb:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00204f1:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c00204f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00204fd:	8d 75 02             	lea    esi,[ebp+0x2]
c0020500:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020504:	c1 e6 07             	shl    esi,0x7
c0020507:	01 c6                	add    esi,eax
c0020509:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0020510:	74 4a                	je     c002055c <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020512:	eb 2f                	jmp    c0020543 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020514:	83 ec 0c             	sub    esp,0xc
c0020517:	68 3a 62 02 c0       	push   0xc002623a
c002051c:	e8 f0 97 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020521:	83 c4 10             	add    esp,0x10
c0020524:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c002052b:	75 be                	jne    c00204eb <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c002052d:	e4 60                	in     al,0x60
c002052f:	3c 1c                	cmp    al,0x1c
c0020531:	74 04                	je     c0020537 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020533:	3c 5a                	cmp    al,0x5a
c0020535:	75 f6                	jne    c002052d <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c0020537:	e4 60                	in     al,0x60
c0020539:	3c 5a                	cmp    al,0x5a
c002053b:	74 fa                	je     c0020537 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c002053d:	3c 1c                	cmp    al,0x1c
c002053f:	74 f6                	je     c0020537 <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020541:	eb a8                	jmp    c00204eb <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020543:	83 ec 0c             	sub    esp,0xc
c0020546:	68 49 62 02 c0       	push   0xc0026249
c002054b:	e8 c1 97 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020550:	83 c4 10             	add    esp,0x10
c0020553:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c002055a:	74 3d                	je     c0020599 <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c002055c:	89 e8                	mov    eax,ebp
c002055e:	c1 e0 07             	shl    eax,0x7
c0020561:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020565:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002056f:	52                   	push   edx
c0020570:	52                   	push   edx
c0020571:	56                   	push   esi
c0020572:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0020578:	e8 fd eb ff ff       	call   c001f17a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002057d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020581:	83 c4 10             	add    esp,0x10
c0020584:	b8 01 00 00 00       	mov    eax,0x1
c0020589:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002058e:	75 1d                	jne    c00205ad <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020590:	e9 c8 04 00 00       	jmp    c0020a5d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020595:	3c 5a                	cmp    al,0x5a
c0020597:	74 0c                	je     c00205a5 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c0020599:	e4 60                	in     al,0x60
c002059b:	3c 1c                	cmp    al,0x1c
c002059d:	75 f6                	jne    c0020595 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c002059f:	eb 04                	jmp    c00205a5 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00205a1:	3c 1c                	cmp    al,0x1c
c00205a3:	75 b7                	jne    c002055c <SATA::access(unsigned long long, int, void*, bool)+0xee>
c00205a5:	e4 60                	in     al,0x60
c00205a7:	3c 5a                	cmp    al,0x5a
c00205a9:	74 fa                	je     c00205a5 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00205ab:	eb f4                	jmp    c00205a1 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c00205ad:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c00205b4:	74 3a                	je     c00205f0 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c00205b6:	83 ec 0c             	sub    esp,0xc
c00205b9:	68 58 62 02 c0       	push   0xc0026258
c00205be:	e8 4e 97 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00205c3:	83 c4 10             	add    esp,0x10
c00205c6:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c00205cd:	74 0d                	je     c00205dc <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c00205cf:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00205d4:	74 34                	je     c002060a <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c00205d6:	eb 1f                	jmp    c00205f7 <SATA::access(unsigned long long, int, void*, bool)+0x189>
c00205d8:	3c 1c                	cmp    al,0x1c
c00205da:	74 0c                	je     c00205e8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00205dc:	e4 60                	in     al,0x60
c00205de:	3c 5a                	cmp    al,0x5a
c00205e0:	75 f6                	jne    c00205d8 <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c00205e2:	eb 04                	jmp    c00205e8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00205e4:	3c 1c                	cmp    al,0x1c
c00205e6:	75 e7                	jne    c00205cf <SATA::access(unsigned long long, int, void*, bool)+0x161>
c00205e8:	e4 60                	in     al,0x60
c00205ea:	3c 5a                	cmp    al,0x5a
c00205ec:	74 fa                	je     c00205e8 <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00205ee:	eb f4                	jmp    c00205e4 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c00205f0:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00205f5:	74 1c                	je     c0020613 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00205f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00205fb:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020601:	c1 e1 09             	shl    ecx,0x9
c0020604:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0020608:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002060a:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0020611:	75 55                	jne    c0020668 <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020613:	8d 45 02             	lea    eax,[ebp+0x2]
c0020616:	c1 e0 07             	shl    eax,0x7
c0020619:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002061d:	8b 38                	mov    edi,DWORD PTR [eax]
c002061f:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020625:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c002062b:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020635:	c1 e0 05             	shl    eax,0x5
c0020638:	01 c7                	add    edi,eax
c002063a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002063e:	83 e0 01             	and    eax,0x1
c0020641:	c1 e0 06             	shl    eax,0x6
c0020644:	88 c2                	mov    dl,al
c0020646:	8a 07                	mov    al,BYTE PTR [edi]
c0020648:	83 e0 bf             	and    eax,0xffffffbf
c002064b:	09 d0                	or     eax,edx
c002064d:	88 07                	mov    BYTE PTR [edi],al
c002064f:	8b 07                	mov    eax,DWORD PTR [edi]
c0020651:	25 e0 ff 00 00       	and    eax,0xffe0
c0020656:	0d 05 00 01 00       	or     eax,0x10005
c002065b:	89 07                	mov    DWORD PTR [edi],eax
c002065d:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0020664:	74 4d                	je     c00206b3 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c0020666:	eb 32                	jmp    c002069a <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c0020668:	83 ec 0c             	sub    esp,0xc
c002066b:	68 67 62 02 c0       	push   0xc0026267
c0020670:	e8 9c 96 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020675:	83 c4 10             	add    esp,0x10
c0020678:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c002067f:	75 92                	jne    c0020613 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020681:	e4 60                	in     al,0x60
c0020683:	3c 1c                	cmp    al,0x1c
c0020685:	74 04                	je     c002068b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020687:	3c 5a                	cmp    al,0x5a
c0020689:	75 f6                	jne    c0020681 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c002068b:	e4 60                	in     al,0x60
c002068d:	3c 5a                	cmp    al,0x5a
c002068f:	74 fa                	je     c002068b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020691:	3c 1c                	cmp    al,0x1c
c0020693:	74 f6                	je     c002068b <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020695:	e9 79 ff ff ff       	jmp    c0020613 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c002069a:	83 ec 0c             	sub    esp,0xc
c002069d:	68 76 62 02 c0       	push   0xc0026276
c00206a2:	e8 6a 96 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00206a7:	83 c4 10             	add    esp,0x10
c00206aa:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c00206b1:	74 3b                	je     c00206ee <SATA::access(unsigned long long, int, void*, bool)+0x280>
c00206b3:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00206b9:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c00206bf:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c00206c5:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c00206c8:	50                   	push   eax
c00206c9:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c00206cd:	83 c0 08             	add    eax,0x8
c00206d0:	c1 e0 04             	shl    eax,0x4
c00206d3:	50                   	push   eax
c00206d4:	6a 00                	push   0x0
c00206d6:	56                   	push   esi
c00206d7:	e8 a0 ff fd ff       	call   c000067c <memset>
c00206dc:	83 c4 10             	add    esp,0x10
c00206df:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c00206e6:	74 33                	je     c002071b <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c00206e8:	eb 18                	jmp    c0020702 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c00206ea:	3c 1c                	cmp    al,0x1c
c00206ec:	74 0c                	je     c00206fa <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00206ee:	e4 60                	in     al,0x60
c00206f0:	3c 5a                	cmp    al,0x5a
c00206f2:	75 f6                	jne    c00206ea <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c00206f4:	eb 04                	jmp    c00206fa <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00206f6:	3c 1c                	cmp    al,0x1c
c00206f8:	75 b9                	jne    c00206b3 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c00206fa:	e4 60                	in     al,0x60
c00206fc:	3c 5a                	cmp    al,0x5a
c00206fe:	74 fa                	je     c00206fa <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020700:	eb f4                	jmp    c00206f6 <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020702:	83 ec 0c             	sub    esp,0xc
c0020705:	68 85 62 02 c0       	push   0xc0026285
c002070a:	e8 02 96 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c002070f:	83 c4 10             	add    esp,0x10
c0020712:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c0020719:	74 48                	je     c0020763 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c002071b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020721:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0020727:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002072b:	c1 e0 09             	shl    eax,0x9
c002072e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020732:	48                   	dec    eax
c0020733:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020738:	89 c2                	mov    edx,eax
c002073a:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020740:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020745:	09 d0                	or     eax,edx
c0020747:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002074d:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020754:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c002075b:	74 33                	je     c0020790 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c002075d:	eb 18                	jmp    c0020777 <SATA::access(unsigned long long, int, void*, bool)+0x309>
c002075f:	3c 1c                	cmp    al,0x1c
c0020761:	74 0c                	je     c002076f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020763:	e4 60                	in     al,0x60
c0020765:	3c 5a                	cmp    al,0x5a
c0020767:	75 f6                	jne    c002075f <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c0020769:	eb 04                	jmp    c002076f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c002076b:	3c 1c                	cmp    al,0x1c
c002076d:	75 ac                	jne    c002071b <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c002076f:	e4 60                	in     al,0x60
c0020771:	3c 5a                	cmp    al,0x5a
c0020773:	74 fa                	je     c002076f <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020775:	eb f4                	jmp    c002076b <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c0020777:	83 ec 0c             	sub    esp,0xc
c002077a:	68 94 62 02 c0       	push   0xc0026294
c002077f:	e8 8d 95 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020784:	83 c4 10             	add    esp,0x10
c0020787:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c002078e:	74 63                	je     c00207f3 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020790:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020793:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0020797:	66 25 00 7f          	and    ax,0x7f00
c002079b:	66 0d 27 80          	or     ax,0x8027
c002079f:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00207a4:	66 89 06             	mov    WORD PTR [esi],ax
c00207a7:	19 c0                	sbb    eax,eax
c00207a9:	83 e0 f0             	and    eax,0xfffffff0
c00207ac:	83 c0 35             	add    eax,0x35
c00207af:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00207b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207b6:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c00207ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207be:	c1 e8 10             	shr    eax,0x10
c00207c1:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00207c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00207c8:	c1 e8 18             	shr    eax,0x18
c00207cb:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c00207d2:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00207d5:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00207d9:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00207dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00207e0:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00207e3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00207e7:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00207eb:	74 33                	je     c0020820 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c00207ed:	eb 18                	jmp    c0020807 <SATA::access(unsigned long long, int, void*, bool)+0x399>
c00207ef:	3c 1c                	cmp    al,0x1c
c00207f1:	74 0c                	je     c00207ff <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00207f3:	e4 60                	in     al,0x60
c00207f5:	3c 5a                	cmp    al,0x5a
c00207f7:	75 f6                	jne    c00207ef <SATA::access(unsigned long long, int, void*, bool)+0x381>
c00207f9:	eb 04                	jmp    c00207ff <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00207fb:	3c 1c                	cmp    al,0x1c
c00207fd:	75 91                	jne    c0020790 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c00207ff:	e4 60                	in     al,0x60
c0020801:	3c 5a                	cmp    al,0x5a
c0020803:	74 fa                	je     c00207ff <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020805:	eb f4                	jmp    c00207fb <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c0020807:	83 ec 0c             	sub    esp,0xc
c002080a:	68 a3 62 02 c0       	push   0xc00262a3
c002080f:	e8 fd 94 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020814:	83 c4 10             	add    esp,0x10
c0020817:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c002081e:	74 11                	je     c0020831 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020820:	89 e8                	mov    eax,ebp
c0020822:	31 f6                	xor    esi,esi
c0020824:	c1 e0 07             	shl    eax,0x7
c0020827:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002082b:	eb 21                	jmp    c002084e <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c002082d:	3c 1c                	cmp    al,0x1c
c002082f:	74 0c                	je     c002083d <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020831:	e4 60                	in     al,0x60
c0020833:	3c 5a                	cmp    al,0x5a
c0020835:	75 f6                	jne    c002082d <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c0020837:	eb 04                	jmp    c002083d <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020839:	3c 1c                	cmp    al,0x1c
c002083b:	75 e3                	jne    c0020820 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c002083d:	e4 60                	in     al,0x60
c002083f:	3c 5a                	cmp    al,0x5a
c0020841:	74 fa                	je     c002083d <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020843:	eb f4                	jmp    c0020839 <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020845:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002084b:	74 0c                	je     c0020859 <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c002084d:	46                   	inc    esi
c002084e:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020854:	80 e2 88             	and    dl,0x88
c0020857:	75 ec                	jne    c0020845 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c0020859:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0020860:	74 3d                	je     c002089f <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020862:	83 ec 0c             	sub    esp,0xc
c0020865:	68 b2 62 02 c0       	push   0xc00262b2
c002086a:	e8 a2 94 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c002086f:	8b 15 c0 73 02 c0    	mov    edx,DWORD PTR ds:0xc00273c0
c0020875:	83 c4 10             	add    esp,0x10
c0020878:	f6 c2 80             	test   dl,0x80
c002087b:	74 0e                	je     c002088b <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c002087d:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020883:	75 2f                	jne    c00208b4 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020885:	eb 20                	jmp    c00208a7 <SATA::access(unsigned long long, int, void*, bool)+0x439>
c0020887:	3c 1c                	cmp    al,0x1c
c0020889:	74 0c                	je     c0020897 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002088b:	e4 60                	in     al,0x60
c002088d:	3c 5a                	cmp    al,0x5a
c002088f:	75 f6                	jne    c0020887 <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0020891:	eb 04                	jmp    c0020897 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020893:	3c 1c                	cmp    al,0x1c
c0020895:	75 e6                	jne    c002087d <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c0020897:	e4 60                	in     al,0x60
c0020899:	3c 5a                	cmp    al,0x5a
c002089b:	74 fa                	je     c0020897 <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002089d:	eb f4                	jmp    c0020893 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c002089f:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c00208a5:	75 13                	jne    c00208ba <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00208a7:	83 ec 0c             	sub    esp,0xc
c00208aa:	68 c2 62 02 c0       	push   0xc00262c2
c00208af:	e9 d2 00 00 00       	jmp    c0020986 <SATA::access(unsigned long long, int, void*, bool)+0x518>
c00208b4:	0f ba e2 0b          	bt     edx,0xb
c00208b8:	72 25                	jb     c00208df <SATA::access(unsigned long long, int, void*, bool)+0x471>
c00208ba:	be 01 00 00 00       	mov    esi,0x1
c00208bf:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00208c3:	89 e8                	mov    eax,ebp
c00208c5:	d3 e6                	shl    esi,cl
c00208c7:	c1 e0 07             	shl    eax,0x7
c00208ca:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00208ce:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c00208d5:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c00208db:	74 4a                	je     c0020927 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00208dd:	eb 2f                	jmp    c002090e <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c00208df:	83 ec 0c             	sub    esp,0xc
c00208e2:	68 d0 62 02 c0       	push   0xc00262d0
c00208e7:	e8 25 94 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00208ec:	83 c4 10             	add    esp,0x10
c00208ef:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c00208f6:	75 c2                	jne    c00208ba <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00208f8:	e4 60                	in     al,0x60
c00208fa:	3c 5a                	cmp    al,0x5a
c00208fc:	74 04                	je     c0020902 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c00208fe:	3c 1c                	cmp    al,0x1c
c0020900:	75 f6                	jne    c00208f8 <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c0020902:	e4 60                	in     al,0x60
c0020904:	3c 5a                	cmp    al,0x5a
c0020906:	74 fa                	je     c0020902 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020908:	3c 1c                	cmp    al,0x1c
c002090a:	74 f6                	je     c0020902 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c002090c:	eb ac                	jmp    c00208ba <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c002090e:	83 ec 0c             	sub    esp,0xc
c0020911:	68 e0 62 02 c0       	push   0xc00262e0
c0020916:	e8 f6 93 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c002091b:	83 c4 10             	add    esp,0x10
c002091e:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c0020925:	74 0f                	je     c0020936 <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c0020927:	89 e8                	mov    eax,ebp
c0020929:	c1 e0 07             	shl    eax,0x7
c002092c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020930:	eb 24                	jmp    c0020956 <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c0020932:	3c 1c                	cmp    al,0x1c
c0020934:	74 0c                	je     c0020942 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020936:	e4 60                	in     al,0x60
c0020938:	3c 5a                	cmp    al,0x5a
c002093a:	75 f6                	jne    c0020932 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c002093c:	eb 04                	jmp    c0020942 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c002093e:	3c 1c                	cmp    al,0x1c
c0020940:	75 e5                	jne    c0020927 <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020942:	e4 60                	in     al,0x60
c0020944:	3c 5a                	cmp    al,0x5a
c0020946:	74 fa                	je     c0020942 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020948:	eb f4                	jmp    c002093e <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c002094a:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020950:	0f ba e2 1e          	bt     edx,0x1e
c0020954:	72 28                	jb     c002097e <SATA::access(unsigned long long, int, void*, bool)+0x510>
c0020956:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c002095c:	85 d6                	test   esi,edx
c002095e:	75 ea                	jne    c002094a <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020960:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0020967:	75 2f                	jne    c0020998 <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c0020969:	89 e8                	mov    eax,ebp
c002096b:	c1 e0 07             	shl    eax,0x7
c002096e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020972:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020978:	0f ba e0 1e          	bt     eax,0x1e
c002097c:	73 49                	jae    c00209c7 <SATA::access(unsigned long long, int, void*, bool)+0x559>
c002097e:	83 ec 0c             	sub    esp,0xc
c0020981:	68 f0 62 02 c0       	push   0xc00262f0
c0020986:	e8 3a c6 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c002098b:	83 c4 10             	add    esp,0x10
c002098e:	b8 01 00 00 00       	mov    eax,0x1
c0020993:	e9 c5 00 00 00       	jmp    c0020a5d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020998:	83 ec 0c             	sub    esp,0xc
c002099b:	68 01 63 02 c0       	push   0xc0026301
c00209a0:	e8 6c 93 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00209a5:	83 c4 10             	add    esp,0x10
c00209a8:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c00209af:	75 b8                	jne    c0020969 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c00209b1:	e4 60                	in     al,0x60
c00209b3:	3c 5a                	cmp    al,0x5a
c00209b5:	74 04                	je     c00209bb <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00209b7:	3c 1c                	cmp    al,0x1c
c00209b9:	75 f6                	jne    c00209b1 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c00209bb:	e4 60                	in     al,0x60
c00209bd:	3c 5a                	cmp    al,0x5a
c00209bf:	74 fa                	je     c00209bb <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00209c1:	3c 1c                	cmp    al,0x1c
c00209c3:	74 f6                	je     c00209bb <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00209c5:	eb a2                	jmp    c0020969 <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c00209c7:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c00209ce:	74 3a                	je     c0020a0a <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c00209d0:	83 ec 0c             	sub    esp,0xc
c00209d3:	68 11 63 02 c0       	push   0xc0026311
c00209d8:	e8 34 93 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c00209dd:	83 c4 10             	add    esp,0x10
c00209e0:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c00209e7:	74 0d                	je     c00209f6 <SATA::access(unsigned long long, int, void*, bool)+0x588>
c00209e9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00209ee:	75 31                	jne    c0020a21 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c00209f0:	eb 1f                	jmp    c0020a11 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c00209f2:	3c 1c                	cmp    al,0x1c
c00209f4:	74 0c                	je     c0020a02 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00209f6:	e4 60                	in     al,0x60
c00209f8:	3c 5a                	cmp    al,0x5a
c00209fa:	75 f6                	jne    c00209f2 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c00209fc:	eb 04                	jmp    c0020a02 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00209fe:	3c 1c                	cmp    al,0x1c
c0020a00:	75 e7                	jne    c00209e9 <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c0020a02:	e4 60                	in     al,0x60
c0020a04:	3c 5a                	cmp    al,0x5a
c0020a06:	74 fa                	je     c0020a02 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020a08:	eb f4                	jmp    c00209fe <SATA::access(unsigned long long, int, void*, bool)+0x590>
c0020a0a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020a0f:	75 19                	jne    c0020a2a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020a11:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020a17:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020a1b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020a1f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020a21:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0020a28:	75 04                	jne    c0020a2e <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c0020a2a:	31 c0                	xor    eax,eax
c0020a2c:	eb 2f                	jmp    c0020a5d <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020a2e:	83 ec 0c             	sub    esp,0xc
c0020a31:	68 21 63 02 c0       	push   0xc0026321
c0020a36:	e8 d6 92 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020a3b:	83 c4 10             	add    esp,0x10
c0020a3e:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c0020a45:	75 e3                	jne    c0020a2a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020a47:	e4 60                	in     al,0x60
c0020a49:	3c 1c                	cmp    al,0x1c
c0020a4b:	74 04                	je     c0020a51 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020a4d:	3c 5a                	cmp    al,0x5a
c0020a4f:	75 f6                	jne    c0020a47 <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0020a51:	e4 60                	in     al,0x60
c0020a53:	3c 5a                	cmp    al,0x5a
c0020a55:	74 fa                	je     c0020a51 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020a57:	3c 1c                	cmp    al,0x1c
c0020a59:	74 f6                	je     c0020a51 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020a5b:	eb cd                	jmp    c0020a2a <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020a5d:	83 c4 2c             	add    esp,0x2c
c0020a60:	5b                   	pop    ebx
c0020a61:	5e                   	pop    esi
c0020a62:	5f                   	pop    edi
c0020a63:	5d                   	pop    ebp
c0020a64:	c3                   	ret    
c0020a65:	90                   	nop

c0020a66 <SATA::read(unsigned long long, int, void*)>:
c0020a66:	55                   	push   ebp
c0020a67:	57                   	push   edi
c0020a68:	56                   	push   esi
c0020a69:	53                   	push   ebx
c0020a6a:	83 ec 0c             	sub    esp,0xc
c0020a6d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020a71:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020a75:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020a79:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020a7d:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0020a84:	74 2d                	je     c0020ab3 <SATA::read(unsigned long long, int, void*)+0x4d>
c0020a86:	83 ec 0c             	sub    esp,0xc
c0020a89:	68 31 63 02 c0       	push   0xc0026331
c0020a8e:	e8 7e 92 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020a93:	83 c4 10             	add    esp,0x10
c0020a96:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c0020a9d:	75 14                	jne    c0020ab3 <SATA::read(unsigned long long, int, void*)+0x4d>
c0020a9f:	e4 60                	in     al,0x60
c0020aa1:	3c 1c                	cmp    al,0x1c
c0020aa3:	74 04                	je     c0020aa9 <SATA::read(unsigned long long, int, void*)+0x43>
c0020aa5:	3c 5a                	cmp    al,0x5a
c0020aa7:	75 f6                	jne    c0020a9f <SATA::read(unsigned long long, int, void*)+0x39>
c0020aa9:	e4 60                	in     al,0x60
c0020aab:	3c 5a                	cmp    al,0x5a
c0020aad:	74 fa                	je     c0020aa9 <SATA::read(unsigned long long, int, void*)+0x43>
c0020aaf:	3c 1c                	cmp    al,0x1c
c0020ab1:	74 f6                	je     c0020aa9 <SATA::read(unsigned long long, int, void*)+0x43>
c0020ab3:	8d 53 ff             	lea    edx,[ebx-0x1]
c0020ab6:	b8 04 00 00 00       	mov    eax,0x4
c0020abb:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020ac1:	0f 87 96 00 00 00    	ja     c0020b5d <SATA::read(unsigned long long, int, void*)+0xf7>
c0020ac7:	b8 06 00 00 00       	mov    eax,0x6
c0020acc:	85 ed                	test   ebp,ebp
c0020ace:	0f 84 89 00 00 00    	je     c0020b5d <SATA::read(unsigned long long, int, void*)+0xf7>
c0020ad4:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0020adb:	74 2d                	je     c0020b0a <SATA::read(unsigned long long, int, void*)+0xa4>
c0020add:	83 ec 0c             	sub    esp,0xc
c0020ae0:	68 3e 63 02 c0       	push   0xc002633e
c0020ae5:	e8 27 92 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020aea:	83 c4 10             	add    esp,0x10
c0020aed:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c0020af4:	75 14                	jne    c0020b0a <SATA::read(unsigned long long, int, void*)+0xa4>
c0020af6:	e4 60                	in     al,0x60
c0020af8:	3c 5a                	cmp    al,0x5a
c0020afa:	74 04                	je     c0020b00 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020afc:	3c 1c                	cmp    al,0x1c
c0020afe:	75 f6                	jne    c0020af6 <SATA::read(unsigned long long, int, void*)+0x90>
c0020b00:	e4 60                	in     al,0x60
c0020b02:	3c 5a                	cmp    al,0x5a
c0020b04:	74 fa                	je     c0020b00 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020b06:	3c 1c                	cmp    al,0x1c
c0020b08:	74 f6                	je     c0020b00 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020b0a:	50                   	push   eax
c0020b0b:	50                   	push   eax
c0020b0c:	6a 00                	push   0x0
c0020b0e:	55                   	push   ebp
c0020b0f:	53                   	push   ebx
c0020b10:	57                   	push   edi
c0020b11:	56                   	push   esi
c0020b12:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020b16:	e8 53 f9 ff ff       	call   c002046e <SATA::access(unsigned long long, int, void*, bool)>
c0020b1b:	83 c4 20             	add    esp,0x20
c0020b1e:	89 c3                	mov    ebx,eax
c0020b20:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0020b27:	74 2d                	je     c0020b56 <SATA::read(unsigned long long, int, void*)+0xf0>
c0020b29:	83 ec 0c             	sub    esp,0xc
c0020b2c:	68 4b 63 02 c0       	push   0xc002634b
c0020b31:	e8 db 91 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020b36:	83 c4 10             	add    esp,0x10
c0020b39:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c0020b40:	75 14                	jne    c0020b56 <SATA::read(unsigned long long, int, void*)+0xf0>
c0020b42:	e4 60                	in     al,0x60
c0020b44:	3c 5a                	cmp    al,0x5a
c0020b46:	74 04                	je     c0020b4c <SATA::read(unsigned long long, int, void*)+0xe6>
c0020b48:	3c 1c                	cmp    al,0x1c
c0020b4a:	75 f6                	jne    c0020b42 <SATA::read(unsigned long long, int, void*)+0xdc>
c0020b4c:	e4 60                	in     al,0x60
c0020b4e:	3c 5a                	cmp    al,0x5a
c0020b50:	74 fa                	je     c0020b4c <SATA::read(unsigned long long, int, void*)+0xe6>
c0020b52:	3c 1c                	cmp    al,0x1c
c0020b54:	74 f6                	je     c0020b4c <SATA::read(unsigned long long, int, void*)+0xe6>
c0020b56:	31 c0                	xor    eax,eax
c0020b58:	85 db                	test   ebx,ebx
c0020b5a:	0f 95 c0             	setne  al
c0020b5d:	83 c4 0c             	add    esp,0xc
c0020b60:	5b                   	pop    ebx
c0020b61:	5e                   	pop    esi
c0020b62:	5f                   	pop    edi
c0020b63:	5d                   	pop    ebp
c0020b64:	c3                   	ret    
c0020b65:	90                   	nop

c0020b66 <SATA::write(unsigned long long, int, void*)>:
c0020b66:	55                   	push   ebp
c0020b67:	57                   	push   edi
c0020b68:	56                   	push   esi
c0020b69:	53                   	push   ebx
c0020b6a:	83 ec 1c             	sub    esp,0x1c
c0020b6d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020b71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020b75:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0020b79:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020b7d:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0020b84:	74 2d                	je     c0020bb3 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020b86:	83 ec 0c             	sub    esp,0xc
c0020b89:	68 58 63 02 c0       	push   0xc0026358
c0020b8e:	e8 7e 91 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020b93:	83 c4 10             	add    esp,0x10
c0020b96:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c0020b9d:	75 14                	jne    c0020bb3 <SATA::write(unsigned long long, int, void*)+0x4d>
c0020b9f:	e4 60                	in     al,0x60
c0020ba1:	3c 1c                	cmp    al,0x1c
c0020ba3:	74 04                	je     c0020ba9 <SATA::write(unsigned long long, int, void*)+0x43>
c0020ba5:	3c 5a                	cmp    al,0x5a
c0020ba7:	75 f6                	jne    c0020b9f <SATA::write(unsigned long long, int, void*)+0x39>
c0020ba9:	e4 60                	in     al,0x60
c0020bab:	3c 5a                	cmp    al,0x5a
c0020bad:	74 fa                	je     c0020ba9 <SATA::write(unsigned long long, int, void*)+0x43>
c0020baf:	3c 1c                	cmp    al,0x1c
c0020bb1:	74 f6                	je     c0020ba9 <SATA::write(unsigned long long, int, void*)+0x43>
c0020bb3:	8d 55 ff             	lea    edx,[ebp-0x1]
c0020bb6:	b8 04 00 00 00       	mov    eax,0x4
c0020bbb:	81 fa fe 00 00 00    	cmp    edx,0xfe
c0020bc1:	0f 87 bd 00 00 00    	ja     c0020c84 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020bc7:	b8 06 00 00 00       	mov    eax,0x6
c0020bcc:	85 db                	test   ebx,ebx
c0020bce:	0f 84 b0 00 00 00    	je     c0020c84 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020bd4:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0020bdb:	74 2d                	je     c0020c0a <SATA::write(unsigned long long, int, void*)+0xa4>
c0020bdd:	83 ec 0c             	sub    esp,0xc
c0020be0:	68 66 63 02 c0       	push   0xc0026366
c0020be5:	e8 27 91 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020bea:	83 c4 10             	add    esp,0x10
c0020bed:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c0020bf4:	75 14                	jne    c0020c0a <SATA::write(unsigned long long, int, void*)+0xa4>
c0020bf6:	e4 60                	in     al,0x60
c0020bf8:	3c 1c                	cmp    al,0x1c
c0020bfa:	74 04                	je     c0020c00 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020bfc:	3c 5a                	cmp    al,0x5a
c0020bfe:	75 f6                	jne    c0020bf6 <SATA::write(unsigned long long, int, void*)+0x90>
c0020c00:	e4 60                	in     al,0x60
c0020c02:	3c 5a                	cmp    al,0x5a
c0020c04:	74 fa                	je     c0020c00 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020c06:	3c 1c                	cmp    al,0x1c
c0020c08:	74 f6                	je     c0020c00 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020c0a:	c1 e5 09             	shl    ebp,0x9
c0020c0d:	01 dd                	add    ebp,ebx
c0020c0f:	89 f0                	mov    eax,esi
c0020c11:	89 fa                	mov    edx,edi
c0020c13:	83 c0 01             	add    eax,0x1
c0020c16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020c1a:	83 d2 00             	adc    edx,0x0
c0020c1d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020c21:	50                   	push   eax
c0020c22:	50                   	push   eax
c0020c23:	6a 01                	push   0x1
c0020c25:	53                   	push   ebx
c0020c26:	81 c3 00 02 00 00    	add    ebx,0x200
c0020c2c:	6a 01                	push   0x1
c0020c2e:	57                   	push   edi
c0020c2f:	56                   	push   esi
c0020c30:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020c34:	e8 35 f8 ff ff       	call   c002046e <SATA::access(unsigned long long, int, void*, bool)>
c0020c39:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020c3d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0020c41:	83 c4 20             	add    esp,0x20
c0020c44:	39 dd                	cmp    ebp,ebx
c0020c46:	75 c7                	jne    c0020c0f <SATA::write(unsigned long long, int, void*)+0xa9>
c0020c48:	f6 05 c1 73 02 c0 08 	test   BYTE PTR ds:0xc00273c1,0x8
c0020c4f:	75 04                	jne    c0020c55 <SATA::write(unsigned long long, int, void*)+0xef>
c0020c51:	31 c0                	xor    eax,eax
c0020c53:	eb 2f                	jmp    c0020c84 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020c55:	83 ec 0c             	sub    esp,0xc
c0020c58:	68 74 63 02 c0       	push   0xc0026374
c0020c5d:	e8 af 90 fe ff       	call   c0009d11 <Krnl::setBootMessage(char const*)>
c0020c62:	83 c4 10             	add    esp,0x10
c0020c65:	f6 05 c0 73 02 c0 80 	test   BYTE PTR ds:0xc00273c0,0x80
c0020c6c:	75 e3                	jne    c0020c51 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020c6e:	e4 60                	in     al,0x60
c0020c70:	3c 5a                	cmp    al,0x5a
c0020c72:	74 04                	je     c0020c78 <SATA::write(unsigned long long, int, void*)+0x112>
c0020c74:	3c 1c                	cmp    al,0x1c
c0020c76:	75 f6                	jne    c0020c6e <SATA::write(unsigned long long, int, void*)+0x108>
c0020c78:	e4 60                	in     al,0x60
c0020c7a:	3c 5a                	cmp    al,0x5a
c0020c7c:	74 fa                	je     c0020c78 <SATA::write(unsigned long long, int, void*)+0x112>
c0020c7e:	3c 1c                	cmp    al,0x1c
c0020c80:	74 f6                	je     c0020c78 <SATA::write(unsigned long long, int, void*)+0x112>
c0020c82:	eb cd                	jmp    c0020c51 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020c84:	83 c4 1c             	add    esp,0x1c
c0020c87:	5b                   	pop    ebx
c0020c88:	5e                   	pop    esi
c0020c89:	5f                   	pop    edi
c0020c8a:	5d                   	pop    ebp
c0020c8b:	c3                   	ret    

c0020c8c <SATAPI::write(unsigned long long, int, void*)>:
c0020c8c:	b8 03 00 00 00       	mov    eax,0x3
c0020c91:	c3                   	ret    

c0020c92 <SATAPI::close(int, int, void*)>:
c0020c92:	83 ec 0c             	sub    esp,0xc
c0020c95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c99:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020c9f:	85 c0                	test   eax,eax
c0020ca1:	74 0c                	je     c0020caf <SATAPI::close(int, int, void*)+0x1d>
c0020ca3:	83 ec 0c             	sub    esp,0xc
c0020ca6:	8b 10                	mov    edx,DWORD PTR [eax]
c0020ca8:	50                   	push   eax
c0020ca9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020cac:	83 c4 10             	add    esp,0x10
c0020caf:	31 c0                	xor    eax,eax
c0020cb1:	83 c4 0c             	add    esp,0xc
c0020cb4:	c3                   	ret    
c0020cb5:	90                   	nop

c0020cb6 <SATAPI::SATAPI()>:
c0020cb6:	83 ec 0c             	sub    esp,0xc
c0020cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cbd:	83 ec 04             	sub    esp,0x4
c0020cc0:	68 00 08 00 00       	push   0x800
c0020cc5:	68 bc 63 02 c0       	push   0xc00263bc
c0020cca:	50                   	push   eax
c0020ccb:	e8 aa db fe ff       	call   c000e87a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020cd0:	83 c4 10             	add    esp,0x10
c0020cd3:	ba f8 64 02 c0       	mov    edx,0xc00264f8
c0020cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cdc:	89 10                	mov    DWORD PTR [eax],edx
c0020cde:	90                   	nop
c0020cdf:	83 c4 0c             	add    esp,0xc
c0020ce2:	c3                   	ret    
c0020ce3:	90                   	nop

c0020ce4 <SATAPI::diskRemoved()>:
c0020ce4:	c3                   	ret    
c0020ce5:	90                   	nop

c0020ce6 <SATAPI::diskInserted()>:
c0020ce6:	83 ec 18             	sub    esp,0x18
c0020ce9:	68 c8 63 02 c0       	push   0xc00263c8
c0020cee:	e8 d2 c2 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020cf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020cf7:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020cfe:	83 c4 1c             	add    esp,0x1c
c0020d01:	c3                   	ret    

c0020d02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020d02:	55                   	push   ebp
c0020d03:	57                   	push   edi
c0020d04:	56                   	push   esi
c0020d05:	53                   	push   ebx
c0020d06:	83 ec 38             	sub    esp,0x38
c0020d09:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0020d0d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0020d11:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020d15:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020d19:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020d1d:	68 e0 63 02 c0       	push   0xc00263e0
c0020d22:	e8 9e c2 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020d27:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020d2d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020d33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020d37:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020d3d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020d41:	c1 e0 07             	shl    eax,0x7
c0020d44:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0020d48:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020d4c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020d56:	5a                   	pop    edx
c0020d57:	59                   	pop    ecx
c0020d58:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020d5c:	8d 58 02             	lea    ebx,[eax+0x2]
c0020d5f:	c1 e3 07             	shl    ebx,0x7
c0020d62:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0020d66:	53                   	push   ebx
c0020d67:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020d6d:	e8 08 e4 ff ff       	call   c001f17a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020d72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020d76:	83 c4 10             	add    esp,0x10
c0020d79:	b8 01 00 00 00       	mov    eax,0x1
c0020d7e:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020d83:	0f 84 ff 01 00 00    	je     c0020f88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0020d89:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020d8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020d91:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020d97:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020d9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020da1:	c1 e1 05             	shl    ecx,0x5
c0020da4:	01 c8                	add    eax,ecx
c0020da6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020da8:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020dae:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020db4:	89 08                	mov    DWORD PTR [eax],ecx
c0020db6:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020dbc:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020dc2:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020dc8:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020dcb:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020dce:	50                   	push   eax
c0020dcf:	68 90 00 00 00       	push   0x90
c0020dd4:	6a 00                	push   0x0
c0020dd6:	53                   	push   ebx
c0020dd7:	e8 a0 f8 fd ff       	call   c000067c <memset>
c0020ddc:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020de0:	b9 0c 00 00 00       	mov    ecx,0xc
c0020de5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020de7:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020ded:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020df1:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020df7:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020dfb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020dff:	48                   	dec    eax
c0020e00:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020e05:	89 c1                	mov    ecx,eax
c0020e07:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020e0d:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020e12:	09 c8                	or     eax,ecx
c0020e14:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020e1a:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020e1d:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020e24:	66 25 00 7f          	and    ax,0x7f00
c0020e28:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020e2c:	66 0d 27 80          	or     ax,0x8027
c0020e30:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020e34:	66 89 03             	mov    WORD PTR [ebx],ax
c0020e37:	89 d0                	mov    eax,edx
c0020e39:	c1 ea 18             	shr    edx,0x18
c0020e3c:	c1 e8 10             	shr    eax,0x10
c0020e3f:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020e42:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020e45:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020e49:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020e4c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e50:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020e53:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020e57:	83 c4 10             	add    esp,0x10
c0020e5a:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020e5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020e62:	31 c0                	xor    eax,eax
c0020e64:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020e6a:	80 e1 88             	and    cl,0x88
c0020e6d:	74 0a                	je     c0020e79 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0020e6f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020e74:	74 0a                	je     c0020e80 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0020e76:	40                   	inc    eax
c0020e77:	eb eb                	jmp    c0020e64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0020e79:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020e7e:	75 0a                	jne    c0020e8a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x188>
c0020e80:	83 ec 0c             	sub    esp,0xc
c0020e83:	68 fa 63 02 c0       	push   0xc00263fa
c0020e88:	eb 43                	jmp    c0020ecd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0020e8a:	be 01 00 00 00       	mov    esi,0x1
c0020e8f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020e93:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020e97:	d3 e6                	shl    esi,cl
c0020e99:	c1 e7 07             	shl    edi,0x7
c0020e9c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020ea2:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0020ea7:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020eab:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020eb1:	85 c6                	test   esi,eax
c0020eb3:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020eb9:	0f 84 96 00 00 00    	je     c0020f55 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x253>
c0020ebf:	0f ba e0 1e          	bt     eax,0x1e
c0020ec3:	73 1a                	jae    c0020edf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1dd>
c0020ec5:	83 ec 0c             	sub    esp,0xc
c0020ec8:	68 0f 64 02 c0       	push   0xc002640f
c0020ecd:	e8 f3 c0 fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020ed2:	83 c4 10             	add    esp,0x10
c0020ed5:	b8 01 00 00 00       	mov    eax,0x1
c0020eda:	e9 a9 00 00 00       	jmp    c0020f88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x286>
c0020edf:	83 fb 0d             	cmp    ebx,0xd
c0020ee2:	77 12                	ja     c0020ef6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f4>
c0020ee4:	83 ec 0c             	sub    esp,0xc
c0020ee7:	68 c8 00 00 00       	push   0xc8
c0020eec:	e8 73 68 ff ff       	call   c0017764 <milliTenthSleep(unsigned int)>
c0020ef1:	83 c4 10             	add    esp,0x10
c0020ef4:	eb 2a                	jmp    c0020f20 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c0020ef6:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0020efc:	83 f8 0d             	cmp    eax,0xd
c0020eff:	77 0a                	ja     c0020f0b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x209>
c0020f01:	83 ec 0c             	sub    esp,0xc
c0020f04:	68 58 02 00 00       	push   0x258
c0020f09:	eb 28                	jmp    c0020f33 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c0020f0b:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0020f11:	83 f8 0d             	cmp    eax,0xd
c0020f14:	77 0a                	ja     c0020f20 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21e>
c0020f16:	83 ec 0c             	sub    esp,0xc
c0020f19:	68 dc 05 00 00       	push   0x5dc
c0020f1e:	eb 13                	jmp    c0020f33 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x231>
c0020f20:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0020f26:	83 f8 0d             	cmp    eax,0xd
c0020f29:	77 10                	ja     c0020f3b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x239>
c0020f2b:	83 ec 0c             	sub    esp,0xc
c0020f2e:	68 c4 09 00 00       	push   0x9c4
c0020f33:	e8 2c 68 ff ff       	call   c0017764 <milliTenthSleep(unsigned int)>
c0020f38:	83 c4 10             	add    esp,0x10
c0020f3b:	43                   	inc    ebx
c0020f3c:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0020f42:	0f 85 63 ff ff ff    	jne    c0020eab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1a9>
c0020f48:	83 ec 0c             	sub    esp,0xc
c0020f4b:	68 22 64 02 c0       	push   0xc0026422
c0020f50:	e9 78 ff ff ff       	jmp    c0020ecd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0020f55:	0f ba e0 1e          	bt     eax,0x1e
c0020f59:	73 0d                	jae    c0020f68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c0020f5b:	83 ec 0c             	sub    esp,0xc
c0020f5e:	68 36 64 02 c0       	push   0xc0026436
c0020f63:	e9 65 ff ff ff       	jmp    c0020ecd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cb>
c0020f68:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020f6d:	74 17                	je     c0020f86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c0020f6f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020f74:	74 10                	je     c0020f86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x284>
c0020f76:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020f7c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020f80:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020f84:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020f86:	31 c0                	xor    eax,eax
c0020f88:	83 c4 2c             	add    esp,0x2c
c0020f8b:	5b                   	pop    ebx
c0020f8c:	5e                   	pop    esi
c0020f8d:	5f                   	pop    edi
c0020f8e:	5d                   	pop    ebp
c0020f8f:	c3                   	ret    

c0020f90 <SATAPI::eject()>:
c0020f90:	57                   	push   edi
c0020f91:	b9 03 00 00 00       	mov    ecx,0x3
c0020f96:	83 ec 18             	sub    esp,0x18
c0020f99:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020f9d:	fc                   	cld    
c0020f9e:	31 c0                	xor    eax,eax
c0020fa0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020fa2:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020fa7:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020fac:	50                   	push   eax
c0020fad:	6a 00                	push   0x0
c0020faf:	6a 00                	push   0x0
c0020fb1:	6a 00                	push   0x0
c0020fb3:	6a 00                	push   0x0
c0020fb5:	6a 02                	push   0x2
c0020fb7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020fbb:	50                   	push   eax
c0020fbc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020fc0:	e8 3d fd ff ff       	call   c0020d02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020fc5:	31 c0                	xor    eax,eax
c0020fc7:	83 c4 38             	add    esp,0x38
c0020fca:	5f                   	pop    edi
c0020fcb:	c3                   	ret    

c0020fcc <SATAPI::detectMedia()>:
c0020fcc:	56                   	push   esi
c0020fcd:	53                   	push   ebx
c0020fce:	83 ec 30             	sub    esp,0x30
c0020fd1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020fd5:	68 4b 64 02 c0       	push   0xc002644b
c0020fda:	e8 e6 bf fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0020fdf:	83 c4 0c             	add    esp,0xc
c0020fe2:	6a 0c                	push   0xc
c0020fe4:	6a 00                	push   0x0
c0020fe6:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020fea:	56                   	push   esi
c0020feb:	e8 8c f6 fd ff       	call   c000067c <memset>
c0020ff0:	83 c4 0c             	add    esp,0xc
c0020ff3:	6a 00                	push   0x0
c0020ff5:	6a 00                	push   0x0
c0020ff7:	6a 00                	push   0x0
c0020ff9:	6a 00                	push   0x0
c0020ffb:	6a 00                	push   0x0
c0020ffd:	56                   	push   esi
c0020ffe:	53                   	push   ebx
c0020fff:	e8 fe fc ff ff       	call   c0020d02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021004:	83 c4 20             	add    esp,0x20
c0021007:	48                   	dec    eax
c0021008:	74 34                	je     c002103e <SATAPI::detectMedia()+0x72>
c002100a:	50                   	push   eax
c002100b:	6a 0c                	push   0xc
c002100d:	6a 00                	push   0x0
c002100f:	56                   	push   esi
c0021010:	e8 67 f6 fd ff       	call   c000067c <memset>
c0021015:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002101a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002101f:	83 c4 0c             	add    esp,0xc
c0021022:	6a 01                	push   0x1
c0021024:	8d 44 24 16          	lea    eax,[esp+0x16]
c0021028:	50                   	push   eax
c0021029:	6a 00                	push   0x0
c002102b:	6a 00                	push   0x0
c002102d:	6a 12                	push   0x12
c002102f:	56                   	push   esi
c0021030:	53                   	push   ebx
c0021031:	e8 cc fc ff ff       	call   c0020d02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021036:	83 c4 20             	add    esp,0x20
c0021039:	48                   	dec    eax
c002103a:	75 39                	jne    c0021075 <SATAPI::detectMedia()+0xa9>
c002103c:	eb 1e                	jmp    c002105c <SATAPI::detectMedia()+0x90>
c002103e:	83 ec 0c             	sub    esp,0xc
c0021041:	68 5f 64 02 c0       	push   0xc002645f
c0021046:	e8 7a bf fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c002104b:	83 c4 10             	add    esp,0x10
c002104e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021055:	74 b3                	je     c002100a <SATAPI::detectMedia()+0x3e>
c0021057:	e9 93 00 00 00       	jmp    c00210ef <SATAPI::detectMedia()+0x123>
c002105c:	83 ec 0c             	sub    esp,0xc
c002105f:	68 69 64 02 c0       	push   0xc0026469
c0021064:	e8 5c bf fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0021069:	83 c4 10             	add    esp,0x10
c002106c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021073:	75 7a                	jne    c00210ef <SATAPI::detectMedia()+0x123>
c0021075:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0021079:	83 e0 7f             	and    eax,0x7f
c002107c:	3c 70                	cmp    al,0x70
c002107e:	74 25                	je     c00210a5 <SATAPI::detectMedia()+0xd9>
c0021080:	83 ec 0c             	sub    esp,0xc
c0021083:	68 73 64 02 c0       	push   0xc0026473
c0021088:	e8 38 bf fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c002108d:	83 c4 10             	add    esp,0x10
c0021090:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0021097:	75 0c                	jne    c00210a5 <SATAPI::detectMedia()+0xd9>
c0021099:	83 ec 0c             	sub    esp,0xc
c002109c:	53                   	push   ebx
c002109d:	e8 44 fc ff ff       	call   c0020ce6 <SATAPI::diskInserted()>
c00210a2:	83 c4 10             	add    esp,0x10
c00210a5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00210a9:	83 e0 0f             	and    eax,0xf
c00210ac:	3c 02                	cmp    al,0x2
c00210ae:	75 16                	jne    c00210c6 <SATAPI::detectMedia()+0xfa>
c00210b0:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00210b5:	75 38                	jne    c00210ef <SATAPI::detectMedia()+0x123>
c00210b7:	83 ec 0c             	sub    esp,0xc
c00210ba:	68 7c 64 02 c0       	push   0xc002647c
c00210bf:	e8 01 bf fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00210c4:	eb 26                	jmp    c00210ec <SATAPI::detectMedia()+0x120>
c00210c6:	84 c0                	test   al,al
c00210c8:	75 25                	jne    c00210ef <SATAPI::detectMedia()+0x123>
c00210ca:	83 ec 0c             	sub    esp,0xc
c00210cd:	68 85 64 02 c0       	push   0xc0026485
c00210d2:	e8 ee be fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00210d7:	83 c4 10             	add    esp,0x10
c00210da:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00210e1:	75 0c                	jne    c00210ef <SATAPI::detectMedia()+0x123>
c00210e3:	83 ec 0c             	sub    esp,0xc
c00210e6:	53                   	push   ebx
c00210e7:	e8 fa fb ff ff       	call   c0020ce6 <SATAPI::diskInserted()>
c00210ec:	83 c4 10             	add    esp,0x10
c00210ef:	83 c4 24             	add    esp,0x24
c00210f2:	5b                   	pop    ebx
c00210f3:	5e                   	pop    esi
c00210f4:	c3                   	ret    
c00210f5:	90                   	nop

c00210f6 <SATAPI::open(int, int, void*)>:
c00210f6:	56                   	push   esi
c00210f7:	53                   	push   ebx
c00210f8:	51                   	push   ecx
c00210f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00210fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021101:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002110b:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0021111:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002111b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002111f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0021129:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002112f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0021136:	e8 33 92 fe ff       	call   c000a36e <Phys::allocatePage()>
c002113b:	89 c6                	mov    esi,eax
c002113d:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0021143:	81 c6 00 10 00 00    	add    esi,0x1000
c0021149:	e8 20 92 fe ff       	call   c000a36e <Phys::allocatePage()>
c002114e:	39 c6                	cmp    esi,eax
c0021150:	74 10                	je     c0021162 <SATAPI::open(int, int, void*)+0x6c>
c0021152:	83 ec 0c             	sub    esp,0xc
c0021155:	68 8f 64 02 c0       	push   0xc002648f
c002115a:	e8 a8 2c ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c002115f:	83 c4 10             	add    esp,0x10
c0021162:	83 ec 0c             	sub    esp,0xc
c0021165:	6a 02                	push   0x2
c0021167:	e8 fd aa fe ff       	call   c000bc69 <Virt::allocateKernelVirtualPages(int)>
c002116c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0021172:	6a 03                	push   0x3
c0021174:	50                   	push   eax
c0021175:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002117b:	ff 35 d4 74 02 c0    	push   DWORD PTR ds:0xc00274d4
c0021181:	e8 4e b1 fe ff       	call   c000c2d4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0021186:	83 c4 14             	add    esp,0x14
c0021189:	68 74 01 00 00       	push   0x174
c002118e:	e8 24 8b fe ff       	call   c0009cb7 <malloc>
c0021193:	83 c4 0c             	add    esp,0xc
c0021196:	89 c6                	mov    esi,eax
c0021198:	6a 00                	push   0x0
c002119a:	68 ff ff ff 7f       	push   0x7fffffff
c002119f:	6a 00                	push   0x0
c00211a1:	6a 00                	push   0x0
c00211a3:	53                   	push   ebx
c00211a4:	68 a5 64 02 c0       	push   0xc00264a5
c00211a9:	50                   	push   eax
c00211aa:	e8 51 e3 fe ff       	call   c000f500 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00211af:	83 c4 14             	add    esp,0x14
c00211b2:	56                   	push   esi
c00211b3:	e8 fe e3 fe ff       	call   c000f5b6 <LogicalDisk::assignDriveLetter()>
c00211b8:	5a                   	pop    edx
c00211b9:	0f be c0             	movsx  eax,al
c00211bc:	59                   	pop    ecx
c00211bd:	50                   	push   eax
c00211be:	68 3b 61 02 c0       	push   0xc002613b
c00211c3:	e8 fd bd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c00211c8:	58                   	pop    eax
c00211c9:	5a                   	pop    edx
c00211ca:	56                   	push   esi
c00211cb:	53                   	push   ebx
c00211cc:	e8 71 d2 fe ff       	call   c000e442 <Device::addChild(Device*)>
c00211d1:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c00211d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00211da:	e8 03 d7 fe ff       	call   c000e8e2 <PhysicalDisk::startCache()>
c00211df:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00211e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00211e9:	e8 de fd ff ff       	call   c0020fcc <SATAPI::detectMedia()>
c00211ee:	83 c4 14             	add    esp,0x14
c00211f1:	31 c0                	xor    eax,eax
c00211f3:	5b                   	pop    ebx
c00211f4:	5e                   	pop    esi
c00211f5:	c3                   	ret    

c00211f6 <SATAPI::read(unsigned long long, int, void*)>:
c00211f6:	55                   	push   ebp
c00211f7:	57                   	push   edi
c00211f8:	56                   	push   esi
c00211f9:	53                   	push   ebx
c00211fa:	83 ec 48             	sub    esp,0x48
c00211fd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0021201:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0021205:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0021209:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002120d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021211:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021215:	68 b3 64 02 c0       	push   0xc00264b3
c002121a:	e8 a6 bd fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c002121f:	83 c4 10             	add    esp,0x10
c0021222:	83 fb 04             	cmp    ebx,0x4
c0021225:	7e 10                	jle    c0021237 <SATAPI::read(unsigned long long, int, void*)+0x41>
c0021227:	83 ec 0c             	sub    esp,0xc
c002122a:	68 c4 64 02 c0       	push   0xc00264c4
c002122f:	e8 d3 2b ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0021234:	83 c4 10             	add    esp,0x10
c0021237:	8d 7c 24 18          	lea    edi,[esp+0x18]
c002123b:	31 ed                	xor    ebp,ebp
c002123d:	b9 03 00 00 00       	mov    ecx,0x3
c0021242:	fc                   	cld    
c0021243:	89 e8                	mov    eax,ebp
c0021245:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021247:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c002124c:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c0021251:	50                   	push   eax
c0021252:	6a 00                	push   0x0
c0021254:	6a 00                	push   0x0
c0021256:	6a 00                	push   0x0
c0021258:	6a 00                	push   0x0
c002125a:	6a 02                	push   0x2
c002125c:	8d 44 24 30          	lea    eax,[esp+0x30]
c0021260:	50                   	push   eax
c0021261:	56                   	push   esi
c0021262:	e8 9b fa ff ff       	call   c0020d02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021267:	8d 7c 24 44          	lea    edi,[esp+0x44]
c002126b:	89 e8                	mov    eax,ebp
c002126d:	b9 03 00 00 00       	mov    ecx,0x3
c0021272:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0021274:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021278:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c002127c:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0021281:	86 e0                	xchg   al,ah
c0021283:	c1 c0 10             	rol    eax,0x10
c0021286:	86 e0                	xchg   al,ah
c0021288:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c002128c:	83 c4 1c             	add    esp,0x1c
c002128f:	53                   	push   ebx
c0021290:	c1 e3 0b             	shl    ebx,0xb
c0021293:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c0021297:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002129b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002129f:	53                   	push   ebx
c00212a0:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00212a4:	50                   	push   eax
c00212a5:	56                   	push   esi
c00212a6:	e8 57 fa ff ff       	call   c0020d02 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00212ab:	83 c4 20             	add    esp,0x20
c00212ae:	85 c0                	test   eax,eax
c00212b0:	74 14                	je     c00212c6 <SATAPI::read(unsigned long long, int, void*)+0xd0>
c00212b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00212b6:	83 ec 0c             	sub    esp,0xc
c00212b9:	56                   	push   esi
c00212ba:	e8 0d fd ff ff       	call   c0020fcc <SATAPI::detectMedia()>
c00212bf:	83 c4 10             	add    esp,0x10
c00212c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00212c6:	83 c4 3c             	add    esp,0x3c
c00212c9:	5b                   	pop    ebx
c00212ca:	5e                   	pop    esi
c00212cb:	5f                   	pop    edi
c00212cc:	5d                   	pop    ebp
c00212cd:	c3                   	ret    

c00212ce <IOAPIC::close(int, int, void*)>:
c00212ce:	b8 00 00 00 00       	mov    eax,0x0
c00212d3:	c3                   	ret    

c00212d4 <apicGetBase()>:
c00212d4:	55                   	push   ebp
c00212d5:	89 e5                	mov    ebp,esp
c00212d7:	83 ec 18             	sub    esp,0x18
c00212da:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c00212df:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00212e5:	83 e0 08             	and    eax,0x8
c00212e8:	84 c0                	test   al,al
c00212ea:	75 07                	jne    c00212f3 <apicGetBase()+0x1f>
c00212ec:	b8 00 00 00 00       	mov    eax,0x0
c00212f1:	eb 21                	jmp    c0021314 <apicGetBase()+0x40>
c00212f3:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c00212f8:	83 ec 08             	sub    esp,0x8
c00212fb:	6a 1b                	push   0x1b
c00212fd:	50                   	push   eax
c00212fe:	e8 63 7f fe ff       	call   c0009266 <Computer::rdmsr(unsigned int)>
c0021303:	83 c4 10             	add    esp,0x10
c0021306:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021309:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002130c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002130f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0021314:	c9                   	leave  
c0021315:	c3                   	ret    

c0021316 <IOAPIC::IOAPIC()>:
c0021316:	83 ec 0c             	sub    esp,0xc
c0021319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002131d:	83 ec 08             	sub    esp,0x8
c0021320:	68 28 65 02 c0       	push   0xc0026528
c0021325:	50                   	push   eax
c0021326:	e8 1b d3 fe ff       	call   c000e646 <Device::Device(char const*)>
c002132b:	83 c4 10             	add    esp,0x10
c002132e:	ba 4c 65 02 c0       	mov    edx,0xc002654c
c0021333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021337:	89 10                	mov    DWORD PTR [eax],edx
c0021339:	90                   	nop
c002133a:	83 c4 0c             	add    esp,0xc
c002133d:	c3                   	ret    

c002133e <apicOpen()>:
c002133e:	55                   	push   ebp
c002133f:	89 e5                	mov    ebp,esp
c0021341:	53                   	push   ebx
c0021342:	83 ec 34             	sub    esp,0x34
c0021345:	a0 40 b3 02 c0       	mov    al,ds:0xc002b340
c002134a:	83 f0 01             	xor    eax,0x1
c002134d:	84 c0                	test   al,al
c002134f:	0f 84 91 00 00 00    	je     c00213e6 <apicOpen()+0xa8>
c0021355:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0021359:	a0 c0 9c 02 c0       	mov    al,ds:0xc0029cc0
c002135e:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c0021361:	73 7c                	jae    c00213df <apicOpen()+0xa1>
c0021363:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002136a:	83 ec 0c             	sub    esp,0xc
c002136d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0021370:	e8 42 89 fe ff       	call   c0009cb7 <malloc>
c0021375:	83 c4 10             	add    esp,0x10
c0021378:	89 c3                	mov    ebx,eax
c002137a:	83 ec 0c             	sub    esp,0xc
c002137d:	53                   	push   ebx
c002137e:	e8 93 ff ff ff       	call   c0021316 <IOAPIC::IOAPIC()>
c0021383:	83 c4 10             	add    esp,0x10
c0021386:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0021389:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002138d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0021390:	89 14 85 20 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4ce0],edx
c0021397:	a1 00 b3 02 c0       	mov    eax,ds:0xc002b300
c002139c:	40                   	inc    eax
c002139d:	a3 00 b3 02 c0       	mov    ds:0xc002b300,eax
c00213a2:	a1 a8 73 02 c0       	mov    eax,ds:0xc00273a8
c00213a7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00213ad:	83 ec 08             	sub    esp,0x8
c00213b0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00213b3:	50                   	push   eax
c00213b4:	e8 89 d0 fe ff       	call   c000e442 <Device::addChild(Device*)>
c00213b9:	83 c4 10             	add    esp,0x10
c00213bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00213bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00213c1:	83 c0 08             	add    eax,0x8
c00213c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00213c6:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c00213ca:	6a 00                	push   0x0
c00213cc:	6a 00                	push   0x0
c00213ce:	52                   	push   edx
c00213cf:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00213d2:	ff d0                	call   eax
c00213d4:	83 c4 10             	add    esp,0x10
c00213d7:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c00213da:	e9 7a ff ff ff       	jmp    c0021359 <apicOpen()+0x1b>
c00213df:	c6 05 40 b3 02 c0 01 	mov    BYTE PTR ds:0xc002b340,0x1
c00213e6:	e8 e9 fe ff ff       	call   c00212d4 <apicGetBase()>
c00213eb:	05 f0 00 00 00       	add    eax,0xf0
c00213f0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00213f3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00213f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00213f8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00213fb:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0021402:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0021409:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002140c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002140f:	89 10                	mov    DWORD PTR [eax],edx
c0021411:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0021418:	a1 10 9c 02 c0       	mov    eax,ds:0xc0029c10
c002141d:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0021420:	7d 70                	jge    c0021492 <apicOpen()+0x154>
c0021422:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021425:	8b 04 85 20 9c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd63e0]
c002142c:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002142f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021432:	8b 04 85 20 9c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd63e0]
c0021439:	c1 e8 08             	shr    eax,0x8
c002143c:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0021440:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021443:	8b 04 85 20 9c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd63e0]
c002144a:	c1 e8 18             	shr    eax,0x18
c002144d:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0021450:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c0021454:	75 37                	jne    c002148d <apicOpen()+0x14f>
c0021456:	e8 79 fe ff ff       	call   c00212d4 <apicGetBase()>
c002145b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c002145f:	75 07                	jne    c0021468 <apicOpen()+0x12a>
c0021461:	ba 60 03 00 00       	mov    edx,0x360
c0021466:	eb 05                	jmp    c002146d <apicOpen()+0x12f>
c0021468:	ba 50 03 00 00       	mov    edx,0x350
c002146d:	01 d0                	add    eax,edx
c002146f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0021472:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0021475:	8b 00                	mov    eax,DWORD PTR [eax]
c0021477:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002147a:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c0021481:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c0021485:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0021488:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002148b:	89 10                	mov    DWORD PTR [eax],edx
c002148d:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c0021490:	eb 86                	jmp    c0021418 <apicOpen()+0xda>
c0021492:	90                   	nop
c0021493:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0021496:	c9                   	leave  
c0021497:	c3                   	ret    

c0021498 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0021498:	55                   	push   ebp
c0021499:	89 e5                	mov    ebp,esp
c002149b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002149e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00214a4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00214a7:	72 1d                	jb     c00214c6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00214a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214ac:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00214b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214b5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c00214bb:	01 d0                	add    eax,edx
c00214bd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00214c0:	73 04                	jae    c00214c6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00214c2:	b0 01                	mov    al,0x1
c00214c4:	eb 02                	jmp    c00214c8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c00214c6:	b0 00                	mov    al,0x0
c00214c8:	5d                   	pop    ebp
c00214c9:	c3                   	ret    

c00214ca <IOAPIC::read(int)>:
c00214ca:	55                   	push   ebp
c00214cb:	89 e5                	mov    ebp,esp
c00214cd:	83 ec 10             	sub    esp,0x10
c00214d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214d3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00214d9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00214dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00214df:	0f b6 d0             	movzx  edx,al
c00214e2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00214e5:	89 10                	mov    DWORD PTR [eax],edx
c00214e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00214ea:	83 c0 10             	add    eax,0x10
c00214ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00214ef:	c9                   	leave  
c00214f0:	c3                   	ret    
c00214f1:	90                   	nop

c00214f2 <IOAPIC::open(int, int, void*)>:
c00214f2:	55                   	push   ebp
c00214f3:	89 e5                	mov    ebp,esp
c00214f5:	57                   	push   edi
c00214f6:	56                   	push   esi
c00214f7:	53                   	push   ebx
c00214f8:	83 ec 0c             	sub    esp,0xc
c00214fb:	83 ec 0c             	sub    esp,0xc
c00214fe:	68 30 65 02 c0       	push   0xc0026530
c0021503:	e8 bd ba fe ff       	call   c000cfc5 <Dbg::kprintf(char const*, ...)>
c0021508:	83 c4 10             	add    esp,0x10
c002150b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002150e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021511:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002151a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021520:	8b 14 85 00 9d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6300]
c0021527:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002152a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021533:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021539:	8b 14 85 80 9d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6280]
c0021540:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021543:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0021549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002154c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0021552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021555:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002155b:	0f b6 f8             	movzx  edi,al
c002155e:	89 d0                	mov    eax,edx
c0021560:	ba 00 00 00 00       	mov    edx,0x0
c0021565:	89 c1                	mov    ecx,eax
c0021567:	80 e5 ff             	and    ch,0xff
c002156a:	89 cb                	mov    ebx,ecx
c002156c:	0f b6 f2             	movzx  esi,dl
c002156f:	89 d8                	mov    eax,ebx
c0021571:	89 f2                	mov    edx,esi
c0021573:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021576:	8d 5f 08             	lea    ebx,[edi+0x8]
c0021579:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002157d:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0021581:	83 e0 00             	and    eax,0x0
c0021584:	09 d0                	or     eax,edx
c0021586:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002158a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002158d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021593:	8d 50 01             	lea    edx,[eax+0x1]
c0021596:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021599:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002159f:	0f b6 d0             	movzx  edx,al
c00215a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215a5:	83 c2 08             	add    edx,0x8
c00215a8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00215ac:	0f b6 c9             	movzx  ecx,cl
c00215af:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00215b5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00215b9:	83 ec 08             	sub    esp,0x8
c00215bc:	6a 01                	push   0x1
c00215be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00215c1:	e8 04 ff ff ff       	call   c00214ca <IOAPIC::read(int)>
c00215c6:	83 c4 10             	add    esp,0x10
c00215c9:	c1 f8 10             	sar    eax,0x10
c00215cc:	0f b6 c0             	movzx  eax,al
c00215cf:	8d 50 01             	lea    edx,[eax+0x1]
c00215d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215d5:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00215db:	b8 00 00 00 00       	mov    eax,0x0
c00215e0:	8d 65 f4             	lea    esp,[ebp-0xc]
c00215e3:	5b                   	pop    ebx
c00215e4:	5e                   	pop    esi
c00215e5:	5f                   	pop    edi
c00215e6:	5d                   	pop    ebp
c00215e7:	c3                   	ret    

c00215e8 <IOAPIC::write(int, int)>:
c00215e8:	55                   	push   ebp
c00215e9:	89 e5                	mov    ebp,esp
c00215eb:	83 ec 10             	sub    esp,0x10
c00215ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00215f1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00215f7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00215fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00215fd:	0f b6 d0             	movzx  edx,al
c0021600:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021603:	89 10                	mov    DWORD PTR [eax],edx
c0021605:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021608:	8d 50 10             	lea    edx,[eax+0x10]
c002160b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002160e:	89 02                	mov    DWORD PTR [edx],eax
c0021610:	90                   	nop
c0021611:	c9                   	leave  
c0021612:	c3                   	ret    
c0021613:	90                   	nop

c0021614 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0021614:	55                   	push   ebp
c0021615:	89 e5                	mov    ebp,esp
c0021617:	53                   	push   ebx
c0021618:	83 ec 2c             	sub    esp,0x2c
c002161b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002161e:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0021621:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0021624:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0021627:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002162a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002162d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0021630:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021633:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0021636:	88 d8                	mov    al,bl
c0021638:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002163b:	88 c8                	mov    al,cl
c002163d:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021640:	88 d0                	mov    al,dl
c0021642:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0021645:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021649:	83 c0 08             	add    eax,0x8
c002164c:	01 c0                	add    eax,eax
c002164e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021651:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0021655:	83 c0 08             	add    eax,0x8
c0021658:	01 c0                	add    eax,eax
c002165a:	40                   	inc    eax
c002165b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002165e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021661:	50                   	push   eax
c0021662:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021665:	e8 60 fe ff ff       	call   c00214ca <IOAPIC::read(int)>
c002166a:	83 c4 08             	add    esp,0x8
c002166d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0021670:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0021677:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002167a:	c1 e0 18             	shl    eax,0x18
c002167d:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0021680:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021683:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0021686:	52                   	push   edx
c0021687:	50                   	push   eax
c0021688:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002168b:	e8 58 ff ff ff       	call   c00215e8 <IOAPIC::write(int, int)>
c0021690:	83 c4 0c             	add    esp,0xc
c0021693:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021696:	50                   	push   eax
c0021697:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002169a:	e8 2b fe ff ff       	call   c00214ca <IOAPIC::read(int)>
c002169f:	83 c4 08             	add    esp,0x8
c00216a2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00216a5:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00216ac:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00216b3:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00216ba:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00216be:	74 09                	je     c00216c9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c00216c0:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00216c7:	eb 07                	jmp    c00216d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c00216c9:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00216d0:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00216d4:	74 09                	je     c00216df <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00216d6:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00216dd:	eb 07                	jmp    c00216e6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00216df:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00216e6:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00216ed:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00216f1:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00216f4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00216f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00216fa:	52                   	push   edx
c00216fb:	50                   	push   eax
c00216fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00216ff:	e8 e4 fe ff ff       	call   c00215e8 <IOAPIC::write(int, int)>
c0021704:	83 c4 0c             	add    esp,0xc
c0021707:	90                   	nop
c0021708:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002170b:	c9                   	leave  
c002170c:	c3                   	ret    
c002170d:	66 90                	xchg   ax,ax
c002170f:	90                   	nop

c0021710 <APICTimer::close(int, int, void*)>:
c0021710:	b8 00 00 00 00       	mov    eax,0x0
c0021715:	c3                   	ret    
c0021716:	66 90                	xchg   ax,ax

c0021718 <apicTimerHandler(regs*, void*)>:
c0021718:	83 ec 0c             	sub    esp,0xc
c002171b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002171f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021721:	b8 10 27 00 00       	mov    eax,0x2710
c0021726:	ba 00 00 00 00       	mov    edx,0x0
c002172b:	f7 f1                	div    ecx
c002172d:	83 ec 0c             	sub    esp,0xc
c0021730:	50                   	push   eax
c0021731:	e8 26 e6 fe ff       	call   c000fd5c <timerHandler(unsigned int)>
c0021736:	83 c4 10             	add    esp,0x10
c0021739:	90                   	nop
c002173a:	83 c4 0c             	add    esp,0xc
c002173d:	c3                   	ret    
c002173e:	66 90                	xchg   ax,ax

c0021740 <APICTimer::open(int, int, void*)>:
c0021740:	83 ec 0c             	sub    esp,0xc
c0021743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021747:	8b 00                	mov    eax,DWORD PTR [eax]
c0021749:	83 c0 24             	add    eax,0x24
c002174c:	8b 00                	mov    eax,DWORD PTR [eax]
c002174e:	83 ec 08             	sub    esp,0x8
c0021751:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021755:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021759:	ff d0                	call   eax
c002175b:	83 c4 10             	add    esp,0x10
c002175e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021762:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0021766:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002176c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021770:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021774:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002177a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002177e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0021784:	83 ec 0c             	sub    esp,0xc
c0021787:	51                   	push   ecx
c0021788:	6a 01                	push   0x1
c002178a:	68 18 17 02 c0       	push   0xc0021718
c002178f:	52                   	push   edx
c0021790:	50                   	push   eax
c0021791:	e8 58 cc fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0021796:	83 c4 20             	add    esp,0x20
c0021799:	89 c2                	mov    edx,eax
c002179b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002179f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00217a5:	b8 00 00 00 00       	mov    eax,0x0
c00217aa:	83 c4 0c             	add    esp,0xc
c00217ad:	c3                   	ret    
c00217ae:	66 90                	xchg   ax,ax

c00217b0 <APICTimer::write(int)>:
c00217b0:	83 ec 0c             	sub    esp,0xc
c00217b3:	83 ec 0c             	sub    esp,0xc
c00217b6:	68 70 65 02 c0       	push   0xc0026570
c00217bb:	e8 47 26 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c00217c0:	83 c4 10             	add    esp,0x10
c00217c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217cb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00217d1:	90                   	nop
c00217d2:	83 c4 0c             	add    esp,0xc
c00217d5:	c3                   	ret    
c00217d6:	66 90                	xchg   ax,ax

c00217d8 <APICTimer::APICTimer()>:
c00217d8:	83 ec 0c             	sub    esp,0xc
c00217db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217df:	83 ec 08             	sub    esp,0x8
c00217e2:	68 80 65 02 c0       	push   0xc0026580
c00217e7:	50                   	push   eax
c00217e8:	e8 a3 e4 fe ff       	call   c000fc90 <Timer::Timer(char const*)>
c00217ed:	83 c4 10             	add    esp,0x10
c00217f0:	ba 94 65 02 c0       	mov    edx,0xc0026594
c00217f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217f9:	89 10                	mov    DWORD PTR [eax],edx
c00217fb:	90                   	nop
c00217fc:	83 c4 0c             	add    esp,0xc
c00217ff:	c3                   	ret    

c0021800 <PIT::write(int)>:
c0021800:	83 ec 10             	sub    esp,0x10
c0021803:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021807:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002180b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021811:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021815:	a3 44 b3 02 c0       	mov    ds:0xc002b344,eax
c002181a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002181f:	99                   	cdq    
c0021820:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0021824:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021828:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002182f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0021834:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0021838:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002183d:	ee                   	out    dx,al
c002183e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021842:	0f b6 c0             	movzx  eax,al
c0021845:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002184c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0021850:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0021854:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0021859:	ee                   	out    dx,al
c002185a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002185e:	c1 f8 08             	sar    eax,0x8
c0021861:	0f b6 c0             	movzx  eax,al
c0021864:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002186b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002186f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0021873:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0021878:	ee                   	out    dx,al
c0021879:	90                   	nop
c002187a:	83 c4 10             	add    esp,0x10
c002187d:	c3                   	ret    
c002187e:	66 90                	xchg   ax,ax

c0021880 <pitHandler(regs*, void*)>:
c0021880:	83 ec 0c             	sub    esp,0xc
c0021883:	8b 0d 44 b3 02 c0    	mov    ecx,DWORD PTR ds:0xc002b344
c0021889:	b8 10 27 00 00       	mov    eax,0x2710
c002188e:	99                   	cdq    
c002188f:	f7 f9                	idiv   ecx
c0021891:	83 ec 0c             	sub    esp,0xc
c0021894:	50                   	push   eax
c0021895:	e8 c2 e4 fe ff       	call   c000fd5c <timerHandler(unsigned int)>
c002189a:	83 c4 10             	add    esp,0x10
c002189d:	90                   	nop
c002189e:	83 c4 0c             	add    esp,0xc
c00218a1:	c3                   	ret    
c00218a2:	66 90                	xchg   ax,ax

c00218a4 <PIT::open(int, int, void*)>:
c00218a4:	83 ec 0c             	sub    esp,0xc
c00218a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00218ad:	83 c0 24             	add    eax,0x24
c00218b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00218b2:	83 ec 08             	sub    esp,0x8
c00218b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218bd:	ff d0                	call   eax
c00218bf:	83 c4 10             	add    esp,0x10
c00218c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218c6:	83 ec 0c             	sub    esp,0xc
c00218c9:	6a 00                	push   0x0
c00218cb:	6a 01                	push   0x1
c00218cd:	68 80 18 02 c0       	push   0xc0021880
c00218d2:	6a 00                	push   0x0
c00218d4:	50                   	push   eax
c00218d5:	e8 14 cb fe ff       	call   c000e3ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00218da:	83 c4 20             	add    esp,0x20
c00218dd:	89 c2                	mov    edx,eax
c00218df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218e3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00218e9:	b8 00 00 00 00       	mov    eax,0x0
c00218ee:	83 c4 0c             	add    esp,0xc
c00218f1:	c3                   	ret    
c00218f2:	66 90                	xchg   ax,ax

c00218f4 <PIT::close(int, int, void*)>:
c00218f4:	83 ec 0c             	sub    esp,0xc
c00218f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218fb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0021905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021909:	6a 01                	push   0x1
c002190b:	68 80 18 02 c0       	push   0xc0021880
c0021910:	6a 00                	push   0x0
c0021912:	50                   	push   eax
c0021913:	e8 0c cb fe ff       	call   c000e424 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0021918:	83 c4 10             	add    esp,0x10
c002191b:	b8 00 00 00 00       	mov    eax,0x0
c0021920:	83 c4 0c             	add    esp,0xc
c0021923:	c3                   	ret    

c0021924 <PIT::PIT()>:
c0021924:	83 ec 0c             	sub    esp,0xc
c0021927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002192b:	83 ec 08             	sub    esp,0x8
c002192e:	68 bc 65 02 c0       	push   0xc00265bc
c0021933:	50                   	push   eax
c0021934:	e8 57 e3 fe ff       	call   c000fc90 <Timer::Timer(char const*)>
c0021939:	83 c4 10             	add    esp,0x10
c002193c:	ba e4 65 02 c0       	mov    edx,0xc00265e4
c0021941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021945:	89 10                	mov    DWORD PTR [eax],edx
c0021947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002194b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021951:	0f b6 d0             	movzx  edx,al
c0021954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021958:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002195f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021963:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021969:	0f b6 d0             	movzx  edx,al
c002196c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021970:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0021975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021979:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002197f:	8d 50 01             	lea    edx,[eax+0x1]
c0021982:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021986:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002198c:	0f b6 d0             	movzx  edx,al
c002198f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021993:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021997:	83 e1 3f             	and    ecx,0x3f
c002199a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002199e:	90                   	nop
c002199f:	83 c4 0c             	add    esp,0xc
c00219a2:	c3                   	ret    
c00219a3:	66 90                	xchg   ax,ax
c00219a5:	66 90                	xchg   ax,ax
c00219a7:	66 90                	xchg   ax,ax
c00219a9:	66 90                	xchg   ax,ax
c00219ab:	66 90                	xchg   ax,ax
c00219ad:	66 90                	xchg   ax,ax
c00219af:	90                   	nop

c00219b0 <avxDetect>:
c00219b0:	b8 01 00 00 00       	mov    eax,0x1
c00219b5:	0f a2                	cpuid  
c00219b7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c00219bd:	74 15                	je     c00219d4 <avxDetect.noAVX>
c00219bf:	b8 01 00 00 00       	mov    eax,0x1
c00219c4:	0f a2                	cpuid  
c00219c6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c00219cc:	74 06                	je     c00219d4 <avxDetect.noAVX>
c00219ce:	b8 01 00 00 00       	mov    eax,0x1
c00219d3:	c3                   	ret    

c00219d4 <avxDetect.noAVX>:
c00219d4:	b8 00 00 00 00       	mov    eax,0x0
c00219d9:	c3                   	ret    

c00219da <avxSave>:
c00219da:	53                   	push   ebx
c00219db:	52                   	push   edx
c00219dc:	31 c0                	xor    eax,eax
c00219de:	48                   	dec    eax
c00219df:	89 c2                	mov    edx,eax
c00219e1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00219e5:	0f ae 23             	xsave  [ebx]
c00219e8:	5a                   	pop    edx
c00219e9:	5b                   	pop    ebx
c00219ea:	c3                   	ret    

c00219eb <avxLoad>:
c00219eb:	53                   	push   ebx
c00219ec:	52                   	push   edx
c00219ed:	31 c0                	xor    eax,eax
c00219ef:	48                   	dec    eax
c00219f0:	89 c2                	mov    edx,eax
c00219f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00219f6:	0f ae 2b             	xrstor [ebx]
c00219f9:	5a                   	pop    edx
c00219fa:	5b                   	pop    ebx
c00219fb:	c3                   	ret    

c00219fc <avxInit>:
c00219fc:	e8 77 00 00 00       	call   c0021a78 <sseInit>
c0021a01:	50                   	push   eax
c0021a02:	51                   	push   ecx
c0021a03:	0f 20 e0             	mov    eax,cr4
c0021a06:	0d 00 00 04 00       	or     eax,0x40000
c0021a0b:	0f 22 e0             	mov    cr4,eax
c0021a0e:	31 c9                	xor    ecx,ecx
c0021a10:	0f 01 d0             	xgetbv 
c0021a13:	0d 07 00 00 00       	or     eax,0x7
c0021a18:	0f 01 d1             	xsetbv 
c0021a1b:	59                   	pop    ecx
c0021a1c:	58                   	pop    eax
c0021a1d:	c3                   	ret    

c0021a1e <avxClose>:
c0021a1e:	c3                   	ret    

c0021a1f <wouldSheSayYes>:
c0021a1f:	c3                   	ret    
c0021a20:	49                   	dec    ecx
c0021a21:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0021a25:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0021a29:	75 20                	jne    c0021a4b <retry+0x6>
c0021a2b:	4e                   	dec    esi
c0021a2c:	79 61                	jns    c0021a8f <sseClose+0x7>
c0021a2e:	68 2e 2e 2e 00       	push   0x2e2e2e
c0021a33:	66 90                	xchg   ax,ax
c0021a35:	66 90                	xchg   ax,ax
c0021a37:	66 90                	xchg   ax,ax
c0021a39:	66 90                	xchg   ax,ax
c0021a3b:	66 90                	xchg   ax,ax
c0021a3d:	66 90                	xchg   ax,ax
c0021a3f:	90                   	nop

c0021a40 <i386GetRDRAND>:
c0021a40:	b9 64 00 00 00       	mov    ecx,0x64

c0021a45 <retry>:
c0021a45:	0f c7 f0             	rdrand eax
c0021a48:	72 05                	jb     c0021a4f <retry.done>
c0021a4a:	e2 f9                	loop   c0021a45 <retry>

c0021a4c <retry.fail>:
c0021a4c:	31 c0                	xor    eax,eax
c0021a4e:	c3                   	ret    

c0021a4f <retry.done>:
c0021a4f:	c3                   	ret    

c0021a50 <absolutelyNoChanceInHell>:
c0021a50:	b8 01 00 00 00       	mov    eax,0x1
c0021a55:	0f a2                	cpuid  
c0021a57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0021a5d:	74 06                	je     c0021a65 <sseDetect.noSSE>
c0021a5f:	b8 01 00 00 00       	mov    eax,0x1
c0021a64:	c3                   	ret    

c0021a65 <sseDetect.noSSE>:
c0021a65:	31 c0                	xor    eax,eax
c0021a67:	c3                   	ret    

c0021a68 <sseSave>:
c0021a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a6c:	0f ae 00             	fxsave [eax]
c0021a6f:	c3                   	ret    

c0021a70 <sseLoad>:
c0021a70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a74:	0f ae 08             	fxrstor [eax]
c0021a77:	c3                   	ret    

c0021a78 <sseInit>:
c0021a78:	e8 42 00 00 00       	call   c0021abf <x87Init>
c0021a7d:	0f 20 e0             	mov    eax,cr4
c0021a80:	66 0d 00 06          	or     ax,0x600
c0021a84:	0f 22 e0             	mov    cr4,eax
c0021a87:	c3                   	ret    

c0021a88 <sseClose>:
c0021a88:	c3                   	ret    
c0021a89:	66 90                	xchg   ax,ax
c0021a8b:	66 90                	xchg   ax,ax
c0021a8d:	66 90                	xchg   ax,ax
c0021a8f:	90                   	nop

c0021a90 <value_37F>:
c0021a90:	7f 03                	jg     c0021a95 <value_37A+0x1>

c0021a92 <value_37E>:
c0021a92:	7e 03                	jle    c0021a97 <x87Detect+0x1>

c0021a94 <value_37A>:
c0021a94:	7a 03                	jp     c0021a99 <x87Detect+0x3>

c0021a96 <x87Detect>:
c0021a96:	b8 01 00 00 00       	mov    eax,0x1
c0021a9b:	0f a2                	cpuid  
c0021a9d:	f7 c2 01 00 00 00    	test   edx,0x1
c0021aa3:	74 06                	je     c0021aab <x87Detect.nox87>
c0021aa5:	b8 01 00 00 00       	mov    eax,0x1
c0021aaa:	c3                   	ret    

c0021aab <x87Detect.nox87>:
c0021aab:	b8 00 00 00 00       	mov    eax,0x0
c0021ab0:	c3                   	ret    

c0021ab1 <x87Save>:
c0021ab1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ab5:	dd 30                	fnsave [eax]
c0021ab7:	c3                   	ret    

c0021ab8 <x87Load>:
c0021ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021abc:	dd 20                	frstor [eax]
c0021abe:	c3                   	ret    

c0021abf <x87Init>:
c0021abf:	0f 20 c0             	mov    eax,cr0
c0021ac2:	66 25 fb ff          	and    ax,0xfffb
c0021ac6:	66 0d 22 00          	or     ax,0x22
c0021aca:	0f 22 c0             	mov    cr0,eax
c0021acd:	db e3                	fninit 
c0021acf:	0f 06                	clts   
c0021ad1:	d9 2d 94 1a 02 c0    	fldcw  WORD PTR ds:0xc0021a94
c0021ad7:	c3                   	ret    

c0021ad8 <x87Close>:
c0021ad8:	c3                   	ret    
c0021ad9:	66 90                	xchg   ax,ax
c0021adb:	90                   	nop

c0021adc <__do_global_ctors_aux>:
c0021adc:	a1 a0 2a 02 c0       	mov    eax,ds:0xc0022aa0
c0021ae1:	83 f8 ff             	cmp    eax,0xffffffff
c0021ae4:	74 1a                	je     c0021b00 <__do_global_ctors_aux+0x24>
c0021ae6:	55                   	push   ebp
c0021ae7:	89 e5                	mov    ebp,esp
c0021ae9:	53                   	push   ebx
c0021aea:	52                   	push   edx
c0021aeb:	bb a0 2a 02 c0       	mov    ebx,0xc0022aa0
c0021af0:	ff d0                	call   eax
c0021af2:	83 eb 04             	sub    ebx,0x4
c0021af5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021af7:	83 f8 ff             	cmp    eax,0xffffffff
c0021afa:	75 f4                	jne    c0021af0 <__do_global_ctors_aux+0x14>
c0021afc:	58                   	pop    eax
c0021afd:	5b                   	pop    ebx
c0021afe:	5d                   	pop    ebp
c0021aff:	c3                   	ret    
c0021b00:	c3                   	ret    
c0021b01:	66 90                	xchg   ax,ax
c0021b03:	90                   	nop

c0021b04 <__divdi3>:
c0021b04:	55                   	push   ebp
c0021b05:	57                   	push   edi
c0021b06:	56                   	push   esi
c0021b07:	53                   	push   ebx
c0021b08:	83 ec 1c             	sub    esp,0x1c
c0021b0b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021b0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021b13:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021b16:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021b1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021b1e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021b22:	85 db                	test   ebx,ebx
c0021b24:	0f 88 8e 00 00 00    	js     c0021bb8 <__divdi3+0xb4>
c0021b2a:	89 dd                	mov    ebp,ebx
c0021b2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021b34:	89 d3                	mov    ebx,edx
c0021b36:	85 d2                	test   edx,edx
c0021b38:	79 0d                	jns    c0021b47 <__divdi3+0x43>
c0021b3a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021b3e:	f7 d8                	neg    eax
c0021b40:	83 d2 00             	adc    edx,0x0
c0021b43:	f7 da                	neg    edx
c0021b45:	89 d3                	mov    ebx,edx
c0021b47:	89 c7                	mov    edi,eax
c0021b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b4c:	85 db                	test   ebx,ebx
c0021b4e:	75 48                	jne    c0021b98 <__divdi3+0x94>
c0021b50:	39 ef                	cmp    edi,ebp
c0021b52:	76 24                	jbe    c0021b78 <__divdi3+0x74>
c0021b54:	89 ea                	mov    edx,ebp
c0021b56:	f7 f7                	div    edi
c0021b58:	89 c1                	mov    ecx,eax
c0021b5a:	31 f6                	xor    esi,esi
c0021b5c:	89 c8                	mov    eax,ecx
c0021b5e:	89 f2                	mov    edx,esi
c0021b60:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021b64:	85 c9                	test   ecx,ecx
c0021b66:	74 07                	je     c0021b6f <__divdi3+0x6b>
c0021b68:	f7 d8                	neg    eax
c0021b6a:	83 d2 00             	adc    edx,0x0
c0021b6d:	f7 da                	neg    edx
c0021b6f:	83 c4 1c             	add    esp,0x1c
c0021b72:	5b                   	pop    ebx
c0021b73:	5e                   	pop    esi
c0021b74:	5f                   	pop    edi
c0021b75:	5d                   	pop    ebp
c0021b76:	c3                   	ret    
c0021b77:	90                   	nop
c0021b78:	85 ff                	test   edi,edi
c0021b7a:	75 0b                	jne    c0021b87 <__divdi3+0x83>
c0021b7c:	b8 01 00 00 00       	mov    eax,0x1
c0021b81:	31 d2                	xor    edx,edx
c0021b83:	f7 f3                	div    ebx
c0021b85:	89 c7                	mov    edi,eax
c0021b87:	31 d2                	xor    edx,edx
c0021b89:	89 e8                	mov    eax,ebp
c0021b8b:	f7 f7                	div    edi
c0021b8d:	89 c6                	mov    esi,eax
c0021b8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021b92:	f7 f7                	div    edi
c0021b94:	89 c1                	mov    ecx,eax
c0021b96:	eb c4                	jmp    c0021b5c <__divdi3+0x58>
c0021b98:	39 eb                	cmp    ebx,ebp
c0021b9a:	77 3c                	ja     c0021bd8 <__divdi3+0xd4>
c0021b9c:	0f bd f3             	bsr    esi,ebx
c0021b9f:	83 f6 1f             	xor    esi,0x1f
c0021ba2:	75 40                	jne    c0021be4 <__divdi3+0xe0>
c0021ba4:	39 eb                	cmp    ebx,ebp
c0021ba6:	72 09                	jb     c0021bb1 <__divdi3+0xad>
c0021ba8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021bab:	0f 87 97 00 00 00    	ja     c0021c48 <__divdi3+0x144>
c0021bb1:	b9 01 00 00 00       	mov    ecx,0x1
c0021bb6:	eb a4                	jmp    c0021b5c <__divdi3+0x58>
c0021bb8:	f7 d9                	neg    ecx
c0021bba:	83 d3 00             	adc    ebx,0x0
c0021bbd:	f7 db                	neg    ebx
c0021bbf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0021bc2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0021bc6:	89 dd                	mov    ebp,ebx
c0021bc8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0021bd0:	e9 5f ff ff ff       	jmp    c0021b34 <__divdi3+0x30>
c0021bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0021bd8:	31 f6                	xor    esi,esi
c0021bda:	31 c9                	xor    ecx,ecx
c0021bdc:	e9 7b ff ff ff       	jmp    c0021b5c <__divdi3+0x58>
c0021be1:	8d 76 00             	lea    esi,[esi+0x0]
c0021be4:	b8 20 00 00 00       	mov    eax,0x20
c0021be9:	29 f0                	sub    eax,esi
c0021beb:	89 f1                	mov    ecx,esi
c0021bed:	d3 e3                	shl    ebx,cl
c0021bef:	89 fa                	mov    edx,edi
c0021bf1:	88 c1                	mov    cl,al
c0021bf3:	d3 ea                	shr    edx,cl
c0021bf5:	09 da                	or     edx,ebx
c0021bf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021bfb:	89 f1                	mov    ecx,esi
c0021bfd:	d3 e7                	shl    edi,cl
c0021bff:	89 eb                	mov    ebx,ebp
c0021c01:	88 c1                	mov    cl,al
c0021c03:	d3 eb                	shr    ebx,cl
c0021c05:	89 f1                	mov    ecx,esi
c0021c07:	d3 e5                	shl    ebp,cl
c0021c09:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021c0c:	88 c1                	mov    cl,al
c0021c0e:	d3 ea                	shr    edx,cl
c0021c10:	09 d5                	or     ebp,edx
c0021c12:	89 e8                	mov    eax,ebp
c0021c14:	89 da                	mov    edx,ebx
c0021c16:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0021c1a:	89 d3                	mov    ebx,edx
c0021c1c:	89 c5                	mov    ebp,eax
c0021c1e:	f7 e7                	mul    edi
c0021c20:	39 d3                	cmp    ebx,edx
c0021c22:	72 18                	jb     c0021c3c <__divdi3+0x138>
c0021c24:	74 0a                	je     c0021c30 <__divdi3+0x12c>
c0021c26:	89 e9                	mov    ecx,ebp
c0021c28:	31 f6                	xor    esi,esi
c0021c2a:	e9 2d ff ff ff       	jmp    c0021b5c <__divdi3+0x58>
c0021c2f:	90                   	nop
c0021c30:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021c33:	89 f1                	mov    ecx,esi
c0021c35:	d3 e7                	shl    edi,cl
c0021c37:	39 c7                	cmp    edi,eax
c0021c39:	73 eb                	jae    c0021c26 <__divdi3+0x122>
c0021c3b:	90                   	nop
c0021c3c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021c3f:	31 f6                	xor    esi,esi
c0021c41:	e9 16 ff ff ff       	jmp    c0021b5c <__divdi3+0x58>
c0021c46:	66 90                	xchg   ax,ax
c0021c48:	31 c9                	xor    ecx,ecx
c0021c4a:	e9 0d ff ff ff       	jmp    c0021b5c <__divdi3+0x58>
c0021c4f:	90                   	nop

c0021c50 <__moddi3>:
c0021c50:	55                   	push   ebp
c0021c51:	57                   	push   edi
c0021c52:	56                   	push   esi
c0021c53:	53                   	push   ebx
c0021c54:	83 ec 2c             	sub    esp,0x2c
c0021c57:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0021c5b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021c5f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021c63:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0021c67:	85 db                	test   ebx,ebx
c0021c69:	0f 88 85 00 00 00    	js     c0021cf4 <__moddi3+0xa4>
c0021c6f:	89 de                	mov    esi,ebx
c0021c71:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021c79:	89 d7                	mov    edi,edx
c0021c7b:	85 d2                	test   edx,edx
c0021c7d:	79 09                	jns    c0021c88 <__moddi3+0x38>
c0021c7f:	f7 d8                	neg    eax
c0021c81:	83 d2 00             	adc    edx,0x0
c0021c84:	f7 da                	neg    edx
c0021c86:	89 d7                	mov    edi,edx
c0021c88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021c8c:	89 cd                	mov    ebp,ecx
c0021c8e:	85 ff                	test   edi,edi
c0021c90:	75 52                	jne    c0021ce4 <__moddi3+0x94>
c0021c92:	89 c3                	mov    ebx,eax
c0021c94:	39 f0                	cmp    eax,esi
c0021c96:	76 24                	jbe    c0021cbc <__moddi3+0x6c>
c0021c98:	89 c8                	mov    eax,ecx
c0021c9a:	89 f2                	mov    edx,esi
c0021c9c:	f7 f3                	div    ebx
c0021c9e:	89 d6                	mov    esi,edx
c0021ca0:	89 f0                	mov    eax,esi
c0021ca2:	31 d2                	xor    edx,edx
c0021ca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021ca8:	85 c9                	test   ecx,ecx
c0021caa:	74 07                	je     c0021cb3 <__moddi3+0x63>
c0021cac:	f7 d8                	neg    eax
c0021cae:	83 d2 00             	adc    edx,0x0
c0021cb1:	f7 da                	neg    edx
c0021cb3:	83 c4 2c             	add    esp,0x2c
c0021cb6:	5b                   	pop    ebx
c0021cb7:	5e                   	pop    esi
c0021cb8:	5f                   	pop    edi
c0021cb9:	5d                   	pop    ebp
c0021cba:	c3                   	ret    
c0021cbb:	90                   	nop
c0021cbc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021cc0:	85 db                	test   ebx,ebx
c0021cc2:	75 0d                	jne    c0021cd1 <__moddi3+0x81>
c0021cc4:	b8 01 00 00 00       	mov    eax,0x1
c0021cc9:	31 d2                	xor    edx,edx
c0021ccb:	f7 f7                	div    edi
c0021ccd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021cd1:	89 f0                	mov    eax,esi
c0021cd3:	31 d2                	xor    edx,edx
c0021cd5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021cd9:	f7 f7                	div    edi
c0021cdb:	89 e8                	mov    eax,ebp
c0021cdd:	f7 f7                	div    edi
c0021cdf:	89 d6                	mov    esi,edx
c0021ce1:	eb bd                	jmp    c0021ca0 <__moddi3+0x50>
c0021ce3:	90                   	nop
c0021ce4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021ce8:	39 f7                	cmp    edi,esi
c0021cea:	76 20                	jbe    c0021d0c <__moddi3+0xbc>
c0021cec:	89 c8                	mov    eax,ecx
c0021cee:	89 f2                	mov    edx,esi
c0021cf0:	eb b2                	jmp    c0021ca4 <__moddi3+0x54>
c0021cf2:	66 90                	xchg   ax,ax
c0021cf4:	f7 d9                	neg    ecx
c0021cf6:	83 d3 00             	adc    ebx,0x0
c0021cf9:	f7 db                	neg    ebx
c0021cfb:	89 de                	mov    esi,ebx
c0021cfd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021d05:	e9 6f ff ff ff       	jmp    c0021c79 <__moddi3+0x29>
c0021d0a:	66 90                	xchg   ax,ax
c0021d0c:	0f bd c7             	bsr    eax,edi
c0021d0f:	83 f0 1f             	xor    eax,0x1f
c0021d12:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021d16:	75 24                	jne    c0021d3c <__moddi3+0xec>
c0021d18:	39 f7                	cmp    edi,esi
c0021d1a:	72 06                	jb     c0021d22 <__moddi3+0xd2>
c0021d1c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021d20:	77 0c                	ja     c0021d2e <__moddi3+0xde>
c0021d22:	89 e9                	mov    ecx,ebp
c0021d24:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0021d28:	19 fe                	sbb    esi,edi
c0021d2a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021d2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021d32:	89 f2                	mov    edx,esi
c0021d34:	e9 6b ff ff ff       	jmp    c0021ca4 <__moddi3+0x54>
c0021d39:	8d 76 00             	lea    esi,[esi+0x0]
c0021d3c:	b8 20 00 00 00       	mov    eax,0x20
c0021d41:	89 c2                	mov    edx,eax
c0021d43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0021d47:	29 da                	sub    edx,ebx
c0021d49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021d4d:	88 d9                	mov    cl,bl
c0021d4f:	d3 e7                	shl    edi,cl
c0021d51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d55:	88 d1                	mov    cl,dl
c0021d57:	d3 e8                	shr    eax,cl
c0021d59:	09 c7                	or     edi,eax
c0021d5b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021d5f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021d63:	89 d8                	mov    eax,ebx
c0021d65:	88 d9                	mov    cl,bl
c0021d67:	d3 e7                	shl    edi,cl
c0021d69:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021d6d:	89 f3                	mov    ebx,esi
c0021d6f:	88 d1                	mov    cl,dl
c0021d71:	d3 eb                	shr    ebx,cl
c0021d73:	89 c7                	mov    edi,eax
c0021d75:	88 c1                	mov    cl,al
c0021d77:	d3 e6                	shl    esi,cl
c0021d79:	89 e8                	mov    eax,ebp
c0021d7b:	88 d1                	mov    cl,dl
c0021d7d:	d3 e8                	shr    eax,cl
c0021d7f:	09 f0                	or     eax,esi
c0021d81:	89 f9                	mov    ecx,edi
c0021d83:	d3 e5                	shl    ebp,cl
c0021d85:	89 da                	mov    edx,ebx
c0021d87:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0021d8b:	89 d3                	mov    ebx,edx
c0021d8d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021d91:	89 c6                	mov    esi,eax
c0021d93:	89 d1                	mov    ecx,edx
c0021d95:	39 d3                	cmp    ebx,edx
c0021d97:	72 27                	jb     c0021dc0 <__moddi3+0x170>
c0021d99:	74 21                	je     c0021dbc <__moddi3+0x16c>
c0021d9b:	29 f5                	sub    ebp,esi
c0021d9d:	19 cb                	sbb    ebx,ecx
c0021d9f:	89 de                	mov    esi,ebx
c0021da1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0021da5:	d3 e6                	shl    esi,cl
c0021da7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0021dab:	89 f9                	mov    ecx,edi
c0021dad:	d3 ed                	shr    ebp,cl
c0021daf:	09 ee                	or     esi,ebp
c0021db1:	89 f0                	mov    eax,esi
c0021db3:	d3 eb                	shr    ebx,cl
c0021db5:	89 da                	mov    edx,ebx
c0021db7:	e9 e8 fe ff ff       	jmp    c0021ca4 <__moddi3+0x54>
c0021dbc:	39 c5                	cmp    ebp,eax
c0021dbe:	73 db                	jae    c0021d9b <__moddi3+0x14b>
c0021dc0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021dc4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0021dc8:	89 d1                	mov    ecx,edx
c0021dca:	89 c6                	mov    esi,eax
c0021dcc:	eb cd                	jmp    c0021d9b <__moddi3+0x14b>
c0021dce:	66 90                	xchg   ax,ax

c0021dd0 <__udivdi3>:
c0021dd0:	55                   	push   ebp
c0021dd1:	57                   	push   edi
c0021dd2:	56                   	push   esi
c0021dd3:	53                   	push   ebx
c0021dd4:	83 ec 1c             	sub    esp,0x1c
c0021dd7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0021ddb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021ddf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021de3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021de7:	85 d2                	test   edx,edx
c0021de9:	75 41                	jne    c0021e2c <__udivdi3+0x5c>
c0021deb:	39 f7                	cmp    edi,esi
c0021ded:	76 15                	jbe    c0021e04 <__udivdi3+0x34>
c0021def:	89 e8                	mov    eax,ebp
c0021df1:	89 f2                	mov    edx,esi
c0021df3:	f7 f7                	div    edi
c0021df5:	31 db                	xor    ebx,ebx
c0021df7:	89 da                	mov    edx,ebx
c0021df9:	83 c4 1c             	add    esp,0x1c
c0021dfc:	5b                   	pop    ebx
c0021dfd:	5e                   	pop    esi
c0021dfe:	5f                   	pop    edi
c0021dff:	5d                   	pop    ebp
c0021e00:	c3                   	ret    
c0021e01:	8d 76 00             	lea    esi,[esi+0x0]
c0021e04:	89 f9                	mov    ecx,edi
c0021e06:	85 ff                	test   edi,edi
c0021e08:	75 0b                	jne    c0021e15 <__udivdi3+0x45>
c0021e0a:	b8 01 00 00 00       	mov    eax,0x1
c0021e0f:	31 d2                	xor    edx,edx
c0021e11:	f7 f7                	div    edi
c0021e13:	89 c1                	mov    ecx,eax
c0021e15:	31 d2                	xor    edx,edx
c0021e17:	89 f0                	mov    eax,esi
c0021e19:	f7 f1                	div    ecx
c0021e1b:	89 c3                	mov    ebx,eax
c0021e1d:	89 e8                	mov    eax,ebp
c0021e1f:	f7 f1                	div    ecx
c0021e21:	89 da                	mov    edx,ebx
c0021e23:	83 c4 1c             	add    esp,0x1c
c0021e26:	5b                   	pop    ebx
c0021e27:	5e                   	pop    esi
c0021e28:	5f                   	pop    edi
c0021e29:	5d                   	pop    ebp
c0021e2a:	c3                   	ret    
c0021e2b:	90                   	nop
c0021e2c:	39 f2                	cmp    edx,esi
c0021e2e:	77 1c                	ja     c0021e4c <__udivdi3+0x7c>
c0021e30:	0f bd da             	bsr    ebx,edx
c0021e33:	83 f3 1f             	xor    ebx,0x1f
c0021e36:	75 24                	jne    c0021e5c <__udivdi3+0x8c>
c0021e38:	39 f2                	cmp    edx,esi
c0021e3a:	72 08                	jb     c0021e44 <__udivdi3+0x74>
c0021e3c:	39 ef                	cmp    edi,ebp
c0021e3e:	0f 87 84 00 00 00    	ja     c0021ec8 <__udivdi3+0xf8>
c0021e44:	b8 01 00 00 00       	mov    eax,0x1
c0021e49:	eb ac                	jmp    c0021df7 <__udivdi3+0x27>
c0021e4b:	90                   	nop
c0021e4c:	31 db                	xor    ebx,ebx
c0021e4e:	31 c0                	xor    eax,eax
c0021e50:	89 da                	mov    edx,ebx
c0021e52:	83 c4 1c             	add    esp,0x1c
c0021e55:	5b                   	pop    ebx
c0021e56:	5e                   	pop    esi
c0021e57:	5f                   	pop    edi
c0021e58:	5d                   	pop    ebp
c0021e59:	c3                   	ret    
c0021e5a:	66 90                	xchg   ax,ax
c0021e5c:	b8 20 00 00 00       	mov    eax,0x20
c0021e61:	29 d8                	sub    eax,ebx
c0021e63:	88 d9                	mov    cl,bl
c0021e65:	d3 e2                	shl    edx,cl
c0021e67:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021e6b:	89 fa                	mov    edx,edi
c0021e6d:	88 c1                	mov    cl,al
c0021e6f:	d3 ea                	shr    edx,cl
c0021e71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e75:	09 d1                	or     ecx,edx
c0021e77:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021e7b:	88 d9                	mov    cl,bl
c0021e7d:	d3 e7                	shl    edi,cl
c0021e7f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021e83:	89 f7                	mov    edi,esi
c0021e85:	88 c1                	mov    cl,al
c0021e87:	d3 ef                	shr    edi,cl
c0021e89:	88 d9                	mov    cl,bl
c0021e8b:	d3 e6                	shl    esi,cl
c0021e8d:	89 ea                	mov    edx,ebp
c0021e8f:	88 c1                	mov    cl,al
c0021e91:	d3 ea                	shr    edx,cl
c0021e93:	09 d6                	or     esi,edx
c0021e95:	89 f0                	mov    eax,esi
c0021e97:	89 fa                	mov    edx,edi
c0021e99:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021e9d:	89 d7                	mov    edi,edx
c0021e9f:	89 c6                	mov    esi,eax
c0021ea1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021ea5:	39 d7                	cmp    edi,edx
c0021ea7:	72 13                	jb     c0021ebc <__udivdi3+0xec>
c0021ea9:	74 09                	je     c0021eb4 <__udivdi3+0xe4>
c0021eab:	89 f0                	mov    eax,esi
c0021ead:	31 db                	xor    ebx,ebx
c0021eaf:	e9 43 ff ff ff       	jmp    c0021df7 <__udivdi3+0x27>
c0021eb4:	88 d9                	mov    cl,bl
c0021eb6:	d3 e5                	shl    ebp,cl
c0021eb8:	39 c5                	cmp    ebp,eax
c0021eba:	73 ef                	jae    c0021eab <__udivdi3+0xdb>
c0021ebc:	8d 46 ff             	lea    eax,[esi-0x1]
c0021ebf:	31 db                	xor    ebx,ebx
c0021ec1:	e9 31 ff ff ff       	jmp    c0021df7 <__udivdi3+0x27>
c0021ec6:	66 90                	xchg   ax,ax
c0021ec8:	31 c0                	xor    eax,eax
c0021eca:	e9 28 ff ff ff       	jmp    c0021df7 <__udivdi3+0x27>
c0021ecf:	90                   	nop

c0021ed0 <__umoddi3>:
c0021ed0:	55                   	push   ebp
c0021ed1:	57                   	push   edi
c0021ed2:	56                   	push   esi
c0021ed3:	53                   	push   ebx
c0021ed4:	83 ec 1c             	sub    esp,0x1c
c0021ed7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021edb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021edf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021ee3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021ee7:	89 da                	mov    edx,ebx
c0021ee9:	85 c0                	test   eax,eax
c0021eeb:	75 37                	jne    c0021f24 <__umoddi3+0x54>
c0021eed:	39 df                	cmp    edi,ebx
c0021eef:	76 13                	jbe    c0021f04 <__umoddi3+0x34>
c0021ef1:	89 f0                	mov    eax,esi
c0021ef3:	f7 f7                	div    edi
c0021ef5:	89 d0                	mov    eax,edx
c0021ef7:	31 d2                	xor    edx,edx
c0021ef9:	83 c4 1c             	add    esp,0x1c
c0021efc:	5b                   	pop    ebx
c0021efd:	5e                   	pop    esi
c0021efe:	5f                   	pop    edi
c0021eff:	5d                   	pop    ebp
c0021f00:	c3                   	ret    
c0021f01:	8d 76 00             	lea    esi,[esi+0x0]
c0021f04:	89 fd                	mov    ebp,edi
c0021f06:	85 ff                	test   edi,edi
c0021f08:	75 0b                	jne    c0021f15 <__umoddi3+0x45>
c0021f0a:	b8 01 00 00 00       	mov    eax,0x1
c0021f0f:	31 d2                	xor    edx,edx
c0021f11:	f7 f7                	div    edi
c0021f13:	89 c5                	mov    ebp,eax
c0021f15:	89 d8                	mov    eax,ebx
c0021f17:	31 d2                	xor    edx,edx
c0021f19:	f7 f5                	div    ebp
c0021f1b:	89 f0                	mov    eax,esi
c0021f1d:	f7 f5                	div    ebp
c0021f1f:	89 d0                	mov    eax,edx
c0021f21:	eb d4                	jmp    c0021ef7 <__umoddi3+0x27>
c0021f23:	90                   	nop
c0021f24:	89 f1                	mov    ecx,esi
c0021f26:	39 d8                	cmp    eax,ebx
c0021f28:	76 0a                	jbe    c0021f34 <__umoddi3+0x64>
c0021f2a:	89 f0                	mov    eax,esi
c0021f2c:	83 c4 1c             	add    esp,0x1c
c0021f2f:	5b                   	pop    ebx
c0021f30:	5e                   	pop    esi
c0021f31:	5f                   	pop    edi
c0021f32:	5d                   	pop    ebp
c0021f33:	c3                   	ret    
c0021f34:	0f bd e8             	bsr    ebp,eax
c0021f37:	83 f5 1f             	xor    ebp,0x1f
c0021f3a:	75 1c                	jne    c0021f58 <__umoddi3+0x88>
c0021f3c:	39 d8                	cmp    eax,ebx
c0021f3e:	72 04                	jb     c0021f44 <__umoddi3+0x74>
c0021f40:	39 f7                	cmp    edi,esi
c0021f42:	77 08                	ja     c0021f4c <__umoddi3+0x7c>
c0021f44:	89 da                	mov    edx,ebx
c0021f46:	29 fe                	sub    esi,edi
c0021f48:	19 c2                	sbb    edx,eax
c0021f4a:	89 f1                	mov    ecx,esi
c0021f4c:	89 c8                	mov    eax,ecx
c0021f4e:	83 c4 1c             	add    esp,0x1c
c0021f51:	5b                   	pop    ebx
c0021f52:	5e                   	pop    esi
c0021f53:	5f                   	pop    edi
c0021f54:	5d                   	pop    ebp
c0021f55:	c3                   	ret    
c0021f56:	66 90                	xchg   ax,ax
c0021f58:	ba 20 00 00 00       	mov    edx,0x20
c0021f5d:	29 ea                	sub    edx,ebp
c0021f5f:	89 e9                	mov    ecx,ebp
c0021f61:	d3 e0                	shl    eax,cl
c0021f63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f67:	89 f8                	mov    eax,edi
c0021f69:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021f6d:	88 d1                	mov    cl,dl
c0021f6f:	d3 e8                	shr    eax,cl
c0021f71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021f75:	09 c1                	or     ecx,eax
c0021f77:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021f7b:	89 e9                	mov    ecx,ebp
c0021f7d:	d3 e7                	shl    edi,cl
c0021f7f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021f83:	89 d8                	mov    eax,ebx
c0021f85:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021f89:	88 d1                	mov    cl,dl
c0021f8b:	d3 e8                	shr    eax,cl
c0021f8d:	89 c7                	mov    edi,eax
c0021f8f:	89 e9                	mov    ecx,ebp
c0021f91:	d3 e3                	shl    ebx,cl
c0021f93:	89 f0                	mov    eax,esi
c0021f95:	88 d1                	mov    cl,dl
c0021f97:	d3 e8                	shr    eax,cl
c0021f99:	09 d8                	or     eax,ebx
c0021f9b:	89 e9                	mov    ecx,ebp
c0021f9d:	d3 e6                	shl    esi,cl
c0021f9f:	89 f3                	mov    ebx,esi
c0021fa1:	89 fa                	mov    edx,edi
c0021fa3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021fa7:	89 d1                	mov    ecx,edx
c0021fa9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021fad:	89 c6                	mov    esi,eax
c0021faf:	89 d7                	mov    edi,edx
c0021fb1:	39 d1                	cmp    ecx,edx
c0021fb3:	72 27                	jb     c0021fdc <__umoddi3+0x10c>
c0021fb5:	74 21                	je     c0021fd8 <__umoddi3+0x108>
c0021fb7:	89 ca                	mov    edx,ecx
c0021fb9:	29 f3                	sub    ebx,esi
c0021fbb:	19 fa                	sbb    edx,edi
c0021fbd:	89 d0                	mov    eax,edx
c0021fbf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021fc3:	d3 e0                	shl    eax,cl
c0021fc5:	89 e9                	mov    ecx,ebp
c0021fc7:	d3 eb                	shr    ebx,cl
c0021fc9:	09 d8                	or     eax,ebx
c0021fcb:	d3 ea                	shr    edx,cl
c0021fcd:	83 c4 1c             	add    esp,0x1c
c0021fd0:	5b                   	pop    ebx
c0021fd1:	5e                   	pop    esi
c0021fd2:	5f                   	pop    edi
c0021fd3:	5d                   	pop    ebp
c0021fd4:	c3                   	ret    
c0021fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0021fd8:	39 c3                	cmp    ebx,eax
c0021fda:	73 db                	jae    c0021fb7 <__umoddi3+0xe7>
c0021fdc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021fe0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021fe4:	89 d7                	mov    edi,edx
c0021fe6:	89 c6                	mov    esi,eax
c0021fe8:	eb cd                	jmp    c0021fb7 <__umoddi3+0xe7>

Disassembly of section .init:

c0021fea <_init>:
c0021fea:	55                   	push   ebp
c0021feb:	89 e5                	mov    ebp,esp
c0021fed:	e8 26 e1 fd ff       	call   c0000118 <frame_dummy>
c0021ff2:	e8 e5 fa ff ff       	call   c0021adc <__do_global_ctors_aux>
c0021ff7:	5d                   	pop    ebp
c0021ff8:	c3                   	ret    

Disassembly of section .fini:

c0021ff9 <_fini>:
c0021ff9:	55                   	push   ebp
c0021ffa:	89 e5                	mov    ebp,esp
c0021ffc:	e8 a7 e0 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0022001:	5d                   	pop    ebp
c0022002:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0022004 <Computer::~Computer()>:
c0022004:	83 ec 0c             	sub    esp,0xc
c0022007:	ba b8 34 02 c0       	mov    edx,0xc00234b8
c002200c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022010:	89 10                	mov    DWORD PTR [eax],edx
c0022012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022016:	83 ec 0c             	sub    esp,0xc
c0022019:	50                   	push   eax
c002201a:	e8 25 c3 fe ff       	call   c000e344 <Device::~Device()>
c002201f:	83 c4 10             	add    esp,0x10
c0022022:	90                   	nop
c0022023:	83 c4 0c             	add    esp,0xc
c0022026:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0022028 <Computer::~Computer()>:
c0022028:	83 ec 0c             	sub    esp,0xc
c002202b:	83 ec 0c             	sub    esp,0xc
c002202e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022032:	e8 cd ff ff ff       	call   c0022004 <Computer::~Computer()>
c0022037:	83 c4 10             	add    esp,0x10
c002203a:	83 ec 08             	sub    esp,0x8
c002203d:	68 ec 01 00 00       	push   0x1ec
c0022042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022046:	e8 99 ae fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c002204b:	83 c4 10             	add    esp,0x10
c002204e:	83 c4 0c             	add    esp,0xc
c0022051:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022052 <idleCommon()>:
c0022052:	83 ec 0c             	sub    esp,0xc
c0022055:	fa                   	cli    
c0022056:	ff 05 c8 a8 02 c0    	inc    DWORD PTR ds:0xc002a8c8
c002205c:	e8 0b 54 ff ff       	call   c001746c <schedule()>
c0022061:	a1 c8 a8 02 c0       	mov    eax,ds:0xc002a8c8
c0022066:	48                   	dec    eax
c0022067:	a3 c8 a8 02 c0       	mov    ds:0xc002a8c8,eax
c002206c:	75 01                	jne    c002206f <idleCommon()+0x1d>
c002206e:	fb                   	sti    
c002206f:	83 c4 0c             	add    esp,0xc
c0022072:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0022074 <LinkedList<UnixFile>::~LinkedList()>:
c0022074:	90                   	nop
c0022075:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0022076 <LinkedList<UnixFile>::LinkedList()>:
c0022076:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002207a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022084:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002208b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002208f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002209a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00220a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00220ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00220b6:	90                   	nop
c00220b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00220b8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00220b8:	83 ec 0c             	sub    esp,0xc
c00220bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00220c0:	75 10                	jne    c00220d2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00220c2:	83 ec 0c             	sub    esp,0xc
c00220c5:	68 88 38 02 c0       	push   0xc0023888
c00220ca:	e8 38 1d ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c00220cf:	83 c4 10             	add    esp,0x10
c00220d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00220d8:	85 c0                	test   eax,eax
c00220da:	74 34                	je     c0022110 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00220dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220e3:	85 c0                	test   eax,eax
c00220e5:	74 29                	je     c0022110 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00220e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00220ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00220f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00220fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022104:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022107:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002210e:	eb 65                	jmp    c0022175 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022114:	8b 00                	mov    eax,DWORD PTR [eax]
c0022116:	85 c0                	test   eax,eax
c0022118:	75 4b                	jne    c0022165 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002211a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002211e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022121:	85 c0                	test   eax,eax
c0022123:	75 40                	jne    c0022165 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0022125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022129:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002212d:	89 10                	mov    DWORD PTR [eax],edx
c002212f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022133:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022137:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002213a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002213e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022141:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002214c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002214f:	85 c0                	test   eax,eax
c0022151:	74 22                	je     c0022175 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022153:	83 ec 0c             	sub    esp,0xc
c0022156:	68 aa 38 02 c0       	push   0xc00238aa
c002215b:	e8 a7 1c ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0022160:	83 c4 10             	add    esp,0x10
c0022163:	eb 10                	jmp    c0022175 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022165:	83 ec 0c             	sub    esp,0xc
c0022168:	68 b4 38 02 c0       	push   0xc00238b4
c002216d:	e8 95 1c ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0022172:	83 c4 10             	add    esp,0x10
c0022175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022179:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002217c:	8d 50 01             	lea    edx,[eax+0x1]
c002217f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022183:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022186:	90                   	nop
c0022187:	83 c4 0c             	add    esp,0xc
c002218a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002218c <LinkedList<UnixFile>::getFirstElement()>:
c002218c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022190:	8b 00                	mov    eax,DWORD PTR [eax]
c0022192:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0022194 <LinkedList<UnixFile>::removeFirst()>:
c0022194:	83 ec 0c             	sub    esp,0xc
c0022197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002219b:	8b 00                	mov    eax,DWORD PTR [eax]
c002219d:	85 c0                	test   eax,eax
c002219f:	75 12                	jne    c00221b3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00221a1:	83 ec 0c             	sub    esp,0xc
c00221a4:	68 c0 38 02 c0       	push   0xc00238c0
c00221a9:	e8 59 1c ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c00221ae:	83 c4 10             	add    esp,0x10
c00221b1:	eb 7e                	jmp    c0022231 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00221b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00221ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00221bd:	85 c0                	test   eax,eax
c00221bf:	74 10                	je     c00221d1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00221c1:	83 ec 0c             	sub    esp,0xc
c00221c4:	68 0b 39 02 c0       	push   0xc002390b
c00221c9:	e8 39 1c ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c00221ce:	83 c4 10             	add    esp,0x10
c00221d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00221d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00221da:	85 c0                	test   eax,eax
c00221dc:	75 33                	jne    c0022211 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00221de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00221e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00221f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00221fa:	83 f8 01             	cmp    eax,0x1
c00221fd:	74 21                	je     c0022220 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00221ff:	83 ec 0c             	sub    esp,0xc
c0022202:	68 e4 38 02 c0       	push   0xc00238e4
c0022207:	e8 fb 1b ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c002220c:	83 c4 10             	add    esp,0x10
c002220f:	eb 0f                	jmp    c0022220 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022211:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022215:	8b 00                	mov    eax,DWORD PTR [eax]
c0022217:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002221a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002221e:	89 10                	mov    DWORD PTR [eax],edx
c0022220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022224:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022227:	8d 50 ff             	lea    edx,[eax-0x1]
c002222a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002222e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022231:	83 c4 0c             	add    esp,0xc
c0022234:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0022236 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0022236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002223a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002223d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002223e <DriverlessDevice::~DriverlessDevice()>:
c002223e:	ba fc 40 02 c0       	mov    edx,0xc00240fc
c0022243:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022247:	89 10                	mov    DWORD PTR [eax],edx
c0022249:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002224d:	50                   	push   eax
c002224e:	e8 f1 c0 fe ff       	call   c000e344 <Device::~Device()>
c0022253:	83 c4 04             	add    esp,0x4
c0022256:	90                   	nop
c0022257:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022258 <DriverlessDevice::~DriverlessDevice()>:
c0022258:	83 ec 0c             	sub    esp,0xc
c002225b:	83 ec 0c             	sub    esp,0xc
c002225e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022262:	e8 d7 ff ff ff       	call   c002223e <DriverlessDevice::~DriverlessDevice()>
c0022267:	83 c4 10             	add    esp,0x10
c002226a:	83 ec 08             	sub    esp,0x8
c002226d:	68 58 01 00 00       	push   0x158
c0022272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022276:	e8 69 ac fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c002227b:	83 c4 10             	add    esp,0x10
c002227e:	83 c4 0c             	add    esp,0xc
c0022281:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0022282 <LinkedList<Device>::addElement(Device*)>:
c0022282:	83 ec 0c             	sub    esp,0xc
c0022285:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002228a:	75 10                	jne    c002229c <LinkedList<Device>::addElement(Device*)+0x1a>
c002228c:	83 ec 0c             	sub    esp,0xc
c002228f:	68 88 38 02 c0       	push   0xc0023888
c0022294:	e8 6e 1b ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0022299:	83 c4 10             	add    esp,0x10
c002229c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00222a2:	85 c0                	test   eax,eax
c00222a4:	74 3a                	je     c00222e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c00222a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222ad:	85 c0                	test   eax,eax
c00222af:	74 2f                	je     c00222e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c00222b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222bc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00222c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00222cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222d4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00222de:	eb 68                	jmp    c0022348 <LinkedList<Device>::addElement(Device*)+0xc6>
c00222e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00222e6:	85 c0                	test   eax,eax
c00222e8:	75 4e                	jne    c0022338 <LinkedList<Device>::addElement(Device*)+0xb6>
c00222ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00222f1:	85 c0                	test   eax,eax
c00222f3:	75 43                	jne    c0022338 <LinkedList<Device>::addElement(Device*)+0xb6>
c00222f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00222fd:	89 10                	mov    DWORD PTR [eax],edx
c00222ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022303:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022307:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002230a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002230e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022311:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002231b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002231f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022322:	85 c0                	test   eax,eax
c0022324:	74 22                	je     c0022348 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022326:	83 ec 0c             	sub    esp,0xc
c0022329:	68 aa 38 02 c0       	push   0xc00238aa
c002232e:	e8 d4 1a ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0022333:	83 c4 10             	add    esp,0x10
c0022336:	eb 10                	jmp    c0022348 <LinkedList<Device>::addElement(Device*)+0xc6>
c0022338:	83 ec 0c             	sub    esp,0xc
c002233b:	68 b4 38 02 c0       	push   0xc00238b4
c0022340:	e8 c2 1a ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0022345:	83 c4 10             	add    esp,0x10
c0022348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002234c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002234f:	8d 50 01             	lea    edx,[eax+0x1]
c0022352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022356:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022359:	90                   	nop
c002235a:	83 c4 0c             	add    esp,0xc
c002235d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002235e <LinkedList<Device>::LinkedList()>:
c002235e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022362:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002236c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022373:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022377:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002237e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022382:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002238c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022393:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022397:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002239e:	90                   	nop
c002239f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c00223a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c00223a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00223a6:	85 c0                	test   eax,eax
c00223a8:	75 0e                	jne    c00223b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00223aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223b1:	85 c0                	test   eax,eax
c00223b3:	75 03                	jne    c00223b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00223b5:	b0 01                	mov    al,0x1
c00223b7:	c3                   	ret    
c00223b8:	b0 00                	mov    al,0x0
c00223ba:	90                   	nop
c00223bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00223bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00223bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00223c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00223c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00223c4:	83 ec 0c             	sub    esp,0xc
c00223c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00223cd:	85 c0                	test   eax,eax
c00223cf:	75 17                	jne    c00223e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00223d1:	83 ec 0c             	sub    esp,0xc
c00223d4:	68 c0 38 02 c0       	push   0xc00238c0
c00223d9:	e8 29 1a ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c00223de:	83 c4 10             	add    esp,0x10
c00223e1:	e9 92 00 00 00       	jmp    c0022478 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c00223e6:	66 90                	xchg   ax,ax
c00223e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00223f2:	85 c0                	test   eax,eax
c00223f4:	0f 95 c0             	setne  al
c00223f7:	84 c0                	test   al,al
c00223f9:	74 11                	je     c002240c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c00223fb:	83 ec 0c             	sub    esp,0xc
c00223fe:	68 0b 39 02 c0       	push   0xc002390b
c0022403:	e8 ff 19 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0022408:	83 c4 10             	add    esp,0x10
c002240b:	90                   	nop
c002240c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022410:	8b 00                	mov    eax,DWORD PTR [eax]
c0022412:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022415:	85 c0                	test   eax,eax
c0022417:	0f 94 c0             	sete   al
c002241a:	84 c0                	test   al,al
c002241c:	74 36                	je     c0022454 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c002241e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022422:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022428:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002242c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022437:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002243a:	83 f8 01             	cmp    eax,0x1
c002243d:	74 25                	je     c0022464 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c002243f:	83 ec 0c             	sub    esp,0xc
c0022442:	68 e4 38 02 c0       	push   0xc00238e4
c0022447:	e8 bb 19 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c002244c:	83 c4 10             	add    esp,0x10
c002244f:	eb 13                	jmp    c0022464 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022451:	8d 76 00             	lea    esi,[esi+0x0]
c0022454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022458:	8b 00                	mov    eax,DWORD PTR [eax]
c002245a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002245d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022461:	89 10                	mov    DWORD PTR [eax],edx
c0022463:	90                   	nop
c0022464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022468:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002246b:	8d 50 ff             	lea    edx,[eax-0x1]
c002246e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022472:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022475:	8d 76 00             	lea    esi,[esi+0x0]
c0022478:	83 c4 0c             	add    esp,0xc
c002247b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002247c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002247c:	83 ec 0c             	sub    esp,0xc
c002247f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022484:	75 12                	jne    c0022498 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022486:	83 ec 0c             	sub    esp,0xc
c0022489:	68 88 38 02 c0       	push   0xc0023888
c002248e:	e8 74 19 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0022493:	83 c4 10             	add    esp,0x10
c0022496:	66 90                	xchg   ax,ax
c0022498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002249c:	8b 00                	mov    eax,DWORD PTR [eax]
c002249e:	85 c0                	test   eax,eax
c00224a0:	74 36                	je     c00224d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00224a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224a9:	85 c0                	test   eax,eax
c00224ab:	74 2b                	je     c00224d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c00224ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224b8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00224bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224c3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00224c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224cd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00224d4:	eb 6a                	jmp    c0022540 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00224d6:	66 90                	xchg   ax,ax
c00224d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00224de:	85 c0                	test   eax,eax
c00224e0:	75 4e                	jne    c0022530 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00224e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224e9:	85 c0                	test   eax,eax
c00224eb:	75 43                	jne    c0022530 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00224ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224f5:	89 10                	mov    DWORD PTR [eax],edx
c00224f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00224ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022506:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022509:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022514:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022517:	85 c0                	test   eax,eax
c0022519:	74 25                	je     c0022540 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002251b:	83 ec 0c             	sub    esp,0xc
c002251e:	68 aa 38 02 c0       	push   0xc00238aa
c0022523:	e8 df 18 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0022528:	83 c4 10             	add    esp,0x10
c002252b:	eb 13                	jmp    c0022540 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002252d:	8d 76 00             	lea    esi,[esi+0x0]
c0022530:	83 ec 0c             	sub    esp,0xc
c0022533:	68 b4 38 02 c0       	push   0xc00238b4
c0022538:	e8 ca 18 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c002253d:	83 c4 10             	add    esp,0x10
c0022540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022544:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022547:	8d 50 01             	lea    edx,[eax+0x1]
c002254a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002254e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022551:	90                   	nop
c0022552:	83 c4 0c             	add    esp,0xc
c0022555:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022558 <ACPI::~ACPI()>:
c0022558:	83 ec 0c             	sub    esp,0xc
c002255b:	ba a8 48 02 c0       	mov    edx,0xc00248a8
c0022560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022564:	89 10                	mov    DWORD PTR [eax],edx
c0022566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002256a:	83 ec 0c             	sub    esp,0xc
c002256d:	50                   	push   eax
c002256e:	e8 d1 bd fe ff       	call   c000e344 <Device::~Device()>
c0022573:	83 c4 10             	add    esp,0x10
c0022576:	90                   	nop
c0022577:	83 c4 0c             	add    esp,0xc
c002257a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002257c <ACPI::~ACPI()>:
c002257c:	83 ec 0c             	sub    esp,0xc
c002257f:	83 ec 0c             	sub    esp,0xc
c0022582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022586:	e8 cd ff ff ff       	call   c0022558 <ACPI::~ACPI()>
c002258b:	83 c4 10             	add    esp,0x10
c002258e:	83 ec 08             	sub    esp,0x8
c0022591:	68 64 12 00 00       	push   0x1264
c0022596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002259a:	e8 45 a9 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c002259f:	83 c4 10             	add    esp,0x10
c00225a2:	83 c4 0c             	add    esp,0xc
c00225a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c00225a8 <LinkedList<Device>::~LinkedList()>:
c00225a8:	90                   	nop
c00225a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c00225ac <LinkedList<Device>::isEmpty()>:
c00225ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00225b2:	85 c0                	test   eax,eax
c00225b4:	75 0e                	jne    c00225c4 <LinkedList<Device>::isEmpty()+0x18>
c00225b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00225bd:	85 c0                	test   eax,eax
c00225bf:	75 03                	jne    c00225c4 <LinkedList<Device>::isEmpty()+0x18>
c00225c1:	b0 01                	mov    al,0x1
c00225c3:	c3                   	ret    
c00225c4:	b0 00                	mov    al,0x0
c00225c6:	90                   	nop
c00225c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00225c8 <LinkedList<Device>::getFirstElement()>:
c00225c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00225cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00225ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00225d0 <LinkedList<Device>::removeFirst()>:
c00225d0:	83 ec 0c             	sub    esp,0xc
c00225d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225d7:	8b 00                	mov    eax,DWORD PTR [eax]
c00225d9:	85 c0                	test   eax,eax
c00225db:	75 17                	jne    c00225f4 <LinkedList<Device>::removeFirst()+0x24>
c00225dd:	83 ec 0c             	sub    esp,0xc
c00225e0:	68 c0 38 02 c0       	push   0xc00238c0
c00225e5:	e8 1d 18 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c00225ea:	83 c4 10             	add    esp,0x10
c00225ed:	e9 92 00 00 00       	jmp    c0022684 <LinkedList<Device>::removeFirst()+0xb4>
c00225f2:	66 90                	xchg   ax,ax
c00225f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00225f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00225fb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022601:	85 c0                	test   eax,eax
c0022603:	74 13                	je     c0022618 <LinkedList<Device>::removeFirst()+0x48>
c0022605:	83 ec 0c             	sub    esp,0xc
c0022608:	68 0b 39 02 c0       	push   0xc002390b
c002260d:	e8 f5 17 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0022612:	83 c4 10             	add    esp,0x10
c0022615:	8d 76 00             	lea    esi,[esi+0x0]
c0022618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002261c:	8b 00                	mov    eax,DWORD PTR [eax]
c002261e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022624:	85 c0                	test   eax,eax
c0022626:	75 34                	jne    c002265c <LinkedList<Device>::removeFirst()+0x8c>
c0022628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002262c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022636:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002263d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022641:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022644:	83 f8 01             	cmp    eax,0x1
c0022647:	74 27                	je     c0022670 <LinkedList<Device>::removeFirst()+0xa0>
c0022649:	83 ec 0c             	sub    esp,0xc
c002264c:	68 e4 38 02 c0       	push   0xc00238e4
c0022651:	e8 b1 17 ff ff       	call   c0013e07 <Krnl::panic(char const*)>
c0022656:	83 c4 10             	add    esp,0x10
c0022659:	eb 15                	jmp    c0022670 <LinkedList<Device>::removeFirst()+0xa0>
c002265b:	90                   	nop
c002265c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022660:	8b 00                	mov    eax,DWORD PTR [eax]
c0022662:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002266c:	89 10                	mov    DWORD PTR [eax],edx
c002266e:	66 90                	xchg   ax,ax
c0022670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022674:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022677:	8d 50 ff             	lea    edx,[eax-0x1]
c002267a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002267e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022681:	8d 76 00             	lea    esi,[esi+0x0]
c0022684:	83 c4 0c             	add    esp,0xc
c0022687:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0022688 <CPU::~CPU()>:
c0022688:	83 ec 0c             	sub    esp,0xc
c002268b:	ba 28 4e 02 c0       	mov    edx,0xc0024e28
c0022690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022694:	89 10                	mov    DWORD PTR [eax],edx
c0022696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002269a:	83 ec 0c             	sub    esp,0xc
c002269d:	50                   	push   eax
c002269e:	e8 a1 bc fe ff       	call   c000e344 <Device::~Device()>
c00226a3:	83 c4 10             	add    esp,0x10
c00226a6:	90                   	nop
c00226a7:	83 c4 0c             	add    esp,0xc
c00226aa:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c00226ac <CPU::~CPU()>:
c00226ac:	83 ec 0c             	sub    esp,0xc
c00226af:	83 ec 0c             	sub    esp,0xc
c00226b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226b6:	e8 cd ff ff ff       	call   c0022688 <CPU::~CPU()>
c00226bb:	83 c4 10             	add    esp,0x10
c00226be:	83 ec 08             	sub    esp,0x8
c00226c1:	68 94 11 00 00       	push   0x1194
c00226c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226ca:	e8 15 a8 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00226cf:	83 c4 10             	add    esp,0x10
c00226d2:	83 c4 0c             	add    esp,0xc
c00226d5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00226d8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00226d8:	90                   	nop
c00226d9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00226dc <ThreadControlBlock::ThreadControlBlock()>:
c00226dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226e0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00226e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226eb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00226f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226f6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00226fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022701:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0022708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002270c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0022713:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022717:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002271b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002271f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0022723:	90                   	nop
c0022724:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0022728 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0022728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002272c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022736:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002273d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022741:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002274c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022752:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022756:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002275d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022761:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022768:	90                   	nop
c0022769:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002276c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002276c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022770:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022773:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0022774 <Vm::_FPUState::_FPUState()>:
c0022774:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022778:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002277f:	90                   	nop
c0022780:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0022782 <PCI::~PCI()>:
c0022782:	83 ec 0c             	sub    esp,0xc
c0022785:	ba c4 5e 02 c0       	mov    edx,0xc0025ec4
c002278a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002278e:	89 10                	mov    DWORD PTR [eax],edx
c0022790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022794:	83 ec 0c             	sub    esp,0xc
c0022797:	50                   	push   eax
c0022798:	e8 37 b6 fe ff       	call   c000ddd4 <Bus::~Bus()>
c002279d:	83 c4 10             	add    esp,0x10
c00227a0:	90                   	nop
c00227a1:	83 c4 0c             	add    esp,0xc
c00227a4:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00227a6 <PCI::~PCI()>:
c00227a6:	83 ec 0c             	sub    esp,0xc
c00227a9:	83 ec 0c             	sub    esp,0xc
c00227ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227b0:	e8 cd ff ff ff       	call   c0022782 <PCI::~PCI()>
c00227b5:	83 c4 10             	add    esp,0x10
c00227b8:	83 ec 08             	sub    esp,0x8
c00227bb:	68 5c 01 00 00       	push   0x15c
c00227c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227c4:	e8 1b a7 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00227c9:	83 c4 10             	add    esp,0x10
c00227cc:	83 c4 0c             	add    esp,0xc
c00227cf:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00227d0 <IDE::~IDE()>:
c00227d0:	83 ec 0c             	sub    esp,0xc
c00227d3:	ba 94 5f 02 c0       	mov    edx,0xc0025f94
c00227d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227dc:	89 10                	mov    DWORD PTR [eax],edx
c00227de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00227e2:	83 ec 0c             	sub    esp,0xc
c00227e5:	50                   	push   eax
c00227e6:	e8 3d c0 fe ff       	call   c000e828 <HardDiskController::~HardDiskController()>
c00227eb:	83 c4 10             	add    esp,0x10
c00227ee:	90                   	nop
c00227ef:	83 c4 0c             	add    esp,0xc
c00227f2:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00227f4 <IDE::~IDE()>:
c00227f4:	83 ec 0c             	sub    esp,0xc
c00227f7:	83 ec 0c             	sub    esp,0xc
c00227fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227fe:	e8 cd ff ff ff       	call   c00227d0 <IDE::~IDE()>
c0022803:	83 c4 10             	add    esp,0x10
c0022806:	83 ec 08             	sub    esp,0x8
c0022809:	68 70 02 00 00       	push   0x270
c002280e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022812:	e8 cd a6 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0022817:	83 c4 10             	add    esp,0x10
c002281a:	83 c4 0c             	add    esp,0xc
c002281d:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002281e <SATABus::~SATABus()>:
c002281e:	83 ec 0c             	sub    esp,0xc
c0022821:	ba 60 60 02 c0       	mov    edx,0xc0026060
c0022826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002282a:	89 10                	mov    DWORD PTR [eax],edx
c002282c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022830:	83 ec 0c             	sub    esp,0xc
c0022833:	50                   	push   eax
c0022834:	e8 ef bf fe ff       	call   c000e828 <HardDiskController::~HardDiskController()>
c0022839:	83 c4 10             	add    esp,0x10
c002283c:	90                   	nop
c002283d:	83 c4 0c             	add    esp,0xc
c0022840:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0022842 <SATABus::~SATABus()>:
c0022842:	83 ec 0c             	sub    esp,0xc
c0022845:	83 ec 0c             	sub    esp,0xc
c0022848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002284c:	e8 cd ff ff ff       	call   c002281e <SATABus::~SATABus()>
c0022851:	83 c4 10             	add    esp,0x10
c0022854:	83 ec 08             	sub    esp,0x8
c0022857:	68 64 01 00 00       	push   0x164
c002285c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022860:	e8 7f a6 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0022865:	83 c4 10             	add    esp,0x10
c0022868:	83 c4 0c             	add    esp,0xc
c002286b:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002286c <ATA::~ATA()>:
c002286c:	83 ec 0c             	sub    esp,0xc
c002286f:	ba d8 60 02 c0       	mov    edx,0xc00260d8
c0022874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022878:	89 10                	mov    DWORD PTR [eax],edx
c002287a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002287e:	83 ec 0c             	sub    esp,0xc
c0022881:	50                   	push   eax
c0022882:	e8 83 c0 fe ff       	call   c000e90a <PhysicalDisk::~PhysicalDisk()>
c0022887:	83 c4 10             	add    esp,0x10
c002288a:	90                   	nop
c002288b:	83 c4 0c             	add    esp,0xc
c002288e:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0022890 <ATA::~ATA()>:
c0022890:	83 ec 0c             	sub    esp,0xc
c0022893:	83 ec 0c             	sub    esp,0xc
c0022896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002289a:	e8 cd ff ff ff       	call   c002286c <ATA::~ATA()>
c002289f:	83 c4 10             	add    esp,0x10
c00228a2:	83 ec 08             	sub    esp,0x8
c00228a5:	68 7c 01 00 00       	push   0x17c
c00228aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228ae:	e8 31 a6 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00228b3:	83 c4 10             	add    esp,0x10
c00228b6:	83 c4 0c             	add    esp,0xc
c00228b9:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00228ba <ATAPI::~ATAPI()>:
c00228ba:	83 ec 0c             	sub    esp,0xc
c00228bd:	ba 50 61 02 c0       	mov    edx,0xc0026150
c00228c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228c6:	89 10                	mov    DWORD PTR [eax],edx
c00228c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228cc:	83 ec 0c             	sub    esp,0xc
c00228cf:	50                   	push   eax
c00228d0:	e8 35 c0 fe ff       	call   c000e90a <PhysicalDisk::~PhysicalDisk()>
c00228d5:	83 c4 10             	add    esp,0x10
c00228d8:	90                   	nop
c00228d9:	83 c4 0c             	add    esp,0xc
c00228dc:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00228de <ATAPI::~ATAPI()>:
c00228de:	83 ec 0c             	sub    esp,0xc
c00228e1:	83 ec 0c             	sub    esp,0xc
c00228e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228e8:	e8 cd ff ff ff       	call   c00228ba <ATAPI::~ATAPI()>
c00228ed:	83 c4 10             	add    esp,0x10
c00228f0:	83 ec 08             	sub    esp,0x8
c00228f3:	68 84 01 00 00       	push   0x184
c00228f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228fc:	e8 e3 a5 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0022901:	83 c4 10             	add    esp,0x10
c0022904:	83 c4 0c             	add    esp,0xc
c0022907:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022908 <SATA::~SATA()>:
c0022908:	83 ec 0c             	sub    esp,0xc
c002290b:	ba 8c 63 02 c0       	mov    edx,0xc002638c
c0022910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022914:	89 10                	mov    DWORD PTR [eax],edx
c0022916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002291a:	83 ec 0c             	sub    esp,0xc
c002291d:	50                   	push   eax
c002291e:	e8 e7 bf fe ff       	call   c000e90a <PhysicalDisk::~PhysicalDisk()>
c0022923:	83 c4 10             	add    esp,0x10
c0022926:	90                   	nop
c0022927:	83 c4 0c             	add    esp,0xc
c002292a:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002292c <SATA::~SATA()>:
c002292c:	83 ec 0c             	sub    esp,0xc
c002292f:	83 ec 0c             	sub    esp,0xc
c0022932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022936:	e8 cd ff ff ff       	call   c0022908 <SATA::~SATA()>
c002293b:	83 c4 10             	add    esp,0x10
c002293e:	83 ec 08             	sub    esp,0x8
c0022941:	68 7c 01 00 00       	push   0x17c
c0022946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002294a:	e8 95 a5 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c002294f:	83 c4 10             	add    esp,0x10
c0022952:	83 c4 0c             	add    esp,0xc
c0022955:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0022956 <SATAPI::~SATAPI()>:
c0022956:	83 ec 0c             	sub    esp,0xc
c0022959:	ba f8 64 02 c0       	mov    edx,0xc00264f8
c002295e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022962:	89 10                	mov    DWORD PTR [eax],edx
c0022964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022968:	83 ec 0c             	sub    esp,0xc
c002296b:	50                   	push   eax
c002296c:	e8 99 bf fe ff       	call   c000e90a <PhysicalDisk::~PhysicalDisk()>
c0022971:	83 c4 10             	add    esp,0x10
c0022974:	90                   	nop
c0022975:	83 c4 0c             	add    esp,0xc
c0022978:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002297a <SATAPI::~SATAPI()>:
c002297a:	83 ec 0c             	sub    esp,0xc
c002297d:	83 ec 0c             	sub    esp,0xc
c0022980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022984:	e8 cd ff ff ff       	call   c0022956 <SATAPI::~SATAPI()>
c0022989:	83 c4 10             	add    esp,0x10
c002298c:	83 ec 08             	sub    esp,0x8
c002298f:	68 84 01 00 00       	push   0x184
c0022994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022998:	e8 47 a5 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c002299d:	83 c4 10             	add    esp,0x10
c00229a0:	83 c4 0c             	add    esp,0xc
c00229a3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00229a4 <IOAPIC::~IOAPIC()>:
c00229a4:	83 ec 0c             	sub    esp,0xc
c00229a7:	ba 4c 65 02 c0       	mov    edx,0xc002654c
c00229ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b0:	89 10                	mov    DWORD PTR [eax],edx
c00229b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b6:	83 ec 0c             	sub    esp,0xc
c00229b9:	50                   	push   eax
c00229ba:	e8 85 b9 fe ff       	call   c000e344 <Device::~Device()>
c00229bf:	83 c4 10             	add    esp,0x10
c00229c2:	90                   	nop
c00229c3:	83 c4 0c             	add    esp,0xc
c00229c6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00229c8 <IOAPIC::~IOAPIC()>:
c00229c8:	83 ec 0c             	sub    esp,0xc
c00229cb:	83 ec 0c             	sub    esp,0xc
c00229ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229d2:	e8 cd ff ff ff       	call   c00229a4 <IOAPIC::~IOAPIC()>
c00229d7:	83 c4 10             	add    esp,0x10
c00229da:	83 ec 08             	sub    esp,0x8
c00229dd:	68 68 01 00 00       	push   0x168
c00229e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00229e6:	e8 f9 a4 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c00229eb:	83 c4 10             	add    esp,0x10
c00229ee:	83 c4 0c             	add    esp,0xc
c00229f1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00229f4 <APICTimer::~APICTimer()>:
c00229f4:	83 ec 0c             	sub    esp,0xc
c00229f7:	ba 94 65 02 c0       	mov    edx,0xc0026594
c00229fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a00:	89 10                	mov    DWORD PTR [eax],edx
c0022a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a06:	83 ec 0c             	sub    esp,0xc
c0022a09:	50                   	push   eax
c0022a0a:	e8 b9 d2 fe ff       	call   c000fcc8 <Timer::~Timer()>
c0022a0f:	83 c4 10             	add    esp,0x10
c0022a12:	90                   	nop
c0022a13:	83 c4 0c             	add    esp,0xc
c0022a16:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022a18 <APICTimer::~APICTimer()>:
c0022a18:	83 ec 0c             	sub    esp,0xc
c0022a1b:	83 ec 0c             	sub    esp,0xc
c0022a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a22:	e8 cd ff ff ff       	call   c00229f4 <APICTimer::~APICTimer()>
c0022a27:	83 c4 10             	add    esp,0x10
c0022a2a:	83 ec 08             	sub    esp,0x8
c0022a2d:	68 60 01 00 00       	push   0x160
c0022a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a36:	e8 a9 a4 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0022a3b:	83 c4 10             	add    esp,0x10
c0022a3e:	83 c4 0c             	add    esp,0xc
c0022a41:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0022a44 <PIT::~PIT()>:
c0022a44:	83 ec 0c             	sub    esp,0xc
c0022a47:	ba e4 65 02 c0       	mov    edx,0xc00265e4
c0022a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a50:	89 10                	mov    DWORD PTR [eax],edx
c0022a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a56:	83 ec 0c             	sub    esp,0xc
c0022a59:	50                   	push   eax
c0022a5a:	e8 69 d2 fe ff       	call   c000fcc8 <Timer::~Timer()>
c0022a5f:	83 c4 10             	add    esp,0x10
c0022a62:	90                   	nop
c0022a63:	83 c4 0c             	add    esp,0xc
c0022a66:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022a68 <PIT::~PIT()>:
c0022a68:	83 ec 0c             	sub    esp,0xc
c0022a6b:	83 ec 0c             	sub    esp,0xc
c0022a6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a72:	e8 cd ff ff ff       	call   c0022a44 <PIT::~PIT()>
c0022a77:	83 c4 10             	add    esp,0x10
c0022a7a:	83 ec 08             	sub    esp,0x8
c0022a7d:	68 5c 01 00 00       	push   0x15c
c0022a82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022a86:	e8 59 a4 fe ff       	call   c000cee4 <operator delete(void*, unsigned long)>
c0022a8b:	83 c4 10             	add    esp,0x10
c0022a8e:	83 c4 0c             	add    esp,0xc
c0022a91:	c3                   	ret    
