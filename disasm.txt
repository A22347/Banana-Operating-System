
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 9f 78 00 00       	call   c00078bf <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e8 16 02 c0       	mov    eax,0xc00216e8
c0000025:	3d e8 16 02 c0       	cmp    eax,0xc00216e8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e8 16 02 c0       	push   0xc00216e8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e8 16 02 c0       	mov    eax,0xc00216e8
c0000051:	2d e8 16 02 c0       	sub    eax,0xc00216e8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e8 16 02 c0       	push   0xc00216e8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 30 02 c0 00 	cmp    BYTE PTR ds:0xc00230c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 78 e7 01 c0       	mov    ebx,0xc001e778
c0000097:	81 eb 74 e7 01 c0    	sub    ebx,0xc001e774
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 74 e7 01 c0       	mov    esi,0xc001e774
c00000a6:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 30 02 c0       	mov    ds:0xc00230c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 30 02 c0       	mov    eax,ds:0xc00230c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e8 16 02 c0       	push   0xc00216e8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 30 02 c0 01 	mov    BYTE PTR ds:0xc00230c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 30 02 c0       	push   0xc00230c8
c0000108:	68 e8 16 02 c0       	push   0xc00216e8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 3f 3d 01 00       	call   c0013fec <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 f9 a0 00 00       	call   c000a3be <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 1d 3d 01 00       	call   c0013fec <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 26 42 01 00       	call   c0014514 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 9d 48 01 00       	call   c0014b94 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 3e 02 c0 	lgdtd  ds:0xc0023ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 1b 00 01 00       	jmp    c001039a <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 1c                	je     c00003ae <memcmp+0x2e>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000396:	38 cb                	cmp    bl,cl
c0000398:	75 26                	jne    c00003c0 <memcmp+0x40>
c000039a:	01 c6                	add    esi,eax
c000039c:	eb 0a                	jmp    c00003a8 <memcmp+0x28>
c000039e:	66 90                	xchg   ax,ax
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a4:	38 d9                	cmp    cl,bl
c00003a6:	75 18                	jne    c00003c0 <memcmp+0x40>
c00003a8:	40                   	inc    eax
c00003a9:	42                   	inc    edx
c00003aa:	39 f0                	cmp    eax,esi
c00003ac:	75 f2                	jne    c00003a0 <memcmp+0x20>
c00003ae:	31 c0                	xor    eax,eax
c00003b0:	5b                   	pop    ebx
c00003b1:	5e                   	pop    esi
c00003b2:	c3                   	ret    
c00003b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003c0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003c6:	31 c0                	xor    eax,eax
c00003c8:	88 c8                	mov    al,cl
c00003ca:	29 d8                	sub    eax,ebx
c00003cc:	5b                   	pop    ebx
c00003cd:	5e                   	pop    esi
c00003ce:	c3                   	ret    
c00003cf:	90                   	nop

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 98 00 00 00    	jae    c0000480 <memmove+0xb0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 7c 00 00 00    	je     c000046c <memmove+0x9c>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	09 ce                	or     esi,ecx
c0000404:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000407:	89 f0                	mov    eax,esi
c0000409:	83 f9 0c             	cmp    ecx,0xc
c000040c:	0f 97 c1             	seta   cl
c000040f:	84 c8                	test   al,cl
c0000411:	0f 84 89 00 00 00    	je     c00004a0 <memmove+0xd0>
c0000417:	89 e9                	mov    ecx,ebp
c0000419:	09 d9                	or     ecx,ebx
c000041b:	83 e1 03             	and    ecx,0x3
c000041e:	0f 85 7c 00 00 00    	jne    c00004a0 <memmove+0xd0>
c0000424:	89 d7                	mov    edi,edx
c0000426:	89 d9                	mov    ecx,ebx
c0000428:	83 e7 fc             	and    edi,0xfffffffc
c000042b:	89 ee                	mov    esi,ebp
c000042d:	01 df                	add    edi,ebx
c000042f:	90                   	nop
c0000430:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000432:	83 c6 04             	add    esi,0x4
c0000435:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000438:	83 c1 04             	add    ecx,0x4
c000043b:	39 f9                	cmp    ecx,edi
c000043d:	75 f1                	jne    c0000430 <memmove+0x60>
c000043f:	89 d1                	mov    ecx,edx
c0000441:	89 d7                	mov    edi,edx
c0000443:	83 e1 fc             	and    ecx,0xfffffffc
c0000446:	29 cf                	sub    edi,ecx
c0000448:	01 cb                	add    ebx,ecx
c000044a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000044e:	39 ca                	cmp    edx,ecx
c0000450:	74 1a                	je     c000046c <memmove+0x9c>
c0000452:	8a 03                	mov    al,BYTE PTR [ebx]
c0000454:	83 ff 01             	cmp    edi,0x1
c0000457:	88 06                	mov    BYTE PTR [esi],al
c0000459:	74 11                	je     c000046c <memmove+0x9c>
c000045b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000045e:	83 ff 02             	cmp    edi,0x2
c0000461:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000464:	74 06                	je     c000046c <memmove+0x9c>
c0000466:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000469:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000046c:	5b                   	pop    ebx
c000046d:	89 e8                	mov    eax,ebp
c000046f:	5e                   	pop    esi
c0000470:	5f                   	pop    edi
c0000471:	5d                   	pop    ebp
c0000472:	c3                   	ret    
c0000473:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000479:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000480:	76 ea                	jbe    c000046c <memmove+0x9c>
c0000482:	85 d2                	test   edx,edx
c0000484:	74 e6                	je     c000046c <memmove+0x9c>
c0000486:	4b                   	dec    ebx
c0000487:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000048a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000490:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000493:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000496:	4a                   	dec    edx
c0000497:	75 f7                	jne    c0000490 <memmove+0xc0>
c0000499:	5b                   	pop    ebx
c000049a:	89 e8                	mov    eax,ebp
c000049c:	5e                   	pop    esi
c000049d:	5f                   	pop    edi
c000049e:	5d                   	pop    ebp
c000049f:	c3                   	ret    
c00004a0:	01 ea                	add    edx,ebp
c00004a2:	89 e9                	mov    ecx,ebp
c00004a4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004aa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004b0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004b2:	41                   	inc    ecx
c00004b3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004b6:	43                   	inc    ebx
c00004b7:	39 d1                	cmp    ecx,edx
c00004b9:	75 f5                	jne    c00004b0 <memmove+0xe0>
c00004bb:	eb af                	jmp    c000046c <memmove+0x9c>
c00004bd:	8d 76 00             	lea    esi,[esi+0x0]

c00004c0 <memset>:
c00004c0:	57                   	push   edi
c00004c1:	53                   	push   ebx
c00004c2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004c6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004ca:	85 d2                	test   edx,edx
c00004cc:	74 1f                	je     c00004ed <memset+0x2d>
c00004ce:	31 c0                	xor    eax,eax
c00004d0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004d4:	88 c4                	mov    ah,al
c00004d6:	89 c1                	mov    ecx,eax
c00004d8:	c1 e1 10             	shl    ecx,0x10
c00004db:	09 c8                	or     eax,ecx
c00004dd:	83 fa 04             	cmp    edx,0x4
c00004e0:	73 1e                	jae    c0000500 <memset+0x40>
c00004e2:	85 d2                	test   edx,edx
c00004e4:	74 07                	je     c00004ed <memset+0x2d>
c00004e6:	88 03                	mov    BYTE PTR [ebx],al
c00004e8:	f6 c2 02             	test   dl,0x2
c00004eb:	75 30                	jne    c000051d <memset+0x5d>
c00004ed:	89 d8                	mov    eax,ebx
c00004ef:	5b                   	pop    ebx
c00004f0:	5f                   	pop    edi
c00004f1:	c3                   	ret    
c00004f2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000500:	89 03                	mov    DWORD PTR [ebx],eax
c0000502:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000505:	89 d9                	mov    ecx,ebx
c0000507:	83 e7 fc             	and    edi,0xfffffffc
c000050a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000050e:	29 f9                	sub    ecx,edi
c0000510:	01 d1                	add    ecx,edx
c0000512:	c1 e9 02             	shr    ecx,0x2
c0000515:	fc                   	cld    
c0000516:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000518:	89 d8                	mov    eax,ebx
c000051a:	5b                   	pop    ebx
c000051b:	5f                   	pop    edi
c000051c:	c3                   	ret    
c000051d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000522:	eb c9                	jmp    c00004ed <memset+0x2d>
c0000524:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000052a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000530 <strlen>:
c0000530:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000534:	31 c0                	xor    eax,eax
c0000536:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000539:	74 15                	je     c0000550 <strlen+0x20>
c000053b:	90                   	nop
c000053c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000540:	40                   	inc    eax
c0000541:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000545:	75 f9                	jne    c0000540 <strlen+0x10>
c0000547:	c3                   	ret    
c0000548:	90                   	nop
c0000549:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000550:	c3                   	ret    
c0000551:	eb 0d                	jmp    c0000560 <strpbrk>
c0000553:	90                   	nop
c0000554:	90                   	nop
c0000555:	90                   	nop
c0000556:	90                   	nop
c0000557:	90                   	nop
c0000558:	90                   	nop
c0000559:	90                   	nop
c000055a:	90                   	nop
c000055b:	90                   	nop
c000055c:	90                   	nop
c000055d:	90                   	nop
c000055e:	90                   	nop
c000055f:	90                   	nop

c0000560 <strpbrk>:
c0000560:	57                   	push   edi
c0000561:	56                   	push   esi
c0000562:	53                   	push   ebx
c0000563:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000567:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000056b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000056d:	84 db                	test   bl,bl
c000056f:	74 21                	je     c0000592 <strpbrk+0x32>
c0000571:	8a 07                	mov    al,BYTE PTR [edi]
c0000573:	84 c0                	test   al,al
c0000575:	74 14                	je     c000058b <strpbrk+0x2b>
c0000577:	38 d8                	cmp    al,bl
c0000579:	74 19                	je     c0000594 <strpbrk+0x34>
c000057b:	89 fa                	mov    edx,edi
c000057d:	eb 05                	jmp    c0000584 <strpbrk+0x24>
c000057f:	90                   	nop
c0000580:	38 d9                	cmp    cl,bl
c0000582:	74 10                	je     c0000594 <strpbrk+0x34>
c0000584:	42                   	inc    edx
c0000585:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000587:	84 c9                	test   cl,cl
c0000589:	75 f5                	jne    c0000580 <strpbrk+0x20>
c000058b:	46                   	inc    esi
c000058c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000058e:	84 db                	test   bl,bl
c0000590:	75 e1                	jne    c0000573 <strpbrk+0x13>
c0000592:	31 f6                	xor    esi,esi
c0000594:	89 f0                	mov    eax,esi
c0000596:	5b                   	pop    ebx
c0000597:	5e                   	pop    esi
c0000598:	5f                   	pop    edi
c0000599:	c3                   	ret    
c000059a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005a0 <strtok>:
c00005a0:	56                   	push   esi
c00005a1:	53                   	push   ebx
c00005a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005aa:	85 db                	test   ebx,ebx
c00005ac:	75 07                	jne    c00005b5 <strtok+0x15>
c00005ae:	eb 30                	jmp    c00005e0 <strtok+0x40>
c00005b0:	43                   	inc    ebx
c00005b1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005b5:	56                   	push   esi
c00005b6:	53                   	push   ebx
c00005b7:	e8 a4 ff ff ff       	call   c0000560 <strpbrk>
c00005bc:	5a                   	pop    edx
c00005bd:	a3 e0 30 02 c0       	mov    ds:0xc00230e0,eax
c00005c2:	59                   	pop    ecx
c00005c3:	39 d8                	cmp    eax,ebx
c00005c5:	74 e9                	je     c00005b0 <strtok+0x10>
c00005c7:	85 c0                	test   eax,eax
c00005c9:	74 1f                	je     c00005ea <strtok+0x4a>
c00005cb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005ce:	8d 50 01             	lea    edx,[eax+0x1]
c00005d1:	89 d8                	mov    eax,ebx
c00005d3:	89 15 e0 30 02 c0    	mov    DWORD PTR ds:0xc00230e0,edx
c00005d9:	5b                   	pop    ebx
c00005da:	5e                   	pop    esi
c00005db:	c3                   	ret    
c00005dc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005e0:	8b 1d e0 30 02 c0    	mov    ebx,DWORD PTR ds:0xc00230e0
c00005e6:	85 db                	test   ebx,ebx
c00005e8:	75 cb                	jne    c00005b5 <strtok+0x15>
c00005ea:	31 c0                	xor    eax,eax
c00005ec:	5b                   	pop    ebx
c00005ed:	5e                   	pop    esi
c00005ee:	c3                   	ret    
c00005ef:	90                   	nop

c00005f0 <strcpy>:
c00005f0:	53                   	push   ebx
c00005f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00005f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00005f9:	89 c3                	mov    ebx,eax
c00005fb:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005fd:	84 d2                	test   dl,dl
c00005ff:	74 19                	je     c000061a <strcpy+0x2a>
c0000601:	eb 0d                	jmp    c0000610 <strcpy+0x20>
c0000603:	90                   	nop
c0000604:	90                   	nop
c0000605:	90                   	nop
c0000606:	90                   	nop
c0000607:	90                   	nop
c0000608:	90                   	nop
c0000609:	90                   	nop
c000060a:	90                   	nop
c000060b:	90                   	nop
c000060c:	90                   	nop
c000060d:	90                   	nop
c000060e:	90                   	nop
c000060f:	90                   	nop
c0000610:	88 13                	mov    BYTE PTR [ebx],dl
c0000612:	41                   	inc    ecx
c0000613:	43                   	inc    ebx
c0000614:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000616:	84 d2                	test   dl,dl
c0000618:	75 f6                	jne    c0000610 <strcpy+0x20>
c000061a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000061d:	5b                   	pop    ebx
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strncpy>:
c0000620:	57                   	push   edi
c0000621:	56                   	push   esi
c0000622:	53                   	push   ebx
c0000623:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000627:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000062b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000062f:	85 ff                	test   edi,edi
c0000631:	74 3e                	je     c0000671 <strncpy+0x51>
c0000633:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000635:	8d 47 ff             	lea    eax,[edi-0x1]
c0000638:	8d 4a 01             	lea    ecx,[edx+0x1]
c000063b:	88 1a                	mov    BYTE PTR [edx],bl
c000063d:	84 db                	test   bl,bl
c000063f:	74 3f                	je     c0000680 <strncpy+0x60>
c0000641:	85 c0                	test   eax,eax
c0000643:	74 2c                	je     c0000671 <strncpy+0x51>
c0000645:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000648:	8d 47 fe             	lea    eax,[edi-0x2]
c000064b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000064e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000651:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000654:	84 db                	test   bl,bl
c0000656:	75 15                	jne    c000066d <strncpy+0x4d>
c0000658:	eb 26                	jmp    c0000680 <strncpy+0x60>
c000065a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000660:	47                   	inc    edi
c0000661:	41                   	inc    ecx
c0000662:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000665:	48                   	dec    eax
c0000666:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000669:	84 db                	test   bl,bl
c000066b:	74 13                	je     c0000680 <strncpy+0x60>
c000066d:	85 c0                	test   eax,eax
c000066f:	75 ef                	jne    c0000660 <strncpy+0x40>
c0000671:	5b                   	pop    ebx
c0000672:	89 d0                	mov    eax,edx
c0000674:	5e                   	pop    esi
c0000675:	5f                   	pop    edi
c0000676:	c3                   	ret    
c0000677:	89 f6                	mov    esi,esi
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000680:	85 c0                	test   eax,eax
c0000682:	74 ed                	je     c0000671 <strncpy+0x51>
c0000684:	83 f8 04             	cmp    eax,0x4
c0000687:	73 17                	jae    c00006a0 <strncpy+0x80>
c0000689:	85 c0                	test   eax,eax
c000068b:	74 e4                	je     c0000671 <strncpy+0x51>
c000068d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0000690:	a8 02                	test   al,0x2
c0000692:	74 dd                	je     c0000671 <strncpy+0x51>
c0000694:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c000069b:	eb d4                	jmp    c0000671 <strncpy+0x51>
c000069d:	8d 76 00             	lea    esi,[esi+0x0]
c00006a0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006a6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006a9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006b1:	83 e7 fc             	and    edi,0xfffffffc
c00006b4:	29 f9                	sub    ecx,edi
c00006b6:	01 c1                	add    ecx,eax
c00006b8:	c1 e9 02             	shr    ecx,0x2
c00006bb:	fc                   	cld    
c00006bc:	31 c0                	xor    eax,eax
c00006be:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006c0:	89 d0                	mov    eax,edx
c00006c2:	5b                   	pop    ebx
c00006c3:	5e                   	pop    esi
c00006c4:	5f                   	pop    edi
c00006c5:	c3                   	ret    
c00006c6:	8d 76 00             	lea    esi,[esi+0x0]
c00006c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006d0 <strcmp>:
c00006d0:	56                   	push   esi
c00006d1:	53                   	push   ebx
c00006d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006da:	8a 16                	mov    dl,BYTE PTR [esi]
c00006dc:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006de:	38 d1                	cmp    cl,dl
c00006e0:	75 1d                	jne    c00006ff <strcmp+0x2f>
c00006e2:	84 c9                	test   cl,cl
c00006e4:	74 2a                	je     c0000710 <strcmp+0x40>
c00006e6:	b8 01 00 00 00       	mov    eax,0x1
c00006eb:	eb 08                	jmp    c00006f5 <strcmp+0x25>
c00006ed:	8d 76 00             	lea    esi,[esi+0x0]
c00006f0:	40                   	inc    eax
c00006f1:	84 d2                	test   dl,dl
c00006f3:	74 1b                	je     c0000710 <strcmp+0x40>
c00006f5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00006f8:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c00006fb:	38 ca                	cmp    dl,cl
c00006fd:	74 f1                	je     c00006f0 <strcmp+0x20>
c00006ff:	31 c0                	xor    eax,eax
c0000701:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000707:	88 d0                	mov    al,dl
c0000709:	5b                   	pop    ebx
c000070a:	29 c8                	sub    eax,ecx
c000070c:	5e                   	pop    esi
c000070d:	c3                   	ret    
c000070e:	66 90                	xchg   ax,ax
c0000710:	31 c0                	xor    eax,eax
c0000712:	5b                   	pop    ebx
c0000713:	5e                   	pop    esi
c0000714:	c3                   	ret    
c0000715:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000719:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000720 <strchr>:
c0000720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000724:	8a 10                	mov    dl,BYTE PTR [eax]
c0000726:	84 d2                	test   dl,dl
c0000728:	74 21                	je     c000074b <strchr+0x2b>
c000072a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000072e:	38 ca                	cmp    dl,cl
c0000730:	75 12                	jne    c0000744 <strchr+0x24>
c0000732:	eb 1a                	jmp    c000074e <strchr+0x2e>
c0000734:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000073a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000740:	38 ca                	cmp    dl,cl
c0000742:	74 09                	je     c000074d <strchr+0x2d>
c0000744:	40                   	inc    eax
c0000745:	8a 10                	mov    dl,BYTE PTR [eax]
c0000747:	84 d2                	test   dl,dl
c0000749:	75 f5                	jne    c0000740 <strchr+0x20>
c000074b:	31 c0                	xor    eax,eax
c000074d:	c3                   	ret    
c000074e:	c3                   	ret    
c000074f:	90                   	nop

c0000750 <strncmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000757:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000075b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000075f:	85 ff                	test   edi,edi
c0000761:	74 2f                	je     c0000792 <strncmp+0x42>
c0000763:	8a 16                	mov    dl,BYTE PTR [esi]
c0000765:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000767:	38 d1                	cmp    cl,dl
c0000769:	75 35                	jne    c00007a0 <strncmp+0x50>
c000076b:	8d 46 01             	lea    eax,[esi+0x1]
c000076e:	84 c9                	test   cl,cl
c0000770:	74 20                	je     c0000792 <strncmp+0x42>
c0000772:	01 fe                	add    esi,edi
c0000774:	eb 17                	jmp    c000078d <strncmp+0x3d>
c0000776:	8d 76 00             	lea    esi,[esi+0x0]
c0000779:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000780:	8a 10                	mov    dl,BYTE PTR [eax]
c0000782:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000784:	38 ca                	cmp    dl,cl
c0000786:	75 18                	jne    c00007a0 <strncmp+0x50>
c0000788:	40                   	inc    eax
c0000789:	84 d2                	test   dl,dl
c000078b:	74 05                	je     c0000792 <strncmp+0x42>
c000078d:	43                   	inc    ebx
c000078e:	39 c6                	cmp    esi,eax
c0000790:	75 ee                	jne    c0000780 <strncmp+0x30>
c0000792:	5b                   	pop    ebx
c0000793:	31 c0                	xor    eax,eax
c0000795:	5e                   	pop    esi
c0000796:	5f                   	pop    edi
c0000797:	c3                   	ret    
c0000798:	90                   	nop
c0000799:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007a0:	5b                   	pop    ebx
c00007a1:	31 c0                	xor    eax,eax
c00007a3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007a9:	88 d0                	mov    al,dl
c00007ab:	5e                   	pop    esi
c00007ac:	29 c8                	sub    eax,ecx
c00007ae:	5f                   	pop    edi
c00007af:	c3                   	ret    

c00007b0 <strcat>:
c00007b0:	56                   	push   esi
c00007b1:	53                   	push   ebx
c00007b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ba:	89 c3                	mov    ebx,eax
c00007bc:	eb 04                	jmp    c00007c2 <strcat+0x12>
c00007be:	66 90                	xchg   ax,ax
c00007c0:	89 d3                	mov    ebx,edx
c00007c2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007c9:	75 f5                	jne    c00007c0 <strcat+0x10>
c00007cb:	31 d2                	xor    edx,edx
c00007cd:	8d 76 00             	lea    esi,[esi+0x0]
c00007d0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007d3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007d6:	42                   	inc    edx
c00007d7:	84 c9                	test   cl,cl
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x20>
c00007db:	5b                   	pop    ebx
c00007dc:	5e                   	pop    esi
c00007dd:	c3                   	ret    
c00007de:	66 90                	xchg   ax,ax

c00007e0 <strncat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007ee:	85 f6                	test   esi,esi
c00007f0:	74 2e                	je     c0000820 <strncat+0x40>
c00007f2:	89 c2                	mov    edx,eax
c00007f4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00007fa:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000800:	42                   	inc    edx
c0000801:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000805:	75 f9                	jne    c0000800 <strncat+0x20>
c0000807:	01 ce                	add    esi,ecx
c0000809:	eb 0a                	jmp    c0000815 <strncat+0x35>
c000080b:	90                   	nop
c000080c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000810:	39 f1                	cmp    ecx,esi
c0000812:	74 1c                	je     c0000830 <strncat+0x50>
c0000814:	42                   	inc    edx
c0000815:	41                   	inc    ecx
c0000816:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000819:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000081c:	84 db                	test   bl,bl
c000081e:	75 f0                	jne    c0000810 <strncat+0x30>
c0000820:	5b                   	pop    ebx
c0000821:	5e                   	pop    esi
c0000822:	c3                   	ret    
c0000823:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000829:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000830:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000833:	5b                   	pop    ebx
c0000834:	5e                   	pop    esi
c0000835:	c3                   	ret    
c0000836:	8d 76 00             	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000840 <strstr>:
c0000840:	57                   	push   edi
c0000841:	56                   	push   esi
c0000842:	53                   	push   ebx
c0000843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000847:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084b:	57                   	push   edi
c000084c:	e8 df fc ff ff       	call   c0000530 <strlen>
c0000851:	59                   	pop    ecx
c0000852:	85 c0                	test   eax,eax
c0000854:	74 3a                	je     c0000890 <strstr+0x50>
c0000856:	89 c6                	mov    esi,eax
c0000858:	eb 16                	jmp    c0000870 <strstr+0x30>
c000085a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000860:	56                   	push   esi
c0000861:	57                   	push   edi
c0000862:	53                   	push   ebx
c0000863:	e8 18 fb ff ff       	call   c0000380 <memcmp>
c0000868:	83 c4 0c             	add    esp,0xc
c000086b:	85 c0                	test   eax,eax
c000086d:	74 21                	je     c0000890 <strstr+0x50>
c000086f:	43                   	inc    ebx
c0000870:	53                   	push   ebx
c0000871:	e8 ba fc ff ff       	call   c0000530 <strlen>
c0000876:	5a                   	pop    edx
c0000877:	39 f0                	cmp    eax,esi
c0000879:	73 e5                	jae    c0000860 <strstr+0x20>
c000087b:	5b                   	pop    ebx
c000087c:	31 c0                	xor    eax,eax
c000087e:	5e                   	pop    esi
c000087f:	5f                   	pop    edi
c0000880:	c3                   	ret    
c0000881:	eb 0d                	jmp    c0000890 <strstr+0x50>
c0000883:	90                   	nop
c0000884:	90                   	nop
c0000885:	90                   	nop
c0000886:	90                   	nop
c0000887:	90                   	nop
c0000888:	90                   	nop
c0000889:	90                   	nop
c000088a:	90                   	nop
c000088b:	90                   	nop
c000088c:	90                   	nop
c000088d:	90                   	nop
c000088e:	90                   	nop
c000088f:	90                   	nop
c0000890:	89 d8                	mov    eax,ebx
c0000892:	5b                   	pop    ebx
c0000893:	5e                   	pop    esi
c0000894:	5f                   	pop    edi
c0000895:	c3                   	ret    
c0000896:	8d 76 00             	lea    esi,[esi+0x0]
c0000899:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008a0 <toupper>:
c00008a0:	31 d2                	xor    edx,edx
c00008a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008a6:	88 c2                	mov    dl,al
c00008a8:	f6 82 80 e7 01 c0 02 	test   BYTE PTR [edx-0x3ffe1880],0x2
c00008af:	74 03                	je     c00008b4 <toupper+0x14>
c00008b1:	83 e8 20             	sub    eax,0x20
c00008b4:	c3                   	ret    
c00008b5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008c0 <tolower>:
c00008c0:	31 d2                	xor    edx,edx
c00008c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008c6:	88 c2                	mov    dl,al
c00008c8:	f6 82 80 e7 01 c0 01 	test   BYTE PTR [edx-0x3ffe1880],0x1
c00008cf:	74 03                	je     c00008d4 <tolower+0x14>
c00008d1:	83 c0 20             	add    eax,0x20
c00008d4:	c3                   	ret    
c00008d5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008e0 <simple_strtoul>:
c00008e0:	55                   	push   ebp
c00008e1:	57                   	push   edi
c00008e2:	56                   	push   esi
c00008e3:	53                   	push   ebx
c00008e4:	83 ec 08             	sub    esp,0x8
c00008e7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ef:	90                   	nop
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8a 01                	mov    al,BYTE PTR [ecx]
c00008f4:	88 c2                	mov    dl,al
c00008f6:	f6 82 80 e7 01 c0 08 	test   BYTE PTR [edx-0x3ffe1880],0x8
c00008fd:	75 04                	jne    c0000903 <simple_strtoul+0x23>
c00008ff:	3c 09                	cmp    al,0x9
c0000901:	75 0d                	jne    c0000910 <simple_strtoul+0x30>
c0000903:	41                   	inc    ecx
c0000904:	eb ea                	jmp    c00008f0 <simple_strtoul+0x10>
c0000906:	8d 76 00             	lea    esi,[esi+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000910:	3c 2d                	cmp    al,0x2d
c0000912:	0f 84 48 01 00 00    	je     c0000a60 <simple_strtoul+0x180>
c0000918:	3c 2b                	cmp    al,0x2b
c000091a:	0f 84 e0 00 00 00    	je     c0000a00 <simple_strtoul+0x120>
c0000920:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000928:	85 f6                	test   esi,esi
c000092a:	0f 85 e1 00 00 00    	jne    c0000a11 <simple_strtoul+0x131>
c0000930:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000933:	80 fa 30             	cmp    dl,0x30
c0000936:	0f 84 75 01 00 00    	je     c0000ab1 <simple_strtoul+0x1d1>
c000093c:	be 0a 00 00 00       	mov    esi,0xa
c0000941:	84 d2                	test   dl,dl
c0000943:	0f 84 9f 01 00 00    	je     c0000ae8 <simple_strtoul+0x208>
c0000949:	31 ed                	xor    ebp,ebp
c000094b:	31 ff                	xor    edi,edi
c000094d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000954:	eb 35                	jmp    c000098b <simple_strtoul+0xab>
c0000956:	8d 76 00             	lea    esi,[esi+0x0]
c0000959:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000960:	83 eb 30             	sub    ebx,0x30
c0000963:	39 f3                	cmp    ebx,esi
c0000965:	73 59                	jae    c00009c0 <simple_strtoul+0xe0>
c0000967:	31 d2                	xor    edx,edx
c0000969:	89 d8                	mov    eax,ebx
c000096b:	f7 d0                	not    eax
c000096d:	f7 f6                	div    esi
c000096f:	39 f8                	cmp    eax,edi
c0000971:	0f 82 c9 00 00 00    	jb     c0000a40 <simple_strtoul+0x160>
c0000977:	0f af fe             	imul   edi,esi
c000097a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000981:	01 df                	add    edi,ebx
c0000983:	41                   	inc    ecx
c0000984:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000987:	84 d2                	test   dl,dl
c0000989:	74 35                	je     c00009c0 <simple_strtoul+0xe0>
c000098b:	31 db                	xor    ebx,ebx
c000098d:	88 d3                	mov    bl,dl
c000098f:	f6 83 80 e7 01 c0 04 	test   BYTE PTR [ebx-0x3ffe1880],0x4
c0000996:	75 c8                	jne    c0000960 <simple_strtoul+0x80>
c0000998:	52                   	push   edx
c0000999:	e8 02 ff ff ff       	call   c00008a0 <toupper>
c000099e:	31 d2                	xor    edx,edx
c00009a0:	5b                   	pop    ebx
c00009a1:	88 c2                	mov    dl,al
c00009a3:	f6 82 80 e7 01 c0 01 	test   BYTE PTR [edx-0x3ffe1880],0x1
c00009aa:	74 14                	je     c00009c0 <simple_strtoul+0xe0>
c00009ac:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009af:	39 f3                	cmp    ebx,esi
c00009b1:	72 b4                	jb     c0000967 <simple_strtoul+0x87>
c00009b3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c4:	85 c0                	test   eax,eax
c00009c6:	74 18                	je     c00009e0 <simple_strtoul+0x100>
c00009c8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009cb:	09 f8                	or     eax,edi
c00009cd:	0f 85 7d 00 00 00    	jne    c0000a50 <simple_strtoul+0x170>
c00009d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009db:	31 ff                	xor    edi,edi
c00009dd:	89 30                	mov    DWORD PTR [eax],esi
c00009df:	90                   	nop
c00009e0:	4d                   	dec    ebp
c00009e1:	75 05                	jne    c00009e8 <simple_strtoul+0x108>
c00009e3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009e8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009ed:	75 02                	jne    c00009f1 <simple_strtoul+0x111>
c00009ef:	f7 df                	neg    edi
c00009f1:	83 c4 08             	add    esp,0x8
c00009f4:	89 f8                	mov    eax,edi
c00009f6:	5b                   	pop    ebx
c00009f7:	5e                   	pop    esi
c00009f8:	5f                   	pop    edi
c00009f9:	5d                   	pop    ebp
c00009fa:	c3                   	ret    
c00009fb:	90                   	nop
c00009fc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a00:	41                   	inc    ecx
c0000a01:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a09:	85 f6                	test   esi,esi
c0000a0b:	0f 84 1f ff ff ff    	je     c0000930 <simple_strtoul+0x50>
c0000a11:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a14:	83 f8 22             	cmp    eax,0x22
c0000a17:	77 7b                	ja     c0000a94 <simple_strtoul+0x1b4>
c0000a19:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a1c:	83 fe 08             	cmp    esi,0x8
c0000a1f:	0f 84 b3 00 00 00    	je     c0000ad8 <simple_strtoul+0x1f8>
c0000a25:	83 fe 10             	cmp    esi,0x10
c0000a28:	0f 85 13 ff ff ff    	jne    c0000941 <simple_strtoul+0x61>
c0000a2e:	80 fa 30             	cmp    dl,0x30
c0000a31:	74 3b                	je     c0000a6e <simple_strtoul+0x18e>
c0000a33:	be 10 00 00 00       	mov    esi,0x10
c0000a38:	e9 04 ff ff ff       	jmp    c0000941 <simple_strtoul+0x61>
c0000a3d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a40:	bd 01 00 00 00       	mov    ebp,0x1
c0000a45:	31 ff                	xor    edi,edi
c0000a47:	e9 37 ff ff ff       	jmp    c0000983 <simple_strtoul+0xa3>
c0000a4c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a54:	89 08                	mov    DWORD PTR [eax],ecx
c0000a56:	eb 88                	jmp    c00009e0 <simple_strtoul+0x100>
c0000a58:	90                   	nop
c0000a59:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a60:	41                   	inc    ecx
c0000a61:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a69:	e9 ba fe ff ff       	jmp    c0000928 <simple_strtoul+0x48>
c0000a6e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a72:	88 04 24             	mov    BYTE PTR [esp],al
c0000a75:	50                   	push   eax
c0000a76:	e8 45 fe ff ff       	call   c00008c0 <tolower>
c0000a7b:	5e                   	pop    esi
c0000a7c:	83 f8 78             	cmp    eax,0x78
c0000a7f:	0f 84 88 00 00 00    	je     c0000b0d <simple_strtoul+0x22d>
c0000a85:	41                   	inc    ecx
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a8f:	e9 ad fe ff ff       	jmp    c0000941 <simple_strtoul+0x61>
c0000a94:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000a98:	85 ff                	test   edi,edi
c0000a9a:	74 5e                	je     c0000afa <simple_strtoul+0x21a>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	85 c9                	test   ecx,ecx
c0000aa2:	75 50                	jne    c0000af4 <simple_strtoul+0x214>
c0000aa4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aaa:	31 ff                	xor    edi,edi
c0000aac:	e9 37 ff ff ff       	jmp    c00009e8 <simple_strtoul+0x108>
c0000ab1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab8:	50                   	push   eax
c0000ab9:	e8 02 fe ff ff       	call   c00008c0 <tolower>
c0000abe:	5d                   	pop    ebp
c0000abf:	83 f8 78             	cmp    eax,0x78
c0000ac2:	74 3d                	je     c0000b01 <simple_strtoul+0x221>
c0000ac4:	41                   	inc    ecx
c0000ac5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ac9:	80 fa 30             	cmp    dl,0x30
c0000acc:	74 13                	je     c0000ae1 <simple_strtoul+0x201>
c0000ace:	be 08 00 00 00       	mov    esi,0x8
c0000ad3:	e9 69 fe ff ff       	jmp    c0000941 <simple_strtoul+0x61>
c0000ad8:	80 fa 30             	cmp    dl,0x30
c0000adb:	0f 85 60 fe ff ff    	jne    c0000941 <simple_strtoul+0x61>
c0000ae1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000ae5:	41                   	inc    ecx
c0000ae6:	eb e6                	jmp    c0000ace <simple_strtoul+0x1ee>
c0000ae8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000aec:	85 d2                	test   edx,edx
c0000aee:	74 0a                	je     c0000afa <simple_strtoul+0x21a>
c0000af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000af4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000af8:	89 30                	mov    DWORD PTR [eax],esi
c0000afa:	31 ff                	xor    edi,edi
c0000afc:	e9 e7 fe ff ff       	jmp    c00009e8 <simple_strtoul+0x108>
c0000b01:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b05:	83 c1 02             	add    ecx,0x2
c0000b08:	e9 21 ff ff ff       	jmp    c0000a2e <simple_strtoul+0x14e>
c0000b0d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b11:	be 10 00 00 00       	mov    esi,0x10
c0000b16:	83 c1 02             	add    ecx,0x2
c0000b19:	e9 23 fe ff ff       	jmp    c0000941 <simple_strtoul+0x61>

c0000b1e <largebin_index>:
c0000b1e:	89 c2                	mov    edx,eax
c0000b20:	c1 ea 08             	shr    edx,0x8
c0000b23:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b29:	77 10                	ja     c0000b3b <largebin_index+0x1d>
c0000b2b:	0f bd d2             	bsr    edx,edx
c0000b2e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b31:	d3 e8                	shr    eax,cl
c0000b33:	83 e0 03             	and    eax,0x3
c0000b36:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b3a:	c3                   	ret    
c0000b3b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b40:	c3                   	ret    

c0000b41 <malloc_init_state>:
c0000b41:	53                   	push   ebx
c0000b42:	8d 50 34             	lea    edx,[eax+0x34]
c0000b45:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b4b:	89 d1                	mov    ecx,edx
c0000b4d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b50:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b53:	83 c2 08             	add    edx,0x8
c0000b56:	39 da                	cmp    edx,ebx
c0000b58:	75 f3                	jne    c0000b4d <malloc_init_state+0xc>
c0000b5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b5c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b66:	83 e2 03             	and    edx,0x3
c0000b69:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b73:	83 ca 48             	or     edx,0x48
c0000b76:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b80:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b8a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000b91:	89 10                	mov    DWORD PTR [eax],edx
c0000b93:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000b96:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000ba0:	5b                   	pop    ebx
c0000ba1:	c3                   	ret    

c0000ba2 <malloc_consolidate>:
c0000ba2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ba4:	85 d2                	test   edx,edx
c0000ba6:	0f 84 d8 00 00 00    	je     c0000c84 <malloc_consolidate+0xe2>
c0000bac:	55                   	push   ebp
c0000bad:	83 e2 fd             	and    edx,0xfffffffd
c0000bb0:	57                   	push   edi
c0000bb1:	89 c5                	mov    ebp,eax
c0000bb3:	56                   	push   esi
c0000bb4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bb7:	53                   	push   ebx
c0000bb8:	83 ec 10             	sub    esp,0x10
c0000bbb:	89 10                	mov    DWORD PTR [eax],edx
c0000bbd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bc1:	c1 ea 03             	shr    edx,0x3
c0000bc4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bc8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bcc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bcf:	85 d2                	test   edx,edx
c0000bd1:	0f 84 98 00 00 00    	je     c0000c6f <malloc_consolidate+0xcd>
c0000bd7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bde:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000be1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000be4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000be8:	89 f9                	mov    ecx,edi
c0000bea:	83 e1 fe             	and    ecx,0xfffffffe
c0000bed:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000bf0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000bf3:	83 e3 fc             	and    ebx,0xfffffffc
c0000bf6:	83 e7 01             	and    edi,0x1
c0000bf9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000bfc:	75 14                	jne    c0000c12 <malloc_consolidate+0x70>
c0000bfe:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c00:	29 fa                	sub    edx,edi
c0000c02:	01 f9                	add    ecx,edi
c0000c04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c07:	89 fb                	mov    ebx,edi
c0000c09:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c0c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c0f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c12:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c15:	74 40                	je     c0000c57 <malloc_consolidate+0xb5>
c0000c17:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c1a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c1d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c21:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c24:	83 e7 01             	and    edi,0x1
c0000c27:	75 0e                	jne    c0000c37 <malloc_consolidate+0x95>
c0000c29:	01 d9                	add    ecx,ebx
c0000c2b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c2e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c31:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c34:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c37:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c3a:	89 ce                	mov    esi,ecx
c0000c3c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c3f:	83 ce 01             	or     esi,0x1
c0000c42:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c45:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c48:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c4b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c4f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c52:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c55:	eb 0c                	jmp    c0000c63 <malloc_consolidate+0xc1>
c0000c57:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c5a:	83 c9 01             	or     ecx,0x1
c0000c5d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c60:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c67:	85 d2                	test   edx,edx
c0000c69:	0f 85 6f ff ff ff    	jne    c0000bde <malloc_consolidate+0x3c>
c0000c6f:	83 c5 04             	add    ebp,0x4
c0000c72:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c76:	0f 85 50 ff ff ff    	jne    c0000bcc <malloc_consolidate+0x2a>
c0000c7c:	83 c4 10             	add    esp,0x10
c0000c7f:	5b                   	pop    ebx
c0000c80:	5e                   	pop    esi
c0000c81:	5f                   	pop    edi
c0000c82:	5d                   	pop    ebp
c0000c83:	c3                   	ret    
c0000c84:	e9 b8 fe ff ff       	jmp    c0000b41 <malloc_init_state>

c0000c89 <dlfree>:
c0000c89:	57                   	push   edi
c0000c8a:	56                   	push   esi
c0000c8b:	53                   	push   ebx
c0000c8c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000c90:	85 db                	test   ebx,ebx
c0000c92:	0f 84 e2 00 00 00    	je     c0000d7a <dlfree+0xf1>
c0000c98:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000c9b:	8b 0d 00 31 02 c0    	mov    ecx,DWORD PTR ds:0xc0023100
c0000ca1:	89 f0                	mov    eax,esi
c0000ca3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ca6:	83 e0 fc             	and    eax,0xfffffffc
c0000ca9:	39 c1                	cmp    ecx,eax
c0000cab:	72 24                	jb     c0000cd1 <dlfree+0x48>
c0000cad:	83 c9 03             	or     ecx,0x3
c0000cb0:	c1 e8 03             	shr    eax,0x3
c0000cb3:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000cb9:	83 e8 02             	sub    eax,0x2
c0000cbc:	8b 0c 85 04 31 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcefc]
c0000cc3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cc5:	89 14 85 04 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcefc],edx
c0000ccc:	e9 a9 00 00 00       	jmp    c0000d7a <dlfree+0xf1>
c0000cd1:	83 e6 02             	and    esi,0x2
c0000cd4:	0f 85 a0 00 00 00    	jne    c0000d7a <dlfree+0xf1>
c0000cda:	83 c9 01             	or     ecx,0x1
c0000cdd:	8d 34 02             	lea    esi,[edx+eax*1]
c0000ce0:	89 0d 00 31 02 c0    	mov    DWORD PTR ds:0xc0023100,ecx
c0000ce6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000ce9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cec:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000cf0:	75 13                	jne    c0000d05 <dlfree+0x7c>
c0000cf2:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000cf5:	29 da                	sub    edx,ebx
c0000cf7:	01 d8                	add    eax,ebx
c0000cf9:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cfc:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000cff:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d02:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d05:	39 35 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,esi
c0000d0b:	74 40                	je     c0000d4d <dlfree+0xc4>
c0000d0d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d11:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d14:	80 e3 01             	and    bl,0x1
c0000d17:	75 0e                	jne    c0000d27 <dlfree+0x9e>
c0000d19:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d1c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d1f:	01 c8                	add    eax,ecx
c0000d21:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d24:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d27:	8b 0d 3c 31 02 c0    	mov    ecx,DWORD PTR ds:0xc002313c
c0000d2d:	c7 42 0c 34 31 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023134
c0000d34:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d37:	89 15 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edx
c0000d3d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d40:	89 c1                	mov    ecx,eax
c0000d42:	83 c9 01             	or     ecx,0x1
c0000d45:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d48:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d4b:	eb 10                	jmp    c0000d5d <dlfree+0xd4>
c0000d4d:	01 c8                	add    eax,ecx
c0000d4f:	89 c1                	mov    ecx,eax
c0000d51:	83 c9 01             	or     ecx,0x1
c0000d54:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d57:	89 15 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edx
c0000d5d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d62:	76 16                	jbe    c0000d7a <dlfree+0xf1>
c0000d64:	f6 05 00 31 02 c0 02 	test   BYTE PTR ds:0xc0023100,0x2
c0000d6b:	74 0d                	je     c0000d7a <dlfree+0xf1>
c0000d6d:	5b                   	pop    ebx
c0000d6e:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0000d73:	5e                   	pop    esi
c0000d74:	5f                   	pop    edi
c0000d75:	e9 28 fe ff ff       	jmp    c0000ba2 <malloc_consolidate>
c0000d7a:	5b                   	pop    ebx
c0000d7b:	5e                   	pop    esi
c0000d7c:	5f                   	pop    edi
c0000d7d:	c3                   	ret    

c0000d7e <sYSMALLOc>:
c0000d7e:	55                   	push   ebp
c0000d7f:	57                   	push   edi
c0000d80:	56                   	push   esi
c0000d81:	53                   	push   ebx
c0000d82:	89 d3                	mov    ebx,edx
c0000d84:	83 ec 2c             	sub    esp,0x2c
c0000d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d8b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000d91:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000d94:	8d 42 ff             	lea    eax,[edx-0x1]
c0000d97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000d9b:	74 1f                	je     c0000dbc <sYSMALLOc+0x3e>
c0000d9d:	89 d8                	mov    eax,ebx
c0000d9f:	e8 fe fd ff ff       	call   c0000ba2 <malloc_consolidate>
c0000da4:	83 ec 0c             	sub    esp,0xc
c0000da7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dab:	83 e8 07             	sub    eax,0x7
c0000dae:	50                   	push   eax
c0000daf:	e8 30 02 00 00       	call   c0000fe4 <dlmalloc>
c0000db4:	83 c4 10             	add    esp,0x10
c0000db7:	e9 20 02 00 00       	jmp    c0000fdc <sYSMALLOc+0x25e>
c0000dbc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dbf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dc5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dc8:	83 e0 fc             	and    eax,0xfffffffc
c0000dcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000dd3:	83 c0 10             	add    eax,0x10
c0000dd6:	01 c1                	add    ecx,eax
c0000dd8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ddc:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000de3:	74 04                	je     c0000de9 <sYSMALLOc+0x6b>
c0000de5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000de9:	f7 da                	neg    edx
c0000deb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000def:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000df3:	21 d1                	and    ecx,edx
c0000df5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000df9:	7f 07                	jg     c0000e02 <sYSMALLOc+0x84>
c0000dfb:	31 c0                	xor    eax,eax
c0000dfd:	e9 da 01 00 00       	jmp    c0000fdc <sYSMALLOc+0x25e>
c0000e02:	83 ec 0c             	sub    esp,0xc
c0000e05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e09:	e8 2e 69 00 00       	call   c000773c <sbrk>
c0000e0e:	83 c4 10             	add    esp,0x10
c0000e11:	89 c6                	mov    esi,eax
c0000e13:	83 f8 ff             	cmp    eax,0xffffffff
c0000e16:	74 e3                	je     c0000dfb <sYSMALLOc+0x7d>
c0000e18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e20:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e23:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e29:	39 f1                	cmp    ecx,esi
c0000e2b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e31:	75 13                	jne    c0000e46 <sYSMALLOc+0xc8>
c0000e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e37:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e3b:	83 c8 01             	or     eax,0x1
c0000e3e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e41:	e9 3e 01 00 00       	jmp    c0000f84 <sYSMALLOc+0x206>
c0000e46:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e4c:	88 d0                	mov    al,dl
c0000e4e:	83 e0 01             	and    eax,0x1
c0000e51:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e56:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e5a:	0f 95 c0             	setne  al
c0000e5d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e61:	39 f1                	cmp    ecx,esi
c0000e63:	76 12                	jbe    c0000e77 <sYSMALLOc+0xf9>
c0000e65:	84 c0                	test   al,al
c0000e67:	74 0e                	je     c0000e77 <sYSMALLOc+0xf9>
c0000e69:	83 e2 fe             	and    edx,0xfffffffe
c0000e6c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e72:	e9 83 00 00 00       	jmp    c0000efa <sYSMALLOc+0x17c>
c0000e77:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e7c:	74 7c                	je     c0000efa <sYSMALLOc+0x17c>
c0000e7e:	84 c0                	test   al,al
c0000e80:	74 0c                	je     c0000e8e <sYSMALLOc+0x110>
c0000e82:	89 f0                	mov    eax,esi
c0000e84:	29 c8                	sub    eax,ecx
c0000e86:	01 e8                	add    eax,ebp
c0000e88:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e8e:	89 f2                	mov    edx,esi
c0000e90:	83 e2 07             	and    edx,0x7
c0000e93:	74 0c                	je     c0000ea1 <sYSMALLOc+0x123>
c0000e95:	b8 08 00 00 00       	mov    eax,0x8
c0000e9a:	29 d0                	sub    eax,edx
c0000e9c:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000e9f:	eb 04                	jmp    c0000ea5 <sYSMALLOc+0x127>
c0000ea1:	89 f5                	mov    ebp,esi
c0000ea3:	31 c0                	xor    eax,eax
c0000ea5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ea9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000eb1:	01 c1                	add    ecx,eax
c0000eb3:	83 ec 0c             	sub    esp,0xc
c0000eb6:	01 f1                	add    ecx,esi
c0000eb8:	01 ca                	add    edx,ecx
c0000eba:	29 c8                	sub    eax,ecx
c0000ebc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ec0:	01 c2                	add    edx,eax
c0000ec2:	52                   	push   edx
c0000ec3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ec7:	e8 70 68 00 00       	call   c000773c <sbrk>
c0000ecc:	83 c4 10             	add    esp,0x10
c0000ecf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ed2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ed6:	75 0f                	jne    c0000ee7 <sYSMALLOc+0x169>
c0000ed8:	83 ec 0c             	sub    esp,0xc
c0000edb:	6a 00                	push   0x0
c0000edd:	e8 5a 68 00 00       	call   c000773c <sbrk>
c0000ee2:	83 c4 10             	add    esp,0x10
c0000ee5:	eb 30                	jmp    c0000f17 <sYSMALLOc+0x199>
c0000ee7:	39 c6                	cmp    esi,eax
c0000ee9:	76 33                	jbe    c0000f1e <sYSMALLOc+0x1a0>
c0000eeb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eef:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000ef6:	01 f0                	add    eax,esi
c0000ef8:	eb 1d                	jmp    c0000f17 <sYSMALLOc+0x199>
c0000efa:	83 ec 0c             	sub    esp,0xc
c0000efd:	89 f5                	mov    ebp,esi
c0000eff:	6a 00                	push   0x0
c0000f01:	e8 36 68 00 00       	call   c000773c <sbrk>
c0000f06:	89 c2                	mov    edx,eax
c0000f08:	29 f2                	sub    edx,esi
c0000f0a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f0e:	83 c4 10             	add    esp,0x10
c0000f11:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f17:	31 d2                	xor    edx,edx
c0000f19:	83 f8 ff             	cmp    eax,0xffffffff
c0000f1c:	74 66                	je     c0000f84 <sYSMALLOc+0x206>
c0000f1e:	29 e8                	sub    eax,ebp
c0000f20:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f23:	01 d0                	add    eax,edx
c0000f25:	83 c8 01             	or     eax,0x1
c0000f28:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f2b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f31:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f36:	74 4c                	je     c0000f84 <sYSMALLOc+0x206>
c0000f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f3c:	83 e8 0c             	sub    eax,0xc
c0000f3f:	83 e0 f8             	and    eax,0xfffffff8
c0000f42:	89 c2                	mov    edx,eax
c0000f44:	83 ca 01             	or     edx,0x1
c0000f47:	83 f8 0f             	cmp    eax,0xf
c0000f4a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f4d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f55:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f5d:	76 25                	jbe    c0000f84 <sYSMALLOc+0x206>
c0000f5f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f65:	83 ec 0c             	sub    esp,0xc
c0000f68:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f72:	83 c7 08             	add    edi,0x8
c0000f75:	57                   	push   edi
c0000f76:	e8 0e fd ff ff       	call   c0000c89 <dlfree>
c0000f7b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f81:	83 c4 10             	add    esp,0x10
c0000f84:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f8a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000f90:	73 06                	jae    c0000f98 <sYSMALLOc+0x21a>
c0000f92:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000f98:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000f9e:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fa4:	73 06                	jae    c0000fac <sYSMALLOc+0x22e>
c0000fa6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000faf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fb2:	83 e2 fc             	and    edx,0xfffffffc
c0000fb5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fb9:	0f 82 3c fe ff ff    	jb     c0000dfb <sYSMALLOc+0x7d>
c0000fbf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fc3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fc6:	29 fa                	sub    edx,edi
c0000fc8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fcb:	83 ca 01             	or     edx,0x1
c0000fce:	89 fb                	mov    ebx,edi
c0000fd0:	83 c0 08             	add    eax,0x8
c0000fd3:	83 cb 01             	or     ebx,0x1
c0000fd6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fd9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fdc:	83 c4 2c             	add    esp,0x2c
c0000fdf:	5b                   	pop    ebx
c0000fe0:	5e                   	pop    esi
c0000fe1:	5f                   	pop    edi
c0000fe2:	5d                   	pop    ebp
c0000fe3:	c3                   	ret    

c0000fe4 <dlmalloc>:
c0000fe4:	55                   	push   ebp
c0000fe5:	57                   	push   edi
c0000fe6:	56                   	push   esi
c0000fe7:	53                   	push   ebx
c0000fe8:	83 ec 1c             	sub    esp,0x1c
c0000feb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fef:	83 f8 df             	cmp    eax,0xffffffdf
c0000ff2:	0f 87 70 03 00 00    	ja     c0001368 <dlmalloc+0x384>
c0000ff8:	83 c0 0b             	add    eax,0xb
c0000ffb:	be 10 00 00 00       	mov    esi,0x10
c0001000:	83 f8 0f             	cmp    eax,0xf
c0001003:	76 05                	jbe    c000100a <dlmalloc+0x26>
c0001005:	83 e0 f8             	and    eax,0xfffffff8
c0001008:	89 c6                	mov    esi,eax
c000100a:	8b 3d 00 31 02 c0    	mov    edi,DWORD PTR ds:0xc0023100
c0001010:	f7 c7 01 00 00 00    	test   edi,0x1
c0001016:	75 17                	jne    c000102f <dlmalloc+0x4b>
c0001018:	85 ff                	test   edi,edi
c000101a:	0f 85 05 03 00 00    	jne    c0001325 <dlmalloc+0x341>
c0001020:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001025:	e8 78 fb ff ff       	call   c0000ba2 <malloc_consolidate>
c000102a:	e9 f6 02 00 00       	jmp    c0001325 <dlmalloc+0x341>
c000102f:	39 f7                	cmp    edi,esi
c0001031:	72 1f                	jb     c0001052 <dlmalloc+0x6e>
c0001033:	89 f2                	mov    edx,esi
c0001035:	c1 ea 03             	shr    edx,0x3
c0001038:	83 ea 02             	sub    edx,0x2
c000103b:	8b 04 95 04 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcefc]
c0001042:	85 c0                	test   eax,eax
c0001044:	74 0c                	je     c0001052 <dlmalloc+0x6e>
c0001046:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001049:	89 0c 95 04 31 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcefc],ecx
c0001050:	eb 30                	jmp    c0001082 <dlmalloc+0x9e>
c0001052:	89 f0                	mov    eax,esi
c0001054:	81 fe ff 00 00 00    	cmp    esi,0xff
c000105a:	77 2e                	ja     c000108a <dlmalloc+0xa6>
c000105c:	c1 e8 03             	shr    eax,0x3
c000105f:	8d 14 c5 34 31 02 c0 	lea    edx,[eax*8-0x3ffdcecc]
c0001066:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000106a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000106d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001070:	39 c3                	cmp    ebx,eax
c0001072:	74 2e                	je     c00010a2 <dlmalloc+0xbe>
c0001074:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001077:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000107c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000107f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001082:	83 c0 08             	add    eax,0x8
c0001085:	e9 e0 02 00 00       	jmp    c000136a <dlmalloc+0x386>
c000108a:	e8 8f fa ff ff       	call   c0000b1e <largebin_index>
c000108f:	83 e7 02             	and    edi,0x2
c0001092:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001096:	74 0a                	je     c00010a2 <dlmalloc+0xbe>
c0001098:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000109d:	e8 00 fb ff ff       	call   c0000ba2 <malloc_consolidate>
c00010a2:	8d 46 10             	lea    eax,[esi+0x10]
c00010a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010a9:	8b 1d 40 31 02 c0    	mov    ebx,DWORD PTR ds:0xc0023140
c00010af:	81 fb 34 31 02 c0    	cmp    ebx,0xc0023134
c00010b5:	0f 84 13 01 00 00    	je     c00011ce <dlmalloc+0x1ea>
c00010bb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010be:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010c1:	83 e7 fc             	and    edi,0xfffffffc
c00010c4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010ca:	77 4c                	ja     c0001118 <dlmalloc+0x134>
c00010cc:	3d 34 31 02 c0       	cmp    eax,0xc0023134
c00010d1:	75 45                	jne    c0001118 <dlmalloc+0x134>
c00010d3:	39 1d 30 31 02 c0    	cmp    DWORD PTR ds:0xc0023130,ebx
c00010d9:	75 3d                	jne    c0001118 <dlmalloc+0x134>
c00010db:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010df:	73 37                	jae    c0001118 <dlmalloc+0x134>
c00010e1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010e4:	89 fa                	mov    edx,edi
c00010e6:	a3 3c 31 02 c0       	mov    ds:0xc002313c,eax
c00010eb:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c00010f0:	a3 30 31 02 c0       	mov    ds:0xc0023130,eax
c00010f5:	29 f2                	sub    edx,esi
c00010f7:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c00010fe:	c7 40 0c 34 31 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023134
c0001105:	83 ce 01             	or     esi,0x1
c0001108:	89 d1                	mov    ecx,edx
c000110a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000110d:	83 c9 01             	or     ecx,0x1
c0001110:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001113:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001116:	eb 15                	jmp    c000112d <dlmalloc+0x149>
c0001118:	a3 40 31 02 c0       	mov    ds:0xc0023140,eax
c000111d:	39 fe                	cmp    esi,edi
c000111f:	c7 40 08 34 31 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023134
c0001126:	75 0d                	jne    c0001135 <dlmalloc+0x151>
c0001128:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000112d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001130:	e9 35 02 00 00       	jmp    c000136a <dlmalloc+0x386>
c0001135:	89 f8                	mov    eax,edi
c0001137:	81 ff ff 00 00 00    	cmp    edi,0xff
c000113d:	77 19                	ja     c0001158 <dlmalloc+0x174>
c000113f:	c1 e8 03             	shr    eax,0x3
c0001142:	8d 14 00             	lea    edx,[eax+eax*1]
c0001145:	83 c2 0d             	add    edx,0xd
c0001148:	8d 2c 95 f8 30 02 c0 	lea    ebp,[edx*4-0x3ffdcf08]
c000114f:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0001156:	eb 46                	jmp    c000119e <dlmalloc+0x1ba>
c0001158:	e8 c1 f9 ff ff       	call   c0000b1e <largebin_index>
c000115d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001160:	83 c2 0d             	add    edx,0xd
c0001163:	8d 0c 95 00 31 02 c0 	lea    ecx,[edx*4-0x3ffdcf00]
c000116a:	8b 14 95 00 31 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcf00]
c0001171:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001174:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001178:	89 d5                	mov    ebp,edx
c000117a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000117e:	74 1e                	je     c000119e <dlmalloc+0x1ba>
c0001180:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001183:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001186:	77 12                	ja     c000119a <dlmalloc+0x1b6>
c0001188:	83 cf 01             	or     edi,0x1
c000118b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000118e:	76 05                	jbe    c0001195 <dlmalloc+0x1b1>
c0001190:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001193:	eb f6                	jmp    c000118b <dlmalloc+0x1a7>
c0001195:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001198:	eb 04                	jmp    c000119e <dlmalloc+0x1ba>
c000119a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000119e:	89 c7                	mov    edi,eax
c00011a0:	88 c1                	mov    cl,al
c00011a2:	c1 ff 05             	sar    edi,0x5
c00011a5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011a9:	bf 01 00 00 00       	mov    edi,0x1
c00011ae:	d3 e7                	shl    edi,cl
c00011b0:	89 f8                	mov    eax,edi
c00011b2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011b6:	09 04 bd 34 34 02 c0 	or     DWORD PTR [edi*4-0x3ffdcbcc],eax
c00011bd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011c0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011c3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011c6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011c9:	e9 db fe ff ff       	jmp    c00010a9 <dlmalloc+0xc5>
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	76 78                	jbe    c000124e <dlmalloc+0x26a>
c00011d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011da:	8d 04 c5 34 31 02 c0 	lea    eax,[eax*8-0x3ffdcecc]
c00011e1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011e4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011e7:	39 ca                	cmp    edx,ecx
c00011e9:	74 63                	je     c000124e <dlmalloc+0x26a>
c00011eb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011ee:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00011f1:	83 e3 fc             	and    ebx,0xfffffffc
c00011f4:	39 de                	cmp    esi,ebx
c00011f6:	77 52                	ja     c000124a <dlmalloc+0x266>
c00011f8:	89 df                	mov    edi,ebx
c00011fa:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00011fd:	29 f7                	sub    edi,esi
c00011ff:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001202:	01 d3                	add    ebx,edx
c0001204:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001207:	83 ff 0f             	cmp    edi,0xf
c000120a:	8d 42 08             	lea    eax,[edx+0x8]
c000120d:	77 09                	ja     c0001218 <dlmalloc+0x234>
c000120f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001213:	e9 52 01 00 00       	jmp    c000136a <dlmalloc+0x386>
c0001218:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000121b:	83 ce 01             	or     esi,0x1
c000121e:	89 0d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,ecx
c0001224:	89 0d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,ecx
c000122a:	c7 41 08 34 31 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023134
c0001231:	c7 41 0c 34 31 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023134
c0001238:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000123b:	89 fa                	mov    edx,edi
c000123d:	83 ca 01             	or     edx,0x1
c0001240:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001243:	89 3b                	mov    DWORD PTR [ebx],edi
c0001245:	e9 20 01 00 00       	jmp    c000136a <dlmalloc+0x386>
c000124a:	89 c2                	mov    edx,eax
c000124c:	eb 99                	jmp    c00011e7 <dlmalloc+0x203>
c000124e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001252:	b8 01 00 00 00       	mov    eax,0x1
c0001257:	41                   	inc    ecx
c0001258:	89 cb                	mov    ebx,ecx
c000125a:	8d 14 cd 2c 31 02 c0 	lea    edx,[ecx*8-0x3ffdced4]
c0001261:	c1 eb 05             	shr    ebx,0x5
c0001264:	d3 e0                	shl    eax,cl
c0001266:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c000126d:	39 f8                	cmp    eax,edi
c000126f:	77 04                	ja     c0001275 <dlmalloc+0x291>
c0001271:	85 c0                	test   eax,eax
c0001273:	75 26                	jne    c000129b <dlmalloc+0x2b7>
c0001275:	43                   	inc    ebx
c0001276:	83 fb 02             	cmp    ebx,0x2
c0001279:	0f 87 a6 00 00 00    	ja     c0001325 <dlmalloc+0x341>
c000127f:	8b 3c 9d 34 34 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdcbcc]
c0001286:	85 ff                	test   edi,edi
c0001288:	74 eb                	je     c0001275 <dlmalloc+0x291>
c000128a:	89 d8                	mov    eax,ebx
c000128c:	c1 e0 06             	shl    eax,0x6
c000128f:	8d 14 85 2c 31 02 c0 	lea    edx,[eax*4-0x3ffdced4]
c0001296:	b8 01 00 00 00       	mov    eax,0x1
c000129b:	85 f8                	test   eax,edi
c000129d:	75 07                	jne    c00012a6 <dlmalloc+0x2c2>
c000129f:	83 c2 08             	add    edx,0x8
c00012a2:	01 c0                	add    eax,eax
c00012a4:	eb f5                	jmp    c000129b <dlmalloc+0x2b7>
c00012a6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012a9:	39 ca                	cmp    edx,ecx
c00012ab:	75 14                	jne    c00012c1 <dlmalloc+0x2dd>
c00012ad:	89 c1                	mov    ecx,eax
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	f7 d1                	not    ecx
c00012b4:	01 c0                	add    eax,eax
c00012b6:	21 cf                	and    edi,ecx
c00012b8:	89 3c 9d 34 34 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcbcc],edi
c00012bf:	eb ac                	jmp    c000126d <dlmalloc+0x289>
c00012c1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012c4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012c7:	83 e0 fc             	and    eax,0xfffffffc
c00012ca:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012cd:	89 c3                	mov    ebx,eax
c00012cf:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012d2:	29 f3                	sub    ebx,esi
c00012d4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012d7:	83 fb 0f             	cmp    ebx,0xf
c00012da:	8d 41 08             	lea    eax,[ecx+0x8]
c00012dd:	77 09                	ja     c00012e8 <dlmalloc+0x304>
c00012df:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012e3:	e9 82 00 00 00       	jmp    c000136a <dlmalloc+0x386>
c00012e8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012f1:	89 3d 3c 31 02 c0    	mov    DWORD PTR ds:0xc002313c,edi
c00012f7:	89 3d 40 31 02 c0    	mov    DWORD PTR ds:0xc0023140,edi
c00012fd:	c7 47 08 34 31 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023134
c0001304:	c7 47 0c 34 31 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023134
c000130b:	77 06                	ja     c0001313 <dlmalloc+0x32f>
c000130d:	89 3d 30 31 02 c0    	mov    DWORD PTR ds:0xc0023130,edi
c0001313:	83 ce 01             	or     esi,0x1
c0001316:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001319:	89 d9                	mov    ecx,ebx
c000131b:	83 c9 01             	or     ecx,0x1
c000131e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001321:	89 1a                	mov    DWORD PTR [edx],ebx
c0001323:	eb 45                	jmp    c000136a <dlmalloc+0x386>
c0001325:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c000132a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000132d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001330:	83 e2 fc             	and    edx,0xfffffffc
c0001333:	39 d1                	cmp    ecx,edx
c0001335:	77 1e                	ja     c0001355 <dlmalloc+0x371>
c0001337:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000133a:	89 f3                	mov    ebx,esi
c000133c:	89 0d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,ecx
c0001342:	83 cb 01             	or     ebx,0x1
c0001345:	29 f2                	sub    edx,esi
c0001347:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000134a:	83 ca 01             	or     edx,0x1
c000134d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001350:	e9 2d fd ff ff       	jmp    c0001082 <dlmalloc+0x9e>
c0001355:	83 c4 1c             	add    esp,0x1c
c0001358:	89 f0                	mov    eax,esi
c000135a:	5b                   	pop    ebx
c000135b:	ba 00 31 02 c0       	mov    edx,0xc0023100
c0001360:	5e                   	pop    esi
c0001361:	5f                   	pop    edi
c0001362:	5d                   	pop    ebp
c0001363:	e9 16 fa ff ff       	jmp    c0000d7e <sYSMALLOc>
c0001368:	31 c0                	xor    eax,eax
c000136a:	83 c4 1c             	add    esp,0x1c
c000136d:	5b                   	pop    ebx
c000136e:	5e                   	pop    esi
c000136f:	5f                   	pop    edi
c0001370:	5d                   	pop    ebp
c0001371:	c3                   	ret    

c0001372 <iALLOc>:
c0001372:	55                   	push   ebp
c0001373:	89 c5                	mov    ebp,eax
c0001375:	57                   	push   edi
c0001376:	56                   	push   esi
c0001377:	53                   	push   ebx
c0001378:	83 ec 2c             	sub    esp,0x2c
c000137b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000137f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001383:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001387:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c000138e:	75 12                	jne    c00013a2 <iALLOc+0x30>
c0001390:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001394:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001399:	e8 04 f8 ff ff       	call   c0000ba2 <malloc_consolidate>
c000139e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013a7:	74 12                	je     c00013bb <iALLOc+0x49>
c00013a9:	85 ed                	test   ebp,ebp
c00013ab:	0f 84 64 01 00 00    	je     c0001515 <iALLOc+0x1a3>
c00013b1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013b9:	eb 33                	jmp    c00013ee <iALLOc+0x7c>
c00013bb:	85 ed                	test   ebp,ebp
c00013bd:	75 14                	jne    c00013d3 <iALLOc+0x61>
c00013bf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013c7:	83 c4 2c             	add    esp,0x2c
c00013ca:	5b                   	pop    ebx
c00013cb:	5e                   	pop    esi
c00013cc:	5f                   	pop    edi
c00013cd:	5d                   	pop    ebp
c00013ce:	e9 11 fc ff ff       	jmp    c0000fe4 <dlmalloc>
c00013d3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013da:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013e2:	83 f8 0f             	cmp    eax,0xf
c00013e5:	76 07                	jbe    c00013ee <iALLOc+0x7c>
c00013e7:	83 e0 f8             	and    eax,0xfffffff8
c00013ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013ee:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00013f3:	75 09                	jne    c00013fe <iALLOc+0x8c>
c00013f5:	89 d0                	mov    eax,edx
c00013f7:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00013fa:	31 f6                	xor    esi,esi
c00013fc:	eb 3b                	jmp    c0001439 <iALLOc+0xc7>
c00013fe:	8b 02                	mov    eax,DWORD PTR [edx]
c0001400:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001408:	83 c0 0b             	add    eax,0xb
c000140b:	83 f8 0f             	cmp    eax,0xf
c000140e:	76 07                	jbe    c0001417 <iALLOc+0xa5>
c0001410:	83 e0 f8             	and    eax,0xfffffff8
c0001413:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001417:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000141b:	0f af f5             	imul   esi,ebp
c000141e:	eb 25                	jmp    c0001445 <iALLOc+0xd3>
c0001420:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001422:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001425:	bb 10 00 00 00       	mov    ebx,0x10
c000142a:	83 f9 0f             	cmp    ecx,0xf
c000142d:	76 05                	jbe    c0001434 <iALLOc+0xc2>
c000142f:	83 e1 f8             	and    ecx,0xfffffff8
c0001432:	89 cb                	mov    ebx,ecx
c0001434:	01 de                	add    esi,ebx
c0001436:	83 c0 04             	add    eax,0x4
c0001439:	39 c7                	cmp    edi,eax
c000143b:	75 e3                	jne    c0001420 <iALLOc+0xae>
c000143d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001445:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001449:	8b 1d 54 34 02 c0    	mov    ebx,DWORD PTR ds:0xc0023454
c000144f:	83 ec 0c             	sub    esp,0xc
c0001452:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c000145c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001460:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001464:	50                   	push   eax
c0001465:	e8 7a fb ff ff       	call   c0000fe4 <dlmalloc>
c000146a:	83 c4 10             	add    esp,0x10
c000146d:	89 1d 54 34 02 c0    	mov    DWORD PTR ds:0xc0023454,ebx
c0001473:	85 c0                	test   eax,eax
c0001475:	0f 84 92 00 00 00    	je     c000150d <iALLOc+0x19b>
c000147b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000147e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001481:	83 e3 fc             	and    ebx,0xfffffffc
c0001484:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001488:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000148d:	74 1e                	je     c00014ad <iALLOc+0x13b>
c000148f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001493:	89 d9                	mov    ecx,ebx
c0001495:	52                   	push   edx
c0001496:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000149a:	83 e9 04             	sub    ecx,0x4
c000149d:	51                   	push   ecx
c000149e:	6a 00                	push   0x0
c00014a0:	50                   	push   eax
c00014a1:	e8 1a f0 ff ff       	call   c00004c0 <memset>
c00014a6:	83 c4 10             	add    esp,0x10
c00014a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	75 14                	jne    c00014c8 <iALLOc+0x156>
c00014b4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014b7:	29 f3                	sub    ebx,esi
c00014b9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014bc:	83 cb 01             	or     ebx,0x1
c00014bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014c3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014c6:	89 f3                	mov    ebx,esi
c00014c8:	31 c0                	xor    eax,eax
c00014ca:	4d                   	dec    ebp
c00014cb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014d2:	39 c5                	cmp    ebp,eax
c00014d4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014d7:	74 2c                	je     c0001505 <iALLOc+0x193>
c00014d9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014dd:	85 c9                	test   ecx,ecx
c00014df:	75 15                	jne    c00014f6 <iALLOc+0x184>
c00014e1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014e4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014e7:	b9 10 00 00 00       	mov    ecx,0x10
c00014ec:	83 fe 0f             	cmp    esi,0xf
c00014ef:	76 05                	jbe    c00014f6 <iALLOc+0x184>
c00014f1:	83 e6 f8             	and    esi,0xfffffff8
c00014f4:	89 f1                	mov    ecx,esi
c00014f6:	89 ce                	mov    esi,ecx
c00014f8:	29 cb                	sub    ebx,ecx
c00014fa:	83 ce 01             	or     esi,0x1
c00014fd:	40                   	inc    eax
c00014fe:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001501:	01 cf                	add    edi,ecx
c0001503:	eb c6                	jmp    c00014cb <iALLOc+0x159>
c0001505:	83 cb 01             	or     ebx,0x1
c0001508:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000150b:	eb 08                	jmp    c0001515 <iALLOc+0x1a3>
c000150d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001515:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001519:	83 c4 2c             	add    esp,0x2c
c000151c:	5b                   	pop    ebx
c000151d:	5e                   	pop    esi
c000151e:	5f                   	pop    edi
c000151f:	5d                   	pop    ebp
c0001520:	c3                   	ret    

c0001521 <dlrealloc>:
c0001521:	55                   	push   ebp
c0001522:	57                   	push   edi
c0001523:	56                   	push   esi
c0001524:	53                   	push   ebx
c0001525:	83 ec 1c             	sub    esp,0x1c
c0001528:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000152c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001530:	85 db                	test   ebx,ebx
c0001532:	75 10                	jne    c0001544 <dlrealloc+0x23>
c0001534:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001538:	83 c4 1c             	add    esp,0x1c
c000153b:	5b                   	pop    ebx
c000153c:	5e                   	pop    esi
c000153d:	5f                   	pop    edi
c000153e:	5d                   	pop    ebp
c000153f:	e9 a0 fa ff ff       	jmp    c0000fe4 <dlmalloc>
c0001544:	83 f8 df             	cmp    eax,0xffffffdf
c0001547:	76 07                	jbe    c0001550 <dlrealloc+0x2f>
c0001549:	31 db                	xor    ebx,ebx
c000154b:	e9 6a 01 00 00       	jmp    c00016ba <dlrealloc+0x199>
c0001550:	83 c0 0b             	add    eax,0xb
c0001553:	bd 10 00 00 00       	mov    ebp,0x10
c0001558:	83 f8 0f             	cmp    eax,0xf
c000155b:	76 05                	jbe    c0001562 <dlrealloc+0x41>
c000155d:	83 e0 f8             	and    eax,0xfffffff8
c0001560:	89 c5                	mov    ebp,eax
c0001562:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001565:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001568:	89 c6                	mov    esi,eax
c000156a:	83 e6 fc             	and    esi,0xfffffffc
c000156d:	a8 02                	test   al,0x2
c000156f:	75 d8                	jne    c0001549 <dlrealloc+0x28>
c0001571:	39 f5                	cmp    ebp,esi
c0001573:	0f 86 04 01 00 00    	jbe    c000167d <dlrealloc+0x15c>
c0001579:	8d 14 37             	lea    edx,[edi+esi*1]
c000157c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000157f:	39 15 2c 31 02 c0    	cmp    DWORD PTR ds:0xc002312c,edx
c0001585:	75 33                	jne    c00015ba <dlrealloc+0x99>
c0001587:	83 e1 fc             	and    ecx,0xfffffffc
c000158a:	01 f1                	add    ecx,esi
c000158c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001590:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001593:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001597:	77 49                	ja     c00015e2 <dlrealloc+0xc1>
c0001599:	01 ef                	add    edi,ebp
c000159b:	83 e0 01             	and    eax,0x1
c000159e:	09 e8                	or     eax,ebp
c00015a0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015a3:	89 3d 2c 31 02 c0    	mov    DWORD PTR ds:0xc002312c,edi
c00015a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ad:	29 e8                	sub    eax,ebp
c00015af:	83 c8 01             	or     eax,0x1
c00015b2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015b5:	e9 00 01 00 00       	jmp    c00016ba <dlrealloc+0x199>
c00015ba:	89 c8                	mov    eax,ecx
c00015bc:	83 e0 fe             	and    eax,0xfffffffe
c00015bf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015c4:	75 1c                	jne    c00015e2 <dlrealloc+0xc1>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	39 cd                	cmp    ebp,ecx
c00015cd:	77 13                	ja     c00015e2 <dlrealloc+0xc1>
c00015cf:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015d2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015d5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015d8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015db:	89 ce                	mov    esi,ecx
c00015dd:	e9 9b 00 00 00       	jmp    c000167d <dlrealloc+0x15c>
c00015e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015e6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015e9:	83 ec 0c             	sub    esp,0xc
c00015ec:	50                   	push   eax
c00015ed:	e8 f2 f9 ff ff       	call   c0000fe4 <dlmalloc>
c00015f2:	83 c4 10             	add    esp,0x10
c00015f5:	85 c0                	test   eax,eax
c00015f7:	0f 84 4c ff ff ff    	je     c0001549 <dlrealloc+0x28>
c00015fd:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001600:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001604:	39 ca                	cmp    edx,ecx
c0001606:	75 0a                	jne    c0001612 <dlrealloc+0xf1>
c0001608:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000160b:	83 e0 fc             	and    eax,0xfffffffc
c000160e:	01 c6                	add    esi,eax
c0001610:	eb 6b                	jmp    c000167d <dlrealloc+0x15c>
c0001612:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001615:	83 f9 27             	cmp    ecx,0x27
c0001618:	76 08                	jbe    c0001622 <dlrealloc+0x101>
c000161a:	89 de                	mov    esi,ebx
c000161c:	89 c7                	mov    edi,eax
c000161e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001620:	eb 43                	jmp    c0001665 <dlrealloc+0x144>
c0001622:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001624:	83 f9 13             	cmp    ecx,0x13
c0001627:	89 10                	mov    DWORD PTR [eax],edx
c0001629:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000162c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000162f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001632:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001635:	76 2e                	jbe    c0001665 <dlrealloc+0x144>
c0001637:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000163a:	83 f9 1b             	cmp    ecx,0x1b
c000163d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001640:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001643:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001646:	76 1d                	jbe    c0001665 <dlrealloc+0x144>
c0001648:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000164b:	83 f9 23             	cmp    ecx,0x23
c000164e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001651:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001654:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001657:	76 0c                	jbe    c0001665 <dlrealloc+0x144>
c0001659:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000165c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000165f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001662:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001665:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001669:	83 ec 0c             	sub    esp,0xc
c000166c:	53                   	push   ebx
c000166d:	e8 17 f6 ff ff       	call   c0000c89 <dlfree>
c0001672:	83 c4 10             	add    esp,0x10
c0001675:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001679:	89 c3                	mov    ebx,eax
c000167b:	eb 3d                	jmp    c00016ba <dlrealloc+0x199>
c000167d:	89 f2                	mov    edx,esi
c000167f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001682:	29 ea                	sub    edx,ebp
c0001684:	83 e1 01             	and    ecx,0x1
c0001687:	8d 04 37             	lea    eax,[edi+esi*1]
c000168a:	83 fa 0f             	cmp    edx,0xf
c000168d:	77 0b                	ja     c000169a <dlrealloc+0x179>
c000168f:	09 ce                	or     esi,ecx
c0001691:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001694:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001698:	eb 20                	jmp    c00016ba <dlrealloc+0x199>
c000169a:	01 ef                	add    edi,ebp
c000169c:	83 ec 0c             	sub    esp,0xc
c000169f:	09 cd                	or     ebp,ecx
c00016a1:	83 ca 01             	or     edx,0x1
c00016a4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016a7:	83 c7 08             	add    edi,0x8
c00016aa:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ad:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016b1:	57                   	push   edi
c00016b2:	e8 d2 f5 ff ff       	call   c0000c89 <dlfree>
c00016b7:	83 c4 10             	add    esp,0x10
c00016ba:	83 c4 1c             	add    esp,0x1c
c00016bd:	89 d8                	mov    eax,ebx
c00016bf:	5b                   	pop    ebx
c00016c0:	5e                   	pop    esi
c00016c1:	5f                   	pop    edi
c00016c2:	5d                   	pop    ebp
c00016c3:	c3                   	ret    

c00016c4 <dlmemalign>:
c00016c4:	55                   	push   ebp
c00016c5:	57                   	push   edi
c00016c6:	56                   	push   esi
c00016c7:	53                   	push   ebx
c00016c8:	83 ec 0c             	sub    esp,0xc
c00016cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016d3:	83 fa 08             	cmp    edx,0x8
c00016d6:	77 10                	ja     c00016e8 <dlmemalign+0x24>
c00016d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016dc:	83 c4 0c             	add    esp,0xc
c00016df:	5b                   	pop    ebx
c00016e0:	5e                   	pop    esi
c00016e1:	5f                   	pop    edi
c00016e2:	5d                   	pop    ebp
c00016e3:	e9 fc f8 ff ff       	jmp    c0000fe4 <dlmalloc>
c00016e8:	bf 10 00 00 00       	mov    edi,0x10
c00016ed:	83 fa 0f             	cmp    edx,0xf
c00016f0:	76 13                	jbe    c0001705 <dlmemalign+0x41>
c00016f2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00016f5:	85 d1                	test   ecx,edx
c00016f7:	75 04                	jne    c00016fd <dlmemalign+0x39>
c00016f9:	89 d7                	mov    edi,edx
c00016fb:	eb 08                	jmp    c0001705 <dlmemalign+0x41>
c00016fd:	39 d7                	cmp    edi,edx
c00016ff:	73 04                	jae    c0001705 <dlmemalign+0x41>
c0001701:	01 ff                	add    edi,edi
c0001703:	eb f8                	jmp    c00016fd <dlmemalign+0x39>
c0001705:	83 f8 df             	cmp    eax,0xffffffdf
c0001708:	76 07                	jbe    c0001711 <dlmemalign+0x4d>
c000170a:	31 c0                	xor    eax,eax
c000170c:	e9 ce 00 00 00       	jmp    c00017df <dlmemalign+0x11b>
c0001711:	83 c0 0b             	add    eax,0xb
c0001714:	bd 10 00 00 00       	mov    ebp,0x10
c0001719:	83 f8 0f             	cmp    eax,0xf
c000171c:	76 05                	jbe    c0001723 <dlmemalign+0x5f>
c000171e:	83 e0 f8             	and    eax,0xfffffff8
c0001721:	89 c5                	mov    ebp,eax
c0001723:	83 ec 0c             	sub    esp,0xc
c0001726:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000172a:	50                   	push   eax
c000172b:	e8 b4 f8 ff ff       	call   c0000fe4 <dlmalloc>
c0001730:	83 c4 10             	add    esp,0x10
c0001733:	89 c1                	mov    ecx,eax
c0001735:	85 c0                	test   eax,eax
c0001737:	74 d1                	je     c000170a <dlmemalign+0x46>
c0001739:	31 d2                	xor    edx,edx
c000173b:	8d 70 f8             	lea    esi,[eax-0x8]
c000173e:	f7 f7                	div    edi
c0001740:	85 d2                	test   edx,edx
c0001742:	74 62                	je     c00017a6 <dlmemalign+0xe2>
c0001744:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001748:	89 f8                	mov    eax,edi
c000174a:	f7 d8                	neg    eax
c000174c:	21 c3                	and    ebx,eax
c000174e:	83 eb 08             	sub    ebx,0x8
c0001751:	89 d8                	mov    eax,ebx
c0001753:	29 f0                	sub    eax,esi
c0001755:	83 f8 0f             	cmp    eax,0xf
c0001758:	77 02                	ja     c000175c <dlmemalign+0x98>
c000175a:	01 fb                	add    ebx,edi
c000175c:	89 d8                	mov    eax,ebx
c000175e:	29 f0                	sub    eax,esi
c0001760:	89 c6                	mov    esi,eax
c0001762:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001765:	89 c2                	mov    edx,eax
c0001767:	83 e2 fc             	and    edx,0xfffffffc
c000176a:	29 f2                	sub    edx,esi
c000176c:	a8 02                	test   al,0x2
c000176e:	74 10                	je     c0001780 <dlmemalign+0xbc>
c0001770:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001773:	83 ca 02             	or     edx,0x2
c0001776:	8d 43 08             	lea    eax,[ebx+0x8]
c0001779:	89 33                	mov    DWORD PTR [ebx],esi
c000177b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000177e:	eb 5f                	jmp    c00017df <dlmemalign+0x11b>
c0001780:	83 ec 0c             	sub    esp,0xc
c0001783:	89 d0                	mov    eax,edx
c0001785:	83 c8 01             	or     eax,0x1
c0001788:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000178b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001790:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001793:	83 e0 01             	and    eax,0x1
c0001796:	09 f0                	or     eax,esi
c0001798:	89 de                	mov    esi,ebx
c000179a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000179d:	51                   	push   ecx
c000179e:	e8 e6 f4 ff ff       	call   c0000c89 <dlfree>
c00017a3:	83 c4 10             	add    esp,0x10
c00017a6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017a9:	a8 02                	test   al,0x2
c00017ab:	75 2f                	jne    c00017dc <dlmemalign+0x118>
c00017ad:	83 e0 fc             	and    eax,0xfffffffc
c00017b0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017b3:	39 c2                	cmp    edx,eax
c00017b5:	73 25                	jae    c00017dc <dlmemalign+0x118>
c00017b7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ba:	83 ec 0c             	sub    esp,0xc
c00017bd:	29 e8                	sub    eax,ebp
c00017bf:	83 c2 08             	add    edx,0x8
c00017c2:	83 c8 01             	or     eax,0x1
c00017c5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017c8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017cb:	83 e0 01             	and    eax,0x1
c00017ce:	09 c5                	or     ebp,eax
c00017d0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017d3:	52                   	push   edx
c00017d4:	e8 b0 f4 ff ff       	call   c0000c89 <dlfree>
c00017d9:	83 c4 10             	add    esp,0x10
c00017dc:	8d 46 08             	lea    eax,[esi+0x8]
c00017df:	83 c4 0c             	add    esp,0xc
c00017e2:	5b                   	pop    ebx
c00017e3:	5e                   	pop    esi
c00017e4:	5f                   	pop    edi
c00017e5:	5d                   	pop    ebp
c00017e6:	c3                   	ret    

c00017e7 <dlcalloc>:
c00017e7:	53                   	push   ebx
c00017e8:	83 ec 14             	sub    esp,0x14
c00017eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ef:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00017f4:	50                   	push   eax
c00017f5:	e8 ea f7 ff ff       	call   c0000fe4 <dlmalloc>
c00017fa:	83 c4 10             	add    esp,0x10
c00017fd:	89 c3                	mov    ebx,eax
c00017ff:	85 c0                	test   eax,eax
c0001801:	74 77                	je     c000187a <dlcalloc+0x93>
c0001803:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001806:	89 d0                	mov    eax,edx
c0001808:	83 e0 fc             	and    eax,0xfffffffc
c000180b:	80 e2 02             	and    dl,0x2
c000180e:	75 5a                	jne    c000186a <dlcalloc+0x83>
c0001810:	83 e8 04             	sub    eax,0x4
c0001813:	83 f8 27             	cmp    eax,0x27
c0001816:	76 03                	jbe    c000181b <dlcalloc+0x34>
c0001818:	51                   	push   ecx
c0001819:	eb 53                	jmp    c000186e <dlcalloc+0x87>
c000181b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001821:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001828:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000182f:	83 f8 13             	cmp    eax,0x13
c0001832:	76 46                	jbe    c000187a <dlcalloc+0x93>
c0001834:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000183b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001842:	83 f8 1b             	cmp    eax,0x1b
c0001845:	76 33                	jbe    c000187a <dlcalloc+0x93>
c0001847:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000184e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001855:	83 f8 23             	cmp    eax,0x23
c0001858:	76 20                	jbe    c000187a <dlcalloc+0x93>
c000185a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001861:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001868:	eb 10                	jmp    c000187a <dlcalloc+0x93>
c000186a:	83 e8 08             	sub    eax,0x8
c000186d:	52                   	push   edx
c000186e:	50                   	push   eax
c000186f:	6a 00                	push   0x0
c0001871:	53                   	push   ebx
c0001872:	e8 49 ec ff ff       	call   c00004c0 <memset>
c0001877:	83 c4 10             	add    esp,0x10
c000187a:	89 d8                	mov    eax,ebx
c000187c:	83 c4 08             	add    esp,0x8
c000187f:	5b                   	pop    ebx
c0001880:	c3                   	ret    

c0001881 <dlcfree>:
c0001881:	e9 03 f4 ff ff       	jmp    c0000c89 <dlfree>

c0001886 <dlindependent_calloc>:
c0001886:	83 ec 28             	sub    esp,0x28
c0001889:	b9 03 00 00 00       	mov    ecx,0x3
c000188e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001892:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001896:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000189a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	e8 cb fa ff ff       	call   c0001372 <iALLOc>
c00018a7:	83 c4 2c             	add    esp,0x2c
c00018aa:	c3                   	ret    

c00018ab <dlindependent_comalloc>:
c00018ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018b3:	31 c9                	xor    ecx,ecx
c00018b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018bd:	e9 b0 fa ff ff       	jmp    c0001372 <iALLOc>

c00018c2 <dlvalloc>:
c00018c2:	83 ec 0c             	sub    esp,0xc
c00018c5:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c00018cc:	75 0a                	jne    c00018d8 <dlvalloc+0x16>
c00018ce:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00018d3:	e8 ca f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c00018d8:	50                   	push   eax
c00018d9:	50                   	push   eax
c00018da:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018de:	ff 35 5c 34 02 c0    	push   DWORD PTR ds:0xc002345c
c00018e4:	e8 db fd ff ff       	call   c00016c4 <dlmemalign>
c00018e9:	83 c4 1c             	add    esp,0x1c
c00018ec:	c3                   	ret    

c00018ed <dlpvalloc>:
c00018ed:	83 ec 0c             	sub    esp,0xc
c00018f0:	83 3d 00 31 02 c0 00 	cmp    DWORD PTR ds:0xc0023100,0x0
c00018f7:	75 0a                	jne    c0001903 <dlpvalloc+0x16>
c00018f9:	b8 00 31 02 c0       	mov    eax,0xc0023100
c00018fe:	e8 9f f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c0001903:	a1 5c 34 02 c0       	mov    eax,ds:0xc002345c
c0001908:	89 c1                	mov    ecx,eax
c000190a:	52                   	push   edx
c000190b:	f7 d9                	neg    ecx
c000190d:	52                   	push   edx
c000190e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001912:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001916:	21 ca                	and    edx,ecx
c0001918:	52                   	push   edx
c0001919:	50                   	push   eax
c000191a:	e8 a5 fd ff ff       	call   c00016c4 <dlmemalign>
c000191f:	83 c4 1c             	add    esp,0x1c
c0001922:	c3                   	ret    

c0001923 <dlmalloc_trim>:
c0001923:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001928:	e8 75 f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c000192d:	31 c0                	xor    eax,eax
c000192f:	c3                   	ret    

c0001930 <dlmalloc_usable_size>:
c0001930:	53                   	push   ebx
c0001931:	31 c0                	xor    eax,eax
c0001933:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001937:	85 c9                	test   ecx,ecx
c0001939:	74 24                	je     c000195f <dlmalloc_usable_size+0x2f>
c000193b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000193e:	f6 c2 02             	test   dl,0x2
c0001941:	74 08                	je     c000194b <dlmalloc_usable_size+0x1b>
c0001943:	83 e2 fc             	and    edx,0xfffffffc
c0001946:	8d 42 f8             	lea    eax,[edx-0x8]
c0001949:	eb 14                	jmp    c000195f <dlmalloc_usable_size+0x2f>
c000194b:	89 d3                	mov    ebx,edx
c000194d:	31 c0                	xor    eax,eax
c000194f:	83 e3 fe             	and    ebx,0xfffffffe
c0001952:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001957:	74 06                	je     c000195f <dlmalloc_usable_size+0x2f>
c0001959:	83 e2 fc             	and    edx,0xfffffffc
c000195c:	8d 42 fc             	lea    eax,[edx-0x4]
c000195f:	5b                   	pop    ebx
c0001960:	c3                   	ret    

c0001961 <dlmallinfo>:
c0001961:	55                   	push   ebp
c0001962:	57                   	push   edi
c0001963:	56                   	push   esi
c0001964:	53                   	push   ebx
c0001965:	83 ec 08             	sub    esp,0x8
c0001968:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000196c:	83 3d 2c 31 02 c0 00 	cmp    DWORD PTR ds:0xc002312c,0x0
c0001973:	75 0a                	jne    c000197f <dlmallinfo+0x1e>
c0001975:	b8 00 31 02 c0       	mov    eax,0xc0023100
c000197a:	e8 23 f2 ff ff       	call   c0000ba2 <malloc_consolidate>
c000197f:	a1 2c 31 02 c0       	mov    eax,ds:0xc002312c
c0001984:	31 ed                	xor    ebp,ebp
c0001986:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001989:	31 c9                	xor    ecx,ecx
c000198b:	83 e0 fc             	and    eax,0xfffffffc
c000198e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001992:	31 c0                	xor    eax,eax
c0001994:	8b 14 85 04 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcefc]
c000199b:	85 d2                	test   edx,edx
c000199d:	74 0e                	je     c00019ad <dlmallinfo+0x4c>
c000199f:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019a2:	45                   	inc    ebp
c00019a3:	83 e6 fc             	and    esi,0xfffffffc
c00019a6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019a9:	01 f1                	add    ecx,esi
c00019ab:	eb ee                	jmp    c000199b <dlmallinfo+0x3a>
c00019ad:	40                   	inc    eax
c00019ae:	83 f8 0a             	cmp    eax,0xa
c00019b1:	75 e1                	jne    c0001994 <dlmallinfo+0x33>
c00019b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019b7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019be:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019c1:	b8 34 31 02 c0       	mov    eax,0xc0023134
c00019c6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019c9:	39 f0                	cmp    eax,esi
c00019cb:	74 10                	je     c00019dd <dlmallinfo+0x7c>
c00019cd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019d0:	ff 04 24             	inc    DWORD PTR [esp]
c00019d3:	83 e7 fc             	and    edi,0xfffffffc
c00019d6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019d9:	01 fa                	add    edx,edi
c00019db:	eb ec                	jmp    c00019c9 <dlmallinfo+0x68>
c00019dd:	83 c0 08             	add    eax,0x8
c00019e0:	3d 2c 34 02 c0       	cmp    eax,0xc002342c
c00019e5:	75 df                	jne    c00019c6 <dlmallinfo+0x65>
c00019e7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019ea:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019ed:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00019f0:	a1 68 34 02 c0       	mov    eax,ds:0xc0023468
c00019f5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00019f8:	89 03                	mov    DWORD PTR [ebx],eax
c00019fa:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00019fd:	8b 35 50 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023450
c0001a03:	29 d0                	sub    eax,edx
c0001a05:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a08:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a0b:	8b 35 64 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023464
c0001a11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a15:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a18:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a1b:	8b 35 74 34 02 c0    	mov    esi,DWORD PTR ds:0xc0023474
c0001a21:	89 d8                	mov    eax,ebx
c0001a23:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a26:	83 c4 08             	add    esp,0x8
c0001a29:	5b                   	pop    ebx
c0001a2a:	5e                   	pop    esi
c0001a2b:	5f                   	pop    edi
c0001a2c:	5d                   	pop    ebp
c0001a2d:	c2 04 00             	ret    0x4

c0001a30 <dlmalloc_stats>:
c0001a30:	83 ec 30             	sub    esp,0x30
c0001a33:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a37:	50                   	push   eax
c0001a38:	e8 24 ff ff ff       	call   c0001961 <dlmallinfo>
c0001a3d:	83 c4 30             	add    esp,0x30
c0001a40:	c3                   	ret    

c0001a41 <dlmallopt>:
c0001a41:	56                   	push   esi
c0001a42:	b8 00 31 02 c0       	mov    eax,0xc0023100
c0001a47:	53                   	push   ebx
c0001a48:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a4c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a50:	e8 4d f1 ff ff       	call   c0000ba2 <malloc_consolidate>
c0001a55:	8d 46 04             	lea    eax,[esi+0x4]
c0001a58:	83 f8 05             	cmp    eax,0x5
c0001a5b:	77 67                	ja     c0001ac4 <dlmallopt+0x83>
c0001a5d:	ff 24 85 84 e8 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe177c]
c0001a64:	83 fb 50             	cmp    ebx,0x50
c0001a67:	77 5b                	ja     c0001ac4 <dlmallopt+0x83>
c0001a69:	ba 08 00 00 00       	mov    edx,0x8
c0001a6e:	85 db                	test   ebx,ebx
c0001a70:	74 12                	je     c0001a84 <dlmallopt+0x43>
c0001a72:	83 c3 0b             	add    ebx,0xb
c0001a75:	ba 10 00 00 00       	mov    edx,0x10
c0001a7a:	83 fb 0f             	cmp    ebx,0xf
c0001a7d:	76 05                	jbe    c0001a84 <dlmallopt+0x43>
c0001a7f:	89 da                	mov    edx,ebx
c0001a81:	83 e2 f8             	and    edx,0xfffffff8
c0001a84:	a1 00 31 02 c0       	mov    eax,ds:0xc0023100
c0001a89:	83 e0 03             	and    eax,0x3
c0001a8c:	09 d0                	or     eax,edx
c0001a8e:	a3 00 31 02 c0       	mov    ds:0xc0023100,eax
c0001a93:	eb 31                	jmp    c0001ac6 <dlmallopt+0x85>
c0001a95:	89 1d 44 34 02 c0    	mov    DWORD PTR ds:0xc0023444,ebx
c0001a9b:	eb 06                	jmp    c0001aa3 <dlmallopt+0x62>
c0001a9d:	89 1d 48 34 02 c0    	mov    DWORD PTR ds:0xc0023448,ebx
c0001aa3:	be 01 00 00 00       	mov    esi,0x1
c0001aa8:	eb 1c                	jmp    c0001ac6 <dlmallopt+0x85>
c0001aaa:	89 1d 4c 34 02 c0    	mov    DWORD PTR ds:0xc002344c,ebx
c0001ab0:	eb f1                	jmp    c0001aa3 <dlmallopt+0x62>
c0001ab2:	31 f6                	xor    esi,esi
c0001ab4:	85 db                	test   ebx,ebx
c0001ab6:	75 0e                	jne    c0001ac6 <dlmallopt+0x85>
c0001ab8:	c7 05 54 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023454,0x0
c0001ac2:	eb df                	jmp    c0001aa3 <dlmallopt+0x62>
c0001ac4:	31 f6                	xor    esi,esi
c0001ac6:	89 f0                	mov    eax,esi
c0001ac8:	5b                   	pop    ebx
c0001ac9:	5e                   	pop    esi
c0001aca:	c3                   	ret    
c0001acb:	90                   	nop

c0001acc <isblank>:
c0001acc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ad1:	74 09                	je     c0001adc <isblank+0x10>
c0001ad3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ad8:	75 0a                	jne    c0001ae4 <isblank+0x18>
c0001ada:	66 90                	xchg   ax,ax
c0001adc:	b8 01 00 00 00       	mov    eax,0x1
c0001ae1:	c3                   	ret    
c0001ae2:	66 90                	xchg   ax,ax
c0001ae4:	b8 00 00 00 00       	mov    eax,0x0
c0001ae9:	c3                   	ret    
c0001aea:	66 90                	xchg   ax,ax

c0001aec <iscntrl>:
c0001aec:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001af1:	7e 09                	jle    c0001afc <iscntrl+0x10>
c0001af3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001af8:	75 0a                	jne    c0001b04 <iscntrl+0x18>
c0001afa:	66 90                	xchg   ax,ax
c0001afc:	b8 01 00 00 00       	mov    eax,0x1
c0001b01:	c3                   	ret    
c0001b02:	66 90                	xchg   ax,ax
c0001b04:	b8 00 00 00 00       	mov    eax,0x0
c0001b09:	c3                   	ret    
c0001b0a:	66 90                	xchg   ax,ax

c0001b0c <isdigit>:
c0001b0c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b11:	7e 0d                	jle    c0001b20 <isdigit+0x14>
c0001b13:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b18:	7f 06                	jg     c0001b20 <isdigit+0x14>
c0001b1a:	b8 01 00 00 00       	mov    eax,0x1
c0001b1f:	c3                   	ret    
c0001b20:	b8 00 00 00 00       	mov    eax,0x0
c0001b25:	c3                   	ret    
c0001b26:	66 90                	xchg   ax,ax

c0001b28 <islower>:
c0001b28:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b2d:	7e 0d                	jle    c0001b3c <islower+0x14>
c0001b2f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b34:	7f 06                	jg     c0001b3c <islower+0x14>
c0001b36:	b8 01 00 00 00       	mov    eax,0x1
c0001b3b:	c3                   	ret    
c0001b3c:	b8 00 00 00 00       	mov    eax,0x0
c0001b41:	c3                   	ret    
c0001b42:	66 90                	xchg   ax,ax

c0001b44 <isspace>:
c0001b44:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b49:	7c 19                	jl     c0001b64 <isspace+0x20>
c0001b4b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b50:	7e 0a                	jle    c0001b5c <isspace+0x18>
c0001b52:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b57:	75 0b                	jne    c0001b64 <isspace+0x20>
c0001b59:	8d 76 00             	lea    esi,[esi+0x0]
c0001b5c:	b8 01 00 00 00       	mov    eax,0x1
c0001b61:	c3                   	ret    
c0001b62:	66 90                	xchg   ax,ax
c0001b64:	b8 00 00 00 00       	mov    eax,0x0
c0001b69:	c3                   	ret    
c0001b6a:	66 90                	xchg   ax,ax

c0001b6c <isupper>:
c0001b6c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b71:	7e 0d                	jle    c0001b80 <isupper+0x14>
c0001b73:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b78:	7f 06                	jg     c0001b80 <isupper+0x14>
c0001b7a:	b8 01 00 00 00       	mov    eax,0x1
c0001b7f:	c3                   	ret    
c0001b80:	b8 00 00 00 00       	mov    eax,0x0
c0001b85:	c3                   	ret    
c0001b86:	66 90                	xchg   ax,ax

c0001b88 <isalpha>:
c0001b88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b8c:	e8 db ff ff ff       	call   c0001b6c <isupper>
c0001b91:	83 c4 04             	add    esp,0x4
c0001b94:	85 c0                	test   eax,eax
c0001b96:	75 10                	jne    c0001ba8 <isalpha+0x20>
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 87 ff ff ff       	call   c0001b28 <islower>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	74 08                	je     c0001bb0 <isalpha+0x28>
c0001ba8:	b8 01 00 00 00       	mov    eax,0x1
c0001bad:	c3                   	ret    
c0001bae:	66 90                	xchg   ax,ax
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalnum>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 c7 ff ff ff       	call   c0001b88 <isalpha>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalnum+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 3b ff ff ff       	call   c0001b0c <isdigit>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalnum+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <ispunct>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalnum>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 28                	jne    c0001c20 <ispunct+0x38>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 43 ff ff ff       	call   c0001b44 <isspace>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 18                	jne    c0001c20 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 db fe ff ff       	call   c0001aec <iscntrl>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 08                	jne    c0001c20 <ispunct+0x38>
c0001c18:	b8 01 00 00 00       	mov    eax,0x1
c0001c1d:	c3                   	ret    
c0001c1e:	66 90                	xchg   ax,ax
c0001c20:	b8 00 00 00 00       	mov    eax,0x0
c0001c25:	c3                   	ret    
c0001c26:	66 90                	xchg   ax,ax

c0001c28 <isgraph>:
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 87 ff ff ff       	call   c0001bb8 <isalnum>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 10                	jne    c0001c48 <isgraph+0x20>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 a7 ff ff ff       	call   c0001be8 <ispunct>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	74 08                	je     c0001c50 <isgraph+0x28>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isprint>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 c7 ff ff ff       	call   c0001c28 <isgraph>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 08                	jne    c0001c70 <isprint+0x18>
c0001c68:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c6d:	75 09                	jne    c0001c78 <isprint+0x20>
c0001c6f:	90                   	nop
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isxdigit>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 83 fe ff ff       	call   c0001b0c <isdigit>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 20                	jne    c0001cb0 <isxdigit+0x30>
c0001c90:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c95:	7e 09                	jle    c0001ca0 <isxdigit+0x20>
c0001c97:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001c9c:	7e 12                	jle    c0001cb0 <isxdigit+0x30>
c0001c9e:	66 90                	xchg   ax,ax
c0001ca0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001ca5:	7e 11                	jle    c0001cb8 <isxdigit+0x38>
c0001ca7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cac:	7f 0a                	jg     c0001cb8 <isxdigit+0x38>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	b8 01 00 00 00       	mov    eax,0x1
c0001cb5:	c3                   	ret    
c0001cb6:	66 90                	xchg   ax,ax
c0001cb8:	b8 00 00 00 00       	mov    eax,0x0
c0001cbd:	c3                   	ret    

c0001cbe <disk_status>:
c0001cbe:	31 c0                	xor    eax,eax
c0001cc0:	c3                   	ret    

c0001cc1 <disk_initialize>:
c0001cc1:	31 c0                	xor    eax,eax
c0001cc3:	c3                   	ret    

c0001cc4 <disk_read>:
c0001cc4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cc9:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001cd1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cd5:	e9 86 62 01 00       	jmp    c0017f60 <fatWrapperReadDisk>

c0001cda <disk_write>:
c0001cda:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cdf:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001ce7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ceb:	e9 b4 62 01 00       	jmp    c0017fa4 <fatWrapperWriteDisk>

c0001cf0 <disk_ioctl>:
c0001cf0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001cf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001cf9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cfe:	0f b6 04 85 c0 72 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8d40]
c0001d06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d0a:	e9 d9 62 01 00       	jmp    c0017fe8 <fatWrapperIoctl>

c0001d0f <ld_word>:
c0001d0f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d13:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d16:	c1 e2 08             	shl    edx,0x8
c0001d19:	09 d0                	or     eax,edx
c0001d1b:	c3                   	ret    

c0001d1c <ld_dword>:
c0001d1c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d20:	89 d1                	mov    ecx,edx
c0001d22:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d26:	c1 e1 08             	shl    ecx,0x8
c0001d29:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d2c:	09 ca                	or     edx,ecx
c0001d2e:	c1 e2 08             	shl    edx,0x8
c0001d31:	09 d0                	or     eax,edx
c0001d33:	c3                   	ret    

c0001d34 <st_word>:
c0001d34:	66 89 10             	mov    WORD PTR [eax],dx
c0001d37:	c3                   	ret    

c0001d38 <st_dword>:
c0001d38:	89 10                	mov    DWORD PTR [eax],edx
c0001d3a:	c3                   	ret    

c0001d3b <mem_cpy>:
c0001d3b:	85 c9                	test   ecx,ecx
c0001d3d:	74 10                	je     c0001d4f <mem_cpy+0x14>
c0001d3f:	57                   	push   edi
c0001d40:	01 c1                	add    ecx,eax
c0001d42:	56                   	push   esi
c0001d43:	89 c7                	mov    edi,eax
c0001d45:	89 d6                	mov    esi,edx
c0001d47:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d48:	39 f9                	cmp    ecx,edi
c0001d4a:	75 fb                	jne    c0001d47 <mem_cpy+0xc>
c0001d4c:	5e                   	pop    esi
c0001d4d:	5f                   	pop    edi
c0001d4e:	c3                   	ret    
c0001d4f:	c3                   	ret    

c0001d50 <mem_set>:
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	40                   	inc    eax
c0001d53:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d56:	39 c8                	cmp    eax,ecx
c0001d58:	75 f8                	jne    c0001d52 <mem_set+0x2>
c0001d5a:	c3                   	ret    

c0001d5b <mem_cmp>:
c0001d5b:	57                   	push   edi
c0001d5c:	56                   	push   esi
c0001d5d:	89 c6                	mov    esi,eax
c0001d5f:	53                   	push   ebx
c0001d60:	46                   	inc    esi
c0001d61:	42                   	inc    edx
c0001d62:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d66:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d6a:	29 fb                	sub    ebx,edi
c0001d6c:	89 cf                	mov    edi,ecx
c0001d6e:	29 f7                	sub    edi,esi
c0001d70:	01 c7                	add    edi,eax
c0001d72:	74 04                	je     c0001d78 <mem_cmp+0x1d>
c0001d74:	85 db                	test   ebx,ebx
c0001d76:	74 e8                	je     c0001d60 <mem_cmp+0x5>
c0001d78:	89 d8                	mov    eax,ebx
c0001d7a:	5b                   	pop    ebx
c0001d7b:	5e                   	pop    esi
c0001d7c:	5f                   	pop    edi
c0001d7d:	c3                   	ret    

c0001d7e <chk_chr>:
c0001d7e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d81:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d84:	74 07                	je     c0001d8d <chk_chr+0xf>
c0001d86:	39 d1                	cmp    ecx,edx
c0001d88:	74 03                	je     c0001d8d <chk_chr+0xf>
c0001d8a:	40                   	inc    eax
c0001d8b:	eb f1                	jmp    c0001d7e <chk_chr>
c0001d8d:	89 c8                	mov    eax,ecx
c0001d8f:	c3                   	ret    

c0001d90 <dbc_1st>:
c0001d90:	31 c0                	xor    eax,eax
c0001d92:	c3                   	ret    

c0001d93 <dbc_2nd>:
c0001d93:	31 c0                	xor    eax,eax
c0001d95:	c3                   	ret    

c0001d96 <tchar2uni>:
c0001d96:	57                   	push   edi
c0001d97:	89 c7                	mov    edi,eax
c0001d99:	56                   	push   esi
c0001d9a:	53                   	push   ebx
c0001d9b:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d9d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d9f:	8d 73 01             	lea    esi,[ebx+0x1]
c0001da2:	84 c9                	test   cl,cl
c0001da4:	78 0a                	js     c0001db0 <tchar2uni+0x1a>
c0001da6:	0f b6 d1             	movzx  edx,cl
c0001da9:	89 f3                	mov    ebx,esi
c0001dab:	e9 9f 00 00 00       	jmp    c0001e4f <tchar2uni+0xb9>
c0001db0:	88 ca                	mov    dl,cl
c0001db2:	83 e2 e0             	and    edx,0xffffffe0
c0001db5:	80 fa c0             	cmp    dl,0xc0
c0001db8:	75 0c                	jne    c0001dc6 <tchar2uni+0x30>
c0001dba:	89 ca                	mov    edx,ecx
c0001dbc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dc1:	83 e2 1f             	and    edx,0x1f
c0001dc4:	eb 2e                	jmp    c0001df4 <tchar2uni+0x5e>
c0001dc6:	88 ca                	mov    dl,cl
c0001dc8:	83 e2 f0             	and    edx,0xfffffff0
c0001dcb:	80 fa e0             	cmp    dl,0xe0
c0001dce:	75 0c                	jne    c0001ddc <tchar2uni+0x46>
c0001dd0:	89 ca                	mov    edx,ecx
c0001dd2:	b9 02 00 00 00       	mov    ecx,0x2
c0001dd7:	83 e2 0f             	and    edx,0xf
c0001dda:	eb 18                	jmp    c0001df4 <tchar2uni+0x5e>
c0001ddc:	88 ca                	mov    dl,cl
c0001dde:	83 e2 f8             	and    edx,0xfffffff8
c0001de1:	88 d0                	mov    al,dl
c0001de3:	83 ca ff             	or     edx,0xffffffff
c0001de6:	3c f0                	cmp    al,0xf0
c0001de8:	75 6c                	jne    c0001e56 <tchar2uni+0xc0>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 03 00 00 00       	mov    ecx,0x3
c0001df1:	83 e2 07             	and    edx,0x7
c0001df4:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001df8:	46                   	inc    esi
c0001df9:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001dfc:	88 c8                	mov    al,cl
c0001dfe:	83 e0 c0             	and    eax,0xffffffc0
c0001e01:	3c 80                	cmp    al,0x80
c0001e03:	75 4e                	jne    c0001e53 <tchar2uni+0xbd>
c0001e05:	c1 e2 06             	shl    edx,0x6
c0001e08:	83 e1 3f             	and    ecx,0x3f
c0001e0b:	09 ca                	or     edx,ecx
c0001e0d:	39 de                	cmp    esi,ebx
c0001e0f:	75 e7                	jne    c0001df8 <tchar2uni+0x62>
c0001e11:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e14:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e1a:	77 37                	ja     c0001e53 <tchar2uni+0xbd>
c0001e1c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e22:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e28:	76 29                	jbe    c0001e53 <tchar2uni+0xbd>
c0001e2a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e30:	76 1d                	jbe    c0001e4f <tchar2uni+0xb9>
c0001e32:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e38:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e3e:	c1 e1 06             	shl    ecx,0x6
c0001e41:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e47:	09 ca                	or     edx,ecx
c0001e49:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e4f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e51:	eb 03                	jmp    c0001e56 <tchar2uni+0xc0>
c0001e53:	83 ca ff             	or     edx,0xffffffff
c0001e56:	5b                   	pop    ebx
c0001e57:	89 d0                	mov    eax,edx
c0001e59:	5e                   	pop    esi
c0001e5a:	5f                   	pop    edi
c0001e5b:	c3                   	ret    

c0001e5c <put_utf>:
c0001e5c:	53                   	push   ebx
c0001e5d:	83 f8 7f             	cmp    eax,0x7f
c0001e60:	89 c3                	mov    ebx,eax
c0001e62:	b0 00                	mov    al,0x0
c0001e64:	77 11                	ja     c0001e77 <put_utf+0x1b>
c0001e66:	85 c9                	test   ecx,ecx
c0001e68:	0f 84 e5 00 00 00    	je     c0001f53 <put_utf+0xf7>
c0001e6e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e70:	b0 01                	mov    al,0x1
c0001e72:	e9 dc 00 00 00       	jmp    c0001f53 <put_utf+0xf7>
c0001e77:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e7d:	77 23                	ja     c0001ea2 <put_utf+0x46>
c0001e7f:	83 f9 01             	cmp    ecx,0x1
c0001e82:	0f 86 cb 00 00 00    	jbe    c0001f53 <put_utf+0xf7>
c0001e88:	89 d8                	mov    eax,ebx
c0001e8a:	83 e3 3f             	and    ebx,0x3f
c0001e8d:	c1 e8 06             	shr    eax,0x6
c0001e90:	83 cb 80             	or     ebx,0xffffff80
c0001e93:	83 c8 c0             	or     eax,0xffffffc0
c0001e96:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e99:	88 02                	mov    BYTE PTR [edx],al
c0001e9b:	b0 02                	mov    al,0x2
c0001e9d:	e9 b1 00 00 00       	jmp    c0001f53 <put_utf+0xf7>
c0001ea2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ea8:	77 40                	ja     c0001eea <put_utf+0x8e>
c0001eaa:	83 f9 02             	cmp    ecx,0x2
c0001ead:	0f 86 a0 00 00 00    	jbe    c0001f53 <put_utf+0xf7>
c0001eb3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001eb9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ebf:	0f 86 8e 00 00 00    	jbe    c0001f53 <put_utf+0xf7>
c0001ec5:	89 d8                	mov    eax,ebx
c0001ec7:	c1 e8 0c             	shr    eax,0xc
c0001eca:	83 c8 e0             	or     eax,0xffffffe0
c0001ecd:	88 02                	mov    BYTE PTR [edx],al
c0001ecf:	89 d8                	mov    eax,ebx
c0001ed1:	83 e3 3f             	and    ebx,0x3f
c0001ed4:	c1 e8 06             	shr    eax,0x6
c0001ed7:	83 cb 80             	or     ebx,0xffffff80
c0001eda:	83 e0 3f             	and    eax,0x3f
c0001edd:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ee0:	83 c8 80             	or     eax,0xffffff80
c0001ee3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ee6:	b0 03                	mov    al,0x3
c0001ee8:	eb 69                	jmp    c0001f53 <put_utf+0xf7>
c0001eea:	83 f9 03             	cmp    ecx,0x3
c0001eed:	76 64                	jbe    c0001f53 <put_utf+0xf7>
c0001eef:	89 d9                	mov    ecx,ebx
c0001ef1:	0f b7 c3             	movzx  eax,bx
c0001ef4:	66 31 c9             	xor    cx,cx
c0001ef7:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001efd:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f03:	c1 e9 06             	shr    ecx,0x6
c0001f06:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f0c:	77 43                	ja     c0001f51 <put_utf+0xf5>
c0001f0e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f14:	77 3b                	ja     c0001f51 <put_utf+0xf5>
c0001f16:	09 cb                	or     ebx,ecx
c0001f18:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f1e:	89 d8                	mov    eax,ebx
c0001f20:	c1 e8 12             	shr    eax,0x12
c0001f23:	83 c8 f0             	or     eax,0xfffffff0
c0001f26:	88 02                	mov    BYTE PTR [edx],al
c0001f28:	89 d8                	mov    eax,ebx
c0001f2a:	c1 e8 0c             	shr    eax,0xc
c0001f2d:	83 e0 3f             	and    eax,0x3f
c0001f30:	83 c8 80             	or     eax,0xffffff80
c0001f33:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f36:	89 d8                	mov    eax,ebx
c0001f38:	83 e3 3f             	and    ebx,0x3f
c0001f3b:	c1 e8 06             	shr    eax,0x6
c0001f3e:	83 cb 80             	or     ebx,0xffffff80
c0001f41:	83 e0 3f             	and    eax,0x3f
c0001f44:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f47:	83 c8 80             	or     eax,0xffffff80
c0001f4a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f4d:	b0 04                	mov    al,0x4
c0001f4f:	eb 02                	jmp    c0001f53 <put_utf+0xf7>
c0001f51:	31 c0                	xor    eax,eax
c0001f53:	5b                   	pop    ebx
c0001f54:	c3                   	ret    

c0001f55 <clst2sect>:
c0001f55:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f58:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f5b:	83 ea 02             	sub    edx,0x2
c0001f5e:	39 ca                	cmp    edx,ecx
c0001f60:	76 0d                	jbe    c0001f6f <clst2sect+0x1a>
c0001f62:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f66:	0f af d1             	imul   edx,ecx
c0001f69:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f6c:	89 d0                	mov    eax,edx
c0001f6e:	c3                   	ret    
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <pick_lfn>:
c0001f72:	55                   	push   ebp
c0001f73:	57                   	push   edi
c0001f74:	56                   	push   esi
c0001f75:	89 d6                	mov    esi,edx
c0001f77:	53                   	push   ebx
c0001f78:	89 c3                	mov    ebx,eax
c0001f7a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f7d:	e8 8d fd ff ff       	call   c0001d0f <ld_word>
c0001f82:	66 85 c0             	test   ax,ax
c0001f85:	74 04                	je     c0001f8b <pick_lfn+0x19>
c0001f87:	31 c0                	xor    eax,eax
c0001f89:	eb 5c                	jmp    c0001fe7 <pick_lfn+0x75>
c0001f8b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f8e:	bd 01 00 00 00       	mov    ebp,0x1
c0001f93:	83 e1 bf             	and    ecx,0xffffffbf
c0001f96:	31 ff                	xor    edi,edi
c0001f98:	49                   	dec    ecx
c0001f99:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f9c:	0f b6 87 e0 e9 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe1620]
c0001fa3:	01 f0                	add    eax,esi
c0001fa5:	e8 65 fd ff ff       	call   c0001d0f <ld_word>
c0001faa:	66 85 ed             	test   bp,bp
c0001fad:	74 11                	je     c0001fc0 <pick_lfn+0x4e>
c0001faf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fb5:	77 d0                	ja     c0001f87 <pick_lfn+0x15>
c0001fb7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fbb:	89 c5                	mov    ebp,eax
c0001fbd:	41                   	inc    ecx
c0001fbe:	eb 04                	jmp    c0001fc4 <pick_lfn+0x52>
c0001fc0:	66 40                	inc    ax
c0001fc2:	75 c3                	jne    c0001f87 <pick_lfn+0x15>
c0001fc4:	47                   	inc    edi
c0001fc5:	83 ff 0d             	cmp    edi,0xd
c0001fc8:	75 d2                	jne    c0001f9c <pick_lfn+0x2a>
c0001fca:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fcd:	74 13                	je     c0001fe2 <pick_lfn+0x70>
c0001fcf:	66 85 ed             	test   bp,bp
c0001fd2:	74 0e                	je     c0001fe2 <pick_lfn+0x70>
c0001fd4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fda:	77 ab                	ja     c0001f87 <pick_lfn+0x15>
c0001fdc:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fe2:	b8 01 00 00 00       	mov    eax,0x1
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	5f                   	pop    edi
c0001fea:	5d                   	pop    ebp
c0001feb:	c3                   	ret    

c0001fec <put_lfn>:
c0001fec:	55                   	push   ebp
c0001fed:	31 ed                	xor    ebp,ebp
c0001fef:	57                   	push   edi
c0001ff0:	89 d7                	mov    edi,edx
c0001ff2:	56                   	push   esi
c0001ff3:	31 f6                	xor    esi,esi
c0001ff5:	53                   	push   ebx
c0001ff6:	83 ec 08             	sub    esp,0x8
c0001ff9:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ffc:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002000:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002004:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000200a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000200d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002010:	31 d2                	xor    edx,edx
c0002012:	e8 1d fd ff ff       	call   c0001d34 <st_word>
c0002017:	0f b6 d9             	movzx  ebx,cl
c000201a:	4b                   	dec    ebx
c000201b:	6b db 0d             	imul   ebx,ebx,0xd
c000201e:	66 83 fe ff          	cmp    si,0xffff
c0002022:	74 08                	je     c000202c <put_lfn+0x40>
c0002024:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002027:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000202b:	43                   	inc    ebx
c000202c:	0f b6 85 e0 e9 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe1620]
c0002033:	0f b7 d6             	movzx  edx,si
c0002036:	01 f8                	add    eax,edi
c0002038:	e8 f7 fc ff ff       	call   c0001d34 <st_word>
c000203d:	66 85 f6             	test   si,si
c0002040:	75 03                	jne    c0002045 <put_lfn+0x59>
c0002042:	83 ce ff             	or     esi,0xffffffff
c0002045:	45                   	inc    ebp
c0002046:	83 fd 0d             	cmp    ebp,0xd
c0002049:	75 d3                	jne    c000201e <put_lfn+0x32>
c000204b:	66 46                	inc    si
c000204d:	74 0a                	je     c0002059 <put_lfn+0x6d>
c000204f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002052:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002057:	75 09                	jne    c0002062 <put_lfn+0x76>
c0002059:	88 c8                	mov    al,cl
c000205b:	83 c8 40             	or     eax,0x40
c000205e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002062:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002066:	88 07                	mov    BYTE PTR [edi],al
c0002068:	83 c4 08             	add    esp,0x8
c000206b:	5b                   	pop    ebx
c000206c:	5e                   	pop    esi
c000206d:	5f                   	pop    edi
c000206e:	5d                   	pop    ebp
c000206f:	c3                   	ret    

c0002070 <gen_numname>:
c0002070:	57                   	push   edi
c0002071:	89 cf                	mov    edi,ecx
c0002073:	56                   	push   esi
c0002074:	b9 0b 00 00 00       	mov    ecx,0xb
c0002079:	53                   	push   ebx
c000207a:	89 c6                	mov    esi,eax
c000207c:	83 ec 10             	sub    esp,0x10
c000207f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002083:	e8 b3 fc ff ff       	call   c0001d3b <mem_cpy>
c0002088:	83 fb 05             	cmp    ebx,0x5
c000208b:	76 2d                	jbe    c00020ba <gen_numname+0x4a>
c000208d:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002090:	66 85 c0             	test   ax,ax
c0002093:	74 25                	je     c00020ba <gen_numname+0x4a>
c0002095:	83 c7 02             	add    edi,0x2
c0002098:	ba 10 00 00 00       	mov    edx,0x10
c000209d:	01 db                	add    ebx,ebx
c000209f:	89 c1                	mov    ecx,eax
c00020a1:	66 d1 e8             	shr    ax,1
c00020a4:	83 e1 01             	and    ecx,0x1
c00020a7:	01 cb                	add    ebx,ecx
c00020a9:	0f ba e3 10          	bt     ebx,0x10
c00020ad:	73 06                	jae    c00020b5 <gen_numname+0x45>
c00020af:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020b5:	4a                   	dec    edx
c00020b6:	75 e5                	jne    c000209d <gen_numname+0x2d>
c00020b8:	eb d3                	jmp    c000208d <gen_numname+0x1d>
c00020ba:	b8 07 00 00 00       	mov    eax,0x7
c00020bf:	88 d9                	mov    cl,bl
c00020c1:	83 e1 0f             	and    ecx,0xf
c00020c4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020c7:	80 fa 39             	cmp    dl,0x39
c00020ca:	76 03                	jbe    c00020cf <gen_numname+0x5f>
c00020cc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020cf:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020d2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020d6:	89 da                	mov    edx,ebx
c00020d8:	c1 ea 04             	shr    edx,0x4
c00020db:	83 fb 0f             	cmp    ebx,0xf
c00020de:	76 06                	jbe    c00020e6 <gen_numname+0x76>
c00020e0:	89 c8                	mov    eax,ecx
c00020e2:	89 d3                	mov    ebx,edx
c00020e4:	eb d9                	jmp    c00020bf <gen_numname+0x4f>
c00020e6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020eb:	31 d2                	xor    edx,edx
c00020ed:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020f0:	8d 04 16             	lea    eax,[esi+edx*1]
c00020f3:	39 ca                	cmp    edx,ecx
c00020f5:	73 18                	jae    c000210f <gen_numname+0x9f>
c00020f7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020fa:	3c 20                	cmp    al,0x20
c00020fc:	74 11                	je     c000210f <gen_numname+0x9f>
c00020fe:	e8 8d fc ff ff       	call   c0001d90 <dbc_1st>
c0002103:	85 c0                	test   eax,eax
c0002105:	74 05                	je     c000210c <gen_numname+0x9c>
c0002107:	39 d3                	cmp    ebx,edx
c0002109:	74 04                	je     c000210f <gen_numname+0x9f>
c000210b:	42                   	inc    edx
c000210c:	42                   	inc    edx
c000210d:	eb e1                	jmp    c00020f0 <gen_numname+0x80>
c000210f:	b0 20                	mov    al,0x20
c0002111:	83 f9 07             	cmp    ecx,0x7
c0002114:	77 05                	ja     c000211b <gen_numname+0xab>
c0002116:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000211a:	41                   	inc    ecx
c000211b:	42                   	inc    edx
c000211c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002120:	83 fa 07             	cmp    edx,0x7
c0002123:	76 ea                	jbe    c000210f <gen_numname+0x9f>
c0002125:	83 c4 10             	add    esp,0x10
c0002128:	5b                   	pop    ebx
c0002129:	5e                   	pop    esi
c000212a:	5f                   	pop    edi
c000212b:	c3                   	ret    

c000212c <sum_sfn>:
c000212c:	31 c9                	xor    ecx,ecx
c000212e:	31 d2                	xor    edx,edx
c0002130:	d0 ca                	ror    dl,1
c0002132:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002135:	41                   	inc    ecx
c0002136:	83 f9 0b             	cmp    ecx,0xb
c0002139:	75 f5                	jne    c0002130 <sum_sfn+0x4>
c000213b:	88 d0                	mov    al,dl
c000213d:	c3                   	ret    

c000213e <get_ldnumber>:
c000213e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002140:	85 d2                	test   edx,edx
c0002142:	74 14                	je     c0002158 <get_ldnumber+0x1a>
c0002144:	56                   	push   esi
c0002145:	53                   	push   ebx
c0002146:	89 d3                	mov    ebx,edx
c0002148:	43                   	inc    ebx
c0002149:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214c:	80 f9 1f             	cmp    cl,0x1f
c000214f:	76 0d                	jbe    c000215e <get_ldnumber+0x20>
c0002151:	80 f9 3a             	cmp    cl,0x3a
c0002154:	75 f2                	jne    c0002148 <get_ldnumber+0xa>
c0002156:	eb 0a                	jmp    c0002162 <get_ldnumber+0x24>
c0002158:	83 c9 ff             	or     ecx,0xffffffff
c000215b:	89 c8                	mov    eax,ecx
c000215d:	c3                   	ret    
c000215e:	31 c9                	xor    ecx,ecx
c0002160:	eb 24                	jmp    c0002186 <get_ldnumber+0x48>
c0002162:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002165:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002168:	80 f9 09             	cmp    cl,0x9
c000216b:	77 16                	ja     c0002183 <get_ldnumber+0x45>
c000216d:	83 c2 02             	add    edx,0x2
c0002170:	83 c9 ff             	or     ecx,0xffffffff
c0002173:	39 d3                	cmp    ebx,edx
c0002175:	75 0f                	jne    c0002186 <get_ldnumber+0x48>
c0002177:	89 f2                	mov    edx,esi
c0002179:	89 18                	mov    DWORD PTR [eax],ebx
c000217b:	0f be ca             	movsx  ecx,dl
c000217e:	83 e9 30             	sub    ecx,0x30
c0002181:	eb 03                	jmp    c0002186 <get_ldnumber+0x48>
c0002183:	83 c9 ff             	or     ecx,0xffffffff
c0002186:	89 c8                	mov    eax,ecx
c0002188:	5b                   	pop    ebx
c0002189:	5e                   	pop    esi
c000218a:	c3                   	ret    

c000218b <validate>:
c000218b:	56                   	push   esi
c000218c:	53                   	push   ebx
c000218d:	89 d6                	mov    esi,edx
c000218f:	51                   	push   ecx
c0002190:	85 c0                	test   eax,eax
c0002192:	75 09                	jne    c000219d <validate+0x12>
c0002194:	b8 09 00 00 00       	mov    eax,0x9
c0002199:	31 c9                	xor    ecx,ecx
c000219b:	eb 2f                	jmp    c00021cc <validate+0x41>
c000219d:	89 c3                	mov    ebx,eax
c000219f:	8b 00                	mov    eax,DWORD PTR [eax]
c00021a1:	85 c0                	test   eax,eax
c00021a3:	74 ef                	je     c0002194 <validate+0x9>
c00021a5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021a8:	74 ea                	je     c0002194 <validate+0x9>
c00021aa:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021ae:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021b2:	75 e0                	jne    c0002194 <validate+0x9>
c00021b4:	83 ec 0c             	sub    esp,0xc
c00021b7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021bb:	50                   	push   eax
c00021bc:	e8 fd fa ff ff       	call   c0001cbe <disk_status>
c00021c1:	83 c4 10             	add    esp,0x10
c00021c4:	a8 01                	test   al,0x1
c00021c6:	75 cc                	jne    c0002194 <validate+0x9>
c00021c8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021ca:	31 c0                	xor    eax,eax
c00021cc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021ce:	5a                   	pop    edx
c00021cf:	5b                   	pop    ebx
c00021d0:	5e                   	pop    esi
c00021d1:	c3                   	ret    

c00021d2 <sync_window>:
c00021d2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021d6:	74 58                	je     c0002230 <sync_window+0x5e>
c00021d8:	56                   	push   esi
c00021d9:	53                   	push   ebx
c00021da:	8d 70 34             	lea    esi,[eax+0x34]
c00021dd:	51                   	push   ecx
c00021de:	89 c3                	mov    ebx,eax
c00021e0:	6a 01                	push   0x1
c00021e2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021e5:	56                   	push   esi
c00021e6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021ea:	50                   	push   eax
c00021eb:	e8 ea fa ff ff       	call   c0001cda <disk_write>
c00021f0:	83 c4 10             	add    esp,0x10
c00021f3:	ba 01 00 00 00       	mov    edx,0x1
c00021f8:	85 c0                	test   eax,eax
c00021fa:	75 2e                	jne    c000222a <sync_window+0x58>
c00021fc:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00021ff:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002202:	89 c1                	mov    ecx,eax
c0002204:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002208:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000220b:	39 d1                	cmp    ecx,edx
c000220d:	73 19                	jae    c0002228 <sync_window+0x56>
c000220f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002213:	75 13                	jne    c0002228 <sync_window+0x56>
c0002215:	6a 01                	push   0x1
c0002217:	01 d0                	add    eax,edx
c0002219:	50                   	push   eax
c000221a:	56                   	push   esi
c000221b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000221f:	50                   	push   eax
c0002220:	e8 b5 fa ff ff       	call   c0001cda <disk_write>
c0002225:	83 c4 10             	add    esp,0x10
c0002228:	31 d2                	xor    edx,edx
c000222a:	89 d0                	mov    eax,edx
c000222c:	5a                   	pop    edx
c000222d:	5b                   	pop    ebx
c000222e:	5e                   	pop    esi
c000222f:	c3                   	ret    
c0002230:	31 d2                	xor    edx,edx
c0002232:	89 d0                	mov    eax,edx
c0002234:	c3                   	ret    

c0002235 <move_window>:
c0002235:	57                   	push   edi
c0002236:	56                   	push   esi
c0002237:	31 f6                	xor    esi,esi
c0002239:	53                   	push   ebx
c000223a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000223d:	74 32                	je     c0002271 <move_window+0x3c>
c000223f:	89 c3                	mov    ebx,eax
c0002241:	89 d7                	mov    edi,edx
c0002243:	e8 8a ff ff ff       	call   c00021d2 <sync_window>
c0002248:	89 c6                	mov    esi,eax
c000224a:	85 c0                	test   eax,eax
c000224c:	75 23                	jne    c0002271 <move_window+0x3c>
c000224e:	6a 01                	push   0x1
c0002250:	8d 43 34             	lea    eax,[ebx+0x34]
c0002253:	57                   	push   edi
c0002254:	50                   	push   eax
c0002255:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002259:	50                   	push   eax
c000225a:	e8 65 fa ff ff       	call   c0001cc4 <disk_read>
c000225f:	83 c4 10             	add    esp,0x10
c0002262:	85 c0                	test   eax,eax
c0002264:	74 08                	je     c000226e <move_window+0x39>
c0002266:	be 01 00 00 00       	mov    esi,0x1
c000226b:	83 cf ff             	or     edi,0xffffffff
c000226e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002271:	89 f0                	mov    eax,esi
c0002273:	5b                   	pop    ebx
c0002274:	5e                   	pop    esi
c0002275:	5f                   	pop    edi
c0002276:	c3                   	ret    

c0002277 <check_fs>:
c0002277:	53                   	push   ebx
c0002278:	89 c3                	mov    ebx,eax
c000227a:	83 ec 08             	sub    esp,0x8
c000227d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002281:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002288:	e8 a8 ff ff ff       	call   c0002235 <move_window>
c000228d:	ba 04 00 00 00       	mov    edx,0x4
c0002292:	85 c0                	test   eax,eax
c0002294:	75 68                	jne    c00022fe <check_fs+0x87>
c0002296:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000229c:	e8 6e fa ff ff       	call   c0001d0f <ld_word>
c00022a1:	ba 03 00 00 00       	mov    edx,0x3
c00022a6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022aa:	75 52                	jne    c00022fe <check_fs+0x87>
c00022ac:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022af:	8d 50 18             	lea    edx,[eax+0x18]
c00022b2:	80 fa 01             	cmp    dl,0x1
c00022b5:	76 09                	jbe    c00022c0 <check_fs+0x49>
c00022b7:	ba 02 00 00 00       	mov    edx,0x2
c00022bc:	3c eb                	cmp    al,0xeb
c00022be:	75 3e                	jne    c00022fe <check_fs+0x87>
c00022c0:	ba 0c 0a 02 c0       	mov    edx,0xc0020a0c
c00022c5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022c8:	b9 03 00 00 00       	mov    ecx,0x3
c00022cd:	e8 89 fa ff ff       	call   c0001d5b <mem_cmp>
c00022d2:	31 d2                	xor    edx,edx
c00022d4:	85 c0                	test   eax,eax
c00022d6:	74 26                	je     c00022fe <check_fs+0x87>
c00022d8:	ba 9c e8 01 c0       	mov    edx,0xc001e89c
c00022dd:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022e3:	b9 05 00 00 00       	mov    ecx,0x5
c00022e8:	e8 6e fa ff ff       	call   c0001d5b <mem_cmp>
c00022ed:	31 d2                	xor    edx,edx
c00022ef:	85 c0                	test   eax,eax
c00022f1:	74 0b                	je     c00022fe <check_fs+0x87>
c00022f3:	31 d2                	xor    edx,edx
c00022f5:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00022f9:	0f 95 c2             	setne  dl
c00022fc:	01 d2                	add    edx,edx
c00022fe:	89 d0                	mov    eax,edx
c0002300:	83 c4 08             	add    esp,0x8
c0002303:	5b                   	pop    ebx
c0002304:	c3                   	ret    

c0002305 <find_volume>:
c0002305:	55                   	push   ebp
c0002306:	57                   	push   edi
c0002307:	56                   	push   esi
c0002308:	89 c6                	mov    esi,eax
c000230a:	53                   	push   ebx
c000230b:	89 d3                	mov    ebx,edx
c000230d:	83 ec 2c             	sub    esp,0x2c
c0002310:	31 d2                	xor    edx,edx
c0002312:	e8 60 ff ff ff       	call   c0002277 <check_fs>
c0002317:	83 f8 02             	cmp    eax,0x2
c000231a:	74 06                	je     c0002322 <find_volume+0x1d>
c000231c:	77 62                	ja     c0002380 <find_volume+0x7b>
c000231e:	85 db                	test   ebx,ebx
c0002320:	74 5e                	je     c0002380 <find_volume+0x7b>
c0002322:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002326:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000232c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002332:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002336:	89 cf                	mov    edi,ecx
c0002338:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000233c:	89 e8                	mov    eax,ebp
c000233e:	83 c5 10             	add    ebp,0x10
c0002341:	e8 d6 f9 ff ff       	call   c0001d1c <ld_dword>
c0002346:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000234a:	89 01                	mov    DWORD PTR [ecx],eax
c000234c:	83 c1 04             	add    ecx,0x4
c000234f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002353:	75 e3                	jne    c0002338 <find_volume+0x33>
c0002355:	31 ed                	xor    ebp,ebp
c0002357:	85 db                	test   ebx,ebx
c0002359:	74 03                	je     c000235e <find_volume+0x59>
c000235b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000235e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002361:	b8 03 00 00 00       	mov    eax,0x3
c0002366:	85 d2                	test   edx,edx
c0002368:	74 0c                	je     c0002376 <find_volume+0x71>
c000236a:	89 f0                	mov    eax,esi
c000236c:	e8 06 ff ff ff       	call   c0002277 <check_fs>
c0002371:	83 f8 01             	cmp    eax,0x1
c0002374:	76 0a                	jbe    c0002380 <find_volume+0x7b>
c0002376:	85 db                	test   ebx,ebx
c0002378:	75 06                	jne    c0002380 <find_volume+0x7b>
c000237a:	45                   	inc    ebp
c000237b:	83 fd 03             	cmp    ebp,0x3
c000237e:	76 de                	jbe    c000235e <find_volume+0x59>
c0002380:	83 c4 2c             	add    esp,0x2c
c0002383:	5b                   	pop    ebx
c0002384:	5e                   	pop    esi
c0002385:	5f                   	pop    edi
c0002386:	5d                   	pop    ebp
c0002387:	c3                   	ret    

c0002388 <mount_volume>:
c0002388:	55                   	push   ebp
c0002389:	89 d5                	mov    ebp,edx
c000238b:	57                   	push   edi
c000238c:	89 cf                	mov    edi,ecx
c000238e:	56                   	push   esi
c000238f:	53                   	push   ebx
c0002390:	bb 0b 00 00 00       	mov    ebx,0xb
c0002395:	83 ec 2c             	sub    esp,0x2c
c0002398:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000239e:	e8 9b fd ff ff       	call   c000213e <get_ldnumber>
c00023a3:	85 c0                	test   eax,eax
c00023a5:	0f 88 d6 02 00 00    	js     c0002681 <mount_volume+0x2f9>
c00023ab:	8b 34 85 a0 34 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcb60]
c00023b2:	89 c2                	mov    edx,eax
c00023b4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023b9:	85 f6                	test   esi,esi
c00023bb:	0f 84 c0 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c00023c1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023c4:	83 e7 fe             	and    edi,0xfffffffe
c00023c7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023ca:	74 3a                	je     c0002406 <mount_volume+0x7e>
c00023cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023d0:	83 ec 0c             	sub    esp,0xc
c00023d3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023d7:	50                   	push   eax
c00023d8:	e8 e1 f8 ff ff       	call   c0001cbe <disk_status>
c00023dd:	83 c4 10             	add    esp,0x10
c00023e0:	a8 01                	test   al,0x1
c00023e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023e6:	75 1e                	jne    c0002406 <mount_volume+0x7e>
c00023e8:	31 db                	xor    ebx,ebx
c00023ea:	89 f9                	mov    ecx,edi
c00023ec:	84 c9                	test   cl,cl
c00023ee:	0f 84 8d 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c00023f4:	a8 04                	test   al,0x4
c00023f6:	0f 84 85 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c00023fc:	bb 0a 00 00 00       	mov    ebx,0xa
c0002401:	e9 7b 02 00 00       	jmp    c0002681 <mount_volume+0x2f9>
c0002406:	83 ec 0c             	sub    esp,0xc
c0002409:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000240c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000240f:	0f b6 c2             	movzx  eax,dl
c0002412:	bb 03 00 00 00       	mov    ebx,0x3
c0002417:	50                   	push   eax
c0002418:	e8 a4 f8 ff ff       	call   c0001cc1 <disk_initialize>
c000241d:	83 c4 10             	add    esp,0x10
c0002420:	a8 01                	test   al,0x1
c0002422:	0f 85 59 02 00 00    	jne    c0002681 <mount_volume+0x2f9>
c0002428:	89 f9                	mov    ecx,edi
c000242a:	84 c9                	test   cl,cl
c000242c:	74 04                	je     c0002432 <mount_volume+0xaa>
c000242e:	a8 04                	test   al,0x4
c0002430:	75 ca                	jne    c00023fc <mount_volume+0x74>
c0002432:	31 d2                	xor    edx,edx
c0002434:	89 f0                	mov    eax,esi
c0002436:	bb 01 00 00 00       	mov    ebx,0x1
c000243b:	e8 c5 fe ff ff       	call   c0002305 <find_volume>
c0002440:	83 f8 04             	cmp    eax,0x4
c0002443:	0f 84 38 02 00 00    	je     c0002681 <mount_volume+0x2f9>
c0002449:	83 f8 01             	cmp    eax,0x1
c000244c:	76 0a                	jbe    c0002458 <mount_volume+0xd0>
c000244e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002453:	e9 29 02 00 00       	jmp    c0002681 <mount_volume+0x2f9>
c0002458:	8d 46 3f             	lea    eax,[esi+0x3f]
c000245b:	e8 af f8 ff ff       	call   c0001d0f <ld_word>
c0002460:	66 3d 00 02          	cmp    ax,0x200
c0002464:	75 e8                	jne    c000244e <mount_volume+0xc6>
c0002466:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002469:	e8 a1 f8 ff ff       	call   c0001d0f <ld_word>
c000246e:	0f b7 c0             	movzx  eax,ax
c0002471:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002475:	85 c0                	test   eax,eax
c0002477:	75 0c                	jne    c0002485 <mount_volume+0xfd>
c0002479:	8d 46 58             	lea    eax,[esi+0x58]
c000247c:	e8 9b f8 ff ff       	call   c0001d1c <ld_dword>
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002488:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000248b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000248f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002493:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002496:	89 e8                	mov    eax,ebp
c0002498:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000249b:	8d 45 ff             	lea    eax,[ebp-0x1]
c000249e:	3c 01                	cmp    al,0x1
c00024a0:	77 ac                	ja     c000244e <mount_volume+0xc6>
c00024a2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024a6:	89 c3                	mov    ebx,eax
c00024a8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024ac:	66 85 c0             	test   ax,ax
c00024af:	74 9d                	je     c000244e <mount_volume+0xc6>
c00024b1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024b4:	85 d8                	test   eax,ebx
c00024b6:	75 96                	jne    c000244e <mount_volume+0xc6>
c00024b8:	8d 46 45             	lea    eax,[esi+0x45]
c00024bb:	e8 4f f8 ff ff       	call   c0001d0f <ld_word>
c00024c0:	89 c7                	mov    edi,eax
c00024c2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024c6:	a8 0f                	test   al,0xf
c00024c8:	75 84                	jne    c000244e <mount_volume+0xc6>
c00024ca:	8d 46 47             	lea    eax,[esi+0x47]
c00024cd:	e8 3d f8 ff ff       	call   c0001d0f <ld_word>
c00024d2:	0f b7 d0             	movzx  edx,ax
c00024d5:	85 d2                	test   edx,edx
c00024d7:	75 0a                	jne    c00024e3 <mount_volume+0x15b>
c00024d9:	8d 46 54             	lea    eax,[esi+0x54]
c00024dc:	e8 3b f8 ff ff       	call   c0001d1c <ld_dword>
c00024e1:	89 c2                	mov    edx,eax
c00024e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024e7:	8d 46 42             	lea    eax,[esi+0x42]
c00024ea:	e8 20 f8 ff ff       	call   c0001d0f <ld_word>
c00024ef:	66 85 c0             	test   ax,ax
c00024f2:	0f 84 56 ff ff ff    	je     c000244e <mount_volume+0xc6>
c00024f8:	89 e9                	mov    ecx,ebp
c00024fa:	0f b7 c0             	movzx  eax,ax
c00024fd:	0f b6 e9             	movzx  ebp,cl
c0002500:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002504:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002508:	89 f8                	mov    eax,edi
c000250a:	0f af cd             	imul   ecx,ebp
c000250d:	66 c1 e8 04          	shr    ax,0x4
c0002511:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002515:	0f b7 c0             	movzx  eax,ax
c0002518:	01 c8                	add    eax,ecx
c000251a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000251e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002522:	39 c2                	cmp    edx,eax
c0002524:	0f 82 24 ff ff ff    	jb     c000244e <mount_volume+0xc6>
c000252a:	29 c2                	sub    edx,eax
c000252c:	89 d5                	mov    ebp,edx
c000252e:	89 d0                	mov    eax,edx
c0002530:	31 d2                	xor    edx,edx
c0002532:	f7 f3                	div    ebx
c0002534:	39 dd                	cmp    ebp,ebx
c0002536:	0f 82 12 ff ff ff    	jb     c000244e <mount_volume+0xc6>
c000253c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002541:	0f 87 07 ff ff ff    	ja     c000244e <mount_volume+0xc6>
c0002547:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000254c:	0f 86 1f 01 00 00    	jbe    c0002671 <mount_volume+0x2e9>
c0002552:	bb 03 00 00 00       	mov    ebx,0x3
c0002557:	8d 68 02             	lea    ebp,[eax+0x2]
c000255a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000255e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002562:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002566:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002569:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000256c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002570:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002573:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002577:	83 fb 03             	cmp    ebx,0x3
c000257a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000257d:	75 21                	jne    c00025a0 <mount_volume+0x218>
c000257f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002582:	e8 88 f7 ff ff       	call   c0001d0f <ld_word>
c0002587:	66 09 c7             	or     di,ax
c000258a:	0f 85 be fe ff ff    	jne    c000244e <mount_volume+0xc6>
c0002590:	8d 46 60             	lea    eax,[esi+0x60]
c0002593:	c1 e5 02             	shl    ebp,0x2
c0002596:	e8 81 f7 ff ff       	call   c0001d1c <ld_dword>
c000259b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000259e:	eb 22                	jmp    c00025c2 <mount_volume+0x23a>
c00025a0:	66 85 ff             	test   di,di
c00025a3:	0f 84 a5 fe ff ff    	je     c000244e <mount_volume+0xc6>
c00025a9:	01 c8                	add    eax,ecx
c00025ab:	83 fb 02             	cmp    ebx,0x2
c00025ae:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025b1:	75 04                	jne    c00025b7 <mount_volume+0x22f>
c00025b3:	01 ed                	add    ebp,ebp
c00025b5:	eb 0b                	jmp    c00025c2 <mount_volume+0x23a>
c00025b7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025bb:	83 e5 01             	and    ebp,0x1
c00025be:	d1 e8                	shr    eax,1
c00025c0:	01 c5                	add    ebp,eax
c00025c2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025c8:	c1 ed 09             	shr    ebp,0x9
c00025cb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025cf:	0f 87 79 fe ff ff    	ja     c000244e <mount_volume+0xc6>
c00025d5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025dc:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025e3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025e7:	83 fb 03             	cmp    ebx,0x3
c00025ea:	75 6e                	jne    c000265a <mount_volume+0x2d2>
c00025ec:	8d 46 64             	lea    eax,[esi+0x64]
c00025ef:	e8 1b f7 ff ff       	call   c0001d0f <ld_word>
c00025f4:	66 48                	dec    ax
c00025f6:	75 62                	jne    c000265a <mount_volume+0x2d2>
c00025f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00025fc:	89 f0                	mov    eax,esi
c00025fe:	42                   	inc    edx
c00025ff:	e8 31 fc ff ff       	call   c0002235 <move_window>
c0002604:	85 c0                	test   eax,eax
c0002606:	75 52                	jne    c000265a <mount_volume+0x2d2>
c0002608:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000260c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002612:	e8 f8 f6 ff ff       	call   c0001d0f <ld_word>
c0002617:	66 3d 55 aa          	cmp    ax,0xaa55
c000261b:	75 3d                	jne    c000265a <mount_volume+0x2d2>
c000261d:	8d 46 34             	lea    eax,[esi+0x34]
c0002620:	e8 f7 f6 ff ff       	call   c0001d1c <ld_dword>
c0002625:	3d 52 52 61 41       	cmp    eax,0x41615252
c000262a:	75 2e                	jne    c000265a <mount_volume+0x2d2>
c000262c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002632:	e8 e5 f6 ff ff       	call   c0001d1c <ld_dword>
c0002637:	3d 72 72 41 61       	cmp    eax,0x61417272
c000263c:	75 1c                	jne    c000265a <mount_volume+0x2d2>
c000263e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002644:	e8 d3 f6 ff ff       	call   c0001d1c <ld_dword>
c0002649:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000264c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002652:	e8 c5 f6 ff ff       	call   c0001d1c <ld_dword>
c0002657:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000265a:	66 a1 80 34 02 c0    	mov    ax,ds:0xc0023480
c0002660:	88 1e                	mov    BYTE PTR [esi],bl
c0002662:	40                   	inc    eax
c0002663:	31 db                	xor    ebx,ebx
c0002665:	66 a3 80 34 02 c0    	mov    ds:0xc0023480,ax
c000266b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000266f:	eb 10                	jmp    c0002681 <mount_volume+0x2f9>
c0002671:	31 db                	xor    ebx,ebx
c0002673:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002678:	0f 97 c3             	seta   bl
c000267b:	43                   	inc    ebx
c000267c:	e9 d6 fe ff ff       	jmp    c0002557 <mount_volume+0x1cf>
c0002681:	83 c4 2c             	add    esp,0x2c
c0002684:	89 d8                	mov    eax,ebx
c0002686:	5b                   	pop    ebx
c0002687:	5e                   	pop    esi
c0002688:	5f                   	pop    edi
c0002689:	5d                   	pop    ebp
c000268a:	c3                   	ret    

c000268b <put_fat>:
c000268b:	55                   	push   ebp
c000268c:	bd 02 00 00 00       	mov    ebp,0x2
c0002691:	57                   	push   edi
c0002692:	56                   	push   esi
c0002693:	53                   	push   ebx
c0002694:	83 ec 1c             	sub    esp,0x1c
c0002697:	83 fa 01             	cmp    edx,0x1
c000269a:	0f 86 31 01 00 00    	jbe    c00027d1 <put_fat+0x146>
c00026a0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026a3:	0f 86 28 01 00 00    	jbe    c00027d1 <put_fat+0x146>
c00026a9:	89 c6                	mov    esi,eax
c00026ab:	89 cf                	mov    edi,ecx
c00026ad:	8a 00                	mov    al,BYTE PTR [eax]
c00026af:	89 d3                	mov    ebx,edx
c00026b1:	3c 02                	cmp    al,0x2
c00026b3:	0f 84 ac 00 00 00    	je     c0002765 <put_fat+0xda>
c00026b9:	3c 03                	cmp    al,0x3
c00026bb:	0f 84 d1 00 00 00    	je     c0002792 <put_fat+0x107>
c00026c1:	fe c8                	dec    al
c00026c3:	0f 85 08 01 00 00    	jne    c00027d1 <put_fat+0x146>
c00026c9:	89 d1                	mov    ecx,edx
c00026cb:	89 f0                	mov    eax,esi
c00026cd:	d1 e9                	shr    ecx,1
c00026cf:	01 d1                	add    ecx,edx
c00026d1:	89 ca                	mov    edx,ecx
c00026d3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026d7:	c1 ea 09             	shr    edx,0x9
c00026da:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026dd:	e8 53 fb ff ff       	call   c0002235 <move_window>
c00026e2:	89 c5                	mov    ebp,eax
c00026e4:	85 c0                	test   eax,eax
c00026e6:	0f 85 e5 00 00 00    	jne    c00027d1 <put_fat+0x146>
c00026ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f0:	8d 46 34             	lea    eax,[esi+0x34]
c00026f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026f7:	8d 41 01             	lea    eax,[ecx+0x1]
c00026fa:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002700:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002704:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002708:	89 f8                	mov    eax,edi
c000270a:	83 e3 01             	and    ebx,0x1
c000270d:	74 0c                	je     c000271b <put_fat+0x90>
c000270f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002711:	89 f8                	mov    eax,edi
c0002713:	83 e2 0f             	and    edx,0xf
c0002716:	c1 e0 04             	shl    eax,0x4
c0002719:	09 d0                	or     eax,edx
c000271b:	88 01                	mov    BYTE PTR [ecx],al
c000271d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002721:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002725:	c1 ea 09             	shr    edx,0x9
c0002728:	89 f0                	mov    eax,esi
c000272a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000272d:	e8 03 fb ff ff       	call   c0002235 <move_window>
c0002732:	89 c5                	mov    ebp,eax
c0002734:	85 c0                	test   eax,eax
c0002736:	0f 85 95 00 00 00    	jne    c00027d1 <put_fat+0x146>
c000273c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002740:	25 ff 01 00 00       	and    eax,0x1ff
c0002745:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002749:	85 db                	test   ebx,ebx
c000274b:	74 07                	je     c0002754 <put_fat+0xc9>
c000274d:	c1 ef 04             	shr    edi,0x4
c0002750:	89 f9                	mov    ecx,edi
c0002752:	eb 0d                	jmp    c0002761 <put_fat+0xd6>
c0002754:	8a 08                	mov    cl,BYTE PTR [eax]
c0002756:	c1 ef 08             	shr    edi,0x8
c0002759:	83 e1 f0             	and    ecx,0xfffffff0
c000275c:	83 e7 0f             	and    edi,0xf
c000275f:	09 f9                	or     ecx,edi
c0002761:	88 08                	mov    BYTE PTR [eax],cl
c0002763:	eb 27                	jmp    c000278c <put_fat+0x101>
c0002765:	c1 ea 08             	shr    edx,0x8
c0002768:	89 f0                	mov    eax,esi
c000276a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000276d:	e8 c3 fa ff ff       	call   c0002235 <move_window>
c0002772:	89 c5                	mov    ebp,eax
c0002774:	85 c0                	test   eax,eax
c0002776:	75 59                	jne    c00027d1 <put_fat+0x146>
c0002778:	01 db                	add    ebx,ebx
c000277a:	0f b7 d7             	movzx  edx,di
c000277d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002783:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002787:	e8 a8 f5 ff ff       	call   c0001d34 <st_word>
c000278c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002790:	eb 3f                	jmp    c00027d1 <put_fat+0x146>
c0002792:	c1 ea 07             	shr    edx,0x7
c0002795:	89 f0                	mov    eax,esi
c0002797:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279a:	e8 96 fa ff ff       	call   c0002235 <move_window>
c000279f:	89 c5                	mov    ebp,eax
c00027a1:	85 c0                	test   eax,eax
c00027a3:	75 2c                	jne    c00027d1 <put_fat+0x146>
c00027a5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027ab:	c1 e3 02             	shl    ebx,0x2
c00027ae:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027b4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027b8:	89 d8                	mov    eax,ebx
c00027ba:	e8 5d f5 ff ff       	call   c0001d1c <ld_dword>
c00027bf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027c4:	09 f8                	or     eax,edi
c00027c6:	89 c2                	mov    edx,eax
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 69 f5 ff ff       	call   c0001d38 <st_dword>
c00027cf:	eb bb                	jmp    c000278c <put_fat+0x101>
c00027d1:	83 c4 1c             	add    esp,0x1c
c00027d4:	89 e8                	mov    eax,ebp
c00027d6:	5b                   	pop    ebx
c00027d7:	5e                   	pop    esi
c00027d8:	5f                   	pop    edi
c00027d9:	5d                   	pop    ebp
c00027da:	c3                   	ret    

c00027db <dir_clear>:
c00027db:	55                   	push   ebp
c00027dc:	57                   	push   edi
c00027dd:	56                   	push   esi
c00027de:	89 c6                	mov    esi,eax
c00027e0:	53                   	push   ebx
c00027e1:	83 ec 1c             	sub    esp,0x1c
c00027e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027e8:	e8 e5 f9 ff ff       	call   c00021d2 <sync_window>
c00027ed:	85 c0                	test   eax,eax
c00027ef:	0f 85 c0 00 00 00    	jne    c00028b5 <dir_clear+0xda>
c00027f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027f9:	89 f0                	mov    eax,esi
c00027fb:	e8 55 f7 ff ff       	call   c0001f55 <clst2sect>
c0002800:	31 d2                	xor    edx,edx
c0002802:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002805:	89 c5                	mov    ebp,eax
c0002807:	b9 00 02 00 00       	mov    ecx,0x200
c000280c:	8d 46 34             	lea    eax,[esi+0x34]
c000280f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002813:	e8 38 f5 ff ff       	call   c0001d50 <mem_set>
c0002818:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000281c:	c1 e3 09             	shl    ebx,0x9
c000281f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002825:	76 1b                	jbe    c0002842 <dir_clear+0x67>
c0002827:	bb 00 80 00 00       	mov    ebx,0x8000
c000282c:	eb 14                	jmp    c0002842 <dir_clear+0x67>
c000282e:	83 ec 0c             	sub    esp,0xc
c0002831:	53                   	push   ebx
c0002832:	e8 25 32 00 00       	call   c0005a5c <ff_memalloc>
c0002837:	83 c4 10             	add    esp,0x10
c000283a:	89 c7                	mov    edi,eax
c000283c:	85 c0                	test   eax,eax
c000283e:	75 7c                	jne    c00028bc <dir_clear+0xe1>
c0002840:	d1 eb                	shr    ebx,1
c0002842:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002848:	77 e4                	ja     c000282e <dir_clear+0x53>
c000284a:	31 db                	xor    ebx,ebx
c000284c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002850:	39 d8                	cmp    eax,ebx
c0002852:	76 53                	jbe    c00028a7 <dir_clear+0xcc>
c0002854:	6a 01                	push   0x1
c0002856:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002859:	50                   	push   eax
c000285a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000285e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002862:	50                   	push   eax
c0002863:	e8 72 f4 ff ff       	call   c0001cda <disk_write>
c0002868:	83 c4 10             	add    esp,0x10
c000286b:	85 c0                	test   eax,eax
c000286d:	75 38                	jne    c00028a7 <dir_clear+0xcc>
c000286f:	43                   	inc    ebx
c0002870:	eb da                	jmp    c000284c <dir_clear+0x71>
c0002872:	52                   	push   edx
c0002873:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002876:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000287a:	50                   	push   eax
c000287b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000287f:	57                   	push   edi
c0002880:	50                   	push   eax
c0002881:	e8 54 f4 ff ff       	call   c0001cda <disk_write>
c0002886:	83 c4 10             	add    esp,0x10
c0002889:	85 c0                	test   eax,eax
c000288b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000288f:	75 0a                	jne    c000289b <dir_clear+0xc0>
c0002891:	01 d3                	add    ebx,edx
c0002893:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002897:	39 d8                	cmp    eax,ebx
c0002899:	77 d7                	ja     c0002872 <dir_clear+0x97>
c000289b:	83 ec 0c             	sub    esp,0xc
c000289e:	57                   	push   edi
c000289f:	e8 d0 31 00 00       	call   c0005a74 <ff_memfree>
c00028a4:	83 c4 10             	add    esp,0x10
c00028a7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028ab:	39 d8                	cmp    eax,ebx
c00028ad:	0f 95 c0             	setne  al
c00028b0:	0f b6 c0             	movzx  eax,al
c00028b3:	eb 19                	jmp    c00028ce <dir_clear+0xf3>
c00028b5:	b8 01 00 00 00       	mov    eax,0x1
c00028ba:	eb 12                	jmp    c00028ce <dir_clear+0xf3>
c00028bc:	89 d9                	mov    ecx,ebx
c00028be:	31 d2                	xor    edx,edx
c00028c0:	e8 8b f4 ff ff       	call   c0001d50 <mem_set>
c00028c5:	89 da                	mov    edx,ebx
c00028c7:	31 db                	xor    ebx,ebx
c00028c9:	c1 ea 09             	shr    edx,0x9
c00028cc:	eb c5                	jmp    c0002893 <dir_clear+0xb8>
c00028ce:	83 c4 1c             	add    esp,0x1c
c00028d1:	5b                   	pop    ebx
c00028d2:	5e                   	pop    esi
c00028d3:	5f                   	pop    edi
c00028d4:	5d                   	pop    ebp
c00028d5:	c3                   	ret    

c00028d6 <create_name>:
c00028d6:	55                   	push   ebp
c00028d7:	89 d5                	mov    ebp,edx
c00028d9:	57                   	push   edi
c00028da:	89 c7                	mov    edi,eax
c00028dc:	56                   	push   esi
c00028dd:	31 f6                	xor    esi,esi
c00028df:	53                   	push   ebx
c00028e0:	83 ec 3c             	sub    esp,0x3c
c00028e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028e9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028eb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028f2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00028f6:	e8 9b f4 ff ff       	call   c0001d96 <tchar2uni>
c00028fb:	89 c3                	mov    ebx,eax
c00028fd:	83 f8 ff             	cmp    eax,0xffffffff
c0002900:	75 0a                	jne    c000290c <create_name+0x36>
c0002902:	b8 06 00 00 00       	mov    eax,0x6
c0002907:	e9 9e 02 00 00       	jmp    c0002baa <create_name+0x2d4>
c000290c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002911:	76 0c                	jbe    c000291f <create_name+0x49>
c0002913:	c1 e8 10             	shr    eax,0x10
c0002916:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000291a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000291e:	46                   	inc    esi
c000291f:	66 83 fb 1f          	cmp    bx,0x1f
c0002923:	76 4f                	jbe    c0002974 <create_name+0x9e>
c0002925:	66 83 fb 5c          	cmp    bx,0x5c
c0002929:	74 35                	je     c0002960 <create_name+0x8a>
c000292b:	66 83 fb 2f          	cmp    bx,0x2f
c000292f:	74 2f                	je     c0002960 <create_name+0x8a>
c0002931:	66 83 fb 7f          	cmp    bx,0x7f
c0002935:	77 11                	ja     c0002948 <create_name+0x72>
c0002937:	0f b7 d3             	movzx  edx,bx
c000293a:	b8 a2 e8 01 c0       	mov    eax,0xc001e8a2
c000293f:	e8 3a f4 ff ff       	call   c0001d7e <chk_chr>
c0002944:	85 c0                	test   eax,eax
c0002946:	75 ba                	jne    c0002902 <create_name+0x2c>
c0002948:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000294e:	77 b2                	ja     c0002902 <create_name+0x2c>
c0002950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002954:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002958:	46                   	inc    esi
c0002959:	eb 97                	jmp    c00028f2 <create_name+0x1c>
c000295b:	40                   	inc    eax
c000295c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	8a 10                	mov    dl,BYTE PTR [eax]
c0002966:	80 fa 2f             	cmp    dl,0x2f
c0002969:	74 f0                	je     c000295b <create_name+0x85>
c000296b:	80 fa 5c             	cmp    dl,0x5c
c000296e:	74 eb                	je     c000295b <create_name+0x85>
c0002970:	31 db                	xor    ebx,ebx
c0002972:	eb 02                	jmp    c0002976 <create_name+0xa0>
c0002974:	b3 04                	mov    bl,0x4
c0002976:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000297a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000297d:	85 f6                	test   esi,esi
c000297f:	74 18                	je     c0002999 <create_name+0xc3>
c0002981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002985:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000298a:	66 83 f8 20          	cmp    ax,0x20
c000298e:	74 06                	je     c0002996 <create_name+0xc0>
c0002990:	66 83 f8 2e          	cmp    ax,0x2e
c0002994:	75 03                	jne    c0002999 <create_name+0xc3>
c0002996:	4e                   	dec    esi
c0002997:	eb e4                	jmp    c000297d <create_name+0xa7>
c0002999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000299d:	31 ed                	xor    ebp,ebp
c000299f:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029a5:	85 f6                	test   esi,esi
c00029a7:	0f 84 55 ff ff ff    	je     c0002902 <create_name+0x2c>
c00029ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029b4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029b8:	66 83 f8 20          	cmp    ax,0x20
c00029bc:	75 04                	jne    c00029c2 <create_name+0xec>
c00029be:	89 d5                	mov    ebp,edx
c00029c0:	eb eb                	jmp    c00029ad <create_name+0xd7>
c00029c2:	85 ed                	test   ebp,ebp
c00029c4:	75 06                	jne    c00029cc <create_name+0xf6>
c00029c6:	66 83 f8 2e          	cmp    ax,0x2e
c00029ca:	75 08                	jne    c00029d4 <create_name+0xfe>
c00029cc:	83 cb 03             	or     ebx,0x3
c00029cf:	eb 03                	jmp    c00029d4 <create_name+0xfe>
c00029d1:	4e                   	dec    esi
c00029d2:	74 0c                	je     c00029e0 <create_name+0x10a>
c00029d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029d8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029de:	75 f1                	jne    c00029d1 <create_name+0xfb>
c00029e0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029e5:	8d 47 20             	lea    eax,[edi+0x20]
c00029e8:	ba 20 00 00 00       	mov    edx,0x20
c00029ed:	e8 5e f3 ff ff       	call   c0001d50 <mem_set>
c00029f2:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00029fa:	31 c9                	xor    ecx,ecx
c00029fc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a01:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a0c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a10:	66 85 ed             	test   bp,bp
c0002a13:	0f 84 30 01 00 00    	je     c0002b49 <create_name+0x273>
c0002a19:	66 83 fd 20          	cmp    bp,0x20
c0002a1d:	74 10                	je     c0002a2f <create_name+0x159>
c0002a1f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a23:	75 13                	jne    c0002a38 <create_name+0x162>
c0002a25:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a29:	0f 84 6b 01 00 00    	je     c0002b9a <create_name+0x2c4>
c0002a2f:	83 cb 03             	or     ebx,0x3
c0002a32:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a36:	eb c9                	jmp    c0002a01 <create_name+0x12b>
c0002a38:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a3c:	73 0b                	jae    c0002a49 <create_name+0x173>
c0002a3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a42:	75 47                	jne    c0002a8b <create_name+0x1b5>
c0002a44:	e9 51 01 00 00       	jmp    c0002b9a <create_name+0x2c4>
c0002a49:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a4e:	75 10                	jne    c0002a60 <create_name+0x18a>
c0002a50:	83 cb 03             	or     ebx,0x3
c0002a53:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a5b:	e9 e9 00 00 00       	jmp    c0002b49 <create_name+0x273>
c0002a60:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a64:	74 0d                	je     c0002a73 <create_name+0x19d>
c0002a66:	83 cb 03             	or     ebx,0x3
c0002a69:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a6d:	0f 87 d6 00 00 00    	ja     c0002b49 <create_name+0x273>
c0002a73:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a78:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a7c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a84:	b9 08 00 00 00       	mov    ecx,0x8
c0002a89:	eb a7                	jmp    c0002a32 <create_name+0x15c>
c0002a8b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a8f:	76 68                	jbe    c0002af9 <create_name+0x223>
c0002a91:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002a95:	88 da                	mov    dl,bl
c0002a97:	83 ca 02             	or     edx,0x2
c0002a9a:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002a9e:	50                   	push   eax
c0002a9f:	50                   	push   eax
c0002aa0:	68 b5 01 00 00       	push   0x1b5
c0002aa5:	55                   	push   ebp
c0002aa6:	e8 e1 2f 00 00       	call   c0005a8c <ff_uni2oem>
c0002aab:	83 c4 10             	add    esp,0x10
c0002aae:	89 c5                	mov    ebp,eax
c0002ab0:	a8 80                	test   al,0x80
c0002ab2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ab6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aba:	74 0c                	je     c0002ac8 <create_name+0x1f2>
c0002abc:	83 e5 7f             	and    ebp,0x7f
c0002abf:	0f b6 ad 60 e9 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe16a0]
c0002ac6:	eb 2a                	jmp    c0002af2 <create_name+0x21c>
c0002ac8:	66 3d ff 00          	cmp    ax,0xff
c0002acc:	76 24                	jbe    c0002af2 <create_name+0x21c>
c0002ace:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ad2:	48                   	dec    eax
c0002ad3:	39 c8                	cmp    eax,ecx
c0002ad5:	77 0c                	ja     c0002ae3 <create_name+0x20d>
c0002ad7:	83 cb 03             	or     ebx,0x3
c0002ada:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002ade:	e9 4f ff ff ff       	jmp    c0002a32 <create_name+0x15c>
c0002ae3:	89 e8                	mov    eax,ebp
c0002ae5:	88 d3                	mov    bl,dl
c0002ae7:	66 c1 e8 08          	shr    ax,0x8
c0002aeb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aef:	41                   	inc    ecx
c0002af0:	eb 4b                	jmp    c0002b3d <create_name+0x267>
c0002af2:	88 d3                	mov    bl,dl
c0002af4:	66 85 ed             	test   bp,bp
c0002af7:	74 19                	je     c0002b12 <create_name+0x23c>
c0002af9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002afd:	0f b7 d5             	movzx  edx,bp
c0002b00:	b8 ab e8 01 c0       	mov    eax,0xc001e8ab
c0002b05:	e8 74 f2 ff ff       	call   c0001d7e <chk_chr>
c0002b0a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b0e:	85 c0                	test   eax,eax
c0002b10:	74 0a                	je     c0002b1c <create_name+0x246>
c0002b12:	83 cb 03             	or     ebx,0x3
c0002b15:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b1a:	eb 21                	jmp    c0002b3d <create_name+0x267>
c0002b1c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b1f:	66 83 f8 19          	cmp    ax,0x19
c0002b23:	77 07                	ja     c0002b2c <create_name+0x256>
c0002b25:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b2a:	eb 11                	jmp    c0002b3d <create_name+0x267>
c0002b2c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 08                	ja     c0002b3d <create_name+0x267>
c0002b35:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b3a:	83 ed 20             	sub    ebp,0x20
c0002b3d:	89 e8                	mov    eax,ebp
c0002b3f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b43:	41                   	inc    ecx
c0002b44:	e9 e9 fe ff ff       	jmp    c0002a32 <create_name+0x15c>
c0002b49:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b4d:	75 04                	jne    c0002b53 <create_name+0x27d>
c0002b4f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b53:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b58:	75 05                	jne    c0002b5f <create_name+0x289>
c0002b5a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b5f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b63:	83 e0 0c             	and    eax,0xc
c0002b66:	3c 0c                	cmp    al,0xc
c0002b68:	74 0b                	je     c0002b75 <create_name+0x29f>
c0002b6a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b6e:	83 e0 03             	and    eax,0x3
c0002b71:	3c 03                	cmp    al,0x3
c0002b73:	75 05                	jne    c0002b7a <create_name+0x2a4>
c0002b75:	83 cb 02             	or     ebx,0x2
c0002b78:	eb 19                	jmp    c0002b93 <create_name+0x2bd>
c0002b7a:	f6 c3 02             	test   bl,0x2
c0002b7d:	75 14                	jne    c0002b93 <create_name+0x2bd>
c0002b7f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b84:	74 03                	je     c0002b89 <create_name+0x2b3>
c0002b86:	83 cb 10             	or     ebx,0x10
c0002b89:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b8e:	74 03                	je     c0002b93 <create_name+0x2bd>
c0002b90:	83 cb 08             	or     ebx,0x8
c0002b93:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002b96:	31 c0                	xor    eax,eax
c0002b98:	eb 10                	jmp    c0002baa <create_name+0x2d4>
c0002b9a:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002b9f:	0f 85 ce fe ff ff    	jne    c0002a73 <create_name+0x19d>
c0002ba5:	e9 a6 fe ff ff       	jmp    c0002a50 <create_name+0x17a>
c0002baa:	83 c4 3c             	add    esp,0x3c
c0002bad:	5b                   	pop    ebx
c0002bae:	5e                   	pop    esi
c0002baf:	5f                   	pop    edi
c0002bb0:	5d                   	pop    ebp
c0002bb1:	c3                   	ret    

c0002bb2 <cmp_lfn>:
c0002bb2:	55                   	push   ebp
c0002bb3:	57                   	push   edi
c0002bb4:	89 d7                	mov    edi,edx
c0002bb6:	56                   	push   esi
c0002bb7:	53                   	push   ebx
c0002bb8:	83 ec 1c             	sub    esp,0x1c
c0002bbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bbf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bc2:	e8 48 f1 ff ff       	call   c0001d0f <ld_word>
c0002bc7:	66 85 c0             	test   ax,ax
c0002bca:	74 07                	je     c0002bd3 <cmp_lfn+0x21>
c0002bcc:	31 c0                	xor    eax,eax
c0002bce:	e9 9a 00 00 00       	jmp    c0002c6d <cmp_lfn+0xbb>
c0002bd3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002bd5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bda:	83 e3 3f             	and    ebx,0x3f
c0002bdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002be5:	4b                   	dec    ebx
c0002be6:	6b db 0d             	imul   ebx,ebx,0xd
c0002be9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bed:	0f b6 80 e0 e9 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe1620]
c0002bf4:	01 f8                	add    eax,edi
c0002bf6:	e8 14 f1 ff ff       	call   c0001d0f <ld_word>
c0002bfb:	66 85 ed             	test   bp,bp
c0002bfe:	89 c6                	mov    esi,eax
c0002c00:	74 3c                	je     c0002c3e <cmp_lfn+0x8c>
c0002c02:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c08:	77 c2                	ja     c0002bcc <cmp_lfn+0x1a>
c0002c0a:	83 ec 0c             	sub    esp,0xc
c0002c0d:	0f b7 c0             	movzx  eax,ax
c0002c10:	50                   	push   eax
c0002c11:	e8 8e 2f 00 00       	call   c0005ba4 <ff_wtoupper>
c0002c16:	89 c5                	mov    ebp,eax
c0002c18:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c1b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c23:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c27:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c2a:	e8 75 2f 00 00       	call   c0005ba4 <ff_wtoupper>
c0002c2f:	83 c4 10             	add    esp,0x10
c0002c32:	39 c5                	cmp    ebp,eax
c0002c34:	75 96                	jne    c0002bcc <cmp_lfn+0x1a>
c0002c36:	89 f5                	mov    ebp,esi
c0002c38:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c3c:	eb 04                	jmp    c0002c42 <cmp_lfn+0x90>
c0002c3e:	66 46                	inc    si
c0002c40:	75 8a                	jne    c0002bcc <cmp_lfn+0x1a>
c0002c42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c4b:	75 9c                	jne    c0002be9 <cmp_lfn+0x37>
c0002c4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c50:	74 16                	je     c0002c68 <cmp_lfn+0xb6>
c0002c52:	66 85 ed             	test   bp,bp
c0002c55:	74 11                	je     c0002c68 <cmp_lfn+0xb6>
c0002c57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c60:	0f 94 c0             	sete   al
c0002c63:	0f b6 c0             	movzx  eax,al
c0002c66:	eb 05                	jmp    c0002c6d <cmp_lfn+0xbb>
c0002c68:	b8 01 00 00 00       	mov    eax,0x1
c0002c6d:	83 c4 1c             	add    esp,0x1c
c0002c70:	5b                   	pop    ebx
c0002c71:	5e                   	pop    esi
c0002c72:	5f                   	pop    edi
c0002c73:	5d                   	pop    ebp
c0002c74:	c3                   	ret    

c0002c75 <sync_fs>:
c0002c75:	56                   	push   esi
c0002c76:	53                   	push   ebx
c0002c77:	53                   	push   ebx
c0002c78:	89 c3                	mov    ebx,eax
c0002c7a:	e8 53 f5 ff ff       	call   c00021d2 <sync_window>
c0002c7f:	85 c0                	test   eax,eax
c0002c81:	0f 85 9a 00 00 00    	jne    c0002d21 <sync_fs+0xac>
c0002c87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c8a:	75 7b                	jne    c0002d07 <sync_fs+0x92>
c0002c8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002c90:	75 75                	jne    c0002d07 <sync_fs+0x92>
c0002c92:	b9 00 02 00 00       	mov    ecx,0x200
c0002c97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002c9a:	31 d2                	xor    edx,edx
c0002c9c:	89 f0                	mov    eax,esi
c0002c9e:	e8 ad f0 ff ff       	call   c0001d50 <mem_set>
c0002ca3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ca9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cae:	e8 81 f0 ff ff       	call   c0001d34 <st_word>
c0002cb3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cb8:	89 f0                	mov    eax,esi
c0002cba:	e8 79 f0 ff ff       	call   c0001d38 <st_dword>
c0002cbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cca:	e8 69 f0 ff ff       	call   c0001d38 <st_dword>
c0002ccf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002cd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002cd8:	e8 5b f0 ff ff       	call   c0001d38 <st_dword>
c0002cdd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ce0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ce6:	e8 4d f0 ff ff       	call   c0001d38 <st_dword>
c0002ceb:	6a 01                	push   0x1
c0002ced:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002cf0:	40                   	inc    eax
c0002cf1:	50                   	push   eax
c0002cf2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002cf5:	56                   	push   esi
c0002cf6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002cfa:	50                   	push   eax
c0002cfb:	e8 da ef ff ff       	call   c0001cda <disk_write>
c0002d00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d04:	83 c4 10             	add    esp,0x10
c0002d07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0b:	51                   	push   ecx
c0002d0c:	6a 00                	push   0x0
c0002d0e:	6a 00                	push   0x0
c0002d10:	50                   	push   eax
c0002d11:	e8 da ef ff ff       	call   c0001cf0 <disk_ioctl>
c0002d16:	83 c4 10             	add    esp,0x10
c0002d19:	85 c0                	test   eax,eax
c0002d1b:	0f 95 c0             	setne  al
c0002d1e:	0f b6 c0             	movzx  eax,al
c0002d21:	5a                   	pop    edx
c0002d22:	5b                   	pop    ebx
c0002d23:	5e                   	pop    esi
c0002d24:	c3                   	ret    

c0002d25 <create_partition>:
c0002d25:	55                   	push   ebp
c0002d26:	0f b6 c0             	movzx  eax,al
c0002d29:	57                   	push   edi
c0002d2a:	56                   	push   esi
c0002d2b:	53                   	push   ebx
c0002d2c:	83 ec 40             	sub    esp,0x40
c0002d2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d3f:	50                   	push   eax
c0002d40:	6a 01                	push   0x1
c0002d42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d46:	e8 a5 ef ff ff       	call   c0001cf0 <disk_ioctl>
c0002d4b:	83 c4 10             	add    esp,0x10
c0002d4e:	85 c0                	test   eax,eax
c0002d50:	0f 85 69 01 00 00    	jne    c0002ebf <create_partition+0x19a>
c0002d56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d63:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d68:	31 d2                	xor    edx,edx
c0002d6a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d73:	f7 f3                	div    ebx
c0002d75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d7a:	76 0c                	jbe    c0002d88 <create_partition+0x63>
c0002d7c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d80:	49                   	dec    ecx
c0002d81:	75 e5                	jne    c0002d68 <create_partition+0x43>
c0002d83:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d88:	b9 00 02 00 00       	mov    ecx,0x200
c0002d8d:	31 d2                	xor    edx,edx
c0002d8f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002d93:	e8 b8 ef ff ff       	call   c0001d50 <mem_set>
c0002d98:	b9 64 00 00 00       	mov    ecx,0x64
c0002d9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da1:	31 d2                	xor    edx,edx
c0002da3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dab:	f7 f1                	div    ecx
c0002dad:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002db2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002db6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dba:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dc0:	85 c9                	test   ecx,ecx
c0002dc2:	75 34                	jne    c0002df8 <create_partition+0xd3>
c0002dc4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dcd:	05 fe 01 00 00       	add    eax,0x1fe
c0002dd2:	e8 5d ef ff ff       	call   c0001d34 <st_word>
c0002dd7:	6a 01                	push   0x1
c0002dd9:	6a 00                	push   0x0
c0002ddb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ddf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002de3:	e8 f2 ee ff ff       	call   c0001cda <disk_write>
c0002de8:	83 c4 10             	add    esp,0x10
c0002deb:	85 c0                	test   eax,eax
c0002ded:	0f 95 c0             	setne  al
c0002df0:	0f b6 c0             	movzx  eax,al
c0002df3:	e9 cc 00 00 00       	jmp    c0002ec4 <create_partition+0x19f>
c0002df8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002dfc:	76 c6                	jbe    c0002dc4 <create_partition+0x9f>
c0002dfe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e02:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e06:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e09:	83 fe 64             	cmp    esi,0x64
c0002e0c:	77 0d                	ja     c0002e1b <create_partition+0xf6>
c0002e0e:	74 07                	je     c0002e17 <create_partition+0xf2>
c0002e10:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e15:	eb 04                	jmp    c0002e1b <create_partition+0xf6>
c0002e17:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e1b:	31 c0                	xor    eax,eax
c0002e1d:	89 f2                	mov    edx,esi
c0002e1f:	01 ca                	add    edx,ecx
c0002e21:	0f 92 c0             	setb   al
c0002e24:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e28:	77 04                	ja     c0002e2e <create_partition+0x109>
c0002e2a:	85 c0                	test   eax,eax
c0002e2c:	74 08                	je     c0002e36 <create_partition+0x111>
c0002e2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e32:	29 ce                	sub    esi,ecx
c0002e34:	eb 04                	jmp    c0002e3a <create_partition+0x115>
c0002e36:	85 f6                	test   esi,esi
c0002e38:	74 8a                	je     c0002dc4 <create_partition+0x9f>
c0002e3a:	89 ca                	mov    edx,ecx
c0002e3c:	89 d8                	mov    eax,ebx
c0002e3e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e43:	e8 f0 ee ff ff       	call   c0001d38 <st_dword>
c0002e48:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e4b:	89 f2                	mov    edx,esi
c0002e4d:	83 c3 10             	add    ebx,0x10
c0002e50:	e8 e3 ee ff ff       	call   c0001d38 <st_dword>
c0002e55:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e5a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e5e:	31 d2                	xor    edx,edx
c0002e60:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e63:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e67:	89 c8                	mov    eax,ecx
c0002e69:	01 f1                	add    ecx,esi
c0002e6b:	f7 f5                	div    ebp
c0002e6d:	89 d5                	mov    ebp,edx
c0002e6f:	31 d2                	xor    edx,edx
c0002e71:	45                   	inc    ebp
c0002e72:	f7 f7                	div    edi
c0002e74:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e77:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e7a:	89 c2                	mov    edx,eax
c0002e7c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e7f:	c1 ea 02             	shr    edx,0x2
c0002e82:	83 e2 c0             	and    edx,0xffffffc0
c0002e85:	09 ea                	or     edx,ebp
c0002e87:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e8c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e8f:	31 d2                	xor    edx,edx
c0002e91:	f7 f5                	div    ebp
c0002e93:	89 d6                	mov    esi,edx
c0002e95:	31 d2                	xor    edx,edx
c0002e97:	46                   	inc    esi
c0002e98:	f7 f7                	div    edi
c0002e9a:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002e9d:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ea0:	89 c7                	mov    edi,eax
c0002ea2:	c1 ef 02             	shr    edi,0x2
c0002ea5:	83 e7 c0             	and    edi,0xffffffc0
c0002ea8:	09 fe                	or     esi,edi
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002eaf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002eb4:	0f 85 06 ff ff ff    	jne    c0002dc0 <create_partition+0x9b>
c0002eba:	e9 05 ff ff ff       	jmp    c0002dc4 <create_partition+0x9f>
c0002ebf:	b8 01 00 00 00       	mov    eax,0x1
c0002ec4:	83 c4 3c             	add    esp,0x3c
c0002ec7:	5b                   	pop    ebx
c0002ec8:	5e                   	pop    esi
c0002ec9:	5f                   	pop    edi
c0002eca:	5d                   	pop    ebp
c0002ecb:	c3                   	ret    

c0002ecc <get_fileinfo>:
c0002ecc:	55                   	push   ebp
c0002ecd:	57                   	push   edi
c0002ece:	56                   	push   esi
c0002ecf:	53                   	push   ebx
c0002ed0:	83 ec 1c             	sub    esp,0x1c
c0002ed3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ed5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ed9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002edd:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ee1:	0f 84 c1 01 00 00    	je     c00030a8 <get_fileinfo+0x1dc>
c0002ee7:	89 d3                	mov    ebx,edx
c0002ee9:	89 c6                	mov    esi,eax
c0002eeb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eef:	74 6a                	je     c0002f5b <get_fileinfo+0x8f>
c0002ef1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ef9:	31 ed                	xor    ebp,ebp
c0002efb:	31 ff                	xor    edi,edi
c0002efd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f01:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f08:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f0c:	66 85 d2             	test   dx,dx
c0002f0f:	74 3e                	je     c0002f4f <get_fileinfo+0x83>
c0002f11:	66 85 ed             	test   bp,bp
c0002f14:	75 0c                	jne    c0002f22 <get_fileinfo+0x56>
c0002f16:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f1c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f20:	76 22                	jbe    c0002f44 <get_fileinfo+0x78>
c0002f22:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f27:	89 e8                	mov    eax,ebp
c0002f29:	29 f9                	sub    ecx,edi
c0002f2b:	c1 e0 10             	shl    eax,0x10
c0002f2e:	09 d0                	or     eax,edx
c0002f30:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f34:	e8 23 ef ff ff       	call   c0001e5c <put_utf>
c0002f39:	84 c0                	test   al,al
c0002f3b:	74 10                	je     c0002f4d <get_fileinfo+0x81>
c0002f3d:	0f b6 c0             	movzx  eax,al
c0002f40:	31 d2                	xor    edx,edx
c0002f42:	01 c7                	add    edi,eax
c0002f44:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f49:	89 d5                	mov    ebp,edx
c0002f4b:	eb b0                	jmp    c0002efd <get_fileinfo+0x31>
c0002f4d:	31 ff                	xor    edi,edi
c0002f4f:	66 85 ed             	test   bp,bp
c0002f52:	74 02                	je     c0002f56 <get_fileinfo+0x8a>
c0002f54:	31 ff                	xor    edi,edi
c0002f56:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f5b:	31 ff                	xor    edi,edi
c0002f5d:	31 c9                	xor    ecx,ecx
c0002f5f:	83 f9 0a             	cmp    ecx,0xa
c0002f62:	0f 87 ad 00 00 00    	ja     c0003015 <get_fileinfo+0x149>
c0002f68:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f6b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f6e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f72:	66 83 fa 20          	cmp    dx,0x20
c0002f76:	0f 84 92 00 00 00    	je     c000300e <get_fileinfo+0x142>
c0002f7c:	66 83 fa 05          	cmp    dx,0x5
c0002f80:	75 05                	jne    c0002f87 <get_fileinfo+0xbb>
c0002f82:	ba e5 00 00 00       	mov    edx,0xe5
c0002f87:	83 ff 0b             	cmp    edi,0xb
c0002f8a:	77 0b                	ja     c0002f97 <get_fileinfo+0xcb>
c0002f8c:	83 fd 09             	cmp    ebp,0x9
c0002f8f:	75 06                	jne    c0002f97 <get_fileinfo+0xcb>
c0002f91:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002f96:	47                   	inc    edi
c0002f97:	0f b7 c2             	movzx  eax,dx
c0002f9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002f9e:	e8 ed ed ff ff       	call   c0001d90 <dbc_1st>
c0002fa3:	85 c0                	test   eax,eax
c0002fa5:	74 2f                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fa7:	83 fd 08             	cmp    ebp,0x8
c0002faa:	74 2a                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fac:	83 fd 0b             	cmp    ebp,0xb
c0002faf:	74 25                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fb1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fb4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fb8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fbc:	e8 d2 ed ff ff       	call   c0001d93 <dbc_2nd>
c0002fc1:	85 c0                	test   eax,eax
c0002fc3:	74 11                	je     c0002fd6 <get_fileinfo+0x10a>
c0002fc5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fc9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fce:	c1 e2 08             	shl    edx,0x8
c0002fd1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fd4:	09 c2                	or     edx,eax
c0002fd6:	0f b7 d2             	movzx  edx,dx
c0002fd9:	50                   	push   eax
c0002fda:	50                   	push   eax
c0002fdb:	68 b5 01 00 00       	push   0x1b5
c0002fe0:	52                   	push   edx
c0002fe1:	e8 46 2b 00 00       	call   c0005b2c <ff_oem2uni>
c0002fe6:	83 c4 10             	add    esp,0x10
c0002fe9:	66 85 c0             	test   ax,ax
c0002fec:	75 04                	jne    c0002ff2 <get_fileinfo+0x126>
c0002fee:	31 ff                	xor    edi,edi
c0002ff0:	eb 23                	jmp    c0003015 <get_fileinfo+0x149>
c0002ff2:	b9 0c 00 00 00       	mov    ecx,0xc
c0002ff7:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0002ffb:	29 f9                	sub    ecx,edi
c0002ffd:	0f b7 c0             	movzx  eax,ax
c0003000:	e8 57 ee ff ff       	call   c0001e5c <put_utf>
c0003005:	84 c0                	test   al,al
c0003007:	74 e5                	je     c0002fee <get_fileinfo+0x122>
c0003009:	0f b6 c0             	movzx  eax,al
c000300c:	01 c7                	add    edi,eax
c000300e:	89 e9                	mov    ecx,ebp
c0003010:	e9 4a ff ff ff       	jmp    c0002f5f <get_fileinfo+0x93>
c0003015:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000301a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000301e:	75 54                	jne    c0003074 <get_fileinfo+0x1a8>
c0003020:	85 ff                	test   edi,edi
c0003022:	75 0b                	jne    c000302f <get_fileinfo+0x163>
c0003024:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003028:	ba 01 00 00 00       	mov    edx,0x1
c000302d:	eb 33                	jmp    c0003062 <get_fileinfo+0x196>
c000302f:	b1 08                	mov    cl,0x8
c0003031:	31 d2                	xor    edx,edx
c0003033:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003039:	84 c0                	test   al,al
c000303b:	74 25                	je     c0003062 <get_fileinfo+0x196>
c000303d:	66 83 f8 2e          	cmp    ax,0x2e
c0003041:	74 16                	je     c0003059 <get_fileinfo+0x18d>
c0003043:	8d 78 bf             	lea    edi,[eax-0x41]
c0003046:	66 83 ff 19          	cmp    di,0x19
c000304a:	77 0f                	ja     c000305b <get_fileinfo+0x18f>
c000304c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000304f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003052:	74 07                	je     c000305b <get_fileinfo+0x18f>
c0003054:	83 c0 20             	add    eax,0x20
c0003057:	eb 02                	jmp    c000305b <get_fileinfo+0x18f>
c0003059:	b1 10                	mov    cl,0x10
c000305b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000305f:	42                   	inc    edx
c0003060:	eb d1                	jmp    c0003033 <get_fileinfo+0x167>
c0003062:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003067:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000306a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000306e:	75 04                	jne    c0003074 <get_fileinfo+0x1a8>
c0003070:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003074:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003077:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000307a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000307d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003080:	83 c0 1c             	add    eax,0x1c
c0003083:	e8 94 ec ff ff       	call   c0001d1c <ld_dword>
c0003088:	89 03                	mov    DWORD PTR [ebx],eax
c000308a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000308d:	83 c0 16             	add    eax,0x16
c0003090:	e8 7a ec ff ff       	call   c0001d0f <ld_word>
c0003095:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003099:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309c:	83 c0 18             	add    eax,0x18
c000309f:	e8 6b ec ff ff       	call   c0001d0f <ld_word>
c00030a4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030a8:	83 c4 1c             	add    esp,0x1c
c00030ab:	5b                   	pop    ebx
c00030ac:	5e                   	pop    esi
c00030ad:	5f                   	pop    edi
c00030ae:	5d                   	pop    ebp
c00030af:	c3                   	ret    

c00030b0 <ld_clust.isra.0>:
c00030b0:	56                   	push   esi
c00030b1:	89 c6                	mov    esi,eax
c00030b3:	53                   	push   ebx
c00030b4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030b7:	89 d3                	mov    ebx,edx
c00030b9:	e8 51 ec ff ff       	call   c0001d0f <ld_word>
c00030be:	0f b7 c8             	movzx  ecx,ax
c00030c1:	89 f0                	mov    eax,esi
c00030c3:	3c 03                	cmp    al,0x3
c00030c5:	75 0d                	jne    c00030d4 <ld_clust.isra.0+0x24>
c00030c7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030ca:	e8 40 ec ff ff       	call   c0001d0f <ld_word>
c00030cf:	c1 e0 10             	shl    eax,0x10
c00030d2:	09 c1                	or     ecx,eax
c00030d4:	89 c8                	mov    eax,ecx
c00030d6:	5b                   	pop    ebx
c00030d7:	5e                   	pop    esi
c00030d8:	c3                   	ret    

c00030d9 <st_clust.isra.1>:
c00030d9:	56                   	push   esi
c00030da:	89 c6                	mov    esi,eax
c00030dc:	53                   	push   ebx
c00030dd:	89 d3                	mov    ebx,edx
c00030df:	0f b7 d1             	movzx  edx,cx
c00030e2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030e5:	e8 4a ec ff ff       	call   c0001d34 <st_word>
c00030ea:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030ed:	75 0f                	jne    c00030fe <st_clust.isra.1+0x25>
c00030ef:	c1 e9 10             	shr    ecx,0x10
c00030f2:	8d 43 14             	lea    eax,[ebx+0x14]
c00030f5:	89 ca                	mov    edx,ecx
c00030f7:	5b                   	pop    ebx
c00030f8:	5e                   	pop    esi
c00030f9:	e9 36 ec ff ff       	jmp    c0001d34 <st_word>
c00030fe:	5b                   	pop    ebx
c00030ff:	5e                   	pop    esi
c0003100:	c3                   	ret    

c0003101 <get_fat.isra.2>:
c0003101:	b9 01 00 00 00       	mov    ecx,0x1
c0003106:	83 fa 01             	cmp    edx,0x1
c0003109:	0f 86 f1 00 00 00    	jbe    c0003200 <get_fat.isra.2+0xff>
c000310f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003112:	0f 83 e8 00 00 00    	jae    c0003200 <get_fat.isra.2+0xff>
c0003118:	55                   	push   ebp
c0003119:	57                   	push   edi
c000311a:	89 c7                	mov    edi,eax
c000311c:	56                   	push   esi
c000311d:	89 d6                	mov    esi,edx
c000311f:	53                   	push   ebx
c0003120:	83 ec 0c             	sub    esp,0xc
c0003123:	8a 00                	mov    al,BYTE PTR [eax]
c0003125:	3c 02                	cmp    al,0x2
c0003127:	74 78                	je     c00031a1 <get_fat.isra.2+0xa0>
c0003129:	3c 03                	cmp    al,0x3
c000312b:	0f 84 97 00 00 00    	je     c00031c8 <get_fat.isra.2+0xc7>
c0003131:	fe c8                	dec    al
c0003133:	0f 85 bd 00 00 00    	jne    c00031f6 <get_fat.isra.2+0xf5>
c0003139:	89 d3                	mov    ebx,edx
c000313b:	89 f8                	mov    eax,edi
c000313d:	d1 eb                	shr    ebx,1
c000313f:	01 d3                	add    ebx,edx
c0003141:	89 da                	mov    edx,ebx
c0003143:	c1 ea 09             	shr    edx,0x9
c0003146:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003149:	e8 e7 f0 ff ff       	call   c0002235 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	74 08                	je     c000315a <get_fat.isra.2+0x59>
c0003152:	83 c9 ff             	or     ecx,0xffffffff
c0003155:	e9 9c 00 00 00       	jmp    c00031f6 <get_fat.isra.2+0xf5>
c000315a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000315d:	89 f8                	mov    eax,edi
c000315f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003165:	89 ea                	mov    edx,ebp
c0003167:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000316b:	c1 ea 09             	shr    edx,0x9
c000316e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003171:	e8 bf f0 ff ff       	call   c0002235 <move_window>
c0003176:	85 c0                	test   eax,eax
c0003178:	75 d8                	jne    c0003152 <get_fat.isra.2+0x51>
c000317a:	0f b6 c3             	movzx  eax,bl
c000317d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003183:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003188:	c1 e3 08             	shl    ebx,0x8
c000318b:	09 c3                	or     ebx,eax
c000318d:	89 d9                	mov    ecx,ebx
c000318f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003195:	83 e6 01             	and    esi,0x1
c0003198:	74 5c                	je     c00031f6 <get_fat.isra.2+0xf5>
c000319a:	89 d9                	mov    ecx,ebx
c000319c:	c1 e9 04             	shr    ecx,0x4
c000319f:	eb 55                	jmp    c00031f6 <get_fat.isra.2+0xf5>
c00031a1:	c1 ea 08             	shr    edx,0x8
c00031a4:	89 f8                	mov    eax,edi
c00031a6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a9:	e8 87 f0 ff ff       	call   c0002235 <move_window>
c00031ae:	85 c0                	test   eax,eax
c00031b0:	75 a0                	jne    c0003152 <get_fat.isra.2+0x51>
c00031b2:	01 f6                	add    esi,esi
c00031b4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ba:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031be:	e8 4c eb ff ff       	call   c0001d0f <ld_word>
c00031c3:	0f b7 c8             	movzx  ecx,ax
c00031c6:	eb 2e                	jmp    c00031f6 <get_fat.isra.2+0xf5>
c00031c8:	c1 ea 07             	shr    edx,0x7
c00031cb:	89 f8                	mov    eax,edi
c00031cd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d0:	e8 60 f0 ff ff       	call   c0002235 <move_window>
c00031d5:	85 c0                	test   eax,eax
c00031d7:	0f 85 75 ff ff ff    	jne    c0003152 <get_fat.isra.2+0x51>
c00031dd:	c1 e6 02             	shl    esi,0x2
c00031e0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031e6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ea:	e8 2d eb ff ff       	call   c0001d1c <ld_dword>
c00031ef:	25 ff ff ff 0f       	and    eax,0xfffffff
c00031f4:	89 c1                	mov    ecx,eax
c00031f6:	83 c4 0c             	add    esp,0xc
c00031f9:	89 c8                	mov    eax,ecx
c00031fb:	5b                   	pop    ebx
c00031fc:	5e                   	pop    esi
c00031fd:	5f                   	pop    edi
c00031fe:	5d                   	pop    ebp
c00031ff:	c3                   	ret    
c0003200:	89 c8                	mov    eax,ecx
c0003202:	c3                   	ret    

c0003203 <dir_sdi>:
c0003203:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003209:	0f 87 b6 00 00 00    	ja     c00032c5 <dir_sdi+0xc2>
c000320f:	55                   	push   ebp
c0003210:	57                   	push   edi
c0003211:	56                   	push   esi
c0003212:	53                   	push   ebx
c0003213:	89 d3                	mov    ebx,edx
c0003215:	83 ec 1c             	sub    esp,0x1c
c0003218:	f6 c2 1f             	test   dl,0x1f
c000321b:	74 0a                	je     c0003227 <dir_sdi+0x24>
c000321d:	b8 02 00 00 00       	mov    eax,0x2
c0003222:	e9 96 00 00 00       	jmp    c00032bd <dir_sdi+0xba>
c0003227:	89 c6                	mov    esi,eax
c0003229:	8b 38                	mov    edi,DWORD PTR [eax]
c000322b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000322e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003231:	85 c9                	test   ecx,ecx
c0003233:	75 23                	jne    c0003258 <dir_sdi+0x55>
c0003235:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003238:	76 07                	jbe    c0003241 <dir_sdi+0x3e>
c000323a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000323d:	85 c0                	test   eax,eax
c000323f:	75 15                	jne    c0003256 <dir_sdi+0x53>
c0003241:	89 da                	mov    edx,ebx
c0003243:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003247:	c1 ea 05             	shr    edx,0x5
c000324a:	39 c2                	cmp    edx,eax
c000324c:	73 cf                	jae    c000321d <dir_sdi+0x1a>
c000324e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003251:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003254:	eb 3d                	jmp    c0003293 <dir_sdi+0x90>
c0003256:	89 c1                	mov    ecx,eax
c0003258:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000325c:	c1 e5 09             	shl    ebp,0x9
c000325f:	89 ca                	mov    edx,ecx
c0003261:	39 eb                	cmp    ebx,ebp
c0003263:	72 1c                	jb     c0003281 <dir_sdi+0x7e>
c0003265:	8b 06                	mov    eax,DWORD PTR [esi]
c0003267:	e8 95 fe ff ff       	call   c0003101 <get_fat.isra.2>
c000326c:	89 c1                	mov    ecx,eax
c000326e:	83 f8 ff             	cmp    eax,0xffffffff
c0003271:	74 45                	je     c00032b8 <dir_sdi+0xb5>
c0003273:	83 f8 01             	cmp    eax,0x1
c0003276:	76 a5                	jbe    c000321d <dir_sdi+0x1a>
c0003278:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000327b:	76 a0                	jbe    c000321d <dir_sdi+0x1a>
c000327d:	29 eb                	sub    ebx,ebp
c000327f:	eb de                	jmp    c000325f <dir_sdi+0x5c>
c0003281:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003285:	89 f8                	mov    eax,edi
c0003287:	e8 c9 ec ff ff       	call   c0001f55 <clst2sect>
c000328c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003290:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003293:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003296:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003299:	85 d2                	test   edx,edx
c000329b:	74 80                	je     c000321d <dir_sdi+0x1a>
c000329d:	89 d8                	mov    eax,ebx
c000329f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032a5:	c1 e8 09             	shr    eax,0x9
c00032a8:	01 d0                	add    eax,edx
c00032aa:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032ad:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032b1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032b4:	31 c0                	xor    eax,eax
c00032b6:	eb 05                	jmp    c00032bd <dir_sdi+0xba>
c00032b8:	b8 01 00 00 00       	mov    eax,0x1
c00032bd:	83 c4 1c             	add    esp,0x1c
c00032c0:	5b                   	pop    ebx
c00032c1:	5e                   	pop    esi
c00032c2:	5f                   	pop    edi
c00032c3:	5d                   	pop    ebp
c00032c4:	c3                   	ret    
c00032c5:	b8 02 00 00 00       	mov    eax,0x2
c00032ca:	c3                   	ret    

c00032cb <create_chain>:
c00032cb:	55                   	push   ebp
c00032cc:	89 c5                	mov    ebp,eax
c00032ce:	57                   	push   edi
c00032cf:	89 d7                	mov    edi,edx
c00032d1:	56                   	push   esi
c00032d2:	53                   	push   ebx
c00032d3:	83 ec 1c             	sub    esp,0x1c
c00032d6:	85 d2                	test   edx,edx
c00032d8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032da:	75 0e                	jne    c00032ea <create_chain+0x1f>
c00032dc:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032df:	85 c9                	test   ecx,ecx
c00032e1:	74 34                	je     c0003317 <create_chain+0x4c>
c00032e3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032e6:	77 34                	ja     c000331c <create_chain+0x51>
c00032e8:	eb 2d                	jmp    c0003317 <create_chain+0x4c>
c00032ea:	89 f0                	mov    eax,esi
c00032ec:	e8 10 fe ff ff       	call   c0003101 <get_fat.isra.2>
c00032f1:	89 c3                	mov    ebx,eax
c00032f3:	83 f8 01             	cmp    eax,0x1
c00032f6:	77 0a                	ja     c0003302 <create_chain+0x37>
c00032f8:	bb 01 00 00 00       	mov    ebx,0x1
c00032fd:	e9 f9 00 00 00       	jmp    c00033fb <create_chain+0x130>
c0003302:	83 f8 ff             	cmp    eax,0xffffffff
c0003305:	0f 84 ed 00 00 00    	je     c00033f8 <create_chain+0x12d>
c000330b:	89 f9                	mov    ecx,edi
c000330d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003310:	76 0a                	jbe    c000331c <create_chain+0x51>
c0003312:	e9 e4 00 00 00       	jmp    c00033fb <create_chain+0x130>
c0003317:	b9 01 00 00 00       	mov    ecx,0x1
c000331c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003320:	75 07                	jne    c0003329 <create_chain+0x5e>
c0003322:	31 db                	xor    ebx,ebx
c0003324:	e9 d2 00 00 00       	jmp    c00033fb <create_chain+0x130>
c0003329:	39 f9                	cmp    ecx,edi
c000332b:	75 46                	jne    c0003373 <create_chain+0xa8>
c000332d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003330:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003333:	77 05                	ja     c000333a <create_chain+0x6f>
c0003335:	bb 02 00 00 00       	mov    ebx,0x2
c000333a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000333e:	89 da                	mov    edx,ebx
c0003340:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003343:	e8 b9 fd ff ff       	call   c0003101 <get_fat.isra.2>
c0003348:	83 f8 01             	cmp    eax,0x1
c000334b:	74 ab                	je     c00032f8 <create_chain+0x2d>
c000334d:	83 f8 ff             	cmp    eax,0xffffffff
c0003350:	0f 84 a2 00 00 00    	je     c00033f8 <create_chain+0x12d>
c0003356:	85 c0                	test   eax,eax
c0003358:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335c:	74 11                	je     c000336f <create_chain+0xa4>
c000335e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003361:	83 f8 01             	cmp    eax,0x1
c0003364:	76 0d                	jbe    c0003373 <create_chain+0xa8>
c0003366:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003369:	73 08                	jae    c0003373 <create_chain+0xa8>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	eb 04                	jmp    c0003373 <create_chain+0xa8>
c000336f:	85 db                	test   ebx,ebx
c0003371:	75 3d                	jne    c00033b0 <create_chain+0xe5>
c0003373:	89 cb                	mov    ebx,ecx
c0003375:	43                   	inc    ebx
c0003376:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003379:	77 0a                	ja     c0003385 <create_chain+0xba>
c000337b:	83 f9 01             	cmp    ecx,0x1
c000337e:	76 a2                	jbe    c0003322 <create_chain+0x57>
c0003380:	bb 02 00 00 00       	mov    ebx,0x2
c0003385:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003389:	89 da                	mov    edx,ebx
c000338b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000338e:	e8 6e fd ff ff       	call   c0003101 <get_fat.isra.2>
c0003393:	85 c0                	test   eax,eax
c0003395:	74 19                	je     c00033b0 <create_chain+0xe5>
c0003397:	83 f8 01             	cmp    eax,0x1
c000339a:	0f 84 58 ff ff ff    	je     c00032f8 <create_chain+0x2d>
c00033a0:	40                   	inc    eax
c00033a1:	74 55                	je     c00033f8 <create_chain+0x12d>
c00033a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a7:	39 cb                	cmp    ebx,ecx
c00033a9:	75 ca                	jne    c0003375 <create_chain+0xaa>
c00033ab:	e9 72 ff ff ff       	jmp    c0003322 <create_chain+0x57>
c00033b0:	83 c9 ff             	or     ecx,0xffffffff
c00033b3:	89 da                	mov    edx,ebx
c00033b5:	89 f0                	mov    eax,esi
c00033b7:	e8 cf f2 ff ff       	call   c000268b <put_fat>
c00033bc:	85 c0                	test   eax,eax
c00033be:	75 31                	jne    c00033f1 <create_chain+0x126>
c00033c0:	85 ff                	test   edi,edi
c00033c2:	75 16                	jne    c00033da <create_chain+0x10f>
c00033c4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033ca:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033cd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033d0:	39 d0                	cmp    eax,edx
c00033d2:	77 17                	ja     c00033eb <create_chain+0x120>
c00033d4:	48                   	dec    eax
c00033d5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033d8:	eb 11                	jmp    c00033eb <create_chain+0x120>
c00033da:	89 d9                	mov    ecx,ebx
c00033dc:	89 fa                	mov    edx,edi
c00033de:	89 f0                	mov    eax,esi
c00033e0:	e8 a6 f2 ff ff       	call   c000268b <put_fat>
c00033e5:	85 c0                	test   eax,eax
c00033e7:	74 db                	je     c00033c4 <create_chain+0xf9>
c00033e9:	eb 06                	jmp    c00033f1 <create_chain+0x126>
c00033eb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ef:	eb 0a                	jmp    c00033fb <create_chain+0x130>
c00033f1:	48                   	dec    eax
c00033f2:	0f 85 00 ff ff ff    	jne    c00032f8 <create_chain+0x2d>
c00033f8:	83 cb ff             	or     ebx,0xffffffff
c00033fb:	83 c4 1c             	add    esp,0x1c
c00033fe:	89 d8                	mov    eax,ebx
c0003400:	5b                   	pop    ebx
c0003401:	5e                   	pop    esi
c0003402:	5f                   	pop    edi
c0003403:	5d                   	pop    ebp
c0003404:	c3                   	ret    

c0003405 <remove_chain>:
c0003405:	55                   	push   ebp
c0003406:	57                   	push   edi
c0003407:	56                   	push   esi
c0003408:	89 d6                	mov    esi,edx
c000340a:	53                   	push   ebx
c000340b:	83 ec 0c             	sub    esp,0xc
c000340e:	83 fa 01             	cmp    edx,0x1
c0003411:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003413:	76 65                	jbe    c000347a <remove_chain+0x75>
c0003415:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003418:	76 60                	jbe    c000347a <remove_chain+0x75>
c000341a:	89 c5                	mov    ebp,eax
c000341c:	89 ca                	mov    edx,ecx
c000341e:	85 c9                	test   ecx,ecx
c0003420:	74 0e                	je     c0003430 <remove_chain+0x2b>
c0003422:	83 c9 ff             	or     ecx,0xffffffff
c0003425:	89 d8                	mov    eax,ebx
c0003427:	e8 5f f2 ff ff       	call   c000268b <put_fat>
c000342c:	85 c0                	test   eax,eax
c000342e:	75 56                	jne    c0003486 <remove_chain+0x81>
c0003430:	89 f2                	mov    edx,esi
c0003432:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003435:	e8 c7 fc ff ff       	call   c0003101 <get_fat.isra.2>
c000343a:	89 c7                	mov    edi,eax
c000343c:	85 c0                	test   eax,eax
c000343e:	75 04                	jne    c0003444 <remove_chain+0x3f>
c0003440:	31 c0                	xor    eax,eax
c0003442:	eb 42                	jmp    c0003486 <remove_chain+0x81>
c0003444:	83 f8 01             	cmp    eax,0x1
c0003447:	74 31                	je     c000347a <remove_chain+0x75>
c0003449:	83 f8 ff             	cmp    eax,0xffffffff
c000344c:	74 33                	je     c0003481 <remove_chain+0x7c>
c000344e:	31 c9                	xor    ecx,ecx
c0003450:	89 f2                	mov    edx,esi
c0003452:	89 d8                	mov    eax,ebx
c0003454:	e8 32 f2 ff ff       	call   c000268b <put_fat>
c0003459:	85 c0                	test   eax,eax
c000345b:	75 29                	jne    c0003486 <remove_chain+0x81>
c000345d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003460:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003463:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003466:	39 c8                	cmp    eax,ecx
c0003468:	73 08                	jae    c0003472 <remove_chain+0x6d>
c000346a:	40                   	inc    eax
c000346b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000346f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003472:	89 fe                	mov    esi,edi
c0003474:	39 fa                	cmp    edx,edi
c0003476:	77 b8                	ja     c0003430 <remove_chain+0x2b>
c0003478:	eb c6                	jmp    c0003440 <remove_chain+0x3b>
c000347a:	b8 02 00 00 00       	mov    eax,0x2
c000347f:	eb 05                	jmp    c0003486 <remove_chain+0x81>
c0003481:	b8 01 00 00 00       	mov    eax,0x1
c0003486:	83 c4 0c             	add    esp,0xc
c0003489:	5b                   	pop    ebx
c000348a:	5e                   	pop    esi
c000348b:	5f                   	pop    edi
c000348c:	5d                   	pop    ebp
c000348d:	c3                   	ret    

c000348e <dir_next>:
c000348e:	55                   	push   ebp
c000348f:	57                   	push   edi
c0003490:	56                   	push   esi
c0003491:	53                   	push   ebx
c0003492:	83 ec 1c             	sub    esp,0x1c
c0003495:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003498:	8b 28                	mov    ebp,DWORD PTR [eax]
c000349a:	83 c7 20             	add    edi,0x20
c000349d:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034a3:	76 07                	jbe    c00034ac <dir_next+0x1e>
c00034a5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034ac:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034af:	b9 04 00 00 00       	mov    ecx,0x4
c00034b4:	85 f6                	test   esi,esi
c00034b6:	0f 84 cd 00 00 00    	je     c0003589 <dir_next+0xfb>
c00034bc:	89 c3                	mov    ebx,eax
c00034be:	89 d1                	mov    ecx,edx
c00034c0:	89 f8                	mov    eax,edi
c00034c2:	25 ff 01 00 00       	and    eax,0x1ff
c00034c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034cb:	0f 85 a8 00 00 00    	jne    c0003579 <dir_next+0xeb>
c00034d1:	46                   	inc    esi
c00034d2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034d5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034d8:	85 d2                	test   edx,edx
c00034da:	75 22                	jne    c00034fe <dir_next+0x70>
c00034dc:	89 fa                	mov    edx,edi
c00034de:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034e2:	c1 ea 05             	shr    edx,0x5
c00034e5:	39 c2                	cmp    edx,eax
c00034e7:	0f 82 8c 00 00 00    	jb     c0003579 <dir_next+0xeb>
c00034ed:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00034f4:	b9 04 00 00 00       	mov    ecx,0x4
c00034f9:	e9 8b 00 00 00       	jmp    c0003589 <dir_next+0xfb>
c00034fe:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003502:	89 fe                	mov    esi,edi
c0003504:	48                   	dec    eax
c0003505:	c1 ee 09             	shr    esi,0x9
c0003508:	85 f0                	test   eax,esi
c000350a:	75 6d                	jne    c0003579 <dir_next+0xeb>
c000350c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003510:	89 e8                	mov    eax,ebp
c0003512:	e8 ea fb ff ff       	call   c0003101 <get_fat.isra.2>
c0003517:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000351b:	89 c6                	mov    esi,eax
c000351d:	83 f8 01             	cmp    eax,0x1
c0003520:	77 07                	ja     c0003529 <dir_next+0x9b>
c0003522:	b9 02 00 00 00       	mov    ecx,0x2
c0003527:	eb 60                	jmp    c0003589 <dir_next+0xfb>
c0003529:	83 f8 ff             	cmp    eax,0xffffffff
c000352c:	75 07                	jne    c0003535 <dir_next+0xa7>
c000352e:	b9 01 00 00 00       	mov    ecx,0x1
c0003533:	eb 54                	jmp    c0003589 <dir_next+0xfb>
c0003535:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003538:	77 30                	ja     c000356a <dir_next+0xdc>
c000353a:	85 c9                	test   ecx,ecx
c000353c:	74 af                	je     c00034ed <dir_next+0x5f>
c000353e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003541:	89 d8                	mov    eax,ebx
c0003543:	e8 83 fd ff ff       	call   c00032cb <create_chain>
c0003548:	b9 07 00 00 00       	mov    ecx,0x7
c000354d:	89 c6                	mov    esi,eax
c000354f:	85 c0                	test   eax,eax
c0003551:	74 36                	je     c0003589 <dir_next+0xfb>
c0003553:	83 f8 01             	cmp    eax,0x1
c0003556:	74 ca                	je     c0003522 <dir_next+0x94>
c0003558:	83 f8 ff             	cmp    eax,0xffffffff
c000355b:	74 d1                	je     c000352e <dir_next+0xa0>
c000355d:	89 c2                	mov    edx,eax
c000355f:	89 e8                	mov    eax,ebp
c0003561:	e8 75 f2 ff ff       	call   c00027db <dir_clear>
c0003566:	85 c0                	test   eax,eax
c0003568:	75 c4                	jne    c000352e <dir_next+0xa0>
c000356a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000356d:	89 f2                	mov    edx,esi
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 df e9 ff ff       	call   c0001f55 <clst2sect>
c0003576:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003579:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000357d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003580:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003584:	31 c9                	xor    ecx,ecx
c0003586:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003589:	83 c4 1c             	add    esp,0x1c
c000358c:	89 c8                	mov    eax,ecx
c000358e:	5b                   	pop    ebx
c000358f:	5e                   	pop    esi
c0003590:	5f                   	pop    edi
c0003591:	5d                   	pop    ebp
c0003592:	c3                   	ret    

c0003593 <dir_alloc>:
c0003593:	55                   	push   ebp
c0003594:	89 c5                	mov    ebp,eax
c0003596:	57                   	push   edi
c0003597:	89 d7                	mov    edi,edx
c0003599:	56                   	push   esi
c000359a:	31 d2                	xor    edx,edx
c000359c:	53                   	push   ebx
c000359d:	83 ec 0c             	sub    esp,0xc
c00035a0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035a2:	e8 5c fc ff ff       	call   c0003203 <dir_sdi>
c00035a7:	85 c0                	test   eax,eax
c00035a9:	75 37                	jne    c00035e2 <dir_alloc+0x4f>
c00035ab:	31 db                	xor    ebx,ebx
c00035ad:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035b0:	89 f0                	mov    eax,esi
c00035b2:	e8 7e ec ff ff       	call   c0002235 <move_window>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 27                	jne    c00035e2 <dir_alloc+0x4f>
c00035bb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035be:	8a 12                	mov    dl,BYTE PTR [edx]
c00035c0:	84 d2                	test   dl,dl
c00035c2:	74 05                	je     c00035c9 <dir_alloc+0x36>
c00035c4:	80 fa e5             	cmp    dl,0xe5
c00035c7:	75 07                	jne    c00035d0 <dir_alloc+0x3d>
c00035c9:	43                   	inc    ebx
c00035ca:	39 fb                	cmp    ebx,edi
c00035cc:	75 04                	jne    c00035d2 <dir_alloc+0x3f>
c00035ce:	eb 1c                	jmp    c00035ec <dir_alloc+0x59>
c00035d0:	31 db                	xor    ebx,ebx
c00035d2:	ba 01 00 00 00       	mov    edx,0x1
c00035d7:	89 e8                	mov    eax,ebp
c00035d9:	e8 b0 fe ff ff       	call   c000348e <dir_next>
c00035de:	85 c0                	test   eax,eax
c00035e0:	74 cb                	je     c00035ad <dir_alloc+0x1a>
c00035e2:	83 f8 04             	cmp    eax,0x4
c00035e5:	75 05                	jne    c00035ec <dir_alloc+0x59>
c00035e7:	b8 07 00 00 00       	mov    eax,0x7
c00035ec:	83 c4 0c             	add    esp,0xc
c00035ef:	5b                   	pop    ebx
c00035f0:	5e                   	pop    esi
c00035f1:	5f                   	pop    edi
c00035f2:	5d                   	pop    ebp
c00035f3:	c3                   	ret    

c00035f4 <dir_read>:
c00035f4:	55                   	push   ebp
c00035f5:	57                   	push   edi
c00035f6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00035fb:	56                   	push   esi
c00035fc:	be 04 00 00 00       	mov    esi,0x4
c0003601:	53                   	push   ebx
c0003602:	89 c3                	mov    ebx,eax
c0003604:	83 ec 1c             	sub    esp,0x1c
c0003607:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000360b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000360d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003612:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003615:	85 d2                	test   edx,edx
c0003617:	0f 84 d8 00 00 00    	je     c00036f5 <dir_read+0x101>
c000361d:	89 e8                	mov    eax,ebp
c000361f:	e8 11 ec ff ff       	call   c0002235 <move_window>
c0003624:	89 c6                	mov    esi,eax
c0003626:	85 c0                	test   eax,eax
c0003628:	0f 85 d2 00 00 00    	jne    c0003700 <dir_read+0x10c>
c000362e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003631:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003633:	84 c9                	test   cl,cl
c0003635:	0f 84 c0 00 00 00    	je     c00036fb <dir_read+0x107>
c000363b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000363e:	83 e0 3f             	and    eax,0x3f
c0003641:	80 f9 2e             	cmp    cl,0x2e
c0003644:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003648:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000364b:	0f 84 8a 00 00 00    	je     c00036db <dir_read+0xe7>
c0003651:	80 f9 e5             	cmp    cl,0xe5
c0003654:	0f 84 81 00 00 00    	je     c00036db <dir_read+0xe7>
c000365a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000365e:	83 e0 1f             	and    eax,0x1f
c0003661:	83 f8 08             	cmp    eax,0x8
c0003664:	0f 94 c0             	sete   al
c0003667:	0f b6 c0             	movzx  eax,al
c000366a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000366e:	75 6b                	jne    c00036db <dir_read+0xe7>
c0003670:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003675:	75 44                	jne    c00036bb <dir_read+0xc7>
c0003677:	f6 c1 40             	test   cl,0x40
c000367a:	74 12                	je     c000368e <dir_read+0x9a>
c000367c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000367f:	83 e1 bf             	and    ecx,0xffffffbf
c0003682:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003686:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003689:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000368c:	eb 06                	jmp    c0003694 <dir_read+0xa0>
c000368e:	89 f8                	mov    eax,edi
c0003690:	38 c8                	cmp    al,cl
c0003692:	75 47                	jne    c00036db <dir_read+0xe7>
c0003694:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003698:	bf ff ff ff ff       	mov    edi,0xffffffff
c000369d:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036a0:	75 3e                	jne    c00036e0 <dir_read+0xec>
c00036a2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036a9:	e8 c4 e8 ff ff       	call   c0001f72 <pick_lfn>
c00036ae:	85 c0                	test   eax,eax
c00036b0:	74 2e                	je     c00036e0 <dir_read+0xec>
c00036b2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036b6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036b9:	eb 25                	jmp    c00036e0 <dir_read+0xec>
c00036bb:	89 f8                	mov    eax,edi
c00036bd:	84 c0                	test   al,al
c00036bf:	75 11                	jne    c00036d2 <dir_read+0xde>
c00036c1:	89 d0                	mov    eax,edx
c00036c3:	e8 64 ea ff ff       	call   c000212c <sum_sfn>
c00036c8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036cc:	75 04                	jne    c00036d2 <dir_read+0xde>
c00036ce:	31 f6                	xor    esi,esi
c00036d0:	eb 35                	jmp    c0003707 <dir_read+0x113>
c00036d2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036d9:	eb 2c                	jmp    c0003707 <dir_read+0x113>
c00036db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036e0:	31 d2                	xor    edx,edx
c00036e2:	89 d8                	mov    eax,ebx
c00036e4:	e8 a5 fd ff ff       	call   c000348e <dir_next>
c00036e9:	89 c6                	mov    esi,eax
c00036eb:	85 c0                	test   eax,eax
c00036ed:	0f 84 1f ff ff ff    	je     c0003612 <dir_read+0x1e>
c00036f3:	eb 0b                	jmp    c0003700 <dir_read+0x10c>
c00036f5:	85 f6                	test   esi,esi
c00036f7:	74 d5                	je     c00036ce <dir_read+0xda>
c00036f9:	eb 05                	jmp    c0003700 <dir_read+0x10c>
c00036fb:	be 04 00 00 00       	mov    esi,0x4
c0003700:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003707:	83 c4 1c             	add    esp,0x1c
c000370a:	89 f0                	mov    eax,esi
c000370c:	5b                   	pop    ebx
c000370d:	5e                   	pop    esi
c000370e:	5f                   	pop    edi
c000370f:	5d                   	pop    ebp
c0003710:	c3                   	ret    

c0003711 <dir_remove>:
c0003711:	57                   	push   edi
c0003712:	56                   	push   esi
c0003713:	53                   	push   ebx
c0003714:	89 c3                	mov    ebx,eax
c0003716:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003719:	8b 30                	mov    esi,DWORD PTR [eax]
c000371b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000371e:	83 fa ff             	cmp    edx,0xffffffff
c0003721:	74 09                	je     c000372c <dir_remove+0x1b>
c0003723:	e8 db fa ff ff       	call   c0003203 <dir_sdi>
c0003728:	85 c0                	test   eax,eax
c000372a:	75 34                	jne    c0003760 <dir_remove+0x4f>
c000372c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000372f:	89 f0                	mov    eax,esi
c0003731:	e8 ff ea ff ff       	call   c0002235 <move_window>
c0003736:	85 c0                	test   eax,eax
c0003738:	75 1c                	jne    c0003756 <dir_remove+0x45>
c000373a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000373d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003740:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003744:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003747:	73 17                	jae    c0003760 <dir_remove+0x4f>
c0003749:	31 d2                	xor    edx,edx
c000374b:	89 d8                	mov    eax,ebx
c000374d:	e8 3c fd ff ff       	call   c000348e <dir_next>
c0003752:	85 c0                	test   eax,eax
c0003754:	74 d6                	je     c000372c <dir_remove+0x1b>
c0003756:	83 f8 04             	cmp    eax,0x4
c0003759:	75 05                	jne    c0003760 <dir_remove+0x4f>
c000375b:	b8 02 00 00 00       	mov    eax,0x2
c0003760:	5b                   	pop    ebx
c0003761:	5e                   	pop    esi
c0003762:	5f                   	pop    edi
c0003763:	c3                   	ret    

c0003764 <dir_find>:
c0003764:	55                   	push   ebp
c0003765:	31 d2                	xor    edx,edx
c0003767:	57                   	push   edi
c0003768:	56                   	push   esi
c0003769:	53                   	push   ebx
c000376a:	89 c3                	mov    ebx,eax
c000376c:	83 ec 1c             	sub    esp,0x1c
c000376f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003771:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003775:	89 d8                	mov    eax,ebx
c0003777:	e8 87 fa ff ff       	call   c0003203 <dir_sdi>
c000377c:	89 c6                	mov    esi,eax
c000377e:	85 c0                	test   eax,eax
c0003780:	0f 85 02 01 00 00    	jne    c0003888 <dir_find+0x124>
c0003786:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000378d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c0003792:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003797:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000379a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000379e:	e8 92 ea ff ff       	call   c0002235 <move_window>
c00037a3:	89 c6                	mov    esi,eax
c00037a5:	85 c0                	test   eax,eax
c00037a7:	0f 85 db 00 00 00    	jne    c0003888 <dir_find+0x124>
c00037ad:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037b0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037b3:	84 c9                	test   cl,cl
c00037b5:	0f 84 c8 00 00 00    	je     c0003883 <dir_find+0x11f>
c00037bb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037be:	88 d0                	mov    al,dl
c00037c0:	83 e0 3f             	and    eax,0x3f
c00037c3:	80 f9 e5             	cmp    cl,0xe5
c00037c6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037c9:	0f 84 93 00 00 00    	je     c0003862 <dir_find+0xfe>
c00037cf:	80 e2 08             	and    dl,0x8
c00037d2:	74 0a                	je     c00037de <dir_find+0x7a>
c00037d4:	3c 0f                	cmp    al,0xf
c00037d6:	0f 85 86 00 00 00    	jne    c0003862 <dir_find+0xfe>
c00037dc:	eb 04                	jmp    c00037e2 <dir_find+0x7e>
c00037de:	3c 0f                	cmp    al,0xf
c00037e0:	75 54                	jne    c0003836 <dir_find+0xd2>
c00037e2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037e6:	0f 85 82 00 00 00    	jne    c000386e <dir_find+0x10a>
c00037ec:	f6 c1 40             	test   cl,0x40
c00037ef:	74 12                	je     c0003803 <dir_find+0x9f>
c00037f1:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c00037f4:	83 e1 bf             	and    ecx,0xffffffbf
c00037f7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00037fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037fe:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003801:	eb 06                	jmp    c0003809 <dir_find+0xa5>
c0003803:	89 f8                	mov    eax,edi
c0003805:	38 c8                	cmp    al,cl
c0003807:	75 60                	jne    c0003869 <dir_find+0x105>
c0003809:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000380d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003812:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003815:	75 57                	jne    c000386e <dir_find+0x10a>
c0003817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000381b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000381f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003822:	89 ea                	mov    edx,ebp
c0003824:	e8 89 f3 ff ff       	call   c0002bb2 <cmp_lfn>
c0003829:	85 c0                	test   eax,eax
c000382b:	74 41                	je     c000386e <dir_find+0x10a>
c000382d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003831:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003834:	eb 38                	jmp    c000386e <dir_find+0x10a>
c0003836:	89 f8                	mov    eax,edi
c0003838:	84 c0                	test   al,al
c000383a:	75 0d                	jne    c0003849 <dir_find+0xe5>
c000383c:	89 e8                	mov    eax,ebp
c000383e:	e8 e9 e8 ff ff       	call   c000212c <sum_sfn>
c0003843:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003847:	74 3f                	je     c0003888 <dir_find+0x124>
c0003849:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000384d:	75 13                	jne    c0003862 <dir_find+0xfe>
c000384f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003852:	b9 0b 00 00 00       	mov    ecx,0xb
c0003857:	89 e8                	mov    eax,ebp
c0003859:	e8 fd e4 ff ff       	call   c0001d5b <mem_cmp>
c000385e:	85 c0                	test   eax,eax
c0003860:	74 26                	je     c0003888 <dir_find+0x124>
c0003862:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003869:	bf ff ff ff ff       	mov    edi,0xffffffff
c000386e:	31 d2                	xor    edx,edx
c0003870:	89 d8                	mov    eax,ebx
c0003872:	e8 17 fc ff ff       	call   c000348e <dir_next>
c0003877:	89 c6                	mov    esi,eax
c0003879:	85 c0                	test   eax,eax
c000387b:	0f 84 16 ff ff ff    	je     c0003797 <dir_find+0x33>
c0003881:	eb 05                	jmp    c0003888 <dir_find+0x124>
c0003883:	be 04 00 00 00       	mov    esi,0x4
c0003888:	83 c4 1c             	add    esp,0x1c
c000388b:	89 f0                	mov    eax,esi
c000388d:	5b                   	pop    ebx
c000388e:	5e                   	pop    esi
c000388f:	5f                   	pop    edi
c0003890:	5d                   	pop    ebp
c0003891:	c3                   	ret    

c0003892 <follow_path>:
c0003892:	56                   	push   esi
c0003893:	53                   	push   ebx
c0003894:	89 c3                	mov    ebx,eax
c0003896:	83 ec 14             	sub    esp,0x14
c0003899:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000389d:	8b 30                	mov    esi,DWORD PTR [eax]
c000389f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038a3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038a5:	80 fa 5c             	cmp    dl,0x5c
c00038a8:	75 07                	jne    c00038b1 <follow_path+0x1f>
c00038aa:	40                   	inc    eax
c00038ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038af:	eb ee                	jmp    c000389f <follow_path+0xd>
c00038b1:	80 fa 2f             	cmp    dl,0x2f
c00038b4:	74 f4                	je     c00038aa <follow_path+0x18>
c00038b6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038bd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038c0:	77 3e                	ja     c0003900 <follow_path+0x6e>
c00038c2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038c6:	31 d2                	xor    edx,edx
c00038c8:	89 d8                	mov    eax,ebx
c00038ca:	e8 34 f9 ff ff       	call   c0003203 <dir_sdi>
c00038cf:	eb 4f                	jmp    c0003920 <follow_path+0x8e>
c00038d1:	89 d8                	mov    eax,ebx
c00038d3:	e8 8c fe ff ff       	call   c0003764 <dir_find>
c00038d8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038db:	85 c0                	test   eax,eax
c00038dd:	75 32                	jne    c0003911 <follow_path+0x7f>
c00038df:	80 e2 04             	and    dl,0x4
c00038e2:	75 3c                	jne    c0003920 <follow_path+0x8e>
c00038e4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038e8:	74 31                	je     c000391b <follow_path+0x89>
c00038ea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038ed:	25 ff 01 00 00       	and    eax,0x1ff
c00038f2:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c00038f6:	8a 06                	mov    al,BYTE PTR [esi]
c00038f8:	e8 b3 f7 ff ff       	call   c00030b0 <ld_clust.isra.0>
c00038fd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003900:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003904:	89 d8                	mov    eax,ebx
c0003906:	e8 cb ef ff ff       	call   c00028d6 <create_name>
c000390b:	85 c0                	test   eax,eax
c000390d:	74 c2                	je     c00038d1 <follow_path+0x3f>
c000390f:	eb 0f                	jmp    c0003920 <follow_path+0x8e>
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	75 0a                	jne    c0003920 <follow_path+0x8e>
c0003916:	80 e2 04             	and    dl,0x4
c0003919:	75 05                	jne    c0003920 <follow_path+0x8e>
c000391b:	b8 05 00 00 00       	mov    eax,0x5
c0003920:	83 c4 14             	add    esp,0x14
c0003923:	5b                   	pop    ebx
c0003924:	5e                   	pop    esi
c0003925:	c3                   	ret    

c0003926 <dir_register>:
c0003926:	55                   	push   ebp
c0003927:	57                   	push   edi
c0003928:	56                   	push   esi
c0003929:	be 06 00 00 00       	mov    esi,0x6
c000392e:	53                   	push   ebx
c000392f:	83 ec 2c             	sub    esp,0x2c
c0003932:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003936:	0f 85 65 01 00 00    	jne    c0003aa1 <dir_register+0x17b>
c000393c:	8b 38                	mov    edi,DWORD PTR [eax]
c000393e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003946:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003949:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000394d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003952:	74 06                	je     c000395a <dir_register+0x34>
c0003954:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003958:	eb ef                	jmp    c0003949 <dir_register+0x23>
c000395a:	89 c3                	mov    ebx,eax
c000395c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003961:	8d 40 20             	lea    eax,[eax+0x20]
c0003964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003968:	89 c2                	mov    edx,eax
c000396a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000396e:	e8 c8 e3 ff ff       	call   c0001d3b <mem_cpy>
c0003973:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003978:	74 48                	je     c00039c2 <dir_register+0x9c>
c000397a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000397e:	bd 01 00 00 00       	mov    ebp,0x1
c0003983:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003986:	55                   	push   ebp
c0003987:	8d 54 24 18          	lea    edx,[esp+0x18]
c000398b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000398f:	e8 dc e6 ff ff       	call   c0002070 <gen_numname>
c0003994:	58                   	pop    eax
c0003995:	89 d8                	mov    eax,ebx
c0003997:	e8 c8 fd ff ff       	call   c0003764 <dir_find>
c000399c:	89 c6                	mov    esi,eax
c000399e:	85 c0                	test   eax,eax
c00039a0:	75 10                	jne    c00039b2 <dir_register+0x8c>
c00039a2:	45                   	inc    ebp
c00039a3:	83 fd 64             	cmp    ebp,0x64
c00039a6:	75 db                	jne    c0003983 <dir_register+0x5d>
c00039a8:	be 07 00 00 00       	mov    esi,0x7
c00039ad:	e9 ef 00 00 00       	jmp    c0003aa1 <dir_register+0x17b>
c00039b2:	83 f8 04             	cmp    eax,0x4
c00039b5:	0f 85 e6 00 00 00    	jne    c0003aa1 <dir_register+0x17b>
c00039bb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039bf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039c2:	bd 01 00 00 00       	mov    ebp,0x1
c00039c7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039cc:	74 13                	je     c00039e1 <dir_register+0xbb>
c00039ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039d2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039d7:	83 c0 0c             	add    eax,0xc
c00039da:	31 d2                	xor    edx,edx
c00039dc:	f7 f1                	div    ecx
c00039de:	8d 68 01             	lea    ebp,[eax+0x1]
c00039e1:	89 ea                	mov    edx,ebp
c00039e3:	89 d8                	mov    eax,ebx
c00039e5:	e8 a9 fb ff ff       	call   c0003593 <dir_alloc>
c00039ea:	89 c6                	mov    esi,eax
c00039ec:	85 c0                	test   eax,eax
c00039ee:	0f 85 ad 00 00 00    	jne    c0003aa1 <dir_register+0x17b>
c00039f4:	4d                   	dec    ebp
c00039f5:	74 6a                	je     c0003a61 <dir_register+0x13b>
c00039f7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00039fa:	89 e8                	mov    eax,ebp
c00039fc:	c1 e0 05             	shl    eax,0x5
c00039ff:	29 c2                	sub    edx,eax
c0003a01:	89 d8                	mov    eax,ebx
c0003a03:	e8 fb f7 ff ff       	call   c0003203 <dir_sdi>
c0003a08:	89 c6                	mov    esi,eax
c0003a0a:	85 c0                	test   eax,eax
c0003a0c:	0f 85 8f 00 00 00    	jne    c0003aa1 <dir_register+0x17b>
c0003a12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a16:	e8 11 e7 ff ff       	call   c000212c <sum_sfn>
c0003a1b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a22:	89 f8                	mov    eax,edi
c0003a24:	e8 0c e8 ff ff       	call   c0002235 <move_window>
c0003a29:	89 c6                	mov    esi,eax
c0003a2b:	85 c0                	test   eax,eax
c0003a2d:	75 72                	jne    c0003aa1 <dir_register+0x17b>
c0003a2f:	83 ec 0c             	sub    esp,0xc
c0003a32:	89 e8                	mov    eax,ebp
c0003a34:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a39:	0f b6 c8             	movzx  ecx,al
c0003a3c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a3f:	52                   	push   edx
c0003a40:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a43:	e8 a4 e5 ff ff       	call   c0001fec <put_lfn>
c0003a48:	31 d2                	xor    edx,edx
c0003a4a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 39 fa ff ff       	call   c000348e <dir_next>
c0003a55:	83 c4 10             	add    esp,0x10
c0003a58:	89 c6                	mov    esi,eax
c0003a5a:	85 c0                	test   eax,eax
c0003a5c:	75 43                	jne    c0003aa1 <dir_register+0x17b>
c0003a5e:	4d                   	dec    ebp
c0003a5f:	75 be                	jne    c0003a1f <dir_register+0xf9>
c0003a61:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a64:	89 f8                	mov    eax,edi
c0003a66:	e8 ca e7 ff ff       	call   c0002235 <move_window>
c0003a6b:	89 c6                	mov    esi,eax
c0003a6d:	85 c0                	test   eax,eax
c0003a6f:	75 30                	jne    c0003aa1 <dir_register+0x17b>
c0003a71:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a74:	b9 20 00 00 00       	mov    ecx,0x20
c0003a79:	31 d2                	xor    edx,edx
c0003a7b:	e8 d0 e2 ff ff       	call   c0001d50 <mem_set>
c0003a80:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a83:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a87:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a8c:	e8 aa e2 ff ff       	call   c0001d3b <mem_cpy>
c0003a91:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003a94:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a97:	83 e0 18             	and    eax,0x18
c0003a9a:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003a9d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003aa1:	83 c4 2c             	add    esp,0x2c
c0003aa4:	89 f0                	mov    eax,esi
c0003aa6:	5b                   	pop    ebx
c0003aa7:	5e                   	pop    esi
c0003aa8:	5f                   	pop    edi
c0003aa9:	5d                   	pop    ebp
c0003aaa:	c3                   	ret    

c0003aab <f_mount>:
c0003aab:	53                   	push   ebx
c0003aac:	83 ec 18             	sub    esp,0x18
c0003aaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ab3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ab7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003abb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003abf:	e8 7a e6 ff ff       	call   c000213e <get_ldnumber>
c0003ac4:	89 c2                	mov    edx,eax
c0003ac6:	b8 0b 00 00 00       	mov    eax,0xb
c0003acb:	85 d2                	test   edx,edx
c0003acd:	78 39                	js     c0003b08 <f_mount+0x5d>
c0003acf:	8b 04 95 a0 34 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcb60]
c0003ad6:	85 c0                	test   eax,eax
c0003ad8:	74 03                	je     c0003add <f_mount+0x32>
c0003ada:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003add:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003ae1:	85 c0                	test   eax,eax
c0003ae3:	74 03                	je     c0003ae8 <f_mount+0x3d>
c0003ae5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003aec:	89 04 95 a0 34 02 c0 	mov    DWORD PTR [edx*4-0x3ffdcb60],eax
c0003af3:	31 c0                	xor    eax,eax
c0003af5:	84 db                	test   bl,bl
c0003af7:	74 0f                	je     c0003b08 <f_mount+0x5d>
c0003af9:	31 c9                	xor    ecx,ecx
c0003afb:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003aff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b03:	e8 80 e8 ff ff       	call   c0002388 <mount_volume>
c0003b08:	83 c4 18             	add    esp,0x18
c0003b0b:	5b                   	pop    ebx
c0003b0c:	c3                   	ret    

c0003b0d <f_open>:
c0003b0d:	55                   	push   ebp
c0003b0e:	b8 09 00 00 00       	mov    eax,0x9
c0003b13:	57                   	push   edi
c0003b14:	56                   	push   esi
c0003b15:	53                   	push   ebx
c0003b16:	83 ec 5c             	sub    esp,0x5c
c0003b19:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b1d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b21:	85 db                	test   ebx,ebx
c0003b23:	0f 84 a7 02 00 00    	je     c0003dd0 <f_open+0x2c3>
c0003b29:	89 fe                	mov    esi,edi
c0003b2b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b2f:	83 e6 3f             	and    esi,0x3f
c0003b32:	89 f0                	mov    eax,esi
c0003b34:	0f b6 c8             	movzx  ecx,al
c0003b37:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b3b:	e8 48 e8 ff ff       	call   c0002388 <mount_volume>
c0003b40:	85 c0                	test   eax,eax
c0003b42:	0f 85 82 02 00 00    	jne    c0003dca <f_open+0x2bd>
c0003b48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b4c:	83 ec 0c             	sub    esp,0xc
c0003b4f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b53:	68 00 02 00 00       	push   0x200
c0003b58:	e8 ff 1e 00 00       	call   c0005a5c <ff_memalloc>
c0003b5d:	83 c4 10             	add    esp,0x10
c0003b60:	89 c5                	mov    ebp,eax
c0003b62:	b8 11 00 00 00       	mov    eax,0x11
c0003b67:	85 ed                	test   ebp,ebp
c0003b69:	0f 84 61 02 00 00    	je     c0003dd0 <f_open+0x2c3>
c0003b6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b73:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b77:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b7a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b7e:	e8 0f fd ff ff       	call   c0003892 <follow_path>
c0003b83:	85 c0                	test   eax,eax
c0003b85:	75 0c                	jne    c0003b93 <f_open+0x86>
c0003b87:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b8c:	79 05                	jns    c0003b93 <f_open+0x86>
c0003b8e:	b8 06 00 00 00       	mov    eax,0x6
c0003b93:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003b99:	0f 84 de 00 00 00    	je     c0003c7d <f_open+0x170>
c0003b9f:	85 c0                	test   eax,eax
c0003ba1:	74 1e                	je     c0003bc1 <f_open+0xb4>
c0003ba3:	83 f8 04             	cmp    eax,0x4
c0003ba6:	0f 85 06 02 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003bac:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bb0:	83 ce 08             	or     esi,0x8
c0003bb3:	e8 6e fd ff ff       	call   c0003926 <dir_register>
c0003bb8:	85 c0                	test   eax,eax
c0003bba:	74 2f                	je     c0003beb <f_open+0xde>
c0003bbc:	e9 f1 01 00 00       	jmp    c0003db2 <f_open+0x2a5>
c0003bc1:	b8 07 00 00 00       	mov    eax,0x7
c0003bc6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bcb:	0f 85 e1 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003bd1:	b8 08 00 00 00       	mov    eax,0x8
c0003bd6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bdc:	0f 85 d0 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003be2:	83 e7 08             	and    edi,0x8
c0003be5:	0f 84 bf 00 00 00    	je     c0003caa <f_open+0x19d>
c0003beb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003bf3:	89 ca                	mov    edx,ecx
c0003bf5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003bf9:	8a 00                	mov    al,BYTE PTR [eax]
c0003bfb:	e8 b0 f4 ff ff       	call   c00030b0 <ld_clust.isra.0>
c0003c00:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c04:	89 c7                	mov    edi,eax
c0003c06:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c0b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c0e:	e8 25 e1 ff ff       	call   c0001d38 <st_dword>
c0003c13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c17:	31 c9                	xor    ecx,ecx
c0003c19:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c21:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c25:	e8 af f4 ff ff       	call   c00030d9 <st_clust.isra.1>
c0003c2a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c2e:	31 d2                	xor    edx,edx
c0003c30:	83 c0 1c             	add    eax,0x1c
c0003c33:	e8 00 e1 ff ff       	call   c0001d38 <st_dword>
c0003c38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c3c:	85 ff                	test   edi,edi
c0003c3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c42:	74 66                	je     c0003caa <f_open+0x19d>
c0003c44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c48:	31 c9                	xor    ecx,ecx
c0003c4a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c4d:	89 fa                	mov    edx,edi
c0003c4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c53:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c57:	e8 a9 f7 ff ff       	call   c0003405 <remove_chain>
c0003c5c:	85 c0                	test   eax,eax
c0003c5e:	0f 85 4e 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003c64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c68:	4f                   	dec    edi
c0003c69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6d:	e8 c3 e5 ff ff       	call   c0002235 <move_window>
c0003c72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c76:	85 c0                	test   eax,eax
c0003c78:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c7b:	eb 27                	jmp    c0003ca4 <f_open+0x197>
c0003c7d:	85 c0                	test   eax,eax
c0003c7f:	0f 85 2d 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003c85:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c89:	b8 04 00 00 00       	mov    eax,0x4
c0003c8e:	f6 c2 10             	test   dl,0x10
c0003c91:	0f 85 1b 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003c97:	83 e7 02             	and    edi,0x2
c0003c9a:	74 0e                	je     c0003caa <f_open+0x19d>
c0003c9c:	b8 07 00 00 00       	mov    eax,0x7
c0003ca1:	80 e2 01             	and    dl,0x1
c0003ca4:	0f 85 08 01 00 00    	jne    c0003db2 <f_open+0x2a5>
c0003caa:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cb0:	74 03                	je     c0003cb5 <f_open+0x1a8>
c0003cb2:	83 ce 40             	or     esi,0x40
c0003cb5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cb9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003cbd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cc0:	89 fa                	mov    edx,edi
c0003cc2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cc6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cc9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ccc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cce:	e8 dd f3 ff ff       	call   c00030b0 <ld_clust.isra.0>
c0003cd3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003cd6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003cd9:	e8 3e e0 ff ff       	call   c0001d1c <ld_dword>
c0003cde:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ce2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003ce5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003ce7:	31 d2                	xor    edx,edx
c0003ce9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003ced:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003cf1:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003cf5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003cfc:	89 f0                	mov    eax,esi
c0003cfe:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d05:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d08:	b9 00 02 00 00       	mov    ecx,0x200
c0003d0d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d14:	e8 37 e0 ff ff       	call   c0001d50 <mem_set>
c0003d19:	83 e6 20             	and    esi,0x20
c0003d1c:	75 07                	jne    c0003d25 <f_open+0x218>
c0003d1e:	31 c0                	xor    eax,eax
c0003d20:	e9 8d 00 00 00       	jmp    c0003db2 <f_open+0x2a5>
c0003d25:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d28:	85 ff                	test   edi,edi
c0003d2a:	74 f2                	je     c0003d1e <f_open+0x211>
c0003d2c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d33:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d36:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d3a:	c1 e6 09             	shl    esi,0x9
c0003d3d:	39 fe                	cmp    esi,edi
c0003d3f:	73 1c                	jae    c0003d5d <f_open+0x250>
c0003d41:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d43:	29 f7                	sub    edi,esi
c0003d45:	e8 b7 f3 ff ff       	call   c0003101 <get_fat.isra.2>
c0003d4a:	89 c2                	mov    edx,eax
c0003d4c:	83 f8 01             	cmp    eax,0x1
c0003d4f:	76 10                	jbe    c0003d61 <f_open+0x254>
c0003d51:	83 f8 ff             	cmp    eax,0xffffffff
c0003d54:	75 e7                	jne    c0003d3d <f_open+0x230>
c0003d56:	b8 01 00 00 00       	mov    eax,0x1
c0003d5b:	eb 09                	jmp    c0003d66 <f_open+0x259>
c0003d5d:	31 c0                	xor    eax,eax
c0003d5f:	eb 05                	jmp    c0003d66 <f_open+0x259>
c0003d61:	b8 02 00 00 00       	mov    eax,0x2
c0003d66:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d69:	85 c0                	test   eax,eax
c0003d6b:	75 45                	jne    c0003db2 <f_open+0x2a5>
c0003d6d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d73:	74 a9                	je     c0003d1e <f_open+0x211>
c0003d75:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d79:	89 f0                	mov    eax,esi
c0003d7b:	e8 d5 e1 ff ff       	call   c0001f55 <clst2sect>
c0003d80:	89 c2                	mov    edx,eax
c0003d82:	b8 02 00 00 00       	mov    eax,0x2
c0003d87:	85 d2                	test   edx,edx
c0003d89:	74 27                	je     c0003db2 <f_open+0x2a5>
c0003d8b:	89 f9                	mov    ecx,edi
c0003d8d:	c1 e9 09             	shr    ecx,0x9
c0003d90:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003d93:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003d96:	6a 01                	push   0x1
c0003d98:	50                   	push   eax
c0003d99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003d9d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003da1:	50                   	push   eax
c0003da2:	e8 1d df ff ff       	call   c0001cc4 <disk_read>
c0003da7:	83 c4 10             	add    esp,0x10
c0003daa:	85 c0                	test   eax,eax
c0003dac:	0f 95 c0             	setne  al
c0003daf:	0f b6 c0             	movzx  eax,al
c0003db2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003db6:	83 ec 0c             	sub    esp,0xc
c0003db9:	55                   	push   ebp
c0003dba:	e8 b5 1c 00 00       	call   c0005a74 <ff_memfree>
c0003dbf:	83 c4 10             	add    esp,0x10
c0003dc2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dc6:	85 c0                	test   eax,eax
c0003dc8:	74 06                	je     c0003dd0 <f_open+0x2c3>
c0003dca:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003dd0:	83 c4 5c             	add    esp,0x5c
c0003dd3:	5b                   	pop    ebx
c0003dd4:	5e                   	pop    esi
c0003dd5:	5f                   	pop    edi
c0003dd6:	5d                   	pop    ebp
c0003dd7:	c3                   	ret    

c0003dd8 <f_read>:
c0003dd8:	55                   	push   ebp
c0003dd9:	57                   	push   edi
c0003dda:	56                   	push   esi
c0003ddb:	53                   	push   ebx
c0003ddc:	83 ec 2c             	sub    esp,0x2c
c0003ddf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003de3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003de7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ded:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003df1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003df5:	89 d8                	mov    eax,ebx
c0003df7:	e8 8f e3 ff ff       	call   c000218b <validate>
c0003dfc:	89 c5                	mov    ebp,eax
c0003dfe:	85 c0                	test   eax,eax
c0003e00:	0f 85 c7 01 00 00    	jne    c0003fcd <f_read+0x1f5>
c0003e06:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e0a:	85 ed                	test   ebp,ebp
c0003e0c:	0f 85 bb 01 00 00    	jne    c0003fcd <f_read+0x1f5>
c0003e12:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e16:	0f 84 ac 01 00 00    	je     c0003fc8 <f_read+0x1f0>
c0003e1c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e1f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e22:	89 c7                	mov    edi,eax
c0003e24:	39 f0                	cmp    eax,esi
c0003e26:	0f 86 ad 00 00 00    	jbe    c0003ed9 <f_read+0x101>
c0003e2c:	89 f7                	mov    edi,esi
c0003e2e:	e9 a6 00 00 00       	jmp    c0003ed9 <f_read+0x101>
c0003e33:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e36:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e3c:	0f 85 5b 01 00 00    	jne    c0003f9d <f_read+0x1c5>
c0003e42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e46:	89 d1                	mov    ecx,edx
c0003e48:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e4c:	c1 e9 09             	shr    ecx,0x9
c0003e4f:	48                   	dec    eax
c0003e50:	21 c8                	and    eax,ecx
c0003e52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e56:	0f 84 8a 00 00 00    	je     c0003ee6 <f_read+0x10e>
c0003e5c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e60:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e63:	89 c8                	mov    eax,ecx
c0003e65:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e69:	e8 e7 e0 ff ff       	call   c0001f55 <clst2sect>
c0003e6e:	85 c0                	test   eax,eax
c0003e70:	0f 84 88 00 00 00    	je     c0003efe <f_read+0x126>
c0003e76:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e82:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e88:	0f 86 bd 00 00 00    	jbe    c0003f4b <f_read+0x173>
c0003e8e:	89 fe                	mov    esi,edi
c0003e90:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003e94:	c1 ee 09             	shr    esi,0x9
c0003e97:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003e9b:	01 f2                	add    edx,esi
c0003e9d:	39 c2                	cmp    edx,eax
c0003e9f:	76 06                	jbe    c0003ea7 <f_read+0xcf>
c0003ea1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ea5:	89 c6                	mov    esi,eax
c0003ea7:	56                   	push   esi
c0003ea8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003eac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003eb0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003eb4:	50                   	push   eax
c0003eb5:	e8 0a de ff ff       	call   c0001cc4 <disk_read>
c0003eba:	83 c4 10             	add    esp,0x10
c0003ebd:	85 c0                	test   eax,eax
c0003ebf:	75 50                	jne    c0003f11 <f_read+0x139>
c0003ec1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ec5:	78 60                	js     c0003f27 <f_read+0x14f>
c0003ec7:	c1 e6 09             	shl    esi,0x9
c0003eca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ece:	29 f7                	sub    edi,esi
c0003ed0:	01 30                	add    DWORD PTR [eax],esi
c0003ed2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ed6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ed9:	85 ff                	test   edi,edi
c0003edb:	0f 85 52 ff ff ff    	jne    c0003e33 <f_read+0x5b>
c0003ee1:	e9 e7 00 00 00       	jmp    c0003fcd <f_read+0x1f5>
c0003ee6:	85 d2                	test   edx,edx
c0003ee8:	75 05                	jne    c0003eef <f_read+0x117>
c0003eea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003eed:	eb 0a                	jmp    c0003ef9 <f_read+0x121>
c0003eef:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ef2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003ef4:	e8 08 f2 ff ff       	call   c0003101 <get_fat.isra.2>
c0003ef9:	83 f8 01             	cmp    eax,0x1
c0003efc:	77 0e                	ja     c0003f0c <f_read+0x134>
c0003efe:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f02:	bd 02 00 00 00       	mov    ebp,0x2
c0003f07:	e9 c1 00 00 00       	jmp    c0003fcd <f_read+0x1f5>
c0003f0c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f0f:	75 0e                	jne    c0003f1f <f_read+0x147>
c0003f11:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f15:	bd 01 00 00 00       	mov    ebp,0x1
c0003f1a:	e9 ae 00 00 00       	jmp    c0003fcd <f_read+0x1f5>
c0003f1f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f22:	e9 35 ff ff ff       	jmp    c0003e5c <f_read+0x84>
c0003f27:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f2a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f2e:	39 f0                	cmp    eax,esi
c0003f30:	73 95                	jae    c0003ec7 <f_read+0xef>
c0003f32:	c1 e0 09             	shl    eax,0x9
c0003f35:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f38:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f3c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f41:	e8 f5 dd ff ff       	call   c0001d3b <mem_cpy>
c0003f46:	e9 7c ff ff ff       	jmp    c0003ec7 <f_read+0xef>
c0003f4b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f4e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f52:	74 42                	je     c0003f96 <f_read+0x1be>
c0003f54:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f57:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f5b:	79 19                	jns    c0003f76 <f_read+0x19e>
c0003f5d:	6a 01                	push   0x1
c0003f5f:	50                   	push   eax
c0003f60:	56                   	push   esi
c0003f61:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f65:	50                   	push   eax
c0003f66:	e8 6f dd ff ff       	call   c0001cda <disk_write>
c0003f6b:	83 c4 10             	add    esp,0x10
c0003f6e:	85 c0                	test   eax,eax
c0003f70:	75 9f                	jne    c0003f11 <f_read+0x139>
c0003f72:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f76:	6a 01                	push   0x1
c0003f78:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f7c:	56                   	push   esi
c0003f7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f81:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f85:	50                   	push   eax
c0003f86:	e8 39 dd ff ff       	call   c0001cc4 <disk_read>
c0003f8b:	83 c4 10             	add    esp,0x10
c0003f8e:	85 c0                	test   eax,eax
c0003f90:	0f 85 7b ff ff ff    	jne    c0003f11 <f_read+0x139>
c0003f96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f9a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003f9d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fa0:	ba 00 02 00 00       	mov    edx,0x200
c0003fa5:	25 ff 01 00 00       	and    eax,0x1ff
c0003faa:	89 fe                	mov    esi,edi
c0003fac:	29 c2                	sub    edx,eax
c0003fae:	39 d7                	cmp    edi,edx
c0003fb0:	76 02                	jbe    c0003fb4 <f_read+0x1dc>
c0003fb2:	89 d6                	mov    esi,edx
c0003fb4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fb8:	89 f1                	mov    ecx,esi
c0003fba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fbe:	e8 78 dd ff ff       	call   c0001d3b <mem_cpy>
c0003fc3:	e9 02 ff ff ff       	jmp    c0003eca <f_read+0xf2>
c0003fc8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fcd:	83 c4 2c             	add    esp,0x2c
c0003fd0:	89 e8                	mov    eax,ebp
c0003fd2:	5b                   	pop    ebx
c0003fd3:	5e                   	pop    esi
c0003fd4:	5f                   	pop    edi
c0003fd5:	5d                   	pop    ebp
c0003fd6:	c3                   	ret    

c0003fd7 <f_write>:
c0003fd7:	55                   	push   ebp
c0003fd8:	57                   	push   edi
c0003fd9:	56                   	push   esi
c0003fda:	53                   	push   ebx
c0003fdb:	83 ec 2c             	sub    esp,0x2c
c0003fde:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003fe2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003fe6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003fec:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003ff0:	89 d8                	mov    eax,ebx
c0003ff2:	e8 94 e1 ff ff       	call   c000218b <validate>
c0003ff7:	89 c5                	mov    ebp,eax
c0003ff9:	85 c0                	test   eax,eax
c0003ffb:	0f 85 00 02 00 00    	jne    c0004201 <f_write+0x22a>
c0004001:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004005:	85 ed                	test   ebp,ebp
c0004007:	0f 85 f4 01 00 00    	jne    c0004201 <f_write+0x22a>
c000400d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004011:	0f 84 e5 01 00 00    	je     c00041fc <f_write+0x225>
c0004017:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000401a:	89 c7                	mov    edi,eax
c000401c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004020:	0f 83 ea 00 00 00    	jae    c0004110 <f_write+0x139>
c0004026:	f7 d0                	not    eax
c0004028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000402c:	e9 df 00 00 00       	jmp    c0004110 <f_write+0x139>
c0004031:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004034:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000403a:	0f 85 8b 01 00 00    	jne    c00041cb <f_write+0x1f4>
c0004040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004044:	89 d1                	mov    ecx,edx
c0004046:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000404a:	c1 e9 09             	shr    ecx,0x9
c000404d:	48                   	dec    eax
c000404e:	21 c8                	and    eax,ecx
c0004050:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004054:	0f 84 c3 00 00 00    	je     c000411d <f_write+0x146>
c000405a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000405e:	0f 88 18 01 00 00    	js     c000417c <f_write+0x1a5>
c0004064:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004068:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000406b:	89 c8                	mov    eax,ecx
c000406d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004071:	e8 df de ff ff       	call   c0001f55 <clst2sect>
c0004076:	85 c0                	test   eax,eax
c0004078:	0f 84 c8 00 00 00    	je     c0004146 <f_write+0x16f>
c000407e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004082:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004086:	01 c7                	add    edi,eax
c0004088:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0004090:	0f 86 0d 01 00 00    	jbe    c00041a3 <f_write+0x1cc>
c0004096:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000409a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000409e:	c1 ee 09             	shr    esi,0x9
c00040a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040a5:	01 f2                	add    edx,esi
c00040a7:	39 c2                	cmp    edx,eax
c00040a9:	76 06                	jbe    c00040b1 <f_write+0xda>
c00040ab:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040af:	89 c6                	mov    esi,eax
c00040b1:	56                   	push   esi
c00040b2:	57                   	push   edi
c00040b3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040bb:	50                   	push   eax
c00040bc:	e8 19 dc ff ff       	call   c0001cda <disk_write>
c00040c1:	83 c4 10             	add    esp,0x10
c00040c4:	85 c0                	test   eax,eax
c00040c6:	0f 85 8d 00 00 00    	jne    c0004159 <f_write+0x182>
c00040cc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040cf:	29 fa                	sub    edx,edi
c00040d1:	39 f2                	cmp    edx,esi
c00040d3:	73 18                	jae    c00040ed <f_write+0x116>
c00040d5:	c1 e2 09             	shl    edx,0x9
c00040d8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040db:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040df:	b9 00 02 00 00       	mov    ecx,0x200
c00040e4:	e8 52 dc ff ff       	call   c0001d3b <mem_cpy>
c00040e9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040ed:	c1 e6 09             	shl    esi,0x9
c00040f0:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00040f4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00040f8:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00040fc:	01 30                	add    DWORD PTR [eax],esi
c00040fe:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004101:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004104:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004107:	39 f0                	cmp    eax,esi
c0004109:	73 02                	jae    c000410d <f_write+0x136>
c000410b:	89 f0                	mov    eax,esi
c000410d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004110:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004115:	0f 85 16 ff ff ff    	jne    c0004031 <f_write+0x5a>
c000411b:	eb 1b                	jmp    c0004138 <f_write+0x161>
c000411d:	85 d2                	test   edx,edx
c000411f:	75 09                	jne    c000412a <f_write+0x153>
c0004121:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004124:	85 c0                	test   eax,eax
c0004126:	75 19                	jne    c0004141 <f_write+0x16a>
c0004128:	eb 03                	jmp    c000412d <f_write+0x156>
c000412a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000412d:	89 d8                	mov    eax,ebx
c000412f:	e8 97 f1 ff ff       	call   c00032cb <create_chain>
c0004134:	85 c0                	test   eax,eax
c0004136:	75 09                	jne    c0004141 <f_write+0x16a>
c0004138:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000413c:	e9 c0 00 00 00       	jmp    c0004201 <f_write+0x22a>
c0004141:	83 f8 01             	cmp    eax,0x1
c0004144:	75 0e                	jne    c0004154 <f_write+0x17d>
c0004146:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000414a:	bd 02 00 00 00       	mov    ebp,0x2
c000414f:	e9 ad 00 00 00       	jmp    c0004201 <f_write+0x22a>
c0004154:	83 f8 ff             	cmp    eax,0xffffffff
c0004157:	75 0e                	jne    c0004167 <f_write+0x190>
c0004159:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000415d:	bd 01 00 00 00       	mov    ebp,0x1
c0004162:	e9 9a 00 00 00       	jmp    c0004201 <f_write+0x22a>
c0004167:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000416a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000416e:	0f 85 e6 fe ff ff    	jne    c000405a <f_write+0x83>
c0004174:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004177:	e9 de fe ff ff       	jmp    c000405a <f_write+0x83>
c000417c:	6a 01                	push   0x1
c000417e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004181:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004184:	50                   	push   eax
c0004185:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004189:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000418d:	50                   	push   eax
c000418e:	e8 47 db ff ff       	call   c0001cda <disk_write>
c0004193:	83 c4 10             	add    esp,0x10
c0004196:	85 c0                	test   eax,eax
c0004198:	75 bf                	jne    c0004159 <f_write+0x182>
c000419a:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000419e:	e9 c1 fe ff ff       	jmp    c0004064 <f_write+0x8d>
c00041a3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041a6:	74 20                	je     c00041c8 <f_write+0x1f1>
c00041a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041ab:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041ae:	76 18                	jbe    c00041c8 <f_write+0x1f1>
c00041b0:	6a 01                	push   0x1
c00041b2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b5:	57                   	push   edi
c00041b6:	50                   	push   eax
c00041b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041bb:	50                   	push   eax
c00041bc:	e8 03 db ff ff       	call   c0001cc4 <disk_read>
c00041c1:	83 c4 10             	add    esp,0x10
c00041c4:	85 c0                	test   eax,eax
c00041c6:	75 91                	jne    c0004159 <f_write+0x182>
c00041c8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041ce:	ba 00 02 00 00       	mov    edx,0x200
c00041d3:	25 ff 01 00 00       	and    eax,0x1ff
c00041d8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041dc:	29 c2                	sub    edx,eax
c00041de:	39 d6                	cmp    esi,edx
c00041e0:	76 02                	jbe    c00041e4 <f_write+0x20d>
c00041e2:	89 d6                	mov    esi,edx
c00041e4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041e8:	89 f1                	mov    ecx,esi
c00041ea:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041ee:	e8 48 db ff ff       	call   c0001d3b <mem_cpy>
c00041f3:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c00041f7:	e9 f4 fe ff ff       	jmp    c00040f0 <f_write+0x119>
c00041fc:	bd 07 00 00 00       	mov    ebp,0x7
c0004201:	83 c4 2c             	add    esp,0x2c
c0004204:	89 e8                	mov    eax,ebp
c0004206:	5b                   	pop    ebx
c0004207:	5e                   	pop    esi
c0004208:	5f                   	pop    edi
c0004209:	5d                   	pop    ebp
c000420a:	c3                   	ret    

c000420b <f_sync>:
c000420b:	56                   	push   esi
c000420c:	53                   	push   ebx
c000420d:	83 ec 14             	sub    esp,0x14
c0004210:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004214:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004218:	89 d8                	mov    eax,ebx
c000421a:	e8 6c df ff ff       	call   c000218b <validate>
c000421f:	85 c0                	test   eax,eax
c0004221:	0f 85 93 00 00 00    	jne    c00042ba <f_sync+0xaf>
c0004227:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000422a:	f6 c2 40             	test   dl,0x40
c000422d:	0f 84 87 00 00 00    	je     c00042ba <f_sync+0xaf>
c0004233:	84 d2                	test   dl,dl
c0004235:	79 29                	jns    c0004260 <f_sync+0x55>
c0004237:	6a 01                	push   0x1
c0004239:	8d 43 28             	lea    eax,[ebx+0x28]
c000423c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000423f:	50                   	push   eax
c0004240:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004244:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004248:	50                   	push   eax
c0004249:	e8 8c da ff ff       	call   c0001cda <disk_write>
c000424e:	83 c4 10             	add    esp,0x10
c0004251:	89 c2                	mov    edx,eax
c0004253:	b8 01 00 00 00       	mov    eax,0x1
c0004258:	85 d2                	test   edx,edx
c000425a:	75 5e                	jne    c00042ba <f_sync+0xaf>
c000425c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004260:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004263:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004267:	e8 c9 df ff ff       	call   c0002235 <move_window>
c000426c:	85 c0                	test   eax,eax
c000426e:	75 4a                	jne    c00042ba <f_sync+0xaf>
c0004270:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004273:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004277:	89 f2                	mov    edx,esi
c0004279:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000427c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000427e:	e8 56 ee ff ff       	call   c00030d9 <st_clust.isra.1>
c0004283:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004286:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004289:	e8 aa da ff ff       	call   c0001d38 <st_dword>
c000428e:	8d 46 16             	lea    eax,[esi+0x16]
c0004291:	ba 00 00 21 50       	mov    edx,0x50210000
c0004296:	e8 9d da ff ff       	call   c0001d38 <st_dword>
c000429b:	8d 46 12             	lea    eax,[esi+0x12]
c000429e:	31 d2                	xor    edx,edx
c00042a0:	e8 8f da ff ff       	call   c0001d34 <st_word>
c00042a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042a9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b1:	e8 bf e9 ff ff       	call   c0002c75 <sync_fs>
c00042b6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ba:	83 c4 14             	add    esp,0x14
c00042bd:	5b                   	pop    ebx
c00042be:	5e                   	pop    esi
c00042bf:	c3                   	ret    

c00042c0 <f_close>:
c00042c0:	53                   	push   ebx
c00042c1:	83 ec 24             	sub    esp,0x24
c00042c4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042c8:	53                   	push   ebx
c00042c9:	e8 3d ff ff ff       	call   c000420b <f_sync>
c00042ce:	83 c4 10             	add    esp,0x10
c00042d1:	85 c0                	test   eax,eax
c00042d3:	75 15                	jne    c00042ea <f_close+0x2a>
c00042d5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042d9:	89 d8                	mov    eax,ebx
c00042db:	e8 ab de ff ff       	call   c000218b <validate>
c00042e0:	85 c0                	test   eax,eax
c00042e2:	75 06                	jne    c00042ea <f_close+0x2a>
c00042e4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042ea:	83 c4 18             	add    esp,0x18
c00042ed:	5b                   	pop    ebx
c00042ee:	c3                   	ret    

c00042ef <f_lseek>:
c00042ef:	55                   	push   ebp
c00042f0:	57                   	push   edi
c00042f1:	56                   	push   esi
c00042f2:	53                   	push   ebx
c00042f3:	83 ec 2c             	sub    esp,0x2c
c00042f6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00042fa:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00042fe:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004302:	89 d8                	mov    eax,ebx
c0004304:	e8 82 de ff ff       	call   c000218b <validate>
c0004309:	89 c5                	mov    ebp,eax
c000430b:	85 c0                	test   eax,eax
c000430d:	0f 85 79 01 00 00    	jne    c000448c <f_lseek+0x19d>
c0004313:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004317:	85 ed                	test   ebp,ebp
c0004319:	0f 85 6d 01 00 00    	jne    c000448c <f_lseek+0x19d>
c000431f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004322:	39 f0                	cmp    eax,esi
c0004324:	73 08                	jae    c000432e <f_lseek+0x3f>
c0004326:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000432a:	75 02                	jne    c000432e <f_lseek+0x3f>
c000432c:	89 c6                	mov    esi,eax
c000432e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004331:	85 f6                	test   esi,esi
c0004333:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000433a:	75 07                	jne    c0004343 <f_lseek+0x54>
c000433c:	31 f6                	xor    esi,esi
c000433e:	e9 e2 00 00 00       	jmp    c0004425 <f_lseek+0x136>
c0004343:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004347:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000434b:	c1 e7 09             	shl    edi,0x9
c000434e:	85 c9                	test   ecx,ecx
c0004350:	74 28                	je     c000437a <f_lseek+0x8b>
c0004352:	49                   	dec    ecx
c0004353:	31 d2                	xor    edx,edx
c0004355:	8d 46 ff             	lea    eax,[esi-0x1]
c0004358:	f7 f7                	div    edi
c000435a:	31 d2                	xor    edx,edx
c000435c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004360:	89 c8                	mov    eax,ecx
c0004362:	f7 f7                	div    edi
c0004364:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004368:	72 10                	jb     c000437a <f_lseek+0x8b>
c000436a:	89 f8                	mov    eax,edi
c000436c:	f7 d8                	neg    eax
c000436e:	21 c1                	and    ecx,eax
c0004370:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004373:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004376:	29 ce                	sub    esi,ecx
c0004378:	eb 3c                	jmp    c00043b6 <f_lseek+0xc7>
c000437a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000437d:	85 c0                	test   eax,eax
c000437f:	75 32                	jne    c00043b3 <f_lseek+0xc4>
c0004381:	31 d2                	xor    edx,edx
c0004383:	89 d8                	mov    eax,ebx
c0004385:	e8 41 ef ff ff       	call   c00032cb <create_chain>
c000438a:	83 f8 01             	cmp    eax,0x1
c000438d:	75 0e                	jne    c000439d <f_lseek+0xae>
c000438f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004393:	bd 02 00 00 00       	mov    ebp,0x2
c0004398:	e9 ef 00 00 00       	jmp    c000448c <f_lseek+0x19d>
c000439d:	83 f8 ff             	cmp    eax,0xffffffff
c00043a0:	75 0e                	jne    c00043b0 <f_lseek+0xc1>
c00043a2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043a6:	bd 01 00 00 00       	mov    ebp,0x1
c00043ab:	e9 dc 00 00 00       	jmp    c000448c <f_lseek+0x19d>
c00043b0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043b3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043b6:	85 c0                	test   eax,eax
c00043b8:	74 82                	je     c000433c <f_lseek+0x4d>
c00043ba:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043bd:	39 fe                	cmp    esi,edi
c00043bf:	76 3d                	jbe    c00043fe <f_lseek+0x10f>
c00043c1:	01 fa                	add    edx,edi
c00043c3:	29 fe                	sub    esi,edi
c00043c5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043c8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043cc:	89 c2                	mov    edx,eax
c00043ce:	74 0d                	je     c00043dd <f_lseek+0xee>
c00043d0:	89 d8                	mov    eax,ebx
c00043d2:	e8 f4 ee ff ff       	call   c00032cb <create_chain>
c00043d7:	85 c0                	test   eax,eax
c00043d9:	75 09                	jne    c00043e4 <f_lseek+0xf5>
c00043db:	eb 1f                	jmp    c00043fc <f_lseek+0x10d>
c00043dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043df:	e8 1d ed ff ff       	call   c0003101 <get_fat.isra.2>
c00043e4:	83 f8 ff             	cmp    eax,0xffffffff
c00043e7:	74 b9                	je     c00043a2 <f_lseek+0xb3>
c00043e9:	83 f8 01             	cmp    eax,0x1
c00043ec:	76 a1                	jbe    c000438f <f_lseek+0xa0>
c00043ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043f2:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c00043f5:	76 98                	jbe    c000438f <f_lseek+0xa0>
c00043f7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043fa:	eb be                	jmp    c00043ba <f_lseek+0xcb>
c00043fc:	31 f6                	xor    esi,esi
c00043fe:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004401:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004407:	0f 84 2f ff ff ff    	je     c000433c <f_lseek+0x4d>
c000440d:	89 c2                	mov    edx,eax
c000440f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004413:	e8 3d db ff ff       	call   c0001f55 <clst2sect>
c0004418:	85 c0                	test   eax,eax
c000441a:	0f 84 6f ff ff ff    	je     c000438f <f_lseek+0xa0>
c0004420:	c1 ee 09             	shr    esi,0x9
c0004423:	01 c6                	add    esi,eax
c0004425:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004428:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000442b:	76 07                	jbe    c0004434 <f_lseek+0x145>
c000442d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004430:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004434:	a9 ff 01 00 00       	test   eax,0x1ff
c0004439:	74 51                	je     c000448c <f_lseek+0x19d>
c000443b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000443e:	39 f0                	cmp    eax,esi
c0004440:	74 4a                	je     c000448c <f_lseek+0x19d>
c0004442:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004445:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004449:	79 21                	jns    c000446c <f_lseek+0x17d>
c000444b:	6a 01                	push   0x1
c000444d:	50                   	push   eax
c000444e:	57                   	push   edi
c000444f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004453:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004457:	50                   	push   eax
c0004458:	e8 7d d8 ff ff       	call   c0001cda <disk_write>
c000445d:	83 c4 10             	add    esp,0x10
c0004460:	85 c0                	test   eax,eax
c0004462:	0f 85 3a ff ff ff    	jne    c00043a2 <f_lseek+0xb3>
c0004468:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000446c:	6a 01                	push   0x1
c000446e:	56                   	push   esi
c000446f:	57                   	push   edi
c0004470:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004474:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004478:	50                   	push   eax
c0004479:	e8 46 d8 ff ff       	call   c0001cc4 <disk_read>
c000447e:	83 c4 10             	add    esp,0x10
c0004481:	85 c0                	test   eax,eax
c0004483:	0f 85 19 ff ff ff    	jne    c00043a2 <f_lseek+0xb3>
c0004489:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000448c:	83 c4 2c             	add    esp,0x2c
c000448f:	89 e8                	mov    eax,ebp
c0004491:	5b                   	pop    ebx
c0004492:	5e                   	pop    esi
c0004493:	5f                   	pop    edi
c0004494:	5d                   	pop    ebp
c0004495:	c3                   	ret    

c0004496 <f_opendir>:
c0004496:	56                   	push   esi
c0004497:	b8 09 00 00 00       	mov    eax,0x9
c000449c:	53                   	push   ebx
c000449d:	83 ec 24             	sub    esp,0x24
c00044a0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044a4:	85 db                	test   ebx,ebx
c00044a6:	0f 84 af 00 00 00    	je     c000455b <f_opendir+0xc5>
c00044ac:	31 c9                	xor    ecx,ecx
c00044ae:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044b2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044b6:	e8 cd de ff ff       	call   c0002388 <mount_volume>
c00044bb:	85 c0                	test   eax,eax
c00044bd:	0f 85 92 00 00 00    	jne    c0004555 <f_opendir+0xbf>
c00044c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044c7:	83 ec 0c             	sub    esp,0xc
c00044ca:	89 03                	mov    DWORD PTR [ebx],eax
c00044cc:	68 00 02 00 00       	push   0x200
c00044d1:	e8 86 15 00 00       	call   c0005a5c <ff_memalloc>
c00044d6:	83 c4 10             	add    esp,0x10
c00044d9:	89 c6                	mov    esi,eax
c00044db:	b8 11 00 00 00       	mov    eax,0x11
c00044e0:	85 f6                	test   esi,esi
c00044e2:	74 77                	je     c000455b <f_opendir+0xc5>
c00044e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044e8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044ec:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ef:	89 d8                	mov    eax,ebx
c00044f1:	e8 9c f3 ff ff       	call   c0003892 <follow_path>
c00044f6:	85 c0                	test   eax,eax
c00044f8:	75 37                	jne    c0004531 <f_opendir+0x9b>
c00044fa:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c00044fe:	78 1c                	js     c000451c <f_opendir+0x86>
c0004500:	b8 05 00 00 00       	mov    eax,0x5
c0004505:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004509:	74 26                	je     c0004531 <f_opendir+0x9b>
c000450b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000450e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004512:	8a 00                	mov    al,BYTE PTR [eax]
c0004514:	e8 97 eb ff ff       	call   c00030b0 <ld_clust.isra.0>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004520:	31 d2                	xor    edx,edx
c0004522:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004526:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000452a:	89 d8                	mov    eax,ebx
c000452c:	e8 d2 ec ff ff       	call   c0003203 <dir_sdi>
c0004531:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004535:	83 ec 0c             	sub    esp,0xc
c0004538:	56                   	push   esi
c0004539:	e8 36 15 00 00       	call   c0005a74 <ff_memfree>
c000453e:	83 c4 10             	add    esp,0x10
c0004541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004545:	83 f8 04             	cmp    eax,0x4
c0004548:	74 06                	je     c0004550 <f_opendir+0xba>
c000454a:	85 c0                	test   eax,eax
c000454c:	74 0d                	je     c000455b <f_opendir+0xc5>
c000454e:	eb 05                	jmp    c0004555 <f_opendir+0xbf>
c0004550:	b8 05 00 00 00       	mov    eax,0x5
c0004555:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000455b:	83 c4 24             	add    esp,0x24
c000455e:	5b                   	pop    ebx
c000455f:	5e                   	pop    esi
c0004560:	c3                   	ret    

c0004561 <f_closedir>:
c0004561:	53                   	push   ebx
c0004562:	83 ec 18             	sub    esp,0x18
c0004565:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004569:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000456d:	89 d8                	mov    eax,ebx
c000456f:	e8 17 dc ff ff       	call   c000218b <validate>
c0004574:	85 c0                	test   eax,eax
c0004576:	75 06                	jne    c000457e <f_closedir+0x1d>
c0004578:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000457e:	83 c4 18             	add    esp,0x18
c0004581:	5b                   	pop    ebx
c0004582:	c3                   	ret    

c0004583 <f_readdir>:
c0004583:	57                   	push   edi
c0004584:	56                   	push   esi
c0004585:	53                   	push   ebx
c0004586:	83 ec 20             	sub    esp,0x20
c0004589:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000458d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004591:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004595:	89 d8                	mov    eax,ebx
c0004597:	e8 ef db ff ff       	call   c000218b <validate>
c000459c:	85 c0                	test   eax,eax
c000459e:	75 6e                	jne    c000460e <f_readdir+0x8b>
c00045a0:	85 ff                	test   edi,edi
c00045a2:	75 0b                	jne    c00045af <f_readdir+0x2c>
c00045a4:	31 d2                	xor    edx,edx
c00045a6:	89 d8                	mov    eax,ebx
c00045a8:	e8 56 ec ff ff       	call   c0003203 <dir_sdi>
c00045ad:	eb 5f                	jmp    c000460e <f_readdir+0x8b>
c00045af:	83 ec 0c             	sub    esp,0xc
c00045b2:	68 00 02 00 00       	push   0x200
c00045b7:	e8 a0 14 00 00       	call   c0005a5c <ff_memalloc>
c00045bc:	83 c4 10             	add    esp,0x10
c00045bf:	89 c6                	mov    esi,eax
c00045c1:	b8 11 00 00 00       	mov    eax,0x11
c00045c6:	85 f6                	test   esi,esi
c00045c8:	74 44                	je     c000460e <f_readdir+0x8b>
c00045ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045ce:	31 d2                	xor    edx,edx
c00045d0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045d3:	89 d8                	mov    eax,ebx
c00045d5:	e8 1a f0 ff ff       	call   c00035f4 <dir_read>
c00045da:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045df:	75 19                	jne    c00045fa <f_readdir+0x77>
c00045e1:	89 fa                	mov    edx,edi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 e2 e8 ff ff       	call   c0002ecc <get_fileinfo>
c00045ea:	31 d2                	xor    edx,edx
c00045ec:	89 d8                	mov    eax,ebx
c00045ee:	e8 9b ee ff ff       	call   c000348e <dir_next>
c00045f3:	83 f8 04             	cmp    eax,0x4
c00045f6:	75 02                	jne    c00045fa <f_readdir+0x77>
c00045f8:	31 c0                	xor    eax,eax
c00045fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00045fe:	83 ec 0c             	sub    esp,0xc
c0004601:	56                   	push   esi
c0004602:	e8 6d 14 00 00       	call   c0005a74 <ff_memfree>
c0004607:	83 c4 10             	add    esp,0x10
c000460a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000460e:	83 c4 20             	add    esp,0x20
c0004611:	5b                   	pop    ebx
c0004612:	5e                   	pop    esi
c0004613:	5f                   	pop    edi
c0004614:	c3                   	ret    

c0004615 <f_stat>:
c0004615:	57                   	push   edi
c0004616:	31 c9                	xor    ecx,ecx
c0004618:	56                   	push   esi
c0004619:	53                   	push   ebx
c000461a:	83 ec 30             	sub    esp,0x30
c000461d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004621:	89 e2                	mov    edx,esp
c0004623:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004627:	e8 5c dd ff ff       	call   c0002388 <mount_volume>
c000462c:	89 c3                	mov    ebx,eax
c000462e:	85 c0                	test   eax,eax
c0004630:	75 59                	jne    c000468b <f_stat+0x76>
c0004632:	83 ec 0c             	sub    esp,0xc
c0004635:	bb 11 00 00 00       	mov    ebx,0x11
c000463a:	68 00 02 00 00       	push   0x200
c000463f:	e8 18 14 00 00       	call   c0005a5c <ff_memalloc>
c0004644:	83 c4 10             	add    esp,0x10
c0004647:	89 c6                	mov    esi,eax
c0004649:	85 c0                	test   eax,eax
c000464b:	74 3e                	je     c000468b <f_stat+0x76>
c000464d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004650:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004654:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004657:	89 e0                	mov    eax,esp
c0004659:	e8 34 f2 ff ff       	call   c0003892 <follow_path>
c000465e:	89 c3                	mov    ebx,eax
c0004660:	85 c0                	test   eax,eax
c0004662:	75 1b                	jne    c000467f <f_stat+0x6a>
c0004664:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004669:	78 0f                	js     c000467a <f_stat+0x65>
c000466b:	85 ff                	test   edi,edi
c000466d:	74 10                	je     c000467f <f_stat+0x6a>
c000466f:	89 fa                	mov    edx,edi
c0004671:	89 e0                	mov    eax,esp
c0004673:	e8 54 e8 ff ff       	call   c0002ecc <get_fileinfo>
c0004678:	eb 05                	jmp    c000467f <f_stat+0x6a>
c000467a:	bb 06 00 00 00       	mov    ebx,0x6
c000467f:	83 ec 0c             	sub    esp,0xc
c0004682:	56                   	push   esi
c0004683:	e8 ec 13 00 00       	call   c0005a74 <ff_memfree>
c0004688:	83 c4 10             	add    esp,0x10
c000468b:	83 c4 30             	add    esp,0x30
c000468e:	89 d8                	mov    eax,ebx
c0004690:	5b                   	pop    ebx
c0004691:	5e                   	pop    esi
c0004692:	5f                   	pop    edi
c0004693:	c3                   	ret    

c0004694 <f_getfree>:
c0004694:	55                   	push   ebp
c0004695:	31 c9                	xor    ecx,ecx
c0004697:	57                   	push   edi
c0004698:	56                   	push   esi
c0004699:	53                   	push   ebx
c000469a:	83 ec 2c             	sub    esp,0x2c
c000469d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046a1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046a5:	e8 de dc ff ff       	call   c0002388 <mount_volume>
c00046aa:	89 c7                	mov    edi,eax
c00046ac:	85 c0                	test   eax,eax
c00046ae:	0f 85 d8 00 00 00    	jne    c000478c <f_getfree+0xf8>
c00046b4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046b8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046bc:	89 30                	mov    DWORD PTR [eax],esi
c00046be:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046c1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046c4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046c7:	39 d0                	cmp    eax,edx
c00046c9:	77 0b                	ja     c00046d6 <f_getfree+0x42>
c00046cb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046cf:	89 01                	mov    DWORD PTR [ecx],eax
c00046d1:	e9 b6 00 00 00       	jmp    c000478c <f_getfree+0xf8>
c00046d6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046d9:	75 29                	jne    c0004704 <f_getfree+0x70>
c00046db:	bd 02 00 00 00       	mov    ebp,0x2
c00046e0:	31 db                	xor    ebx,ebx
c00046e2:	89 ea                	mov    edx,ebp
c00046e4:	89 f0                	mov    eax,esi
c00046e6:	e8 16 ea ff ff       	call   c0003101 <get_fat.isra.2>
c00046eb:	83 f8 ff             	cmp    eax,0xffffffff
c00046ee:	74 7b                	je     c000476b <f_getfree+0xd7>
c00046f0:	83 f8 01             	cmp    eax,0x1
c00046f3:	74 7d                	je     c0004772 <f_getfree+0xde>
c00046f5:	83 d3 00             	adc    ebx,0x0
c00046f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00046fc:	45                   	inc    ebp
c00046fd:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004700:	77 e0                	ja     c00046e2 <f_getfree+0x4e>
c0004702:	eb 77                	jmp    c000477b <f_getfree+0xe7>
c0004704:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004707:	31 db                	xor    ebx,ebx
c0004709:	31 f6                	xor    esi,esi
c000470b:	85 f6                	test   esi,esi
c000470d:	75 18                	jne    c0004727 <f_getfree+0x93>
c000470f:	8d 42 01             	lea    eax,[edx+0x1]
c0004712:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004716:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000471a:	e8 16 db ff ff       	call   c0002235 <move_window>
c000471f:	85 c0                	test   eax,eax
c0004721:	75 56                	jne    c0004779 <f_getfree+0xe5>
c0004723:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004727:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000472b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000472f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004733:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004736:	75 11                	jne    c0004749 <f_getfree+0xb5>
c0004738:	e8 d2 d5 ff ff       	call   c0001d0f <ld_word>
c000473d:	66 83 f8 01          	cmp    ax,0x1
c0004741:	83 d3 00             	adc    ebx,0x0
c0004744:	83 c6 02             	add    esi,0x2
c0004747:	eb 13                	jmp    c000475c <f_getfree+0xc8>
c0004749:	e8 ce d5 ff ff       	call   c0001d1c <ld_dword>
c000474e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004753:	83 f8 01             	cmp    eax,0x1
c0004756:	83 d3 00             	adc    ebx,0x0
c0004759:	83 c6 04             	add    esi,0x4
c000475c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004762:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004766:	4d                   	dec    ebp
c0004767:	75 a2                	jne    c000470b <f_getfree+0x77>
c0004769:	eb 10                	jmp    c000477b <f_getfree+0xe7>
c000476b:	bf 01 00 00 00       	mov    edi,0x1
c0004770:	eb 09                	jmp    c000477b <f_getfree+0xe7>
c0004772:	bf 02 00 00 00       	mov    edi,0x2
c0004777:	eb 02                	jmp    c000477b <f_getfree+0xe7>
c0004779:	89 c7                	mov    edi,eax
c000477b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000477f:	89 18                	mov    DWORD PTR [eax],ebx
c0004781:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004785:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004788:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000478c:	83 c4 2c             	add    esp,0x2c
c000478f:	89 f8                	mov    eax,edi
c0004791:	5b                   	pop    ebx
c0004792:	5e                   	pop    esi
c0004793:	5f                   	pop    edi
c0004794:	5d                   	pop    ebp
c0004795:	c3                   	ret    

c0004796 <f_truncate>:
c0004796:	56                   	push   esi
c0004797:	53                   	push   ebx
c0004798:	83 ec 14             	sub    esp,0x14
c000479b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000479f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047a3:	89 d8                	mov    eax,ebx
c00047a5:	e8 e1 d9 ff ff       	call   c000218b <validate>
c00047aa:	89 c6                	mov    esi,eax
c00047ac:	85 c0                	test   eax,eax
c00047ae:	0f 85 be 00 00 00    	jne    c0004872 <f_truncate+0xdc>
c00047b4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047b8:	85 f6                	test   esi,esi
c00047ba:	0f 85 b2 00 00 00    	jne    c0004872 <f_truncate+0xdc>
c00047c0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047c4:	0f 84 a3 00 00 00    	je     c000486d <f_truncate+0xd7>
c00047ca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047cd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047d0:	0f 83 9c 00 00 00    	jae    c0004872 <f_truncate+0xdc>
c00047d6:	85 c0                	test   eax,eax
c00047d8:	75 15                	jne    c00047ef <f_truncate+0x59>
c00047da:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047dd:	31 c9                	xor    ecx,ecx
c00047df:	89 d8                	mov    eax,ebx
c00047e1:	e8 1f ec ff ff       	call   c0003405 <remove_chain>
c00047e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047ed:	eb 35                	jmp    c0004824 <f_truncate+0x8e>
c00047ef:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00047f2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00047f4:	e8 08 e9 ff ff       	call   c0003101 <get_fat.isra.2>
c00047f9:	89 c2                	mov    edx,eax
c00047fb:	b8 01 00 00 00       	mov    eax,0x1
c0004800:	83 fa ff             	cmp    edx,0xffffffff
c0004803:	74 1f                	je     c0004824 <f_truncate+0x8e>
c0004805:	b8 02 00 00 00       	mov    eax,0x2
c000480a:	83 fa 01             	cmp    edx,0x1
c000480d:	74 15                	je     c0004824 <f_truncate+0x8e>
c000480f:	31 c0                	xor    eax,eax
c0004811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004815:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004818:	76 0a                	jbe    c0004824 <f_truncate+0x8e>
c000481a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000481d:	89 d8                	mov    eax,ebx
c000481f:	e8 e1 eb ff ff       	call   c0003405 <remove_chain>
c0004824:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004827:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000482a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000482d:	83 ca 40             	or     edx,0x40
c0004830:	85 c0                	test   eax,eax
c0004832:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004835:	75 2f                	jne    c0004866 <f_truncate+0xd0>
c0004837:	84 d2                	test   dl,dl
c0004839:	79 37                	jns    c0004872 <f_truncate+0xdc>
c000483b:	6a 01                	push   0x1
c000483d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004840:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004843:	50                   	push   eax
c0004844:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004848:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000484c:	50                   	push   eax
c000484d:	e8 88 d4 ff ff       	call   c0001cda <disk_write>
c0004852:	83 c4 10             	add    esp,0x10
c0004855:	85 c0                	test   eax,eax
c0004857:	75 08                	jne    c0004861 <f_truncate+0xcb>
c0004859:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000485d:	31 f6                	xor    esi,esi
c000485f:	eb 11                	jmp    c0004872 <f_truncate+0xdc>
c0004861:	b8 01 00 00 00       	mov    eax,0x1
c0004866:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004869:	89 c6                	mov    esi,eax
c000486b:	eb 05                	jmp    c0004872 <f_truncate+0xdc>
c000486d:	be 07 00 00 00       	mov    esi,0x7
c0004872:	89 f0                	mov    eax,esi
c0004874:	83 c4 14             	add    esp,0x14
c0004877:	5b                   	pop    ebx
c0004878:	5e                   	pop    esi
c0004879:	c3                   	ret    

c000487a <f_unlink>:
c000487a:	55                   	push   ebp
c000487b:	b9 02 00 00 00       	mov    ecx,0x2
c0004880:	57                   	push   edi
c0004881:	56                   	push   esi
c0004882:	53                   	push   ebx
c0004883:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004889:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000488d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004894:	e8 ef da ff ff       	call   c0002388 <mount_volume>
c0004899:	85 c0                	test   eax,eax
c000489b:	0f 85 f0 00 00 00    	jne    c0004991 <f_unlink+0x117>
c00048a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048a5:	83 ec 0c             	sub    esp,0xc
c00048a8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048ac:	68 00 02 00 00       	push   0x200
c00048b1:	e8 a6 11 00 00       	call   c0005a5c <ff_memalloc>
c00048b6:	83 c4 10             	add    esp,0x10
c00048b9:	89 c3                	mov    ebx,eax
c00048bb:	b8 11 00 00 00       	mov    eax,0x11
c00048c0:	85 db                	test   ebx,ebx
c00048c2:	0f 84 c9 00 00 00    	je     c0004991 <f_unlink+0x117>
c00048c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048cc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048d3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048d6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048da:	e8 b3 ef ff ff       	call   c0003892 <follow_path>
c00048df:	85 c0                	test   eax,eax
c00048e1:	0f 85 96 00 00 00    	jne    c000497d <f_unlink+0x103>
c00048e7:	b8 06 00 00 00       	mov    eax,0x6
c00048ec:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00048f1:	0f 88 86 00 00 00    	js     c000497d <f_unlink+0x103>
c00048f7:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c00048fc:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004902:	74 07                	je     c000490b <f_unlink+0x91>
c0004904:	b8 07 00 00 00       	mov    eax,0x7
c0004909:	eb 72                	jmp    c000497d <f_unlink+0x103>
c000490b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000490f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004913:	8a 07                	mov    al,BYTE PTR [edi]
c0004915:	e8 96 e7 ff ff       	call   c00030b0 <ld_clust.isra.0>
c000491a:	83 e5 10             	and    ebp,0x10
c000491d:	89 c6                	mov    esi,eax
c000491f:	75 0f                	jne    c0004930 <f_unlink+0xb6>
c0004921:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004925:	e8 e7 ed ff ff       	call   c0003711 <dir_remove>
c000492a:	85 c0                	test   eax,eax
c000492c:	74 2f                	je     c000495d <f_unlink+0xe3>
c000492e:	eb 4d                	jmp    c000497d <f_unlink+0x103>
c0004930:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004934:	31 d2                	xor    edx,edx
c0004936:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000493a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000493e:	e8 c0 e8 ff ff       	call   c0003203 <dir_sdi>
c0004943:	85 c0                	test   eax,eax
c0004945:	75 36                	jne    c000497d <f_unlink+0x103>
c0004947:	31 d2                	xor    edx,edx
c0004949:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494d:	e8 a2 ec ff ff       	call   c00035f4 <dir_read>
c0004952:	85 c0                	test   eax,eax
c0004954:	74 ae                	je     c0004904 <f_unlink+0x8a>
c0004956:	83 f8 04             	cmp    eax,0x4
c0004959:	75 22                	jne    c000497d <f_unlink+0x103>
c000495b:	eb c4                	jmp    c0004921 <f_unlink+0xa7>
c000495d:	85 f6                	test   esi,esi
c000495f:	75 0b                	jne    c000496c <f_unlink+0xf2>
c0004961:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004965:	e8 0b e3 ff ff       	call   c0002c75 <sync_fs>
c000496a:	eb 11                	jmp    c000497d <f_unlink+0x103>
c000496c:	31 c9                	xor    ecx,ecx
c000496e:	89 f2                	mov    edx,esi
c0004970:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004974:	e8 8c ea ff ff       	call   c0003405 <remove_chain>
c0004979:	85 c0                	test   eax,eax
c000497b:	74 e4                	je     c0004961 <f_unlink+0xe7>
c000497d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004981:	83 ec 0c             	sub    esp,0xc
c0004984:	53                   	push   ebx
c0004985:	e8 ea 10 00 00       	call   c0005a74 <ff_memfree>
c000498a:	83 c4 10             	add    esp,0x10
c000498d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004991:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004997:	5b                   	pop    ebx
c0004998:	5e                   	pop    esi
c0004999:	5f                   	pop    edi
c000499a:	5d                   	pop    ebp
c000499b:	c3                   	ret    

c000499c <f_mkdir>:
c000499c:	57                   	push   edi
c000499d:	b9 02 00 00 00       	mov    ecx,0x2
c00049a2:	56                   	push   esi
c00049a3:	53                   	push   ebx
c00049a4:	83 ec 50             	sub    esp,0x50
c00049a7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049ab:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049af:	e8 d4 d9 ff ff       	call   c0002388 <mount_volume>
c00049b4:	89 c3                	mov    ebx,eax
c00049b6:	85 c0                	test   eax,eax
c00049b8:	0f 85 70 01 00 00    	jne    c0004b2e <f_mkdir+0x192>
c00049be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c2:	bb 11 00 00 00       	mov    ebx,0x11
c00049c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049cb:	83 ec 0c             	sub    esp,0xc
c00049ce:	68 00 02 00 00       	push   0x200
c00049d3:	e8 84 10 00 00       	call   c0005a5c <ff_memalloc>
c00049d8:	83 c4 10             	add    esp,0x10
c00049db:	89 c7                	mov    edi,eax
c00049dd:	85 c0                	test   eax,eax
c00049df:	0f 84 49 01 00 00    	je     c0004b2e <f_mkdir+0x192>
c00049e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049e9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049ed:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00049f0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049f4:	e8 99 ee ff ff       	call   c0003892 <follow_path>
c00049f9:	89 c3                	mov    ebx,eax
c00049fb:	85 c0                	test   eax,eax
c00049fd:	74 3e                	je     c0004a3d <f_mkdir+0xa1>
c00049ff:	83 f8 04             	cmp    eax,0x4
c0004a02:	75 3e                	jne    c0004a42 <f_mkdir+0xa6>
c0004a04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a08:	31 d2                	xor    edx,edx
c0004a0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a0e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a12:	e8 b4 e8 ff ff       	call   c00032cb <create_chain>
c0004a17:	89 c6                	mov    esi,eax
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	74 0c                	je     c0004a29 <f_mkdir+0x8d>
c0004a1d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a22:	83 f8 01             	cmp    eax,0x1
c0004a25:	74 07                	je     c0004a2e <f_mkdir+0x92>
c0004a27:	eb 2a                	jmp    c0004a53 <f_mkdir+0xb7>
c0004a29:	bb 07 00 00 00       	mov    ebx,0x7
c0004a2e:	31 c9                	xor    ecx,ecx
c0004a30:	89 f2                	mov    edx,esi
c0004a32:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a36:	e8 ca e9 ff ff       	call   c0003405 <remove_chain>
c0004a3b:	eb 05                	jmp    c0004a42 <f_mkdir+0xa6>
c0004a3d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a42:	83 ec 0c             	sub    esp,0xc
c0004a45:	57                   	push   edi
c0004a46:	e8 29 10 00 00       	call   c0005a74 <ff_memfree>
c0004a4b:	83 c4 10             	add    esp,0x10
c0004a4e:	e9 db 00 00 00       	jmp    c0004b2e <f_mkdir+0x192>
c0004a53:	bb 01 00 00 00       	mov    ebx,0x1
c0004a58:	83 f8 ff             	cmp    eax,0xffffffff
c0004a5b:	74 d1                	je     c0004a2e <f_mkdir+0x92>
c0004a5d:	89 f2                	mov    edx,esi
c0004a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a63:	e8 73 dd ff ff       	call   c00027db <dir_clear>
c0004a68:	89 c3                	mov    ebx,eax
c0004a6a:	85 c0                	test   eax,eax
c0004a6c:	75 c0                	jne    c0004a2e <f_mkdir+0x92>
c0004a6e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a77:	ba 20 00 00 00       	mov    edx,0x20
c0004a7c:	83 c0 34             	add    eax,0x34
c0004a7f:	e8 cc d2 ff ff       	call   c0001d50 <mem_set>
c0004a84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a88:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a8d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004a91:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004a95:	83 c0 4a             	add    eax,0x4a
c0004a98:	e8 9b d2 ff ff       	call   c0001d38 <st_dword>
c0004a9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa1:	89 f1                	mov    ecx,esi
c0004aa3:	8d 50 34             	lea    edx,[eax+0x34]
c0004aa6:	e8 2e e6 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aaf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ab4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab7:	83 c0 54             	add    eax,0x54
c0004aba:	e8 7c d2 ff ff       	call   c0001d3b <mem_cpy>
c0004abf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ac3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ac7:	8d 50 54             	lea    edx,[eax+0x54]
c0004aca:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ace:	e8 06 e6 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004ad3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004adb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004adf:	e8 42 ee ff ff       	call   c0003926 <dir_register>
c0004ae4:	89 c3                	mov    ebx,eax
c0004ae6:	85 c0                	test   eax,eax
c0004ae8:	0f 85 40 ff ff ff    	jne    c0004a2e <f_mkdir+0x92>
c0004aee:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004af2:	ba 00 00 21 50       	mov    edx,0x50210000
c0004af7:	83 c0 16             	add    eax,0x16
c0004afa:	e8 39 d2 ff ff       	call   c0001d38 <st_dword>
c0004aff:	89 f1                	mov    ecx,esi
c0004b01:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b09:	e8 cb e5 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004b0e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b12:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b1a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b22:	e8 4e e1 ff ff       	call   c0002c75 <sync_fs>
c0004b27:	89 c3                	mov    ebx,eax
c0004b29:	e9 14 ff ff ff       	jmp    c0004a42 <f_mkdir+0xa6>
c0004b2e:	83 c4 50             	add    esp,0x50
c0004b31:	89 d8                	mov    eax,ebx
c0004b33:	5b                   	pop    ebx
c0004b34:	5e                   	pop    esi
c0004b35:	5f                   	pop    edi
c0004b36:	c3                   	ret    

c0004b37 <f_rename>:
c0004b37:	57                   	push   edi
c0004b38:	56                   	push   esi
c0004b39:	53                   	push   ebx
c0004b3a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b40:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b47:	e8 f2 d5 ff ff       	call   c000213e <get_ldnumber>
c0004b4c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b51:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b55:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b5c:	e8 27 d8 ff ff       	call   c0002388 <mount_volume>
c0004b61:	85 c0                	test   eax,eax
c0004b63:	0f 85 7a 01 00 00    	jne    c0004ce3 <f_rename+0x1ac>
c0004b69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b6d:	83 ec 0c             	sub    esp,0xc
c0004b70:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b74:	68 00 02 00 00       	push   0x200
c0004b79:	e8 de 0e 00 00       	call   c0005a5c <ff_memalloc>
c0004b7e:	83 c4 10             	add    esp,0x10
c0004b81:	89 c6                	mov    esi,eax
c0004b83:	b8 11 00 00 00       	mov    eax,0x11
c0004b88:	85 f6                	test   esi,esi
c0004b8a:	0f 84 53 01 00 00    	je     c0004ce3 <f_rename+0x1ac>
c0004b90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b94:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004b9e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ba2:	e8 eb ec ff ff       	call   c0003892 <follow_path>
c0004ba7:	85 c0                	test   eax,eax
c0004ba9:	0f 85 20 01 00 00    	jne    c0004ccf <f_rename+0x198>
c0004baf:	b8 06 00 00 00       	mov    eax,0x6
c0004bb4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bb9:	0f 85 10 01 00 00    	jne    c0004ccf <f_rename+0x198>
c0004bbf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bc4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bc8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bcc:	e8 6a d1 ff ff       	call   c0001d3b <mem_cpy>
c0004bd1:	b9 30 00 00 00       	mov    ecx,0x30
c0004bd6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bda:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bde:	e8 58 d1 ff ff       	call   c0001d3b <mem_cpy>
c0004be3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 9f ec ff ff       	call   c0003892 <follow_path>
c0004bf3:	85 c0                	test   eax,eax
c0004bf5:	75 20                	jne    c0004c17 <f_rename+0xe0>
c0004bf7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004bfb:	b8 08 00 00 00       	mov    eax,0x8
c0004c00:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c04:	0f 85 c5 00 00 00    	jne    c0004ccf <f_rename+0x198>
c0004c0a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c0e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c15:	eb 03                	jmp    c0004c1a <f_rename+0xe3>
c0004c17:	83 f8 04             	cmp    eax,0x4
c0004c1a:	0f 85 af 00 00 00    	jne    c0004ccf <f_rename+0x198>
c0004c20:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c24:	e8 fd ec ff ff       	call   c0003926 <dir_register>
c0004c29:	85 c0                	test   eax,eax
c0004c2b:	0f 85 9e 00 00 00    	jne    c0004ccf <f_rename+0x198>
c0004c31:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c38:	b9 13 00 00 00       	mov    ecx,0x13
c0004c3d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c40:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c44:	e8 f2 d0 ff ff       	call   c0001d3b <mem_cpy>
c0004c49:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c4d:	a8 10                	test   al,0x10
c0004c4f:	75 03                	jne    c0004c54 <f_rename+0x11d>
c0004c51:	83 c8 20             	or     eax,0x20
c0004c54:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c63:	74 54                	je     c0004cb9 <f_rename+0x182>
c0004c65:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c69:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c6d:	74 4a                	je     c0004cb9 <f_rename+0x182>
c0004c6f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c73:	89 da                	mov    edx,ebx
c0004c75:	8a 07                	mov    al,BYTE PTR [edi]
c0004c77:	e8 34 e4 ff ff       	call   c00030b0 <ld_clust.isra.0>
c0004c7c:	89 c2                	mov    edx,eax
c0004c7e:	89 f8                	mov    eax,edi
c0004c80:	e8 d0 d2 ff ff       	call   c0001f55 <clst2sect>
c0004c85:	89 c2                	mov    edx,eax
c0004c87:	b8 02 00 00 00       	mov    eax,0x2
c0004c8c:	85 d2                	test   edx,edx
c0004c8e:	74 3f                	je     c0004ccf <f_rename+0x198>
c0004c90:	89 f8                	mov    eax,edi
c0004c92:	e8 9e d5 ff ff       	call   c0002235 <move_window>
c0004c97:	85 c0                	test   eax,eax
c0004c99:	75 34                	jne    c0004ccf <f_rename+0x198>
c0004c9b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c9f:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004ca3:	75 14                	jne    c0004cb9 <f_rename+0x182>
c0004ca5:	8d 50 54             	lea    edx,[eax+0x54]
c0004ca8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cac:	e8 28 e4 ff ff       	call   c00030d9 <st_clust.isra.1>
c0004cb1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cb5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cb9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004cbd:	e8 4f ea ff ff       	call   c0003711 <dir_remove>
c0004cc2:	85 c0                	test   eax,eax
c0004cc4:	75 09                	jne    c0004ccf <f_rename+0x198>
c0004cc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cca:	e8 a6 df ff ff       	call   c0002c75 <sync_fs>
c0004ccf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cd3:	83 ec 0c             	sub    esp,0xc
c0004cd6:	56                   	push   esi
c0004cd7:	e8 98 0d 00 00       	call   c0005a74 <ff_memfree>
c0004cdc:	83 c4 10             	add    esp,0x10
c0004cdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ce3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004ce9:	5b                   	pop    ebx
c0004cea:	5e                   	pop    esi
c0004ceb:	5f                   	pop    edi
c0004cec:	c3                   	ret    

c0004ced <f_chmod>:
c0004ced:	57                   	push   edi
c0004cee:	b9 02 00 00 00       	mov    ecx,0x2
c0004cf3:	56                   	push   esi
c0004cf4:	53                   	push   ebx
c0004cf5:	83 ec 50             	sub    esp,0x50
c0004cf8:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004cfc:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d00:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d04:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d08:	e8 7b d6 ff ff       	call   c0002388 <mount_volume>
c0004d0d:	85 c0                	test   eax,eax
c0004d0f:	75 7e                	jne    c0004d8f <f_chmod+0xa2>
c0004d11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d15:	83 ec 0c             	sub    esp,0xc
c0004d18:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d1c:	68 00 02 00 00       	push   0x200
c0004d21:	e8 36 0d 00 00       	call   c0005a5c <ff_memalloc>
c0004d26:	83 c4 10             	add    esp,0x10
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	b8 11 00 00 00       	mov    eax,0x11
c0004d30:	85 f6                	test   esi,esi
c0004d32:	74 5b                	je     c0004d8f <f_chmod+0xa2>
c0004d34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d38:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d3c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d43:	e8 4a eb ff ff       	call   c0003892 <follow_path>
c0004d48:	85 c0                	test   eax,eax
c0004d4a:	75 2f                	jne    c0004d7b <f_chmod+0x8e>
c0004d4c:	b8 06 00 00 00       	mov    eax,0x6
c0004d51:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d56:	75 23                	jne    c0004d7b <f_chmod+0x8e>
c0004d58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d5c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d5f:	21 fb                	and    ebx,edi
c0004d61:	83 e3 27             	and    ebx,0x27
c0004d64:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d67:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d76:	e8 fa de ff ff       	call   c0002c75 <sync_fs>
c0004d7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7f:	83 ec 0c             	sub    esp,0xc
c0004d82:	56                   	push   esi
c0004d83:	e8 ec 0c 00 00       	call   c0005a74 <ff_memfree>
c0004d88:	83 c4 10             	add    esp,0x10
c0004d8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d8f:	83 c4 50             	add    esp,0x50
c0004d92:	5b                   	pop    ebx
c0004d93:	5e                   	pop    esi
c0004d94:	5f                   	pop    edi
c0004d95:	c3                   	ret    

c0004d96 <f_utime>:
c0004d96:	56                   	push   esi
c0004d97:	b9 02 00 00 00       	mov    ecx,0x2
c0004d9c:	53                   	push   ebx
c0004d9d:	83 ec 54             	sub    esp,0x54
c0004da0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004da4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004da8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dac:	e8 d7 d5 ff ff       	call   c0002388 <mount_volume>
c0004db1:	85 c0                	test   eax,eax
c0004db3:	0f 85 85 00 00 00    	jne    c0004e3e <f_utime+0xa8>
c0004db9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dbd:	83 ec 0c             	sub    esp,0xc
c0004dc0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dc4:	68 00 02 00 00       	push   0x200
c0004dc9:	e8 8e 0c 00 00       	call   c0005a5c <ff_memalloc>
c0004dce:	83 c4 10             	add    esp,0x10
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	b8 11 00 00 00       	mov    eax,0x11
c0004dd8:	85 db                	test   ebx,ebx
c0004dda:	74 62                	je     c0004e3e <f_utime+0xa8>
c0004ddc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004de0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004de4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004de7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004deb:	e8 a2 ea ff ff       	call   c0003892 <follow_path>
c0004df0:	85 c0                	test   eax,eax
c0004df2:	75 36                	jne    c0004e2a <f_utime+0x94>
c0004df4:	b8 06 00 00 00       	mov    eax,0x6
c0004df9:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004dfe:	75 2a                	jne    c0004e2a <f_utime+0x94>
c0004e00:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e04:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e08:	c1 e2 10             	shl    edx,0x10
c0004e0b:	09 c2                	or     edx,eax
c0004e0d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e11:	83 c0 16             	add    eax,0x16
c0004e14:	e8 1f cf ff ff       	call   c0001d38 <st_dword>
c0004e19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e1d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e25:	e8 4b de ff ff       	call   c0002c75 <sync_fs>
c0004e2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e2e:	83 ec 0c             	sub    esp,0xc
c0004e31:	53                   	push   ebx
c0004e32:	e8 3d 0c 00 00       	call   c0005a74 <ff_memfree>
c0004e37:	83 c4 10             	add    esp,0x10
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	83 c4 54             	add    esp,0x54
c0004e41:	5b                   	pop    ebx
c0004e42:	5e                   	pop    esi
c0004e43:	c3                   	ret    

c0004e44 <f_getlabel>:
c0004e44:	55                   	push   ebp
c0004e45:	31 c9                	xor    ecx,ecx
c0004e47:	57                   	push   edi
c0004e48:	56                   	push   esi
c0004e49:	53                   	push   ebx
c0004e4a:	83 ec 5c             	sub    esp,0x5c
c0004e4d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e55:	e8 2e d5 ff ff       	call   c0002388 <mount_volume>
c0004e5a:	89 c6                	mov    esi,eax
c0004e5c:	85 c0                	test   eax,eax
c0004e5e:	0f 85 27 01 00 00    	jne    c0004f8b <f_getlabel+0x147>
c0004e64:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e69:	0f 84 d1 00 00 00    	je     c0004f40 <f_getlabel+0xfc>
c0004e6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e73:	31 d2                	xor    edx,edx
c0004e75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e79:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e81:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e85:	e8 79 e3 ff ff       	call   c0003203 <dir_sdi>
c0004e8a:	85 c0                	test   eax,eax
c0004e8c:	0f 85 a2 00 00 00    	jne    c0004f34 <f_getlabel+0xf0>
c0004e92:	ba 01 00 00 00       	mov    edx,0x1
c0004e97:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e9b:	e8 54 e7 ff ff       	call   c00035f4 <dir_read>
c0004ea0:	85 c0                	test   eax,eax
c0004ea2:	0f 85 8c 00 00 00    	jne    c0004f34 <f_getlabel+0xf0>
c0004ea8:	31 db                	xor    ebx,ebx
c0004eaa:	31 c9                	xor    ecx,ecx
c0004eac:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004eb0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004eb3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004eb8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ebd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ec1:	e8 ca ce ff ff       	call   c0001d90 <dbc_1st>
c0004ec6:	85 c0                	test   eax,eax
c0004ec8:	74 16                	je     c0004ee0 <f_getlabel+0x9c>
c0004eca:	83 ff 0b             	cmp    edi,0xb
c0004ecd:	74 11                	je     c0004ee0 <f_getlabel+0x9c>
c0004ecf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ed4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ed8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004edb:	c1 e0 08             	shl    eax,0x8
c0004ede:	09 c2                	or     edx,eax
c0004ee0:	0f b7 d2             	movzx  edx,dx
c0004ee3:	50                   	push   eax
c0004ee4:	50                   	push   eax
c0004ee5:	68 b5 01 00 00       	push   0x1b5
c0004eea:	52                   	push   edx
c0004eeb:	e8 3c 0c 00 00       	call   c0005b2c <ff_oem2uni>
c0004ef0:	83 c4 10             	add    esp,0x10
c0004ef3:	66 85 c0             	test   ax,ax
c0004ef6:	74 25                	je     c0004f1d <f_getlabel+0xd9>
c0004ef8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004efc:	0f b7 c0             	movzx  eax,ax
c0004eff:	01 da                	add    edx,ebx
c0004f01:	b9 04 00 00 00       	mov    ecx,0x4
c0004f06:	e8 51 cf ff ff       	call   c0001e5c <put_utf>
c0004f0b:	84 c0                	test   al,al
c0004f0d:	74 0e                	je     c0004f1d <f_getlabel+0xd9>
c0004f0f:	0f b6 c0             	movzx  eax,al
c0004f12:	01 c3                	add    ebx,eax
c0004f14:	83 ff 0b             	cmp    edi,0xb
c0004f17:	74 06                	je     c0004f1f <f_getlabel+0xdb>
c0004f19:	89 f9                	mov    ecx,edi
c0004f1b:	eb 8f                	jmp    c0004eac <f_getlabel+0x68>
c0004f1d:	31 db                	xor    ebx,ebx
c0004f1f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f23:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f26:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f2a:	74 14                	je     c0004f40 <f_getlabel+0xfc>
c0004f2c:	4b                   	dec    ebx
c0004f2d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f30:	74 f1                	je     c0004f23 <f_getlabel+0xdf>
c0004f32:	eb 0c                	jmp    c0004f40 <f_getlabel+0xfc>
c0004f34:	83 f8 04             	cmp    eax,0x4
c0004f37:	75 50                	jne    c0004f89 <f_getlabel+0x145>
c0004f39:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f3d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f40:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f45:	74 44                	je     c0004f8b <f_getlabel+0x147>
c0004f47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f4b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f4e:	e8 e2 d2 ff ff       	call   c0002235 <move_window>
c0004f53:	89 c6                	mov    esi,eax
c0004f55:	85 c0                	test   eax,eax
c0004f57:	75 32                	jne    c0004f8b <f_getlabel+0x147>
c0004f59:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f5d:	b8 43 00 00 00       	mov    eax,0x43
c0004f62:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f64:	80 f9 03             	cmp    cl,0x3
c0004f67:	74 0f                	je     c0004f78 <f_getlabel+0x134>
c0004f69:	31 c0                	xor    eax,eax
c0004f6b:	80 f9 04             	cmp    cl,0x4
c0004f6e:	0f 94 c0             	sete   al
c0004f71:	48                   	dec    eax
c0004f72:	83 e0 c3             	and    eax,0xffffffc3
c0004f75:	83 c0 64             	add    eax,0x64
c0004f78:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f7c:	e8 9b cd ff ff       	call   c0001d1c <ld_dword>
c0004f81:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f85:	89 07                	mov    DWORD PTR [edi],eax
c0004f87:	eb 02                	jmp    c0004f8b <f_getlabel+0x147>
c0004f89:	89 c6                	mov    esi,eax
c0004f8b:	83 c4 5c             	add    esp,0x5c
c0004f8e:	89 f0                	mov    eax,esi
c0004f90:	5b                   	pop    ebx
c0004f91:	5e                   	pop    esi
c0004f92:	5f                   	pop    edi
c0004f93:	5d                   	pop    ebp
c0004f94:	c3                   	ret    

c0004f95 <f_setlabel>:
c0004f95:	56                   	push   esi
c0004f96:	b9 02 00 00 00       	mov    ecx,0x2
c0004f9b:	53                   	push   ebx
c0004f9c:	83 ec 54             	sub    esp,0x54
c0004f9f:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fa3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fa7:	e8 dc d3 ff ff       	call   c0002388 <mount_volume>
c0004fac:	89 c6                	mov    esi,eax
c0004fae:	85 c0                	test   eax,eax
c0004fb0:	0f 85 67 01 00 00    	jne    c000511d <f_setlabel+0x188>
c0004fb6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fbb:	ba 20 00 00 00       	mov    edx,0x20
c0004fc0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fc4:	31 db                	xor    ebx,ebx
c0004fc6:	e8 85 cd ff ff       	call   c0001d50 <mem_set>
c0004fcb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fcf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fd2:	76 5b                	jbe    c000502f <f_setlabel+0x9a>
c0004fd4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd8:	e8 b9 cd ff ff       	call   c0001d96 <tchar2uni>
c0004fdd:	3d ff ff 00 00       	cmp    eax,0xffff
c0004fe2:	76 0a                	jbe    c0004fee <f_setlabel+0x59>
c0004fe4:	be 06 00 00 00       	mov    esi,0x6
c0004fe9:	e9 2f 01 00 00       	jmp    c000511d <f_setlabel+0x188>
c0004fee:	83 ec 0c             	sub    esp,0xc
c0004ff1:	50                   	push   eax
c0004ff2:	e8 ad 0b 00 00       	call   c0005ba4 <ff_wtoupper>
c0004ff7:	5a                   	pop    edx
c0004ff8:	59                   	pop    ecx
c0004ff9:	68 b5 01 00 00       	push   0x1b5
c0004ffe:	50                   	push   eax
c0004fff:	e8 88 0a 00 00       	call   c0005a8c <ff_uni2oem>
c0005004:	83 c4 10             	add    esp,0x10
c0005007:	89 c6                	mov    esi,eax
c0005009:	66 85 c0             	test   ax,ax
c000500c:	74 d6                	je     c0004fe4 <f_setlabel+0x4f>
c000500e:	0f b7 d0             	movzx  edx,ax
c0005011:	b8 30 e9 01 c0       	mov    eax,0xc001e930
c0005016:	e8 63 cd ff ff       	call   c0001d7e <chk_chr>
c000501b:	85 c0                	test   eax,eax
c000501d:	75 c5                	jne    c0004fe4 <f_setlabel+0x4f>
c000501f:	66 81 fe ff 00       	cmp    si,0xff
c0005024:	0f 87 c9 00 00 00    	ja     c00050f3 <f_setlabel+0x15e>
c000502a:	e9 e4 00 00 00       	jmp    c0005113 <f_setlabel+0x17e>
c000502f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005034:	74 ae                	je     c0004fe4 <f_setlabel+0x4f>
c0005036:	85 db                	test   ebx,ebx
c0005038:	74 0e                	je     c0005048 <f_setlabel+0xb3>
c000503a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000503d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005042:	75 04                	jne    c0005048 <f_setlabel+0xb3>
c0005044:	89 c3                	mov    ebx,eax
c0005046:	eb ee                	jmp    c0005036 <f_setlabel+0xa1>
c0005048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000504c:	31 d2                	xor    edx,edx
c000504e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005052:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000505a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000505e:	e8 a0 e1 ff ff       	call   c0003203 <dir_sdi>
c0005063:	89 c6                	mov    esi,eax
c0005065:	85 c0                	test   eax,eax
c0005067:	0f 85 b0 00 00 00    	jne    c000511d <f_setlabel+0x188>
c000506d:	ba 01 00 00 00       	mov    edx,0x1
c0005072:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005076:	e8 79 e5 ff ff       	call   c00035f4 <dir_read>
c000507b:	85 c0                	test   eax,eax
c000507d:	75 18                	jne    c0005097 <f_setlabel+0x102>
c000507f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005083:	85 db                	test   ebx,ebx
c0005085:	74 0b                	je     c0005092 <f_setlabel+0xfd>
c0005087:	b9 0b 00 00 00       	mov    ecx,0xb
c000508c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005090:	eb 47                	jmp    c00050d9 <f_setlabel+0x144>
c0005092:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005095:	eb 47                	jmp    c00050de <f_setlabel+0x149>
c0005097:	83 f8 04             	cmp    eax,0x4
c000509a:	75 53                	jne    c00050ef <f_setlabel+0x15a>
c000509c:	85 db                	test   ebx,ebx
c000509e:	74 7d                	je     c000511d <f_setlabel+0x188>
c00050a0:	ba 01 00 00 00       	mov    edx,0x1
c00050a5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a9:	e8 e5 e4 ff ff       	call   c0003593 <dir_alloc>
c00050ae:	89 c6                	mov    esi,eax
c00050b0:	85 c0                	test   eax,eax
c00050b2:	75 69                	jne    c000511d <f_setlabel+0x188>
c00050b4:	b9 20 00 00 00       	mov    ecx,0x20
c00050b9:	31 d2                	xor    edx,edx
c00050bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050bf:	e8 8c cc ff ff       	call   c0001d50 <mem_set>
c00050c4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050c8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050cd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050d1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050d5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d9:	e8 5d cc ff ff       	call   c0001d3b <mem_cpy>
c00050de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050ea:	e8 86 db ff ff       	call   c0002c75 <sync_fs>
c00050ef:	89 c6                	mov    esi,eax
c00050f1:	eb 2a                	jmp    c000511d <f_setlabel+0x188>
c00050f3:	83 fb 09             	cmp    ebx,0x9
c00050f6:	0f 87 e8 fe ff ff    	ja     c0004fe4 <f_setlabel+0x4f>
c00050fc:	89 f0                	mov    eax,esi
c00050fe:	66 c1 e8 08          	shr    ax,0x8
c0005102:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005106:	43                   	inc    ebx
c0005107:	89 f0                	mov    eax,esi
c0005109:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000510d:	43                   	inc    ebx
c000510e:	e9 b8 fe ff ff       	jmp    c0004fcb <f_setlabel+0x36>
c0005113:	83 fb 0a             	cmp    ebx,0xa
c0005116:	76 ef                	jbe    c0005107 <f_setlabel+0x172>
c0005118:	e9 c7 fe ff ff       	jmp    c0004fe4 <f_setlabel+0x4f>
c000511d:	89 f0                	mov    eax,esi
c000511f:	83 c4 54             	add    esp,0x54
c0005122:	5b                   	pop    ebx
c0005123:	5e                   	pop    esi
c0005124:	c3                   	ret    

c0005125 <f_expand>:
c0005125:	55                   	push   ebp
c0005126:	57                   	push   edi
c0005127:	56                   	push   esi
c0005128:	53                   	push   ebx
c0005129:	83 ec 2c             	sub    esp,0x2c
c000512c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005130:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005134:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005138:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000513c:	89 d8                	mov    eax,ebx
c000513e:	e8 48 d0 ff ff       	call   c000218b <validate>
c0005143:	89 c6                	mov    esi,eax
c0005145:	85 c0                	test   eax,eax
c0005147:	0f 85 2e 01 00 00    	jne    c000527b <f_expand+0x156>
c000514d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005151:	85 f6                	test   esi,esi
c0005153:	0f 85 22 01 00 00    	jne    c000527b <f_expand+0x156>
c0005159:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000515e:	75 0a                	jne    c000516a <f_expand+0x45>
c0005160:	be 07 00 00 00       	mov    esi,0x7
c0005165:	e9 11 01 00 00       	jmp    c000527b <f_expand+0x156>
c000516a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000516e:	75 f0                	jne    c0005160 <f_expand+0x3b>
c0005170:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005174:	74 ea                	je     c0005160 <f_expand+0x3b>
c0005176:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000517a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000517e:	c1 e1 09             	shl    ecx,0x9
c0005181:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005184:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005188:	0f 95 c0             	setne  al
c000518b:	31 d2                	xor    edx,edx
c000518d:	0f b6 c0             	movzx  eax,al
c0005190:	89 c7                	mov    edi,eax
c0005192:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005196:	f7 f1                	div    ecx
c0005198:	01 f8                	add    eax,edi
c000519a:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c000519d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051a1:	83 ff 01             	cmp    edi,0x1
c00051a4:	76 05                	jbe    c00051ab <f_expand+0x86>
c00051a6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051a9:	77 05                	ja     c00051b0 <f_expand+0x8b>
c00051ab:	bf 02 00 00 00       	mov    edi,0x2
c00051b0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051b3:	89 fd                	mov    ebp,edi
c00051b5:	31 c9                	xor    ecx,ecx
c00051b7:	89 ea                	mov    edx,ebp
c00051b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051bf:	45                   	inc    ebp
c00051c0:	e8 3c df ff ff       	call   c0003101 <get_fat.isra.2>
c00051c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051c9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051cd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051d0:	77 05                	ja     c00051d7 <f_expand+0xb2>
c00051d2:	bd 02 00 00 00       	mov    ebp,0x2
c00051d7:	83 f8 01             	cmp    eax,0x1
c00051da:	74 20                	je     c00051fc <f_expand+0xd7>
c00051dc:	83 f8 ff             	cmp    eax,0xffffffff
c00051df:	74 22                	je     c0005203 <f_expand+0xde>
c00051e1:	85 c0                	test   eax,eax
c00051e3:	75 09                	jne    c00051ee <f_expand+0xc9>
c00051e5:	41                   	inc    ecx
c00051e6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051ea:	75 07                	jne    c00051f3 <f_expand+0xce>
c00051ec:	eb 1c                	jmp    c000520a <f_expand+0xe5>
c00051ee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00051f1:	31 c9                	xor    ecx,ecx
c00051f3:	39 fd                	cmp    ebp,edi
c00051f5:	75 c0                	jne    c00051b7 <f_expand+0x92>
c00051f7:	e9 64 ff ff ff       	jmp    c0005160 <f_expand+0x3b>
c00051fc:	be 02 00 00 00       	mov    esi,0x2
c0005201:	eb 78                	jmp    c000527b <f_expand+0x156>
c0005203:	be 01 00 00 00       	mov    esi,0x1
c0005208:	eb 71                	jmp    c000527b <f_expand+0x156>
c000520a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000520f:	74 2b                	je     c000523c <f_expand+0x117>
c0005211:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005214:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005218:	85 ed                	test   ebp,ebp
c000521a:	74 24                	je     c0005240 <f_expand+0x11b>
c000521c:	83 c9 ff             	or     ecx,0xffffffff
c000521f:	83 fd 01             	cmp    ebp,0x1
c0005222:	74 03                	je     c0005227 <f_expand+0x102>
c0005224:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005227:	89 fa                	mov    edx,edi
c0005229:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000522d:	e8 59 d4 ff ff       	call   c000268b <put_fat>
c0005232:	85 c0                	test   eax,eax
c0005234:	75 43                	jne    c0005279 <f_expand+0x154>
c0005236:	89 f8                	mov    eax,edi
c0005238:	4d                   	dec    ebp
c0005239:	47                   	inc    edi
c000523a:	eb dc                	jmp    c0005218 <f_expand+0xf3>
c000523c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000523f:	48                   	dec    eax
c0005240:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005244:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005249:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000524c:	74 2d                	je     c000527b <f_expand+0x156>
c000524e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005252:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005255:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005258:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000525c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000525f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005262:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005265:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005268:	39 c8                	cmp    eax,ecx
c000526a:	77 0f                	ja     c000527b <f_expand+0x156>
c000526c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005270:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005274:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005277:	eb 02                	jmp    c000527b <f_expand+0x156>
c0005279:	89 c6                	mov    esi,eax
c000527b:	83 c4 2c             	add    esp,0x2c
c000527e:	89 f0                	mov    eax,esi
c0005280:	5b                   	pop    ebx
c0005281:	5e                   	pop    esi
c0005282:	5f                   	pop    edi
c0005283:	5d                   	pop    ebp
c0005284:	c3                   	ret    

c0005285 <f_mkfs>:
c0005285:	55                   	push   ebp
c0005286:	57                   	push   edi
c0005287:	bf 0b 00 00 00       	mov    edi,0xb
c000528c:	56                   	push   esi
c000528d:	53                   	push   ebx
c000528e:	83 ec 4c             	sub    esp,0x4c
c0005291:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0005295:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c0005299:	8d 44 24 60          	lea    eax,[esp+0x60]
c000529d:	e8 9c ce ff ff       	call   c000213e <get_ldnumber>
c00052a2:	85 c0                	test   eax,eax
c00052a4:	0f 88 a6 07 00 00    	js     c0005a50 <f_mkfs+0x7cb>
c00052aa:	8b 14 85 a0 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcb60]
c00052b1:	85 d2                	test   edx,edx
c00052b3:	74 03                	je     c00052b8 <f_mkfs+0x33>
c00052b5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052b8:	85 db                	test   ebx,ebx
c00052ba:	75 05                	jne    c00052c1 <f_mkfs+0x3c>
c00052bc:	bb 20 e9 01 c0       	mov    ebx,0xc001e920
c00052c1:	83 ec 0c             	sub    esp,0xc
c00052c4:	0f b6 c0             	movzx  eax,al
c00052c7:	bf 03 00 00 00       	mov    edi,0x3
c00052cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052d4:	e8 e8 c9 ff ff       	call   c0001cc1 <disk_initialize>
c00052d9:	83 c4 10             	add    esp,0x10
c00052dc:	a8 01                	test   al,0x1
c00052de:	0f 85 6c 07 00 00    	jne    c0005a50 <f_mkfs+0x7cb>
c00052e4:	bf 0a 00 00 00       	mov    edi,0xa
c00052e9:	a8 04                	test   al,0x4
c00052eb:	0f 85 5f 07 00 00    	jne    c0005a50 <f_mkfs+0x7cb>
c00052f1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00052f4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00052f8:	85 c0                	test   eax,eax
c00052fa:	75 20                	jne    c000531c <f_mkfs+0x97>
c00052fc:	51                   	push   ecx
c00052fd:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005301:	50                   	push   eax
c0005302:	6a 03                	push   0x3
c0005304:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005308:	e8 e3 c9 ff ff       	call   c0001cf0 <disk_ioctl>
c000530d:	83 c4 10             	add    esp,0x10
c0005310:	85 c0                	test   eax,eax
c0005312:	74 08                	je     c000531c <f_mkfs+0x97>
c0005314:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000531c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005320:	8d 42 ff             	lea    eax,[edx-0x1]
c0005323:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005328:	77 04                	ja     c000532e <f_mkfs+0xa9>
c000532a:	85 c2                	test   edx,eax
c000532c:	74 08                	je     c0005336 <f_mkfs+0xb1>
c000532e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005336:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005339:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000533d:	48                   	dec    eax
c000533e:	3c 01                	cmp    al,0x1
c0005340:	76 05                	jbe    c0005347 <f_mkfs+0xc2>
c0005342:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005347:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000534a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000534e:	48                   	dec    eax
c000534f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005354:	77 07                	ja     c000535d <f_mkfs+0xd8>
c0005356:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000535b:	74 08                	je     c0005365 <f_mkfs+0xe0>
c000535d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005365:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005368:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000536e:	77 07                	ja     c0005377 <f_mkfs+0xf2>
c0005370:	8d 47 ff             	lea    eax,[edi-0x1]
c0005373:	85 f8                	test   eax,edi
c0005375:	74 02                	je     c0005379 <f_mkfs+0xf4>
c0005377:	31 ff                	xor    edi,edi
c0005379:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005381:	77 0a                	ja     c000538d <f_mkfs+0x108>
c0005383:	bf 11 00 00 00       	mov    edi,0x11
c0005388:	e9 c3 06 00 00       	jmp    c0005a50 <f_mkfs+0x7cb>
c000538d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000538f:	89 ee                	mov    esi,ebp
c0005391:	85 ed                	test   ebp,ebp
c0005393:	75 1b                	jne    c00053b0 <f_mkfs+0x12b>
c0005395:	83 ec 0c             	sub    esp,0xc
c0005398:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000539c:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053a1:	50                   	push   eax
c00053a2:	e8 b5 06 00 00       	call   c0005a5c <ff_memalloc>
c00053a7:	83 c4 10             	add    esp,0x10
c00053aa:	89 c6                	mov    esi,eax
c00053ac:	85 c0                	test   eax,eax
c00053ae:	74 d3                	je     c0005383 <f_mkfs+0xfe>
c00053b0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053b8:	52                   	push   edx
c00053b9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053bd:	50                   	push   eax
c00053be:	6a 01                	push   0x1
c00053c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053c4:	e8 27 c9 ff ff       	call   c0001cf0 <disk_ioctl>
c00053c9:	83 c4 10             	add    esp,0x10
c00053cc:	85 c0                	test   eax,eax
c00053ce:	0f 85 25 06 00 00    	jne    c00059f9 <f_mkfs+0x774>
c00053d4:	88 d8                	mov    al,bl
c00053d6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053de:	24 08                	and    al,0x8
c00053e0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053e4:	75 18                	jne    c00053fe <f_mkfs+0x179>
c00053e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053ea:	83 f8 3f             	cmp    eax,0x3f
c00053ed:	76 0f                	jbe    c00053fe <f_mkfs+0x179>
c00053ef:	83 e8 3f             	sub    eax,0x3f
c00053f2:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c00053fa:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00053fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005402:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005406:	83 f8 7f             	cmp    eax,0x7f
c0005409:	0f 86 52 02 00 00    	jbe    c0005661 <f_mkfs+0x3dc>
c000540f:	b9 80 00 00 00       	mov    ecx,0x80
c0005414:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000541a:	77 05                	ja     c0005421 <f_mkfs+0x19c>
c000541c:	89 f9                	mov    ecx,edi
c000541e:	c1 e9 09             	shr    ecx,0x9
c0005421:	88 d8                	mov    al,bl
c0005423:	83 e0 01             	and    eax,0x1
c0005426:	80 e3 02             	and    bl,0x2
c0005429:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000542d:	74 0a                	je     c0005439 <f_mkfs+0x1b4>
c000542f:	84 c0                	test   al,al
c0005431:	0f 84 4c 01 00 00    	je     c0005583 <f_mkfs+0x2fe>
c0005437:	eb 38                	jmp    c0005471 <f_mkfs+0x1ec>
c0005439:	bf 13 00 00 00       	mov    edi,0x13
c000543e:	84 c0                	test   al,al
c0005440:	75 2f                	jne    c0005471 <f_mkfs+0x1ec>
c0005442:	e9 c9 05 00 00       	jmp    c0005a10 <f_mkfs+0x78b>
c0005447:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000544c:	0f 85 08 02 00 00    	jne    c000565a <f_mkfs+0x3d5>
c0005452:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005457:	0f 86 e1 01 00 00    	jbe    c000563e <f_mkfs+0x3b9>
c000545d:	85 c9                	test   ecx,ecx
c000545f:	0f 85 bd 05 00 00    	jne    c0005a22 <f_mkfs+0x79d>
c0005465:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005468:	83 f9 40             	cmp    ecx,0x40
c000546b:	0f 87 c1 05 00 00    	ja     c0005a32 <f_mkfs+0x7ad>
c0005471:	89 cf                	mov    edi,ecx
c0005473:	85 c9                	test   ecx,ecx
c0005475:	75 1d                	jne    c0005494 <f_mkfs+0x20f>
c0005477:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000547b:	ba 00 e9 01 c0       	mov    edx,0xc001e900
c0005480:	c1 eb 0c             	shr    ebx,0xc
c0005483:	bf 01 00 00 00       	mov    edi,0x1
c0005488:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000548b:	66 85 c0             	test   ax,ax
c000548e:	0f 85 5f 01 00 00    	jne    c00055f3 <f_mkfs+0x36e>
c0005494:	31 d2                	xor    edx,edx
c0005496:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000549a:	f7 f7                	div    edi
c000549c:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054a1:	0f 86 5e 01 00 00    	jbe    c0005605 <f_mkfs+0x380>
c00054a7:	83 c0 02             	add    eax,0x2
c00054aa:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054af:	01 c0                	add    eax,eax
c00054b1:	05 ff 01 00 00       	add    eax,0x1ff
c00054b6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054be:	c1 e8 09             	shr    eax,0x9
c00054c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054c9:	c1 e0 05             	shl    eax,0x5
c00054cc:	c1 e8 09             	shr    eax,0x9
c00054cf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054d3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054e0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054ec:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c00054f1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00054f5:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c00054f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00054fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005501:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005505:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005509:	f7 d8                	neg    eax
c000550b:	21 c3                	and    ebx,eax
c000550d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005511:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005516:	0f 85 fc 00 00 00    	jne    c0005618 <f_mkfs+0x393>
c000551c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005520:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005524:	89 f8                	mov    eax,edi
c0005526:	c1 e0 04             	shl    eax,0x4
c0005529:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000552d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005531:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005535:	0f 82 26 01 00 00    	jb     c0005661 <f_mkfs+0x3dc>
c000553b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000553f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005543:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005547:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000554c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005550:	29 d0                	sub    eax,edx
c0005552:	31 d2                	xor    edx,edx
c0005554:	f7 f7                	div    edi
c0005556:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000555b:	89 c3                	mov    ebx,eax
c000555d:	0f 85 e4 fe ff ff    	jne    c0005447 <f_mkfs+0x1c2>
c0005563:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005568:	0f 87 02 01 00 00    	ja     c0005670 <f_mkfs+0x3eb>
c000556e:	85 c9                	test   ecx,ecx
c0005570:	0f 85 eb 00 00 00    	jne    c0005661 <f_mkfs+0x3dc>
c0005576:	83 ff 01             	cmp    edi,0x1
c0005579:	0f 86 e2 00 00 00    	jbe    c0005661 <f_mkfs+0x3dc>
c000557f:	89 f9                	mov    ecx,edi
c0005581:	d1 e9                	shr    ecx,1
c0005583:	89 cb                	mov    ebx,ecx
c0005585:	85 c9                	test   ecx,ecx
c0005587:	75 26                	jne    c00055af <f_mkfs+0x32a>
c0005589:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000558d:	ba 10 e9 01 c0       	mov    edx,0xc001e910
c0005592:	c1 eb 11             	shr    ebx,0x11
c0005595:	b9 01 00 00 00       	mov    ecx,0x1
c000559a:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000559d:	66 85 c0             	test   ax,ax
c00055a0:	74 0b                	je     c00055ad <f_mkfs+0x328>
c00055a2:	83 c2 02             	add    edx,0x2
c00055a5:	39 d8                	cmp    eax,ebx
c00055a7:	77 04                	ja     c00055ad <f_mkfs+0x328>
c00055a9:	01 c9                	add    ecx,ecx
c00055ab:	eb ed                	jmp    c000559a <f_mkfs+0x315>
c00055ad:	31 db                	xor    ebx,ebx
c00055af:	31 d2                	xor    edx,edx
c00055b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055b5:	f7 f1                	div    ecx
c00055b7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055be:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055c3:	c1 ea 09             	shr    edx,0x9
c00055c6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055cb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055cf:	0f 87 8c 00 00 00    	ja     c0005661 <f_mkfs+0x3dc>
c00055d5:	89 cf                	mov    edi,ecx
c00055d7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055df:	89 d9                	mov    ecx,ebx
c00055e1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055e9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055ee:	e9 e0 fe ff ff       	jmp    c00054d3 <f_mkfs+0x24e>
c00055f3:	83 c2 02             	add    edx,0x2
c00055f6:	39 d8                	cmp    eax,ebx
c00055f8:	0f 87 96 fe ff ff    	ja     c0005494 <f_mkfs+0x20f>
c00055fe:	01 ff                	add    edi,edi
c0005600:	e9 83 fe ff ff       	jmp    c0005488 <f_mkfs+0x203>
c0005605:	8d 04 40             	lea    eax,[eax+eax*2]
c0005608:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000560d:	40                   	inc    eax
c000560e:	d1 e8                	shr    eax,1
c0005610:	83 c0 03             	add    eax,0x3
c0005613:	e9 99 fe ff ff       	jmp    c00054b1 <f_mkfs+0x22c>
c0005618:	31 d2                	xor    edx,edx
c000561a:	89 d8                	mov    eax,ebx
c000561c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005620:	85 d2                	test   edx,edx
c0005622:	74 09                	je     c000562d <f_mkfs+0x3a8>
c0005624:	4b                   	dec    ebx
c0005625:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005629:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000562d:	89 d8                	mov    eax,ebx
c000562f:	31 d2                	xor    edx,edx
c0005631:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005635:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005639:	e9 e6 fe ff ff       	jmp    c0005524 <f_mkfs+0x29f>
c000563e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005643:	77 2b                	ja     c0005670 <f_mkfs+0x3eb>
c0005645:	85 c9                	test   ecx,ecx
c0005647:	75 18                	jne    c0005661 <f_mkfs+0x3dc>
c0005649:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000564c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005652:	0f 86 19 fe ff ff    	jbe    c0005471 <f_mkfs+0x1ec>
c0005658:	eb 07                	jmp    c0005661 <f_mkfs+0x3dc>
c000565a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000565f:	76 0a                	jbe    c000566b <f_mkfs+0x3e6>
c0005661:	bf 0e 00 00 00       	mov    edi,0xe
c0005666:	e9 a5 03 00 00       	jmp    c0005a10 <f_mkfs+0x78b>
c000566b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005670:	31 d2                	xor    edx,edx
c0005672:	b9 00 02 00 00       	mov    ecx,0x200
c0005677:	89 f0                	mov    eax,esi
c0005679:	e8 d2 c6 ff ff       	call   c0001d50 <mem_set>
c000567e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005683:	ba b2 e8 01 c0       	mov    edx,0xc001e8b2
c0005688:	89 f0                	mov    eax,esi
c000568a:	e8 ac c6 ff ff       	call   c0001d3b <mem_cpy>
c000568f:	8d 46 0b             	lea    eax,[esi+0xb]
c0005692:	ba 00 02 00 00       	mov    edx,0x200
c0005697:	e8 98 c6 ff ff       	call   c0001d34 <st_word>
c000569c:	89 f8                	mov    eax,edi
c000569e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056a3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056a6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056a9:	e8 86 c6 ff ff       	call   c0001d34 <st_word>
c00056ae:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056b2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056b7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ba:	75 08                	jne    c00056c4 <f_mkfs+0x43f>
c00056bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056c8:	8d 46 11             	lea    eax,[esi+0x11]
c00056cb:	e8 64 c6 ff ff       	call   c0001d34 <st_word>
c00056d0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056d4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056da:	77 0a                	ja     c00056e6 <f_mkfs+0x461>
c00056dc:	8d 46 13             	lea    eax,[esi+0x13]
c00056df:	e8 50 c6 ff ff       	call   c0001d34 <st_word>
c00056e4:	eb 08                	jmp    c00056ee <f_mkfs+0x469>
c00056e6:	8d 46 20             	lea    eax,[esi+0x20]
c00056e9:	e8 4a c6 ff ff       	call   c0001d38 <st_dword>
c00056ee:	8d 46 18             	lea    eax,[esi+0x18]
c00056f1:	ba 3f 00 00 00       	mov    edx,0x3f
c00056f6:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c00056fa:	e8 35 c6 ff ff       	call   c0001d34 <st_word>
c00056ff:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005702:	ba ff 00 00 00       	mov    edx,0xff
c0005707:	e8 28 c6 ff ff       	call   c0001d34 <st_word>
c000570c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000570f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005713:	e8 20 c6 ff ff       	call   c0001d38 <st_dword>
c0005718:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000571d:	75 57                	jne    c0005776 <f_mkfs+0x4f1>
c000571f:	8d 46 43             	lea    eax,[esi+0x43]
c0005722:	ba 00 00 21 50       	mov    edx,0x50210000
c0005727:	e8 0c c6 ff ff       	call   c0001d38 <st_dword>
c000572c:	8d 46 24             	lea    eax,[esi+0x24]
c000572f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005733:	e8 00 c6 ff ff       	call   c0001d38 <st_dword>
c0005738:	8d 46 2c             	lea    eax,[esi+0x2c]
c000573b:	ba 02 00 00 00       	mov    edx,0x2
c0005740:	e8 f3 c5 ff ff       	call   c0001d38 <st_dword>
c0005745:	8d 46 30             	lea    eax,[esi+0x30]
c0005748:	ba 01 00 00 00       	mov    edx,0x1
c000574d:	e8 e2 c5 ff ff       	call   c0001d34 <st_word>
c0005752:	8d 46 32             	lea    eax,[esi+0x32]
c0005755:	ba 06 00 00 00       	mov    edx,0x6
c000575a:	e8 d5 c5 ff ff       	call   c0001d34 <st_word>
c000575f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005763:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005767:	8d 46 47             	lea    eax,[esi+0x47]
c000576a:	b9 13 00 00 00       	mov    ecx,0x13
c000576f:	ba be e8 01 c0       	mov    edx,0xc001e8be
c0005774:	eb 2f                	jmp    c00057a5 <f_mkfs+0x520>
c0005776:	8d 46 27             	lea    eax,[esi+0x27]
c0005779:	ba 00 00 21 50       	mov    edx,0x50210000
c000577e:	e8 b5 c5 ff ff       	call   c0001d38 <st_dword>
c0005783:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005788:	8d 46 16             	lea    eax,[esi+0x16]
c000578b:	e8 a4 c5 ff ff       	call   c0001d34 <st_word>
c0005790:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c0005794:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c0005798:	8d 46 2b             	lea    eax,[esi+0x2b]
c000579b:	b9 13 00 00 00       	mov    ecx,0x13
c00057a0:	ba d2 e8 01 c0       	mov    edx,0xc001e8d2
c00057a5:	e8 91 c5 ff ff       	call   c0001d3b <mem_cpy>
c00057aa:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057b0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057b9:	e8 76 c5 ff ff       	call   c0001d34 <st_word>
c00057be:	6a 01                	push   0x1
c00057c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057c4:	56                   	push   esi
c00057c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057c9:	e8 0c c5 ff ff       	call   c0001cda <disk_write>
c00057ce:	83 c4 10             	add    esp,0x10
c00057d1:	85 c0                	test   eax,eax
c00057d3:	0f 85 20 02 00 00    	jne    c00059f9 <f_mkfs+0x774>
c00057d9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057de:	0f 85 98 00 00 00    	jne    c000587c <f_mkfs+0x5f7>
c00057e4:	6a 01                	push   0x1
c00057e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057ea:	83 c0 06             	add    eax,0x6
c00057ed:	50                   	push   eax
c00057ee:	56                   	push   esi
c00057ef:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f3:	e8 e2 c4 ff ff       	call   c0001cda <disk_write>
c00057f8:	b9 00 02 00 00       	mov    ecx,0x200
c00057fd:	31 d2                	xor    edx,edx
c00057ff:	89 f0                	mov    eax,esi
c0005801:	e8 4a c5 ff ff       	call   c0001d50 <mem_set>
c0005806:	ba 52 52 61 41       	mov    edx,0x41615252
c000580b:	89 f0                	mov    eax,esi
c000580d:	e8 26 c5 ff ff       	call   c0001d38 <st_dword>
c0005812:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005818:	ba 72 72 41 61       	mov    edx,0x61417272
c000581d:	e8 16 c5 ff ff       	call   c0001d38 <st_dword>
c0005822:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005825:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000582b:	e8 08 c5 ff ff       	call   c0001d38 <st_dword>
c0005830:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005836:	ba 02 00 00 00       	mov    edx,0x2
c000583b:	e8 f8 c4 ff ff       	call   c0001d38 <st_dword>
c0005840:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005845:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000584b:	e8 e4 c4 ff ff       	call   c0001d34 <st_word>
c0005850:	6a 01                	push   0x1
c0005852:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005856:	83 c0 07             	add    eax,0x7
c0005859:	50                   	push   eax
c000585a:	56                   	push   esi
c000585b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000585f:	e8 76 c4 ff ff       	call   c0001cda <disk_write>
c0005864:	83 c4 20             	add    esp,0x20
c0005867:	6a 01                	push   0x1
c0005869:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000586d:	40                   	inc    eax
c000586e:	50                   	push   eax
c000586f:	56                   	push   esi
c0005870:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005874:	e8 61 c4 ff ff       	call   c0001cda <disk_write>
c0005879:	83 c4 10             	add    esp,0x10
c000587c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005880:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005884:	c1 e8 09             	shr    eax,0x9
c0005887:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000588d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005891:	31 d2                	xor    edx,edx
c0005893:	31 db                	xor    ebx,ebx
c0005895:	89 f0                	mov    eax,esi
c0005897:	e8 b4 c4 ff ff       	call   c0001d50 <mem_set>
c000589c:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058a1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058a9:	0f 94 c3             	sete   bl
c00058ac:	4b                   	dec    ebx
c00058ad:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058b3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058b9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058be:	75 21                	jne    c00058e1 <f_mkfs+0x65c>
c00058c0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 6c c4 ff ff       	call   c0001d38 <st_dword>
c00058cc:	8d 46 04             	lea    eax,[esi+0x4]
c00058cf:	83 ca ff             	or     edx,0xffffffff
c00058d2:	e8 61 c4 ff ff       	call   c0001d38 <st_dword>
c00058d7:	8d 46 08             	lea    eax,[esi+0x8]
c00058da:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058df:	eb 04                	jmp    c00058e5 <f_mkfs+0x660>
c00058e1:	89 da                	mov    edx,ebx
c00058e3:	89 f0                	mov    eax,esi
c00058e5:	e8 4e c4 ff ff       	call   c0001d38 <st_dword>
c00058ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00058f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00058f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00058fa:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00058fe:	76 08                	jbe    c0005908 <f_mkfs+0x683>
c0005900:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005904:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005908:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000590c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005910:	56                   	push   esi
c0005911:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005915:	e8 c0 c3 ff ff       	call   c0001cda <disk_write>
c000591a:	83 c4 10             	add    esp,0x10
c000591d:	85 c0                	test   eax,eax
c000591f:	0f 85 d4 00 00 00    	jne    c00059f9 <f_mkfs+0x774>
c0005925:	b9 00 02 00 00       	mov    ecx,0x200
c000592a:	31 d2                	xor    edx,edx
c000592c:	89 f0                	mov    eax,esi
c000592e:	e8 1d c4 ff ff       	call   c0001d50 <mem_set>
c0005933:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005937:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000593b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000593f:	75 b1                	jne    c00058f2 <f_mkfs+0x66d>
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000594d:	40                   	inc    eax
c000594e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005952:	0f 87 61 ff ff ff    	ja     c00058b9 <f_mkfs+0x634>
c0005958:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000595d:	74 04                	je     c0005963 <f_mkfs+0x6de>
c000595f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005963:	89 fb                	mov    ebx,edi
c0005965:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005969:	76 04                	jbe    c000596f <f_mkfs+0x6ea>
c000596b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000596f:	53                   	push   ebx
c0005970:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005974:	56                   	push   esi
c0005975:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005979:	e8 5c c3 ff ff       	call   c0001cda <disk_write>
c000597e:	83 c4 10             	add    esp,0x10
c0005981:	85 c0                	test   eax,eax
c0005983:	75 74                	jne    c00059f9 <f_mkfs+0x774>
c0005985:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005989:	29 df                	sub    edi,ebx
c000598b:	75 d6                	jne    c0005963 <f_mkfs+0x6de>
c000598d:	b1 0c                	mov    cl,0xc
c000598f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005994:	74 18                	je     c00059ae <f_mkfs+0x729>
c0005996:	b1 06                	mov    cl,0x6
c0005998:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059a0:	77 0c                	ja     c00059ae <f_mkfs+0x729>
c00059a2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059a7:	0f 94 c1             	sete   cl
c00059aa:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059ae:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059b3:	75 2d                	jne    c00059e2 <f_mkfs+0x75d>
c00059b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059b9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059c1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059c5:	0f b6 c9             	movzx  ecx,cl
c00059c8:	83 ec 0c             	sub    esp,0xc
c00059cb:	56                   	push   esi
c00059cc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059d4:	e8 4c d3 ff ff       	call   c0002d25 <create_partition>
c00059d9:	83 c4 10             	add    esp,0x10
c00059dc:	89 c7                	mov    edi,eax
c00059de:	85 c0                	test   eax,eax
c00059e0:	75 2e                	jne    c0005a10 <f_mkfs+0x78b>
c00059e2:	31 ff                	xor    edi,edi
c00059e4:	50                   	push   eax
c00059e5:	6a 00                	push   0x0
c00059e7:	6a 00                	push   0x0
c00059e9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059ed:	e8 fe c2 ff ff       	call   c0001cf0 <disk_ioctl>
c00059f2:	83 c4 10             	add    esp,0x10
c00059f5:	85 c0                	test   eax,eax
c00059f7:	74 17                	je     c0005a10 <f_mkfs+0x78b>
c00059f9:	85 ed                	test   ebp,ebp
c00059fb:	75 0c                	jne    c0005a09 <f_mkfs+0x784>
c00059fd:	83 ec 0c             	sub    esp,0xc
c0005a00:	56                   	push   esi
c0005a01:	e8 6e 00 00 00       	call   c0005a74 <ff_memfree>
c0005a06:	83 c4 10             	add    esp,0x10
c0005a09:	bf 01 00 00 00       	mov    edi,0x1
c0005a0e:	eb 40                	jmp    c0005a50 <f_mkfs+0x7cb>
c0005a10:	85 ed                	test   ebp,ebp
c0005a12:	75 3c                	jne    c0005a50 <f_mkfs+0x7cb>
c0005a14:	83 ec 0c             	sub    esp,0xc
c0005a17:	56                   	push   esi
c0005a18:	e8 57 00 00 00       	call   c0005a74 <ff_memfree>
c0005a1d:	83 c4 10             	add    esp,0x10
c0005a20:	eb 2e                	jmp    c0005a50 <f_mkfs+0x7cb>
c0005a22:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a27:	0f 85 56 fb ff ff    	jne    c0005583 <f_mkfs+0x2fe>
c0005a2d:	e9 2f fc ff ff       	jmp    c0005661 <f_mkfs+0x3dc>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 4c fb ff ff    	jne    c0005589 <f_mkfs+0x304>
c0005a3d:	89 cf                	mov    edi,ecx
c0005a3f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a45:	0f 86 49 fa ff ff    	jbe    c0005494 <f_mkfs+0x20f>
c0005a4b:	e9 11 fc ff ff       	jmp    c0005661 <f_mkfs+0x3dc>
c0005a50:	83 c4 4c             	add    esp,0x4c
c0005a53:	89 f8                	mov    eax,edi
c0005a55:	5b                   	pop    ebx
c0005a56:	5e                   	pop    esi
c0005a57:	5f                   	pop    edi
c0005a58:	5d                   	pop    ebp
c0005a59:	c3                   	ret    
c0005a5a:	66 90                	xchg   ax,ax

c0005a5c <ff_memalloc>:
c0005a5c:	83 ec 0c             	sub    esp,0xc
c0005a5f:	83 ec 0c             	sub    esp,0xc
c0005a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a66:	e8 fa 1d 00 00       	call   c0007865 <malloc>
c0005a6b:	83 c4 10             	add    esp,0x10
c0005a6e:	83 c4 0c             	add    esp,0xc
c0005a71:	c3                   	ret    
c0005a72:	66 90                	xchg   ax,ax

c0005a74 <ff_memfree>:
c0005a74:	83 ec 0c             	sub    esp,0xc
c0005a77:	83 ec 0c             	sub    esp,0xc
c0005a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a7e:	e8 f2 1d 00 00       	call   c0007875 <free>
c0005a83:	83 c4 10             	add    esp,0x10
c0005a86:	90                   	nop
c0005a87:	83 c4 0c             	add    esp,0xc
c0005a8a:	c3                   	ret    
c0005a8b:	90                   	nop

c0005a8c <ff_uni2oem>:
c0005a8c:	83 ec 14             	sub    esp,0x14
c0005a8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005a93:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005a97:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005a9e:	c7 44 24 0c 00 ed 01 c0 	mov    DWORD PTR [esp+0xc],0xc001ed00
c0005aa6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005aab:	77 0b                	ja     c0005ab8 <ff_uni2oem+0x2c>
c0005aad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ab6:	eb 68                	jmp    c0005b20 <ff_uni2oem+0x94>
c0005ab8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ac0:	77 5e                	ja     c0005b20 <ff_uni2oem+0x94>
c0005ac2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ac8:	75 56                	jne    c0005b20 <ff_uni2oem+0x94>
c0005aca:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ad1:	eb 0d                	jmp    c0005ae0 <ff_uni2oem+0x54>
c0005ad3:	90                   	nop
c0005ad4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ad9:	40                   	inc    eax
c0005ada:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005adf:	90                   	nop
c0005ae0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005ae6:	77 24                	ja     c0005b0c <ff_uni2oem+0x80>
c0005ae8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005aed:	25 ff ff 00 00       	and    eax,0xffff
c0005af2:	01 c0                	add    eax,eax
c0005af4:	89 c2                	mov    edx,eax
c0005af6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005afa:	01 d0                	add    eax,edx
c0005afc:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005aff:	25 ff ff 00 00       	and    eax,0xffff
c0005b04:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b08:	75 ca                	jne    c0005ad4 <ff_uni2oem+0x48>
c0005b0a:	66 90                	xchg   ax,ax
c0005b0c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b11:	83 e8 80             	sub    eax,0xffffff80
c0005b14:	25 ff 00 00 00       	and    eax,0xff
c0005b19:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b1e:	66 90                	xchg   ax,ax
c0005b20:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b25:	83 c4 14             	add    esp,0x14
c0005b28:	c3                   	ret    
c0005b29:	8d 76 00             	lea    esi,[esi+0x0]

c0005b2c <ff_oem2uni>:
c0005b2c:	83 ec 18             	sub    esp,0x18
c0005b2f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b37:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b3c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b40:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b47:	c7 44 24 10 00 ed 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ed00
c0005b4f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b55:	77 0d                	ja     c0005b64 <ff_oem2uni+0x38>
c0005b57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b5b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b60:	eb 36                	jmp    c0005b98 <ff_oem2uni+0x6c>
c0005b62:	66 90                	xchg   ax,ax
c0005b64:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b6a:	75 2c                	jne    c0005b98 <ff_oem2uni+0x6c>
c0005b6c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b73:	77 23                	ja     c0005b98 <ff_oem2uni+0x6c>
c0005b75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b79:	25 ff ff 00 00       	and    eax,0xffff
c0005b7e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b83:	01 c0                	add    eax,eax
c0005b85:	89 c2                	mov    edx,eax
c0005b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b8b:	01 d0                	add    eax,edx
c0005b8d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b90:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b95:	8d 76 00             	lea    esi,[esi+0x0]
c0005b98:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005b9d:	83 c4 18             	add    esp,0x18
c0005ba0:	c3                   	ret    
c0005ba1:	8d 76 00             	lea    esi,[esi+0x0]

c0005ba4 <ff_wtoupper>:
c0005ba4:	83 ec 10             	sub    esp,0x10
c0005ba7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005baf:	0f 87 77 01 00 00    	ja     c0005d2c <ff_wtoupper+0x188>
c0005bb5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bb9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bbe:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bc5:	77 09                	ja     c0005bd0 <ff_wtoupper+0x2c>
c0005bc7:	b8 00 eb 01 c0       	mov    eax,0xc001eb00
c0005bcc:	eb 0a                	jmp    c0005bd8 <ff_wtoupper+0x34>
c0005bce:	66 90                	xchg   ax,ax
c0005bd0:	b8 40 ea 01 c0       	mov    eax,0xc001ea40
c0005bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bdc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005be0:	8d 50 02             	lea    edx,[eax+0x2]
c0005be3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005be7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bea:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bef:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005bf5:	0f 84 21 01 00 00    	je     c0005d1c <ff_wtoupper+0x178>
c0005bfb:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c00:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c05:	0f 82 11 01 00 00    	jb     c0005d1c <ff_wtoupper+0x178>
c0005c0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c0f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c16:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c19:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c1e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c23:	66 c1 e8 08          	shr    ax,0x8
c0005c27:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c2c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c33:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c38:	31 d2                	xor    edx,edx
c0005c3a:	66 89 c2             	mov    dx,ax
c0005c3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c41:	31 c9                	xor    ecx,ecx
c0005c43:	66 89 c1             	mov    cx,ax
c0005c46:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c4b:	25 ff ff 00 00       	and    eax,0xffff
c0005c50:	01 c8                	add    eax,ecx
c0005c52:	39 c2                	cmp    edx,eax
c0005c54:	0f 8d 9a 00 00 00    	jge    c0005cf4 <ff_wtoupper+0x150>
c0005c5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c5e:	25 ff ff 00 00       	and    eax,0xffff
c0005c63:	83 f8 08             	cmp    eax,0x8
c0005c66:	0f 87 ac 00 00 00    	ja     c0005d18 <ff_wtoupper+0x174>
c0005c6c:	8b 04 85 00 ea 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe1600]
c0005c73:	ff e0                	jmp    eax
c0005c75:	8d 76 00             	lea    esi,[esi+0x0]
c0005c78:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c7d:	31 d2                	xor    edx,edx
c0005c7f:	66 89 c2             	mov    dx,ax
c0005c82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c86:	25 ff ff 00 00       	and    eax,0xffff
c0005c8b:	29 c2                	sub    edx,eax
c0005c8d:	89 d0                	mov    eax,edx
c0005c8f:	01 c0                	add    eax,eax
c0005c91:	89 c2                	mov    edx,eax
c0005c93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c97:	01 d0                	add    eax,edx
c0005c99:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c9c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ca1:	eb 4d                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ca3:	90                   	nop
c0005ca4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ca9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cad:	83 e0 01             	and    eax,0x1
c0005cb0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cb5:	eb 39                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cb7:	90                   	nop
c0005cb8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cbe:	eb 30                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cc0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cc6:	eb 28                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cc8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cce:	eb 20                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005cd6:	eb 18                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005cd8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cde:	eb 10                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005ce6:	eb 08                	jmp    c0005cf0 <ff_wtoupper+0x14c>
c0005ce8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cef:	90                   	nop
c0005cf0:	eb 26                	jmp    c0005d18 <ff_wtoupper+0x174>
c0005cf2:	66 90                	xchg   ax,ax
c0005cf4:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005cfa:	0f 85 dc fe ff ff    	jne    c0005bdc <ff_wtoupper+0x38>
c0005d00:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d05:	25 ff ff 00 00       	and    eax,0xffff
c0005d0a:	01 c0                	add    eax,eax
c0005d0c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d10:	e9 c7 fe ff ff       	jmp    c0005bdc <ff_wtoupper+0x38>
c0005d15:	8d 76 00             	lea    esi,[esi+0x0]
c0005d18:	90                   	nop
c0005d19:	8d 76 00             	lea    esi,[esi+0x0]
c0005d1c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d21:	25 ff ff 00 00       	and    eax,0xffff
c0005d26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d2a:	66 90                	xchg   ax,ax
c0005d2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d30:	83 c4 10             	add    esp,0x10
c0005d33:	c3                   	ret    

c0005d34 <utf2ucs>:
c0005d34:	57                   	push   edi
c0005d35:	31 c9                	xor    ecx,ecx
c0005d37:	56                   	push   esi
c0005d38:	89 d7                	mov    edi,edx
c0005d3a:	53                   	push   ebx
c0005d3b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d3f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d43:	89 de                	mov    esi,ebx
c0005d45:	c1 fe 08             	sar    esi,0x8
c0005d48:	89 f2                	mov    edx,esi
c0005d4a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d4d:	41                   	inc    ecx
c0005d4e:	85 db                	test   ebx,ebx
c0005d50:	75 e9                	jne    c0005d3b <utf2ucs+0x7>
c0005d52:	5b                   	pop    ebx
c0005d53:	5e                   	pop    esi
c0005d54:	5f                   	pop    edi
c0005d55:	c3                   	ret    

c0005d56 <ucs2utfn>:
c0005d56:	83 e1 fe             	and    ecx,0xfffffffe
c0005d59:	01 d1                	add    ecx,edx
c0005d5b:	39 d1                	cmp    ecx,edx
c0005d5d:	75 04                	jne    c0005d63 <ucs2utfn+0xd>
c0005d5f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d62:	c3                   	ret    
c0005d63:	57                   	push   edi
c0005d64:	56                   	push   esi
c0005d65:	53                   	push   ebx
c0005d66:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d69:	83 c2 02             	add    edx,0x2
c0005d6c:	89 de                	mov    esi,ebx
c0005d6e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d72:	c1 e6 08             	shl    esi,0x8
c0005d75:	09 f3                	or     ebx,esi
c0005d77:	83 fb 3b             	cmp    ebx,0x3b
c0005d7a:	74 51                	je     c0005dcd <ucs2utfn+0x77>
c0005d7c:	83 fb 7f             	cmp    ebx,0x7f
c0005d7f:	7f 05                	jg     c0005d86 <ucs2utfn+0x30>
c0005d81:	88 18                	mov    BYTE PTR [eax],bl
c0005d83:	40                   	inc    eax
c0005d84:	eb 43                	jmp    c0005dc9 <ucs2utfn+0x73>
c0005d86:	89 de                	mov    esi,ebx
c0005d88:	89 df                	mov    edi,ebx
c0005d8a:	c1 fe 06             	sar    esi,0x6
c0005d8d:	83 e7 3f             	and    edi,0x3f
c0005d90:	83 cf 80             	or     edi,0xffffff80
c0005d93:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005d99:	7f 12                	jg     c0005dad <ucs2utfn+0x57>
c0005d9b:	89 f3                	mov    ebx,esi
c0005d9d:	83 c0 02             	add    eax,0x2
c0005da0:	83 cb c0             	or     ebx,0xffffffc0
c0005da3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005da6:	89 fb                	mov    ebx,edi
c0005da8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dab:	eb 1c                	jmp    c0005dc9 <ucs2utfn+0x73>
c0005dad:	c1 fb 0c             	sar    ebx,0xc
c0005db0:	83 e6 3f             	and    esi,0x3f
c0005db3:	83 cb e0             	or     ebx,0xffffffe0
c0005db6:	83 c0 03             	add    eax,0x3
c0005db9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dbc:	89 f3                	mov    ebx,esi
c0005dbe:	83 cb 80             	or     ebx,0xffffff80
c0005dc1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dc4:	89 fb                	mov    ebx,edi
c0005dc6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dc9:	39 d1                	cmp    ecx,edx
c0005dcb:	75 99                	jne    c0005d66 <ucs2utfn+0x10>
c0005dcd:	5b                   	pop    ebx
c0005dce:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005dd1:	5e                   	pop    esi
c0005dd2:	5f                   	pop    edi
c0005dd3:	c3                   	ret    

c0005dd4 <isjoliet>:
c0005dd4:	31 d2                	xor    edx,edx
c0005dd6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005dd9:	75 22                	jne    c0005dfd <isjoliet+0x29>
c0005ddb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005ddf:	75 1c                	jne    c0005dfd <isjoliet+0x29>
c0005de1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005de4:	ba 02 00 00 00       	mov    edx,0x2
c0005de9:	3c 43                	cmp    al,0x43
c0005deb:	74 10                	je     c0005dfd <isjoliet+0x29>
c0005ded:	ba 03 00 00 00       	mov    edx,0x3
c0005df2:	3c 45                	cmp    al,0x45
c0005df4:	74 07                	je     c0005dfd <isjoliet+0x29>
c0005df6:	31 d2                	xor    edx,edx
c0005df8:	3c 40                	cmp    al,0x40
c0005dfa:	0f 94 c2             	sete   dl
c0005dfd:	89 d0                	mov    eax,edx
c0005dff:	c3                   	ret    

c0005e00 <htohl_32>:
c0005e00:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e02:	c3                   	ret    

c0005e03 <iso_733>:
c0005e03:	eb fb                	jmp    c0005e00 <htohl_32>

c0005e05 <bgrad_cache>:
c0005e05:	83 fa 0e             	cmp    edx,0xe
c0005e08:	77 16                	ja     c0005e20 <bgrad_cache+0x1b>
c0005e0a:	53                   	push   ebx
c0005e0b:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e0e:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e12:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e15:	42                   	inc    edx
c0005e16:	83 fa 0f             	cmp    edx,0xf
c0005e19:	75 f3                	jne    c0005e0e <bgrad_cache+0x9>
c0005e1b:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e1e:	5b                   	pop    ebx
c0005e1f:	c3                   	ret    
c0005e20:	c3                   	ret    

c0005e21 <ucscompare>:
c0005e21:	55                   	push   ebp
c0005e22:	57                   	push   edi
c0005e23:	89 c7                	mov    edi,eax
c0005e25:	56                   	push   esi
c0005e26:	89 d6                	mov    esi,edx
c0005e28:	53                   	push   ebx
c0005e29:	31 d2                	xor    edx,edx
c0005e2b:	83 ec 1c             	sub    esp,0x1c
c0005e2e:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e32:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e37:	c1 e3 08             	shl    ebx,0x8
c0005e3a:	09 c3                	or     ebx,eax
c0005e3c:	39 ca                	cmp    edx,ecx
c0005e3e:	7d 42                	jge    c0005e82 <ucscompare+0x61>
c0005e40:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e44:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e49:	c1 e0 08             	shl    eax,0x8
c0005e4c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e50:	09 e8                	or     eax,ebp
c0005e52:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e56:	83 f8 3b             	cmp    eax,0x3b
c0005e59:	74 27                	je     c0005e82 <ucscompare+0x61>
c0005e5b:	83 ec 0c             	sub    esp,0xc
c0005e5e:	50                   	push   eax
c0005e5f:	e8 5c aa ff ff       	call   c00008c0 <tolower>
c0005e64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005e67:	89 c5                	mov    ebp,eax
c0005e69:	e8 52 aa ff ff       	call   c00008c0 <tolower>
c0005e6e:	83 c4 10             	add    esp,0x10
c0005e71:	39 c5                	cmp    ebp,eax
c0005e73:	75 20                	jne    c0005e95 <ucscompare+0x74>
c0005e75:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005e79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005e7d:	83 c2 02             	add    edx,0x2
c0005e80:	eb ac                	jmp    c0005e2e <ucscompare+0xd>
c0005e82:	85 db                	test   ebx,ebx
c0005e84:	0f 95 c2             	setne  dl
c0005e87:	31 c0                	xor    eax,eax
c0005e89:	83 fb 2f             	cmp    ebx,0x2f
c0005e8c:	0f 95 c0             	setne  al
c0005e8f:	21 d0                	and    eax,edx
c0005e91:	f7 d8                	neg    eax
c0005e93:	eb 03                	jmp    c0005e98 <ucscompare+0x77>
c0005e95:	83 c8 ff             	or     eax,0xffffffff
c0005e98:	83 c4 1c             	add    esp,0x1c
c0005e9b:	5b                   	pop    ebx
c0005e9c:	5e                   	pop    esi
c0005e9d:	5f                   	pop    edi
c0005e9e:	5d                   	pop    ebp
c0005e9f:	c3                   	ret    

c0005ea0 <fncompare>:
c0005ea0:	55                   	push   ebp
c0005ea1:	57                   	push   edi
c0005ea2:	89 c7                	mov    edi,eax
c0005ea4:	56                   	push   esi
c0005ea5:	89 ce                	mov    esi,ecx
c0005ea7:	53                   	push   ebx
c0005ea8:	31 db                	xor    ebx,ebx
c0005eaa:	83 ec 1c             	sub    esp,0x1c
c0005ead:	39 d3                	cmp    ebx,edx
c0005eaf:	7d 43                	jge    c0005ef4 <fncompare+0x54>
c0005eb1:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005eb5:	3c 3b                	cmp    al,0x3b
c0005eb7:	74 3b                	je     c0005ef4 <fncompare+0x54>
c0005eb9:	3c 2e                	cmp    al,0x2e
c0005ebb:	75 0e                	jne    c0005ecb <fncompare+0x2b>
c0005ebd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005ec0:	39 d9                	cmp    ecx,ebx
c0005ec2:	74 30                	je     c0005ef4 <fncompare+0x54>
c0005ec4:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005ec9:	74 29                	je     c0005ef4 <fncompare+0x54>
c0005ecb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ecf:	83 ec 0c             	sub    esp,0xc
c0005ed2:	50                   	push   eax
c0005ed3:	e8 e8 a9 ff ff       	call   c00008c0 <tolower>
c0005ed8:	89 c5                	mov    ebp,eax
c0005eda:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005ede:	89 04 24             	mov    DWORD PTR [esp],eax
c0005ee1:	e8 da a9 ff ff       	call   c00008c0 <tolower>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	39 c5                	cmp    ebp,eax
c0005eeb:	75 1d                	jne    c0005f0a <fncompare+0x6a>
c0005eed:	43                   	inc    ebx
c0005eee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005ef2:	eb b9                	jmp    c0005ead <fncompare+0xd>
c0005ef4:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005ef7:	84 d2                	test   dl,dl
c0005ef9:	0f 95 c1             	setne  cl
c0005efc:	31 c0                	xor    eax,eax
c0005efe:	80 fa 2f             	cmp    dl,0x2f
c0005f01:	0f 95 c0             	setne  al
c0005f04:	21 c8                	and    eax,ecx
c0005f06:	f7 d8                	neg    eax
c0005f08:	eb 03                	jmp    c0005f0d <fncompare+0x6d>
c0005f0a:	83 c8 ff             	or     eax,0xffffffff
c0005f0d:	83 c4 1c             	add    esp,0x1c
c0005f10:	5b                   	pop    ebx
c0005f11:	5e                   	pop    esi
c0005f12:	5f                   	pop    edi
c0005f13:	5d                   	pop    ebp
c0005f14:	c3                   	ret    

c0005f15 <bclear_cache>:
c0005f15:	83 ec 18             	sub    esp,0x18
c0005f18:	68 00 ee 01 c0       	push   0xc001ee00
c0005f1d:	e8 76 29 01 00       	call   c0018898 <iso_kprintf>
c0005f22:	83 c4 10             	add    esp,0x10
c0005f25:	31 c0                	xor    eax,eax
c0005f27:	8b 14 85 20 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcfe0]
c0005f2e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f34:	8b 14 85 80 30 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcf80]
c0005f3b:	40                   	inc    eax
c0005f3c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005f42:	83 f8 10             	cmp    eax,0x10
c0005f45:	75 e0                	jne    c0005f27 <bclear_cache+0x12>
c0005f47:	83 c4 0c             	add    esp,0xc
c0005f4a:	c3                   	ret    

c0005f4b <bclear>:
c0005f4b:	eb c8                	jmp    c0005f15 <bclear_cache>

c0005f4d <iso_break_all>:
c0005f4d:	83 ec 18             	sub    esp,0x18
c0005f50:	68 0e ee 01 c0       	push   0xc001ee0e
c0005f55:	e8 3e 29 01 00       	call   c0018898 <iso_kprintf>
c0005f5a:	83 c4 10             	add    esp,0x10
c0005f5d:	31 c0                	xor    eax,eax
c0005f5f:	c7 80 d0 35 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdca30],0x1
c0005f69:	05 94 00 00 00       	add    eax,0x94
c0005f6e:	3d 40 09 00 00       	cmp    eax,0x940
c0005f73:	75 ea                	jne    c0005f5f <iso_break_all+0x12>
c0005f75:	83 c4 0c             	add    esp,0xc
c0005f78:	c3                   	ret    

c0005f79 <isoReadDiscSector>:
c0005f79:	83 ec 0c             	sub    esp,0xc
c0005f7c:	0f be 05 60 30 02 c0 	movsx  eax,BYTE PTR ds:0xc0023060
c0005f83:	50                   	push   eax
c0005f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f90:	e8 a7 28 01 00       	call   c001883c <isoReadDiscSectorHelper>
c0005f95:	83 c4 1c             	add    esp,0x1c
c0005f98:	c3                   	ret    

c0005f99 <bread_cache>:
c0005f99:	55                   	push   ebp
c0005f9a:	57                   	push   edi
c0005f9b:	89 d7                	mov    edi,edx
c0005f9d:	56                   	push   esi
c0005f9e:	ba 0f 00 00 00       	mov    edx,0xf
c0005fa3:	53                   	push   ebx
c0005fa4:	89 c6                	mov    esi,eax
c0005fa6:	83 ec 0c             	sub    esp,0xc
c0005fa9:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005fac:	39 38                	cmp    DWORD PTR [eax],edi
c0005fae:	74 3c                	je     c0005fec <bread_cache+0x53>
c0005fb0:	4a                   	dec    edx
c0005fb1:	83 fa ff             	cmp    edx,0xffffffff
c0005fb4:	75 f3                	jne    c0005fa9 <bread_cache+0x10>
c0005fb6:	31 db                	xor    ebx,ebx
c0005fb8:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fbb:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fbe:	74 08                	je     c0005fc8 <bread_cache+0x2f>
c0005fc0:	43                   	inc    ebx
c0005fc1:	83 fb 10             	cmp    ebx,0x10
c0005fc4:	75 f2                	jne    c0005fb8 <bread_cache+0x1f>
c0005fc6:	31 db                	xor    ebx,ebx
c0005fc8:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fcb:	50                   	push   eax
c0005fcc:	6a 01                	push   0x1
c0005fce:	57                   	push   edi
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	83 c0 04             	add    eax,0x4
c0005fd5:	50                   	push   eax
c0005fd6:	e8 9e ff ff ff       	call   c0005f79 <isoReadDiscSector>
c0005fdb:	83 c4 10             	add    esp,0x10
c0005fde:	83 c9 ff             	or     ecx,0xffffffff
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	78 13                	js     c0005ff8 <bread_cache+0x5f>
c0005fe5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fe8:	89 da                	mov    edx,ebx
c0005fea:	89 38                	mov    DWORD PTR [eax],edi
c0005fec:	89 f0                	mov    eax,esi
c0005fee:	e8 12 fe ff ff       	call   c0005e05 <bgrad_cache>
c0005ff3:	b9 0f 00 00 00       	mov    ecx,0xf
c0005ff8:	83 c4 0c             	add    esp,0xc
c0005ffb:	89 c8                	mov    eax,ecx
c0005ffd:	5b                   	pop    ebx
c0005ffe:	5e                   	pop    esi
c0005fff:	5f                   	pop    edi
c0006000:	5d                   	pop    ebp
c0006001:	c3                   	ret    

c0006002 <biread>:
c0006002:	89 c2                	mov    edx,eax
c0006004:	b8 80 30 02 c0       	mov    eax,0xc0023080
c0006009:	eb 8e                	jmp    c0005f99 <bread_cache>

c000600b <bdread>:
c000600b:	89 c2                	mov    edx,eax
c000600d:	b8 20 30 02 c0       	mov    eax,0xc0023020
c0006012:	eb 85                	jmp    c0005f99 <bread_cache>

c0006014 <strnicmp>:
c0006014:	55                   	push   ebp
c0006015:	57                   	push   edi
c0006016:	56                   	push   esi
c0006017:	31 f6                	xor    esi,esi
c0006019:	53                   	push   ebx
c000601a:	83 ec 0c             	sub    esp,0xc
c000601d:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0006021:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c0006025:	74 42                	je     c0006069 <strnicmp+0x55>
c0006027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000602b:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c000602f:	84 c0                	test   al,al
c0006031:	74 36                	je     c0006069 <strnicmp+0x55>
c0006033:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006036:	84 d2                	test   dl,dl
c0006038:	74 2f                	je     c0006069 <strnicmp+0x55>
c000603a:	38 d0                	cmp    al,dl
c000603c:	8d 6e 01             	lea    ebp,[esi+0x1]
c000603f:	75 04                	jne    c0006045 <strnicmp+0x31>
c0006041:	89 ee                	mov    esi,ebp
c0006043:	eb dc                	jmp    c0006021 <strnicmp+0xd>
c0006045:	83 ec 0c             	sub    esp,0xc
c0006048:	50                   	push   eax
c0006049:	e8 72 a8 ff ff       	call   c00008c0 <tolower>
c000604e:	89 c7                	mov    edi,eax
c0006050:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c0006054:	89 ee                	mov    esi,ebp
c0006056:	89 04 24             	mov    DWORD PTR [esp],eax
c0006059:	e8 62 a8 ff ff       	call   c00008c0 <tolower>
c000605e:	83 c4 10             	add    esp,0x10
c0006061:	29 c7                	sub    edi,eax
c0006063:	89 f8                	mov    eax,edi
c0006065:	74 ba                	je     c0006021 <strnicmp+0xd>
c0006067:	eb 02                	jmp    c000606b <strnicmp+0x57>
c0006069:	31 c0                	xor    eax,eax
c000606b:	83 c4 0c             	add    esp,0xc
c000606e:	5b                   	pop    ebx
c000606f:	5e                   	pop    esi
c0006070:	5f                   	pop    edi
c0006071:	5d                   	pop    ebp
c0006072:	c3                   	ret    

c0006073 <find_object>:
c0006073:	55                   	push   ebp
c0006074:	89 c5                	mov    ebp,eax
c0006076:	57                   	push   edi
c0006077:	56                   	push   esi
c0006078:	53                   	push   ebx
c0006079:	89 d3                	mov    ebx,edx
c000607b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006081:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006088:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000608c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006090:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006097:	74 0b                	je     c00060a4 <find_object+0x31>
c0006099:	89 ea                	mov    edx,ebp
c000609b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000609f:	e8 90 fc ff ff       	call   c0005d34 <utf2ucs>
c00060a4:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00060a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00060ab:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00060b0:	7e 11                	jle    c00060c3 <find_object+0x50>
c00060b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060b6:	e8 47 ff ff ff       	call   c0006002 <biread>
c00060bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060bf:	85 c0                	test   eax,eax
c00060c1:	79 07                	jns    c00060ca <find_object+0x57>
c00060c3:	31 db                	xor    ebx,ebx
c00060c5:	e9 5b 01 00 00       	jmp    c0006225 <find_object+0x1b2>
c00060ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060d2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060d6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060da:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c00060e1:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060e5:	8a 03                	mov    al,BYTE PTR [ebx]
c00060e7:	84 c0                	test   al,al
c00060e9:	75 0e                	jne    c00060f9 <find_object+0x86>
c00060eb:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060ef:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060f7:	eb b2                	jmp    c00060ab <find_object+0x38>
c00060f9:	8b 35 b4 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023eb4
c00060ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006103:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006107:	89 ca                	mov    edx,ecx
c0006109:	85 f6                	test   esi,esi
c000610b:	74 2b                	je     c0006138 <find_object+0xc5>
c000610d:	8d 43 21             	lea    eax,[ebx+0x21]
c0006110:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006114:	e8 08 fd ff ff       	call   c0005e21 <ucscompare>
c0006119:	85 c0                	test   eax,eax
c000611b:	0f 84 c1 00 00 00    	je     c00061e2 <find_object+0x16f>
c0006121:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006124:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006128:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c0006130:	0f 8e dc 00 00 00    	jle    c0006212 <find_object+0x19f>
c0006136:	eb b3                	jmp    c00060eb <find_object+0x78>
c0006138:	0f b6 f0             	movzx  esi,al
c000613b:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c000613f:	29 ce                	sub    esi,ecx
c0006141:	80 e2 01             	and    dl,0x1
c0006144:	74 05                	je     c000614b <find_object+0xd8>
c0006146:	83 ee 21             	sub    esi,0x21
c0006149:	eb 55                	jmp    c00061a0 <find_object+0x12d>
c000614b:	47                   	inc    edi
c000614c:	83 ee 22             	sub    esi,0x22
c000614f:	eb 4f                	jmp    c00061a0 <find_object+0x12d>
c0006151:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006154:	48                   	dec    eax
c0006155:	3c 01                	cmp    al,0x1
c0006157:	77 4c                	ja     c00061a5 <find_object+0x132>
c0006159:	50                   	push   eax
c000615a:	6a 02                	push   0x2
c000615c:	68 1d ee 01 c0       	push   0xc001ee1d
c0006161:	57                   	push   edi
c0006162:	e8 e9 a5 ff ff       	call   c0000750 <strncmp>
c0006167:	83 c4 10             	add    esp,0x10
c000616a:	85 c0                	test   eax,eax
c000616c:	75 2a                	jne    c0006198 <find_object+0x125>
c000616e:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c0006172:	8d 42 fb             	lea    eax,[edx-0x5]
c0006175:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006179:	50                   	push   eax
c000617a:	8d 47 05             	lea    eax,[edi+0x5]
c000617d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0006181:	50                   	push   eax
c0006182:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006186:	50                   	push   eax
c0006187:	e8 94 a4 ff ff       	call   c0000620 <strncpy>
c000618c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006190:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c0006195:	83 c4 10             	add    esp,0x10
c0006198:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c000619c:	29 c6                	sub    esi,eax
c000619e:	01 c7                	add    edi,eax
c00061a0:	83 fe 03             	cmp    esi,0x3
c00061a3:	7f ac                	jg     c0006151 <find_object+0xde>
c00061a5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00061aa:	7e 40                	jle    c00061ec <find_object+0x179>
c00061ac:	51                   	push   ecx
c00061ad:	51                   	push   ecx
c00061ae:	6a 2f                	push   0x2f
c00061b0:	55                   	push   ebp
c00061b1:	e8 6a a5 ff ff       	call   c0000720 <strchr>
c00061b6:	83 c4 10             	add    esp,0x10
c00061b9:	85 c0                	test   eax,eax
c00061bb:	74 04                	je     c00061c1 <find_object+0x14e>
c00061bd:	29 e8                	sub    eax,ebp
c00061bf:	eb 0c                	jmp    c00061cd <find_object+0x15a>
c00061c1:	83 ec 0c             	sub    esp,0xc
c00061c4:	55                   	push   ebp
c00061c5:	e8 66 a3 ff ff       	call   c0000530 <strlen>
c00061ca:	83 c4 10             	add    esp,0x10
c00061cd:	52                   	push   edx
c00061ce:	50                   	push   eax
c00061cf:	55                   	push   ebp
c00061d0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061d4:	50                   	push   eax
c00061d5:	e8 3a fe ff ff       	call   c0006014 <strnicmp>
c00061da:	83 c4 10             	add    esp,0x10
c00061dd:	e9 37 ff ff ff       	jmp    c0006119 <find_object+0xa6>
c00061e2:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061e6:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061ea:	eb 1e                	jmp    c000620a <find_object+0x197>
c00061ec:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061f0:	8d 43 21             	lea    eax,[ebx+0x21]
c00061f3:	89 e9                	mov    ecx,ebp
c00061f5:	e8 a6 fc ff ff       	call   c0005ea0 <fncompare>
c00061fa:	85 c0                	test   eax,eax
c00061fc:	0f 85 1f ff ff ff    	jne    c0006121 <find_object+0xae>
c0006202:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006206:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000620a:	0f 85 11 ff ff ff    	jne    c0006121 <find_object+0xae>
c0006210:	eb 13                	jmp    c0006225 <find_object+0x1b2>
c0006212:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006216:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c000621a:	0f 8f b2 fe ff ff    	jg     c00060d2 <find_object+0x5f>
c0006220:	e9 c6 fe ff ff       	jmp    c00060eb <find_object+0x78>
c0006225:	81 c4 2c 01 00 00    	add    esp,0x12c
c000622b:	89 d8                	mov    eax,ebx
c000622d:	5b                   	pop    ebx
c000622e:	5e                   	pop    esi
c000622f:	5f                   	pop    edi
c0006230:	5d                   	pop    ebp
c0006231:	c3                   	ret    

c0006232 <find_object_path>:
c0006232:	55                   	push   ebp
c0006233:	57                   	push   edi
c0006234:	89 d7                	mov    edi,edx
c0006236:	56                   	push   esi
c0006237:	89 c6                	mov    esi,eax
c0006239:	53                   	push   ebx
c000623a:	89 cb                	mov    ebx,ecx
c000623c:	83 ec 0c             	sub    esp,0xc
c000623f:	50                   	push   eax
c0006240:	50                   	push   eax
c0006241:	6a 2f                	push   0x2f
c0006243:	56                   	push   esi
c0006244:	e8 d7 a4 ff ff       	call   c0000720 <strchr>
c0006249:	83 c4 10             	add    esp,0x10
c000624c:	89 c5                	mov    ebp,eax
c000624e:	85 c0                	test   eax,eax
c0006250:	74 3a                	je     c000628c <find_object_path+0x5a>
c0006252:	39 ee                	cmp    esi,ebp
c0006254:	74 31                	je     c0006287 <find_object_path+0x55>
c0006256:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006259:	e8 a5 fb ff ff       	call   c0005e03 <iso_733>
c000625e:	89 c2                	mov    edx,eax
c0006260:	8d 43 02             	lea    eax,[ebx+0x2]
c0006263:	e8 9b fb ff ff       	call   c0005e03 <iso_733>
c0006268:	83 ec 0c             	sub    esp,0xc
c000626b:	89 c1                	mov    ecx,eax
c000626d:	52                   	push   edx
c000626e:	89 f0                	mov    eax,esi
c0006270:	ba 01 00 00 00       	mov    edx,0x1
c0006275:	e8 f9 fd ff ff       	call   c0006073 <find_object>
c000627a:	83 c4 10             	add    esp,0x10
c000627d:	89 c3                	mov    ebx,eax
c000627f:	85 c0                	test   eax,eax
c0006281:	75 04                	jne    c0006287 <find_object_path+0x55>
c0006283:	31 db                	xor    ebx,ebx
c0006285:	eb 36                	jmp    c00062bd <find_object_path+0x8b>
c0006287:	8d 75 01             	lea    esi,[ebp+0x1]
c000628a:	eb b3                	jmp    c000623f <find_object_path+0xd>
c000628c:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000628f:	74 28                	je     c00062b9 <find_object_path+0x87>
c0006291:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006294:	e8 6a fb ff ff       	call   c0005e03 <iso_733>
c0006299:	89 c2                	mov    edx,eax
c000629b:	8d 43 02             	lea    eax,[ebx+0x2]
c000629e:	e8 60 fb ff ff       	call   c0005e03 <iso_733>
c00062a3:	83 ec 0c             	sub    esp,0xc
c00062a6:	89 c1                	mov    ecx,eax
c00062a8:	52                   	push   edx
c00062a9:	89 f0                	mov    eax,esi
c00062ab:	89 fa                	mov    edx,edi
c00062ad:	e8 c1 fd ff ff       	call   c0006073 <find_object>
c00062b2:	83 c4 10             	add    esp,0x10
c00062b5:	89 c3                	mov    ebx,eax
c00062b7:	eb 04                	jmp    c00062bd <find_object_path+0x8b>
c00062b9:	85 ff                	test   edi,edi
c00062bb:	74 c6                	je     c0006283 <find_object_path+0x51>
c00062bd:	83 c4 0c             	add    esp,0xc
c00062c0:	89 d8                	mov    eax,ebx
c00062c2:	5b                   	pop    ebx
c00062c3:	5e                   	pop    esi
c00062c4:	5f                   	pop    edi
c00062c5:	5d                   	pop    ebp
c00062c6:	c3                   	ret    

c00062c7 <stricmp>:
c00062c7:	57                   	push   edi
c00062c8:	56                   	push   esi
c00062c9:	31 f6                	xor    esi,esi
c00062cb:	53                   	push   ebx
c00062cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d0:	83 ec 0c             	sub    esp,0xc
c00062d3:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062db:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062df:	50                   	push   eax
c00062e0:	e8 bb a5 ff ff       	call   c00008a0 <toupper>
c00062e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e8:	e8 d3 a5 ff ff       	call   c00008c0 <tolower>
c00062ed:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062f0:	89 c3                	mov    ebx,eax
c00062f2:	e8 a9 a5 ff ff       	call   c00008a0 <toupper>
c00062f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00062fa:	e8 c1 a5 ff ff       	call   c00008c0 <tolower>
c00062ff:	83 c4 10             	add    esp,0x10
c0006302:	39 c3                	cmp    ebx,eax
c0006304:	75 05                	jne    c000630b <stricmp+0x44>
c0006306:	46                   	inc    esi
c0006307:	85 db                	test   ebx,ebx
c0006309:	75 c1                	jne    c00062cc <stricmp+0x5>
c000630b:	29 c3                	sub    ebx,eax
c000630d:	89 d8                	mov    eax,ebx
c000630f:	5b                   	pop    ebx
c0006310:	5e                   	pop    esi
c0006311:	5f                   	pop    edi
c0006312:	c3                   	ret    

c0006313 <iso_open>:
c0006313:	57                   	push   edi
c0006314:	31 c0                	xor    eax,eax
c0006316:	56                   	push   esi
c0006317:	b9 80 3e 02 c0       	mov    ecx,0xc0023e80
c000631c:	53                   	push   ebx
c000631d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006322:	0f 95 c0             	setne  al
c0006325:	89 c2                	mov    edx,eax
c0006327:	89 c6                	mov    esi,eax
c0006329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000632d:	e8 00 ff ff ff       	call   c0006232 <find_object_path>
c0006332:	83 ca ff             	or     edx,0xffffffff
c0006335:	85 c0                	test   eax,eax
c0006337:	74 5e                	je     c0006397 <iso_open+0x84>
c0006339:	89 c1                	mov    ecx,eax
c000633b:	31 d2                	xor    edx,edx
c000633d:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006343:	83 bf 40 35 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdcac0],0x0
c000634a:	75 42                	jne    c000638e <iso_open+0x7b>
c000634c:	8d 41 02             	lea    eax,[ecx+0x2]
c000634f:	c7 87 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdcac0],0xffffffff
c0006359:	e8 a5 fa ff ff       	call   c0005e03 <iso_733>
c000635e:	89 b7 44 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcabc],esi
c0006364:	89 87 40 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcac0],eax
c000636a:	c7 87 48 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdcab8],0x0
c0006374:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006377:	e8 87 fa ff ff       	call   c0005e03 <iso_733>
c000637c:	c7 87 d0 35 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdca30],0x0
c0006386:	89 87 4c 35 02 c0    	mov    DWORD PTR [edi-0x3ffdcab4],eax
c000638c:	eb 09                	jmp    c0006397 <iso_open+0x84>
c000638e:	42                   	inc    edx
c000638f:	83 fa 10             	cmp    edx,0x10
c0006392:	75 a9                	jne    c000633d <iso_open+0x2a>
c0006394:	83 ca ff             	or     edx,0xffffffff
c0006397:	5b                   	pop    ebx
c0006398:	89 d0                	mov    eax,edx
c000639a:	5e                   	pop    esi
c000639b:	5f                   	pop    edi
c000639c:	c3                   	ret    

c000639d <iso_close>:
c000639d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063a1:	83 f8 0f             	cmp    eax,0xf
c00063a4:	7f 10                	jg     c00063b6 <iso_close+0x19>
c00063a6:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00063ac:	c7 80 40 35 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdcac0],0x0
c00063b6:	e9 5a fb ff ff       	jmp    c0005f15 <bclear_cache>

c00063bb <iso_read>:
c00063bb:	55                   	push   ebp
c00063bc:	57                   	push   edi
c00063bd:	56                   	push   esi
c00063be:	53                   	push   ebx
c00063bf:	83 ec 1c             	sub    esp,0x1c
c00063c2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063c6:	83 fd 0f             	cmp    ebp,0xf
c00063c9:	7e 0a                	jle    c00063d5 <iso_read+0x1a>
c00063cb:	83 c8 ff             	or     eax,0xffffffff
c00063ce:	89 c2                	mov    edx,eax
c00063d0:	e9 f4 00 00 00       	jmp    c00064c9 <iso_read+0x10e>
c00063d5:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063db:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00063e2:	74 e7                	je     c00063cb <iso_read+0x10>
c00063e4:	8b 95 d0 35 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdca30]
c00063ea:	85 d2                	test   edx,edx
c00063ec:	75 dd                	jne    c00063cb <iso_read+0x10>
c00063ee:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063f3:	0f 84 cd 00 00 00    	je     c00064c6 <iso_read+0x10b>
c00063f9:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c00063ff:	8b 8d 4c 35 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdcab4]
c0006405:	29 c1                	sub    ecx,eax
c0006407:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c000640b:	76 04                	jbe    c0006411 <iso_read+0x56>
c000640d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006411:	85 c9                	test   ecx,ecx
c0006413:	0f 84 ad 00 00 00    	je     c00064c6 <iso_read+0x10b>
c0006419:	89 c6                	mov    esi,eax
c000641b:	bb 00 08 00 00       	mov    ebx,0x800
c0006420:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006426:	c1 e8 0b             	shr    eax,0xb
c0006429:	29 f3                	sub    ebx,esi
c000642b:	03 85 40 35 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdcac0]
c0006431:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006437:	7e 3f                	jle    c0006478 <iso_read+0xbd>
c0006439:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000643f:	75 37                	jne    c0006478 <iso_read+0xbd>
c0006441:	be 20 00 00 00       	mov    esi,0x20
c0006446:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000644c:	7f 05                	jg     c0006453 <iso_read+0x98>
c000644e:	89 ce                	mov    esi,ecx
c0006450:	c1 fe 0b             	sar    esi,0xb
c0006453:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006457:	89 f3                	mov    ebx,esi
c0006459:	c1 e3 0b             	shl    ebx,0xb
c000645c:	52                   	push   edx
c000645d:	56                   	push   esi
c000645e:	50                   	push   eax
c000645f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006463:	e8 11 fb ff ff       	call   c0005f79 <isoReadDiscSector>
c0006468:	83 c4 10             	add    esp,0x10
c000646b:	85 c0                	test   eax,eax
c000646d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006471:	7f 3e                	jg     c00064b1 <iso_read+0xf6>
c0006473:	e9 53 ff ff ff       	jmp    c00063cb <iso_read+0x10>
c0006478:	39 cb                	cmp    ebx,ecx
c000647a:	7e 02                	jle    c000647e <iso_read+0xc3>
c000647c:	89 cb                	mov    ebx,ecx
c000647e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006482:	e8 84 fb ff ff       	call   c000600b <bdread>
c0006487:	85 c0                	test   eax,eax
c0006489:	0f 88 3c ff ff ff    	js     c00063cb <iso_read+0x10>
c000648f:	8b 0c 85 20 30 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcfe0]
c0006496:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000649a:	8b 85 48 35 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdcab8]
c00064a0:	25 ff 07 00 00       	and    eax,0x7ff
c00064a5:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00064a9:	89 d9                	mov    ecx,ebx
c00064ab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00064ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00064b1:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00064b5:	01 9d 48 35 02 c0    	add    DWORD PTR [ebp-0x3ffdcab8],ebx
c00064bb:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064bf:	01 da                	add    edx,ebx
c00064c1:	e9 28 ff ff ff       	jmp    c00063ee <iso_read+0x33>
c00064c6:	89 d0                	mov    eax,edx
c00064c8:	99                   	cdq    
c00064c9:	83 c4 1c             	add    esp,0x1c
c00064cc:	5b                   	pop    ebx
c00064cd:	5e                   	pop    esi
c00064ce:	5f                   	pop    edi
c00064cf:	5d                   	pop    ebp
c00064d0:	c3                   	ret    

c00064d1 <iso_seek>:
c00064d1:	55                   	push   ebp
c00064d2:	83 c8 ff             	or     eax,0xffffffff
c00064d5:	57                   	push   edi
c00064d6:	89 c2                	mov    edx,eax
c00064d8:	56                   	push   esi
c00064d9:	53                   	push   ebx
c00064da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064de:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064e2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064e6:	83 fe 0f             	cmp    esi,0xf
c00064e9:	7f 65                	jg     c0006550 <iso_seek+0x7f>
c00064eb:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064f1:	8d 8d 40 35 02 c0    	lea    ecx,[ebp-0x3ffdcac0]
c00064f7:	83 bd 40 35 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdcac0],0x0
c00064fe:	74 50                	je     c0006550 <iso_seek+0x7f>
c0006500:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006507:	75 47                	jne    c0006550 <iso_seek+0x7f>
c0006509:	83 fb 01             	cmp    ebx,0x1
c000650c:	74 0e                	je     c000651c <iso_seek+0x4b>
c000650e:	83 fb 02             	cmp    ebx,0x2
c0006511:	74 0e                	je     c0006521 <iso_seek+0x50>
c0006513:	85 db                	test   ebx,ebx
c0006515:	75 39                	jne    c0006550 <iso_seek+0x7f>
c0006517:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c000651a:	eb 0d                	jmp    c0006529 <iso_seek+0x58>
c000651c:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000651f:	eb 08                	jmp    c0006529 <iso_seek+0x58>
c0006521:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006524:	01 f8                	add    eax,edi
c0006526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006529:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c000652f:	8b 88 4c 35 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdcab4]
c0006535:	05 40 35 02 c0       	add    eax,0xc0023540
c000653a:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000653d:	76 03                	jbe    c0006542 <iso_seek+0x71>
c000653f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006542:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006548:	8b 82 48 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab8]
c000654e:	31 d2                	xor    edx,edx
c0006550:	5b                   	pop    ebx
c0006551:	5e                   	pop    esi
c0006552:	5f                   	pop    edi
c0006553:	5d                   	pop    ebp
c0006554:	c3                   	ret    

c0006555 <iso_tell>:
c0006555:	83 c8 ff             	or     eax,0xffffffff
c0006558:	53                   	push   ebx
c0006559:	89 c2                	mov    edx,eax
c000655b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000655f:	83 f9 0f             	cmp    ecx,0xf
c0006562:	7f 20                	jg     c0006584 <iso_tell+0x2f>
c0006564:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000656a:	83 bb 40 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdcac0],0x0
c0006571:	74 11                	je     c0006584 <iso_tell+0x2f>
c0006573:	83 bb d0 35 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdca30],0x0
c000657a:	75 08                	jne    c0006584 <iso_tell+0x2f>
c000657c:	8b 83 48 35 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdcab8]
c0006582:	31 d2                	xor    edx,edx
c0006584:	5b                   	pop    ebx
c0006585:	c3                   	ret    

c0006586 <iso_total>:
c0006586:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000658a:	83 c8 ff             	or     eax,0xffffffff
c000658d:	83 fa 0f             	cmp    edx,0xf
c0006590:	7f 1e                	jg     c00065b0 <iso_total+0x2a>
c0006592:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006598:	83 ba 40 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdcac0],0x0
c000659f:	74 0f                	je     c00065b0 <iso_total+0x2a>
c00065a1:	83 ba d0 35 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdca30],0x0
c00065a8:	75 06                	jne    c00065b0 <iso_total+0x2a>
c00065aa:	8b 82 4c 35 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdcab4]
c00065b0:	c3                   	ret    

c00065b1 <fn_postprocess>:
c00065b1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00065b5:	89 d0                	mov    eax,edx
c00065b7:	8a 08                	mov    cl,BYTE PTR [eax]
c00065b9:	80 f9 3b             	cmp    cl,0x3b
c00065bc:	74 07                	je     c00065c5 <fn_postprocess+0x14>
c00065be:	84 c9                	test   cl,cl
c00065c0:	74 03                	je     c00065c5 <fn_postprocess+0x14>
c00065c2:	40                   	inc    eax
c00065c3:	eb f2                	jmp    c00065b7 <fn_postprocess+0x6>
c00065c5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065c8:	39 d0                	cmp    eax,edx
c00065ca:	76 0a                	jbe    c00065d6 <fn_postprocess+0x25>
c00065cc:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065d0:	75 04                	jne    c00065d6 <fn_postprocess+0x25>
c00065d2:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065d6:	c3                   	ret    

c00065d7 <iso_readdir>:
c00065d7:	55                   	push   ebp
c00065d8:	57                   	push   edi
c00065d9:	56                   	push   esi
c00065da:	53                   	push   ebx
c00065db:	83 ec 1c             	sub    esp,0x1c
c00065de:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00065e2:	83 fb 0f             	cmp    ebx,0xf
c00065e5:	7f 28                	jg     c000660f <iso_readdir+0x38>
c00065e7:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00065ed:	8d b8 40 35 02 c0    	lea    edi,[eax-0x3ffdcac0]
c00065f3:	83 b8 40 35 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdcac0],0x0
c00065fa:	74 13                	je     c000660f <iso_readdir+0x38>
c00065fc:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c0006600:	74 0d                	je     c000660f <iso_readdir+0x38>
c0006602:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006609:	0f 84 b1 00 00 00    	je     c00066c0 <iso_readdir+0xe9>
c000660f:	83 ec 0c             	sub    esp,0xc
c0006612:	68 20 ee 01 c0       	push   0xc001ee20
c0006617:	e8 7c 22 01 00       	call   c0018898 <iso_kprintf>
c000661c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000661f:	e8 90 22 01 00       	call   c00188b4 <iso_kprintfd>
c0006624:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000662a:	c7 04 24 25 ee 01 c0 	mov    DWORD PTR [esp],0xc001ee25
c0006631:	e8 62 22 01 00       	call   c0018898 <iso_kprintf>
c0006636:	5d                   	pop    ebp
c0006637:	ff b3 40 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcac0]
c000663d:	e8 72 22 01 00       	call   c00188b4 <iso_kprintfd>
c0006642:	c7 04 24 2b ee 01 c0 	mov    DWORD PTR [esp],0xc001ee2b
c0006649:	e8 4a 22 01 00       	call   c0018898 <iso_kprintf>
c000664e:	58                   	pop    eax
c000664f:	ff b3 44 35 02 c0    	push   DWORD PTR [ebx-0x3ffdcabc]
c0006655:	e8 5a 22 01 00       	call   c00188b4 <iso_kprintfd>
c000665a:	c7 04 24 31 ee 01 c0 	mov    DWORD PTR [esp],0xc001ee31
c0006661:	e8 32 22 01 00       	call   c0018898 <iso_kprintf>
c0006666:	58                   	pop    eax
c0006667:	ff b3 d0 35 02 c0    	push   DWORD PTR [ebx-0x3ffdca30]
c000666d:	e8 42 22 01 00       	call   c00188b4 <iso_kprintfd>
c0006672:	83 c4 10             	add    esp,0x10
c0006675:	eb 42                	jmp    c00066b9 <iso_readdir+0xe2>
c0006677:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000667a:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c0006681:	89 d1                	mov    ecx,edx
c0006683:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006689:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c000668d:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006690:	75 35                	jne    c00066c7 <iso_readdir+0xf0>
c0006692:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006698:	81 c2 00 08 00 00    	add    edx,0x800
c000669e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00066a1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c00066a4:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00066a7:	73 1e                	jae    c00066c7 <iso_readdir+0xf0>
c00066a9:	c1 ea 0b             	shr    edx,0xb
c00066ac:	8b 07                	mov    eax,DWORD PTR [edi]
c00066ae:	01 d0                	add    eax,edx
c00066b0:	e8 4d f9 ff ff       	call   c0006002 <biread>
c00066b5:	85 c0                	test   eax,eax
c00066b7:	79 be                	jns    c0006677 <iso_readdir+0xa0>
c00066b9:	31 c0                	xor    eax,eax
c00066bb:	e9 66 01 00 00       	jmp    c0006826 <iso_readdir+0x24f>
c00066c0:	31 f6                	xor    esi,esi
c00066c2:	83 c8 ff             	or     eax,0xffffffff
c00066c5:	eb da                	jmp    c00066a1 <iso_readdir+0xca>
c00066c7:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00066cd:	8b ba 48 35 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdcab8]
c00066d3:	81 c2 40 35 02 c0    	add    edx,0xc0023540
c00066d9:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00066dc:	73 db                	jae    c00066b9 <iso_readdir+0xe2>
c00066de:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00066e2:	75 34                	jne    c0006718 <iso_readdir+0x141>
c00066e4:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00066e8:	75 2e                	jne    c0006718 <iso_readdir+0x141>
c00066ea:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00066ed:	8b 34 85 80 30 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdcf80]
c00066f4:	01 f9                	add    ecx,edi
c00066f6:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00066f9:	89 c8                	mov    eax,ecx
c00066fb:	25 ff 07 00 00       	and    eax,0x7ff
c0006700:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006705:	01 c8                	add    eax,ecx
c0006707:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000670a:	25 ff 07 00 00       	and    eax,0x7ff
c000670f:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006713:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006716:	74 a1                	je     c00066b9 <iso_readdir+0xe2>
c0006718:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000671e:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006722:	8d 56 21             	lea    edx,[esi+0x21]
c0006725:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006729:	8d a8 58 35 02 c0    	lea    ebp,[eax-0x3ffdcaa8]
c000672f:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c0006736:	74 0c                	je     c0006744 <iso_readdir+0x16d>
c0006738:	89 e8                	mov    eax,ebp
c000673a:	e8 17 f6 ff ff       	call   c0005d56 <ucs2utfn>
c000673f:	e9 a6 00 00 00       	jmp    c00067ea <iso_readdir+0x213>
c0006744:	57                   	push   edi
c0006745:	51                   	push   ecx
c0006746:	52                   	push   edx
c0006747:	55                   	push   ebp
c0006748:	e8 d3 9e ff ff       	call   c0000620 <strncpy>
c000674d:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006751:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006757:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000675a:	c6 84 01 58 35 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdcaa8],0x0
c0006762:	e8 4a fe ff ff       	call   c00065b1 <fn_postprocess>
c0006767:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c000676b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000676e:	83 c4 10             	add    esp,0x10
c0006771:	29 d0                	sub    eax,edx
c0006773:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006777:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c000677b:	74 05                	je     c0006782 <iso_readdir+0x1ab>
c000677d:	83 e8 21             	sub    eax,0x21
c0006780:	eb 04                	jmp    c0006786 <iso_readdir+0x1af>
c0006782:	47                   	inc    edi
c0006783:	83 e8 22             	sub    eax,0x22
c0006786:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000678a:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006790:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006794:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006799:	7e 4f                	jle    c00067ea <iso_readdir+0x213>
c000679b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000679e:	48                   	dec    eax
c000679f:	3c 01                	cmp    al,0x1
c00067a1:	77 47                	ja     c00067ea <iso_readdir+0x213>
c00067a3:	52                   	push   edx
c00067a4:	6a 02                	push   0x2
c00067a6:	68 1d ee 01 c0       	push   0xc001ee1d
c00067ab:	57                   	push   edi
c00067ac:	e8 9f 9f ff ff       	call   c0000750 <strncmp>
c00067b1:	83 c4 10             	add    esp,0x10
c00067b4:	85 c0                	test   eax,eax
c00067b6:	75 26                	jne    c00067de <iso_readdir+0x207>
c00067b8:	50                   	push   eax
c00067b9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067bd:	83 e8 05             	sub    eax,0x5
c00067c0:	50                   	push   eax
c00067c1:	8d 47 05             	lea    eax,[edi+0x5]
c00067c4:	50                   	push   eax
c00067c5:	55                   	push   ebp
c00067c6:	e8 55 9e ff ff       	call   c0000620 <strncpy>
c00067cb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00067cf:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067d3:	83 c4 10             	add    esp,0x10
c00067d6:	c6 84 08 53 35 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdcaad],0x0
c00067de:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00067e2:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00067e6:	01 c7                	add    edi,eax
c00067e8:	eb aa                	jmp    c0006794 <iso_readdir+0x1bd>
c00067ea:	83 c8 ff             	or     eax,0xffffffff
c00067ed:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00067f1:	89 c2                	mov    edx,eax
c00067f3:	75 0a                	jne    c00067ff <iso_readdir+0x228>
c00067f5:	8d 46 0a             	lea    eax,[esi+0xa]
c00067f8:	e8 06 f6 ff ff       	call   c0005e03 <iso_733>
c00067fd:	31 d2                	xor    edx,edx
c00067ff:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006805:	89 83 50 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcab0],eax
c000680b:	89 93 54 35 02 c0    	mov    DWORD PTR [ebx-0x3ffdcaac],edx
c0006811:	81 c3 40 35 02 c0    	add    ebx,0xc0023540
c0006817:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c000681a:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c000681d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006821:	05 50 35 02 c0       	add    eax,0xc0023550
c0006826:	83 c4 1c             	add    esp,0x1c
c0006829:	5b                   	pop    ebx
c000682a:	5e                   	pop    esi
c000682b:	5f                   	pop    edi
c000682c:	5d                   	pop    ebp
c000682d:	c3                   	ret    

c000682e <iso_reset>:
c000682e:	83 ec 18             	sub    esp,0x18
c0006831:	68 3a ee 01 c0       	push   0xc001ee3a
c0006836:	e8 5d 20 01 00       	call   c0018898 <iso_kprintf>
c000683b:	e8 0d f7 ff ff       	call   c0005f4d <iso_break_all>
c0006840:	e8 06 f7 ff ff       	call   c0005f4b <bclear>
c0006845:	31 c0                	xor    eax,eax
c0006847:	83 c4 1c             	add    esp,0x1c
c000684a:	c3                   	ret    

c000684b <init_percd>:
c000684b:	57                   	push   edi
c000684c:	56                   	push   esi
c000684d:	53                   	push   ebx
c000684e:	bb 01 00 00 00       	mov    ebx,0x1
c0006853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006857:	a2 60 30 02 c0       	mov    ds:0xc0023060,al
c000685c:	e8 cd ff ff ff       	call   c000682e <iso_reset>
c0006861:	c7 05 b4 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb4,0x0
c000686b:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c0006870:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006874:	e8 89 f7 ff ff       	call   c0006002 <biread>
c0006879:	89 c6                	mov    esi,eax
c000687b:	85 c0                	test   eax,eax
c000687d:	0f 88 ba 00 00 00    	js     c000693d <init_percd+0xf2>
c0006883:	8b 04 85 80 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf80]
c000688a:	83 c0 04             	add    eax,0x4
c000688d:	52                   	push   edx
c000688e:	6a 06                	push   0x6
c0006890:	68 45 ee 01 c0       	push   0xc001ee45
c0006895:	50                   	push   eax
c0006896:	e8 e5 9a ff ff       	call   c0000380 <memcmp>
c000689b:	83 c4 10             	add    esp,0x10
c000689e:	85 c0                	test   eax,eax
c00068a0:	74 08                	je     c00068aa <init_percd+0x5f>
c00068a2:	43                   	inc    ebx
c00068a3:	83 fb 04             	cmp    ebx,0x4
c00068a6:	75 c3                	jne    c000686b <init_percd+0x20>
c00068a8:	eb 1a                	jmp    c00068c4 <init_percd+0x79>
c00068aa:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068b1:	83 c0 5c             	add    eax,0x5c
c00068b4:	e8 1b f5 ff ff       	call   c0005dd4 <isjoliet>
c00068b9:	a3 b4 3e 02 c0       	mov    ds:0xc0023eb4,eax
c00068be:	85 c0                	test   eax,eax
c00068c0:	74 e0                	je     c00068a2 <init_percd+0x57>
c00068c2:	eb 3e                	jmp    c0006902 <init_percd+0xb7>
c00068c4:	83 3d b4 3e 02 c0 00 	cmp    DWORD PTR ds:0xc0023eb4,0x0
c00068cb:	75 35                	jne    c0006902 <init_percd+0xb7>
c00068cd:	a1 ac 3e 02 c0       	mov    eax,ds:0xc0023eac
c00068d2:	83 c0 10             	add    eax,0x10
c00068d5:	e8 28 f7 ff ff       	call   c0006002 <biread>
c00068da:	89 c6                	mov    esi,eax
c00068dc:	85 c0                	test   eax,eax
c00068de:	78 5f                	js     c000693f <init_percd+0xf4>
c00068e0:	83 cb ff             	or     ebx,0xffffffff
c00068e3:	50                   	push   eax
c00068e4:	8b 04 b5 80 30 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdcf80]
c00068eb:	6a 06                	push   0x6
c00068ed:	83 c0 04             	add    eax,0x4
c00068f0:	68 4c ee 01 c0       	push   0xc001ee4c
c00068f5:	50                   	push   eax
c00068f6:	e8 85 9a ff ff       	call   c0000380 <memcmp>
c00068fb:	83 c4 10             	add    esp,0x10
c00068fe:	85 c0                	test   eax,eax
c0006900:	75 3d                	jne    c000693f <init_percd+0xf4>
c0006902:	8b 34 b5 80 30 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdcf80]
c0006909:	bf 80 3e 02 c0       	mov    edi,0xc0023e80
c000690e:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006914:	b9 22 00 00 00       	mov    ecx,0x22
c0006919:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000691b:	b8 82 3e 02 c0       	mov    eax,0xc0023e82
c0006920:	31 db                	xor    ebx,ebx
c0006922:	e8 dc f4 ff ff       	call   c0005e03 <iso_733>
c0006927:	a3 a8 3e 02 c0       	mov    ds:0xc0023ea8,eax
c000692c:	b8 8a 3e 02 c0       	mov    eax,0xc0023e8a
c0006931:	e8 cd f4 ff ff       	call   c0005e03 <iso_733>
c0006936:	a3 a4 3e 02 c0       	mov    ds:0xc0023ea4,eax
c000693b:	eb 02                	jmp    c000693f <init_percd+0xf4>
c000693d:	89 c3                	mov    ebx,eax
c000693f:	89 d8                	mov    eax,ebx
c0006941:	5b                   	pop    ebx
c0006942:	5e                   	pop    esi
c0006943:	5f                   	pop    edi
c0006944:	c3                   	ret    

c0006945 <iso_ioctl>:
c0006945:	83 ec 18             	sub    esp,0x18
c0006948:	68 53 ee 01 c0       	push   0xc001ee53
c000694d:	e8 46 1f 01 00       	call   c0018898 <iso_kprintf>
c0006952:	e8 d7 fe ff ff       	call   c000682e <iso_reset>
c0006957:	31 c0                	xor    eax,eax
c0006959:	83 c4 1c             	add    esp,0x1c
c000695c:	c3                   	ret    

c000695d <fs_iso9660_init>:
c000695d:	53                   	push   ebx
c000695e:	31 db                	xor    ebx,ebx
c0006960:	83 ec 14             	sub    esp,0x14
c0006963:	68 5e ee 01 c0       	push   0xc001ee5e
c0006968:	e8 2b 1f 01 00       	call   c0018898 <iso_kprintf>
c000696d:	83 c4 0c             	add    esp,0xc
c0006970:	68 40 09 00 00       	push   0x940
c0006975:	6a 00                	push   0x0
c0006977:	68 40 35 02 c0       	push   0xc0023540
c000697c:	e8 3f 9b ff ff       	call   c00004c0 <memset>
c0006981:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006988:	c7 05 40 35 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0023540,0xffffffff
c0006992:	e8 ce 0e 00 00       	call   c0007865 <malloc>
c0006997:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000699e:	a3 b0 3e 02 c0       	mov    ds:0xc0023eb0,eax
c00069a3:	e8 bd 0e 00 00       	call   c0007865 <malloc>
c00069a8:	83 c4 10             	add    esp,0x10
c00069ab:	a3 20 35 02 c0       	mov    ds:0xc0023520,eax
c00069b0:	83 ec 0c             	sub    esp,0xc
c00069b3:	68 04 08 00 00       	push   0x804
c00069b8:	e8 a8 0e 00 00       	call   c0007865 <malloc>
c00069bd:	89 04 9d 80 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcf80],eax
c00069c4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069ca:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c00069d1:	e8 8f 0e 00 00       	call   c0007865 <malloc>
c00069d6:	83 c4 10             	add    esp,0x10
c00069d9:	89 04 9d 20 30 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdcfe0],eax
c00069e0:	43                   	inc    ebx
c00069e1:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c00069e7:	83 fb 10             	cmp    ebx,0x10
c00069ea:	75 c4                	jne    c00069b0 <fs_iso9660_init+0x53>
c00069ec:	31 c0                	xor    eax,eax
c00069ee:	83 c4 08             	add    esp,0x8
c00069f1:	5b                   	pop    ebx
c00069f2:	c3                   	ret    

c00069f3 <fs_iso9660_shutdown>:
c00069f3:	53                   	push   ebx
c00069f4:	31 db                	xor    ebx,ebx
c00069f6:	83 ec 08             	sub    esp,0x8
c00069f9:	83 ec 0c             	sub    esp,0xc
c00069fc:	ff 34 9d 80 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcf80]
c0006a03:	e8 6d 0e 00 00       	call   c0007875 <free>
c0006a08:	58                   	pop    eax
c0006a09:	ff 34 9d 20 30 02 c0 	push   DWORD PTR [ebx*4-0x3ffdcfe0]
c0006a10:	43                   	inc    ebx
c0006a11:	e8 5f 0e 00 00       	call   c0007875 <free>
c0006a16:	83 c4 10             	add    esp,0x10
c0006a19:	83 fb 10             	cmp    ebx,0x10
c0006a1c:	75 db                	jne    c00069f9 <fs_iso9660_shutdown+0x6>
c0006a1e:	a1 b0 3e 02 c0       	mov    eax,ds:0xc0023eb0
c0006a23:	85 c0                	test   eax,eax
c0006a25:	74 0c                	je     c0006a33 <fs_iso9660_shutdown+0x40>
c0006a27:	83 ec 0c             	sub    esp,0xc
c0006a2a:	50                   	push   eax
c0006a2b:	e8 45 0e 00 00       	call   c0007875 <free>
c0006a30:	83 c4 10             	add    esp,0x10
c0006a33:	a1 20 35 02 c0       	mov    eax,ds:0xc0023520
c0006a38:	85 c0                	test   eax,eax
c0006a3a:	74 0c                	je     c0006a48 <fs_iso9660_shutdown+0x55>
c0006a3c:	83 ec 0c             	sub    esp,0xc
c0006a3f:	50                   	push   eax
c0006a40:	e8 30 0e 00 00       	call   c0007875 <free>
c0006a45:	83 c4 10             	add    esp,0x10
c0006a48:	c7 05 20 35 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023520,0x0
c0006a52:	c7 05 b0 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023eb0,0x0
c0006a5c:	31 c0                	xor    eax,eax
c0006a5e:	83 c4 08             	add    esp,0x8
c0006a61:	5b                   	pop    ebx
c0006a62:	c3                   	ret    
c0006a63:	90                   	nop

c0006a64 <Computer::close(int, int, void*)>:
c0006a64:	57                   	push   edi
c0006a65:	56                   	push   esi
c0006a66:	53                   	push   ebx
c0006a67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006a6b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006a6f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006a73:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a79:	83 ec 0c             	sub    esp,0xc
c0006a7c:	50                   	push   eax
c0006a7d:	e8 d4 50 00 00       	call   c000bb56 <Device::closeAll()>
c0006a82:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006a88:	83 c4 10             	add    esp,0x10
c0006a8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a8d:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006a91:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006a99:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006a9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006aa1:	5b                   	pop    ebx
c0006aa2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006aa5:	5e                   	pop    esi
c0006aa6:	5f                   	pop    edi
c0006aa7:	ff e0                	jmp    eax

c0006aa9 <Krnl::firstTask()>:
c0006aa9:	53                   	push   ebx
c0006aaa:	83 ec 14             	sub    esp,0x14
c0006aad:	fb                   	sti    
c0006aae:	68 6f ee 01 c0       	push   0xc001ee6f
c0006ab3:	e8 7f 92 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c0006ab8:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006abf:	e8 a1 0d 00 00       	call   c0007865 <malloc>
c0006ac4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006acb:	89 c3                	mov    ebx,eax
c0006acd:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0006ad2:	50                   	push   eax
c0006ad3:	68 88 ee 01 c0       	push   0xc001ee88
c0006ad8:	6a 01                	push   0x1
c0006ada:	53                   	push   ebx
c0006adb:	e8 5c d8 00 00       	call   c001433c <Process::Process(bool, char const*, Process*, char**)>
c0006ae0:	83 c4 20             	add    esp,0x20
c0006ae3:	68 ff 00 00 00       	push   0xff
c0006ae8:	6a 00                	push   0x0
c0006aea:	68 b9 72 00 c0       	push   0xc00072b9
c0006aef:	53                   	push   ebx
c0006af0:	e8 6f da 00 00       	call   c0014564 <Process::createThread(void (*)(void*), void*, int)>
c0006af5:	8b 15 90 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027190
c0006afb:	6a 7a                	push   0x7a
c0006afd:	6a 00                	push   0x0
c0006aff:	68 e0 4f 01 c0       	push   0xc0014fe0
c0006b04:	52                   	push   edx
c0006b05:	e8 5a da 00 00       	call   c0014564 <Process::createThread(void (*)(void*), void*, int)>
c0006b0a:	83 c4 14             	add    esp,0x14
c0006b0d:	a3 48 71 02 c0       	mov    ds:0xc0027148,eax
c0006b12:	68 84 ef 01 c0       	push   0xc001ef84
c0006b17:	c6 05 bd 3e 02 c0 01 	mov    BYTE PTR ds:0xc0023ebd,0x1
c0006b1e:	e8 14 92 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c0006b23:	e8 97 e8 00 00       	call   c00153bf <Vm::initialise8086()>
c0006b28:	e8 6f 3e 00 00       	call   c000a99c <Fs::initVFS()>
c0006b2d:	c7 04 24 95 ee 01 c0 	mov    DWORD PTR [esp],0xc001ee95
c0006b34:	e8 fe 91 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c0006b39:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b3e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006b44:	8b 10                	mov    edx,DWORD PTR [eax]
c0006b46:	6a 00                	push   0x0
c0006b48:	6a 00                	push   0x0
c0006b4a:	6a 00                	push   0x0
c0006b4c:	50                   	push   eax
c0006b4d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006b50:	83 c4 14             	add    esp,0x14
c0006b53:	68 84 ef 01 c0       	push   0xc001ef84
c0006b58:	e8 da 91 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c0006b5d:	e8 b0 96 00 00       	call   c0010212 <Krnl::loadSystemEnv()>
c0006b62:	e8 0d 99 00 00       	call   c0010474 <Krnl::setupPowerManager()>
c0006b67:	83 c4 0c             	add    esp,0xc
c0006b6a:	6a 3a                	push   0x3a
c0006b6c:	68 af ee 01 c0       	push   0xc001eeaf
c0006b71:	68 b8 ee 01 c0       	push   0xc001eeb8
c0006b76:	e8 6a bd 00 00       	call   c00128e5 <Reg::readIntWithDefault(char*, char*, int)>
c0006b7b:	89 04 24             	mov    DWORD PTR [esp],eax
c0006b7e:	e8 25 49 00 00       	call   c000b4a8 <User::loadClockSettings(int)>
c0006b83:	c7 04 24 a8 ef 01 c0 	mov    DWORD PTR [esp],0xc001efa8
c0006b8a:	e8 a8 91 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c0006b8f:	59                   	pop    ecx
c0006b90:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0006b95:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006b9b:	53                   	push   ebx
c0006b9c:	e8 b3 4f 00 00       	call   c000bb54 <Device::loadDriversForAll()>
c0006ba1:	c7 04 24 c0 ee 01 c0 	mov    DWORD PTR [esp],0xc001eec0
c0006ba8:	e8 8a 91 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c0006bad:	58                   	pop    eax
c0006bae:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c0006bb4:	5a                   	pop    edx
c0006bb5:	6a 01                	push   0x1
c0006bb7:	68 d1 ee 01 c0       	push   0xc001eed1
c0006bbc:	e8 99 d1 00 00       	call   c0013d5a <Thr::loadDLL(char const*, bool)>
c0006bc1:	59                   	pop    ecx
c0006bc2:	5a                   	pop    edx
c0006bc3:	53                   	push   ebx
c0006bc4:	50                   	push   eax
c0006bc5:	e8 c1 d3 00 00       	call   c0013f8b <Thr::executeDLL(unsigned long, void*)>
c0006bca:	83 c4 10             	add    esp,0x10
c0006bcd:	83 ec 0c             	sub    esp,0xc
c0006bd0:	6a 02                	push   0x2
c0006bd2:	e8 d1 dd 00 00       	call   c00149a8 <blockTask(TaskState)>
c0006bd7:	83 c4 10             	add    esp,0x10
c0006bda:	eb f1                	jmp    c0006bcd <Krnl::firstTask()+0x124>

c0006bdc <Computer::Computer()>:
c0006bdc:	83 ec 0c             	sub    esp,0xc
c0006bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006be3:	83 ec 08             	sub    esp,0x8
c0006be6:	68 ed ee 01 c0       	push   0xc001eeed
c0006beb:	50                   	push   eax
c0006bec:	e8 df 4f 00 00       	call   c000bbd0 <Device::Device(char const*)>
c0006bf1:	83 c4 10             	add    esp,0x10
c0006bf4:	ba f4 ef 01 c0       	mov    edx,0xc001eff4
c0006bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfd:	89 10                	mov    DWORD PTR [eax],edx
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006c0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c11:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006c25:	83 ca 04             	or     edx,0x4
c0006c28:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c32:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c38:	31 d2                	xor    edx,edx
c0006c3a:	88 c2                	mov    dl,al
c0006c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c40:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006c47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c4b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c51:	31 d2                	xor    edx,edx
c0006c53:	88 c2                	mov    dl,al
c0006c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c59:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c62:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006c68:	8d 50 01             	lea    edx,[eax+0x1]
c0006c6b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006c6f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006c75:	31 d2                	xor    edx,edx
c0006c77:	88 c2                	mov    dl,al
c0006c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c7d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006c81:	83 e1 3f             	and    ecx,0x3f
c0006c84:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006c88:	90                   	nop
c0006c89:	83 c4 0c             	add    esp,0xc
c0006c8c:	c3                   	ret    
c0006c8d:	90                   	nop

c0006c8e <Computer::setBootMessage(char const*)>:
c0006c8e:	c3                   	ret    
c0006c8f:	90                   	nop

c0006c90 <Computer::detectFeatures()>:
c0006c90:	55                   	push   ebp
c0006c91:	57                   	push   edi
c0006c92:	56                   	push   esi
c0006c93:	53                   	push   ebx
c0006c94:	83 ec 1c             	sub    esp,0x1c
c0006c97:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006c9b:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006ca5:	e8 4f 95 ff ff       	call   c00001f9 <detectCPUID>
c0006caa:	85 c0                	test   eax,eax
c0006cac:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006cb2:	0f 95 c2             	setne  dl
c0006cb5:	83 e0 fd             	and    eax,0xfffffffd
c0006cb8:	01 d2                	add    edx,edx
c0006cba:	09 d0                	or     eax,edx
c0006cbc:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cc2:	a8 02                	test   al,0x2
c0006cc4:	75 46                	jne    c0006d0c <Computer::detectFeatures()+0x7c>
c0006cc6:	f6 05 d1 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed1,0x4
c0006ccd:	74 07                	je     c0006cd6 <Computer::detectFeatures()+0x46>
c0006ccf:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006cd6:	e8 9b 6a 01 00       	call   c001d776 <x87Detect>
c0006cdb:	83 e0 01             	and    eax,0x1
c0006cde:	c1 e0 04             	shl    eax,0x4
c0006ce1:	88 c2                	mov    dl,al
c0006ce3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce9:	83 e0 ef             	and    eax,0xffffffef
c0006cec:	09 d0                	or     eax,edx
c0006cee:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cf4:	a8 10                	test   al,0x10
c0006cf6:	0f 85 2a 01 00 00    	jne    c0006e26 <Computer::detectFeatures()+0x196>
c0006cfc:	84 c0                	test   al,al
c0006cfe:	0f 88 45 01 00 00    	js     c0006e49 <Computer::detectFeatures()+0x1b9>
c0006d04:	83 c4 1c             	add    esp,0x1c
c0006d07:	5b                   	pop    ebx
c0006d08:	5e                   	pop    esi
c0006d09:	5f                   	pop    edi
c0006d0a:	5d                   	pop    ebp
c0006d0b:	c3                   	ret    
c0006d0c:	83 ec 0c             	sub    esp,0xc
c0006d0f:	6a 20                	push   0x20
c0006d11:	e8 4e 85 00 00       	call   c000f264 <CPU::cpuidCheckEDX(unsigned int)>
c0006d16:	83 e0 01             	and    eax,0x1
c0006d19:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006d20:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d26:	83 e0 f7             	and    eax,0xfffffff7
c0006d29:	09 d0                	or     eax,edx
c0006d2b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d31:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006d38:	e8 27 85 00 00       	call   c000f264 <CPU::cpuidCheckEDX(unsigned int)>
c0006d3d:	83 e0 01             	and    eax,0x1
c0006d40:	88 c2                	mov    dl,al
c0006d42:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d48:	83 e0 fe             	and    eax,0xfffffffe
c0006d4b:	09 d0                	or     eax,edx
c0006d4d:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d53:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006d5a:	e8 05 85 00 00       	call   c000f264 <CPU::cpuidCheckEDX(unsigned int)>
c0006d5f:	c1 e0 07             	shl    eax,0x7
c0006d62:	88 c2                	mov    dl,al
c0006d64:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006d6a:	83 e0 7f             	and    eax,0x7f
c0006d6d:	09 d0                	or     eax,edx
c0006d6f:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006d75:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006d7c:	e8 e3 84 00 00       	call   c000f264 <CPU::cpuidCheckEDX(unsigned int)>
c0006d81:	83 c4 10             	add    esp,0x10
c0006d84:	83 e0 01             	and    eax,0x1
c0006d87:	c1 e0 05             	shl    eax,0x5
c0006d8a:	88 c2                	mov    dl,al
c0006d8c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d92:	83 e0 df             	and    eax,0xffffffdf
c0006d95:	09 d0                	or     eax,edx
c0006d97:	f7 05 d0 3e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0023ed0,0x401
c0006da1:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006da7:	0f 84 c2 00 00 00    	je     c0006e6f <Computer::detectFeatures()+0x1df>
c0006dad:	83 e0 fe             	and    eax,0xfffffffe
c0006db0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006db6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006dbc:	88 c2                	mov    dl,al
c0006dbe:	83 e2 09             	and    edx,0x9
c0006dc1:	fe ca                	dec    dl
c0006dc3:	75 09                	jne    c0006dce <Computer::detectFeatures()+0x13e>
c0006dc5:	83 e0 fe             	and    eax,0xfffffffe
c0006dc8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dce:	83 ec 0c             	sub    esp,0xc
c0006dd1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006dd5:	50                   	push   eax
c0006dd6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006dda:	55                   	push   ebp
c0006ddb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ddf:	57                   	push   edi
c0006de0:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006de4:	56                   	push   esi
c0006de5:	68 00 00 00 80       	push   0x80000000
c0006dea:	e8 f1 83 00 00       	call   c000f1e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006def:	83 c4 20             	add    esp,0x20
c0006df2:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006df9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006dfd:	0f 86 c3 fe ff ff    	jbe    c0006cc6 <Computer::detectFeatures()+0x36>
c0006e03:	83 ec 0c             	sub    esp,0xc
c0006e06:	50                   	push   eax
c0006e07:	55                   	push   ebp
c0006e08:	57                   	push   edi
c0006e09:	56                   	push   esi
c0006e0a:	68 01 00 00 80       	push   0x80000001
c0006e0f:	e8 cc 83 00 00       	call   c000f1e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006e14:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006e1e:	83 c4 20             	add    esp,0x20
c0006e21:	e9 a0 fe ff ff       	jmp    c0006cc6 <Computer::detectFeatures()+0x36>
c0006e26:	e8 05 69 01 00       	call   c001d730 <absolutelyNoChanceInHell>
c0006e2b:	88 c2                	mov    dl,al
c0006e2d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e33:	c1 e2 07             	shl    edx,0x7
c0006e36:	83 e0 7f             	and    eax,0x7f
c0006e39:	09 d0                	or     eax,edx
c0006e3b:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e41:	84 c0                	test   al,al
c0006e43:	0f 89 bb fe ff ff    	jns    c0006d04 <Computer::detectFeatures()+0x74>
c0006e49:	e8 52 65 01 00       	call   c001d3a0 <avxDetect>
c0006e4e:	83 e0 01             	and    eax,0x1
c0006e51:	c1 e0 05             	shl    eax,0x5
c0006e54:	88 c2                	mov    dl,al
c0006e56:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006e5c:	83 e0 df             	and    eax,0xffffffdf
c0006e5f:	09 d0                	or     eax,edx
c0006e61:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006e67:	83 c4 1c             	add    esp,0x1c
c0006e6a:	5b                   	pop    ebx
c0006e6b:	5e                   	pop    esi
c0006e6c:	5f                   	pop    edi
c0006e6d:	5d                   	pop    ebp
c0006e6e:	c3                   	ret    
c0006e6f:	83 ec 0c             	sub    esp,0xc
c0006e72:	68 00 02 00 00       	push   0x200
c0006e77:	e8 e8 83 00 00       	call   c000f264 <CPU::cpuidCheckEDX(unsigned int)>
c0006e7c:	83 c4 10             	add    esp,0x10
c0006e7f:	83 e0 01             	and    eax,0x1
c0006e82:	88 c2                	mov    dl,al
c0006e84:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e8a:	83 e0 fe             	and    eax,0xfffffffe
c0006e8d:	09 d0                	or     eax,edx
c0006e8f:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e95:	e9 1c ff ff ff       	jmp    c0006db6 <Computer::detectFeatures()+0x126>

c0006e9a <Computer::displayFeatures()>:
c0006e9a:	c3                   	ret    
c0006e9b:	90                   	nop

c0006e9c <Computer::rdmsr(unsigned int)>:
c0006e9c:	83 ec 0c             	sub    esp,0xc
c0006e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ea3:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006eaa:	74 0a                	je     c0006eb6 <Computer::rdmsr(unsigned int)+0x1a>
c0006eac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006eb0:	0f 32                	rdmsr  
c0006eb2:	83 c4 0c             	add    esp,0xc
c0006eb5:	c3                   	ret    
c0006eb6:	83 ec 0c             	sub    esp,0xc
c0006eb9:	68 f6 ee 01 c0       	push   0xc001eef6
c0006ebe:	e8 ec 94 00 00       	call   c00103af <KePanic(char const*)>
c0006ec3:	83 c4 10             	add    esp,0x10
c0006ec6:	eb e4                	jmp    c0006eac <Computer::rdmsr(unsigned int)+0x10>

c0006ec8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006ec8:	57                   	push   edi
c0006ec9:	56                   	push   esi
c0006eca:	52                   	push   edx
c0006ecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ecf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006ed3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006ed7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006ede:	74 0e                	je     c0006eee <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006ee0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006ee4:	89 f0                	mov    eax,esi
c0006ee6:	89 fa                	mov    edx,edi
c0006ee8:	0f 30                	wrmsr  
c0006eea:	58                   	pop    eax
c0006eeb:	5e                   	pop    esi
c0006eec:	5f                   	pop    edi
c0006eed:	c3                   	ret    
c0006eee:	83 ec 0c             	sub    esp,0xc
c0006ef1:	68 fc ee 01 c0       	push   0xc001eefc
c0006ef6:	e8 b4 94 00 00       	call   c00103af <KePanic(char const*)>
c0006efb:	83 c4 10             	add    esp,0x10
c0006efe:	eb e0                	jmp    c0006ee0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006f00 <Computer::shutdown()>:
c0006f00:	83 ec 0c             	sub    esp,0xc
c0006f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f07:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f09:	6a 00                	push   0x0
c0006f0b:	6a 00                	push   0x0
c0006f0d:	6a 00                	push   0x0
c0006f0f:	50                   	push   eax
c0006f10:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f13:	83 c4 1c             	add    esp,0x1c
c0006f16:	c3                   	ret    
c0006f17:	90                   	nop

c0006f18 <Computer::restart()>:
c0006f18:	83 ec 0c             	sub    esp,0xc
c0006f1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f21:	6a 00                	push   0x0
c0006f23:	6a 00                	push   0x0
c0006f25:	6a 01                	push   0x1
c0006f27:	50                   	push   eax
c0006f28:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006f2b:	83 c4 1c             	add    esp,0x1c
c0006f2e:	c3                   	ret    
c0006f2f:	90                   	nop

c0006f30 <Computer::sleep()>:
c0006f30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f34:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006f3a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f3e:	e9 99 7d 00 00       	jmp    c000ecdc <ACPI::sleep()>
c0006f43:	90                   	nop

c0006f44 <Computer::nmiEnabled()>:
c0006f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f48:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006f4e:	c3                   	ret    
c0006f4f:	90                   	nop

c0006f50 <Computer::readCMOS(unsigned char)>:
c0006f50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f54:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006f5b:	19 c0                	sbb    eax,eax
c0006f5d:	83 e0 80             	and    eax,0xffffff80
c0006f60:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006f64:	e6 70                	out    0x70,al
c0006f66:	e4 71                	in     al,0x71
c0006f68:	c3                   	ret    
c0006f69:	90                   	nop

c0006f6a <Computer::enableNMI(bool)>:
c0006f6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006f6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006f72:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006f78:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006f80:	eb ce                	jmp    c0006f50 <Computer::readCMOS(unsigned char)>

c0006f82 <Computer::open(int, int, void*)>:
c0006f82:	56                   	push   esi
c0006f83:	53                   	push   ebx
c0006f84:	83 ec 10             	sub    esp,0x10
c0006f87:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006f8b:	f6 05 d0 3e 02 c0 04 	test   BYTE PTR ds:0xc0023ed0,0x4
c0006f92:	68 02 ef 01 c0       	push   0xc001ef02
c0006f97:	0f 94 05 40 12 02 c0 	sete   BYTE PTR ds:0xc0021240
c0006f9e:	e8 94 8d 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c0006fa3:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006faa:	e8 b6 08 00 00       	call   c0007865 <malloc>
c0006faf:	89 04 24             	mov    DWORD PTR [esp],eax
c0006fb2:	89 c6                	mov    esi,eax
c0006fb4:	e8 bb 78 00 00       	call   c000e874 <ACPI::ACPI()>
c0006fb9:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006fbf:	58                   	pop    eax
c0006fc0:	5a                   	pop    edx
c0006fc1:	56                   	push   esi
c0006fc2:	53                   	push   ebx
c0006fc3:	e8 70 4a 00 00       	call   c000ba38 <Device::addChild(Device*)>
c0006fc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006fcb:	e8 c0 fc ff ff       	call   c0006c90 <Computer::detectFeatures()>
c0006fd0:	59                   	pop    ecx
c0006fd1:	5e                   	pop    esi
c0006fd2:	6a 01                	push   0x1
c0006fd4:	53                   	push   ebx
c0006fd5:	e8 90 ff ff ff       	call   c0006f6a <Computer::enableNMI(bool)>
c0006fda:	c7 04 24 1a ef 01 c0 	mov    DWORD PTR [esp],0xc001ef1a
c0006fe1:	e8 51 8d 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c0006fe6:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006fed:	e8 73 08 00 00       	call   c0007865 <malloc>
c0006ff2:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ff5:	89 c6                	mov    esi,eax
c0006ff7:	e8 20 83 00 00       	call   c000f31c <CPU::CPU()>
c0006ffc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007002:	58                   	pop    eax
c0007003:	5a                   	pop    edx
c0007004:	56                   	push   esi
c0007005:	53                   	push   ebx
c0007006:	e8 2d 4a 00 00       	call   c000ba38 <Device::addChild(Device*)>
c000700b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0007011:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007015:	8b 10                	mov    edx,DWORD PTR [eax]
c0007017:	51                   	push   ecx
c0007018:	6a 00                	push   0x0
c000701a:	6a 00                	push   0x0
c000701c:	50                   	push   eax
c000701d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0007020:	83 c4 14             	add    esp,0x14
c0007023:	68 c8 ef 01 c0       	push   0xc001efc8
c0007028:	e8 0a 8d 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c000702d:	e8 ff f4 00 00       	call   c0016531 <HalInitialiseCoprocessor()>
c0007032:	c7 04 24 34 ef 01 c0 	mov    DWORD PTR [esp],0xc001ef34
c0007039:	e8 f9 8c 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c000703e:	c7 04 24 a9 6a 00 c0 	mov    DWORD PTR [esp],0xc0006aa9
c0007045:	e8 46 d6 00 00       	call   c0014690 <setupMultitasking(void (*)())>
c000704a:	83 c4 14             	add    esp,0x14
c000704d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007052:	5b                   	pop    ebx
c0007053:	5e                   	pop    esi
c0007054:	c3                   	ret    
c0007055:	90                   	nop

c0007056 <Computer::disableNMI()>:
c0007056:	6a 00                	push   0x0
c0007058:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000705c:	50                   	push   eax
c000705d:	e8 08 ff ff ff       	call   c0006f6a <Computer::enableNMI(bool)>
c0007062:	5a                   	pop    edx
c0007063:	59                   	pop    ecx
c0007064:	c3                   	ret    
c0007065:	90                   	nop

c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000706a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007071:	19 c0                	sbb    eax,eax
c0007073:	83 e0 80             	and    eax,0xffffff80
c0007076:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000707a:	e6 70                	out    0x70,al
c000707c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007080:	e6 71                	out    0x71,al
c0007082:	c3                   	ret    
c0007083:	90                   	nop

c0007084 <Computer::handleNMI()>:
c0007084:	56                   	push   esi
c0007085:	53                   	push   ebx
c0007086:	83 ec 10             	sub    esp,0x10
c0007089:	e4 92                	in     al,0x92
c000708b:	89 c6                	mov    esi,eax
c000708d:	e4 61                	in     al,0x61
c000708f:	68 4f ef 01 c0       	push   0xc001ef4f
c0007094:	88 c3                	mov    bl,al
c0007096:	e8 5f 35 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000709b:	83 c4 10             	add    esp,0x10
c000709e:	83 e6 10             	and    esi,0x10
c00070a1:	75 0d                	jne    c00070b0 <Computer::handleNMI()+0x2c>
c00070a3:	f6 c3 40             	test   bl,0x40
c00070a6:	75 1d                	jne    c00070c5 <Computer::handleNMI()+0x41>
c00070a8:	84 db                	test   bl,bl
c00070aa:	78 2d                	js     c00070d9 <Computer::handleNMI()+0x55>
c00070ac:	58                   	pop    eax
c00070ad:	5b                   	pop    ebx
c00070ae:	5e                   	pop    esi
c00070af:	c3                   	ret    
c00070b0:	83 ec 0c             	sub    esp,0xc
c00070b3:	68 60 ef 01 c0       	push   0xc001ef60
c00070b8:	e8 f2 92 00 00       	call   c00103af <KePanic(char const*)>
c00070bd:	83 c4 10             	add    esp,0x10
c00070c0:	f6 c3 40             	test   bl,0x40
c00070c3:	74 e3                	je     c00070a8 <Computer::handleNMI()+0x24>
c00070c5:	83 ec 0c             	sub    esp,0xc
c00070c8:	68 6d ef 01 c0       	push   0xc001ef6d
c00070cd:	e8 dd 92 00 00       	call   c00103af <KePanic(char const*)>
c00070d2:	83 c4 10             	add    esp,0x10
c00070d5:	84 db                	test   bl,bl
c00070d7:	79 d3                	jns    c00070ac <Computer::handleNMI()+0x28>
c00070d9:	c7 44 24 10 77 ef 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ef77
c00070e1:	5a                   	pop    edx
c00070e2:	5b                   	pop    ebx
c00070e3:	5e                   	pop    esi
c00070e4:	e9 c6 92 00 00       	jmp    c00103af <KePanic(char const*)>
c00070e9:	90                   	nop

c00070ea <GDTEntry::setBase(unsigned int)>:
c00070ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00070f2:	89 c1                	mov    ecx,eax
c00070f4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00070f8:	c1 e9 10             	shr    ecx,0x10
c00070fb:	c1 e8 18             	shr    eax,0x18
c00070fe:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007101:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0007104:	c3                   	ret    
c0007105:	90                   	nop

c0007106 <GDTEntry::setLimit(unsigned int)>:
c0007106:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000710a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000710e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007111:	66 89 01             	mov    WORD PTR [ecx],ax
c0007114:	83 e2 f0             	and    edx,0xfffffff0
c0007117:	c1 e8 10             	shr    eax,0x10
c000711a:	83 e0 0f             	and    eax,0xf
c000711d:	09 d0                	or     eax,edx
c000711f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007122:	c3                   	ret    
c0007123:	90                   	nop

c0007124 <GDT::GDT()>:
c0007124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007128:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000712e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007132:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007138:	90                   	nop
c0007139:	c3                   	ret    

c000713a <GDT::addEntry(GDTEntry)>:
c000713a:	53                   	push   ebx
c000713b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000713f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007143:	8b 02                	mov    eax,DWORD PTR [edx]
c0007145:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007149:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000714d:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007151:	8d 48 01             	lea    ecx,[eax+0x1]
c0007154:	c1 e0 03             	shl    eax,0x3
c0007157:	89 0a                	mov    DWORD PTR [edx],ecx
c0007159:	5b                   	pop    ebx
c000715a:	c3                   	ret    
c000715b:	90                   	nop

c000715c <GDT::getNumberOfEntries()>:
c000715c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007160:	8b 00                	mov    eax,DWORD PTR [eax]
c0007162:	c3                   	ret    
c0007163:	90                   	nop

c0007164 <GDT::flush()>:
c0007164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007168:	8b 10                	mov    edx,DWORD PTR [eax]
c000716a:	83 c0 04             	add    eax,0x4
c000716d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0007174:	a3 c2 3e 02 c0       	mov    ds:0xc0023ec2,eax
c0007179:	66 89 15 c0 3e 02 c0 	mov    WORD PTR ds:0xc0023ec0,dx
c0007180:	e9 d5 91 ff ff       	jmp    c000035a <loadGDT>
c0007185:	90                   	nop

c0007186 <GDT::setup()>:
c0007186:	57                   	push   edi
c0007187:	56                   	push   esi
c0007188:	53                   	push   ebx
c0007189:	83 ec 30             	sub    esp,0x30
c000718c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007190:	6a 00                	push   0x0
c0007192:	8d 74 24 14          	lea    esi,[esp+0x14]
c0007196:	56                   	push   esi
c0007197:	e8 4e ff ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c000719c:	6a 00                	push   0x0
c000719e:	56                   	push   esi
c000719f:	e8 62 ff ff ff       	call   c0007106 <GDTEntry::setLimit(unsigned int)>
c00071a4:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00071ac:	6a 00                	push   0x0
c00071ae:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00071b2:	56                   	push   esi
c00071b3:	e8 32 ff ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c00071b8:	68 ff ff ff 00       	push   0xffffff
c00071bd:	56                   	push   esi
c00071be:	e8 43 ff ff ff       	call   c0007106 <GDTEntry::setLimit(unsigned int)>
c00071c3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00071c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00071cb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00071cf:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00071d3:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c00071d8:	0d 00 9a c0 00       	or     eax,0xc09a00
c00071dd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00071e1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00071e5:	89 f8                	mov    eax,edi
c00071e7:	89 fa                	mov    edx,edi
c00071e9:	80 e4 f7             	and    ah,0xf7
c00071ec:	80 ce 60             	or     dh,0x60
c00071ef:	89 c7                	mov    edi,eax
c00071f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00071f5:	80 cc 60             	or     ah,0x60
c00071f8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00071fc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007200:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007204:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007208:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000720c:	83 c4 20             	add    esp,0x20
c000720f:	6a 00                	push   0x0
c0007211:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007215:	50                   	push   eax
c0007216:	e8 cf fe ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c000721b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000721f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007223:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007228:	6a 00                	push   0x0
c000722a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000722e:	50                   	push   eax
c000722f:	e8 b6 fe ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c0007234:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007239:	83 c4 0c             	add    esp,0xc
c000723c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007240:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007244:	53                   	push   ebx
c0007245:	e8 f0 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c000724a:	83 c4 0c             	add    esp,0xc
c000724d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007251:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007255:	53                   	push   ebx
c0007256:	e8 df fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c000725b:	83 c4 0c             	add    esp,0xc
c000725e:	57                   	push   edi
c000725f:	56                   	push   esi
c0007260:	53                   	push   ebx
c0007261:	e8 d4 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007266:	83 c4 0c             	add    esp,0xc
c0007269:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000726d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0007271:	53                   	push   ebx
c0007272:	e8 c3 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007277:	83 c4 0c             	add    esp,0xc
c000727a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000727e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007282:	53                   	push   ebx
c0007283:	e8 b2 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007288:	83 c4 0c             	add    esp,0xc
c000728b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000728f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007293:	53                   	push   ebx
c0007294:	e8 a1 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0007299:	83 c4 0c             	add    esp,0xc
c000729c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00072a4:	53                   	push   ebx
c00072a5:	e8 90 fe ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c00072aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00072ad:	e8 b2 fe ff ff       	call   c0007164 <GDT::flush()>
c00072b2:	83 c4 40             	add    esp,0x40
c00072b5:	5b                   	pop    ebx
c00072b6:	5e                   	pop    esi
c00072b7:	5f                   	pop    edi
c00072b8:	c3                   	ret    

c00072b9 <idleFunction(void*)>:
c00072b9:	83 ec 0c             	sub    esp,0xc
c00072bc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00072c1:	48                   	dec    eax
c00072c2:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00072c7:	75 01                	jne    c00072ca <idleFunction(void*)+0x11>
c00072c9:	fb                   	sti    
c00072ca:	e8 3c ef 00 00       	call   c001620b <HalSystemIdle()>
c00072cf:	e8 5e 6a 01 00       	call   c001dd32 <idleCommon()>
c00072d4:	eb f4                	jmp    c00072ca <idleFunction(void*)+0x11>
c00072d6:	66 90                	xchg   ax,ax

c00072d8 <IDTEntry::IDTEntry(bool)>:
c00072d8:	83 ec 04             	sub    esp,0x4
c00072db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00072df:	88 04 24             	mov    BYTE PTR [esp],al
c00072e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072e6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c00072ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f0:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072f8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00072fb:	83 e2 f0             	and    edx,0xfffffff0
c00072fe:	83 ca 0e             	or     edx,0xe
c0007301:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007304:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007308:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000730b:	83 e2 ef             	and    edx,0xffffffef
c000730e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007311:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007315:	74 05                	je     c000731c <IDTEntry::IDTEntry(bool)+0x44>
c0007317:	b2 03                	mov    dl,0x3
c0007319:	eb 05                	jmp    c0007320 <IDTEntry::IDTEntry(bool)+0x48>
c000731b:	90                   	nop
c000731c:	b2 00                	mov    dl,0x0
c000731e:	66 90                	xchg   ax,ax
c0007320:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007324:	83 e2 03             	and    edx,0x3
c0007327:	88 d1                	mov    cl,dl
c0007329:	c1 e1 05             	shl    ecx,0x5
c000732c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000732f:	83 e2 9f             	and    edx,0xffffff9f
c0007332:	09 ca                	or     edx,ecx
c0007334:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007337:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000733b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000733e:	83 ca 80             	or     edx,0xffffff80
c0007341:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007344:	90                   	nop
c0007345:	83 c4 04             	add    esp,0x4
c0007348:	c3                   	ret    
c0007349:	90                   	nop

c000734a <IDTEntry::setOffset(unsigned int)>:
c000734a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000734e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007352:	66 89 02             	mov    WORD PTR [edx],ax
c0007355:	c1 e8 10             	shr    eax,0x10
c0007358:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000735c:	c3                   	ret    
c000735d:	90                   	nop
c000735e:	66 90                	xchg   ax,ax

c0007360 <IDT::IDT()>:
c0007360:	90                   	nop
c0007361:	c3                   	ret    

c0007362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007366:	83 c0 30             	add    eax,0x30
c0007369:	c3                   	ret    

c000736a <IDT::addEntry(IDTEntry, int)>:
c000736a:	53                   	push   ebx
c000736b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000736f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007377:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000737b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000737e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0007382:	5b                   	pop    ebx
c0007383:	c3                   	ret    

c0007384 <IDT::addEntry(int, void (*)(), bool)>:
c0007384:	53                   	push   ebx
c0007385:	83 ec 10             	sub    esp,0x10
c0007388:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000738d:	50                   	push   eax
c000738e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0007392:	53                   	push   ebx
c0007393:	e8 40 ff ff ff       	call   c00072d8 <IDTEntry::IDTEntry(bool)>
c0007398:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000739c:	53                   	push   ebx
c000739d:	e8 a8 ff ff ff       	call   c000734a <IDTEntry::setOffset(unsigned int)>
c00073a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00073a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00073ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00073b2:	e8 b3 ff ff ff       	call   c000736a <IDT::addEntry(IDTEntry, int)>
c00073b7:	83 c4 30             	add    esp,0x30
c00073ba:	5b                   	pop    ebx
c00073bb:	c3                   	ret    

c00073bc <IDT::flush()>:
c00073bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073c0:	66 c7 05 c8 3e 02 c0 ff 07 	mov    WORD PTR ds:0xc0023ec8,0x7ff
c00073c9:	a3 ca 3e 02 c0       	mov    ds:0xc0023eca,eax
c00073ce:	0f 01 1d c8 3e 02 c0 	lidtd  ds:0xc0023ec8
c00073d5:	c3                   	ret    

c00073d6 <IDT::setup()>:
c00073d6:	57                   	push   edi
c00073d7:	56                   	push   esi
c00073d8:	53                   	push   ebx
c00073d9:	83 ec 10             	sub    esp,0x10
c00073dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00073e0:	6a 00                	push   0x0
c00073e2:	68 30 d4 01 c0       	push   0xc001d430
c00073e7:	6a 00                	push   0x0
c00073e9:	53                   	push   ebx
c00073ea:	e8 95 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00073ef:	6a 00                	push   0x0
c00073f1:	68 40 d4 01 c0       	push   0xc001d440
c00073f6:	6a 01                	push   0x1
c00073f8:	53                   	push   ebx
c00073f9:	e8 86 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00073fe:	83 c4 20             	add    esp,0x20
c0007401:	6a 00                	push   0x0
c0007403:	68 4a d4 01 c0       	push   0xc001d44a
c0007408:	6a 02                	push   0x2
c000740a:	53                   	push   ebx
c000740b:	e8 74 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007410:	6a 00                	push   0x0
c0007412:	68 54 d4 01 c0       	push   0xc001d454
c0007417:	6a 03                	push   0x3
c0007419:	53                   	push   ebx
c000741a:	e8 65 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000741f:	83 c4 20             	add    esp,0x20
c0007422:	6a 00                	push   0x0
c0007424:	68 5e d4 01 c0       	push   0xc001d45e
c0007429:	6a 04                	push   0x4
c000742b:	53                   	push   ebx
c000742c:	e8 53 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007431:	6a 00                	push   0x0
c0007433:	68 68 d4 01 c0       	push   0xc001d468
c0007438:	6a 05                	push   0x5
c000743a:	53                   	push   ebx
c000743b:	e8 44 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007440:	83 c4 20             	add    esp,0x20
c0007443:	6a 00                	push   0x0
c0007445:	68 72 d4 01 c0       	push   0xc001d472
c000744a:	6a 06                	push   0x6
c000744c:	53                   	push   ebx
c000744d:	e8 32 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007452:	6a 00                	push   0x0
c0007454:	68 7c d4 01 c0       	push   0xc001d47c
c0007459:	6a 07                	push   0x7
c000745b:	53                   	push   ebx
c000745c:	e8 23 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	6a 00                	push   0x0
c0007466:	68 86 d4 01 c0       	push   0xc001d486
c000746b:	6a 08                	push   0x8
c000746d:	53                   	push   ebx
c000746e:	e8 11 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007473:	6a 00                	push   0x0
c0007475:	68 8e d4 01 c0       	push   0xc001d48e
c000747a:	6a 09                	push   0x9
c000747c:	53                   	push   ebx
c000747d:	e8 02 ff ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007482:	83 c4 20             	add    esp,0x20
c0007485:	6a 00                	push   0x0
c0007487:	68 98 d4 01 c0       	push   0xc001d498
c000748c:	6a 0a                	push   0xa
c000748e:	53                   	push   ebx
c000748f:	e8 f0 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007494:	6a 00                	push   0x0
c0007496:	68 a0 d4 01 c0       	push   0xc001d4a0
c000749b:	6a 0b                	push   0xb
c000749d:	53                   	push   ebx
c000749e:	e8 e1 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074a3:	83 c4 20             	add    esp,0x20
c00074a6:	6a 00                	push   0x0
c00074a8:	68 a8 d4 01 c0       	push   0xc001d4a8
c00074ad:	6a 0c                	push   0xc
c00074af:	53                   	push   ebx
c00074b0:	e8 cf fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074b5:	6a 00                	push   0x0
c00074b7:	68 b0 d4 01 c0       	push   0xc001d4b0
c00074bc:	6a 0d                	push   0xd
c00074be:	53                   	push   ebx
c00074bf:	e8 c0 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074c4:	83 c4 20             	add    esp,0x20
c00074c7:	6a 00                	push   0x0
c00074c9:	68 ca d4 01 c0       	push   0xc001d4ca
c00074ce:	6a 0e                	push   0xe
c00074d0:	53                   	push   ebx
c00074d1:	e8 ae fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074d6:	6a 00                	push   0x0
c00074d8:	68 d2 d4 01 c0       	push   0xc001d4d2
c00074dd:	6a 0f                	push   0xf
c00074df:	53                   	push   ebx
c00074e0:	e8 9f fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074e5:	83 c4 20             	add    esp,0x20
c00074e8:	6a 00                	push   0x0
c00074ea:	68 dc d4 01 c0       	push   0xc001d4dc
c00074ef:	6a 10                	push   0x10
c00074f1:	53                   	push   ebx
c00074f2:	e8 8d fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00074f7:	6a 00                	push   0x0
c00074f9:	68 e6 d4 01 c0       	push   0xc001d4e6
c00074fe:	6a 11                	push   0x11
c0007500:	53                   	push   ebx
c0007501:	e8 7e fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007506:	83 c4 20             	add    esp,0x20
c0007509:	6a 00                	push   0x0
c000750b:	68 f0 d4 01 c0       	push   0xc001d4f0
c0007510:	6a 12                	push   0x12
c0007512:	53                   	push   ebx
c0007513:	e8 6c fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007518:	6a 01                	push   0x1
c000751a:	68 8a d5 01 c0       	push   0xc001d58a
c000751f:	6a 60                	push   0x60
c0007521:	53                   	push   ebx
c0007522:	e8 5d fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007527:	83 c4 20             	add    esp,0x20
c000752a:	6a 00                	push   0x0
c000752c:	68 91 d5 01 c0       	push   0xc001d591
c0007531:	6a 20                	push   0x20
c0007533:	53                   	push   ebx
c0007534:	e8 4b fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007539:	6a 00                	push   0x0
c000753b:	68 7c d5 01 c0       	push   0xc001d57c
c0007540:	6a 21                	push   0x21
c0007542:	53                   	push   ebx
c0007543:	e8 3c fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007548:	83 c4 20             	add    esp,0x20
c000754b:	6a 00                	push   0x0
c000754d:	68 83 d5 01 c0       	push   0xc001d583
c0007552:	6a 22                	push   0x22
c0007554:	53                   	push   ebx
c0007555:	e8 2a fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000755a:	6a 00                	push   0x0
c000755c:	68 fa d4 01 c0       	push   0xc001d4fa
c0007561:	6a 23                	push   0x23
c0007563:	53                   	push   ebx
c0007564:	e8 1b fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007569:	83 c4 20             	add    esp,0x20
c000756c:	6a 00                	push   0x0
c000756e:	68 04 d5 01 c0       	push   0xc001d504
c0007573:	6a 24                	push   0x24
c0007575:	53                   	push   ebx
c0007576:	e8 09 fe ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000757b:	6a 00                	push   0x0
c000757d:	68 0e d5 01 c0       	push   0xc001d50e
c0007582:	6a 25                	push   0x25
c0007584:	53                   	push   ebx
c0007585:	e8 fa fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000758a:	83 c4 20             	add    esp,0x20
c000758d:	6a 00                	push   0x0
c000758f:	68 18 d5 01 c0       	push   0xc001d518
c0007594:	6a 26                	push   0x26
c0007596:	53                   	push   ebx
c0007597:	e8 e8 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000759c:	6a 00                	push   0x0
c000759e:	68 22 d5 01 c0       	push   0xc001d522
c00075a3:	6a 27                	push   0x27
c00075a5:	53                   	push   ebx
c00075a6:	e8 d9 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075ab:	83 c4 20             	add    esp,0x20
c00075ae:	6a 00                	push   0x0
c00075b0:	68 2c d5 01 c0       	push   0xc001d52c
c00075b5:	6a 28                	push   0x28
c00075b7:	53                   	push   ebx
c00075b8:	e8 c7 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075bd:	6a 00                	push   0x0
c00075bf:	68 36 d5 01 c0       	push   0xc001d536
c00075c4:	6a 29                	push   0x29
c00075c6:	53                   	push   ebx
c00075c7:	e8 b8 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075cc:	83 c4 20             	add    esp,0x20
c00075cf:	6a 00                	push   0x0
c00075d1:	68 40 d5 01 c0       	push   0xc001d540
c00075d6:	6a 2a                	push   0x2a
c00075d8:	53                   	push   ebx
c00075d9:	e8 a6 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075de:	6a 00                	push   0x0
c00075e0:	68 4a d5 01 c0       	push   0xc001d54a
c00075e5:	6a 2b                	push   0x2b
c00075e7:	53                   	push   ebx
c00075e8:	e8 97 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075ed:	83 c4 20             	add    esp,0x20
c00075f0:	6a 00                	push   0x0
c00075f2:	68 54 d5 01 c0       	push   0xc001d554
c00075f7:	6a 2c                	push   0x2c
c00075f9:	53                   	push   ebx
c00075fa:	e8 85 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00075ff:	6a 00                	push   0x0
c0007601:	68 5e d5 01 c0       	push   0xc001d55e
c0007606:	6a 2d                	push   0x2d
c0007608:	53                   	push   ebx
c0007609:	e8 76 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000760e:	83 c4 20             	add    esp,0x20
c0007611:	6a 00                	push   0x0
c0007613:	68 68 d5 01 c0       	push   0xc001d568
c0007618:	6a 2e                	push   0x2e
c000761a:	53                   	push   ebx
c000761b:	e8 64 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007620:	6a 00                	push   0x0
c0007622:	68 72 d5 01 c0       	push   0xc001d572
c0007627:	6a 2f                	push   0x2f
c0007629:	53                   	push   ebx
c000762a:	e8 55 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c000762f:	83 c4 20             	add    esp,0x20
c0007632:	6a 00                	push   0x0
c0007634:	68 cc d6 01 c0       	push   0xc001d6cc
c0007639:	6a 30                	push   0x30
c000763b:	53                   	push   ebx
c000763c:	e8 43 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007641:	6a 00                	push   0x0
c0007643:	68 d6 d6 01 c0       	push   0xc001d6d6
c0007648:	6a 31                	push   0x31
c000764a:	53                   	push   ebx
c000764b:	e8 34 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007650:	83 c4 20             	add    esp,0x20
c0007653:	6a 00                	push   0x0
c0007655:	68 e0 d6 01 c0       	push   0xc001d6e0
c000765a:	6a 32                	push   0x32
c000765c:	53                   	push   ebx
c000765d:	e8 22 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007662:	6a 00                	push   0x0
c0007664:	68 ea d6 01 c0       	push   0xc001d6ea
c0007669:	6a 33                	push   0x33
c000766b:	53                   	push   ebx
c000766c:	e8 13 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007671:	83 c4 20             	add    esp,0x20
c0007674:	6a 00                	push   0x0
c0007676:	68 f4 d6 01 c0       	push   0xc001d6f4
c000767b:	6a 34                	push   0x34
c000767d:	53                   	push   ebx
c000767e:	e8 01 fd ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007683:	6a 00                	push   0x0
c0007685:	68 fe d6 01 c0       	push   0xc001d6fe
c000768a:	6a 35                	push   0x35
c000768c:	53                   	push   ebx
c000768d:	e8 f2 fc ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c0007692:	83 c4 20             	add    esp,0x20
c0007695:	6a 00                	push   0x0
c0007697:	68 08 d7 01 c0       	push   0xc001d708
c000769c:	6a 36                	push   0x36
c000769e:	53                   	push   ebx
c000769f:	e8 e0 fc ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00076a4:	6a 00                	push   0x0
c00076a6:	68 12 d7 01 c0       	push   0xc001d712
c00076ab:	6a 37                	push   0x37
c00076ad:	53                   	push   ebx
c00076ae:	e8 d1 fc ff ff       	call   c0007384 <IDT::addEntry(int, void (*)(), bool)>
c00076b3:	83 c4 1c             	add    esp,0x1c
c00076b6:	6a 03                	push   0x3
c00076b8:	6a 02                	push   0x2
c00076ba:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c00076c0:	e8 3f 24 00 00       	call   c0009b04 <VAS::allocatePages(int, int)>
c00076c5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00076cc:	89 c6                	mov    esi,eax
c00076ce:	e8 92 01 00 00       	call   c0007865 <malloc>
c00076d3:	81 c6 00 20 00 00    	add    esi,0x2000
c00076d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00076dc:	89 c7                	mov    edi,eax
c00076de:	e8 9d 15 00 00       	call   c0008c80 <TSS::TSS()>
c00076e3:	83 c4 0c             	add    esp,0xc
c00076e6:	68 86 d4 01 c0       	push   0xc001d486
c00076eb:	56                   	push   esi
c00076ec:	57                   	push   edi
c00076ed:	e8 d2 15 00 00       	call   c0008cc4 <TSS::setup(unsigned long, unsigned long)>
c00076f2:	89 c6                	mov    esi,eax
c00076f4:	58                   	pop    eax
c00076f5:	5a                   	pop    edx
c00076f6:	6a 00                	push   0x0
c00076f8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00076fc:	50                   	push   eax
c00076fd:	e8 d6 fb ff ff       	call   c00072d8 <IDTEntry::IDTEntry(bool)>
c0007702:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007706:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000770b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007712:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000771c:	80 ce 05             	or     dh,0x5
c000771f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007722:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007726:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000772a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000772d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007730:	e8 87 fc ff ff       	call   c00073bc <IDT::flush()>
c0007735:	83 c4 20             	add    esp,0x20
c0007738:	5b                   	pop    ebx
c0007739:	5e                   	pop    esi
c000773a:	5f                   	pop    edi
c000773b:	c3                   	ret    

c000773c <sbrk>:
c000773c:	55                   	push   ebp
c000773d:	57                   	push   edi
c000773e:	56                   	push   esi
c000773f:	53                   	push   ebx
c0007740:	83 ec 1c             	sub    esp,0x1c
c0007743:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007747:	85 c0                	test   eax,eax
c0007749:	74 5f                	je     c00077aa <sbrk+0x6e>
c000774b:	78 64                	js     c00077b1 <sbrk+0x75>
c000774d:	8b 15 34 12 02 c0    	mov    edx,DWORD PTR ds:0xc0021234
c0007753:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007757:	05 ff 0f 00 00       	add    eax,0xfff
c000775c:	89 c5                	mov    ebp,eax
c000775e:	78 69                	js     c00077c9 <sbrk+0x8d>
c0007760:	c1 fd 0c             	sar    ebp,0xc
c0007763:	bb 00 00 00 00       	mov    ebx,0x0
c0007768:	8b 35 b0 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fb0
c000776e:	8b 3d 34 12 02 c0    	mov    edi,DWORD PTR ds:0xc0021234
c0007774:	e8 c8 03 00 00       	call   c0007b41 <Phys::allocatePage()>
c0007779:	68 01 04 00 00       	push   0x401
c000777e:	57                   	push   edi
c000777f:	50                   	push   eax
c0007780:	56                   	push   esi
c0007781:	e8 7a 22 00 00       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0007786:	81 05 34 12 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0021234,0x1000
c0007790:	43                   	inc    ebx
c0007791:	83 c4 10             	add    esp,0x10
c0007794:	39 dd                	cmp    ebp,ebx
c0007796:	75 d0                	jne    c0007768 <sbrk+0x2c>
c0007798:	0f 20 d8             	mov    eax,cr3
c000779b:	0f 22 d8             	mov    cr3,eax
c000779e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00077a2:	83 c4 1c             	add    esp,0x1c
c00077a5:	5b                   	pop    ebx
c00077a6:	5e                   	pop    esi
c00077a7:	5f                   	pop    edi
c00077a8:	5d                   	pop    ebp
c00077a9:	c3                   	ret    
c00077aa:	a1 34 12 02 c0       	mov    eax,ds:0xc0021234
c00077af:	eb f1                	jmp    c00077a2 <sbrk+0x66>
c00077b1:	83 ec 08             	sub    esp,0x8
c00077b4:	50                   	push   eax
c00077b5:	68 18 f0 01 c0       	push   0xc001f018
c00077ba:	e8 3b 2e 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00077bf:	83 c4 10             	add    esp,0x10
c00077c2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00077c7:	eb d9                	jmp    c00077a2 <sbrk+0x66>
c00077c9:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c00077cf:	eb 8f                	jmp    c0007760 <sbrk+0x24>

c00077d1 <mmap>:
c00077d1:	83 ec 18             	sub    esp,0x18
c00077d4:	68 48 f0 01 c0       	push   0xc001f048
c00077d9:	e8 d1 8b 00 00       	call   c00103af <KePanic(char const*)>
c00077de:	b8 00 00 00 00       	mov    eax,0x0
c00077e3:	83 c4 1c             	add    esp,0x1c
c00077e6:	c3                   	ret    

c00077e7 <munmap>:
c00077e7:	83 ec 18             	sub    esp,0x18
c00077ea:	68 4d f0 01 c0       	push   0xc001f04d
c00077ef:	e8 bb 8b 00 00       	call   c00103af <KePanic(char const*)>
c00077f4:	b8 00 00 00 00       	mov    eax,0x0
c00077f9:	83 c4 1c             	add    esp,0x1c
c00077fc:	c3                   	ret    

c00077fd <liballoc_lock()>:
c00077fd:	fa                   	cli    
c00077fe:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0007804:	b8 00 00 00 00       	mov    eax,0x0
c0007809:	c3                   	ret    

c000780a <liballoc_unlock()>:
c000780a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000780f:	48                   	dec    eax
c0007810:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007815:	75 01                	jne    c0007818 <liballoc_unlock()+0xe>
c0007817:	fb                   	sti    
c0007818:	b8 00 00 00 00       	mov    eax,0x0
c000781d:	c3                   	ret    

c000781e <liballoc_alloc(int)>:
c000781e:	83 ec 10             	sub    esp,0x10
c0007821:	6a 01                	push   0x1
c0007823:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007827:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c000782d:	e8 d2 22 00 00       	call   c0009b04 <VAS::allocatePages(int, int)>
c0007832:	83 c4 1c             	add    esp,0x1c
c0007835:	c3                   	ret    

c0007836 <liballoc_free(void*, int)>:
c0007836:	83 ec 14             	sub    esp,0x14
c0007839:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000783d:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0007843:	e8 0e 1f 00 00       	call   c0009756 <VAS::freeAllocatedPages(unsigned long)>
c0007848:	b8 00 00 00 00       	mov    eax,0x0
c000784d:	83 c4 1c             	add    esp,0x1c
c0007850:	c3                   	ret    

c0007851 <realloc>:
c0007851:	83 ec 14             	sub    esp,0x14
c0007854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000785c:	e8 c0 9c ff ff       	call   c0001521 <dlrealloc>
c0007861:	83 c4 1c             	add    esp,0x1c
c0007864:	c3                   	ret    

c0007865 <malloc>:
c0007865:	83 ec 18             	sub    esp,0x18
c0007868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000786c:	e8 73 97 ff ff       	call   c0000fe4 <dlmalloc>
c0007871:	83 c4 1c             	add    esp,0x1c
c0007874:	c3                   	ret    

c0007875 <free>:
c0007875:	83 ec 18             	sub    esp,0x18
c0007878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000787c:	e8 08 94 ff ff       	call   c0000c89 <dlfree>
c0007881:	83 c4 1c             	add    esp,0x1c
c0007884:	c3                   	ret    

c0007885 <rfree>:
c0007885:	83 ec 18             	sub    esp,0x18
c0007888:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000788c:	e8 f8 93 ff ff       	call   c0000c89 <dlfree>
c0007891:	83 c4 1c             	add    esp,0x1c
c0007894:	c3                   	ret    

c0007895 <calloc>:
c0007895:	56                   	push   esi
c0007896:	53                   	push   ebx
c0007897:	83 ec 10             	sub    esp,0x10
c000789a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000789e:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00078a3:	53                   	push   ebx
c00078a4:	e8 bc ff ff ff       	call   c0007865 <malloc>
c00078a9:	89 c6                	mov    esi,eax
c00078ab:	83 c4 0c             	add    esp,0xc
c00078ae:	53                   	push   ebx
c00078af:	6a 00                	push   0x0
c00078b1:	50                   	push   eax
c00078b2:	e8 09 8c ff ff       	call   c00004c0 <memset>
c00078b7:	89 f0                	mov    eax,esi
c00078b9:	83 c4 14             	add    esp,0x14
c00078bc:	5b                   	pop    ebx
c00078bd:	5e                   	pop    esi
c00078be:	c3                   	ret    

c00078bf <KeEntryPoint>:
c00078bf:	57                   	push   edi
c00078c0:	bf f9 03 00 00       	mov    edi,0x3f9
c00078c5:	56                   	push   esi
c00078c6:	89 fa                	mov    edx,edi
c00078c8:	53                   	push   ebx
c00078c9:	31 f6                	xor    esi,esi
c00078cb:	83 ec 2c             	sub    esp,0x2c
c00078ce:	a1 00 05 00 00       	mov    eax,ds:0x500
c00078d3:	a3 d0 3e 02 c0       	mov    ds:0xc0023ed0,eax
c00078d8:	89 f0                	mov    eax,esi
c00078da:	ee                   	out    dx,al
c00078db:	bb fb 03 00 00       	mov    ebx,0x3fb
c00078e0:	b0 80                	mov    al,0x80
c00078e2:	89 da                	mov    edx,ebx
c00078e4:	ee                   	out    dx,al
c00078e5:	b1 03                	mov    cl,0x3
c00078e7:	ba f8 03 00 00       	mov    edx,0x3f8
c00078ec:	88 c8                	mov    al,cl
c00078ee:	ee                   	out    dx,al
c00078ef:	89 f0                	mov    eax,esi
c00078f1:	89 fa                	mov    edx,edi
c00078f3:	ee                   	out    dx,al
c00078f4:	88 c8                	mov    al,cl
c00078f6:	89 da                	mov    edx,ebx
c00078f8:	ee                   	out    dx,al
c00078f9:	b0 c7                	mov    al,0xc7
c00078fb:	ba fa 03 00 00       	mov    edx,0x3fa
c0007900:	ee                   	out    dx,al
c0007901:	b0 0b                	mov    al,0xb
c0007903:	ba fc 03 00 00       	mov    edx,0x3fc
c0007908:	ee                   	out    dx,al
c0007909:	68 54 f0 01 c0       	push   0xc001f054
c000790e:	e8 e7 2c 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0007913:	e8 b1 83 00 00       	call   c000fcc9 <KeDisplaySplashScreen()>
c0007918:	a1 24 05 00 00       	mov    eax,ds:0x524
c000791d:	05 ff 0f 00 00       	add    eax,0xfff
c0007922:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007927:	89 04 24             	mov    DWORD PTR [esp],eax
c000792a:	e8 64 03 00 00       	call   c0007c93 <Phys::physicalMemorySetup(unsigned int)>
c000792f:	e8 c8 1b 00 00       	call   c00094fc <Virt::virtualMemorySetup()>
c0007934:	58                   	pop    eax
c0007935:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007939:	53                   	push   ebx
c000793a:	e8 95 1e 00 00       	call   c00097d4 <VAS::VAS()>
c000793f:	89 1d b0 3f 02 c0    	mov    DWORD PTR ds:0xc0023fb0,ebx
c0007945:	e8 80 63 01 00       	call   c001dcca <_init>
c000794a:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007951:	e8 0f ff ff ff       	call   c0007865 <malloc>
c0007956:	89 04 24             	mov    DWORD PTR [esp],eax
c0007959:	89 c6                	mov    esi,eax
c000795b:	e8 7c f2 ff ff       	call   c0006bdc <Computer::Computer()>
c0007960:	6a 00                	push   0x0
c0007962:	89 35 b8 3e 02 c0    	mov    DWORD PTR ds:0xc0023eb8,esi
c0007968:	6a 00                	push   0x0
c000796a:	6a 00                	push   0x0
c000796c:	56                   	push   esi
c000796d:	e8 10 f6 ff ff       	call   c0006f82 <Computer::open(int, int, void*)>
c0007972:	83 c4 14             	add    esp,0x14
c0007975:	53                   	push   ebx
c0007976:	e8 21 1f 00 00       	call   c000989c <VAS::~VAS()>
c000797b:	83 c4 30             	add    esp,0x30
c000797e:	5b                   	pop    ebx
c000797f:	5e                   	pop    esi
c0007980:	5f                   	pop    edi
c0007981:	c3                   	ret    

c0007982 <Phys::allocateDMA(unsigned long)>:
c0007982:	55                   	push   ebp
c0007983:	31 ed                	xor    ebp,ebp
c0007985:	57                   	push   edi
c0007986:	56                   	push   esi
c0007987:	53                   	push   ebx
c0007988:	31 db                	xor    ebx,ebx
c000798a:	83 ec 1c             	sub    esp,0x1c
c000798d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007991:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007999:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000799f:	31 c0                	xor    eax,eax
c00079a1:	c1 ef 0c             	shr    edi,0xc
c00079a4:	eb 19                	jmp    c00079bf <Phys::allocateDMA(unsigned long)+0x3d>
c00079a6:	85 c0                	test   eax,eax
c00079a8:	75 06                	jne    c00079b0 <Phys::allocateDMA(unsigned long)+0x2e>
c00079aa:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00079ae:	89 dd                	mov    ebp,ebx
c00079b0:	8d 70 01             	lea    esi,[eax+0x1]
c00079b3:	39 f7                	cmp    edi,esi
c00079b5:	74 33                	je     c00079ea <Phys::allocateDMA(unsigned long)+0x68>
c00079b7:	89 f0                	mov    eax,esi
c00079b9:	43                   	inc    ebx
c00079ba:	83 fb 0f             	cmp    ebx,0xf
c00079bd:	7f 11                	jg     c00079d0 <Phys::allocateDMA(unsigned long)+0x4e>
c00079bf:	80 bb ec 3e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdc114],0x0
c00079c6:	74 de                	je     c00079a6 <Phys::allocateDMA(unsigned long)+0x24>
c00079c8:	31 c0                	xor    eax,eax
c00079ca:	43                   	inc    ebx
c00079cb:	83 fb 0f             	cmp    ebx,0xf
c00079ce:	7e ef                	jle    c00079bf <Phys::allocateDMA(unsigned long)+0x3d>
c00079d0:	83 ec 0c             	sub    esp,0xc
c00079d3:	68 6c f0 01 c0       	push   0xc001f06c
c00079d8:	e8 d2 89 00 00       	call   c00103af <KePanic(char const*)>
c00079dd:	83 c4 10             	add    esp,0x10
c00079e0:	31 c0                	xor    eax,eax
c00079e2:	83 c4 1c             	add    esp,0x1c
c00079e5:	5b                   	pop    ebx
c00079e6:	5e                   	pop    esi
c00079e7:	5f                   	pop    edi
c00079e8:	5d                   	pop    ebp
c00079e9:	c3                   	ret    
c00079ea:	89 e9                	mov    ecx,ebp
c00079ec:	c1 f9 04             	sar    ecx,0x4
c00079ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00079f3:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c00079f7:	89 ca                	mov    edx,ecx
c00079f9:	4a                   	dec    edx
c00079fa:	79 03                	jns    c00079ff <Phys::allocateDMA(unsigned long)+0x7d>
c00079fc:	8d 51 0e             	lea    edx,[ecx+0xe]
c00079ff:	c1 fa 04             	sar    edx,0x4
c0007a02:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007a06:	74 08                	je     c0007a10 <Phys::allocateDMA(unsigned long)+0x8e>
c0007a08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007a0c:	31 c0                	xor    eax,eax
c0007a0e:	eb ba                	jmp    c00079ca <Phys::allocateDMA(unsigned long)+0x48>
c0007a10:	85 f6                	test   esi,esi
c0007a12:	74 15                	je     c0007a29 <Phys::allocateDMA(unsigned long)+0xa7>
c0007a14:	8d 95 ec 3e 02 c0    	lea    edx,[ebp-0x3ffdc114]
c0007a1a:	8d 84 05 ed 3e 02 c0 	lea    eax,[ebp+eax*1-0x3ffdc113]
c0007a21:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007a24:	42                   	inc    edx
c0007a25:	39 d0                	cmp    eax,edx
c0007a27:	75 f8                	jne    c0007a21 <Phys::allocateDMA(unsigned long)+0x9f>
c0007a29:	01 3d e4 3e 02 c0    	add    DWORD PTR ds:0xc0023ee4,edi
c0007a2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a33:	85 c0                	test   eax,eax
c0007a35:	74 17                	je     c0007a4e <Phys::allocateDMA(unsigned long)+0xcc>
c0007a37:	83 ec 0c             	sub    esp,0xc
c0007a3a:	68 6c f0 01 c0       	push   0xc001f06c
c0007a3f:	e8 6b 89 00 00       	call   c00103af <KePanic(char const*)>
c0007a44:	83 c4 10             	add    esp,0x10
c0007a47:	89 f0                	mov    eax,esi
c0007a49:	e9 6b ff ff ff       	jmp    c00079b9 <Phys::allocateDMA(unsigned long)+0x37>
c0007a4e:	c1 e5 0c             	shl    ebp,0xc
c0007a51:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007a57:	eb 89                	jmp    c00079e2 <Phys::allocateDMA(unsigned long)+0x60>

c0007a59 <Phys::freeDMA(unsigned long, unsigned long)>:
c0007a59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a5d:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007a63:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a67:	c1 ea 0c             	shr    edx,0xc
c0007a6a:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007a6f:	29 15 e4 3e 02 c0    	sub    DWORD PTR ds:0xc0023ee4,edx
c0007a75:	c1 e8 0c             	shr    eax,0xc
c0007a78:	85 d2                	test   edx,edx
c0007a7a:	74 0f                	je     c0007a8b <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007a7c:	05 ec 3e 02 c0       	add    eax,0xc0023eec
c0007a81:	01 c2                	add    edx,eax
c0007a83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007a86:	40                   	inc    eax
c0007a87:	39 d0                	cmp    eax,edx
c0007a89:	75 f8                	jne    c0007a83 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007a8b:	c3                   	ret    

c0007a8c <Phys::setPageState(unsigned long, bool)>:
c0007a8c:	56                   	push   esi
c0007a8d:	ba 01 00 00 00       	mov    edx,0x1
c0007a92:	53                   	push   ebx
c0007a93:	8b 35 38 12 02 c0    	mov    esi,DWORD PTR ds:0xc0021238
c0007a99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007a9d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007aa1:	89 c8                	mov    eax,ecx
c0007aa3:	83 e1 07             	and    ecx,0x7
c0007aa6:	c1 e8 03             	shr    eax,0x3
c0007aa9:	d3 e3                	shl    ebx,cl
c0007aab:	01 c6                	add    esi,eax
c0007aad:	d3 e2                	shl    edx,cl
c0007aaf:	f7 d2                	not    edx
c0007ab1:	20 16                	and    BYTE PTR [esi],dl
c0007ab3:	03 05 38 12 02 c0    	add    eax,DWORD PTR ds:0xc0021238
c0007ab9:	08 18                	or     BYTE PTR [eax],bl
c0007abb:	5b                   	pop    ebx
c0007abc:	5e                   	pop    esi
c0007abd:	c3                   	ret    

c0007abe <Phys::getPageState(unsigned long)>:
c0007abe:	53                   	push   ebx
c0007abf:	8b 15 38 12 02 c0    	mov    edx,DWORD PTR ds:0xc0021238
c0007ac5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007ac9:	31 db                	xor    ebx,ebx
c0007acb:	89 c8                	mov    eax,ecx
c0007acd:	83 e1 07             	and    ecx,0x7
c0007ad0:	c1 e8 03             	shr    eax,0x3
c0007ad3:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007ad6:	89 d8                	mov    eax,ebx
c0007ad8:	5b                   	pop    ebx
c0007ad9:	d3 f8                	sar    eax,cl
c0007adb:	83 e0 01             	and    eax,0x1
c0007ade:	c3                   	ret    

c0007adf <Phys::freePage(unsigned long)>:
c0007adf:	53                   	push   ebx
c0007ae0:	83 ec 08             	sub    esp,0x8
c0007ae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ae7:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007aed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007af3:	76 3a                	jbe    c0007b2f <Phys::freePage(unsigned long)+0x50>
c0007af5:	c1 e8 0c             	shr    eax,0xc
c0007af8:	50                   	push   eax
c0007af9:	89 c3                	mov    ebx,eax
c0007afb:	e8 be ff ff ff       	call   c0007abe <Phys::getPageState(unsigned long)>
c0007b00:	5a                   	pop    edx
c0007b01:	84 c0                	test   al,al
c0007b03:	74 19                	je     c0007b1e <Phys::freePage(unsigned long)+0x3f>
c0007b05:	83 ec 08             	sub    esp,0x8
c0007b08:	ff 0d e4 3e 02 c0    	dec    DWORD PTR ds:0xc0023ee4
c0007b0e:	6a 00                	push   0x0
c0007b10:	53                   	push   ebx
c0007b11:	e8 76 ff ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007b16:	83 c4 10             	add    esp,0x10
c0007b19:	83 c4 08             	add    esp,0x8
c0007b1c:	5b                   	pop    ebx
c0007b1d:	c3                   	ret    
c0007b1e:	c7 44 24 10 11 f1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f111
c0007b26:	83 c4 08             	add    esp,0x8
c0007b29:	5b                   	pop    ebx
c0007b2a:	e9 80 88 00 00       	jmp    c00103af <KePanic(char const*)>
c0007b2f:	68 00 10 00 00       	push   0x1000
c0007b34:	50                   	push   eax
c0007b35:	e8 1f ff ff ff       	call   c0007a59 <Phys::freeDMA(unsigned long, unsigned long)>
c0007b3a:	59                   	pop    ecx
c0007b3b:	5b                   	pop    ebx
c0007b3c:	83 c4 08             	add    esp,0x8
c0007b3f:	5b                   	pop    ebx
c0007b40:	c3                   	ret    

c0007b41 <Phys::allocatePage()>:
c0007b41:	56                   	push   esi
c0007b42:	53                   	push   ebx
c0007b43:	83 ec 14             	sub    esp,0x14
c0007b46:	8b 35 d8 3e 02 c0    	mov    esi,DWORD PTR ds:0xc0023ed8
c0007b4c:	89 f3                	mov    ebx,esi
c0007b4e:	eb 0a                	jmp    c0007b5a <Phys::allocatePage()+0x19>
c0007b50:	89 1d d8 3e 02 c0    	mov    DWORD PTR ds:0xc0023ed8,ebx
c0007b56:	39 de                	cmp    esi,ebx
c0007b58:	74 24                	je     c0007b7e <Phys::allocatePage()+0x3d>
c0007b5a:	53                   	push   ebx
c0007b5b:	e8 5e ff ff ff       	call   c0007abe <Phys::getPageState(unsigned long)>
c0007b60:	5a                   	pop    edx
c0007b61:	84 c0                	test   al,al
c0007b63:	74 5f                	je     c0007bc4 <Phys::allocatePage()+0x83>
c0007b65:	43                   	inc    ebx
c0007b66:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007b6c:	75 e2                	jne    c0007b50 <Phys::allocatePage()+0xf>
c0007b6e:	31 db                	xor    ebx,ebx
c0007b70:	c7 05 d8 3e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023ed8,0x0
c0007b7a:	39 de                	cmp    esi,ebx
c0007b7c:	75 dc                	jne    c0007b5a <Phys::allocatePage()+0x19>
c0007b7e:	83 ec 0c             	sub    esp,0xc
c0007b81:	80 35 fc 3e 02 c0 01 	xor    BYTE PTR ds:0xc0023efc,0x1
c0007b88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007b8d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007b90:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007b96:	50                   	push   eax
c0007b97:	e8 42 27 00 00       	call   c000a2de <VAS::scanForEviction()>
c0007b9c:	83 c4 10             	add    esp,0x10
c0007b9f:	85 c0                	test   eax,eax
c0007ba1:	75 3f                	jne    c0007be2 <Phys::allocatePage()+0xa1>
c0007ba3:	83 ec 0c             	sub    esp,0xc
c0007ba6:	68 94 f0 01 c0       	push   0xc001f094
c0007bab:	e8 ff 87 00 00       	call   c00103af <KePanic(char const*)>
c0007bb0:	83 c4 10             	add    esp,0x10
c0007bb3:	8b 1d d8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023ed8
c0007bb9:	53                   	push   ebx
c0007bba:	e8 ff fe ff ff       	call   c0007abe <Phys::getPageState(unsigned long)>
c0007bbf:	5a                   	pop    edx
c0007bc0:	84 c0                	test   al,al
c0007bc2:	75 a1                	jne    c0007b65 <Phys::allocatePage()+0x24>
c0007bc4:	6a 01                	push   0x1
c0007bc6:	53                   	push   ebx
c0007bc7:	e8 c0 fe ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007bcc:	a1 d8 3e 02 c0       	mov    eax,ds:0xc0023ed8
c0007bd1:	5a                   	pop    edx
c0007bd2:	ff 05 e4 3e 02 c0    	inc    DWORD PTR ds:0xc0023ee4
c0007bd8:	c1 e0 0c             	shl    eax,0xc
c0007bdb:	59                   	pop    ecx
c0007bdc:	83 c4 14             	add    esp,0x14
c0007bdf:	5b                   	pop    ebx
c0007be0:	5e                   	pop    esi
c0007be1:	c3                   	ret    
c0007be2:	83 ec 08             	sub    esp,0x8
c0007be5:	89 c2                	mov    edx,eax
c0007be7:	6a 01                	push   0x1
c0007be9:	c1 ea 0c             	shr    edx,0xc
c0007bec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bf0:	52                   	push   edx
c0007bf1:	e8 96 fe ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007bf6:	83 c4 10             	add    esp,0x10
c0007bf9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bfd:	eb dd                	jmp    c0007bdc <Phys::allocatePage()+0x9b>

c0007bff <Phys::allocateContiguousPages(int)>:
c0007bff:	57                   	push   edi
c0007c00:	56                   	push   esi
c0007c01:	53                   	push   ebx
c0007c02:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c06:	fa                   	cli    
c0007c07:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0007c0d:	31 db                	xor    ebx,ebx
c0007c0f:	85 db                	test   ebx,ebx
c0007c11:	75 11                	jne    c0007c24 <Phys::allocateContiguousPages(int)+0x25>
c0007c13:	e8 29 ff ff ff       	call   c0007b41 <Phys::allocatePage()>
c0007c18:	83 fe 01             	cmp    esi,0x1
c0007c1b:	89 c7                	mov    edi,eax
c0007c1d:	74 21                	je     c0007c40 <Phys::allocateContiguousPages(int)+0x41>
c0007c1f:	bb 01 00 00 00       	mov    ebx,0x1
c0007c24:	e8 18 ff ff ff       	call   c0007b41 <Phys::allocatePage()>
c0007c29:	89 da                	mov    edx,ebx
c0007c2b:	c1 e2 0c             	shl    edx,0xc
c0007c2e:	01 fa                	add    edx,edi
c0007c30:	39 c2                	cmp    edx,eax
c0007c32:	74 20                	je     c0007c54 <Phys::allocateContiguousPages(int)+0x55>
c0007c34:	bb 01 00 00 00       	mov    ebx,0x1
c0007c39:	89 c7                	mov    edi,eax
c0007c3b:	83 fe 01             	cmp    esi,0x1
c0007c3e:	75 e4                	jne    c0007c24 <Phys::allocateContiguousPages(int)+0x25>
c0007c40:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0007c45:	48                   	dec    eax
c0007c46:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0007c4b:	75 01                	jne    c0007c4e <Phys::allocateContiguousPages(int)+0x4f>
c0007c4d:	fb                   	sti    
c0007c4e:	89 f8                	mov    eax,edi
c0007c50:	5b                   	pop    ebx
c0007c51:	5e                   	pop    esi
c0007c52:	5f                   	pop    edi
c0007c53:	c3                   	ret    
c0007c54:	43                   	inc    ebx
c0007c55:	39 f3                	cmp    ebx,esi
c0007c57:	75 b6                	jne    c0007c0f <Phys::allocateContiguousPages(int)+0x10>
c0007c59:	eb e5                	jmp    c0007c40 <Phys::allocateContiguousPages(int)+0x41>

c0007c5b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007c5b:	56                   	push   esi
c0007c5c:	53                   	push   ebx
c0007c5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007c61:	39 1d dc 3e 02 c0    	cmp    DWORD PTR ds:0xc0023edc,ebx
c0007c67:	73 06                	jae    c0007c6f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007c69:	89 1d dc 3e 02 c0    	mov    DWORD PTR ds:0xc0023edc,ebx
c0007c6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c73:	c1 eb 0c             	shr    ebx,0xc
c0007c76:	c1 e8 0c             	shr    eax,0xc
c0007c79:	39 d8                	cmp    eax,ebx
c0007c7b:	73 13                	jae    c0007c90 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007c7d:	6a 00                	push   0x0
c0007c7f:	8d 70 01             	lea    esi,[eax+0x1]
c0007c82:	50                   	push   eax
c0007c83:	e8 04 fe ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007c88:	5a                   	pop    edx
c0007c89:	89 f0                	mov    eax,esi
c0007c8b:	59                   	pop    ecx
c0007c8c:	39 f3                	cmp    ebx,esi
c0007c8e:	75 ed                	jne    c0007c7d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007c90:	5b                   	pop    ebx
c0007c91:	5e                   	pop    esi
c0007c92:	c3                   	ret    

c0007c93 <Phys::physicalMemorySetup(unsigned int)>:
c0007c93:	55                   	push   ebp
c0007c94:	57                   	push   edi
c0007c95:	56                   	push   esi
c0007c96:	53                   	push   ebx
c0007c97:	31 db                	xor    ebx,ebx
c0007c99:	83 ec 40             	sub    esp,0x40
c0007c9c:	6a 10                	push   0x10
c0007c9e:	6a 00                	push   0x0
c0007ca0:	68 ec 3e 02 c0       	push   0xc0023eec
c0007ca5:	e8 16 88 ff ff       	call   c00004c0 <memset>
c0007caa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007cae:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007cb3:	05 00 10 00 00       	add    eax,0x1000
c0007cb8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007cbc:	5a                   	pop    edx
c0007cbd:	59                   	pop    ecx
c0007cbe:	50                   	push   eax
c0007cbf:	68 27 f1 01 c0       	push   0xc001f127
c0007cc4:	e8 31 29 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0007cc9:	83 c4 10             	add    esp,0x10
c0007ccc:	83 ec 08             	sub    esp,0x8
c0007ccf:	6a 01                	push   0x1
c0007cd1:	53                   	push   ebx
c0007cd2:	43                   	inc    ebx
c0007cd3:	e8 b4 fd ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007cd8:	83 c4 10             	add    esp,0x10
c0007cdb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ce1:	75 e9                	jne    c0007ccc <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007ce3:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007ce9:	66 85 c0             	test   ax,ax
c0007cec:	0f 84 97 01 00 00    	je     c0007e89 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007cf2:	89 c7                	mov    edi,eax
c0007cf4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007cfc:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007d02:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007d07:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007d0b:	eb 15                	jmp    c0007d22 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007d0d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007d11:	83 c3 18             	add    ebx,0x18
c0007d14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d18:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007d1c:	0f 84 77 01 00 00    	je     c0007e99 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007d25:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007d28:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007d2b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007d2f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007d33:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007d35:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007d38:	01 f0                	add    eax,esi
c0007d3a:	55                   	push   ebp
c0007d3b:	11 fa                	adc    edx,edi
c0007d3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007d41:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007d45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007d49:	50                   	push   eax
c0007d4a:	56                   	push   esi
c0007d4b:	68 c4 f0 01 c0       	push   0xc001f0c4
c0007d50:	e8 a5 28 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0007d55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007d59:	83 c4 10             	add    esp,0x10
c0007d5c:	09 f8                	or     eax,edi
c0007d5e:	0f 85 35 01 00 00    	jne    c0007e99 <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007d64:	4d                   	dec    ebp
c0007d65:	75 a6                	jne    c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d67:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007d6b:	ba 00 00 08 00       	mov    edx,0x80000
c0007d70:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007d74:	39 f2                	cmp    edx,esi
c0007d76:	89 c1                	mov    ecx,eax
c0007d78:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007d80:	19 f9                	sbb    ecx,edi
c0007d82:	0f 82 a7 00 00 00    	jb     c0007e2f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d88:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007d8c:	89 c1                	mov    ecx,eax
c0007d8e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007d92:	0f 83 97 00 00 00    	jae    c0007e2f <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007d98:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007d9d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007da1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007da5:	39 fa                	cmp    edx,edi
c0007da7:	19 e8                	sbb    eax,ebp
c0007da9:	0f 82 9a 01 00 00    	jb     c0007f49 <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007daf:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007db3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007db7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007dbd:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007dc2:	83 d5 ff             	adc    ebp,0xffffffff
c0007dc5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007dc9:	31 c0                	xor    eax,eax
c0007dcb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007dcf:	39 fa                	cmp    edx,edi
c0007dd1:	89 c1                	mov    ecx,eax
c0007dd3:	19 e9                	sbb    ecx,ebp
c0007dd5:	0f 83 32 ff ff ff    	jae    c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007ddb:	be 00 00 08 00       	mov    esi,0x80000
c0007de0:	51                   	push   ecx
c0007de1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007de5:	57                   	push   edi
c0007de6:	56                   	push   esi
c0007de7:	68 e8 f0 01 c0       	push   0xc001f0e8
c0007dec:	e8 09 28 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0007df1:	5d                   	pop    ebp
c0007df2:	58                   	pop    eax
c0007df3:	57                   	push   edi
c0007df4:	56                   	push   esi
c0007df5:	e8 61 fe ff ff       	call   c0007c5b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007dfa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e02:	83 c4 0c             	add    esp,0xc
c0007e05:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007e09:	03 05 e8 3e 02 c0    	add    eax,DWORD PTR ds:0xc0023ee8
c0007e0f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007e16:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007e1b:	52                   	push   edx
c0007e1c:	50                   	push   eax
c0007e1d:	68 4d f1 01 c0       	push   0xc001f14d
c0007e22:	e8 d3 27 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0007e27:	83 c4 10             	add    esp,0x10
c0007e2a:	e9 de fe ff ff       	jmp    c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e2f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007e33:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007e37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007e3b:	39 ea                	cmp    edx,ebp
c0007e3d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007e41:	0f 82 c6 fe ff ff    	jb     c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e47:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007e4c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007e50:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007e54:	0f 83 b3 fe ff ff    	jae    c0007d0d <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007e5a:	39 ee                	cmp    esi,ebp
c0007e5c:	89 f8                	mov    eax,edi
c0007e5e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007e62:	0f 83 78 ff ff ff    	jae    c0007de0 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007e6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007e70:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007e74:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007e78:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007e7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e80:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007e84:	e9 57 ff ff ff       	jmp    c0007de0 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007e89:	83 ec 0c             	sub    esp,0xc
c0007e8c:	68 3f f1 01 c0       	push   0xc001f13f
c0007e91:	e8 19 85 00 00       	call   c00103af <KePanic(char const*)>
c0007e96:	83 c4 10             	add    esp,0x10
c0007e99:	83 ec 08             	sub    esp,0x8
c0007e9c:	bb 60 00 00 00       	mov    ebx,0x60
c0007ea1:	6a 00                	push   0x0
c0007ea3:	6a 06                	push   0x6
c0007ea5:	e8 e2 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007eaa:	58                   	pop    eax
c0007eab:	5a                   	pop    edx
c0007eac:	6a 00                	push   0x0
c0007eae:	6a 07                	push   0x7
c0007eb0:	e8 d7 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007eb5:	83 05 e8 3e 02 c0 02 	add    DWORD PTR ds:0xc0023ee8,0x2
c0007ebc:	83 c4 10             	add    esp,0x10
c0007ebf:	83 ec 08             	sub    esp,0x8
c0007ec2:	6a 00                	push   0x0
c0007ec4:	53                   	push   ebx
c0007ec5:	43                   	inc    ebx
c0007ec6:	e8 c1 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007ecb:	83 c4 10             	add    esp,0x10
c0007ece:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007ed4:	75 e9                	jne    c0007ebf <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007ed6:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007edb:	bb 40 01 00 00       	mov    ebx,0x140
c0007ee0:	83 c0 20             	add    eax,0x20
c0007ee3:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007ee8:	eb 22                	jmp    c0007f0c <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007eea:	83 ec 08             	sub    esp,0x8
c0007eed:	6a 00                	push   0x0
c0007eef:	53                   	push   ebx
c0007ef0:	43                   	inc    ebx
c0007ef1:	e8 96 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007ef6:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007efb:	83 c4 10             	add    esp,0x10
c0007efe:	40                   	inc    eax
c0007eff:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007f05:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f0a:	74 07                	je     c0007f13 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007f0c:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007f11:	7e d7                	jle    c0007eea <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007f13:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007f18:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007f1d:	7f 22                	jg     c0007f41 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007f1f:	83 ec 08             	sub    esp,0x8
c0007f22:	6a 00                	push   0x0
c0007f24:	53                   	push   ebx
c0007f25:	43                   	inc    ebx
c0007f26:	e8 61 fb ff ff       	call   c0007a8c <Phys::setPageState(unsigned long, bool)>
c0007f2b:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c0007f30:	83 c4 10             	add    esp,0x10
c0007f33:	40                   	inc    eax
c0007f34:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007f3a:	a3 e8 3e 02 c0       	mov    ds:0xc0023ee8,eax
c0007f3f:	75 d7                	jne    c0007f18 <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007f41:	83 c4 3c             	add    esp,0x3c
c0007f44:	5b                   	pop    ebx
c0007f45:	5e                   	pop    esi
c0007f46:	5f                   	pop    edi
c0007f47:	5d                   	pop    ebp
c0007f48:	c3                   	ret    
c0007f49:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007f51:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007f59:	e9 51 fe ff ff       	jmp    c0007daf <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007f5e <Pipe::isAtty()>:
c0007f5e:	31 c0                	xor    eax,eax
c0007f60:	c3                   	ret    
c0007f61:	90                   	nop

c0007f62 <Pipe::~Pipe()>:
c0007f62:	83 ec 0c             	sub    esp,0xc
c0007f65:	ba ac f1 01 c0       	mov    edx,0xc001f1ac
c0007f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f6e:	89 10                	mov    DWORD PTR [eax],edx
c0007f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007f74:	83 ec 0c             	sub    esp,0xc
c0007f77:	50                   	push   eax
c0007f78:	e8 5f 11 00 00       	call   c00090dc <UnixFile::~UnixFile()>
c0007f7d:	83 c4 10             	add    esp,0x10
c0007f80:	90                   	nop
c0007f81:	83 c4 0c             	add    esp,0xc
c0007f84:	c3                   	ret    
c0007f85:	90                   	nop

c0007f86 <Pipe::~Pipe()>:
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	83 ec 0c             	sub    esp,0xc
c0007f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007f90:	e8 cd ff ff ff       	call   c0007f62 <Pipe::~Pipe()>
c0007f95:	83 c4 10             	add    esp,0x10
c0007f98:	83 ec 08             	sub    esp,0x8
c0007f9b:	6a 20                	push   0x20
c0007f9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007fa1:	e8 5e 25 00 00       	call   c000a504 <operator delete(void*, unsigned long)>
c0007fa6:	83 c4 10             	add    esp,0x10
c0007fa9:	83 c4 0c             	add    esp,0xc
c0007fac:	c3                   	ret    
c0007fad:	90                   	nop

c0007fae <Pipe::write(unsigned long long, void*, int*)>:
c0007fae:	55                   	push   ebp
c0007faf:	57                   	push   edi
c0007fb0:	56                   	push   esi
c0007fb1:	53                   	push   ebx
c0007fb2:	83 ec 1c             	sub    esp,0x1c
c0007fb5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007fb9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007fbd:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007fc0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007fc4:	89 04 24             	mov    DWORD PTR [esp],eax
c0007fc7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007fcb:	89 d8                	mov    eax,ebx
c0007fcd:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007fd0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fd4:	89 d6                	mov    esi,edx
c0007fd6:	89 d7                	mov    edi,edx
c0007fd8:	c1 ff 1f             	sar    edi,0x1f
c0007fdb:	03 34 24             	add    esi,DWORD PTR [esp]
c0007fde:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007fe2:	c1 f8 1f             	sar    eax,0x1f
c0007fe5:	39 f3                	cmp    ebx,esi
c0007fe7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007feb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007fef:	19 f8                	sbb    eax,edi
c0007ff1:	b8 01 00 00 00       	mov    eax,0x1
c0007ff6:	72 6e                	jb     c0008066 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007ff8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007ffb:	01 d0                	add    eax,edx
c0007ffd:	99                   	cdq    
c0007ffe:	f7 fb                	idiv   ebx
c0008000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008004:	29 d3                	sub    ebx,edx
c0008006:	89 d7                	mov    edi,edx
c0008008:	89 de                	mov    esi,ebx
c000800a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000800d:	c1 fb 1f             	sar    ebx,0x1f
c0008010:	39 f2                	cmp    edx,esi
c0008012:	19 d8                	sbb    eax,ebx
c0008014:	b8 00 00 00 00       	mov    eax,0x0
c0008019:	72 04                	jb     c000801f <Pipe::write(unsigned long long, void*, int*)+0x71>
c000801b:	89 d0                	mov    eax,edx
c000801d:	29 f0                	sub    eax,esi
c000801f:	89 d3                	mov    ebx,edx
c0008021:	29 c3                	sub    ebx,eax
c0008023:	74 0b                	je     c0008030 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0008025:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0008028:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000802c:	89 d9                	mov    ecx,ebx
c000802e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008030:	85 c0                	test   eax,eax
c0008032:	74 0d                	je     c0008041 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0008034:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0008038:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000803b:	89 de                	mov    esi,ebx
c000803d:	89 c1                	mov    ecx,eax
c000803f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008041:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008044:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008049:	75 10                	jne    c000805b <Pipe::write(unsigned long long, void*, int*)+0xad>
c000804b:	83 ec 0c             	sub    esp,0xc
c000804e:	68 69 f1 01 c0       	push   0xc001f169
c0008053:	e8 57 83 00 00       	call   c00103af <KePanic(char const*)>
c0008058:	83 c4 10             	add    esp,0x10
c000805b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000805f:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008062:	89 08                	mov    DWORD PTR [eax],ecx
c0008064:	31 c0                	xor    eax,eax
c0008066:	83 c4 1c             	add    esp,0x1c
c0008069:	5b                   	pop    ebx
c000806a:	5e                   	pop    esi
c000806b:	5f                   	pop    edi
c000806c:	5d                   	pop    ebp
c000806d:	c3                   	ret    

c000806e <Pipe::read(unsigned long long, void*, int*)>:
c000806e:	55                   	push   ebp
c000806f:	57                   	push   edi
c0008070:	56                   	push   esi
c0008071:	53                   	push   ebx
c0008072:	83 ec 1c             	sub    esp,0x1c
c0008075:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008079:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000807d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0008081:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008084:	89 c8                	mov    eax,ecx
c0008086:	99                   	cdq    
c0008087:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000808b:	74 24                	je     c00080b1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000808d:	39 f9                	cmp    ecx,edi
c000808f:	89 d1                	mov    ecx,edx
c0008091:	19 f1                	sbb    ecx,esi
c0008093:	73 1c                	jae    c00080b1 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008095:	fa                   	cli    
c0008096:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000809c:	e8 0b c7 00 00       	call   c00147ac <schedule()>
c00080a1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00080a6:	48                   	dec    eax
c00080a7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00080ac:	75 d3                	jne    c0008081 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080ae:	fb                   	sti    
c00080af:	eb d0                	jmp    c0008081 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00080b1:	39 f8                	cmp    eax,edi
c00080b3:	89 d1                	mov    ecx,edx
c00080b5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00080b8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00080bc:	19 f1                	sbb    ecx,esi
c00080be:	73 07                	jae    c00080c7 <Pipe::read(unsigned long long, void*, int*)+0x59>
c00080c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00080c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00080c7:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00080ca:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00080cd:	29 f7                	sub    edi,esi
c00080cf:	89 f8                	mov    eax,edi
c00080d1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00080d5:	99                   	cdq    
c00080d6:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00080d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00080dd:	19 d0                	sbb    eax,edx
c00080df:	73 07                	jae    c00080e8 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c00080e1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00080e8:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00080eb:	89 ea                	mov    edx,ebp
c00080ed:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00080f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00080f6:	74 0d                	je     c0008105 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00080f8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00080fb:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00080ff:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008103:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008105:	85 d2                	test   edx,edx
c0008107:	74 11                	je     c000811a <Pipe::read(unsigned long long, void*, int*)+0xac>
c0008109:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000810d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008110:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008114:	89 d1                	mov    ecx,edx
c0008116:	89 c7                	mov    edi,eax
c0008118:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000811a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000811d:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008120:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008123:	99                   	cdq    
c0008124:	89 f7                	mov    edi,esi
c0008126:	03 04 24             	add    eax,DWORD PTR [esp]
c0008129:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000812d:	c1 ff 1f             	sar    edi,0x1f
c0008130:	57                   	push   edi
c0008131:	56                   	push   esi
c0008132:	52                   	push   edx
c0008133:	50                   	push   eax
c0008134:	e8 77 5a 01 00       	call   c001dbb0 <__umoddi3>
c0008139:	83 c4 10             	add    esp,0x10
c000813c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000813f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008144:	75 10                	jne    c0008156 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008146:	83 ec 0c             	sub    esp,0xc
c0008149:	68 86 f1 01 c0       	push   0xc001f186
c000814e:	e8 5c 82 00 00       	call   c00103af <KePanic(char const*)>
c0008153:	83 c4 10             	add    esp,0x10
c0008156:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000815a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000815d:	89 10                	mov    DWORD PTR [eax],edx
c000815f:	83 c4 1c             	add    esp,0x1c
c0008162:	31 c0                	xor    eax,eax
c0008164:	5b                   	pop    ebx
c0008165:	5e                   	pop    esi
c0008166:	5f                   	pop    edi
c0008167:	5d                   	pop    ebp
c0008168:	c3                   	ret    
c0008169:	90                   	nop

c000816a <Pipe::Pipe(int)>:
c000816a:	83 ec 0c             	sub    esp,0xc
c000816d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008171:	83 ec 08             	sub    esp,0x8
c0008174:	6a 00                	push   0x0
c0008176:	50                   	push   eax
c0008177:	e8 7e 0d 00 00       	call   c0008efa <UnixFile::UnixFile(int)>
c000817c:	83 c4 10             	add    esp,0x10
c000817f:	ba ac f1 01 c0       	mov    edx,0xc001f1ac
c0008184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008188:	89 10                	mov    DWORD PTR [eax],edx
c000818a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000818e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008192:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008199:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00081a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081a4:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00081ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00081af:	83 ec 0c             	sub    esp,0xc
c00081b2:	50                   	push   eax
c00081b3:	e8 ad f6 ff ff       	call   c0007865 <malloc>
c00081b8:	83 c4 10             	add    esp,0x10
c00081bb:	89 c2                	mov    edx,eax
c00081bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081c1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00081c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081c8:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00081cc:	90                   	nop
c00081cd:	83 c4 0c             	add    esp,0xc
c00081d0:	c3                   	ret    
c00081d1:	90                   	nop

c00081d2 <VgaText::isAtty()>:
c00081d2:	b0 01                	mov    al,0x1
c00081d4:	c3                   	ret    
c00081d5:	90                   	nop

c00081d6 <VgaText::~VgaText()>:
c00081d6:	83 ec 0c             	sub    esp,0xc
c00081d9:	ba f4 f1 01 c0       	mov    edx,0xc001f1f4
c00081de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081e2:	89 10                	mov    DWORD PTR [eax],edx
c00081e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00081e8:	83 ec 0c             	sub    esp,0xc
c00081eb:	50                   	push   eax
c00081ec:	e8 eb 0e 00 00       	call   c00090dc <UnixFile::~UnixFile()>
c00081f1:	83 c4 10             	add    esp,0x10
c00081f4:	90                   	nop
c00081f5:	83 c4 0c             	add    esp,0xc
c00081f8:	c3                   	ret    
c00081f9:	90                   	nop

c00081fa <VgaText::~VgaText()>:
c00081fa:	83 ec 0c             	sub    esp,0xc
c00081fd:	83 ec 0c             	sub    esp,0xc
c0008200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008204:	e8 cd ff ff ff       	call   c00081d6 <VgaText::~VgaText()>
c0008209:	83 c4 10             	add    esp,0x10
c000820c:	83 ec 08             	sub    esp,0x8
c000820f:	68 84 01 00 00       	push   0x184
c0008214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008218:	e8 e7 22 00 00       	call   c000a504 <operator delete(void*, unsigned long)>
c000821d:	83 c4 10             	add    esp,0x10
c0008220:	83 c4 0c             	add    esp,0xc
c0008223:	c3                   	ret    

c0008224 <VgaText::read(unsigned long long, void*, int*)>:
c0008224:	83 ec 10             	sub    esp,0x10
c0008227:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000822b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000822f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008233:	e8 20 46 00 00       	call   c000c858 <readKeyboard(VgaText*, char*, unsigned long)>
c0008238:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000823c:	89 02                	mov    DWORD PTR [edx],eax
c000823e:	31 c0                	xor    eax,eax
c0008240:	83 c4 1c             	add    esp,0x1c
c0008243:	c3                   	ret    

c0008244 <setTerminalScrollLock(bool)>:
c0008244:	c3                   	ret    

c0008245 <doTerminalCycle()>:
c0008245:	c3                   	ret    

c0008246 <addToTerminalCycle(VgaText*)>:
c0008246:	c3                   	ret    

c0008247 <scrollTerminalScrollLock(int)>:
c0008247:	c3                   	ret    

c0008248 <VgaText::updateTitle()>:
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::load()>:
c000824a:	c3                   	ret    
c000824b:	90                   	nop

c000824c <VgaText::updateCursor()>:
c000824c:	83 ec 14             	sub    esp,0x14
c000824f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008253:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008256:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008259:	e8 66 f1 00 00       	call   c00173c4 <HalConsoleCursorUpdate(int, int)>
c000825e:	83 c4 1c             	add    esp,0x1c
c0008261:	c3                   	ret    

c0008262 <VgaText::doANSI_SGR(int)>:
c0008262:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826a:	85 d2                	test   edx,edx
c000826c:	75 0b                	jne    c0008279 <VgaText::doANSI_SGR(int)+0x17>
c000826e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008271:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008274:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008277:	eb 59                	jmp    c00082d2 <VgaText::doANSI_SGR(int)+0x70>
c0008279:	83 fa 07             	cmp    edx,0x7
c000827c:	75 0b                	jne    c0008289 <VgaText::doANSI_SGR(int)+0x27>
c000827e:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0008281:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008284:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008287:	eb 49                	jmp    c00082d2 <VgaText::doANSI_SGR(int)+0x70>
c0008289:	83 fa 1b             	cmp    edx,0x1b
c000828c:	74 e0                	je     c000826e <VgaText::doANSI_SGR(int)+0xc>
c000828e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0008291:	83 f9 07             	cmp    ecx,0x7
c0008294:	77 09                	ja     c000829f <VgaText::doANSI_SGR(int)+0x3d>
c0008296:	8b 14 8d 60 12 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdeda0]
c000829d:	eb 20                	jmp    c00082bf <VgaText::doANSI_SGR(int)+0x5d>
c000829f:	8d 4a d8             	lea    ecx,[edx-0x28]
c00082a2:	83 f9 07             	cmp    ecx,0x7
c00082a5:	77 09                	ja     c00082b0 <VgaText::doANSI_SGR(int)+0x4e>
c00082a7:	8b 14 8d 60 12 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdeda0]
c00082ae:	eb 22                	jmp    c00082d2 <VgaText::doANSI_SGR(int)+0x70>
c00082b0:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00082b3:	83 f9 07             	cmp    ecx,0x7
c00082b6:	77 0b                	ja     c00082c3 <VgaText::doANSI_SGR(int)+0x61>
c00082b8:	8b 14 95 18 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdeee8]
c00082bf:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082c2:	c3                   	ret    
c00082c3:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00082c6:	83 f9 07             	cmp    ecx,0x7
c00082c9:	77 0a                	ja     c00082d5 <VgaText::doANSI_SGR(int)+0x73>
c00082cb:	8b 14 95 f0 10 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef10]
c00082d2:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082d5:	c3                   	ret    

c00082d6 <VgaText::setDefaultBgColour(VgaColour)>:
c00082d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082de:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00082e1:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00082e4:	c3                   	ret    
c00082e5:	90                   	nop

c00082e6 <VgaText::setDefaultFgColour(VgaColour)>:
c00082e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00082ee:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00082f1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00082f4:	c3                   	ret    
c00082f5:	90                   	nop

c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00082f6:	53                   	push   ebx
c00082f7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00082fb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00082ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008303:	51                   	push   ecx
c0008304:	e8 cd ff ff ff       	call   c00082d6 <VgaText::setDefaultBgColour(VgaColour)>
c0008309:	58                   	pop    eax
c000830a:	5a                   	pop    edx
c000830b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000830f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008313:	5b                   	pop    ebx
c0008314:	eb d0                	jmp    c00082e6 <VgaText::setDefaultFgColour(VgaColour)>

c0008316 <VgaText::setTitleTextColour(VgaColour)>:
c0008316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000831a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000831e:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008321:	c3                   	ret    

c0008322 <VgaText::setTitleColour(VgaColour)>:
c0008322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008326:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000832a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000832d:	c3                   	ret    

c000832e <VgaText::setTitle(char*)>:
c000832e:	c3                   	ret    
c000832f:	90                   	nop

c0008330 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008330:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008334:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0008339:	83 e0 0f             	and    eax,0xf
c000833c:	c1 e2 04             	shl    edx,0x4
c000833f:	09 d0                	or     eax,edx
c0008341:	c3                   	ret    

c0008342 <VgaText::scrollScreen()>:
c0008342:	55                   	push   ebp
c0008343:	57                   	push   edi
c0008344:	56                   	push   esi
c0008345:	be 01 00 00 00       	mov    esi,0x1
c000834a:	53                   	push   ebx
c000834b:	83 ec 0c             	sub    esp,0xc
c000834e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008352:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008355:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000835b:	31 ff                	xor    edi,edi
c000835d:	01 e9                	add    ecx,ebp
c000835f:	8a 01                	mov    al,BYTE PTR [ecx]
c0008361:	83 fe 18             	cmp    esi,0x18
c0008364:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c000836a:	75 20                	jne    c000838c <VgaText::scrollScreen()+0x4a>
c000836c:	f7 c7 01 00 00 00    	test   edi,0x1
c0008372:	74 15                	je     c0008389 <VgaText::scrollScreen()+0x47>
c0008374:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008378:	50                   	push   eax
c0008379:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000837d:	50                   	push   eax
c000837e:	e8 ad ff ff ff       	call   c0008330 <VgaText::combineColours(unsigned char, unsigned char)>
c0008383:	5a                   	pop    edx
c0008384:	5a                   	pop    edx
c0008385:	88 01                	mov    BYTE PTR [ecx],al
c0008387:	eb 03                	jmp    c000838c <VgaText::scrollScreen()+0x4a>
c0008389:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000838c:	47                   	inc    edi
c000838d:	41                   	inc    ecx
c000838e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008394:	75 c9                	jne    c000835f <VgaText::scrollScreen()+0x1d>
c0008396:	46                   	inc    esi
c0008397:	83 fe 19             	cmp    esi,0x19
c000839a:	75 b9                	jne    c0008355 <VgaText::scrollScreen()+0x13>
c000839c:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c00083a2:	75 1f                	jne    c00083c3 <VgaText::scrollScreen()+0x81>
c00083a4:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00083a8:	74 05                	je     c00083af <VgaText::scrollScreen()+0x6d>
c00083aa:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00083ad:	eb 14                	jmp    c00083c3 <VgaText::scrollScreen()+0x81>
c00083af:	50                   	push   eax
c00083b0:	50                   	push   eax
c00083b1:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00083b5:	50                   	push   eax
c00083b6:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00083ba:	50                   	push   eax
c00083bb:	e8 90 ee 00 00       	call   c0017250 <HalConsoleScroll(int, int)>
c00083c0:	83 c4 10             	add    esp,0x10
c00083c3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00083c7:	83 c4 0c             	add    esp,0xc
c00083ca:	5b                   	pop    ebx
c00083cb:	5e                   	pop    esi
c00083cc:	5f                   	pop    edi
c00083cd:	5d                   	pop    ebp
c00083ce:	e9 79 fe ff ff       	jmp    c000824c <VgaText::updateCursor()>
c00083d3:	90                   	nop

c00083d4 <VgaText::combineCharAndColour(char, unsigned char)>:
c00083d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00083d9:	c1 e0 08             	shl    eax,0x8
c00083dc:	89 c2                	mov    edx,eax
c00083de:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00083e3:	09 d0                	or     eax,edx
c00083e5:	c3                   	ret    

c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00083e6:	55                   	push   ebp
c00083e7:	57                   	push   edi
c00083e8:	56                   	push   esi
c00083e9:	53                   	push   ebx
c00083ea:	83 ec 1c             	sub    esp,0x1c
c00083ed:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00083f1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00083f5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00083f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083fd:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0008401:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008405:	0f b6 c3             	movzx  eax,bl
c0008408:	50                   	push   eax
c0008409:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000840e:	50                   	push   eax
c000840f:	e8 1c ff ff ff       	call   c0008330 <VgaText::combineColours(unsigned char, unsigned char)>
c0008414:	5a                   	pop    edx
c0008415:	0f b6 c0             	movzx  eax,al
c0008418:	59                   	pop    ecx
c0008419:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000841e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008422:	50                   	push   eax
c0008423:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008427:	e8 a8 ff ff ff       	call   c00083d4 <VgaText::combineCharAndColour(char, unsigned char)>
c000842c:	5a                   	pop    edx
c000842d:	66 6b d7 50          	imul   dx,di,0x50
c0008431:	59                   	pop    ecx
c0008432:	01 f2                	add    edx,esi
c0008434:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008437:	0f b7 d2             	movzx  edx,dx
c000843a:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000843e:	39 2d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebp
c0008444:	75 28                	jne    c000846e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008446:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000844a:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000844e:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0008452:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008456:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000845a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000845e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0008462:	83 c4 1c             	add    esp,0x1c
c0008465:	5b                   	pop    ebx
c0008466:	5e                   	pop    esi
c0008467:	5f                   	pop    edi
c0008468:	5d                   	pop    ebp
c0008469:	e9 ea ee 00 00       	jmp    c0017358 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000846e:	83 c4 1c             	add    esp,0x1c
c0008471:	5b                   	pop    ebx
c0008472:	5e                   	pop    esi
c0008473:	5f                   	pop    edi
c0008474:	5d                   	pop    ebp
c0008475:	c3                   	ret    

c0008476 <VgaText::getCursorX()>:
c0008476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000847a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000847d:	c3                   	ret    

c000847e <VgaText::getCursorY()>:
c000847e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008482:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008485:	c3                   	ret    

c0008486 <VgaText::setCursor(int, int)>:
c0008486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000848a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000848e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0008491:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008495:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008498:	e9 af fd ff ff       	jmp    c000824c <VgaText::updateCursor()>

c000849d <setActiveTerminal(VgaText*)>:
c000849d:	53                   	push   ebx
c000849e:	83 ec 08             	sub    esp,0x8
c00084a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084a5:	85 db                	test   ebx,ebx
c00084a7:	75 11                	jne    c00084ba <setActiveTerminal(VgaText*)+0x1d>
c00084a9:	c7 44 24 10 c0 f1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f1c0
c00084b1:	83 c4 08             	add    esp,0x8
c00084b4:	5b                   	pop    ebx
c00084b5:	e9 f5 7e 00 00       	jmp    c00103af <KePanic(char const*)>
c00084ba:	a1 04 3f 02 c0       	mov    eax,ds:0xc0023f04
c00084bf:	85 c0                	test   eax,eax
c00084c1:	74 0c                	je     c00084cf <setActiveTerminal(VgaText*)+0x32>
c00084c3:	83 ec 0c             	sub    esp,0xc
c00084c6:	50                   	push   eax
c00084c7:	e8 80 fd ff ff       	call   c000824c <VgaText::updateCursor()>
c00084cc:	83 c4 10             	add    esp,0x10
c00084cf:	89 1d 04 3f 02 c0    	mov    DWORD PTR ds:0xc0023f04,ebx
c00084d5:	50                   	push   eax
c00084d6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00084d9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00084dc:	53                   	push   ebx
c00084dd:	e8 a4 ff ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c00084e2:	83 c4 18             	add    esp,0x18
c00084e5:	5b                   	pop    ebx
c00084e6:	c3                   	ret    
c00084e7:	90                   	nop

c00084e8 <VgaText::clearScreen()>:
c00084e8:	57                   	push   edi
c00084e9:	56                   	push   esi
c00084ea:	31 f6                	xor    esi,esi
c00084ec:	53                   	push   ebx
c00084ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084f1:	52                   	push   edx
c00084f2:	6a 00                	push   0x0
c00084f4:	6a 00                	push   0x0
c00084f6:	53                   	push   ebx
c00084f7:	e8 8a ff ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c00084fc:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008503:	83 c4 10             	add    esp,0x10
c0008506:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008509:	7e 20                	jle    c000852b <VgaText::clearScreen()+0x43>
c000850b:	31 ff                	xor    edi,edi
c000850d:	50                   	push   eax
c000850e:	50                   	push   eax
c000850f:	56                   	push   esi
c0008510:	57                   	push   edi
c0008511:	47                   	inc    edi
c0008512:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008515:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008518:	6a 20                	push   0x20
c000851a:	53                   	push   ebx
c000851b:	e8 c6 fe ff ff       	call   c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008520:	83 c4 20             	add    esp,0x20
c0008523:	83 ff 50             	cmp    edi,0x50
c0008526:	75 e5                	jne    c000850d <VgaText::clearScreen()+0x25>
c0008528:	46                   	inc    esi
c0008529:	eb db                	jmp    c0008506 <VgaText::clearScreen()+0x1e>
c000852b:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008532:	5b                   	pop    ebx
c0008533:	5e                   	pop    esi
c0008534:	5f                   	pop    edi
c0008535:	c3                   	ret    

c0008536 <VgaText::setCursorX(int)>:
c0008536:	83 ec 10             	sub    esp,0x10
c0008539:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008544:	50                   	push   eax
c0008545:	e8 3c ff ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c000854a:	83 c4 1c             	add    esp,0x1c
c000854d:	c3                   	ret    

c000854e <VgaText::setCursorY(int)>:
c000854e:	83 ec 10             	sub    esp,0x10
c0008551:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008555:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008559:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000855c:	50                   	push   eax
c000855d:	e8 24 ff ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c0008562:	83 c4 1c             	add    esp,0x1c
c0008565:	c3                   	ret    

c0008566 <VgaText::incrementCursor(bool)>:
c0008566:	56                   	push   esi
c0008567:	53                   	push   ebx
c0008568:	51                   	push   ecx
c0008569:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000856d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008571:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008574:	40                   	inc    eax
c0008575:	83 f8 50             	cmp    eax,0x50
c0008578:	74 05                	je     c000857f <VgaText::incrementCursor(bool)+0x19>
c000857a:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000857d:	eb 24                	jmp    c00085a3 <VgaText::incrementCursor(bool)+0x3d>
c000857f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008582:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008589:	8d 50 01             	lea    edx,[eax+0x1]
c000858c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000858f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008592:	75 0f                	jne    c00085a3 <VgaText::incrementCursor(bool)+0x3d>
c0008594:	83 ec 0c             	sub    esp,0xc
c0008597:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859a:	53                   	push   ebx
c000859b:	e8 a2 fd ff ff       	call   c0008342 <VgaText::scrollScreen()>
c00085a0:	83 c4 10             	add    esp,0x10
c00085a3:	89 f0                	mov    eax,esi
c00085a5:	84 c0                	test   al,al
c00085a7:	74 0c                	je     c00085b5 <VgaText::incrementCursor(bool)+0x4f>
c00085a9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085ad:	5a                   	pop    edx
c00085ae:	5b                   	pop    ebx
c00085af:	5e                   	pop    esi
c00085b0:	e9 97 fc ff ff       	jmp    c000824c <VgaText::updateCursor()>
c00085b5:	58                   	pop    eax
c00085b6:	5b                   	pop    ebx
c00085b7:	5e                   	pop    esi
c00085b8:	c3                   	ret    
c00085b9:	90                   	nop

c00085ba <VgaText::decrementCursor(bool)>:
c00085ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00085be:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085c2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00085c5:	85 c0                	test   eax,eax
c00085c7:	74 04                	je     c00085cd <VgaText::decrementCursor(bool)+0x13>
c00085c9:	48                   	dec    eax
c00085ca:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00085cd:	84 c9                	test   cl,cl
c00085cf:	74 09                	je     c00085da <VgaText::decrementCursor(bool)+0x20>
c00085d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00085d5:	e9 72 fc ff ff       	jmp    c000824c <VgaText::updateCursor()>
c00085da:	c3                   	ret    
c00085db:	90                   	nop

c00085dc <VgaText::putchar(char, VgaColour, VgaColour)>:
c00085dc:	53                   	push   ebx
c00085dd:	83 ec 08             	sub    esp,0x8
c00085e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00085e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00085ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00085f0:	3c 07                	cmp    al,0x7
c00085f2:	75 21                	jne    c0008615 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c00085f4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00085fc:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008604:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c000860c:	83 c4 08             	add    esp,0x8
c000860f:	5b                   	pop    ebx
c0008610:	e9 3a 2e 00 00       	jmp    c000b44f <Krnl::beep(int, int, bool)>
c0008615:	3c 0d                	cmp    al,0xd
c0008617:	75 09                	jne    c0008622 <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008619:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008620:	eb 2c                	jmp    c000864e <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0008622:	3c 0a                	cmp    al,0xa
c0008624:	75 31                	jne    c0008657 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008626:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008629:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008630:	8d 50 01             	lea    edx,[eax+0x1]
c0008633:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008636:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008639:	75 0f                	jne    c000864a <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c000863b:	83 ec 0c             	sub    esp,0xc
c000863e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008641:	53                   	push   ebx
c0008642:	e8 fb fc ff ff       	call   c0008342 <VgaText::scrollScreen()>
c0008647:	83 c4 10             	add    esp,0x10
c000864a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000864e:	83 c4 08             	add    esp,0x8
c0008651:	5b                   	pop    ebx
c0008652:	e9 f5 fb ff ff       	jmp    c000824c <VgaText::updateCursor()>
c0008657:	3c 08                	cmp    al,0x8
c0008659:	75 25                	jne    c0008680 <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c000865b:	50                   	push   eax
c000865c:	50                   	push   eax
c000865d:	6a 01                	push   0x1
c000865f:	53                   	push   ebx
c0008660:	e8 55 ff ff ff       	call   c00085ba <VgaText::decrementCursor(bool)>
c0008665:	5a                   	pop    edx
c0008666:	59                   	pop    ecx
c0008667:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000866a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000866d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008670:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008673:	6a 20                	push   0x20
c0008675:	53                   	push   ebx
c0008676:	e8 6b fd ff ff       	call   c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000867b:	83 c4 28             	add    esp,0x28
c000867e:	5b                   	pop    ebx
c000867f:	c3                   	ret    
c0008680:	83 ec 08             	sub    esp,0x8
c0008683:	0f be c0             	movsx  eax,al
c0008686:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008689:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000868c:	51                   	push   ecx
c000868d:	52                   	push   edx
c000868e:	50                   	push   eax
c000868f:	53                   	push   ebx
c0008690:	e8 51 fd ff ff       	call   c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008695:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008699:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00086a1:	83 c4 28             	add    esp,0x28
c00086a4:	5b                   	pop    ebx
c00086a5:	e9 bc fe ff ff       	jmp    c0008566 <VgaText::incrementCursor(bool)>

c00086aa <VgaText::putchar(char)>:
c00086aa:	56                   	push   esi
c00086ab:	53                   	push   ebx
c00086ac:	83 ec 14             	sub    esp,0x14
c00086af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00086b3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00086b7:	3c 5b                	cmp    al,0x5b
c00086b9:	75 18                	jne    c00086d3 <VgaText::putchar(char)+0x29>
c00086bb:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00086bf:	74 1f                	je     c00086e0 <VgaText::putchar(char)+0x36>
c00086c1:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00086c7:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00086ce:	e9 bd 00 00 00       	jmp    c0008790 <VgaText::putchar(char)+0xe6>
c00086d3:	3c 1b                	cmp    al,0x1b
c00086d5:	75 09                	jne    c00086e0 <VgaText::putchar(char)+0x36>
c00086d7:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00086db:	e9 b0 00 00 00       	jmp    c0008790 <VgaText::putchar(char)+0xe6>
c00086e0:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00086e3:	84 c9                	test   cl,cl
c00086e5:	0f 84 92 00 00 00    	je     c000877d <VgaText::putchar(char)+0xd3>
c00086eb:	8d 50 c0             	lea    edx,[eax-0x40]
c00086ee:	80 fa 3e             	cmp    dl,0x3e
c00086f1:	77 76                	ja     c0008769 <VgaText::putchar(char)+0xbf>
c00086f3:	3c 6d                	cmp    al,0x6d
c00086f5:	75 47                	jne    c000873e <VgaText::putchar(char)+0x94>
c00086f7:	31 f6                	xor    esi,esi
c00086f9:	31 d2                	xor    edx,edx
c00086fb:	31 c0                	xor    eax,eax
c00086fd:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0008700:	7e 2d                	jle    c000872f <VgaText::putchar(char)+0x85>
c0008702:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008707:	80 fa 3b             	cmp    dl,0x3b
c000870a:	75 17                	jne    c0008723 <VgaText::putchar(char)+0x79>
c000870c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0008710:	50                   	push   eax
c0008711:	53                   	push   ebx
c0008712:	e8 4b fb ff ff       	call   c0008262 <VgaText::doANSI_SGR(int)>
c0008717:	59                   	pop    ecx
c0008718:	31 d2                	xor    edx,edx
c000871a:	58                   	pop    eax
c000871b:	31 c0                	xor    eax,eax
c000871d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0008721:	eb 09                	jmp    c000872c <VgaText::putchar(char)+0x82>
c0008723:	6b c0 0a             	imul   eax,eax,0xa
c0008726:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000872a:	88 ca                	mov    dl,cl
c000872c:	46                   	inc    esi
c000872d:	eb ce                	jmp    c00086fd <VgaText::putchar(char)+0x53>
c000872f:	84 d2                	test   dl,dl
c0008731:	74 2e                	je     c0008761 <VgaText::putchar(char)+0xb7>
c0008733:	50                   	push   eax
c0008734:	53                   	push   ebx
c0008735:	e8 28 fb ff ff       	call   c0008262 <VgaText::doANSI_SGR(int)>
c000873a:	58                   	pop    eax
c000873b:	5a                   	pop    edx
c000873c:	eb 23                	jmp    c0008761 <VgaText::putchar(char)+0xb7>
c000873e:	3c 4a                	cmp    al,0x4a
c0008740:	75 1f                	jne    c0008761 <VgaText::putchar(char)+0xb7>
c0008742:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008746:	75 19                	jne    c0008761 <VgaText::putchar(char)+0xb7>
c0008748:	83 ec 0c             	sub    esp,0xc
c000874b:	53                   	push   ebx
c000874c:	e8 97 fd ff ff       	call   c00084e8 <VgaText::clearScreen()>
c0008751:	83 c4 0c             	add    esp,0xc
c0008754:	6a 00                	push   0x0
c0008756:	6a 00                	push   0x0
c0008758:	53                   	push   ebx
c0008759:	e8 28 fd ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c000875e:	83 c4 10             	add    esp,0x10
c0008761:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008767:	eb 27                	jmp    c0008790 <VgaText::putchar(char)+0xe6>
c0008769:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000876c:	83 fa 0e             	cmp    edx,0xe
c000876f:	7f 1f                	jg     c0008790 <VgaText::putchar(char)+0xe6>
c0008771:	8d 4a 01             	lea    ecx,[edx+0x1]
c0008774:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008777:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000877b:	eb 13                	jmp    c0008790 <VgaText::putchar(char)+0xe6>
c000877d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008780:	0f be c0             	movsx  eax,al
c0008783:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008786:	50                   	push   eax
c0008787:	53                   	push   ebx
c0008788:	e8 4f fe ff ff       	call   c00085dc <VgaText::putchar(char, VgaColour, VgaColour)>
c000878d:	83 c4 10             	add    esp,0x10
c0008790:	83 c4 14             	add    esp,0x14
c0008793:	5b                   	pop    ebx
c0008794:	5e                   	pop    esi
c0008795:	c3                   	ret    

c0008796 <VgaText::putx(unsigned int)>:
c0008796:	57                   	push   edi
c0008797:	b9 11 00 00 00       	mov    ecx,0x11
c000879c:	56                   	push   esi
c000879d:	be ce f1 01 c0       	mov    esi,0xc001f1ce
c00087a2:	53                   	push   ebx
c00087a3:	83 ec 20             	sub    esp,0x20
c00087a6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087aa:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00087ae:	fc                   	cld    
c00087af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00087b1:	be 08 00 00 00       	mov    esi,0x8
c00087b6:	50                   	push   eax
c00087b7:	50                   	push   eax
c00087b8:	89 d8                	mov    eax,ebx
c00087ba:	c1 e3 04             	shl    ebx,0x4
c00087bd:	c1 e8 1c             	shr    eax,0x1c
c00087c0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00087c5:	50                   	push   eax
c00087c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00087ca:	e8 db fe ff ff       	call   c00086aa <VgaText::putchar(char)>
c00087cf:	83 c4 10             	add    esp,0x10
c00087d2:	4e                   	dec    esi
c00087d3:	75 e1                	jne    c00087b6 <VgaText::putx(unsigned int)+0x20>
c00087d5:	83 c4 20             	add    esp,0x20
c00087d8:	5b                   	pop    ebx
c00087d9:	5e                   	pop    esi
c00087da:	5f                   	pop    edi
c00087db:	c3                   	ret    

c00087dc <VgaText::puts(char const*)>:
c00087dc:	53                   	push   ebx
c00087dd:	83 ec 08             	sub    esp,0x8
c00087e0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00087e4:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00087e7:	84 c0                	test   al,al
c00087e9:	74 12                	je     c00087fd <VgaText::puts(char const*)+0x21>
c00087eb:	43                   	inc    ebx
c00087ec:	51                   	push   ecx
c00087ed:	51                   	push   ecx
c00087ee:	50                   	push   eax
c00087ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00087f3:	e8 b2 fe ff ff       	call   c00086aa <VgaText::putchar(char)>
c00087f8:	83 c4 10             	add    esp,0x10
c00087fb:	eb e7                	jmp    c00087e4 <VgaText::puts(char const*)+0x8>
c00087fd:	83 c4 08             	add    esp,0x8
c0008800:	5b                   	pop    ebx
c0008801:	c3                   	ret    

c0008802 <VgaText::write(unsigned long long, void*, int*)>:
c0008802:	55                   	push   ebp
c0008803:	57                   	push   edi
c0008804:	56                   	push   esi
c0008805:	53                   	push   ebx
c0008806:	83 ec 0c             	sub    esp,0xc
c0008809:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000880d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008811:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008815:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000881c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000881f:	39 eb                	cmp    ebx,ebp
c0008821:	74 13                	je     c0008836 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008823:	43                   	inc    ebx
c0008824:	50                   	push   eax
c0008825:	50                   	push   eax
c0008826:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000882a:	50                   	push   eax
c000882b:	56                   	push   esi
c000882c:	e8 79 fe ff ff       	call   c00086aa <VgaText::putchar(char)>
c0008831:	83 c4 10             	add    esp,0x10
c0008834:	eb e9                	jmp    c000881f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008836:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000883d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008841:	89 38                	mov    DWORD PTR [eax],edi
c0008843:	83 c4 0c             	add    esp,0xc
c0008846:	31 c0                	xor    eax,eax
c0008848:	5b                   	pop    ebx
c0008849:	5e                   	pop    esi
c000884a:	5f                   	pop    edi
c000884b:	5d                   	pop    ebp
c000884c:	c3                   	ret    
c000884d:	90                   	nop

c000884e <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000884e:	55                   	push   ebp
c000884f:	57                   	push   edi
c0008850:	56                   	push   esi
c0008851:	53                   	push   ebx
c0008852:	83 ec 0c             	sub    esp,0xc
c0008855:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008859:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000885e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008865:	50                   	push   eax
c0008866:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000886b:	50                   	push   eax
c000886c:	e8 bf fa ff ff       	call   c0008330 <VgaText::combineColours(unsigned char, unsigned char)>
c0008871:	5a                   	pop    edx
c0008872:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008877:	59                   	pop    ecx
c0008878:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000887b:	89 c5                	mov    ebp,eax
c000887d:	0f b7 f6             	movzx  esi,si
c0008880:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008884:	01 f6                	add    esi,esi
c0008886:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008889:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000888c:	84 c0                	test   al,al
c000888e:	0f 84 f4 00 00 00    	je     c0008988 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008894:	3c 0d                	cmp    al,0xd
c0008896:	75 0c                	jne    c00088a4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008898:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000889f:	e9 de 00 00 00       	jmp    c0008982 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088a4:	3c 0a                	cmp    al,0xa
c00088a6:	75 45                	jne    c00088ed <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00088a8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088ab:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088b2:	8d 48 01             	lea    ecx,[eax+0x1]
c00088b5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00088b8:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00088bb:	75 0f                	jne    c00088cc <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c00088bd:	83 ec 0c             	sub    esp,0xc
c00088c0:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00088c3:	53                   	push   ebx
c00088c4:	e8 79 fa ff ff       	call   c0008342 <VgaText::scrollScreen()>
c00088c9:	83 c4 10             	add    esp,0x10
c00088cc:	83 ec 0c             	sub    esp,0xc
c00088cf:	53                   	push   ebx
c00088d0:	e8 77 f9 ff ff       	call   c000824c <VgaText::updateCursor()>
c00088d5:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088da:	83 c4 10             	add    esp,0x10
c00088dd:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00088e0:	0f b7 f6             	movzx  esi,si
c00088e3:	01 f6                	add    esi,esi
c00088e5:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088e8:	e9 95 00 00 00       	jmp    c0008982 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088ed:	3c 08                	cmp    al,0x8
c00088ef:	75 35                	jne    c0008926 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c00088f1:	51                   	push   ecx
c00088f2:	51                   	push   ecx
c00088f3:	6a 01                	push   0x1
c00088f5:	53                   	push   ebx
c00088f6:	e8 bf fc ff ff       	call   c00085ba <VgaText::decrementCursor(bool)>
c00088fb:	5e                   	pop    esi
c00088fc:	58                   	pop    eax
c00088fd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008900:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008903:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008906:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008909:	6a 20                	push   0x20
c000890b:	53                   	push   ebx
c000890c:	e8 d5 fa ff ff       	call   c00083e6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008911:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008916:	83 c4 20             	add    esp,0x20
c0008919:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000891c:	0f b7 f6             	movzx  esi,si
c000891f:	01 f6                	add    esi,esi
c0008921:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008924:	eb 5c                	jmp    c0008982 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008926:	52                   	push   edx
c0008927:	52                   	push   edx
c0008928:	89 ea                	mov    edx,ebp
c000892a:	0f b6 ca             	movzx  ecx,dl
c000892d:	51                   	push   ecx
c000892e:	50                   	push   eax
c000892f:	e8 a0 fa ff ff       	call   c00083d4 <VgaText::combineCharAndColour(char, unsigned char)>
c0008934:	83 c4 10             	add    esp,0x10
c0008937:	66 89 06             	mov    WORD PTR [esi],ax
c000893a:	39 1d 04 3f 02 c0    	cmp    DWORD PTR ds:0xc0023f04,ebx
c0008940:	75 1d                	jne    c000895f <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0008942:	83 ec 0c             	sub    esp,0xc
c0008945:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008948:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000894f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008953:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008956:	50                   	push   eax
c0008957:	e8 fc e9 00 00       	call   c0017358 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000895c:	83 c4 20             	add    esp,0x20
c000895f:	83 c6 02             	add    esi,0x2
c0008962:	50                   	push   eax
c0008963:	50                   	push   eax
c0008964:	6a 00                	push   0x0
c0008966:	53                   	push   ebx
c0008967:	e8 fa fb ff ff       	call   c0008566 <VgaText::incrementCursor(bool)>
c000896c:	83 c4 10             	add    esp,0x10
c000896f:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008973:	75 0d                	jne    c0008982 <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008975:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000897a:	0f b7 f6             	movzx  esi,si
c000897d:	01 f6                	add    esi,esi
c000897f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008982:	47                   	inc    edi
c0008983:	e9 01 ff ff ff       	jmp    c0008889 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008988:	83 ec 0c             	sub    esp,0xc
c000898b:	53                   	push   ebx
c000898c:	e8 bb f8 ff ff       	call   c000824c <VgaText::updateCursor()>
c0008991:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008998:	83 c4 1c             	add    esp,0x1c
c000899b:	5b                   	pop    ebx
c000899c:	5e                   	pop    esi
c000899d:	5f                   	pop    edi
c000899e:	5d                   	pop    ebp
c000899f:	c3                   	ret    

c00089a0 <VgaText::VgaText(char const*)>:
c00089a0:	56                   	push   esi
c00089a1:	53                   	push   ebx
c00089a2:	83 ec 04             	sub    esp,0x4
c00089a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a9:	83 ec 08             	sub    esp,0x8
c00089ac:	6a 00                	push   0x0
c00089ae:	50                   	push   eax
c00089af:	e8 46 05 00 00       	call   c0008efa <UnixFile::UnixFile(int)>
c00089b4:	83 c4 10             	add    esp,0x10
c00089b7:	ba f4 f1 01 c0       	mov    edx,0xc001f1f4
c00089bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089c0:	89 10                	mov    DWORD PTR [eax],edx
c00089c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089c6:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00089cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089d1:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00089d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089dc:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00089e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089e4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00089e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089ec:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00089f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089f7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00089fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a02:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0d:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a18:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008a1f:	83 ec 0c             	sub    esp,0xc
c0008a22:	6a 01                	push   0x1
c0008a24:	e8 14 09 00 00       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c0008a29:	83 c4 10             	add    esp,0x10
c0008a2c:	89 c2                	mov    edx,eax
c0008a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a32:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008a35:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0008a3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a3f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a42:	89 c6                	mov    esi,eax
c0008a44:	e8 f8 f0 ff ff       	call   c0007b41 <Phys::allocatePage()>
c0008a49:	68 05 0c 00 00       	push   0xc05
c0008a4e:	56                   	push   esi
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 aa 0f 00 00       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a5d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008a60:	83 ec 04             	sub    esp,0x4
c0008a63:	68 a0 0f 00 00       	push   0xfa0
c0008a68:	6a 00                	push   0x0
c0008a6a:	50                   	push   eax
c0008a6b:	e8 50 7a ff ff       	call   c00004c0 <memset>
c0008a70:	83 c4 10             	add    esp,0x10
c0008a73:	83 ec 04             	sub    esp,0x4
c0008a76:	6a 00                	push   0x0
c0008a78:	6a 07                	push   0x7
c0008a7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a7e:	e8 73 f8 ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008a83:	83 c4 10             	add    esp,0x10
c0008a86:	83 ec 04             	sub    esp,0x4
c0008a89:	6a 00                	push   0x0
c0008a8b:	6a 00                	push   0x0
c0008a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a91:	e8 f0 f9 ff ff       	call   c0008486 <VgaText::setCursor(int, int)>
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	83 ec 0c             	sub    esp,0xc
c0008a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008aa0:	e8 43 fa ff ff       	call   c00084e8 <VgaText::clearScreen()>
c0008aa5:	83 c4 10             	add    esp,0x10
c0008aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008aac:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ab4:	05 82 00 00 00       	add    eax,0x82
c0008ab9:	83 ec 04             	sub    esp,0x4
c0008abc:	68 80 00 00 00       	push   0x80
c0008ac1:	6a 00                	push   0x0
c0008ac3:	50                   	push   eax
c0008ac4:	e8 f7 79 ff ff       	call   c00004c0 <memset>
c0008ac9:	83 c4 10             	add    esp,0x10
c0008acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ad0:	05 02 01 00 00       	add    eax,0x102
c0008ad5:	83 ec 04             	sub    esp,0x4
c0008ad8:	68 80 00 00 00       	push   0x80
c0008add:	6a 00                	push   0x0
c0008adf:	50                   	push   eax
c0008ae0:	e8 db 79 ff ff       	call   c00004c0 <memset>
c0008ae5:	83 c4 10             	add    esp,0x10
c0008ae8:	90                   	nop
c0008ae9:	83 c4 04             	add    esp,0x4
c0008aec:	5b                   	pop    ebx
c0008aed:	5e                   	pop    esi
c0008aee:	c3                   	ret    
c0008aef:	90                   	nop

c0008af0 <VgaText::receiveKey(unsigned char)>:
c0008af0:	55                   	push   ebp
c0008af1:	57                   	push   edi
c0008af2:	56                   	push   esi
c0008af3:	53                   	push   ebx
c0008af4:	83 ec 1c             	sub    esp,0x1c
c0008af7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0008afb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008aff:	89 f0                	mov    eax,esi
c0008b01:	84 c0                	test   al,al
c0008b03:	0f 84 47 01 00 00    	je     c0008c50 <VgaText::receiveKey(unsigned char)+0x160>
c0008b09:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008b0f:	3c 08                	cmp    al,0x8
c0008b11:	75 6b                	jne    c0008b7e <VgaText::receiveKey(unsigned char)+0x8e>
c0008b13:	83 ec 0c             	sub    esp,0xc
c0008b16:	57                   	push   edi
c0008b17:	e8 14 7a ff ff       	call   c0000530 <strlen>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	85 c0                	test   eax,eax
c0008b21:	0f 84 ee 00 00 00    	je     c0008c15 <VgaText::receiveKey(unsigned char)+0x125>
c0008b27:	50                   	push   eax
c0008b28:	50                   	push   eax
c0008b29:	6a 08                	push   0x8
c0008b2b:	53                   	push   ebx
c0008b2c:	e8 79 fb ff ff       	call   c00086aa <VgaText::putchar(char)>
c0008b31:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b34:	e8 f7 79 ff ff       	call   c0000530 <strlen>
c0008b39:	83 c4 10             	add    esp,0x10
c0008b3c:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008b43:	3c 0d                	cmp    al,0xd
c0008b45:	0f 95 c1             	setne  cl
c0008b48:	3c 18                	cmp    al,0x18
c0008b4a:	0f 9e c2             	setle  dl
c0008b4d:	84 d1                	test   cl,dl
c0008b4f:	74 17                	je     c0008b68 <VgaText::receiveKey(unsigned char)+0x78>
c0008b51:	83 e8 08             	sub    eax,0x8
c0008b54:	3c 02                	cmp    al,0x2
c0008b56:	76 10                	jbe    c0008b68 <VgaText::receiveKey(unsigned char)+0x78>
c0008b58:	55                   	push   ebp
c0008b59:	55                   	push   ebp
c0008b5a:	68 df f1 01 c0       	push   0xc001f1df
c0008b5f:	53                   	push   ebx
c0008b60:	e8 77 fc ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0008b65:	83 c4 10             	add    esp,0x10
c0008b68:	83 ec 0c             	sub    esp,0xc
c0008b6b:	57                   	push   edi
c0008b6c:	e8 bf 79 ff ff       	call   c0000530 <strlen>
c0008b71:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008b79:	e9 94 00 00 00       	jmp    c0008c12 <VgaText::receiveKey(unsigned char)+0x122>
c0008b7e:	83 ec 0c             	sub    esp,0xc
c0008b81:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008b87:	50                   	push   eax
c0008b88:	e8 a3 79 ff ff       	call   c0000530 <strlen>
c0008b8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b90:	89 c5                	mov    ebp,eax
c0008b92:	e8 99 79 ff ff       	call   c0000530 <strlen>
c0008b97:	83 c4 10             	add    esp,0x10
c0008b9a:	8d 44 05 03          	lea    eax,[ebp+eax*1+0x3]
c0008b9e:	3d 80 00 00 00       	cmp    eax,0x80
c0008ba3:	0f 87 a7 00 00 00    	ja     c0008c50 <VgaText::receiveKey(unsigned char)+0x160>
c0008ba9:	89 f0                	mov    eax,esi
c0008bab:	3c 18                	cmp    al,0x18
c0008bad:	0f 96 c2             	setbe  dl
c0008bb0:	3c 0d                	cmp    al,0xd
c0008bb2:	0f 95 c0             	setne  al
c0008bb5:	84 c2                	test   dl,al
c0008bb7:	74 30                	je     c0008be9 <VgaText::receiveKey(unsigned char)+0xf9>
c0008bb9:	8d 46 f7             	lea    eax,[esi-0x9]
c0008bbc:	3c 01                	cmp    al,0x1
c0008bbe:	76 29                	jbe    c0008be9 <VgaText::receiveKey(unsigned char)+0xf9>
c0008bc0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bc3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bc6:	68 e5 f1 01 c0       	push   0xc001f1e5
c0008bcb:	53                   	push   ebx
c0008bcc:	e8 7d fc ff ff       	call   c000884e <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008bd1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd4:	8d 46 40             	lea    eax,[esi+0x40]
c0008bd7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bda:	0f b6 c0             	movzx  eax,al
c0008bdd:	50                   	push   eax
c0008bde:	53                   	push   ebx
c0008bdf:	e8 f8 f9 ff ff       	call   c00085dc <VgaText::putchar(char, VgaColour, VgaColour)>
c0008be4:	83 c4 20             	add    esp,0x20
c0008be7:	eb 11                	jmp    c0008bfa <VgaText::receiveKey(unsigned char)+0x10a>
c0008be9:	89 f0                	mov    eax,esi
c0008beb:	51                   	push   ecx
c0008bec:	0f be c0             	movsx  eax,al
c0008bef:	51                   	push   ecx
c0008bf0:	50                   	push   eax
c0008bf1:	53                   	push   ebx
c0008bf2:	e8 b3 fa ff ff       	call   c00086aa <VgaText::putchar(char)>
c0008bf7:	83 c4 10             	add    esp,0x10
c0008bfa:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008bff:	89 f0                	mov    eax,esi
c0008c01:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008c05:	52                   	push   edx
c0008c06:	52                   	push   edx
c0008c07:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008c0b:	50                   	push   eax
c0008c0c:	57                   	push   edi
c0008c0d:	e8 9e 7b ff ff       	call   c00007b0 <strcat>
c0008c12:	83 c4 10             	add    esp,0x10
c0008c15:	89 f0                	mov    eax,esi
c0008c17:	3c 03                	cmp    al,0x3
c0008c19:	0f 94 c2             	sete   dl
c0008c1c:	3c 0a                	cmp    al,0xa
c0008c1e:	0f 94 c0             	sete   al
c0008c21:	08 c2                	or     dl,al
c0008c23:	75 09                	jne    c0008c2e <VgaText::receiveKey(unsigned char)+0x13e>
c0008c25:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008c2c:	74 22                	je     c0008c50 <VgaText::receiveKey(unsigned char)+0x160>
c0008c2e:	81 c3 02 01 00 00    	add    ebx,0x102
c0008c34:	50                   	push   eax
c0008c35:	50                   	push   eax
c0008c36:	57                   	push   edi
c0008c37:	53                   	push   ebx
c0008c38:	e8 73 7b ff ff       	call   c00007b0 <strcat>
c0008c3d:	83 c4 0c             	add    esp,0xc
c0008c40:	68 80 00 00 00       	push   0x80
c0008c45:	6a 00                	push   0x0
c0008c47:	57                   	push   edi
c0008c48:	e8 73 78 ff ff       	call   c00004c0 <memset>
c0008c4d:	83 c4 10             	add    esp,0x10
c0008c50:	83 c4 1c             	add    esp,0x1c
c0008c53:	5b                   	pop    ebx
c0008c54:	5e                   	pop    esi
c0008c55:	5f                   	pop    edi
c0008c56:	5d                   	pop    ebp
c0008c57:	c3                   	ret    

c0008c58 <VgaText::doUpdate()>:
c0008c58:	c3                   	ret    

c0008c59 <newTerminal(char*)>:
c0008c59:	83 ec 28             	sub    esp,0x28
c0008c5c:	68 84 01 00 00       	push   0x184
c0008c61:	e8 ff eb ff ff       	call   c0007865 <malloc>
c0008c66:	5a                   	pop    edx
c0008c67:	59                   	pop    ecx
c0008c68:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008c6c:	50                   	push   eax
c0008c6d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008c71:	e8 2a fd ff ff       	call   c00089a0 <VgaText::VgaText(char const*)>
c0008c76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c7a:	83 c4 2c             	add    esp,0x2c
c0008c7d:	c3                   	ret    
c0008c7e:	66 90                	xchg   ax,ax

c0008c80 <TSS::TSS()>:
c0008c80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008c84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008c8b:	90                   	nop
c0008c8c:	c3                   	ret    
c0008c8d:	90                   	nop
c0008c8e:	66 90                	xchg   ax,ax

c0008c90 <TSS::setESP(unsigned long)>:
c0008c90:	55                   	push   ebp
c0008c91:	89 e5                	mov    ebp,esp
c0008c93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c99:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c9c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c9f:	90                   	nop
c0008ca0:	5d                   	pop    ebp
c0008ca1:	c3                   	ret    
c0008ca2:	66 90                	xchg   ax,ax

c0008ca4 <TSS::flush()>:
c0008ca4:	55                   	push   ebp
c0008ca5:	89 e5                	mov    ebp,esp
c0008ca7:	83 ec 10             	sub    esp,0x10
c0008caa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cad:	8b 00                	mov    eax,DWORD PTR [eax]
c0008caf:	83 c8 03             	or     eax,0x3
c0008cb2:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008cb6:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008cba:	66 89 d0             	mov    ax,dx
c0008cbd:	0f 00 d8             	ltr    ax
c0008cc0:	90                   	nop
c0008cc1:	c9                   	leave  
c0008cc2:	c3                   	ret    
c0008cc3:	90                   	nop

c0008cc4 <TSS::setup(unsigned long, unsigned long)>:
c0008cc4:	55                   	push   ebp
c0008cc5:	89 e5                	mov    ebp,esp
c0008cc7:	83 ec 18             	sub    esp,0x18
c0008cca:	83 ec 0c             	sub    esp,0xc
c0008ccd:	6a 68                	push   0x68
c0008ccf:	e8 91 eb ff ff       	call   c0007865 <malloc>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	89 c2                	mov    edx,eax
c0008cd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cdc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008cdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce5:	83 ec 04             	sub    esp,0x4
c0008ce8:	6a 68                	push   0x68
c0008cea:	6a 00                	push   0x0
c0008cec:	50                   	push   eax
c0008ced:	e8 ce 77 ff ff       	call   c00004c0 <memset>
c0008cf2:	83 c4 10             	add    esp,0x10
c0008cf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cfb:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d07:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008d0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d13:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d16:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008d19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d1f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008d25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d2b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008d31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d37:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008d3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d43:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d4f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008d55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d5b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008d61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d67:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008d6a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d73:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008d76:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d7f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008d86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d8c:	0f 20 da             	mov    edx,cr3
c0008d8f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008d92:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008d95:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008d98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d9e:	83 ec 08             	sub    esp,0x8
c0008da1:	50                   	push   eax
c0008da2:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008da5:	50                   	push   eax
c0008da6:	e8 3f e3 ff ff       	call   c00070ea <GDTEntry::setBase(unsigned int)>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	83 ec 08             	sub    esp,0x8
c0008db1:	6a 68                	push   0x68
c0008db3:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008db6:	50                   	push   eax
c0008db7:	e8 4a e3 ff ff       	call   c0007106 <GDTEntry::setLimit(unsigned int)>
c0008dbc:	83 c4 10             	add    esp,0x10
c0008dbf:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008dc3:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008dc6:	83 e0 0f             	and    eax,0xf
c0008dc9:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008dcc:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008dcf:	83 c8 40             	or     eax,0x40
c0008dd2:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008dd5:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008dda:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008de0:	05 78 01 00 00       	add    eax,0x178
c0008de5:	83 ec 04             	sub    esp,0x4
c0008de8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008deb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008dee:	50                   	push   eax
c0008def:	e8 46 e3 ff ff       	call   c000713a <GDT::addEntry(GDTEntry)>
c0008df4:	83 c4 10             	add    esp,0x10
c0008df7:	89 c2                	mov    edx,eax
c0008df9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008dfc:	89 10                	mov    DWORD PTR [eax],edx
c0008dfe:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0008e03:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008e09:	05 78 01 00 00       	add    eax,0x178
c0008e0e:	83 ec 0c             	sub    esp,0xc
c0008e11:	50                   	push   eax
c0008e12:	e8 4d e3 ff ff       	call   c0007164 <GDT::flush()>
c0008e17:	83 c4 10             	add    esp,0x10
c0008e1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e1f:	c9                   	leave  
c0008e20:	c3                   	ret    
c0008e21:	90                   	nop

c0008e22 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008e22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e26:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008e2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e2d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008e32:	75 08                	jne    c0008e3c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008e34:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e3a:	eb 38                	jmp    c0008e74 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008e3c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e41:	75 17                	jne    c0008e5a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008e43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e48:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e4b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e51:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e57:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008e5a:	89 c1                	mov    ecx,eax
c0008e5c:	83 e1 fd             	and    ecx,0xfffffffd
c0008e5f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008e65:	74 cd                	je     c0008e34 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e67:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e6c:	83 e0 ef             	and    eax,0xffffffef
c0008e6f:	83 f8 08             	cmp    eax,0x8
c0008e72:	76 c0                	jbe    c0008e34 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008e74:	31 c0                	xor    eax,eax
c0008e76:	c3                   	ret    
c0008e77:	90                   	nop

c0008e78 <ReservedFilename::isAtty()>:
c0008e78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e7c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e7f:	31 c0                	xor    eax,eax
c0008e81:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008e87:	74 09                	je     c0008e92 <ReservedFilename::isAtty()+0x1a>
c0008e89:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008e8f:	0f 94 c0             	sete   al
c0008e92:	c3                   	ret    
c0008e93:	90                   	nop

c0008e94 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008e94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e98:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008ea3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008ea8:	75 08                	jne    c0008eb2 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008eaa:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008eb0:	eb 3d                	jmp    c0008eef <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008eb2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008eb7:	75 17                	jne    c0008ed0 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008eb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008ebe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008ec1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008ec7:	8b 10                	mov    edx,DWORD PTR [eax]
c0008ec9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ecd:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008ed0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008ed5:	75 04                	jne    c0008edb <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008ed7:	89 0a                	mov    DWORD PTR [edx],ecx
c0008ed9:	eb 14                	jmp    c0008eef <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008edb:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008ee0:	74 c8                	je     c0008eaa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008ee2:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008ee7:	83 e0 ef             	and    eax,0xffffffef
c0008eea:	83 f8 08             	cmp    eax,0x8
c0008eed:	76 bb                	jbe    c0008eaa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008eef:	31 c0                	xor    eax,eax
c0008ef1:	c3                   	ret    

c0008ef2 <UnixFile::getFileDescriptor()>:
c0008ef2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008ef6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ef9:	c3                   	ret    

c0008efa <UnixFile::UnixFile(int)>:
c0008efa:	53                   	push   ebx
c0008efb:	83 ec 28             	sub    esp,0x28
c0008efe:	ba bc f2 01 c0       	mov    edx,0xc001f2bc
c0008f03:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008f07:	89 10                	mov    DWORD PTR [eax],edx
c0008f09:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008f11:	0f 8f 8c 01 00 00    	jg     c00090a3 <UnixFile::UnixFile(int)+0x1a9>
c0008f17:	a1 a0 12 02 c0       	mov    eax,ds:0xc00212a0
c0008f1c:	8d 50 01             	lea    edx,[eax+0x1]
c0008f1f:	89 15 a0 12 02 c0    	mov    DWORD PTR ds:0xc00212a0,edx
c0008f25:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008f29:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f2c:	83 ec 08             	sub    esp,0x8
c0008f2f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008f33:	68 98 3f 02 c0       	push   0xc0023f98
c0008f38:	e8 5b 4e 01 00       	call   c001dd98 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	a0 94 3f 02 c0       	mov    al,ds:0xc0023f94
c0008f45:	83 f0 01             	xor    eax,0x1
c0008f48:	84 c0                	test   al,al
c0008f4a:	0f 84 54 01 00 00    	je     c00090a4 <UnixFile::UnixFile(int)+0x1aa>
c0008f50:	c6 05 94 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023f94,0x1
c0008f57:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008f5f:	83 ec 0c             	sub    esp,0xc
c0008f62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008f66:	e8 fa e8 ff ff       	call   c0007865 <malloc>
c0008f6b:	83 c4 10             	add    esp,0x10
c0008f6e:	89 c3                	mov    ebx,eax
c0008f70:	83 ec 08             	sub    esp,0x8
c0008f73:	68 03 ff ff 0f       	push   0xfffff03
c0008f78:	53                   	push   ebx
c0008f79:	e8 2c 01 00 00       	call   c00090aa <ReservedFilename::ReservedFilename(int)>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	89 1d 8c 3f 02 c0    	mov    DWORD PTR ds:0xc0023f8c,ebx
c0008f87:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008f8f:	83 ec 0c             	sub    esp,0xc
c0008f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f96:	e8 ca e8 ff ff       	call   c0007865 <malloc>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	89 c3                	mov    ebx,eax
c0008fa0:	83 ec 08             	sub    esp,0x8
c0008fa3:	68 01 ff ff 0f       	push   0xfffff01
c0008fa8:	53                   	push   ebx
c0008fa9:	e8 fc 00 00 00       	call   c00090aa <ReservedFilename::ReservedFilename(int)>
c0008fae:	83 c4 10             	add    esp,0x10
c0008fb1:	89 1d 90 3f 02 c0    	mov    DWORD PTR ds:0xc0023f90,ebx
c0008fb7:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008fbf:	83 ec 0c             	sub    esp,0xc
c0008fc2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008fc6:	e8 9a e8 ff ff       	call   c0007865 <malloc>
c0008fcb:	83 c4 10             	add    esp,0x10
c0008fce:	89 c3                	mov    ebx,eax
c0008fd0:	83 ec 08             	sub    esp,0x8
c0008fd3:	68 00 ff ff 0f       	push   0xfffff00
c0008fd8:	53                   	push   ebx
c0008fd9:	e8 cc 00 00 00       	call   c00090aa <ReservedFilename::ReservedFilename(int)>
c0008fde:	83 c4 10             	add    esp,0x10
c0008fe1:	89 1d 84 3f 02 c0    	mov    DWORD PTR ds:0xc0023f84,ebx
c0008fe7:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008fef:	83 ec 0c             	sub    esp,0xc
c0008ff2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008ff6:	e8 6a e8 ff ff       	call   c0007865 <malloc>
c0008ffb:	83 c4 10             	add    esp,0x10
c0008ffe:	89 c3                	mov    ebx,eax
c0009000:	83 ec 08             	sub    esp,0x8
c0009003:	68 02 ff ff 0f       	push   0xfffff02
c0009008:	53                   	push   ebx
c0009009:	e8 9c 00 00 00       	call   c00090aa <ReservedFilename::ReservedFilename(int)>
c000900e:	83 c4 10             	add    esp,0x10
c0009011:	89 1d 88 3f 02 c0    	mov    DWORD PTR ds:0xc0023f88,ebx
c0009017:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000901f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0009024:	7f 7e                	jg     c00090a4 <UnixFile::UnixFile(int)+0x1aa>
c0009026:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000902e:	83 ec 0c             	sub    esp,0xc
c0009031:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009035:	e8 2b e8 ff ff       	call   c0007865 <malloc>
c000903a:	83 c4 10             	add    esp,0x10
c000903d:	89 c3                	mov    ebx,eax
c000903f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009043:	05 10 ff ff 0f       	add    eax,0xfffff10
c0009048:	83 ec 08             	sub    esp,0x8
c000904b:	50                   	push   eax
c000904c:	53                   	push   ebx
c000904d:	e8 58 00 00 00       	call   c00090aa <ReservedFilename::ReservedFilename(int)>
c0009052:	83 c4 10             	add    esp,0x10
c0009055:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009059:	89 1c 85 60 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0a0],ebx
c0009060:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009068:	83 ec 0c             	sub    esp,0xc
c000906b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000906f:	e8 f1 e7 ff ff       	call   c0007865 <malloc>
c0009074:	83 c4 10             	add    esp,0x10
c0009077:	89 c3                	mov    ebx,eax
c0009079:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000907d:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009082:	83 ec 08             	sub    esp,0x8
c0009085:	50                   	push   eax
c0009086:	53                   	push   ebx
c0009087:	e8 1e 00 00 00       	call   c00090aa <ReservedFilename::ReservedFilename(int)>
c000908c:	83 c4 10             	add    esp,0x10
c000908f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009093:	89 1c 85 20 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc0e0],ebx
c000909a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000909e:	e9 7c ff ff ff       	jmp    c000901f <UnixFile::UnixFile(int)+0x125>
c00090a3:	90                   	nop
c00090a4:	83 c4 28             	add    esp,0x28
c00090a7:	5b                   	pop    ebx
c00090a8:	c3                   	ret    
c00090a9:	90                   	nop

c00090aa <ReservedFilename::ReservedFilename(int)>:
c00090aa:	83 ec 0c             	sub    esp,0xc
c00090ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090b1:	83 ec 08             	sub    esp,0x8
c00090b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090b8:	50                   	push   eax
c00090b9:	e8 3c fe ff ff       	call   c0008efa <UnixFile::UnixFile(int)>
c00090be:	83 c4 10             	add    esp,0x10
c00090c1:	ba d8 f2 01 c0       	mov    edx,0xc001f2d8
c00090c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090ca:	89 10                	mov    DWORD PTR [eax],edx
c00090cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00090d7:	90                   	nop
c00090d8:	83 c4 0c             	add    esp,0xc
c00090db:	c3                   	ret    

c00090dc <UnixFile::~UnixFile()>:
c00090dc:	83 ec 1c             	sub    esp,0x1c
c00090df:	ba bc f2 01 c0       	mov    edx,0xc001f2bc
c00090e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090e8:	89 10                	mov    DWORD PTR [eax],edx
c00090ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00090f6:	7f 73                	jg     c000916b <UnixFile::~UnixFile()+0x8f>
c00090f8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009100:	83 ec 0c             	sub    esp,0xc
c0009103:	68 98 3f 02 c0       	push   0xc0023f98
c0009108:	e8 5f 4d 01 00       	call   c001de6c <LinkedList<UnixFile>::getFirstElement()>
c000910d:	83 c4 10             	add    esp,0x10
c0009110:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009114:	83 ec 0c             	sub    esp,0xc
c0009117:	68 98 3f 02 c0       	push   0xc0023f98
c000911c:	e8 53 4d 01 00       	call   c001de74 <LinkedList<UnixFile>::removeFirst()>
c0009121:	83 c4 10             	add    esp,0x10
c0009124:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009128:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000912c:	74 40                	je     c000916e <UnixFile::~UnixFile()+0x92>
c000912e:	83 ec 08             	sub    esp,0x8
c0009131:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009135:	68 98 3f 02 c0       	push   0xc0023f98
c000913a:	e8 59 4c 01 00       	call   c001dd98 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000913f:	83 c4 10             	add    esp,0x10
c0009142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009146:	8d 50 01             	lea    edx,[eax+0x1]
c0009149:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000914d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0009152:	0f 94 c0             	sete   al
c0009155:	84 c0                	test   al,al
c0009157:	74 a7                	je     c0009100 <UnixFile::~UnixFile()+0x24>
c0009159:	83 ec 0c             	sub    esp,0xc
c000915c:	68 94 f2 01 c0       	push   0xc001f294
c0009161:	e8 49 72 00 00       	call   c00103af <KePanic(char const*)>
c0009166:	83 c4 10             	add    esp,0x10
c0009169:	eb 95                	jmp    c0009100 <UnixFile::~UnixFile()+0x24>
c000916b:	90                   	nop
c000916c:	eb 01                	jmp    c000916f <UnixFile::~UnixFile()+0x93>
c000916e:	90                   	nop
c000916f:	90                   	nop
c0009170:	83 c4 1c             	add    esp,0x1c
c0009173:	c3                   	ret    

c0009174 <UnixFile::~UnixFile()>:
c0009174:	83 ec 0c             	sub    esp,0xc
c0009177:	83 ec 0c             	sub    esp,0xc
c000917a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000917e:	e8 59 ff ff ff       	call   c00090dc <UnixFile::~UnixFile()>
c0009183:	83 c4 10             	add    esp,0x10
c0009186:	83 ec 08             	sub    esp,0x8
c0009189:	6a 0c                	push   0xc
c000918b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000918f:	e8 70 13 00 00       	call   c000a504 <operator delete(void*, unsigned long)>
c0009194:	83 c4 10             	add    esp,0x10
c0009197:	83 c4 0c             	add    esp,0xc
c000919a:	c3                   	ret    
c000919b:	90                   	nop

c000919c <ReservedFilename::~ReservedFilename()>:
c000919c:	83 ec 0c             	sub    esp,0xc
c000919f:	ba d8 f2 01 c0       	mov    edx,0xc001f2d8
c00091a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091a8:	89 10                	mov    DWORD PTR [eax],edx
c00091aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00091ae:	83 ec 0c             	sub    esp,0xc
c00091b1:	50                   	push   eax
c00091b2:	e8 25 ff ff ff       	call   c00090dc <UnixFile::~UnixFile()>
c00091b7:	83 c4 10             	add    esp,0x10
c00091ba:	90                   	nop
c00091bb:	83 c4 0c             	add    esp,0xc
c00091be:	c3                   	ret    
c00091bf:	90                   	nop

c00091c0 <ReservedFilename::~ReservedFilename()>:
c00091c0:	83 ec 0c             	sub    esp,0xc
c00091c3:	83 ec 0c             	sub    esp,0xc
c00091c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091ca:	e8 cd ff ff ff       	call   c000919c <ReservedFilename::~ReservedFilename()>
c00091cf:	83 c4 10             	add    esp,0x10
c00091d2:	83 ec 08             	sub    esp,0x8
c00091d5:	6a 0c                	push   0xc
c00091d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00091db:	e8 24 13 00 00       	call   c000a504 <operator delete(void*, unsigned long)>
c00091e0:	83 c4 10             	add    esp,0x10
c00091e3:	83 c4 0c             	add    esp,0xc
c00091e6:	c3                   	ret    

c00091e7 <getFromFileDescriptor(int)>:
c00091e7:	53                   	push   ebx
c00091e8:	83 ec 08             	sub    esp,0x8
c00091eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00091ef:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00091f5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00091fb:	7f 2c                	jg     c0009229 <getFromFileDescriptor(int)+0x42>
c00091fd:	83 ec 0c             	sub    esp,0xc
c0009200:	68 98 3f 02 c0       	push   0xc0023f98
c0009205:	e8 62 4c 01 00       	call   c001de6c <LinkedList<UnixFile>::getFirstElement()>
c000920a:	83 c4 10             	add    esp,0x10
c000920d:	85 c0                	test   eax,eax
c000920f:	75 04                	jne    c0009215 <getFromFileDescriptor(int)+0x2e>
c0009211:	31 c0                	xor    eax,eax
c0009213:	eb 6e                	jmp    c0009283 <getFromFileDescriptor(int)+0x9c>
c0009215:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009218:	74 69                	je     c0009283 <getFromFileDescriptor(int)+0x9c>
c000921a:	52                   	push   edx
c000921b:	52                   	push   edx
c000921c:	50                   	push   eax
c000921d:	68 98 3f 02 c0       	push   0xc0023f98
c0009222:	e8 ef 4c 01 00       	call   c001df16 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009227:	eb e1                	jmp    c000920a <getFromFileDescriptor(int)+0x23>
c0009229:	a1 8c 3f 02 c0       	mov    eax,ds:0xc0023f8c
c000922e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009234:	74 4d                	je     c0009283 <getFromFileDescriptor(int)+0x9c>
c0009236:	a1 90 3f 02 c0       	mov    eax,ds:0xc0023f90
c000923b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009241:	74 40                	je     c0009283 <getFromFileDescriptor(int)+0x9c>
c0009243:	a1 88 3f 02 c0       	mov    eax,ds:0xc0023f88
c0009248:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000924e:	74 33                	je     c0009283 <getFromFileDescriptor(int)+0x9c>
c0009250:	a1 84 3f 02 c0       	mov    eax,ds:0xc0023f84
c0009255:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000925b:	74 26                	je     c0009283 <getFromFileDescriptor(int)+0x9c>
c000925d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0009263:	83 f8 08             	cmp    eax,0x8
c0009266:	77 09                	ja     c0009271 <getFromFileDescriptor(int)+0x8a>
c0009268:	8b 04 85 60 3f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc0a0]
c000926f:	eb 12                	jmp    c0009283 <getFromFileDescriptor(int)+0x9c>
c0009271:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009277:	83 fb 08             	cmp    ebx,0x8
c000927a:	77 95                	ja     c0009211 <getFromFileDescriptor(int)+0x2a>
c000927c:	8b 04 9d 20 3f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdc0e0]
c0009283:	83 c4 08             	add    esp,0x8
c0009286:	5b                   	pop    ebx
c0009287:	c3                   	ret    

c0009288 <__static_initialization_and_destruction_0(int, int)>:
c0009288:	83 ec 0c             	sub    esp,0xc
c000928b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009290:	75 34                	jne    c00092c6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009292:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000929a:	75 2a                	jne    c00092c6 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000929c:	83 ec 0c             	sub    esp,0xc
c000929f:	68 98 3f 02 c0       	push   0xc0023f98
c00092a4:	e8 ad 4a 01 00       	call   c001dd56 <LinkedList<UnixFile>::LinkedList()>
c00092a9:	83 c4 10             	add    esp,0x10
c00092ac:	83 ec 04             	sub    esp,0x4
c00092af:	68 30 12 02 c0       	push   0xc0021230
c00092b4:	68 98 3f 02 c0       	push   0xc0023f98
c00092b9:	68 54 dd 01 c0       	push   0xc001dd54
c00092be:	e8 f1 11 00 00       	call   c000a4b4 <__cxa_atexit>
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	90                   	nop
c00092c7:	83 c4 0c             	add    esp,0xc
c00092ca:	c3                   	ret    

c00092cb <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00092cb:	83 ec 0c             	sub    esp,0xc
c00092ce:	83 ec 08             	sub    esp,0x8
c00092d1:	68 ff ff 00 00       	push   0xffff
c00092d6:	6a 01                	push   0x1
c00092d8:	e8 ab ff ff ff       	call   c0009288 <__static_initialization_and_destruction_0(int, int)>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	83 c4 0c             	add    esp,0xc
c00092e3:	c3                   	ret    

c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00092e4:	53                   	push   ebx
c00092e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00092ed:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00092f3:	89 c8                	mov    eax,ecx
c00092f5:	d1 e8                	shr    eax,1
c00092f7:	03 05 a8 12 02 c0    	add    eax,DWORD PTR ds:0xc00212a8
c00092fd:	83 e1 01             	and    ecx,0x1
c0009300:	8a 10                	mov    dl,BYTE PTR [eax]
c0009302:	75 09                	jne    c000930d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009304:	83 e2 f0             	and    edx,0xfffffff0
c0009307:	09 da                	or     edx,ebx
c0009309:	88 10                	mov    BYTE PTR [eax],dl
c000930b:	5b                   	pop    ebx
c000930c:	c3                   	ret    
c000930d:	c1 e3 04             	shl    ebx,0x4
c0009310:	83 e2 0f             	and    edx,0xf
c0009313:	09 da                	or     edx,ebx
c0009315:	88 10                	mov    BYTE PTR [eax],dl
c0009317:	5b                   	pop    ebx
c0009318:	c3                   	ret    

c0009319 <Virt::getPageState(unsigned long)>:
c0009319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000931d:	8b 0d a8 12 02 c0    	mov    ecx,DWORD PTR ds:0xc00212a8
c0009323:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009329:	89 d0                	mov    eax,edx
c000932b:	d1 e8                	shr    eax,1
c000932d:	83 e2 01             	and    edx,0x1
c0009330:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009333:	75 04                	jne    c0009339 <Virt::getPageState(unsigned long)+0x20>
c0009335:	83 e0 0f             	and    eax,0xf
c0009338:	c3                   	ret    
c0009339:	c0 e8 04             	shr    al,0x4
c000933c:	c3                   	ret    

c000933d <Virt::allocateKernelVirtualPages(int)>:
c000933d:	55                   	push   ebp
c000933e:	31 ed                	xor    ebp,ebp
c0009340:	57                   	push   edi
c0009341:	56                   	push   esi
c0009342:	53                   	push   ebx
c0009343:	31 db                	xor    ebx,ebx
c0009345:	83 ec 1c             	sub    esp,0x1c
c0009348:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000934c:	8b 3d a4 12 02 c0    	mov    edi,DWORD PTR ds:0xc00212a4
c0009352:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0009357:	57                   	push   edi
c0009358:	e8 bc ff ff ff       	call   c0009319 <Virt::getPageState(unsigned long)>
c000935d:	5a                   	pop    edx
c000935e:	84 c0                	test   al,al
c0009360:	75 3a                	jne    c000939c <Virt::allocateKernelVirtualPages(int)+0x5f>
c0009362:	85 db                	test   ebx,ebx
c0009364:	75 02                	jne    c0009368 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0009366:	89 fd                	mov    ebp,edi
c0009368:	43                   	inc    ebx
c0009369:	39 f3                	cmp    ebx,esi
c000936b:	74 5a                	je     c00093c7 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000936d:	47                   	inc    edi
c000936e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0009374:	76 31                	jbe    c00093a7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0009376:	c7 05 a4 12 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00212a4,0xc8000
c0009380:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0009385:	75 28                	jne    c00093af <Virt::allocateKernelVirtualPages(int)+0x72>
c0009387:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000938c:	bf 00 80 0c 00       	mov    edi,0xc8000
c0009391:	57                   	push   edi
c0009392:	e8 82 ff ff ff       	call   c0009319 <Virt::getPageState(unsigned long)>
c0009397:	5a                   	pop    edx
c0009398:	84 c0                	test   al,al
c000939a:	74 c6                	je     c0009362 <Virt::allocateKernelVirtualPages(int)+0x25>
c000939c:	31 db                	xor    ebx,ebx
c000939e:	47                   	inc    edi
c000939f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00093a5:	77 cf                	ja     c0009376 <Virt::allocateKernelVirtualPages(int)+0x39>
c00093a7:	89 3d a4 12 02 c0    	mov    DWORD PTR ds:0xc00212a4,edi
c00093ad:	eb a8                	jmp    c0009357 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093af:	83 ec 0c             	sub    esp,0xc
c00093b2:	68 ec f2 01 c0       	push   0xc001f2ec
c00093b7:	e8 f3 6f 00 00       	call   c00103af <KePanic(char const*)>
c00093bc:	8b 3d a4 12 02 c0    	mov    edi,DWORD PTR ds:0xc00212a4
c00093c2:	83 c4 10             	add    esp,0x10
c00093c5:	eb 90                	jmp    c0009357 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00093c7:	89 2d a4 12 02 c0    	mov    DWORD PTR ds:0xc00212a4,ebp
c00093cd:	4b                   	dec    ebx
c00093ce:	74 5f                	je     c000942f <Virt::allocateKernelVirtualPages(int)+0xf2>
c00093d0:	85 f6                	test   esi,esi
c00093d2:	74 3d                	je     c0009411 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093d4:	89 e8                	mov    eax,ebp
c00093d6:	31 db                	xor    ebx,ebx
c00093d8:	8d 7e ff             	lea    edi,[esi-0x1]
c00093db:	eb 14                	jmp    c00093f1 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00093dd:	6a 01                	push   0x1
c00093df:	43                   	inc    ebx
c00093e0:	50                   	push   eax
c00093e1:	e8 fe fe ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00093e6:	58                   	pop    eax
c00093e7:	39 f3                	cmp    ebx,esi
c00093e9:	5a                   	pop    edx
c00093ea:	74 25                	je     c0009411 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00093ec:	a1 a4 12 02 c0       	mov    eax,ds:0xc00212a4
c00093f1:	8d 50 01             	lea    edx,[eax+0x1]
c00093f4:	85 db                	test   ebx,ebx
c00093f6:	89 15 a4 12 02 c0    	mov    DWORD PTR ds:0xc00212a4,edx
c00093fc:	74 20                	je     c000941e <Virt::allocateKernelVirtualPages(int)+0xe1>
c00093fe:	39 df                	cmp    edi,ebx
c0009400:	75 db                	jne    c00093dd <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009402:	6a 03                	push   0x3
c0009404:	43                   	inc    ebx
c0009405:	50                   	push   eax
c0009406:	e8 d9 fe ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000940b:	59                   	pop    ecx
c000940c:	39 f3                	cmp    ebx,esi
c000940e:	58                   	pop    eax
c000940f:	75 db                	jne    c00093ec <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009411:	83 c4 1c             	add    esp,0x1c
c0009414:	89 e8                	mov    eax,ebp
c0009416:	5b                   	pop    ebx
c0009417:	c1 e0 0c             	shl    eax,0xc
c000941a:	5e                   	pop    esi
c000941b:	5f                   	pop    edi
c000941c:	5d                   	pop    ebp
c000941d:	c3                   	ret    
c000941e:	6a 02                	push   0x2
c0009420:	bb 01 00 00 00       	mov    ebx,0x1
c0009425:	50                   	push   eax
c0009426:	e8 b9 fe ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000942b:	58                   	pop    eax
c000942c:	5a                   	pop    edx
c000942d:	eb bd                	jmp    c00093ec <Virt::allocateKernelVirtualPages(int)+0xaf>
c000942f:	6a 04                	push   0x4
c0009431:	8d 45 01             	lea    eax,[ebp+0x1]
c0009434:	55                   	push   ebp
c0009435:	a3 a4 12 02 c0       	mov    ds:0xc00212a4,eax
c000943a:	e8 a5 fe ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000943f:	59                   	pop    ecx
c0009440:	89 e8                	mov    eax,ebp
c0009442:	5b                   	pop    ebx
c0009443:	c1 e0 0c             	shl    eax,0xc
c0009446:	83 c4 1c             	add    esp,0x1c
c0009449:	5b                   	pop    ebx
c000944a:	5e                   	pop    esi
c000944b:	5f                   	pop    edi
c000944c:	5d                   	pop    ebp
c000944d:	c3                   	ret    

c000944e <Virt::freeSwapfilePage(unsigned long)>:
c000944e:	53                   	push   ebx
c000944f:	8b 15 ac 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fac
c0009455:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009459:	b8 01 00 00 00       	mov    eax,0x1
c000945e:	89 cb                	mov    ebx,ecx
c0009460:	d3 e0                	shl    eax,cl
c0009462:	c1 eb 05             	shr    ebx,0x5
c0009465:	f7 d0                	not    eax
c0009467:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000946a:	5b                   	pop    ebx
c000946b:	c3                   	ret    

c000946c <Virt::swapIDToSector(unsigned long)>:
c000946c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009470:	0f af 05 ac 12 02 c0 	imul   eax,DWORD PTR ds:0xc00212ac
c0009477:	03 05 b4 12 02 c0    	add    eax,DWORD PTR ds:0xc00212b4
c000947d:	c3                   	ret    

c000947e <Virt::allocateSwapfilePage()>:
c000947e:	55                   	push   ebp
c000947f:	31 d2                	xor    edx,edx
c0009481:	57                   	push   edi
c0009482:	56                   	push   esi
c0009483:	53                   	push   ebx
c0009484:	83 ec 0c             	sub    esp,0xc
c0009487:	8b 0d ac 12 02 c0    	mov    ecx,DWORD PTR ds:0xc00212ac
c000948d:	a1 b0 12 02 c0       	mov    eax,ds:0xc00212b0
c0009492:	f7 f1                	div    ecx
c0009494:	39 0d b0 12 02 c0    	cmp    DWORD PTR ds:0xc00212b0,ecx
c000949a:	72 2d                	jb     c00094c9 <Virt::allocateSwapfilePage()+0x4b>
c000949c:	8b 35 ac 3f 02 c0    	mov    esi,DWORD PTR ds:0xc0023fac
c00094a2:	8b 16                	mov    edx,DWORD PTR [esi]
c00094a4:	f6 c2 01             	test   dl,0x1
c00094a7:	74 3c                	je     c00094e5 <Virt::allocateSwapfilePage()+0x67>
c00094a9:	31 c9                	xor    ecx,ecx
c00094ab:	bf 01 00 00 00       	mov    edi,0x1
c00094b0:	eb 12                	jmp    c00094c4 <Virt::allocateSwapfilePage()+0x46>
c00094b2:	89 fd                	mov    ebp,edi
c00094b4:	89 ca                	mov    edx,ecx
c00094b6:	d3 e5                	shl    ebp,cl
c00094b8:	c1 ea 05             	shr    edx,0x5
c00094bb:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00094be:	8b 13                	mov    edx,DWORD PTR [ebx]
c00094c0:	85 ea                	test   edx,ebp
c00094c2:	74 2a                	je     c00094ee <Virt::allocateSwapfilePage()+0x70>
c00094c4:	41                   	inc    ecx
c00094c5:	39 c8                	cmp    eax,ecx
c00094c7:	77 e9                	ja     c00094b2 <Virt::allocateSwapfilePage()+0x34>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 53 f4 01 c0       	push   0xc001f453
c00094d1:	e8 d9 6e 00 00       	call   c00103af <KePanic(char const*)>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	31 c9                	xor    ecx,ecx
c00094db:	83 c4 0c             	add    esp,0xc
c00094de:	89 c8                	mov    eax,ecx
c00094e0:	5b                   	pop    ebx
c00094e1:	5e                   	pop    esi
c00094e2:	5f                   	pop    edi
c00094e3:	5d                   	pop    ebp
c00094e4:	c3                   	ret    
c00094e5:	89 f3                	mov    ebx,esi
c00094e7:	bd 01 00 00 00       	mov    ebp,0x1
c00094ec:	31 c9                	xor    ecx,ecx
c00094ee:	09 ea                	or     edx,ebp
c00094f0:	89 c8                	mov    eax,ecx
c00094f2:	89 13                	mov    DWORD PTR [ebx],edx
c00094f4:	83 c4 0c             	add    esp,0xc
c00094f7:	5b                   	pop    ebx
c00094f8:	5e                   	pop    esi
c00094f9:	5f                   	pop    edi
c00094fa:	5d                   	pop    ebp
c00094fb:	c3                   	ret    

c00094fc <Virt::virtualMemorySetup()>:
c00094fc:	53                   	push   ebx
c00094fd:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009502:	6a 0f                	push   0xf
c0009504:	53                   	push   ebx
c0009505:	43                   	inc    ebx
c0009506:	e8 d9 fd ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000950b:	58                   	pop    eax
c000950c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009512:	5a                   	pop    edx
c0009513:	75 ed                	jne    c0009502 <Virt::virtualMemorySetup()+0x6>
c0009515:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000951a:	6a 00                	push   0x0
c000951c:	53                   	push   ebx
c000951d:	43                   	inc    ebx
c000951e:	e8 c1 fd ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009523:	59                   	pop    ecx
c0009524:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000952a:	58                   	pop    eax
c000952b:	75 ed                	jne    c000951a <Virt::virtualMemorySetup()+0x1e>
c000952d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009532:	6a 0f                	push   0xf
c0009534:	53                   	push   ebx
c0009535:	43                   	inc    ebx
c0009536:	e8 a9 fd ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000953b:	58                   	pop    eax
c000953c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009542:	5a                   	pop    edx
c0009543:	75 ed                	jne    c0009532 <Virt::virtualMemorySetup()+0x36>
c0009545:	5b                   	pop    ebx
c0009546:	c3                   	ret    

c0009547 <Virt::setupPageSwapping(int)>:
c0009547:	53                   	push   ebx
c0009548:	83 ec 0c             	sub    esp,0xc
c000954b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000954f:	a1 28 64 02 c0       	mov    eax,ds:0xc0026428
c0009554:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000955a:	8b 10                	mov    edx,DWORD PTR [eax]
c000955c:	53                   	push   ebx
c000955d:	c1 e3 0b             	shl    ebx,0xb
c0009560:	68 6a f4 01 c0       	push   0xc001f46a
c0009565:	50                   	push   eax
c0009566:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009569:	89 1d b0 12 02 c0    	mov    DWORD PTR ds:0xc00212b0,ebx
c000956f:	c6 05 b8 12 02 c0 43 	mov    BYTE PTR ds:0xc00212b8,0x43
c0009576:	c1 eb 08             	shr    ebx,0x8
c0009579:	a3 b4 12 02 c0       	mov    ds:0xc00212b4,eax
c000957e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009581:	c7 05 ac 12 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00212ac,0x8
c000958b:	e8 d5 e2 ff ff       	call   c0007865 <malloc>
c0009590:	83 c4 0c             	add    esp,0xc
c0009593:	89 c1                	mov    ecx,eax
c0009595:	a3 ac 3f 02 c0       	mov    ds:0xc0023fac,eax
c000959a:	31 d2                	xor    edx,edx
c000959c:	a1 b0 12 02 c0       	mov    eax,ds:0xc00212b0
c00095a1:	f7 35 ac 12 02 c0    	div    DWORD PTR ds:0xc00212ac
c00095a7:	c1 e8 05             	shr    eax,0x5
c00095aa:	50                   	push   eax
c00095ab:	6a 00                	push   0x0
c00095ad:	51                   	push   ecx
c00095ae:	e8 0d 6f ff ff       	call   c00004c0 <memset>
c00095b3:	83 c4 18             	add    esp,0x18
c00095b6:	5b                   	pop    ebx
c00095b7:	c3                   	ret    

c00095b8 <VAS::VAS(VAS*)>:
c00095b8:	83 ec 0c             	sub    esp,0xc
c00095bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095bf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00095c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095ca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00095d1:	83 ec 0c             	sub    esp,0xc
c00095d4:	68 0c f3 01 c0       	push   0xc001f30c
c00095d9:	e8 d1 6d 00 00       	call   c00103af <KePanic(char const*)>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	90                   	nop
c00095e2:	83 c4 0c             	add    esp,0xc
c00095e5:	c3                   	ret    

c00095e6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00095e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095ea:	89 c2                	mov    edx,eax
c00095ec:	c1 e8 0a             	shr    eax,0xa
c00095ef:	c1 ea 16             	shr    edx,0x16
c00095f2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00095f7:	19 c9                	sbb    ecx,ecx
c00095f9:	c1 e2 0c             	shl    edx,0xc
c00095fc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0009602:	25 fc 0f 00 00       	and    eax,0xffc
c0009607:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000960e:	01 d0                	add    eax,edx
c0009610:	c3                   	ret    
c0009611:	90                   	nop

c0009612 <VAS::getPageTableEntry(unsigned long)>:
c0009612:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009616:	89 ca                	mov    edx,ecx
c0009618:	c1 e9 0a             	shr    ecx,0xa
c000961b:	c1 ea 16             	shr    edx,0x16
c000961e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0009624:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000962a:	c1 e0 0c             	shl    eax,0xc
c000962d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009630:	c3                   	ret    

c0009631 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009631:	57                   	push   edi
c0009632:	56                   	push   esi
c0009633:	be 01 00 00 00       	mov    esi,0x1
c0009638:	53                   	push   ebx
c0009639:	83 ec 10             	sub    esp,0x10
c000963c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009640:	c1 eb 0c             	shr    ebx,0xc
c0009643:	eb 3f                	jmp    c0009684 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009645:	83 ec 08             	sub    esp,0x8
c0009648:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c000964d:	57                   	push   edi
c000964e:	50                   	push   eax
c000964f:	e8 be ff ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c0009654:	83 c4 10             	add    esp,0x10
c0009657:	8b 00                	mov    eax,DWORD PTR [eax]
c0009659:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000965d:	f6 c4 04             	test   ah,0x4
c0009660:	75 60                	jne    c00096c2 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009662:	80 fa 04             	cmp    dl,0x4
c0009665:	74 79                	je     c00096e0 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c0009667:	80 fa 02             	cmp    dl,0x2
c000966a:	0f 84 89 00 00 00    	je     c00096f9 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009670:	80 fa 03             	cmp    dl,0x3
c0009673:	0f 84 ae 00 00 00    	je     c0009727 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009679:	fe ca                	dec    dl
c000967b:	0f 84 93 00 00 00    	je     c0009714 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009681:	43                   	inc    ebx
c0009682:	31 f6                	xor    esi,esi
c0009684:	53                   	push   ebx
c0009685:	89 df                	mov    edi,ebx
c0009687:	e8 8d fc ff ff       	call   c0009319 <Virt::getPageState(unsigned long)>
c000968c:	c1 e7 0c             	shl    edi,0xc
c000968f:	5a                   	pop    edx
c0009690:	84 c0                	test   al,al
c0009692:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009696:	75 ad                	jne    c0009645 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009698:	83 ec 0c             	sub    esp,0xc
c000969b:	68 81 f4 01 c0       	push   0xc001f481
c00096a0:	e8 0a 6d 00 00       	call   c00103af <KePanic(char const*)>
c00096a5:	5a                   	pop    edx
c00096a6:	59                   	pop    ecx
c00096a7:	57                   	push   edi
c00096a8:	8b 3d b0 3f 02 c0    	mov    edi,DWORD PTR ds:0xc0023fb0
c00096ae:	57                   	push   edi
c00096af:	e8 5e ff ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c00096b4:	83 c4 10             	add    esp,0x10
c00096b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00096b9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096bd:	f6 c4 04             	test   ah,0x4
c00096c0:	74 bf                	je     c0009681 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096c2:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00096c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096cb:	83 ec 0c             	sub    esp,0xc
c00096ce:	50                   	push   eax
c00096cf:	e8 0b e4 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c00096d4:	83 c4 10             	add    esp,0x10
c00096d7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00096db:	80 fa 04             	cmp    dl,0x4
c00096de:	75 87                	jne    c0009667 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00096e0:	89 f0                	mov    eax,esi
c00096e2:	84 c0                	test   al,al
c00096e4:	75 47                	jne    c000972d <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c00096e6:	c7 44 24 20 30 f3 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f330
c00096ee:	83 c4 10             	add    esp,0x10
c00096f1:	5b                   	pop    ebx
c00096f2:	5e                   	pop    esi
c00096f3:	5f                   	pop    edi
c00096f4:	e9 b6 6c 00 00       	jmp    c00103af <KePanic(char const*)>
c00096f9:	89 f0                	mov    eax,esi
c00096fb:	84 c0                	test   al,al
c00096fd:	75 15                	jne    c0009714 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00096ff:	83 ec 0c             	sub    esp,0xc
c0009702:	68 9d f4 01 c0       	push   0xc001f49d
c0009707:	e8 a3 6c 00 00       	call   c00103af <KePanic(char const*)>
c000970c:	83 c4 10             	add    esp,0x10
c000970f:	e9 6d ff ff ff       	jmp    c0009681 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009714:	83 ec 08             	sub    esp,0x8
c0009717:	6a 00                	push   0x0
c0009719:	53                   	push   ebx
c000971a:	e8 c5 fb ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000971f:	83 c4 10             	add    esp,0x10
c0009722:	e9 5a ff ff ff       	jmp    c0009681 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009727:	89 f0                	mov    eax,esi
c0009729:	84 c0                	test   al,al
c000972b:	75 15                	jne    c0009742 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c000972d:	83 ec 08             	sub    esp,0x8
c0009730:	6a 00                	push   0x0
c0009732:	53                   	push   ebx
c0009733:	e8 ac fb ff ff       	call   c00092e4 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009738:	83 c4 10             	add    esp,0x10
c000973b:	83 c4 10             	add    esp,0x10
c000973e:	5b                   	pop    ebx
c000973f:	5e                   	pop    esi
c0009740:	5f                   	pop    edi
c0009741:	c3                   	ret    
c0009742:	c7 44 24 20 b9 f4 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f4b9
c000974a:	83 c4 10             	add    esp,0x10
c000974d:	5b                   	pop    ebx
c000974e:	5e                   	pop    esi
c000974f:	5f                   	pop    edi
c0009750:	e9 5a 6c 00 00       	jmp    c00103af <KePanic(char const*)>
c0009755:	90                   	nop

c0009756 <VAS::freeAllocatedPages(unsigned long)>:
c0009756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000975a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000975e:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009762:	74 09                	je     c000976d <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009764:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009768:	e9 c4 fe ff ff       	jmp    c0009631 <Virt::freeKernelVirtualPages(unsigned long)>
c000976d:	c7 44 24 04 54 f3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f354
c0009775:	e9 80 0e 00 00       	jmp    c000a5fa <Dbg::kprintf(char const*, ...)>

c000977a <VAS::virtualToPhysical(unsigned long)>:
c000977a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000977e:	50                   	push   eax
c000977f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009783:	52                   	push   edx
c0009784:	e8 89 fe ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c0009789:	59                   	pop    ecx
c000978a:	8b 00                	mov    eax,DWORD PTR [eax]
c000978c:	5a                   	pop    edx
c000978d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009792:	c3                   	ret    
c0009793:	90                   	nop

c0009794 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009794:	55                   	push   ebp
c0009795:	57                   	push   edi
c0009796:	56                   	push   esi
c0009797:	53                   	push   ebx
c0009798:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000979c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00097a0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00097a4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00097a8:	85 db                	test   ebx,ebx
c00097aa:	7e 22                	jle    c00097ce <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00097ac:	c1 e3 0c             	shl    ebx,0xc
c00097af:	01 f3                	add    ebx,esi
c00097b1:	56                   	push   esi
c00097b2:	81 c6 00 10 00 00    	add    esi,0x1000
c00097b8:	55                   	push   ebp
c00097b9:	e8 54 fe ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c00097be:	5a                   	pop    edx
c00097bf:	59                   	pop    ecx
c00097c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00097c2:	21 f9                	and    ecx,edi
c00097c4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00097c8:	39 f3                	cmp    ebx,esi
c00097ca:	89 08                	mov    DWORD PTR [eax],ecx
c00097cc:	75 e3                	jne    c00097b1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00097ce:	5b                   	pop    ebx
c00097cf:	5e                   	pop    esi
c00097d0:	5f                   	pop    edi
c00097d1:	5d                   	pop    ebp
c00097d2:	c3                   	ret    
c00097d3:	90                   	nop

c00097d4 <VAS::VAS()>:
c00097d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097d8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00097df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097e3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00097ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097ee:	a3 b0 3f 02 c0       	mov    ds:0xc0023fb0,eax
c00097f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097f7:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00097fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097ff:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009802:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009806:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000980d:	ba 7d 20 02 c0       	mov    edx,0xc002207d
c0009812:	b8 00 20 02 c0       	mov    eax,0xc0022000
c0009817:	29 c2                	sub    edx,eax
c0009819:	89 d0                	mov    eax,edx
c000981b:	05 ff 0f 00 00       	add    eax,0xfff
c0009820:	c1 e8 0c             	shr    eax,0xc
c0009823:	89 c2                	mov    edx,eax
c0009825:	b8 00 20 02 c0       	mov    eax,0xc0022000
c000982a:	6a 04                	push   0x4
c000982c:	6a ff                	push   0xffffffff
c000982e:	52                   	push   edx
c000982f:	50                   	push   eax
c0009830:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009834:	e8 5b ff ff ff       	call   c0009794 <VAS::reflagRange(unsigned long, int, int, int)>
c0009839:	83 c4 14             	add    esp,0x14
c000983c:	90                   	nop
c000983d:	c3                   	ret    

c000983e <VAS::setToWriteCombining(unsigned long, int)>:
c000983e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009843:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009849:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009850:	75 01                	jne    c0009853 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009852:	c3                   	ret    
c0009853:	68 80 00 00 00       	push   0x80
c0009858:	6a ff                	push   0xffffffff
c000985a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000985e:	50                   	push   eax
c000985f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009863:	52                   	push   edx
c0009864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009868:	51                   	push   ecx
c0009869:	e8 26 ff ff ff       	call   c0009794 <VAS::reflagRange(unsigned long, int, int, int)>
c000986e:	83 c4 14             	add    esp,0x14
c0009871:	c3                   	ret    

c0009872 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009872:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009877:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000987b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000987e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009882:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009885:	19 c0                	sbb    eax,eax
c0009887:	83 ca 03             	or     edx,0x3
c000988a:	83 e0 fc             	and    eax,0xfffffffc
c000988d:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009894:	0f 20 d8             	mov    eax,cr3
c0009897:	0f 22 d8             	mov    cr3,eax
c000989a:	c3                   	ret    
c000989b:	90                   	nop

c000989c <VAS::~VAS()>:
c000989c:	83 ec 2c             	sub    esp,0x2c
c000989f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00098a7:	fa                   	cli    
c00098a8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00098ad:	40                   	inc    eax
c00098ae:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00098b3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00098b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00098ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00098bd:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00098c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098c7:	6a 01                	push   0x1
c00098c9:	50                   	push   eax
c00098ca:	e8 a3 ff ff ff       	call   c0009872 <VAS::mapOtherVASIn(bool, VAS*)>
c00098cf:	83 c4 0c             	add    esp,0xc
c00098d2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00098da:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00098e2:	0f 8f d4 00 00 00    	jg     c00099bc <VAS::~VAS()+0x120>
c00098e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098f3:	c1 e2 02             	shl    edx,0x2
c00098f6:	01 d0                	add    eax,edx
c00098f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00098fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00098fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009902:	83 e0 01             	and    eax,0x1
c0009905:	0f 84 a8 00 00 00    	je     c00099b3 <VAS::~VAS()+0x117>
c000990b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009913:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000991b:	7f 72                	jg     c000998f <VAS::~VAS()+0xf3>
c000991d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009921:	c1 e0 0a             	shl    eax,0xa
c0009924:	89 c2                	mov    edx,eax
c0009926:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000992a:	01 d0                	add    eax,edx
c000992c:	c1 e0 0c             	shl    eax,0xc
c000992f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009933:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009938:	8b 00                	mov    eax,DWORD PTR [eax]
c000993a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000993d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009943:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009947:	6a 01                	push   0x1
c0009949:	50                   	push   eax
c000994a:	e8 97 fc ff ff       	call   c00095e6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000994f:	83 c4 0c             	add    esp,0xc
c0009952:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009956:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000995a:	8b 00                	mov    eax,DWORD PTR [eax]
c000995c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009964:	25 01 04 00 00       	and    eax,0x401
c0009969:	3d 01 04 00 00       	cmp    eax,0x401
c000996e:	75 19                	jne    c0009989 <VAS::~VAS()+0xed>
c0009970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009974:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009979:	83 ec 0c             	sub    esp,0xc
c000997c:	50                   	push   eax
c000997d:	e8 5d e1 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c0009982:	83 c4 10             	add    esp,0x10
c0009985:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009989:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000998d:	eb 84                	jmp    c0009913 <VAS::~VAS()+0x77>
c000998f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009993:	25 00 04 00 00       	and    eax,0x400
c0009998:	74 19                	je     c00099b3 <VAS::~VAS()+0x117>
c000999a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000999e:	25 00 f0 ff ff       	and    eax,0xfffff000
c00099a3:	83 ec 0c             	sub    esp,0xc
c00099a6:	50                   	push   eax
c00099a7:	e8 33 e1 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c00099ac:	83 c4 10             	add    esp,0x10
c00099af:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099b3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00099b7:	e9 1e ff ff ff       	jmp    c00098da <VAS::~VAS()+0x3e>
c00099bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00099c3:	83 ec 0c             	sub    esp,0xc
c00099c6:	50                   	push   eax
c00099c7:	e8 65 fc ff ff       	call   c0009631 <Virt::freeKernelVirtualPages(unsigned long)>
c00099cc:	83 c4 10             	add    esp,0x10
c00099cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00099d3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00099d6:	83 ec 0c             	sub    esp,0xc
c00099d9:	50                   	push   eax
c00099da:	e8 00 e1 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c00099df:	83 c4 10             	add    esp,0x10
c00099e2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00099e6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00099eb:	48                   	dec    eax
c00099ec:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00099f1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00099f6:	85 c0                	test   eax,eax
c00099f8:	75 01                	jne    c00099fb <VAS::~VAS()+0x15f>
c00099fa:	fb                   	sti    
c00099fb:	90                   	nop
c00099fc:	83 c4 2c             	add    esp,0x2c
c00099ff:	c3                   	ret    

c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009a00:	55                   	push   ebp
c0009a01:	57                   	push   edi
c0009a02:	56                   	push   esi
c0009a03:	53                   	push   ebx
c0009a04:	83 ec 1c             	sub    esp,0x1c
c0009a07:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009a0b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a0f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009a15:	77 0b                	ja     c0009a22 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009a17:	0f 20 d8             	mov    eax,cr3
c0009a1a:	0f 20 d8             	mov    eax,cr3
c0009a1d:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009a20:	75 47                	jne    c0009a69 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009a22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a26:	09 d8                	or     eax,ebx
c0009a28:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a2d:	75 57                	jne    c0009a86 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009a2f:	89 de                	mov    esi,ebx
c0009a31:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a34:	c1 ee 16             	shr    esi,0x16
c0009a37:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009a3e:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009a42:	74 54                	je     c0009a98 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009a44:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009a48:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009a4e:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009a52:	c1 e6 0c             	shl    esi,0xc
c0009a55:	c1 eb 0a             	shr    ebx,0xa
c0009a58:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009a5e:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009a61:	83 c4 1c             	add    esp,0x1c
c0009a64:	5b                   	pop    ebx
c0009a65:	5e                   	pop    esi
c0009a66:	5f                   	pop    edi
c0009a67:	5d                   	pop    ebp
c0009a68:	c3                   	ret    
c0009a69:	83 ec 0c             	sub    esp,0xc
c0009a6c:	68 78 f3 01 c0       	push   0xc001f378
c0009a71:	e8 84 0b 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0009a76:	83 c4 10             	add    esp,0x10
c0009a79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a7d:	09 d8                	or     eax,ebx
c0009a7f:	a9 ff 0f 00 00       	test   eax,0xfff
c0009a84:	74 a9                	je     c0009a2f <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009a86:	83 ec 0c             	sub    esp,0xc
c0009a89:	68 e0 f3 01 c0       	push   0xc001f3e0
c0009a8e:	e8 1c 69 00 00       	call   c00103af <KePanic(char const*)>
c0009a93:	83 c4 10             	add    esp,0x10
c0009a96:	eb 97                	jmp    c0009a2f <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009a98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a9c:	e8 a0 e0 ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009aa1:	83 ec 0c             	sub    esp,0xc
c0009aa4:	89 c5                	mov    ebp,eax
c0009aa6:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009aac:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009ab0:	6a 01                	push   0x1
c0009ab2:	e8 86 f8 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c0009ab7:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009abe:	6a 01                	push   0x1
c0009ac0:	50                   	push   eax
c0009ac1:	55                   	push   ebp
c0009ac2:	81 cd 07 04 00 00    	or     ebp,0x407
c0009ac8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009acc:	51                   	push   ecx
c0009acd:	e8 28 02 00 00       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009ad2:	83 c4 1c             	add    esp,0x1c
c0009ad5:	68 00 10 00 00       	push   0x1000
c0009ada:	6a 00                	push   0x0
c0009adc:	50                   	push   eax
c0009add:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ae1:	e8 da 69 ff ff       	call   c00004c0 <memset>
c0009ae6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009aea:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aed:	e8 3f fb ff ff       	call   c0009631 <Virt::freeKernelVirtualPages(unsigned long)>
c0009af2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009af6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009af9:	83 c4 10             	add    esp,0x10
c0009afc:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009aff:	e9 40 ff ff ff       	jmp    c0009a44 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009b04 <VAS::allocatePages(int, int)>:
c0009b04:	55                   	push   ebp
c0009b05:	57                   	push   edi
c0009b06:	56                   	push   esi
c0009b07:	53                   	push   ebx
c0009b08:	83 ec 1c             	sub    esp,0x1c
c0009b0b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009b0f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009b14:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b1a:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009b20:	83 e0 01             	and    eax,0x1
c0009b23:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009b27:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009b2b:	0f 85 cc 00 00 00    	jne    c0009bfd <VAS::allocatePages(int, int)+0xf9>
c0009b31:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009b38:	85 c0                	test   eax,eax
c0009b3a:	0f 84 a1 00 00 00    	je     c0009be1 <VAS::allocatePages(int, int)+0xdd>
c0009b40:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009b44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b48:	c1 e6 0c             	shl    esi,0xc
c0009b4b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009b4f:	85 c0                	test   eax,eax
c0009b51:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009b54:	7e 33                	jle    c0009b89 <VAS::allocatePages(int, int)+0x85>
c0009b56:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009b5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b5e:	81 cd 00 04 00 00    	or     ebp,0x400
c0009b64:	e8 d8 df ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009b69:	55                   	push   ebp
c0009b6a:	53                   	push   ebx
c0009b6b:	50                   	push   eax
c0009b6c:	57                   	push   edi
c0009b6d:	e8 8e fe ff ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b72:	83 c4 10             	add    esp,0x10
c0009b75:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b7a:	74 03                	je     c0009b7f <VAS::allocatePages(int, int)+0x7b>
c0009b7c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b7f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b85:	39 de                	cmp    esi,ebx
c0009b87:	75 db                	jne    c0009b64 <VAS::allocatePages(int, int)+0x60>
c0009b89:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b8e:	75 12                	jne    c0009ba2 <VAS::allocatePages(int, int)+0x9e>
c0009b90:	0f 20 d8             	mov    eax,cr3
c0009b93:	0f 22 d8             	mov    cr3,eax
c0009b96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b9a:	83 c4 1c             	add    esp,0x1c
c0009b9d:	5b                   	pop    ebx
c0009b9e:	5e                   	pop    esi
c0009b9f:	5f                   	pop    edi
c0009ba0:	5d                   	pop    ebp
c0009ba1:	c3                   	ret    
c0009ba2:	c1 ee 0a             	shr    esi,0xa
c0009ba5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009ba9:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009baf:	c1 eb 0a             	shr    ebx,0xa
c0009bb2:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009bb8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009bbe:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bc4:	39 c3                	cmp    ebx,eax
c0009bc6:	77 ce                	ja     c0009b96 <VAS::allocatePages(int, int)+0x92>
c0009bc8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bcb:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bd1:	39 d8                	cmp    eax,ebx
c0009bd3:	73 f3                	jae    c0009bc8 <VAS::allocatePages(int, int)+0xc4>
c0009bd5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bd9:	83 c4 1c             	add    esp,0x1c
c0009bdc:	5b                   	pop    ebx
c0009bdd:	5e                   	pop    esi
c0009bde:	5f                   	pop    edi
c0009bdf:	5d                   	pop    ebp
c0009be0:	c3                   	ret    
c0009be1:	83 ec 0c             	sub    esp,0xc
c0009be4:	68 04 f4 01 c0       	push   0xc001f404
c0009be9:	e8 c1 67 00 00       	call   c00103af <KePanic(char const*)>
c0009bee:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009bf1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009bf5:	83 c4 10             	add    esp,0x10
c0009bf8:	e9 43 ff ff ff       	jmp    c0009b40 <VAS::allocatePages(int, int)+0x3c>
c0009bfd:	83 ec 0c             	sub    esp,0xc
c0009c00:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009c04:	51                   	push   ecx
c0009c05:	e8 33 f7 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c0009c0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c0e:	83 c4 10             	add    esp,0x10
c0009c11:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009c16:	0f 87 9b 00 00 00    	ja     c0009cb7 <VAS::allocatePages(int, int)+0x1b3>
c0009c1c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009c20:	85 d2                	test   edx,edx
c0009c22:	7e 3c                	jle    c0009c60 <VAS::allocatePages(int, int)+0x15c>
c0009c24:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c28:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009c2c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009c30:	c1 e5 0c             	shl    ebp,0xc
c0009c33:	81 ce 00 04 00 00    	or     esi,0x400
c0009c39:	01 dd                	add    ebp,ebx
c0009c3b:	e8 01 df ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009c40:	56                   	push   esi
c0009c41:	53                   	push   ebx
c0009c42:	50                   	push   eax
c0009c43:	57                   	push   edi
c0009c44:	e8 b7 fd ff ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c49:	83 c4 10             	add    esp,0x10
c0009c4c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c51:	74 03                	je     c0009c56 <VAS::allocatePages(int, int)+0x152>
c0009c53:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c56:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c5c:	39 dd                	cmp    ebp,ebx
c0009c5e:	75 db                	jne    c0009c3b <VAS::allocatePages(int, int)+0x137>
c0009c60:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c65:	0f 84 25 ff ff ff    	je     c0009b90 <VAS::allocatePages(int, int)+0x8c>
c0009c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c6f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009c73:	89 d3                	mov    ebx,edx
c0009c75:	c1 e0 0c             	shl    eax,0xc
c0009c78:	c1 eb 0a             	shr    ebx,0xa
c0009c7b:	01 d0                	add    eax,edx
c0009c7d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c83:	c1 e8 0a             	shr    eax,0xa
c0009c86:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	2d 00 00 40 00       	sub    eax,0x400000
c0009c96:	39 c3                	cmp    ebx,eax
c0009c98:	0f 87 f8 fe ff ff    	ja     c0009b96 <VAS::allocatePages(int, int)+0x92>
c0009c9e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ca1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ca7:	39 d8                	cmp    eax,ebx
c0009ca9:	73 f3                	jae    c0009c9e <VAS::allocatePages(int, int)+0x19a>
c0009cab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009caf:	83 c4 1c             	add    esp,0x1c
c0009cb2:	5b                   	pop    ebx
c0009cb3:	5e                   	pop    esi
c0009cb4:	5f                   	pop    edi
c0009cb5:	5d                   	pop    ebp
c0009cb6:	c3                   	ret    
c0009cb7:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009cbc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009cc2:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009cc9:	0f 84 4d ff ff ff    	je     c0009c1c <VAS::allocatePages(int, int)+0x118>
c0009ccf:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009cd7:	e9 40 ff ff ff       	jmp    c0009c1c <VAS::allocatePages(int, int)+0x118>

c0009cdc <VAS::setCPUSpecific(unsigned long)>:
c0009cdc:	83 ec 0c             	sub    esp,0xc
c0009cdf:	6a 05                	push   0x5
c0009ce1:	68 00 00 40 c2       	push   0xc2400000
c0009ce6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009cea:	50                   	push   eax
c0009ceb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009cef:	52                   	push   edx
c0009cf0:	e8 0b fd ff ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009cf5:	83 c4 1c             	add    esp,0x1c
c0009cf8:	c3                   	ret    
c0009cf9:	90                   	nop

c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009cfa:	55                   	push   ebp
c0009cfb:	57                   	push   edi
c0009cfc:	56                   	push   esi
c0009cfd:	53                   	push   ebx
c0009cfe:	83 ec 1c             	sub    esp,0x1c
c0009d01:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009d06:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d0a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009d10:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009d14:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009d1a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009d1e:	83 e0 01             	and    eax,0x1
c0009d21:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009d25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d29:	85 c0                	test   eax,eax
c0009d2b:	7e 39                	jle    c0009d66 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009d2d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d31:	89 f3                	mov    ebx,esi
c0009d33:	c1 e0 0c             	shl    eax,0xc
c0009d36:	01 f0                	add    eax,esi
c0009d38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d3c:	55                   	push   ebp
c0009d3d:	53                   	push   ebx
c0009d3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d42:	29 f0                	sub    eax,esi
c0009d44:	01 d8                	add    eax,ebx
c0009d46:	50                   	push   eax
c0009d47:	57                   	push   edi
c0009d48:	e8 b3 fc ff ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009d4d:	83 c4 10             	add    esp,0x10
c0009d50:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d55:	74 03                	je     c0009d5a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009d57:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d5a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d60:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009d64:	75 d6                	jne    c0009d3c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009d66:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009d6b:	75 10                	jne    c0009d7d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009d6d:	0f 20 d8             	mov    eax,cr3
c0009d70:	0f 22 d8             	mov    cr3,eax
c0009d73:	83 c4 1c             	add    esp,0x1c
c0009d76:	89 f0                	mov    eax,esi
c0009d78:	5b                   	pop    ebx
c0009d79:	5e                   	pop    esi
c0009d7a:	5f                   	pop    edi
c0009d7b:	5d                   	pop    ebp
c0009d7c:	c3                   	ret    
c0009d7d:	89 f3                	mov    ebx,esi
c0009d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d83:	c1 eb 0a             	shr    ebx,0xa
c0009d86:	c1 e0 0c             	shl    eax,0xc
c0009d89:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009d8f:	01 f0                	add    eax,esi
c0009d91:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009d97:	c1 e8 0a             	shr    eax,0xa
c0009d9a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009d9f:	2d 00 00 40 00       	sub    eax,0x400000
c0009da4:	39 c3                	cmp    ebx,eax
c0009da6:	77 cb                	ja     c0009d73 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009da8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009dab:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009db1:	39 d8                	cmp    eax,ebx
c0009db3:	73 f3                	jae    c0009da8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009db5:	83 c4 1c             	add    esp,0x1c
c0009db8:	89 f0                	mov    eax,esi
c0009dba:	5b                   	pop    ebx
c0009dbb:	5e                   	pop    esi
c0009dbc:	5f                   	pop    edi
c0009dbd:	5d                   	pop    ebp
c0009dbe:	c3                   	ret    
c0009dbf:	90                   	nop

c0009dc0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009dc0:	55                   	push   ebp
c0009dc1:	57                   	push   edi
c0009dc2:	56                   	push   esi
c0009dc3:	53                   	push   ebx
c0009dc4:	83 ec 1c             	sub    esp,0x1c
c0009dc7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009dcb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009dcf:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009dd3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009dd7:	a9 ff 0f 00 00       	test   eax,0xfff
c0009ddc:	75 4a                	jne    c0009e28 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009dde:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009de2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009de5:	c1 eb 16             	shr    ebx,0x16
c0009de8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009def:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009df3:	74 4d                	je     c0009e42 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009df5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009df9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009dfd:	c1 e8 0a             	shr    eax,0xa
c0009e00:	80 fa 01             	cmp    dl,0x1
c0009e03:	19 d2                	sbb    edx,edx
c0009e05:	c1 e3 0c             	shl    ebx,0xc
c0009e08:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009e0c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009e12:	25 fc 0f 00 00       	and    eax,0xffc
c0009e17:	01 d8                	add    eax,ebx
c0009e19:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009e20:	83 c4 1c             	add    esp,0x1c
c0009e23:	5b                   	pop    ebx
c0009e24:	5e                   	pop    esi
c0009e25:	5f                   	pop    edi
c0009e26:	5d                   	pop    ebp
c0009e27:	c3                   	ret    
c0009e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009e2c:	83 ec 0c             	sub    esp,0xc
c0009e2f:	68 30 f4 01 c0       	push   0xc001f430
c0009e34:	e8 76 65 00 00       	call   c00103af <KePanic(char const*)>
c0009e39:	83 c4 10             	add    esp,0x10
c0009e3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009e40:	eb 9c                	jmp    c0009dde <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009e42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e46:	e8 f6 dc ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009e4b:	83 ec 0c             	sub    esp,0xc
c0009e4e:	89 c5                	mov    ebp,eax
c0009e50:	8b 0d b0 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fb0
c0009e56:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009e5a:	6a 01                	push   0x1
c0009e5c:	e8 dc f4 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c0009e61:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009e68:	6a 01                	push   0x1
c0009e6a:	50                   	push   eax
c0009e6b:	55                   	push   ebp
c0009e6c:	81 cd 07 04 00 00    	or     ebp,0x407
c0009e72:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009e76:	51                   	push   ecx
c0009e77:	e8 7e fe ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e7c:	83 c4 1c             	add    esp,0x1c
c0009e7f:	68 00 10 00 00       	push   0x1000
c0009e84:	6a 00                	push   0x0
c0009e86:	50                   	push   eax
c0009e87:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e8b:	e8 30 66 ff ff       	call   c00004c0 <memset>
c0009e90:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e94:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e97:	e8 95 f7 ff ff       	call   c0009631 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e9c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e9f:	83 c4 10             	add    esp,0x10
c0009ea2:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009ea5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ea9:	e9 47 ff ff ff       	jmp    c0009df5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009eae <VAS::VAS(bool)>:
c0009eae:	53                   	push   ebx
c0009eaf:	83 ec 28             	sub    esp,0x28
c0009eb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009eb6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009eba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ebe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009ec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ec9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009ed0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ed4:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009ed8:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009edb:	e8 61 dc ff ff       	call   c0007b41 <Phys::allocatePage()>
c0009ee0:	89 c2                	mov    edx,eax
c0009ee2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ee6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009ee9:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c0009eef:	83 ec 0c             	sub    esp,0xc
c0009ef2:	6a 01                	push   0x1
c0009ef4:	e8 44 f4 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c0009ef9:	83 c4 10             	add    esp,0x10
c0009efc:	89 c2                	mov    edx,eax
c0009efe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f02:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009f05:	83 ec 0c             	sub    esp,0xc
c0009f08:	6a 03                	push   0x3
c0009f0a:	6a 01                	push   0x1
c0009f0c:	52                   	push   edx
c0009f0d:	50                   	push   eax
c0009f0e:	53                   	push   ebx
c0009f0f:	e8 e6 fd ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009f14:	83 c4 20             	add    esp,0x20
c0009f17:	89 c2                	mov    edx,eax
c0009f19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f1d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009f20:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009f28:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009f30:	7f 1c                	jg     c0009f4e <VAS::VAS(bool)+0xa0>
c0009f32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f36:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009f3d:	c1 e2 02             	shl    edx,0x2
c0009f40:	01 d0                	add    eax,edx
c0009f42:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f48:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009f4c:	eb da                	jmp    c0009f28 <VAS::VAS(bool)+0x7a>
c0009f4e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009f56:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009f5e:	7f 7a                	jg     c0009fda <VAS::VAS(bool)+0x12c>
c0009f60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009f64:	2d 00 02 00 00       	sub    eax,0x200
c0009f69:	c1 e0 0c             	shl    eax,0xc
c0009f6c:	83 c8 05             	or     eax,0x5
c0009f6f:	89 c2                	mov    edx,eax
c0009f71:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009f76:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f7c:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f82:	83 e0 10             	and    eax,0x10
c0009f85:	84 c0                	test   al,al
c0009f87:	74 07                	je     c0009f90 <VAS::VAS(bool)+0xe2>
c0009f89:	b8 00 01 00 00       	mov    eax,0x100
c0009f8e:	eb 05                	jmp    c0009f95 <VAS::VAS(bool)+0xe7>
c0009f90:	b8 00 00 00 00       	mov    eax,0x0
c0009f95:	09 d0                	or     eax,edx
c0009f97:	89 c1                	mov    ecx,eax
c0009f99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f9d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fa0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fa4:	c1 e2 02             	shl    edx,0x2
c0009fa7:	01 d0                	add    eax,edx
c0009fa9:	89 ca                	mov    edx,ecx
c0009fab:	89 10                	mov    DWORD PTR [eax],edx
c0009fad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009fb1:	2d 40 03 00 00       	sub    eax,0x340
c0009fb6:	83 f8 7f             	cmp    eax,0x7f
c0009fb9:	77 16                	ja     c0009fd1 <VAS::VAS(bool)+0x123>
c0009fbb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009fbf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fc2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009fc6:	c1 e2 02             	shl    edx,0x2
c0009fc9:	01 d0                	add    eax,edx
c0009fcb:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009fd1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009fd5:	e9 7c ff ff ff       	jmp    c0009f56 <VAS::VAS(bool)+0xa8>
c0009fda:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0009fdf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fe5:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009feb:	83 e0 10             	and    eax,0x10
c0009fee:	84 c0                	test   al,al
c0009ff0:	74 07                	je     c0009ff9 <VAS::VAS(bool)+0x14b>
c0009ff2:	b8 03 41 00 00       	mov    eax,0x4103
c0009ff7:	eb 05                	jmp    c0009ffe <VAS::VAS(bool)+0x150>
c0009ff9:	b8 03 40 00 00       	mov    eax,0x4003
c0009ffe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a002:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a005:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a00b:	89 02                	mov    DWORD PTR [edx],eax
c000a00d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a012:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a018:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a01e:	83 ec 08             	sub    esp,0x8
c000a021:	50                   	push   eax
c000a022:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a026:	e8 b1 fc ff ff       	call   c0009cdc <VAS::setCPUSpecific(unsigned long)>
c000a02b:	83 c4 10             	add    esp,0x10
c000a02e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a032:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a035:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a03a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a040:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a046:	83 e0 10             	and    eax,0x10
c000a049:	84 c0                	test   al,al
c000a04b:	74 07                	je     c000a054 <VAS::VAS(bool)+0x1a6>
c000a04d:	b8 00 01 00 00       	mov    eax,0x100
c000a052:	eb 05                	jmp    c000a059 <VAS::VAS(bool)+0x1ab>
c000a054:	b8 00 00 00 00       	mov    eax,0x0
c000a059:	09 c2                	or     edx,eax
c000a05b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a05f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a062:	05 fc 0f 00 00       	add    eax,0xffc
c000a067:	83 ca 03             	or     edx,0x3
c000a06a:	89 10                	mov    DWORD PTR [eax],edx
c000a06c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a071:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a077:	83 ec 0c             	sub    esp,0xc
c000a07a:	50                   	push   eax
c000a07b:	e8 4c 1c 00 00       	call   c000bccc <Device::getName()>
c000a080:	83 c4 10             	add    esp,0x10
c000a083:	83 ec 08             	sub    esp,0x8
c000a086:	68 d3 f4 01 c0       	push   0xc001f4d3
c000a08b:	50                   	push   eax
c000a08c:	e8 3f 66 ff ff       	call   c00006d0 <strcmp>
c000a091:	83 c4 10             	add    esp,0x10
c000a094:	85 c0                	test   eax,eax
c000a096:	0f 94 c0             	sete   al
c000a099:	84 c0                	test   al,al
c000a09b:	0f 84 87 00 00 00    	je     c000a128 <VAS::VAS(bool)+0x27a>
c000a0a1:	fa                   	cli    
c000a0a2:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a0a7:	40                   	inc    eax
c000a0a8:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a0ad:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0b8:	05 7c 09 00 00       	add    eax,0x97c
c000a0bd:	83 ec 0c             	sub    esp,0xc
c000a0c0:	50                   	push   eax
c000a0c1:	e8 9c d2 ff ff       	call   c0007362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0c6:	83 c4 10             	add    esp,0x10
c000a0c9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a0ce:	89 c3                	mov    ebx,eax
c000a0d0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000a0d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0db:	05 7c 09 00 00       	add    eax,0x97c
c000a0e0:	83 ec 0c             	sub    esp,0xc
c000a0e3:	50                   	push   eax
c000a0e4:	e8 79 d2 ff ff       	call   c0007362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a0e9:	83 c4 10             	add    esp,0x10
c000a0ec:	83 ec 08             	sub    esp,0x8
c000a0ef:	50                   	push   eax
c000a0f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a0f4:	e8 19 f5 ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c000a0f9:	83 c4 10             	add    esp,0x10
c000a0fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a0fe:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a103:	6a 11                	push   0x11
c000a105:	53                   	push   ebx
c000a106:	50                   	push   eax
c000a107:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10b:	e8 f0 f8 ff ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a110:	83 c4 10             	add    esp,0x10
c000a113:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a118:	48                   	dec    eax
c000a119:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a11e:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a123:	85 c0                	test   eax,eax
c000a125:	75 01                	jne    c000a128 <VAS::VAS(bool)+0x27a>
c000a127:	fb                   	sti    
c000a128:	90                   	nop
c000a129:	83 c4 28             	add    esp,0x28
c000a12c:	5b                   	pop    ebx
c000a12d:	c3                   	ret    

c000a12e <VAS::evict(unsigned long)>:
c000a12e:	55                   	push   ebp
c000a12f:	57                   	push   edi
c000a130:	56                   	push   esi
c000a131:	53                   	push   ebx
c000a132:	83 ec 1c             	sub    esp,0x1c
c000a135:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a139:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a13d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a141:	e8 38 f3 ff ff       	call   c000947e <Virt::allocateSwapfilePage()>
c000a146:	8b 0d ac 12 02 c0    	mov    ecx,DWORD PTR ds:0xc00212ac
c000a14c:	89 c7                	mov    edi,eax
c000a14e:	85 c9                	test   ecx,ecx
c000a150:	7e 3e                	jle    c000a190 <VAS::evict(unsigned long)+0x62>
c000a152:	89 ee                	mov    esi,ebp
c000a154:	31 db                	xor    ebx,ebx
c000a156:	83 ec 0c             	sub    esp,0xc
c000a159:	57                   	push   edi
c000a15a:	e8 0d f3 ff ff       	call   c000946c <Virt::swapIDToSector(unsigned long)>
c000a15f:	89 34 24             	mov    DWORD PTR [esp],esi
c000a162:	01 d8                	add    eax,ebx
c000a164:	6a 01                	push   0x1
c000a166:	31 d2                	xor    edx,edx
c000a168:	43                   	inc    ebx
c000a169:	52                   	push   edx
c000a16a:	81 c6 00 02 00 00    	add    esi,0x200
c000a170:	50                   	push   eax
c000a171:	0f be 05 b8 12 02 c0 	movsx  eax,BYTE PTR ds:0xc00212b8
c000a178:	8b 14 85 1c 63 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9ce4]
c000a17f:	52                   	push   edx
c000a180:	e8 25 2c 00 00       	call   c000cdaa <LogicalDisk::write(unsigned long long, int, void*)>
c000a185:	83 c4 20             	add    esp,0x20
c000a188:	39 1d ac 12 02 c0    	cmp    DWORD PTR ds:0xc00212ac,ebx
c000a18e:	7f c6                	jg     c000a156 <VAS::evict(unsigned long)+0x28>
c000a190:	83 ec 08             	sub    esp,0x8
c000a193:	c1 e7 0b             	shl    edi,0xb
c000a196:	55                   	push   ebp
c000a197:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a19b:	50                   	push   eax
c000a19c:	e8 71 f4 ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c000a1a1:	8b 10                	mov    edx,DWORD PTR [eax]
c000a1a3:	89 d1                	mov    ecx,edx
c000a1a5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a1ab:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a1b1:	09 cf                	or     edi,ecx
c000a1b3:	89 38                	mov    DWORD PTR [eax],edi
c000a1b5:	89 14 24             	mov    DWORD PTR [esp],edx
c000a1b8:	ff 05 a8 3f 02 c0    	inc    DWORD PTR ds:0xc0023fa8
c000a1be:	e8 1c d9 ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c000a1c3:	0f 20 d8             	mov    eax,cr3
c000a1c6:	0f 22 d8             	mov    cr3,eax
c000a1c9:	a1 a4 3f 02 c0       	mov    eax,ds:0xc0023fa4
c000a1ce:	c7 44 24 40 e1 f4 01 c0 	mov    DWORD PTR [esp+0x40],0xc001f4e1
c000a1d6:	8d 50 01             	lea    edx,[eax+0x1]
c000a1d9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a1dd:	89 15 a4 3f 02 c0    	mov    DWORD PTR ds:0xc0023fa4,edx
c000a1e3:	83 c4 2c             	add    esp,0x2c
c000a1e6:	5b                   	pop    ebx
c000a1e7:	5e                   	pop    esi
c000a1e8:	5f                   	pop    edi
c000a1e9:	5d                   	pop    ebp
c000a1ea:	e9 0b 04 00 00       	jmp    c000a5fa <Dbg::kprintf(char const*, ...)>
c000a1ef:	90                   	nop

c000a1f0 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a1f0:	55                   	push   ebp
c000a1f1:	57                   	push   edi
c000a1f2:	56                   	push   esi
c000a1f3:	53                   	push   ebx
c000a1f4:	83 ec 14             	sub    esp,0x14
c000a1f7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a1fb:	53                   	push   ebx
c000a1fc:	68 f2 f4 01 c0       	push   0xc001f4f2
c000a201:	e8 f4 03 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000a206:	83 c4 10             	add    esp,0x10
c000a209:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a20f:	74 21                	je     c000a232 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a211:	83 ec 08             	sub    esp,0x8
c000a214:	53                   	push   ebx
c000a215:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a219:	57                   	push   edi
c000a21a:	e8 f3 f3 ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	89 c6                	mov    esi,eax
c000a224:	85 c0                	test   eax,eax
c000a226:	74 0a                	je     c000a232 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a228:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a22a:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a230:	74 0a                	je     c000a23c <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a232:	31 c0                	xor    eax,eax
c000a234:	83 c4 0c             	add    esp,0xc
c000a237:	5b                   	pop    ebx
c000a238:	5e                   	pop    esi
c000a239:	5f                   	pop    edi
c000a23a:	5d                   	pop    ebp
c000a23b:	c3                   	ret    
c000a23c:	e8 00 d9 ff ff       	call   c0007b41 <Phys::allocatePage()>
c000a241:	c1 ed 0b             	shr    ebp,0xb
c000a244:	8b 16                	mov    edx,DWORD PTR [esi]
c000a246:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a24c:	09 c2                	or     edx,eax
c000a24e:	81 ca 01 08 00 00    	or     edx,0x801
c000a254:	89 16                	mov    DWORD PTR [esi],edx
c000a256:	8b 35 ac 12 02 c0    	mov    esi,DWORD PTR ds:0xc00212ac
c000a25c:	85 f6                	test   esi,esi
c000a25e:	7e 3e                	jle    c000a29e <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a260:	89 df                	mov    edi,ebx
c000a262:	31 f6                	xor    esi,esi
c000a264:	83 ec 0c             	sub    esp,0xc
c000a267:	55                   	push   ebp
c000a268:	e8 ff f1 ff ff       	call   c000946c <Virt::swapIDToSector(unsigned long)>
c000a26d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a270:	01 f0                	add    eax,esi
c000a272:	6a 01                	push   0x1
c000a274:	31 d2                	xor    edx,edx
c000a276:	46                   	inc    esi
c000a277:	52                   	push   edx
c000a278:	81 c7 00 02 00 00    	add    edi,0x200
c000a27e:	50                   	push   eax
c000a27f:	0f be 05 b8 12 02 c0 	movsx  eax,BYTE PTR ds:0xc00212b8
c000a286:	8b 0c 85 1c 63 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9ce4]
c000a28d:	51                   	push   ecx
c000a28e:	e8 ab 2a 00 00       	call   c000cd3e <LogicalDisk::read(unsigned long long, int, void*)>
c000a293:	83 c4 20             	add    esp,0x20
c000a296:	39 35 ac 12 02 c0    	cmp    DWORD PTR ds:0xc00212ac,esi
c000a29c:	7f c6                	jg     c000a264 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a29e:	a1 a8 3f 02 c0       	mov    eax,ds:0xc0023fa8
c000a2a3:	48                   	dec    eax
c000a2a4:	52                   	push   edx
c000a2a5:	a3 a8 3f 02 c0       	mov    ds:0xc0023fa8,eax
c000a2aa:	50                   	push   eax
c000a2ab:	53                   	push   ebx
c000a2ac:	68 05 f5 01 c0       	push   0xc001f505
c000a2b1:	e8 44 03 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000a2b6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a2b9:	e8 90 f1 ff ff       	call   c000944e <Virt::freeSwapfilePage(unsigned long)>
c000a2be:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	48                   	dec    eax
c000a2c7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000a2cc:	85 c0                	test   eax,eax
c000a2ce:	75 01                	jne    c000a2d1 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a2d0:	fb                   	sti    
c000a2d1:	0f 20 d8             	mov    eax,cr3
c000a2d4:	0f 22 d8             	mov    cr3,eax
c000a2d7:	b0 01                	mov    al,0x1
c000a2d9:	e9 56 ff ff ff       	jmp    c000a234 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a2de <VAS::scanForEviction()>:
c000a2de:	57                   	push   edi
c000a2df:	31 ff                	xor    edi,edi
c000a2e1:	56                   	push   esi
c000a2e2:	53                   	push   ebx
c000a2e3:	83 ec 10             	sub    esp,0x10
c000a2e6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a2ea:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a2ed:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a2f3:	75 0e                	jne    c000a303 <VAS::scanForEviction()+0x25>
c000a2f5:	89 da                	mov    edx,ebx
c000a2f7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a2fa:	c1 ea 16             	shr    edx,0x16
c000a2fd:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a301:	74 4e                	je     c000a351 <VAS::scanForEviction()+0x73>
c000a303:	53                   	push   ebx
c000a304:	56                   	push   esi
c000a305:	e8 08 f3 ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c000a30a:	5a                   	pop    edx
c000a30b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a30d:	59                   	pop    ecx
c000a30e:	89 d1                	mov    ecx,edx
c000a310:	81 e1 01 08 00 00    	and    ecx,0x801
c000a316:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a31c:	74 3e                	je     c000a35c <VAS::scanForEviction()+0x7e>
c000a31e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a324:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a32a:	76 2b                	jbe    c000a357 <VAS::scanForEviction()+0x79>
c000a32c:	47                   	inc    edi
c000a32d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a334:	83 ff 03             	cmp    edi,0x3
c000a337:	74 32                	je     c000a36b <VAS::scanForEviction()+0x8d>
c000a339:	31 db                	xor    ebx,ebx
c000a33b:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a341:	75 c0                	jne    c000a303 <VAS::scanForEviction()+0x25>
c000a343:	89 da                	mov    edx,ebx
c000a345:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a348:	c1 ea 16             	shr    edx,0x16
c000a34b:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a34f:	75 b2                	jne    c000a303 <VAS::scanForEviction()+0x25>
c000a351:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a357:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a35a:	eb 91                	jmp    c000a2ed <VAS::scanForEviction()+0xf>
c000a35c:	f6 c2 20             	test   dl,0x20
c000a35f:	74 13                	je     c000a374 <VAS::scanForEviction()+0x96>
c000a361:	83 e2 df             	and    edx,0xffffffdf
c000a364:	89 10                	mov    DWORD PTR [eax],edx
c000a366:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a369:	eb b3                	jmp    c000a31e <VAS::scanForEviction()+0x40>
c000a36b:	83 c4 10             	add    esp,0x10
c000a36e:	31 c0                	xor    eax,eax
c000a370:	5b                   	pop    ebx
c000a371:	5e                   	pop    esi
c000a372:	5f                   	pop    edi
c000a373:	c3                   	ret    
c000a374:	83 ec 08             	sub    esp,0x8
c000a377:	89 d0                	mov    eax,edx
c000a379:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a37e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a382:	53                   	push   ebx
c000a383:	68 1a f5 01 c0       	push   0xc001f51a
c000a388:	e8 6d 02 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000a38d:	58                   	pop    eax
c000a38e:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a391:	5a                   	pop    edx
c000a392:	51                   	push   ecx
c000a393:	56                   	push   esi
c000a394:	e8 95 fd ff ff       	call   c000a12e <VAS::evict(unsigned long)>
c000a399:	5b                   	pop    ebx
c000a39a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a39d:	5f                   	pop    edi
c000a39e:	50                   	push   eax
c000a39f:	68 2e f5 01 c0       	push   0xc001f52e
c000a3a4:	e8 51 02 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000a3a9:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a3b0:	83 c4 10             	add    esp,0x10
c000a3b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3b7:	83 c4 10             	add    esp,0x10
c000a3ba:	5b                   	pop    ebx
c000a3bb:	5e                   	pop    esi
c000a3bc:	5f                   	pop    edi
c000a3bd:	c3                   	ret    

c000a3be <mapVASFirstTime>:
c000a3be:	55                   	push   ebp
c000a3bf:	57                   	push   edi
c000a3c0:	56                   	push   esi
c000a3c1:	53                   	push   ebx
c000a3c2:	83 ec 0c             	sub    esp,0xc
c000a3c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a3ca:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a3cd:	4a                   	dec    edx
c000a3ce:	0f 84 c8 00 00 00    	je     c000a49c <mapVASFirstTime+0xde>
c000a3d4:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a3d7:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a3da:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a3df:	c1 e5 15             	shl    ebp,0x15
c000a3e2:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a3e7:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a3ed:	29 eb                	sub    ebx,ebp
c000a3ef:	29 ef                	sub    edi,ebp
c000a3f1:	e8 4b d7 ff ff       	call   c0007b41 <Phys::allocatePage()>
c000a3f6:	83 ec 0c             	sub    esp,0xc
c000a3f9:	68 03 04 00 00       	push   0x403
c000a3fe:	6a 01                	push   0x1
c000a400:	53                   	push   ebx
c000a401:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a407:	50                   	push   eax
c000a408:	56                   	push   esi
c000a409:	e8 ec f8 ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a40e:	83 c4 20             	add    esp,0x20
c000a411:	39 fb                	cmp    ebx,edi
c000a413:	75 dc                	jne    c000a3f1 <mapVASFirstTime+0x33>
c000a415:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a41a:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a41f:	29 eb                	sub    ebx,ebp
c000a421:	29 ef                	sub    edi,ebp
c000a423:	e8 19 d7 ff ff       	call   c0007b41 <Phys::allocatePage()>
c000a428:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a42c:	19 d2                	sbb    edx,edx
c000a42e:	83 ec 0c             	sub    esp,0xc
c000a431:	83 e2 04             	and    edx,0x4
c000a434:	81 c2 03 04 00 00    	add    edx,0x403
c000a43a:	52                   	push   edx
c000a43b:	6a 01                	push   0x1
c000a43d:	53                   	push   ebx
c000a43e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a444:	50                   	push   eax
c000a445:	56                   	push   esi
c000a446:	e8 af f8 ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a44b:	83 c4 20             	add    esp,0x20
c000a44e:	39 df                	cmp    edi,ebx
c000a450:	75 d1                	jne    c000a423 <mapVASFirstTime+0x65>
c000a452:	83 ec 0c             	sub    esp,0xc
c000a455:	bb 7c 30 02 c0       	mov    ebx,0xc002307c
c000a45a:	6a 04                	push   0x4
c000a45c:	81 eb 00 20 02 c0    	sub    ebx,0xc0022000
c000a462:	6a ff                	push   0xffffffff
c000a464:	c1 eb 0c             	shr    ebx,0xc
c000a467:	53                   	push   ebx
c000a468:	68 00 20 02 c0       	push   0xc0022000
c000a46d:	56                   	push   esi
c000a46e:	e8 21 f3 ff ff       	call   c0009794 <VAS::reflagRange(unsigned long, int, int, int)>
c000a473:	83 c4 14             	add    esp,0x14
c000a476:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c000a47b:	6a 04                	push   0x4
c000a47d:	6a ff                	push   0xffffffff
c000a47f:	53                   	push   ebx
c000a480:	68 00 20 02 c0       	push   0xc0022000
c000a485:	50                   	push   eax
c000a486:	e8 09 f3 ff ff       	call   c0009794 <VAS::reflagRange(unsigned long, int, int, int)>
c000a48b:	0f 20 d8             	mov    eax,cr3
c000a48e:	0f 22 d8             	mov    cr3,eax
c000a491:	83 c4 20             	add    esp,0x20
c000a494:	83 c4 0c             	add    esp,0xc
c000a497:	5b                   	pop    ebx
c000a498:	5e                   	pop    esi
c000a499:	5f                   	pop    edi
c000a49a:	5d                   	pop    ebp
c000a49b:	c3                   	ret    
c000a49c:	83 ec 0c             	sub    esp,0xc
c000a49f:	68 41 f5 01 c0       	push   0xc001f541
c000a4a4:	e8 51 01 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000a4a9:	83 c4 10             	add    esp,0x10
c000a4ac:	83 c4 0c             	add    esp,0xc
c000a4af:	5b                   	pop    ebx
c000a4b0:	5e                   	pop    esi
c000a4b1:	5f                   	pop    edi
c000a4b2:	5d                   	pop    ebp
c000a4b3:	c3                   	ret    

c000a4b4 <__cxa_atexit>:
c000a4b4:	31 c0                	xor    eax,eax
c000a4b6:	c3                   	ret    

c000a4b7 <__cxa_finalize>:
c000a4b7:	c3                   	ret    

c000a4b8 <__stack_chk_fail>:
c000a4b8:	55                   	push   ebp
c000a4b9:	89 e5                	mov    ebp,esp
c000a4bb:	83 ec 10             	sub    esp,0x10
c000a4be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a4c1:	68 5a f5 01 c0       	push   0xc001f55a
c000a4c6:	e8 2f 01 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000a4cb:	58                   	pop    eax
c000a4cc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a4cf:	5a                   	pop    edx
c000a4d0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a4d3:	68 5a f5 01 c0       	push   0xc001f55a
c000a4d8:	e8 1d 01 00 00       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000a4dd:	c7 04 24 62 f5 01 c0 	mov    DWORD PTR [esp],0xc001f562
c000a4e4:	e8 c6 5e 00 00       	call   c00103af <KePanic(char const*)>
c000a4e9:	83 c4 10             	add    esp,0x10
c000a4ec:	c9                   	leave  
c000a4ed:	c3                   	ret    

c000a4ee <__cxa_pure_virtual>:
c000a4ee:	83 ec 18             	sub    esp,0x18
c000a4f1:	68 7a f5 01 c0       	push   0xc001f57a
c000a4f6:	e8 b4 5e 00 00       	call   c00103af <KePanic(char const*)>
c000a4fb:	83 c4 1c             	add    esp,0x1c
c000a4fe:	c3                   	ret    

c000a4ff <operator new[](unsigned long)>:
c000a4ff:	e9 61 d3 ff ff       	jmp    c0007865 <malloc>

c000a504 <operator delete(void*, unsigned long)>:
c000a504:	e9 7c d3 ff ff       	jmp    c0007885 <rfree>

c000a509 <operator delete[](void*)>:
c000a509:	e9 77 d3 ff ff       	jmp    c0007885 <rfree>

c000a50e <operator delete[](void*, unsigned long)>:
c000a50e:	e9 72 d3 ff ff       	jmp    c0007885 <rfree>

c000a513 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a513:	55                   	push   ebp
c000a514:	b9 04 00 00 00       	mov    ecx,0x4
c000a519:	57                   	push   edi
c000a51a:	56                   	push   esi
c000a51b:	be cf f1 01 c0       	mov    esi,0xc001f1cf
c000a520:	53                   	push   ebx
c000a521:	83 ec 20             	sub    esp,0x20
c000a524:	a1 ce f1 01 c0       	mov    eax,ds:0xc001f1ce
c000a529:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a52d:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a531:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a535:	a1 db f1 01 c0       	mov    eax,ds:0xc001f1db
c000a53a:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a53e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a542:	fc                   	cld    
c000a543:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a545:	89 ee                	mov    esi,ebp
c000a547:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a54b:	eb 02                	jmp    c000a54f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a54d:	89 c6                	mov    esi,eax
c000a54f:	31 d2                	xor    edx,edx
c000a551:	41                   	inc    ecx
c000a552:	89 f0                	mov    eax,esi
c000a554:	f7 f3                	div    ebx
c000a556:	39 de                	cmp    esi,ebx
c000a558:	73 f3                	jae    c000a54d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a55a:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a55d:	eb 02                	jmp    c000a561 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a55f:	89 c5                	mov    ebp,eax
c000a561:	31 d2                	xor    edx,edx
c000a563:	49                   	dec    ecx
c000a564:	89 e8                	mov    eax,ebp
c000a566:	f7 f3                	div    ebx
c000a568:	39 dd                	cmp    ebp,ebx
c000a56a:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a56e:	88 11                	mov    BYTE PTR [ecx],dl
c000a570:	73 ed                	jae    c000a55f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a572:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a576:	83 c4 20             	add    esp,0x20
c000a579:	5b                   	pop    ebx
c000a57a:	5e                   	pop    esi
c000a57b:	5f                   	pop    edi
c000a57c:	5d                   	pop    ebp
c000a57d:	c3                   	ret    

c000a57e <Dbg::logc(char)>:
c000a57e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a582:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a589:	75 12                	jne    c000a59d <Dbg::logc(char)+0x1f>
c000a58b:	ba fd 03 00 00       	mov    edx,0x3fd
c000a590:	ec                   	in     al,dx
c000a591:	a8 20                	test   al,0x20
c000a593:	74 fb                	je     c000a590 <Dbg::logc(char)+0x12>
c000a595:	ba f8 03 00 00       	mov    edx,0x3f8
c000a59a:	88 c8                	mov    al,cl
c000a59c:	ee                   	out    dx,al
c000a59d:	c3                   	ret    

c000a59e <Dbg::logs(char*)>:
c000a59e:	53                   	push   ebx
c000a59f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a5a3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5a6:	84 c0                	test   al,al
c000a5a8:	74 0f                	je     c000a5b9 <Dbg::logs(char*)+0x1b>
c000a5aa:	50                   	push   eax
c000a5ab:	43                   	inc    ebx
c000a5ac:	e8 cd ff ff ff       	call   c000a57e <Dbg::logc(char)>
c000a5b1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5b4:	5a                   	pop    edx
c000a5b5:	84 c0                	test   al,al
c000a5b7:	75 f1                	jne    c000a5aa <Dbg::logs(char*)+0xc>
c000a5b9:	5b                   	pop    ebx
c000a5ba:	c3                   	ret    

c000a5bb <Dbg::logWriteInt(unsigned int)>:
c000a5bb:	83 ec 10             	sub    esp,0x10
c000a5be:	6a 0a                	push   0xa
c000a5c0:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5c4:	50                   	push   eax
c000a5c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5c9:	50                   	push   eax
c000a5ca:	e8 44 ff ff ff       	call   c000a513 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5cf:	50                   	push   eax
c000a5d0:	e8 c9 ff ff ff       	call   c000a59e <Dbg::logs(char*)>
c000a5d5:	83 c4 20             	add    esp,0x20
c000a5d8:	c3                   	ret    

c000a5d9 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a5d9:	83 ec 10             	sub    esp,0x10
c000a5dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5e0:	50                   	push   eax
c000a5e1:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5e5:	50                   	push   eax
c000a5e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5ea:	52                   	push   edx
c000a5eb:	e8 23 ff ff ff       	call   c000a513 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5f0:	50                   	push   eax
c000a5f1:	e8 a8 ff ff ff       	call   c000a59e <Dbg::logs(char*)>
c000a5f6:	83 c4 20             	add    esp,0x20
c000a5f9:	c3                   	ret    

c000a5fa <Dbg::kprintf(char const*, ...)>:
c000a5fa:	55                   	push   ebp
c000a5fb:	57                   	push   edi
c000a5fc:	56                   	push   esi
c000a5fd:	53                   	push   ebx
c000a5fe:	83 ec 0c             	sub    esp,0xc
c000a601:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a605:	f6 05 d0 3e 02 c0 10 	test   BYTE PTR ds:0xc0023ed0,0x10
c000a60c:	74 08                	je     c000a616 <Dbg::kprintf(char const*, ...)+0x1c>
c000a60e:	83 c4 0c             	add    esp,0xc
c000a611:	5b                   	pop    ebx
c000a612:	5e                   	pop    esi
c000a613:	5f                   	pop    edi
c000a614:	5d                   	pop    ebp
c000a615:	c3                   	ret    
c000a616:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a61a:	31 ff                	xor    edi,edi
c000a61c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a620:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a623:	84 c0                	test   al,al
c000a625:	74 e7                	je     c000a60e <Dbg::kprintf(char const*, ...)+0x14>
c000a627:	8d 77 01             	lea    esi,[edi+0x1]
c000a62a:	3c 25                	cmp    al,0x25
c000a62c:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a62f:	75 47                	jne    c000a678 <Dbg::kprintf(char const*, ...)+0x7e>
c000a631:	83 c7 02             	add    edi,0x2
c000a634:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a637:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a63a:	83 e8 25             	sub    eax,0x25
c000a63d:	3c 53                	cmp    al,0x53
c000a63f:	0f 87 d2 00 00 00    	ja     c000a717 <Dbg::kprintf(char const*, ...)+0x11d>
c000a645:	25 ff 00 00 00       	and    eax,0xff
c000a64a:	ff 24 85 90 f5 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0a70]
c000a651:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a655:	89 c8                	mov    eax,ecx
c000a657:	83 c1 04             	add    ecx,0x4
c000a65a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a65e:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a660:	55                   	push   ebp
c000a661:	e8 55 ff ff ff       	call   c000a5bb <Dbg::logWriteInt(unsigned int)>
c000a666:	58                   	pop    eax
c000a667:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a66a:	84 c0                	test   al,al
c000a66c:	74 a0                	je     c000a60e <Dbg::kprintf(char const*, ...)+0x14>
c000a66e:	8d 77 01             	lea    esi,[edi+0x1]
c000a671:	3c 25                	cmp    al,0x25
c000a673:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a676:	74 b9                	je     c000a631 <Dbg::kprintf(char const*, ...)+0x37>
c000a678:	50                   	push   eax
c000a679:	89 f7                	mov    edi,esi
c000a67b:	e8 fe fe ff ff       	call   c000a57e <Dbg::logc(char)>
c000a680:	89 ee                	mov    esi,ebp
c000a682:	58                   	pop    eax
c000a683:	eb e2                	jmp    c000a667 <Dbg::kprintf(char const*, ...)+0x6d>
c000a685:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a689:	89 c8                	mov    eax,ecx
c000a68b:	83 c1 04             	add    ecx,0x4
c000a68e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a690:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a694:	50                   	push   eax
c000a695:	e8 04 ff ff ff       	call   c000a59e <Dbg::logs(char*)>
c000a69a:	58                   	pop    eax
c000a69b:	eb ca                	jmp    c000a667 <Dbg::kprintf(char const*, ...)+0x6d>
c000a69d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6a1:	89 d0                	mov    eax,edx
c000a6a3:	83 c2 04             	add    edx,0x4
c000a6a6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6aa:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6ac:	50                   	push   eax
c000a6ad:	e8 09 ff ff ff       	call   c000a5bb <Dbg::logWriteInt(unsigned int)>
c000a6b2:	58                   	pop    eax
c000a6b3:	eb b2                	jmp    c000a667 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6b9:	89 d0                	mov    eax,edx
c000a6bb:	83 c2 04             	add    edx,0x4
c000a6be:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a6c1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6c5:	50                   	push   eax
c000a6c6:	e8 b3 fe ff ff       	call   c000a57e <Dbg::logc(char)>
c000a6cb:	58                   	pop    eax
c000a6cc:	eb 99                	jmp    c000a667 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6ce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6d2:	89 c8                	mov    eax,ecx
c000a6d4:	83 c1 04             	add    ecx,0x4
c000a6d7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6db:	6a 10                	push   0x10
c000a6dd:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6df:	51                   	push   ecx
c000a6e0:	e8 f4 fe ff ff       	call   c000a5d9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a6e5:	5d                   	pop    ebp
c000a6e6:	58                   	pop    eax
c000a6e7:	e9 7b ff ff ff       	jmp    c000a667 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6f0:	89 d0                	mov    eax,edx
c000a6f2:	83 c2 08             	add    edx,0x8
c000a6f5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6f9:	6a 10                	push   0x10
c000a6fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6fd:	50                   	push   eax
c000a6fe:	e8 d6 fe ff ff       	call   c000a5d9 <Dbg::logWriteIntBase(unsigned int, int)>
c000a703:	58                   	pop    eax
c000a704:	5a                   	pop    edx
c000a705:	e9 5d ff ff ff       	jmp    c000a667 <Dbg::kprintf(char const*, ...)+0x6d>
c000a70a:	6a 25                	push   0x25
c000a70c:	e8 6d fe ff ff       	call   c000a57e <Dbg::logc(char)>
c000a711:	5a                   	pop    edx
c000a712:	e9 50 ff ff ff       	jmp    c000a667 <Dbg::kprintf(char const*, ...)+0x6d>
c000a717:	6a 25                	push   0x25
c000a719:	e8 60 fe ff ff       	call   c000a57e <Dbg::logc(char)>
c000a71e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a722:	50                   	push   eax
c000a723:	e8 56 fe ff ff       	call   c000a57e <Dbg::logc(char)>
c000a728:	5a                   	pop    edx
c000a729:	59                   	pop    ecx
c000a72a:	e9 38 ff ff ff       	jmp    c000a667 <Dbg::kprintf(char const*, ...)+0x6d>
c000a72f:	90                   	nop

c000a730 <File::read(unsigned long long, void*, int*)>:
c000a730:	53                   	push   ebx
c000a731:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a735:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a739:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a740:	3c 19                	cmp    al,0x19
c000a742:	77 35                	ja     c000a779 <File::read(unsigned long long, void*, int*)+0x49>
c000a744:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a74b:	85 c0                	test   eax,eax
c000a74d:	74 2a                	je     c000a779 <File::read(unsigned long long, void*, int*)+0x49>
c000a74f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a755:	85 c0                	test   eax,eax
c000a757:	74 20                	je     c000a779 <File::read(unsigned long long, void*, int*)+0x49>
c000a759:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a75d:	74 21                	je     c000a780 <File::read(unsigned long long, void*, int*)+0x50>
c000a75f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a761:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a765:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a773:	5b                   	pop    ebx
c000a774:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a777:	ff e0                	jmp    eax
c000a779:	b8 0b 00 00 00       	mov    eax,0xb
c000a77e:	eb 05                	jmp    c000a785 <File::read(unsigned long long, void*, int*)+0x55>
c000a780:	b8 05 00 00 00       	mov    eax,0x5
c000a785:	5b                   	pop    ebx
c000a786:	c3                   	ret    
c000a787:	90                   	nop

c000a788 <File::write(unsigned long long, void*, int*)>:
c000a788:	53                   	push   ebx
c000a789:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a78d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a791:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a798:	3c 19                	cmp    al,0x19
c000a79a:	77 35                	ja     c000a7d1 <File::write(unsigned long long, void*, int*)+0x49>
c000a79c:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a7a3:	85 c0                	test   eax,eax
c000a7a5:	74 2a                	je     c000a7d1 <File::write(unsigned long long, void*, int*)+0x49>
c000a7a7:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a7ad:	85 c0                	test   eax,eax
c000a7af:	74 20                	je     c000a7d1 <File::write(unsigned long long, void*, int*)+0x49>
c000a7b1:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7b5:	74 21                	je     c000a7d8 <File::write(unsigned long long, void*, int*)+0x50>
c000a7b7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7b9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7bd:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7cb:	5b                   	pop    ebx
c000a7cc:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a7cf:	ff e0                	jmp    eax
c000a7d1:	b8 0b 00 00 00       	mov    eax,0xb
c000a7d6:	eb 05                	jmp    c000a7dd <File::write(unsigned long long, void*, int*)+0x55>
c000a7d8:	b8 05 00 00 00       	mov    eax,0x5
c000a7dd:	5b                   	pop    ebx
c000a7de:	c3                   	ret    
c000a7df:	90                   	nop

c000a7e0 <Directory::read(unsigned long long, void*, int*)>:
c000a7e0:	53                   	push   ebx
c000a7e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7e9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7f0:	3c 19                	cmp    al,0x19
c000a7f2:	77 35                	ja     c000a829 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a7f4:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000a7fb:	85 c0                	test   eax,eax
c000a7fd:	74 2a                	je     c000a829 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a7ff:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000a805:	85 c0                	test   eax,eax
c000a807:	74 20                	je     c000a829 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a809:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a80d:	74 21                	je     c000a830 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a80f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a811:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a815:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a81b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a81f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a823:	5b                   	pop    ebx
c000a824:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a827:	ff e0                	jmp    eax
c000a829:	b8 0b 00 00 00       	mov    eax,0xb
c000a82e:	eb 05                	jmp    c000a835 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a830:	b8 05 00 00 00       	mov    eax,0x5
c000a835:	5b                   	pop    ebx
c000a836:	c3                   	ret    
c000a837:	90                   	nop

c000a838 <Directory::write(unsigned long long, void*, int*)>:
c000a838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a83c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a843:	b8 0b 00 00 00       	mov    eax,0xb
c000a848:	80 fa 19             	cmp    dl,0x19
c000a84b:	77 18                	ja     c000a865 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a84d:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000a854:	85 d2                	test   edx,edx
c000a856:	74 0d                	je     c000a865 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a858:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000a85f:	19 c0                	sbb    eax,eax
c000a861:	83 e0 0a             	and    eax,0xa
c000a864:	40                   	inc    eax
c000a865:	c3                   	ret    

c000a866 <File::isAtty()>:
c000a866:	31 c0                	xor    eax,eax
c000a868:	c3                   	ret    
c000a869:	90                   	nop

c000a86a <Directory::isAtty()>:
c000a86a:	31 c0                	xor    eax,eax
c000a86c:	c3                   	ret    
c000a86d:	90                   	nop

c000a86e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a86e:	b8 0a 00 00 00       	mov    eax,0xa
c000a873:	c3                   	ret    

c000a874 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a874:	b8 0a 00 00 00       	mov    eax,0xa
c000a879:	c3                   	ret    

c000a87a <Filesystem::allocateSwapfile(char const*, int)>:
c000a87a:	31 c0                	xor    eax,eax
c000a87c:	31 d2                	xor    edx,edx
c000a87e:	c3                   	ret    
c000a87f:	90                   	nop

c000a880 <File::~File()>:
c000a880:	83 ec 0c             	sub    esp,0xc
c000a883:	ba 50 f7 01 c0       	mov    edx,0xc001f750
c000a888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a88c:	89 10                	mov    DWORD PTR [eax],edx
c000a88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a892:	83 ec 0c             	sub    esp,0xc
c000a895:	50                   	push   eax
c000a896:	e8 41 e8 ff ff       	call   c00090dc <UnixFile::~UnixFile()>
c000a89b:	83 c4 10             	add    esp,0x10
c000a89e:	90                   	nop
c000a89f:	83 c4 0c             	add    esp,0xc
c000a8a2:	c3                   	ret    
c000a8a3:	90                   	nop

c000a8a4 <File::~File()>:
c000a8a4:	83 ec 0c             	sub    esp,0xc
c000a8a7:	83 ec 0c             	sub    esp,0xc
c000a8aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ae:	e8 cd ff ff ff       	call   c000a880 <File::~File()>
c000a8b3:	83 c4 10             	add    esp,0x10
c000a8b6:	83 ec 08             	sub    esp,0x8
c000a8b9:	68 14 01 00 00       	push   0x114
c000a8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8c2:	e8 3d fc ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000a8c7:	83 c4 10             	add    esp,0x10
c000a8ca:	83 c4 0c             	add    esp,0xc
c000a8cd:	c3                   	ret    

c000a8ce <Directory::~Directory()>:
c000a8ce:	83 ec 0c             	sub    esp,0xc
c000a8d1:	ba 6c f7 01 c0       	mov    edx,0xc001f76c
c000a8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8da:	89 10                	mov    DWORD PTR [eax],edx
c000a8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8e0:	83 ec 0c             	sub    esp,0xc
c000a8e3:	50                   	push   eax
c000a8e4:	e8 f3 e7 ff ff       	call   c00090dc <UnixFile::~UnixFile()>
c000a8e9:	83 c4 10             	add    esp,0x10
c000a8ec:	90                   	nop
c000a8ed:	83 c4 0c             	add    esp,0xc
c000a8f0:	c3                   	ret    
c000a8f1:	90                   	nop

c000a8f2 <Directory::~Directory()>:
c000a8f2:	83 ec 0c             	sub    esp,0xc
c000a8f5:	83 ec 0c             	sub    esp,0xc
c000a8f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8fc:	e8 cd ff ff ff       	call   c000a8ce <Directory::~Directory()>
c000a901:	83 c4 10             	add    esp,0x10
c000a904:	83 ec 08             	sub    esp,0x8
c000a907:	68 14 01 00 00       	push   0x114
c000a90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a910:	e8 ef fb ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	83 c4 0c             	add    esp,0xc
c000a91b:	c3                   	ret    

c000a91c <Filesystem::Filesystem()>:
c000a91c:	ba e8 f6 01 c0       	mov    edx,0xc001f6e8
c000a921:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a925:	89 10                	mov    DWORD PTR [eax],edx
c000a927:	8b 15 b4 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023fb4
c000a92d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a931:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a938:	a3 b4 3f 02 c0       	mov    ds:0xc0023fb4,eax
c000a93d:	90                   	nop
c000a93e:	c3                   	ret    
c000a93f:	90                   	nop

c000a940 <Filesystem::~Filesystem()>:
c000a940:	ba e8 f6 01 c0       	mov    edx,0xc001f6e8
c000a945:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a949:	89 10                	mov    DWORD PTR [eax],edx
c000a94b:	90                   	nop
c000a94c:	c3                   	ret    
c000a94d:	90                   	nop

c000a94e <Filesystem::~Filesystem()>:
c000a94e:	83 ec 0c             	sub    esp,0xc
c000a951:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a955:	e8 e6 ff ff ff       	call   c000a940 <Filesystem::~Filesystem()>
c000a95a:	83 c4 04             	add    esp,0x4
c000a95d:	83 ec 08             	sub    esp,0x8
c000a960:	6a 08                	push   0x8
c000a962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a966:	e8 99 fb ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000a96b:	83 c4 10             	add    esp,0x10
c000a96e:	83 c4 0c             	add    esp,0xc
c000a971:	c3                   	ret    

c000a972 <Fs::getcwd(Process*, char*, int)>:
c000a972:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a976:	31 c0                	xor    eax,eax
c000a978:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a97b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a97f:	7d 15                	jge    c000a996 <Fs::getcwd(Process*, char*, int)+0x24>
c000a981:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a985:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a98c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a98f:	84 c9                	test   cl,cl
c000a991:	74 06                	je     c000a999 <Fs::getcwd(Process*, char*, int)+0x27>
c000a993:	40                   	inc    eax
c000a994:	eb e2                	jmp    c000a978 <Fs::getcwd(Process*, char*, int)+0x6>
c000a996:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a999:	31 c0                	xor    eax,eax
c000a99b:	c3                   	ret    

c000a99c <Fs::initVFS()>:
c000a99c:	83 ec 18             	sub    esp,0x18
c000a99f:	6a 08                	push   0x8
c000a9a1:	e8 bf ce ff ff       	call   c0007865 <malloc>
c000a9a6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9a9:	e8 56 d7 00 00       	call   c0018104 <FAT::FAT()>
c000a9ae:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a9b5:	e8 ab ce ff ff       	call   c0007865 <malloc>
c000a9ba:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9bd:	e8 de e5 00 00       	call   c0018fa0 <ISO9660::ISO9660()>
c000a9c2:	83 c4 1c             	add    esp,0x1c
c000a9c5:	c3                   	ret    

c000a9c6 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a9c6:	55                   	push   ebp
c000a9c7:	57                   	push   edi
c000a9c8:	56                   	push   esi
c000a9c9:	53                   	push   ebx
c000a9ca:	81 ec 10 04 00 00    	sub    esp,0x410
c000a9d0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a9d7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a9de:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a9e5:	68 00 04 00 00       	push   0x400
c000a9ea:	6a 00                	push   0x0
c000a9ec:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a9f0:	56                   	push   esi
c000a9f1:	e8 ca 5a ff ff       	call   c00004c0 <memset>
c000a9f6:	83 c4 10             	add    esp,0x10
c000a9f9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a9fd:	75 0b                	jne    c000aa0a <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a9ff:	50                   	push   eax
c000aa00:	50                   	push   eax
c000aa01:	57                   	push   edi
c000aa02:	56                   	push   esi
c000aa03:	e8 e8 5b ff ff       	call   c00005f0 <strcpy>
c000aa08:	eb 41                	jmp    c000aa4b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aa0a:	8a 07                	mov    al,BYTE PTR [edi]
c000aa0c:	3c 5c                	cmp    al,0x5c
c000aa0e:	74 04                	je     c000aa14 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aa10:	3c 2f                	cmp    al,0x2f
c000aa12:	75 18                	jne    c000aa2c <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000aa14:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa17:	3c 60                	cmp    al,0x60
c000aa19:	7e 03                	jle    c000aa1e <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000aa1b:	83 e8 20             	sub    eax,0x20
c000aa1e:	88 04 24             	mov    BYTE PTR [esp],al
c000aa21:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa28:	50                   	push   eax
c000aa29:	50                   	push   eax
c000aa2a:	eb 18                	jmp    c000aa44 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000aa2c:	50                   	push   eax
c000aa2d:	50                   	push   eax
c000aa2e:	55                   	push   ebp
c000aa2f:	56                   	push   esi
c000aa30:	e8 bb 5b ff ff       	call   c00005f0 <strcpy>
c000aa35:	5a                   	pop    edx
c000aa36:	59                   	pop    ecx
c000aa37:	68 63 05 02 c0       	push   0xc0020563
c000aa3c:	56                   	push   esi
c000aa3d:	e8 6e 5d ff ff       	call   c00007b0 <strcat>
c000aa42:	5d                   	pop    ebp
c000aa43:	58                   	pop    eax
c000aa44:	57                   	push   edi
c000aa45:	56                   	push   esi
c000aa46:	e8 65 5d ff ff       	call   c00007b0 <strcat>
c000aa4b:	83 c4 10             	add    esp,0x10
c000aa4e:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aa51:	3c 60                	cmp    al,0x60
c000aa53:	7e 03                	jle    c000aa58 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aa55:	83 e8 20             	sub    eax,0x20
c000aa58:	88 04 24             	mov    BYTE PTR [esp],al
c000aa5b:	88 03                	mov    BYTE PTR [ebx],al
c000aa5d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa64:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aa6a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aa6e:	bf 03 00 00 00       	mov    edi,0x3
c000aa73:	b8 03 00 00 00       	mov    eax,0x3
c000aa78:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aa7b:	84 d2                	test   dl,dl
c000aa7d:	0f 84 91 00 00 00    	je     c000ab14 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aa83:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aa86:	80 fa 5c             	cmp    dl,0x5c
c000aa89:	74 05                	je     c000aa90 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aa8b:	80 fa 2f             	cmp    dl,0x2f
c000aa8e:	75 12                	jne    c000aaa2 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa90:	89 c5                	mov    ebp,eax
c000aa92:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa97:	74 09                	je     c000aaa2 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa99:	40                   	inc    eax
c000aa9a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aa9e:	89 cf                	mov    edi,ecx
c000aaa0:	eb d6                	jmp    c000aa78 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aaa2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aaa7:	75 5b                	jne    c000ab04 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aaa9:	80 fa 2e             	cmp    dl,0x2e
c000aaac:	75 56                	jne    c000ab04 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aaae:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aab2:	74 19                	je     c000aacd <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aab4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aab9:	74 53                	je     c000ab0e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aabb:	89 f9                	mov    ecx,edi
c000aabd:	41                   	inc    ecx
c000aabe:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aac1:	80 fa 2f             	cmp    dl,0x2f
c000aac4:	74 f7                	je     c000aabd <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aac6:	80 fa 5c             	cmp    dl,0x5c
c000aac9:	74 f2                	je     c000aabd <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aacb:	eb d1                	jmp    c000aa9e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aacd:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aad2:	74 3a                	je     c000ab0e <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aad4:	83 f8 03             	cmp    eax,0x3
c000aad7:	74 c5                	je     c000aa9e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aad9:	41                   	inc    ecx
c000aada:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aadd:	80 fa 2f             	cmp    dl,0x2f
c000aae0:	74 f7                	je     c000aad9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aae2:	80 fa 5c             	cmp    dl,0x5c
c000aae5:	74 f2                	je     c000aad9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aae7:	48                   	dec    eax
c000aae8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aaec:	75 06                	jne    c000aaf4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aaee:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aaf2:	eb f3                	jmp    c000aae7 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000aaf4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aaf8:	74 07                	je     c000ab01 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aafa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aafe:	48                   	dec    eax
c000aaff:	eb f3                	jmp    c000aaf4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ab01:	40                   	inc    eax
c000ab02:	eb 9a                	jmp    c000aa9e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab04:	80 fa 2f             	cmp    dl,0x2f
c000ab07:	74 95                	je     c000aa9e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab09:	80 fa 5c             	cmp    dl,0x5c
c000ab0c:	74 90                	je     c000aa9e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab0e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ab11:	40                   	inc    eax
c000ab12:	eb 8a                	jmp    c000aa9e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab14:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab18:	83 ec 0c             	sub    esp,0xc
c000ab1b:	53                   	push   ebx
c000ab1c:	e8 0f 5a ff ff       	call   c0000530 <strlen>
c000ab21:	83 c4 10             	add    esp,0x10
c000ab24:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ab29:	75 26                	jne    c000ab51 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ab2b:	83 ec 0c             	sub    esp,0xc
c000ab2e:	53                   	push   ebx
c000ab2f:	e8 fc 59 ff ff       	call   c0000530 <strlen>
c000ab34:	83 c4 10             	add    esp,0x10
c000ab37:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ab3c:	74 26                	je     c000ab64 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ab3e:	83 ec 0c             	sub    esp,0xc
c000ab41:	53                   	push   ebx
c000ab42:	e8 e9 59 ff ff       	call   c0000530 <strlen>
c000ab47:	83 c4 10             	add    esp,0x10
c000ab4a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ab4f:	eb c7                	jmp    c000ab18 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000ab51:	83 ec 0c             	sub    esp,0xc
c000ab54:	53                   	push   ebx
c000ab55:	e8 d6 59 ff ff       	call   c0000530 <strlen>
c000ab5a:	83 c4 10             	add    esp,0x10
c000ab5d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ab62:	74 c7                	je     c000ab2b <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000ab64:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ab6a:	5b                   	pop    ebx
c000ab6b:	5e                   	pop    esi
c000ab6c:	5f                   	pop    edi
c000ab6d:	5d                   	pop    ebp
c000ab6e:	c3                   	ret    
c000ab6f:	90                   	nop

c000ab70 <File::File(char const*, Process*)>:
c000ab70:	83 ec 0c             	sub    esp,0xc
c000ab73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab77:	83 ec 08             	sub    esp,0x8
c000ab7a:	6a 00                	push   0x0
c000ab7c:	50                   	push   eax
c000ab7d:	e8 78 e3 ff ff       	call   c0008efa <UnixFile::UnixFile(int)>
c000ab82:	83 c4 10             	add    esp,0x10
c000ab85:	ba 50 f7 01 c0       	mov    edx,0xc001f750
c000ab8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8e:	89 10                	mov    DWORD PTR [eax],edx
c000ab90:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ab94:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000ab9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab9e:	83 c0 0d             	add    eax,0xd
c000aba1:	83 ec 04             	sub    esp,0x4
c000aba4:	52                   	push   edx
c000aba5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aba9:	50                   	push   eax
c000abaa:	e8 17 fe ff ff       	call   c000a9c6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000abaf:	83 c4 10             	add    esp,0x10
c000abb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abb6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000abb9:	8d 50 bf             	lea    edx,[eax-0x41]
c000abbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000abc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abca:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000abce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abd2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abd8:	25 ff 00 00 00       	and    eax,0xff
c000abdd:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000abe4:	85 c0                	test   eax,eax
c000abe6:	74 42                	je     c000ac2a <File::File(char const*, Process*)+0xba>
c000abe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abec:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abf2:	25 ff 00 00 00       	and    eax,0xff
c000abf7:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000abfe:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000ac04:	85 c0                	test   eax,eax
c000ac06:	75 22                	jne    c000ac2a <File::File(char const*, Process*)+0xba>
c000ac08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac0c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac12:	25 ff 00 00 00       	and    eax,0xff
c000ac17:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000ac1e:	83 ec 0c             	sub    esp,0xc
c000ac21:	50                   	push   eax
c000ac22:	e8 55 20 00 00       	call   c000cc7c <LogicalDisk::mount()>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	90                   	nop
c000ac2b:	83 c4 0c             	add    esp,0xc
c000ac2e:	c3                   	ret    
c000ac2f:	90                   	nop

c000ac30 <File::open(FileOpenMode)>:
c000ac30:	53                   	push   ebx
c000ac31:	b8 0b 00 00 00       	mov    eax,0xb
c000ac36:	83 ec 08             	sub    esp,0x8
c000ac39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac3d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ac44:	80 fa 19             	cmp    dl,0x19
c000ac47:	77 40                	ja     c000ac89 <File::open(FileOpenMode)+0x59>
c000ac49:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ac50:	85 d2                	test   edx,edx
c000ac52:	74 35                	je     c000ac89 <File::open(FileOpenMode)+0x59>
c000ac54:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ac5a:	85 d2                	test   edx,edx
c000ac5c:	74 2b                	je     c000ac89 <File::open(FileOpenMode)+0x59>
c000ac5e:	b8 06 00 00 00       	mov    eax,0x6
c000ac63:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ac67:	75 20                	jne    c000ac89 <File::open(FileOpenMode)+0x59>
c000ac69:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac6b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ac71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac75:	51                   	push   ecx
c000ac76:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ac79:	51                   	push   ecx
c000ac7a:	52                   	push   edx
c000ac7b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac7e:	83 c4 10             	add    esp,0x10
c000ac81:	85 c0                	test   eax,eax
c000ac83:	75 04                	jne    c000ac89 <File::open(FileOpenMode)+0x59>
c000ac85:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ac89:	83 c4 08             	add    esp,0x8
c000ac8c:	5b                   	pop    ebx
c000ac8d:	c3                   	ret    

c000ac8e <File::close()>:
c000ac8e:	53                   	push   ebx
c000ac8f:	b8 0b 00 00 00       	mov    eax,0xb
c000ac94:	83 ec 08             	sub    esp,0x8
c000ac97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac9b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000aca2:	80 fa 19             	cmp    dl,0x19
c000aca5:	77 41                	ja     c000ace8 <File::close()+0x5a>
c000aca7:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000acae:	85 db                	test   ebx,ebx
c000acb0:	74 36                	je     c000ace8 <File::close()+0x5a>
c000acb2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000acb9:	74 2d                	je     c000ace8 <File::close()+0x5a>
c000acbb:	b8 05 00 00 00       	mov    eax,0x5
c000acc0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000acc4:	74 22                	je     c000ace8 <File::close()+0x5a>
c000acc6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000acca:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000acd1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000acd7:	53                   	push   ebx
c000acd8:	53                   	push   ebx
c000acd9:	8b 10                	mov    edx,DWORD PTR [eax]
c000acdb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ace1:	50                   	push   eax
c000ace2:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ace5:	83 c4 10             	add    esp,0x10
c000ace8:	83 c4 08             	add    esp,0x8
c000aceb:	5b                   	pop    ebx
c000acec:	c3                   	ret    
c000aced:	90                   	nop

c000acee <File::seek(unsigned long long)>:
c000acee:	56                   	push   esi
c000acef:	53                   	push   ebx
c000acf0:	b8 0b 00 00 00       	mov    eax,0xb
c000acf5:	51                   	push   ecx
c000acf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000acfa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000acfe:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ad05:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad09:	80 fa 19             	cmp    dl,0x19
c000ad0c:	77 31                	ja     c000ad3f <File::seek(unsigned long long)+0x51>
c000ad0e:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad15:	85 d2                	test   edx,edx
c000ad17:	74 26                	je     c000ad3f <File::seek(unsigned long long)+0x51>
c000ad19:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad1f:	85 d2                	test   edx,edx
c000ad21:	74 1c                	je     c000ad3f <File::seek(unsigned long long)+0x51>
c000ad23:	b8 05 00 00 00       	mov    eax,0x5
c000ad28:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ad2c:	74 11                	je     c000ad3f <File::seek(unsigned long long)+0x51>
c000ad2e:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad30:	53                   	push   ebx
c000ad31:	51                   	push   ecx
c000ad32:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ad38:	52                   	push   edx
c000ad39:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad3c:	83 c4 10             	add    esp,0x10
c000ad3f:	5a                   	pop    edx
c000ad40:	5b                   	pop    ebx
c000ad41:	5e                   	pop    esi
c000ad42:	c3                   	ret    
c000ad43:	90                   	nop

c000ad44 <File::tell(unsigned long long*)>:
c000ad44:	83 ec 0c             	sub    esp,0xc
c000ad47:	b8 0b 00 00 00       	mov    eax,0xb
c000ad4c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad50:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ad57:	80 fa 19             	cmp    dl,0x19
c000ad5a:	77 34                	ja     c000ad90 <File::tell(unsigned long long*)+0x4c>
c000ad5c:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000ad63:	85 d2                	test   edx,edx
c000ad65:	74 29                	je     c000ad90 <File::tell(unsigned long long*)+0x4c>
c000ad67:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ad6d:	85 d2                	test   edx,edx
c000ad6f:	74 1f                	je     c000ad90 <File::tell(unsigned long long*)+0x4c>
c000ad71:	b8 05 00 00 00       	mov    eax,0x5
c000ad76:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad7a:	74 14                	je     c000ad90 <File::tell(unsigned long long*)+0x4c>
c000ad7c:	50                   	push   eax
c000ad7d:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad83:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad89:	52                   	push   edx
c000ad8a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad8d:	83 c4 10             	add    esp,0x10
c000ad90:	83 c4 0c             	add    esp,0xc
c000ad93:	c3                   	ret    

c000ad94 <File::rewind()>:
c000ad94:	83 ec 10             	sub    esp,0x10
c000ad97:	6a 00                	push   0x0
c000ad99:	6a 00                	push   0x0
c000ad9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad9f:	e8 4a ff ff ff       	call   c000acee <File::seek(unsigned long long)>
c000ada4:	83 c4 1c             	add    esp,0x1c
c000ada7:	c3                   	ret    

c000ada8 <File::unlink()>:
c000ada8:	83 ec 0c             	sub    esp,0xc
c000adab:	b8 0b 00 00 00       	mov    eax,0xb
c000adb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adb4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adbb:	80 f9 19             	cmp    cl,0x19
c000adbe:	77 2f                	ja     c000adef <File::unlink()+0x47>
c000adc0:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000adc7:	85 c9                	test   ecx,ecx
c000adc9:	74 24                	je     c000adef <File::unlink()+0x47>
c000adcb:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000add1:	85 c9                	test   ecx,ecx
c000add3:	74 1a                	je     c000adef <File::unlink()+0x47>
c000add5:	b8 06 00 00 00       	mov    eax,0x6
c000adda:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adde:	75 0f                	jne    c000adef <File::unlink()+0x47>
c000ade0:	83 c2 0d             	add    edx,0xd
c000ade3:	50                   	push   eax
c000ade4:	50                   	push   eax
c000ade5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ade7:	52                   	push   edx
c000ade8:	51                   	push   ecx
c000ade9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000adec:	83 c4 10             	add    esp,0x10
c000adef:	83 c4 0c             	add    esp,0xc
c000adf2:	c3                   	ret    
c000adf3:	90                   	nop

c000adf4 <File::rename(char const*)>:
c000adf4:	83 ec 0c             	sub    esp,0xc
c000adf7:	b8 0b 00 00 00       	mov    eax,0xb
c000adfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae00:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae07:	80 f9 19             	cmp    cl,0x19
c000ae0a:	77 32                	ja     c000ae3e <File::rename(char const*)+0x4a>
c000ae0c:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae13:	85 c9                	test   ecx,ecx
c000ae15:	74 27                	je     c000ae3e <File::rename(char const*)+0x4a>
c000ae17:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae1d:	85 c9                	test   ecx,ecx
c000ae1f:	74 1d                	je     c000ae3e <File::rename(char const*)+0x4a>
c000ae21:	b8 06 00 00 00       	mov    eax,0x6
c000ae26:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae2a:	75 12                	jne    c000ae3e <File::rename(char const*)+0x4a>
c000ae2c:	83 c2 0d             	add    edx,0xd
c000ae2f:	50                   	push   eax
c000ae30:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae36:	52                   	push   edx
c000ae37:	51                   	push   ecx
c000ae38:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ae3b:	83 c4 10             	add    esp,0x10
c000ae3e:	83 c4 0c             	add    esp,0xc
c000ae41:	c3                   	ret    

c000ae42 <File::chfatattr(unsigned char, unsigned char)>:
c000ae42:	57                   	push   edi
c000ae43:	b8 0b 00 00 00       	mov    eax,0xb
c000ae48:	56                   	push   esi
c000ae49:	53                   	push   ebx
c000ae4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae4e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae52:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae59:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ae5d:	80 f9 19             	cmp    cl,0x19
c000ae60:	77 37                	ja     c000ae99 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae62:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000ae69:	85 c9                	test   ecx,ecx
c000ae6b:	74 2c                	je     c000ae99 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae6d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ae73:	85 c9                	test   ecx,ecx
c000ae75:	74 22                	je     c000ae99 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae77:	b8 06 00 00 00       	mov    eax,0x6
c000ae7c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae80:	75 17                	jne    c000ae99 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae82:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ae84:	89 f0                	mov    eax,esi
c000ae86:	83 c2 0d             	add    edx,0xd
c000ae89:	0f b6 f0             	movzx  esi,al
c000ae8c:	0f b6 db             	movzx  ebx,bl
c000ae8f:	56                   	push   esi
c000ae90:	53                   	push   ebx
c000ae91:	52                   	push   edx
c000ae92:	51                   	push   ecx
c000ae93:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ae96:	83 c4 10             	add    esp,0x10
c000ae99:	5b                   	pop    ebx
c000ae9a:	5e                   	pop    esi
c000ae9b:	5f                   	pop    edi
c000ae9c:	c3                   	ret    
c000ae9d:	90                   	nop

c000ae9e <File::exists()>:
c000ae9e:	83 ec 0c             	sub    esp,0xc
c000aea1:	31 c0                	xor    eax,eax
c000aea3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aea7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aeae:	80 f9 19             	cmp    cl,0x19
c000aeb1:	77 24                	ja     c000aed7 <File::exists()+0x39>
c000aeb3:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000aeba:	85 c9                	test   ecx,ecx
c000aebc:	74 19                	je     c000aed7 <File::exists()+0x39>
c000aebe:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000aec4:	85 c9                	test   ecx,ecx
c000aec6:	74 0f                	je     c000aed7 <File::exists()+0x39>
c000aec8:	83 c2 0d             	add    edx,0xd
c000aecb:	50                   	push   eax
c000aecc:	50                   	push   eax
c000aecd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000aecf:	52                   	push   edx
c000aed0:	51                   	push   ecx
c000aed1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000aed4:	83 c4 10             	add    esp,0x10
c000aed7:	83 c4 0c             	add    esp,0xc
c000aeda:	c3                   	ret    
c000aedb:	90                   	nop

c000aedc <File::stat(unsigned long long*, bool*)>:
c000aedc:	56                   	push   esi
c000aedd:	53                   	push   ebx
c000aede:	50                   	push   eax
c000aedf:	b8 0b 00 00 00       	mov    eax,0xb
c000aee4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aee8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aeec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aef3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aef7:	80 f9 19             	cmp    cl,0x19
c000aefa:	77 3d                	ja     c000af39 <File::stat(unsigned long long*, bool*)+0x5d>
c000aefc:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000af03:	85 c9                	test   ecx,ecx
c000af05:	74 32                	je     c000af39 <File::stat(unsigned long long*, bool*)+0x5d>
c000af07:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000af0d:	85 c9                	test   ecx,ecx
c000af0f:	74 28                	je     c000af39 <File::stat(unsigned long long*, bool*)+0x5d>
c000af11:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af13:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af17:	74 13                	je     c000af2c <File::stat(unsigned long long*, bool*)+0x50>
c000af19:	83 ec 04             	sub    esp,0x4
c000af1c:	56                   	push   esi
c000af1d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000af23:	51                   	push   ecx
c000af24:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000af27:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000af2a:	eb 0a                	jmp    c000af36 <File::stat(unsigned long long*, bool*)+0x5a>
c000af2c:	53                   	push   ebx
c000af2d:	83 c2 0d             	add    edx,0xd
c000af30:	56                   	push   esi
c000af31:	52                   	push   edx
c000af32:	51                   	push   ecx
c000af33:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000af36:	83 c4 10             	add    esp,0x10
c000af39:	5a                   	pop    edx
c000af3a:	5b                   	pop    ebx
c000af3b:	5e                   	pop    esi
c000af3c:	c3                   	ret    

c000af3d <Fs::setcwd(Process*, char*)>:
c000af3d:	55                   	push   ebp
c000af3e:	57                   	push   edi
c000af3f:	56                   	push   esi
c000af40:	53                   	push   ebx
c000af41:	81 ec 20 02 00 00    	sub    esp,0x220
c000af47:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000af4e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000af54:	57                   	push   edi
c000af55:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000af5c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000af60:	56                   	push   esi
c000af61:	e8 60 fa ff ff       	call   c000a9c6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af66:	89 34 24             	mov    DWORD PTR [esp],esi
c000af69:	e8 c2 55 ff ff       	call   c0000530 <strlen>
c000af6e:	83 c4 10             	add    esp,0x10
c000af71:	83 f8 02             	cmp    eax,0x2
c000af74:	77 15                	ja     c000af8b <Fs::setcwd(Process*, char*)+0x4e>
c000af76:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000af7b:	83 eb 41             	sub    ebx,0x41
c000af7e:	8b 04 9d 20 64 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9be0]
c000af85:	85 c0                	test   eax,eax
c000af87:	75 1c                	jne    c000afa5 <Fs::setcwd(Process*, char*)+0x68>
c000af89:	eb 2f                	jmp    c000afba <Fs::setcwd(Process*, char*)+0x7d>
c000af8b:	83 ec 0c             	sub    esp,0xc
c000af8e:	56                   	push   esi
c000af8f:	e8 9c 55 ff ff       	call   c0000530 <strlen>
c000af94:	83 c4 10             	add    esp,0x10
c000af97:	83 f8 03             	cmp    eax,0x3
c000af9a:	75 57                	jne    c000aff3 <Fs::setcwd(Process*, char*)+0xb6>
c000af9c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000afa1:	75 50                	jne    c000aff3 <Fs::setcwd(Process*, char*)+0xb6>
c000afa3:	eb d1                	jmp    c000af76 <Fs::setcwd(Process*, char*)+0x39>
c000afa5:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000afac:	75 0c                	jne    c000afba <Fs::setcwd(Process*, char*)+0x7d>
c000afae:	83 ec 0c             	sub    esp,0xc
c000afb1:	50                   	push   eax
c000afb2:	e8 c5 1c 00 00       	call   c000cc7c <LogicalDisk::mount()>
c000afb7:	83 c4 10             	add    esp,0x10
c000afba:	b8 03 00 00 00       	mov    eax,0x3
c000afbf:	83 fb 19             	cmp    ebx,0x19
c000afc2:	0f 87 c6 00 00 00    	ja     c000b08e <Fs::setcwd(Process*, char*)+0x151>
c000afc8:	8b 14 9d 20 64 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd9be0]
c000afcf:	b8 05 00 00 00       	mov    eax,0x5
c000afd4:	85 d2                	test   edx,edx
c000afd6:	0f 84 b2 00 00 00    	je     c000b08e <Fs::setcwd(Process*, char*)+0x151>
c000afdc:	b8 06 00 00 00       	mov    eax,0x6
c000afe1:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000afe8:	0f 85 92 00 00 00    	jne    c000b080 <Fs::setcwd(Process*, char*)+0x143>
c000afee:	e9 9b 00 00 00       	jmp    c000b08e <Fs::setcwd(Process*, char*)+0x151>
c000aff3:	83 ec 0c             	sub    esp,0xc
c000aff6:	68 14 01 00 00       	push   0x114
c000affb:	e8 65 c8 ff ff       	call   c0007865 <malloc>
c000b000:	83 c4 0c             	add    esp,0xc
c000b003:	89 c3                	mov    ebx,eax
c000b005:	55                   	push   ebp
c000b006:	56                   	push   esi
c000b007:	50                   	push   eax
c000b008:	e8 63 fb ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c000b00d:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b012:	83 c4 0c             	add    esp,0xc
c000b015:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b019:	50                   	push   eax
c000b01a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b01e:	50                   	push   eax
c000b01f:	53                   	push   ebx
c000b020:	e8 b7 fe ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c000b025:	83 c4 10             	add    esp,0x10
c000b028:	83 f8 02             	cmp    eax,0x2
c000b02b:	74 27                	je     c000b054 <Fs::setcwd(Process*, char*)+0x117>
c000b02d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b032:	75 1c                	jne    c000b050 <Fs::setcwd(Process*, char*)+0x113>
c000b034:	b8 02 00 00 00       	mov    eax,0x2
c000b039:	85 db                	test   ebx,ebx
c000b03b:	74 51                	je     c000b08e <Fs::setcwd(Process*, char*)+0x151>
c000b03d:	83 ec 0c             	sub    esp,0xc
c000b040:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b042:	53                   	push   ebx
c000b043:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b046:	83 c4 10             	add    esp,0x10
c000b049:	b8 02 00 00 00       	mov    eax,0x2
c000b04e:	eb 3e                	jmp    c000b08e <Fs::setcwd(Process*, char*)+0x151>
c000b050:	85 c0                	test   eax,eax
c000b052:	74 1c                	je     c000b070 <Fs::setcwd(Process*, char*)+0x133>
c000b054:	b8 01 00 00 00       	mov    eax,0x1
c000b059:	85 db                	test   ebx,ebx
c000b05b:	74 31                	je     c000b08e <Fs::setcwd(Process*, char*)+0x151>
c000b05d:	83 ec 0c             	sub    esp,0xc
c000b060:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b062:	53                   	push   ebx
c000b063:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b066:	83 c4 10             	add    esp,0x10
c000b069:	b8 01 00 00 00       	mov    eax,0x1
c000b06e:	eb 1e                	jmp    c000b08e <Fs::setcwd(Process*, char*)+0x151>
c000b070:	85 db                	test   ebx,ebx
c000b072:	74 0c                	je     c000b080 <Fs::setcwd(Process*, char*)+0x143>
c000b074:	83 ec 0c             	sub    esp,0xc
c000b077:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b079:	53                   	push   ebx
c000b07a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b07d:	83 c4 10             	add    esp,0x10
c000b080:	50                   	push   eax
c000b081:	50                   	push   eax
c000b082:	56                   	push   esi
c000b083:	57                   	push   edi
c000b084:	e8 67 55 ff ff       	call   c00005f0 <strcpy>
c000b089:	83 c4 10             	add    esp,0x10
c000b08c:	31 c0                	xor    eax,eax
c000b08e:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b094:	5b                   	pop    ebx
c000b095:	5e                   	pop    esi
c000b096:	5f                   	pop    edi
c000b097:	5d                   	pop    ebp
c000b098:	c3                   	ret    
c000b099:	90                   	nop

c000b09a <Directory::Directory(char const*, Process*)>:
c000b09a:	83 ec 0c             	sub    esp,0xc
c000b09d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a1:	83 ec 08             	sub    esp,0x8
c000b0a4:	6a 00                	push   0x0
c000b0a6:	50                   	push   eax
c000b0a7:	e8 4e de ff ff       	call   c0008efa <UnixFile::UnixFile(int)>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	ba 6c f7 01 c0       	mov    edx,0xc001f76c
c000b0b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b8:	89 10                	mov    DWORD PTR [eax],edx
c000b0ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0be:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b0c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c8:	83 c0 0d             	add    eax,0xd
c000b0cb:	83 ec 04             	sub    esp,0x4
c000b0ce:	52                   	push   edx
c000b0cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d3:	50                   	push   eax
c000b0d4:	e8 ed f8 ff ff       	call   c000a9c6 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b0d9:	83 c4 10             	add    esp,0x10
c000b0dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b0e3:	8d 50 bf             	lea    edx,[eax-0x41]
c000b0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ea:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b0f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0fc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b102:	25 ff 00 00 00       	and    eax,0xff
c000b107:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b10e:	85 c0                	test   eax,eax
c000b110:	74 42                	je     c000b154 <Directory::Directory(char const*, Process*)+0xba>
c000b112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b116:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b11c:	25 ff 00 00 00       	and    eax,0xff
c000b121:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b128:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b12e:	85 c0                	test   eax,eax
c000b130:	75 22                	jne    c000b154 <Directory::Directory(char const*, Process*)+0xba>
c000b132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b136:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b13c:	25 ff 00 00 00       	and    eax,0xff
c000b141:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c000b148:	83 ec 0c             	sub    esp,0xc
c000b14b:	50                   	push   eax
c000b14c:	e8 2b 1b 00 00       	call   c000cc7c <LogicalDisk::mount()>
c000b151:	83 c4 10             	add    esp,0x10
c000b154:	90                   	nop
c000b155:	83 c4 0c             	add    esp,0xc
c000b158:	c3                   	ret    
c000b159:	90                   	nop

c000b15a <Directory::open()>:
c000b15a:	53                   	push   ebx
c000b15b:	b8 0b 00 00 00       	mov    eax,0xb
c000b160:	83 ec 08             	sub    esp,0x8
c000b163:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b167:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b16e:	80 fa 19             	cmp    dl,0x19
c000b171:	77 3d                	ja     c000b1b0 <Directory::open()+0x56>
c000b173:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b17a:	85 d2                	test   edx,edx
c000b17c:	74 32                	je     c000b1b0 <Directory::open()+0x56>
c000b17e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b184:	85 d2                	test   edx,edx
c000b186:	74 28                	je     c000b1b0 <Directory::open()+0x56>
c000b188:	b8 06 00 00 00       	mov    eax,0x6
c000b18d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b191:	75 1d                	jne    c000b1b0 <Directory::open()+0x56>
c000b193:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b199:	50                   	push   eax
c000b19a:	8b 02                	mov    eax,DWORD PTR [edx]
c000b19c:	51                   	push   ecx
c000b19d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b1a0:	51                   	push   ecx
c000b1a1:	52                   	push   edx
c000b1a2:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b1a5:	83 c4 10             	add    esp,0x10
c000b1a8:	85 c0                	test   eax,eax
c000b1aa:	75 04                	jne    c000b1b0 <Directory::open()+0x56>
c000b1ac:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b1b0:	83 c4 08             	add    esp,0x8
c000b1b3:	5b                   	pop    ebx
c000b1b4:	c3                   	ret    
c000b1b5:	90                   	nop

c000b1b6 <Directory::close()>:
c000b1b6:	53                   	push   ebx
c000b1b7:	b8 0b 00 00 00       	mov    eax,0xb
c000b1bc:	83 ec 08             	sub    esp,0x8
c000b1bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1c3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1ca:	80 fa 19             	cmp    dl,0x19
c000b1cd:	77 41                	ja     c000b210 <Directory::close()+0x5a>
c000b1cf:	8b 1c 95 20 64 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd9be0]
c000b1d6:	85 db                	test   ebx,ebx
c000b1d8:	74 36                	je     c000b210 <Directory::close()+0x5a>
c000b1da:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b1e1:	74 2d                	je     c000b210 <Directory::close()+0x5a>
c000b1e3:	b8 05 00 00 00       	mov    eax,0x5
c000b1e8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b1ec:	74 22                	je     c000b210 <Directory::close()+0x5a>
c000b1ee:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b1f2:	8b 04 95 20 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9be0]
c000b1f9:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b1ff:	53                   	push   ebx
c000b200:	53                   	push   ebx
c000b201:	8b 10                	mov    edx,DWORD PTR [eax]
c000b203:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b209:	50                   	push   eax
c000b20a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b20d:	83 c4 10             	add    esp,0x10
c000b210:	83 c4 08             	add    esp,0x8
c000b213:	5b                   	pop    ebx
c000b214:	c3                   	ret    
c000b215:	90                   	nop

c000b216 <Directory::unlink()>:
c000b216:	83 ec 0c             	sub    esp,0xc
c000b219:	b8 0b 00 00 00       	mov    eax,0xb
c000b21e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b222:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b229:	80 f9 19             	cmp    cl,0x19
c000b22c:	77 2f                	ja     c000b25d <Directory::unlink()+0x47>
c000b22e:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b235:	85 c9                	test   ecx,ecx
c000b237:	74 24                	je     c000b25d <Directory::unlink()+0x47>
c000b239:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b23f:	85 c9                	test   ecx,ecx
c000b241:	74 1a                	je     c000b25d <Directory::unlink()+0x47>
c000b243:	b8 06 00 00 00       	mov    eax,0x6
c000b248:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b24c:	75 0f                	jne    c000b25d <Directory::unlink()+0x47>
c000b24e:	83 c2 0d             	add    edx,0xd
c000b251:	50                   	push   eax
c000b252:	50                   	push   eax
c000b253:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b255:	52                   	push   edx
c000b256:	51                   	push   ecx
c000b257:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b25a:	83 c4 10             	add    esp,0x10
c000b25d:	83 c4 0c             	add    esp,0xc
c000b260:	c3                   	ret    
c000b261:	90                   	nop

c000b262 <Directory::rename(char const*)>:
c000b262:	83 ec 0c             	sub    esp,0xc
c000b265:	b8 0b 00 00 00       	mov    eax,0xb
c000b26a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b26e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b275:	80 f9 19             	cmp    cl,0x19
c000b278:	77 32                	ja     c000b2ac <Directory::rename(char const*)+0x4a>
c000b27a:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b281:	85 c9                	test   ecx,ecx
c000b283:	74 27                	je     c000b2ac <Directory::rename(char const*)+0x4a>
c000b285:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b28b:	85 c9                	test   ecx,ecx
c000b28d:	74 1d                	je     c000b2ac <Directory::rename(char const*)+0x4a>
c000b28f:	b8 06 00 00 00       	mov    eax,0x6
c000b294:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b298:	75 12                	jne    c000b2ac <Directory::rename(char const*)+0x4a>
c000b29a:	83 c2 0d             	add    edx,0xd
c000b29d:	50                   	push   eax
c000b29e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b2a4:	52                   	push   edx
c000b2a5:	51                   	push   ecx
c000b2a6:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	83 c4 0c             	add    esp,0xc
c000b2af:	c3                   	ret    

c000b2b0 <Directory::exists()>:
c000b2b0:	83 ec 0c             	sub    esp,0xc
c000b2b3:	31 c0                	xor    eax,eax
c000b2b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2b9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2c0:	80 f9 19             	cmp    cl,0x19
c000b2c3:	77 24                	ja     c000b2e9 <Directory::exists()+0x39>
c000b2c5:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b2cc:	85 c9                	test   ecx,ecx
c000b2ce:	74 19                	je     c000b2e9 <Directory::exists()+0x39>
c000b2d0:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b2d6:	85 c9                	test   ecx,ecx
c000b2d8:	74 0f                	je     c000b2e9 <Directory::exists()+0x39>
c000b2da:	83 c2 0d             	add    edx,0xd
c000b2dd:	50                   	push   eax
c000b2de:	50                   	push   eax
c000b2df:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2e1:	52                   	push   edx
c000b2e2:	51                   	push   ecx
c000b2e3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	83 c4 0c             	add    esp,0xc
c000b2ec:	c3                   	ret    
c000b2ed:	90                   	nop

c000b2ee <Directory::read(dirent*)>:
c000b2ee:	83 ec 1c             	sub    esp,0x1c
c000b2f1:	b8 0b 00 00 00       	mov    eax,0xb
c000b2f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b2fa:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b301:	80 fa 19             	cmp    dl,0x19
c000b304:	77 30                	ja     c000b336 <Directory::read(dirent*)+0x48>
c000b306:	8b 14 95 20 64 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9be0]
c000b30d:	85 d2                	test   edx,edx
c000b30f:	74 25                	je     c000b336 <Directory::read(dirent*)+0x48>
c000b311:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000b318:	74 1c                	je     c000b336 <Directory::read(dirent*)+0x48>
c000b31a:	83 ec 0c             	sub    esp,0xc
c000b31d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b31f:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b323:	52                   	push   edx
c000b324:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b328:	6a 00                	push   0x0
c000b32a:	68 10 01 00 00       	push   0x110
c000b32f:	51                   	push   ecx
c000b330:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b333:	83 c4 20             	add    esp,0x20
c000b336:	83 c4 1c             	add    esp,0x1c
c000b339:	c3                   	ret    

c000b33a <Directory::create()>:
c000b33a:	83 ec 0c             	sub    esp,0xc
c000b33d:	b8 0b 00 00 00       	mov    eax,0xb
c000b342:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b346:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b34d:	80 f9 19             	cmp    cl,0x19
c000b350:	77 2f                	ja     c000b381 <Directory::create()+0x47>
c000b352:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c000b359:	85 c9                	test   ecx,ecx
c000b35b:	74 24                	je     c000b381 <Directory::create()+0x47>
c000b35d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b363:	85 c9                	test   ecx,ecx
c000b365:	74 1a                	je     c000b381 <Directory::create()+0x47>
c000b367:	b8 06 00 00 00       	mov    eax,0x6
c000b36c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b370:	75 0f                	jne    c000b381 <Directory::create()+0x47>
c000b372:	83 c2 0d             	add    edx,0xd
c000b375:	50                   	push   eax
c000b376:	50                   	push   eax
c000b377:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b379:	52                   	push   edx
c000b37a:	51                   	push   ecx
c000b37b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	83 c4 0c             	add    esp,0xc
c000b384:	c3                   	ret    
c000b385:	90                   	nop

c000b386 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b386:	b8 0a 00 00 00       	mov    eax,0xa
c000b38b:	c3                   	ret    

c000b38c <Bus::Bus(char const*)>:
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b393:	83 ec 08             	sub    esp,0x8
c000b396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b39a:	50                   	push   eax
c000b39b:	e8 30 08 00 00       	call   c000bbd0 <Device::Device(char const*)>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	ba 88 f7 01 c0       	mov    edx,0xc001f788
c000b3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ac:	89 10                	mov    DWORD PTR [eax],edx
c000b3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3b2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b3bc:	90                   	nop
c000b3bd:	83 c4 0c             	add    esp,0xc
c000b3c0:	c3                   	ret    
c000b3c1:	90                   	nop
c000b3c2:	66 90                	xchg   ax,ax

c000b3c4 <Bus::~Bus()>:
c000b3c4:	83 ec 0c             	sub    esp,0xc
c000b3c7:	ba 88 f7 01 c0       	mov    edx,0xc001f788
c000b3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d0:	89 10                	mov    DWORD PTR [eax],edx
c000b3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d6:	83 ec 0c             	sub    esp,0xc
c000b3d9:	50                   	push   eax
c000b3da:	e8 5b 05 00 00       	call   c000b93a <Device::~Device()>
c000b3df:	83 c4 10             	add    esp,0x10
c000b3e2:	90                   	nop
c000b3e3:	83 c4 0c             	add    esp,0xc
c000b3e6:	c3                   	ret    
c000b3e7:	90                   	nop

c000b3e8 <Bus::~Bus()>:
c000b3e8:	83 ec 0c             	sub    esp,0xc
c000b3eb:	83 ec 0c             	sub    esp,0xc
c000b3ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f2:	e8 cd ff ff ff       	call   c000b3c4 <Bus::~Bus()>
c000b3f7:	83 c4 10             	add    esp,0x10
c000b3fa:	83 ec 08             	sub    esp,0x8
c000b3fd:	68 58 01 00 00       	push   0x158
c000b402:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b406:	e8 f9 f0 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000b40b:	83 c4 10             	add    esp,0x10
c000b40e:	83 c4 0c             	add    esp,0xc
c000b411:	c3                   	ret    

c000b412 <beepThread(void*)>:
c000b412:	83 ec 0c             	sub    esp,0xc
c000b415:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000b41a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b41e:	48                   	dec    eax
c000b41f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000b424:	75 01                	jne    c000b427 <beepThread(void*)+0x15>
c000b426:	fb                   	sti    
c000b427:	83 ec 0c             	sub    esp,0xc
c000b42a:	6b c2 0a             	imul   eax,edx,0xa
c000b42d:	50                   	push   eax
c000b42e:	e8 79 96 00 00       	call   c0014aac <milliTenthSleep(unsigned int)>
c000b433:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b43a:	e8 5a b4 00 00       	call   c0016899 <HalMakeBeep(int)>
c000b43f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b447:	83 c4 1c             	add    esp,0x1c
c000b44a:	e9 59 95 00 00       	jmp    c00149a8 <blockTask(TaskState)>

c000b44f <Krnl::beep(int, int, bool)>:
c000b44f:	56                   	push   esi
c000b450:	53                   	push   ebx
c000b451:	83 ec 10             	sub    esp,0x10
c000b454:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b458:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b45c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b460:	e8 34 b4 00 00       	call   c0016899 <HalMakeBeep(int)>
c000b465:	83 c4 10             	add    esp,0x10
c000b468:	89 f0                	mov    eax,esi
c000b46a:	84 c0                	test   al,al
c000b46c:	74 1e                	je     c000b48c <Krnl::beep(int, int, bool)+0x3d>
c000b46e:	83 ec 0c             	sub    esp,0xc
c000b471:	6b db 0a             	imul   ebx,ebx,0xa
c000b474:	53                   	push   ebx
c000b475:	e8 32 96 00 00       	call   c0014aac <milliTenthSleep(unsigned int)>
c000b47a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b482:	83 c4 14             	add    esp,0x14
c000b485:	5b                   	pop    ebx
c000b486:	5e                   	pop    esi
c000b487:	e9 0d b4 00 00       	jmp    c0016899 <HalMakeBeep(int)>
c000b48c:	68 e6 00 00 00       	push   0xe6
c000b491:	53                   	push   ebx
c000b492:	68 12 b4 00 c0       	push   0xc000b412
c000b497:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b49d:	e8 c2 90 00 00       	call   c0014564 <Process::createThread(void (*)(void*), void*, int)>
c000b4a2:	83 c4 14             	add    esp,0x14
c000b4a5:	5b                   	pop    ebx
c000b4a6:	5e                   	pop    esi
c000b4a7:	c3                   	ret    

c000b4a8 <User::loadClockSettings(int)>:
c000b4a8:	53                   	push   ebx
c000b4a9:	83 ec 14             	sub    esp,0x14
c000b4ac:	68 14 01 00 00       	push   0x114
c000b4b1:	e8 af c3 ff ff       	call   c0007865 <malloc>
c000b4b6:	83 c4 0c             	add    esp,0xc
c000b4b9:	89 c3                	mov    ebx,eax
c000b4bb:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c000b4c1:	68 ac f7 01 c0       	push   0xc001f7ac
c000b4c6:	50                   	push   eax
c000b4c7:	e8 a4 f6 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c000b4cc:	58                   	pop    eax
c000b4cd:	5a                   	pop    edx
c000b4ce:	6a 01                	push   0x1
c000b4d0:	53                   	push   ebx
c000b4d1:	e8 5a f7 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c000b4d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4d9:	e8 b0 f7 ff ff       	call   c000ac8e <File::close()>
c000b4de:	83 c4 10             	add    esp,0x10
c000b4e1:	85 db                	test   ebx,ebx
c000b4e3:	74 0f                	je     c000b4f4 <User::loadClockSettings(int)+0x4c>
c000b4e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4e7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b4eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b4ee:	83 c4 08             	add    esp,0x8
c000b4f1:	5b                   	pop    ebx
c000b4f2:	ff e0                	jmp    eax
c000b4f4:	83 c4 08             	add    esp,0x8
c000b4f7:	5b                   	pop    ebx
c000b4f8:	c3                   	ret    
c000b4f9:	90                   	nop

c000b4fa <Clock::Clock(char const*)>:
c000b4fa:	83 ec 0c             	sub    esp,0xc
c000b4fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b501:	83 ec 08             	sub    esp,0x8
c000b504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b508:	50                   	push   eax
c000b509:	e8 c2 06 00 00       	call   c000bbd0 <Device::Device(char const*)>
c000b50e:	83 c4 10             	add    esp,0x10
c000b511:	ba d4 f7 01 c0       	mov    edx,0xc001f7d4
c000b516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b51a:	89 10                	mov    DWORD PTR [eax],edx
c000b51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b520:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b52a:	90                   	nop
c000b52b:	83 c4 0c             	add    esp,0xc
c000b52e:	c3                   	ret    
c000b52f:	90                   	nop

c000b530 <Clock::~Clock()>:
c000b530:	83 ec 0c             	sub    esp,0xc
c000b533:	ba d4 f7 01 c0       	mov    edx,0xc001f7d4
c000b538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b53c:	89 10                	mov    DWORD PTR [eax],edx
c000b53e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b542:	83 ec 0c             	sub    esp,0xc
c000b545:	50                   	push   eax
c000b546:	e8 ef 03 00 00       	call   c000b93a <Device::~Device()>
c000b54b:	83 c4 10             	add    esp,0x10
c000b54e:	90                   	nop
c000b54f:	83 c4 0c             	add    esp,0xc
c000b552:	c3                   	ret    
c000b553:	90                   	nop

c000b554 <Clock::~Clock()>:
c000b554:	83 ec 0c             	sub    esp,0xc
c000b557:	83 ec 0c             	sub    esp,0xc
c000b55a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b55e:	e8 cd ff ff ff       	call   c000b530 <Clock::~Clock()>
c000b563:	83 c4 10             	add    esp,0x10
c000b566:	83 ec 08             	sub    esp,0x8
c000b569:	68 58 01 00 00       	push   0x158
c000b56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b572:	e8 8d ef ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000b577:	83 c4 10             	add    esp,0x10
c000b57a:	83 c4 0c             	add    esp,0xc
c000b57d:	c3                   	ret    

c000b57e <Clock::timeInSecondsLocal()>:
c000b57e:	53                   	push   ebx
c000b57f:	83 ec 14             	sub    esp,0x14
c000b582:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b586:	8b 10                	mov    edx,DWORD PTR [eax]
c000b588:	50                   	push   eax
c000b589:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b58c:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b593:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b599:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b59f:	89 cb                	mov    ebx,ecx
c000b5a1:	c1 fb 1f             	sar    ebx,0x1f
c000b5a4:	01 c8                	add    eax,ecx
c000b5a6:	11 da                	adc    edx,ebx
c000b5a8:	83 c4 10             	add    esp,0x10
c000b5ab:	31 c9                	xor    ecx,ecx
c000b5ad:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b5b4:	74 05                	je     c000b5bb <Clock::timeInSecondsLocal()+0x3d>
c000b5b6:	b9 08 07 00 00       	mov    ecx,0x708
c000b5bb:	31 db                	xor    ebx,ebx
c000b5bd:	01 c8                	add    eax,ecx
c000b5bf:	11 da                	adc    edx,ebx
c000b5c1:	83 c4 08             	add    esp,0x8
c000b5c4:	5b                   	pop    ebx
c000b5c5:	c3                   	ret    

c000b5c6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b5c6:	57                   	push   edi
c000b5c7:	56                   	push   esi
c000b5c8:	53                   	push   ebx
c000b5c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b5cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b5d1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5d3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b5d7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b5da:	0f b6 05 b8 3f 02 c0 	movzx  eax,BYTE PTR ds:0xc0023fb8
c000b5e1:	03 05 bc 3f 02 c0    	add    eax,DWORD PTR ds:0xc0023fbc
c000b5e7:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b5ed:	99                   	cdq    
c000b5ee:	29 c6                	sub    esi,eax
c000b5f0:	19 d7                	sbb    edi,edx
c000b5f2:	89 f0                	mov    eax,esi
c000b5f4:	89 fa                	mov    edx,edi
c000b5f6:	31 f6                	xor    esi,esi
c000b5f8:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b5ff:	74 05                	je     c000b606 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b601:	be 08 07 00 00       	mov    esi,0x708
c000b606:	31 ff                	xor    edi,edi
c000b608:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b60c:	29 f0                	sub    eax,esi
c000b60e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b612:	19 fa                	sbb    edx,edi
c000b614:	89 d8                	mov    eax,ebx
c000b616:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b61a:	5b                   	pop    ebx
c000b61b:	5e                   	pop    esi
c000b61c:	5f                   	pop    edi
c000b61d:	ff e0                	jmp    eax

c000b61f <datetimeToSeconds(datetime_t)>:
c000b61f:	55                   	push   ebp
c000b620:	57                   	push   edi
c000b621:	56                   	push   esi
c000b622:	53                   	push   ebx
c000b623:	83 ec 14             	sub    esp,0x14
c000b626:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b62a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b62e:	89 d3                	mov    ebx,edx
c000b630:	0f b6 c6             	movzx  eax,dh
c000b633:	c1 eb 10             	shr    ebx,0x10
c000b636:	48                   	dec    eax
c000b637:	66 81 eb 6c 07       	sub    bx,0x76c
c000b63c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b640:	0f b6 f5             	movzx  esi,ch
c000b643:	89 cf                	mov    edi,ecx
c000b645:	6b f6 3c             	imul   esi,esi,0x3c
c000b648:	c1 ef 10             	shr    edi,0x10
c000b64b:	0f b6 c9             	movzx  ecx,cl
c000b64e:	89 f8                	mov    eax,edi
c000b650:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b656:	0f b6 f8             	movzx  edi,al
c000b659:	0f b6 d2             	movzx  edx,dl
c000b65c:	01 fe                	add    esi,edi
c000b65e:	01 f1                	add    ecx,esi
c000b660:	0f b7 f3             	movzx  esi,bx
c000b663:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b667:	c1 f9 1f             	sar    ecx,0x1f
c000b66a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b66f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b673:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b678:	8b 0c 8d 20 f8 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe07e0]
c000b67f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b683:	76 29                	jbe    c000b6ae <datetimeToSeconds(datetime_t)+0x8f>
c000b685:	f6 c3 03             	test   bl,0x3
c000b688:	75 24                	jne    c000b6ae <datetimeToSeconds(datetime_t)+0x8f>
c000b68a:	31 d2                	xor    edx,edx
c000b68c:	bf 64 00 00 00       	mov    edi,0x64
c000b691:	89 d8                	mov    eax,ebx
c000b693:	66 f7 f7             	div    di
c000b696:	66 85 d2             	test   dx,dx
c000b699:	75 12                	jne    c000b6ad <datetimeToSeconds(datetime_t)+0x8e>
c000b69b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b6a1:	bf 90 01 00 00       	mov    edi,0x190
c000b6a6:	99                   	cdq    
c000b6a7:	f7 ff                	idiv   edi
c000b6a9:	85 d2                	test   edx,edx
c000b6ab:	75 01                	jne    c000b6ae <datetimeToSeconds(datetime_t)+0x8f>
c000b6ad:	41                   	inc    ecx
c000b6ae:	66 83 fb 46          	cmp    bx,0x46
c000b6b2:	76 45                	jbe    c000b6f9 <datetimeToSeconds(datetime_t)+0xda>
c000b6b4:	bb 46 00 00 00       	mov    ebx,0x46
c000b6b9:	bf 64 00 00 00       	mov    edi,0x64
c000b6be:	bd 90 01 00 00       	mov    ebp,0x190
c000b6c3:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6c8:	f6 c3 03             	test   bl,0x3
c000b6cb:	75 23                	jne    c000b6f0 <datetimeToSeconds(datetime_t)+0xd1>
c000b6cd:	89 d8                	mov    eax,ebx
c000b6cf:	99                   	cdq    
c000b6d0:	f7 ff                	idiv   edi
c000b6d2:	b8 6e 01 00 00       	mov    eax,0x16e
c000b6d7:	85 d2                	test   edx,edx
c000b6d9:	75 15                	jne    c000b6f0 <datetimeToSeconds(datetime_t)+0xd1>
c000b6db:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b6e1:	99                   	cdq    
c000b6e2:	f7 fd                	idiv   ebp
c000b6e4:	31 c0                	xor    eax,eax
c000b6e6:	85 d2                	test   edx,edx
c000b6e8:	0f 94 c0             	sete   al
c000b6eb:	05 6d 01 00 00       	add    eax,0x16d
c000b6f0:	01 c1                	add    ecx,eax
c000b6f2:	43                   	inc    ebx
c000b6f3:	39 f3                	cmp    ebx,esi
c000b6f5:	7c cc                	jl     c000b6c3 <datetimeToSeconds(datetime_t)+0xa4>
c000b6f7:	eb 3b                	jmp    c000b734 <datetimeToSeconds(datetime_t)+0x115>
c000b6f9:	74 39                	je     c000b734 <datetimeToSeconds(datetime_t)+0x115>
c000b6fb:	b8 45 00 00 00       	mov    eax,0x45
c000b700:	89 c2                	mov    edx,eax
c000b702:	83 e2 03             	and    edx,0x3
c000b705:	39 f0                	cmp    eax,esi
c000b707:	7e 13                	jle    c000b71c <datetimeToSeconds(datetime_t)+0xfd>
c000b709:	85 d2                	test   edx,edx
c000b70b:	0f 94 c2             	sete   dl
c000b70e:	48                   	dec    eax
c000b70f:	0f b6 d2             	movzx  edx,dl
c000b712:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b718:	29 d1                	sub    ecx,edx
c000b71a:	eb e4                	jmp    c000b700 <datetimeToSeconds(datetime_t)+0xe1>
c000b71c:	b8 6d 01 00 00       	mov    eax,0x16d
c000b721:	85 d2                	test   edx,edx
c000b723:	75 0d                	jne    c000b732 <datetimeToSeconds(datetime_t)+0x113>
c000b725:	31 c0                	xor    eax,eax
c000b727:	66 85 db             	test   bx,bx
c000b72a:	0f 95 c0             	setne  al
c000b72d:	05 6d 01 00 00       	add    eax,0x16d
c000b732:	29 c1                	sub    ecx,eax
c000b734:	b8 80 51 01 00       	mov    eax,0x15180
c000b739:	f7 e9                	imul   ecx
c000b73b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b73f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b743:	83 c4 14             	add    esp,0x14
c000b746:	5b                   	pop    ebx
c000b747:	5e                   	pop    esi
c000b748:	5f                   	pop    edi
c000b749:	5d                   	pop    ebp
c000b74a:	c3                   	ret    
c000b74b:	90                   	nop

c000b74c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b74c:	57                   	push   edi
c000b74d:	56                   	push   esi
c000b74e:	53                   	push   ebx
c000b74f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b753:	8b 06                	mov    eax,DWORD PTR [esi]
c000b755:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b758:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b75c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b760:	e8 ba fe ff ff       	call   c000b61f <datetimeToSeconds(datetime_t)>
c000b765:	59                   	pop    ecx
c000b766:	0f b6 0d b8 3f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0023fb8
c000b76d:	5b                   	pop    ebx
c000b76e:	03 0d bc 3f 02 c0    	add    ecx,DWORD PTR ds:0xc0023fbc
c000b774:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b77a:	89 cb                	mov    ebx,ecx
c000b77c:	c1 fb 1f             	sar    ebx,0x1f
c000b77f:	29 c8                	sub    eax,ecx
c000b781:	19 da                	sbb    edx,ebx
c000b783:	31 c9                	xor    ecx,ecx
c000b785:	80 3d b9 3f 02 c0 00 	cmp    BYTE PTR ds:0xc0023fb9,0x0
c000b78c:	74 05                	je     c000b793 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b78e:	b9 08 07 00 00       	mov    ecx,0x708
c000b793:	31 db                	xor    ebx,ebx
c000b795:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b799:	29 c8                	sub    eax,ecx
c000b79b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b79f:	19 da                	sbb    edx,ebx
c000b7a1:	89 f8                	mov    eax,edi
c000b7a3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7a7:	5b                   	pop    ebx
c000b7a8:	5e                   	pop    esi
c000b7a9:	5f                   	pop    edi
c000b7aa:	ff e0                	jmp    eax

c000b7ac <secondsToDatetime(unsigned long long)>:
c000b7ac:	55                   	push   ebp
c000b7ad:	57                   	push   edi
c000b7ae:	56                   	push   esi
c000b7af:	53                   	push   ebx
c000b7b0:	83 ec 1c             	sub    esp,0x1c
c000b7b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b7b7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7bb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b7bf:	6a 00                	push   0x0
c000b7c1:	68 80 51 01 00       	push   0x15180
c000b7c6:	55                   	push   ebp
c000b7c7:	57                   	push   edi
c000b7c8:	e8 e3 22 01 00       	call   c001dab0 <__udivdi3>
c000b7cd:	83 c4 10             	add    esp,0x10
c000b7d0:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b7d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7da:	6a 00                	push   0x0
c000b7dc:	68 80 51 01 00       	push   0x15180
c000b7e1:	55                   	push   ebp
c000b7e2:	57                   	push   edi
c000b7e3:	bf 10 0e 00 00       	mov    edi,0xe10
c000b7e8:	e8 c3 23 01 00       	call   c001dbb0 <__umoddi3>
c000b7ed:	83 c4 10             	add    esp,0x10
c000b7f0:	99                   	cdq    
c000b7f1:	f7 ff                	idiv   edi
c000b7f3:	bf 3c 00 00 00       	mov    edi,0x3c
c000b7f8:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b7fb:	89 d0                	mov    eax,edx
c000b7fd:	99                   	cdq    
c000b7fe:	f7 ff                	idiv   edi
c000b800:	85 db                	test   ebx,ebx
c000b802:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b805:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b808:	79 11                	jns    c000b81b <secondsToDatetime(unsigned long long)+0x6f>
c000b80a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b80e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b814:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b819:	eb 07                	jmp    c000b822 <secondsToDatetime(unsigned long long)+0x76>
c000b81b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b820:	89 d8                	mov    eax,ebx
c000b822:	bf b4 05 00 00       	mov    edi,0x5b4
c000b827:	99                   	cdq    
c000b828:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b82d:	f7 f9                	idiv   ecx
c000b82f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b834:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b838:	31 d2                	xor    edx,edx
c000b83a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b842:	01 c3                	add    ebx,eax
c000b844:	89 d8                	mov    eax,ebx
c000b846:	f7 f1                	div    ecx
c000b848:	31 d2                	xor    edx,edx
c000b84a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b84d:	89 d8                	mov    eax,ebx
c000b84f:	f7 f7                	div    edi
c000b851:	31 d2                	xor    edx,edx
c000b853:	29 c1                	sub    ecx,eax
c000b855:	89 d8                	mov    eax,ebx
c000b857:	f7 f5                	div    ebp
c000b859:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b85e:	29 c1                	sub    ecx,eax
c000b860:	31 d2                	xor    edx,edx
c000b862:	89 c8                	mov    eax,ecx
c000b864:	f7 f5                	div    ebp
c000b866:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b86b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b86f:	31 d2                	xor    edx,edx
c000b871:	89 c8                	mov    eax,ecx
c000b873:	f7 f5                	div    ebp
c000b875:	31 d2                	xor    edx,edx
c000b877:	01 c3                	add    ebx,eax
c000b879:	89 c8                	mov    eax,ecx
c000b87b:	f7 f7                	div    edi
c000b87d:	bf 99 00 00 00       	mov    edi,0x99
c000b882:	29 c3                	sub    ebx,eax
c000b884:	31 d2                	xor    edx,edx
c000b886:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b88e:	29 c3                	sub    ebx,eax
c000b890:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b893:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b896:	bb 05 00 00 00       	mov    ebx,0x5
c000b89b:	83 c1 02             	add    ecx,0x2
c000b89e:	89 c8                	mov    eax,ecx
c000b8a0:	f7 f7                	div    edi
c000b8a2:	31 d2                	xor    edx,edx
c000b8a4:	89 c7                	mov    edi,eax
c000b8a6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b8ac:	83 c0 02             	add    eax,0x2
c000b8af:	f7 f3                	div    ebx
c000b8b1:	89 eb                	mov    ebx,ebp
c000b8b3:	29 c3                	sub    ebx,eax
c000b8b5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b8bb:	88 1e                	mov    BYTE PTR [esi],bl
c000b8bd:	19 c0                	sbb    eax,eax
c000b8bf:	31 d2                	xor    edx,edx
c000b8c1:	83 e0 0c             	and    eax,0xc
c000b8c4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b8c8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b8d0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b8d4:	83 f9 01             	cmp    ecx,0x1
c000b8d7:	0f 96 c2             	setbe  dl
c000b8da:	41                   	inc    ecx
c000b8db:	01 d0                	add    eax,edx
c000b8dd:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b8e0:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b8e4:	83 c4 1c             	add    esp,0x1c
c000b8e7:	89 f0                	mov    eax,esi
c000b8e9:	5b                   	pop    ebx
c000b8ea:	5e                   	pop    esi
c000b8eb:	5f                   	pop    edi
c000b8ec:	5d                   	pop    ebp
c000b8ed:	c2 04 00             	ret    0x4

c000b8f0 <Clock::timeInDatetimeLocal()>:
c000b8f0:	53                   	push   ebx
c000b8f1:	83 ec 14             	sub    esp,0x14
c000b8f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b8f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b8fc:	e8 7d fc ff ff       	call   c000b57e <Clock::timeInSecondsLocal()>
c000b901:	83 c4 0c             	add    esp,0xc
c000b904:	52                   	push   edx
c000b905:	50                   	push   eax
c000b906:	53                   	push   ebx
c000b907:	e8 a0 fe ff ff       	call   c000b7ac <secondsToDatetime(unsigned long long)>
c000b90c:	89 d8                	mov    eax,ebx
c000b90e:	83 c4 14             	add    esp,0x14
c000b911:	5b                   	pop    ebx
c000b912:	c2 04 00             	ret    0x4
c000b915:	90                   	nop

c000b916 <Device::hibernate()>:
c000b916:	c3                   	ret    
c000b917:	90                   	nop

c000b918 <Device::wake()>:
c000b918:	c3                   	ret    
c000b919:	90                   	nop

c000b91a <Device::detect()>:
c000b91a:	c3                   	ret    
c000b91b:	90                   	nop

c000b91c <Device::disableLegacy()>:
c000b91c:	c3                   	ret    
c000b91d:	90                   	nop

c000b91e <Device::powerSaving(PowerSavingLevel)>:
c000b91e:	c3                   	ret    
c000b91f:	90                   	nop

c000b920 <DriverlessDevice::close(int, int, void*)>:
c000b920:	31 c0                	xor    eax,eax
c000b922:	c3                   	ret    
c000b923:	90                   	nop

c000b924 <DriverlessDevice::detect()>:
c000b924:	c3                   	ret    
c000b925:	90                   	nop

c000b926 <DriverlessDevice::open(int, int, void*)>:
c000b926:	83 ec 18             	sub    esp,0x18
c000b929:	68 50 f8 01 c0       	push   0xc001f850
c000b92e:	e8 7c 4a 00 00       	call   c00103af <KePanic(char const*)>
c000b933:	83 c8 ff             	or     eax,0xffffffff
c000b936:	83 c4 1c             	add    esp,0x1c
c000b939:	c3                   	ret    

c000b93a <Device::~Device()>:
c000b93a:	ba b0 f8 01 c0       	mov    edx,0xc001f8b0
c000b93f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b943:	89 10                	mov    DWORD PTR [eax],edx
c000b945:	90                   	nop
c000b946:	c3                   	ret    
c000b947:	90                   	nop

c000b948 <Device::~Device()>:
c000b948:	83 ec 0c             	sub    esp,0xc
c000b94b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b94f:	e8 e6 ff ff ff       	call   c000b93a <Device::~Device()>
c000b954:	83 c4 04             	add    esp,0x4
c000b957:	83 ec 08             	sub    esp,0x8
c000b95a:	68 58 01 00 00       	push   0x158
c000b95f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b963:	e8 9c eb ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000b968:	83 c4 10             	add    esp,0x10
c000b96b:	83 c4 0c             	add    esp,0xc
c000b96e:	c3                   	ret    
c000b96f:	90                   	nop

c000b970 <Device::findAndLoadDriver()>:
c000b970:	c7 44 24 04 6e f8 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f86e
c000b978:	e9 7d ec ff ff       	jmp    c000a5fa <Dbg::kprintf(char const*, ...)>
c000b97d:	90                   	nop

c000b97e <Device::preOpenPCI(PCIDeviceInfo)>:
c000b97e:	57                   	push   edi
c000b97f:	b9 09 00 00 00       	mov    ecx,0x9
c000b984:	56                   	push   esi
c000b985:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b989:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b98d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b997:	81 c7 18 01 00 00    	add    edi,0x118
c000b99d:	fc                   	cld    
c000b99e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b9a0:	5e                   	pop    esi
c000b9a1:	5f                   	pop    edi
c000b9a2:	c3                   	ret    
c000b9a3:	90                   	nop

c000b9a4 <Device::preOpenACPI(void*, char*, char*)>:
c000b9a4:	57                   	push   edi
c000b9a5:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b9aa:	56                   	push   esi
c000b9ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9b3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b9bd:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b9c3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b9c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9cf:	b9 0e 00 00 00       	mov    ecx,0xe
c000b9d4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b9da:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b9de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9e0:	5e                   	pop    esi
c000b9e1:	5f                   	pop    edi
c000b9e2:	c3                   	ret    
c000b9e3:	90                   	nop

c000b9e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b9e4:	53                   	push   ebx
c000b9e5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b9f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9f5:	0f b6 c0             	movzx  eax,al
c000b9f8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b9fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba00:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba04:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba08:	5b                   	pop    ebx
c000ba09:	e9 a6 05 00 00       	jmp    c000bfb4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ba0e <Device::getParent()>:
c000ba0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba12:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ba18:	c3                   	ret    
c000ba19:	90                   	nop

c000ba1a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ba1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba22:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ba27:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba2f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba33:	e9 e8 06 00 00       	jmp    c000c120 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ba38 <Device::addChild(Device*)>:
c000ba38:	53                   	push   ebx
c000ba39:	83 ec 08             	sub    esp,0x8
c000ba3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba44:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ba4a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ba50:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ba52:	85 d2                	test   edx,edx
c000ba54:	74 04                	je     c000ba5a <Device::addChild(Device*)+0x22>
c000ba56:	89 d3                	mov    ebx,edx
c000ba58:	eb f6                	jmp    c000ba50 <Device::addChild(Device*)+0x18>
c000ba5a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ba5d:	83 ec 0c             	sub    esp,0xc
c000ba60:	6a 08                	push   0x8
c000ba62:	e8 fe bd ff ff       	call   c0007865 <malloc>
c000ba67:	89 03                	mov    DWORD PTR [ebx],eax
c000ba69:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba6f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba76:	83 c4 18             	add    esp,0x18
c000ba79:	5b                   	pop    ebx
c000ba7a:	c3                   	ret    
c000ba7b:	90                   	nop

c000ba7c <Device::removeAllChildren()>:
c000ba7c:	56                   	push   esi
c000ba7d:	53                   	push   ebx
c000ba7e:	52                   	push   edx
c000ba7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba83:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ba89:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba8c:	74 17                	je     c000baa5 <Device::removeAllChildren()+0x29>
c000ba8e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ba91:	85 c0                	test   eax,eax
c000ba93:	74 0c                	je     c000baa1 <Device::removeAllChildren()+0x25>
c000ba95:	83 ec 0c             	sub    esp,0xc
c000ba98:	8b 10                	mov    edx,DWORD PTR [eax]
c000ba9a:	50                   	push   eax
c000ba9b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ba9e:	83 c4 10             	add    esp,0x10
c000baa1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baa3:	eb e4                	jmp    c000ba89 <Device::removeAllChildren()+0xd>
c000baa5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000baab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bab1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bab7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000babe:	58                   	pop    eax
c000babf:	5b                   	pop    ebx
c000bac0:	5e                   	pop    esi
c000bac1:	c3                   	ret    

c000bac2 <Device::hibernateAll()>:
c000bac2:	53                   	push   ebx
c000bac3:	83 ec 14             	sub    esp,0x14
c000bac6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000baca:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bacc:	53                   	push   ebx
c000bacd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bad0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bad6:	83 c4 10             	add    esp,0x10
c000bad9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000badc:	74 0f                	je     c000baed <Device::hibernateAll()+0x2b>
c000bade:	83 ec 0c             	sub    esp,0xc
c000bae1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bae4:	e8 d9 ff ff ff       	call   c000bac2 <Device::hibernateAll()>
c000bae9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baeb:	eb e9                	jmp    c000bad6 <Device::hibernateAll()+0x14>
c000baed:	83 c4 08             	add    esp,0x8
c000baf0:	5b                   	pop    ebx
c000baf1:	c3                   	ret    

c000baf2 <Device::wakeAll()>:
c000baf2:	53                   	push   ebx
c000baf3:	83 ec 14             	sub    esp,0x14
c000baf6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bafa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bafc:	53                   	push   ebx
c000bafd:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bb00:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb06:	83 c4 10             	add    esp,0x10
c000bb09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb0c:	74 0f                	je     c000bb1d <Device::wakeAll()+0x2b>
c000bb0e:	83 ec 0c             	sub    esp,0xc
c000bb11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb14:	e8 d9 ff ff ff       	call   c000baf2 <Device::wakeAll()>
c000bb19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb1b:	eb e9                	jmp    c000bb06 <Device::wakeAll()+0x14>
c000bb1d:	83 c4 08             	add    esp,0x8
c000bb20:	5b                   	pop    ebx
c000bb21:	c3                   	ret    

c000bb22 <Device::detectAll()>:
c000bb22:	53                   	push   ebx
c000bb23:	83 ec 14             	sub    esp,0x14
c000bb26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb2c:	53                   	push   ebx
c000bb2d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bb30:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb36:	83 c4 10             	add    esp,0x10
c000bb39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb3c:	74 0f                	je     c000bb4d <Device::detectAll()+0x2b>
c000bb3e:	83 ec 0c             	sub    esp,0xc
c000bb41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb44:	e8 d9 ff ff ff       	call   c000bb22 <Device::detectAll()>
c000bb49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb4b:	eb e9                	jmp    c000bb36 <Device::detectAll()+0x14>
c000bb4d:	83 c4 08             	add    esp,0x8
c000bb50:	5b                   	pop    ebx
c000bb51:	c3                   	ret    

c000bb52 <Device::disableLegacyAll()>:
c000bb52:	c3                   	ret    
c000bb53:	90                   	nop

c000bb54 <Device::loadDriversForAll()>:
c000bb54:	c3                   	ret    
c000bb55:	90                   	nop

c000bb56 <Device::closeAll()>:
c000bb56:	53                   	push   ebx
c000bb57:	83 ec 08             	sub    esp,0x8
c000bb5a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb60:	6a 00                	push   0x0
c000bb62:	6a 00                	push   0x0
c000bb64:	6a 00                	push   0x0
c000bb66:	53                   	push   ebx
c000bb67:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb6a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb76:	74 0f                	je     c000bb87 <Device::closeAll()+0x31>
c000bb78:	83 ec 0c             	sub    esp,0xc
c000bb7b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb7e:	e8 d3 ff ff ff       	call   c000bb56 <Device::closeAll()>
c000bb83:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb85:	eb e9                	jmp    c000bb70 <Device::closeAll()+0x1a>
c000bb87:	83 c4 08             	add    esp,0x8
c000bb8a:	5b                   	pop    ebx
c000bb8b:	c3                   	ret    

c000bb8c <Device::powerSavingAll(PowerSavingLevel)>:
c000bb8c:	56                   	push   esi
c000bb8d:	53                   	push   ebx
c000bb8e:	83 ec 0c             	sub    esp,0xc
c000bb91:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bb95:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bb99:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb9b:	56                   	push   esi
c000bb9c:	53                   	push   ebx
c000bb9d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bba0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bba6:	83 c4 10             	add    esp,0x10
c000bba9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbac:	74 0f                	je     c000bbbd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bbae:	52                   	push   edx
c000bbaf:	52                   	push   edx
c000bbb0:	56                   	push   esi
c000bbb1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbb4:	e8 d3 ff ff ff       	call   c000bb8c <Device::powerSavingAll(PowerSavingLevel)>
c000bbb9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbbb:	eb e9                	jmp    c000bba6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bbbd:	58                   	pop    eax
c000bbbe:	5b                   	pop    ebx
c000bbbf:	5e                   	pop    esi
c000bbc0:	c3                   	ret    
c000bbc1:	90                   	nop

c000bbc2 <Device::setName(char const*)>:
c000bbc2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bbca:	e9 21 4a ff ff       	jmp    c00005f0 <strcpy>
c000bbcf:	90                   	nop

c000bbd0 <Device::Device(char const*)>:
c000bbd0:	83 ec 1c             	sub    esp,0x1c
c000bbd3:	ba b0 f8 01 c0       	mov    edx,0xc001f8b0
c000bbd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbdc:	89 10                	mov    DWORD PTR [eax],edx
c000bbde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbe2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bbec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbf0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bbfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbfe:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc0c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc16:	83 ec 08             	sub    esp,0x8
c000bc19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc21:	e8 9c ff ff ff       	call   c000bbc2 <Device::setName(char const*)>
c000bc26:	83 c4 10             	add    esp,0x10
c000bc29:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bc31:	83 ec 0c             	sub    esp,0xc
c000bc34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc38:	e8 28 bc ff ff       	call   c0007865 <malloc>
c000bc3d:	83 c4 10             	add    esp,0x10
c000bc40:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc4d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc51:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bc57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc5b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc61:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc6b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc7c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bc83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc87:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bc8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc92:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bca0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bcaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcae:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bcb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcbc:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000bcc6:	90                   	nop
c000bcc7:	83 c4 1c             	add    esp,0x1c
c000bcca:	c3                   	ret    
c000bccb:	90                   	nop

c000bccc <Device::getName()>:
c000bccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcd0:	05 d0 00 00 00       	add    eax,0xd0
c000bcd5:	c3                   	ret    

c000bcd6 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bcd6:	83 ec 0c             	sub    esp,0xc
c000bcd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcdd:	83 ec 08             	sub    esp,0x8
c000bce0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce4:	50                   	push   eax
c000bce5:	e8 e6 fe ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	ba dc f8 01 c0       	mov    edx,0xc001f8dc
c000bcf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf6:	89 10                	mov    DWORD PTR [eax],edx
c000bcf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcfc:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bd06:	90                   	nop
c000bd07:	83 c4 0c             	add    esp,0xc
c000bd0a:	c3                   	ret    
c000bd0b:	90                   	nop

c000bd0c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bd0c:	57                   	push   edi
c000bd0d:	56                   	push   esi
c000bd0e:	53                   	push   ebx
c000bd0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd13:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd17:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd1b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bd21:	75 0c                	jne    c000bd2f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bd23:	52                   	push   edx
c000bd24:	52                   	push   edx
c000bd25:	53                   	push   ebx
c000bd26:	56                   	push   esi
c000bd27:	e8 36 22 01 00       	call   c001df62 <LinkedList<Device>::addElement(Device*)>
c000bd2c:	83 c4 10             	add    esp,0x10
c000bd2f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bd35:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bd38:	74 12                	je     c000bd4c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bd3a:	50                   	push   eax
c000bd3b:	57                   	push   edi
c000bd3c:	56                   	push   esi
c000bd3d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bd40:	e8 c7 ff ff ff       	call   c000bd0c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd45:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bd47:	83 c4 10             	add    esp,0x10
c000bd4a:	eb e9                	jmp    c000bd35 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bd4c:	5b                   	pop    ebx
c000bd4d:	5e                   	pop    esi
c000bd4e:	5f                   	pop    edi
c000bd4f:	c3                   	ret    

c000bd50 <getDevicesOfType(DeviceType)>:
c000bd50:	53                   	push   ebx
c000bd51:	83 ec 14             	sub    esp,0x14
c000bd54:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd58:	53                   	push   ebx
c000bd59:	e8 e0 22 01 00       	call   c001e03e <LinkedList<Device>::LinkedList()>
c000bd5e:	83 c4 0c             	add    esp,0xc
c000bd61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd65:	53                   	push   ebx
c000bd66:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000bd6c:	e8 9b ff ff ff       	call   c000bd0c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd71:	89 d8                	mov    eax,ebx
c000bd73:	83 c4 18             	add    esp,0x18
c000bd76:	5b                   	pop    ebx
c000bd77:	c2 04 00             	ret    0x4
c000bd7a:	66 90                	xchg   ax,ax

c000bd7c <HardDiskController::HardDiskController(char const*)>:
c000bd7c:	83 ec 0c             	sub    esp,0xc
c000bd7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd83:	83 ec 08             	sub    esp,0x8
c000bd86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd8a:	50                   	push   eax
c000bd8b:	e8 40 fe ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000bd90:	83 c4 10             	add    esp,0x10
c000bd93:	ba 08 f9 01 c0       	mov    edx,0xc001f908
c000bd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd9c:	89 10                	mov    DWORD PTR [eax],edx
c000bd9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bda2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bdac:	90                   	nop
c000bdad:	83 c4 0c             	add    esp,0xc
c000bdb0:	c3                   	ret    
c000bdb1:	90                   	nop
c000bdb2:	66 90                	xchg   ax,ax

c000bdb4 <HardDiskController::~HardDiskController()>:
c000bdb4:	83 ec 0c             	sub    esp,0xc
c000bdb7:	ba 08 f9 01 c0       	mov    edx,0xc001f908
c000bdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdc0:	89 10                	mov    DWORD PTR [eax],edx
c000bdc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdc6:	83 ec 0c             	sub    esp,0xc
c000bdc9:	50                   	push   eax
c000bdca:	e8 6b fb ff ff       	call   c000b93a <Device::~Device()>
c000bdcf:	83 c4 10             	add    esp,0x10
c000bdd2:	90                   	nop
c000bdd3:	83 c4 0c             	add    esp,0xc
c000bdd6:	c3                   	ret    
c000bdd7:	90                   	nop

c000bdd8 <HardDiskController::~HardDiskController()>:
c000bdd8:	83 ec 0c             	sub    esp,0xc
c000bddb:	83 ec 0c             	sub    esp,0xc
c000bdde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bde2:	e8 cd ff ff ff       	call   c000bdb4 <HardDiskController::~HardDiskController()>
c000bde7:	83 c4 10             	add    esp,0x10
c000bdea:	83 ec 08             	sub    esp,0x8
c000bded:	68 58 01 00 00       	push   0x158
c000bdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdf6:	e8 09 e7 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000bdfb:	83 c4 10             	add    esp,0x10
c000bdfe:	83 c4 0c             	add    esp,0xc
c000be01:	c3                   	ret    

c000be02 <PhysicalDisk::eject()>:
c000be02:	83 c8 ff             	or     eax,0xffffffff
c000be05:	c3                   	ret    

c000be06 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000be06:	83 ec 0c             	sub    esp,0xc
c000be09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be0d:	83 ec 08             	sub    esp,0x8
c000be10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be14:	50                   	push   eax
c000be15:	e8 b6 fd ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000be1a:	83 c4 10             	add    esp,0x10
c000be1d:	ba 34 f9 01 c0       	mov    edx,0xc001f934
c000be22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be26:	89 10                	mov    DWORD PTR [eax],edx
c000be28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be2c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be37:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000be3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be42:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000be4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be54:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000be5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be5e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000be68:	90                   	nop
c000be69:	83 c4 0c             	add    esp,0xc
c000be6c:	c3                   	ret    
c000be6d:	90                   	nop

c000be6e <PhysicalDisk::startCache()>:
c000be6e:	56                   	push   esi
c000be6f:	53                   	push   ebx
c000be70:	83 ec 10             	sub    esp,0x10
c000be73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be77:	6a 44                	push   0x44
c000be79:	e8 e7 b9 ff ff       	call   c0007865 <malloc>
c000be7e:	89 c6                	mov    esi,eax
c000be80:	58                   	pop    eax
c000be81:	5a                   	pop    edx
c000be82:	53                   	push   ebx
c000be83:	56                   	push   esi
c000be84:	e8 9b 16 00 00       	call   c000d524 <VCache::VCache(PhysicalDisk*)>
c000be89:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000be8f:	83 c4 14             	add    esp,0x14
c000be92:	5b                   	pop    ebx
c000be93:	5e                   	pop    esi
c000be94:	c3                   	ret    
c000be95:	90                   	nop

c000be96 <PhysicalDisk::~PhysicalDisk()>:
c000be96:	83 ec 0c             	sub    esp,0xc
c000be99:	ba 34 f9 01 c0       	mov    edx,0xc001f934
c000be9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bea2:	89 10                	mov    DWORD PTR [eax],edx
c000bea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bea8:	83 ec 0c             	sub    esp,0xc
c000beab:	50                   	push   eax
c000beac:	e8 89 fa ff ff       	call   c000b93a <Device::~Device()>
c000beb1:	83 c4 10             	add    esp,0x10
c000beb4:	90                   	nop
c000beb5:	83 c4 0c             	add    esp,0xc
c000beb8:	c3                   	ret    
c000beb9:	90                   	nop

c000beba <PhysicalDisk::~PhysicalDisk()>:
c000beba:	83 ec 0c             	sub    esp,0xc
c000bebd:	83 ec 0c             	sub    esp,0xc
c000bec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bec4:	e8 cd ff ff ff       	call   c000be96 <PhysicalDisk::~PhysicalDisk()>
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	83 ec 08             	sub    esp,0x8
c000becf:	68 6c 01 00 00       	push   0x16c
c000bed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed8:	e8 27 e6 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000bedd:	83 c4 10             	add    esp,0x10
c000bee0:	83 c4 0c             	add    esp,0xc
c000bee3:	c3                   	ret    

c000bee4 <int_handler>:
c000bee4:	55                   	push   ebp
c000bee5:	57                   	push   edi
c000bee6:	56                   	push   esi
c000bee7:	53                   	push   ebx
c000bee8:	83 ec 0c             	sub    esp,0xc
c000beeb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000beef:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bef6:	74 0b                	je     c000bf03 <int_handler+0x1f>
c000bef8:	fa                   	cli    
c000bef9:	f4                   	hlt    
c000befa:	80 3d 38 69 02 c0 00 	cmp    BYTE PTR ds:0xc0026938,0x0
c000bf01:	75 f5                	jne    c000bef8 <int_handler+0x14>
c000bf03:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bf06:	8d 46 e0             	lea    eax,[esi-0x20]
c000bf09:	83 f8 17             	cmp    eax,0x17
c000bf0c:	76 3e                	jbe    c000bf4c <int_handler+0x68>
c000bf0e:	c1 e6 04             	shl    esi,0x4
c000bf11:	31 db                	xor    ebx,ebx
c000bf13:	8d ae c0 4f 02 c0    	lea    ebp,[esi-0x3ffdb040]
c000bf19:	81 c6 c0 3f 02 c0    	add    esi,0xc0023fc0
c000bf1f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bf23:	85 c0                	test   eax,eax
c000bf25:	74 13                	je     c000bf3a <int_handler+0x56>
c000bf27:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bf2a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bf2e:	74 2a                	je     c000bf5a <int_handler+0x76>
c000bf30:	83 ec 08             	sub    esp,0x8
c000bf33:	52                   	push   edx
c000bf34:	57                   	push   edi
c000bf35:	ff d0                	call   eax
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	43                   	inc    ebx
c000bf3b:	83 fb 04             	cmp    ebx,0x4
c000bf3e:	75 df                	jne    c000bf1f <int_handler+0x3b>
c000bf40:	83 c4 0c             	add    esp,0xc
c000bf43:	31 c0                	xor    eax,eax
c000bf45:	5b                   	pop    ebx
c000bf46:	31 d2                	xor    edx,edx
c000bf48:	5e                   	pop    esi
c000bf49:	5f                   	pop    edi
c000bf4a:	5d                   	pop    ebp
c000bf4b:	c3                   	ret    
c000bf4c:	83 ec 0c             	sub    esp,0xc
c000bf4f:	50                   	push   eax
c000bf50:	e8 81 a9 00 00       	call   c00168d6 <HalEndOfInterrupt(int)>
c000bf55:	83 c4 10             	add    esp,0x10
c000bf58:	eb b4                	jmp    c000bf0e <int_handler+0x2a>
c000bf5a:	83 ec 08             	sub    esp,0x8
c000bf5d:	52                   	push   edx
c000bf5e:	57                   	push   edi
c000bf5f:	ff d0                	call   eax
c000bf61:	83 c4 10             	add    esp,0x10
c000bf64:	83 c4 0c             	add    esp,0xc
c000bf67:	5b                   	pop    ebx
c000bf68:	5e                   	pop    esi
c000bf69:	5f                   	pop    edi
c000bf6a:	5d                   	pop    ebp
c000bf6b:	c3                   	ret    

c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bf6c:	56                   	push   esi
c000bf6d:	31 c0                	xor    eax,eax
c000bf6f:	53                   	push   ebx
c000bf70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bf74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf78:	89 ca                	mov    edx,ecx
c000bf7a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf7e:	c1 e2 04             	shl    edx,0x4
c000bf81:	83 bc 82 c0 4f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdb040],0x0
c000bf89:	74 15                	je     c000bfa0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bf8b:	40                   	inc    eax
c000bf8c:	83 f8 04             	cmp    eax,0x4
c000bf8f:	75 f0                	jne    c000bf81 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bf91:	c7 44 24 0c 64 f9 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f964
c000bf99:	5b                   	pop    ebx
c000bf9a:	5e                   	pop    esi
c000bf9b:	e9 0f 44 00 00       	jmp    c00103af <KePanic(char const*)>
c000bfa0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bfa3:	89 1c 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],ebx
c000bfaa:	89 34 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],esi
c000bfb1:	5b                   	pop    ebx
c000bfb2:	5e                   	pop    esi
c000bfb3:	c3                   	ret    

c000bfb4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfb4:	57                   	push   edi
c000bfb5:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000bfbb:	56                   	push   esi
c000bfbc:	53                   	push   ebx
c000bfbd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bfc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bfc5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bfcc:	74 5b                	je     c000c029 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfce:	89 c7                	mov    edi,eax
c000bfd0:	84 c0                	test   al,al
c000bfd2:	74 24                	je     c000bff8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfd4:	83 fe 0f             	cmp    esi,0xf
c000bfd7:	0f 8f d9 00 00 00    	jg     c000c0b6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bfdd:	8a 86 c0 12 02 c0    	mov    al,BYTE PTR [esi-0x3ffded40]
c000bfe3:	25 ff 00 00 00       	and    eax,0xff
c000bfe8:	66 8b bc 00 60 67 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffd98a0]
c000bff0:	89 c6                	mov    esi,eax
c000bff2:	66 d1 ef             	shr    di,1
c000bff5:	83 e7 01             	and    edi,0x1
c000bff8:	83 ec 08             	sub    esp,0x8
c000bffb:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c000:	31 db                	xor    ebx,ebx
c000c002:	50                   	push   eax
c000c003:	68 71 f9 01 c0       	push   0xc001f971
c000c008:	e8 ed e5 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000c00d:	83 c4 10             	add    esp,0x10
c000c010:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c000c015:	85 c0                	test   eax,eax
c000c017:	7f 51                	jg     c000c06a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c019:	83 ec 0c             	sub    esp,0xc
c000c01c:	68 88 f9 01 c0       	push   0xc001f988
c000c021:	e8 89 43 00 00       	call   c00103af <KePanic(char const*)>
c000c026:	83 c4 10             	add    esp,0x10
c000c029:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c02c:	31 d2                	xor    edx,edx
c000c02e:	89 c8                	mov    eax,ecx
c000c030:	c1 e0 04             	shl    eax,0x4
c000c033:	8b 9c 90 c0 4f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdb040]
c000c03a:	85 db                	test   ebx,ebx
c000c03c:	0f 84 8b 00 00 00    	je     c000c0cd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c042:	42                   	inc    edx
c000c043:	83 fa 04             	cmp    edx,0x4
c000c046:	75 eb                	jne    c000c033 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c048:	83 ec 0c             	sub    esp,0xc
c000c04b:	68 dc f9 01 c0       	push   0xc001f9dc
c000c050:	e8 5a 43 00 00       	call   c00103af <KePanic(char const*)>
c000c055:	83 c4 10             	add    esp,0x10
c000c058:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c05d:	5b                   	pop    ebx
c000c05e:	5e                   	pop    esi
c000c05f:	5f                   	pop    edi
c000c060:	c3                   	ret    
c000c061:	43                   	inc    ebx
c000c062:	39 1d 60 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b60,ebx
c000c068:	7e af                	jle    c000c019 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c06a:	83 ec 08             	sub    esp,0x8
c000c06d:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c074:	56                   	push   esi
c000c075:	50                   	push   eax
c000c076:	e8 05 0e 01 00       	call   c001ce80 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c07b:	83 c4 10             	add    esp,0x10
c000c07e:	84 c0                	test   al,al
c000c080:	74 df                	je     c000c061 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c082:	81 e7 ff 00 00 00    	and    edi,0xff
c000c088:	50                   	push   eax
c000c089:	8d 46 20             	lea    eax,[esi+0x20]
c000c08c:	57                   	push   edi
c000c08d:	25 ff 00 00 00       	and    eax,0xff
c000c092:	6a 00                	push   0x0
c000c094:	50                   	push   eax
c000c095:	89 f0                	mov    eax,esi
c000c097:	6a 00                	push   0x0
c000c099:	25 ff 00 00 00       	and    eax,0xff
c000c09e:	6a 00                	push   0x0
c000c0a0:	50                   	push   eax
c000c0a1:	8b 04 9d 80 7b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8480]
c000c0a8:	50                   	push   eax
c000c0a9:	e8 4c 0f 01 00       	call   c001cffa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c0ae:	83 c4 20             	add    esp,0x20
c000c0b1:	e9 73 ff ff ff       	jmp    c000c029 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c0b6:	83 ec 0c             	sub    esp,0xc
c000c0b9:	31 ff                	xor    edi,edi
c000c0bb:	68 a4 f9 01 c0       	push   0xc001f9a4
c000c0c0:	e8 ea 42 00 00       	call   c00103af <KePanic(char const*)>
c000c0c5:	83 c4 10             	add    esp,0x10
c000c0c8:	e9 2b ff ff ff       	jmp    c000bff8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c0cd:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c0d0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c0d4:	89 14 85 c0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb040],edx
c000c0db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0df:	5b                   	pop    ebx
c000c0e0:	89 14 85 c0 3f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc040],edx
c000c0e7:	89 f0                	mov    eax,esi
c000c0e9:	5e                   	pop    esi
c000c0ea:	5f                   	pop    edi
c000c0eb:	c3                   	ret    

c000c0ec <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c0ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0f0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0f4:	c1 e0 04             	shl    eax,0x4
c000c0f7:	8d 50 10             	lea    edx,[eax+0x10]
c000c0fa:	39 88 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ecx
c000c100:	74 08                	je     c000c10a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c102:	83 c0 04             	add    eax,0x4
c000c105:	39 d0                	cmp    eax,edx
c000c107:	75 f1                	jne    c000c0fa <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c109:	c3                   	ret    
c000c10a:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c114:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c11e:	eb e2                	jmp    c000c102 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c120 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c120:	53                   	push   ebx
c000c121:	83 ec 08             	sub    esp,0x8
c000c124:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c128:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c12d:	74 0e                	je     c000c13d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c12f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000c134:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c13b:	75 37                	jne    c000c174 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c13d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c141:	83 c0 20             	add    eax,0x20
c000c144:	c1 e0 04             	shl    eax,0x4
c000c147:	8d 50 10             	lea    edx,[eax+0x10]
c000c14a:	39 98 c0 4f 02 c0    	cmp    DWORD PTR [eax-0x3ffdb040],ebx
c000c150:	74 0c                	je     c000c15e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c152:	83 c0 04             	add    eax,0x4
c000c155:	39 d0                	cmp    eax,edx
c000c157:	75 f1                	jne    c000c14a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c159:	83 c4 08             	add    esp,0x8
c000c15c:	5b                   	pop    ebx
c000c15d:	c3                   	ret    
c000c15e:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c168:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c172:	eb de                	jmp    c000c152 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c174:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c179:	7f 12                	jg     c000c18d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c17b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c17f:	31 c0                	xor    eax,eax
c000c181:	8a 81 c0 12 02 c0    	mov    al,BYTE PTR [ecx-0x3ffded40]
c000c187:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c18b:	eb b0                	jmp    c000c13d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c18d:	83 ec 0c             	sub    esp,0xc
c000c190:	68 95 f9 01 c0       	push   0xc001f995
c000c195:	e8 15 42 00 00       	call   c00103af <KePanic(char const*)>
c000c19a:	83 c4 10             	add    esp,0x10
c000c19d:	eb 9e                	jmp    c000c13d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c19f <setupINTS()>:
c000c19f:	31 c0                	xor    eax,eax
c000c1a1:	c7 80 c0 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb040],0x0
c000c1ab:	c7 80 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc040],0x0
c000c1b5:	c7 80 c4 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb03c],0x0
c000c1bf:	c7 80 c4 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc03c],0x0
c000c1c9:	c7 80 c8 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb038],0x0
c000c1d3:	c7 80 c8 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc038],0x0
c000c1dd:	c7 80 cc 4f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdb034],0x0
c000c1e7:	c7 80 cc 3f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdc034],0x0
c000c1f1:	83 c0 10             	add    eax,0x10
c000c1f4:	3d 00 10 00 00       	cmp    eax,0x1000
c000c1f9:	75 a6                	jne    c000c1a1 <setupINTS()+0x2>
c000c1fb:	c3                   	ret    

c000c1fc <convertLegacyIRQNumber(int)>:
c000c1fc:	83 ec 0c             	sub    esp,0xc
c000c1ff:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000c205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c209:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c210:	74 0f                	je     c000c221 <convertLegacyIRQNumber(int)+0x25>
c000c212:	83 f8 0f             	cmp    eax,0xf
c000c215:	7f 0e                	jg     c000c225 <convertLegacyIRQNumber(int)+0x29>
c000c217:	31 c9                	xor    ecx,ecx
c000c219:	8a 88 c0 12 02 c0    	mov    cl,BYTE PTR [eax-0x3ffded40]
c000c21f:	89 c8                	mov    eax,ecx
c000c221:	83 c4 0c             	add    esp,0xc
c000c224:	c3                   	ret    
c000c225:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c229:	83 ec 0c             	sub    esp,0xc
c000c22c:	68 a4 f9 01 c0       	push   0xc001f9a4
c000c231:	e8 79 41 00 00       	call   c00103af <KePanic(char const*)>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23d:	83 c4 0c             	add    esp,0xc
c000c240:	c3                   	ret    
c000c241:	90                   	nop

c000c242 <startGUI(void*)>:
c000c242:	55                   	push   ebp
c000c243:	89 e5                	mov    ebp,esp
c000c245:	53                   	push   ebx
c000c246:	83 ec 04             	sub    esp,0x4
c000c249:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c24e:	48                   	dec    eax
c000c24f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c254:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c259:	85 c0                	test   eax,eax
c000c25b:	75 01                	jne    c000c25e <startGUI(void*)+0x1c>
c000c25d:	fb                   	sti    
c000c25e:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c264:	83 ec 08             	sub    esp,0x8
c000c267:	6a 01                	push   0x1
c000c269:	68 01 fa 01 c0       	push   0xc001fa01
c000c26e:	e8 e7 7a 00 00       	call   c0013d5a <Thr::loadDLL(char const*, bool)>
c000c273:	83 c4 10             	add    esp,0x10
c000c276:	83 ec 08             	sub    esp,0x8
c000c279:	53                   	push   ebx
c000c27a:	50                   	push   eax
c000c27b:	e8 0b 7d 00 00       	call   c0013f8b <Thr::executeDLL(unsigned long, void*)>
c000c280:	83 c4 10             	add    esp,0x10
c000c283:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c289:	83 ec 08             	sub    esp,0x8
c000c28c:	6a 01                	push   0x1
c000c28e:	68 1b fa 01 c0       	push   0xc001fa1b
c000c293:	e8 c2 7a 00 00       	call   c0013d5a <Thr::loadDLL(char const*, bool)>
c000c298:	83 c4 10             	add    esp,0x10
c000c29b:	83 ec 08             	sub    esp,0x8
c000c29e:	53                   	push   ebx
c000c29f:	50                   	push   eax
c000c2a0:	e8 e6 7c 00 00       	call   c0013f8b <Thr::executeDLL(unsigned long, void*)>
c000c2a5:	83 c4 10             	add    esp,0x10
c000c2a8:	90                   	nop
c000c2a9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2ac:	c9                   	leave  
c000c2ad:	c3                   	ret    

c000c2ae <startGUIVESA(void*)>:
c000c2ae:	55                   	push   ebp
c000c2af:	89 e5                	mov    ebp,esp
c000c2b1:	53                   	push   ebx
c000c2b2:	83 ec 04             	sub    esp,0x4
c000c2b5:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2ba:	48                   	dec    eax
c000c2bb:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c2c0:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c2c5:	85 c0                	test   eax,eax
c000c2c7:	75 01                	jne    c000c2ca <startGUIVESA(void*)+0x1c>
c000c2c9:	fb                   	sti    
c000c2ca:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c2d0:	83 ec 08             	sub    esp,0x8
c000c2d3:	6a 01                	push   0x1
c000c2d5:	68 39 fa 01 c0       	push   0xc001fa39
c000c2da:	e8 7b 7a 00 00       	call   c0013d5a <Thr::loadDLL(char const*, bool)>
c000c2df:	83 c4 10             	add    esp,0x10
c000c2e2:	83 ec 08             	sub    esp,0x8
c000c2e5:	53                   	push   ebx
c000c2e6:	50                   	push   eax
c000c2e7:	e8 9f 7c 00 00       	call   c0013f8b <Thr::executeDLL(unsigned long, void*)>
c000c2ec:	83 c4 10             	add    esp,0x10
c000c2ef:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000c2f5:	83 ec 08             	sub    esp,0x8
c000c2f8:	6a 01                	push   0x1
c000c2fa:	68 1b fa 01 c0       	push   0xc001fa1b
c000c2ff:	e8 56 7a 00 00       	call   c0013d5a <Thr::loadDLL(char const*, bool)>
c000c304:	83 c4 10             	add    esp,0x10
c000c307:	83 ec 08             	sub    esp,0x8
c000c30a:	53                   	push   ebx
c000c30b:	50                   	push   eax
c000c30c:	e8 7a 7c 00 00       	call   c0013f8b <Thr::executeDLL(unsigned long, void*)>
c000c311:	83 c4 10             	add    esp,0x10
c000c314:	90                   	nop
c000c315:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c318:	c9                   	leave  
c000c319:	c3                   	ret    

c000c31a <sendKeyToTerminal(unsigned char)>:
c000c31a:	55                   	push   ebp
c000c31b:	89 e5                	mov    ebp,esp
c000c31d:	83 ec 28             	sub    esp,0x28
c000c320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c323:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c326:	8b 15 04 3f 02 c0    	mov    edx,DWORD PTR ds:0xc0023f04
c000c32c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c32f:	25 ff 00 00 00       	and    eax,0xff
c000c334:	83 ec 08             	sub    esp,0x8
c000c337:	50                   	push   eax
c000c338:	52                   	push   edx
c000c339:	e8 b2 c7 ff ff       	call   c0008af0 <VgaText::receiveKey(unsigned char)>
c000c33e:	83 c4 10             	add    esp,0x10
c000c341:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c345:	74 0a                	je     c000c351 <sendKeyToTerminal(unsigned char)+0x37>
c000c347:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c34b:	0f 85 8f 00 00 00    	jne    c000c3e0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c351:	fa                   	cli    
c000c352:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c357:	40                   	inc    eax
c000c358:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c35d:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c362:	40                   	inc    eax
c000c363:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c368:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000c36d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c370:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000c37a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c37e:	74 1f                	je     c000c39f <sendKeyToTerminal(unsigned char)+0x85>
c000c380:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c383:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c386:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c389:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c38c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c38f:	83 ec 0c             	sub    esp,0xc
c000c392:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c395:	e8 d6 88 00 00       	call   c0014c70 <unblockTask(ThreadControlBlock*)>
c000c39a:	83 c4 10             	add    esp,0x10
c000c39d:	eb db                	jmp    c000c37a <sendKeyToTerminal(unsigned char)+0x60>
c000c39f:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3a4:	48                   	dec    eax
c000c3a5:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000c3aa:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000c3af:	85 c0                	test   eax,eax
c000c3b1:	75 18                	jne    c000c3cb <sendKeyToTerminal(unsigned char)+0xb1>
c000c3b3:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c000c3b8:	85 c0                	test   eax,eax
c000c3ba:	74 0f                	je     c000c3cb <sendKeyToTerminal(unsigned char)+0xb1>
c000c3bc:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000c3c6:	e8 e1 83 00 00       	call   c00147ac <schedule()>
c000c3cb:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3d0:	48                   	dec    eax
c000c3d1:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c3d6:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c3db:	85 c0                	test   eax,eax
c000c3dd:	75 01                	jne    c000c3e0 <sendKeyToTerminal(unsigned char)+0xc6>
c000c3df:	fb                   	sti    
c000c3e0:	90                   	nop
c000c3e1:	c9                   	leave  
c000c3e2:	c3                   	ret    

c000c3e3 <sendKeyboardToken(KeyboardToken)>:
c000c3e3:	55                   	push   ebp
c000c3e4:	89 e5                	mov    ebp,esp
c000c3e6:	83 ec 18             	sub    esp,0x18
c000c3e9:	e8 11 40 00 00       	call   c00103ff <Krnl::userIOReceived()>
c000c3ee:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c3f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f4:	25 ff ff 00 00       	and    eax,0xffff
c000c3f9:	83 f2 01             	xor    edx,0x1
c000c3fc:	88 90 e0 5f 02 c0    	mov    BYTE PTR [eax-0x3ffda020],dl
c000c402:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c407:	85 c0                	test   eax,eax
c000c409:	74 24                	je     c000c42f <sendKeyboardToken(KeyboardToken)+0x4c>
c000c40b:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c411:	83 ec 04             	sub    esp,0x4
c000c414:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c419:	83 ec 08             	sub    esp,0x8
c000c41c:	89 e2                	mov    edx,esp
c000c41e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c421:	89 02                	mov    DWORD PTR [edx],eax
c000c423:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c426:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c42a:	ff d1                	call   ecx
c000c42c:	83 c4 10             	add    esp,0x10
c000c42f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c433:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c436:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c43b:	38 c2                	cmp    dl,al
c000c43d:	74 1e                	je     c000c45d <sendKeyboardToken(KeyboardToken)+0x7a>
c000c43f:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c442:	a2 e8 63 02 c0       	mov    ds:0xc00263e8,al
c000c447:	a0 e8 63 02 c0       	mov    al,ds:0xc00263e8
c000c44c:	25 ff 00 00 00       	and    eax,0xff
c000c451:	83 ec 0c             	sub    esp,0xc
c000c454:	50                   	push   eax
c000c455:	e8 ea bd ff ff       	call   c0008244 <setTerminalScrollLock(bool)>
c000c45a:	83 c4 10             	add    esp,0x10
c000c45d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c460:	84 c0                	test   al,al
c000c462:	0f 84 ae 00 00 00    	je     c000c516 <sendKeyboardToken(KeyboardToken)+0x133>
c000c468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c46b:	66 3d 18 03          	cmp    ax,0x318
c000c46f:	75 06                	jne    c000c477 <sendKeyboardToken(KeyboardToken)+0x94>
c000c471:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c47a:	66 3d 19 03          	cmp    ax,0x319
c000c47e:	75 06                	jne    c000c486 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c480:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c489:	66 3d 1a 03          	cmp    ax,0x31a
c000c48d:	75 06                	jne    c000c495 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c48f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c498:	66 3d 1b 03          	cmp    ax,0x31b
c000c49c:	75 06                	jne    c000c4a4 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c49e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c4a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a7:	66 3d 1c 03          	cmp    ax,0x31c
c000c4ab:	75 06                	jne    c000c4b3 <sendKeyboardToken(KeyboardToken)+0xd0>
c000c4ad:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c4b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b6:	66 3d 1d 03          	cmp    ax,0x31d
c000c4ba:	75 06                	jne    c000c4c2 <sendKeyboardToken(KeyboardToken)+0xdf>
c000c4bc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c4c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c5:	66 3d 1e 03          	cmp    ax,0x31e
c000c4c9:	75 06                	jne    c000c4d1 <sendKeyboardToken(KeyboardToken)+0xee>
c000c4cb:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c4d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d4:	66 3d 1f 03          	cmp    ax,0x31f
c000c4d8:	75 06                	jne    c000c4e0 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c4da:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c4e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4e3:	66 3d 20 03          	cmp    ax,0x320
c000c4e7:	75 06                	jne    c000c4ef <sendKeyboardToken(KeyboardToken)+0x10c>
c000c4e9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c4ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4f2:	66 3d 21 03          	cmp    ax,0x321
c000c4f6:	75 06                	jne    c000c4fe <sendKeyboardToken(KeyboardToken)+0x11b>
c000c4f8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c4fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c501:	66 3d 22 03          	cmp    ax,0x322
c000c505:	0f 85 c9 00 00 00    	jne    c000c5d4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c50b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c511:	e9 be 00 00 00       	jmp    c000c5d4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c516:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c519:	66 3d 18 03          	cmp    ax,0x318
c000c51d:	75 0a                	jne    c000c529 <sendKeyboardToken(KeyboardToken)+0x146>
c000c51f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c525:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c52c:	66 3d 19 03          	cmp    ax,0x319
c000c530:	75 0a                	jne    c000c53c <sendKeyboardToken(KeyboardToken)+0x159>
c000c532:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c538:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c53c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c53f:	66 3d 1a 03          	cmp    ax,0x31a
c000c543:	75 0a                	jne    c000c54f <sendKeyboardToken(KeyboardToken)+0x16c>
c000c545:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c54b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c54f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c552:	66 3d 1b 03          	cmp    ax,0x31b
c000c556:	75 0a                	jne    c000c562 <sendKeyboardToken(KeyboardToken)+0x17f>
c000c558:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c55e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c562:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c565:	66 3d 1c 03          	cmp    ax,0x31c
c000c569:	75 0a                	jne    c000c575 <sendKeyboardToken(KeyboardToken)+0x192>
c000c56b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c571:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c578:	66 3d 1d 03          	cmp    ax,0x31d
c000c57c:	75 0a                	jne    c000c588 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c57e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c584:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c58b:	66 3d 1e 03          	cmp    ax,0x31e
c000c58f:	75 0a                	jne    c000c59b <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c591:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c597:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c59b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c59e:	66 3d 1f 03          	cmp    ax,0x31f
c000c5a2:	75 0a                	jne    c000c5ae <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c5a4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c5aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b1:	66 3d 20 03          	cmp    ax,0x320
c000c5b5:	75 0a                	jne    c000c5c1 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c5b7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c5bd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c4:	66 3d 21 03          	cmp    ax,0x321
c000c5c8:	75 0a                	jne    c000c5d4 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c5ca:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c5d0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d7:	66 3d 00 02          	cmp    ax,0x200
c000c5db:	75 2c                	jne    c000c609 <sendKeyboardToken(KeyboardToken)+0x226>
c000c5dd:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c5e2:	83 f0 01             	xor    eax,0x1
c000c5e5:	84 c0                	test   al,al
c000c5e7:	74 20                	je     c000c609 <sendKeyboardToken(KeyboardToken)+0x226>
c000c5e9:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c5ee:	6a 01                	push   0x1
c000c5f0:	6a 00                	push   0x0
c000c5f2:	68 42 c2 00 c0       	push   0xc000c242
c000c5f7:	50                   	push   eax
c000c5f8:	e8 67 7f 00 00       	call   c0014564 <Process::createThread(void (*)(void*), void*, int)>
c000c5fd:	83 c4 10             	add    esp,0x10
c000c600:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c607:	eb 33                	jmp    c000c63c <sendKeyboardToken(KeyboardToken)+0x259>
c000c609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c60c:	66 3d 01 02          	cmp    ax,0x201
c000c610:	75 2a                	jne    c000c63c <sendKeyboardToken(KeyboardToken)+0x259>
c000c612:	a0 e0 63 02 c0       	mov    al,ds:0xc00263e0
c000c617:	83 f0 01             	xor    eax,0x1
c000c61a:	84 c0                	test   al,al
c000c61c:	74 1e                	je     c000c63c <sendKeyboardToken(KeyboardToken)+0x259>
c000c61e:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000c623:	6a 01                	push   0x1
c000c625:	6a 00                	push   0x0
c000c627:	68 ae c2 00 c0       	push   0xc000c2ae
c000c62c:	50                   	push   eax
c000c62d:	e8 32 7f 00 00       	call   c0014564 <Process::createThread(void (*)(void*), void*, int)>
c000c632:	83 c4 10             	add    esp,0x10
c000c635:	c6 05 e0 63 02 c0 01 	mov    BYTE PTR ds:0xc00263e0,0x1
c000c63c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c63f:	66 3d 25 03          	cmp    ax,0x325
c000c643:	75 06                	jne    c000c64b <sendKeyboardToken(KeyboardToken)+0x268>
c000c645:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c64b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c64e:	66 3d 24 03          	cmp    ax,0x324
c000c652:	75 06                	jne    c000c65a <sendKeyboardToken(KeyboardToken)+0x277>
c000c654:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c65a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c65d:	66 3d 23 03          	cmp    ax,0x323
c000c661:	75 06                	jne    c000c669 <sendKeyboardToken(KeyboardToken)+0x286>
c000c663:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c66c:	66 3d 26 03          	cmp    ax,0x326
c000c670:	75 06                	jne    c000c678 <sendKeyboardToken(KeyboardToken)+0x295>
c000c672:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c678:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67b:	66 3d 27 03          	cmp    ax,0x327
c000c67f:	75 06                	jne    c000c687 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c681:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c68a:	66 3d 22 03          	cmp    ax,0x322
c000c68e:	75 06                	jne    c000c696 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c690:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c696:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c69a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c69d:	83 f0 01             	xor    eax,0x1
c000c6a0:	84 c0                	test   al,al
c000c6a2:	74 7b                	je     c000c71f <sendKeyboardToken(KeyboardToken)+0x33c>
c000c6a4:	a0 e1 60 02 c0       	mov    al,ds:0xc00260e1
c000c6a9:	84 c0                	test   al,al
c000c6ab:	74 43                	je     c000c6f0 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c6ad:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6b1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c6b5:	74 2d                	je     c000c6e4 <sendKeyboardToken(KeyboardToken)+0x301>
c000c6b7:	8b 15 e4 63 02 c0    	mov    edx,DWORD PTR ds:0xc00263e4
c000c6bd:	89 d0                	mov    eax,edx
c000c6bf:	c1 e0 02             	shl    eax,0x2
c000c6c2:	01 d0                	add    eax,edx
c000c6c4:	01 c0                	add    eax,eax
c000c6c6:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c6cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ce:	25 ff ff 00 00       	and    eax,0xffff
c000c6d3:	8d 50 d0             	lea    edx,[eax-0x30]
c000c6d6:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c6db:	01 d0                	add    eax,edx
c000c6dd:	a3 e4 63 02 c0       	mov    ds:0xc00263e4,eax
c000c6e2:	eb 71                	jmp    c000c755 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6e4:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c6ee:	eb 65                	jmp    c000c755 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6f0:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c6f5:	85 c0                	test   eax,eax
c000c6f7:	74 1a                	je     c000c713 <sendKeyboardToken(KeyboardToken)+0x330>
c000c6f9:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c6fe:	25 ff 00 00 00       	and    eax,0xff
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 0e fc ff ff       	call   c000c31a <sendKeyToTerminal(unsigned char)>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c713:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c71d:	eb 36                	jmp    c000c755 <sendKeyboardToken(KeyboardToken)+0x372>
c000c71f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c722:	66 3d 01 01          	cmp    ax,0x101
c000c726:	75 2d                	jne    c000c755 <sendKeyboardToken(KeyboardToken)+0x372>
c000c728:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c72d:	85 c0                	test   eax,eax
c000c72f:	74 1a                	je     c000c74b <sendKeyboardToken(KeyboardToken)+0x368>
c000c731:	a1 e4 63 02 c0       	mov    eax,ds:0xc00263e4
c000c736:	25 ff 00 00 00       	and    eax,0xff
c000c73b:	83 ec 0c             	sub    esp,0xc
c000c73e:	50                   	push   eax
c000c73f:	e8 d6 fb ff ff       	call   c000c31a <sendKeyToTerminal(unsigned char)>
c000c744:	83 c4 10             	add    esp,0x10
c000c747:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c74b:	c7 05 e4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263e4,0x0
c000c755:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c758:	83 f0 01             	xor    eax,0x1
c000c75b:	84 c0                	test   al,al
c000c75d:	74 4e                	je     c000c7ad <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c75f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c762:	83 f0 01             	xor    eax,0x1
c000c765:	84 c0                	test   al,al
c000c767:	74 44                	je     c000c7ad <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c769:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c76e:	83 f0 01             	xor    eax,0x1
c000c771:	84 c0                	test   al,al
c000c773:	74 38                	je     c000c7ad <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c778:	66 83 f8 1f          	cmp    ax,0x1f
c000c77c:	76 09                	jbe    c000c787 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c77e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c781:	66 83 f8 7e          	cmp    ax,0x7e
c000c785:	76 12                	jbe    c000c799 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78a:	66 83 f8 0a          	cmp    ax,0xa
c000c78e:	74 09                	je     c000c799 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c793:	66 83 f8 08          	cmp    ax,0x8
c000c797:	75 14                	jne    c000c7ad <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c799:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c79c:	25 ff 00 00 00       	and    eax,0xff
c000c7a1:	83 ec 0c             	sub    esp,0xc
c000c7a4:	50                   	push   eax
c000c7a5:	e8 70 fb ff ff       	call   c000c31a <sendKeyToTerminal(unsigned char)>
c000c7aa:	83 c4 10             	add    esp,0x10
c000c7ad:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c7b0:	83 f0 01             	xor    eax,0x1
c000c7b3:	84 c0                	test   al,al
c000c7b5:	74 51                	je     c000c808 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7b7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7ba:	83 f0 01             	xor    eax,0x1
c000c7bd:	84 c0                	test   al,al
c000c7bf:	74 47                	je     c000c808 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7c1:	a0 e0 60 02 c0       	mov    al,ds:0xc00260e0
c000c7c6:	84 c0                	test   al,al
c000c7c8:	74 3e                	je     c000c808 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7cd:	66 83 f8 3f          	cmp    ax,0x3f
c000c7d1:	76 35                	jbe    c000c808 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7d6:	66 83 f8 7f          	cmp    ax,0x7f
c000c7da:	77 2c                	ja     c000c808 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7df:	88 c2                	mov    dl,al
c000c7e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e4:	66 83 f8 5f          	cmp    ax,0x5f
c000c7e8:	76 04                	jbe    c000c7ee <sendKeyboardToken(KeyboardToken)+0x40b>
c000c7ea:	b0 20                	mov    al,0x20
c000c7ec:	eb 02                	jmp    c000c7f0 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c7ee:	b0 00                	mov    al,0x0
c000c7f0:	29 c2                	sub    edx,eax
c000c7f2:	88 d0                	mov    al,dl
c000c7f4:	83 e8 40             	sub    eax,0x40
c000c7f7:	25 ff 00 00 00       	and    eax,0xff
c000c7fc:	83 ec 0c             	sub    esp,0xc
c000c7ff:	50                   	push   eax
c000c800:	e8 15 fb ff ff       	call   c000c31a <sendKeyToTerminal(unsigned char)>
c000c805:	83 c4 10             	add    esp,0x10
c000c808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c80b:	66 3d 00 03          	cmp    ax,0x300
c000c80f:	75 0f                	jne    c000c820 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c811:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c814:	83 f0 01             	xor    eax,0x1
c000c817:	84 c0                	test   al,al
c000c819:	74 05                	je     c000c820 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c81b:	e8 25 ba ff ff       	call   c0008245 <doTerminalCycle()>
c000c820:	90                   	nop
c000c821:	c9                   	leave  
c000c822:	c3                   	ret    

c000c823 <clearInternalKeybuffer(VgaText*)>:
c000c823:	55                   	push   ebp
c000c824:	89 e5                	mov    ebp,esp
c000c826:	83 ec 08             	sub    esp,0x8
c000c829:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c82c:	05 02 01 00 00       	add    eax,0x102
c000c831:	83 ec 0c             	sub    esp,0xc
c000c834:	50                   	push   eax
c000c835:	e8 f6 3c ff ff       	call   c0000530 <strlen>
c000c83a:	83 c4 10             	add    esp,0x10
c000c83d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c840:	81 c2 02 01 00 00    	add    edx,0x102
c000c846:	83 ec 04             	sub    esp,0x4
c000c849:	50                   	push   eax
c000c84a:	6a 00                	push   0x0
c000c84c:	52                   	push   edx
c000c84d:	e8 6e 3c ff ff       	call   c00004c0 <memset>
c000c852:	83 c4 10             	add    esp,0x10
c000c855:	90                   	nop
c000c856:	c9                   	leave  
c000c857:	c3                   	ret    

c000c858 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c858:	55                   	push   ebp
c000c859:	89 e5                	mov    ebp,esp
c000c85b:	83 ec 18             	sub    esp,0x18
c000c85e:	a1 c8 5f 02 c0       	mov    eax,ds:0xc0025fc8
c000c863:	85 c0                	test   eax,eax
c000c865:	74 2a                	je     c000c891 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c867:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c86d:	8b 0d c8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fc8
c000c873:	83 ec 04             	sub    esp,0x4
c000c876:	68 e0 5f 02 c0       	push   0xc0025fe0
c000c87b:	83 ec 08             	sub    esp,0x8
c000c87e:	89 e2                	mov    edx,esp
c000c880:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c883:	89 02                	mov    DWORD PTR [edx],eax
c000c885:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c888:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c88c:	ff d1                	call   ecx
c000c88e:	83 c4 10             	add    esp,0x10
c000c891:	fb                   	sti    
c000c892:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c899:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c89d:	0f 84 ef 00 00 00    	je     c000c992 <readKeyboard(VgaText*, char*, unsigned long)+0x13a>
c000c8a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8a6:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c8ac:	84 c0                	test   al,al
c000c8ae:	75 28                	jne    c000c8d8 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c8b0:	fa                   	cli    
c000c8b1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8b6:	40                   	inc    eax
c000c8b7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c8bc:	e8 eb 7e 00 00       	call   c00147ac <schedule()>
c000c8c1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8c6:	48                   	dec    eax
c000c8c7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000c8cc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000c8d1:	85 c0                	test   eax,eax
c000c8d3:	75 ce                	jne    c000c8a3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8d5:	fb                   	sti    
c000c8d6:	eb cb                	jmp    c000c8a3 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c8db:	8d 50 01             	lea    edx,[eax+0x1]
c000c8de:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8e4:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000c8ea:	88 10                	mov    BYTE PTR [eax],dl
c000c8ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ef:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000c8f5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c8f8:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c8fc:	75 1e                	jne    c000c91c <readKeyboard(VgaText*, char*, unsigned long)+0xc4>
c000c8fe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c903:	8b 00                	mov    eax,DWORD PTR [eax]
c000c905:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c908:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c90e:	83 ec 08             	sub    esp,0x8
c000c911:	6a 02                	push   0x2
c000c913:	50                   	push   eax
c000c914:	e8 82 3e 00 00       	call   c001079b <KeRaiseSignal(SigHandlerBlock*, int)>
c000c919:	83 c4 10             	add    esp,0x10
c000c91c:	80 7d f3 1c          	cmp    BYTE PTR [ebp-0xd],0x1c
c000c920:	75 1e                	jne    c000c940 <readKeyboard(VgaText*, char*, unsigned long)+0xe8>
c000c922:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c927:	8b 00                	mov    eax,DWORD PTR [eax]
c000c929:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c92c:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c932:	83 ec 08             	sub    esp,0x8
c000c935:	6a 09                	push   0x9
c000c937:	50                   	push   eax
c000c938:	e8 5e 3e 00 00       	call   c001079b <KeRaiseSignal(SigHandlerBlock*, int)>
c000c93d:	83 c4 10             	add    esp,0x10
c000c940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c943:	05 02 01 00 00       	add    eax,0x102
c000c948:	83 ec 0c             	sub    esp,0xc
c000c94b:	50                   	push   eax
c000c94c:	e8 df 3b ff ff       	call   c0000530 <strlen>
c000c951:	83 c4 10             	add    esp,0x10
c000c954:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c957:	81 c2 02 01 00 00    	add    edx,0x102
c000c95d:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c960:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c963:	81 c2 02 01 00 00    	add    edx,0x102
c000c969:	83 ec 04             	sub    esp,0x4
c000c96c:	50                   	push   eax
c000c96d:	51                   	push   ecx
c000c96e:	52                   	push   edx
c000c96f:	e8 5c 3a ff ff       	call   c00003d0 <memmove>
c000c974:	83 c4 10             	add    esp,0x10
c000c977:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c97a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c97d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c981:	74 0a                	je     c000c98d <readKeyboard(VgaText*, char*, unsigned long)+0x135>
c000c983:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c987:	0f 85 0c ff ff ff    	jne    c000c899 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c98d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c990:	eb 03                	jmp    c000c995 <readKeyboard(VgaText*, char*, unsigned long)+0x13d>
c000c992:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c995:	c9                   	leave  
c000c996:	c3                   	ret    
c000c997:	90                   	nop

c000c998 <Keyboard::Keyboard(char const*)>:
c000c998:	83 ec 0c             	sub    esp,0xc
c000c99b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c99f:	83 ec 08             	sub    esp,0x8
c000c9a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9a6:	50                   	push   eax
c000c9a7:	e8 24 f2 ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000c9ac:	83 c4 10             	add    esp,0x10
c000c9af:	ba 5c fa 01 c0       	mov    edx,0xc001fa5c
c000c9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9b8:	89 10                	mov    DWORD PTR [eax],edx
c000c9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9be:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c9c8:	c6 05 c4 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025fc4,0x1
c000c9cf:	90                   	nop
c000c9d0:	83 c4 0c             	add    esp,0xc
c000c9d3:	c3                   	ret    

c000c9d4 <Keyboard::~Keyboard()>:
c000c9d4:	83 ec 0c             	sub    esp,0xc
c000c9d7:	ba 5c fa 01 c0       	mov    edx,0xc001fa5c
c000c9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9e0:	89 10                	mov    DWORD PTR [eax],edx
c000c9e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9e6:	83 ec 0c             	sub    esp,0xc
c000c9e9:	50                   	push   eax
c000c9ea:	e8 4b ef ff ff       	call   c000b93a <Device::~Device()>
c000c9ef:	83 c4 10             	add    esp,0x10
c000c9f2:	90                   	nop
c000c9f3:	83 c4 0c             	add    esp,0xc
c000c9f6:	c3                   	ret    
c000c9f7:	90                   	nop

c000c9f8 <Keyboard::~Keyboard()>:
c000c9f8:	83 ec 0c             	sub    esp,0xc
c000c9fb:	83 ec 0c             	sub    esp,0xc
c000c9fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca02:	e8 cd ff ff ff       	call   c000c9d4 <Keyboard::~Keyboard()>
c000ca07:	83 c4 10             	add    esp,0x10
c000ca0a:	83 ec 08             	sub    esp,0x8
c000ca0d:	68 5c 01 00 00       	push   0x15c
c000ca12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca16:	e8 e9 da ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000ca1b:	83 c4 10             	add    esp,0x10
c000ca1e:	83 c4 0c             	add    esp,0xc
c000ca21:	c3                   	ret    

c000ca22 <LogicalDisk::close(int, int, void*)>:
c000ca22:	83 c8 ff             	or     eax,0xffffffff
c000ca25:	c3                   	ret    

c000ca26 <LogicalDisk::~LogicalDisk()>:
c000ca26:	83 ec 0c             	sub    esp,0xc
c000ca29:	ba d4 fa 01 c0       	mov    edx,0xc001fad4
c000ca2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca32:	89 10                	mov    DWORD PTR [eax],edx
c000ca34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca38:	83 ec 0c             	sub    esp,0xc
c000ca3b:	50                   	push   eax
c000ca3c:	e8 f9 ee ff ff       	call   c000b93a <Device::~Device()>
c000ca41:	83 c4 10             	add    esp,0x10
c000ca44:	90                   	nop
c000ca45:	83 c4 0c             	add    esp,0xc
c000ca48:	c3                   	ret    
c000ca49:	90                   	nop

c000ca4a <LogicalDisk::~LogicalDisk()>:
c000ca4a:	83 ec 0c             	sub    esp,0xc
c000ca4d:	83 ec 0c             	sub    esp,0xc
c000ca50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca54:	e8 cd ff ff ff       	call   c000ca26 <LogicalDisk::~LogicalDisk()>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	83 ec 08             	sub    esp,0x8
c000ca5f:	68 78 01 00 00       	push   0x178
c000ca64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca68:	e8 97 da ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000ca6d:	83 c4 10             	add    esp,0x10
c000ca70:	83 c4 0c             	add    esp,0xc
c000ca73:	c3                   	ret    

c000ca74 <LogicalDisk::open(int, int, void*)>:
c000ca74:	83 ec 18             	sub    esp,0x18
c000ca77:	68 88 fa 01 c0       	push   0xc001fa88
c000ca7c:	e8 2e 39 00 00       	call   c00103af <KePanic(char const*)>
c000ca81:	83 c8 ff             	or     eax,0xffffffff
c000ca84:	83 c4 1c             	add    esp,0x1c
c000ca87:	c3                   	ret    

c000ca88 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ca88:	53                   	push   ebx
c000ca89:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ca8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca91:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca95:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ca9b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000caa1:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000caa7:	77 10                	ja     c000cab9 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000caa9:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000caaf:	89 d3                	mov    ebx,edx
c000cab1:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cab7:	72 05                	jb     c000cabe <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cab9:	83 c8 ff             	or     eax,0xffffffff
c000cabc:	89 c2                	mov    edx,eax
c000cabe:	5b                   	pop    ebx
c000cabf:	c3                   	ret    

c000cac0 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cac0:	56                   	push   esi
c000cac1:	83 c8 ff             	or     eax,0xffffffff
c000cac4:	53                   	push   ebx
c000cac5:	89 c2                	mov    edx,eax
c000cac7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cacb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cacf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cad3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cad9:	77 27                	ja     c000cb02 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cadb:	89 d8                	mov    eax,ebx
c000cadd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cae3:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cae9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000caee:	89 c2                	mov    edx,eax
c000caf0:	73 10                	jae    c000cb02 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000caf2:	89 c8                	mov    eax,ecx
c000caf4:	89 da                	mov    edx,ebx
c000caf6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cafc:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cb02:	5b                   	pop    ebx
c000cb03:	5e                   	pop    esi
c000cb04:	c3                   	ret    
c000cb05:	90                   	nop

c000cb06 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cb06:	83 ec 1c             	sub    esp,0x1c
c000cb09:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cb0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cb11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb1d:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb20:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cb24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb2c:	83 ec 08             	sub    esp,0x8
c000cb2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb33:	50                   	push   eax
c000cb34:	e8 97 f0 ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000cb39:	83 c4 10             	add    esp,0x10
c000cb3c:	ba d4 fa 01 c0       	mov    edx,0xc001fad4
c000cb41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb45:	89 10                	mov    DWORD PTR [eax],edx
c000cb47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb4b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb56:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000cb5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb61:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb6c:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cb76:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb7a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb82:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cb88:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cb8e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb92:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cb95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb99:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cb9f:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cba5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cbad:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cbb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbb7:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000cbc1:	90                   	nop
c000cbc2:	83 c4 1c             	add    esp,0x1c
c000cbc5:	c3                   	ret    

c000cbc6 <LogicalDisk::assignDriveLetter()>:
c000cbc6:	55                   	push   ebp
c000cbc7:	57                   	push   edi
c000cbc8:	56                   	push   esi
c000cbc9:	53                   	push   ebx
c000cbca:	83 ec 14             	sub    esp,0x14
c000cbcd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbd1:	8b 3d 00 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026400
c000cbd7:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cbdd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cbe1:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cbe7:	8b 3d 04 64 02 c0    	mov    edi,DWORD PTR ds:0xc0026404
c000cbed:	3c 01                	cmp    al,0x1
c000cbef:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cbf3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cbf7:	19 c0                	sbb    eax,eax
c000cbf9:	83 e0 02             	and    eax,0x2
c000cbfc:	83 c0 41             	add    eax,0x41
c000cbff:	0f be e8             	movsx  ebp,al
c000cc02:	3c 43                	cmp    al,0x43
c000cc04:	75 10                	jne    c000cc16 <LogicalDisk::assignDriveLetter()+0x50>
c000cc06:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cc0d:	75 5d                	jne    c000cc6c <LogicalDisk::assignDriveLetter()+0xa6>
c000cc0f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cc14:	75 56                	jne    c000cc6c <LogicalDisk::assignDriveLetter()+0xa6>
c000cc16:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cc19:	ba 01 00 00 00       	mov    edx,0x1
c000cc1e:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cc22:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cc26:	d3 e2                	shl    edx,cl
c000cc28:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc2c:	89 d7                	mov    edi,edx
c000cc2e:	89 d6                	mov    esi,edx
c000cc30:	c1 ff 1f             	sar    edi,0x1f
c000cc33:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cc37:	21 f9                	and    ecx,edi
c000cc39:	09 d1                	or     ecx,edx
c000cc3b:	75 2f                	jne    c000cc6c <LogicalDisk::assignDriveLetter()+0xa6>
c000cc3d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cc41:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc45:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cc4b:	09 f2                	or     edx,esi
c000cc4d:	89 15 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,edx
c000cc53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc57:	09 fa                	or     edx,edi
c000cc59:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cc5d:	89 15 04 64 02 c0    	mov    DWORD PTR ds:0xc0026404,edx
c000cc63:	89 1c bd 20 64 02 c0 	mov    DWORD PTR [edi*4-0x3ffd9be0],ebx
c000cc6a:	eb 08                	jmp    c000cc74 <LogicalDisk::assignDriveLetter()+0xae>
c000cc6c:	45                   	inc    ebp
c000cc6d:	40                   	inc    eax
c000cc6e:	3c 5b                	cmp    al,0x5b
c000cc70:	75 90                	jne    c000cc02 <LogicalDisk::assignDriveLetter()+0x3c>
c000cc72:	31 c0                	xor    eax,eax
c000cc74:	83 c4 14             	add    esp,0x14
c000cc77:	5b                   	pop    ebx
c000cc78:	5e                   	pop    esi
c000cc79:	5f                   	pop    edi
c000cc7a:	5d                   	pop    ebp
c000cc7b:	c3                   	ret    

c000cc7c <LogicalDisk::mount()>:
c000cc7c:	56                   	push   esi
c000cc7d:	53                   	push   ebx
c000cc7e:	53                   	push   ebx
c000cc7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc83:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c000cc89:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000cc93:	85 db                	test   ebx,ebx
c000cc95:	74 27                	je     c000ccbe <LogicalDisk::mount()+0x42>
c000cc97:	51                   	push   ecx
c000cc98:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cc9f:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cca1:	83 e8 41             	sub    eax,0x41
c000cca4:	50                   	push   eax
c000cca5:	56                   	push   esi
c000cca6:	53                   	push   ebx
c000cca7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	84 c0                	test   al,al
c000ccaf:	74 08                	je     c000ccb9 <LogicalDisk::mount()+0x3d>
c000ccb1:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000ccb7:	eb 07                	jmp    c000ccc0 <LogicalDisk::mount()+0x44>
c000ccb9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000ccbc:	eb d5                	jmp    c000cc93 <LogicalDisk::mount()+0x17>
c000ccbe:	31 c0                	xor    eax,eax
c000ccc0:	5a                   	pop    edx
c000ccc1:	5b                   	pop    ebx
c000ccc2:	5e                   	pop    esi
c000ccc3:	c3                   	ret    

c000ccc4 <LogicalDisk::unmount()>:
c000ccc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccc8:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000ccd2:	c3                   	ret    
c000ccd3:	90                   	nop

c000ccd4 <LogicalDisk::eject()>:
c000ccd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccd8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ccde:	8b 10                	mov    edx,DWORD PTR [eax]
c000cce0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cce4:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cce7:	90                   	nop

c000cce8 <LogicalDisk::unassignDriveLetter()>:
c000cce8:	57                   	push   edi
c000cce9:	56                   	push   esi
c000ccea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ccee:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000ccf5:	84 c9                	test   cl,cl
c000ccf7:	75 0f                	jne    c000cd08 <LogicalDisk::unassignDriveLetter()+0x20>
c000ccf9:	c7 44 24 0c ac fa 01 c0 	mov    DWORD PTR [esp+0xc],0xc001faac
c000cd01:	5e                   	pop    esi
c000cd02:	5f                   	pop    edi
c000cd03:	e9 a7 36 00 00       	jmp    c00103af <KePanic(char const*)>
c000cd08:	83 e9 41             	sub    ecx,0x41
c000cd0b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cd12:	b8 01 00 00 00       	mov    eax,0x1
c000cd17:	c7 04 8d 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd9be0],0x0
c000cd22:	d3 e0                	shl    eax,cl
c000cd24:	89 c7                	mov    edi,eax
c000cd26:	f7 d0                	not    eax
c000cd28:	c1 ff 1f             	sar    edi,0x1f
c000cd2b:	21 05 00 64 02 c0    	and    DWORD PTR ds:0xc0026400,eax
c000cd31:	89 fe                	mov    esi,edi
c000cd33:	f7 d6                	not    esi
c000cd35:	21 35 04 64 02 c0    	and    DWORD PTR ds:0xc0026404,esi
c000cd3b:	5e                   	pop    esi
c000cd3c:	5f                   	pop    edi
c000cd3d:	c3                   	ret    

c000cd3e <LogicalDisk::read(unsigned long long, int, void*)>:
c000cd3e:	57                   	push   edi
c000cd3f:	56                   	push   esi
c000cd40:	53                   	push   ebx
c000cd41:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd49:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd51:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd57:	77 41                	ja     c000cd9a <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cd59:	99                   	cdq    
c000cd5a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd60:	01 c8                	add    eax,ecx
c000cd62:	11 da                	adc    edx,ebx
c000cd64:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd6a:	19 d7                	sbb    edi,edx
c000cd6c:	72 33                	jb     c000cda1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cd6e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd74:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd7a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd7e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd82:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd88:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd92:	5b                   	pop    ebx
c000cd93:	5e                   	pop    esi
c000cd94:	5f                   	pop    edi
c000cd95:	e9 c0 0a 00 00       	jmp    c000d85a <VCache::read(unsigned long long, int, void*)>
c000cd9a:	b8 05 00 00 00       	mov    eax,0x5
c000cd9f:	eb 05                	jmp    c000cda6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cda1:	b8 07 00 00 00       	mov    eax,0x7
c000cda6:	5b                   	pop    ebx
c000cda7:	5e                   	pop    esi
c000cda8:	5f                   	pop    edi
c000cda9:	c3                   	ret    

c000cdaa <LogicalDisk::write(unsigned long long, int, void*)>:
c000cdaa:	57                   	push   edi
c000cdab:	56                   	push   esi
c000cdac:	53                   	push   ebx
c000cdad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cdb1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cdb5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cdb9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cdbd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cdc3:	77 41                	ja     c000ce06 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cdc5:	99                   	cdq    
c000cdc6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cdcc:	01 c8                	add    eax,ecx
c000cdce:	11 da                	adc    edx,ebx
c000cdd0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cdd6:	19 d7                	sbb    edi,edx
c000cdd8:	72 33                	jb     c000ce0d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cdda:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cde0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cde6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cdea:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cdee:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cdf4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cdfa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdfe:	5b                   	pop    ebx
c000cdff:	5e                   	pop    esi
c000ce00:	5f                   	pop    edi
c000ce01:	e9 66 09 00 00       	jmp    c000d76c <VCache::write(unsigned long long, int, void*)>
c000ce06:	b8 05 00 00 00       	mov    eax,0x5
c000ce0b:	eb 05                	jmp    c000ce12 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ce0d:	b8 07 00 00 00       	mov    eax,0x7
c000ce12:	5b                   	pop    ebx
c000ce13:	5e                   	pop    esi
c000ce14:	5f                   	pop    edi
c000ce15:	c3                   	ret    
c000ce16:	66 90                	xchg   ax,ax

c000ce18 <Mouse::Mouse(char const*)>:
c000ce18:	83 ec 0c             	sub    esp,0xc
c000ce1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce1f:	83 ec 08             	sub    esp,0x8
c000ce22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce26:	50                   	push   eax
c000ce27:	e8 a4 ed ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000ce2c:	83 c4 10             	add    esp,0x10
c000ce2f:	ba 00 fb 01 c0       	mov    edx,0xc001fb00
c000ce34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce38:	89 10                	mov    DWORD PTR [eax],edx
c000ce3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce3e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ce48:	90                   	nop
c000ce49:	83 c4 0c             	add    esp,0xc
c000ce4c:	c3                   	ret    
c000ce4d:	90                   	nop
c000ce4e:	66 90                	xchg   ax,ax

c000ce50 <Mouse::~Mouse()>:
c000ce50:	83 ec 0c             	sub    esp,0xc
c000ce53:	ba 00 fb 01 c0       	mov    edx,0xc001fb00
c000ce58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce5c:	89 10                	mov    DWORD PTR [eax],edx
c000ce5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce62:	83 ec 0c             	sub    esp,0xc
c000ce65:	50                   	push   eax
c000ce66:	e8 cf ea ff ff       	call   c000b93a <Device::~Device()>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	90                   	nop
c000ce6f:	83 c4 0c             	add    esp,0xc
c000ce72:	c3                   	ret    
c000ce73:	90                   	nop

c000ce74 <Mouse::~Mouse()>:
c000ce74:	83 ec 0c             	sub    esp,0xc
c000ce77:	83 ec 0c             	sub    esp,0xc
c000ce7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7e:	e8 cd ff ff ff       	call   c000ce50 <Mouse::~Mouse()>
c000ce83:	83 c4 10             	add    esp,0x10
c000ce86:	83 ec 08             	sub    esp,0x8
c000ce89:	68 58 01 00 00       	push   0x158
c000ce8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce92:	e8 6d d6 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000ce97:	83 c4 10             	add    esp,0x10
c000ce9a:	83 c4 0c             	add    esp,0xc
c000ce9d:	c3                   	ret    

c000ce9e <NIC::getMAC()>:
c000ce9e:	31 c0                	xor    eax,eax
c000cea0:	31 d2                	xor    edx,edx
c000cea2:	c3                   	ret    
c000cea3:	90                   	nop

c000cea4 <NIC::write(int, unsigned char*, int*)>:
c000cea4:	b8 01 00 00 00       	mov    eax,0x1
c000cea9:	c3                   	ret    

c000ceaa <NIC::NIC(char const*)>:
c000ceaa:	83 ec 0c             	sub    esp,0xc
c000cead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceb1:	83 ec 08             	sub    esp,0x8
c000ceb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceb8:	50                   	push   eax
c000ceb9:	e8 12 ed ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000cebe:	83 c4 10             	add    esp,0x10
c000cec1:	ba 2c fb 01 c0       	mov    edx,0xc001fb2c
c000cec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceca:	89 10                	mov    DWORD PTR [eax],edx
c000cecc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ced0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ceda:	90                   	nop
c000cedb:	83 c4 0c             	add    esp,0xc
c000cede:	c3                   	ret    
c000cedf:	90                   	nop

c000cee0 <NIC::~NIC()>:
c000cee0:	83 ec 0c             	sub    esp,0xc
c000cee3:	ba 2c fb 01 c0       	mov    edx,0xc001fb2c
c000cee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceec:	89 10                	mov    DWORD PTR [eax],edx
c000ceee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cef2:	83 ec 0c             	sub    esp,0xc
c000cef5:	50                   	push   eax
c000cef6:	e8 3f ea ff ff       	call   c000b93a <Device::~Device()>
c000cefb:	83 c4 10             	add    esp,0x10
c000cefe:	90                   	nop
c000ceff:	83 c4 0c             	add    esp,0xc
c000cf02:	c3                   	ret    
c000cf03:	90                   	nop

c000cf04 <NIC::~NIC()>:
c000cf04:	83 ec 0c             	sub    esp,0xc
c000cf07:	83 ec 0c             	sub    esp,0xc
c000cf0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf0e:	e8 cd ff ff ff       	call   c000cee0 <NIC::~NIC()>
c000cf13:	83 c4 10             	add    esp,0x10
c000cf16:	83 ec 08             	sub    esp,0x8
c000cf19:	68 58 01 00 00       	push   0x158
c000cf1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf22:	e8 dd d5 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	83 c4 0c             	add    esp,0xc
c000cf2d:	c3                   	ret    

c000cf2e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf2e:	55                   	push   ebp
c000cf2f:	57                   	push   edi
c000cf30:	56                   	push   esi
c000cf31:	53                   	push   ebx
c000cf32:	81 ec 28 01 00 00    	sub    esp,0x128
c000cf38:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cf3f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cf46:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cf4d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cf54:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf58:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf5c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cf63:	e8 64 ed ff ff       	call   c000bccc <Device::getName()>
c000cf68:	5a                   	pop    edx
c000cf69:	59                   	pop    ecx
c000cf6a:	50                   	push   eax
c000cf6b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cf6f:	55                   	push   ebp
c000cf70:	e8 7b 36 ff ff       	call   c00005f0 <strcpy>
c000cf75:	5b                   	pop    ebx
c000cf76:	58                   	pop    eax
c000cf77:	68 58 fb 01 c0       	push   0xc001fb58
c000cf7c:	55                   	push   ebp
c000cf7d:	e8 2e 38 ff ff       	call   c00007b0 <strcat>
c000cf82:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000cf89:	e8 d7 a8 ff ff       	call   c0007865 <malloc>
c000cf8e:	83 c4 0c             	add    esp,0xc
c000cf91:	89 c3                	mov    ebx,eax
c000cf93:	57                   	push   edi
c000cf94:	56                   	push   esi
c000cf95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf9d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cfa4:	55                   	push   ebp
c000cfa5:	50                   	push   eax
c000cfa6:	e8 5b fb ff ff       	call   c000cb06 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cfab:	83 c4 14             	add    esp,0x14
c000cfae:	53                   	push   ebx
c000cfaf:	e8 12 fc ff ff       	call   c000cbc6 <LogicalDisk::assignDriveLetter()>
c000cfb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cfb7:	e8 c0 fc ff ff       	call   c000cc7c <LogicalDisk::mount()>
c000cfbc:	58                   	pop    eax
c000cfbd:	5a                   	pop    edx
c000cfbe:	53                   	push   ebx
c000cfbf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cfc6:	e8 6d ea ff ff       	call   c000ba38 <Device::addChild(Device*)>
c000cfcb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cfd1:	5b                   	pop    ebx
c000cfd2:	5e                   	pop    esi
c000cfd3:	5f                   	pop    edi
c000cfd4:	5d                   	pop    ebp
c000cfd5:	c3                   	ret    

c000cfd6 <createPartitionsForDisk(PhysicalDisk*)>:
c000cfd6:	55                   	push   ebp
c000cfd7:	57                   	push   edi
c000cfd8:	56                   	push   esi
c000cfd9:	53                   	push   ebx
c000cfda:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cfe0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cfe7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cfed:	3d 00 02 00 00       	cmp    eax,0x200
c000cff2:	74 27                	je     c000d01b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cff4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cffa:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d000:	83 ec 10             	sub    esp,0x10
c000d003:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d007:	99                   	cdq    
c000d008:	c1 e6 0a             	shl    esi,0xa
c000d00b:	52                   	push   edx
c000d00c:	89 fd                	mov    ebp,edi
c000d00e:	50                   	push   eax
c000d00f:	55                   	push   ebp
c000d010:	56                   	push   esi
c000d011:	e8 9a 0a 01 00       	call   c001dab0 <__udivdi3>
c000d016:	e9 b1 00 00 00       	jmp    c000d0cc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d01b:	83 ec 0c             	sub    esp,0xc
c000d01e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d020:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d024:	56                   	push   esi
c000d025:	6a 01                	push   0x1
c000d027:	6a 00                	push   0x0
c000d029:	6a 00                	push   0x0
c000d02b:	53                   	push   ebx
c000d02c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d02f:	83 c4 20             	add    esp,0x20
c000d032:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d03a:	75 0a                	jne    c000d046 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d03c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d044:	74 2c                	je     c000d072 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d046:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d04c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d052:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d058:	83 ec 10             	sub    esp,0x10
c000d05b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d05f:	89 f7                	mov    edi,esi
c000d061:	c1 e0 0a             	shl    eax,0xa
c000d064:	c1 ff 1f             	sar    edi,0x1f
c000d067:	57                   	push   edi
c000d068:	56                   	push   esi
c000d069:	52                   	push   edx
c000d06a:	50                   	push   eax
c000d06b:	e8 40 0a 01 00       	call   c001dab0 <__udivdi3>
c000d070:	eb 5a                	jmp    c000d0cc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d072:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d079:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d080:	83 e1 7f             	and    ecx,0x7f
c000d083:	83 e0 7f             	and    eax,0x7f
c000d086:	01 c1                	add    ecx,eax
c000d088:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d08f:	83 e0 7f             	and    eax,0x7f
c000d092:	01 c1                	add    ecx,eax
c000d094:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d09b:	83 e0 7f             	and    eax,0x7f
c000d09e:	00 c1                	add    cl,al
c000d0a0:	74 41                	je     c000d0e3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d0a2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d0a8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d0ae:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d0b4:	83 ec 10             	sub    esp,0x10
c000d0b7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d0bb:	89 f7                	mov    edi,esi
c000d0bd:	c1 e0 0a             	shl    eax,0xa
c000d0c0:	c1 ff 1f             	sar    edi,0x1f
c000d0c3:	57                   	push   edi
c000d0c4:	56                   	push   esi
c000d0c5:	52                   	push   edx
c000d0c6:	50                   	push   eax
c000d0c7:	e8 e4 09 01 00       	call   c001dab0 <__udivdi3>
c000d0cc:	83 c4 14             	add    esp,0x14
c000d0cf:	52                   	push   edx
c000d0d0:	50                   	push   eax
c000d0d1:	6a 00                	push   0x0
c000d0d3:	6a 00                	push   0x0
c000d0d5:	53                   	push   ebx
c000d0d6:	e8 53 fe ff ff       	call   c000cf2e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d0db:	83 c4 20             	add    esp,0x20
c000d0de:	e9 79 01 00 00       	jmp    c000d25c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d0e3:	89 f0                	mov    eax,esi
c000d0e5:	31 f6                	xor    esi,esi
c000d0e7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d0ee:	75 02                	jne    c000d0f2 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d0f0:	89 f1                	mov    ecx,esi
c000d0f2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d0f9:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d100:	c1 e2 08             	shl    edx,0x8
c000d103:	c1 e7 10             	shl    edi,0x10
c000d106:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d10e:	09 fa                	or     edx,edi
c000d110:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d118:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d11f:	83 c0 10             	add    eax,0x10
c000d122:	09 fa                	or     edx,edi
c000d124:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d12b:	c1 e7 18             	shl    edi,0x18
c000d12e:	09 fa                	or     edx,edi
c000d130:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d137:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d13b:	c1 e7 10             	shl    edi,0x10
c000d13e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d145:	c1 e2 08             	shl    edx,0x8
c000d148:	09 fa                	or     edx,edi
c000d14a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d151:	09 fa                	or     edx,edi
c000d153:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d15a:	c1 e7 18             	shl    edi,0x18
c000d15d:	09 fa                	or     edx,edi
c000d15f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d163:	46                   	inc    esi
c000d164:	83 fe 04             	cmp    esi,0x4
c000d167:	0f 85 7a ff ff ff    	jne    c000d0e7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d16d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d171:	83 f0 01             	xor    eax,0x1
c000d174:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d178:	75 57                	jne    c000d1d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d17a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d17e:	83 f0 01             	xor    eax,0x1
c000d181:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d185:	75 4a                	jne    c000d1d1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d187:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d18b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d193:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d19b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d1a1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d1a7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d1ad:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d1b1:	89 f7                	mov    edi,esi
c000d1b3:	c1 e0 0a             	shl    eax,0xa
c000d1b6:	c1 ff 1f             	sar    edi,0x1f
c000d1b9:	57                   	push   edi
c000d1ba:	56                   	push   esi
c000d1bb:	52                   	push   edx
c000d1bc:	50                   	push   eax
c000d1bd:	e8 ee 08 01 00       	call   c001dab0 <__udivdi3>
c000d1c2:	83 c4 10             	add    esp,0x10
c000d1c5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1c9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1cd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d1d1:	84 c9                	test   cl,cl
c000d1d3:	74 53                	je     c000d228 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d1d5:	0f b6 c9             	movzx  ecx,cl
c000d1d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d1e4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d1ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d1f0:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d1f4:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d1f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d200:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d204:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d208:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d20c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d210:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d214:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d218:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d220:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d224:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d228:	31 ed                	xor    ebp,ebp
c000d22a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d22e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d232:	89 f8                	mov    eax,edi
c000d234:	09 f0                	or     eax,esi
c000d236:	74 1e                	je     c000d256 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d238:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d23c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d240:	89 d1                	mov    ecx,edx
c000d242:	09 c1                	or     ecx,eax
c000d244:	74 10                	je     c000d256 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d246:	83 ec 0c             	sub    esp,0xc
c000d249:	57                   	push   edi
c000d24a:	56                   	push   esi
c000d24b:	52                   	push   edx
c000d24c:	50                   	push   eax
c000d24d:	53                   	push   ebx
c000d24e:	e8 db fc ff ff       	call   c000cf2e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d253:	83 c4 20             	add    esp,0x20
c000d256:	45                   	inc    ebp
c000d257:	83 fd 04             	cmp    ebp,0x4
c000d25a:	75 ce                	jne    c000d22a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d25c:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d262:	5b                   	pop    ebx
c000d263:	5e                   	pop    esi
c000d264:	5f                   	pop    edi
c000d265:	5d                   	pop    ebp
c000d266:	c3                   	ret    
c000d267:	90                   	nop

c000d268 <Serial::Serial(char const*)>:
c000d268:	83 ec 0c             	sub    esp,0xc
c000d26b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d26f:	83 ec 08             	sub    esp,0x8
c000d272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d276:	50                   	push   eax
c000d277:	e8 54 e9 ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000d27c:	83 c4 10             	add    esp,0x10
c000d27f:	ba 6c fb 01 c0       	mov    edx,0xc001fb6c
c000d284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d288:	89 10                	mov    DWORD PTR [eax],edx
c000d28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d28e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d298:	90                   	nop
c000d299:	83 c4 0c             	add    esp,0xc
c000d29c:	c3                   	ret    
c000d29d:	90                   	nop
c000d29e:	66 90                	xchg   ax,ax

c000d2a0 <Serial::~Serial()>:
c000d2a0:	83 ec 0c             	sub    esp,0xc
c000d2a3:	ba 6c fb 01 c0       	mov    edx,0xc001fb6c
c000d2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ac:	89 10                	mov    DWORD PTR [eax],edx
c000d2ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2b2:	83 ec 0c             	sub    esp,0xc
c000d2b5:	50                   	push   eax
c000d2b6:	e8 7f e6 ff ff       	call   c000b93a <Device::~Device()>
c000d2bb:	83 c4 10             	add    esp,0x10
c000d2be:	90                   	nop
c000d2bf:	83 c4 0c             	add    esp,0xc
c000d2c2:	c3                   	ret    
c000d2c3:	90                   	nop

c000d2c4 <Serial::~Serial()>:
c000d2c4:	83 ec 0c             	sub    esp,0xc
c000d2c7:	83 ec 0c             	sub    esp,0xc
c000d2ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ce:	e8 cd ff ff ff       	call   c000d2a0 <Serial::~Serial()>
c000d2d3:	83 c4 10             	add    esp,0x10
c000d2d6:	83 ec 08             	sub    esp,0x8
c000d2d9:	68 58 01 00 00       	push   0x158
c000d2de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2e2:	e8 1d d2 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000d2e7:	83 c4 10             	add    esp,0x10
c000d2ea:	83 c4 0c             	add    esp,0xc
c000d2ed:	c3                   	ret    
c000d2ee:	66 90                	xchg   ax,ax

c000d2f0 <Timer::Timer(char const*)>:
c000d2f0:	83 ec 0c             	sub    esp,0xc
c000d2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2f7:	83 ec 08             	sub    esp,0x8
c000d2fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2fe:	50                   	push   eax
c000d2ff:	e8 cc e8 ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000d304:	83 c4 10             	add    esp,0x10
c000d307:	ba b0 fb 01 c0       	mov    edx,0xc001fbb0
c000d30c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d310:	89 10                	mov    DWORD PTR [eax],edx
c000d312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d316:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000d320:	90                   	nop
c000d321:	83 c4 0c             	add    esp,0xc
c000d324:	c3                   	ret    
c000d325:	90                   	nop
c000d326:	66 90                	xchg   ax,ax

c000d328 <Timer::~Timer()>:
c000d328:	83 ec 0c             	sub    esp,0xc
c000d32b:	ba b0 fb 01 c0       	mov    edx,0xc001fbb0
c000d330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d334:	89 10                	mov    DWORD PTR [eax],edx
c000d336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d33a:	83 ec 0c             	sub    esp,0xc
c000d33d:	50                   	push   eax
c000d33e:	e8 f7 e5 ff ff       	call   c000b93a <Device::~Device()>
c000d343:	83 c4 10             	add    esp,0x10
c000d346:	90                   	nop
c000d347:	83 c4 0c             	add    esp,0xc
c000d34a:	c3                   	ret    
c000d34b:	90                   	nop

c000d34c <Timer::~Timer()>:
c000d34c:	83 ec 0c             	sub    esp,0xc
c000d34f:	83 ec 0c             	sub    esp,0xc
c000d352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d356:	e8 cd ff ff ff       	call   c000d328 <Timer::~Timer()>
c000d35b:	83 c4 10             	add    esp,0x10
c000d35e:	83 ec 08             	sub    esp,0x8
c000d361:	68 5c 01 00 00       	push   0x15c
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 95 d1 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	83 c4 0c             	add    esp,0xc
c000d375:	c3                   	ret    

c000d376 <Timer::read()>:
c000d376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d37a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d380:	c3                   	ret    

c000d381 <setupTimer(int)>:
c000d381:	53                   	push   ebx
c000d382:	83 ec 14             	sub    esp,0x14
c000d385:	68 5c 01 00 00       	push   0x15c
c000d38a:	e8 d6 a4 ff ff       	call   c0007865 <malloc>
c000d38f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d392:	89 c3                	mov    ebx,eax
c000d394:	e8 7f ff 00 00       	call   c001d318 <PIT::PIT()>
c000d399:	58                   	pop    eax
c000d39a:	5a                   	pop    edx
c000d39b:	53                   	push   ebx
c000d39c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000d3a2:	e8 91 e6 ff ff       	call   c000ba38 <Device::addChild(Device*)>
c000d3a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3a9:	6a 00                	push   0x0
c000d3ab:	6a 00                	push   0x0
c000d3ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d3b1:	53                   	push   ebx
c000d3b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d3b5:	89 d8                	mov    eax,ebx
c000d3b7:	83 c4 28             	add    esp,0x28
c000d3ba:	5b                   	pop    ebx
c000d3bb:	c3                   	ret    

c000d3bc <timerHandler(unsigned int)>:
c000d3bc:	56                   	push   esi
c000d3bd:	53                   	push   ebx
c000d3be:	51                   	push   ecx
c000d3bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d3c3:	01 05 8c 64 02 c0    	add    DWORD PTR ds:0xc002648c,eax
c000d3c9:	80 3d bd 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebd,0x0
c000d3d0:	0f 84 4a 01 00 00    	je     c000d520 <timerHandler(unsigned int)+0x164>
c000d3d6:	fa                   	cli    
c000d3d7:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d3dd:	83 ec 0c             	sub    esp,0xc
c000d3e0:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c000d3e6:	68 78 71 02 c0       	push   0xc0027178
c000d3eb:	e8 90 0c 01 00       	call   c001e080 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d3f0:	83 c4 10             	add    esp,0x10
c000d3f3:	84 c0                	test   al,al
c000d3f5:	0f 85 a1 00 00 00    	jne    c000d49c <timerHandler(unsigned int)+0xe0>
c000d3fb:	83 ec 0c             	sub    esp,0xc
c000d3fe:	68 78 71 02 c0       	push   0xc0027178
c000d403:	e8 94 0c 01 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d408:	83 c4 10             	add    esp,0x10
c000d40b:	89 c6                	mov    esi,eax
c000d40d:	8d 76 00             	lea    esi,[esi+0x0]
c000d410:	83 ec 0c             	sub    esp,0xc
c000d413:	68 78 71 02 c0       	push   0xc0027178
c000d418:	e8 7f 0c 01 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d41d:	c7 04 24 78 71 02 c0 	mov    DWORD PTR [esp],0xc0027178
c000d424:	89 c3                	mov    ebx,eax
c000d426:	e8 79 0c 01 00       	call   c001e0a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d42b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d42e:	83 c4 10             	add    esp,0x10
c000d431:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c000d437:	77 23                	ja     c000d45c <timerHandler(unsigned int)+0xa0>
c000d439:	83 ec 0c             	sub    esp,0xc
c000d43c:	53                   	push   ebx
c000d43d:	e8 2e 78 00 00       	call   c0014c70 <unblockTask(ThreadControlBlock*)>
c000d442:	83 c4 10             	add    esp,0x10
c000d445:	39 de                	cmp    esi,ebx
c000d447:	75 27                	jne    c000d470 <timerHandler(unsigned int)+0xb4>
c000d449:	83 ec 0c             	sub    esp,0xc
c000d44c:	68 78 71 02 c0       	push   0xc0027178
c000d451:	e8 46 0c 01 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d456:	89 c6                	mov    esi,eax
c000d458:	eb 12                	jmp    c000d46c <timerHandler(unsigned int)+0xb0>
c000d45a:	66 90                	xchg   ax,ax
c000d45c:	52                   	push   edx
c000d45d:	52                   	push   edx
c000d45e:	53                   	push   ebx
c000d45f:	68 78 71 02 c0       	push   0xc0027178
c000d464:	e8 f3 0c 01 00       	call   c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d469:	8d 76 00             	lea    esi,[esi+0x0]
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	90                   	nop
c000d470:	83 ec 0c             	sub    esp,0xc
c000d473:	68 78 71 02 c0       	push   0xc0027178
c000d478:	e8 03 0c 01 00       	call   c001e080 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d47d:	83 c4 10             	add    esp,0x10
c000d480:	84 c0                	test   al,al
c000d482:	75 18                	jne    c000d49c <timerHandler(unsigned int)+0xe0>
c000d484:	83 ec 0c             	sub    esp,0xc
c000d487:	68 78 71 02 c0       	push   0xc0027178
c000d48c:	e8 0b 0c 01 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d491:	83 c4 10             	add    esp,0x10
c000d494:	39 f0                	cmp    eax,esi
c000d496:	0f 85 74 ff ff ff    	jne    c000d410 <timerHandler(unsigned int)+0x54>
c000d49c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d4a1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d4a5:	74 41                	je     c000d4e8 <timerHandler(unsigned int)+0x12c>
c000d4a7:	80 3d bc 3e 02 c0 00 	cmp    BYTE PTR ds:0xc0023ebc,0x0
c000d4ae:	74 38                	je     c000d4e8 <timerHandler(unsigned int)+0x12c>
c000d4b0:	fa                   	cli    
c000d4b1:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c000d4b7:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c000d4bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d4c2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d4c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d4cb:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d4ce:	72 08                	jb     c000d4d8 <timerHandler(unsigned int)+0x11c>
c000d4d0:	e8 d7 72 00 00       	call   c00147ac <schedule()>
c000d4d5:	8d 76 00             	lea    esi,[esi+0x0]
c000d4d8:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d4dd:	48                   	dec    eax
c000d4de:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d4e3:	75 03                	jne    c000d4e8 <timerHandler(unsigned int)+0x12c>
c000d4e5:	fb                   	sti    
c000d4e6:	66 90                	xchg   ax,ax
c000d4e8:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c000d4ed:	48                   	dec    eax
c000d4ee:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c000d4f3:	75 1b                	jne    c000d510 <timerHandler(unsigned int)+0x154>
c000d4f5:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c000d4fc:	74 12                	je     c000d510 <timerHandler(unsigned int)+0x154>
c000d4fe:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c000d508:	e8 9f 72 00 00       	call   c00147ac <schedule()>
c000d50d:	8d 76 00             	lea    esi,[esi+0x0]
c000d510:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c000d515:	48                   	dec    eax
c000d516:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c000d51b:	75 03                	jne    c000d520 <timerHandler(unsigned int)+0x164>
c000d51d:	fb                   	sti    
c000d51e:	66 90                	xchg   ax,ax
c000d520:	58                   	pop    eax
c000d521:	5b                   	pop    ebx
c000d522:	5e                   	pop    esi
c000d523:	c3                   	ret    

c000d524 <VCache::VCache(PhysicalDisk*)>:
c000d524:	53                   	push   ebx
c000d525:	83 ec 18             	sub    esp,0x18
c000d528:	ba e0 fb 01 c0       	mov    edx,0xc001fbe0
c000d52d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d531:	89 10                	mov    DWORD PTR [eax],edx
c000d533:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d537:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d53e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d542:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d549:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d54d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d554:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d55b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d55f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d566:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d56d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d571:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d57c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d584:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d58b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d592:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d596:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d59a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d59e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d5a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d5aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ae:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d5b5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d5bd:	83 ec 0c             	sub    esp,0xc
c000d5c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d5c4:	e8 9c a2 ff ff       	call   c0007865 <malloc>
c000d5c9:	83 c4 10             	add    esp,0x10
c000d5cc:	89 c3                	mov    ebx,eax
c000d5ce:	83 ec 0c             	sub    esp,0xc
c000d5d1:	53                   	push   ebx
c000d5d2:	e8 79 6f 00 00       	call   c0014550 <Mutex::Mutex()>
c000d5d7:	83 c4 10             	add    esp,0x10
c000d5da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5de:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d5e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5e5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d5e9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d5ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5f0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d5f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d5fb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d601:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d605:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d608:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d60c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d612:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d618:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d61c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d61f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d626:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d62a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d62e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d634:	05 00 02 00 00       	add    eax,0x200
c000d639:	c1 e0 03             	shl    eax,0x3
c000d63c:	83 ec 0c             	sub    esp,0xc
c000d63f:	50                   	push   eax
c000d640:	e8 20 a2 ff ff       	call   c0007865 <malloc>
c000d645:	83 c4 10             	add    esp,0x10
c000d648:	89 c2                	mov    edx,eax
c000d64a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d64e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d651:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d655:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d65c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d660:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d664:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d668:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d66e:	89 d0                	mov    eax,edx
c000d670:	c1 e0 02             	shl    eax,0x2
c000d673:	01 d0                	add    eax,edx
c000d675:	c1 e0 04             	shl    eax,0x4
c000d678:	83 ec 0c             	sub    esp,0xc
c000d67b:	50                   	push   eax
c000d67c:	e8 e4 a1 ff ff       	call   c0007865 <malloc>
c000d681:	83 c4 10             	add    esp,0x10
c000d684:	89 c2                	mov    edx,eax
c000d686:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d68a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d68d:	90                   	nop
c000d68e:	83 c4 18             	add    esp,0x18
c000d691:	5b                   	pop    ebx
c000d692:	c3                   	ret    
c000d693:	90                   	nop

c000d694 <VCache::invalidateReadBuffer()>:
c000d694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d698:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d69e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d6a2:	c3                   	ret    
c000d6a3:	90                   	nop

c000d6a4 <VCache::writeWriteBuffer()>:
c000d6a4:	53                   	push   ebx
c000d6a5:	83 ec 08             	sub    esp,0x8
c000d6a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d6ac:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d6b0:	74 1e                	je     c000d6d0 <VCache::writeWriteBuffer()+0x2c>
c000d6b2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6b5:	83 ec 0c             	sub    esp,0xc
c000d6b8:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6ba:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d6bd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d6c0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d6c3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d6c6:	50                   	push   eax
c000d6c7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d6ca:	83 c4 20             	add    esp,0x20
c000d6cd:	8d 76 00             	lea    esi,[esi+0x0]
c000d6d0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d6d7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d6de:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d6e2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d6e9:	83 c4 08             	add    esp,0x8
c000d6ec:	5b                   	pop    ebx
c000d6ed:	c3                   	ret    
c000d6ee:	66 90                	xchg   ax,ax

c000d6f0 <VCache::~VCache()>:
c000d6f0:	83 ec 0c             	sub    esp,0xc
c000d6f3:	ba e0 fb 01 c0       	mov    edx,0xc001fbe0
c000d6f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6fc:	89 10                	mov    DWORD PTR [eax],edx
c000d6fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d702:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d705:	84 c0                	test   al,al
c000d707:	74 0f                	je     c000d718 <VCache::~VCache()+0x28>
c000d709:	83 ec 0c             	sub    esp,0xc
c000d70c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d710:	e8 8f ff ff ff       	call   c000d6a4 <VCache::writeWriteBuffer()>
c000d715:	83 c4 10             	add    esp,0x10
c000d718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d71f:	83 ec 0c             	sub    esp,0xc
c000d722:	50                   	push   eax
c000d723:	e8 4d a1 ff ff       	call   c0007875 <free>
c000d728:	83 c4 10             	add    esp,0x10
c000d72b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d72f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d732:	83 ec 0c             	sub    esp,0xc
c000d735:	50                   	push   eax
c000d736:	e8 3a a1 ff ff       	call   c0007875 <free>
c000d73b:	83 c4 10             	add    esp,0x10
c000d73e:	90                   	nop
c000d73f:	83 c4 0c             	add    esp,0xc
c000d742:	c3                   	ret    
c000d743:	90                   	nop

c000d744 <VCache::~VCache()>:
c000d744:	83 ec 0c             	sub    esp,0xc
c000d747:	83 ec 0c             	sub    esp,0xc
c000d74a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d74e:	e8 9d ff ff ff       	call   c000d6f0 <VCache::~VCache()>
c000d753:	83 c4 10             	add    esp,0x10
c000d756:	83 ec 08             	sub    esp,0x8
c000d759:	6a 44                	push   0x44
c000d75b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d75f:	e8 a0 cd ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000d764:	83 c4 10             	add    esp,0x10
c000d767:	83 c4 0c             	add    esp,0xc
c000d76a:	c3                   	ret    
c000d76b:	90                   	nop

c000d76c <VCache::write(unsigned long long, int, void*)>:
c000d76c:	55                   	push   ebp
c000d76d:	57                   	push   edi
c000d76e:	56                   	push   esi
c000d76f:	53                   	push   ebx
c000d770:	83 ec 1c             	sub    esp,0x1c
c000d773:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d777:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d77b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d77f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d783:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000d787:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d78b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d78f:	74 07                	je     c000d798 <VCache::write(unsigned long long, int, void*)+0x2c>
c000d791:	53                   	push   ebx
c000d792:	e8 fd fe ff ff       	call   c000d694 <VCache::invalidateReadBuffer()>
c000d797:	58                   	pop    eax
c000d798:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d79c:	74 62                	je     c000d800 <VCache::write(unsigned long long, int, void*)+0x94>
c000d79e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d7a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d7a5:	99                   	cdq    
c000d7a6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7aa:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d7ad:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d7b0:	31 c1                	xor    ecx,eax
c000d7b2:	89 d0                	mov    eax,edx
c000d7b4:	89 ca                	mov    edx,ecx
c000d7b6:	31 e8                	xor    eax,ebp
c000d7b8:	09 c2                	or     edx,eax
c000d7ba:	75 38                	jne    c000d7f4 <VCache::write(unsigned long long, int, void*)+0x88>
c000d7bc:	83 ff 01             	cmp    edi,0x1
c000d7bf:	75 33                	jne    c000d7f4 <VCache::write(unsigned long long, int, void*)+0x88>
c000d7c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d7c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7c8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d7ce:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d7d1:	0f af c8             	imul   ecx,eax
c000d7d4:	01 cf                	add    edi,ecx
c000d7d6:	89 c1                	mov    ecx,eax
c000d7d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d7dd:	40                   	inc    eax
c000d7de:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d7e1:	83 f8 50             	cmp    eax,0x50
c000d7e4:	75 6a                	jne    c000d850 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d7e6:	83 ec 0c             	sub    esp,0xc
c000d7e9:	53                   	push   ebx
c000d7ea:	e8 b5 fe ff ff       	call   c000d6a4 <VCache::writeWriteBuffer()>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	eb 5c                	jmp    c000d850 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d7f4:	83 ec 0c             	sub    esp,0xc
c000d7f7:	53                   	push   ebx
c000d7f8:	e8 a7 fe ff ff       	call   c000d6a4 <VCache::writeWriteBuffer()>
c000d7fd:	83 c4 10             	add    esp,0x10
c000d800:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d803:	83 ff 4f             	cmp    edi,0x4f
c000d806:	7f 20                	jg     c000d828 <VCache::write(unsigned long long, int, void*)+0xbc>
c000d808:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000d80b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d80f:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000d812:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d815:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d819:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d81c:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d822:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d824:	eb 2a                	jmp    c000d850 <VCache::write(unsigned long long, int, void*)+0xe4>
c000d826:	66 90                	xchg   ax,ax
c000d828:	8b 10                	mov    edx,DWORD PTR [eax]
c000d82a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d82e:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000d832:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d836:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000d83a:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d83e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d842:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d845:	83 c4 1c             	add    esp,0x1c
c000d848:	5b                   	pop    ebx
c000d849:	5e                   	pop    esi
c000d84a:	5f                   	pop    edi
c000d84b:	5d                   	pop    ebp
c000d84c:	ff e0                	jmp    eax
c000d84e:	66 90                	xchg   ax,ax
c000d850:	83 c4 1c             	add    esp,0x1c
c000d853:	31 c0                	xor    eax,eax
c000d855:	5b                   	pop    ebx
c000d856:	5e                   	pop    esi
c000d857:	5f                   	pop    edi
c000d858:	5d                   	pop    ebp
c000d859:	c3                   	ret    

c000d85a <VCache::read(unsigned long long, int, void*)>:
c000d85a:	55                   	push   ebp
c000d85b:	57                   	push   edi
c000d85c:	56                   	push   esi
c000d85d:	53                   	push   ebx
c000d85e:	83 ec 1c             	sub    esp,0x1c
c000d861:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000d865:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d869:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d86d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000d871:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d875:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d879:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000d87d:	74 0d                	je     c000d88c <VCache::read(unsigned long long, int, void*)+0x32>
c000d87f:	83 ec 0c             	sub    esp,0xc
c000d882:	57                   	push   edi
c000d883:	e8 1c fe ff ff       	call   c000d6a4 <VCache::writeWriteBuffer()>
c000d888:	83 c4 10             	add    esp,0x10
c000d88b:	90                   	nop
c000d88c:	83 fd 01             	cmp    ebp,0x1
c000d88f:	0f 85 93 00 00 00    	jne    c000d928 <VCache::read(unsigned long long, int, void*)+0xce>
c000d895:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d898:	89 04 24             	mov    DWORD PTR [esp],eax
c000d89b:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000d8a2:	0f 85 80 00 00 00    	jne    c000d928 <VCache::read(unsigned long long, int, void*)+0xce>
c000d8a8:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000d8ab:	89 e9                	mov    ecx,ebp
c000d8ad:	f7 d9                	neg    ecx
c000d8af:	89 c8                	mov    eax,ecx
c000d8b1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d8b5:	c1 f8 1f             	sar    eax,0x1f
c000d8b8:	21 d9                	and    ecx,ebx
c000d8ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d8be:	89 c8                	mov    eax,ecx
c000d8c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d8c4:	21 f1                	and    ecx,esi
c000d8c6:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000d8ca:	89 ca                	mov    edx,ecx
c000d8cc:	74 2e                	je     c000d8fc <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8ce:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000d8d1:	75 29                	jne    c000d8fc <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8d3:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000d8d6:	75 24                	jne    c000d8fc <VCache::read(unsigned long long, int, void*)+0xa2>
c000d8d8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d8db:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d8e1:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000d8e4:	8d 70 ff             	lea    esi,[eax-0x1]
c000d8e7:	21 f3                	and    ebx,esi
c000d8e9:	0f af d9             	imul   ebx,ecx
c000d8ec:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000d8ef:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000d8f3:	89 de                	mov    esi,ebx
c000d8f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d8f7:	31 c0                	xor    eax,eax
c000d8f9:	eb 61                	jmp    c000d95c <VCache::read(unsigned long long, int, void*)+0x102>
c000d8fb:	90                   	nop
c000d8fc:	83 ec 0c             	sub    esp,0xc
c000d8ff:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000d903:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d907:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000d90a:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000d90d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d90f:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000d912:	55                   	push   ebp
c000d913:	52                   	push   edx
c000d914:	50                   	push   eax
c000d915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d919:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000d91c:	83 c4 20             	add    esp,0x20
c000d91f:	85 c0                	test   eax,eax
c000d921:	75 39                	jne    c000d95c <VCache::read(unsigned long long, int, void*)+0x102>
c000d923:	eb b3                	jmp    c000d8d8 <VCache::read(unsigned long long, int, void*)+0x7e>
c000d925:	8d 76 00             	lea    esi,[esi+0x0]
c000d928:	83 ec 0c             	sub    esp,0xc
c000d92b:	57                   	push   edi
c000d92c:	e8 63 fd ff ff       	call   c000d694 <VCache::invalidateReadBuffer()>
c000d931:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000d934:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d938:	8b 10                	mov    edx,DWORD PTR [eax]
c000d93a:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000d93e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000d942:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000d946:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000d94a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d94e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d951:	83 c4 2c             	add    esp,0x2c
c000d954:	5b                   	pop    ebx
c000d955:	5e                   	pop    esi
c000d956:	5f                   	pop    edi
c000d957:	5d                   	pop    ebp
c000d958:	ff e0                	jmp    eax
c000d95a:	66 90                	xchg   ax,ax
c000d95c:	83 c4 1c             	add    esp,0x1c
c000d95f:	5b                   	pop    ebx
c000d960:	5e                   	pop    esi
c000d961:	5f                   	pop    edi
c000d962:	5d                   	pop    ebp
c000d963:	c3                   	ret    

c000d964 <Video::putrect(int, int, int, int, unsigned int)>:
c000d964:	55                   	push   ebp
c000d965:	57                   	push   edi
c000d966:	56                   	push   esi
c000d967:	53                   	push   ebx
c000d968:	83 ec 1c             	sub    esp,0x1c
c000d96b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d96f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d973:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d977:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d97b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d97f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d983:	01 df                	add    edi,ebx
c000d985:	39 fb                	cmp    ebx,edi
c000d987:	7d 1f                	jge    c000d9a8 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d989:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d98d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d991:	7d 12                	jge    c000d9a5 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d993:	8b 16                	mov    edx,DWORD PTR [esi]
c000d995:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d999:	53                   	push   ebx
c000d99a:	55                   	push   ebp
c000d99b:	45                   	inc    ebp
c000d99c:	56                   	push   esi
c000d99d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	eb e8                	jmp    c000d98d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d9a5:	43                   	inc    ebx
c000d9a6:	eb dd                	jmp    c000d985 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d9a8:	83 c4 1c             	add    esp,0x1c
c000d9ab:	5b                   	pop    ebx
c000d9ac:	5e                   	pop    esi
c000d9ad:	5f                   	pop    edi
c000d9ae:	5d                   	pop    ebp
c000d9af:	c3                   	ret    

c000d9b0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d9b0:	55                   	push   ebp
c000d9b1:	57                   	push   edi
c000d9b2:	31 ff                	xor    edi,edi
c000d9b4:	56                   	push   esi
c000d9b5:	53                   	push   ebx
c000d9b6:	83 ec 1c             	sub    esp,0x1c
c000d9b9:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d9bd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d9c1:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d9c8:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d9cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9d1:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d9d5:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d9d9:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d9dc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d9e0:	01 f9                	add    ecx,edi
c000d9e2:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d9e6:	7d 2f                	jge    c000da17 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d9e8:	31 f6                	xor    esi,esi
c000d9ea:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d9ee:	01 f2                	add    edx,esi
c000d9f0:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d9f4:	7d 1a                	jge    c000da10 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d9f6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d9f9:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d9fc:	46                   	inc    esi
c000d9fd:	51                   	push   ecx
c000d9fe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da02:	52                   	push   edx
c000da03:	55                   	push   ebp
c000da04:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da07:	83 c4 10             	add    esp,0x10
c000da0a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000da0e:	eb da                	jmp    c000d9ea <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000da10:	47                   	inc    edi
c000da11:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000da15:	eb c5                	jmp    c000d9dc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000da17:	83 c4 1c             	add    esp,0x1c
c000da1a:	5b                   	pop    ebx
c000da1b:	5e                   	pop    esi
c000da1c:	5f                   	pop    edi
c000da1d:	5d                   	pop    ebp
c000da1e:	c3                   	ret    
c000da1f:	90                   	nop

c000da20 <Video::blit(unsigned int*, int, int, int, int)>:
c000da20:	55                   	push   ebp
c000da21:	57                   	push   edi
c000da22:	56                   	push   esi
c000da23:	53                   	push   ebx
c000da24:	83 ec 1c             	sub    esp,0x1c
c000da27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000da2f:	85 c0                	test   eax,eax
c000da31:	79 02                	jns    c000da35 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000da33:	31 c0                	xor    eax,eax
c000da35:	c1 e0 02             	shl    eax,0x2
c000da38:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000da3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da40:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000da44:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000da48:	39 d8                	cmp    eax,ebx
c000da4a:	7e 49                	jle    c000da95 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000da4c:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000da52:	7c 41                	jl     c000da95 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000da54:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000da58:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000da5c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000da60:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000da64:	39 f9                	cmp    ecx,edi
c000da66:	7e 22                	jle    c000da8a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000da68:	83 c5 04             	add    ebp,0x4
c000da6b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000da71:	7c 14                	jl     c000da87 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000da73:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000da75:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000da78:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000da7c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000da80:	56                   	push   esi
c000da81:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000da84:	83 c4 10             	add    esp,0x10
c000da87:	47                   	inc    edi
c000da88:	eb d2                	jmp    c000da5c <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000da8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da8e:	43                   	inc    ebx
c000da8f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000da93:	eb ab                	jmp    c000da40 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000da95:	83 c4 1c             	add    esp,0x1c
c000da98:	5b                   	pop    ebx
c000da99:	5e                   	pop    esi
c000da9a:	5f                   	pop    edi
c000da9b:	5d                   	pop    ebp
c000da9c:	c3                   	ret    
c000da9d:	90                   	nop

c000da9e <Video::clearScreen(unsigned int)>:
c000da9e:	57                   	push   edi
c000da9f:	56                   	push   esi
c000daa0:	53                   	push   ebx
c000daa1:	31 db                	xor    ebx,ebx
c000daa3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000daa7:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000daad:	7e 1f                	jle    c000dace <Video::clearScreen(unsigned int)+0x30>
c000daaf:	31 ff                	xor    edi,edi
c000dab1:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000dab7:	7e 12                	jle    c000dacb <Video::clearScreen(unsigned int)+0x2d>
c000dab9:	8b 06                	mov    eax,DWORD PTR [esi]
c000dabb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dabf:	53                   	push   ebx
c000dac0:	57                   	push   edi
c000dac1:	47                   	inc    edi
c000dac2:	56                   	push   esi
c000dac3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dac6:	83 c4 10             	add    esp,0x10
c000dac9:	eb e6                	jmp    c000dab1 <Video::clearScreen(unsigned int)+0x13>
c000dacb:	43                   	inc    ebx
c000dacc:	eb d9                	jmp    c000daa7 <Video::clearScreen(unsigned int)+0x9>
c000dace:	5b                   	pop    ebx
c000dacf:	5e                   	pop    esi
c000dad0:	5f                   	pop    edi
c000dad1:	c3                   	ret    

c000dad2 <Video::putpixel(int, int, unsigned int)>:
c000dad2:	c7 44 24 04 e8 fb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001fbe8
c000dada:	e9 d0 28 00 00       	jmp    c00103af <KePanic(char const*)>
c000dadf:	90                   	nop

c000dae0 <Video::readPixelApprox(int, int)>:
c000dae0:	83 ec 18             	sub    esp,0x18
c000dae3:	68 09 fc 01 c0       	push   0xc001fc09
c000dae8:	e8 c2 28 00 00       	call   c00103af <KePanic(char const*)>
c000daed:	31 c0                	xor    eax,eax
c000daef:	83 c4 1c             	add    esp,0x1c
c000daf2:	c3                   	ret    
c000daf3:	90                   	nop

c000daf4 <Video::Video(char const*)>:
c000daf4:	83 ec 0c             	sub    esp,0xc
c000daf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dafb:	83 ec 08             	sub    esp,0x8
c000dafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db02:	50                   	push   eax
c000db03:	e8 c8 e0 ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000db08:	83 c4 10             	add    esp,0x10
c000db0b:	ba 84 fc 01 c0       	mov    edx,0xc001fc84
c000db10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db14:	89 10                	mov    DWORD PTR [eax],edx
c000db16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db1a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000db24:	90                   	nop
c000db25:	83 c4 0c             	add    esp,0xc
c000db28:	c3                   	ret    
c000db29:	90                   	nop

c000db2a <Video::~Video()>:
c000db2a:	83 ec 0c             	sub    esp,0xc
c000db2d:	ba 84 fc 01 c0       	mov    edx,0xc001fc84
c000db32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db36:	89 10                	mov    DWORD PTR [eax],edx
c000db38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db3c:	83 ec 0c             	sub    esp,0xc
c000db3f:	50                   	push   eax
c000db40:	e8 f5 dd ff ff       	call   c000b93a <Device::~Device()>
c000db45:	83 c4 10             	add    esp,0x10
c000db48:	90                   	nop
c000db49:	83 c4 0c             	add    esp,0xc
c000db4c:	c3                   	ret    
c000db4d:	90                   	nop

c000db4e <Video::~Video()>:
c000db4e:	83 ec 0c             	sub    esp,0xc
c000db51:	83 ec 0c             	sub    esp,0xc
c000db54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db58:	e8 cd ff ff ff       	call   c000db2a <Video::~Video()>
c000db5d:	83 c4 10             	add    esp,0x10
c000db60:	83 ec 08             	sub    esp,0x8
c000db63:	68 64 01 00 00       	push   0x164
c000db68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db6c:	e8 93 c9 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c000db71:	83 c4 10             	add    esp,0x10
c000db74:	83 c4 0c             	add    esp,0xc
c000db77:	c3                   	ret    

c000db78 <Video::isMonochrome()>:
c000db78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db7c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000db82:	c3                   	ret    
c000db83:	90                   	nop

c000db84 <Video::getWidth()>:
c000db84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db88:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db8e:	c3                   	ret    
c000db8f:	90                   	nop

c000db90 <Video::getHeight()>:
c000db90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db94:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000db9a:	c3                   	ret    
c000db9b:	90                   	nop

c000db9c <Video::drawCursor(int, int, unsigned int*, int)>:
c000db9c:	55                   	push   ebp
c000db9d:	57                   	push   edi
c000db9e:	56                   	push   esi
c000db9f:	53                   	push   ebx
c000dba0:	83 ec 2c             	sub    esp,0x2c
c000dba3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dba7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dbab:	83 f8 01             	cmp    eax,0x1
c000dbae:	19 c9                	sbb    ecx,ecx
c000dbb0:	31 db                	xor    ebx,ebx
c000dbb2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000dbb6:	89 cd                	mov    ebp,ecx
c000dbb8:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000dbc0:	f7 d5                	not    ebp
c000dbc2:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000dbc8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dbcc:	01 d8                	add    eax,ebx
c000dbce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbd2:	56                   	push   esi
c000dbd3:	e8 b8 ff ff ff       	call   c000db90 <Video::getHeight()>
c000dbd8:	59                   	pop    ecx
c000dbd9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dbdd:	7e 70                	jle    c000dc4f <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000dbdf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dbe3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000dbe7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dbea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dbee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dbf2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dbf9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbfd:	89 f8                	mov    eax,edi
c000dbff:	83 c0 20             	add    eax,0x20
c000dc02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc06:	56                   	push   esi
c000dc07:	e8 78 ff ff ff       	call   c000db84 <Video::getWidth()>
c000dc0c:	5a                   	pop    edx
c000dc0d:	39 c7                	cmp    edi,eax
c000dc0f:	7d 34                	jge    c000dc45 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000dc11:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dc16:	74 05                	je     c000dc1d <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000dc18:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc1a:	55                   	push   ebp
c000dc1b:	eb 0d                	jmp    c000dc2a <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000dc1d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dc22:	74 12                	je     c000dc36 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000dc24:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc2a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc2e:	57                   	push   edi
c000dc2f:	56                   	push   esi
c000dc30:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc33:	83 c4 10             	add    esp,0x10
c000dc36:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dc3a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dc3e:	47                   	inc    edi
c000dc3f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000dc43:	75 c1                	jne    c000dc06 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000dc45:	43                   	inc    ebx
c000dc46:	83 fb 20             	cmp    ebx,0x20
c000dc49:	0f 85 79 ff ff ff    	jne    c000dbc8 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000dc4f:	83 c4 2c             	add    esp,0x2c
c000dc52:	5b                   	pop    ebx
c000dc53:	5e                   	pop    esi
c000dc54:	5f                   	pop    edi
c000dc55:	5d                   	pop    ebp
c000dc56:	c3                   	ret    
c000dc57:	90                   	nop

c000dc58 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000dc58:	55                   	push   ebp
c000dc59:	57                   	push   edi
c000dc5a:	56                   	push   esi
c000dc5b:	53                   	push   ebx
c000dc5c:	83 ec 28             	sub    esp,0x28
c000dc5f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dc63:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dc67:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dc6b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dc6f:	c1 e6 08             	shl    esi,0x8
c000dc72:	01 c6                	add    esi,eax
c000dc74:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dc78:	c1 e0 08             	shl    eax,0x8
c000dc7b:	01 d0                	add    eax,edx
c000dc7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc85:	0f af c6             	imul   eax,esi
c000dc88:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dc8f:	50                   	push   eax
c000dc90:	e8 d0 9b ff ff       	call   c0007865 <malloc>
c000dc95:	83 c4 10             	add    esp,0x10
c000dc98:	89 c7                	mov    edi,eax
c000dc9a:	85 c0                	test   eax,eax
c000dc9c:	75 10                	jne    c000dcae <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dc9e:	83 ec 0c             	sub    esp,0xc
c000dca1:	68 34 fc 01 c0       	push   0xc001fc34
c000dca6:	e8 04 27 00 00       	call   c00103af <KePanic(char const*)>
c000dcab:	83 c4 10             	add    esp,0x10
c000dcae:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dcb1:	ba 12 00 00 00       	mov    edx,0x12
c000dcb6:	84 c0                	test   al,al
c000dcb8:	74 11                	je     c000dccb <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dcba:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dcbe:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dcc2:	c1 fa 03             	sar    edx,0x3
c000dcc5:	0f af d1             	imul   edx,ecx
c000dcc8:	83 c2 12             	add    edx,0x12
c000dccb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dccf:	74 04                	je     c000dcd5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dcd1:	85 f6                	test   esi,esi
c000dcd3:	75 12                	jne    c000dce7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dcd5:	83 ec 0c             	sub    esp,0xc
c000dcd8:	68 44 fc 01 c0       	push   0xc001fc44
c000dcdd:	e8 18 c9 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000dce2:	e9 b8 00 00 00       	jmp    c000dd9f <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dce7:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dceb:	80 f9 02             	cmp    cl,0x2
c000dcee:	0f 85 96 00 00 00    	jne    c000dd8a <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dcf4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dcf9:	75 0e                	jne    c000dd09 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dcfb:	84 c0                	test   al,al
c000dcfd:	75 0a                	jne    c000dd09 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dcff:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dd02:	83 e8 18             	sub    eax,0x18
c000dd05:	a8 f7                	test   al,0xf7
c000dd07:	74 0a                	je     c000dd13 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dd09:	83 ec 0c             	sub    esp,0xc
c000dd0c:	68 59 fc 01 c0       	push   0xc001fc59
c000dd11:	eb 7f                	jmp    c000dd92 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dd13:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd1b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dd23:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dd27:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dd2f:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dd33:	75 0c                	jne    c000dd41 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dd35:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dd3a:	c1 e0 18             	shl    eax,0x18
c000dd3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd41:	45                   	inc    ebp
c000dd42:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dd47:	c1 e1 10             	shl    ecx,0x10
c000dd4a:	89 c8                	mov    eax,ecx
c000dd4c:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dd51:	c1 e1 08             	shl    ecx,0x8
c000dd54:	09 c1                	or     ecx,eax
c000dd56:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dd5a:	09 c1                	or     ecx,eax
c000dd5c:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dd60:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dd64:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dd68:	c1 f8 03             	sar    eax,0x3
c000dd6b:	01 c2                	add    edx,eax
c000dd6d:	89 e8                	mov    eax,ebp
c000dd6f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dd73:	39 c6                	cmp    esi,eax
c000dd75:	7f b0                	jg     c000dd27 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dd77:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dd7b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dd7f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dd82:	7e 22                	jle    c000dda6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dd84:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dd88:	eb 99                	jmp    c000dd23 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dd8a:	50                   	push   eax
c000dd8b:	50                   	push   eax
c000dd8c:	51                   	push   ecx
c000dd8d:	68 67 fc 01 c0       	push   0xc001fc67
c000dd92:	e8 63 c8 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000dd97:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dd9a:	e8 d6 9a ff ff       	call   c0007875 <free>
c000dd9f:	83 c4 10             	add    esp,0x10
c000dda2:	31 ff                	xor    edi,edi
c000dda4:	eb 0f                	jmp    c000ddb5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dda6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ddaa:	89 30                	mov    DWORD PTR [eax],esi
c000ddac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ddb0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ddb3:	89 30                	mov    DWORD PTR [eax],esi
c000ddb5:	83 c4 1c             	add    esp,0x1c
c000ddb8:	89 f8                	mov    eax,edi
c000ddba:	5b                   	pop    ebx
c000ddbb:	5e                   	pop    esi
c000ddbc:	5f                   	pop    edi
c000ddbd:	5d                   	pop    ebp
c000ddbe:	c3                   	ret    
c000ddbf:	90                   	nop

c000ddc0 <Video::putTGA(int, int, unsigned char*, int)>:
c000ddc0:	55                   	push   ebp
c000ddc1:	57                   	push   edi
c000ddc2:	56                   	push   esi
c000ddc3:	53                   	push   ebx
c000ddc4:	83 ec 28             	sub    esp,0x28
c000ddc7:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ddcb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ddcf:	50                   	push   eax
c000ddd0:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ddd4:	50                   	push   eax
c000ddd5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ddd9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dddd:	56                   	push   esi
c000ddde:	e8 75 fe ff ff       	call   c000dc58 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dde3:	83 c4 20             	add    esp,0x20
c000dde6:	85 c0                	test   eax,eax
c000dde8:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ddec:	74 35                	je     c000de23 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ddee:	89 c7                	mov    edi,eax
c000ddf0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ddf4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ddf8:	39 d8                	cmp    eax,ebx
c000ddfa:	7e 27                	jle    c000de23 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ddfc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de04:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000de08:	39 e8                	cmp    eax,ebp
c000de0a:	7e 14                	jle    c000de20 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000de0c:	8b 06                	mov    eax,DWORD PTR [esi]
c000de0e:	83 c7 04             	add    edi,0x4
c000de11:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000de14:	53                   	push   ebx
c000de15:	55                   	push   ebp
c000de16:	45                   	inc    ebp
c000de17:	56                   	push   esi
c000de18:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	eb e0                	jmp    c000de00 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000de20:	43                   	inc    ebx
c000de21:	eb cd                	jmp    c000ddf0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000de23:	83 c4 1c             	add    esp,0x1c
c000de26:	5b                   	pop    ebx
c000de27:	5e                   	pop    esi
c000de28:	5f                   	pop    edi
c000de29:	5d                   	pop    ebp
c000de2a:	c3                   	ret    
c000de2b:	90                   	nop

c000de2c <ACPI::close(int, int, void*)>:
c000de2c:	83 ec 1c             	sub    esp,0x1c
c000de2f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000de37:	74 0b                	je     c000de44 <ACPI::close(int, int, void*)+0x18>
c000de39:	b8 00 00 00 00       	mov    eax,0x0
c000de3e:	e9 9d 00 00 00       	jmp    c000dee0 <ACPI::close(int, int, void*)+0xb4>
c000de43:	90                   	nop
c000de44:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000de49:	75 29                	jne    c000de74 <ACPI::close(int, int, void*)+0x48>
c000de4b:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000de50:	85 c0                	test   eax,eax
c000de52:	74 08                	je     c000de5c <ACPI::close(int, int, void*)+0x30>
c000de54:	a1 a8 64 02 c0       	mov    eax,ds:0xc00264a8
c000de59:	ff d0                	call   eax
c000de5b:	90                   	nop
c000de5c:	83 ec 0c             	sub    esp,0xc
c000de5f:	68 c8 fc 01 c0       	push   0xc001fcc8
c000de64:	e8 46 25 00 00       	call   c00103af <KePanic(char const*)>
c000de69:	83 c4 10             	add    esp,0x10
c000de6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000de71:	eb 6d                	jmp    c000dee0 <ACPI::close(int, int, void*)+0xb4>
c000de73:	90                   	nop
c000de74:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000de79:	75 5d                	jne    c000ded8 <ACPI::close(int, int, void*)+0xac>
c000de7b:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000de80:	85 c0                	test   eax,eax
c000de82:	74 08                	je     c000de8c <ACPI::close(int, int, void*)+0x60>
c000de84:	a1 a4 64 02 c0       	mov    eax,ds:0xc00264a4
c000de89:	ff d0                	call   eax
c000de8b:	90                   	nop
c000de8c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000de91:	8d 76 00             	lea    esi,[esi+0x0]
c000de94:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000de98:	25 ff 00 00 00       	and    eax,0xff
c000de9d:	83 e0 02             	and    eax,0x2
c000dea0:	74 1e                	je     c000dec0 <ACPI::close(int, int, void*)+0x94>
c000dea2:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dea9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dead:	89 c2                	mov    edx,eax
c000deaf:	ec                   	in     al,dx
c000deb0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000deb4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000deb8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000debc:	eb d6                	jmp    c000de94 <ACPI::close(int, int, void*)+0x68>
c000debe:	66 90                	xchg   ax,ax
c000dec0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dec7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000decc:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ded0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ded4:	ee                   	out    dx,al
c000ded5:	8d 76 00             	lea    esi,[esi+0x0]
c000ded8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dedd:	8d 76 00             	lea    esi,[esi+0x0]
c000dee0:	83 c4 1c             	add    esp,0x1c
c000dee3:	c3                   	ret    

c000dee4 <findRSDP()>:
c000dee4:	83 ec 1c             	sub    esp,0x1c
c000dee7:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000deec:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000def2:	83 e0 04             	and    eax,0x4
c000def5:	84 c0                	test   al,al
c000def7:	75 07                	jne    c000df00 <findRSDP()+0x1c>
c000def9:	b8 00 00 00 00       	mov    eax,0x0
c000defe:	eb 70                	jmp    c000df70 <findRSDP()+0x8c>
c000df00:	a1 e8 3e 02 c0       	mov    eax,ds:0xc0023ee8
c000df05:	3d ff 07 00 00       	cmp    eax,0x7ff
c000df0a:	7f 1c                	jg     c000df28 <findRSDP()+0x44>
c000df0c:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df11:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000df17:	83 e2 fb             	and    edx,0xfffffffb
c000df1a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000df20:	b8 00 00 00 00       	mov    eax,0x0
c000df25:	eb 49                	jmp    c000df70 <findRSDP()+0x8c>
c000df27:	90                   	nop
c000df28:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000df30:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000df38:	77 2e                	ja     c000df68 <findRSDP()+0x84>
c000df3a:	83 ec 04             	sub    esp,0x4
c000df3d:	6a 08                	push   0x8
c000df3f:	68 63 fd 01 c0       	push   0xc001fd63
c000df44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df48:	e8 33 24 ff ff       	call   c0000380 <memcmp>
c000df4d:	83 c4 10             	add    esp,0x10
c000df50:	85 c0                	test   eax,eax
c000df52:	0f 94 c0             	sete   al
c000df55:	84 c0                	test   al,al
c000df57:	74 07                	je     c000df60 <findRSDP()+0x7c>
c000df59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df5d:	eb 11                	jmp    c000df70 <findRSDP()+0x8c>
c000df5f:	90                   	nop
c000df60:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000df65:	eb c9                	jmp    c000df30 <findRSDP()+0x4c>
c000df67:	90                   	nop
c000df68:	b8 00 00 00 00       	mov    eax,0x0
c000df6d:	8d 76 00             	lea    esi,[esi+0x0]
c000df70:	83 c4 1c             	add    esp,0x1c
c000df73:	c3                   	ret    

c000df74 <loadACPITables(unsigned char*)>:
c000df74:	57                   	push   edi
c000df75:	56                   	push   esi
c000df76:	53                   	push   ebx
c000df77:	83 ec 60             	sub    esp,0x60
c000df7a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000df7f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df85:	83 e0 04             	and    eax,0x4
c000df88:	84 c0                	test   al,al
c000df8a:	0f 84 3c 02 00 00    	je     c000e1cc <loadACPITables(unsigned char*)+0x258>
c000df90:	a0 c0 66 02 c0       	mov    al,ds:0xc00266c0
c000df95:	84 c0                	test   al,al
c000df97:	74 77                	je     c000e010 <loadACPITables(unsigned char*)+0x9c>
c000df99:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df9d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dfa1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dfa5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dfa8:	83 e8 24             	sub    eax,0x24
c000dfab:	c1 e8 03             	shr    eax,0x3
c000dfae:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dfb2:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dfba:	66 90                	xchg   ax,ax
c000dfbc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dfc0:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dfc4:	0f 8d b6 00 00 00    	jge    c000e080 <loadACPITables(unsigned char*)+0x10c>
c000dfca:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dfce:	83 c0 24             	add    eax,0x24
c000dfd1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dfd5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dfd9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dfdd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dfe1:	c1 e0 03             	shl    eax,0x3
c000dfe4:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dfe8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dfec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dfef:	8b 00                	mov    eax,DWORD PTR [eax]
c000dff1:	89 c1                	mov    ecx,eax
c000dff3:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000dff8:	8d 50 01             	lea    edx,[eax+0x1]
c000dffb:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e001:	89 ca                	mov    edx,ecx
c000e003:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e00a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e00e:	eb ac                	jmp    c000dfbc <loadACPITables(unsigned char*)+0x48>
c000e010:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e014:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e018:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e01c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e01f:	83 e8 24             	sub    eax,0x24
c000e022:	c1 e8 02             	shr    eax,0x2
c000e025:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e029:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e031:	8d 76 00             	lea    esi,[esi+0x0]
c000e034:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e038:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e03c:	7d 42                	jge    c000e080 <loadACPITables(unsigned char*)+0x10c>
c000e03e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e042:	83 c0 24             	add    eax,0x24
c000e045:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e049:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e04d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e051:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e055:	c1 e0 02             	shl    eax,0x2
c000e058:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e05c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e060:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e062:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e067:	8d 50 01             	lea    edx,[eax+0x1]
c000e06a:	89 15 ac 64 02 c0    	mov    DWORD PTR ds:0xc00264ac,edx
c000e070:	89 ca                	mov    edx,ecx
c000e072:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e079:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e07d:	eb b5                	jmp    c000e034 <loadACPITables(unsigned char*)+0xc0>
c000e07f:	90                   	nop
c000e080:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e088:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e08d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e091:	0f 8d 39 01 00 00    	jge    c000e1d0 <loadACPITables(unsigned char*)+0x25c>
c000e097:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e09b:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e0a2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e0a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0aa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e0ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0b2:	25 ff 0f 00 00       	and    eax,0xfff
c000e0b7:	89 c6                	mov    esi,eax
c000e0b9:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e0bf:	83 ec 0c             	sub    esp,0xc
c000e0c2:	6a 01                	push   0x1
c000e0c4:	e8 74 b2 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c000e0c9:	83 c4 10             	add    esp,0x10
c000e0cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e0d0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e0d6:	83 ec 0c             	sub    esp,0xc
c000e0d9:	6a 01                	push   0x1
c000e0db:	6a 01                	push   0x1
c000e0dd:	50                   	push   eax
c000e0de:	52                   	push   edx
c000e0df:	53                   	push   ebx
c000e0e0:	e8 15 bc ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e0e5:	83 c4 20             	add    esp,0x20
c000e0e8:	09 f0                	or     eax,esi
c000e0ea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e0ee:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e0f2:	c1 e0 03             	shl    eax,0x3
c000e0f5:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e0fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e0fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e106:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e10e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e112:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e116:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e11a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e11e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e122:	89 c6                	mov    esi,eax
c000e124:	89 d7                	mov    edi,edx
c000e126:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e128:	89 c8                	mov    eax,ecx
c000e12a:	89 fa                	mov    edx,edi
c000e12c:	89 f3                	mov    ebx,esi
c000e12e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e132:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e136:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e13a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e13e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e141:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e145:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e149:	05 00 10 00 00       	add    eax,0x1000
c000e14e:	c1 e8 0c             	shr    eax,0xc
c000e151:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e155:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e159:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e15d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e161:	25 ff 0f 00 00       	and    eax,0xfff
c000e166:	89 c6                	mov    esi,eax
c000e168:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e16e:	83 ec 0c             	sub    esp,0xc
c000e171:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e175:	e8 c3 b1 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c000e17a:	83 c4 10             	add    esp,0x10
c000e17d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e181:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e187:	83 ec 0c             	sub    esp,0xc
c000e18a:	6a 01                	push   0x1
c000e18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e190:	50                   	push   eax
c000e191:	52                   	push   edx
c000e192:	53                   	push   ebx
c000e193:	e8 62 bb ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e198:	83 c4 20             	add    esp,0x20
c000e19b:	09 f0                	or     eax,esi
c000e19d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e1a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1a5:	83 ec 0c             	sub    esp,0xc
c000e1a8:	50                   	push   eax
c000e1a9:	e8 83 b4 ff ff       	call   c0009631 <Virt::freeKernelVirtualPages(unsigned long)>
c000e1ae:	83 c4 10             	add    esp,0x10
c000e1b1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e1b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e1b9:	89 14 c5 c4 64 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9b3c],edx
c000e1c0:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e1c4:	e9 bf fe ff ff       	jmp    c000e088 <loadACPITables(unsigned char*)+0x114>
c000e1c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e1cc:	90                   	nop
c000e1cd:	8d 76 00             	lea    esi,[esi+0x0]
c000e1d0:	83 c4 60             	add    esp,0x60
c000e1d3:	5b                   	pop    ebx
c000e1d4:	5e                   	pop    esi
c000e1d5:	5f                   	pop    edi
c000e1d6:	c3                   	ret    
c000e1d7:	90                   	nop

c000e1d8 <findRSDT(unsigned char*)>:
c000e1d8:	57                   	push   edi
c000e1d9:	56                   	push   esi
c000e1da:	53                   	push   ebx
c000e1db:	83 ec 50             	sub    esp,0x50
c000e1de:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e1e3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e1e9:	83 e0 04             	and    eax,0x4
c000e1ec:	84 c0                	test   al,al
c000e1ee:	75 0c                	jne    c000e1fc <findRSDT(unsigned char*)+0x24>
c000e1f0:	b8 00 00 00 00       	mov    eax,0x0
c000e1f5:	e9 26 01 00 00       	jmp    c000e320 <findRSDT(unsigned char*)+0x148>
c000e1fa:	66 90                	xchg   ax,ax
c000e1fc:	89 e0                	mov    eax,esp
c000e1fe:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e202:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e206:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e20a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e212:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e216:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e21a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e21e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e222:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e226:	89 c6                	mov    esi,eax
c000e228:	89 d7                	mov    edi,edx
c000e22a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e22c:	89 c8                	mov    eax,ecx
c000e22e:	89 fa                	mov    edx,edi
c000e230:	89 f3                	mov    ebx,esi
c000e232:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e236:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e23a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e23e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e242:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e246:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e24e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e252:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e256:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e25a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e25e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e262:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e266:	25 ff 0f 00 00       	and    eax,0xfff
c000e26b:	89 c6                	mov    esi,eax
c000e26d:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e273:	83 ec 0c             	sub    esp,0xc
c000e276:	6a 02                	push   0x2
c000e278:	e8 c0 b0 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c000e27d:	83 c4 10             	add    esp,0x10
c000e280:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e284:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e28a:	83 ec 0c             	sub    esp,0xc
c000e28d:	6a 01                	push   0x1
c000e28f:	6a 02                	push   0x2
c000e291:	50                   	push   eax
c000e292:	52                   	push   edx
c000e293:	53                   	push   ebx
c000e294:	e8 61 ba ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e299:	83 c4 20             	add    esp,0x20
c000e29c:	09 f0                	or     eax,esi
c000e29e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e2a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e2a6:	25 ff 0f 00 00       	and    eax,0xfff
c000e2ab:	89 c6                	mov    esi,eax
c000e2ad:	8b 1d b0 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb0
c000e2b3:	83 ec 0c             	sub    esp,0xc
c000e2b6:	6a 02                	push   0x2
c000e2b8:	e8 80 b0 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c000e2bd:	83 c4 10             	add    esp,0x10
c000e2c0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e2c4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e2ca:	83 ec 0c             	sub    esp,0xc
c000e2cd:	6a 01                	push   0x1
c000e2cf:	6a 02                	push   0x2
c000e2d1:	50                   	push   eax
c000e2d2:	52                   	push   edx
c000e2d3:	53                   	push   ebx
c000e2d4:	e8 21 ba ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e2d9:	83 c4 20             	add    esp,0x20
c000e2dc:	09 f0                	or     eax,esi
c000e2de:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e2e2:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e2e7:	75 13                	jne    c000e2fc <findRSDT(unsigned char*)+0x124>
c000e2e9:	c6 05 c0 66 02 c0 00 	mov    BYTE PTR ds:0xc00266c0,0x0
c000e2f0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e2f4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e2f8:	eb 22                	jmp    c000e31c <findRSDT(unsigned char*)+0x144>
c000e2fa:	66 90                	xchg   ax,ax
c000e2fc:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e301:	75 11                	jne    c000e314 <findRSDT(unsigned char*)+0x13c>
c000e303:	c6 05 c0 66 02 c0 01 	mov    BYTE PTR ds:0xc00266c0,0x1
c000e30a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e30e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e312:	eb 08                	jmp    c000e31c <findRSDT(unsigned char*)+0x144>
c000e314:	b8 00 00 00 00       	mov    eax,0x0
c000e319:	eb 05                	jmp    c000e320 <findRSDT(unsigned char*)+0x148>
c000e31b:	90                   	nop
c000e31c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e320:	83 c4 50             	add    esp,0x50
c000e323:	5b                   	pop    ebx
c000e324:	5e                   	pop    esi
c000e325:	5f                   	pop    edi
c000e326:	c3                   	ret    
c000e327:	90                   	nop

c000e328 <findDataTable(unsigned char*, char*)>:
c000e328:	83 ec 1c             	sub    esp,0x1c
c000e32b:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e330:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e336:	83 e0 04             	and    eax,0x4
c000e339:	84 c0                	test   al,al
c000e33b:	75 07                	jne    c000e344 <findDataTable(unsigned char*, char*)+0x1c>
c000e33d:	b8 00 00 00 00       	mov    eax,0x0
c000e342:	eb 58                	jmp    c000e39c <findDataTable(unsigned char*, char*)+0x74>
c000e344:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e34c:	a1 ac 64 02 c0       	mov    eax,ds:0xc00264ac
c000e351:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e355:	7d 3d                	jge    c000e394 <findDataTable(unsigned char*, char*)+0x6c>
c000e357:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e35b:	c1 e0 03             	shl    eax,0x3
c000e35e:	05 c0 64 02 c0       	add    eax,0xc00264c0
c000e363:	83 ec 04             	sub    esp,0x4
c000e366:	6a 04                	push   0x4
c000e368:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e36c:	50                   	push   eax
c000e36d:	e8 0e 20 ff ff       	call   c0000380 <memcmp>
c000e372:	83 c4 10             	add    esp,0x10
c000e375:	85 c0                	test   eax,eax
c000e377:	0f 94 c0             	sete   al
c000e37a:	84 c0                	test   al,al
c000e37c:	74 0e                	je     c000e38c <findDataTable(unsigned char*, char*)+0x64>
c000e37e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e382:	8b 04 c5 c4 64 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd9b3c]
c000e389:	eb 11                	jmp    c000e39c <findDataTable(unsigned char*, char*)+0x74>
c000e38b:	90                   	nop
c000e38c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e390:	eb ba                	jmp    c000e34c <findDataTable(unsigned char*, char*)+0x24>
c000e392:	66 90                	xchg   ax,ax
c000e394:	b8 00 00 00 00       	mov    eax,0x0
c000e399:	8d 76 00             	lea    esi,[esi+0x0]
c000e39c:	83 c4 1c             	add    esp,0x1c
c000e39f:	c3                   	ret    

c000e3a0 <scanMADT()>:
c000e3a0:	53                   	push   ebx
c000e3a1:	83 ec 38             	sub    esp,0x38
c000e3a4:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000e3a9:	25 00 04 00 00       	and    eax,0x400
c000e3ae:	74 14                	je     c000e3c4 <scanMADT()+0x24>
c000e3b0:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e3b5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3bb:	83 e2 fb             	and    edx,0xfffffffb
c000e3be:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3c4:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e3c9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3cf:	83 e0 04             	and    eax,0x4
c000e3d2:	84 c0                	test   al,al
c000e3d4:	0f 84 8a 04 00 00    	je     c000e864 <scanMADT()+0x4c4>
c000e3da:	e8 05 fb ff ff       	call   c000dee4 <findRSDP()>
c000e3df:	a3 cc 66 02 c0       	mov    ds:0xc00266cc,eax
c000e3e4:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e3e9:	85 c0                	test   eax,eax
c000e3eb:	75 1b                	jne    c000e408 <scanMADT()+0x68>
c000e3ed:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e3f2:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3f8:	83 e2 fb             	and    edx,0xfffffffb
c000e3fb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e401:	e9 66 04 00 00       	jmp    c000e86c <scanMADT()+0x4cc>
c000e406:	66 90                	xchg   ax,ax
c000e408:	a1 cc 66 02 c0       	mov    eax,ds:0xc00266cc
c000e40d:	83 ec 0c             	sub    esp,0xc
c000e410:	50                   	push   eax
c000e411:	e8 c2 fd ff ff       	call   c000e1d8 <findRSDT(unsigned char*)>
c000e416:	83 c4 10             	add    esp,0x10
c000e419:	a3 c8 66 02 c0       	mov    ds:0xc00266c8,eax
c000e41e:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e423:	85 c0                	test   eax,eax
c000e425:	75 19                	jne    c000e440 <scanMADT()+0xa0>
c000e427:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e42c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e432:	83 e2 fb             	and    edx,0xfffffffb
c000e435:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e43b:	e9 2c 04 00 00       	jmp    c000e86c <scanMADT()+0x4cc>
c000e440:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e445:	83 ec 0c             	sub    esp,0xc
c000e448:	50                   	push   eax
c000e449:	e8 26 fb ff ff       	call   c000df74 <loadACPITables(unsigned char*)>
c000e44e:	83 c4 10             	add    esp,0x10
c000e451:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000e456:	83 ec 08             	sub    esp,0x8
c000e459:	68 6c fd 01 c0       	push   0xc001fd6c
c000e45e:	50                   	push   eax
c000e45f:	e8 c4 fe ff ff       	call   c000e328 <findDataTable(unsigned char*, char*)>
c000e464:	83 c4 10             	add    esp,0x10
c000e467:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e46b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e470:	75 1a                	jne    c000e48c <scanMADT()+0xec>
c000e472:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000e477:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e47d:	83 e2 fe             	and    edx,0xfffffffe
c000e480:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e486:	e9 e1 03 00 00       	jmp    c000e86c <scanMADT()+0x4cc>
c000e48b:	90                   	nop
c000e48c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e494:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e498:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e49b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e49f:	0f 87 c7 03 00 00    	ja     c000e86c <scanMADT()+0x4cc>
c000e4a5:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e4ad:	0f 87 b9 03 00 00    	ja     c000e86c <scanMADT()+0x4cc>
c000e4b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e4bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4bf:	8d 50 01             	lea    edx,[eax+0x1]
c000e4c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4c6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4ca:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4ce:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e4d2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4d6:	8d 50 01             	lea    edx,[eax+0x1]
c000e4d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4e1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4e5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e4e9:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e4ee:	0f 86 74 03 00 00    	jbe    c000e868 <scanMADT()+0x4c8>
c000e4f4:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e4f9:	75 5d                	jne    c000e558 <scanMADT()+0x1b8>
c000e4fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4ff:	8d 50 01             	lea    edx,[eax+0x1]
c000e502:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e506:	8a 15 c0 68 02 c0    	mov    dl,BYTE PTR ds:0xc00268c0
c000e50c:	81 e2 ff 00 00 00    	and    edx,0xff
c000e512:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e516:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e51a:	88 82 00 69 02 c0    	mov    BYTE PTR [edx-0x3ffd9700],al
c000e520:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e524:	8d 42 01             	lea    eax,[edx+0x1]
c000e527:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e52b:	a0 c0 68 02 c0       	mov    al,ds:0xc00268c0
c000e530:	8d 48 01             	lea    ecx,[eax+0x1]
c000e533:	88 0d c0 68 02 c0    	mov    BYTE PTR ds:0xc00268c0,cl
c000e539:	25 ff 00 00 00       	and    eax,0xff
c000e53e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e542:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e546:	88 90 e0 68 02 c0    	mov    BYTE PTR [eax-0x3ffd9720],dl
c000e54c:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e551:	e9 f6 02 00 00       	jmp    c000e84c <scanMADT()+0x4ac>
c000e556:	66 90                	xchg   ax,ax
c000e558:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e55d:	0f 85 29 01 00 00    	jne    c000e68c <scanMADT()+0x2ec>
c000e563:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e567:	8d 50 01             	lea    edx,[eax+0x1]
c000e56a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e56e:	8a 15 80 67 02 c0    	mov    dl,BYTE PTR ds:0xc0026780
c000e574:	81 e2 ff 00 00 00    	and    edx,0xff
c000e57a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e57e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e582:	88 82 a0 67 02 c0    	mov    BYTE PTR [edx-0x3ffd9860],al
c000e588:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e58c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e590:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e594:	01 d0                	add    eax,edx
c000e596:	83 c0 2c             	add    eax,0x2c
c000e599:	8a 00                	mov    al,BYTE PTR [eax]
c000e59b:	31 d2                	xor    edx,edx
c000e59d:	88 c2                	mov    dl,al
c000e59f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5a3:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5aa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5ae:	25 ff 00 00 00       	and    eax,0xff
c000e5b3:	c1 e0 08             	shl    eax,0x8
c000e5b6:	89 d1                	mov    ecx,edx
c000e5b8:	09 c1                	or     ecx,eax
c000e5ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5be:	8d 50 02             	lea    edx,[eax+0x2]
c000e5c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5c5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5c9:	25 ff 00 00 00       	and    eax,0xff
c000e5ce:	c1 e0 10             	shl    eax,0x10
c000e5d1:	09 c1                	or     ecx,eax
c000e5d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5d7:	8d 50 03             	lea    edx,[eax+0x3]
c000e5da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5e2:	25 ff 00 00 00       	and    eax,0xff
c000e5e7:	c1 e0 18             	shl    eax,0x18
c000e5ea:	09 c1                	or     ecx,eax
c000e5ec:	89 ca                	mov    edx,ecx
c000e5ee:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e5f3:	25 ff 00 00 00       	and    eax,0xff
c000e5f8:	89 14 85 c0 67 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9840],edx
c000e5ff:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e604:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e608:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e60c:	01 d0                	add    eax,edx
c000e60e:	83 c0 2c             	add    eax,0x2c
c000e611:	8a 00                	mov    al,BYTE PTR [eax]
c000e613:	31 d2                	xor    edx,edx
c000e615:	88 c2                	mov    dl,al
c000e617:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e61b:	8d 48 01             	lea    ecx,[eax+0x1]
c000e61e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e622:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e626:	25 ff 00 00 00       	and    eax,0xff
c000e62b:	c1 e0 08             	shl    eax,0x8
c000e62e:	89 d1                	mov    ecx,edx
c000e630:	09 c1                	or     ecx,eax
c000e632:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e636:	8d 50 02             	lea    edx,[eax+0x2]
c000e639:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e63d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e641:	25 ff 00 00 00       	and    eax,0xff
c000e646:	c1 e0 10             	shl    eax,0x10
c000e649:	09 c1                	or     ecx,eax
c000e64b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e64f:	8d 50 03             	lea    edx,[eax+0x3]
c000e652:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e656:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e65a:	25 ff 00 00 00       	and    eax,0xff
c000e65f:	c1 e0 18             	shl    eax,0x18
c000e662:	09 c1                	or     ecx,eax
c000e664:	89 ca                	mov    edx,ecx
c000e666:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e66b:	25 ff 00 00 00       	and    eax,0xff
c000e670:	89 14 85 40 68 02 c0 	mov    DWORD PTR [eax*4-0x3ffd97c0],edx
c000e677:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e67c:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c000e681:	40                   	inc    eax
c000e682:	a2 80 67 02 c0       	mov    ds:0xc0026780,al
c000e687:	e9 c0 01 00 00       	jmp    c000e84c <scanMADT()+0x4ac>
c000e68c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e691:	0f 85 fd 00 00 00    	jne    c000e794 <scanMADT()+0x3f4>
c000e697:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e69b:	8d 50 01             	lea    edx,[eax+0x1]
c000e69e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6a6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6aa:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e6ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6b2:	8d 50 01             	lea    edx,[eax+0x1]
c000e6b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6bd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6c1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e6c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6cd:	01 d0                	add    eax,edx
c000e6cf:	83 c0 2c             	add    eax,0x2c
c000e6d2:	8a 00                	mov    al,BYTE PTR [eax]
c000e6d4:	31 d2                	xor    edx,edx
c000e6d6:	88 c2                	mov    dl,al
c000e6d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6dc:	8d 48 01             	lea    ecx,[eax+0x1]
c000e6df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6e3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e6e7:	25 ff 00 00 00       	and    eax,0xff
c000e6ec:	c1 e0 08             	shl    eax,0x8
c000e6ef:	89 d1                	mov    ecx,edx
c000e6f1:	09 c1                	or     ecx,eax
c000e6f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6f7:	8d 50 02             	lea    edx,[eax+0x2]
c000e6fa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6fe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e702:	25 ff 00 00 00       	and    eax,0xff
c000e707:	c1 e0 10             	shl    eax,0x10
c000e70a:	09 c1                	or     ecx,eax
c000e70c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e710:	8d 50 03             	lea    edx,[eax+0x3]
c000e713:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e717:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e71b:	25 ff 00 00 00       	and    eax,0xff
c000e720:	c1 e0 18             	shl    eax,0x18
c000e723:	09 c8                	or     eax,ecx
c000e725:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e729:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e72e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e732:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e736:	01 d0                	add    eax,edx
c000e738:	83 c0 2c             	add    eax,0x2c
c000e73b:	8a 00                	mov    al,BYTE PTR [eax]
c000e73d:	25 ff 00 00 00       	and    eax,0xff
c000e742:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e746:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e749:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e74d:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e751:	81 e2 ff 00 00 00    	and    edx,0xff
c000e757:	c1 e2 08             	shl    edx,0x8
c000e75a:	09 d0                	or     eax,edx
c000e75c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e761:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e766:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e76a:	25 ff 00 00 00       	and    eax,0xff
c000e76f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e773:	88 90 c0 12 02 c0    	mov    BYTE PTR [eax-0x3ffded40],dl
c000e779:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e77d:	31 d2                	xor    edx,edx
c000e77f:	88 c2                	mov    dl,al
c000e781:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e786:	66 89 84 12 60 67 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd98a0],ax
c000e78e:	e9 b9 00 00 00       	jmp    c000e84c <scanMADT()+0x4ac>
c000e793:	90                   	nop
c000e794:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e799:	0f 85 a1 00 00 00    	jne    c000e840 <scanMADT()+0x4a0>
c000e79f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7a3:	8d 50 01             	lea    edx,[eax+0x1]
c000e7a6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e7aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7ae:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e7b2:	25 ff 00 00 00       	and    eax,0xff
c000e7b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e7bb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7c3:	01 d0                	add    eax,edx
c000e7c5:	83 c0 2c             	add    eax,0x2c
c000e7c8:	8a 00                	mov    al,BYTE PTR [eax]
c000e7ca:	31 d2                	xor    edx,edx
c000e7cc:	88 c2                	mov    dl,al
c000e7ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7d2:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e7d9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e7dd:	25 ff 00 00 00       	and    eax,0xff
c000e7e2:	c1 e0 08             	shl    eax,0x8
c000e7e5:	09 d0                	or     eax,edx
c000e7e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7eb:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e7f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7f4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e7fb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7ff:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e803:	25 ff 00 00 00       	and    eax,0xff
c000e808:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e810:	c1 e0 08             	shl    eax,0x8
c000e813:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e817:	89 c1                	mov    ecx,eax
c000e819:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e81d:	c1 e0 18             	shl    eax,0x18
c000e820:	89 c3                	mov    ebx,eax
c000e822:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c000e827:	8d 50 01             	lea    edx,[eax+0x1]
c000e82a:	89 15 d0 66 02 c0    	mov    DWORD PTR ds:0xc00266d0,edx
c000e830:	09 d9                	or     ecx,ebx
c000e832:	89 ca                	mov    edx,ecx
c000e834:	89 14 85 e0 66 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9920],edx
c000e83b:	eb 0f                	jmp    c000e84c <scanMADT()+0x4ac>
c000e83d:	8d 76 00             	lea    esi,[esi+0x0]
c000e840:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e845:	75 05                	jne    c000e84c <scanMADT()+0x4ac>
c000e847:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e84c:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e850:	31 d2                	xor    edx,edx
c000e852:	88 c2                	mov    dl,al
c000e854:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e858:	01 d0                	add    eax,edx
c000e85a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e85e:	e9 31 fc ff ff       	jmp    c000e494 <scanMADT()+0xf4>
c000e863:	90                   	nop
c000e864:	90                   	nop
c000e865:	eb 05                	jmp    c000e86c <scanMADT()+0x4cc>
c000e867:	90                   	nop
c000e868:	90                   	nop
c000e869:	8d 76 00             	lea    esi,[esi+0x0]
c000e86c:	83 c4 38             	add    esp,0x38
c000e86f:	5b                   	pop    ebx
c000e870:	c3                   	ret    
c000e871:	90                   	nop
c000e872:	66 90                	xchg   ax,ax

c000e874 <ACPI::ACPI()>:
c000e874:	83 ec 0c             	sub    esp,0xc
c000e877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87b:	83 ec 08             	sub    esp,0x8
c000e87e:	68 71 fd 01 c0       	push   0xc001fd71
c000e883:	50                   	push   eax
c000e884:	e8 47 d3 ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000e889:	83 c4 10             	add    esp,0x10
c000e88c:	ba a8 fe 01 c0       	mov    edx,0xc001fea8
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	89 10                	mov    DWORD PTR [eax],edx
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e8be:	e8 dd fa ff ff       	call   c000e3a0 <scanMADT()>
c000e8c3:	90                   	nop
c000e8c4:	83 c4 0c             	add    esp,0xc
c000e8c7:	c3                   	ret    

c000e8c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e8c8:	83 ec 2c             	sub    esp,0x2c
c000e8cb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e8cf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8d3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e8d7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e8db:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e8e0:	88 d0                	mov    al,dl
c000e8e2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e8e6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e8eb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e8f3:	90                   	nop
c000e8f4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8f8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e8fe:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e902:	0f 8d 9c 00 00 00    	jge    c000e9a4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e908:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e90c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e910:	83 c2 2a             	add    edx,0x2a
c000e913:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e917:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e91c:	75 7a                	jne    c000e998 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e91e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e922:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e926:	83 c2 2a             	add    edx,0x2a
c000e929:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e92d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e931:	75 65                	jne    c000e998 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e933:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e938:	74 3a                	je     c000e974 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e93a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e93e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e942:	83 c2 2a             	add    edx,0x2a
c000e945:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e949:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e94d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e950:	39 c2                	cmp    edx,eax
c000e952:	74 10                	je     c000e964 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e954:	83 ec 0c             	sub    esp,0xc
c000e957:	68 ec fc 01 c0       	push   0xc001fcec
c000e95c:	e8 4e 1a 00 00       	call   c00103af <KePanic(char const*)>
c000e961:	83 c4 10             	add    esp,0x10
c000e964:	83 ec 0c             	sub    esp,0xc
c000e967:	68 76 fd 01 c0       	push   0xc001fd76
c000e96c:	e8 3e 1a 00 00       	call   c00103af <KePanic(char const*)>
c000e971:	83 c4 10             	add    esp,0x10
c000e974:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e978:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e97c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e980:	83 c2 2a             	add    edx,0x2a
c000e983:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e987:	8b 02                	mov    eax,DWORD PTR [edx]
c000e989:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e98c:	89 01                	mov    DWORD PTR [ecx],eax
c000e98e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e991:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e996:	66 90                	xchg   ax,ax
c000e998:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e99c:	e9 53 ff ff ff       	jmp    c000e8f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e9a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e9a4:	90                   	nop
c000e9a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9a9:	83 c4 2c             	add    esp,0x2c
c000e9ac:	c2 04 00             	ret    0x4
c000e9af:	90                   	nop

c000e9b0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e9b0:	83 ec 1c             	sub    esp,0x1c
c000e9b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e9b7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e9bb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e9bf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e9c4:	88 c8                	mov    al,cl
c000e9c6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e9ca:	88 d0                	mov    al,dl
c000e9cc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e9d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9d4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e9da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9de:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e9e1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e9e5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e9e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e9ed:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e9f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e9f7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e9fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9fe:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ea03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea07:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea0d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ea11:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea18:	83 c2 2a             	add    edx,0x2a
c000ea1b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ea1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea23:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea2d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ea30:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ea34:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ea38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea3c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea42:	8d 50 01             	lea    edx,[eax+0x1]
c000ea45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea49:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ea4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea53:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea59:	3d 00 02 00 00       	cmp    eax,0x200
c000ea5e:	75 10                	jne    c000ea70 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ea60:	83 ec 0c             	sub    esp,0xc
c000ea63:	68 85 fd 01 c0       	push   0xc001fd85
c000ea68:	e8 42 19 00 00       	call   c00103af <KePanic(char const*)>
c000ea6d:	83 c4 10             	add    esp,0x10
c000ea70:	90                   	nop
c000ea71:	83 c4 1c             	add    esp,0x1c
c000ea74:	c3                   	ret    
c000ea75:	90                   	nop
c000ea76:	66 90                	xchg   ax,ax

c000ea78 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000ea78:	b8 00 00 00 00       	mov    eax,0x0
c000ea7d:	c3                   	ret    
c000ea7e:	66 90                	xchg   ax,ax

c000ea80 <ACPI::detectPCI()>:
c000ea80:	53                   	push   ebx
c000ea81:	83 ec 28             	sub    esp,0x28
c000ea84:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ea89:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000ea8e:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000ea93:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ea99:	83 e0 04             	and    eax,0x4
c000ea9c:	84 c0                	test   al,al
c000ea9e:	74 2c                	je     c000eacc <ACPI::detectPCI()+0x4c>
c000eaa0:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000eaa5:	83 ec 08             	sub    esp,0x8
c000eaa8:	68 a2 fd 01 c0       	push   0xc001fda2
c000eaad:	50                   	push   eax
c000eaae:	e8 75 f8 ff ff       	call   c000e328 <findDataTable(unsigned char*, char*)>
c000eab3:	83 c4 10             	add    esp,0x10
c000eab6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eaba:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eabf:	74 0b                	je     c000eacc <ACPI::detectPCI()+0x4c>
c000eac1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eac6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eacb:	90                   	nop
c000eacc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000ead4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ead8:	8a 00                	mov    al,BYTE PTR [eax]
c000eada:	3c 01                	cmp    al,0x1
c000eadc:	75 0e                	jne    c000eaec <ACPI::detectPCI()+0x6c>
c000eade:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eae3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eae8:	eb 2a                	jmp    c000eb14 <ACPI::detectPCI()+0x94>
c000eaea:	66 90                	xchg   ax,ax
c000eaec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eaf0:	8a 00                	mov    al,BYTE PTR [eax]
c000eaf2:	3c 02                	cmp    al,0x2
c000eaf4:	75 1e                	jne    c000eb14 <ACPI::detectPCI()+0x94>
c000eaf6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eafb:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb00:	74 12                	je     c000eb14 <ACPI::detectPCI()+0x94>
c000eb02:	83 ec 0c             	sub    esp,0xc
c000eb05:	68 1c fd 01 c0       	push   0xc001fd1c
c000eb0a:	e8 a0 18 00 00       	call   c00103af <KePanic(char const*)>
c000eb0f:	83 c4 10             	add    esp,0x10
c000eb12:	66 90                	xchg   ax,ax
c000eb14:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000eb18:	83 f0 01             	xor    eax,0x1
c000eb1b:	84 c0                	test   al,al
c000eb1d:	74 41                	je     c000eb60 <ACPI::detectPCI()+0xe0>
c000eb1f:	e8 0c 16 ff ff       	call   c0000130 <manualPCIProbe>
c000eb24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eb28:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eb2d:	75 0d                	jne    c000eb3c <ACPI::detectPCI()+0xbc>
c000eb2f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb34:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb39:	eb 25                	jmp    c000eb60 <ACPI::detectPCI()+0xe0>
c000eb3b:	90                   	nop
c000eb3c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000eb41:	75 1d                	jne    c000eb60 <ACPI::detectPCI()+0xe0>
c000eb43:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb48:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb4d:	74 11                	je     c000eb60 <ACPI::detectPCI()+0xe0>
c000eb4f:	83 ec 0c             	sub    esp,0xc
c000eb52:	68 1c fd 01 c0       	push   0xc001fd1c
c000eb57:	e8 53 18 00 00       	call   c00103af <KePanic(char const*)>
c000eb5c:	83 c4 10             	add    esp,0x10
c000eb5f:	90                   	nop
c000eb60:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000eb65:	0f 84 85 00 00 00    	je     c000ebf0 <ACPI::detectPCI()+0x170>
c000eb6b:	83 ec 0c             	sub    esp,0xc
c000eb6e:	68 a7 fd 01 c0       	push   0xc001fda7
c000eb73:	e8 bf 11 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c000eb78:	83 c4 10             	add    esp,0x10
c000eb7b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000eb83:	83 ec 0c             	sub    esp,0xc
c000eb86:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eb8a:	e8 d6 8c ff ff       	call   c0007865 <malloc>
c000eb8f:	83 c4 10             	add    esp,0x10
c000eb92:	89 c3                	mov    ebx,eax
c000eb94:	83 ec 0c             	sub    esp,0xc
c000eb97:	53                   	push   ebx
c000eb98:	e8 31 aa 00 00       	call   c00195ce <PCI::PCI()>
c000eb9d:	83 c4 10             	add    esp,0x10
c000eba0:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000eba4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eba8:	83 ec 08             	sub    esp,0x8
c000ebab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ebaf:	50                   	push   eax
c000ebb0:	e8 83 ce ff ff       	call   c000ba38 <Device::addChild(Device*)>
c000ebb5:	83 c4 10             	add    esp,0x10
c000ebb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebbc:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebbe:	83 c0 08             	add    eax,0x8
c000ebc1:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebc3:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ebc8:	74 0a                	je     c000ebd4 <ACPI::detectPCI()+0x154>
c000ebca:	ba 01 00 00 00       	mov    edx,0x1
c000ebcf:	eb 0b                	jmp    c000ebdc <ACPI::detectPCI()+0x15c>
c000ebd1:	8d 76 00             	lea    esi,[esi+0x0]
c000ebd4:	ba 02 00 00 00       	mov    edx,0x2
c000ebd9:	8d 76 00             	lea    esi,[esi+0x0]
c000ebdc:	6a 00                	push   0x0
c000ebde:	6a 00                	push   0x0
c000ebe0:	52                   	push   edx
c000ebe1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ebe5:	ff d0                	call   eax
c000ebe7:	83 c4 10             	add    esp,0x10
c000ebea:	e9 91 00 00 00       	jmp    c000ec80 <ACPI::detectPCI()+0x200>
c000ebef:	90                   	nop
c000ebf0:	83 ec 0c             	sub    esp,0xc
c000ebf3:	68 bf fd 01 c0       	push   0xc001fdbf
c000ebf8:	e8 3a 11 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c000ebfd:	83 c4 10             	add    esp,0x10
c000ec00:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ec07:	83 ec 0c             	sub    esp,0xc
c000ec0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ec0e:	e8 52 8c ff ff       	call   c0007865 <malloc>
c000ec13:	83 c4 10             	add    esp,0x10
c000ec16:	89 c3                	mov    ebx,eax
c000ec18:	83 ec 0c             	sub    esp,0xc
c000ec1b:	53                   	push   ebx
c000ec1c:	e8 13 b5 00 00       	call   c001a134 <IDE::IDE()>
c000ec21:	83 c4 10             	add    esp,0x10
c000ec24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ec28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec2c:	83 ec 08             	sub    esp,0x8
c000ec2f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec33:	50                   	push   eax
c000ec34:	e8 ff cd ff ff       	call   c000ba38 <Device::addChild(Device*)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec40:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ec4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec4e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ec57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec5b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ec64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec68:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec6a:	83 c0 08             	add    eax,0x8
c000ec6d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec6f:	6a 00                	push   0x0
c000ec71:	6a 00                	push   0x0
c000ec73:	6a 00                	push   0x0
c000ec75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ec79:	ff d0                	call   eax
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	66 90                	xchg   ax,ax
c000ec80:	90                   	nop
c000ec81:	83 c4 28             	add    esp,0x28
c000ec84:	5b                   	pop    ebx
c000ec85:	c3                   	ret    
c000ec86:	66 90                	xchg   ax,ax

c000ec88 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ec88:	83 ec 1c             	sub    esp,0x1c
c000ec8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ec8f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ec92:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ec96:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ec9c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eca0:	25 ff 00 00 00       	and    eax,0xff
c000eca5:	83 ec 08             	sub    esp,0x8
c000eca8:	50                   	push   eax
c000eca9:	52                   	push   edx
c000ecaa:	e8 a1 82 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c000ecaf:	83 c4 10             	add    esp,0x10
c000ecb2:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ecb6:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c000ecbc:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ecc0:	25 ff 00 00 00       	and    eax,0xff
c000ecc5:	83 ec 04             	sub    esp,0x4
c000ecc8:	6a 01                	push   0x1
c000ecca:	50                   	push   eax
c000eccb:	52                   	push   edx
c000eccc:	e8 95 83 ff ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c000ecd1:	83 c4 10             	add    esp,0x10
c000ecd4:	90                   	nop
c000ecd5:	83 c4 1c             	add    esp,0x1c
c000ecd8:	c3                   	ret    
c000ecd9:	90                   	nop
c000ecda:	66 90                	xchg   ax,ax

c000ecdc <ACPI::sleep()>:
c000ecdc:	83 ec 0c             	sub    esp,0xc
c000ecdf:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000ece4:	85 c0                	test   eax,eax
c000ece6:	74 08                	je     c000ecf0 <ACPI::sleep()+0x14>
c000ece8:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c000eced:	ff d0                	call   eax
c000ecef:	90                   	nop
c000ecf0:	90                   	nop
c000ecf1:	83 c4 0c             	add    esp,0xc
c000ecf4:	c3                   	ret    
c000ecf5:	90                   	nop
c000ecf6:	66 90                	xchg   ax,ax

c000ecf8 <ACPI::open(int, int, void*)>:
c000ecf8:	57                   	push   edi
c000ecf9:	56                   	push   esi
c000ecfa:	53                   	push   ebx
c000ecfb:	81 ec 70 01 00 00    	sub    esp,0x170
c000ed01:	83 ec 0c             	sub    esp,0xc
c000ed04:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ed0b:	e8 70 fd ff ff       	call   c000ea80 <ACPI::detectPCI()>
c000ed10:	83 c4 10             	add    esp,0x10
c000ed13:	83 ec 0c             	sub    esp,0xc
c000ed16:	68 44 fd 01 c0       	push   0xc001fd44
c000ed1b:	e8 17 10 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c000ed20:	83 c4 10             	add    esp,0x10
c000ed23:	83 ec 0c             	sub    esp,0xc
c000ed26:	68 d4 fd 01 c0       	push   0xc001fdd4
c000ed2b:	e8 b3 45 00 00       	call   c00132e3 <Thr::loadKernelSymbolTable(char const*)>
c000ed30:	83 c4 10             	add    esp,0x10
c000ed33:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ed3b:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ed46:	83 ec 0c             	sub    esp,0xc
c000ed49:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ed50:	e8 10 8b ff ff       	call   c0007865 <malloc>
c000ed55:	83 c4 10             	add    esp,0x10
c000ed58:	89 c3                	mov    ebx,eax
c000ed5a:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ed5f:	83 ec 04             	sub    esp,0x4
c000ed62:	50                   	push   eax
c000ed63:	68 f2 fd 01 c0       	push   0xc001fdf2
c000ed68:	53                   	push   ebx
c000ed69:	e8 02 be ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c000ed6e:	83 c4 10             	add    esp,0x10
c000ed71:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ed78:	83 ec 08             	sub    esp,0x8
c000ed7b:	6a 01                	push   0x1
c000ed7d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ed84:	e8 a7 be ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c000ed89:	83 c4 10             	add    esp,0x10
c000ed8c:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ed93:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ed9b:	75 17                	jne    c000edb4 <ACPI::open(int, int, void*)+0xbc>
c000ed9d:	83 ec 0c             	sub    esp,0xc
c000eda0:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eda7:	e8 e2 be ff ff       	call   c000ac8e <File::close()>
c000edac:	83 c4 10             	add    esp,0x10
c000edaf:	eb 0b                	jmp    c000edbc <ACPI::open(int, int, void*)+0xc4>
c000edb1:	8d 76 00             	lea    esi,[esi+0x0]
c000edb4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000edbc:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000edc4:	74 1e                	je     c000ede4 <ACPI::open(int, int, void*)+0xec>
c000edc6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000edcd:	8b 00                	mov    eax,DWORD PTR [eax]
c000edcf:	83 c0 08             	add    eax,0x8
c000edd2:	8b 00                	mov    eax,DWORD PTR [eax]
c000edd4:	83 ec 0c             	sub    esp,0xc
c000edd7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000edde:	ff d0                	call   eax
c000ede0:	83 c4 10             	add    esp,0x10
c000ede3:	90                   	nop
c000ede4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000edeb:	83 f0 01             	xor    eax,0x1
c000edee:	84 c0                	test   al,al
c000edf0:	74 42                	je     c000ee34 <ACPI::open(int, int, void*)+0x13c>
c000edf2:	83 ec 0c             	sub    esp,0xc
c000edf5:	68 10 fe 01 c0       	push   0xc001fe10
c000edfa:	e8 38 0f 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c000edff:	83 c4 10             	add    esp,0x10
c000ee02:	83 ec 04             	sub    esp,0x4
c000ee05:	6a 0c                	push   0xc
c000ee07:	68 2b fe 01 c0       	push   0xc001fe2b
c000ee0c:	68 3c fe 01 c0       	push   0xc001fe3c
c000ee11:	e8 cf 3a 00 00       	call   c00128e5 <Reg::readIntWithDefault(char*, char*, int)>
c000ee16:	83 c4 10             	add    esp,0x10
c000ee19:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ee20:	83 ec 0c             	sub    esp,0xc
c000ee23:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ee2a:	e8 18 a7 ff ff       	call   c0009547 <Virt::setupPageSwapping(int)>
c000ee2f:	83 c4 10             	add    esp,0x10
c000ee32:	66 90                	xchg   ax,ax
c000ee34:	83 ec 0c             	sub    esp,0xc
c000ee37:	68 95 ee 01 c0       	push   0xc001ee95
c000ee3c:	e8 f6 0e 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c000ee41:	83 c4 10             	add    esp,0x10
c000ee44:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ee4b:	83 ec 08             	sub    esp,0x8
c000ee4e:	6a 13                	push   0x13
c000ee50:	50                   	push   eax
c000ee51:	e8 fa ce ff ff       	call   c000bd50 <getDevicesOfType(DeviceType)>
c000ee56:	83 c4 0c             	add    esp,0xc
c000ee59:	8d 76 00             	lea    esi,[esi+0x0]
c000ee5c:	83 ec 0c             	sub    esp,0xc
c000ee5f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee66:	50                   	push   eax
c000ee67:	e8 20 f4 00 00       	call   c001e28c <LinkedList<Device>::isEmpty()>
c000ee6c:	83 c4 10             	add    esp,0x10
c000ee6f:	83 f0 01             	xor    eax,0x1
c000ee72:	84 c0                	test   al,al
c000ee74:	0f 84 46 01 00 00    	je     c000efc0 <ACPI::open(int, int, void*)+0x2c8>
c000ee7a:	83 ec 0c             	sub    esp,0xc
c000ee7d:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee84:	50                   	push   eax
c000ee85:	e8 1e f4 00 00       	call   c001e2a8 <LinkedList<Device>::getFirstElement()>
c000ee8a:	83 c4 10             	add    esp,0x10
c000ee8d:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ee94:	83 ec 0c             	sub    esp,0xc
c000ee97:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee9e:	50                   	push   eax
c000ee9f:	e8 0c f4 00 00       	call   c001e2b0 <LinkedList<Device>::removeFirst()>
c000eea4:	83 c4 10             	add    esp,0x10
c000eea7:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000eeae:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000eeb5:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000eebc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eec0:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000eec6:	ba 09 00 00 00       	mov    edx,0x9
c000eecb:	fc                   	cld    
c000eecc:	89 c7                	mov    edi,eax
c000eece:	89 de                	mov    esi,ebx
c000eed0:	89 d1                	mov    ecx,edx
c000eed2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000eed4:	83 ec 08             	sub    esp,0x8
c000eed7:	8d 44 24 38          	lea    eax,[esp+0x38]
c000eedb:	50                   	push   eax
c000eedc:	83 ec 24             	sub    esp,0x24
c000eedf:	89 e0                	mov    eax,esp
c000eee1:	89 c3                	mov    ebx,eax
c000eee3:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000eee7:	ba 09 00 00 00       	mov    edx,0x9
c000eeec:	89 df                	mov    edi,ebx
c000eeee:	89 c6                	mov    esi,eax
c000eef0:	89 d1                	mov    ecx,edx
c000eef2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000eef4:	e8 b7 ab 00 00       	call   c0019ab0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000eef9:	83 c4 30             	add    esp,0x30
c000eefc:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ef03:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ef0b:	0f 84 4b ff ff ff    	je     c000ee5c <ACPI::open(int, int, void*)+0x164>
c000ef11:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ef1c:	83 ec 0c             	sub    esp,0xc
c000ef1f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ef26:	e8 3a 89 ff ff       	call   c0007865 <malloc>
c000ef2b:	83 c4 10             	add    esp,0x10
c000ef2e:	89 c3                	mov    ebx,eax
c000ef30:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000ef35:	83 ec 04             	sub    esp,0x4
c000ef38:	50                   	push   eax
c000ef39:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef40:	53                   	push   ebx
c000ef41:	e8 2a bc ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c000ef46:	83 c4 10             	add    esp,0x10
c000ef49:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ef50:	83 ec 0c             	sub    esp,0xc
c000ef53:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef5a:	e8 3f bf ff ff       	call   c000ae9e <File::exists()>
c000ef5f:	83 c4 10             	add    esp,0x10
c000ef62:	84 c0                	test   al,al
c000ef64:	74 2a                	je     c000ef90 <ACPI::open(int, int, void*)+0x298>
c000ef66:	83 ec 08             	sub    esp,0x8
c000ef69:	6a 01                	push   0x1
c000ef6b:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ef72:	e8 e3 4d 00 00       	call   c0013d5a <Thr::loadDLL(char const*, bool)>
c000ef77:	83 c4 10             	add    esp,0x10
c000ef7a:	83 ec 08             	sub    esp,0x8
c000ef7d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ef84:	50                   	push   eax
c000ef85:	e8 01 50 00 00       	call   c0013f8b <Thr::executeDLL(unsigned long, void*)>
c000ef8a:	83 c4 10             	add    esp,0x10
c000ef8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef90:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ef98:	0f 84 be fe ff ff    	je     c000ee5c <ACPI::open(int, int, void*)+0x164>
c000ef9e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000efa5:	8b 00                	mov    eax,DWORD PTR [eax]
c000efa7:	83 c0 08             	add    eax,0x8
c000efaa:	8b 00                	mov    eax,DWORD PTR [eax]
c000efac:	83 ec 0c             	sub    esp,0xc
c000efaf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000efb6:	ff d0                	call   eax
c000efb8:	83 c4 10             	add    esp,0x10
c000efbb:	e9 9c fe ff ff       	jmp    c000ee5c <ACPI::open(int, int, void*)+0x164>
c000efc0:	83 ec 0c             	sub    esp,0xc
c000efc3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000efca:	50                   	push   eax
c000efcb:	e8 b8 f2 00 00       	call   c001e288 <LinkedList<Device>::~LinkedList()>
c000efd0:	83 c4 10             	add    esp,0x10
c000efd3:	8b 1d b8 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023eb8
c000efd9:	83 ec 08             	sub    esp,0x8
c000efdc:	6a 01                	push   0x1
c000efde:	68 43 fe 01 c0       	push   0xc001fe43
c000efe3:	e8 72 4d 00 00       	call   c0013d5a <Thr::loadDLL(char const*, bool)>
c000efe8:	83 c4 10             	add    esp,0x10
c000efeb:	83 ec 08             	sub    esp,0x8
c000efee:	53                   	push   ebx
c000efef:	50                   	push   eax
c000eff0:	e8 96 4f 00 00       	call   c0013f8b <Thr::executeDLL(unsigned long, void*)>
c000eff5:	83 c4 10             	add    esp,0x10
c000eff8:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000effd:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f003:	83 e0 04             	and    eax,0x4
c000f006:	84 c0                	test   al,al
c000f008:	0f 84 16 01 00 00    	je     c000f124 <ACPI::open(int, int, void*)+0x42c>
c000f00e:	83 ec 0c             	sub    esp,0xc
c000f011:	68 60 fe 01 c0       	push   0xc001fe60
c000f016:	e8 1c 0d 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c000f01b:	83 c4 10             	add    esp,0x10
c000f01e:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f029:	83 ec 0c             	sub    esp,0xc
c000f02c:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f033:	e8 2d 88 ff ff       	call   c0007865 <malloc>
c000f038:	83 c4 10             	add    esp,0x10
c000f03b:	89 c3                	mov    ebx,eax
c000f03d:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c000f042:	83 ec 04             	sub    esp,0x4
c000f045:	50                   	push   eax
c000f046:	68 7d fe 01 c0       	push   0xc001fe7d
c000f04b:	53                   	push   ebx
c000f04c:	e8 1f bb ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c000f051:	83 c4 10             	add    esp,0x10
c000f054:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f05b:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f063:	74 1b                	je     c000f080 <ACPI::open(int, int, void*)+0x388>
c000f065:	83 ec 0c             	sub    esp,0xc
c000f068:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f06f:	e8 2a be ff ff       	call   c000ae9e <File::exists()>
c000f074:	83 c4 10             	add    esp,0x10
c000f077:	84 c0                	test   al,al
c000f079:	74 05                	je     c000f080 <ACPI::open(int, int, void*)+0x388>
c000f07b:	b0 01                	mov    al,0x1
c000f07d:	eb 05                	jmp    c000f084 <ACPI::open(int, int, void*)+0x38c>
c000f07f:	90                   	nop
c000f080:	b0 00                	mov    al,0x0
c000f082:	66 90                	xchg   ax,ax
c000f084:	84 c0                	test   al,al
c000f086:	74 28                	je     c000f0b0 <ACPI::open(int, int, void*)+0x3b8>
c000f088:	83 ec 08             	sub    esp,0x8
c000f08b:	6a 01                	push   0x1
c000f08d:	68 7d fe 01 c0       	push   0xc001fe7d
c000f092:	e8 c3 4c 00 00       	call   c0013d5a <Thr::loadDLL(char const*, bool)>
c000f097:	83 c4 10             	add    esp,0x10
c000f09a:	83 ec 08             	sub    esp,0x8
c000f09d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f0a4:	50                   	push   eax
c000f0a5:	e8 e1 4e 00 00       	call   c0013f8b <Thr::executeDLL(unsigned long, void*)>
c000f0aa:	83 c4 10             	add    esp,0x10
c000f0ad:	8d 76 00             	lea    esi,[esi+0x0]
c000f0b0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0b8:	74 2a                	je     c000f0e4 <ACPI::open(int, int, void*)+0x3ec>
c000f0ba:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0c2:	74 20                	je     c000f0e4 <ACPI::open(int, int, void*)+0x3ec>
c000f0c4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f0cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0cd:	83 c0 08             	add    eax,0x8
c000f0d0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0d2:	83 ec 0c             	sub    esp,0xc
c000f0d5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f0dc:	ff d0                	call   eax
c000f0de:	83 c4 10             	add    esp,0x10
c000f0e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0e4:	a1 c8 66 02 c0       	mov    eax,ds:0xc00266c8
c000f0e9:	83 ec 08             	sub    esp,0x8
c000f0ec:	68 9a fe 01 c0       	push   0xc001fe9a
c000f0f1:	50                   	push   eax
c000f0f2:	e8 31 f2 ff ff       	call   c000e328 <findDataTable(unsigned char*, char*)>
c000f0f7:	83 c4 10             	add    esp,0x10
c000f0fa:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f101:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f109:	74 19                	je     c000f124 <ACPI::open(int, int, void*)+0x42c>
c000f10b:	83 ec 08             	sub    esp,0x8
c000f10e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f115:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f11c:	e8 67 fb ff ff       	call   c000ec88 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f121:	83 c4 10             	add    esp,0x10
c000f124:	b8 00 00 00 00       	mov    eax,0x0
c000f129:	81 c4 70 01 00 00    	add    esp,0x170
c000f12f:	5b                   	pop    ebx
c000f130:	5e                   	pop    esi
c000f131:	5f                   	pop    edi
c000f132:	c3                   	ret    
c000f133:	90                   	nop

c000f134 <CPU::close(int, int, void*)>:
c000f134:	31 c0                	xor    eax,eax
c000f136:	c3                   	ret    
c000f137:	90                   	nop

c000f138 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f138:	60                   	pusha  
c000f139:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f13d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f141:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f145:	9c                   	pushf  
c000f146:	fa                   	cli    
c000f147:	0f 09                	wbinvd 
c000f149:	0f 30                	wrmsr  
c000f14b:	9d                   	popf   
c000f14c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f150:	89 02                	mov    DWORD PTR [edx],eax
c000f152:	61                   	popa   
c000f153:	c3                   	ret    

c000f154 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f154:	60                   	pusha  
c000f155:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f159:	9c                   	pushf  
c000f15a:	fa                   	cli    
c000f15b:	0f 09                	wbinvd 
c000f15d:	31 c0                	xor    eax,eax
c000f15f:	31 d2                	xor    edx,edx
c000f161:	0f 32                	rdmsr  
c000f163:	9d                   	popf   
c000f164:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f168:	89 02                	mov    DWORD PTR [edx],eax
c000f16a:	61                   	popa   
c000f16b:	c3                   	ret    

c000f16c <CPU::AMD_K6_writeback(int, int, int)>:
c000f16c:	56                   	push   esi
c000f16d:	53                   	push   ebx
c000f16e:	83 ec 10             	sub    esp,0x10
c000f171:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f175:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f17a:	75 5d                	jne    c000f1d9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f17c:	83 f8 08             	cmp    eax,0x8
c000f17f:	75 09                	jne    c000f18a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f181:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f186:	7e 13                	jle    c000f19b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f188:	eb 30                	jmp    c000f1ba <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f18a:	83 f8 06             	cmp    eax,0x6
c000f18d:	7c 4a                	jl     c000f1d9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f18f:	83 f8 07             	cmp    eax,0x7
c000f192:	7e 07                	jle    c000f19b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f194:	83 f8 09             	cmp    eax,0x9
c000f197:	74 21                	je     c000f1ba <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f199:	eb 3e                	jmp    c000f1d9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f19b:	89 e6                	mov    esi,esp
c000f19d:	8b 1d dc 3e 02 c0    	mov    ebx,DWORD PTR ds:0xc0023edc
c000f1a3:	56                   	push   esi
c000f1a4:	c1 eb 15             	shr    ebx,0x15
c000f1a7:	68 82 00 00 c0       	push   0xc0000082
c000f1ac:	83 e3 7e             	and    ebx,0x7e
c000f1af:	e8 a0 ff ff ff       	call   c000f154 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f1b4:	56                   	push   esi
c000f1b5:	6a 00                	push   0x0
c000f1b7:	53                   	push   ebx
c000f1b8:	eb 12                	jmp    c000f1cc <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f1ba:	89 e3                	mov    ebx,esp
c000f1bc:	53                   	push   ebx
c000f1bd:	68 82 00 00 c0       	push   0xc0000082
c000f1c2:	e8 8d ff ff ff       	call   c000f154 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f1c7:	53                   	push   ebx
c000f1c8:	6a 00                	push   0x0
c000f1ca:	6a 00                	push   0x0
c000f1cc:	68 82 00 00 c0       	push   0xc0000082
c000f1d1:	e8 62 ff ff ff       	call   c000f138 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f1d6:	83 c4 18             	add    esp,0x18
c000f1d9:	83 c4 10             	add    esp,0x10
c000f1dc:	5b                   	pop    ebx
c000f1dd:	5e                   	pop    esi
c000f1de:	c3                   	ret    
c000f1df:	90                   	nop

c000f1e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f1e0:	55                   	push   ebp
c000f1e1:	57                   	push   edi
c000f1e2:	56                   	push   esi
c000f1e3:	53                   	push   ebx
c000f1e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f1e8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f1ec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f1f0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f1f4:	39 05 d0 12 02 c0    	cmp    DWORD PTR ds:0xc00212d0,eax
c000f1fa:	75 23                	jne    c000f21f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f1fc:	a1 2c 69 02 c0       	mov    eax,ds:0xc002692c
c000f201:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f205:	89 06                	mov    DWORD PTR [esi],eax
c000f207:	a1 28 69 02 c0       	mov    eax,ds:0xc0026928
c000f20c:	89 07                	mov    DWORD PTR [edi],eax
c000f20e:	a1 24 69 02 c0       	mov    eax,ds:0xc0026924
c000f213:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f216:	a1 20 69 02 c0       	mov    eax,ds:0xc0026920
c000f21b:	89 02                	mov    DWORD PTR [edx],eax
c000f21d:	eb 3f                	jmp    c000f25e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f21f:	31 c9                	xor    ecx,ecx
c000f221:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f225:	0f a2                	cpuid  
c000f227:	89 06                	mov    DWORD PTR [esi],eax
c000f229:	89 1f                	mov    DWORD PTR [edi],ebx
c000f22b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f22f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f232:	89 10                	mov    DWORD PTR [eax],edx
c000f234:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f238:	a3 d0 12 02 c0       	mov    ds:0xc00212d0,eax
c000f23d:	8b 06                	mov    eax,DWORD PTR [esi]
c000f23f:	a3 2c 69 02 c0       	mov    ds:0xc002692c,eax
c000f244:	8b 07                	mov    eax,DWORD PTR [edi]
c000f246:	a3 28 69 02 c0       	mov    ds:0xc0026928,eax
c000f24b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f24e:	a3 24 69 02 c0       	mov    ds:0xc0026924,eax
c000f253:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f257:	8b 00                	mov    eax,DWORD PTR [eax]
c000f259:	a3 20 69 02 c0       	mov    ds:0xc0026920,eax
c000f25e:	5b                   	pop    ebx
c000f25f:	5e                   	pop    esi
c000f260:	5f                   	pop    edi
c000f261:	5d                   	pop    ebp
c000f262:	c3                   	ret    
c000f263:	90                   	nop

c000f264 <CPU::cpuidCheckEDX(unsigned int)>:
c000f264:	83 ec 10             	sub    esp,0x10
c000f267:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f26b:	50                   	push   eax
c000f26c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f270:	50                   	push   eax
c000f271:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f275:	50                   	push   eax
c000f276:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f27a:	50                   	push   eax
c000f27b:	6a 01                	push   0x1
c000f27d:	e8 5e ff ff ff       	call   c000f1e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f282:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f286:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f28a:	0f 95 c0             	setne  al
c000f28d:	83 c4 24             	add    esp,0x24
c000f290:	c3                   	ret    
c000f291:	90                   	nop

c000f292 <CPU::cpuidCheckECX(unsigned int)>:
c000f292:	83 ec 10             	sub    esp,0x10
c000f295:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f299:	50                   	push   eax
c000f29a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f29e:	50                   	push   eax
c000f29f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2a3:	50                   	push   eax
c000f2a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2a8:	50                   	push   eax
c000f2a9:	6a 01                	push   0x1
c000f2ab:	e8 30 ff ff ff       	call   c000f1e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2b4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f2b8:	0f 95 c0             	setne  al
c000f2bb:	83 c4 24             	add    esp,0x24
c000f2be:	c3                   	ret    
c000f2bf:	90                   	nop

c000f2c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f2c0:	83 ec 10             	sub    esp,0x10
c000f2c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2c7:	50                   	push   eax
c000f2c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2cc:	50                   	push   eax
c000f2cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2d1:	50                   	push   eax
c000f2d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2d6:	50                   	push   eax
c000f2d7:	6a 07                	push   0x7
c000f2d9:	e8 02 ff ff ff       	call   c000f1e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2e2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f2e6:	0f 95 c0             	setne  al
c000f2e9:	83 c4 24             	add    esp,0x24
c000f2ec:	c3                   	ret    
c000f2ed:	90                   	nop

c000f2ee <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f2ee:	83 ec 10             	sub    esp,0x10
c000f2f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2f5:	50                   	push   eax
c000f2f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2fa:	50                   	push   eax
c000f2fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2ff:	50                   	push   eax
c000f300:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f304:	50                   	push   eax
c000f305:	6a 07                	push   0x7
c000f307:	e8 d4 fe ff ff       	call   c000f1e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f30c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f310:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f314:	0f 95 c0             	setne  al
c000f317:	83 c4 24             	add    esp,0x24
c000f31a:	c3                   	ret    
c000f31b:	90                   	nop

c000f31c <CPU::CPU()>:
c000f31c:	83 ec 0c             	sub    esp,0xc
c000f31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f323:	83 ec 08             	sub    esp,0x8
c000f326:	68 bd ff 01 c0       	push   0xc001ffbd
c000f32b:	50                   	push   eax
c000f32c:	e8 9f c8 ff ff       	call   c000bbd0 <Device::Device(char const*)>
c000f331:	83 c4 10             	add    esp,0x10
c000f334:	ba 44 00 02 c0       	mov    edx,0xc0020044
c000f339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f33d:	89 10                	mov    DWORD PTR [eax],edx
c000f33f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f343:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f34d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f351:	05 78 01 00 00       	add    eax,0x178
c000f356:	83 ec 0c             	sub    esp,0xc
c000f359:	50                   	push   eax
c000f35a:	e8 c5 7d ff ff       	call   c0007124 <GDT::GDT()>
c000f35f:	83 c4 10             	add    esp,0x10
c000f362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f366:	05 7c 09 00 00       	add    eax,0x97c
c000f36b:	83 ec 0c             	sub    esp,0xc
c000f36e:	50                   	push   eax
c000f36f:	e8 ec 7f ff ff       	call   c0007360 <IDT::IDT()>
c000f374:	83 c4 10             	add    esp,0x10
c000f377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f37b:	05 7c 11 00 00       	add    eax,0x117c
c000f380:	83 ec 0c             	sub    esp,0xc
c000f383:	50                   	push   eax
c000f384:	e8 f7 98 ff ff       	call   c0008c80 <TSS::TSS()>
c000f389:	83 c4 10             	add    esp,0x10
c000f38c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f390:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f397:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f39b:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c000f3a5:	90                   	nop
c000f3a6:	83 c4 0c             	add    esp,0xc
c000f3a9:	c3                   	ret    

c000f3aa <CPU::displayFeatures()>:
c000f3aa:	c3                   	ret    
c000f3ab:	90                   	nop

c000f3ac <CPU::detectFeatures()>:
c000f3ac:	55                   	push   ebp
c000f3ad:	57                   	push   edi
c000f3ae:	56                   	push   esi
c000f3af:	53                   	push   ebx
c000f3b0:	83 ec 30             	sub    esp,0x30
c000f3b3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f3b7:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f3c1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f3c8:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f3ce:	6a 0d                	push   0xd
c000f3d0:	6a 00                	push   0x0
c000f3d2:	55                   	push   ebp
c000f3d3:	e8 e8 10 ff ff       	call   c00004c0 <memset>
c000f3d8:	83 c4 10             	add    esp,0x10
c000f3db:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000f3e0:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f3e7:	0f 84 d5 05 00 00    	je     c000f9c2 <CPU::detectFeatures()+0x616>
c000f3ed:	83 ec 0c             	sub    esp,0xc
c000f3f0:	89 ef                	mov    edi,ebp
c000f3f2:	6a 10                	push   0x10
c000f3f4:	e8 6b fe ff ff       	call   c000f264 <CPU::cpuidCheckEDX(unsigned int)>
c000f3f9:	83 e0 01             	and    eax,0x1
c000f3fc:	8d 14 00             	lea    edx,[eax+eax*1]
c000f3ff:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f405:	83 e0 fd             	and    eax,0xfffffffd
c000f408:	09 d0                	or     eax,edx
c000f40a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f410:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f417:	e8 48 fe ff ff       	call   c000f264 <CPU::cpuidCheckEDX(unsigned int)>
c000f41c:	83 e0 01             	and    eax,0x1
c000f41f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f426:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f42c:	83 e0 fb             	and    eax,0xfffffffb
c000f42f:	09 d0                	or     eax,edx
c000f431:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f437:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f43e:	e8 21 fe ff ff       	call   c000f264 <CPU::cpuidCheckEDX(unsigned int)>
c000f443:	83 e0 01             	and    eax,0x1
c000f446:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f44d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f453:	83 e0 f7             	and    eax,0xfffffff7
c000f456:	09 d0                	or     eax,edx
c000f458:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f45e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f465:	e8 fa fd ff ff       	call   c000f264 <CPU::cpuidCheckEDX(unsigned int)>
c000f46a:	83 e0 01             	and    eax,0x1
c000f46d:	c1 e0 04             	shl    eax,0x4
c000f470:	88 c2                	mov    dl,al
c000f472:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f478:	83 e0 ef             	and    eax,0xffffffef
c000f47b:	09 d0                	or     eax,edx
c000f47d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f483:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f48a:	e8 d5 fd ff ff       	call   c000f264 <CPU::cpuidCheckEDX(unsigned int)>
c000f48f:	83 e0 01             	and    eax,0x1
c000f492:	c1 e0 05             	shl    eax,0x5
c000f495:	88 c2                	mov    dl,al
c000f497:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f49d:	83 e0 df             	and    eax,0xffffffdf
c000f4a0:	09 d0                	or     eax,edx
c000f4a2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f4af:	e8 b0 fd ff ff       	call   c000f264 <CPU::cpuidCheckEDX(unsigned int)>
c000f4b4:	83 e0 01             	and    eax,0x1
c000f4b7:	8d 14 00             	lea    edx,[eax+eax*1]
c000f4ba:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f4c0:	83 e0 fd             	and    eax,0xfffffffd
c000f4c3:	09 d0                	or     eax,edx
c000f4c5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f4cb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f4d2:	e8 8d fd ff ff       	call   c000f264 <CPU::cpuidCheckEDX(unsigned int)>
c000f4d7:	83 e0 01             	and    eax,0x1
c000f4da:	c1 e0 06             	shl    eax,0x6
c000f4dd:	88 c2                	mov    dl,al
c000f4df:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f4e5:	83 e0 bf             	and    eax,0xffffffbf
c000f4e8:	09 d0                	or     eax,edx
c000f4ea:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f4f0:	58                   	pop    eax
c000f4f1:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f4f5:	50                   	push   eax
c000f4f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f4fa:	50                   	push   eax
c000f4fb:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f4ff:	56                   	push   esi
c000f500:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f504:	50                   	push   eax
c000f505:	6a 00                	push   0x0
c000f507:	e8 d4 fc ff ff       	call   c000f1e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f50c:	b8 04 00 00 00       	mov    eax,0x4
c000f511:	89 c1                	mov    ecx,eax
c000f513:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f515:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f51b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f51f:	89 c1                	mov    ecx,eax
c000f521:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f523:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f529:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f52d:	89 c1                	mov    ecx,eax
c000f52f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f531:	83 c4 18             	add    esp,0x18
c000f534:	68 cc fe 01 c0       	push   0xc001fecc
c000f539:	55                   	push   ebp
c000f53a:	e8 91 11 ff ff       	call   c00006d0 <strcmp>
c000f53f:	83 c4 10             	add    esp,0x10
c000f542:	85 c0                	test   eax,eax
c000f544:	75 0f                	jne    c000f555 <CPU::detectFeatures()+0x1a9>
c000f546:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f550:	e9 22 02 00 00       	jmp    c000f777 <CPU::detectFeatures()+0x3cb>
c000f555:	50                   	push   eax
c000f556:	50                   	push   eax
c000f557:	68 d9 fe 01 c0       	push   0xc001fed9
c000f55c:	55                   	push   ebp
c000f55d:	e8 6e 11 ff ff       	call   c00006d0 <strcmp>
c000f562:	83 c4 10             	add    esp,0x10
c000f565:	85 c0                	test   eax,eax
c000f567:	74 dd                	je     c000f546 <CPU::detectFeatures()+0x19a>
c000f569:	50                   	push   eax
c000f56a:	50                   	push   eax
c000f56b:	68 e6 fe 01 c0       	push   0xc001fee6
c000f570:	55                   	push   ebp
c000f571:	e8 5a 11 ff ff       	call   c00006d0 <strcmp>
c000f576:	83 c4 10             	add    esp,0x10
c000f579:	85 c0                	test   eax,eax
c000f57b:	74 2a                	je     c000f5a7 <CPU::detectFeatures()+0x1fb>
c000f57d:	50                   	push   eax
c000f57e:	50                   	push   eax
c000f57f:	68 f3 fe 01 c0       	push   0xc001fef3
c000f584:	55                   	push   ebp
c000f585:	e8 46 11 ff ff       	call   c00006d0 <strcmp>
c000f58a:	83 c4 10             	add    esp,0x10
c000f58d:	85 c0                	test   eax,eax
c000f58f:	74 16                	je     c000f5a7 <CPU::detectFeatures()+0x1fb>
c000f591:	50                   	push   eax
c000f592:	50                   	push   eax
c000f593:	68 00 ff 01 c0       	push   0xc001ff00
c000f598:	55                   	push   ebp
c000f599:	e8 32 11 ff ff       	call   c00006d0 <strcmp>
c000f59e:	83 c4 10             	add    esp,0x10
c000f5a1:	85 c0                	test   eax,eax
c000f5a3:	74 48                	je     c000f5ed <CPU::detectFeatures()+0x241>
c000f5a5:	eb 0f                	jmp    c000f5b6 <CPU::detectFeatures()+0x20a>
c000f5a7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f5b1:	e9 c1 01 00 00       	jmp    c000f777 <CPU::detectFeatures()+0x3cb>
c000f5b6:	50                   	push   eax
c000f5b7:	50                   	push   eax
c000f5b8:	68 0d ff 01 c0       	push   0xc001ff0d
c000f5bd:	55                   	push   ebp
c000f5be:	e8 0d 11 ff ff       	call   c00006d0 <strcmp>
c000f5c3:	83 c4 10             	add    esp,0x10
c000f5c6:	85 c0                	test   eax,eax
c000f5c8:	74 23                	je     c000f5ed <CPU::detectFeatures()+0x241>
c000f5ca:	57                   	push   edi
c000f5cb:	57                   	push   edi
c000f5cc:	68 1a ff 01 c0       	push   0xc001ff1a
c000f5d1:	55                   	push   ebp
c000f5d2:	e8 f9 10 ff ff       	call   c00006d0 <strcmp>
c000f5d7:	83 c4 10             	add    esp,0x10
c000f5da:	85 c0                	test   eax,eax
c000f5dc:	75 1e                	jne    c000f5fc <CPU::detectFeatures()+0x250>
c000f5de:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f5e8:	e9 8a 01 00 00       	jmp    c000f777 <CPU::detectFeatures()+0x3cb>
c000f5ed:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f5f7:	e9 7b 01 00 00       	jmp    c000f777 <CPU::detectFeatures()+0x3cb>
c000f5fc:	56                   	push   esi
c000f5fd:	56                   	push   esi
c000f5fe:	68 27 ff 01 c0       	push   0xc001ff27
c000f603:	55                   	push   ebp
c000f604:	e8 c7 10 ff ff       	call   c00006d0 <strcmp>
c000f609:	83 c4 10             	add    esp,0x10
c000f60c:	85 c0                	test   eax,eax
c000f60e:	75 0f                	jne    c000f61f <CPU::detectFeatures()+0x273>
c000f610:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f61a:	e9 58 01 00 00       	jmp    c000f777 <CPU::detectFeatures()+0x3cb>
c000f61f:	51                   	push   ecx
c000f620:	51                   	push   ecx
c000f621:	68 e6 fe 01 c0       	push   0xc001fee6
c000f626:	55                   	push   ebp
c000f627:	e8 a4 10 ff ff       	call   c00006d0 <strcmp>
c000f62c:	83 c4 10             	add    esp,0x10
c000f62f:	85 c0                	test   eax,eax
c000f631:	75 0f                	jne    c000f642 <CPU::detectFeatures()+0x296>
c000f633:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f63d:	e9 35 01 00 00       	jmp    c000f777 <CPU::detectFeatures()+0x3cb>
c000f642:	52                   	push   edx
c000f643:	52                   	push   edx
c000f644:	68 34 ff 01 c0       	push   0xc001ff34
c000f649:	55                   	push   ebp
c000f64a:	e8 81 10 ff ff       	call   c00006d0 <strcmp>
c000f64f:	83 c4 10             	add    esp,0x10
c000f652:	85 c0                	test   eax,eax
c000f654:	75 0f                	jne    c000f665 <CPU::detectFeatures()+0x2b9>
c000f656:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f660:	e9 12 01 00 00       	jmp    c000f777 <CPU::detectFeatures()+0x3cb>
c000f665:	50                   	push   eax
c000f666:	50                   	push   eax
c000f667:	68 41 ff 01 c0       	push   0xc001ff41
c000f66c:	55                   	push   ebp
c000f66d:	e8 5e 10 ff ff       	call   c00006d0 <strcmp>
c000f672:	83 c4 10             	add    esp,0x10
c000f675:	85 c0                	test   eax,eax
c000f677:	75 0f                	jne    c000f688 <CPU::detectFeatures()+0x2dc>
c000f679:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f683:	e9 ef 00 00 00       	jmp    c000f777 <CPU::detectFeatures()+0x3cb>
c000f688:	50                   	push   eax
c000f689:	50                   	push   eax
c000f68a:	68 4e ff 01 c0       	push   0xc001ff4e
c000f68f:	55                   	push   ebp
c000f690:	e8 3b 10 ff ff       	call   c00006d0 <strcmp>
c000f695:	83 c4 10             	add    esp,0x10
c000f698:	85 c0                	test   eax,eax
c000f69a:	75 0f                	jne    c000f6ab <CPU::detectFeatures()+0x2ff>
c000f69c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f6a6:	e9 cc 00 00 00       	jmp    c000f777 <CPU::detectFeatures()+0x3cb>
c000f6ab:	50                   	push   eax
c000f6ac:	50                   	push   eax
c000f6ad:	68 5b ff 01 c0       	push   0xc001ff5b
c000f6b2:	55                   	push   ebp
c000f6b3:	e8 18 10 ff ff       	call   c00006d0 <strcmp>
c000f6b8:	83 c4 10             	add    esp,0x10
c000f6bb:	85 c0                	test   eax,eax
c000f6bd:	75 0f                	jne    c000f6ce <CPU::detectFeatures()+0x322>
c000f6bf:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f6c9:	e9 a9 00 00 00       	jmp    c000f777 <CPU::detectFeatures()+0x3cb>
c000f6ce:	50                   	push   eax
c000f6cf:	50                   	push   eax
c000f6d0:	68 68 ff 01 c0       	push   0xc001ff68
c000f6d5:	55                   	push   ebp
c000f6d6:	e8 f5 0f ff ff       	call   c00006d0 <strcmp>
c000f6db:	83 c4 10             	add    esp,0x10
c000f6de:	85 c0                	test   eax,eax
c000f6e0:	75 0f                	jne    c000f6f1 <CPU::detectFeatures()+0x345>
c000f6e2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f6ec:	e9 86 00 00 00       	jmp    c000f777 <CPU::detectFeatures()+0x3cb>
c000f6f1:	50                   	push   eax
c000f6f2:	50                   	push   eax
c000f6f3:	68 75 ff 01 c0       	push   0xc001ff75
c000f6f8:	55                   	push   ebp
c000f6f9:	e8 d2 0f ff ff       	call   c00006d0 <strcmp>
c000f6fe:	83 c4 10             	add    esp,0x10
c000f701:	85 c0                	test   eax,eax
c000f703:	75 0c                	jne    c000f711 <CPU::detectFeatures()+0x365>
c000f705:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f70f:	eb 66                	jmp    c000f777 <CPU::detectFeatures()+0x3cb>
c000f711:	50                   	push   eax
c000f712:	50                   	push   eax
c000f713:	68 82 ff 01 c0       	push   0xc001ff82
c000f718:	55                   	push   ebp
c000f719:	e8 b2 0f ff ff       	call   c00006d0 <strcmp>
c000f71e:	83 c4 10             	add    esp,0x10
c000f721:	85 c0                	test   eax,eax
c000f723:	75 0c                	jne    c000f731 <CPU::detectFeatures()+0x385>
c000f725:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f72f:	eb 46                	jmp    c000f777 <CPU::detectFeatures()+0x3cb>
c000f731:	57                   	push   edi
c000f732:	57                   	push   edi
c000f733:	68 8f ff 01 c0       	push   0xc001ff8f
c000f738:	55                   	push   ebp
c000f739:	e8 92 0f ff ff       	call   c00006d0 <strcmp>
c000f73e:	83 c4 10             	add    esp,0x10
c000f741:	85 c0                	test   eax,eax
c000f743:	74 e0                	je     c000f725 <CPU::detectFeatures()+0x379>
c000f745:	56                   	push   esi
c000f746:	56                   	push   esi
c000f747:	68 9c ff 01 c0       	push   0xc001ff9c
c000f74c:	55                   	push   ebp
c000f74d:	e8 7e 0f ff ff       	call   c00006d0 <strcmp>
c000f752:	83 c4 10             	add    esp,0x10
c000f755:	85 c0                	test   eax,eax
c000f757:	74 cc                	je     c000f725 <CPU::detectFeatures()+0x379>
c000f759:	51                   	push   ecx
c000f75a:	51                   	push   ecx
c000f75b:	68 a9 ff 01 c0       	push   0xc001ffa9
c000f760:	55                   	push   ebp
c000f761:	e8 6a 0f ff ff       	call   c00006d0 <strcmp>
c000f766:	83 c4 10             	add    esp,0x10
c000f769:	85 c0                	test   eax,eax
c000f76b:	74 b8                	je     c000f725 <CPU::detectFeatures()+0x379>
c000f76d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f777:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f77c:	0f 86 be 00 00 00    	jbe    c000f840 <CPU::detectFeatures()+0x494>
c000f782:	83 ec 0c             	sub    esp,0xc
c000f785:	68 80 00 00 00       	push   0x80
c000f78a:	e8 31 fb ff ff       	call   c000f2c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f78f:	83 e0 01             	and    eax,0x1
c000f792:	c1 e0 06             	shl    eax,0x6
c000f795:	88 c2                	mov    dl,al
c000f797:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f79d:	83 e0 bf             	and    eax,0xffffffbf
c000f7a0:	09 d0                	or     eax,edx
c000f7a2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7a8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f7af:	e8 0c fb ff ff       	call   c000f2c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7b4:	83 e0 01             	and    eax,0x1
c000f7b7:	c1 e0 04             	shl    eax,0x4
c000f7ba:	88 c2                	mov    dl,al
c000f7bc:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f7c2:	83 e0 ef             	and    eax,0xffffffef
c000f7c5:	09 d0                	or     eax,edx
c000f7c7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f7cd:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f7d4:	e8 e7 fa ff ff       	call   c000f2c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7d9:	c1 e0 07             	shl    eax,0x7
c000f7dc:	88 c2                	mov    dl,al
c000f7de:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7e4:	83 e0 7f             	and    eax,0x7f
c000f7e7:	09 d0                	or     eax,edx
c000f7e9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7ef:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f7f6:	e8 f3 fa ff ff       	call   c000f2ee <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f7fb:	83 e0 01             	and    eax,0x1
c000f7fe:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f805:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f80b:	83 e0 f7             	and    eax,0xfffffff7
c000f80e:	09 d0                	or     eax,edx
c000f810:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f816:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f81d:	e8 cc fa ff ff       	call   c000f2ee <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f822:	83 c4 10             	add    esp,0x10
c000f825:	83 e0 01             	and    eax,0x1
c000f828:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f82f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f835:	83 e0 fb             	and    eax,0xfffffffb
c000f838:	09 d0                	or     eax,edx
c000f83a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f840:	83 ec 0c             	sub    esp,0xc
c000f843:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f847:	50                   	push   eax
c000f848:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f84c:	50                   	push   eax
c000f84d:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f851:	56                   	push   esi
c000f852:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f856:	50                   	push   eax
c000f857:	6a 01                	push   0x1
c000f859:	e8 82 f9 ff ff       	call   c000f1e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f85e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f862:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f868:	88 ca                	mov    dl,cl
c000f86a:	83 e0 f0             	and    eax,0xfffffff0
c000f86d:	83 e2 0f             	and    edx,0xf
c000f870:	09 d0                	or     eax,edx
c000f872:	88 ca                	mov    dl,cl
c000f874:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f87a:	c0 ea 04             	shr    dl,0x4
c000f87d:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f881:	0f b6 c2             	movzx  eax,dl
c000f884:	83 c4 20             	add    esp,0x20
c000f887:	c1 e0 06             	shl    eax,0x6
c000f88a:	89 c7                	mov    edi,eax
c000f88c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f892:	66 25 3f c0          	and    ax,0xc03f
c000f896:	09 f8                	or     eax,edi
c000f898:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f89f:	89 c8                	mov    eax,ecx
c000f8a1:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f8a8:	c1 e8 08             	shr    eax,0x8
c000f8ab:	83 e5 3f             	and    ebp,0x3f
c000f8ae:	83 e0 0f             	and    eax,0xf
c000f8b1:	89 c7                	mov    edi,eax
c000f8b3:	c1 e7 06             	shl    edi,0x6
c000f8b6:	09 ef                	or     edi,ebp
c000f8b8:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f8bf:	89 fa                	mov    edx,edi
c000f8c1:	83 e5 c0             	and    ebp,0xffffffc0
c000f8c4:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f8ca:	88 c2                	mov    dl,al
c000f8cc:	c0 ea 02             	shr    dl,0x2
c000f8cf:	89 d7                	mov    edi,edx
c000f8d1:	09 ef                	or     edi,ebp
c000f8d3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f8d9:	89 fa                	mov    edx,edi
c000f8db:	83 e5 cf             	and    ebp,0xffffffcf
c000f8de:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f8e4:	89 cf                	mov    edi,ecx
c000f8e6:	c1 ef 0c             	shr    edi,0xc
c000f8e9:	83 e7 03             	and    edi,0x3
c000f8ec:	c1 e7 04             	shl    edi,0x4
c000f8ef:	09 ef                	or     edi,ebp
c000f8f1:	3c 06                	cmp    al,0x6
c000f8f3:	89 fa                	mov    edx,edi
c000f8f5:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f8fb:	74 04                	je     c000f901 <CPU::detectFeatures()+0x555>
c000f8fd:	3c 0f                	cmp    al,0xf
c000f8ff:	75 5c                	jne    c000f95d <CPU::detectFeatures()+0x5b1>
c000f901:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f905:	89 cf                	mov    edi,ecx
c000f907:	c1 ef 10             	shr    edi,0x10
c000f90a:	c1 e7 04             	shl    edi,0x4
c000f90d:	09 fa                	or     edx,edi
c000f90f:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f915:	0f b6 d2             	movzx  edx,dl
c000f918:	66 81 e7 3f c0       	and    di,0xc03f
c000f91d:	c1 e2 06             	shl    edx,0x6
c000f920:	09 fa                	or     edx,edi
c000f922:	3c 0f                	cmp    al,0xf
c000f924:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f92b:	75 30                	jne    c000f95d <CPU::detectFeatures()+0x5b1>
c000f92d:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f933:	c1 e9 14             	shr    ecx,0x14
c000f936:	83 e0 3f             	and    eax,0x3f
c000f939:	83 c1 0f             	add    ecx,0xf
c000f93c:	88 ca                	mov    dl,cl
c000f93e:	c0 e9 02             	shr    cl,0x2
c000f941:	c1 e2 06             	shl    edx,0x6
c000f944:	09 d0                	or     eax,edx
c000f946:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f94c:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f952:	83 e0 c0             	and    eax,0xffffffc0
c000f955:	09 c1                	or     ecx,eax
c000f957:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f95d:	83 ec 0c             	sub    esp,0xc
c000f960:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f967:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f96b:	50                   	push   eax
c000f96c:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f970:	55                   	push   ebp
c000f971:	56                   	push   esi
c000f972:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f976:	57                   	push   edi
c000f977:	68 00 00 00 80       	push   0x80000000
c000f97c:	e8 5f f8 ff ff       	call   c000f1e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f981:	83 c4 20             	add    esp,0x20
c000f984:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f98c:	76 22                	jbe    c000f9b0 <CPU::detectFeatures()+0x604>
c000f98e:	83 ec 0c             	sub    esp,0xc
c000f991:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f995:	50                   	push   eax
c000f996:	55                   	push   ebp
c000f997:	56                   	push   esi
c000f998:	57                   	push   edi
c000f999:	68 01 00 00 80       	push   0x80000001
c000f99e:	e8 3d f8 ff ff       	call   c000f1e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9a3:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f9ad:	83 c4 20             	add    esp,0x20
c000f9b0:	52                   	push   edx
c000f9b1:	52                   	push   edx
c000f9b2:	68 b5 ff 01 c0       	push   0xc001ffb5
c000f9b7:	53                   	push   ebx
c000f9b8:	e8 05 c2 ff ff       	call   c000bbc2 <Device::setName(char const*)>
c000f9bd:	83 c4 10             	add    esp,0x10
c000f9c0:	eb 67                	jmp    c000fa29 <CPU::detectFeatures()+0x67d>
c000f9c2:	50                   	push   eax
c000f9c3:	50                   	push   eax
c000f9c4:	68 1a ff 01 c0       	push   0xc001ff1a
c000f9c9:	55                   	push   ebp
c000f9ca:	e8 21 0c ff ff       	call   c00005f0 <strcpy>
c000f9cf:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f9d9:	e8 e5 07 ff ff       	call   c00001c3 <is486>
c000f9de:	83 c4 10             	add    esp,0x10
c000f9e1:	85 c0                	test   eax,eax
c000f9e3:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f9e9:	74 1d                	je     c000fa08 <CPU::detectFeatures()+0x65c>
c000f9eb:	83 c8 07             	or     eax,0x7
c000f9ee:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f9f4:	0f 20 c0             	mov    eax,cr0
c000f9f7:	83 e0 14             	and    eax,0x14
c000f9fa:	83 f8 04             	cmp    eax,0x4
c000f9fd:	75 0e                	jne    c000fa0d <CPU::detectFeatures()+0x661>
c000f9ff:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fa06:	eb 21                	jmp    c000fa29 <CPU::detectFeatures()+0x67d>
c000fa08:	83 e0 f8             	and    eax,0xfffffff8
c000fa0b:	eb e1                	jmp    c000f9ee <CPU::detectFeatures()+0x642>
c000fa0d:	e8 8c 07 ff ff       	call   c000019e <hasLegacyFPU>
c000fa12:	83 e0 01             	and    eax,0x1
c000fa15:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa18:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa1e:	83 e0 fd             	and    eax,0xfffffffd
c000fa21:	09 d0                	or     eax,edx
c000fa23:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa29:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fa30:	74 0e                	je     c000fa40 <CPU::detectFeatures()+0x694>
c000fa32:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000fa37:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fa3e:	eb 20                	jmp    c000fa60 <CPU::detectFeatures()+0x6b4>
c000fa40:	e8 59 07 ff ff       	call   c000019e <hasLegacyFPU>
c000fa45:	83 e0 01             	and    eax,0x1
c000fa48:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa4b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa51:	83 e0 fd             	and    eax,0xfffffffd
c000fa54:	09 d0                	or     eax,edx
c000fa56:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa5c:	a8 02                	test   al,0x2
c000fa5e:	75 d2                	jne    c000fa32 <CPU::detectFeatures()+0x686>
c000fa60:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fa67:	83 c4 2c             	add    esp,0x2c
c000fa6a:	5b                   	pop    ebx
c000fa6b:	5e                   	pop    esi
c000fa6c:	5f                   	pop    edi
c000fa6d:	5d                   	pop    ebp
c000fa6e:	c3                   	ret    
c000fa6f:	90                   	nop

c000fa70 <CPU::setupSMEP()>:
c000fa70:	0f 20 e0             	mov    eax,cr4
c000fa73:	0d 00 00 10 00       	or     eax,0x100000
c000fa78:	0f 22 e0             	mov    cr4,eax
c000fa7b:	c3                   	ret    

c000fa7c <CPU::setupUMIP()>:
c000fa7c:	0f 20 e0             	mov    eax,cr4
c000fa7f:	80 cc 08             	or     ah,0x8
c000fa82:	0f 22 e0             	mov    cr4,eax
c000fa85:	c3                   	ret    

c000fa86 <CPU::setupTSC()>:
c000fa86:	0f 20 e0             	mov    eax,cr4
c000fa89:	83 c8 04             	or     eax,0x4
c000fa8c:	0f 22 e0             	mov    cr4,eax
c000fa8f:	c3                   	ret    

c000fa90 <CPU::setupLargePages()>:
c000fa90:	0f 20 e0             	mov    eax,cr4
c000fa93:	83 c8 10             	or     eax,0x10
c000fa96:	0f 22 e0             	mov    cr4,eax
c000fa99:	c3                   	ret    

c000fa9a <CPU::setupPAT()>:
c000fa9a:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c000fa9f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000faa6:	74 2c                	je     c000fad4 <CPU::setupPAT()+0x3a>
c000faa8:	53                   	push   ebx
c000faa9:	83 ec 10             	sub    esp,0x10
c000faac:	68 77 02 00 00       	push   0x277
c000fab1:	50                   	push   eax
c000fab2:	e8 e5 73 ff ff       	call   c0006e9c <Computer::rdmsr(unsigned int)>
c000fab7:	83 e2 f8             	and    edx,0xfffffff8
c000faba:	83 ca 01             	or     edx,0x1
c000fabd:	52                   	push   edx
c000fabe:	50                   	push   eax
c000fabf:	68 77 02 00 00       	push   0x277
c000fac4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c000faca:	e8 f9 73 ff ff       	call   c0006ec8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000facf:	83 c4 28             	add    esp,0x28
c000fad2:	5b                   	pop    ebx
c000fad3:	c3                   	ret    
c000fad4:	c3                   	ret    
c000fad5:	90                   	nop

c000fad6 <CPU::setupMTRR()>:
c000fad6:	c3                   	ret    
c000fad7:	90                   	nop

c000fad8 <CPU::setupGlobalPages()>:
c000fad8:	0f 20 e0             	mov    eax,cr4
c000fadb:	0c 80                	or     al,0x80
c000fadd:	0f 22 e0             	mov    cr4,eax
c000fae0:	c3                   	ret    
c000fae1:	90                   	nop

c000fae2 <CPU::allowUsermodeDataAccess()>:
c000fae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fae6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000faed:	74 03                	je     c000faf2 <CPU::allowUsermodeDataAccess()+0x10>
c000faef:	0f 01 cb             	stac   
c000faf2:	c3                   	ret    
c000faf3:	90                   	nop

c000faf4 <CPU::prohibitUsermodeDataAccess()>:
c000faf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000faf8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000faff:	74 03                	je     c000fb04 <CPU::prohibitUsermodeDataAccess()+0x10>
c000fb01:	0f 01 ca             	clac   
c000fb04:	c3                   	ret    
c000fb05:	90                   	nop

c000fb06 <CPU::setupSMAP()>:
c000fb06:	0f 20 e0             	mov    eax,cr4
c000fb09:	0d 00 00 20 00       	or     eax,0x200000
c000fb0e:	0f 22 e0             	mov    cr4,eax
c000fb11:	eb e1                	jmp    c000faf4 <CPU::prohibitUsermodeDataAccess()>
c000fb13:	90                   	nop

c000fb14 <CPU::setupFeatures()>:
c000fb14:	53                   	push   ebx
c000fb15:	83 ec 08             	sub    esp,0x8
c000fb18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb1c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fb23:	74 18                	je     c000fb3d <CPU::setupFeatures()+0x29>
c000fb25:	83 ec 0c             	sub    esp,0xc
c000fb28:	68 c1 ff 01 c0       	push   0xc001ffc1
c000fb2d:	e8 c8 aa ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000fb32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb35:	e8 42 ff ff ff       	call   c000fa7c <CPU::setupUMIP()>
c000fb3a:	83 c4 10             	add    esp,0x10
c000fb3d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fb44:	74 18                	je     c000fb5e <CPU::setupFeatures()+0x4a>
c000fb46:	83 ec 0c             	sub    esp,0xc
c000fb49:	68 cb ff 01 c0       	push   0xc001ffcb
c000fb4e:	e8 a7 aa ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000fb53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb56:	e8 2b ff ff ff       	call   c000fa86 <CPU::setupTSC()>
c000fb5b:	83 c4 10             	add    esp,0x10
c000fb5e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fb65:	74 18                	je     c000fb7f <CPU::setupFeatures()+0x6b>
c000fb67:	83 ec 0c             	sub    esp,0xc
c000fb6a:	68 d4 ff 01 c0       	push   0xc001ffd4
c000fb6f:	e8 86 aa ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000fb74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb77:	e8 14 ff ff ff       	call   c000fa90 <CPU::setupLargePages()>
c000fb7c:	83 c4 10             	add    esp,0x10
c000fb7f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fb86:	74 18                	je     c000fba0 <CPU::setupFeatures()+0x8c>
c000fb88:	83 ec 0c             	sub    esp,0xc
c000fb8b:	68 dd ff 01 c0       	push   0xc001ffdd
c000fb90:	e8 65 aa ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000fb95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb98:	e8 3b ff ff ff       	call   c000fad8 <CPU::setupGlobalPages()>
c000fb9d:	83 c4 10             	add    esp,0x10
c000fba0:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fba7:	74 18                	je     c000fbc1 <CPU::setupFeatures()+0xad>
c000fba9:	83 ec 0c             	sub    esp,0xc
c000fbac:	68 ef ff 01 c0       	push   0xc001ffef
c000fbb1:	e8 44 aa ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c000fbb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbb9:	e8 dc fe ff ff       	call   c000fa9a <CPU::setupPAT()>
c000fbbe:	83 c4 10             	add    esp,0x10
c000fbc1:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fbc8:	74 11                	je     c000fbdb <CPU::setupFeatures()+0xc7>
c000fbca:	c7 44 24 10 f8 ff 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fff8
c000fbd2:	83 c4 08             	add    esp,0x8
c000fbd5:	5b                   	pop    ebx
c000fbd6:	e9 1f aa ff ff       	jmp    c000a5fa <Dbg::kprintf(char const*, ...)>
c000fbdb:	83 c4 08             	add    esp,0x8
c000fbde:	5b                   	pop    ebx
c000fbdf:	c3                   	ret    

c000fbe0 <CPU::open(int, int, void*)>:
c000fbe0:	57                   	push   edi
c000fbe1:	56                   	push   esi
c000fbe2:	53                   	push   ebx
c000fbe3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbe7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fbeb:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fbf1:	83 ec 0c             	sub    esp,0xc
c000fbf4:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fbfa:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fc00:	50                   	push   eax
c000fc01:	e8 80 75 ff ff       	call   c0007186 <GDT::setup()>
c000fc06:	83 c4 0c             	add    esp,0xc
c000fc09:	6a 00                	push   0x0
c000fc0b:	68 ef be ad de       	push   0xdeadbeef
c000fc10:	57                   	push   edi
c000fc11:	e8 ae 90 ff ff       	call   c0008cc4 <TSS::setup(unsigned long, unsigned long)>
c000fc16:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fc19:	e8 86 90 ff ff       	call   c0008ca4 <TSS::flush()>
c000fc1e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fc24:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc27:	e8 aa 77 ff ff       	call   c00073d6 <IDT::setup()>
c000fc2c:	b8 00 04 00 00       	mov    eax,0x400
c000fc31:	0f 23 f8             	mov    db7,eax
c000fc34:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fc3e:	e8 fe 7e ff ff       	call   c0007b41 <Phys::allocatePage()>
c000fc43:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fc49:	89 30                	mov    DWORD PTR [eax],esi
c000fc4b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fc51:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fc54:	58                   	pop    eax
c000fc55:	5a                   	pop    edx
c000fc56:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fc5c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fc60:	e8 77 a0 ff ff       	call   c0009cdc <VAS::setCPUSpecific(unsigned long)>
c000fc65:	c7 04 24 02 00 02 c0 	mov    DWORD PTR [esp],0xc0020002
c000fc6c:	e8 c6 00 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c000fc71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc74:	e8 33 f7 ff ff       	call   c000f3ac <CPU::detectFeatures()>
c000fc79:	c7 04 24 25 00 02 c0 	mov    DWORD PTR [esp],0xc0020025
c000fc80:	e8 b2 00 00 00       	call   c000fd37 <KeSetBootMessage(char const*)>
c000fc85:	e8 69 6a 00 00       	call   c00166f3 <HalInitialise()>
c000fc8a:	a1 d0 3e 02 c0       	mov    eax,ds:0xc0023ed0
c000fc8f:	83 e0 10             	and    eax,0x10
c000fc92:	83 f8 01             	cmp    eax,0x1
c000fc95:	19 c0                	sbb    eax,eax
c000fc97:	83 e0 46             	and    eax,0x46
c000fc9a:	83 c0 1e             	add    eax,0x1e
c000fc9d:	89 04 24             	mov    DWORD PTR [esp],eax
c000fca0:	e8 dc d6 ff ff       	call   c000d381 <setupTimer(int)>
c000fca5:	83 c4 10             	add    esp,0x10
c000fca8:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fcae:	f6 05 d0 3e 02 c0 20 	test   BYTE PTR ds:0xc0023ed0,0x20
c000fcb5:	74 0c                	je     c000fcc3 <CPU::open(int, int, void*)+0xe3>
c000fcb7:	83 ec 0c             	sub    esp,0xc
c000fcba:	53                   	push   ebx
c000fcbb:	e8 54 fe ff ff       	call   c000fb14 <CPU::setupFeatures()>
c000fcc0:	83 c4 10             	add    esp,0x10
c000fcc3:	5b                   	pop    ebx
c000fcc4:	31 c0                	xor    eax,eax
c000fcc6:	5e                   	pop    esi
c000fcc7:	5f                   	pop    edi
c000fcc8:	c3                   	ret    

c000fcc9 <KeDisplaySplashScreen()>:
c000fcc9:	55                   	push   ebp
c000fcca:	bd 05 00 00 00       	mov    ebp,0x5
c000fccf:	57                   	push   edi
c000fcd0:	bf e0 12 02 c0       	mov    edi,0xc00212e0
c000fcd5:	56                   	push   esi
c000fcd6:	be 0a 00 00 00       	mov    esi,0xa
c000fcdb:	53                   	push   ebx
c000fcdc:	31 db                	xor    ebx,ebx
c000fcde:	83 ec 0c             	sub    esp,0xc
c000fce1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fce4:	84 c0                	test   al,al
c000fce6:	74 47                	je     c000fd2f <KeDisplaySplashScreen()+0x66>
c000fce8:	80 bb 16 13 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdecea],0xdb
c000fcef:	75 13                	jne    c000fd04 <KeDisplaySplashScreen()+0x3b>
c000fcf1:	0f b6 93 15 13 02 c0 	movzx  edx,BYTE PTR [ebx-0x3ffdeceb]
c000fcf8:	83 e2 fe             	and    edx,0xfffffffe
c000fcfb:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fd01:	75 01                	jne    c000fd04 <KeDisplaySplashScreen()+0x3b>
c000fd03:	46                   	inc    esi
c000fd04:	3c 0d                	cmp    al,0xd
c000fd06:	74 24                	je     c000fd2c <KeDisplaySplashScreen()+0x63>
c000fd08:	3c 0a                	cmp    al,0xa
c000fd0a:	75 0a                	jne    c000fd16 <KeDisplaySplashScreen()+0x4d>
c000fd0c:	45                   	inc    ebp
c000fd0d:	be 0a 00 00 00       	mov    esi,0xa
c000fd12:	31 db                	xor    ebx,ebx
c000fd14:	eb 16                	jmp    c000fd2c <KeDisplaySplashScreen()+0x63>
c000fd16:	83 ec 0c             	sub    esp,0xc
c000fd19:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fd1c:	55                   	push   ebp
c000fd1d:	43                   	inc    ebx
c000fd1e:	52                   	push   edx
c000fd1f:	6a 00                	push   0x0
c000fd21:	6a 0e                	push   0xe
c000fd23:	50                   	push   eax
c000fd24:	e8 2f 76 00 00       	call   c0017358 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fd29:	83 c4 20             	add    esp,0x20
c000fd2c:	47                   	inc    edi
c000fd2d:	eb b2                	jmp    c000fce1 <KeDisplaySplashScreen()+0x18>
c000fd2f:	83 c4 0c             	add    esp,0xc
c000fd32:	5b                   	pop    ebx
c000fd33:	5e                   	pop    esi
c000fd34:	5f                   	pop    edi
c000fd35:	5d                   	pop    ebp
c000fd36:	c3                   	ret    

c000fd37 <KeSetBootMessage(char const*)>:
c000fd37:	57                   	push   edi
c000fd38:	56                   	push   esi
c000fd39:	53                   	push   ebx
c000fd3a:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fd40:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fd47:	68 9e 00 00 00       	push   0x9e
c000fd4c:	6a 00                	push   0x0
c000fd4e:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fd52:	56                   	push   esi
c000fd53:	e8 68 07 ff ff       	call   c00004c0 <memset>
c000fd58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd5b:	e8 d0 07 ff ff       	call   c0000530 <strlen>
c000fd60:	ba 50 00 00 00       	mov    edx,0x50
c000fd65:	83 c4 10             	add    esp,0x10
c000fd68:	29 c2                	sub    edx,eax
c000fd6a:	31 c9                	xor    ecx,ecx
c000fd6c:	83 e2 fe             	and    edx,0xfffffffe
c000fd6f:	01 f2                	add    edx,esi
c000fd71:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fd76:	84 c0                	test   al,al
c000fd78:	74 0a                	je     c000fd84 <KeSetBootMessage(char const*)+0x4d>
c000fd7a:	80 cc 0f             	or     ah,0xf
c000fd7d:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fd81:	41                   	inc    ecx
c000fd82:	eb ed                	jmp    c000fd71 <KeSetBootMessage(char const*)+0x3a>
c000fd84:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fd89:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fd8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd90:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fd96:	5b                   	pop    ebx
c000fd97:	5e                   	pop    esi
c000fd98:	5f                   	pop    edi
c000fd99:	c3                   	ret    

c000fd9a <EnvVarContainer::getEnv(char const*)>:
c000fd9a:	57                   	push   edi
c000fd9b:	56                   	push   esi
c000fd9c:	53                   	push   ebx
c000fd9d:	31 db                	xor    ebx,ebx
c000fd9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fda3:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fda5:	7e 2b                	jle    c000fdd2 <EnvVarContainer::getEnv(char const*)+0x38>
c000fda7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fdae:	50                   	push   eax
c000fdaf:	50                   	push   eax
c000fdb0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fdb3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fdb6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fdba:	e8 11 09 ff ff       	call   c00006d0 <strcmp>
c000fdbf:	83 c4 10             	add    esp,0x10
c000fdc2:	85 c0                	test   eax,eax
c000fdc4:	75 09                	jne    c000fdcf <EnvVarContainer::getEnv(char const*)+0x35>
c000fdc6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fdc9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fdcd:	eb 05                	jmp    c000fdd4 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fdcf:	43                   	inc    ebx
c000fdd0:	eb d1                	jmp    c000fda3 <EnvVarContainer::getEnv(char const*)+0x9>
c000fdd2:	31 c0                	xor    eax,eax
c000fdd4:	5b                   	pop    ebx
c000fdd5:	5e                   	pop    esi
c000fdd6:	5f                   	pop    edi
c000fdd7:	c3                   	ret    

c000fdd8 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fdd8:	55                   	push   ebp
c000fdd9:	57                   	push   edi
c000fdda:	56                   	push   esi
c000fddb:	53                   	push   ebx
c000fddc:	83 ec 28             	sub    esp,0x28
c000fddf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fde3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fde7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fdeb:	56                   	push   esi
c000fdec:	e8 3f 07 ff ff       	call   c0000530 <strlen>
c000fdf1:	40                   	inc    eax
c000fdf2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fdf5:	e8 6b 7a ff ff       	call   c0007865 <malloc>
c000fdfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdfd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe01:	e8 2a 07 ff ff       	call   c0000530 <strlen>
c000fe06:	40                   	inc    eax
c000fe07:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe0a:	e8 56 7a ff ff       	call   c0007865 <malloc>
c000fe0f:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fe16:	e8 15 07 ff ff       	call   c0000530 <strlen>
c000fe1b:	83 c4 0c             	add    esp,0xc
c000fe1e:	40                   	inc    eax
c000fe1f:	50                   	push   eax
c000fe20:	6a 00                	push   0x0
c000fe22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fe26:	e8 95 06 ff ff       	call   c00004c0 <memset>
c000fe2b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe2e:	e8 fd 06 ff ff       	call   c0000530 <strlen>
c000fe33:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fe37:	8d 48 01             	lea    ecx,[eax+0x1]
c000fe3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe3f:	89 de                	mov    esi,ebx
c000fe41:	e8 ea 06 ff ff       	call   c0000530 <strlen>
c000fe46:	83 c4 0c             	add    esp,0xc
c000fe49:	40                   	inc    eax
c000fe4a:	50                   	push   eax
c000fe4b:	6a 00                	push   0x0
c000fe4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fe51:	e8 6a 06 ff ff       	call   c00004c0 <memset>
c000fe56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe59:	e8 d2 06 ff ff       	call   c0000530 <strlen>
c000fe5e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fe62:	8d 48 01             	lea    ecx,[eax+0x1]
c000fe65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe67:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fe6a:	40                   	inc    eax
c000fe6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fe6e:	c1 e0 03             	shl    eax,0x3
c000fe71:	5a                   	pop    edx
c000fe72:	59                   	pop    ecx
c000fe73:	50                   	push   eax
c000fe74:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fe77:	e8 d5 79 ff ff       	call   c0007851 <realloc>
c000fe7c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fe80:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fe83:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fe86:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fe8a:	b9 08 00 00 00       	mov    ecx,0x8
c000fe8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe91:	83 c4 2c             	add    esp,0x2c
c000fe94:	5b                   	pop    ebx
c000fe95:	5e                   	pop    esi
c000fe96:	5f                   	pop    edi
c000fe97:	5d                   	pop    ebp
c000fe98:	c3                   	ret    
c000fe99:	90                   	nop

c000fe9a <EnvVarContainer::deleteEnv(char const*)>:
c000fe9a:	c3                   	ret    
c000fe9b:	90                   	nop

c000fe9c <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fe9c:	55                   	push   ebp
c000fe9d:	57                   	push   edi
c000fe9e:	56                   	push   esi
c000fe9f:	53                   	push   ebx
c000fea0:	81 ec 38 01 00 00    	sub    esp,0x138
c000fea6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fead:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000feb4:	68 14 01 00 00       	push   0x114
c000feb9:	e8 a7 79 ff ff       	call   c0007865 <malloc>
c000febe:	83 c4 0c             	add    esp,0xc
c000fec1:	89 c3                	mov    ebx,eax
c000fec3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fec6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fecd:	50                   	push   eax
c000fece:	e8 9d ac ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c000fed3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fed6:	e8 c3 af ff ff       	call   c000ae9e <File::exists()>
c000fedb:	83 c4 10             	add    esp,0x10
c000fede:	84 c0                	test   al,al
c000fee0:	75 31                	jne    c000ff13 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fee2:	50                   	push   eax
c000fee3:	50                   	push   eax
c000fee4:	6a 12                	push   0x12
c000fee6:	53                   	push   ebx
c000fee7:	e8 44 ad ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c000feec:	8b 03                	mov    eax,DWORD PTR [ebx]
c000feee:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fef1:	89 34 24             	mov    DWORD PTR [esp],esi
c000fef4:	e8 37 06 ff ff       	call   c0000530 <strlen>
c000fef9:	5a                   	pop    edx
c000fefa:	31 d2                	xor    edx,edx
c000fefc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ff00:	51                   	push   ecx
c000ff01:	56                   	push   esi
c000ff02:	52                   	push   edx
c000ff03:	50                   	push   eax
c000ff04:	53                   	push   ebx
c000ff05:	ff d7                	call   edi
c000ff07:	83 c4 14             	add    esp,0x14
c000ff0a:	53                   	push   ebx
c000ff0b:	e8 7e ad ff ff       	call   c000ac8e <File::close()>
c000ff10:	83 c4 10             	add    esp,0x10
c000ff13:	56                   	push   esi
c000ff14:	31 f6                	xor    esi,esi
c000ff16:	68 00 01 00 00       	push   0x100
c000ff1b:	6a 00                	push   0x0
c000ff1d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ff21:	50                   	push   eax
c000ff22:	e8 99 05 ff ff       	call   c00004c0 <memset>
c000ff27:	5f                   	pop    edi
c000ff28:	58                   	pop    eax
c000ff29:	6a 01                	push   0x1
c000ff2b:	53                   	push   ebx
c000ff2c:	e8 ff ac ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c000ff31:	83 c4 10             	add    esp,0x10
c000ff34:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ff3c:	83 ec 0c             	sub    esp,0xc
c000ff3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ff41:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000ff45:	51                   	push   ecx
c000ff46:	8d 54 24 23          	lea    edx,[esp+0x23]
c000ff4a:	52                   	push   edx
c000ff4b:	6a 00                	push   0x0
c000ff4d:	6a 01                	push   0x1
c000ff4f:	53                   	push   ebx
c000ff50:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ff53:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000ff57:	83 c4 20             	add    esp,0x20
c000ff5a:	3c 0d                	cmp    al,0xd
c000ff5c:	0f 84 09 01 00 00    	je     c001006b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff62:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000ff67:	0f 84 ef 00 00 00    	je     c001005c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ff6d:	3c 0a                	cmp    al,0xa
c000ff6f:	74 13                	je     c000ff84 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ff71:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ff76:	74 0c                	je     c000ff84 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000ff78:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000ff7e:	0f 8e d8 00 00 00    	jle    c001005c <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000ff84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff88:	83 ec 0c             	sub    esp,0xc
c000ff8b:	8d 78 01             	lea    edi,[eax+0x1]
c000ff8e:	57                   	push   edi
c000ff8f:	e8 d1 78 ff ff       	call   c0007865 <malloc>
c000ff94:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000ff98:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ff9c:	8d 56 04             	lea    edx,[esi+0x4]
c000ff9f:	89 14 24             	mov    DWORD PTR [esp],edx
c000ffa2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ffa6:	e8 ba 78 ff ff       	call   c0007865 <malloc>
c000ffab:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ffaf:	83 c4 0c             	add    esp,0xc
c000ffb2:	57                   	push   edi
c000ffb3:	6a 00                	push   0x0
c000ffb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ffb9:	e8 02 05 ff ff       	call   c00004c0 <memset>
c000ffbe:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ffc2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ffc6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ffca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffcc:	83 c4 0c             	add    esp,0xc
c000ffcf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ffd3:	52                   	push   edx
c000ffd4:	6a 00                	push   0x0
c000ffd6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ffda:	e8 e1 04 ff ff       	call   c00004c0 <memset>
c000ffdf:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ffe3:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000ffe7:	89 34 24             	mov    DWORD PTR [esp],esi
c000ffea:	e8 41 05 ff ff       	call   c0000530 <strlen>
c000ffef:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fff3:	89 c1                	mov    ecx,eax
c000fff5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fff7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fffa:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fffd:	40                   	inc    eax
c000fffe:	83 c4 10             	add    esp,0x10
c0010001:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010004:	85 d2                	test   edx,edx
c0010006:	75 0c                	jne    c0010014 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0010008:	83 ec 0c             	sub    esp,0xc
c001000b:	6a 08                	push   0x8
c001000d:	e8 53 78 ff ff       	call   c0007865 <malloc>
c0010012:	eb 0c                	jmp    c0010020 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0010014:	c1 e0 03             	shl    eax,0x3
c0010017:	51                   	push   ecx
c0010018:	51                   	push   ecx
c0010019:	50                   	push   eax
c001001a:	52                   	push   edx
c001001b:	e8 31 78 ff ff       	call   c0007851 <realloc>
c0010020:	83 c4 10             	add    esp,0x10
c0010023:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010026:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010029:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001002c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010030:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010034:	b9 08 00 00 00       	mov    ecx,0x8
c0010039:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001003b:	31 f6                	xor    esi,esi
c001003d:	50                   	push   eax
c001003e:	68 00 01 00 00       	push   0x100
c0010043:	6a 00                	push   0x0
c0010045:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010049:	50                   	push   eax
c001004a:	e8 71 04 ff ff       	call   c00004c0 <memset>
c001004f:	83 c4 10             	add    esp,0x10
c0010052:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001005a:	eb 0f                	jmp    c001006b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001005c:	3c 3d                	cmp    al,0x3d
c001005e:	74 07                	je     c0010067 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0010060:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0010064:	46                   	inc    esi
c0010065:	eb 04                	jmp    c001006b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0010067:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001006b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010070:	0f 85 c6 fe ff ff    	jne    c000ff3c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010076:	81 c4 2c 01 00 00    	add    esp,0x12c
c001007c:	5b                   	pop    ebx
c001007d:	5e                   	pop    esi
c001007e:	5f                   	pop    edi
c001007f:	5d                   	pop    ebp
c0010080:	c3                   	ret    
c0010081:	90                   	nop

c0010082 <EnvVarContainer::__loadSystem()>:
c0010082:	83 ec 10             	sub    esp,0x10
c0010085:	68 40 14 02 c0       	push   0xc0021440
c001008a:	68 68 00 02 c0       	push   0xc0020068
c001008f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010093:	e8 04 fe ff ff       	call   c000fe9c <EnvVarContainer::loadFrom(char const*, char const*)>
c0010098:	83 c4 1c             	add    esp,0x1c
c001009b:	c3                   	ret    

c001009c <EnvVarContainer::__loadUser()>:
c001009c:	c3                   	ret    
c001009d:	90                   	nop

c001009e <EnvVarContainer::EnvVarContainer(Process*)>:
c001009e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00100a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100b0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00100b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00100be:	90                   	nop
c00100bf:	c3                   	ret    

c00100c0 <EnvVarContainer::~EnvVarContainer()>:
c00100c0:	83 ec 0c             	sub    esp,0xc
c00100c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100ca:	85 c0                	test   eax,eax
c00100cc:	74 1d                	je     c00100eb <EnvVarContainer::~EnvVarContainer()+0x2b>
c00100ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00100d4:	85 c0                	test   eax,eax
c00100d6:	74 13                	je     c00100eb <EnvVarContainer::~EnvVarContainer()+0x2b>
c00100d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100df:	83 ec 0c             	sub    esp,0xc
c00100e2:	50                   	push   eax
c00100e3:	e8 8d 77 ff ff       	call   c0007875 <free>
c00100e8:	83 c4 10             	add    esp,0x10
c00100eb:	90                   	nop
c00100ec:	83 c4 0c             	add    esp,0xc
c00100ef:	c3                   	ret    

c00100f0 <Krnl::getEnv(Process*, char const*)>:
c00100f0:	53                   	push   ebx
c00100f1:	83 ec 08             	sub    esp,0x8
c00100f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100f8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00100fc:	39 05 90 71 02 c0    	cmp    DWORD PTR ds:0xc0027190,eax
c0010102:	74 04                	je     c0010108 <Krnl::getEnv(Process*, char const*)+0x18>
c0010104:	85 c0                	test   eax,eax
c0010106:	75 0b                	jne    c0010113 <Krnl::getEnv(Process*, char const*)+0x23>
c0010108:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c001010d:	85 c0                	test   eax,eax
c001010f:	75 19                	jne    c001012a <Krnl::getEnv(Process*, char const*)+0x3a>
c0010111:	eb 27                	jmp    c001013a <Krnl::getEnv(Process*, char const*)+0x4a>
c0010113:	52                   	push   edx
c0010114:	52                   	push   edx
c0010115:	53                   	push   ebx
c0010116:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001011c:	e8 79 fc ff ff       	call   c000fd9a <EnvVarContainer::getEnv(char const*)>
c0010121:	83 c4 10             	add    esp,0x10
c0010124:	85 c0                	test   eax,eax
c0010126:	75 28                	jne    c0010150 <Krnl::getEnv(Process*, char const*)+0x60>
c0010128:	eb de                	jmp    c0010108 <Krnl::getEnv(Process*, char const*)+0x18>
c001012a:	52                   	push   edx
c001012b:	52                   	push   edx
c001012c:	53                   	push   ebx
c001012d:	50                   	push   eax
c001012e:	e8 67 fc ff ff       	call   c000fd9a <EnvVarContainer::getEnv(char const*)>
c0010133:	83 c4 10             	add    esp,0x10
c0010136:	85 c0                	test   eax,eax
c0010138:	75 16                	jne    c0010150 <Krnl::getEnv(Process*, char const*)+0x60>
c001013a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001013e:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c0010143:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010147:	83 c4 08             	add    esp,0x8
c001014a:	5b                   	pop    ebx
c001014b:	e9 4a fc ff ff       	jmp    c000fd9a <EnvVarContainer::getEnv(char const*)>
c0010150:	83 c4 08             	add    esp,0x8
c0010153:	5b                   	pop    ebx
c0010154:	c3                   	ret    

c0010155 <Krnl::setEnvSystem(char const*, char const*)>:
c0010155:	83 ec 10             	sub    esp,0x10
c0010158:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001015c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010160:	ff 35 34 69 02 c0    	push   DWORD PTR ds:0xc0026934
c0010166:	e8 6d fc ff ff       	call   c000fdd8 <EnvVarContainer::setEnv(char const*, char const*)>
c001016b:	83 c4 1c             	add    esp,0x1c
c001016e:	c3                   	ret    

c001016f <Krnl::setEnvUser(char const*, char const*)>:
c001016f:	a1 30 69 02 c0       	mov    eax,ds:0xc0026930
c0010174:	85 c0                	test   eax,eax
c0010176:	74 15                	je     c001018d <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010178:	83 ec 10             	sub    esp,0x10
c001017b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001017f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010183:	50                   	push   eax
c0010184:	e8 4f fc ff ff       	call   c000fdd8 <EnvVarContainer::setEnv(char const*, char const*)>
c0010189:	83 c4 1c             	add    esp,0x1c
c001018c:	c3                   	ret    
c001018d:	c3                   	ret    

c001018e <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001018e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010192:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010198:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001019c:	e9 37 fc ff ff       	jmp    c000fdd8 <EnvVarContainer::setEnv(char const*, char const*)>

c00101a1 <Krnl::deleteEnvSystem(char const*)>:
c00101a1:	c3                   	ret    

c00101a2 <Krnl::deleteEnvUser(char const*)>:
c00101a2:	c3                   	ret    

c00101a3 <Krnl::deleteEnvProcess(Process*, char const*)>:
c00101a3:	c3                   	ret    

c00101a4 <Krnl::newProcessEnv(Process*)>:
c00101a4:	83 ec 28             	sub    esp,0x28
c00101a7:	6a 0c                	push   0xc
c00101a9:	e8 b7 76 ff ff       	call   c0007865 <malloc>
c00101ae:	5a                   	pop    edx
c00101af:	59                   	pop    ecx
c00101b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00101b4:	50                   	push   eax
c00101b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00101b9:	e8 e0 fe ff ff       	call   c001009e <EnvVarContainer::EnvVarContainer(Process*)>
c00101be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101c2:	83 c4 2c             	add    esp,0x2c
c00101c5:	c3                   	ret    

c00101c6 <Krnl::copyProcessEnv(Process*, Process*)>:
c00101c6:	57                   	push   edi
c00101c7:	56                   	push   esi
c00101c8:	53                   	push   ebx
c00101c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101cd:	83 ec 0c             	sub    esp,0xc
c00101d0:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00101d6:	6a 0c                	push   0xc
c00101d8:	e8 88 76 ff ff       	call   c0007865 <malloc>
c00101dd:	89 c3                	mov    ebx,eax
c00101df:	58                   	pop    eax
c00101e0:	5a                   	pop    edx
c00101e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101e5:	53                   	push   ebx
c00101e6:	e8 b3 fe ff ff       	call   c001009e <EnvVarContainer::EnvVarContainer(Process*)>
c00101eb:	8b 07                	mov    eax,DWORD PTR [edi]
c00101ed:	89 03                	mov    DWORD PTR [ebx],eax
c00101ef:	c1 e0 03             	shl    eax,0x3
c00101f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00101f5:	e8 6b 76 ff ff       	call   c0007865 <malloc>
c00101fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00101fd:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00101ff:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0010202:	c1 e1 03             	shl    ecx,0x3
c0010205:	89 c7                	mov    edi,eax
c0010207:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010209:	83 c4 10             	add    esp,0x10
c001020c:	89 d8                	mov    eax,ebx
c001020e:	5b                   	pop    ebx
c001020f:	5e                   	pop    esi
c0010210:	5f                   	pop    edi
c0010211:	c3                   	ret    

c0010212 <Krnl::loadSystemEnv()>:
c0010212:	53                   	push   ebx
c0010213:	83 ec 14             	sub    esp,0x14
c0010216:	6a 0c                	push   0xc
c0010218:	e8 48 76 ff ff       	call   c0007865 <malloc>
c001021d:	89 c3                	mov    ebx,eax
c001021f:	58                   	pop    eax
c0010220:	5a                   	pop    edx
c0010221:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0010227:	53                   	push   ebx
c0010228:	e8 71 fe ff ff       	call   c001009e <EnvVarContainer::EnvVarContainer(Process*)>
c001022d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010230:	89 1d 34 69 02 c0    	mov    DWORD PTR ds:0xc0026934,ebx
c0010236:	e8 47 fe ff ff       	call   c0010082 <EnvVarContainer::__loadSystem()>
c001023b:	83 c4 18             	add    esp,0x18
c001023e:	5b                   	pop    ebx
c001023f:	c3                   	ret    

c0010240 <Krnl::loadUserEnv()>:
c0010240:	53                   	push   ebx
c0010241:	83 ec 14             	sub    esp,0x14
c0010244:	6a 0c                	push   0xc
c0010246:	e8 1a 76 ff ff       	call   c0007865 <malloc>
c001024b:	89 c3                	mov    ebx,eax
c001024d:	58                   	pop    eax
c001024e:	5a                   	pop    edx
c001024f:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0010255:	53                   	push   ebx
c0010256:	e8 43 fe ff ff       	call   c001009e <EnvVarContainer::EnvVarContainer(Process*)>
c001025b:	89 1d 30 69 02 c0    	mov    DWORD PTR ds:0xc0026930,ebx
c0010261:	83 c4 18             	add    esp,0x18
c0010264:	5b                   	pop    ebx
c0010265:	c3                   	ret    

c0010266 <Krnl::flushEnv()>:
c0010266:	c3                   	ret    

c0010267 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001026b:	8b 15 30 69 02 c0    	mov    edx,DWORD PTR ds:0xc0026930
c0010271:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010277:	a1 34 69 02 c0       	mov    eax,ds:0xc0026934
c001027c:	8b 00                	mov    eax,DWORD PTR [eax]
c001027e:	03 01                	add    eax,DWORD PTR [ecx]
c0010280:	85 d2                	test   edx,edx
c0010282:	74 02                	je     c0010286 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010284:	03 02                	add    eax,DWORD PTR [edx]
c0010286:	c3                   	ret    

c0010287 <Krnl::getProcessEnvPair(Process*, int)>:
c0010287:	57                   	push   edi
c0010288:	56                   	push   esi
c0010289:	8b 35 30 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026930
c001028f:	53                   	push   ebx
c0010290:	85 f6                	test   esi,esi
c0010292:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010296:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001029a:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00102a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00102a4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00102a6:	75 16                	jne    c00102be <Krnl::getProcessEnvPair(Process*, int)+0x37>
c00102a8:	39 c2                	cmp    edx,eax
c00102aa:	7c 16                	jl     c00102c2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00102ac:	8b 0d 34 69 02 c0    	mov    ecx,DWORD PTR ds:0xc0026934
c00102b2:	8b 31                	mov    esi,DWORD PTR [ecx]
c00102b4:	01 c6                	add    esi,eax
c00102b6:	39 d6                	cmp    esi,edx
c00102b8:	7e 3c                	jle    c00102f6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00102ba:	29 c2                	sub    edx,eax
c00102bc:	eb 04                	jmp    c00102c2 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c00102be:	39 c2                	cmp    edx,eax
c00102c0:	7d 05                	jge    c00102c7 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c00102c2:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00102c5:	eb 20                	jmp    c00102e7 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c00102c7:	8b 3e                	mov    edi,DWORD PTR [esi]
c00102c9:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00102cc:	39 d1                	cmp    ecx,edx
c00102ce:	7e 04                	jle    c00102d4 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c00102d0:	29 c2                	sub    edx,eax
c00102d2:	eb 10                	jmp    c00102e4 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c00102d4:	8b 35 34 69 02 c0    	mov    esi,DWORD PTR ds:0xc0026934
c00102da:	03 0e                	add    ecx,DWORD PTR [esi]
c00102dc:	39 d1                	cmp    ecx,edx
c00102de:	7e 16                	jle    c00102f6 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00102e0:	29 c2                	sub    edx,eax
c00102e2:	29 fa                	sub    edx,edi
c00102e4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00102e7:	8d 14 d0             	lea    edx,[eax+edx*8]
c00102ea:	8b 02                	mov    eax,DWORD PTR [edx]
c00102ec:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00102ef:	89 03                	mov    DWORD PTR [ebx],eax
c00102f1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00102f4:	eb 1d                	jmp    c0010313 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00102f6:	83 ec 0c             	sub    esp,0xc
c00102f9:	68 8a 00 02 c0       	push   0xc002008a
c00102fe:	e8 ac 00 00 00       	call   c00103af <KePanic(char const*)>
c0010303:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010309:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010310:	83 c4 10             	add    esp,0x10
c0010313:	89 d8                	mov    eax,ebx
c0010315:	5b                   	pop    ebx
c0010316:	5e                   	pop    esi
c0010317:	5f                   	pop    edi
c0010318:	c2 04 00             	ret    0x4

c001031b <CPU::current()>:
c001031b:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010320:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010326:	c3                   	ret    

c0010327 <operator new(unsigned long)>:
c0010327:	e9 39 75 ff ff       	jmp    c0007865 <malloc>

c001032c <operator delete(void*)>:
c001032c:	e9 54 75 ff ff       	jmp    c0007885 <rfree>

c0010331 <disableIRQs()>:
c0010331:	fa                   	cli    
c0010332:	c3                   	ret    

c0010333 <enableIRQs()>:
c0010333:	fb                   	sti    
c0010334:	c3                   	ret    

c0010335 <lockScheduler()>:
c0010335:	fa                   	cli    
c0010336:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001033c:	c3                   	ret    

c001033d <unlockScheduler()>:
c001033d:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0010342:	48                   	dec    eax
c0010343:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0010348:	75 01                	jne    c001034b <unlockScheduler()+0xe>
c001034a:	fb                   	sti    
c001034b:	c3                   	ret    

c001034c <lockStuff()>:
c001034c:	fa                   	cli    
c001034d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0010353:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0010359:	c3                   	ret    

c001035a <unlockStuff()>:
c001035a:	83 ec 0c             	sub    esp,0xc
c001035d:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0010362:	48                   	dec    eax
c0010363:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0010368:	75 18                	jne    c0010382 <unlockStuff()+0x28>
c001036a:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c0010371:	74 0f                	je     c0010382 <unlockStuff()+0x28>
c0010373:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c001037d:	e8 2a 44 00 00       	call   c00147ac <schedule()>
c0010382:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0010387:	48                   	dec    eax
c0010388:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001038d:	75 01                	jne    c0010390 <unlockStuff()+0x36>
c001038f:	fb                   	sti    
c0010390:	83 c4 0c             	add    esp,0xc
c0010393:	c3                   	ret    

c0010394 <Virt::getAKernelVAS()>:
c0010394:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c0010399:	c3                   	ret    

c001039a <__not_memcpy>:
c001039a:	57                   	push   edi
c001039b:	56                   	push   esi
c001039c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103a0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00103a4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00103a8:	89 c7                	mov    edi,eax
c00103aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103ac:	5e                   	pop    esi
c00103ad:	5f                   	pop    edi
c00103ae:	c3                   	ret    

c00103af <KePanic(char const*)>:
c00103af:	c6 05 38 69 02 c0 01 	mov    BYTE PTR ds:0xc0026938,0x1
c00103b6:	e9 24 62 00 00       	jmp    c00165df <HalPanic(char const*)>

c00103bb <Krnl::powerThread(void*)>:
c00103bb:	83 ec 0c             	sub    esp,0xc
c00103be:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00103c3:	48                   	dec    eax
c00103c4:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00103c9:	75 01                	jne    c00103cc <Krnl::powerThread(void*)+0x11>
c00103cb:	fb                   	sti    
c00103cc:	83 ec 0c             	sub    esp,0xc
c00103cf:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c00103d6:	6a 0a                	push   0xa
c00103d8:	e8 df 46 00 00       	call   c0014abc <sleep(unsigned int)>
c00103dd:	83 05 84 69 02 c0 0a 	add    DWORD PTR ds:0xc0026984,0xa
c00103e4:	83 c4 10             	add    esp,0x10
c00103e7:	eb e3                	jmp    c00103cc <Krnl::powerThread(void*)+0x11>

c00103e9 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00103e9:	57                   	push   edi
c00103ea:	b9 09 00 00 00       	mov    ecx,0x9
c00103ef:	56                   	push   esi
c00103f0:	bf 60 69 02 c0       	mov    edi,0xc0026960
c00103f5:	fc                   	cld    
c00103f6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00103fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00103fc:	5e                   	pop    esi
c00103fd:	5f                   	pop    edi
c00103fe:	c3                   	ret    

c00103ff <Krnl::userIOReceived()>:
c00103ff:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c0010409:	c3                   	ret    

c001040a <Krnl::handlePowerButton()>:
c001040a:	83 ec 0c             	sub    esp,0xc
c001040d:	a1 60 69 02 c0       	mov    eax,ds:0xc0026960
c0010412:	83 f8 02             	cmp    eax,0x2
c0010415:	75 10                	jne    c0010427 <Krnl::handlePowerButton()+0x1d>
c0010417:	83 ec 0c             	sub    esp,0xc
c001041a:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010420:	e8 db 6a ff ff       	call   c0006f00 <Computer::shutdown()>
c0010425:	eb 11                	jmp    c0010438 <Krnl::handlePowerButton()+0x2e>
c0010427:	48                   	dec    eax
c0010428:	75 11                	jne    c001043b <Krnl::handlePowerButton()+0x31>
c001042a:	83 ec 0c             	sub    esp,0xc
c001042d:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010433:	e8 f8 6a ff ff       	call   c0006f30 <Computer::sleep()>
c0010438:	83 c4 10             	add    esp,0x10
c001043b:	83 c4 0c             	add    esp,0xc
c001043e:	c3                   	ret    

c001043f <Krnl::handleSleepButton()>:
c001043f:	83 ec 0c             	sub    esp,0xc
c0010442:	a1 64 69 02 c0       	mov    eax,ds:0xc0026964
c0010447:	83 f8 02             	cmp    eax,0x2
c001044a:	75 10                	jne    c001045c <Krnl::handleSleepButton()+0x1d>
c001044c:	83 ec 0c             	sub    esp,0xc
c001044f:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010455:	e8 a6 6a ff ff       	call   c0006f00 <Computer::shutdown()>
c001045a:	eb 11                	jmp    c001046d <Krnl::handleSleepButton()+0x2e>
c001045c:	48                   	dec    eax
c001045d:	75 11                	jne    c0010470 <Krnl::handleSleepButton()+0x31>
c001045f:	83 ec 0c             	sub    esp,0xc
c0010462:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0010468:	e8 c3 6a ff ff       	call   c0006f30 <Computer::sleep()>
c001046d:	83 c4 10             	add    esp,0x10
c0010470:	83 c4 0c             	add    esp,0xc
c0010473:	c3                   	ret    

c0010474 <Krnl::setupPowerManager()>:
c0010474:	83 ec 0c             	sub    esp,0xc
c0010477:	c7 05 84 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026984,0x0
c0010481:	68 f0 00 00 00       	push   0xf0
c0010486:	c6 05 40 69 02 c0 00 	mov    BYTE PTR ds:0xc0026940,0x0
c001048d:	6a 00                	push   0x0
c001048f:	68 bb 03 01 c0       	push   0xc00103bb
c0010494:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001049a:	e8 c5 40 00 00       	call   c0014564 <Process::createThread(void (*)(void*), void*, int)>
c001049f:	c7 05 60 69 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0026960,0x2
c00104a9:	c7 05 64 69 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0026964,0x1
c00104b3:	c7 05 68 69 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0026968,0x3
c00104bd:	c7 05 6c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002696c,0x0
c00104c7:	c7 05 78 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026978,0x0
c00104d1:	c7 05 70 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026970,0x0
c00104db:	c7 05 7c 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002697c,0x0
c00104e5:	c7 05 74 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026974,0x3c
c00104ef:	c7 05 80 69 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0026980,0x3c
c00104f9:	83 c4 1c             	add    esp,0x1c
c00104fc:	c3                   	ret    
c00104fd:	66 90                	xchg   ax,ax
c00104ff:	90                   	nop

c0010500 <KeResolveCompatibilitySymbol(char*)>:
c0010500:	83 ec 0c             	sub    esp,0xc
c0010503:	83 ec 08             	sub    esp,0x8
c0010506:	68 a4 00 02 c0       	push   0xc00200a4
c001050b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001050f:	e8 bc 01 ff ff       	call   c00006d0 <strcmp>
c0010514:	83 c4 10             	add    esp,0x10
c0010517:	85 c0                	test   eax,eax
c0010519:	0f 94 c0             	sete   al
c001051c:	84 c0                	test   al,al
c001051e:	74 0c                	je     c001052c <KeResolveCompatibilitySymbol(char*)+0x2c>
c0010520:	b8 b8 3e 02 c0       	mov    eax,0xc0023eb8
c0010525:	e9 62 01 00 00       	jmp    c001068c <KeResolveCompatibilitySymbol(char*)+0x18c>
c001052a:	66 90                	xchg   ax,ax
c001052c:	83 ec 08             	sub    esp,0x8
c001052f:	68 ad 00 02 c0       	push   0xc00200ad
c0010534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010538:	e8 93 01 ff ff       	call   c00006d0 <strcmp>
c001053d:	83 c4 10             	add    esp,0x10
c0010540:	85 c0                	test   eax,eax
c0010542:	0f 94 c0             	sete   al
c0010545:	84 c0                	test   al,al
c0010547:	74 0b                	je     c0010554 <KeResolveCompatibilitySymbol(char*)+0x54>
c0010549:	b8 b0 da 01 c0       	mov    eax,0xc001dab0
c001054e:	e9 39 01 00 00       	jmp    c001068c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010553:	90                   	nop
c0010554:	83 ec 08             	sub    esp,0x8
c0010557:	68 b7 00 02 c0       	push   0xc00200b7
c001055c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010560:	e8 6b 01 ff ff       	call   c00006d0 <strcmp>
c0010565:	83 c4 10             	add    esp,0x10
c0010568:	85 c0                	test   eax,eax
c001056a:	0f 94 c0             	sete   al
c001056d:	84 c0                	test   al,al
c001056f:	74 0b                	je     c001057c <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010571:	b8 e4 d7 01 c0       	mov    eax,0xc001d7e4
c0010576:	e9 11 01 00 00       	jmp    c001068c <KeResolveCompatibilitySymbol(char*)+0x18c>
c001057b:	90                   	nop
c001057c:	83 ec 08             	sub    esp,0x8
c001057f:	68 c0 00 02 c0       	push   0xc00200c0
c0010584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010588:	e8 43 01 ff ff       	call   c00006d0 <strcmp>
c001058d:	83 c4 10             	add    esp,0x10
c0010590:	85 c0                	test   eax,eax
c0010592:	0f 94 c0             	sete   al
c0010595:	84 c0                	test   al,al
c0010597:	74 0b                	je     c00105a4 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010599:	b8 af 03 01 c0       	mov    eax,0xc00103af
c001059e:	e9 e9 00 00 00       	jmp    c001068c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105a3:	90                   	nop
c00105a4:	83 ec 08             	sub    esp,0x8
c00105a7:	68 d3 00 02 c0       	push   0xc00200d3
c00105ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105b0:	e8 1b 01 ff ff       	call   c00006d0 <strcmp>
c00105b5:	83 c4 10             	add    esp,0x10
c00105b8:	85 c0                	test   eax,eax
c00105ba:	0f 94 c0             	sete   al
c00105bd:	84 c0                	test   al,al
c00105bf:	74 0b                	je     c00105cc <KeResolveCompatibilitySymbol(char*)+0xcc>
c00105c1:	b8 37 fd 00 c0       	mov    eax,0xc000fd37
c00105c6:	e9 c1 00 00 00       	jmp    c001068c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105cb:	90                   	nop
c00105cc:	83 ec 08             	sub    esp,0x8
c00105cf:	68 f0 00 02 c0       	push   0xc00200f0
c00105d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105d8:	e8 f3 00 ff ff       	call   c00006d0 <strcmp>
c00105dd:	83 c4 10             	add    esp,0x10
c00105e0:	85 c0                	test   eax,eax
c00105e2:	0f 94 c0             	sete   al
c00105e5:	84 c0                	test   al,al
c00105e7:	74 0b                	je     c00105f4 <KeResolveCompatibilitySymbol(char*)+0xf4>
c00105e9:	b8 b0 db 01 c0       	mov    eax,0xc001dbb0
c00105ee:	e9 99 00 00 00       	jmp    c001068c <KeResolveCompatibilitySymbol(char*)+0x18c>
c00105f3:	90                   	nop
c00105f4:	83 ec 08             	sub    esp,0x8
c00105f7:	68 fa 00 02 c0       	push   0xc00200fa
c00105fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010600:	e8 cb 00 ff ff       	call   c00006d0 <strcmp>
c0010605:	83 c4 10             	add    esp,0x10
c0010608:	85 c0                	test   eax,eax
c001060a:	0f 94 c0             	sete   al
c001060d:	84 c0                	test   al,al
c001060f:	74 07                	je     c0010618 <KeResolveCompatibilitySymbol(char*)+0x118>
c0010611:	b8 30 d9 01 c0       	mov    eax,0xc001d930
c0010616:	eb 74                	jmp    c001068c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010618:	83 ec 08             	sub    esp,0x8
c001061b:	68 03 01 02 c0       	push   0xc0020103
c0010620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010624:	e8 a7 00 ff ff       	call   c00006d0 <strcmp>
c0010629:	83 c4 10             	add    esp,0x10
c001062c:	85 c0                	test   eax,eax
c001062e:	0f 94 c0             	sete   al
c0010631:	84 c0                	test   al,al
c0010633:	74 07                	je     c001063c <KeResolveCompatibilitySymbol(char*)+0x13c>
c0010635:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c001063a:	eb 50                	jmp    c001068c <KeResolveCompatibilitySymbol(char*)+0x18c>
c001063c:	83 ec 08             	sub    esp,0x8
c001063f:	68 1b 01 02 c0       	push   0xc002011b
c0010644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010648:	e8 83 00 ff ff       	call   c00006d0 <strcmp>
c001064d:	83 c4 10             	add    esp,0x10
c0010650:	85 c0                	test   eax,eax
c0010652:	0f 94 c0             	sete   al
c0010655:	84 c0                	test   al,al
c0010657:	74 07                	je     c0010660 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010659:	b8 bc 3e 02 c0       	mov    eax,0xc0023ebc
c001065e:	eb 2c                	jmp    c001068c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010660:	83 ec 08             	sub    esp,0x8
c0010663:	68 28 01 02 c0       	push   0xc0020128
c0010668:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001066c:	e8 5f 00 ff ff       	call   c00006d0 <strcmp>
c0010671:	83 c4 10             	add    esp,0x10
c0010674:	85 c0                	test   eax,eax
c0010676:	0f 94 c0             	sete   al
c0010679:	84 c0                	test   al,al
c001067b:	74 07                	je     c0010684 <KeResolveCompatibilitySymbol(char*)+0x184>
c001067d:	b8 bd 3e 02 c0       	mov    eax,0xc0023ebd
c0010682:	eb 08                	jmp    c001068c <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010684:	b8 00 00 00 00       	mov    eax,0x0
c0010689:	8d 76 00             	lea    esi,[esi+0x0]
c001068c:	83 c4 0c             	add    esp,0xc
c001068f:	c3                   	ret    

c0010690 <KiSigKill(int)>:
c0010690:	57                   	push   edi
c0010691:	b9 0a 00 00 00       	mov    ecx,0xa
c0010696:	56                   	push   esi
c0010697:	be 71 01 02 c0       	mov    esi,0xc0020171
c001069c:	83 ec 14             	sub    esp,0x14
c001069f:	8d 7c 24 06          	lea    edi,[esp+0x6]
c00106a3:	fc                   	cld    
c00106a4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106a6:	8d 44 24 06          	lea    eax,[esp+0x6]
c00106aa:	50                   	push   eax
c00106ab:	6a 00                	push   0x0
c00106ad:	6a 00                	push   0x0
c00106af:	6a 27                	push   0x27
c00106b1:	e8 9c 19 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00106b6:	83 c4 24             	add    esp,0x24
c00106b9:	5e                   	pop    esi
c00106ba:	5f                   	pop    edi
c00106bb:	c3                   	ret    

c00106bc <KiDefaultSignalHandlerIgnore(int)>:
c00106bc:	c3                   	ret    

c00106bd <KiDefaultSignalHandlerPause(int)>:
c00106bd:	57                   	push   edi
c00106be:	b9 07 00 00 00       	mov    ecx,0x7
c00106c3:	56                   	push   esi
c00106c4:	be 7b 01 02 c0       	mov    esi,0xc002017b
c00106c9:	83 ec 24             	sub    esp,0x24
c00106cc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00106d0:	fc                   	cld    
c00106d1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00106d3:	8d 44 24 04          	lea    eax,[esp+0x4]
c00106d7:	50                   	push   eax
c00106d8:	6a 00                	push   0x0
c00106da:	6a 00                	push   0x0
c00106dc:	6a 27                	push   0x27
c00106de:	e8 6f 19 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00106e3:	83 c4 34             	add    esp,0x34
c00106e6:	5e                   	pop    esi
c00106e7:	5f                   	pop    edi
c00106e8:	c3                   	ret    

c00106e9 <KiDefaultSignalHandlerResume(int)>:
c00106e9:	57                   	push   edi
c00106ea:	b9 1d 00 00 00       	mov    ecx,0x1d
c00106ef:	56                   	push   esi
c00106f0:	be 97 01 02 c0       	mov    esi,0xc0020197
c00106f5:	83 ec 24             	sub    esp,0x24
c00106f8:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00106fc:	fc                   	cld    
c00106fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106ff:	8d 44 24 03          	lea    eax,[esp+0x3]
c0010703:	50                   	push   eax
c0010704:	6a 00                	push   0x0
c0010706:	6a 00                	push   0x0
c0010708:	6a 27                	push   0x27
c001070a:	e8 43 19 01 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001070f:	83 c4 34             	add    esp,0x34
c0010712:	5e                   	pop    esi
c0010713:	5f                   	pop    edi
c0010714:	c3                   	ret    

c0010715 <KeDeinitSignals(SigHandlerBlock*)>:
c0010715:	e9 5b 71 ff ff       	jmp    c0007875 <free>

c001071a <KeInitSignals()>:
c001071a:	53                   	push   ebx
c001071b:	83 ec 14             	sub    esp,0x14
c001071e:	68 c8 00 00 00       	push   0xc8
c0010723:	e8 3d 71 ff ff       	call   c0007865 <malloc>
c0010728:	83 c4 0c             	add    esp,0xc
c001072b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010735:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001073f:	89 c3                	mov    ebx,eax
c0010741:	6a 20                	push   0x20
c0010743:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010749:	6a 00                	push   0x0
c001074b:	50                   	push   eax
c001074c:	e8 6f fd fe ff       	call   c00004c0 <memset>
c0010751:	83 c4 0c             	add    esp,0xc
c0010754:	6a 44                	push   0x44
c0010756:	6a 00                	push   0x0
c0010758:	53                   	push   ebx
c0010759:	e8 62 fd fe ff       	call   c00004c0 <memset>
c001075e:	89 d8                	mov    eax,ebx
c0010760:	83 c4 18             	add    esp,0x18
c0010763:	5b                   	pop    ebx
c0010764:	c3                   	ret    

c0010765 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0010765:	53                   	push   ebx
c0010766:	b8 01 00 00 00       	mov    eax,0x1
c001076b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001076f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010773:	83 f9 10             	cmp    ecx,0x10
c0010776:	7f 21                	jg     c0010799 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010778:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001077b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001077f:	89 03                	mov    DWORD PTR [ebx],eax
c0010781:	b8 01 00 00 00       	mov    eax,0x1
c0010786:	d3 e0                	shl    eax,cl
c0010788:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001078c:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001078f:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0010797:	31 c0                	xor    eax,eax
c0010799:	5b                   	pop    ebx
c001079a:	c3                   	ret    

c001079b <KeRaiseSignal(SigHandlerBlock*, int)>:
c001079b:	55                   	push   ebp
c001079c:	57                   	push   edi
c001079d:	bf 08 00 00 00       	mov    edi,0x8
c00107a2:	56                   	push   esi
c00107a3:	53                   	push   ebx
c00107a4:	83 ec 18             	sub    esp,0x18
c00107a7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00107ab:	68 b4 01 02 c0       	push   0xc00201b4
c00107b0:	e8 45 9e ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00107b5:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00107bc:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00107c2:	83 c4 10             	add    esp,0x10
c00107c5:	31 c9                	xor    ecx,ecx
c00107c7:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00107cb:	99                   	cdq    
c00107cc:	f7 ff                	idiv   edi
c00107ce:	8d 42 24             	lea    eax,[edx+0x24]
c00107d1:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00107d5:	85 f6                	test   esi,esi
c00107d7:	75 1a                	jne    c00107f3 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00107d9:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00107dd:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00107e1:	50                   	push   eax
c00107e2:	50                   	push   eax
c00107e3:	52                   	push   edx
c00107e4:	68 c5 01 02 c0       	push   0xc00201c5
c00107e9:	e8 0c 9e ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00107ee:	83 c4 10             	add    esp,0x10
c00107f1:	eb 1b                	jmp    c001080e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00107f3:	41                   	inc    ecx
c00107f4:	83 f9 08             	cmp    ecx,0x8
c00107f7:	75 ce                	jne    c00107c7 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00107f9:	83 ec 0c             	sub    esp,0xc
c00107fc:	be 01 00 00 00       	mov    esi,0x1
c0010801:	68 e6 01 02 c0       	push   0xc00201e6
c0010806:	e8 ef 9d ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001080b:	83 c4 10             	add    esp,0x10
c001080e:	83 c4 0c             	add    esp,0xc
c0010811:	89 f0                	mov    eax,esi
c0010813:	5b                   	pop    ebx
c0010814:	5e                   	pop    esi
c0010815:	5f                   	pop    edi
c0010816:	5d                   	pop    ebp
c0010817:	c3                   	ret    

c0010818 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010818:	55                   	push   ebp
c0010819:	57                   	push   edi
c001081a:	56                   	push   esi
c001081b:	53                   	push   ebx
c001081c:	51                   	push   ecx
c001081d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010821:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010828:	0f 84 af 00 00 00    	je     c00108dd <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c001082e:	31 c9                	xor    ecx,ecx
c0010830:	bf 08 00 00 00       	mov    edi,0x8
c0010835:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001083b:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001083e:	99                   	cdq    
c001083f:	f7 ff                	idiv   edi
c0010841:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010848:	85 ed                	test   ebp,ebp
c001084a:	0f 84 9e 00 00 00    	je     c00108ee <KeCheckSignal(SigHandlerBlock*, int*)+0xd6>
c0010850:	89 e9                	mov    ecx,ebp
c0010852:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010858:	bf 01 00 00 00       	mov    edi,0x1
c001085d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010860:	d3 e7                	shl    edi,cl
c0010862:	31 c9                	xor    ecx,ecx
c0010864:	b8 01 00 00 00       	mov    eax,0x1
c0010869:	d3 e0                	shl    eax,cl
c001086b:	85 04 24             	test   DWORD PTR [esp],eax
c001086e:	74 06                	je     c0010876 <KeCheckSignal(SigHandlerBlock*, int*)+0x5e>
c0010870:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010874:	75 67                	jne    c00108dd <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010876:	41                   	inc    ecx
c0010877:	83 f9 11             	cmp    ecx,0x11
c001087a:	75 e8                	jne    c0010864 <KeCheckSignal(SigHandlerBlock*, int*)+0x4c>
c001087c:	46                   	inc    esi
c001087d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010880:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010886:	09 f8                	or     eax,edi
c0010888:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010893:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010899:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00108a0:	31 c0                	xor    eax,eax
c00108a2:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00108aa:	74 09                	je     c00108b5 <KeCheckSignal(SigHandlerBlock*, int*)+0x9d>
c00108ac:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00108b3:	eb 06                	jmp    c00108bb <KeCheckSignal(SigHandlerBlock*, int*)+0xa3>
c00108b5:	40                   	inc    eax
c00108b6:	83 f8 08             	cmp    eax,0x8
c00108b9:	75 e7                	jne    c00108a2 <KeCheckSignal(SigHandlerBlock*, int*)+0x8a>
c00108bb:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00108be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00108c2:	83 fd 09             	cmp    ebp,0x9
c00108c5:	89 2a                	mov    DWORD PTR [edx],ebp
c00108c7:	75 07                	jne    c00108d0 <KeCheckSignal(SigHandlerBlock*, int*)+0xb8>
c00108c9:	b8 90 06 01 c0       	mov    eax,0xc0010690
c00108ce:	eb 31                	jmp    c0010901 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00108d0:	83 f8 01             	cmp    eax,0x1
c00108d3:	75 0c                	jne    c00108e1 <KeCheckSignal(SigHandlerBlock*, int*)+0xc9>
c00108d5:	f7 d7                	not    edi
c00108d7:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00108dd:	31 c0                	xor    eax,eax
c00108df:	eb 20                	jmp    c0010901 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00108e1:	85 c0                	test   eax,eax
c00108e3:	75 1c                	jne    c0010901 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00108e5:	8b 04 ad a0 14 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdeb60]
c00108ec:	eb 13                	jmp    c0010901 <KeCheckSignal(SigHandlerBlock*, int*)+0xe9>
c00108ee:	46                   	inc    esi
c00108ef:	41                   	inc    ecx
c00108f0:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00108f6:	83 f9 08             	cmp    ecx,0x8
c00108f9:	0f 85 36 ff ff ff    	jne    c0010835 <KeCheckSignal(SigHandlerBlock*, int*)+0x1d>
c00108ff:	eb dc                	jmp    c00108dd <KeCheckSignal(SigHandlerBlock*, int*)+0xc5>
c0010901:	5a                   	pop    edx
c0010902:	5b                   	pop    ebx
c0010903:	5e                   	pop    esi
c0010904:	5f                   	pop    edi
c0010905:	5d                   	pop    ebp
c0010906:	c3                   	ret    

c0010907 <KiCheckSignalZ>:
c0010907:	83 ec 10             	sub    esp,0x10
c001090a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001090e:	50                   	push   eax
c001090f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010914:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010917:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001091d:	e8 f6 fe ff ff       	call   c0010818 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010922:	5a                   	pop    edx
c0010923:	31 d2                	xor    edx,edx
c0010925:	59                   	pop    ecx
c0010926:	85 c0                	test   eax,eax
c0010928:	74 19                	je     c0010943 <KiCheckSignalZ+0x3c>
c001092a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010930:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010933:	89 02                	mov    DWORD PTR [edx],eax
c0010935:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001093c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010940:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010943:	89 d0                	mov    eax,edx
c0010945:	83 c4 10             	add    esp,0x10
c0010948:	c3                   	ret    

c0010949 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010949:	56                   	push   esi
c001094a:	53                   	push   ebx
c001094b:	bb 01 00 00 00       	mov    ebx,0x1
c0010950:	52                   	push   edx
c0010951:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010955:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010959:	d3 e3                	shl    ebx,cl
c001095b:	83 f9 10             	cmp    ecx,0x10
c001095e:	7f 08                	jg     c0010968 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010960:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010966:	75 10                	jne    c0010978 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010968:	83 ec 0c             	sub    esp,0xc
c001096b:	68 f7 01 02 c0       	push   0xc00201f7
c0010970:	e8 3a fa ff ff       	call   c00103af <KePanic(char const*)>
c0010975:	83 c4 10             	add    esp,0x10
c0010978:	f7 d3                	not    ebx
c001097a:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010980:	58                   	pop    eax
c0010981:	5b                   	pop    ebx
c0010982:	5e                   	pop    esi
c0010983:	c3                   	ret    

c0010984 <KiFinishSignalZ>:
c0010984:	53                   	push   ebx
c0010985:	83 ec 10             	sub    esp,0x10
c0010988:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001098c:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001098f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010994:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010997:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001099d:	e8 a7 ff ff ff       	call   c0010949 <KeCompleteSignal(SigHandlerBlock*, int)>
c00109a2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00109a8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00109af:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00109b6:	83 c4 18             	add    esp,0x18
c00109b9:	5b                   	pop    ebx
c00109ba:	c3                   	ret    

c00109bb <SysSeekDir(regs*)>:
c00109bb:	31 c0                	xor    eax,eax
c00109bd:	31 d2                	xor    edx,edx
c00109bf:	c3                   	ret    

c00109c0 <SysTellDir(regs*)>:
c00109c0:	31 c0                	xor    eax,eax
c00109c2:	31 d2                	xor    edx,edx
c00109c4:	c3                   	ret    

c00109c5 <SysVerify(regs*)>:
c00109c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109c9:	31 d2                	xor    edx,edx
c00109cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109ce:	c3                   	ret    

c00109cf <SysGetArgc(regs*)>:
c00109cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109d7:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00109dd:	99                   	cdq    
c00109de:	c3                   	ret    

c00109df <SysTTYName(regs*)>:
c00109df:	b8 01 00 00 00       	mov    eax,0x1
c00109e4:	31 d2                	xor    edx,edx
c00109e6:	c3                   	ret    

c00109e7 <SysFormatDisk(regs*)>:
c00109e7:	56                   	push   esi
c00109e8:	53                   	push   ebx
c00109e9:	50                   	push   eax
c00109ea:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00109ee:	8b 1d b4 3f 02 c0    	mov    ebx,DWORD PTR ds:0xc0023fb4
c00109f4:	eb 28                	jmp    c0010a1e <SysFormatDisk(regs*)+0x37>
c00109f6:	83 ec 0c             	sub    esp,0xc
c00109f9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00109fc:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c00109ff:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010a01:	51                   	push   ecx
c0010a02:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010a05:	51                   	push   ecx
c0010a06:	50                   	push   eax
c0010a07:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0010a0e:	50                   	push   eax
c0010a0f:	53                   	push   ebx
c0010a10:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010a13:	83 c4 20             	add    esp,0x20
c0010a16:	83 f8 08             	cmp    eax,0x8
c0010a19:	75 12                	jne    c0010a2d <SysFormatDisk(regs*)+0x46>
c0010a1b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010a1e:	85 db                	test   ebx,ebx
c0010a20:	75 d4                	jne    c00109f6 <SysFormatDisk(regs*)+0xf>
c0010a22:	59                   	pop    ecx
c0010a23:	b8 03 00 00 00       	mov    eax,0x3
c0010a28:	31 d2                	xor    edx,edx
c0010a2a:	5b                   	pop    ebx
c0010a2b:	5e                   	pop    esi
c0010a2c:	c3                   	ret    
c0010a2d:	85 c0                	test   eax,eax
c0010a2f:	74 1b                	je     c0010a4c <SysFormatDisk(regs*)+0x65>
c0010a31:	83 f8 09             	cmp    eax,0x9
c0010a34:	74 0b                	je     c0010a41 <SysFormatDisk(regs*)+0x5a>
c0010a36:	59                   	pop    ecx
c0010a37:	b8 02 00 00 00       	mov    eax,0x2
c0010a3c:	31 d2                	xor    edx,edx
c0010a3e:	5b                   	pop    ebx
c0010a3f:	5e                   	pop    esi
c0010a40:	c3                   	ret    
c0010a41:	59                   	pop    ecx
c0010a42:	b8 01 00 00 00       	mov    eax,0x1
c0010a47:	31 d2                	xor    edx,edx
c0010a49:	5b                   	pop    ebx
c0010a4a:	5e                   	pop    esi
c0010a4b:	c3                   	ret    
c0010a4c:	59                   	pop    ecx
c0010a4d:	31 c0                	xor    eax,eax
c0010a4f:	31 d2                	xor    edx,edx
c0010a51:	5b                   	pop    ebx
c0010a52:	5e                   	pop    esi
c0010a53:	c3                   	ret    

c0010a54 <SysSetDiskVolumeLabel(regs*)>:
c0010a54:	56                   	push   esi
c0010a55:	53                   	push   ebx
c0010a56:	53                   	push   ebx
c0010a57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a5b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010a5e:	83 f8 19             	cmp    eax,0x19
c0010a61:	77 2d                	ja     c0010a90 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a63:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0010a6a:	85 c9                	test   ecx,ecx
c0010a6c:	74 22                	je     c0010a90 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a6e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010a71:	85 db                	test   ebx,ebx
c0010a73:	74 1b                	je     c0010a90 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a75:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010a7b:	85 d2                	test   edx,edx
c0010a7d:	74 11                	je     c0010a90 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010a7f:	8b 32                	mov    esi,DWORD PTR [edx]
c0010a81:	53                   	push   ebx
c0010a82:	50                   	push   eax
c0010a83:	51                   	push   ecx
c0010a84:	52                   	push   edx
c0010a85:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010a88:	83 c4 10             	add    esp,0x10
c0010a8b:	99                   	cdq    
c0010a8c:	59                   	pop    ecx
c0010a8d:	5b                   	pop    ebx
c0010a8e:	5e                   	pop    esi
c0010a8f:	c3                   	ret    
c0010a90:	59                   	pop    ecx
c0010a91:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010a96:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a9b:	5b                   	pop    ebx
c0010a9c:	5e                   	pop    esi
c0010a9d:	c3                   	ret    

c0010a9e <SysGetDiskVolumeLabel(regs*)>:
c0010a9e:	57                   	push   edi
c0010a9f:	56                   	push   esi
c0010aa0:	53                   	push   ebx
c0010aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aa5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010aa8:	83 fa 19             	cmp    edx,0x19
c0010aab:	77 38                	ja     c0010ae5 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010aad:	8b 0c 95 20 64 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd9be0]
c0010ab4:	85 c9                	test   ecx,ecx
c0010ab6:	74 2d                	je     c0010ae5 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010ab8:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010abb:	85 db                	test   ebx,ebx
c0010abd:	74 26                	je     c0010ae5 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010abf:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010ac2:	85 f6                	test   esi,esi
c0010ac4:	74 1f                	je     c0010ae5 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010ac6:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010acc:	85 c0                	test   eax,eax
c0010ace:	74 15                	je     c0010ae5 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	8b 38                	mov    edi,DWORD PTR [eax]
c0010ad5:	56                   	push   esi
c0010ad6:	53                   	push   ebx
c0010ad7:	52                   	push   edx
c0010ad8:	51                   	push   ecx
c0010ad9:	50                   	push   eax
c0010ada:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010add:	83 c4 20             	add    esp,0x20
c0010ae0:	99                   	cdq    
c0010ae1:	5b                   	pop    ebx
c0010ae2:	5e                   	pop    esi
c0010ae3:	5f                   	pop    edi
c0010ae4:	c3                   	ret    
c0010ae5:	5b                   	pop    ebx
c0010ae6:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010aeb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010af0:	5e                   	pop    esi
c0010af1:	5f                   	pop    edi
c0010af2:	c3                   	ret    

c0010af3 <SysShutdown(regs*)>:
c0010af3:	83 ec 0c             	sub    esp,0xc
c0010af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010afa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010afd:	85 c0                	test   eax,eax
c0010aff:	74 18                	je     c0010b19 <SysShutdown(regs*)+0x26>
c0010b01:	83 f8 01             	cmp    eax,0x1
c0010b04:	74 38                	je     c0010b3e <SysShutdown(regs*)+0x4b>
c0010b06:	83 f8 02             	cmp    eax,0x2
c0010b09:	74 24                	je     c0010b2f <SysShutdown(regs*)+0x3c>
c0010b0b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b10:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b15:	83 c4 0c             	add    esp,0xc
c0010b18:	c3                   	ret    
c0010b19:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010b1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b20:	6a 00                	push   0x0
c0010b22:	6a 00                	push   0x0
c0010b24:	6a 00                	push   0x0
c0010b26:	50                   	push   eax
c0010b27:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010b2a:	83 c4 10             	add    esp,0x10
c0010b2d:	eb dc                	jmp    c0010b0b <SysShutdown(regs*)+0x18>
c0010b2f:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0010b34:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b36:	6a 00                	push   0x0
c0010b38:	6a 00                	push   0x0
c0010b3a:	6a 01                	push   0x1
c0010b3c:	eb e8                	jmp    c0010b26 <SysShutdown(regs*)+0x33>
c0010b3e:	a1 a0 64 02 c0       	mov    eax,ds:0xc00264a0
c0010b43:	85 c0                	test   eax,eax
c0010b45:	74 02                	je     c0010b49 <SysShutdown(regs*)+0x56>
c0010b47:	ff d0                	call   eax
c0010b49:	31 c0                	xor    eax,eax
c0010b4b:	31 d2                	xor    edx,edx
c0010b4d:	83 c4 0c             	add    esp,0xc
c0010b50:	c3                   	ret    

c0010b51 <SysRealpath(regs*)>:
c0010b51:	83 ec 0c             	sub    esp,0xc
c0010b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b58:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010b5b:	85 d2                	test   edx,edx
c0010b5d:	74 07                	je     c0010b66 <SysRealpath(regs*)+0x15>
c0010b5f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010b62:	85 c0                	test   eax,eax
c0010b64:	75 0b                	jne    c0010b71 <SysRealpath(regs*)+0x20>
c0010b66:	b8 01 00 00 00       	mov    eax,0x1
c0010b6b:	31 d2                	xor    edx,edx
c0010b6d:	83 c4 0c             	add    esp,0xc
c0010b70:	c3                   	ret    
c0010b71:	51                   	push   ecx
c0010b72:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010b78:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010b7b:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010b81:	51                   	push   ecx
c0010b82:	52                   	push   edx
c0010b83:	50                   	push   eax
c0010b84:	e8 3d 9e ff ff       	call   c000a9c6 <Fs::standardiseFiles(char*, char const*, char const*)>
c0010b89:	83 c4 10             	add    esp,0x10
c0010b8c:	31 c0                	xor    eax,eax
c0010b8e:	31 d2                	xor    edx,edx
c0010b90:	83 c4 0c             	add    esp,0xc
c0010b93:	c3                   	ret    

c0010b94 <SysReadDir(regs*)>:
c0010b94:	53                   	push   ebx
c0010b95:	83 ec 18             	sub    esp,0x18
c0010b98:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b9c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b9f:	83 f8 02             	cmp    eax,0x2
c0010ba2:	76 61                	jbe    c0010c05 <SysReadDir(regs*)+0x71>
c0010ba4:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010bab:	77 49                	ja     c0010bf6 <SysReadDir(regs*)+0x62>
c0010bad:	83 ec 0c             	sub    esp,0xc
c0010bb0:	50                   	push   eax
c0010bb1:	e8 31 86 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0010bb6:	83 c4 10             	add    esp,0x10
c0010bb9:	85 c0                	test   eax,eax
c0010bbb:	74 39                	je     c0010bf6 <SysReadDir(regs*)+0x62>
c0010bbd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010bc5:	83 ec 0c             	sub    esp,0xc
c0010bc8:	8b 10                	mov    edx,DWORD PTR [eax]
c0010bca:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010bce:	51                   	push   ecx
c0010bcf:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010bd2:	51                   	push   ecx
c0010bd3:	6a 00                	push   0x0
c0010bd5:	68 10 01 00 00       	push   0x110
c0010bda:	50                   	push   eax
c0010bdb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010bde:	83 c4 20             	add    esp,0x20
c0010be1:	85 c0                	test   eax,eax
c0010be3:	74 29                	je     c0010c0e <SysReadDir(regs*)+0x7a>
c0010be5:	83 f8 07             	cmp    eax,0x7
c0010be8:	74 1b                	je     c0010c05 <SysReadDir(regs*)+0x71>
c0010bea:	b8 02 00 00 00       	mov    eax,0x2
c0010bef:	31 d2                	xor    edx,edx
c0010bf1:	83 c4 18             	add    esp,0x18
c0010bf4:	5b                   	pop    ebx
c0010bf5:	c3                   	ret    
c0010bf6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bfb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c00:	83 c4 18             	add    esp,0x18
c0010c03:	5b                   	pop    ebx
c0010c04:	c3                   	ret    
c0010c05:	b8 01 00 00 00       	mov    eax,0x1
c0010c0a:	31 d2                	xor    edx,edx
c0010c0c:	eb e3                	jmp    c0010bf1 <SysReadDir(regs*)+0x5d>
c0010c0e:	31 c0                	xor    eax,eax
c0010c10:	31 d2                	xor    edx,edx
c0010c12:	eb dd                	jmp    c0010bf1 <SysReadDir(regs*)+0x5d>

c0010c14 <SysIsATTY(regs*)>:
c0010c14:	83 ec 0c             	sub    esp,0xc
c0010c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c1b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010c1e:	83 f8 02             	cmp    eax,0x2
c0010c21:	76 07                	jbe    c0010c2a <SysIsATTY(regs*)+0x16>
c0010c23:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010c28:	75 28                	jne    c0010c52 <SysIsATTY(regs*)+0x3e>
c0010c2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c2f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c32:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010c38:	85 c0                	test   eax,eax
c0010c3a:	74 26                	je     c0010c62 <SysIsATTY(regs*)+0x4e>
c0010c3c:	83 ec 0c             	sub    esp,0xc
c0010c3f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c41:	50                   	push   eax
c0010c42:	ff 12                	call   DWORD PTR [edx]
c0010c44:	31 d2                	xor    edx,edx
c0010c46:	25 ff 00 00 00       	and    eax,0xff
c0010c4b:	83 c4 10             	add    esp,0x10
c0010c4e:	83 c4 0c             	add    esp,0xc
c0010c51:	c3                   	ret    
c0010c52:	83 ec 0c             	sub    esp,0xc
c0010c55:	50                   	push   eax
c0010c56:	e8 8c 85 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0010c5b:	83 c4 10             	add    esp,0x10
c0010c5e:	85 c0                	test   eax,eax
c0010c60:	75 da                	jne    c0010c3c <SysIsATTY(regs*)+0x28>
c0010c62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c67:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c6c:	83 c4 0c             	add    esp,0xc
c0010c6f:	c3                   	ret    

c0010c70 <SysSeek(regs*)>:
c0010c70:	53                   	push   ebx
c0010c71:	83 ec 08             	sub    esp,0x8
c0010c74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c78:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c7b:	8d 50 fd             	lea    edx,[eax-0x3]
c0010c7e:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010c84:	77 34                	ja     c0010cba <SysSeek(regs*)+0x4a>
c0010c86:	83 ec 0c             	sub    esp,0xc
c0010c89:	50                   	push   eax
c0010c8a:	e8 58 85 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0010c8f:	83 c4 0c             	add    esp,0xc
c0010c92:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010c95:	31 db                	xor    ebx,ebx
c0010c97:	53                   	push   ebx
c0010c98:	51                   	push   ecx
c0010c99:	50                   	push   eax
c0010c9a:	e8 4f a0 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0010c9f:	83 c4 10             	add    esp,0x10
c0010ca2:	85 c0                	test   eax,eax
c0010ca4:	0f 95 c0             	setne  al
c0010ca7:	31 d2                	xor    edx,edx
c0010ca9:	25 ff 00 00 00       	and    eax,0xff
c0010cae:	f7 d8                	neg    eax
c0010cb0:	83 d2 00             	adc    edx,0x0
c0010cb3:	83 c4 08             	add    esp,0x8
c0010cb6:	f7 da                	neg    edx
c0010cb8:	5b                   	pop    ebx
c0010cb9:	c3                   	ret    
c0010cba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010cbf:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cc4:	83 c4 08             	add    esp,0x8
c0010cc7:	5b                   	pop    ebx
c0010cc8:	c3                   	ret    

c0010cc9 <SysTell(regs*)>:
c0010cc9:	53                   	push   ebx
c0010cca:	83 ec 08             	sub    esp,0x8
c0010ccd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cd1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010cd4:	83 f8 02             	cmp    eax,0x2
c0010cd7:	76 50                	jbe    c0010d29 <SysTell(regs*)+0x60>
c0010cd9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010cde:	76 19                	jbe    c0010cf9 <SysTell(regs*)+0x30>
c0010ce0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010ce3:	31 d2                	xor    edx,edx
c0010ce5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ceb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010cf2:	31 c0                	xor    eax,eax
c0010cf4:	83 c4 08             	add    esp,0x8
c0010cf7:	5b                   	pop    ebx
c0010cf8:	c3                   	ret    
c0010cf9:	83 ec 0c             	sub    esp,0xc
c0010cfc:	50                   	push   eax
c0010cfd:	e8 e5 84 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0010d02:	5a                   	pop    edx
c0010d03:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010d06:	59                   	pop    ecx
c0010d07:	53                   	push   ebx
c0010d08:	50                   	push   eax
c0010d09:	e8 36 a0 ff ff       	call   c000ad44 <File::tell(unsigned long long*)>
c0010d0e:	83 c4 10             	add    esp,0x10
c0010d11:	85 c0                	test   eax,eax
c0010d13:	0f 95 c0             	setne  al
c0010d16:	31 d2                	xor    edx,edx
c0010d18:	25 ff 00 00 00       	and    eax,0xff
c0010d1d:	f7 d8                	neg    eax
c0010d1f:	83 d2 00             	adc    edx,0x0
c0010d22:	83 c4 08             	add    esp,0x8
c0010d25:	f7 da                	neg    edx
c0010d27:	5b                   	pop    ebx
c0010d28:	c3                   	ret    
c0010d29:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d2e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d33:	83 c4 08             	add    esp,0x8
c0010d36:	5b                   	pop    ebx
c0010d37:	c3                   	ret    

c0010d38 <SysSize(regs*)>:
c0010d38:	53                   	push   ebx
c0010d39:	83 ec 18             	sub    esp,0x18
c0010d3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010d40:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d43:	83 f8 02             	cmp    eax,0x2
c0010d46:	76 56                	jbe    c0010d9e <SysSize(regs*)+0x66>
c0010d48:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d4d:	76 19                	jbe    c0010d68 <SysSize(regs*)+0x30>
c0010d4f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010d52:	31 d2                	xor    edx,edx
c0010d54:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010d5a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010d61:	31 c0                	xor    eax,eax
c0010d63:	83 c4 18             	add    esp,0x18
c0010d66:	5b                   	pop    ebx
c0010d67:	c3                   	ret    
c0010d68:	83 ec 0c             	sub    esp,0xc
c0010d6b:	50                   	push   eax
c0010d6c:	e8 76 84 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0010d71:	83 c4 0c             	add    esp,0xc
c0010d74:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010d78:	52                   	push   edx
c0010d79:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010d7c:	52                   	push   edx
c0010d7d:	50                   	push   eax
c0010d7e:	e8 59 a1 ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c0010d83:	83 c4 10             	add    esp,0x10
c0010d86:	85 c0                	test   eax,eax
c0010d88:	0f 95 c0             	setne  al
c0010d8b:	31 d2                	xor    edx,edx
c0010d8d:	25 ff 00 00 00       	and    eax,0xff
c0010d92:	f7 d8                	neg    eax
c0010d94:	83 d2 00             	adc    edx,0x0
c0010d97:	83 c4 18             	add    esp,0x18
c0010d9a:	f7 da                	neg    edx
c0010d9c:	5b                   	pop    ebx
c0010d9d:	c3                   	ret    
c0010d9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010da3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010da8:	83 c4 18             	add    esp,0x18
c0010dab:	5b                   	pop    ebx
c0010dac:	c3                   	ret    

c0010dad <SysSizeFromFilename(regs*)>:
c0010dad:	57                   	push   edi
c0010dae:	56                   	push   esi
c0010daf:	53                   	push   ebx
c0010db0:	83 ec 20             	sub    esp,0x20
c0010db3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010db7:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010dba:	83 fb 02             	cmp    ebx,0x2
c0010dbd:	0f 86 8c 00 00 00    	jbe    c0010e4f <SysSizeFromFilename(regs*)+0xa2>
c0010dc3:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010dc9:	76 1b                	jbe    c0010de6 <SysSizeFromFilename(regs*)+0x39>
c0010dcb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010dce:	31 d2                	xor    edx,edx
c0010dd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010dd6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ddd:	83 c4 20             	add    esp,0x20
c0010de0:	31 c0                	xor    eax,eax
c0010de2:	5b                   	pop    ebx
c0010de3:	5e                   	pop    esi
c0010de4:	5f                   	pop    edi
c0010de5:	c3                   	ret    
c0010de6:	83 ec 0c             	sub    esp,0xc
c0010de9:	68 14 01 00 00       	push   0x114
c0010dee:	e8 72 6a ff ff       	call   c0007865 <malloc>
c0010df3:	83 c4 0c             	add    esp,0xc
c0010df6:	89 c7                	mov    edi,eax
c0010df8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dfd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e00:	50                   	push   eax
c0010e01:	53                   	push   ebx
c0010e02:	57                   	push   edi
c0010e03:	e8 68 9d ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0010e08:	83 c4 0c             	add    esp,0xc
c0010e0b:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010e0f:	50                   	push   eax
c0010e10:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010e13:	52                   	push   edx
c0010e14:	57                   	push   edi
c0010e15:	e8 c2 a0 ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c0010e1a:	83 c4 10             	add    esp,0x10
c0010e1d:	85 ff                	test   edi,edi
c0010e1f:	74 14                	je     c0010e35 <SysSizeFromFilename(regs*)+0x88>
c0010e21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e25:	8b 17                	mov    edx,DWORD PTR [edi]
c0010e27:	83 ec 0c             	sub    esp,0xc
c0010e2a:	57                   	push   edi
c0010e2b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010e2e:	83 c4 10             	add    esp,0x10
c0010e31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e35:	85 c0                	test   eax,eax
c0010e37:	0f 95 c0             	setne  al
c0010e3a:	31 d2                	xor    edx,edx
c0010e3c:	25 ff 00 00 00       	and    eax,0xff
c0010e41:	f7 d8                	neg    eax
c0010e43:	83 d2 00             	adc    edx,0x0
c0010e46:	83 c4 20             	add    esp,0x20
c0010e49:	f7 da                	neg    edx
c0010e4b:	5b                   	pop    ebx
c0010e4c:	5e                   	pop    esi
c0010e4d:	5f                   	pop    edi
c0010e4e:	c3                   	ret    
c0010e4f:	83 c4 20             	add    esp,0x20
c0010e52:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e57:	5b                   	pop    ebx
c0010e58:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e5d:	5e                   	pop    esi
c0010e5e:	5f                   	pop    edi
c0010e5f:	c3                   	ret    

c0010e60 <SysClose(regs*)>:
c0010e60:	53                   	push   ebx
c0010e61:	83 ec 08             	sub    esp,0x8
c0010e64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e68:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e6b:	83 f8 02             	cmp    eax,0x2
c0010e6e:	76 41                	jbe    c0010eb1 <SysClose(regs*)+0x51>
c0010e70:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010e76:	83 fa 01             	cmp    edx,0x1
c0010e79:	76 2d                	jbe    c0010ea8 <SysClose(regs*)+0x48>
c0010e7b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010e80:	77 2f                	ja     c0010eb1 <SysClose(regs*)+0x51>
c0010e82:	83 ec 0c             	sub    esp,0xc
c0010e85:	50                   	push   eax
c0010e86:	e8 5c 83 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0010e8b:	89 c3                	mov    ebx,eax
c0010e8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e90:	e8 f9 9d ff ff       	call   c000ac8e <File::close()>
c0010e95:	83 c4 10             	add    esp,0x10
c0010e98:	85 db                	test   ebx,ebx
c0010e9a:	74 0c                	je     c0010ea8 <SysClose(regs*)+0x48>
c0010e9c:	83 ec 0c             	sub    esp,0xc
c0010e9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ea1:	53                   	push   ebx
c0010ea2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ea5:	83 c4 10             	add    esp,0x10
c0010ea8:	31 c0                	xor    eax,eax
c0010eaa:	31 d2                	xor    edx,edx
c0010eac:	83 c4 08             	add    esp,0x8
c0010eaf:	5b                   	pop    ebx
c0010eb0:	c3                   	ret    
c0010eb1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010eb6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ebb:	83 c4 08             	add    esp,0x8
c0010ebe:	5b                   	pop    ebx
c0010ebf:	c3                   	ret    

c0010ec0 <SysOpenDir(regs*)>:
c0010ec0:	56                   	push   esi
c0010ec1:	53                   	push   ebx
c0010ec2:	50                   	push   eax
c0010ec3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ec7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010eca:	85 c0                	test   eax,eax
c0010ecc:	74 5b                	je     c0010f29 <SysOpenDir(regs*)+0x69>
c0010ece:	83 ec 0c             	sub    esp,0xc
c0010ed1:	68 14 01 00 00       	push   0x114
c0010ed6:	e8 8a 69 ff ff       	call   c0007865 <malloc>
c0010edb:	83 c4 0c             	add    esp,0xc
c0010ede:	89 c6                	mov    esi,eax
c0010ee0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ee5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ee8:	50                   	push   eax
c0010ee9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010eec:	50                   	push   eax
c0010eed:	56                   	push   esi
c0010eee:	e8 a7 a1 ff ff       	call   c000b09a <Directory::Directory(char const*, Process*)>
c0010ef3:	83 c4 10             	add    esp,0x10
c0010ef6:	85 f6                	test   esi,esi
c0010ef8:	74 2f                	je     c0010f29 <SysOpenDir(regs*)+0x69>
c0010efa:	83 ec 0c             	sub    esp,0xc
c0010efd:	56                   	push   esi
c0010efe:	e8 57 a2 ff ff       	call   c000b15a <Directory::open()>
c0010f03:	83 c4 10             	add    esp,0x10
c0010f06:	85 c0                	test   eax,eax
c0010f08:	75 1f                	jne    c0010f29 <SysOpenDir(regs*)+0x69>
c0010f0a:	83 ec 0c             	sub    esp,0xc
c0010f0d:	56                   	push   esi
c0010f0e:	e8 df 7f ff ff       	call   c0008ef2 <UnixFile::getFileDescriptor()>
c0010f13:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010f16:	83 c4 10             	add    esp,0x10
c0010f19:	89 02                	mov    DWORD PTR [edx],eax
c0010f1b:	c1 f8 1f             	sar    eax,0x1f
c0010f1e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010f21:	31 c0                	xor    eax,eax
c0010f23:	59                   	pop    ecx
c0010f24:	31 d2                	xor    edx,edx
c0010f26:	5b                   	pop    ebx
c0010f27:	5e                   	pop    esi
c0010f28:	c3                   	ret    
c0010f29:	59                   	pop    ecx
c0010f2a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f2f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f34:	5b                   	pop    ebx
c0010f35:	5e                   	pop    esi
c0010f36:	c3                   	ret    

c0010f37 <SysMakeDir(regs*)>:
c0010f37:	56                   	push   esi
c0010f38:	53                   	push   ebx
c0010f39:	83 ec 10             	sub    esp,0x10
c0010f3c:	68 14 01 00 00       	push   0x114
c0010f41:	e8 1f 69 ff ff       	call   c0007865 <malloc>
c0010f46:	83 c4 0c             	add    esp,0xc
c0010f49:	89 c3                	mov    ebx,eax
c0010f4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f50:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010f53:	56                   	push   esi
c0010f54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010f58:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010f5b:	50                   	push   eax
c0010f5c:	53                   	push   ebx
c0010f5d:	e8 38 a1 ff ff       	call   c000b09a <Directory::Directory(char const*, Process*)>
c0010f62:	83 c4 10             	add    esp,0x10
c0010f65:	85 db                	test   ebx,ebx
c0010f67:	74 2a                	je     c0010f93 <SysMakeDir(regs*)+0x5c>
c0010f69:	83 ec 0c             	sub    esp,0xc
c0010f6c:	53                   	push   ebx
c0010f6d:	e8 c8 a3 ff ff       	call   c000b33a <Directory::create()>
c0010f72:	89 c6                	mov    esi,eax
c0010f74:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f79:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f7c:	83 c4 10             	add    esp,0x10
c0010f7f:	31 c0                	xor    eax,eax
c0010f81:	59                   	pop    ecx
c0010f82:	85 f6                	test   esi,esi
c0010f84:	5b                   	pop    ebx
c0010f85:	0f 95 c0             	setne  al
c0010f88:	5e                   	pop    esi
c0010f89:	31 d2                	xor    edx,edx
c0010f8b:	f7 d8                	neg    eax
c0010f8d:	83 d2 00             	adc    edx,0x0
c0010f90:	f7 da                	neg    edx
c0010f92:	c3                   	ret    
c0010f93:	59                   	pop    ecx
c0010f94:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f99:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f9e:	5b                   	pop    ebx
c0010f9f:	5e                   	pop    esi
c0010fa0:	c3                   	ret    

c0010fa1 <SysCloseDir(regs*)>:
c0010fa1:	53                   	push   ebx
c0010fa2:	83 ec 08             	sub    esp,0x8
c0010fa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010fac:	8d 50 fd             	lea    edx,[eax-0x3]
c0010faf:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010fb5:	77 2f                	ja     c0010fe6 <SysCloseDir(regs*)+0x45>
c0010fb7:	83 ec 0c             	sub    esp,0xc
c0010fba:	50                   	push   eax
c0010fbb:	e8 27 82 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0010fc0:	89 c3                	mov    ebx,eax
c0010fc2:	89 04 24             	mov    DWORD PTR [esp],eax
c0010fc5:	e8 ec a1 ff ff       	call   c000b1b6 <Directory::close()>
c0010fca:	83 c4 10             	add    esp,0x10
c0010fcd:	85 db                	test   ebx,ebx
c0010fcf:	74 0c                	je     c0010fdd <SysCloseDir(regs*)+0x3c>
c0010fd1:	83 ec 0c             	sub    esp,0xc
c0010fd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010fd6:	53                   	push   ebx
c0010fd7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010fda:	83 c4 10             	add    esp,0x10
c0010fdd:	31 c0                	xor    eax,eax
c0010fdf:	31 d2                	xor    edx,edx
c0010fe1:	83 c4 08             	add    esp,0x8
c0010fe4:	5b                   	pop    ebx
c0010fe5:	c3                   	ret    
c0010fe6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010feb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ff0:	83 c4 08             	add    esp,0x8
c0010ff3:	5b                   	pop    ebx
c0010ff4:	c3                   	ret    

c0010ff5 <SysWait(regs*)>:
c0010ff5:	83 ec 10             	sub    esp,0x10
c0010ff8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010ffc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010fff:	52                   	push   edx
c0011000:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011003:	51                   	push   ecx
c0011004:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011007:	50                   	push   eax
c0011008:	e8 cb 39 00 00       	call   c00149d8 <waitTask(int, int*, int)>
c001100d:	83 c4 1c             	add    esp,0x1c
c0011010:	99                   	cdq    
c0011011:	c3                   	ret    

c0011012 <SysNotImpl(regs*)>:
c0011012:	83 ec 18             	sub    esp,0x18
c0011015:	68 08 02 02 c0       	push   0xc0020208
c001101a:	e8 90 f3 ff ff       	call   c00103af <KePanic(char const*)>
c001101f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011024:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011029:	83 c4 1c             	add    esp,0x1c
c001102c:	c3                   	ret    

c001102d <SysPanic(regs*)>:
c001102d:	83 ec 18             	sub    esp,0x18
c0011030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011034:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011037:	50                   	push   eax
c0011038:	e8 72 f3 ff ff       	call   c00103af <KePanic(char const*)>
c001103d:	b8 01 00 00 00       	mov    eax,0x1
c0011042:	31 d2                	xor    edx,edx
c0011044:	83 c4 1c             	add    esp,0x1c
c0011047:	c3                   	ret    

c0011048 <SysRmdir(regs*)>:
c0011048:	56                   	push   esi
c0011049:	53                   	push   ebx
c001104a:	83 ec 20             	sub    esp,0x20
c001104d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011051:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011054:	68 14 01 00 00       	push   0x114
c0011059:	e8 07 68 ff ff       	call   c0007865 <malloc>
c001105e:	83 c4 0c             	add    esp,0xc
c0011061:	89 c3                	mov    ebx,eax
c0011063:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011068:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001106b:	50                   	push   eax
c001106c:	56                   	push   esi
c001106d:	53                   	push   ebx
c001106e:	e8 fd 9a ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0011073:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011076:	e8 2d 9d ff ff       	call   c000ada8 <File::unlink()>
c001107b:	83 c4 10             	add    esp,0x10
c001107e:	85 db                	test   ebx,ebx
c0011080:	74 14                	je     c0011096 <SysRmdir(regs*)+0x4e>
c0011082:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011086:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011088:	83 ec 0c             	sub    esp,0xc
c001108b:	53                   	push   ebx
c001108c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001108f:	83 c4 10             	add    esp,0x10
c0011092:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011096:	85 c0                	test   eax,eax
c0011098:	0f 95 c0             	setne  al
c001109b:	31 d2                	xor    edx,edx
c001109d:	25 ff 00 00 00       	and    eax,0xff
c00110a2:	f7 d8                	neg    eax
c00110a4:	83 d2 00             	adc    edx,0x0
c00110a7:	83 c4 14             	add    esp,0x14
c00110aa:	f7 da                	neg    edx
c00110ac:	5b                   	pop    ebx
c00110ad:	5e                   	pop    esi
c00110ae:	c3                   	ret    

c00110af <SysUnlink(regs*)>:
c00110af:	56                   	push   esi
c00110b0:	53                   	push   ebx
c00110b1:	83 ec 20             	sub    esp,0x20
c00110b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00110b8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00110bb:	68 14 01 00 00       	push   0x114
c00110c0:	e8 a0 67 ff ff       	call   c0007865 <malloc>
c00110c5:	83 c4 0c             	add    esp,0xc
c00110c8:	89 c3                	mov    ebx,eax
c00110ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110d2:	50                   	push   eax
c00110d3:	56                   	push   esi
c00110d4:	53                   	push   ebx
c00110d5:	e8 96 9a ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c00110da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110dd:	e8 c6 9c ff ff       	call   c000ada8 <File::unlink()>
c00110e2:	83 c4 10             	add    esp,0x10
c00110e5:	85 db                	test   ebx,ebx
c00110e7:	74 14                	je     c00110fd <SysUnlink(regs*)+0x4e>
c00110e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110ed:	8b 13                	mov    edx,DWORD PTR [ebx]
c00110ef:	83 ec 0c             	sub    esp,0xc
c00110f2:	53                   	push   ebx
c00110f3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00110f6:	83 c4 10             	add    esp,0x10
c00110f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110fd:	85 c0                	test   eax,eax
c00110ff:	0f 95 c0             	setne  al
c0011102:	31 d2                	xor    edx,edx
c0011104:	25 ff 00 00 00       	and    eax,0xff
c0011109:	f7 d8                	neg    eax
c001110b:	83 d2 00             	adc    edx,0x0
c001110e:	83 c4 14             	add    esp,0x14
c0011111:	f7 da                	neg    edx
c0011113:	5b                   	pop    ebx
c0011114:	5e                   	pop    esi
c0011115:	c3                   	ret    

c0011116 <SysGetArgv(regs*)>:
c0011116:	83 ec 0c             	sub    esp,0xc
c0011119:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001111d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011120:	85 c0                	test   eax,eax
c0011122:	78 2c                	js     c0011150 <SysGetArgv(regs*)+0x3a>
c0011124:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001112a:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001112d:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011133:	7d 1b                	jge    c0011150 <SysGetArgv(regs*)+0x3a>
c0011135:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001113c:	85 c0                	test   eax,eax
c001113e:	74 18                	je     c0011158 <SysGetArgv(regs*)+0x42>
c0011140:	83 ec 08             	sub    esp,0x8
c0011143:	50                   	push   eax
c0011144:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011147:	50                   	push   eax
c0011148:	e8 a3 f4 fe ff       	call   c00005f0 <strcpy>
c001114d:	83 c4 10             	add    esp,0x10
c0011150:	31 c0                	xor    eax,eax
c0011152:	31 d2                	xor    edx,edx
c0011154:	83 c4 0c             	add    esp,0xc
c0011157:	c3                   	ret    
c0011158:	b8 01 00 00 00       	mov    eax,0x1
c001115d:	31 d2                	xor    edx,edx
c001115f:	83 c4 0c             	add    esp,0xc
c0011162:	c3                   	ret    

c0011163 <SysUSleep(regs*)>:
c0011163:	83 ec 1c             	sub    esp,0x1c
c0011166:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001116a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001116d:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011170:	6a 00                	push   0x0
c0011172:	6a 64                	push   0x64
c0011174:	52                   	push   edx
c0011175:	50                   	push   eax
c0011176:	e8 35 c9 00 00       	call   c001dab0 <__udivdi3>
c001117b:	83 c4 14             	add    esp,0x14
c001117e:	50                   	push   eax
c001117f:	e8 28 39 00 00       	call   c0014aac <milliTenthSleep(unsigned int)>
c0011184:	31 c0                	xor    eax,eax
c0011186:	31 d2                	xor    edx,edx
c0011188:	83 c4 1c             	add    esp,0x1c
c001118b:	c3                   	ret    

c001118c <SysSpawn(regs*)>:
c001118c:	56                   	push   esi
c001118d:	53                   	push   ebx
c001118e:	50                   	push   eax
c001118f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011193:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011196:	85 c0                	test   eax,eax
c0011198:	75 08                	jne    c00111a2 <SysSpawn(regs*)+0x16>
c001119a:	59                   	pop    ecx
c001119b:	31 c0                	xor    eax,eax
c001119d:	31 d2                	xor    edx,edx
c001119f:	5b                   	pop    ebx
c00111a0:	5e                   	pop    esi
c00111a1:	c3                   	ret    
c00111a2:	83 ec 0c             	sub    esp,0xc
c00111a5:	68 24 07 00 00       	push   0x724
c00111aa:	e8 b6 66 ff ff       	call   c0007865 <malloc>
c00111af:	83 c4 10             	add    esp,0x10
c00111b2:	89 c6                	mov    esi,eax
c00111b4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00111b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111ba:	85 c0                	test   eax,eax
c00111bc:	75 33                	jne    c00111f1 <SysSpawn(regs*)+0x65>
c00111be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111c3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111c6:	52                   	push   edx
c00111c7:	50                   	push   eax
c00111c8:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00111cb:	53                   	push   ebx
c00111cc:	56                   	push   esi
c00111cd:	e8 5e 2f 00 00       	call   c0014130 <Process::Process(char const*, Process*, char**)>
c00111d2:	83 c4 10             	add    esp,0x10
c00111d5:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00111dc:	75 bc                	jne    c001119a <SysSpawn(regs*)+0xe>
c00111de:	83 ec 0c             	sub    esp,0xc
c00111e1:	56                   	push   esi
c00111e2:	e8 89 34 00 00       	call   c0014670 <Process::createUserThread()>
c00111e7:	8b 06                	mov    eax,DWORD PTR [esi]
c00111e9:	83 c4 10             	add    esp,0x10
c00111ec:	99                   	cdq    
c00111ed:	59                   	pop    ecx
c00111ee:	5b                   	pop    ebx
c00111ef:	5e                   	pop    esi
c00111f0:	c3                   	ret    
c00111f1:	31 c0                	xor    eax,eax
c00111f3:	eb d1                	jmp    c00111c6 <SysSpawn(regs*)+0x3a>

c00111f5 <SysGetEnv(regs*)>:
c00111f5:	57                   	push   edi
c00111f6:	56                   	push   esi
c00111f7:	53                   	push   ebx
c00111f8:	83 ec 1c             	sub    esp,0x1c
c00111fb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00111ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011204:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011207:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001120a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001120d:	50                   	push   eax
c001120e:	e8 54 f0 ff ff       	call   c0010267 <Krnl::getProcessTotalEnvCount(Process*)>
c0011213:	83 c4 10             	add    esp,0x10
c0011216:	39 c7                	cmp    edi,eax
c0011218:	7c 14                	jl     c001122e <SysGetEnv(regs*)+0x39>
c001121a:	85 f6                	test   esi,esi
c001121c:	75 0b                	jne    c0011229 <SysGetEnv(regs*)+0x34>
c001121e:	83 c4 10             	add    esp,0x10
c0011221:	31 c0                	xor    eax,eax
c0011223:	5b                   	pop    ebx
c0011224:	31 d2                	xor    edx,edx
c0011226:	5e                   	pop    esi
c0011227:	5f                   	pop    edi
c0011228:	c3                   	ret    
c0011229:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001122c:	eb f0                	jmp    c001121e <SysGetEnv(regs*)+0x29>
c001122e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011232:	52                   	push   edx
c0011233:	57                   	push   edi
c0011234:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001123a:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001123d:	51                   	push   ecx
c001123e:	50                   	push   eax
c001123f:	e8 43 f0 ff ff       	call   c0010287 <Krnl::getProcessEnvPair(Process*, int)>
c0011244:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011247:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001124b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001124f:	83 c4 0c             	add    esp,0xc
c0011252:	85 db                	test   ebx,ebx
c0011254:	75 23                	jne    c0011279 <SysGetEnv(regs*)+0x84>
c0011256:	83 ec 0c             	sub    esp,0xc
c0011259:	50                   	push   eax
c001125a:	e8 d1 f2 fe ff       	call   c0000530 <strlen>
c001125f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011262:	89 c3                	mov    ebx,eax
c0011264:	e8 c7 f2 fe ff       	call   c0000530 <strlen>
c0011269:	31 d2                	xor    edx,edx
c001126b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001126f:	83 c4 10             	add    esp,0x10
c0011272:	83 c4 10             	add    esp,0x10
c0011275:	5b                   	pop    ebx
c0011276:	5e                   	pop    esi
c0011277:	5f                   	pop    edi
c0011278:	c3                   	ret    
c0011279:	83 ec 08             	sub    esp,0x8
c001127c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001127f:	50                   	push   eax
c0011280:	56                   	push   esi
c0011281:	e8 6a f3 fe ff       	call   c00005f0 <strcpy>
c0011286:	58                   	pop    eax
c0011287:	5a                   	pop    edx
c0011288:	68 22 02 02 c0       	push   0xc0020222
c001128d:	56                   	push   esi
c001128e:	e8 1d f5 fe ff       	call   c00007b0 <strcat>
c0011293:	59                   	pop    ecx
c0011294:	5b                   	pop    ebx
c0011295:	57                   	push   edi
c0011296:	56                   	push   esi
c0011297:	e8 14 f5 fe ff       	call   c00007b0 <strcat>
c001129c:	83 c4 10             	add    esp,0x10
c001129f:	e9 7a ff ff ff       	jmp    c001121e <SysGetEnv(regs*)+0x29>

c00112a4 <SysSetFatAttrib(regs*)>:
c00112a4:	57                   	push   edi
c00112a5:	56                   	push   esi
c00112a6:	53                   	push   ebx
c00112a7:	83 ec 1c             	sub    esp,0x1c
c00112aa:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00112ae:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00112b1:	68 14 01 00 00       	push   0x114
c00112b6:	e8 aa 65 ff ff       	call   c0007865 <malloc>
c00112bb:	83 c4 0c             	add    esp,0xc
c00112be:	89 c3                	mov    ebx,eax
c00112c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112c8:	50                   	push   eax
c00112c9:	57                   	push   edi
c00112ca:	53                   	push   ebx
c00112cb:	e8 a0 98 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c00112d0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00112d3:	83 c4 0c             	add    esp,0xc
c00112d6:	0f b6 d4             	movzx  edx,ah
c00112d9:	25 ff 00 00 00       	and    eax,0xff
c00112de:	52                   	push   edx
c00112df:	50                   	push   eax
c00112e0:	53                   	push   ebx
c00112e1:	e8 5c 9b ff ff       	call   c000ae42 <File::chfatattr(unsigned char, unsigned char)>
c00112e6:	83 c4 10             	add    esp,0x10
c00112e9:	85 db                	test   ebx,ebx
c00112eb:	74 14                	je     c0011301 <SysSetFatAttrib(regs*)+0x5d>
c00112ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00112f1:	8b 13                	mov    edx,DWORD PTR [ebx]
c00112f3:	83 ec 0c             	sub    esp,0xc
c00112f6:	53                   	push   ebx
c00112f7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00112fa:	83 c4 10             	add    esp,0x10
c00112fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011301:	85 c0                	test   eax,eax
c0011303:	0f 95 c0             	setne  al
c0011306:	31 d2                	xor    edx,edx
c0011308:	25 ff 00 00 00       	and    eax,0xff
c001130d:	f7 d8                	neg    eax
c001130f:	83 d2 00             	adc    edx,0x0
c0011312:	83 c4 10             	add    esp,0x10
c0011315:	f7 da                	neg    edx
c0011317:	5b                   	pop    ebx
c0011318:	5e                   	pop    esi
c0011319:	5f                   	pop    edi
c001131a:	c3                   	ret    

c001131b <SysPipe(regs*)>:
c001131b:	57                   	push   edi
c001131c:	56                   	push   esi
c001131d:	53                   	push   ebx
c001131e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011322:	83 ec 0c             	sub    esp,0xc
c0011325:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011328:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001132b:	6a 20                	push   0x20
c001132d:	e8 33 65 ff ff       	call   c0007865 <malloc>
c0011332:	89 c3                	mov    ebx,eax
c0011334:	58                   	pop    eax
c0011335:	5a                   	pop    edx
c0011336:	68 00 50 00 00       	push   0x5000
c001133b:	53                   	push   ebx
c001133c:	e8 29 6e ff ff       	call   c000816a <Pipe::Pipe(int)>
c0011341:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011344:	e8 a9 7b ff ff       	call   c0008ef2 <UnixFile::getFileDescriptor()>
c0011349:	89 07                	mov    DWORD PTR [edi],eax
c001134b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001134e:	e8 9f 7b ff ff       	call   c0008ef2 <UnixFile::getFileDescriptor()>
c0011353:	83 c4 10             	add    esp,0x10
c0011356:	89 06                	mov    DWORD PTR [esi],eax
c0011358:	31 d2                	xor    edx,edx
c001135a:	5b                   	pop    ebx
c001135b:	31 c0                	xor    eax,eax
c001135d:	5e                   	pop    esi
c001135e:	5f                   	pop    edi
c001135f:	c3                   	ret    

c0011360 <SysGetUnixTime(regs*)>:
c0011360:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0011365:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001136b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001136f:	e9 0a a2 ff ff       	jmp    c000b57e <Clock::timeInSecondsLocal()>

c0011374 <string_ends_with(char const*, char const*)>:
c0011374:	57                   	push   edi
c0011375:	56                   	push   esi
c0011376:	53                   	push   ebx
c0011377:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001137b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001137f:	83 ec 0c             	sub    esp,0xc
c0011382:	53                   	push   ebx
c0011383:	e8 a8 f1 fe ff       	call   c0000530 <strlen>
c0011388:	89 3c 24             	mov    DWORD PTR [esp],edi
c001138b:	89 c6                	mov    esi,eax
c001138d:	e8 9e f1 fe ff       	call   c0000530 <strlen>
c0011392:	83 c4 10             	add    esp,0x10
c0011395:	39 c6                	cmp    esi,eax
c0011397:	7d 06                	jge    c001139f <string_ends_with(char const*, char const*)+0x2b>
c0011399:	5b                   	pop    ebx
c001139a:	31 c0                	xor    eax,eax
c001139c:	5e                   	pop    esi
c001139d:	5f                   	pop    edi
c001139e:	c3                   	ret    
c001139f:	83 ec 08             	sub    esp,0x8
c00113a2:	29 c6                	sub    esi,eax
c00113a4:	57                   	push   edi
c00113a5:	01 f3                	add    ebx,esi
c00113a7:	53                   	push   ebx
c00113a8:	e8 23 f3 fe ff       	call   c00006d0 <strcmp>
c00113ad:	83 c4 10             	add    esp,0x10
c00113b0:	85 c0                	test   eax,eax
c00113b2:	5b                   	pop    ebx
c00113b3:	0f 94 c0             	sete   al
c00113b6:	5e                   	pop    esi
c00113b7:	25 ff 00 00 00       	and    eax,0xff
c00113bc:	5f                   	pop    edi
c00113bd:	c3                   	ret    

c00113be <SysOpen(regs*)>:
c00113be:	56                   	push   esi
c00113bf:	53                   	push   ebx
c00113c0:	81 ec 04 01 00 00    	sub    esp,0x104
c00113c6:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00113cd:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00113d0:	85 c9                	test   ecx,ecx
c00113d2:	0f 84 b9 01 00 00    	je     c0011591 <SysOpen(regs*)+0x1d3>
c00113d8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113db:	85 c0                	test   eax,eax
c00113dd:	0f 84 ae 01 00 00    	je     c0011591 <SysOpen(regs*)+0x1d3>
c00113e3:	52                   	push   edx
c00113e4:	68 24 02 02 c0       	push   0xc0020224
c00113e9:	50                   	push   eax
c00113ea:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00113ee:	56                   	push   esi
c00113ef:	e8 d2 95 ff ff       	call   c000a9c6 <Fs::standardiseFiles(char*, char const*, char const*)>
c00113f4:	89 34 24             	mov    DWORD PTR [esp],esi
c00113f7:	e8 34 f1 fe ff       	call   c0000530 <strlen>
c00113fc:	83 c4 10             	add    esp,0x10
c00113ff:	48                   	dec    eax
c0011400:	74 1d                	je     c001141f <SysOpen(regs*)+0x61>
c0011402:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011405:	eb 0f                	jmp    c0011416 <SysOpen(regs*)+0x58>
c0011407:	80 fa 3a             	cmp    dl,0x3a
c001140a:	74 0f                	je     c001141b <SysOpen(regs*)+0x5d>
c001140c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011410:	48                   	dec    eax
c0011411:	74 0c                	je     c001141f <SysOpen(regs*)+0x61>
c0011413:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011416:	80 fa 2e             	cmp    dl,0x2e
c0011419:	75 ec                	jne    c0011407 <SysOpen(regs*)+0x49>
c001141b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001141f:	83 ec 08             	sub    esp,0x8
c0011422:	68 28 02 02 c0       	push   0xc0020228
c0011427:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001142a:	50                   	push   eax
c001142b:	e8 44 ff ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c0011430:	83 c4 10             	add    esp,0x10
c0011433:	85 c0                	test   eax,eax
c0011435:	74 1d                	je     c0011454 <SysOpen(regs*)+0x96>
c0011437:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001143a:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011440:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011447:	81 c4 04 01 00 00    	add    esp,0x104
c001144d:	31 c0                	xor    eax,eax
c001144f:	31 d2                	xor    edx,edx
c0011451:	5b                   	pop    ebx
c0011452:	5e                   	pop    esi
c0011453:	c3                   	ret    
c0011454:	83 ec 08             	sub    esp,0x8
c0011457:	68 2d 02 02 c0       	push   0xc002022d
c001145c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001145f:	50                   	push   eax
c0011460:	e8 0f ff ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c0011465:	83 c4 10             	add    esp,0x10
c0011468:	85 c0                	test   eax,eax
c001146a:	75 cb                	jne    c0011437 <SysOpen(regs*)+0x79>
c001146c:	83 ec 08             	sub    esp,0x8
c001146f:	68 29 02 02 c0       	push   0xc0020229
c0011474:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011477:	50                   	push   eax
c0011478:	e8 53 f2 fe ff       	call   c00006d0 <strcmp>
c001147d:	83 c4 10             	add    esp,0x10
c0011480:	85 c0                	test   eax,eax
c0011482:	74 b3                	je     c0011437 <SysOpen(regs*)+0x79>
c0011484:	83 ec 08             	sub    esp,0x8
c0011487:	68 28 02 02 c0       	push   0xc0020228
c001148c:	56                   	push   esi
c001148d:	e8 e2 fe ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c0011492:	83 c4 10             	add    esp,0x10
c0011495:	85 c0                	test   eax,eax
c0011497:	75 9e                	jne    c0011437 <SysOpen(regs*)+0x79>
c0011499:	83 ec 08             	sub    esp,0x8
c001149c:	68 32 02 02 c0       	push   0xc0020232
c00114a1:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114a4:	50                   	push   eax
c00114a5:	e8 ca fe ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c00114aa:	83 c4 10             	add    esp,0x10
c00114ad:	85 c0                	test   eax,eax
c00114af:	0f 85 ef 00 00 00    	jne    c00115a4 <SysOpen(regs*)+0x1e6>
c00114b5:	83 ec 08             	sub    esp,0x8
c00114b8:	68 37 02 02 c0       	push   0xc0020237
c00114bd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00114c0:	50                   	push   eax
c00114c1:	e8 ae fe ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c00114c6:	83 c4 10             	add    esp,0x10
c00114c9:	85 c0                	test   eax,eax
c00114cb:	0f 85 d3 00 00 00    	jne    c00115a4 <SysOpen(regs*)+0x1e6>
c00114d1:	83 ec 08             	sub    esp,0x8
c00114d4:	68 33 02 02 c0       	push   0xc0020233
c00114d9:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00114dc:	51                   	push   ecx
c00114dd:	e8 ee f1 fe ff       	call   c00006d0 <strcmp>
c00114e2:	83 c4 10             	add    esp,0x10
c00114e5:	85 c0                	test   eax,eax
c00114e7:	0f 84 b7 00 00 00    	je     c00115a4 <SysOpen(regs*)+0x1e6>
c00114ed:	83 ec 08             	sub    esp,0x8
c00114f0:	68 32 02 02 c0       	push   0xc0020232
c00114f5:	56                   	push   esi
c00114f6:	e8 79 fe ff ff       	call   c0011374 <string_ends_with(char const*, char const*)>
c00114fb:	83 c4 10             	add    esp,0x10
c00114fe:	85 c0                	test   eax,eax
c0011500:	0f 85 9e 00 00 00    	jne    c00115a4 <SysOpen(regs*)+0x1e6>
c0011506:	83 ec 0c             	sub    esp,0xc
c0011509:	68 14 01 00 00       	push   0x114
c001150e:	e8 52 63 ff ff       	call   c0007865 <malloc>
c0011513:	83 c4 0c             	add    esp,0xc
c0011516:	89 c6                	mov    esi,eax
c0011518:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001151d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011520:	50                   	push   eax
c0011521:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011524:	52                   	push   edx
c0011525:	56                   	push   esi
c0011526:	e8 45 96 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c001152b:	83 c4 10             	add    esp,0x10
c001152e:	85 f6                	test   esi,esi
c0011530:	74 5f                	je     c0011591 <SysOpen(regs*)+0x1d3>
c0011532:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011535:	89 d0                	mov    eax,edx
c0011537:	25 ff 00 00 00       	and    eax,0xff
c001153c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001153f:	89 d0                	mov    eax,edx
c0011541:	83 e0 01             	and    eax,0x1
c0011544:	f6 c2 02             	test   dl,0x2
c0011547:	74 03                	je     c001154c <SysOpen(regs*)+0x18e>
c0011549:	83 c8 02             	or     eax,0x2
c001154c:	f6 c2 04             	test   dl,0x4
c001154f:	74 03                	je     c0011554 <SysOpen(regs*)+0x196>
c0011551:	83 c8 04             	or     eax,0x4
c0011554:	f6 c2 08             	test   dl,0x8
c0011557:	74 03                	je     c001155c <SysOpen(regs*)+0x19e>
c0011559:	83 c8 0a             	or     eax,0xa
c001155c:	83 e2 10             	and    edx,0x10
c001155f:	74 03                	je     c0011564 <SysOpen(regs*)+0x1a6>
c0011561:	83 c8 12             	or     eax,0x12
c0011564:	83 ec 08             	sub    esp,0x8
c0011567:	50                   	push   eax
c0011568:	56                   	push   esi
c0011569:	e8 c2 96 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c001156e:	83 c4 10             	add    esp,0x10
c0011571:	85 c0                	test   eax,eax
c0011573:	75 1c                	jne    c0011591 <SysOpen(regs*)+0x1d3>
c0011575:	83 ec 0c             	sub    esp,0xc
c0011578:	56                   	push   esi
c0011579:	e8 74 79 ff ff       	call   c0008ef2 <UnixFile::getFileDescriptor()>
c001157e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011581:	83 c4 10             	add    esp,0x10
c0011584:	89 02                	mov    DWORD PTR [edx],eax
c0011586:	c1 f8 1f             	sar    eax,0x1f
c0011589:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001158c:	e9 b6 fe ff ff       	jmp    c0011447 <SysOpen(regs*)+0x89>
c0011591:	81 c4 04 01 00 00    	add    esp,0x104
c0011597:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001159c:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115a1:	5b                   	pop    ebx
c00115a2:	5e                   	pop    esi
c00115a3:	c3                   	ret    
c00115a4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115a7:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00115ad:	e9 8e fe ff ff       	jmp    c0011440 <SysOpen(regs*)+0x82>

c00115b2 <KeSystemCall(regs*, void*)>:
c00115b2:	53                   	push   ebx
c00115b3:	83 ec 08             	sub    esp,0x8
c00115b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115ba:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00115bd:	83 f8 32             	cmp    eax,0x32
c00115c0:	77 16                	ja     c00115d8 <KeSystemCall(regs*, void*)+0x26>
c00115c2:	8b 14 85 00 15 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeb00]
c00115c9:	85 d2                	test   edx,edx
c00115cb:	74 0b                	je     c00115d8 <KeSystemCall(regs*, void*)+0x26>
c00115cd:	83 ec 0c             	sub    esp,0xc
c00115d0:	53                   	push   ebx
c00115d1:	ff d2                	call   edx
c00115d3:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00115d6:	eb 0d                	jmp    c00115e5 <KeSystemCall(regs*, void*)+0x33>
c00115d8:	52                   	push   edx
c00115d9:	52                   	push   edx
c00115da:	50                   	push   eax
c00115db:	68 3c 02 02 c0       	push   0xc002023c
c00115e0:	e8 15 90 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00115e5:	83 c4 10             	add    esp,0x10
c00115e8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00115ed:	31 d2                	xor    edx,edx
c00115ef:	83 c4 08             	add    esp,0x8
c00115f2:	5b                   	pop    ebx
c00115f3:	c3                   	ret    

c00115f4 <KeSwitchEndian16(unsigned short)>:
c00115f4:	83 ec 04             	sub    esp,0x4
c00115f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00115fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00115ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011602:	25 ff ff 00 00       	and    eax,0xffff
c0011607:	c1 f8 08             	sar    eax,0x8
c001160a:	89 c2                	mov    edx,eax
c001160c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001160f:	25 ff ff 00 00       	and    eax,0xffff
c0011614:	c1 e0 08             	shl    eax,0x8
c0011617:	09 d0                	or     eax,edx
c0011619:	83 c4 04             	add    esp,0x4
c001161c:	c3                   	ret    
c001161d:	8d 76 00             	lea    esi,[esi+0x0]

c0011620 <KeSwitchEndian32(unsigned int)>:
c0011620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011624:	c1 e8 18             	shr    eax,0x18
c0011627:	89 c2                	mov    edx,eax
c0011629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001162d:	c1 e0 08             	shl    eax,0x8
c0011630:	25 00 00 ff 00       	and    eax,0xff0000
c0011635:	09 c2                	or     edx,eax
c0011637:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001163b:	c1 e8 08             	shr    eax,0x8
c001163e:	25 00 ff 00 00       	and    eax,0xff00
c0011643:	09 c2                	or     edx,eax
c0011645:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011649:	c1 e0 18             	shl    eax,0x18
c001164c:	09 d0                	or     eax,edx
c001164e:	c3                   	ret    
c001164f:	90                   	nop

c0011650 <EthernetCRC32(unsigned char*, int)>:
c0011650:	83 ec 10             	sub    esp,0x10
c0011653:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0011658:	75 0a                	jne    c0011664 <EthernetCRC32(unsigned char*, int)+0x14>
c001165a:	b8 00 00 00 00       	mov    eax,0x0
c001165f:	e9 8c 00 00 00       	jmp    c00116f0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011664:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011669:	7f 09                	jg     c0011674 <EthernetCRC32(unsigned char*, int)+0x24>
c001166b:	b8 00 00 00 00       	mov    eax,0x0
c0011670:	eb 7e                	jmp    c00116f0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0011672:	66 90                	xchg   ax,ax
c0011674:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001167c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011684:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011688:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001168c:	7d 5a                	jge    c00116e8 <EthernetCRC32(unsigned char*, int)+0x98>
c001168e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011692:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011696:	01 d0                	add    eax,edx
c0011698:	8a 00                	mov    al,BYTE PTR [eax]
c001169a:	25 ff 00 00 00       	and    eax,0xff
c001169f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00116a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00116ab:	90                   	nop
c00116ac:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00116b1:	7f 2d                	jg     c00116e0 <EthernetCRC32(unsigned char*, int)+0x90>
c00116b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116b7:	83 e0 01             	and    eax,0x1
c00116ba:	74 10                	je     c00116cc <EthernetCRC32(unsigned char*, int)+0x7c>
c00116bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116c0:	d1 e8                	shr    eax,1
c00116c2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00116c7:	eb 0b                	jmp    c00116d4 <EthernetCRC32(unsigned char*, int)+0x84>
c00116c9:	8d 76 00             	lea    esi,[esi+0x0]
c00116cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116d0:	d1 e8                	shr    eax,1
c00116d2:	66 90                	xchg   ax,ax
c00116d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116d8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00116dc:	eb ce                	jmp    c00116ac <EthernetCRC32(unsigned char*, int)+0x5c>
c00116de:	66 90                	xchg   ax,ax
c00116e0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00116e4:	eb 9e                	jmp    c0011684 <EthernetCRC32(unsigned char*, int)+0x34>
c00116e6:	66 90                	xchg   ax,ax
c00116e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116ec:	f7 d0                	not    eax
c00116ee:	66 90                	xchg   ax,ax
c00116f0:	83 c4 10             	add    esp,0x10
c00116f3:	c3                   	ret    

c00116f4 <EthernetReceivedPacket(unsigned char*, unsigned short)>:
c00116f4:	83 ec 04             	sub    esp,0x4
c00116f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00116ff:	90                   	nop
c0011700:	83 c4 04             	add    esp,0x4
c0011703:	c3                   	ret    

c0011704 <CmOpen(char const*)>:
c0011704:	57                   	push   edi
c0011705:	56                   	push   esi
c0011706:	53                   	push   ebx
c0011707:	83 ec 1c             	sub    esp,0x1c
c001170a:	6a 30                	push   0x30
c001170c:	e8 54 61 ff ff       	call   c0007865 <malloc>
c0011711:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011718:	89 c3                	mov    ebx,eax
c001171a:	e8 46 61 ff ff       	call   c0007865 <malloc>
c001171f:	83 c4 0c             	add    esp,0xc
c0011722:	89 c6                	mov    esi,eax
c0011724:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001172a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001172e:	50                   	push   eax
c001172f:	e8 3c 94 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0011734:	83 c4 0c             	add    esp,0xc
c0011737:	89 33                	mov    DWORD PTR [ebx],esi
c0011739:	8d 44 24 07          	lea    eax,[esp+0x7]
c001173d:	50                   	push   eax
c001173e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011742:	50                   	push   eax
c0011743:	56                   	push   esi
c0011744:	e8 93 97 ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c0011749:	5a                   	pop    edx
c001174a:	59                   	pop    ecx
c001174b:	6a 01                	push   0x1
c001174d:	ff 33                	push   DWORD PTR [ebx]
c001174f:	e8 dc 94 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0011754:	5e                   	pop    esi
c0011755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011759:	e8 07 61 ff ff       	call   c0007865 <malloc>
c001175e:	5a                   	pop    edx
c001175f:	89 c7                	mov    edi,eax
c0011761:	8d 74 24 10          	lea    esi,[esp+0x10]
c0011765:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011767:	8b 10                	mov    edx,DWORD PTR [eax]
c0011769:	56                   	push   esi
c001176a:	57                   	push   edi
c001176b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001176f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011773:	50                   	push   eax
c0011774:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011777:	83 c4 14             	add    esp,0x14
c001177a:	ff 33                	push   DWORD PTR [ebx]
c001177c:	e8 0d 95 ff ff       	call   c000ac8e <File::close()>
c0011781:	59                   	pop    ecx
c0011782:	58                   	pop    eax
c0011783:	6a 13                	push   0x13
c0011785:	ff 33                	push   DWORD PTR [ebx]
c0011787:	e8 a4 94 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c001178c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001178e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011790:	89 34 24             	mov    DWORD PTR [esp],esi
c0011793:	57                   	push   edi
c0011794:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011798:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001179c:	50                   	push   eax
c001179d:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00117a0:	83 c4 14             	add    esp,0x14
c00117a3:	57                   	push   edi
c00117a4:	e8 cc 60 ff ff       	call   c0007875 <free>
c00117a9:	83 c4 10             	add    esp,0x10
c00117ac:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00117af:	75 10                	jne    c00117c1 <CmOpen(char const*)+0xbd>
c00117b1:	83 ec 0c             	sub    esp,0xc
c00117b4:	68 50 02 02 c0       	push   0xc0020250
c00117b9:	e8 f1 eb ff ff       	call   c00103af <KePanic(char const*)>
c00117be:	83 c4 10             	add    esp,0x10
c00117c1:	8d 7b 05             	lea    edi,[ebx+0x5]
c00117c4:	50                   	push   eax
c00117c5:	6a 00                	push   0x0
c00117c7:	6a 00                	push   0x0
c00117c9:	ff 33                	push   DWORD PTR [ebx]
c00117cb:	e8 1e 95 ff ff       	call   c000acee <File::seek(unsigned long long)>
c00117d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117d2:	8b 10                	mov    edx,DWORD PTR [eax]
c00117d4:	89 34 24             	mov    DWORD PTR [esp],esi
c00117d7:	57                   	push   edi
c00117d8:	6a 00                	push   0x0
c00117da:	6a 2b                	push   0x2b
c00117dc:	50                   	push   eax
c00117dd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00117e0:	83 c4 1c             	add    esp,0x1c
c00117e3:	6a 00                	push   0x0
c00117e5:	6a 00                	push   0x0
c00117e7:	ff 33                	push   DWORD PTR [ebx]
c00117e9:	e8 00 95 ff ff       	call   c000acee <File::seek(unsigned long long)>
c00117ee:	83 c4 0c             	add    esp,0xc
c00117f1:	6a 08                	push   0x8
c00117f3:	68 61 02 02 c0       	push   0xc0020261
c00117f8:	57                   	push   edi
c00117f9:	e8 82 eb fe ff       	call   c0000380 <memcmp>
c00117fe:	83 c4 10             	add    esp,0x10
c0011801:	85 c0                	test   eax,eax
c0011803:	74 10                	je     c0011815 <CmOpen(char const*)+0x111>
c0011805:	83 ec 0c             	sub    esp,0xc
c0011808:	68 6a 02 02 c0       	push   0xc002026a
c001180d:	e8 9d eb ff ff       	call   c00103af <KePanic(char const*)>
c0011812:	83 c4 10             	add    esp,0x10
c0011815:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0011819:	89 d8                	mov    eax,ebx
c001181b:	83 c4 10             	add    esp,0x10
c001181e:	5b                   	pop    ebx
c001181f:	5e                   	pop    esi
c0011820:	5f                   	pop    edi
c0011821:	c3                   	ret    

c0011822 <CmClose(Reghive_Tag*)>:
c0011822:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011826:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001182a:	74 0b                	je     c0011837 <CmClose(Reghive_Tag*)+0x15>
c001182c:	8b 00                	mov    eax,DWORD PTR [eax]
c001182e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011832:	e9 57 94 ff ff       	jmp    c000ac8e <File::close()>
c0011837:	c3                   	ret    

c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0011838:	57                   	push   edi
c0011839:	56                   	push   esi
c001183a:	53                   	push   ebx
c001183b:	83 ec 10             	sub    esp,0x10
c001183e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011842:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0011846:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001184a:	80 7f 04 00          	cmp    BYTE PTR [edi+0x4],0x0
c001184e:	74 4f                	je     c001189f <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x67>
c0011850:	50                   	push   eax
c0011851:	6b c3 2b             	imul   eax,ebx,0x2b
c0011854:	99                   	cdq    
c0011855:	52                   	push   edx
c0011856:	50                   	push   eax
c0011857:	ff 37                	push   DWORD PTR [edi]
c0011859:	e8 90 94 ff ff       	call   c000acee <File::seek(unsigned long long)>
c001185e:	5a                   	pop    edx
c001185f:	8b 07                	mov    eax,DWORD PTR [edi]
c0011861:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011865:	8b 10                	mov    edx,DWORD PTR [eax]
c0011867:	51                   	push   ecx
c0011868:	56                   	push   esi
c0011869:	6a 00                	push   0x0
c001186b:	6a 2b                	push   0x2b
c001186d:	50                   	push   eax
c001186e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011871:	83 c4 20             	add    esp,0x20
c0011874:	85 db                	test   ebx,ebx
c0011876:	74 27                	je     c001189f <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x67>
c0011878:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001187a:	89 c8                	mov    eax,ecx
c001187c:	85 c9                	test   ecx,ecx
c001187e:	74 1d                	je     c001189d <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x65>
c0011880:	6a 00                	push   0x0
c0011882:	b8 49 91 17 17       	mov    eax,0x17179149
c0011887:	68 00 28 6b ee       	push   0xee6b2800
c001188c:	f7 e1                	mul    ecx
c001188e:	52                   	push   edx
c001188f:	50                   	push   eax
c0011890:	e8 1b c3 00 00       	call   c001dbb0 <__umoddi3>
c0011895:	83 c4 10             	add    esp,0x10
c0011898:	6b cb 13             	imul   ecx,ebx,0x13
c001189b:	29 c8                	sub    eax,ecx
c001189d:	89 06                	mov    DWORD PTR [esi],eax
c001189f:	83 c4 10             	add    esp,0x10
c00118a2:	5b                   	pop    ebx
c00118a3:	5e                   	pop    esi
c00118a4:	5f                   	pop    edi
c00118a5:	c3                   	ret    

c00118a6 <CmGetString(Reghive_Tag*, int, char*)>:
c00118a6:	55                   	push   ebp
c00118a7:	57                   	push   edi
c00118a8:	56                   	push   esi
c00118a9:	53                   	push   ebx
c00118aa:	31 db                	xor    ebx,ebx
c00118ac:	83 ec 70             	sub    esp,0x70
c00118af:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00118b6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00118ba:	50                   	push   eax
c00118bb:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00118c2:	55                   	push   ebp
c00118c3:	e8 70 ff ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00118c8:	83 c4 10             	add    esp,0x10
c00118cb:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c00118d0:	c1 e0 08             	shl    eax,0x8
c00118d3:	89 c2                	mov    edx,eax
c00118d5:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00118da:	09 d0                	or     eax,edx
c00118dc:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00118e1:	c1 e0 08             	shl    eax,0x8
c00118e4:	09 d0                	or     eax,edx
c00118e6:	74 25                	je     c001190d <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00118e8:	6b fb 0d             	imul   edi,ebx,0xd
c00118eb:	52                   	push   edx
c00118ec:	8d 54 24 39          	lea    edx,[esp+0x39]
c00118f0:	52                   	push   edx
c00118f1:	50                   	push   eax
c00118f2:	55                   	push   ebp
c00118f3:	e8 40 ff ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00118f8:	8d 74 24 49          	lea    esi,[esp+0x49]
c00118fc:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0011903:	b9 27 00 00 00       	mov    ecx,0x27
c0011908:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001190a:	83 c4 10             	add    esp,0x10
c001190d:	83 c3 03             	add    ebx,0x3
c0011910:	83 fb 15             	cmp    ebx,0x15
c0011913:	75 b6                	jne    c00118cb <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0011915:	83 c4 6c             	add    esp,0x6c
c0011918:	5b                   	pop    ebx
c0011919:	5e                   	pop    esi
c001191a:	5f                   	pop    edi
c001191b:	5d                   	pop    ebp
c001191c:	c3                   	ret    

c001191d <CmEnterDirectory(Reghive_Tag*, int)>:
c001191d:	83 ec 40             	sub    esp,0x40
c0011920:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011924:	50                   	push   eax
c0011925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011929:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001192d:	e8 06 ff ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011932:	83 c4 10             	add    esp,0x10
c0011935:	83 c8 ff             	or     eax,0xffffffff
c0011938:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c001193d:	75 19                	jne    c0011958 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c001193f:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011944:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011949:	c1 e0 08             	shl    eax,0x8
c001194c:	09 c2                	or     edx,eax
c001194e:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0011953:	c1 e0 10             	shl    eax,0x10
c0011956:	09 d0                	or     eax,edx
c0011958:	83 c4 3c             	add    esp,0x3c
c001195b:	c3                   	ret    

c001195c <CmGetNext(Reghive_Tag*, int)>:
c001195c:	83 ec 40             	sub    esp,0x40
c001195f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011963:	50                   	push   eax
c0011964:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011968:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001196c:	e8 c7 fe ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011971:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0011976:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001197b:	c1 e0 08             	shl    eax,0x8
c001197e:	09 c2                	or     edx,eax
c0011980:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0011985:	83 c4 4c             	add    esp,0x4c
c0011988:	c1 e0 10             	shl    eax,0x10
c001198b:	09 d0                	or     eax,edx
c001198d:	c3                   	ret    

c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c001198e:	55                   	push   ebp
c001198f:	57                   	push   edi
c0011990:	56                   	push   esi
c0011991:	53                   	push   ebx
c0011992:	83 ec 1c             	sub    esp,0x1c
c0011995:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0011999:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001199d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00119a1:	74 69                	je     c0011a0c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x7e>
c00119a3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00119a8:	74 3c                	je     c00119e6 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x58>
c00119aa:	31 d2                	xor    edx,edx
c00119ac:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00119af:	89 d7                	mov    edi,edx
c00119b1:	09 c7                	or     edi,eax
c00119b3:	74 2e                	je     c00119e3 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x55>
c00119b5:	6b 74 24 34 13       	imul   esi,DWORD PTR [esp+0x34],0x13
c00119ba:	6a 00                	push   0x0
c00119bc:	89 f7                	mov    edi,esi
c00119be:	68 00 28 6b ee       	push   0xee6b2800
c00119c3:	c1 ff 1f             	sar    edi,0x1f
c00119c6:	01 f0                	add    eax,esi
c00119c8:	be f9 e0 66 d1       	mov    esi,0xd166e0f9
c00119cd:	11 fa                	adc    edx,edi
c00119cf:	69 ca f9 e0 66 d1    	imul   ecx,edx,0xd166e0f9
c00119d5:	f7 e6                	mul    esi
c00119d7:	01 ca                	add    edx,ecx
c00119d9:	52                   	push   edx
c00119da:	50                   	push   eax
c00119db:	e8 d0 c1 00 00       	call   c001dbb0 <__umoddi3>
c00119e0:	83 c4 10             	add    esp,0x10
c00119e3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00119e6:	50                   	push   eax
c00119e7:	6b 44 24 38 2b       	imul   eax,DWORD PTR [esp+0x38],0x2b
c00119ec:	99                   	cdq    
c00119ed:	52                   	push   edx
c00119ee:	50                   	push   eax
c00119ef:	ff 33                	push   DWORD PTR [ebx]
c00119f1:	e8 f8 92 ff ff       	call   c000acee <File::seek(unsigned long long)>
c00119f6:	5a                   	pop    edx
c00119f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00119f9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00119fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00119ff:	51                   	push   ecx
c0011a00:	55                   	push   ebp
c0011a01:	6a 00                	push   0x0
c0011a03:	6a 2b                	push   0x2b
c0011a05:	50                   	push   eax
c0011a06:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011a09:	83 c4 20             	add    esp,0x20
c0011a0c:	83 c4 1c             	add    esp,0x1c
c0011a0f:	5b                   	pop    ebx
c0011a10:	5e                   	pop    esi
c0011a11:	5f                   	pop    edi
c0011a12:	5d                   	pop    ebp
c0011a13:	c3                   	ret    

c0011a14 <CmFreeExtent(Reghive_Tag*, int)>:
c0011a14:	53                   	push   ebx
c0011a15:	83 ec 3c             	sub    esp,0x3c
c0011a18:	6a 2b                	push   0x2b
c0011a1a:	6a 00                	push   0x0
c0011a1c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0011a20:	53                   	push   ebx
c0011a21:	e8 9a ea fe ff       	call   c00004c0 <memset>
c0011a26:	83 c4 0c             	add    esp,0xc
c0011a29:	53                   	push   ebx
c0011a2a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a2e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011a32:	e8 57 ff ff ff       	call   c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011a37:	83 c4 48             	add    esp,0x48
c0011a3a:	5b                   	pop    ebx
c0011a3b:	c3                   	ret    

c0011a3c <CmUpdateHeader(Reghive_Tag*)>:
c0011a3c:	83 ec 0c             	sub    esp,0xc
c0011a3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a43:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0011a47:	74 10                	je     c0011a59 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0011a49:	52                   	push   edx
c0011a4a:	8d 50 05             	lea    edx,[eax+0x5]
c0011a4d:	52                   	push   edx
c0011a4e:	6a 00                	push   0x0
c0011a50:	50                   	push   eax
c0011a51:	e8 38 ff ff ff       	call   c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011a56:	83 c4 10             	add    esp,0x10
c0011a59:	83 c4 0c             	add    esp,0xc
c0011a5c:	c3                   	ret    

c0011a5d <CmExpand(Reghive_Tag*, int)>:
c0011a5d:	57                   	push   edi
c0011a5e:	56                   	push   esi
c0011a5f:	83 ce ff             	or     esi,0xffffffff
c0011a62:	53                   	push   ebx
c0011a63:	83 ec 30             	sub    esp,0x30
c0011a66:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011a6a:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0011a6e:	74 5f                	je     c0011acf <CmExpand(Reghive_Tag*, int)+0x72>
c0011a70:	31 d2                	xor    edx,edx
c0011a72:	31 f6                	xor    esi,esi
c0011a74:	50                   	push   eax
c0011a75:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0011a79:	52                   	push   edx
c0011a7a:	50                   	push   eax
c0011a7b:	ff 33                	push   DWORD PTR [ebx]
c0011a7d:	e8 6c 92 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0011a82:	83 c4 0c             	add    esp,0xc
c0011a85:	6a 2b                	push   0x2b
c0011a87:	6a 00                	push   0x0
c0011a89:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0011a8d:	57                   	push   edi
c0011a8e:	e8 2d ea fe ff       	call   c00004c0 <memset>
c0011a93:	83 c4 10             	add    esp,0x10
c0011a96:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011a9a:	7d 1b                	jge    c0011ab7 <CmExpand(Reghive_Tag*, int)+0x5a>
c0011a9c:	83 ec 0c             	sub    esp,0xc
c0011a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011aa1:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0011aa5:	8b 10                	mov    edx,DWORD PTR [eax]
c0011aa7:	46                   	inc    esi
c0011aa8:	51                   	push   ecx
c0011aa9:	57                   	push   edi
c0011aaa:	6a 00                	push   0x0
c0011aac:	6a 2b                	push   0x2b
c0011aae:	50                   	push   eax
c0011aaf:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0011ab2:	83 c4 20             	add    esp,0x20
c0011ab5:	eb df                	jmp    c0011a96 <CmExpand(Reghive_Tag*, int)+0x39>
c0011ab7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011abb:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0011abe:	83 ec 0c             	sub    esp,0xc
c0011ac1:	01 f2                	add    edx,esi
c0011ac3:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0011ac6:	53                   	push   ebx
c0011ac7:	e8 70 ff ff ff       	call   c0011a3c <CmUpdateHeader(Reghive_Tag*)>
c0011acc:	83 c4 10             	add    esp,0x10
c0011acf:	83 c4 30             	add    esp,0x30
c0011ad2:	89 f0                	mov    eax,esi
c0011ad4:	5b                   	pop    ebx
c0011ad5:	5e                   	pop    esi
c0011ad6:	5f                   	pop    edi
c0011ad7:	c3                   	ret    

c0011ad8 <CmFindUnusedExtent(Reghive_Tag*)>:
c0011ad8:	55                   	push   ebp
c0011ad9:	57                   	push   edi
c0011ada:	56                   	push   esi
c0011adb:	53                   	push   ebx
c0011adc:	83 cb ff             	or     ebx,0xffffffff
c0011adf:	83 ec 1c             	sub    esp,0x1c
c0011ae2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011ae6:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0011aea:	74 68                	je     c0011b54 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011aec:	be 2b 00 00 00       	mov    esi,0x2b
c0011af1:	51                   	push   ecx
c0011af2:	31 ff                	xor    edi,edi
c0011af4:	6a 00                	push   0x0
c0011af6:	31 db                	xor    ebx,ebx
c0011af8:	6a 00                	push   0x0
c0011afa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011afd:	e8 ec 91 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0011b02:	83 c4 10             	add    esp,0x10
c0011b05:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0011b08:	76 3b                	jbe    c0011b45 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0011b0a:	83 ec 0c             	sub    esp,0xc
c0011b0d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0011b10:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011b14:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b16:	51                   	push   ecx
c0011b17:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0011b1b:	51                   	push   ecx
c0011b1c:	6a 00                	push   0x0
c0011b1e:	6a 01                	push   0x1
c0011b20:	50                   	push   eax
c0011b21:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b24:	83 c4 20             	add    esp,0x20
c0011b27:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b2c:	74 26                	je     c0011b54 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0011b2e:	43                   	inc    ebx
c0011b2f:	52                   	push   edx
c0011b30:	57                   	push   edi
c0011b31:	56                   	push   esi
c0011b32:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0011b35:	e8 b4 91 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0011b3a:	83 c6 2b             	add    esi,0x2b
c0011b3d:	83 d7 00             	adc    edi,0x0
c0011b40:	83 c4 10             	add    esp,0x10
c0011b43:	eb c0                	jmp    c0011b05 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0011b45:	50                   	push   eax
c0011b46:	50                   	push   eax
c0011b47:	6a 40                	push   0x40
c0011b49:	55                   	push   ebp
c0011b4a:	e8 0e ff ff ff       	call   c0011a5d <CmExpand(Reghive_Tag*, int)>
c0011b4f:	83 c4 10             	add    esp,0x10
c0011b52:	89 c3                	mov    ebx,eax
c0011b54:	83 c4 1c             	add    esp,0x1c
c0011b57:	89 d8                	mov    eax,ebx
c0011b59:	5b                   	pop    ebx
c0011b5a:	5e                   	pop    esi
c0011b5b:	5f                   	pop    edi
c0011b5c:	5d                   	pop    ebp
c0011b5d:	c3                   	ret    

c0011b5e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0011b5e:	55                   	push   ebp
c0011b5f:	57                   	push   edi
c0011b60:	56                   	push   esi
c0011b61:	53                   	push   ebx
c0011b62:	81 ec 88 00 00 00    	sub    esp,0x88
c0011b68:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0011b6f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011b76:	e8 5d ff ff ff       	call   c0011ad8 <CmFindUnusedExtent(Reghive_Tag*)>
c0011b7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b7f:	83 c4 0c             	add    esp,0xc
c0011b82:	6a 2b                	push   0x2b
c0011b84:	6a 00                	push   0x0
c0011b86:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0011b8a:	55                   	push   ebp
c0011b8b:	e8 30 e9 fe ff       	call   c00004c0 <memset>
c0011b90:	83 c4 10             	add    esp,0x10
c0011b93:	85 db                	test   ebx,ebx
c0011b95:	74 12                	je     c0011ba9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0011b97:	51                   	push   ecx
c0011b98:	55                   	push   ebp
c0011b99:	53                   	push   ebx
c0011b9a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011ba1:	e8 92 fc ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ba6:	83 c4 10             	add    esp,0x10
c0011ba9:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0011bad:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011bb4:	b9 2b 00 00 00       	mov    ecx,0x2b
c0011bb9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011bbb:	85 db                	test   ebx,ebx
c0011bbd:	74 49                	je     c0011c08 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0011bbf:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0011bc4:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0011bc9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bcd:	c1 e0 08             	shl    eax,0x8
c0011bd0:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0011bd6:	09 c8                	or     eax,ecx
c0011bd8:	74 11                	je     c0011beb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0011bda:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0011bde:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0011be2:	c1 e8 10             	shr    eax,0x10
c0011be5:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0011be9:	eb 0f                	jmp    c0011bfa <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0011beb:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011bf0:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011bf5:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011bfa:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0011bfe:	c1 ea 08             	shr    edx,0x8
c0011c01:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0011c06:	eb 0f                	jmp    c0011c17 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0011c08:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0011c0d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0011c12:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0011c17:	52                   	push   edx
c0011c18:	8d 44 24 49          	lea    eax,[esp+0x49]
c0011c1c:	50                   	push   eax
c0011c1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011c21:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011c28:	e8 61 fd ff ff       	call   c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011c2d:	83 c4 10             	add    esp,0x10
c0011c30:	85 db                	test   ebx,ebx
c0011c32:	74 12                	je     c0011c46 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0011c34:	50                   	push   eax
c0011c35:	55                   	push   ebp
c0011c36:	53                   	push   ebx
c0011c37:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011c3e:	e8 4b fd ff ff       	call   c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011c43:	83 c4 10             	add    esp,0x10
c0011c46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c4a:	83 c4 7c             	add    esp,0x7c
c0011c4d:	5b                   	pop    ebx
c0011c4e:	5e                   	pop    esi
c0011c4f:	5f                   	pop    edi
c0011c50:	5d                   	pop    ebp
c0011c51:	c3                   	ret    

c0011c52 <CmSetString(Reghive_Tag*, int, char const*)>:
c0011c52:	55                   	push   ebp
c0011c53:	57                   	push   edi
c0011c54:	56                   	push   esi
c0011c55:	53                   	push   ebx
c0011c56:	bb 27 00 00 00       	mov    ebx,0x27
c0011c5b:	81 ec 88 00 00 00    	sub    esp,0x88
c0011c61:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0011c68:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0011c6f:	e8 bc e8 fe ff       	call   c0000530 <strlen>
c0011c74:	8d 48 26             	lea    ecx,[eax+0x26]
c0011c77:	89 c8                	mov    eax,ecx
c0011c79:	99                   	cdq    
c0011c7a:	f7 fb                	idiv   ebx
c0011c7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011c80:	83 c4 10             	add    esp,0x10
c0011c83:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0011c89:	7e 10                	jle    c0011c9b <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0011c8b:	83 ec 0c             	sub    esp,0xc
c0011c8e:	68 7b 02 02 c0       	push   0xc002027b
c0011c93:	e8 17 e7 ff ff       	call   c00103af <KePanic(char const*)>
c0011c98:	83 c4 10             	add    esp,0x10
c0011c9b:	31 ff                	xor    edi,edi
c0011c9d:	50                   	push   eax
c0011c9e:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0011ca2:	53                   	push   ebx
c0011ca3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011caa:	56                   	push   esi
c0011cab:	e8 88 fb ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011cb0:	83 c4 10             	add    esp,0x10
c0011cb3:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0011cb7:	89 d0                	mov    eax,edx
c0011cb9:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0011cbd:	c1 e0 08             	shl    eax,0x8
c0011cc0:	09 c2                	or     edx,eax
c0011cc2:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0011cc6:	c1 e2 08             	shl    edx,0x8
c0011cc9:	09 c2                	or     edx,eax
c0011ccb:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0011ccf:	7e 76                	jle    c0011d47 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0011cd1:	85 d2                	test   edx,edx
c0011cd3:	75 25                	jne    c0011cfa <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0011cd5:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0011cda:	8d 44 24 45          	lea    eax,[esp+0x45]
c0011cde:	50                   	push   eax
c0011cdf:	6a 00                	push   0x0
c0011ce1:	6a 00                	push   0x0
c0011ce3:	56                   	push   esi
c0011ce4:	e8 75 fe ff ff       	call   c0011b5e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0011ce9:	83 c4 10             	add    esp,0x10
c0011cec:	89 c2                	mov    edx,eax
c0011cee:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0011cf1:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0011cf4:	c1 f8 10             	sar    eax,0x10
c0011cf7:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0011cfa:	55                   	push   ebp
c0011cfb:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0011cff:	55                   	push   ebp
c0011d00:	52                   	push   edx
c0011d01:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0011d05:	56                   	push   esi
c0011d06:	e8 2d fb ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011d0b:	83 c4 0c             	add    esp,0xc
c0011d0e:	6a 27                	push   0x27
c0011d10:	6a 00                	push   0x0
c0011d12:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011d16:	51                   	push   ecx
c0011d17:	e8 a4 e7 fe ff       	call   c00004c0 <memset>
c0011d1c:	83 c4 0c             	add    esp,0xc
c0011d1f:	6b c7 27             	imul   eax,edi,0x27
c0011d22:	6a 27                	push   0x27
c0011d24:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0011d2b:	50                   	push   eax
c0011d2c:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0011d30:	51                   	push   ecx
c0011d31:	e8 ea e8 fe ff       	call   c0000620 <strncpy>
c0011d36:	83 c4 0c             	add    esp,0xc
c0011d39:	55                   	push   ebp
c0011d3a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011d3e:	52                   	push   edx
c0011d3f:	56                   	push   esi
c0011d40:	e8 49 fc ff ff       	call   c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011d45:	eb 19                	jmp    c0011d60 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0011d47:	85 d2                	test   edx,edx
c0011d49:	74 18                	je     c0011d63 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0011d4b:	51                   	push   ecx
c0011d4c:	51                   	push   ecx
c0011d4d:	52                   	push   edx
c0011d4e:	56                   	push   esi
c0011d4f:	e8 c0 fc ff ff       	call   c0011a14 <CmFreeExtent(Reghive_Tag*, int)>
c0011d54:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0011d58:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0011d5c:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0011d60:	83 c4 10             	add    esp,0x10
c0011d63:	47                   	inc    edi
c0011d64:	83 c3 03             	add    ebx,0x3
c0011d67:	83 ff 07             	cmp    edi,0x7
c0011d6a:	0f 85 43 ff ff ff    	jne    c0011cb3 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0011d70:	50                   	push   eax
c0011d71:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0011d75:	50                   	push   eax
c0011d76:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0011d7d:	56                   	push   esi
c0011d7e:	e8 0b fc ff ff       	call   c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011d83:	81 c4 8c 00 00 00    	add    esp,0x8c
c0011d89:	5b                   	pop    ebx
c0011d8a:	5e                   	pop    esi
c0011d8b:	5f                   	pop    edi
c0011d8c:	5d                   	pop    ebp
c0011d8d:	c3                   	ret    

c0011d8e <CmGetMatch(char*, char*, bool, bool*)>:
c0011d8e:	56                   	push   esi
c0011d8f:	53                   	push   ebx
c0011d90:	50                   	push   eax
c0011d91:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011d95:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0011d9a:	74 25                	je     c0011dc1 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0011d9c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011d9f:	31 db                	xor    ebx,ebx
c0011da1:	50                   	push   eax
c0011da2:	50                   	push   eax
c0011da3:	8d 04 9d e0 15 02 c0 	lea    eax,[ebx*4-0x3ffdea20]
c0011daa:	50                   	push   eax
c0011dab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011daf:	e8 1c e9 fe ff       	call   c00006d0 <strcmp>
c0011db4:	83 c4 10             	add    esp,0x10
c0011db7:	85 c0                	test   eax,eax
c0011db9:	74 2e                	je     c0011de9 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011dbb:	43                   	inc    ebx
c0011dbc:	83 fb 3f             	cmp    ebx,0x3f
c0011dbf:	75 e0                	jne    c0011da1 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0011dc1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011dc4:	31 db                	xor    ebx,ebx
c0011dc6:	8d 04 9d e0 15 02 c0 	lea    eax,[ebx*4-0x3ffdea20]
c0011dcd:	51                   	push   ecx
c0011dce:	51                   	push   ecx
c0011dcf:	50                   	push   eax
c0011dd0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011dd4:	e8 f7 e8 fe ff       	call   c00006d0 <strcmp>
c0011dd9:	83 c4 10             	add    esp,0x10
c0011ddc:	85 c0                	test   eax,eax
c0011dde:	74 09                	je     c0011de9 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0011de0:	43                   	inc    ebx
c0011de1:	83 fb 3f             	cmp    ebx,0x3f
c0011de4:	75 e0                	jne    c0011dc6 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0011de6:	83 cb ff             	or     ebx,0xffffffff
c0011de9:	89 d8                	mov    eax,ebx
c0011deb:	5a                   	pop    edx
c0011dec:	5b                   	pop    ebx
c0011ded:	5e                   	pop    esi
c0011dee:	c3                   	ret    

c0011def <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0011def:	55                   	push   ebp
c0011df0:	31 c0                	xor    eax,eax
c0011df2:	57                   	push   edi
c0011df3:	56                   	push   esi
c0011df4:	53                   	push   ebx
c0011df5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011df9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011dfd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011dff:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011e03:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0011e06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e0a:	83 fd 1f             	cmp    ebp,0x1f
c0011e0d:	7f 0b                	jg     c0011e1a <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0011e0f:	0f b6 c2             	movzx  eax,dl
c0011e12:	d3 e0                	shl    eax,cl
c0011e14:	09 07                	or     DWORD PTR [edi],eax
c0011e16:	b0 01                	mov    al,0x1
c0011e18:	01 33                	add    DWORD PTR [ebx],esi
c0011e1a:	5b                   	pop    ebx
c0011e1b:	5e                   	pop    esi
c0011e1c:	5f                   	pop    edi
c0011e1d:	5d                   	pop    ebp
c0011e1e:	c3                   	ret    

c0011e1f <CmGetShift(unsigned int*, int*, int, bool*)>:
c0011e1f:	57                   	push   edi
c0011e20:	56                   	push   esi
c0011e21:	53                   	push   ebx
c0011e22:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011e26:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e2a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0011e2e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011e32:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0011e34:	7c 17                	jl     c0011e4d <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0011e36:	8b 17                	mov    edx,DWORD PTR [edi]
c0011e38:	b8 01 00 00 00       	mov    eax,0x1
c0011e3d:	d3 e0                	shl    eax,cl
c0011e3f:	48                   	dec    eax
c0011e40:	21 d0                	and    eax,edx
c0011e42:	d3 ea                	shr    edx,cl
c0011e44:	89 17                	mov    DWORD PTR [edi],edx
c0011e46:	29 0b                	sub    DWORD PTR [ebx],ecx
c0011e48:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0011e4b:	eb 05                	jmp    c0011e52 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0011e4d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011e50:	31 c0                	xor    eax,eax
c0011e52:	5b                   	pop    ebx
c0011e53:	5e                   	pop    esi
c0011e54:	5f                   	pop    edi
c0011e55:	c3                   	ret    

c0011e56 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0011e56:	83 ec 40             	sub    esp,0x40
c0011e59:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011e5d:	50                   	push   eax
c0011e5e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e62:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011e66:	e8 cd f9 ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011e6b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011e6f:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0011e73:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0011e77:	89 10                	mov    DWORD PTR [eax],edx
c0011e79:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0011e7c:	83 c4 4c             	add    esp,0x4c
c0011e7f:	c3                   	ret    

c0011e80 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0011e80:	55                   	push   ebp
c0011e81:	57                   	push   edi
c0011e82:	56                   	push   esi
c0011e83:	53                   	push   ebx
c0011e84:	83 ec 40             	sub    esp,0x40
c0011e87:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0011e8b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0011e8f:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0011e93:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0011e97:	53                   	push   ebx
c0011e98:	56                   	push   esi
c0011e99:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011e9d:	e8 96 f9 ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011ea2:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0011ea6:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0011eaa:	83 c4 0c             	add    esp,0xc
c0011ead:	53                   	push   ebx
c0011eae:	56                   	push   esi
c0011eaf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011eb3:	e8 d6 fa ff ff       	call   c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0011eb8:	83 c4 4c             	add    esp,0x4c
c0011ebb:	5b                   	pop    ebx
c0011ebc:	5e                   	pop    esi
c0011ebd:	5f                   	pop    edi
c0011ebe:	5d                   	pop    ebp
c0011ebf:	c3                   	ret    

c0011ec0 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0011ec0:	55                   	push   ebp
c0011ec1:	57                   	push   edi
c0011ec2:	56                   	push   esi
c0011ec3:	31 f6                	xor    esi,esi
c0011ec5:	53                   	push   ebx
c0011ec6:	31 db                	xor    ebx,ebx
c0011ec8:	83 ec 40             	sub    esp,0x40
c0011ecb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011ed3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011edb:	6a 12                	push   0x12
c0011edd:	68 ee 00 00 00       	push   0xee
c0011ee2:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011ee6:	e8 d5 e5 fe ff       	call   c00004c0 <memset>
c0011eeb:	83 c4 10             	add    esp,0x10
c0011eee:	6a 08                	push   0x8
c0011ef0:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011ef4:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0011ef8:	50                   	push   eax
c0011ef9:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0011efd:	57                   	push   edi
c0011efe:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0011f02:	55                   	push   ebp
c0011f03:	e8 e7 fe ff ff       	call   c0011def <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0011f08:	83 c4 10             	add    esp,0x10
c0011f0b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0011f0f:	50                   	push   eax
c0011f10:	6a 06                	push   0x6
c0011f12:	57                   	push   edi
c0011f13:	55                   	push   ebp
c0011f14:	e8 06 ff ff ff       	call   c0011e1f <CmGetShift(unsigned int*, int*, int, bool*)>
c0011f19:	83 c4 10             	add    esp,0x10
c0011f1c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011f21:	74 07                	je     c0011f2a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0011f23:	46                   	inc    esi
c0011f24:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0011f28:	eb e1                	jmp    c0011f0b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0011f2a:	43                   	inc    ebx
c0011f2b:	83 fb 12             	cmp    ebx,0x12
c0011f2e:	75 be                	jne    c0011eee <CmConvertFromInternalFilename(unsigned char const*, char*)+0x2e>
c0011f30:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011f34:	31 db                	xor    ebx,ebx
c0011f36:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011f39:	50                   	push   eax
c0011f3a:	50                   	push   eax
c0011f3b:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0011f40:	43                   	inc    ebx
c0011f41:	8d 04 85 e0 15 02 c0 	lea    eax,[eax*4-0x3ffdea20]
c0011f48:	50                   	push   eax
c0011f49:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0011f4d:	e8 5e e8 fe ff       	call   c00007b0 <strcat>
c0011f52:	83 c4 10             	add    esp,0x10
c0011f55:	83 fb 18             	cmp    ebx,0x18
c0011f58:	75 df                	jne    c0011f39 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0011f5a:	83 c4 3c             	add    esp,0x3c
c0011f5d:	31 c0                	xor    eax,eax
c0011f5f:	5b                   	pop    ebx
c0011f60:	5e                   	pop    esi
c0011f61:	5f                   	pop    edi
c0011f62:	5d                   	pop    ebp
c0011f63:	c3                   	ret    

c0011f64 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0011f64:	83 ec 40             	sub    esp,0x40
c0011f67:	8d 44 24 09          	lea    eax,[esp+0x9]
c0011f6b:	50                   	push   eax
c0011f6c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f70:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011f74:	e8 bf f8 ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0011f79:	58                   	pop    eax
c0011f7a:	5a                   	pop    edx
c0011f7b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0011f7f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0011f83:	50                   	push   eax
c0011f84:	e8 37 ff ff ff       	call   c0011ec0 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0011f89:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0011f8e:	83 c4 4c             	add    esp,0x4c
c0011f91:	c3                   	ret    

c0011f92 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0011f92:	55                   	push   ebp
c0011f93:	57                   	push   edi
c0011f94:	56                   	push   esi
c0011f95:	53                   	push   ebx
c0011f96:	31 db                	xor    ebx,ebx
c0011f98:	83 ec 70             	sub    esp,0x70
c0011f9b:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0011fa2:	6a 30                	push   0x30
c0011fa4:	6a 00                	push   0x0
c0011fa6:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0011faa:	56                   	push   esi
c0011fab:	e8 10 e5 fe ff       	call   c00004c0 <memset>
c0011fb0:	83 c4 10             	add    esp,0x10
c0011fb3:	83 ec 0c             	sub    esp,0xc
c0011fb6:	57                   	push   edi
c0011fb7:	e8 74 e5 fe ff       	call   c0000530 <strlen>
c0011fbc:	83 c4 10             	add    esp,0x10
c0011fbf:	39 d8                	cmp    eax,ebx
c0011fc1:	76 16                	jbe    c0011fd9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0011fc3:	83 ec 0c             	sub    esp,0xc
c0011fc6:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0011fca:	50                   	push   eax
c0011fcb:	e8 d0 e8 fe ff       	call   c00008a0 <toupper>
c0011fd0:	83 c4 10             	add    esp,0x10
c0011fd3:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0011fd6:	43                   	inc    ebx
c0011fd7:	eb da                	jmp    c0011fb3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0011fd9:	31 f6                	xor    esi,esi
c0011fdb:	52                   	push   edx
c0011fdc:	31 ff                	xor    edi,edi
c0011fde:	6a 18                	push   0x18
c0011fe0:	6a 3f                	push   0x3f
c0011fe2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011fe6:	50                   	push   eax
c0011fe7:	e8 d4 e4 fe ff       	call   c00004c0 <memset>
c0011fec:	83 c4 10             	add    esp,0x10
c0011fef:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0011ff3:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0011ff7:	84 c0                	test   al,al
c0011ff9:	0f 84 b0 00 00 00    	je     c00120af <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0011fff:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012003:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0012008:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001200c:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0012011:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012014:	83 ec 0c             	sub    esp,0xc
c0012017:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c001201b:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c001201f:	53                   	push   ebx
c0012020:	e8 0b e5 fe ff       	call   c0000530 <strlen>
c0012025:	83 c4 10             	add    esp,0x10
c0012028:	85 c0                	test   eax,eax
c001202a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001202e:	74 0b                	je     c001203b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012030:	50                   	push   eax
c0012031:	6a 01                	push   0x1
c0012033:	53                   	push   ebx
c0012034:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012038:	50                   	push   eax
c0012039:	eb 0a                	jmp    c0012045 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c001203b:	50                   	push   eax
c001203c:	6a 00                	push   0x0
c001203e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012042:	50                   	push   eax
c0012043:	6a 00                	push   0x0
c0012045:	e8 44 fd ff ff       	call   c0011d8e <CmGetMatch(char*, char*, bool, bool*)>
c001204a:	83 c4 10             	add    esp,0x10
c001204d:	83 f8 ff             	cmp    eax,0xffffffff
c0012050:	75 1a                	jne    c001206c <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012052:	83 ec 0c             	sub    esp,0xc
c0012055:	68 90 02 02 c0       	push   0xc0020290
c001205a:	e8 50 e3 ff ff       	call   c00103af <KePanic(char const*)>
c001205f:	83 c4 10             	add    esp,0x10
c0012062:	b8 02 00 00 00       	mov    eax,0x2
c0012067:	e9 bc 00 00 00       	jmp    c0012128 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001206c:	83 ff 18             	cmp    edi,0x18
c001206f:	75 1a                	jne    c001208b <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012071:	83 ec 0c             	sub    esp,0xc
c0012074:	68 a5 02 02 c0       	push   0xc00202a5
c0012079:	e8 31 e3 ff ff       	call   c00103af <KePanic(char const*)>
c001207e:	83 c4 10             	add    esp,0x10
c0012081:	b8 01 00 00 00       	mov    eax,0x1
c0012086:	e9 9d 00 00 00       	jmp    c0012128 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001208b:	47                   	inc    edi
c001208c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012091:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012095:	74 02                	je     c0012099 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0012097:	89 ee                	mov    esi,ebp
c0012099:	83 ec 0c             	sub    esp,0xc
c001209c:	53                   	push   ebx
c001209d:	e8 8e e4 fe ff       	call   c0000530 <strlen>
c00120a2:	83 c4 10             	add    esp,0x10
c00120a5:	85 c0                	test   eax,eax
c00120a7:	74 06                	je     c00120af <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00120a9:	46                   	inc    esi
c00120aa:	e9 40 ff ff ff       	jmp    c0011fef <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00120af:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00120b7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00120bf:	31 f6                	xor    esi,esi
c00120c1:	50                   	push   eax
c00120c2:	31 ff                	xor    edi,edi
c00120c4:	6a 12                	push   0x12
c00120c6:	68 ee 00 00 00       	push   0xee
c00120cb:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00120d2:	e8 e9 e3 fe ff       	call   c00004c0 <memset>
c00120d7:	83 c4 10             	add    esp,0x10
c00120da:	83 fe 17             	cmp    esi,0x17
c00120dd:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00120e1:	7e 26                	jle    c0012109 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00120e3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00120e7:	50                   	push   eax
c00120e8:	6a 08                	push   0x8
c00120ea:	55                   	push   ebp
c00120eb:	53                   	push   ebx
c00120ec:	e8 2e fd ff ff       	call   c0011e1f <CmGetShift(unsigned int*, int*, int, bool*)>
c00120f1:	83 c4 10             	add    esp,0x10
c00120f4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00120f9:	74 26                	je     c0012121 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00120fb:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012102:	4e                   	dec    esi
c0012103:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012106:	47                   	inc    edi
c0012107:	eb 1c                	jmp    c0012125 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012109:	6a 06                	push   0x6
c001210b:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0012110:	50                   	push   eax
c0012111:	55                   	push   ebp
c0012112:	53                   	push   ebx
c0012113:	e8 d7 fc ff ff       	call   c0011def <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012118:	83 c4 10             	add    esp,0x10
c001211b:	84 c0                	test   al,al
c001211d:	75 06                	jne    c0012125 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001211f:	eb c2                	jmp    c00120e3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0012121:	31 c0                	xor    eax,eax
c0012123:	eb 03                	jmp    c0012128 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012125:	46                   	inc    esi
c0012126:	eb b2                	jmp    c00120da <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0012128:	83 c4 6c             	add    esp,0x6c
c001212b:	5b                   	pop    ebx
c001212c:	5e                   	pop    esi
c001212d:	5f                   	pop    edi
c001212e:	5d                   	pop    ebp
c001212f:	c3                   	ret    

c0012130 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0012130:	53                   	push   ebx
c0012131:	83 ec 3c             	sub    esp,0x3c
c0012134:	6a 2b                	push   0x2b
c0012136:	6a 00                	push   0x0
c0012138:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001213c:	53                   	push   ebx
c001213d:	e8 7e e3 fe ff       	call   c00004c0 <memset>
c0012142:	58                   	pop    eax
c0012143:	5a                   	pop    edx
c0012144:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012148:	50                   	push   eax
c0012149:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001214d:	e8 40 fe ff ff       	call   c0011f92 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012152:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0012157:	83 c4 0c             	add    esp,0xc
c001215a:	6a 15                	push   0x15
c001215c:	6a 00                	push   0x0
c001215e:	8d 44 24 27          	lea    eax,[esp+0x27]
c0012162:	50                   	push   eax
c0012163:	e8 58 e3 fe ff       	call   c00004c0 <memset>
c0012168:	53                   	push   ebx
c0012169:	6a 00                	push   0x0
c001216b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001216f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012173:	e8 e6 f9 ff ff       	call   c0011b5e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012178:	83 c4 58             	add    esp,0x58
c001217b:	5b                   	pop    ebx
c001217c:	c3                   	ret    

c001217d <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001217d:	56                   	push   esi
c001217e:	53                   	push   ebx
c001217f:	83 ec 48             	sub    esp,0x48
c0012182:	6a 12                	push   0x12
c0012184:	68 ff 00 00 00       	push   0xff
c0012189:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001218d:	56                   	push   esi
c001218e:	e8 2d e3 fe ff       	call   c00004c0 <memset>
c0012193:	5a                   	pop    edx
c0012194:	59                   	pop    ecx
c0012195:	56                   	push   esi
c0012196:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001219a:	e8 f3 fd ff ff       	call   c0011f92 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001219f:	83 c4 10             	add    esp,0x10
c00121a2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00121a6:	85 db                	test   ebx,ebx
c00121a8:	74 42                	je     c00121ec <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00121aa:	50                   	push   eax
c00121ab:	8d 44 24 19          	lea    eax,[esp+0x19]
c00121af:	50                   	push   eax
c00121b0:	53                   	push   ebx
c00121b1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00121b5:	e8 7e f6 ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00121ba:	83 c4 0c             	add    esp,0xc
c00121bd:	6a 12                	push   0x12
c00121bf:	8d 44 24 21          	lea    eax,[esp+0x21]
c00121c3:	50                   	push   eax
c00121c4:	56                   	push   esi
c00121c5:	e8 b6 e1 fe ff       	call   c0000380 <memcmp>
c00121ca:	83 c4 10             	add    esp,0x10
c00121cd:	85 c0                	test   eax,eax
c00121cf:	74 1e                	je     c00121ef <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00121d1:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00121d6:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00121db:	c1 e3 08             	shl    ebx,0x8
c00121de:	09 d8                	or     eax,ebx
c00121e0:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00121e5:	c1 e3 10             	shl    ebx,0x10
c00121e8:	09 c3                	or     ebx,eax
c00121ea:	eb ba                	jmp    c00121a6 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00121ec:	83 cb ff             	or     ebx,0xffffffff
c00121ef:	89 d8                	mov    eax,ebx
c00121f1:	83 c4 44             	add    esp,0x44
c00121f4:	5b                   	pop    ebx
c00121f5:	5e                   	pop    esi
c00121f6:	c3                   	ret    

c00121f7 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00121f7:	57                   	push   edi
c00121f8:	56                   	push   esi
c00121f9:	53                   	push   ebx
c00121fa:	83 ec 34             	sub    esp,0x34
c00121fd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0012201:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0012205:	6a 2b                	push   0x2b
c0012207:	6a 00                	push   0x0
c0012209:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001220d:	53                   	push   ebx
c001220e:	e8 ad e2 fe ff       	call   c00004c0 <memset>
c0012213:	58                   	pop    eax
c0012214:	5a                   	pop    edx
c0012215:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012219:	50                   	push   eax
c001221a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001221e:	e8 6f fd ff ff       	call   c0011f92 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012223:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0012227:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001222b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c001222f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012233:	53                   	push   ebx
c0012234:	6a 00                	push   0x0
c0012236:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001223a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001223e:	e8 1b f9 ff ff       	call   c0011b5e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012243:	83 c4 50             	add    esp,0x50
c0012246:	5b                   	pop    ebx
c0012247:	5e                   	pop    esi
c0012248:	5f                   	pop    edi
c0012249:	c3                   	ret    

c001224a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001224a:	57                   	push   edi
c001224b:	56                   	push   esi
c001224c:	53                   	push   ebx
c001224d:	83 ec 34             	sub    esp,0x34
c0012250:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0012254:	6a 2b                	push   0x2b
c0012256:	6a 00                	push   0x0
c0012258:	8d 74 24 11          	lea    esi,[esp+0x11]
c001225c:	56                   	push   esi
c001225d:	e8 5e e2 fe ff       	call   c00004c0 <memset>
c0012262:	58                   	pop    eax
c0012263:	5a                   	pop    edx
c0012264:	8d 44 24 11          	lea    eax,[esp+0x11]
c0012268:	50                   	push   eax
c0012269:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001226d:	e8 20 fd ff ff       	call   c0011f92 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0012272:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0012277:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c001227c:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0012281:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0012286:	56                   	push   esi
c0012287:	6a 00                	push   0x0
c0012289:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001228d:	53                   	push   ebx
c001228e:	e8 cb f8 ff ff       	call   c0011b5e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012293:	83 c4 1c             	add    esp,0x1c
c0012296:	89 c7                	mov    edi,eax
c0012298:	56                   	push   esi
c0012299:	50                   	push   eax
c001229a:	53                   	push   ebx
c001229b:	e8 98 f5 ff ff       	call   c0011838 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00122a0:	59                   	pop    ecx
c00122a1:	58                   	pop    eax
c00122a2:	6a 6c                	push   0x6c
c00122a4:	6a 00                	push   0x0
c00122a6:	6a 00                	push   0x0
c00122a8:	68 b6 02 02 c0       	push   0xc00202b6
c00122ad:	57                   	push   edi
c00122ae:	53                   	push   ebx
c00122af:	e8 43 ff ff ff       	call   c00121f7 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00122b4:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00122b8:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00122bc:	c1 e8 10             	shr    eax,0x10
c00122bf:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00122c3:	83 c4 1c             	add    esp,0x1c
c00122c6:	56                   	push   esi
c00122c7:	57                   	push   edi
c00122c8:	53                   	push   ebx
c00122c9:	e8 c0 f6 ff ff       	call   c001198e <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00122ce:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00122d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00122d8:	c1 e0 08             	shl    eax,0x8
c00122db:	09 c2                	or     edx,eax
c00122dd:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00122e2:	83 c4 40             	add    esp,0x40
c00122e5:	c1 e0 10             	shl    eax,0x10
c00122e8:	5b                   	pop    ebx
c00122e9:	09 d0                	or     eax,edx
c00122eb:	5e                   	pop    esi
c00122ec:	5f                   	pop    edi
c00122ed:	c3                   	ret    

c00122ee <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00122ee:	57                   	push   edi
c00122ef:	56                   	push   esi
c00122f0:	53                   	push   ebx
c00122f1:	81 ec 08 01 00 00    	sub    esp,0x108
c00122f7:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00122fe:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0012305:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0012309:	53                   	push   ebx
c001230a:	e8 e1 e2 fe ff       	call   c00005f0 <strcpy>
c001230f:	59                   	pop    ecx
c0012310:	5e                   	pop    esi
c0012311:	68 63 05 02 c0       	push   0xc0020563
c0012316:	53                   	push   ebx
c0012317:	bb 01 00 00 00       	mov    ebx,0x1
c001231c:	e8 7f e2 fe ff       	call   c00005a0 <strtok>
c0012321:	83 c4 10             	add    esp,0x10
c0012324:	85 c0                	test   eax,eax
c0012326:	74 3b                	je     c0012363 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0012328:	52                   	push   edx
c0012329:	50                   	push   eax
c001232a:	6a 01                	push   0x1
c001232c:	57                   	push   edi
c001232d:	e8 4b fe ff ff       	call   c001217d <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0012332:	59                   	pop    ecx
c0012333:	89 c3                	mov    ebx,eax
c0012335:	5e                   	pop    esi
c0012336:	68 63 05 02 c0       	push   0xc0020563
c001233b:	6a 00                	push   0x0
c001233d:	e8 5e e2 fe ff       	call   c00005a0 <strtok>
c0012342:	83 c4 10             	add    esp,0x10
c0012345:	89 c6                	mov    esi,eax
c0012347:	85 c0                	test   eax,eax
c0012349:	74 18                	je     c0012363 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001234b:	52                   	push   edx
c001234c:	52                   	push   edx
c001234d:	53                   	push   ebx
c001234e:	57                   	push   edi
c001234f:	e8 c9 f5 ff ff       	call   c001191d <CmEnterDirectory(Reghive_Tag*, int)>
c0012354:	83 c4 10             	add    esp,0x10
c0012357:	89 c3                	mov    ebx,eax
c0012359:	83 f8 ff             	cmp    eax,0xffffffff
c001235c:	74 05                	je     c0012363 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001235e:	50                   	push   eax
c001235f:	56                   	push   esi
c0012360:	53                   	push   ebx
c0012361:	eb c9                	jmp    c001232c <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0012363:	81 c4 00 01 00 00    	add    esp,0x100
c0012369:	89 d8                	mov    eax,ebx
c001236b:	5b                   	pop    ebx
c001236c:	5e                   	pop    esi
c001236d:	5f                   	pop    edi
c001236e:	c3                   	ret    

c001236f <CmDisplayTree(Reghive_Tag*, int, int)>:
c001236f:	55                   	push   ebp
c0012370:	57                   	push   edi
c0012371:	56                   	push   esi
c0012372:	53                   	push   ebx
c0012373:	83 ec 5c             	sub    esp,0x5c
c0012376:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c001237a:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c001237e:	85 db                	test   ebx,ebx
c0012380:	0f 8e 84 00 00 00    	jle    c001240a <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0012386:	31 ed                	xor    ebp,ebp
c0012388:	57                   	push   edi
c0012389:	6a 32                	push   0x32
c001238b:	6a 00                	push   0x0
c001238d:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0012391:	57                   	push   edi
c0012392:	e8 29 e1 fe ff       	call   c00004c0 <memset>
c0012397:	83 c4 0c             	add    esp,0xc
c001239a:	57                   	push   edi
c001239b:	53                   	push   ebx
c001239c:	56                   	push   esi
c001239d:	e8 c2 fb ff ff       	call   c0011f64 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00123a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00123a6:	83 c4 10             	add    esp,0x10
c00123a9:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00123ad:	7d 13                	jge    c00123c2 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00123af:	83 ec 0c             	sub    esp,0xc
c00123b2:	45                   	inc    ebp
c00123b3:	68 d0 08 02 c0       	push   0xc00208d0
c00123b8:	e8 3d 82 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00123bd:	83 c4 10             	add    esp,0x10
c00123c0:	eb e7                	jmp    c00123a9 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00123c2:	51                   	push   ecx
c00123c3:	57                   	push   edi
c00123c4:	53                   	push   ebx
c00123c5:	68 bc 02 02 c0       	push   0xc00202bc
c00123ca:	e8 2b 82 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00123cf:	83 c4 10             	add    esp,0x10
c00123d2:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00123d7:	75 1e                	jne    c00123f7 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00123d9:	52                   	push   edx
c00123da:	52                   	push   edx
c00123db:	53                   	push   ebx
c00123dc:	56                   	push   esi
c00123dd:	e8 3b f5 ff ff       	call   c001191d <CmEnterDirectory(Reghive_Tag*, int)>
c00123e2:	83 c4 0c             	add    esp,0xc
c00123e5:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00123e9:	8d 51 04             	lea    edx,[ecx+0x4]
c00123ec:	52                   	push   edx
c00123ed:	50                   	push   eax
c00123ee:	56                   	push   esi
c00123ef:	e8 7b ff ff ff       	call   c001236f <CmDisplayTree(Reghive_Tag*, int, int)>
c00123f4:	83 c4 10             	add    esp,0x10
c00123f7:	50                   	push   eax
c00123f8:	50                   	push   eax
c00123f9:	53                   	push   ebx
c00123fa:	56                   	push   esi
c00123fb:	e8 5c f5 ff ff       	call   c001195c <CmGetNext(Reghive_Tag*, int)>
c0012400:	83 c4 10             	add    esp,0x10
c0012403:	89 c3                	mov    ebx,eax
c0012405:	e9 74 ff ff ff       	jmp    c001237e <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c001240a:	83 c4 5c             	add    esp,0x5c
c001240d:	5b                   	pop    ebx
c001240e:	5e                   	pop    esi
c001240f:	5f                   	pop    edi
c0012410:	5d                   	pop    ebp
c0012411:	c3                   	ret    

c0012412 <CmSplitFinalSlashInPlace(char*)>:
c0012412:	53                   	push   ebx
c0012413:	83 ec 14             	sub    esp,0x14
c0012416:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001241a:	53                   	push   ebx
c001241b:	e8 10 e1 fe ff       	call   c0000530 <strlen>
c0012420:	83 c4 10             	add    esp,0x10
c0012423:	48                   	dec    eax
c0012424:	85 c0                	test   eax,eax
c0012426:	74 15                	je     c001243d <CmSplitFinalSlashInPlace(char*)+0x2b>
c0012428:	8d 14 03             	lea    edx,[ebx+eax*1]
c001242b:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001242f:	75 09                	jne    c001243a <CmSplitFinalSlashInPlace(char*)+0x28>
c0012431:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0012434:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012438:	eb 05                	jmp    c001243f <CmSplitFinalSlashInPlace(char*)+0x2d>
c001243a:	48                   	dec    eax
c001243b:	eb e7                	jmp    c0012424 <CmSplitFinalSlashInPlace(char*)+0x12>
c001243d:	31 c0                	xor    eax,eax
c001243f:	83 c4 08             	add    esp,0x8
c0012442:	5b                   	pop    ebx
c0012443:	c3                   	ret    

c0012444 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0012444:	55                   	push   ebp
c0012445:	57                   	push   edi
c0012446:	56                   	push   esi
c0012447:	53                   	push   ebx
c0012448:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001244e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0012455:	8a 1e                	mov    bl,BYTE PTR [esi]
c0012457:	8d 6e 01             	lea    ebp,[esi+0x1]
c001245a:	80 fb 40             	cmp    bl,0x40
c001245d:	75 1b                	jne    c001247a <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001245f:	8a 16                	mov    dl,BYTE PTR [esi]
c0012461:	84 d2                	test   dl,dl
c0012463:	0f 84 f1 00 00 00    	je     c001255a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0012469:	8d 46 01             	lea    eax,[esi+0x1]
c001246c:	80 fa 3a             	cmp    dl,0x3a
c001246f:	74 04                	je     c0012475 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0012471:	89 c6                	mov    esi,eax
c0012473:	eb ea                	jmp    c001245f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0012475:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012478:	89 c6                	mov    esi,eax
c001247a:	50                   	push   eax
c001247b:	6a 40                	push   0x40
c001247d:	6a 00                	push   0x0
c001247f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012483:	50                   	push   eax
c0012484:	e8 37 e0 fe ff       	call   c00004c0 <memset>
c0012489:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0012490:	31 c0                	xor    eax,eax
c0012492:	83 c4 10             	add    esp,0x10
c0012495:	8a 0f                	mov    cl,BYTE PTR [edi]
c0012497:	84 c9                	test   cl,cl
c0012499:	0f 84 bb 00 00 00    	je     c001255a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001249f:	3d c7 00 00 00       	cmp    eax,0xc7
c00124a4:	0f 8f b0 00 00 00    	jg     c001255a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00124aa:	80 f9 0a             	cmp    cl,0xa
c00124ad:	0f 85 98 00 00 00    	jne    c001254b <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00124b3:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00124b8:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c00124bc:	a8 df                	test   al,0xdf
c00124be:	0f 94 c1             	sete   cl
c00124c1:	3c 23                	cmp    al,0x23
c00124c3:	0f 94 c2             	sete   dl
c00124c6:	08 d1                	or     cl,dl
c00124c8:	75 4a                	jne    c0012514 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00124ca:	8d 50 f7             	lea    edx,[eax-0x9]
c00124cd:	80 fa 01             	cmp    dl,0x1
c00124d0:	76 42                	jbe    c0012514 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00124d2:	3c 5b                	cmp    al,0x5b
c00124d4:	75 42                	jne    c0012518 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00124d6:	80 fb 40             	cmp    bl,0x40
c00124d9:	75 39                	jne    c0012514 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00124db:	83 ec 0c             	sub    esp,0xc
c00124de:	8d 54 24 65          	lea    edx,[esp+0x65]
c00124e2:	52                   	push   edx
c00124e3:	e8 48 e0 fe ff       	call   c0000530 <strlen>
c00124e8:	83 c4 10             	add    esp,0x10
c00124eb:	83 f8 3f             	cmp    eax,0x3f
c00124ee:	77 6a                	ja     c001255a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00124f0:	50                   	push   eax
c00124f1:	50                   	push   eax
c00124f2:	8d 54 24 61          	lea    edx,[esp+0x61]
c00124f6:	52                   	push   edx
c00124f7:	8d 54 24 24          	lea    edx,[esp+0x24]
c00124fb:	52                   	push   edx
c00124fc:	e8 ef e0 fe ff       	call   c00005f0 <strcpy>
c0012501:	58                   	pop    eax
c0012502:	8d 54 24 24          	lea    edx,[esp+0x24]
c0012506:	52                   	push   edx
c0012507:	e8 24 e0 fe ff       	call   c0000530 <strlen>
c001250c:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0012511:	83 c4 10             	add    esp,0x10
c0012514:	31 d2                	xor    edx,edx
c0012516:	eb 3a                	jmp    c0012552 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0012518:	80 fb 40             	cmp    bl,0x40
c001251b:	74 06                	je     c0012523 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001251d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012521:	eb 20                	jmp    c0012543 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0012523:	50                   	push   eax
c0012524:	50                   	push   eax
c0012525:	55                   	push   ebp
c0012526:	8d 44 24 24          	lea    eax,[esp+0x24]
c001252a:	50                   	push   eax
c001252b:	e8 a0 e1 fe ff       	call   c00006d0 <strcmp>
c0012530:	83 c4 10             	add    esp,0x10
c0012533:	85 c0                	test   eax,eax
c0012535:	75 dd                	jne    c0012514 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0012537:	eb e4                	jmp    c001251d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0012539:	8d 50 01             	lea    edx,[eax+0x1]
c001253c:	80 f9 3d             	cmp    cl,0x3d
c001253f:	74 1d                	je     c001255e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0012541:	89 d0                	mov    eax,edx
c0012543:	8a 08                	mov    cl,BYTE PTR [eax]
c0012545:	84 c9                	test   cl,cl
c0012547:	75 f0                	jne    c0012539 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0012549:	eb 0f                	jmp    c001255a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001254b:	8d 50 01             	lea    edx,[eax+0x1]
c001254e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0012552:	47                   	inc    edi
c0012553:	89 d0                	mov    eax,edx
c0012555:	e9 3b ff ff ff       	jmp    c0012495 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001255a:	31 c0                	xor    eax,eax
c001255c:	eb 33                	jmp    c0012591 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001255e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012562:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012565:	50                   	push   eax
c0012566:	50                   	push   eax
c0012567:	8d 44 24 60          	lea    eax,[esp+0x60]
c001256b:	50                   	push   eax
c001256c:	56                   	push   esi
c001256d:	e8 5e e1 fe ff       	call   c00006d0 <strcmp>
c0012572:	83 c4 10             	add    esp,0x10
c0012575:	85 c0                	test   eax,eax
c0012577:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001257b:	75 97                	jne    c0012514 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001257d:	51                   	push   ecx
c001257e:	51                   	push   ecx
c001257f:	52                   	push   edx
c0012580:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0012587:	e8 64 e0 fe ff       	call   c00005f0 <strcpy>
c001258c:	83 c4 10             	add    esp,0x10
c001258f:	b0 01                	mov    al,0x1
c0012591:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012597:	5b                   	pop    ebx
c0012598:	5e                   	pop    esi
c0012599:	5f                   	pop    edi
c001259a:	5d                   	pop    ebp
c001259b:	c3                   	ret    

c001259c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001259c:	57                   	push   edi
c001259d:	56                   	push   esi
c001259e:	53                   	push   ebx
c001259f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00125a5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00125ac:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00125b3:	53                   	push   ebx
c00125b4:	e8 77 df fe ff       	call   c0000530 <strlen>
c00125b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00125bc:	89 c7                	mov    edi,eax
c00125be:	e8 6d df fe ff       	call   c0000530 <strlen>
c00125c3:	83 c4 10             	add    esp,0x10
c00125c6:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00125ca:	3d ff 00 00 00       	cmp    eax,0xff
c00125cf:	0f 87 d3 00 00 00    	ja     c00126a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00125d5:	57                   	push   edi
c00125d6:	57                   	push   edi
c00125d7:	56                   	push   esi
c00125d8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00125dc:	56                   	push   esi
c00125dd:	e8 0e e0 fe ff       	call   c00005f0 <strcpy>
c00125e2:	58                   	pop    eax
c00125e3:	5a                   	pop    edx
c00125e4:	68 63 05 02 c0       	push   0xc0020563
c00125e9:	56                   	push   esi
c00125ea:	e8 c1 e1 fe ff       	call   c00007b0 <strcat>
c00125ef:	59                   	pop    ecx
c00125f0:	5f                   	pop    edi
c00125f1:	53                   	push   ebx
c00125f2:	56                   	push   esi
c00125f3:	e8 b8 e1 fe ff       	call   c00007b0 <strcat>
c00125f8:	58                   	pop    eax
c00125f9:	5a                   	pop    edx
c00125fa:	68 c6 02 02 c0       	push   0xc00202c6
c00125ff:	56                   	push   esi
c0012600:	e8 ab e1 fe ff       	call   c00007b0 <strcat>
c0012605:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001260c:	e8 54 52 ff ff       	call   c0007865 <malloc>
c0012611:	83 c4 0c             	add    esp,0xc
c0012614:	89 c3                	mov    ebx,eax
c0012616:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c001261c:	56                   	push   esi
c001261d:	50                   	push   eax
c001261e:	e8 4d 85 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0012623:	83 c4 10             	add    esp,0x10
c0012626:	85 db                	test   ebx,ebx
c0012628:	74 7e                	je     c00126a8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001262a:	51                   	push   ecx
c001262b:	51                   	push   ecx
c001262c:	6a 01                	push   0x1
c001262e:	53                   	push   ebx
c001262f:	e8 fc 85 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0012634:	83 c4 10             	add    esp,0x10
c0012637:	85 c0                	test   eax,eax
c0012639:	74 08                	je     c0012643 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001263b:	83 ec 0c             	sub    esp,0xc
c001263e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012640:	53                   	push   ebx
c0012641:	eb 5f                	jmp    c00126a2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0012643:	52                   	push   edx
c0012644:	8d 44 24 17          	lea    eax,[esp+0x17]
c0012648:	50                   	push   eax
c0012649:	8d 44 24 20          	lea    eax,[esp+0x20]
c001264d:	50                   	push   eax
c001264e:	53                   	push   ebx
c001264f:	e8 88 88 ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c0012654:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012658:	83 c4 10             	add    esp,0x10
c001265b:	89 c1                	mov    ecx,eax
c001265d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0012661:	74 31                	je     c0012694 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0012663:	83 ec 0c             	sub    esp,0xc
c0012666:	50                   	push   eax
c0012667:	e8 f9 51 ff ff       	call   c0007865 <malloc>
c001266c:	89 c6                	mov    esi,eax
c001266e:	58                   	pop    eax
c001266f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012671:	8d 54 24 20          	lea    edx,[esp+0x20]
c0012675:	52                   	push   edx
c0012676:	56                   	push   esi
c0012677:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001267b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001267f:	53                   	push   ebx
c0012680:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012683:	83 c4 20             	add    esp,0x20
c0012686:	85 c0                	test   eax,eax
c0012688:	75 0a                	jne    c0012694 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001268a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001268e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0012692:	74 18                	je     c00126ac <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0012694:	83 ec 0c             	sub    esp,0xc
c0012697:	53                   	push   ebx
c0012698:	e8 f1 85 ff ff       	call   c000ac8e <File::close()>
c001269d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001269f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00126a5:	83 c4 10             	add    esp,0x10
c00126a8:	31 c0                	xor    eax,eax
c00126aa:	eb 3b                	jmp    c00126e7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00126ac:	83 ec 0c             	sub    esp,0xc
c00126af:	53                   	push   ebx
c00126b0:	e8 d9 85 ff ff       	call   c000ac8e <File::close()>
c00126b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00126ba:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00126bd:	83 c4 0c             	add    esp,0xc
c00126c0:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00126c7:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00126ce:	56                   	push   esi
c00126cf:	e8 70 fd ff ff       	call   c0012444 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00126d4:	89 34 24             	mov    DWORD PTR [esp],esi
c00126d7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00126db:	e8 95 51 ff ff       	call   c0007875 <free>
c00126e0:	83 c4 10             	add    esp,0x10
c00126e3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00126e7:	81 c4 20 01 00 00    	add    esp,0x120
c00126ed:	5b                   	pop    ebx
c00126ee:	5e                   	pop    esi
c00126ef:	5f                   	pop    edi
c00126f0:	c3                   	ret    

c00126f1 <Reg::getLine(char*, char*, char*)>:
c00126f1:	57                   	push   edi
c00126f2:	56                   	push   esi
c00126f3:	53                   	push   ebx
c00126f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00126f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00126fc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012700:	57                   	push   edi
c0012701:	56                   	push   esi
c0012702:	53                   	push   ebx
c0012703:	68 cb 02 02 c0       	push   0xc00202cb
c0012708:	e8 8f fe ff ff       	call   c001259c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001270d:	83 c4 10             	add    esp,0x10
c0012710:	84 c0                	test   al,al
c0012712:	75 10                	jne    c0012724 <Reg::getLine(char*, char*, char*)+0x33>
c0012714:	57                   	push   edi
c0012715:	56                   	push   esi
c0012716:	53                   	push   ebx
c0012717:	68 f0 02 02 c0       	push   0xc00202f0
c001271c:	e8 7b fe ff ff       	call   c001259c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0012721:	83 c4 10             	add    esp,0x10
c0012724:	5b                   	pop    ebx
c0012725:	5e                   	pop    esi
c0012726:	5f                   	pop    edi
c0012727:	c3                   	ret    

c0012728 <Reg::readInt(char*, char*, int*)>:
c0012728:	55                   	push   ebp
c0012729:	57                   	push   edi
c001272a:	56                   	push   esi
c001272b:	53                   	push   ebx
c001272c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0012732:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0012736:	57                   	push   edi
c0012737:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001273e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0012745:	e8 a7 ff ff ff       	call   c00126f1 <Reg::getLine(char*, char*, char*)>
c001274a:	83 c4 10             	add    esp,0x10
c001274d:	84 c0                	test   al,al
c001274f:	0f 84 b3 00 00 00    	je     c0012808 <Reg::readInt(char*, char*, int*)+0xe0>
c0012755:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0012759:	80 fa 2b             	cmp    dl,0x2b
c001275c:	74 0c                	je     c001276a <Reg::readInt(char*, char*, int*)+0x42>
c001275e:	80 fa 2d             	cmp    dl,0x2d
c0012761:	75 0e                	jne    c0012771 <Reg::readInt(char*, char*, int*)+0x49>
c0012763:	ba 01 00 00 00       	mov    edx,0x1
c0012768:	eb 0b                	jmp    c0012775 <Reg::readInt(char*, char*, int*)+0x4d>
c001276a:	ba 01 00 00 00       	mov    edx,0x1
c001276f:	eb 02                	jmp    c0012773 <Reg::readInt(char*, char*, int*)+0x4b>
c0012771:	31 d2                	xor    edx,edx
c0012773:	31 c0                	xor    eax,eax
c0012775:	be 0a 00 00 00       	mov    esi,0xa
c001277a:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001277f:	75 20                	jne    c00127a1 <Reg::readInt(char*, char*, int*)+0x79>
c0012781:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0012785:	80 f9 78             	cmp    cl,0x78
c0012788:	75 0a                	jne    c0012794 <Reg::readInt(char*, char*, int*)+0x6c>
c001278a:	83 c2 02             	add    edx,0x2
c001278d:	be 10 00 00 00       	mov    esi,0x10
c0012792:	eb 0d                	jmp    c00127a1 <Reg::readInt(char*, char*, int*)+0x79>
c0012794:	80 f9 62             	cmp    cl,0x62
c0012797:	75 08                	jne    c00127a1 <Reg::readInt(char*, char*, int*)+0x79>
c0012799:	83 c2 02             	add    edx,0x2
c001279c:	be 02 00 00 00       	mov    esi,0x2
c00127a1:	01 d7                	add    edi,edx
c00127a3:	31 d2                	xor    edx,edx
c00127a5:	8a 1f                	mov    bl,BYTE PTR [edi]
c00127a7:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00127ab:	80 fb 0d             	cmp    bl,0xd
c00127ae:	0f 94 c3             	sete   bl
c00127b1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00127b6:	0f 94 c1             	sete   cl
c00127b9:	08 cb                	or     bl,cl
c00127bb:	75 3a                	jne    c00127f7 <Reg::readInt(char*, char*, int*)+0xcf>
c00127bd:	0f af d6             	imul   edx,esi
c00127c0:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c00127c5:	83 fe 10             	cmp    esi,0x10
c00127c8:	75 26                	jne    c00127f0 <Reg::readInt(char*, char*, int*)+0xc8>
c00127ca:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00127ce:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00127d1:	89 e9                	mov    ecx,ebp
c00127d3:	80 f9 05             	cmp    cl,0x5
c00127d6:	77 06                	ja     c00127de <Reg::readInt(char*, char*, int*)+0xb6>
c00127d8:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00127dc:	eb 16                	jmp    c00127f4 <Reg::readInt(char*, char*, int*)+0xcc>
c00127de:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00127e2:	83 e9 61             	sub    ecx,0x61
c00127e5:	80 f9 05             	cmp    cl,0x5
c00127e8:	77 06                	ja     c00127f0 <Reg::readInt(char*, char*, int*)+0xc8>
c00127ea:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00127ee:	eb 04                	jmp    c00127f4 <Reg::readInt(char*, char*, int*)+0xcc>
c00127f0:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00127f4:	47                   	inc    edi
c00127f5:	eb ae                	jmp    c00127a5 <Reg::readInt(char*, char*, int*)+0x7d>
c00127f7:	84 c0                	test   al,al
c00127f9:	74 02                	je     c00127fd <Reg::readInt(char*, char*, int*)+0xd5>
c00127fb:	f7 da                	neg    edx
c00127fd:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0012804:	89 10                	mov    DWORD PTR [eax],edx
c0012806:	88 d8                	mov    al,bl
c0012808:	81 c4 ec 00 00 00    	add    esp,0xec
c001280e:	5b                   	pop    ebx
c001280f:	5e                   	pop    esi
c0012810:	5f                   	pop    edi
c0012811:	5d                   	pop    ebp
c0012812:	c3                   	ret    

c0012813 <Reg::readString(char*, char*, char*, int)>:
c0012813:	57                   	push   edi
c0012814:	56                   	push   esi
c0012815:	53                   	push   ebx
c0012816:	81 ec d4 00 00 00    	sub    esp,0xd4
c001281c:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0012823:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0012827:	57                   	push   edi
c0012828:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001282f:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0012836:	e8 b6 fe ff ff       	call   c00126f1 <Reg::getLine(char*, char*, char*)>
c001283b:	83 c4 10             	add    esp,0x10
c001283e:	89 c6                	mov    esi,eax
c0012840:	84 c0                	test   al,al
c0012842:	74 44                	je     c0012888 <Reg::readString(char*, char*, char*, int)+0x75>
c0012844:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001284b:	31 c0                	xor    eax,eax
c001284d:	4a                   	dec    edx
c001284e:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0012851:	84 c9                	test   cl,cl
c0012853:	74 0f                	je     c0012864 <Reg::readString(char*, char*, char*, int)+0x51>
c0012855:	39 c2                	cmp    edx,eax
c0012857:	7e 0b                	jle    c0012864 <Reg::readString(char*, char*, char*, int)+0x51>
c0012859:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001285c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0012861:	40                   	inc    eax
c0012862:	eb ea                	jmp    c001284e <Reg::readString(char*, char*, char*, int)+0x3b>
c0012864:	83 ec 0c             	sub    esp,0xc
c0012867:	53                   	push   ebx
c0012868:	e8 c3 dc fe ff       	call   c0000530 <strlen>
c001286d:	83 c4 10             	add    esp,0x10
c0012870:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0012875:	75 11                	jne    c0012888 <Reg::readString(char*, char*, char*, int)+0x75>
c0012877:	83 ec 0c             	sub    esp,0xc
c001287a:	53                   	push   ebx
c001287b:	e8 b0 dc fe ff       	call   c0000530 <strlen>
c0012880:	83 c4 10             	add    esp,0x10
c0012883:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012888:	81 c4 d0 00 00 00    	add    esp,0xd0
c001288e:	89 f0                	mov    eax,esi
c0012890:	5b                   	pop    ebx
c0012891:	5e                   	pop    esi
c0012892:	5f                   	pop    edi
c0012893:	c3                   	ret    

c0012894 <Reg::readBool(char*, char*, bool*)>:
c0012894:	83 ec 20             	sub    esp,0x20
c0012897:	8d 44 24 10          	lea    eax,[esp+0x10]
c001289b:	50                   	push   eax
c001289c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128a4:	e8 7f fe ff ff       	call   c0012728 <Reg::readInt(char*, char*, int*)>
c00128a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00128ae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00128b2:	0f 95 02             	setne  BYTE PTR [edx]
c00128b5:	83 c4 2c             	add    esp,0x2c
c00128b8:	c3                   	ret    

c00128b9 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00128b9:	53                   	push   ebx
c00128ba:	83 ec 1c             	sub    esp,0x1c
c00128bd:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00128c1:	8d 44 24 13          	lea    eax,[esp+0x13]
c00128c5:	50                   	push   eax
c00128c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128ce:	e8 c1 ff ff ff       	call   c0012894 <Reg::readBool(char*, char*, bool*)>
c00128d3:	83 c4 10             	add    esp,0x10
c00128d6:	84 c0                	test   al,al
c00128d8:	74 04                	je     c00128de <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00128da:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00128de:	88 d8                	mov    al,bl
c00128e0:	83 c4 18             	add    esp,0x18
c00128e3:	5b                   	pop    ebx
c00128e4:	c3                   	ret    

c00128e5 <Reg::readIntWithDefault(char*, char*, int)>:
c00128e5:	53                   	push   ebx
c00128e6:	83 ec 1c             	sub    esp,0x1c
c00128e9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00128ed:	8d 44 24 10          	lea    eax,[esp+0x10]
c00128f1:	50                   	push   eax
c00128f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00128fa:	e8 29 fe ff ff       	call   c0012728 <Reg::readInt(char*, char*, int*)>
c00128ff:	83 c4 10             	add    esp,0x10
c0012902:	84 c0                	test   al,al
c0012904:	74 04                	je     c001290a <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0012906:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001290a:	89 d8                	mov    eax,ebx
c001290c:	83 c4 18             	add    esp,0x18
c001290f:	5b                   	pop    ebx
c0012910:	c3                   	ret    

c0012911 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0012911:	57                   	push   edi
c0012912:	56                   	push   esi
c0012913:	56                   	push   esi
c0012914:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012918:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001291c:	56                   	push   esi
c001291d:	57                   	push   edi
c001291e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012926:	e8 e8 fe ff ff       	call   c0012813 <Reg::readString(char*, char*, char*, int)>
c001292b:	83 c4 10             	add    esp,0x10
c001292e:	84 c0                	test   al,al
c0012930:	75 1a                	jne    c001294c <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0012932:	51                   	push   ecx
c0012933:	56                   	push   esi
c0012934:	6a 00                	push   0x0
c0012936:	57                   	push   edi
c0012937:	e8 84 db fe ff       	call   c00004c0 <memset>
c001293c:	8d 4e ff             	lea    ecx,[esi-0x1]
c001293f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012943:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012945:	83 c4 10             	add    esp,0x10
c0012948:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001294c:	89 f8                	mov    eax,edi
c001294e:	5a                   	pop    edx
c001294f:	5e                   	pop    esi
c0012950:	5f                   	pop    edi
c0012951:	c3                   	ret    

c0012952 <SysEject(regs*)>:
c0012952:	83 ec 0c             	sub    esp,0xc
c0012955:	83 ca ff             	or     edx,0xffffffff
c0012958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001295c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001295f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0012964:	83 e9 41             	sub    ecx,0x41
c0012967:	83 f9 19             	cmp    ecx,0x19
c001296a:	77 18                	ja     c0012984 <SysEject(regs*)+0x32>
c001296c:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c0012973:	85 c9                	test   ecx,ecx
c0012975:	74 0d                	je     c0012984 <SysEject(regs*)+0x32>
c0012977:	83 ec 0c             	sub    esp,0xc
c001297a:	51                   	push   ecx
c001297b:	e8 54 a3 ff ff       	call   c000ccd4 <LogicalDisk::eject()>
c0012980:	83 c4 10             	add    esp,0x10
c0012983:	99                   	cdq    
c0012984:	83 c4 0c             	add    esp,0xc
c0012987:	c3                   	ret    

c0012988 <SysExit(regs*)>:
c0012988:	83 ec 18             	sub    esp,0x18
c001298b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001298f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012992:	e8 39 27 00 00       	call   c00150d0 <terminateTask(int)>
c0012997:	83 c8 ff             	or     eax,0xffffffff
c001299a:	83 c4 1c             	add    esp,0x1c
c001299d:	89 c2                	mov    edx,eax
c001299f:	c3                   	ret    

c00129a0 <SysGetCwd(regs*)>:
c00129a0:	83 ec 10             	sub    esp,0x10
c00129a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00129a7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00129aa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00129ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129b2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00129b5:	e8 b8 7f ff ff       	call   c000a972 <Fs::getcwd(Process*, char*, int)>
c00129ba:	83 c4 1c             	add    esp,0x1c
c00129bd:	99                   	cdq    
c00129be:	c3                   	ret    

c00129bf <SysGetPID(regs*)>:
c00129bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00129c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00129c9:	99                   	cdq    
c00129ca:	c3                   	ret    

c00129cb <SysGetRAMData(regs*)>:
c00129cb:	8b 0d e8 3e 02 c0    	mov    ecx,DWORD PTR ds:0xc0023ee8
c00129d1:	69 05 e4 3e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0023ee4,0xc8
c00129db:	99                   	cdq    
c00129dc:	f7 f9                	idiv   ecx
c00129de:	c1 e0 18             	shl    eax,0x18
c00129e1:	09 c8                	or     eax,ecx
c00129e3:	99                   	cdq    
c00129e4:	c3                   	ret    

c00129e5 <SysGetVGAPtr(regs*)>:
c00129e5:	55                   	push   ebp
c00129e6:	57                   	push   edi
c00129e7:	56                   	push   esi
c00129e8:	53                   	push   ebx
c00129e9:	83 ec 18             	sub    esp,0x18
c00129ec:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00129f0:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00129f3:	e8 d8 21 00 00       	call   c0014bd0 <Thr::processFromPID(int)>
c00129f8:	83 c4 10             	add    esp,0x10
c00129fb:	89 c1                	mov    ecx,eax
c00129fd:	b8 01 00 00 00       	mov    eax,0x1
c0012a02:	85 c9                	test   ecx,ecx
c0012a04:	74 57                	je     c0012a5d <SysGetVGAPtr(regs*)+0x78>
c0012a06:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0012a0c:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0012a10:	74 0c                	je     c0012a1e <SysGetVGAPtr(regs*)+0x39>
c0012a12:	83 ec 0c             	sub    esp,0xc
c0012a15:	55                   	push   ebp
c0012a16:	e8 82 5a ff ff       	call   c000849d <setActiveTerminal(VgaText*)>
c0012a1b:	83 c4 10             	add    esp,0x10
c0012a1e:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0012a21:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012a24:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0012a29:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012a2b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0012a2e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a31:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0012a37:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a3a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0012a3d:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0012a43:	50                   	push   eax
c0012a44:	50                   	push   eax
c0012a45:	68 0b 03 02 c0       	push   0xc002030b
c0012a4a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a4d:	05 a8 0f 00 00       	add    eax,0xfa8
c0012a52:	50                   	push   eax
c0012a53:	e8 98 db fe ff       	call   c00005f0 <strcpy>
c0012a58:	83 c4 10             	add    esp,0x10
c0012a5b:	31 c0                	xor    eax,eax
c0012a5d:	83 c4 0c             	add    esp,0xc
c0012a60:	31 d2                	xor    edx,edx
c0012a62:	5b                   	pop    ebx
c0012a63:	5e                   	pop    esi
c0012a64:	5f                   	pop    edi
c0012a65:	5d                   	pop    ebp
c0012a66:	c3                   	ret    

c0012a67 <SysLoadDLL(regs*)>:
c0012a67:	56                   	push   esi
c0012a68:	53                   	push   ebx
c0012a69:	31 d2                	xor    edx,edx
c0012a6b:	51                   	push   ecx
c0012a6c:	b8 01 00 00 00       	mov    eax,0x1
c0012a71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012a75:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0012a79:	0f 84 8c 00 00 00    	je     c0012b0b <SysLoadDLL(regs*)+0xa4>
c0012a7f:	83 ec 0c             	sub    esp,0xc
c0012a82:	68 14 01 00 00       	push   0x114
c0012a87:	e8 d9 4d ff ff       	call   c0007865 <malloc>
c0012a8c:	83 c4 0c             	add    esp,0xc
c0012a8f:	89 c3                	mov    ebx,eax
c0012a91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012a96:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012a99:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012a9c:	53                   	push   ebx
c0012a9d:	e8 ce 80 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0012aa2:	83 c4 10             	add    esp,0x10
c0012aa5:	31 d2                	xor    edx,edx
c0012aa7:	b8 02 00 00 00       	mov    eax,0x2
c0012aac:	85 db                	test   ebx,ebx
c0012aae:	74 5b                	je     c0012b0b <SysLoadDLL(regs*)+0xa4>
c0012ab0:	83 ec 0c             	sub    esp,0xc
c0012ab3:	53                   	push   ebx
c0012ab4:	e8 e5 83 ff ff       	call   c000ae9e <File::exists()>
c0012ab9:	83 c4 10             	add    esp,0x10
c0012abc:	84 c0                	test   al,al
c0012abe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ac0:	75 11                	jne    c0012ad3 <SysLoadDLL(regs*)+0x6c>
c0012ac2:	83 ec 0c             	sub    esp,0xc
c0012ac5:	53                   	push   ebx
c0012ac6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ac9:	83 c4 10             	add    esp,0x10
c0012acc:	b8 03 00 00 00       	mov    eax,0x3
c0012ad1:	eb 36                	jmp    c0012b09 <SysLoadDLL(regs*)+0xa2>
c0012ad3:	83 ec 0c             	sub    esp,0xc
c0012ad6:	53                   	push   ebx
c0012ad7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ada:	58                   	pop    eax
c0012adb:	5a                   	pop    edx
c0012adc:	6a 00                	push   0x0
c0012ade:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0012ae1:	e8 74 12 00 00       	call   c0013d5a <Thr::loadDLL(char const*, bool)>
c0012ae6:	83 c4 10             	add    esp,0x10
c0012ae9:	89 c1                	mov    ecx,eax
c0012aeb:	31 d2                	xor    edx,edx
c0012aed:	b8 04 00 00 00       	mov    eax,0x4
c0012af2:	85 c9                	test   ecx,ecx
c0012af4:	74 15                	je     c0012b0b <SysLoadDLL(regs*)+0xa4>
c0012af6:	53                   	push   ebx
c0012af7:	53                   	push   ebx
c0012af8:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0012afe:	51                   	push   ecx
c0012aff:	e8 87 14 00 00       	call   c0013f8b <Thr::executeDLL(unsigned long, void*)>
c0012b04:	83 c4 10             	add    esp,0x10
c0012b07:	31 c0                	xor    eax,eax
c0012b09:	31 d2                	xor    edx,edx
c0012b0b:	59                   	pop    ecx
c0012b0c:	5b                   	pop    ebx
c0012b0d:	5e                   	pop    esi
c0012b0e:	c3                   	ret    

c0012b0f <SysRead(regs*)>:
c0012b0f:	57                   	push   edi
c0012b10:	56                   	push   esi
c0012b11:	53                   	push   ebx
c0012b12:	83 ec 10             	sub    esp,0x10
c0012b15:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012b19:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012b1c:	83 f8 02             	cmp    eax,0x2
c0012b1f:	77 10                	ja     c0012b31 <SysRead(regs*)+0x22>
c0012b21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b26:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012b29:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012b2f:	eb 0e                	jmp    c0012b3f <SysRead(regs*)+0x30>
c0012b31:	83 ec 0c             	sub    esp,0xc
c0012b34:	50                   	push   eax
c0012b35:	e8 ad 66 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0012b3a:	83 c4 10             	add    esp,0x10
c0012b3d:	89 c1                	mov    ecx,eax
c0012b3f:	83 c8 ff             	or     eax,0xffffffff
c0012b42:	85 c9                	test   ecx,ecx
c0012b44:	89 c2                	mov    edx,eax
c0012b46:	74 28                	je     c0012b70 <SysRead(regs*)+0x61>
c0012b48:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b50:	31 ff                	xor    edi,edi
c0012b52:	83 ec 0c             	sub    esp,0xc
c0012b55:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012b57:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012b5b:	52                   	push   edx
c0012b5c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012b5f:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012b62:	57                   	push   edi
c0012b63:	56                   	push   esi
c0012b64:	51                   	push   ecx
c0012b65:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012b68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012b6c:	83 c4 20             	add    esp,0x20
c0012b6f:	99                   	cdq    
c0012b70:	83 c4 10             	add    esp,0x10
c0012b73:	5b                   	pop    ebx
c0012b74:	5e                   	pop    esi
c0012b75:	5f                   	pop    edi
c0012b76:	c3                   	ret    

c0012b77 <SysRegisterSignal(regs*)>:
c0012b77:	83 ec 18             	sub    esp,0x18
c0012b7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012b7e:	6a 00                	push   0x0
c0012b80:	6a 00                	push   0x0
c0012b82:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012b85:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012b88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012b8d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012b90:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0012b96:	e8 ca db ff ff       	call   c0010765 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0012b9b:	83 c4 2c             	add    esp,0x2c
c0012b9e:	99                   	cdq    
c0012b9f:	c3                   	ret    

c0012ba0 <SysSbrk(regs*)>:
c0012ba0:	56                   	push   esi
c0012ba1:	53                   	push   ebx
c0012ba2:	50                   	push   eax
c0012ba3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ba8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012bac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012baf:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0012bb2:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0012bb8:	85 db                	test   ebx,ebx
c0012bba:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0012bbd:	74 02                	je     c0012bc1 <SysSbrk(regs*)+0x21>
c0012bbf:	79 06                	jns    c0012bc7 <SysSbrk(regs*)+0x27>
c0012bc1:	89 f0                	mov    eax,esi
c0012bc3:	31 d2                	xor    edx,edx
c0012bc5:	eb 2a                	jmp    c0012bf1 <SysSbrk(regs*)+0x51>
c0012bc7:	83 c8 ff             	or     eax,0xffffffff
c0012bca:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0012bd0:	89 c2                	mov    edx,eax
c0012bd2:	77 1d                	ja     c0012bf1 <SysSbrk(regs*)+0x51>
c0012bd4:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0012bda:	50                   	push   eax
c0012bdb:	c1 ea 0c             	shr    edx,0xc
c0012bde:	68 07 0c 00 00       	push   0xc07
c0012be3:	52                   	push   edx
c0012be4:	51                   	push   ecx
c0012be5:	e8 1a 6f ff ff       	call   c0009b04 <VAS::allocatePages(int, int)>
c0012bea:	89 f0                	mov    eax,esi
c0012bec:	31 d2                	xor    edx,edx
c0012bee:	83 c4 10             	add    esp,0x10
c0012bf1:	59                   	pop    ecx
c0012bf2:	5b                   	pop    ebx
c0012bf3:	5e                   	pop    esi
c0012bf4:	c3                   	ret    

c0012bf5 <SysSetCwd(regs*)>:
c0012bf5:	83 ec 14             	sub    esp,0x14
c0012bf8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012bfc:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0012bff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c04:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0012c07:	e8 31 83 ff ff       	call   c000af3d <Fs::setcwd(Process*, char*)>
c0012c0c:	83 c4 1c             	add    esp,0x1c
c0012c0f:	99                   	cdq    
c0012c10:	c3                   	ret    

c0012c11 <SysSetTime(regs*)>:
c0012c11:	55                   	push   ebp
c0012c12:	31 c9                	xor    ecx,ecx
c0012c14:	57                   	push   edi
c0012c15:	bd 0c 00 00 00       	mov    ebp,0xc
c0012c1a:	56                   	push   esi
c0012c1b:	53                   	push   ebx
c0012c1c:	31 db                	xor    ebx,ebx
c0012c1e:	83 ec 10             	sub    esp,0x10
c0012c21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012c25:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0012c28:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0012c2b:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0012c2e:	89 c2                	mov    edx,eax
c0012c30:	66 81 ef 6c 07       	sub    di,0x76c
c0012c35:	83 e2 1f             	and    edx,0x1f
c0012c38:	c1 e7 10             	shl    edi,0x10
c0012c3b:	42                   	inc    edx
c0012c3c:	c1 e8 05             	shr    eax,0x5
c0012c3f:	88 d1                	mov    cl,dl
c0012c41:	31 d2                	xor    edx,edx
c0012c43:	f7 f5                	div    ebp
c0012c45:	89 dd                	mov    ebp,ebx
c0012c47:	88 d5                	mov    ch,dl
c0012c49:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0012c4f:	0f b7 c1             	movzx  eax,cx
c0012c52:	31 d2                	xor    edx,edx
c0012c54:	09 f8                	or     eax,edi
c0012c56:	bf 3c 00 00 00       	mov    edi,0x3c
c0012c5b:	89 c1                	mov    ecx,eax
c0012c5d:	89 f0                	mov    eax,esi
c0012c5f:	f7 f7                	div    edi
c0012c61:	c1 e2 10             	shl    edx,0x10
c0012c64:	09 d5                	or     ebp,edx
c0012c66:	31 d2                	xor    edx,edx
c0012c68:	89 eb                	mov    ebx,ebp
c0012c6a:	f7 f7                	div    edi
c0012c6c:	bf 10 0e 00 00       	mov    edi,0xe10
c0012c71:	88 d7                	mov    bh,dl
c0012c73:	89 f0                	mov    eax,esi
c0012c75:	31 d2                	xor    edx,edx
c0012c77:	f7 f7                	div    edi
c0012c79:	bf 18 00 00 00       	mov    edi,0x18
c0012c7e:	31 d2                	xor    edx,edx
c0012c80:	f7 f7                	div    edi
c0012c82:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0012c87:	88 d3                	mov    bl,dl
c0012c89:	53                   	push   ebx
c0012c8a:	51                   	push   ecx
c0012c8b:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012c91:	e8 b6 8a ff ff       	call   c000b74c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0012c96:	83 c4 1c             	add    esp,0x1c
c0012c99:	83 f0 01             	xor    eax,0x1
c0012c9c:	5b                   	pop    ebx
c0012c9d:	0f b6 c0             	movzx  eax,al
c0012ca0:	5e                   	pop    esi
c0012ca1:	31 d2                	xor    edx,edx
c0012ca3:	5f                   	pop    edi
c0012ca4:	5d                   	pop    ebp
c0012ca5:	c3                   	ret    

c0012ca6 <SysTimezone(regs*)>:
c0012ca6:	53                   	push   ebx
c0012ca7:	83 ec 08             	sub    esp,0x8
c0012caa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012cae:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0012cb2:	75 17                	jne    c0012ccb <SysTimezone(regs*)+0x25>
c0012cb4:	83 ec 0c             	sub    esp,0xc
c0012cb7:	68 15 03 02 c0       	push   0xc0020315
c0012cbc:	e8 39 79 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0012cc1:	83 c8 ff             	or     eax,0xffffffff
c0012cc4:	83 c4 10             	add    esp,0x10
c0012cc7:	89 c2                	mov    edx,eax
c0012cc9:	eb 20                	jmp    c0012ceb <SysTimezone(regs*)+0x45>
c0012ccb:	83 ec 0c             	sub    esp,0xc
c0012cce:	68 2a 03 02 c0       	push   0xc002032a
c0012cd3:	e8 22 79 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0012cd8:	58                   	pop    eax
c0012cd9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012cdc:	e8 c7 87 ff ff       	call   c000b4a8 <User::loadClockSettings(int)>
c0012ce1:	83 c4 10             	add    esp,0x10
c0012ce4:	b8 01 00 00 00       	mov    eax,0x1
c0012ce9:	31 d2                	xor    edx,edx
c0012ceb:	83 c4 08             	add    esp,0x8
c0012cee:	5b                   	pop    ebx
c0012cef:	c3                   	ret    

c0012cf0 <SysWrite(regs*)>:
c0012cf0:	57                   	push   edi
c0012cf1:	56                   	push   esi
c0012cf2:	53                   	push   ebx
c0012cf3:	83 ec 10             	sub    esp,0x10
c0012cf6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012cfa:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012cfd:	83 f8 02             	cmp    eax,0x2
c0012d00:	77 10                	ja     c0012d12 <SysWrite(regs*)+0x22>
c0012d02:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d07:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012d0a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0012d10:	eb 0e                	jmp    c0012d20 <SysWrite(regs*)+0x30>
c0012d12:	83 ec 0c             	sub    esp,0xc
c0012d15:	50                   	push   eax
c0012d16:	e8 cc 64 ff ff       	call   c00091e7 <getFromFileDescriptor(int)>
c0012d1b:	83 c4 10             	add    esp,0x10
c0012d1e:	89 c1                	mov    ecx,eax
c0012d20:	83 c8 ff             	or     eax,0xffffffff
c0012d23:	85 c9                	test   ecx,ecx
c0012d25:	89 c2                	mov    edx,eax
c0012d27:	74 28                	je     c0012d51 <SysWrite(regs*)+0x61>
c0012d29:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012d31:	31 ff                	xor    edi,edi
c0012d33:	83 ec 0c             	sub    esp,0xc
c0012d36:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012d38:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012d3c:	52                   	push   edx
c0012d3d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012d40:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0012d43:	57                   	push   edi
c0012d44:	56                   	push   esi
c0012d45:	51                   	push   ecx
c0012d46:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012d49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012d4d:	83 c4 20             	add    esp,0x20
c0012d50:	99                   	cdq    
c0012d51:	83 c4 10             	add    esp,0x10
c0012d54:	5b                   	pop    ebx
c0012d55:	5e                   	pop    esi
c0012d56:	5f                   	pop    edi
c0012d57:	c3                   	ret    

c0012d58 <SysWsbe(regs*)>:
c0012d58:	57                   	push   edi
c0012d59:	b9 0b 00 00 00       	mov    ecx,0xb
c0012d5e:	56                   	push   esi
c0012d5f:	be 69 03 02 c0       	mov    esi,0xc0020369
c0012d64:	53                   	push   ebx
c0012d65:	83 ec 30             	sub    esp,0x30
c0012d68:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0012d6c:	fc                   	cld    
c0012d6d:	83 ec 0c             	sub    esp,0xc
c0012d70:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012d72:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012d76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012d7b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012d7e:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0012d84:	8b 06                	mov    eax,DWORD PTR [esi]
c0012d86:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0012d89:	57                   	push   edi
c0012d8a:	e8 a1 d7 fe ff       	call   c0000530 <strlen>
c0012d8f:	5a                   	pop    edx
c0012d90:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0012d94:	52                   	push   edx
c0012d95:	31 d2                	xor    edx,edx
c0012d97:	57                   	push   edi
c0012d98:	52                   	push   edx
c0012d99:	50                   	push   eax
c0012d9a:	56                   	push   esi
c0012d9b:	ff d3                	call   ebx
c0012d9d:	83 c4 14             	add    esp,0x14
c0012da0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012da4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0012da7:	e8 24 23 00 00       	call   c00150d0 <terminateTask(int)>
c0012dac:	83 c4 40             	add    esp,0x40
c0012daf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012db4:	5b                   	pop    ebx
c0012db5:	31 d2                	xor    edx,edx
c0012db7:	5e                   	pop    esi
c0012db8:	5f                   	pop    edi
c0012db9:	c3                   	ret    

c0012dba <SysYield(regs*)>:
c0012dba:	83 ec 0c             	sub    esp,0xc
c0012dbd:	fa                   	cli    
c0012dbe:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0012dc4:	e8 e3 19 00 00       	call   c00147ac <schedule()>
c0012dc9:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0012dce:	48                   	dec    eax
c0012dcf:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0012dd4:	75 01                	jne    c0012dd7 <SysYield(regs*)+0x1d>
c0012dd6:	fb                   	sti    
c0012dd7:	31 c0                	xor    eax,eax
c0012dd9:	31 d2                	xor    edx,edx
c0012ddb:	83 c4 0c             	add    esp,0xc
c0012dde:	c3                   	ret    

c0012ddf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0012ddf:	55                   	push   ebp
c0012de0:	57                   	push   edi
c0012de1:	56                   	push   esi
c0012de2:	53                   	push   ebx
c0012de3:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0012de9:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0012df1:	0f 95 c2             	setne  dl
c0012df4:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0012dfc:	0f 94 c0             	sete   al
c0012dff:	84 c2                	test   dl,al
c0012e01:	74 34                	je     c0012e37 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012e03:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0012e0e:	74 27                	je     c0012e37 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0012e10:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0012e17:	05 00 10 00 00       	add    eax,0x1000
c0012e1c:	89 c1                	mov    ecx,eax
c0012e1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012e23:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0012e29:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0012e30:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0012e37:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0012e3e:	83 ec 0c             	sub    esp,0xc
c0012e41:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012e47:	6a 01                	push   0x1
c0012e49:	e8 ef 64 ff ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c0012e4e:	83 c4 10             	add    esp,0x10
c0012e51:	89 c3                	mov    ebx,eax
c0012e53:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012e59:	0f 86 25 01 00 00    	jbe    c0012f84 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0012e5f:	c1 ee 0c             	shr    esi,0xc
c0012e62:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012e69:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0012e6d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012e75:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0012e7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012e80:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0012e87:	29 ef                	sub    edi,ebp
c0012e89:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0012e8d:	0f 83 f8 00 00 00    	jae    c0012f8b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0012e93:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0012e99:	76 05                	jbe    c0012ea0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0012e9b:	bf 00 10 00 00       	mov    edi,0x1000
c0012ea0:	83 ec 0c             	sub    esp,0xc
c0012ea3:	31 d2                	xor    edx,edx
c0012ea5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012eac:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012eae:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012eb2:	50                   	push   eax
c0012eb3:	8d 74 24 30          	lea    esi,[esp+0x30]
c0012eb7:	56                   	push   esi
c0012eb8:	52                   	push   edx
c0012eb9:	57                   	push   edi
c0012eba:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0012ec1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012ec4:	83 c4 20             	add    esp,0x20
c0012ec7:	85 c0                	test   eax,eax
c0012ec9:	75 06                	jne    c0012ed1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0012ecb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012ecf:	74 13                	je     c0012ee4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0012ed1:	83 ec 0c             	sub    esp,0xc
c0012ed4:	53                   	push   ebx
c0012ed5:	e8 57 67 ff ff       	call   c0009631 <Virt::freeKernelVirtualPages(unsigned long)>
c0012eda:	83 c4 10             	add    esp,0x10
c0012edd:	31 c0                	xor    eax,eax
c0012edf:	e9 7c 01 00 00       	jmp    c0013060 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0012ee4:	fa                   	cli    
c0012ee5:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0012eeb:	e8 51 4c ff ff       	call   c0007b41 <Phys::allocatePage()>
c0012ef0:	6a 07                	push   0x7
c0012ef2:	89 c7                	mov    edi,eax
c0012ef4:	53                   	push   ebx
c0012ef5:	50                   	push   eax
c0012ef6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012efb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012efe:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012f04:	e8 f7 6a ff ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012f09:	83 c4 0c             	add    esp,0xc
c0012f0c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012f13:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012f19:	6a 00                	push   0x0
c0012f1b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f20:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f23:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012f29:	e8 44 69 ff ff       	call   c0009872 <VAS::mapOtherVASIn(bool, VAS*)>
c0012f2e:	58                   	pop    eax
c0012f2f:	5a                   	pop    edx
c0012f30:	68 07 0c 00 00       	push   0xc07
c0012f35:	55                   	push   ebp
c0012f36:	57                   	push   edi
c0012f37:	89 df                	mov    edi,ebx
c0012f39:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012f40:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012f46:	6a 00                	push   0x0
c0012f48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012f4d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012f50:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012f56:	e8 65 6e ff ff       	call   c0009dc0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012f5b:	b9 00 10 00 00       	mov    ecx,0x1000
c0012f60:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f62:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0012f67:	83 c4 20             	add    esp,0x20
c0012f6a:	48                   	dec    eax
c0012f6b:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0012f70:	85 c0                	test   eax,eax
c0012f72:	75 01                	jne    c0012f75 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0012f74:	fb                   	sti    
c0012f75:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012f7b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0012f7f:	e9 f1 fe ff ff       	jmp    c0012e75 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0012f84:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012f8b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012f92:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0012f98:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012f9e:	0f 86 ae 00 00 00    	jbe    c0013052 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012fa4:	fa                   	cli    
c0012fa5:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0012fab:	c1 ee 0c             	shr    esi,0xc
c0012fae:	51                   	push   ecx
c0012faf:	31 ff                	xor    edi,edi
c0012fb1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0012fb8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012fbe:	6a 00                	push   0x0
c0012fc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012fc5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012fc8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012fce:	e8 9f 68 ff ff       	call   c0009872 <VAS::mapOtherVASIn(bool, VAS*)>
c0012fd3:	83 c4 10             	add    esp,0x10
c0012fd6:	e8 66 4b ff ff       	call   c0007b41 <Phys::allocatePage()>
c0012fdb:	47                   	inc    edi
c0012fdc:	6a 07                	push   0x7
c0012fde:	53                   	push   ebx
c0012fdf:	50                   	push   eax
c0012fe0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012fe4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012fea:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0012fed:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0012ff3:	e8 08 6a ff ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012ff8:	58                   	pop    eax
c0012ff9:	5a                   	pop    edx
c0012ffa:	68 07 0c 00 00       	push   0xc07
c0012fff:	55                   	push   ebp
c0013000:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013006:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001300a:	50                   	push   eax
c001300b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013012:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013018:	6a 00                	push   0x0
c001301a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001301f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013022:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013028:	e8 93 6d ff ff       	call   c0009dc0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001302d:	83 c4 1c             	add    esp,0x1c
c0013030:	68 00 10 00 00       	push   0x1000
c0013035:	6a 00                	push   0x0
c0013037:	53                   	push   ebx
c0013038:	e8 83 d4 fe ff       	call   c00004c0 <memset>
c001303d:	83 c4 10             	add    esp,0x10
c0013040:	39 fe                	cmp    esi,edi
c0013042:	77 92                	ja     c0012fd6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0013044:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0013049:	48                   	dec    eax
c001304a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001304f:	75 01                	jne    c0013052 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0013051:	fb                   	sti    
c0013052:	83 ec 0c             	sub    esp,0xc
c0013055:	53                   	push   ebx
c0013056:	e8 d6 65 ff ff       	call   c0009631 <Virt::freeKernelVirtualPages(unsigned long)>
c001305b:	83 c4 10             	add    esp,0x10
c001305e:	b0 01                	mov    al,0x1
c0013060:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013066:	5b                   	pop    ebx
c0013067:	5e                   	pop    esi
c0013068:	5f                   	pop    edi
c0013069:	5d                   	pop    ebp
c001306a:	c3                   	ret    

c001306b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001306b:	55                   	push   ebp
c001306c:	57                   	push   edi
c001306d:	56                   	push   esi
c001306e:	53                   	push   ebx
c001306f:	83 ec 48             	sub    esp,0x48
c0013072:	68 14 01 00 00       	push   0x114
c0013077:	e8 e9 47 ff ff       	call   c0007865 <malloc>
c001307c:	83 c4 0c             	add    esp,0xc
c001307f:	89 c6                	mov    esi,eax
c0013081:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013085:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013089:	50                   	push   eax
c001308a:	e8 e1 7a ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c001308f:	58                   	pop    eax
c0013090:	5a                   	pop    edx
c0013091:	6a 01                	push   0x1
c0013093:	56                   	push   esi
c0013094:	e8 97 7b ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0013099:	83 c4 10             	add    esp,0x10
c001309c:	85 c0                	test   eax,eax
c001309e:	0f 85 47 01 00 00    	jne    c00131eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00130a4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00130ac:	83 ec 0c             	sub    esp,0xc
c00130af:	6a 34                	push   0x34
c00130b1:	e8 af 47 ff ff       	call   c0007865 <malloc>
c00130b6:	89 c3                	mov    ebx,eax
c00130b8:	58                   	pop    eax
c00130b9:	8b 06                	mov    eax,DWORD PTR [esi]
c00130bb:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00130bf:	57                   	push   edi
c00130c0:	53                   	push   ebx
c00130c1:	6a 00                	push   0x0
c00130c3:	6a 34                	push   0x34
c00130c5:	56                   	push   esi
c00130c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00130c9:	83 c4 20             	add    esp,0x20
c00130cc:	85 c0                	test   eax,eax
c00130ce:	0f 85 17 01 00 00    	jne    c00131eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00130d4:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00130da:	0f 85 0b 01 00 00    	jne    c00131eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00130e0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00130e3:	85 c0                	test   eax,eax
c00130e5:	0f 84 00 01 00 00    	je     c00131eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00130eb:	31 d2                	xor    edx,edx
c00130ed:	55                   	push   ebp
c00130ee:	52                   	push   edx
c00130ef:	50                   	push   eax
c00130f0:	56                   	push   esi
c00130f1:	e8 f8 7b ff ff       	call   c000acee <File::seek(unsigned long long)>
c00130f6:	83 c4 10             	add    esp,0x10
c00130f9:	85 c0                	test   eax,eax
c00130fb:	0f 85 ea 00 00 00    	jne    c00131eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013101:	83 ec 0c             	sub    esp,0xc
c0013104:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013107:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001310b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001310f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013113:	0f af c2             	imul   eax,edx
c0013116:	50                   	push   eax
c0013117:	e8 49 47 ff ff       	call   c0007865 <malloc>
c001311c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001311e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013122:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013125:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013129:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001312d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013131:	0f af c2             	imul   eax,edx
c0013134:	99                   	cdq    
c0013135:	52                   	push   edx
c0013136:	50                   	push   eax
c0013137:	56                   	push   esi
c0013138:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001313b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001313e:	83 c4 20             	add    esp,0x20
c0013141:	85 c0                	test   eax,eax
c0013143:	0f 84 a2 00 00 00    	je     c00131eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0013149:	31 d2                	xor    edx,edx
c001314b:	51                   	push   ecx
c001314c:	52                   	push   edx
c001314d:	50                   	push   eax
c001314e:	56                   	push   esi
c001314f:	e8 9a 7b ff ff       	call   c000acee <File::seek(unsigned long long)>
c0013154:	83 c4 10             	add    esp,0x10
c0013157:	85 c0                	test   eax,eax
c0013159:	0f 85 8c 00 00 00    	jne    c00131eb <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001315f:	83 ec 0c             	sub    esp,0xc
c0013162:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013166:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001316a:	31 ed                	xor    ebp,ebp
c001316c:	0f af c2             	imul   eax,edx
c001316f:	50                   	push   eax
c0013170:	e8 f0 46 ff ff       	call   c0007865 <malloc>
c0013175:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013177:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001317b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001317e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013182:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013186:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001318a:	0f af c2             	imul   eax,edx
c001318d:	99                   	cdq    
c001318e:	52                   	push   edx
c001318f:	50                   	push   eax
c0013190:	56                   	push   esi
c0013191:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013194:	83 c4 20             	add    esp,0x20
c0013197:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001319f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00131a3:	0f 86 80 00 00 00    	jbe    c0013229 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00131a9:	0f b7 fd             	movzx  edi,bp
c00131ac:	c1 e7 05             	shl    edi,0x5
c00131af:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00131b3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00131b6:	75 6b                	jne    c0013223 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00131b8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00131bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00131bf:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00131c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00131c6:	52                   	push   edx
c00131c7:	31 d2                	xor    edx,edx
c00131c9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00131cc:	52                   	push   edx
c00131cd:	50                   	push   eax
c00131ce:	56                   	push   esi
c00131cf:	e8 1a 7b ff ff       	call   c000acee <File::seek(unsigned long long)>
c00131d4:	83 c4 10             	add    esp,0x10
c00131d7:	85 c0                	test   eax,eax
c00131d9:	74 17                	je     c00131f2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00131db:	83 ec 0c             	sub    esp,0xc
c00131de:	68 95 03 02 c0       	push   0xc0020395
c00131e3:	e8 12 74 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00131e8:	83 c4 10             	add    esp,0x10
c00131eb:	31 c0                	xor    eax,eax
c00131ed:	e9 87 00 00 00       	jmp    c0013279 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00131f2:	83 ec 0c             	sub    esp,0xc
c00131f5:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00131f8:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00131fb:	50                   	push   eax
c00131fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013200:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013204:	56                   	push   esi
c0013205:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013209:	e8 d1 fb ff ff       	call   c0012ddf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001320e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013212:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013216:	83 c4 20             	add    esp,0x20
c0013219:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001321d:	73 04                	jae    c0013223 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001321f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013223:	45                   	inc    ebp
c0013224:	e9 76 ff ff ff       	jmp    c001319f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013229:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001322d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013231:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013235:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001323b:	83 ec 0c             	sub    esp,0xc
c001323e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013244:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013249:	05 00 10 00 00       	add    eax,0x1000
c001324e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013255:	e8 1b 46 ff ff       	call   c0007875 <free>
c001325a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001325d:	e8 13 46 ff ff       	call   c0007875 <free>
c0013262:	58                   	pop    eax
c0013263:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013267:	e8 09 46 ff ff       	call   c0007875 <free>
c001326c:	89 34 24             	mov    DWORD PTR [esp],esi
c001326f:	e8 1a 7a ff ff       	call   c000ac8e <File::close()>
c0013274:	83 c4 10             	add    esp,0x10
c0013277:	b0 01                	mov    al,0x1
c0013279:	83 c4 3c             	add    esp,0x3c
c001327c:	5b                   	pop    ebx
c001327d:	5e                   	pop    esi
c001327e:	5f                   	pop    edi
c001327f:	5d                   	pop    ebp
c0013280:	c3                   	ret    

c0013281 <Thr::runtimeReferenceHelper()>:
c0013281:	83 ec 18             	sub    esp,0x18
c0013284:	68 9d 03 02 c0       	push   0xc002039d
c0013289:	e8 6c 73 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001328e:	fa                   	cli    
c001328f:	83 c4 10             	add    esp,0x10
c0013292:	eb fe                	jmp    c0013292 <Thr::runtimeReferenceHelper()+0x11>

c0013294 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013294:	57                   	push   edi
c0013295:	56                   	push   esi
c0013296:	53                   	push   ebx
c0013297:	31 db                	xor    ebx,ebx
c0013299:	39 1d 40 71 02 c0    	cmp    DWORD PTR ds:0xc0027140,ebx
c001329f:	7e 3c                	jle    c00132dd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00132a1:	8b 34 9d c0 70 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8f40]
c00132a8:	31 ff                	xor    edi,edi
c00132aa:	39 3c 9d c0 6f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd9040],edi
c00132b1:	7e 27                	jle    c00132da <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00132b3:	50                   	push   eax
c00132b4:	50                   	push   eax
c00132b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00132b9:	8b 06                	mov    eax,DWORD PTR [esi]
c00132bb:	03 04 9d 40 70 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8fc0]
c00132c2:	50                   	push   eax
c00132c3:	e8 08 d4 fe ff       	call   c00006d0 <strcmp>
c00132c8:	83 c4 10             	add    esp,0x10
c00132cb:	85 c0                	test   eax,eax
c00132cd:	75 05                	jne    c00132d4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00132cf:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00132d2:	eb 0b                	jmp    c00132df <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00132d4:	83 c6 10             	add    esi,0x10
c00132d7:	47                   	inc    edi
c00132d8:	eb d0                	jmp    c00132aa <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00132da:	43                   	inc    ebx
c00132db:	eb bc                	jmp    c0013299 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00132dd:	31 c0                	xor    eax,eax
c00132df:	5b                   	pop    ebx
c00132e0:	5e                   	pop    esi
c00132e1:	5f                   	pop    edi
c00132e2:	c3                   	ret    

c00132e3 <Thr::loadKernelSymbolTable(char const*)>:
c00132e3:	55                   	push   ebp
c00132e4:	57                   	push   edi
c00132e5:	56                   	push   esi
c00132e6:	53                   	push   ebx
c00132e7:	83 ec 68             	sub    esp,0x68
c00132ea:	8b 35 90 71 02 c0    	mov    esi,DWORD PTR ds:0xc0027190
c00132f0:	68 14 01 00 00       	push   0x114
c00132f5:	e8 6b 45 ff ff       	call   c0007865 <malloc>
c00132fa:	83 c4 0c             	add    esp,0xc
c00132fd:	89 c3                	mov    ebx,eax
c00132ff:	56                   	push   esi
c0013300:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013304:	50                   	push   eax
c0013305:	e8 66 78 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c001330a:	5e                   	pop    esi
c001330b:	5f                   	pop    edi
c001330c:	6a 01                	push   0x1
c001330e:	53                   	push   ebx
c001330f:	e8 1c 79 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0013314:	83 c4 10             	add    esp,0x10
c0013317:	85 c0                	test   eax,eax
c0013319:	74 0a                	je     c0013325 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001331b:	83 ec 0c             	sub    esp,0xc
c001331e:	68 bf 03 02 c0       	push   0xc00203bf
c0013323:	eb 34                	jmp    c0013359 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013325:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001332d:	83 ec 0c             	sub    esp,0xc
c0013330:	6a 34                	push   0x34
c0013332:	e8 2e 45 ff ff       	call   c0007865 <malloc>
c0013337:	59                   	pop    ecx
c0013338:	89 c7                	mov    edi,eax
c001333a:	8d 74 24 34          	lea    esi,[esp+0x34]
c001333e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013340:	56                   	push   esi
c0013341:	57                   	push   edi
c0013342:	6a 00                	push   0x0
c0013344:	6a 34                	push   0x34
c0013346:	53                   	push   ebx
c0013347:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001334a:	83 c4 20             	add    esp,0x20
c001334d:	85 c0                	test   eax,eax
c001334f:	74 17                	je     c0013368 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013351:	83 ec 0c             	sub    esp,0xc
c0013354:	68 d6 03 02 c0       	push   0xc00203d6
c0013359:	e8 51 d0 ff ff       	call   c00103af <KePanic(char const*)>
c001335e:	83 c4 10             	add    esp,0x10
c0013361:	31 c0                	xor    eax,eax
c0013363:	e9 31 02 00 00       	jmp    c0013599 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013368:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001336e:	75 e1                	jne    c0013351 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013370:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013373:	85 c0                	test   eax,eax
c0013375:	74 da                	je     c0013351 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013377:	52                   	push   edx
c0013378:	31 d2                	xor    edx,edx
c001337a:	52                   	push   edx
c001337b:	50                   	push   eax
c001337c:	53                   	push   ebx
c001337d:	e8 6c 79 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0013382:	83 c4 10             	add    esp,0x10
c0013385:	85 c0                	test   eax,eax
c0013387:	75 c8                	jne    c0013351 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013389:	83 ec 0c             	sub    esp,0xc
c001338c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013390:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013394:	31 ed                	xor    ebp,ebp
c0013396:	0f af c2             	imul   eax,edx
c0013399:	50                   	push   eax
c001339a:	e8 c6 44 ff ff       	call   c0007865 <malloc>
c001339f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00133a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00133a5:	89 34 24             	mov    DWORD PTR [esp],esi
c00133a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00133ac:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00133b0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00133b4:	0f af c2             	imul   eax,edx
c00133b7:	99                   	cdq    
c00133b8:	52                   	push   edx
c00133b9:	50                   	push   eax
c00133ba:	53                   	push   ebx
c00133bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00133be:	83 c4 20             	add    esp,0x20
c00133c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00133c9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00133d1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00133d9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00133e1:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00133e5:	0f 86 aa 00 00 00    	jbe    c0013495 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00133eb:	0f b7 f5             	movzx  esi,bp
c00133ee:	6b f6 28             	imul   esi,esi,0x28
c00133f1:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00133f5:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00133f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00133fc:	50                   	push   eax
c00133fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013401:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0013405:	8b 16                	mov    edx,DWORD PTR [esi]
c0013407:	6b c0 28             	imul   eax,eax,0x28
c001340a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001340e:	89 d0                	mov    eax,edx
c0013410:	31 d2                	xor    edx,edx
c0013412:	52                   	push   edx
c0013413:	50                   	push   eax
c0013414:	53                   	push   ebx
c0013415:	e8 d4 78 ff ff       	call   c000acee <File::seek(unsigned long long)>
c001341a:	83 c4 0c             	add    esp,0xc
c001341d:	6a 20                	push   0x20
c001341f:	6a 00                	push   0x0
c0013421:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0013425:	52                   	push   edx
c0013426:	e8 95 d0 fe ff       	call   c00004c0 <memset>
c001342b:	58                   	pop    eax
c001342c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001342e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0013432:	51                   	push   ecx
c0013433:	8d 54 24 40          	lea    edx,[esp+0x40]
c0013437:	52                   	push   edx
c0013438:	6a 00                	push   0x0
c001343a:	6a 1f                	push   0x1f
c001343c:	53                   	push   ebx
c001343d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013440:	83 c4 18             	add    esp,0x18
c0013443:	68 ed 03 02 c0       	push   0xc00203ed
c0013448:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001344c:	52                   	push   edx
c001344d:	e8 7e d2 fe ff       	call   c00006d0 <strcmp>
c0013452:	83 c4 10             	add    esp,0x10
c0013455:	85 c0                	test   eax,eax
c0013457:	75 0f                	jne    c0013468 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0013459:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001345c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013460:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013464:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013468:	50                   	push   eax
c0013469:	50                   	push   eax
c001346a:	68 f5 03 02 c0       	push   0xc00203f5
c001346f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0013473:	50                   	push   eax
c0013474:	e8 57 d2 fe ff       	call   c00006d0 <strcmp>
c0013479:	83 c4 10             	add    esp,0x10
c001347c:	85 c0                	test   eax,eax
c001347e:	75 0f                	jne    c001348f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0013480:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013483:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013487:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001348b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001348f:	45                   	inc    ebp
c0013490:	e9 4c ff ff ff       	jmp    c00133e1 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0013495:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001349a:	75 10                	jne    c00134ac <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001349c:	83 ec 0c             	sub    esp,0xc
c001349f:	68 fd 03 02 c0       	push   0xc00203fd
c00134a4:	e8 06 cf ff ff       	call   c00103af <KePanic(char const*)>
c00134a9:	83 c4 10             	add    esp,0x10
c00134ac:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00134b1:	75 10                	jne    c00134c3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00134b3:	83 ec 0c             	sub    esp,0xc
c00134b6:	68 fd 03 02 c0       	push   0xc00203fd
c00134bb:	e8 ef ce ff ff       	call   c00103af <KePanic(char const*)>
c00134c0:	83 c4 10             	add    esp,0x10
c00134c3:	31 d2                	xor    edx,edx
c00134c5:	50                   	push   eax
c00134c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134ca:	52                   	push   edx
c00134cb:	50                   	push   eax
c00134cc:	53                   	push   ebx
c00134cd:	e8 1c 78 ff ff       	call   c000acee <File::seek(unsigned long long)>
c00134d2:	5a                   	pop    edx
c00134d3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00134d7:	e8 89 43 ff ff       	call   c0007865 <malloc>
c00134dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00134e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134e4:	31 c9                	xor    ecx,ecx
c00134e6:	5e                   	pop    esi
c00134e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00134e9:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00134ed:	55                   	push   ebp
c00134ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134f2:	51                   	push   ecx
c00134f3:	52                   	push   edx
c00134f4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00134f8:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00134fc:	53                   	push   ebx
c00134fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013500:	83 c4 14             	add    esp,0x14
c0013503:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013507:	e8 59 43 ff ff       	call   c0007865 <malloc>
c001350c:	89 c6                	mov    esi,eax
c001350e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013510:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013513:	56                   	push   esi
c0013514:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013518:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001351c:	51                   	push   ecx
c001351d:	52                   	push   edx
c001351e:	53                   	push   ebx
c001351f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013522:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013526:	8b 15 40 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027140
c001352c:	83 c4 1c             	add    esp,0x1c
c001352f:	c1 e8 04             	shr    eax,0x4
c0013532:	89 04 95 c0 6f 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9040],eax
c0013539:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001353d:	31 d2                	xor    edx,edx
c001353f:	52                   	push   edx
c0013540:	50                   	push   eax
c0013541:	53                   	push   ebx
c0013542:	e8 a7 77 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0013547:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013549:	31 d2                	xor    edx,edx
c001354b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001354e:	56                   	push   esi
c001354f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013553:	52                   	push   edx
c0013554:	50                   	push   eax
c0013555:	53                   	push   ebx
c0013556:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013559:	83 c4 14             	add    esp,0x14
c001355c:	53                   	push   ebx
c001355d:	e8 2c 77 ff ff       	call   c000ac8e <File::close()>
c0013562:	5d                   	pop    ebp
c0013563:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013567:	e8 09 43 ff ff       	call   c0007875 <free>
c001356c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001356f:	e8 01 43 ff ff       	call   c0007875 <free>
c0013574:	a1 40 71 02 c0       	mov    eax,ds:0xc0027140
c0013579:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001357d:	8d 50 01             	lea    edx,[eax+0x1]
c0013580:	89 0c 85 c0 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f40],ecx
c0013587:	89 34 85 40 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8fc0],esi
c001358e:	89 15 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edx
c0013594:	83 c4 10             	add    esp,0x10
c0013597:	b0 01                	mov    al,0x1
c0013599:	83 c4 5c             	add    esp,0x5c
c001359c:	5b                   	pop    ebx
c001359d:	5e                   	pop    esi
c001359e:	5f                   	pop    edi
c001359f:	5d                   	pop    ebp
c00135a0:	c3                   	ret    

c00135a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00135a1:	55                   	push   ebp
c00135a2:	57                   	push   edi
c00135a3:	56                   	push   esi
c00135a4:	53                   	push   ebx
c00135a5:	81 ec 68 03 00 00    	sub    esp,0x368
c00135ab:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00135b2:	8b 1d 90 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027190
c00135b8:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00135bc:	68 14 01 00 00       	push   0x114
c00135c1:	e8 9f 42 ff ff       	call   c0007865 <malloc>
c00135c6:	83 c4 0c             	add    esp,0xc
c00135c9:	89 c5                	mov    ebp,eax
c00135cb:	53                   	push   ebx
c00135cc:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00135d3:	50                   	push   eax
c00135d4:	e8 97 75 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c00135d9:	5e                   	pop    esi
c00135da:	5f                   	pop    edi
c00135db:	6a 01                	push   0x1
c00135dd:	55                   	push   ebp
c00135de:	e8 4d 76 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c00135e3:	83 c4 10             	add    esp,0x10
c00135e6:	85 c0                	test   eax,eax
c00135e8:	0f 85 a7 06 00 00    	jne    c0013c95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00135ee:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00135f6:	83 ec 0c             	sub    esp,0xc
c00135f9:	6a 34                	push   0x34
c00135fb:	e8 65 42 ff ff       	call   c0007865 <malloc>
c0013600:	5b                   	pop    ebx
c0013601:	89 c7                	mov    edi,eax
c0013603:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0013607:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001360a:	53                   	push   ebx
c001360b:	57                   	push   edi
c001360c:	6a 00                	push   0x0
c001360e:	6a 34                	push   0x34
c0013610:	55                   	push   ebp
c0013611:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013614:	83 c4 20             	add    esp,0x20
c0013617:	85 c0                	test   eax,eax
c0013619:	0f 85 76 06 00 00    	jne    c0013c95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001361f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013625:	0f 85 6a 06 00 00    	jne    c0013c95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001362b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001362e:	85 c0                	test   eax,eax
c0013630:	0f 84 5f 06 00 00    	je     c0013c95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013636:	31 d2                	xor    edx,edx
c0013638:	51                   	push   ecx
c0013639:	52                   	push   edx
c001363a:	50                   	push   eax
c001363b:	55                   	push   ebp
c001363c:	e8 ad 76 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0013641:	83 c4 10             	add    esp,0x10
c0013644:	85 c0                	test   eax,eax
c0013646:	0f 85 49 06 00 00    	jne    c0013c95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001364c:	83 ec 0c             	sub    esp,0xc
c001364f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0013652:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013656:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001365a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001365e:	0f af c2             	imul   eax,edx
c0013661:	50                   	push   eax
c0013662:	e8 fe 41 ff ff       	call   c0007865 <malloc>
c0013667:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001366a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001366e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013671:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013675:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013679:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001367d:	0f af c2             	imul   eax,edx
c0013680:	99                   	cdq    
c0013681:	52                   	push   edx
c0013682:	50                   	push   eax
c0013683:	55                   	push   ebp
c0013684:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013687:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001368a:	83 c4 20             	add    esp,0x20
c001368d:	85 c0                	test   eax,eax
c001368f:	0f 84 00 06 00 00    	je     c0013c95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013695:	52                   	push   edx
c0013696:	31 d2                	xor    edx,edx
c0013698:	52                   	push   edx
c0013699:	50                   	push   eax
c001369a:	55                   	push   ebp
c001369b:	e8 4e 76 ff ff       	call   c000acee <File::seek(unsigned long long)>
c00136a0:	83 c4 10             	add    esp,0x10
c00136a3:	85 c0                	test   eax,eax
c00136a5:	0f 85 ea 05 00 00    	jne    c0013c95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00136ab:	83 ec 0c             	sub    esp,0xc
c00136ae:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00136b2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00136b6:	31 f6                	xor    esi,esi
c00136b8:	0f af c2             	imul   eax,edx
c00136bb:	50                   	push   eax
c00136bc:	e8 a4 41 ff ff       	call   c0007865 <malloc>
c00136c1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00136c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00136c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00136cf:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00136d3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00136d7:	0f af c2             	imul   eax,edx
c00136da:	99                   	cdq    
c00136db:	52                   	push   edx
c00136dc:	50                   	push   eax
c00136dd:	55                   	push   ebp
c00136de:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00136e1:	83 c4 20             	add    esp,0x20
c00136e4:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00136e8:	0f 86 8a 00 00 00    	jbe    c0013778 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00136ee:	0f b7 de             	movzx  ebx,si
c00136f1:	c1 e3 05             	shl    ebx,0x5
c00136f4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00136f8:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00136fb:	75 75                	jne    c0013772 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00136fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013700:	31 d2                	xor    edx,edx
c0013702:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013706:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0013709:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001370d:	50                   	push   eax
c001370e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013711:	52                   	push   edx
c0013712:	50                   	push   eax
c0013713:	55                   	push   ebp
c0013714:	e8 d5 75 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0013719:	83 c4 10             	add    esp,0x10
c001371c:	85 c0                	test   eax,eax
c001371e:	0f 85 71 05 00 00    	jne    c0013c95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013724:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001372b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001372e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0013732:	31 d2                	xor    edx,edx
c0013734:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013738:	83 ec 0c             	sub    esp,0xc
c001373b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001373f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013746:	50                   	push   eax
c0013747:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001374b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001374f:	52                   	push   edx
c0013750:	50                   	push   eax
c0013751:	55                   	push   ebp
c0013752:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013755:	83 c4 1c             	add    esp,0x1c
c0013758:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001375b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001375e:	50                   	push   eax
c001375f:	6a 00                	push   0x0
c0013761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013765:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0013769:	50                   	push   eax
c001376a:	e8 51 cd fe ff       	call   c00004c0 <memset>
c001376f:	83 c4 10             	add    esp,0x10
c0013772:	46                   	inc    esi
c0013773:	e9 6c ff ff ff       	jmp    c00136e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0013778:	53                   	push   ebx
c0013779:	31 db                	xor    ebx,ebx
c001377b:	68 00 01 00 00       	push   0x100
c0013780:	6a 00                	push   0x0
c0013782:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0013786:	50                   	push   eax
c0013787:	e8 34 cd fe ff       	call   c00004c0 <memset>
c001378c:	83 c4 0c             	add    esp,0xc
c001378f:	68 00 01 00 00       	push   0x100
c0013794:	6a 00                	push   0x0
c0013796:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001379d:	50                   	push   eax
c001379e:	e8 1d cd fe ff       	call   c00004c0 <memset>
c00137a3:	83 c4 10             	add    esp,0x10
c00137a6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00137ae:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00137b6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00137be:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00137c6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00137ce:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00137d2:	0f 86 30 01 00 00    	jbe    c0013908 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00137d8:	0f b7 f3             	movzx  esi,bx
c00137db:	6b f6 28             	imul   esi,esi,0x28
c00137de:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00137e2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00137e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137e9:	52                   	push   edx
c00137ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00137ee:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00137f2:	8b 06                	mov    eax,DWORD PTR [esi]
c00137f4:	6b d2 28             	imul   edx,edx,0x28
c00137f7:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00137fb:	31 d2                	xor    edx,edx
c00137fd:	52                   	push   edx
c00137fe:	50                   	push   eax
c00137ff:	55                   	push   ebp
c0013800:	e8 e9 74 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0013805:	83 c4 0c             	add    esp,0xc
c0013808:	6a 20                	push   0x20
c001380a:	6a 00                	push   0x0
c001380c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0013813:	51                   	push   ecx
c0013814:	e8 a7 cc fe ff       	call   c00004c0 <memset>
c0013819:	59                   	pop    ecx
c001381a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001381d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0013821:	52                   	push   edx
c0013822:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0013829:	51                   	push   ecx
c001382a:	6a 00                	push   0x0
c001382c:	6a 1f                	push   0x1f
c001382e:	55                   	push   ebp
c001382f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013832:	83 c4 1c             	add    esp,0x1c
c0013835:	6a 09                	push   0x9
c0013837:	68 17 04 02 c0       	push   0xc0020417
c001383c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0013843:	51                   	push   ecx
c0013844:	e8 37 cb fe ff       	call   c0000380 <memcmp>
c0013849:	83 c4 10             	add    esp,0x10
c001384c:	85 c0                	test   eax,eax
c001384e:	75 21                	jne    c0013871 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0013850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013854:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013858:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001385c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013860:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013863:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001386a:	89 d0                	mov    eax,edx
c001386c:	40                   	inc    eax
c001386d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013871:	50                   	push   eax
c0013872:	6a 09                	push   0x9
c0013874:	68 21 04 02 c0       	push   0xc0020421
c0013879:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013880:	50                   	push   eax
c0013881:	e8 fa ca fe ff       	call   c0000380 <memcmp>
c0013886:	83 c4 10             	add    esp,0x10
c0013889:	85 c0                	test   eax,eax
c001388b:	75 21                	jne    c00138ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001388d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013891:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013895:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0013899:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001389d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00138a0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00138a7:	89 d0                	mov    eax,edx
c00138a9:	40                   	inc    eax
c00138aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00138ae:	50                   	push   eax
c00138af:	50                   	push   eax
c00138b0:	68 ed 03 02 c0       	push   0xc00203ed
c00138b5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00138bc:	50                   	push   eax
c00138bd:	e8 0e ce fe ff       	call   c00006d0 <strcmp>
c00138c2:	83 c4 10             	add    esp,0x10
c00138c5:	85 c0                	test   eax,eax
c00138c7:	75 0f                	jne    c00138d8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00138c9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00138cc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138d4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00138d8:	50                   	push   eax
c00138d9:	50                   	push   eax
c00138da:	68 f5 03 02 c0       	push   0xc00203f5
c00138df:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00138e6:	50                   	push   eax
c00138e7:	e8 e4 cd fe ff       	call   c00006d0 <strcmp>
c00138ec:	83 c4 10             	add    esp,0x10
c00138ef:	85 c0                	test   eax,eax
c00138f1:	75 0f                	jne    c0013902 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00138f3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00138f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00138fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138fe:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0013902:	43                   	inc    ebx
c0013903:	e9 c6 fe ff ff       	jmp    c00137ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0013908:	31 d2                	xor    edx,edx
c001390a:	50                   	push   eax
c001390b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001390f:	52                   	push   edx
c0013910:	50                   	push   eax
c0013911:	55                   	push   ebp
c0013912:	e8 d7 73 ff ff       	call   c000acee <File::seek(unsigned long long)>
c0013917:	58                   	pop    eax
c0013918:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001391c:	e8 44 3f ff ff       	call   c0007865 <malloc>
c0013921:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013924:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013928:	31 d2                	xor    edx,edx
c001392a:	58                   	pop    eax
c001392b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001392f:	53                   	push   ebx
c0013930:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013934:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013938:	52                   	push   edx
c0013939:	50                   	push   eax
c001393a:	55                   	push   ebp
c001393b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001393e:	83 c4 14             	add    esp,0x14
c0013941:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013945:	e8 1b 3f ff ff       	call   c0007865 <malloc>
c001394a:	31 d2                	xor    edx,edx
c001394c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013950:	83 c4 0c             	add    esp,0xc
c0013953:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013957:	52                   	push   edx
c0013958:	50                   	push   eax
c0013959:	55                   	push   ebp
c001395a:	e8 8f 73 ff ff       	call   c000acee <File::seek(unsigned long long)>
c001395f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0013962:	31 d2                	xor    edx,edx
c0013964:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013967:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001396b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001396f:	52                   	push   edx
c0013970:	50                   	push   eax
c0013971:	55                   	push   ebp
c0013972:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013975:	83 c4 20             	add    esp,0x20
c0013978:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013980:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013984:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0013988:	0f 84 0b 03 00 00    	je     c0013c99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001398e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0013995:	31 d2                	xor    edx,edx
c0013997:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001399b:	c1 e8 03             	shr    eax,0x3
c001399e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00139a2:	51                   	push   ecx
c00139a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00139a7:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00139ab:	52                   	push   edx
c00139ac:	50                   	push   eax
c00139ad:	55                   	push   ebp
c00139ae:	e8 3b 73 ff ff       	call   c000acee <File::seek(unsigned long long)>
c00139b3:	5b                   	pop    ebx
c00139b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139b8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00139bf:	e8 a1 3e ff ff       	call   c0007865 <malloc>
c00139c4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00139c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00139cb:	31 d2                	xor    edx,edx
c00139cd:	5e                   	pop    esi
c00139ce:	8d 44 24 58          	lea    eax,[esp+0x58]
c00139d2:	50                   	push   eax
c00139d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00139db:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00139e2:	52                   	push   edx
c00139e3:	50                   	push   eax
c00139e4:	55                   	push   ebp
c00139e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00139e8:	83 c4 20             	add    esp,0x20
c00139eb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00139f3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00139f7:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c00139fb:	0f 8d 7c 02 00 00    	jge    c0013c7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0013a01:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013a05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a09:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0013a0e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0013a11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a19:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0013a1d:	89 d8                	mov    eax,ebx
c0013a1f:	c1 e8 08             	shr    eax,0x8
c0013a22:	89 c6                	mov    esi,eax
c0013a24:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013a28:	c1 e6 04             	shl    esi,0x4
c0013a2b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0013a2f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0013a32:	85 d2                	test   edx,edx
c0013a34:	0f 85 bf 00 00 00    	jne    c0013af9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013a3a:	83 ec 0c             	sub    esp,0xc
c0013a3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013a41:	03 06                	add    eax,DWORD PTR [esi]
c0013a43:	50                   	push   eax
c0013a44:	e8 4b f8 ff ff       	call   c0013294 <Thr::getAddressOfKernelSymbol(char const*)>
c0013a49:	83 c4 10             	add    esp,0x10
c0013a4c:	89 c2                	mov    edx,eax
c0013a4e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0013a53:	85 c0                	test   eax,eax
c0013a55:	0f 85 9e 00 00 00    	jne    c0013af9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013a5b:	83 ec 0c             	sub    esp,0xc
c0013a5e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013a62:	03 06                	add    eax,DWORD PTR [esi]
c0013a64:	50                   	push   eax
c0013a65:	e8 96 ca ff ff       	call   c0010500 <KeResolveCompatibilitySymbol(char*)>
c0013a6a:	83 c4 10             	add    esp,0x10
c0013a6d:	89 c2                	mov    edx,eax
c0013a6f:	85 c0                	test   eax,eax
c0013a71:	0f 85 82 00 00 00    	jne    c0013af9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0013a77:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013a7b:	50                   	push   eax
c0013a7c:	50                   	push   eax
c0013a7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a81:	03 06                	add    eax,DWORD PTR [esi]
c0013a83:	50                   	push   eax
c0013a84:	68 2b 04 02 c0       	push   0xc002042b
c0013a89:	e8 6c 6b ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0013a8e:	58                   	pop    eax
c0013a8f:	5a                   	pop    edx
c0013a90:	68 45 04 02 c0       	push   0xc0020445
c0013a95:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013a9c:	50                   	push   eax
c0013a9d:	e8 4e cb fe ff       	call   c00005f0 <strcpy>
c0013aa2:	59                   	pop    ecx
c0013aa3:	58                   	pop    eax
c0013aa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013aa8:	03 06                	add    eax,DWORD PTR [esi]
c0013aaa:	50                   	push   eax
c0013aab:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013ab2:	50                   	push   eax
c0013ab3:	e8 f8 cc fe ff       	call   c00007b0 <strcat>
c0013ab8:	58                   	pop    eax
c0013ab9:	5a                   	pop    edx
c0013aba:	68 db 04 02 c0       	push   0xc00204db
c0013abf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013ac6:	50                   	push   eax
c0013ac7:	e8 e4 cc fe ff       	call   c00007b0 <strcat>
c0013acc:	83 c4 10             	add    esp,0x10
c0013acf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013ad4:	0f 84 5d 01 00 00    	je     c0013c37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013ada:	83 ec 0c             	sub    esp,0xc
c0013add:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0013ae4:	50                   	push   eax
c0013ae5:	e8 c5 c8 ff ff       	call   c00103af <KePanic(char const*)>
c0013aea:	83 c4 10             	add    esp,0x10
c0013aed:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0013af1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013af5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0013af9:	80 fb 01             	cmp    bl,0x1
c0013afc:	0f 85 88 00 00 00    	jne    c0013b8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0013b02:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0013b09:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0013b0d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0013b11:	01 ce                	add    esi,ecx
c0013b13:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0013b19:	0f 94 c0             	sete   al
c0013b1c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0013b22:	0f 94 c3             	sete   bl
c0013b25:	09 c3                	or     ebx,eax
c0013b27:	8b 06                	mov    eax,DWORD PTR [esi]
c0013b29:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013b2e:	74 41                	je     c0013b71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0013b30:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013b33:	84 db                	test   bl,bl
c0013b35:	75 15                	jne    c0013b4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0013b37:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013b3b:	66 83 f8 0c          	cmp    ax,0xc
c0013b3f:	76 05                	jbe    c0013b46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0013b41:	b8 0c 00 00 00       	mov    eax,0xc
c0013b46:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013b4a:	76 37                	jbe    c0013b83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013b4c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0013b50:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013b55:	0f 84 dc 00 00 00    	je     c0013c37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013b5b:	83 ec 0c             	sub    esp,0xc
c0013b5e:	68 5c 04 02 c0       	push   0xc002045c
c0013b63:	e8 47 c8 ff ff       	call   c00103af <KePanic(char const*)>
c0013b68:	83 c4 10             	add    esp,0x10
c0013b6b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013b6f:	eb 12                	jmp    c0013b83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013b71:	01 c1                	add    ecx,eax
c0013b73:	84 db                	test   bl,bl
c0013b75:	75 0c                	jne    c0013b83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013b77:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013b7b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0013b7f:	77 02                	ja     c0013b83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0013b81:	01 d1                	add    ecx,edx
c0013b83:	89 0e                	mov    DWORD PTR [esi],ecx
c0013b85:	e9 ea 00 00 00       	jmp    c0013c74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013b8a:	80 fb 02             	cmp    bl,0x2
c0013b8d:	75 7c                	jne    c0013c0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0013b8f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0013b96:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0013b9a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0013b9e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0013ba4:	74 20                	je     c0013bc6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0013ba6:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0013bac:	74 18                	je     c0013bc6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0013bae:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013bb2:	b9 0a 00 00 00       	mov    ecx,0xa
c0013bb7:	66 83 f8 0e          	cmp    ax,0xe
c0013bbb:	77 03                	ja     c0013bc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0013bbd:	8d 48 fc             	lea    ecx,[eax-0x4]
c0013bc0:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0013bc4:	76 1f                	jbe    c0013be5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0013bc6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0013bca:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013bcf:	74 66                	je     c0013c37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013bd1:	83 ec 0c             	sub    esp,0xc
c0013bd4:	68 78 04 02 c0       	push   0xc0020478
c0013bd9:	e8 d1 c7 ff ff       	call   c00103af <KePanic(char const*)>
c0013bde:	83 c4 10             	add    esp,0x10
c0013be1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013be5:	8b 06                	mov    eax,DWORD PTR [esi]
c0013be7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0013bec:	74 13                	je     c0013c01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0013bee:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0013bf2:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0013bf9:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0013bfd:	01 c8                	add    eax,ecx
c0013bff:	eb 04                	jmp    c0013c05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0013c01:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0013c05:	01 c2                	add    edx,eax
c0013c07:	89 16                	mov    DWORD PTR [esi],edx
c0013c09:	eb 69                	jmp    c0013c74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013c0b:	0f b6 db             	movzx  ebx,bl
c0013c0e:	50                   	push   eax
c0013c0f:	50                   	push   eax
c0013c10:	53                   	push   ebx
c0013c11:	68 94 04 02 c0       	push   0xc0020494
c0013c16:	e8 df 69 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0013c1b:	83 c4 10             	add    esp,0x10
c0013c1e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013c23:	74 12                	je     c0013c37 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0013c25:	83 ec 0c             	sub    esp,0xc
c0013c28:	68 9f 04 02 c0       	push   0xc002049f
c0013c2d:	e8 7d c7 ff ff       	call   c00103af <KePanic(char const*)>
c0013c32:	83 c4 10             	add    esp,0x10
c0013c35:	eb 3d                	jmp    c0013c74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0013c37:	83 ec 0c             	sub    esp,0xc
c0013c3a:	55                   	push   ebp
c0013c3b:	e8 4e 70 ff ff       	call   c000ac8e <File::close()>
c0013c40:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013c43:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013c46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c49:	59                   	pop    ecx
c0013c4a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c4e:	e8 22 3c ff ff       	call   c0007875 <free>
c0013c53:	5b                   	pop    ebx
c0013c54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013c58:	e8 18 3c ff ff       	call   c0007875 <free>
c0013c5d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013c60:	e8 10 3c ff ff       	call   c0007875 <free>
c0013c65:	5e                   	pop    esi
c0013c66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c6a:	e8 06 3c ff ff       	call   c0007875 <free>
c0013c6f:	83 c4 10             	add    esp,0x10
c0013c72:	eb 21                	jmp    c0013c95 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0013c74:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0013c78:	e9 76 fd ff ff       	jmp    c00139f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0013c7d:	83 ec 0c             	sub    esp,0xc
c0013c80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c84:	e8 ec 3b ff ff       	call   c0007875 <free>
c0013c89:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0013c8d:	83 c4 10             	add    esp,0x10
c0013c90:	e9 eb fc ff ff       	jmp    c0013980 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0013c95:	31 c0                	xor    eax,eax
c0013c97:	eb 33                	jmp    c0013ccc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0013c99:	83 ec 0c             	sub    esp,0xc
c0013c9c:	55                   	push   ebp
c0013c9d:	e8 ec 6f ff ff       	call   c000ac8e <File::close()>
c0013ca2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ca5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013ca8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013cab:	58                   	pop    eax
c0013cac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013cb0:	e8 c0 3b ff ff       	call   c0007875 <free>
c0013cb5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013cb8:	e8 b8 3b ff ff       	call   c0007875 <free>
c0013cbd:	5a                   	pop    edx
c0013cbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cc2:	e8 ae 3b ff ff       	call   c0007875 <free>
c0013cc7:	83 c4 10             	add    esp,0x10
c0013cca:	b0 01                	mov    al,0x1
c0013ccc:	81 c4 5c 03 00 00    	add    esp,0x35c
c0013cd2:	5b                   	pop    ebx
c0013cd3:	5e                   	pop    esi
c0013cd4:	5f                   	pop    edi
c0013cd5:	5d                   	pop    ebp
c0013cd6:	c3                   	ret    

c0013cd7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0013cd7:	56                   	push   esi
c0013cd8:	31 d2                	xor    edx,edx
c0013cda:	53                   	push   ebx
c0013cdb:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c0013ce1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013ce5:	39 d3                	cmp    ebx,edx
c0013ce7:	7e 1b                	jle    c0013d04 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0013ce9:	8b 04 95 c0 6b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9440]
c0013cf0:	39 c8                	cmp    eax,ecx
c0013cf2:	77 0d                	ja     c0013d01 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0013cf4:	8b 34 95 c0 69 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd9640]
c0013cfb:	01 c6                	add    esi,eax
c0013cfd:	39 ce                	cmp    esi,ecx
c0013cff:	77 05                	ja     c0013d06 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0013d01:	42                   	inc    edx
c0013d02:	eb e1                	jmp    c0013ce5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0013d04:	31 c0                	xor    eax,eax
c0013d06:	5b                   	pop    ebx
c0013d07:	5e                   	pop    esi
c0013d08:	c3                   	ret    

c0013d09 <Thr::getDriverNameFromAddress(unsigned long)>:
c0013d09:	53                   	push   ebx
c0013d0a:	31 c0                	xor    eax,eax
c0013d0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013d10:	8b 1d a0 69 02 c0    	mov    ebx,DWORD PTR ds:0xc00269a0
c0013d16:	39 c3                	cmp    ebx,eax
c0013d18:	7e 22                	jle    c0013d3c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0013d1a:	8b 14 85 c0 6b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9440]
c0013d21:	39 ca                	cmp    edx,ecx
c0013d23:	77 14                	ja     c0013d39 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013d25:	03 14 85 c0 69 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd9640]
c0013d2c:	39 ca                	cmp    edx,ecx
c0013d2e:	76 09                	jbe    c0013d39 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0013d30:	8b 04 85 c0 6d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9240]
c0013d37:	eb 05                	jmp    c0013d3e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0013d39:	40                   	inc    eax
c0013d3a:	eb da                	jmp    c0013d16 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0013d3c:	31 c0                	xor    eax,eax
c0013d3e:	5b                   	pop    ebx
c0013d3f:	c3                   	ret    

c0013d40 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0013d40:	53                   	push   ebx
c0013d41:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0013d45:	53                   	push   ebx
c0013d46:	e8 8c ff ff ff       	call   c0013cd7 <Thr::getDriverBaseFromAddress(unsigned long)>
c0013d4b:	5a                   	pop    edx
c0013d4c:	31 d2                	xor    edx,edx
c0013d4e:	85 c0                	test   eax,eax
c0013d50:	74 04                	je     c0013d56 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0013d52:	89 da                	mov    edx,ebx
c0013d54:	29 c2                	sub    edx,eax
c0013d56:	89 d0                	mov    eax,edx
c0013d58:	5b                   	pop    ebx
c0013d59:	c3                   	ret    

c0013d5a <Thr::loadDLL(char const*, bool)>:
c0013d5a:	55                   	push   ebp
c0013d5b:	57                   	push   edi
c0013d5c:	56                   	push   esi
c0013d5d:	53                   	push   ebx
c0013d5e:	81 ec 34 01 00 00    	sub    esp,0x134
c0013d64:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0013d6b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0013d72:	56                   	push   esi
c0013d73:	68 b7 04 02 c0       	push   0xc00204b7
c0013d78:	e8 7d 68 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0013d7d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013d84:	e8 dc 3a ff ff       	call   c0007865 <malloc>
c0013d89:	83 c4 0c             	add    esp,0xc
c0013d8c:	89 c3                	mov    ebx,eax
c0013d8e:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0013d94:	56                   	push   esi
c0013d95:	50                   	push   eax
c0013d96:	e8 d5 6d ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0013d9b:	83 c4 10             	add    esp,0x10
c0013d9e:	85 db                	test   ebx,ebx
c0013da0:	75 3c                	jne    c0013dde <Thr::loadDLL(char const*, bool)+0x84>
c0013da2:	89 f8                	mov    eax,edi
c0013da4:	84 c0                	test   al,al
c0013da6:	0f 84 d2 01 00 00    	je     c0013f7e <Thr::loadDLL(char const*, bool)+0x224>
c0013dac:	55                   	push   ebp
c0013dad:	55                   	push   ebp
c0013dae:	68 c8 04 02 c0       	push   0xc00204c8
c0013db3:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0013db7:	55                   	push   ebp
c0013db8:	e8 33 c8 fe ff       	call   c00005f0 <strcpy>
c0013dbd:	58                   	pop    eax
c0013dbe:	5a                   	pop    edx
c0013dbf:	56                   	push   esi
c0013dc0:	55                   	push   ebp
c0013dc1:	e8 ea c9 fe ff       	call   c00007b0 <strcat>
c0013dc6:	59                   	pop    ecx
c0013dc7:	58                   	pop    eax
c0013dc8:	68 db 04 02 c0       	push   0xc00204db
c0013dcd:	55                   	push   ebp
c0013dce:	e8 dd c9 fe ff       	call   c00007b0 <strcat>
c0013dd3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013dd6:	e8 d4 c5 ff ff       	call   c00103af <KePanic(char const*)>
c0013ddb:	83 c4 10             	add    esp,0x10
c0013dde:	51                   	push   ecx
c0013ddf:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0013de3:	50                   	push   eax
c0013de4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013de8:	50                   	push   eax
c0013de9:	53                   	push   ebx
c0013dea:	e8 ed 70 ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c0013def:	83 c4 10             	add    esp,0x10
c0013df2:	85 db                	test   ebx,ebx
c0013df4:	74 0c                	je     c0013e02 <Thr::loadDLL(char const*, bool)+0xa8>
c0013df6:	83 ec 0c             	sub    esp,0xc
c0013df9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dfb:	53                   	push   ebx
c0013dfc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013dff:	83 c4 10             	add    esp,0x10
c0013e02:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0013e07:	75 0a                	jne    c0013e13 <Thr::loadDLL(char const*, bool)+0xb9>
c0013e09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e0d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0013e11:	75 3c                	jne    c0013e4f <Thr::loadDLL(char const*, bool)+0xf5>
c0013e13:	89 f8                	mov    eax,edi
c0013e15:	84 c0                	test   al,al
c0013e17:	0f 84 49 01 00 00    	je     c0013f66 <Thr::loadDLL(char const*, bool)+0x20c>
c0013e1d:	51                   	push   ecx
c0013e1e:	51                   	push   ecx
c0013e1f:	68 c8 04 02 c0       	push   0xc00204c8
c0013e24:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0013e28:	53                   	push   ebx
c0013e29:	e8 c2 c7 fe ff       	call   c00005f0 <strcpy>
c0013e2e:	5d                   	pop    ebp
c0013e2f:	58                   	pop    eax
c0013e30:	56                   	push   esi
c0013e31:	53                   	push   ebx
c0013e32:	e8 79 c9 fe ff       	call   c00007b0 <strcat>
c0013e37:	58                   	pop    eax
c0013e38:	5a                   	pop    edx
c0013e39:	68 db 04 02 c0       	push   0xc00204db
c0013e3e:	53                   	push   ebx
c0013e3f:	e8 6c c9 fe ff       	call   c00007b0 <strcat>
c0013e44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e47:	e8 63 c5 ff ff       	call   c00103af <KePanic(char const*)>
c0013e4c:	83 c4 10             	add    esp,0x10
c0013e4f:	52                   	push   edx
c0013e50:	6a 03                	push   0x3
c0013e52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e56:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e5a:	05 ff 0f 00 00       	add    eax,0xfff
c0013e5f:	83 d2 00             	adc    edx,0x0
c0013e62:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013e66:	50                   	push   eax
c0013e67:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0013e6d:	e8 92 5c ff ff       	call   c0009b04 <VAS::allocatePages(int, int)>
c0013e72:	59                   	pop    ecx
c0013e73:	89 c3                	mov    ebx,eax
c0013e75:	5d                   	pop    ebp
c0013e76:	50                   	push   eax
c0013e77:	68 32 f1 01 c0       	push   0xc001f132
c0013e7c:	e8 79 67 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0013e81:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e84:	e8 a7 c6 fe ff       	call   c0000530 <strlen>
c0013e89:	8b 2d a0 69 02 c0    	mov    ebp,DWORD PTR ds:0xc00269a0
c0013e8f:	40                   	inc    eax
c0013e90:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e93:	e8 cd 39 ff ff       	call   c0007865 <malloc>
c0013e98:	89 04 ad c0 6d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd9240],eax
c0013e9f:	58                   	pop    eax
c0013ea0:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0013ea5:	5a                   	pop    edx
c0013ea6:	56                   	push   esi
c0013ea7:	ff 34 85 c0 6d 02 c0 	push   DWORD PTR [eax*4-0x3ffd9240]
c0013eae:	e8 3d c7 fe ff       	call   c00005f0 <strcpy>
c0013eb3:	a1 a0 69 02 c0       	mov    eax,ds:0xc00269a0
c0013eb8:	8d 50 01             	lea    edx,[eax+0x1]
c0013ebb:	89 1c 85 c0 6b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9440],ebx
c0013ec2:	89 15 a0 69 02 c0    	mov    DWORD PTR ds:0xc00269a0,edx
c0013ec8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013ecc:	83 c4 0c             	add    esp,0xc
c0013ecf:	89 14 85 c0 69 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9640],edx
c0013ed6:	6a 01                	push   0x1
c0013ed8:	53                   	push   ebx
c0013ed9:	56                   	push   esi
c0013eda:	e8 c2 f6 ff ff       	call   c00135a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0013edf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013ee3:	83 c4 10             	add    esp,0x10
c0013ee6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013eeb:	0f 85 89 00 00 00    	jne    c0013f7a <Thr::loadDLL(char const*, bool)+0x220>
c0013ef1:	89 f8                	mov    eax,edi
c0013ef3:	84 c0                	test   al,al
c0013ef5:	74 73                	je     c0013f6a <Thr::loadDLL(char const*, bool)+0x210>
c0013ef7:	83 ec 0c             	sub    esp,0xc
c0013efa:	68 dd 04 02 c0       	push   0xc00204dd
c0013eff:	e8 ab c4 ff ff       	call   c00103af <KePanic(char const*)>
c0013f04:	83 c4 10             	add    esp,0x10
c0013f07:	eb 61                	jmp    c0013f6a <Thr::loadDLL(char const*, bool)+0x210>
c0013f09:	50                   	push   eax
c0013f0a:	50                   	push   eax
c0013f0b:	89 e8                	mov    eax,ebp
c0013f0d:	c1 e0 0c             	shl    eax,0xc
c0013f10:	01 d8                	add    eax,ebx
c0013f12:	50                   	push   eax
c0013f13:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c0013f19:	e8 f4 56 ff ff       	call   c0009612 <VAS::getPageTableEntry(unsigned long)>
c0013f1e:	83 c4 10             	add    esp,0x10
c0013f21:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f23:	a8 60                	test   al,0x60
c0013f25:	75 11                	jne    c0013f38 <Thr::loadDLL(char const*, bool)+0x1de>
c0013f27:	83 ec 0c             	sub    esp,0xc
c0013f2a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013f2f:	50                   	push   eax
c0013f30:	e8 aa 3b ff ff       	call   c0007adf <Phys::freePage(unsigned long)>
c0013f35:	83 c4 10             	add    esp,0x10
c0013f38:	45                   	inc    ebp
c0013f39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013f3d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013f41:	05 ff 0f 00 00       	add    eax,0xfff
c0013f46:	bf 00 00 00 00       	mov    edi,0x0
c0013f4b:	83 d2 00             	adc    edx,0x0
c0013f4e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013f52:	c1 ea 0c             	shr    edx,0xc
c0013f55:	39 c5                	cmp    ebp,eax
c0013f57:	89 d1                	mov    ecx,edx
c0013f59:	89 f8                	mov    eax,edi
c0013f5b:	19 c8                	sbb    eax,ecx
c0013f5d:	72 aa                	jb     c0013f09 <Thr::loadDLL(char const*, bool)+0x1af>
c0013f5f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013f64:	75 18                	jne    c0013f7e <Thr::loadDLL(char const*, bool)+0x224>
c0013f66:	31 db                	xor    ebx,ebx
c0013f68:	eb 14                	jmp    c0013f7e <Thr::loadDLL(char const*, bool)+0x224>
c0013f6a:	83 ec 0c             	sub    esp,0xc
c0013f6d:	68 fc 04 02 c0       	push   0xc00204fc
c0013f72:	e8 38 c4 ff ff       	call   c00103af <KePanic(char const*)>
c0013f77:	83 c4 10             	add    esp,0x10
c0013f7a:	31 ed                	xor    ebp,ebp
c0013f7c:	eb bb                	jmp    c0013f39 <Thr::loadDLL(char const*, bool)+0x1df>
c0013f7e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013f84:	89 d8                	mov    eax,ebx
c0013f86:	5b                   	pop    ebx
c0013f87:	5e                   	pop    esi
c0013f88:	5f                   	pop    edi
c0013f89:	5d                   	pop    ebp
c0013f8a:	c3                   	ret    

c0013f8b <Thr::executeDLL(unsigned long, void*)>:
c0013f8b:	56                   	push   esi
c0013f8c:	53                   	push   ebx
c0013f8d:	52                   	push   edx
c0013f8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f92:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f96:	85 db                	test   ebx,ebx
c0013f98:	75 10                	jne    c0013faa <Thr::executeDLL(unsigned long, void*)+0x1f>
c0013f9a:	83 ec 0c             	sub    esp,0xc
c0013f9d:	68 18 05 02 c0       	push   0xc0020518
c0013fa2:	e8 08 c4 ff ff       	call   c00103af <KePanic(char const*)>
c0013fa7:	83 c4 10             	add    esp,0x10
c0013faa:	50                   	push   eax
c0013fab:	50                   	push   eax
c0013fac:	53                   	push   ebx
c0013fad:	68 42 05 02 c0       	push   0xc0020542
c0013fb2:	e8 43 66 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0013fb7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013fbb:	89 d8                	mov    eax,ebx
c0013fbd:	83 c4 14             	add    esp,0x14
c0013fc0:	5b                   	pop    ebx
c0013fc1:	5e                   	pop    esi
c0013fc2:	ff e0                	jmp    eax

c0013fc4 <userModeEntryPoint(void*)>:
c0013fc4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0013fc9:	48                   	dec    eax
c0013fca:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0013fcf:	75 03                	jne    c0013fd4 <userModeEntryPoint(void*)+0x10>
c0013fd1:	fb                   	sti    
c0013fd2:	66 90                	xchg   ax,ax
c0013fd4:	fb                   	sti    
c0013fd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fda:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013fdd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0013fe3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013fe7:	e9 53 c2 fe ff       	jmp    c000023f <goToUsermode>

c0013fec <changeTSS>:
c0013fec:	83 ec 14             	sub    esp,0x14
c0013fef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ff4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0013ff7:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0013ffc:	c1 e2 15             	shl    edx,0x15
c0013fff:	29 d0                	sub    eax,edx
c0014001:	50                   	push   eax
c0014002:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0014007:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001400d:	05 7c 11 00 00       	add    eax,0x117c
c0014012:	50                   	push   eax
c0014013:	e8 78 4c ff ff       	call   c0008c90 <TSS::setESP(unsigned long)>
c0014018:	83 c4 1c             	add    esp,0x1c
c001401b:	c3                   	ret    

c001401c <switchToThread(ThreadControlBlock*)>:
c001401c:	57                   	push   edi
c001401d:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014022:	56                   	push   esi
c0014023:	85 c0                	test   eax,eax
c0014025:	53                   	push   ebx
c0014026:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001402a:	0f 85 90 00 00 00    	jne    c00140c0 <switchToThread(ThreadControlBlock*)+0xa4>
c0014030:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0014033:	80 fa ff             	cmp    dl,0xff
c0014036:	0f 84 80 00 00 00    	je     c00140bc <switchToThread(ThreadControlBlock*)+0xa0>
c001403c:	81 e2 ff 00 00 00    	and    edx,0xff
c0014042:	b8 00 04 00 00       	mov    eax,0x400
c0014047:	29 d0                	sub    eax,edx
c0014049:	d1 f8                	sar    eax,1
c001404b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c001404e:	66 90                	xchg   ax,ax
c0014050:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014053:	e8 80 26 00 00       	call   c00166d8 <HalQueryPerformanceCounter()>
c0014058:	a3 a8 71 02 c0       	mov    ds:0xc00271a8,eax
c001405d:	89 15 ac 71 02 c0    	mov    DWORD PTR ds:0xc00271ac,edx
c0014063:	89 c6                	mov    esi,eax
c0014065:	89 d7                	mov    edi,edx
c0014067:	2b 35 98 71 02 c0    	sub    esi,DWORD PTR ds:0xc0027198
c001406d:	a3 98 71 02 c0       	mov    ds:0xc0027198,eax
c0014072:	1b 3d 9c 71 02 c0    	sbb    edi,DWORD PTR ds:0xc002719c
c0014078:	89 35 a0 71 02 c0    	mov    DWORD PTR ds:0xc00271a0,esi
c001407e:	89 3d a4 71 02 c0    	mov    DWORD PTR ds:0xc00271a4,edi
c0014084:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001408a:	89 15 9c 71 02 c0    	mov    DWORD PTR ds:0xc002719c,edx
c0014090:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014093:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014096:	01 c6                	add    esi,eax
c0014098:	11 d7                	adc    edi,edx
c001409a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001409d:	83 ec 0c             	sub    esp,0xc
c00140a0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c00140a3:	53                   	push   ebx
c00140a4:	e8 ce c1 fe ff       	call   c0000277 <switchToThreadASM>
c00140a9:	0f 20 c0             	mov    eax,cr0
c00140ac:	83 c8 08             	or     eax,0x8
c00140af:	0f 22 c0             	mov    cr0,eax
c00140b2:	83 c4 10             	add    esp,0x10
c00140b5:	5b                   	pop    ebx
c00140b6:	5e                   	pop    esi
c00140b7:	5f                   	pop    edi
c00140b8:	c3                   	ret    
c00140b9:	8d 76 00             	lea    esi,[esi+0x0]
c00140bc:	31 c0                	xor    eax,eax
c00140be:	eb 90                	jmp    c0014050 <switchToThread(ThreadControlBlock*)+0x34>
c00140c0:	5b                   	pop    ebx
c00140c1:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c00140cb:	5e                   	pop    esi
c00140cc:	5f                   	pop    edi
c00140cd:	c3                   	ret    
c00140ce:	66 90                	xchg   ax,ax

c00140d0 <Process::addArgs(char**)>:
c00140d0:	57                   	push   edi
c00140d1:	56                   	push   esi
c00140d2:	53                   	push   ebx
c00140d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00140db:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00140e5:	85 ff                	test   edi,edi
c00140e7:	74 43                	je     c001412c <Process::addArgs(char**)+0x5c>
c00140e9:	8b 07                	mov    eax,DWORD PTR [edi]
c00140eb:	85 c0                	test   eax,eax
c00140ed:	74 3d                	je     c001412c <Process::addArgs(char**)+0x5c>
c00140ef:	31 db                	xor    ebx,ebx
c00140f1:	8d 76 00             	lea    esi,[esi+0x0]
c00140f4:	83 ec 0c             	sub    esp,0xc
c00140f7:	50                   	push   eax
c00140f8:	e8 33 c4 fe ff       	call   c0000530 <strlen>
c00140fd:	40                   	inc    eax
c00140fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0014101:	e8 5f 37 ff ff       	call   c0007865 <malloc>
c0014106:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001410d:	5a                   	pop    edx
c001410e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014111:	59                   	pop    ecx
c0014112:	43                   	inc    ebx
c0014113:	52                   	push   edx
c0014114:	50                   	push   eax
c0014115:	e8 d6 c4 fe ff       	call   c00005f0 <strcpy>
c001411a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0014120:	83 c4 10             	add    esp,0x10
c0014123:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014126:	85 c0                	test   eax,eax
c0014128:	75 ca                	jne    c00140f4 <Process::addArgs(char**)+0x24>
c001412a:	66 90                	xchg   ax,ax
c001412c:	5b                   	pop    ebx
c001412d:	5e                   	pop    esi
c001412e:	5f                   	pop    edi
c001412f:	c3                   	ret    

c0014130 <Process::Process(char const*, Process*, char**)>:
c0014130:	56                   	push   esi
c0014131:	53                   	push   ebx
c0014132:	83 ec 14             	sub    esp,0x14
c0014135:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014139:	05 0c 02 00 00       	add    eax,0x20c
c001413e:	bb 07 00 00 00       	mov    ebx,0x7
c0014143:	89 c6                	mov    esi,eax
c0014145:	8d 76 00             	lea    esi,[esi+0x0]
c0014148:	85 db                	test   ebx,ebx
c001414a:	78 14                	js     c0014160 <Process::Process(char const*, Process*, char**)+0x30>
c001414c:	83 ec 0c             	sub    esp,0xc
c001414f:	56                   	push   esi
c0014150:	e8 67 a2 00 00       	call   c001e3bc <ThreadControlBlock::ThreadControlBlock()>
c0014155:	83 c4 10             	add    esp,0x10
c0014158:	83 c6 5f             	add    esi,0x5f
c001415b:	4b                   	dec    ebx
c001415c:	eb ea                	jmp    c0014148 <Process::Process(char const*, Process*, char**)+0x18>
c001415e:	66 90                	xchg   ax,ax
c0014160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014164:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001416b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001416f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014176:	83 ec 0c             	sub    esp,0xc
c0014179:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001417d:	e8 22 c0 ff ff       	call   c00101a4 <Krnl::newProcessEnv(Process*)>
c0014182:	83 c4 10             	add    esp,0x10
c0014185:	89 c2                	mov    edx,eax
c0014187:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001418b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014195:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001419e:	a1 e0 16 02 c0       	mov    eax,ds:0xc00216e0
c00141a3:	8d 50 01             	lea    edx,[eax+0x1]
c00141a6:	89 15 e0 16 02 c0    	mov    DWORD PTR ds:0xc00216e0,edx
c00141ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00141b0:	89 02                	mov    DWORD PTR [edx],eax
c00141b2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00141ba:	83 ec 0c             	sub    esp,0xc
c00141bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141c1:	e8 9f 36 ff ff       	call   c0007865 <malloc>
c00141c6:	83 c4 10             	add    esp,0x10
c00141c9:	89 c3                	mov    ebx,eax
c00141cb:	83 ec 08             	sub    esp,0x8
c00141ce:	6a 00                	push   0x0
c00141d0:	53                   	push   ebx
c00141d1:	e8 d8 5c ff ff       	call   c0009eae <VAS::VAS(bool)>
c00141d6:	83 c4 10             	add    esp,0x10
c00141d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141dd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00141e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141e7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00141f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00141f9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00141ff:	e8 16 c5 ff ff       	call   c001071a <KeInitSignals()>
c0014204:	89 c2                	mov    edx,eax
c0014206:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001420a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014214:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001421a:	85 c0                	test   eax,eax
c001421c:	74 42                	je     c0014260 <Process::Process(char const*, Process*, char**)+0x130>
c001421e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014222:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014228:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001422e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014232:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014238:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001423c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014242:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001424c:	05 0c 01 00 00       	add    eax,0x10c
c0014251:	83 ec 08             	sub    esp,0x8
c0014254:	52                   	push   edx
c0014255:	50                   	push   eax
c0014256:	e8 95 c3 fe ff       	call   c00005f0 <strcpy>
c001425b:	83 c4 10             	add    esp,0x10
c001425e:	eb 64                	jmp    c00142c4 <Process::Process(char const*, Process*, char**)+0x194>
c0014260:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014268:	83 ec 0c             	sub    esp,0xc
c001426b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001426f:	e8 f1 35 ff ff       	call   c0007865 <malloc>
c0014274:	83 c4 10             	add    esp,0x10
c0014277:	89 c3                	mov    ebx,eax
c0014279:	83 ec 08             	sub    esp,0x8
c001427c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014280:	53                   	push   ebx
c0014281:	e8 1a 47 ff ff       	call   c00089a0 <VgaText::VgaText(char const*)>
c0014286:	83 c4 10             	add    esp,0x10
c0014289:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001428d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014293:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014297:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001429d:	83 ec 0c             	sub    esp,0xc
c00142a0:	50                   	push   eax
c00142a1:	e8 a0 3f ff ff       	call   c0008246 <addToTerminalCycle(VgaText*)>
c00142a6:	83 c4 10             	add    esp,0x10
c00142a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142ad:	05 0c 01 00 00       	add    eax,0x10c
c00142b2:	83 ec 08             	sub    esp,0x8
c00142b5:	68 61 05 02 c0       	push   0xc0020561
c00142ba:	50                   	push   eax
c00142bb:	e8 30 c3 fe ff       	call   c00005f0 <strcpy>
c00142c0:	83 c4 10             	add    esp,0x10
c00142c3:	90                   	nop
c00142c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00142c8:	83 c0 0c             	add    eax,0xc
c00142cb:	83 ec 08             	sub    esp,0x8
c00142ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00142d2:	50                   	push   eax
c00142d3:	e8 18 c3 fe ff       	call   c00005f0 <strcpy>
c00142d8:	83 c4 10             	add    esp,0x10
c00142db:	83 ec 08             	sub    esp,0x8
c00142de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00142e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00142e6:	e8 e5 fd ff ff       	call   c00140d0 <Process::addArgs(char**)>
c00142eb:	83 c4 10             	add    esp,0x10
c00142ee:	83 ec 08             	sub    esp,0x8
c00142f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00142f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00142f9:	e8 6d ed ff ff       	call   c001306b <Thr::loadProgramIntoMemory(Process*, char const*)>
c00142fe:	83 c4 10             	add    esp,0x10
c0014301:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014305:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014309:	83 f0 01             	xor    eax,0x1
c001430c:	88 c2                	mov    dl,al
c001430e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014312:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014318:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001431c:	25 ff 00 00 00       	and    eax,0xff
c0014321:	83 ec 08             	sub    esp,0x8
c0014324:	50                   	push   eax
c0014325:	68 b8 05 02 c0       	push   0xc00205b8
c001432a:	e8 cb 62 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001432f:	83 c4 10             	add    esp,0x10
c0014332:	90                   	nop
c0014333:	83 c4 14             	add    esp,0x14
c0014336:	5b                   	pop    ebx
c0014337:	5e                   	pop    esi
c0014338:	c3                   	ret    
c0014339:	90                   	nop
c001433a:	66 90                	xchg   ax,ax

c001433c <Process::Process(bool, char const*, Process*, char**)>:
c001433c:	56                   	push   esi
c001433d:	53                   	push   ebx
c001433e:	83 ec 24             	sub    esp,0x24
c0014341:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014345:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0014349:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001434d:	05 0c 02 00 00       	add    eax,0x20c
c0014352:	bb 07 00 00 00       	mov    ebx,0x7
c0014357:	89 c6                	mov    esi,eax
c0014359:	8d 76 00             	lea    esi,[esi+0x0]
c001435c:	85 db                	test   ebx,ebx
c001435e:	78 14                	js     c0014374 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0014360:	83 ec 0c             	sub    esp,0xc
c0014363:	56                   	push   esi
c0014364:	e8 53 a0 00 00       	call   c001e3bc <ThreadControlBlock::ThreadControlBlock()>
c0014369:	83 c4 10             	add    esp,0x10
c001436c:	83 c6 5f             	add    esi,0x5f
c001436f:	4b                   	dec    ebx
c0014370:	eb ea                	jmp    c001435c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0014372:	66 90                	xchg   ax,ax
c0014374:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014378:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001437f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014383:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001438a:	83 ec 0c             	sub    esp,0xc
c001438d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014391:	e8 0e be ff ff       	call   c00101a4 <Krnl::newProcessEnv(Process*)>
c0014396:	83 c4 10             	add    esp,0x10
c0014399:	89 c2                	mov    edx,eax
c001439b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001439f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00143a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143a9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00143b2:	a1 e0 16 02 c0       	mov    eax,ds:0xc00216e0
c00143b7:	8d 50 01             	lea    edx,[eax+0x1]
c00143ba:	89 15 e0 16 02 c0    	mov    DWORD PTR ds:0xc00216e0,edx
c00143c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00143c4:	89 02                	mov    DWORD PTR [edx],eax
c00143c6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00143ce:	83 ec 0c             	sub    esp,0xc
c00143d1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00143d5:	e8 8b 34 ff ff       	call   c0007865 <malloc>
c00143da:	83 c4 10             	add    esp,0x10
c00143dd:	89 c3                	mov    ebx,eax
c00143df:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00143e3:	25 ff 00 00 00       	and    eax,0xff
c00143e8:	83 ec 08             	sub    esp,0x8
c00143eb:	50                   	push   eax
c00143ec:	53                   	push   ebx
c00143ed:	e8 bc 5a ff ff       	call   c0009eae <VAS::VAS(bool)>
c00143f2:	83 c4 10             	add    esp,0x10
c00143f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143f9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00143ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014403:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001440d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014411:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014415:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001441b:	e8 fa c2 ff ff       	call   c001071a <KeInitSignals()>
c0014420:	89 c2                	mov    edx,eax
c0014422:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014426:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001442c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014430:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014436:	85 c0                	test   eax,eax
c0014438:	74 42                	je     c001447c <Process::Process(bool, char const*, Process*, char**)+0x140>
c001443a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001443e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014444:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001444a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001444e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014454:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014458:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001445e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014464:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014468:	05 0c 01 00 00       	add    eax,0x10c
c001446d:	83 ec 08             	sub    esp,0x8
c0014470:	52                   	push   edx
c0014471:	50                   	push   eax
c0014472:	e8 79 c1 fe ff       	call   c00005f0 <strcpy>
c0014477:	83 c4 10             	add    esp,0x10
c001447a:	eb 64                	jmp    c00144e0 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c001447c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0014484:	83 ec 0c             	sub    esp,0xc
c0014487:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001448b:	e8 d5 33 ff ff       	call   c0007865 <malloc>
c0014490:	83 c4 10             	add    esp,0x10
c0014493:	89 c3                	mov    ebx,eax
c0014495:	83 ec 08             	sub    esp,0x8
c0014498:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001449c:	53                   	push   ebx
c001449d:	e8 fe 44 ff ff       	call   c00089a0 <VgaText::VgaText(char const*)>
c00144a2:	83 c4 10             	add    esp,0x10
c00144a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144a9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00144af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00144b9:	83 ec 0c             	sub    esp,0xc
c00144bc:	50                   	push   eax
c00144bd:	e8 84 3d ff ff       	call   c0008246 <addToTerminalCycle(VgaText*)>
c00144c2:	83 c4 10             	add    esp,0x10
c00144c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144c9:	05 0c 01 00 00       	add    eax,0x10c
c00144ce:	83 ec 08             	sub    esp,0x8
c00144d1:	68 61 05 02 c0       	push   0xc0020561
c00144d6:	50                   	push   eax
c00144d7:	e8 14 c1 fe ff       	call   c00005f0 <strcpy>
c00144dc:	83 c4 10             	add    esp,0x10
c00144df:	90                   	nop
c00144e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144e4:	83 c0 0c             	add    eax,0xc
c00144e7:	83 ec 08             	sub    esp,0x8
c00144ea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00144ee:	50                   	push   eax
c00144ef:	e8 fc c0 fe ff       	call   c00005f0 <strcpy>
c00144f4:	83 c4 10             	add    esp,0x10
c00144f7:	83 ec 08             	sub    esp,0x8
c00144fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00144fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014502:	e8 c9 fb ff ff       	call   c00140d0 <Process::addArgs(char**)>
c0014507:	83 c4 10             	add    esp,0x10
c001450a:	90                   	nop
c001450b:	83 c4 24             	add    esp,0x24
c001450e:	5b                   	pop    ebx
c001450f:	5e                   	pop    esi
c0014510:	c3                   	ret    
c0014511:	8d 76 00             	lea    esi,[esi+0x0]

c0014514 <taskStartupFunction>:
c0014514:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014519:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001451c:	c3                   	ret    
c001451d:	90                   	nop
c001451e:	66 90                	xchg   ax,ax

c0014520 <Semaphore::Semaphore(int)>:
c0014520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014524:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014528:	89 10                	mov    DWORD PTR [eax],edx
c001452a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001452e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0014535:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014539:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014540:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014544:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001454b:	90                   	nop
c001454c:	c3                   	ret    
c001454d:	90                   	nop
c001454e:	66 90                	xchg   ax,ax

c0014550 <Mutex::Mutex()>:
c0014550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014554:	6a 01                	push   0x1
c0014556:	50                   	push   eax
c0014557:	e8 c4 ff ff ff       	call   c0014520 <Semaphore::Semaphore(int)>
c001455c:	83 c4 08             	add    esp,0x8
c001455f:	90                   	nop
c0014560:	c3                   	ret    
c0014561:	90                   	nop
c0014562:	66 90                	xchg   ax,ax

c0014564 <Process::createThread(void (*)(void*), void*, int)>:
c0014564:	57                   	push   edi
c0014565:	31 c9                	xor    ecx,ecx
c0014567:	56                   	push   esi
c0014568:	53                   	push   ebx
c0014569:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001456d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0014574:	89 f2                	mov    edx,esi
c0014576:	66 90                	xchg   ax,ax
c0014578:	31 c0                	xor    eax,eax
c001457a:	66 89 d0             	mov    ax,dx
c001457d:	83 e2 01             	and    edx,0x1
c0014580:	74 12                	je     c0014594 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0014582:	d1 f8                	sar    eax,1
c0014584:	41                   	inc    ecx
c0014585:	89 c2                	mov    edx,eax
c0014587:	83 f9 10             	cmp    ecx,0x10
c001458a:	75 ec                	jne    c0014578 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001458c:	31 db                	xor    ebx,ebx
c001458e:	89 d8                	mov    eax,ebx
c0014590:	5b                   	pop    ebx
c0014591:	5e                   	pop    esi
c0014592:	5f                   	pop    edi
c0014593:	c3                   	ret    
c0014594:	b8 01 00 00 00       	mov    eax,0x1
c0014599:	d3 e0                	shl    eax,cl
c001459b:	09 c6                	or     esi,eax
c001459d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00145a0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00145a7:	01 c0                	add    eax,eax
c00145a9:	01 c8                	add    eax,ecx
c00145ab:	8d 04 80             	lea    eax,[eax+eax*4]
c00145ae:	01 d8                	add    eax,ebx
c00145b0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00145b7:	75 0b                	jne    c00145c4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00145b9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00145c3:	90                   	nop
c00145c4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00145ca:	83 ec 0c             	sub    esp,0xc
c00145cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00145d0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00145d3:	01 c0                	add    eax,eax
c00145d5:	01 c8                	add    eax,ecx
c00145d7:	8d 3c 80             	lea    edi,[eax+eax*4]
c00145da:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00145dd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00145e3:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00145e9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00145ed:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00145f3:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00145f9:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00145ff:	89 ca                	mov    edx,ecx
c0014601:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0014608:	f7 da                	neg    edx
c001460a:	c1 e2 15             	shl    edx,0x15
c001460d:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0014613:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0014619:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001461d:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0014627:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001462d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014631:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0014637:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0014641:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001464b:	68 00 01 00 00       	push   0x100
c0014650:	e8 10 32 ff ff       	call   c0007865 <malloc>
c0014655:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0014658:	58                   	pop    eax
c0014659:	5a                   	pop    edx
c001465a:	53                   	push   ebx
c001465b:	68 84 71 02 c0       	push   0xc0027184
c0014660:	e8 f7 9a 00 00       	call   c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014665:	83 c4 10             	add    esp,0x10
c0014668:	89 d8                	mov    eax,ebx
c001466a:	5b                   	pop    ebx
c001466b:	5e                   	pop    esi
c001466c:	5f                   	pop    edi
c001466d:	c3                   	ret    
c001466e:	66 90                	xchg   ax,ax

c0014670 <Process::createUserThread()>:
c0014670:	83 ec 0c             	sub    esp,0xc
c0014673:	68 80 00 00 00       	push   0x80
c0014678:	6a 00                	push   0x0
c001467a:	68 c4 3f 01 c0       	push   0xc0013fc4
c001467f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014683:	50                   	push   eax
c0014684:	e8 db fe ff ff       	call   c0014564 <Process::createThread(void (*)(void*), void*, int)>
c0014689:	83 c4 1c             	add    esp,0x1c
c001468c:	c3                   	ret    
c001468d:	8d 76 00             	lea    esi,[esi+0x0]

c0014690 <setupMultitasking(void (*)())>:
c0014690:	56                   	push   esi
c0014691:	53                   	push   ebx
c0014692:	53                   	push   ebx
c0014693:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014697:	eb 13                	jmp    c00146ac <setupMultitasking(void (*)())+0x1c>
c0014699:	8d 76 00             	lea    esi,[esi+0x0]
c001469c:	83 ec 0c             	sub    esp,0xc
c001469f:	68 84 71 02 c0       	push   0xc0027184
c00146a4:	e8 fb 99 00 00       	call   c001e0a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00146a9:	83 c4 10             	add    esp,0x10
c00146ac:	83 ec 0c             	sub    esp,0xc
c00146af:	68 84 71 02 c0       	push   0xc0027184
c00146b4:	e8 c7 99 00 00       	call   c001e080 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00146b9:	83 c4 10             	add    esp,0x10
c00146bc:	84 c0                	test   al,al
c00146be:	74 dc                	je     c001469c <setupMultitasking(void (*)())+0xc>
c00146c0:	83 ec 0c             	sub    esp,0xc
c00146c3:	68 24 07 00 00       	push   0x724
c00146c8:	e8 98 31 ff ff       	call   c0007865 <malloc>
c00146cd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00146d4:	89 c3                	mov    ebx,eax
c00146d6:	6a 00                	push   0x0
c00146d8:	68 65 05 02 c0       	push   0xc0020565
c00146dd:	6a 01                	push   0x1
c00146df:	50                   	push   eax
c00146e0:	e8 57 fc ff ff       	call   c001433c <Process::Process(bool, char const*, Process*, char**)>
c00146e5:	83 c4 14             	add    esp,0x14
c00146e8:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00146ee:	89 1d 90 71 02 c0    	mov    DWORD PTR ds:0xc0027190,ebx
c00146f4:	50                   	push   eax
c00146f5:	e8 a3 3d ff ff       	call   c000849d <setActiveTerminal(VgaText*)>
c00146fa:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0014702:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c001470c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0014712:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014715:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001471f:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0014725:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001472b:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0014735:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001473f:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0014749:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001474f:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0014759:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001475f:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0014769:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0014770:	e8 f0 30 ff ff       	call   c0007865 <malloc>
c0014775:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c001477b:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0014781:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0014787:	5a                   	pop    edx
c0014788:	59                   	pop    ecx
c0014789:	68 61 05 02 c0       	push   0xc0020561
c001478e:	50                   	push   eax
c001478f:	e8 5c be fe ff       	call   c00005f0 <strcpy>
c0014794:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001479b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001479f:	83 c4 14             	add    esp,0x14
c00147a2:	5b                   	pop    ebx
c00147a3:	5e                   	pop    esi
c00147a4:	e9 c0 ba fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c00147a9:	8d 76 00             	lea    esi,[esi+0x0]

c00147ac <schedule()>:
c00147ac:	8b 15 64 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027164
c00147b2:	85 d2                	test   edx,edx
c00147b4:	74 0e                	je     c00147c4 <schedule()+0x18>
c00147b6:	c7 05 60 71 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x1
c00147c0:	c3                   	ret    
c00147c1:	8d 76 00             	lea    esi,[esi+0x0]
c00147c4:	53                   	push   ebx
c00147c5:	83 ec 14             	sub    esp,0x14
c00147c8:	68 84 71 02 c0       	push   0xc0027184
c00147cd:	e8 ae 98 00 00       	call   c001e080 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00147d2:	83 c4 10             	add    esp,0x10
c00147d5:	84 c0                	test   al,al
c00147d7:	75 3b                	jne    c0014814 <schedule()+0x68>
c00147d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147de:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00147e1:	4a                   	dec    edx
c00147e2:	74 38                	je     c001481c <schedule()+0x70>
c00147e4:	83 ec 0c             	sub    esp,0xc
c00147e7:	68 84 71 02 c0       	push   0xc0027184
c00147ec:	e8 ab 98 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00147f1:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c00147f8:	89 c3                	mov    ebx,eax
c00147fa:	e8 a5 98 00 00       	call   c001e0a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00147ff:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0014806:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014809:	e8 0e f8 ff ff       	call   c001401c <switchToThread(ThreadControlBlock*)>
c001480e:	83 c4 10             	add    esp,0x10
c0014811:	8d 76 00             	lea    esi,[esi+0x0]
c0014814:	83 c4 08             	add    esp,0x8
c0014817:	5b                   	pop    ebx
c0014818:	c3                   	ret    
c0014819:	8d 76 00             	lea    esi,[esi+0x0]
c001481c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0014823:	83 ec 08             	sub    esp,0x8
c0014826:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001482b:	50                   	push   eax
c001482c:	68 84 71 02 c0       	push   0xc0027184
c0014831:	e8 26 99 00 00       	call   c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014836:	83 c4 10             	add    esp,0x10
c0014839:	eb a9                	jmp    c00147e4 <schedule()+0x38>
c001483b:	90                   	nop

c001483c <Semaphore::tryAcquire()>:
c001483c:	53                   	push   ebx
c001483d:	83 ec 08             	sub    esp,0x8
c0014840:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014844:	fa                   	cli    
c0014845:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001484a:	8d 50 01             	lea    edx,[eax+0x1]
c001484d:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0014853:	8b 15 64 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027164
c0014859:	8d 5a 01             	lea    ebx,[edx+0x1]
c001485c:	89 1d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ebx
c0014862:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0014865:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0014867:	7c 33                	jl     c001489c <Semaphore::tryAcquire()+0x60>
c0014869:	89 15 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,edx
c001486f:	85 d2                	test   edx,edx
c0014871:	75 0d                	jne    c0014880 <Semaphore::tryAcquire()+0x44>
c0014873:	8b 15 60 71 02 c0    	mov    edx,DWORD PTR ds:0xc0027160
c0014879:	85 d2                	test   edx,edx
c001487b:	75 6b                	jne    c00148e8 <Semaphore::tryAcquire()+0xac>
c001487d:	8d 76 00             	lea    esi,[esi+0x0]
c0014880:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014885:	85 c0                	test   eax,eax
c0014887:	74 0b                	je     c0014894 <Semaphore::tryAcquire()+0x58>
c0014889:	8d 76 00             	lea    esi,[esi+0x0]
c001488c:	31 c0                	xor    eax,eax
c001488e:	83 c4 08             	add    esp,0x8
c0014891:	5b                   	pop    ebx
c0014892:	c3                   	ret    
c0014893:	90                   	nop
c0014894:	fb                   	sti    
c0014895:	83 c4 08             	add    esp,0x8
c0014898:	5b                   	pop    ebx
c0014899:	c3                   	ret    
c001489a:	66 90                	xchg   ax,ax
c001489c:	43                   	inc    ebx
c001489d:	89 15 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,edx
c00148a3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00148a6:	85 d2                	test   edx,edx
c00148a8:	75 22                	jne    c00148cc <Semaphore::tryAcquire()+0x90>
c00148aa:	8b 0d 60 71 02 c0    	mov    ecx,DWORD PTR ds:0xc0027160
c00148b0:	85 c9                	test   ecx,ecx
c00148b2:	74 18                	je     c00148cc <Semaphore::tryAcquire()+0x90>
c00148b4:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00148be:	e8 e9 fe ff ff       	call   c00147ac <schedule()>
c00148c3:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00148c8:	48                   	dec    eax
c00148c9:	8d 76 00             	lea    esi,[esi+0x0]
c00148cc:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00148d1:	85 c0                	test   eax,eax
c00148d3:	75 0b                	jne    c00148e0 <Semaphore::tryAcquire()+0xa4>
c00148d5:	fb                   	sti    
c00148d6:	b0 01                	mov    al,0x1
c00148d8:	83 c4 08             	add    esp,0x8
c00148db:	5b                   	pop    ebx
c00148dc:	c3                   	ret    
c00148dd:	8d 76 00             	lea    esi,[esi+0x0]
c00148e0:	b0 01                	mov    al,0x1
c00148e2:	83 c4 08             	add    esp,0x8
c00148e5:	5b                   	pop    ebx
c00148e6:	c3                   	ret    
c00148e7:	90                   	nop
c00148e8:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00148f2:	e8 b5 fe ff ff       	call   c00147ac <schedule()>
c00148f7:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00148fc:	48                   	dec    eax
c00148fd:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014902:	85 c0                	test   eax,eax
c0014904:	75 86                	jne    c001488c <Semaphore::tryAcquire()+0x50>
c0014906:	eb 8c                	jmp    c0014894 <Semaphore::tryAcquire()+0x58>

c0014908 <Semaphore::assertLocked(char const*)>:
c0014908:	83 ec 0c             	sub    esp,0xc
c001490b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001490f:	fa                   	cli    
c0014910:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014916:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c001491b:	8d 48 01             	lea    ecx,[eax+0x1]
c001491e:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014924:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014926:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0014929:	7c 29                	jl     c0014954 <Semaphore::assertLocked(char const*)+0x4c>
c001492b:	90                   	nop
c001492c:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014931:	85 c0                	test   eax,eax
c0014933:	75 0b                	jne    c0014940 <Semaphore::assertLocked(char const*)+0x38>
c0014935:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c001493a:	85 c0                	test   eax,eax
c001493c:	75 2e                	jne    c001496c <Semaphore::assertLocked(char const*)+0x64>
c001493e:	66 90                	xchg   ax,ax
c0014940:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014945:	48                   	dec    eax
c0014946:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001494b:	75 03                	jne    c0014950 <Semaphore::assertLocked(char const*)+0x48>
c001494d:	fb                   	sti    
c001494e:	66 90                	xchg   ax,ax
c0014950:	83 c4 0c             	add    esp,0xc
c0014953:	c3                   	ret    
c0014954:	83 ec 0c             	sub    esp,0xc
c0014957:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001495b:	52                   	push   edx
c001495c:	e8 4e ba ff ff       	call   c00103af <KePanic(char const*)>
c0014961:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014966:	83 c4 10             	add    esp,0x10
c0014969:	48                   	dec    eax
c001496a:	eb c0                	jmp    c001492c <Semaphore::assertLocked(char const*)+0x24>
c001496c:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014976:	e8 31 fe ff ff       	call   c00147ac <schedule()>
c001497b:	eb c3                	jmp    c0014940 <Semaphore::assertLocked(char const*)+0x38>
c001497d:	8d 76 00             	lea    esi,[esi+0x0]

c0014980 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0014980:	83 ec 0c             	sub    esp,0xc
c0014983:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014988:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001498c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001498f:	e8 18 fe ff ff       	call   c00147ac <schedule()>
c0014994:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014999:	48                   	dec    eax
c001499a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001499f:	75 03                	jne    c00149a4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00149a1:	fb                   	sti    
c00149a2:	66 90                	xchg   ax,ax
c00149a4:	83 c4 0c             	add    esp,0xc
c00149a7:	c3                   	ret    

c00149a8 <blockTask(TaskState)>:
c00149a8:	83 ec 0c             	sub    esp,0xc
c00149ab:	fa                   	cli    
c00149ac:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00149b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00149b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149bb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00149be:	e8 e9 fd ff ff       	call   c00147ac <schedule()>
c00149c3:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00149c8:	48                   	dec    eax
c00149c9:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00149ce:	75 04                	jne    c00149d4 <blockTask(TaskState)+0x2c>
c00149d0:	fb                   	sti    
c00149d1:	8d 76 00             	lea    esi,[esi+0x0]
c00149d4:	83 c4 0c             	add    esp,0xc
c00149d7:	c3                   	ret    

c00149d8 <waitTask(int, int*, int)>:
c00149d8:	83 ec 18             	sub    esp,0x18
c00149db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00149e4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00149e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149f0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00149f3:	6a 07                	push   0x7
c00149f5:	e8 ae ff ff ff       	call   c00149a8 <blockTask(TaskState)>
c00149fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149ff:	83 c4 10             	add    esp,0x10
c0014a02:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0014a05:	85 d2                	test   edx,edx
c0014a07:	74 0b                	je     c0014a14 <waitTask(int, int*, int)+0x3c>
c0014a09:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0014a0c:	89 02                	mov    DWORD PTR [edx],eax
c0014a0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a13:	90                   	nop
c0014a14:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0014a17:	83 c4 0c             	add    esp,0xc
c0014a1a:	c3                   	ret    
c0014a1b:	90                   	nop

c0014a1c <milliTenthSleepUntil(unsigned int)>:
c0014a1c:	83 ec 0c             	sub    esp,0xc
c0014a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a23:	39 05 8c 64 02 c0    	cmp    DWORD PTR ds:0xc002648c,eax
c0014a29:	76 05                	jbe    c0014a30 <milliTenthSleepUntil(unsigned int)+0x14>
c0014a2b:	90                   	nop
c0014a2c:	83 c4 0c             	add    esp,0xc
c0014a2f:	c3                   	ret    
c0014a30:	fa                   	cli    
c0014a31:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014a37:	83 ec 08             	sub    esp,0x8
c0014a3a:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0014a40:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a46:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0014a49:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014a4f:	52                   	push   edx
c0014a50:	68 78 71 02 c0       	push   0xc0027178
c0014a55:	e8 02 97 00 00       	call   c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014a5a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0014a61:	e8 42 ff ff ff       	call   c00149a8 <blockTask(TaskState)>
c0014a66:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014a6b:	83 c4 10             	add    esp,0x10
c0014a6e:	48                   	dec    eax
c0014a6f:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014a74:	85 c0                	test   eax,eax
c0014a76:	75 0c                	jne    c0014a84 <milliTenthSleepUntil(unsigned int)+0x68>
c0014a78:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014a7d:	85 c0                	test   eax,eax
c0014a7f:	75 17                	jne    c0014a98 <milliTenthSleepUntil(unsigned int)+0x7c>
c0014a81:	8d 76 00             	lea    esi,[esi+0x0]
c0014a84:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014a89:	48                   	dec    eax
c0014a8a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014a8f:	75 9b                	jne    c0014a2c <milliTenthSleepUntil(unsigned int)+0x10>
c0014a91:	fb                   	sti    
c0014a92:	83 c4 0c             	add    esp,0xc
c0014a95:	c3                   	ret    
c0014a96:	66 90                	xchg   ax,ax
c0014a98:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014aa2:	e8 05 fd ff ff       	call   c00147ac <schedule()>
c0014aa7:	eb db                	jmp    c0014a84 <milliTenthSleepUntil(unsigned int)+0x68>
c0014aa9:	8d 76 00             	lea    esi,[esi+0x0]

c0014aac <milliTenthSleep(unsigned int)>:
c0014aac:	a1 8c 64 02 c0       	mov    eax,ds:0xc002648c
c0014ab1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0014ab5:	e9 62 ff ff ff       	jmp    c0014a1c <milliTenthSleepUntil(unsigned int)>
c0014aba:	66 90                	xchg   ax,ax

c0014abc <sleep(unsigned int)>:
c0014abc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ac0:	8d 04 80             	lea    eax,[eax+eax*4]
c0014ac3:	8d 04 80             	lea    eax,[eax+eax*4]
c0014ac6:	8d 04 80             	lea    eax,[eax+eax*4]
c0014ac9:	8d 04 80             	lea    eax,[eax+eax*4]
c0014acc:	c1 e0 04             	shl    eax,0x4
c0014acf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ad3:	eb d7                	jmp    c0014aac <milliTenthSleep(unsigned int)>
c0014ad5:	90                   	nop
c0014ad6:	66 90                	xchg   ax,ax

c0014ad8 <Semaphore::acquire()>:
c0014ad8:	83 ec 0c             	sub    esp,0xc
c0014adb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014adf:	fa                   	cli    
c0014ae0:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014ae5:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014aeb:	8d 48 01             	lea    ecx,[eax+0x1]
c0014aee:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c0014af4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0014af7:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0014af9:	7d 2d                	jge    c0014b28 <Semaphore::acquire()+0x50>
c0014afb:	41                   	inc    ecx
c0014afc:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0014aff:	90                   	nop
c0014b00:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0014b05:	85 c0                	test   eax,eax
c0014b07:	75 0b                	jne    c0014b14 <Semaphore::acquire()+0x3c>
c0014b09:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c0014b0e:	85 c0                	test   eax,eax
c0014b10:	75 62                	jne    c0014b74 <Semaphore::acquire()+0x9c>
c0014b12:	66 90                	xchg   ax,ax
c0014b14:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014b19:	48                   	dec    eax
c0014b1a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014b1f:	75 03                	jne    c0014b24 <Semaphore::acquire()+0x4c>
c0014b21:	fb                   	sti    
c0014b22:	66 90                	xchg   ax,ax
c0014b24:	83 c4 0c             	add    esp,0xc
c0014b27:	c3                   	ret    
c0014b28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b2d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0014b34:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0014b37:	85 c9                	test   ecx,ecx
c0014b39:	74 4d                	je     c0014b88 <Semaphore::acquire()+0xb0>
c0014b3b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0014b3e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014b44:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0014b47:	90                   	nop
c0014b48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b4d:	83 ec 0c             	sub    esp,0xc
c0014b50:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0014b53:	68 e0 05 02 c0       	push   0xc00205e0
c0014b58:	e8 9d 5a ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0014b5d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0014b64:	e8 3f fe ff ff       	call   c00149a8 <blockTask(TaskState)>
c0014b69:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0014b6e:	83 c4 10             	add    esp,0x10
c0014b71:	48                   	dec    eax
c0014b72:	eb 8c                	jmp    c0014b00 <Semaphore::acquire()+0x28>
c0014b74:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0014b7e:	e8 29 fc ff ff       	call   c00147ac <schedule()>
c0014b83:	eb 8f                	jmp    c0014b14 <Semaphore::acquire()+0x3c>
c0014b85:	8d 76 00             	lea    esi,[esi+0x0]
c0014b88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b8d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014b90:	eb b6                	jmp    c0014b48 <Semaphore::acquire()+0x70>
c0014b92:	66 90                	xchg   ax,ax

c0014b94 <taskReturned>:
c0014b94:	83 ec 18             	sub    esp,0x18
c0014b97:	68 00 06 02 c0       	push   0xc0020600
c0014b9c:	e8 0e b8 ff ff       	call   c00103af <KePanic(char const*)>
c0014ba1:	83 c4 10             	add    esp,0x10
c0014ba4:	83 ec 0c             	sub    esp,0xc
c0014ba7:	6a 02                	push   0x2
c0014ba9:	e8 fa fd ff ff       	call   c00149a8 <blockTask(TaskState)>
c0014bae:	fa                   	cli    
c0014baf:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014bb5:	e8 f2 fb ff ff       	call   c00147ac <schedule()>
c0014bba:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014bbf:	83 c4 10             	add    esp,0x10
c0014bc2:	48                   	dec    eax
c0014bc3:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014bc8:	85 c0                	test   eax,eax
c0014bca:	75 d8                	jne    c0014ba4 <taskReturned+0x10>
c0014bcc:	fb                   	sti    
c0014bcd:	eb d5                	jmp    c0014ba4 <taskReturned+0x10>
c0014bcf:	90                   	nop

c0014bd0 <Thr::processFromPID(int)>:
c0014bd0:	57                   	push   edi
c0014bd1:	56                   	push   esi
c0014bd2:	53                   	push   ebx
c0014bd3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014bd7:	fa                   	cli    
c0014bd8:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014bde:	83 ec 0c             	sub    esp,0xc
c0014be1:	68 84 71 02 c0       	push   0xc0027184
c0014be6:	e8 b1 94 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014beb:	83 c4 10             	add    esp,0x10
c0014bee:	89 c7                	mov    edi,eax
c0014bf0:	eb 16                	jmp    c0014c08 <Thr::processFromPID(int)+0x38>
c0014bf2:	66 90                	xchg   ax,ax
c0014bf4:	83 ec 0c             	sub    esp,0xc
c0014bf7:	68 84 71 02 c0       	push   0xc0027184
c0014bfc:	e8 9b 94 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014c01:	83 c4 10             	add    esp,0x10
c0014c04:	39 f8                	cmp    eax,edi
c0014c06:	74 4c                	je     c0014c54 <Thr::processFromPID(int)+0x84>
c0014c08:	83 ec 0c             	sub    esp,0xc
c0014c0b:	68 84 71 02 c0       	push   0xc0027184
c0014c10:	e8 87 94 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014c15:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014c1c:	89 c3                	mov    ebx,eax
c0014c1e:	e8 81 94 00 00       	call   c001e0a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014c23:	58                   	pop    eax
c0014c24:	5a                   	pop    edx
c0014c25:	53                   	push   ebx
c0014c26:	68 84 71 02 c0       	push   0xc0027184
c0014c2b:	e8 2c 95 00 00       	call   c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014c30:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014c33:	83 c4 10             	add    esp,0x10
c0014c36:	39 30                	cmp    DWORD PTR [eax],esi
c0014c38:	75 ba                	jne    c0014bf4 <Thr::processFromPID(int)+0x24>
c0014c3a:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014c3f:	48                   	dec    eax
c0014c40:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014c45:	74 09                	je     c0014c50 <Thr::processFromPID(int)+0x80>
c0014c47:	90                   	nop
c0014c48:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014c4b:	5b                   	pop    ebx
c0014c4c:	5e                   	pop    esi
c0014c4d:	5f                   	pop    edi
c0014c4e:	c3                   	ret    
c0014c4f:	90                   	nop
c0014c50:	fb                   	sti    
c0014c51:	eb f5                	jmp    c0014c48 <Thr::processFromPID(int)+0x78>
c0014c53:	90                   	nop
c0014c54:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014c59:	48                   	dec    eax
c0014c5a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014c5f:	75 07                	jne    c0014c68 <Thr::processFromPID(int)+0x98>
c0014c61:	fb                   	sti    
c0014c62:	5b                   	pop    ebx
c0014c63:	5e                   	pop    esi
c0014c64:	5f                   	pop    edi
c0014c65:	c3                   	ret    
c0014c66:	66 90                	xchg   ax,ax
c0014c68:	5b                   	pop    ebx
c0014c69:	31 c0                	xor    eax,eax
c0014c6b:	5e                   	pop    esi
c0014c6c:	5f                   	pop    edi
c0014c6d:	c3                   	ret    
c0014c6e:	66 90                	xchg   ax,ax

c0014c70 <unblockTask(ThreadControlBlock*)>:
c0014c70:	53                   	push   ebx
c0014c71:	83 ec 08             	sub    esp,0x8
c0014c74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c78:	fa                   	cli    
c0014c79:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0014c7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014c82:	85 c0                	test   eax,eax
c0014c84:	74 66                	je     c0014cec <unblockTask(ThreadControlBlock*)+0x7c>
c0014c86:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014c89:	48                   	dec    eax
c0014c8a:	74 38                	je     c0014cc4 <unblockTask(ThreadControlBlock*)+0x54>
c0014c8c:	83 ec 0c             	sub    esp,0xc
c0014c8f:	68 84 71 02 c0       	push   0xc0027184
c0014c94:	e8 03 94 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014c99:	83 c4 10             	add    esp,0x10
c0014c9c:	85 c0                	test   eax,eax
c0014c9e:	75 1c                	jne    c0014cbc <unblockTask(ThreadControlBlock*)+0x4c>
c0014ca0:	eb 5e                	jmp    c0014d00 <unblockTask(ThreadControlBlock*)+0x90>
c0014ca2:	66 90                	xchg   ax,ax
c0014ca4:	83 ec 08             	sub    esp,0x8
c0014ca7:	50                   	push   eax
c0014ca8:	68 84 71 02 c0       	push   0xc0027184
c0014cad:	e8 9a 97 00 00       	call   c001e44c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014cb2:	83 c4 10             	add    esp,0x10
c0014cb5:	85 c0                	test   eax,eax
c0014cb7:	74 47                	je     c0014d00 <unblockTask(ThreadControlBlock*)+0x90>
c0014cb9:	8d 76 00             	lea    esi,[esi+0x0]
c0014cbc:	39 c3                	cmp    ebx,eax
c0014cbe:	75 e4                	jne    c0014ca4 <unblockTask(ThreadControlBlock*)+0x34>
c0014cc0:	eb 12                	jmp    c0014cd4 <unblockTask(ThreadControlBlock*)+0x64>
c0014cc2:	66 90                	xchg   ax,ax
c0014cc4:	83 ec 0c             	sub    esp,0xc
c0014cc7:	68 83 05 02 c0       	push   0xc0020583
c0014ccc:	e8 29 59 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0014cd1:	83 c4 10             	add    esp,0x10
c0014cd4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014cd9:	48                   	dec    eax
c0014cda:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014cdf:	75 03                	jne    c0014ce4 <unblockTask(ThreadControlBlock*)+0x74>
c0014ce1:	fb                   	sti    
c0014ce2:	66 90                	xchg   ax,ax
c0014ce4:	83 c4 08             	add    esp,0x8
c0014ce7:	5b                   	pop    ebx
c0014ce8:	c3                   	ret    
c0014ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0014cec:	83 ec 0c             	sub    esp,0xc
c0014cef:	68 6c 05 02 c0       	push   0xc002056c
c0014cf4:	e8 01 59 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0014cf9:	83 c4 10             	add    esp,0x10
c0014cfc:	eb d6                	jmp    c0014cd4 <unblockTask(ThreadControlBlock*)+0x64>
c0014cfe:	66 90                	xchg   ax,ax
c0014d00:	83 ec 08             	sub    esp,0x8
c0014d03:	53                   	push   ebx
c0014d04:	68 84 71 02 c0       	push   0xc0027184
c0014d09:	e8 4e 94 00 00       	call   c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014d0e:	83 c4 10             	add    esp,0x10
c0014d11:	eb c1                	jmp    c0014cd4 <unblockTask(ThreadControlBlock*)+0x64>
c0014d13:	90                   	nop

c0014d14 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0014d14:	55                   	push   ebp
c0014d15:	57                   	push   edi
c0014d16:	56                   	push   esi
c0014d17:	53                   	push   ebx
c0014d18:	83 ec 1c             	sub    esp,0x1c
c0014d1b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014d1f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014d22:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0014d28:	85 ed                	test   ebp,ebp
c0014d2a:	7e 24                	jle    c0014d50 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0014d2c:	31 f6                	xor    esi,esi
c0014d2e:	66 90                	xchg   ax,ax
c0014d30:	83 ec 0c             	sub    esp,0xc
c0014d33:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0014d3a:	46                   	inc    esi
c0014d3b:	57                   	push   edi
c0014d3c:	e8 34 2b ff ff       	call   c0007875 <free>
c0014d41:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014d44:	83 c4 10             	add    esp,0x10
c0014d47:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0014d4d:	7f e1                	jg     c0014d30 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0014d4f:	90                   	nop
c0014d50:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014d5a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014d5f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0014d62:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0014d65:	d3 c0                	rol    eax,cl
c0014d67:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0014d6e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014d71:	89 f7                	mov    edi,esi
c0014d73:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0014d7b:	0f 85 77 01 00 00    	jne    c0014ef8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014d81:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0014d87:	85 ed                	test   ebp,ebp
c0014d89:	74 1d                	je     c0014da8 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0014d8b:	83 ec 0c             	sub    esp,0xc
c0014d8e:	55                   	push   ebp
c0014d8f:	e8 2c b3 ff ff       	call   c00100c0 <EnvVarContainer::~EnvVarContainer()>
c0014d94:	59                   	pop    ecx
c0014d95:	5e                   	pop    esi
c0014d96:	6a 0c                	push   0xc
c0014d98:	55                   	push   ebp
c0014d99:	e8 66 57 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c0014d9e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014da1:	83 c4 10             	add    esp,0x10
c0014da4:	89 f7                	mov    edi,esi
c0014da6:	66 90                	xchg   ax,ax
c0014da8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014dae:	85 c0                	test   eax,eax
c0014db0:	0f 84 b6 00 00 00    	je     c0014e6c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0014db6:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0014db9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0014dbd:	31 c9                	xor    ecx,ecx
c0014dbf:	eb 17                	jmp    c0014dd8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0014dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0014dc4:	41                   	inc    ecx
c0014dc5:	83 f9 10             	cmp    ecx,0x10
c0014dc8:	0f 84 9e 00 00 00    	je     c0014e6c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0014dce:	66 90                	xchg   ax,ax
c0014dd0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014dd6:	66 90                	xchg   ax,ax
c0014dd8:	31 d2                	xor    edx,edx
c0014dda:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0014de1:	d3 fa                	sar    edx,cl
c0014de3:	83 e2 01             	and    edx,0x1
c0014de6:	74 dc                	je     c0014dc4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014de8:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0014deb:	01 d2                	add    edx,edx
c0014ded:	01 ca                	add    edx,ecx
c0014def:	8d 14 92             	lea    edx,[edx+edx*4]
c0014df2:	01 d0                	add    eax,edx
c0014df4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0014dfa:	83 fd 07             	cmp    ebp,0x7
c0014dfd:	75 c5                	jne    c0014dc4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014dff:	05 40 02 00 00       	add    eax,0x240
c0014e04:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0014e07:	83 fd ff             	cmp    ebp,0xffffffff
c0014e0a:	0f 8c f0 00 00 00    	jl     c0014f00 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0014e10:	0f 84 ae 01 00 00    	je     c0014fc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0014e16:	85 ed                	test   ebp,ebp
c0014e18:	0f 84 92 01 00 00    	je     c0014fb0 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0014e1e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0014e20:	75 a2                	jne    c0014dc4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014e22:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0014e28:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014e2c:	01 d0                	add    eax,edx
c0014e2e:	66 90                	xchg   ax,ax
c0014e30:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0014e34:	83 ec 0c             	sub    esp,0xc
c0014e37:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0014e3d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014e40:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014e46:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0014e4d:	50                   	push   eax
c0014e4e:	e8 1d fe ff ff       	call   c0014c70 <unblockTask(ThreadControlBlock*)>
c0014e53:	83 c4 10             	add    esp,0x10
c0014e56:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014e59:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014e5d:	89 f7                	mov    edi,esi
c0014e5f:	41                   	inc    ecx
c0014e60:	83 f9 10             	cmp    ecx,0x10
c0014e63:	0f 85 67 ff ff ff    	jne    c0014dd0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0014e69:	8d 76 00             	lea    esi,[esi+0x0]
c0014e6c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0014e72:	85 c0                	test   eax,eax
c0014e74:	74 62                	je     c0014ed8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014e76:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0014e7c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0014e82:	74 54                	je     c0014ed8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0014e84:	83 ec 0c             	sub    esp,0xc
c0014e87:	68 84 71 02 c0       	push   0xc0027184
c0014e8c:	e8 0b 92 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014e91:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014e98:	89 c7                	mov    edi,eax
c0014e9a:	e8 e1 91 00 00       	call   c001e080 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014e9f:	83 c4 10             	add    esp,0x10
c0014ea2:	84 c0                	test   al,al
c0014ea4:	0f 84 ce 00 00 00    	je     c0014f78 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0014eaa:	66 90                	xchg   ax,ax
c0014eac:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014eaf:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014eb5:	85 d2                	test   edx,edx
c0014eb7:	74 0f                	je     c0014ec8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0014eb9:	83 ec 0c             	sub    esp,0xc
c0014ebc:	8b 02                	mov    eax,DWORD PTR [edx]
c0014ebe:	52                   	push   edx
c0014ebf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ec2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014ec5:	83 c4 10             	add    esp,0x10
c0014ec8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0014ed2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0014ed5:	8d 76 00             	lea    esi,[esi+0x0]
c0014ed8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0014ede:	85 db                	test   ebx,ebx
c0014ee0:	74 16                	je     c0014ef8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0014ee2:	83 ec 0c             	sub    esp,0xc
c0014ee5:	53                   	push   ebx
c0014ee6:	e8 b1 49 ff ff       	call   c000989c <VAS::~VAS()>
c0014eeb:	58                   	pop    eax
c0014eec:	5a                   	pop    edx
c0014eed:	6a 14                	push   0x14
c0014eef:	53                   	push   ebx
c0014ef0:	e8 0f 56 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c0014ef5:	83 c4 10             	add    esp,0x10
c0014ef8:	83 c4 1c             	add    esp,0x1c
c0014efb:	5b                   	pop    ebx
c0014efc:	5e                   	pop    esi
c0014efd:	5f                   	pop    edi
c0014efe:	5d                   	pop    ebp
c0014eff:	c3                   	ret    
c0014f00:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014f04:	83 ec 0c             	sub    esp,0xc
c0014f07:	68 34 06 02 c0       	push   0xc0020634
c0014f0c:	e8 9e b4 ff ff       	call   c00103af <KePanic(char const*)>
c0014f11:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0014f14:	83 c4 10             	add    esp,0x10
c0014f17:	89 f7                	mov    edi,esi
c0014f19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014f1d:	e9 a2 fe ff ff       	jmp    c0014dc4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0014f22:	66 90                	xchg   ax,ax
c0014f24:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f2a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0014f30:	75 1e                	jne    c0014f50 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014f32:	83 ec 0c             	sub    esp,0xc
c0014f35:	68 9c 06 02 c0       	push   0xc002069c
c0014f3a:	e8 bb 56 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0014f3f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014f46:	e8 5d fa ff ff       	call   c00149a8 <blockTask(TaskState)>
c0014f4b:	83 c4 10             	add    esp,0x10
c0014f4e:	66 90                	xchg   ax,ax
c0014f50:	83 ec 08             	sub    esp,0x8
c0014f53:	56                   	push   esi
c0014f54:	68 84 71 02 c0       	push   0xc0027184
c0014f59:	e8 fe 91 00 00       	call   c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0014f5e:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014f65:	e8 32 91 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014f6a:	83 c4 10             	add    esp,0x10
c0014f6d:	39 f8                	cmp    eax,edi
c0014f6f:	0f 84 37 ff ff ff    	je     c0014eac <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0014f75:	8d 76 00             	lea    esi,[esi+0x0]
c0014f78:	83 ec 0c             	sub    esp,0xc
c0014f7b:	68 84 71 02 c0       	push   0xc0027184
c0014f80:	e8 17 91 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014f85:	c7 04 24 84 71 02 c0 	mov    DWORD PTR [esp],0xc0027184
c0014f8c:	89 c6                	mov    esi,eax
c0014f8e:	e8 11 91 00 00       	call   c001e0a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014f93:	83 c4 10             	add    esp,0x10
c0014f96:	39 f3                	cmp    ebx,esi
c0014f98:	74 b6                	je     c0014f50 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014f9a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0014f9d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014fa0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0014fa6:	75 a8                	jne    c0014f50 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014fa8:	e9 77 ff ff ff       	jmp    c0014f24 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0014fad:	8d 76 00             	lea    esi,[esi+0x0]
c0014fb0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014fb4:	83 ec 0c             	sub    esp,0xc
c0014fb7:	68 68 06 02 c0       	push   0xc0020668
c0014fbc:	e9 4b ff ff ff       	jmp    c0014f0c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0014fc4:	8b 36                	mov    esi,DWORD PTR [esi]
c0014fc6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014fca:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0014fcd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014fd0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0014fd6:	01 d7                	add    edi,edx
c0014fd8:	89 f8                	mov    eax,edi
c0014fda:	e9 51 fe ff ff       	jmp    c0014e30 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0014fdf:	90                   	nop

c0014fe0 <cleanerTaskFunction(void*)>:
c0014fe0:	53                   	push   ebx
c0014fe1:	83 ec 08             	sub    esp,0x8
c0014fe4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014fe9:	48                   	dec    eax
c0014fea:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0014fef:	75 03                	jne    c0014ff4 <cleanerTaskFunction(void*)+0x14>
c0014ff1:	fb                   	sti    
c0014ff2:	66 90                	xchg   ax,ax
c0014ff4:	fa                   	cli    
c0014ff5:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0014ffa:	80 3d 4c 71 02 c0 00 	cmp    BYTE PTR ds:0xc002714c,0x0
c0015001:	8d 50 01             	lea    edx,[eax+0x1]
c0015004:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c001500a:	0f 84 ac 00 00 00    	je     c00150bc <cleanerTaskFunction(void*)+0xdc>
c0015010:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015015:	85 c0                	test   eax,eax
c0015017:	75 03                	jne    c001501c <cleanerTaskFunction(void*)+0x3c>
c0015019:	fb                   	sti    
c001501a:	66 90                	xchg   ax,ax
c001501c:	c6 05 4c 71 02 c0 00 	mov    BYTE PTR ds:0xc002714c,0x0
c0015023:	fa                   	cli    
c0015024:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001502a:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c0015030:	fa                   	cli    
c0015031:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015037:	eb 2b                	jmp    c0015064 <cleanerTaskFunction(void*)+0x84>
c0015039:	8d 76 00             	lea    esi,[esi+0x0]
c001503c:	83 ec 0c             	sub    esp,0xc
c001503f:	68 6c 71 02 c0       	push   0xc002716c
c0015044:	e8 53 90 00 00       	call   c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015049:	c7 04 24 6c 71 02 c0 	mov    DWORD PTR [esp],0xc002716c
c0015050:	89 c3                	mov    ebx,eax
c0015052:	e8 4d 90 00 00       	call   c001e0a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015057:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001505a:	e8 b5 fc ff ff       	call   c0014d14 <cleanupTerminatedTask(ThreadControlBlock*)>
c001505f:	83 c4 10             	add    esp,0x10
c0015062:	66 90                	xchg   ax,ax
c0015064:	83 ec 0c             	sub    esp,0xc
c0015067:	68 6c 71 02 c0       	push   0xc002716c
c001506c:	e8 0f 90 00 00       	call   c001e080 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015071:	83 c4 10             	add    esp,0x10
c0015074:	84 c0                	test   al,al
c0015076:	74 c4                	je     c001503c <cleanerTaskFunction(void*)+0x5c>
c0015078:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001507d:	48                   	dec    eax
c001507e:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015083:	75 03                	jne    c0015088 <cleanerTaskFunction(void*)+0xa8>
c0015085:	fb                   	sti    
c0015086:	66 90                	xchg   ax,ax
c0015088:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c001508d:	48                   	dec    eax
c001508e:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c0015093:	0f 85 4b ff ff ff    	jne    c0014fe4 <cleanerTaskFunction(void*)+0x4>
c0015099:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c001509e:	85 c0                	test   eax,eax
c00150a0:	0f 84 3e ff ff ff    	je     c0014fe4 <cleanerTaskFunction(void*)+0x4>
c00150a6:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c00150b0:	e8 f7 f6 ff ff       	call   c00147ac <schedule()>
c00150b5:	e9 2a ff ff ff       	jmp    c0014fe4 <cleanerTaskFunction(void*)+0x4>
c00150ba:	66 90                	xchg   ax,ax
c00150bc:	83 ec 0c             	sub    esp,0xc
c00150bf:	6a 02                	push   0x2
c00150c1:	e8 ba f8 ff ff       	call   c0014980 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00150c6:	83 c4 10             	add    esp,0x10
c00150c9:	e9 4e ff ff ff       	jmp    c001501c <cleanerTaskFunction(void*)+0x3c>
c00150ce:	66 90                	xchg   ax,ax

c00150d0 <terminateTask(int)>:
c00150d0:	83 ec 14             	sub    esp,0x14
c00150d3:	fa                   	cli    
c00150d4:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00150da:	ff 05 64 71 02 c0    	inc    DWORD PTR ds:0xc0027164
c00150e0:	fa                   	cli    
c00150e1:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00150e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00150eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150f0:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00150f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150f8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00150fb:	50                   	push   eax
c00150fc:	68 6c 71 02 c0       	push   0xc002716c
c0015101:	e8 56 90 00 00       	call   c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015106:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001510b:	83 c4 10             	add    esp,0x10
c001510e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015115:	a1 48 71 02 c0       	mov    eax,ds:0xc0027148
c001511a:	85 c0                	test   eax,eax
c001511c:	74 5e                	je     c001517c <terminateTask(int)+0xac>
c001511e:	83 ec 0c             	sub    esp,0xc
c0015121:	c6 05 4c 71 02 c0 01 	mov    BYTE PTR ds:0xc002714c,0x1
c0015128:	50                   	push   eax
c0015129:	e8 42 fb ff ff       	call   c0014c70 <unblockTask(ThreadControlBlock*)>
c001512e:	83 c4 10             	add    esp,0x10
c0015131:	8d 76 00             	lea    esi,[esi+0x0]
c0015134:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015139:	48                   	dec    eax
c001513a:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001513f:	75 03                	jne    c0015144 <terminateTask(int)+0x74>
c0015141:	fb                   	sti    
c0015142:	66 90                	xchg   ax,ax
c0015144:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c0015149:	48                   	dec    eax
c001514a:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c001514f:	75 0b                	jne    c001515c <terminateTask(int)+0x8c>
c0015151:	83 3d 60 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027160,0x0
c0015158:	75 36                	jne    c0015190 <terminateTask(int)+0xc0>
c001515a:	66 90                	xchg   ax,ax
c001515c:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015161:	48                   	dec    eax
c0015162:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015167:	75 03                	jne    c001516c <terminateTask(int)+0x9c>
c0015169:	fb                   	sti    
c001516a:	66 90                	xchg   ax,ax
c001516c:	fa                   	cli    
c001516d:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015173:	90                   	nop
c0015174:	e8 33 f6 ff ff       	call   c00147ac <schedule()>
c0015179:	eb e1                	jmp    c001515c <terminateTask(int)+0x8c>
c001517b:	90                   	nop
c001517c:	83 ec 0c             	sub    esp,0xc
c001517f:	68 9a 05 02 c0       	push   0xc002059a
c0015184:	e8 71 54 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015189:	83 c4 10             	add    esp,0x10
c001518c:	eb a6                	jmp    c0015134 <terminateTask(int)+0x64>
c001518e:	66 90                	xchg   ax,ax
c0015190:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c001519a:	eb d8                	jmp    c0015174 <terminateTask(int)+0xa4>

c001519c <Thr::terminateFromIRQ(int)>:
c001519c:	83 ec 18             	sub    esp,0x18
c001519f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00151a3:	50                   	push   eax
c00151a4:	e8 27 ff ff ff       	call   c00150d0 <terminateTask(int)>
c00151a9:	90                   	nop
c00151aa:	66 90                	xchg   ax,ax

c00151ac <Semaphore::release()>:
c00151ac:	83 ec 0c             	sub    esp,0xc
c00151af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151b3:	fa                   	cli    
c00151b4:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00151b9:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00151bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00151c2:	89 0d 64 71 02 c0    	mov    DWORD PTR ds:0xc0027164,ecx
c00151c8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00151cb:	85 c9                	test   ecx,ecx
c00151cd:	74 41                	je     c0015210 <Semaphore::release()+0x64>
c00151cf:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00151d2:	83 ec 0c             	sub    esp,0xc
c00151d5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00151d8:	51                   	push   ecx
c00151d9:	e8 92 fa ff ff       	call   c0014c70 <unblockTask(ThreadControlBlock*)>
c00151de:	a1 64 71 02 c0       	mov    eax,ds:0xc0027164
c00151e3:	83 c4 10             	add    esp,0x10
c00151e6:	48                   	dec    eax
c00151e7:	90                   	nop
c00151e8:	a3 64 71 02 c0       	mov    ds:0xc0027164,eax
c00151ed:	85 c0                	test   eax,eax
c00151ef:	75 0b                	jne    c00151fc <Semaphore::release()+0x50>
c00151f1:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c00151f6:	85 c0                	test   eax,eax
c00151f8:	75 1e                	jne    c0015218 <Semaphore::release()+0x6c>
c00151fa:	66 90                	xchg   ax,ax
c00151fc:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015201:	48                   	dec    eax
c0015202:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015207:	75 03                	jne    c001520c <Semaphore::release()+0x60>
c0015209:	fb                   	sti    
c001520a:	66 90                	xchg   ax,ax
c001520c:	83 c4 0c             	add    esp,0xc
c001520f:	c3                   	ret    
c0015210:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0015213:	eb d3                	jmp    c00151e8 <Semaphore::release()+0x3c>
c0015215:	8d 76 00             	lea    esi,[esi+0x0]
c0015218:	c7 05 60 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027160,0x0
c0015222:	e8 85 f5 ff ff       	call   c00147ac <schedule()>
c0015227:	eb d3                	jmp    c00151fc <Semaphore::release()+0x50>
c0015229:	8d 76 00             	lea    esi,[esi+0x0]

c001522c <__static_initialization_and_destruction_0(int, int)>:
c001522c:	83 ec 0c             	sub    esp,0xc
c001522f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015234:	0f 85 8e 00 00 00    	jne    c00152c8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001523a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015242:	0f 85 80 00 00 00    	jne    c00152c8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015248:	83 ec 0c             	sub    esp,0xc
c001524b:	68 84 71 02 c0       	push   0xc0027184
c0015250:	e8 b3 91 00 00       	call   c001e408 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015255:	83 c4 10             	add    esp,0x10
c0015258:	83 ec 04             	sub    esp,0x4
c001525b:	68 30 12 02 c0       	push   0xc0021230
c0015260:	68 84 71 02 c0       	push   0xc0027184
c0015265:	68 b8 e3 01 c0       	push   0xc001e3b8
c001526a:	e8 45 52 ff ff       	call   c000a4b4 <__cxa_atexit>
c001526f:	83 c4 10             	add    esp,0x10
c0015272:	83 ec 0c             	sub    esp,0xc
c0015275:	68 78 71 02 c0       	push   0xc0027178
c001527a:	e8 89 91 00 00       	call   c001e408 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001527f:	83 c4 10             	add    esp,0x10
c0015282:	83 ec 04             	sub    esp,0x4
c0015285:	68 30 12 02 c0       	push   0xc0021230
c001528a:	68 78 71 02 c0       	push   0xc0027178
c001528f:	68 b8 e3 01 c0       	push   0xc001e3b8
c0015294:	e8 1b 52 ff ff       	call   c000a4b4 <__cxa_atexit>
c0015299:	83 c4 10             	add    esp,0x10
c001529c:	83 ec 0c             	sub    esp,0xc
c001529f:	68 6c 71 02 c0       	push   0xc002716c
c00152a4:	e8 5f 91 00 00       	call   c001e408 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00152a9:	83 c4 10             	add    esp,0x10
c00152ac:	83 ec 04             	sub    esp,0x4
c00152af:	68 30 12 02 c0       	push   0xc0021230
c00152b4:	68 6c 71 02 c0       	push   0xc002716c
c00152b9:	68 b8 e3 01 c0       	push   0xc001e3b8
c00152be:	e8 f1 51 ff ff       	call   c000a4b4 <__cxa_atexit>
c00152c3:	83 c4 10             	add    esp,0x10
c00152c6:	66 90                	xchg   ax,ax
c00152c8:	90                   	nop
c00152c9:	83 c4 0c             	add    esp,0xc
c00152cc:	c3                   	ret    
c00152cd:	8d 76 00             	lea    esi,[esi+0x0]

c00152d0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00152d0:	83 ec 0c             	sub    esp,0xc
c00152d3:	83 ec 08             	sub    esp,0x8
c00152d6:	68 ff ff 00 00       	push   0xffff
c00152db:	6a 01                	push   0x1
c00152dd:	e8 4a ff ff ff       	call   c001522c <__static_initialization_and_destruction_0(int, int)>
c00152e2:	83 c4 10             	add    esp,0x10
c00152e5:	83 c4 0c             	add    esp,0xc
c00152e8:	c3                   	ret    

c00152e9 <Vm::inbv(unsigned short)>:
c00152e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00152ed:	66 81 fa fe fe       	cmp    dx,0xfefe
c00152f2:	75 06                	jne    c00152fa <Vm::inbv(unsigned short)+0x11>
c00152f4:	a0 cc 71 02 c0       	mov    al,ds:0xc00271cc
c00152f9:	c3                   	ret    
c00152fa:	ec                   	in     al,dx
c00152fb:	c3                   	ret    

c00152fc <Vm::outbv(unsigned short, unsigned char)>:
c00152fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015300:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015304:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015309:	75 25                	jne    c0015330 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001530b:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c0015311:	8d 51 01             	lea    edx,[ecx+0x1]
c0015314:	88 81 e0 71 02 c0    	mov    BYTE PTR [ecx-0x3ffd8e20],al
c001531a:	89 15 cc 71 02 c0    	mov    DWORD PTR ds:0xc00271cc,edx
c0015320:	83 fa 20             	cmp    edx,0x20
c0015323:	75 0c                	jne    c0015331 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015325:	c7 05 cc 71 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x1f
c001532f:	c3                   	ret    
c0015330:	ee                   	out    dx,al
c0015331:	c3                   	ret    

c0015332 <Vm::realToLinear(unsigned short, unsigned short)>:
c0015332:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015337:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001533c:	c1 e0 04             	shl    eax,0x4
c001533f:	01 d0                	add    eax,edx
c0015341:	c3                   	ret    

c0015342 <Vm::getSegment(unsigned int)>:
c0015342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015346:	c1 e8 10             	shr    eax,0x10
c0015349:	c3                   	ret    

c001534a <Vm::getOffset(unsigned int)>:
c001534a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001534e:	c3                   	ret    

c001534f <Vm::mainloop2()>:
c001534f:	83 ec 18             	sub    esp,0x18
c0015352:	fa                   	cli    
c0015353:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c0015359:	6a 02                	push   0x2
c001535b:	c6 05 c5 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c5,0x1
c0015362:	e8 19 f6 ff ff       	call   c0014980 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015367:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001536c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015370:	52                   	push   edx
c0015371:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015375:	52                   	push   edx
c0015376:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001537a:	52                   	push   edx
c001537b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001537f:	50                   	push   eax
c0015380:	e8 8a ae fe ff       	call   c000020f <goToVM86>
c0015385:	83 c4 2c             	add    esp,0x2c
c0015388:	c3                   	ret    

c0015389 <Vm::mainVm8086Loop(void*)>:
c0015389:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001538e:	48                   	dec    eax
c001538f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015394:	75 01                	jne    c0015397 <Vm::mainVm8086Loop(void*)+0xe>
c0015396:	fb                   	sti    
c0015397:	eb b6                	jmp    c001534f <Vm::mainloop2()>

c0015399 <Vm::mainloop3(unsigned long)>:
c0015399:	83 ec 18             	sub    esp,0x18
c001539c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00153a0:	fa                   	cli    
c00153a1:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00153a7:	6a 02                	push   0x2
c00153a9:	c6 05 c4 71 02 c0 01 	mov    BYTE PTR ds:0xc00271c4,0x1
c00153b0:	a3 c0 71 02 c0       	mov    ds:0xc00271c0,eax
c00153b5:	e8 c6 f5 ff ff       	call   c0014980 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00153ba:	83 c4 1c             	add    esp,0x1c
c00153bd:	eb 90                	jmp    c001534f <Vm::mainloop2()>

c00153bf <Vm::initialise8086()>:
c00153bf:	83 ec 0c             	sub    esp,0xc
c00153c2:	68 80 00 00 00       	push   0x80
c00153c7:	6a 00                	push   0x0
c00153c9:	68 89 53 01 c0       	push   0xc0015389
c00153ce:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00153d4:	e8 8b f1 ff ff       	call   c0014564 <Process::createThread(void (*)(void*), void*, int)>
c00153d9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00153e0:	a3 c8 71 02 c0       	mov    ds:0xc00271c8,eax
c00153e5:	68 00 01 00 00       	push   0x100
c00153ea:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00153ef:	6a 00                	push   0x0
c00153f1:	6a 00                	push   0x0
c00153f3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00153f9:	e8 fc 48 ff ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00153fe:	83 c4 2c             	add    esp,0x2c
c0015401:	c3                   	ret    

c0015402 <Vm::finish8086()>:
c0015402:	53                   	push   ebx
c0015403:	83 ec 08             	sub    esp,0x8
c0015406:	fa                   	cli    
c0015407:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001540d:	80 3d c4 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c4,0x0
c0015414:	75 15                	jne    c001542b <Vm::finish8086()+0x29>
c0015416:	e8 91 f3 ff ff       	call   c00147ac <schedule()>
c001541b:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015420:	48                   	dec    eax
c0015421:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015426:	75 de                	jne    c0015406 <Vm::finish8086()+0x4>
c0015428:	fb                   	sti    
c0015429:	eb db                	jmp    c0015406 <Vm::finish8086()+0x4>
c001542b:	83 ec 0c             	sub    esp,0xc
c001542e:	8b 1d c0 71 02 c0    	mov    ebx,DWORD PTR ds:0xc00271c0
c0015434:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c001543a:	c6 05 c4 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c4,0x0
c0015441:	e8 2a f8 ff ff       	call   c0014c70 <unblockTask(ThreadControlBlock*)>
c0015446:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001544b:	83 c4 10             	add    esp,0x10
c001544e:	8d 50 ff             	lea    edx,[eax-0x1]
c0015451:	89 15 68 71 02 c0    	mov    DWORD PTR ds:0xc0027168,edx
c0015457:	85 d2                	test   edx,edx
c0015459:	75 01                	jne    c001545c <Vm::finish8086()+0x5a>
c001545b:	fb                   	sti    
c001545c:	89 d8                	mov    eax,ebx
c001545e:	83 c4 08             	add    esp,0x8
c0015461:	5b                   	pop    ebx
c0015462:	c3                   	ret    

c0015463 <Vm::getOutput8086(unsigned char*)>:
c0015463:	57                   	push   edi
c0015464:	8b 0d cc 71 02 c0    	mov    ecx,DWORD PTR ds:0xc00271cc
c001546a:	56                   	push   esi
c001546b:	be e0 71 02 c0       	mov    esi,0xc00271e0
c0015470:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015474:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015476:	a1 cc 71 02 c0       	mov    eax,ds:0xc00271cc
c001547b:	5e                   	pop    esi
c001547c:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c0015486:	5f                   	pop    edi
c0015487:	c3                   	ret    

c0015488 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015488:	55                   	push   ebp
c0015489:	57                   	push   edi
c001548a:	56                   	push   esi
c001548b:	53                   	push   ebx
c001548c:	83 ec 0c             	sub    esp,0xc
c001548f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0015493:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0015497:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001549b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001549f:	fa                   	cli    
c00154a0:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c00154a6:	80 3d c5 71 02 c0 00 	cmp    BYTE PTR ds:0xc00271c5,0x0
c00154ad:	75 15                	jne    c00154c4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00154af:	e8 f8 f2 ff ff       	call   c00147ac <schedule()>
c00154b4:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00154b9:	48                   	dec    eax
c00154ba:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00154bf:	75 de                	jne    c001549f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00154c1:	fb                   	sti    
c00154c2:	eb db                	jmp    c001549f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00154c4:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c00154c9:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c00154d3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00154d7:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00154db:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00154df:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00154e3:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00154e7:	0f b7 ff             	movzx  edi,di
c00154ea:	0f b7 f6             	movzx  esi,si
c00154ed:	50                   	push   eax
c00154ee:	6a 20                	push   0x20
c00154f0:	6a 00                	push   0x0
c00154f2:	68 e0 71 02 c0       	push   0xc00271e0
c00154f7:	e8 c4 af fe ff       	call   c00004c0 <memset>
c00154fc:	5a                   	pop    edx
c00154fd:	59                   	pop    ecx
c00154fe:	57                   	push   edi
c00154ff:	56                   	push   esi
c0015500:	e8 2d fe ff ff       	call   c0015332 <Vm::realToLinear(unsigned short, unsigned short)>
c0015505:	83 c4 10             	add    esp,0x10
c0015508:	89 c7                	mov    edi,eax
c001550a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001550e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0015512:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015514:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015519:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c0015520:	48                   	dec    eax
c0015521:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015526:	75 01                	jne    c0015529 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0015528:	fb                   	sti    
c0015529:	83 ec 0c             	sub    esp,0xc
c001552c:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c0015532:	e8 39 f7 ff ff       	call   c0014c70 <unblockTask(ThreadControlBlock*)>
c0015537:	83 c4 1c             	add    esp,0x1c
c001553a:	b0 01                	mov    al,0x1
c001553c:	5b                   	pop    ebx
c001553d:	5e                   	pop    esi
c001553e:	5f                   	pop    edi
c001553f:	5d                   	pop    ebp
c0015540:	c3                   	ret    

c0015541 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015541:	55                   	push   ebp
c0015542:	57                   	push   edi
c0015543:	56                   	push   esi
c0015544:	53                   	push   ebx
c0015545:	83 ec 2c             	sub    esp,0x2c
c0015548:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001554c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0015550:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0015554:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015558:	fa                   	cli    
c0015559:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001555f:	0f b6 35 c5 71 02 c0 	movzx  esi,BYTE PTR ds:0xc00271c5
c0015566:	89 f0                	mov    eax,esi
c0015568:	84 c0                	test   al,al
c001556a:	75 1d                	jne    c0015589 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001556c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0015570:	e8 37 f2 ff ff       	call   c00147ac <schedule()>
c0015575:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001557a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001557e:	48                   	dec    eax
c001557f:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015584:	75 d2                	jne    c0015558 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015586:	fb                   	sti    
c0015587:	eb cf                	jmp    c0015558 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0015589:	a1 c8 71 02 c0       	mov    eax,ds:0xc00271c8
c001558e:	c7 05 cc 71 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00271cc,0x0
c0015598:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001559c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00155a0:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00155a4:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00155a8:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00155ac:	50                   	push   eax
c00155ad:	6a 20                	push   0x20
c00155af:	6a 00                	push   0x0
c00155b1:	68 e0 71 02 c0       	push   0xc00271e0
c00155b6:	e8 05 af fe ff       	call   c00004c0 <memset>
c00155bb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00155c2:	e8 9e 22 ff ff       	call   c0007865 <malloc>
c00155c7:	83 c4 0c             	add    esp,0xc
c00155ca:	89 c3                	mov    ebx,eax
c00155cc:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c00155d2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00155d6:	50                   	push   eax
c00155d7:	e8 94 55 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c00155dc:	83 c4 10             	add    esp,0x10
c00155df:	85 db                	test   ebx,ebx
c00155e1:	75 0a                	jne    c00155ed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00155e3:	83 ec 0c             	sub    esp,0xc
c00155e6:	68 c4 06 02 c0       	push   0xc00206c4
c00155eb:	eb 3e                	jmp    c001562b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00155ed:	50                   	push   eax
c00155ee:	8d 44 24 17          	lea    eax,[esp+0x17]
c00155f2:	50                   	push   eax
c00155f3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00155f7:	50                   	push   eax
c00155f8:	53                   	push   ebx
c00155f9:	e8 de 58 ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c00155fe:	83 c4 10             	add    esp,0x10
c0015601:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0015606:	74 0a                	je     c0015612 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0015608:	83 ec 0c             	sub    esp,0xc
c001560b:	68 d8 06 02 c0       	push   0xc00206d8
c0015610:	eb 19                	jmp    c001562b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0015612:	51                   	push   ecx
c0015613:	51                   	push   ecx
c0015614:	6a 01                	push   0x1
c0015616:	53                   	push   ebx
c0015617:	e8 14 56 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c001561c:	83 c4 10             	add    esp,0x10
c001561f:	85 c0                	test   eax,eax
c0015621:	74 24                	je     c0015647 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0015623:	83 ec 0c             	sub    esp,0xc
c0015626:	68 f1 06 02 c0       	push   0xc00206f1
c001562b:	e8 7f ad ff ff       	call   c00103af <KePanic(char const*)>
c0015630:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015635:	83 c4 10             	add    esp,0x10
c0015638:	48                   	dec    eax
c0015639:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001563e:	85 c0                	test   eax,eax
c0015640:	75 01                	jne    c0015643 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0015642:	fb                   	sti    
c0015643:	31 f6                	xor    esi,esi
c0015645:	eb 58                	jmp    c001569f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0015647:	0f b7 ed             	movzx  ebp,bp
c001564a:	50                   	push   eax
c001564b:	0f b7 ff             	movzx  edi,di
c001564e:	50                   	push   eax
c001564f:	55                   	push   ebp
c0015650:	57                   	push   edi
c0015651:	e8 dc fc ff ff       	call   c0015332 <Vm::realToLinear(unsigned short, unsigned short)>
c0015656:	5a                   	pop    edx
c0015657:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015659:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001565d:	51                   	push   ecx
c001565e:	50                   	push   eax
c001565f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015663:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015667:	53                   	push   ebx
c0015668:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001566b:	83 c4 14             	add    esp,0x14
c001566e:	53                   	push   ebx
c001566f:	e8 1a 56 ff ff       	call   c000ac8e <File::close()>
c0015674:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0015679:	83 c4 10             	add    esp,0x10
c001567c:	48                   	dec    eax
c001567d:	c6 05 c5 71 02 c0 00 	mov    BYTE PTR ds:0xc00271c5,0x0
c0015684:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c0015689:	85 c0                	test   eax,eax
c001568b:	75 01                	jne    c001568e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001568d:	fb                   	sti    
c001568e:	83 ec 0c             	sub    esp,0xc
c0015691:	ff 35 c8 71 02 c0    	push   DWORD PTR ds:0xc00271c8
c0015697:	e8 d4 f5 ff ff       	call   c0014c70 <unblockTask(ThreadControlBlock*)>
c001569c:	83 c4 10             	add    esp,0x10
c001569f:	83 c4 2c             	add    esp,0x2c
c00156a2:	89 f0                	mov    eax,esi
c00156a4:	5b                   	pop    ebx
c00156a5:	5e                   	pop    esi
c00156a6:	5f                   	pop    edi
c00156a7:	5d                   	pop    ebp
c00156a8:	c3                   	ret    

c00156a9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00156a9:	57                   	push   edi
c00156aa:	56                   	push   esi
c00156ab:	53                   	push   ebx
c00156ac:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00156b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156b4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00156b8:	83 e8 06             	sub    eax,0x6
c00156bb:	0f b7 c0             	movzx  eax,ax
c00156be:	50                   	push   eax
c00156bf:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00156c4:	50                   	push   eax
c00156c5:	e8 68 fc ff ff       	call   c0015332 <Vm::realToLinear(unsigned short, unsigned short)>
c00156ca:	5a                   	pop    edx
c00156cb:	5e                   	pop    esi
c00156cc:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00156cf:	8d 56 fa             	lea    edx,[esi-0x6]
c00156d2:	81 e2 ff ff 00 00    	and    edx,0xffff
c00156d8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00156db:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00156de:	83 c2 02             	add    edx,0x2
c00156e1:	66 89 10             	mov    WORD PTR [eax],dx
c00156e4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00156e7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00156eb:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00156ee:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00156f2:	89 d6                	mov    esi,edx
c00156f4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00156fa:	66 81 e6 ff fd       	and    si,0xfdff
c00156ff:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0015703:	74 07                	je     c001570c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0015705:	89 d6                	mov    esi,edx
c0015707:	66 81 ce 00 02       	or     si,0x200
c001570c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0015710:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015715:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015719:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0015721:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0015724:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001572c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001572f:	5b                   	pop    ebx
c0015730:	5e                   	pop    esi
c0015731:	5f                   	pop    edi
c0015732:	c3                   	ret    

c0015733 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0015733:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015738:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001573d:	c1 e0 04             	shl    eax,0x4
c0015740:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0015743:	c3                   	ret    

c0015744 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0015744:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015749:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001574e:	c1 e0 04             	shl    eax,0x4
c0015751:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0015755:	c3                   	ret    

c0015756 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0015756:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001575b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015760:	c1 e0 04             	shl    eax,0x4
c0015763:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0015766:	c3                   	ret    

c0015767 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0015767:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001576c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015771:	c1 e0 04             	shl    eax,0x4
c0015774:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015778:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001577b:	c3                   	ret    

c001577c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001577c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015781:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015786:	c1 e0 04             	shl    eax,0x4
c0015789:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001578d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0015791:	c3                   	ret    

c0015792 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0015792:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015797:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001579c:	c1 e0 04             	shl    eax,0x4
c001579f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00157a3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00157a6:	c3                   	ret    

c00157a7 <Vm::faultHandler(regs*)>:
c00157a7:	55                   	push   ebp
c00157a8:	57                   	push   edi
c00157a9:	56                   	push   esi
c00157aa:	53                   	push   ebx
c00157ab:	83 ec 1c             	sub    esp,0x1c
c00157ae:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00157b2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00157b5:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00157b9:	0f b7 f8             	movzx  edi,ax
c00157bc:	52                   	push   edx
c00157bd:	0f b7 c0             	movzx  eax,ax
c00157c0:	50                   	push   eax
c00157c1:	e8 6c fb ff ff       	call   c0015332 <Vm::realToLinear(unsigned short, unsigned short)>
c00157c6:	5a                   	pop    edx
c00157c7:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00157ca:	59                   	pop    ecx
c00157cb:	89 c1                	mov    ecx,eax
c00157cd:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00157d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00157d4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00157d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00157dd:	0f b7 c5             	movzx  eax,bp
c00157e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00157e4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00157e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00157ec:	e8 41 fb ff ff       	call   c0015332 <Vm::realToLinear(unsigned short, unsigned short)>
c00157f1:	5e                   	pop    esi
c00157f2:	be 06 00 00 00       	mov    esi,0x6
c00157f7:	5a                   	pop    edx
c00157f8:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00157fd:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0015802:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0015805:	80 fa 9d             	cmp    dl,0x9d
c0015808:	0f 84 2c 02 00 00    	je     c0015a3a <Vm::faultHandler(regs*)+0x293>
c001580e:	0f 87 91 00 00 00    	ja     c00158a5 <Vm::faultHandler(regs*)+0xfe>
c0015814:	80 fa 66             	cmp    dl,0x66
c0015817:	0f 84 98 01 00 00    	je     c00159b5 <Vm::faultHandler(regs*)+0x20e>
c001581d:	77 47                	ja     c0015866 <Vm::faultHandler(regs*)+0xbf>
c001581f:	80 fa 36             	cmp    dl,0x36
c0015822:	0f 84 80 01 00 00    	je     c00159a8 <Vm::faultHandler(regs*)+0x201>
c0015828:	77 1a                	ja     c0015844 <Vm::faultHandler(regs*)+0x9d>
c001582a:	80 fa 26             	cmp    dl,0x26
c001582d:	0f 84 4e 01 00 00    	je     c0015981 <Vm::faultHandler(regs*)+0x1da>
c0015833:	80 fa 2e             	cmp    dl,0x2e
c0015836:	0f 85 e2 05 00 00    	jne    c0015e1e <Vm::faultHandler(regs*)+0x677>
c001583c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001583f:	31 f6                	xor    esi,esi
c0015841:	41                   	inc    ecx
c0015842:	eb be                	jmp    c0015802 <Vm::faultHandler(regs*)+0x5b>
c0015844:	80 fa 64             	cmp    dl,0x64
c0015847:	0f 84 41 01 00 00    	je     c001598e <Vm::faultHandler(regs*)+0x1e7>
c001584d:	0f 87 48 01 00 00    	ja     c001599b <Vm::faultHandler(regs*)+0x1f4>
c0015853:	80 fa 3e             	cmp    dl,0x3e
c0015856:	0f 85 c2 05 00 00    	jne    c0015e1e <Vm::faultHandler(regs*)+0x677>
c001585c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001585f:	be 01 00 00 00       	mov    esi,0x1
c0015864:	eb db                	jmp    c0015841 <Vm::faultHandler(regs*)+0x9a>
c0015866:	80 fa 6d             	cmp    dl,0x6d
c0015869:	0f 84 ec 02 00 00    	je     c0015b5b <Vm::faultHandler(regs*)+0x3b4>
c001586f:	77 17                	ja     c0015888 <Vm::faultHandler(regs*)+0xe1>
c0015871:	80 fa 67             	cmp    dl,0x67
c0015874:	0f 84 48 01 00 00    	je     c00159c2 <Vm::faultHandler(regs*)+0x21b>
c001587a:	80 fa 6c             	cmp    dl,0x6c
c001587d:	0f 84 69 02 00 00    	je     c0015aec <Vm::faultHandler(regs*)+0x345>
c0015883:	e9 96 05 00 00       	jmp    c0015e1e <Vm::faultHandler(regs*)+0x677>
c0015888:	80 fa 6f             	cmp    dl,0x6f
c001588b:	0f 84 f4 03 00 00    	je     c0015c85 <Vm::faultHandler(regs*)+0x4de>
c0015891:	0f 82 59 03 00 00    	jb     c0015bf0 <Vm::faultHandler(regs*)+0x449>
c0015897:	80 fa 9c             	cmp    dl,0x9c
c001589a:	0f 84 2f 01 00 00    	je     c00159cf <Vm::faultHandler(regs*)+0x228>
c00158a0:	e9 79 05 00 00       	jmp    c0015e1e <Vm::faultHandler(regs*)+0x677>
c00158a5:	80 fa ec             	cmp    dl,0xec
c00158a8:	0f 84 14 05 00 00    	je     c0015dc2 <Vm::faultHandler(regs*)+0x61b>
c00158ae:	77 7b                	ja     c001592b <Vm::faultHandler(regs*)+0x184>
c00158b0:	80 fa e4             	cmp    dl,0xe4
c00158b3:	0f 84 93 04 00 00    	je     c0015d4c <Vm::faultHandler(regs*)+0x5a5>
c00158b9:	77 53                	ja     c001590e <Vm::faultHandler(regs*)+0x167>
c00158bb:	80 fa cd             	cmp    dl,0xcd
c00158be:	0f 84 d9 01 00 00    	je     c0015a9d <Vm::faultHandler(regs*)+0x2f6>
c00158c4:	80 fa cf             	cmp    dl,0xcf
c00158c7:	0f 85 51 05 00 00    	jne    c0015e1e <Vm::faultHandler(regs*)+0x677>
c00158cd:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00158d0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00158d3:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00158d7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00158da:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00158de:	81 ca 00 02 02 00    	or     edx,0x20200
c00158e4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00158e7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00158eb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00158f1:	66 c1 e8 09          	shr    ax,0x9
c00158f5:	83 e0 01             	and    eax,0x1
c00158f8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00158fb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00158fe:	83 c0 06             	add    eax,0x6
c0015901:	25 ff ff 00 00       	and    eax,0xffff
c0015906:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015909:	e9 0c 05 00 00       	jmp    c0015e1a <Vm::faultHandler(regs*)+0x673>
c001590e:	80 fa e6             	cmp    dl,0xe6
c0015911:	0f 84 7f 04 00 00    	je     c0015d96 <Vm::faultHandler(regs*)+0x5ef>
c0015917:	0f 82 4b 04 00 00    	jb     c0015d68 <Vm::faultHandler(regs*)+0x5c1>
c001591d:	80 fa e7             	cmp    dl,0xe7
c0015920:	0f 84 87 04 00 00    	je     c0015dad <Vm::faultHandler(regs*)+0x606>
c0015926:	e9 f3 04 00 00       	jmp    c0015e1e <Vm::faultHandler(regs*)+0x677>
c001592b:	80 fa ef             	cmp    dl,0xef
c001592e:	0f 84 d1 04 00 00    	je     c0015e05 <Vm::faultHandler(regs*)+0x65e>
c0015934:	77 28                	ja     c001595e <Vm::faultHandler(regs*)+0x1b7>
c0015936:	80 fa ed             	cmp    dl,0xed
c0015939:	0f 84 9f 04 00 00    	je     c0015dde <Vm::faultHandler(regs*)+0x637>
c001593f:	80 fa ee             	cmp    dl,0xee
c0015942:	0f 85 d6 04 00 00    	jne    c0015e1e <Vm::faultHandler(regs*)+0x677>
c0015948:	50                   	push   eax
c0015949:	50                   	push   eax
c001594a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001594e:	50                   	push   eax
c001594f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015953:	50                   	push   eax
c0015954:	e8 a3 f9 ff ff       	call   c00152fc <Vm::outbv(unsigned short, unsigned char)>
c0015959:	e9 9f 04 00 00       	jmp    c0015dfd <Vm::faultHandler(regs*)+0x656>
c001595e:	80 fa fa             	cmp    dl,0xfa
c0015961:	0f 84 69 01 00 00    	je     c0015ad0 <Vm::faultHandler(regs*)+0x329>
c0015967:	80 fa fb             	cmp    dl,0xfb
c001596a:	0f 84 6e 01 00 00    	je     c0015ade <Vm::faultHandler(regs*)+0x337>
c0015970:	80 fa f3             	cmp    dl,0xf3
c0015973:	0f 85 a5 04 00 00    	jne    c0015e1e <Vm::faultHandler(regs*)+0x677>
c0015979:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001597c:	e9 c0 fe ff ff       	jmp    c0015841 <Vm::faultHandler(regs*)+0x9a>
c0015981:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015984:	be 02 00 00 00       	mov    esi,0x2
c0015989:	e9 b3 fe ff ff       	jmp    c0015841 <Vm::faultHandler(regs*)+0x9a>
c001598e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015991:	be 03 00 00 00       	mov    esi,0x3
c0015996:	e9 a6 fe ff ff       	jmp    c0015841 <Vm::faultHandler(regs*)+0x9a>
c001599b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001599e:	be 04 00 00 00       	mov    esi,0x4
c00159a3:	e9 99 fe ff ff       	jmp    c0015841 <Vm::faultHandler(regs*)+0x9a>
c00159a8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00159ab:	be 05 00 00 00       	mov    esi,0x5
c00159b0:	e9 8c fe ff ff       	jmp    c0015841 <Vm::faultHandler(regs*)+0x9a>
c00159b5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00159b8:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00159bd:	e9 7f fe ff ff       	jmp    c0015841 <Vm::faultHandler(regs*)+0x9a>
c00159c2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00159c5:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00159ca:	e9 72 fe ff ff       	jmp    c0015841 <Vm::faultHandler(regs*)+0x9a>
c00159cf:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00159d2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00159d6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00159db:	74 30                	je     c0015a0d <Vm::faultHandler(regs*)+0x266>
c00159dd:	83 e9 04             	sub    ecx,0x4
c00159e0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00159e6:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00159ec:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00159ef:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00159f2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00159f8:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00159fc:	0f 84 15 04 00 00    	je     c0015e17 <Vm::faultHandler(regs*)+0x670>
c0015a02:	80 ce 02             	or     dh,0x2
c0015a05:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0015a08:	e9 0a 04 00 00       	jmp    c0015e17 <Vm::faultHandler(regs*)+0x670>
c0015a0d:	83 e9 02             	sub    ecx,0x2
c0015a10:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0015a16:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0015a19:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015a1d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015a23:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0015a27:	74 05                	je     c0015a2e <Vm::faultHandler(regs*)+0x287>
c0015a29:	80 ce 02             	or     dh,0x2
c0015a2c:	eb 03                	jmp    c0015a31 <Vm::faultHandler(regs*)+0x28a>
c0015a2e:	80 e6 fd             	and    dh,0xfd
c0015a31:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0015a35:	e9 dd 03 00 00       	jmp    c0015e17 <Vm::faultHandler(regs*)+0x670>
c0015a3a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015a3f:	74 2a                	je     c0015a6b <Vm::faultHandler(regs*)+0x2c4>
c0015a41:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a43:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0015a49:	81 ca 00 02 02 00    	or     edx,0x20200
c0015a4f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015a52:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a54:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015a5a:	c1 e8 09             	shr    eax,0x9
c0015a5d:	83 e0 01             	and    eax,0x1
c0015a60:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015a63:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015a66:	83 c0 04             	add    eax,0x4
c0015a69:	eb 25                	jmp    c0015a90 <Vm::faultHandler(regs*)+0x2e9>
c0015a6b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0015a6e:	81 ca 00 02 02 00    	or     edx,0x20200
c0015a74:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0015a77:	66 8b 00             	mov    ax,WORD PTR [eax]
c0015a7a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015a80:	66 c1 e8 09          	shr    ax,0x9
c0015a84:	83 e0 01             	and    eax,0x1
c0015a87:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0015a8a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0015a8d:	83 c0 02             	add    eax,0x2
c0015a90:	25 ff ff 00 00       	and    eax,0xffff
c0015a95:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0015a98:	e9 7a 03 00 00       	jmp    c0015e17 <Vm::faultHandler(regs*)+0x670>
c0015a9d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015aa1:	3c ee                	cmp    al,0xee
c0015aa3:	75 10                	jne    c0015ab5 <Vm::faultHandler(regs*)+0x30e>
c0015aa5:	83 ec 0c             	sub    esp,0xc
c0015aa8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0015aab:	e8 e9 f8 ff ff       	call   c0015399 <Vm::mainloop3(unsigned long)>
c0015ab0:	e9 4b 03 00 00       	jmp    c0015e00 <Vm::faultHandler(regs*)+0x659>
c0015ab5:	83 ec 0c             	sub    esp,0xc
c0015ab8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015abc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015ac0:	51                   	push   ecx
c0015ac1:	50                   	push   eax
c0015ac2:	53                   	push   ebx
c0015ac3:	e8 e1 fb ff ff       	call   c00156a9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0015ac8:	83 c4 20             	add    esp,0x20
c0015acb:	e9 4a 03 00 00       	jmp    c0015e1a <Vm::faultHandler(regs*)+0x673>
c0015ad0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ad5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0015ad9:	e9 39 03 00 00       	jmp    c0015e17 <Vm::faultHandler(regs*)+0x670>
c0015ade:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ae3:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0015ae7:	e9 2b 03 00 00       	jmp    c0015e17 <Vm::faultHandler(regs*)+0x670>
c0015aec:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015aef:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015af4:	74 2b                	je     c0015b21 <Vm::faultHandler(regs*)+0x37a>
c0015af6:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0015afd:	76 22                	jbe    c0015b21 <Vm::faultHandler(regs*)+0x37a>
c0015aff:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015b03:	50                   	push   eax
c0015b04:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015b08:	50                   	push   eax
c0015b09:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015b0d:	50                   	push   eax
c0015b0e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015b12:	50                   	push   eax
c0015b13:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015b17:	50                   	push   eax
c0015b18:	6a 6c                	push   0x6c
c0015b1a:	6a 6c                	push   0x6c
c0015b1c:	e9 b9 01 00 00       	jmp    c0015cda <Vm::faultHandler(regs*)+0x533>
c0015b21:	83 ec 0c             	sub    esp,0xc
c0015b24:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015b28:	0f b7 f6             	movzx  esi,si
c0015b2b:	50                   	push   eax
c0015b2c:	e8 b8 f7 ff ff       	call   c00152e9 <Vm::inbv(unsigned short)>
c0015b31:	83 c4 0c             	add    esp,0xc
c0015b34:	0f b6 c0             	movzx  eax,al
c0015b37:	50                   	push   eax
c0015b38:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0015b3c:	50                   	push   eax
c0015b3d:	56                   	push   esi
c0015b3e:	e8 24 fc ff ff       	call   c0015767 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0015b43:	83 c4 10             	add    esp,0x10
c0015b46:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015b49:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015b4d:	74 03                	je     c0015b52 <Vm::faultHandler(regs*)+0x3ab>
c0015b4f:	48                   	dec    eax
c0015b50:	eb 01                	jmp    c0015b53 <Vm::faultHandler(regs*)+0x3ac>
c0015b52:	40                   	inc    eax
c0015b53:	0f b7 c0             	movzx  eax,ax
c0015b56:	e9 8d 00 00 00       	jmp    c0015be8 <Vm::faultHandler(regs*)+0x441>
c0015b5b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0015b5e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015b61:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015b66:	74 29                	je     c0015b91 <Vm::faultHandler(regs*)+0x3ea>
c0015b68:	3d ff ff 00 00       	cmp    eax,0xffff
c0015b6d:	76 22                	jbe    c0015b91 <Vm::faultHandler(regs*)+0x3ea>
c0015b6f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015b73:	50                   	push   eax
c0015b74:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015b78:	50                   	push   eax
c0015b79:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015b7d:	50                   	push   eax
c0015b7e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015b82:	50                   	push   eax
c0015b83:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015b87:	50                   	push   eax
c0015b88:	6a 6d                	push   0x6d
c0015b8a:	6a 6d                	push   0x6d
c0015b8c:	e9 49 01 00 00       	jmp    c0015cda <Vm::faultHandler(regs*)+0x533>
c0015b91:	0f b7 c8             	movzx  ecx,ax
c0015b94:	0f b7 f6             	movzx  esi,si
c0015b97:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015b9a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015b9f:	74 20                	je     c0015bc1 <Vm::faultHandler(regs*)+0x41a>
c0015ba1:	ed                   	in     eax,dx
c0015ba2:	55                   	push   ebp
c0015ba3:	50                   	push   eax
c0015ba4:	51                   	push   ecx
c0015ba5:	56                   	push   esi
c0015ba6:	e8 e7 fb ff ff       	call   c0015792 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0015bab:	83 c4 10             	add    esp,0x10
c0015bae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015bb1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015bb5:	74 05                	je     c0015bbc <Vm::faultHandler(regs*)+0x415>
c0015bb7:	83 e8 04             	sub    eax,0x4
c0015bba:	eb 27                	jmp    c0015be3 <Vm::faultHandler(regs*)+0x43c>
c0015bbc:	83 c0 04             	add    eax,0x4
c0015bbf:	eb 22                	jmp    c0015be3 <Vm::faultHandler(regs*)+0x43c>
c0015bc1:	66 ed                	in     ax,dx
c0015bc3:	0f b7 c0             	movzx  eax,ax
c0015bc6:	57                   	push   edi
c0015bc7:	50                   	push   eax
c0015bc8:	51                   	push   ecx
c0015bc9:	56                   	push   esi
c0015bca:	e8 ad fb ff ff       	call   c001577c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0015bcf:	83 c4 10             	add    esp,0x10
c0015bd2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015bd5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015bd9:	74 05                	je     c0015be0 <Vm::faultHandler(regs*)+0x439>
c0015bdb:	83 e8 02             	sub    eax,0x2
c0015bde:	eb 03                	jmp    c0015be3 <Vm::faultHandler(regs*)+0x43c>
c0015be0:	83 c0 02             	add    eax,0x2
c0015be3:	25 ff ff 00 00       	and    eax,0xffff
c0015be8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0015beb:	e9 27 02 00 00       	jmp    c0015e17 <Vm::faultHandler(regs*)+0x670>
c0015bf0:	8d 46 ff             	lea    eax,[esi-0x1]
c0015bf3:	3c 05                	cmp    al,0x5
c0015bf5:	77 24                	ja     c0015c1b <Vm::faultHandler(regs*)+0x474>
c0015bf7:	0f b6 c0             	movzx  eax,al
c0015bfa:	ff 24 85 64 07 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf89c]
c0015c01:	0f b7 fd             	movzx  edi,bp
c0015c04:	eb 15                	jmp    c0015c1b <Vm::faultHandler(regs*)+0x474>
c0015c06:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0015c0a:	eb 0f                	jmp    c0015c1b <Vm::faultHandler(regs*)+0x474>
c0015c0c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0015c10:	eb 09                	jmp    c0015c1b <Vm::faultHandler(regs*)+0x474>
c0015c12:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0015c16:	eb 03                	jmp    c0015c1b <Vm::faultHandler(regs*)+0x474>
c0015c18:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0015c1b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015c1e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015c23:	74 29                	je     c0015c4e <Vm::faultHandler(regs*)+0x4a7>
c0015c25:	3d ff ff 00 00       	cmp    eax,0xffff
c0015c2a:	76 22                	jbe    c0015c4e <Vm::faultHandler(regs*)+0x4a7>
c0015c2c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015c30:	50                   	push   eax
c0015c31:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015c35:	50                   	push   eax
c0015c36:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015c3a:	50                   	push   eax
c0015c3b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015c3f:	50                   	push   eax
c0015c40:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015c44:	50                   	push   eax
c0015c45:	6a 6e                	push   0x6e
c0015c47:	6a 6e                	push   0x6e
c0015c49:	e9 8c 00 00 00       	jmp    c0015cda <Vm::faultHandler(regs*)+0x533>
c0015c4e:	0f b7 c0             	movzx  eax,ax
c0015c51:	52                   	push   edx
c0015c52:	52                   	push   edx
c0015c53:	50                   	push   eax
c0015c54:	57                   	push   edi
c0015c55:	e8 d9 fa ff ff       	call   c0015733 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0015c5a:	59                   	pop    ecx
c0015c5b:	0f b6 c0             	movzx  eax,al
c0015c5e:	5e                   	pop    esi
c0015c5f:	50                   	push   eax
c0015c60:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015c64:	50                   	push   eax
c0015c65:	e8 92 f6 ff ff       	call   c00152fc <Vm::outbv(unsigned short, unsigned char)>
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015c70:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0015c74:	74 03                	je     c0015c79 <Vm::faultHandler(regs*)+0x4d2>
c0015c76:	48                   	dec    eax
c0015c77:	eb 01                	jmp    c0015c7a <Vm::faultHandler(regs*)+0x4d3>
c0015c79:	40                   	inc    eax
c0015c7a:	0f b7 c0             	movzx  eax,ax
c0015c7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0015c80:	e9 92 01 00 00       	jmp    c0015e17 <Vm::faultHandler(regs*)+0x670>
c0015c85:	8d 46 ff             	lea    eax,[esi-0x1]
c0015c88:	3c 05                	cmp    al,0x5
c0015c8a:	77 1f                	ja     c0015cab <Vm::faultHandler(regs*)+0x504>
c0015c8c:	0f b6 c0             	movzx  eax,al
c0015c8f:	ff 24 85 7c 07 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf884]
c0015c96:	89 ef                	mov    edi,ebp
c0015c98:	eb 11                	jmp    c0015cab <Vm::faultHandler(regs*)+0x504>
c0015c9a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0015c9d:	eb 0c                	jmp    c0015cab <Vm::faultHandler(regs*)+0x504>
c0015c9f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0015ca2:	eb 07                	jmp    c0015cab <Vm::faultHandler(regs*)+0x504>
c0015ca4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0015ca7:	eb 02                	jmp    c0015cab <Vm::faultHandler(regs*)+0x504>
c0015ca9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0015cab:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0015cae:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015cb3:	74 37                	je     c0015cec <Vm::faultHandler(regs*)+0x545>
c0015cb5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0015cbb:	76 2f                	jbe    c0015cec <Vm::faultHandler(regs*)+0x545>
c0015cbd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015cc1:	50                   	push   eax
c0015cc2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015cc6:	50                   	push   eax
c0015cc7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015ccb:	50                   	push   eax
c0015ccc:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015cd0:	50                   	push   eax
c0015cd1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015cd5:	50                   	push   eax
c0015cd6:	6a 6f                	push   0x6f
c0015cd8:	6a 6f                	push   0x6f
c0015cda:	68 0a 07 02 c0       	push   0xc002070a
c0015cdf:	e8 16 49 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015ce4:	83 c4 20             	add    esp,0x20
c0015ce7:	e9 86 01 00 00       	jmp    c0015e72 <Vm::faultHandler(regs*)+0x6cb>
c0015cec:	0f b7 d7             	movzx  edx,di
c0015cef:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0015cf2:	0f b7 c6             	movzx  eax,si
c0015cf5:	81 e1 00 04 00 00    	and    ecx,0x400
c0015cfb:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0015cfe:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015d03:	74 1d                	je     c0015d22 <Vm::faultHandler(regs*)+0x57b>
c0015d05:	55                   	push   ebp
c0015d06:	55                   	push   ebp
c0015d07:	50                   	push   eax
c0015d08:	52                   	push   edx
c0015d09:	e8 48 fa ff ff       	call   c0015756 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0015d0e:	83 c4 10             	add    esp,0x10
c0015d11:	89 fa                	mov    edx,edi
c0015d13:	ef                   	out    dx,eax
c0015d14:	85 c9                	test   ecx,ecx
c0015d16:	74 05                	je     c0015d1d <Vm::faultHandler(regs*)+0x576>
c0015d18:	83 ee 04             	sub    esi,0x4
c0015d1b:	eb 21                	jmp    c0015d3e <Vm::faultHandler(regs*)+0x597>
c0015d1d:	83 c6 04             	add    esi,0x4
c0015d20:	eb 1c                	jmp    c0015d3e <Vm::faultHandler(regs*)+0x597>
c0015d22:	55                   	push   ebp
c0015d23:	55                   	push   ebp
c0015d24:	50                   	push   eax
c0015d25:	52                   	push   edx
c0015d26:	e8 19 fa ff ff       	call   c0015744 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0015d2b:	83 c4 10             	add    esp,0x10
c0015d2e:	89 fa                	mov    edx,edi
c0015d30:	66 ef                	out    dx,ax
c0015d32:	85 c9                	test   ecx,ecx
c0015d34:	74 05                	je     c0015d3b <Vm::faultHandler(regs*)+0x594>
c0015d36:	83 ee 02             	sub    esi,0x2
c0015d39:	eb 03                	jmp    c0015d3e <Vm::faultHandler(regs*)+0x597>
c0015d3b:	83 c6 02             	add    esi,0x2
c0015d3e:	81 e6 ff ff 00 00    	and    esi,0xffff
c0015d44:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0015d47:	e9 cb 00 00 00       	jmp    c0015e17 <Vm::faultHandler(regs*)+0x670>
c0015d4c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015d53:	83 ec 0c             	sub    esp,0xc
c0015d56:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015d5a:	50                   	push   eax
c0015d5b:	e8 89 f5 ff ff       	call   c00152e9 <Vm::inbv(unsigned short)>
c0015d60:	0f b6 c0             	movzx  eax,al
c0015d63:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0015d66:	eb 3f                	jmp    c0015da7 <Vm::faultHandler(regs*)+0x600>
c0015d68:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015d6d:	74 07                	je     c0015d76 <Vm::faultHandler(regs*)+0x5cf>
c0015d6f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015d73:	ed                   	in     eax,dx
c0015d74:	eb 14                	jmp    c0015d8a <Vm::faultHandler(regs*)+0x5e3>
c0015d76:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0015d79:	66 31 f6             	xor    si,si
c0015d7c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0015d7f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015d83:	66 ed                	in     ax,dx
c0015d85:	0f b7 c0             	movzx  eax,ax
c0015d88:	09 f0                	or     eax,esi
c0015d8a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015d8d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015d91:	e9 84 00 00 00       	jmp    c0015e1a <Vm::faultHandler(regs*)+0x673>
c0015d96:	52                   	push   edx
c0015d97:	52                   	push   edx
c0015d98:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0015d9c:	50                   	push   eax
c0015d9d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015da1:	50                   	push   eax
c0015da2:	e8 55 f5 ff ff       	call   c00152fc <Vm::outbv(unsigned short, unsigned char)>
c0015da7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0015dab:	eb 53                	jmp    c0015e00 <Vm::faultHandler(regs*)+0x659>
c0015dad:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015db0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0015db4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015db9:	74 03                	je     c0015dbe <Vm::faultHandler(regs*)+0x617>
c0015dbb:	ef                   	out    dx,eax
c0015dbc:	eb cf                	jmp    c0015d8d <Vm::faultHandler(regs*)+0x5e6>
c0015dbe:	66 ef                	out    dx,ax
c0015dc0:	eb cb                	jmp    c0015d8d <Vm::faultHandler(regs*)+0x5e6>
c0015dc2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0015dc9:	83 ec 0c             	sub    esp,0xc
c0015dcc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0015dd0:	50                   	push   eax
c0015dd1:	e8 13 f5 ff ff       	call   c00152e9 <Vm::inbv(unsigned short)>
c0015dd6:	0f b6 c0             	movzx  eax,al
c0015dd9:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0015ddc:	eb 1f                	jmp    c0015dfd <Vm::faultHandler(regs*)+0x656>
c0015dde:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015de1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015de6:	74 03                	je     c0015deb <Vm::faultHandler(regs*)+0x644>
c0015de8:	ed                   	in     eax,dx
c0015de9:	eb 0d                	jmp    c0015df8 <Vm::faultHandler(regs*)+0x651>
c0015deb:	66 ed                	in     ax,dx
c0015ded:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0015df0:	0f b7 c0             	movzx  eax,ax
c0015df3:	66 31 d2             	xor    dx,dx
c0015df6:	09 d0                	or     eax,edx
c0015df8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0015dfb:	eb 1a                	jmp    c0015e17 <Vm::faultHandler(regs*)+0x670>
c0015dfd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015e00:	83 c4 10             	add    esp,0x10
c0015e03:	eb 15                	jmp    c0015e1a <Vm::faultHandler(regs*)+0x673>
c0015e05:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0015e08:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0015e0b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0015e10:	74 03                	je     c0015e15 <Vm::faultHandler(regs*)+0x66e>
c0015e12:	ef                   	out    dx,eax
c0015e13:	eb 02                	jmp    c0015e17 <Vm::faultHandler(regs*)+0x670>
c0015e15:	66 ef                	out    dx,ax
c0015e17:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0015e1a:	b0 01                	mov    al,0x1
c0015e1c:	eb 56                	jmp    c0015e74 <Vm::faultHandler(regs*)+0x6cd>
c0015e1e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0015e22:	50                   	push   eax
c0015e23:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0015e27:	50                   	push   eax
c0015e28:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0015e2c:	50                   	push   eax
c0015e2d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0015e31:	50                   	push   eax
c0015e32:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0015e36:	50                   	push   eax
c0015e37:	52                   	push   edx
c0015e38:	52                   	push   edx
c0015e39:	68 37 07 02 c0       	push   0xc0020737
c0015e3e:	e8 b7 47 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015e43:	83 c4 20             	add    esp,0x20
c0015e46:	83 ec 0c             	sub    esp,0xc
c0015e49:	6a 60                	push   0x60
c0015e4b:	e8 99 f4 ff ff       	call   c00152e9 <Vm::inbv(unsigned short)>
c0015e50:	83 c4 10             	add    esp,0x10
c0015e53:	3c 1c                	cmp    al,0x1c
c0015e55:	74 04                	je     c0015e5b <Vm::faultHandler(regs*)+0x6b4>
c0015e57:	3c 5a                	cmp    al,0x5a
c0015e59:	75 eb                	jne    c0015e46 <Vm::faultHandler(regs*)+0x69f>
c0015e5b:	3c 1c                	cmp    al,0x1c
c0015e5d:	74 04                	je     c0015e63 <Vm::faultHandler(regs*)+0x6bc>
c0015e5f:	3c 5a                	cmp    al,0x5a
c0015e61:	75 0f                	jne    c0015e72 <Vm::faultHandler(regs*)+0x6cb>
c0015e63:	83 ec 0c             	sub    esp,0xc
c0015e66:	6a 60                	push   0x60
c0015e68:	e8 7c f4 ff ff       	call   c00152e9 <Vm::inbv(unsigned short)>
c0015e6d:	83 c4 10             	add    esp,0x10
c0015e70:	eb e9                	jmp    c0015e5b <Vm::faultHandler(regs*)+0x6b4>
c0015e72:	31 c0                	xor    eax,eax
c0015e74:	83 c4 1c             	add    esp,0x1c
c0015e77:	5b                   	pop    ebx
c0015e78:	5e                   	pop    esi
c0015e79:	5f                   	pop    edi
c0015e7a:	5d                   	pop    ebp
c0015e7b:	c3                   	ret    

c0015e7c <noCopro(unsigned long)>:
c0015e7c:	c3                   	ret    

c0015e7d <nmiHandler(regs*, void*)>:
c0015e7d:	83 ec 0c             	sub    esp,0xc
c0015e80:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0015e85:	83 ec 0c             	sub    esp,0xc
c0015e88:	50                   	push   eax
c0015e89:	e8 f6 11 ff ff       	call   c0007084 <Computer::handleNMI()>
c0015e8e:	83 c4 10             	add    esp,0x10
c0015e91:	90                   	nop
c0015e92:	83 c4 0c             	add    esp,0xc
c0015e95:	c3                   	ret    

c0015e96 <doubleFault(regs*, void*)>:
c0015e96:	55                   	push   ebp
c0015e97:	89 e5                	mov    ebp,esp
c0015e99:	83 ec 08             	sub    esp,0x8
c0015e9c:	83 ec 0c             	sub    esp,0xc
c0015e9f:	68 94 07 02 c0       	push   0xc0020794
c0015ea4:	e8 06 a5 ff ff       	call   c00103af <KePanic(char const*)>
c0015ea9:	83 c4 10             	add    esp,0x10
c0015eac:	90                   	nop
c0015ead:	c9                   	leave  
c0015eae:	c3                   	ret    

c0015eaf <displayDebugInfo(regs*)>:
c0015eaf:	83 ec 1c             	sub    esp,0x1c
c0015eb2:	0f 20 c0             	mov    eax,cr0
c0015eb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015eb9:	0f 20 d0             	mov    eax,cr2
c0015ebc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015ec0:	0f 20 d8             	mov    eax,cr3
c0015ec3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015ec7:	0f 20 e0             	mov    eax,cr4
c0015eca:	89 04 24             	mov    DWORD PTR [esp],eax
c0015ecd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ed1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0015ed4:	83 ec 08             	sub    esp,0x8
c0015ed7:	50                   	push   eax
c0015ed8:	68 b0 07 02 c0       	push   0xc00207b0
c0015edd:	e8 18 47 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015ee2:	83 c4 10             	add    esp,0x10
c0015ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ee9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015eec:	83 ec 08             	sub    esp,0x8
c0015eef:	50                   	push   eax
c0015ef0:	68 a1 07 02 c0       	push   0xc00207a1
c0015ef5:	e8 00 47 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015efa:	83 c4 10             	add    esp,0x10
c0015efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f01:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015f04:	83 ec 08             	sub    esp,0x8
c0015f07:	50                   	push   eax
c0015f08:	68 ac 07 02 c0       	push   0xc00207ac
c0015f0d:	e8 e8 46 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015f12:	83 c4 10             	add    esp,0x10
c0015f15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f19:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015f1c:	83 ec 08             	sub    esp,0x8
c0015f1f:	50                   	push   eax
c0015f20:	68 bb 07 02 c0       	push   0xc00207bb
c0015f25:	e8 d0 46 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015f2a:	83 c4 10             	add    esp,0x10
c0015f2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015f31:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0015f34:	83 ec 08             	sub    esp,0x8
c0015f37:	50                   	push   eax
c0015f38:	68 c6 07 02 c0       	push   0xc00207c6
c0015f3d:	e8 b8 46 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015f42:	83 c4 10             	add    esp,0x10
c0015f45:	83 ec 08             	sub    esp,0x8
c0015f48:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f4c:	68 d1 07 02 c0       	push   0xc00207d1
c0015f51:	e8 a4 46 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015f56:	83 c4 10             	add    esp,0x10
c0015f59:	83 ec 08             	sub    esp,0x8
c0015f5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015f60:	68 dc 07 02 c0       	push   0xc00207dc
c0015f65:	e8 90 46 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0015f6a:	83 c4 10             	add    esp,0x10
c0015f6d:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015f72:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f78:	83 ec 0c             	sub    esp,0xc
c0015f7b:	50                   	push   eax
c0015f7c:	e8 1c 25 ff ff       	call   c000849d <setActiveTerminal(VgaText*)>
c0015f81:	83 c4 10             	add    esp,0x10
c0015f84:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015f89:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f8f:	83 ec 08             	sub    esp,0x8
c0015f92:	68 e7 07 02 c0       	push   0xc00207e7
c0015f97:	50                   	push   eax
c0015f98:	e8 3f 28 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0015f9d:	83 c4 10             	add    esp,0x10
c0015fa0:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015fa5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015fab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015faf:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0015fb2:	83 ec 08             	sub    esp,0x8
c0015fb5:	52                   	push   edx
c0015fb6:	50                   	push   eax
c0015fb7:	e8 da 27 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0015fbc:	83 c4 10             	add    esp,0x10
c0015fbf:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015fc4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015fca:	83 ec 08             	sub    esp,0x8
c0015fcd:	68 f5 07 02 c0       	push   0xc00207f5
c0015fd2:	50                   	push   eax
c0015fd3:	e8 04 28 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0015fd8:	83 c4 10             	add    esp,0x10
c0015fdb:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0015fe0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015fe6:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015feb:	8b 12                	mov    edx,DWORD PTR [edx]
c0015fed:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015ff0:	83 c2 0c             	add    edx,0xc
c0015ff3:	83 ec 08             	sub    esp,0x8
c0015ff6:	52                   	push   edx
c0015ff7:	50                   	push   eax
c0015ff8:	e8 df 27 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0015ffd:	83 c4 10             	add    esp,0x10
c0016000:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016005:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001600b:	83 ec 08             	sub    esp,0x8
c001600e:	68 fe 07 02 c0       	push   0xc00207fe
c0016013:	50                   	push   eax
c0016014:	e8 c3 27 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016019:	83 c4 10             	add    esp,0x10
c001601c:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016021:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016027:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001602b:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001602e:	83 ec 08             	sub    esp,0x8
c0016031:	52                   	push   edx
c0016032:	50                   	push   eax
c0016033:	e8 5e 27 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0016038:	83 c4 10             	add    esp,0x10
c001603b:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016040:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016046:	83 ec 08             	sub    esp,0x8
c0016049:	68 06 08 02 c0       	push   0xc0020806
c001604e:	50                   	push   eax
c001604f:	e8 88 27 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016054:	83 c4 10             	add    esp,0x10
c0016057:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001605c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016062:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016066:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0016069:	83 ec 08             	sub    esp,0x8
c001606c:	52                   	push   edx
c001606d:	50                   	push   eax
c001606e:	e8 23 27 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0016073:	83 c4 10             	add    esp,0x10
c0016076:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001607b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016081:	83 ec 08             	sub    esp,0x8
c0016084:	68 0e 08 02 c0       	push   0xc002080e
c0016089:	50                   	push   eax
c001608a:	e8 4d 27 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c001608f:	83 c4 10             	add    esp,0x10
c0016092:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016097:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001609d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00160a1:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00160a4:	83 ec 08             	sub    esp,0x8
c00160a7:	52                   	push   edx
c00160a8:	50                   	push   eax
c00160a9:	e8 e8 26 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c00160ae:	83 c4 10             	add    esp,0x10
c00160b1:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00160b6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00160bc:	83 ec 08             	sub    esp,0x8
c00160bf:	68 16 08 02 c0       	push   0xc0020816
c00160c4:	50                   	push   eax
c00160c5:	e8 12 27 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00160ca:	83 c4 10             	add    esp,0x10
c00160cd:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00160d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00160d8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00160dc:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00160df:	83 ec 08             	sub    esp,0x8
c00160e2:	52                   	push   edx
c00160e3:	50                   	push   eax
c00160e4:	e8 ad 26 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c00160e9:	83 c4 10             	add    esp,0x10
c00160ec:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00160f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00160f7:	83 ec 08             	sub    esp,0x8
c00160fa:	68 1e 08 02 c0       	push   0xc002081e
c00160ff:	50                   	push   eax
c0016100:	e8 d7 26 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016105:	83 c4 10             	add    esp,0x10
c0016108:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001610d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016113:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016117:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001611a:	83 ec 08             	sub    esp,0x8
c001611d:	52                   	push   edx
c001611e:	50                   	push   eax
c001611f:	e8 72 26 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0016124:	83 c4 10             	add    esp,0x10
c0016127:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001612c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016132:	83 ec 08             	sub    esp,0x8
c0016135:	68 26 08 02 c0       	push   0xc0020826
c001613a:	50                   	push   eax
c001613b:	e8 9c 26 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016140:	83 c4 10             	add    esp,0x10
c0016143:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016148:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001614e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016152:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016155:	83 ec 08             	sub    esp,0x8
c0016158:	52                   	push   edx
c0016159:	50                   	push   eax
c001615a:	e8 37 26 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c001615f:	83 c4 10             	add    esp,0x10
c0016162:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016167:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001616d:	83 ec 08             	sub    esp,0x8
c0016170:	68 2e 08 02 c0       	push   0xc002082e
c0016175:	50                   	push   eax
c0016176:	e8 61 26 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c001617b:	83 c4 10             	add    esp,0x10
c001617e:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0016183:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016189:	83 ec 08             	sub    esp,0x8
c001618c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016190:	50                   	push   eax
c0016191:	e8 00 26 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0016196:	83 c4 10             	add    esp,0x10
c0016199:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c001619e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00161a4:	83 ec 08             	sub    esp,0x8
c00161a7:	68 37 08 02 c0       	push   0xc0020837
c00161ac:	50                   	push   eax
c00161ad:	e8 2a 26 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00161b2:	83 c4 10             	add    esp,0x10
c00161b5:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00161ba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00161c0:	83 ec 08             	sub    esp,0x8
c00161c3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00161c7:	50                   	push   eax
c00161c8:	e8 c9 25 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c00161cd:	83 c4 10             	add    esp,0x10
c00161d0:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00161d5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00161db:	83 ec 08             	sub    esp,0x8
c00161de:	68 3f 08 02 c0       	push   0xc002083f
c00161e3:	50                   	push   eax
c00161e4:	e8 f3 25 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00161e9:	83 c4 10             	add    esp,0x10
c00161ec:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c00161f1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00161f7:	83 ec 08             	sub    esp,0x8
c00161fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00161fe:	50                   	push   eax
c00161ff:	e8 92 25 ff ff       	call   c0008796 <VgaText::putx(unsigned int)>
c0016204:	83 c4 10             	add    esp,0x10
c0016207:	fa                   	cli    
c0016208:	f4                   	hlt    
c0016209:	eb fe                	jmp    c0016209 <displayDebugInfo(regs*)+0x35a>

c001620b <HalSystemIdle()>:
c001620b:	56                   	push   esi
c001620c:	53                   	push   ebx
c001620d:	83 ec 14             	sub    esp,0x14
c0016210:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001621b:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0016221:	83 e0 04             	and    eax,0x4
c0016224:	84 c0                	test   al,al
c0016226:	0f 95 c0             	setne  al
c0016229:	84 c0                	test   al,al
c001622b:	74 4c                	je     c0016279 <HalSystemIdle()+0x6e>
c001622d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016232:	83 ec 08             	sub    esp,0x8
c0016235:	68 e1 00 00 00       	push   0xe1
c001623a:	50                   	push   eax
c001623b:	e8 5c 0c ff ff       	call   c0006e9c <Computer::rdmsr(unsigned int)>
c0016240:	83 c4 10             	add    esp,0x10
c0016243:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016247:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001624b:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016250:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016254:	83 e2 02             	and    edx,0x2
c0016257:	89 d3                	mov    ebx,edx
c0016259:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001625d:	83 e2 00             	and    edx,0x0
c0016260:	89 d6                	mov    esi,edx
c0016262:	56                   	push   esi
c0016263:	53                   	push   ebx
c0016264:	68 e1 00 00 00       	push   0xe1
c0016269:	50                   	push   eax
c001626a:	e8 59 0c ff ff       	call   c0006ec8 <Computer::wrmsr(unsigned int, unsigned long long)>
c001626f:	83 c4 10             	add    esp,0x10
c0016272:	e8 1d 9f fe ff       	call   c0000194 <doTPAUSE>
c0016277:	eb 01                	jmp    c001627a <HalSystemIdle()+0x6f>
c0016279:	f4                   	hlt    
c001627a:	90                   	nop
c001627b:	83 c4 14             	add    esp,0x14
c001627e:	5b                   	pop    ebx
c001627f:	5e                   	pop    esi
c0016280:	c3                   	ret    

c0016281 <displayProgramFault(char const*)>:
c0016281:	83 ec 0c             	sub    esp,0xc
c0016284:	83 ec 0c             	sub    esp,0xc
c0016287:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001628b:	e8 6a 43 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0016290:	83 c4 10             	add    esp,0x10
c0016293:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0016298:	8b 00                	mov    eax,DWORD PTR [eax]
c001629a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001629d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00162a3:	85 c0                	test   eax,eax
c00162a5:	74 21                	je     c00162c8 <displayProgramFault(char const*)+0x47>
c00162a7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00162ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00162ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00162b1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00162b7:	6a 04                	push   0x4
c00162b9:	6a 0f                	push   0xf
c00162bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162bf:	50                   	push   eax
c00162c0:	e8 89 25 ff ff       	call   c000884e <VgaText::puts(char const*, VgaColour, VgaColour)>
c00162c5:	83 c4 10             	add    esp,0x10
c00162c8:	90                   	nop
c00162c9:	83 c4 0c             	add    esp,0xc
c00162cc:	c3                   	ret    

c00162cd <gpFault(regs*, void*)>:
c00162cd:	83 ec 1c             	sub    esp,0x1c
c00162d0:	c7 05 10 72 02 c0 a7 57 01 c0 	mov    DWORD PTR ds:0xc0027210,0xc00157a7
c00162da:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c00162df:	85 c0                	test   eax,eax
c00162e1:	74 1c                	je     c00162ff <gpFault(regs*, void*)+0x32>
c00162e3:	a1 10 72 02 c0       	mov    eax,ds:0xc0027210
c00162e8:	83 ec 0c             	sub    esp,0xc
c00162eb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162ef:	ff d0                	call   eax
c00162f1:	83 c4 10             	add    esp,0x10
c00162f4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00162f8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00162fd:	75 2e                	jne    c001632d <gpFault(regs*, void*)+0x60>
c00162ff:	83 ec 0c             	sub    esp,0xc
c0016302:	68 47 08 02 c0       	push   0xc0020847
c0016307:	e8 75 ff ff ff       	call   c0016281 <displayProgramFault(char const*)>
c001630c:	83 c4 10             	add    esp,0x10
c001630f:	83 ec 0c             	sub    esp,0xc
c0016312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016316:	e8 94 fb ff ff       	call   c0015eaf <displayDebugInfo(regs*)>
c001631b:	83 c4 10             	add    esp,0x10
c001631e:	83 ec 0c             	sub    esp,0xc
c0016321:	6a 00                	push   0x0
c0016323:	e8 74 ee ff ff       	call   c001519c <Thr::terminateFromIRQ(int)>
c0016328:	83 c4 10             	add    esp,0x10
c001632b:	eb 01                	jmp    c001632e <gpFault(regs*, void*)+0x61>
c001632d:	90                   	nop
c001632e:	83 c4 1c             	add    esp,0x1c
c0016331:	c3                   	ret    

c0016332 <pgFault(regs*, void*)>:
c0016332:	83 ec 1c             	sub    esp,0x1c
c0016335:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016339:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001633c:	0f 20 d0             	mov    eax,cr2
c001633f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016343:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016347:	83 ec 04             	sub    esp,0x4
c001634a:	52                   	push   edx
c001634b:	50                   	push   eax
c001634c:	68 24 09 02 c0       	push   0xc0020924
c0016351:	e8 a4 42 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0016356:	83 c4 10             	add    esp,0x10
c0016359:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001635e:	8b 00                	mov    eax,DWORD PTR [eax]
c0016360:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016363:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016369:	0f 20 d2             	mov    edx,cr2
c001636c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016370:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016374:	83 ec 08             	sub    esp,0x8
c0016377:	52                   	push   edx
c0016378:	50                   	push   eax
c0016379:	e8 72 3e ff ff       	call   c000a1f0 <VAS::tryLoadBackOffDisk(unsigned long)>
c001637e:	83 c4 10             	add    esp,0x10
c0016381:	84 c0                	test   al,al
c0016383:	75 2e                	jne    c00163b3 <pgFault(regs*, void*)+0x81>
c0016385:	83 ec 0c             	sub    esp,0xc
c0016388:	68 60 08 02 c0       	push   0xc0020860
c001638d:	e8 ef fe ff ff       	call   c0016281 <displayProgramFault(char const*)>
c0016392:	83 c4 10             	add    esp,0x10
c0016395:	83 ec 0c             	sub    esp,0xc
c0016398:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001639c:	e8 0e fb ff ff       	call   c0015eaf <displayDebugInfo(regs*)>
c00163a1:	83 c4 10             	add    esp,0x10
c00163a4:	83 ec 0c             	sub    esp,0xc
c00163a7:	6a 00                	push   0x0
c00163a9:	e8 ee ed ff ff       	call   c001519c <Thr::terminateFromIRQ(int)>
c00163ae:	83 c4 10             	add    esp,0x10
c00163b1:	eb 01                	jmp    c00163b4 <pgFault(regs*, void*)+0x82>
c00163b3:	90                   	nop
c00163b4:	83 c4 1c             	add    esp,0x1c
c00163b7:	c3                   	ret    

c00163b8 <otherISRHandler(regs*, void*)>:
c00163b8:	83 ec 0c             	sub    esp,0xc
c00163bb:	83 ec 0c             	sub    esp,0xc
c00163be:	68 4c 09 02 c0       	push   0xc002094c
c00163c3:	e8 b9 fe ff ff       	call   c0016281 <displayProgramFault(char const*)>
c00163c8:	83 c4 10             	add    esp,0x10
c00163cb:	83 ec 0c             	sub    esp,0xc
c00163ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163d2:	e8 d8 fa ff ff       	call   c0015eaf <displayDebugInfo(regs*)>
c00163d7:	83 c4 10             	add    esp,0x10
c00163da:	83 ec 0c             	sub    esp,0xc
c00163dd:	6a 00                	push   0x0
c00163df:	e8 b8 ed ff ff       	call   c001519c <Thr::terminateFromIRQ(int)>
c00163e4:	83 c4 10             	add    esp,0x10
c00163e7:	90                   	nop
c00163e8:	83 c4 0c             	add    esp,0xc
c00163eb:	c3                   	ret    

c00163ec <opcodeFault(regs*, void*)>:
c00163ec:	55                   	push   ebp
c00163ed:	89 e5                	mov    ebp,esp
c00163ef:	83 ec 08             	sub    esp,0x8
c00163f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00163f8:	83 ec 08             	sub    esp,0x8
c00163fb:	50                   	push   eax
c00163fc:	68 6b 08 02 c0       	push   0xc002086b
c0016401:	e8 f4 41 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0016406:	83 c4 10             	add    esp,0x10
c0016409:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001640e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016414:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001641a:	84 c0                	test   al,al
c001641c:	74 21                	je     c001643f <opcodeFault(regs*, void*)+0x53>
c001641e:	83 ec 0c             	sub    esp,0xc
c0016421:	68 74 09 02 c0       	push   0xc0020974
c0016426:	e8 cf 41 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001642b:	83 c4 10             	add    esp,0x10
c001642e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016431:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016434:	8d 50 19             	lea    edx,[eax+0x19]
c0016437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001643a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001643d:	eb 2b                	jmp    c001646a <opcodeFault(regs*, void*)+0x7e>
c001643f:	83 ec 0c             	sub    esp,0xc
c0016442:	68 79 08 02 c0       	push   0xc0020879
c0016447:	e8 35 fe ff ff       	call   c0016281 <displayProgramFault(char const*)>
c001644c:	83 c4 10             	add    esp,0x10
c001644f:	83 ec 0c             	sub    esp,0xc
c0016452:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0016455:	e8 55 fa ff ff       	call   c0015eaf <displayDebugInfo(regs*)>
c001645a:	83 c4 10             	add    esp,0x10
c001645d:	83 ec 0c             	sub    esp,0xc
c0016460:	6a 00                	push   0x0
c0016462:	e8 35 ed ff ff       	call   c001519c <Thr::terminateFromIRQ(int)>
c0016467:	83 c4 10             	add    esp,0x10
c001646a:	c9                   	leave  
c001646b:	c3                   	ret    

c001646c <i386SaveCoprocessor(void*)>:
c001646c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016470:	83 c0 3f             	add    eax,0x3f
c0016473:	83 e0 c0             	and    eax,0xffffffc0
c0016476:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001647a:	ff 25 0c 72 02 c0    	jmp    DWORD PTR ds:0xc002720c

c0016480 <i386LoadCoprocessor(void*)>:
c0016480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016484:	83 c0 3f             	add    eax,0x3f
c0016487:	83 e0 c0             	and    eax,0xffffffc0
c001648a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001648e:	ff 25 08 72 02 c0    	jmp    DWORD PTR ds:0xc0027208

c0016494 <x87EmulHandler(regs*, void*)>:
c0016494:	53                   	push   ebx
c0016495:	83 ec 08             	sub    esp,0x8
c0016498:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001649d:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00164a1:	74 10                	je     c00164b3 <x87EmulHandler(regs*, void*)+0x1f>
c00164a3:	83 ec 0c             	sub    esp,0xc
c00164a6:	68 86 08 02 c0       	push   0xc0020886
c00164ab:	e8 ff 9e ff ff       	call   c00103af <KePanic(char const*)>
c00164b0:	83 c4 10             	add    esp,0x10
c00164b3:	0f 20 c0             	mov    eax,cr0
c00164b6:	a8 08                	test   al,0x8
c00164b8:	74 59                	je     c0016513 <x87EmulHandler(regs*, void*)+0x7f>
c00164ba:	0f 06                	clts   
c00164bc:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c00164c1:	85 c0                	test   eax,eax
c00164c3:	74 0e                	je     c00164d3 <x87EmulHandler(regs*, void*)+0x3f>
c00164c5:	83 ec 0c             	sub    esp,0xc
c00164c8:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00164cb:	e8 9c ff ff ff       	call   c001646c <i386SaveCoprocessor(void*)>
c00164d0:	83 c4 10             	add    esp,0x10
c00164d3:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00164d9:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00164dd:	75 12                	jne    c00164f1 <x87EmulHandler(regs*, void*)+0x5d>
c00164df:	83 ec 0c             	sub    esp,0xc
c00164e2:	68 40 02 00 00       	push   0x240
c00164e7:	e8 79 13 ff ff       	call   c0007865 <malloc>
c00164ec:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00164ef:	eb 10                	jmp    c0016501 <x87EmulHandler(regs*, void*)+0x6d>
c00164f1:	83 ec 0c             	sub    esp,0xc
c00164f4:	a1 04 72 02 c0       	mov    eax,ds:0xc0027204
c00164f9:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00164fc:	e8 7f ff ff ff       	call   c0016480 <i386LoadCoprocessor(void*)>
c0016501:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016506:	83 c4 10             	add    esp,0x10
c0016509:	a3 04 72 02 c0       	mov    ds:0xc0027204,eax
c001650e:	83 c4 08             	add    esp,0x8
c0016511:	5b                   	pop    ebx
c0016512:	c3                   	ret    
c0016513:	83 ec 0c             	sub    esp,0xc
c0016516:	68 9a 08 02 c0       	push   0xc002089a
c001651b:	e8 da 40 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0016520:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016528:	83 c4 18             	add    esp,0x18
c001652b:	5b                   	pop    ebx
c001652c:	e9 6b ec ff ff       	jmp    c001519c <Thr::terminateFromIRQ(int)>

c0016531 <HalInitialiseCoprocessor()>:
c0016531:	83 ec 10             	sub    esp,0x10
c0016534:	c7 05 04 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027204,0x0
c001653e:	6a 00                	push   0x0
c0016540:	68 94 64 01 c0       	push   0xc0016494
c0016545:	6a 07                	push   0x7
c0016547:	e8 20 5a ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001654c:	e8 4f 6e 00 00       	call   c001d3a0 <avxDetect>
c0016551:	83 c4 10             	add    esp,0x10
c0016554:	85 c0                	test   eax,eax
c0016556:	74 1c                	je     c0016574 <HalInitialiseCoprocessor()+0x43>
c0016558:	c7 05 0c 72 02 c0 ca d3 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d3ca
c0016562:	c7 05 08 72 02 c0 db d3 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d3db
c001656c:	83 c4 0c             	add    esp,0xc
c001656f:	e9 78 6e 00 00       	jmp    c001d3ec <avxInit>
c0016574:	e8 b7 71 00 00       	call   c001d730 <absolutelyNoChanceInHell>
c0016579:	85 c0                	test   eax,eax
c001657b:	74 1c                	je     c0016599 <HalInitialiseCoprocessor()+0x68>
c001657d:	c7 05 0c 72 02 c0 48 d7 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d748
c0016587:	c7 05 08 72 02 c0 50 d7 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d750
c0016591:	83 c4 0c             	add    esp,0xc
c0016594:	e9 bf 71 00 00       	jmp    c001d758 <sseInit>
c0016599:	e8 d8 71 00 00       	call   c001d776 <x87Detect>
c001659e:	85 c0                	test   eax,eax
c00165a0:	74 1c                	je     c00165be <HalInitialiseCoprocessor()+0x8d>
c00165a2:	c7 05 0c 72 02 c0 91 d7 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc001d791
c00165ac:	c7 05 08 72 02 c0 98 d7 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc001d798
c00165b6:	83 c4 0c             	add    esp,0xc
c00165b9:	e9 e1 71 00 00       	jmp    c001d79f <x87Init>
c00165be:	c7 05 0c 72 02 c0 7c 5e 01 c0 	mov    DWORD PTR ds:0xc002720c,0xc0015e7c
c00165c8:	c7 05 08 72 02 c0 7c 5e 01 c0 	mov    DWORD PTR ds:0xc0027208,0xc0015e7c
c00165d2:	0f 20 c0             	mov    eax,cr0
c00165d5:	83 c8 04             	or     eax,0x4
c00165d8:	0f 22 c0             	mov    cr0,eax
c00165db:	83 c4 0c             	add    esp,0xc
c00165de:	c3                   	ret    

c00165df <HalPanic(char const*)>:
c00165df:	53                   	push   ebx
c00165e0:	83 ec 10             	sub    esp,0x10
c00165e3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00165e7:	fa                   	cli    
c00165e8:	53                   	push   ebx
c00165e9:	68 b0 08 02 c0       	push   0xc00208b0
c00165ee:	e8 07 40 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00165f3:	83 c4 0c             	add    esp,0xc
c00165f6:	6a 01                	push   0x1
c00165f8:	6a 0f                	push   0xf
c00165fa:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016600:	e8 f1 1c ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016605:	58                   	pop    eax
c0016606:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001660c:	e8 d7 1e ff ff       	call   c00084e8 <VgaText::clearScreen()>
c0016611:	5a                   	pop    edx
c0016612:	59                   	pop    ecx
c0016613:	68 e4 f1 01 c0       	push   0xc001f1e4
c0016618:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001661e:	e8 0b 1d ff ff       	call   c000832e <VgaText::setTitle(char*)>
c0016623:	83 c4 0c             	add    esp,0xc
c0016626:	6a 01                	push   0x1
c0016628:	6a 0f                	push   0xf
c001662a:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016630:	e8 c1 1c ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016635:	58                   	pop    eax
c0016636:	5a                   	pop    edx
c0016637:	68 c9 08 02 c0       	push   0xc00208c9
c001663c:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016642:	e8 95 21 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c0016647:	83 c4 0c             	add    esp,0xc
c001664a:	6a 0f                	push   0xf
c001664c:	6a 01                	push   0x1
c001664e:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016654:	e8 9d 1c ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0016659:	59                   	pop    ecx
c001665a:	58                   	pop    eax
c001665b:	68 d2 08 02 c0       	push   0xc00208d2
c0016660:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016666:	e8 71 21 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c001666b:	83 c4 0c             	add    esp,0xc
c001666e:	6a 01                	push   0x1
c0016670:	6a 0f                	push   0xf
c0016672:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c0016678:	e8 79 1c ff ff       	call   c00082f6 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001667d:	58                   	pop    eax
c001667e:	5a                   	pop    edx
c001667f:	68 16 09 02 c0       	push   0xc0020916
c0016684:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001668a:	e8 4d 21 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c001668f:	59                   	pop    ecx
c0016690:	58                   	pop    eax
c0016691:	68 df 08 02 c0       	push   0xc00208df
c0016696:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001669c:	e8 3b 21 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00166a1:	58                   	pop    eax
c00166a2:	5a                   	pop    edx
c00166a3:	68 19 09 02 c0       	push   0xc0020919
c00166a8:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00166ae:	e8 29 21 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00166b3:	59                   	pop    ecx
c00166b4:	58                   	pop    eax
c00166b5:	53                   	push   ebx
c00166b6:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00166bc:	e8 1b 21 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00166c1:	58                   	pop    eax
c00166c2:	5a                   	pop    edx
c00166c3:	68 16 09 02 c0       	push   0xc0020916
c00166c8:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c00166ce:	e8 09 21 ff ff       	call   c00087dc <VgaText::puts(char const*)>
c00166d3:	83 c4 10             	add    esp,0x10
c00166d6:	eb fe                	jmp    c00166d6 <HalPanic(char const*)+0xf7>

c00166d8 <HalQueryPerformanceCounter()>:
c00166d8:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00166dd:	31 d2                	xor    edx,edx
c00166df:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00166e5:	31 c0                	xor    eax,eax
c00166e7:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c00166ee:	74 02                	je     c00166f2 <HalQueryPerformanceCounter()+0x1a>
c00166f0:	0f 31                	rdtsc  
c00166f2:	c3                   	ret    

c00166f3 <HalInitialise()>:
c00166f3:	53                   	push   ebx
c00166f4:	83 ec 08             	sub    esp,0x8
c00166f7:	e8 a3 5a ff ff       	call   c000c19f <setupINTS()>
c00166fc:	80 3d 80 67 02 c0 00 	cmp    BYTE PTR ds:0xc0026780,0x0
c0016703:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016708:	75 07                	jne    c0016711 <HalInitialise()+0x1e>
c001670a:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016711:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0016718:	c6 05 00 72 02 c0 00 	mov    BYTE PTR ds:0xc0027200,0x0
c001671f:	e8 a8 02 00 00       	call   c00169cc <picOpen()>
c0016724:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c001672b:	74 0a                	je     c0016737 <HalInitialise()+0x44>
c001672d:	e8 e2 01 00 00       	call   c0016914 <picDisable()>
c0016732:	e8 e3 65 00 00       	call   c001cd1a <apicOpen()>
c0016737:	bb 0f 00 00 00       	mov    ebx,0xf
c001673c:	50                   	push   eax
c001673d:	6a 00                	push   0x0
c001673f:	68 b8 63 01 c0       	push   0xc00163b8
c0016744:	6a 00                	push   0x0
c0016746:	e8 21 58 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001674b:	83 c4 0c             	add    esp,0xc
c001674e:	6a 00                	push   0x0
c0016750:	68 b8 63 01 c0       	push   0xc00163b8
c0016755:	6a 01                	push   0x1
c0016757:	e8 10 58 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001675c:	83 c4 0c             	add    esp,0xc
c001675f:	6a 00                	push   0x0
c0016761:	68 7d 5e 01 c0       	push   0xc0015e7d
c0016766:	6a 02                	push   0x2
c0016768:	e8 ff 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001676d:	83 c4 0c             	add    esp,0xc
c0016770:	6a 00                	push   0x0
c0016772:	68 b8 63 01 c0       	push   0xc00163b8
c0016777:	6a 03                	push   0x3
c0016779:	e8 ee 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001677e:	83 c4 0c             	add    esp,0xc
c0016781:	6a 00                	push   0x0
c0016783:	68 b8 63 01 c0       	push   0xc00163b8
c0016788:	6a 04                	push   0x4
c001678a:	e8 dd 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001678f:	83 c4 0c             	add    esp,0xc
c0016792:	6a 00                	push   0x0
c0016794:	68 b8 63 01 c0       	push   0xc00163b8
c0016799:	6a 05                	push   0x5
c001679b:	e8 cc 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00167a0:	83 c4 0c             	add    esp,0xc
c00167a3:	6a 00                	push   0x0
c00167a5:	68 ec 63 01 c0       	push   0xc00163ec
c00167aa:	6a 06                	push   0x6
c00167ac:	e8 bb 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00167b1:	83 c4 0c             	add    esp,0xc
c00167b4:	6a 00                	push   0x0
c00167b6:	68 96 5e 01 c0       	push   0xc0015e96
c00167bb:	6a 08                	push   0x8
c00167bd:	e8 aa 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00167c2:	83 c4 0c             	add    esp,0xc
c00167c5:	6a 00                	push   0x0
c00167c7:	68 b8 63 01 c0       	push   0xc00163b8
c00167cc:	6a 09                	push   0x9
c00167ce:	e8 99 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00167d3:	83 c4 0c             	add    esp,0xc
c00167d6:	6a 00                	push   0x0
c00167d8:	68 b8 63 01 c0       	push   0xc00163b8
c00167dd:	6a 0a                	push   0xa
c00167df:	e8 88 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00167e4:	83 c4 0c             	add    esp,0xc
c00167e7:	6a 00                	push   0x0
c00167e9:	68 b8 63 01 c0       	push   0xc00163b8
c00167ee:	6a 0b                	push   0xb
c00167f0:	e8 77 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00167f5:	83 c4 0c             	add    esp,0xc
c00167f8:	6a 00                	push   0x0
c00167fa:	68 cd 62 01 c0       	push   0xc00162cd
c00167ff:	6a 0d                	push   0xd
c0016801:	e8 66 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016806:	83 c4 0c             	add    esp,0xc
c0016809:	6a 00                	push   0x0
c001680b:	68 32 63 01 c0       	push   0xc0016332
c0016810:	6a 0e                	push   0xe
c0016812:	e8 55 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016817:	83 c4 10             	add    esp,0x10
c001681a:	50                   	push   eax
c001681b:	6a 00                	push   0x0
c001681d:	68 b8 63 01 c0       	push   0xc00163b8
c0016822:	53                   	push   ebx
c0016823:	43                   	inc    ebx
c0016824:	e8 43 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016829:	83 c4 10             	add    esp,0x10
c001682c:	83 fb 1e             	cmp    ebx,0x1e
c001682f:	75 e9                	jne    c001681a <HalInitialise()+0x127>
c0016831:	50                   	push   eax
c0016832:	6a 00                	push   0x0
c0016834:	68 b2 15 01 c0       	push   0xc00115b2
c0016839:	6a 60                	push   0x60
c001683b:	e8 2c 57 ff ff       	call   c000bf6c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0016840:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0016845:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001684f:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0016856:	e8 0a 10 ff ff       	call   c0007865 <malloc>
c001685b:	89 04 24             	mov    DWORD PTR [esp],eax
c001685e:	89 c3                	mov    ebx,eax
c0016860:	e8 2f 09 00 00       	call   c0017194 <RTC::RTC()>
c0016865:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001686f:	5a                   	pop    edx
c0016870:	59                   	pop    ecx
c0016871:	53                   	push   ebx
c0016872:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016878:	e8 bb 51 ff ff       	call   c000ba38 <Device::addChild(Device*)>
c001687d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001687f:	6a 00                	push   0x0
c0016881:	6a 00                	push   0x0
c0016883:	6a 00                	push   0x0
c0016885:	53                   	push   ebx
c0016886:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016889:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001688e:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0016894:	83 c4 28             	add    esp,0x28
c0016897:	5b                   	pop    ebx
c0016898:	c3                   	ret    

c0016899 <HalMakeBeep(int)>:
c0016899:	53                   	push   ebx
c001689a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001689e:	85 db                	test   ebx,ebx
c00168a0:	75 07                	jne    c00168a9 <HalMakeBeep(int)+0x10>
c00168a2:	e4 61                	in     al,0x61
c00168a4:	83 e0 fc             	and    eax,0xfffffffc
c00168a7:	eb 26                	jmp    c00168cf <HalMakeBeep(int)+0x36>
c00168a9:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00168ae:	99                   	cdq    
c00168af:	f7 fb                	idiv   ebx
c00168b1:	89 c1                	mov    ecx,eax
c00168b3:	b0 b6                	mov    al,0xb6
c00168b5:	e6 43                	out    0x43,al
c00168b7:	88 c8                	mov    al,cl
c00168b9:	e6 42                	out    0x42,al
c00168bb:	89 c8                	mov    eax,ecx
c00168bd:	c1 e8 08             	shr    eax,0x8
c00168c0:	e6 42                	out    0x42,al
c00168c2:	e4 61                	in     al,0x61
c00168c4:	88 c2                	mov    dl,al
c00168c6:	83 ca 03             	or     edx,0x3
c00168c9:	38 c2                	cmp    dl,al
c00168cb:	74 04                	je     c00168d1 <HalMakeBeep(int)+0x38>
c00168cd:	88 d0                	mov    al,dl
c00168cf:	e6 61                	out    0x61,al
c00168d1:	5b                   	pop    ebx
c00168d2:	c3                   	ret    

c00168d3 <HalGetRand()>:
c00168d3:	31 c0                	xor    eax,eax
c00168d5:	c3                   	ret    

c00168d6 <HalEndOfInterrupt(int)>:
c00168d6:	80 3d 00 72 02 c0 00 	cmp    BYTE PTR ds:0xc0027200,0x0
c00168dd:	74 23                	je     c0016902 <HalEndOfInterrupt(int)+0x2c>
c00168df:	83 ec 14             	sub    esp,0x14
c00168e2:	6a 1b                	push   0x1b
c00168e4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00168ea:	e8 ad 05 ff ff       	call   c0006e9c <Computer::rdmsr(unsigned int)>
c00168ef:	25 00 f0 ff ff       	and    eax,0xfffff000
c00168f4:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00168fe:	83 c4 1c             	add    esp,0x1c
c0016901:	c3                   	ret    
c0016902:	e9 55 02 00 00       	jmp    c0016b5c <picEOI(int)>

c0016907 <HalRestart()>:
c0016907:	c3                   	ret    

c0016908 <HalShutdown()>:
c0016908:	c3                   	ret    

c0016909 <HalSleep()>:
c0016909:	c3                   	ret    
c001690a:	66 90                	xchg   ax,ax

c001690c <picIoWait()>:
c001690c:	eb 00                	jmp    c001690e <picIoWait()+0x2>
c001690e:	eb 00                	jmp    c0016910 <picIoWait()+0x4>
c0016910:	90                   	nop
c0016911:	c3                   	ret    
c0016912:	66 90                	xchg   ax,ax

c0016914 <picDisable()>:
c0016914:	83 ec 10             	sub    esp,0x10
c0016917:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001691e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0016923:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016927:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001692c:	ee                   	out    dx,al
c001692d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0016934:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0016939:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001693d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016942:	ee                   	out    dx,al
c0016943:	90                   	nop
c0016944:	83 c4 10             	add    esp,0x10
c0016947:	c3                   	ret    

c0016948 <picGetIRQReg(int)>:
c0016948:	83 ec 10             	sub    esp,0x10
c001694b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001694f:	25 ff 00 00 00       	and    eax,0xff
c0016954:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001695b:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001695f:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016963:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016968:	ee                   	out    dx,al
c0016969:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001696d:	25 ff 00 00 00       	and    eax,0xff
c0016972:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016979:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001697d:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016981:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016986:	ee                   	out    dx,al
c0016987:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001698e:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0016993:	89 c2                	mov    edx,eax
c0016995:	ec                   	in     al,dx
c0016996:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001699a:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001699e:	25 ff 00 00 00       	and    eax,0xff
c00169a3:	c1 e0 08             	shl    eax,0x8
c00169a6:	89 c1                	mov    ecx,eax
c00169a8:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c00169af:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00169b4:	89 c2                	mov    edx,eax
c00169b6:	ec                   	in     al,dx
c00169b7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00169bb:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00169bf:	25 ff 00 00 00       	and    eax,0xff
c00169c4:	09 c8                	or     eax,ecx
c00169c6:	83 c4 10             	add    esp,0x10
c00169c9:	c3                   	ret    
c00169ca:	66 90                	xchg   ax,ax

c00169cc <picOpen()>:
c00169cc:	83 ec 50             	sub    esp,0x50
c00169cf:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c00169d6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00169db:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00169df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00169e3:	ee                   	out    dx,al
c00169e4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00169eb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00169f0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00169f4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00169f8:	ee                   	out    dx,al
c00169f9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0016a01:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0016a09:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0016a10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016a14:	89 c2                	mov    edx,eax
c0016a16:	ec                   	in     al,dx
c0016a17:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0016a1b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0016a1f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0016a23:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0016a2a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a2e:	89 c2                	mov    edx,eax
c0016a30:	ec                   	in     al,dx
c0016a31:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016a35:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0016a39:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0016a3d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0016a44:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0016a49:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0016a4d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a51:	ee                   	out    dx,al
c0016a52:	e8 b5 fe ff ff       	call   c001690c <picIoWait()>
c0016a57:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0016a5e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0016a63:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016a67:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016a6b:	ee                   	out    dx,al
c0016a6c:	e8 9b fe ff ff       	call   c001690c <picIoWait()>
c0016a71:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016a75:	25 ff 00 00 00       	and    eax,0xff
c0016a7a:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0016a81:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0016a85:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0016a89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016a8d:	ee                   	out    dx,al
c0016a8e:	e8 79 fe ff ff       	call   c001690c <picIoWait()>
c0016a93:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016a97:	25 ff 00 00 00       	and    eax,0xff
c0016a9c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0016aa3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016aa7:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0016aab:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016aaf:	ee                   	out    dx,al
c0016ab0:	e8 57 fe ff ff       	call   c001690c <picIoWait()>
c0016ab5:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0016abc:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0016ac1:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0016ac5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016ac9:	ee                   	out    dx,al
c0016aca:	e8 3d fe ff ff       	call   c001690c <picIoWait()>
c0016acf:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0016ad6:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0016adb:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0016adf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016ae3:	ee                   	out    dx,al
c0016ae4:	e8 23 fe ff ff       	call   c001690c <picIoWait()>
c0016ae9:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0016af0:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0016af5:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0016af9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016afd:	ee                   	out    dx,al
c0016afe:	e8 09 fe ff ff       	call   c001690c <picIoWait()>
c0016b03:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0016b0a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0016b0f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0016b13:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0016b17:	ee                   	out    dx,al
c0016b18:	e8 ef fd ff ff       	call   c001690c <picIoWait()>
c0016b1d:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0016b21:	25 ff 00 00 00       	and    eax,0xff
c0016b26:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0016b2d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0016b31:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0016b35:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0016b39:	ee                   	out    dx,al
c0016b3a:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0016b3e:	25 ff 00 00 00       	and    eax,0xff
c0016b43:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0016b4a:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0016b4e:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0016b52:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016b56:	ee                   	out    dx,al
c0016b57:	90                   	nop
c0016b58:	83 c4 50             	add    esp,0x50
c0016b5b:	c3                   	ret    

c0016b5c <picEOI(int)>:
c0016b5c:	83 ec 10             	sub    esp,0x10
c0016b5f:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016b64:	75 22                	jne    c0016b88 <picEOI(int)+0x2c>
c0016b66:	6a 0b                	push   0xb
c0016b68:	e8 db fd ff ff       	call   c0016948 <picGetIRQReg(int)>
c0016b6d:	83 c4 04             	add    esp,0x4
c0016b70:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0016b75:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0016b7a:	25 ff ff 00 00       	and    eax,0xffff
c0016b7f:	25 80 00 00 00       	and    eax,0x80
c0016b84:	74 72                	je     c0016bf8 <picEOI(int)+0x9c>
c0016b86:	66 90                	xchg   ax,ax
c0016b88:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0016b8d:	75 31                	jne    c0016bc0 <picEOI(int)+0x64>
c0016b8f:	6a 0b                	push   0xb
c0016b91:	e8 b2 fd ff ff       	call   c0016948 <picGetIRQReg(int)>
c0016b96:	83 c4 04             	add    esp,0x4
c0016b99:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016b9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ba2:	66 85 c0             	test   ax,ax
c0016ba5:	78 19                	js     c0016bc0 <picEOI(int)+0x64>
c0016ba7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0016bae:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0016bb3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016bb7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0016bbc:	ee                   	out    dx,al
c0016bbd:	eb 3d                	jmp    c0016bfc <picEOI(int)+0xa0>
c0016bbf:	90                   	nop
c0016bc0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0016bc5:	7e 19                	jle    c0016be0 <picEOI(int)+0x84>
c0016bc7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0016bce:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0016bd3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0016bd7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0016bdc:	ee                   	out    dx,al
c0016bdd:	8d 76 00             	lea    esi,[esi+0x0]
c0016be0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0016be7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0016bec:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0016bf0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0016bf5:	ee                   	out    dx,al
c0016bf6:	eb 04                	jmp    c0016bfc <picEOI(int)+0xa0>
c0016bf8:	90                   	nop
c0016bf9:	8d 76 00             	lea    esi,[esi+0x0]
c0016bfc:	83 c4 10             	add    esp,0x10
c0016bff:	c3                   	ret    

c0016c00 <RTC::open(int, int, void*)>:
c0016c00:	31 c0                	xor    eax,eax
c0016c02:	c3                   	ret    
c0016c03:	90                   	nop

c0016c04 <RTC::close(int, int, void*)>:
c0016c04:	31 c0                	xor    eax,eax
c0016c06:	c3                   	ret    
c0016c07:	90                   	nop

c0016c08 <RTC::timeInSecondsUTC()>:
c0016c08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c0c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016c12:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016c18:	c3                   	ret    
c0016c19:	90                   	nop

c0016c1a <RTC::timeInDatetimeUTC()>:
c0016c1a:	53                   	push   ebx
c0016c1b:	83 ec 14             	sub    esp,0x14
c0016c1e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016c22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c26:	8b 10                	mov    edx,DWORD PTR [eax]
c0016c28:	50                   	push   eax
c0016c29:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016c2c:	83 c4 0c             	add    esp,0xc
c0016c2f:	52                   	push   edx
c0016c30:	50                   	push   eax
c0016c31:	53                   	push   ebx
c0016c32:	e8 75 4b ff ff       	call   c000b7ac <secondsToDatetime(unsigned long long)>
c0016c37:	89 d8                	mov    eax,ebx
c0016c39:	83 c4 14             	add    esp,0x14
c0016c3c:	5b                   	pop    ebx
c0016c3d:	c2 04 00             	ret    0x4

c0016c40 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0016c40:	56                   	push   esi
c0016c41:	53                   	push   ebx
c0016c42:	83 ec 14             	sub    esp,0x14
c0016c45:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016c49:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c4b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0016c4e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c52:	52                   	push   edx
c0016c53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016c5b:	50                   	push   eax
c0016c5c:	e8 4b 4b ff ff       	call   c000b7ac <secondsToDatetime(unsigned long long)>
c0016c61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c65:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016c69:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c6d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0016c71:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c75:	89 f0                	mov    eax,esi
c0016c77:	83 c4 20             	add    esp,0x20
c0016c7a:	5b                   	pop    ebx
c0016c7b:	5e                   	pop    esi
c0016c7c:	ff e0                	jmp    eax

c0016c7e <RTC::~RTC()>:
c0016c7e:	83 ec 0c             	sub    esp,0xc
c0016c81:	ba b4 09 02 c0       	mov    edx,0xc00209b4
c0016c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8a:	89 10                	mov    DWORD PTR [eax],edx
c0016c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c90:	83 ec 0c             	sub    esp,0xc
c0016c93:	50                   	push   eax
c0016c94:	e8 97 48 ff ff       	call   c000b530 <Clock::~Clock()>
c0016c99:	83 c4 10             	add    esp,0x10
c0016c9c:	90                   	nop
c0016c9d:	83 c4 0c             	add    esp,0xc
c0016ca0:	c3                   	ret    
c0016ca1:	90                   	nop

c0016ca2 <RTC::~RTC()>:
c0016ca2:	83 ec 0c             	sub    esp,0xc
c0016ca5:	83 ec 0c             	sub    esp,0xc
c0016ca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cac:	e8 cd ff ff ff       	call   c0016c7e <RTC::~RTC()>
c0016cb1:	83 c4 10             	add    esp,0x10
c0016cb4:	83 ec 08             	sub    esp,0x8
c0016cb7:	68 60 01 00 00       	push   0x160
c0016cbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cc0:	e8 3f 38 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c0016cc5:	83 c4 10             	add    esp,0x10
c0016cc8:	83 c4 0c             	add    esp,0xc
c0016ccb:	c3                   	ret    

c0016ccc <RTC::get_update_in_progress_flag()>:
c0016ccc:	83 ec 14             	sub    esp,0x14
c0016ccf:	6a 0a                	push   0xa
c0016cd1:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016cd7:	e8 74 02 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016cdc:	83 c4 1c             	add    esp,0x1c
c0016cdf:	c0 e8 07             	shr    al,0x7
c0016ce2:	c3                   	ret    
c0016ce3:	90                   	nop

c0016ce4 <RTC::completeRTCRefresh()>:
c0016ce4:	55                   	push   ebp
c0016ce5:	57                   	push   edi
c0016ce6:	56                   	push   esi
c0016ce7:	53                   	push   ebx
c0016ce8:	83 ec 2c             	sub    esp,0x2c
c0016ceb:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c0016cf1:	83 ec 0c             	sub    esp,0xc
c0016cf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016cf8:	e8 cf ff ff ff       	call   c0016ccc <RTC::get_update_in_progress_flag()>
c0016cfd:	83 c4 10             	add    esp,0x10
c0016d00:	84 c0                	test   al,al
c0016d02:	74 0e                	je     c0016d12 <RTC::completeRTCRefresh()+0x2e>
c0016d04:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0016d0a:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c0016d10:	73 df                	jae    c0016cf1 <RTC::completeRTCRefresh()+0xd>
c0016d12:	55                   	push   ebp
c0016d13:	55                   	push   ebp
c0016d14:	6a 00                	push   0x0
c0016d16:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016d1c:	e8 2f 02 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016d21:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016d25:	58                   	pop    eax
c0016d26:	5a                   	pop    edx
c0016d27:	6a 02                	push   0x2
c0016d29:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016d2f:	e8 1c 02 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016d34:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0016d38:	59                   	pop    ecx
c0016d39:	5b                   	pop    ebx
c0016d3a:	6a 04                	push   0x4
c0016d3c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016d42:	e8 09 02 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016d47:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0016d4b:	5e                   	pop    esi
c0016d4c:	5f                   	pop    edi
c0016d4d:	6a 07                	push   0x7
c0016d4f:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016d55:	e8 f6 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016d5a:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0016d5e:	5d                   	pop    ebp
c0016d5f:	58                   	pop    eax
c0016d60:	6a 08                	push   0x8
c0016d62:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016d68:	e8 e3 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016d6d:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0016d71:	58                   	pop    eax
c0016d72:	5a                   	pop    edx
c0016d73:	6a 09                	push   0x9
c0016d75:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016d7b:	e8 d0 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016d80:	83 c4 10             	add    esp,0x10
c0016d83:	0f b6 e8             	movzx  ebp,al
c0016d86:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c0016d8c:	83 ec 0c             	sub    esp,0xc
c0016d8f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016d93:	e8 34 ff ff ff       	call   c0016ccc <RTC::get_update_in_progress_flag()>
c0016d98:	83 c4 10             	add    esp,0x10
c0016d9b:	84 c0                	test   al,al
c0016d9d:	74 0e                	je     c0016dad <RTC::completeRTCRefresh()+0xc9>
c0016d9f:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0016da5:	3b 05 8c 64 02 c0    	cmp    eax,DWORD PTR ds:0xc002648c
c0016dab:	73 df                	jae    c0016d8c <RTC::completeRTCRefresh()+0xa8>
c0016dad:	50                   	push   eax
c0016dae:	50                   	push   eax
c0016daf:	6a 00                	push   0x0
c0016db1:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016db7:	e8 94 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016dbc:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0016dc0:	58                   	pop    eax
c0016dc1:	5a                   	pop    edx
c0016dc2:	6a 02                	push   0x2
c0016dc4:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016dca:	e8 81 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016dcf:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016dd3:	59                   	pop    ecx
c0016dd4:	5b                   	pop    ebx
c0016dd5:	6a 04                	push   0x4
c0016dd7:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016ddd:	e8 6e 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016de2:	5e                   	pop    esi
c0016de3:	88 c3                	mov    bl,al
c0016de5:	5f                   	pop    edi
c0016de6:	6a 07                	push   0x7
c0016de8:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016dee:	e8 5d 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016df3:	89 c6                	mov    esi,eax
c0016df5:	58                   	pop    eax
c0016df6:	5a                   	pop    edx
c0016df7:	6a 08                	push   0x8
c0016df9:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016dff:	e8 4c 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016e04:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0016e08:	59                   	pop    ecx
c0016e09:	5f                   	pop    edi
c0016e0a:	6a 09                	push   0x9
c0016e0c:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016e12:	e8 39 01 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016e17:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0016e1b:	0f b6 f8             	movzx  edi,al
c0016e1e:	83 c4 10             	add    esp,0x10
c0016e21:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0016e25:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0016e29:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0016e2d:	89 f1                	mov    ecx,esi
c0016e2f:	0f 94 c0             	sete   al
c0016e32:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0016e36:	0f 94 c2             	sete   dl
c0016e39:	21 d0                	and    eax,edx
c0016e3b:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0016e3f:	0f 94 c2             	sete   dl
c0016e42:	21 c2                	and    edx,eax
c0016e44:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0016e48:	0f 94 c0             	sete   al
c0016e4b:	21 d0                	and    eax,edx
c0016e4d:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016e51:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0016e55:	0f 94 c1             	sete   cl
c0016e58:	84 c8                	test   al,cl
c0016e5a:	75 29                	jne    c0016e85 <RTC::completeRTCRefresh()+0x1a1>
c0016e5c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016e60:	89 fd                	mov    ebp,edi
c0016e62:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0016e66:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0016e6a:	89 f0                	mov    eax,esi
c0016e6c:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0016e70:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016e74:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016e78:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0016e7c:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0016e80:	e9 01 ff ff ff       	jmp    c0016d86 <RTC::completeRTCRefresh()+0xa2>
c0016e85:	39 fd                	cmp    ebp,edi
c0016e87:	75 d3                	jne    c0016e5c <RTC::completeRTCRefresh()+0x178>
c0016e89:	55                   	push   ebp
c0016e8a:	55                   	push   ebp
c0016e8b:	6a 0b                	push   0xb
c0016e8d:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016e93:	e8 b8 00 ff ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0016e98:	83 c4 10             	add    esp,0x10
c0016e9b:	89 c5                	mov    ebp,eax
c0016e9d:	a8 04                	test   al,0x4
c0016e9f:	75 78                	jne    c0016f19 <RTC::completeRTCRefresh()+0x235>
c0016ea1:	b1 0a                	mov    cl,0xa
c0016ea3:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0016ea7:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0016eab:	83 e2 0f             	and    edx,0xf
c0016eae:	c0 e8 04             	shr    al,0x4
c0016eb1:	c1 ef 04             	shr    edi,0x4
c0016eb4:	f6 e1                	mul    cl
c0016eb6:	6b ff 0a             	imul   edi,edi,0xa
c0016eb9:	01 d0                	add    eax,edx
c0016ebb:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0016ebf:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0016ec3:	83 e2 0f             	and    edx,0xf
c0016ec6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016eca:	c0 e8 04             	shr    al,0x4
c0016ecd:	f6 e1                	mul    cl
c0016ecf:	01 d0                	add    eax,edx
c0016ed1:	88 da                	mov    dl,bl
c0016ed3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016ed7:	83 e2 0f             	and    edx,0xf
c0016eda:	88 d8                	mov    al,bl
c0016edc:	83 e3 80             	and    ebx,0xffffff80
c0016edf:	c0 e8 04             	shr    al,0x4
c0016ee2:	83 e0 07             	and    eax,0x7
c0016ee5:	f6 e1                	mul    cl
c0016ee7:	01 d0                	add    eax,edx
c0016ee9:	89 f2                	mov    edx,esi
c0016eeb:	09 c3                	or     ebx,eax
c0016eed:	83 e2 0f             	and    edx,0xf
c0016ef0:	89 f0                	mov    eax,esi
c0016ef2:	c0 e8 04             	shr    al,0x4
c0016ef5:	f6 e1                	mul    cl
c0016ef7:	8d 34 02             	lea    esi,[edx+eax*1]
c0016efa:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0016efe:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0016f02:	83 e2 0f             	and    edx,0xf
c0016f05:	c0 e8 04             	shr    al,0x4
c0016f08:	f6 e1                	mul    cl
c0016f0a:	01 d0                	add    eax,edx
c0016f0c:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016f10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016f14:	83 e0 0f             	and    eax,0xf
c0016f17:	01 c7                	add    edi,eax
c0016f19:	83 e5 02             	and    ebp,0x2
c0016f1c:	75 14                	jne    c0016f32 <RTC::completeRTCRefresh()+0x24e>
c0016f1e:	84 db                	test   bl,bl
c0016f20:	79 10                	jns    c0016f32 <RTC::completeRTCRefresh()+0x24e>
c0016f22:	83 e3 7f             	and    ebx,0x7f
c0016f25:	b9 18 00 00 00       	mov    ecx,0x18
c0016f2a:	8d 43 0c             	lea    eax,[ebx+0xc]
c0016f2d:	99                   	cdq    
c0016f2e:	f7 f9                	idiv   ecx
c0016f30:	88 d3                	mov    bl,dl
c0016f32:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0016f38:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0016f3e:	77 06                	ja     c0016f46 <RTC::completeRTCRefresh()+0x262>
c0016f40:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0016f46:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0016f4b:	31 d2                	xor    edx,edx
c0016f4d:	c1 e1 10             	shl    ecx,0x10
c0016f50:	89 d7                	mov    edi,edx
c0016f52:	c1 e5 10             	shl    ebp,0x10
c0016f55:	31 c0                	xor    eax,eax
c0016f57:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0016f5d:	09 cf                	or     edi,ecx
c0016f5f:	89 fa                	mov    edx,edi
c0016f61:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0016f65:	88 da                	mov    dl,bl
c0016f67:	89 f3                	mov    ebx,esi
c0016f69:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0016f6d:	88 d8                	mov    al,bl
c0016f6f:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0016f73:	0f b7 c8             	movzx  ecx,ax
c0016f76:	09 e9                	or     ecx,ebp
c0016f78:	89 c8                	mov    eax,ecx
c0016f7a:	51                   	push   ecx
c0016f7b:	51                   	push   ecx
c0016f7c:	52                   	push   edx
c0016f7d:	50                   	push   eax
c0016f7e:	e8 9c 46 ff ff       	call   c000b61f <datetimeToSeconds(datetime_t)>
c0016f83:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016f87:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0016f8d:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0016f93:	83 c4 3c             	add    esp,0x3c
c0016f96:	5b                   	pop    ebx
c0016f97:	5e                   	pop    esi
c0016f98:	5f                   	pop    edi
c0016f99:	5d                   	pop    ebp
c0016f9a:	c3                   	ret    
c0016f9b:	90                   	nop

c0016f9c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0016f9c:	55                   	push   ebp
c0016f9d:	57                   	push   edi
c0016f9e:	56                   	push   esi
c0016f9f:	53                   	push   ebx
c0016fa0:	83 ec 30             	sub    esp,0x30
c0016fa3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016fa7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016fab:	6a 00                	push   0x0
c0016fad:	6a 00                	push   0x0
c0016faf:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016fb5:	e8 ac 00 ff ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016fba:	83 c4 0c             	add    esp,0xc
c0016fbd:	6a 00                	push   0x0
c0016fbf:	6a 02                	push   0x2
c0016fc1:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0016fc7:	e8 9a 00 ff ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016fcc:	31 d2                	xor    edx,edx
c0016fce:	89 f9                	mov    ecx,edi
c0016fd0:	89 f8                	mov    eax,edi
c0016fd2:	c1 e9 10             	shr    ecx,0x10
c0016fd5:	0f b6 c4             	movzx  eax,ah
c0016fd8:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016fdc:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fe4:	b9 64 00 00 00       	mov    ecx,0x64
c0016fe9:	89 f0                	mov    eax,esi
c0016feb:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016fef:	89 f0                	mov    eax,esi
c0016ff1:	0f b6 c4             	movzx  eax,ah
c0016ff4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016ff8:	89 f0                	mov    eax,esi
c0016ffa:	c1 e8 10             	shr    eax,0x10
c0016ffd:	66 f7 f1             	div    cx
c0017000:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0017005:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001700a:	59                   	pop    ecx
c001700b:	5b                   	pop    ebx
c001700c:	89 fb                	mov    ebx,edi
c001700e:	6a 0b                	push   0xb
c0017010:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017016:	e8 35 ff fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c001701b:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001701f:	83 c4 10             	add    esp,0x10
c0017022:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0017027:	75 74                	jne    c001709d <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0017029:	b2 0a                	mov    dl,0xa
c001702b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001702f:	0f b6 c1             	movzx  eax,cl
c0017032:	f6 f2                	div    dl
c0017034:	88 c3                	mov    bl,al
c0017036:	88 e0                	mov    al,ah
c0017038:	c1 e3 04             	shl    ebx,0x4
c001703b:	09 c3                	or     ebx,eax
c001703d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017042:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0017046:	f6 f2                	div    dl
c0017048:	88 c1                	mov    cl,al
c001704a:	88 e0                	mov    al,ah
c001704c:	c1 e1 04             	shl    ecx,0x4
c001704f:	09 c1                	or     ecx,eax
c0017051:	89 f8                	mov    eax,edi
c0017053:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017057:	0f b6 c0             	movzx  eax,al
c001705a:	f6 f2                	div    dl
c001705c:	88 c3                	mov    bl,al
c001705e:	88 e0                	mov    al,ah
c0017060:	c1 e3 04             	shl    ebx,0x4
c0017063:	09 c3                	or     ebx,eax
c0017065:	89 f0                	mov    eax,esi
c0017067:	0f b6 c0             	movzx  eax,al
c001706a:	f6 f2                	div    dl
c001706c:	88 c1                	mov    cl,al
c001706e:	88 e0                	mov    al,ah
c0017070:	c1 e1 04             	shl    ecx,0x4
c0017073:	09 c1                	or     ecx,eax
c0017075:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001707a:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c001707e:	f6 f2                	div    dl
c0017080:	88 c1                	mov    cl,al
c0017082:	88 e0                	mov    al,ah
c0017084:	c1 e1 04             	shl    ecx,0x4
c0017087:	09 c1                	or     ecx,eax
c0017089:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c001708e:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0017092:	f6 f2                	div    dl
c0017094:	89 c5                	mov    ebp,eax
c0017096:	88 e0                	mov    al,ah
c0017098:	c1 e5 04             	shl    ebp,0x4
c001709b:	09 c5                	or     ebp,eax
c001709d:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c00170a2:	75 17                	jne    c00170bb <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00170a4:	80 fb 0b             	cmp    bl,0xb
c00170a7:	76 0c                	jbe    c00170b5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c00170a9:	80 eb 0c             	sub    bl,0xc
c00170ac:	75 02                	jne    c00170b0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00170ae:	b3 0c                	mov    bl,0xc
c00170b0:	83 cb 80             	or     ebx,0xffffff80
c00170b3:	eb 06                	jmp    c00170bb <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00170b5:	84 db                	test   bl,bl
c00170b7:	75 02                	jne    c00170bb <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c00170b9:	b3 0c                	mov    bl,0xc
c00170bb:	0f b6 db             	movzx  ebx,bl
c00170be:	50                   	push   eax
c00170bf:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00170c4:	50                   	push   eax
c00170c5:	6a 00                	push   0x0
c00170c7:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00170cd:	e8 94 ff fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c00170d2:	83 c4 0c             	add    esp,0xc
c00170d5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00170da:	50                   	push   eax
c00170db:	6a 02                	push   0x2
c00170dd:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00170e3:	e8 7e ff fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c00170e8:	83 c4 0c             	add    esp,0xc
c00170eb:	53                   	push   ebx
c00170ec:	6a 04                	push   0x4
c00170ee:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c00170f4:	e8 6d ff fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c00170f9:	83 c4 0c             	add    esp,0xc
c00170fc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0017101:	50                   	push   eax
c0017102:	6a 07                	push   0x7
c0017104:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001710a:	e8 57 ff fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c001710f:	83 c4 0c             	add    esp,0xc
c0017112:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0017117:	50                   	push   eax
c0017118:	6a 08                	push   0x8
c001711a:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017120:	e8 41 ff fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017125:	83 c4 0c             	add    esp,0xc
c0017128:	89 e8                	mov    eax,ebp
c001712a:	0f b6 e8             	movzx  ebp,al
c001712d:	55                   	push   ebp
c001712e:	6a 09                	push   0x9
c0017130:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c0017136:	e8 2b ff fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c001713b:	5a                   	pop    edx
c001713c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0017140:	e8 9f fb ff ff       	call   c0016ce4 <RTC::completeRTCRefresh()>
c0017145:	83 c4 3c             	add    esp,0x3c
c0017148:	b0 01                	mov    al,0x1
c001714a:	5b                   	pop    ebx
c001714b:	5e                   	pop    esi
c001714c:	5f                   	pop    edi
c001714d:	5d                   	pop    ebp
c001714e:	c3                   	ret    

c001714f <rtcIRQHandler(regs*, void*)>:
c001714f:	53                   	push   ebx
c0017150:	83 ec 10             	sub    esp,0x10
c0017153:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017157:	6a 0c                	push   0xc
c0017159:	ff 35 b8 3e 02 c0    	push   DWORD PTR ds:0xc0023eb8
c001715f:	e8 ec fd fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c0017164:	83 c4 10             	add    esp,0x10
c0017167:	84 c0                	test   al,al
c0017169:	79 24                	jns    c001718f <rtcIRQHandler(regs*, void*)+0x40>
c001716b:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0017172:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0017179:	66 ff 05 14 72 02 c0 	inc    WORD PTR ds:0xc0027214
c0017180:	75 0d                	jne    c001718f <rtcIRQHandler(regs*, void*)+0x40>
c0017182:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017186:	83 c4 08             	add    esp,0x8
c0017189:	5b                   	pop    ebx
c001718a:	e9 55 fb ff ff       	jmp    c0016ce4 <RTC::completeRTCRefresh()>
c001718f:	83 c4 08             	add    esp,0x8
c0017192:	5b                   	pop    ebx
c0017193:	c3                   	ret    

c0017194 <RTC::RTC()>:
c0017194:	83 ec 1c             	sub    esp,0x1c
c0017197:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001719b:	83 ec 08             	sub    esp,0x8
c001719e:	68 97 09 02 c0       	push   0xc0020997
c00171a3:	50                   	push   eax
c00171a4:	e8 51 43 ff ff       	call   c000b4fa <Clock::Clock(char const*)>
c00171a9:	83 c4 10             	add    esp,0x10
c00171ac:	ba b4 09 02 c0       	mov    edx,0xc00209b4
c00171b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171b5:	89 10                	mov    DWORD PTR [eax],edx
c00171b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171bb:	83 ec 0c             	sub    esp,0xc
c00171be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00171c2:	6a 01                	push   0x1
c00171c4:	68 4f 71 01 c0       	push   0xc001714f
c00171c9:	6a 08                	push   0x8
c00171cb:	50                   	push   eax
c00171cc:	e8 13 48 ff ff       	call   c000b9e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00171d1:	83 c4 20             	add    esp,0x20
c00171d4:	89 c2                	mov    edx,eax
c00171d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171da:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00171e0:	fa                   	cli    
c00171e1:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c00171e6:	40                   	inc    eax
c00171e7:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c00171ec:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c00171f1:	83 ec 08             	sub    esp,0x8
c00171f4:	6a 0b                	push   0xb
c00171f6:	50                   	push   eax
c00171f7:	e8 54 fd fe ff       	call   c0006f50 <Computer::readCMOS(unsigned char)>
c00171fc:	83 c4 10             	add    esp,0x10
c00171ff:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017203:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0017208:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001720c:	83 ca 10             	or     edx,0x10
c001720f:	81 e2 ff 00 00 00    	and    edx,0xff
c0017215:	83 ec 04             	sub    esp,0x4
c0017218:	52                   	push   edx
c0017219:	6a 0b                	push   0xb
c001721b:	50                   	push   eax
c001721c:	e8 45 fe fe ff       	call   c0007066 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017221:	83 c4 10             	add    esp,0x10
c0017224:	83 ec 0c             	sub    esp,0xc
c0017227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001722b:	e8 b4 fa ff ff       	call   c0016ce4 <RTC::completeRTCRefresh()>
c0017230:	83 c4 10             	add    esp,0x10
c0017233:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0017238:	48                   	dec    eax
c0017239:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001723e:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c0017243:	85 c0                	test   eax,eax
c0017245:	75 01                	jne    c0017248 <RTC::RTC()+0xb4>
c0017247:	fb                   	sti    
c0017248:	90                   	nop
c0017249:	83 c4 1c             	add    esp,0x1c
c001724c:	c3                   	ret    
c001724d:	66 90                	xchg   ax,ax
c001724f:	90                   	nop

c0017250 <HalConsoleScroll(int, int)>:
c0017250:	83 ec 10             	sub    esp,0x10
c0017253:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001725b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0017263:	90                   	nop
c0017264:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0017269:	0f 8f e1 00 00 00    	jg     c0017350 <HalConsoleScroll(int, int)+0x100>
c001726f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017277:	90                   	nop
c0017278:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0017280:	0f 8f be 00 00 00    	jg     c0017344 <HalConsoleScroll(int, int)+0xf4>
c0017286:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001728a:	89 d0                	mov    eax,edx
c001728c:	c1 e0 02             	shl    eax,0x2
c001728f:	01 d0                	add    eax,edx
c0017291:	c1 e0 05             	shl    eax,0x5
c0017294:	89 c2                	mov    edx,eax
c0017296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001729a:	01 d0                	add    eax,edx
c001729c:	89 c2                	mov    edx,eax
c001729e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00172a2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00172a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172a9:	89 d0                	mov    eax,edx
c00172ab:	c1 e0 02             	shl    eax,0x2
c00172ae:	01 d0                	add    eax,edx
c00172b0:	c1 e0 05             	shl    eax,0x5
c00172b3:	89 c2                	mov    edx,eax
c00172b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172b9:	01 d0                	add    eax,edx
c00172bb:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00172c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00172c5:	01 c2                	add    edx,eax
c00172c7:	8a 01                	mov    al,BYTE PTR [ecx]
c00172c9:	88 02                	mov    BYTE PTR [edx],al
c00172cb:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00172d0:	75 66                	jne    c0017338 <HalConsoleScroll(int, int)+0xe8>
c00172d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00172d6:	83 e0 01             	and    eax,0x1
c00172d9:	74 39                	je     c0017314 <HalConsoleScroll(int, int)+0xc4>
c00172db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00172df:	83 e0 0f             	and    eax,0xf
c00172e2:	88 c2                	mov    dl,al
c00172e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00172e8:	c1 e0 04             	shl    eax,0x4
c00172eb:	88 d1                	mov    cl,dl
c00172ed:	09 c1                	or     ecx,eax
c00172ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00172f3:	89 d0                	mov    eax,edx
c00172f5:	c1 e0 02             	shl    eax,0x2
c00172f8:	01 d0                	add    eax,edx
c00172fa:	c1 e0 05             	shl    eax,0x5
c00172fd:	89 c2                	mov    edx,eax
c00172ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017303:	01 d0                	add    eax,edx
c0017305:	89 c2                	mov    edx,eax
c0017307:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001730b:	01 d0                	add    eax,edx
c001730d:	88 ca                	mov    dl,cl
c001730f:	88 10                	mov    BYTE PTR [eax],dl
c0017311:	eb 25                	jmp    c0017338 <HalConsoleScroll(int, int)+0xe8>
c0017313:	90                   	nop
c0017314:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017318:	89 d0                	mov    eax,edx
c001731a:	c1 e0 02             	shl    eax,0x2
c001731d:	01 d0                	add    eax,edx
c001731f:	c1 e0 05             	shl    eax,0x5
c0017322:	89 c2                	mov    edx,eax
c0017324:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017328:	01 d0                	add    eax,edx
c001732a:	89 c2                	mov    edx,eax
c001732c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017330:	01 d0                	add    eax,edx
c0017332:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0017335:	8d 76 00             	lea    esi,[esi+0x0]
c0017338:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001733c:	e9 37 ff ff ff       	jmp    c0017278 <HalConsoleScroll(int, int)+0x28>
c0017341:	8d 76 00             	lea    esi,[esi+0x0]
c0017344:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017348:	e9 17 ff ff ff       	jmp    c0017264 <HalConsoleScroll(int, int)+0x14>
c001734d:	8d 76 00             	lea    esi,[esi+0x0]
c0017350:	90                   	nop
c0017351:	83 c4 10             	add    esp,0x10
c0017354:	c3                   	ret    
c0017355:	8d 76 00             	lea    esi,[esi+0x0]

c0017358 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0017358:	83 ec 14             	sub    esp,0x14
c001735b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001735f:	88 04 24             	mov    BYTE PTR [esp],al
c0017362:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017365:	25 ff 00 00 00       	and    eax,0xff
c001736a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001736e:	89 d1                	mov    ecx,edx
c0017370:	83 e1 0f             	and    ecx,0xf
c0017373:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017377:	c1 e2 04             	shl    edx,0x4
c001737a:	81 e2 ff 00 00 00    	and    edx,0xff
c0017380:	09 ca                	or     edx,ecx
c0017382:	c1 e2 08             	shl    edx,0x8
c0017385:	09 d0                	or     eax,edx
c0017387:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001738c:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0017394:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017398:	89 d0                	mov    eax,edx
c001739a:	c1 e0 02             	shl    eax,0x2
c001739d:	01 d0                	add    eax,edx
c001739f:	c1 e0 04             	shl    eax,0x4
c00173a2:	89 c2                	mov    edx,eax
c00173a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00173a8:	01 d0                	add    eax,edx
c00173aa:	01 c0                	add    eax,eax
c00173ac:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00173b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00173b4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00173b9:	66 89 02             	mov    WORD PTR [edx],ax
c00173bc:	90                   	nop
c00173bd:	83 c4 14             	add    esp,0x14
c00173c0:	c3                   	ret    
c00173c1:	8d 76 00             	lea    esi,[esi+0x0]

c00173c4 <HalConsoleCursorUpdate(int, int)>:
c00173c4:	83 ec 20             	sub    esp,0x20
c00173c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173cb:	89 c2                	mov    edx,eax
c00173cd:	89 d0                	mov    eax,edx
c00173cf:	c1 e0 02             	shl    eax,0x2
c00173d2:	01 d0                	add    eax,edx
c00173d4:	c1 e0 04             	shl    eax,0x4
c00173d7:	89 c2                	mov    edx,eax
c00173d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00173dd:	01 d0                	add    eax,edx
c00173df:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00173e4:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c00173eb:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c00173f0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00173f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00173f8:	ee                   	out    dx,al
c00173f9:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00173fe:	25 ff 00 00 00       	and    eax,0xff
c0017403:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001740a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001740e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017412:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017416:	ee                   	out    dx,al
c0017417:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001741e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0017423:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017427:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001742b:	ee                   	out    dx,al
c001742c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0017431:	66 c1 e8 08          	shr    ax,0x8
c0017435:	25 ff 00 00 00       	and    eax,0xff
c001743a:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0017441:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017445:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017449:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001744d:	ee                   	out    dx,al
c001744e:	90                   	nop
c001744f:	83 c4 20             	add    esp,0x20
c0017452:	c3                   	ret    
c0017453:	90                   	nop

c0017454 <FAT::getName()>:
c0017454:	b8 e8 09 02 c0       	mov    eax,0xc00209e8
c0017459:	c3                   	ret    
c001745a:	66 90                	xchg   ax,ax

c001745c <FAT::tell(void*, unsigned long long*)>:
c001745c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017461:	75 09                	jne    c001746c <FAT::tell(void*, unsigned long long*)+0x10>
c0017463:	b8 04 00 00 00       	mov    eax,0x4
c0017468:	c3                   	ret    
c0017469:	8d 76 00             	lea    esi,[esi+0x0]
c001746c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0017471:	75 09                	jne    c001747c <FAT::tell(void*, unsigned long long*)+0x20>
c0017473:	b8 04 00 00 00       	mov    eax,0x4
c0017478:	c3                   	ret    
c0017479:	8d 76 00             	lea    esi,[esi+0x0]
c001747c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017480:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017483:	ba 00 00 00 00       	mov    edx,0x0
c0017488:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001748c:	89 01                	mov    DWORD PTR [ecx],eax
c001748e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017491:	b8 00 00 00 00       	mov    eax,0x0
c0017496:	c3                   	ret    
c0017497:	90                   	nop

c0017498 <FAT::stat(void*, unsigned long long*)>:
c0017498:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001749d:	75 09                	jne    c00174a8 <FAT::stat(void*, unsigned long long*)+0x10>
c001749f:	b8 04 00 00 00       	mov    eax,0x4
c00174a4:	c3                   	ret    
c00174a5:	8d 76 00             	lea    esi,[esi+0x0]
c00174a8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00174ad:	75 09                	jne    c00174b8 <FAT::stat(void*, unsigned long long*)+0x20>
c00174af:	b8 04 00 00 00       	mov    eax,0x4
c00174b4:	c3                   	ret    
c00174b5:	8d 76 00             	lea    esi,[esi+0x0]
c00174b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00174bc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00174bf:	ba 00 00 00 00       	mov    edx,0x0
c00174c4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174c8:	89 01                	mov    DWORD PTR [ecx],eax
c00174ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00174cd:	b8 00 00 00 00       	mov    eax,0x0
c00174d2:	c3                   	ret    
c00174d3:	90                   	nop

c00174d4 <FAT::~FAT()>:
c00174d4:	83 ec 0c             	sub    esp,0xc
c00174d7:	ba 34 0a 02 c0       	mov    edx,0xc0020a34
c00174dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174e0:	89 10                	mov    DWORD PTR [eax],edx
c00174e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174e6:	83 ec 0c             	sub    esp,0xc
c00174e9:	50                   	push   eax
c00174ea:	e8 51 34 ff ff       	call   c000a940 <Filesystem::~Filesystem()>
c00174ef:	83 c4 10             	add    esp,0x10
c00174f2:	90                   	nop
c00174f3:	83 c4 0c             	add    esp,0xc
c00174f6:	c3                   	ret    
c00174f7:	90                   	nop

c00174f8 <FAT::~FAT()>:
c00174f8:	83 ec 0c             	sub    esp,0xc
c00174fb:	83 ec 0c             	sub    esp,0xc
c00174fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017502:	e8 cd ff ff ff       	call   c00174d4 <FAT::~FAT()>
c0017507:	83 c4 10             	add    esp,0x10
c001750a:	83 ec 08             	sub    esp,0x8
c001750d:	6a 08                	push   0x8
c001750f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017513:	e8 ec 2f ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c0017518:	83 c4 10             	add    esp,0x10
c001751b:	83 c4 0c             	add    esp,0xc
c001751e:	c3                   	ret    
c001751f:	90                   	nop

c0017520 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0017520:	83 ec 1c             	sub    esp,0x1c
c0017523:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001752a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001752f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017533:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c001753a:	83 f8 ff             	cmp    eax,0xffffffff
c001753d:	75 35                	jne    c0017574 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001753f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017543:	88 c2                	mov    dl,al
c0017545:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c001754a:	01 d0                	add    eax,edx
c001754c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017550:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c0017556:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001755a:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017561:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017566:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001756a:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017571:	eb 19                	jmp    c001758c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0017573:	90                   	nop
c0017574:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017578:	88 c2                	mov    dl,al
c001757a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001757e:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017585:	01 d0                	add    eax,edx
c0017587:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001758b:	90                   	nop
c001758c:	83 ec 04             	sub    esp,0x4
c001758f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017593:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017597:	8d 44 24 15          	lea    eax,[esp+0x15]
c001759b:	50                   	push   eax
c001759c:	e8 a3 d8 fe ff       	call   c0004e44 <f_getlabel>
c00175a1:	83 c4 10             	add    esp,0x10
c00175a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00175a8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00175ad:	75 09                	jne    c00175b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00175af:	b8 00 00 00 00       	mov    eax,0x0
c00175b4:	eb 0a                	jmp    c00175c0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00175b6:	66 90                	xchg   ax,ax
c00175b8:	b8 01 00 00 00       	mov    eax,0x1
c00175bd:	8d 76 00             	lea    esi,[esi+0x0]
c00175c0:	83 c4 1c             	add    esp,0x1c
c00175c3:	c3                   	ret    

c00175c4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00175c4:	57                   	push   edi
c00175c5:	83 ec 58             	sub    esp,0x58
c00175c8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00175d0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00175d4:	b8 00 00 00 00       	mov    eax,0x0
c00175d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00175de:	fc                   	cld    
c00175df:	89 d7                	mov    edi,edx
c00175e1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00175e3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00175e7:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00175ee:	83 f8 ff             	cmp    eax,0xffffffff
c00175f1:	75 35                	jne    c0017628 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c00175f3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00175f7:	88 c2                	mov    dl,al
c00175f9:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00175fe:	01 d0                	add    eax,edx
c0017600:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017604:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c001760a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001760e:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017615:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c001761a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001761e:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c0017625:	eb 19                	jmp    c0017640 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0017627:	90                   	nop
c0017628:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001762c:	88 c2                	mov    dl,al
c001762e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0017632:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017639:	01 d0                	add    eax,edx
c001763b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001763f:	90                   	nop
c0017640:	83 ec 08             	sub    esp,0x8
c0017643:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0017647:	8d 44 24 18          	lea    eax,[esp+0x18]
c001764b:	50                   	push   eax
c001764c:	e8 5f 91 fe ff       	call   c00007b0 <strcat>
c0017651:	83 c4 10             	add    esp,0x10
c0017654:	83 ec 0c             	sub    esp,0xc
c0017657:	8d 44 24 18          	lea    eax,[esp+0x18]
c001765b:	50                   	push   eax
c001765c:	e8 34 d9 fe ff       	call   c0004f95 <f_setlabel>
c0017661:	83 c4 10             	add    esp,0x10
c0017664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017668:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001766d:	75 09                	jne    c0017678 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001766f:	b8 00 00 00 00       	mov    eax,0x0
c0017674:	eb 0a                	jmp    c0017680 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0017676:	66 90                	xchg   ax,ax
c0017678:	b8 01 00 00 00       	mov    eax,0x1
c001767d:	8d 76 00             	lea    esi,[esi+0x0]
c0017680:	83 c4 58             	add    esp,0x58
c0017683:	5f                   	pop    edi
c0017684:	c3                   	ret    
c0017685:	90                   	nop
c0017686:	66 90                	xchg   ax,ax

c0017688 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0017688:	83 ec 2c             	sub    esp,0x2c
c001768b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017693:	83 ec 08             	sub    esp,0x8
c0017696:	68 0c 0a 02 c0       	push   0xc0020a0c
c001769b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001769f:	e8 2c 90 fe ff       	call   c00006d0 <strcmp>
c00176a4:	83 c4 10             	add    esp,0x10
c00176a7:	85 c0                	test   eax,eax
c00176a9:	0f 94 c0             	sete   al
c00176ac:	84 c0                	test   al,al
c00176ae:	74 10                	je     c00176c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00176b0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00176b8:	e9 b3 00 00 00       	jmp    c0017770 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00176bd:	8d 76 00             	lea    esi,[esi+0x0]
c00176c0:	83 ec 08             	sub    esp,0x8
c00176c3:	68 fe 09 02 c0       	push   0xc00209fe
c00176c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00176cc:	e8 ff 8f fe ff       	call   c00006d0 <strcmp>
c00176d1:	83 c4 10             	add    esp,0x10
c00176d4:	85 c0                	test   eax,eax
c00176d6:	0f 94 c0             	sete   al
c00176d9:	84 c0                	test   al,al
c00176db:	74 0f                	je     c00176ec <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c00176dd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00176e5:	e9 86 00 00 00       	jmp    c0017770 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00176ea:	66 90                	xchg   ax,ax
c00176ec:	83 ec 08             	sub    esp,0x8
c00176ef:	68 04 0a 02 c0       	push   0xc0020a04
c00176f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00176f8:	e8 d3 8f fe ff       	call   c00006d0 <strcmp>
c00176fd:	83 c4 10             	add    esp,0x10
c0017700:	85 c0                	test   eax,eax
c0017702:	0f 94 c0             	sete   al
c0017705:	84 c0                	test   al,al
c0017707:	74 0b                	je     c0017714 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0017709:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0017711:	eb 5d                	jmp    c0017770 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017713:	90                   	nop
c0017714:	83 ec 08             	sub    esp,0x8
c0017717:	68 9c e8 01 c0       	push   0xc001e89c
c001771c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017720:	e8 ab 8f fe ff       	call   c00006d0 <strcmp>
c0017725:	83 c4 10             	add    esp,0x10
c0017728:	85 c0                	test   eax,eax
c001772a:	0f 94 c0             	sete   al
c001772d:	84 c0                	test   al,al
c001772f:	74 0b                	je     c001773c <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c0017731:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0017739:	eb 35                	jmp    c0017770 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001773b:	90                   	nop
c001773c:	83 ec 08             	sub    esp,0x8
c001773f:	68 0a 0a 02 c0       	push   0xc0020a0a
c0017744:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017748:	e8 83 8f fe ff       	call   c00006d0 <strcmp>
c001774d:	83 c4 10             	add    esp,0x10
c0017750:	85 c0                	test   eax,eax
c0017752:	0f 94 c0             	sete   al
c0017755:	84 c0                	test   al,al
c0017757:	74 0b                	je     c0017764 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c0017759:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0017761:	eb 0d                	jmp    c0017770 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0017763:	90                   	nop
c0017764:	b8 08 00 00 00       	mov    eax,0x8
c0017769:	e9 ea 00 00 00       	jmp    c0017858 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001776e:	66 90                	xchg   ax,ax
c0017770:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0017777:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001777c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017780:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0017787:	83 f8 ff             	cmp    eax,0xffffffff
c001778a:	75 34                	jne    c00177c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001778c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017790:	88 c2                	mov    dl,al
c0017792:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017797:	01 d0                	add    eax,edx
c0017799:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001779d:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c00177a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00177a7:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c00177ae:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00177b3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00177b7:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c00177be:	eb 18                	jmp    c00177d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c00177c0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00177c4:	88 c2                	mov    dl,al
c00177c6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00177ca:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00177d1:	01 d0                	add    eax,edx
c00177d3:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00177d7:	90                   	nop
c00177d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00177dc:	88 04 24             	mov    BYTE PTR [esp],al
c00177df:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00177e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177ef:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00177f4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177fc:	83 ec 0c             	sub    esp,0xc
c00177ff:	68 00 20 00 00       	push   0x2000
c0017804:	e8 5c 00 ff ff       	call   c0007865 <malloc>
c0017809:	83 c4 10             	add    esp,0x10
c001780c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017810:	68 00 20 00 00       	push   0x2000
c0017815:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017819:	8d 44 24 08          	lea    eax,[esp+0x8]
c001781d:	50                   	push   eax
c001781e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0017822:	50                   	push   eax
c0017823:	e8 5d da fe ff       	call   c0005285 <f_mkfs>
c0017828:	83 c4 10             	add    esp,0x10
c001782b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001782f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017834:	75 0a                	jne    c0017840 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c0017836:	b8 00 00 00 00       	mov    eax,0x0
c001783b:	eb 1b                	jmp    c0017858 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001783d:	8d 76 00             	lea    esi,[esi+0x0]
c0017840:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0017845:	75 09                	jne    c0017850 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0017847:	b8 09 00 00 00       	mov    eax,0x9
c001784c:	eb 0a                	jmp    c0017858 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001784e:	66 90                	xchg   ax,ax
c0017850:	b8 01 00 00 00       	mov    eax,0x1
c0017855:	8d 76 00             	lea    esi,[esi+0x0]
c0017858:	83 c4 2c             	add    esp,0x2c
c001785b:	c3                   	ret    

c001785c <FAT::tryMount(LogicalDisk*, int)>:
c001785c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0017862:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017867:	83 f8 14             	cmp    eax,0x14
c001786a:	75 18                	jne    c0017884 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001786c:	83 ec 0c             	sub    esp,0xc
c001786f:	68 10 0a 02 c0       	push   0xc0020a10
c0017874:	e8 36 8b ff ff       	call   c00103af <KePanic(char const*)>
c0017879:	83 c4 10             	add    esp,0x10
c001787c:	b0 00                	mov    al,0x0
c001787e:	e9 e9 01 00 00       	jmp    c0017a6c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017883:	90                   	nop
c0017884:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001788b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0017891:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017897:	3d 00 02 00 00       	cmp    eax,0x200
c001789c:	74 0a                	je     c00178a8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001789e:	b0 00                	mov    al,0x0
c00178a0:	e9 c7 01 00 00       	jmp    c0017a6c <FAT::tryMount(LogicalDisk*, int)+0x210>
c00178a5:	8d 76 00             	lea    esi,[esi+0x0]
c00178a8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c00178b0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00178b7:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c00178be:	83 f8 ff             	cmp    eax,0xffffffff
c00178c1:	74 09                	je     c00178cc <FAT::tryMount(LogicalDisk*, int)+0x70>
c00178c3:	b0 01                	mov    al,0x1
c00178c5:	e9 a2 01 00 00       	jmp    c0017a6c <FAT::tryMount(LogicalDisk*, int)+0x210>
c00178ca:	66 90                	xchg   ax,ax
c00178cc:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00178d6:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00178de:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00178e5:	88 c2                	mov    dl,al
c00178e7:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c00178ec:	01 d0                	add    eax,edx
c00178ee:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00178f5:	8b 15 20 72 02 c0    	mov    edx,DWORD PTR ds:0xc0027220
c00178fb:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0017902:	89 14 85 40 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8dc0],edx
c0017909:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c001790e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0017915:	89 14 85 c0 72 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8d40],edx
c001791c:	83 ec 0c             	sub    esp,0xc
c001791f:	68 34 02 00 00       	push   0x234
c0017924:	e8 3c ff fe ff       	call   c0007865 <malloc>
c0017929:	83 c4 10             	add    esp,0x10
c001792c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0017933:	83 ec 04             	sub    esp,0x4
c0017936:	6a 00                	push   0x0
c0017938:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001793f:	50                   	push   eax
c0017940:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017947:	e8 5f c1 fe ff       	call   c0003aab <f_mount>
c001794c:	83 c4 10             	add    esp,0x10
c001794f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0017956:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001795e:	74 1c                	je     c001797c <FAT::tryMount(LogicalDisk*, int)+0x120>
c0017960:	83 ec 0c             	sub    esp,0xc
c0017963:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001796a:	e8 16 ff fe ff       	call   c0007885 <rfree>
c001796f:	83 c4 10             	add    esp,0x10
c0017972:	b0 00                	mov    al,0x0
c0017974:	e9 f3 00 00 00       	jmp    c0017a6c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017979:	8d 76 00             	lea    esi,[esi+0x0]
c001797c:	83 ec 04             	sub    esp,0x4
c001797f:	68 00 01 00 00       	push   0x100
c0017984:	6a 00                	push   0x0
c0017986:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001798d:	50                   	push   eax
c001798e:	e8 2d 8b fe ff       	call   c00004c0 <memset>
c0017993:	83 c4 10             	add    esp,0x10
c0017996:	83 ec 08             	sub    esp,0x8
c0017999:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00179a0:	50                   	push   eax
c00179a1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00179a8:	50                   	push   eax
c00179a9:	e8 02 8e fe ff       	call   c00007b0 <strcat>
c00179ae:	83 c4 10             	add    esp,0x10
c00179b1:	83 ec 08             	sub    esp,0x8
c00179b4:	68 1e 0a 02 c0       	push   0xc0020a1e
c00179b9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c00179c0:	50                   	push   eax
c00179c1:	e8 ea 8d fe ff       	call   c00007b0 <strcat>
c00179c6:	83 c4 10             	add    esp,0x10
c00179c9:	83 ec 04             	sub    esp,0x4
c00179cc:	6a 01                	push   0x1
c00179ce:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00179d5:	50                   	push   eax
c00179d6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00179da:	50                   	push   eax
c00179db:	e8 2d c1 fe ff       	call   c0003b0d <f_open>
c00179e0:	83 c4 10             	add    esp,0x10
c00179e3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00179ea:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00179f1:	85 c0                	test   eax,eax
c00179f3:	74 0b                	je     c0017a00 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00179f5:	78 31                	js     c0017a28 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00179f7:	83 e8 04             	sub    eax,0x4
c00179fa:	83 f8 01             	cmp    eax,0x1
c00179fd:	77 29                	ja     c0017a28 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00179ff:	90                   	nop
c0017a00:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0017a08:	83 ec 0c             	sub    esp,0xc
c0017a0b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017a0f:	50                   	push   eax
c0017a10:	e8 ab c8 fe ff       	call   c00042c0 <f_close>
c0017a15:	83 c4 10             	add    esp,0x10
c0017a18:	90                   	nop
c0017a19:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0017a21:	74 41                	je     c0017a64 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0017a23:	eb 33                	jmp    c0017a58 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0017a25:	8d 76 00             	lea    esi,[esi+0x0]
c0017a28:	83 ec 0c             	sub    esp,0xc
c0017a2b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0017a32:	e8 4e fe fe ff       	call   c0007885 <rfree>
c0017a37:	83 c4 10             	add    esp,0x10
c0017a3a:	83 ec 04             	sub    esp,0x4
c0017a3d:	6a 00                	push   0x0
c0017a3f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0017a46:	50                   	push   eax
c0017a47:	6a 00                	push   0x0
c0017a49:	e8 5d c0 fe ff       	call   c0003aab <f_mount>
c0017a4e:	83 c4 10             	add    esp,0x10
c0017a51:	b0 00                	mov    al,0x0
c0017a53:	eb 17                	jmp    c0017a6c <FAT::tryMount(LogicalDisk*, int)+0x210>
c0017a55:	8d 76 00             	lea    esi,[esi+0x0]
c0017a58:	a1 20 72 02 c0       	mov    eax,ds:0xc0027220
c0017a5d:	40                   	inc    eax
c0017a5e:	a3 20 72 02 c0       	mov    ds:0xc0027220,eax
c0017a63:	90                   	nop
c0017a64:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0017a6b:	90                   	nop
c0017a6c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0017a72:	c3                   	ret    
c0017a73:	90                   	nop

c0017a74 <FAT::allocateSwapfile(char const*, int)>:
c0017a74:	55                   	push   ebp
c0017a75:	57                   	push   edi
c0017a76:	56                   	push   esi
c0017a77:	53                   	push   ebx
c0017a78:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0017a7e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0017a89:	83 ec 0c             	sub    esp,0xc
c0017a8c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0017a93:	e8 cd fd fe ff       	call   c0007865 <malloc>
c0017a98:	83 c4 10             	add    esp,0x10
c0017a9b:	89 c7                	mov    edi,eax
c0017a9d:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0017aa2:	83 ec 04             	sub    esp,0x4
c0017aa5:	50                   	push   eax
c0017aa6:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0017aad:	57                   	push   edi
c0017aae:	e8 bd 30 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0017ab3:	83 c4 10             	add    esp,0x10
c0017ab6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0017abd:	83 ec 04             	sub    esp,0x4
c0017ac0:	8d 44 24 13          	lea    eax,[esp+0x13]
c0017ac4:	50                   	push   eax
c0017ac5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017ac9:	50                   	push   eax
c0017aca:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017ad1:	e8 06 34 ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c0017ad6:	83 c4 10             	add    esp,0x10
c0017ad9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017ae0:	c1 e0 14             	shl    eax,0x14
c0017ae3:	89 c7                	mov    edi,eax
c0017ae5:	89 c5                	mov    ebp,eax
c0017ae7:	c1 fd 1f             	sar    ebp,0x1f
c0017aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017af2:	89 f9                	mov    ecx,edi
c0017af4:	31 c1                	xor    ecx,eax
c0017af6:	89 cb                	mov    ebx,ecx
c0017af8:	89 e9                	mov    ecx,ebp
c0017afa:	31 d1                	xor    ecx,edx
c0017afc:	89 ce                	mov    esi,ecx
c0017afe:	89 f0                	mov    eax,esi
c0017b00:	09 d8                	or     eax,ebx
c0017b02:	0f 84 9c 00 00 00    	je     c0017ba4 <FAT::allocateSwapfile(char const*, int)+0x130>
c0017b08:	83 ec 0c             	sub    esp,0xc
c0017b0b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017b12:	e8 91 32 ff ff       	call   c000ada8 <File::unlink()>
c0017b17:	83 c4 10             	add    esp,0x10
c0017b1a:	83 ec 08             	sub    esp,0x8
c0017b1d:	6a 12                	push   0x12
c0017b1f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017b26:	e8 05 31 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0017b2b:	83 c4 10             	add    esp,0x10
c0017b2e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017b35:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017b3b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017b42:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0017b49:	c1 e0 14             	shl    eax,0x14
c0017b4c:	83 ec 04             	sub    esp,0x4
c0017b4f:	6a 01                	push   0x1
c0017b51:	50                   	push   eax
c0017b52:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0017b59:	e8 c7 d5 fe ff       	call   c0005125 <f_expand>
c0017b5e:	83 c4 10             	add    esp,0x10
c0017b61:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017b68:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b6a:	83 c0 10             	add    eax,0x10
c0017b6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b6f:	83 ec 0c             	sub    esp,0xc
c0017b72:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017b76:	52                   	push   edx
c0017b77:	8d 54 24 30          	lea    edx,[esp+0x30]
c0017b7b:	52                   	push   edx
c0017b7c:	6a 00                	push   0x0
c0017b7e:	68 00 04 00 00       	push   0x400
c0017b83:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017b8a:	ff d0                	call   eax
c0017b8c:	83 c4 20             	add    esp,0x20
c0017b8f:	83 ec 0c             	sub    esp,0xc
c0017b92:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017b99:	e8 f0 30 ff ff       	call   c000ac8e <File::close()>
c0017b9e:	83 c4 10             	add    esp,0x10
c0017ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0017ba4:	83 ec 08             	sub    esp,0x8
c0017ba7:	6a 01                	push   0x1
c0017ba9:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017bb0:	e8 7b 30 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0017bb5:	83 c4 10             	add    esp,0x10
c0017bb8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017bbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bc1:	83 c0 0c             	add    eax,0xc
c0017bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bc6:	83 ec 0c             	sub    esp,0xc
c0017bc9:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017bcd:	52                   	push   edx
c0017bce:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0017bd2:	52                   	push   edx
c0017bd3:	6a 00                	push   0x0
c0017bd5:	6a 04                	push   0x4
c0017bd7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0017bde:	ff d0                	call   eax
c0017be0:	83 c4 20             	add    esp,0x20
c0017be3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0017bea:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0017bf0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0017bf7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0017bfe:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017c01:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0017c08:	83 ec 0c             	sub    esp,0xc
c0017c0b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0017c12:	e8 77 30 ff ff       	call   c000ac8e <File::close()>
c0017c17:	83 c4 10             	add    esp,0x10
c0017c1a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0017c21:	ba 00 00 00 00       	mov    edx,0x0
c0017c26:	81 c4 3c 04 00 00    	add    esp,0x43c
c0017c2c:	5b                   	pop    ebx
c0017c2d:	5e                   	pop    esi
c0017c2e:	5f                   	pop    edi
c0017c2f:	5d                   	pop    ebp
c0017c30:	c3                   	ret    
c0017c31:	90                   	nop
c0017c32:	66 90                	xchg   ax,ax

c0017c34 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0017c34:	57                   	push   edi
c0017c35:	56                   	push   esi
c0017c36:	53                   	push   ebx
c0017c37:	81 ec 50 02 00 00    	sub    esp,0x250
c0017c3d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0017c45:	74 0d                	je     c0017c54 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0017c47:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0017c4f:	75 0f                	jne    c0017c60 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0017c51:	8d 76 00             	lea    esi,[esi+0x0]
c0017c54:	b8 04 00 00 00       	mov    eax,0x4
c0017c59:	e9 36 01 00 00       	jmp    c0017d94 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017c5e:	66 90                	xchg   ax,ax
c0017c60:	83 ec 08             	sub    esp,0x8
c0017c63:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0017c6a:	50                   	push   eax
c0017c6b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0017c72:	e8 0c c9 fe ff       	call   c0004583 <f_readdir>
c0017c77:	83 c4 10             	add    esp,0x10
c0017c7a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0017c81:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0017c88:	83 ec 0c             	sub    esp,0xc
c0017c8b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017c92:	83 c0 16             	add    eax,0x16
c0017c95:	50                   	push   eax
c0017c96:	e8 95 88 fe ff       	call   c0000530 <strlen>
c0017c9b:	83 c4 10             	add    esp,0x10
c0017c9e:	ba 00 00 00 00       	mov    edx,0x0
c0017ca3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017ca7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017cab:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0017cb2:	25 ff 00 00 00       	and    eax,0xff
c0017cb7:	83 e0 10             	and    eax,0x10
c0017cba:	74 08                	je     c0017cc4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0017cbc:	b8 02 00 00 00       	mov    eax,0x2
c0017cc1:	eb 09                	jmp    c0017ccc <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0017cc3:	90                   	nop
c0017cc4:	b8 01 00 00 00       	mov    eax,0x1
c0017cc9:	8d 76 00             	lea    esi,[esi+0x0]
c0017ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017cd0:	83 ec 08             	sub    esp,0x8
c0017cd3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0017cda:	83 c0 16             	add    eax,0x16
c0017cdd:	50                   	push   eax
c0017cde:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017ce2:	83 c0 10             	add    eax,0x10
c0017ce5:	50                   	push   eax
c0017ce6:	e8 05 89 fe ff       	call   c00005f0 <strcpy>
c0017ceb:	83 c4 10             	add    esp,0x10
c0017cee:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0017cf5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0017cfc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017d00:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0017d07:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0017d0e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0017d15:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0017d1c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0017d23:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0017d2a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0017d31:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0017d38:	89 c6                	mov    esi,eax
c0017d3a:	89 d7                	mov    edi,edx
c0017d3c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017d3e:	89 c8                	mov    eax,ecx
c0017d40:	89 fa                	mov    edx,edi
c0017d42:	89 f3                	mov    ebx,esi
c0017d44:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0017d4b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0017d52:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0017d59:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0017d60:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0017d66:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0017d6d:	84 c0                	test   al,al
c0017d6f:	75 07                	jne    c0017d78 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0017d71:	b8 07 00 00 00       	mov    eax,0x7
c0017d76:	eb 1c                	jmp    c0017d94 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017d78:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0017d7f:	85 c0                	test   eax,eax
c0017d81:	75 09                	jne    c0017d8c <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0017d83:	b8 00 00 00 00       	mov    eax,0x0
c0017d88:	eb 0a                	jmp    c0017d94 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0017d8a:	66 90                	xchg   ax,ax
c0017d8c:	b8 01 00 00 00       	mov    eax,0x1
c0017d91:	8d 76 00             	lea    esi,[esi+0x0]
c0017d94:	81 c4 50 02 00 00    	add    esp,0x250
c0017d9a:	5b                   	pop    ebx
c0017d9b:	5e                   	pop    esi
c0017d9c:	5f                   	pop    edi
c0017d9d:	c3                   	ret    
c0017d9e:	66 90                	xchg   ax,ax

c0017da0 <FAT::read(void*, unsigned long, void*, int*)>:
c0017da0:	83 ec 1c             	sub    esp,0x1c
c0017da3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017da8:	74 0a                	je     c0017db4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0017daa:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0017daf:	75 0b                	jne    c0017dbc <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0017db1:	8d 76 00             	lea    esi,[esi+0x0]
c0017db4:	b8 04 00 00 00       	mov    eax,0x4
c0017db9:	eb 41                	jmp    c0017dfc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0017dbb:	90                   	nop
c0017dbc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017dc0:	50                   	push   eax
c0017dc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017dc9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017dcd:	e8 06 c0 fe ff       	call   c0003dd8 <f_read>
c0017dd2:	83 c4 10             	add    esp,0x10
c0017dd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017dd9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017ddd:	89 c2                	mov    edx,eax
c0017ddf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017de3:	89 10                	mov    DWORD PTR [eax],edx
c0017de5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017de9:	85 c0                	test   eax,eax
c0017deb:	75 07                	jne    c0017df4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0017ded:	b8 00 00 00 00       	mov    eax,0x0
c0017df2:	eb 08                	jmp    c0017dfc <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0017df4:	b8 01 00 00 00       	mov    eax,0x1
c0017df9:	8d 76 00             	lea    esi,[esi+0x0]
c0017dfc:	83 c4 1c             	add    esp,0x1c
c0017dff:	c3                   	ret    

c0017e00 <FAT::write(void*, unsigned long, void*, int*)>:
c0017e00:	83 ec 1c             	sub    esp,0x1c
c0017e03:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017e08:	74 0a                	je     c0017e14 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0017e0a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0017e0f:	75 0b                	jne    c0017e1c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0017e11:	8d 76 00             	lea    esi,[esi+0x0]
c0017e14:	b8 04 00 00 00       	mov    eax,0x4
c0017e19:	eb 41                	jmp    c0017e5c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0017e1b:	90                   	nop
c0017e1c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017e20:	50                   	push   eax
c0017e21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017e29:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017e2d:	e8 a5 c1 fe ff       	call   c0003fd7 <f_write>
c0017e32:	83 c4 10             	add    esp,0x10
c0017e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e3d:	89 c2                	mov    edx,eax
c0017e3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e43:	89 10                	mov    DWORD PTR [eax],edx
c0017e45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e49:	85 c0                	test   eax,eax
c0017e4b:	75 07                	jne    c0017e54 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0017e4d:	b8 00 00 00 00       	mov    eax,0x0
c0017e52:	eb 08                	jmp    c0017e5c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0017e54:	b8 01 00 00 00       	mov    eax,0x1
c0017e59:	8d 76 00             	lea    esi,[esi+0x0]
c0017e5c:	83 c4 1c             	add    esp,0x1c
c0017e5f:	c3                   	ret    

c0017e60 <FAT::close(void*)>:
c0017e60:	83 ec 1c             	sub    esp,0x1c
c0017e63:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017e68:	75 0a                	jne    c0017e74 <FAT::close(void*)+0x14>
c0017e6a:	b8 04 00 00 00       	mov    eax,0x4
c0017e6f:	eb 3f                	jmp    c0017eb0 <FAT::close(void*)+0x50>
c0017e71:	8d 76 00             	lea    esi,[esi+0x0]
c0017e74:	83 ec 0c             	sub    esp,0xc
c0017e77:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017e7b:	e8 40 c4 fe ff       	call   c00042c0 <f_close>
c0017e80:	83 c4 10             	add    esp,0x10
c0017e83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017e87:	83 ec 0c             	sub    esp,0xc
c0017e8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017e8e:	e8 e2 f9 fe ff       	call   c0007875 <free>
c0017e93:	83 c4 10             	add    esp,0x10
c0017e96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e9a:	85 c0                	test   eax,eax
c0017e9c:	75 0a                	jne    c0017ea8 <FAT::close(void*)+0x48>
c0017e9e:	b8 00 00 00 00       	mov    eax,0x0
c0017ea3:	eb 0b                	jmp    c0017eb0 <FAT::close(void*)+0x50>
c0017ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ea8:	b8 01 00 00 00       	mov    eax,0x1
c0017ead:	8d 76 00             	lea    esi,[esi+0x0]
c0017eb0:	83 c4 1c             	add    esp,0x1c
c0017eb3:	c3                   	ret    

c0017eb4 <FAT::closeDir(void*)>:
c0017eb4:	83 ec 1c             	sub    esp,0x1c
c0017eb7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017ebc:	75 0a                	jne    c0017ec8 <FAT::closeDir(void*)+0x14>
c0017ebe:	b8 04 00 00 00       	mov    eax,0x4
c0017ec3:	eb 3f                	jmp    c0017f04 <FAT::closeDir(void*)+0x50>
c0017ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0017ec8:	83 ec 0c             	sub    esp,0xc
c0017ecb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017ecf:	e8 8d c6 fe ff       	call   c0004561 <f_closedir>
c0017ed4:	83 c4 10             	add    esp,0x10
c0017ed7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017edb:	83 ec 0c             	sub    esp,0xc
c0017ede:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017ee2:	e8 8e f9 fe ff       	call   c0007875 <free>
c0017ee7:	83 c4 10             	add    esp,0x10
c0017eea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017eee:	85 c0                	test   eax,eax
c0017ef0:	75 0a                	jne    c0017efc <FAT::closeDir(void*)+0x48>
c0017ef2:	b8 00 00 00 00       	mov    eax,0x0
c0017ef7:	eb 0b                	jmp    c0017f04 <FAT::closeDir(void*)+0x50>
c0017ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0017efc:	b8 01 00 00 00       	mov    eax,0x1
c0017f01:	8d 76 00             	lea    esi,[esi+0x0]
c0017f04:	83 c4 1c             	add    esp,0x1c
c0017f07:	c3                   	ret    

c0017f08 <FAT::seek(void*, unsigned long long)>:
c0017f08:	83 ec 2c             	sub    esp,0x2c
c0017f0b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017f0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017f17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017f1b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0017f20:	75 0a                	jne    c0017f2c <FAT::seek(void*, unsigned long long)+0x24>
c0017f22:	b8 04 00 00 00       	mov    eax,0x4
c0017f27:	eb 33                	jmp    c0017f5c <FAT::seek(void*, unsigned long long)+0x54>
c0017f29:	8d 76 00             	lea    esi,[esi+0x0]
c0017f2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f30:	83 ec 08             	sub    esp,0x8
c0017f33:	50                   	push   eax
c0017f34:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017f38:	e8 b2 c3 fe ff       	call   c00042ef <f_lseek>
c0017f3d:	83 c4 10             	add    esp,0x10
c0017f40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017f44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f48:	85 c0                	test   eax,eax
c0017f4a:	75 08                	jne    c0017f54 <FAT::seek(void*, unsigned long long)+0x4c>
c0017f4c:	b8 00 00 00 00       	mov    eax,0x0
c0017f51:	eb 09                	jmp    c0017f5c <FAT::seek(void*, unsigned long long)+0x54>
c0017f53:	90                   	nop
c0017f54:	b8 01 00 00 00       	mov    eax,0x1
c0017f59:	8d 76 00             	lea    esi,[esi+0x0]
c0017f5c:	83 c4 2c             	add    esp,0x2c
c0017f5f:	c3                   	ret    

c0017f60 <fatWrapperReadDisk>:
c0017f60:	53                   	push   ebx
c0017f61:	83 ec 18             	sub    esp,0x18
c0017f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f68:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017f6c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017f70:	25 ff 00 00 00       	and    eax,0xff
c0017f75:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0017f7c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017f80:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f84:	ba 00 00 00 00       	mov    edx,0x0
c0017f89:	83 ec 0c             	sub    esp,0xc
c0017f8c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017f90:	53                   	push   ebx
c0017f91:	52                   	push   edx
c0017f92:	50                   	push   eax
c0017f93:	51                   	push   ecx
c0017f94:	e8 a5 4d ff ff       	call   c000cd3e <LogicalDisk::read(unsigned long long, int, void*)>
c0017f99:	83 c4 20             	add    esp,0x20
c0017f9c:	83 c4 18             	add    esp,0x18
c0017f9f:	5b                   	pop    ebx
c0017fa0:	c3                   	ret    
c0017fa1:	8d 76 00             	lea    esi,[esi+0x0]

c0017fa4 <fatWrapperWriteDisk>:
c0017fa4:	53                   	push   ebx
c0017fa5:	83 ec 18             	sub    esp,0x18
c0017fa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fac:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017fb0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017fb4:	25 ff 00 00 00       	and    eax,0xff
c0017fb9:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0017fc0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017fc4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fc8:	ba 00 00 00 00       	mov    edx,0x0
c0017fcd:	83 ec 0c             	sub    esp,0xc
c0017fd0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017fd4:	53                   	push   ebx
c0017fd5:	52                   	push   edx
c0017fd6:	50                   	push   eax
c0017fd7:	51                   	push   ecx
c0017fd8:	e8 cd 4d ff ff       	call   c000cdaa <LogicalDisk::write(unsigned long long, int, void*)>
c0017fdd:	83 c4 20             	add    esp,0x20
c0017fe0:	83 c4 18             	add    esp,0x18
c0017fe3:	5b                   	pop    ebx
c0017fe4:	c3                   	ret    
c0017fe5:	8d 76 00             	lea    esi,[esi+0x0]

c0017fe8 <fatWrapperIoctl>:
c0017fe8:	53                   	push   ebx
c0017fe9:	83 ec 28             	sub    esp,0x28
c0017fec:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017ff0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ff4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017ff8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017ffc:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0018001:	75 35                	jne    c0018038 <fatWrapperIoctl+0x50>
c0018003:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018007:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001800b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001800f:	25 ff 00 00 00       	and    eax,0xff
c0018014:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c001801b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018021:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018027:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001802b:	66 89 02             	mov    WORD PTR [edx],ax
c001802e:	b8 00 00 00 00       	mov    eax,0x0
c0018033:	e9 c4 00 00 00       	jmp    c00180fc <fatWrapperIoctl+0x114>
c0018038:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001803d:	75 75                	jne    c00180b4 <fatWrapperIoctl+0xcc>
c001803f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018043:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018047:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001804b:	25 ff 00 00 00       	and    eax,0xff
c0018050:	8b 04 85 20 64 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9be0]
c0018057:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001805d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018063:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0018069:	89 c8                	mov    eax,ecx
c001806b:	89 da                	mov    edx,ebx
c001806d:	0f a4 c2 0a          	shld   edx,eax,0xa
c0018071:	c1 e0 0a             	shl    eax,0xa
c0018074:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018078:	81 e1 ff 00 00 00    	and    ecx,0xff
c001807e:	8b 0c 8d 20 64 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd9be0]
c0018085:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001808b:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0018091:	89 cb                	mov    ebx,ecx
c0018093:	c1 fb 1f             	sar    ebx,0x1f
c0018096:	53                   	push   ebx
c0018097:	51                   	push   ecx
c0018098:	52                   	push   edx
c0018099:	50                   	push   eax
c001809a:	e8 11 5a 00 00       	call   c001dab0 <__udivdi3>
c001809f:	83 c4 10             	add    esp,0x10
c00180a2:	89 c2                	mov    edx,eax
c00180a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180a8:	89 10                	mov    DWORD PTR [eax],edx
c00180aa:	b8 00 00 00 00       	mov    eax,0x0
c00180af:	eb 4b                	jmp    c00180fc <fatWrapperIoctl+0x114>
c00180b1:	8d 76 00             	lea    esi,[esi+0x0]
c00180b4:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00180b9:	75 09                	jne    c00180c4 <fatWrapperIoctl+0xdc>
c00180bb:	b8 00 00 00 00       	mov    eax,0x0
c00180c0:	eb 3a                	jmp    c00180fc <fatWrapperIoctl+0x114>
c00180c2:	66 90                	xchg   ax,ax
c00180c4:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00180c9:	75 19                	jne    c00180e4 <fatWrapperIoctl+0xfc>
c00180cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00180cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00180d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180d7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00180dd:	b8 00 00 00 00       	mov    eax,0x0
c00180e2:	eb 18                	jmp    c00180fc <fatWrapperIoctl+0x114>
c00180e4:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00180e9:	75 09                	jne    c00180f4 <fatWrapperIoctl+0x10c>
c00180eb:	b8 00 00 00 00       	mov    eax,0x0
c00180f0:	eb 0a                	jmp    c00180fc <fatWrapperIoctl+0x114>
c00180f2:	66 90                	xchg   ax,ax
c00180f4:	b8 04 00 00 00       	mov    eax,0x4
c00180f9:	8d 76 00             	lea    esi,[esi+0x0]
c00180fc:	83 c4 28             	add    esp,0x28
c00180ff:	5b                   	pop    ebx
c0018100:	c3                   	ret    
c0018101:	90                   	nop
c0018102:	66 90                	xchg   ax,ax

c0018104 <FAT::FAT()>:
c0018104:	83 ec 1c             	sub    esp,0x1c
c0018107:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001810b:	83 ec 0c             	sub    esp,0xc
c001810e:	50                   	push   eax
c001810f:	e8 08 28 ff ff       	call   c000a91c <Filesystem::Filesystem()>
c0018114:	83 c4 10             	add    esp,0x10
c0018117:	ba 34 0a 02 c0       	mov    edx,0xc0020a34
c001811c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018120:	89 10                	mov    DWORD PTR [eax],edx
c0018122:	c7 05 20 72 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027220,0x0
c001812c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0018134:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0018139:	7f 15                	jg     c0018150 <FAT::FAT()+0x4c>
c001813b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001813f:	c7 04 85 40 72 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd8dc0],0xffffffff
c001814a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001814e:	eb e4                	jmp    c0018134 <FAT::FAT()+0x30>
c0018150:	90                   	nop
c0018151:	83 c4 1c             	add    esp,0x1c
c0018154:	c3                   	ret    
c0018155:	90                   	nop
c0018156:	66 90                	xchg   ax,ax

c0018158 <FAT::fixFilepath(char*)>:
c0018158:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001815c:	8a 00                	mov    al,BYTE PTR [eax]
c001815e:	3c 40                	cmp    al,0x40
c0018160:	7e 2e                	jle    c0018190 <FAT::fixFilepath(char*)+0x38>
c0018162:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018166:	8a 00                	mov    al,BYTE PTR [eax]
c0018168:	83 e8 41             	sub    eax,0x41
c001816b:	88 c2                	mov    dl,al
c001816d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018171:	88 10                	mov    BYTE PTR [eax],dl
c0018173:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018177:	8a 00                	mov    al,BYTE PTR [eax]
c0018179:	0f be c0             	movsx  eax,al
c001817c:	8b 04 85 40 72 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8dc0]
c0018183:	83 c0 30             	add    eax,0x30
c0018186:	88 c2                	mov    dl,al
c0018188:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001818c:	88 10                	mov    BYTE PTR [eax],dl
c001818e:	66 90                	xchg   ax,ax
c0018190:	90                   	nop
c0018191:	c3                   	ret    
c0018192:	66 90                	xchg   ax,ax

c0018194 <FAT::open(char const*, void**, FileOpenMode)>:
c0018194:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001819a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00181a2:	74 0c                	je     c00181b0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00181a4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00181ac:	75 0e                	jne    c00181bc <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00181ae:	66 90                	xchg   ax,ax
c00181b0:	b8 04 00 00 00       	mov    eax,0x4
c00181b5:	e9 0a 01 00 00       	jmp    c00182c4 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00181ba:	66 90                	xchg   ax,ax
c00181bc:	83 ec 08             	sub    esp,0x8
c00181bf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00181c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00181ca:	50                   	push   eax
c00181cb:	e8 20 84 fe ff       	call   c00005f0 <strcpy>
c00181d0:	83 c4 10             	add    esp,0x10
c00181d3:	83 ec 08             	sub    esp,0x8
c00181d6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00181da:	50                   	push   eax
c00181db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00181e2:	e8 71 ff ff ff       	call   c0018158 <FAT::fixFilepath(char*)>
c00181e7:	83 c4 10             	add    esp,0x10
c00181ea:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00181f2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00181f9:	83 e0 01             	and    eax,0x1
c00181fc:	74 0a                	je     c0018208 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c00181fe:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0018206:	66 90                	xchg   ax,ax
c0018208:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001820f:	83 e0 04             	and    eax,0x4
c0018212:	74 10                	je     c0018224 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0018214:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001821c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0018224:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001822b:	83 e0 02             	and    eax,0x2
c001822e:	74 08                	je     c0018238 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0018230:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0018238:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001823f:	83 e0 08             	and    eax,0x8
c0018242:	74 08                	je     c001824c <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0018244:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001824c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0018253:	83 e0 10             	and    eax,0x10
c0018256:	74 08                	je     c0018260 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0018258:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0018260:	83 ec 0c             	sub    esp,0xc
c0018263:	68 28 02 00 00       	push   0x228
c0018268:	e8 f8 f5 fe ff       	call   c0007865 <malloc>
c001826d:	83 c4 10             	add    esp,0x10
c0018270:	89 c2                	mov    edx,eax
c0018272:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018279:	89 10                	mov    DWORD PTR [eax],edx
c001827b:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0018282:	31 d2                	xor    edx,edx
c0018284:	88 c2                	mov    dl,al
c0018286:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001828d:	8b 00                	mov    eax,DWORD PTR [eax]
c001828f:	83 ec 04             	sub    esp,0x4
c0018292:	52                   	push   edx
c0018293:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018297:	52                   	push   edx
c0018298:	50                   	push   eax
c0018299:	e8 6f b8 fe ff       	call   c0003b0d <f_open>
c001829e:	83 c4 10             	add    esp,0x10
c00182a1:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00182a8:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00182b0:	74 0a                	je     c00182bc <FAT::open(char const*, void**, FileOpenMode)+0x128>
c00182b2:	b8 01 00 00 00       	mov    eax,0x1
c00182b7:	eb 0b                	jmp    c00182c4 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c00182b9:	8d 76 00             	lea    esi,[esi+0x0]
c00182bc:	b8 00 00 00 00       	mov    eax,0x0
c00182c1:	8d 76 00             	lea    esi,[esi+0x0]
c00182c4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00182ca:	c3                   	ret    
c00182cb:	90                   	nop

c00182cc <FAT::openDir(char const*, void**)>:
c00182cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00182d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00182da:	74 0c                	je     c00182e8 <FAT::openDir(char const*, void**)+0x1c>
c00182dc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00182e4:	75 0e                	jne    c00182f4 <FAT::openDir(char const*, void**)+0x28>
c00182e6:	66 90                	xchg   ax,ax
c00182e8:	b8 04 00 00 00       	mov    eax,0x4
c00182ed:	e9 82 00 00 00       	jmp    c0018374 <FAT::openDir(char const*, void**)+0xa8>
c00182f2:	66 90                	xchg   ax,ax
c00182f4:	83 ec 08             	sub    esp,0x8
c00182f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00182fe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018302:	50                   	push   eax
c0018303:	e8 e8 82 fe ff       	call   c00005f0 <strcpy>
c0018308:	83 c4 10             	add    esp,0x10
c001830b:	83 ec 08             	sub    esp,0x8
c001830e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018312:	50                   	push   eax
c0018313:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001831a:	e8 39 fe ff ff       	call   c0018158 <FAT::fixFilepath(char*)>
c001831f:	83 c4 10             	add    esp,0x10
c0018322:	83 ec 0c             	sub    esp,0xc
c0018325:	6a 30                	push   0x30
c0018327:	e8 39 f5 fe ff       	call   c0007865 <malloc>
c001832c:	83 c4 10             	add    esp,0x10
c001832f:	89 c2                	mov    edx,eax
c0018331:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018338:	89 10                	mov    DWORD PTR [eax],edx
c001833a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0018341:	8b 00                	mov    eax,DWORD PTR [eax]
c0018343:	83 ec 08             	sub    esp,0x8
c0018346:	8d 54 24 14          	lea    edx,[esp+0x14]
c001834a:	52                   	push   edx
c001834b:	50                   	push   eax
c001834c:	e8 45 c1 fe ff       	call   c0004496 <f_opendir>
c0018351:	83 c4 10             	add    esp,0x10
c0018354:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001835b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0018363:	74 07                	je     c001836c <FAT::openDir(char const*, void**)+0xa0>
c0018365:	b8 01 00 00 00       	mov    eax,0x1
c001836a:	eb 08                	jmp    c0018374 <FAT::openDir(char const*, void**)+0xa8>
c001836c:	b8 00 00 00 00       	mov    eax,0x0
c0018371:	8d 76 00             	lea    esi,[esi+0x0]
c0018374:	81 c4 1c 01 00 00    	add    esp,0x11c
c001837a:	c3                   	ret    
c001837b:	90                   	nop

c001837c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001837c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0018382:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001838a:	75 0c                	jne    c0018398 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001838c:	b8 04 00 00 00       	mov    eax,0x4
c0018391:	e9 d6 00 00 00       	jmp    c001846c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018396:	66 90                	xchg   ax,ax
c0018398:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00183a0:	75 0a                	jne    c00183ac <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00183a2:	b8 04 00 00 00       	mov    eax,0x4
c00183a7:	e9 c0 00 00 00       	jmp    c001846c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00183ac:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00183b4:	75 0a                	jne    c00183c0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c00183b6:	b8 04 00 00 00       	mov    eax,0x4
c00183bb:	e9 ac 00 00 00       	jmp    c001846c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00183c0:	83 ec 08             	sub    esp,0x8
c00183c3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00183ca:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00183d1:	50                   	push   eax
c00183d2:	e8 19 82 fe ff       	call   c00005f0 <strcpy>
c00183d7:	83 c4 10             	add    esp,0x10
c00183da:	83 ec 08             	sub    esp,0x8
c00183dd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00183e4:	50                   	push   eax
c00183e5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00183ec:	e8 67 fd ff ff       	call   c0018158 <FAT::fixFilepath(char*)>
c00183f1:	83 c4 10             	add    esp,0x10
c00183f4:	83 ec 08             	sub    esp,0x8
c00183f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00183fb:	50                   	push   eax
c00183fc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0018403:	50                   	push   eax
c0018404:	e8 0c c2 fe ff       	call   c0004615 <f_stat>
c0018409:	83 c4 10             	add    esp,0x10
c001840c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0018413:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001841a:	85 c0                	test   eax,eax
c001841c:	74 0a                	je     c0018428 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001841e:	83 f8 04             	cmp    eax,0x4
c0018421:	74 39                	je     c001845c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0018423:	eb 3f                	jmp    c0018464 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0018425:	8d 76 00             	lea    esi,[esi+0x0]
c0018428:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001842c:	25 ff 00 00 00       	and    eax,0xff
c0018431:	83 e0 10             	and    eax,0x10
c0018434:	0f 95 c2             	setne  dl
c0018437:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001843e:	88 10                	mov    BYTE PTR [eax],dl
c0018440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018444:	ba 00 00 00 00       	mov    edx,0x0
c0018449:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0018450:	89 01                	mov    DWORD PTR [ecx],eax
c0018452:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018455:	b8 00 00 00 00       	mov    eax,0x0
c001845a:	eb 10                	jmp    c001846c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001845c:	b8 02 00 00 00       	mov    eax,0x2
c0018461:	eb 09                	jmp    c001846c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0018463:	90                   	nop
c0018464:	b8 01 00 00 00       	mov    eax,0x1
c0018469:	8d 76 00             	lea    esi,[esi+0x0]
c001846c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0018472:	c3                   	ret    
c0018473:	90                   	nop

c0018474 <FAT::unlink(char const*)>:
c0018474:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001847a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0018482:	75 08                	jne    c001848c <FAT::unlink(char const*)+0x18>
c0018484:	b8 04 00 00 00       	mov    eax,0x4
c0018489:	eb 61                	jmp    c00184ec <FAT::unlink(char const*)+0x78>
c001848b:	90                   	nop
c001848c:	83 ec 08             	sub    esp,0x8
c001848f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0018496:	8d 44 24 18          	lea    eax,[esp+0x18]
c001849a:	50                   	push   eax
c001849b:	e8 50 81 fe ff       	call   c00005f0 <strcpy>
c00184a0:	83 c4 10             	add    esp,0x10
c00184a3:	83 ec 08             	sub    esp,0x8
c00184a6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00184aa:	50                   	push   eax
c00184ab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00184b2:	e8 a1 fc ff ff       	call   c0018158 <FAT::fixFilepath(char*)>
c00184b7:	83 c4 10             	add    esp,0x10
c00184ba:	83 ec 0c             	sub    esp,0xc
c00184bd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00184c1:	50                   	push   eax
c00184c2:	e8 b3 c3 fe ff       	call   c000487a <f_unlink>
c00184c7:	83 c4 10             	add    esp,0x10
c00184ca:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00184d1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00184d8:	85 c0                	test   eax,eax
c00184da:	75 08                	jne    c00184e4 <FAT::unlink(char const*)+0x70>
c00184dc:	b8 00 00 00 00       	mov    eax,0x0
c00184e1:	eb 09                	jmp    c00184ec <FAT::unlink(char const*)+0x78>
c00184e3:	90                   	nop
c00184e4:	b8 01 00 00 00       	mov    eax,0x1
c00184e9:	8d 76 00             	lea    esi,[esi+0x0]
c00184ec:	81 c4 1c 01 00 00    	add    esp,0x11c
c00184f2:	c3                   	ret    
c00184f3:	90                   	nop

c00184f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00184f4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00184fa:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0018501:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0018508:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001850c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018510:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018518:	75 0a                	jne    c0018524 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001851a:	b8 04 00 00 00       	mov    eax,0x4
c001851f:	e9 54 01 00 00       	jmp    c0018678 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0018524:	83 ec 08             	sub    esp,0x8
c0018527:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001852e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018532:	50                   	push   eax
c0018533:	e8 b8 80 fe ff       	call   c00005f0 <strcpy>
c0018538:	83 c4 10             	add    esp,0x10
c001853b:	83 ec 08             	sub    esp,0x8
c001853e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018542:	50                   	push   eax
c0018543:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001854a:	e8 09 fc ff ff       	call   c0018158 <FAT::fixFilepath(char*)>
c001854f:	83 c4 10             	add    esp,0x10
c0018552:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001855a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0018562:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018566:	25 ff 00 00 00       	and    eax,0xff
c001856b:	83 e0 01             	and    eax,0x1
c001856e:	74 08                	je     c0018578 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c0018570:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0018578:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001857c:	25 ff 00 00 00       	and    eax,0xff
c0018581:	83 e0 02             	and    eax,0x2
c0018584:	74 0a                	je     c0018590 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0018586:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001858e:	66 90                	xchg   ax,ax
c0018590:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018594:	25 ff 00 00 00       	and    eax,0xff
c0018599:	83 e0 04             	and    eax,0x4
c001859c:	74 0a                	je     c00185a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001859e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c00185a6:	66 90                	xchg   ax,ax
c00185a8:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00185ac:	25 ff 00 00 00       	and    eax,0xff
c00185b1:	83 e0 08             	and    eax,0x8
c00185b4:	74 0a                	je     c00185c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c00185b6:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c00185be:	66 90                	xchg   ax,ax
c00185c0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00185c4:	25 ff 00 00 00       	and    eax,0xff
c00185c9:	83 e0 01             	and    eax,0x1
c00185cc:	74 0a                	je     c00185d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c00185ce:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00185d6:	66 90                	xchg   ax,ax
c00185d8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00185dc:	25 ff 00 00 00       	and    eax,0xff
c00185e1:	83 e0 02             	and    eax,0x2
c00185e4:	74 0a                	je     c00185f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c00185e6:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00185ee:	66 90                	xchg   ax,ax
c00185f0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00185f4:	25 ff 00 00 00       	and    eax,0xff
c00185f9:	83 e0 04             	and    eax,0x4
c00185fc:	74 0a                	je     c0018608 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c00185fe:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0018606:	66 90                	xchg   ax,ax
c0018608:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001860c:	25 ff 00 00 00       	and    eax,0xff
c0018611:	83 e0 08             	and    eax,0x8
c0018614:	74 0a                	je     c0018620 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0018616:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001861e:	66 90                	xchg   ax,ax
c0018620:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018627:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001862e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0018635:	31 d2                	xor    edx,edx
c0018637:	88 c2                	mov    dl,al
c0018639:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0018640:	25 ff 00 00 00       	and    eax,0xff
c0018645:	83 ec 04             	sub    esp,0x4
c0018648:	52                   	push   edx
c0018649:	50                   	push   eax
c001864a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001864e:	50                   	push   eax
c001864f:	e8 99 c6 fe ff       	call   c0004ced <f_chmod>
c0018654:	83 c4 10             	add    esp,0x10
c0018657:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001865e:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0018665:	85 c0                	test   eax,eax
c0018667:	75 07                	jne    c0018670 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0018669:	b8 00 00 00 00       	mov    eax,0x0
c001866e:	eb 08                	jmp    c0018678 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c0018670:	b8 01 00 00 00       	mov    eax,0x1
c0018675:	8d 76 00             	lea    esi,[esi+0x0]
c0018678:	81 c4 2c 01 00 00    	add    esp,0x12c
c001867e:	c3                   	ret    
c001867f:	90                   	nop

c0018680 <FAT::rename(char const*, char const*)>:
c0018680:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0018686:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001868e:	74 0c                	je     c001869c <FAT::rename(char const*, char const*)+0x1c>
c0018690:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0018698:	75 0e                	jne    c00186a8 <FAT::rename(char const*, char const*)+0x28>
c001869a:	66 90                	xchg   ax,ax
c001869c:	b8 04 00 00 00       	mov    eax,0x4
c00186a1:	e9 9e 00 00 00       	jmp    c0018744 <FAT::rename(char const*, char const*)+0xc4>
c00186a6:	66 90                	xchg   ax,ax
c00186a8:	83 ec 08             	sub    esp,0x8
c00186ab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00186b2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00186b9:	50                   	push   eax
c00186ba:	e8 31 7f fe ff       	call   c00005f0 <strcpy>
c00186bf:	83 c4 10             	add    esp,0x10
c00186c2:	83 ec 08             	sub    esp,0x8
c00186c5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00186cc:	50                   	push   eax
c00186cd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00186d4:	e8 7f fa ff ff       	call   c0018158 <FAT::fixFilepath(char*)>
c00186d9:	83 c4 10             	add    esp,0x10
c00186dc:	83 ec 08             	sub    esp,0x8
c00186df:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00186e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00186ea:	50                   	push   eax
c00186eb:	e8 00 7f fe ff       	call   c00005f0 <strcpy>
c00186f0:	83 c4 10             	add    esp,0x10
c00186f3:	83 ec 08             	sub    esp,0x8
c00186f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00186fa:	50                   	push   eax
c00186fb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0018702:	e8 51 fa ff ff       	call   c0018158 <FAT::fixFilepath(char*)>
c0018707:	83 c4 10             	add    esp,0x10
c001870a:	83 ec 08             	sub    esp,0x8
c001870d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018711:	50                   	push   eax
c0018712:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0018719:	50                   	push   eax
c001871a:	e8 18 c4 fe ff       	call   c0004b37 <f_rename>
c001871f:	83 c4 10             	add    esp,0x10
c0018722:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0018729:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0018730:	85 c0                	test   eax,eax
c0018732:	75 08                	jne    c001873c <FAT::rename(char const*, char const*)+0xbc>
c0018734:	b8 00 00 00 00       	mov    eax,0x0
c0018739:	eb 09                	jmp    c0018744 <FAT::rename(char const*, char const*)+0xc4>
c001873b:	90                   	nop
c001873c:	b8 01 00 00 00       	mov    eax,0x1
c0018741:	8d 76 00             	lea    esi,[esi+0x0]
c0018744:	81 c4 1c 02 00 00    	add    esp,0x21c
c001874a:	c3                   	ret    
c001874b:	90                   	nop

c001874c <FAT::mkdir(char const*)>:
c001874c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018752:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001875a:	75 08                	jne    c0018764 <FAT::mkdir(char const*)+0x18>
c001875c:	b8 04 00 00 00       	mov    eax,0x4
c0018761:	eb 61                	jmp    c00187c4 <FAT::mkdir(char const*)+0x78>
c0018763:	90                   	nop
c0018764:	83 ec 08             	sub    esp,0x8
c0018767:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001876e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018772:	50                   	push   eax
c0018773:	e8 78 7e fe ff       	call   c00005f0 <strcpy>
c0018778:	83 c4 10             	add    esp,0x10
c001877b:	83 ec 08             	sub    esp,0x8
c001877e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018782:	50                   	push   eax
c0018783:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001878a:	e8 c9 f9 ff ff       	call   c0018158 <FAT::fixFilepath(char*)>
c001878f:	83 c4 10             	add    esp,0x10
c0018792:	83 ec 0c             	sub    esp,0xc
c0018795:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018799:	50                   	push   eax
c001879a:	e8 fd c1 fe ff       	call   c000499c <f_mkdir>
c001879f:	83 c4 10             	add    esp,0x10
c00187a2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00187a9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00187b0:	85 c0                	test   eax,eax
c00187b2:	75 08                	jne    c00187bc <FAT::mkdir(char const*)+0x70>
c00187b4:	b8 00 00 00 00       	mov    eax,0x0
c00187b9:	eb 09                	jmp    c00187c4 <FAT::mkdir(char const*)+0x78>
c00187bb:	90                   	nop
c00187bc:	b8 01 00 00 00       	mov    eax,0x1
c00187c1:	8d 76 00             	lea    esi,[esi+0x0]
c00187c4:	81 c4 1c 01 00 00    	add    esp,0x11c
c00187ca:	c3                   	ret    
c00187cb:	90                   	nop

c00187cc <FAT::exists(char const*)>:
c00187cc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00187d2:	83 ec 08             	sub    esp,0x8
c00187d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00187dc:	8d 44 24 10          	lea    eax,[esp+0x10]
c00187e0:	50                   	push   eax
c00187e1:	e8 0a 7e fe ff       	call   c00005f0 <strcpy>
c00187e6:	83 c4 10             	add    esp,0x10
c00187e9:	83 ec 08             	sub    esp,0x8
c00187ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00187f0:	50                   	push   eax
c00187f1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00187f8:	e8 5b f9 ff ff       	call   c0018158 <FAT::fixFilepath(char*)>
c00187fd:	83 c4 10             	add    esp,0x10
c0018800:	83 ec 08             	sub    esp,0x8
c0018803:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001880a:	50                   	push   eax
c001880b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001880f:	50                   	push   eax
c0018810:	e8 00 be fe ff       	call   c0004615 <f_stat>
c0018815:	83 c4 10             	add    esp,0x10
c0018818:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001881f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0018826:	85 c0                	test   eax,eax
c0018828:	75 06                	jne    c0018830 <FAT::exists(char const*)+0x64>
c001882a:	b0 01                	mov    al,0x1
c001882c:	eb 06                	jmp    c0018834 <FAT::exists(char const*)+0x68>
c001882e:	66 90                	xchg   ax,ax
c0018830:	b0 00                	mov    al,0x0
c0018832:	66 90                	xchg   ax,ax
c0018834:	81 c4 2c 02 00 00    	add    esp,0x22c
c001883a:	c3                   	ret    
c001883b:	90                   	nop

c001883c <isoReadDiscSectorHelper>:
c001883c:	83 ec 2c             	sub    esp,0x2c
c001883f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018843:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018847:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001884c:	83 e8 41             	sub    eax,0x41
c001884f:	8b 0c 85 20 64 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9be0]
c0018856:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001885a:	ba 00 00 00 00       	mov    edx,0x0
c001885f:	83 ec 0c             	sub    esp,0xc
c0018862:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018866:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001886a:	52                   	push   edx
c001886b:	50                   	push   eax
c001886c:	51                   	push   ecx
c001886d:	e8 cc 44 ff ff       	call   c000cd3e <LogicalDisk::read(unsigned long long, int, void*)>
c0018872:	83 c4 20             	add    esp,0x20
c0018875:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018879:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001887e:	74 0c                	je     c001888c <isoReadDiscSectorHelper+0x50>
c0018880:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018884:	c1 e0 0b             	shl    eax,0xb
c0018887:	eb 0b                	jmp    c0018894 <isoReadDiscSectorHelper+0x58>
c0018889:	8d 76 00             	lea    esi,[esi+0x0]
c001888c:	b8 00 00 00 00       	mov    eax,0x0
c0018891:	8d 76 00             	lea    esi,[esi+0x0]
c0018894:	83 c4 2c             	add    esp,0x2c
c0018897:	c3                   	ret    

c0018898 <iso_kprintf>:
c0018898:	83 ec 0c             	sub    esp,0xc
c001889b:	83 ec 08             	sub    esp,0x8
c001889e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00188a2:	68 41 04 02 c0       	push   0xc0020441
c00188a7:	e8 4e 1d ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00188ac:	83 c4 10             	add    esp,0x10
c00188af:	90                   	nop
c00188b0:	83 c4 0c             	add    esp,0xc
c00188b3:	c3                   	ret    

c00188b4 <iso_kprintfd>:
c00188b4:	83 ec 0c             	sub    esp,0xc
c00188b7:	83 ec 08             	sub    esp,0x8
c00188ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00188be:	68 3b f5 01 c0       	push   0xc001f53b
c00188c3:	e8 32 1d ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00188c8:	83 c4 10             	add    esp,0x10
c00188cb:	90                   	nop
c00188cc:	83 c4 0c             	add    esp,0xc
c00188cf:	c3                   	ret    

c00188d0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00188d0:	b8 08 00 00 00       	mov    eax,0x8
c00188d5:	c3                   	ret    

c00188d6 <ISO9660::getName()>:
c00188d6:	b8 94 0a 02 c0       	mov    eax,0xc0020a94
c00188db:	c3                   	ret    

c00188dc <ISO9660::closeDir(void*)>:
c00188dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00188e2:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00188e5:	90                   	nop

c00188e6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00188e6:	b8 01 00 00 00       	mov    eax,0x1
c00188eb:	c3                   	ret    

c00188ec <ISO9660::unlink(char const*)>:
c00188ec:	b8 01 00 00 00       	mov    eax,0x1
c00188f1:	c3                   	ret    

c00188f2 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00188f2:	b8 03 00 00 00       	mov    eax,0x3
c00188f7:	c3                   	ret    

c00188f8 <ISO9660::rename(char const*, char const*)>:
c00188f8:	b8 01 00 00 00       	mov    eax,0x1
c00188fd:	c3                   	ret    

c00188fe <ISO9660::mkdir(char const*)>:
c00188fe:	b8 01 00 00 00       	mov    eax,0x1
c0018903:	c3                   	ret    

c0018904 <ISO9660::~ISO9660()>:
c0018904:	83 ec 0c             	sub    esp,0xc
c0018907:	ba d4 0b 02 c0       	mov    edx,0xc0020bd4
c001890c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018910:	89 10                	mov    DWORD PTR [eax],edx
c0018912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018916:	83 ec 0c             	sub    esp,0xc
c0018919:	50                   	push   eax
c001891a:	e8 21 20 ff ff       	call   c000a940 <Filesystem::~Filesystem()>
c001891f:	83 c4 10             	add    esp,0x10
c0018922:	90                   	nop
c0018923:	83 c4 0c             	add    esp,0xc
c0018926:	c3                   	ret    
c0018927:	90                   	nop

c0018928 <ISO9660::~ISO9660()>:
c0018928:	83 ec 0c             	sub    esp,0xc
c001892b:	83 ec 0c             	sub    esp,0xc
c001892e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018932:	e8 cd ff ff ff       	call   c0018904 <ISO9660::~ISO9660()>
c0018937:	83 c4 10             	add    esp,0x10
c001893a:	83 ec 08             	sub    esp,0x8
c001893d:	6a 08                	push   0x8
c001893f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018943:	e8 bc 1b ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c0018948:	83 c4 10             	add    esp,0x10
c001894b:	83 c4 0c             	add    esp,0xc
c001894e:	c3                   	ret    
c001894f:	90                   	nop

c0018950 <ISO9660::exists(char const*)>:
c0018950:	83 ec 18             	sub    esp,0x18
c0018953:	68 af 0a 02 c0       	push   0xc0020aaf
c0018958:	e8 52 7a ff ff       	call   c00103af <KePanic(char const*)>
c001895d:	31 c0                	xor    eax,eax
c001895f:	83 c4 1c             	add    esp,0x1c
c0018962:	c3                   	ret    
c0018963:	90                   	nop

c0018964 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0018964:	56                   	push   esi
c0018965:	53                   	push   ebx
c0018966:	53                   	push   ebx
c0018967:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001896b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001896f:	85 db                	test   ebx,ebx
c0018971:	0f 84 c2 00 00 00    	je     c0018a39 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c0018977:	85 f6                	test   esi,esi
c0018979:	0f 84 ba 00 00 00    	je     c0018a39 <ISO9660::open(char const*, void**, FileOpenMode)+0xd5>
c001897f:	b8 03 00 00 00       	mov    eax,0x3
c0018984:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0018989:	0f 85 af 00 00 00    	jne    c0018a3e <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c001898f:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018994:	38 03                	cmp    BYTE PTR [ebx],al
c0018996:	74 1b                	je     c00189b3 <ISO9660::open(char const*, void**, FileOpenMode)+0x4f>
c0018998:	84 c0                	test   al,al
c001899a:	74 10                	je     c00189ac <ISO9660::open(char const*, void**, FileOpenMode)+0x48>
c001899c:	83 ec 0c             	sub    esp,0xc
c001899f:	68 cd 0a 02 c0       	push   0xc0020acd
c00189a4:	e8 06 7a ff ff       	call   c00103af <KePanic(char const*)>
c00189a9:	83 c4 10             	add    esp,0x10
c00189ac:	8a 03                	mov    al,BYTE PTR [ebx]
c00189ae:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c00189b3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00189b6:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c00189bd:	85 c0                	test   eax,eax
c00189bf:	74 09                	je     c00189ca <ISO9660::open(char const*, void**, FileOpenMode)+0x66>
c00189c1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00189c8:	74 48                	je     c0018a12 <ISO9660::open(char const*, void**, FileOpenMode)+0xae>
c00189ca:	83 ec 0c             	sub    esp,0xc
c00189cd:	68 dd 0a 02 c0       	push   0xc0020add
c00189d2:	e8 23 1c ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00189d7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00189da:	83 c4 10             	add    esp,0x10
c00189dd:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c00189e4:	85 c0                	test   eax,eax
c00189e6:	74 17                	je     c00189ff <ISO9660::open(char const*, void**, FileOpenMode)+0x9b>
c00189e8:	83 ec 0c             	sub    esp,0xc
c00189eb:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00189f2:	68 fd 0a 02 c0       	push   0xc0020afd
c00189f7:	e8 fe 1b ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c00189fc:	83 c4 10             	add    esp,0x10
c00189ff:	83 ec 0c             	sub    esp,0xc
c0018a02:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018a09:	50                   	push   eax
c0018a0a:	e8 3c de fe ff       	call   c000684b <init_percd>
c0018a0f:	83 c4 10             	add    esp,0x10
c0018a12:	83 c3 03             	add    ebx,0x3
c0018a15:	51                   	push   ecx
c0018a16:	51                   	push   ecx
c0018a17:	6a 00                	push   0x0
c0018a19:	53                   	push   ebx
c0018a1a:	e8 f4 d8 fe ff       	call   c0006313 <iso_open>
c0018a1f:	83 c4 10             	add    esp,0x10
c0018a22:	89 c2                	mov    edx,eax
c0018a24:	b8 01 00 00 00       	mov    eax,0x1
c0018a29:	83 fa ff             	cmp    edx,0xffffffff
c0018a2c:	74 10                	je     c0018a3e <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018a2e:	83 c2 32             	add    edx,0x32
c0018a31:	31 c0                	xor    eax,eax
c0018a33:	01 d2                	add    edx,edx
c0018a35:	89 16                	mov    DWORD PTR [esi],edx
c0018a37:	eb 05                	jmp    c0018a3e <ISO9660::open(char const*, void**, FileOpenMode)+0xda>
c0018a39:	b8 04 00 00 00       	mov    eax,0x4
c0018a3e:	5a                   	pop    edx
c0018a3f:	5b                   	pop    ebx
c0018a40:	5e                   	pop    esi
c0018a41:	c3                   	ret    

c0018a42 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0018a42:	53                   	push   ebx
c0018a43:	83 ec 08             	sub    esp,0x8
c0018a46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018a4a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018a4e:	85 c0                	test   eax,eax
c0018a50:	74 2d                	je     c0018a7f <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0018a52:	85 db                	test   ebx,ebx
c0018a54:	74 29                	je     c0018a7f <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0018a56:	b9 02 00 00 00       	mov    ecx,0x2
c0018a5b:	52                   	push   edx
c0018a5c:	99                   	cdq    
c0018a5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a61:	f7 f9                	idiv   ecx
c0018a63:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018a67:	83 e8 32             	sub    eax,0x32
c0018a6a:	50                   	push   eax
c0018a6b:	e8 4b d9 fe ff       	call   c00063bb <iso_read>
c0018a70:	83 c4 10             	add    esp,0x10
c0018a73:	89 03                	mov    DWORD PTR [ebx],eax
c0018a75:	09 d0                	or     eax,edx
c0018a77:	0f 94 c0             	sete   al
c0018a7a:	0f b6 c0             	movzx  eax,al
c0018a7d:	eb 05                	jmp    c0018a84 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0018a7f:	b8 04 00 00 00       	mov    eax,0x4
c0018a84:	83 c4 08             	add    esp,0x8
c0018a87:	5b                   	pop    ebx
c0018a88:	c3                   	ret    
c0018a89:	90                   	nop

c0018a8a <ISO9660::seek(void*, unsigned long long)>:
c0018a8a:	57                   	push   edi
c0018a8b:	56                   	push   esi
c0018a8c:	b8 04 00 00 00       	mov    eax,0x4
c0018a91:	51                   	push   ecx
c0018a92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018a96:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018a9a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018a9e:	85 d2                	test   edx,edx
c0018aa0:	74 26                	je     c0018ac8 <ISO9660::seek(void*, unsigned long long)+0x3e>
c0018aa2:	6a 00                	push   0x0
c0018aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0018aa9:	57                   	push   edi
c0018aaa:	89 d0                	mov    eax,edx
c0018aac:	56                   	push   esi
c0018aad:	99                   	cdq    
c0018aae:	f7 f9                	idiv   ecx
c0018ab0:	83 e8 32             	sub    eax,0x32
c0018ab3:	50                   	push   eax
c0018ab4:	e8 18 da fe ff       	call   c00064d1 <iso_seek>
c0018ab9:	83 c4 10             	add    esp,0x10
c0018abc:	31 f0                	xor    eax,esi
c0018abe:	31 fa                	xor    edx,edi
c0018ac0:	09 d0                	or     eax,edx
c0018ac2:	0f 95 c0             	setne  al
c0018ac5:	0f b6 c0             	movzx  eax,al
c0018ac8:	5a                   	pop    edx
c0018ac9:	5e                   	pop    esi
c0018aca:	5f                   	pop    edi
c0018acb:	c3                   	ret    

c0018acc <ISO9660::tell(void*, unsigned long long*)>:
c0018acc:	53                   	push   ebx
c0018acd:	83 ec 08             	sub    esp,0x8
c0018ad0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ad4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018ad8:	85 c0                	test   eax,eax
c0018ada:	74 24                	je     c0018b00 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018adc:	85 db                	test   ebx,ebx
c0018ade:	74 20                	je     c0018b00 <ISO9660::tell(void*, unsigned long long*)+0x34>
c0018ae0:	83 ec 0c             	sub    esp,0xc
c0018ae3:	b9 02 00 00 00       	mov    ecx,0x2
c0018ae8:	99                   	cdq    
c0018ae9:	f7 f9                	idiv   ecx
c0018aeb:	83 e8 32             	sub    eax,0x32
c0018aee:	50                   	push   eax
c0018aef:	e8 61 da fe ff       	call   c0006555 <iso_tell>
c0018af4:	83 c4 10             	add    esp,0x10
c0018af7:	89 03                	mov    DWORD PTR [ebx],eax
c0018af9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0018afc:	31 c0                	xor    eax,eax
c0018afe:	eb 05                	jmp    c0018b05 <ISO9660::tell(void*, unsigned long long*)+0x39>
c0018b00:	b8 04 00 00 00       	mov    eax,0x4
c0018b05:	83 c4 08             	add    esp,0x8
c0018b08:	5b                   	pop    ebx
c0018b09:	c3                   	ret    

c0018b0a <ISO9660::stat(void*, unsigned long long*)>:
c0018b0a:	53                   	push   ebx
c0018b0b:	83 ec 14             	sub    esp,0x14
c0018b0e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018b12:	68 21 0b 02 c0       	push   0xc0020b21
c0018b17:	e8 de 1a ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0018b1c:	83 c4 10             	add    esp,0x10
c0018b1f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018b24:	74 2c                	je     c0018b52 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018b26:	85 db                	test   ebx,ebx
c0018b28:	74 28                	je     c0018b52 <ISO9660::stat(void*, unsigned long long*)+0x48>
c0018b2a:	83 ec 0c             	sub    esp,0xc
c0018b2d:	b9 02 00 00 00       	mov    ecx,0x2
c0018b32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b36:	99                   	cdq    
c0018b37:	f7 f9                	idiv   ecx
c0018b39:	83 e8 32             	sub    eax,0x32
c0018b3c:	50                   	push   eax
c0018b3d:	e8 44 da fe ff       	call   c0006586 <iso_total>
c0018b42:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0018b49:	89 03                	mov    DWORD PTR [ebx],eax
c0018b4b:	83 c4 10             	add    esp,0x10
c0018b4e:	31 c0                	xor    eax,eax
c0018b50:	eb 05                	jmp    c0018b57 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c0018b52:	b8 04 00 00 00       	mov    eax,0x4
c0018b57:	83 c4 08             	add    esp,0x8
c0018b5a:	5b                   	pop    ebx
c0018b5b:	c3                   	ret    

c0018b5c <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0018b5c:	55                   	push   ebp
c0018b5d:	57                   	push   edi
c0018b5e:	56                   	push   esi
c0018b5f:	53                   	push   ebx
c0018b60:	83 ec 18             	sub    esp,0x18
c0018b63:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0018b67:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018b6b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018b6f:	68 29 0b 02 c0       	push   0xc0020b29
c0018b74:	e8 81 1a ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0018b79:	83 c4 10             	add    esp,0x10
c0018b7c:	85 ff                	test   edi,edi
c0018b7e:	0f 94 c2             	sete   dl
c0018b81:	85 f6                	test   esi,esi
c0018b83:	0f 94 c0             	sete   al
c0018b86:	08 c2                	or     dl,al
c0018b88:	0f 85 d5 00 00 00    	jne    c0018c63 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0018b8e:	85 db                	test   ebx,ebx
c0018b90:	0f 84 cd 00 00 00    	je     c0018c63 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x107>
c0018b96:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0018b99:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0018b9f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0018ba6:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018bab:	38 03                	cmp    BYTE PTR [ebx],al
c0018bad:	74 1b                	je     c0018bca <ISO9660::stat(char const*, unsigned long long*, bool*)+0x6e>
c0018baf:	84 c0                	test   al,al
c0018bb1:	74 10                	je     c0018bc3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x67>
c0018bb3:	83 ec 0c             	sub    esp,0xc
c0018bb6:	68 cd 0a 02 c0       	push   0xc0020acd
c0018bbb:	e8 ef 77 ff ff       	call   c00103af <KePanic(char const*)>
c0018bc0:	83 c4 10             	add    esp,0x10
c0018bc3:	8a 03                	mov    al,BYTE PTR [ebx]
c0018bc5:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018bca:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018bcd:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018bd4:	85 c0                	test   eax,eax
c0018bd6:	74 09                	je     c0018be1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x85>
c0018bd8:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018bdf:	74 51                	je     c0018c32 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xd6>
c0018be1:	83 ec 0c             	sub    esp,0xc
c0018be4:	68 31 0b 02 c0       	push   0xc0020b31
c0018be9:	e8 0c 1a ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0018bee:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018bf1:	83 c4 10             	add    esp,0x10
c0018bf4:	83 3c 85 1c 63 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd9ce4],0x0
c0018bfc:	74 21                	je     c0018c1f <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0018bfe:	83 ec 0c             	sub    esp,0xc
c0018c01:	68 51 0b 02 c0       	push   0xc0020b51
c0018c06:	e8 ef 19 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0018c0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018c0e:	83 c4 10             	add    esp,0x10
c0018c11:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018c18:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018c1f:	83 ec 0c             	sub    esp,0xc
c0018c22:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018c29:	50                   	push   eax
c0018c2a:	e8 1c dc fe ff       	call   c000684b <init_percd>
c0018c2f:	83 c4 10             	add    esp,0x10
c0018c32:	83 c3 03             	add    ebx,0x3
c0018c35:	52                   	push   edx
c0018c36:	52                   	push   edx
c0018c37:	6a 00                	push   0x0
c0018c39:	53                   	push   ebx
c0018c3a:	e8 d4 d6 fe ff       	call   c0006313 <iso_open>
c0018c3f:	83 c4 10             	add    esp,0x10
c0018c42:	89 c5                	mov    ebp,eax
c0018c44:	83 f8 ff             	cmp    eax,0xffffffff
c0018c47:	75 21                	jne    c0018c6a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x10e>
c0018c49:	50                   	push   eax
c0018c4a:	50                   	push   eax
c0018c4b:	6a 01                	push   0x1
c0018c4d:	53                   	push   ebx
c0018c4e:	e8 c0 d6 fe ff       	call   c0006313 <iso_open>
c0018c53:	83 c4 10             	add    esp,0x10
c0018c56:	ba 02 00 00 00       	mov    edx,0x2
c0018c5b:	40                   	inc    eax
c0018c5c:	74 2b                	je     c0018c89 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0018c5e:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0018c61:	eb 24                	jmp    c0018c87 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12b>
c0018c63:	ba 04 00 00 00       	mov    edx,0x4
c0018c68:	eb 1f                	jmp    c0018c89 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x12d>
c0018c6a:	83 ec 0c             	sub    esp,0xc
c0018c6d:	50                   	push   eax
c0018c6e:	e8 13 d9 fe ff       	call   c0006586 <iso_total>
c0018c73:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0018c7a:	89 07                	mov    DWORD PTR [edi],eax
c0018c7c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018c7f:	e8 19 d7 fe ff       	call   c000639d <iso_close>
c0018c84:	83 c4 10             	add    esp,0x10
c0018c87:	31 d2                	xor    edx,edx
c0018c89:	83 c4 0c             	add    esp,0xc
c0018c8c:	89 d0                	mov    eax,edx
c0018c8e:	5b                   	pop    ebx
c0018c8f:	5e                   	pop    esi
c0018c90:	5f                   	pop    edi
c0018c91:	5d                   	pop    ebp
c0018c92:	c3                   	ret    
c0018c93:	90                   	nop

c0018c94 <ISO9660::close(void*)>:
c0018c94:	83 ec 0c             	sub    esp,0xc
c0018c97:	b8 04 00 00 00       	mov    eax,0x4
c0018c9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018ca0:	85 d2                	test   edx,edx
c0018ca2:	74 1b                	je     c0018cbf <ISO9660::close(void*)+0x2b>
c0018ca4:	83 ec 0c             	sub    esp,0xc
c0018ca7:	b9 02 00 00 00       	mov    ecx,0x2
c0018cac:	89 d0                	mov    eax,edx
c0018cae:	99                   	cdq    
c0018caf:	f7 f9                	idiv   ecx
c0018cb1:	83 e8 32             	sub    eax,0x32
c0018cb4:	50                   	push   eax
c0018cb5:	e8 e3 d6 fe ff       	call   c000639d <iso_close>
c0018cba:	83 c4 10             	add    esp,0x10
c0018cbd:	31 c0                	xor    eax,eax
c0018cbf:	83 c4 0c             	add    esp,0xc
c0018cc2:	c3                   	ret    
c0018cc3:	90                   	nop

c0018cc4 <ISO9660::openDir(char const*, void**)>:
c0018cc4:	56                   	push   esi
c0018cc5:	53                   	push   ebx
c0018cc6:	50                   	push   eax
c0018cc7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018ccb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018ccf:	85 db                	test   ebx,ebx
c0018cd1:	0f 84 b5 00 00 00    	je     c0018d8c <ISO9660::openDir(char const*, void**)+0xc8>
c0018cd7:	85 f6                	test   esi,esi
c0018cd9:	0f 84 ad 00 00 00    	je     c0018d8c <ISO9660::openDir(char const*, void**)+0xc8>
c0018cdf:	a0 20 73 02 c0       	mov    al,ds:0xc0027320
c0018ce4:	38 03                	cmp    BYTE PTR [ebx],al
c0018ce6:	74 1b                	je     c0018d03 <ISO9660::openDir(char const*, void**)+0x3f>
c0018ce8:	84 c0                	test   al,al
c0018cea:	74 10                	je     c0018cfc <ISO9660::openDir(char const*, void**)+0x38>
c0018cec:	83 ec 0c             	sub    esp,0xc
c0018cef:	68 cd 0a 02 c0       	push   0xc0020acd
c0018cf4:	e8 b6 76 ff ff       	call   c00103af <KePanic(char const*)>
c0018cf9:	83 c4 10             	add    esp,0x10
c0018cfc:	8a 03                	mov    al,BYTE PTR [ebx]
c0018cfe:	a2 20 73 02 c0       	mov    ds:0xc0027320,al
c0018d03:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0018d06:	8b 04 85 1c 63 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ce4]
c0018d0d:	85 c0                	test   eax,eax
c0018d0f:	74 10                	je     c0018d21 <ISO9660::openDir(char const*, void**)+0x5d>
c0018d11:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0018d18:	74 1a                	je     c0018d34 <ISO9660::openDir(char const*, void**)+0x70>
c0018d1a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0018d21:	83 ec 0c             	sub    esp,0xc
c0018d24:	0f be 05 20 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027320
c0018d2b:	50                   	push   eax
c0018d2c:	e8 1a db fe ff       	call   c000684b <init_percd>
c0018d31:	83 c4 10             	add    esp,0x10
c0018d34:	83 c3 03             	add    ebx,0x3
c0018d37:	50                   	push   eax
c0018d38:	50                   	push   eax
c0018d39:	6a 01                	push   0x1
c0018d3b:	53                   	push   ebx
c0018d3c:	e8 d2 d5 fe ff       	call   c0006313 <iso_open>
c0018d41:	83 c4 10             	add    esp,0x10
c0018d44:	89 c3                	mov    ebx,eax
c0018d46:	83 f8 ff             	cmp    eax,0xffffffff
c0018d49:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0018d4e:	75 1c                	jne    c0018d6c <ISO9660::openDir(char const*, void**)+0xa8>
c0018d50:	53                   	push   ebx
c0018d51:	53                   	push   ebx
c0018d52:	68 75 0b 02 c0       	push   0xc0020b75
c0018d57:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018d5d:	e8 7a fa fe ff       	call   c00087dc <VgaText::puts(char const*)>
c0018d62:	83 c4 10             	add    esp,0x10
c0018d65:	b8 01 00 00 00       	mov    eax,0x1
c0018d6a:	eb 25                	jmp    c0018d91 <ISO9660::openDir(char const*, void**)+0xcd>
c0018d6c:	01 db                	add    ebx,ebx
c0018d6e:	51                   	push   ecx
c0018d6f:	83 c3 65             	add    ebx,0x65
c0018d72:	51                   	push   ecx
c0018d73:	68 88 0b 02 c0       	push   0xc0020b88
c0018d78:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018d7e:	e8 59 fa fe ff       	call   c00087dc <VgaText::puts(char const*)>
c0018d83:	89 1e                	mov    DWORD PTR [esi],ebx
c0018d85:	83 c4 10             	add    esp,0x10
c0018d88:	31 c0                	xor    eax,eax
c0018d8a:	eb 05                	jmp    c0018d91 <ISO9660::openDir(char const*, void**)+0xcd>
c0018d8c:	b8 04 00 00 00       	mov    eax,0x4
c0018d91:	5a                   	pop    edx
c0018d92:	5b                   	pop    ebx
c0018d93:	5e                   	pop    esi
c0018d94:	c3                   	ret    
c0018d95:	90                   	nop

c0018d96 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0018d96:	55                   	push   ebp
c0018d97:	57                   	push   edi
c0018d98:	56                   	push   esi
c0018d99:	53                   	push   ebx
c0018d9a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0018da0:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0018da7:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0018dae:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0018db6:	0f 84 e7 00 00 00    	je     c0018ea3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0018dbc:	85 db                	test   ebx,ebx
c0018dbe:	0f 84 df 00 00 00    	je     c0018ea3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0018dc4:	83 ec 0c             	sub    esp,0xc
c0018dc7:	68 9b 0b 02 c0       	push   0xc0020b9b
c0018dcc:	e8 29 18 ff ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c0018dd1:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0018dd8:	b9 02 00 00 00       	mov    ecx,0x2
c0018ddd:	99                   	cdq    
c0018dde:	f7 f9                	idiv   ecx
c0018de0:	83 e8 32             	sub    eax,0x32
c0018de3:	89 04 24             	mov    DWORD PTR [esp],eax
c0018de6:	e8 ec d7 fe ff       	call   c00065d7 <iso_readdir>
c0018deb:	83 c4 10             	add    esp,0x10
c0018dee:	89 c6                	mov    esi,eax
c0018df0:	85 c0                	test   eax,eax
c0018df2:	75 37                	jne    c0018e2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c0018df4:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0018df9:	56                   	push   esi
c0018dfa:	56                   	push   esi
c0018dfb:	68 a6 0b 02 c0       	push   0xc0020ba6
c0018e00:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018e06:	e8 d1 f9 fe ff       	call   c00087dc <VgaText::puts(char const*)>
c0018e0b:	83 c4 0c             	add    esp,0xc
c0018e0e:	68 10 01 00 00       	push   0x110
c0018e13:	6a 00                	push   0x0
c0018e15:	57                   	push   edi
c0018e16:	e8 a5 76 fe ff       	call   c00004c0 <memset>
c0018e1b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0018e21:	83 c4 10             	add    esp,0x10
c0018e24:	b8 01 00 00 00       	mov    eax,0x1
c0018e29:	eb 7d                	jmp    c0018ea8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0018e2b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0018e31:	8d 68 08             	lea    ebp,[eax+0x8]
c0018e34:	83 ec 0c             	sub    esp,0xc
c0018e37:	55                   	push   ebp
c0018e38:	e8 f3 76 fe ff       	call   c0000530 <strlen>
c0018e3d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018e45:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018e49:	83 c4 10             	add    esp,0x10
c0018e4c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0018e50:	75 0a                	jne    c0018e5c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0018e52:	b8 02 00 00 00       	mov    eax,0x2
c0018e57:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0018e5a:	74 05                	je     c0018e61 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0018e5c:	b8 01 00 00 00       	mov    eax,0x1
c0018e61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018e65:	50                   	push   eax
c0018e66:	50                   	push   eax
c0018e67:	55                   	push   ebp
c0018e68:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018e6c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0018e70:	50                   	push   eax
c0018e71:	e8 7a 77 fe ff       	call   c00005f0 <strcpy>
c0018e76:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0018e7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018e7f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0018e85:	5a                   	pop    edx
c0018e86:	a1 90 71 02 c0       	mov    eax,ds:0xc0027190
c0018e8b:	59                   	pop    ecx
c0018e8c:	68 b9 0b 02 c0       	push   0xc0020bb9
c0018e91:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0018e97:	e8 40 f9 fe ff       	call   c00087dc <VgaText::puts(char const*)>
c0018e9c:	83 c4 10             	add    esp,0x10
c0018e9f:	31 c0                	xor    eax,eax
c0018ea1:	eb 05                	jmp    c0018ea8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c0018ea3:	b8 04 00 00 00       	mov    eax,0x4
c0018ea8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0018eae:	5b                   	pop    ebx
c0018eaf:	5e                   	pop    esi
c0018eb0:	5f                   	pop    edi
c0018eb1:	5d                   	pop    ebp
c0018eb2:	c3                   	ret    

c0018eb3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0018eb3:	57                   	push   edi
c0018eb4:	56                   	push   esi
c0018eb5:	53                   	push   ebx
c0018eb6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018eba:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018ebe:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018ec2:	39 35 24 73 02 c0    	cmp    DWORD PTR ds:0xc0027324,esi
c0018ec8:	75 08                	jne    c0018ed2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0018eca:	38 1d e4 16 02 c0    	cmp    BYTE PTR ds:0xc00216e4,bl
c0018ed0:	74 4a                	je     c0018f1c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0018ed2:	83 ec 0c             	sub    esp,0xc
c0018ed5:	31 d2                	xor    edx,edx
c0018ed7:	68 40 73 02 c0       	push   0xc0027340
c0018edc:	0f be c3             	movsx  eax,bl
c0018edf:	6a 01                	push   0x1
c0018ee1:	52                   	push   edx
c0018ee2:	56                   	push   esi
c0018ee3:	ff 34 85 1c 63 02 c0 	push   DWORD PTR [eax*4-0x3ffd9ce4]
c0018eea:	e8 4f 3e ff ff       	call   c000cd3e <LogicalDisk::read(unsigned long long, int, void*)>
c0018eef:	83 c4 20             	add    esp,0x20
c0018ef2:	85 c0                	test   eax,eax
c0018ef4:	75 0e                	jne    c0018f04 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0018ef6:	89 35 24 73 02 c0    	mov    DWORD PTR ds:0xc0027324,esi
c0018efc:	88 1d e4 16 02 c0    	mov    BYTE PTR ds:0xc00216e4,bl
c0018f02:	eb 18                	jmp    c0018f1c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0018f04:	50                   	push   eax
c0018f05:	68 00 08 00 00       	push   0x800
c0018f0a:	6a 00                	push   0x0
c0018f0c:	57                   	push   edi
c0018f0d:	e8 ae 75 fe ff       	call   c00004c0 <memset>
c0018f12:	83 c4 10             	add    esp,0x10
c0018f15:	b8 01 00 00 00       	mov    eax,0x1
c0018f1a:	eb 0e                	jmp    c0018f2a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0018f1c:	be 40 73 02 c0       	mov    esi,0xc0027340
c0018f21:	b9 00 08 00 00       	mov    ecx,0x800
c0018f26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f28:	31 c0                	xor    eax,eax
c0018f2a:	5b                   	pop    ebx
c0018f2b:	5e                   	pop    esi
c0018f2c:	5f                   	pop    edi
c0018f2d:	c3                   	ret    

c0018f2e <ISO9660::tryMount(LogicalDisk*, int)>:
c0018f2e:	53                   	push   ebx
c0018f2f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0018f35:	c7 05 24 73 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0027324,0xdeadbeef
c0018f3f:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0018f46:	8d 58 41             	lea    ebx,[eax+0x41]
c0018f49:	0f be db             	movsx  ebx,bl
c0018f4c:	53                   	push   ebx
c0018f4d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018f51:	50                   	push   eax
c0018f52:	6a 10                	push   0x10
c0018f54:	e8 5a ff ff ff       	call   c0018eb3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0018f59:	83 c4 10             	add    esp,0x10
c0018f5c:	31 d2                	xor    edx,edx
c0018f5e:	85 c0                	test   eax,eax
c0018f60:	75 33                	jne    c0018f95 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018f62:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0018f67:	75 2c                	jne    c0018f95 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018f69:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0018f6e:	75 25                	jne    c0018f95 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018f70:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0018f75:	75 1e                	jne    c0018f95 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018f77:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0018f7c:	75 17                	jne    c0018f95 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018f7e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0018f83:	75 10                	jne    c0018f95 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0018f85:	83 ec 0c             	sub    esp,0xc
c0018f88:	53                   	push   ebx
c0018f89:	e8 bd d8 fe ff       	call   c000684b <init_percd>
c0018f8e:	83 c4 10             	add    esp,0x10
c0018f91:	40                   	inc    eax
c0018f92:	0f 95 c2             	setne  dl
c0018f95:	88 d0                	mov    al,dl
c0018f97:	81 c4 08 08 00 00    	add    esp,0x808
c0018f9d:	5b                   	pop    ebx
c0018f9e:	c3                   	ret    
c0018f9f:	90                   	nop

c0018fa0 <ISO9660::ISO9660()>:
c0018fa0:	83 ec 0c             	sub    esp,0xc
c0018fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fa7:	83 ec 0c             	sub    esp,0xc
c0018faa:	50                   	push   eax
c0018fab:	e8 6c 19 ff ff       	call   c000a91c <Filesystem::Filesystem()>
c0018fb0:	83 c4 10             	add    esp,0x10
c0018fb3:	ba d4 0b 02 c0       	mov    edx,0xc0020bd4
c0018fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018fbc:	89 10                	mov    DWORD PTR [eax],edx
c0018fbe:	e8 9a d9 fe ff       	call   c000695d <fs_iso9660_init>
c0018fc3:	90                   	nop
c0018fc4:	83 c4 0c             	add    esp,0xc
c0018fc7:	c3                   	ret    

c0018fc8 <SoundCard::beginPlayback()>:
c0018fc8:	c7 44 24 04 34 0c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020c34
c0018fd0:	e9 da 73 ff ff       	jmp    c00103af <KePanic(char const*)>
c0018fd5:	90                   	nop

c0018fd6 <SoundCard::stopPlayback()>:
c0018fd6:	c7 44 24 04 34 0c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020c34
c0018fde:	e9 cc 73 ff ff       	jmp    c00103af <KePanic(char const*)>
c0018fe3:	90                   	nop

c0018fe4 <SoundCard::SoundCard(char const*)>:
c0018fe4:	83 ec 1c             	sub    esp,0x1c
c0018fe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018feb:	83 ec 08             	sub    esp,0x8
c0018fee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ff2:	50                   	push   eax
c0018ff3:	e8 d8 2b ff ff       	call   c000bbd0 <Device::Device(char const*)>
c0018ff8:	83 c4 10             	add    esp,0x10
c0018ffb:	ba 80 0c 02 c0       	mov    edx,0xc0020c80
c0019000:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019004:	89 10                	mov    DWORD PTR [eax],edx
c0019006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001900a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0019011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019015:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001901f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019023:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001902d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019031:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001903b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001903f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0019049:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019051:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0019056:	7f 19                	jg     c0019071 <SoundCard::SoundCard(char const*)+0x8d>
c0019058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001905c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019060:	83 c2 54             	add    edx,0x54
c0019063:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001906b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001906f:	eb e0                	jmp    c0019051 <SoundCard::SoundCard(char const*)+0x6d>
c0019071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019075:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001907c:	90                   	nop
c001907d:	83 c4 1c             	add    esp,0x1c
c0019080:	c3                   	ret    
c0019081:	90                   	nop

c0019082 <SoundCard::~SoundCard()>:
c0019082:	83 ec 0c             	sub    esp,0xc
c0019085:	ba 80 0c 02 c0       	mov    edx,0xc0020c80
c001908a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001908e:	89 10                	mov    DWORD PTR [eax],edx
c0019090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019094:	83 ec 0c             	sub    esp,0xc
c0019097:	50                   	push   eax
c0019098:	e8 9d 28 ff ff       	call   c000b93a <Device::~Device()>
c001909d:	83 c4 10             	add    esp,0x10
c00190a0:	90                   	nop
c00190a1:	83 c4 0c             	add    esp,0xc
c00190a4:	c3                   	ret    
c00190a5:	90                   	nop

c00190a6 <SoundCard::~SoundCard()>:
c00190a6:	83 ec 0c             	sub    esp,0xc
c00190a9:	83 ec 0c             	sub    esp,0xc
c00190ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00190b0:	e8 cd ff ff ff       	call   c0019082 <SoundCard::~SoundCard()>
c00190b5:	83 c4 10             	add    esp,0x10
c00190b8:	83 ec 08             	sub    esp,0x8
c00190bb:	68 e8 01 00 00       	push   0x1e8
c00190c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00190c4:	e8 3b 14 ff ff       	call   c000a504 <operator delete(void*, unsigned long)>
c00190c9:	83 c4 10             	add    esp,0x10
c00190cc:	83 c4 0c             	add    esp,0xc
c00190cf:	c3                   	ret    

c00190d0 <SoundCard::configureRates(int, int, int)>:
c00190d0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00190d4:	31 c0                	xor    eax,eax
c00190d6:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c00190dd:	75 20                	jne    c00190ff <SoundCard::configureRates(int, int, int)+0x2f>
c00190df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00190e3:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c00190e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00190ed:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c00190f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190f7:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c00190fd:	b0 01                	mov    al,0x1
c00190ff:	c3                   	ret    

c0019100 <SoundCard::getSamples16(int, short*)>:
c0019100:	55                   	push   ebp
c0019101:	57                   	push   edi
c0019102:	31 ff                	xor    edi,edi
c0019104:	56                   	push   esi
c0019105:	53                   	push   ebx
c0019106:	31 db                	xor    ebx,ebx
c0019108:	83 ec 10             	sub    esp,0x10
c001910b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001910f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019113:	8d 04 36             	lea    eax,[esi+esi*1]
c0019116:	50                   	push   eax
c0019117:	6a 00                	push   0x0
c0019119:	55                   	push   ebp
c001911a:	e8 a1 73 fe ff       	call   c00004c0 <memset>
c001911f:	83 c4 10             	add    esp,0x10
c0019122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019126:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001912d:	85 c0                	test   eax,eax
c001912f:	74 1b                	je     c001914c <SoundCard::getSamples16(int, short*)+0x4c>
c0019131:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019135:	75 15                	jne    c001914c <SoundCard::getSamples16(int, short*)+0x4c>
c0019137:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001913b:	55                   	push   ebp
c001913c:	56                   	push   esi
c001913d:	50                   	push   eax
c001913e:	e8 ed 02 00 00       	call   c0019430 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0019143:	83 c4 10             	add    esp,0x10
c0019146:	39 c7                	cmp    edi,eax
c0019148:	7d 02                	jge    c001914c <SoundCard::getSamples16(int, short*)+0x4c>
c001914a:	89 c7                	mov    edi,eax
c001914c:	43                   	inc    ebx
c001914d:	83 fb 20             	cmp    ebx,0x20
c0019150:	75 d0                	jne    c0019122 <SoundCard::getSamples16(int, short*)+0x22>
c0019152:	83 c4 0c             	add    esp,0xc
c0019155:	89 f8                	mov    eax,edi
c0019157:	5b                   	pop    ebx
c0019158:	5e                   	pop    esi
c0019159:	5f                   	pop    edi
c001915a:	5d                   	pop    ebp
c001915b:	c3                   	ret    

c001915c <SoundCard::getSamples32(int, int*)>:
c001915c:	55                   	push   ebp
c001915d:	57                   	push   edi
c001915e:	31 ff                	xor    edi,edi
c0019160:	56                   	push   esi
c0019161:	31 f6                	xor    esi,esi
c0019163:	53                   	push   ebx
c0019164:	83 ec 10             	sub    esp,0x10
c0019167:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001916b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001916f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0019173:	c1 e0 02             	shl    eax,0x2
c0019176:	50                   	push   eax
c0019177:	6a 00                	push   0x0
c0019179:	55                   	push   ebp
c001917a:	e8 41 73 fe ff       	call   c00004c0 <memset>
c001917f:	83 c4 10             	add    esp,0x10
c0019182:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0019189:	85 c0                	test   eax,eax
c001918b:	74 1b                	je     c00191a8 <SoundCard::getSamples32(int, int*)+0x4c>
c001918d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0019191:	75 15                	jne    c00191a8 <SoundCard::getSamples32(int, int*)+0x4c>
c0019193:	53                   	push   ebx
c0019194:	55                   	push   ebp
c0019195:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019199:	50                   	push   eax
c001919a:	e8 55 03 00 00       	call   c00194f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001919f:	83 c4 10             	add    esp,0x10
c00191a2:	39 c6                	cmp    esi,eax
c00191a4:	7d 02                	jge    c00191a8 <SoundCard::getSamples32(int, int*)+0x4c>
c00191a6:	89 c6                	mov    esi,eax
c00191a8:	47                   	inc    edi
c00191a9:	83 ff 20             	cmp    edi,0x20
c00191ac:	75 d4                	jne    c0019182 <SoundCard::getSamples32(int, int*)+0x26>
c00191ae:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00191b4:	85 f6                	test   esi,esi
c00191b6:	75 0f                	jne    c00191c7 <SoundCard::getSamples32(int, int*)+0x6b>
c00191b8:	84 c0                	test   al,al
c00191ba:	74 1b                	je     c00191d7 <SoundCard::getSamples32(int, int*)+0x7b>
c00191bc:	83 ec 0c             	sub    esp,0xc
c00191bf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00191c1:	53                   	push   ebx
c00191c2:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00191c5:	eb 0d                	jmp    c00191d4 <SoundCard::getSamples32(int, int*)+0x78>
c00191c7:	84 c0                	test   al,al
c00191c9:	75 0c                	jne    c00191d7 <SoundCard::getSamples32(int, int*)+0x7b>
c00191cb:	83 ec 0c             	sub    esp,0xc
c00191ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00191d0:	53                   	push   ebx
c00191d1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00191d4:	83 c4 10             	add    esp,0x10
c00191d7:	83 c4 0c             	add    esp,0xc
c00191da:	89 f0                	mov    eax,esi
c00191dc:	5b                   	pop    ebx
c00191dd:	5e                   	pop    esi
c00191de:	5f                   	pop    edi
c00191df:	5d                   	pop    ebp
c00191e0:	c3                   	ret    
c00191e1:	90                   	nop

c00191e2 <SoundCard::addChannel(SoundPort*)>:
c00191e2:	83 ec 0c             	sub    esp,0xc
c00191e5:	31 c0                	xor    eax,eax
c00191e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00191eb:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00191f3:	74 1b                	je     c0019210 <SoundCard::addChannel(SoundPort*)+0x2e>
c00191f5:	40                   	inc    eax
c00191f6:	83 f8 20             	cmp    eax,0x20
c00191f9:	75 f0                	jne    c00191eb <SoundCard::addChannel(SoundPort*)+0x9>
c00191fb:	83 ec 0c             	sub    esp,0xc
c00191fe:	68 59 0c 02 c0       	push   0xc0020c59
c0019203:	e8 a7 71 ff ff       	call   c00103af <KePanic(char const*)>
c0019208:	83 c4 10             	add    esp,0x10
c001920b:	83 c8 ff             	or     eax,0xffffffff
c001920e:	eb 0b                	jmp    c001921b <SoundCard::addChannel(SoundPort*)+0x39>
c0019210:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019214:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001921b:	83 c4 0c             	add    esp,0xc
c001921e:	c3                   	ret    
c001921f:	90                   	nop

c0019220 <SoundCard::removeChannel(int)>:
c0019220:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019224:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019228:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0019233:	c3                   	ret    

c0019234 <SoundPort::SoundPort(int, int, int, int)>:
c0019234:	83 ec 0c             	sub    esp,0xc
c0019237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001923b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0019242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019246:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001924a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001924e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019252:	89 10                	mov    DWORD PTR [eax],edx
c0019254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019258:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001925c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001925f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019263:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019267:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001926a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001926f:	75 13                	jne    c0019284 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0019271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019275:	8b 00                	mov    eax,DWORD PTR [eax]
c0019277:	05 a0 0f 00 00       	add    eax,0xfa0
c001927c:	01 c0                	add    eax,eax
c001927e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019282:	66 90                	xchg   ax,ax
c0019284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019288:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001928c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001928f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019293:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001929a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001929e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00192a1:	c1 e0 02             	shl    eax,0x2
c00192a4:	83 ec 0c             	sub    esp,0xc
c00192a7:	50                   	push   eax
c00192a8:	e8 b8 e5 fe ff       	call   c0007865 <malloc>
c00192ad:	83 c4 10             	add    esp,0x10
c00192b0:	89 c2                	mov    edx,eax
c00192b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192b6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00192b9:	90                   	nop
c00192ba:	83 c4 0c             	add    esp,0xc
c00192bd:	c3                   	ret    
c00192be:	66 90                	xchg   ax,ax

c00192c0 <SoundPort::~SoundPort()>:
c00192c0:	83 ec 0c             	sub    esp,0xc
c00192c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00192ca:	85 c0                	test   eax,eax
c00192cc:	74 1e                	je     c00192ec <SoundPort::~SoundPort()+0x2c>
c00192ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192d2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00192d5:	83 ec 0c             	sub    esp,0xc
c00192d8:	50                   	push   eax
c00192d9:	e8 97 e5 fe ff       	call   c0007875 <free>
c00192de:	83 c4 10             	add    esp,0x10
c00192e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00192e5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00192ec:	90                   	nop
c00192ed:	83 c4 0c             	add    esp,0xc
c00192f0:	c3                   	ret    
c00192f1:	90                   	nop
c00192f2:	66 90                	xchg   ax,ax

c00192f4 <SoundPort::unpause()>:
c00192f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00192f8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c00192fc:	c3                   	ret    
c00192fd:	90                   	nop
c00192fe:	66 90                	xchg   ax,ax

c0019300 <SoundPort::pause()>:
c0019300:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019304:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0019308:	c3                   	ret    
c0019309:	90                   	nop
c001930a:	66 90                	xchg   ax,ax

c001930c <SoundPort::getBufferUsed()>:
c001930c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019310:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019313:	c3                   	ret    

c0019314 <SoundPort::getBufferSize()>:
c0019314:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019318:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001931b:	c3                   	ret    

c001931c <SoundPort::buffer16(short*, int)>:
c001931c:	55                   	push   ebp
c001931d:	57                   	push   edi
c001931e:	56                   	push   esi
c001931f:	53                   	push   ebx
c0019320:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019324:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0019328:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001932b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001932e:	74 68                	je     c0019398 <SoundPort::buffer16(short*, int)+0x7c>
c0019330:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019334:	85 c9                	test   ecx,ecx
c0019336:	7e 60                	jle    c0019398 <SoundPort::buffer16(short*, int)+0x7c>
c0019338:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001933c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001933f:	c1 e1 0f             	shl    ecx,0xf
c0019342:	8d 70 01             	lea    esi,[eax+0x1]
c0019345:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0019348:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001934b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001934e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019351:	74 4d                	je     c00193a0 <SoundPort::buffer16(short*, int)+0x84>
c0019353:	31 f6                	xor    esi,esi
c0019355:	eb 21                	jmp    c0019378 <SoundPort::buffer16(short*, int)+0x5c>
c0019357:	90                   	nop
c0019358:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001935d:	8d 79 01             	lea    edi,[ecx+0x1]
c0019360:	c1 e3 0f             	shl    ebx,0xf
c0019363:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0019366:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0019369:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001936c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001936f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0019372:	74 1c                	je     c0019390 <SoundPort::buffer16(short*, int)+0x74>
c0019374:	89 c6                	mov    esi,eax
c0019376:	66 90                	xchg   ax,ax
c0019378:	8d 46 01             	lea    eax,[esi+0x1]
c001937b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001937f:	75 d7                	jne    c0019358 <SoundPort::buffer16(short*, int)+0x3c>
c0019381:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019385:	8d 76 00             	lea    esi,[esi+0x0]
c0019388:	5b                   	pop    ebx
c0019389:	5e                   	pop    esi
c001938a:	5f                   	pop    edi
c001938b:	5d                   	pop    ebp
c001938c:	c3                   	ret    
c001938d:	8d 76 00             	lea    esi,[esi+0x0]
c0019390:	5b                   	pop    ebx
c0019391:	8d 46 02             	lea    eax,[esi+0x2]
c0019394:	5e                   	pop    esi
c0019395:	5f                   	pop    edi
c0019396:	5d                   	pop    ebp
c0019397:	c3                   	ret    
c0019398:	5b                   	pop    ebx
c0019399:	31 c0                	xor    eax,eax
c001939b:	5e                   	pop    esi
c001939c:	5f                   	pop    edi
c001939d:	5d                   	pop    ebp
c001939e:	c3                   	ret    
c001939f:	90                   	nop
c00193a0:	b8 01 00 00 00       	mov    eax,0x1
c00193a5:	eb e1                	jmp    c0019388 <SoundPort::buffer16(short*, int)+0x6c>
c00193a7:	90                   	nop

c00193a8 <SoundPort::buffer32(int*, int)>:
c00193a8:	55                   	push   ebp
c00193a9:	57                   	push   edi
c00193aa:	56                   	push   esi
c00193ab:	53                   	push   ebx
c00193ac:	51                   	push   ecx
c00193ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00193b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193b5:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00193b8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00193bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00193bf:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00193c2:	74 5c                	je     c0019420 <SoundPort::buffer32(int*, int)+0x78>
c00193c4:	85 c0                	test   eax,eax
c00193c6:	7e 58                	jle    c0019420 <SoundPort::buffer32(int*, int)+0x78>
c00193c8:	8d 71 01             	lea    esi,[ecx+0x1]
c00193cb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c00193ce:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c00193d1:	8b 37                	mov    esi,DWORD PTR [edi]
c00193d3:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c00193d6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00193d9:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00193dc:	74 4a                	je     c0019428 <SoundPort::buffer32(int*, int)+0x80>
c00193de:	31 f6                	xor    esi,esi
c00193e0:	eb 1e                	jmp    c0019400 <SoundPort::buffer32(int*, int)+0x58>
c00193e2:	66 90                	xchg   ax,ax
c00193e4:	8d 69 01             	lea    ebp,[ecx+0x1]
c00193e7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c00193ea:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00193ed:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00193f0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c00193f4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00193f7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00193fa:	74 18                	je     c0019414 <SoundPort::buffer32(int*, int)+0x6c>
c00193fc:	89 de                	mov    esi,ebx
c00193fe:	66 90                	xchg   ax,ax
c0019400:	8d 5e 01             	lea    ebx,[esi+0x1]
c0019403:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0019406:	75 dc                	jne    c00193e4 <SoundPort::buffer32(int*, int)+0x3c>
c0019408:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001940b:	90                   	nop
c001940c:	5a                   	pop    edx
c001940d:	5b                   	pop    ebx
c001940e:	5e                   	pop    esi
c001940f:	5f                   	pop    edi
c0019410:	5d                   	pop    ebp
c0019411:	c3                   	ret    
c0019412:	66 90                	xchg   ax,ax
c0019414:	5a                   	pop    edx
c0019415:	8d 46 02             	lea    eax,[esi+0x2]
c0019418:	5b                   	pop    ebx
c0019419:	5e                   	pop    esi
c001941a:	5f                   	pop    edi
c001941b:	5d                   	pop    ebp
c001941c:	c3                   	ret    
c001941d:	8d 76 00             	lea    esi,[esi+0x0]
c0019420:	5a                   	pop    edx
c0019421:	31 c0                	xor    eax,eax
c0019423:	5b                   	pop    ebx
c0019424:	5e                   	pop    esi
c0019425:	5f                   	pop    edi
c0019426:	5d                   	pop    ebp
c0019427:	c3                   	ret    
c0019428:	b8 01 00 00 00       	mov    eax,0x1
c001942d:	eb dd                	jmp    c001940c <SoundPort::buffer32(int*, int)+0x64>
c001942f:	90                   	nop

c0019430 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0019430:	57                   	push   edi
c0019431:	56                   	push   esi
c0019432:	53                   	push   ebx
c0019433:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019437:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001943b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0019441:	39 03                	cmp    DWORD PTR [ebx],eax
c0019443:	74 13                	je     c0019458 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0019445:	83 ec 0c             	sub    esp,0xc
c0019448:	68 ac 0c 02 c0       	push   0xc0020cac
c001944d:	e8 5d 6f ff ff       	call   c00103af <KePanic(char const*)>
c0019452:	83 c4 10             	add    esp,0x10
c0019455:	8d 76 00             	lea    esi,[esi+0x0]
c0019458:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001945e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0019461:	74 11                	je     c0019474 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0019463:	83 ec 0c             	sub    esp,0xc
c0019466:	68 eb 0c 02 c0       	push   0xc0020ceb
c001946b:	e8 3f 6f ff ff       	call   c00103af <KePanic(char const*)>
c0019470:	83 c4 10             	add    esp,0x10
c0019473:	90                   	nop
c0019474:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001947a:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001947d:	74 11                	je     c0019490 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001947f:	83 ec 0c             	sub    esp,0xc
c0019482:	68 eb 0c 02 c0       	push   0xc0020ceb
c0019487:	e8 23 6f ff ff       	call   c00103af <KePanic(char const*)>
c001948c:	83 c4 10             	add    esp,0x10
c001948f:	90                   	nop
c0019490:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019493:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0019497:	7e 07                	jle    c00194a0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0019499:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001949d:	8d 76 00             	lea    esi,[esi+0x0]
c00194a0:	85 f6                	test   esi,esi
c00194a2:	7e 2c                	jle    c00194d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00194a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00194a8:	8d 3c 36             	lea    edi,[esi+esi*1]
c00194ab:	31 c9                	xor    ecx,ecx
c00194ad:	01 d7                	add    edi,edx
c00194af:	90                   	nop
c00194b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00194b3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00194b6:	85 c0                	test   eax,eax
c00194b8:	79 06                	jns    c00194c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00194ba:	05 ff 7f 00 00       	add    eax,0x7fff
c00194bf:	90                   	nop
c00194c0:	c1 f8 0f             	sar    eax,0xf
c00194c3:	83 c1 04             	add    ecx,0x4
c00194c6:	66 01 02             	add    WORD PTR [edx],ax
c00194c9:	83 c2 02             	add    edx,0x2
c00194cc:	39 d7                	cmp    edi,edx
c00194ce:	75 e0                	jne    c00194b0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c00194d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00194d3:	50                   	push   eax
c00194d4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00194d7:	29 f0                	sub    eax,esi
c00194d9:	c1 e0 02             	shl    eax,0x2
c00194dc:	50                   	push   eax
c00194dd:	8d 04 b2             	lea    eax,[edx+esi*4]
c00194e0:	50                   	push   eax
c00194e1:	52                   	push   edx
c00194e2:	e8 e9 6e fe ff       	call   c00003d0 <memmove>
c00194e7:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c00194ea:	83 c4 10             	add    esp,0x10
c00194ed:	89 f0                	mov    eax,esi
c00194ef:	5b                   	pop    ebx
c00194f0:	5e                   	pop    esi
c00194f1:	5f                   	pop    edi
c00194f2:	c3                   	ret    
c00194f3:	90                   	nop

c00194f4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c00194f4:	57                   	push   edi
c00194f5:	56                   	push   esi
c00194f6:	53                   	push   ebx
c00194f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00194fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00194ff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019503:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0019509:	39 06                	cmp    DWORD PTR [esi],eax
c001950b:	74 13                	je     c0019520 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001950d:	83 ec 0c             	sub    esp,0xc
c0019510:	68 cc 0c 02 c0       	push   0xc0020ccc
c0019515:	e8 95 6e ff ff       	call   c00103af <KePanic(char const*)>
c001951a:	83 c4 10             	add    esp,0x10
c001951d:	8d 76 00             	lea    esi,[esi+0x0]
c0019520:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0019526:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0019529:	74 11                	je     c001953c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001952b:	83 ec 0c             	sub    esp,0xc
c001952e:	68 07 0d 02 c0       	push   0xc0020d07
c0019533:	e8 77 6e ff ff       	call   c00103af <KePanic(char const*)>
c0019538:	83 c4 10             	add    esp,0x10
c001953b:	90                   	nop
c001953c:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0019542:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0019545:	74 11                	je     c0019558 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0019547:	83 ec 0c             	sub    esp,0xc
c001954a:	68 07 0d 02 c0       	push   0xc0020d07
c001954f:	e8 5b 6e ff ff       	call   c00103af <KePanic(char const*)>
c0019554:	83 c4 10             	add    esp,0x10
c0019557:	90                   	nop
c0019558:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001955b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001955f:	7e 07                	jle    c0019568 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0019561:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019565:	8d 76 00             	lea    esi,[esi+0x0]
c0019568:	85 ff                	test   edi,edi
c001956a:	7e 1c                	jle    c0019588 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001956c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0019573:	31 c0                	xor    eax,eax
c0019575:	8d 76 00             	lea    esi,[esi+0x0]
c0019578:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001957b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001957e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0019581:	83 c0 04             	add    eax,0x4
c0019584:	39 c1                	cmp    ecx,eax
c0019586:	75 f0                	jne    c0019578 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0019588:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001958b:	50                   	push   eax
c001958c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001958f:	29 f8                	sub    eax,edi
c0019591:	c1 e0 02             	shl    eax,0x2
c0019594:	50                   	push   eax
c0019595:	8d 04 ba             	lea    eax,[edx+edi*4]
c0019598:	50                   	push   eax
c0019599:	52                   	push   edx
c001959a:	e8 31 6e fe ff       	call   c00003d0 <memmove>
c001959f:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00195a2:	83 c4 10             	add    esp,0x10
c00195a5:	89 f8                	mov    eax,edi
c00195a7:	5b                   	pop    ebx
c00195a8:	5e                   	pop    esi
c00195a9:	5f                   	pop    edi
c00195aa:	c3                   	ret    
c00195ab:	90                   	nop

c00195ac <PCI::open(int, int, void*)>:
c00195ac:	83 ec 18             	sub    esp,0x18
c00195af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00195b7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00195bd:	8b 10                	mov    edx,DWORD PTR [eax]
c00195bf:	50                   	push   eax
c00195c0:	ff 52 18             	call   DWORD PTR [edx+0x18]
c00195c3:	31 c0                	xor    eax,eax
c00195c5:	83 c4 1c             	add    esp,0x1c
c00195c8:	c3                   	ret    
c00195c9:	90                   	nop

c00195ca <PCI::close(int, int, void*)>:
c00195ca:	31 c0                	xor    eax,eax
c00195cc:	c3                   	ret    
c00195cd:	90                   	nop

c00195ce <PCI::PCI()>:
c00195ce:	83 ec 0c             	sub    esp,0xc
c00195d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195d5:	83 ec 08             	sub    esp,0x8
c00195d8:	68 23 0d 02 c0       	push   0xc0020d23
c00195dd:	50                   	push   eax
c00195de:	e8 a9 1d ff ff       	call   c000b38c <Bus::Bus(char const*)>
c00195e3:	83 c4 10             	add    esp,0x10
c00195e6:	ba cc 0d 02 c0       	mov    edx,0xc0020dcc
c00195eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195ef:	89 10                	mov    DWORD PTR [eax],edx
c00195f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195f5:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c00195ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019603:	a3 40 7b 02 c0       	mov    ds:0xc0027b40,eax
c0019608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001960c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019612:	31 d2                	xor    edx,edx
c0019614:	88 c2                	mov    dl,al
c0019616:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001961a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0019621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019625:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001962b:	31 d2                	xor    edx,edx
c001962d:	88 c2                	mov    dl,al
c001962f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019633:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0019638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001963c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0019642:	8d 50 01             	lea    edx,[eax+0x1]
c0019645:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019649:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001964f:	31 d2                	xor    edx,edx
c0019651:	88 c2                	mov    dl,al
c0019653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019657:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001965b:	83 c9 c0             	or     ecx,0xffffffc0
c001965e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0019662:	90                   	nop
c0019663:	83 c4 0c             	add    esp,0xc
c0019666:	c3                   	ret    
c0019667:	90                   	nop

c0019668 <PCI::readBAR8(unsigned int, int)>:
c0019668:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001966c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019670:	f6 c2 01             	test   dl,0x1
c0019673:	74 07                	je     c001967c <PCI::readBAR8(unsigned int, int)+0x14>
c0019675:	83 e2 fc             	and    edx,0xfffffffc
c0019678:	01 c2                	add    edx,eax
c001967a:	ec                   	in     al,dx
c001967b:	c3                   	ret    
c001967c:	83 e2 f0             	and    edx,0xfffffff0
c001967f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0019682:	c3                   	ret    
c0019683:	90                   	nop

c0019684 <PCI::readBAR16(unsigned int, int)>:
c0019684:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019688:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001968c:	f6 c2 01             	test   dl,0x1
c001968f:	74 08                	je     c0019699 <PCI::readBAR16(unsigned int, int)+0x15>
c0019691:	83 e2 fc             	and    edx,0xfffffffc
c0019694:	01 c2                	add    edx,eax
c0019696:	66 ed                	in     ax,dx
c0019698:	c3                   	ret    
c0019699:	83 e2 f0             	and    edx,0xfffffff0
c001969c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00196a0:	c3                   	ret    
c00196a1:	90                   	nop

c00196a2 <PCI::readBAR32(unsigned int, int)>:
c00196a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00196a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196aa:	f6 c2 01             	test   dl,0x1
c00196ad:	74 07                	je     c00196b6 <PCI::readBAR32(unsigned int, int)+0x14>
c00196af:	83 e2 fc             	and    edx,0xfffffffc
c00196b2:	01 c2                	add    edx,eax
c00196b4:	ed                   	in     eax,dx
c00196b5:	c3                   	ret    
c00196b6:	83 e2 f0             	and    edx,0xfffffff0
c00196b9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00196bc:	c3                   	ret    
c00196bd:	90                   	nop

c00196be <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00196be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00196c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00196ca:	f6 c2 01             	test   dl,0x1
c00196cd:	74 07                	je     c00196d6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00196cf:	83 e2 fc             	and    edx,0xfffffffc
c00196d2:	01 ca                	add    edx,ecx
c00196d4:	ee                   	out    dx,al
c00196d5:	c3                   	ret    
c00196d6:	83 e2 f0             	and    edx,0xfffffff0
c00196d9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00196dc:	c3                   	ret    
c00196dd:	90                   	nop

c00196de <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c00196de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00196e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00196ea:	f6 c2 01             	test   dl,0x1
c00196ed:	74 08                	je     c00196f7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c00196ef:	83 e2 fc             	and    edx,0xfffffffc
c00196f2:	01 ca                	add    edx,ecx
c00196f4:	66 ef                	out    dx,ax
c00196f6:	c3                   	ret    
c00196f7:	83 e2 f0             	and    edx,0xfffffff0
c00196fa:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c00196fe:	c3                   	ret    
c00196ff:	90                   	nop

c0019700 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0019700:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019704:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019708:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001970c:	f6 c2 01             	test   dl,0x1
c001970f:	74 07                	je     c0019718 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0019711:	83 e2 fc             	and    edx,0xfffffffc
c0019714:	01 ca                	add    edx,ecx
c0019716:	ef                   	out    dx,eax
c0019717:	c3                   	ret    
c0019718:	83 e2 f0             	and    edx,0xfffffff0
c001971b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001971e:	c3                   	ret    
c001971f:	90                   	nop

c0019720 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019720:	55                   	push   ebp
c0019721:	57                   	push   edi
c0019722:	56                   	push   esi
c0019723:	53                   	push   ebx
c0019724:	83 ec 0c             	sub    esp,0xc
c0019727:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001972b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001972f:	89 f0                	mov    eax,esi
c0019731:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0019735:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019739:	3c 07                	cmp    al,0x7
c001973b:	76 10                	jbe    c001974d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001973d:	83 ec 0c             	sub    esp,0xc
c0019740:	68 2b 0d 02 c0       	push   0xc0020d2b
c0019745:	e8 65 6c ff ff       	call   c00103af <KePanic(char const*)>
c001974a:	83 c4 10             	add    esp,0x10
c001974d:	80 fb 0f             	cmp    bl,0xf
c0019750:	76 10                	jbe    c0019762 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0019752:	83 ec 0c             	sub    esp,0xc
c0019755:	68 5b 0d 02 c0       	push   0xc0020d5b
c001975a:	e8 50 6c ff ff       	call   c00103af <KePanic(char const*)>
c001975f:	83 c4 10             	add    esp,0x10
c0019762:	8d 04 36             	lea    eax,[esi+esi*1]
c0019765:	ba f8 0c 00 00       	mov    edx,0xcf8
c001976a:	83 c8 f0             	or     eax,0xfffffff0
c001976d:	ee                   	out    dx,al
c001976e:	ba fa 0c 00 00       	mov    edx,0xcfa
c0019773:	89 e8                	mov    eax,ebp
c0019775:	ee                   	out    dx,al
c0019776:	83 c4 0c             	add    esp,0xc
c0019779:	89 d8                	mov    eax,ebx
c001977b:	66 81 e7 fc 00       	and    di,0xfc
c0019780:	5b                   	pop    ebx
c0019781:	c1 e0 08             	shl    eax,0x8
c0019784:	5e                   	pop    esi
c0019785:	09 f8                	or     eax,edi
c0019787:	5f                   	pop    edi
c0019788:	66 0d 00 c0          	or     ax,0xc000
c001978c:	5d                   	pop    ebp
c001978d:	c3                   	ret    

c001978e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001978e:	57                   	push   edi
c001978f:	56                   	push   esi
c0019790:	53                   	push   ebx
c0019791:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019795:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019799:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001979f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00197a3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00197a7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00197ab:	83 ff 01             	cmp    edi,0x1
c00197ae:	75 3e                	jne    c00197ee <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00197b0:	89 de                	mov    esi,ebx
c00197b2:	0f b6 c0             	movzx  eax,al
c00197b5:	81 e6 fc 00 00 00    	and    esi,0xfc
c00197bb:	c1 e0 10             	shl    eax,0x10
c00197be:	0f b6 c9             	movzx  ecx,cl
c00197c1:	09 f0                	or     eax,esi
c00197c3:	c1 e1 08             	shl    ecx,0x8
c00197c6:	0f b6 d2             	movzx  edx,dl
c00197c9:	09 c8                	or     eax,ecx
c00197cb:	c1 e2 0b             	shl    edx,0xb
c00197ce:	09 d0                	or     eax,edx
c00197d0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00197d5:	0d 00 00 00 80       	or     eax,0x80000000
c00197da:	ef                   	out    dx,eax
c00197db:	ba fc 0c 00 00       	mov    edx,0xcfc
c00197e0:	ed                   	in     eax,dx
c00197e1:	83 e3 02             	and    ebx,0x2
c00197e4:	0f b6 cb             	movzx  ecx,bl
c00197e7:	c1 e1 03             	shl    ecx,0x3
c00197ea:	d3 e8                	shr    eax,cl
c00197ec:	eb 43                	jmp    c0019831 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c00197ee:	83 ff 02             	cmp    edi,0x2
c00197f1:	75 2c                	jne    c001981f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c00197f3:	83 ec 0c             	sub    esp,0xc
c00197f6:	0f b6 c9             	movzx  ecx,cl
c00197f9:	0f b6 d2             	movzx  edx,dl
c00197fc:	0f b6 fb             	movzx  edi,bl
c00197ff:	0f b6 c0             	movzx  eax,al
c0019802:	57                   	push   edi
c0019803:	51                   	push   ecx
c0019804:	52                   	push   edx
c0019805:	50                   	push   eax
c0019806:	56                   	push   esi
c0019807:	e8 14 ff ff ff       	call   c0019720 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001980c:	89 c2                	mov    edx,eax
c001980e:	ed                   	in     eax,dx
c001980f:	83 e3 02             	and    ebx,0x2
c0019812:	83 c4 20             	add    esp,0x20
c0019815:	0f b6 cb             	movzx  ecx,bl
c0019818:	c1 e1 03             	shl    ecx,0x3
c001981b:	d3 e8                	shr    eax,cl
c001981d:	eb 12                	jmp    c0019831 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001981f:	83 ec 0c             	sub    esp,0xc
c0019822:	68 8b 0d 02 c0       	push   0xc0020d8b
c0019827:	e8 83 6b ff ff       	call   c00103af <KePanic(char const*)>
c001982c:	83 c4 10             	add    esp,0x10
c001982f:	31 c0                	xor    eax,eax
c0019831:	5b                   	pop    ebx
c0019832:	5e                   	pop    esi
c0019833:	5f                   	pop    edi
c0019834:	c3                   	ret    
c0019835:	90                   	nop

c0019836 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0019836:	83 ec 18             	sub    esp,0x18
c0019839:	6a 00                	push   0x0
c001983b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019840:	50                   	push   eax
c0019841:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019846:	50                   	push   eax
c0019847:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001984c:	50                   	push   eax
c001984d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019851:	e8 38 ff ff ff       	call   c001978e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019856:	83 c4 2c             	add    esp,0x2c
c0019859:	c3                   	ret    

c001985a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001985a:	83 ec 18             	sub    esp,0x18
c001985d:	6a 0e                	push   0xe
c001985f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019864:	50                   	push   eax
c0019865:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001986a:	50                   	push   eax
c001986b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019870:	50                   	push   eax
c0019871:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019875:	e8 14 ff ff ff       	call   c001978e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001987a:	83 c4 2c             	add    esp,0x2c
c001987d:	0f b6 c0             	movzx  eax,al
c0019880:	c3                   	ret    
c0019881:	90                   	nop

c0019882 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0019882:	55                   	push   ebp
c0019883:	57                   	push   edi
c0019884:	56                   	push   esi
c0019885:	53                   	push   ebx
c0019886:	83 ec 18             	sub    esp,0x18
c0019889:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001988e:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0019893:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0019898:	6a 0a                	push   0xa
c001989a:	56                   	push   esi
c001989b:	55                   	push   ebp
c001989c:	57                   	push   edi
c001989d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00198a1:	e8 e8 fe ff ff       	call   c001978e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00198a6:	83 c4 14             	add    esp,0x14
c00198a9:	89 c3                	mov    ebx,eax
c00198ab:	6a 0a                	push   0xa
c00198ad:	0f b6 db             	movzx  ebx,bl
c00198b0:	56                   	push   esi
c00198b1:	55                   	push   ebp
c00198b2:	57                   	push   edi
c00198b3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00198b7:	e8 d2 fe ff ff       	call   c001978e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00198bc:	83 c4 2c             	add    esp,0x2c
c00198bf:	25 00 ff 00 00       	and    eax,0xff00
c00198c4:	09 d8                	or     eax,ebx
c00198c6:	5b                   	pop    ebx
c00198c7:	5e                   	pop    esi
c00198c8:	5f                   	pop    edi
c00198c9:	5d                   	pop    ebp
c00198ca:	c3                   	ret    
c00198cb:	90                   	nop

c00198cc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00198cc:	83 ec 18             	sub    esp,0x18
c00198cf:	6a 08                	push   0x8
c00198d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00198d6:	50                   	push   eax
c00198d7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00198dc:	50                   	push   eax
c00198dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00198e2:	50                   	push   eax
c00198e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198e7:	e8 a2 fe ff ff       	call   c001978e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00198ec:	83 c4 2c             	add    esp,0x2c
c00198ef:	0f b6 c4             	movzx  eax,ah
c00198f2:	c3                   	ret    
c00198f3:	90                   	nop

c00198f4 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c00198f4:	83 ec 18             	sub    esp,0x18
c00198f7:	6a 08                	push   0x8
c00198f9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00198fe:	50                   	push   eax
c00198ff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019904:	50                   	push   eax
c0019905:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001990a:	50                   	push   eax
c001990b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001990f:	e8 7a fe ff ff       	call   c001978e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019914:	83 c4 2c             	add    esp,0x2c
c0019917:	c3                   	ret    

c0019918 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0019918:	83 ec 18             	sub    esp,0x18
c001991b:	6a 3c                	push   0x3c
c001991d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019922:	50                   	push   eax
c0019923:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019928:	50                   	push   eax
c0019929:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001992e:	50                   	push   eax
c001992f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019933:	e8 56 fe ff ff       	call   c001978e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019938:	83 c4 2c             	add    esp,0x2c
c001993b:	c3                   	ret    

c001993c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001993c:	83 ec 18             	sub    esp,0x18
c001993f:	6a 18                	push   0x18
c0019941:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019946:	50                   	push   eax
c0019947:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001994c:	50                   	push   eax
c001994d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019952:	50                   	push   eax
c0019953:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019957:	e8 32 fe ff ff       	call   c001978e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001995c:	83 c4 2c             	add    esp,0x2c
c001995f:	0f b6 c4             	movzx  eax,ah
c0019962:	c3                   	ret    
c0019963:	90                   	nop

c0019964 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0019964:	55                   	push   ebp
c0019965:	57                   	push   edi
c0019966:	56                   	push   esi
c0019967:	53                   	push   ebx
c0019968:	83 ec 28             	sub    esp,0x28
c001996b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001996f:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0019974:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0019979:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001997e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0019985:	8d 43 12             	lea    eax,[ebx+0x12]
c0019988:	83 c3 10             	add    ebx,0x10
c001998b:	0f b6 c0             	movzx  eax,al
c001998e:	0f b6 db             	movzx  ebx,bl
c0019991:	50                   	push   eax
c0019992:	51                   	push   ecx
c0019993:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0019997:	57                   	push   edi
c0019998:	55                   	push   ebp
c0019999:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001999d:	e8 ec fd ff ff       	call   c001978e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00199a2:	83 c4 14             	add    esp,0x14
c00199a5:	89 c6                	mov    esi,eax
c00199a7:	53                   	push   ebx
c00199a8:	c1 e6 10             	shl    esi,0x10
c00199ab:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00199af:	51                   	push   ecx
c00199b0:	57                   	push   edi
c00199b1:	55                   	push   ebp
c00199b2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00199b6:	e8 d3 fd ff ff       	call   c001978e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00199bb:	83 c4 3c             	add    esp,0x3c
c00199be:	0f b7 c0             	movzx  eax,ax
c00199c1:	5b                   	pop    ebx
c00199c2:	09 f0                	or     eax,esi
c00199c4:	5e                   	pop    esi
c00199c5:	5f                   	pop    edi
c00199c6:	5d                   	pop    ebp
c00199c7:	c3                   	ret    

c00199c8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c00199c8:	55                   	push   ebp
c00199c9:	57                   	push   edi
c00199ca:	56                   	push   esi
c00199cb:	53                   	push   ebx
c00199cc:	83 ec 0c             	sub    esp,0xc
c00199cf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00199d3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00199d7:	89 f5                	mov    ebp,esi
c00199d9:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c00199df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00199e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00199e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00199eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00199ef:	83 f9 01             	cmp    ecx,0x1
c00199f2:	75 5d                	jne    c0019a51 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c00199f4:	0f b6 c8             	movzx  ecx,al
c00199f7:	0f b6 d2             	movzx  edx,dl
c00199fa:	c1 e1 10             	shl    ecx,0x10
c00199fd:	c1 e2 0b             	shl    edx,0xb
c0019a00:	89 f0                	mov    eax,esi
c0019a02:	25 fc 00 00 00       	and    eax,0xfc
c0019a07:	09 c1                	or     ecx,eax
c0019a09:	89 e8                	mov    eax,ebp
c0019a0b:	0f b6 c0             	movzx  eax,al
c0019a0e:	c1 e0 08             	shl    eax,0x8
c0019a11:	09 c1                	or     ecx,eax
c0019a13:	09 d1                	or     ecx,edx
c0019a15:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019a1a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0019a20:	89 c8                	mov    eax,ecx
c0019a22:	ef                   	out    dx,eax
c0019a23:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019a28:	ed                   	in     eax,dx
c0019a29:	0f b7 db             	movzx  ebx,bx
c0019a2c:	83 e6 02             	and    esi,0x2
c0019a2f:	74 0a                	je     c0019a3b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0019a31:	0f b7 d0             	movzx  edx,ax
c0019a34:	c1 e3 10             	shl    ebx,0x10
c0019a37:	09 d3                	or     ebx,edx
c0019a39:	eb 05                	jmp    c0019a40 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0019a3b:	66 31 c0             	xor    ax,ax
c0019a3e:	09 c3                	or     ebx,eax
c0019a40:	ba f8 0c 00 00       	mov    edx,0xcf8
c0019a45:	89 c8                	mov    eax,ecx
c0019a47:	ef                   	out    dx,eax
c0019a48:	ba fc 0c 00 00       	mov    edx,0xcfc
c0019a4d:	89 d8                	mov    eax,ebx
c0019a4f:	eb 41                	jmp    c0019a92 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019a51:	83 f9 02             	cmp    ecx,0x2
c0019a54:	75 45                	jne    c0019a9b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c0019a56:	83 ec 0c             	sub    esp,0xc
c0019a59:	0f b6 d2             	movzx  edx,dl
c0019a5c:	89 f1                	mov    ecx,esi
c0019a5e:	0f b6 c0             	movzx  eax,al
c0019a61:	0f b6 f1             	movzx  esi,cl
c0019a64:	89 e9                	mov    ecx,ebp
c0019a66:	56                   	push   esi
c0019a67:	0f b6 c9             	movzx  ecx,cl
c0019a6a:	51                   	push   ecx
c0019a6b:	52                   	push   edx
c0019a6c:	50                   	push   eax
c0019a6d:	57                   	push   edi
c0019a6e:	e8 ad fc ff ff       	call   c0019720 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019a73:	89 c2                	mov    edx,eax
c0019a75:	ed                   	in     eax,dx
c0019a76:	83 c4 20             	add    esp,0x20
c0019a79:	0f b7 db             	movzx  ebx,bx
c0019a7c:	f6 c2 02             	test   dl,0x2
c0019a7f:	74 0c                	je     c0019a8d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c0019a81:	0f b7 c8             	movzx  ecx,ax
c0019a84:	89 d8                	mov    eax,ebx
c0019a86:	c1 e0 10             	shl    eax,0x10
c0019a89:	09 c8                	or     eax,ecx
c0019a8b:	eb 05                	jmp    c0019a92 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0019a8d:	66 31 c0             	xor    ax,ax
c0019a90:	09 d8                	or     eax,ebx
c0019a92:	ef                   	out    dx,eax
c0019a93:	83 c4 0c             	add    esp,0xc
c0019a96:	5b                   	pop    ebx
c0019a97:	5e                   	pop    esi
c0019a98:	5f                   	pop    edi
c0019a99:	5d                   	pop    ebp
c0019a9a:	c3                   	ret    
c0019a9b:	c7 44 24 20 8b 0d 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020d8b
c0019aa3:	83 c4 0c             	add    esp,0xc
c0019aa6:	5b                   	pop    ebx
c0019aa7:	5e                   	pop    esi
c0019aa8:	5f                   	pop    edi
c0019aa9:	5d                   	pop    ebp
c0019aaa:	e9 00 69 ff ff       	jmp    c00103af <KePanic(char const*)>
c0019aaf:	90                   	nop

c0019ab0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0019ab0:	55                   	push   ebp
c0019ab1:	57                   	push   edi
c0019ab2:	56                   	push   esi
c0019ab3:	53                   	push   ebx
c0019ab4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019aba:	80 3d 4c 7b 02 c0 00 	cmp    BYTE PTR ds:0xc0027b4c,0x0
c0019ac1:	0f 85 bd 00 00 00    	jne    c0019b84 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xd4>
c0019ac7:	83 ec 0c             	sub    esp,0xc
c0019aca:	68 14 01 00 00       	push   0x114
c0019acf:	e8 91 dd fe ff       	call   c0007865 <malloc>
c0019ad4:	83 c4 0c             	add    esp,0xc
c0019ad7:	89 c3                	mov    ebx,eax
c0019ad9:	ff 35 90 71 02 c0    	push   DWORD PTR ds:0xc0027190
c0019adf:	68 91 0d 02 c0       	push   0xc0020d91
c0019ae4:	50                   	push   eax
c0019ae5:	e8 86 10 ff ff       	call   c000ab70 <File::File(char const*, Process*)>
c0019aea:	83 c4 10             	add    esp,0x10
c0019aed:	85 db                	test   ebx,ebx
c0019aef:	0f 84 47 02 00 00    	je     c0019d3c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019af5:	56                   	push   esi
c0019af6:	56                   	push   esi
c0019af7:	6a 01                	push   0x1
c0019af9:	53                   	push   ebx
c0019afa:	e8 31 11 ff ff       	call   c000ac30 <File::open(FileOpenMode)>
c0019aff:	83 c4 10             	add    esp,0x10
c0019b02:	85 c0                	test   eax,eax
c0019b04:	0f 85 32 02 00 00    	jne    c0019d3c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019b0a:	52                   	push   edx
c0019b0b:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0019b0f:	50                   	push   eax
c0019b10:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019b14:	50                   	push   eax
c0019b15:	53                   	push   ebx
c0019b16:	e8 c1 13 ff ff       	call   c000aedc <File::stat(unsigned long long*, bool*)>
c0019b1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019b1f:	40                   	inc    eax
c0019b20:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b23:	e8 3d dd fe ff       	call   c0007865 <malloc>
c0019b28:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019b2c:	a3 48 7b 02 c0       	mov    ds:0xc0027b48,eax
c0019b31:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0019b35:	59                   	pop    ecx
c0019b36:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019b38:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0019b3c:	51                   	push   ecx
c0019b3d:	50                   	push   eax
c0019b3e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019b42:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0019b46:	53                   	push   ebx
c0019b47:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0019b4a:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0019b4e:	83 c4 20             	add    esp,0x20
c0019b51:	89 c8                	mov    eax,ecx
c0019b53:	99                   	cdq    
c0019b54:	3b 54 24 24          	cmp    edx,DWORD PTR [esp+0x24]
c0019b58:	0f 85 de 01 00 00    	jne    c0019d3c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019b5e:	3b 4c 24 20          	cmp    ecx,DWORD PTR [esp+0x20]
c0019b62:	0f 85 d4 01 00 00    	jne    c0019d3c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019b68:	83 ec 0c             	sub    esp,0xc
c0019b6b:	53                   	push   ebx
c0019b6c:	e8 1d 11 ff ff       	call   c000ac8e <File::close()>
c0019b71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019b75:	c6 05 4c 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027b4c,0x1
c0019b7c:	a3 44 7b 02 c0       	mov    ds:0xc0027b44,eax
c0019b81:	83 c4 10             	add    esp,0x10
c0019b84:	a1 44 7b 02 c0       	mov    eax,ds:0xc0027b44
c0019b89:	8b 15 48 7b 02 c0    	mov    edx,DWORD PTR ds:0xc0027b48
c0019b8f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019b92:	31 ff                	xor    edi,edi
c0019b94:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0019b9c:	31 f6                	xor    esi,esi
c0019b9e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0019ba3:	31 db                	xor    ebx,ebx
c0019ba5:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0019bad:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0019bb2:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0019bb9:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0019bbd:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0019bc4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019bc8:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0019bcb:	0f 8e 6b 01 00 00    	jle    c0019d3c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x28c>
c0019bd1:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019bd4:	d4 40                	aam    0x40
c0019bd6:	d5 39                	aad    0x39
c0019bd8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019bdc:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0019be0:	d4 40                	aam    0x40
c0019be2:	d5 39                	aad    0x39
c0019be4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019be8:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0019bec:	d4 40                	aam    0x40
c0019bee:	d5 39                	aad    0x39
c0019bf0:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019bf4:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0019bf8:	d4 40                	aam    0x40
c0019bfa:	d5 39                	aad    0x39
c0019bfc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019c00:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0019c04:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019c08:	3c 56                	cmp    al,0x56
c0019c0a:	74 45                	je     c0019c51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a1>
c0019c0c:	d4 40                	aam    0x40
c0019c0e:	d5 39                	aad    0x39
c0019c10:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019c13:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0019c17:	0f b6 c9             	movzx  ecx,cl
c0019c1a:	c1 e1 04             	shl    ecx,0x4
c0019c1d:	d4 40                	aam    0x40
c0019c1f:	d5 39                	aad    0x39
c0019c21:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019c24:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0019c28:	0f b6 db             	movzx  ebx,bl
c0019c2b:	09 cb                	or     ebx,ecx
c0019c2d:	c1 e3 04             	shl    ebx,0x4
c0019c30:	d4 40                	aam    0x40
c0019c32:	d5 39                	aad    0x39
c0019c34:	8d 48 d0             	lea    ecx,[eax-0x30]
c0019c37:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0019c3b:	0f b6 c9             	movzx  ecx,cl
c0019c3e:	09 cb                	or     ebx,ecx
c0019c40:	c1 e3 04             	shl    ebx,0x4
c0019c43:	89 d9                	mov    ecx,ebx
c0019c45:	d4 40                	aam    0x40
c0019c47:	d5 39                	aad    0x39
c0019c49:	8d 58 d0             	lea    ebx,[eax-0x30]
c0019c4c:	0f b6 db             	movzx  ebx,bl
c0019c4f:	09 cb                	or     ebx,ecx
c0019c51:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0019c55:	80 f9 58             	cmp    cl,0x58
c0019c58:	74 47                	je     c0019ca1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f1>
c0019c5a:	88 c8                	mov    al,cl
c0019c5c:	d4 40                	aam    0x40
c0019c5e:	d5 39                	aad    0x39
c0019c60:	83 e8 30             	sub    eax,0x30
c0019c63:	0f b6 e8             	movzx  ebp,al
c0019c66:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0019c6a:	c1 e5 04             	shl    ebp,0x4
c0019c6d:	d4 40                	aam    0x40
c0019c6f:	d5 39                	aad    0x39
c0019c71:	83 e8 30             	sub    eax,0x30
c0019c74:	0f b6 f0             	movzx  esi,al
c0019c77:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0019c7b:	09 ee                	or     esi,ebp
c0019c7d:	c1 e6 04             	shl    esi,0x4
c0019c80:	d4 40                	aam    0x40
c0019c82:	d5 39                	aad    0x39
c0019c84:	83 e8 30             	sub    eax,0x30
c0019c87:	0f b6 e8             	movzx  ebp,al
c0019c8a:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0019c8e:	09 ee                	or     esi,ebp
c0019c90:	c1 e6 04             	shl    esi,0x4
c0019c93:	89 f5                	mov    ebp,esi
c0019c95:	d4 40                	aam    0x40
c0019c97:	d5 39                	aad    0x39
c0019c99:	83 e8 30             	sub    eax,0x30
c0019c9c:	0f b6 f0             	movzx  esi,al
c0019c9f:	09 ee                	or     esi,ebp
c0019ca1:	83 c7 10             	add    edi,0x10
c0019ca4:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0019ca8:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0019cab:	3c 0a                	cmp    al,0xa
c0019cad:	74 09                	je     c0019cb8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x208>
c0019caf:	45                   	inc    ebp
c0019cb0:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0019cb3:	75 16                	jne    c0019ccb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x21b>
c0019cb5:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0019cb8:	3c 0a                	cmp    al,0xa
c0019cba:	0f 94 c0             	sete   al
c0019cbd:	0f b6 c0             	movzx  eax,al
c0019cc0:	01 c7                	add    edi,eax
c0019cc2:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0019cc7:	75 0c                	jne    c0019cd5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x225>
c0019cc9:	eb 15                	jmp    c0019ce0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x230>
c0019ccb:	47                   	inc    edi
c0019ccc:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0019ccf:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0019cd3:	eb d3                	jmp    c0019ca8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f8>
c0019cd5:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0019cda:	0f 85 e8 fe ff ff    	jne    c0019bc8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019ce0:	80 f9 58             	cmp    cl,0x58
c0019ce3:	74 0b                	je     c0019cf0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x240>
c0019ce5:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0019cea:	0f 85 d8 fe ff ff    	jne    c0019bc8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019cf0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0019cf4:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019cf8:	c1 e1 04             	shl    ecx,0x4
c0019cfb:	83 e8 30             	sub    eax,0x30
c0019cfe:	09 c8                	or     eax,ecx
c0019d00:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0019d04:	0f 85 be fe ff ff    	jne    c0019bc8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019d0a:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0019d0e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019d12:	c1 e1 04             	shl    ecx,0x4
c0019d15:	83 e8 30             	sub    eax,0x30
c0019d18:	09 c8                	or     eax,ecx
c0019d1a:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0019d1e:	0f 85 a4 fe ff ff    	jne    c0019bc8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x118>
c0019d24:	50                   	push   eax
c0019d25:	50                   	push   eax
c0019d26:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019d2a:	50                   	push   eax
c0019d2b:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0019d32:	e8 b9 68 fe ff       	call   c00005f0 <strcpy>
c0019d37:	83 c4 10             	add    esp,0x10
c0019d3a:	eb 15                	jmp    c0019d51 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a1>
c0019d3c:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0019d43:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0019d4e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0019d51:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0019d58:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019d5e:	5b                   	pop    ebx
c0019d5f:	5e                   	pop    esi
c0019d60:	5f                   	pop    edi
c0019d61:	5d                   	pop    ebp
c0019d62:	c3                   	ret    
c0019d63:	90                   	nop

c0019d64 <PCI::checkBus(unsigned char)>:
c0019d64:	56                   	push   esi
c0019d65:	53                   	push   ebx
c0019d66:	31 f6                	xor    esi,esi
c0019d68:	51                   	push   ecx
c0019d69:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0019d6d:	0f b6 c3             	movzx  eax,bl
c0019d70:	52                   	push   edx
c0019d71:	56                   	push   esi
c0019d72:	46                   	inc    esi
c0019d73:	50                   	push   eax
c0019d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019d78:	e8 f3 02 00 00       	call   c001a070 <PCI::checkDevice(unsigned char, unsigned char)>
c0019d7d:	83 c4 10             	add    esp,0x10
c0019d80:	83 fe 20             	cmp    esi,0x20
c0019d83:	75 e8                	jne    c0019d6d <PCI::checkBus(unsigned char)+0x9>
c0019d85:	58                   	pop    eax
c0019d86:	5b                   	pop    ebx
c0019d87:	5e                   	pop    esi
c0019d88:	c3                   	ret    
c0019d89:	90                   	nop

c0019d8a <PCI::foundDevice(PCIDeviceInfo)>:
c0019d8a:	55                   	push   ebp
c0019d8b:	57                   	push   edi
c0019d8c:	56                   	push   esi
c0019d8d:	53                   	push   ebx
c0019d8e:	83 ec 1c             	sub    esp,0x1c
c0019d91:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019d95:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0019d9b:	0f 84 52 01 00 00    	je     c0019ef3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0019da1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0019da5:	66 81 f9 06 04       	cmp    cx,0x406
c0019daa:	75 2c                	jne    c0019dd8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0019dac:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0019db1:	50                   	push   eax
c0019db2:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0019db7:	50                   	push   eax
c0019db8:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0019dbd:	50                   	push   eax
c0019dbe:	56                   	push   esi
c0019dbf:	e8 78 fb ff ff       	call   c001993c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0019dc4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019dc8:	0f b6 c0             	movzx  eax,al
c0019dcb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0019dcf:	83 c4 2c             	add    esp,0x2c
c0019dd2:	5b                   	pop    ebx
c0019dd3:	5e                   	pop    esi
c0019dd4:	5f                   	pop    edi
c0019dd5:	5d                   	pop    ebp
c0019dd6:	eb 8c                	jmp    c0019d64 <PCI::checkBus(unsigned char)>
c0019dd8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0019ddc:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0019de2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019de6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0019dea:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0019dee:	88 d3                	mov    bl,dl
c0019df0:	85 c0                	test   eax,eax
c0019df2:	74 33                	je     c0019e27 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0019df4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019df7:	85 d2                	test   edx,edx
c0019df9:	74 28                	je     c0019e23 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019dfb:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0019e01:	31 ef                	xor    edi,ebp
c0019e03:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0019e09:	75 18                	jne    c0019e23 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019e0b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019e0f:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0019e15:	75 0c                	jne    c0019e23 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0019e17:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0019e1d:	0f 84 d0 00 00 00    	je     c0019ef3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0019e23:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e25:	eb c9                	jmp    c0019df0 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0019e27:	66 81 f9 01 06       	cmp    cx,0x601
c0019e2c:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0019e30:	75 19                	jne    c0019e4b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0019e32:	83 ec 0c             	sub    esp,0xc
c0019e35:	68 64 01 00 00       	push   0x164
c0019e3a:	e8 26 da fe ff       	call   c0007865 <malloc>
c0019e3f:	89 c5                	mov    ebp,eax
c0019e41:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e44:	e8 47 0e 00 00       	call   c001ac90 <SATABus::SATABus()>
c0019e49:	eb 1e                	jmp    c0019e69 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0019e4b:	66 81 f9 01 01       	cmp    cx,0x101
c0019e50:	75 60                	jne    c0019eb2 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0019e52:	83 ec 0c             	sub    esp,0xc
c0019e55:	68 70 02 00 00       	push   0x270
c0019e5a:	e8 06 da fe ff       	call   c0007865 <malloc>
c0019e5f:	89 c5                	mov    ebp,eax
c0019e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e64:	e8 cb 02 00 00       	call   c001a134 <IDE::IDE()>
c0019e69:	58                   	pop    eax
c0019e6a:	5a                   	pop    edx
c0019e6b:	55                   	push   ebp
c0019e6c:	56                   	push   esi
c0019e6d:	e8 c6 1b ff ff       	call   c000ba38 <Device::addChild(Device*)>
c0019e72:	83 ec 1c             	sub    esp,0x1c
c0019e75:	b9 09 00 00 00       	mov    ecx,0x9
c0019e7a:	fc                   	cld    
c0019e7b:	89 e7                	mov    edi,esp
c0019e7d:	89 de                	mov    esi,ebx
c0019e7f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019e81:	55                   	push   ebp
c0019e82:	e8 f7 1a ff ff       	call   c000b97e <Device::preOpenPCI(PCIDeviceInfo)>
c0019e87:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e8a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0019e8e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0019e96:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0019e9e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0019ea6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0019ea9:	83 c4 4c             	add    esp,0x4c
c0019eac:	5b                   	pop    ebx
c0019ead:	5e                   	pop    esi
c0019eae:	5f                   	pop    edi
c0019eaf:	5d                   	pop    ebp
c0019eb0:	ff e0                	jmp    eax
c0019eb2:	83 ec 0c             	sub    esp,0xc
c0019eb5:	68 58 01 00 00       	push   0x158
c0019eba:	e8 a6 d9 fe ff       	call   c0007865 <malloc>
c0019ebf:	89 c5                	mov    ebp,eax
c0019ec1:	58                   	pop    eax
c0019ec2:	5a                   	pop    edx
c0019ec3:	68 aa 0d 02 c0       	push   0xc0020daa
c0019ec8:	55                   	push   ebp
c0019ec9:	e8 08 1e ff ff       	call   c000bcd6 <DriverlessDevice::DriverlessDevice(char const*)>
c0019ece:	59                   	pop    ecx
c0019ecf:	5f                   	pop    edi
c0019ed0:	55                   	push   ebp
c0019ed1:	56                   	push   esi
c0019ed2:	e8 61 1b ff ff       	call   c000ba38 <Device::addChild(Device*)>
c0019ed7:	b9 09 00 00 00       	mov    ecx,0x9
c0019edc:	fc                   	cld    
c0019edd:	89 df                	mov    edi,ebx
c0019edf:	89 de                	mov    esi,ebx
c0019ee1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0019ee3:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0019ee7:	83 c4 2c             	add    esp,0x2c
c0019eea:	5b                   	pop    ebx
c0019eeb:	5e                   	pop    esi
c0019eec:	5f                   	pop    edi
c0019eed:	5d                   	pop    ebp
c0019eee:	e9 8b 1a ff ff       	jmp    c000b97e <Device::preOpenPCI(PCIDeviceInfo)>
c0019ef3:	83 c4 1c             	add    esp,0x1c
c0019ef6:	5b                   	pop    ebx
c0019ef7:	5e                   	pop    esi
c0019ef8:	5f                   	pop    edi
c0019ef9:	5d                   	pop    ebp
c0019efa:	c3                   	ret    
c0019efb:	90                   	nop

c0019efc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0019efc:	55                   	push   ebp
c0019efd:	57                   	push   edi
c0019efe:	56                   	push   esi
c0019eff:	53                   	push   ebx
c0019f00:	83 ec 68             	sub    esp,0x68
c0019f03:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0019f07:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0019f0e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019f12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0019f19:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0019f1e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0019f22:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019f29:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0019f2e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0019f32:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0019f37:	6a 0c                	push   0xc
c0019f39:	57                   	push   edi
c0019f3a:	53                   	push   ebx
c0019f3b:	56                   	push   esi
c0019f3c:	55                   	push   ebp
c0019f3d:	e8 4c f8 ff ff       	call   c001978e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019f42:	83 c4 20             	add    esp,0x20
c0019f45:	57                   	push   edi
c0019f46:	53                   	push   ebx
c0019f47:	56                   	push   esi
c0019f48:	55                   	push   ebp
c0019f49:	e8 34 f9 ff ff       	call   c0019882 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0019f4e:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0019f53:	57                   	push   edi
c0019f54:	53                   	push   ebx
c0019f55:	56                   	push   esi
c0019f56:	55                   	push   ebp
c0019f57:	e8 bc f9 ff ff       	call   c0019918 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0019f5c:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0019f60:	83 c4 14             	add    esp,0x14
c0019f63:	6a 3c                	push   0x3c
c0019f65:	57                   	push   edi
c0019f66:	53                   	push   ebx
c0019f67:	56                   	push   esi
c0019f68:	55                   	push   ebp
c0019f69:	e8 20 f8 ff ff       	call   c001978e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019f6e:	0f b6 c4             	movzx  eax,ah
c0019f71:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019f75:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0019f79:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0019f7d:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c0019f82:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0019f88:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0019f8e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019f92:	83 c4 20             	add    esp,0x20
c0019f95:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f9a:	74 30                	je     c0019fcc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0019f9c:	31 c0                	xor    eax,eax
c0019f9e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0019fa2:	7e 28                	jle    c0019fcc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0019fa4:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0019fac:	39 cb                	cmp    ebx,ecx
c0019fae:	75 19                	jne    c0019fc9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0019fb0:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0019fb8:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0019fbc:	75 0b                	jne    c0019fc9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0019fbe:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0019fc5:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0019fc9:	40                   	inc    eax
c0019fca:	eb d2                	jmp    c0019f9e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0019fcc:	31 d2                	xor    edx,edx
c0019fce:	83 ec 0c             	sub    esp,0xc
c0019fd1:	57                   	push   edi
c0019fd2:	53                   	push   ebx
c0019fd3:	56                   	push   esi
c0019fd4:	52                   	push   edx
c0019fd5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0019fd9:	55                   	push   ebp
c0019fda:	e8 85 f9 ff ff       	call   c0019964 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0019fdf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019fe3:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0019fe7:	42                   	inc    edx
c0019fe8:	83 c4 20             	add    esp,0x20
c0019feb:	83 fa 06             	cmp    edx,0x6
c0019fee:	75 de                	jne    c0019fce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0019ff0:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0019ff5:	83 ec 0c             	sub    esp,0xc
c0019ff8:	86 e0                	xchg   al,ah
c0019ffa:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0019fff:	6a 02                	push   0x2
c001a001:	57                   	push   edi
c001a002:	53                   	push   ebx
c001a003:	56                   	push   esi
c001a004:	55                   	push   ebp
c001a005:	e8 84 f7 ff ff       	call   c001978e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001a00a:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001a00f:	83 c4 20             	add    esp,0x20
c001a012:	57                   	push   edi
c001a013:	53                   	push   ebx
c001a014:	56                   	push   esi
c001a015:	55                   	push   ebp
c001a016:	e8 b1 f8 ff ff       	call   c00198cc <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001a01b:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a01f:	57                   	push   edi
c001a020:	53                   	push   ebx
c001a021:	56                   	push   esi
c001a022:	55                   	push   ebp
c001a023:	e8 0e f8 ff ff       	call   c0019836 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a028:	b9 09 00 00 00       	mov    ecx,0x9
c001a02d:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001a032:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c001a036:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001a03a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001a03e:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001a042:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001a046:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001a04a:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001a04e:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001a052:	83 ec 0c             	sub    esp,0xc
c001a055:	fc                   	cld    
c001a056:	89 e7                	mov    edi,esp
c001a058:	8d 74 24 58          	lea    esi,[esp+0x58]
c001a05c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001a05e:	55                   	push   ebp
c001a05f:	e8 26 fd ff ff       	call   c0019d8a <PCI::foundDevice(PCIDeviceInfo)>
c001a064:	81 c4 8c 00 00 00    	add    esp,0x8c
c001a06a:	5b                   	pop    ebx
c001a06b:	5e                   	pop    esi
c001a06c:	5f                   	pop    edi
c001a06d:	5d                   	pop    ebp
c001a06e:	c3                   	ret    
c001a06f:	90                   	nop

c001a070 <PCI::checkDevice(unsigned char, unsigned char)>:
c001a070:	55                   	push   ebp
c001a071:	57                   	push   edi
c001a072:	56                   	push   esi
c001a073:	53                   	push   ebx
c001a074:	83 ec 0c             	sub    esp,0xc
c001a077:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001a07b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001a080:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001a085:	6a 00                	push   0x0
c001a087:	56                   	push   esi
c001a088:	57                   	push   edi
c001a089:	55                   	push   ebp
c001a08a:	e8 a7 f7 ff ff       	call   c0019836 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a08f:	6a 00                	push   0x0
c001a091:	56                   	push   esi
c001a092:	57                   	push   edi
c001a093:	55                   	push   ebp
c001a094:	e8 63 fe ff ff       	call   c0019efc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a099:	83 c4 20             	add    esp,0x20
c001a09c:	6a 00                	push   0x0
c001a09e:	56                   	push   esi
c001a09f:	57                   	push   edi
c001a0a0:	55                   	push   ebp
c001a0a1:	e8 b4 f7 ff ff       	call   c001985a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a0a6:	83 c4 10             	add    esp,0x10
c001a0a9:	84 c0                	test   al,al
c001a0ab:	79 27                	jns    c001a0d4 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001a0ad:	bb 01 00 00 00       	mov    ebx,0x1
c001a0b2:	53                   	push   ebx
c001a0b3:	56                   	push   esi
c001a0b4:	57                   	push   edi
c001a0b5:	55                   	push   ebp
c001a0b6:	e8 7b f7 ff ff       	call   c0019836 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a0bb:	83 c4 10             	add    esp,0x10
c001a0be:	66 40                	inc    ax
c001a0c0:	74 0c                	je     c001a0ce <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001a0c2:	53                   	push   ebx
c001a0c3:	56                   	push   esi
c001a0c4:	57                   	push   edi
c001a0c5:	55                   	push   ebp
c001a0c6:	e8 31 fe ff ff       	call   c0019efc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001a0cb:	83 c4 10             	add    esp,0x10
c001a0ce:	43                   	inc    ebx
c001a0cf:	83 fb 08             	cmp    ebx,0x8
c001a0d2:	75 de                	jne    c001a0b2 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001a0d4:	83 c4 0c             	add    esp,0xc
c001a0d7:	5b                   	pop    ebx
c001a0d8:	5e                   	pop    esi
c001a0d9:	5f                   	pop    edi
c001a0da:	5d                   	pop    ebp
c001a0db:	c3                   	ret    

c001a0dc <PCI::detect()>:
c001a0dc:	56                   	push   esi
c001a0dd:	53                   	push   ebx
c001a0de:	53                   	push   ebx
c001a0df:	31 db                	xor    ebx,ebx
c001a0e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a0e5:	6a 00                	push   0x0
c001a0e7:	6a 00                	push   0x0
c001a0e9:	6a 00                	push   0x0
c001a0eb:	56                   	push   esi
c001a0ec:	e8 69 f7 ff ff       	call   c001985a <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001a0f1:	83 c4 10             	add    esp,0x10
c001a0f4:	a8 80                	test   al,0x80
c001a0f6:	75 21                	jne    c001a119 <PCI::detect()+0x3d>
c001a0f8:	51                   	push   ecx
c001a0f9:	51                   	push   ecx
c001a0fa:	6a 00                	push   0x0
c001a0fc:	56                   	push   esi
c001a0fd:	e8 62 fc ff ff       	call   c0019d64 <PCI::checkBus(unsigned char)>
c001a102:	83 c4 10             	add    esp,0x10
c001a105:	eb 24                	jmp    c001a12b <PCI::detect()+0x4f>
c001a107:	52                   	push   edx
c001a108:	52                   	push   edx
c001a109:	53                   	push   ebx
c001a10a:	43                   	inc    ebx
c001a10b:	56                   	push   esi
c001a10c:	e8 53 fc ff ff       	call   c0019d64 <PCI::checkBus(unsigned char)>
c001a111:	83 c4 10             	add    esp,0x10
c001a114:	83 fb 08             	cmp    ebx,0x8
c001a117:	74 12                	je     c001a12b <PCI::detect()+0x4f>
c001a119:	53                   	push   ebx
c001a11a:	6a 00                	push   0x0
c001a11c:	6a 00                	push   0x0
c001a11e:	56                   	push   esi
c001a11f:	e8 12 f7 ff ff       	call   c0019836 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001a124:	83 c4 10             	add    esp,0x10
c001a127:	66 40                	inc    ax
c001a129:	74 dc                	je     c001a107 <PCI::detect()+0x2b>
c001a12b:	58                   	pop    eax
c001a12c:	5b                   	pop    ebx
c001a12d:	5e                   	pop    esi
c001a12e:	c3                   	ret    
c001a12f:	90                   	nop

c001a130 <IDE::close(int, int, void*)>:
c001a130:	83 c8 ff             	or     eax,0xffffffff
c001a133:	c3                   	ret    

c001a134 <IDE::IDE()>:
c001a134:	83 ec 0c             	sub    esp,0xc
c001a137:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a13b:	83 ec 08             	sub    esp,0x8
c001a13e:	68 f0 0d 02 c0       	push   0xc0020df0
c001a143:	50                   	push   eax
c001a144:	e8 33 1c ff ff       	call   c000bd7c <HardDiskController::HardDiskController(char const*)>
c001a149:	83 c4 10             	add    esp,0x10
c001a14c:	ba 80 0e 02 c0       	mov    edx,0xc0020e80
c001a151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a155:	89 10                	mov    DWORD PTR [eax],edx
c001a157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a15b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001a162:	90                   	nop
c001a163:	83 c4 0c             	add    esp,0xc
c001a166:	c3                   	ret    
c001a167:	90                   	nop

c001a168 <IDE::prepareInterrupt(unsigned char)>:
c001a168:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a16d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a171:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001a179:	c3                   	ret    

c001a17a <selectDrive(unsigned char, unsigned char)>:
c001a17a:	c3                   	ret    
c001a17b:	90                   	nop

c001a17c <IDE::getBase(unsigned char)>:
c001a17c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001a181:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a185:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001a18d:	c3                   	ret    

c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001a18e:	55                   	push   ebp
c001a18f:	57                   	push   edi
c001a190:	56                   	push   esi
c001a191:	53                   	push   ebx
c001a192:	83 ec 1c             	sub    esp,0x1c
c001a195:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a199:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a19d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001a1a0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a1a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a1a8:	80 f9 03             	cmp    cl,0x3
c001a1ab:	77 51                	ja     c001a1fe <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001a1ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1b1:	0f b6 f2             	movzx  esi,dl
c001a1b4:	0f b6 db             	movzx  ebx,bl
c001a1b7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a1ba:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001a1be:	83 ca 80             	or     edx,0xffffff80
c001a1c1:	0f b6 d2             	movzx  edx,dl
c001a1c4:	52                   	push   edx
c001a1c5:	6a 0c                	push   0xc
c001a1c7:	56                   	push   esi
c001a1c8:	57                   	push   edi
c001a1c9:	e8 c0 ff ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1ce:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001a1d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a1d7:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001a1db:	ee                   	out    dx,al
c001a1dc:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001a1e1:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001a1e5:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001a1e9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a1ed:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001a1f5:	83 c4 2c             	add    esp,0x2c
c001a1f8:	5b                   	pop    ebx
c001a1f9:	5e                   	pop    esi
c001a1fa:	5f                   	pop    edi
c001a1fb:	5d                   	pop    ebp
c001a1fc:	eb 90                	jmp    c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1fe:	80 fb 07             	cmp    bl,0x7
c001a201:	77 12                	ja     c001a215 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001a203:	0f b6 d2             	movzx  edx,dl
c001a206:	0f b6 db             	movzx  ebx,bl
c001a209:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001a211:	89 da                	mov    edx,ebx
c001a213:	eb 2f                	jmp    c001a244 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a215:	80 fb 0d             	cmp    bl,0xd
c001a218:	77 13                	ja     c001a22d <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001a21a:	0f b6 d2             	movzx  edx,dl
c001a21d:	0f b6 db             	movzx  ebx,bl
c001a220:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001a227:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001a22b:	eb 17                	jmp    c001a244 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001a22d:	80 fb 15             	cmp    bl,0x15
c001a230:	77 13                	ja     c001a245 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001a232:	0f b6 d2             	movzx  edx,dl
c001a235:	0f b6 db             	movzx  ebx,bl
c001a238:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001a240:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001a244:	ee                   	out    dx,al
c001a245:	83 c4 1c             	add    esp,0x1c
c001a248:	5b                   	pop    ebx
c001a249:	5e                   	pop    esi
c001a24a:	5f                   	pop    edi
c001a24b:	5d                   	pop    ebp
c001a24c:	c3                   	ret    
c001a24d:	90                   	nop

c001a24e <IDE::read(unsigned char, unsigned char)>:
c001a24e:	55                   	push   ebp
c001a24f:	57                   	push   edi
c001a250:	56                   	push   esi
c001a251:	53                   	push   ebx
c001a252:	83 ec 1c             	sub    esp,0x1c
c001a255:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a259:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a25d:	8d 43 f8             	lea    eax,[ebx-0x8]
c001a260:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a264:	3c 03                	cmp    al,0x3
c001a266:	77 43                	ja     c001a2ab <IDE::read(unsigned char, unsigned char)+0x5d>
c001a268:	0f b6 f2             	movzx  esi,dl
c001a26b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001a26e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001a272:	83 c8 80             	or     eax,0xffffff80
c001a275:	0f b6 c0             	movzx  eax,al
c001a278:	50                   	push   eax
c001a279:	6a 0c                	push   0xc
c001a27b:	56                   	push   esi
c001a27c:	57                   	push   edi
c001a27d:	e8 0c ff ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a282:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001a287:	0f b6 c3             	movzx  eax,bl
c001a28a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001a28e:	ec                   	in     al,dx
c001a28f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a293:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001a298:	52                   	push   edx
c001a299:	6a 0c                	push   0xc
c001a29b:	56                   	push   esi
c001a29c:	57                   	push   edi
c001a29d:	e8 ec fe ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a2a2:	83 c4 20             	add    esp,0x20
c001a2a5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a2a9:	eb 49                	jmp    c001a2f4 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a2ab:	80 fb 07             	cmp    bl,0x7
c001a2ae:	77 12                	ja     c001a2c2 <IDE::read(unsigned char, unsigned char)+0x74>
c001a2b0:	0f b6 d2             	movzx  edx,dl
c001a2b3:	0f b6 c3             	movzx  eax,bl
c001a2b6:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001a2be:	89 c2                	mov    edx,eax
c001a2c0:	eb 31                	jmp    c001a2f3 <IDE::read(unsigned char, unsigned char)+0xa5>
c001a2c2:	80 fb 0d             	cmp    bl,0xd
c001a2c5:	77 13                	ja     c001a2da <IDE::read(unsigned char, unsigned char)+0x8c>
c001a2c7:	0f b6 d2             	movzx  edx,dl
c001a2ca:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001a2d1:	0f b6 d3             	movzx  edx,bl
c001a2d4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001a2d8:	eb 19                	jmp    c001a2f3 <IDE::read(unsigned char, unsigned char)+0xa5>
c001a2da:	31 c0                	xor    eax,eax
c001a2dc:	80 fb 15             	cmp    bl,0x15
c001a2df:	77 13                	ja     c001a2f4 <IDE::read(unsigned char, unsigned char)+0xa6>
c001a2e1:	0f b6 d2             	movzx  edx,dl
c001a2e4:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001a2ec:	0f b6 d3             	movzx  edx,bl
c001a2ef:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001a2f3:	ec                   	in     al,dx
c001a2f4:	83 c4 1c             	add    esp,0x1c
c001a2f7:	5b                   	pop    ebx
c001a2f8:	5e                   	pop    esi
c001a2f9:	5f                   	pop    edi
c001a2fa:	5d                   	pop    ebp
c001a2fb:	c3                   	ret    

c001a2fc <IDE::waitInterrupt(unsigned char)>:
c001a2fc:	57                   	push   edi
c001a2fd:	56                   	push   esi
c001a2fe:	31 f6                	xor    esi,esi
c001a300:	53                   	push   ebx
c001a301:	83 ec 10             	sub    esp,0x10
c001a304:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001a308:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a30c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a310:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001a315:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001a31c:	84 db                	test   bl,bl
c001a31e:	75 33                	jne    c001a353 <IDE::waitInterrupt(unsigned char)+0x57>
c001a320:	52                   	push   edx
c001a321:	6a 0c                	push   0xc
c001a323:	50                   	push   eax
c001a324:	57                   	push   edi
c001a325:	e8 24 ff ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001a32a:	83 c4 10             	add    esp,0x10
c001a32d:	a8 01                	test   al,0x1
c001a32f:	75 2a                	jne    c001a35b <IDE::waitInterrupt(unsigned char)+0x5f>
c001a331:	f7 c6 04 00 00 00    	test   esi,0x4
c001a337:	75 12                	jne    c001a34b <IDE::waitInterrupt(unsigned char)+0x4f>
c001a339:	83 fe 32             	cmp    esi,0x32
c001a33c:	7e 0d                	jle    c001a34b <IDE::waitInterrupt(unsigned char)+0x4f>
c001a33e:	83 ec 0c             	sub    esp,0xc
c001a341:	6a 64                	push   0x64
c001a343:	e8 64 a7 ff ff       	call   c0014aac <milliTenthSleep(unsigned int)>
c001a348:	83 c4 10             	add    esp,0x10
c001a34b:	83 fe 3c             	cmp    esi,0x3c
c001a34e:	74 0b                	je     c001a35b <IDE::waitInterrupt(unsigned char)+0x5f>
c001a350:	46                   	inc    esi
c001a351:	eb bd                	jmp    c001a310 <IDE::waitInterrupt(unsigned char)+0x14>
c001a353:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001a35b:	83 c4 10             	add    esp,0x10
c001a35e:	88 d8                	mov    al,bl
c001a360:	5b                   	pop    ebx
c001a361:	5e                   	pop    esi
c001a362:	5f                   	pop    edi
c001a363:	c3                   	ret    

c001a364 <ideChannel0IRQHandler(regs*, void*)>:
c001a364:	83 ec 10             	sub    esp,0x10
c001a367:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a36b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001a372:	6a 07                	push   0x7
c001a374:	6a 00                	push   0x0
c001a376:	50                   	push   eax
c001a377:	e8 d2 fe ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001a37c:	83 c4 1c             	add    esp,0x1c
c001a37f:	c3                   	ret    

c001a380 <ideChannel1IRQHandler(regs*, void*)>:
c001a380:	83 ec 10             	sub    esp,0x10
c001a383:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a387:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001a38e:	6a 07                	push   0x7
c001a390:	6a 01                	push   0x1
c001a392:	50                   	push   eax
c001a393:	e8 b6 fe ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001a398:	83 c4 1c             	add    esp,0x1c
c001a39b:	c3                   	ret    

c001a39c <IDE::enableIRQs(unsigned char, bool)>:
c001a39c:	57                   	push   edi
c001a39d:	56                   	push   esi
c001a39e:	be 04 00 00 00       	mov    esi,0x4
c001a3a3:	53                   	push   ebx
c001a3a4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a3a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3ad:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001a3b2:	0f 94 c0             	sete   al
c001a3b5:	01 c0                	add    eax,eax
c001a3b7:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001a3be:	0f b6 c0             	movzx  eax,al
c001a3c1:	50                   	push   eax
c001a3c2:	6a 0c                	push   0xc
c001a3c4:	57                   	push   edi
c001a3c5:	53                   	push   ebx
c001a3c6:	e8 c3 fd ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3cb:	83 c4 10             	add    esp,0x10
c001a3ce:	50                   	push   eax
c001a3cf:	6a 0c                	push   0xc
c001a3d1:	57                   	push   edi
c001a3d2:	53                   	push   ebx
c001a3d3:	e8 76 fe ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001a3d8:	83 c4 10             	add    esp,0x10
c001a3db:	4e                   	dec    esi
c001a3dc:	75 f0                	jne    c001a3ce <IDE::enableIRQs(unsigned char, bool)+0x32>
c001a3de:	5b                   	pop    ebx
c001a3df:	5e                   	pop    esi
c001a3e0:	5f                   	pop    edi
c001a3e1:	c3                   	ret    

c001a3e2 <IDE::open(int, int, void*)>:
c001a3e2:	55                   	push   ebp
c001a3e3:	57                   	push   edi
c001a3e4:	56                   	push   esi
c001a3e5:	53                   	push   ebx
c001a3e6:	83 ec 1c             	sub    esp,0x1c
c001a3e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a3ed:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001a3f6:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001a3ff:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001a406:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001a40d:	0f 85 b0 02 00 00    	jne    c001a6c3 <IDE::open(int, int, void*)+0x2e1>
c001a413:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001a419:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001a41d:	83 e0 7f             	and    eax,0x7f
c001a420:	3c 05                	cmp    al,0x5
c001a422:	74 04                	je     c001a428 <IDE::open(int, int, void*)+0x46>
c001a424:	3c 0f                	cmp    al,0xf
c001a426:	75 32                	jne    c001a45a <IDE::open(int, int, void*)+0x78>
c001a428:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001a42e:	83 e0 fc             	and    eax,0xfffffffc
c001a431:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a438:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001a43e:	83 e0 fc             	and    eax,0xfffffffc
c001a441:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a448:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001a44e:	83 e0 fc             	and    eax,0xfffffffc
c001a451:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a458:	eb 14                	jmp    c001a46e <IDE::open(int, int, void*)+0x8c>
c001a45a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001a464:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001a46e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001a475:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001a47c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a480:	89 c6                	mov    esi,eax
c001a482:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a487:	c1 e6 10             	shl    esi,0x10
c001a48a:	89 e8                	mov    eax,ebp
c001a48c:	89 fa                	mov    edx,edi
c001a48e:	c1 e0 0b             	shl    eax,0xb
c001a491:	09 f0                	or     eax,esi
c001a493:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001a49a:	c1 e6 08             	shl    esi,0x8
c001a49d:	09 c6                	or     esi,eax
c001a49f:	89 f0                	mov    eax,esi
c001a4a1:	0d 08 00 00 80       	or     eax,0x80000008
c001a4a6:	ef                   	out    dx,eax
c001a4a7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001a4ac:	89 ca                	mov    edx,ecx
c001a4ae:	ed                   	in     eax,dx
c001a4af:	c1 e8 10             	shr    eax,0x10
c001a4b2:	3d ff ff 00 00       	cmp    eax,0xffff
c001a4b7:	0f 84 f5 00 00 00    	je     c001a5b2 <IDE::open(int, int, void*)+0x1d0>
c001a4bd:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001a4c3:	89 fa                	mov    edx,edi
c001a4c5:	89 f0                	mov    eax,esi
c001a4c7:	ef                   	out    dx,eax
c001a4c8:	b0 fe                	mov    al,0xfe
c001a4ca:	89 ca                	mov    edx,ecx
c001a4cc:	ee                   	out    dx,al
c001a4cd:	89 f0                	mov    eax,esi
c001a4cf:	89 fa                	mov    edx,edi
c001a4d1:	ef                   	out    dx,eax
c001a4d2:	89 ca                	mov    edx,ecx
c001a4d4:	ed                   	in     eax,dx
c001a4d5:	3c fe                	cmp    al,0xfe
c001a4d7:	0f 85 a9 00 00 00    	jne    c001a586 <IDE::open(int, int, void*)+0x1a4>
c001a4dd:	8b 15 b8 3e 02 c0    	mov    edx,DWORD PTR ds:0xc0023eb8
c001a4e3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001a4ea:	74 33                	je     c001a51f <IDE::open(int, int, void*)+0x13d>
c001a4ec:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001a4f2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001a4f6:	40                   	inc    eax
c001a4f7:	83 ec 0c             	sub    esp,0xc
c001a4fa:	0f b6 c0             	movzx  eax,al
c001a4fd:	50                   	push   eax
c001a4fe:	55                   	push   ebp
c001a4ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a503:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001a509:	51                   	push   ecx
c001a50a:	e8 b9 43 ff ff       	call   c000e8c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001a50f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001a514:	83 c4 1c             	add    esp,0x1c
c001a517:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001a51d:	eb 0a                	jmp    c001a529 <IDE::open(int, int, void*)+0x147>
c001a51f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001a529:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001a530:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001a537:	c1 e1 10             	shl    ecx,0x10
c001a53a:	c1 e0 08             	shl    eax,0x8
c001a53d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001a542:	09 c1                	or     ecx,eax
c001a544:	89 fa                	mov    edx,edi
c001a546:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001a54d:	c1 e0 0b             	shl    eax,0xb
c001a550:	09 c1                	or     ecx,eax
c001a552:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001a558:	89 c8                	mov    eax,ecx
c001a55a:	ef                   	out    dx,eax
c001a55b:	be fc 0c 00 00       	mov    esi,0xcfc
c001a560:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001a566:	89 f2                	mov    edx,esi
c001a568:	ee                   	out    dx,al
c001a569:	89 c8                	mov    eax,ecx
c001a56b:	89 fa                	mov    edx,edi
c001a56d:	ef                   	out    dx,eax
c001a56e:	89 f2                	mov    edx,esi
c001a570:	ed                   	in     eax,dx
c001a571:	0f b6 c0             	movzx  eax,al
c001a574:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001a57a:	74 46                	je     c001a5c2 <IDE::open(int, int, void*)+0x1e0>
c001a57c:	83 ec 0c             	sub    esp,0xc
c001a57f:	68 08 0e 02 c0       	push   0xc0020e08
c001a584:	eb 34                	jmp    c001a5ba <IDE::open(int, int, void*)+0x1d8>
c001a586:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001a58f:	75 17                	jne    c001a5a8 <IDE::open(int, int, void*)+0x1c6>
c001a591:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001a596:	74 07                	je     c001a59f <IDE::open(int, int, void*)+0x1bd>
c001a598:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001a59d:	75 09                	jne    c001a5a8 <IDE::open(int, int, void*)+0x1c6>
c001a59f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a5a6:	eb 1a                	jmp    c001a5c2 <IDE::open(int, int, void*)+0x1e0>
c001a5a8:	83 ec 0c             	sub    esp,0xc
c001a5ab:	68 10 0e 02 c0       	push   0xc0020e10
c001a5b0:	eb 08                	jmp    c001a5ba <IDE::open(int, int, void*)+0x1d8>
c001a5b2:	83 ec 0c             	sub    esp,0xc
c001a5b5:	68 41 0e 02 c0       	push   0xc0020e41
c001a5ba:	e8 f0 5d ff ff       	call   c00103af <KePanic(char const*)>
c001a5bf:	83 c4 10             	add    esp,0x10
c001a5c2:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001a5c9:	79 1a                	jns    c001a5e5 <IDE::open(int, int, void*)+0x203>
c001a5cb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001a5d1:	83 e0 fc             	and    eax,0xfffffffc
c001a5d4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001a5db:	83 c0 08             	add    eax,0x8
c001a5de:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001a5e5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001a5eb:	89 c2                	mov    edx,eax
c001a5ed:	83 e2 0f             	and    edx,0xf
c001a5f0:	66 83 fa 08          	cmp    dx,0x8
c001a5f4:	75 0a                	jne    c001a600 <IDE::open(int, int, void*)+0x21e>
c001a5f6:	83 e8 02             	sub    eax,0x2
c001a5f9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a600:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001a606:	89 c2                	mov    edx,eax
c001a608:	83 e2 0f             	and    edx,0xf
c001a60b:	66 83 fa 08          	cmp    dx,0x8
c001a60f:	75 0a                	jne    c001a61b <IDE::open(int, int, void*)+0x239>
c001a611:	83 e8 02             	sub    eax,0x2
c001a614:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001a61b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001a622:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001a629:	89 d0                	mov    eax,edx
c001a62b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a62e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a632:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001a636:	8d 4a 01             	lea    ecx,[edx+0x1]
c001a639:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a63e:	0f b6 c9             	movzx  ecx,cl
c001a641:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001a648:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001a64b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001a64f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001a653:	8d 50 02             	lea    edx,[eax+0x2]
c001a656:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001a65b:	0f b6 d2             	movzx  edx,dl
c001a65e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001a664:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a667:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a66b:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001a66f:	8d 48 03             	lea    ecx,[eax+0x3]
c001a672:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a677:	0f b6 c9             	movzx  ecx,cl
c001a67a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001a680:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001a683:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001a687:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001a68b:	8d 50 04             	lea    edx,[eax+0x4]
c001a68e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001a694:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001a699:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001a6a0:	66 85 f6             	test   si,si
c001a6a3:	74 5b                	je     c001a700 <IDE::open(int, int, void*)+0x31e>
c001a6a5:	0f b6 d2             	movzx  edx,dl
c001a6a8:	83 c0 05             	add    eax,0x5
c001a6ab:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001a6ae:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001a6b2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001a6b6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001a6bc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001a6c1:	eb 3d                	jmp    c001a700 <IDE::open(int, int, void*)+0x31e>
c001a6c3:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001a6c9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001a6d0:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001a6d7:	66 05 06 02          	add    ax,0x206
c001a6db:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001a6e2:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001a6e9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001a6f0:	66 05 06 02          	add    ax,0x206
c001a6f4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001a6fb:	e9 e5 fe ff ff       	jmp    c001a5e5 <IDE::open(int, int, void*)+0x203>
c001a700:	50                   	push   eax
c001a701:	50                   	push   eax
c001a702:	6a 00                	push   0x0
c001a704:	53                   	push   ebx
c001a705:	e8 5e fa ff ff       	call   c001a168 <IDE::prepareInterrupt(unsigned char)>
c001a70a:	5a                   	pop    edx
c001a70b:	59                   	pop    ecx
c001a70c:	6a 01                	push   0x1
c001a70e:	53                   	push   ebx
c001a70f:	e8 54 fa ff ff       	call   c001a168 <IDE::prepareInterrupt(unsigned char)>
c001a714:	83 c4 0c             	add    esp,0xc
c001a717:	6a 00                	push   0x0
c001a719:	6a 00                	push   0x0
c001a71b:	53                   	push   ebx
c001a71c:	e8 7b fc ff ff       	call   c001a39c <IDE::enableIRQs(unsigned char, bool)>
c001a721:	83 c4 0c             	add    esp,0xc
c001a724:	6a 00                	push   0x0
c001a726:	6a 01                	push   0x1
c001a728:	53                   	push   ebx
c001a729:	e8 6e fc ff ff       	call   c001a39c <IDE::enableIRQs(unsigned char, bool)>
c001a72e:	83 c4 10             	add    esp,0x10
c001a731:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001a738:	74 34                	je     c001a76e <IDE::open(int, int, void*)+0x38c>
c001a73a:	83 ec 0c             	sub    esp,0xc
c001a73d:	53                   	push   ebx
c001a73e:	6a 01                	push   0x1
c001a740:	68 64 a3 01 c0       	push   0xc001a364
c001a745:	6a 0e                	push   0xe
c001a747:	53                   	push   ebx
c001a748:	e8 97 12 ff ff       	call   c000b9e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a74d:	83 c4 14             	add    esp,0x14
c001a750:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001a756:	53                   	push   ebx
c001a757:	6a 01                	push   0x1
c001a759:	68 80 a3 01 c0       	push   0xc001a380
c001a75e:	6a 0f                	push   0xf
c001a760:	53                   	push   ebx
c001a761:	e8 7e 12 ff ff       	call   c000b9e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a766:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001a76c:	eb 38                	jmp    c001a7a6 <IDE::open(int, int, void*)+0x3c4>
c001a76e:	83 ec 0c             	sub    esp,0xc
c001a771:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001a77b:	53                   	push   ebx
c001a77c:	6a 00                	push   0x0
c001a77e:	68 64 a3 01 c0       	push   0xc001a364
c001a783:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001a789:	53                   	push   ebx
c001a78a:	e8 55 12 ff ff       	call   c000b9e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a78f:	83 c4 14             	add    esp,0x14
c001a792:	53                   	push   ebx
c001a793:	6a 00                	push   0x0
c001a795:	68 80 a3 01 c0       	push   0xc001a380
c001a79a:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001a7a0:	53                   	push   ebx
c001a7a1:	e8 3e 12 ff ff       	call   c000b9e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a7a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7a8:	83 c4 20             	add    esp,0x20
c001a7ab:	83 ec 0c             	sub    esp,0xc
c001a7ae:	53                   	push   ebx
c001a7af:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001a7b2:	83 c4 0c             	add    esp,0xc
c001a7b5:	6a 07                	push   0x7
c001a7b7:	6a 00                	push   0x0
c001a7b9:	53                   	push   ebx
c001a7ba:	e8 8f fa ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001a7bf:	83 c4 0c             	add    esp,0xc
c001a7c2:	6a 07                	push   0x7
c001a7c4:	6a 01                	push   0x1
c001a7c6:	53                   	push   ebx
c001a7c7:	e8 82 fa ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001a7cc:	83 c4 0c             	add    esp,0xc
c001a7cf:	6a 01                	push   0x1
c001a7d1:	6a 00                	push   0x0
c001a7d3:	53                   	push   ebx
c001a7d4:	e8 c3 fb ff ff       	call   c001a39c <IDE::enableIRQs(unsigned char, bool)>
c001a7d9:	83 c4 0c             	add    esp,0xc
c001a7dc:	6a 01                	push   0x1
c001a7de:	6a 01                	push   0x1
c001a7e0:	53                   	push   ebx
c001a7e1:	e8 b6 fb ff ff       	call   c001a39c <IDE::enableIRQs(unsigned char, bool)>
c001a7e6:	83 c4 2c             	add    esp,0x2c
c001a7e9:	31 c0                	xor    eax,eax
c001a7eb:	5b                   	pop    ebx
c001a7ec:	5e                   	pop    esi
c001a7ed:	5f                   	pop    edi
c001a7ee:	5d                   	pop    ebp
c001a7ef:	c3                   	ret    

c001a7f0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001a7f0:	55                   	push   ebp
c001a7f1:	57                   	push   edi
c001a7f2:	56                   	push   esi
c001a7f3:	53                   	push   ebx
c001a7f4:	83 ec 1c             	sub    esp,0x1c
c001a7f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a7fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001a7ff:	8d 50 f8             	lea    edx,[eax-0x8]
c001a802:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a806:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001a80a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001a80e:	80 fa 03             	cmp    dl,0x3
c001a811:	77 5d                	ja     c001a870 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001a813:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a817:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a81b:	0f b6 db             	movzx  ebx,bl
c001a81e:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001a821:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001a825:	83 ca 80             	or     edx,0xffffff80
c001a828:	0f b6 d2             	movzx  edx,dl
c001a82b:	52                   	push   edx
c001a82c:	6a 0c                	push   0xc
c001a82e:	53                   	push   ebx
c001a82f:	56                   	push   esi
c001a830:	e8 59 f9 ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a835:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001a83a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a83e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a842:	0f b6 c0             	movzx  eax,al
c001a845:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001a849:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001a84b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001a850:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001a854:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001a858:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a85c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001a864:	83 c4 2c             	add    esp,0x2c
c001a867:	5b                   	pop    ebx
c001a868:	5e                   	pop    esi
c001a869:	5f                   	pop    edi
c001a86a:	5d                   	pop    ebp
c001a86b:	e9 1e f9 ff ff       	jmp    c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a870:	3c 07                	cmp    al,0x7
c001a872:	77 10                	ja     c001a884 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001a874:	0f b6 db             	movzx  ebx,bl
c001a877:	0f b6 d0             	movzx  edx,al
c001a87a:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001a882:	eb 2d                	jmp    c001a8b1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001a884:	3c 0d                	cmp    al,0xd
c001a886:	77 13                	ja     c001a89b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001a888:	0f b6 db             	movzx  ebx,bl
c001a88b:	0f b6 c0             	movzx  eax,al
c001a88e:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001a895:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001a899:	eb 16                	jmp    c001a8b1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001a89b:	3c 15                	cmp    al,0x15
c001a89d:	77 14                	ja     c001a8b3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001a89f:	0f b6 db             	movzx  ebx,bl
c001a8a2:	0f b6 c0             	movzx  eax,al
c001a8a5:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001a8ad:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001a8b1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001a8b3:	83 c4 1c             	add    esp,0x1c
c001a8b6:	5b                   	pop    ebx
c001a8b7:	5e                   	pop    esi
c001a8b8:	5f                   	pop    edi
c001a8b9:	5d                   	pop    ebp
c001a8ba:	c3                   	ret    
c001a8bb:	90                   	nop

c001a8bc <IDE::detect()>:
c001a8bc:	55                   	push   ebp
c001a8bd:	57                   	push   edi
c001a8be:	56                   	push   esi
c001a8bf:	53                   	push   ebx
c001a8c0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a8c6:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001a8cd:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001a8d4:	0f 85 97 02 00 00    	jne    c001ab71 <IDE::detect()+0x2b5>
c001a8da:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001a8e1:	31 f6                	xor    esi,esi
c001a8e3:	31 ed                	xor    ebp,ebp
c001a8e5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a8ed:	89 e8                	mov    eax,ebp
c001a8ef:	c1 e0 06             	shl    eax,0x6
c001a8f2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001a8fa:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a8fe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a902:	c1 e0 04             	shl    eax,0x4
c001a905:	83 c8 a0             	or     eax,0xffffffa0
c001a908:	0f b6 c0             	movzx  eax,al
c001a90b:	50                   	push   eax
c001a90c:	6a 06                	push   0x6
c001a90e:	56                   	push   esi
c001a90f:	53                   	push   ebx
c001a910:	e8 79 f8 ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a915:	83 c4 0c             	add    esp,0xc
c001a918:	6a 0c                	push   0xc
c001a91a:	56                   	push   esi
c001a91b:	53                   	push   ebx
c001a91c:	e8 2d f9 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001a921:	83 c4 0c             	add    esp,0xc
c001a924:	6a 0c                	push   0xc
c001a926:	56                   	push   esi
c001a927:	53                   	push   ebx
c001a928:	e8 21 f9 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001a92d:	83 c4 0c             	add    esp,0xc
c001a930:	6a 0c                	push   0xc
c001a932:	56                   	push   esi
c001a933:	53                   	push   ebx
c001a934:	e8 15 f9 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001a939:	83 c4 0c             	add    esp,0xc
c001a93c:	6a 0c                	push   0xc
c001a93e:	56                   	push   esi
c001a93f:	53                   	push   ebx
c001a940:	e8 09 f9 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001a945:	68 ec 00 00 00       	push   0xec
c001a94a:	6a 07                	push   0x7
c001a94c:	56                   	push   esi
c001a94d:	53                   	push   ebx
c001a94e:	e8 3b f8 ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a953:	83 c4 1c             	add    esp,0x1c
c001a956:	6a 0c                	push   0xc
c001a958:	56                   	push   esi
c001a959:	53                   	push   ebx
c001a95a:	e8 ef f8 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001a95f:	83 c4 0c             	add    esp,0xc
c001a962:	6a 0c                	push   0xc
c001a964:	56                   	push   esi
c001a965:	53                   	push   ebx
c001a966:	e8 e3 f8 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001a96b:	83 c4 0c             	add    esp,0xc
c001a96e:	6a 0c                	push   0xc
c001a970:	56                   	push   esi
c001a971:	53                   	push   ebx
c001a972:	e8 d7 f8 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001a977:	83 c4 0c             	add    esp,0xc
c001a97a:	6a 0c                	push   0xc
c001a97c:	56                   	push   esi
c001a97d:	53                   	push   ebx
c001a97e:	e8 cb f8 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001a983:	83 c4 0c             	add    esp,0xc
c001a986:	6a 0c                	push   0xc
c001a988:	56                   	push   esi
c001a989:	53                   	push   ebx
c001a98a:	e8 bf f8 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001a98f:	83 c4 10             	add    esp,0x10
c001a992:	84 c0                	test   al,al
c001a994:	0f 84 5f 01 00 00    	je     c001aaf9 <IDE::detect()+0x23d>
c001a99a:	31 ff                	xor    edi,edi
c001a99c:	50                   	push   eax
c001a99d:	6a 0c                	push   0xc
c001a99f:	56                   	push   esi
c001a9a0:	53                   	push   ebx
c001a9a1:	e8 a8 f8 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001a9a6:	83 c4 10             	add    esp,0x10
c001a9a9:	a8 01                	test   al,0x1
c001a9ab:	0f 85 69 01 00 00    	jne    c001ab1a <IDE::detect()+0x25e>
c001a9b1:	84 c0                	test   al,al
c001a9b3:	78 04                	js     c001a9b9 <IDE::detect()+0xfd>
c001a9b5:	a8 08                	test   al,0x8
c001a9b7:	75 23                	jne    c001a9dc <IDE::detect()+0x120>
c001a9b9:	47                   	inc    edi
c001a9ba:	81 ff 17 01 00 00    	cmp    edi,0x117
c001a9c0:	7e da                	jle    c001a99c <IDE::detect()+0xe0>
c001a9c2:	83 ec 0c             	sub    esp,0xc
c001a9c5:	6a 32                	push   0x32
c001a9c7:	e8 e0 a0 ff ff       	call   c0014aac <milliTenthSleep(unsigned int)>
c001a9cc:	83 c4 10             	add    esp,0x10
c001a9cf:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001a9d5:	75 c5                	jne    c001a99c <IDE::detect()+0xe0>
c001a9d7:	e9 3e 01 00 00       	jmp    c001ab1a <IDE::detect()+0x25e>
c001a9dc:	31 c9                	xor    ecx,ecx
c001a9de:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001a9e2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001a9e6:	83 ec 0c             	sub    esp,0xc
c001a9e9:	68 80 00 00 00       	push   0x80
c001a9ee:	57                   	push   edi
c001a9ef:	6a 00                	push   0x0
c001a9f1:	56                   	push   esi
c001a9f2:	53                   	push   ebx
c001a9f3:	e8 f8 fd ff ff       	call   c001a7f0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001a9f8:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001a9fd:	89 e8                	mov    eax,ebp
c001a9ff:	89 d1                	mov    ecx,edx
c001aa01:	c1 e0 06             	shl    eax,0x6
c001aa04:	01 d8                	add    eax,ebx
c001aa06:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001aa0d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001aa14:	89 f2                	mov    edx,esi
c001aa16:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001aa1c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001aa20:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001aa26:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aa2a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001aa31:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001aa39:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001aa40:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001aa48:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001aa4e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001aa55:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001aa5b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001aa5f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001aa63:	83 c4 20             	add    esp,0x20
c001aa66:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001aa69:	83 c0 02             	add    eax,0x2
c001aa6c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001aa72:	83 c7 02             	add    edi,0x2
c001aa75:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001aa78:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001aa7e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001aa82:	75 e2                	jne    c001aa66 <IDE::detect()+0x1aa>
c001aa84:	89 e8                	mov    eax,ebp
c001aa86:	c1 e0 06             	shl    eax,0x6
c001aa89:	01 d8                	add    eax,ebx
c001aa8b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001aa91:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001aa98:	66 c1 ea 09          	shr    dx,0x9
c001aa9c:	83 e2 01             	and    edx,0x1
c001aa9f:	84 c9                	test   cl,cl
c001aaa1:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001aaa7:	75 22                	jne    c001aacb <IDE::detect()+0x20f>
c001aaa9:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001aab0:	74 46                	je     c001aaf8 <IDE::detect()+0x23c>
c001aab2:	83 ec 0c             	sub    esp,0xc
c001aab5:	68 7c 01 00 00       	push   0x17c
c001aaba:	e8 a6 cd fe ff       	call   c0007865 <malloc>
c001aabf:	89 c7                	mov    edi,eax
c001aac1:	89 04 24             	mov    DWORD PTR [esp],eax
c001aac4:	e8 11 05 00 00       	call   c001afda <ATA::ATA()>
c001aac9:	eb 17                	jmp    c001aae2 <IDE::detect()+0x226>
c001aacb:	83 ec 0c             	sub    esp,0xc
c001aace:	68 84 01 00 00       	push   0x184
c001aad3:	e8 8d cd fe ff       	call   c0007865 <malloc>
c001aad8:	89 c7                	mov    edi,eax
c001aada:	89 04 24             	mov    DWORD PTR [esp],eax
c001aadd:	e8 1e 0e 00 00       	call   c001b900 <ATAPI::ATAPI()>
c001aae2:	5a                   	pop    edx
c001aae3:	59                   	pop    ecx
c001aae4:	57                   	push   edi
c001aae5:	53                   	push   ebx
c001aae6:	e8 4d 0f ff ff       	call   c000ba38 <Device::addChild(Device*)>
c001aaeb:	8b 07                	mov    eax,DWORD PTR [edi]
c001aaed:	53                   	push   ebx
c001aaee:	55                   	push   ebp
c001aaef:	6a 00                	push   0x0
c001aaf1:	57                   	push   edi
c001aaf2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001aaf5:	83 c4 20             	add    esp,0x20
c001aaf8:	45                   	inc    ebp
c001aaf9:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001aafe:	74 0d                	je     c001ab0d <IDE::detect()+0x251>
c001ab00:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001ab08:	e9 e0 fd ff ff       	jmp    c001a8ed <IDE::detect()+0x31>
c001ab0d:	4e                   	dec    esi
c001ab0e:	74 61                	je     c001ab71 <IDE::detect()+0x2b5>
c001ab10:	be 01 00 00 00       	mov    esi,0x1
c001ab15:	e9 cb fd ff ff       	jmp    c001a8e5 <IDE::detect()+0x29>
c001ab1a:	50                   	push   eax
c001ab1b:	6a 04                	push   0x4
c001ab1d:	56                   	push   esi
c001ab1e:	53                   	push   ebx
c001ab1f:	e8 2a f7 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001ab24:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ab28:	83 c4 0c             	add    esp,0xc
c001ab2b:	6a 05                	push   0x5
c001ab2d:	56                   	push   esi
c001ab2e:	53                   	push   ebx
c001ab2f:	e8 1a f7 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001ab34:	83 c4 10             	add    esp,0x10
c001ab37:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001ab3b:	80 fa 14             	cmp    dl,0x14
c001ab3e:	75 04                	jne    c001ab44 <IDE::detect()+0x288>
c001ab40:	3c eb                	cmp    al,0xeb
c001ab42:	eb 07                	jmp    c001ab4b <IDE::detect()+0x28f>
c001ab44:	3c 96                	cmp    al,0x96
c001ab46:	75 b1                	jne    c001aaf9 <IDE::detect()+0x23d>
c001ab48:	80 fa 69             	cmp    dl,0x69
c001ab4b:	75 ac                	jne    c001aaf9 <IDE::detect()+0x23d>
c001ab4d:	68 a1 00 00 00       	push   0xa1
c001ab52:	6a 07                	push   0x7
c001ab54:	56                   	push   esi
c001ab55:	53                   	push   ebx
c001ab56:	e8 33 f6 ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ab5b:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001ab62:	e8 45 9f ff ff       	call   c0014aac <milliTenthSleep(unsigned int)>
c001ab67:	83 c4 10             	add    esp,0x10
c001ab6a:	b1 01                	mov    cl,0x1
c001ab6c:	e9 6d fe ff ff       	jmp    c001a9de <IDE::detect()+0x122>
c001ab71:	81 c4 1c 02 00 00    	add    esp,0x21c
c001ab77:	5b                   	pop    ebx
c001ab78:	5e                   	pop    esi
c001ab79:	5f                   	pop    edi
c001ab7a:	5d                   	pop    ebp
c001ab7b:	c3                   	ret    

c001ab7c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ab7c:	55                   	push   ebp
c001ab7d:	57                   	push   edi
c001ab7e:	56                   	push   esi
c001ab7f:	53                   	push   ebx
c001ab80:	83 ec 1c             	sub    esp,0x1c
c001ab83:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab87:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ab8b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ab8f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001ab93:	88 c3                	mov    bl,al
c001ab95:	84 c0                	test   al,al
c001ab97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ab9b:	0f 84 81 00 00 00    	je     c001ac22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001aba1:	83 ec 0c             	sub    esp,0xc
c001aba4:	68 6b 0e 02 c0       	push   0xc0020e6b
c001aba9:	e8 4c fa fe ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001abae:	83 c4 10             	add    esp,0x10
c001abb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001abb5:	3c 01                	cmp    al,0x1
c001abb7:	74 63                	je     c001ac1c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001abb9:	3c 02                	cmp    al,0x2
c001abbb:	75 53                	jne    c001ac10 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001abbd:	01 f6                	add    esi,esi
c001abbf:	09 ee                	or     esi,ebp
c001abc1:	50                   	push   eax
c001abc2:	89 f0                	mov    eax,esi
c001abc4:	6a 01                	push   0x1
c001abc6:	0f b6 f0             	movzx  esi,al
c001abc9:	c1 e6 06             	shl    esi,0x6
c001abcc:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001abd4:	50                   	push   eax
c001abd5:	57                   	push   edi
c001abd6:	e8 73 f6 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001abdb:	83 c4 10             	add    esp,0x10
c001abde:	a8 01                	test   al,0x1
c001abe0:	74 02                	je     c001abe4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001abe2:	b3 07                	mov    bl,0x7
c001abe4:	a8 02                	test   al,0x2
c001abe6:	74 02                	je     c001abea <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001abe8:	b3 03                	mov    bl,0x3
c001abea:	a8 04                	test   al,0x4
c001abec:	74 02                	je     c001abf0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001abee:	b3 14                	mov    bl,0x14
c001abf0:	a8 08                	test   al,0x8
c001abf2:	74 02                	je     c001abf6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001abf4:	b3 03                	mov    bl,0x3
c001abf6:	a8 10                	test   al,0x10
c001abf8:	74 02                	je     c001abfc <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001abfa:	b3 15                	mov    bl,0x15
c001abfc:	a8 20                	test   al,0x20
c001abfe:	74 02                	je     c001ac02 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001ac00:	b3 03                	mov    bl,0x3
c001ac02:	a8 40                	test   al,0x40
c001ac04:	74 02                	je     c001ac08 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001ac06:	b3 16                	mov    bl,0x16
c001ac08:	84 c0                	test   al,al
c001ac0a:	79 16                	jns    c001ac22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ac0c:	b3 0d                	mov    bl,0xd
c001ac0e:	eb 12                	jmp    c001ac22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ac10:	3c 03                	cmp    al,0x3
c001ac12:	74 0c                	je     c001ac20 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001ac14:	3c 04                	cmp    al,0x4
c001ac16:	75 0a                	jne    c001ac22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ac18:	b3 08                	mov    bl,0x8
c001ac1a:	eb 06                	jmp    c001ac22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ac1c:	b3 13                	mov    bl,0x13
c001ac1e:	eb 02                	jmp    c001ac22 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ac20:	b3 17                	mov    bl,0x17
c001ac22:	83 c4 1c             	add    esp,0x1c
c001ac25:	88 d8                	mov    al,bl
c001ac27:	5b                   	pop    ebx
c001ac28:	5e                   	pop    esi
c001ac29:	5f                   	pop    edi
c001ac2a:	5d                   	pop    ebp
c001ac2b:	c3                   	ret    

c001ac2c <IDE::polling(unsigned char, unsigned int)>:
c001ac2c:	55                   	push   ebp
c001ac2d:	bd 04 00 00 00       	mov    ebp,0x4
c001ac32:	57                   	push   edi
c001ac33:	56                   	push   esi
c001ac34:	53                   	push   ebx
c001ac35:	83 ec 0c             	sub    esp,0xc
c001ac38:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ac3c:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001ac40:	0f b6 f3             	movzx  esi,bl
c001ac43:	52                   	push   edx
c001ac44:	6a 0c                	push   0xc
c001ac46:	56                   	push   esi
c001ac47:	57                   	push   edi
c001ac48:	e8 01 f6 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001ac4d:	83 c4 10             	add    esp,0x10
c001ac50:	4d                   	dec    ebp
c001ac51:	75 ed                	jne    c001ac40 <IDE::polling(unsigned char, unsigned int)+0x14>
c001ac53:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ac58:	50                   	push   eax
c001ac59:	6a 0c                	push   0xc
c001ac5b:	56                   	push   esi
c001ac5c:	57                   	push   edi
c001ac5d:	e8 ec f5 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001ac62:	83 c4 10             	add    esp,0x10
c001ac65:	a8 01                	test   al,0x1
c001ac67:	75 17                	jne    c001ac80 <IDE::polling(unsigned char, unsigned int)+0x54>
c001ac69:	a8 20                	test   al,0x20
c001ac6b:	75 0f                	jne    c001ac7c <IDE::polling(unsigned char, unsigned int)+0x50>
c001ac6d:	4b                   	dec    ebx
c001ac6e:	74 10                	je     c001ac80 <IDE::polling(unsigned char, unsigned int)+0x54>
c001ac70:	84 c0                	test   al,al
c001ac72:	78 e4                	js     c001ac58 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001ac74:	a8 08                	test   al,0x8
c001ac76:	74 e0                	je     c001ac58 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001ac78:	31 c0                	xor    eax,eax
c001ac7a:	eb 06                	jmp    c001ac82 <IDE::polling(unsigned char, unsigned int)+0x56>
c001ac7c:	b0 01                	mov    al,0x1
c001ac7e:	eb 02                	jmp    c001ac82 <IDE::polling(unsigned char, unsigned int)+0x56>
c001ac80:	b0 02                	mov    al,0x2
c001ac82:	83 c4 0c             	add    esp,0xc
c001ac85:	5b                   	pop    ebx
c001ac86:	5e                   	pop    esi
c001ac87:	5f                   	pop    edi
c001ac88:	5d                   	pop    ebp
c001ac89:	c3                   	ret    

c001ac8a <SATABus::close(int, int, void*)>:
c001ac8a:	31 c0                	xor    eax,eax
c001ac8c:	c3                   	ret    
c001ac8d:	90                   	nop

c001ac8e <SATABus::detect()>:
c001ac8e:	c3                   	ret    
c001ac8f:	90                   	nop

c001ac90 <SATABus::SATABus()>:
c001ac90:	83 ec 0c             	sub    esp,0xc
c001ac93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac97:	83 ec 08             	sub    esp,0x8
c001ac9a:	68 a4 0e 02 c0       	push   0xc0020ea4
c001ac9f:	50                   	push   eax
c001aca0:	e8 d7 10 ff ff       	call   c000bd7c <HardDiskController::HardDiskController(char const*)>
c001aca5:	83 c4 10             	add    esp,0x10
c001aca8:	ba d0 0e 02 c0       	mov    edx,0xc0020ed0
c001acad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acb1:	89 10                	mov    DWORD PTR [eax],edx
c001acb3:	83 ec 0c             	sub    esp,0xc
c001acb6:	6a 50                	push   0x50
c001acb8:	e8 42 cf fe ff       	call   c0007bff <Phys::allocateContiguousPages(int)>
c001acbd:	83 c4 10             	add    esp,0x10
c001acc0:	89 c2                	mov    edx,eax
c001acc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acc6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001accc:	83 ec 0c             	sub    esp,0xc
c001accf:	6a 50                	push   0x50
c001acd1:	e8 67 e6 fe ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c001acd6:	83 c4 10             	add    esp,0x10
c001acd9:	89 c2                	mov    edx,eax
c001acdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acdf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ace5:	a1 b0 3f 02 c0       	mov    eax,ds:0xc0023fb0
c001acea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acee:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001acf4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acf8:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001acfe:	83 ec 0c             	sub    esp,0xc
c001ad01:	6a 03                	push   0x3
c001ad03:	6a 50                	push   0x50
c001ad05:	51                   	push   ecx
c001ad06:	52                   	push   edx
c001ad07:	50                   	push   eax
c001ad08:	e8 ed ef fe ff       	call   c0009cfa <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ad0d:	83 c4 20             	add    esp,0x20
c001ad10:	90                   	nop
c001ad11:	83 c4 0c             	add    esp,0xc
c001ad14:	c3                   	ret    
c001ad15:	90                   	nop

c001ad16 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ad16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad1a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001ad1d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ad20:	09 c2                	or     edx,eax
c001ad22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad26:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ad2c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ad2e:	31 c0                	xor    eax,eax
c001ad30:	c1 e9 08             	shr    ecx,0x8
c001ad33:	83 e1 0f             	and    ecx,0xf
c001ad36:	39 c8                	cmp    eax,ecx
c001ad38:	74 0a                	je     c001ad44 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001ad3a:	f6 c2 01             	test   dl,0x1
c001ad3d:	74 08                	je     c001ad47 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ad3f:	d1 ea                	shr    edx,1
c001ad41:	40                   	inc    eax
c001ad42:	eb f2                	jmp    c001ad36 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ad44:	83 c8 ff             	or     eax,0xffffffff
c001ad47:	c3                   	ret    

c001ad48 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ad48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ad4c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ad4f:	89 c2                	mov    edx,eax
c001ad51:	c1 ea 08             	shr    edx,0x8
c001ad54:	83 e2 0f             	and    edx,0xf
c001ad57:	fe ca                	dec    dl
c001ad59:	75 31                	jne    c001ad8c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ad5b:	83 e0 0f             	and    eax,0xf
c001ad5e:	3c 03                	cmp    al,0x3
c001ad60:	75 2a                	jne    c001ad8c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ad62:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ad65:	b8 02 00 00 00       	mov    eax,0x2
c001ad6a:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ad70:	74 1c                	je     c001ad8e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ad72:	b8 04 00 00 00       	mov    eax,0x4
c001ad77:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001ad7d:	74 0f                	je     c001ad8e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ad7f:	31 c0                	xor    eax,eax
c001ad81:	83 fa 03             	cmp    edx,0x3
c001ad84:	0f 94 c0             	sete   al
c001ad87:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ad8b:	c3                   	ret    
c001ad8c:	31 c0                	xor    eax,eax
c001ad8e:	c3                   	ret    
c001ad8f:	90                   	nop

c001ad90 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ad90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad94:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ad97:	0f ba e2 0f          	bt     edx,0xf
c001ad9b:	72 f7                	jb     c001ad94 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001ad9d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ada0:	83 ca 10             	or     edx,0x10
c001ada3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ada6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ada9:	83 ca 01             	or     edx,0x1
c001adac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001adaf:	c3                   	ret    

c001adb0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001adb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001adb4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001adb7:	83 e2 fe             	and    edx,0xfffffffe
c001adba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001adbd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001adc0:	83 e2 ef             	and    edx,0xffffffef
c001adc3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001adc6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001adc9:	0f ba e2 0e          	bt     edx,0xe
c001adcd:	72 f7                	jb     c001adc6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001adcf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001add2:	0f ba e2 0f          	bt     edx,0xf
c001add6:	72 ee                	jb     c001adc6 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001add8:	c3                   	ret    
c001add9:	90                   	nop

c001adda <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001adda:	55                   	push   ebp
c001addb:	57                   	push   edi
c001addc:	56                   	push   esi
c001addd:	53                   	push   ebx
c001adde:	83 ec 1c             	sub    esp,0x1c
c001ade1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ade5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ade9:	53                   	push   ebx
c001adea:	56                   	push   esi
c001adeb:	e8 c0 ff ff ff       	call   c001adb0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001adf0:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001adf4:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001adfa:	83 ec 0c             	sub    esp,0xc
c001adfd:	c1 e5 0a             	shl    ebp,0xa
c001ae00:	01 e8                	add    eax,ebp
c001ae02:	89 03                	mov    DWORD PTR [ebx],eax
c001ae04:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae06:	68 00 04 00 00       	push   0x400
c001ae0b:	6a 00                	push   0x0
c001ae0d:	50                   	push   eax
c001ae0e:	e8 ad 56 fe ff       	call   c00004c0 <memset>
c001ae13:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001ae19:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ae1d:	01 e8                	add    eax,ebp
c001ae1f:	83 c4 1c             	add    esp,0x1c
c001ae22:	89 03                	mov    DWORD PTR [ebx],eax
c001ae24:	c1 e2 08             	shl    edx,0x8
c001ae27:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae2e:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001ae34:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ae3a:	01 f8                	add    eax,edi
c001ae3c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ae3f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ae42:	68 00 01 00 00       	push   0x100
c001ae47:	6a 00                	push   0x0
c001ae49:	50                   	push   eax
c001ae4a:	e8 71 56 fe ff       	call   c00004c0 <memset>
c001ae4f:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001ae55:	01 fa                	add    edx,edi
c001ae57:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ae5b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001ae5e:	c1 e7 0d             	shl    edi,0xd
c001ae61:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ae68:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001ae6e:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001ae74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae78:	31 ff                	xor    edi,edi
c001ae7a:	83 c4 10             	add    esp,0x10
c001ae7d:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001ae83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae87:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001ae8d:	83 c5 20             	add    ebp,0x20
c001ae90:	01 f8                	add    eax,edi
c001ae92:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ae95:	52                   	push   edx
c001ae96:	68 00 01 00 00       	push   0x100
c001ae9b:	6a 00                	push   0x0
c001ae9d:	50                   	push   eax
c001ae9e:	e8 1d 56 fe ff       	call   c00004c0 <memset>
c001aea3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aea7:	83 c4 10             	add    esp,0x10
c001aeaa:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001aeb0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001aeb7:	01 f8                	add    eax,edi
c001aeb9:	81 c7 00 01 00 00    	add    edi,0x100
c001aebf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001aec2:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001aec8:	75 b3                	jne    c001ae7d <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001aeca:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001aed1:	50                   	push   eax
c001aed2:	50                   	push   eax
c001aed3:	53                   	push   ebx
c001aed4:	56                   	push   esi
c001aed5:	e8 b6 fe ff ff       	call   c001ad90 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001aeda:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001aee1:	83 c4 2c             	add    esp,0x2c
c001aee4:	5b                   	pop    ebx
c001aee5:	5e                   	pop    esi
c001aee6:	5f                   	pop    edi
c001aee7:	5d                   	pop    ebp
c001aee8:	c3                   	ret    
c001aee9:	90                   	nop

c001aeea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001aeea:	55                   	push   ebp
c001aeeb:	57                   	push   edi
c001aeec:	56                   	push   esi
c001aeed:	53                   	push   ebx
c001aeee:	31 db                	xor    ebx,ebx
c001aef0:	83 ec 0c             	sub    esp,0xc
c001aef3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001aef7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001aefb:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001aefe:	f7 c7 01 00 00 00    	test   edi,0x1
c001af04:	74 7a                	je     c001af80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001af06:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001af0a:	89 d8                	mov    eax,ebx
c001af0c:	c1 e0 07             	shl    eax,0x7
c001af0f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001af16:	55                   	push   ebp
c001af17:	56                   	push   esi
c001af18:	e8 2b fe ff ff       	call   c001ad48 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001af1d:	5a                   	pop    edx
c001af1e:	83 f8 01             	cmp    eax,0x1
c001af21:	59                   	pop    ecx
c001af22:	75 21                	jne    c001af45 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001af24:	50                   	push   eax
c001af25:	53                   	push   ebx
c001af26:	55                   	push   ebp
c001af27:	56                   	push   esi
c001af28:	e8 ad fe ff ff       	call   c001adda <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001af2d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001af34:	e8 2c c9 fe ff       	call   c0007865 <malloc>
c001af39:	89 c5                	mov    ebp,eax
c001af3b:	89 04 24             	mov    DWORD PTR [esp],eax
c001af3e:	e8 71 10 00 00       	call   c001bfb4 <SATA::SATA()>
c001af43:	eb 24                	jmp    c001af69 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001af45:	83 f8 04             	cmp    eax,0x4
c001af48:	75 36                	jne    c001af80 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001af4a:	51                   	push   ecx
c001af4b:	53                   	push   ebx
c001af4c:	55                   	push   ebp
c001af4d:	56                   	push   esi
c001af4e:	e8 87 fe ff ff       	call   c001adda <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001af53:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001af5a:	e8 06 c9 fe ff       	call   c0007865 <malloc>
c001af5f:	89 c5                	mov    ebp,eax
c001af61:	89 04 24             	mov    DWORD PTR [esp],eax
c001af64:	e8 a5 17 00 00       	call   c001c70e <SATAPI::SATAPI()>
c001af69:	58                   	pop    eax
c001af6a:	5a                   	pop    edx
c001af6b:	55                   	push   ebp
c001af6c:	56                   	push   esi
c001af6d:	e8 c6 0a ff ff       	call   c000ba38 <Device::addChild(Device*)>
c001af72:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001af75:	56                   	push   esi
c001af76:	6a 00                	push   0x0
c001af78:	53                   	push   ebx
c001af79:	55                   	push   ebp
c001af7a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001af7d:	83 c4 20             	add    esp,0x20
c001af80:	d1 ef                	shr    edi,1
c001af82:	43                   	inc    ebx
c001af83:	83 fb 20             	cmp    ebx,0x20
c001af86:	0f 85 72 ff ff ff    	jne    c001aefe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001af8c:	83 c4 0c             	add    esp,0xc
c001af8f:	5b                   	pop    ebx
c001af90:	5e                   	pop    esi
c001af91:	5f                   	pop    edi
c001af92:	5d                   	pop    ebp
c001af93:	c3                   	ret    

c001af94 <SATABus::open(int, int, void*)>:
c001af94:	83 ec 14             	sub    esp,0x14
c001af97:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001af9b:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001afa1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001afa7:	52                   	push   edx
c001afa8:	50                   	push   eax
c001afa9:	e8 3c ff ff ff       	call   c001aeea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001afae:	31 c0                	xor    eax,eax
c001afb0:	83 c4 1c             	add    esp,0x1c
c001afb3:	c3                   	ret    

c001afb4 <ATA::close(int, int, void*)>:
c001afb4:	83 ec 0c             	sub    esp,0xc
c001afb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afbb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001afc1:	85 c0                	test   eax,eax
c001afc3:	74 0c                	je     c001afd1 <ATA::close(int, int, void*)+0x1d>
c001afc5:	83 ec 0c             	sub    esp,0xc
c001afc8:	8b 10                	mov    edx,DWORD PTR [eax]
c001afca:	50                   	push   eax
c001afcb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001afce:	83 c4 10             	add    esp,0x10
c001afd1:	31 c0                	xor    eax,eax
c001afd3:	83 c4 0c             	add    esp,0xc
c001afd6:	c3                   	ret    
c001afd7:	90                   	nop

c001afd8 <ATA::powerSaving(PowerSavingLevel)>:
c001afd8:	c3                   	ret    
c001afd9:	90                   	nop

c001afda <ATA::ATA()>:
c001afda:	83 ec 0c             	sub    esp,0xc
c001afdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afe1:	83 ec 04             	sub    esp,0x4
c001afe4:	68 00 02 00 00       	push   0x200
c001afe9:	68 9d 0f 02 c0       	push   0xc0020f9d
c001afee:	50                   	push   eax
c001afef:	e8 12 0e ff ff       	call   c000be06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aff4:	83 c4 10             	add    esp,0x10
c001aff7:	ba 10 0f 02 c0       	mov    edx,0xc0020f10
c001affc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b000:	89 10                	mov    DWORD PTR [eax],edx
c001b002:	90                   	nop
c001b003:	83 c4 0c             	add    esp,0xc
c001b006:	c3                   	ret    
c001b007:	90                   	nop

c001b008 <ATA::flush(bool)>:
c001b008:	53                   	push   ebx
c001b009:	83 ec 08             	sub    esp,0x8
c001b00c:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001b011:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b015:	19 c0                	sbb    eax,eax
c001b017:	83 e0 fd             	and    eax,0xfffffffd
c001b01a:	05 ea 00 00 00       	add    eax,0xea
c001b01f:	50                   	push   eax
c001b020:	6a 07                	push   0x7
c001b022:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b029:	50                   	push   eax
c001b02a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b030:	e8 59 f1 ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b035:	83 c4 0c             	add    esp,0xc
c001b038:	6a 00                	push   0x0
c001b03a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b041:	50                   	push   eax
c001b042:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b048:	e8 df fb ff ff       	call   c001ac2c <IDE::polling(unsigned char, unsigned int)>
c001b04d:	83 c4 18             	add    esp,0x18
c001b050:	5b                   	pop    ebx
c001b051:	c3                   	ret    

c001b052 <ATA::readyForCommand()>:
c001b052:	56                   	push   esi
c001b053:	53                   	push   ebx
c001b054:	53                   	push   ebx
c001b055:	31 db                	xor    ebx,ebx
c001b057:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b05b:	51                   	push   ecx
c001b05c:	6a 0c                	push   0xc
c001b05e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b065:	50                   	push   eax
c001b066:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b06c:	e8 dd f1 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001b071:	83 c4 10             	add    esp,0x10
c001b074:	a8 88                	test   al,0x88
c001b076:	74 1f                	je     c001b097 <ATA::readyForCommand()+0x45>
c001b078:	43                   	inc    ebx
c001b079:	83 fb 63             	cmp    ebx,0x63
c001b07c:	7e dd                	jle    c001b05b <ATA::readyForCommand()+0x9>
c001b07e:	83 ec 0c             	sub    esp,0xc
c001b081:	6a 0a                	push   0xa
c001b083:	e8 24 9a ff ff       	call   c0014aac <milliTenthSleep(unsigned int)>
c001b088:	83 c4 10             	add    esp,0x10
c001b08b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001b091:	75 c8                	jne    c001b05b <ATA::readyForCommand()+0x9>
c001b093:	31 c0                	xor    eax,eax
c001b095:	eb 02                	jmp    c001b099 <ATA::readyForCommand()+0x47>
c001b097:	b0 01                	mov    al,0x1
c001b099:	5a                   	pop    edx
c001b09a:	5b                   	pop    ebx
c001b09b:	5e                   	pop    esi
c001b09c:	c3                   	ret    
c001b09d:	90                   	nop

c001b09e <ATA::access(unsigned long long, int, void*, bool)>:
c001b09e:	55                   	push   ebp
c001b09f:	57                   	push   edi
c001b0a0:	56                   	push   esi
c001b0a1:	53                   	push   ebx
c001b0a2:	83 ec 2c             	sub    esp,0x2c
c001b0a5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001b0a9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b0ad:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001b0b1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b0b5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001b0b9:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b0bd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b0c1:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b0c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b0cb:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b0d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b0d5:	c1 e0 06             	shl    eax,0x6
c001b0d8:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001b0e0:	74 5d                	je     c001b13f <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001b0e2:	89 fa                	mov    edx,edi
c001b0e4:	89 f0                	mov    eax,esi
c001b0e6:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001b0ea:	c1 ea 1c             	shr    edx,0x1c
c001b0ed:	89 d1                	mov    ecx,edx
c001b0ef:	09 c1                	or     ecx,eax
c001b0f1:	74 25                	je     c001b118 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001b0f3:	31 ed                	xor    ebp,ebp
c001b0f5:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001b0fc:	89 fa                	mov    edx,edi
c001b0fe:	89 f0                	mov    eax,esi
c001b100:	0f ad d0             	shrd   eax,edx,cl
c001b103:	d3 ea                	shr    edx,cl
c001b105:	f6 c1 20             	test   cl,0x20
c001b108:	74 02                	je     c001b10c <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001b10a:	89 d0                	mov    eax,edx
c001b10c:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001b110:	45                   	inc    ebp
c001b111:	83 fd 06             	cmp    ebp,0x6
c001b114:	75 df                	jne    c001b0f5 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001b116:	eb 76                	jmp    c001b18e <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001b118:	89 f0                	mov    eax,esi
c001b11a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001b11f:	89 fa                	mov    edx,edi
c001b121:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b128:	0f ac d0 10          	shrd   eax,edx,0x10
c001b12c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b131:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b135:	c1 ee 18             	shr    esi,0x18
c001b138:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001b13d:	eb 56                	jmp    c001b195 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001b13f:	6a 00                	push   0x0
c001b141:	6a 3f                	push   0x3f
c001b143:	57                   	push   edi
c001b144:	56                   	push   esi
c001b145:	e8 66 2a 00 00       	call   c001dbb0 <__umoddi3>
c001b14a:	83 c4 10             	add    esp,0x10
c001b14d:	40                   	inc    eax
c001b14e:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001b152:	6a 00                	push   0x0
c001b154:	68 f0 03 00 00       	push   0x3f0
c001b159:	57                   	push   edi
c001b15a:	56                   	push   esi
c001b15b:	e8 50 29 00 00       	call   c001dab0 <__udivdi3>
c001b160:	83 c4 10             	add    esp,0x10
c001b163:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001b168:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001b16f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001b174:	6a 00                	push   0x0
c001b176:	6a 3f                	push   0x3f
c001b178:	57                   	push   edi
c001b179:	56                   	push   esi
c001b17a:	e8 31 29 00 00       	call   c001dab0 <__udivdi3>
c001b17f:	83 c4 10             	add    esp,0x10
c001b182:	89 c6                	mov    esi,eax
c001b184:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001b189:	83 e6 0f             	and    esi,0xf
c001b18c:	eb 07                	jmp    c001b195 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001b18e:	31 f6                	xor    esi,esi
c001b190:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001b195:	bf 01 00 00 00       	mov    edi,0x1
c001b19a:	50                   	push   eax
c001b19b:	6a 00                	push   0x0
c001b19d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b1a4:	50                   	push   eax
c001b1a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b1a9:	e8 ee f1 ff ff       	call   c001a39c <IDE::enableIRQs(unsigned char, bool)>
c001b1ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b1b1:	e8 9c fe ff ff       	call   c001b052 <ATA::readyForCommand()>
c001b1b6:	83 c4 10             	add    esp,0x10
c001b1b9:	84 c0                	test   al,al
c001b1bb:	0f 84 4e 02 00 00    	je     c001b40f <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001b1c1:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001b1c7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b1cd:	c1 e0 04             	shl    eax,0x4
c001b1d0:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001b1d7:	09 c6                	or     esi,eax
c001b1d9:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001b1de:	75 05                	jne    c001b1e5 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001b1e0:	83 ce a0             	or     esi,0xffffffa0
c001b1e3:	eb 03                	jmp    c001b1e8 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001b1e5:	83 ce e0             	or     esi,0xffffffe0
c001b1e8:	89 f0                	mov    eax,esi
c001b1ea:	0f b6 f0             	movzx  esi,al
c001b1ed:	56                   	push   esi
c001b1ee:	6a 06                	push   0x6
c001b1f0:	51                   	push   ecx
c001b1f1:	52                   	push   edx
c001b1f2:	e8 97 ef ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b1f7:	83 c4 10             	add    esp,0x10
c001b1fa:	6a 00                	push   0x0
c001b1fc:	6a 01                	push   0x1
c001b1fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b205:	50                   	push   eax
c001b206:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b20c:	e8 7d ef ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b211:	83 c4 10             	add    esp,0x10
c001b214:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001b219:	75 6e                	jne    c001b289 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001b21b:	6a 00                	push   0x0
c001b21d:	6a 08                	push   0x8
c001b21f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b226:	50                   	push   eax
c001b227:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b22d:	e8 5c ef ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b232:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001b237:	50                   	push   eax
c001b238:	6a 09                	push   0x9
c001b23a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b241:	50                   	push   eax
c001b242:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b248:	e8 41 ef ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b24d:	83 c4 20             	add    esp,0x20
c001b250:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001b255:	50                   	push   eax
c001b256:	6a 0a                	push   0xa
c001b258:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b25f:	50                   	push   eax
c001b260:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b266:	e8 23 ef ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b26b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001b270:	50                   	push   eax
c001b271:	6a 0b                	push   0xb
c001b273:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b27a:	50                   	push   eax
c001b27b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b281:	e8 08 ef ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b286:	83 c4 20             	add    esp,0x20
c001b289:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001b28e:	50                   	push   eax
c001b28f:	6a 02                	push   0x2
c001b291:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b298:	50                   	push   eax
c001b299:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b29f:	e8 ea ee ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2a4:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001b2a9:	50                   	push   eax
c001b2aa:	6a 03                	push   0x3
c001b2ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b2b3:	50                   	push   eax
c001b2b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b2ba:	e8 cf ee ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2bf:	83 c4 20             	add    esp,0x20
c001b2c2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001b2c7:	50                   	push   eax
c001b2c8:	6a 04                	push   0x4
c001b2ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b2d1:	50                   	push   eax
c001b2d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b2d8:	e8 b1 ee ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b2e2:	50                   	push   eax
c001b2e3:	6a 05                	push   0x5
c001b2e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b2ec:	50                   	push   eax
c001b2ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b2f3:	e8 96 ee ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b2f8:	83 c4 20             	add    esp,0x20
c001b2fb:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001b300:	0f 94 c0             	sete   al
c001b303:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b308:	74 09                	je     c001b313 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001b30a:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001b311:	eb 07                	jmp    c001b31a <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001b313:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001b31a:	0f b6 c0             	movzx  eax,al
c001b31d:	50                   	push   eax
c001b31e:	6a 07                	push   0x7
c001b320:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b327:	50                   	push   eax
c001b328:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b32e:	e8 5b ee ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b333:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001b337:	83 c4 10             	add    esp,0x10
c001b33a:	85 f6                	test   esi,esi
c001b33c:	0f 84 ae 00 00 00    	je     c001b3f0 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001b342:	50                   	push   eax
c001b343:	6a 01                	push   0x1
c001b345:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b34c:	50                   	push   eax
c001b34d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b353:	e8 d4 f8 ff ff       	call   c001ac2c <IDE::polling(unsigned char, unsigned int)>
c001b358:	83 c4 10             	add    esp,0x10
c001b35b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b361:	84 c0                	test   al,al
c001b363:	74 20                	je     c001b385 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001b365:	0f b6 f8             	movzx  edi,al
c001b368:	0f b6 d2             	movzx  edx,dl
c001b36b:	57                   	push   edi
c001b36c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001b373:	50                   	push   eax
c001b374:	52                   	push   edx
c001b375:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b37b:	e8 fc f7 ff ff       	call   c001ab7c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001b380:	e9 87 00 00 00       	jmp    c001b40c <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001b385:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b38a:	74 33                	je     c001b3bf <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001b38c:	31 ed                	xor    ebp,ebp
c001b38e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b392:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001b396:	50                   	push   eax
c001b397:	50                   	push   eax
c001b398:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b39f:	50                   	push   eax
c001b3a0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b3a6:	e8 d1 ed ff ff       	call   c001a17c <IDE::getBase(unsigned char)>
c001b3ab:	89 c2                	mov    edx,eax
c001b3ad:	89 f8                	mov    eax,edi
c001b3af:	66 ef                	out    dx,ax
c001b3b1:	45                   	inc    ebp
c001b3b2:	83 c4 10             	add    esp,0x10
c001b3b5:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001b3bb:	75 d1                	jne    c001b38e <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001b3bd:	eb 23                	jmp    c001b3e2 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001b3bf:	0f b6 d2             	movzx  edx,dl
c001b3c2:	51                   	push   ecx
c001b3c3:	51                   	push   ecx
c001b3c4:	52                   	push   edx
c001b3c5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b3cb:	e8 ac ed ff ff       	call   c001a17c <IDE::getBase(unsigned char)>
c001b3d0:	b9 00 01 00 00       	mov    ecx,0x100
c001b3d5:	89 c2                	mov    edx,eax
c001b3d7:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001b3db:	fc                   	cld    
c001b3dc:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001b3df:	83 c4 10             	add    esp,0x10
c001b3e2:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001b3ea:	4e                   	dec    esi
c001b3eb:	e9 4a ff ff ff       	jmp    c001b33a <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001b3f0:	31 ff                	xor    edi,edi
c001b3f2:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001b3f7:	74 16                	je     c001b40f <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001b3f9:	50                   	push   eax
c001b3fa:	50                   	push   eax
c001b3fb:	31 c0                	xor    eax,eax
c001b3fd:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001b402:	0f 94 c0             	sete   al
c001b405:	50                   	push   eax
c001b406:	53                   	push   ebx
c001b407:	e8 fc fb ff ff       	call   c001b008 <ATA::flush(bool)>
c001b40c:	83 c4 10             	add    esp,0x10
c001b40f:	83 c4 2c             	add    esp,0x2c
c001b412:	89 f8                	mov    eax,edi
c001b414:	5b                   	pop    ebx
c001b415:	5e                   	pop    esi
c001b416:	5f                   	pop    edi
c001b417:	5d                   	pop    ebp
c001b418:	c3                   	ret    
c001b419:	90                   	nop

c001b41a <ATA::detectCHS()>:
c001b41a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b41e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001b424:	c1 e0 06             	shl    eax,0x6
c001b427:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001b42d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001b437:	c7 44 24 04 f4 0e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020ef4
c001b43f:	e9 6b 4f ff ff       	jmp    c00103af <KePanic(char const*)>

c001b444 <ATA::open(int, int, void*)>:
c001b444:	53                   	push   ebx
c001b445:	83 ec 08             	sub    esp,0x8
c001b448:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b44c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b450:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b454:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001b45a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001b460:	c1 e0 06             	shl    eax,0x6
c001b463:	01 d0                	add    eax,edx
c001b465:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001b46c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001b472:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001b479:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001b483:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001b489:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001b490:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001b497:	75 0c                	jne    c001b4a5 <ATA::open(int, int, void*)+0x61>
c001b499:	83 ec 0c             	sub    esp,0xc
c001b49c:	53                   	push   ebx
c001b49d:	e8 78 ff ff ff       	call   c001b41a <ATA::detectCHS()>
c001b4a2:	83 c4 10             	add    esp,0x10
c001b4a5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001b4ab:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001b4b1:	c1 e0 06             	shl    eax,0x6
c001b4b4:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001b4bb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b4c5:	d1 e8                	shr    eax,1
c001b4c7:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001b4cd:	6a 04                	push   0x4
c001b4cf:	6a 0c                	push   0xc
c001b4d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b4d8:	50                   	push   eax
c001b4d9:	52                   	push   edx
c001b4da:	e8 af ec ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4df:	90                   	nop
c001b4e0:	90                   	nop
c001b4e1:	6a 00                	push   0x0
c001b4e3:	6a 0c                	push   0xc
c001b4e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001b4ec:	50                   	push   eax
c001b4ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001b4f3:	e8 96 ec ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b4f8:	83 c4 14             	add    esp,0x14
c001b4fb:	53                   	push   ebx
c001b4fc:	e8 6d 09 ff ff       	call   c000be6e <PhysicalDisk::startCache()>
c001b501:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b504:	e8 cd 1a ff ff       	call   c000cfd6 <createPartitionsForDisk(PhysicalDisk*)>
c001b509:	31 c0                	xor    eax,eax
c001b50b:	83 c4 18             	add    esp,0x18
c001b50e:	5b                   	pop    ebx
c001b50f:	c3                   	ret    

c001b510 <combineCharAndColour(char, unsigned char)>:
c001b510:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b515:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001b51b:	c1 e0 08             	shl    eax,0x8
c001b51e:	09 d0                	or     eax,edx
c001b520:	c3                   	ret    

c001b521 <combineColours(unsigned char, unsigned char)>:
c001b521:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b526:	c1 e0 04             	shl    eax,0x4
c001b529:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001b52d:	c3                   	ret    

c001b52e <ATA::read(unsigned long long, int, void*)>:
c001b52e:	55                   	push   ebp
c001b52f:	57                   	push   edi
c001b530:	56                   	push   esi
c001b531:	be 04 00 00 00       	mov    esi,0x4
c001b536:	53                   	push   ebx
c001b537:	83 ec 0c             	sub    esp,0xc
c001b53a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b53e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b542:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b545:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b549:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b54d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b553:	0f 87 a1 01 00 00    	ja     c001b6fa <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b559:	be 06 00 00 00       	mov    esi,0x6
c001b55e:	85 c9                	test   ecx,ecx
c001b560:	0f 84 94 01 00 00    	je     c001b6fa <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b566:	55                   	push   ebp
c001b567:	55                   	push   ebp
c001b568:	6a 00                	push   0x0
c001b56a:	51                   	push   ecx
c001b56b:	53                   	push   ebx
c001b56c:	52                   	push   edx
c001b56d:	50                   	push   eax
c001b56e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b572:	e8 27 fb ff ff       	call   c001b09e <ATA::access(unsigned long long, int, void*, bool)>
c001b577:	83 c4 20             	add    esp,0x20
c001b57a:	89 c6                	mov    esi,eax
c001b57c:	85 c0                	test   eax,eax
c001b57e:	0f 85 71 01 00 00    	jne    c001b6f5 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001b584:	03 1d 54 7b 02 c0    	add    ebx,DWORD PTR ds:0xc0027b54
c001b58a:	89 da                	mov    edx,ebx
c001b58c:	50                   	push   eax
c001b58d:	bd 10 27 00 00       	mov    ebp,0x2710
c001b592:	50                   	push   eax
c001b593:	89 1d 54 7b 02 c0    	mov    DWORD PTR ds:0xc0027b54,ebx
c001b599:	6a 0f                	push   0xf
c001b59b:	6a 00                	push   0x0
c001b59d:	e8 7f ff ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001b5a2:	59                   	pop    ecx
c001b5a3:	b9 0a 00 00 00       	mov    ecx,0xa
c001b5a8:	5b                   	pop    ebx
c001b5a9:	0f b6 d8             	movzx  ebx,al
c001b5ac:	89 d0                	mov    eax,edx
c001b5ae:	53                   	push   ebx
c001b5af:	99                   	cdq    
c001b5b0:	f7 fd                	idiv   ebp
c001b5b2:	99                   	cdq    
c001b5b3:	f7 f9                	idiv   ecx
c001b5b5:	83 c2 30             	add    edx,0x30
c001b5b8:	0f b6 d2             	movzx  edx,dl
c001b5bb:	52                   	push   edx
c001b5bc:	e8 4f ff ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b5c1:	5f                   	pop    edi
c001b5c2:	bf e8 03 00 00       	mov    edi,0x3e8
c001b5c7:	5a                   	pop    edx
c001b5c8:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b5ce:	53                   	push   ebx
c001b5cf:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b5d4:	99                   	cdq    
c001b5d5:	f7 ff                	idiv   edi
c001b5d7:	99                   	cdq    
c001b5d8:	f7 f9                	idiv   ecx
c001b5da:	8d 42 30             	lea    eax,[edx+0x30]
c001b5dd:	0f b6 c0             	movzx  eax,al
c001b5e0:	50                   	push   eax
c001b5e1:	e8 2a ff ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b5e6:	5f                   	pop    edi
c001b5e7:	bf 64 00 00 00       	mov    edi,0x64
c001b5ec:	5a                   	pop    edx
c001b5ed:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b5f3:	53                   	push   ebx
c001b5f4:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b5f9:	99                   	cdq    
c001b5fa:	f7 ff                	idiv   edi
c001b5fc:	99                   	cdq    
c001b5fd:	f7 f9                	idiv   ecx
c001b5ff:	8d 42 30             	lea    eax,[edx+0x30]
c001b602:	0f b6 c0             	movzx  eax,al
c001b605:	50                   	push   eax
c001b606:	e8 05 ff ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b60b:	5a                   	pop    edx
c001b60c:	5a                   	pop    edx
c001b60d:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b613:	53                   	push   ebx
c001b614:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b619:	99                   	cdq    
c001b61a:	f7 f9                	idiv   ecx
c001b61c:	99                   	cdq    
c001b61d:	f7 f9                	idiv   ecx
c001b61f:	8d 42 30             	lea    eax,[edx+0x30]
c001b622:	0f b6 c0             	movzx  eax,al
c001b625:	50                   	push   eax
c001b626:	e8 e5 fe ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b62b:	5a                   	pop    edx
c001b62c:	5a                   	pop    edx
c001b62d:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b633:	53                   	push   ebx
c001b634:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b639:	99                   	cdq    
c001b63a:	f7 f9                	idiv   ecx
c001b63c:	83 c2 30             	add    edx,0x30
c001b63f:	0f b6 d2             	movzx  edx,dl
c001b642:	52                   	push   edx
c001b643:	e8 c8 fe ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b648:	5a                   	pop    edx
c001b649:	5a                   	pop    edx
c001b64a:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b650:	53                   	push   ebx
c001b651:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b656:	99                   	cdq    
c001b657:	f7 fd                	idiv   ebp
c001b659:	99                   	cdq    
c001b65a:	f7 f9                	idiv   ecx
c001b65c:	8d 42 30             	lea    eax,[edx+0x30]
c001b65f:	0f b6 c0             	movzx  eax,al
c001b662:	50                   	push   eax
c001b663:	e8 a8 fe ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b668:	5d                   	pop    ebp
c001b669:	bd e8 03 00 00       	mov    ebp,0x3e8
c001b66e:	5a                   	pop    edx
c001b66f:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b675:	53                   	push   ebx
c001b676:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b67b:	99                   	cdq    
c001b67c:	f7 fd                	idiv   ebp
c001b67e:	99                   	cdq    
c001b67f:	f7 f9                	idiv   ecx
c001b681:	8d 42 30             	lea    eax,[edx+0x30]
c001b684:	0f b6 c0             	movzx  eax,al
c001b687:	50                   	push   eax
c001b688:	e8 83 fe ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b68d:	5d                   	pop    ebp
c001b68e:	5a                   	pop    edx
c001b68f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b695:	53                   	push   ebx
c001b696:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b69b:	99                   	cdq    
c001b69c:	f7 ff                	idiv   edi
c001b69e:	99                   	cdq    
c001b69f:	f7 f9                	idiv   ecx
c001b6a1:	8d 42 30             	lea    eax,[edx+0x30]
c001b6a4:	0f b6 c0             	movzx  eax,al
c001b6a7:	50                   	push   eax
c001b6a8:	e8 63 fe ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b6ad:	5f                   	pop    edi
c001b6ae:	5d                   	pop    ebp
c001b6af:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b6b5:	53                   	push   ebx
c001b6b6:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b6bb:	99                   	cdq    
c001b6bc:	f7 f9                	idiv   ecx
c001b6be:	99                   	cdq    
c001b6bf:	f7 f9                	idiv   ecx
c001b6c1:	8d 42 30             	lea    eax,[edx+0x30]
c001b6c4:	0f b6 c0             	movzx  eax,al
c001b6c7:	50                   	push   eax
c001b6c8:	e8 43 fe ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b6cd:	5a                   	pop    edx
c001b6ce:	5f                   	pop    edi
c001b6cf:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b6d5:	53                   	push   ebx
c001b6d6:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b6db:	99                   	cdq    
c001b6dc:	f7 f9                	idiv   ecx
c001b6de:	83 c2 30             	add    edx,0x30
c001b6e1:	0f b6 d2             	movzx  edx,dl
c001b6e4:	52                   	push   edx
c001b6e5:	e8 26 fe ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b6ea:	83 c4 10             	add    esp,0x10
c001b6ed:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b6f3:	eb 05                	jmp    c001b6fa <ATA::read(unsigned long long, int, void*)+0x1cc>
c001b6f5:	be 01 00 00 00       	mov    esi,0x1
c001b6fa:	83 c4 0c             	add    esp,0xc
c001b6fd:	89 f0                	mov    eax,esi
c001b6ff:	5b                   	pop    ebx
c001b700:	5e                   	pop    esi
c001b701:	5f                   	pop    edi
c001b702:	5d                   	pop    ebp
c001b703:	c3                   	ret    

c001b704 <ATA::write(unsigned long long, int, void*)>:
c001b704:	55                   	push   ebp
c001b705:	57                   	push   edi
c001b706:	56                   	push   esi
c001b707:	be 04 00 00 00       	mov    esi,0x4
c001b70c:	53                   	push   ebx
c001b70d:	83 ec 0c             	sub    esp,0xc
c001b710:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b714:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b718:	8d 7b ff             	lea    edi,[ebx-0x1]
c001b71b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b71f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b723:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001b729:	0f 87 9c 01 00 00    	ja     c001b8cb <ATA::write(unsigned long long, int, void*)+0x1c7>
c001b72f:	be 06 00 00 00       	mov    esi,0x6
c001b734:	85 c9                	test   ecx,ecx
c001b736:	0f 84 8f 01 00 00    	je     c001b8cb <ATA::write(unsigned long long, int, void*)+0x1c7>
c001b73c:	55                   	push   ebp
c001b73d:	55                   	push   ebp
c001b73e:	6a 01                	push   0x1
c001b740:	51                   	push   ecx
c001b741:	53                   	push   ebx
c001b742:	52                   	push   edx
c001b743:	50                   	push   eax
c001b744:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b748:	e8 51 f9 ff ff       	call   c001b09e <ATA::access(unsigned long long, int, void*, bool)>
c001b74d:	83 c4 20             	add    esp,0x20
c001b750:	89 c6                	mov    esi,eax
c001b752:	85 c0                	test   eax,eax
c001b754:	0f 85 6c 01 00 00    	jne    c001b8c6 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001b75a:	01 1d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebx
c001b760:	bd 10 27 00 00       	mov    ebp,0x2710
c001b765:	50                   	push   eax
c001b766:	50                   	push   eax
c001b767:	6a 0f                	push   0xf
c001b769:	6a 00                	push   0x0
c001b76b:	e8 b1 fd ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001b770:	5a                   	pop    edx
c001b771:	0f b6 d8             	movzx  ebx,al
c001b774:	59                   	pop    ecx
c001b775:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b77a:	53                   	push   ebx
c001b77b:	b9 0a 00 00 00       	mov    ecx,0xa
c001b780:	99                   	cdq    
c001b781:	f7 fd                	idiv   ebp
c001b783:	99                   	cdq    
c001b784:	f7 f9                	idiv   ecx
c001b786:	8d 42 30             	lea    eax,[edx+0x30]
c001b789:	0f b6 c0             	movzx  eax,al
c001b78c:	50                   	push   eax
c001b78d:	e8 7e fd ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b792:	5f                   	pop    edi
c001b793:	bf e8 03 00 00       	mov    edi,0x3e8
c001b798:	5a                   	pop    edx
c001b799:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001b79f:	53                   	push   ebx
c001b7a0:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b7a5:	99                   	cdq    
c001b7a6:	f7 ff                	idiv   edi
c001b7a8:	99                   	cdq    
c001b7a9:	f7 f9                	idiv   ecx
c001b7ab:	8d 42 30             	lea    eax,[edx+0x30]
c001b7ae:	0f b6 c0             	movzx  eax,al
c001b7b1:	50                   	push   eax
c001b7b2:	e8 59 fd ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b7b7:	5f                   	pop    edi
c001b7b8:	bf 64 00 00 00       	mov    edi,0x64
c001b7bd:	5a                   	pop    edx
c001b7be:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001b7c4:	53                   	push   ebx
c001b7c5:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b7ca:	99                   	cdq    
c001b7cb:	f7 ff                	idiv   edi
c001b7cd:	99                   	cdq    
c001b7ce:	f7 f9                	idiv   ecx
c001b7d0:	8d 42 30             	lea    eax,[edx+0x30]
c001b7d3:	0f b6 c0             	movzx  eax,al
c001b7d6:	50                   	push   eax
c001b7d7:	e8 34 fd ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b7dc:	5a                   	pop    edx
c001b7dd:	5a                   	pop    edx
c001b7de:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001b7e4:	53                   	push   ebx
c001b7e5:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b7ea:	99                   	cdq    
c001b7eb:	f7 f9                	idiv   ecx
c001b7ed:	99                   	cdq    
c001b7ee:	f7 f9                	idiv   ecx
c001b7f0:	8d 42 30             	lea    eax,[edx+0x30]
c001b7f3:	0f b6 c0             	movzx  eax,al
c001b7f6:	50                   	push   eax
c001b7f7:	e8 14 fd ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b7fc:	5a                   	pop    edx
c001b7fd:	5a                   	pop    edx
c001b7fe:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001b804:	53                   	push   ebx
c001b805:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001b80a:	99                   	cdq    
c001b80b:	f7 f9                	idiv   ecx
c001b80d:	8d 42 30             	lea    eax,[edx+0x30]
c001b810:	0f b6 c0             	movzx  eax,al
c001b813:	50                   	push   eax
c001b814:	e8 f7 fc ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b819:	5a                   	pop    edx
c001b81a:	5a                   	pop    edx
c001b81b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001b821:	53                   	push   ebx
c001b822:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b827:	99                   	cdq    
c001b828:	f7 fd                	idiv   ebp
c001b82a:	99                   	cdq    
c001b82b:	f7 f9                	idiv   ecx
c001b82d:	8d 42 30             	lea    eax,[edx+0x30]
c001b830:	0f b6 c0             	movzx  eax,al
c001b833:	50                   	push   eax
c001b834:	e8 d7 fc ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b839:	5d                   	pop    ebp
c001b83a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001b83f:	5a                   	pop    edx
c001b840:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001b846:	53                   	push   ebx
c001b847:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b84c:	99                   	cdq    
c001b84d:	f7 fd                	idiv   ebp
c001b84f:	99                   	cdq    
c001b850:	f7 f9                	idiv   ecx
c001b852:	8d 42 30             	lea    eax,[edx+0x30]
c001b855:	0f b6 c0             	movzx  eax,al
c001b858:	50                   	push   eax
c001b859:	e8 b2 fc ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b85e:	5d                   	pop    ebp
c001b85f:	5a                   	pop    edx
c001b860:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001b866:	53                   	push   ebx
c001b867:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b86c:	99                   	cdq    
c001b86d:	f7 ff                	idiv   edi
c001b86f:	99                   	cdq    
c001b870:	f7 f9                	idiv   ecx
c001b872:	8d 42 30             	lea    eax,[edx+0x30]
c001b875:	0f b6 c0             	movzx  eax,al
c001b878:	50                   	push   eax
c001b879:	e8 92 fc ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b87e:	5f                   	pop    edi
c001b87f:	5d                   	pop    ebp
c001b880:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001b886:	53                   	push   ebx
c001b887:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b88c:	99                   	cdq    
c001b88d:	f7 f9                	idiv   ecx
c001b88f:	99                   	cdq    
c001b890:	f7 f9                	idiv   ecx
c001b892:	8d 42 30             	lea    eax,[edx+0x30]
c001b895:	0f b6 c0             	movzx  eax,al
c001b898:	50                   	push   eax
c001b899:	e8 72 fc ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b89e:	5a                   	pop    edx
c001b89f:	5f                   	pop    edi
c001b8a0:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001b8a6:	53                   	push   ebx
c001b8a7:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001b8ac:	99                   	cdq    
c001b8ad:	f7 f9                	idiv   ecx
c001b8af:	83 c2 30             	add    edx,0x30
c001b8b2:	0f b6 d2             	movzx  edx,dl
c001b8b5:	52                   	push   edx
c001b8b6:	e8 55 fc ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001b8bb:	83 c4 10             	add    esp,0x10
c001b8be:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001b8c4:	eb 05                	jmp    c001b8cb <ATA::write(unsigned long long, int, void*)+0x1c7>
c001b8c6:	be 01 00 00 00       	mov    esi,0x1
c001b8cb:	83 c4 0c             	add    esp,0xc
c001b8ce:	89 f0                	mov    eax,esi
c001b8d0:	5b                   	pop    ebx
c001b8d1:	5e                   	pop    esi
c001b8d2:	5f                   	pop    edi
c001b8d3:	5d                   	pop    ebp
c001b8d4:	c3                   	ret    
c001b8d5:	90                   	nop

c001b8d6 <ATAPI::write(unsigned long long, int, void*)>:
c001b8d6:	b8 03 00 00 00       	mov    eax,0x3
c001b8db:	c3                   	ret    

c001b8dc <ATAPI::close(int, int, void*)>:
c001b8dc:	83 ec 0c             	sub    esp,0xc
c001b8df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8e3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b8e9:	85 c0                	test   eax,eax
c001b8eb:	74 0c                	je     c001b8f9 <ATAPI::close(int, int, void*)+0x1d>
c001b8ed:	83 ec 0c             	sub    esp,0xc
c001b8f0:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8f2:	50                   	push   eax
c001b8f3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b8f6:	83 c4 10             	add    esp,0x10
c001b8f9:	31 c0                	xor    eax,eax
c001b8fb:	83 c4 0c             	add    esp,0xc
c001b8fe:	c3                   	ret    
c001b8ff:	90                   	nop

c001b900 <ATAPI::ATAPI()>:
c001b900:	83 ec 0c             	sub    esp,0xc
c001b903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b907:	83 ec 04             	sub    esp,0x4
c001b90a:	68 00 08 00 00       	push   0x800
c001b90f:	68 3d 10 02 c0       	push   0xc002103d
c001b914:	50                   	push   eax
c001b915:	e8 ec 04 ff ff       	call   c000be06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001b91a:	83 c4 10             	add    esp,0x10
c001b91d:	ba 58 0f 02 c0       	mov    edx,0xc0020f58
c001b922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b926:	89 10                	mov    DWORD PTR [eax],edx
c001b928:	90                   	nop
c001b929:	83 c4 0c             	add    esp,0xc
c001b92c:	c3                   	ret    
c001b92d:	90                   	nop

c001b92e <ATAPI::readyForCommand()>:
c001b92e:	56                   	push   esi
c001b92f:	53                   	push   ebx
c001b930:	53                   	push   ebx
c001b931:	31 db                	xor    ebx,ebx
c001b933:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b937:	51                   	push   ecx
c001b938:	6a 0c                	push   0xc
c001b93a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001b941:	50                   	push   eax
c001b942:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001b948:	e8 01 e9 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001b94d:	83 c4 10             	add    esp,0x10
c001b950:	a8 88                	test   al,0x88
c001b952:	74 25                	je     c001b979 <ATAPI::readyForCommand()+0x4b>
c001b954:	43                   	inc    ebx
c001b955:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001b95b:	7e da                	jle    c001b937 <ATAPI::readyForCommand()+0x9>
c001b95d:	83 ec 0c             	sub    esp,0xc
c001b960:	68 5e 01 00 00       	push   0x15e
c001b965:	e8 42 91 ff ff       	call   c0014aac <milliTenthSleep(unsigned int)>
c001b96a:	83 c4 10             	add    esp,0x10
c001b96d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001b973:	75 c2                	jne    c001b937 <ATAPI::readyForCommand()+0x9>
c001b975:	31 c0                	xor    eax,eax
c001b977:	eb 02                	jmp    c001b97b <ATAPI::readyForCommand()+0x4d>
c001b979:	b0 01                	mov    al,0x1
c001b97b:	5a                   	pop    edx
c001b97c:	5b                   	pop    ebx
c001b97d:	5e                   	pop    esi
c001b97e:	c3                   	ret    
c001b97f:	90                   	nop

c001b980 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001b980:	55                   	push   ebp
c001b981:	57                   	push   edi
c001b982:	56                   	push   esi
c001b983:	53                   	push   ebx
c001b984:	83 ec 20             	sub    esp,0x20
c001b987:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001b98b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001b98f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001b993:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001b997:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b99b:	6a 01                	push   0x1
c001b99d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b9a4:	50                   	push   eax
c001b9a5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b9ab:	e8 ec e9 ff ff       	call   c001a39c <IDE::enableIRQs(unsigned char, bool)>
c001b9b0:	5e                   	pop    esi
c001b9b1:	58                   	pop    eax
c001b9b2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b9b9:	50                   	push   eax
c001b9ba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b9c0:	e8 a3 e7 ff ff       	call   c001a168 <IDE::prepareInterrupt(unsigned char)>
c001b9c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b9c8:	e8 61 ff ff ff       	call   c001b92e <ATAPI::readyForCommand()>
c001b9cd:	83 c4 10             	add    esp,0x10
c001b9d0:	84 c0                	test   al,al
c001b9d2:	75 0a                	jne    c001b9de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001b9d4:	bb 01 00 00 00       	mov    ebx,0x1
c001b9d9:	e9 57 02 00 00       	jmp    c001bc35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001b9de:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001b9e4:	c1 e0 04             	shl    eax,0x4
c001b9e7:	0f b6 c0             	movzx  eax,al
c001b9ea:	50                   	push   eax
c001b9eb:	6a 06                	push   0x6
c001b9ed:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001b9f4:	50                   	push   eax
c001b9f5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001b9fb:	e8 8e e7 ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba00:	6a 00                	push   0x0
c001ba02:	6a 01                	push   0x1
c001ba04:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba0b:	50                   	push   eax
c001ba0c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba12:	e8 77 e7 ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba17:	83 c4 20             	add    esp,0x20
c001ba1a:	0f b6 c3             	movzx  eax,bl
c001ba1d:	0f b6 df             	movzx  ebx,bh
c001ba20:	50                   	push   eax
c001ba21:	6a 04                	push   0x4
c001ba23:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba2a:	50                   	push   eax
c001ba2b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba31:	e8 58 e7 ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba36:	53                   	push   ebx
c001ba37:	6a 05                	push   0x5
c001ba39:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba40:	50                   	push   eax
c001ba41:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba47:	e8 42 e7 ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba4c:	83 c4 20             	add    esp,0x20
c001ba4f:	68 a0 00 00 00       	push   0xa0
c001ba54:	6a 07                	push   0x7
c001ba56:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba5d:	50                   	push   eax
c001ba5e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba64:	e8 25 e7 ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba69:	83 c4 0c             	add    esp,0xc
c001ba6c:	6a 01                	push   0x1
c001ba6e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ba75:	50                   	push   eax
c001ba76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ba7c:	e8 ab f1 ff ff       	call   c001ac2c <IDE::polling(unsigned char, unsigned int)>
c001ba81:	83 c4 10             	add    esp,0x10
c001ba84:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ba8a:	84 c0                	test   al,al
c001ba8c:	74 23                	je     c001bab1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ba8e:	0f b6 d8             	movzx  ebx,al
c001ba91:	0f b6 d2             	movzx  edx,dl
c001ba94:	53                   	push   ebx
c001ba95:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ba9c:	50                   	push   eax
c001ba9d:	52                   	push   edx
c001ba9e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001baa4:	e8 d3 f0 ff ff       	call   c001ab7c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001baa9:	83 c4 10             	add    esp,0x10
c001baac:	e9 84 01 00 00       	jmp    c001bc35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001bab1:	0f b6 d2             	movzx  edx,dl
c001bab4:	53                   	push   ebx
c001bab5:	53                   	push   ebx
c001bab6:	52                   	push   edx
c001bab7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001babd:	e8 ba e6 ff ff       	call   c001a17c <IDE::getBase(unsigned char)>
c001bac2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001bac6:	b9 06 00 00 00       	mov    ecx,0x6
c001bacb:	89 c2                	mov    edx,eax
c001bacd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001bad0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001bad4:	83 c4 10             	add    esp,0x10
c001bad7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001badd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bae4:	85 db                	test   ebx,ebx
c001bae6:	0f 84 ec 00 00 00    	je     c001bbd8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001baec:	51                   	push   ecx
c001baed:	51                   	push   ecx
c001baee:	52                   	push   edx
c001baef:	50                   	push   eax
c001baf0:	e8 07 e8 ff ff       	call   c001a2fc <IDE::waitInterrupt(unsigned char)>
c001baf5:	83 c4 10             	add    esp,0x10
c001baf8:	84 c0                	test   al,al
c001bafa:	0f 84 d4 fe ff ff    	je     c001b9d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001bb00:	56                   	push   esi
c001bb01:	56                   	push   esi
c001bb02:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bb09:	50                   	push   eax
c001bb0a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bb10:	e8 53 e6 ff ff       	call   c001a168 <IDE::prepareInterrupt(unsigned char)>
c001bb15:	83 c4 0c             	add    esp,0xc
c001bb18:	6a 04                	push   0x4
c001bb1a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bb21:	50                   	push   eax
c001bb22:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bb28:	e8 21 e7 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001bb2d:	83 c4 0c             	add    esp,0xc
c001bb30:	89 c6                	mov    esi,eax
c001bb32:	6a 05                	push   0x5
c001bb34:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bb3b:	50                   	push   eax
c001bb3c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bb42:	e8 07 e7 ff ff       	call   c001a24e <IDE::read(unsigned char, unsigned char)>
c001bb47:	89 f1                	mov    ecx,esi
c001bb49:	0f b6 c0             	movzx  eax,al
c001bb4c:	0f b6 f1             	movzx  esi,cl
c001bb4f:	c1 e0 08             	shl    eax,0x8
c001bb52:	09 c6                	or     esi,eax
c001bb54:	d1 fe                	sar    esi,1
c001bb56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001bb5a:	83 c4 10             	add    esp,0x10
c001bb5d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001bb62:	74 41                	je     c001bba5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001bb64:	31 c9                	xor    ecx,ecx
c001bb66:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bb6c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bb73:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001bb77:	75 0a                	jne    c001bb83 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001bb79:	01 c9                	add    ecx,ecx
c001bb7b:	01 cd                	add    ebp,ecx
c001bb7d:	4b                   	dec    ebx
c001bb7e:	e9 54 ff ff ff       	jmp    c001bad7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001bb83:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001bb88:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bb8c:	51                   	push   ecx
c001bb8d:	51                   	push   ecx
c001bb8e:	52                   	push   edx
c001bb8f:	50                   	push   eax
c001bb90:	e8 e7 e5 ff ff       	call   c001a17c <IDE::getBase(unsigned char)>
c001bb95:	89 c2                	mov    edx,eax
c001bb97:	89 f0                	mov    eax,esi
c001bb99:	66 ef                	out    dx,ax
c001bb9b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bb9f:	83 c4 10             	add    esp,0x10
c001bba2:	41                   	inc    ecx
c001bba3:	eb c1                	jmp    c001bb66 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001bba5:	31 f6                	xor    esi,esi
c001bba7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001bbad:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001bbb4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001bbb8:	75 06                	jne    c001bbc0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001bbba:	01 f6                	add    esi,esi
c001bbbc:	01 f5                	add    ebp,esi
c001bbbe:	eb bd                	jmp    c001bb7d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001bbc0:	51                   	push   ecx
c001bbc1:	51                   	push   ecx
c001bbc2:	52                   	push   edx
c001bbc3:	50                   	push   eax
c001bbc4:	e8 b3 e5 ff ff       	call   c001a17c <IDE::getBase(unsigned char)>
c001bbc9:	89 c2                	mov    edx,eax
c001bbcb:	66 ed                	in     ax,dx
c001bbcd:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001bbd2:	83 c4 10             	add    esp,0x10
c001bbd5:	46                   	inc    esi
c001bbd6:	eb cf                	jmp    c001bba7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001bbd8:	51                   	push   ecx
c001bbd9:	51                   	push   ecx
c001bbda:	52                   	push   edx
c001bbdb:	50                   	push   eax
c001bbdc:	e8 1b e7 ff ff       	call   c001a2fc <IDE::waitInterrupt(unsigned char)>
c001bbe1:	83 c4 10             	add    esp,0x10
c001bbe4:	84 c0                	test   al,al
c001bbe6:	0f 84 e8 fd ff ff    	je     c001b9d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001bbec:	bb a0 86 01 00       	mov    ebx,0x186a0
c001bbf1:	52                   	push   edx
c001bbf2:	52                   	push   edx
c001bbf3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bbfa:	50                   	push   eax
c001bbfb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bc01:	e8 62 e5 ff ff       	call   c001a168 <IDE::prepareInterrupt(unsigned char)>
c001bc06:	83 c4 10             	add    esp,0x10
c001bc09:	50                   	push   eax
c001bc0a:	50                   	push   eax
c001bc0b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001bc12:	50                   	push   eax
c001bc13:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001bc19:	e8 5e e5 ff ff       	call   c001a17c <IDE::getBase(unsigned char)>
c001bc1e:	8d 50 07             	lea    edx,[eax+0x7]
c001bc21:	ec                   	in     al,dx
c001bc22:	83 c4 10             	add    esp,0x10
c001bc25:	a8 88                	test   al,0x88
c001bc27:	74 0a                	je     c001bc33 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001bc29:	4b                   	dec    ebx
c001bc2a:	75 dd                	jne    c001bc09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001bc2c:	bb 02 00 00 00       	mov    ebx,0x2
c001bc31:	eb 02                	jmp    c001bc35 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001bc33:	31 db                	xor    ebx,ebx
c001bc35:	83 c4 1c             	add    esp,0x1c
c001bc38:	89 d8                	mov    eax,ebx
c001bc3a:	5b                   	pop    ebx
c001bc3b:	5e                   	pop    esi
c001bc3c:	5f                   	pop    edi
c001bc3d:	5d                   	pop    ebp
c001bc3e:	c3                   	ret    
c001bc3f:	90                   	nop

c001bc40 <ATAPI::diskRemoved()>:
c001bc40:	53                   	push   ebx
c001bc41:	83 ec 14             	sub    esp,0x14
c001bc44:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bc48:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001bc4f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001bc55:	e8 6a 10 ff ff       	call   c000ccc4 <LogicalDisk::unmount()>
c001bc5a:	58                   	pop    eax
c001bc5b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001bc61:	e8 3e 1a ff ff       	call   c000d6a4 <VCache::writeWriteBuffer()>
c001bc66:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001bc6c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bc70:	83 c4 18             	add    esp,0x18
c001bc73:	5b                   	pop    ebx
c001bc74:	e9 1b 1a ff ff       	jmp    c000d694 <VCache::invalidateReadBuffer()>
c001bc79:	90                   	nop

c001bc7a <ATAPI::eject()>:
c001bc7a:	57                   	push   edi
c001bc7b:	b9 03 00 00 00       	mov    ecx,0x3
c001bc80:	53                   	push   ebx
c001bc81:	83 ec 14             	sub    esp,0x14
c001bc84:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc88:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bc8c:	fc                   	cld    
c001bc8d:	31 c0                	xor    eax,eax
c001bc8f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001bc91:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001bc96:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001bc9b:	50                   	push   eax
c001bc9c:	50                   	push   eax
c001bc9d:	6a 00                	push   0x0
c001bc9f:	6a 00                	push   0x0
c001bca1:	6a 00                	push   0x0
c001bca3:	6a 02                	push   0x2
c001bca5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bca9:	50                   	push   eax
c001bcaa:	53                   	push   ebx
c001bcab:	e8 d0 fc ff ff       	call   c001b980 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bcb0:	83 c4 14             	add    esp,0x14
c001bcb3:	53                   	push   ebx
c001bcb4:	e8 87 ff ff ff       	call   c001bc40 <ATAPI::diskRemoved()>
c001bcb9:	83 c4 24             	add    esp,0x24
c001bcbc:	31 c0                	xor    eax,eax
c001bcbe:	5b                   	pop    ebx
c001bcbf:	5f                   	pop    edi
c001bcc0:	c3                   	ret    
c001bcc1:	90                   	nop

c001bcc2 <ATAPI::diskInserted()>:
c001bcc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bcc6:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001bccd:	c3                   	ret    

c001bcce <ATAPI::detectMedia()>:
c001bcce:	56                   	push   esi
c001bccf:	53                   	push   ebx
c001bcd0:	83 ec 28             	sub    esp,0x28
c001bcd3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bcd7:	6a 0c                	push   0xc
c001bcd9:	6a 00                	push   0x0
c001bcdb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001bcdf:	56                   	push   esi
c001bce0:	e8 db 47 fe ff       	call   c00004c0 <memset>
c001bce5:	58                   	pop    eax
c001bce6:	5a                   	pop    edx
c001bce7:	6a 00                	push   0x0
c001bce9:	6a 00                	push   0x0
c001bceb:	6a 00                	push   0x0
c001bced:	6a 00                	push   0x0
c001bcef:	56                   	push   esi
c001bcf0:	53                   	push   ebx
c001bcf1:	e8 8a fc ff ff       	call   c001b980 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bcf6:	83 c4 1c             	add    esp,0x1c
c001bcf9:	6a 0c                	push   0xc
c001bcfb:	6a 00                	push   0x0
c001bcfd:	56                   	push   esi
c001bcfe:	e8 bd 47 fe ff       	call   c00004c0 <memset>
c001bd03:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001bd08:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001bd0d:	59                   	pop    ecx
c001bd0e:	58                   	pop    eax
c001bd0f:	6a 01                	push   0x1
c001bd11:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001bd15:	50                   	push   eax
c001bd16:	6a 00                	push   0x0
c001bd18:	6a 12                	push   0x12
c001bd1a:	56                   	push   esi
c001bd1b:	53                   	push   ebx
c001bd1c:	e8 5f fc ff ff       	call   c001b980 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bd21:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001bd25:	83 c4 20             	add    esp,0x20
c001bd28:	83 e0 7f             	and    eax,0x7f
c001bd2b:	3c 70                	cmp    al,0x70
c001bd2d:	74 15                	je     c001bd44 <ATAPI::detectMedia()+0x76>
c001bd2f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bd36:	75 0c                	jne    c001bd44 <ATAPI::detectMedia()+0x76>
c001bd38:	83 ec 0c             	sub    esp,0xc
c001bd3b:	53                   	push   ebx
c001bd3c:	e8 81 ff ff ff       	call   c001bcc2 <ATAPI::diskInserted()>
c001bd41:	83 c4 10             	add    esp,0x10
c001bd44:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001bd48:	83 e0 0f             	and    eax,0xf
c001bd4b:	3c 02                	cmp    al,0x2
c001bd4d:	75 1b                	jne    c001bd6a <ATAPI::detectMedia()+0x9c>
c001bd4f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001bd54:	75 2d                	jne    c001bd83 <ATAPI::detectMedia()+0xb5>
c001bd56:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bd5d:	74 24                	je     c001bd83 <ATAPI::detectMedia()+0xb5>
c001bd5f:	83 ec 0c             	sub    esp,0xc
c001bd62:	53                   	push   ebx
c001bd63:	e8 d8 fe ff ff       	call   c001bc40 <ATAPI::diskRemoved()>
c001bd68:	eb 16                	jmp    c001bd80 <ATAPI::detectMedia()+0xb2>
c001bd6a:	84 c0                	test   al,al
c001bd6c:	75 15                	jne    c001bd83 <ATAPI::detectMedia()+0xb5>
c001bd6e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bd75:	75 0c                	jne    c001bd83 <ATAPI::detectMedia()+0xb5>
c001bd77:	83 ec 0c             	sub    esp,0xc
c001bd7a:	53                   	push   ebx
c001bd7b:	e8 42 ff ff ff       	call   c001bcc2 <ATAPI::diskInserted()>
c001bd80:	83 c4 10             	add    esp,0x10
c001bd83:	83 c4 24             	add    esp,0x24
c001bd86:	5b                   	pop    ebx
c001bd87:	5e                   	pop    esi
c001bd88:	c3                   	ret    
c001bd89:	90                   	nop

c001bd8a <ATAPI::open(int, int, void*)>:
c001bd8a:	56                   	push   esi
c001bd8b:	53                   	push   ebx
c001bd8c:	50                   	push   eax
c001bd8d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd95:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bd99:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bd9f:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001bda5:	c1 e0 06             	shl    eax,0x6
c001bda8:	01 d0                	add    eax,edx
c001bdaa:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001bdb1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001bdb7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001bdbe:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001bdc8:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001bdce:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001bdd5:	6a 04                	push   0x4
c001bdd7:	6a 0c                	push   0xc
c001bdd9:	51                   	push   ecx
c001bdda:	52                   	push   edx
c001bddb:	e8 ae e3 ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bde0:	90                   	nop
c001bde1:	90                   	nop
c001bde2:	6a 00                	push   0x0
c001bde4:	6a 0c                	push   0xc
c001bde6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001bded:	50                   	push   eax
c001bdee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001bdf4:	e8 95 e3 ff ff       	call   c001a18e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdf9:	83 c4 14             	add    esp,0x14
c001bdfc:	68 78 01 00 00       	push   0x178
c001be01:	e8 5f ba fe ff       	call   c0007865 <malloc>
c001be06:	83 c4 0c             	add    esp,0xc
c001be09:	89 c6                	mov    esi,eax
c001be0b:	6a 00                	push   0x0
c001be0d:	68 ff ff ff 7f       	push   0x7fffffff
c001be12:	6a 00                	push   0x0
c001be14:	6a 00                	push   0x0
c001be16:	53                   	push   ebx
c001be17:	68 ef 10 02 c0       	push   0xc00210ef
c001be1c:	50                   	push   eax
c001be1d:	e8 e4 0c ff ff       	call   c000cb06 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001be22:	83 c4 14             	add    esp,0x14
c001be25:	56                   	push   esi
c001be26:	e8 9b 0d ff ff       	call   c000cbc6 <LogicalDisk::assignDriveLetter()>
c001be2b:	5a                   	pop    edx
c001be2c:	0f be c0             	movsx  eax,al
c001be2f:	59                   	pop    ecx
c001be30:	50                   	push   eax
c001be31:	68 40 0f 02 c0       	push   0xc0020f40
c001be36:	e8 bf e7 fe ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001be3b:	58                   	pop    eax
c001be3c:	5a                   	pop    edx
c001be3d:	56                   	push   esi
c001be3e:	53                   	push   ebx
c001be3f:	e8 f4 fb fe ff       	call   c000ba38 <Device::addChild(Device*)>
c001be44:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001be4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be4d:	e8 1c 00 ff ff       	call   c000be6e <PhysicalDisk::startCache()>
c001be52:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001be59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be5c:	e8 6d fe ff ff       	call   c001bcce <ATAPI::detectMedia()>
c001be61:	83 c4 14             	add    esp,0x14
c001be64:	31 c0                	xor    eax,eax
c001be66:	5b                   	pop    ebx
c001be67:	5e                   	pop    esi
c001be68:	c3                   	ret    
c001be69:	90                   	nop

c001be6a <ATAPI::read(unsigned long long, int, void*)>:
c001be6a:	55                   	push   ebp
c001be6b:	57                   	push   edi
c001be6c:	56                   	push   esi
c001be6d:	53                   	push   ebx
c001be6e:	83 ec 1c             	sub    esp,0x1c
c001be71:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001be75:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001be79:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001be7d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001be84:	74 3c                	je     c001bec2 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001be86:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001be8a:	b9 03 00 00 00       	mov    ecx,0x3
c001be8f:	fc                   	cld    
c001be90:	31 c0                	xor    eax,eax
c001be92:	0f ce                	bswap  esi
c001be94:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001be96:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001be9b:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001be9f:	89 e8                	mov    eax,ebp
c001bea1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001bea5:	50                   	push   eax
c001bea6:	50                   	push   eax
c001bea7:	55                   	push   ebp
c001bea8:	c1 e5 0b             	shl    ebp,0xb
c001beab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001beaf:	6a 00                	push   0x0
c001beb1:	55                   	push   ebp
c001beb2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001beb6:	50                   	push   eax
c001beb7:	53                   	push   ebx
c001beb8:	e8 c3 fa ff ff       	call   c001b980 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001bebd:	83 c4 20             	add    esp,0x20
c001bec0:	eb 1a                	jmp    c001bedc <ATAPI::read(unsigned long long, int, void*)+0x72>
c001bec2:	83 ec 0c             	sub    esp,0xc
c001bec5:	53                   	push   ebx
c001bec6:	e8 03 fe ff ff       	call   c001bcce <ATAPI::detectMedia()>
c001becb:	83 c4 10             	add    esp,0x10
c001bece:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001bed5:	75 af                	jne    c001be86 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001bed7:	b8 02 00 00 00       	mov    eax,0x2
c001bedc:	83 c4 1c             	add    esp,0x1c
c001bedf:	5b                   	pop    ebx
c001bee0:	5e                   	pop    esi
c001bee1:	5f                   	pop    edi
c001bee2:	5d                   	pop    ebp
c001bee3:	c3                   	ret    

c001bee4 <SATA::close(int, int, void*)>:
c001bee4:	83 ec 0c             	sub    esp,0xc
c001bee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beeb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001bef1:	85 c0                	test   eax,eax
c001bef3:	74 0c                	je     c001bf01 <SATA::close(int, int, void*)+0x1d>
c001bef5:	83 ec 0c             	sub    esp,0xc
c001bef8:	8b 10                	mov    edx,DWORD PTR [eax]
c001befa:	50                   	push   eax
c001befb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001befe:	83 c4 10             	add    esp,0x10
c001bf01:	31 c0                	xor    eax,eax
c001bf03:	83 c4 0c             	add    esp,0xc
c001bf06:	c3                   	ret    
c001bf07:	90                   	nop

c001bf08 <SATA::powerSaving(PowerSavingLevel)>:
c001bf08:	c3                   	ret    
c001bf09:	90                   	nop

c001bf0a <SATA::open(int, int, void*)>:
c001bf0a:	56                   	push   esi
c001bf0b:	53                   	push   ebx
c001bf0c:	50                   	push   eax
c001bf0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bf15:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001bf1f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001bf25:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001bf2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bf33:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001bf3d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001bf43:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001bf4a:	e8 f2 bb fe ff       	call   c0007b41 <Phys::allocatePage()>
c001bf4f:	89 c6                	mov    esi,eax
c001bf51:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001bf57:	81 c6 00 10 00 00    	add    esi,0x1000
c001bf5d:	e8 df bb fe ff       	call   c0007b41 <Phys::allocatePage()>
c001bf62:	39 c6                	cmp    esi,eax
c001bf64:	74 10                	je     c001bf76 <SATA::open(int, int, void*)+0x6c>
c001bf66:	83 ec 0c             	sub    esp,0xc
c001bf69:	68 88 0f 02 c0       	push   0xc0020f88
c001bf6e:	e8 3c 44 ff ff       	call   c00103af <KePanic(char const*)>
c001bf73:	83 c4 10             	add    esp,0x10
c001bf76:	83 ec 0c             	sub    esp,0xc
c001bf79:	6a 02                	push   0x2
c001bf7b:	e8 bd d3 fe ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c001bf80:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001bf86:	6a 03                	push   0x3
c001bf88:	50                   	push   eax
c001bf89:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001bf8f:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001bf95:	e8 66 da fe ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c001bf9a:	83 c4 14             	add    esp,0x14
c001bf9d:	53                   	push   ebx
c001bf9e:	e8 cb fe fe ff       	call   c000be6e <PhysicalDisk::startCache()>
c001bfa3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfa6:	e8 2b 10 ff ff       	call   c000cfd6 <createPartitionsForDisk(PhysicalDisk*)>
c001bfab:	83 c4 14             	add    esp,0x14
c001bfae:	31 c0                	xor    eax,eax
c001bfb0:	5b                   	pop    ebx
c001bfb1:	5e                   	pop    esi
c001bfb2:	c3                   	ret    
c001bfb3:	90                   	nop

c001bfb4 <SATA::SATA()>:
c001bfb4:	83 ec 0c             	sub    esp,0xc
c001bfb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfbb:	83 ec 04             	sub    esp,0x4
c001bfbe:	68 00 02 00 00       	push   0x200
c001bfc3:	68 9c 0f 02 c0       	push   0xc0020f9c
c001bfc8:	50                   	push   eax
c001bfc9:	e8 38 fe fe ff       	call   c000be06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001bfce:	83 c4 10             	add    esp,0x10
c001bfd1:	ba 0c 10 02 c0       	mov    edx,0xc002100c
c001bfd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfda:	89 10                	mov    DWORD PTR [eax],edx
c001bfdc:	90                   	nop
c001bfdd:	83 c4 0c             	add    esp,0xc
c001bfe0:	c3                   	ret    
c001bfe1:	90                   	nop

c001bfe2 <SATA::access(unsigned long long, int, void*, bool)>:
c001bfe2:	55                   	push   ebp
c001bfe3:	57                   	push   edi
c001bfe4:	56                   	push   esi
c001bfe5:	53                   	push   ebx
c001bfe6:	83 ec 2c             	sub    esp,0x2c
c001bfe9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bfed:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001bff1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bff5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001bff9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bffd:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001c002:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c006:	7e 10                	jle    c001c018 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001c008:	83 ec 0c             	sub    esp,0xc
c001c00b:	68 ac 0f 02 c0       	push   0xc0020fac
c001c010:	e8 9a 43 ff ff       	call   c00103af <KePanic(char const*)>
c001c015:	83 c4 10             	add    esp,0x10
c001c018:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c01e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001c024:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c02a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c02e:	89 d0                	mov    eax,edx
c001c030:	c1 e0 07             	shl    eax,0x7
c001c033:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c037:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c041:	51                   	push   ecx
c001c042:	8d 42 02             	lea    eax,[edx+0x2]
c001c045:	51                   	push   ecx
c001c046:	c1 e0 07             	shl    eax,0x7
c001c049:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c04d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c051:	50                   	push   eax
c001c052:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001c058:	e8 b9 ec ff ff       	call   c001ad16 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c05d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c061:	83 c4 10             	add    esp,0x10
c001c064:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001c069:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c06d:	0f 84 4f 01 00 00    	je     c001c1c2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c073:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c077:	c1 e0 09             	shl    eax,0x9
c001c07a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c07f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c083:	74 0e                	je     c001c093 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001c085:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001c08b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001c08f:	89 c1                	mov    ecx,eax
c001c091:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c093:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c097:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c09d:	8d 42 02             	lea    eax,[edx+0x2]
c001c0a0:	c1 e0 07             	shl    eax,0x7
c001c0a3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c0a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0a9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001c0af:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001c0b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0b9:	c1 e1 05             	shl    ecx,0x5
c001c0bc:	01 c8                	add    eax,ecx
c001c0be:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001c0c2:	83 e1 01             	and    ecx,0x1
c001c0c5:	89 ce                	mov    esi,ecx
c001c0c7:	8a 08                	mov    cl,BYTE PTR [eax]
c001c0c9:	c1 e6 06             	shl    esi,0x6
c001c0cc:	83 e1 bf             	and    ecx,0xffffffbf
c001c0cf:	09 f1                	or     ecx,esi
c001c0d1:	88 08                	mov    BYTE PTR [eax],cl
c001c0d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c0d5:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001c0db:	81 c9 05 00 01 00    	or     ecx,0x10005
c001c0e1:	89 08                	mov    DWORD PTR [eax],ecx
c001c0e3:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001c0e9:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001c0ef:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001c0f5:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001c0f8:	50                   	push   eax
c001c0f9:	68 90 00 00 00       	push   0x90
c001c0fe:	6a 00                	push   0x0
c001c100:	56                   	push   esi
c001c101:	e8 ba 43 fe ff       	call   c00004c0 <memset>
c001c106:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c10c:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001c110:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001c116:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001c11a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c11e:	83 c4 10             	add    esp,0x10
c001c121:	48                   	dec    eax
c001c122:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c127:	89 c1                	mov    ecx,eax
c001c129:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001c12f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c134:	09 c8                	or     eax,ecx
c001c136:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001c13c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001c13f:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001c146:	66 25 00 7f          	and    ax,0x7f00
c001c14a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c14e:	66 0d 27 80          	or     ax,0x8027
c001c152:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001c157:	66 89 06             	mov    WORD PTR [esi],ax
c001c15a:	19 c0                	sbb    eax,eax
c001c15c:	83 e0 f0             	and    eax,0xfffffff0
c001c15f:	83 c0 35             	add    eax,0x35
c001c162:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001c165:	89 e8                	mov    eax,ebp
c001c167:	c1 e8 10             	shr    eax,0x10
c001c16a:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001c16d:	89 e8                	mov    eax,ebp
c001c16f:	c1 e8 18             	shr    eax,0x18
c001c172:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001c175:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c179:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001c17c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c180:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001c183:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001c187:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001c18b:	89 d6                	mov    esi,edx
c001c18d:	31 c0                	xor    eax,eax
c001c18f:	c1 e6 07             	shl    esi,0x7
c001c192:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c196:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001c19c:	80 e1 88             	and    cl,0x88
c001c19f:	74 0a                	je     c001c1ab <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001c1a1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c1a6:	74 0a                	je     c001c1b2 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001c1a8:	40                   	inc    eax
c001c1a9:	eb eb                	jmp    c001c196 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001c1ab:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c1b0:	75 17                	jne    c001c1c9 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001c1b2:	83 ec 0c             	sub    esp,0xc
c001c1b5:	68 e5 0f 02 c0       	push   0xc0020fe5
c001c1ba:	e8 3b e4 fe ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001c1bf:	83 c4 10             	add    esp,0x10
c001c1c2:	b8 01 00 00 00       	mov    eax,0x1
c001c1c7:	eb 5d                	jmp    c001c226 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c1c9:	b8 01 00 00 00       	mov    eax,0x1
c001c1ce:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c1d2:	c1 e2 07             	shl    edx,0x7
c001c1d5:	d3 e0                	shl    eax,cl
c001c1d7:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001c1db:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001c1e1:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001c1e7:	85 c8                	test   eax,ecx
c001c1e9:	74 16                	je     c001c201 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001c1eb:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001c1f1:	0f ba e1 1e          	bt     ecx,0x1e
c001c1f5:	73 ea                	jae    c001c1e1 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001c1f7:	83 ec 0c             	sub    esp,0xc
c001c1fa:	68 f3 0f 02 c0       	push   0xc0020ff3
c001c1ff:	eb b9                	jmp    c001c1ba <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001c201:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001c207:	0f ba e0 1e          	bt     eax,0x1e
c001c20b:	72 b5                	jb     c001c1c2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001c20d:	31 c0                	xor    eax,eax
c001c20f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001c214:	75 10                	jne    c001c226 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001c216:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001c21c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001c220:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c224:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c226:	83 c4 2c             	add    esp,0x2c
c001c229:	5b                   	pop    ebx
c001c22a:	5e                   	pop    esi
c001c22b:	5f                   	pop    edi
c001c22c:	5d                   	pop    ebp
c001c22d:	c3                   	ret    

c001c22e <SATA::read(unsigned long long, int, void*)>:
c001c22e:	55                   	push   ebp
c001c22f:	57                   	push   edi
c001c230:	56                   	push   esi
c001c231:	be 04 00 00 00       	mov    esi,0x4
c001c236:	53                   	push   ebx
c001c237:	83 ec 0c             	sub    esp,0xc
c001c23a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c23e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c242:	8d 7b ff             	lea    edi,[ebx-0x1]
c001c245:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c249:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c24d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001c253:	0f 87 1a 02 00 00    	ja     c001c473 <SATA::read(unsigned long long, int, void*)+0x245>
c001c259:	be 06 00 00 00       	mov    esi,0x6
c001c25e:	85 c9                	test   ecx,ecx
c001c260:	0f 84 0d 02 00 00    	je     c001c473 <SATA::read(unsigned long long, int, void*)+0x245>
c001c266:	56                   	push   esi
c001c267:	56                   	push   esi
c001c268:	6a 00                	push   0x0
c001c26a:	51                   	push   ecx
c001c26b:	53                   	push   ebx
c001c26c:	52                   	push   edx
c001c26d:	50                   	push   eax
c001c26e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c272:	e8 6b fd ff ff       	call   c001bfe2 <SATA::access(unsigned long long, int, void*, bool)>
c001c277:	83 c4 20             	add    esp,0x20
c001c27a:	89 c6                	mov    esi,eax
c001c27c:	85 c0                	test   eax,eax
c001c27e:	0f 85 ea 01 00 00    	jne    c001c46e <SATA::read(unsigned long long, int, void*)+0x240>
c001c284:	01 1d 54 7b 02 c0    	add    DWORD PTR ds:0xc0027b54,ebx
c001c28a:	bb 0a 00 00 00       	mov    ebx,0xa
c001c28f:	50                   	push   eax
c001c290:	50                   	push   eax
c001c291:	6a 0f                	push   0xf
c001c293:	6a 00                	push   0x0
c001c295:	e8 87 f2 ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c29a:	5a                   	pop    edx
c001c29b:	0f b6 c0             	movzx  eax,al
c001c29e:	59                   	pop    ecx
c001c29f:	b9 10 27 00 00       	mov    ecx,0x2710
c001c2a4:	50                   	push   eax
c001c2a5:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c2aa:	99                   	cdq    
c001c2ab:	f7 f9                	idiv   ecx
c001c2ad:	99                   	cdq    
c001c2ae:	f7 fb                	idiv   ebx
c001c2b0:	8d 42 30             	lea    eax,[edx+0x30]
c001c2b3:	0f b6 c0             	movzx  eax,al
c001c2b6:	50                   	push   eax
c001c2b7:	e8 54 f2 ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c2bc:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c2c2:	5f                   	pop    edi
c001c2c3:	5d                   	pop    ebp
c001c2c4:	bd e8 03 00 00       	mov    ebp,0x3e8
c001c2c9:	6a 0f                	push   0xf
c001c2cb:	6a 00                	push   0x0
c001c2cd:	e8 4f f2 ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c2d2:	5a                   	pop    edx
c001c2d3:	0f b6 c0             	movzx  eax,al
c001c2d6:	59                   	pop    ecx
c001c2d7:	50                   	push   eax
c001c2d8:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c2dd:	99                   	cdq    
c001c2de:	f7 fd                	idiv   ebp
c001c2e0:	99                   	cdq    
c001c2e1:	f7 fb                	idiv   ebx
c001c2e3:	8d 42 30             	lea    eax,[edx+0x30]
c001c2e6:	0f b6 c0             	movzx  eax,al
c001c2e9:	50                   	push   eax
c001c2ea:	e8 21 f2 ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c2ef:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c2f5:	5f                   	pop    edi
c001c2f6:	bf 64 00 00 00       	mov    edi,0x64
c001c2fb:	58                   	pop    eax
c001c2fc:	6a 0f                	push   0xf
c001c2fe:	6a 00                	push   0x0
c001c300:	e8 1c f2 ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c305:	5a                   	pop    edx
c001c306:	0f b6 c0             	movzx  eax,al
c001c309:	59                   	pop    ecx
c001c30a:	50                   	push   eax
c001c30b:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c310:	99                   	cdq    
c001c311:	f7 ff                	idiv   edi
c001c313:	99                   	cdq    
c001c314:	f7 fb                	idiv   ebx
c001c316:	8d 42 30             	lea    eax,[edx+0x30]
c001c319:	0f b6 c0             	movzx  eax,al
c001c31c:	50                   	push   eax
c001c31d:	e8 ee f1 ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c322:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c328:	58                   	pop    eax
c001c329:	5a                   	pop    edx
c001c32a:	6a 0f                	push   0xf
c001c32c:	6a 00                	push   0x0
c001c32e:	e8 ee f1 ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c333:	59                   	pop    ecx
c001c334:	0f b6 c0             	movzx  eax,al
c001c337:	5a                   	pop    edx
c001c338:	50                   	push   eax
c001c339:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c33e:	99                   	cdq    
c001c33f:	f7 fb                	idiv   ebx
c001c341:	99                   	cdq    
c001c342:	f7 fb                	idiv   ebx
c001c344:	8d 42 30             	lea    eax,[edx+0x30]
c001c347:	0f b6 c0             	movzx  eax,al
c001c34a:	50                   	push   eax
c001c34b:	e8 c0 f1 ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c350:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c356:	59                   	pop    ecx
c001c357:	58                   	pop    eax
c001c358:	6a 0f                	push   0xf
c001c35a:	6a 00                	push   0x0
c001c35c:	e8 c0 f1 ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c361:	5a                   	pop    edx
c001c362:	0f b6 c0             	movzx  eax,al
c001c365:	59                   	pop    ecx
c001c366:	50                   	push   eax
c001c367:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c36c:	99                   	cdq    
c001c36d:	f7 fb                	idiv   ebx
c001c36f:	8d 42 30             	lea    eax,[edx+0x30]
c001c372:	0f b6 c0             	movzx  eax,al
c001c375:	50                   	push   eax
c001c376:	e8 95 f1 ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c37b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c381:	58                   	pop    eax
c001c382:	5a                   	pop    edx
c001c383:	6a 0f                	push   0xf
c001c385:	6a 00                	push   0x0
c001c387:	e8 95 f1 ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c38c:	59                   	pop    ecx
c001c38d:	0f b6 c0             	movzx  eax,al
c001c390:	5a                   	pop    edx
c001c391:	b9 10 27 00 00       	mov    ecx,0x2710
c001c396:	50                   	push   eax
c001c397:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c39c:	99                   	cdq    
c001c39d:	f7 f9                	idiv   ecx
c001c39f:	99                   	cdq    
c001c3a0:	f7 fb                	idiv   ebx
c001c3a2:	8d 42 30             	lea    eax,[edx+0x30]
c001c3a5:	0f b6 c0             	movzx  eax,al
c001c3a8:	50                   	push   eax
c001c3a9:	e8 62 f1 ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c3ae:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c3b4:	59                   	pop    ecx
c001c3b5:	58                   	pop    eax
c001c3b6:	6a 0f                	push   0xf
c001c3b8:	6a 00                	push   0x0
c001c3ba:	e8 62 f1 ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c3bf:	5a                   	pop    edx
c001c3c0:	0f b6 c0             	movzx  eax,al
c001c3c3:	59                   	pop    ecx
c001c3c4:	50                   	push   eax
c001c3c5:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c3ca:	99                   	cdq    
c001c3cb:	f7 fd                	idiv   ebp
c001c3cd:	99                   	cdq    
c001c3ce:	f7 fb                	idiv   ebx
c001c3d0:	8d 42 30             	lea    eax,[edx+0x30]
c001c3d3:	0f b6 c0             	movzx  eax,al
c001c3d6:	50                   	push   eax
c001c3d7:	e8 34 f1 ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c3dc:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c3e2:	5d                   	pop    ebp
c001c3e3:	58                   	pop    eax
c001c3e4:	6a 0f                	push   0xf
c001c3e6:	6a 00                	push   0x0
c001c3e8:	e8 34 f1 ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c3ed:	5a                   	pop    edx
c001c3ee:	0f b6 c0             	movzx  eax,al
c001c3f1:	59                   	pop    ecx
c001c3f2:	50                   	push   eax
c001c3f3:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c3f8:	99                   	cdq    
c001c3f9:	f7 ff                	idiv   edi
c001c3fb:	99                   	cdq    
c001c3fc:	f7 fb                	idiv   ebx
c001c3fe:	8d 42 30             	lea    eax,[edx+0x30]
c001c401:	0f b6 c0             	movzx  eax,al
c001c404:	50                   	push   eax
c001c405:	e8 06 f1 ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c40a:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c410:	5f                   	pop    edi
c001c411:	5d                   	pop    ebp
c001c412:	6a 0f                	push   0xf
c001c414:	6a 00                	push   0x0
c001c416:	e8 06 f1 ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c41b:	5a                   	pop    edx
c001c41c:	0f b6 c0             	movzx  eax,al
c001c41f:	59                   	pop    ecx
c001c420:	50                   	push   eax
c001c421:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c426:	99                   	cdq    
c001c427:	f7 fb                	idiv   ebx
c001c429:	99                   	cdq    
c001c42a:	f7 fb                	idiv   ebx
c001c42c:	8d 42 30             	lea    eax,[edx+0x30]
c001c42f:	0f b6 c0             	movzx  eax,al
c001c432:	50                   	push   eax
c001c433:	e8 d8 f0 ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c438:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c43e:	5f                   	pop    edi
c001c43f:	5d                   	pop    ebp
c001c440:	6a 0f                	push   0xf
c001c442:	6a 00                	push   0x0
c001c444:	e8 d8 f0 ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c449:	5a                   	pop    edx
c001c44a:	0f b6 c0             	movzx  eax,al
c001c44d:	59                   	pop    ecx
c001c44e:	50                   	push   eax
c001c44f:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c454:	99                   	cdq    
c001c455:	f7 fb                	idiv   ebx
c001c457:	83 c2 30             	add    edx,0x30
c001c45a:	0f b6 d2             	movzx  edx,dl
c001c45d:	52                   	push   edx
c001c45e:	e8 ad f0 ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c463:	83 c4 10             	add    esp,0x10
c001c466:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c46c:	eb 05                	jmp    c001c473 <SATA::read(unsigned long long, int, void*)+0x245>
c001c46e:	be 01 00 00 00       	mov    esi,0x1
c001c473:	83 c4 0c             	add    esp,0xc
c001c476:	89 f0                	mov    eax,esi
c001c478:	5b                   	pop    ebx
c001c479:	5e                   	pop    esi
c001c47a:	5f                   	pop    edi
c001c47b:	5d                   	pop    ebp
c001c47c:	c3                   	ret    
c001c47d:	90                   	nop

c001c47e <SATA::write(unsigned long long, int, void*)>:
c001c47e:	55                   	push   ebp
c001c47f:	b8 04 00 00 00       	mov    eax,0x4
c001c484:	57                   	push   edi
c001c485:	56                   	push   esi
c001c486:	53                   	push   ebx
c001c487:	83 ec 1c             	sub    esp,0x1c
c001c48a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001c48e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c492:	8d 75 ff             	lea    esi,[ebp-0x1]
c001c495:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c499:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001c49d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001c4a3:	0f 87 32 02 00 00    	ja     c001c6db <SATA::write(unsigned long long, int, void*)+0x25d>
c001c4a9:	b8 06 00 00 00       	mov    eax,0x6
c001c4ae:	85 ff                	test   edi,edi
c001c4b0:	0f 84 25 02 00 00    	je     c001c6db <SATA::write(unsigned long long, int, void*)+0x25d>
c001c4b6:	89 ee                	mov    esi,ebp
c001c4b8:	c1 e6 09             	shl    esi,0x9
c001c4bb:	01 fe                	add    esi,edi
c001c4bd:	89 c8                	mov    eax,ecx
c001c4bf:	89 da                	mov    edx,ebx
c001c4c1:	83 c0 01             	add    eax,0x1
c001c4c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4c8:	83 d2 00             	adc    edx,0x0
c001c4cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c4cf:	50                   	push   eax
c001c4d0:	50                   	push   eax
c001c4d1:	6a 01                	push   0x1
c001c4d3:	57                   	push   edi
c001c4d4:	81 c7 00 02 00 00    	add    edi,0x200
c001c4da:	6a 01                	push   0x1
c001c4dc:	53                   	push   ebx
c001c4dd:	51                   	push   ecx
c001c4de:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c4e2:	e8 fb fa ff ff       	call   c001bfe2 <SATA::access(unsigned long long, int, void*, bool)>
c001c4e7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001c4eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c4ef:	83 c4 20             	add    esp,0x20
c001c4f2:	39 f7                	cmp    edi,esi
c001c4f4:	75 c7                	jne    c001c4bd <SATA::write(unsigned long long, int, void*)+0x3f>
c001c4f6:	bb 0a 00 00 00       	mov    ebx,0xa
c001c4fb:	01 2d 50 7b 02 c0    	add    DWORD PTR ds:0xc0027b50,ebp
c001c501:	bd 10 27 00 00       	mov    ebp,0x2710
c001c506:	50                   	push   eax
c001c507:	50                   	push   eax
c001c508:	6a 0f                	push   0xf
c001c50a:	6a 00                	push   0x0
c001c50c:	e8 10 f0 ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c511:	5a                   	pop    edx
c001c512:	0f b6 c0             	movzx  eax,al
c001c515:	59                   	pop    ecx
c001c516:	50                   	push   eax
c001c517:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c51c:	99                   	cdq    
c001c51d:	f7 fd                	idiv   ebp
c001c51f:	99                   	cdq    
c001c520:	f7 fb                	idiv   ebx
c001c522:	8d 42 30             	lea    eax,[edx+0x30]
c001c525:	0f b6 c0             	movzx  eax,al
c001c528:	50                   	push   eax
c001c529:	e8 e2 ef ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c52e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001c534:	5e                   	pop    esi
c001c535:	5f                   	pop    edi
c001c536:	bf e8 03 00 00       	mov    edi,0x3e8
c001c53b:	6a 0f                	push   0xf
c001c53d:	6a 00                	push   0x0
c001c53f:	e8 dd ef ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c544:	5a                   	pop    edx
c001c545:	0f b6 c0             	movzx  eax,al
c001c548:	59                   	pop    ecx
c001c549:	50                   	push   eax
c001c54a:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c54f:	99                   	cdq    
c001c550:	f7 ff                	idiv   edi
c001c552:	99                   	cdq    
c001c553:	f7 fb                	idiv   ebx
c001c555:	8d 42 30             	lea    eax,[edx+0x30]
c001c558:	0f b6 c0             	movzx  eax,al
c001c55b:	50                   	push   eax
c001c55c:	e8 af ef ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c561:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001c567:	5e                   	pop    esi
c001c568:	be 64 00 00 00       	mov    esi,0x64
c001c56d:	58                   	pop    eax
c001c56e:	6a 0f                	push   0xf
c001c570:	6a 00                	push   0x0
c001c572:	e8 aa ef ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c577:	5a                   	pop    edx
c001c578:	0f b6 c0             	movzx  eax,al
c001c57b:	59                   	pop    ecx
c001c57c:	50                   	push   eax
c001c57d:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c582:	99                   	cdq    
c001c583:	f7 fe                	idiv   esi
c001c585:	99                   	cdq    
c001c586:	f7 fb                	idiv   ebx
c001c588:	8d 42 30             	lea    eax,[edx+0x30]
c001c58b:	0f b6 c0             	movzx  eax,al
c001c58e:	50                   	push   eax
c001c58f:	e8 7c ef ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c594:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001c59a:	58                   	pop    eax
c001c59b:	5a                   	pop    edx
c001c59c:	6a 0f                	push   0xf
c001c59e:	6a 00                	push   0x0
c001c5a0:	e8 7c ef ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c5a5:	59                   	pop    ecx
c001c5a6:	0f b6 c0             	movzx  eax,al
c001c5a9:	5a                   	pop    edx
c001c5aa:	50                   	push   eax
c001c5ab:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c5b0:	99                   	cdq    
c001c5b1:	f7 fb                	idiv   ebx
c001c5b3:	99                   	cdq    
c001c5b4:	f7 fb                	idiv   ebx
c001c5b6:	8d 42 30             	lea    eax,[edx+0x30]
c001c5b9:	0f b6 c0             	movzx  eax,al
c001c5bc:	50                   	push   eax
c001c5bd:	e8 4e ef ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c5c2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001c5c8:	59                   	pop    ecx
c001c5c9:	58                   	pop    eax
c001c5ca:	6a 0f                	push   0xf
c001c5cc:	6a 00                	push   0x0
c001c5ce:	e8 4e ef ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c5d3:	5a                   	pop    edx
c001c5d4:	0f b6 c0             	movzx  eax,al
c001c5d7:	59                   	pop    ecx
c001c5d8:	50                   	push   eax
c001c5d9:	a1 54 7b 02 c0       	mov    eax,ds:0xc0027b54
c001c5de:	99                   	cdq    
c001c5df:	f7 fb                	idiv   ebx
c001c5e1:	83 c2 30             	add    edx,0x30
c001c5e4:	0f b6 d2             	movzx  edx,dl
c001c5e7:	52                   	push   edx
c001c5e8:	e8 23 ef ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c5ed:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001c5f3:	58                   	pop    eax
c001c5f4:	5a                   	pop    edx
c001c5f5:	6a 0f                	push   0xf
c001c5f7:	6a 00                	push   0x0
c001c5f9:	e8 23 ef ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c5fe:	59                   	pop    ecx
c001c5ff:	0f b6 c0             	movzx  eax,al
c001c602:	5a                   	pop    edx
c001c603:	50                   	push   eax
c001c604:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c609:	99                   	cdq    
c001c60a:	f7 fd                	idiv   ebp
c001c60c:	99                   	cdq    
c001c60d:	f7 fb                	idiv   ebx
c001c60f:	8d 42 30             	lea    eax,[edx+0x30]
c001c612:	0f b6 c0             	movzx  eax,al
c001c615:	50                   	push   eax
c001c616:	e8 f5 ee ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c61b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001c621:	59                   	pop    ecx
c001c622:	5d                   	pop    ebp
c001c623:	6a 0f                	push   0xf
c001c625:	6a 00                	push   0x0
c001c627:	e8 f5 ee ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c62c:	5a                   	pop    edx
c001c62d:	0f b6 c0             	movzx  eax,al
c001c630:	59                   	pop    ecx
c001c631:	50                   	push   eax
c001c632:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c637:	99                   	cdq    
c001c638:	f7 ff                	idiv   edi
c001c63a:	99                   	cdq    
c001c63b:	f7 fb                	idiv   ebx
c001c63d:	8d 42 30             	lea    eax,[edx+0x30]
c001c640:	0f b6 c0             	movzx  eax,al
c001c643:	50                   	push   eax
c001c644:	e8 c7 ee ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c649:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001c64f:	5f                   	pop    edi
c001c650:	5d                   	pop    ebp
c001c651:	6a 0f                	push   0xf
c001c653:	6a 00                	push   0x0
c001c655:	e8 c7 ee ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c65a:	5a                   	pop    edx
c001c65b:	0f b6 c0             	movzx  eax,al
c001c65e:	59                   	pop    ecx
c001c65f:	50                   	push   eax
c001c660:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c665:	99                   	cdq    
c001c666:	f7 fe                	idiv   esi
c001c668:	99                   	cdq    
c001c669:	f7 fb                	idiv   ebx
c001c66b:	8d 42 30             	lea    eax,[edx+0x30]
c001c66e:	0f b6 c0             	movzx  eax,al
c001c671:	50                   	push   eax
c001c672:	e8 99 ee ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c677:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001c67d:	5e                   	pop    esi
c001c67e:	5f                   	pop    edi
c001c67f:	6a 0f                	push   0xf
c001c681:	6a 00                	push   0x0
c001c683:	e8 99 ee ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c688:	5d                   	pop    ebp
c001c689:	0f b6 c0             	movzx  eax,al
c001c68c:	5a                   	pop    edx
c001c68d:	50                   	push   eax
c001c68e:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c693:	99                   	cdq    
c001c694:	f7 fb                	idiv   ebx
c001c696:	99                   	cdq    
c001c697:	f7 fb                	idiv   ebx
c001c699:	8d 42 30             	lea    eax,[edx+0x30]
c001c69c:	0f b6 c0             	movzx  eax,al
c001c69f:	50                   	push   eax
c001c6a0:	e8 6b ee ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c6a5:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001c6ab:	59                   	pop    ecx
c001c6ac:	5e                   	pop    esi
c001c6ad:	6a 0f                	push   0xf
c001c6af:	6a 00                	push   0x0
c001c6b1:	e8 6b ee ff ff       	call   c001b521 <combineColours(unsigned char, unsigned char)>
c001c6b6:	5f                   	pop    edi
c001c6b7:	0f b6 c0             	movzx  eax,al
c001c6ba:	5d                   	pop    ebp
c001c6bb:	50                   	push   eax
c001c6bc:	a1 50 7b 02 c0       	mov    eax,ds:0xc0027b50
c001c6c1:	99                   	cdq    
c001c6c2:	f7 fb                	idiv   ebx
c001c6c4:	83 c2 30             	add    edx,0x30
c001c6c7:	0f b6 d2             	movzx  edx,dl
c001c6ca:	52                   	push   edx
c001c6cb:	e8 40 ee ff ff       	call   c001b510 <combineCharAndColour(char, unsigned char)>
c001c6d0:	83 c4 10             	add    esp,0x10
c001c6d3:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001c6d9:	31 c0                	xor    eax,eax
c001c6db:	83 c4 1c             	add    esp,0x1c
c001c6de:	5b                   	pop    ebx
c001c6df:	5e                   	pop    esi
c001c6e0:	5f                   	pop    edi
c001c6e1:	5d                   	pop    ebp
c001c6e2:	c3                   	ret    
c001c6e3:	90                   	nop

c001c6e4 <SATAPI::write(unsigned long long, int, void*)>:
c001c6e4:	b8 03 00 00 00       	mov    eax,0x3
c001c6e9:	c3                   	ret    

c001c6ea <SATAPI::close(int, int, void*)>:
c001c6ea:	83 ec 0c             	sub    esp,0xc
c001c6ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c6f7:	85 c0                	test   eax,eax
c001c6f9:	74 0c                	je     c001c707 <SATAPI::close(int, int, void*)+0x1d>
c001c6fb:	83 ec 0c             	sub    esp,0xc
c001c6fe:	8b 10                	mov    edx,DWORD PTR [eax]
c001c700:	50                   	push   eax
c001c701:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c704:	83 c4 10             	add    esp,0x10
c001c707:	31 c0                	xor    eax,eax
c001c709:	83 c4 0c             	add    esp,0xc
c001c70c:	c3                   	ret    
c001c70d:	90                   	nop

c001c70e <SATAPI::SATAPI()>:
c001c70e:	83 ec 0c             	sub    esp,0xc
c001c711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c715:	83 ec 04             	sub    esp,0x4
c001c718:	68 00 08 00 00       	push   0x800
c001c71d:	68 3c 10 02 c0       	push   0xc002103c
c001c722:	50                   	push   eax
c001c723:	e8 de f6 fe ff       	call   c000be06 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c728:	83 c4 10             	add    esp,0x10
c001c72b:	ba 30 11 02 c0       	mov    edx,0xc0021130
c001c730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c734:	89 10                	mov    DWORD PTR [eax],edx
c001c736:	90                   	nop
c001c737:	83 c4 0c             	add    esp,0xc
c001c73a:	c3                   	ret    
c001c73b:	90                   	nop

c001c73c <SATAPI::diskRemoved()>:
c001c73c:	c3                   	ret    
c001c73d:	90                   	nop

c001c73e <SATAPI::diskInserted()>:
c001c73e:	83 ec 18             	sub    esp,0x18
c001c741:	68 48 10 02 c0       	push   0xc0021048
c001c746:	e8 af de fe ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001c74b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c74f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001c756:	83 c4 1c             	add    esp,0x1c
c001c759:	c3                   	ret    

c001c75a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001c75a:	55                   	push   ebp
c001c75b:	57                   	push   edi
c001c75c:	56                   	push   esi
c001c75d:	53                   	push   ebx
c001c75e:	83 ec 34             	sub    esp,0x34
c001c761:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001c765:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001c769:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001c76d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c771:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001c775:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001c77b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c781:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c785:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001c78b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c78f:	83 c0 02             	add    eax,0x2
c001c792:	c1 e0 07             	shl    eax,0x7
c001c795:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c799:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c79d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c7a1:	c1 e0 07             	shl    eax,0x7
c001c7a4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001c7a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c7ac:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001c7b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c7ba:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001c7c0:	e8 51 e5 ff ff       	call   c001ad16 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001c7c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c7c9:	83 c4 10             	add    esp,0x10
c001c7cc:	b8 01 00 00 00       	mov    eax,0x1
c001c7d1:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001c7d6:	0f 84 49 02 00 00    	je     c001ca25 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001c7dc:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001c7e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7e8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001c7ee:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001c7f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c7f8:	c1 e1 05             	shl    ecx,0x5
c001c7fb:	01 c8                	add    eax,ecx
c001c7fd:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c7ff:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001c805:	81 c9 25 00 01 00    	or     ecx,0x10025
c001c80b:	89 08                	mov    DWORD PTR [eax],ecx
c001c80d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001c813:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001c819:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001c81f:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001c822:	8d 7b 40             	lea    edi,[ebx+0x40]
c001c825:	50                   	push   eax
c001c826:	68 90 00 00 00       	push   0x90
c001c82b:	6a 00                	push   0x0
c001c82d:	53                   	push   ebx
c001c82e:	e8 8d 3c fe ff       	call   c00004c0 <memset>
c001c833:	b9 0c 00 00 00       	mov    ecx,0xc
c001c838:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001c83c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c83e:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001c844:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001c848:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001c84e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001c852:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001c856:	48                   	dec    eax
c001c857:	25 ff ff 3f 00       	and    eax,0x3fffff
c001c85c:	89 c1                	mov    ecx,eax
c001c85e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001c864:	25 00 00 c0 ff       	and    eax,0xffc00000
c001c869:	09 c8                	or     eax,ecx
c001c86b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001c871:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001c874:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001c87b:	66 25 00 7f          	and    ax,0x7f00
c001c87f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c883:	66 0d 27 80          	or     ax,0x8027
c001c887:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001c88b:	66 89 03             	mov    WORD PTR [ebx],ax
c001c88e:	89 d0                	mov    eax,edx
c001c890:	c1 ea 18             	shr    edx,0x18
c001c893:	c1 e8 10             	shr    eax,0x10
c001c896:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001c899:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001c89c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001c8a0:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001c8a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c8a7:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001c8aa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001c8ae:	83 c4 10             	add    esp,0x10
c001c8b1:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001c8b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8b9:	31 c0                	xor    eax,eax
c001c8bb:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001c8c1:	80 e1 88             	and    cl,0x88
c001c8c4:	74 0a                	je     c001c8d0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x176>
c001c8c6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c8cb:	74 0a                	je     c001c8d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17d>
c001c8cd:	40                   	inc    eax
c001c8ce:	eb eb                	jmp    c001c8bb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x161>
c001c8d0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001c8d5:	75 43                	jne    c001c91a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001c8d7:	83 ec 0c             	sub    esp,0xc
c001c8da:	68 60 10 02 c0       	push   0xc0021060
c001c8df:	e8 16 dd fe ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001c8e4:	58                   	pop    eax
c001c8e5:	5a                   	pop    edx
c001c8e6:	68 75 10 02 c0       	push   0xc0021075
c001c8eb:	ff 35 04 3f 02 c0    	push   DWORD PTR ds:0xc0023f04
c001c8f1:	e8 e6 be fe ff       	call   c00087dc <VgaText::puts(char const*)>
c001c8f6:	59                   	pop    ecx
c001c8f7:	5b                   	pop    ebx
c001c8f8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c8fc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001c902:	e8 a9 e4 ff ff       	call   c001adb0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c907:	5e                   	pop    esi
c001c908:	5f                   	pop    edi
c001c909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c90d:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001c913:	e8 78 e4 ff ff       	call   c001ad90 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c918:	eb 48                	jmp    c001c962 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x208>
c001c91a:	be 01 00 00 00       	mov    esi,0x1
c001c91f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001c923:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c927:	d3 e6                	shl    esi,cl
c001c929:	c1 e7 07             	shl    edi,0x7
c001c92c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001c932:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001c937:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001c93b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001c941:	85 c6                	test   esi,eax
c001c943:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001c949:	0f 84 a3 00 00 00    	je     c001c9f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x298>
c001c94f:	0f ba e0 1e          	bt     eax,0x1e
c001c953:	73 1a                	jae    c001c96f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x215>
c001c955:	83 ec 0c             	sub    esp,0xc
c001c958:	68 87 10 02 c0       	push   0xc0021087
c001c95d:	e8 98 dc fe ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001c962:	83 c4 10             	add    esp,0x10
c001c965:	b8 01 00 00 00       	mov    eax,0x1
c001c96a:	e9 b6 00 00 00       	jmp    c001ca25 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2cb>
c001c96f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001c975:	83 f8 0d             	cmp    eax,0xd
c001c978:	77 0a                	ja     c001c984 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x22a>
c001c97a:	83 ec 0c             	sub    esp,0xc
c001c97d:	68 c8 00 00 00       	push   0xc8
c001c982:	eb 28                	jmp    c001c9ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001c984:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001c98a:	83 f8 0d             	cmp    eax,0xd
c001c98d:	77 0a                	ja     c001c999 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23f>
c001c98f:	83 ec 0c             	sub    esp,0xc
c001c992:	68 58 02 00 00       	push   0x258
c001c997:	eb 13                	jmp    c001c9ac <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x252>
c001c999:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001c99f:	83 f8 06             	cmp    eax,0x6
c001c9a2:	77 10                	ja     c001c9b4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25a>
c001c9a4:	83 ec 0c             	sub    esp,0xc
c001c9a7:	68 dc 05 00 00       	push   0x5dc
c001c9ac:	e8 fb 80 ff ff       	call   c0014aac <milliTenthSleep(unsigned int)>
c001c9b1:	83 c4 10             	add    esp,0x10
c001c9b4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001c9b8:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001c9bb:	75 06                	jne    c001c9c3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x269>
c001c9bd:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001c9c1:	74 15                	je     c001c9d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001c9c3:	83 fb 06             	cmp    ebx,0x6
c001c9c6:	77 10                	ja     c001c9d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x27e>
c001c9c8:	83 ec 0c             	sub    esp,0xc
c001c9cb:	68 c4 09 00 00       	push   0x9c4
c001c9d0:	e8 d7 80 ff ff       	call   c0014aac <milliTenthSleep(unsigned int)>
c001c9d5:	83 c4 10             	add    esp,0x10
c001c9d8:	43                   	inc    ebx
c001c9d9:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001c9df:	0f 85 56 ff ff ff    	jne    c001c93b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e1>
c001c9e5:	83 ec 0c             	sub    esp,0xc
c001c9e8:	68 9a 10 02 c0       	push   0xc002109a
c001c9ed:	e9 6b ff ff ff       	jmp    c001c95d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001c9f2:	0f ba e0 1e          	bt     eax,0x1e
c001c9f6:	73 0d                	jae    c001ca05 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2ab>
c001c9f8:	83 ec 0c             	sub    esp,0xc
c001c9fb:	68 ae 10 02 c0       	push   0xc00210ae
c001ca00:	e9 58 ff ff ff       	jmp    c001c95d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x203>
c001ca05:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ca0a:	74 17                	je     c001ca23 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001ca0c:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ca11:	74 10                	je     c001ca23 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2c9>
c001ca13:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ca19:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ca1d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ca21:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ca23:	31 c0                	xor    eax,eax
c001ca25:	83 c4 2c             	add    esp,0x2c
c001ca28:	5b                   	pop    ebx
c001ca29:	5e                   	pop    esi
c001ca2a:	5f                   	pop    edi
c001ca2b:	5d                   	pop    ebp
c001ca2c:	c3                   	ret    
c001ca2d:	90                   	nop

c001ca2e <SATAPI::eject()>:
c001ca2e:	57                   	push   edi
c001ca2f:	b9 03 00 00 00       	mov    ecx,0x3
c001ca34:	83 ec 18             	sub    esp,0x18
c001ca37:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ca3b:	fc                   	cld    
c001ca3c:	31 c0                	xor    eax,eax
c001ca3e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ca40:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ca45:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ca4a:	50                   	push   eax
c001ca4b:	6a 00                	push   0x0
c001ca4d:	6a 00                	push   0x0
c001ca4f:	6a 00                	push   0x0
c001ca51:	6a 00                	push   0x0
c001ca53:	6a 02                	push   0x2
c001ca55:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca59:	50                   	push   eax
c001ca5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ca5e:	e8 f7 fc ff ff       	call   c001c75a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ca63:	31 c0                	xor    eax,eax
c001ca65:	83 c4 38             	add    esp,0x38
c001ca68:	5f                   	pop    edi
c001ca69:	c3                   	ret    

c001ca6a <SATAPI::detectMedia()>:
c001ca6a:	53                   	push   ebx
c001ca6b:	83 ec 14             	sub    esp,0x14
c001ca6e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ca72:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ca78:	e8 27 0c ff ff       	call   c000d6a4 <VCache::writeWriteBuffer()>
c001ca7d:	59                   	pop    ecx
c001ca7e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ca84:	e8 0b 0c ff ff       	call   c000d694 <VCache::invalidateReadBuffer()>
c001ca89:	c7 04 24 c3 10 02 c0 	mov    DWORD PTR [esp],0xc00210c3
c001ca90:	e8 65 db fe ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001ca95:	83 c4 10             	add    esp,0x10
c001ca98:	31 c0                	xor    eax,eax
c001ca9a:	8b 14 85 20 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9be0]
c001caa1:	85 d2                	test   edx,edx
c001caa3:	74 0f                	je     c001cab4 <SATAPI::detectMedia()+0x4a>
c001caa5:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001caab:	75 07                	jne    c001cab4 <SATAPI::detectMedia()+0x4a>
c001caad:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001cab4:	40                   	inc    eax
c001cab5:	83 f8 1a             	cmp    eax,0x1a
c001cab8:	75 e0                	jne    c001ca9a <SATAPI::detectMedia()+0x30>
c001caba:	83 c4 08             	add    esp,0x8
c001cabd:	5b                   	pop    ebx
c001cabe:	c3                   	ret    
c001cabf:	90                   	nop

c001cac0 <SATAPI::open(int, int, void*)>:
c001cac0:	56                   	push   esi
c001cac1:	53                   	push   ebx
c001cac2:	51                   	push   ecx
c001cac3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cac7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cacb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001cad5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001cadb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cae5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cae9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001caf3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001caf9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001cb00:	e8 3c b0 fe ff       	call   c0007b41 <Phys::allocatePage()>
c001cb05:	89 c6                	mov    esi,eax
c001cb07:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001cb0d:	81 c6 00 10 00 00    	add    esi,0x1000
c001cb13:	e8 29 b0 fe ff       	call   c0007b41 <Phys::allocatePage()>
c001cb18:	39 c6                	cmp    esi,eax
c001cb1a:	74 10                	je     c001cb2c <SATAPI::open(int, int, void*)+0x6c>
c001cb1c:	83 ec 0c             	sub    esp,0xc
c001cb1f:	68 d8 10 02 c0       	push   0xc00210d8
c001cb24:	e8 86 38 ff ff       	call   c00103af <KePanic(char const*)>
c001cb29:	83 c4 10             	add    esp,0x10
c001cb2c:	83 ec 0c             	sub    esp,0xc
c001cb2f:	6a 02                	push   0x2
c001cb31:	e8 07 c8 fe ff       	call   c000933d <Virt::allocateKernelVirtualPages(int)>
c001cb36:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001cb3c:	6a 03                	push   0x3
c001cb3e:	50                   	push   eax
c001cb3f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001cb45:	ff 35 b0 3f 02 c0    	push   DWORD PTR ds:0xc0023fb0
c001cb4b:	e8 b0 ce fe ff       	call   c0009a00 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cb50:	83 c4 14             	add    esp,0x14
c001cb53:	68 78 01 00 00       	push   0x178
c001cb58:	e8 08 ad fe ff       	call   c0007865 <malloc>
c001cb5d:	83 c4 0c             	add    esp,0xc
c001cb60:	89 c6                	mov    esi,eax
c001cb62:	6a 00                	push   0x0
c001cb64:	68 ff ff ff 7f       	push   0x7fffffff
c001cb69:	6a 00                	push   0x0
c001cb6b:	6a 00                	push   0x0
c001cb6d:	53                   	push   ebx
c001cb6e:	68 ee 10 02 c0       	push   0xc00210ee
c001cb73:	50                   	push   eax
c001cb74:	e8 8d ff fe ff       	call   c000cb06 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001cb79:	83 c4 14             	add    esp,0x14
c001cb7c:	56                   	push   esi
c001cb7d:	e8 44 00 ff ff       	call   c000cbc6 <LogicalDisk::assignDriveLetter()>
c001cb82:	5a                   	pop    edx
c001cb83:	0f be c0             	movsx  eax,al
c001cb86:	59                   	pop    ecx
c001cb87:	50                   	push   eax
c001cb88:	68 40 0f 02 c0       	push   0xc0020f40
c001cb8d:	e8 68 da fe ff       	call   c000a5fa <Dbg::kprintf(char const*, ...)>
c001cb92:	58                   	pop    eax
c001cb93:	5a                   	pop    edx
c001cb94:	56                   	push   esi
c001cb95:	53                   	push   ebx
c001cb96:	e8 9d ee fe ff       	call   c000ba38 <Device::addChild(Device*)>
c001cb9b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001cba1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cba4:	e8 c5 f2 fe ff       	call   c000be6e <PhysicalDisk::startCache()>
c001cba9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001cbb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbb3:	e8 b2 fe ff ff       	call   c001ca6a <SATAPI::detectMedia()>
c001cbb8:	83 c4 14             	add    esp,0x14
c001cbbb:	31 c0                	xor    eax,eax
c001cbbd:	5b                   	pop    ebx
c001cbbe:	5e                   	pop    esi
c001cbbf:	c3                   	ret    

c001cbc0 <SATAPI::read(unsigned long long, int, void*)>:
c001cbc0:	57                   	push   edi
c001cbc1:	56                   	push   esi
c001cbc2:	53                   	push   ebx
c001cbc3:	83 ec 30             	sub    esp,0x30
c001cbc6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001cbca:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001cbce:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001cbd2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cbd6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cbda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cbde:	83 fe 04             	cmp    esi,0x4
c001cbe1:	7e 10                	jle    c001cbf3 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001cbe3:	83 ec 0c             	sub    esp,0xc
c001cbe6:	68 fc 10 02 c0       	push   0xc00210fc
c001cbeb:	e8 bf 37 ff ff       	call   c00103af <KePanic(char const*)>
c001cbf0:	83 c4 10             	add    esp,0x10
c001cbf3:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cbf9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cbff:	51                   	push   ecx
c001cc00:	50                   	push   eax
c001cc01:	83 c0 02             	add    eax,0x2
c001cc04:	c1 e0 07             	shl    eax,0x7
c001cc07:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001cc0d:	50                   	push   eax
c001cc0e:	52                   	push   edx
c001cc0f:	e8 c6 e1 ff ff       	call   c001adda <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cc14:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001cc18:	b9 03 00 00 00       	mov    ecx,0x3
c001cc1d:	fc                   	cld    
c001cc1e:	31 c0                	xor    eax,eax
c001cc20:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cc22:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001cc27:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001cc2c:	83 c4 0c             	add    esp,0xc
c001cc2f:	6a 00                	push   0x0
c001cc31:	6a 00                	push   0x0
c001cc33:	6a 00                	push   0x0
c001cc35:	6a 00                	push   0x0
c001cc37:	6a 02                	push   0x2
c001cc39:	8d 44 24 30          	lea    eax,[esp+0x30]
c001cc3d:	50                   	push   eax
c001cc3e:	53                   	push   ebx
c001cc3f:	e8 16 fb ff ff       	call   c001c75a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001cc44:	83 c4 20             	add    esp,0x20
c001cc47:	85 c0                	test   eax,eax
c001cc49:	75 44                	jne    c001cc8f <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001cc4b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001cc4f:	b9 03 00 00 00       	mov    ecx,0x3
c001cc54:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cc56:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc5a:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001cc5f:	0f c8                	bswap  eax
c001cc61:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001cc65:	89 f0                	mov    eax,esi
c001cc67:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001cc6b:	50                   	push   eax
c001cc6c:	56                   	push   esi
c001cc6d:	c1 e6 0b             	shl    esi,0xb
c001cc70:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001cc74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc7c:	56                   	push   esi
c001cc7d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cc81:	50                   	push   eax
c001cc82:	53                   	push   ebx
c001cc83:	e8 d2 fa ff ff       	call   c001c75a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001cc88:	83 c4 20             	add    esp,0x20
c001cc8b:	85 c0                	test   eax,eax
c001cc8d:	74 14                	je     c001cca3 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001cc8f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cc93:	83 ec 0c             	sub    esp,0xc
c001cc96:	53                   	push   ebx
c001cc97:	e8 ce fd ff ff       	call   c001ca6a <SATAPI::detectMedia()>
c001cc9c:	83 c4 10             	add    esp,0x10
c001cc9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cca3:	83 c4 30             	add    esp,0x30
c001cca6:	5b                   	pop    ebx
c001cca7:	5e                   	pop    esi
c001cca8:	5f                   	pop    edi
c001cca9:	c3                   	ret    

c001ccaa <IOAPIC::close(int, int, void*)>:
c001ccaa:	b8 00 00 00 00       	mov    eax,0x0
c001ccaf:	c3                   	ret    

c001ccb0 <apicGetBase()>:
c001ccb0:	55                   	push   ebp
c001ccb1:	89 e5                	mov    ebp,esp
c001ccb3:	83 ec 18             	sub    esp,0x18
c001ccb6:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001ccbb:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ccc1:	83 e0 08             	and    eax,0x8
c001ccc4:	84 c0                	test   al,al
c001ccc6:	75 07                	jne    c001cccf <apicGetBase()+0x1f>
c001ccc8:	b8 00 00 00 00       	mov    eax,0x0
c001cccd:	eb 21                	jmp    c001ccf0 <apicGetBase()+0x40>
c001cccf:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001ccd4:	83 ec 08             	sub    esp,0x8
c001ccd7:	6a 1b                	push   0x1b
c001ccd9:	50                   	push   eax
c001ccda:	e8 bd a1 fe ff       	call   c0006e9c <Computer::rdmsr(unsigned int)>
c001ccdf:	83 c4 10             	add    esp,0x10
c001cce2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001cce5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001cce8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cceb:	25 00 00 ff ff       	and    eax,0xffff0000
c001ccf0:	c9                   	leave  
c001ccf1:	c3                   	ret    

c001ccf2 <IOAPIC::IOAPIC()>:
c001ccf2:	83 ec 0c             	sub    esp,0xc
c001ccf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccf9:	83 ec 08             	sub    esp,0x8
c001ccfc:	68 60 11 02 c0       	push   0xc0021160
c001cd01:	50                   	push   eax
c001cd02:	e8 c9 ee fe ff       	call   c000bbd0 <Device::Device(char const*)>
c001cd07:	83 c4 10             	add    esp,0x10
c001cd0a:	ba 70 11 02 c0       	mov    edx,0xc0021170
c001cd0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd13:	89 10                	mov    DWORD PTR [eax],edx
c001cd15:	90                   	nop
c001cd16:	83 c4 0c             	add    esp,0xc
c001cd19:	c3                   	ret    

c001cd1a <apicOpen()>:
c001cd1a:	55                   	push   ebp
c001cd1b:	89 e5                	mov    ebp,esp
c001cd1d:	53                   	push   ebx
c001cd1e:	83 ec 34             	sub    esp,0x34
c001cd21:	a0 a0 7b 02 c0       	mov    al,ds:0xc0027ba0
c001cd26:	83 f0 01             	xor    eax,0x1
c001cd29:	84 c0                	test   al,al
c001cd2b:	0f 84 9d 00 00 00    	je     c001cdce <apicOpen()+0xb4>
c001cd31:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001cd35:	a0 80 67 02 c0       	mov    al,ds:0xc0026780
c001cd3a:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001cd3d:	0f 83 84 00 00 00    	jae    c001cdc7 <apicOpen()+0xad>
c001cd43:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001cd4a:	83 ec 0c             	sub    esp,0xc
c001cd4d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001cd50:	e8 10 ab fe ff       	call   c0007865 <malloc>
c001cd55:	83 c4 10             	add    esp,0x10
c001cd58:	89 c3                	mov    ebx,eax
c001cd5a:	83 ec 0c             	sub    esp,0xc
c001cd5d:	53                   	push   ebx
c001cd5e:	e8 8f ff ff ff       	call   c001ccf2 <IOAPIC::IOAPIC()>
c001cd63:	83 c4 10             	add    esp,0x10
c001cd66:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001cd69:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001cd6c:	25 ff 00 00 00       	and    eax,0xff
c001cd71:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001cd74:	89 14 85 80 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8480],edx
c001cd7b:	a1 60 7b 02 c0       	mov    eax,ds:0xc0027b60
c001cd80:	40                   	inc    eax
c001cd81:	a3 60 7b 02 c0       	mov    ds:0xc0027b60,eax
c001cd86:	a1 b8 3e 02 c0       	mov    eax,ds:0xc0023eb8
c001cd8b:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001cd91:	83 ec 08             	sub    esp,0x8
c001cd94:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001cd97:	50                   	push   eax
c001cd98:	e8 9b ec fe ff       	call   c000ba38 <Device::addChild(Device*)>
c001cd9d:	83 c4 10             	add    esp,0x10
c001cda0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001cda3:	8b 00                	mov    eax,DWORD PTR [eax]
c001cda5:	83 c0 08             	add    eax,0x8
c001cda8:	8b 10                	mov    edx,DWORD PTR [eax]
c001cdaa:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001cdad:	25 ff 00 00 00       	and    eax,0xff
c001cdb2:	6a 00                	push   0x0
c001cdb4:	6a 00                	push   0x0
c001cdb6:	50                   	push   eax
c001cdb7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001cdba:	ff d2                	call   edx
c001cdbc:	83 c4 10             	add    esp,0x10
c001cdbf:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001cdc2:	e9 6e ff ff ff       	jmp    c001cd35 <apicOpen()+0x1b>
c001cdc7:	c6 05 a0 7b 02 c0 01 	mov    BYTE PTR ds:0xc0027ba0,0x1
c001cdce:	e8 dd fe ff ff       	call   c001ccb0 <apicGetBase()>
c001cdd3:	05 f0 00 00 00       	add    eax,0xf0
c001cdd8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cddb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001cdde:	8b 00                	mov    eax,DWORD PTR [eax]
c001cde0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001cde3:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001cdea:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001cdf1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001cdf4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001cdf7:	89 10                	mov    DWORD PTR [eax],edx
c001cdf9:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ce00:	a1 d0 66 02 c0       	mov    eax,ds:0xc00266d0
c001ce05:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ce08:	7d 70                	jge    c001ce7a <apicOpen()+0x160>
c001ce0a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ce0d:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001ce14:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ce17:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ce1a:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001ce21:	c1 e8 08             	shr    eax,0x8
c001ce24:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ce28:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ce2b:	8b 04 85 e0 66 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9920]
c001ce32:	c1 e8 18             	shr    eax,0x18
c001ce35:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ce38:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001ce3c:	75 37                	jne    c001ce75 <apicOpen()+0x15b>
c001ce3e:	e8 6d fe ff ff       	call   c001ccb0 <apicGetBase()>
c001ce43:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001ce47:	75 07                	jne    c001ce50 <apicOpen()+0x136>
c001ce49:	ba 60 03 00 00       	mov    edx,0x360
c001ce4e:	eb 05                	jmp    c001ce55 <apicOpen()+0x13b>
c001ce50:	ba 50 03 00 00       	mov    edx,0x350
c001ce55:	01 d0                	add    eax,edx
c001ce57:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ce5a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ce5d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce5f:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ce62:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ce69:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ce6d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ce70:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ce73:	89 10                	mov    DWORD PTR [eax],edx
c001ce75:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001ce78:	eb 86                	jmp    c001ce00 <apicOpen()+0xe6>
c001ce7a:	90                   	nop
c001ce7b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ce7e:	c9                   	leave  
c001ce7f:	c3                   	ret    

c001ce80 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ce80:	55                   	push   ebp
c001ce81:	89 e5                	mov    ebp,esp
c001ce83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ce86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ce8c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ce8f:	72 1d                	jb     c001ceae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ce91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ce94:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ce9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ce9d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001cea3:	01 d0                	add    eax,edx
c001cea5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001cea8:	73 04                	jae    c001ceae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ceaa:	b0 01                	mov    al,0x1
c001ceac:	eb 02                	jmp    c001ceb0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ceae:	b0 00                	mov    al,0x0
c001ceb0:	5d                   	pop    ebp
c001ceb1:	c3                   	ret    

c001ceb2 <IOAPIC::read(int)>:
c001ceb2:	55                   	push   ebp
c001ceb3:	89 e5                	mov    ebp,esp
c001ceb5:	83 ec 10             	sub    esp,0x10
c001ceb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cebb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cec1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001cec4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cec7:	31 d2                	xor    edx,edx
c001cec9:	88 c2                	mov    dl,al
c001cecb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001cece:	89 10                	mov    DWORD PTR [eax],edx
c001ced0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ced3:	83 c0 10             	add    eax,0x10
c001ced6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ced8:	c9                   	leave  
c001ced9:	c3                   	ret    

c001ceda <IOAPIC::open(int, int, void*)>:
c001ceda:	55                   	push   ebp
c001cedb:	89 e5                	mov    ebp,esp
c001cedd:	57                   	push   edi
c001cede:	56                   	push   esi
c001cedf:	53                   	push   ebx
c001cee0:	83 ec 04             	sub    esp,0x4
c001cee3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cee6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001cee9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ceef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cef2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cef8:	8b 14 85 c0 67 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9840]
c001ceff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf02:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001cf08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf0b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf11:	8b 14 85 40 68 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd97c0]
c001cf18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf1b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cf21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf24:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cf2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf2d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001cf33:	89 c6                	mov    esi,eax
c001cf35:	81 e6 ff 00 00 00    	and    esi,0xff
c001cf3b:	89 d0                	mov    eax,edx
c001cf3d:	ba 00 00 00 00       	mov    edx,0x0
c001cf42:	89 c7                	mov    edi,eax
c001cf44:	83 e7 ff             	and    edi,0xffffffff
c001cf47:	89 f9                	mov    ecx,edi
c001cf49:	89 d0                	mov    eax,edx
c001cf4b:	25 ff 00 00 00       	and    eax,0xff
c001cf50:	89 c3                	mov    ebx,eax
c001cf52:	89 c8                	mov    eax,ecx
c001cf54:	89 da                	mov    edx,ebx
c001cf56:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001cf59:	8d 5e 08             	lea    ebx,[esi+0x8]
c001cf5c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001cf60:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001cf64:	83 e0 00             	and    eax,0x0
c001cf67:	09 d0                	or     eax,edx
c001cf69:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001cf6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf70:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001cf76:	8d 50 01             	lea    edx,[eax+0x1]
c001cf79:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001cf7c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001cf82:	31 d2                	xor    edx,edx
c001cf84:	88 c2                	mov    dl,al
c001cf86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf89:	83 c2 08             	add    edx,0x8
c001cf8c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001cf90:	81 e1 ff 00 00 00    	and    ecx,0xff
c001cf96:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001cf9c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001cfa0:	6a 01                	push   0x1
c001cfa2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cfa5:	e8 08 ff ff ff       	call   c001ceb2 <IOAPIC::read(int)>
c001cfaa:	83 c4 08             	add    esp,0x8
c001cfad:	c1 f8 10             	sar    eax,0x10
c001cfb0:	25 ff 00 00 00       	and    eax,0xff
c001cfb5:	8d 50 01             	lea    edx,[eax+0x1]
c001cfb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cfbb:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001cfc1:	b8 00 00 00 00       	mov    eax,0x0
c001cfc6:	8d 65 f4             	lea    esp,[ebp-0xc]
c001cfc9:	5b                   	pop    ebx
c001cfca:	5e                   	pop    esi
c001cfcb:	5f                   	pop    edi
c001cfcc:	5d                   	pop    ebp
c001cfcd:	c3                   	ret    

c001cfce <IOAPIC::write(int, int)>:
c001cfce:	55                   	push   ebp
c001cfcf:	89 e5                	mov    ebp,esp
c001cfd1:	83 ec 10             	sub    esp,0x10
c001cfd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cfd7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cfdd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001cfe0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cfe3:	31 d2                	xor    edx,edx
c001cfe5:	88 c2                	mov    dl,al
c001cfe7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001cfea:	89 10                	mov    DWORD PTR [eax],edx
c001cfec:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001cfef:	8d 50 10             	lea    edx,[eax+0x10]
c001cff2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001cff5:	89 02                	mov    DWORD PTR [edx],eax
c001cff7:	90                   	nop
c001cff8:	c9                   	leave  
c001cff9:	c3                   	ret    

c001cffa <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001cffa:	55                   	push   ebp
c001cffb:	89 e5                	mov    ebp,esp
c001cffd:	53                   	push   ebx
c001cffe:	83 ec 2c             	sub    esp,0x2c
c001d001:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d004:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001d007:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001d00a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001d00d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d010:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d013:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001d016:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d019:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001d01c:	88 d8                	mov    al,bl
c001d01e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001d021:	88 c8                	mov    al,cl
c001d023:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001d026:	88 d0                	mov    al,dl
c001d028:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001d02b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001d02e:	25 ff 00 00 00       	and    eax,0xff
c001d033:	83 c0 08             	add    eax,0x8
c001d036:	01 c0                	add    eax,eax
c001d038:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d03b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001d03e:	25 ff 00 00 00       	and    eax,0xff
c001d043:	83 c0 08             	add    eax,0x8
c001d046:	01 c0                	add    eax,eax
c001d048:	40                   	inc    eax
c001d049:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001d04c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d04f:	50                   	push   eax
c001d050:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d053:	e8 5a fe ff ff       	call   c001ceb2 <IOAPIC::read(int)>
c001d058:	83 c4 08             	add    esp,0x8
c001d05b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d05e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001d065:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001d068:	c1 e0 18             	shl    eax,0x18
c001d06b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001d06e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d071:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001d074:	52                   	push   edx
c001d075:	50                   	push   eax
c001d076:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d079:	e8 50 ff ff ff       	call   c001cfce <IOAPIC::write(int, int)>
c001d07e:	83 c4 0c             	add    esp,0xc
c001d081:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d084:	50                   	push   eax
c001d085:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d088:	e8 25 fe ff ff       	call   c001ceb2 <IOAPIC::read(int)>
c001d08d:	83 c4 08             	add    esp,0x8
c001d090:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d093:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001d09a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001d0a1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001d0a8:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001d0ac:	74 09                	je     c001d0b7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001d0ae:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001d0b5:	eb 07                	jmp    c001d0be <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001d0b7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001d0be:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001d0c2:	74 09                	je     c001d0cd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001d0c4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001d0cb:	eb 07                	jmp    c001d0d4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001d0cd:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001d0d4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001d0db:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001d0de:	25 ff 00 00 00       	and    eax,0xff
c001d0e3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d0e6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d0e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d0ec:	52                   	push   edx
c001d0ed:	50                   	push   eax
c001d0ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d0f1:	e8 d8 fe ff ff       	call   c001cfce <IOAPIC::write(int, int)>
c001d0f6:	83 c4 0c             	add    esp,0xc
c001d0f9:	90                   	nop
c001d0fa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001d0fd:	c9                   	leave  
c001d0fe:	c3                   	ret    
c001d0ff:	90                   	nop

c001d100 <APICTimer::close(int, int, void*)>:
c001d100:	b8 00 00 00 00       	mov    eax,0x0
c001d105:	c3                   	ret    
c001d106:	66 90                	xchg   ax,ax

c001d108 <apicTimerHandler(regs*, void*)>:
c001d108:	83 ec 0c             	sub    esp,0xc
c001d10b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d10f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d111:	b8 10 27 00 00       	mov    eax,0x2710
c001d116:	ba 00 00 00 00       	mov    edx,0x0
c001d11b:	f7 f1                	div    ecx
c001d11d:	83 ec 0c             	sub    esp,0xc
c001d120:	50                   	push   eax
c001d121:	e8 96 02 ff ff       	call   c000d3bc <timerHandler(unsigned int)>
c001d126:	83 c4 10             	add    esp,0x10
c001d129:	90                   	nop
c001d12a:	83 c4 0c             	add    esp,0xc
c001d12d:	c3                   	ret    
c001d12e:	66 90                	xchg   ax,ax

c001d130 <APICTimer::open(int, int, void*)>:
c001d130:	83 ec 0c             	sub    esp,0xc
c001d133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d137:	8b 00                	mov    eax,DWORD PTR [eax]
c001d139:	83 c0 24             	add    eax,0x24
c001d13c:	8b 00                	mov    eax,DWORD PTR [eax]
c001d13e:	83 ec 08             	sub    esp,0x8
c001d141:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d145:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d149:	ff d0                	call   eax
c001d14b:	83 c4 10             	add    esp,0x10
c001d14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d152:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d156:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d15c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d160:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d164:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001d16a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d16e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d174:	83 ec 0c             	sub    esp,0xc
c001d177:	51                   	push   ecx
c001d178:	6a 01                	push   0x1
c001d17a:	68 08 d1 01 c0       	push   0xc001d108
c001d17f:	52                   	push   edx
c001d180:	50                   	push   eax
c001d181:	e8 5e e8 fe ff       	call   c000b9e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d186:	83 c4 20             	add    esp,0x20
c001d189:	89 c2                	mov    edx,eax
c001d18b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d18f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d195:	b8 00 00 00 00       	mov    eax,0x0
c001d19a:	83 c4 0c             	add    esp,0xc
c001d19d:	c3                   	ret    
c001d19e:	66 90                	xchg   ax,ax

c001d1a0 <APICTimer::write(int)>:
c001d1a0:	83 ec 0c             	sub    esp,0xc
c001d1a3:	83 ec 0c             	sub    esp,0xc
c001d1a6:	68 94 11 02 c0       	push   0xc0021194
c001d1ab:	e8 ff 31 ff ff       	call   c00103af <KePanic(char const*)>
c001d1b0:	83 c4 10             	add    esp,0x10
c001d1b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d1bb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d1c1:	90                   	nop
c001d1c2:	83 c4 0c             	add    esp,0xc
c001d1c5:	c3                   	ret    
c001d1c6:	66 90                	xchg   ax,ax

c001d1c8 <APICTimer::APICTimer()>:
c001d1c8:	83 ec 0c             	sub    esp,0xc
c001d1cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1cf:	83 ec 08             	sub    esp,0x8
c001d1d2:	68 a4 11 02 c0       	push   0xc00211a4
c001d1d7:	50                   	push   eax
c001d1d8:	e8 13 01 ff ff       	call   c000d2f0 <Timer::Timer(char const*)>
c001d1dd:	83 c4 10             	add    esp,0x10
c001d1e0:	ba b8 11 02 c0       	mov    edx,0xc00211b8
c001d1e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1e9:	89 10                	mov    DWORD PTR [eax],edx
c001d1eb:	90                   	nop
c001d1ec:	83 c4 0c             	add    esp,0xc
c001d1ef:	c3                   	ret    

c001d1f0 <PIT::write(int)>:
c001d1f0:	83 ec 10             	sub    esp,0x10
c001d1f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d1f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d1fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d201:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d205:	a3 a4 7b 02 c0       	mov    ds:0xc0027ba4,eax
c001d20a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001d20f:	99                   	cdq    
c001d210:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001d214:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d218:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001d21f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001d224:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001d228:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001d22d:	ee                   	out    dx,al
c001d22e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d232:	25 ff 00 00 00       	and    eax,0xff
c001d237:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001d23e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d242:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001d246:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001d24b:	ee                   	out    dx,al
c001d24c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d250:	c1 f8 08             	sar    eax,0x8
c001d253:	25 ff 00 00 00       	and    eax,0xff
c001d258:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001d25f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001d263:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001d267:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001d26c:	ee                   	out    dx,al
c001d26d:	90                   	nop
c001d26e:	83 c4 10             	add    esp,0x10
c001d271:	c3                   	ret    
c001d272:	66 90                	xchg   ax,ax

c001d274 <pitHandler(regs*, void*)>:
c001d274:	83 ec 0c             	sub    esp,0xc
c001d277:	8b 0d a4 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027ba4
c001d27d:	b8 10 27 00 00       	mov    eax,0x2710
c001d282:	99                   	cdq    
c001d283:	f7 f9                	idiv   ecx
c001d285:	83 ec 0c             	sub    esp,0xc
c001d288:	50                   	push   eax
c001d289:	e8 2e 01 ff ff       	call   c000d3bc <timerHandler(unsigned int)>
c001d28e:	83 c4 10             	add    esp,0x10
c001d291:	90                   	nop
c001d292:	83 c4 0c             	add    esp,0xc
c001d295:	c3                   	ret    
c001d296:	66 90                	xchg   ax,ax

c001d298 <PIT::open(int, int, void*)>:
c001d298:	83 ec 0c             	sub    esp,0xc
c001d29b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d29f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2a1:	83 c0 24             	add    eax,0x24
c001d2a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001d2a6:	83 ec 08             	sub    esp,0x8
c001d2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2b1:	ff d0                	call   eax
c001d2b3:	83 c4 10             	add    esp,0x10
c001d2b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2ba:	83 ec 0c             	sub    esp,0xc
c001d2bd:	6a 00                	push   0x0
c001d2bf:	6a 01                	push   0x1
c001d2c1:	68 74 d2 01 c0       	push   0xc001d274
c001d2c6:	6a 00                	push   0x0
c001d2c8:	50                   	push   eax
c001d2c9:	e8 16 e7 fe ff       	call   c000b9e4 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001d2ce:	83 c4 20             	add    esp,0x20
c001d2d1:	89 c2                	mov    edx,eax
c001d2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2d7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001d2dd:	b8 00 00 00 00       	mov    eax,0x0
c001d2e2:	83 c4 0c             	add    esp,0xc
c001d2e5:	c3                   	ret    
c001d2e6:	66 90                	xchg   ax,ax

c001d2e8 <PIT::close(int, int, void*)>:
c001d2e8:	83 ec 0c             	sub    esp,0xc
c001d2eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2ef:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001d2f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2fd:	6a 01                	push   0x1
c001d2ff:	68 74 d2 01 c0       	push   0xc001d274
c001d304:	6a 00                	push   0x0
c001d306:	50                   	push   eax
c001d307:	e8 0e e7 fe ff       	call   c000ba1a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001d30c:	83 c4 10             	add    esp,0x10
c001d30f:	b8 00 00 00 00       	mov    eax,0x0
c001d314:	83 c4 0c             	add    esp,0xc
c001d317:	c3                   	ret    

c001d318 <PIT::PIT()>:
c001d318:	83 ec 0c             	sub    esp,0xc
c001d31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d31f:	83 ec 08             	sub    esp,0x8
c001d322:	68 e0 11 02 c0       	push   0xc00211e0
c001d327:	50                   	push   eax
c001d328:	e8 c3 ff fe ff       	call   c000d2f0 <Timer::Timer(char const*)>
c001d32d:	83 c4 10             	add    esp,0x10
c001d330:	ba 08 12 02 c0       	mov    edx,0xc0021208
c001d335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d339:	89 10                	mov    DWORD PTR [eax],edx
c001d33b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d33f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d345:	31 d2                	xor    edx,edx
c001d347:	88 c2                	mov    dl,al
c001d349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d34d:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001d354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d358:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d35e:	31 d2                	xor    edx,edx
c001d360:	88 c2                	mov    dl,al
c001d362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d366:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001d36b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d36f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d375:	8d 50 01             	lea    edx,[eax+0x1]
c001d378:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d37c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d382:	31 d2                	xor    edx,edx
c001d384:	88 c2                	mov    dl,al
c001d386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d38a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d38e:	83 e1 3f             	and    ecx,0x3f
c001d391:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d395:	90                   	nop
c001d396:	83 c4 0c             	add    esp,0xc
c001d399:	c3                   	ret    
c001d39a:	66 90                	xchg   ax,ax
c001d39c:	66 90                	xchg   ax,ax
c001d39e:	66 90                	xchg   ax,ax

c001d3a0 <avxDetect>:
c001d3a0:	b8 01 00 00 00       	mov    eax,0x1
c001d3a5:	0f a2                	cpuid  
c001d3a7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001d3ad:	74 15                	je     c001d3c4 <avxDetect.noAVX>
c001d3af:	b8 01 00 00 00       	mov    eax,0x1
c001d3b4:	0f a2                	cpuid  
c001d3b6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001d3bc:	74 06                	je     c001d3c4 <avxDetect.noAVX>
c001d3be:	b8 01 00 00 00       	mov    eax,0x1
c001d3c3:	c3                   	ret    

c001d3c4 <avxDetect.noAVX>:
c001d3c4:	b8 00 00 00 00       	mov    eax,0x0
c001d3c9:	c3                   	ret    

c001d3ca <avxSave>:
c001d3ca:	53                   	push   ebx
c001d3cb:	52                   	push   edx
c001d3cc:	31 c0                	xor    eax,eax
c001d3ce:	48                   	dec    eax
c001d3cf:	89 c2                	mov    edx,eax
c001d3d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d3d5:	0f ae 23             	xsave  [ebx]
c001d3d8:	5a                   	pop    edx
c001d3d9:	5b                   	pop    ebx
c001d3da:	c3                   	ret    

c001d3db <avxLoad>:
c001d3db:	53                   	push   ebx
c001d3dc:	52                   	push   edx
c001d3dd:	31 c0                	xor    eax,eax
c001d3df:	48                   	dec    eax
c001d3e0:	89 c2                	mov    edx,eax
c001d3e2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d3e6:	0f ae 2b             	xrstor [ebx]
c001d3e9:	5a                   	pop    edx
c001d3ea:	5b                   	pop    ebx
c001d3eb:	c3                   	ret    

c001d3ec <avxInit>:
c001d3ec:	e8 67 03 00 00       	call   c001d758 <sseInit>
c001d3f1:	50                   	push   eax
c001d3f2:	51                   	push   ecx
c001d3f3:	0f 20 e0             	mov    eax,cr4
c001d3f6:	0d 00 00 04 00       	or     eax,0x40000
c001d3fb:	0f 22 e0             	mov    cr4,eax
c001d3fe:	31 c9                	xor    ecx,ecx
c001d400:	0f 01 d0             	xgetbv 
c001d403:	0d 07 00 00 00       	or     eax,0x7
c001d408:	0f 01 d1             	xsetbv 
c001d40b:	59                   	pop    ecx
c001d40c:	58                   	pop    eax
c001d40d:	c3                   	ret    

c001d40e <avxClose>:
c001d40e:	c3                   	ret    

c001d40f <wouldSheSayYes>:
c001d40f:	c3                   	ret    
c001d410:	49                   	dec    ecx
c001d411:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001d415:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001d419:	75 20                	jne    c001d43b <isr0+0xb>
c001d41b:	4e                   	dec    esi
c001d41c:	79 61                	jns    c001d47f <isr7+0x3>
c001d41e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001d423:	66 90                	xchg   ax,ax
c001d425:	66 90                	xchg   ax,ax
c001d427:	66 90                	xchg   ax,ax
c001d429:	66 90                	xchg   ax,ax
c001d42b:	66 90                	xchg   ax,ax
c001d42d:	66 90                	xchg   ax,ax
c001d42f:	90                   	nop

c001d430 <isr0>:
c001d430:	fa                   	cli    
c001d431:	68 00 00 00 00       	push   0x0
c001d436:	68 00 00 00 00       	push   0x0
c001d43b:	e9 56 01 00 00       	jmp    c001d596 <int_common_stub>

c001d440 <isr1>:
c001d440:	fa                   	cli    
c001d441:	6a 00                	push   0x0
c001d443:	6a 01                	push   0x1
c001d445:	e9 4c 01 00 00       	jmp    c001d596 <int_common_stub>

c001d44a <isr2>:
c001d44a:	fa                   	cli    
c001d44b:	6a 00                	push   0x0
c001d44d:	6a 02                	push   0x2
c001d44f:	e9 42 01 00 00       	jmp    c001d596 <int_common_stub>

c001d454 <isr3>:
c001d454:	fa                   	cli    
c001d455:	6a 00                	push   0x0
c001d457:	6a 03                	push   0x3
c001d459:	e9 38 01 00 00       	jmp    c001d596 <int_common_stub>

c001d45e <isr4>:
c001d45e:	fa                   	cli    
c001d45f:	6a 00                	push   0x0
c001d461:	6a 04                	push   0x4
c001d463:	e9 2e 01 00 00       	jmp    c001d596 <int_common_stub>

c001d468 <isr5>:
c001d468:	fa                   	cli    
c001d469:	6a 00                	push   0x0
c001d46b:	6a 05                	push   0x5
c001d46d:	e9 24 01 00 00       	jmp    c001d596 <int_common_stub>

c001d472 <isr6>:
c001d472:	fa                   	cli    
c001d473:	6a 00                	push   0x0
c001d475:	6a 06                	push   0x6
c001d477:	e9 1a 01 00 00       	jmp    c001d596 <int_common_stub>

c001d47c <isr7>:
c001d47c:	fa                   	cli    
c001d47d:	6a 00                	push   0x0
c001d47f:	6a 07                	push   0x7
c001d481:	e9 10 01 00 00       	jmp    c001d596 <int_common_stub>

c001d486 <isr8>:
c001d486:	fa                   	cli    
c001d487:	6a 08                	push   0x8
c001d489:	e9 08 01 00 00       	jmp    c001d596 <int_common_stub>

c001d48e <isr9>:
c001d48e:	fa                   	cli    
c001d48f:	6a 00                	push   0x0
c001d491:	6a 09                	push   0x9
c001d493:	e9 fe 00 00 00       	jmp    c001d596 <int_common_stub>

c001d498 <isr10>:
c001d498:	fa                   	cli    
c001d499:	6a 0a                	push   0xa
c001d49b:	e9 f6 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4a0 <isr11>:
c001d4a0:	fa                   	cli    
c001d4a1:	6a 0b                	push   0xb
c001d4a3:	e9 ee 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4a8 <isr12>:
c001d4a8:	fa                   	cli    
c001d4a9:	6a 0c                	push   0xc
c001d4ab:	e9 e6 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4b0 <isr13>:
c001d4b0:	fa                   	cli    
c001d4b1:	6a 0d                	push   0xd
c001d4b3:	53                   	push   ebx
c001d4b4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d4b8:	81 fb 86 d6 01 c0    	cmp    ebx,0xc001d686
c001d4be:	5b                   	pop    ebx
c001d4bf:	0f 84 c3 01 00 00    	je     c001d688 <finishSignal2>
c001d4c5:	e9 cc 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4ca <isr14>:
c001d4ca:	fa                   	cli    
c001d4cb:	6a 0e                	push   0xe
c001d4cd:	e9 c4 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4d2 <isr15>:
c001d4d2:	fa                   	cli    
c001d4d3:	6a 00                	push   0x0
c001d4d5:	6a 0f                	push   0xf
c001d4d7:	e9 ba 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4dc <isr16>:
c001d4dc:	fa                   	cli    
c001d4dd:	6a 00                	push   0x0
c001d4df:	6a 10                	push   0x10
c001d4e1:	e9 b0 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4e6 <isr17>:
c001d4e6:	fa                   	cli    
c001d4e7:	6a 00                	push   0x0
c001d4e9:	6a 11                	push   0x11
c001d4eb:	e9 a6 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4f0 <isr18>:
c001d4f0:	fa                   	cli    
c001d4f1:	6a 00                	push   0x0
c001d4f3:	6a 12                	push   0x12
c001d4f5:	e9 9c 00 00 00       	jmp    c001d596 <int_common_stub>

c001d4fa <irq3>:
c001d4fa:	fa                   	cli    
c001d4fb:	6a 00                	push   0x0
c001d4fd:	6a 23                	push   0x23
c001d4ff:	e9 92 00 00 00       	jmp    c001d596 <int_common_stub>

c001d504 <irq4>:
c001d504:	fa                   	cli    
c001d505:	6a 00                	push   0x0
c001d507:	6a 24                	push   0x24
c001d509:	e9 88 00 00 00       	jmp    c001d596 <int_common_stub>

c001d50e <irq5>:
c001d50e:	fa                   	cli    
c001d50f:	6a 00                	push   0x0
c001d511:	6a 25                	push   0x25
c001d513:	e9 7e 00 00 00       	jmp    c001d596 <int_common_stub>

c001d518 <irq6>:
c001d518:	fa                   	cli    
c001d519:	6a 00                	push   0x0
c001d51b:	6a 26                	push   0x26
c001d51d:	e9 74 00 00 00       	jmp    c001d596 <int_common_stub>

c001d522 <irq7>:
c001d522:	fa                   	cli    
c001d523:	6a 00                	push   0x0
c001d525:	6a 27                	push   0x27
c001d527:	e9 6a 00 00 00       	jmp    c001d596 <int_common_stub>

c001d52c <irq8>:
c001d52c:	fa                   	cli    
c001d52d:	6a 00                	push   0x0
c001d52f:	6a 28                	push   0x28
c001d531:	e9 60 00 00 00       	jmp    c001d596 <int_common_stub>

c001d536 <irq9>:
c001d536:	fa                   	cli    
c001d537:	6a 00                	push   0x0
c001d539:	6a 29                	push   0x29
c001d53b:	e9 56 00 00 00       	jmp    c001d596 <int_common_stub>

c001d540 <irq10>:
c001d540:	fa                   	cli    
c001d541:	6a 00                	push   0x0
c001d543:	6a 2a                	push   0x2a
c001d545:	e9 4c 00 00 00       	jmp    c001d596 <int_common_stub>

c001d54a <irq11>:
c001d54a:	fa                   	cli    
c001d54b:	6a 00                	push   0x0
c001d54d:	6a 2b                	push   0x2b
c001d54f:	e9 42 00 00 00       	jmp    c001d596 <int_common_stub>

c001d554 <irq12>:
c001d554:	fa                   	cli    
c001d555:	6a 00                	push   0x0
c001d557:	6a 2c                	push   0x2c
c001d559:	e9 38 00 00 00       	jmp    c001d596 <int_common_stub>

c001d55e <irq13>:
c001d55e:	fa                   	cli    
c001d55f:	6a 00                	push   0x0
c001d561:	6a 2d                	push   0x2d
c001d563:	e9 2e 00 00 00       	jmp    c001d596 <int_common_stub>

c001d568 <irq14>:
c001d568:	fa                   	cli    
c001d569:	6a 00                	push   0x0
c001d56b:	6a 2e                	push   0x2e
c001d56d:	e9 24 00 00 00       	jmp    c001d596 <int_common_stub>

c001d572 <irq15>:
c001d572:	fa                   	cli    
c001d573:	6a 00                	push   0x0
c001d575:	6a 2f                	push   0x2f
c001d577:	e9 1a 00 00 00       	jmp    c001d596 <int_common_stub>

c001d57c <irq1>:
c001d57c:	fa                   	cli    
c001d57d:	6a 00                	push   0x0
c001d57f:	6a 21                	push   0x21
c001d581:	eb 13                	jmp    c001d596 <int_common_stub>

c001d583 <irq2>:
c001d583:	fa                   	cli    
c001d584:	6a 00                	push   0x0
c001d586:	6a 22                	push   0x22
c001d588:	eb 0c                	jmp    c001d596 <int_common_stub>

c001d58a <isr96>:
c001d58a:	6a 00                	push   0x0
c001d58c:	6a 60                	push   0x60
c001d58e:	fb                   	sti    
c001d58f:	eb 37                	jmp    c001d5c8 <syscall_common_stub>

c001d591 <irq0>:
c001d591:	fa                   	cli    
c001d592:	6a 00                	push   0x0
c001d594:	6a 20                	push   0x20

c001d596 <int_common_stub>:
c001d596:	60                   	pusha  
c001d597:	1e                   	push   ds
c001d598:	06                   	push   es
c001d599:	0f a0                	push   fs
c001d59b:	0f a8                	push   gs
c001d59d:	66 b8 10 00          	mov    ax,0x10
c001d5a1:	66 8e d8             	mov    ds,ax
c001d5a4:	66 8e c0             	mov    es,ax
c001d5a7:	66 8e e0             	mov    fs,ax
c001d5aa:	66 8e e8             	mov    gs,ax
c001d5ad:	54                   	push   esp
c001d5ae:	fc                   	cld    
c001d5af:	e8 30 e9 fe ff       	call   c000bee4 <int_handler>
c001d5b4:	81 c4 04 00 00 00    	add    esp,0x4
c001d5ba:	0f a9                	pop    gs
c001d5bc:	0f a1                	pop    fs
c001d5be:	07                   	pop    es
c001d5bf:	1f                   	pop    ds
c001d5c0:	61                   	popa   
c001d5c1:	81 c4 08 00 00 00    	add    esp,0x8
c001d5c7:	cf                   	iret   

c001d5c8 <syscall_common_stub>:
c001d5c8:	60                   	pusha  
c001d5c9:	1e                   	push   ds
c001d5ca:	06                   	push   es
c001d5cb:	0f a0                	push   fs
c001d5cd:	0f a8                	push   gs
c001d5cf:	66 b8 10 00          	mov    ax,0x10
c001d5d3:	66 8e d8             	mov    ds,ax
c001d5d6:	66 8e c0             	mov    es,ax
c001d5d9:	66 8e e0             	mov    fs,ax
c001d5dc:	66 8e e8             	mov    gs,ax
c001d5df:	54                   	push   esp
c001d5e0:	fc                   	cld    
c001d5e1:	e8 fe e8 fe ff       	call   c000bee4 <int_handler>
c001d5e6:	81 c4 04 00 00 00    	add    esp,0x4
c001d5ec:	0f a9                	pop    gs
c001d5ee:	0f a1                	pop    fs
c001d5f0:	07                   	pop    es
c001d5f1:	1f                   	pop    ds
c001d5f2:	e8 10 33 ff ff       	call   c0010907 <KiCheckSignalZ>
c001d5f7:	3d 00 00 00 00       	cmp    eax,0x0
c001d5fc:	0f 84 c0 00 00 00    	je     c001d6c2 <skipSignals>
c001d602:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001d607:	61                   	popa   
c001d608:	53                   	push   ebx
c001d609:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001d60f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001d612:	5b                   	pop    ebx
c001d613:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001d618:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001d61b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001d61e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d621:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001d624:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001d627:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001d62a:	81 c4 08 00 00 00    	add    esp,0x8
c001d630:	5e                   	pop    esi
c001d631:	5b                   	pop    ebx
c001d632:	59                   	pop    ecx
c001d633:	5a                   	pop    edx
c001d634:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001d637:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001d63a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001d63d:	52                   	push   edx
c001d63e:	51                   	push   ecx
c001d63f:	53                   	push   ebx
c001d640:	56                   	push   esi
c001d641:	81 ec 08 00 00 00    	sub    esp,0x8
c001d647:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001d64a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001d64d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001d650:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d653:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d656:	60                   	pusha  
c001d657:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001d65d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001d660:	89 e3                	mov    ebx,esp
c001d662:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001d665:	52                   	push   edx
c001d666:	68 86 d6 01 c0       	push   0xc001d686
c001d66b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001d66e:	89 dc                	mov    esp,ebx
c001d670:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001d673:	68 23 00 00 00       	push   0x23
c001d678:	51                   	push   ecx
c001d679:	68 02 02 00 00       	push   0x202
c001d67e:	68 1b 00 00 00       	push   0x1b
c001d683:	ff 36                	push   DWORD PTR [esi]
c001d685:	cf                   	iret   

c001d686 <finishSignal>:
c001d686:	cd 0f                	int    0xf

c001d688 <finishSignal2>:
c001d688:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001d68e:	e8 f1 32 ff ff       	call   c0010984 <KiFinishSignalZ>
c001d693:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001d699:	68 23 00 00 00       	push   0x23
c001d69e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001d6a1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001d6a4:	68 1b 00 00 00       	push   0x1b
c001d6a9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001d6ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d6af:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001d6b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001d6b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d6b8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001d6bb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001d6be:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001d6c1:	cf                   	iret   

c001d6c2 <skipSignals>:
c001d6c2:	61                   	popa   
c001d6c3:	81 c4 08 00 00 00    	add    esp,0x8
c001d6c9:	cf                   	iret   
c001d6ca:	90                   	nop
c001d6cb:	90                   	nop

c001d6cc <irq16>:
c001d6cc:	fa                   	cli    
c001d6cd:	6a 00                	push   0x0
c001d6cf:	6a 30                	push   0x30
c001d6d1:	e9 c0 fe ff ff       	jmp    c001d596 <int_common_stub>

c001d6d6 <irq17>:
c001d6d6:	fa                   	cli    
c001d6d7:	6a 00                	push   0x0
c001d6d9:	6a 31                	push   0x31
c001d6db:	e9 b6 fe ff ff       	jmp    c001d596 <int_common_stub>

c001d6e0 <irq18>:
c001d6e0:	fa                   	cli    
c001d6e1:	6a 00                	push   0x0
c001d6e3:	6a 32                	push   0x32
c001d6e5:	e9 ac fe ff ff       	jmp    c001d596 <int_common_stub>

c001d6ea <irq19>:
c001d6ea:	fa                   	cli    
c001d6eb:	6a 00                	push   0x0
c001d6ed:	6a 33                	push   0x33
c001d6ef:	e9 a2 fe ff ff       	jmp    c001d596 <int_common_stub>

c001d6f4 <irq20>:
c001d6f4:	fa                   	cli    
c001d6f5:	6a 00                	push   0x0
c001d6f7:	6a 34                	push   0x34
c001d6f9:	e9 98 fe ff ff       	jmp    c001d596 <int_common_stub>

c001d6fe <irq21>:
c001d6fe:	fa                   	cli    
c001d6ff:	6a 00                	push   0x0
c001d701:	6a 35                	push   0x35
c001d703:	e9 8e fe ff ff       	jmp    c001d596 <int_common_stub>

c001d708 <irq22>:
c001d708:	fa                   	cli    
c001d709:	6a 00                	push   0x0
c001d70b:	6a 36                	push   0x36
c001d70d:	e9 84 fe ff ff       	jmp    c001d596 <int_common_stub>

c001d712 <irq23>:
c001d712:	fa                   	cli    
c001d713:	6a 00                	push   0x0
c001d715:	6a 37                	push   0x37
c001d717:	e9 7a fe ff ff       	jmp    c001d596 <int_common_stub>
c001d71c:	66 90                	xchg   ax,ax
c001d71e:	66 90                	xchg   ax,ax

c001d720 <i386GetRDRAND>:
c001d720:	b9 64 00 00 00       	mov    ecx,0x64

c001d725 <retry>:
c001d725:	0f c7 f0             	rdrand eax
c001d728:	72 05                	jb     c001d72f <retry.done>
c001d72a:	e2 f9                	loop   c001d725 <retry>

c001d72c <retry.fail>:
c001d72c:	31 c0                	xor    eax,eax
c001d72e:	c3                   	ret    

c001d72f <retry.done>:
c001d72f:	c3                   	ret    

c001d730 <absolutelyNoChanceInHell>:
c001d730:	b8 01 00 00 00       	mov    eax,0x1
c001d735:	0f a2                	cpuid  
c001d737:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001d73d:	74 06                	je     c001d745 <sseDetect.noSSE>
c001d73f:	b8 01 00 00 00       	mov    eax,0x1
c001d744:	c3                   	ret    

c001d745 <sseDetect.noSSE>:
c001d745:	31 c0                	xor    eax,eax
c001d747:	c3                   	ret    

c001d748 <sseSave>:
c001d748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d74c:	0f ae 00             	fxsave [eax]
c001d74f:	c3                   	ret    

c001d750 <sseLoad>:
c001d750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d754:	0f ae 08             	fxrstor [eax]
c001d757:	c3                   	ret    

c001d758 <sseInit>:
c001d758:	e8 42 00 00 00       	call   c001d79f <x87Init>
c001d75d:	0f 20 e0             	mov    eax,cr4
c001d760:	66 0d 00 06          	or     ax,0x600
c001d764:	0f 22 e0             	mov    cr4,eax
c001d767:	c3                   	ret    

c001d768 <sseClose>:
c001d768:	c3                   	ret    
c001d769:	66 90                	xchg   ax,ax
c001d76b:	66 90                	xchg   ax,ax
c001d76d:	66 90                	xchg   ax,ax
c001d76f:	90                   	nop

c001d770 <value_37F>:
c001d770:	7f 03                	jg     c001d775 <value_37A+0x1>

c001d772 <value_37E>:
c001d772:	7e 03                	jle    c001d777 <x87Detect+0x1>

c001d774 <value_37A>:
c001d774:	7a 03                	jp     c001d779 <x87Detect+0x3>

c001d776 <x87Detect>:
c001d776:	b8 01 00 00 00       	mov    eax,0x1
c001d77b:	0f a2                	cpuid  
c001d77d:	f7 c2 01 00 00 00    	test   edx,0x1
c001d783:	74 06                	je     c001d78b <x87Detect.nox87>
c001d785:	b8 01 00 00 00       	mov    eax,0x1
c001d78a:	c3                   	ret    

c001d78b <x87Detect.nox87>:
c001d78b:	b8 00 00 00 00       	mov    eax,0x0
c001d790:	c3                   	ret    

c001d791 <x87Save>:
c001d791:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d795:	dd 30                	fnsave [eax]
c001d797:	c3                   	ret    

c001d798 <x87Load>:
c001d798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d79c:	dd 20                	frstor [eax]
c001d79e:	c3                   	ret    

c001d79f <x87Init>:
c001d79f:	0f 20 c0             	mov    eax,cr0
c001d7a2:	66 25 fb ff          	and    ax,0xfffb
c001d7a6:	66 0d 22 00          	or     ax,0x22
c001d7aa:	0f 22 c0             	mov    cr0,eax
c001d7ad:	db e3                	fninit 
c001d7af:	0f 06                	clts   
c001d7b1:	d9 2d 74 d7 01 c0    	fldcw  WORD PTR ds:0xc001d774
c001d7b7:	c3                   	ret    

c001d7b8 <x87Close>:
c001d7b8:	c3                   	ret    
c001d7b9:	66 90                	xchg   ax,ax
c001d7bb:	90                   	nop

c001d7bc <__do_global_ctors_aux>:
c001d7bc:	a1 6c e7 01 c0       	mov    eax,ds:0xc001e76c
c001d7c1:	83 f8 ff             	cmp    eax,0xffffffff
c001d7c4:	74 1a                	je     c001d7e0 <__do_global_ctors_aux+0x24>
c001d7c6:	55                   	push   ebp
c001d7c7:	89 e5                	mov    ebp,esp
c001d7c9:	53                   	push   ebx
c001d7ca:	52                   	push   edx
c001d7cb:	bb 6c e7 01 c0       	mov    ebx,0xc001e76c
c001d7d0:	ff d0                	call   eax
c001d7d2:	83 eb 04             	sub    ebx,0x4
c001d7d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d7d7:	83 f8 ff             	cmp    eax,0xffffffff
c001d7da:	75 f4                	jne    c001d7d0 <__do_global_ctors_aux+0x14>
c001d7dc:	58                   	pop    eax
c001d7dd:	5b                   	pop    ebx
c001d7de:	5d                   	pop    ebp
c001d7df:	c3                   	ret    
c001d7e0:	c3                   	ret    
c001d7e1:	66 90                	xchg   ax,ax
c001d7e3:	90                   	nop

c001d7e4 <__divdi3>:
c001d7e4:	55                   	push   ebp
c001d7e5:	57                   	push   edi
c001d7e6:	56                   	push   esi
c001d7e7:	53                   	push   ebx
c001d7e8:	83 ec 1c             	sub    esp,0x1c
c001d7eb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d7ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d7f3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001d7f6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001d7fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d7fe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d802:	85 db                	test   ebx,ebx
c001d804:	0f 88 8e 00 00 00    	js     c001d898 <__divdi3+0xb4>
c001d80a:	89 dd                	mov    ebp,ebx
c001d80c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d814:	89 d3                	mov    ebx,edx
c001d816:	85 d2                	test   edx,edx
c001d818:	79 0d                	jns    c001d827 <__divdi3+0x43>
c001d81a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001d81e:	f7 d8                	neg    eax
c001d820:	83 d2 00             	adc    edx,0x0
c001d823:	f7 da                	neg    edx
c001d825:	89 d3                	mov    ebx,edx
c001d827:	89 c7                	mov    edi,eax
c001d829:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d82c:	85 db                	test   ebx,ebx
c001d82e:	75 48                	jne    c001d878 <__divdi3+0x94>
c001d830:	39 ef                	cmp    edi,ebp
c001d832:	76 24                	jbe    c001d858 <__divdi3+0x74>
c001d834:	89 ea                	mov    edx,ebp
c001d836:	f7 f7                	div    edi
c001d838:	89 c1                	mov    ecx,eax
c001d83a:	31 f6                	xor    esi,esi
c001d83c:	89 c8                	mov    eax,ecx
c001d83e:	89 f2                	mov    edx,esi
c001d840:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d844:	85 c9                	test   ecx,ecx
c001d846:	74 07                	je     c001d84f <__divdi3+0x6b>
c001d848:	f7 d8                	neg    eax
c001d84a:	83 d2 00             	adc    edx,0x0
c001d84d:	f7 da                	neg    edx
c001d84f:	83 c4 1c             	add    esp,0x1c
c001d852:	5b                   	pop    ebx
c001d853:	5e                   	pop    esi
c001d854:	5f                   	pop    edi
c001d855:	5d                   	pop    ebp
c001d856:	c3                   	ret    
c001d857:	90                   	nop
c001d858:	85 ff                	test   edi,edi
c001d85a:	75 0b                	jne    c001d867 <__divdi3+0x83>
c001d85c:	b8 01 00 00 00       	mov    eax,0x1
c001d861:	31 d2                	xor    edx,edx
c001d863:	f7 f3                	div    ebx
c001d865:	89 c7                	mov    edi,eax
c001d867:	31 d2                	xor    edx,edx
c001d869:	89 e8                	mov    eax,ebp
c001d86b:	f7 f7                	div    edi
c001d86d:	89 c6                	mov    esi,eax
c001d86f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001d872:	f7 f7                	div    edi
c001d874:	89 c1                	mov    ecx,eax
c001d876:	eb c4                	jmp    c001d83c <__divdi3+0x58>
c001d878:	39 eb                	cmp    ebx,ebp
c001d87a:	77 3c                	ja     c001d8b8 <__divdi3+0xd4>
c001d87c:	0f bd f3             	bsr    esi,ebx
c001d87f:	83 f6 1f             	xor    esi,0x1f
c001d882:	75 40                	jne    c001d8c4 <__divdi3+0xe0>
c001d884:	39 eb                	cmp    ebx,ebp
c001d886:	72 09                	jb     c001d891 <__divdi3+0xad>
c001d888:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001d88b:	0f 87 97 00 00 00    	ja     c001d928 <__divdi3+0x144>
c001d891:	b9 01 00 00 00       	mov    ecx,0x1
c001d896:	eb a4                	jmp    c001d83c <__divdi3+0x58>
c001d898:	f7 d9                	neg    ecx
c001d89a:	83 d3 00             	adc    ebx,0x0
c001d89d:	f7 db                	neg    ebx
c001d89f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001d8a2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001d8a6:	89 dd                	mov    ebp,ebx
c001d8a8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001d8b0:	e9 5f ff ff ff       	jmp    c001d814 <__divdi3+0x30>
c001d8b5:	8d 76 00             	lea    esi,[esi+0x0]
c001d8b8:	31 f6                	xor    esi,esi
c001d8ba:	31 c9                	xor    ecx,ecx
c001d8bc:	e9 7b ff ff ff       	jmp    c001d83c <__divdi3+0x58>
c001d8c1:	8d 76 00             	lea    esi,[esi+0x0]
c001d8c4:	b8 20 00 00 00       	mov    eax,0x20
c001d8c9:	29 f0                	sub    eax,esi
c001d8cb:	89 f1                	mov    ecx,esi
c001d8cd:	d3 e3                	shl    ebx,cl
c001d8cf:	89 fa                	mov    edx,edi
c001d8d1:	88 c1                	mov    cl,al
c001d8d3:	d3 ea                	shr    edx,cl
c001d8d5:	09 da                	or     edx,ebx
c001d8d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d8db:	89 f1                	mov    ecx,esi
c001d8dd:	d3 e7                	shl    edi,cl
c001d8df:	89 eb                	mov    ebx,ebp
c001d8e1:	88 c1                	mov    cl,al
c001d8e3:	d3 eb                	shr    ebx,cl
c001d8e5:	89 f1                	mov    ecx,esi
c001d8e7:	d3 e5                	shl    ebp,cl
c001d8e9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001d8ec:	88 c1                	mov    cl,al
c001d8ee:	d3 ea                	shr    edx,cl
c001d8f0:	09 d5                	or     ebp,edx
c001d8f2:	89 e8                	mov    eax,ebp
c001d8f4:	89 da                	mov    edx,ebx
c001d8f6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001d8fa:	89 d3                	mov    ebx,edx
c001d8fc:	89 c5                	mov    ebp,eax
c001d8fe:	f7 e7                	mul    edi
c001d900:	39 d3                	cmp    ebx,edx
c001d902:	72 18                	jb     c001d91c <__divdi3+0x138>
c001d904:	74 0a                	je     c001d910 <__divdi3+0x12c>
c001d906:	89 e9                	mov    ecx,ebp
c001d908:	31 f6                	xor    esi,esi
c001d90a:	e9 2d ff ff ff       	jmp    c001d83c <__divdi3+0x58>
c001d90f:	90                   	nop
c001d910:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d913:	89 f1                	mov    ecx,esi
c001d915:	d3 e7                	shl    edi,cl
c001d917:	39 c7                	cmp    edi,eax
c001d919:	73 eb                	jae    c001d906 <__divdi3+0x122>
c001d91b:	90                   	nop
c001d91c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001d91f:	31 f6                	xor    esi,esi
c001d921:	e9 16 ff ff ff       	jmp    c001d83c <__divdi3+0x58>
c001d926:	66 90                	xchg   ax,ax
c001d928:	31 c9                	xor    ecx,ecx
c001d92a:	e9 0d ff ff ff       	jmp    c001d83c <__divdi3+0x58>
c001d92f:	90                   	nop

c001d930 <__moddi3>:
c001d930:	55                   	push   ebp
c001d931:	57                   	push   edi
c001d932:	56                   	push   esi
c001d933:	53                   	push   ebx
c001d934:	83 ec 2c             	sub    esp,0x2c
c001d937:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001d93b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001d93f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d943:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001d947:	85 db                	test   ebx,ebx
c001d949:	0f 88 85 00 00 00    	js     c001d9d4 <__moddi3+0xa4>
c001d94f:	89 de                	mov    esi,ebx
c001d951:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d959:	89 d7                	mov    edi,edx
c001d95b:	85 d2                	test   edx,edx
c001d95d:	79 09                	jns    c001d968 <__moddi3+0x38>
c001d95f:	f7 d8                	neg    eax
c001d961:	83 d2 00             	adc    edx,0x0
c001d964:	f7 da                	neg    edx
c001d966:	89 d7                	mov    edi,edx
c001d968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d96c:	89 cd                	mov    ebp,ecx
c001d96e:	85 ff                	test   edi,edi
c001d970:	75 52                	jne    c001d9c4 <__moddi3+0x94>
c001d972:	89 c3                	mov    ebx,eax
c001d974:	39 f0                	cmp    eax,esi
c001d976:	76 24                	jbe    c001d99c <__moddi3+0x6c>
c001d978:	89 c8                	mov    eax,ecx
c001d97a:	89 f2                	mov    edx,esi
c001d97c:	f7 f3                	div    ebx
c001d97e:	89 d6                	mov    esi,edx
c001d980:	89 f0                	mov    eax,esi
c001d982:	31 d2                	xor    edx,edx
c001d984:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d988:	85 c9                	test   ecx,ecx
c001d98a:	74 07                	je     c001d993 <__moddi3+0x63>
c001d98c:	f7 d8                	neg    eax
c001d98e:	83 d2 00             	adc    edx,0x0
c001d991:	f7 da                	neg    edx
c001d993:	83 c4 2c             	add    esp,0x2c
c001d996:	5b                   	pop    ebx
c001d997:	5e                   	pop    esi
c001d998:	5f                   	pop    edi
c001d999:	5d                   	pop    ebp
c001d99a:	c3                   	ret    
c001d99b:	90                   	nop
c001d99c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001d9a0:	85 db                	test   ebx,ebx
c001d9a2:	75 0d                	jne    c001d9b1 <__moddi3+0x81>
c001d9a4:	b8 01 00 00 00       	mov    eax,0x1
c001d9a9:	31 d2                	xor    edx,edx
c001d9ab:	f7 f7                	div    edi
c001d9ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9b1:	89 f0                	mov    eax,esi
c001d9b3:	31 d2                	xor    edx,edx
c001d9b5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d9b9:	f7 f7                	div    edi
c001d9bb:	89 e8                	mov    eax,ebp
c001d9bd:	f7 f7                	div    edi
c001d9bf:	89 d6                	mov    esi,edx
c001d9c1:	eb bd                	jmp    c001d980 <__moddi3+0x50>
c001d9c3:	90                   	nop
c001d9c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d9c8:	39 f7                	cmp    edi,esi
c001d9ca:	76 20                	jbe    c001d9ec <__moddi3+0xbc>
c001d9cc:	89 c8                	mov    eax,ecx
c001d9ce:	89 f2                	mov    edx,esi
c001d9d0:	eb b2                	jmp    c001d984 <__moddi3+0x54>
c001d9d2:	66 90                	xchg   ax,ax
c001d9d4:	f7 d9                	neg    ecx
c001d9d6:	83 d3 00             	adc    ebx,0x0
c001d9d9:	f7 db                	neg    ebx
c001d9db:	89 de                	mov    esi,ebx
c001d9dd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001d9e5:	e9 6f ff ff ff       	jmp    c001d959 <__moddi3+0x29>
c001d9ea:	66 90                	xchg   ax,ax
c001d9ec:	0f bd c7             	bsr    eax,edi
c001d9ef:	83 f0 1f             	xor    eax,0x1f
c001d9f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d9f6:	75 24                	jne    c001da1c <__moddi3+0xec>
c001d9f8:	39 f7                	cmp    edi,esi
c001d9fa:	72 06                	jb     c001da02 <__moddi3+0xd2>
c001d9fc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001da00:	77 0c                	ja     c001da0e <__moddi3+0xde>
c001da02:	89 e9                	mov    ecx,ebp
c001da04:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001da08:	19 fe                	sbb    esi,edi
c001da0a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001da0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001da12:	89 f2                	mov    edx,esi
c001da14:	e9 6b ff ff ff       	jmp    c001d984 <__moddi3+0x54>
c001da19:	8d 76 00             	lea    esi,[esi+0x0]
c001da1c:	b8 20 00 00 00       	mov    eax,0x20
c001da21:	89 c2                	mov    edx,eax
c001da23:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001da27:	29 da                	sub    edx,ebx
c001da29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001da2d:	88 d9                	mov    cl,bl
c001da2f:	d3 e7                	shl    edi,cl
c001da31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da35:	88 d1                	mov    cl,dl
c001da37:	d3 e8                	shr    eax,cl
c001da39:	09 c7                	or     edi,eax
c001da3b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001da3f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001da43:	89 d8                	mov    eax,ebx
c001da45:	88 d9                	mov    cl,bl
c001da47:	d3 e7                	shl    edi,cl
c001da49:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001da4d:	89 f3                	mov    ebx,esi
c001da4f:	88 d1                	mov    cl,dl
c001da51:	d3 eb                	shr    ebx,cl
c001da53:	89 c7                	mov    edi,eax
c001da55:	88 c1                	mov    cl,al
c001da57:	d3 e6                	shl    esi,cl
c001da59:	89 e8                	mov    eax,ebp
c001da5b:	88 d1                	mov    cl,dl
c001da5d:	d3 e8                	shr    eax,cl
c001da5f:	09 f0                	or     eax,esi
c001da61:	89 f9                	mov    ecx,edi
c001da63:	d3 e5                	shl    ebp,cl
c001da65:	89 da                	mov    edx,ebx
c001da67:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001da6b:	89 d3                	mov    ebx,edx
c001da6d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001da71:	89 c6                	mov    esi,eax
c001da73:	89 d1                	mov    ecx,edx
c001da75:	39 d3                	cmp    ebx,edx
c001da77:	72 27                	jb     c001daa0 <__moddi3+0x170>
c001da79:	74 21                	je     c001da9c <__moddi3+0x16c>
c001da7b:	29 f5                	sub    ebp,esi
c001da7d:	19 cb                	sbb    ebx,ecx
c001da7f:	89 de                	mov    esi,ebx
c001da81:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001da85:	d3 e6                	shl    esi,cl
c001da87:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001da8b:	89 f9                	mov    ecx,edi
c001da8d:	d3 ed                	shr    ebp,cl
c001da8f:	09 ee                	or     esi,ebp
c001da91:	89 f0                	mov    eax,esi
c001da93:	d3 eb                	shr    ebx,cl
c001da95:	89 da                	mov    edx,ebx
c001da97:	e9 e8 fe ff ff       	jmp    c001d984 <__moddi3+0x54>
c001da9c:	39 c5                	cmp    ebp,eax
c001da9e:	73 db                	jae    c001da7b <__moddi3+0x14b>
c001daa0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001daa4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001daa8:	89 d1                	mov    ecx,edx
c001daaa:	89 c6                	mov    esi,eax
c001daac:	eb cd                	jmp    c001da7b <__moddi3+0x14b>
c001daae:	66 90                	xchg   ax,ax

c001dab0 <__udivdi3>:
c001dab0:	55                   	push   ebp
c001dab1:	57                   	push   edi
c001dab2:	56                   	push   esi
c001dab3:	53                   	push   ebx
c001dab4:	83 ec 1c             	sub    esp,0x1c
c001dab7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001dabb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001dabf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001dac3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dac7:	85 d2                	test   edx,edx
c001dac9:	75 41                	jne    c001db0c <__udivdi3+0x5c>
c001dacb:	39 f7                	cmp    edi,esi
c001dacd:	76 15                	jbe    c001dae4 <__udivdi3+0x34>
c001dacf:	89 e8                	mov    eax,ebp
c001dad1:	89 f2                	mov    edx,esi
c001dad3:	f7 f7                	div    edi
c001dad5:	31 db                	xor    ebx,ebx
c001dad7:	89 da                	mov    edx,ebx
c001dad9:	83 c4 1c             	add    esp,0x1c
c001dadc:	5b                   	pop    ebx
c001dadd:	5e                   	pop    esi
c001dade:	5f                   	pop    edi
c001dadf:	5d                   	pop    ebp
c001dae0:	c3                   	ret    
c001dae1:	8d 76 00             	lea    esi,[esi+0x0]
c001dae4:	89 f9                	mov    ecx,edi
c001dae6:	85 ff                	test   edi,edi
c001dae8:	75 0b                	jne    c001daf5 <__udivdi3+0x45>
c001daea:	b8 01 00 00 00       	mov    eax,0x1
c001daef:	31 d2                	xor    edx,edx
c001daf1:	f7 f7                	div    edi
c001daf3:	89 c1                	mov    ecx,eax
c001daf5:	31 d2                	xor    edx,edx
c001daf7:	89 f0                	mov    eax,esi
c001daf9:	f7 f1                	div    ecx
c001dafb:	89 c3                	mov    ebx,eax
c001dafd:	89 e8                	mov    eax,ebp
c001daff:	f7 f1                	div    ecx
c001db01:	89 da                	mov    edx,ebx
c001db03:	83 c4 1c             	add    esp,0x1c
c001db06:	5b                   	pop    ebx
c001db07:	5e                   	pop    esi
c001db08:	5f                   	pop    edi
c001db09:	5d                   	pop    ebp
c001db0a:	c3                   	ret    
c001db0b:	90                   	nop
c001db0c:	39 f2                	cmp    edx,esi
c001db0e:	77 1c                	ja     c001db2c <__udivdi3+0x7c>
c001db10:	0f bd da             	bsr    ebx,edx
c001db13:	83 f3 1f             	xor    ebx,0x1f
c001db16:	75 24                	jne    c001db3c <__udivdi3+0x8c>
c001db18:	39 f2                	cmp    edx,esi
c001db1a:	72 08                	jb     c001db24 <__udivdi3+0x74>
c001db1c:	39 ef                	cmp    edi,ebp
c001db1e:	0f 87 84 00 00 00    	ja     c001dba8 <__udivdi3+0xf8>
c001db24:	b8 01 00 00 00       	mov    eax,0x1
c001db29:	eb ac                	jmp    c001dad7 <__udivdi3+0x27>
c001db2b:	90                   	nop
c001db2c:	31 db                	xor    ebx,ebx
c001db2e:	31 c0                	xor    eax,eax
c001db30:	89 da                	mov    edx,ebx
c001db32:	83 c4 1c             	add    esp,0x1c
c001db35:	5b                   	pop    ebx
c001db36:	5e                   	pop    esi
c001db37:	5f                   	pop    edi
c001db38:	5d                   	pop    ebp
c001db39:	c3                   	ret    
c001db3a:	66 90                	xchg   ax,ax
c001db3c:	b8 20 00 00 00       	mov    eax,0x20
c001db41:	29 d8                	sub    eax,ebx
c001db43:	88 d9                	mov    cl,bl
c001db45:	d3 e2                	shl    edx,cl
c001db47:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001db4b:	89 fa                	mov    edx,edi
c001db4d:	88 c1                	mov    cl,al
c001db4f:	d3 ea                	shr    edx,cl
c001db51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001db55:	09 d1                	or     ecx,edx
c001db57:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001db5b:	88 d9                	mov    cl,bl
c001db5d:	d3 e7                	shl    edi,cl
c001db5f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001db63:	89 f7                	mov    edi,esi
c001db65:	88 c1                	mov    cl,al
c001db67:	d3 ef                	shr    edi,cl
c001db69:	88 d9                	mov    cl,bl
c001db6b:	d3 e6                	shl    esi,cl
c001db6d:	89 ea                	mov    edx,ebp
c001db6f:	88 c1                	mov    cl,al
c001db71:	d3 ea                	shr    edx,cl
c001db73:	09 d6                	or     esi,edx
c001db75:	89 f0                	mov    eax,esi
c001db77:	89 fa                	mov    edx,edi
c001db79:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001db7d:	89 d7                	mov    edi,edx
c001db7f:	89 c6                	mov    esi,eax
c001db81:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001db85:	39 d7                	cmp    edi,edx
c001db87:	72 13                	jb     c001db9c <__udivdi3+0xec>
c001db89:	74 09                	je     c001db94 <__udivdi3+0xe4>
c001db8b:	89 f0                	mov    eax,esi
c001db8d:	31 db                	xor    ebx,ebx
c001db8f:	e9 43 ff ff ff       	jmp    c001dad7 <__udivdi3+0x27>
c001db94:	88 d9                	mov    cl,bl
c001db96:	d3 e5                	shl    ebp,cl
c001db98:	39 c5                	cmp    ebp,eax
c001db9a:	73 ef                	jae    c001db8b <__udivdi3+0xdb>
c001db9c:	8d 46 ff             	lea    eax,[esi-0x1]
c001db9f:	31 db                	xor    ebx,ebx
c001dba1:	e9 31 ff ff ff       	jmp    c001dad7 <__udivdi3+0x27>
c001dba6:	66 90                	xchg   ax,ax
c001dba8:	31 c0                	xor    eax,eax
c001dbaa:	e9 28 ff ff ff       	jmp    c001dad7 <__udivdi3+0x27>
c001dbaf:	90                   	nop

c001dbb0 <__umoddi3>:
c001dbb0:	55                   	push   ebp
c001dbb1:	57                   	push   edi
c001dbb2:	56                   	push   esi
c001dbb3:	53                   	push   ebx
c001dbb4:	83 ec 1c             	sub    esp,0x1c
c001dbb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dbbb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dbbf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001dbc3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001dbc7:	89 da                	mov    edx,ebx
c001dbc9:	85 c0                	test   eax,eax
c001dbcb:	75 37                	jne    c001dc04 <__umoddi3+0x54>
c001dbcd:	39 df                	cmp    edi,ebx
c001dbcf:	76 13                	jbe    c001dbe4 <__umoddi3+0x34>
c001dbd1:	89 f0                	mov    eax,esi
c001dbd3:	f7 f7                	div    edi
c001dbd5:	89 d0                	mov    eax,edx
c001dbd7:	31 d2                	xor    edx,edx
c001dbd9:	83 c4 1c             	add    esp,0x1c
c001dbdc:	5b                   	pop    ebx
c001dbdd:	5e                   	pop    esi
c001dbde:	5f                   	pop    edi
c001dbdf:	5d                   	pop    ebp
c001dbe0:	c3                   	ret    
c001dbe1:	8d 76 00             	lea    esi,[esi+0x0]
c001dbe4:	89 fd                	mov    ebp,edi
c001dbe6:	85 ff                	test   edi,edi
c001dbe8:	75 0b                	jne    c001dbf5 <__umoddi3+0x45>
c001dbea:	b8 01 00 00 00       	mov    eax,0x1
c001dbef:	31 d2                	xor    edx,edx
c001dbf1:	f7 f7                	div    edi
c001dbf3:	89 c5                	mov    ebp,eax
c001dbf5:	89 d8                	mov    eax,ebx
c001dbf7:	31 d2                	xor    edx,edx
c001dbf9:	f7 f5                	div    ebp
c001dbfb:	89 f0                	mov    eax,esi
c001dbfd:	f7 f5                	div    ebp
c001dbff:	89 d0                	mov    eax,edx
c001dc01:	eb d4                	jmp    c001dbd7 <__umoddi3+0x27>
c001dc03:	90                   	nop
c001dc04:	89 f1                	mov    ecx,esi
c001dc06:	39 d8                	cmp    eax,ebx
c001dc08:	76 0a                	jbe    c001dc14 <__umoddi3+0x64>
c001dc0a:	89 f0                	mov    eax,esi
c001dc0c:	83 c4 1c             	add    esp,0x1c
c001dc0f:	5b                   	pop    ebx
c001dc10:	5e                   	pop    esi
c001dc11:	5f                   	pop    edi
c001dc12:	5d                   	pop    ebp
c001dc13:	c3                   	ret    
c001dc14:	0f bd e8             	bsr    ebp,eax
c001dc17:	83 f5 1f             	xor    ebp,0x1f
c001dc1a:	75 1c                	jne    c001dc38 <__umoddi3+0x88>
c001dc1c:	39 d8                	cmp    eax,ebx
c001dc1e:	72 04                	jb     c001dc24 <__umoddi3+0x74>
c001dc20:	39 f7                	cmp    edi,esi
c001dc22:	77 08                	ja     c001dc2c <__umoddi3+0x7c>
c001dc24:	89 da                	mov    edx,ebx
c001dc26:	29 fe                	sub    esi,edi
c001dc28:	19 c2                	sbb    edx,eax
c001dc2a:	89 f1                	mov    ecx,esi
c001dc2c:	89 c8                	mov    eax,ecx
c001dc2e:	83 c4 1c             	add    esp,0x1c
c001dc31:	5b                   	pop    ebx
c001dc32:	5e                   	pop    esi
c001dc33:	5f                   	pop    edi
c001dc34:	5d                   	pop    ebp
c001dc35:	c3                   	ret    
c001dc36:	66 90                	xchg   ax,ax
c001dc38:	ba 20 00 00 00       	mov    edx,0x20
c001dc3d:	29 ea                	sub    edx,ebp
c001dc3f:	89 e9                	mov    ecx,ebp
c001dc41:	d3 e0                	shl    eax,cl
c001dc43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc47:	89 f8                	mov    eax,edi
c001dc49:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001dc4d:	88 d1                	mov    cl,dl
c001dc4f:	d3 e8                	shr    eax,cl
c001dc51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dc55:	09 c1                	or     ecx,eax
c001dc57:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001dc5b:	89 e9                	mov    ecx,ebp
c001dc5d:	d3 e7                	shl    edi,cl
c001dc5f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001dc63:	89 d8                	mov    eax,ebx
c001dc65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dc69:	88 d1                	mov    cl,dl
c001dc6b:	d3 e8                	shr    eax,cl
c001dc6d:	89 c7                	mov    edi,eax
c001dc6f:	89 e9                	mov    ecx,ebp
c001dc71:	d3 e3                	shl    ebx,cl
c001dc73:	89 f0                	mov    eax,esi
c001dc75:	88 d1                	mov    cl,dl
c001dc77:	d3 e8                	shr    eax,cl
c001dc79:	09 d8                	or     eax,ebx
c001dc7b:	89 e9                	mov    ecx,ebp
c001dc7d:	d3 e6                	shl    esi,cl
c001dc7f:	89 f3                	mov    ebx,esi
c001dc81:	89 fa                	mov    edx,edi
c001dc83:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001dc87:	89 d1                	mov    ecx,edx
c001dc89:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001dc8d:	89 c6                	mov    esi,eax
c001dc8f:	89 d7                	mov    edi,edx
c001dc91:	39 d1                	cmp    ecx,edx
c001dc93:	72 27                	jb     c001dcbc <__umoddi3+0x10c>
c001dc95:	74 21                	je     c001dcb8 <__umoddi3+0x108>
c001dc97:	89 ca                	mov    edx,ecx
c001dc99:	29 f3                	sub    ebx,esi
c001dc9b:	19 fa                	sbb    edx,edi
c001dc9d:	89 d0                	mov    eax,edx
c001dc9f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001dca3:	d3 e0                	shl    eax,cl
c001dca5:	89 e9                	mov    ecx,ebp
c001dca7:	d3 eb                	shr    ebx,cl
c001dca9:	09 d8                	or     eax,ebx
c001dcab:	d3 ea                	shr    edx,cl
c001dcad:	83 c4 1c             	add    esp,0x1c
c001dcb0:	5b                   	pop    ebx
c001dcb1:	5e                   	pop    esi
c001dcb2:	5f                   	pop    edi
c001dcb3:	5d                   	pop    ebp
c001dcb4:	c3                   	ret    
c001dcb5:	8d 76 00             	lea    esi,[esi+0x0]
c001dcb8:	39 c3                	cmp    ebx,eax
c001dcba:	73 db                	jae    c001dc97 <__umoddi3+0xe7>
c001dcbc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001dcc0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001dcc4:	89 d7                	mov    edi,edx
c001dcc6:	89 c6                	mov    esi,eax
c001dcc8:	eb cd                	jmp    c001dc97 <__umoddi3+0xe7>

Disassembly of section .init:

c001dcca <_init>:
c001dcca:	55                   	push   ebp
c001dccb:	89 e5                	mov    ebp,esp
c001dccd:	e8 22 24 fe ff       	call   c00000f4 <frame_dummy>
c001dcd2:	e8 e5 fa ff ff       	call   c001d7bc <__do_global_ctors_aux>
c001dcd7:	5d                   	pop    ebp
c001dcd8:	c3                   	ret    

Disassembly of section .fini:

c001dcd9 <_fini>:
c001dcd9:	55                   	push   ebp
c001dcda:	89 e5                	mov    ebp,esp
c001dcdc:	e8 a3 23 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001dce1:	5d                   	pop    ebp
c001dce2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001dce4 <Computer::~Computer()>:
c001dce4:	83 ec 0c             	sub    esp,0xc
c001dce7:	ba f4 ef 01 c0       	mov    edx,0xc001eff4
c001dcec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcf0:	89 10                	mov    DWORD PTR [eax],edx
c001dcf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcf6:	83 ec 0c             	sub    esp,0xc
c001dcf9:	50                   	push   eax
c001dcfa:	e8 3b dc fe ff       	call   c000b93a <Device::~Device()>
c001dcff:	83 c4 10             	add    esp,0x10
c001dd02:	90                   	nop
c001dd03:	83 c4 0c             	add    esp,0xc
c001dd06:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001dd08 <Computer::~Computer()>:
c001dd08:	83 ec 0c             	sub    esp,0xc
c001dd0b:	83 ec 0c             	sub    esp,0xc
c001dd0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd12:	e8 cd ff ff ff       	call   c001dce4 <Computer::~Computer()>
c001dd17:	83 c4 10             	add    esp,0x10
c001dd1a:	83 ec 08             	sub    esp,0x8
c001dd1d:	68 70 01 00 00       	push   0x170
c001dd22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dd26:	e8 d9 c7 fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001dd2b:	83 c4 10             	add    esp,0x10
c001dd2e:	83 c4 0c             	add    esp,0xc
c001dd31:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001dd32 <idleCommon()>:
c001dd32:	83 ec 0c             	sub    esp,0xc
c001dd35:	fa                   	cli    
c001dd36:	ff 05 68 71 02 c0    	inc    DWORD PTR ds:0xc0027168
c001dd3c:	e8 6b 6a ff ff       	call   c00147ac <schedule()>
c001dd41:	a1 68 71 02 c0       	mov    eax,ds:0xc0027168
c001dd46:	48                   	dec    eax
c001dd47:	a3 68 71 02 c0       	mov    ds:0xc0027168,eax
c001dd4c:	75 01                	jne    c001dd4f <idleCommon()+0x1d>
c001dd4e:	fb                   	sti    
c001dd4f:	83 c4 0c             	add    esp,0xc
c001dd52:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001dd54 <LinkedList<UnixFile>::~LinkedList()>:
c001dd54:	90                   	nop
c001dd55:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001dd56 <LinkedList<UnixFile>::LinkedList()>:
c001dd56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001dd60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd64:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dd6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd6f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dd76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd7a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001dd80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd84:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dd8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dd8f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dd96:	90                   	nop
c001dd97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001dd98 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001dd98:	83 ec 0c             	sub    esp,0xc
c001dd9b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001dda0:	75 10                	jne    c001ddb2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001dda2:	83 ec 0c             	sub    esp,0xc
c001dda5:	68 08 f2 01 c0       	push   0xc001f208
c001ddaa:	e8 00 26 ff ff       	call   c00103af <KePanic(char const*)>
c001ddaf:	83 c4 10             	add    esp,0x10
c001ddb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddb6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddb8:	85 c0                	test   eax,eax
c001ddba:	74 34                	je     c001ddf0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ddbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ddc3:	85 c0                	test   eax,eax
c001ddc5:	74 29                	je     c001ddf0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001ddc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ddce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ddd2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ddd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddd9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dddd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dde0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dde4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dde7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ddee:	eb 65                	jmp    c001de55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001ddf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddf4:	8b 00                	mov    eax,DWORD PTR [eax]
c001ddf6:	85 c0                	test   eax,eax
c001ddf8:	75 4b                	jne    c001de45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001ddfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001de01:	85 c0                	test   eax,eax
c001de03:	75 40                	jne    c001de45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001de05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001de0d:	89 10                	mov    DWORD PTR [eax],edx
c001de0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de13:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001de17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001de1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001de21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001de28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001de2f:	85 c0                	test   eax,eax
c001de31:	74 22                	je     c001de55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001de33:	83 ec 0c             	sub    esp,0xc
c001de36:	68 2a f2 01 c0       	push   0xc001f22a
c001de3b:	e8 6f 25 ff ff       	call   c00103af <KePanic(char const*)>
c001de40:	83 c4 10             	add    esp,0x10
c001de43:	eb 10                	jmp    c001de55 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001de45:	83 ec 0c             	sub    esp,0xc
c001de48:	68 34 f2 01 c0       	push   0xc001f234
c001de4d:	e8 5d 25 ff ff       	call   c00103af <KePanic(char const*)>
c001de52:	83 c4 10             	add    esp,0x10
c001de55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001de5c:	8d 50 01             	lea    edx,[eax+0x1]
c001de5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de63:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001de66:	90                   	nop
c001de67:	83 c4 0c             	add    esp,0xc
c001de6a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001de6c <LinkedList<UnixFile>::getFirstElement()>:
c001de6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de70:	8b 00                	mov    eax,DWORD PTR [eax]
c001de72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001de74 <LinkedList<UnixFile>::removeFirst()>:
c001de74:	83 ec 0c             	sub    esp,0xc
c001de77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de7b:	8b 00                	mov    eax,DWORD PTR [eax]
c001de7d:	85 c0                	test   eax,eax
c001de7f:	75 12                	jne    c001de93 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001de81:	83 ec 0c             	sub    esp,0xc
c001de84:	68 40 f2 01 c0       	push   0xc001f240
c001de89:	e8 21 25 ff ff       	call   c00103af <KePanic(char const*)>
c001de8e:	83 c4 10             	add    esp,0x10
c001de91:	eb 7e                	jmp    c001df11 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001de93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001de9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001de9d:	85 c0                	test   eax,eax
c001de9f:	74 10                	je     c001deb1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001dea1:	83 ec 0c             	sub    esp,0xc
c001dea4:	68 8b f2 01 c0       	push   0xc001f28b
c001dea9:	e8 01 25 ff ff       	call   c00103af <KePanic(char const*)>
c001deae:	83 c4 10             	add    esp,0x10
c001deb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001deb5:	8b 00                	mov    eax,DWORD PTR [eax]
c001deb7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001deba:	85 c0                	test   eax,eax
c001debc:	75 33                	jne    c001def1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001debe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dec2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001dec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001decc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ded3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ded7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001deda:	83 f8 01             	cmp    eax,0x1
c001dedd:	74 21                	je     c001df00 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001dedf:	83 ec 0c             	sub    esp,0xc
c001dee2:	68 64 f2 01 c0       	push   0xc001f264
c001dee7:	e8 c3 24 ff ff       	call   c00103af <KePanic(char const*)>
c001deec:	83 c4 10             	add    esp,0x10
c001deef:	eb 0f                	jmp    c001df00 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001def1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001def5:	8b 00                	mov    eax,DWORD PTR [eax]
c001def7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001defa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001defe:	89 10                	mov    DWORD PTR [eax],edx
c001df00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001df07:	8d 50 ff             	lea    edx,[eax-0x1]
c001df0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001df11:	83 c4 0c             	add    esp,0xc
c001df14:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001df16 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001df16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001df1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001df1d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001df1e <DriverlessDevice::~DriverlessDevice()>:
c001df1e:	ba dc f8 01 c0       	mov    edx,0xc001f8dc
c001df23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df27:	89 10                	mov    DWORD PTR [eax],edx
c001df29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df2d:	50                   	push   eax
c001df2e:	e8 07 da fe ff       	call   c000b93a <Device::~Device()>
c001df33:	83 c4 04             	add    esp,0x4
c001df36:	90                   	nop
c001df37:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001df38 <DriverlessDevice::~DriverlessDevice()>:
c001df38:	83 ec 0c             	sub    esp,0xc
c001df3b:	83 ec 0c             	sub    esp,0xc
c001df3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df42:	e8 d7 ff ff ff       	call   c001df1e <DriverlessDevice::~DriverlessDevice()>
c001df47:	83 c4 10             	add    esp,0x10
c001df4a:	83 ec 08             	sub    esp,0x8
c001df4d:	68 58 01 00 00       	push   0x158
c001df52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df56:	e8 a9 c5 fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001df5b:	83 c4 10             	add    esp,0x10
c001df5e:	83 c4 0c             	add    esp,0xc
c001df61:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001df62 <LinkedList<Device>::addElement(Device*)>:
c001df62:	83 ec 0c             	sub    esp,0xc
c001df65:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001df6a:	75 10                	jne    c001df7c <LinkedList<Device>::addElement(Device*)+0x1a>
c001df6c:	83 ec 0c             	sub    esp,0xc
c001df6f:	68 08 f2 01 c0       	push   0xc001f208
c001df74:	e8 36 24 ff ff       	call   c00103af <KePanic(char const*)>
c001df79:	83 c4 10             	add    esp,0x10
c001df7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df80:	8b 00                	mov    eax,DWORD PTR [eax]
c001df82:	85 c0                	test   eax,eax
c001df84:	74 3a                	je     c001dfc0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001df86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df8d:	85 c0                	test   eax,eax
c001df8f:	74 2f                	je     c001dfc0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001df91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001df98:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df9c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001dfa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfa6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dfaa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dfad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dfb4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001dfbe:	eb 68                	jmp    c001e028 <LinkedList<Device>::addElement(Device*)+0xc6>
c001dfc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001dfc6:	85 c0                	test   eax,eax
c001dfc8:	75 4e                	jne    c001e018 <LinkedList<Device>::addElement(Device*)+0xb6>
c001dfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dfd1:	85 c0                	test   eax,eax
c001dfd3:	75 43                	jne    c001e018 <LinkedList<Device>::addElement(Device*)+0xb6>
c001dfd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfd9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dfdd:	89 10                	mov    DWORD PTR [eax],edx
c001dfdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfe3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dfe7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dfea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dff1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001dffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dfff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e002:	85 c0                	test   eax,eax
c001e004:	74 22                	je     c001e028 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e006:	83 ec 0c             	sub    esp,0xc
c001e009:	68 2a f2 01 c0       	push   0xc001f22a
c001e00e:	e8 9c 23 ff ff       	call   c00103af <KePanic(char const*)>
c001e013:	83 c4 10             	add    esp,0x10
c001e016:	eb 10                	jmp    c001e028 <LinkedList<Device>::addElement(Device*)+0xc6>
c001e018:	83 ec 0c             	sub    esp,0xc
c001e01b:	68 34 f2 01 c0       	push   0xc001f234
c001e020:	e8 8a 23 ff ff       	call   c00103af <KePanic(char const*)>
c001e025:	83 c4 10             	add    esp,0x10
c001e028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e02c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e02f:	8d 50 01             	lea    edx,[eax+0x1]
c001e032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e036:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e039:	90                   	nop
c001e03a:	83 c4 0c             	add    esp,0xc
c001e03d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e03e <LinkedList<Device>::LinkedList()>:
c001e03e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e042:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e04c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e053:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e057:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e05e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e062:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e06c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e073:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e077:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e07e:	90                   	nop
c001e07f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e080 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e084:	8b 00                	mov    eax,DWORD PTR [eax]
c001e086:	85 c0                	test   eax,eax
c001e088:	75 0e                	jne    c001e098 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e08e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e091:	85 c0                	test   eax,eax
c001e093:	75 03                	jne    c001e098 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e095:	b0 01                	mov    al,0x1
c001e097:	c3                   	ret    
c001e098:	b0 00                	mov    al,0x0
c001e09a:	90                   	nop
c001e09b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e09c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e09c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e0a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e0a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e0a4:	83 ec 0c             	sub    esp,0xc
c001e0a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0ad:	85 c0                	test   eax,eax
c001e0af:	75 17                	jne    c001e0c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001e0b1:	83 ec 0c             	sub    esp,0xc
c001e0b4:	68 40 f2 01 c0       	push   0xc001f240
c001e0b9:	e8 f1 22 ff ff       	call   c00103af <KePanic(char const*)>
c001e0be:	83 c4 10             	add    esp,0x10
c001e0c1:	e9 92 00 00 00       	jmp    c001e158 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001e0c6:	66 90                	xchg   ax,ax
c001e0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e0cf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e0d2:	85 c0                	test   eax,eax
c001e0d4:	0f 95 c0             	setne  al
c001e0d7:	84 c0                	test   al,al
c001e0d9:	74 11                	je     c001e0ec <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001e0db:	83 ec 0c             	sub    esp,0xc
c001e0de:	68 8b f2 01 c0       	push   0xc001f28b
c001e0e3:	e8 c7 22 ff ff       	call   c00103af <KePanic(char const*)>
c001e0e8:	83 c4 10             	add    esp,0x10
c001e0eb:	90                   	nop
c001e0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0f2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e0f5:	85 c0                	test   eax,eax
c001e0f7:	0f 94 c0             	sete   al
c001e0fa:	84 c0                	test   al,al
c001e0fc:	74 36                	je     c001e134 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001e0fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e102:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e10c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e117:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e11a:	83 f8 01             	cmp    eax,0x1
c001e11d:	74 25                	je     c001e144 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001e11f:	83 ec 0c             	sub    esp,0xc
c001e122:	68 64 f2 01 c0       	push   0xc001f264
c001e127:	e8 83 22 ff ff       	call   c00103af <KePanic(char const*)>
c001e12c:	83 c4 10             	add    esp,0x10
c001e12f:	eb 13                	jmp    c001e144 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001e131:	8d 76 00             	lea    esi,[esi+0x0]
c001e134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e138:	8b 00                	mov    eax,DWORD PTR [eax]
c001e13a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e13d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e141:	89 10                	mov    DWORD PTR [eax],edx
c001e143:	90                   	nop
c001e144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e148:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e14b:	8d 50 ff             	lea    edx,[eax-0x1]
c001e14e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e152:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e155:	8d 76 00             	lea    esi,[esi+0x0]
c001e158:	83 c4 0c             	add    esp,0xc
c001e15b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e15c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e15c:	83 ec 0c             	sub    esp,0xc
c001e15f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e164:	75 12                	jne    c001e178 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001e166:	83 ec 0c             	sub    esp,0xc
c001e169:	68 08 f2 01 c0       	push   0xc001f208
c001e16e:	e8 3c 22 ff ff       	call   c00103af <KePanic(char const*)>
c001e173:	83 c4 10             	add    esp,0x10
c001e176:	66 90                	xchg   ax,ax
c001e178:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e17c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e17e:	85 c0                	test   eax,eax
c001e180:	74 36                	je     c001e1b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001e182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e186:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e189:	85 c0                	test   eax,eax
c001e18b:	74 2b                	je     c001e1b8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001e18d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e191:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e194:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e198:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e19b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e19f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1a3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e1ad:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e1b4:	eb 6a                	jmp    c001e220 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e1b6:	66 90                	xchg   ax,ax
c001e1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1bc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e1be:	85 c0                	test   eax,eax
c001e1c0:	75 4e                	jne    c001e210 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001e1c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e1c9:	85 c0                	test   eax,eax
c001e1cb:	75 43                	jne    c001e210 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001e1cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1d5:	89 10                	mov    DWORD PTR [eax],edx
c001e1d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e1df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e1e9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e1f7:	85 c0                	test   eax,eax
c001e1f9:	74 25                	je     c001e220 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e1fb:	83 ec 0c             	sub    esp,0xc
c001e1fe:	68 2a f2 01 c0       	push   0xc001f22a
c001e203:	e8 a7 21 ff ff       	call   c00103af <KePanic(char const*)>
c001e208:	83 c4 10             	add    esp,0x10
c001e20b:	eb 13                	jmp    c001e220 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001e20d:	8d 76 00             	lea    esi,[esi+0x0]
c001e210:	83 ec 0c             	sub    esp,0xc
c001e213:	68 34 f2 01 c0       	push   0xc001f234
c001e218:	e8 92 21 ff ff       	call   c00103af <KePanic(char const*)>
c001e21d:	83 c4 10             	add    esp,0x10
c001e220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e224:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e227:	8d 50 01             	lea    edx,[eax+0x1]
c001e22a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e22e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e231:	90                   	nop
c001e232:	83 c4 0c             	add    esp,0xc
c001e235:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001e238 <ACPI::~ACPI()>:
c001e238:	83 ec 0c             	sub    esp,0xc
c001e23b:	ba a8 fe 01 c0       	mov    edx,0xc001fea8
c001e240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e244:	89 10                	mov    DWORD PTR [eax],edx
c001e246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e24a:	83 ec 0c             	sub    esp,0xc
c001e24d:	50                   	push   eax
c001e24e:	e8 e7 d6 fe ff       	call   c000b93a <Device::~Device()>
c001e253:	83 c4 10             	add    esp,0x10
c001e256:	90                   	nop
c001e257:	83 c4 0c             	add    esp,0xc
c001e25a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001e25c <ACPI::~ACPI()>:
c001e25c:	83 ec 0c             	sub    esp,0xc
c001e25f:	83 ec 0c             	sub    esp,0xc
c001e262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e266:	e8 cd ff ff ff       	call   c001e238 <ACPI::~ACPI()>
c001e26b:	83 c4 10             	add    esp,0x10
c001e26e:	83 ec 08             	sub    esp,0x8
c001e271:	68 64 12 00 00       	push   0x1264
c001e276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e27a:	e8 85 c2 fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e27f:	83 c4 10             	add    esp,0x10
c001e282:	83 c4 0c             	add    esp,0xc
c001e285:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001e288 <LinkedList<Device>::~LinkedList()>:
c001e288:	90                   	nop
c001e289:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001e28c <LinkedList<Device>::isEmpty()>:
c001e28c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e290:	8b 00                	mov    eax,DWORD PTR [eax]
c001e292:	85 c0                	test   eax,eax
c001e294:	75 0e                	jne    c001e2a4 <LinkedList<Device>::isEmpty()+0x18>
c001e296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e29a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e29d:	85 c0                	test   eax,eax
c001e29f:	75 03                	jne    c001e2a4 <LinkedList<Device>::isEmpty()+0x18>
c001e2a1:	b0 01                	mov    al,0x1
c001e2a3:	c3                   	ret    
c001e2a4:	b0 00                	mov    al,0x0
c001e2a6:	90                   	nop
c001e2a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001e2a8 <LinkedList<Device>::getFirstElement()>:
c001e2a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e2ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2ae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001e2b0 <LinkedList<Device>::removeFirst()>:
c001e2b0:	83 ec 0c             	sub    esp,0xc
c001e2b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2b9:	85 c0                	test   eax,eax
c001e2bb:	75 17                	jne    c001e2d4 <LinkedList<Device>::removeFirst()+0x24>
c001e2bd:	83 ec 0c             	sub    esp,0xc
c001e2c0:	68 40 f2 01 c0       	push   0xc001f240
c001e2c5:	e8 e5 20 ff ff       	call   c00103af <KePanic(char const*)>
c001e2ca:	83 c4 10             	add    esp,0x10
c001e2cd:	e9 92 00 00 00       	jmp    c001e364 <LinkedList<Device>::removeFirst()+0xb4>
c001e2d2:	66 90                	xchg   ax,ax
c001e2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e2db:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e2e1:	85 c0                	test   eax,eax
c001e2e3:	74 13                	je     c001e2f8 <LinkedList<Device>::removeFirst()+0x48>
c001e2e5:	83 ec 0c             	sub    esp,0xc
c001e2e8:	68 8b f2 01 c0       	push   0xc001f28b
c001e2ed:	e8 bd 20 ff ff       	call   c00103af <KePanic(char const*)>
c001e2f2:	83 c4 10             	add    esp,0x10
c001e2f5:	8d 76 00             	lea    esi,[esi+0x0]
c001e2f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2fc:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2fe:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001e304:	85 c0                	test   eax,eax
c001e306:	75 34                	jne    c001e33c <LinkedList<Device>::removeFirst()+0x8c>
c001e308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e30c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e316:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e31d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e321:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e324:	83 f8 01             	cmp    eax,0x1
c001e327:	74 27                	je     c001e350 <LinkedList<Device>::removeFirst()+0xa0>
c001e329:	83 ec 0c             	sub    esp,0xc
c001e32c:	68 64 f2 01 c0       	push   0xc001f264
c001e331:	e8 79 20 ff ff       	call   c00103af <KePanic(char const*)>
c001e336:	83 c4 10             	add    esp,0x10
c001e339:	eb 15                	jmp    c001e350 <LinkedList<Device>::removeFirst()+0xa0>
c001e33b:	90                   	nop
c001e33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e340:	8b 00                	mov    eax,DWORD PTR [eax]
c001e342:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001e348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e34c:	89 10                	mov    DWORD PTR [eax],edx
c001e34e:	66 90                	xchg   ax,ax
c001e350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e354:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e357:	8d 50 ff             	lea    edx,[eax-0x1]
c001e35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e35e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e361:	8d 76 00             	lea    esi,[esi+0x0]
c001e364:	83 c4 0c             	add    esp,0xc
c001e367:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001e368 <CPU::~CPU()>:
c001e368:	83 ec 0c             	sub    esp,0xc
c001e36b:	ba 44 00 02 c0       	mov    edx,0xc0020044
c001e370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e374:	89 10                	mov    DWORD PTR [eax],edx
c001e376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37a:	83 ec 0c             	sub    esp,0xc
c001e37d:	50                   	push   eax
c001e37e:	e8 b7 d5 fe ff       	call   c000b93a <Device::~Device()>
c001e383:	83 c4 10             	add    esp,0x10
c001e386:	90                   	nop
c001e387:	83 c4 0c             	add    esp,0xc
c001e38a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001e38c <CPU::~CPU()>:
c001e38c:	83 ec 0c             	sub    esp,0xc
c001e38f:	83 ec 0c             	sub    esp,0xc
c001e392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e396:	e8 cd ff ff ff       	call   c001e368 <CPU::~CPU()>
c001e39b:	83 c4 10             	add    esp,0x10
c001e39e:	83 ec 08             	sub    esp,0x8
c001e3a1:	68 94 11 00 00       	push   0x1194
c001e3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e3aa:	e8 55 c1 fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e3af:	83 c4 10             	add    esp,0x10
c001e3b2:	83 c4 0c             	add    esp,0xc
c001e3b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001e3b8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001e3b8:	90                   	nop
c001e3b9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001e3bc <ThreadControlBlock::ThreadControlBlock()>:
c001e3bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3c0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e3c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3cb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001e3d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3d6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001e3dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3e1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001e3e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3ec:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001e3f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3f7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001e3fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3ff:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001e403:	90                   	nop
c001e404:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001e408 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001e408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e40c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e412:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e416:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e41d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e421:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e42c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e436:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e43d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e441:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e448:	90                   	nop
c001e449:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001e44c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001e44c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e450:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e453:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001e454 <PCI::~PCI()>:
c001e454:	83 ec 0c             	sub    esp,0xc
c001e457:	ba cc 0d 02 c0       	mov    edx,0xc0020dcc
c001e45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e460:	89 10                	mov    DWORD PTR [eax],edx
c001e462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e466:	83 ec 0c             	sub    esp,0xc
c001e469:	50                   	push   eax
c001e46a:	e8 55 cf fe ff       	call   c000b3c4 <Bus::~Bus()>
c001e46f:	83 c4 10             	add    esp,0x10
c001e472:	90                   	nop
c001e473:	83 c4 0c             	add    esp,0xc
c001e476:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001e478 <PCI::~PCI()>:
c001e478:	83 ec 0c             	sub    esp,0xc
c001e47b:	83 ec 0c             	sub    esp,0xc
c001e47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e482:	e8 cd ff ff ff       	call   c001e454 <PCI::~PCI()>
c001e487:	83 c4 10             	add    esp,0x10
c001e48a:	83 ec 08             	sub    esp,0x8
c001e48d:	68 5c 01 00 00       	push   0x15c
c001e492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e496:	e8 69 c0 fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e49b:	83 c4 10             	add    esp,0x10
c001e49e:	83 c4 0c             	add    esp,0xc
c001e4a1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001e4a2 <IDE::~IDE()>:
c001e4a2:	83 ec 0c             	sub    esp,0xc
c001e4a5:	ba 80 0e 02 c0       	mov    edx,0xc0020e80
c001e4aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4ae:	89 10                	mov    DWORD PTR [eax],edx
c001e4b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4b4:	83 ec 0c             	sub    esp,0xc
c001e4b7:	50                   	push   eax
c001e4b8:	e8 f7 d8 fe ff       	call   c000bdb4 <HardDiskController::~HardDiskController()>
c001e4bd:	83 c4 10             	add    esp,0x10
c001e4c0:	90                   	nop
c001e4c1:	83 c4 0c             	add    esp,0xc
c001e4c4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001e4c6 <IDE::~IDE()>:
c001e4c6:	83 ec 0c             	sub    esp,0xc
c001e4c9:	83 ec 0c             	sub    esp,0xc
c001e4cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4d0:	e8 cd ff ff ff       	call   c001e4a2 <IDE::~IDE()>
c001e4d5:	83 c4 10             	add    esp,0x10
c001e4d8:	83 ec 08             	sub    esp,0x8
c001e4db:	68 70 02 00 00       	push   0x270
c001e4e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e4e4:	e8 1b c0 fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e4e9:	83 c4 10             	add    esp,0x10
c001e4ec:	83 c4 0c             	add    esp,0xc
c001e4ef:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001e4f0 <SATABus::~SATABus()>:
c001e4f0:	83 ec 0c             	sub    esp,0xc
c001e4f3:	ba d0 0e 02 c0       	mov    edx,0xc0020ed0
c001e4f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4fc:	89 10                	mov    DWORD PTR [eax],edx
c001e4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e502:	83 ec 0c             	sub    esp,0xc
c001e505:	50                   	push   eax
c001e506:	e8 a9 d8 fe ff       	call   c000bdb4 <HardDiskController::~HardDiskController()>
c001e50b:	83 c4 10             	add    esp,0x10
c001e50e:	90                   	nop
c001e50f:	83 c4 0c             	add    esp,0xc
c001e512:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001e514 <SATABus::~SATABus()>:
c001e514:	83 ec 0c             	sub    esp,0xc
c001e517:	83 ec 0c             	sub    esp,0xc
c001e51a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e51e:	e8 cd ff ff ff       	call   c001e4f0 <SATABus::~SATABus()>
c001e523:	83 c4 10             	add    esp,0x10
c001e526:	83 ec 08             	sub    esp,0x8
c001e529:	68 64 01 00 00       	push   0x164
c001e52e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e532:	e8 cd bf fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e537:	83 c4 10             	add    esp,0x10
c001e53a:	83 c4 0c             	add    esp,0xc
c001e53d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001e53e <ATA::~ATA()>:
c001e53e:	83 ec 0c             	sub    esp,0xc
c001e541:	ba 10 0f 02 c0       	mov    edx,0xc0020f10
c001e546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e54a:	89 10                	mov    DWORD PTR [eax],edx
c001e54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e550:	83 ec 0c             	sub    esp,0xc
c001e553:	50                   	push   eax
c001e554:	e8 3d d9 fe ff       	call   c000be96 <PhysicalDisk::~PhysicalDisk()>
c001e559:	83 c4 10             	add    esp,0x10
c001e55c:	90                   	nop
c001e55d:	83 c4 0c             	add    esp,0xc
c001e560:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001e562 <ATA::~ATA()>:
c001e562:	83 ec 0c             	sub    esp,0xc
c001e565:	83 ec 0c             	sub    esp,0xc
c001e568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e56c:	e8 cd ff ff ff       	call   c001e53e <ATA::~ATA()>
c001e571:	83 c4 10             	add    esp,0x10
c001e574:	83 ec 08             	sub    esp,0x8
c001e577:	68 7c 01 00 00       	push   0x17c
c001e57c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e580:	e8 7f bf fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e585:	83 c4 10             	add    esp,0x10
c001e588:	83 c4 0c             	add    esp,0xc
c001e58b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001e58c <ATAPI::~ATAPI()>:
c001e58c:	83 ec 0c             	sub    esp,0xc
c001e58f:	ba 58 0f 02 c0       	mov    edx,0xc0020f58
c001e594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e598:	89 10                	mov    DWORD PTR [eax],edx
c001e59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e59e:	83 ec 0c             	sub    esp,0xc
c001e5a1:	50                   	push   eax
c001e5a2:	e8 ef d8 fe ff       	call   c000be96 <PhysicalDisk::~PhysicalDisk()>
c001e5a7:	83 c4 10             	add    esp,0x10
c001e5aa:	90                   	nop
c001e5ab:	83 c4 0c             	add    esp,0xc
c001e5ae:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001e5b0 <ATAPI::~ATAPI()>:
c001e5b0:	83 ec 0c             	sub    esp,0xc
c001e5b3:	83 ec 0c             	sub    esp,0xc
c001e5b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5ba:	e8 cd ff ff ff       	call   c001e58c <ATAPI::~ATAPI()>
c001e5bf:	83 c4 10             	add    esp,0x10
c001e5c2:	83 ec 08             	sub    esp,0x8
c001e5c5:	68 84 01 00 00       	push   0x184
c001e5ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e5ce:	e8 31 bf fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e5d3:	83 c4 10             	add    esp,0x10
c001e5d6:	83 c4 0c             	add    esp,0xc
c001e5d9:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001e5da <SATA::~SATA()>:
c001e5da:	83 ec 0c             	sub    esp,0xc
c001e5dd:	ba 0c 10 02 c0       	mov    edx,0xc002100c
c001e5e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5e6:	89 10                	mov    DWORD PTR [eax],edx
c001e5e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5ec:	83 ec 0c             	sub    esp,0xc
c001e5ef:	50                   	push   eax
c001e5f0:	e8 a1 d8 fe ff       	call   c000be96 <PhysicalDisk::~PhysicalDisk()>
c001e5f5:	83 c4 10             	add    esp,0x10
c001e5f8:	90                   	nop
c001e5f9:	83 c4 0c             	add    esp,0xc
c001e5fc:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001e5fe <SATA::~SATA()>:
c001e5fe:	83 ec 0c             	sub    esp,0xc
c001e601:	83 ec 0c             	sub    esp,0xc
c001e604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e608:	e8 cd ff ff ff       	call   c001e5da <SATA::~SATA()>
c001e60d:	83 c4 10             	add    esp,0x10
c001e610:	83 ec 08             	sub    esp,0x8
c001e613:	68 7c 01 00 00       	push   0x17c
c001e618:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e61c:	e8 e3 be fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e621:	83 c4 10             	add    esp,0x10
c001e624:	83 c4 0c             	add    esp,0xc
c001e627:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001e628 <SATAPI::~SATAPI()>:
c001e628:	83 ec 0c             	sub    esp,0xc
c001e62b:	ba 30 11 02 c0       	mov    edx,0xc0021130
c001e630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e634:	89 10                	mov    DWORD PTR [eax],edx
c001e636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e63a:	83 ec 0c             	sub    esp,0xc
c001e63d:	50                   	push   eax
c001e63e:	e8 53 d8 fe ff       	call   c000be96 <PhysicalDisk::~PhysicalDisk()>
c001e643:	83 c4 10             	add    esp,0x10
c001e646:	90                   	nop
c001e647:	83 c4 0c             	add    esp,0xc
c001e64a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001e64c <SATAPI::~SATAPI()>:
c001e64c:	83 ec 0c             	sub    esp,0xc
c001e64f:	83 ec 0c             	sub    esp,0xc
c001e652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e656:	e8 cd ff ff ff       	call   c001e628 <SATAPI::~SATAPI()>
c001e65b:	83 c4 10             	add    esp,0x10
c001e65e:	83 ec 08             	sub    esp,0x8
c001e661:	68 84 01 00 00       	push   0x184
c001e666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e66a:	e8 95 be fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e66f:	83 c4 10             	add    esp,0x10
c001e672:	83 c4 0c             	add    esp,0xc
c001e675:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001e676 <IOAPIC::~IOAPIC()>:
c001e676:	83 ec 0c             	sub    esp,0xc
c001e679:	ba 70 11 02 c0       	mov    edx,0xc0021170
c001e67e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e682:	89 10                	mov    DWORD PTR [eax],edx
c001e684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e688:	83 ec 0c             	sub    esp,0xc
c001e68b:	50                   	push   eax
c001e68c:	e8 a9 d2 fe ff       	call   c000b93a <Device::~Device()>
c001e691:	83 c4 10             	add    esp,0x10
c001e694:	90                   	nop
c001e695:	83 c4 0c             	add    esp,0xc
c001e698:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001e69a <IOAPIC::~IOAPIC()>:
c001e69a:	83 ec 0c             	sub    esp,0xc
c001e69d:	83 ec 0c             	sub    esp,0xc
c001e6a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6a4:	e8 cd ff ff ff       	call   c001e676 <IOAPIC::~IOAPIC()>
c001e6a9:	83 c4 10             	add    esp,0x10
c001e6ac:	83 ec 08             	sub    esp,0x8
c001e6af:	68 68 01 00 00       	push   0x168
c001e6b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6b8:	e8 47 be fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e6bd:	83 c4 10             	add    esp,0x10
c001e6c0:	83 c4 0c             	add    esp,0xc
c001e6c3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001e6c4 <APICTimer::~APICTimer()>:
c001e6c4:	83 ec 0c             	sub    esp,0xc
c001e6c7:	ba b8 11 02 c0       	mov    edx,0xc00211b8
c001e6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6d0:	89 10                	mov    DWORD PTR [eax],edx
c001e6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6d6:	83 ec 0c             	sub    esp,0xc
c001e6d9:	50                   	push   eax
c001e6da:	e8 49 ec fe ff       	call   c000d328 <Timer::~Timer()>
c001e6df:	83 c4 10             	add    esp,0x10
c001e6e2:	90                   	nop
c001e6e3:	83 c4 0c             	add    esp,0xc
c001e6e6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001e6e8 <APICTimer::~APICTimer()>:
c001e6e8:	83 ec 0c             	sub    esp,0xc
c001e6eb:	83 ec 0c             	sub    esp,0xc
c001e6ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e6f2:	e8 cd ff ff ff       	call   c001e6c4 <APICTimer::~APICTimer()>
c001e6f7:	83 c4 10             	add    esp,0x10
c001e6fa:	83 ec 08             	sub    esp,0x8
c001e6fd:	68 60 01 00 00       	push   0x160
c001e702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e706:	e8 f9 bd fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e70b:	83 c4 10             	add    esp,0x10
c001e70e:	83 c4 0c             	add    esp,0xc
c001e711:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001e714 <PIT::~PIT()>:
c001e714:	83 ec 0c             	sub    esp,0xc
c001e717:	ba 08 12 02 c0       	mov    edx,0xc0021208
c001e71c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e720:	89 10                	mov    DWORD PTR [eax],edx
c001e722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e726:	83 ec 0c             	sub    esp,0xc
c001e729:	50                   	push   eax
c001e72a:	e8 f9 eb fe ff       	call   c000d328 <Timer::~Timer()>
c001e72f:	83 c4 10             	add    esp,0x10
c001e732:	90                   	nop
c001e733:	83 c4 0c             	add    esp,0xc
c001e736:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001e738 <PIT::~PIT()>:
c001e738:	83 ec 0c             	sub    esp,0xc
c001e73b:	83 ec 0c             	sub    esp,0xc
c001e73e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e742:	e8 cd ff ff ff       	call   c001e714 <PIT::~PIT()>
c001e747:	83 c4 10             	add    esp,0x10
c001e74a:	83 ec 08             	sub    esp,0x8
c001e74d:	68 5c 01 00 00       	push   0x15c
c001e752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e756:	e8 a9 bd fe ff       	call   c000a504 <operator delete(void*, unsigned long)>
c001e75b:	83 c4 10             	add    esp,0x10
c001e75e:	83 c4 0c             	add    esp,0xc
c001e761:	c3                   	ret    

Disassembly of section userkernel:

c0022000 <KiDefaultSignalHandlerAbort(int)>:
c0022000:	57                   	push   edi
c0022001:	b9 07 00 00 00       	mov    ecx,0x7
c0022006:	56                   	push   esi
c0022007:	be 35 01 02 c0       	mov    esi,0xc0020135
c002200c:	83 ec 24             	sub    esp,0x24
c002200f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0022013:	fc                   	cld    
c0022014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002201a:	50                   	push   eax
c002201b:	6a 00                	push   0x0
c002201d:	6a 38                	push   0x38
c002201f:	6a 01                	push   0x1
c0022021:	e8 2c 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0022026:	83 c4 34             	add    esp,0x34
c0022029:	5e                   	pop    esi
c002202a:	5f                   	pop    edi
c002202b:	c3                   	ret    

c002202c <KiDefaultSignalHandlerTerminate(int)>:
c002202c:	57                   	push   edi
c002202d:	b9 08 00 00 00       	mov    ecx,0x8
c0022032:	56                   	push   esi
c0022033:	be 51 01 02 c0       	mov    esi,0xc0020151
c0022038:	83 ec 24             	sub    esp,0x24
c002203b:	89 e7                	mov    edi,esp
c002203d:	fc                   	cld    
c002203e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022040:	54                   	push   esp
c0022041:	6a 00                	push   0x0
c0022043:	6a 37                	push   0x37
c0022045:	6a 01                	push   0x1
c0022047:	e8 06 00 00 00       	call   c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002204c:	83 c4 34             	add    esp,0x34
c002204f:	5e                   	pop    esi
c0022050:	5f                   	pop    edi
c0022051:	c3                   	ret    

c0022052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0022052:	53                   	push   ebx
c0022053:	83 ec 10             	sub    esp,0x10
c0022056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002205a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002205e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022066:	cd 60                	int    0x60
c0022068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002206c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022078:	83 c4 10             	add    esp,0x10
c002207b:	5b                   	pop    ebx
c002207c:	c3                   	ret    

Disassembly of section align_previous:

c0023000 <DO_NOT_DELETE()>:
c0023000:	c3                   	ret    
